Перем мДлинаСуток;

// Механизм исправлений
Перем мВосстанавливатьДвижения;
Перем мСоответствиеДвижений;
Перем мИсправляемыйДокумент;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА   

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.КомандировкиОрганизаций
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПроведениеРасчетов.ЗаполнитьИсправлениеПоКадровомуДокументу(ЭтотОбъект, ИсходныйДокумент.Ссылка, Сотрудники);
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

#Если Клиент Тогда

// Формирует запрос по документу и связанным регистрам сведений
//
// Параметры: 
//  Режим - строка, может принимать значения:
//			"ПоРеквизитамДокумента"
//			"ПоТабличнойЧастиРаботники"
//			"ПоТабличнойЧастиОтпуска"
//
// Возвращаемое значение:
//  Результат запроса с данными об организации или о работниках из табличной части
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	 Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("ДатаДокумента",	 Дата);
	Запрос.УстановитьПараметр("ПустаяДата",		 '00010101');

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтзывИзОтпусков.Дата КАК ДатаДок,
		|	ОтзывИзОтпусков.Номер КАК НомерДок,
		|	ВЫРАЗИТЬ(ОтзывИзОтпусков.Организация.НаименованиеПолное КАК СТРОКА(1000)) КАК НазваниеОрганизации,
		|	ОтзывИзОтпусков.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Представление КАК ДолжностьРуководителя,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОРуководителя,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо
		|ИЗ
		|	Документ.ОтзывИзОтпусковОрганизаций КАК ОтзывИзОтпусков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО ОтзывИзОтпусков.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|
		|ГДЕ
		|	ОтзывИзОтпусков.Ссылка = &ТекущийДокумент";

	ИначеЕсли Режим = "ПоТабличнойЧастиРаботники" Тогда

		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, ОтзывИзОтпусков.ФизЛицо.Наименование) КАК Работник,
		|	ДанныеОРаботникахОрганизации.ПодразделениеОрганизацииНаименование КАК ПодразделениеРаботника,
		|	ДанныеОРаботникахОрганизации.ДолжностьНаименование КАК Должность,
		|	ДанныеОРаботникахОрганизации.ТарифныйРазрядНаименование КАК ТарифныйРазряд,
		|	ДанныеОРаботникахОрганизации.Сотрудник.Код КАК ТабельныйНомер,
		|	ОтзывИзОтпусков.НомерСтроки КАК НомерСтрокиРаботники,
		|	ОтзывИзОтпусков.ДатаОтзыва КАК ДатаОтзыва,
		|	ТрудовыеОтпуска.ВидТрудовогоОтпуска.Наименование КАК ВидОтпуска,
		|	ТрудовыеОтпуска.РабочийГодПо,
		|	ТрудовыеОтпуска.РабочийГодС,
		|	ТрудовыеОтпуска.ДнейОтпуска КАК Продолжительность,
		|	ЕСТЬNULL(КомпенсацияЗаНеиспользованныйОтпуск.ДнейОтпуска, 0) КАК ПродолжительностьВсего,
		|	ВЫРАЗИТЬ(ОтзывИзОтпусков.Основание КАК СТРОКА(1000)) Основание
		|ИЗ
		|	Документ.ОтзывИзОтпусковОрганизаций.РаботникиОрганизации КАК ОтзывИзОтпусков
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтзывИзОтпусковОрганизаций.Отпуска КАК ТрудовыеОтпуска
		|			ПО ТрудовыеОтпуска.Ссылка = &ТекущийДокумент
		|				И ОтзывИзОтпусков.Сотрудник = ТрудовыеОтпуска.Сотрудник
		|				И ОтзывИзОтпусков.ДатаОтзыва = ТрудовыеОтпуска.ДатаОтзыва
		|				И ТрудовыеОтпуска.ПредоставитьКомпенсацию
		|				И ОтзывИзОтпусков.Сторно = ТрудовыеОтпуска.Сторно
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки,
		|			СУММА(ТЧОтпуска.ДнейОтпуска) КАК ДнейОтпуска
		|		ИЗ
		|			Документ.ОтзывИзОтпусковОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтзывИзОтпусковОрганизаций.Отпуска КАК ТЧОтпуска
		|				ПО ТЧОтпуска.Ссылка = &ТекущийДокумент
		|					И ТЧРаботникиОрганизации.Сотрудник = ТЧОтпуска.Сотрудник
		|					И ТЧРаботникиОрганизации.ДатаОтзыва = ТЧОтпуска.ДатаОтзыва
		|					И ТЧОтпуска.ПредоставитьКомпенсацию
		|					И ТЧРаботникиОрганизации.Сторно = ТЧОтпуска.Сторно
		|		ГДЕ
		|			ТЧРаботникиОрганизации.Ссылка = &ТекущийДокумент
		|			И НЕ ТЧРаботникиОрганизации.Сторно
		|		СГРУППИРОВАТЬ ПО 
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК КомпенсацияЗаНеиспользованныйОтпуск
		|		ПО ОтзывИзОтпусков.НомерСтроки = КомпенсацияЗаНеиспользованныйОтпуск.НомерСтроки
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|		&ДатаДокумента,
		|		ФизЛицо В
		|		    (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		        ОтзывИзОтпусков.ФизЛицо
		|		    ИЗ
		|		        Документ.ОтзывИзОтпусковОрганизаций.РаботникиОрганизации КАК ОтзывИзОтпусков
		|		    ГДЕ
		|		        ОтзывИзОтпусков.Ссылка = &ТекущийДокумент
		|		        И НЕ ОтзывИзОтпусков.Сторно)) КАК ФИОФизЛиц
		|		ПО ОтзывИзОтпусков.ФизЛицо = ФИОФизЛиц.ФизЛицо
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СписокДат.Сотрудник КАК Сотрудник,
		|			РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
		|			РаботникиОрганизации.Должность.Наименование КАК ДолжностьНаименование,
		|			РаботникиОрганизации.ТарифныйРазряд.Наименование КАК ТарифныйРазрядНаименование,
		|			РаботникиОрганизации.Сотрудник.Код КАК ТабельныйНомер,
		|			СписокДат.НомерСтроки КАК НомерСтроки
		|		ИЗ
		|			(ВЫБРАТЬ
		|				РаботникиВнутри.Сотрудник КАК Сотрудник,
		|				МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения,
		|				ОтзывИзОтпусков.НомерСтроки КАК НомерСтроки
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтзывИзОтпусковОрганизаций.РаботникиОрганизации КАК ОтзывИзОтпусков
		|					ПО РаботникиВнутри.Период <= ОтзывИзОтпусков.ДатаОтзыва
		|						И РаботникиВнутри.Сотрудник = ОтзывИзОтпусков.Сотрудник
		|						И (РаботникиВнутри.Организация = &ГоловнаяОрганизация)
		|			ГДЕ
		|				ОтзывИзОтпусков.Ссылка = &ТекущийДокумент
		|				И НЕ ОтзывИзОтпусков.Сторно
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиВнутри.Сотрудник,
		|				ОтзывИзОтпусков.НомерСтроки) КАК СписокДат
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|				ПО СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник
		|					И (РаботникиОрганизации.Организация = &ГоловнаяОрганизация)
		|					И СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период) КАК ДанныеОРаботникахОрганизации
		|		ПО ОтзывИзОтпусков.НомерСтроки = ДанныеОРаботникахОрганизации.НомерСтроки
		|
		|ГДЕ
		|	ОтзывИзОтпусков.Ссылка = &ТекущийДокумент
		|	И НЕ ОтзывИзОтпусков.Сторно
		|
		|УПОРЯДОЧИТЬ ПО
		|	Работник, ДатаОтзыва, ДатаНачала";

	Иначе
		Возврат Неопределено
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

// Функция формирует табличный документ с печатной формой приказа списком,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьПриказаСписком()

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтзывИзОтпусковОрганизаций_ПриказСписком";

	// получаем данные для печати
	ВыборкаДляШапкиИПодвала = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиРаботники").Выбрать();

	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	// запоминаем области макета
	Макет = ПолучитьМакет("ПриказСписком");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Строка"); // строка работника

	// массив с двумя строками - для разбиения на страницы
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	
	// выводим данные о руководителях организации
	Если ВыборкаДляШапкиИПодвала.Следующий() Тогда 
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации = СокрЛП(ВыборкаДляШапкиИПодвала.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Для подвала
		ОбластьМакетаШапка.Параметры.НомерДок = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	КонецЕсли;

	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.
	ВыведеноСтрок = 0;

	// выводим строки по работникам
	Пока ВыборкаРаботники.Следующий() Цикл

		// Данные по работнику
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		ОбластьМакета.Параметры.Основание = СокрЛП(ВыборкаРаботники.Основание);
		Если ЗначениеЗаполнено(ВыборкаРаботники.ТарифныйРазряд) Тогда
			ОбластьМакета.Параметры.Должность = "" + ВыборкаРаботники.Должность + ", " + ВыборкаРаботники.ТарифныйРазряд;
		КонецЕсли;

		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;

		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
	Для Сч = 1 По ОбластьМакета.Параметры.Количество() Цикл
		ОбластьМакета.Параметры.Установить(Сч - 1,""); 
	КонецЦикла;
	СчПечати = 0;
	ОбластьМакета.Параметры.Работник = " " + Символы.ПС + " ";
	Пока УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти) Цикл
		СчПечати = СчПечати + 1;
		Если СчПечати > 15 Тогда 
			Прервать;
		КонецЕсли;		
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	// выводим предварительно подготовленный Подвал документа.
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьПриказаСписком()	

// Функция формирует табличный документ с печатной формой приказа на одного сотрудника
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьПриказа()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтзывИзОтпусковОрганизаций_Приказ";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиРаботники").Выбрать();

	// запоминаем области макета
	Макет = ПолучитьМакет("Приказ");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаШапкаКомпенсации = Макет.ПолучитьОбласть("ШапкаКомпенсации");// Шапка таблицы компенсации
	ОбластьМакетаОтпуск = Макет.ПолучитьОбласть("Отпуск"); // строка отпуска
	ОбластьМакетаПодвалКомпенсации = Макет.ПолучитьОбласть("ПодвалКомпенсации"); // подвал таблицы компенсации
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа

	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации = СокрЛП(ВыборкаДляШапки.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		НомерДокДляПечати	= ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	    ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати;
	КонецЕсли;

	// Начинаем формировать выходной документ
	ЕстьДанные = ВыборкаРаботники.Следующий();
	
	Пока ЕстьДанные Цикл
		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		НомерСтрокиДляПечати = 1;
		ВыводитьКомпенсацию = ВыборкаРаботники.ПродолжительностьВсего <> 0;
		
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаРаботники);
		ОбластьМакетаШапка.Параметры.Основание = СокрЛП(ВыборкаРаботники.Основание);
		Если ЗначениеЗаполнено(ВыборкаРаботники.ТарифныйРазряд) Тогда
			ОбластьМакетаШапка.Параметры.Должность = "" + ВыборкаРаботники.Должность + ", " + ВыборкаРаботники.ТарифныйРазряд;
		КонецЕсли;

		// Шапка документа.
		Если РаботникиОрганизации.Количество() > 1 Тогда
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВыборкаРаботники.НомерСтрокиРаботники;
		КонецЕсли; 
		
		ОбластьМакетаПодвалКомпенсации.Параметры.Заполнить(ВыборкаРаботники);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаРаботники);
		
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		Если ВыводитьКомпенсацию Тогда
			ТабДокумент.Вывести(ОбластьМакетаШапкаКомпенсации);
		КонецЕсли;
		
		ТекущийНомерСтроки = ВыборкаРаботники.НомерСтрокиРаботники;
		Пока ЕстьДанные
				И ВыборкаРаботники.НомерСтрокиРаботники = ТекущийНомерСтроки Цикл
			
			Если ВыводитьКомпенсацию Тогда
				ОбластьМакетаОтпуск.Параметры.Заполнить(ВыборкаРаботники);
				ОбластьМакетаОтпуск.Параметры.НомерСтрокиДляПечати = НомерСтрокиДляПечати;
				ТабДокумент.Вывести(ОбластьМакетаОтпуск);
				
				НомерСтрокиДляПечати = НомерСтрокиДляПечати + 1;
			КонецЕсли;
				
			ЕстьДанные = ВыборкаРаботники.Следующий();
				
		КонецЦикла;
		
		Если ВыводитьКомпенсацию Тогда
			ТабДокумент.Вывести(ОбластьМакетаПодвалКомпенсации);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаПодвал);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакетаШапкаКомпенсации);
		ТабДокумент.Вывести(ОбластьМакетаОтпуск);
		ТабДокумент.Вывести(ОбластьМакетаПодвалКомпенсации);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;

	Возврат ТабДокумент;

КонецФункции // ПечатьПриказ()	

#КонецЕсли

// Процедура выполняет подставку в указанную строку табличной части РаботникиОрганизации
// реквизитов ДокументОснование и ЗаниматьСтавку
//
// Параметры:
//	СтрокаРаботникиОрганизации - ссылка на строку табличной части РаботникиОрганизации для записи
//
Процедура ПодставитьДанныеДокументаОбОтпуске(СтрокаРаботникиОрганизации) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Сотрудник", 			 СтрокаРаботникиОрганизации.Сотрудник);
	Запрос.УстановитьПараметр("ДатаОтзыва", 		 СтрокаРаботникиОрганизации.ДатаОтзыва);
	Запрос.УстановитьПараметр("ПустаяОрганизация", 	 Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяДата", 		 '00010101');
	Запрос.УстановитьПараметр("СписокСостоянийОтпусков", ПроцедурыУправленияПерсоналом.ПолучитьСписокСостоянийОтпусковОрганизации());
	Запрос.УстановитьПараметр("ДокументСсылка", 	 Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СостояниеРаботников.Регистратор,
	|	ВЫБОР
	|		КОГДА НЕ (ОтпускаОрганизацийРаботникиОрганизации.Ссылка ЕСТЬ NULL)
	|				ИЛИ НЕ (ТрудовыеОтпускаОрганизацийРаботникиОрганизации.Ссылка ЕСТЬ NULL)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДокументНайден,
	|	ВЫБОР
	|		КОГДА СостояниеРаботников.Регистратор ССЫЛКА Документ.ОтпускаОрганизаций
	|			ТОГДА ОтпускаОрганизацийРаботникиОрганизации.ОсвобождатьСтавку
	|		КОГДА СостояниеРаботников.Регистратор ССЫЛКА Документ.ТрудовыеОтпускаОрганизаций
	|			ТОГДА ТрудовыеОтпускаОрганизацийРаботникиОрганизации.ОсвобождатьСтавку
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаниматьСтавку
	|ИЗ
	|	РегистрСведений.СостояниеРаботниковОрганизаций.СрезПоследних(
	|			&ДатаОтзыва,
	|			Организация = &ГоловнаяОрганизация
	|			И Сотрудник = &Сотрудник
	|			И Регистратор <> &ДокументСсылка) КАК СостояниеРаботников
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацийРаботникиОрганизации
	|		ПО СостояниеРаботников.Регистратор = ОтпускаОрганизацийРаботникиОрганизации.Ссылка
	|			И СостояниеРаботников.Сотрудник = ОтпускаОрганизацийРаботникиОрганизации.Сотрудник
	|			И ВЫБОР
	|				КОГДА ОтпускаОрганизацийРаботникиОрганизации.Ссылка.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
	|					ТОГДА ОтпускаОрганизацийРаботникиОрганизации.Ссылка.Организация
	|				ИНАЧЕ ОтпускаОрганизацийРаботникиОрганизации.Ссылка.Организация.ГоловнаяОрганизация
	|			КОНЕЦ = &ГоловнаяОрганизация
	|			И СостояниеРаботников.Период = ОтпускаОрганизацийРаботникиОрганизации.ДатаНачала
	|			И НЕ ОтпускаОрганизацийРаботникиОрганизации.ПроизошедшееСобытие
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТрудовыеОтпускаОрганизаций.РаботникиОрганизации КАК ТрудовыеОтпускаОрганизацийРаботникиОрганизации
	|		ПО СостояниеРаботников.Регистратор = ТрудовыеОтпускаОрганизацийРаботникиОрганизации.Ссылка
	|			И СостояниеРаботников.Сотрудник = ТрудовыеОтпускаОрганизацийРаботникиОрганизации.Сотрудник
	|			И ВЫБОР
	|				КОГДА ТрудовыеОтпускаОрганизацийРаботникиОрганизации.Ссылка.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
	|					ТОГДА ТрудовыеОтпускаОрганизацийРаботникиОрганизации.Ссылка.Организация
	|				ИНАЧЕ ТрудовыеОтпускаОрганизацийРаботникиОрганизации.Ссылка.Организация.ГоловнаяОрганизация
	|			КОНЕЦ = &ГоловнаяОрганизация
	|			И СостояниеРаботников.Период = ТрудовыеОтпускаОрганизацийРаботникиОрганизации.ДатаНачала
	|			И НЕ ТрудовыеОтпускаОрганизацийРаботникиОрганизации.ПроизошедшееСобытие
	|
	|ГДЕ
	|	ВЫБОР
	|		КОГДА СостояниеРаботников.ПериодЗавершения <> &ПустаяДата
	|				И СостояниеРаботников.ПериодЗавершения <= &ДатаОтзыва
	|			ТОГДА СостояниеРаботников.СостояниеЗавершения
	|		ИНАЧЕ СостояниеРаботников.Состояние
	|	КОНЕЦ В (&СписокСостоянийОтпусков)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СостояниеРаботников.Период
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.ДокументНайден
				И  Метаданные().ТабличныеЧасти.РаботникиОрганизации.Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(Выборка.Регистратор)) Тогда
			СтрокаРаботникиОрганизации.ДокументОснование = Выборка.Регистратор;
			СтрокаРаботникиОрганизации.ЗаниматьСтавку = Выборка.ЗаниматьСтавку;
		Иначе 
			СтрокаРаботникиОрганизации.ДокументОснование = Неопределено;
		КонецЕсли;
	Иначе
		СтрокаРаботникиОрганизации.ДокументОснование = Неопределено;
	КонецЕсли;

КонецПроцедуры // ПодставитьДанныеДокументаОбОтпуске()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Рассчитывает число дней отпуска по указанной строке табличной части работники или в целом по документу
//
// Параметры:
//	СтрокаТабличнойЧасти - строка табличной части РаботникиОрганизации, которую рассчитать
//
Процедура Рассчитать(СтрокаТабличнойЧасти = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация!");
		Возврат
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидСтрокиРегистрацияОтпуска", Перечисления.ИспользованиеОтпусковВидСтроки.РегистрацияОтпуска);
	Запрос.УстановитьПараметр("Праздник", Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
	
	УсловиеПоРаботнику = "";
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УсловиеПоРаботнику = "ОтзывИзОтпусков.Сотрудник = &Сотрудник
							 |И ОтзывИзОтпусков.ДатаОтзыва = &ДатаОтзыва";
		Запрос.УстановитьПараметр("Сотрудник",  СтрокаТабличнойЧасти.Сотрудник);
		Запрос.УстановитьПараметр("ДатаОтзыва", СтрокаТабличнойЧасти.ДатаОтзыва);
	КонецЕсли;
	
	Если ИсправляемыйДокумент <> Неопределено Тогда
		УсловиеИсправлемыйДокумент = Истина;
		Запрос.УстановитьПараметр("ИсправлемыйДокумент", ИсправляемыйДокумент);
	Иначе
		УсловиеИсправлемыйДокумент = Ложь;
	КонецЕсли;
	
	ПолеДатаНачала = "
	|ВЫБОР
	|	КОГДА ОтзывИзОтпусков.ДатаОтзыва > ИспользованиеОтпусков.ДатаНачала
	|		ТОГДА ОтзывИзОтпусков.ДатаОтзыва
	|	ИНАЧЕ ИспользованиеОтпусков.ДатаНачала
	|КОНЕЦ";
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОтзывИзОтпусков.Сотрудник,
	|	ОтзывИзОтпусков.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	ОтзывИзОтпусков.ДатаОтзыва,
	|	ИспользованиеОтпусков.ВидТрудовогоОтпуска,
	|	" + ПолеДатаНачала + " КАК ДатаНачала,
	|	ИспользованиеОтпусков.ДатаОкончания,
	|	ИспользованиеОтпусков.РабочийГодС,
	|	ИспользованиеОтпусков.РабочийГодПо,
	|	ВЫБОР
	|		КОГДА ОтзывИзОтпусков.ПредоставитьКомпенсацию = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПредоставитьКомпенсацию,
	|	РАЗНОСТЬДАТ(" + ПолеДатаНачала + ", ИспользованиеОтпусков.ДатаОкончания, ДЕНЬ) + 1 - КОЛИЧЕСТВО(ПраздничныеДни.ДатаКалендаря) КАК ДнейОтпуска
	|
	|ИЗ
	|	Документ.ОтзывИзОтпусковОрганизаций.РаботникиОрганизации КАК ОтзывИзОтпусков
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТрудовыеОтпускаОрганизаций.РаботникиОрганизации КАК ТрудовыеОтпуска
	|		ПО ОтзывИзОтпусков.Сотрудник = ТрудовыеОтпуска.Сотрудник
	|			И ОтзывИзОтпусков.Сторно = ТрудовыеОтпуска.Сторно
	|			И ВЫБОР
	|				КОГДА ТрудовыеОтпуска.Ссылка.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
	|					ТОГДА ТрудовыеОтпуска.Ссылка.Организация
	|				ИНАЧЕ ТрудовыеОтпуска.Ссылка.Организация.ГоловнаяОрганизация
	|			КОНЕЦ = &ГоловнаяОрганизация
	|			И ОтзывИзОтпусков.ДокументОснование = ТрудовыеОтпуска.Ссылка
	|			И ТрудовыеОтпуска.ДатаНачала <= ОтзывИзОтпусков.ДатаОтзыва
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ИспользованиеОтпусковРаботникамиОрганизаций КАК ИспользованиеОтпусков
	|		ПО ОтзывИзОтпусков.Сотрудник = ИспользованиеОтпусков.Сотрудник
	|			И ИспользованиеОтпусков.Организация = &ГоловнаяОрганизация
	|			И ТрудовыеОтпуска.ДатаНачала = НАЧАЛОПЕРИОДА(ИспользованиеОтпусков.Период, ДЕНЬ)
	|			И ОтзывИзОтпусков.ДатаОтзыва <= ИспользованиеОтпусков.ДатаОкончания
	|			И ИспользованиеОтпусков.ВидСтроки = &ВидСтрокиРегистрацияОтпуска " + ?(УсловиеИсправлемыйДокумент, "И ИспользованиеОтпусков.Регистратор <> &ИсправлемыйДокумент", "") + "
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПраздничныеДни
	|		ПО ПраздничныеДни.ВидДня = &Праздник
	|			И ПраздничныеДни.ДатаКалендаря МЕЖДУ " + ПолеДатаНачала + " И ИспользованиеОтпусков.ДатаОкончания
	|
	|ГДЕ
	|	ОтзывИзОтпусков.Ссылка = &ДокументСсылка
	|	И НЕ ОтзывИзОтпусков.Сторно
	|	" + ?(УсловиеПоРаботнику <> "", " И " + УсловиеПоРаботнику, "") + "
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтзывИзОтпусков.Сотрудник,
	|	ОтзывИзОтпусков.ДатаОтзыва,
	|	ИспользованиеОтпусков.ВидТрудовогоОтпуска,
	|	ИспользованиеОтпусков.ДатаНачала,
	|	ИспользованиеОтпусков.ДатаОкончания,
	|	ИспользованиеОтпусков.РабочийГодС,
	|	ИспользованиеОтпусков.РабочийГодПо,
	|	ОтзывИзОтпусков.ПредоставитьКомпенсацию
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ОтзывИзОтпусков.Сотрудник,
	|	ОтзывИзОтпусков.ДатаОтзыва,
	|	ИспользованиеОтпусков.ДатаНачала
	|";
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Сотрудник",  СтрокаТабличнойЧасти.Сотрудник);
		СтруктураПоиска.Вставить("ДатаОтзыва", СтрокаТабличнойЧасти.ДатаОтзыва);
		СтруктураПоиска.Вставить("Сторно", 	   СтрокаТабличнойЧасти.Сторно);
	
		НайденныеСтроки = Отпуска.НайтиСтроки(СтруктураПоиска);
		Для Каждого УдаляемаяСтрока Из НайденныеСтроки Цикл
			Отпуска.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	
	Иначе
		ТЗОтпускаСторно = Отпуска.Выгрузить(Отпуска.НайтиСтроки(Новый Структура("Сторно", Истина)),);
		Отпуска.Очистить();
		Отпуска.Загрузить(ТЗОтпускаСторно);
	КонецЕсли;
		            
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Отпуска.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;

КонецПроцедуры // Рассчитать

Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтпускаОрганизаций") 
			Или ТипЗнч(Основание) = Тип("ДокументСсылка.ТрудовыеОтпускаОрганизаций") Тогда
		
		Организация = Основание.Организация;	
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", Основание);
		Запрос.УстановитьПараметр("парамДата", ОбщегоНазначения.ПолучитьРабочуюДату());
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	РаботникиОрганизации.ФизЛицо,
		|	РаботникиОрганизации.Сотрудник,
		|	РаботникиОрганизации.ОсвобождатьСтавку КАК ЗаниматьСтавку,
		|	&парамДата КАК ДатаОтзыва,
		|	&ДокументОснование КАК ДокументОснование
		|ИЗ
		|	Документ." + Основание.Метаданные().Имя + ".РаботникиОрганизации КАК РаботникиОрганизации
		|ГДЕ
		|	РаботникиОрганизации.Ссылка = &ДокументОснование
		|	И НЕ РаботникиОрганизации.ПроизошедшееСобытие
		|	И НЕ РаботникиОрганизации.Сторно";
		
		РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	ДокументОснование = Основание;
	
КонецПроцедуры // ОбработкаЗаполненияУпр()

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
					|	МИНИМУМ(ОтпускаОрганизацииРаботникиОрганизации.ДатаНачала) КАК ДатаНачала,
					|	МАКСИМУМ(ОтпускаОрганизацииРаботникиОрганизации.ДатаОкончания) КАК ДатаОкончания
					|ИЗ
					 |	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботникиОрганизации
					|
					|ГДЕ
					|	ОтпускаОрганизацииРаботникиОрганизации.Ссылка = &Ссылка И
					|	(ОтпускаОрганизацииРаботникиОрганизации.ДатаНачала <> &ПустаяДата)");
						
	Запрос.УстановитьПараметр("ПустаяДата",'00010101');
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ДатаНачала <> Null и Выборка.ДатаОкончания <> Null и Не ПроцедурыУправленияПерсоналом.РегламентированныйКалендарьЗаполнен(Выборка.ДатаНачала,Выборка.ДатаОкончания,Истина) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
 	Если ИмяМакета = "ПриказСписком" Тогда
 		ТабДокумент = ПечатьПриказаСписком()
 	ИначеЕсли ИмяМакета = "Приказ" Тогда
 		ТабДокумент = ПечатьПриказа();
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПриказСписком, Приказ", "Приказ на список сотрудников", "Приказ на каждого сотрудника");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация" , Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОтзывИзОтпусковОрганизаций.Дата,
	               |	ОтзывИзОтпусковОрганизаций.Организация,
	               |	ВЫБОР 
			   	   |		КОГДА ОтзывИзОтпусковОрганизаций.Организация.ГоловнаяОрганизация = &ПустаяОрганизация 
			       |			ТОГДА ОтзывИзОтпусковОрганизаций.Организация 
			   	   |			ИНАЧЕ ОтзывИзОтпусковОрганизаций.Организация.ГоловнаяОрганизация 
				   |		КОНЕЦ КАК ГоловнаяОрганизация,
	               |	ОтзывИзОтпусковОрганизаций.Ссылка
	               |ИЗ
	               |	Документ.ОтзывИзОтпусковОрганизаций КАК ОтзывИзОтпусковОрганизаций
	               |
	               |ГДЕ
	               |	ОтзывИзОтпусковОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим - табличная часть запроса
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			 Ссылка);
	Запрос.УстановитьПараметр("Организация", 			 Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", 	 ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ПустаяДата",				 Дата('00010101'));
	Запрос.УстановитьПараметр("ОтпускЕжегодный",		 Перечисления.СостоянияРаботникаОрганизации.ОтпускЕжегодный);
	Запрос.УстановитьПараметр("СписокСостоянийОтпусков", ПроцедурыУправленияПерсоналом.ПолучитьСписокСостоянийОтпусковОрганизации());
	Запрос.УстановитьПараметр("Прием",					 Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Запрос.УстановитьПараметр("РегистрацияОтпуска",		 Перечисления.ИспользованиеОтпусковВидСтроки.РегистрацияОтпуска);
	Запрос.УстановитьПараметр("ОтзывИзОтпуска",			 Перечисления.ИспользованиеОтпусковВидСтроки.ОтзывИзОтпуска);
	Запрос.УстановитьПараметр("Прием" ,     			 Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);

	Если Режим = "ПоТабличнойЧастиРаботникиОрганизации" Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
		|	ТЧРаботникиОрганизации.ДатаОтзыва,
		|	ТЧРаботникиОрганизации.ЗаниматьСтавку,
		|	ТЧРаботникиОрганизации.ДокументОснование,
		|	ТЧРаботникиОрганизации.Сторно
		|ПОМЕСТИТЬ ВТДанныеДокумента
        |ИЗ
		|  Документ.ОтзывИзОтпусковОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|   И НЕ ТЧРаботникиОрганизации.Сторно
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ДатаОтзыва
		|;
		|///////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.СотрудникНаименование,
		|	ТЧРаботникиОрганизации.ДатаОтзыва,
		|	ТЧРаботникиОрганизации.ЗаниматьСтавку,
		|	ТЧРаботникиОрганизации.ДокументОснование,
		|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации,
		|	ДанныеПоРаботникуДоНазначения.Должность,
		|	ДанныеПоРаботникуДоНазначения.ТарифныйРазряд,
		|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок,
		|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
		|	ВЫБОР
		|		КОГДА ПредшествующиеТрудовыеОтпуска.НомерСтроки ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		КОГДА ПредшествующиеТрудовыеОтпуска.ДатаНачалаОтзыва = ТЧРаботникиОрганизации.ДатаОтзыва
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК НеСоответствиеДатыНачалаТЧОтпуска,
		|	ВЫБОР
		|		КОГДА ПредшествующиеТрудовыеОтпуска.НомерСтроки ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		КОГДА ПредшествующиеТрудовыеОтпуска.ДатаОкончанияОтзыва = ПредшествующиеТрудовыеОтпуска.ДатаОкончания
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК НеСоответствиеДатыОкончанияТЧОтпуска,
		|	ПредшествующиеТрудовыеОтпуска.РегистраторПроизведенногоОтзыва,
		|	NULL КАК КонфликтныйДокумент,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
		|ИЗ
		|	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МАКСИМУМ(Работники.Период) КАК ДатаДвижения
		|		ИЗ
		|			ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|				ПО Работники.Сотрудник = ТЧРаботникиОрганизации.Сотрудник 
		|					И (Работники.Организация = &ГоловнаяОрганизация) 
		|					И Работники.Период <= ТЧРаботникиОрганизации.ДатаОтзыва
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыПоследнегоДвиженияРаботника
		|			ПО ДатыПоследнегоДвиженияРаботника.НомерСтроки = ТЧРаботникиОрганизации.НомерСтроки
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
		|			ПО ДанныеПоРаботникуДоНазначения.Сотрудник = ТЧРаботникиОрганизации.Сотрудник
		|				И (ДанныеПоРаботникуДоНазначения.Организация = &ГоловнаяОрганизация) 
		|				И ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнегоДвиженияРаботника.ДатаДвижения
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
		|		ИЗ
		|			ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтзывИзОтпусковОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации2
		|				ПО (ТЧРаботникиОрганизации2.Ссылка = &ДокументСсылка) 
		|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник 
		|					И ТЧРаботникиОрганизации.НомерСтроки > ТЧРаботникиОрганизации2.НомерСтроки 
		|					И ТЧРаботникиОрганизации.ДатаОтзыва = ТЧРаботникиОрганизации2.ДатаОтзыва
		|					И ТЧРаботникиОрганизации.Сторно = ТЧРаботникиОрганизации2.Сторно
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
		|			ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПредшествующиеОтпуска.НомерСтроки,
		|			ПредшествующиеОтпуска.ДатаНачалаОтзыва,
		|			ПредшествующиеОтпуска.ДатаОкончанияОтзыва,
		|			МИНИМУМ(ИспользованиеОтпусков.ДатаНачала) КАК ДатаНачала,
		|			МАКСИМУМ(ИспользованиеОтпусков.ДатаОкончания) КАК ДатаОкончания,
		|			МАКСИМУМ(ПроизведенныеОтзывы.Регистратор) КАК РегистраторПроизведенногоОтзыва
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ТЧРаботникиОрганизации.НомерСтроки,
		|				ТЧРаботникиОрганизации.Сотрудник,
		|				ТЧРаботникиОрганизации.ДатаОтзыва,
		|				МИНИМУМ(ТЧОтпуска.ДатаНачала) КАК ДатаНачалаОтзыва,
		|				МАКСИМУМ(ТЧОтпуска.ДатаОкончания) КАК ДатаОкончанияОтзыва,
		|				МАКСИМУМ(ИспользованиеОтпусков.Период) КАК Период
		|			ИЗ
		|				ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтзывИзОтпусковОрганизаций.Отпуска КАК ТЧОтпуска
		|						ПО ТЧРаботникиОрганизации.Сотрудник = ТЧОтпуска.Сотрудник
		|							И ТЧОтпуска.Ссылка = &ДокументСсылка
		|							И ТЧРаботникиОрганизации.ДатаОтзыва = ТЧОтпуска.ДатаОтзыва
		|							И НЕ ТЧОтпуска.Сторно
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ИспользованиеОтпусковРаботникамиОрганизаций КАК ИспользованиеОтпусков
		|						ПО ТЧРаботникиОрганизации.Сотрудник = ИспользованиеОтпусков.Сотрудник
		|							И ИспользованиеОтпусков.Организация = &ГоловнаяОрганизация
		|							И ИспользованиеОтпусков.Период <= ТЧРаботникиОрганизации.ДатаОтзыва
		|							И ИспользованиеОтпусков.ВидСтроки = &РегистрацияОтпуска
		|			СГРУППИРОВАТЬ ПО
		|				ТЧРаботникиОрганизации.НомерСтроки,
		|				ТЧРаботникиОрганизации.Сотрудник,
		|				ТЧРаботникиОрганизации.ДатаОтзыва) КАК ПредшествующиеОтпуска
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ИспользованиеОтпусковРаботникамиОрганизаций КАК ИспользованиеОтпусков
		|				ПО ПредшествующиеОтпуска.Сотрудник = ИспользованиеОтпусков.Сотрудник
		|					И ИспользованиеОтпусков.Организация = &ГоловнаяОрганизация
		|					И ПредшествующиеОтпуска.Период = ИспользованиеОтпусков.Период
		|					И ИспользованиеОтпусков.ВидСтроки = &РегистрацияОтпуска
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ИспользованиеОтпусковРаботникамиОрганизаций КАК ПроизведенныеОтзывы
		|				ПО ПредшествующиеОтпуска.Сотрудник = ПроизведенныеОтзывы.Сотрудник
		|					И ПроизведенныеОтзывы.Организация = &ГоловнаяОрганизация
		|					И ПроизведенныеОтзывы.Период МЕЖДУ НАЧАЛОПЕРИОДА(ПредшествующиеОтпуска.Период, ДЕНЬ) И КОНЕЦПЕРИОДА(ИспользованиеОтпусков.ДатаОкончания, ДЕНЬ)
		|					И ПроизведенныеОтзывы.ВидСтроки = &ОтзывИзОтпуска
		|
		|		СГРУППИРОВАТЬ ПО
		|			ПредшествующиеОтпуска.НомерСтроки,
		|			ПредшествующиеОтпуска.ДатаНачалаОтзыва,
		|			ПредшествующиеОтпуска.ДатаОкончанияОтзыва) КАК ПредшествующиеТрудовыеОтпуска
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПредшествующиеТрудовыеОтпуска.НомерСтроки
		|
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""КонфликтныйДокумент"",
		|	ДатыПоследнихСостояний.НомерСтроки,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	СостояниеРаботниковОрганизации.Регистратор
		|ИЗ
		|	(ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки,
		|			ТЧРаботникиОрганизации.ДатаОтзыва,
		|			СостояниеРаботниковОрганизации.Сотрудник,
		|			МАКСИМУМ(СостояниеРаботниковОрганизации.Период) КАК Период
		|		ИЗ
		|			ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизации
		|				ПО СостояниеРаботниковОрганизации.Сотрудник = ТЧРаботникиОрганизации.Сотрудник 
		|					И (СостояниеРаботниковОрганизации.Организация = &ГоловнаяОрганизация) 
		|					И СостояниеРаботниковОрганизации.Период <= ТЧРаботникиОрганизации.ДатаОтзыва
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки,
		|			ТЧРаботникиОрганизации.ДатаОтзыва,
		|			СостояниеРаботниковОрганизации.Сотрудник) КАК ДатыПоследнихСостояний
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизации
		|		ПО ДатыПоследнихСостояний.Сотрудник = СостояниеРаботниковОрганизации.Сотрудник
		|			И СостояниеРаботниковОрганизации.Организация = &ГоловнаяОрганизация
		|			И ДатыПоследнихСостояний.Период = СостояниеРаботниковОрганизации.Период
		|			И ВЫБОР
		|				КОГДА СостояниеРаботниковОрганизации.ПериодЗавершения <> &ПустаяДата
		|						И СостояниеРаботниковОрганизации.ПериодЗавершения <= ДатыПоследнихСостояний.ДатаОтзыва
		|					ТОГДА СостояниеРаботниковОрганизации.СостояниеЗавершения
		|				ИНАЧЕ СостояниеРаботниковОрганизации.Состояние
		|			КОНЕЦ НЕ В (&СписокСостоянийОтпусков)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
	 	|";
		
	ИначеЕсли Режим = "ПоТабличнойЧастиОтпуска" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтрокиРаботникиОрганизации,
		|	ТЧОтпуска.НомерСтроки КАК НомерСтрокиОтпуска,
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
		|	ТЧРаботникиОрганизации.ДатаОтзыва КАК ДатаОтзыва,
		|	ТЧОтпуска.ВидТрудовогоОтпуска КАК ВидОтпуска,
		|	ТЧОтпуска.ДатаНачала КАК ДатаНачала,
		|	ТЧОтпуска.ДатаОкончания КАК ДатаОкончания,
		|	ТЧОтпуска.РабочийГодС КАК РабочийГодС,
		|	ТЧОтпуска.РабочийГодПо КАК РабочийГодПо,
		|	ТЧОтпуска.ДнейОтпуска КАК ДнейОтпуска,
		|	ТЧОтпуска.ПредоставитьКомпенсацию КАК ПредоставитьКомпенсацию,
		|	ВЫБОР
		|		КОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ТЧОтпуска.РабочийГодС, ГОД), МЕСЯЦ, МЕСЯЦ(ПриказыОПриеме.Период) - 1), ДЕНЬ, ДЕНЬ(ПриказыОПриеме.Период) - 1) = ТЧОтпуска.РабочийГодС
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаВРабочемГодеС,
		|	ВЫБОР
		|		КОГДА " + ПроцедурыУправленияПерсоналом.СформироватьТекстЗапросаКонецРабочегоГода("ТЧОтпуска.РабочийГодС") + " = ТЧОтпуска.РабочийГодПо
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаВРабочемГодеПо,
		|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер
		|ИЗ
		|	Документ.ОтзывИзОтпусковОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтзывИзОтпусковОрганизаций.Отпуска КАК ТЧОтпуска
		|		ПО ТЧРаботникиОрганизации.Сотрудник = ТЧОтпуска.Сотрудник
		|			И ТЧРаботникиОрганизации.Ссылка = ТЧОтпуска.Ссылка
		|			И ТЧРаботникиОрганизации.ДатаОтзыва = ТЧОтпуска.ДатаОтзыва
		|			И ТЧРаботникиОрганизации.Сторно = ТЧОтпуска.Сторно
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧОтпуска.НомерСтроки КАК НомерСтроки,
		|			МИНИМУМ(ТЧОтпуска2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
		|		ИЗ
		|			Документ.ОтзывИзОтпусковОрганизаций.Отпуска КАК ТЧОтпуска
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтзывИзОтпусковОрганизаций.Отпуска КАК ТЧОтпуска2
		|				ПО (ТЧОтпуска2.Ссылка = &ДокументСсылка)
		|					И ТЧОтпуска.Сотрудник = ТЧОтпуска2.Сотрудник
		|					И ТЧОтпуска.ДатаОтзыва = ТЧОтпуска2.ДатаОтзыва
		|					И ТЧОтпуска.НомерСтроки <> ТЧОтпуска2.НомерСтроки
		|					И ТЧОтпуска.ДатаНачала <= ТЧОтпуска2.ДатаНачала
		|					И ТЧОтпуска.Сторно = ТЧОтпуска2.Сторно
		|					И (ТЧОтпуска.ДатаОкончания = &ПустаяДата
		|						ИЛИ ТЧОтпуска.ДатаОкончания >= ТЧОтпуска2.ДатаНачала)
		|		ГДЕ
		|			ТЧОтпуска.Ссылка = &ДокументСсылка
		|			И НЕ ТЧОтпуска.Сторно
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧОтпуска.НомерСтроки) КАК ПересекающиесяСтроки
		|		ПО ТЧОтпуска.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|				МАКСИМУМ(Работники.Период) КАК Период,
		|				ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник
		|			ИЗ
		|				Документ.ОтзывИзОтпусковОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|					ПО ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
		|						И (Работники.Организация = &ГоловнаяОрганизация)
		|						И Работники.Период <= ТЧРаботникиОрганизации.ДатаОтзыва
		|						И (Работники.ПричинаИзмененияСостояния = &Прием)
		|			ГДЕ
		|				ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|  				И НЕ ТЧРаботникиОрганизации.Сторно
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ТЧРаботникиОрганизации.НомерСтроки,
		|				ТЧРаботникиОрганизации.Сотрудник) КАК ПриказыОПриеме
		|		ПО ПриказыОПриеме.НомерСтроки = ТЧРаботникиОрганизации.НомерСтроки
		|
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|   И НЕ ТЧРаботникиОрганизации.Сторно
	 	|";
		
	КонецЕсли;
		
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	// Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация, работники которой отзываются из отпуска!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, Режим)

	Если Режим = "ПоТабличнойЧастиРаботникиОрганизации" Тогда
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
		""" табл. части ""Сотрудники"": ";
	ИначеЕсли Режим = "ПоТабличнойЧастиОтпуска" Тогда
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтрокиОтпуска) +
		""" табл. части ""Отзыв из трудовых отпусков"" для строки номер """ + СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтрокиРаботникиОрганизации) +
		""" табл. части ""Сотрудники"": ";
	КонецЕсли;

	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда

		// Сотрудник
		ЕстьСотрудник = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
		Если НЕ ЕстьСотрудник Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
		КонецЕсли;

		// ДатаОтзыва
		ЕстьДатаОтзыва = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОтзыва);
		Если НЕ ЕстьДатаОтзыва Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата отзыва из отпуска!", Отказ, Заголовок);
		КонецЕсли;

		Если ЕстьСотрудник И ЕстьДатаОтзыва Тогда

			Если Режим = "ПоТабличнойЧастиРаботникиОрганизации" Тогда
				
				// Организация сотрудника должна совпадать с организацией документа
				Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "организация документа не соответствует организации, указанной в карточке сотрудника!", Отказ, Заголовок);
				КонецЕсли;

				// Проверка: ранее работник должен быть принят на работу
				Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = NULL Тогда
					СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаОтзыва, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
				ИначеЕсли ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда	
					СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаОтзыва, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен!";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
				КонецЕсли; 
				
				// Чтобы был указан приказ о предоставлении отпуска
				Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументОснование) Тогда
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан приказ, которым был предоставлен отпуск!", Отказ, Заголовок);
				КонецЕсли;
				
				// Проверка: первая дата начала в ТЧ отпуска должна совпадать с датой отзыва
				Если ВыборкаПоСтрокамДокумента.НеСоответствиеДатыНачалаТЧОтпуска Тогда
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "самая ранняя дата начала в отзыве из трудовых отпусков должна быть равна дате отзыва!", Отказ, Заголовок);
				КонецЕсли;
				
				// Проверка: последняя дата окончания в ТЧ отпуска должна совпадать с датой окончания отпуска, из которого отзывают
				Если ВыборкаПоСтрокамДокумента.НеСоответствиеДатыОкончанияТЧОтпуска Тогда
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "самая последняя дата окончания в отзыве из трудовых отпусков не соответствует даты окончания отпуска, из которого отзывают!", Отказ, Заголовок);
				КонецЕсли;
				
				// Чтобы дважды на один и тот же отпуск не оформляли отзыв
				Если ВыборкаПоСтрокамДокумента.РегистраторПроизведенногоОтзыва <> NULL Тогда
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "отзыв из отпуска уже оформлен документом " + Строка(ВыборкаПоСтрокамДокумента.РегистраторПроизведенногоОтзыва) + "!", Отказ, Заголовок);
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;

		Если Режим = "ПоТабличнойЧастиОтпуска" Тогда
			
			// ДатаНачала
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала!", Отказ, Заголовок);
			КонецЕсли;
			
			// ДатаОкончания
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания!", Отказ, Заголовок);
			КонецЕсли;
		
			// РабочийГодС
			ЕстьРабочийГодС = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.РабочийГодС);
			Если НЕ ЕстьРабочийГодС Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала рабочего года!", Отказ, Заголовок);
			ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаВРабочемГодеС Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата начала рабочего года не соответствует дате приема!", Отказ, Заголовок);
			КонецЕсли;
			
			// РабочийГодПо
			ЕстьРабочийГодПо = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.РабочийГодПо);
			Если НЕ ЕстьРабочийГодПо Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания рабочего года!", Отказ, Заголовок);
			ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаВРабочемГодеПо Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата окончания рабочего года не соответствует дате приема!", Отказ, Заголовок);
			КонецЕсли;
			
			// Причина отсутствия
			ЕстьВидОтпуска = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидОтпуска);
			Если НЕ ЕстьВидОтпуска Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид отпуска!", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда	

		// противоречие другим кадровым приказам
		СтрокаСообщениеОбОшибке = "возникает противоречие кадровому приказу " + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);

	КонецЕсли;	
		
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Создает и заполняет структуру, содержащую имена регистров сведений 
//  по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                                           по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоРаботникиОрганизации, СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	СтруктураПроведенияПоРегистрамСведений.Вставить("СостояниеРаботниковОрганизаций");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, 
		  		СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "")

	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "СостояниеРаботниковОрганизаций";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
		
		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период                     = ВыборкаПоРаботникиОрганизации.ДатаОтзыва;

		// Измерения
		Движение.Сотрудник                  = ВыборкаПоРаботникиОрганизации.Сотрудник;
        Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
		// Ресурсы
		Движение.Состояние                  = Перечисления.СостоянияРаботникаОрганизации.Работает;
			
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// Создает и заполняет структуру, содержащую имена регистров накопления
// документа. В дальнейшем движения заносятся только по тем регистрам накопления, для которых в 
// данной процедуре заданы ключи
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамНакопления)

	СтруктураПроведенияПоРегистрамНакопления = Новый Структура();
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ЗанятыеШтатныеЕдиницыОрганизаций");
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ИспользованиеОтпусковРаботникамиОрганизаций");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, 
				СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров = "")

    // Если документ нужно проводить по регистру, то для него есть ключ в структуре
	Режим = "ПоТабличнойЧастиРаботникиОрганизации";
	Если СтруктураПараметров.Свойство(Режим) Тогда
	    ИмяРегистра = "ЗанятыеШтатныеЕдиницыОрганизаций";
	    Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда

			// займем ставки
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаОтзыва;
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
			Движение.Должность					= ВыборкаПоРаботникиОрганизации.Должность;
			Движение.ТарифныйРазряд				= ВыборкаПоРаботникиОрганизации.ТарифныйРазряд;

			// Ресурсы
			Движение.КоличествоСтавок			= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
			
			// Реквизиты
			Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник; 

		КонецЕсли;
	КонецЕсли;

	Режим = "ПоТабличнойЧастиОтпуска";
	Если СтруктураПараметров.Свойство(Режим) Тогда
	  	ИмяРегистра = "ИспользованиеОтпусковРаботникамиОрганизаций";
		Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда

			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период           		    = ВыборкаПоРаботникиОрганизации.ДатаОтзыва;

			// Измерения
			Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.Сотрудник			    	= ВыборкаПоРаботникиОрганизации.Сотрудник;
			Движение.ВидТрудовогоОтпуска	   	= ВыборкаПоРаботникиОрганизации.ВидОтпуска;

			// Ресурсы
			Движение.ИспользованоДней       	= - ВыборкаПоРаботникиОрганизации.ДнейОтпуска; 

			// Реквизиты
			Движение.ДатаНачала       			= ВыборкаПоРаботникиОрганизации.ДатаНачала;
			Движение.ДатаОкончания		       	= ВыборкаПоРаботникиОрганизации.ДатаОкончания;
			Движение.РабочийГодС       			= ВыборкаПоРаботникиОрганизации.РабочийГодС;
			Движение.РабочийГодПо       		= ВыборкаПоРаботникиОрганизации.РабочийГодПо;
			Движение.ВидСтроки       			= Перечисления.ИспользованиеОтпусковВидСтроки.ОтзывИзОтпуска;
			
			Если ВыборкаПоРаботникиОрганизации.ПредоставитьКомпенсацию Тогда
				// формируем движения для компенсации
				Движение = Движения[ИмяРегистра].Добавить();
				
				// Свойства
				Движение.Период           		    = ВыборкаПоРаботникиОрганизации.ДатаОтзыва;

				// Измерения
				Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.Сотрудник			    	= ВыборкаПоРаботникиОрганизации.Сотрудник;
				Движение.ВидТрудовогоОтпуска	   	= ВыборкаПоРаботникиОрганизации.ВидОтпуска;

				// Ресурсы
				Движение.ИспользованоДней       	= ВыборкаПоРаботникиОрганизации.ДнейОтпуска; 

				// Реквизиты
				Движение.РабочийГодС       			= ВыборкаПоРаботникиОрганизации.РабочийГодС;
				Движение.РабочийГодПо       		= ВыборкаПоРаботникиОрганизации.РабочийГодПо;
				Движение.ВидСтроки       			= Перечисления.ИспользованиеОтпусковВидСтроки.КомпенсацияОтпуска;
			КонецЕсли;
			
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(Основание)
	
	ЗаполнитьПоДокументуОснования(Основание)	

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров накопления, по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	//структура, содержащая имена регистров сведений, по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);	

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамНакопления);

			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, "ПоТабличнойЧастиРаботникиОрганизации");
			ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			// По табличной части "Работники организации"
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("ПоТабличнойЧастиРаботникиОрганизации");
			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ, Заголовок, "ПоТабличнойЧастиРаботникиОрганизации");

				Если НЕ Отказ И ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
					
					// Создадим и заполним структуры, содержащие имена регистров сведений, по которым проводится документ
					ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоРаботникиОрганизации, СтруктураПроведенияПоРегистрамСведений);
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, СтруктураПроведенияПоРегистрамСведений, );
						
					Если ВыборкаПоРаботникиОрганизации.ЗаниматьСтавку Тогда
						ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров);
					КонецЕсли;
					
				КонецЕсли;

			КонецЦикла;
			
			// По табличной части "Отпуска"
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, "ПоТабличнойЧастиОтпуска");
			ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("ПоТабличнойЧастиОтпуска");
			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ, Заголовок, "ПоТабличнойЧастиОтпуска");

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров);
				
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);

	// Механизм исправлений
	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПередЗаписью(Отказ, РежимЗаписи, РежимПроведения, ЭтотОбъект, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Механизм исправлений
	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПриЗаписи(Отказ, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);
	
КонецПроцедуры

мДлинаСуток = 86400;
мВосстанавливатьДвижения = Ложь;