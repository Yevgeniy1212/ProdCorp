////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Закрытие строк - ввод значения ДатаОкончания для тех строк у которых не нуоевое 
// значение Размер и удаление тех, у кого Размер = 0
// Параметры:
//  ТЗ - таблица значений
//  НезакрытыеСтроки - массив незакрытых строк таблицы значений ТЗ
//  ДатаОкончания - дата, которую нужно проставить в качестве "закрывающей"
//
// Возвращаемое зеначение:
//  нет
//
Процедура ЗакрытьСтроки(ТЗ, НезакрытыеСтроки, ДатаОкончания)
	Для Каждого Строка Из НезакрытыеСтроки Цикл
		Если Строка.ВидРасчета.Пустая() ИЛИ Строка.ДатаНачала > ДатаОкончания Тогда
			ТЗ.Удалить(Строка);
		ИначеЕсли Строка.ДатаОкончания = Дата('00010101') или Строка.ДатаОкончания > ДатаОкончания Тогда
			Строка.ДатаОкончания = ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	НезакрытыеСтроки.Очистить();
КонецПроцедуры // ЗакрытьСтроки

// Найти строку в массиве строк по переданному виду расчета
// Найденная строка и ее индекс возвращаются через переданные параметры Строка и ИндексСтроки
// Параметры:
//  НезакрытыеСтроки - массив строк таблицы значений
//  ВидРасчета - вид расчета ссылка
//  Строка - в этот параметр будет возвращена строка, начальное значение - Неопределено
//  ИндексСтроки - в этот параметр будет возвращен индекс строки, начальное значение - Неопределено
//
// Возвращаемое зеначение:
//  нет
//
Процедура НайтиСредиНезакрытых(НезакрытыеСтроки, ВидРасчета, Строка, ИндексСтроки)
	Для Индекс  = 0 По НезакрытыеСтроки.ВГраница() Цикл
		Если НезакрытыеСтроки[Индекс].ВидРасчета = ВидРасчета Тогда
			ИндексСтроки = Индекс;
			Строка = НезакрытыеСтроки[Индекс];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры  // НайтиСредиНезакрытых

// Найти строку в массиве строк по переданному виду расчета и основанию (ссылка на документ)
// Найденная строка и ее индекс возвращаются через переданные параметры Строка и ИндексСтроки
// Параметры:
//  НезакрытыеСтроки - массив строк таблицы значений
//  ВидРасчета - вид расчета ссылка
//  ДокументОснование - документ ссылка
//  Строка - в этот параметр будет возвращена строка, начальное значение - Неопределено
//  ИндексСтроки - в этот параметр будет возвращен индекс строки, начальное значение - Неопределено
//
// Возвращаемое значение:
//  нет
//
Процедура НайтиСредиНезакрытыхУдержаний(НезакрытыеСтроки, ВидРасчета, ДокументОснование, Строка, ИндексСтроки)
	Для Индекс = 0 По НезакрытыеСтроки.ВГраница() Цикл
		Если НезакрытыеСтроки[Индекс].ВидРасчета = ВидРасчета И НезакрытыеСтроки[Индекс].ДокументОснование = ДокументОснование Тогда
			ИндексСтроки = Индекс;
			Строка = НезакрытыеСтроки[Индекс];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры  // НайтиСредиНезакрытыхУдержаний

// Выполняет формирование таблицы значений для загрузки ее в табличную часть Начисления
// Параметры:
// 	выборка результатат запроса
// Возвращаемое значение:
//  таблица значений
//
Функция СформироватьТаблицуНачислений(Начисления, МассивВалютСНезаданнымКурсом)
	
	ТЗНачисления = Новый ТаблицаЗначений();
	ТЗНачисления.Колонки.Добавить("Сотрудник");
	ТЗНачисления.Колонки.Добавить("Физлицо");
	ТЗНачисления.Колонки.Добавить("ГрафикРаботы");
	ТЗНачисления.Колонки.Добавить("СуммированныйУчетРабочегоВремени");
	ТЗНачисления.Колонки.Добавить("ВидРасчета");
	ТЗНачисления.Колонки.Добавить("СпособРасчета");
	ТЗНачисления.Колонки.Добавить("Показатель1");
	ТЗНачисления.Колонки.Добавить("Показатель2");
	ТЗНачисления.Колонки.Добавить("Показатель3");
	ТЗНачисления.Колонки.Добавить("Показатель4");
	ТЗНачисления.Колонки.Добавить("Показатель5");
	ТЗНачисления.Колонки.Добавить("Показатель6");
	ТЗНачисления.Колонки.Добавить("ДатаНачала", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТЗНачисления.Колонки.Добавить("ДатаОкончания", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТЗНачисления.Колонки.Добавить("Подразделение");
	ТЗНачисления.Колонки.Добавить("Авторасчет");

	
    // Массив незакрытых строк таблицы значений, т.е. тех, которым не проставлена дата окончания
	НезакрытыеСтроки = Новый Массив;
    ТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
    КонецМесяца = КонецМесяца(ПериодРегистрации);
	ДатаСменыОсновногоНачисления = Дата("00010101");
	
 	Пока Начисления.Следующий() Цикл
		// пропускаем начисления
		Если НЕ Начисления.ЭтоНачисление Тогда
			Продолжить;
		КонецЕсли;

		Для Сч = 1 По 6 Цикл
			Если (Начисления["КурсВалюты"+Сч] = NULL ИЛИ Начисления["КурсВалюты"+Сч] = 0) Тогда
				Если ЗначениеЗаполнено(Начисления["Валюта"+Сч]) И (Начисления["КурсВалюты"+Сч] = NULL ИЛИ Начисления["КурсВалюты"+Сч] = 0) Тогда
					МассивВалютСНезаданнымКурсом[Начисления["Валюта"+ Сч]] = Истина;
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;
		
		Если Начисления.Физлицо <> ТекущееФизлицо Тогда
			// закрываем строки концом месяца
			ЗакрытьСтроки(ТЗНачисления, НезакрытыеСтроки, КонецМесяца);
			ТекущееФизлицо = Начисления.Физлицо;
		ИначеЕсли Начисления.ОсновноеНачисление Тогда
             Если Начисления.ПериодНачисления = Начисления.ПериодРаботники Тогда
				// закрываем строки датой, предшествующей вводящейся дате
				ЗакрытьСтроки(ТЗНачисления, НезакрытыеСтроки, Начисления.Период-1);
				ДатаСменыОсновногоНачисления = Начисления.Период;
			Иначе
				// иначе - пропускаем такую запись
				Продолжить;
			КонецЕсли;
		Иначе
			// найдем такой же вид расчета среди незакрытых строк
			Строка = Неопределено;
			ИндексСтроки = Неопределено;
			НайтиСредиНезакрытых(НезакрытыеСтроки, Начисления.ВидРасчета, Строка, ИндексСтроки);
			Если Строка <> Неопределено Тогда
				// нашли
				Если Строка.ДатаНачала = Начисления.Период Тогда
					// если дата та же - меняем данные 
					// не вводим новую строку в формируемую таблицу значений
					// и оставляем "незакрытой"
					Строка.Показатель1 = Начисления.Показатель1;
					Строка.Показатель2 = Начисления.Показатель2;
					Строка.Показатель3 = Начисления.Показатель3;
					Строка.Показатель4 = Начисления.Показатель4;
					Строка.Показатель5 = Начисления.Показатель5;
					Строка.Показатель6 = Начисления.Показатель6;
					Строка.Подразделение = Начисления.Подразделение;
					Строка.ГрафикРаботы = Начисления.ГрафикРаботы;
					Строка.СпособРасчета = Начисления.СпособРасчета;
					Строка.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
					Продолжить;
				Иначе
					// иначе - "закрываем" строку и удаляем из массива незакрытых
					Строка.ДатаОкончания = Начисления.Период-1;
					НезакрытыеСтроки.Удалить(ИндексСтроки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Начисления.ВидРасчета.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		Если Начисления.Подходит И НЕ Начисления.УжеПроведен Тогда
			НоваяСтрока = ТЗНачисления.Добавить();
			НоваяСтрока.Сотрудник = Начисления.Сотрудник;
			НоваяСтрока.Физлицо = Начисления.Физлицо;
			НоваяСтрока.ГрафикРаботы = Начисления.ГрафикРаботы;
			НоваяСтрока.СпособРасчета = Начисления.СпособРасчета;
			НоваяСтрока.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
			НоваяСтрока.ВидРасчета = Начисления.ВидРасчета;
			НоваяСтрока.Показатель1 = Начисления.Показатель1;
			НоваяСтрока.Показатель2 = Начисления.Показатель2;
			НоваяСтрока.Показатель3 = Начисления.Показатель3;
			НоваяСтрока.Показатель4 = Начисления.Показатель4;
			НоваяСтрока.Показатель5 = Начисления.Показатель5;
			НоваяСтрока.Показатель6 = Начисления.Показатель6;
			НоваяСтрока.ДатаНачала = Начисления.Период;
			НоваяСтрока.Подразделение = Начисления.Подразделение;
			НоваяСтрока.Авторасчет = Истина;
			НезакрытыеСтроки.Добавить(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивВалютСНезаданнымКурсом.Количество() > 0 Тогда
		
		МассивРасшифровки = Новый Массив;
		МассивРасшифровки.Добавить("ОткрытьФормуСписка");
		МассивРасшифровки.Добавить("РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом");
		
		Расшифровки = Новый Массив;
		Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", "Заполните курс валют" + " ", МассивРасшифровки));
		
		Для Каждого КлючЗначение Из МассивВалютСНезаданнымКурсом Цикл
			ОбщегоНазначения.ВывестиИнформациюОбОшибке("Для расчетного периода не задан курс валюты " + КлючЗначение.Ключ,,,Перечисления.ВидыСообщений.Ошибка, Расшифровки);
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// закрываем строки концом месяца
	ЗакрытьСтроки(ТЗНачисления, НезакрытыеСтроки, КонецМесяца);
	Возврат ТЗНачисления;
	
КонецФункции

// Выполняет формирование таблицы значений для загрузки ее в табличную часть Удержания
// Параметры:
// 	выборка результатат запроса
// Возвращаемое значение:
//  таблица значений
//
Функция СформироватьТаблицуУдержаний(Удержания)
	ТЗУдержания = Новый ТаблицаЗначений();
	ТЗУдержания.Колонки.Добавить("Физлицо");
	ТЗУдержания.Колонки.Добавить("Подразделение");
	ТЗУдержания.Колонки.Добавить("ВидРасчета");
	ТЗУдержания.Колонки.Добавить("Показатель1");
	ТЗУдержания.Колонки.Добавить("Показатель2");
	ТЗУдержания.Колонки.Добавить("Показатель3");
	ТЗУдержания.Колонки.Добавить("Показатель4");
	ТЗУдержания.Колонки.Добавить("Показатель5");
	ТЗУдержания.Колонки.Добавить("Показатель6");
	ТЗУдержания.Колонки.Добавить("ДатаНачала", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТЗУдержания.Колонки.Добавить("ДатаОкончания", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТЗУдержания.Колонки.Добавить("ДокументОснование");
	ТЗУдержания.Колонки.Добавить("Авторасчет");

    // Массив незакрытых строк таблицы значений, т.е. тех, которым не проставлена дата окончания
	НезакрытыеСтроки = Новый Массив;
    ТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
    КонецМесяца = КонецМесяца(ПериодРегистрации);
	
	Пока Удержания.Следующий() Цикл

		// пропускаем начисления
		Если Удержания.ЭтоНачисление Тогда
			Продолжить;
		КонецЕсли;

		Если Удержания.Физлицо <> ТекущееФизлицо Тогда
			// закрываем строки концом месяца
			ЗакрытьСтроки(ТЗУдержания, НезакрытыеСтроки, КонецМесяца);
			ТекущееФизлицо = Удержания.Физлицо;
		Иначе
			// найдем такой же вид расчета по тому же основанию среди незакрытых строк
			Строка = Неопределено;
			ИндексСтроки = Неопределено;
			НайтиСредиНезакрытыхУдержаний(НезакрытыеСтроки, Удержания.ВидРасчета, Удержания.ДокументОснование, Строка, ИндексСтроки);
			Если Строка <> Неопределено Тогда
				// нашли
				Если Строка.ДатаНачала = Удержания.Период Тогда
					// если дата та же - меняем данные 
					// не вводим новую строку в формируемую таблицу значений
					// и оставляем "незакрытой"
					Строка.Показатель1 = Удержания.Показатель1;
					Строка.Показатель2 = Удержания.Показатель2;
					Строка.Показатель3 = Удержания.Показатель3;
					Строка.Показатель4 = Удержания.Показатель4;
					Строка.Показатель5 = Удержания.Показатель5;
					Строка.Показатель6 = Удержания.Показатель6;
					Продолжить;
				Иначе
					// иначе - "закрываем" строку и удаляем из массива незакрытых
					Строка.ДатаОкончания = Удержания.Период-1;
					НезакрытыеСтроки.Удалить(ИндексСтроки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Удержания.ВидРасчета.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ Удержания.Подходит ИЛИ Удержания.УжеПроведен Тогда
			// пропускаем такие записи: они уже введены другими документами или соответствуют окончанию назначения работника
			Продолжить;                        
		КонецЕсли;

		НоваяСтрока = ТЗУдержания.Добавить();
		НоваяСтрока.Физлицо = Удержания.Физлицо;
		НоваяСтрока.Подразделение = Удержания.Подразделение;
		НоваяСтрока.ВидРасчета = Удержания.ВидРасчета;
		НоваяСтрока.Показатель1 = Удержания.Показатель1;
		НоваяСтрока.Показатель2 = Удержания.Показатель2;
		НоваяСтрока.Показатель3 = Удержания.Показатель3;
		НоваяСтрока.Показатель4 = Удержания.Показатель4;
		НоваяСтрока.Показатель5 = Удержания.Показатель5;
		НоваяСтрока.Показатель6 = Удержания.Показатель6;
		НоваяСтрока.ДатаНачала = Удержания.Период;
		НоваяСтрока.ДокументОснование = Удержания.ДокументОснование;
		НоваяСтрока.Авторасчет			= Истина;
		НезакрытыеСтроки.Добавить(НоваяСтрока);
		
	КонецЦикла;
	// закрываем строки концом месяца
	ЗакрытьСтроки(ТЗУдержания, НезакрытыеСтроки, КонецМесяца);
	Возврат ТЗУдержания;
	
КонецФункции

// Процедура рассчитывает сумму погашения займа
// и заполняет реквизиты табличной части
Процедура РассчитатьПогашениеЗаймов(Физлицо = Неопределено, КомментироватьРасчет = Ложь) 
	
	ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("парамРегистратор",Ссылка);
	Запрос.УстановитьПараметр("парамВалютаУпрУчета" , ВалютаУпрУчета);
	Запрос.УстановитьПараметр("парамКонецГода",КонецГода(ПериодРегистрации));
	Запрос.УстановитьПараметр("НачалоРасчетногоПериода",ПериодРегистрации);
	Запрос.УстановитьПараметр("КонецРасчетногоПериода",КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ДнейВГоду",(КонецГода(ПериодРегистрации) + 1 - НачалоГода(ПериодРегистрации)) / 86400);
	Запрос.УстановитьПараметр("ПоОкончанииСрока",Перечисления.ПорядокПогашенияЗайма.ПоОкончанииСрока);
	Если ВалютаУпрУчета = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		КурсУпрВалюты = 1;
	Иначе	
		Структура = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаУпрУчета, КонецМесяца(ПериодРегистрации));
		Если Структура.Курс = 0 или Структура.Кратность = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан курс валюты управленческого учета.");
			Возврат;
		КонецЕсли; 
		КурсУпрВалюты = Структура.Курс / Структура.Кратность;
	КонецЕсли; 
	Запрос.УстановитьПараметр("КурсУпрВалюты",КурсУпрВалюты);
	Запрос.УстановитьПараметр("парамФизЛицо", ФизЛицо);
	
	// ТаблицаПериодыПогашения
	// Описание
	// 1.из таблицы остатков и оборотов рег-ра ПогашениеЗаймовРаботниками (выборка ПогашениеЗаймов)
	// выбираются дни, в которые были произведены какие-либо движения по займу - период движений определяет  
	// начало периода погашения (в течение которого остаток долга не изменяется) - поле ДатаС;  
	// рассчитывается остаток основного долга на конец месяца (поле ОсновнойДолгНаКонецМесяца)
	// 2.из основной таблицы того же рег-ра присоединяются даты окончания периодов погашения - поле ДатаПО  
	// 3.из договора займа выбираются его параметры: сумма займа (переведенная в валюту упр. учета) и пр.
	//
	
	ТаблицаПериодыПогашения = 
	"ВЫБРАТЬ 
	|	ПогашениеЗаймов.Период КАК ДатаС,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботниками.Период, ДЕНЬ)) КАК ДатаПО,
	|	ПогашениеЗаймов.ФизЛицо КАК ФизЛицо,
	|	ПогашениеЗаймов.ДоговорЗайма КАК ДоговорЗайма,
	|	СведенияОЗаймах.ПорядокПогашенияЗайма КАК ПорядокПогашенияЗайма,
	|	СведенияОЗаймах.НачалоПогашения КАК ДоговорЗаймаНачалоПогашения,
	|	СведенияОЗаймах.СрокПогашения КАК ДоговорЗаймаСрокПогашения,
	|	СведенияОЗаймах.СуммаЗайма * ВЫБОР 
	|		КОГДА СведенияОЗаймах.ВалютаДокумента = &парамВалютаУпрУчета 
	|			ТОГДА 1 
	|		ИНАЧЕ СведенияОЗаймах.КурсДокумента / СведенияОЗаймах.КратностьДокумента / &КурсУпрВалюты 
	|	КОНЕЦ КАК СуммаЗайма,
	|	ПогашениеЗаймов.ОсновнойДолгКонечныйОстаток КАК ОсновнойДолгКонечныйОстаток,
	|	ВЫБОР 
	|		КОГДА КОНЕЦПЕРИОДА(ПогашениеЗаймов.Период, ДЕНЬ) = &КонецРасчетногоПериода 
	|			ТОГДА ПогашениеЗаймов.ОсновнойДолгКонечныйОстаток 
	|		ИНАЧЕ NULL 
	|	КОНЕЦ КАК ОсновнойДолгНаКонецМесяца
	|ИЗ
	|	РегистрНакопления.ПогашениеЗаймовРаботниками.ОстаткиИОбороты(
	|			&НачалоРасчетногоПериода, 
	|			&КонецРасчетногоПериода, 
	|			День, 
	|			ДвиженияИГраницыПериода, 
	|			ФизЛицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							Работники.ФизЛицо КАК Физлицо 
	|						ИЗ 
	|							Документ.НачислениеЗарплатыРаботникам.ПогашениеЗаймов КАК Работники 
	|						ГДЕ
	|							Работники.Ссылка = &парамРегистратор 
	|	                        " + ?(ФизЛицо <> Неопределено, "И Работники.ФизЛицо В (&парамФизЛицо)", "") + ")) КАК ПогашениеЗаймов
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОЗаймах КАК СведенияОЗаймах
	|		ПО ПогашениеЗаймов.ДоговорЗайма = СведенияОЗаймах.ДоговорЗайма
	|			И ПогашениеЗаймов.ФизЛицо = СведенияОЗаймах.ФизЛицо
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПогашениеЗаймовРаботниками КАК ПогашениеЗаймовРаботниками
	|		ПО ПогашениеЗаймов.ФизЛицо = ПогашениеЗаймовРаботниками.ФизЛицо 
	|			И ПогашениеЗаймов.ДоговорЗайма = ПогашениеЗаймовРаботниками.ДоговорЗайма 
	|			И (ПогашениеЗаймов.Период < НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботниками.Период, ДЕНЬ))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПогашениеЗаймов.Период,
	|	ПогашениеЗаймов.ФизЛицо,
	|	ПогашениеЗаймов.ОсновнойДолгКонечныйОстаток,
	|	ПогашениеЗаймов.ДоговорЗайма,
	|	СведенияОЗаймах.ПорядокПогашенияЗайма,
	|	СведенияОЗаймах.НачалоПогашения,
	|	СведенияОЗаймах.СрокПогашения,
	|	СведенияОЗаймах.СуммаЗайма * ВЫБОР 
	|		КОГДА СведенияОЗаймах.ВалютаДокумента = &парамВалютаУпрУчета 
	|			ТОГДА 1 
	|		ИНАЧЕ СведенияОЗаймах.КурсДокумента / СведенияОЗаймах.КратностьДокумента / &КурсУпрВалюты 
	|	КОНЕЦ";
	
	// Основной текст запроса
	// 1. Выборка ДанныеОПогашении
	//  поле ПогашатьЗаймВЭтомМесяце - Определяем, нужно ли погашать займ по условиям договора в текущем месяце
	//  поле ПогашеноЗайма - Рассчитывается сумма займа к погашению: как месячная доля займа или 
	//                       остаток по основному долгу на конец месяца - по условиям договора
	// 2. В основной выборке рассчитываются все показатели т.ч. документа
	//  поле ПогашеноЗайма - если займ в текущем месяце погашается, предлагается рассчитанная ранее сумма к 
	//                       погашению основного долга
	//

	ТекстОстаткиЗаймов = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеЗарплатыРаботникамПогашениеЗаймов.НомерСтроки,
	|	НачислениеЗарплатыРаботникамПогашениеЗаймов.ФизЛицо,
	|	НачислениеЗарплатыРаботникамПогашениеЗаймов.ДоговорЗайма,
	|	ВЫБОР КОГДА НЕ(ДанныеОПогашении.ПогашатьЗаймВЭтомМесяце) ТОГДА 0 ИНАЧЕ ДанныеОПогашении.ПогашеноЗайма КОНЕЦ КАК ПогашеноЗайма,
	|	ЕСТЬNULL(ДанныеОПогашении.СуммаЗайма, 0) КАК СуммаЗайма,
	|	ЕСТЬNULL(ДанныеОПогашении.ОсновнойДолгНаКонецМесяца, 0) КАК ОсновнойДолгНаКонецМесяца
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникам.ПогашениеЗаймов КАК НачислениеЗарплатыРаботникамПогашениеЗаймов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПериодыПогашения.ФизЛицо КАК ФизЛицо,
	|			ПериодыПогашения.ДоговорЗайма КАК ДоговорЗайма,
	|			ВЫБОР 
	|				КОГДА ПериодыПогашения.ПорядокПогашенияЗайма = &ПоОкончанииСрока 
	|							И &КонецРасчетногоПериода >= ДОБАВИТЬКДАТЕ(ПериодыПогашения.ДоговорЗаймаНачалоПогашения, МЕСЯЦ, ПериодыПогашения.ДоговорЗаймаСрокПогашения) 
	|						ИЛИ ПериодыПогашения.ПорядокПогашенияЗайма <> &ПоОкончанииСрока 
	|							И &КонецРасчетногоПериода >= ПериодыПогашения.ДоговорЗаймаНачалоПогашения 
	|					ТОГДА ИСТИНА 
	|				ИНАЧЕ ЛОЖЬ 
	|			КОНЕЦ КАК ПогашатьЗаймВЭтомМесяце,
	|			ВЫБОР 
	|				КОГДА ПериодыПогашения.ПорядокПогашенияЗайма = &ПоОкончанииСрока 
	|						ИЛИ ПериодыПогашения.СуммаЗайма / ПериодыПогашения.ДоговорЗаймаСрокПогашения > МАКСИМУМ(ПериодыПогашения.ОсновнойДолгНаКонецМесяца) 
	|					ТОГДА МАКСИМУМ(ПериодыПогашения.ОсновнойДолгНаКонецМесяца) 
	|				ИНАЧЕ ПериодыПогашения.СуммаЗайма / ПериодыПогашения.ДоговорЗаймаСрокПогашения 
	|			КОНЕЦ КАК ПогашеноЗайма,
	|			ПериодыПогашения.СуммаЗайма,
	|			МАКСИМУМ(ПериодыПогашения.ОсновнойДолгНаКонецМесяца) КАК ОсновнойДолгНаКонецМесяца
	|		ИЗ
	|			(" + ТаблицаПериодыПогашения + ") КАК ПериодыПогашения
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПериодыПогашения.ФизЛицо,
	|			ПериодыПогашения.ДоговорЗайма,
	|			ПериодыПогашения.ПорядокПогашенияЗайма,
	|			ПериодыПогашения.ДоговорЗаймаНачалоПогашения,
	|			ПериодыПогашения.ДоговорЗаймаСрокПогашения,
	|			ПериодыПогашения.СуммаЗайма) КАК ДанныеОПогашении
	|		ПО НачислениеЗарплатыРаботникамПогашениеЗаймов.ФизЛицо = ДанныеОПогашении.ФизЛицо 
	|			И НачислениеЗарплатыРаботникамПогашениеЗаймов.ДоговорЗайма = ДанныеОПогашении.ДоговорЗайма
	|
	|ГДЕ
	|	НачислениеЗарплатыРаботникамПогашениеЗаймов.Ссылка = &парамРегистратор
	|	" + ?(ФизЛицо <> Неопределено, "И НачислениеЗарплатыРаботникамПогашениеЗаймов.ФизЛицо В (&парамФизЛицо)", "") + "
	|	И НачислениеЗарплатыРаботникамПогашениеЗаймов.Авторасчет";
	
    Запрос.Текст = ТекстОстаткиЗаймов;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = ПогашениеЗаймов[Выборка.НомерСтроки - 1];
		СтрокаТЧ.ПогашеноЗайма = Выборка.ПогашеноЗайма;

    	Если КомментироватьРасчет Тогда
    		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>%%</B>", , "Погашение займа", Выборка.ДоговорЗайма);
    		РаботаССообщениями.КомментарийРасчета("Сумма займа: " + Выборка.СуммаЗайма, КомментарийВидаРасчета);
    		РаботаССообщениями.КомментарийРасчета("Остаток займа до расчета: " + Выборка.ОсновнойДолгНаКонецМесяца, КомментарийВидаРасчета);
    		РаботаССообщениями.КомментарийРасчета("Погашено займа: " + СтрокаТЧ.ПогашеноЗайма, КомментарийВидаРасчета);
    	КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РассчитатьПогашениеЗаймов()
	
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Выполняет автоматическое заполнение показателей в строке
//
Процедура ЗаполнитьПоказателиСтроки(СтрокаТабличнойЧасти, ИмяТабличнойЧасти) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДатаНачала = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаНачала), СтрокаТабличнойЧасти.ДатаНачала, ПериодРегистрации);
	
	Запрос.УстановитьПараметр("парамНачало",							ДатаНачала);
	Запрос.УстановитьПараметр("парамКонец",								КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПользователь",						Ответственный);
	Запрос.УстановитьПараметр("парамДатаВалютногоУчета",				НачалоМесяца(ПериодРегистрации));
	
	Физлицо = ?(ИмяТабличнойЧасти = "Начисления", ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаТабличнойЧасти.Сотрудник, "Физлицо"), СтрокаТабличнойЧасти.Физлицо);
	
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	Запрос.УстановитьПараметр("ВидРасчета", СтрокаТабличнойЧасти.ВидРасчета);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботникиСрезПоследних.ФизЛицо,
	|	РаботникиСрезПоследних.Подразделение,
	|	РаботникиСрезПоследних.Должность
	|ПОМЕСТИТЬ РаботникиСрезПоследних
	|ИЗ
	|	РегистрСведений.Работники.СрезПоследних(&парамНачало, Физлицо = &Физлицо) КАК РаботникиСрезПоследних
	|ГДЕ
	|	РаботникиСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиСрезПоследних.ФизЛицо,
	|	РаботникиСрезПоследних.Подразделение,
	|	РаботникиСрезПоследних.Должность
	|ПОМЕСТИТЬ ВТСписокРаботников
	|ИЗ
	|	РаботникиСрезПоследних КАК РаботникиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&парамНачало КАК Период,
	|	СписокРаботников.ФизЛицо,
	|	СписокРаботников.Подразделение,
	|	СписокРаботников.Должность,
	|	ИСТИНА КАК Подходит
	|ПОМЕСТИТЬ ВТ_ТаблицаДвиженийРаботников
	|ИЗ
	|	ВТСписокРаботников КАК СписокРаботников
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Период,
	|	Работники.ФизЛицо,
	|	Работники.Подразделение,
	|	Работники.Должность,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрСведений.Работники КАК Работники
	|ГДЕ
	|	Работники.Период > &парамНачало
	|	И Работники.Период <= &парамКонец
	|	И Работники.ФизЛицо = &Физлицо";
	
	Запрос.Выполнить();

	ЗаполнениеДокументов.СформироватьЗапросЗначенийПоказателейУправленческогоУчета(Запрос);
	
	Запрос.Текст = 
	"
	|ВЫБРАТЬ
	|	ЗначенияПоказателей.ПериодДействия,
	|	ЗначенияПоказателей.Физлицо,
	|	ЗначенияПоказателей.Показатель,
	|	ЗначенияПоказателей.ИсходноеЗначение,
	|	ЗначенияПоказателей.Значение,
	|	ЗначенияПоказателей.Валюта,
	|	ЗначенияПоказателей.ВводитсяВВалюте,
	|	ЗначенияПоказателей.КурсВалюты
	|ПОМЕСТИТЬ ЗначенияПоказателей
	|ИЗ
	|	ЗначенияПоказателейИсходныйПериодДействия КАК ЗначенияПоказателей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПериодыФизлиц.Период КАК Период,
	|			ПериодыФизлиц.ФизЛицо КАК ФизЛицо,
	|			ЗначенияПоказателей.Показатель КАК Показатель,
	|			МАКСИМУМ(ЗначенияПоказателей.ПериодДействия) КАК ДатаЗначенияПоказателя
	|		ИЗ
	|			ВТ_ТаблицаДвиженийРаботников КАК ПериодыФизлиц
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияПоказателейИсходныйПериодДействия КАК ЗначенияПоказателей
	|				ПО ПериодыФизлиц.ФизЛицо = ЗначенияПоказателей.Физлицо
	|					И ПериодыФизлиц.Период >= ЗначенияПоказателей.ПериодДействия
	|					И (ПериодыФизлиц.Подходит)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПериодыФизлиц.Период,
	|			ПериодыФизлиц.ФизЛицо,
	|			ЗначенияПоказателей.Показатель) КАК ДатыЗначенийПоказателей
	|		ПО (ДатыЗначенийПоказателей.ФизЛицо = ЗначенияПоказателей.Физлицо)
	|			И (ДатыЗначенийПоказателей.Показатель = ЗначенияПоказателей.Показатель)
	|			И (ДатыЗначенийПоказателей.ДатаЗначенияПоказателя = ЗначенияПоказателей.ПериодДействия)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияПоказателя1.Значение КАК Показатель1,
	|	ЗначенияПоказателя2.Значение КАК Показатель2,
	|	ЗначенияПоказателя3.Значение КАК Показатель3,
	|	ЗначенияПоказателя4.Значение КАК Показатель4,
	|	ЗначенияПоказателя5.Значение КАК Показатель5,
	|	ЗначенияПоказателя6.Значение КАК Показатель6
	|ИЗ
	|	ПоказателиВидаРасчета КАК ПоказателиВидаРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиВидаРасчета КАК Показатель1
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателей КАК ЗначенияПоказателя1
	|			ПО Показатель1.Показатель = ЗначенияПоказателя1.Показатель
	|		ПО ПоказателиВидаРасчета.ВидРасчета = Показатель1.ВидРасчета
	|			И (Показатель1.НомерПоказателя = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиВидаРасчета КАК Показатель2
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателей КАК ЗначенияПоказателя2
	|			ПО Показатель2.Показатель = ЗначенияПоказателя2.Показатель
	|		ПО ПоказателиВидаРасчета.ВидРасчета = Показатель2.ВидРасчета
	|			И (Показатель2.НомерПоказателя = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиВидаРасчета КАК Показатель3
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателей КАК ЗначенияПоказателя3
	|			ПО Показатель3.Показатель = ЗначенияПоказателя3.Показатель
	|		ПО ПоказателиВидаРасчета.ВидРасчета = Показатель3.ВидРасчета
	|			И (Показатель3.НомерПоказателя = 3)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиВидаРасчета КАК Показатель4
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателей КАК ЗначенияПоказателя4
	|			ПО Показатель4.Показатель = ЗначенияПоказателя4.Показатель
	|		ПО ПоказателиВидаРасчета.ВидРасчета = Показатель4.ВидРасчета
	|			И (Показатель4.НомерПоказателя = 4)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиВидаРасчета КАК Показатель5
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателей КАК ЗначенияПоказателя5
	|			ПО Показатель5.Показатель = ЗначенияПоказателя5.Показатель
	|		ПО ПоказателиВидаРасчета.ВидРасчета = Показатель5.ВидРасчета
	|			И (Показатель5.НомерПоказателя = 5)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиВидаРасчета КАК Показатель6
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателей КАК ЗначенияПоказателя6
	|			ПО Показатель6.Показатель = ЗначенияПоказателя6.Показатель
	|		ПО ПоказателиВидаРасчета.ВидРасчета = Показатель6.ВидРасчета
	|			И (Показатель6.НомерПоказателя = 6)
	|ГДЕ
	|	ПоказателиВидаРасчета.ВидРасчета = &ВидРасчета";	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
	КонецЕсли;

КонецПроцедуры

// Выполняет автоматическое заполнение документа по данным документа и переданным параметрам
// 
// Параметры: 
//  ПостроительЗапроса - построитель запроса, который используется для ограничения состава физлиц
//
// Возвращаемое значение:
//  Логическое - удалось ли выполнить автоматическое заполнение документа
//
Функция Автозаполнение(ПостроительЗапроса = НеОпределено, МассивФизлица = Неопределено) Экспорт
	
	Перем ВалютаУпрУчета;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КурсВалютыУпрУчета = 0;
	ПроведениеРасчетов.ПолучитьКурсВалютыУпрУчета(ПериодРегистрации, ВалютаУпрУчета, КурсВалютыУпрУчета, ВалютаРегламентированногоУчета);
	
	Если КурсВалютыУпрУчета = 0 Тогда
		Сообщить("Для расчетного периода не задан курс валюты управленческого учета (" + ВалютаУпрУчета + ") для расчетов с персоналом!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;

	ОсновнойТекстЗапроса = "";
	
	ПустоеПодразделение = Справочники.Подразделения.ПустаяСсылка();
	ПустойОтветственный = Справочники.Пользователи.ПустаяСсылка();
		
	Если Подразделение = ПустоеПодразделение И Ответственный = ПустойОтветственный Тогда
		УсловиеНаПодразделения = "";
		ВнутреннееУсловие = "";
	ИначеЕсли Подразделение = ПустоеПодразделение Тогда
		Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу").РасчетЗарплатыПоОтветственным Тогда
			УсловиеНаПодразделения = "И Работники.Подразделение В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ Расчетчики.Подразделение ИЗ РегистрСведений.РасчетчикиЗарплаты.СрезПоследних(&парамНачало) Расчетчики ГДЕ Расчетчики.Пользователь = &парамПользователь)";
			ВнутреннееУсловие = "Подразделение В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ Расчетчики.Подразделение ИЗ РегистрСведений.РасчетчикиЗарплаты.СрезПоследних(&парамНачало) Расчетчики ГДЕ Расчетчики.Пользователь = &парамПользователь)";
		Иначе
			УсловиеНаПодразделения = "";
			ВнутреннееУсловие = "";
		КонецЕсли;		
	 ИначеЕсли Ответственный = ПустойОтветственный Тогда
		УсловиеНаПодразделения = "И Работники.Подразделение В ИЕРАРХИИ (&парамПодразделение)";
		ВнутреннееУсловие = "Подразделение В ИЕРАРХИИ (&парамПодразделение)";
	Иначе
		Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу").РасчетЗарплатыПоОтветственным Тогда
			УсловиеНаПодразделения = "И Работники.Подразделение В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ Расчетчики.Подразделение ИЗ РегистрСведений.РасчетчикиЗарплаты.СрезПоследних(&парамНачало) Расчетчики ГДЕ Расчетчики.Пользователь = &парамПользователь) И Работники.Подразделение В ИЕРАРХИИ (&парамПодразделение)";
			ВнутреннееУсловие = "Подразделение В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ Расчетчики.Подразделение ИЗ РегистрСведений.РасчетчикиЗарплаты.СрезПоследних(&парамНачало) Расчетчики ГДЕ Расчетчики.Пользователь = &парамПользователь) И Подразделение В ИЕРАРХИИ (&парамПодразделение)";
		Иначе
			УсловиеНаПодразделения = "И Работники.Подразделение В (&парамПодразделение)";
			ВнутреннееУсловие = "Подразделение В (&парамПодразделение)";
		КонецЕсли;
	КонецЕсли;
	
	Если ПостроительЗапроса = Неопределено Тогда
		
		Запрос.УстановитьПараметр("парамНачало" , ПериодРегистрации);
		Запрос.УстановитьПараметр("парамКонец" , КонецМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("парамПользователь" , Ответственный);
		Запрос.УстановитьПараметр("парамПодразделение", Подразделение);
		Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
		Запрос.УстановитьПараметр("парамВалютаУпрУчета", ВалютаУпрУчета);
		Запрос.УстановитьПараметр("парамДатаВалютногоУчета" , НачалоМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("ТипыПоказателейБезВалюты", ПроведениеРасчетов.ПолучитьСписокТиповПоказателейСхемМотивацииНеТребующихУказанияВалюты());

		Запрос.УстановитьПараметр("Физлица", 					МассивФизлица);
		Запрос.УстановитьПараметр("ОтборПоФизлицам", 			МассивФизлица <> Неопределено);

		 // Проверим ответсвенного - является ли он расчетчиком вообще и для заданного 
		 // подразделения (если оно задано)
		Если Ответственный <> ПустойОтветственный Тогда
			Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу").РасчетЗарплатыПоОтветственным Тогда
				Если Подразделение = ПустоеПодразделение Тогда
					Запрос.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					|	Расчетчики.Подразделение
					|ИЗ
					|	РегистрСведений.РасчетчикиЗарплаты.СрезПоследних(&парамНачало) КАК Расчетчики
					|
					|ГДЕ
					|	Расчетчики.Пользователь = &парамПользователь";
					Если Запрос.Выполнить().Пустой() Тогда
						Сообщить("Ответственный за этот документ не является расчетчиком ни одного из подразделений компании");
						Возврат Ложь;
					КонецЕсли;
				Иначе
					Запрос.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					|	Подразделения.Ссылка
					|ИЗ
					|	Справочник.Подразделения КАК Подразделения
					|
					|ГДЕ
					|	Подразделения.Ссылка В ИЕРАРХИИ(&парамПодразделение) И
					|	(Подразделения.Ссылка В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ 	Расчетчики.Подразделение ИЗ РегистрСведений.РасчетчикиЗарплаты.СрезПоследних(&парамНачало) КАК Расчетчики ГДЕ 	Расчетчики.Пользователь = &парамПользователь ))";
					Если Запрос.Выполнить().Пустой() Тогда
						Сообщить("Ответственный за этот документ не является расчетчиком для выбранного подразделения");
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		 
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&парамНачало КАК Период,
		|	Работники.ФизЛицо КАК Физлицо,
		|	ИСТИНА КАК Подходит,
		|	Работники.Подразделение КАК Подразделение,
		|	Работники.ГрафикРаботы КАК ГрафикРаботы,
		|	Работники.Должность КАК Должность
		|ПОМЕСТИТЬ ВТСписокРаботников
		|ИЗ
		|	РегистрСведений.Работники.СрезПоследних(&парамНачало, ((НЕ &ОтборПоФизлицам)
		|				ИЛИ ФизЛицо В (&Физлица))) КАК Работники
		|ГДЕ
		|	Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)" + УсловиеНаПодразделения + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Работники.Период,
		|	Работники.ФизЛицо,
		|	ВЫБОР
		|		КОГДА Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)" + УсловиеНаПодразделения + "
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	Работники.Подразделение,
		|	Работники.ГрафикРаботы,
		|	Работники.Должность
		|ИЗ
		|	РегистрСведений.Работники КАК Работники
		|ГДЕ
		|	Работники.Период > &парамНачало
		|	И Работники.Период <= &парамКонец 
		|	И ((НЕ &ОтборПоФизлицам)
		|				ИЛИ ФизЛицо В (&Физлица))" + УсловиеНаПодразделения;
 
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо,
		|	РаботникиОрганизаций.Сотрудник.ВидЗанятости КАК ВидЗанятости,
		|	РаботникиОрганизаций.Сотрудник.ВидДоговора КАК ВидДоговора
		|ПОМЕСТИТЬ РаботникиОрганизаций
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&парамКонец,
		|			Сотрудник.Физлицо В
		|				(ВЫБРАТЬ
		|					СписокРаботников.Физлицо
		|				ИЗ
		|					ВТСписокРаботников КАК СписокРаботников)) КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникСотрудники.Ссылка,
		|	СправочникСотрудники.Физлицо,
		|	СправочникСотрудники.ВидДоговора
		|ПОМЕСТИТЬ СправочникСотрудники
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СправочникСотрудники
		|ГДЕ
		|	СправочникСотрудники.Физлицо В
		|			(ВЫБРАТЬ
		|				СписокРаботников.Физлицо
		|			ИЗ
		|				ВТСписокРаботников КАК СписокРаботников)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
		|	РаботникиОсновноеМесто.Физлицо КАК Физлицо,
		|	1 КАК Приоритет
		|ПОМЕСТИТЬ СписокСотрудников
		|ИЗ
		|	РаботникиОрганизаций КАК РаботникиОсновноеМесто
		|ГДЕ
		|	РаботникиОсновноеМесто.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|
		|СГРУППИРОВАТЬ ПО
		|	РаботникиОсновноеМесто.Физлицо
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(РаботникиСовместительство.Сотрудник),
		|	РаботникиСовместительство.Физлицо,
		|	2
		|ИЗ
		|	РаботникиОрганизаций КАК РаботникиСовместительство
		|ГДЕ
		|	РаботникиСовместительство.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
		|
		|СГРУППИРОВАТЬ ПО
		|	РаботникиСовместительство.Физлицо
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(СотрудникиДУ.Ссылка),
		|	СотрудникиДУ.Физлицо,
		|	ВЫБОР
		|		КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|			ТОГДА 3
		|		КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|			ТОГДА 4
		|		ИНАЧЕ 5
		|	КОНЕЦ
		|ИЗ
		|	СправочникСотрудники КАК СотрудникиДУ
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиДУ.Физлицо,
		|	ВЫБОР
		|		КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|			ТОГДА 3
		|		КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|			ТОГДА 4
		|		ИНАЧЕ 5
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокФизическихЛиц.Физлицо КАК Физлицо,
		|	МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ СписокФизическихЛиц
		|ИЗ
		|	СписокСотрудников КАК СписокФизическихЛиц
		|
		|СГРУППИРОВАТЬ ПО
		|	СписокФизическихЛиц.Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокСотрудников.Сотрудник КАК Сотрудник,
		|	СписокСотрудников.Физлицо КАК Физлицо
		|ПОМЕСТИТЬ Сотрудники
		|ИЗ
		|	СписокСотрудников КАК СписокСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокФизическихЛиц КАК СписокФизическихЛиц
		|		ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
		|			И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Работники.Физлицо КАК Физлицо,
		|	Работники.Период КАК Период,
		|	Работники.Должность КАК Должность,
		|	Работники.Подходит,
		|	Работники.Подразделение,
		|	Работники.ГрафикРаботы,
		|	ЕСТЬNULL(Работники.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
		|	Работники.Физлицо.Наименование КАК ФизлицоНаименование
		|ПОМЕСТИТЬ ВТ_ТаблицаДвиженийРаботников
		|ИЗ
		|	ВТСписокРаботников КАК Работники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Сотрудники КАК Сотрудники
		|		ПО Работники.Физлицо = Сотрудники.Физлицо
		|ГДЕ
		|	ИСТИНА " + УсловиеНаПодразделения;
		
		Запрос.Выполнить();
		
		ТаблицаДвиженийРаботниковТекст = "ВТ_ТаблицаДвиженийРаботников";
		 
	Иначе
		
		Запрос = ПостроительЗапроса.ПолучитьЗапрос();

		// Установим параметры запроса
		Запрос.УстановитьПараметр("парамНачало" , ПериодРегистрации);
		Запрос.УстановитьПараметр("парамКонец" , КонецМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("парамПользователь" , Ответственный);
		Запрос.УстановитьПараметр("парамПодразделение", Подразделение);
		Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
		Запрос.УстановитьПараметр("парамВалютаУпрУчета", ВалютаУпрУчета);
		Запрос.УстановитьПараметр("парамДатаВалютногоУчета" , НачалоМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("ТипыПоказателейБезВалюты", ПроведениеРасчетов.ПолучитьСписокТиповПоказателейСхемМотивацииНеТребующихУказанияВалюты());
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ИсходныйТекстПостроителя = Запрос.Текст;
		ТекстЗапросаПоСпискуРаботников = СтрЗаменить(ИсходныйТекстПостроителя,"РАЗРЕШЕННЫЕ","");
		ТекстЗапросаПоСпискуРаботников = Лев(ТекстЗапросаПоСпискуРаботников, Найти(ТекстЗапросаПоСпискуРаботников,"УПОРЯДОЧИТЬ") - 1);
		
		ТаблицаДвиженийРаботниковТекст =
		"ВЫБРАТЬ
		|	NULL КАК Сотрудник,
		|	NULL КАК Физлицо
		|ПОМЕСТИТЬ ВТСписокРаботников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокРаботников.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизации.Физлицо КАК Физлицо,
		|	РаботникиОрганизации.Период КАК Период,
		|	РаботникиОрганизации.Должность КАК Должность,
		|	РаботникиОрганизации.Подходит,
		|	РаботникиОрганизации.Подразделение,
		|	РаботникиОрганизации.ГрафикРаботы,
		|	ЕСТЬNULL(РаботникиОрганизации.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени
		|ПОМЕСТИТЬ ВТ_ТаблицаДвиженийРаботников
		|ИЗ
		|	(" + ТекстЗапросаПоСпискуРаботников + ") КАК СписокРаботников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			&парамНачало КАК Период,
		|			Работники.Физлицо КАК Физлицо,
		|			ИСТИНА КАК Подходит,
		|			Работники.Подразделение КАК Подразделение,
		|			Работники.ГрафикРаботы,
		|			Работники.Должность КАК Должность
		|		ИЗ
		|			РегистрСведений.Работники.СрезПоследних(&парамНачало,) КАК Работники
		|		
		|		ГДЕ 
		|			Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение) " + УсловиеНаПодразделения + "
		|	
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			Работники.Период,
		|			Работники.Физлицо,
		|			ВЫБОР КОГДА Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение) " + УсловиеНаПодразделения +" ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ,
		|			Работники.Подразделение,
		|			Работники.ГрафикРаботы,
		|			Работники.Должность
		|		ИЗ
		|			РегистрСведений.Работники КАК Работники
		|		
		|		ГДЕ
		|			Работники.Период > &парамНачало И
		|			Работники.Период <= &парамКонец) КАК РаботникиОрганизации
		|		ПО СписокРаботников.ФизЛицо = РаботникиОрганизации.Физлицо
		|		И СписокРаботников.Подразделение = РаботникиОрганизации.Подразделение";
		                  
		Запрос.Текст = ТаблицаДвиженийРаботниковТекст;
		Запрос.Выполнить();
		ТаблицаДвиженийРаботниковТекст = "ВТ_ТаблицаДвиженийРаботников";

	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОтборПоПодразделениям", ЗначениеЗаполнено(Подразделение));
    Запрос.УстановитьПараметр("ОтборПоОтветственным", ЗначениеЗаполнено(Ответственный) 
							И глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу").РасчетЗарплатыПоОтветственным);
							
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Подразделения.Ссылка
	|ПОМЕСТИТЬ Подразделения
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ГДЕ
	|	((НЕ &ОтборПоОтветственным)
	|			ИЛИ Подразделения.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Расчетчики.Подразделение
	|				ИЗ
	|					РегистрСведений.РасчетчикиЗарплаты.СрезПоследних(&парамНачало) КАК Расчетчики
	|				ГДЕ
	|					Расчетчики.Пользователь = &парамПользователь))
	|	И ((НЕ &ОтборПоПодразделениям)
	|			ИЛИ Подразделения.Ссылка В ИЕРАРХИИ (&парамПодразделение))";
	
	Запрос.Выполнить();

	ЗаполнениеДокументов.СформироватьЗапросЗначенийПоказателейУправленческогоУчета(Запрос);

	ОсновнойТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеНачисления.ФизЛицо КАК Физлицо,
	|	ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
	|	ОсновныеНачисления.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ЗарегистрированныеНачисления
	|ИЗ
	|	РегистрРасчета.УправленческиеНачисления КАК ОсновныеНачисления
	|ГДЕ
	|	ОсновныеНачисления.ПериодРегистрации = &парамНачало
	|	И ОсновныеНачисления.ФизЛицо В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				СписокРаботников.Физлицо
	|			ИЗ
	|				ВТ_ТаблицаДвиженийРаботников КАК СписокРаботников)
	|	И ОсновныеНачисления.Регистратор <> &парамРегистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	ВидРасчета,
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УправленческиеУдержания.ФизЛицо,
	|	УправленческиеУдержания.ВидРасчета
	|ПОМЕСТИТЬ ЗарегистрированныеУдержания
	|ИЗ
	|	РегистрРасчета.УправленческиеУдержания КАК УправленческиеУдержания
	|ГДЕ
	|	УправленческиеУдержания.ПериодРегистрации = &парамНачало
	|	И УправленческиеУдержания.ФизЛицо В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				СписокРаботников.Физлицо
	|			ИЗ
	|				ВТ_ТаблицаДвиженийРаботников КАК СписокРаботников)
	|	И УправленческиеУдержания.Регистратор <> &парамРегистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	УправленческиеУдержания.ФизЛицо,
	|	УправленческиеУдержания.ВидРасчета
	|;
	|";

	ОсновнойТекстЗапроса = ОсновнойТекстЗапроса + "	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПлановыеНачисления.Период < &парамНачало
	|			ТОГДА &парамНачало
	|		ИНАЧЕ ПлановыеНачисления.Период
	|	КОНЕЦ КАК Период,
	|	ПлановыеНачисления.ФизЛицо,
	|	ПлановыеНачисления.Действует,
	|	ПлановыеНачисления.ВидРасчета,
	|	ПлановыеНачисления.ПоказательСсылка1,
	|	ПлановыеНачисления.ПоказательСсылка2,
	|	ПлановыеНачисления.ПоказательСсылка3,
	|	ПлановыеНачисления.ПоказательСсылка4,
	|	ПлановыеНачисления.ПоказательСсылка5,
	|	ПлановыеНачисления.ПоказательСсылка6,
	|	ИСТИНА КАК ЭтоНачисление,
	|	ПлановыеНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ОсновноеНачисление,
	|	NULL КАК ДокументОснование
	|ПОМЕСТИТЬ НачисленияУдержанияЗаработнойПлаты
	|ИЗ
	|	ПлановыеНачисления КАК ПлановыеНачисления
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПлановыеУдержания.Период < &парамНачало
	|			ТОГДА &парамНачало
	|		ИНАЧЕ ПлановыеУдержания.Период
	|	КОНЕЦ КАК Период,
	|	ПлановыеУдержания.ФизЛицо,
	|	ПлановыеУдержания.Действует,
	|	ПлановыеУдержания.ВидРасчета,
	|	ПлановыеУдержания.ПоказательСсылка1,
	|	ПлановыеУдержания.ПоказательСсылка2,
	|	ПлановыеУдержания.ПоказательСсылка3,
	|	ПлановыеУдержания.ПоказательСсылка4,
	|	ПлановыеУдержания.ПоказательСсылка5,
	|	ПлановыеУдержания.ПоказательСсылка6,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ПлановыеУдержания.ДокументОснование
	|ИЗ
	|	ПлановыеУдержания КАК ПлановыеУдержания";

	НачислениеЗарплатыРаботникамПереопределяемый.ДобавитьОбъединениеДополнительныхНачисленийУдержаний(ОсновнойТекстЗапроса, Истина, Истина);

	ОсновнойТекстЗапроса = ОсновнойТекстЗапроса + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияУдержания.Период,
	|	НачисленияУдержания.ФизЛицо
	|ПОМЕСТИТЬ ПериодыФизлиц
	|ИЗ
	|	ПлановыеНачисления КАК НачисленияУдержания
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТДвиженияРаботников.Период,
	|	ВТДвиженияРаботников.Физлицо
	|ИЗ
	|	ВТ_ТаблицаДвиженийРаботников КАК ВТДвиженияРаботников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоследниеЗначенияПоказателей.Период КАК ПериодДействия,
	|	ЗначенияПоказателей.Физлицо,
	|	ЗначенияПоказателей.Показатель,
	|	ЗначенияПоказателей.ИсходноеЗначение,
	|	ЗначенияПоказателей.Значение,
	|	ЗначенияПоказателей.Валюта,
	|	ЗначенияПоказателей.ВводитсяВВалюте,
	|	ЗначенияПоказателей.КурсВалюты
	|ПОМЕСТИТЬ ЗначенияПоказателей
	|ИЗ
	|	ЗначенияПоказателейИсходныйПериодДействия КАК ЗначенияПоказателей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ЗначенияПоказателей.ПериодДействия) КАК ПериодДействия,
	|			ПериодыФизлиц.Период КАК Период,
	|			ЗначенияПоказателей.Физлицо КАК Физлицо,
	|			ЗначенияПоказателей.Показатель КАК Показатель
	|		ИЗ
	|			ЗначенияПоказателейИсходныйПериодДействия КАК ЗначенияПоказателей
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыФизлиц КАК ПериодыФизлиц
	|				ПО ЗначенияПоказателей.Физлицо = ПериодыФизлиц.ФизЛицо
	|					И ЗначенияПоказателей.ПериодДействия <= ПериодыФизлиц.Период
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗначенияПоказателей.Физлицо,
	|			ПериодыФизлиц.Период,
	|			ЗначенияПоказателей.Показатель) КАК ПоследниеЗначенияПоказателей
	|		ПО ЗначенияПоказателей.Физлицо = ПоследниеЗначенияПоказателей.Физлицо
	|			И ЗначенияПоказателей.Показатель = ПоследниеЗначенияПоказателей.Показатель
	|			И ЗначенияПоказателей.ПериодДействия = ПоследниеЗначенияПоказателей.ПериодДействия
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыФизлиц.Период,
	|	ПериодыФизлиц.ФизЛицо,
	|	ДвиженияРаботников.Сотрудник,
	|	ДвиженияРаботников.Период КАК ПериодРаботники,
	|	ДвиженияРаботников.Подходит,
	|	ДвиженияРаботников.Должность,
	|	ДвиженияРаботников.Подразделение,
	|	ДвиженияРаботников.ГрафикРаботы,
	|	ДвиженияРаботников.СуммированныйУчетРабочегоВремени
	|ПОМЕСТИТЬ ДополнительныеДанныеЗаполнения
	|ИЗ
	|	ПериодыФизлиц КАК ПериодыФизлиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПериодыФизлиц.Период КАК Период,
	|			ПериодыФизлиц.ФизЛицо КАК ФизЛицо,
	|			МАКСИМУМ(ДвиженияРаботников.Период) КАК ПериодДвижения
	|		ИЗ
	|			ПериодыФизлиц КАК ПериодыФизлиц
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаДвиженийРаботников КАК ДвиженияРаботников
	|				ПО ПериодыФизлиц.Период >= ДвиженияРаботников.Период
	|					И ПериодыФизлиц.ФизЛицо = ДвиженияРаботников.Физлицо
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПериодыФизлиц.Период,
	|			ПериодыФизлиц.ФизЛицо) КАК КрайниеДатыДвиженийРаботников
	|		ПО ПериодыФизлиц.Период = КрайниеДатыДвиженийРаботников.Период
	|			И ПериодыФизлиц.ФизЛицо = КрайниеДатыДвиженийРаботников.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаДвиженийРаботников КАК ДвиженияРаботников
	|		ПО (ДвиженияРаботников.Физлицо = ПериодыФизлиц.ФизЛицо)
	|			И (КрайниеДатыДвиженийРаботников.ПериодДвижения = ДвиженияРаботников.Период)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыФизлиц.Период,
	|	ПериодыФизлиц.ФизЛицо,
	|	НачисленияУдержания.Период КАК ПериодНачисления,
	|	НачисленияУдержания.ВидРасчета,
	|	НачисленияУдержания.ПоказательСсылка1,
	|	НачисленияУдержания.ПоказательСсылка2,
	|	НачисленияУдержания.ПоказательСсылка3,
	|	НачисленияУдержания.ПоказательСсылка4,
	|	НачисленияУдержания.ПоказательСсылка5,
	|	НачисленияУдержания.ПоказательСсылка6,
	|	НачисленияУдержания.ЭтоНачисление,
	|	НачисленияУдержания.Действует,
	|	НачисленияУдержания.ОсновноеНачисление,
	|	НачисленияУдержания.ДокументОснование
	|ПОМЕСТИТЬ ДействующиеНачисления
	|ИЗ
	|	ПериодыФизлиц КАК ПериодыФизлиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПериодыФизлиц.Период КАК ПериодНачисления,
	|			ПериодыФизлиц.ФизЛицо КАК ФизЛицо,
	|			НачисленияУдержания.ВидРасчета,
	|			МАКСИМУМ(НачисленияУдержания.Период) КАК ПериодДвижения
	|		ИЗ
	|			ПериодыФизлиц КАК ПериодыФизлиц
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ НачисленияУдержанияЗаработнойПлаты КАК НачисленияУдержания
	|				ПО ПериодыФизлиц.Период >= НачисленияУдержания.Период
	|					И ПериодыФизлиц.ФизЛицо = НачисленияУдержания.ФизЛицо
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПериодыФизлиц.Период,
	|			ПериодыФизлиц.ФизЛицо, 
	|			НачисленияУдержания.ВидРасчета) КАК КрайниеДатыДвиженийРаботников
	|		ПО ПериодыФизлиц.Период = КрайниеДатыДвиженийРаботников.ПериодНачисления
	|			И ПериодыФизлиц.ФизЛицо = КрайниеДатыДвиженийРаботников.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачисленияУдержанияЗаработнойПлаты КАК НачисленияУдержания
	|		ПО (НачисленияУдержания.ФизЛицо = ПериодыФизлиц.ФизЛицо)
	|			И (КрайниеДатыДвиженийРаботников.ПериодДвижения = НачисленияУдержания.Период)
	|			И (КрайниеДатыДвиженийРаботников.ВидРасчета = НачисленияУдержания.ВидРасчета)
	|;
	|";
	
	ОсновнойТекстЗапроса = ОсновнойТекстЗапроса + 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеДанные.Сотрудник КАК Сотрудник,
	|	ДействующиеНачисления.Физлицо КАК Физлицо,
	|	ДействующиеНачисления.Период КАК Период,
	|	ДополнительныеДанные.ПериодРаботники,
	|	ДействующиеНачисления.Период КАК ПериодНачисления,
	|	ДействующиеНачисления.ВидРасчета КАК ВидРасчета,
	|	ДействующиеНачисления.ОсновноеНачисление КАК ОсновноеНачисление,
	|	ДействующиеНачисления.ЭтоНачисление КАК ЭтоНачисление,
	|	ВЫБОР
	|		КОГДА (НЕ &ОтборПоПодразделениям)
	|				ИЛИ ДополнительныеДанные.Подразделение В ИЕРАРХИИ
	|					(ВЫБРАТЬ
	|						Подразделения.Ссылка
	|					ИЗ
	|						Подразделения)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Подходит,
	|	ДействующиеНачисления.ДокументОснование КАК ДокументОснование,
	|	ЗначениеПоказателя1.Значение КАК Показатель1,
	|	ЗначениеПоказателя2.Значение КАК Показатель2,
	|	ЗначениеПоказателя3.Значение КАК Показатель3,
	|	ЗначениеПоказателя4.Значение КАК Показатель4,
	|	ЗначениеПоказателя5.Значение КАК Показатель5,
	|	ЗначениеПоказателя6.Значение КАК Показатель6,
	|	ЗначениеПоказателя1.Валюта КАК Валюта1,
	|	ЗначениеПоказателя2.Валюта КАК Валюта2,
	|	ЗначениеПоказателя3.Валюта КАК Валюта3,
	|	ЗначениеПоказателя4.Валюта КАК Валюта4,
	|	ЗначениеПоказателя5.Валюта КАК Валюта5,
	|	ЗначениеПоказателя6.Валюта КАК Валюта6,
	|	ЗначениеПоказателя1.КурсВалюты КАК КурсВалюты1,
	|	ЗначениеПоказателя2.КурсВалюты КАК КурсВалюты2,
	|	ЗначениеПоказателя3.КурсВалюты КАК КурсВалюты3,
	|	ЗначениеПоказателя4.КурсВалюты КАК КурсВалюты4,
	|	ЗначениеПоказателя5.КурсВалюты КАК КурсВалюты5,
	|	ЗначениеПоказателя6.КурсВалюты КАК КурсВалюты6,
	|	ДополнительныеДанные.Подразделение,
	|	ВЫБОР
	|		КОГДА ДействующиеНачисления.ЭтоНачисление
	|					И ЗарегистрированныеНачисления.Физлицо ЕСТЬ NULL 
	|				ИЛИ (НЕ ДействующиеНачисления.ЭтоНачисление)
	|					И ЗарегистрированныеУдержания.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УжеПроведен,
	|	ДополнительныеДанные.ГрафикРаботы,
	|	ДействующиеНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ДополнительныеДанные.ГрафикРаботы.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
	|	ДействующиеНачисления.Физлицо.Наименование КАК ФизлицоНаименование
	|ИЗ
	|	ДействующиеНачисления КАК ДействующиеНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДополнительныеДанныеЗаполнения КАК ДополнительныеДанные
	|		ПО (ДополнительныеДанные.ФизЛицо = ДействующиеНачисления.ФизЛицо)
	|			И (ДополнительныеДанные.Период = ДействующиеНачисления.Период)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателей КАК ЗначениеПоказателя1
	|		ПО ДействующиеНачисления.ФизЛицо = ЗначениеПоказателя1.Физлицо
	|			И ДействующиеНачисления.ПоказательСсылка1 = ЗначениеПоказателя1.Показатель
	|			И (ДействующиеНачисления.Период = ЗначениеПоказателя1.ПериодДействия
	|				ИЛИ ЗначениеПоказателя1.ПериодДействия = НАЧАЛОПЕРИОДА(ЗначениеПоказателя1.ПериодДействия, МЕСЯЦ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателей КАК ЗначениеПоказателя2
	|		ПО ДействующиеНачисления.ФизЛицо = ЗначениеПоказателя2.Физлицо
	|			И ДействующиеНачисления.ПоказательСсылка2 = ЗначениеПоказателя2.Показатель
	|			И (ДействующиеНачисления.Период = ЗначениеПоказателя2.ПериодДействия
	|				ИЛИ ЗначениеПоказателя2.ПериодДействия = НАЧАЛОПЕРИОДА(ЗначениеПоказателя2.ПериодДействия, МЕСЯЦ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателей КАК ЗначениеПоказателя3
	|		ПО ДействующиеНачисления.ФизЛицо = ЗначениеПоказателя3.Физлицо
	|			И ДействующиеНачисления.ПоказательСсылка3 = ЗначениеПоказателя3.Показатель
	|			И (ДействующиеНачисления.Период = ЗначениеПоказателя3.ПериодДействия
	|				ИЛИ ЗначениеПоказателя3.ПериодДействия = НАЧАЛОПЕРИОДА(ЗначениеПоказателя3.ПериодДействия, МЕСЯЦ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателей КАК ЗначениеПоказателя4
	|		ПО ДействующиеНачисления.ФизЛицо = ЗначениеПоказателя4.Физлицо
	|			И ДействующиеНачисления.ПоказательСсылка4 = ЗначениеПоказателя4.Показатель
	|			И (ДействующиеНачисления.Период = ЗначениеПоказателя4.ПериодДействия
	|				ИЛИ ЗначениеПоказателя4.ПериодДействия = НАЧАЛОПЕРИОДА(ЗначениеПоказателя4.ПериодДействия, МЕСЯЦ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателей КАК ЗначениеПоказателя5
	|		ПО ДействующиеНачисления.ФизЛицо = ЗначениеПоказателя5.Физлицо
	|			И ДействующиеНачисления.ПоказательСсылка5 = ЗначениеПоказателя5.Показатель
	|			И (ДействующиеНачисления.Период = ЗначениеПоказателя5.ПериодДействия
	|				ИЛИ ЗначениеПоказателя5.ПериодДействия = НАЧАЛОПЕРИОДА(ЗначениеПоказателя5.ПериодДействия, МЕСЯЦ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателей КАК ЗначениеПоказателя6
	|		ПО ДействующиеНачисления.ФизЛицо = ЗначениеПоказателя6.Физлицо
	|			И ДействующиеНачисления.ПоказательСсылка6 = ЗначениеПоказателя6.Показатель
	|			И (ДействующиеНачисления.Период = ЗначениеПоказателя6.ПериодДействия
	|				ИЛИ ЗначениеПоказателя6.ПериодДействия = НАЧАЛОПЕРИОДА(ЗначениеПоказателя6.ПериодДействия, МЕСЯЦ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗарегистрированныеНачисления КАК ЗарегистрированныеНачисления
	|		ПО ДействующиеНачисления.ФизЛицо = ЗарегистрированныеНачисления.Физлицо
	|			И (ДополнительныеДанные.Подразделение = ЗарегистрированныеНачисления.Подразделение)
	|			И (ЗарегистрированныеНачисления.ВидРасчета.ЗачетОтработанногоВремени)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗарегистрированныеУдержания КАК ЗарегистрированныеУдержания
	|		ПО ДействующиеНачисления.ФизЛицо = ЗарегистрированныеУдержания.ФизЛицо
	|			И ДействующиеНачисления.ВидРасчета = ЗарегистрированныеУдержания.ВидРасчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизлицоНаименование,
	|	Физлицо,
	|	ПериодРаботники,
	|	ПериодНачисления,
	|	ОсновноеНачисление Убыв,
	|	ВидРасчета
	|";
	
	Запрос.Текст = ОсновнойТекстЗапроса;
	НачисленияУдержанияВыборка = Запрос.Выполнить().Выбрать();
	
	МассивВалютСНезаданнымКурсом = Новый Соответствие;

	ТЗНачисления = СформироватьТаблицуНачислений(НачисленияУдержанияВыборка, МассивВалютСНезаданнымКурсом);
	
	Если МассивВалютСНезаданнымКурсом.Количество() > 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	Если МассивФизлица = Неопределено Тогда
		Начисления.Загрузить(ТЗНачисления);
	Иначе
		Для Каждого СтрокаНачисления Из ТЗНачисления Цикл
			НоваяСтрока = Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
		КонецЦикла;
	КонецЕсли;		

	// проверим записи начислений на не пустой фактический период действия
	НаборЗаписейДляПроверки = РегистрыРасчета.УправленческиеНачисления.СоздатьНаборЗаписей();
	Если Ссылка.Пустая() Тогда
		СcылкаОбъекта = Документы.НачислениеЗарплатыРаботникам.ПолучитьСсылку();
		УстановитьСсылкуНового(СcылкаОбъекта);
	Иначе
		СcылкаОбъекта = Ссылка;
	КонецЕсли;
	НаборЗаписейДляПроверки.Отбор.Регистратор.Значение = СcылкаОбъекта;
	
	Для Каждого Строка Из ТЗНачисления Цикл
		
		Движение = НаборЗаписейДляПроверки.Добавить();
		
		// свойства
		Движение.ПериодРегистрации          = ПериодРегистрации;
		Движение.ПериодДействияНачало       = Строка.ДатаНачала;
		Движение.ПериодДействияКонец    	= Строка.ДатаОкончания;
		Движение.ВидРасчета				    = Строка.ВидРасчета;
		
		// измерения
		Движение.ФизЛицо                    = Строка.ФизЛицо;
		
		// реквизиты поддержки графика
		Движение.ГрафикРаботы				= Строка.ГрафикРаботы;
		Движение.ВидУчетаВремени  	        = ПроведениеРасчетов.ПолучитьВидУчетаВремени(Строка.СпособРасчета, Строка.СуммированныйУчетРабочегоВремени);
	КонецЦикла; 
	
	НаборЗаписейДляПроверки.Записать();
	
	// выполним удаление строк табличной части, которые соответствуют полностью вытесняемым видам расчета
	ЗапросПроверки = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УправленческиеНачисления.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	РегистрРасчета.УправленческиеНачисления КАК УправленческиеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.УправленческиеНачисления.ФактическийПериодДействия(Регистратор = &парамСсылка) КАК УправленческиеНачисленияФактическийПериодДействия
	|		ПО УправленческиеНачисления.НомерСтроки = УправленческиеНачисленияФактическийПериодДействия.НомерСтроки И УправленческиеНачисления.Регистратор = УправленческиеНачисленияФактическийПериодДействия.Регистратор
	|
	|ГДЕ
	|	УправленческиеНачисления.Регистратор = &парамСсылка И
	|	((УправленческиеНачисленияФактическийПериодДействия.Регистратор) ЕСТЬ NULL )
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки УБЫВ");
	
	ЗапросПроверки.УстановитьПараметр("парамСсылка", Ссылка);
	СтрокиКУдалению = ЗапросПроверки.Выполнить().Выгрузить();
	
	Для Каждого Строка Из СтрокиКУдалению Цикл
		Начисления.Удалить(Строка.НомерСтроки - 1);
	КонецЦикла;
	
	// удалим проверочный набор записей
	НаборЗаписейДляПроверки.Очистить();
	НаборЗаписейДляПроверки.Записать();
	
	
	// ЗАПОЛНЕНИЕ УДЕРЖАНИЙ
	НачисленияУдержанияВыборка.Сбросить();
	ТЗУдержания = СформироватьТаблицуУдержаний(НачисленияУдержанияВыборка);
	
	Если МассивФизлица = Неопределено Тогда
		Удержания.Загрузить(ТЗУдержания);
	Иначе
		Для Каждого СтрокаУдержания Из ТЗУдержания Цикл
			НоваяСтрока = Удержания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержания);
		КонецЦикла;
	КонецЕсли;		

	
 	// заполнение  ПогашениеЗаймов
	// ограничивающее условие на работников
	Если ПостроительЗапроса = Неопределено Тогда
		
		СписокРаботниковТекст = 
	 	"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		СписокРаботников.Физлицо КАК Физлицо
		|	ИЗ
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			Работники.Физлицо КАК Физлицо,
		|			Работники.Подразделение КАК Подразделение
		|		ИЗ
		|			РегистрСведений.Работники.СрезПоследних(&парамНачало, Подразделение В ИЕРАРХИИ (&парамПодразделение) И ((НЕ &ОтборПоФизлицам)
		|				ИЛИ ФизЛицо В (&Физлица))) КАК Работники
		|		";
	 	Если Подразделение = ПустоеПодразделение И Ответственный = ПустойОтветственный Тогда
	 		// нет условия
		ИначеЕсли Подразделение = ПустоеПодразделение Тогда
			Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу").РасчетЗарплатыПоОтветственным Тогда
	 			СписокРаботниковТекст = СписокРаботниковТекст + "
				|		ГДЕ
				|			Работники.Подразделение В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ Расчетчики.Подразделение ИЗ РегистрСведений.РасчетчикиЗарплаты.СрезПоследних(&парамНачало) Расчетчики ГДЕ Расчетчики.Пользователь = &парамПользователь)";
			КонецЕсли;
	 	Иначе
	 		СписокРаботниковТекст = СписокРаботниковТекст + "
			|		ГДЕ
			|			Работники.Подразделение В ИЕРАРХИИ(&парамПодразделение)";
	 	КонецЕсли;
	 	СписокРаботниковТекст = СписокРаботниковТекст + "
			|		
			|		ОБЪЕДИНИТЬ ВСЕ
			|		
			|		ВЫБРАТЬ
			|			Работники.Физлицо,
			|			Работники.Подразделение
			|		ИЗ
			|			РегистрСведений.Работники КАК Работники
			|		
			|		ГДЕ
			|			Работники.Период > &парамНачало И
			|			Работники.Период <= &парамКонец И
			|			((НЕ &ОтборПоФизлицам)
			|				ИЛИ ФизЛицо В (&Физлица))";
	 	Если Подразделение = ПустоеПодразделение И Ответственный = ПустойОтветственный Тогда
	 		// нет условия
		ИначеЕсли Подразделение = ПустоеПодразделение Тогда
			Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу").РасчетЗарплатыПоОтветственным Тогда
	 			СписокРаботниковТекст = СписокРаботниковТекст + "
				|            И Работники.Подразделение В ИЕРАРХИИ(ВЫБРАТЬ РАЗЛИЧНЫЕ Расчетчики.Подразделение ИЗ РегистрСведений.РасчетчикиЗарплаты.СрезПоследних(&парамНачало) Расчетчики ГДЕ Расчетчики.Пользователь = &парамПользователь)";
			КонецЕсли;
	 	Иначе
	 		СписокРаботниковТекст = СписокРаботниковТекст + "
			|            И Работники.Подразделение В ИЕРАРХИИ(&парамПодразделение)";
	 	КонецЕсли;
	 	СписокРаботниковТекст = СписокРаботниковТекст + ") КАК СписокРаботников";
	
	Иначе 
		//Основной текст запроса
		Запрос = ПостроительЗапроса.ПолучитьЗапрос();
		
		// Установим параметры запроса
		СписокРаботниковТекст = "&СписокРаботников";
		СписокРаботников = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо");
		Запрос.УстановитьПараметр("СписокРаботников", СписокРаботников);
		
	КонецЕсли;

 	Запрос.Текст = 
 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
 	|	ИСТИНА КАК Авторасчет,
 	|	ПогашениеЗаймовРаботникамиОстатки.ФизЛицо,
 	|	ПогашениеЗаймовРаботникамиОстатки.ДоговорЗайма,
	|	ПогашениеЗаймовРаботникамиОстатки.ФизЛицо.Наименование КАК ФизЛицоНаименование
 	|ИЗ
 	|	РегистрНакопления.ПогашениеЗаймовРаботниками.Остатки(
 	|				&парамКонец, 
 	|				Физлицо В (" + СписокРаботниковТекст + ")) КАК ПогашениеЗаймовРаботникамиОстатки
 	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОЗаймах КАК СведенияОЗаймах
	|		ПО ПогашениеЗаймовРаботникамиОстатки.ДоговорЗайма = СведенияОЗаймах.ДоговорЗайма
	|			И ПогашениеЗаймовРаботникамиОстатки.ФизЛицо = СведенияОЗаймах.ФизЛицо
 	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПогашениеЗаймовРаботниками КАК ПогашениеЗаймовРаботникамиОбороты
 	|		ПО ПогашениеЗаймовРаботникамиОстатки.ФизЛицо = ПогашениеЗаймовРаботникамиОбороты.ФизЛицо 
 	|			И ПогашениеЗаймовРаботникамиОстатки.ДоговорЗайма = ПогашениеЗаймовРаботникамиОбороты.ДоговорЗайма 
 	|			И (ПогашениеЗаймовРаботникамиОбороты.Период >= &парамНачало) 
 	|			И (ПогашениеЗаймовРаботникамиОбороты.Период <= &парамКонец) 
 	|			И (ПогашениеЗаймовРаботникамиОбороты.ВидДвижения = &Расход) 
 	|			И (ПогашениеЗаймовРаботникамиОбороты.УдержаноИзЗарплаты) 
 	|			И (ПогашениеЗаймовРаботникамиОбороты.УдержаноИзЗарплаты)
 	|
 	|ГДЕ
 	|	ПогашениеЗаймовРаботникамиОбороты.ФизЛицо ЕСТЬ NULL 
	|	И ПогашениеЗаймовРаботникамиОстатки.ОсновнойДолгОстаток <> 0
	|	И СведенияОЗаймах.НачалоПогашения <= &парамНачало
    |
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицоНаименование";
	
	Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамНачало", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамКонец",  КонецМесяца(ПериодРегистрации));
	
	ТЗПогашениеЗаймов = Запрос.Выполнить().Выгрузить();
	
	Если МассивФизлица = Неопределено Тогда
		ПогашениеЗаймов.Загрузить(ТЗПогашениеЗаймов);
	Иначе
		Для Каждого СтрокаПогашение Из ТЗПогашениеЗаймов Цикл
			НоваяСтрока = ПогашениеЗаймов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПогашение);
		КонецЦикла;
	КонецЕсли;		
	
	Возврат Истина;

КонецФункции // Автозаполнение()

// Процедура рассчитывает ресурсы всех наборов записей и заполняет 
// реквизиты Результат всех табличных частей документа
Процедура РассчитатьВсе(Физлицо = Неопределено, КомментироватьРасчет = Ложь) Экспорт
	
	Отказ = Ложь;
	
	//массивы для хранения индексов строк табличных частей,
	//используются для расчета по одному сотруднику
	Если Физлицо = Неопределено Тогда
		МассивИндексыСтрокНачисления = Неопределено;
		МассивИндексыСтрокУдержания = Неопределено;
	Иначе
		МассивИндексыСтрокНачисления = Новый Массив();
		МассивИндексыСтрокУдержания = Новый Массив();
	КонецЕсли;
	
	//Перед вызов процедуры документ должнен быть записан, движения должны быть удалены 
	
	// расчет связан с записью документа и его движений, поэтому выполняется в транзакции
	НачатьТранзакцию();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	
	// Создадим наборы записей используемых регистров 
	НаборНачисления = РегистрыРасчета.УправленческиеНачисления.СоздатьНаборЗаписей();
	НаборНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	НаборУдержания = РегистрыРасчета.УправленческиеУдержания.СоздатьНаборЗаписей();
	НаборУдержания.Отбор.Регистратор.Значение = Ссылка;
	
	// заполним набор начислений
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ФизЛицо).Выбрать();
	Пока ВыборкаПоНачислениям.Следующий() Цикл 
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, НаборНачисления);

			Если НЕ (Физлицо = Неопределено)  Тогда
				МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

	// заполним набор удержаний
	ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(ФизЛицо).Выбрать();
	Пока ВыборкаПоУдержаниям.Следующий() Цикл 
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоУдержаниям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуУдержаний(ВыборкаПоУдержаниям, ВыборкаПоШапкеДокумента, НаборУдержания);

			Если НЕ (Физлицо = Неопределено)  Тогда
				МассивИндексыСтрокУдержания.Добавить(ВыборкаПоУдержаниям.НомерСтроки-1);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	// рассчитываем записи
	// при этом передаем не только набор записей регистра расчета, но и набор записей регисра 
	// накопления со сведениями об отработанном времени
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("УправленческиеНачисления", НаборНачисления,,,,, Начисления, , , МассивИндексыСтрокНачисления, КомментироватьРасчет);

	// запишем рассчитанный набор перед расчетом удержаний
	НаборНачисления.Записать(Истина, Истина);
	
	// удержания - в последнюю очередь
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("УправленческиеУдержания", НаборУдержания,,,,, Удержания, , , МассивИндексыСтрокУдержания, КомментироватьРасчет);
	
	// Удаляем движения
	НаборНачисления.Очистить();
	НаборНачисления.Записать();
	
	НаборУдержания.Очистить();
	НаборУдержания.Записать();
	
	// и наконец, погашения займов
	РассчитатьПогашениеЗаймов(ФизЛицо, КомментироватьРасчет);

	ЗафиксироватьТранзакцию();

КонецПроцедуры  // РассчитатьВсе()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Дата, 
	|	ПериодРегистрации, 
	| 	Ссылка 
	|ИЗ 
	|	Документ." + Метаданные().Имя + "
	|ГДЕ 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Начисления" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНачисления(ФизЛица = Неопределено)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	Запрос.УстановитьПараметр("парамФизЛица", ФизЛица);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	СтрокиНачисления.ДатаНачала КАК ПериодДействияНачало,
	|	ВЫБОР 
	|		КОГДА СтрокиНачисления.ДатаОкончания <> &ПустаяДата 
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ) 
	|		ИНАЧЕ &ПустаяДата 
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.Подразделение,
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.Физлицо,
	|	СтрокиНачисления.ОтработаноДней КАК ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|	Работники.ГрафикРаботы,
	|	Работники.ГрафикРаботы.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	СтрокиНачисления.Авторасчет
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтрокиНачисления.ВидРасчета КАК ВидРасчета,
	|		СтрокиНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|		СтрокиНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|		СтрокиНачисления.ДатаНачала КАК ДатаНачала,
	|		СтрокиНачисления.ДатаОкончания КАК ДатаОкончания,
	|		СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|		СтрокиНачисления.Подразделение КАК Подразделение,
	|		СтрокиНачисления.Результат КАК Результат,
	|		СтрокиНачисления.Физлицо КАК Физлицо,
	|		СтрокиНачисления.ОтработаноДней КАК ОтработаноДней,
	|		СтрокиНачисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|		ПоследниеДаты.МаксПериод КАК МаксПериод,
	|		СтрокиНачисления.Показатель1 КАК Показатель1,
	|		СтрокиНачисления.Показатель2 КАК Показатель2,
	|		СтрокиНачисления.Показатель3 КАК Показатель3,
	|		СтрокиНачисления.Показатель4 КАК Показатель4,
	|		СтрокиНачисления.Показатель5 КАК Показатель5,
	|		СтрокиНачисления.Показатель6 КАК Показатель6,
	|		СтрокиНачисления.Авторасчет КАК Авторасчет
	|	ИЗ
	|		Документ.НачислениеЗарплатыРаботникам.Начисления КАК СтрокиНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МАКСИМУМ(Работники.Период) КАК МаксПериод,
	|				СтрокиНачисления.Физлицо КАК Физлицо
	|			ИЗ
	|				Документ.НачислениеЗарплатыРаботникам.Начисления КАК СтрокиНачисления
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
	|					ПО Работники.Период <= СтрокиНачисления.ДатаНачала И СтрокиНачисления.Физлицо = Работники.ФизЛицо
	|			
	|			ГДЕ
	|				СтрокиНачисления.Ссылка = &ДокументСсылка
	|				" + ?(ФизЛица <> Неопределено, "И СтрокиНачисления.ФизЛицо В (&парамФизЛица)", "") + "
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СтрокиНачисления.Физлицо) КАК ПоследниеДаты
	|			ПО СтрокиНачисления.Физлицо = ПоследниеДаты.Физлицо
	|	
	|	ГДЕ
	|		СтрокиНачисления.Ссылка = &ДокументСсылка
	|		" + ?(ФизЛица <> Неопределено, "И СтрокиНачисления.ФизЛицо В (&парамФизЛица)", "") + ") КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
	|		ПО Работники.Период = СтрокиНачисления.МаксПериод И СтрокиНачисления.Физлицо = Работники.ФизЛицо
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиНачисления.НомерСтроки";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

// Формирует запрос по таблице "Удержания" документа
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоУдержания(ФизЛица = Неопределено)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	Запрос.УстановитьПараметр("парамФизЛица", ФизЛица);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СтрокиУдержания.ВидРасчета,
	               |	СтрокиУдержания.ДатаНачала,
	               |	ВЫБОР 
	               |		КОГДА СтрокиУдержания.ДатаОкончания <> &ПустаяДата 
	               |			ТОГДА КОНЕЦПЕРИОДА(СтрокиУдержания.ДатаОкончания, ДЕНЬ) 
	               |		ИНАЧЕ &ПустаяДата 
	               |	КОНЕЦ КАК ДатаОкончания,
	               |	СтрокиУдержания.НомерСтроки,
	               |	СтрокиУдержания.Результат,
	               |	СтрокиУдержания.Подразделение,
	               |	СтрокиУдержания.Физлицо,
	               |	СтрокиУдержания.Показатель1,
	               |	СтрокиУдержания.Показатель2,
	               |	СтрокиУдержания.Показатель3,
	               |	СтрокиУдержания.Показатель4,
	               |	СтрокиУдержания.Показатель5,
	               |	СтрокиУдержания.Показатель6,
	               |	СтрокиУдержания.Авторасчет
	               |ИЗ
	               |	Документ.НачислениеЗарплатыРаботникам.Удержания КАК СтрокиУдержания
	               |
	               |ГДЕ
	               |	СтрокиУдержания.Ссылка = &ДокументСсылка
	               |	" + ?(ФизЛица <> Неопределено, "И СтрокиУдержания.ФизЛицо В (&парамФизЛица)", "");
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоУдержания()

// Формирует запрос по таблице "ПогашениеЗайма" документа
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоПогашениеЗайма()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтрокиПогашениеЗайма.НомерСтроки,
	|	СтрокиПогашениеЗайма.ДоговорЗайма,
	|	СтрокиПогашениеЗайма.ПогашеноЗайма,
	|	СтрокиПогашениеЗайма.ФизЛицо
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникам.ПогашениеЗаймов КАК СтрокиПогашениеЗайма
	|
	|ГДЕ
	|	СтрокиПогашениеЗайма.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоПогашениеЗайма()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	//  ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не задан период начисления зарплаты!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Удержания" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Удержания"": ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала удержания!", Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания удержания!", Отказ, Заголовок);
	КонецЕсли;

	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиУдержания()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ПогашениеЗайма" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиПогашениеЗайма(ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Погашение займов"": ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;

 	// ДоговорЗайма
 	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДоговорЗайма) Тогда
 		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не задан договор займа погашение которого выполняется!", Отказ, Заголовок);
 	КонецЕсли;
КонецПроцедуры // ПроверитьЗаполнениеСтрокиПогашениеЗайма()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуНачислений(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборНачисления)
	
	Движение = НаборНачисления.Добавить();

	// Свойства
	Движение.ПериодРегистрации          = ПериодРегистрации;
	Движение.ПериодДействияНачало       = ВыборкаПоСтрокамДокумента.ПериодДействияНачало;
	Движение.ПериодДействияКонец    	= ВыборкаПоСтрокамДокумента.ПериодДействияКонец;
	Движение.ВидРасчета				    = ВыборкаПоСтрокамДокумента.ВидРасчета;

	// Измерения
	Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;

	// Ресурсы
	Движение.Результат					= ВыборкаПоСтрокамДокумента.Результат;
	// ресурсы по отработанному времени
	Если ВыборкаПоСтрокамДокумента.ЗачетОтработанногоВремени Тогда
		Движение.ОтработаноДней 		= ВыборкаПоСтрокамДокумента.ОтработаноДней;
		Движение.ОтработаноЧасов 		= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
	КонецЕсли;

	// Реквизиты
	Движение.ГрафикРаботы				= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
	Движение.ВидУчетаВремени  	        = ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента.СпособРасчета, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени);
	Движение.Подразделение				= ВыборкаПоСтрокамДокумента.Подразделение;
	Движение.Показатель1				= ВыборкаПоСтрокамДокумента.Показатель1;
	Движение.Показатель2				= ВыборкаПоСтрокамДокумента.Показатель2;
	Движение.Показатель3				= ВыборкаПоСтрокамДокумента.Показатель3;
	Движение.Показатель4				= ВыборкаПоСтрокамДокумента.Показатель4;
	Движение.Показатель5				= ВыборкаПоСтрокамДокумента.Показатель5;
	Движение.Показатель6				= ВыборкаПоСтрокамДокумента.Показатель6;
	Движение.Авторасчет					= ВыборкаПоСтрокамДокумента.Авторасчет;
	
КонецПроцедуры // ДобавитьСтрокуНачислений

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
//	ВыборкаПоШапкеДокумента
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуУдержаний(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборУдержания)

	Движение = НаборУдержания.Добавить();

	// Свойства
	Движение.ПериодРегистрации          = ПериодРегистрации;
	Движение.БазовыйПериодНачало        = ВыборкаПоСтрокамДокумента.ДатаНачала;
	Движение.БазовыйПериодКонец  	    = ВыборкаПоСтрокамДокумента.ДатаОкончания;
	Движение.ВидРасчета				    = ВыборкаПоСтрокамДокумента.ВидРасчета;

	// Измерения
	Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;

	// Ресурсы
	Движение.Результат					= ВыборкаПоСтрокамДокумента.Результат;

	// Реквизиты
	Движение.Показатель1			= ВыборкаПоСтрокамДокумента.Показатель1;
	Движение.Показатель2			= ВыборкаПоСтрокамДокумента.Показатель2;
	Движение.Показатель3			= ВыборкаПоСтрокамДокумента.Показатель3;
	Движение.Показатель4			= ВыборкаПоСтрокамДокумента.Показатель4;
	Движение.Показатель5			= ВыборкаПоСтрокамДокумента.Показатель5;
	Движение.Показатель6			= ВыборкаПоСтрокамДокумента.Показатель6;
	Движение.Авторасчет				= ВыборкаПоСтрокамДокумента.Авторасчет;

КонецПроцедуры // ДобавитьСтрокуУдержаний

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
//	ВыборкаПоШапкеДокумента
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуПогашениеЗайма(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборПогашениеЗайма)

	// погашено процентов и основного долга
	Движение = НаборПогашениеЗайма.Добавить();

	// Свойства
	Движение.Период 	 = КонецМесяца(ПериодРегистрации);
	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;

	// Измерения

 	Движение.ФизЛицо      = ВыборкаПоСтрокамДокумента.ФизЛицо;
 	Движение.ДоговорЗайма = ВыборкаПоСтрокамДокумента.ДоговорЗайма;

 	Движение.ОсновнойДолг = ВыборкаПоСтрокамДокумента.ПогашеноЗайма;
 	
 	// Реквизит
 	Движение.УдержаноИзЗарплаты = Истина;

КонецПроцедуры // ДобавитьСтрокуПогашениеЗайма

// Вычисляет разницу между начислениями и удержаниями работника и формирует
// движения по взаиморасчетам с работниками
//
// Параметры:
//		ВыборкаПоШапкеДокумента - спозиционированная выборка по шапке документа
//		НаборЗаписей - набор записей 
//
// Возвращаемое значение:
//  Нет.
//		
Процедура ДобавитьСтрокуВзаиморасчетов(ВыборкаПоШапкеДокумента, НаборЗаписей)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Доходы.Физлицо,
	|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачисленияРаботников.Физлицо КАК Физлицо,
	|		НачисленияРаботников.Результат КАК СуммаДохода
	|	ИЗ
	|		Документ.НачислениеЗарплатыРаботникам.Начисления КАК НачисленияРаботников
	|	
	|	ГДЕ
	|		НачисленияРаботников.Ссылка = &парамСсылка И
	|		(НачисленияРаботников.Результат <> 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗплУдержания.Физлицо,
	|		-(ЗплУдержания.Результат)
	|	ИЗ
	|		Документ.НачислениеЗарплатыРаботникам.Удержания КАК ЗплУдержания
	|	
	|	ГДЕ
	|		ЗплУдержания.Ссылка = &парамСсылка И
	|		(ЗплУдержания.Результат <> 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗплЗаймы.ФизЛицо,
	|		-(ЗплЗаймы.ПогашеноЗайма)
	|	ИЗ
	|		Документ.НачислениеЗарплатыРаботникам.ПогашениеЗаймов КАК ЗплЗаймы
	|	
	|	ГДЕ
	|		ЗплЗаймы.Ссылка = &парамСсылка И
	|		(ЗплЗаймы.ПогашеноЗайма <> 0)) КАК Доходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.Физлицо");
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамСсылка" , Ссылка);
	
	Доходы = Запрос.Выполнить().Выбрать();
	// сформируем движения ВзаиморасчетыСРаботниками
	Пока Доходы.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// свойства
		Движение.Период 	 = КонецМесяца(ПериодРегистрации);
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		
		// измерения 
		Движение.Физлицо 	 = Доходы.Физлицо;
		
		// ресурсы
		Движение.СуммаУпр 	 = Доходы.СуммаДохода;
		
	КонецЦикла;
	
КонецПроцедуры  // ДобавитьСтрокуВзаиморасчетов

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
   
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// Начисления
			//
			// получим реквизиты табличной части
			ВыборкаПоНачислениям = СформироватьЗапросПоНачисления().Выбрать();

			Пока ВыборкаПоНачислениям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, Движения.УправленческиеНачисления);
				КонецЕсли;
			КонецЦикла;

			// Удержания
			//
			// получим реквизиты табличной части
			ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания().Выбрать();

			Пока ВыборкаПоУдержаниям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоУдержаниям, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуУдержаний(ВыборкаПоУдержаниям, ВыборкаПоШапкеДокумента, Движения.УправленческиеУдержания);
				КонецЕсли;
			КонецЦикла;
			
			// ПогашениеЗайма
			//
			// получим реквизиты табличной части
			ВыборкаПоПогашениеЗайма = СформироватьЗапросПоПогашениеЗайма().Выбрать();

			Пока ВыборкаПоПогашениеЗайма.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиПогашениеЗайма(ВыборкаПоПогашениеЗайма, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуПогашениеЗайма(ВыборкаПоПогашениеЗайма, ВыборкаПоШапкеДокумента, Движения.ПогашениеЗаймовРаботниками);
				КонецЕсли;
			КонецЦикла;
			
			// сформируем начисления к выплате по начислениям документа
			ДобавитьСтрокуВзаиморасчетов(ВыборкаПоШапкеДокумента, Движения.ВзаиморасчетыСРаботниками);
			
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(Начисления);
	МассивТЧ.Добавить(Удержания);
	МассивТЧ.Добавить(ПогашениеЗаймов);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "ФизЛицо");
	
КонецПроцедуры

