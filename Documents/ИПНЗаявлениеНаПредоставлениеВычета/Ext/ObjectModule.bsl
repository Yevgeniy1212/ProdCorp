////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	//так как нет печатных форм у документа, по умолчанию
	ТабДокумент = Неопределено;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура();

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа.
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИПНЗаявлениеНаПредоставлениеВычета.Дата,
	               |	ИПНЗаявлениеНаПредоставлениеВычета.Организация,
	               |	ИПНЗаявлениеНаПредоставлениеВычета.ФизЛицо,
	               |	ИПНЗаявлениеНаПредоставлениеВычета.ВычетИПН,
	               |	ИПНЗаявлениеНаПредоставлениеВычета.ДатаНачала,
	               |	ИПНЗаявлениеНаПредоставлениеВычета.ДатаОкончания,
	               |	ИПНЗаявлениеНаПредоставлениеВычета.ДокументОснование,
	               |	ИПНЗаявлениеНаПредоставлениеВычета.ДокументОснование.Организация КАК ОрганизацияОснования,
	               |	ИПНЗаявлениеНаПредоставлениеВычета.ДокументОснование.ФизЛицо КАК ФизЛицоОснования,
	               |	ИПНЗаявлениеНаПредоставлениеВычета.ДокументОснование.ВычетИПН КАК ВычетИПНОснования,
	               |	ИПНЗаявлениеНаПредоставлениеВычета.Ссылка
	               |ИЗ
	               |	Документ.ИПНЗаявлениеНаПредоставлениеВычета КАК ИПНЗаявлениеНаПредоставлениеВычета
	               |ГДЕ
	               |	ИПНЗаявлениеНаПредоставлениеВычета.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части документа ГрафикПлатежей.
//
Функция СформироватьЗапросПоГрафикуПлатежей(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", ВыборкаПоШапкеДокумента.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИПНЗаявлениеНаПредоставлениеВычетаГрафикПлатежей.НомерСтроки КАК НомерСтроки,
	               |	ИПНЗаявлениеНаПредоставлениеВычетаГрафикПлатежей.ДатаПлатежа,
	               |	ИПНЗаявлениеНаПредоставлениеВычетаГрафикПлатежей.СуммаВычета
	               |ИЗ
	               |	Документ.ИПНЗаявлениеНаПредоставлениеВычета.ГрафикПлатежей КАК ИПНЗаявлениеНаПредоставлениеВычетаГрафикПлатежей
	               |ГДЕ
	               |	ИПНЗаявлениеНаПредоставлениеВычетаГрафикПлатежей.Ссылка = &ДокументСсылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоГрафикуПлатежей()

// Проверяет правильность заполнения шапки документа.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;

	//  ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан работник!", Отказ, Заголовок);
	КонецЕсли;
	
	// ВычетИПН
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВычетИПН) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан вид вычета ИПН!", Отказ, Заголовок);
	КонецЕсли;

	// Даты начала и окончания
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан период предоставления вычета!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоШапкеДокумента.ДатаНачала > ВыборкаПоШапкеДокумента.ДатаОкончания Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Дата начала периода предоставления вычета должна быть раньше даты окончания!", Отказ, Заголовок);
	КонецЕсли;

	// ДокументОснование
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДокументОснование) Тогда
		
		// соответствие реквизитов текущего документа и документа-основания
			
		Если ВыборкаПоШапкеДокумента.Организация <> ВыборкаПоШапкеДокумента.ОрганизацияОснования Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Организации документа и документа-основания не совпадают!", Отказ, Заголовок);
		КонецЕсли;

		Если ВыборкаПоШапкеДокумента.ФизЛицо <> ВыборкаПоШапкеДокумента.ФизЛицоОснования Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Работник документа и документа-основания не совпадают!", Отказ, Заголовок);
		КонецЕсли;

		Если ВыборкаПоШапкеДокумента.ВычетИПН <> ВыборкаПоШапкеДокумента.ВычетИПНОснования Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Вид вычета ИПН документа и документа-основания не совпадают!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ документа.
//
Процедура ПроверитьЗаполнениеСтрокиТЧ(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""График платежей"": ";
	
	// ДатаПлатежа
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаПлатежа) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата платежа!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ДатаПлатежа < ВыборкаПоШапкеДокумента.ДатаНачала
				Или ВыборкаПоСтрокамДокумента.ДатаПлатежа > ВыборкаПоШапкеДокумента.ДатаОкончания Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата платежа не совпадает с периодом предоставления вычета!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиТЧ()

// Процедура добавляет движения по регистрам сведений.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц)

	Движение = Движения.ИПНПлановыеНалоговыеВычетыФизлиц.Добавить();
	
	// Свойства
	Движение.Период 				= ВыборкаПоШапкеДокумента.Дата;
	
	// Измерения 
	Движение.Физлицо				= ВыборкаПоШапкеДокумента.ФизЛицо;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Движение.Налогоплательщик 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоШапкеДокумента.Организация,
																					ВыборкаПоШапкеДокумента.Организация,
																					ИсчислениеНалоговСтруктурныхЕдиниц,
																					Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	Иначе
		Движение.Налогоплательщик 	=	ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	// предоставление вычета осуществляется в том месяце, когда фактически произведен платеж
	Движение.МесяцНалоговогоПериода = НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаПлатежа);
	Движение.ВычетИПН				= ВыборкаПоШапкеДокумента.ВычетИПН;
	
	// Если указан документ-основание, то используем его
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДокументОснование) Тогда
		Движение.ДокументОснование 	= ВыборкаПоШапкеДокумента.ДокументОснование;
	Иначе
		Движение.ДокументОснование 	= ВыборкаПоШапкеДокумента.Ссылка;
	КонецЕсли;
	
	// Ресурсы
	Движение.СуммаВычета 			= ВыборкаПоСтрокамДокумента.СуммаВычета;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения" документа.
//
Процедура ОбработкаПроведения(Отказ, Режим)

	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");

	// Заголовок документа при проведении
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// получим реквизиты табличной части
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоГрафикуПлатежей(ВыборкаПоШапкеДокумента).Выбрать();

			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиТЧ(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

//Обработчик-события "ПриКопировании" документа
//
Процедура ПриКопировании(ОбъектКопирования)
	ДокументОснование = Неопределено;
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ  

мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
