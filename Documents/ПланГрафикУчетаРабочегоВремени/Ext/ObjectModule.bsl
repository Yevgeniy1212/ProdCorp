Перем мДлинаСуток;
Перем мТаблицаПерсональныеГрафики;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Формирует запрос по документу
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати()

	Запрос = Новый Запрос;

	ДнейВМесяце = День(КонецМесяца(ПериодРегистрации));
	
	МассивПраздникиИВыходные = Новый Массив;
	МассивПраздникиИВыходные.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
	МассивПраздникиИВыходные.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.ДополнительныйВыходной);

	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДокументСсылка",   Ссылка);
	Запрос.УстановитьПараметр("парамДатаДокумента",    Дата);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация",	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("парамОрганизация",	Организация);
	Запрос.УстановитьПараметр("парамРуководитель",	Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("парамПодразделение",	ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("парамПоЧасам",	Перечисления.ВидыУчетаВремени.ПоЧасам);
	Запрос.УстановитьПараметр("парамКонецМесяца",	КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамДнейВМесяце",	ДнейВМесяце);

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// данные об организации
	|	ПланГрафикУчетаРабочегоВремени.Ссылка.Организация.Наименование КАК НазваниеОрганизации,
	|	ПланГрафикУчетаРабочегоВремени.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|	ПланГрафикУчетаРабочегоВремени.Ссылка.Дата КАК ДатаДок,
	// руководитель организации
	|	ВЫБОР 
	|		КОГДА РуководительОрганизации.ФизическоеЛицо 
	|			ЕСТЬ NULL ТОГДА """" 
	|		ИНАЧЕ ВЫБОР 
	|				КОГДА ФИОФизЛицРуководительОрганизации.Фамилия ЕСТЬ NULL 
	|					ТОГДА РуководительОрганизации.ФизическоеЛицо.Наименование 
	|				ИНАЧЕ ФИОФизЛицРуководительОрганизации.Фамилия + ВЫБОР 
	|																	КОГДА ФИОФизЛицРуководительОрганизации.Имя <> """" 
	|																		ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицРуководительОрганизации.Имя, 1, 1) + "". "" 
	|																	ИНАЧЕ """" 
	|																 КОНЕЦ + ВЫБОР 
	|																			КОГДА ФИОФизЛицРуководительОрганизации.Отчество <> """" 
	|																				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицРуководительОрганизации.Отчество, 1, 1) + "". "" 
	|																			ИНАЧЕ """" 
	|																		 КОНЕЦ 
	|			  КОНЕЦ 
	|	КОНЕЦ КАК ФИОРуководителяОрганизации,
	|	ВЫБОР 
	|		КОГДА РуководительОрганизации.Должность ЕСТЬ NULL 
	|			ТОГДА """" 
	|		ИНАЧЕ РуководительОрганизации.Должность.Наименование 
	|	КОНЕЦ КАК ДолжностьРуководителяОрганизации,
	// руководитель подразделения
	|	ВЫБОР 
	|		КОГДА ПланГрафикУчетаРабочегоВремени.Ссылка.ПодразделениеОрганизации ЕСТЬ NULL 
	|			ТОГДА """" ИНАЧЕ ПланГрафикУчетаРабочегоВремени.Ссылка.ПодразделениеОрганизации.Наименование 
	|	КОНЕЦ КАК НаименованиеПодразделенияОрганизации,
	|	ВЫБОР 
	|		КОГДА РуководительПодразделения.ФизическоеЛицо ЕСТЬ NULL 
	|			ТОГДА """" 
	|		ИНАЧЕ ВЫБОР 
	|				КОГДА ФИОФизЛицРуководительПодразделения.Фамилия ЕСТЬ NULL 
	|					ТОГДА РуководительПодразделения.ФизическоеЛицо.Наименование 
	|				ИНАЧЕ ФИОФизЛицРуководительПодразделения.Фамилия + ВЫБОР 
	|																		КОГДА ФИОФизЛицРуководительПодразделения.Имя <> """" 
	|																			ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицРуководительПодразделения.Имя, 1, 1) + "". "" 
	|																		ИНАЧЕ """" 
	|																   КОНЕЦ + ВЫБОР 
	|																				КОГДА ФИОФизЛицРуководительПодразделения.Отчество <> """" 
	|																					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицРуководительПодразделения.Отчество, 1, 1) + "". "" 
	|																				ИНАЧЕ """" 
	|																		   КОНЕЦ 
	|			  КОНЕЦ 
	|	КОНЕЦ КАК ФИОРуководителяПодразделения,
	|	ВЫБОР 
	|		КОГДА РуководительПодразделения.Должность ЕСТЬ NULL 
	|			ТОГДА """" 
	|		ИНАЧЕ РуководительПодразделения.Должность.Наименование 
	|	КОНЕЦ КАК ДолжностьРуководителяПодразделения,
	// ФИО работника
	|	ВЫБОР 
	|		КОГДА ФИОФизЛицРаботник.Фамилия ЕСТЬ NULL 
	|			ТОГДА ПланГрафикУчетаРабочегоВремени.ФизЛицо.Наименование 
	|		ИНАЧЕ ФИОФизЛицРаботник.Фамилия + ВЫБОР 
	|											КОГДА ФИОФизЛицРаботник.Имя <> """" 
	|												ТОГДА "" "" + ФИОФизЛицРаботник.Имя 
	|											ИНАЧЕ """" 
	|										  КОНЕЦ + ВЫБОР 
	|													КОГДА ФИОФизЛицРаботник.Отчество <> """" 
	|														ТОГДА "" "" + ФИОФизЛицРаботник.Отчество 
	|													ИНАЧЕ """" 
	|												  КОНЕЦ 
	|	КОНЕЦ КАК ФИОРаботника,
	|	ПланГрафикУчетаРабочегоВремени.Сотрудник.Код КАК ТабельныйНомер
	|";
	
	Для Сч = 1 По 31 Цикл
		Запрос.Текст = Запрос.Текст + ",
		// Если день попадает  хоть в какой-нибудь рабочий период, то считаем часы, иначе - прочерк
		|	ВЫБОР КОГДА СУММА(ВЫБОР КОГДА " + Строка(Сч) + " МЕЖДУ ДЕНЬ(ПланГрафикУчетаРабочегоВремени.ДатаНачала) И ДЕНЬ(ПланГрафикУчетаРабочегоВремени.ДатаОкончания) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) > 0 ТОГДА СУММА(" + ?(Сч <= ДнейВМесяце, "ПланГрафикУчетаРабочегоВремени.Часы" + Строка(Сч), "0") + ") ИНАЧЕ " + ?(Сч<=ДнейВМесяце,"""-""", """""") + " КОНЕЦ КАК Часы" + Строка(Сч) + ", 
		|	ВЫБОР КОГДА СУММА(ВЫБОР КОГДА " + Строка(Сч) + " МЕЖДУ ДЕНЬ(ПланГрафикУчетаРабочегоВремени.ДатаНачала) И ДЕНЬ(ПланГрафикУчетаРабочегоВремени.ДатаОкончания) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) > 0 ТОГДА СУММА(" + ?(Сч <= ДнейВМесяце, "ПланГрафикУчетаРабочегоВремени.ЧасыНочные" + Строка(Сч), "0") + ") ИНАЧЕ " + ?(Сч<=ДнейВМесяце,"""-""", """""") + " КОНЕЦ КАК ЧасыНочные" + Строка(Сч) + "
		|";
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + ",
	|	СУММА(ПланГрафикУчетаРабочегоВремени.ВсегоЧасов) КАК ВсегоЧасов,
	|	СУММА(ПланГрафикУчетаРабочегоВремени.ВсегоЧасовНочных) КАК ВсегоЧасовНочных,
	|	МАКСИМУМ(ЧасыПоГрафику.НормаЧасов) КАК НормаЧасов
	|
	|ИЗ 
	|	Документ.ПланГрафикУчетаРабочегоВремени.РабочееВремя КАК ПланГрафикУчетаРабочегоВремени
	// ФИО работника
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДатаДокумента, ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ Документ.ПланГрафикУчетаРабочегоВремени.РабочееВремя ГДЕ Ссылка = &парамДокументСсылка)) КАК ФИОФизЛицРаботник
	|		ПО ПланГрафикУчетаРабочегоВремени.ФизЛицо = ФИОФизЛицРаботник.ФизЛицо
	// ФИО руководитель организации
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&парамДатаДокумента,СтруктурнаяЕдиница = &парамОрганизация И ОтветственноеЛицо = &парамРуководитель) КАК РуководительОрганизации
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДатаДокумента) КАК ФИОФизЛицРуководительОрганизации
	|		ПО РуководительОрганизации.ФизическоеЛицо = ФИОФизЛицРуководительОрганизации.ФизЛицо
	// ФИО руководителя подразделения
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&парамДатаДокумента,СтруктурнаяЕдиница = &парамПодразделение И ОтветственноеЛицо = &парамРуководитель) КАК РуководительПодразделения
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДатаДокумента) КАК ФИОФизЛицРуководительПодразделения
	|		ПО РуководительПодразделения.ФизическоеЛицо = ФИОФизЛицРуководительПодразделения.ФизЛицо
	// Рабочее время по основному графику по каждой строке табличной части
	|	ЛЕВОЕ СОЕДИНЕНИЕ 	(ВЫБРАТЬ
	|							РабочееВремя.НомерСтроки КАК НомерСтроки,
	|							БалансРабочегоВремени.НормаЧасов КАК НормаЧасов
	|						ИЗ
	|							Документ.ПланГрафикУчетаРабочегоВремени.РабочееВремя КАК РабочееВремя
	|
	|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БалансРабочегоВремени КАК БалансРабочегоВремени
	|								ПО РабочееВремя.ГрафикРаботы = БалансРабочегоВремени.ГрафикРаботы 
	|									И БалансРабочегоВремени.ДатаМесяца = РабочееВремя.Ссылка.ПериодРегистрации
	|						ГДЕ
	|							РабочееВремя.Ссылка = &парамДокументСсылка) КАК ЧасыПоГрафику
	|	ПО ПланГрафикУчетаРабочегоВремени.НомерСтроки = ЧасыПоГрафику.НомерСтроки
	|
	|ГДЕ
	|	ПланГрафикУчетаРабочегоВремени.Ссылка = &парамДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланГрафикУчетаРабочегоВремени.Ссылка.Организация.Наименование,
	|	ПланГрафикУчетаРабочегоВремени.Ссылка.ПериодРегистрации,
	|	ПланГрафикУчетаРабочегоВремени.Ссылка.Дата,
	|	ВЫБОР КОГДА РуководительОрганизации.ФизическоеЛицо ЕСТЬ NULL ТОГДА """" ИНАЧЕ ВЫБОР КОГДА ФИОФизЛицРуководительОрганизации.Фамилия ЕСТЬ NULL ТОГДА РуководительОрганизации.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицРуководительОрганизации.Фамилия + ВЫБОР КОГДА ФИОФизЛицРуководительОрганизации.Имя <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицРуководительОрганизации.Имя, 1, 1) + "". "" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ФИОФизЛицРуководительОрганизации.Отчество <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицРуководительОрганизации.Отчество, 1, 1) + "". "" ИНАЧЕ """" КОНЕЦ КОНЕЦ КОНЕЦ,
	|	ВЫБОР КОГДА РуководительОрганизации.Должность ЕСТЬ NULL ТОГДА """" ИНАЧЕ РуководительОрганизации.Должность.Наименование КОНЕЦ,
	|	ВЫБОР КОГДА ПланГрафикУчетаРабочегоВремени.Ссылка.ПодразделениеОрганизации ЕСТЬ NULL ТОГДА """" ИНАЧЕ ПланГрафикУчетаРабочегоВремени.Ссылка.ПодразделениеОрганизации.Наименование КОНЕЦ,
	|	ВЫБОР КОГДА РуководительПодразделения.ФизическоеЛицо ЕСТЬ NULL ТОГДА """" ИНАЧЕ ВЫБОР КОГДА ФИОФизЛицРуководительПодразделения.Фамилия ЕСТЬ NULL ТОГДА РуководительПодразделения.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицРуководительПодразделения.Фамилия + ВЫБОР КОГДА ФИОФизЛицРуководительПодразделения.Имя <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицРуководительПодразделения.Имя, 1, 1) + "". "" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ФИОФизЛицРуководительПодразделения.Отчество <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицРуководительПодразделения.Отчество, 1, 1) + "". "" ИНАЧЕ """" КОНЕЦ КОНЕЦ КОНЕЦ,
	|	ВЫБОР КОГДА РуководительПодразделения.Должность ЕСТЬ NULL ТОГДА """" ИНАЧЕ РуководительПодразделения.Должность.Наименование КОНЕЦ,
	|	ВЫБОР КОГДА ФИОФизЛицРаботник.Фамилия ЕСТЬ NULL ТОГДА ПланГрафикУчетаРабочегоВремени.ФизЛицо.Наименование ИНАЧЕ ФИОФизЛицРаботник.Фамилия + ВЫБОР КОГДА ФИОФизЛицРаботник.Имя <> """" ТОГДА "" "" + ФИОФизЛицРаботник.Имя ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ФИОФизЛицРаботник.Отчество <> """" ТОГДА "" "" + ФИОФизЛицРаботник.Отчество ИНАЧЕ """" КОНЕЦ КОНЕЦ,
    |	ПланГрафикУчетаРабочегоВремени.Сотрудник.Код
	|УПОРЯДОЧИТЬ ПО 
	|	ТабельныйНомер
	|";
	
	Возврат Запрос.Выполнить();
                   
КонецФункции // СформироватьЗапросДляПечати()

// Функция формирует запрос по реквизитам шапки документа
//
Функция СформироватьЗапросПоШапке()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПланГрафикУчетаРабочегоВремени.Ссылка КАК Ссылка,
	|	ПланГрафикУчетаРабочегоВремени.Дата КАК Дата,
	|	ПланГрафикУчетаРабочегоВремени.ПериодРегистрации КАК ПериодРегистрации,
	|   ДЕНЬ(КОНЕЦПЕРИОДА(ПланГрафикУчетаРабочегоВремени.ПериодРегистрации, МЕСЯЦ)) КАК ДнейВМесяце,
	|	ПланГрафикУчетаРабочегоВремени.Организация КАК Организация,
	|	ВЫБОР КОГДА ПланГрафикУчетаРабочегоВремени.Организация.ГоловнаяОрганизация <> &парамПустаяОрганизация ТОГДА ПланГрафикУчетаРабочегоВремени.Организация.ГоловнаяОрганизация ИНАЧЕ ПланГрафикУчетаРабочегоВремени.Организация КОНЕЦ КАК ГоловнаяОрганизация
	|ИЗ
	|	Документ.ПланГрафикУчетаРабочегоВремени КАК ПланГрафикУчетаРабочегоВремени
	|ГДЕ
	|	ПланГрафикУчетаРабочегоВремени.Ссылка = &парамСсылка
	|";
	
	Запрос.УстановитьПараметр("парамСсылка", Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Возврат Запрос.Выполнить();
КонецФункции

// Формирует запрос по табличной части документа
//
// Параметры:
// 	ВыборкаПоШапкеДокумента - результат выбора по шапке документа
//
// Возвращаемое значение:
// 	Результат запроса
//
Функция СформироватьЗапросПоРабочееВремя(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамСсылка", ВыборкаПоШапкеДокумента.Ссылка);
	Запрос.УстановитьПараметр("парамОрганизация", ВыборкаПоШапкеДокумента.Организация);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамНачалоМесяца", ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("парамКонецМесяца", КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
	Запрос.УстановитьПараметр("парамУволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("парамПоЧасам", Перечисления.ВидыУчетаВремени.ПоЧасам);
	
	ДнейВМесяце = День(КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));	
	
	УсловиеПоРаботникам = "Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ Документ.ПланГрафикУчетаРабочегоВремени.РабочееВремя ГДЕ Ссылка = &парамСсылка) И Организация = &парамГоловнаяОрганизация";
	
	ТекстЗапросаРаботники = "
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы,
	|	&парамНачалоМесяца КАК Дата,
	|	РаботникиОрганизации.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамНачалоМесяца, " + УсловиеПоРаботникам + ") КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.ПодразделениеОрганизации.Владелец = &парамОрганизация И
	|	РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУволен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы,
	|	РаботникиОрганизации.Период КАК Дата,
	|	РаботникиОрганизации.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Период > &парамНачалоМесяца И 
	|	РаботникиОрганизации.Период <= &парамКонецМесяца И " + УсловиеПоРаботникам + " И
	|	РаботникиОрганизации.ПодразделениеОрганизации.Владелец = &парамОрганизация
	|";
	
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РабочееВремя.НомерСтроки КАК НомерСтроки, 
	|	РабочееВремя.Сотрудник КАК Сотрудник, 
	|	РабочееВремя.Сотрудник.Наименование КАК ФИОСотрудника, 
	|	РабочееВремя.ГрафикРаботы.Наименование КАК НазваниеГрафикаРаботы,	
	|	РабочееВремя.ФизЛицо КАК ФизЛицо,
	|	РабочееВремя.ГрафикРаботы КАК ГрафикРаботы,
	|	РабочееВремя.ГрафикРаботы.ИспользуетсяСовместноСПланГрафиком КАК ИспользуетсяСовместноСПланГрафиком,
	|	РабочееВремя.ДатаНачала КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(РабочееВремя.ДатаОкончания, ДЕНЬ) КАК ДатаОкончания,
	|	ГрафикиРаботыФизЛиц.Ссылка КАК ПерсональныйГрафик,
	|	ВЫБОР 
	|		КОГДА РаботникиОрганизации.ДатаНачала ЕСТЬ NULL 
	|			ТОГДА ""согласно кадровым данным сотрудник не работает"" 
	|		ИНАЧЕ """" 
	|	КОНЕЦ КАК КонфликтноеНазначение,
	|	ВЫБОР 
	|		КОГДА РаботникиОрганизации.ГрафикРаботы <> РабочееВремя.ГрафикРаботы 
	|			ТОГДА ""согласно кадровым данным сотрудник работает по графику ""+РаботникиОрганизации.ГрафикРаботы.Наименование 
	|		ИНАЧЕ """" 
	|	КОНЕЦ КАК КонфликтныйГрафик,
	|	ВЫБОР 
	|		КОГДА РаботникиОрганизации.ДатаНачала <> РабочееВремя.ДатаНачала 
	|				ИЛИ НАЧАЛОПЕРИОДА(РаботникиОрганизации.ДатаОкончания, ДЕНЬ) <> РабочееВремя.ДатаОкончания 
	|			ТОГДА ""не соответствие периодов кадровых данных и периода составления план-графика"" 
	|		ИНАЧЕ """" 
	|	КОНЕЦ КАК КонфликтныйПериод,
	|	РаботникиОрганизации.ДатаНачала КАК ДатаНачалаНазначения,
	|	РаботникиОрганизации.ДатаОкончания КАК ДатаОкончанияНазначения,
	|	ВЫБОР 
	|		КОГДА ДругойТабель.Ссылка ЕСТЬ NULL 
	|			ТОГДА """" 
	|		ИНАЧЕ ""конфликтный табель"" 
	|	КОНЕЦ КАК КонфликтныйТабель,
	|	ДругойТабель.Ссылка.Дата КАК ДатаДругогоТабеля,
	|	ДругойТабель.Ссылка.Номер КАК НомерДругогоТабеля,
	|	ДругойТабель.ДатаНачала КАК ДатаНачалаДругогоТабеля,
	|	ДругойТабель.ДатаОкончания КАК ДатаОкончанияДругогоТабеля,
	|	ВЫБОР 
	|		КОГДА РабочееВремя2.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА """" 
	|		ИНАЧЕ ""конфликтная строка"" 
	|	КОНЕЦ КАК КонфликтнаяСтрока,
	|	РабочееВремя2.НомерСтроки КАК НомерКонфликтнойСтроки,
	|	РабочееВремя2.ДатаНачала КАК ДатаНачалаКонфликтнойСтроки,
	|	РабочееВремя2.ДатаОкончания КАК ДатаОкончанияКонфликтнойСтроки
	|";
	
	Для Сч = 1 По 31 Цикл
		Запрос.Текст = Запрос.Текст + ", 
		|	" + ?(Сч <= ДнейВМесяце, "РабочееВремя.Часы" + Строка(Сч), "0") + " КАК Часы" + Строка(Сч) + ",
		|	" + ?(Сч <= ДнейВМесяце, "РабочееВремя.ЧасыНочные" + Строка(Сч), "0") + " КАК ЧасыНочные" + Строка(Сч) + ",
		|	" + ?(Сч <= ДнейВМесяце, "ПроизводственныйКалендарь.ПроизводственныйКалендарьПятидневка" + Строка(Сч), "0") + " КАК ПроизводственныйКалендарьПятидневка" + Строка(Сч) + ", 
		|	" + ?(Сч <= ДнейВМесяце, "ПроизводственныйКалендарь.ПроизводственныйКалендарьШестидневка" + Строка(Сч), "0") + " КАК ПроизводственныйКалендарьШестидневка" + Строка(Сч) + ", 
		|	" + ?(Сч <= ДнейВМесяце, "ПроизводственныйКалендарь.ПроизводственныйКалендарьКалендарныеДни" + Строка(Сч), "0") + " КАК ПроизводственныйКалендарьКалендарныеДни" + Строка(Сч) + "
		|";
	КонецЦикла;
	                                                 
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ.ПланГрафикУчетаРабочегоВремени.РабочееВремя КАК РабочееВремя 
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыФизЛиц КАК ГрафикиРаботыФизЛиц
	|		ПО РабочееВремя.Сотрудник = ГрафикиРаботыФизЛиц.Сотрудник 
	|			И РабочееВремя.ГрафикРаботы = ГрафикиРаботыФизЛиц.ГрафикРаботы 
	|			И ГрафикиРаботыФизЛиц.Организация = &парамГоловнаяОрганизация
	// найдем пересекающиеся по периоду назначения/перемещения
	|	ЛЕВОЕ СОЕДИНЕНИЕ 	(ВЫБРАТЬ
	|							РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|							РаботникиОрганизации.ФизЛицо КАК ФизЛицо,
	|							РаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы,
	|							РаботникиОрганизации.Дата КАК ДатаНачала,
	|							МИНИМУМ(ВЫБОР КОГДА РаботникиОрганизации2.Дата ЕСТЬ NULL ТОГДА &парамКонецМесяца ИНАЧЕ ДОБАВИТЬКДАТЕ(РаботникиОрганизации2.Дата, ДЕНЬ, -1) КОНЕЦ) КАК ДатаОкончания
	|						ИЗ (" + ТекстЗапросаРаботники + ") КАК РаботникиОрганизации
	|							ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаРаботники + ") КАК РаботникиОрганизации2
	|								ПО РаботникиОрганизации.Сотрудник = РаботникиОрганизации2.Сотрудник 
	|									И РаботникиОрганизации2.Дата > РаботникиОрганизации.Дата
	|						ГДЕ
	|							РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУволен
	|						СГРУППИРОВАТЬ ПО
	|							РаботникиОрганизации.Сотрудник,
	|							РаботникиОрганизации.ФизЛицо,
	|							РаботникиОрганизации.ГрафикРаботы,
	|							РаботникиОрганизации.Дата) КАК РаботникиОрганизации
	|	ПО РабочееВремя.Сотрудник = РаботникиОрганизации.Сотрудник 
	|		И ((РабочееВремя.ДатаНачала <= РаботникиОрганизации.ДатаОкончания И РабочееВремя.ДатаОкончания >= РаботникиОрганизации.ДатаНачала) ИЛИ (РаботникиОрганизации.ДатаНачала <= РабочееВремя.ДатаОкончания И РаботникиОрганизации.ДатаОкончания >= РабочееВремя.ДатаНачала))
	// найдем пересекающиеся по периоду документы
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланГрафикУчетаРабочегоВремени.РабочееВремя КАК ДругойТабель
	|		ПО РабочееВремя.Сотрудник = ДругойТабель.Сотрудник 
	|			И РабочееВремя.Ссылка <> ДругойТабель.Ссылка
	| 			И ДругойТабель.Ссылка.Проведен 
	|			И ((РабочееВремя.ДатаНачала <= ДругойТабель.ДатаОкончания 
	|					И РабочееВремя.ДатаОкончания >= ДругойТабель.ДатаНачала) 
	|				ИЛИ (ДругойТабель.ДатаНачала <= РабочееВремя.ДатаОкончания 
	|					И ДругойТабель.ДатаОкончания >= РабочееВремя.ДатаНачала))
	// найдем повторяющиеся строки в табличной части текущего документа
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланГрафикУчетаРабочегоВремени.РабочееВремя КАК РабочееВремя2
	|		ПО РабочееВремя2.Ссылка = &парамСсылка 
	|			И РабочееВремя.Сотрудник = РабочееВремя2.Сотрудник 
	|			И РабочееВремя.НомерСтроки < РабочееВремя2.НомерСтроки 
	|			И ((РабочееВремя.ДатаНачала <= РабочееВремя2.ДатаОкончания 
	|					И РабочееВремя.ДатаОкончания >= РабочееВремя2.ДатаНачала) 
	|				ИЛИ (РабочееВремя2.ДатаНачала <= РабочееВремя.ДатаОкончания 
	|					И РабочееВремя2.ДатаОкончания >= РабочееВремя.ДатаНачала))
	// выберем данные регламентированного производственного календаря
	|	ЛЕВОЕ СОЕДИНЕНИЕ 	(ВЫБРАТЬ
	|							НАЧАЛОПЕРИОДА(ПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК ДатаРегистрации
	|";
	
	Для Сч = 1 По 31 Цикл
		Запрос.Текст = Запрос.Текст + ",
		|						СУММА(ВЫБОР КОГДА ДЕНЬ(ДатаКалендаря) = " + Строка(Сч) + " ТОГДА ПроизводственныйКалендарь.Пятидневка ИНАЧЕ 0 КОНЕЦ) КАК ПроизводственныйКалендарьПятидневка" + Строка(Сч) + ", 
		|						СУММА(ВЫБОР КОГДА ДЕНЬ(ДатаКалендаря) = " + Строка(Сч) + " ТОГДА ПроизводственныйКалендарь.Шестидневка ИНАЧЕ 0 КОНЕЦ) КАК ПроизводственныйКалендарьШестидневка" + Строка(Сч) + ", 
		|						СУММА(ВЫБОР КОГДА ДЕНЬ(ДатаКалендаря) = " + Строка(Сч) + " ТОГДА ПроизводственныйКалендарь.КалендарныеДни ИНАЧЕ 0 КОНЕЦ) КАК ПроизводственныйКалендарьКалендарныеДни" + Строка(Сч);
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|						ИЗ
	|							РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|						ГДЕ
	|							НАЧАЛОПЕРИОДА(ПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) = &парамНачалоМесяца
	|
	|						СГРУППИРОВАТЬ ПО
	|
	|							НАЧАЛОПЕРИОДА(ПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ)) КАК ПроизводственныйКалендарь
	|	ПО ИСТИНА
	|							
	|ГДЕ
	|	РабочееВремя.Ссылка = &парамСсылка
	|";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Проверяет правильность полноту заполнения шапки документа
//
// Параметры:
//	ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа
//	Отказ					- флаг отказа от проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация, по которой составляется план-график!", Отказ);
	КонецЕсли;
	
	// Период регистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан период составления план-графика!", Отказ);	
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Рабочее время" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиДокумента(ВыборкаПоСтрокамДокумента, Отказ)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""РабочееВремя"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ);
	КонецЕсли;

	// ГрафикРаботы
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан график работы!", Отказ);
	КонецЕсли;

	// ИспользуетсяСовместноСПланГрафиком
	Если ВыборкаПоСтрокамДокумента.ИспользуетсяСовместноСПланГрафиком <> Истина Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "указанный график работы не предполагает использование совместно с план-графиком!", Отказ);
	КонецЕсли;
	
	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала!", Отказ);
	КонецЕсли;

	// Дата окончания
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания!", Отказ);
	КонецЕсли;
	
	// Конфликтное назначение
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтноеНазначение) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + ВыборкаПоСтрокамДокумента.КонфликтноеНазначение, Отказ);
	КонецЕсли;
	
	// Конфликтная строка в текущем документе
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "пересекается период составления со строкой № " 
							+ ВыборкаПоСтрокамДокумента.НомерКонфликтнойСтроки + " за "
							+ Формат(ВыборкаПоСтрокамДокумента.ДатаНачалаКонфликтнойСтроки,"ДЛФ=дд") + " " + Формат(ВыборкаПоСтрокамДокумента.ДатаОкончанияКонфликтнойСтроки, "ДЛФ=дд"), Отказ);
	КонецЕсли;

	// Конфликтный табель
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтныйТабель) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "уже проведен по работнику документ ""План-график учета рабочего времени"" № " 
							+ ВыборкаПоСтрокамДокумента.НомерДругогоТабеля + " от " + ВыборкаПоСтрокамДокумента.ДатаДругогоТабеля
							+ " за период " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачалаДругогоТабеля, "ДЛФ=дд") + " - " + Формат(ВыборкаПоСтрокамДокумента.ДатаОкончанияДругогоТабеля, "ДЛФ=дд"), Отказ);
	КонецЕсли;

	// Конфликтный график
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтныйГрафик) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + ВыборкаПоСтрокамДокумента.КонфликтныйГрафик 
							+ " в периоде " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачалаНазначения, "ДЛФ=дд") + " - " + Формат(ВыборкаПоСтрокамДокумента.ДатаОкончанияНазначения, "ДЛФ=дд"), Отказ);
	КонецЕсли;
	
	// Конфликтный период графиков в РаботникиОрганизации и Документ.ПланГрафикУчетаРабочегоВремени.РабочееВремя
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтныйПериод) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + ВыборкаПоСтрокамДокумента.КонфликтныйПериод 
							+ "(по кадровым данным " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачалаНазначения, "ДЛФ=дд") + " - " + Формат(ВыборкаПоСтрокамДокумента.ДатаОкончанияНазначения, "ДЛФ=дд")
							+ ", период составления " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=дд") + " - " + Формат(ВыборкаПоСтрокамДокумента.ДатаОкончания, "ДЛФ=дд") + ")" , Отказ);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиДокумента()

// Добавляет данные по работнику в регистр графиков
Процедура ДобавитьВРегистрГрафиков(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборЗаписей)
	
	// Создадим персональный график при необходимости
	Если ВыборкаПоСтрокамДокумента.ПерсональныйГрафик <> NULL Тогда
		ПерсональныйГрафик = ВыборкаПоСтрокамДокумента.ПерсональныйГрафик;
	Иначе
		// Чтобы дважды не создавать один и тот же персональный график, поищем 
		// ранее созданный на предыдущих шагах проведения
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Сотрудник", ВыборкаПоСтрокамДокумента.Сотрудник);
		СтруктураПоиска.Вставить("Организация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
		СтруктураПоиска.Вставить("ГрафикРаботы", ВыборкаПоСтрокамДокумента.ГрафикРаботы);
		
		МассивНайденныхСтрок = Новый Массив();
		МассивНайденныхСтрок = мТаблицаПерсональныеГрафики.НайтиСтроки(СтруктураПоиска);
		Если (МассивНайденныхСтрок.Количество() > 0) Тогда
			ПерсональныйГрафик = МассивНайденныхСтрок[0].ПерсональныйГрафикРаботы;
		Иначе
			// Такого персонального графика еще нет, создадим его
			ПерсональныйГрафик = Справочники.ГрафикиРаботыФизЛиц.СоздатьЭлемент();
			
			ПерсональныйГрафик.Наименование	= ВыборкаПоСтрокамДокумента.ФИОСотрудника + " (" + ВыборкаПоСтрокамДокумента.НазваниеГрафикаРаботы + ")";
			ПерсональныйГрафик.Сотрудник	= ВыборкаПоСтрокамДокумента.Сотрудник;
			ПерсональныйГрафик.Организация 	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			ПерсональныйГрафик.ГрафикРаботы	= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
			ПерсональныйГрафик.Записать();
			
			// Запомним ссылку на созданный график
			СтрокаТЗ = мТаблицаПерсональныеГрафики.Добавить();
			СтрокаТЗ.Сотрудник 		= ВыборкаПоСтрокамДокумента.Сотрудник;
			СтрокаТЗ.Организация 	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			СтрокаТЗ.ГрафикРаботы	= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
			СтрокаТЗ.ПерсональныйГрафикРаботы = ПерсональныйГрафик.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	НаборЗаписей.Отбор.Сбросить();
	
	НаборЗаписей.Отбор.ГрафикРаботы.Значение = ПерсональныйГрафик.Ссылка;
	НаборЗаписей.Отбор.ГрафикРаботы.Использование = Истина;
	
	ДнейВМесяце = ВыборкаПоШапкеДокумента.ДнейВМесяце;
	
	Если День(ВыборкаПоСтрокамДокумента.ДатаНачала) = 1
			И День(ВыборкаПоСтрокамДокумента.ДатаОкончания) = ДнейВМесяце Тогда
		ОтборПоМесяцу = Истина;
		НаборЗаписей.Отбор.Месяц.Значение = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		НаборЗаписей.Отбор.Месяц.Использование = Истина;
	Иначе
		ОтборПоМесяцу = Ложь;
	КонецЕсли;
	
	индДата = ВыборкаПоШапкеДокумента.ПериодРегистрации;
	
	Для Сч = 1 По ДнейВМесяце Цикл
		// заносим в регистр только сведения за период действия персонального графика
		Если Сч >= День(ВыборкаПоСтрокамДокумента.ДатаНачала) И Сч <= День(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда

			Если Не ОтборПоМесяцу Тогда
				// если не в целом по месяцу, тогда записываем по каждой дате в отдельности
				НаборЗаписей.Отбор.Дата.ВидСравнения = ВидСравнения.Равно;
				НаборЗаписей.Отбор.Дата.Значение = индДата;			
				НаборЗаписей.Отбор.Дата.Использование = Истина;
			КонецЕсли;

			ВсегоЧасов = ВыборкаПоСтрокамДокумента["Часы" + Сч];
			
			ЗаписьПоВУВ = НаборЗаписей.Добавить();
			ЗаписьПоВУВ.ГрафикРаботы 			= ПерсональныйГрафик.Ссылка;
			ЗаписьПоВУВ.ВидУчетаВремени 		= Перечисления.ВидыУчетаВремени.ПоДням;
			ЗаписьПоВУВ.Дата 					= индДата;
			ЗаписьПоВУВ.ОсновноеЗначение 		= ?(ВсегоЧасов > 0, 1, 0);
			ЗаписьПоВУВ.ДополнительноеЗначение 	= ВсегоЧасов;
			ЗаписьПоВУВ.ПроизводственныйКалендарьПятидневка     = ВыборкаПоСтрокамДокумента["ПроизводственныйКалендарьПятидневка"+Сч];
			ЗаписьПоВУВ.ПроизводственныйКалендарьШестиДневка    = ВыборкаПоСтрокамДокумента["ПроизводственныйКалендарьШестидневка"+Сч];
			ЗаписьПоВУВ.ПроизводственныйКалендарьКалендарныеДни = ВыборкаПоСтрокамДокумента["ПроизводственныйКалендарьКалендарныеДни"+Сч];

			ЗаписьПоВУВ = НаборЗаписей.Добавить();
			ЗаписьПоВУВ.ГрафикРаботы 			= ПерсональныйГрафик.Ссылка;
			ЗаписьПоВУВ.ВидУчетаВремени 		= Перечисления.ВидыУчетаВремени.ПоЧасам;
			ЗаписьПоВУВ.Дата 					= индДата;
			ЗаписьПоВУВ.ОсновноеЗначение 		= ВсегоЧасов;
			ЗаписьПоВУВ.ДополнительноеЗначение 	= ?(ВсегоЧасов > 0, 1, 0);
			ЗаписьПоВУВ.ПроизводственныйКалендарьПятидневка     = ВыборкаПоСтрокамДокумента["ПроизводственныйКалендарьПятидневка"+Сч];
			ЗаписьПоВУВ.ПроизводственныйКалендарьШестиДневка    = ВыборкаПоСтрокамДокумента["ПроизводственныйКалендарьШестидневка"+Сч];
			ЗаписьПоВУВ.ПроизводственныйКалендарьКалендарныеДни = ВыборкаПоСтрокамДокумента["ПроизводственныйКалендарьКалендарныеДни"+Сч];

			// ПроизводственныйКалендарьПятидневка 
			// ПроизводственныйКалендарьШестиДневка
			// ПроизводственныйКалендарьКалендарныеДни
			// ДополнительноеЗначение
			// не записываются для ПоЧасам

			Если ВыборкаПоСтрокамДокумента["ЧасыНочные" + Сч] <> 0 Тогда
				ЗаписьПоВУВ = НаборЗаписей.Добавить();
				ЗаписьПоВУВ.ГрафикРаботы 			= ПерсональныйГрафик.Ссылка;
				ЗаписьПоВУВ.ВидУчетаВремени 		= Перечисления.ВидыУчетаВремени.ПоНочнымЧасам;
				ЗаписьПоВУВ.Дата 					= индДата;
				ЗаписьПоВУВ.ОсновноеЗначение 		= ВыборкаПоСтрокамДокумента["ЧасыНочные" + Сч];
			КонецЕсли;

			Если Не ОтборПоМесяцу Тогда
				НаборЗаписей.Записать(Истина);
				НаборЗаписей.Очистить();
			КонецЕсли;
        КонецЕсли;
        
		индДата = индДата + мДлинаСуток;
	КонецЦикла;

	Если ОтборПоМесяцу Тогда
		НаборЗаписей.Записать(Истина);
		НаборЗаписей.Очистить();
	КонецЕсли;

КонецПроцедуры // ДобавитьВРегистрГрафиков()

// Процедура выполняет отмену проведения документа по регистру Графики работы по видам времени
//
Процедура ВыполнитьОтменуПроведения()
	// При отмене проведения удаляем из регистра сведений "Графики работы по 
	// видам времени" персональные данные об отработанном времени
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ПерсональныйГрафикРаботы,
	|	РабочееВремя.ДатаНачала КАК ДатаНачала,
	|	РабочееВремя.ДатаОкончания КАК ДатаОкончания,
	|	ГрафикиРаботыПоВидамВремени.Дата КАК Дата
	|ИЗ
	|	Документ.ПланГрафикУчетаРабочегоВремени.РабочееВремя КАК РабочееВремя
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыФизЛиц КАК ГрафикиРаботыФизЛиц
	|		ПО РабочееВремя.Сотрудник = ГрафикиРаботыФизЛиц.Сотрудник 
	|			И РабочееВремя.ГрафикРаботы = ГрафикиРаботыФизЛиц.ГрафикРаботы 
	|			И ГрафикиРаботыФизЛиц.Организация = &парамГоловнаяОрганизация
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ РабочееВремя.ДатаНачала И РабочееВремя.ДатаОкончания 
	|			И ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ГрафикиРаботыФизЛиц.Ссылка
	|ГДЕ
	|	РабочееВремя.Ссылка = &парамСсылка	
	|ИТОГИ
	|	МИНИМУМ(ДатаНачала),
	|	МАКСИМУМ(ДатаОкончания)
	|ПО
	|	ПерсональныйГрафикРаботы
	|";
	
	Запрос.УстановитьПараметр("парамСсылка", Ссылка);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	
	ВыборкаПоГрафикам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	НаборЗаписей = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
	
	Пока ВыборкаПоГрафикам.Следующий() Цикл
		
		Если ВыборкаПоГрафикам.ПерсональныйГрафикРаботы <> NULL Тогда
		
			НаборЗаписей.Отбор.Сбросить();
			НаборЗаписей.Отбор.ГрафикРаботы.Значение	 	= ВыборкаПоГрафикам.ПерсональныйГрафикРаботы;
			НаборЗаписей.Отбор.ГрафикРаботы.Использование 	= Истина;
			
			Если День(ВыборкаПоГрафикам.ДатаНачала) = 1 
					И КонецДня(ВыборкаПоГрафикам.ДатаОкончания) = КонецМесяца(ВыборкаПоГрафикам.ДатаОкончания) Тогда
				
				// удаляем в целом за месяц
					
				НаборЗаписей.Отбор.Месяц.Значение			= НачалоМесяца(ВыборкаПоГрафикам.ДатаНачала);
				НаборЗаписей.Отбор.Месяц.Использование 		= Истина;
			
				НаборЗаписей.Записать(Истина);
			
			Иначе // надо удалять по дням
			
				ВыборкаПоДням = ВыборкаПоГрафикам.Выбрать();
				Пока ВыборкаПоДням.Следующий() Цикл
					
					НаборЗаписей.Отбор.Дата.Значение 				= ВыборкаПоДням.Дата;
					НаборЗаписей.Отбор.Дата.Использование 			= Истина;

					НаборЗаписей.Записать(Истина);
				КонецЦикла;
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой "График работы".
//
// Возвращаемое значение:
//   Табличный документ - печатная форма
//
Функция ПечатьГрафикРаботы()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПланГрафикУчетаРабочегоВремени_ГрафикРаботы";
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	
	Макет = ПолучитьМакет("График");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаСтраницы = Макет.ПолучитьОбласть("ШапкаСтраницы");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	Выборка = СформироватьЗапросДляПечати().Выбрать();
	Если Выборка.Следующий() Тогда
		// шапка отчета
		ОбластьШапка.Параметры.Заполнить(Выборка);
		ОбластьШапка.Параметры.ДатаДок = Формат(Выборка.ДатаДок, "ДФ=дд.ММ.гггг");
		ОбластьШапка.Параметры.ПериодРегистрации = Формат(Выборка.ПериодРегистрации,"ДФ=""ММММ гггг""");
		ОбластьПодвал.Параметры.Заполнить(Выборка);
		ТабДокумент.Вывести(ОбластьШапка);
		
		// Выделим субботы, воскресения и праздничные дни
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря,
		|	ПроизводственныйКалендарь.КалендарныеДни КАК КалендарныеДни
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарь
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) = &парамНачалоМесяца И
		|	ПроизводственныйКалендарь.ВидДня <> &парамРабочийДень
		|";
		
		Запрос.УстановитьПараметр("парамНачалоМесяца", Выборка.ПериодРегистрации);
		Запрос.УстановитьПараметр("парамРабочийДень", Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	
		ТаблицаПраздников = Запрос.Выполнить().Выгрузить();
		ДнейВМесяце = День(КонецМесяца(Выборка.ПериодРегистрации));
		индДата = Выборка.ПериодРегистрации;
		Для Сч = 1 По 31 Цикл
			Если Сч <= ДнейВМесяце Тогда
				СтрокаТЗ = ТаблицаПраздников.Найти(индДата, "ДатаКалендаря");
				Если СтрокаТЗ <> Неопределено Тогда
					ОбластьШапкаСтраницы.Область("День" + Строка(Сч)).ЦветФона = ?(СтрокаТЗ.КалендарныеДни = 0, ЦветаСтиля.ФонГруппировкиВерхнегоУровня, ЦветаСтиля.ФонГруппировкиПромежуточногоУровня);
				КонецЕсли;
			Иначе
				// Такого дня в месяце нет
				ОбластьШапкаСтраницы.Область("День" + Строка(Сч)).Текст = "";
			КонецЕсли;
			индДата = индДата + мДлинаСуток;
		КонецЦикла;
		
		// Вывод содержимого графика
		ОбластьШапкаСтраницы.Параметры.НомерСтраницы = 1;
		ТабДокумент.Вывести(ОбластьШапкаСтраницы);
		
		Выборка.Сбросить();
		НомерСтраницы 	= 1;
		НомерСтроки 	= 0;
		Пока Выборка.Следующий() Цикл
			НомерСтроки = НомерСтроки + 1;
			ОбластьСтрока.Параметры.Заполнить(Выборка);
			ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
			
			Если Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьСтрока) Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				НомерСтраницы = НомерСтраницы + 1;
				ОбластьШапкаСтраницы.Параметры.НомерСтраницы = НомерСтраницы;
				ТабДокумент.Вывести(ОбластьШапкаСтраницы);
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьСтрока);
		КонецЦикла;
		
		ТабДокумент.Вывести(ОбластьПодвал);
		ТабДокумент.ФиксацияСлева = 4;
		ТабДокумент.ФиксацияСверху = 12;
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьГрафикРаботы()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура Автозаполнение(ПостроительЗапроса = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ПодразделениеОрганизации.Пустая() Тогда
		УчитыватьПодразделение 	= Ложь;
		УсловиеПодразделение 	= "ПодразделениеОрганизации.Владелец = &парамОрганизация";
	Иначе
		УчитыватьПодразделение 	= Истина;	
		УсловиеПодразделение = "ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделение)";
	КонецЕсли;
	
	Если ПостроительЗапроса = Неопределено Тогда
		
		// Установим параметры запроса
		Запрос.УстановитьПараметр("парамНачалоМесяца", НачалоМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("парамКонецМесяца", КонецМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("парамОрганизация", Организация);
		Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		Запрос.УстановитьПараметр("парамПодразделение", ПодразделениеОрганизации);
		Запрос.УстановитьПараметр("парамСменный", Перечисления.ВидыРабочихГрафиков.Сменный);
		Запрос.УстановитьПараметр("парамПоЧасам", Перечисления.ВидыУчетаВремени.ПоЧасам);
		Запрос.УстановитьПараметр("парамПоНочнымЧасам", Перечисления.ВидыУчетаВремени.ПоНочнымЧасам);
		Запрос.УстановитьПараметр("парамУволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
		
		// все работники, у которых сменный с суммированным учетом времени график работы
		ТекстЗапросаРаботники = "
		|ВЫБРАТЬ
		|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
		|	РаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы,
		|	РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	&парамНачалоМесяца КАК Дата,
		|	РаботникиОрганизации.ПричинаИзмененияСостояния
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамНачалоМесяца, Организация = &парамГоловнаяОрганизация) КАК РаботникиОрганизации
		|ГДЕ
		|	РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУволен И
		|	РаботникиОрганизации.ПодразделениеОрганизации.Владелец = &парамОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|	РаботникиОрганизации.Сотрудник КАК Сотрудник,	
		|	РаботникиОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
		|	РаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы,
		|	РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,	
		|	РаботникиОрганизации.Период КАК Дата,
		|	РаботникиОрганизации.ПричинаИзмененияСостояния
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|ГДЕ
		|	РаботникиОрганизации.Период > &парамНачалоМесяца И 
		|	РаботникиОрганизации.Период <= &парамКонецМесяца И
		|	РаботникиОрганизации.ПодразделениеОрганизации.Владелец = &парамОрганизация
		|";
		
	Иначе
		
		// Установим параметры запроса
		ПостроительЗапроса.Параметры.Вставить("парамНачалоМесяца", НачалоМесяца(ПериодРегистрации));
		ПостроительЗапроса.Параметры.Вставить("парамКонецМесяца", КонецМесяца(ПериодРегистрации));
		ПостроительЗапроса.Параметры.Вставить("парамОрганизация", Организация);
		ПостроительЗапроса.Параметры.Вставить("парамГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		ПостроительЗапроса.Параметры.Вставить("парамПодразделение", ПодразделениеОрганизации);
		ПостроительЗапроса.Параметры.Вставить("парамСменный", Перечисления.ВидыРабочихГрафиков.Сменный);
		ПостроительЗапроса.Параметры.Вставить("парамПоЧасам", Перечисления.ВидыУчетаВремени.ПоЧасам);
		ПостроительЗапроса.Параметры.Вставить("парамПоНочнымЧасам", Перечисления.ВидыУчетаВремени.ПоНочнымЧасам);
		ПостроительЗапроса.Параметры.Вставить("парамУволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
		
		ИсходныйТекстПостроителя = ПостроительЗапроса.Текст;
		ТекстЗапросаПоСпискуРаботников = СтрЗаменить(ИсходныйТекстПостроителя,"РАЗРЕШЕННЫЕ","");
		ТекстЗапросаПоСпискуРаботников = Лев(ТекстЗапросаПоСпискуРаботников, Найти(ТекстЗапросаПоСпискуРаботников,"УПОРЯДОЧИТЬ") - 1);
		
		// все работники, у которых сменный с суммированным учетом времени график работы
		ТекстЗапросаРаботники = "
		|ВЫБРАТЬ
		|	СписокРаботников.Сотрудник КАК Сотрудник,
		|	СписокРаботников.Сотрудник.ФизЛицо КАК ФизЛицо,
		|	ДвижениеРаботников.ГрафикРаботы КАК ГрафикРаботы,
		|	ДвижениеРаботников.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ДвижениеРаботников.Дата КАК Дата,
		|	ДвижениеРаботников.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния
		|ИЗ
		|	(" + ТекстЗапросаПоСпискуРаботников + ") КАК СписокРаботников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РаботникиОрганизации.Сотрудник КАК Сотрудник,
		|			РаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы,
		|			РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|			&парамНачалоМесяца КАК Дата,
		|			РаботникиОрганизации.ПричинаИзмененияСостояния
		|		ИЗ
		|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамНачалоМесяца, Организация = &парамГоловнаяОрганизация) КАК РаботникиОрганизации
		|		ГДЕ
		|			РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУволен И
		|			РаботникиОрганизации.ПодразделениеОрганизации.Владелец = &парамОрганизация
		|
		|		ОБЪЕДИНИТЬ ВСЕ
		|	
		|		ВЫБРАТЬ
		|			РаботникиОрганизации.Сотрудник КАК Сотрудник,
		|			РаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы,
		|			РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,	
		|			РаботникиОрганизации.Период КАК Дата,
		|			РаботникиОрганизации.ПричинаИзмененияСостояния
		|		ИЗ
		|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|		ГДЕ
		|			РаботникиОрганизации.Период > &парамНачалоМесяца И 
		|			РаботникиОрганизации.Период <= &парамКонецМесяца И
		|			РаботникиОрганизации.ПодразделениеОрганизации.Владелец = &парамОрганизация) КАК ДвижениеРаботников
		|		ПО СписокРаботников.Сотрудник = ДвижениеРаботников.Сотрудник";
	КонецЕсли;
	
	// определим даты перемещения сотрудников за месяц
	ТекстЗапросаРаботники = "
	|ВЫБРАТЬ 
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,	
	|	РаботникиОрганизации.ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы,
	|	РаботникиОрганизации.Дата КАК ДатаНачала,
	|	МИНИМУМ(ВЫБОР КОГДА РаботникиОрганизации2.Дата ЕСТЬ NULL ТОГДА &парамКонецМесяца ИНАЧЕ ДОБАВИТЬКДАТЕ(РаботникиОрганизации2.Дата, ДЕНЬ, -1) КОНЕЦ) КАК ДатаОкончания
	|ИЗ (" + ТекстЗапросаРаботники + ") КАК РаботникиОрганизации 
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаРаботники + ") КАК РаботникиОрганизации2
	|		ПО РаботникиОрганизации.Сотрудник = РаботникиОрганизации2.Сотрудник 
	|			И РаботникиОрганизации2.Дата > РаботникиОрганизации.Дата
	|ГДЕ
	|	РаботникиОрганизации.ГрафикРаботы.ИспользуетсяСовместноСПланГрафиком И
	|	РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУволен
	|"; 
	
	Если УчитыватьПодразделение Тогда
		ТекстЗапросаРаботники = ТекстЗапросаРаботники + " И РаботникиОрганизации.ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделение)";	
	КонецЕсли;
	
	ТекстЗапросаРаботники = ТекстЗапросаРаботники + "
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизации.Сотрудник,	
	|	РаботникиОрганизации.ФизЛицо,
	|	РаботникиОрганизации.ГрафикРаботы,
	|	РаботникиОрганизации.Дата
	|";

	ОсновнойТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланируемыйГрафикРаботы.Сотрудник КАК Сотрудник,
	|	ПланируемыйГрафикРаботы.ФизЛицо КАК ФизЛицо,
	|	ПланируемыйГрафикРаботы.ГрафикРаботы КАК ГрафикРаботы,
	|	ПланируемыйГрафикРаботы.ДатаНачала КАК ДатаНачала,
	|	ПланируемыйГрафикРаботы.ДатаОкончания КАК ДатаОкончания,
	|	СУММА(ПланируемыйГрафикРаботы.Часы) КАК ВсегоЧасов,
	|	СУММА(ПланируемыйГрафикРаботы.ЧасыНочные) КАК ВсегоЧасовНочных,
	|	МАКСИМУМ(БалансРабочегоВремени.НормаЧасов) КАК НормаЧасов
	|";

	Для Сч = 1 По 31 Цикл
		ОсновнойТекстЗапроса = ОсновнойТекстЗапроса + ",
		|	СУММА(ВЫБОР КОГДА ДЕНЬ(ПланируемыйГрафикРаботы.Дата) = " + Строка(Сч) + " ТОГДА ПланируемыйГрафикРаботы.Часы ИНАЧЕ 0 КОНЕЦ) КАК Часы" + Строка(Сч) + ",
		|	СУММА(ВЫБОР КОГДА ДЕНЬ(ПланируемыйГрафикРаботы.Дата) = " + Строка(Сч) + " ТОГДА ПланируемыйГрафикРаботы.ЧасыНочные ИНАЧЕ 0 КОНЕЦ) КАК ЧасыНочные" + Строка(Сч) + "
		|";
	КонецЦикла;
	
	ОсновнойТекстЗапроса = ОсновнойТекстЗапроса + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|		РаботникиОрганизации.ФизЛицо КАК ФизЛицо,
	|		РаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы,
	|		РаботникиОрганизации.ДатаНачала КАК ДатаНачала,
	|		РаботникиОрганизации.ДатаОкончания КАК ДатаОкончания,
	|		ГрафикиРаботы.Дата КАК Дата,
	|		СУММА(ВЫБОР КОГДА ГрафикиРаботы.Дата МЕЖДУ РаботникиОрганизации.ДатаНачала И РаботникиОрганизации.ДатаОкончания ТОГДА ВЫБОР КОГДА ГрафикиРаботы.ВидУчетаВремени = &парамПоЧасам ТОГДА ГрафикиРаботы.ОсновноеЗначение ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ) КАК Часы,
	|		СУММА(ВЫБОР КОГДА ГрафикиРаботы.Дата МЕЖДУ РаботникиОрганизации.ДатаНачала И РаботникиОрганизации.ДатаОкончания ТОГДА ВЫБОР КОГДА ГрафикиРаботы.ВидУчетаВремени = &парамПоНочнымЧасам ТОГДА ГрафикиРаботы.ОсновноеЗначение ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ) КАК ЧасыНочные
	|	ИЗ (" + ТекстЗапросаРаботники + ") КАК РаботникиОрганизации 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|		ПО РаботникиОрганизации.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы И ГрафикиРаботы.Дата МЕЖДУ &парамНачалоМесяца И &парамКонецМесяца
	|	СГРУППИРОВАТЬ ПО
	|		РаботникиОрганизации.Сотрудник,
	|		РаботникиОрганизации.ФизЛицо,
	|		РаботникиОрганизации.ГрафикРаботы,
	|		РаботникиОрганизации.ДатаНачала,
	|		РаботникиОрганизации.ДатаОкончания,
	|		ГрафикиРаботы.Дата) КАК ПланируемыйГрафикРаботы
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БалансРабочегоВремени КАК БалансРабочегоВремени
	|	ПО ПланируемыйГрафикРаботы.ГрафикРаботы = БалансРабочегоВремени.ГрафикРаботы И БалансРабочегоВремени.ДатаМесяца = &парамНачалоМесяца
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланируемыйГрафикРаботы.Сотрудник,
	|	ПланируемыйГрафикРаботы.ФизЛицо,
	|	ПланируемыйГрафикРаботы.ГрафикРаботы,
	|	ПланируемыйГрафикРаботы.ДатаНачала,
	|	ПланируемыйГрафикРаботы.ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланируемыйГрафикРаботы.Сотрудник.Наименование,
	|	ПланируемыйГрафикРаботы.ДатаНачала
	|";

	Если ПостроительЗапроса = Неопределено Тогда
		Запрос.Текст = ОсновнойТекстЗапроса;
		ТЗРабочееВремя = Запрос.Выполнить().Выгрузить();
	Иначе 
		//Основной текст запроса
		ПостроительЗапроса.Текст = ОсновнойТекстЗапроса;
		ПостроительЗапроса.Выполнить();
		ТЗРабочееВремя = ПостроительЗапроса.Результат.Выгрузить();
	КонецЕсли;

    РабочееВремя.Загрузить(ТЗРабочееВремя);

КонецПроцедуры //  Автозаполнение

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ГрафикРаботы" тогда
		
		ТабДокумент = ПечатьГрафикРаботы();
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,"График работы "));
		
	КонецЕсли;

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ГрафикРаботы","График работы");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	// Сначала произведем отмену предыдущего проведения
	Если Проведен Тогда
		ВыполнитьОтменуПроведения();
	КонецЕсли;

	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РабочееВремя);

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			НаборЗаписей = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
			
			мТаблицаПерсональныеГрафики.Очистить();
			
			// получим реквизиты табличной части
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоРабочееВремя(ВыборкаПоШапкеДокумента).Выбрать();

			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиДокумента(ВыборкаПоСтрокамДокумента, Отказ);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьВРегистрГрафиков(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборЗаписей);
				КонецЕсли;
			КонецЦикла;

		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ВыполнитьОтменуПроведения();

КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если Проведен Тогда
		Попытка
			НачатьТранзакцию();
		
			ВыполнитьОтменуПроведения();
			
			ЗафиксироватьТранзакцию();			
		Исключение
            ОтменитьТранзакцию();
            ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
        КонецПопытки        
	КонецЕсли;
	
КонецПроцедуры

мДлинаСуток = 86400; // в секундах

// таблица значений для хранения ссылок на созданные при проведении графики
мТаблицаПерсональныеГрафики = Новый ТаблицаЗначений;
мТаблицаПерсональныеГрафики.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
мТаблицаПерсональныеГрафики.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
мТаблицаПерсональныеГрафики.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботы"));
мТаблицаПерсональныеГрафики.Колонки.Добавить("ПерсональныйГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыФизЛиц"));
