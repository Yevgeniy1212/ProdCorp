////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриСозданииНаСервере(ЭтотОбъект);
	
	ПодготовитьФормуНаСервере();
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если Объект.Ссылка.Пустая() Тогда
		Если СтруктураЗаполнения<>"" Тогда
			мПараметры = ПолучитьСтруктуруЗаполнения(СтруктураЗаполнения);
			Оповещение = Новый ОписаниеОповещения("ЗакрытаФормаВыбораНоменклатур", ЭтаФорма);
			ОткрытьФорму("Документ.дог_РегистрацияДоговоров.Форма.ФормаВыбораНоменклатур", мПараметры, ЭтаФорма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;		
	КонецЕсли;
	
	ЭтаФорма.Элементы.ГрафикПлатежей.Видимость = Ложь;
	ЭтаФорма.Элементы.Товары.Видимость = Ложь;
	ЭтаФорма.Элементы.Услуги.Видимость = Ложь;
	ЭтаФорма.Элементы.ОС.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриЧтенииНаСервере(ЭтотОбъект,ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.дог_ГрафикиОплатыПоДоговорам") Тогда
		ДобавитьВГрафикСтрокиИзВыбранногоГрафика(ВыбранноеЗначение);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ОбщегоНазначенияКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ДоговорКонтрагента)
		И (ТекущийОбъект.ВидОперации = Перечисления.дог_ВидыОперацийДоговор.Договор ИЛИ ТекущийОбъект.ВариантРегистрацииДополнительногоСоглашения<>Перечисления.дог_ВариантыРегистрацииДополнительныхСоглашений.КорректировкаСуществующегоДоговораКонтрагента) Тогда
		ТекущийОбъект.ДоговорКонтрагента = "№ "+ТекущийОбъект.ВходящийНомер+" от "+Формат(ТекущийОбъект.ДатаДоговора,"ДФ=dd.MM.yyyy; ДП='Пустая дата'"); //+++ Oleg SmartT. 2021-03-09	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = ТекущийВидОперации;
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ТекущийВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.дог_ВидыОперацийДоговор.Договор") Тогда
		Объект.ПервоначальныйДоговор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");	
	КонецЕсли;	
	
	ВидОперацииПриИзмененииНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = общ_РаботаСоСтруктурнымиПодразделениями.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
		
	ПроверкаПринадлежностиДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбран контрагент!'"));
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	Иначе
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана организация!'"));
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Объект.ДоговорКонтрагента)= Тип("СправочникСсылка.ДоговорыКонтрагентов") 
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.дог_ВидыОперацийДоговор.ДополнительноеСоглашение") Тогда
		СтандартнаяОбработка = Ложь;

		СтруктураОтбор = Новый Структура("Организация,Владелец",Объект.Организация,Объект.Контрагент);
		Если 	Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.дог_ВидыОперацийДоговор.ДополнительноеСоглашение") 
				И Объект.ВариантРегистрацииДополнительногоСоглашения = ПредопределенноеЗначение("Перечисление.дог_ВариантыРегистрацииДополнительныхСоглашений.КорректировкаСуществующегоДоговораКонтрагента") Тогда
			СписокДоговоров = ПолучитьЗаключенныеДоговора(Объект.Организация, Объект.СтруктурноеПодразделение, Объект.Контрагент, Объект.Дата);
			СтруктураОтбор.Вставить("Ссылка", СписокДоговоров);	
		КонецЕсли;	
		
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбор), Элемент);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособКорректировкиТоварнойСпецификацииДоговораПриИзменении(Элемент)
	РассчетОбщейСуммыТоварногоДоговора();	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.дог_ВидыОперацийДоговор.Договор") Тогда
		Объект.ДоговорКонтрагента=Неопределено;
	Иначе
		Объект.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиныйСрокПоставкиПоЗаказуПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПоДоговоруПриИзменении(Элемент)
	
	ОпределениеУчетаПоПроектам();
	УправлениеФормой(ЭтаФорма);
	Объект.ВидОбязательства = ПредопределенноеЗначение("Перечисление.дог_ВидыОбязательствПоДоговору.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОплатыПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	Если Объект.ВидОплаты = ПредопределенноеЗначение("Перечисление.дог_ВидыОплатыПоДоговору.Разовая") Тогда
		Объект.График = ПредопределенноеЗначение("Справочник.дог_ГрафикиОплатыПоДоговорам.ПустаяСсылка");
		Объект.ПериодичностьОплаты = ПредопределенноеЗначение("Перечисление.фин_Периодичность.ПустаяСсылка");
		Объект.ДеньОплаты = 1;
		Объект.ПравилоРасчетаПлатежей = ПредопределенноеЗначение("Справочник.дог_ПроизвольныеПравилаРасчетаПлатежей.ПустаяСсылка");
	ИначеЕсли Объект.ВидОплаты = ПредопределенноеЗначение("Перечисление.дог_ВидыОплатыПоДоговору.Регулярная") Тогда
		Объект.График = ПредопределенноеЗначение("Справочник.дог_ГрафикиОплатыПоДоговорам.ПустаяСсылка");
		Объект.ПериодичностьОплаты = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Месяц");
		ПериодичностьОплатыПриИзменении(Неопределено);
		Объект.ДатаОплаты = Дата('00010101');
		Объект.ПравилоРасчетаПлатежей = ПредопределенноеЗначение("Справочник.дог_ПроизвольныеПравилаРасчетаПлатежей.ПустаяСсылка");
	ИначеЕсли Объект.ВидОплаты = ПредопределенноеЗначение("Перечисление.дог_ВидыОплатыПоДоговору.ПоГрафику")
		ИЛИ Объект.ВидОплаты = ПредопределенноеЗначение("Перечисление.дог_ВидыОплатыПоДоговору.ПоИндивидуальномуГрафику")
		ИЛИ Объект.ВидОплаты = ПредопределенноеЗначение("Перечисление.дог_ВидыОплатыПоДоговору.ПоСуммеЗадолженности") Тогда
		Объект.ДеньОплаты = 1;
		Объект.МинимальнаяСуммаПлатежа = 0;
		Объект.СуммаПлатежа = 0;
		Объект.ПроцентОтСуммы = 0;
		Объект.ПериодичностьОплаты = ПредопределенноеЗначение("Перечисление.фин_Периодичность.ПустаяСсылка");
		Объект.ДатаОплаты = Дата('00010101');
		Объект.ПравилоРасчетаПлатежей = ПредопределенноеЗначение("Справочник.дог_ПроизвольныеПравилаРасчетаПлатежей.ПустаяСсылка");
	КонецЕсли;
	Если Объект.ВидОплаты = ПредопределенноеЗначение("Перечисление.дог_ВидыОплатыПоДоговору.ПоИндивидуальномуГрафику") Тогда
		Объект.График = ПредопределенноеЗначение("Справочник.дог_ГрафикиОплатыПоДоговорам.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДоговораПоТоварнымОперациямПриИзменении(Элемент)
	
	ОпределениеУчетаПоПроектам();
	УправлениеФормой(ЭтаФорма);
	ОбработатьСоставОСНМА();
	ТипЗаказа = ?(Объект.ВидДоговораПоТоварнымОперациям = ПредопределенноеЗначение("Перечисление.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорРеализации"),Новый ОписаниеТипов("ДокументСсылка.узп_ЗаказПокупателя"),Новый ОписаниеТипов("ДокументСсылка.узп_ЗаказПоставщику"));
	ДоговорРеализации = Объект.ВидДоговораПоТоварнымОперациям = ПредопределенноеЗначение("Перечисление.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорРеализации");
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить("Товары");
	МассивТЧ.Добавить("Услуги");
	МассивТЧ.Добавить("ОС");
	Для Каждого ТЧ Из МассивТЧ Цикл
		Для Каждого СтрокаТЧ Из Объект[ТЧ] Цикл
			СтрокаТЧ.Заказ = ТипЗаказа.ПривестиЗначение(СтрокаТЧ.Заказ);
			Если ДоговорРеализации Тогда
				СтрокаТЧ.ЗаявкаМТС = ПредопределенноеЗначение("Документ.узп_ЗаявкаМТС.ПустаяСсылка");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.дог_ВидыОперацийДоговор.Договор") Тогда
		Объект.ДоговорКонтрагента = "";
		Объект.ПервоначальныйДоговор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	Иначе
		Объект.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		Объект.ПервоначальныйДоговор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	КонецЕсли;
	СписокДокументов.Параметры.УстановитьЗначениеПараметра("ДоговорКонтрагента",Объект.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПоДоговоруОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.ВидОперацииПоДоговору<>ВыбранноеЗначение И ЗначениеЗаполнено(Объект.ВидОперацииПоДоговору) Тогда
		Если Объект.Товары.Количество()>0 ИЛИ Объект.Услуги.Количество()>0 ИЛИ Объект.ОС.Количество()>0 Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ПараметрыВопроса = Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение);
			ОповещениеВопроса = Новый ОписаниеОповещения("ПослеЗакрытияВопросаВидОперацииПоДоговоруОбработкаВыбора", ЭтаФорма, ПараметрыВопроса);
			
			ПоказатьВопрос(ОповещениеВопроса, НСтр("ru = 'Табличные части будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет); 
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 
		СтандартнаяОбработка = Ложь;
		Объект.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		Возврат;
	ИначеЕсли ВыбранноеЗначение = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		Объект.ДоговорКонтрагента = "";
		Возврат;
	КонецЕсли;
		
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.дог_ВидыОперацийДоговор.ДополнительноеСоглашение") Тогда
		
		Если Объект.ВариантРегистрацииДополнительногоСоглашения = ПредопределенноеЗначение("Перечисление.дог_ВариантыРегистрацииДополнительныхСоглашений.КорректировкаСуществующегоДоговораКонтрагента") Тогда

			СтандартнаяОбработка = Ложь;
			
			ПараметрыВопроса = Новый Структура("ВыбранноеЗначение, Режим", ВыбранноеЗначение, "перезаполнить");
			ОповещениеВопроса = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаОбработкаВыбора", ЭтаФорма, ПараметрыВопроса);
			ПоказатьВопрос(ОповещениеВопроса, НСтр("ru = 'Документ будет перезаполнен. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	Иначе
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ЗаполнитьВалютуПоДоговору(ВыбранноеЗначение);
			НовыйТипЦен = ПолучитьЗначениеНаСервере(ВыбранноеЗначение,"ТипЦен");
			Если Не Объект.ТипЦен = НовыйТипЦен Тогда
				ТекстВопроса = "Договор с контрагентом предусматривает параметры взаиморасчетов,
					|отличные от установленных в документе:";
				ТекстВопроса = ТекстВопроса + Символы.ПС +
					"Тип цен документа: """ +
					?(НЕ ЗначениеЗаполнено(Объект.ТипЦен), "Не задан",СокрЛП(Объект.ТипЦен)) +
					""", договора: """ + СокрЛП(НовыйТипЦен) + """.";
                ТекстВопроса = ТекстВопроса + Символы.ПС + "пересчитать документ в соответствии с договором?";
				
				ПараметрыВопроса = Новый Структура("ВыбранноеЗначение, Режим, НовыйТипЦен", ВыбранноеЗначение, "валюта", НовыйТипЦен);
				ОповещениеВопроса = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаОбработкаВыбора", ЭтаФорма, ПараметрыВопроса);
				ПоказатьВопрос(ОповещениеВопроса, НСтр("ru = '" + ТекстВопроса + "'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);				
				
			КонецЕсли;
								
		КонецЕсли;
	КонецЕсли;
    СписокДокументов.Параметры.УстановитьЗначениеПараметра("ДоговорКонтрагента", ВыбранноеЗначение);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	СписокДокументов.Параметры.УстановитьЗначениеПараметра("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДоговораПоТоварнымОперациямОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если 	ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорПоставки") 
			И Объект.ВидДоговораПоТоварнымОперациям<>ВыбранноеЗначение И ЗначениеЗаполнено(Объект.ВидДоговораПоТоварнымОперациям) Тогда
		Если Объект.ОС.Количество()>0 Тогда
			СтандартнаяОбработка = Ложь;		
			
			ОповещениеВопроса = Новый ОписаниеОповещения("ПослеЗакрытияВопросаВидДоговораПоТоварнымОперациямОбработкаВыбора", ЭтаФорма, ВыбранноеЗначение);
			ПоказатьВопрос(ОповещениеВопроса, НСтр("ru = 'Табличная часть ОС будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);			

		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Объект.ДатаНачалаОплаты = Период.ДатаНачала;
	Объект.ДатаОкончанияОплаты = Период.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаСуммыПлатежаПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СтавкаПениПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьОплатыПриИзменении(Элемент)
	
	СписокПериодичности = фин_УправлениеБюджетированием.ПолучитьСписокВариантовПериодаСМеньшейПериодичностью(Объект.ПериодичностьОплаты);
	Если ЗначениеЗаполнено(Объект.ПериодичностьОплаты) 
		И Объект.ПериодичностьОплаты<>ПредопределенноеЗначение("Перечисление.фин_Периодичность.Декада") 
		И Объект.ПериодичностьОплаты<>ПредопределенноеЗначение("Перечисление.фин_Периодичность.Неделя")
		И Объект.ПериодичностьОплаты<>ПредопределенноеЗначение("Перечисление.фин_Периодичность.День") Тогда
		СписокПериодичности.Удалить(СписокПериодичности.НайтиПоЗначению(Объект.ПериодичностьОплаты));
	КонецЕсли;
	Элементы.ПериодичностьСмещения.СписокВыбора.ЗагрузитьЗначения(СписокПериодичности.ВыгрузитьЗначения());
	Если СписокПериодичности.НайтиПоЗначению(Объект.ПериодичностьСмещения)=Неопределено Тогда
		Объект.ПериодичностьСмещения = ПредопределенноеЗначение("Перечисление.фин_Периодичность.День");
	КонецЕсли;
	
	Если Объект.ПериодичностьОплаты = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Неделя")
		ИЛИ Объект.ПериодичностьОплаты = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Декада") Тогда
		Объект.СмещениеВПериодах = 1;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьСмещенияПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СпособНачисленияПениПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВидОбязательстваПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаСуммыПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Элемент.СписокВыбора.Очистить();
	СтандартнаяОбработка=Ложь;
	Список = Новый Массив;
	Список.Добавить(ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ФиксированнойСуммой"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ЗадолженностьНаДатуПлатежа"));
	Если РасчетПлатежаПлановойСуммой Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ПлановаяСумма"));
	КонецЕсли;
	Если Объект.ВидОплаты = ПредопределенноеЗначение("Перечисление.дог_ВидыОплатыПоДоговору.Регулярная") Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ПоЗадолженностиНаНачалоПериода"));
	КонецЕсли;
	//ДанныеВыбора = Список;
	Элементы.СпособРасчетаСуммыПлатежа.СписокВыбора.ЗагрузитьЗначения(Список);	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальныйДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбран контрагент!'"));
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	Иначе
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана организация!'"));
		Возврат;
	КонецЕсли;

	СтруктураОтбор = Новый Структура("Организация,Владелец",Объект.Организация,Объект.Контрагент);
	СписокДоговоров = ПолучитьЗаключенныеДоговора(Объект.Организация,Объект.СтруктурноеПодразделение,Объект.Контрагент,Объект.Дата);
	СтруктураОтбор.Вставить("Ссылка",СписокДоговоров);	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора",Новый Структура("Отбор",СтруктураОтбор),Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРегистрацииДополнительногоСоглашенияПриИзменении(Элемент)
	Если Объект.ВариантРегистрацииДополнительногоСоглашения<>ПредопределенноеЗначение("Перечисление.дог_ВариантыРегистрацииДополнительныхСоглашений.КорректировкаСуществующегоДоговораКонтрагента") И Объект.ПервоначальныйДоговор=ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка") Тогда
		Объект.ПервоначальныйДоговор 	= Объект.ДоговорКонтрагента;	
		Объект.ДоговорКонтрагента 		= ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");	
	КонецЕсли;
    УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВидДоговораПоТоварнымОперациямНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьДоступныеВидДоговораПоТоварнымОперациям(Объект.ДоговорКонтрагента);
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальныйДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 
		СтандартнаяОбработка = Ложь;
		Объект.ПервоначальныйДоговор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		Возврат;
	ИначеЕсли ВыбранноеЗначение = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		Объект.ПервоначальныйДоговор = "";
		Возврат;
	КонецЕсли;
		
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.дог_ВидыОперацийДоговор.ДополнительноеСоглашение") Тогда		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыВопроса = Новый Структура("ВыбранноеЗначение, Режим", ВыбранноеЗначение, "перезаполнить");
		ОповещениеВопроса = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПервоначальныйДоговорОбработкаВыбора", ЭтаФорма, ПараметрыВопроса);
		ПоказатьВопрос(ОповещениеВопроса, НСтр("ru = 'Документ будет перезаполнен. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ЗаполнитьВалютуПоДоговору(ВыбранноеЗначение);
			НовыйТипЦен = ПолучитьЗначениеНаСервере(ВыбранноеЗначение,"ТипЦен");
			Если Не Объект.ТипЦен = НовыйТипЦен Тогда
				ТекстВопроса = "Договор с контрагентом предусматривает параметры взаиморасчетов,
					|отличные от установленных в документе:";
				ТекстВопроса = ТекстВопроса + Символы.ПС +
					"Тип цен документа: """ +
					?(НЕ ЗначениеЗаполнено(Объект.ТипЦен), "Не задан",СокрЛП(Объект.ТипЦен)) +
					""", договора: """ + СокрЛП(НовыйТипЦен) + """.";
                ТекстВопроса = ТекстВопроса + Символы.ПС + "пересчитать документ в соответствии с договором?";
				
				ПараметрыВопроса = Новый Структура("ВыбранноеЗначение, Режим, НовыйТипЦен", ВыбранноеЗначение, "валюта", НовыйТипЦен);
				ОповещениеВопроса = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПервоначальныйДоговорОбработкаВыбора", ЭтаФорма, ПараметрыВопроса);
				ПоказатьВопрос(ОповещениеВопроса, НСтр("ru = '" + ТекстВопроса + "'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			КонецЕсли;
								
		КонецЕсли;
	КонецЕсли;
    СписокДокументов.Параметры.УстановитьЗначениеПараметра("ДоговорКонтрагента",ВыбранноеЗначение);
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеСозданиеСобытийДляРасчетовПоГрафикуПриИзменении(Элемент)
	Если НЕ Объект.АвтоматическоеСозданиеСобытийДляРасчетовПоГрафику Тогда
		Объект.ПравилоРасчетаПлатежей = ПредопределенноеЗначение("Справочник.дог_ПроизвольныеПравилаРасчетаПлатежей.ПустаяСсылка");
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьСмещенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокПериодичности = фин_УправлениеБюджетированием.ПолучитьСписокВариантовПериодаСМеньшейПериодичностью(Объект.ПериодичностьОплаты);
	Если ЗначениеЗаполнено(Объект.ПериодичностьОплаты) 
		И Объект.ПериодичностьОплаты<>ПредопределенноеЗначение("Перечисление.фин_Периодичность.Декада") 
		И Объект.ПериодичностьОплаты<>ПредопределенноеЗначение("Перечисление.фин_Периодичность.Неделя")
		И Объект.ПериодичностьОплаты<>ПредопределенноеЗначение("Перечисление.фин_Периодичность.День") Тогда
		СписокПериодичности.Удалить(СписокПериодичности.НайтиПоЗначению(Объект.ПериодичностьОплаты));
	КонецЕсли;
	ДанныеВыбора = СписокПериодичности;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Товары>

&НаКлиенте
Процедура ТоварыПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.Подразделения.ФормаВыбора",,Элемент,УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Товары.ТекущиеДанные);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	узп_УправлениеЗакупкамиКлиент.НоменклатураНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, Ложь, Элементы.Товары.ТекущиеДанные.Номенклатура);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ДатаПоставки, ЕдиницаИзмерения, Коэффициент, Количество,
	| Цена, СтавкаНДС, СуммаНДС, Сумма, ОбъектРемонта, Подразделение, Заказ, ЗаявкаМТС, Проект");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Товары.ТекущиеДанные);
	ТоварыЦенаКоличествоПриИзмененииНаКлиенте(ДанныеСтрокиТаблицы);
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ДатаПоставки, ЕдиницаИзмерения, Коэффициент, Количество,
	| Цена, СтавкаНДС, СуммаНДС, Сумма, ОбъектРемонта, Подразделение, Заказ, ЗаявкаМТС, Проект");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Товары.ТекущиеДанные);	
	ТоварыЦенаКоличествоПриИзмененииНаКлиенте(ДанныеСтрокиТаблицы);
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТоварыСуммаПриИзмененииНаКлиенте(Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТоварыСтавкаНДСПриИзмененииНаКлиенте(Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		РассчетОбщейСуммыТоварногоДоговора();	
//		ОбновлениеОтображения();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	мКоэффициент = Элементы.Товары.ТекущиеДанные.Коэффициент;
	Элементы.Товары.ТекущиеДанные.Коэффициент = ПолучитьКоэффициентПересчета(Элементы.Товары.ТекущиеДанные.ЕдиницаИзмерения,Элементы.Товары.ТекущиеДанные.Номенклатура);
	Если мКоэффициент<>Элементы.Товары.ТекущиеДанные.Коэффициент И Элементы.Товары.ТекущиеДанные.Цена<>0 Тогда
		Если ПересчитыватьЦену Тогда
			Элементы.Товары.ТекущиеДанные.Цена = Элементы.Товары.ТекущиеДанные.Цена / (Элементы.Товары.ТекущиеДанные.Коэффициент/?(мКоэффициент=0,1,мКоэффициент)); 

			ТоварыЦенаКоличествоПриИзмененииНаКлиенте(Элементы.Товары.ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	мКоэффициент = Элементы.Товары.ТекущиеДанные.Коэффициент;
	Если НоваяСтрока И НЕ Копирование Тогда
		УстановитьЗаказ(Элементы.Товары.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоэффициентПриИзменении(Элемент)
	Если мКоэффициент<>Элементы.Товары.ТекущиеДанные.Коэффициент И Элементы.Товары.ТекущиеДанные.Цена<>0 Тогда
		Если ПересчитыватьЦену Тогда
			Элементы.Товары.ТекущиеДанные.Цена = Элементы.Товары.ТекущиеДанные.Цена / (Элементы.Товары.ТекущиеДанные.Коэффициент/?(мКоэффициент=0,1,мКоэффициент)); 

			ТоварыЦенаКоличествоПриИзмененииНаКлиенте(Элементы.Товары.ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	РассчетОбщейСуммыТоварногоДоговора();	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Услуги>

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Услуги.ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, ВидОперации, Дата, Ссылка, ТипЦен, 
									|УчитыватьНДС, СуммаВключаетНДС, ВалютаДокумента,  ДоговорКонтрагента");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	УслугиЦенаКоличествоПриИзмененииНаКлиенте(Элементы.Услуги.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)

	УслугиЦенаКоличествоПриИзмененииНаКлиенте(Элементы.Услуги.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	УслугиСуммаПриИзмененииНаКлиенте(Элементы.Услуги.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	УслугиСтавкаНДСПриИзмененииНаКлиенте(Элементы.Услуги.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		РассчетОбщейСуммыТоварногоДоговора();	
	//	ОбновлениеОтображения();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	РассчетОбщейСуммыТоварногоДоговора();	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		УстановитьЗаказ(Элементы.Услуги.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	узп_УправлениеЗакупкамиКлиент.НоменклатураНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, Истина, Элементы.Услуги.ТекущиеДанные.Номенклатура);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ОС>

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	Если НоваяСтрока И НЕ Копирование Тогда		
		ТекущийПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
		// Заполняем реквизиты табличной части.
		СтрокаТабличнойЧасти.СтавкаНДС = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь , "ОсновнаяСтавкаНДС");
        Элементы.ОС.ТекущиеДанные.Количество = 1;
		УстановитьЗаказ(Элементы.ОС.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	Если ТипЗнч(Элементы.ОС.ТекущиеДанные.Номенклатура) = Тип("СправочникСсылка.фин_ПлановаяНоменклатура") Тогда		
		
		ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, Характеристика");			
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.ОС.ТекущиеДанные);
		
		ДанныеОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, ВидОперации, Дата, Ссылка, ТипЦен, 
										|УчитыватьНДС, СуммаВключаетНДС, ВалютаДокумента,  ДоговорКонтрагента");			
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
			
		ОСНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
		
		ЗаполнитьЗначенияСвойств(Элементы.ОС.ТекущиеДанные, ДанныеСтрокиТаблицы);	
	Иначе
		дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуТабЧасти(Элементы.ОС.ТекущиеДанные);
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОССтавкаНДСПриИзменении(Элемент)

	ДанныеОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, ВидОперации, Дата, Ссылка, ТипЦен, 
									|УчитыватьНДС, СуммаВключаетНДС, ВалютаДокумента,  ДоговорКонтрагента");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуНДСТабЧасти(Элементы.ОС.ТекущиеДанные, ДанныеОбъекта);
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуТабЧасти(Элементы.ОС.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
	
	ДанныеОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, ВидОперации, Дата, Ссылка, ТипЦен, 
									|УчитыватьНДС, СуммаВключаетНДС, ВалютаДокумента,  ДоговорКонтрагента");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	дог_УправлениеДоговорамиКлиентСервер.ПриИзмененииСуммыТабЧасти(Элементы.ОС.ТекущиеДанные);
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуНДСТабЧасти(Элементы.ОС.ТекущиеДанные, ДанныеОбъекта);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НЕ ОтменаРедактирования Тогда
		РассчетОбщейСуммыТоварногоДоговора();	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.ВидДоговораПоТоварнымОперациям=ПредопределенноеЗначение("Перечисление.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорРеализации") Тогда
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(Тип("СправочникСсылка.ОсновныеСредства"));
 		МассивТипов.Добавить(Тип("СправочникСсылка.НематериальныеАктивы"));
   		Элемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	Иначе
    	Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.фин_ПлановаяНоменклатура");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОСКоличествоПриИзменении(Элемент)
		
	ОСЦенаКоличествоПриИзмененииНаКлиенте(Элементы.ОС.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСЦенаПриИзменении(Элемент)
		
	ОСЦенаКоличествоПриИзмененииНаКлиенте(Элементы.ОС.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПослеУдаления(Элемент)
	РассчетОбщейСуммыТоварногоДоговора();	
КонецПроцедуры

&НаКлиенте
Процедура ОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Объект.ВидДоговораПоТоварнымОперациям=ПредопределенноеЗначение("Перечисление.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорРеализации") Тогда
		Элементы.ОС.ТекущиеДанные.Количество = 1;
		Элементы.ОС.ТекущиеДанные.Цена = Элементы.ОС.ТекущиеДанные.Сумма;
	КонецЕсли;
	РассчетОбщейСуммыТоварногоДоговора();	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Дополнительные параметры>

&НаКлиенте
Процедура ДополнительныеПараметрыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	Отказ = ПередДобавлениемДопПараметра();
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вы уже добавили в табличную часть все существующие дополнительные параметры!'"),, "ДополнительныеПараметры", "Объект");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПараметыДополнительныйПараметрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СписокОтбора = НачалоВыбораДополнительногоПараметра();
	ПредыдущееЗначение = Элементы.ДополнительныеПараметры.ТекущиеДанные.ДополнительныйПараметр;
	Если ЗначениеЗаполнено(ПредыдущееЗначение) Тогда
		СписокОтбора.Добавить(ПредыдущееЗначение);
	КонецЕсли;
	
	Если СписокОтбора.Количество() > 0 Тогда
		ОткрытьФорму("ПланВидовХарактеристик.дог_ДополнительныеПараметрыДоговоров.ФормаВыбора",Новый Структура("Отбор",Новый Структура("Ссылка",СписокОтбора)),Элемент);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <График платежей>

&НаКлиенте
Процедура ГрафикПлатежейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элементы.ГрафикПлатежей.ТекущиеДанные;
		ТекущиеДанные.СпособРасчетаСуммыПлатежа = ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ФиксированнойСуммой");
		ТекущиеДанные.ПорядокРасчетаДатыПлатежа = ПредопределенноеЗначение("Перечисление.дог_ПорядкиРасчетаДатыПлатежа.ФиксированнаяДата");
		ТекущиеДанные.ДатаОплаты = '00010101';
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейПорядокРасчетаДатыПлатежаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ГрафикПлатежей.ТекущиеДанные;
	Если ТекущаяСтрока.ПорядокРасчетаДатыПлатежа = ПредопределенноеЗначение("Перечисление.дог_ПорядкиРасчетаДатыПлатежа.ОтДатыСобытияПоДоговору") Тогда
		ТекущаяСтрока.ДатаОплаты = ПредопределенноеЗначение("Справочник.дог_СобытияПоДоговору.ПустаяСсылка");
	ИначеЕсли ТекущаяСтрока.ПорядокРасчетаДатыПлатежа = ПредопределенноеЗначение("Перечисление.дог_ПорядкиРасчетаДатыПлатежа.ФиксированнаяДата") Тогда
		ТекущаяСтрока.ДатаОплаты = Дата('00010101');
		ТекущаяСтрока.Сдвиг = 0;
		Если ТекущаяСтрока.СпособРасчетаСуммыПлатежа = ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.НаОснованииСобытия") Тогда
			ТекущаяСтрока.СпособРасчетаСуммыПлатежа = ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ПоСуммеДоговора");
		КонецЕсли;
	Иначе
		ТекущаяСтрока.ДатаОплаты = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейСпособРасчетаСуммыПлатежаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ГрафикПлатежей.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СпособРасчетаСуммыПлатежа) Тогда
		ТекущиеДанные.МинимальнаяСуммаПлатежа = 0;
		ТекущиеДанные.Сумма = 0;
		ТекущиеДанные.ПроцентОтСуммы = 0;
		ТекущиеДанные.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.ПустаяСсылка");
		ТекущиеДанные.ФинансовыйПоказательСценария = ПредопределенноеЗначение("Справочник.фин_ФинансовыеПоказатели.ПустаяСсылка");
		ТекущиеДанные.ДатаСценария = Дата('00010101');
	ИначеЕсли ТекущиеДанные.СпособРасчетаСуммыПлатежа = ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ФиксированнойСуммой") Тогда
		ТекущиеДанные.МинимальнаяСуммаПлатежа = 0;
		ТекущиеДанные.ПроцентОтСуммы = 0;
		ТекущиеДанные.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.ПустаяСсылка");
		ТекущиеДанные.ФинансовыйПоказательСценария = ПредопределенноеЗначение("Справочник.фин_ФинансовыеПоказатели.ПустаяСсылка");
		ТекущиеДанные.ДатаСценария = Дата('00010101');
	ИначеЕсли ТекущиеДанные.СпособРасчетаСуммыПлатежа = ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ПоСуммеДоговора")
		ИЛИ ТекущиеДанные.СпособРасчетаСуммыПлатежа = ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.НаОснованииСобытия") Тогда
		ТекущиеДанные.Сумма = 0;
		ТекущиеДанные.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.ПустаяСсылка");
		ТекущиеДанные.ФинансовыйПоказательСценария = ПредопределенноеЗначение("Справочник.фин_ФинансовыеПоказатели.ПустаяСсылка");
		ТекущиеДанные.ДатаСценария = Дата('00010101');
   ИначеЕсли ТекущиеДанные.СпособРасчетаСуммыПлатежа = ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ПлановаяСумма") Тогда
		ТекущиеДанные.Сумма = 0;
	Иначе //ПоЗадолженностиНаНачалоПериода,ЗадолженностьНаДатуПлатежа
		ТекущиеДанные.Сумма = 0;
		ТекущиеДанные.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.ПустаяСсылка");
		ТекущиеДанные.ФинансовыйПоказательСценария = ПредопределенноеЗначение("Справочник.фин_ФинансовыеПоказатели.ПустаяСсылка");
		ТекущиеДанные.ДатаСценария = Дата('00010101');
    КонецЕсли;
	
	Если ТекущиеДанные.СпособРасчетаСуммыПлатежа <> ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ПоЗадолженностиНаНачалоПериода") Тогда
		ТекущиеДанные.Периодичность = ПредопределенноеЗначение("Перечисление.фин_Периодичность.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейСценарийПриИзменении(Элемент)
	ПривестиДатуСценарияКНачалу();
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейДатаСценарияПриИзменении(Элемент)
	ПривестиДатуСценарияКНачалу();
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейСпособРасчетаСуммыПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ГрафикПлатежей.ТекущиеДанные;
	Если ТекущиеДанные.ПорядокРасчетаДатыПлатежа = ПредопределенноеЗначение("Перечисление.дог_ПорядкиРасчетаДатыПлатежа.ФиксированнаяДата") Тогда
		//СтандартнаяОбработка = Ложь;
		Элементы.ГрафикПлатежейСпособРасчетаСуммыПлатежа.СписокВыбора.Очистить();
		СписокСпособов = Новый Массив;
		СписокСпособов.Добавить(ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ФиксированнойСуммой"));
		СписокСпособов.Добавить(ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ЗадолженностьНаДатуПлатежа"));
		Если РасчетПлатежаПлановойСуммой Тогда
			СписокСпособов.Добавить(ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ПлановаяСумма"));
		КонецЕсли;
		СписокСпособов.Добавить(ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ПоЗадолженностиНаНачалоПериода"));
		СписокСпособов.Добавить(ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ПоСуммеДоговора"));
		ДанныеВыбора = СписокСпособов;
		//Элементы.ГрафикПлатежейСпособРасчетаСуммыПлатежа.СписокВыбора.ЗагрузитьЗначения(СписокСпособов);
	ИначеЕсли НЕ РасчетПлатежаПлановойСуммой Тогда
		//СтандартнаяОбработка = Ложь;
		Элементы.ГрафикПлатежейСпособРасчетаСуммыПлатежа.СписокВыбора.Очистить();
		СписокСпособов = Новый Массив;
		СписокСпособов.Добавить(ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ФиксированнойСуммой"));
		СписокСпособов.Добавить(ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ЗадолженностьНаДатуПлатежа"));
		СписокСпособов.Добавить(ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.НаОснованииСобытия"));
		СписокСпособов.Добавить(ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ПоЗадолженностиНаНачалоПериода"));
		СписокСпособов.Добавить(ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ПоСуммеДоговора"));
		ДанныеВыбора = СписокСпособов;
		//Элементы.ГрафикПлатежейСпособРасчетаСуммыПлатежа.СписокВыбора.ЗагрузитьЗначения(СписокСпособов);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура ПроизвестиРасчетПлатежей(Команда)
	ВходящееОбязательство = Ложь;
	ПараметрыРасчета = ПолучитьПараметрыРасчета(ВходящееОбязательство);
	ОткрытьФорму("Обработка."+?(ВходящееОбязательство,"ден_ФормированиеПланируемыхПоступленийДенежныхСредств","ден_ФормированиеЗаявокНаРасходованиеСредствПоДоговорам")+".Форма.Форма",ПараметрыРасчета,ЭтаФорма,УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиЗадолженности(Команда)
	ПараметрыРасчета = ПолучитьПараметрыРасчета(Истина);
	ОткрытьФорму("Отчет.дог_ОстаткиЗадолженностиБУПоДоговору.ФормаОбъекта",ПараметрыРасчета,ЭтаФорма,УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура АнализЗадолженности(Команда)
	ПараметрыРасчета = ПолучитьПараметрыРасчета(Истина);
	ОткрытьФорму("Отчет.дог_АнализЗадолженностиБУПоДоговору.ФормаОбъекта",ПараметрыРасчета,ЭтаФорма,УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура АнализЗадолженностиПоПериодам(Команда)
	ПараметрыРасчета = ПолучитьПараметрыРасчета(Истина);
	ОткрытьФорму("Отчет.дог_АнализЗадолженностиБУПоДоговоруВРазрезеПериодов.ФормаОбъекта",ПараметрыРасчета,ЭтаФорма,УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАктуальнойСпецификациейДоговора(Команда)
	ЗаполнитьПоСпецификации();
	РассчетОбщейСуммыТоварногоДоговора();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.ДополнительныеПараметры.Количество() = 0 Тогда
		ПослеЗакртияВопросаЗаполнить(КодВозвратаДиалога.Да, "");
	Иначе
		ОповещениеВопроса = Новый ОписаниеОповещения("ПослеЗакртияВопросаЗаполнить", ЭтаФорма);
		ПоказатьВопрос(ОповещениеВопроса, НСтр("ru = 'Для продолжения работы необходимо очистить табличную часть """"Дополнительные параметры""""
                     							|Вы действительно хотите очистить табличную часть?'"), РежимДиалогаВопрос.ДаНет,,, "Внимание");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустые(Команда)
	МасУд = Новый Массив;
	Для Каждого СтрокаТЧ ИЗ Объект.ДополнительныеПараметры Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗначениеДополнительногоПараметра) Тогда
			МасУд.Добавить(СтрокаТЧ);	
		КонецЕсли;		
	КонецЦикла;
	Для Каждого ЭлМас Из МасУд Цикл
		Объект.ДополнительныеПараметры.Удалить(ЭлМас);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНедостающими(Команда)
	ЗаполнитьНедостающимиНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИмеющимися(Команда)
	ЗаполнитьИмеющимисяНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОбязательными(Команда)
	
	Если Объект.ДополнительныеПараметры.Количество() = 0 Тогда 
		ПослеЗакртияВопросаЗаполнитьОбязательными(КодВозвратаДиалога.Да, "");	
	Иначе 
		ОповещениеВопроса = Новый ОписаниеОповещения("ПослеЗакртияВопросаЗаполнитьОбязательными", ЭтаФорма);		
		ПоказатьВопрос(ОповещениеВопроса, НСтр("ru = 'Для продолжения работы необходимо очистить табличную часть ""Дополнительные параметры""
                                                |Вы действительно хотите очистить табличную часть?'"), РежимДиалогаВопрос.ДаНет,,, "Внимание");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНедостающимиОбязательными(Команда)
	ЗаполнитьНедостающимиОбязательнымиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалюта(Команда)
	ОткрытьФормуЦеныИВалюта(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЦеныИВалюта(ФормаДокумента, СпособЗаполненияЦен = Неопределено, ВызовПриИзмененииДоговора = Ложь, ДополнительныеПараметрыОповещения = Неопределено, ЗНАЧ ПараметрыОткрытия = Неопределено)
	
	Если СпособЗаполненияЦен = Неопределено Тогда
		СпособЗаполненияЦен = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияЦен.ПоЦенамНоменклатуры");
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("ФормаДокумента, СпособЗаполненияЦен, ВызовПриИзмененииДоговора, ДополнительныеПараметры", 
		ФормаДокумента, СпособЗаполненияЦен, ВызовПриИзмененииДоговора, ДополнительныеПараметрыОповещения);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыЦеныИВалюта", 
		ФормаДокумента, ПараметрыОповещения);	
		
	ДанныеДокумента = ДанныеДокументаДляФормыЦеныИВалюта(ФормаДокумента, ПараметрыОткрытия);
	ДополнитьПараметрыОткрытияФормыЦеныИВалюта(ФормаДокумента, ПараметрыОткрытия);
	ПараметрыОткрытия.БезКонтроляВалютыВзаиморасчетов = Истина;
	
	ПараметрыФормы = Новый Структура("ДанныеДокумента, ВызовПриИзмененииДоговора, ПараметрыОткрытия, ТолькоПросмотр", 
		ДанныеДокумента, ВызовПриИзмененииДоговора, ПараметрыОткрытия, ФормаДокумента.ТолькоПросмотр);
	ОткрытьФорму("ОбщаяФорма.дог_ФормаЦеныИВалюта", ПараметрыФормы, , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	
	ФормаДокумента = Параметры.ФормаДокумента;
	
	Если Результат <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ФормаДокумента.Объект, Результат.ЗначенияПриЗакрытии);
		ФормаДокумента.Модифицированность = Истина;
				                                   
		дог_УправлениеДоговорамиКлиент.ИзменитьЦеныВалюту(ФормаДокумента.Объект, Параметры.СпособЗаполненияЦен, Результат,);
		УправлениеФормой(ЭтаФорма);
		
	ИначеЕсли Параметры.ВызовПриИзмененииДоговора Тогда
		
		дог_УправлениеДоговорамиКлиент.ОбработатьОтказОтПересчетаДокументаПоДоговору(ФормаДокумента, Параметры.ДополнительныеПараметры);
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеДокументаДляФормыЦеныИВалюта(ФормаДокумента, ПараметрыОткрытия)
	
	ДанныеДокумента = Новый Структура();
	
	ДанныеДокумента.Вставить("Дата", ФормаДокумента.Объект.Дата);	
	ДанныеДокумента.Вставить("ТипЦен", ФормаДокумента.Объект.ТипЦен);
	ДанныеДокумента.Вставить("ВалютаДокумента", ФормаДокумента.Объект.ВалютаДокумента);	
	
	Если ТипЗнч(ФормаДокумента.Объект.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ДанныеДокумента.Вставить("ДоговорКонтрагента", ФормаДокумента.Объект.ДоговорКонтрагента);
		ЗаполнитьКурсыВалют(ДанныеДокумента);		
	КонецЕсли;

	ДанныеДокумента.Вставить("УчитыватьНДС", ФормаДокумента.Объект.УчитыватьНДС);
	ДанныеДокумента.Вставить("СуммаВключаетНДС", ФормаДокумента.Объект.СуммаВключаетНДС);
	
	Возврат ДанныеДокумента;
	
КонецФункции

&НаКлиенте
Процедура ДополнитьПараметрыОткрытияФормыЦеныИВалюта(ФормаДокумента, ПараметрыОткрытия)
	
	Если ПараметрыОткрытия = Неопределено Тогда 
		ПараметрыОткрытия = Новый Структура;
	КонецЕсли;
	
	Если НЕ ПараметрыОткрытия.Свойство("БезКонтроляВалютыВзаиморасчетов") Тогда
		ПараметрыОткрытия.Вставить("БезКонтроляВалютыВзаиморасчетов", Ложь);
	КонецЕсли;
	
	Если НЕ ПараметрыОткрытия.Свойство("НедоступныеРеквизиты") Тогда
		ПараметрыОткрытия.Вставить("НедоступныеРеквизиты", Новый Структура);
	КонецЕсли;
	
	// попытаемся определить заполненность хотя бы одной табличной части, если не передан соответствующий параметр открытия формы
	Если НЕ ПараметрыОткрытия.Свойство("ЕстьЗаполненныеТабличныеЧасти") Тогда
		МассивИменТабличныхЧастей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
									"Товары,Услуги,ОС,НМА,ВыданныеАвансы,ОплатаПоставщикам,ВыплатаЗаработнойПлаты,ОплатаПоИсполнительнымЛистам,ПеречислениеПенсионныхВзносов,ПеречислениеСоциальныхОтчислений,Прочее,Разделы,Продукция");
									
		// для установки значения "Истина" необходимо найти хотя бы 1 заполненную табличную часть. после чего можно прервать цикл
		ЕстьЗаполненныеТабличныеЧасти = Ложь;
		Для Каждого ИмяТабличнойЧасти Из МассивИменТабличныхЧастей Цикл
			Если ФормаДокумента.Объект.Свойство(ИмяТабличнойЧасти)
				И ФормаДокумента.Объект[ИмяТабличнойЧасти].Количество() > 0 Тогда
				ЕстьЗаполненныеТабличныеЧасти = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьЗаполненныеТабличныеЧасти Тогда 
			ЕстьЗаполненныеТабличныеЧасти = ФормаДокумента.Объект.Свойство("Сумма");
		КонецЕсли;
		
		ПараметрыОткрытия.Вставить("ЕстьЗаполненныеТабличныеЧасти", ЕстьЗаполненныеТабличныеЧасти);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьКурсыВалют(ДанныеДокумента)
	
	ДанныеДокумента.Вставить("КурсВзаиморасчетов", 0);
	ДанныеДокумента.Вставить("КратностьВзаиморасчетов", 0);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &Валюта) КАК КурсыВалютСрезПоследних";
    Запрос.УстановитьПараметр("ДатаДокумента", ДанныеДокумента.Дата); 
	Запрос.УстановитьПараметр("Валюта", ДанныеДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		ДанныеДокумента.КурсВзаиморасчетов = Выборка.Курс;
		ДанныеДокумента.КратностьВзаиморасчетов = Выборка.Кратность;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Доверенность(Команда)
	Если ТипЗнч(Объект.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ОткрытьФорму("Документ.Доверенность.ФормаСписка",Новый Структура("Отбор",Новый Структура("ДоговорКонтрагента",Объект.ДоговорКонтрагента)),ЭтаФорма);
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СФПолученный(Команда)
	Если ТипЗнч(Объект.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ОткрытьФорму("Документ.СчетФактураПолученный.ФормаСписка",Новый Структура("Отбор",Новый Структура("ДоговорКонтрагента",Объект.ДоговорКонтрагента)),ЭтаФорма);
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ППИ(Команда)
	Если ТипЗнч(Объект.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") 
		И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ОткрытьФорму("Документ.ПлатежноеПоручениеИсходящее.ФормаСписка",Новый Структура("Отбор",Новый Структура("Ссылка",ПолучитьСписокППИ(Объект.ДоговорКонтрагента))),ЭтаФорма);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговор(Команда)
	СоздатьДоговорНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзДругогоГрафика(Команда)
	ФормаВыбора = ПолучитьФорму("Справочник.дог_ГрафикиОплатыПоДоговорам.Форма.ФормаВыбора",,ЭтаФорма);
	ФормаВыбора.Открыть();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
				
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
		
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
	ПроверкаПринадлежностиДоговора();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	УправлениеФормой(ЭтаФорма);
			
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента 			= Объект.Дата;
	ТекущийВидОперации   			= Объект.ВидОперации;
	ВалютаРегламентированногоУчета 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
	
	Если НЕ Элементы.Найти("ФормаСоздатьНаОсновании") = Неопределено Тогда
		Элементы.Переместить(Элементы.СоздатьНаОсновании, Элементы["ФормаСоздатьНаОсновании"]);
	КонецЕсли;		
	
	НеИзменять = Ложь;	
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Объект.ВидОперации.Пустая() Тогда
			Объект.ВидОперации = Перечисления.дог_ВидыОперацийДоговор.Договор;
		КонецЕсли;
		
		фин_ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект, фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета"), , ,Параметры.ЗначениеКопирования, Параметры.Основание);
		
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) И НЕ ЗначениеЗаполнено(Параметры.Основание) Тогда
			Объект.ДатаДоговора 	= ТекущаяДата();
			Объект.ДатаНачала 		= Объект.ДатаДоговора;
			Объект.ДатаОкончания 	= КонецГода(Объект.ДатаДоговора);
			Объект.ДеньОплаты 		= 1;
			//Объект.СмещениеВПериодах = 1;
			Объект.ВалютаДокумента = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяВалютаВзаиморасчетов");
			Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
				Объект.ВалютаДокумента = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
			КонецЕсли;
			Объект.ТипЦен = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойТипЦенПродажи");
			Если Объект.ВидОперации = Перечисления.дог_ВидыОперацийДоговор.Договор Тогда
				Объект.ДоговорКонтрагента = "";
			Иначе
				Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			КонецЕсли;
		Иначе
			мСтруктураЗаполнения = Документы.дог_РегистрацияДоговоров.ИзвлечьПередаваемыеДанные(Объект.Ссылка.Метаданные().Имя, Параметры.Основание);
			Если ТипЗнч(мСтруктураЗаполнения) = Тип("Структура") И мСтруктураЗаполнения.Количество()>0 Тогда
				СтруктураЗаполнения = ЗначениеВСтрокуВнутр(Новый Структура("СтрокиЗаполнения, Дата", мСтруктураЗаполнения, Объект.ДокументОснование.Дата));
			КонецЕсли;
		КонецЕсли;
		Если Объект.СпособКорректировкиТоварнойСпецификацииДоговора.Пустая() Тогда
			Объект.СпособКорректировкиТоварнойСпецификацииДоговора = Перечисления.дог_СпособыКорректировкиТоварнойСпецификацииДоговора.ВводНовойНоменклатурнойСпецификации;
		КонецЕсли;
		
		ЗаполнитьНедостающимиОбязательнымиНаСервере();
		
		РассчетОбщейСуммыТоварногоДоговора();
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РегистрацияДоговоров.Ссылка
			|ИЗ
			|	Документ.дог_РегистрацияДоговоров КАК РегистрацияДоговоров
			|ГДЕ
			|	РегистрацияДоговоров.Проведен
			|	И РегистрацияДоговоров.ДоговорКонтрагента = &ДоговорКонтрагента
			|	И РегистрацияДоговоров.Дата >= &Дата
			|	И РегистрацияДоговоров.Ссылка<>&Ссылка";

		Запрос.УстановитьПараметр("Дата", Объект.Дата);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);

		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Существуют проведенные документы по данному договору, введенные позже данного документа. Документ открыт в режиме чтения!'"));
			НеИзменять = Истина;
		КонецЕсли;		
		
	КонецЕсли;
	
	НадписьДанныеДоговора 						= "Данные договора";
	НадписьГрафикПлатежей 						= "График платежей";
	НадписьДокументыПоДоговору 					= "Документы по договору";
	НадписьИсточникРасчетаПлановойСуммы  		= "Источник расчета плановой суммы";
	НадписьОтражениеПоБюджетам 					= "Отражение по бюджетам";
	НадписьПараметрыОплаты 						= "Параметры оплаты";
	НадписьПериодДоговора  						= "Период договора";
	НадписьРасчетДатыОплаты  					= "Расчет даты оплаты";
	НадписьРасчетПени  							= "Расчет пени";
	НадписьРасчетСуммыОплаты					= "Расчет суммы оплаты";
	НадписьРегистрируемыеОперации  				= "Регистрируемые операции";
	НадписьСписокДокументовПоДанномуДоговору	= "Список документов по данному договору";
	ПересчитыватьЦену 							= фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ПользователиКлиентСервер.АвторизованныйПользователь(),"ПриИзмененииЕдиницыИзмеренияТМЗПересчитыватьЦенуПропорционально");
	РасчетПлатежаПлановойСуммой 				= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("дог_ПоддержкаРасчетаГрафиковПлатежейПоБюджетам");	
	Период.ДатаНачала 							= Объект.ДатаНачалаОплаты;
	Период.ДатаОкончания 						= Объект.ДатаОкончанияОплаты;	
	УчетПоПроектам 								= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("узп_ВестиУчетЗакупокПоПроектам");
	УчетПоПроектамВДокументе 					= УчетПоПроектам И Объект.ВидДоговораПоТоварнымОперациям<>Перечисления.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорРеализации;
	
    СписокДокументов.Параметры.УстановитьЗначениеПараметра("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	СписокДокументов.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	ОписаниеТиповПериодичность = Новый ОписаниеТипов("ПеречислениеСсылка.фин_Периодичность");
	Элементы.ПериодичностьОплаты.ОграничениеТипа = ОписаниеТиповПериодичность;
	Элементы.ПериодичностьСмещения.ОграничениеТипа = ОписаниеТиповПериодичность;
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
	/////////////////////////////////////////////////////////////
	// регламентные действия по согласованию
	
	// обработка доступности формы на основании данных согласования документов
	усд_УправлениеСогласованиемДокументов.ДоступностьРедактированияДокумента(ЭтотОбъект,Объект);
	
	УправлениеФормой(ЭтаФорма);
	
	ЭтаФорма.ТолькоПросмотр = НеИзменять;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьРеквизитОбъекта(ТекущийОбъект, ИмяРеквизита)
	Возврат ТекущийОбъект[ИмяРеквизита];
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	ВидОперацииЗаявкиСписокВыбора = Форма.ВидОперацииЗаявкиСписокВыбора;
	ДоговорПоставки 													= НЕ (Объект.ВидДоговораПоТоварнымОперациям = ПредопределенноеЗначение("Перечисление.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорРеализации"));
	ТипЗаказа 															= ?(Объект.ВидДоговораПоТоварнымОперациям = ПредопределенноеЗначение("Перечисление.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорРеализации"), Новый ОписаниеТипов("ДокументСсылка.узп_ЗаказПокупателя"),Новый ОписаниеТипов("ДокументСсылка.узп_ЗаказПоставщику"));
	
	Элементы.ВалютаДокумента.ТолькоПросмотр = Ложь;
	Элементы.ВидДоговораПоТоварнымОперациям.ТолькоПросмотр 				= Ложь;
	Элементы.ВидОперацииПоДоговору.ТолькоПросмотр 						= Ложь;
	Элементы.ВидОбязательства.ТолькоПросмотр 							= Ложь;
	Элементы.СпособКорректировкиТоварнойСпецификацииДоговора.Видимость	= Ложь;
	Элементы.ЗаполнитьАктуальнойСпецификациейДоговора.Видимость 		= Ложь;
	Элементы.ВариантРегистрацииДополнительногоСоглашения.Видимость		= Ложь;
	Элементы.ПервоначальныйДоговор.Видимость							= Ложь;
	Элементы.КонтролироватьСрокиПоставки.Видимость						= Ложь;
	Элементы.СрокПоставки.Видимость 									= Объект.ЕдиныйСрокПоставкиПоЗаказу;
	Элементы.ТоварыДатаПоставки.Видимость 								= НЕ Объект.ЕдиныйСрокПоставкиПоЗаказу;
	Элементы.УслугиДатаПоставки.Видимость 								= НЕ Объект.ЕдиныйСрокПоставкиПоЗаказу;
	Элементы.ОСДатаПоставки.Видимость 									= НЕ Объект.ЕдиныйСрокПоставкиПоЗаказу;
	Элементы.ОС.ПодчиненныеЭлементы.ОСКоличество.Видимость 				= НЕ (Объект.ВидДоговораПоТоварнымОперациям = ПредопределенноеЗначение("Перечисление.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорРеализации"));
	Элементы.ОС.ПодчиненныеЭлементы.ОСЦена.Видимость 					= НЕ (Объект.ВидДоговораПоТоварнымОперациям = ПредопределенноеЗначение("Перечисление.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорРеализации"));
	Элементы.ОСХарактеристика.Видимость 								= НЕ (Объект.ВидДоговораПоТоварнымОперациям = ПредопределенноеЗначение("Перечисление.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорРеализации"));
		
	Элементы.ТоварыЗаявкаМТС.Видимость 									= ДоговорПоставки;
	Элементы.УслугиЗаявкаМТС.Видимость 									= ДоговорПоставки;
	Элементы.ОСЗаявкаМТС.Видимость 										= ДоговорПоставки;	
	Элементы.ТоварыСтавкаНДС.Видимость 									= Объект.УчитыватьНДС;
	Элементы.УслугиСтавкаНДС.Видимость 									= Объект.УчитыватьНДС;
	Элементы.ОССтавкаНДС.Видимость 	   									= Объект.УчитыватьНДС;	
	Элементы.ТоварыСуммаНДС.Видимость  									= Объект.УчитыватьНДС;
	Элементы.УслугиСуммаНДС.Видимость  									= Объект.УчитыватьНДС;
	Элементы.ОССуммаНДС.Видимость	   									= Объект.УчитыватьНДС;	
	
	Элементы.ТоварыПроект.Видимость 									= Ложь;	
	Элементы.УслугиПроект.Видимость 									= Ложь;	
	Элементы.ОСПроект.Видимость 										= Ложь;	
	
	//При изменении вида оплаты
	ВидимостьСпособов 													= Ложь;
	Элементы.График.Видимость 											= Ложь;
	Элементы.ГруппаГрафикПлатежей.Видимость 							= Ложь;
	Элементы.ГруппаРасчетРазовойИРегулярнойОплаты.Видимость 			= Истина;
	Элементы.ПоСуммеЗадолженности.Видимость 							= Ложь;
    Элементы.ПоСпособам.Видимость 										= Ложь;
	Элементы.АвтоматическоеСозданиеСобытийДляРасчетовПоГрафику.Видимость 	= (Объект.ВидОплаты = ПредопределенноеЗначение("Перечисление.дог_ВидыОплатыПоДоговору.ПоГрафику") ИЛИ Объект.ВидОплаты = ПредопределенноеЗначение("Перечисление.дог_ВидыОплатыПоДоговору.Регулярная"));
	Элементы.ПравилоРасчетаПлатежей.Видимость 								= (Объект.ВидОплаты = ПредопределенноеЗначение("Перечисление.дог_ВидыОплатыПоДоговору.ПоГрафику") ИЛИ Объект.ВидОплаты = ПредопределенноеЗначение("Перечисление.дог_ВидыОплатыПоДоговору.Регулярная")) И Объект.АвтоматическоеСозданиеСобытийДляРасчетовПоГрафику;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.дог_ВидыОперацийДоговор.ДополнительноеСоглашение") Тогда
		Элементы.ВидДоговораПоТоварнымОперациям.ТолькоПросмотр 				= Истина;
		Элементы.ВидОперацииПоДоговору.ТолькоПросмотр 						= Истина;
		Элементы.ВидОбязательства.ТолькоПросмотр 							= Истина;
		//Элементы.СпособКорректировкиТоварнойСпецификацииДоговора.Видимость 	= Объект.ВариантРегистрацииДополнительногоСоглашения = ПредопределенноеЗначение("Перечисление.дог_ВариантыРегистрацииДополнительныхСоглашений.КорректировкаСуществующегоДоговораКонтрагента");
		//Элементы.ЗаполнитьАктуальнойСпецификациейДоговора.Видимость 		= Объект.ВариантРегистрацииДополнительногоСоглашения <> ПредопределенноеЗначение("Перечисление.дог_ВариантыРегистрацииДополнительныхСоглашений.РегистрацияНовогоДоговораКонтрагентаНаДополнительныйОбъем");
		Элементы.ВариантРегистрацииДополнительногоСоглашения.Видимость		= Истина;
		Элементы.ПервоначальныйДоговор.Видимость							= Объект.ВариантРегистрацииДополнительногоСоглашения <> ПредопределенноеЗначение("Перечисление.дог_ВариантыРегистрацииДополнительныхСоглашений.КорректировкаСуществующегоДоговораКонтрагента");
		Элементы.ЗаполнитьАктуальнойСпецификациейДоговора.Заголовок 		= ?(Объект.ВариантРегистрацииДополнительногоСоглашения = ПредопределенноеЗначение("Перечисление.дог_ВариантыРегистрацииДополнительныхСоглашений.КорректировкаСуществующегоДоговораКонтрагента"), "Заполнить актуальной спецификацией договора","Заполнить остатками по договору");








	КонецЕсли;
	
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("дог_КонтролироватьСрокиПоставокПоДоговорам") Тогда
		Элементы.КонтролироватьСрокиПоставки.Видимость = Объект.ВидОперацииПоДоговору = ПредопределенноеЗначение("Перечисление.дог_ВидыОперацийПоДоговору.ТоварныеОперации");
	КонецЕсли;
	//пересмотреть вызов
	//////////////////////////
	Если Объект.ПериодичностьОплаты <> ПолучитьРеквизитОбъекта(Объект.Сценарий, "Периодичность") Тогда
		Объект.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.ПустаяСсылка");
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.ВалютаДокумента = ПолучитьРеквизитОбъекта(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		Элементы.ВалютаДокумента.ТолькоПросмотр = Истина;	
	КонецЕсли;







	

	Элементы.ОСЗаказ.ОграничениеТипа = ТипЗаказа;
	Элементы.УслугиЗаказ.ОграничениеТипа = ТипЗаказа;
	Элементы.ТоварыЗаказ.ОграничениеТипа = ТипЗаказа;

	///////////////////////////
	Если Форма.УчетПоПроектам Тогда
		Элементы.ТоварыПроект.Видимость = Форма.УчетПоПроектамВДокументе;	
		Элементы.УслугиПроект.Видимость = Форма.УчетПоПроектамВДокументе;	
		Элементы.ОСПроект.Видимость 	= Форма.УчетПоПроектамВДокументе;	
	КонецЕсли;
	









	Если НЕ ЗначениеЗаполнено(Объект.ВидОплаты) Тогда
		Элементы.ГруппаРасчетРазовойИРегулярнойОплаты.Видимость = Ложь;
		Элементы.СпособРасчетаСуммыПлатежа.Видимость = Ложь;
	ИначеЕсли Объект.ВидОплаты = ПредопределенноеЗначение("Перечисление.дог_ВидыОплатыПоДоговору.Разовая") Тогда
		Элементы.ГруппаПериодические.Видимость 	= Ложь;
		Элементы.ДатаОплаты.Видимость 			= Истина;
		ВидимостьСпособов 						= Истина;
		Если Объект.СпособРасчетаСуммыПлатежа = ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ПоЗадолженностиНаНачалоПериода") Тогда
			Объект.СпособРасчетаСуммыПлатежа = ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ЗадолженностьНаДатуПлатежа");
		КонецЕсли;
		Элементы.СпособРасчетаСуммыПлатежа.Видимость = Истина;
		///////////////
		Элементы.СмещениеВПериодах.Видимость 		= Ложь;
		Элементы.ДеньОплаты.Видимость 				= Истина;
		Элементы.ПериодичностьСмещения.Доступность 	= Истина;
		Элементы.ГруппаРасчетСуммыОплаты.Видимость 		= Истина;
		Элементы.СпособРасчетаСуммыПлатежа.Видимость	= Истина;
		Элементы.ДатаОплаты.Видимость 					= Истина;
		Элементы.НадписьРасчетДатыОплаты.Видимость 		= Истина;
		Элементы.ГруппаРасчетДатыОплаты.Видимость 		= Истина;
		Элементы.НадписьРасчетСуммыОплаты.Видимость 	= Истина;
		Элементы.ПравилоРасчетаПлатежей.Видимость 		= Истина;
	ИначеЕсли Объект.ВидОплаты = ПредопределенноеЗначение("Перечисление.дог_ВидыОплатыПоДоговору.Регулярная") Тогда
		Элементы.ГруппаПериодические.Видимость 	= Истина;
		Элементы.ДатаОплаты.Видимость 			= Ложь;
        ВидимостьСпособов 						= НЕ Объект.АвтоматическоеСозданиеСобытийДляРасчетовПоГрафику;
		Если Объект.ПериодичностьОплаты = ПредопределенноеЗначение("Перечисление.фин_Периодичность.День") Тогда
			Элементы.СмещениеВПериодах.Видимость 		= Истина;
			Элементы.ДеньОплаты.Видимость 				= Ложь;
			Элементы.ПериодичностьСмещения.Доступность 	= Ложь;
		ИначеЕсли Объект.ПериодичностьОплаты = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Неделя")
			ИЛИ Объект.ПериодичностьОплаты = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Декада") Тогда
			Элементы.ПериодичностьСмещения.Доступность 	= Ложь;
			Элементы.ДеньОплаты.Видимость 				= Истина;
		Иначе
			Элементы.СмещениеВПериодах.Видимость 		= Истина;
			Элементы.ДеньОплаты.Видимость 				= Истина;
			Элементы.ПериодичностьСмещения.Доступность 	= Истина;
		КонецЕсли;
		//Элементы.СмещениеВПериодах.Видимость 			= Истина;
        Элементы.СпособРасчетаСуммыПлатежа.Видимость 	= НЕ Объект.АвтоматическоеСозданиеСобытийДляРасчетовПоГрафику;

		Элементы.ГруппаРасчетСуммыОплаты.Видимость 		= Истина;
		Элементы.СпособРасчетаСуммыПлатежа.Видимость	= Истина;
		//Элементы.ДатаОплаты.Видимость 					= Истина;
		
	ИначеЕсли Объект.ВидОплаты = ПредопределенноеЗначение("Перечисление.дог_ВидыОплатыПоДоговору.ПоГрафику") Тогда
		Элементы.График.Видимость = Истина;
		Элементы.НадписьРасчетДатыОплаты.Видимость 		= Объект.АвтоматическоеСозданиеСобытийДляРасчетовПоГрафику;


		Элементы.ГруппаРасчетДатыОплаты.Видимость 		= Объект.АвтоматическоеСозданиеСобытийДляРасчетовПоГрафику;
		Элементы.НадписьРасчетСуммыОплаты.Видимость 	= Объект.АвтоматическоеСозданиеСобытийДляРасчетовПоГрафику;
		Элементы.ПравилоРасчетаПлатежей.Видимость 		= Объект.АвтоматическоеСозданиеСобытийДляРасчетовПоГрафику;
		Элементы.ГруппаРасчетСуммыОплаты.Видимость 		= Ложь;
		Элементы.СпособРасчетаСуммыПлатежа.Видимость	= Ложь;
		Элементы.ДатаОплаты.Видимость 					= Ложь;
		
		Если Объект.АвтоматическоеСозданиеСобытийДляРасчетовПоГрафику Тогда
			Если Объект.ПериодичностьОплаты = ПредопределенноеЗначение("Перечисление.фин_Периодичность.День") Тогда
				Элементы.СмещениеВПериодах.Видимость 		= Истина;
				Элементы.ДеньОплаты.Видимость 				= Ложь;
				Элементы.ПериодичностьСмещения.Доступность 	= Ложь;
			ИначеЕсли Объект.ПериодичностьОплаты = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Неделя")
				ИЛИ Объект.ПериодичностьОплаты = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Декада") Тогда
				Элементы.ПериодичностьСмещения.Доступность 	= Ложь;
				Элементы.ДеньОплаты.Видимость 				= Истина;
			Иначе
				Элементы.СмещениеВПериодах.Видимость 		= Истина;
				Элементы.ДеньОплаты.Видимость 				= Истина;
				Элементы.ПериодичностьСмещения.Доступность 	= Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Объект.ВидОплаты = ПредопределенноеЗначение("Перечисление.дог_ВидыОплатыПоДоговору.ПоИндивидуальномуГрафику") Тогда
		Элементы.ГруппаГрафикПлатежей.Видимость = Истина;
		Элементы.ГрафикПлатежей.Видимость = Истина;

		Элементы.ГруппаРасчетРазовойИРегулярнойОплаты.Видимость = Ложь;
		Элементы.СпособРасчетаСуммыПлатежа.Видимость = Ложь;

	ИначеЕсли Объект.ВидОплаты = ПредопределенноеЗначение("Перечисление.дог_ВидыОплатыПоДоговору.ПоСуммеЗадолженности") Тогда
		Элементы.ГруппаРасчетРазовойИРегулярнойОплаты.Видимость = Ложь;
		Элементы.ПоСуммеЗадолженности.Видимость = Истина;
		Элементы.СпособРасчетаСуммыПлатежа.Видимость = Ложь;
	КонецЕсли;
	
	Плановая = Ложь;
	// при изменении способа расчета суммы платежа
	Если ВидимостьСпособов Тогда
		Элементы.ПоСпособам.Видимость = Истина;
		Элементы.ФиксированнаяС.Видимость = Ложь;
		Элементы.Плановая.Видимость = Ложь;
		Элементы.ПоСуммеЗадолженности.Видимость = Ложь;
        Элементы.ПоЗадолженностиНаДату.Видимость = Ложь;
		Если Объект.СпособРасчетаСуммыПлатежа = ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ФиксированнойСуммой") Тогда
			Элементы.ФиксированнаяС.Видимость = Истина;
		ИначеЕсли Объект.СпособРасчетаСуммыПлатежа = ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ПлановаяСумма") Тогда
			Элементы.Плановая.Видимость = Истина;
			Плановая = Истина;
		ИначеЕсли Объект.СпособРасчетаСуммыПлатежа = ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ПоЗадолженностиНаНачалоПериода")
			ИЛИ Объект.СпособРасчетаСуммыПлатежа = ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ЗадолженностьНаДатуПлатежа") Тогда	
            Элементы.ПоЗадолженностиНаДату.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Плановая Тогда
		Объект.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.ПустаяСсылка");
		Объект.ФинансовыйПоказательСценария = ПредопределенноеЗначение("Справочник.фин_ФинансовыеПоказатели.ПустаяСсылка");
	КонецЕсли;
	
	Элементы.ГруппаПараметрыРасчетаПени.Видимость = Истина;
	Элементы.КоличествоДнейНачисленияПени.Видимость = Истина;
	Если Объект.СпособНачисленияПени = ПредопределенноеЗначение("Перечисление.дог_СпособыНачисленияПени.НеНачислять") Тогда
		Объект.СтавкаПени = 0;
		Объект.КоличествоДнейНачисленияПени = 0;
		Объект.КоличествоДнейПросрочки = 0;
		Элементы.ГруппаПараметрыРасчетаПени.Видимость = Ложь;
	ИначеЕсли Объект.СпособНачисленияПени = ПредопределенноеЗначение("Перечисление.дог_СпособыНачисленияПени.ФиксированнойСуммой")
		ИЛИ Объект.СпособНачисленияПени = ПредопределенноеЗначение("Перечисление.дог_СпособыНачисленияПени.ПроцентомОтЗадолженности") Тогда
		Объект.КоличествоДнейНачисленияПени = 0;
		Элементы.КоличествоДнейНачисленияПени.Видимость = Ложь;
	КонецЕсли;
	
	// при изменении вида операции по договору
	мВидыЗРС = Новый СписокЗначений;
	мВидыЗРС.Добавить(ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику"));
	мВидыЗРС.Добавить(ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю"));
	мВидыЗРС.Добавить(ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами"));
	мВидыЗРС.Добавить(ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами"));
	мВидыЗРС.Добавить(ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами"));
	мВидыЗРС.Добавить(ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ОплатаСтруктурномуПодразделению"));

	мВидыППДС = Новый СписокЗначений;
	мВидыППДС.Добавить(ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя"));
	мВидыППДС.Добавить(ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком"));
	мВидыППДС.Добавить(ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийПланируемоеПоступлениеДС.РасчетыПоКредитамИЗаймам"));
	мВидыППДС.Добавить(ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами"));
	мВидыППДС.Добавить(ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийПланируемоеПоступлениеДС.ОплатаСтруктурногоПодразделения"));
	
	Если Объект.ВидОперацииПоДоговору = ПредопределенноеЗначение("Перечисление.дог_ВидыОперацийПоДоговору.ТоварныеОперации") Тогда
	    Элементы.ГруппаСпецификация.Видимость = Истина; 
		Элементы.ВидОбязательства.Видимость = Истина;
		Элементы.ВидДоговораПоТоварнымОперациям.Видимость = Истина;
		
		Если Объект.ВидДоговораПоТоварнымОперациям = ПредопределенноеЗначение("Перечисление.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорПоставки") ИЛИ Объект.ВидДоговораПоТоварнымОперациям = ПредопределенноеЗначение("Перечисление.дог_ВидыДоговоровПоТоварнымОперациям.ЗаказНаПриобретение") Тогда
			Элементы.ГруппаОС.Видимость = (Объект.ОС.Количество()>0 ИЛИ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ИспользуемыйНоменклатурныйПеречень")<>ПредопределенноеЗначение("Перечисление.узп_ИспользуемыеНоменклатурныеПеречни.РегламентированнаяНоменклатура"));
			Элементы.ФормаГруппаДокументыРеализации.Видимость = Ложь;
			Элементы.ФормаГруппаДокументыПоступления.Видимость = Истина;
			УстановитьДоступностьВводаНаОсновании(Элементы.ФормаГруппаДокументыПоступления.ПодчиненныеЭлементы);
			Элементы.ТоварыОбъектРемонта.Видимость = Истина;
			Элементы.ТоварыПодразделение.Видимость = Истина;
			Элементы.УслугиОбъектРемонта.Видимость = Истина;
			Элементы.УслугиПодразделение.Видимость = Истина;
			ВидОперацииЗаявкиСписокВыбора.Очистить();
			ВидОперацииЗаявкиСписокВыбора.ЗагрузитьЗначения(мВидыЗРС.ВыгрузитьЗначения());
			Если мВидыЗРС.НайтиПоЗначению(Объект.ВидОперацииЗаявки) = Неопределено Тогда
				Объект.ВидОперацииЗаявки = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПустаяСсылка");
			КонецЕсли;
		Иначе
			Элементы.ГруппаОС.Видимость = Истина;
			Элементы.ФормаГруппаДокументыРеализации.Видимость = Истина;
			УстановитьДоступностьВводаНаОсновании(Элементы.ФормаГруппаДокументыРеализации.ПодчиненныеЭлементы);
			Элементы.ФормаГруппаДокументыПоступления.Видимость = Ложь;
			Элементы.ТоварыОбъектРемонта.Видимость = Ложь;
			Элементы.ТоварыПодразделение.Видимость = Ложь;
			Элементы.УслугиОбъектРемонта.Видимость = Ложь;
			Элементы.УслугиПодразделение.Видимость = Ложь;
			ВидОперацииЗаявкиСписокВыбора.Очистить();
			ВидОперацииЗаявкиСписокВыбора.ЗагрузитьЗначения(мВидыППДС.ВыгрузитьЗначения());
			Если мВидыППДС.НайтиПоЗначению(Объект.ВидОперацииЗаявки) = Неопределено Тогда
				Объект.ВидОперацииЗаявки = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийПланируемоеПоступлениеДС.ПустаяСсылка");
			КонецЕсли;

		КонецЕсли;

	Иначе
		Элементы.ФормаГруппаДокументыПоступления.Видимость = Ложь;
		Элементы.ФормаГруппаДокументыРеализации.Видимость = Ложь;
		
		Элементы.ГруппаСпецификация.Видимость = Ложь;
		Элементы.ВидДоговораПоТоварнымОперациям.Видимость = Ложь;
		Элементы.ВидОбязательства.Видимость = Истина;
		Если Объект.ВидОбязательства = ПредопределенноеЗначение("Перечисление.дог_ВидыОбязательствПоДоговору.Входящее") Тогда
			ВидОперацииЗаявкиСписокВыбора.Очистить();
			ВидОперацииЗаявкиСписокВыбора.ЗагрузитьЗначения(мВидыППДС.ВыгрузитьЗначения());
			Если мВидыППДС.НайтиПоЗначению(Объект.ВидОперацииЗаявки) = Неопределено Тогда
				Объект.ВидОперацииЗаявки = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПустаяСсылка");
			КонецЕсли;
		Иначе
			ВидОперацииЗаявкиСписокВыбора.Очистить();
			ВидОперацииЗаявкиСписокВыбора.ЗагрузитьЗначения(мВидыЗРС.ВыгрузитьЗначения());
			Если мВидыЗРС.НайтиПоЗначению(Объект.ВидОперацииЗаявки) = Неопределено Тогда
				Объект.ВидОперацииЗаявки = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийПланируемоеПоступлениеДС.ПустаяСсылка");
			КонецЕсли;
        КонецЕсли;
	КонецЕсли;
	
	//БИТ
	Если Объект.ТипСрокаОплат Тогда
		Элементы.СрокОплаты.Доступность = Ложь;
	Иначе 
		Элементы.СрокОплаты.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.ПередаватьПоТрехстороннемуСоглашению Тогда
		Элементы.КонтрагентПоТрехстороннемуСоглашению.Видимость = Истина;
	Иначе
		Элементы.КонтрагентПоТрехстороннемуСоглашению.Видимость = Ложь;
	КонецЕсли;
	
	//БИТ	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ФормаДокументаСуществует(ИмяДокумента, ИмяФормы)
	Возврат НЕ Метаданные.Документы[ИмяДокумента][ИмяФормы] = Неопределено;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьВводаНаОсновании(Коллекция)
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		Для Каждого КнопкаВвода Из Коллекция Цикл
			ИмяДокумента = Сред(КнопкаВвода.Имя,СтрДлина("ФормаДокумент")+1);
			ИмяДокумента = Лев(ИмяДокумента,СтрДлина(ИмяДокумента)-СтрДлина("СоздатьНаОсновании"));
			КнопкаВвода.Видимость = ФормаДокументаСуществует(ИмяДокумента, "ОсновнаяФормаОбъекта") ИЛИ ФормаДокументаСуществует(ИмяДокумента, "ДополнительнаяФормаОбъекта");
		КонецЦикла;
	КонецЕсли
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруЗаполнения(СтруктураЗаполнения)
	Возврат ЗначениеИзСтрокиВнутр(СтруктураЗаполнения);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗаключенныеДоговора(Организация,СтруктурноеПодразделение,Контрагент,Дата)
	
	Возврат дог_УправлениеДоговорами.ПолучитьСписокДоговоров(Организация,СтруктурноеПодразделение,Контрагент,Дата);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентПересчета(ЕдиницаИзмерения,Номенклатура)
   	Возврат дог_УправлениеДоговорами.КоэффициентПересчетаВБазовую(ЕдиницаИзмерения,Номенклатура);
КонецФункции

&НаСервере
Процедура ПроверкаПринадлежностиДоговора()
	
	Если (НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента)) ИЛИ Объект.ВидОперации = Перечисления.дог_ВидыОперацийДоговор.Договор Тогда
		Возврат;
	КонецЕсли;
	СЗ =  дог_УправлениеДоговорами.ПолучитьСписокДоговоров(Объект.Организация, Объект.СтруктурноеПодразделение, Объект.Контрагент,Объект.Дата);
	Если СЗ.НайтиПоЗначению(Объект.ДоговорКонтрагента) = Неопределено Тогда
		Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Договор очищен, т.к. не соответствует выбранной организации / структурной единице!'"), , "ДоговорКонтрагента", "Объект");
	КонецЕсли;
	Если Объект.ВариантРегистрацииДополнительногоСоглашения<>Перечисления.дог_ВариантыРегистрацииДополнительныхСоглашений.КорректировкаСуществующегоДоговораКонтрагента Тогда
		Если СЗ.НайтиПоЗначению(Объект.ПервоначальныйДоговор)=Неопределено Тогда
			Объект.ПервоначальныйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Первоначальный договор очищен, т.к. не соответствует выбранной организации / структурной единице!'"), , "ПервоначальныйДоговор", "Объект");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчетОбщейСуммыТоварногоДоговора()
	Если Объект.ВидОперации = Перечисления.дог_ВидыОперацийДоговор.Договор ИЛИ Объект.СпособКорректировкиТоварнойСпецификацииДоговора=Перечисления.дог_СпособыКорректировкиТоварнойСпецификацииДоговора.ВводНовойНоменклатурнойСпецификации ИЛИ Объект.ВариантРегистрацииДополнительногоСоглашения<>ПредопределенноеЗначение("Перечисление.дог_ВариантыРегистрацииДополнительныхСоглашений.КорректировкаСуществующегоДоговораКонтрагента") Тогда
		Объект.ОбщаяСуммаДоговора = Объект.Товары.Итог("Сумма")+Объект.Услуги.Итог("Сумма")+Объект.ОС.Итог("Сумма")+?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС,Объект.Товары.Итог("СуммаНДС")+Объект.Услуги.Итог("СуммаНДС")+Объект.ОС.Итог("СуммаНДС"),0);
	Иначе
	    ВыборкаИмяТЧ = Документы.дог_РегистрацияДоговоров.ВыборкаПоСпецификации(Объект);
		СуммаТекущая = Объект.Товары.Итог("Сумма")+Объект.Услуги.Итог("Сумма")+Объект.ОС.Итог("Сумма")+?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС,Объект.Товары.Итог("СуммаНДС")+Объект.Услуги.Итог("СуммаНДС")+Объект.ОС.Итог("СуммаНДС"),0);
		Пока ВыборкаИмяТЧ.Следующий() Цикл

			ВыборкаДетальныеЗаписи = ВыборкаИмяТЧ.Выбрать();
	        ИмяТЧ = ВыборкаИмяТЧ.ИмяТЧ;
			
			Ключи = "Номенклатура, ДатаПоставки, СтавкаНДС";
			Если ИмяТЧ = "Товары" Тогда
				Ключи = Ключи + ", ЕдиницаИзмерения, Коэффициент, Цена, ОбъектРемонта, Подразделение";
			ИначеЕсли ИмяТЧ = "Услуги" Тогда
				Ключи = Ключи + ", Цена, ОбъектРемонта, Подразделение";
			ИначеЕсли ИмяТЧ = "ОС" Тогда
				Ключи = Ключи + ", Цена, Подразделение";
			КонецЕсли;
			СтруктураПоиска = Новый Структура(Ключи);
				
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска,ВыборкаДетальныеЗаписи);
				Если ИмяТЧ = "Товары" Тогда				
					НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
				ИначеЕсли ИмяТЧ = "Услуги" Тогда				
					НайденныеСтроки = Объект.Услуги.НайтиСтроки(СтруктураПоиска);
				Иначе 
					НайденныеСтроки = Объект.ОС.НайтиСтроки(СтруктураПоиска);
				КонецЕсли;
				Если НайденныеСтроки.Количество()=0 Тогда
					СуммаТекущая = СуммаТекущая + ВыборкаДетальныеЗаписи.Сумма+?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС,ВыборкаДетальныеЗаписи.СуммаНДС,0);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		Объект.ОбщаяСуммаДоговора = СуммаТекущая;
	КонецЕсли;
	Если Объект.ВидОплаты=Перечисления.дог_ВидыОплатыПоДоговору.Разовая Тогда
		Объект.СуммаПлатежа = Объект.ОбщаяСуммаДоговора;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытаФормаВыбораНоменклатур(РезультатОткрытия, Параметры) Экспорт
	
	Если РезультатОткрытия<>Неопределено Тогда
		Для Каждого ТЧ Из РезультатОткрытия Цикл
			ТабличнаяЧасть = Объект[ТЧ.Ключ];
			Для Каждого ЭлементТЧ Из ТЧ.Значение Цикл
				СтрокаТЧ = ТабличнаяЧасть[ЭлементТЧ.Ключ-1];
				СтрокаТЧ.Номенклатура = ЭлементТЧ.Значение;
			КонецЦикла;
		КонецЦикла;
		
		РассчетОбщейСуммыТоварногоДоговора();
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСпецификации()
	Если Объект.ВариантРегистрацииДополнительногоСоглашения=Перечисления.дог_ВариантыРегистрацииДополнительныхСоглашений.КорректировкаСуществующегоДоговораКонтрагента Тогда
		ВыборкаИмяТЧ = Документы.дог_РегистрацияДоговоров.ВыборкаПоСпецификации(Объект);
		Объект.Товары.Очистить();
		Объект.Услуги.Очистить();
		Объект.ОС.Очистить();
		Пока ВыборкаИмяТЧ.Следующий() Цикл
			ВыборкаДетальныеЗаписи = ВыборкаИмяТЧ.Выбрать();
	        ИмяТЧ = ВыборкаИмяТЧ.ИмяТЧ;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ИмяТЧ = "Товары" Тогда				
					ТабличнаяЧасть = Объект.Товары;
				ИначеЕсли ИмяТЧ = "Услуги" Тогда				
					ТабличнаяЧасть = Объект.Услуги;
				Иначе 
					ТабличнаяЧасть = Объект.ОС;
				КонецЕсли;
				НоваяСтрока = ТабличнаяЧасть.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			КонецЦикла;
		КонецЦикла;
	Иначе
		ДанныеЗаполненияТабличныхЧастей	= общ_ПроцедурыМеханизмаЗащиты.ПолучитьДанныеЗаполненияТаличныхЧастейПоДоговору(Объект.ПервоначальныйДоговор, Истина, Истина);

		МассивТЧ = Новый Массив;
		МассивТЧ.Добавить("Товары");
		МассивТЧ.Добавить("Услуги");
		МассивТЧ.Добавить("ОС");
		Для Каждого ЭлМас Из МассивТЧ Цикл
			Если ДанныеЗаполненияТабличныхЧастей[ЭлМас].Количество()>0 Тогда
				Объект[ЭлМас].Загрузить(ДанныеЗаполненияТабличныхЧастей[ЭлМас].Скопировать());
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОпределениеУчетаПоПроектам()
	УчетПоПроектамВДокументе = УчетПоПроектам И Объект.ВидДоговораПоТоварнымОперациям<>Перечисления.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорРеализации;
	Если УчетПоПроектам И НЕ УчетПоПроектамВДокументе Тогда
		Для Каждого СтрокаТовар Из Объект.Товары Цикл
			СтрокаТовар.Проект = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
		КонецЦикла;
		Для Каждого СтрокаТовар Из Объект.Услуги Цикл
			СтрокаТовар.Проект = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
		КонецЦикла;
		Для Каждого СтрокаТовар Из Объект.ОС Цикл
			СтрокаТовар.Проект = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьСоставОСНМА()
	
	Если Объект.ВидДоговораПоТоварнымОперациям=Перечисления.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорРеализации Тогда
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(Тип("СправочникСсылка.ОсновныеСредства"));
 		МассивТипов.Добавить(Тип("СправочникСсылка.НематериальныеАктивы"));
   		ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	Иначе
    	ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.фин_ПлановаяНоменклатура");
	КонецЕсли;
	Для Каждого СтрокаОСНМА Из Объект.ОС Цикл
		СтрокаОСНМА.Номенклатура = ОграничениеТипа.ПривестиЗначение(СтрокаОСНМА.Номенклатура);	
		Если Объект.ВидДоговораПоТоварнымОперациям=Перечисления.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорРеализации Тогда
			СтрокаОСНМА.Количество = 1;
			СтрокаОСНМА.Цена = СтрокаОСНМА.Сумма;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы)
	
	ДанныеОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, ВидОперации, Дата, Ссылка, ТипЦен, 
									|УчитыватьНДС, СуммаВключаетНДС, ВалютаДокумента,  ДоговорКонтрагента");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);	
	
	СведенияОНоменклатуре = дог_УправлениеДоговорами.ПолучитьСведенияОНоменклатуре(ДанныеСтрокиТаблицы.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТаблицы.ЕдиницаИзмерения	= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	ДанныеСтрокиТаблицы.Коэффициент	   		= СведенияОНоменклатуре.Коэффициент;
	ДанныеСтрокиТаблицы.Цена			  	= СведенияОНоменклатуре.Цена;
	ДанныеСтрокиТаблицы.СтавкаНДС         	= СведенияОНоменклатуре.СтавкаНДС;
	
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтрокиТаблицы);
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуВсегоТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте 
Процедура ТоварыЦенаКоличествоПриИзмененииНаКлиенте(ДанныеСтрокиТаблицы)
	
	ДанныеОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, ВидОперации, Дата, Ссылка, ТипЦен, 
									|УчитыватьНДС, СуммаВключаетНДС, ВалютаДокумента,  ДоговорКонтрагента");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);	
	
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтрокиТаблицы);
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзмененииНаКлиенте(ДанныеСтрокиТаблицы)
	
	ДанныеОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, ВидОперации, Дата, Ссылка, ТипЦен, 
									|УчитыватьНДС, СуммаВключаетНДС, ВалютаДокумента,  ДоговорКонтрагента");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);	
	
	дог_УправлениеДоговорамиКлиентСервер.ПриИзмененииСуммыТабЧасти(ДанныеСтрокиТаблицы);
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзмененииНаКлиенте(ДанныеСтрокиТаблицы)
	
	ДанныеОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, ВидОперации, Дата, Ссылка, ТипЦен, 
									|УчитыватьНДС, СуммаВключаетНДС, ВалютаДокумента,  ДоговорКонтрагента");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);	
	
	дог_УправлениеДоговорамиКлиентСервер.ПриИзмененииСуммыТабЧасти(ДанныеСтрокиТаблицы);
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта);		
	
КонецПроцедуры

&НаСервере 
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	СведенияОНоменклатуре = дог_УправлениеДоговорами.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения  = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент	   = СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена			   = СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС         = СведенияОНоменклатуре.СтавкаНДС;
	
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте 
Процедура УслугиЦенаКоличествоПриИзмененииНаКлиенте(ДанныеСтрокиТаблицы)
	
	ДанныеОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, ВидОперации, Дата, Ссылка, ТипЦен, 
									|УчитыватьНДС, СуммаВключаетНДС, ВалютаДокумента,  ДоговорКонтрагента");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);	
	
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтрокиТаблицы);
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта);
		
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзмененииНаКлиенте(ДанныеСтрокиТаблицы)
	
	ДанныеОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, ВидОперации, Дата, Ссылка, ТипЦен, 
									|УчитыватьНДС, СуммаВключаетНДС, ВалютаДокумента,  ДоговорКонтрагента");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);	
	
	дог_УправлениеДоговорамиКлиентСервер.ПриИзмененииСуммыТабЧасти(ДанныеСтрокиТаблицы);
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта);	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзмененииНаКлиенте(ДанныеСтрокиТаблицы)
	
	ДанныеОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, ВидОперации, Дата, Ссылка, ТипЦен, 
									|УчитыватьНДС, СуммаВключаетНДС, ВалютаДокумента,  ДоговорКонтрагента");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);	
	
	дог_УправлениеДоговорамиКлиентСервер.ПриИзмененииСуммыТабЧасти(ДанныеСтрокиТаблицы);
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта);	
	
КонецПроцедуры

&НаСервере 
Процедура ОСНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	СтрокаТабличнойЧасти.Характеристика = Справочники.узп_ПлановыеХарактеристикиНоменклатуры.ПустаяСсылка();
	
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
	дог_УправлениеДоговорами.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, "ОС", Объект.Ссылка.Метаданные());
	
КонецПроцедуры

&НаКлиенте 
Процедура ОСЦенаКоличествоПриИзмененииНаКлиенте(СтрокаТабличнойЧасти)
	
	ДанныеОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, ВидОперации, Дата, Ссылка, ТипЦен, 
									|УчитыватьНДС, СуммаВключаетНДС, ВалютаДокумента,  ДоговорКонтрагента");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);	
	
КонецПроцедуры

&НаСервере
Функция ПередДобавлениемДопПараметра()
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	дог_ДополнительныеПараметрыДоговоров.Ссылка КАК ДопПараметр
	               |ИЗ
	               |	ПланВидовХарактеристик.дог_ДополнительныеПараметрыДоговоров КАК дог_ДополнительныеПараметрыДоговоров
	               |ГДЕ
	               |	(НЕ дог_ДополнительныеПараметрыДоговоров.Ссылка В (&СписокНастроек))";
				   
		
	Запрос.УстановитьПараметр("СписокНастроек", Объект.ДополнительныеПараметры.Выгрузить(, "ДополнительныйПараметр"));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НачалоВыбораДополнительногоПараметра()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеРеквизитыДоговоров.Ссылка КАК ДопПараметр
	               |ИЗ
	               |	ПланВидовХарактеристик.дог_ДополнительныеПараметрыДоговоров КАК ДополнительныеРеквизитыДоговоров
	               |ГДЕ
	               |	(НЕ ДополнительныеРеквизитыДоговоров.Ссылка В (&СписокНастроек))";
				   
		
	Запрос.УстановитьПараметр("СписокНастроек", Объект.ДополнительныеПараметры.Выгрузить(, "ДополнительныйПараметр"));
	
	Результат = Запрос.Выполнить();
	
			
		 		 
	СписокОтбора = Новый СписокЗначений;
	Если Не Результат.Пустой() Тогда

		СписокОтбора.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("ДопПараметр"));
	КонецЕсли;
	
	Возврат СписокОтбора;
		 		 
КонецФункции

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеРеквизитыДоговоров.Ссылка КАК ДопПараметр,
	               |	ДополнительныеРеквизитыДоговоров.Порядок КАК Порядок
	               |ИЗ
	               |	ПланВидовХарактеристик.дог_ДополнительныеПараметрыДоговоров КАК ДополнительныеРеквизитыДоговоров
	               |ГДЕ
	               |	НЕ ДополнительныеРеквизитыДоговоров.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок";

	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда 
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			НоваяСтрока = Объект.ДополнительныеПараметры.Добавить();
			НоваяСтрока.ДополнительныйПараметр = Выборка.ДопПараметр;
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбязательнымиНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеРеквизитыДоговоров.Ссылка КАК ДопПараметр,
	               |	ДополнительныеРеквизитыДоговоров.Порядок КАК Порядок
	               |ИЗ
	               |	ПланВидовХарактеристик.дог_ДополнительныеПараметрыДоговоров КАК ДополнительныеРеквизитыДоговоров
	               |ГДЕ
	               |	ДополнительныеРеквизитыДоговоров.Обязательный
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок";

	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда 
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			НоваяСтрока = Объект.ДополнительныеПараметры.Добавить();
			НоваяСтрока.ДополнительныйПараметр = Выборка.ДопПараметр;
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНедостающимиНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеРеквизитыДоговоров.Ссылка КАК ДопПараметр,
				   |	ДополнительныеРеквизитыДоговоров.Порядок КАК Порядок
	               |ИЗ
	               |	ПланВидовХарактеристик.дог_ДополнительныеПараметрыДоговоров КАК ДополнительныеРеквизитыДоговоров
	               |ГДЕ
	               |	(НЕ ДополнительныеРеквизитыДоговоров.Ссылка В (&СписокНастроек))
				   |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок";

	
	Запрос.УстановитьПараметр("СписокНастроек", Объект.ДополнительныеПараметры.Выгрузить(, "ДополнительныйПараметр"));
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда 
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл

			НоваяСтрока = Объект.ДополнительныеПараметры.Добавить();
			НоваяСтрока.ДополнительныйПараметр = Выборка.ДопПараметр;
		КонецЦикла;
		
	КонецЕсли;		
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНедостающимиОбязательнымиНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеРеквизитыДоговоров.Ссылка КАК ДопПараметр,
	               |	ДополнительныеРеквизитыДоговоров.Порядок КАК Порядок
	               |ИЗ
	               |	ПланВидовХарактеристик.дог_ДополнительныеПараметрыДоговоров КАК ДополнительныеРеквизитыДоговоров
	               |ГДЕ
	               |	(НЕ ДополнительныеРеквизитыДоговоров.Ссылка В (&СписокНастроек))
	               |	И ДополнительныеРеквизитыДоговоров.Обязательный
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок";

	
	Запрос.УстановитьПараметр("СписокНастроек", Объект.ДополнительныеПараметры.Выгрузить().ВыгрузитьКолонку("ДополнительныйПараметр"));
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда 
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл

			НоваяСтрока = Объект.ДополнительныеПараметры.Добавить();
			НоваяСтрока.ДополнительныйПараметр = Выборка.ДопПараметр;
		КонецЦикла;
		
	КонецЕсли;		
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИмеющимисяНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	дог_ДополнительныеПараметрыДоговоров.ДополнительныйПараметр КАК ДополнительныйПараметр,
	               |	дог_ДополнительныеПараметрыДоговоров.ЗначениеДополнительногоПараметра КАК Значение,
	               |	дог_ДополнительныеПараметрыДоговоров.ДополнительныйПараметр.Порядок КАК Порядок,
	               |	дог_ДополнительныеПараметрыДоговоров.Период
	               |ПОМЕСТИТЬ ВТ
	               |ИЗ
	               |	РегистрСведений.дог_ДополнительныеПараметрыДоговоров.СрезПоследних(
	               |			&ТекущаяДата,
	               |			Договор = &Договор
	               |				И (НЕ ДополнительныйПараметр В (&СписокИмеющихсяПараметров))) КАК дог_ДополнительныеПараметрыДоговоров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ.ДополнительныйПараметр,
	               |	ВТ.Значение,
	               |	ВТ.Порядок КАК Порядок
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		МАКСИМУМ(ВТ.Период) КАК Период
	               |	ИЗ
	               |		ВТ КАК ВТ) КАК ВложенныйЗапрос
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ КАК ВТ
	               |		ПО ВложенныйЗапрос.Период = ВТ.Период
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок";	
	
				   
	Запрос.УстановитьПараметр("ТекущаяДата", Новый МоментВремени(Объект.Дата,Объект.Ссылка));
	Запрос.УстановитьПараметр("Договор",  Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("СписокИмеющихсяПараметров",  Объект.ДополнительныеПараметры.Выгрузить(,"ДополнительныйПараметр"));
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда 
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			НоваяСтрока =  Объект.ДополнительныеПараметры.Добавить();
			НоваяСтрока.ДополнительныйПараметр = Выборка.ДополнительныйПараметр;
			НоваяСтрока.ЗначениеДополнительногоПараметра = Выборка.Значение;
		КонецЦикла;
		
	КонецЕсли;	

			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОсновномуСоглашению(ВыбранноеЗначение, ПервоначальныйДоговор = Ложь, СообщениеНаКлиент = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ВидДоговораПоТоварнымОперациям,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ВидОперацииПоДоговору,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ВидОбязательства,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ВходящийНомер,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ДатаДоговора,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ДатаНачала,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ДатаОкончания,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.СпособОплаты,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ВидОплаты,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ДатаОплаты,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.График,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ПериодичностьОплаты,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ПериодичностьСмещения,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.СмещениеВПериодах,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ДеньОплаты,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ДатаНачалаОплаты,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.СпособНачисленияПени,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ДатаОкончанияОплаты,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.СтавкаПени,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.КоличествоДнейНачисленияПени,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.КоличествоДнейПросрочки,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ТипЦен,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.СуммаВключаетНДС,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.УчитыватьНДС,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.СпособРасчетаСуммыПлатежа,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.Сценарий,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ФинансовыйПоказательСценария,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.МинимальнаяСуммаПлатежа,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ВерхнийПределЗадолженности,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ПроцентОтСуммы,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.СуммаПлатежа,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ФинансовыйПоказатель,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ДопСоглашение,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ВидОперацииЗаявки,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.СтатьяДДС,
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.Подразделение
		|ИЗ
		|	РегистрСведений.дог_ДоговорыИДополнительныеСоглашения.СрезПоследних(
		|			&Момент,
		|			Организация = &Организация
		|				И Договор = &Договор
		|				И Регистратор <> &Регистратор) КАК ДоговорыИДополнительныеСоглашенияСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополнительныеПараметрыДоговоровСрезПоследних.ДополнительныйПараметр,
		|	ДополнительныеПараметрыДоговоровСрезПоследних.ЗначениеДополнительногоПараметра
		|ИЗ
		|	РегистрСведений.ДополнительныеПараметрыДоговоров.СрезПоследних(
		|			&Момент,
		|			Договор = &Договор
		|				И Регистратор <> &Регистратор) КАК ДополнительныеПараметрыДоговоровСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпецификацияДоговоровСрезПоследних.НоменклатураОС,
		|	СпецификацияДоговоровСрезПоследних.ДатаПоставки,
		|	СпецификацияДоговоровСрезПоследних.ЕдиницаИзмерения,
		|	СпецификацияДоговоровСрезПоследних.Коэффициент,
		|	СпецификацияДоговоровСрезПоследних.СтавкаНДС,
		|	СпецификацияДоговоровСрезПоследних.Цена,
		|	СпецификацияДоговоровСрезПоследних.ОбъектРемонта,
		|	СпецификацияДоговоровСрезПоследних.Подразделение,
		|	СпецификацияДоговоровСрезПоследних.Количество,
		|	СпецификацияДоговоровСрезПоследних.СуммаНДС,
		|	СпецификацияДоговоровСрезПоследних.Сумма
		|ПОМЕСТИТЬ Специфика
		|ИЗ
		|	РегистрСведений.дог_СпецификацияДоговоров.СрезПоследних(
		|			&Момент,
		|			Договор = &Договор
		|				И Организация = &Организация
		|				И Регистратор <> &Регистратор) КАК СпецификацияДоговоровСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяТЧ,
		|	Специфика.НоменклатураОС КАК Номенклатура,
		|	Специфика.ДатаПоставки КАК ДатаПоставки,
		|	Специфика.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Специфика.Коэффициент КАК Коэффициент,
		|	Специфика.СтавкаНДС КАК СтавкаНДС,
		|	Специфика.Цена КАК Цена,
		|	Специфика.ОбъектРемонта КАК ОбъектРемонта,
		|	Специфика.Подразделение КАК Подразделение,
		|	Специфика.Количество КАК Количество,
		|	Специфика.СуммаНДС КАК СуммаНДС,
		|	Специфика.Сумма КАК Сумма,
		|	NULL КАК ОсновноеСредство
		|ИЗ
		|	Специфика КАК Специфика
		|ГДЕ
		|	(Специфика.НоменклатураОС ССЫЛКА Справочник.Номенклатура
		|				И Специфика.НоменклатураОС.Услуга = ЛОЖЬ
		|			ИЛИ Специфика.НоменклатураОС ССЫЛКА Справочник.фин_ПлановаяНоменклатура
		|				И Специфика.НоменклатураОС.ТипПозицииВПланеЗакупок = ЗНАЧЕНИЕ(Перечисление.узп_ТипыПозицийПлановойНоменклатурыВПланеЗакупок.Товар)
		|				И Специфика.Количество > 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""ОС"",
		|	Специфика.НоменклатураОС,
		|	Специфика.ДатаПоставки,
		|	NULL,
		|	NULL,
		|	Специфика.СтавкаНДС,
		|	Специфика.Цена,
		|	NULL,
		|	Специфика.Подразделение,
		|	Специфика.Количество,
		|	Специфика.СуммаНДС,
		|	Специфика.Сумма,
		|	Специфика.НоменклатураОС
		|ИЗ
		|	Специфика КАК Специфика
		|ГДЕ
		|	(Специфика.НоменклатураОС ССЫЛКА Справочник.ОсновныеСредства
		|			ИЛИ Специфика.НоменклатураОС ССЫЛКА Справочник.НематериальныеАктивы
		|			ИЛИ Специфика.НоменклатураОС ССЫЛКА Справочник.фин_ПлановаяНоменклатура
		|				И (Специфика.НоменклатураОС.ТипПозицииВПланеЗакупок = ЗНАЧЕНИЕ(Перечисление.узп_ТипыПозицийПлановойНоменклатурыВПланеЗакупок.ОсновноеСредство)
		|					ИЛИ Специфика.НоменклатураОС.ТипПозицииВПланеЗакупок = ЗНАЧЕНИЕ(Перечисление.узп_ТипыПозицийПлановойНоменклатурыВПланеЗакупок.НематериальныйАктив)))
		|	И Специфика.Сумма > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Услуги"",
		|	Специфика.НоменклатураОС,
		|	Специфика.ДатаПоставки,
		|	NULL,
		|	NULL,
		|	Специфика.СтавкаНДС,
		|	Специфика.Цена,
		|	Специфика.ОбъектРемонта,
		|	Специфика.Подразделение,
		|	Специфика.Количество,
		|	Специфика.СуммаНДС,
		|	Специфика.Сумма,
		|	NULL
		|ИЗ
		|	Специфика КАК Специфика
		|ГДЕ
		|	(Специфика.НоменклатураОС ССЫЛКА Справочник.Номенклатура
		|			ИЛИ Специфика.НоменклатураОС ССЫЛКА Справочник.фин_ПлановаяНоменклатура)
		|	И Специфика.НоменклатураОС.Услуга
		|	И Специфика.Количество > 0
		|ИТОГИ ПО
		|	ИмяТЧ";

	Запрос.УстановитьПараметр("Договор", ВыбранноеЗначение);
	Запрос.УстановитьПараметр("Момент", Новый МоментВремени(Объект.Дата, Объект.Ссылка));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Если Не ПервоначальныйДоговор Тогда
		Объект.ДоговорКонтрагента = ВыбранноеЗначение;
	Иначе
		Объект.ПервоначальныйДоговор = ВыбранноеЗначение;
	КонецЕсли;
	
    Объект.ВалютаДокумента = ВыбранноеЗначение.ВалютаВзаиморасчетов;
	Элементы.ВалютаДокумента.ТолькоПросмотр = Истина;
	Результат = Запрос.ВыполнитьПакет();
    Основные = Результат[0].Выбрать();
	Если Не Основные.Следующий() тогда
		СообщениеНаКлиент = НСтр("ru = 'По выбранному договору не осуществлена регистрация'");
	КонецЕсли;
	Основные.Сбросить();
	Пока Основные.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Объект,Основные);
	КонецЦикла;
	
	
	Объект.ДополнительныеПараметры.Загрузить(Результат[1].Выгрузить());
	
    Специфика = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Специфика.Следующий() Цикл
		ИмяТЧ = Специфика.ИмяТЧ;
		Детальные = Специфика.Выбрать();
		Пока Детальные.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Объект[ИмяТЧ].Добавить(),Детальные);			
		КонецЦикла;
	КонецЦикла;
	РассчетОбщейСуммыТоварногоДоговора();	
    УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВалютуПоДоговору(ВыбранноеЗначение)
	Объект.ВалютаДокумента = ВыбранноеЗначение.ВалютаВзаиморасчетов;
	Объект.ДоговорКонтрагента = ВыбранноеЗначение;
	Объект.ДатаНачала = ВыбранноеЗначение.ДатаНачалаДействияДоговора;
	Объект.ДатаОкончания = ВыбранноеЗначение.ДатаОкончанияДействияДоговора;
	Объект.ВходящийНомер = ВыбранноеЗначение.НомерДоговора;
	Объект.ДатаДоговора = ВыбранноеЗначение.ДатаДоговора;
	Элементы.ВалютаДокумента.ТолькоПросмотр = Истина;	
КонецПроцедуры

// Позволяет получить список реквизитов документа, необходимых для дальнейшей
// передачи в обработку заполнения цен и валют.
//
// Параметры: 
//  ДокументОбъект      - объект документа, для реквизитов будет производится заполнение
//  СтруктураИсключений - структура, в которую передаются те исключения, которые или невозможно
//                        определить по метаданным, или, несмотря ни на что, нельзя включать в
//                        возвращаемую структуру.
//                        В структуре - ключ = имя реквизита, значение = истина (необходимо добавить
//                        в структуру) или ложь (нельзя добавлять в структуру)
//
// Возвращаемое значене:
//  Сформированная структура реквизитов документа.
&НаСервере
Функция ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ДокументОбъект, СтруктураИсключений = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Зададим, какие реквизиты вообще нам могут быть нужны.
	СтруктураВозможныхВариантовРеквизитов = Новый Структура;
	СтруктураВозможныхВариантовРеквизитов.Вставить("ТипЦен");
	СтруктураВозможныхВариантовРеквизитов.Вставить("ВалютаДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КурсДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КратностьДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КурсВзаиморасчетов");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КратностьВзаиморасчетов");
	СтруктураВозможныхВариантовРеквизитов.Вставить("УчитыватьНДС");
	СтруктураВозможныхВариантовРеквизитов.Вставить("СуммаВключаетНДС");
	СтруктураВозможныхВариантовРеквизитов.Вставить("УчитыватьАкциз");
	СтруктураВозможныхВариантовРеквизитов.Вставить("СуммаВключаетАкциз");
	СтруктураВозможныхВариантовРеквизитов.Вставить("ИспользоватьПлановуюСебестоимость");
	СтруктураВозможныхВариантовРеквизитов.Вставить("РегистрироватьЦеныПоставщика");
	СтруктураВозможныхВариантовРеквизитов.Вставить("УсловиеПродаж");

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Новый Структура();
	Для Каждого ТекущийЭлементСтруктуры Из СтруктураВозможныхВариантовРеквизитов Цикл
		НужныйРеквизитДокумента = ТекущийЭлементСтруктуры.Ключ;
		Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента(НужныйРеквизитДокумента, МетаданныеДокумента) Тогда
			СтруктураРеквизитовДокумента.Вставить(НужныйРеквизитДокумента);
		КонецЕсли;
	КонецЦикла;

	// Теперь проверим исключения
	Если СтруктураИсключений<>Неопределено Тогда
		Для Каждого ТекущийЭлементСтруктуры Из СтруктураИсключений Цикл
			Если ТекущийЭлементСтруктуры.Значение Тогда
				// надо добавить реквизит, если его еще нет
				СтруктураРеквизитовДокумента.Вставить(ТекущийЭлементСтруктуры.Ключ);
			Иначе
				// надо удалить реквизит, если он есть
				СтруктураРеквизитовДокумента.Удалить(ТекущийЭлементСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СтруктураРеквизитовДокумента;

КонецФункции // ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования()
	
&НаСервереБезКонтекста
Функция  ПолучитьСписокППИ(Договор)
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДоговорКонтрагента = &Договор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлатежноеПоручениеИсходящееПеречислениеНДССИзмененнымСрокомУплаты.Ссылка
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты КАК ПлатежноеПоручениеИсходящееПеречислениеНДССИзмененнымСрокомУплаты
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречислениеНДССИзмененнымСрокомУплаты.Договор = &Договор";

	Запрос.УстановитьПараметр("Договор", Договор);

	Результат = Запрос.Выполнить();

	СписокППИ = Новый СписокЗначений;
	СписокППИ.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("Ссылка"));
    Возврат СписокППИ;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

&НаСервере
Процедура СоздатьДоговорНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.ДоговорКонтрагента = "Договор №"+Объект.Номер+" от "+Объект.Дата;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.дог_ВидыОперацийДоговор.Договор И (НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) ИЛИ ТипЗнч(Объект.ДоговорКонтрагента)=Тип("Строка")) Тогда
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НовыйДоговор.Владелец = Объект.Контрагент;
		НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		НовыйДоговор.ДатаДоговора = Объект.ДатаДоговора;
		НовыйДоговор.ДатаНачалаДействияДоговора = Объект.ДатаНачала;
		НовыйДоговор.ДатаОкончанияДействияДоговора = Объект.ДатаОкончания;
		НовыйДоговор.Наименование = Объект.ДоговорКонтрагента;
		НовыйДоговор.Организация = Объект.Организация;
		НовыйДоговор.ТипЦен = Объект.ТипЦен;
		НовыйДоговор.НомерДоговора = Объект.ВходящийНомер;
		НовыйДоговор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			НовыйДоговор.ВалютаВзаиморасчетов = Объект.ВалютаДокумента;
		Иначе
			НовыйДоговор.ВалютаВзаиморасчетов = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяВалютаВзаиморасчетов");
			Если НЕ ЗначениеЗаполнено(НовыйДоговор.ВалютаВзаиморасчетов) Тогда
				НовыйДоговор.ВалютаВзаиморасчетов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			НовыйДоговор.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при записи нового договора'") + " """ + Объект.ДоговорКонтрагента + """:
																|	" + ОписаниеОшибки());
		КонецПопытки;		
		ДоговорКонтрагента = НовыйДоговор.Ссылка;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыРасчета(ВходящееОбязательство)
	Если Объект.ВидОперацииПоДоговору = Перечисления.дог_ВидыОперацийПоДоговору.ТоварныеОперации Тогда
		ВходящееОбязательство = (Объект.ВидДоговораПоТоварнымОперациям = Перечисления.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорРеализации);
	Иначе	
		ВходящееОбязательство = (Объект.ВидОбязательства = Перечисления.дог_ВидыОбязательствПоДоговору.Входящее);
	КонецЕсли;
	Возврат Новый Структура("Организация,Контрагент,Договор,ДоговорКонтрагента,НеВосстанавливатьНастройки",Объект.Организация,Объект.Контрагент,Объект.ДоговорКонтрагента,Объект.ДоговорКонтрагента,Истина);	
КонецФункции

&НаКлиенте
Процедура УстановитьЗаказ(СтрокаДокумента)
	ТипЗаказа = ?(Объект.ВидДоговораПоТоварнымОперациям=ПредопределенноеЗначение("Перечисление.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорРеализации"),Новый ОписаниеТипов("ДокументСсылка.узп_ЗаказПокупателя"),Новый ОписаниеТипов("ДокументСсылка.узп_ЗаказПоставщику"));
	Основание = ОснованиеЗаказ();
	Заказ = ТипЗаказа.ПривестиЗначение(Основание);
	СтрокаДокумента.Заказ = Заказ;
КонецПроцедуры

&НаСервере
Функция ОснованиеЗаказ()
	Основание = Объект.ДокументОснование;
	Пока ЗначениеЗаполнено(Основание) И ТипЗнч(Основание) = Тип("ДокументСсылка.дог_РегистрацияДоговоров") Цикл
		Основание = Основание.ДокументОснование;
	КонецЦикла;
	Возврат Основание;
КонецФункции

&НаКлиенте
Процедура ПривестиДатуСценарияКНачалу()
	ПривестиДатуСценарияКНачалуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПривестиДатуСценарияКНачалуНаСервере()
	ТекущиеДанные = Элементы.ГрафикПлатежей.ТекущиеДанные;
	ТекущиеДанные.ДатаСценария = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ТекущиеДанные.ДатаСценария,ТекущиеДанные.Сценарий);	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВГрафикСтрокиИзВыбранногоГрафика(ВыбранныйГрафик)
	Для Каждого СтрокаТЧ Из ВыбранныйГрафик.ГрафикПлатежей Цикл
		ЗаполнитьЗначенияСвойств(Объект.ГрафикПлатежей.Добавить(),СтрокаТЧ);	
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеНаСервере(Аргумент, Значение)
	Возврат Аргумент[Значение];
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоступныеВидДоговораПоТоварнымОперациям(ДоговорКонтрагента)
	ДанныеВыбора = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",ДоговорКонтрагента);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.ВидДоговора
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Ссылка = &Ссылка";
	Результат 	= Запрос.Выполнить();
	Выборка 	= Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			ДанныеВыбора.Добавить(Перечисления.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорПоставки);
			ДанныеВыбора.Добавить(Перечисления.дог_ВидыДоговоровПоТоварнымОперациям.ЗаказНаПриобретение);
		ИначеЕсли Выборка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			ДанныеВыбора.Добавить(Перечисления.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорРеализации);
		ИначеЕсли Выборка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			ДанныеВыбора.Добавить(Перечисления.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорПоставки);
			ДанныеВыбора.Добавить(Перечисления.дог_ВидыДоговоровПоТоварнымОперациям.ЗаказНаПриобретение);
			ДанныеВыбора.Добавить(Перечисления.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорРеализации);
		КонецЕсли;
	Иначе
		ДанныеВыбора.Добавить(Перечисления.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорПоставки);
		ДанныеВыбора.Добавить(Перечисления.дог_ВидыДоговоровПоТоварнымОперациям.ЗаказНаПриобретение);
		ДанныеВыбора.Добавить(Перечисления.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорРеализации);
	КонецЕсли;
	Возврат ДанныеВыбора;
КонецФункции

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаВидОперацииПоДоговоруОбработкаВыбора(Результат, ПараметрыВопроса) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ВидОперацииПоДоговору = ПараметрыВопроса.ВыбранноеЗначение;
		Объект.Товары.Очистить();
		Объект.Услуги.Очистить();
		Объект.ОС.Очистить();
		
		ВидОперацииПоДоговоруПриИзменении(Элементы.ВидОперацииПоДоговору);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДоговорКонтрагентаОбработкаВыбора(Результат, ПараметрыВопроса) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ПараметрыВопроса.Режим = "валюта" Тогда
			Объект.ТипЦен = ПараметрыВопроса.НовыйТипЦен;
			ОткрытьФормуЦеныИВалюта(ЭтаФорма);
		Иначе 
			Объект.ДополнительныеПараметры.Очистить();
			Объект.Товары.Очистить();
			Объект.Услуги.Очистить();
			Объект.ОС.Очистить();
			
			СообщениеНаКлиент = Неопределено;
	        ЗаполнитьПоОсновномуСоглашению(ПараметрыВопроса.ВыбранноеЗначение, Ложь, СообщениеНаКлиент);
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.дог_ВидыОперацийДоговор.ДополнительноеСоглашение") 
				И НЕ СообщениеНаКлиент = Неопределено 
				И Объект.ВариантРегистрацииДополнительногоСоглашения = ПредопределенноеЗначение("Перечисление.дог_ВариантыРегистрацииДополнительныхСоглашений.КорректировкаСуществующегоДоговораКонтрагента") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеНаКлиент);
			КонецЕсли;
			
			Объект.ДоговорКонтрагента = ПараметрыВопроса.ВыбранноеЗначение;
			
			ДоговорКонтрагентаПриИзменении(Элементы.ДоговорКонтрагента);
		КонецЕсли;
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаВидДоговораПоТоварнымОперациямОбработкаВыбора(Результат, ВыбранноеЗначение) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
    	Объект.ОС.Очистить();
		
		Объект.ВидДоговораПоТоварнымОперациям = ВыбранноеЗначение;
		ВидДоговораПоТоварнымОперациямПриИзменении(Элементы.ВидДоговораПоТоварнымОперациям);
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПервоначальныйДоговорОбработкаВыбора(Результат, ПараметрыВопроса) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ПараметрыВопроса.Режим = "валюта" Тогда
			ОткрытьФормуЦеныИВалюта(ЭтаФорма);
		Иначе 
			Объект.ДополнительныеПараметры.Очистить();
			Объект.Товары.Очистить();
			Объект.Услуги.Очистить();
			Объект.ОС.Очистить();
					
			СообщениеНаКлиент = Неопределено;
	        ЗаполнитьПоОсновномуСоглашению(ПараметрыВопроса.ВыбранноеЗначение, Истина, СообщениеНаКлиент);
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.дог_ВидыОперацийДоговор.ДополнительноеСоглашение") и Не СообщениеНаКлиент = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеНаКлиент);
			КонецЕсли;
			
			Объект.ПервоначальныйДоговор = ПараметрыВопроса.ВыбранноеЗначение;
			
		КонецЕсли;
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакртияВопросаЗаполнить(Результат, ПараметрыВопроса) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ДополнительныеПараметры.Очистить();
        ЗаполнитьНаСервере();
    КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакртияВопросаЗаполнитьОбязательными(Результат, ПараметрыВопроса) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ДополнительныеПараметры.Очистить();
        ЗаполнитьОбязательнымиНаСервере();
    КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ВидОперацииЗаявкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//Если Объект.ВидОбязательства = ПредопределенноеЗначение("Перечисление.дог_ВидыОбязательствПоДоговору.Входящее") Тогда
	//	//ОграничениеТипа = Новый ОписаниеТипов(ТипЗнч(ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийПланируемоеПоступлениеДС.ПустаяСсылка")));
	//	Массив = Новый Массив;
	//	Массив.Добавить(ТипЗнч(ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийПланируемоеПоступлениеДС.ПустаяСсылка")));
	//	ОграничениеТипа = Новый ОписаниеТипов(Массив, ,);
	//	
	//Иначе
	//	Массив = Новый Массив;
	//	Массив.Добавить(ТипЗнч(ПредопределенноеЗначение("Перечисление.дог_ВидыДоговоровПоТоварнымОперациям.ПустаяСсылка")));
	//	ОграничениеТипа = Новый ОписаниеТипов(Массив, ,);
	//КонецЕсли;
		
	//Элементы.ВидОперацииЗаявки.ОграничениеТипа = ОграничениеТипа;
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ВидОперацииЗаявкиСписокВыбора;
КонецПроцедуры


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.дог_ВидыОперацийДоговор.Договор") ИЛИ Объект.ВариантРегистрацииДополнительногоСоглашения<>ПредопределенноеЗначение("Перечисление.дог_ВариантыРегистрацииДополнительныхСоглашений.КорректировкаСуществующегоДоговораКонтрагента")) Тогда
		Объект.ДоговорКонтрагента = "№ "+Объект.ВходящийНомер+" от "+Формат(Объект.ДатаДоговора,"ДФ=dd.MM.yyyy; ДП='Пустая дата'"); //+++ Oleg SmartT. 2021-03-09	
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ДоговорХраненияРесурсовНаСервере()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	дог_ДополнительныеПараметрыДоговоров.ВидДоговора,
		|	дог_ДополнительныеПараметрыДоговоров.Ссылка КАК ДополнительныйПараметрДоговора,
		|	дог_ДополнительныеПараметрыДоговоров.Порядок
		|ИЗ
		|	ПланВидовХарактеристик.дог_ДополнительныеПараметрыДоговоров КАК дог_ДополнительныеПараметрыДоговоров
		|ГДЕ
		|	дог_ДополнительныеПараметрыДоговоров.ВидДоговора = &ВидДоговора";
	
	Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.ХранениеРесурсов);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда 
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			НоваяСтрока = Объект.ДополнительныеПараметры.Добавить();
			НоваяСтрока.ДополнительныйПараметр = Выборка.ДополнительныйПараметрДоговора;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ДоговорХраненияРесурсов(Команда)
	ДоговорХраненияРесурсовНаСервере();
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ФайлыИмяРеквизитаНачалоВыбораНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура ФайлыИмяРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущийКаталог = Элементы.ФайлыИмяРеквизита;
	Если СокрЛП(ТекущийКаталог) = "" Тогда 
		ТекущийКаталог = "\\SRV-FILE\Data\Primary Documentation\";
	Иначе 
		Файл = Новый Файл(ТекущийКаталог);
		ТекущийКаталог = Файл.Путь;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр =	"Файл данных (*.txt, *.pdf, *.jpg, *.jpeg, *.jpe)|*.txt; *.pdf; *.jpg; *.jpeg; *.jpe";
	ДиалогВыбораФайла.Расширение =	"txt, pdf, jpg, jpeg, jpe";
	
	ДиалогВыбораФайла.Заголовок						=	"Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогВыбораФайла.ИндексФильтра					=	0;
	ДиалогВыбораФайла.Каталог						=	ТекущийКаталог;
	ДиалогВыбораФайла.ПолноеИмяФайла				=	"";
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла	=	ИСТИНА;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		СтрокаТабличнойЧасти = Элементы.ЗакрепленныеФайлы.ТекущиеДанные;
		СтрокаТабличнойЧасти.ИмяРеквизита = ДиалогВыбораФайла.ПолноеИмяФайла;
		СтрокаТабличнойЧасти.Ф_Автор = глТекущийПользователь;
		СтрокаТабличнойЧасти.ДатаИзменения = ТекущаяДата();
	КонецЕсли;
	
	ФайлыИмяРеквизитаНачалоВыбораНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ФайлыИмяРеквизитаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ЗакрепленныеФайлы.ТекущиеДанные;
	СтрокаТабличнойЧасти.ДатаИзменения = ТекущаяДата();
КонецПроцедуры


&НаКлиенте
Процедура ФайлыИмяРеквизитаОткрытие(Элемент, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.ЗакрепленныеФайлы.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИмяФайлаСсылка) Тогда
		ФайлPdf = СокрЛП(СтрокаТабличнойЧасти.ИмяФайлаСсылка);
		ЗапуститьПриложение(ФайлPdf);
	Иначе Сообщить("Отсутствует имя файла!");
	КонецЕсли;
КонецПроцедуры




&НаКлиенте
Процедура СсылкаНаСЭД(Команда)
	ЗапуститьПриложение(СсылкаНаДоговорВСЭД);
КонецПроцедуры


&НаКлиенте
Процедура ТипСрокаОплатПриИзменении(Элемент)
	Если Объект.ТипСрокаОплат Тогда
		Элементы.СрокОплаты.Доступность = Ложь;
	Иначе 
		Элементы.СрокОплаты.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередаватьПоТрехстороннемуСоглашениюПриИзменении(Элемент)
	Если Объект.ПередаватьПоТрехстороннемуСоглашению Тогда
		Элементы.КонтрагентПоТрехстороннемуСоглашению.Видимость = Истина;
	Иначе
		Элементы.КонтрагентПоТрехстороннемуСоглашению.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры
