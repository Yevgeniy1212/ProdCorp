Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПорядокСписанияПартий; // (Общ)
Перем ПартионныйУчетБУ, ПартионныйУчетНУ;

Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой накладной,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
Функция ПечатьВозвратаОтПокупателя()
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";		
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;
	
	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаТаблицыСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ВозвратТоваровОтПокупателя.Номер,
	              |	ВозвратТоваровОтПокупателя.Дата,
	              |	ВозвратТоваровОтПокупателя.ДоговорКонтрагента КАК Основание,
	              |	ВозвратТоваровОтПокупателя.Контрагент КАК Контрагент,
	              |	ВозвратТоваровОтПокупателя.Организация,
	              |	ВозвратТоваровОтПокупателя.СтруктурноеПодразделение,
	              |	ВозвратТоваровОтПокупателя.СуммаДокумента,
	              |	ВозвратТоваровОтПокупателя.ВалютаДокумента,
	              |	ВозвратТоваровОтПокупателя.УчитыватьНДС,
	              |	ВозвратТоваровОтПокупателя.СуммаВключаетНДС,
	              |	ВозвратТоваровОтПокупателя.Склад,
	              |	ВозвратТоваровОтПокупателя.Доверенность,
	              |	ОтветственныеЛицаСклад.ФизическоеЛицо КАК МОЛ,
	              |	ВозвратТоваровОтПокупателя.ДоверенностьЧерезКого
	              |ИЗ
	              |	Документ.ур_ВозвратЗернаОтПокупателя КАК ВозвратТоваровОтПокупателя
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСклад
	              |		ПО ВозвратТоваровОтПокупателя.Склад = ОтветственныеЛицаСклад.СтруктурнаяЕдиница
	              |ГДЕ
	              |	ВозвратТоваровОтПокупателя.Ссылка = &ТекущийДокумент"; 
				  
				  
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВозвратТоваровОтПокупателяТовары.НомерСтроки КАК НомерСтрокиТаблицы,
	               |	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	               |	ВЫРАЗИТЬ(ВозвратТоваровОтПокупателяТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	               |	ВозвратТоваровОтПокупателяТовары.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	               |	ВозвратТоваровОтПокупателяТовары.Количество,
	               |	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	               |	ВозвратТоваровОтПокупателяТовары.Цена,
	               |	ВозвратТоваровОтПокупателяТовары.Сумма,
	               |	ВозвратТоваровОтПокупателяТовары.СуммаНДС,
	               |	0 КАК Метка
	               |ИЗ
	               |	Документ.ур_ВозвратЗернаОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	               |ГДЕ
	               |	ВозвратТоваровОтПокупателяТовары.Ссылка = &ТекущийДокумент
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВозвратТоваровОтПокупателяУслуги.НомерСтроки,
	               |	ВозвратТоваровОтПокупателяУслуги.Номенклатура,
	               |	ВЫРАЗИТЬ(ВозвратТоваровОтПокупателяУслуги.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	               |	ВозвратТоваровОтПокупателяУслуги.Номенклатура."+ ТекстКодАртикул + " КАК Код,
	               |	ВозвратТоваровОтПокупателяУслуги.Количество,
	               |	0,
	               |	ВозвратТоваровОтПокупателяУслуги.Цена,
	               |	ВозвратТоваровОтПокупателяУслуги.Сумма,
	               |	ВозвратТоваровОтПокупателяУслуги.СуммаНДС,
	               |	2
	               |ИЗ
	               |	Документ.ур_ВозвратЗернаОтПокупателя.Услуги КАК ВозвратТоваровОтПокупателяУслуги
	               |ГДЕ
	               |	ВозвратТоваровОтПокупателяУслуги.Ссылка = &ТекущийДокумент
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Метка,
	               |	НомерСтрокиТаблицы";

	ЗапросТовары = Запрос.Выполнить();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровОтПокупателя_Накладная";
	
	Макет = ПолучитьМакет("Накладная");

		
	// Выводим шапку накладной
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Возврат от покупателя", глСписокПрефиксовУзлов);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = СокрЛП(ПредставлениеКонтрагента);
	ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = СокрЛП(ПредставлениеОрганизации);
	ОбластьМакета.Параметры.Получатель = СтруктурнаяЕдиницаОрганизация;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(Шапка.Доверенность) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Доверенность");
		ДанныеДляДоверенности = СокрЛП(Шапка.Доверенность);
		Если ЗначениеЗаполнено(Шапка.ДоверенностьЧерезКого) Тогда
			ДанныеДляДоверенности = ДанныеДляДоверенности + " выданной, "  + СокрЛП(Шапка.ДоверенностьЧерезКого);
		КонецЕсли;			
		ОбластьМакета.Параметры.Доверенность = ДанныеДляДоверенности;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Шапка.Основание) Тогда 
		ОбластьМакета = Макет.ПолучитьОбласть("Основание");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ОбластьШапки = 	Макет.ПолучитьОбласть(ОбластьШапки);
	
	Если ВыводитьКоды Тогда
		ОбластьШапки.Параметры.Колонка    = Колонка;			
	КонецЕсли;    
	
	ТабДокумент.Вывести(ОбластьШапки);
	
	ОбластьСтроки = Макет.ПолучитьОбласть(ОбластьСтроки);
	
	
	НомПП    = 0;
	Сумма    = 0;
	СуммаНДС = 0;
	СуммаНП  = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	
	ВыборкаСтрокТовары = ЗапросТовары.Выбрать();
	ВсегоНаименований = ВыборкаСтрокТовары.Количество();
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		ОбластьСтроки.Параметры.Заполнить(ВыборкаСтрокТовары);
		
		НомПП = НомПП + 1;
		ОбластьСтроки.Параметры.НомерСтроки = НомПП;
		
		ОбластьСтроки.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар);
		
		Если ВыводитьКоды Тогда
			ОбластьСтроки.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;				
		КонецЕсли;    
		
		ТабДокумент.Вывести(ОбластьСтроки);
		
		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
		
	КонецЦикла;
	
	// Вывести Итого
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	
	ОбластьИтого.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьИтого);
	
	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьИтогоНДС = Макет.ПолучитьОбласть("ИтогоНДС");
		
		ОбластьИтогоНДС.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ОбластьИтогоНДС.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Товары.Итог("СуммаНДС")+Услуги.Итог("СуммаНДС"));
		
		ТабДокумент.Вывести(ОбластьИтогоНДС);
		Если НЕ Шапка.СуммаВключаетНДС ТОгда
			ОбластьИтогоСНДС = Макет.ПолучитьОбласть("ИтогоСНДС");
			ОбластьИтогоСНДС.Параметры.ВсегоСНДС = Сумма+СуммаНДС;
			ТабДокумент.Вывести(ОбластьИтогоСНДС);
		КонецЕсли;
		
	КонецЕсли;
	
	// Вывести Сумму прописью
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований " + ВсегоНаименований
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	
	// заполняем МОЛ
	Если ЗначениеЗаполнено(Шапка.Склад) Тогда
		ДанныеМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Организация, Шапка.МОЛ, Дата);
		ОбластьМакета.Параметры.ПолучилПредставление = ДанныеМОЛ.Представление;
	КонецЕсли;	
	
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
		
КонецФункции // ПечатьВозвратаОтПокупателя()
	
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Накладная" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьВозвратаОтПокупателя();
		
	КонецЕсли;
		
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));
		
КонецПроцедуры // Печать
	
#КонецЕсли

// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента)
	
	Если ЗаполнятьБУ = Истина Тогда
		Если ИмяТабЧасти <> "Услуги" Тогда
			СтрокаТЧ.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
        КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходовБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			// Счет доходов и его аналитика
			СтрокаТЧ.СчетДоходовБУ  = СчетаУчета.СчетДоходовПриВозвратеБУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоДоходовПриВозвратеБУ","СчетДоходовБУ", "СубконтоДоходовБУ");
			
		КонецЕсли; 	
			
		Если ИмяТабЧасти <> "Услуги" Тогда
			СтрокаТЧ.СчетСписанияСебестоимостиБУ = СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "СубконтоСписанияСебестоимостиБУ");			
		КонецЕсли;
		
		СтрокаТЧ.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПоРеализации;
		
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		
		Если ИмяТабЧасти<>"Услуги" Тогда
			СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка();
		КонецЕсли;
		
		СтрокаТЧ.СчетДоходовБУ  = ПланыСчетов.Типовой.ПустаяСсылка();
		Для СчетчикЦикла = 1 По 3 Цикл
			СтрокаТЧ["СубконтоДоходовБУ" + СчетчикЦикла] = Неопределено;
		КонецЦикла; 			
		СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Типовой.ПустаяСсылка();
		
		Если ИмяТабЧасти<>"Услуги" Тогда
			СтрокаТЧ.СчетСписанияСебестоимостиБУ = ПланыСчетов.Типовой.ПустаяСсылка();
			Для СчетчикЦикла = 1 По 3 Цикл
				СтрокаТЧ["СубконтоСписанияСебестоимостиБУ" + СчетчикЦикла] = Неопределено;
			КонецЦикла; 				
		КонецЕсли;			
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаБУ

// Заполняет счета НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ, МетаданныеДокумента)
	
	Если ЗаполнятьНУ  = Истина Тогда
		Если ИмяТабЧасти<>"Услуги" Тогда
			СтрокаТЧ.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;		
		КонецЕсли;
		
		СтрокаТЧ.СчетДоходовНУ  = СчетаУчета.СчетДоходовПриВозвратеНУ;
		ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ,СчетаУчета, "СубконтоДоходовПриВозвратеНУ", "СчетДоходовНУ", "СубконтоДоходовНУ");
		
		Если ИмяТабЧасти<>"Услуги" Тогда
			СтрокаТЧ.СчетСписанияСебестоимостиНУ = СчетаУчета.СчетСебестоимостиПриРеализацииНУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "СубконтоСписанияСебестоимостиНУ");
		КонецЕсли;
		
	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		Если ИмяТабЧасти<>"Услуги" Тогда
			СтрокаТЧ.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходовНУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетДоходовНУ  		= ПланыСчетов.Налоговый.ПустаяСсылка();			
			Для СчетчикЦикла = 1 По 3 Цикл
				СтрокаТЧ["СубконтоДоходовНУ" + СчетчикЦикла] = Неопределено;
			КонецЦикла; 			
		КонецЕсли;
		Если ИмяТабЧасти<>"Услуги" Тогда
			СтрокаТЧ.СчетСписанияСебестоимостиНУ 		= ПланыСчетов.Налоговый.ПустаяСсылка();
			Для СчетчикЦикла = 1 По 3 Цикл
				СтрокаТЧ["СубконтоСписанияСебестоимостиНУ" + СчетчикЦикла] = Неопределено;
			КонецЦикла; 			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры // ЗаполнитьСчетаНУ

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Накладная","Возврат от покупателя");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти) Экспорт
	
	ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");

	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидРеализацииТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекущийПользователь);
	ОбработкаТабличныхЧастей.ЗаполнитьАкцизВидРеализацииТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекущийПользователь);

КонецПроцедуры	

// Процедура выполняет заполнение табличной части Товары по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование) Экспорт
	
		Организация 		= ДокументОснование.Организация;
		Контрагент  		= ДокументОснование.Контрагент;
		ДоговорКонтрагента  = ДокументОснование.ДоговорКонтрагента;
		Склад 				= ДокументОснование.Склад;
		ТипОперации = ДокументОснование.ТипОперации;
		
		ДокументОснование = ДокументОснование;
		
		ЭтотОбъект.Товары.Загрузить(ДокументОснование.Товары.Выгрузить());
	
КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Процедура выполняет заполнение табличной части Услуги по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьУслугиПоОснованию(ДокументОснование) Экспорт
	
	ОснованиеРеализацияТоваров = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	ДокументОснованиеИмя       = ДокументОснование.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование",  ДокументОснование);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",             ДокументОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.ВалютаДокумента,";
	Если ОснованиеРеализацияТоваров Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
		|		Док.Ссылка.КурсВзаиморасчетов
		|	ИНАЧЕ
		|		1
		|	КОНЕЦ КАК КурсДокумента,
		|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
		|		Док.Ссылка.КратностьВзаиморасчетов
		|	ИНАЧЕ
		|		1
		|	КОНЕЦ КАК КратностьДокумента,";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	1 КАК КратностьДокумента,
		|	1 КАК КурсДокумента,";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	Док.Ссылка.УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС,
	|	Док.Номенклатура,
	|	Док.Содержание,
	|	Док.Количество,
	|	Док.СтавкаНДС,
	|	Док.Сумма,
	|	Док.СуммаНДС,
	|	Док.Цена,
	//|	Док.СчетДоходовБУ,
	|	Док.СчетДоходовНУ,
	|	Док.СчетУчетаНДСПоРеализации,	
	|	Док.СубконтоДоходовБУ1,
	|	Док.СубконтоДоходовБУ2,
	|	Док.СубконтоДоходовБУ3,
	|	Док.СубконтоДоходовНУ1,
	|	Док.СубконтоДоходовНУ2,
	|	Док.СубконтоДоходовНУ3";
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + ".Услуги КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование и (Док.Номенклатура.Услуга = Истина)";
	РезультатЗапроса = Запрос.Выполнить();
	
	Услуги.Загрузить(РезультатЗапроса.Выгрузить());
	
	Для каждого СтрокаТабличнойЧасти Из Услуги Цикл
		ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти);	
		СчетаУчета     = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура);
		СтрокаТабличнойЧасти.СчетДоходовБУ  = СчетаУчета.СчетДоходовПриВозвратеБУ;
		СтрокаТабличнойЧасти.СчетДоходовНУ  = СчетаУчета.СчетДоходовПриВозвратеНУ;
		
		// заменяем тип субконто если он отличается иначе оставляем прежний
		Для Счетчик = 1 по 3 Цикл			
			Если СтрокаТабличнойЧасти.СчетДоходовБУ.ВидыСубконто.Количество() >= Счетчик Тогда
				СтрокаТабличнойЧасти["СубконтоДоходовБУ" + Счетчик]= СчетаУчета["СубконтоДоходовПриВозвратеБУ" + Счетчик];						
			КонецЕсли;	
		КонецЦикла;				
		
		Для Счетчик = 1 по 3 Цикл			
			Если СтрокаТабличнойЧасти.СчетДоходовНУ.ВидыСубконто.Количество() >= Счетчик Тогда
				СтрокаТабличнойЧасти["СубконтоДоходовНУ" + Счетчик]= СчетаУчета["СубконтоДоходовПриВозвратеНУ" + Счетчик];						
			КонецЕсли;	
		КонецЦикла;	
		
		ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовПриВозвратеБУ","СчетДоходовБУ", "СубконтоДоходовБУ");
		ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовПриВозвратеНУ","СчетДоходовНУ", "СубконтоДоходовНУ");
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьУслугиПоОснованию()

// Заполняет счета БУ и НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	СчетаУчета     = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	МетаданныеДока = ЭтотОбъект.Метаданные();
	
	ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДока);
	ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ, МетаданныеДока);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части.
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	Для Каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ур_РеализацияЗерна") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Склад = Основание.Склад;
		
		ДокументОснование = Основание;
		
		Если Основание.Проведен Тогда
			
			// Скопируем табличные части из документа основания.
			ЗаполнитьТоварыПоОснованию(Основание);
			ЗаполнитьУслугиПоОснованию(Основание);
			
		КонецЕсли;
		
		СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		
		СчетУчетаРасчетовСКонтрагентом = Основание.СчетУчетаРасчетовСКонтрагентом;
		СчетУчетаРасчетовПоАвансам     = Основание.СчетУчетаРасчетовПоАвансам;
		СчетУчетаРасчетовПоВозвратам   = СчетаУчета.СчетВозвратовПокупателя;		
		
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	
	ТаблицаТоваров.Колонки.Добавить("Регистратор");
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("ДоговорПоставщика");
	ТаблицаТоваров.Колонки.Добавить("Склад");
	ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
		
	ТаблицаТоваров.Колонки.Добавить("КоэффОплаты");
		
	ТаблицаТоваров.ЗаполнитьЗначения(1,      "КоэффОплаты");
		
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,                                 "Регистратор");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,        "Организация");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,              "Склад");
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаТоваров Цикл
		Если (СтрокаТаблицы.Коэффициент<>0) Тогда
			СтрокаТаблицы.КоличествоДок = СтрокаТаблицы.КоличествоДок*СтрокаТаблицы.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаТоваров;
	
КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
								  ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	//ПодготовитьТаблицуУслугРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	//ПодготовитьТаблицуУслугУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуУслуг()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента, Контрагент, КратностьВзаиморасчетов");
	
	Если Товары.Количество()>0 Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда
		СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");
	КонецЕсли;
		
	СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
	СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента", "Не заполнено значение реквизита ""Договор""!");
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	ОбщегоНазначения.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Товары";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество"); //, ДокументПартии
	СтруктураОбязательныхПолей.Вставить("СчетУчетаБУ");
		
	СтруктураОбязательныхПолей.Вставить("СчетСписанияСебестоимостиБУ");
	СтруктураОбязательныхПолей.Вставить("СчетДоходовБУ");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСПоРеализации");
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
		СтруктураОбязательныхПолей.Вставить("НДСВидОперацииРеализации");
	КонецЕсли;
				
		
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда		
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ");
		СтруктураОбязательныхПолей.Вставить("СчетДоходовНУ");		
		СтруктураОбязательныхПолей.Вставить("СчетСписанияСебестоимостиНУ");				
	КонецЕсли;	
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	//проверка по строчно на обязательность заполнения данных по акцизу
	ПроверитьТабЧатьТоварыПоСтрочно(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
		
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма, Содержание");
	СтруктураОбязательныхПолей.Вставить("СчетДоходовБУ");

	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
		СтруктураОбязательныхПолей.Вставить("НДСВидОперацииРеализации");
	КонецЕсли;
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда				
		СтруктураОбязательныхПолей.Вставить("СчетДоходовНУ");		
	КонецЕсли;	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	Для каждого СтрокаТЧ Из ТаблицаПоУслугам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Услуги"": ";

		Если УчитыватьНДС 
			И НЕ (УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС) = 0) Тогда

			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДСПоРеализации) Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета НДС по реализации""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

//Проверяем правильность заполнения реквизитов зерновой расписки
Процедура ПроверитьЗаполнениеЗерновыхРасписок(ТаблицаПоЗерновымРаспискам, Отказ, Заголовок)
	СтрокаНачалаСообщенияОбОшибке = "";
	Для каждого СтрокаЗР ИЗ ТаблицаПоЗерновымРаспискам Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаЗР.НомерСтроки) +
		""" Зерновая расписка """;
		
		если Не ЗначениеЗаполнено(СтрокаЗР.ВидРесурса) Тогда
			
			СтрокаСообщения = "Не заполнено значение реквизита вид ресурса !";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаЗР.ГодУрожая) Тогда
			
			СтрокаСообщения = "Не заполнено значение реквизита Год урожая !";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаЗР.Культура) Тогда
			
			СтрокаСообщения = "Не заполнено значение реквизита Вид культуры !";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаЗР.Класс) Тогда
			
			СтрокаСообщения = "Не заполнено значение реквизита класс культуры !";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверки,необходимые для корректного отражения акциза
//
Процедура ПроверитьТабЧатьТоварыПоСтрочно(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Товары"": ";
		
		Если СтруктураШапкиДокумента.УчитыватьАкциз Тогда
			Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура.ВидПодакцизногоТМЗ) И НЕ ЗначениеЗаполнено(СтрокаТЧ.СтавкаАкциза) Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Ставка акциза""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура.ВидПодакцизногоТМЗ) И ЗначениеЗаполнено(СтрокаТЧ.СтавкаАкциза) Тогда
				СтрокаСообщения = "Необходимо очистить ставку акциза или указать ""Вид подакцизного товара"" у номенклатуры!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не Отказ Тогда				
				Если ЗначениеЗаполнено(СтрокаТЧ.СтавкаАкциза)  И Не ЗначениеЗаполнено(СтрокаТЧ.АкцизВидОперацииРеализации) Тогда			
					СтрокаСообщения = "Не заполнено значение реквизита ""Акциз вид операции реализации""!";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);				
				КонецЕсли;  
				
				Если ЗначениеЗаполнено(СтрокаТЧ.СтавкаАкциза) И Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаАкцизаПоРеализации) Тогда			
					СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета акциза по реализации""!";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);				
				КонецЕсли;				
			КонецЕсли; 			
		КонецЕсли;				
	КонецЦикла;         	
		
КонецПроцедуры // ПроверитьТабЧатьТоварыПоСтрочно()

// На основании указанного в строке документа реализации
// подбираются партии, по которым будет отражать возврат.
// Сформированная таблица партий возвращается.
//
Функция СформироватьТаблицуВозвращенныхПартий(СчетУчета, Номенклатура, ЗерноваяРасписка, ДокументОтгрузки, ВозвратКоличество, Учет, Отказ, Заголовок)
	
	ТаблицаВозвращенныхПартий = Новый ТаблицаЗначений;
	ТаблицаВозвращенныхПартий.Колонки.Добавить("Партия");
	ТаблицаВозвращенныхПартий.Колонки.Добавить("Количество");
	ТаблицаВозвращенныхПартий.Колонки.Добавить("СуммаСписания");
	
	МассивВидовСубконто = Новый Массив;
	МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор",  ДокументОтгрузки);
	Запрос.УстановитьПараметр("СчетКт",       СчетУчета);
	Запрос.УстановитьПараметр("Товар",        Номенклатура);
	Запрос.УстановитьПараметр("ЗерноваяРасписка",        ЗерноваяРасписка);
	
	Если УправлениеЗапасами.ВедетсяПартионныйУчетДляСчета(СчетУчета) Тогда
		
		МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии);
		Запрос.УстановитьПараметр("ВидыСубконто", МассивВидовСубконто);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ОборотыДтКт.СубконтоКт2 КАК Партия,
		|	ОборотыДтКт.СуммаОборот КАК Сумма,
		|	ОборотыДтКт.КоличествоОборотКт КАК Количество
		|ИЗ
		|	РегистрБухгалтерии.Типовой.ОборотыДтКт(, , Регистратор, , , СчетКт = &СчетКт, &ВидыСубконто, СубконтоКт1 = &Товар И СубконтоКт2 = &ЗерноваяРасписка) КАК ОборотыДтКт
		|
		|ГДЕ
		|	ОборотыДтКт.Регистратор = &Регистратор И
		|(ОборотыДтКт.КоличествоОборотКт >= 0)
		|";
		
		СпособОценки = УправлениеЗапасами.ПолучитьСтратегиюСписанияСчета(СчетУчета);
		Если СпособОценки = Перечисления.СпособыОценки.ЛИФО ТОгда
			Запрос.Текст = Запрос.Текст+"
			|УПОРЯДОЧИТЬ ПО
			|	ОборотыДтКт.СубконтоКт2.Дата УБЫВ";
		Иначе
			Запрос.Текст = Запрос.Текст+"
			|УПОРЯДОЧИТЬ ПО
			|	ОборотыДтКт.СубконтоКт2.Дата ВОЗР";
		КонецЕсли;
		
	Иначе
		
		Запрос.УстановитьПараметр("ВидыСубконто", МассивВидовСубконто);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	NULL КАК Партия,
		|	ОборотыДтКт.СуммаОборот КАК Сумма,
		|	ОборотыДтКт.КоличествоОборотКт КАК Количество
		|ИЗ
		|	РегистрБухгалтерии.Типовой.ОборотыДтКт(, , Регистратор, , , СчетКт = &СчетКт, &ВидыСубконто, СубконтоКт1 = &Товар) КАК ОборотыДтКт
		|
		|ГДЕ
		|	ОборотыДтКт.Регистратор = &Регистратор И
		|	(ОборотыДтКт.КоличествоОборотКт >= 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Количество УБЫВ";
		
	КонецЕсли;
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	ТаблицаДанных.Свернуть("Партия","Сумма,Количество");
	
	КоличествоНеПодобраноПартии = ВозвратКоличество;
	
	// Подберем партии, по которым отразим возврат
	Для каждого Партия Из ТаблицаДанных Цикл
		Сообщить("11");
		НоваяСтрока = ТаблицаВозвращенныхПартий.Добавить();
		//НоваяСтрока.Партия = Партия.Партия;
		НоваяСтрока.Партия = ЗерноваяРасписка;
		
		Если КоличествоНеПодобраноПартии > Партия.Количество Тогда
			
			НоваяСтрока.СуммаСписания = Партия.Сумма;
			НоваяСтрока.Количество    = Партия.Количество;
			КоличествоНеПодобраноПартии = КоличествоНеПодобраноПартии - Партия.Количество;
			
		Иначе
			
			НоваяСтрока.СуммаСписания = Окр(Партия.Сумма * (КоличествоНеПодобраноПартии / Партия.Количество), 2);
			НоваяСтрока.Количество    = КоличествоНеПодобраноПартии;
			КоличествоНеПодобраноПартии = 0;
			
		КонецЕсли;
		
		// Если подоброны партии для всего объема товара, то выходим из цикла
		Если КоличествоНеПодобраноПартии = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если в документе указан документ реалазации по которому было отгружено больше,
	// чем возвращается, то эту разницу отнесем на пустую партию.
	Если КоличествоНеПодобраноПартии > 0 Тогда
		
		СообщенияОбОшибке = Учет + ". учет. Документом " + СокрЛП(ДокументОтгрузки) + " было реализовано " + Номенклатура + " на " + КоличествоНеПодобраноПартии + " ед. меньше, чем возвращается.";
		ОбщегоНазначения.ОшибкаПриПроведении(СообщенияОбОшибке, Отказ, Заголовок);
		
	КонецЕсли;
	
	ТаблицаВозвращенныхПартий.Колонки.Добавить("СчетУчетаБУ");
	ТаблицаВозвращенныхПартий.ЗаполнитьЗначения(СчетУчета, "СчетУчетаБУ");
		
	Возврат ТаблицаВозвращенныхПартий;
	
КонецФункции // СформироватьТаблицуВозвращенныхПартий()

Функция СформироватьТаблицуВозвращенныхПартийБезУказанияПартии(СчетУчета, Номенклатура, ЗерноваяРасписка, ДокументПартия, ВозвратКоличество, ВозвратСумма, Учет, Отказ, Заголовок)

	ТаблицаВозвращенныхПартий = Новый ТаблицаЗначений;
	ТаблицаВозвращенныхПартий.Колонки.Добавить("Партия");
	ТаблицаВозвращенныхПартий.Колонки.Добавить("Количество");
	ТаблицаВозвращенныхПартий.Колонки.Добавить("СуммаСписания");
	
	// Добавляется единственная строка с данными партии.
	Строка = ТаблицаВозвращенныхПартий.Добавить();
	
	Строка.Партия        = ЗерноваяРасписка;
	Строка.Количество    = ВозвратКоличество;
	Строка.СуммаСписания = ВозвратСумма;

	ТаблицаВозвращенныхПартий.Колонки.Добавить("СчетУчетаБУ");
	ТаблицаВозвращенныхПартий.ЗаполнитьЗначения(СчетУчета, "СчетУчетаБУ");
		
	Возврат ТаблицаВозвращенныхПартий;
	
КонецФункции // СформироватьТаблицуВозвращенныхПартийБезУказанияПартии()

// На основании указанного в строке документа реализации
// подбираются партии, по которым будет отражать возврат.
// Сформированная таблица партий возвращается.
//
Процедура ПроверитьКоличествВозвратаПоРеализацииНУ(СчетУчета,ВидУчета, Номенклатура, ДокументОтгрузки, ВозвратКоличество, Учет, Отказ, Заголовок, ВедениеУчетаВременныхРазницБалансовымМетодом)
	
	Если НЕ ВедениеУчетаВременныхРазницБалансовымМетодом Тогда 
		Возврат
	КонецЕсли;
	
	МассивВидовСубконто = Новый Массив;
	МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	
	//определим ВидУчета по строке
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор",  ДокументОтгрузки);
	Запрос.УстановитьПараметр("СчетКт",       СчетУчета);
	Запрос.УстановитьПараметр("Товар",        Номенклатура);
	Запрос.УстановитьПараметр("ВидУчета",     ВидУчета);
	Запрос.УстановитьПараметр("ВидыСубконто", МассивВидовСубконто);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОборотыДтКт.СуммаОборот КАК Сумма,
	               |	ОборотыДтКт.КоличествоОборотКт КАК Количество
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.ОборотыДтКт(
	               |			,
	               |			,
	               |			Регистратор,
	               |			,
	               |			,
	               |			СчетКт = &СчетКт,
	               |			&ВидыСубконто,
	               |			СубконтоКт1 = &Товар
	               |				И ВидУчетаКт = &ВидУчета) КАК ОборотыДтКт
	               |ГДЕ
	               |	ОборотыДтКт.Регистратор = &Регистратор
	               |	И ОборотыДтКт.КоличествоОборотКт >= 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Количество УБЫВ";	
	
	Результат = Запрос.Выполнить();
	
	КоличествоНеПодобраноПартии = ВозвратКоличество;
	
	Если Не Результат.Пустой() Тогда		
		
		ТаблицаДанных = Результат.Выгрузить();
		КоличествоПоРеализации      = ТаблицаДанных[0].Количество;
		
		Если КоличествоНеПодобраноПартии > КоличествоПоРеализации Тогда		
			КоличествоНеПодобраноПартии = КоличествоНеПодобраноПартии - КоличествоПоРеализации;		
		Иначе 		                 
			КоличествоНеПодобраноПартии = 0;		
		КонецЕсли;
		
	КонецЕсли;

	Если КоличествоНеПодобраноПартии > 0 Тогда
		
		СообщенияОбОшибке = Учет + ". учет. Документом " + СокрЛП(ДокументОтгрузки) + " было реализовано " + Номенклатура +  " вид учета - " + ВидУчета + " на " + КоличествоНеПодобраноПартии + " ед. меньше, чем возвращается.";
		ОбщегоНазначения.ОшибкаПриПроведении(СообщенияОбОшибке, Отказ, Заголовок);
		
	КонецЕсли;
			
КонецПроцедуры // СформироватьТаблицуВозвращенныхПартий()

// Формируются проводки по отражаению возврата товаров
// 
Процедура ВозвратПартийТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	
	ПроводкиБУ = Движения.Типовой;
	ПроводкиНУ = Движения.Налоговый;
	
	ДатаДока = Дата;
	СкладПроводок = СтруктураШапкиДокумента.Склад;
	
	ТаблицаПоТоварам.Колонки.Добавить("СписанныеПартииБУ");
	
	СтратегииСписания = Новый Соответствие;
	
	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		ТаблицаВозвращенныхПартий = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокументОснование) И 
									  Не ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный"),
									  СформироватьТаблицуВозвращенныхПартий(СтрокаТЧ.СчетУчетаБУ,
																			СтрокаТЧ.Номенклатура,
																			СтрокаТЧ.ЗерноваяРасписка,
																			СтруктураШапкиДокумента.ДокументОснование,
																			СтрокаТЧ.Количество,
																			"Бух", Отказ, Заголовок),
		СформироватьТаблицуВозвращенныхПартийБезУказанияПартии(СтрокаТЧ.СчетУчетаБУ,
																							 СтрокаТЧ.Номенклатура,
																							 СтрокаТЧ.ЗерноваяРасписка,
																							 Ссылка,
																							 СтрокаТЧ.Количество,
																							 СтрокаТЧ.Себестоимость,
																							 "Бух", Отказ, Заголовок));
		
		СтрокаТЧ.СписанныеПартииБУ = ТаблицаВозвращенныхПартий;
		
		Если Не Отказ Тогда
			// списание по бухгалтерскому учету
			Для каждого Партия Из ТаблицаВозвращенныхПартий Цикл
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = "Возврат ТМЗ от покупателя";
				Проводка.Сумма        = - Партия.СуммаСписания;
				
				Проводка.СчетДт       = СтрокаТЧ.СчетСписанияСебестоимостиБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоСписанияСебестоимостиБУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТЧ.СубконтоСписанияСебестоимостиБУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТЧ.СубконтоСписанияСебестоимостиБУ3);
				
				
				Проводка.СчетКт       = СтрокаТЧ.СчетУчетаБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, "Номенклатура", СтрокаТЧ.Номенклатура);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, "Склады",       СкладПроводок);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, "Партии",       СтрокаТЧ.ЗерноваяРасписка);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.КорСтруктурноеПодразделение);

				// если нет соответствия стратегии выбранному счету, добавим значение
				Если СтратегииСписания.Получить(СтрокаТЧ.СчетУчетаБУ) = Неопределено Тогда
					СтратегииСписания.Вставить(СтрокаТЧ.СчетУчетаБУ,УправлениеЗапасами.ВедетсяПартионныйУчетДляСчета(СтрокаТЧ.СчетУчетаБУ));
				КонецЕсли;
				
				ВедетсяПартионныйУчетДляСчета = СтратегииСписания.Получить(СтрокаТЧ.СчетУчетаБУ);
				Если ВедетсяПартионныйУчетДляСчета Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Партии", Партия.Партия);
				КонецЕсли;
				
				Проводка.КоличествоКт = - Партия.Количество;
				
			КонецЦикла; // Для каждого Партия Из ТаблицаВозвращенныхПартий Цикл
			
			// списание по налоговому учету
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				
				ВидУчетаПоНоменклатуре  = ПроцедурыНалоговогоУчета.ОпределитьВидУчетаНУПоСтроке(СтруктураШапкиДокумента.ВидУчетаНУ,СтрокаТЧ.СчетСписанияСебестоимостиНУ, СтрокаТЧ.СубконтоСписанияСебестоимостиНУ1, СтрокаТЧ.СубконтоСписанияСебестоимостиНУ2, СтрокаТЧ.СубконтоСписанияСебестоимостиНУ3);
				
				Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокументОснование) И 
									  Не ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
									  
					 ПроверитьКоличествВозвратаПоРеализацииНУ(СтрокаТЧ.СчетУчетаНУ,
					 										ВидУчетаПоНоменклатуре,
															СтрокаТЧ.Номенклатура,
															СтруктураШапкиДокумента.ДокументОснование,
															СтрокаТЧ.Количество,
															"Нал", Отказ, Заголовок,
															СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом );
				КонецЕсли;
													
										
																			
				Если Не Отказ Тогда															
					Проводка = ПроводкиНУ.Добавить();
					
					Проводка.Период       = ДатаДока;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание   = "Возврат ТМЗ от покупателя";
					Проводка.Сумма        =  ТаблицаВозвращенныхПартий.Итог("СуммаСписания");
					
					Проводка.СчетКт       = СтрокаТЧ.СчетСписанияСебестоимостиНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТЧ.СубконтоСписанияСебестоимостиНУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТЧ.СубконтоСписанияСебестоимостиНУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТЧ.СубконтоСписанияСебестоимостиНУ3);
					
					Проводка.СчетДт       = СтрокаТЧ.СчетУчетаНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "Номенклатура", СтрокаТЧ.Номенклатура);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "Склады",       СкладПроводок);
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, ВидУчетаНУ);
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.КорСтруктурноеПодразделение);

					Проводка.КоличествоДт =  СтрокаТЧ.Количество;
			КонецЕсли;			
				
			КонецЕсли;	
			
		КонецЕсли; 
		
	КонецЦикла; // Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
//	
Конецпроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоЗерновымРаспискам, Отказ, Заголовок);
	
	
	// Выполнить движения по спецрегистрам подсистемы учета НДС
	ТаблицыДокумента = Новый Структура();
	ТаблицыДокумента.Вставить("ТаблицаПоТоварам",	ТаблицаПоТоварам);
	ТаблицыДокумента.Вставить("ТаблицаПоУслугам",	ТаблицаПоУслугам);    
	
	ДвиженияРегистровПодсистемыУчетаРесурсов(СтруктураШапкиДокумента, ТаблицаПоЗерновымРаспискам, Отказ, Заголовок);
	ДвиженияРегистровПодсистемыАкциз(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, Отказ, Заголовок);
	
	ПроводкиБУ    = Движения.Типовой;
	ПроводкиНУ    = Движения.Налоговый;
	
	// Опеределим задолженность контрагента на момент проведения документа
	ДатаДока 		= Дата;
	СкладПроводок 	= СтруктураШапкиДокумента.Склад;
	
	// Определение оплаченность товаров
	Если (ТаблицаПоТоварам.Количество() + ТаблицаПоУслугам.Количество())>0 Тогда
		
		// Приходование возвращенных товаров
		ВозвратПартийТоваров(СтруктураШапкиДокумента,ТаблицаПоТоварам,Отказ,Заголовок);
		
		//СтруктураТаблицыВыручки = Новый структура("Номенклатура, Партия, СчетУчетаНДСПоРеализации, СчетУчетаАкцизаПоРеализации,СчетУчетаБУ, СчетДоходовБУ,
		//			|СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, СчетУчетаНУ, СчетДоходовНУ,
		//			|СубконтоДоходовНУ1,СубконтоДоходовНУ2,СубконтоДоходовНУ3, СтавкаНДС, Количество, Сумма, СуммаВал, НДС, НДСВал, Акциз, АкцизВал, СуммаБезНДС, СуммаБезНДСВал,СуммаСписания");
		
	СтруктураТаблицыВыручки = Новый Структура("НомерСтроки, Номенклатура, Партия, ВидДвиженияЗерна, ЗерноваяРасписка, СчетУчетаНДСПоРеализации, СчетУчетаАкцизаПоРеализации, СчетУчетаБУ, СчетУчетаНУ, 
												|СчетДоходовБУ,СчетДоходовНУ, СубконтоДоходовБУ1,СубконтоДоходовБУ2,СубконтоДоходовБУ3,
												|СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3,
												|СтавкаНДС, СтавкаАкциза, Сумма, СуммаВал, НДС, НДСВал, Акциз,
												|АкцизВал, СуммаБезНДС, СуммаБезНДСВал,СуммаСписания, Количество,
												|СуммаКомиссионногоСбора,НДСКомиссионногоСбора");
		
		//Формируем таблицу выручки с нужной структурой и заполняем по таблице услуг
		ТаблицаВыручки = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоУслугам,СтруктураТаблицыВыручки,,Истина);
		
		// Для дальнейшей работы количество по услугам интереса не представляет.
		//ТаблицаВыручки.ЗаполнитьЗначения(0,    "Количество");
		
		//Дополним данными по таблице товаров с распределением по партиям
		//Развернем таблицу товаров по партиям для распределения выручки по БУ.
		
		ВыручкаПоТоварам = ТаблицаВыручки.Скопировать();
		ВыручкаПоТоварам.Очистить();
		
		СписокРаспределяемыхКолонок = Новый Структура("Количество, Сумма,СуммаВал,НДС,НДСВал, Акциз, АкцизВал, СуммаБезНДС,СуммаБезНДСВал");
		
		Для каждого СтрокаТаблицыТоваров Из ТаблицаПоТоварам Цикл 
			
			ТаблицаПартийБУ = СтрокаТаблицыТоваров.СписанныеПартииБУ;
			
			Для каждого Партия из ТаблицаПартийБУ Цикл
				
				СтрокаТаблицыВыручки = ВыручкаПоТоварам.Добавить();
				
				Для каждого Колонка из ВыручкаПоТоварам.Колонки Цикл
					
					Если СписокРаспределяемыхКолонок.Свойство(Колонка.Имя) тогда
						СтрокаТаблицыВыручки[Колонка.Имя]= Партия.Количество;
						
					ИначеЕсли Не(ТаблицаПартийБУ.Колонки.Найти(Колонка.Имя)=Неопределено) тогда
						СтрокаТаблицыВыручки[Колонка.Имя] = Партия[Колонка.Имя];
						
					ИначеЕсли Не(ТаблицаПоТоварам.Колонки.Найти(Колонка.Имя)=Неопределено) тогда
						СтрокаТаблицыВыручки[Колонка.Имя] = СтрокаТаблицыТоваров[Колонка.Имя];
						
					КонецЕсли;
					
				КонецЦикла; // Для каждого Колонка из ВыручкаПоТоварам.Колонки Цикл
				
			КонецЦикла; // Для каждого Партия из ТаблицаПартийБУ Цикл
			
		КонецЦикла; // Для каждого СтрокаТаблицыТоваров Из ТаблицаПоТоварам Цикл 
		
		//Распределим выручку по партиям
		
		ВыручкаПоТоварам = УправлениеВзаиморасчетами.СформироватьКорректирующиеЗаписи(ТаблицаПоТоварам,ВыручкаПоТоварам,СписокРаспределяемыхКолонок);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВыручкаПоТоварам,ТаблицаВыручки );
		
		//Фиксация сторно выручки и НДС по БУ (проводки)
		ВыручкаПоБУ = ТаблицаВыручки.Скопировать();
		ВыручкаПоБУ.Свернуть("СчетУчетаНДСПоРеализации, СчетУчетаАкцизаПореализации, СчетДоходовБУ, СубконтоДоходовБУ1,СубконтоДоходовБУ2,СубконтоДоходовБУ3, СтавкаНДС","Сумма, СуммаВал, СуммаБезНДС, СуммаБезНДСВал, НДС, НДСВал, Акциз, АкцизВал");
		
		Если не ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.РасчетыСКонтрагентами, СтруктураШапкиДокумента.Дата) Тогда
			ТаблицаОстатков = Новый ТаблицаЗначений;
		Иначе
			Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) ИЛИ СтруктураШапкиДокумента.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
				
				ТаблицаОстатков       = ПроцедурыБухгалтерскогоУчета.ПолучитьОстатокПоСчету(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.СтруктурноеПодразделение, МоментВремени(),СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом,СтруктураШапкиДокумента.ВалютаДокумента ,СтруктураШапкиДокумента.Контрагент, СтруктураШапкиДокумента.ДоговорКонтрагента,Неопределено,1);
				
			Иначе
				
				ТаблицаОстатков       = ПроцедурыБухгалтерскогоУчета.ПолучитьОстатокПоСчету(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.СтруктурноеПодразделение, МоментВремени(),СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом,СтруктураШапкиДокумента.ВалютаДокумента ,СтруктураШапкиДокумента.Контрагент, СтруктураШапкиДокумента.ДоговорКонтрагента,СтруктураШапкиДокумента.Сделка,1);
				
			КонецЕсли;
		КонецЕсли; 
		
		СуммаВозврата = 0;
		СуммаВозвратаВал = 0;
		СтруктураСчетовДт = Новый Структура("СчетДоходов, Субконто1Доходов,Субконто2Доходов,Субконто3Доходов,
		|СчетНДС, Субконто1НДС,Субконто2НДС,Субконто3НДС,
		|СчетАкциза, Субконто1Акциза,Субконто2Акциза,Субконто3Акциза,
		|СуммаВозвратаДоходов,СуммаВозвратаДоходовВал,СуммаВозвратаНДС,СуммаВозвратаНДСВал, СуммаВозвратаАкциза, СуммаВозвратаАкцизаВал");
		
		
		
		Для каждого СтрокаТаблицы Из ВыручкаПоБУ Цикл
			
			СтруктураСчетовДт.СуммаВозвратаДоходов 		= 0;
			СтруктураСчетовДт.СуммаВозвратаДоходовВал 	= 0;
			СтруктураСчетовДт.СуммаВозвратаНДС 			= 0;
			СтруктураСчетовДт.СуммаВозвратаНДСВал 		= 0;
			СтруктураСчетовДт.СуммаВозвратаАкциза 		= 0;
			СтруктураСчетовДт.СуммаВозвратаАкцизаВал 	= 0;
			
			//Выручка
			Если СтрокаТаблицы.Сумма = 0 Тогда
				продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаРасчетовПоВозвратам) ТОгда
				
				ПроводкиСИспользованиемСчетаВозвратов = Истина;
				
				СтруктураСчетовДт.СчетДоходов 		= СтруктураШапкиДокумента.СчетУчетаРасчетовПоВозвратам;
				СтруктураСчетовДт.Субконто1Доходов 	= СтруктураШапкиДокумента.Контрагент;
				СтруктураСчетовДт.Субконто2Доходов 	= СтруктураШапкиДокумента.ДоговорКонтрагента;
				СтруктураСчетовДт.Субконто3Доходов 	= СтруктураШапкиДокумента.Ссылка;
				СтруктураСчетовДт.СчетНДС 			= СтруктураШапкиДокумента.СчетУчетаРасчетовПоВозвратам;
				СтруктураСчетовДт.Субконто1НДС 		= СтруктураШапкиДокумента.Контрагент;
				СтруктураСчетовДт.Субконто2НДС 		= СтруктураШапкиДокумента.ДоговорКонтрагента;
				СтруктураСчетовДт.Субконто3НДС 		= СтруктураШапкиДокумента.Ссылка;
				СтруктураСчетовДт.СчетАкциза 		= СтруктураШапкиДокумента.СчетУчетаРасчетовПоВозвратам;
				СтруктураСчетовДт.Субконто1Акциза 	= СтруктураШапкиДокумента.Контрагент;
				СтруктураСчетовДт.Субконто2Акциза 	= СтруктураШапкиДокумента.ДоговорКонтрагента;
				СтруктураСчетовДт.Субконто3Акциза 	= СтруктураШапкиДокумента.Ссылка;
				
			Иначе
				
				ПроводкиСИспользованиемСчетаВозвратов = Ложь;
				
				СтруктураСчетовДт.СчетДоходов 		= СтрокаТаблицы.СчетДоходовБУ;
				СтруктураСчетовДт.Субконто1Доходов 	= СтрокаТаблицы.СубконтоДоходовБУ1;
				СтруктураСчетовДт.Субконто2Доходов 	= СтрокаТаблицы.СубконтоДоходовБУ2;
				СтруктураСчетовДт.Субконто3Доходов 	= СтрокаТаблицы.СубконтоДоходовБУ3;
				СтруктураСчетовДт.СчетНДС 			= СтрокаТаблицы.СчетУчетаНДСПоРеализации;
				СтруктураСчетовДт.Субконто1НДС 		= Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость;
				СтруктураСчетовДт.Субконто2НДС 		= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
				СтруктураСчетовДт.Субконто3НДС 		= "";
				СтруктураСчетовДт.СчетАкциза 		= СтрокаТаблицы.СчетУчетаАкцизаПоРеализации;
				СтруктураСчетовДт.Субконто1Акциза 	= Справочники.НалогиСборыОтчисления.Акциз;
				СтруктураСчетовДт.Субконто2Акциза 	= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
				СтруктураСчетовДт.Субконто3Акциза 	= "";
				
			КонецЕсли;										
			
			ОсталосьПогашать = СтрокаТаблицы.СуммаБезНДС;
			ОсталосьПогашатьВал = СтрокаТаблицы.СуммаБезНДСВал;
			// погашаем основную задолженность по реализации
			Для Каждого СтрокаОстатков Из ТаблицаОстатков Цикл
				
				Если ОсталосьПогашать = 0 тогда
					прервать;
				КонецЕсли;
				
				Если СтрокаОстатков.СуммаОстаток = 0 Тогда
					продолжить;
				КонецЕсли; 
				
				СуммаКПогашению = МИН(СтрокаОстатков.СуммаОстаток,ОсталосьПогашать);
				СтрокаОстатков.СуммаОстаток = СтрокаОстатков.СуммаОстаток-СуммаКПогашению;
				ОсталосьПогашать = ОсталосьПогашать-СуммаКпогашению;
				
				СуммаКПогашениюВал = МИН(СтрокаОстатков.ВалютнаяСуммаОстаток,ОсталосьПогашатьВал);
				СтрокаОстатков.ВалютнаяСуммаОстаток = СтрокаОстатков.ВалютнаяСуммаОстаток-СуммаКПогашениюВал;
				ОсталосьПогашатьВал = ОсталосьПогашатьВал-СуммаКпогашениюВал;
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = - СуммаКПогашению;
				Проводка.СчетКт = СтруктураСчетовДт.СчетДоходов;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,           СтруктураСчетовДт.Субконто1Доходов);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2,           СтруктураСчетовДт.Субконто2Доходов);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3,           СтруктураСчетовДт.Субконто3Доходов);
				
				Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ТипыОпераций",    СтруктураШапкиДокумента.ТипОперации);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				Если ПроводкиСИспользованиемСчетаВозвратов Тогда
					СтруктураСчетовДт.СуммаВозвратаДоходов = СтруктураСчетовДт.СуммаВозвратаДоходов + СуммаКПогашению;
				КонецЕсли;
				
				Если Проводка.СчетДт.Валютный Тогда
					
					//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = - СуммаКПогашениюВал;
					
					Если ПроводкиСИспользованиемСчетаВозвратов Тогда
						СтруктураСчетовДт.СуммаВозвратаДоходовВал = СтруктураСчетовДт.СуммаВозвратаДоходовВал + СуммаКПогашениюВал;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Проводка.СчетКт.Валютный Тогда
					
					//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = - СуммаКПогашениюВал;
					
				КонецЕсли;
				
				Проводка.Содержание = "Зачет сумм возврата: выручка";
				
			КонецЦикла;
			
			СтруктураСчетовДт.СуммаВозвратаДоходов = СтруктураСчетовДт.СуммаВозвратаДоходов + ОсталосьПогашать;
			СтруктураСчетовДт.СуммаВозвратаДоходовВал = СтруктураСчетовДт.СуммаВозвратаДоходовВал + ОсталосьПогашатьВал;
			
			// если после этого что-то осталось, делаем новую партию взаиморасчетов и закрываем ее счетом возврата
			Если СтруктураСчетовДт.СуммаВозвратаДоходов > 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = - СтруктураСчетовДт.СуммаВозвратаДоходов;
				
				Проводка.СчетКт = СтрокаТаблицы.СчетДоходовБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,           СтрокаТаблицы.СубконтоДоходовБУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2,           СтрокаТаблицы.СубконтоДоходовБУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3,           СтрокаТаблицы.СубконтоДоходовБУ3);
				
				Если НЕ ПроводкиСИспользованиемСчетаВозвратов Тогда
					
					Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					
				Иначе
					
					Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовПоВозвратам;
					
				КонецЕсли; 
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ТипыОпераций",    СтруктураШапкиДокумента.ТипОперации);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				Если Проводка.СчетДт.Валютный Тогда
					
					//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = -СтруктураСчетовДт.СуммаВозвратаДоходовВал;
					
				КонецЕсли;
				
				Если Проводка.СчетКт.Валютный Тогда
					
					//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = -СтруктураСчетовДт.СуммаВозвратаДоходовВал;
					
				КонецЕсли;
				
				Проводка.Содержание = "Возврат выручки от реализации";
				
			КонецЕсли;
			
			//НДС
			Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС > 0 Тогда
				ОсталосьПогашать = СтрокаТаблицы.НДС;
				ОсталосьПогашатьВал = СтрокаТаблицы.НДСВал;
				
				Для Каждого СтрокаОстатков Из ТаблицаОстатков Цикл
					
					Если ОсталосьПогашать = 0 тогда
						прервать;
					КонецЕсли;
					
					Если СтрокаОстатков.СуммаОстаток = 0 Тогда
						продолжить;
					КонецЕсли; 
					
					СуммаКПогашению = МИН(СтрокаОстатков.СуммаОстаток,ОсталосьПогашать);
					СтрокаОстатков.СуммаОстаток = СтрокаОстатков.СуммаОстаток-СуммаКПогашению;
					ОсталосьПогашать = ОсталосьПогашать-СуммаКпогашению;
					
					СуммаКПогашениюВал = МИН(СтрокаОстатков.ВалютнаяСуммаОстаток,ОсталосьПогашатьВал);
					СтрокаОстатков.ВалютнаяСуммаОстаток = СтрокаОстатков.ВалютнаяСуммаОстаток-СуммаКПогашениюВал;
					ОсталосьПогашатьВал = ОсталосьПогашатьВал-СуммаКпогашениюВал;
					
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период      = ДатаДока;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма       = - СуммаКПогашению;
					
					Проводка.СчетКт = СтруктураСчетовДт.СчетНДС;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,           СтруктураСчетовДт.Субконто1НДС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2,           СтруктураСчетовДт.Субконто2НДС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3,           СтруктураСчетовДт.Субконто3НДС);
					
					Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ТипыОпераций",    СтруктураШапкиДокумента.ТипОперации);
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.КорСтруктурноеПодразделение, СтруктураШапкиДокумента.КорСтруктурноеПодразделение);

					Если ПроводкиСИспользованиемСчетаВозвратов Тогда
						СтруктураСчетовДт.СуммаВозвратаНДС = СтруктураСчетовДт.СуммаВозвратаНДС + СуммаКПогашению;
					КонецЕсли;
					
					Если Проводка.СчетДт.Валютный Тогда
						
						//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
						Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаДт = - СуммаКПогашениюВал;
						
						Если ПроводкиСИспользованиемСчетаВозвратов Тогда
							СтруктураСчетовДт.СуммаВозвратаНДСВал = СтруктураСчетовДт.СуммаВозвратаНДСВал + СуммаКПогашениюВал;
						КонецЕсли;
						
					КонецЕсли;
					
					Если Проводка.СчетКт.Валютный Тогда
						
						//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = - СуммаКПогашениюВал;
						
					КонецЕсли;
					
					Проводка.Содержание = "Зачет сумм возврата: НДС";
					
				КонецЦикла;
				
				СтруктураСчетовДт.СуммаВозвратаНДС = СтруктураСчетовДт.СуммаВозвратаНДС + ОсталосьПогашать;
				СтруктураСчетовДт.СуммаВозвратаНДСВал = СтруктураСчетовДт.СуммаВозвратаНДСВал + ОсталосьПогашатьВал;
				
				Если СтруктураСчетовДт.СуммаВозвратаНДС>0 Тогда
					
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период      = ДатаДока;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма       = -СтруктураСчетовДт.СуммаВозвратаНДС;
					
					Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,        Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,        Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
					
					Если НЕ ПроводкиСИспользованиемСчетаВозвратов Тогда
						
						Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
						
					Иначе
						
						Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовПоВозвратам;
						
					КонецЕсли;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ТипыОпераций",    СтруктураШапкиДокумента.ТипОперации);
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.КорСтруктурноеПодразделение, СтруктураШапкиДокумента.КорСтруктурноеПодразделение);

					Если Проводка.СчетДт.Валютный Тогда
						
						//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
						Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаДт = -СтруктураСчетовДт.СуммаВозвратаНДСВал;
						
					КонецЕсли;
					
					Если Проводка.СчетКт.Валютный Тогда
						
						//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = -СтруктураСчетовДт.СуммаВозвратаНДСВал;
						
					КонецЕсли;
					
					Проводка.Содержание = "Возврат суммы НДС";
					
				КонецЕсли;
				
			КонецЕсли;
			
			//Акциз
			Если СтруктураШапкиДокумента.УчитыватьАкциз И СтрокаТаблицы.Акциз > 0 Тогда
				ОсталосьПогашать = СтрокаТаблицы.Акциз;
				ОсталосьПогашатьВал = СтрокаТаблицы.АкцизВал;
				
				Для Каждого СтрокаОстатков Из ТаблицаОстатков Цикл
					
					Если ОсталосьПогашать = 0 тогда
						прервать;
					КонецЕсли;
					
					Если СтрокаОстатков.СуммаОстаток = 0 Тогда
						продолжить;
					КонецЕсли; 
					
					СуммаКПогашению = МИН(СтрокаОстатков.СуммаОстаток,ОсталосьПогашать);
					СтрокаОстатков.СуммаОстаток = СтрокаОстатков.СуммаОстаток-СуммаКПогашению;
					ОсталосьПогашать = ОсталосьПогашать-СуммаКпогашению;
					
					СуммаКПогашениюВал = МИН(СтрокаОстатков.ВалютнаяСуммаОстаток,ОсталосьПогашатьВал);
					СтрокаОстатков.ВалютнаяСуммаОстаток = СтрокаОстатков.ВалютнаяСуммаОстаток-СуммаКПогашениюВал;
					ОсталосьПогашатьВал = ОсталосьПогашатьВал-СуммаКпогашениюВал;
					
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период      = ДатаДока;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма       = СуммаКПогашению;
					
					Проводка.СчетДт = СтруктураСчетовДт.СчетАкциза;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,           СтруктураСчетовДт.Субконто1Акциза);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2,           СтруктураСчетовДт.Субконто2Акциза);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3,           СтруктураСчетовДт.Субконто3Акциза);
					
					Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",    СтрокаОстатков.Субконто3);
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.КорСтруктурноеПодразделение, СтруктураШапкиДокумента.КорСтруктурноеПодразделение);
	    
					Если ПроводкиСИспользованиемСчетаВозвратов Тогда
						СтруктураСчетовДт.СуммаВозвратаАкциза = СтруктураСчетовДт.СуммаВозвратаАкциза + СуммаКПогашению;
					КонецЕсли;
					
					Если Проводка.СчетДт.Валютный Тогда
						
						//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
						Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаДт = СуммаКПогашениюВал;
						
						Если ПроводкиСИспользованиемСчетаВозвратов Тогда
							СтруктураСчетовДт.СуммаВозвратаАкцизаВал = СтруктураСчетовДт.СуммаВозвратаАкцизаВал + СуммаКПогашениюВал;
						КонецЕсли;
						
					КонецЕсли;
					
					Если Проводка.СчетКт.Валютный Тогда
						
						//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = СуммаКПогашениюВал;
						
					КонецЕсли;
					
					Проводка.Содержание = "Зачет сумм возврата: акциз";
					
				КонецЦикла;
				
				СтруктураСчетовДт.СуммаВозвратаАкциза = СтруктураСчетовДт.СуммаВозвратаАкциза + ОсталосьПогашать;
				СтруктураСчетовДт.СуммаВозвратаАкцизаВал = СтруктураСчетовДт.СуммаВозвратаАкцизаВал + ОсталосьПогашатьВал;
				
				Если СтруктураСчетовДт.СуммаВозвратаАкциза>0 Тогда
					
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период      = ДатаДока;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма       = СтруктураСчетовДт.СуммаВозвратаАкциза;
					
					Проводка.СчетДт = СтрокаТаблицы.СчетУчетаАкцизаПоРеализации;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,        Справочники.НалогиСборыОтчисления.Акциз);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,        Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
					
					Если НЕ ПроводкиСИспользованиемСчетаВозвратов Тогда
						
						Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
						
					Иначе
						
						Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаРасчетовПоВозвратам;
						
					КонецЕсли;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",    СтруктураШапкиДокумента.Ссылка);
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.КорСтруктурноеПодразделение, СтруктураШапкиДокумента.КорСтруктурноеПодразделение);

					Если Проводка.СчетДт.Валютный Тогда
						
						//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
						Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаДт = СтруктураСчетовДт.СуммаВозвратаАкцизаВал;
						
					КонецЕсли;
					
					Если Проводка.СчетКт.Валютный Тогда
						
						//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = СтруктураСчетовДт.СуммаВозвратаАкцизаВал;
						
					КонецЕсли;
					
					Проводка.Содержание = "Возврат суммы акциза";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; 
		
		СтратегииСписания = Новый Соответствие;
		
		//сформируем движения для регистра "Реализация ТМЗ"
		ТаблицаВыручкиРеализацияТМЗ = ТаблицаВыручки.Скопировать();
		ТаблицаВыручкиРеализацияТМЗ.Свернуть("СчетУчетаБУ, Номенклатура, Партия","Сумма, СуммаСписания, Количество, НДС, Акциз");
		Для Каждого СтрокаРеализации ИЗ ТаблицаВыручкиРеализацияТМЗ Цикл
			
			ДвижениеРеализации = Движения.РеализацияТМЗ.Добавить();
			
			ДвижениеРеализации.Период = ДатаДока;
			
			// записываем измерения
			ДвижениеРеализации.Организация 				= СтруктураШапкиДокумента.Организация;
			ДвижениеРеализации.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
			ДвижениеРеализации.Номенклатура 			= СтрокаРеализации.Номенклатура;
			
			Если ДвижениеРеализации.Номенклатура.Услуга Тогда
				ДвижениеРеализации.Склад 	  = Справочники.Склады.ПустаяСсылка();
				ДвижениеРеализации.Партия  	  = Неопределено;
				ДвижениеРеализации.СчетУчета  = ПланыСчетов.Типовой.ПустаяСсылка();
				ДвижениеРеализации.Стоимость  = 0;
				ДвижениеРеализации.Количество = - СтрокаРеализации.Количество;
			Иначе
				ДвижениеРеализации.Склад = СтруктураШапкиДокумента.Склад;
				
				// если нет соответствия стратегии выбранному счету, добавим значение
				Если СтратегииСписания.Получить(СтрокаРеализации.СчетУчетаБУ) = Неопределено Тогда
					СтратегииСписания.Вставить(СтрокаРеализации.СчетУчетаБУ,УправлениеЗапасами.ВедетсяПартионныйУчетДляСчета(СтрокаРеализации.СчетУчетаБУ));
				КонецЕсли;
				
				ВедетсяПартионныйУчетДляСчета = СтратегииСписания.Получить(СтрокаРеализации.СчетУчетаБУ);
				Если ВедетсяПартионныйУчетДляСчета Тогда
					ДвижениеРеализации.Партия = СтрокаРеализации.Партия;
				Иначе
					ДвижениеРеализации.Партия = Неопределено;
				КонецЕсли;
				ДвижениеРеализации.СчетУчета  = СтрокаРеализации.СчетУчетаБУ;
				ДвижениеРеализации.Стоимость  = - СтрокаРеализации.СуммаСписания;
				ДвижениеРеализации.Количество = - СтрокаРеализации.Количество;
			КонецЕсли;
			
			ДвижениеРеализации.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
			
			//записываем ресурсы
			ДвижениеРеализации.Сумма = - СтрокаРеализации.Сумма;
			ДвижениеРеализации.НДС   = - СтрокаРеализации.НДС;
			ДвижениеРеализации.Акциз = - СтрокаРеализации.Акциз;
			
		КонецЦикла;
						
		//	Фиксация выручки по НУ (проводки)
		// 	Налоговый учет
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда		
			ВыручкаПоНУ = ТаблицаВыручки.Скопировать();
			ВыручкаПоНУ.Свернуть("СчетДоходовНУ, СубконтоДоходовНУ1,СубконтоДоходовНУ2,СубконтоДоходовНУ3, СчетУчетаНДСПоРеализации,СтавкаНДС, СчетУчетаАкцизаПореализации ","СуммаБезНДС, НДС, Акциз");
						
			Для каждого СтрокаТаблицы из ВыручкаПоНУ Цикл			
				// Сторнируем выручку
				// рассматриваем ее в НУ как корретировку дохода
				Если СтрокаТаблицы.СуммаБезНДС = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Проводка = ПроводкиНУ.Добавить();
				
				Проводка.Период     = ДатаДока;
				Проводка.Организация= СтруктураШапкиДокумента.Организация;
				Проводка.Сумма      = -СтрокаТаблицы.СуммаБезНДС;
				Проводка.Содержание = "Сторно выручки от реализации";
				
				Проводка.СчетДт     = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",                СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",                   СтруктураШапкиДокумента.ДоговорКонтрагента);			
				
				Проводка.СчетКт      = СтрокаТаблицы.СчетДоходовНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовНУ3);			
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.КорСтруктурноеПодразделение, СтруктураШапкиДокумента.КорСтруктурноеПодразделение);

				Если Проводка.СчетКт.Количественный тогда
					Проводка.КоличествоКт = - СтрокаТаблицы.Количество;
				КонецЕсли;	
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, ВидУчетаНУ);
				
				//НДС
				Если СтрокаТаблицы.НДС <> 0 И СтруктураШапкиДокумента.УчитыватьНДС Тогда
					ПроводкаНУ = ПроводкиНУ.Добавить();
					
					ПроводкаНУ.Период      	= ДатаДока;
					ПроводкаНУ.Организация 	= СтруктураШапкиДокумента.Организация;
					ПроводкаНУ.Сумма       	= СтрокаТаблицы.НДС;
					ПроводкаНУ.Содержание  	= "Возврат суммы НДС";
					
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.КорСтруктурноеПодразделение, СтруктураШапкиДокумента.КорСтруктурноеПодразделение);
					
					ПроводкаНУ.СчетКт      = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Контрагенты",        			 СтруктураШапкиДокумента.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Договоры",           			 СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					ПроводкаНУ.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСНачисленногоНУ(СтрокаТаблицы.СчетУчетаНДСПоРеализации, Дата);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"НалогиСборыОтчисления", 	Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
					
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
				КонецЕсли;
				
				//НДС
				Если СтрокаТаблицы.Акциз <> 0 И СтруктураШапкиДокумента.УчитыватьАкциз Тогда
					ПроводкаНУ = ПроводкиНУ.Добавить();
					
					ПроводкаНУ.Период      	= ДатаДока;
					ПроводкаНУ.Организация 	= СтруктураШапкиДокумента.Организация;
					ПроводкаНУ.Сумма       	= СтрокаТаблицы.НДС;
					ПроводкаНУ.Содержание  	= "Возврат суммы акциза";
										
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
							ПроводкаНУ, СтруктураШапкиДокумента.КорСтруктурноеПодразделение, СтруктураШапкиДокумента.КорСтруктурноеПодразделение);
					
					ПроводкаНУ.СчетКт      = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Контрагенты",        			 СтруктураШапкиДокумента.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Договоры",           			 СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					ПроводкаНУ.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаАкцизаНУ(СтрокаТаблицы.СчетУчетаАкцизаПореализации, Дата);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"НалогиСборыОтчисления", 	Справочники.НалогиСборыОтчисления.Акциз);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
					
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
				КонецЕсли;

			
			КонецЦикла; // Для каждого СтрокаТаблицы из ВыручкаПоНУ Цикл
		КонецЕсли; 
		
	КонецЕсли; // Если ТаблицаПоТоварам.Количество() > 0 Тогда

		СуммаКомиссионногоСбораВзаиморасчетов = 0;
		СуммаКомиссионногоСбораВзаиморасчетовВал = 0;
		СуммаНДСКомиссионногоСбораВзаиморасчетов = 0;
		СуммаНДСКомиссионногоСбораВзаиморасчетовВал = 0;
	
	Для каждого СтрокаТаблицы из Товары Цикл
		СуммаКомиссионногоСбораВзаиморасчетов = СтрокаТаблицы.СуммаКомиссионногоСбора*КурсВзаиморасчетов;
		СуммаКомиссионногоСбораВзаиморасчетовВал = СтрокаТаблицы.СуммаКомиссионногоСбора;
		СуммаНДСКомиссионногоСбораВзаиморасчетов = СтрокаТаблицы.СуммаНДСКомиссионногоСбора*КурсВзаиморасчетов;
		СуммаНДСКомиссионногоСбораВзаиморасчетовВал = СтрокаТаблицы.СуммаНДСКомиссионногоСбора;
		
		//проведение комиссионного сбора
		
		Если СтрокаТаблицы.СуммаКомиссионногоСбора>0 Тогда
			
			СуммаПроводки = СтрокаТаблицы.СуммаКомиссионногоСбора-СтрокаТаблицы.СуммаНДСКомиссионногоСбора;
			СуммаНДСПроводки = СтрокаТаблицы.СуммаНДСКомиссионногоСбора;
			
			//СтрокаДвижения							= ТаблицаДвижений_НДС.Добавить();		     		
			//
			//СтрокаДвижения.Налогоплательщик			= СтруктураШапкиДокумента.Организация.ГоловнаяОрганизация;
			//СтрокаДвижения.Организация				= СтруктураШапкиДокумента.Организация;		
			//СтрокаДвижения.ИсточникФинансирования	= Справочники.ИсточникиФинансирования.СобственныеСредства;		
			//СтрокаДвижения.СтруктурнаяЕдиница   	= СтруктураШапкиДокумента.Организация;		
			//
			//СтрокаДвижения.ВидОперацииРеализации = Справочники.ВидыРеализации.РеализацияТМЗ;		
			//
			//СтрокаДвижения.ВидНалогаНДС		=  Перечисления.ВидыНДС.НДС;
			//СтрокаДвижения.СтавкаНДС 		= ОсновнаяСтавкаНДС;		
			//СтрокаДвижения.Контрагент 		= СтруктураШапкиДокумента.Контрагент;
			//
			//СтрокаДвижения.ТМЗ		 			= СтрокаТаблицы.Номенклатура;
			//СуммаОборотаПоРеализации 			= - СуммаПроводки;
			//
			//СтрокаДвижения.СуммаБезНДС 			= - СуммаПроводки;
			//СтрокаДвижения.СуммаНДС    			= - СуммаНДСПроводки;			
			//СтрокаДвижения.ОборотПоРеализации	= - СуммаПроводки;
			
			//Проводка по сумме комисс.сбора возврата
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма   	 = СуммаПроводки;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ТипыОпераций", СтруктураШапкиДокумента.Типоперации);
			
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				
				//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СуммаПроводки;
				
			КонецЕсли;
			
			Проводка.СчетКт 	 = СтрокаТаблицы.СчетДоходовБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,           СтрокаТаблицы.СубконтоДоходовБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2,           СтрокаТаблицы.СубконтоДоходовБУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3,           СтрокаТаблицы.СубконтоДоходовБУ3);			
			
			Проводка.Содержание = "корректировка по комисс. сбор с коэффициента возврата";
			
			Если Проводка.СчетКт.Валютный Тогда
				//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СуммаПроводки;
			КонецЕсли;
			
			ПроводкаНУ = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период      = ДатаДока;
			ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
			ПроводкаНУ.Сумма   	 = СуммаПроводки;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
			ПроводкаНУ.СчетДт      = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);				
			
			
			ПроводкаНУ.СчетКт 	 = СтрокаТаблицы.СчетДоходовНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1,           СтрокаТаблицы.СубконтоДоходовНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2,           СтрокаТаблицы.СубконтоДоходовНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3,           СтрокаТаблицы.СубконтоДоходовНУ3);			
			
			ПроводкаНУ.Содержание = "Коррект.по комисс.сбор с коэффициента возврата";
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  ВидУчетаНУ);
			
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма   	 = - СуммаПроводки;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ТипыОпераций", СтруктураШапкиДокумента.Типоперации);
			
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				
				//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = - СуммаПроводки;
				
			КонецЕсли;
			
			Проводка.СчетКт 	 = СтрокаТаблицы.СчетДоходовКомиссионногоСбораБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,           СтрокаТаблицы.СубконтоДоходовБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2,           СтрокаТаблицы.СубконтоДоходовБУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3,           СтрокаТаблицы.СубконтоДоходовБУ3);			
			
			Проводка.Содержание = "комисс. сбор с коэффициента возврата";
			
			Если Проводка.СчетКт.Валютный Тогда
				//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = - СуммаПроводки;
			КонецЕсли;
			
			ПроводкаНУ = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период      = ДатаДока;
			ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
			ПроводкаНУ.Сумма   	 = - СуммаПроводки;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
			ПроводкаНУ.СчетДт      = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);				
			
			
			ПроводкаНУ.СчетКт 	 = СтрокаТаблицы.СчетДоходовНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1,           СтрокаТаблицы.СубконтоДоходовНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2,           СтрокаТаблицы.СубконтоДоходовНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3,           СтрокаТаблицы.СубконтоДоходовНУ3);			
			
			ПроводкаНУ.Содержание = "Комисс.сбор с коэффициента возврата";
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  ВидУчетаНУ);
			
			//проводка по НДС
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       = СуммаНДСПроводки;
			Проводка.Содержание  = "Коррект.НДС по комисс. сбора с коэффициента возврата";
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ТипыОпераций", СтруктураШапкиДокумента.ТипОперации);
			
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				
				//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СуммаНДСПроводки;
				
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			
			ПроводкаНУ = ПроводкиНУ.Добавить();
			
			ПроводкаНУ.Период      = ДатаДока;
			ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
			ПроводкаНУ.Сумма       = СуммаНДСПроводки;
			ПроводкаНУ.Содержание  = "НДС";
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
			ПроводкаНУ.СчетДт      = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			
			
			ПроводкаНУ.СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСНачисленногоНУ(СтрокаТаблицы.СчетУчетаНДСПоРеализации, Дата);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  ВидУчетаНУ);				
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       = - СуммаНДСПроводки;
			Проводка.Содержание  = "НДС комисс. сбора с коэффициента возврата";
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ТипыОпераций", СтруктураШапкиДокумента.ТипОперации);
			
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				
				//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = - СуммаНДСПроводки;
				
			КонецЕсли;
			
			Проводка.СчетКт = Планысчетов.Типовой.НалогНаДобавленнуюСтоимостьСоб;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			
			ПроводкаНУ = ПроводкиНУ.Добавить();
			
			ПроводкаНУ.Период      = ДатаДока;
			ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
			ПроводкаНУ.Сумма       = - СуммаНДСПроводки;
			ПроводкаНУ.Содержание  = "НДС";
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
			ПроводкаНУ.СчетДт      = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			
			
			ПроводкаНУ.СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСНачисленногоНУ(СтрокаТаблицы.СчетУчетаНДСПоРеализации, Дата);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  ВидУчетаНУ);				
			
		КонецЕсли;
	КонецЦикла;
	
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		ПроцедурыБухгалтерскогоУчета.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли; // Учет курсовых разниц

	
		//Для Каждого СтрокаРеализации ИЗ Товары Цикл
		//	
		//	ДвижениеРеализации = Движения.ур_РеализацияЗерна.Добавить();
		//	
		//	ДвижениеРеализации.Период 					= Дата;
		//	ДвижениеРеализации.Организация 				= Организация;
		//	ДвижениеРеализации.Склад 	  				= Склад;
		//	ДвижениеРеализации.ДоговорКонтрагента 		= ДоговорКонтрагента;
		//	ДвижениеРеализации.ВидОперации  			= СтрокаРеализации.НДСВидОперацииРеализации;
		//	ДвижениеРеализации.ТипОперации				= ТипОперации;
		//	ДвижениеРеализации.Видресурса				= УправлениеРесурсами.ПолучитьВидРесурса(источникФинансирования, СтрокаРеализации.СчетУчетаБУ);
		//	//ДвижениеРеализации.ВидДвиженияЗерна			= СтрокаРеализации.ВидДвиженияЗерна;
		//	ДвижениеРеализации.ВидКультуры				= СтрокаРеализации.Зерноваярасписка.ВидКультуры;
		//	ДвижениеРеализации.КлассКультуры			= СтрокаРеализации.Зерноваярасписка.Классностькультуры;
		//	ДвижениеРеализации.ГодУрожая				= СтрокаРеализации.Зерноваярасписка.ГодУрожая;
		//	ДвижениеРеализации.Зерноваярасписка			= СтрокаРеализации.Зерноваярасписка;
		//	ДвижениеРеализации.Стоимость  				= -СтрокаРеализации.Сумма*КурсВзаиморасчетов;
		//	ДвижениеРеализации.Количество 				= -СтрокаРеализации.Количество;
		//	ДвижениеРеализации.НДС 						= -СтрокаРеализации.СуммаНДС;
		//	ДвижениеРеализации.Сумма 					= -СтрокаРеализации.Сумма;


		//КонецЦикла;

		
		Для Каждого СтрокаРеализации ИЗ Товары Цикл
			
			ДвижениеРеализации = Движения.ур_РеализацияЗерна.Добавить();
			
			ДвижениеРеализации.Период 					= Дата;
			ДвижениеРеализации.Организация 				= Организация;
			ДвижениеРеализации.Склад 	  				= Склад;
			ДвижениеРеализации.ДоговорКонтрагента 		= ДоговорКонтрагента;
			ДвижениеРеализации.ВидОперации  			= СтрокаРеализации.НДСВидОперацииРеализации;
			ДвижениеРеализации.ТипОперации				= ТипОперации;
			ДвижениеРеализации.Видресурса				= УправлениеРесурсами.ПолучитьВидРесурса(источникФинансирования, СтрокаРеализации.СчетУчетаБУ);
			//ДвижениеРеализации.ВидДвиженияЗерна			= СтрокаРеализации.ВидДвиженияЗерна;
			ДвижениеРеализации.ВидКультуры				= СтрокаРеализации.Зерноваярасписка.ВидКультуры;
			ДвижениеРеализации.КлассКультуры			= СтрокаРеализации.Зерноваярасписка.Классностькультуры;
			ДвижениеРеализации.ГодУрожая				= СтрокаРеализации.Зерноваярасписка.ГодУрожая;
			ДвижениеРеализации.Зерноваярасписка			= СтрокаРеализации.Зерноваярасписка;
			ДвижениеРеализации.Стоимость  				= -СтрокаРеализации.Себестоимость;
			ДвижениеРеализации.Количество 				= -СтрокаРеализации.Количество;
			
		КонецЦикла;
		
		Для Каждого СтрокаРеализации ИЗ Товары Цикл
			
			ДвижениеРеализации = Движения.ур_РеализацияЗерна.Добавить();
			
			ДвижениеРеализации.Период 					= Дата;
			ДвижениеРеализации.Организация 				= Организация;
			ДвижениеРеализации.Склад 	  				= Склад;
			ДвижениеРеализации.ДоговорКонтрагента 		= ДоговорКонтрагента;
			ДвижениеРеализации.ВидОперации  			= СтрокаРеализации.НДСВидОперацииРеализации;
			ДвижениеРеализации.ТипОперации				= ТипОперации;
			ДвижениеРеализации.Видресурса				= УправлениеРесурсами.ПолучитьВидРесурса(источникФинансирования, СтрокаРеализации.СчетУчетаБУ);
			//ДвижениеРеализации.ВидДвиженияЗерна			= СтрокаРеализации.ВидДвиженияЗерна;
			ДвижениеРеализации.ВидКультуры				= СтрокаРеализации.Зерноваярасписка.ВидКультуры;
			ДвижениеРеализации.КлассКультуры			= СтрокаРеализации.Зерноваярасписка.Классностькультуры;
			ДвижениеРеализации.ГодУрожая				= СтрокаРеализации.Зерноваярасписка.ГодУрожая;
			ДвижениеРеализации.Зерноваярасписка			= СтрокаРеализации.Зерноваярасписка;
			ДвижениеРеализации.Сумма 			  		= -(СтрокаРеализации.Сумма*КурсВзаиморасчетов - СтрокаРеализации.СуммаНДС);
			ДвижениеРеализации.НДС 				  		= -СтрокаРеализации.СуммаНДС;                
			
		КонецЦикла;

КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по регистрам подсистемы учета НДС "КорректировкаНДС"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, Отказ, Заголовок)
	
	Если Не ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	// Работа со структурными подразделениями
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПлательщикНДС 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
																	СтруктураШапкиДокумента.Организация,
																	глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	Перечисления.РазделыНалоговогоУчета.НДС);
	Иначе
		ПлательщикНДС 	= СтруктураШапкиДокумента.Организация;															
	КонецЕсли;																
	
	СтруктураШапкиДокумента.Вставить("ПлательщикНДС", ПлательщикНДС);
	
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл		
		ИдТабЧасти = ТаблицаДокумента.Ключ;
		ТабЧасть   = ТаблицаДокумента.Значение;          		
		Если ТабЧасть.Количество()> 0 Тогда              						
			УчетНДСИАкциза.СформироватьДвиженияПоРегиструКорректировкиНДС(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, Движения, Отказ);			
		КонецЕсли; 
	КонецЦикла;		
		
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по регистрам подсистемы учета Акцищза "Акциз"
Процедура ДвиженияРегистровПодсистемыАкциз(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.УчитыватьАкциз Тогда
		Возврат;
	КонецЕсли;
	
	// Работа со структурными подразделениями
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПлательщикАкциза = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
																	   СтруктураШапкиДокумента.Организация,
																	   глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	   Перечисления.РазделыНалоговогоУчета.Акциз);
	Иначе
		ПлательщикАкциза = СтруктураШапкиДокумента.Организация;															
	КонецЕсли;																

	
	ДвиженияАкциз = Движения.Акциз;
	
	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		Если  НЕ ЗначениеЗаполнено(СтрокаТЧ.СтавкаАкциза) Тогда
			Продолжить;
		КонецЕсли;

		СтрокаДвижения = ДвиженияАкциз.Добавить();
		
		СтрокаДвижения.Период  				= СтруктураШапкиДокумента.Дата;		
		СтрокаДвижения.Организация  		= СтруктураШапкиДокумента.Организация;  
		СтрокаДвижения.СтруктурнаяЕдиница 	= СтруктураШапкиДокумента.Организация;  
		СтрокаДвижения.Налогоплательщик 	= ПлательщикАкциза;  
		
		СтрокаДвижения.ВидОперации  = СтрокаТЧ.АкцизВидОперацииРеализации; 
		СтрокаДвижения.СтавкаАкциза = СтрокаТЧ.СтавкаАкциза;
		СтрокаДвижения.ТМЗ			= СтрокаТЧ.Номенклатура;
		СтрокаДвижения.Количество   = -(СтрокаТЧ.Количество/(?(СтрокаТЧ.Номенклатура.КоэффициентРасчетаОблагаемойБазыАкциза = 0, 1, СтрокаТЧ.Номенклатура.КоэффициентРасчетаОблагаемойБазыАкциза)));
		СтрокаДвижения.СуммаАкциза  = -СтрокаТЧ.Акциз;
		
	КонецЦикла;	
	
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ДвиженияРегистровПодсистемыУчетаРесурсов(СтруктураШапкиДокумента, ТаблицаПоЗерновымРаспискам, Отказ, Заголовок)
	
	ДвиженияРегистровСведенийПодсистемыУчетаРесурсов(ТаблицаПоЗерновымРаспискам, СтруктураШапкиДокумента);
	
	НаборДвижений = Движения.ур_ЗерноНаСкладах;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// Заполним таблицу движений.
	ТаблицаПоЗерновымРаспискамПолученным = ТаблицаПоЗерновымРаспискам.Скопировать();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоЗерновымРаспискамПолученным, ТаблицаДвижений);
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(ТипОперации,"ТипОперации");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.ур_ЗерноНаСкладах.ВыполнитьПриход();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияРегистровСведенийПоСтроке(СтрокаТаблицы,СтруктураШапкиДокумента, КонтрагентОрганизации)
	
		// Движения по регистру "Индоссаменты зерновой расписки"
		Движение = Движения.ур_ИндоссаментыЗерновыхРасписок.Добавить();
		// Свойства
		Движение.Период           = СтруктураШапкиДокумента.Дата;
		// Измерения
		Движение.ЗерноваяРасписка = СтрокаТаблицы.ЗерноваяРасписка.Ссылка;

		// Ресурсы
		Движение.Индоссат         = СтруктураШапкиДокумента.Контрагент;
		Движение.Индоссант        = КонтрагентОрганизации;

		//Движения по регистру сведений "Статусы зерновых расписок
		//
		Движение = Движения.ур_СтатусыЗерновыхРасписок.Добавить();
		// Свойства
		Движение.Период           = СтруктураШапкиДокумента.Дата;
		// Измерения
		Движение.ЗерноваяРасписка = СтрокаТаблицы.ЗерноваяРасписка.Ссылка;

		// Ресурсы
		Движение.Статус         = Перечисления.ур_СтатусыЗерновойРасписки.Действующая;

КонецПроцедуры

Процедура ДвиженияРегистровСведенийПодсистемыУчетаРесурсов(ТаблицаПоЗерновымРаспискам,СтруктураШапкиДокумента)
	
	НаборЗаписей = РегистрыСведений.СобственныеКонтрагенты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Значение = СтруктураШапкиДокумента.организация;
	НаборЗаписей.Отбор.Организация.Использование = Истина;
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		КонтрагентОрганизации = НаборЗаписей[0].Контрагент;
	Иначе 
		КонтрагентОрганизации = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	СвернутаяТаблицаПоЗерновымРаспискам = ТаблицаПоЗерновымРаспискам.Скопировать(,"ЗерноваяРасписка,ЗачтенныйВес");
	
	СвернутаяТаблицаПоЗерновымРаспискам.Свернуть("ЗерноваяРасписка","ЗачтенныйВес");
	
	Для каждого СтрокаТаблицы ИЗ СвернутаяТаблицаПоЗерновымРаспискам Цикл
		ДвиженияРегистровСведенийПоСтроке(СтрокаТаблицы,СтруктураШапкиДокумента, КонтрагентОрганизации);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы ИЗ ТаблицаПоЗерновымРаспискам Цикл
		
		 //Движение по оборотному регистру "Движения зерна"
		Движение = Движения.ур_ДвиженияЗерна.Добавить();
		
		Движение.Период 				 = СтруктураШапкиДокумента.Дата;
		Движение.Организация 			 = СтруктураШапкиДокумента.Организация;
		Движение.Склад 	  				 = СтруктураШапкиДокумента.Склад;
		Движение.ТипОперации			 = СтруктураШапкиДокумента.ТипОперации;
		Движение.Контрагент 			 = СтруктураШапкиДокумента.Контрагент;
		Движение.ДоговорКонтрагента 	 = СтруктураШапкиДокумента.ДоговорКонтрагента;
		Движение.Видресурса				 = СтрокаТаблицы.Видресурса;
		Движение.РегламентныйВидОперации = Перечисления.ур_РегламентныеОперацииДвиженияЗерна.Приход;
		Движение.Зерноваярасписка		 = СтрокаТаблицы.Зерноваярасписка;
		Движение.ЗачтенныйВес  			 = СтрокаТаблицы.ЗачтенныйВес;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	ЗаполнитьПоДокументуОснования(Основание);
		
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
	УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);

	Если ЗначениеЗаполнено(ДокументОснование) Тогда 
		ВедениеУчетаВременныхРазницБалансовымМетодомВДокуменетеОснования = ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(ДокументОснование.Организация, ДокументОснование.Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);
		ВедениеУчетаВременныхРазницБалансовымМетодомВТекущемДокументе = ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);
		Если НЕ ВедениеУчетаВременныхРазницБалансовымМетодомВТекущемДокументе Тогда 
			ВедениеУчетаВременныхРазницБалансовымМетодом = ВедениеУчетаВременныхРазницБалансовымМетодомВТекущемДокументе;
		Иначе 
			ВедениеУчетаВременныхРазницБалансовымМетодом = ВедениеУчетаВременныхРазницБалансовымМетодомВДокуменетеОснования;
		КонецЕсли;
	Иначе 
		ВедениеУчетаВременныхРазницБалансовымМетодом = ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом",  ВедениеУчетаВременныхРазницБалансовымМетодом);
	
	КорСтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
	СтруктураШапкиДокумента.Вставить("КорСтруктурноеПодразделение", КорСтруктурноеПодразделение);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора", "ВидДоговора");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"       , "Номенклатура");
	СтруктураПолей.Вставить("ЗерноваяРасписка"       , "ЗерноваяРасписка");
	СтруктураПолей.Вставить("Услуга"             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("КоличествоДок"      , "Количество");
	СтруктураПолей.Вставить("Коэффициент"      , "Коэффициент");
	
	
	СтруктураПолей.Вставить("Сумма"    , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС", "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"      , "СуммаНДС");
	
	СтруктураПолей.Вставить("СтавкаАкциза", "СтавкаАкциза");
	СтруктураПолей.Вставить("Акциз"      , "СуммаАкциза");
	
	СтруктураПолей.Вставить("НДСВидОперацииРеализации", "НДСВидОперацииРеализации");	
	СтруктураПолей.Вставить("АкцизВидОперацииРеализации", "АкцизВидОперацииРеализации");
	
	СтруктураПолей.Вставить("НомерСтроки", "НомерСтроки");
	СтруктураПолей.Вставить("СчетУчетаБУ", "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ", "СчетУчетаНУ");
	
	СтруктураПолей.Вставить("СчетУчетаНДСПоРеализации"  , "СчетУчетаНДСПоРеализации");
	СтруктураПолей.Вставить("СчетУчетаАкцизаПоРеализации"  , "СчетУчетаАкцизаПоРеализации");
	
	СтруктураПолей.Вставить("СчетДоходовБУ", "СчетДоходовБУ");
	СтруктураПолей.Вставить("СчетДоходовНУ", "СчетДоходовНУ");
	
	СтруктураПолей.Вставить("СубконтоДоходовБУ1", "СубконтоДоходовБУ1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2", "СубконтоДоходовБУ2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3", "СубконтоДоходовБУ3");
	
	СтруктураПолей.Вставить("СубконтоДоходовНУ1", "СубконтоДоходовНУ1");
	СтруктураПолей.Вставить("СубконтоДоходовНУ2", "СубконтоДоходовНУ2");
	СтруктураПолей.Вставить("СубконтоДоходовНУ3", "СубконтоДоходовНУ3");
	
	СтруктураПолей.Вставить("СчетСписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ");
	СтруктураПолей.Вставить("СчетСписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ");
	
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ1");
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ2");
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиБУ3", "СубконтоСписанияСебестоимостиБУ3");
	
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ1");
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ2");
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиНУ3", "СубконтоСписанияСебестоимостиНУ3");
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокументОснование) 
		 ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		СтруктураПолей.Вставить("Себестоимость", "Себестоимость");
	КонецЕсли;
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
 	ТаблицаПоЗерновымРаспискам    = УправлениеРесурсами.ПодготовитьТаблицуЗерновыхРасписок(ЭтотОбъект);
	
	//Сформируем новую колонку "Количество"
	ТаблицаПоТоварам.Колонки.Добавить("Количество",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаПоТоварам.ЗагрузитьКолонку(ТаблицаПоТоварам.ВыгрузитьКолонку("КоличествоДок"),"Количество");
	ТаблицаПоТоварам.Колонки.Удалить(ТаблицаПоТоварам.Колонки.КоличествоДок);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"  , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"    , "Содержание");
	СтруктураПолей.Вставить("Услуга"        , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"    , "Количество");
	СтруктураПолей.Вставить("Сумма"         , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"     , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"           , "СуммаНДС");
	СтруктураПолей.Вставить("НДСВидОперацииРеализации", "НДСВидОперацииРеализации");	
	СтруктураПолей.Вставить("СчетДоходовБУ" , 		"СчетДоходовБУ");
	СтруктураПолей.Вставить("СубконтоДоходовБУ1", 	"СубконтоДоходовБУ1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2", 	"СубконтоДоходовБУ2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3", 	"СубконтоДоходовБУ3");
	
	СтруктураПолей.Вставить("СчетДоходовНУ" , 		"СчетДоходовНУ");
	СтруктураПолей.Вставить("СубконтоДоходовНУ1", 	"СубконтоДоходовНУ1");
	СтруктураПолей.Вставить("СубконтоДоходовНУ2", 	"СубконтоДоходовНУ2");
	СтруктураПолей.Вставить("СубконтоДоходовНУ3", 	"СубконтоДоходовНУ3");
	СтруктураПолей.Вставить("СчетУчетаНДСПоРеализации", "СчетУчетаНДСПоРеализации");

	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеЗерновыхРасписок(ТаблицаПоЗерновымРаспискам, Отказ, Заголовок);
	
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, Истина);
	
	//Проверим на возможность проведения в БУ и НУ
	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента,Отказ, Заголовок);
	
	// Движения по документу
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоЗерновымРаспискам, Отказ, Заголовок);
		УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Истина, "СчетФактураВыданный");
	КонецЕсли;	
	
	Если НЕ Отказ Тогда			
		ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
	КонецЕсли;
КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки события удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	Если  НЕ Отказ Тогда
		УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Ложь, "СчетФактураВыданный");
	КонецЕсли;	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();