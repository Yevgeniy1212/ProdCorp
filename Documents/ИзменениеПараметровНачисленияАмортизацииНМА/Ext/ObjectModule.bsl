////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	//так как нет печатных форм у документа, по умолчанию
	//ТабДокумент = Неопределено
	ТабДокумент = Неопределено;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;  

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	мСтрокаРеквизитыБухУчета =  "
								|НМА.СрокПолезногоИспользованияБУ,
								|НМА.ОбъемПродукцииРаботБУ,
								|НМА.СтоимостьДляВычисленияАмортизацииБУ";
								

	мСтрокаРеквизитыНалУчета =  "";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Возвращает результат запроса с данными из табличной части НМА и первоначальной стоимостью каждого НМА.
//
Функция СформироватьЗапросПоНМА(СтруктураШапкиДокумента)
	
	// для каждого НМА нужно определить его первоначальную стоимость
	// и переписать для нового движения эту же стоимость как первоначальную, т.е. 
	// при каждом изменении параметров амортизации, будет записываться одна и та же первоначальная стоимость. 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИзменениеПараметровНачисленияАмортизацииНМАНМА.НомерСтроки,
	|	ИзменениеПараметровНачисленияАмортизацииНМАНМА.НематериальныйАктив,
	|	ИзменениеПараметровНачисленияАмортизацииНМАНМА.СрокПолезногоИспользованияБУ,
	|	ИзменениеПараметровНачисленияАмортизацииНМАНМА.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,
	|	ИзменениеПараметровНачисленияАмортизацииНМАНМА.СтоимостьДляВычисленияАмортизацииБУ,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СпособПоступления,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации
	|ИЗ
	|	Документ.ИзменениеПараметровНачисленияАмортизацииНМА.НМА КАК ИзменениеПараметровНачисленияАмортизацииНМАНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&ДатаДок, ) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	|		ПО ИзменениеПараметровНачисленияАмортизацииНМАНМА.НематериальныйАктив = ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
	|ГДЕ
	|	ИзменениеПараметровНачисленияАмортизацииНМАНМА.Ссылка = &ДокСсылка
	|	И ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Организация = &Организация";
	
	Запрос.УстановитьПараметр("ДокСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ДатаДок", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);

	Возврат Запрос.Выполнить();
	
КонецФункции	
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента,Отказ, Заголовок)

    // Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиНМА(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("НематериальныйАктив");

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НМА", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНМА);

	ДатаДок = СтруктураШапкиДокумента.Дата;
	
	ПараметрыАмортизацииБУ = Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет;
	
	Для Каждого СтрокаТЧ из ТаблицаПоНМА Цикл
		
		СтрокаДвижений = ПараметрыАмортизацииБУ.Добавить();
		
		СтрокаДвижений.Период           			= ДатаДок;
		СтрокаДвижений.Организация      			= СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.НематериальныйАктив 			= СтрокаТЧ.НематериальныйАктив;
		
		// ресурсы, в которые записываются старые значения
		СтрокаДвижений.ПервоначальнаяСтоимость 		= СтрокаТЧ.ПервоначальнаяСтоимость;
		СтрокаДвижений.СпособПоступления			= СтрокаТЧ.СпособПоступления;
		СтрокаДвижений.НачислятьАмортизацию			= СтрокаТЧ.НачислятьАмортизацию;
		СтрокаДвижений.СпособНачисленияАмортизации	= СтрокаТЧ.СпособНачисленияАмортизации;
		
		// ресурсы, в которые записываются новые значения
		СтрокаДвижений.СрокПолезногоИспользования					= СтрокаТЧ.СрокПолезногоИспользованияБУ;
		СтрокаДвижений.ОбъемПродукцииРаботДляВычисленияАмортизации	= СтрокаТЧ.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ;
		СтрокаДвижений.СтоимостьДляВычисленияАмортизации 			= СтрокаТЧ.СтоимостьДляВычисленияАмортизацииБУ;
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДополнитьСтруктуруПолейТабличнойЧастиНМАРегл(СтруктураШапкиДокумента, СтруктураПолей)

	СтруктураПолей.Вставить("СрокПолезногоИспользованияБУ"                 , "СрокПолезногоИспользованияБУ");
	СтруктураПолей.Вставить("ОбъемПродукцииРаботБУ"                        , "ОбъемПродукцииРаботБУ");
	СтруктураПолей.Вставить("СтоимостьДляВычисленияАмортизацииБУ"          , "СтоимостьДляВычисленияАмортизацииБУ");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)

	Заголовок = "";

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
		
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Сформируем структуру табличной части
	СтруктураПолей = Новый Структура("НематериальныйАктив" , "НематериальныйАктив");
	СтруктураПолей.Вставить("НомерСтроки", "НомерСтроки");

	ДополнитьСтруктуруПолейТабличнойЧастиНМАРегл(СтруктураШапкиДокумента,СтруктураПолей);

	РезультатЗапросаПоНМА = СформироватьЗапросПоНМА(СтруктураШапкиДокумента);
	ТаблицаПоНМА          = РезультатЗапросаПоНМА.Выгрузить();

	ПроверитьЗаполнениеТабличнойЧастиНМА(Отказ, Заголовок);

	// Проверим, не дублируются ли НМА в таб.части
	ТаблицаНМА = НМА.Выгрузить();
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиНМА(ТаблицаНМА ,Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНМА);
	КонецЕсли;

КонецПроцедуры

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();