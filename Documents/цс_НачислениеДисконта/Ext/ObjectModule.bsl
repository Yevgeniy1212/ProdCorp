////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходмое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		КонецЕсли;
		
		Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		//так как нет печатных форм у документа, по умолчанию
		//ТабДокумент = Неопределено
		ТабДокумент = Неопределено;
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;  
		
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));
		
	КонецПроцедуры // Печать
	
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура();
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,  ЦС_ОбщегоНазначенияКлиентСерверПовтИсп.ТекущийПользователь(), , ,  , , );		
	СтавкаДисконта = Константы.ЦС_СтавкаДисконта.Получить();
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
		
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоБУХ();
	
	ДвиженияРег();
КонецПроцедуры

Процедура ДвиженияПоБУХ()
	
	ПроводкиБУ = Движения.Типовой;
	ПроводкиНУ = Движения.Налоговый;
	
	Проводка = ПроводкиБУ.Добавить();
	
	Проводка.Период       = Дата;
	Проводка.Организация  = Организация;
	Проводка.Содержание   = "Начисление дисконта";
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ЦС_ВидыДисконтирования.Дебиторы") Тогда
		Проводка.СчетДт       = СчетБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоБУ1);				
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоБУ2);				
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоБУ3);				
	Иначе
		СтруктураРазнДат = ЦС_ОбщегоНазначенияСервер.РазобратьРазностьДат(ДоговорКонтрагента.ДатаОкончанияДействияДоговора, ДоговорКонтрагента.ДатаНачалаДействияДоговора);		
		НаборЗаписей = РегистрыСведений.ЦС_УчетнаяПолитикаДисконтирования.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.ВидОперации.Установить(ВидОперации);
		НаборЗаписей.Прочитать();

		Если СтруктураРазнДат.Лет >= 1 Тогда
			Проводка.СчетДт = НаборЗаписей[0].СчетУчетаДС;
		Иначе
			Проводка.СчетДт = НаборЗаписей[0].СчетУчетаКС;
		КонецЕсли;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",Контрагент);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",  ДоговорКонтрагента);	
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ТипыОпераций", ДоговорКонтрагента.ТипОперации);	
	КонецЕсли;
	
	ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтруктурноеПодразделение, СтруктурноеПодразделение);
	
	Если Проводка.СчетДт.Валютный Тогда
		Проводка.ВалютаДт        = ЦС_ОбщегоНазначенияКлиентСерверПовтИсп.ВалютаРегУчета();
		Проводка.ВалютнаяСуммаДт = СуммаДокумента;
	КонецЕсли;
	
	Проводка.Сумма = СуммаДокумента;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ЦС_ВидыДисконтирования.Дебиторы") Тогда
		СтруктураРазнДат = ЦС_ОбщегоНазначенияСервер.РазобратьРазностьДат(ДоговорКонтрагента.ДатаОкончанияДействияДоговора, ДоговорКонтрагента.ДатаНачалаДействияДоговора);
		НаборЗаписей = РегистрыСведений.ЦС_УчетнаяПолитикаДисконтирования.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.ВидОперации.Установить(ВидОперации);
		НаборЗаписей.Прочитать();

		Если СтруктураРазнДат.Лет >= 1 Тогда
			Проводка.СчетКт = НаборЗаписей[0].СчетУчетаДС;
		Иначе
			Проводка.СчетКт = НаборЗаписей[0].СчетУчетаКС;
		КонецЕсли;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",Контрагент);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",  ДоговорКонтрагента);	
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ТипыОпераций", ДоговорКонтрагента.ТипОперации);	
	Иначе
		Проводка.СчетКт       = СчетБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СубконтоБУ1);				
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СубконтоБУ2);				
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СубконтоБУ3);		
	КонецЕсли;
	
	Если Проводка.СчетКт.Валютный Тогда
		Проводка.ВалютаКт        = ЦС_ОбщегоНазначенияКлиентСерверПовтИсп.ВалютаРегУчета();
		Проводка.ВалютнаяСуммаКт = СуммаДокумента;
	КонецЕсли;
	
	Если УчитыватьКПН Тогда
		ПроводкаНУ = ПроводкиНУ.Добавить();
		ПроводкаНУ.Период = Дата;
		ПроводкаНУ.Организация = Организация;
		ПроводкаНУ.Содержание = "Начисление дисконта";
		
		ПроводкаНУ.СчетДт = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Проводка.СчетДт), , , );
		ПроводкаНУ.СчетКт = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Проводка.СчетКт), , , );
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ЦС_ВидыДисконтирования.Дебиторы") Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СубконтоБУ1);				
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СубконтоБУ2);				
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СубконтоБУ3);				
		Иначе
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Контрагенты",Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",  ДоговорКонтрагента);	
		КонецЕсли;
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ЦС_ВидыДисконтирования.Кредиторы") Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СубконтоБУ1);				
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СубконтоБУ2);				
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СубконтоБУ3);				
		Иначе
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Контрагенты",Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Договоры",  ДоговорКонтрагента);	
		КонецЕсли;
		
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, ВидУчетаНУ);										
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктурноеПодразделение, СтруктурноеПодразделение);				
		ПроводкаНУ.Сумма = СуммаДокумента;
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ДвиженияРег()
	
	//Для Каждого Стр Из График Цикл
	//	НовСтр = Движения.ЦС_ГрафикДисконтирования.Добавить();
	//	НовСтр.Период = НачалоДня(Стр.Период);
	//	НовСтр.Организация = Организация;
	//	НовСтр.Контрагент = Контрагент;
	//	НовСтр.ДатаОкончания = ДоговорКонтрагента.ДатаОкончанияДействияДоговора;
	//	НовСтр.Договор = ДоговорКонтрагента;
	//	НовСтр.СуммаПлатежа = Стр.СуммаПериода;
	//КонецЦикла;
	
	Для Каждого Стр Из График Цикл
		НовоеДвиж = Движения.ЦС_Дисконтирование.Добавить();
		НовоеДвиж.Период = НачалоДня(Стр.Период);
		НовоеДвиж.Организация = Организация;
		НовоеДвиж.ВидДвижения = ВидДвиженияНакопления.Приход;
		НовоеДвиж.Контрагент = Контрагент;
		НовоеДвиж.ДоговорКонтрагента = ДоговорКонтрагента;
		НовоеДвиж.Сумма = Стр.СуммаПериода;
	КонецЦикла;
	
	НовДвиж2 = Движения.ЦС_СписокДисконтирования.Добавить();
	НовДвиж2.Организация = Организация;
	НовДвиж2.Контрагент = Контрагент;
	НовДвиж2.Договор = ДоговорКонтрагента;
	НовДвиж2.Сумма = СуммаДокумента;
	НовДвиж2.ДатаПереноса = ДобавитьМесяц(ДоговорКонтрагента.ДатаОкончанияДействияДоговора, -12);	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если График.Итог("СуммаПериода") <> СуммаДокумента Тогда
		СП = Новый СообщениеПользователю;
		СП.Текст = "Не совпадает сумма документа и суммы начисления амортизации по строкам!";
		СП.Сообщить();
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры
