&НаКлиенте
//Хранит настройку пользователя "Открывать настройку движений"
Перем ОткрыватьНастройкуДвижений;


&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)	
	Объект.СтруктурноеПодразделение = Неопределено;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	НеИзменять = Ложь;
	Док = РеквизитФормыВЗначение("Объект");
	
	//#Если ТонкийКлиент ИЛИ ТолстыйКлиент Тогда 
	//РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Док.ВидОперации), Док, ЭтаФорма);
	//#КонецЕсли

	ЦС_ОбщегоНазначенияСервер.ЗаполнитьРеквизитыПриСозданииНаСервере(ЭтаФорма,Объект);
	
	Элементы.Организация.ТолькоПросмотр = Не УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ЦС_ОбщегоНазначенияКлиентСерверПовтИсп.ТекущийПользователь(), "УчетПоВсемОрганизациям");
	
	Если ЦС_ОбщегоНазначенияКлиентСерверПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений() Тогда
		Элементы.СтруктурноеПодразделение.Видимость = Истина;
	КонецЕсли;
	
	НастройкаПравДоступа.УстановитьДоступностьФормыДляРедактирования(Док, ЭтаФорма);
	
	УстановитьВидимость();

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("Организация, ОргИзменять", Объект.Организация,Элементы.Организация.ТолькоПросмотр);
	ВыбранныйЭлем = ОткрытьФормуМодально("ОбщаяФорма.ЦС_ФормаВыбораСтрукЕдУпр", СтруктураПараметров);

	Если ВыбранныйЭлем <> Неопределено Тогда
		Объект.СтруктурноеПодразделение	= ВыбранныйЭлем.СтруктурноеПодразделение;
		Если Объект.Организация <> ВыбранныйЭлем.организация Тогда
			 Объект.Организация = ВыбранныйЭлем.организация
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ЦС_ОбщегоНазначенияКлиентСерверПовтИсп.ТекущийПользователь(), "ПоказыватьДвиженияПриПроведении");	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(Объект.Проведен,ОткрыватьНастройкуДвижений,Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента.ДатаНачалаДействияДоговора) и ЗначениеЗаполнено(Объект.ДоговорКонтрагента.ДатаОкончанияДействияДоговора) Тогда
		//ДоговорКонтрагентаПриИзмененииНаСервере(Объект.ДоговорКонтрагента.ДатаНачалаДействияДоговора,Объект.ДоговорКонтрагента.ДатаОкончанияДействияДоговора);
	Иначе
		СП = Новый СообщениеПользователю;
		СП.Текст = "Заполните даты начала и окончания действия Договора!";
		СП.Сообщить();
	КонецЕсли;
КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзмененииНаСервере(ДатаНач, ДатаКон)
	мДлинаСуток = 86400;
	Объект.СрокДисконта = Окр((НачалоДня(ДатаКон)- НачалоДня(ДатаНач))/мДлинаСуток);
	//Если НЕ ЗначениеЗаполнено(Объект.ДатаДисконтирования)Тогда
	//	Объект.ДатаДисконтирования = ДатаКон;
	//КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СтавкаДисконта) Тогда
		Объект.СуммаДисконта = 1/Pow(1+Объект.СтавкаДисконта/100,Объект.СрокДисконта/365)*Объект.ДоговорКонтрагента.СуммаДоговора;
		Объект.СуммаДокумента = Объект.ДоговорКонтрагента.СуммаДоговора - Объект.СуммаДисконта;
	Иначе
		СП = Новый СообщениеПользователю;
		СП.Текст = "Заполните Договор контрагента и Ставку дисконта!";
		СП.Сообщить();
	КонецЕсли;
		
КонецПроцедуры
		
&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	
	ОбработатьИзменениеСчета("БУ");                                                                                                                             

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСчета(ДтКт)
	
	ТекущиеДанные = Объект.СчетБУ;
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
	"Субконто"+ДтКт+"1", "Субконто"+ДтКт+"2", "Субконто"+ДтКт+"3");
	
	ТекущиеДанные = Новый Структура("Субконто1, Субконто2, Субконто3",
	"Субконто"+ДтКт+"1", "Субконто"+ДтКт+"2", "Субконто"+ДтКт+"3");
	СчетДтКт = "Счет"+ДтКт;
	ТекущиеДанные.Вставить(СчетДтКт, Объект["Счет"+ДтКт]);
	
	ЦС_ОбщегоНазначенияБПКлиентСервер.ПриВыбореСчета(ТекущиеДанные["Счет"+ДтКт], ЭтаФорма, ПоляФормы, Неопределено, Истина);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
	"Субконто"+ДтКт+"1", "Субконто"+ДтКт+"2", "Субконто"+ДтКт+"3");
	
	ТекущиеДанные.Вставить("Субконто"+ДтКт+"1",Неопределено);
	ТекущиеДанные.Вставить("Субконто"+ДтКт+"2",Неопределено);
	ТекущиеДанные.Вставить("Субконто"+ДтКт+"3",Неопределено);
	ЦС_ОбщегоНазначенияБПКлиентСервер.ПриИзмененииСчета(ТекущиеДанные["Счет"+ДтКт], ТекущиеДанные, ПоляОбъекта);
	
	СвойстваСчета = ЦС_ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные["Счет"+ДтКт]);
	ЗаполнитьЗначенияСвойств(Объект, ТекущиеДанные);
	
	Если Объект.СубконтоБУ1 = Неопределено Тогда
		Элементы.СубконтоБУ1.Доступность = Ложь;
	Иначе
		Элементы.СубконтоБУ1.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.СубконтоБУ2 = Неопределено Тогда
		Элементы.СубконтоБУ2.Доступность = Ложь;
	Иначе
		Элементы.СубконтоБУ2.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.СубконтоБУ3 = Неопределено Тогда
		Элементы.СубконтоБУ3.Доступность = Ложь;
	Иначе
		Элементы.СубконтоБУ3.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры 
 
Процедура СчетЗатратПриИзмененииНаСервере()
	СчетБУ   = Объект.СчетЗатрат;
	
	ПроцедурыБухгалтерскогоУчета.ПриВыбореСчетаВТабличномПоле(СчетБУ,
	Объект.СубконтоБУ1, Элементы.СубконтоБУ1,
	Объект.СубконтоБУ2, Элементы.СубконтоБУ2,
	Объект.СубконтоБУ3, Элементы.СубконтоБУ3);
	
КонецПроцедуры

&НаСервере
// Процедура устанавливает видимость закладок. 
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	Элементы.УчитыватьКПН.Видимость = ЭтаФорма.ОрганизацияПлательщикНалогаНаПрибыль;
	Элементы.ВидУчетаНУ.Видимость 	= Объект.УчитыватьКПН;

КонецПроцедуры // УстановитьВидимость()

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	УчитыватьКПНПриИзмененииНаСервере();
	
КонецПроцедуры

Процедура УчитыватьКПНПриИзмененииНаСервере()
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
// Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)
	
	ОсновныеДействияФормыНастройкаНаСервере();
    	
КонецПроцедуры

&НаСервере
// Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройкаНаСервере()
	
	//Док = РеквизитФормыВЗначение("Объект");
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(Параметры.Ключ.Пустая(),Объект.Ссылка, Ложь);
	//ЗначениеВРеквизитФормы(Док,"Объект");
	   	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаДисконтаПриИзменении(Элемент)
	СтавкаДисконтаПриИзмененииНаСервере();
КонецПроцедуры

Процедура СтавкаДисконтаПриИзмененииНаСервере()
	Объект.СуммаДисконта = 1/Pow(1+Объект.СтавкаДисконта/100,Объект.СрокДисконта/365)*Объект.ДоговорКонтрагента.СуммаДоговора;
	Объект.СуммаДокумента = Объект.ДоговорКонтрагента.СуммаДоговора - Объект.СуммаДисконта;
КонецПроцедуры

&НаКлиенте
Процедура ДатаДисконтированияПриИзменении(Элемент)
Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента.ДатаОкончанияДействияДоговора)Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере(Объект.ДатаДисконтирования,Объект.ДоговорКонтрагента.ДатаОкончанияДействияДоговора);
	Иначе
		СП = Новый СообщениеПользователю;
		СП.Текст = "Заполните дату окончания Договора!";
		СП.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГрафик(Команда)
	Если Объект.График.Количество()>0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена.Продолжить ?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Объект.График.Очистить();
	КонецЕсли;
	ЗаполнитьГрафикНаСервере();
КонецПроцедуры

Процедура ЗаполнитьГрафикНаСервере()
	Если КонецДня(Объект.ДатаДисконтирования) = КонецМесяца(Объект.ДатаДисконтирования) Тогда
		ДатаНач = КонецДня(Объект.ДатаДисконтирования)+1;
	Иначе
		ДатаНач = Объект.ДатаДисконтирования;
	КонецЕсли;
	
	 ДатаКон = Объект.ДоговорКонтрагента.ДатаОкончанияДействияДоговора;
	 СуммаРазн = Объект.СуммаДокумента;
	 ДлинаСуток = 86400;
	 ДатаПериода = ДатаНач;
     СуммаТаб = 0;
	 Пока ДатаПериода < ДатаКон Цикл
		НоваяСтр = Объект.График.Добавить();
		
		СтруктураДляРасчета = Новый Структура;
		СтруктураДляРасчета.Вставить("ТекДата",ДатаПериода);
		СтруктураДляРасчета.Вставить("ДатаНач",ДатаНач);
		СтруктураДляРасчета.Вставить("ДатаКон",ДатаКон);
		СтруктураДляРасчета.Вставить("ТекущаяСтрокаТЧ",НоваяСтр);
		
		ПолучитьПериод(СтруктураДляРасчета);

		КолВоДней = Окр((КонецДня(НоваяСтр.Период)- НачалоДня(ДатаПериода))/ДлинаСуток);
		НоваяСтр.СуммаПериода = СуммаРазн/Объект.СрокДисконта* КолВоДней;
		ДатаПериода = НачалоМесяца(ДобавитьМесяц(ДатаПериода,1));
		
		СуммаТаб = СуммаТаб + НоваяСтр.СуммаПериода;
	 КонецЦикла;
	 
	 Если СуммаТаб<>Объект.СуммаДокумента Тогда
		 Разница = Объект.СуммаДокумента-СуммаТаб;
		 Объект.График[Объект.График.Количество()-1].СуммаПериода = Объект.График[Объект.График.Количество()-1].СуммаПериода+Разница; 
	 КонецЕсли;
КонецПроцедуры

 Процедура ПолучитьПериод(СтруктураДляРасчета)
	 
	 ДатаНачала 	= СтруктураДляРасчета.ДатаНач;	 
	 ДатаОкончания  = СтруктураДляРасчета.ДатаКон;
	 ДатаПериода 	= СтруктураДляРасчета.ТекДата;
	 ТекСтрокаТЧ 	= СтруктураДляРасчета.ТекущаяСтрокаТЧ;
	 
	 
	 Если КонецМесяца(Датаначала) = КонецМесяца(ДатаПериода) Тогда
		 ТекСтрокаТЧ.Период = КонецМесяца(Датаначала);
	 ИначеЕсли КонецМесяца(ДатаОкончания) = КонецМесяца(ДатаПериода) Тогда
		 ТекСтрокаТЧ.Период = ДатаОкончания;
	 Иначе	 
		 ТекСтрокаТЧ.Период = КонецМесяца(ДатаПериода);
	 КонецЕсли;
	 
 КонецПроцедуры
