// Процедура выполняет формирование движений по регистрам УправленческиеНачисления и ВзаиморасчетыСРаботниками
// предназначенным для расчетов с работниками
// Такие движения формируются только для тех, у кого выставлен флажок УчетНачисленийПоОрганизации
// Параметры:
//	Отказ		- признак отказа от проведения документа,
//	Заголовок	- Заголовок для сообщений об ошибках проведения.
//
Процедура СформироватьНачисленияРаботников(Отказ, КурсВалютыУпрУчета, ВалютаУпрУчета, Заголовок = "")
	
	// Проверка
	//	Поля:
	//		Физлицо
	// Проверка - есть ли хоть одна запись для отражения в упручете
	//
	
	ПроверкаТекст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ
	|	Результаты.ФизЛицо
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Результаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников.СрезПоследних(&парамКонец) КАК УчетЗаработкаРаботников
	|		ПО Результаты.ФизЛицо = УчетЗаработкаРаботников.Физлицо
	|
	|ГДЕ
	|	Результаты.ПериодРегистрации = &парамПериодРегистрации И
	|	(УчетЗаработкаРаботников.УчетНачисленийПоОрганизации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Результаты.ФизЛицо
	|ИЗ
	|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Результаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников.СрезПоследних(&парамКонец) КАК УчетЗаработкаРаботников
	|		ПО Результаты.ФизЛицо = УчетЗаработкаРаботников.Физлицо
	|
	|ГДЕ
	|	Результаты.ПериодРегистрации = &парамПериодРегистрации И
	|	(УчетЗаработкаРаботников.УчетНачисленийПоОрганизации)";
	
	Запрос = Новый Запрос(ПроверкаТекст);
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамКонец", КонецМесяца(ПериодРегистрации));
	
	Если Запрос.Выполнить().Выбрать().Количество() = 0 Тогда
		// если нет работников по которым необходимо выполнить отражение 
		// зарплаты в упручете - возврат
		Возврат;
	КонецЕсли;
	
	
	// Периоды
	//	Поля:
	//		Период           - дата изменения состояния работника
	//		ФизЛицо
	//		ГрафикРаботы
	//		Подразделение
	//
	
	ПериодыТекст = 
	"ВЫБРАТЬ
	|	&парамНачало КАК Период,
	|	Срез.ФизЛицо КАК ФизЛицо,
	|	Срез.ГрафикРаботы КАК ГрафикРаботы,
	|	Срез.Подразделение КАК Подразделение
	|ИЗ
	|	РегистрСведений.Работники.СрезПоследних(&парамНачало) КАК Срез
	|
	|ГДЕ
	|	(Срез.ЗанимаемыхСтавок > 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Период,
	|	Работники.ФизЛицо,
	|	Работники.ГрафикРаботы,
	|	Работники.Подразделение
	|ИЗ
	|	РегистрСведений.Работники КАК Работники
	|
	|ГДЕ
	|	Работники.Период > &парамНачало И
	|	Работники.Период <= &парамКонец";
	
	
	// ДанныеГрафика
	//	Поля:
	//		ДатаС
	//		ДатаПо
	//		ГрафикРаботы
	//		Дни
	//		Часы
	//		
	//	Данные по графикам работы с промежутками, встречающимися у работников из СписокФизлиц
	//
	ДанныеГрафикаТекст = 
	"ВЫБРАТЬ
	|	Периоды.ДатаС КАК ДатаС,
	|	Периоды.ДатаПо КАК ДатаПо,
	|	Периоды.ГрафикРаботы КАК ГрафикРаботы,
	|	СУММА(Графики.ОсновноеЗначение) КАК Дни,
	|	СУММА(Графики.ДополнительноеЗначение) КАК Часы
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПериодыОсновная.Период КАК ДатаС,
	|		ВЫБОР КОГДА (МИНИМУМ(ПериодыВспомогательная.Период)) ЕСТЬ NULL  ТОГДА &парамКонец ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(ПериодыВспомогательная.Период), СЕКУНДА, -(1)) КОНЕЦ КАК ДатаПо,
	|		ПериодыОсновная.ГрафикРаботы КАК ГрафикРаботы
	|	ИЗ
	|		(" + ПериодыТекст + ") КАК ПериодыОсновная
	|			ЛЕВОЕ СОЕДИНЕНИЕ (" + ПериодыТекст + ") КАК ПериодыВспомогательная
	|			ПО ПериодыВспомогательная.ФизЛицо = ПериодыОсновная.ФизЛицо И ПериодыВспомогательная.Период > ПериодыОсновная.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПериодыОсновная.Период,
	|		ПериодыОсновная.ФизЛицо,
	|		ПериодыОсновная.ГрафикРаботы) КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК Графики
	|		ПО (Графики.ВидУчетаВремени = &парамПоДням) И Периоды.ГрафикРаботы = Графики.ГрафикРаботы И Графики.Дата >= Периоды.ДатаС И Графики.Дата <= Периоды.ДатаПо
    |
	|СГРУППИРОВАТЬ ПО
	|	Периоды.ДатаС,
	|	Периоды.ДатаПо,
	|	Периоды.ГрафикРаботы";
	
	
	// РаботникиПериоды
	//	Поля:
	//		ДатаС          	- дата начала периода
	//		ДатаПо			- дата конца периода
	//		ФизЛицо			
	//		ГрафикРаботы
	//		Подразделение
	//		
	//	Список работников с периодами в которые действовали подразделение и график работы
	//
	РаботникиПериодыТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыОсновная.Период КАК ДатаС,
	|	ВЫБОР КОГДА (МИНИМУМ(ПериодыВспомогательная.Период)) ЕСТЬ NULL  ТОГДА &парамКонец ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(ПериодыВспомогательная.Период), СЕКУНДА, -(1)) КОНЕЦ КАК ДатаПо,
	|	ПериодыОсновная.ФизЛицо КАК ФизЛицо,
	|	ПериодыОсновная.ГрафикРаботы КАК ГрафикРаботы,
	|	ПериодыОсновная.Подразделение КАК Подразделение
	|ИЗ
	|	(" + ПериодыТекст + ") КАК ПериодыОсновная
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ПериодыТекст + ") КАК ПериодыВспомогательная
	|		ПО ПериодыВспомогательная.ФизЛицо = ПериодыОсновная.ФизЛицо И ПериодыВспомогательная.Период > ПериодыОсновная.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыОсновная.Период,
	|	ПериодыОсновная.ФизЛицо,
	|	ПериодыОсновная.ГрафикРаботы,
	|	ПериодыОсновная.Подразделение";
	
		
	
	// Начисления
	//	Поля:
	//		Физлицо
	//		Результат
	//	Список начислений по физлицам
	//  Начислениями в пользу работников считается то, что лежит во 
	//  ВзаиморасчетыСРаботникамиОрганизаций и в регистре расчета с 
	//  удержаниями - все удержания (кроме ИПН и ОПВ) "гасят" задолженность компании 
	//  перед работником
	//
	НачисленияТекст = 
	"ВЫБРАТЬ
	|	Результаты.Физлицо КАК Физлицо,
	|	СУММА(Результаты.Результат) КАК Результат,
	|	СУММА(Результаты.РезультатСдельно) КАК РезультатСдельно,
	|	СУММА(Результаты.РезультатУдержания) КАК РезультатУдержания
	|ИЗ
	|	(ВЫБРАТЬ
	|		Результаты.ФизЛицо КАК Физлицо,
	|		Результаты.Результат КАК Результат,
	|		ВЫБОР КОГДА Результаты.ВидРасчета.СпособРасчета = &СдельныйЗаработок ТОГДА Результаты.Результат ИНАЧЕ 0 КОНЕЦ КАК РезультатСдельно,
	|		0 КАК РезультатУдержания
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Результаты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников.СрезПоследних(&парамКонец) КАК УчетЗаработкаРаботников
	|			ПО Результаты.ФизЛицо = УчетЗаработкаРаботников.Физлицо
	|	
	|	ГДЕ
	|		Результаты.ПериодРегистрации = &парамНачало И
	|		(УчетЗаработкаРаботников.УчетНачисленийПоОрганизации) И
	|		(Результаты.Результат <> 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Результаты.ФизЛицо,
	|		Результаты.Результат,
	|		ВЫБОР КОГДА Результаты.ВидРасчета.СпособРасчета = &СдельныйЗаработок ТОГДА Результаты.Результат ИНАЧЕ 0 КОНЕЦ,
	|		0
	|	ИЗ
	|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Результаты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников.СрезПоследних(&парамКонец) КАК УчетЗаработкаРаботников
	|			ПО Результаты.ФизЛицо = УчетЗаработкаРаботников.Физлицо
	|	
	|	ГДЕ
	|		Результаты.ПериодРегистрации >= &парамНачало И
	|		Результаты.ПериодРегистрации < &парамКонец И
	|		(УчетЗаработкаРаботников.УчетНачисленийПоОрганизации) И
	|		(Результаты.Результат <> 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Результаты.ФизЛицо,
	|		0,
	|		0,
	|		Результаты.Налог
	|	ИЗ
	|		РегистрНакопления.ИПНРасчетыСБюджетом КАК Результаты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников.СрезПоследних(&парамКонец) КАК УчетЗаработкаРаботников
	|			ПО Результаты.ФизЛицо = УчетЗаработкаРаботников.Физлицо
	|	
	|	ГДЕ
	|		(НАЧАЛОПЕРИОДА(Результаты.Период, МЕСЯЦ) = &парамНачало) И
	|		Результаты.ВидДвижения = &парамПриход И
	|		Результаты.ВидСтроки = &парамВидСтроки И
	|		(УчетЗаработкаРаботников.УчетНачисленийПоОрганизации) И
	|		(Результаты.Налог <> 0)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Результаты.ФизЛицо,
	|		0,
	|		0,
	|		Результаты.Взнос
	|	ИЗ
	|		РегистрНакопления.ОПВРасчетыСФондами КАК Результаты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников.СрезПоследних(&парамКонец) КАК УчетЗаработкаРаботников
	|			ПО Результаты.ФизЛицо = УчетЗаработкаРаботников.Физлицо
	|	
	|	ГДЕ
	|		(НАЧАЛОПЕРИОДА(Результаты.Период, МЕСЯЦ) = &парамНачало) И
	|		Результаты.ВидДвижения = &парамПриход И
	|		Результаты.ВидСтроки = &парамВидСтроки И
	|		(УчетЗаработкаРаботников.УчетНачисленийПоОрганизации) И
	|		(Результаты.Взнос <> 0)) КАК Результаты
	|
	|СГРУППИРОВАТЬ ПО
	|	Результаты.Физлицо";
	
	
	// НачисленияРаботников
	//	Поля:
	//		ДатаС
	//		ДатаПо
	//		ФизЛицо
	//		ГрафикРаботы
	//		Подразделение
	//		Дни
	//		Часы
	//		Результат
	//	Данные для ввода в регистр начислений работников. Результат - суммарный результат по 
	//	физлицу, который еще нужно распределить по всем строкам физлица пропорционально 
	//	отработанным дням
	
	НачисленияРаботниковТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиПериоды.ДатаС,
	|	РаботникиПериоды.ДатаПо,
	|	РаботникиПериоды.ФизЛицо,
	|	РаботникиПериоды.ФизЛицо.Наименование КАК ФизЛицоНаименование,
	|	РаботникиПериоды.ГрафикРаботы,
	|	РаботникиПериоды.Подразделение,
	|	ВЫБОР КОГДА ДанныеГрафика.Дни  ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДанныеГрафика.Дни  КОНЕЦ КАК Дни,
	|	ВЫБОР КОГДА ДанныеГрафика.Часы ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДанныеГрафика.Часы КОНЕЦ КАК Часы,
	|	Начисления.Результат,
	|	Начисления.РезультатСдельно,
	|	Начисления.РезультатУдержания
	|ИЗ
	|	(" + НачисленияТекст + ") КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + РаботникиПериодыТекст + ") КАК РаботникиПериоды
	|		ПО РаботникиПериоды.ФизЛицо = Начисления.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ДанныеГрафикаТекст + ") КАК ДанныеГрафика
	|		ПО ДанныеГрафика.ГрафикРаботы = РаботникиПериоды.ГрафикРаботы И ДанныеГрафика.ДатаС = РаботникиПериоды.ДатаС И ДанныеГрафика.ДатаПо = РаботникиПериоды.ДатаПо";
		
	
	Запрос = Новый Запрос(НачисленияРаботниковТекст);
	
	Запрос.УстановитьПараметр("парамНачало", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамКонец", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПоДням", Перечисления.ВидыУчетаВремени.ПоДням);
	Запрос.УстановитьПараметр("парамПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("СдельныйЗаработок", Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
	Запрос.УстановитьПараметр("парамПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки", Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		// не нашли работников по которым нужно отразить зарплату в упручете
		Возврат;
	КонецЕсли;
	
	ВспВыборка = РезультатЗапроса.Выбрать();  // вспомогательная выборка для подсчета суммы дней по работнику
	СтруктураПоиска = Новый Структура("Физлицо");
	
	ТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	Выборка.Следующий();
	Пока Истина Цикл
		Если Выборка.ФизЛицо <> ТекущееФизлицо Тогда
			
			ТекущееФизлицо = Выборка.ФизЛицо;
			СтруктураПоиска.Физлицо = Выборка.ФизЛицо;
			ОтработаноДней = 0;
			
			РаспределенныйРезультат = 0;
			РаспределенныйРезультатСдельно = 0;
			РаспределенныйРезультатУдержания = 0;
			
			ВспВыборка.НайтиСледующий(СтруктураПоиска);
			
			Пока ВспВыборка.ФизЛицо = ТекущееФизлицо Цикл
				ОтработаноДней = ОтработаноДней + ВспВыборка.Дни;
				Если не ВспВыборка.Следующий() Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			// в регистр взаиморасчетов с работниками вносим одну запись на работника
			Строка = Движения.ВзаиморасчетыСРаботниками.Добавить();
			// свойства  
			Строка.Период 		= КонецМесяца(ПериодРегистрации);
			Строка.ВидДвижения	= ВидДвиженияНакопления.Приход;
			// измерения
			Строка.Физлицо		= Выборка.ФизЛицо;
			// ресурсы
			Строка.СуммаУпр		= (Выборка.Результат - Выборка.РезультатУдержания) / КурсВалютыУпрУчета;
			
			// для корректировки удержания с целью устранения ошибок округления
			СуммаВзаиморасчета  = Строка.СуммаУпр;
			
		КонецЕсли;
			
		Если ОтработаноДней = 0 Тогда
			
			// ошибка - не можем отразить зарплату в упручете
			ОбщегоНазначения.ОшибкаПриПроведении("Не заполнен рабочий график работника "+Выборка.ФизЛицоНаименование+" в управленческом учете!", Отказ, Заголовок);
			
			Если не Выборка.Следующий() Тогда 
				Прервать;
			КонецЕсли;
		
		Иначе
			
			РезультатВВалютеУпрУчета 		  = (Выборка.Результат - Выборка.РезультатСдельно)/ КурсВалютыУпрУчета;
			РезультатСдельноВВалютеУпрУчета   = Выборка.РезультатСдельно / КурсВалютыУпрУчета;
			РезультатУдержанияВВалютеУпрУчета = Выборка.РезультатУдержания / КурсВалютыУпрУчета;
			
			ПоследняяСтрока = Неопределено;
			ПоследняяСтрокаСдельно = Неопределено;
			ПоследняяСтрокаУдержания = Неопределено;
			ПоследняяСтрокаВыборки = Ложь;
			
			// иначе - формируем движения
			Пока Выборка.ФизЛицо = ТекущееФизлицо Цикл
				Результат 		 	= (Выборка.Результат - Выборка.РезультатСдельно)* Выборка.Дни / ОтработаноДней / КурсВалютыУпрУчета;
				РезультатСдельно 	= Выборка.РезультатСдельно * Выборка.Дни / ОтработаноДней / КурсВалютыУпрУчета;
				РезультатУдержания 	= Выборка.РезультатУдержания * Выборка.Дни / ОтработаноДней / КурсВалютыУпрУчета;
				
				РаспределенныйРезультат 	   	 = РаспределенныйРезультат + Результат;
				РаспределенныйРезультатСдельно 	 = РаспределенныйРезультатСдельно + РезультатСдельно;
				РаспределенныйРезультатУдержания = РаспределенныйРезультатУдержания + РезультатУдержания;
				
				// в регистр начислений по работникам
				Если Результат <> 0 Тогда 
					ПоследняяСтрока = Движения.УправленческиеНачисления.Добавить();
					
					ПоследняяСтрока.ПериодРегистрации 	= ПериодРегистрации;
					ПоследняяСтрока.ПериодДействияНачало = Выборка.ДатаС;
					ПоследняяСтрока.ПериодДействияКонец  = Выборка.ДатаПо;
					ПоследняяСтрока.ВидРасчета			= ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерии;
					
					// измерения
					ПоследняяСтрока.ФизЛицо				= Выборка.ФизЛицо;
					
					// ресурсы
					ПоследняяСтрока.Результат			= Результат;
					ПоследняяСтрока.ОтработаноДней		= Выборка.Дни;
					ПоследняяСтрока.ОтработаноЧасов		= Выборка.Часы;
					
					// реквизиты
					ПоследняяСтрока.Подразделение		= Выборка.Подразделение;
					ПоследняяСтрока.Авторасчет			= Истина;
				КонецЕсли;
				
				Если РезультатСдельно <> 0 Тогда 
					ПоследняяСтрокаСдельно = Движения.УправленческиеНачисления.Добавить();
					
					ПоследняяСтрокаСдельно.ПериодРегистрации 	= ПериодРегистрации;
					ПоследняяСтрокаСдельно.ПериодДействияНачало = Выборка.ДатаС;
					ПоследняяСтрокаСдельно.ПериодДействияКонец  = Выборка.ДатаПо;
					ПоследняяСтрокаСдельно.ВидРасчета			= ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерииСдельно;
					
					// измерения
					ПоследняяСтрокаСдельно.ФизЛицо				= Выборка.ФизЛицо;
					
					// ресурсы
					ПоследняяСтрокаСдельно.Результат			= РезультатСдельно;
					ПоследняяСтрокаСдельно.ОтработаноДней		= Выборка.Дни;
					ПоследняяСтрокаСдельно.ОтработаноЧасов		= Выборка.Часы;
					
					// реквизиты
					ПоследняяСтрокаСдельно.Подразделение		= Выборка.Подразделение;
					ПоследняяСтрокаСдельно.Авторасчет			= Истина;
				КонецЕсли;
				
				Если РезультатУдержания <> 0 Тогда 
					ПоследняяСтрокаУдержания = Движения.УправленческиеУдержания.Добавить();
					
					ПоследняяСтрокаУдержания.ПериодРегистрации 	= ПериодРегистрации;
					ПоследняяСтрокаУдержания.ВидРасчета			= ПланыВидовРасчета.УправленческиеУдержания.УдержаноПоБухгалтерии;
					
					// измерения
					ПоследняяСтрокаУдержания.ФизЛицо			= Выборка.ФизЛицо;
					
					// ресурсы
					ПоследняяСтрокаУдержания.Результат			= РезультатУдержания;
					
					// реквизиты
					ПоследняяСтрокаУдержания.Подразделение		= Выборка.Подразделение;
					ПоследняяСтрокаУдержания.Авторасчет			= Истина;
				КонецЕсли;
				
				ПоследняяСтрокаВыборки = Не Выборка.Следующий();
				Если ПоследняяСтрокаВыборки Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПоследняяСтрока <> Неопределено Тогда
				ПоследняяСтрока.Результат 		 = ПоследняяСтрока.Результат + (РезультатВВалютеУпрУчета - РаспределенныйРезультат);
			КонецЕсли;
			Если ПоследняяСтрокаСдельно <> Неопределено Тогда
				ПоследняяСтрокаСдельно.Результат = ПоследняяСтрокаСдельно.Результат + (РезультатСдельноВВалютеУпрУчета - РаспределенныйРезультатСдельно);
			КонецЕсли;
			Если ПоследняяСтрокаУдержания <> Неопределено Тогда
				ПоследняяСтрокаУдержания.Результат = ПоследняяСтрокаУдержания.Результат + (РезультатВВалютеУпрУчета + РезультатСдельноВВалютеУпрУчета - СуммаВзаиморасчета - РаспределенныйРезультатУдержания);
			КонецЕсли;
			Если ПоследняяСтрокаВыборки Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры  // СформироватьНачисленияРаботников

Процедура СформироватьВыплатыРаботникам(Отказ, КурсВалютыУпрУчета)
	// сначала получим момент времени последнего проведенного отражения
	ЗапросМомента = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОтражениеВУчетеБухгалтерскихРасчетовСПерсоналом.МоментВремени
	|ИЗ
	|	Документ.ОтражениеВУчетеБухгалтерскихРасчетовСПерсоналом КАК ОтражениеВУчетеБухгалтерскихРасчетовСПерсоналом
	|ГДЕ
	|	ОтражениеВУчетеБухгалтерскихРасчетовСПерсоналом.Дата < &парамТекущаяДата
	|	И (НЕ ОтражениеВУчетеБухгалтерскихРасчетовСПерсоналом.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтражениеВУчетеБухгалтерскихРасчетовСПерсоналом.Дата УБЫВ");
	
	ЗапросМомента.УстановитьПараметр("парамТекущаяДата", Дата);
	Выборка = ЗапросМомента.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		МоментВремениПрошлый = Новый МоментВремени('0001.01.01', Документы.ОтражениеВУчетеБухгалтерскихРасчетовСПерсоналом.ПустаяСсылка());
	Иначе
		Выборка.Следующий();
		МоментВремениПрошлый = Выборка.МоментВремени;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Результаты.Физлицо,
	|	СУММА(Результаты.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК Результаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Работники.СрезПоследних(&парамКонец) КАК Работники
	|		ПО Результаты.Физлицо = Работники.Физлицо
	|
	|ГДЕ
	|	Результаты.МоментВремени > &парамМоментВремениПрошлый И
	|	Результаты.МоментВремени < &парамМоментВремениТекущий И
	|	Результаты.ВидДвижения = &парамРасход
	|
	|СГРУППИРОВАТЬ ПО
	|	Результаты.Физлицо");

	Запрос.УстановитьПараметр("парамКонец", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамМоментВремениПрошлый", МоментВремениПрошлый);
	Запрос.УстановитьПараметр("парамМоментВремениТекущий", МоментВремени());
	Запрос.УстановитьПараметр("парамРасход", ВидДвиженияНакопления.Расход);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() = 0 Тогда
		// не нашли работников по которым нужно отразить зарплату в упручете
		Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Строка = Движения.ВзаиморасчетыСРаботниками.Добавить();
		// свойства  
		Строка.Период 		= КонецМесяца(ПериодРегистрации);
		Строка.ВидДвижения	= ВидДвиженияНакопления.Расход;
		// измерения
		Строка.Физлицо		= Выборка.ФизЛицо;
		// ресурсы
		Строка.СуммаУпр		= Выборка.СуммаВзаиморасчетов / КурсВалютыУпрУчета;

	 КонецЦикла;
	 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Перем ВалютаУпрУчета;
	Перем КурсВалютыУпрУчета;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	ПроведениеРасчетов.ПолучитьКурсВалютыУпрУчета(ПериодРегистрации, ВалютаУпрУчета, КурсВалютыУпрУчета, Константы.ВалютаРегламентированногоУчета.Получить());
	
	// если не задан курс валюты управленческого учета, то отражать в управленческом учете невозможно
	Если КурсВалютыУпрУчета = 0 Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не задан курс валюты управленческого учета!", Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	// сформируем начисления работников, начислдения которых отражаются в упручете
	// и проведем по регистрам УправленческиеНачисления и ВзаиморасчетыСРаботниками
	СформироватьНачисленияРаботников(Отказ, КурсВалютыУпрУчета, ВалютаУпрУчета, Заголовок);
	
	// сформируем выплаты по всем работникам
	СформироватьВыплатыРаботникам(Отказ, КурсВалютыУпрУчета);
	
КонецПроцедуры

