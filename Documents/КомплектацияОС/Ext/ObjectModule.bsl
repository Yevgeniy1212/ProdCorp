////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА 

#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой //
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
Функция ПечатьДокумента()
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КомплектацияОС.Номер,
	|	КомплектацияОС.Дата,
	|	ВЫРАЗИТЬ(КомплектацияОС.РодительскоеОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)) КАК Комплект,
	|	КомплектацияОС.Ответственный
	|ИЗ
	|	Документ.КомплектацияОС КАК КомплектацияОС
	|ГДЕ
	|	КомплектацияОС.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	
	Макет = ПолучитьМакет("КомплектацияОС");
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	ОсновноеСредство КАК ОС,
	|	СостояниеВСоставеОС Как СостояниеВСоставеОС
	|ИЗ
	|	Документ.КомплектацияОС.ОС КАК КомплектацияОС
	|
	|ГДЕ
	|	КомплектацияОС.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеСредство
	|";
	
	ЗапросКомплектующие = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КомплектацияОС";
	
	// Выводим шапку накладной      
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Комплектация основных средств", глСписокПрефиксовУзлов);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Комплект");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);
	
	Для каждого ВыборкаСтрокКомплектующие Из ЗапросКомплектующие Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокКомплектующие.ОС) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В одной из строк не заполнено значение основного средства - строка при печати пропущена.");
			Продолжить;
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокКомплектующие);
		ОбластьМакета.Параметры.НомерСтроки = ЗапросКомплектующие.Индекс(ВыборкаСтрокКомплектующие) + 1;
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.ОтветственныйПредставление = "/"+ Шапка.Ответственный + "/";
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
		
КонецФункции // ПечатьДокумента()
	
// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходмое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяМакета = "КомплектацияОС" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьДокумента();
	КонецЕсли;
		
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("КомплектацияОС", "Комплектация ОС");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("РодительскоеОсновноеСредство, Организация");

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОС(Отказ, Заголовок)

	ИмяТабличнойЧасти = "ОС";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство, СостояниеВСоставеОС");
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС",СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТабОС, Отказ, Заголовок)
	
	СоставОсновныхСредств = Движения.СоставОС;
	ДвиженияСобытиеОС	  = Движения.СобытияОСОрганизаций;
	
	ТаблицаОС = ТабОС.Скопировать();
	ТаблицаОС.Свернуть("ОсновноеСредство");
	СписокОС = ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	//сначала найдем тек. информацию по комплектации для всех ОС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	Запрос.УстановитьПараметр("ДатаДок", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("РодительскоеОС",   РодительскоеОсновноеСредство);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоставОССрезПоследних.ВСоставеОС,
	|	СоставОССрезПоследних.СостояниеВСоставеОС,
	|	СоставОССрезПоследних.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.СоставОС.СрезПоследних(
	|		&ДатаДок, 				 
	|		ОсновноеСредство В (&СписокОС)
	|) КАК СоставОССрезПоследних";		
	
	ТаблицаСоставОС = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаОС Из ТабОС Цикл
		
		СтрокаСоставОС = Неопределено;
		Если ТаблицаСоставОС.Количество() <> 0 Тогда
			СтрокаСоставОС = ТаблицаСоставОС.Найти(СтрокаОС.ОсновноеСредство, "ОсновноеСредство");
		КонецЕсли;
		
		Если СтрокаСоставОС <> Неопределено Тогда
			
			Если СтрокаОС.СостояниеВСоставеОС = Перечисления.ВидыСостоянийВСоставеОС.ВключеноВСостав Тогда
				// пытаются включить основное средство, которое уже содержится в комплекте другого ОС.
				Если (СтрокаСоставОС.СостояниеВСоставеОС = Перечисления.ВидыСостоянийВСоставеОС.ВключеноВСостав) Тогда	
					Сообщить("""" + СтрокаОС.ОсновноеСредство + """ код <" + СокрЛП(СтрокаОС.ОсновноеСредство.Код) + "> уже содержится  в составе ОС: " + """" + СтрокаСоставОС.ВСоставеОС + """");
					Отказ = Истина;
					Возврат;
				КонецЕсли;	
				
			ИначеЕсли СтрокаОС.СостояниеВСоставеОС = Перечисления.ВидыСостоянийВСоставеОС.ИсключеноИзСостава Тогда	
				
				Если (СтрокаСоставОС.СостояниеВСоставеОС = Перечисления.ВидыСостоянийВСоставеОС.ИсключеноИзСостава) Тогда
					
					// пытаются исключить ОС, которое уже было исключено из состава данного родительского ОС	   
					Если (СтрокаСоставОС.ВСоставеОС = РодительскоеОсновноеСредство) Тогда
					
						Сообщить("""" + СтрокаОС.ОсновноеСредство + """ код <" + СокрЛП(СтрокаОС.ОсновноеСредство.Код) + "> уже было исключено из состава ОС: " + """" + РодительскоеОсновноеСредство + """");			
						Отказ = Истина;
						Возврат;
					// пытаются исключить основное средство, которое уже было исключено из состава какого-либо основного средства 	
					// но не включено в состав текущего родительского ОС.
					Иначе
						Сообщить("""" + СтрокаОС.ОсновноеСредство + """ код <" + СокрЛП(СтрокаОС.ОсновноеСредство.Код) + "> не содержится в составе ОС " + """" + РодительскоеОсновноеСредство + """. Чтобы исключить из комплекта, необходимо сначала включить его в состав комплекта");			
						Отказ = Истина;
						Возврат;
					КонецЕсли;
				
				ИначеЕсли  (СтрокаСоставОС.СостояниеВСоставеОС = Перечисления.ВидыСостоянийВСоставеОС.ВключеноВСостав) Тогда
				
					Если (СтрокаСоставОС.ВСоставеОС <> РодительскоеОсновноеСредство) Тогда
						// пытаются исключить ОС, которое не содержится в комплекте данного ОС.	
						Сообщить("""" + СтрокаОС.ОсновноеСредство + """ код <" + СокрЛП(СтрокаОС.ОсновноеСредство.Код) + "> не содержится в составе ОС " + """" + РодительскоеОсновноеСредство + """. Чтобы исключить из комплекта, необходимо сначала включить его в состав комплекта");			
						Отказ = Истина;
						Возврат;
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЕсли;
			
		ИначеЕсли СтрокаОС.СостояниеВСоставеОС = Перечисления.ВидыСостоянийВСоставеОС.ИсключеноИзСостава Тогда
			
			Сообщить("""" + СтрокаОС.ОсновноеСредство + """ код <" + СокрЛП(СтрокаОС.ОсновноеСредство.Код) + "> не содержится в составе ОС " + """" + РодительскоеОсновноеСредство + """. Чтобы исключить из комплекта, необходимо сначала включить его в состав комплекта");			
			Отказ = Истина;
			Возврат;
						
		КонецЕсли;	
			
		Движение = СоставОсновныхСредств.Добавить();
		
		Движение.Период           	 = СтруктураШапкиДокумента.Дата;
		Движение.ОсновноеСредство 	 = СтрокаОС.ОсновноеСредство;
		Движение.ВСоставеОС        	 = СтруктураШапкиДокумента.РодительскоеОсновноеСредство;
		Движение.СостояниеВСоставеОС = СтрокаОС.СостояниеВСоставеОС;
		
		//движения по регистру  СобытияОСОрганизаций
		Движение = ДвиженияСобытиеОС.Добавить();
		
		Движение.Период         		   = СтруктураШапкиДокумента.Дата;
		Движение.ОсновноеСредство		   = СтрокаОС.ОсновноеСредство;
		Движение.Организация	   		   = Организация;
		Движение.СтруктурноеПодразделение  = СтруктураШапкиДокумента.СтруктурноеПодразделение;
		Движение.Событие        		   = СтруктураШапкиДокумента.СобытиеОС;
		Движение.НазваниеДокумента		   = Метаданные().Представление();
		Движение.НомерДокумента 		   = Номер;

	КонецЦикла;

КонецПроцедуры // ДвиженияПоРегистрам

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)
 
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
    ТаблицаПоОС = ОС.Выгрузить();
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТабличнойЧастиОС(Отказ, Заголовок);

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры	// ОбработкаПроведения

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();