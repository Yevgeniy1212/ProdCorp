// - БК - начало
Перем мОтображатьСтруктурныеПодразделения Экспорт;
// - БК - конец

//////////////////////////////////////////////////////////////////////////////////
//// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////

// Формирует текст запроса для округления указанного поля до нужного числа знаков в меньшую сторону
// Параметры:
//	ИмяПоляСумма - имя поля в запросе, значение которого надо округлить
//	ИмяПоляРазмерОкругления - имя поля в запросе, в котором задается значение, до которого требуется округлить
//	ЧислоЗнаковПослеЗапятой - число знаков в поле после запятой
//
// Возвращаемое значение:
//	строка - текст на языке запросов для формирования поля, с округленным значением
//
Функция СформироватьТекстЗапросаДляОкругления(ИмяПоляСумма, Знач ИмяПоляРазмерОкругления, ЧислоЗнаковПослеЗапятой = 2) Экспорт
	
	ИмяПоляРазмерОкругления = "ВЫБОР КОГДА " + ИмяПоляРазмерОкругления + " = 0 ТОГДА 1 ИНАЧЕ " + ИмяПоляРазмерОкругления + " КОНЕЦ";

	ТекстРазмерностьРезультата = "ЧИСЛО(15, " + Формат(ЧислоЗнаковПослеЗапятой, "ЧГ=0; ЧН=0; ЧДЦ=0") + ")";
	
	ТекстДеление = "ВЫРАЗИТЬ(" + ИмяПоляСумма + " / " + ИмяПоляРазмерОкругления + " КАК " + ТекстРазмерностьРезультата + ")";
	
	ТекстУмножение = "ВЫРАЗИТЬ(" + ИмяПоляРазмерОкругления + " * " + ТекстДеление + " КАК " + ТекстРазмерностьРезультата + ")";
	
	ТекстУмножение_1 = "ВЫРАЗИТЬ(" + ИмяПоляРазмерОкругления + " * (" + ТекстДеление + " - 1) КАК " + ТекстРазмерностьРезультата + ")";
		
	Текст = "
	|ВЫБОР КОГДА " + ИмяПоляСумма + " - " + ТекстУмножение + " >= 0 ТОГДА
	|	" + ТекстУмножение + "
	|ИНАЧЕ
	|	" + ТекстУмножение_1 + "
	|КОНЕЦ
	|";

	Возврат Текст;
КонецФункции // СформироватьТекстЗапросаДляОкругления()

// Формирует запрос по документу.
//
Функция СформироватьЗапросДляПечати(СортироватьПоТабельномуНомеру = Истина)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",   Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента",	  Дата);

	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("Увольнение", 		Перечисления.ПричиныИзмененияСостояния.Увольнение);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК Физлицо
	               |ПОМЕСТИТЬ ВТ_СписокФизЛиц
	               |ИЗ
	               |	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	               |ГДЕ
	               |	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = &ДокументСсылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Физлицо";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплатеОрганизацииЗарплата.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР 
	|		КОГДА (ФИОФизЛицСрезПоследних.Фамилия) ЕСТЬ NULL  
	|			ТОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо.Наименование 
	|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество 
	|	КОНЕЦ КАК ФИОФизЛица,
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.СуммаКВыплате) КАК Сумма,
	|	РаботникиОрганизации.Сотрудник.Код КАК ТабельныйНомер
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, Физлицо В (ВЫБРАТЬ ФизЛицо ИЗ ВТ_СписокФизЛиц)) КАК ФИОФизЛицСрезПоследних
	|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|								РаботникиОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
	|								МАКСИМУМ(РаботникиОрганизации.Период) КАК Период
	|							ИЗ
	|								РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|													&ДатаДокумента, 
	|													Организация = &ГоловнаяОрганизация 
	|													И (Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство)
	|												 	И Сотрудник.Физлицо В (ВЫБРАТЬ ФизЛицо ИЗ ВТ_СписокФизЛиц)
	|													И ПричинаИзмененияСостояния <> &Увольнение
	|												) КАК РаботникиОрганизации
	|							СГРУППИРОВАТЬ ПО
	|								РаботникиОрганизации.Сотрудник.ФизЛицо) КАК РаботникиОрганизацииСрезПоследних
	|			ПО ЗарплатаКВыплатеОрганизацииЗарплата.ФизЛицо = РаботникиОрганизацииСрезПоследних.ФизЛицо
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|			ПО РаботникиОрганизацииСрезПоследних.ФизЛицо = РаботникиОрганизации.Сотрудник.ФизЛицо
	|				И РаботникиОрганизацииСрезПоследних.Период = РаботникиОрганизации.Период
	|				И РаботникиОрганизации.Организация = &ГоловнаяОрганизация 
	|				И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство)
	|               И РаботникиОрганизации.ПричинаИзмененияСостояния <> &Увольнение
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО 
	|	ЗарплатаКВыплатеОрганизацииЗарплата.ФизЛицо,
	|	ВЫБОР 
	|		КОГДА (ФИОФизЛицСрезПоследних.Фамилия) ЕСТЬ NULL  
	|			ТОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо.Наименование 
	|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество 
	|	КОНЕЦ,
	|	РаботникиОрганизации.Сотрудник.Код	
	|	
	|УПОРЯДОЧИТЬ ПО";
	Если СортироватьПоТабельномуНомеру Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ТабельныйНомер
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	ФИОФизЛица
		|";
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

Функция СоздатьНастройки() Экспорт
	
	НастройкиРасчета = 
		Новый Структура(
			"ПроцентВыплаты,
			 |РазмерОкругления",
			 100,
			 1);
		 
	Если ЗначениеЗаполнено(ПроцентВыплаты) Тогда
		НастройкиРасчета.ПроцентВыплаты = ПроцентВыплаты
	КонецЕсли;
	Если РазмерОкругления <> 0 Тогда
		НастройкиРасчета.РазмерОкругления = РазмерОкругления;
	КонецЕсли;
	
	Возврат НастройкиРасчета;
	
КонецФункции	

Процедура СохранитьНастройки() Экспорт
	
	#Если Клиент Тогда
	НастройкиРасчета = СоздатьНастройки();
	СохранитьЗначение("ЗарплатаКВыплатеОрганизаций_" + СпособРасчетаСуммКВыплате, НастройкиРасчета);
	#КонецЕсли

КонецПроцедуры

Процедура ЗаполнитьПоНастройкам() Экспорт
	
	#Если Клиент Тогда
	НастройкиРасчета =  ВосстановитьЗначение("ЗарплатаКВыплатеОрганизаций_" + СпособВыплаты);
	#Иначе 
	НастройкиРасчета = Неопределено;
	#КонецЕсли

	Если НастройкиРасчета = Неопределено Тогда
		НастройкиРасчета =  СоздатьНастройки();
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиРасчета);
	
КонецПроцедуры


#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой "Т-2".
//
Функция ПечатьТ2(ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗарплатаКВыплатеОрганизации_Т2";
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	
	Макет 		= ПолучитьМакет("Т2");
	
	// получаем данные для печати
	ВыборкаРаботники = СформироватьЗапросДляПечати(?(ИмяМакета = "Т2_ТабельныйНомер", Истина, Ложь)).Выбрать();
	
	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	ОбластьМакетаШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
	ОбластьМакетаШапка			= Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаСтрока 		= Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогПоСтранице	= Макет.ПолучитьОбласть("ИтогПоЛисту");
	ОбластьМакетаПодвал 		= Макет.ПолучитьОбласть("Подвал");
	
	// массив с двумя строками - для разбиения на страницы
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакетаСтрока);
	ВыводимыеОбласти.Добавить(ОбластьМакетаИтогПоСтранице);
	
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	// выводим данные о руководителях организации
		
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(Организация, Дата);
	ОтветЛица 			  = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(Организация, Дата, Ответственный.ФизЛицо);
	
	ОбластьМакетаШапкаДокумента.Параметры.РНН_БИН = ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОбОрганизации, Дата, Ложь);
	ОбластьМакетаШапкаДокумента.Параметры.НазваниеОрганизации 	   = СведенияОбОрганизации.ПолноеНаименование;
	ОбластьМакетаШапкаДокумента.Параметры.ПодразделениеОрганизации = ПодразделениеОрганизации.Наименование;
	ОбластьМакетаШапкаДокумента.Параметры.ФИОРуководителя		   = ОтветЛица.Руководитель;
	ОбластьМакетаШапкаДокумента.Параметры.ФИОГлБуха 			   = ОтветЛица.ГлавныйБухгалтер;
	
	ОбластьМакетаШапкаДокумента.Параметры.НомерДок = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект.Ссылка, глСписокПрефиксовУзлов);
	ОбластьМакетаШапкаДокумента.Параметры.Валюта   = Валюта;
	
	ОбластьМакетаПодвал.Параметры.ФИООтветственного = ОтветЛица.Исполнитель;
                                                                               
	ОбластьМакетаШапкаДокумента.Параметры.ДатаДок = Формат(Дата, "ДФ=""дд ММММ гггг ' года.'""");
	
	Если СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц 
	 Или СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ОстаткиПоЗарплатеНаКонецМесяца 
	 Или СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ПоВидуРасчета 
	 Или СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.АвансЗаМесяц
	 Или СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.АвансЗаПервуюПоловинуМесяца
	Тогда
		
		ОбластьМакетаШапкаДокумента.Параметры.ПериодВыплаты  = "за "+Формат(ПериодНачисленияЗарплаты, "ДФ=ММММ") + " " + Формат(ПериодНачисленияЗарплаты, "ДФ=гггг") + " года.";
		
	ИначеЕсли СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ДепонированнаяЗарплатаЗаМесяц 
		  Или СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ОстаткиПоДепонированнойЗарплатеНаКонецМесяца Тогда
		
		ОбластьМакетаШапкаДокумента.Параметры.ПериодВыплаты  = "за "+Формат(?(ПериодНачисленияДепонированнойЗарплаты = Дата("00010101"), ПериодНачисленияЗарплаты, ПериодНачисленияДепонированнойЗарплаты), "ДФ=ММММ") + " " + Формат(ПериодНачисленияДепонированнойЗарплаты, "ДФ=гггг") + " года.";

	Иначе
		Если ПериодНачисленияЗарплаты = ПериодНачисленияДепонированнойЗарплаты ИЛИ ПериодНачисленияДепонированнойЗарплаты = Дата("00010101") Тогда
			ОбластьМакетаШапкаДокумента.Параметры.ПериодВыплаты  = "за "+Формат(ПериодНачисленияЗарплаты, "ДФ=ММММ") + " " + Формат(ПериодНачисленияЗарплаты, "ДФ=гггг") + " года.";
		Иначе
			ОбластьМакетаШапкаДокумента.Параметры.ПериодВыплаты  = "за "+Формат(Мин(ПериодНачисленияЗарплаты,ПериодНачисленияДепонированнойЗарплаты), "ДЛФ=дд") + " - " + Формат(Макс(ПериодНачисленияЗарплаты,ПериодНачисленияДепонированнойЗарплаты), "ДЛФ=дд");		
		КонецЕсли;
	КонецЕсли;
	
	// Сумма по документу.
	СуммаКВыплате = Зарплата.Итог("СуммаКВыплате");
	ОбластьМакетаШапкаДокумента.Параметры.СуммаДок = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКВыплате, Валюта);

	
	// корреспонденция счетов
	ДепонированнаяСумма = Зарплата.Итог("ДепонированнаяСумма");
	СчетДт = "";
	СчетКт = "";
	
	ИмяПланаСчетов = "Типовой";

	Если СуммаКВыплате <> ДепонированнаяСумма Тогда
		СчетДт = ПланыСчетов[ИмяПланаСчетов].КраткосрочнаяЗадолженностьПоОплатеТруда.Код;
	КонецЕсли;
	Если ДепонированнаяСумма <> 0 Тогда
		Если СчетДт <> "" Тогда
			СчетДт = СчетДт + ", ";
		КонецЕсли;
		СчетДт = СчетДт + ПланыСчетов[ИмяПланаСчетов].КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате.Код;
	КонецЕсли;
		
	СчетКт = ПланыСчетов[ИмяПланаСчетов].ДенежныеСредстваВКассе.Код;

	ОбластьМакетаШапкаДокумента.Параметры.СчетДт = СчетДт;
	ОбластьМакетаШапкаДокумента.Параметры.СчетКт = СчетКт;	
	
	ТабДокумент.Вывести(ОбластьМакетаШапкаДокумента);
	ОбластьМакетаШапка.Параметры.Валюта = Валюта;
	ТабДокумент.Вывести(ОбластьМакетаШапка);
	
	ВыведеноСтраниц = 1; ВыведеноСтрок = 0; ИтогоНаСтранице = 0; ИтогоПоВедомости = 0;
	// выводим данные по строкам документа.
	Пока ВыборкаРаботники.Следующий() Цикл
	
		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаРаботники);
		
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		ОбластьМакетаСтрока.Параметры.НомерСтроки = ВыведеноСтрок;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			
			ОбластьМакетаИтогПоСтранице.Параметры.ИтогоНаСтранице = ИтогоНаСтранице;
			ТабДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьМакетаШапка);
			ВыведеноСтраниц = ВыведеноСтраниц + 1;
			ИтогоНаСтранице = 0;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
		ИтогоНаСтранице  = ИтогоНаСтранице + ВыборкаРаботники.Сумма;
		ИтогоПоВедомости = ИтогоПоВедомости + ВыборкаРаботники.Сумма;

	КонецЦикла;
	
	Если ВыведеноСтрок = 0 Тогда
		СчПечати = 0;
		ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
		ОбластьМакетаСтрока.Параметры.ФИОФизлица = " " + Символы.ПС + " ";
		Пока УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти) Цикл
			СчПечати = СчПечати + 1;
			Если СчПечати > 15 Тогда 
				Прервать;
			КонецЕсли;			
			ТабДокумент.Вывести(ОбластьМакетаСтрока);
		КонецЦикла;
	КонецЕсли;
	
	ОбластьМакетаИтогПоСтранице.Параметры.ИтогоНаСтранице = ИтогоНаСтранице;
	ТабДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
	ОбластьМакетаПодвал.Параметры.ИтогоПоВедомости = ИтогоПоВедомости;
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	// Выведем количество страниц в ведомости
	ТабДокумент.Область("КоличествоЛистов").Текст = ВыведеноСтраниц;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьТ2()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Выполняет автозаполнение табличной части документа по сумме задолженности
// 
// Параметры:
//	ЗаполнитьСуществующиеСтроки - булево, если Истина, то выбираются только данные по физлицам из табличной части документа
//
Процедура Автозаполнение(ЗаполнитьСуществующиеСтроки) Экспорт
	
	Если СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ПоВидуРасчета Тогда
		Если ВидРасчета = Неопределено Тогда
			#Если Клиент Тогда
			Предупреждение("Не заполнен вид расчета!");
			#КонецЕсли
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
		Если НЕ ЗначениеЗаполнено(Банк) Тогда
			#Если Клиент Тогда
			Предупреждение("Не заполнен банк!");
			#КонецЕсли
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	
	Запрос = Новый Запрос();
	
	Если ЗаполнитьСуществующиеСтроки Тогда
		// составим список физлиц с признаком Авторасчет = Истина
		СписокФизЛиц = Новый СписокЗначений;
		Для Каждого СтрокаТЧ Из Зарплата Цикл
			Если СтрокаТЧ.Авторасчет Тогда
				СписокФизЛиц.Добавить(СтрокаТЧ.Физлицо);
			КонецЕсли;
		КонецЦикла;
		Запрос.УстановитьПараметр("парамСписокФизЛиц", СписокФизЛиц);		
	Иначе
		Зарплата.Очистить();
	КонецЕсли;

	ДатаАктуальности = Макс(Дата, КонецМесяца(ПериодНачисленияЗарплаты));
	
	Запрос.УстановитьПараметр("парамДата", ДатаАктуальности);
	Запрос.УстановитьПараметр("парамГраница", Новый Граница(ДатаАктуальности, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("парамПодразделениеОрганизации", ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("парамПериодНачисленияЗарплаты", ПериодНачисленияЗарплаты);
	Запрос.УстановитьПараметр("парамПериодНачисленияДепонированнойЗарплаты", ?(ПериодНачисленияДепонированнойЗарплаты = Дата("00010101"), ПериодНачисленияЗарплаты, ПериодНачисленияДепонированнойЗарплаты));
	Запрос.УстановитьПараметр("парамВидРасчета", ВидРасчета);	
	Запрос.УстановитьПараметр("парамВыплачено",Перечисления.ВыплаченностьЗарплаты.Выплачено);
	Запрос.УстановитьПараметр("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);	
	Запрос.УстановитьПараметр("парамБанк", Банк);
	Запрос.УстановитьПараметр("парамСпособРасчетаАванса", СпособРасчетаАванса);
	Запрос.УстановитьПараметр("парамАвансПроцентом", Перечисления.СпособыРасчетаАвансов.ПроцентомОтМесячнойТарифнойСтавки);
	
	// Список способов расчета начислений по часам
	СписокСпособовРасчетаОтЧасовойТарифнойСтавки = Новый СписокЗначений;
	СписокСпособовРасчетаОтЧасовойТарифнойСтавки.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	СписокСпособовРасчетаОтЧасовойТарифнойСтавки.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
	
	Запрос.УстановитьПараметр("парамСписокСпособовРасчетаОтЧасовойТарифнойСтавки", СписокСпособовРасчетаОтЧасовойТарифнойСтавки);
	
	// Список способов расчета начислений по месячным тарифным ставкам
	СписокСпособовРасчетаОтМесячнойТарифнойСтавки = Новый СписокЗначений;
	СписокСпособовРасчетаОтМесячнойТарифнойСтавки.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	СписокСпособовРасчетаОтМесячнойТарифнойСтавки.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	
	Запрос.УстановитьПараметр("парамСписокСпособовРасчетаОтМесячнойТарифнойСтавки", СписокСпособовРасчетаОтМесячнойТарифнойСтавки);
	
	СписокСпособовРасчетаОтМЗП = Новый СписокЗначений;
	СписокСпособовРасчетаОтМЗП.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням);
	СписокСпособовРасчетаОтМЗП.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам);
	
	Запрос.УстановитьПараметр("парамСписокСпособовРасчетаОтМЗП", СписокСпособовРасчетаОтМЗП);
	
	Запрос.УстановитьПараметр("парамПоДневнойТарифнойСтавке", Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	
	Запрос.УстановитьПараметр("парамСменный", Перечисления.ВидыРабочихГрафиков.Сменный);
	Запрос.УстановитьПараметр("парамПоДням", Перечисления.ВидыУчетаВремени.ПоДням);
	Запрос.УстановитьПараметр("парамУвольнение", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("парамПроцентВыплаты", ПроцентВыплаты / 100);
	Запрос.УстановитьПараметр("парамРазмерОкругления", РазмерОкругления);
	Запрос.УстановитьПараметр("парамДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("парамРеглВалюта", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("парамПустаяВалюта", Справочники.Валюты.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамПрекратить", Перечисления.ВидыДействияСНачислением.Прекратить);
	Запрос.УстановитьПараметр("парамПустаяДата", '00010101');
	Запрос.УстановитьПараметр("парамТипПоказателяТарифныйРазряд", Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд);
	Запрос.УстановитьПараметр("парамДатаПеречисления", ДатаАктуальности);
	
	
	Если СпособРасчетаСуммКВыплате <> Перечисления.СпособыРасчетаСуммКВыплате.ПоВидуРасчета 
			И СпособРасчетаСуммКВыплате <> Перечисления.СпособыРасчетаСуммКВыплате.АвансЗаМесяц
			И СпособРасчетаСуммКВыплате <> Перечисления.СпособыРасчетаСуммКВыплате.АвансЗаПервуюПоловинуМесяца Тогда
		
		// выбор сумм к выплате на основании задолженности
	
		ТекстЗапросаПоЗарплате = "
		|ВЫБРАТЬ
		|	ФизЛицо,
		|	СуммаВзаиморасчетовОстаток * &парамПроцентВыплаты КАК Сумма,
		|	0 КАК ДепонированнаяСумма,
		|	&парамВыплачено КАК ВыплаченностьЗарплаты
		|ИЗ 
		|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&парамГраница, Организация = &парамОрганизация ";
		
		Если СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц 
		 ИЛИ СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаИДепонированнаяЗарплата 
		 ИЛИ СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаИОстаткиПоДепонированнойЗарплате Тогда

			ТекстЗапросаПоЗарплате = ТекстЗапросаПоЗарплате + " И ПериодВзаиморасчетов = &парамПериодНачисленияЗарплаты";
		Иначе
			ТекстЗапросаПоЗарплате = ТекстЗапросаПоЗарплате + " И ПериодВзаиморасчетов <= КОНЕЦПЕРИОДА(&парамПериодНачисленияЗарплаты, МЕСЯЦ)";
		КонецЕсли;
		
		Если ЗаполнитьСуществующиеСтроки Тогда
			ТекстЗапросаПоЗарплате = ТекстЗапросаПоЗарплате + " И ФизЛицо В (&парамСписокФизЛиц)";
		КонецЕсли;
	
		ТекстЗапросаПоЗарплате = ТекстЗапросаПоЗарплате + ")";
		
		ТекстЗапросаПоДепонированнойЗарплате = "
		|ВЫБРАТЬ 
		|	ФизЛицо,
		|	0 КАК Сумма,
		|	СуммаВзаиморасчетовОстаток * &парамПроцентВыплаты КАК ДепонированнаяСумма,
		|	&парамВыплачено КАК ВыплаченностьЗарплаты
		|ИЗ 
		|	РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций.Остатки(&парамГраница, Организация = &парамОрганизация ";
		
		Если СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ДепонированнаяЗарплатаЗаМесяц 
		 ИЛИ СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаИДепонированнаяЗарплата Тогда
			
			ТекстЗапросаПоДепонированнойЗарплате = ТекстЗапросаПоДепонированнойЗарплате + " И ПериодВзаиморасчетов = &парамПериодНачисленияДепонированнойЗарплаты";
		Иначе
			ТекстЗапросаПоДепонированнойЗарплате = ТекстЗапросаПоДепонированнойЗарплате + " И ПериодВзаиморасчетов <= КОНЕЦПЕРИОДА(&парамПериодНачисленияДепонированнойЗарплаты, МЕСЯЦ)"	
		КонецЕсли;

		Если ЗаполнитьСуществующиеСтроки Тогда
			ТекстЗапросаПоДепонированнойЗарплате = ТекстЗапросаПоДепонированнойЗарплате + " И ФизЛицо В (&парамСписокФизЛиц)";
		КонецЕсли;
		
		ТекстЗапросаПоДепонированнойЗарплате = ТекстЗапросаПоДепонированнойЗарплате + ")";
		
		Если СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц Тогда
			ДанныеРеглУчетаТекст = ТекстЗапросаПоЗарплате;
		
		ИначеЕсли СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ОстаткиПоЗарплатеНаКонецМесяца Тогда
			ДанныеРеглУчетаТекст = ТекстЗапросаПоЗарплате;
		
		ИначеЕсли СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ДепонированнаяЗарплатаЗаМесяц Тогда
			ДанныеРеглУчетаТекст = ТекстЗапросаПоДепонированнойЗарплате;
		
		ИначеЕсли СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ОстаткиПоДепонированнойЗарплатеНаКонецМесяца Тогда
			ДанныеРеглУчетаТекст = ТекстЗапросаПоДепонированнойЗарплате;
		
		Иначе
			// нужен выбор из двух регистров
			ДанныеРеглУчетаТекст = "
			|ВЫБРАТЬ 
			|	Задолженность.ФизЛицо,
			|	СУММА(Задолженность.Сумма) КАК Сумма,
			|	СУММА(Задолженность.ДепонированнаяСумма) КАК ДепонированнаяСумма,
			|	Задолженность.ВыплаченностьЗарплаты
			|ИЗ
			|	(ВЫБРАТЬ
			|			ДанныеПоЗарплате.ФизЛицо,
			|			ДанныеПоЗарплате.Сумма,
			|			ДанныеПоЗарплате.ДепонированнаяСумма,
			|			ДанныеПоЗарплате.ВыплаченностьЗарплаты
			|		ИЗ 
			|			(" + ТекстЗапросаПоЗарплате + ") КАК ДанныеПоЗарплате
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|			ДанныеПоДепонированнойЗарплате.ФизЛицо,
			|			ДанныеПоДепонированнойЗарплате.Сумма,
			|			ДанныеПоДепонированнойЗарплате.ДепонированнаяСумма,
			|			ДанныеПоДепонированнойЗарплате.ВыплаченностьЗарплаты
			|		ИЗ 
			|			(" + ТекстЗапросаПоДепонированнойЗарплате + ") КАК ДанныеПоДепонированнойЗарплате
			|	) КАК Задолженность
			|
			|СГРУППИРОВАТЬ ПО
			|		Задолженность.ФизЛицо,
			|		Задолженность.ВыплаченностьЗарплаты
			|";			
		КонецЕсли;
	
	ИначеЕсли СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.АвансЗаМесяц Тогда
		
		// Аванс за месяц 
		
		Если СпособРасчетаАванса = Перечисления.СпособыРасчетаАвансов.ФиксированнойСуммой Тогда
		
			// Фиксированной суммой
			ДанныеРеглУчетаТекст = "
			|ВЫБРАТЬ
			|	Авансы.ФизЛицо,
			|	Авансы.Размер * &парамПроцентВыплаты КАК Сумма,
			|	0 КАК ДепонированнаяСумма,
			|	&парамВыплачено КАК ВыплаченностьЗарплаты
			|ИЗ
			|	РегистрСведений.АвансыРаботникамОрганизаций КАК Авансы
			|
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|								РаботникиОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
			|								МАКСИМУМ(ВЫБОР
			|											КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУвольнение
			|												ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
			|											ИНАЧЕ РаботникиОрганизации.Период
			|										КОНЕЦ) КАК Период
			|							ИЗ
			|								РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|							ГДЕ
			|								РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
			|								И РаботникиОрганизации.Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство
			|								И РаботникиОрганизации.Период <= &парамДата
			|							СГРУППИРОВАТЬ ПО
			|								РаботникиОрганизации.Сотрудник.ФизЛицо) КАК ПоследниеДатыНазначений
			|		ПО Авансы.ФизЛицо = ПоследниеДатыНазначений.ФизЛицо
			|
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|		ПО ПоследниеДатыНазначений.ФизЛицо = РаботникиОрганизации.Сотрудник.ФизЛицо
			|			И ПоследниеДатыНазначений.Период = ВЫБОР
			|													КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУвольнение
			|														ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
			|													ИНАЧЕ РаботникиОрганизации.Период
			|									           КОНЕЦ
			|			И РаботникиОрганизации.Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство
			|			И РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
			|			И РаботникиОрганизации.ОбособленноеПодразделение = &парамОрганизация
			|			И РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУвольнение
			|
			|ГДЕ
			|	Авансы.Организация = &парамОрганизация 
			|	И Авансы.СпособРасчета = &парамСпособРасчетаАванса
			|";
		
		Иначе
			
			// Процентом или для разных людей по-разному
			ПолеВалютаПлановыхНачислений = "
			|ВЫБОР
			|	КОГДА ПлановыеНачисления.ПериодЗавершения <> &парамПустаяДата
			|			И ПлановыеНачисления.ПериодЗавершения < &парамДата
			|		ТОГДА ПлановыеНачисления.Валюта1Завершения
			|	ИНАЧЕ ПлановыеНачисления.Валюта1
			|КОНЕЦ";
		
			// Определим размеры основных начислений в пересчете на месяц
			МесячныеНачисленияТекст = "
			|ВЫБРАТЬ
			|	ПлановыеНачисления.Сотрудник.ФизЛицо КАК ФизЛицо,
			|	ВЫБОР
			|		КОГДА ПлановыеНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда
			|				ИЛИ Показатели.Показатель.ТипПоказателя = &парамТипПоказателяТарифныйРазряд
			|			ТОГДА РазмерыТарифныхСтавок.Размер
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ПлановыеНачисления.ПериодЗавершения <> &парамПустаяДата
			|						И ПлановыеНачисления.ПериодЗавершения < &парамДата
			|					ТОГДА ПлановыеНачисления.Показатель1Завершения
			|				ИНАЧЕ ПлановыеНачисления.Показатель1
			|			  КОНЕЦ
			|	КОНЕЦ * ВЫБОР
			|				КОГДА ((ПлановыеНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда
			|								ИЛИ Показатели.Показатель.ТипПоказателя = &парамТипПоказателяТарифныйРазряд)
			|							И РазмерыТарифныхСтавок.Валюта В (&парамРеглВалюта, &парамПустаяВалюта))
			|						ИЛИ (НЕ (ПлановыеНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда
			|									ИЛИ Показатели.Показатель.ТипПоказателя = &парамТипПоказателяТарифныйРазряд)
			|							И " + ПолеВалютаПлановыхНачислений + " В (&парамРеглВалюта, &парамПустаяВалюта))
			|					ТОГДА 1
			|				ИНАЧЕ ЕСТЬNULL(КурсыВалют.Курс, 1) / ЕСТЬNULL(КурсыВалют.Кратность, 1)
			|			КОНЕЦ КАК Размер,
			|	ПлановыеНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(РаботникиОрганизации.ГрафикРаботы.ИспользуетсяСовместноСПланГрафиком, ЛОЖЬ)
			|			ТОГДА ЕСТЬNULL(БалансРабочегоВремени.НормаДней, 0)
			|		ИНАЧЕ ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.НормаДней, 0)
			|	КОНЕЦ КАК НормаДней,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(РаботникиОрганизации.ГрафикРаботы.ИспользуетсяСовместноСПланГрафиком, ЛОЖЬ)
			|			ТОГДА ЕСТЬNULL(БалансРабочегоВремени.НормаЧасов, 0)
			|		ИНАЧЕ ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.НормаЧасов, 0)
			|	КОНЕЦ КАК НормаЧасов,
			|	РаботникиОрганизации.ПричинаИзмененияСостояния 
			|ИЗ
			|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
			|				&парамДата, 
			|				Организация = &парамГоловнаяОрганизация 
			|				И ВидРасчетаИзмерение.Код ЕСТЬ NULL) КАК ПлановыеНачисления
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели
			|		ПО ПлановыеНачисления.ВидРасчета = Показатели.Ссылка
			|			И (Показатели.НомерСтроки = 1)
			|
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|				&парамДата, 
			|				Организация = &парамГоловнаяОрганизация
			|				И Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство) КАК РаботникиОрганизации
			|		ПО ПлановыеНачисления.Организация = РаботникиОрганизации.Организация
			|			И ПлановыеНачисления.Сотрудник = РаботникиОрганизации.Сотрудник
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|							ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
			|							СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК НормаДней,
			|							СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначениеНорма) КАК НормаЧасов
			|						ИЗ
			|							РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
			|						ГДЕ
			|							ГрафикиРаботыПоВидамВремени.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы
			|							И ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&парамПериодНачисленияЗарплаты, МЕСЯЦ) И КОНЕЦПЕРИОДА(&парамПериодНачисленияЗарплаты, МЕСЯЦ)
			|							И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &парамПоДням 
			|						СГРУППИРОВАТЬ ПО
			|							ГрафикиРаботыПоВидамВремени.ГрафикРаботы) КАК ГрафикиРаботыПоВидамВремени
			|		ПО РаботникиОрганизации.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БалансРабочегоВремени КАК БалансРабочегоВремени
			|		ПО РаботникиОрганизации.ГрафикРаботы = БалансРабочегоВремени.ГрафикРаботы
			|			И БалансРабочегоВремени.ДатаМесяца = &парамПериодНачисленияЗарплаты
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамДата) КАК РазмерыТарифныхСтавок
			|		ПО РаботникиОрганизации.Должность = РазмерыТарифныхСтавок.Должность
			|			И ПлановыеНачисления.ТарифныйРазряд1 = РазмерыТарифныхСтавок.ТарифныйРазряд
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК КурсыВалют
			|		ПО КурсыВалют.Валюта = ВЫБОР
			|									КОГДА ПлановыеНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда
			|											ИЛИ Показатели.Показатель.ТипПоказателя = &парамТипПоказателяТарифныйРазряд
			|										ТОГДА РазмерыТарифныхСтавок.Валюта
			|									ИНАЧЕ " + ПолеВалютаПлановыхНачислений + "
			|								КОНЕЦ
			|			И КурсыВалют.Период = &парамПериодНачисленияЗарплаты
			|
			|ГДЕ
			|	ВЫБОР
			|		КОГДА ПлановыеНачисления.ПериодЗавершения <> &парамПустаяДата
			|				И ПлановыеНачисления.ПериодЗавершения < &парамДата
			|			ТОГДА ПлановыеНачисления.ДействиеЗавершения
			|		ИНАЧЕ ПлановыеНачисления.Действие
			|	КОНЕЦ <> &парамПрекратить
			|	И РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУвольнение
			|	И РаботникиОрганизации.ОбособленноеПодразделение = &парамОрганизация
			|";
			
			Запрос.Текст = МесячныеНачисленияТекст;
			
			МесячныеНачисленияТекст = "
			|ВЫБРАТЬ
			|	МесячныеНачисления.ФизЛицо,
			|	МесячныеНачисления.ПричинаИзмененияСостояния,
			|	ВЫБОР
			|		КОГДА МесячныеНачисления.СпособРасчета В (&парамСписокСпособовРасчетаОтМЗП)
			|			ТОГДА МесячныеНачисления.Размер * ЕСТЬNULL(РегламентированныеРасчетныеПоказатели.РазмерМЗП, 0)
			|		КОГДА МесячныеНачисления.СпособРасчета В (&парамСписокСпособовРасчетаОтМесячнойТарифнойСтавки)
			|			ТОГДА МесячныеНачисления.Размер
			|		КОГДА МесячныеНачисления.СпособРасчета = &парамПоДневнойТарифнойСтавке
			|			ТОГДА МесячныеНачисления.Размер * МесячныеНачисления.НормаДней
			|		КОГДА МесячныеНачисления.СпособРасчета В (&парамСписокСпособовРасчетаОтЧасовойТарифнойСтавки)
			|			ТОГДА МесячныеНачисления.Размер * МесячныеНачисления.НормаЧасов
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Размер
			|ИЗ
			|	(" + МесячныеНачисленияТекст + ") КАК МесячныеНачисления
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&парамДата) КАК РегламентированныеРасчетныеПоказатели
			|		ПО ИСТИНА
			|";
			
			Запрос.Текст = МесячныеНачисленияТекст;
			
			ДанныеРеглУчетаТекст = "
			|ВЫБРАТЬ
			|	Авансы.ФизЛицо КАК ФизЛицо,
			|	СУММА(ВЫБОР
			|			КОГДА Авансы.СпособРасчета = &парамАвансПроцентом 
			|				ТОГДА ВЫРАЗИТЬ(МесячныеНачисления.Размер * Авансы.Размер / 100 КАК ЧИСЛО(15, 2))
			|			ИНАЧЕ Авансы.Размер
			|		  КОНЕЦ * &парамПроцентВыплаты) КАК Сумма,
			|	0 КАК ДепонированнаяСумма,
			|	&парамВыплачено КАК ВыплаченностьЗарплаты
			|ИЗ
			|	РегистрСведений.АвансыРаботникамОрганизаций КАК Авансы
			|	
			|	ЛЕВОЕ СОЕДИНЕНИЕ (" + МесячныеНачисленияТекст + ") КАК МесячныеНачисления
			|		ПО Авансы.ФизЛицо = МесячныеНачисления.ФизЛицо
			|			И МесячныеНачисления.ПричинаИзмененияСостояния <> &парамУвольнение
			|
			|ГДЕ
			|	Авансы.Организация = &парамОрганизация
			|";
			
			Если Не СпособРасчетаАванса.Пустая() Тогда
				
				ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст + "
				|	И Авансы.СпособРасчета = &парамСпособРасчетаАванса
				|";
				
			КонецЕсли;
			
			ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст + "
			|
			|СГРУППИРОВАТЬ ПО
			|	Авансы.ФизЛицо
			|";
			
		КонецЕсли;
		
	ИначеЕсли СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.АвансЗаПервуюПоловинуМесяца Тогда
	
		// Аванс за первую половину месяца (по фактическому расчету)
	
		ДанныеРеглУчетаТекст = "
		|ВЫБРАТЬ
		|	РасчетПервойПоловиныМесяца.ФизЛицо,
		|	РасчетПервойПоловиныМесяца.СуммаВзаиморасчетовОборот * &парамПроцентВыплаты КАК Сумма,
		|	0 КАК ДепонированнаяСумма,
		|	&парамВыплачено КАК ВыплаченностьЗарплаты
		|ИЗ
		|	РегистрНакопления.РасчетПервойПоловиныМесяца.Обороты(
		|			&парамПериодНачисленияЗарплаты,
		|			КОНЕЦПЕРИОДА(&парамПериодНачисленияЗарплаты, МЕСЯЦ),
		|			,
		|			Организация = &парамОрганизация) КАК РасчетПервойПоловиныМесяца
		|ГДЕ
		|	РасчетПервойПоловиныМесяца.СуммаВзаиморасчетовОборот > 0
		|";
	
		
	ИначеЕсли ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда 
											   
		ДанныеРеглУчетаТекст =
		"ВЫБРАТЬ
		|	ОсновныеНачисленияРаботниковОрганизации.ФизЛицо,
		|	СУММА(ОсновныеНачисленияРаботниковОрганизации.Результат * &парамПроцентВыплаты) КАК Сумма,
		|	СУММА(0) КАК ДепонированнаяСумма,
		|	&парамВыплачено КАК ВыплаченностьЗарплаты
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизации
		|
		|ГДЕ
		|	ОсновныеНачисленияРаботниковОрганизации.ПодразделениеОрганизации.Владелец = &парамОрганизация И
		|	ОсновныеНачисленияРаботниковОрганизации.ВидРасчета = &парамВидРасчета И
		|	ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации = &парамПериодНачисленияЗарплаты
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеНачисленияРаботниковОрганизации.ФизЛицо
		|";
												
	ИначеЕсли ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций") Тогда 
	
		ДанныеРеглУчетаТекст =
		"ВЫБРАТЬ
		|	ДополнительныеНачисленияРаботниковОрганизации.ФизЛицо,
		|	СУММА(ДополнительныеНачисленияРаботниковОрганизации.Результат * &парамПроцентВыплаты) КАК Сумма,
		|	0 КАК ДепонированнаяСумма,
		|	&парамВыплачено КАК ВыплаченностьЗарплаты
		|ИЗ
		|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизации
		|
		|ГДЕ
		|	ДополнительныеНачисленияРаботниковОрганизации.ПодразделениеОрганизации.Владелец = &парамОрганизация И
		|	ДополнительныеНачисленияРаботниковОрганизации.ВидРасчета = &парамВидРасчета И
		|	ДополнительныеНачисленияРаботниковОрганизации.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&парамПериодНачисленияЗарплаты, МЕСЯЦ) И КОНЕЦПЕРИОДА(&парамПериодНачисленияЗарплаты, МЕСЯЦ)
		|
		|СГРУППИРОВАТЬ ПО 
		|	ДополнительныеНачисленияРаботниковОрганизации.ФизЛицо
		|";
												
	КонецЕсли;

	// Округлим до заданного размера в меньшую сторону
	Если Окр(РазмерОкругления, 0) = РазмерОкругления Тогда
		ЧислоЗнаковПослеЗапятой = 0;	
	ИначеЕсли Окр(РазмерОкругления, 1) = РазмерОкругления Тогда
		ЧислоЗнаковПослеЗапятой = 1;
	Иначе
		ЧислоЗнаковПослеЗапятой = 2;
	КонецЕсли;

	// Выводим только положительные суммы (без копеек)
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИСТИНА КАК Авторасчет,
	|	Задолженность.ФизЛицо,";
	Если НЕ ЗаполнитьСуществующиеСтроки Тогда
		ТекстЗапроса =ТекстЗапроса + "
	|	КартСчетаФизЛиц.НомерКартСчета,"
	КонецЕсли;   
	ТекстЗапроса = ТекстЗапроса + "
	|	ВЫБОР 
	|		КОГДА Задолженность.Сумма <> 0 ТОГДА Задолженность.Сумма - Задолженность.ДробнаяЧасть 
	|		ИНАЧЕ Задолженность.Сумма 
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР 
	|		КОГДА Задолженность.Сумма = 0  ТОГДА Задолженность.ДепонированнаяСумма - Задолженность.ДробнаяЧасть 
	|		ИНАЧЕ Задолженность.ДепонированнаяСумма 
	|	КОНЕЦ КАК ДепонированнаяСумма,
	|	Задолженность.ВыплаченностьЗарплаты,
	|	Задолженность.СуммаКВыплате - Задолженность.ДробнаяЧасть КАК СуммаКВыплате
	|ИЗ 
	|	(ВЫБРАТЬ
	|		ФизЛицо,
	|	    Сумма,
	|		ДепонированнаяСумма,
	|		ВыплаченностьЗарплаты,
	|		Сумма+ДепонированнаяСумма КАК СуммаКВыплате,
	|		Сумма+ДепонированнаяСумма - " + СформироватьТекстЗапросаДляОкругления("(Сумма + ДепонированнаяСумма)", "&парамРазмерОкругления", ЧислоЗнаковПослеЗапятой) + " КАК ДробнаяЧасть
	|	ИЗ 
	|		(" +ДанныеРеглУчетаТекст +") КАК Задолженность
	|	) КАК Задолженность
	|";
	
	// - КУФИБ - начало
	ТекстФильтрПоСтруктурномуПодразделению = "";
	ТекстУсловиеПоСтруктурномуПодразделению = "";
	Если мОтображатьСтруктурныеПодразделения Тогда
		Запрос.УстановитьПараметр("СтруктурноеПодразделение",СтруктурноеПодразделение);
			ТекстФильтрПоСтруктурномуПодразделению = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	УчетВзаиморасчетов.Сотрудник.ФизЛицо КАК ФизЛицо,
			|	УчетВзаиморасчетов.СтруктурноеПодразделение
			|ИЗ
			|	РегистрСведений.общ_РеглУчетВзаиморасчетовССотрудникамиОрганизаций.СрезПоследних(&парамПериодНачисленияЗарплаты, ОбособленноеПодразделение = &парамОрганизация И Сотрудник.ВидЗанятости<>ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК УчетВзаиморасчетов";
		ТекстФильтрПоСтруктурномуПодразделению = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ("+ТекстФильтрПоСтруктурномуПодразделению+") КАК ФильтрПоСтруктурномуПодразделению										 
		|    	ПО Задолженность.ФизЛицо = ФильтрПоСтруктурномуПодразделению.ФизЛицо";
		ТекстУсловиеПоСтруктурномуПодразделению = "ЕСТЬNULL(ФильтрПоСтруктурномуПодразделению.СтруктурноеПодразделение,ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))=&СтруктурноеПодразделение";
	КонецЕсли;
	// - КУФИБ - конец
	
	Если ЗаполнитьСуществующиеСтроки Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтрокиТЧ.Авторасчет,
		|	СтрокиТЧ.ФизЛицо, 
		|	СтрокиТЧ.НомерКартСчета,
		|	ВЫБОР
		|		КОГДА СтрокиТЧ.Авторасчет ТОГДА ЕСТЬNULL(Задолженность.Сумма, 0)
		|		ИНАЧЕ СтрокиТЧ.Сумма
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА СтрокиТЧ.Авторасчет ТОГДА ЕСТЬNULL(Задолженность.ДепонированнаяСумма, 0)
		|		ИНАЧЕ СтрокиТЧ.ДепонированнаяСумма
		|	КОНЕЦ КАК ДепонированнаяСумма,
		|	СтрокиТЧ.ВыплаченностьЗарплаты,
		|	ВЫБОР
		|		КОГДА СтрокиТЧ.Авторасчет ТОГДА ЕСТЬNULL(Задолженность.СуммаКВыплате, 0)
		|		ИНАЧЕ СтрокиТЧ.СуммаКВыплате
		|	КОНЕЦ КАК СуммаКВыплате
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК СтрокиТЧ
		|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "") +ТекстФильтрПоСтруктурномуПодразделению+?(ТекстУсловиеПоСтруктурномуПодразделению="",""," ГДЕ ")+ТекстУсловиеПоСтруктурномуПодразделению +") КАК Задолженность
		|		ПО СтрокиТЧ.ФизЛицо = Задолженность.ФизЛицо
		|			И Задолженность.СуммаКВыплате > 0
		|
		|ГДЕ
		|   СтрокиТЧ.Ссылка = &парамДокументСсылка
		|	
		|УПОРЯДОЧИТЬ ПО
		|	СтрокиТЧ.НомерСтроки
		|";
	
	Иначе
	
		
		// Оставим только нужное подразделение
		Если Не ПодразделениеОрганизации.Пустая() Тогда
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
				|	МАКСИМУМ(ВЫБОР
				|			КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУвольнение
				|				ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
				|			ИНАЧЕ РаботникиОрганизации.Период
				|		КОНЕЦ) КАК Период
				|ПОМЕСТИТЬ ВТ_РаботникиДатыПоследнихИзменений
				|ИЗ
				|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
				|			&парамДата,
				|			Организация = &парамГоловнаяОрганизация
				|				И Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство) КАК РаботникиОрганизации
				|
				|СГРУППИРОВАТЬ ПО
				|	РаботникиОрганизации.Сотрудник.Физлицо
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ДоговорникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
				|	МАКСИМУМ(ДоговорникиОрганизации.ДатаНачала) КАК ДатаНачала
				|ПОМЕСТИТЬ ВТ_ДоговорникиАктуальнаяДатаДоговора
				|ИЗ
				|	РегистрСведений.ДоговорникиОрганизаций КАК ДоговорникиОрганизации
				|ГДЕ
				|	ДоговорникиОрганизации.ДатаНачала <= &парамДата
				|	И ДоговорникиОрганизации.Организация = &парамГоловнаяОрганизация
				|
				|СГРУППИРОВАТЬ ПО
				|	ДоговорникиОрганизации.Сотрудник.Физлицо
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ДоговорникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
				|	МАКСИМУМ(ДоговорникиОрганизации.Договор.Номер) КАК НомерДоговора
				|ПОМЕСТИТЬ ВТ_ДоговорникиПоследнийДоговор
				|ИЗ
				|	РегистрСведений.ДоговорникиОрганизаций КАК ДоговорникиОрганизации
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДоговорникиАктуальнаяДатаДоговора КАК ДоговорникиОрганизацииСрез
				|		ПО ДоговорникиОрганизации.Сотрудник.Физлицо = ДоговорникиОрганизацииСрез.ФизЛицо
				|			И ДоговорникиОрганизации.ДатаНачала = ДоговорникиОрганизацииСрез.ДатаНачала
				|			И (ДоговорникиОрганизации.Организация = &парамГоловнаяОрганизация)
				|
				|СГРУППИРОВАТЬ ПО
				|	ДоговорникиОрганизации.Сотрудник.Физлицо
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
				|	РаботникиОрганизации.ПодразделениеОрганизации,
				|	ВЫБОР
				|		КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУвольнение
				|			ТОГДА 3
				|		ИНАЧЕ 1
				|	КОНЕЦ КАК Приоритет
				|ПОМЕСТИТЬ ВТ_МестаРаботыПоПриоритетам
				|ИЗ
				|	ВТ_РаботникиДатыПоследнихИзменений КАК ДатыПоследнихНазначений
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
				|		ПО ДатыПоследнихНазначений.ФизЛицо = РаботникиОрганизации.Сотрудник.Физлицо
				|			И (ДатыПоследнихНазначений.Период = ВЫБОР
				|				КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУвольнение
				|					ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
				|				ИНАЧЕ РаботникиОрганизации.Период
				|			КОНЕЦ)
				|			И (РаботникиОрганизации.Организация = &парамГоловнаяОрганизация)
				|			И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство)
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ДоговорникиОрганизации.Сотрудник.Физлицо,
				|	ДоговорникиОрганизации.ПодразделениеОрганизации,
				|	ВЫБОР
				|		КОГДА ДоговорникиОрганизации.ДатаОкончания < &парамДата
				|			ТОГДА 4
				|		ИНАЧЕ 2
				|	КОНЕЦ
				|ИЗ
				|	РегистрСведений.ДоговорникиОрганизаций КАК ДоговорникиОрганизации
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДоговорникиПоследнийДоговор КАК ДоговорникиОрганизацииСрез
				|		ПО ДоговорникиОрганизации.Сотрудник.Физлицо = ДоговорникиОрганизацииСрез.ФизЛицо
				|			И ДоговорникиОрганизации.Договор.Номер = ДоговорникиОрганизацииСрез.НомерДоговора
				|			И (ДоговорникиОрганизации.Организация = &парамГоловнаяОрганизация)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_МестаРаботыПоПриоритетам.ФизЛицо,
				|	МИНИМУМ(ВТ_МестаРаботыПоПриоритетам.Приоритет) КАК Приоритет
				|ПОМЕСТИТЬ ВТ_ПриоритетыФизЛиц
				|ИЗ
				|	ВТ_МестаРаботыПоПриоритетам КАК ВТ_МестаРаботыПоПриоритетам
				|
				|СГРУППИРОВАТЬ ПО
				|	ВТ_МестаРаботыПоПриоритетам.ФизЛицо
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	МестаРаботыПоПриоритетам.ФизЛицо
				|ПОМЕСТИТЬ ВТ_РаботникиИДоговорники
				|ИЗ
				|	ВТ_МестаРаботыПоПриоритетам КАК МестаРаботыПоПриоритетам
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПриоритетыФизЛиц КАК ПриоритетыФизЛиц
				|		ПО МестаРаботыПоПриоритетам.ФизЛицо = ПриоритетыФизЛиц.ФизЛицо
				|			И МестаРаботыПоПриоритетам.Приоритет = ПриоритетыФизЛиц.Приоритет
				|ГДЕ
				|	МестаРаботыПоПриоритетам.ПодразделениеОрганизации В ИЕРАРХИИ(&парамПодразделениеОрганизации)";
			Запрос.Выполнить();
			
			ТекстЗапроса = ТекстЗапроса + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РаботникиИДоговорники КАК РаботникиИДоговорники
			|ПО Задолженность.ФизЛицо = РаботникиИДоговорники.ФизЛицо
			|";
			
		КонецЕсли;
		
		// - КУФИБ - начало
		Если мОтображатьСтруктурныеПодразделения Тогда
			ТекстЗапроса = ТекстЗапроса + ТекстФильтрПоСтруктурномуПодразделению;
		КонецЕсли;
		
		// - КУФИБ - конец
		
		// Надо только тех, кто имеет карт-счета
		Если СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			|							КартСчетаФизЛиц.ФизЛицо,
			|							КартСчетаФизЛиц.НомерКартСчета КАК НомерКартСчета
			|						ИЗ
			|							РегистрСведений.КартСчетаФизЛиц.СрезПоследних(&парамДатаПеречисления) КАК КартСчетаФизЛиц
			|						ГДЕ КартСчетаФизЛиц.АктивностьСчета
			|						" + ?(НЕ Банк.Пустая(),"И КартСчетаФизЛиц.НомерКартСчета.Банк = &парамБанк", "") + "
			|						) КАК КартСчетаФизЛиц
			|	ПО Задолженность.ФизЛицо = КартСчетаФизЛиц.ФизЛицо
			|";

		Иначе
			
			// надо только тех, у кого нет ни одного карт-счета в банках
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			|							КартСчетаФизЛиц.ФизЛицо,
			|							Null КАК НомерКартСчета			
			|						ИЗ
			|							РегистрСведений.КартСчетаФизЛиц.СрезПоследних(&парамДатаПеречисления) КАК КартСчетаФизЛиц
			|						ГДЕ КартСчетаФизЛиц.АктивностьСчета) КАК КартСчетаФизЛиц
			|	ПО Задолженность.ФизЛицо = КартСчетаФизЛиц.ФизЛицо
			|";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ 
		|	Задолженность.СуммаКВыплате - Задолженность.ДробнаяЧасть > 0 ";
		
		// - КУФИБ - начало
		Если мОтображатьСтруктурныеПодразделения Тогда
			ТекстЗапроса = ТекстЗапроса + " И " +ТекстУсловиеПоСтруктурномуПодразделению;
		КонецЕсли;
		
		// - КУФИБ - конец
		Если СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И КартСчетаФизЛиц.ФизЛицо ЕСТЬ NULL";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|УПОРЯДОЧИТЬ ПО 
		|	Задолженность.ФизЛицо.Наименование
		|";
	
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Зарплата.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры //  Автозаполнение

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Т2_ФИО"
			ИЛИ ИмяМакета = "Т2_ТабельныйНомер" тогда
		
		ТабДокумент = ПечатьТ2(ИмяМакета);
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,"Платежная ведомость Т-2 "));
		
	КонецЕсли;

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура();
	Если СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу  Тогда
		СтруктураПечатныхФорм.Вставить("Т2_ФИО","Форма Т-2 (по ФИО работников)");
		СтруктураПечатныхФорм.Вставить("Т2_ТабельныйНомер","Форма Т-2 (по табельным номерам)");
	КонецЕсли;
       	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(Зарплата);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "ФизЛицо");
	
	СуммаДокумента = Зарплата.Итог("Сумма") + Зарплата.Итог("ДепонированнаяСумма");
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ПериодНачисленияДепонированнойЗарплаты = Дата("00010101");
	
КонецПроцедуры

// - БК - начало
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделенийВЗарплате();
// - БК - конец
