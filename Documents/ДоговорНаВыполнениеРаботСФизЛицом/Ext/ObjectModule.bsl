////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 

Перем мДлинаСуток;
Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати()

	Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("Ссылка",				Ссылка);
    Запрос.УстановитьПараметр("Адрес",				Перечисления.ТипыКонтактнойИнформации.Адрес);
    Запрос.УстановитьПараметр("АдресЮридический",	Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
    Запрос.УстановитьПараметр("ФизЛицо", 			ФизЛицо);
    Запрос.УстановитьПараметр("Дата", 				Дата);
    Запрос.УстановитьПараметр("ВалютаРеглУчета", 	мВалютаРегламентированногоУчета.Наименование);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Номер,
	|	ДоговорНаВыполнениеРаботСФизЛицом.Дата,
	|	ВЫРАЗИТЬ(ДоговорНаВыполнениеРаботСФизЛицом.Организация.НаименованиеПолное КАК СТРОКА(1000)) КАК НазваниеОрганизации,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ХарактерОплаты КАК ЧастотаВыплат,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ВидРасчета КАК ВидРасчета,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ВЫБОР 
	|		КОГДА (ФИОФизЛицСрезПоследних.Фамилия) ЕСТЬ NULL  
	|			ТОГДА ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо.Наименование 
	|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество 
	|	КОНЕЦ КАК РаботникНаименование,
	|	ДоговорНаВыполнениеРаботСФизЛицом.СуммаЗаРаботу,
	|	ВЫБОР 
	|		КОГДА ДоговорНаВыполнениеРаботСФизЛицом.ВалютаДокумента = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА &ВалютаРеглУчета
	|		ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.ВалютаДокумента.Наименование 
	|	КОНЕЦ КАК ВалютаДокумента,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид.Наименование КАК ДокументВид,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
	|	ВЫРАЗИТЬ(ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК СТРОКА(1000)) КАК ДокументКемВыдан,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)) КАК АдресОрганизации,
	|	КонтактнаяИнформация.Поле4 КАК Город,
	|	ВЫБОР 
	|		КОГДА (ДоговорНаВыполнениеРаботСФизЛицом.Организация.ОсновнойБанковскийСчет.НомерСчета) ЕСТЬ NULL  
	|			ТОГДА ""__________________"" 
	|		ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.Организация.ОсновнойБанковскийСчет.НомерСчета 
	|	КОНЕЦ КАК НомерСчета,
	|	ВЫБОР 
	|		КОГДА (ДоговорНаВыполнениеРаботСФизЛицом.Организация.ОсновнойБанковскийСчет.Банк.Наименование) ЕСТЬ NULL  
	|			ТОГДА ""_______________________________________________________________________________________"" 
	|		ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.Организация.ОсновнойБанковскийСчет.Банк.Наименование 
	|	КОНЕЦ КАК Банк
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
	|		ПО (ИСТИНА)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&Дата, ФизЛицо = &ФизЛицо) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО (ИСТИНА)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ДоговорНаВыполнениеРаботСФизЛицом.Организация = КонтактнаяИнформация.Объект 
	|			И (КонтактнаяИнформация.Тип = &Адрес) 
	|			И (КонтактнаяИнформация.Вид = &АдресЮридический)
	|
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Ссылка = &Ссылка";
	
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить();
	
КонецФункции

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяМакета = "Договор" Тогда
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ДоговорНаВыполнениеРаботСФизЛицом_Договор";
		
		// получаем макет
		Макет = ПолучитьМакет(ИмяМакета);
		
		// получаем данные для печати
		Выборка = СформироватьЗапросДляПечати().Выбрать();
		Если Выборка.Следующий() Тогда
			Макет.Параметры.Заполнить(Выборка);
			Макет.Параметры.АдресОрганизации = СокрЛП(Выборка.АдресОрганизации);
			Макет.Параметры.НазваниеОрганизации = СокрЛП(Выборка.НазваниеОрганизации);
			Макет.Параметры.ДокументКемВыдан = СокрЛП(Выборка.ДокументКемВыдан);
			Макет.Параметры.ДокументДатаВыдачи = Формат(Выборка.ДокументДатаВыдачи,"ДФ=дд.ММ.гггг");
			Макет.Параметры.ДатаНачала = Формат(Выборка.ДатаНачала,"ДФ=дд.ММ.гггг");
			Макет.Параметры.Номер = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
			Макет.Параметры.ДатаОкончания = Формат(Выборка.ДатаОкончания,"ДФ=дд.ММ.гггг");
		КонецЕсли;
		Макет.Параметры.ЧастотаВыплат = Нрег(Макет.Параметры.ЧастотаВыплат);
		Если Не Выборка.ВидРасчета.ОтОбратного Тогда
			Макет.Параметры.ОбложениеНалогами = ", облагаемых в установленном законодательством порядке налогами";
		Иначе
			Макет.Параметры.ОбложениеНалогами = "";
		КонецЕсли;
				
		ТабДокумент.Вывести(Макет);
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,"Договор "));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Договор","Договор");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)

	// Организация
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан сотрудник!", Отказ, Заголовок);
	Иначе
		
		Если НЕ Сотрудник.Организация = ОбщегоНазначения.ГоловнаяОрганизация(Организация)
			ИЛИ НЕ Сотрудник.СтруктурнаяЕдиница = Организация Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Указан сотрудник другой организации или обособленного подразделения!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	// ХарактерОплаты
	Если НЕ ЗначениеЗаполнено(ХарактерОплаты) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан порядок оплаты!", Отказ, Заголовок);
	КонецЕсли;

	// ДатаНачала
	Если НЕ ЗначениеЗаполнено(ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указаны даты договора!", Отказ, Заголовок);
	ИначеЕсли ДатаНачала > ДатаОкончания Тогда	
		ОбщегоНазначения.ОшибкаПриПроведении("Неверно указаны даты договора!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура выполняет движения в регистрах сведений
//
Процедура ДвиженияРегистров()
	
	////////////////////////////////////////////////////
	// ДоговорникиОрганизаций

	Движение = Движения.ДоговорникиОрганизаций.Добавить();
	
	// Измерения
	Движение.Сотрудник		= Сотрудник;
	Движение.Организация	= ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	Движение.Договор		= Ссылка;
	
	// Ресурсы
	Движение.ДатаНачала		= ДатаНачала;
	Движение.ДатаОкончания	= ДатаОкончания;
	Движение.ХарактерОплаты	= ХарактерОплаты;
	Движение.ОбособленноеПодразделение = Организация;
	
	// Реквизиты
	Движение.ПодразделениеОрганизации = ПодразделениеОрганизации;
	Движение.Должность = Должность;

	////////////////////////////////////////////////////
	// ПлановыеНачисленияРаботниковОрганизаций

	Если ХарактерОплаты = Перечисления.ХарактерВыплатыПоДоговору.Ежемесячно Тогда
		Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
		Движение.Период	= ДатаНачала;
	ИначеЕсли ХарактерОплаты = Перечисления.ХарактерВыплатыПоДоговору.ОднократноВКонцеСрока Тогда
		Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
		Движение.Период	= Макс(НачалоМесяца(ДатаОкончания), ДатаНачала);
	Иначе
		Возврат
	КонецЕсли;
	
	// Измерения
	Движение.Сотрудник			 = Сотрудник;
	Движение.Организация		 = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	Движение.ДокументОснование	 = Ссылка;
	Движение.ВидРасчетаИзмерение = ВидРасчета;
	
	// Ресурсы
	Движение.ВидРасчета		= ВидРасчета;
	Движение.Действие		= Перечисления.ВидыДействияСНачислением.Начать;
	Движение.Показатель1	= СуммаЗаРаботу;
	
	Если НЕ глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].ИспользуютсяНачисленияВВалюте Тогда
		Движение.Валюта1		= мВалютаРегламентированногоУчета;
	Иначе
		Движение.Валюта1		= ВалютаДокумента;
	КонецЕсли;
	
	Движение.ПериодЗавершения 	= ДатаОкончания + мДлинаСуток;
	Движение.ДействиеЗавершения	= Перечисления.ВидыДействияСНачислением.Прекратить;

	////////////////////////////////////////////////////
	// РеглУчетПлановыхНачисленийРаботниковОрганизаций

	Если НЕ СпособОтраженияВБухучете.Пустая() Тогда
		
		Движение = Движения.РеглУчетПлановыхНачисленийРаботниковОрганизаций.Добавить();
		
		// Свойства
		Движение.Период = ДатаНачала;
		
		// Измерения
		Движение.Сотрудник 			= Сотрудник;
		Движение.Организация 		= ОбщегоНазначения.ГоловнаяОрганизация(Организация);
		Движение.ВидРасчета			= ВидРасчета;
		Движение.ДокументОснование	= Ссылка;
		
		// Ресурсы
		Движение.СпособОтраженияВБухучете	= СпособОтраженияВБухучете;
	
	КонецЕсли;
	
	
КонецПроцедуры // ДвиженияРегистров()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если НЕ Отказ Тогда
		
		ДвиженияРегистров()

	КонецЕсли;         
	
КонецПроцедуры

// Процедура обработки заполнения
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипОснования = ТипЗнч(ДанныеЗаполнения);	
	Если ТипОснования = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, "Организация, ВидДоговора, ФизЛицо");
		ЭтотОбъект.Организация = ДанныеЗаполнения.СтруктурнаяЕдиница;
		
		Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
			
			Организация = ""; 
			ВидДоговора = ""; 
			ФизЛицо = "";
			
			Возврат;
		Иначе
			
			Сотрудник = ДанныеЗаполнения;
			
			Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
				ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ДоговорПодряда;
			ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
				ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.АвторскийДоговор;
			ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Лицензионный Тогда
				ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ЛицензионныйДоговор;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументОснование = ДанныеЗаполнения;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

мДлинаСуток = 86400;
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();