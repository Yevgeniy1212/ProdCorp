
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриСозданииНаСервере(ЭтотОбъект);
	
	ПодготовитьФормуНаСервере();
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриЧтенииНаСервере(ЭтотОбъект,ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);		 
	КонецЕсли;
	Если ИсточникВыбора.ИмяФормы = "Справочник.фин_ПлановаяНоменклатура.Форма.ФормаПодбора" Тогда
		ОбработкаВыбораПодборПлановойНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ОбщегоНазначенияКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Для Каждого СтрокаТовар Из ТекущийОбъект.Товары Цикл
		Если СписокПериодовДляВыбора.НайтиПоЗначению(СтрокаТовар.ПериодПланирования)=Неопределено Тогда
			СтрокаТовар.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаТовар.ПериодПланирования,Объект.Сценарий);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТовар Из ТекущийОбъект.Услуги Цикл
		Если СписокПериодовДляВыбора.НайтиПоЗначению(СтрокаТовар.ПериодПланирования)=Неопределено Тогда
			СтрокаТовар.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаТовар.ПериодПланирования,Объект.Сценарий);
		КонецЕсли;
	КонецЦикла;
	Если Объект.ОбластьПланирования=Перечисления.узп_ОбластиПланированияЗакупок.ПоПодразделению Тогда
		Для Каждого СтрокаТовар Из Объект.Товары Цикл
			СтрокаТовар.Подразделение = Объект.Подразделение;
		КонецЦикла;
		Для Каждого СтрокаУслуги Из Объект.Услуги Цикл
			СтрокаУслуги.Подразделение = Объект.Подразделение;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = общ_РаботаСоСтруктурнымиПодразделениями.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИсточникЗаявкиПриИзменении(Элемент)
	Если Объект.ОбластьПланирования=ПредопределенноеЗначение("Перечисление.узп_ОбластиПланированияЗакупок.ПоОрганизации") Тогда
		Объект.Подразделение=ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка");
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	ПриИзмененииСценария();
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗаполненииОснованием", ЭтаФорма,);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Заполнить по документу-основанию?'"), Режим, 0);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "Товары"

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	НоменклатураПриИзмененииНаСервере(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ЦенаКоличествоПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ЦенаКоличествоПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчетОбщейСуммыТоварногоДоговора();	
КонецПроцедуры
 
&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	РассчетОбщейСуммыТоварногоДоговора();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	мКоэффициент = Элементы.Товары.ТекущиеДанные.Коэффициент;
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.Товары.ТекущиеДанные.ПериодПланирования = Объект.ПериодПланирования;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	мКоэффициент = Элементы.Товары.ТекущиеДанные.Коэффициент;
	Элементы.Товары.ТекущиеДанные.Коэффициент = ПолучитьКоэффициентПересчета(Элементы.Товары.ТекущиеДанные.ЕдиницаИзмерения,Элементы.Товары.ТекущиеДанные.Номенклатура);
	Если мКоэффициент<>Элементы.Товары.ТекущиеДанные.Коэффициент И Элементы.Товары.ТекущиеДанные.Цена<>0 Тогда
		Элементы.Товары.ТекущиеДанные.Цена = Элементы.Товары.ТекущиеДанные.Цена / (Элементы.Товары.ТекущиеДанные.Коэффициент/?(мКоэффициент=0,1,мКоэффициент)); 
		ЦенаКоличествоПриИзменении();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоэффициентПриИзменении(Элемент)
	Если мКоэффициент<>Элементы.Товары.ТекущиеДанные.Коэффициент И Элементы.Товары.ТекущиеДанные.Цена<>0 Тогда
		Элементы.Товары.ТекущиеДанные.Цена = Элементы.Товары.ТекущиеДанные.Цена / (Элементы.Товары.ТекущиеДанные.Коэффициент/?(мКоэффициент=0,1,мКоэффициент)); 
		ЦенаКоличествоПриИзменении();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДатаПоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//ДанныеВыбора = СписокПериодов(ЭтаФорма);
	ДанныеВыбора = СписокПериодовДляВыбора;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура",ВыбранноеЗначение)).Количество()=0 Тогда
		НС = Объект.Товары.Добавить();
		НС.Номенклатура = ВыбранноеЗначение;
		НоменклатураПриИзмененииНаСервере(НС.ПолучитьИдентификатор());
		Элементы.Товары.ТекущаяСтрока = НС.ПолучитьИдентификатор();
		ТоварыПриНачалеРедактирования(Элемент, Истина, Ложь);
		//НС.ЕдиницаИзмерения = ПолучитьСвойство(НС.Номенклатура, "ПлановаяЕдиницаИзмерения");
		НС.Коэффициент = 1;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущаяНоменклатура = Элементы.Товары.ТекущиеДанные.Номенклатура;
	узп_УправлениеЗакупкамиКлиент.НоменклатураНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, Ложь, ТекущаяНоменклатура);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "Услуги"

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	НоменклатураПриИзмененииНаСервере(Элементы.Услуги.ТекущиеДанные.ПолучитьИдентификатор(),"Услуги");
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	ЦенаКоличествоПриИзменении("Услуги");
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	ЦенаКоличествоПриИзменении("Услуги");
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчетОбщейСуммыТоварногоДоговора();	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	РассчетОбщейСуммыТоварногоДоговора();	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.Услуги.ТекущиеДанные.ПериодПланирования = Объект.ПериодПланирования;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Объект.Услуги.НайтиСтроки(Новый Структура("Номенклатура",ВыбранноеЗначение)).Количество()=0 Тогда
		НС = Объект.Услуги.Добавить();
		НС.Номенклатура = ВыбранноеЗначение;
		НоменклатураПриИзмененииНаСервере(НС.ПолучитьИдентификатор(),"Услуги");
		Элементы.Услуги.ТекущаяСтрока = НС.ПолучитьИдентификатор();
		УслугиПриНачалеРедактирования(Элемент, Истина, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущаяНоменклатура = Элементы.Услуги.ТекущиеДанные.Номенклатура;
	узп_УправлениеЗакупкамиКлиент.НоменклатураНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, Истина, ТекущаяНоменклатура);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "Дополнительные затраты"

&НаКлиенте
Процедура ДополнительныеЗатратыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчетОбщейСуммыТоварногоДоговора();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеЗатратыПриИзменении(Элемент)
	РассчетОбщейСуммыТоварногоДоговора();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура ПериодНазад(Команда)
	ДобавитьПериод(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПериодВперед(Команда)
	ДобавитьПериод(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПериодВыбрать(Команда)
	ВыбратьПериодПланирования(Объект.ПериодПланирования);
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)
	НачатьПодбор(Элементы.Товары,Ложь,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПодборТоварыПлановая(Команда)
	НачатьПодбор(Элементы.Товары,Истина,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)
	НачатьПодбор(Элементы.Услуги,Ложь,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслугиПлановая(Команда)
	НачатьПодбор(Элементы.Услуги,Истина,Истина);
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьДополнительныеЗатраты(Команда)
	Объект.ДополнительныеЗатраты.Очистить();
	ДополнительныеЗатраты();
	РассчетОбщейСуммыТоварногоДоговора();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
		
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		//
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
		
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	Объект.Номер = "";
	
	УправлениеФормой(ЭтаФорма);
			
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
		
	Если Объект.Ссылка.Пустая() Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Сценарий) Тогда
			ОсновнойСценарий 		= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("узп_ОсновнойСценарийПланированияЗакупок");
			Объект.Сценарий = ОсновнойСценарий;
		КонецЕсли;
		Если НЕ (ЗначениеЗаполнено(Параметры.ЗначениеКопирования) ИЛИ ЗначениеЗаполнено(Параметры.Основание)) Тогда
			// по умолчанию при распределении учитываются все возможные показатели
			Если Объект.ПериодПланирования = '00010101' Тогда
          		Объект.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ТекущаяДата(),Объект.Сценарий);
			КонецЕсли;
			Если Объект.ОбластьПланирования.Пустая() Тогда
				Объект.ОбластьПланирования = Перечисления.узп_ОбластиПланированияЗакупок.ПоПодразделению;
			КонецЕсли;
			Если Объект.Состояние.Пустая() Тогда
				Объект.Состояние = Перечисления.СостоянияОбъектов.Подготовлен;
			КонецЕсли;
		КонецЕсли;
		РассчетОбщейСуммыТоварногоДоговора();	
	КонецЕсли;
	
	Если Параметры.Свойство("Адрес") Тогда 
		СтруктураТЧ = ПолучитьИзВременногоХранилища(Параметры.Адрес);
		Если ТипЗнч(СтруктураТЧ) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(Объект,СтруктураТЧ.ПараметрыШапки);
			Объект.Товары.Загрузить(СтруктураТЧ.Товары);
			Объект.Услуги.Загрузить(СтруктураТЧ.Услуги);
			
		КонецЕсли;
	КонецЕсли;
	

	ТипЦен = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТипПлановыхЦенЗаявокМТС");
	ТипНоменклатуры = дог_УправлениеДоговорами.ПолучитьТипВводаНоменклатуры();
	Элементы.ТоварыНоменклатура.ОграничениеТипа = ТипНоменклатуры;
	Элементы.УслугиНоменклатура.ОграничениеТипа = ТипНоменклатуры;
	Если НЕ ТипНоменклатуры.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
		Элементы.УслугиПодборУслуги.Видимость = Ложь;
		Элементы.ТоварыПодборТовары.Видимость = Ложь;
	КонецЕсли;
	Если НЕ ТипНоменклатуры.СодержитТип(Тип("СправочникСсылка.фин_ПлановаяНоменклатура")) Тогда
		Элементы.УслугиПодборУслугиПлановая.Видимость = Ложь;
		Элементы.ТоварыПодборТоварыПлановая.Видимость = Ложь;
	КонецЕсли;
	Период = Объект.ПериодПланирования;	
	
	// обработка доступности формы на основании данных согласования документов
	усд_УправлениеСогласованиемДокументов.ДоступностьРедактированияДокумента(ЭтотОбъект,Объект);
	
	ОткрыватьНастройкуДвижений = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ПользователиКлиентСервер.АвторизованныйПользователь(), "ПоказыватьДвиженияПриПроведении");	
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	УстановитьТекстПериода();
	
	УстановитьЗаголовкиГрупп();
	
	УстановитьУсловноеОформление();
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	СписокПериодовДляВыбора = СписокПериодов(ЭтаФорма);
	ТекущийДокументОснование = Объект.ДокументОснование;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.Подразделение.Видимость 					= (Объект.ОбластьПланирования = ПредопределенноеЗначение("Перечисление.узп_ОбластиПланированияЗакупок.ПоПодразделению"));
	Элементы.ТоварыПодразделение.Видимость 				= НЕ (Объект.ОбластьПланирования = ПредопределенноеЗначение("Перечисление.узп_ОбластиПланированияЗакупок.ПоПодразделению"));
	Элементы.УслугиПодразделение.Видимость 				= НЕ (Объект.ОбластьПланирования = ПредопределенноеЗначение("Перечисление.узп_ОбластиПланированияЗакупок.ПоПодразделению"));
	ПродолжительностьЦикла 								= ПолучитьПродолжительностьЦикла(Объект.Сценарий);
	Элементы.ТоварыДатаПоставки.Видимость 				= (ПродолжительностьЦикла>1);
	Элементы.УслугиДатаПоставки.Видимость 				= (ПродолжительностьЦикла>1);
    мФормат 											= ПолучитьФормат(Объект.Сценарий);
	Элементы.ТоварыДатаПоставки.Формат 					= мФормат;
	Элементы.ТоварыДатаПоставки.ФорматРедактирования 	= мФормат;
	Элементы.УслугиДатаПоставки.Формат 					= мФормат;
	Элементы.УслугиДатаПоставки.ФорматРедактирования 	= мФормат;
	
	узп_УправлениеЗакупками.УстановитьИконкуТипаНоменклатуры(Объект, "Товары");
	узп_УправлениеЗакупками.УстановитьИконкуТипаНоменклатуры(Объект, "Услуги");	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;
	
	АктивизироватьТабличнуюЧасть = фин_ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюВидимуюТабличнуюЧасть(ЭтаФорма, СписокТабличныхЧастей);
	фин_ОбщегоНазначенияСервер.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 

&НаСервере
Процедура УстановитьУсловноеОформление()
	ЭтаФорма.УсловноеОформление.Элементы.Очистить();
	СписокДоступныхПериодов 							= СписокПериодов(ЭтаФорма);
	Для Каждого ДоступныйПериод Из СписокДоступныхПериодов Цикл
		// товары
		НовыйЭлементОформления 							= УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование			= Истина;
		ОтборЭлемент 									= НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ВидСравнения 						= ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение 					= ДоступныйПериод.Значение;
		ОтборЭлемент.ЛевоеЗначение 						= Новый ПолеКомпоновкиДанных("Объект.Товары.ПериодПланирования");
		ПолеОформления 									= НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование					= Истина;
		ПолеОформления.Поле								= Новый ПолеКомпоновкиДанных("ТоварыДатаПоставки");
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",ДоступныйПериод.Представление);
		// услуги
		НовыйЭлементОформления 							= УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование			= Истина;
		ОтборЭлемент 									= НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ВидСравнения 						= ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение 					= ДоступныйПериод.Значение;
		ОтборЭлемент.ЛевоеЗначение 						= Новый ПолеКомпоновкиДанных("Объект.Услуги.ПериодПланирования");
		ПолеОформления 									= НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование					= Истина;
		ПолеОформления.Поле								= Новый ПолеКомпоновкиДанных("УслугиДатаПоставки");
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",ДоступныйПериод.Представление);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиГрупп()
	НадписьИсточникЗаявки = "Область планирования";
	НадписьПараметрыПланирования = "Параметры планирования";
	НадписьСуммаДокумента = "Сумма документа";
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокПериодов(Форма)
	//Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СписокПериодовВШаге(Объект.ПериодПланирования,Объект.Сценарий);
	Объект = Форма.Объект;
	Список = Новый СписокЗначений;
	Список.Добавить(Объект.ПериодПланирования,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(Объект.ПериодПланирования,Объект.Сценарий));
	СледующийПериод = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(Объект.ПериодПланирования,Объект.Сценарий,1);
	Пока СледующийПериод<=Форма.ГоризонтПланирования Цикл
		Список.Добавить(СледующийПериод,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(СледующийПериод,Объект.Сценарий));
		СледующийПериод = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(СледующийПериод,Объект.Сценарий,1);
	КонецЦикла;
	Возврат Список;
КонецФункции

&НаСервере
Процедура УстановитьТекстПериода()
	ГоризонтПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(Объект.ПериодПланирования,Объект.Сценарий);
	НадписьПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(Объект.ПериодПланирования,Объект.Сценарий);
	ТекстГоризонт = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(ГоризонтПланирования,Объект.Сценарий);
	Если ТекстГоризонт<>НадписьПериодПланирования Тогда
		НадписьПериодПланирования = НадписьПериодПланирования+" - "+ТекстГоризонт;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РассчетОбщейСуммыТоварногоДоговора()
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма")+Объект.Услуги.Итог("Сумма")+Объект.ДополнительныеЗатраты.Итог("Размер");
КонецПроцедуры
 
&НаСервереБезКонтекста
Функция ПолучитьКоэффициентПересчета(ЕдиницаИзмерения,Номенклатура)
   	Возврат дог_УправлениеДоговорами.КоэффициентПересчетаВБазовую(ЕдиницаИзмерения,Номенклатура);
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьПродолжительностьЦикла(Сценарий)
	Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Сценарий);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФормат(Сценарий)
	Возврат фин_ПроцедурыМеханизмовБюджетирования.ПолучитьФормат(Сценарий)
КонецФункции

&НаСервере
Процедура ПриИзмененииСценария()
   	Объект.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ПериодПланирования,Объект.Сценарий);
	СписокПериодовДляВыбора = СписокПериодов(ЭтаФорма);
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить("Товары");
	МассивТЧ.Добавить("Услуги");
	Для Каждого ТЧ ИЗ МассивТЧ Цикл
		Для Каждого СтрокаТЧ Из Объект[ТЧ] Цикл
			СтрокаТЧ.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаТЧ.ПериодПланирования,Объект.Сценарий);
		КонецЦикла;
	КонецЦикла;
	УстановитьТекстПериода();
	Для Каждого ТЧ ИЗ МассивТЧ Цикл
		Для Каждого СтрокаТЧ Из Объект[ТЧ] Цикл
			СтрокаТЧ.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаТЧ.ПериодПланирования,Объект.Сценарий);
			Если СтрокаТЧ.ПериодПланирования<Объект.ПериодПланирования Тогда
				СтрокаТЧ.ПериодПланирования = Объект.ПериодПланирования;
			ИначеЕсли СтрокаТЧ.ПериодПланирования>ГоризонтПланирования Тогда
				СтрокаТЧ.ПериодПланирования = ГоризонтПланирования;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПериода()
	Если Период<>Объект.ПериодПланирования Тогда
		ПериодПланирования = Объект.ПериодПланирования;
		СписокПериодовДляВыбора = СписокПериодов(ЭтаФорма);
		МассивТЧ = Новый Массив;
		МассивТЧ.Добавить("Товары");
		МассивТЧ.Добавить("Услуги");
		Для Каждого ТЧ Из МассивТЧ Цикл
			фин_ПроцедурыМеханизмовБюджетирования.ПереносПериодовПланированияВТабличнойЧасти(Объект[ТЧ],Объект.Сценарий,ПериодПланирования,Период,ГоризонтПланирования);
		КонецЦикла;
		Период = Объект.ПериодПланирования;
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьПериод(Добавить)
	Объект.ПериодПланирования=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СледующийПериодПланирования(Объект.ПериодПланирования,Объект.Сценарий,Добавить);
	УстановитьТекстПериода();
	ПриИзмененииПериода();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодПланирования(Период)	
	СписокПериодов = ПолучитьСписокПериодов(Период,Объект.Сценарий);
	Если СписокПериодов.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	Оп = Новый ОписаниеОповещения("ОбработатьВыборПериодаПланирования", ЭтотОбъект, );
	ПоказатьВыборИзСписка(Оп, СписокПериодов, Элементы.ПериодВыбрать);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПериодаПланирования(Результат, Параметры) Экспорт
	
	Если Результат<>Неопределено Тогда
		Если ТипЗнч(Результат.Значение) = Тип("Число") Тогда
			ВыбратьПериодПланирования(Дата(Результат.Значение,1,1));
		Иначе
			Объект.ПериодПланирования = Результат.Значение;
			УстановитьТекстПериода();
			ПриИзмененииПериода();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокПериодов(ПериодПланирования,Сценарий)
	Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодыДляВыбора(ПериодПланирования,Сценарий);	
КонецФункции

&НаКлиенте
Процедура НачатьПодбор(Элемент,ПлановаяНоменклатура,Услуги)
	Если Не ПлановаяНоменклатура Тогда
		узп_УправлениеЗакупкамиКлиент.ПодборНоменклатуры(ЭтаФорма,УникальныйИдентификатор,?(Услуги,"Услуги","Товары"));
	Иначе
		//узп_УправлениеЗакупкамиКлиент.НачалоПодбораНоменклатуры(Элемент,ПлановаяНоменклатура,Услуги,УникальныйИдентификатор);
		узп_УправлениеЗакупкамиКлиент.НачалоПодбораНоменклатуры(Элемент,ПлановаяНоменклатура,Услуги,УникальныйИдентификатор,Истина,ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеЗатраты()
	СписокПодразделений = Новый Массив;
	СписокНоменклатуры = Новый Массив;
	СписокСценариев = Новый Массив;
	ТаблицыИсточники = Новый Массив;
	ТаблицыИсточники.Добавить(Объект.Товары);
	ТаблицыИсточники.Добавить(Объект.Услуги);
	Для каждого Таблица из ТаблицыИсточники Цикл
		Для каждого строкаТЧ из Таблица Цикл
			Если СписокНоменклатуры.Найти(СТрокаТЧ.Номенклатура) = Неопределено Тогда
				СписокНоменклатуры.Добавить(СтрокаТЧ.Номенклатура);
			КонецЕсли;
			Если СписокПодразделений.Найти(СТрокаТЧ.Подразделение)=Неопределено Тогда
				СписокПодразделений.Добавить(СтрокаТЧ.Подразделение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	СписокНоменклатуры.Добавить(ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	СписокНоменклатуры.Добавить(ПредопределенноеЗначение("Справочник.фин_ПлановаяНоменклатура.ПустаяСсылка"));
	СписокСценариев.Добавить(Объект.Сценарий);
	СписокСценариев.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.ПустаяСсылка"));
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", СписокПодразделений);
	Запрос.УстановитьПараметр("Номенклатура", СписокНоменклатуры);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Сценарий", СписокСценариев);
	Запрос.УстановитьПараметр("ДатаНачала", Объект.ПериодПланирования);
	Запрос.УстановитьПараметр("ДатаОкончания", ДобавитьМесяц(Объект.ПериодПланирования, Объект.Сценарий.ПродолжительностьЦикла));
	Запрос.Текст = "ВЫБРАТЬ
	               |	фин_ОборотыБюджетовОбороты.Сценарий,
	               |	фин_ОборотыБюджетовОбороты.Организация,
	               |	фин_ОборотыБюджетовОбороты.ПериодПланирования КАК ПериодПланирования,
	               |	фин_ОборотыБюджетовОбороты.ФинансовыйПоказатель,
	               |	фин_ОборотыБюджетовОбороты.УправленческоеПодразделение КАК УправленческоеПодразделение,
	               |	фин_ОборотыБюджетовОбороты.Номенклатура,
	               |	узп_СоответствияПозицийПланаЗакупокИБюджетаЗакупок.Подразделение,
	               |	фин_ОборотыБюджетовОбороты.КоличествоОборот КАК Количество,
	               |	фин_ОборотыБюджетовОбороты.СуммаУпрОборот КАК Размер,
	               |	фин_ОборотыБюджетовОбороты.СуммаСценарияОборот
	               |ИЗ
	               |	РегистрСведений.узп_СоответствияПозицийПланаЗакупокИБюджетаЗакупок КАК узп_СоответствияПозицийПланаЗакупокИБюджетаЗакупок
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.фин_ОборотыБюджетов.Обороты(, , , ) КАК фин_ОборотыБюджетовОбороты
	               |		ПО (фин_ОборотыБюджетовОбороты.ФинансовыйПоказатель = узп_СоответствияПозицийПланаЗакупокИБюджетаЗакупок.ФинансовыйПоказатель)
	               |ГДЕ
	               |	фин_ОборотыБюджетовОбороты.ПериодПланирования МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И фин_ОборотыБюджетовОбороты.Организация = &Организация
	               |	И узп_СоответствияПозицийПланаЗакупокИБюджетаЗакупок.Подразделение В(&Подразделение)
	               |	И узп_СоответствияПозицийПланаЗакупокИБюджетаЗакупок.Номенклатура В(&Номенклатура)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПериодПланирования,
	               |	УправленческоеПодразделение";
	Результат = Запрос.Выполнить().Выгрузить();
	//Объект.ДополнительныеЗатраты.Загрузить(результат);
	
	МенВрТаб = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенВрТаб;
	ТабНомен =Новый ТаблицаЗначений;
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	Массив.Добавить(Тип("СправочникСсылка.фин_ПлановаяНоменклатура"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	ТабНомен.Колонки.Добавить("Номенклатура",ОписаниеТипов);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	ТабНомен.Колонки.Добавить("ПериодПланирования",ОписаниеТипов);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	ТабНомен.Колонки.Добавить("Сумма", ОписаниеТипов);
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.Подразделения"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	ТабНомен.Колонки.Добавить("Подразделение",ОписаниеТипов);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	ТабНомен.Колонки.Добавить("Количество",ОписаниеТипов);
	Для каждого Таблица из ТаблицыИсточники Цикл	
		Для Каждого СтрокаТЧ Из Таблица Цикл
			НоваяСтрока = ТабНомен.Добавить();
			НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
			НоваяСтрока.ПериодПланирования = СтрокаТЧ.ПериодПланирования;
			НоваяСтрока.Сумма = СтрокаТЧ.Сумма;
			НоваяСтрока.Подразделение = СтрокаТЧ.Подразделение;
			НоваяСтрока.Количество = СтрокаТЧ.Количество;
		КонецЦикла;
	КонецЦикла;
		
	Запрос.УстановитьПараметр("Сценарий", СписокСценариев);
	Запрос.УстановитьПараметр("Номенклатура",СписокНоменклатуры);
	Запрос.УстановитьПараметр("ТзНоменклатура",ТабНомен);
	Запрос.Текст = "ВЫБРАТЬ
					 | 	Номен.Номенклатура,
	                 |	Номен.ПериодПланирования,
	                 |	Номен.Сумма,
					 |	Номен.Подразделение,
					 |	Номен.Количество
					 |ПОМЕСТИТЬ НоменклатураВДокументе
					 |ИЗ
					 | 	&ТзНоменклатура КАК Номен
					 |;
					 |ВЫБРАТЬ
		             |	узп_ПорядокРасчетаЗатратНаПроведениеЗакупок.Сценарий,
		             |	узп_ПорядокРасчетаЗатратНаПроведениеЗакупок.ВидЗатрат,
		             |	узп_ПорядокРасчетаЗатратНаПроведениеЗакупок.Номенклатура,
		             |	узп_ПорядокРасчетаЗатратНаПроведениеЗакупок.СпособРасчетаВеличиныЗатрат,
		             |	узп_ПорядокРасчетаЗатратНаПроведениеЗакупок.Размер,
		             |	узп_ПорядокРасчетаЗатратНаПроведениеЗакупок.ШкалаОценки,
		             |	НоменклатураВДокументе.ПериодПланирования,
		             |	НоменклатураВДокументе.Сумма,
		             |	НоменклатураВДокументе.Подразделение,
		             |	НоменклатураВДокументе.Количество
		             |ИЗ
		             |	НоменклатураВДокументе КАК НоменклатураВДокументе
		             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.узп_ПорядокРасчетаЗатратНаПроведениеЗакупок КАК узп_ПорядокРасчетаЗатратНаПроведениеЗакупок
		             |		ПО НоменклатураВДокументе.Номенклатура = узп_ПорядокРасчетаЗатратНаПроведениеЗакупок.Номенклатура
		             |ГДЕ
		             |	узп_ПорядокРасчетаЗатратНаПроведениеЗакупок.Сценарий В (&Сценарий)
		             |	И узп_ПорядокРасчетаЗатратНаПроведениеЗакупок.Номенклатура В (&Номенклатура)
					 |УПОРЯДОЧИТЬ ПО
					 |	узп_ПорядокРасчетаЗатратНаПроведениеЗакупок.Номенклатура,
					 |	узп_ПорядокРасчетаЗатратНаПроведениеЗакупок.ВидЗатрат,
					 |	НоменклатураВДокументе.Подразделение,
					 |	НоменклатураВДокументе.ПериодПланирования";
	Результат = Запрос.Выполнить().Выгрузить();
	Если Не Результат.Количество() = 0 Тогда
		Объект.ДополнительныеЗатраты.Очистить();
		Для Каждого СтрокаТЧ  из Результат Цикл
			НоваяСтрока = Объект.ДополнительныеЗатраты.Добавить();
			НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
			НоваяСтрока.Подразделение = СтрокаТЧ.Подразделение;
			НоваяСтрока.ПериодПланирования = СтрокаТЧ.ПериодПланирования;
			НоваяСтрока.ВидЗатрат = СтрокаТЧ.ВидЗатрат;
			Если 	  СтрокаТЧ.СпособРасчетаВеличиныЗатрат = Перечисления.узп_СпособыРасчетаВеличиныЗатратНаПроведениеЗакупок.КоэффициентомОтСуммы Тогда
				НоваяСтрока.Размер = СтрокаТЧ.Сумма * СтрокаТЧ.Размер;
			ИначеЕсли СтрокаТЧ.СпособРасчетаВеличиныЗатрат = Перечисления.узп_СпособыРасчетаВеличиныЗатратНаПроведениеЗакупок.КоэффициентомОтКоличества Тогда
				НоваяСтрока.Размер = СтрокаТЧ.Количество * СтрокаТЧ.Размер;
			ИначеЕсли СтрокаТЧ.СпособРасчетаВеличиныЗатрат = Перечисления.узп_СпособыРасчетаВеличиныЗатратНаПроведениеЗакупок.ПоШкалеОтКоличества Тогда
				НоваяСтрока.Размер = фин_защита.РассчитатьПоШкале(СтрокаТЧ.Количество,СтрокаТЧ.ШкалаОценки,"",СтрокаТЧ.ПериодПланирования);
			ИначеЕсли СтрокаТЧ.СпособРасчетаВеличиныЗатрат = Перечисления.узп_СпособыРасчетаВеличиныЗатратНаПроведениеЗакупок.ПоШкалеОтСуммы Тогда
				НоваяСтрока.Размер = фин_защита.РассчитатьПоШкале(СтрокаТЧ.Сумма,СтрокаТЧ.ШкалаОценки,"",СтрокаТЧ.ПериодПланирования);
			ИначеЕсли СтрокаТЧ.СпособРасчетаВеличиныЗатрат = Перечисления.узп_СпособыРасчетаВеличиныЗатратНаПроведениеЗакупок.ФиксированнаяВеличина Тогда
				НоваяСтрока.Размер = СтрокаТЧ.Размер;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗаполненииОснованием(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	ЗаполнитьПоОснованию();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованию()
	ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	ОбъектДокумент.Заполнить(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(ОбъектДокумент,"Объект");
КонецПроцедуры

&НаСервере 
Процедура НоменклатураПриИзмененииНаСервере(Идентификатор,ТЧ = "Товары")
	ДанныеОбъекта 							= фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("ТипЦен",ТипЦен);
	ТекущиеДанные 							= Объект[ТЧ].НайтиПоИдентификатору(Идентификатор);
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Номенклатура) = Тип("СправочникСсылка.фин_ПлановаяНоменклатура") Тогда
		Если ТЧ = "Товары" Тогда
			ТекущиеДанные.ЕдиницаИзмерения = ТекущиеДанные.Номенклатура.ПлановаяЕдиницаИзмерения;
			ТекущиеДанные.Коэффициент = 1;
		КонецЕсли;
		узп_УправлениеЗакупками.ПолучитьЦенуПлановойНоменклатуры(ТекущиеДанные,Объект.Сценарий,ТипЦен);
		ТекущиеДанные.Поставщик = ТекущиеДанные.Номенклатура.ОсновнойПоставщик;
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТаблицы 					= фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка,ТЧ);
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
    
	МетаданныеДокумента 					= ДанныеОбъекта.Ссылка.Метаданные();
	СведенияОНоменклатуре 					= дог_УправлениеДоговорами.ПолучитьСведенияОНоменклатуре(ДанныеСтрокиТаблицы.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТЧ = "Товары" Тогда
		ДанныеСтрокиТаблицы.ЕдиницаИзмерения  	= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
		ДанныеСтрокиТаблицы.Коэффициент	   		= СведенияОНоменклатуре.Коэффициент;
	КонецЕсли;
	ДанныеСтрокиТаблицы.Цена			   	= СведенияОНоменклатуре.Цена;
	//дог_УправлениеДоговорами.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта, ТЧ, МетаданныеДокумента); 
	
	// Рассчитываем реквизиты табличной части.
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтрокиТаблицы);
	Если ТЧ = "Товары" Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеСтрокиТаблицы.ЕдиницаИзмерения) Тогда
			ДанныеСтрокиТаблицы.ЕдиницаИзмерения  = ДанныеСтрокиТаблицы.Номенклатура.БазоваяЕдиницаИзмерения;
			ДанныеСтрокиТаблицы.Коэффициент = 1;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСтрокиТаблицы.ПериодПланирования = Объект.ПериодПланирования;
	ДанныеСтрокиТаблицы.Поставщик = ДанныеСтрокиТаблицы.Номенклатура.ОсновнойПоставщик;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаКоличествоПриИзменении(ТЧ = "Товары", Строка = Неопределено)
	Если Строка = Неопределено Тогда
		ТекущиеДанные 						= Элементы[ТЧ].ТекущиеДанные;
	Иначе
		ТекущиеДанные = Строка;
	КонецЕсли;
	
	ДанныеОбъекта 							= фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ДанныеСтрокиТаблицы 					= фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка,ТЧ);
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
    
	// Рассчитываем реквизиты табличной части.
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Товары" и ИмяТаблицы <> "Услуги"Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС, УчитыватьАкциз");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("ТипЦен",ТипЦен);
	
	СведенияОСпискеНоменклатуры = дог_УправлениеДоговорами.ПолучитьСведенияОСпискеНоменклатуры(
		фин_ОбщегоНазначенияКлиентСервер.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), Объект);
		
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		Если ИмяТаблицы = "Товары" Тогда
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
			СтруктураОтбора.Вставить("Цена", СтрокаТовара.Цена);
		КонецЕсли;

		СтрокаТабличнойЧасти = фин_ОбщегоНазначенияКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
						
		Иначе
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			Если ИмяТаблицы = "Товары" Тогда
				СтрокаТабличнойЧасти.Коэффициент = СведенияОНоменклатуре.Коэффициент;
			КонецЕсли;
			СтрокаТабличнойЧасти.ПериодПланирования = Объект.ПериодПланирования;
			НоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти.ПолучитьИдентификатор(),ИмяТаблицы)
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборПлановойНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Товары" и ИмяТаблицы <> "Услуги"Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС, УчитыватьАкциз");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("ТипЦен",ТипЦен);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		Если ИмяТаблицы = "Товары" Тогда
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
		КонецЕсли;

		СтрокаТабличнойЧасти = фин_ОбщегоНазначенияКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			//СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
		Иначе
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			Если ИмяТаблицы = "Товары" Тогда
				СтрокаТабличнойЧасти.Коэффициент = 1;
			КонецЕсли;
			СтрокаТабличнойЧасти.ПериодПланирования = Объект.ПериодПланирования;
			НоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти.ПолучитьИдентификатор(),ИмяТаблицы)
		КонецЕсли;
	КонецЦикла;
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСвойство(Значение,Свойство)
	Возврат Значение[Свойство];
КонецФункции
