
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриСозданииНаСервере(ЭтотОбъект);
	
	ПодготовитьФормуНаСервере();
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриЧтенииНаСервере(ЭтотОбъект,ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗагрузкаСпецификацииВТЗ();		
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);		 
	КонецЕсли;
	Если ИсточникВыбора.ИмяФормы = "Справочник.фин_ПлановаяНоменклатура.Форма.ФормаПодбора" Тогда
		ОбработкаВыбораПодборПлановойНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ОбщегоНазначенияКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если Объект.ОбластьПланирования=Перечисления.узп_ОбластиПланированияЗакупок.ПоПодразделению Тогда
		Для Каждого СтрокаТовар Из Объект.Товары Цикл
			СтрокаТовар.Подразделение = Объект.Подразделение;
		КонецЦикла;
		Для Каждого СтрокаУслуги Из Объект.Услуги Цикл
			СтрокаУслуги.Подразделение = Объект.Подразделение;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Не ЗначениеЗаполнено(Объект.Сценарий) Тогда
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Перед записью необходимо заполнить сценарий планирования заявки!",,"Элементы.Сценарий",ЭтотОбъект);
		Сообщение = Новый СообщениеПользователю;
	    Сообщение.Текст = НСтр("ru = 'Перед записью необходимо заполнить сценарий планирования!'");
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Поле = "Объект.Сценарий";
	    Сообщение.Сообщить();

		Отказ=Истина;
		Возврат;
	КонецЕсли;
	
	ВсеЗаполнено = Истина;
	//Товары
	Для Каждого СтрокаТЧ Из ТаблицаТовары  Цикл
		ЕстьЗаписи = Ложь;
		Для НомерПериода = 1 По ПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования) Цикл 
			Если ЗначениеЗаполнено(СтрокаТЧ["ТоварыКоличество"+"_"+НомерПериода]) Тогда
				//ВсеЗаполнено = Истина;
				ЕстьЗаписи = Истина;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьЗаписи Тогда
			ВсеЗаполнено = Ложь;
		КонецЕсли;
	КонецЦикла;
	//Услуги
	Для Каждого СтрокаТЧ Из ТаблицаУслуги  Цикл
		ЕстьЗаписи = Ложь;
		Для НомерПериода = 1 По ПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования) Цикл 
			Если ЗначениеЗаполнено(СтрокаТЧ["УслугиКоличество"+"_"+НомерПериода]) Тогда
				//ВсеЗаполнено = Истина;
				ЕстьЗаписи = Истина;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьЗаписи Тогда
			ВсеЗаполнено = Ложь;
		КонецЕсли;
	КонецЦикла;

	Если Не ВсеЗаполнено Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Строки с незаполнеными полями не будут сохранены. Продолжить?",Режим,0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ=Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	ВыгрузкаСпецификацииВТЗ();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = общ_РаботаСоСтруктурнымиПодразделениями.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИсточникЗаявкиПриИзменении(Элемент)
	Если Объект.ОбластьПланирования=ПредопределенноеЗначение("Перечисление.узп_ОбластиПланированияЗакупок.ПоОрганизации") Тогда
		Объект.Подразделение=ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка");
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	ПриИзмененииСценария();
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Ответ = Вопрос("Заполнить по документу-основанию?",РежимДиалогаВопрос.ДаНет);
		Если Ответ=КодВозвратаДиалога.Да Тогда
			ЗаполнитьПоОснованию();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "Товары"

&НаСервере 
Процедура НоменклатураПриИзмененииНаСервере(Идентификатор,ТЧ = "ТаблицаТовары")
	ДанныеОбъекта 							= фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("ТипЦен",ТипЦен);
	Если ТЧ = "ТаблицаТовары" Тогда
		ТекущиеДанные = ТаблицаТовары.НайтиПоИдентификатору(Идентификатор);
	Иначе
		ТекущиеДанные = ТаблицаУслуги.НайтиПоИдентификатору(Идентификатор);
	КонецЕсли;
		
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Поставщик = ТекущиеДанные.Номенклатура.ОсновнойПоставщик;
	
	ПродолжительностьЦикла = ПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования);
	СтруктураПериодов = "";
	Для НомерПериода = 1 По ПродолжительностьЦикла Цикл
		Если ТЧ = "ТаблицаТовары" Тогда
			СтруктураПериодов = СтруктураПериодов + "ТоварыЦена_" + НомерПериода + ", ТоварыКоличество_" + НомерПериода + ", ТоварыСумма_" + НомерПериода + ", ТоварыПериод_" + НомерПериода + ", ";
		Иначе
			СтруктураПериодов = СтруктураПериодов + "УслугиЦена_" + НомерПериода + ", УслугиКоличество_" + НомерПериода + ", УслугиСумма_" + НомерПериода + ", УслугиПериод_" + НомерПериода + ", ";
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(ТекущиеДанные.Номенклатура) = Тип("СправочникСсылка.фин_ПлановаяНоменклатура") Тогда
		Если ТЧ="ТаблицаТовары" Тогда
			ТекущиеДанные.ЕдиницаИзмерения = ТекущиеДанные.Номенклатура.ПлановаяЕдиницаИзмерения;
			ТекущиеДанные.Коэффициент = 1;
		КонецЕсли;
		ВремСтрока = Новый Структура("ПериодПланирования,Номенклатура,Цена", Объект.ПериодПланирования,ТекущиеДанные.Номенклатура);
		узп_УправлениеЗакупками.ПолучитьЦенуПлановойНоменклатуры(ВремСтрока,Объект.Сценарий,ТипЦен);
		Для НомерПериода = 1 По ПродолжительностьЦикла Цикл
			Если ТЧ = "ТаблицаТовары" Тогда
				ТекущиеДанные["ТоварыЦена_"+НомерПериода] = ВремСтрока.Цена;
				РассчитатьСумму(ТекущиеДанные, "ТоварыЦена_"+НомерПериода)
			Иначе
				ТекущиеДанные["УслугиЦена_"+НомерПериода] = ВремСтрока.Цена;
				РассчитатьСумму(ТекущиеДанные, "УслугиЦена_"+НомерПериода)
			КонецЕсли;
		КонецЦикла;
		ТекущиеДанные.Поставщик = ТекущиеДанные.Номенклатура.ОсновнойПоставщик;
		РассчетОбщейСуммыТоварногоДоговора();
		УправлениеФормой(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТаблицы 					= Новый Структура(СтруктураПериодов + "НомерСтроки,Номенклатура,Характеристика,ЕдиницаИзмерения,Коэффициент,Подразделение,Проект,Приоритет,Описание,Поставщик");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
    
	МетаданныеДокумента 					= ДанныеОбъекта.Ссылка.Метаданные();
	СведенияОНоменклатуре 					= дог_УправлениеДоговорами.ПолучитьСведенияОНоменклатуре(ДанныеСтрокиТаблицы.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	
	Если ТЧ = "ТаблицаТовары" Тогда
		ДанныеСтрокиТаблицы.ЕдиницаИзмерения  	= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
		ДанныеСтрокиТаблицы.Коэффициент	   		= СведенияОНоменклатуре.Коэффициент;
	КонецЕсли;
	
	Для НомерПериода = 1 По ПродолжительностьЦикла Цикл
		Если ТЧ = "ТаблицаТовары" Тогда
			ДанныеСтрокиТаблицы["ТоварыЦена_"+НомерПериода]	= СведенияОНоменклатуре.Цена;
			РассчитатьСумму(ДанныеСтрокиТаблицы, "ТоварыЦена_"+НомерПериода)
		Иначе
			ДанныеСтрокиТаблицы["УслугиЦена_"+НомерПериода]	= СведенияОНоменклатуре.Цена;
			РассчитатьСумму(ДанныеСтрокиТаблицы, "УслугиЦена_"+НомерПериода)
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТЧ = "ТаблицаТовары" Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеСтрокиТаблицы.ЕдиницаИзмерения) Тогда
			ДанныеСтрокиТаблицы.ЕдиницаИзмерения  = ДанныеСтрокиТаблицы.Номенклатура.БазоваяЕдиницаИзмерения;
			ДанныеСтрокиТаблицы.Коэффициент = 1;
		КонецЕсли;
	КонецЕсли;
	ДанныеСтрокиТаблицы.Поставщик = ДанныеСтрокиТаблицы.Номенклатура.ОсновнойПоставщик;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	РассчетОбщейСуммыТоварногоДоговора();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчетОбщейСуммыТоварногоДоговора();	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	мКоэффициент = Элементы.ТаблицаТовары.ТекущиеДанные.Коэффициент;
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.ТаблицаТовары.ТекущиеДанные.ПериодПланирования = Объект.ПериодПланирования;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ДобавитьВСписок = истина;
	ИмеетсяВСписке = не ТаблицаТовары.НайтиСтроки(Новый Структура("Номенклатура",ВыбранноеЗначение)).Количество() = 0;
	Если ИмеетсяВСписке Тогда
		Ответ = Вопрос("Выбранная номенклатура имеется в списке, продолжить добавление?",РежимДиалогаВопрос.ДаНет,0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ДобавитьВСписок = Истина;
		Иначе 
			ДобавитьВСписок = ложь;
		КонецЕсли;
	КонецЕсли;
	Если ДобавитьВСписок Тогда
		НС = ТаблицаТовары.Добавить();
		НС.Номенклатура = ВыбранноеЗначение;
		Для НомерПериода = 1 По ПродолжительностьЦикла Цикл
			НС["ТоварыКоличество_" + НомерПериода]	= 1;
		КонецЦикла;
		НС.НомерСтроки = ТаблицаТовары.Индекс(НС)+1;
		НоменклатураПриИзмененииНаСервере(НС.ПолучитьИдентификатор());
		
		Элементы.ТаблицаТовары.ТекущаяСтрока = ТаблицаТовары.Количество()-1;
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоварыКоэффициентПриИзменении(Элемент)
	Если мКоэффициент<>Элементы.ТаблицаТовары.ТекущиеДанные.Коэффициент Тогда
		Для НомерКолонки=1 По 3 Цикл
			Если Элементы.ТаблицаТовары.ТекущиеДанные["ТоварыЦена"+"_"+НомерКолонки]<>0 Тогда
				Элементы.ТаблицаТовары.ТекущиеДанные["ТоварыЦена"+"_"+НомерКолонки] = Элементы.ТаблицаТовары.ТекущиеДанные["ТоварыЦена"+"_"+НомерКолонки] / (Элементы.ТаблицаТовары.ТекущиеДанные.Коэффициент/?(мКоэффициент=0,1,мКоэффициент));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоварыНоменклатураПриИзменении(Элемент)
	НоменклатураПриИзмененииНаСервере(Элементы.ТаблицаТовары.ТекущиеДанные.ПолучитьИдентификатор());
	Для НомерПериода = 1 По ПродолжительностьЦикла Цикл
		ТоварыПериодПриИзменении(Элементы["КолонкаТоварыЦена_"+НомерПериода]);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	мКоэффициент = Элементы.ТаблицаТовары.ТекущиеДанные.Коэффициент;
	Элементы.ТаблицаТовары.ТекущиеДанные.Коэффициент = ПолучитьКоэффициентПересчета(Элементы.ТаблицаТовары.ТекущиеДанные.ЕдиницаИзмерения,Элементы.ТаблицаТовары.ТекущиеДанные.Номенклатура);
	Если мКоэффициент<>Элементы.ТаблицаТовары.ТекущиеДанные.Коэффициент Тогда
		Для НомерПериода = 1 По ПродолжительностьЦикла(Объект.Сценарий, объект.ПериодПланирования) Цикл
			Элементы.ТаблицаТовары.ТекущиеДанные["ТоварыЦена"+"_"+НомерПериода] = Элементы.ТаблицаТовары.ТекущиеДанные["ТоварыЦена"+"_"+НомерПериода] / (Элементы.ТаблицаТовары.ТекущиеДанные.Коэффициент/?(мКоэффициент=0,1,мКоэффициент));
		КонецЦикла;
		
		Для НомерПериода = 1 По ПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования) Цикл
			ТоварыПериодПриИзменении(Элементы["КолонкаТоварыЦена_"+НомерПериода]);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	Если Не Копирование Тогда
		НоваяСтрока = ТаблицаТовары.Добавить();
		НоваяСтрока.НомерСтроки  = ТаблицаТовары.Индекс(НоваяСтрока)+1;
	Иначе
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Элемент.ТекущиеДанные);
		НоваяСтрока.НомерСтроки = ТаблицаТовары.Количество();
	КонецЕсли;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоварыПослеУдаления(Элемент)
	РассчетОбщейСуммыТоварногоДоговора();
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущаяНоменклатура = Элементы.ТаблицаТовары.ТекущиеДанные.Номенклатура;
	узп_УправлениеЗакупкамиКлиент.НоменклатураНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, Ложь, ТекущаяНоменклатура);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПериодПриИзменении(Элемент)
	ИмяЭлемента = Элемент.Имя; 
	Позиция = Найти(ИмяЭлемента, "_");
	ДлинаСтроки = СтрДлина(ИмяЭлемента);
	НомерКолонки = Прав(ИмяЭлемента, ДлинаСтроки - Позиция);
	
	Если Найти(ИмяЭлемента,"ТоварыСумма")>0 Тогда
		Если Элементы.ТаблицаТовары.ТекущиеДанные["ТоварыКоличество"+"_"+НомерКолонки]=0 Тогда
			Элементы.ТаблицаТовары.ТекущиеДанные["ТоварыКоличество"+"_"+НомерКолонки]=1;
		КонецЕсли;
		Элементы.ТаблицаТовары.ТекущиеДанные["ТоварыЦена"+"_"+НомерКолонки]= Окр(Элементы.ТаблицаТовары.ТекущиеДанные["ТоварыСумма"+"_"+НомерКолонки]/Элементы.ТаблицаТовары.ТекущиеДанные["ТоварыКоличество"+"_"+НомерКолонки],2);
	Иначе
		Элементы.ТаблицаТовары.ТекущиеДанные["ТоварыСумма"+"_"+НомерКолонки]= Элементы.ТаблицаТовары.ТекущиеДанные["ТоварыКоличество"+"_"+НомерКолонки]*Элементы.ТаблицаТовары.ТекущиеДанные["ТоварыЦена"+"_"+НомерКолонки]*Элементы.ТаблицаТовары.ТекущиеДанные.коэффициент
	КонецЕсли;
	Если не ЗначениеЗаполнено(Элементы.ТаблицаТовары.ТекущиеДанные["ТоварыПериод"+"_"+НомерКолонки]) Тогда
		Элементы.ТаблицаТовары.ТекущиеДанные["ТоварыПериод"+"_"+НомерКолонки] = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(Объект.ПериодПланирования,ПолучитьСвойство(Объект.Сценарий,"Периодичность"),НомерКолонки-1);
	КонецЕсли;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура РассчитатьСумму(ТекущиеДанные, ИмяЭлемента)
	Позиция = Найти(ИмяЭлемента, "_");
	ДлинаСтроки = СтрДлина(ИмяЭлемента);
	НомерКолонки = Прав(ИмяЭлемента, ДлинаСтроки - Позиция);
	Если Не Найти(ИмяЭлемента, "Товары") = 0 Тогда
		ИмяТЧ = "Товары";
	ИначеЕсли Не Найти(ИмяЭлемента, "Услуги") = 0 Тогда
		ИмяТЧ = "Услуги";
	КонецЕсли;
	Если Найти(ИмяЭлемента,ИмяТЧ + "Сумма")>0 Тогда
		Если ТекущиеДанные[ИмяТЧ + "Количество"+"_"+НомерКолонки]=0 Тогда
			ТекущиеДанные[ИмяТЧ + "Количество"+"_"+НомерКолонки]=1;
		КонецЕсли;
		ТекущиеДанные[ИмяТЧ + "Цена"+"_"+НомерКолонки]= Окр(ТекущиеДанные[ИмяТЧ + "Сумма"+"_"+НомерКолонки]/ТекущиеДанные[ИмяТЧ + "Количество"+"_"+НомерКолонки],2);
	Иначе
		ТекущиеДанные[ИмяТЧ + "Сумма"+"_"+НомерКолонки]= ТекущиеДанные[ИмяТЧ + "Количество"+"_"+НомерКолонки]*ТекущиеДанные[ИмяТЧ + "Цена"+"_"+НомерКолонки]*?(ИмяТЧ = "Товары",ТекущиеДанные.коэффициент,1);
	КонецЕсли;
	Если не ЗначениеЗаполнено(ТекущиеДанные[ИмяТЧ + "Период"+"_"+НомерКолонки]) Тогда
		ТекущиеДанные[ИмяТЧ + "Период"+"_"+НомерКолонки] = ИнкрементПериода(Объект.Сценарий,Объект.ПериодПланирования,НомерКолонки);
	КонецЕсли;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ИнкрементПериода(Сценарий, Период, знач НомерПериода)
	НомерПериода = НомерПериода - 1;
	Если Сценарий.Периодичность = Перечисления.фин_Периодичность.День Тогда
		НачальнаяДата = Период + (НомерПериода * 86400);
	ИначеЕсли Сценарий.Периодичность = Перечисления.фин_Периодичность.Неделя Тогда
		НачальнаяДата = Период + (НомерПериода * 604800);
	ИначеЕсли Сценарий.Периодичность = Перечисления.фин_Периодичность.Декада тогда
		НачальнаяДата = Период + (НомерПериода * 864000);
	ИначеЕсли Сценарий.Периодичность = Перечисления.фин_Периодичность.Месяц тогда
		НачальнаяДата = ДобавитьМесяц(Период, (НомерПериода * 1));
	ИначеЕсли Сценарий.Периодичность = Перечисления.фин_Периодичность.Квартал тогда
		НачальнаяДата = ДобавитьМесяц(Период, (НомерПериода * 3));
	ИначеЕсли Сценарий.Периодичность = Перечисления.фин_Периодичность.Полугодие тогда
		НачальнаяДата = ДобавитьМесяц(Период, (НомерПериода * 6));
	ИначеЕсли Сценарий.Периодичность = Перечисления.фин_Периодичность.Год тогда
		НачальнаяДата = ДобавитьМесяц(Период, (НомерПериода * 12));
	КонецЕсли;
	Возврат НачальнаяДата;
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "Услуги"

&НаКлиенте
Процедура ТаблицаУслугиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	//Если ТаблицаУслуги.НайтиСтроки(Новый Структура("Номенклатура",ВыбранноеЗначение)).Количество()=0 Тогда
	//	НС = ТаблицаУслуги.Добавить();
	//	НС.Номенклатура = ВыбранноеЗначение;
	//	НС.НомерСтроки = ТаблицаУслуги.Индекс(НС)+1;
	//	НоменклатураПриИзмененииНаСервере(НС.ПолучитьИдентификатор(),"ТаблицаУслуги");
	//	
	//	Элементы.ТаблицаУслуги.ТекущаяСтрока = ТаблицаУслуги.Количество()-1;
	//	ЭтаФорма.Модифицированность = Истина;
	//КонецЕсли;
	ДобавитьВСписок = истина;
	ИмеетсяВСписке = не ТаблицаУслуги.НайтиСтроки(Новый Структура("Номенклатура",ВыбранноеЗначение)).Количество() = 0;
	Если ИмеетсяВСписке Тогда
		Ответ = Вопрос("Выбранная номенклатура имеется в списке, продолжить добавление?",РежимДиалогаВопрос.ДаНет,0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ДобавитьВСписок = Истина;
		Иначе 
			ДобавитьВСписок = ложь;
		КонецЕсли;
	КонецЕсли;
	Если ДобавитьВСписок Тогда
		НС = ТаблицаУслуги.Добавить();
		НС.Номенклатура = ВыбранноеЗначение;
		Для НомерПериода = 1 По ПродолжительностьЦикла Цикл
			НС["УслугиКоличество_" + НомерПериода]	= 1;
		КонецЦикла;
		НС.НомерСтроки = ТаблицаУслуги.Индекс(НС)+1;
		НоменклатураПриИзмененииНаСервере(НС.ПолучитьИдентификатор(),"ТаблицаУслуги");
		
		Элементы.ТаблицаУслуги.ТекущаяСтрока = ТаблицаУслуги.Количество()-1;
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУслугиНоменклатураПриИзменении(Элемент)
	НоменклатураПриИзмененииНаСервере(Элементы.ТаблицаУслуги.ТекущиеДанные.ПолучитьИдентификатор(), "ТаблицаУслуги");
	Для НомерПериода = 1 По ПродолжительностьЦикла Цикл
		УслугиПериодПриИзменении(Элементы["КолонкаУслугиЦена_"+НомерПериода]);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	Если Не Копирование Тогда
		НоваяСтрока = ТаблицаУслуги.Добавить();
		НоваяСтрока.НомерСтроки  = ТаблицаУслуги.Индекс(НоваяСтрока)+1;
	Иначе
		НоваяСтрока = ТаблицаУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Элемент.ТекущиеДанные);
		НоваяСтрока.НомерСтроки  = ТаблицаУслуги.Индекс(НоваяСтрока)+1;
	КонецЕсли;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУслугиПослеУдаления(Элемент)
	РассчетОбщейСуммыТоварногоДоговора();
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУслугиНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущаяНоменклатура = Элементы.ТаблицаУслуги.ТекущиеДанные.Номенклатура;
	узп_УправлениеЗакупкамиКлиент.НоменклатураНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, Истина, ТекущаяНоменклатура);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчетОбщейСуммыТоварногоДоговора();
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПериодПриИзменении(Элемент)
	ИмяЭлемента = Элемент.Имя; 
	Позиция = Найти(ИмяЭлемента, "_");
	ДлинаСтроки = СтрДлина(ИмяЭлемента);
	НомерКолонки = Прав(ИмяЭлемента, ДлинаСтроки - Позиция);
	Если Найти(ИмяЭлемента,"УслугиСумма")>0 Тогда
		Если Элементы.ТаблицаУслуги.ТекущиеДанные["УслугиКоличество"+"_"+НомерКолонки]=0 Тогда
			Элементы.ТаблицаУслуги.ТекущиеДанные["УслугиКоличество"+"_"+НомерКолонки]=1;
		КонецЕсли;
		Элементы.ТаблицаУслуги.ТекущиеДанные["УслугиЦена"+"_"+НомерКолонки]= Окр(Элементы.ТаблицаУслуги.ТекущиеДанные["УслугиСумма"+"_"+НомерКолонки]/Элементы.ТаблицаУслуги.ТекущиеДанные["УслугиКоличество"+"_"+НомерКолонки],2);
	Иначе
		Элементы.ТаблицаУслуги.ТекущиеДанные["УслугиСумма"+"_"+НомерКолонки]= Элементы.ТаблицаУслуги.ТекущиеДанные["УслугиКоличество"+"_"+НомерКолонки]*Элементы.ТаблицаУслуги.ТекущиеДанные["УслугиЦена"+"_"+НомерКолонки]
	КонецЕсли;
	Если не ЗначениеЗаполнено(Элементы.ТаблицаУслуги.ТекущиеДанные["УслугиПериод"+"_"+НомерКолонки]) Тогда
		Элементы.ТаблицаУслуги.ТекущиеДанные["УслугиПериод"+"_"+НомерКолонки] = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(Объект.ПериодПланирования,ПолучитьСвойство(Объект.Сценарий,"Периодичность"),НомерКолонки-1);
	КонецЕсли;	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.ТаблицаУслуги.ТекущиеДанные.ПериодПланирования = Объект.ПериодПланирования;
	КонецЕсли;
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "Дополнительные параметры"

&НаКлиенте
Процедура ДополнительныеЗатратыПриИзменении(Элемент)
	РассчетОбщейСуммыТоварногоДоговора();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура ТаблицаПоложениеГруппировки(Команда)
	ТаблицаПоложениеГруппировкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПериодНазад(Команда)
	ДобавитьПериод(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПериодВперед(Команда)
	ДобавитьПериод(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПериодВыбрать(Команда)
	ВыбратьПериодПланирования(Объект.ПериодПланирования);
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)
	НачатьПодбор(Элементы.ТаблицаТовары,Ложь,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПодборТоварыПлановая(Команда)
	НачатьПодбор(Элементы.ТаблицаТовары,Истина,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)
	НачатьПодбор(Элементы.ТаблицаУслуги,Ложь,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслугиПлановая(Команда)
	НачатьПодбор(Элементы.ТаблицаУслуги,Истина,Истина);
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьДополнительныеЗатраты(Команда)
	//Ответ = Вопрос("Табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет,0);
	//Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ДополнительныеЗатраты.Очистить();
		ДополнительныеЗатраты();
		РассчетОбщейСуммыТоварногоДоговора();
	//КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
		
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		//
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
		
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
	Объект.Номер = "";
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	УправлениеФормой(ЭтаФорма);
			
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
	
	Если Параметры.Свойство("Адрес") Тогда 
		СтруктураТЧ = ПолучитьИзВременногоХранилища(Параметры.Адрес);
		Если ТипЗнч(СтруктураТЧ) = Тип("Структура") Тогда
			Объект.Товары.Загрузить(СтруктураТЧ.Товары);
			Объект.Услуги.Загрузить(СтруктураТЧ.Услуги);
			ЗаполнитьЗначенияСвойств(Объект,СтруктураТЧ.ПараметрыШапки);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Сценарий) Тогда
			ОсновнойСценарий 		= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("узп_ОсновнойСценарийПланированияЗакупок");
			Объект.Сценарий = ОсновнойСценарий;
		КонецЕсли;
		Если НЕ (ЗначениеЗаполнено(Параметры.ЗначениеКопирования) ИЛИ ЗначениеЗаполнено(Параметры.Основание)) Тогда
			// по умолчанию при распределении учитываются все возможные показатели
			Если Объект.ПериодПланирования='00010101' Тогда
          		Объект.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ТекущаяДата(),Объект.Сценарий);
			КонецЕсли;
			Если Объект.ОбластьПланирования.Пустая() Тогда
				Объект.ОбластьПланирования=Перечисления.узп_ОбластиПланированияЗакупок.ПоПодразделению;
			КонецЕсли;
			Если Объект.Состояние.Пустая() Тогда
				Объект.Состояние = Перечисления.СостоянияОбъектов.Подготовлен;
			КонецЕсли;
		КонецЕсли;
		
		//РассчетОбщейСуммыТоварногоДоговора();
		
	КонецЕсли;
	
	
	
	ТипЦен = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТипПлановыхЦенЗаявокМТС");
	ТипНоменклатуры = дог_УправлениеДоговорами.ПолучитьТипВводаНоменклатуры();
	Элементы.ТаблицаТоварыНоменклатура.ОграничениеТипа = ТипНоменклатуры;
	Элементы.ТаблицаУслугиНоменклатура.ОграничениеТипа = ТипНоменклатуры;
	Период = Объект.ПериодПланирования;
	УстановитьТекстПериода();
	
	Если НЕ ТипНоменклатуры.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
		Элементы.УслугиПодборУслуги.Видимость = Ложь;
		Элементы.ТоварыПодборТовары.Видимость = Ложь;
	КонецЕсли;
	Если НЕ ТипНоменклатуры.СодержитТип(Тип("СправочникСсылка.фин_ПлановаяНоменклатура")) Тогда
		Элементы.УслугиПодборУслугиПлановая.Видимость = Ложь;
		Элементы.ТоварыПодборТоварыПлановая.Видимость = Ложь;
	КонецЕсли;
	// обработка доступности формы на основании данных согласования документов
	усд_УправлениеСогласованиемДокументов.ДоступностьРедактированияДокумента(ЭтотОбъект,Объект);
	
	УстановитьУсловноеОформление();
	
	ЗагрузкаСпецификацииВТЗ();
	ОткрыватьНастройкуДвижений = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ПользователиКлиентСервер.АвторизованныйПользователь(), "ПоказыватьДвиженияПриПроведении");	
	РассчетОбщейСуммыТоварногоДоговора();
	
	ТаблицаПоложениеГруппировкиНаСервере(Ложь);
	
	УстановитьЗаголовкиГрупп(ЭтаФорма);
	
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.Подразделение.Видимость = (Объект.ОбластьПланирования=ПредопределенноеЗначение("Перечисление.узп_ОбластиПланированияЗакупок.ПоПодразделению"));
	Элементы.ТаблицаТоварыПодразделение.Видимость = НЕ (Объект.ОбластьПланирования=ПредопределенноеЗначение("Перечисление.узп_ОбластиПланированияЗакупок.ПоПодразделению"));
	Элементы.ТаблицаУслугиПодразделение.Видимость = НЕ (Объект.ОбластьПланирования=ПредопределенноеЗначение("Перечисление.узп_ОбластиПланированияЗакупок.ПоПодразделению"));
	ПродолжительностьЦикла = ПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования);
	Элементы.ТаблицаТоварыПериоды.Видимость = (ПродолжительностьЦикла>0);
	Элементы.ТаблицаУслугиПериоды.Видимость = (ПродолжительностьЦикла>0);
    мФормат	= ПолучитьФормат(Объект.Сценарий);
	
	//узп_УправлениеЗакупками.УстановитьИконкуТипаНоменклатуры(Форма, "ТаблицаТовары");
	//узп_УправлениеЗакупками.УстановитьИконкуТипаНоменклатуры(Форма, "ТаблицаУслуги");	
	Для Каждого СтрокаТЧ Из Форма["ТаблицаТовары"] Цикл
		Если ТипЗнч(СтрокаТЧ.номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда 
			СтрокаТЧ.ТипНоменклатуры = 0;
		ИначеЕсли ТипЗнч(СтрокаТЧ.номенклатура) = Тип("СправочникСсылка.фин_ПлановаяНоменклатура") Тогда 
			СтрокаТЧ.ТипНоменклатуры = 1;
		Иначе
			СтрокаТЧ.ТипНоменклатуры = 2;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Форма["ТаблицаУслуги"] Цикл
		Если ТипЗнч(СтрокаТЧ.номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда 
			СтрокаТЧ.ТипНоменклатуры = 0;
		ИначеЕсли ТипЗнч(СтрокаТЧ.номенклатура) = Тип("СправочникСсылка.фин_ПлановаяНоменклатура") Тогда 
			СтрокаТЧ.ТипНоменклатуры = 1;
		Иначе
			СтрокаТЧ.ТипНоменклатуры = 2;
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(Объект.Сценарий) Тогда
		Для НомерПериода = 1 По ПродолжительностьЦикла(Объект.Сценарий, Объект.ПериодПланирования) Цикл
			Элементы["КолонкаТоварыСумма"+"_"+НомерПериода].ТекстПодвала = Форма.ТаблицаТовары.Итог("ТоварыСумма"+"_"+НомерПериода);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;
	
	АктивизироватьТабличнуюЧасть = фин_ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюВидимуюТабличнуюЧасть(ЭтаФорма, СписокТабличныхЧастей);
	фин_ОбщегоНазначенияСервер.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 

&НаСервереБезКонтекста
Процедура УстановитьЗаголовкиГрупп(Форма)
	Форма.НадписьИсточникЗаявки = "Область планирования";
	Форма.НадписьПараметрыПланирования = "Параметры планирования";
	Форма.НадписьСуммаДокумента = "Сумма документа";
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстПериода()
	ГоризонтПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(Объект.ПериодПланирования,Объект.Сценарий);
	НадписьПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(Объект.ПериодПланирования,Объект.Сценарий);
	ТекстГоризонт = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(ГоризонтПланирования,Объект.Сценарий);
	Если ТекстГоризонт<>НадписьПериодПланирования Тогда
		НадписьПериодПланирования = НадписьПериодПланирования+" - "+ТекстГоризонт;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаСпецификацииВТЗ()
	ПризнакПроекта = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("узп_ВестиУчетЗакупокПоПроектам");
	ПризнакОбъектаРемонта = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("узп_ВестиУчетПлановыхЗатратНаРемонт");
	ПродолжительностьЦикла = ПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования);
	//инициализация параметров создаваемых колонок
	МассивКолонок = Новый Массив;
	Для НомерПериода = 1 По ПродолжительностьЦикла Цикл
		ПараметрыКолонок = Новый Массив;
		//ТекущийПериод = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(ДобавитьМесяц(Объект.ПериодПланирования,НомерПериода-1),Объект.Сценарий);
		ТекущийПериод = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(Объект.ПериодПланирования,Объект.Сценарий.Периодичность,НомерПериода-1),Объект.Сценарий);
		СтрокаПараметры = Новый Структура("ИменаКолонок, ТипыКолонок, ЗаголовкиКолонок", "Период", "Дата", ТекущийПериод);
		ПараметрыКолонок.Добавить(СтрокаПараметры);
		СтрокаПараметры = Новый Структура("ИменаКолонок, ТипыКолонок, ЗаголовкиКолонок", "Количество", "Число", "Кол-во");
		ПараметрыКолонок.Добавить(СтрокаПараметры);
		СтрокаПараметры = Новый Структура("ИменаКолонок, ТипыКолонок, ЗаголовкиКолонок", "Цена", "Число", "Цена");
		ПараметрыКолонок.Добавить(СтрокаПараметры);
		СтрокаПараметры = Новый Структура("ИменаКолонок, ТипыКолонок, ЗаголовкиКолонок", "Сумма", "Число", "Сумма");
		ПараметрыКолонок.Добавить(СтрокаПараметры);
		МассивКолонок.Добавить(ПараметрыКолонок);
	КонецЦикла;
	//Удаление старых созданных элементов с формы
	УдалитьЭлементыФормы(Элементы.ТаблицаТоварыПериоды.ПодчиненныеЭлементы);
	//Удаление старых созданных реквизитов с формы
	УдаляемыеРеквизиты = Новый Массив;
	Для Каждого Реквизит из ПолучитьРеквизиты("ТаблицаТовары") Цикл
		Если Найти(Реквизит.имя,"_")>0 Тогда
			УдаляемыеРеквизиты.Добавить(Реквизит.Путь+"."+Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Реквизит из ПолучитьРеквизиты("ТаблицаУслуги") Цикл
		Если Найти(Реквизит.имя,"_")>0 Тогда
			УдаляемыеРеквизиты.Добавить(Реквизит.Путь+"."+Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	//Создание реквизитов
	ДобавляемыеРеквизиты = Новый Массив;
	Для НомерПериода = 1 По ПродолжительностьЦикла Цикл
		//ТекущийПериод = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(ДобавитьМесяц(Объект.ПериодПланирования,НомерПериода-1),Объект.Сценарий);
		ТекущийПериод = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(Объект.ПериодПланирования,Объект.Сценарий.Периодичность,НомерПериода-1),Объект.Сценарий);
		Для к=0 По 3 Цикл
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Товары"+МассивКолонок[НомерПериода-1][к].ИменаКолонок+"_"+Строка(НомерПериода),Новый ОписаниеТипов(МассивКолонок[НомерПериода-1][к].ТипыКолонок),"ТаблицаТовары",МассивКолонок[НомерПериода-1][к].ЗаголовкиКолонок));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Услуги"+МассивКолонок[НомерПериода-1][к].ИменаКолонок+"_"+Строка(НомерПериода),Новый ОписаниеТипов(МассивКолонок[НомерПериода-1][к].ТипыКолонок),"ТаблицаУслуги",МассивКолонок[НомерПериода-1][к].ЗаголовкиКолонок));
		КонецЦикла;
	КонецЦикла;
	// пакетное создание и удаление
	ИзменитьРеквизиты(ДобавляемыеРеквизиты,УдаляемыеРеквизиты);
	//инициализация переменных для работы процедуры в цикле
	ТаблицаТовары.Очистить();
	ТаблицаУслуги.Очистить();
	Таблицы = Новый Массив;
	Структура = Новый Структура("Объект, Таблица, ИмяТаблицы, ПолеПроекта, ГруппаПериоды, ЭталонКолонкиДляКопии, УчетКоэфЕдИзм",Объект.Товары,ТаблицаТовары,"Товары",Элементы.ТаблицаТоварыПроект, Элементы.ТаблицаТоварыПериоды,Элементы.ТаблицаТоварыНомерСтроки, Истина);
	Таблицы.Добавить(Структура);
	Структура = Новый Структура("Объект, Таблица, ИмяТаблицы, ПолеПроекта, ГруппаПериоды, ЭталонКолонкиДляКопии, УчетКоэфЕдИзм",Объект.Услуги,ТаблицаУслуги,"Услуги",Элементы.ТаблицаУслугиПроект, Элементы.ТаблицаУслугиПериоды,Элементы.ТаблицаУслугиНомерСтроки, Ложь);
	Таблицы.Добавить(Структура);

	Для каждого СтрокаТаблица из Таблицы Цикл
		Если НЕ ПризнакПроекта Тогда
			СтрокаТаблица.ПолеПроекта.Видимость = Ложь;
		КонецЕсли;
	    СтрокаТаблица.Таблица.Очистить();
		Для НомерПериода = 1 По ПродолжительностьЦикла Цикл
			// создаем реквизиты
			ДобавляемыеРеквизиты = Новый Массив;
			ТекущийПериод = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(Объект.ПериодПланирования,Объект.Сценарий.Периодичность,НомерПериода-1),Объект.Сценарий);
			//создаем элементы
			//создание групп периодов элементов заголовка
			Если Элементы.Найти("Группа"+СтрокаТаблица.ИмяТаблицы+"Периоды"+"_"+Строка(НомерПериода)) = Неопределено Тогда
				Элемент = Элементы.Добавить("Группа"+СтрокаТаблица.ИмяТаблицы+"Периоды"+"_"+Строка(НомерПериода), Тип("ГруппаФормы"),СтрокаТаблица.ГруппаПериоды);
				Элемент.Заголовок = ТекущийПериод;
				Элемент.ОтображатьВШапке = Истина;
				Элемент.ЦветФонаЗаголовка=Новый Цвет(176,196,222);
				Элемент.ЦветТекстаЗаголовка=Новый Цвет(0,66,66);
				Элемент.ШрифтЗаголовка=СтрокаТаблица.ЭталонКолонкиДляКопии.ШрифтЗаголовка;
			Иначе
				Элементы["Группа"+СтрокаТаблица.ИмяТаблицы+"Периоды"+"_"+Строка(НомерПериода)].Заголовок = ТекущийПериод;
			КонецЕсли;
			//создание колонок заголовка по периодам
			Для к=0 По 3 Цикл
				Если Элементы.Найти("Колонка"+СтрокаТаблица.ИмяТаблицы+МассивКолонок[НомерПериода-1][к].ИменаКолонок+"_"+Строка(НомерПериода)) = Неопределено Тогда
					Элемент = Элементы.Добавить("Колонка"+СтрокаТаблица.ИмяТаблицы+МассивКолонок[НомерПериода-1][к].ИменаКолонок+"_"+Строка(НомерПериода),Тип("ПолеФормы"),Элементы["Группа"+СтрокаТаблица.ИмяТаблицы+"Периоды"+"_"+Строка(НомерПериода)]);
					Элемент.Вид = ВидПоляФормы.ПолеВвода;
					Элемент.ПутьКДанным = "Таблица"+СтрокаТаблица.ИмяТаблицы+"."+СтрокаТаблица.ИмяТаблицы+МассивКолонок[НомерПериода-1][к].ИменаКолонок+"_"+Строка(НомерПериода);
					Элемент.Видимость = к<>0;
					Элемент.ЦветФонаЗаголовка=Новый Цвет(176,196,222);
					Элемент.ЦветТекстаЗаголовка=Новый Цвет(0,66,66);
					Элемент.ЦветРамки=Новый Цвет(176,196,222);
					Элемент.ЦветФона = ?(к=1,ПолучитьЦветКолонки(1),?(к=2,ПолучитьЦветКолонки(2),ПолучитьЦветКолонки(0)));
					Элемент.ШрифтЗаголовка=СтрокаТаблица.ЭталонКолонкиДляКопии.ШрифтЗаголовка;
					Элемент.УстановитьДействие("ПриИзменении",СтрокаТаблица.ИмяТаблицы+"ПериодПриИзменении");
					Элемент.Ширина = 7;
				КонецЕсли;
			КонецЦикла;
			//Запись в колонки по строкам
			Для Каждого СтрокаТЧ Из СтрокаТаблица.Объект Цикл
				Если Объект.ОбластьПланирования = Перечисления.узп_ИсточникиЗаявокМТС.Подразделение Тогда
		    		мПодразделение = Объект.Подразделение;
				Иначе
					мПодразделение = СтрокаТЧ.Подразделение;
				КонецЕсли;
				
				Если ПризнакПроекта Тогда
					Если СтрокаТаблица.УчетКоэфЕдИзм Тогда
					ПараметрыПоиска = Новый Структура ("Номенклатура,Характеристика,Проект,ЕдиницаИзмерения,Коэффициент,Подразделение,Поставщик,Заявка",
											  	СтрокаТЧ.Номенклатура,СтрокаТЧ.Характеристика,СтрокаТЧ.Проект,
											  	СтрокаТЧ.ЕдиницаИзмерения,СтрокаТЧ.Коэффициент,мПодразделение,
											  	СтрокаТЧ.Поставщик,СтрокаТЧ.Заявка);
					Иначе
					ПараметрыПоиска = Новый Структура ("Номенклатура,Характеристика,Проект,Подразделение,Поставщик,Заявка",
					  							СтрокаТЧ.Номенклатура,СтрокаТЧ.Характеристика,СтрокаТЧ.Проект,
												мПодразделение,
												СтрокаТЧ.Поставщик,СтрокаТЧ.Заявка);
					КонецЕсли;
				Иначе
					Если СтрокаТаблица.УчетКоэфЕдИзм Тогда
					ПараметрыПоиска = Новый Структура ("Номенклатура,Характеристика,ЕдиницаИзмерения,Коэффициент,Подразделение,Поставщик,Заявка",
											  	СтрокаТЧ.Номенклатура,СтрокаТЧ.Характеристика,
											  	СтрокаТЧ.ЕдиницаИзмерения,СтрокаТЧ.Коэффициент,мПодразделение,
											  	СтрокаТЧ.Поставщик,СтрокаТЧ.Заявка);
					Иначе
					ПараметрыПоиска = Новый Структура ("Номенклатура,Характеристика,Подразделение,Поставщик,Заявка",
												СтрокаТЧ.Номенклатура,СтрокаТЧ.Характеристика,
												мПодразделение,
												СтрокаТЧ.Поставщик,СтрокаТЧ.Заявка);
					КонецЕсли;
				КонецЕсли;
				НайденныеСтроки = СтрокаТаблица.Таблица.НайтиСтроки(ПараметрыПоиска);
				Если СтрокаТЧ.ПериодПланирования < Объект.ПериодПланирования Тогда
					СтрокаТЧ.ПериодПланирования = Объект.ПериодПланирования 
				КонецЕсли;
				Если фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(СтрокаТЧ.ПериодПланирования,Объект.Сценарий) = ТекущийПериод Тогда
					Если НайденныеСтроки.Количество()=0 Тогда
						НоваяСтрока = СтрокаТаблица.Таблица.Добавить();
						НоваяСтрока.НомерСтроки =  СтрокаТаблица.Таблица.Индекс(НоваяСтрока)+1;
						НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
						НоваяСтрока.Характеристика = СтрокаТЧ.Характеристика;
						Если ПризнакПроекта Тогда
							НоваяСтрока.Проект = СтрокаТЧ.Проект;
						КонецЕсли;
						Если СтрокаТаблица.УчетКоэфЕдИзм Тогда
							НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;
							НоваяСтрока.Коэффициент = СтрокаТЧ.Коэффициент;
						КонецЕсли;
						НоваяСтрока.Подразделение = мПодразделение;
						НоваяСтрока.Приоритет = СтрокаТЧ.Приоритет;
						НоваяСтрока[СтрокаТаблица.ИмяТаблицы+"Период"+"_"+Строка(НомерПериода)] = СтрокаТЧ.ПериодПланирования;
						НоваяСтрока[СтрокаТаблица.ИмяТаблицы+"Количество"+"_"+Строка(НомерПериода)] = СтрокаТЧ.Количество;
						НоваяСтрока[СтрокаТаблица.ИмяТаблицы+"Цена"+"_"+Строка(НомерПериода)] = СтрокаТЧ.Цена;
						НоваяСтрока[СтрокаТаблица.ИмяТаблицы+"Сумма"+"_"+Строка(НомерПериода)] = СтрокаТЧ.Сумма;
						//НоваяСтрока.Описание = СтрокаТЧ.Описание;
						НоваяСтрока.Поставщик = СтрокаТЧ.Поставщик;
						НоваяСтрока.Заявка = СтрокаТЧ.Заявка;
						Если ПризнакОбъектаРемонта Тогда
							НоваяСтрока.ОбъектРемонта = СтрокаТЧ.ОбъектРемонта;
						КонецЕсли;
						
					Иначе
						//Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
						//	СтрокаТаблица.Таблица.Получить(СтрокаТаблица.Таблица.Индекс(НайденнаяСтрока))[СтрокаТаблица.ИмяТаблицы+"Период"+"_"+Строка(НомерПериода)] = СтрокаТЧ.ПериодПланирования;
						//	СтрокаТаблица.Таблица.Получить(СтрокаТаблица.Таблица.Индекс(НайденнаяСтрока))[СтрокаТаблица.ИмяТаблицы+"Количество"+"_"+Строка(НомерПериода)] = СтрокаТаблица.Таблица.Получить(СтрокаТаблица.Таблица.Индекс(НайденнаяСтрока))[СтрокаТаблица.ИмяТаблицы+"Количество"+"_"+ Строка(НомерПериода)]+СтрокаТЧ.Количество;
						//	СтрокаТаблица.Таблица.Получить(СтрокаТаблица.Таблица.Индекс(НайденнаяСтрока))[СтрокаТаблица.ИмяТаблицы+"Цена"+"_"+Строка(НомерПериода)] = ?(СтрокаТаблица.Таблица.Получить(СтрокаТаблица.Таблица.Индекс(НайденнаяСтрока))[СтрокаТаблица.ИмяТаблицы+"Цена"+"_"+ Строка(НомерПериода)]=0, СтрокаТЧ.Цена, Окр((СтрокаТаблица.Таблица.Получить(СтрокаТаблица.Таблица.Индекс(НайденнаяСтрока))[СтрокаТаблица.ИмяТаблицы+"Цена"+"_"+ Строка(НомерПериода)]+СтрокаТЧ.Цена)/2));
						//	СтрокаТаблица.Таблица.Получить(СтрокаТаблица.Таблица.Индекс(НайденнаяСтрока))[СтрокаТаблица.ИмяТаблицы+"Сумма"+"_"+Строка(НомерПериода)] = СтрокаТаблица.Таблица.Получить(СтрокаТаблица.Таблица.Индекс(НайденнаяСтрока))[СтрокаТаблица.ИмяТаблицы+"Цена"+"_"+Строка(НомерПериода)] * СтрокаТаблица.Таблица.Получить(СтрокаТаблица.Таблица.Индекс(НайденнаяСтрока))[СтрокаТаблица.ИмяТаблицы+"Количество"+"_"+Строка(НомерПериода)]
						//КонецЦикла;
						
						СтрокаТаблица.Таблица.Получить(СтрокаТаблица.Таблица.Индекс(НайденныеСтроки[0]))[СтрокаТаблица.ИмяТаблицы+"Период"+"_"+Строка(НомерПериода)] = СтрокаТЧ.ПериодПланирования;
						СтрокаТаблица.Таблица.Получить(СтрокаТаблица.Таблица.Индекс(НайденныеСтроки[0]))[СтрокаТаблица.ИмяТаблицы+"Количество"+"_"+Строка(НомерПериода)] = СтрокаТаблица.Таблица.Получить(СтрокаТаблица.Таблица.Индекс(НайденныеСтроки[0]))[СтрокаТаблица.ИмяТаблицы+"Количество"+"_"+ Строка(НомерПериода)]+СтрокаТЧ.Количество;
						СтрокаТаблица.Таблица.Получить(СтрокаТаблица.Таблица.Индекс(НайденныеСтроки[0]))[СтрокаТаблица.ИмяТаблицы+"Цена"+"_"+Строка(НомерПериода)] = ?(СтрокаТаблица.Таблица.Получить(СтрокаТаблица.Таблица.Индекс(НайденныеСтроки[0]))[СтрокаТаблица.ИмяТаблицы+"Цена"+"_"+ Строка(НомерПериода)]=0, СтрокаТЧ.Цена, Окр((СтрокаТаблица.Таблица.Получить(СтрокаТаблица.Таблица.Индекс(НайденныеСтроки[0]))[СтрокаТаблица.ИмяТаблицы+"Цена"+"_"+ Строка(НомерПериода)]+СтрокаТЧ.Цена)/2));
						//СтрокаТаблица.Таблица.Получить(СтрокаТаблица.Таблица.Индекс(НайденныеСтроки[0]))[СтрокаТаблица.ИмяТаблицы+"Сумма"+"_"+Строка(НомерПериода)] = СтрокаТаблица.Таблица.Получить(СтрокаТаблица.Таблица.Индекс(НайденныеСтроки[0]))[СтрокаТаблица.ИмяТаблицы+"Сумма"+"_"+Строка(НомерПериода)]+СтрокаТЧ.Сумма;
						СтрокаТаблица.Таблица.Получить(СтрокаТаблица.Таблица.Индекс(НайденныеСтроки[0]))[СтрокаТаблица.ИмяТаблицы+"Сумма"+"_"+Строка(НомерПериода)] = СтрокаТаблица.Таблица.Получить(СтрокаТаблица.Таблица.Индекс(НайденныеСтроки[0]))[СтрокаТаблица.ИмяТаблицы+"Цена"+"_"+Строка(НомерПериода)] * СтрокаТаблица.Таблица.Получить(СтрокаТаблица.Таблица.Индекс(НайденныеСтроки[0]))[СтрокаТаблица.ИмяТаблицы+"Количество"+"_"+Строка(НомерПериода)]
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	ТаблицаТовары.Загрузить(Таблицы[0].Таблица.Выгрузить());
	ТаблицаУслуги.Загрузить(Таблицы[1].Таблица.Выгрузить());
	ПоложениеГруппировки();
КонецПроцедуры

&НаСервере
Процедура ПоложениеГруппировки()
	Элементы.ТаблицаТоварыТаблицаПоложениеГруппировки.Пометка = ТаблицаТоварыПоложениеГруппировки;
	Элементы.ТаблицаУслугиТаблицаПоложениеГруппировки.Пометка = ТаблицаУслугиПоложениеГруппировки;
	Для номер = 1 По ПродолжительностьЦикла(Объект.Сценарий, объект.ПериодПланирования) Цикл
		//Товары
		Если ТаблицаТоварыПоложениеГруппировки Тогда
			Элементы["ГруппаТоварыПериоды"+"_"+Строка(Номер)].Группировка=ГруппировкаКолонок.Вертикальная;
		Иначе
			Элементы["ГруппаТоварыПериоды"+"_"+Строка(Номер)].Группировка=ГруппировкаКолонок.Горизонтальная;
		КонецЕсли;
		//Услуги
		Если ТаблицаУслугиПоложениеГруппировки Тогда
			Элементы["ГруппаУслугиПериоды"+"_"+Строка(Номер)].Группировка=ГруппировкаКолонок.Вертикальная;
		Иначе
			Элементы["ГруппаУслугиПериоды"+"_"+Строка(Номер)].Группировка=ГруппировкаКолонок.Горизонтальная;
		КонецЕсли;

	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура РассчетОбщейСуммыТоварногоДоговора()
	Объект.СуммаДокумента = 0;
	Если Не ЗначениеЗаполнено(Объект.Сценарий) Тогда
		Возврат;
	КонецЕсли;
	
	Для НомерПериода = 1 По ПродолжительностьЦикла(Объект.Сценарий, Объект.ПериодПланирования) Цикл
		Объект.СуммаДокумента = Объект.СуммаДокумента + ТаблицаТовары.Итог("ТоварыСумма"+"_"+НомерПериода)+ТаблицаУслуги.Итог("УслугиСумма"+"_"+НомерПериода);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентПересчета(ЕдиницаИзмерения,Номенклатура)
   	Возврат дог_УправлениеДоговорами.КоэффициентПересчетаВБазовую(ЕдиницаИзмерения,Номенклатура);
КонецФункции	

&НаСервере
Процедура УстановитьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();
	СписокДоступныхПериодов = СписокПериодов(ЭтаФорма);
	Для Каждого ДоступныйПериод Из СписокДоступныхПериодов Цикл
		// товары
		НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование=Истина;
		ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение = ДоступныйПериод.Значение;
		ОтборЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ПериодПланирования");
		ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование=Истина;
		ПолеОформления.Поле=Новый ПолеКомпоновкиДанных("ТоварыДатаПоставки");
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",ДоступныйПериод.Представление);
		// услуги
		НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование=Истина;
		ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение = ДоступныйПериод.Значение;
		ОтборЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Услуги.ПериодПланирования");
		ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование=Истина;
		ПолеОформления.Поле=Новый ПолеКомпоновкиДанных("УслугиДатаПоставки");
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",ДоступныйПериод.Представление);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокПериодов(Форма)
	//Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СписокПериодовВШаге(Объект.ПериодПланирования,Объект.Сценарий);
	Объект = Форма.Объект;
	Список = Новый СписокЗначений;
	Список.Добавить(Объект.ПериодПланирования,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(Объект.ПериодПланирования,Объект.Сценарий));
	СледующийПериод = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(Объект.ПериодПланирования,Объект.Сценарий,1);
	Пока СледующийПериод<=Форма.ГоризонтПланирования Цикл
		Список.Добавить(СледующийПериод,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(СледующийПериод,Объект.Сценарий));
		СледующийПериод = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(СледующийПериод,Объект.Сценарий,1);
	КонецЦикла;
	Возврат Список;
КонецФункции

&НаСервере
Процедура ВыгрузкаСпецификацииВТЗ()
	//признак учета проекта
	ПризнакПроекта = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("узп_ВестиУчетЗакупокПоПроектам");
	СвернутьТаблицу();
	//длина цикла периода
	//ПродолжительностьЦикла = Объект.Сценарий.ПродолжительностьЦикла;
	//инициализация переменных для работы процедуры в цикле
	Таблицы = Новый Массив;
	Структура = Новый Структура("Объект, Таблица, ИмяТаблицы, УчетКоэфЕдИзм",Объект.Товары,ТаблицаТовары,"Товары",Истина);
	Таблицы.Добавить(Структура);
	Структура = Новый Структура("Объект, Таблица, ИмяТаблицы, УчетКоэфЕдИзм",Объект.Услуги,ТаблицаУслуги,"Услуги",Ложь);
	Таблицы.Добавить(Структура);
	//Обходим каждую таблицу-реквизит документа
	Для Каждого СтрокаТаблица Из Таблицы Цикл
		//Очистка таблицы
		СтрокаТаблица.Объект.Очистить();
		//Обходим каждую строку таблицы-реквизита документа
		Для Каждого СтрокаТЧ Из СтрокаТаблица.Таблица Цикл
			Если Объект.ОбластьПланирования = Перечисления.узп_ОбластиПланированияЗакупок.ПоПодразделению Тогда
	    		мПодразделение = Объект.Подразделение;
			Иначе
				мПодразделение = СтрокаТЧ.Подразделение;
			КонецЕсли;
			Для НомерПериода = 1 По ПродолжительностьЦикла Цикл
				Попытка
				Если Число(СтрокаТЧ[СтрокаТаблица.ИмяТаблицы+"Количество"+"_"+Строка(НомерПериода)])>0 Тогда
					НоваяСтрока = СтрокаТаблица.Объект.Добавить();
					НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
					НоваяСтрока.Характеристика = СтрокаТЧ.Характеристика;
					Если ПризнакПроекта Тогда
						НоваяСтрока.Проект = СтрокаТЧ.Проект;
					КонецЕсли;
					Если СтрокаТаблица.учетКоэфЕдИзм Тогда
						НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;
						НоваяСтрока.Коэффициент = СтрокаТЧ.Коэффициент;
					КонецЕсли;
					НоваяСтрока.Подразделение = мПодразделение;
					НоваяСтрока.Приоритет = СтрокаТЧ.Приоритет;
					НоваяСтрока.ПериодПланирования = СтрокаТЧ[СтрокаТаблица.ИмяТаблицы+"Период"+"_"+Строка(НомерПериода)];
					НоваяСтрока.Количество = СтрокаТЧ[СтрокаТаблица.ИмяТаблицы+"Количество"+"_"+Строка(НомерПериода)];
					НоваяСтрока.Цена = СтрокаТЧ[СтрокаТаблица.ИмяТаблицы+"Цена"+"_"+Строка(НомерПериода)];
					НоваяСтрока.Сумма = СтрокаТЧ[СтрокаТаблица.ИмяТаблицы+"Сумма"+"_"+Строка(НомерПериода)];
					НоваяСтрока.Заявка = СтрокаТЧ.Заявка;
					НоваяСтрока.Поставщик = СтрокаТЧ.Поставщик;
				КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецЦикла;
		//Объект[СтрокаТаблица.ИмяТаблицы].Загрузить(СтрокаТаблица.Объект.Выгрузить());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СвернутьТаблицу()
	ПризнакПроекта = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("узп_ВестиУчетЗакупокПоПроектам");
	//инициализация переменных для работы процедуры в цикле
	Таблицы = Новый Массив;
	Структура = Новый Структура("Объект, Таблица, ИмяТаблицы, ПолеПроекта, ГруппаПериоды, ЭталонКолонкиДляКопии, УчетКоэфЕдИзм",Объект.Товары,ТаблицаТовары,"Товары",Элементы.ТаблицаТоварыПроект, Элементы.ТаблицаТоварыПериоды,Элементы.ТаблицаТоварыНомерСтроки, Истина);
	Таблицы.Добавить(Структура);
	Структура = Новый Структура("Объект, Таблица, ИмяТаблицы, ПолеПроекта, ГруппаПериоды, ЭталонКолонкиДляКопии, УчетКоэфЕдИзм",Объект.Услуги,ТаблицаУслуги,"Услуги",Элементы.ТаблицаУслугиПроект, Элементы.ТаблицаУслугиПериоды,Элементы.ТаблицаУслугиНомерСтроки, Ложь);
	Таблицы.Добавить(Структура);
	Для каждого СтрокаТаблица из Таблицы Цикл	
		//Для Каждого СтрокаТЧ Из СтрокаТаблица.Таблица Цикл
		Для к=0 По СтрокаТаблица.Таблица.Количество()-1 Цикл
			СтрокаТЧ = СтрокаТаблица.Таблица[к];
			Если Объект.ОбластьПланирования = Перечисления.узп_ИсточникиЗаявокМТС.Подразделение Тогда
				мПодразделение = Объект.Подразделение;
			Иначе
				мПодразделение = СтрокаТЧ.Подразделение;
			КонецЕсли;
			Если ПризнакПроекта Тогда
				Если СтрокаТаблица.УчетКоэфЕдИзм Тогда
				ПараметрыПоиска = Новый Структура ("Номенклатура,Характеристика,Проект,ЕдиницаИзмерения,Коэффициент,Подразделение,Поставщик,Заявка",
										  	СтрокаТЧ.Номенклатура,СтрокаТЧ.Характеристика,СтрокаТЧ.Проект,
										  	СтрокаТЧ.ЕдиницаИзмерения,СтрокаТЧ.Коэффициент,мПодразделение,
										  	СтрокаТЧ.Поставщик,СтрокаТЧ.Заявка);
				Иначе
				ПараметрыПоиска = Новый Структура ("Номенклатура,Характеристика,Проект,Подразделение,Поставщик,Заявка",
				  							СтрокаТЧ.Номенклатура,СтрокаТЧ.Характеристика,СтрокаТЧ.Проект,
											мПодразделение,
											СтрокаТЧ.Поставщик,СтрокаТЧ.Заявка);
				КонецЕсли;
			Иначе
				Если СтрокаТаблица.УчетКоэфЕдИзм Тогда
				ПараметрыПоиска = Новый Структура ("Номенклатура,Характеристика,ЕдиницаИзмерения,Коэффициент,Подразделение,Поставщик,Заявка",
										  	СтрокаТЧ.Номенклатура,СтрокаТЧ.Характеристика,
										  	СтрокаТЧ.ЕдиницаИзмерения,СтрокаТЧ.Коэффициент,мПодразделение,
										  	СтрокаТЧ.Поставщик,СтрокаТЧ.Заявка);
				Иначе
				ПараметрыПоиска = Новый Структура ("Номенклатура,Характеристика,Подразделение,Поставщик,Заявка",
											СтрокаТЧ.Номенклатура,СтрокаТЧ.Характеристика,
											мПодразделение,
											СтрокаТЧ.Поставщик,СтрокаТЧ.Заявка);
				КонецЕсли;
			КонецЕсли;
			НайденныеСтроки = СтрокаТаблица.Таблица.НайтиСтроки(ПараметрыПоиска);
			//НайденныеСтроки = Новый Массив;
			ПродолжительностьЦикла = ПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования);
			Для НомерПериода = 1 По ПродолжительностьЦикла Цикл
				Если НайденныеСтроки.Количество()>1 Тогда
					Для к1 = 1 По НайденныеСтроки.Количество()-1 Цикл
						НайденныеСтроки[0][СтрокаТаблица.ИмяТаблицы+"Количество"+"_"+Строка(НомерПериода)] = НайденныеСтроки[0][СтрокаТаблица.ИмяТаблицы+"Количество"+"_"+Строка(НомерПериода)]+ НайденныеСтроки[к1][СтрокаТаблица.ИмяТаблицы+"Количество"+"_"+Строка(НомерПериода)];
						НайденныеСтроки[0][СтрокаТаблица.ИмяТаблицы+"Сумма"+"_"+Строка(НомерПериода)] = НайденныеСтроки[0][СтрокаТаблица.ИмяТаблицы+"Сумма"+"_"+Строка(НомерПериода)]+ НайденныеСтроки[к1][СтрокаТаблица.ИмяТаблицы+"Сумма"+"_"+Строка(НомерПериода)];
						НайденныеСтроки[к1][СтрокаТаблица.ИмяТаблицы+"Количество"+"_"+Строка(НомерПериода)] = 0;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Функция УдалитьЭлементыФормы(ЭлементыЭтойФормы)
	Пока Не ЭлементыЭтойФормы.Количество()=0 Цикл
		Если Найти(ЭлементыЭтойФормы[0].Имя, "_")>0 и Найти(ЭлементыЭтойФормы[0].Имя, "КонтекстноеМеню")=0 Тогда
			Если ТипЗнч(ЭлементыЭтойФормы[0]) = Тип("ГруппаФормы") Тогда
				Если ЭлементыЭтойФормы[0].ПодчиненныеЭлементы.Количество()>0 тогда
					УдалитьЭлементыФормы(ЭлементыЭтойФормы[0].ПодчиненныеЭлементы);
					Элементы.Удалить(ЭлементыЭтойФормы[0]);
				Иначе
					Элементы.Удалить(ЭлементыЭтойФормы[0]);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЭлементыЭтойФормы[0]) = Тип("ЭлементыФормы") Тогда
				Если ЭлементыЭтойФормы[0].Количество()>0 тогда
					УдалитьЭлементыФормы(ЭлементыЭтойФормы[0]);
					Элементы.Удалить(ЭлементыЭтойФормы[0]);
				Иначе
					Элементы.Удалить(ЭлементыЭтойФормы[0]);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЭлементыЭтойФормы[0]) = Тип("ПолеФормы") Тогда
				Элементы.Удалить(ЭлементыЭтойФормы[0]);
			КонецЕсли;
		КонецЕсли;
    КонецЦикла;
КонецФункции

&НаСервере
Процедура ПриИзмененииСценария()
	ВыгрузкаСпецификацииВТЗ();
	Объект.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ПериодПланирования,Объект.Сценарий);
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить("Товары");
	МассивТЧ.Добавить("Услуги");
	Для Каждого ТЧ ИЗ МассивТЧ Цикл
		Для Каждого СтрокаТЧ Из Объект[ТЧ] Цикл
			СтрокаТЧ.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаТЧ.ПериодПланирования,Объект.Сценарий);
		КонецЦикла;
	КонецЦикла;
	УстановитьТекстПериода();
	Для Каждого ТЧ ИЗ МассивТЧ Цикл
		Для Каждого СтрокаТЧ Из Объект[ТЧ] Цикл
			СтрокаТЧ.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаТЧ.ПериодПланирования,Объект.Сценарий);
			Если СтрокаТЧ.ПериодПланирования<Объект.ПериодПланирования Тогда
				СтрокаТЧ.ПериодПланирования = Объект.ПериодПланирования;
			ИначеЕсли СтрокаТЧ.ПериодПланирования>ГоризонтПланирования Тогда
				СтрокаТЧ.ПериодПланирования = ГоризонтПланирования;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ЗагрузкаСпецификацииВТЗ();
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ДобавитьПериод(Добавить)
	Объект.ПериодПланирования=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СледующийПериодПланирования(Объект.ПериодПланирования,Объект.Сценарий,Добавить);
	УстановитьТекстПериода();
	ПриИзмененииПериода();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодПланирования(Период)
	СписокПериодов = ПолучитьСписокПериодов(Период,Объект.Сценарий);
	Если СписокПериодов.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	Оп = Новый ОписаниеОповещения("ОбработатьВыборПериодаПланирования", ЭтотОбъект, );
	ПоказатьВыборИзСписка(Оп, СписокПериодов, Элементы.ПериодВыбрать);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПериодаПланирования(Результат, Параметры) Экспорт
	
	Если Результат<>Неопределено Тогда
		Если ТипЗнч(Результат.Значение) = Тип("Число") Тогда
			ВыбратьПериодПланирования(Дата(Результат.Значение,1,1));
		Иначе
			Объект.ПериодПланирования = Результат.Значение;
			УстановитьТекстПериода();
			ПриИзмененииПериода();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокПериодов(ПериодПланирования,Сценарий)
	Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодыДляВыбора(ПериодПланирования,Сценарий);	
КонецФункции

&НаСервере
Процедура ПриИзмененииПериода()
	Если Период<>Объект.ПериодПланирования Тогда
		ВыгрузкаСпецификацииВТЗ();
		ПериодПланирования = Объект.ПериодПланирования;
		МассивТЧ = Новый Массив;
		МассивТЧ.Добавить("Товары");
		МассивТЧ.Добавить("Услуги");
		Для Каждого ТЧ Из МассивТЧ Цикл
			фин_ПроцедурыМеханизмовБюджетирования.ПереносПериодовПланированияВТабличнойЧасти(Объект[ТЧ],Объект.Сценарий,ПериодПланирования,Период,ГоризонтПланирования);
		КонецЦикла;
		Период = Объект.ПериодПланирования;
		УстановитьУсловноеОформление();
		ЗагрузкаСпецификацииВТЗ();
	КонецЕсли;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодбор(Элемент,ПлановаяНоменклатура,Услуги)
	Если Не ПлановаяНоменклатура Тогда
		узп_УправлениеЗакупкамиКлиент.ПодборНоменклатуры(ЭтаФорма,УникальныйИдентификатор,?(Услуги,"ТаблицаУслуги","ТаблицаТовары"));
	Иначе
		//узп_УправлениеЗакупкамиКлиент.НачалоПодбораНоменклатуры(Элемент,ПлановаяНоменклатура,Услуги,УникальныйИдентификатор);
		узп_УправлениеЗакупкамиКлиент.НачалоПодбораНоменклатуры(Элемент,ПлановаяНоменклатура,Услуги,УникальныйИдентификатор,Истина,ЭтаФорма,"Таблица");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗаполненииОснованием(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	ЗаполнитьПоОснованию();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованию()
	ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	ОбъектДокумент.Заполнить(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(ОбъектДокумент,"Объект");
КонецПроцедуры

&НаСервере
Процедура ДополнительныеЗатраты()
	ВыгрузкаСпецификацииВТЗ();	//Выгружаем матричную таблицу в линейную со сворачиванием номенклатурных позиций
	ЗагрузкаСпецификацииВТЗ();	//Обновляем отображение номенклатурных позиций в матричной таблице
	ПризнакПроекта = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("узп_ВестиУчетЗакупокПоПроектам");
	СписокПодразделений = Новый Массив;
	СписокНоменклатуры = Новый Массив;
	СписокСценариев = Новый Массив;
	ТаблицыИсточники = Новый Массив;
	ТаблицыИсточники.Добавить(Объект.Товары);
	ТаблицыИсточники.Добавить(Объект.Услуги);
	Для каждого Таблица из ТаблицыИсточники Цикл
		Для каждого строкаТЧ из Таблица Цикл
			Если СписокНоменклатуры.Найти(СТрокаТЧ.Номенклатура) = Неопределено Тогда
				СписокНоменклатуры.Добавить(СтрокаТЧ.Номенклатура);
			КонецЕсли;
			Если СписокПодразделений.Найти(СТрокаТЧ.Подразделение)=Неопределено Тогда
				СписокПодразделений.Добавить(СтрокаТЧ.Подразделение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	СписокНоменклатуры.Добавить(ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	СписокНоменклатуры.Добавить(ПредопределенноеЗначение("Справочник.фин_ПлановаяНоменклатура.ПустаяСсылка"));
	СписокСценариев.Добавить(Объект.Сценарий);
	СписокСценариев.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.ПустаяСсылка"));
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", СписокПодразделений);
	Запрос.УстановитьПараметр("Номенклатура", СписокНоменклатуры);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Сценарий", СписокСценариев);
	Запрос.УстановитьПараметр("ДатаНачала", Объект.ПериодПланирования);
	//Запрос.УстановитьПараметр("ДатаОкончания", ДобавитьМесяц(Объект.ПериодПланирования, ПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования)));
	Запрос.УстановитьПараметр("ДатаОкончания", фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(Объект.ПериодПланирования,Объект.Сценарий.Периодичность,ПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования)));
	Запрос.Текст = "ВЫБРАТЬ
	               |	фин_ОборотыБюджетовОбороты.Сценарий,
	               |	фин_ОборотыБюджетовОбороты.Организация,
	               |	фин_ОборотыБюджетовОбороты.ПериодПланирования КАК ПериодПланирования,
	               |	фин_ОборотыБюджетовОбороты.ФинансовыйПоказатель,
	               |	фин_ОборотыБюджетовОбороты.УправленческоеПодразделение КАК УправленческоеПодразделение,
	               |	фин_ОборотыБюджетовОбороты.Номенклатура,
	               |	узп_СоответствияПозицийПланаЗакупокИБюджетаЗакупок.Подразделение,
	               |	фин_ОборотыБюджетовОбороты.КоличествоОборот КАК Количество,
	               |	фин_ОборотыБюджетовОбороты.СуммаУпрОборот КАК Размер,
	               |	фин_ОборотыБюджетовОбороты.СуммаСценарияОборот
	               |ИЗ
	               |	РегистрСведений.узп_СоответствияПозицийПланаЗакупокИБюджетаЗакупок КАК узп_СоответствияПозицийПланаЗакупокИБюджетаЗакупок
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.фин_ОборотыБюджетов.Обороты(, , , ) КАК фин_ОборотыБюджетовОбороты
	               |		ПО (фин_ОборотыБюджетовОбороты.ФинансовыйПоказатель = узп_СоответствияПозицийПланаЗакупокИБюджетаЗакупок.ФинансовыйПоказатель)
	               |ГДЕ
	               |	фин_ОборотыБюджетовОбороты.ПериодПланирования МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И фин_ОборотыБюджетовОбороты.Организация = &Организация
	               |	И узп_СоответствияПозицийПланаЗакупокИБюджетаЗакупок.Подразделение В(&Подразделение)
	               |	И узп_СоответствияПозицийПланаЗакупокИБюджетаЗакупок.Номенклатура В(&Номенклатура)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПериодПланирования,
	               |	УправленческоеПодразделение";
	Результат = Запрос.Выполнить().Выгрузить();
	//Объект.ДополнительныеЗатраты.Загрузить(результат);
	
	МенВрТаб = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенВрТаб;
	ТабНомен =Новый ТаблицаЗначений;
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	Массив.Добавить(Тип("СправочникСсылка.фин_ПлановаяНоменклатура"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	ТабНомен.Колонки.Добавить("Номенклатура",ОписаниеТипов);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	ТабНомен.Колонки.Добавить("ПериодПланирования",ОписаниеТипов);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	ТабНомен.Колонки.Добавить("Сумма", ОписаниеТипов);
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.Подразделения"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	ТабНомен.Колонки.Добавить("Подразделение",ОписаниеТипов);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	ТабНомен.Колонки.Добавить("Количество",ОписаниеТипов);
	Массив.Добавить(Тип("СправочникСсылка.СценарииПланирования"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	ТабНомен.Колонки.Добавить("Сценарий",ОписаниеТипов);
	Если ПризнакПроекта тогда
		Массив.Добавить(Тип("СправочникСсылка.Проекты"));
		ОписаниеТипов = Новый ОписаниеТипов(Массив);
		ТабНомен.Колонки.Добавить("Проект",ОписаниеТипов);
	КонецЕсли;	
	Для каждого Таблица из ТаблицыИсточники Цикл	
		Для Каждого СтрокаТЧ Из Таблица Цикл
			НоваяСтрока = ТабНомен.Добавить();
			НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
			НоваяСтрока.ПериодПланирования = СтрокаТЧ.ПериодПланирования;
			НоваяСтрока.Сумма = СтрокаТЧ.Сумма;
			НоваяСтрока.Подразделение = СтрокаТЧ.Подразделение;
			НоваяСтрока.Количество = СтрокаТЧ.Количество;
			НоваяСтрока.Сценарий = Объект.Сценарий;
			Если ПризнакПроекта тогда
				НоваяСтрока.Проект = СтрокаТЧ.Проект;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	//Запрос.УстановитьПараметр("Сценарий", объект.Сценарий);
	Запрос.УстановитьПараметр("Номенклатура",СписокНоменклатуры);
	Запрос.УстановитьПараметр("ТзНоменклатура",ТабНомен);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номен.Номенклатура,
	               |	Номен.ПериодПланирования,
	               |	Номен.Сумма,
	               |	Номен.Подразделение,
	               |	Номен.Количество,
	               |	Номен.Сценарий
				   |"+?(ПризнакПроекта,",Номен.Проект","")+"				   
	               |ПОМЕСТИТЬ НоменклатураВДокументе
	               |ИЗ
	               |	&ТзНоменклатура КАК Номен
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ПорядокРасчетаПоСценарию.ВидЗатрат, ПорядокРасчетаБезСценария.ВидЗатрат) КАК ВидЗатрат,
	               |	ЕСТЬNULL(ПорядокРасчетаПоСценарию.СпособРасчетаВеличиныЗатрат, ПорядокРасчетаБезСценария.СпособРасчетаВеличиныЗатрат) КАК СпособРасчетаВеличиныЗатрат,
	               |	ЕСТЬNULL(ПорядокРасчетаПоСценарию.Размер, ПорядокРасчетаБезСценария.Размер) КАК Размер,
	               |	ЕСТЬNULL(ПорядокРасчетаПоСценарию.ШкалаОценки, ПорядокРасчетаБезСценария.ШкалаОценки) КАК ШкалаОценки,
	               |	ЕСТЬNULL(ПорядокРасчетаПоСценарию.УчетНоменклатуры, ПорядокРасчетаБезСценария.УчетНоменклатуры) КАК УчетНоменклатуры,
	               |	НоменклатураВДокументе.ПериодПланирования,
	               |	НоменклатураВДокументе.Сумма,
	               |	НоменклатураВДокументе.Подразделение,
	               |	НоменклатураВДокументе.Количество,
	               |	НоменклатураВДокументе.Сценарий,
	               |	НоменклатураВДокументе.Номенклатура КАК Номенклатура
				   |"+?(ПризнакПроекта,",НоменклатураВДокументе.Проект","")+"
	               |ИЗ
	               |	НоменклатураВДокументе КАК НоменклатураВДокументе
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.узп_ПорядокРасчетаЗатратНаПроведениеЗакупок КАК ПорядокРасчетаПоСценарию
	               |		ПО НоменклатураВДокументе.Номенклатура = ПорядокРасчетаПоСценарию.Номенклатура
	               |			И НоменклатураВДокументе.Сценарий = ПорядокРасчетаПоСценарию.Сценарий
				   |"+?(ПризнакПроекта,"И (НоменклатураВДокументе.Проект = ПорядокРасчетаПоСценарию.Проект)","")+"
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.узп_ПорядокРасчетаЗатратНаПроведениеЗакупок КАК ПорядокРасчетаБезСценария
	               |		ПО НоменклатураВДокументе.Номенклатура = ПорядокРасчетаБезСценария.Номенклатура
	               |			И (ПорядокРасчетаБезСценария.Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка))
				   |"+?(ПризнакПроекта,"И (НоменклатураВДокументе.Проект = ПорядокРасчетаБезСценария.Проект)","")+"
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПорядокРасчетаПоСценарию.Номенклатура,
	               |	ПорядокРасчетаПоСценарию.ВидЗатрат,
	               |	НоменклатураВДокументе.Подразделение,
	               |	НоменклатураВДокументе.ПериодПланирования";
				   //|"+?(ПризнакПроекта,",НоменклатураВДокументе.Проект","")+"
	Результат = Запрос.Выполнить().Выгрузить();
	Если Не Результат.Количество() = 0 Тогда
		Объект.ДополнительныеЗатраты.Очистить();
		Для Каждого СтрокаТЧ  из Результат Цикл
			//Затраты по сценарию
			Если ЗначениеЗаполнено(СтрокаТЧ.ВидЗатрат) тогда
				НоваяСтрока = Объект.ДополнительныеЗатраты.Добавить();
				НоваяСтрока.Номенклатура = ?(СтрокаТЧ.УчетНоменклатуры,СтрокаТЧ.Номенклатура,ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
				НоваяСтрока.Подразделение = СтрокаТЧ.Подразделение;
				НоваяСтрока.ПериодПланирования = СтрокаТЧ.ПериодПланирования;
				НоваяСтрока.ВидЗатрат = СтрокаТЧ.ВидЗатрат;
				Если 	  СтрокаТЧ.СпособРасчетаВеличиныЗатрат = Перечисления.узп_СпособыРасчетаВеличиныЗатратНаПроведениеЗакупок.КоэффициентомОтСуммы Тогда
					НоваяСтрока.Размер = СтрокаТЧ.Сумма * СтрокаТЧ.Размер;
				ИначеЕсли СтрокаТЧ.СпособРасчетаВеличиныЗатрат = Перечисления.узп_СпособыРасчетаВеличиныЗатратНаПроведениеЗакупок.КоэффициентомОтКоличества Тогда
					НоваяСтрока.Размер = СтрокаТЧ.Количество * СтрокаТЧ.Размер;
				ИначеЕсли СтрокаТЧ.СпособРасчетаВеличиныЗатрат = Перечисления.узп_СпособыРасчетаВеличиныЗатратНаПроведениеЗакупок.ПоШкалеОтКоличества Тогда
					НоваяСтрока.Размер = фин_защита.РассчитатьПоШкале(СтрокаТЧ.Количество,СтрокаТЧ.ШкалаОценки,"",СтрокаТЧ.ПериодПланирования);
				ИначеЕсли СтрокаТЧ.СпособРасчетаВеличиныЗатрат = Перечисления.узп_СпособыРасчетаВеличиныЗатратНаПроведениеЗакупок.ПоШкалеОтСуммы Тогда
					НоваяСтрока.Размер = фин_защита.РассчитатьПоШкале(СтрокаТЧ.Сумма,СтрокаТЧ.ШкалаОценки,"",СтрокаТЧ.ПериодПланирования);
				ИначеЕсли СтрокаТЧ.СпособРасчетаВеличиныЗатрат = Перечисления.узп_СпособыРасчетаВеличиныЗатратНаПроведениеЗакупок.ФиксированнаяВеличина Тогда
					НоваяСтрока.Размер = СтрокаТЧ.Размер;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ДополнительныеЗатраты.Свернуть("Подразделение,ВидЗатрат,Номенклатура,ПериодПланирования,Проект","Размер");
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПродолжительностьЦикла(Сценарий,ПериодПланирования = Неопределено)
	//Возврат Сценарий.ПродолжительностьЦикла;	
	Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Сценарий,ПериодПланирования);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФормат(Сценарий)
	Возврат фин_ПроцедурыМеханизмовБюджетирования.ПолучитьФормат(Сценарий)
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Товары" и ИмяТаблицы <> "Услуги" и ИмяТаблицы <> "ТаблицаТовары" и ИмяТаблицы <> "ТаблицаУслуги" Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС, УчитыватьАкциз");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СведенияОСпискеНоменклатуры = дог_УправлениеДоговорами.ПолучитьСведенияОСпискеНоменклатуры(
		фин_ОбщегоНазначенияКлиентСервер.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), Объект);
		
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		Если ИмяТаблицы = "Товары" Тогда
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
			СтруктураОтбора.Вставить("Цена", СтрокаТовара.Цена);
		КонецЕсли;

		СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
						
		Иначе
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = ЭтаФорма[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			СтрокаТабличнойЧасти.НомерСтроки = ЭтаФорма[ИмяТаблицы].Индекс(СтрокаТабличнойЧасти)+1;
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			Если ИмяТаблицы = "ТаблицаТовары" Тогда
				СтрокаТабличнойЧасти.Коэффициент = СведенияОНоменклатуре.Коэффициент;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборПлановойНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Товары" и ИмяТаблицы <> "Услуги" и ИмяТаблицы <> "ТаблицаТовары" и ИмяТаблицы <> "ТаблицаУслуги" Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС, УчитыватьАкциз");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("ТипЦен",ТипЦен);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		Если ИмяТаблицы = "ТаблицаТовары" Тогда
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
		КонецЕсли;

		СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			//СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
		Иначе
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = ЭтотОбъект[ИмяТаблицы].Добавить();
			СтрокаТабличнойЧасти.НомерСтроки = ЭтотОбъект[ИмяТаблицы].Индекс(СтрокаТабличнойЧасти)+1;
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			Если ИмяТаблицы = "ТаблицаТовары" Тогда
				СтрокаТабличнойЧасти.Коэффициент = 1;
				Заполнять = Истина;
				а=0;
				Пока Заполнять Цикл
					а=а+1;
					Если СтрокаТабличнойЧасти.Свойство("ТоварыКоличество_"+а) = Истина Тогда
						СтрокаТабличнойЧасти["ТоварыКоличество_"+а] = СтрокаТовара.Количество;
					Иначе
						Заполнять = ложь;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Заполнять = Истина;
				а=0;
				Пока Заполнять Цикл
					а=а+1;
					Если СтрокаТабличнойЧасти.Свойство("УслугиКоличество_"+а) = Истина Тогда
						СтрокаТабличнойЧасти["УслугиКоличество_"+а] = СтрокаТовара.Количество;
					Иначе
						Заполнять = ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			//СтрокаТабличнойЧасти.ПериодПланирования = Объект.ПериодПланирования;
			НоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти.ПолучитьИдентификатор(),ИмяТаблицы)
		КонецЕсли;
	КонецЦикла;
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ТаблицаПоложениеГруппировкиНаСервере(Команда = Истина)
	Если Команда <> Ложь тогда
		ТаблицаТоварыПоложениеГруппировки = Не ТаблицаТоварыПоложениеГруппировки;
		ТаблицаУслугиПоложениеГруппировки = Не ТаблицаУслугиПоложениеГруппировки;
	КонецЕсли;
	ПоложениеГруппировки();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЦветКолонки(НомерКолонки)
	Если НомерКолонки = 0 тогда
		Возврат Новый Цвет(255,255,255);
	КонецЕсли;
	Если НомерКолонки = 1 тогда
		Возврат Новый Цвет(238,232,170)
	КонецЕсли;
	Если НомерКолонки = 2 Тогда
		Возврат Новый Цвет(204,255,204)
	КонецЕсли;
	Возврат Новый Цвет(255,236,139)	
КонецФункции

Функция НайтиСтрокуТабЧасти(Объект, ТабличнаяЧасть, СтруктураОтбора)

	СтрокаТабличнойЧасти = Неопределено;
	МассивНайденныхСтрок = ЭтаФорма[ТабличнаяЧасть].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда

		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСвойство(Значение,Свойство)
	Возврат Значение[Свойство];
КонецФункции
