////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мОтображатьСтруктурныеПодразделения Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем мМассивСчетовБУДляЗаполнения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАвизо()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	АвизоПрочее.Номер,
	               |	АвизоПрочее.Дата,
	               |	АвизоПрочее.Организация,
	               |	АвизоПрочее.СтруктурноеПодразделениеОтправитель,
	               |	АвизоПрочее.СтруктурноеПодразделениеПолучатель
	               |ИЗ
	               |	Документ.АвизоПрочее КАК АвизоПрочее
	               |ГДЕ
	               |	АвизоПрочее.Ссылка = &ТекущийДокумент";	
		
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвизоПрочее_Авизо";
	Макет       = ПолучитьМакет("Авизо");

	// Выводим основную шапку
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Авизо ");
	ОбластьМакета.Параметры.Организация    = СокрЛП(Шапка.Организация.НаименованиеПолное);
	
	Если ЗначениеЗаполнено(Шапка.СтруктурноеПодразделениеОтправитель) Тогда
		ОбластьМакета.Параметры.Отправитель = СокрЛП(Шапка.СтруктурноеПодразделениеОтправитель.Наименование);	
	Иначе
		ОбластьМакета.Параметры.Отправитель = СокрЛП(Шапка.Организация.НаименованиеПолное);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Шапка.СтруктурноеПодразделениеПолучатель) Тогда 			
		ОбластьМакета.Параметры.Получатель =  СокрЛП(Шапка.СтруктурноеПодразделениеПолучатель.Наименование);
	Иначе
		ОбластьМакета.Параметры.Получатель = СокрЛП(Шапка.Организация.НаименованиеПолное);
	КонецЕсли;
		       	
	ТабДокумент.Вывести(ОбластьМакета);
 
	// Выводим шапку таблицы БУ
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицыБУ");
	ТабДокумент.Вывести(ОбластьМакета);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТиповойДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	ТиповойДвиженияССубконто.СчетДт,
	|	ТиповойДвиженияССубконто.СубконтоДт1,	
	|	ТиповойДвиженияССубконто.СубконтоДт2,
	|	ТиповойДвиженияССубконто.СубконтоДт3,	
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоДт1) КАК ПРЕДСТАВЛЕНИЕСубконтоДт1,	
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоДт2) КАК ПРЕДСТАВЛЕНИЕСубконтоДт2,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоДт3) КАК ПРЕДСТАВЛЕНИЕСубконтоДт3,
	|	ТиповойДвиженияССубконто.СчетКт,
	|	ТиповойДвиженияССубконто.СубконтоКт1,
	|	ТиповойДвиженияССубконто.СубконтоКт2,
	|	ТиповойДвиженияССубконто.СубконтоКт3,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоКт1)КАК ПРЕДСТАВЛЕНИЕСубконтоКт1,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоКт2) КАК ПРЕДСТАВЛЕНИЕСубконтоКт2,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоКт3) КАК ПРЕДСТАВЛЕНИЕСубконтоКт3,
	|	ТиповойДвиженияССубконто.Организация,
	|	ВЫБОР
	|		КОГДА ТиповойДвиженияССубконто.ВалютаДт ЕСТЬ NULL 
	|			ТОГДА ТиповойДвиженияССубконто.ВалютаКт
	|		ИНАЧЕ ТиповойДвиженияССубконто.ВалютаДт
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ТиповойДвиженияССубконто.ВалютнаяСуммаДт ЕСТЬ NULL 
	|			ТОГДА ТиповойДвиженияССубконто.ВалютнаяСуммаКт
	|		ИНАЧЕ ТиповойДвиженияССубконто.ВалютнаяСуммаДт
	|	КОНЕЦ КАК ВалСумма,
	|	ВЫБОР
	|		КОГДА ТиповойДвиженияССубконто.КоличествоДт ЕСТЬ NULL 
	|			ТОГДА ТиповойДвиженияССубконто.КоличествоКт
	|		ИНАЧЕ ТиповойДвиженияССубконто.КоличествоДт
	|	КОНЕЦ КАК Количество,
	|	ТиповойДвиженияССубконто.Сумма,
	|	ТиповойДвиженияССубконто.Содержание
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор = &Регистратор) КАК ТиповойДвиженияССубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";    	
	
	ВыборкаДвижений = Запрос.Выполнить().Выбрать();

	НС = 1;
	// Выводим строки таблицы БУ
	Пока ВыборкаДвижений.Следующий() Цикл
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыБУ");
		ОбластьМакета.Параметры.Заполнить(ВыборкаДвижений);
		ОбластьМакета.Параметры.НомерСтроки = НС;
		
		АналитикаДт = Строка(ВыборкаДвижений.СубконтоДт1) + Символы.ПС
		            + Строка(ВыборкаДвижений.СубконтоДт2) + Символы.ПС
                    + Строка(ВыборкаДвижений.СубконтоДт3);
					
		АналитикаКт = Строка(ВыборкаДвижений.СубконтоКт1) + Символы.ПС
		            + Строка(ВыборкаДвижений.СубконтоКт2) + Символы.ПС
                    + Строка(ВыборкаДвижений.СубконтоКт3);
					
		ОбластьМакета.Параметры.АналитикаДт = АналитикаДт;
		ОбластьМакета.Параметры.АналитикаКт = АналитикаКт;
		
		
		ТабДокумент.Вывести(ОбластьМакета);
        НС = НС +1;		
	КонецЦикла;

	// Выводим подвал таблицы БУ
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыБУ");
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим общий подвал
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.РасшифровкаПодписиИсполнителя = ?(НЕ ЗначениеЗаполнено(Ответственный), "", ОбщегоНазначения.ФамилияИнициалыФизЛица(Ответственный.ФизЛицо));
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьПеремещениеТоваров()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Авизо" тогда
		ТабДокумент = ПечатьАвизо();
	КонецЕсли;    
		
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,ЭтотОбъект.Метаданные().Представление()), Ссылка);
	           
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Авизо","Авизо");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
  	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	    		
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧасти(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("СчетОтправительБУ, СчетПолучательБУ");
	
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		СтруктураОбязательныхПолей.Вставить("СчетОтправительНУ");
		СтруктураОбязательныхПолей.Вставить("СчетПолучательНУ"); 
		СтруктураОбязательныхПолей.Вставить("ВидУчетаНУОтправитель");
		СтруктураОбязательныхПолей.Вставить("ВидУчетаНУПолучатель");
		
	КонецЕсли;
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДанныеБух", СтруктураОбязательныхПолей, Отказ, Заголовок);	
	
	ПроверитьЗаполнениеТабличнойЧастиПострочно(СтруктураШапкиДокумента, Отказ, Заголовок)
			
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧасти()

// Проверяет правильность заполнения табличной части 
// в специфических случаях
Процедура ПроверитьЗаполнениеТабличнойЧастиПострочно(СтруктураШапкиДокумента, Отказ, Заголовок)
	// Цикл по строкам табличной части.
	
	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти["ДанныеБух"].Реквизиты;
    СтрокаНачалаСообщенияОбОшибке = "";

	Для каждого СтрокаТаблицы Из ДанныеБух Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		""" табличной части: ";
		
		СтруктураОбязательныхПолей = Новый Структура;
		Если СтрокаТаблицы.СчетОтправительБУ.Количественный ИЛИ СтрокаТаблицы.СчетОтправительНУ.Количественный Тогда 
			СтруктураОбязательныхПолей.Вставить("Количество");			
		КонецЕсли;
		
		Если СтрокаТаблицы.СчетОтправительБУ.Валютный ИЛИ СтрокаТаблицы.СчетПолучательБУ.Валютный Тогда 
			СтруктураОбязательныхПолей.Вставить("Валюта");			
			СтруктураОбязательныхПолей.Вставить("ВалютнаяСумма");			
		КонецЕсли;
		// Цикл проверки по списку реквизитов
		Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл			
			Значение = СтрокаТаблицы[КлючЗначение.Ключ];           			
			Если НЕ ЗначениеЗаполнено(Значение) Тогда // надо ругаться
				
				// Проверка и вывод сообщений
				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //стандартное ругательство
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
					
				Иначе
					СтрокаСообщения = КлючЗначение.Значение;				
				КонецЕсли;                                  
				
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;                                  
		КонецЦикла;		
	КонецЦикла;         

КонецПроцедуры	

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ПроводкиБУ = Движения.Типовой;
	ПроводкиНУ = Движения.Налоговый;
	// Создание движений документа по БУ, НУ
	Для Каждого СтрокаТЧ Из ДанныеБух Цикл
		ОтражатьПоДебетуБУ = Истина;
		СформироватьПроводкуБух(ПроводкиБУ, Истина, Ложь, СтрокаТЧ, СтруктураШапкиДокумента, ОтражатьПоДебетуБУ);
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			СформироватьПроводкуБух(ПроводкиНУ, Ложь, Истина, СтрокаТЧ, СтруктураШапкиДокумента,ОтражатьПоДебетуБУ);
		КонецЕсли;    	
	КонецЦикла;

	ПроводкиБУ.Записать(Ложь);
	ПроводкиНУ.Записать(Ложь);
	
КонецПроцедуры

Процедура СформироватьПроводкуБух(Операция, ОтражатьВБУ, ОтражатьВНУ, СтрокаТЧ, СтруктураШапкиДокумента,ОтражатьПоДебетуБУ = Истина)
	
	Если ОтражатьВБУ Тогда
		СчетОтправитель = СтрокаТЧ.СчетОтправительБУ;
		СчетПолучатель  = СтрокаТЧ.СчетПолучательБУ;
		ИмяСубконтоОтправитель = "СубконтоОтправительБУ";
		ИмяСубконтоПолучатель  = "СубконтоПолучательБУ";		
	Иначе
		СчетОтправитель = СтрокаТЧ.СчетОтправительНУ;
		СчетПолучатель  = СтрокаТЧ.СчетПолучательНУ;
		ИмяСубконтоОтправитель = "СубконтоОтправительНУ";
		ИмяСубконтоПолучатель  = "СубконтоПолучательНУ";		
	КонецЕсли;
	
	ВидСчетаУчета = СчетОтправитель.Вид;
	
	Если ВидСчетаУчета = ВидСчета.Активный
		ИЛИ (ВидСчетаУчета = ВидСчета.АктивноПассивный И ОтражатьВНУ И НЕ ОтражатьПоДебетуБУ)	Тогда
		Если ОтражатьВБУ Тогда
			ОтражатьПоДебетуБУ      = Ложь;
		КонецЕсли;
		ПрефиксСчетаОтправителя = "Кт";
		ПрефиксСчетаПолучателя  = "Дт";
	ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный 
		ИЛИ (ВидСчетаУчета = ВидСчета.АктивноПассивный И ОтражатьВНУ И  ОтражатьПоДебетуБУ) Тогда
		Если ОтражатьВБУ Тогда
			ОтражатьПоДебетуБУ      = Истина;
		КонецЕсли; 		
		ПрефиксСчетаОтправителя = "Дт";
		ПрефиксСчетаПолучателя  = "Кт";			
	ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный Тогда
		
		Если СтрокаТЧ.Сумма > 0 Тогда	
			ПрефиксСчетаОтправителя = "Дт";
			ПрефиксСчетаПолучателя  = "Кт";         
		Иначе  		
			ПрефиксСчетаОтправителя = "Кт";
			ПрефиксСчетаПолучателя  = "Дт";
		КонецЕсли;			
	КонецЕсли;
	
	Проводка = Операция.Добавить();
	Проводка.Период      = СтруктураШапкиДокумента.Дата;
	Проводка.Организация = СтруктураШапкиДокумента.Организация;
	Проводка.Содержание  = СтрокаТЧ.Содержание;
	Проводка.Сумма       = СтрокаТЧ.Сумма;  	
	
	Проводка["Счет" + ПрефиксСчетаОтправителя] = СчетОтправитель;
	Для Ном = 1 По 3 Цикл
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ПрефиксСчетаОтправителя], Проводка["Субконто" + ПрефиксСчетаОтправителя], Ном, СтрокаТЧ[ИмяСубконтоОтправитель + Ном]);
	КонецЦикла;
	
	ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель, ПрефиксСчетаОтправителя);
	
	Если ОтражатьВБУ И  СчетОтправитель.Валютный Тогда
		Проводка["Валюта" + ПрефиксСчетаОтправителя] = СтрокаТЧ.Валюта;
		Проводка["ВалютнаяСумма" + ПрефиксСчетаОтправителя] = СтрокаТЧ.ВалютнаяСумма;
	КонецЕсли;
	
	Если СчетОтправитель.Количественный Тогда
		Проводка["Количество" + ПрефиксСчетаОтправителя] = СтрокаТЧ.Количество;
	КонецЕсли; 	
	
	Проводка["Счет" + ПрефиксСчетаПолучателя] = СчетПолучатель;
	Для Ном = 1 По 3 Цикл
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ПрефиксСчетаПолучателя], Проводка["Субконто" + ПрефиксСчетаПолучателя], Ном, СтрокаТЧ[ИмяСубконтоПолучатель + Ном]);
	КонецЦикла;
	ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, ПрефиксСчетаПолучателя);
	
	Если ОтражатьВБУ И СчетПолучатель.Валютный Тогда
		Проводка["Валюта" + ПрефиксСчетаПолучателя]        = СтрокаТЧ.Валюта;
		Проводка["ВалютнаяСумма" + ПрефиксСчетаПолучателя] = СтрокаТЧ.ВалютнаяСумма;
	КонецЕсли;
	Если СчетПолучатель.Количественный Тогда
		Проводка["Количество" + ПрефиксСчетаПолучателя] = СтрокаТЧ.Количество;
	КонецЕсли;	
	
	Если ОтражатьВНУ Тогда
		Проводка["ВидУчета" +ПрефиксСчетаОтправителя] =  СтрокаТЧ.ВидУчетаНУОтправитель;
		Проводка["ВидУчета" +ПрефиксСчетаПолучателя] =  СтрокаТЧ.ВидУчетаНУПолучатель;
	КонецЕсли;  	
		
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ  

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь);
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	
КонецПроцедуры

//Процедура-обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(Ложь,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	
	//Необходимость отражения в НУ определяется только по признаку "Учитывать КПН". Упрощенной схемы, отражения постоянных разниц в НУ (если не ведется учет ВР и вид учета = ПР)
	//данный документ не поддерживает. 
	//Данные для отражения по НУ, всегда видимы и редактируются, т.е., что пользователь ввел, то и отразится в проводках регистра бухгалтерии "Налоговый".
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН);
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
		
	// Получим значения учетной политики
	мУчетнаяПолитикаПоНалоговомуУчету 		= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
	мУчетнаяПолитикаПоБухгалтерскомуУчету 	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Бух");
	
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Если шапка не заполнена корректна то дальше лучше не идти, поскольку возможны ошибки
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеТабличнойЧасти(СтруктураШапкиДокумента, Отказ, Заголовок);

	       	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ,Заголовок);		
	КонецЕсли;
    	
КонецПроцедуры // ОбработкаПроведения()
          

мВалютаРегламентированногоУчета     = Константы.ВалютаРегламентированногоУчета.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
