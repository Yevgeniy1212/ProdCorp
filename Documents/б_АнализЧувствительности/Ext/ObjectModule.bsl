////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

#Если Клиент Тогда
	
// Функция формирует табличный документ унифицированной формы З-8
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме З-8.
//
Функция Печатьтаблицы()
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АнализФинансовогоРезультата";
	Макет       = ПолучитьМакет("Макет");

	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьМакета.Параметры.ПредставлениеЗаголовка	 = "Исходные данные";
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	Для Каждого СтрокаТЧ из ИсходныеДанные Цикл
		ОбластьМакета.Параметры.Заполнить(СтрокаТЧ);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьМакета.Параметры.ПредставлениеЗаголовка	 = "Расчет";
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	Для Каждого СтрокаТЧ из Расчет Цикл
		ОбластьМакета.Параметры.Заполнить(СтрокаТЧ);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Область4");
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Область5");
	Для Каждого СтрокаТЧ из ФинансовыйРезультатСПродажами Цикл
		ОбластьМакета.Параметры.Заполнить(СтрокаТЧ);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	Возврат ТабДокумент;
	//
КонецФункции // ПечатьБронирование()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Макет" Тогда
		ТабДокумент = Печатьтаблицы();
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
                                                                                                                                                    
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Макет","Форма для печати");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ЗаполнитьТаблЧастьИсходныеДанные()
	ИсходныеДанные.Очистить();
	НоваяСтрока = ИсходныеДанные.Добавить();
	НоваяСтрока.Наименование = "Базисный объем продаж";
	НоваяСтрока.Символ = "Q";
	НоваяСтрока.Размерность = "тыс.тонн";
	
	НоваяСтрока = ИсходныеДанные.Добавить();
	НоваяСтрока.Наименование = "Базисная цена реализации без НДС";
	НоваяСтрока.Символ = "P";
	НоваяСтрока.Размерность = "тенге/тонна";
	
	НоваяСтрока = ИсходныеДанные.Добавить();
	НоваяСтрока.Наименование = "Себестоимость";
	НоваяСтрока.Символ = "С";
	НоваяСтрока.Размерность = "тенге/тонна";
	
	НоваяСтрока = ИсходныеДанные.Добавить();
	НоваяСтрока.Наименование = "Административные расходы";
	НоваяСтрока.Символ = "";
	НоваяСтрока.Размерность = "тыс.тенге";

	НоваяСтрока = ИсходныеДанные.Добавить();
	НоваяСтрока.Наименование = "Прочие расходы";
	НоваяСтрока.Символ = "";
	НоваяСтрока.Размерность = "тыс.тенге";

	НоваяСтрока = ИсходныеДанные.Добавить();
	НоваяСтрока.Наименование = "Факт. убыток/прибыль прошлых месяцев с начала года";
	НоваяСтрока.Символ = "";
	НоваяСтрока.Размерность = "тыс.тенге";

	НоваяСтрока = ИсходныеДанные.Добавить();
	НоваяСтрока.Наименование = "ИТОГО:Постоянные расходы";
	НоваяСтрока.Символ = "FC";
	НоваяСтрока.Размерность = "тыс.тенге";
	
КонецПроцедуры

Процедура ЗаполнитьТаблЧастьРасчет()
	
	Расчет.Очистить();
	
	НоваяСтрока = Расчет.Добавить();
	НоваяСтрока.Наименование = "Выручка";
	НоваяСтрока.Символ = "REV";
	НоваяСтрока.Размерность = "тыс.тенге";
	
	НоваяСтрока = Расчет.Добавить();
	НоваяСтрока.Наименование = "Переменные расходы(себестоимость+хранение)";
	НоваяСтрока.Символ = "VC";
	НоваяСтрока.Размерность = "тыс.тенге";
	
	НоваяСтрока = Расчет.Добавить();
	НоваяСтрока.Наименование = "Контрибуционная маржа";
	НоваяСтрока.Символ = "СМ";
	НоваяСтрока.Размерность = "тыс.тенге";
	
	НоваяСтрока = Расчет.Добавить();
	НоваяСтрока.Наименование = "Постоянные расходы";
	НоваяСтрока.Символ = "FC";
	НоваяСтрока.Размерность = "тыс.тенге";
	
	НоваяСтрока = Расчет.Добавить();
	НоваяСтрока.Наименование = "Прочие расходы (Провизии)";
	НоваяСтрока.Символ = "";
	НоваяСтрока.Размерность = "тыс.тенге";
	
	НоваяСтрока = Расчет.Добавить();
	НоваяСтрока.Наименование = "Доходы по финансированию (проценты)";
	НоваяСтрока.Символ = "";
	НоваяСтрока.Размерность = "тыс.тенге";
	
	НоваяСтрока = Расчет.Добавить();
	НоваяСтрока.Наименование = "Прочие доходы";
	НоваяСтрока.Символ = "";
	НоваяСтрока.Размерность = "тыс.тенге";
	
	НоваяСтрока = Расчет.Добавить();
	НоваяСтрока.Наименование = "Прибыль до выплаты процентов и налогов";
	НоваяСтрока.Символ = "EBIT";
	НоваяСтрока.Размерность = "тыс.тенге";
	
	НоваяСтрока = Расчет.Добавить();
	НоваяСтрока.Наименование = "Расходы по финансированию (проценты)";
	НоваяСтрока.Символ = "INT";
	НоваяСтрока.Размерность = "тыс.тенге";
	
	НоваяСтрока = Расчет.Добавить();
	НоваяСтрока.Наименование = "Прибыль до выплаты налогов";
	НоваяСтрока.Символ = "EBT";
	НоваяСтрока.Размерность = "тыс.тенге";
	
	НоваяСтрока = Расчет.Добавить();
	НоваяСтрока.Наименование = "Налог на прибыль";
	НоваяСтрока.Символ = "TAX";
	НоваяСтрока.Размерность = "тыс.тенге";
	
	НоваяСтрока = Расчет.Добавить();
	НоваяСтрока.Наименование = "Чистая прибыль";
	НоваяСтрока.Символ = "NET";
	НоваяСтрока.Размерность = "тыс.тенге";
Конецпроцедуры

//
//
Процедура  ЗаполнитьДанныеПоПродажам() Экспорт
	ФинансовыйРезультатСПродажами.Очистить();
	
	НоваяСтрока = ФинансовыйРезультатСПродажами.Добавить();
	НоваяСтрока.Наименование = "Цена,тенге за тонну";
	
	НоваяСтрока = ФинансовыйРезультатСПродажами.Добавить();
	НоваяСтрока.Наименование = "Цена без НДС,тенге за тонну";
	
	Для А = 1 По 20 Цикл
		НоваяСтрока = ФинансовыйРезультатСПродажами.Добавить();
	КонецЦИкла
	
КонецПроцедуры
//
//
Процедура ПервоначальноеЗаполнениеДанных() Экспорт
	
	ЗаполнитьТаблЧастьИсходныеДанные();
	ЗаполнитьТаблЧастьРасчет();
    ЗаполнитьДанныеПоПродажам();
	
КонецПроцедуры

Процедура ОбновитьИсходныеДанные() Экспорт
	
	Для каждого СтрокаТч ИЗ ИсходныеДанные Цикл
		СтрокаТч.Показатель =0;
	КонецЦикла;
	
	ПолучитьАдминистративныеРасходы();
	ПолучитьРасходыПоРеализации();
	ПолучитьФинансовыйРезультатПоБУ();
	ПолучитьСебестоимостьЗерна();
	РассчитатьПостоянныеРасходы();
	
КонецПроцедуры

Процедура ПолучитьСебестоимостьЗерна()
	
	     Запрос = Новый Запрос;
		 
		 Списоксчетов = новый массив;
		 Списоксчетов.Добавить(Планысчетов.Типовой.КоммерческиеРесурсыЗерна);
		 		 
		 Запрос.УстановитьПараметр("Списоксчетов",Списоксчетов);
		 Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(НачалоМесяца(Дата)));
		 
		 Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	ТиповойОстатки.СуммаОстатокДт,
		 |	ТиповойОстатки.КоличествоОстатокДт,
		 |	ТиповойОстатки.Счет
		 |ИЗ
		 |	РегистрБухгалтерии.Типовой.Остатки(&началоПериода, Счет В ИЕРАРХИИ (&СписокСчетов), , ) КАК ТиповойОстатки
		 |ИТОГИ Сумма(СуммаОстатокДт),Сумма(КоличествоОстатокДт) ПО Общие";
		 
		 Результат = Запрос.Выполнить();
		 
		 ВыборкаДетальныеЗаписи = Результат.Выбрать();
		 
		 Если  ВыборкаДетальныеЗаписи.Следующий() Тогда
			 Если ВыборкаДетальныеЗаписи.КоличествоОстатокДт > 0 Тогда
				  Себестоимость = ВыборкаДетальныеЗаписи.СуммаОстатокДт/ВыборкаДетальныеЗаписи.КоличествоОстатокДт;
			 Иначе
				  Себестоимость = 0;
			 КонецЕсли;
		 Иначе
			      Себестоимость = 0;
		 КонецЕсли;
		 
		 ТекСтрока = ИсходныеДанные.Получить(2);
		 
		 Если ТекСтрока <> НЕОПРЕДЕЛЕНО Тогда
			 ТекСтрока.Показатель = Себестоимость;
		 КонецЕсли;
	 
		 
		 
Конецпроцедуры

Процедура ПолучитьАдминистративныеРасходы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|    АдмРасходы.СтатьяБюджета
		|Поместить СписокДляОтбора
		|ИЗ
		|  РегистрСведений.б_АдминистративныеРасходыДляАнализаЧуствительности КАК АдмРасходы
		|ГДЕ
		|    АдмРасходы.ИсточникФинансирования = &ИсточникФинансирования 
		|;
		|ВЫБРАТЬ
		|	б_БюджетОбороты.Бюджет,
		|	б_БюджетОбороты.СуммаОборот
		|ИЗ
		|	РегистрНакопления.б_Бюджет.Обороты(&началоПериода, 
		|										&КонецПериода,
		|										, СтатьяБюджета В ИЕРАРХИИ (ВЫБРАТЬ
		|																	 	СписокДляОтбора.СтатьяБюджета
		|																	ИЗ
		|																		СписокДляОтбора
		|																	)
		|										) КАК б_БюджетОбороты
		|
		|ИТОГИ Сумма(СуммаОборот) ПО Общие";

	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоМесяца(Дата)));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецГода(Дата)));
	Запрос.УстановитьПараметр("ИсточникФинансирования", ИсточникФинансирования);
	Запрос.УстановитьПараметр("Статус", Перечисления.СостоянияОбъектов.Утвержден);
	Результат = Запрос.Выполнить();

	ОбщиеИтоги = Результат.Выбрать();

	Если ОбщиеИтоги.Следующий() Тогда
		АдмРасходы = - ОбщиеИтоги.СуммаОборот/1000;
	Иначе
		АдмРасходы = 0;
	КонецЕсли;

	ТекСтрока = ИсходныеДанные.Получить(3);
	
	Если ТекСтрока <> НЕОПРЕДЕЛЕНО Тогда
		 ТекСтрока.Показатель = АдмРасходы;
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьРасходыПоРеализации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|    РеалРасходы.СтатьяБюджета
		|Поместить СписокДляОтбора
		|ИЗ
		|  РегистрСведений.б_ПрочиеРасходыПоРеализацииДляАнализаЧуствительности КАК РеалРасходы
		|ГДЕ
		|    РеалРасходы.ИсточникФинансирования = &ИсточникФинансирования 
		|;
		|ВЫБРАТЬ
		|	б_БюджетОбороты.Бюджет,
		|	б_БюджетОбороты.СуммаОборот
		|ИЗ
		|	РегистрНакопления.б_Бюджет.Обороты(&началоПериода, 
		|										&КонецПериода,
		|										, СтатьяБюджета В ИЕРАРХИИ (ВЫБРАТЬ
		|																	 	СписокДляОтбора.СтатьяБюджета
		|																	ИЗ
		|																		СписокДляОтбора
		|																	)
		|										) КАК б_БюджетОбороты
		|
		|ИТОГИ Сумма(СуммаОборот) ПО Общие";

	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоМесяца(Дата)));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецГода(Дата)));
	Запрос.УстановитьПараметр("ИсточникФинансирования", ИсточникФинансирования);
	Запрос.УстановитьПараметр("Статус", Перечисления.СостоянияОбъектов.Утвержден);
	Результат = Запрос.Выполнить();

	ОбщиеИтоги = Результат.Выбрать();

	Если ОбщиеИтоги.Следующий() Тогда
		РеалРасходы = - ОбщиеИтоги.СуммаОборот/1000;
	Иначе
		РеалРасходы = 0;
	КонецЕсли;

	ТекСтрока = ИсходныеДанные.Получить(4);
	
	Если ТекСтрока <> НЕОПРЕДЕЛЕНО Тогда
		 ТекСтрока.Показатель = РеалРасходы;
	КонецЕсли;
	
КонецПроцедуры

//
//
Процедура ПолучитьФинансовыйРезультатПоБУ() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Период",НачалоДня(НачалоМесяца(Дата)));
	
	Если ЗначениеЗаполнено(ИсточникФинансирования) Тогда
			ВыбСчет = Новый Массив;
			ВыбСчет.Добавить(ПланыСчетов.Типовой.ИтоговаяПрибыльИтоговыйУбыток);
			ВыбСчет.Добавить(ПланыСчетов.Типовой.Корректировкирезервов);
			
			Запрос.УстановитьПараметр("ВыбСчет", ВыбСчет);
	Иначе
		
	Запрос.УстановитьПараметр("ВыбСчет",ПланыСчетов.Типовой.ИтоговаяПрибыльИтоговыйУбыток);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТиповойОстатки.СуммаОстатокКт-ТиповойОстатки.СуммаОстатокДт КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&Период, 
	|										Счет В ИЕРАРХИИ (&Выбсчет),
	|										,
	|										)
	|						КАК ТиповойОстатки
	|";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ФинансовыйРезультатБУ = Результат.Остаток/1000;
	Иначе
		ФинансовыйРезультатБУ = 0;
	КонецЕсли;
	
	ТекСтрока = ИсходныеДанные.Получить(5);
	
	Если ТекСтрока <> НЕОПРЕДЕЛЕНО Тогда
		 ТекСтрока.Показатель = ФинансовыйРезультатБУ;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьПостоянныеРасходы()
	ИтСумма = 0;
	Для каждого СтрокаТЧ ИЗ ИсходныеДанные Цикл
		Если СтрокаТЧ.НомерСтроки = 4 Тогда
			ИтСумма = ИтСумма + СтрокаТЧ.Показатель;
		ИначеЕсли СтрокаТЧ.НомерСтроки = 5 Тогда
			ИтСумма = ИтСумма + СтрокаТЧ.Показатель;
		ИначеЕсли СтрокаТЧ.НомерСтроки = 6 Тогда
			ИтСумма = ИтСумма + СтрокаТЧ.Показатель;
		ИначеЕсли СтрокаТЧ.НомерСтроки = 7 Тогда
			СтрокаТЧ.Показатель = ИтСумма;
		КонецЕсли;
	КонецЦикла;
	
	Строка		= Расчет.Получить(3);
	Строка.Показатель = ?(Строка<>НЕОПРЕДЕЛЕНО,ИтСумма,0)
	
КонецПроцедуры

Функция ПолучитьОстатокНаНачалоПериода()

	Запрос = Новый Запрос;
	
		списоксчетов = новый массив;
		Списоксчетов.Добавить(Планысчетов.Типовой.КоммерческиеРесурсыЗерна);
			
	Запрос.УстановитьПараметр("Списоксчетов",Списоксчетов);
	Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(НачалоМесяца(Дата)));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТиповойОстатки.СуммаОстатокДт,
	|	ТиповойОстатки.КоличествоОстатокДт,
	|	ТиповойОстатки.Счет
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&началоПериода, Счет В ИЕРАРХИИ (&СписокСчетов), , ) КАК ТиповойОстатки
	|ИТОГИ Сумма(СуммаОстатокДт),Сумма(КоличествоОстатокДт) ПО Общие";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.КоличествоОстатокДт/1000;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	
КонецФункции // ПолучитьОстатокНаНачалоПериода()

Процедура РассчитатьХранение(ТекСтрокаРасчета,ТекСтрокаХранения)
	
	Если ТекСтрокаХранения = НЕОПРЕДЕЛЕНО тогда
		СтрокаХранения = РасчетХранения.Добавить();
	Иначе
		СтрокаХранения = ТекСтрокаХранения;
	КонецЕсли;
	
	ОстатокНаНачало = ПолучитьОстатокНаНачалоПериода();
	ОстатокНаКонецМесяца = ОстатокНаНачало+ПланируемыйЗакуп-ТекСтрокаРасчета.Количество;
	
	СреднийОбъем = (ОстатокНаКонецМесяца+ОстатокНаНачало)/2;
	
	СреднийОбъем = ?(СреднийОбъем<0,-СреднийОбъем,СреднийОбъем);
	
	СтрокаХранения.Описание 					= "Хранение";
    СтрокаХранения.ТарифХранения 				= ТарифХранения;
	СтрокаХранения.КоличествоМесяцевХранения 	= 12-Месяц(Дата)+1;
	СтрокаХранения.ОстатокНаНачалоМесяца 		= ОстатокНаНачало;
	СтрокаХранения.ПланируемыйЗакуп 			= ПланируемыйЗакуп;
	СтрокаХранения.ПланируемаяРеализация 		= ТекСтрокаРасчета.Количество;
	СтрокаХранения.ОстатокНаКонецМесяца 		= ОстатокНаКонецМесяца;
	СтрокаХранения.СреднемесячныйОбъем  		= СреднийОбъем;
	СтрокаХранения.Сумма						= СтрокаХранения.ТарифХранения
													*СтрокаХранения.КоличествоМесяцевХранения
													*СтрокаХранения.СреднемесячныйОбъем;
													
КонецПроцедуры

Функция ПолучитьХранение(ТекСтрока)
Перем Сумма;

	ТекСтрокаХранения = РасчетХранения.Найти(ТекСтрока.Количество,"ПланируемаяРеализация");
	
	Сумма = 0;
	
	Если ТекСтрокаХранения = НЕОПРЕДЕЛЕНО Тогда
		НоваяСтрока = истина;
	Иначе
		Если  ПланируемыйЗакуп <> ТекСтрокаХранения.ПланируемыйЗакуп
			ИЛИ ТекСтрока.Количество <> ТекСтрокаХранения.ПланируемаяРеализация Тогда
			НоваяСтрока = истина;
		Иначе
			НоваяСтрока = ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		РассчитатьХранение(ТекСтрока,ТекСтрокаХранения);
		ПолучитьХранение(ТекСтрока);
	Иначе
		Сумма = ТекСтрокаХранения.Сумма
	КонецЕсли;
	
	Возврат Сумма;	
КонецФункции

//
//
Процедура РассчитатьТекущуюСтроку(ТекСтрока) Экспорт
	
	СуммаХранения = ПолучитьХранение(ТекСтрока);
	
	Для А = 1 По 20 Цикл
		ЦенаБезНДС = ПолучитьЦенуБезНДС(А);
		
		Если ЦенаБезНДС > 0 Тогда
			ТекСтрока["Сумма"+СокрЛП(А)] = РассчитатьСумму(ТекСтрока.количество,ЦенаБезНДС,СуммаХранения);
		Иначе
			ТекСтрока["Сумма"+СокрЛП(А)] = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЦенуБезНДС(А) Экспорт
	ВозвЦена = 0;
	Для Каждого СтрокаТЧ из ФинансовыйРезультатСПродажами Цикл
		Если СтрокаТЧ.НомерСтроки = 2 Тогда
			ВозвЦена = СтрокаТЧ["Сумма"+СокрЛП(А)];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ВозвЦена;
КонецФункции

Процедура РассчитатьСуммыПоКолонке(НомерКолонки) Экспорт
	Для Каждого СтрокаТЧ из ФинансовыйРезультатСПродажами Цикл
		Если СтрокаТЧ.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаХранения = ПолучитьХранение(СтрокаТЧ);
		
		Если СтрокаТЧ.НомерСтроки > 2 Тогда
			СтрокаТЧ["Сумма"+СокрЛП(НомерКолонки)] = РассчитатьСумму(СтрокаТЧ.Количество,ПолучитьЦенуБезНДС(НомерКолонки),СуммаХранения);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция РассчитатьСумму(Объем,ЦенаРеал,СуммаХранения)
	Строка1		= ИсходныеДанные.Получить(0);
	Строка1.Показатель = ?(Строка1<>НЕОПРЕДЕЛЕНО,Объем,0);
	
	Строка2		= ИсходныеДанные.Получить(1);
	Строка2.Показатель = ?(Строка2<>НЕОПРЕДЕЛЕНО,ЦенаРеал,0);
	
	Строка3		= ИсходныеДанные.Получить(2);
	ЦенаУчетная = ?(Строка3<>НЕОПРЕДЕЛЕНО,Строка3.Показатель,0);
	
	ИтСумма = 0;
	 
	 Для каждого СтрокаТЧ ИЗ Расчет Цикл
		 Если СтрокаТЧ.НомерСтроки = 1 тогда
			 СтрокаТЧ.Показатель = Объем*ЦенаРеал/1000;
			 ИтСумма = ИтСумма + СтрокаТЧ.Показатель;
		 ИначеЕсли СтрокаТЧ.НомерСтроки = 2 тогда
			 СтрокаТЧ.Показатель = - ((Объем*ЦенаУчетная/1000)+СуммаХранения);
			 ИтСумма = ИтСумма + СтрокаТЧ.Показатель;
		 ИначеЕсли СтрокаТЧ.НомерСтроки = 3 тогда
			 СтрокаТЧ.Показатель = ИтСумма;
		 ИначеЕсли СтрокаТЧ.НомерСтроки = 4 тогда
			 ИтСумма = ИтСумма + СтрокаТЧ.Показатель;
		ИначеЕсли СтрокаТЧ.НомерСтроки = 5 Тогда
			 ИтСумма = ИтСумма + строкаТЧ.Показатель;
		ИначеЕсли СтрокаТЧ.НомерСтроки = 6 Тогда
			 ИтСумма = ИтСумма + строкаТЧ.Показатель;
		ИначеЕсли СтрокаТЧ.НомерСтроки = 7 Тогда
			 ИтСумма = ИтСумма + строкаТЧ.Показатель;
		ИначеЕсли СтрокаТЧ.НомерСтроки = 8 Тогда
			 строкаТЧ.Показатель = ИтСумма;
		ИначеЕсли СтрокаТЧ.НомерСтроки = 9 Тогда
			 ИтСумма = ИтСумма + строкаТЧ.Показатель;
		ИначеЕсли СтрокаТЧ.НомерСтроки = 10 Тогда
			 строкаТЧ.Показатель = ИтСумма;
		ИначеЕсли СтрокаТЧ.НомерСтроки = 11 Тогда
			Если Итсумма > 0 Тогда
				 строкаТЧ.Показатель = - Окр(итСумма*СтавкаКПН/100,0,1);
			 Иначе
				 строкаТЧ.Показатель = 0;
			КонецЕсли;
			
			ИтСумма = ИтСумма + строкаТЧ.Показатель;
		ИначеЕсли СтрокаТЧ.НомерСтроки = 12 Тогда
			 строкаТЧ.Показатель = ИтСумма;
		 Конецесли;
		 
	 КонецЦикла;
	 
	 возврат ИтСумма;
 КонецФункции

Процедура РассчитатьЦенуБезНДС(СуммаСНДС,НомерКолонки) Экспорт
	
	Для Каждого СтрокаТЧ из ФинансовыйРезультатСПродажами Цикл
		Если СтрокаТЧ.НомерСтроки = 2 Тогда
			СтрокаТЧ["Сумма"+НомерКолонки] = Окр(100 * СуммаСНДС / (100 + СтавкаНДС.Ставка),0,1);
			Прервать;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


процедура РассчитатьФинРезультат() Экспорт
	
	Для Каждого СтрокаТЧ ИЗ ФинансовыйРезультатСПродажами Цикл
		Если СтрокаТЧ.НомерСтроки > 2 Тогда
			Для А = 1 По 20 Цикл
				СтрокаТЧ["Сумма"+СокрЛП(А)] = 0;
			КонецЦикла;
			Если СтрокаТЧ.Количество > 0 тогда
				РассчитатьТекущуюСтроку(СтрокаТЧ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПолучитьПоказателиРасчета() Экспорт
	
	ПолучитьДоходыПоФинансированию();
	ПолучитьРасходыПоФинансированию();
	
КонецПроцедуры

Процедура ПолучитьДоходыПоФинансированию()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|    ДоходыПоФИнансированию.СтатьяБюджета
		|Поместить СписокДляОтбора
		|ИЗ
		|  РегистрСведений.б_ДоходыПоФИнансированиюДляАнализаЧуствительности КАК ДоходыПоФИнансированию
		|ГДЕ
		|    ДоходыПоФИнансированию.ИсточникФинансирования = &ИсточникФинансирования 
		|;
		|ВЫБРАТЬ
		|	б_БюджетОбороты.Бюджет,
		|	б_БюджетОбороты.СуммаОборот
		|ИЗ
		|	РегистрНакопления.б_Бюджет.Обороты(&началоПериода, 
		|										&КонецПериода,
		|										, СтатьяБюджета В ИЕРАРХИИ (ВЫБРАТЬ
		|																	 	СписокДляОтбора.СтатьяБюджета
		|																	ИЗ
		|																		СписокДляОтбора
		|																	)
		|										) КАК б_БюджетОбороты
		|
		|ИТОГИ Сумма(СуммаОборот) ПО Общие";

	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоМесяца(Дата)));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецГода(Дата)));
	Запрос.УстановитьПараметр("ИсточникФинансирования", ИсточникФинансирования);
	Запрос.УстановитьПараметр("Статус", Перечисления.СостоянияОбъектов.Утвержден);
	Результат = Запрос.Выполнить();

	ОбщиеИтоги = Результат.Выбрать();

	Если ОбщиеИтоги.Следующий() Тогда
		ДоходыПоФИнансированию = ОбщиеИтоги.СуммаОборот/1000;
	Иначе
		ДоходыПоФИнансированию = 0;
	КонецЕсли;

	ТекСтрока = Расчет.Получить(5);
	
	Если ТекСтрока <> НЕОПРЕДЕЛЕНО Тогда
		 ТекСтрока.Показатель = ДоходыПоФИнансированию;
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьРасходыПоФинансированию()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|    РасходыПоФИнансированию.СтатьяБюджета
		|Поместить СписокДляОтбора
		|ИЗ
		|  РегистрСведений.б_РасходыПоФИнансированиюДляАнализаЧуствительности КАК РасходыПоФИнансированию
		|ГДЕ
		|    РасходыПоФИнансированию.ИсточникФинансирования = &ИсточникФинансирования 
		|;
		|ВЫБРАТЬ
		|	б_БюджетОбороты.Бюджет,
		|	б_БюджетОбороты.СуммаОборот
		|ИЗ
		|	РегистрНакопления.б_Бюджет.Обороты(&началоПериода, 
		|										&КонецПериода,
		|										, СтатьяБюджета В ИЕРАРХИИ (ВЫБРАТЬ
		|																	 	СписокДляОтбора.СтатьяБюджета
		|																	ИЗ
		|																		СписокДляОтбора
		|																	)
		|										) КАК б_БюджетОбороты
		|
		|ИТОГИ Сумма(СуммаОборот) ПО Общие";

	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоМесяца(Дата)));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецГода(Дата)));
	Запрос.УстановитьПараметр("ИсточникФинансирования", ИсточникФинансирования);
	Запрос.УстановитьПараметр("Статус", Перечисления.СостоянияОбъектов.Утвержден);
	Результат = Запрос.Выполнить();

	ОбщиеИтоги = Результат.Выбрать();

	Если ОбщиеИтоги.Следующий() Тогда
		РасходыПоФИнансированию = - ОбщиеИтоги.СуммаОборот/1000;
	Иначе
		РасходыПоФИнансированию = 0;
	КонецЕсли;

	ТекСтрока = Расчет.Получить(8);
	
	Если ТекСтрока <> НЕОПРЕДЕЛЕНО Тогда
		 ТекСтрока.Показатель = РасходыПоФИнансированию;
	КонецЕсли;


КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
    // Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
		//ЗаполнитьПоДокументуОснования(Основание);
    КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	
КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();

