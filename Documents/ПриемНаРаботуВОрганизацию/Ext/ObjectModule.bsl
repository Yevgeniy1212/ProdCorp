Перем мДлинаСуток;
Перем СоответствиеВалютныеСпособыРасчета;

Перем мВалютаРегламентированногоУчета Экспорт;

// Механизм исправлений
Перем мВосстанавливатьДвижения;
Перем мСоответствиеДвижений;
Перем мИсправляемыйДокумент;

Перем мВидЗанятостиДокумента;

// Учет ОППВ
Перем мОрганизацияЯвляетсяВкладчикомОППВ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА   

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.КомандировкиОрганизаций
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПроведениеРасчетов.ЗаполнитьИсправлениеПоКадровомуДокументу(ЭтотОбъект, ИсходныйДокумент.Ссылка, Сотрудники);
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",  Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	 Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
    Запрос.УстановитьПараметр("ДатаДокумента",	 Дата);
    Запрос.УстановитьПараметр("РеглВалюта",	 	 мВалютаРегламентированногоУчета);
    Запрос.УстановитьПараметр("ПустаяВалюта",	 Справочники.Валюты.ПустаяСсылка());

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРуководителя,
		|	ПриемНаРаботуВОрганизацию.Номер КАК НомерДок,
		|	ПриемНаРаботуВОрганизацию.Дата КАК ДатаДок,
		|	ВЫРАЗИТЬ(ПриемНаРаботуВОрганизацию.Организация.НаименованиеПолное КАК СТРОКА(1000)) КАК НазваниеОрганизации,
		|	ВЫБОР 
		|		КОГДА (ФИОФизЛицСрезПоследних.ФизЛицо) ЕСТЬ NULL  
		|			ТОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование 
		|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР 
		|													КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """" 
		|														ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + ""."" 
		|													ИНАЧЕ """" 
		|												КОНЕЦ + 
		|												ВЫБОР 
		|													КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """" 
		|														ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + ""."" 
		|													ИНАЧЕ """" 
		|												КОНЕЦ 
		|	КОНЕЦ КАК ФИОРуководителя
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию КАК ПриемНаРаботуВОрганизацию
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|				ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО (ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = &Руководитель) 
		|			И ПриемНаРаботуВОрганизацию.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|
		|ГДЕ
		|	ПриемНаРаботуВОрганизацию.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда

	    Запрос.УстановитьПараметр("ОсновноеМестоРаботы", Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	    Запрос.УстановитьПараметр("ТипПоказателяТарифныйРазряд", Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТЧРаботникиОрганизации.ФизЛицо,
		|	ТЧРаботникиОрганизации.Должность,
		|	ТЧОсновныеНачисления.ТарифныйРазряд1 КАК ТарифныйРазряд,
		|	МАКСИМУМ(РазмерТарифныхСтавок.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_ПоследниеДатыТарифныхСтавок
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ТЧОсновныеНачисления
		|		ПО ТЧРаботникиОрганизации.ФизЛицо = ТЧОсновныеНачисления.ФизЛицо
		|			И (ТЧОсновныеНачисления.Ссылка = &ДокументСсылка)
		|			И ТЧРаботникиОрганизации.Сторно = ТЧОсновныеНачисления.Сторно
		|			И (ТЧОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок КАК РазмерТарифныхСтавок
		|		ПО ТЧРаботникиОрганизации.Должность = РазмерТарифныхСтавок.Должность
		|			И (ТЧОсновныеНачисления.ТарифныйРазряд1 = РазмерТарифныхСтавок.ТарифныйРазряд)
		|			И (РазмерТарифныхСтавок.Период <= ТЧРаботникиОрганизации.ДатаПриема)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели
		|		ПО (ТЧОсновныеНачисления.ВидРасчета = Показатели.Ссылка)
		|			И (Показатели.НомерСтроки = 1)
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|	И (НЕ ТЧРаботникиОрганизации.Сторно)
		|	И (ТЧОсновныеНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда
		|			ИЛИ Показатели.Показатель.ТипПоказателя = &ТипПоказателяТарифныйРазряд)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТЧРаботникиОрганизации.ФизЛицо,
		|	ТЧРаботникиОрганизации.Должность,
		|	ТЧОсновныеНачисления.ТарифныйРазряд1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ФизЛицо,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда
		|				ТОГДА РазмерТарифныхСтавок.Размер
		|			ИНАЧЕ ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель1
		|		КОНЕЦ) КАК ОкладТарифнаяСтавка,
		|	МАКСИМУМ(ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.СпособРасчета) КАК СпособРасчета,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда
		|				ТОГДА РазмерТарифныхСтавок.Валюта
		|			ИНАЧЕ ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта1
		|		КОНЕЦ) КАК ВалютаТарифнойСтавки
		|ПОМЕСТИТЬ ВТ_СведенияОбОсновномНачислении
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ПриемНаРаботуВОрганизациюОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследниеДатыТарифныхСтавок КАК ПоследниеДатыТарифныхСтавок
		|		ПО ПриемНаРаботуВОрганизациюОсновныеНачисления.ФизЛицо = ПоследниеДатыТарифныхСтавок.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок КАК РазмерТарифныхСтавок
		|		ПО (ПоследниеДатыТарифныхСтавок.Должность = РазмерТарифныхСтавок.Должность)
		|			И (ПоследниеДатыТарифныхСтавок.ТарифныйРазряд = РазмерТарифныхСтавок.ТарифныйРазряд)
		|			И (ПоследниеДатыТарифныхСтавок.Период = РазмерТарифныхСтавок.Период)
		|ГДЕ
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Ссылка = &ДокументСсылка
		|	И (НЕ ПриемНаРаботуВОрганизациюОсновныеНачисления.Сторно)
		|	И ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени
		|
		|СГРУППИРОВАТЬ ПО
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧРаботникиОрганизации.ФизЛицо,
		|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
		|	ТЧРаботникиОрганизации.Должность,
		|	ТЧРаботникиОрганизации.ТарифныйРазряд,
		|	МАКСИМУМ(НадбавкиПоШР.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_ПоследниеДатыНадбавокПоШР
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций КАК НадбавкиПоШР
		|		ПО ТЧРаботникиОрганизации.ПодразделениеОрганизации = НадбавкиПоШР.ПодразделениеОрганизации
		|			И ТЧРаботникиОрганизации.Должность = НадбавкиПоШР.Должность
		|			И ТЧРаботникиОрганизации.ТарифныйРазряд = НадбавкиПоШР.ТарифныйРазряд
		|			И (НадбавкиПоШР.Период <= ТЧРаботникиОрганизации.ДатаПриема)
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|	И (НЕ ТЧРаботникиОрганизации.Сторно)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТЧРаботникиОрганизации.ФизЛицо,
		|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
		|	ТЧРаботникиОрганизации.Должность,
		|	ТЧРаботникиОрганизации.ТарифныйРазряд
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧОсновныеНачисления.ФизЛицо,
		|	ТЧОсновныеНачисления.НомерСтроки,
		|	ТЧОсновныеНачисления.ВидРасчета КАК ВидНадбавки,
		|	ТЧОсновныеНачисления.Показатель1 КАК РазмерНадбавки,
		|	ТЧОсновныеНачисления.Валюта1 КАК ВалютаНадбавки,
		|	ТЧОсновныеНачисления.ТарифныйРазряд1 КАК ТарифныйРазрядНадбавки
		|ПОМЕСТИТЬ ВТ_Надбавки
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ТЧОсновныеНачисления
		|ГДЕ
		|	ТЧОсновныеНачисления.Ссылка = &ДокументСсылка
		|	И (НЕ ТЧОсновныеНачисления.Сторно)
		|	И (НЕ ТЧОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТЧДополнительныеНачисления.ФизЛицо,
		|	ТЧДополнительныеНачисления.НомерСтроки + 99999,
		|	ТЧДополнительныеНачисления.ВидРасчета,
		|	ТЧДополнительныеНачисления.Показатель1,
		|	ТЧДополнительныеНачисления.Валюта1,
		|	ТЧДополнительныеНачисления.ТарифныйРазряд1
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию.ДополнительныеНачисления КАК ТЧДополнительныеНачисления
		|ГДЕ
		|	ТЧДополнительныеНачисления.Ссылка = &ДокументСсылка
		|	И (НЕ ТЧДополнительныеНачисления.Сторно)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоследниеДатыНадбавокПоШР.ФизЛицо,
		|	9999999999,
		|	НадбавкиПоШР.ВидНадбавки,
		|	НадбавкиПоШР.Показатель1,
		|	НадбавкиПоШР.Валюта1,
		|	НадбавкиПоШР.ТарифныйРазряд
		|ИЗ
		|	ВТ_ПоследниеДатыНадбавокПоШР КАК ПоследниеДатыНадбавокПоШР
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций КАК НадбавкиПоШР
		|		ПО ПоследниеДатыНадбавокПоШР.ПодразделениеОрганизации = НадбавкиПоШР.ПодразделениеОрганизации
		|			И ПоследниеДатыНадбавокПоШР.Должность = НадбавкиПоШР.Должность
		|			И ПоследниеДатыНадбавокПоШР.ТарифныйРазряд = НадбавкиПоШР.ТарифныйРазряд
		|			И ПоследниеДатыНадбавокПоШР.Период = НадбавкиПоШР.Период
		|ГДЕ
		|	НадбавкиПоШР.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Надбавки.ФизЛицо,
		|	Надбавки.НомерСтроки,
		|	Надбавки.ВидНадбавки,
		|	ВЫБОР
		|		КОГДА Надбавки.ВидНадбавки.ТребуетВводаТарифногоРазряда
		|				ИЛИ Показатели.Показатель.ТипПоказателя = &ТипПоказателяТарифныйРазряд
		|			ТОГДА РазмерТарифныхСтавок.Размер
		|		ИНАЧЕ Надбавки.РазмерНадбавки
		|	КОНЕЦ КАК РазмерНадбавки,
		|	ВЫБОР
		|		КОГДА Надбавки.ВидНадбавки.ТребуетВводаТарифногоРазряда
		|				ИЛИ Показатели.Показатель.ТипПоказателя = &ТипПоказателяТарифныйРазряд
		|			ТОГДА РазмерТарифныхСтавок.Валюта
		|		ИНАЧЕ Надбавки.ВалютаНадбавки
		|	КОНЕЦ КАК ВалютаНадбавки
		|ПОМЕСТИТЬ ВТ_СведенияОНадбавках
		|ИЗ
		|	ВТ_Надбавки КАК Надбавки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели
		|		ПО Надбавки.ВидНадбавки = Показатели.Ссылка
		|			И (Показатели.НомерСтроки = 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследниеДатыТарифныхСтавок КАК ПоследниеДатыТарифныхСтавок
		|		ПО Надбавки.ФизЛицо = ПоследниеДатыТарифныхСтавок.ФизЛицо
		|			И Надбавки.ТарифныйРазрядНадбавки = ПоследниеДатыТарифныхСтавок.ТарифныйРазряд
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок КАК РазмерТарифныхСтавок
		|		ПО (ПоследниеДатыТарифныхСтавок.Должность = РазмерТарифныхСтавок.Должность)
		|			И (ПоследниеДатыТарифныхСтавок.ТарифныйРазряд = РазмерТарифныхСтавок.ТарифныйРазряд)
		|			И (ПоследниеДатыТарифныхСтавок.Период = РазмерТарифныхСтавок.Период)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриемНаРаботуВОрганизациюРаботники.НомерСтроки КАК НомерСтроки,
		|	ПриемНаРаботуВОрганизациюРаботники.ДатаПриема КАК ДатаПриема,
		|	ПриемНаРаботуВОрганизациюРаботники.ДатаУвольнения КАК ДатаУвольнения,
		|	ПриемНаРаботуВОрганизациюРаботники.Сотрудник.Код КАК ТабельныйНомер,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, ПриемНаРаботуВОрганизациюРаботники.ФизЛицо.Наименование) КАК Работник,
		|	ПриемНаРаботуВОрганизациюРаботники.ИспытательныйСрок КАК ИспытательныйСрок,
		|	ПриемНаРаботуВОрганизациюРаботники.Сотрудник.НомерДоговора КАК ТрудовойДоговорНомер,
		|	ПриемНаРаботуВОрганизациюРаботники.Сотрудник.ДатаНачала КАК ТрудовойДоговорДата,
		|	ПриемНаРаботуВОрганизациюРаботники.ПодразделениеОрганизации.Наименование КАК Подразделение,
		|	ПриемНаРаботуВОрганизациюРаботники.Должность.Наименование КАК Должность,
		|	ПриемНаРаботуВОрганизациюРаботники.ТарифныйРазряд.Наименование КАК ТарифныйРазрядРаботника,
		|	ЕСТЬNULL(СведенияОбОсновномНачислении.ОкладТарифнаяСтавка, 0) КАК ОкладТарифнаяСтавка,
		|	СведенияОбОсновномНачислении.СпособРасчета КАК СпособРасчетаОсновногоНачисления,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СведенияОбОсновномНачислении.ВалютаТарифнойСтавки, &РеглВалюта) В (&РеглВалюта, &ПустаяВалюта)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВалютаТарифнойСтавкиЯвляетсяВалютойРеглУчета,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СведенияОбОсновномНачислении.ВалютаТарифнойСтавки, &РеглВалюта) В (&РеглВалюта, &ПустаяВалюта)
		|			ТОГДА ВЫРАЗИТЬ(РегламентированнаяВалюта.ПараметрыПрописиНаРусском КАК СТРОКА(1000))
		|		ИНАЧЕ ВЫРАЗИТЬ(СведенияОбОсновномНачислении.ВалютаТарифнойСтавки.ПараметрыПрописиНаРусском КАК СТРОКА(1000))
		|	КОНЕЦ КАК ПараметрыПрописиВалютыТарифнойСтавки,
		|	ВЫБОР
		|		КОГДА ПриемНаРаботуВОрганизациюРаботники.Сотрудник.ВидЗанятости = &ОсновноеМестоРаботы
		|			ТОГДА """"
		|		ИНАЧЕ ""По совместительству ""
		|	КОНЕЦ + ПриемНаРаботуВОрганизациюРаботники.УсловияПриемаНаРаботу КАК УсловияПриемаНаРаботу,
		|	ЕСТЬNULL(СведенияОНадбавках.НомерСтроки, 0) КАК НомерСтрокиНадбавки,
		|	ЕСТЬNULL(СведенияОНадбавках.ВидНадбавки.Наименование, """") КАК ВидНадбавкиНаименование,
		|	СведенияОНадбавках.ВидНадбавки.СпособРасчета КАК СпособРасчета,
		|	СведенияОНадбавках.РазмерНадбавки,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СведенияОНадбавках.ВалютаНадбавки, &РеглВалюта) В (&РеглВалюта, &ПустаяВалюта)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВалютаНадбавкиЯвляетсяВалютойРеглУчета,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СведенияОНадбавках.ВалютаНадбавки, &РеглВалюта) В (&РеглВалюта, &ПустаяВалюта)
		|			ТОГДА ВЫРАЗИТЬ(РегламентированнаяВалюта.ПараметрыПрописиНаРусском КАК СТРОКА(1000))
		|		ИНАЧЕ ВЫРАЗИТЬ(СведенияОНадбавках.ВалютаНадбавки.ПараметрыПрописиНаРусском КАК СТРОКА(1000))
		|	КОНЕЦ КАК ПараметрыПрописиВалютыНадбавки
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&ДатаДокумента,
		|				ФизЛицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
		|					ИЗ
		|						Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
		|					ГДЕ
		|						ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = &ДокументСсылка
		|						И (НЕ ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сторно))) КАК ФИОФизЛицСрезПоследних
		|		ПО ПриемНаРаботуВОрганизациюРаботники.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОбОсновномНачислении КАК СведенияОбОсновномНачислении
		|		ПО ПриемНаРаботуВОрганизациюРаботники.ФизЛицо = СведенияОбОсновномНачислении.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОНадбавках КАК СведенияОНадбавках
		|		ПО ПриемНаРаботуВОрганизациюРаботники.ФизЛицо = СведенияОНадбавках.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК РегламентированнаяВалюта
		|		ПО (РегламентированнаяВалюта.Ссылка = &РеглВалюта)
		|ГДЕ
		|	ПриемНаРаботуВОрганизациюРаботники.Ссылка = &ДокументСсылка
		|	И (НЕ ПриемНаРаботуВОрганизациюРаботники.Сторно)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	НомерСтрокиНадбавки
		|ИТОГИ ПО
		|	НомерСтроки";

	Иначе
		Возврат Неопределено
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Функция формирует табличный документ с печатной формой "ПриказНаРаботников",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьПриказаНаРаботников(ИмяМакета)

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемНаРаботуВОрганизацию_ПриказНаРаботников";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;

	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = РаботникиОрганизации.Количество();

	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаРаботник"); // строка работника

	// массив с двумя строками - для разбиения на страницы
    ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	
    // выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации = СокрЛП(ВыборкаДляШапки.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		ОбластьМакетаШапка.Параметры.НомерДок = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	КонецЕсли;

	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.

	ВыведеноСтрок = 0;
	// выводим строки по работникам
	Пока ВыборкаРаботники.Следующий() Цикл

		ВложеннаяВыборка = ВыборкаРаботники.Выбрать(); 
		ВложеннаяВыборка.Следующий();
		
		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВложеннаяВыборка);
		// Уточним валюту тарифной ставки
		ОкладВПечатнойФорме = ВложеннаяВыборка.ОкладТарифнаяСтавка;
		Если ПроведениеРасчетов.ЭтоРасчетПоМинимальнойЗаработнойПлате(ВложеннаяВыборка.СпособРасчетаОсновногоНачисления) Тогда
			ОбластьМакета.Параметры.ОкладТарифнаяСтавка = "" +	ОкладВПечатнойФорме + " МЗП";	
		ИначеЕсли НЕ ВложеннаяВыборка.ВалютаТарифнойСтавкиЯвляетсяВалютойРеглУчета Тогда
			НазваниеВалютыЦелойЧасти = "";
			НазваниеВалютыДробнойЧасти = "";
			ОбщегоНазначения.ПолучитьНазваниеЦелойИДробнойЧастиВалюты(ВложеннаяВыборка.ПараметрыПрописиВалютыТарифнойСтавки, ОкладВПечатнойФорме, НазваниеВалютыЦелойЧасти, НазваниеВалютыДробнойЧасти);
			ОбластьМакета.Параметры.ОкладТарифнаяСтавка = "" + Формат(ОкладВПечатнойФорме,"ЧЦ=15; ЧДЦ=2") + Символы.ПС + "(" + НазваниеВалютыЦелойЧасти + ")";
		Иначе
			ОбластьМакета.Параметры.ОкладТарифнаяСтавка = ОкладВПечатнойФорме;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВложеннаяВыборка.ТарифныйРазрядРаботника) Тогда
			ОбластьМакета.Параметры.Должность = "" + ВложеннаяВыборка.Должность + ", " + ВложеннаяВыборка.ТарифныйРазрядРаботника;
		КонецЕсли;
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста И ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = ОбластьМакетаШапка.ВысотаТаблицы Тогда
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// выводим предварительно подготовленный Подвал документа.
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьПриказаНаРаботников()	

// Функция формирует табличный документ с печатной формой "ПриказНаРаботника",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьПриказаНаРаботника(ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемНаРаботуВОрганизацию_ПриказНаРаботника";
	
	// получаем данные для печати
	ВыборкаДляШапки  = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	// запоминаем области макета
 	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаРаботникНачало = Макет.ПолучитьОбласть("РаботникНачало"); // начало строки работника
	ОбластьМакетаНадбавка = Макет.ПолучитьОбласть("Надбавка"); // строка надбавки
	ОбластьМакетаРаботникКонец = Макет.ПолучитьОбласть("РаботникКонец"); // конец строки работника
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа

	// выводим данные о руководителях организации
    Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации = СокрЛП(ВыборкаДляШапки.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		НомерДокДляПечати	= ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
		ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати;
	КонецЕсли;

	// название для целой и дробной части валюты регл учета
	НазваниеЦелойЧастиВалютыРеглУчета = "";
	НазваниеДробнойЧастиВалютыРеглУчета = "";
	ОбщегоНазначения.ПолучитьНазваниеЦелойИДробнойЧастиВалюты(мВалютаРегламентированногоУчета, 0, НазваниеЦелойЧастиВалютыРеглУчета, НазваниеДробнойЧастиВалютыРеглУчета);	
	
	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		ВложеннаяВыборка = ВыборкаРаботники.Выбрать(); 
		НомерШага = 0;
		Пока ВложеннаяВыборка.Следующий() Цикл
		
		    НомерШага = НомерШага + 1;
		
		    Если НомерШага = 1 Тогда
				// Каждый приказ на отдельной странице.
				Если ТабДокумент.ВысотаТаблицы > 0 Тогда
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				// Шапка документа.
				Если РаботникиОрганизации.Количество() > 1 Тогда
					ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВложеннаяВыборка.НомерСтроки
				КонецЕсли; 
				ТабДокумент.Вывести(ОбластьМакетаШапка);

				// Данные по работнику.
				ОбластьМакетаРаботникНачало.Параметры.Заполнить(ВложеннаяВыборка);
				ОбластьМакетаРаботникКонец.Параметры.Заполнить(ВложеннаяВыборка);
				
				// Уточним валюту тарифной ставки
				ОкладВПечатнойФорме = ВложеннаяВыборка.ОкладТарифнаяСтавка;
				НазваниеВалютыЦелойЧасти = "";
				НазваниеВалютыДробнойЧасти = "";
				ОбщегоНазначения.ПолучитьНазваниеЦелойИДробнойЧастиВалюты(ВложеннаяВыборка.ПараметрыПрописиВалютыТарифнойСтавки, ОкладВПечатнойФорме, НазваниеВалютыЦелойЧасти, НазваниеВалютыДробнойЧасти);
				ОбластьМакетаРаботникНачало.Параметры.ВалютаЦелойЧасти = ?(ЗначениеЗаполнено(НазваниеВалютыЦелойЧасти), НазваниеВалютыЦелойЧасти, НазваниеЦелойЧастиВалютыРеглУчета);
				ОбластьМакетаРаботникНачало.Параметры.ВалютаДробнойЧасти = ?(ЗначениеЗаполнено(НазваниеВалютыДробнойЧасти), НазваниеВалютыДробнойЧасти, НазваниеДробнойЧастиВалютыРеглУчета);
				
				Если ПроведениеРасчетов.ЭтоРасчетПоМинимальнойЗаработнойПлате(ВложеннаяВыборка.СпособРасчетаОсновногоНачисления) Тогда
				    ОбластьМакетаРаботникНачало.Параметры.ОкладТарифнаяСтавкаЦелаяЧасть = "" + ОкладВПечатнойФорме + " МЗП";
				Иначе
					ОбластьМакетаРаботникНачало.Параметры.ОкладТарифнаяСтавкаЦелаяЧасть = Цел(ОкладВПечатнойФорме);
					ДробнаяЧасть = ОкладВПечатнойФорме - Цел(ОкладВПечатнойФорме);
					ОбластьМакетаРаботникНачало.Параметры.ОкладТарифнаяСтавкаДробнаяЧасть = ?(ДробнаяЧасть = 0, "00", ДробнаяЧасть*100); 
				КонецЕсли;
				
				Если ВложеннаяВыборка.ИспытательныйСрок = 0 тогда
					ОбластьМакетаРаботникКонец.Параметры.ИспытательныйСрок = "Без испытательного срока";
				Иначе  
					ОбластьМакетаРаботникКонец.Параметры.ИспытательныйСрок = ВложеннаяВыборка.ИспытательныйСрок;
				КонецЕсли;	

				Если ЗначениеЗаполнено(ВложеннаяВыборка.ТарифныйРазрядРаботника) Тогда
					ОбластьМакетаРаботникНачало.Параметры.Должность = "" + ВложеннаяВыборка.Должность + ", " + ВложеннаяВыборка.ТарифныйРазрядРаботника;
				КонецЕсли;
				
				ТабДокумент.Вывести(ОбластьМакетаРаботникНачало);
				
			КонецЕсли;
			
			// если есть надбавки, то выводим их
			Если ЗначениеЗаполнено(ВложеннаяВыборка.НомерСтрокиНадбавки) Тогда

				ОбластьМакетаНадбавка.Параметры.ВидНадбавкиНаименование = НРег(ВложеннаяВыборка.ВидНадбавкиНаименование);
				ОбластьМакетаНадбавка.Параметры.НадбавкаЦелаяЧасть   = "";
				ОбластьМакетаНадбавка.Параметры.НадбавкаДробнаяЧасть = "";
				ОбластьМакетаНадбавка.Параметры.ВалютаЦелойЧасти = НазваниеЦелойЧастиВалютыРеглУчета;
				ОбластьМакетаНадбавка.Параметры.ВалютаДробнойЧасти = НазваниеДробнойЧастиВалютыРеглУчета;
				
				Если ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом
						ИЛИ ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом 
						ИЛИ ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
					
					ОбластьМакетаНадбавка.Параметры.НадбавкаЦелаяЧасть = "" + ВложеннаяВыборка.РазмерНадбавки + "%";
					
				ИначеЕсли ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю
							ИЛИ ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам
							ИЛИ ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням Тогда
				
					ОбластьМакетаНадбавка.Параметры.НадбавкаЦелаяЧасть = "" + ВложеннаяВыборка.РазмерНадбавки + " МРП";

				ИначеЕсли ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате
							ИЛИ ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам
							ИЛИ ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням Тогда
				
					ОбластьМакетаНадбавка.Параметры.НадбавкаЦелаяЧасть = "" + ВложеннаяВыборка.РазмерНадбавки + " МЗП";
					
				Иначе
	
					НазваниеВалютыЦелойЧасти = "";
					НазваниеВалютыДробнойЧасти = "";
					ОбщегоНазначения.ПолучитьНазваниеЦелойИДробнойЧастиВалюты(ВложеннаяВыборка.ПараметрыПрописиВалютыНадбавки, ВложеннаяВыборка.РазмерНадбавки, НазваниеВалютыЦелойЧасти, НазваниеВалютыДробнойЧасти);
				
					ОбластьМакетаНадбавка.Параметры.НадбавкаЦелаяЧасть = "" + Цел(ВложеннаяВыборка.РазмерНадбавки);
					ОбластьМакетаНадбавка.Параметры.ВалютаЦелойЧасти   = НазваниеВалютыЦелойЧасти;
					
					ДробнаяЧасть = ВложеннаяВыборка.РазмерНадбавки - Цел(ВложеннаяВыборка.РазмерНадбавки);
					ОбластьМакетаНадбавка.Параметры.НадбавкаДробнаяЧасть = ?(ДробнаяЧасть = 0, "00", ДробнаяЧасть*100);
					ОбластьМакетаНадбавка.Параметры.ВалютаДробнойЧасти = НазваниеВалютыДробнойЧасти;	
					
				КонецЕсли;	
				
				ТабДокумент.Вывести(ОбластьМакетаНадбавка);
					
			КонецЕсли;
			
		КонецЦикла;

		ТабДокумент.Вывести(ОбластьМакетаРаботникКонец);

		// Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
        ТабДокумент.Вывести(ОбластьМакетаШапка);
        ОбластьМакетаРаботникНачало.Параметры.ВалютаЦелойЧасти = НазваниеЦелойЧастиВалютыРеглУчета;
        ОбластьМакетаРаботникНачало.Параметры.ВалютаДробнойЧасти = НазваниеДробнойЧастиВалютыРеглУчета;
        ТабДокумент.Вывести(ОбластьМакетаРаботникНачало);
		ОбластьМакетаНадбавка.Параметры.ВалютаЦелойЧасти = НазваниеЦелойЧастиВалютыРеглУчета;
		ОбластьМакетаНадбавка.Параметры.ВалютаДробнойЧасти = НазваниеДробнойЧастиВалютыРеглУчета;
		ТабДокумент.Вывести(ОбластьМакетаНадбавка);
		ОбластьМакетаРаботникКонец.Параметры.ТрудовойДоговорДата = '00010101';
		ТабДокумент.Вывести(ОбластьМакетаРаботникКонец);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьПриказаНаРаботника()	

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.ПриемНаРаботу") Тогда

		ПриемНаРаботуВОрганизациюПереопределяемый.ЗаполнитьПоОснованию(Основание, ЭтотОбъект);
		
	ИначеЕсли ТипОснования = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда	
		
		Если Основание.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда
			ИЛИ Основание.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский
			ИЛИ Основание.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Лицензионный Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",	Основание);
		
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВложенныйЗапрос.Организация КАК Организация,
			|	ВложенныйЗапрос.Сотрудник КАК Сотрудник,
			|	ВложенныйЗапрос.Физлицо КАК Физлицо,
			|	ВложенныйЗапрос.Должность,
			|	ВложенныйЗапрос.ПодразделениеОрганизации,
			|	ВложенныйЗапрос.ЗанимаемыхСтавок,
			|	ВложенныйЗапрос.ДатаПриема КАК ДатаПриема,
			|	ВложенныйЗапрос.ДатаУвольнения КАК ДатаУвольнения,
			|	ВложенныйЗапрос.ИспытательныйСрок,
			|	ВложенныйЗапрос.ГрафикРаботы,
			|	ВложенныйЗапрос.ИсчислятьОППВ,
			|	ВложенныйЗапрос.ВидРасчета КАК ВидРасчета,
			|	ВложенныйЗапрос.ТарифныйРазряд КАК ТарифныйРазряд, 
			|	ВложенныйЗапрос.Показатель1 КАК Показатель1,
			|	ВложенныйЗапрос.Показатель2 КАК Показатель2,
			|	ВложенныйЗапрос.Показатель3 КАК Показатель3,
			|	ВложенныйЗапрос.Показатель4 КАК Показатель4,
			|	ВложенныйЗапрос.Показатель5 КАК Показатель5,
			|	ВложенныйЗапрос.Показатель6 КАК Показатель6,
			|	ВложенныйЗапрос.Валюта1 КАК Валюта1,
			|	ВложенныйЗапрос.Валюта2 КАК Валюта2,
			|	ВложенныйЗапрос.Валюта3 КАК Валюта3,
			|	ВложенныйЗапрос.Валюта4 КАК Валюта4,
			|	ВложенныйЗапрос.Валюта5 КАК Валюта5,
			|	ВложенныйЗапрос.Валюта6 КАК Валюта6,
			|	ВложенныйЗапрос.ТарифныйРазряд1 КАК ТарифныйРазряд1,
			|	ВложенныйЗапрос.ТарифныйРазряд2 КАК ТарифныйРазряд2,
			|	ВложенныйЗапрос.ТарифныйРазряд3 КАК ТарифныйРазряд3,
			|	ВложенныйЗапрос.ТарифныйРазряд4 КАК ТарифныйРазряд4,
			|	ВложенныйЗапрос.ТарифныйРазряд5 КАК ТарифныйРазряд5,
			|	ВложенныйЗапрос.ТарифныйРазряд6 КАК ТарифныйРазряд6,
			|	ВложенныйЗапрос.Приоритет КАК Приоритет
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		0 КАК Приоритет,
			|		ВЫБОР
			|			КОГДА СотрудникиОрганизаций.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|				ТОГДА СотрудникиОрганизаций.Организация
			|			ИНАЧЕ СотрудникиОрганизаций.СтруктурнаяЕдиница
			|		КОНЕЦ КАК Организация,
			|		СотрудникиОрганизаций.Ссылка КАК Сотрудник,
			|		СотрудникиОрганизаций.Физлицо КАК Физлицо,
			|		СотрудникиОрганизаций.Должность КАК Должность,
			|		СотрудникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
			|		СотрудникиОрганизаций.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
			|		СотрудникиОрганизаций.ДатаНачала КАК ДатаПриема,
			|		СотрудникиОрганизаций.ДатаОкончания КАК ДатаУвольнения,
			|		СотрудникиОрганизаций.ИспытательныйСрок КАК ИспытательныйСрок,
			|		СотрудникиОрганизаций.ГрафикРаботы КАК ГрафикРаботы,
			|		СотрудникиОрганизаций.ИсчислятьОППВ КАК ИсчислятьОППВ,
			|		СотрудникиОрганизаций.ВидРасчета КАК ВидРасчета,
			|		СотрудникиОрганизаций.ТарифныйРазряд КАК ТарифныйРазряд,
			|		СотрудникиОрганизаций.ТарифнаяСтавка КАК Показатель1,
			|		NULL КАК Показатель2,
			|		NULL КАК Показатель3,
			|		NULL КАК Показатель4,
			|		NULL КАК Показатель5,
			|		NULL КАК Показатель6,
			|		СотрудникиОрганизаций.ВалютаТарифнойСтавки КАК Валюта1,
			|		NULL КАК Валюта2,
			|		NULL КАК Валюта3,
			|		NULL КАК Валюта4,
			|		NULL КАК Валюта5,
			|		NULL КАК Валюта6,
			|		СотрудникиОрганизаций.ТарифныйРазряд КАК ТарифныйРазряд1,
			|		NULL КАК ТарифныйРазряд2,
			|		NULL КАК ТарифныйРазряд3,
			|		NULL КАК ТарифныйРазряд4,
			|		NULL КАК ТарифныйРазряд5,
			|		NULL КАК ТарифныйРазряд6
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|	ГДЕ
			|		СотрудникиОрганизаций.Ссылка = &Ссылка
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		2,
			|		ВЫБОР
			|			КОГДА СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|				ТОГДА СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.Организация
			|			ИНАЧЕ СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.СтруктурнаяЕдиница
			|		КОНЕЦ,
			|		СотрудникиОрганизацийПерсональныеНадбавки.Ссылка,
			|		СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.Физлицо,
			|		СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.Должность,
			|		СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ПодразделениеОрганизации,
			|		СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ЗанимаемыхСтавок,
			|		СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ДатаНачала,
			|		СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ДатаОкончания,
			|		СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ИспытательныйСрок,
			|		СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ГрафикРаботы,
			|		СотрудникиОрганизацийПерсональныеНадбавки.Ссылка.ИсчислятьОППВ,
			|		СотрудникиОрганизацийПерсональныеНадбавки.Надбавка,
			|		NULL,
			|		СотрудникиОрганизацийПерсональныеНадбавки.Показатель1,
			|		СотрудникиОрганизацийПерсональныеНадбавки.Показатель2,
			|		СотрудникиОрганизацийПерсональныеНадбавки.Показатель3,
			|		СотрудникиОрганизацийПерсональныеНадбавки.Показатель4,
			|		СотрудникиОрганизацийПерсональныеНадбавки.Показатель5,
			|		СотрудникиОрганизацийПерсональныеНадбавки.Показатель6,
			|		СотрудникиОрганизацийПерсональныеНадбавки.Валюта1,
			|		СотрудникиОрганизацийПерсональныеНадбавки.Валюта2,
			|		СотрудникиОрганизацийПерсональныеНадбавки.Валюта3,
			|		СотрудникиОрганизацийПерсональныеНадбавки.Валюта4,
			|		СотрудникиОрганизацийПерсональныеНадбавки.Валюта5,
			|		СотрудникиОрганизацийПерсональныеНадбавки.Валюта6,
			|		СотрудникиОрганизацийПерсональныеНадбавки.ТарифныйРазряд1,
			|		СотрудникиОрганизацийПерсональныеНадбавки.ТарифныйРазряд2,
			|		СотрудникиОрганизацийПерсональныеНадбавки.ТарифныйРазряд3,
			|		СотрудникиОрганизацийПерсональныеНадбавки.ТарифныйРазряд4,
			|		СотрудникиОрганизацийПерсональныеНадбавки.ТарифныйРазряд5,
			|		СотрудникиОрганизацийПерсональныеНадбавки.ТарифныйРазряд6
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций.ПерсональныеНадбавки КАК СотрудникиОрганизацийПерсональныеНадбавки
			|	ГДЕ
			|		СотрудникиОрганизацийПерсональныеНадбавки.Ссылка = &Ссылка
			|		И СотрудникиОрганизацийПерсональныеНадбавки.Надбавка <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
			|	
			|) КАК ВложенныйЗапрос
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет,
			|	Сотрудник,
			|	ВидРасчета";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
				
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка, "Организация");
				ЗаполнитьЗначенияСвойств(ЭтотОбъект.РаботникиОрганизации.Добавить(), Выборка);
				Пока Выборка.СледующийПоЗначениюПоля("ВидРасчета") Цикл
					Если ЗначениеЗаполнено(Выборка.ВидРасчета) Тогда
						Отбор = Новый Структура;
						Отбор.Вставить("ВидРасчета", Выборка.ВидРасчета);
						Отбор.Вставить("Сотрудник", Выборка.Сотрудник);
						Если ЭтотОбъект.ОсновныеНачисления.НайтиСтроки(Отбор).Количество() = 0 Тогда
							ЗаполнитьЗначенияСвойств(ЭтотОбъект.ОсновныеНачисления.Добавить(), Выборка);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
	КонецЕсли;
	
	ДокументОснование = Основание;

КонецПроцедуры // ОбработкаЗаполненияУпр()

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
 	Если ИмяМакета = "ПриказНаРаботника" Тогда
 	    ТабДокумент = ПечатьПриказаНаРаботника(ИмяМакета);
 	ИначеЕсли ИмяМакета = "ПриказНаРаботников" Тогда
 	    ТабДокумент = ПечатьПриказаНаРаботников(ИмяМакета);
	Иначе
		ТабДокумент = ПриемНаРаботуВОрганизациюПереопределяемый.ПечатьДополнительныхФорм(ИмяМакета, ЭтотОбъект);
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,"Прием на работу в организацию "));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	СтруктураПечатныхФорм.Вставить("ПриказНаРаботников",	"Приказ на список сотрудников");
	СтруктураПечатныхФорм.Вставить("ПриказНаРаботника",		"Приказ на каждого сотрудника");
	
	ПриемНаРаботуВОрганизациюПереопределяемый.ДополнитьСтруктуруПечатныхФорм(СтруктураПечатныхФорм, ЭтотОбъект);
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверка на одинаковый вид занятости у сотрудников документа
//
Функция ПроверитьВидЗанятости()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник.ВидЗанятости КАК СотрудникВидЗанятости
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|ГДЕ
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник.ВидЗанятости");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	КоличествоРазличныхВЗ = Запрос.Выполнить().Выгрузить().Количество();
	
	Если КоличествоРазличныхВЗ > 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции // ПроверитьВидЗанятости()

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",    Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриемНаРаботуВОрганизацию.Дата,
	|	ПриемНаРаботуВОрганизацию.Организация,
	|	ВЫБОР 
	|		КОГДА ПриемНаРаботуВОрганизацию.Организация.ГоловнаяОрганизация = &ПустаяОрганизация 
	|			ТОГДА ПриемНаРаботуВОрганизацию.Организация 
	|		ИНАЧЕ ПриемНаРаботуВОрганизацию.Организация.ГоловнаяОрганизация 
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ПриемНаРаботуВОрганизацию.Ссылка
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию КАК ПриемНаРаботуВОрганизацию
	|
	|ГДЕ
	|	ПриемНаРаботуВОрганизацию.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;

	//Определим список организаций - структурных подразделений
	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
   	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
   	Запрос.УстановитьПараметр("Уволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
   	Запрос.УстановитьПараметр("ОсновноеМестоРаботы", Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	Запрос.УстановитьПараметр("ВидыТрудовыхДоговоров",	Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	
	ПроверкаШтатногоРасписания = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].ПроверкаШтатногоРасписания;
	
	Если ПроверкаШтатногоРасписания Тогда
		
		// определим самую раннюю дату перемещения, чтобы с нее начать расчет остатков штатных единиц
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	МИНИМУМ(ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема) КАК ДатаПриема
		               |ИЗ
		               |	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
		               |
		               |ГДЕ
		               |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = &ДокументСсылка И
		               |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема <> &ПустаяДата
					   |	И НЕ ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сторно";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаС = ?(НЕ ЗначениеЗаполнено(Выборка.ДатаПриема),Дата,Выборка.ДатаПриема)
		КонецЕсли;
		
	   	Запрос.УстановитьПараметр("ДатаНачала", ДатаС);
	   	Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);

	КонецЕсли;

	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвижений": 
	// 1. Выборка "ТЧРаботникиОрганизации": 
	//		Выбираются строки документа.  
	// 2. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки с одинаковым значением реквизита "Сотрудник"
    //
	// Вторая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	//		На каждую дату приема и увольнения ищем движения в регистре "РаботникиОрганизации" и "СостояниеРаботниковОрганизации"

	ТекстЗапроса = " ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧРаботникиОрганизации.Ссылка,
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.ДатаПриема,
	|	ТЧРаботникиОрганизации.ДатаУвольнения,
	|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
	|	ТЧРаботникиОрганизации.Должность,
	|	ТЧРаботникиОрганизации.ТарифныйРазряд,
	|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок,
	|	ТЧРаботникиОрганизации.ИспытательныйСрок,
	|	ТЧРаботникиОрганизации.ПроизошедшееСобытие КАК ПроизошедшееСобытие,
	|	ТЧРаботникиОрганизации.СпособРасчета,
	|	ТЧРаботникиОрганизации.ГрафикРаботы,
	|	ТЧРаботникиОрганизации.ИсчислятьОППВ,
	|	ТЧРаботникиОрганизации.Сторно
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|	И (НЕ ТЧРаботникиОрганизации.Сторно)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|///////////////////////////////////////////////////////////////////////
	|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""ДанныеДляДвижений"" КАК ВидСтрокиЗапроса,
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|	ТЧРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
	|	ТЧРаботникиОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	ТЧРаботникиОрганизации.ДатаПриема,
	|	ТЧРаботникиОрганизации.ДатаУвольнения,
	|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
	|	ТЧРаботникиОрганизации.Должность,
	|	ТЧРаботникиОрганизации.ТарифныйРазряд,
	|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок,
	|	ТЧРаботникиОрганизации.ИспытательныйСрок,
	|	ТЧРаботникиОрганизации.ПроизошедшееСобытие КАК ПроизошедшееСобытие,
	|	ТЧРаботникиОрганизации.СпособРасчета,
	|	ТЧРаботникиОрганизации.ГрафикРаботы,
	|	ТЧРаботникиОрганизации.ИсчислятьОППВ,
	|	ВЫБОР 
	|		КОГДА ТЧРаботникиОрганизации.ПодразделениеОрганизации.Владелец <> &Организация 
	|			ТОГДА ИСТИНА 
	|		ИНАЧЕ ЛОЖЬ 
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.Сотрудник.ВидДоговора В (&ВидыТрудовыхДоговоров)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НеВерныйДоговор,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаСотрудникРаботалВОрганизации,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер";
	
    Если ПроверкаШтатногоРасписания Тогда
		//  Дополнительно используем выборки: 
		//  СвободноСтавокНаДатуПриема
		//		Для каждой строки ТЧРаботникиОрганизации на дату ДатаПриема
		//		подсчитываем количество остающихся ставок (с учетом "предшествующих" данных текущего документа)
		//
		ТекстЗапроса = ТекстЗапроса + ",
	               |	СвободноСтавокНаДатуПриема.ОстатокСтавок КАК ОстатокСтавок";
	КонецЕсли;
			   
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			ВТДанныеДокумента КАК ТЧРаботникиОрганизации
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации2
	|				ПО (ТЧРаботникиОрганизации2.Ссылка = &ДокументСсылка) 
	|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник 
	|					И ТЧРаботникиОрганизации.НомерСтроки > ТЧРаботникиОрганизации2.НомерСтроки
	|					И НЕ ТЧРаботникиОрганизации2.Сторно
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ТЧРаботникиОрганизации.Сотрудник = РаботникиОрганизаций.Сотрудник
	|			И (РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
	|			И ТЧРаботникиОрганизации.Ссылка.Организация = РаботникиОрганизаций.Организация";

	
    Если ПроверкаШтатногоРасписания Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		    |	МаксимальныеПериодыШР.НомерСтроки КАК НомерСтроки,
		    |	ЕСТЬNULL(ШтатноеРасписание.КоличествоСтавок, 0) - ЕСТЬNULL(Вакансии.КоличествоСтавок, 0) - ЕСТЬNULL(РанееЗанятоСтавок.КоличествоСтавок, 0) КАК ОстатокСтавок
		    |ИЗ
		    |	(ВЫБРАТЬ
		    |		Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		    |		Работники.Должность КАК Должность,
		    |		Работники.ТарифныйРазряд КАК ТарифныйРазряд,
		    |		Работники.НомерСтроки КАК НомерСтроки,
		    |		МАКСИМУМ(ШтатноеРасписание.Период) КАК МаксПериод
		    |	ИЗ
		    |		ВТДанныеДокумента КАК Работники
		    |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		    |				ЕСТЬNULL(ШтатноеРасписание.Период, &ДатаНачала) КАК Период,
		    |				Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		    |				Работники.Должность КАК Должность,
		    |				Работники.ТарифныйРазряд КАК ТарифныйРазряд
		    |			ИЗ
		    |				ВТДанныеДокумента КАК Работники
		    |
		    |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписание
		    |					ПО Работники.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
		    |						И Работники.Должность = ШтатноеРасписание.Должность
		    |						И Работники.ТарифныйРазряд = ШтатноеРасписание.ТарифныйРазряд) КАК ШтатноеРасписание
		    |			ПО Работники.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
		    |				И Работники.Должность = ШтатноеРасписание.Должность
		    |				И Работники.ТарифныйРазряд = ШтатноеРасписание.ТарифныйРазряд
		    |				И Работники.ДатаПриема >= ШтатноеРасписание.Период
		    |	
		    |	СГРУППИРОВАТЬ ПО
		    |		Работники.ПодразделениеОрганизации,
		    |		Работники.НомерСтроки,
		    |		Работники.Должность,
		    |		Работники.ТарифныйРазряд) КАК МаксимальныеПериодыШР
		    |
		    |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписание
		    |		ПО МаксимальныеПериодыШР.МаксПериод = ШтатноеРасписание.Период
		    |			И МаксимальныеПериодыШР.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
		    |			И МаксимальныеПериодыШР.Должность = ШтатноеРасписание.Должность
		    |			И МаксимальныеПериодыШР.ТарифныйРазряд = ШтатноеРасписание.ТарифныйРазряд
		    |
		    |	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		    |			Работники.НомерСтроки КАК НомерСтроки,
		    |			Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		    |			Работники.Должность КАК Должность,
		    |			Работники.ТарифныйРазряд КАК ТарифныйРазряд,
		    |			СУММА(ВЫБОР
		    |					КОГДА Вакансии.ВидДвижения = &Приход
		    |						ТОГДА Вакансии.КоличествоСтавок
		    |					ИНАЧЕ -Вакансии.КоличествоСтавок
		    |				КОНЕЦ) КАК КоличествоСтавок
		    |		ИЗ
		    |			ВТДанныеДокумента КАК Работники
		    |
		    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗанятыеШтатныеЕдиницыОрганизаций КАК Вакансии
		    |				ПО Работники.ПодразделениеОрганизации = Вакансии.ПодразделениеОрганизации
		    |					И Работники.Должность = Вакансии.Должность
		    |					И Работники.ТарифныйРазряд = Вакансии.ТарифныйРазряд
		    |					И Работники.ДатаПриема >= Вакансии.Период
		    |					И (Вакансии.Регистратор <> &ДокументСсылка)
		    |		
		    |		СГРУППИРОВАТЬ ПО
		    |			Работники.ПодразделениеОрганизации,
		    |			Работники.Должность,
		    |			Работники.ТарифныйРазряд,
		    |			Работники.НомерСтроки) КАК Вакансии
		    |		ПО МаксимальныеПериодыШР.НомерСтроки = Вакансии.НомерСтроки
		    |
		    |	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		    |			СтрокиДокумента.НомерСтроки КАК НомерСтроки,
		    |			СУММА(ВЫБОР
		    |					КОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема <= СтрокиДокумента.ДатаПриема
		    |						ТОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ЗанимаемыхСтавок
		    |					ИНАЧЕ 0
		    |				КОНЕЦ - ВЫБОР
		    |					КОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаУвольнения < СтрокиДокумента.ДатаПриема
		    |							И ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаУвольнения <> &ПустаяДата
		    |							И ПриемНаРаботуВОрганизациюРаботникиОрганизации.ПроизошедшееСобытие
		    |						ТОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ЗанимаемыхСтавок
		    |					ИНАЧЕ 0
		    |				КОНЕЦ) КАК КоличествоСтавок
		    |		ИЗ
		    |			ВТДанныеДокумента КАК СтрокиДокумента
		    |
		    |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
		    |				ПО СтрокиДокумента.Ссылка = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка
		    |					И СтрокиДокумента.НомерСтроки <> ПриемНаРаботуВОрганизациюРаботникиОрганизации.НомерСтроки
		    |					И СтрокиДокумента.ПодразделениеОрганизации = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ПодразделениеОрганизации
		    |					И СтрокиДокумента.Должность = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Должность
		    |					И СтрокиДокумента.ТарифныйРазряд = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ТарифныйРазряд
			|					И СтрокиДокумента.Сторно = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сторно
		    |		
		    |		СГРУППИРОВАТЬ ПО
		    |			СтрокиДокумента.НомерСтроки) КАК РанееЗанятоСтавок
		    |		ПО МаксимальныеПериодыШР.НомерСтроки = РанееЗанятоСтавок.НомерСтроки
			|) КАК СвободноСтавокНаДатуПриема
			|		ПО ТЧРаботникиОрганизации.НомерСтроки = СвободноСтавокНаДатуПриема.НомерСтроки";
		КонецЕсли;
		             
		ТекстЗапроса = ТекстЗапроса + "
						|ИТОГИ ПО
						|	НомерСтроки,
						|	ВидСтрокиЗапроса";
	
	Запрос.Текст = ТекстЗапроса;            
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Формирует запрос по таблице "ОсновныеНачисления" документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНачисления(УчетнаяПолитикаПоПерсоналуОрганизации)

	Запрос = Новый Запрос;

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧОсновныеНачисления.ВидРасчета,
	|	МАКСИМУМ(Показатели.НомерСтроки) КАК КоличествоПоказателей,
	|	Показатели1.Показатель.Наименование КАК Показатель1Наименование,
	|	Показатели2.Показатель.Наименование КАК Показатель2Наименование,
	|	Показатели3.Показатель.Наименование КАК Показатель3Наименование,
	|	Показатели4.Показатель.Наименование КАК Показатель4Наименование,
	|	Показатели5.Показатель.Наименование КАК Показатель5Наименование,
	|	Показатели6.Показатель.Наименование КАК Показатель6Наименование,
	|	Показатели1.Показатель.ТипПоказателя КАК Показатель1ТипПоказателя,
	|	Показатели2.Показатель.ТипПоказателя КАК Показатель2ТипПоказателя,
	|	Показатели3.Показатель.ТипПоказателя КАК Показатель3ТипПоказателя,
	|	Показатели4.Показатель.ТипПоказателя КАК Показатель4ТипПоказателя,
	|	Показатели5.Показатель.ТипПоказателя КАК Показатель5ТипПоказателя,
	|	Показатели6.Показатель.ТипПоказателя КАК Показатель6ТипПоказателя,
	|	Показатели1.Показатель.ВозможностьИзменения КАК Показатель1ВозможностьИзменения,
	|	Показатели2.Показатель.ВозможностьИзменения КАК Показатель2ВозможностьИзменения,
	|	Показатели3.Показатель.ВозможностьИзменения КАК Показатель3ВозможностьИзменения,
	|	Показатели4.Показатель.ВозможностьИзменения КАК Показатель4ВозможностьИзменения,
	|	Показатели5.Показатель.ВозможностьИзменения КАК Показатель5ВозможностьИзменения,
	|	Показатели6.Показатель.ВозможностьИзменения КАК Показатель6ВозможностьИзменения,
	|	Показатели1.Показатель.Валюта КАК Показатель1Валюта,
	|	Показатели2.Показатель.Валюта КАК Показатель2Валюта,
	|	Показатели3.Показатель.Валюта КАК Показатель3Валюта,
	|	Показатели4.Показатель.Валюта КАК Показатель4Валюта,
	|	Показатели5.Показатель.Валюта КАК Показатель5Валюта,
	|	Показатели6.Показатель.Валюта КАК Показатель6Валюта,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели1.Показатель.Предопределенный КАК Показатель1Предопределенный,
	|	Показатели2.Показатель.Предопределенный КАК Показатель2Предопределенный,
	|	Показатели3.Показатель.Предопределенный КАК Показатель3Предопределенный,
	|	Показатели4.Показатель.Предопределенный КАК Показатель4Предопределенный,
	|	Показатели5.Показатель.Предопределенный КАК Показатель5Предопределенный,
	|	Показатели6.Показатель.Предопределенный КАК Показатель6Предопределенный
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ТЧОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели1
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели1.Ссылка
	|			И (Показатели1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели2
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели2.Ссылка
	|			И (Показатели2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели3
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели3.Ссылка
	|			И (Показатели3.НомерСтроки = 3)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели4
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели4.Ссылка
	|			И (Показатели4.НомерСтроки = 4)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели5
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели5.Ссылка
	|			И (Показатели5.НомерСтроки = 5)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели6
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели6.Ссылка
	|			И (Показатели6.НомерСтроки = 6)
	|ГДЕ
	|	ТЧОсновныеНачисления.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Показатели1.Показатель.Наименование,
	|	Показатели2.Показатель.Наименование,
	|	Показатели3.Показатель.Наименование,
	|	Показатели4.Показатель.Наименование,
	|	Показатели5.Показатель.Наименование,
	|	Показатели6.Показатель.Наименование,
	|	Показатели1.Показатель.ТипПоказателя,
	|	Показатели2.Показатель.ТипПоказателя,
	|	Показатели3.Показатель.ТипПоказателя,
	|	Показатели4.Показатель.ТипПоказателя,
	|	Показатели5.Показатель.ТипПоказателя,
	|	Показатели6.Показатель.ТипПоказателя,
	|	Показатели1.Показатель.ВозможностьИзменения,
	|	Показатели2.Показатель.ВозможностьИзменения,
	|	Показатели3.Показатель.ВозможностьИзменения,
	|	Показатели4.Показатель.ВозможностьИзменения,
	|	Показатели5.Показатель.ВозможностьИзменения,
	|	Показатели6.Показатель.ВозможностьИзменения,
	|	Показатели1.Показатель.Валюта,
	|	Показатели2.Показатель.Валюта,
	|	Показатели3.Показатель.Валюта,
	|	Показатели4.Показатель.Валюта,
	|	Показатели5.Показатель.Валюта,
	|	Показатели6.Показатель.Валюта,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели1.Показатель.Предопределенный,
	|	Показатели2.Показатель.Предопределенный,
	|	Показатели3.Показатель.Предопределенный,
	|	Показатели4.Показатель.Предопределенный,
	|	Показатели5.Показатель.Предопределенный,
	|	Показатели6.Показатель.Предопределенный,
	|	ТЧОсновныеНачисления.НомерСтроки,
	|	ТЧОсновныеНачисления.ВидРасчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧНачисления.Ссылка,
	|	ТЧНачисления.НомерСтроки,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.ФизЛицо,
	|	ТЧНачисления.ВидРасчета,
	|	ТЧНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ВЫБОР 
	|		КОГДА ТЧНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПроизвольнаяФормулаРасчета,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать) КАК Действие,
	|	ЕСТЬNULL(Показатели.КоличествоПоказателей, 0) КАК КоличествоПоказателей,
	|	ЕСТЬNULL(ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени, ЛОЖЬ) КАК ОсновноеНачисление,
	|	ЕСТЬNULL(ТЧНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда, ЛОЖЬ) КАК ТребуетВводаТарифногоРазряда,
	|	Показатели.Показатель1Наименование КАК Показатель1Наименование,
	|	Показатели.Показатель2Наименование КАК Показатель2Наименование,
	|	Показатели.Показатель3Наименование КАК Показатель3Наименование,
	|	Показатели.Показатель4Наименование КАК Показатель4Наименование,
	|	Показатели.Показатель5Наименование КАК Показатель5Наименование,
	|	Показатели.Показатель6Наименование КАК Показатель6Наименование,
	|	Показатели.Показатель1ВозможностьИзменения КАК Показатель1ВозможностьИзменения,
	|	Показатели.Показатель2ВозможностьИзменения КАК Показатель2ВозможностьИзменения,
	|	Показатели.Показатель3ВозможностьИзменения КАК Показатель3ВозможностьИзменения,
	|	Показатели.Показатель4ВозможностьИзменения КАК Показатель4ВозможностьИзменения,	
	|	Показатели.Показатель5ВозможностьИзменения КАК Показатель5ВозможностьИзменения,	
	|	Показатели.Показатель6ВозможностьИзменения КАК Показатель6ВозможностьИзменения,	
	|	Показатели.Показатель1ТипПоказателя КАК Показатель1ТипПоказателя,
	|	Показатели.Показатель2ТипПоказателя КАК Показатель2ТипПоказателя,
	|	Показатели.Показатель3ТипПоказателя КАК Показатель3ТипПоказателя,
	|	Показатели.Показатель4ТипПоказателя КАК Показатель4ТипПоказателя,
	|	Показатели.Показатель5ТипПоказателя КАК Показатель5ТипПоказателя,
	|	Показатели.Показатель6ТипПоказателя КАК Показатель6ТипПоказателя,
	|	Показатели.Показатель1ЗапрашиватьПриКадровыхПеремещениях КАК Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель2ЗапрашиватьПриКадровыхПеремещениях КАК Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель3ЗапрашиватьПриКадровыхПеремещениях КАК Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель4ЗапрашиватьПриКадровыхПеремещениях КАК Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель5ЗапрашиватьПриКадровыхПеремещениях КАК Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель6ЗапрашиватьПриКадровыхПеремещениях КАК Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель1Предопределенный КАК Показатель1Предопределенный,
	|	Показатели.Показатель2Предопределенный КАК Показатель2Предопределенный,
	|	Показатели.Показатель3Предопределенный КАК Показатель3Предопределенный,
	|	Показатели.Показатель4Предопределенный КАК Показатель4Предопределенный,
	|	Показатели.Показатель5Предопределенный КАК Показатель5Предопределенный,
	|	Показатели.Показатель6Предопределенный КАК Показатель6Предопределенный,
	|	ТЧНачисления.ТарифныйРазряд1,
	|	ТЧНачисления.ТарифныйРазряд2,
	|	ТЧНачисления.ТарифныйРазряд3,
	|	ТЧНачисления.ТарифныйРазряд4,
	|	ТЧНачисления.ТарифныйРазряд5,
	|	ТЧНачисления.ТарифныйРазряд6,
	|	ТЧНачисления.Показатель1,
	|	ТЧНачисления.Показатель2,
	|	ТЧНачисления.Показатель3,
	|	ТЧНачисления.Показатель4,
	|	ТЧНачисления.Показатель5,
	|	ТЧНачисления.Показатель6";
	Если НЕ УчетнаяПолитикаПоПерсоналуОрганизации.ИспользуютсяНачисленияВВалюте Тогда
		ТекстЗапроса = ТекстЗапроса + ",
	|	&ВалютаРегУчета КАК Валюта1,
	|	&ВалютаРегУчета КАК Валюта2,
	|	&ВалютаРегУчета КАК Валюта3,
	|	&ВалютаРегУчета КАК Валюта4,
	|	&ВалютаРегУчета КАК Валюта5,
	|	&ВалютаРегУчета КАК Валюта6";
	Иначе
		ТекстЗапроса = ТекстЗапроса + ",
	|	ТЧНачисления.Валюта1,
	|	ТЧНачисления.Валюта2,
	|	ТЧНачисления.Валюта3,
	|	ТЧНачисления.Валюта4,
	|	ТЧНачисления.Валюта5,
	|	ТЧНачисления.Валюта6" ;
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ",
	|	ТЧРаботникиОрганизации.ДатаПриема,
	|	ТЧРаботникиОрганизации.ДатаУвольнения,
	|	ТЧРаботникиОрганизации.ПроизошедшееСобытие,
	|	ДвойныеСтроки.КонфликтнаяСтрокаНомер КАК ДвойнаяСтрока";
    Если УчетнаяПолитикаПоПерсоналуОрганизации.ПроверкаШтатногоРасписания Тогда
	ТекстЗапроса = ТекстЗапроса + ",
	|	ВЫБОР 
	|		КОГДА ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени 
	|			ТОГДА ВЫБОР 
	|					КОГДА ТЧНачисления.ВидРасчета.СпособРасчета В (&МесячныеРасчеты) 
	|								И ШтатноеРасписаниеОрганизаций.ВидТарифнойСтавки = &МесячнаяСтавка 
	|						ТОГДА ВЫБОР 
	|								КОГДА ТЧНачисления.Показатель1 < ШтатноеРасписаниеОрганизаций.МинимальнаяТарифнаяСтавка 
	|										ИЛИ ТЧНачисления.Показатель1 > ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка 
	|									ТОГДА ЛОЖЬ 
	|								ИНАЧЕ ИСТИНА 
	|							  КОНЕЦ 
	|
	|					КОГДА ТЧНачисления.ВидРасчета.СпособРасчета = &ДневнойРасчет 
	|								И ШтатноеРасписаниеОрганизаций.ВидТарифнойСтавки = &ДневнаяСтавка 
	|						ТОГДА ВЫБОР 
	|								КОГДА ТЧНачисления.Показатель1 < ШтатноеРасписаниеОрганизаций.МинимальнаяТарифнаяСтавка 
	|										ИЛИ ТЧНачисления.Показатель1 > ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка 
	|									ТОГДА ЛОЖЬ 
	|								ИНАЧЕ ИСТИНА 
	|							  КОНЕЦ 
	|
	|					КОГДА ТЧНачисления.ВидРасчета.СпособРасчета В (&ЧасовыеРасчеты) 
	|								И ШтатноеРасписаниеОрганизаций.ВидТарифнойСтавки = &ЧасоваяСтавка 
	|						ТОГДА ВЫБОР 
	|								КОГДА ТЧНачисления.Показатель1 < ШтатноеРасписаниеОрганизаций.МинимальнаяТарифнаяСтавка 
	|										ИЛИ ТЧНачисления.Показатель1 > ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка 
	|									ТОГДА ЛОЖЬ 
	|								ИНАЧЕ ИСТИНА 
	|							  КОНЕЦ 
	|
	|					ИНАЧЕ ИСТИНА 
	|				  КОНЕЦ 
	|		ИНАЧЕ ИСТИНА 
	|	КОНЕЦ КАК РазмерСоответствуетШТР";
	КонецЕсли;
			   
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ТЧНачисления
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Показатели КАК Показатели
	|			ПО ТЧНачисления.НомерСтроки = Показатели.НомерСтроки
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧНачисления2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ТЧНачисления
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ТЧНачисления2
	|				ПО ТЧНачисления2.Ссылка = ТЧНачисления.Ссылка
	|					И ТЧНачисления.Сотрудник = ТЧНачисления2.Сотрудник
	|					И (ТЧНачисления.ВидРасчета = ТЧНачисления2.ВидРасчета
	|						ИЛИ ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|							И ТЧНачисления2.ВидРасчета.ЗачетОтработанногоВремени)
	|					И ТЧНачисления.НомерСтроки < ТЧНачисления2.НомерСтроки
	|					И ТЧНачисления.Сторно = ТЧНачисления2.Сторно
	|		ГДЕ
	|			ТЧНачисления.Ссылка = &ДокументСсылка
	|			 И НЕ ТЧНачисления.Сторно
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧНачисления.НомерСтроки) КАК ДвойныеСтроки
	|		ПО ТЧНачисления.НомерСтроки = ДвойныеСтроки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации";
    Если УчетнаяПолитикаПоПерсоналуОрганизации.ПроверкаШтатногоРасписания Тогда
	ТекстЗапроса = ТекстЗапроса + "
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ПриемНаРаботуВОрганизациюРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|				ПриемНаРаботуВОрганизациюРаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|				ПриемНаРаботуВОрганизациюРаботникиОрганизации.Должность КАК Должность,
	|				ПриемНаРаботуВОрганизациюРаботникиОрганизации.ТарифныйРазряд КАК ТарифныйРазряд,
	|				МАКСИМУМ(ШтатноеРасписаниеОрганизаций.Период) КАК Период
	|			ИЗ
	|				Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписаниеОрганизаций
	|					ПО ПриемНаРаботуВОрганизациюРаботникиОрганизации.ПодразделениеОрганизации = ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации 
	|						И ПриемНаРаботуВОрганизациюРаботникиОрганизации.Должность = ШтатноеРасписаниеОрганизаций.Должность 
	|						И ПриемНаРаботуВОрганизациюРаботникиОрганизации.ТарифныйРазряд = ШтатноеРасписаниеОрганизаций.ТарифныйРазряд 
	|						И ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема >= ШтатноеРасписаниеОрганизаций.Период
	|			
	|			ГДЕ
	|				ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = &ДокументСсылка
	|				И НЕ ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сторно
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПриемНаРаботуВОрганизациюРаботникиОрганизации.НомерСтроки,
	|				ПриемНаРаботуВОрганизациюРаботникиОрганизации.ПодразделениеОрганизации,
	|				ПриемНаРаботуВОрганизациюРаботникиОрганизации.Должность,
	|				ПриемНаРаботуВОрганизациюРаботникиОрганизации.ТарифныйРазряд) КАК ДатыШтатногоРасписания
	|			ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыШтатногоРасписания.НомерСтроки
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписаниеОрганизаций
	|			ПО ШтатноеРасписаниеОрганизаций.Период = ДатыШтатногоРасписания.Период 
	|				И ТЧРаботникиОрганизации.ПодразделениеОрганизации = ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации 
	|				И ТЧРаботникиОрганизации.Должность = ШтатноеРасписаниеОрганизаций.Должность 
	|				И ТЧРаботникиОрганизации.ТарифныйРазряд = ШтатноеРасписаниеОрганизаций.ТарифныйРазряд";
	КонецЕсли;
			   
	ТекстЗапроса = ТекстЗапроса + "
	|		ПО ТЧРаботникиОрганизации.Сотрудник = ТЧНачисления.Сотрудник 
	|			И ТЧРаботникиОрганизации.Ссылка = ТЧНачисления.Ссылка
	|			И ТЧРаботникиОрганизации.Сторно = ТЧНачисления.Сторно
	|
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументСсылка
	|	И НЕ ТЧНачисления.Сторно";
	
	Запрос.Текст = ТекстЗапроса;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ВалютаРегУчета", мВалютаРегламентированногоУчета);	

    Если УчетнаяПолитикаПоПерсоналуОрганизации.ПроверкаШтатногоРасписания Тогда
		
		МассивСпособов = Новый Массив;
		МассивСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
		МассивСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
		
		МассивСпособовЧасовых = Новый Массив;
		МассивСпособовЧасовых.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
		
		МассивДействий = Новый Массив;
		МассивДействий.Добавить(Перечисления.ВидыДействияСНачислением.Начать);
		МассивДействий.Добавить(Перечисления.ВидыДействияСНачислением.Изменить);
		
		Запрос.УстановитьПараметр("ИзменитьРасчеты", МассивДействий);
		Запрос.УстановитьПараметр("МесячнаяСтавка",  Перечисления.ВидыТарифныхСтавок.Месячная);
		Запрос.УстановитьПараметр("МесячныеРасчеты", МассивСпособов);
		Запрос.УстановитьПараметр("ДневнаяСтавка",   Перечисления.ВидыТарифныхСтавок.Дневная);
		Запрос.УстановитьПараметр("ДневнойРасчет", 	 Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
		Запрос.УстановитьПараметр("ЧасоваяСтавка", 	 Перечисления.ВидыТарифныхСтавок.Часовая);
		Запрос.УстановитьПараметр("ЧасовыеРасчеты",	 МассивСпособовЧасовых);
		
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

// Формирует запрос по таблице "ДополнительныеНачисления" документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоДопНачисления(ИспользуютсяНачисленияВВалюте)

	Запрос = Новый Запрос;

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТЧДоплнительныеНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧДоплнительныеНачисления.ВидРасчета,
	|	МАКСИМУМ(Показатели.НомерСтроки) КАК КоличествоПоказателей,
	|	Показатели1.Показатель.Наименование КАК Показатель1Наименование,
	|	Показатели2.Показатель.Наименование КАК Показатель2Наименование,
	|	Показатели3.Показатель.Наименование КАК Показатель3Наименование,
	|	Показатели4.Показатель.Наименование КАК Показатель4Наименование,
	|	Показатели5.Показатель.Наименование КАК Показатель5Наименование,
	|	Показатели6.Показатель.Наименование КАК Показатель6Наименование,
	|	Показатели1.Показатель.ТипПоказателя КАК Показатель1ТипПоказателя,
	|	Показатели2.Показатель.ТипПоказателя КАК Показатель2ТипПоказателя,
	|	Показатели3.Показатель.ТипПоказателя КАК Показатель3ТипПоказателя,
	|	Показатели4.Показатель.ТипПоказателя КАК Показатель4ТипПоказателя,
	|	Показатели5.Показатель.ТипПоказателя КАК Показатель5ТипПоказателя,
	|	Показатели6.Показатель.ТипПоказателя КАК Показатель6ТипПоказателя,
	|	Показатели1.Показатель.ВозможностьИзменения КАК Показатель1ВозможностьИзменения,
	|	Показатели2.Показатель.ВозможностьИзменения КАК Показатель2ВозможностьИзменения,
	|	Показатели3.Показатель.ВозможностьИзменения КАК Показатель3ВозможностьИзменения,
	|	Показатели4.Показатель.ВозможностьИзменения КАК Показатель4ВозможностьИзменения,
	|	Показатели5.Показатель.ВозможностьИзменения КАК Показатель5ВозможностьИзменения,
	|	Показатели6.Показатель.ВозможностьИзменения КАК Показатель6ВозможностьИзменения,
	|	Показатели1.Показатель.Валюта КАК Показатель1Валюта,
	|	Показатели2.Показатель.Валюта КАК Показатель2Валюта,
	|	Показатели3.Показатель.Валюта КАК Показатель3Валюта,
	|	Показатели4.Показатель.Валюта КАК Показатель4Валюта,
	|	Показатели5.Показатель.Валюта КАК Показатель5Валюта,
	|	Показатели6.Показатель.Валюта КАК Показатель6Валюта,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели1.Показатель.Предопределенный КАК Показатель1Предопределенный,
	|	Показатели2.Показатель.Предопределенный КАК Показатель2Предопределенный,
	|	Показатели3.Показатель.Предопределенный КАК Показатель3Предопределенный,
	|	Показатели4.Показатель.Предопределенный КАК Показатель4Предопределенный,
	|	Показатели5.Показатель.Предопределенный КАК Показатель5Предопределенный,
	|	Показатели6.Показатель.Предопределенный КАК Показатель6Предопределенный
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.ДополнительныеНачисления КАК ТЧДоплнительныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели
	|		ПО ТЧДоплнительныеНачисления.ВидРасчета = Показатели.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели1
	|		ПО ТЧДоплнительныеНачисления.ВидРасчета = Показатели1.Ссылка
	|			И (Показатели1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели2
	|		ПО ТЧДоплнительныеНачисления.ВидРасчета = Показатели2.Ссылка
	|			И (Показатели2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели3
	|		ПО ТЧДоплнительныеНачисления.ВидРасчета = Показатели3.Ссылка
	|			И (Показатели3.НомерСтроки = 3)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели4
	|		ПО ТЧДоплнительныеНачисления.ВидРасчета = Показатели4.Ссылка
	|			И (Показатели4.НомерСтроки = 4)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели5
	|		ПО ТЧДоплнительныеНачисления.ВидРасчета = Показатели5.Ссылка
	|			И (Показатели5.НомерСтроки = 5)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели6
	|		ПО ТЧДоплнительныеНачисления.ВидРасчета = Показатели6.Ссылка
	|			И (Показатели6.НомерСтроки = 6)
	|ГДЕ
	|	ТЧДоплнительныеНачисления.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Показатели1.Показатель.Наименование,
	|	Показатели2.Показатель.Наименование,
	|	Показатели3.Показатель.Наименование,
	|	Показатели4.Показатель.Наименование,
	|	Показатели5.Показатель.Наименование,
	|	Показатели6.Показатель.Наименование,
	|	Показатели1.Показатель.ТипПоказателя,
	|	Показатели2.Показатель.ТипПоказателя,
	|	Показатели3.Показатель.ТипПоказателя,
	|	Показатели4.Показатель.ТипПоказателя,
	|	Показатели5.Показатель.ТипПоказателя,
	|	Показатели6.Показатель.ТипПоказателя,
	|	Показатели1.Показатель.ВозможностьИзменения,
	|	Показатели2.Показатель.ВозможностьИзменения,
	|	Показатели3.Показатель.ВозможностьИзменения,
	|	Показатели4.Показатель.ВозможностьИзменения,
	|	Показатели5.Показатель.ВозможностьИзменения,
	|	Показатели6.Показатель.ВозможностьИзменения,
	|	Показатели1.Показатель.Валюта,
	|	Показатели2.Показатель.Валюта,
	|	Показатели3.Показатель.Валюта,
	|	Показатели4.Показатель.Валюта,
	|	Показатели5.Показатель.Валюта,
	|	Показатели6.Показатель.Валюта,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели1.Показатель.Предопределенный,
	|	Показатели2.Показатель.Предопределенный,
	|	Показатели3.Показатель.Предопределенный,
	|	Показатели4.Показатель.Предопределенный,
	|	Показатели5.Показатель.Предопределенный,
	|	Показатели6.Показатель.Предопределенный,
	|	ТЧДоплнительныеНачисления.НомерСтроки,
	|	ТЧДоплнительныеНачисления.ВидРасчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧНачисления.Ссылка,
	|	ТЧНачисления.НомерСтроки,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.ФизЛицо,
	|	ТЧНачисления.ВидРасчета,
	|	ВЫБОР 
	|		КОГДА ТЧНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПроизвольнаяФормулаРасчета,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать) КАК Действие,
	|	ЕСТЬNULL(Показатели.КоличествоПоказателей, 0) КАК КоличествоПоказателей,
	|	Показатели.Показатель1Наименование КАК Показатель1Наименование,
	|	Показатели.Показатель2Наименование КАК Показатель2Наименование,
	|	Показатели.Показатель3Наименование КАК Показатель3Наименование,
	|	Показатели.Показатель4Наименование КАК Показатель4Наименование,
	|	Показатели.Показатель5Наименование КАК Показатель5Наименование,
	|	Показатели.Показатель6Наименование КАК Показатель6Наименование,
	|	Показатели.Показатель1ТипПоказателя КАК Показатель1ТипПоказателя,
	|	Показатели.Показатель2ТипПоказателя КАК Показатель2ТипПоказателя,
	|	Показатели.Показатель3ТипПоказателя КАК Показатель3ТипПоказателя,
	|	Показатели.Показатель4ТипПоказателя КАК Показатель4ТипПоказателя,
	|	Показатели.Показатель5ТипПоказателя КАК Показатель5ТипПоказателя,
	|	Показатели.Показатель6ТипПоказателя КАК Показатель6ТипПоказателя,
	|	Показатели.Показатель1ВозможностьИзменения КАК Показатель1ВозможностьИзменения,
	|	Показатели.Показатель2ВозможностьИзменения КАК Показатель2ВозможностьИзменения,
	|	Показатели.Показатель3ВозможностьИзменения КАК Показатель3ВозможностьИзменения,
	|	Показатели.Показатель4ВозможностьИзменения КАК Показатель4ВозможностьИзменения,	
	|	Показатели.Показатель5ВозможностьИзменения КАК Показатель5ВозможностьИзменения,	
	|	Показатели.Показатель6ВозможностьИзменения КАК Показатель6ВозможностьИзменения,	
	|	Показатели.Показатель1ЗапрашиватьПриКадровыхПеремещениях КАК Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель2ЗапрашиватьПриКадровыхПеремещениях КАК Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель3ЗапрашиватьПриКадровыхПеремещениях КАК Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель4ЗапрашиватьПриКадровыхПеремещениях КАК Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель5ЗапрашиватьПриКадровыхПеремещениях КАК Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель6ЗапрашиватьПриКадровыхПеремещениях КАК Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель1Предопределенный КАК Показатель1Предопределенный,
	|	Показатели.Показатель2Предопределенный КАК Показатель2Предопределенный,
	|	Показатели.Показатель3Предопределенный КАК Показатель3Предопределенный,
	|	Показатели.Показатель4Предопределенный КАК Показатель4Предопределенный,
	|	Показатели.Показатель5Предопределенный КАК Показатель5Предопределенный,
	|	Показатели.Показатель6Предопределенный КАК Показатель6Предопределенный,
	|	ТЧНачисления.ТарифныйРазряд1,
	|	ТЧНачисления.ТарифныйРазряд2,
	|	ТЧНачисления.ТарифныйРазряд3,
	|	ТЧНачисления.ТарифныйРазряд4,
	|	ТЧНачисления.ТарифныйРазряд5,
	|	ТЧНачисления.ТарифныйРазряд6,
	|	ТЧНачисления.Показатель1,
	|	ТЧНачисления.Показатель2,
	|	ТЧНачисления.Показатель3,
	|	ТЧНачисления.Показатель4,
	|	ТЧНачисления.Показатель5,
	|	ТЧНачисления.Показатель6";
	Если НЕ ИспользуютсяНачисленияВВалюте Тогда
		ТекстЗапроса = ТекстЗапроса + ",
	|	&ВалютаРегУчета КАК Валюта1,
	|	&ВалютаРегУчета КАК Валюта2,
	|	&ВалютаРегУчета КАК Валюта3,
	|	&ВалютаРегУчета КАК Валюта4,
	|	&ВалютаРегУчета КАК Валюта5,
	|	&ВалютаРегУчета КАК Валюта6";
	Иначе
		ТекстЗапроса = ТекстЗапроса + ",
	|	ТЧНачисления.Валюта1,
	|	ТЧНачисления.Валюта2,
	|	ТЧНачисления.Валюта3,
	|	ТЧНачисления.Валюта4,
	|	ТЧНачисления.Валюта5,
	|	ТЧНачисления.Валюта6" ;
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ",
	|	ТЧРаботникиОрганизации.ДатаПриема,
	|	ТЧРаботникиОрганизации.ДатаУвольнения,
	|	ТЧРаботникиОрганизации.ПроизошедшееСобытие,
	|	ТЧНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ЕСТЬNULL(ТЧНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда, ЛОЖЬ) КАК ТребуетВводаТарифногоРазряда,
	|	ДвойныеСтроки.КонфликтнаяСтрокаНомер КАК ДвойнаяСтрока
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.ДополнительныеНачисления КАК ТЧНачисления
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Показатели КАК Показатели
	|		ПО ТЧНачисления.НомерСтроки = Показатели.НомерСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ПО ТЧРаботникиОрганизации.Сотрудник = ТЧНачисления.Сотрудник 
	|			И ТЧРаботникиОрганизации.Ссылка = ТЧНачисления.Ссылка
	|			И ТЧРаботникиОрганизации.Сторно = ТЧНачисления.Сторно
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧНачисления2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ПриемНаРаботуВОрганизацию.ДополнительныеНачисления КАК ТЧНачисления
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.ДополнительныеНачисления КАК ТЧНачисления2
	|				ПО ТЧНачисления2.Ссылка = ТЧНачисления.Ссылка
	|					И ТЧНачисления.Сотрудник = ТЧНачисления2.Сотрудник
	|					И ТЧНачисления.ВидРасчета = ТЧНачисления2.ВидРасчета
	|					И ТЧНачисления.НомерСтроки < ТЧНачисления2.НомерСтроки
	|					И ТЧНачисления.Сторно = ТЧНачисления2.Сторно
	|		ГДЕ
	|			ТЧНачисления.Ссылка = &ДокументСсылка
	|			И НЕ ТЧНачисления.Сторно
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧНачисления.НомерСтроки) КАК ДвойныеСтроки
	|		ПО ТЧНачисления.НомерСтроки = ДвойныеСтроки.НомерСтроки
	|
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументСсылка
	|	И НЕ ТЧНачисления.Сторно";
	
	Запрос.Текст = ТекстЗапроса;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ВалютаРегУчета", мВалютаРегламентированногоУчета);	

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

Функция СформироватьЗапросПоПрежнимМестам(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|	ТЧРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧРаботникиОрганизации.ДатаПриема КАК ДатаПриема,
	|	ТЧРаботникиОрганизации.Ссылка
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|	И (НЕ ТЧРаботникиОрганизации.Сторно)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	ДатаПриема,
	|	ВидЗанятости,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧРаботникиОрганизации.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТИспытуемыеСотрудники
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК ТЧРаботникиОрганизации
	|ГДЕ
	|	ТЧРаботникиОрганизации.Физлицо В
	|			(ВЫБРАТЬ
	|				Док.Физлицо
	|			ИЗ
	|				ВТДанныеДокумента КАК Док)
	|	И ТЧРаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеПоРаботникуДоНазначения.Сотрудник.Физлицо КАК Физлицо,
	|	ДанныеПоРаботникуДоНазначения.Регистратор КАК КонфликтныйДокумент,
	|	ДанныеПоРаботникуДоНазначения.Сотрудник.ВидЗанятости КАК ВидЗанятостиПоДругомуМестуРаботы,
	|	0 КАК НомерСтроки
	|ПОМЕСТИТЬ ВТДанныеПоРаботникуДоНазначения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Док.Физлицо КАК Физлицо,
	|		СостояниеВнутри.Сотрудник КАК Сотрудник,
	|		МАКСИМУМ(СостояниеВнутри.Период) КАК ДатаПоследнегоИзменения
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций КАК СостояниеВнутри
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК Док
	|			ПО СостояниеВнутри.Сотрудник.Физлицо = Док.Физлицо
	|				И СостояниеВнутри.Период <= Док.ДатаПриема
	|	ГДЕ
	|		СостояниеВнутри.Сотрудник В
	|				(ВЫБРАТЬ
	|					Спр.Ссылка
	|				ИЗ
	|					ВТИспытуемыеСотрудники КАК Спр)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Док.Физлицо,
	|		СостояниеВнутри.Сотрудник) КАК СписокДат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|		ПО СписокДат.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	|			И (ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|			И (ДанныеПоРаботникуДоНазначения.Период = СписокДат.ДатаПоследнегоИзменения)
	|ГДЕ
	|	ДанныеПоРаботникуДоНазначения.Регистратор ЕСТЬ НЕ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Физлицо,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ВидЗанятости,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.НомерСтроки
	|ИЗ
	|	ВТДанныеДокумента КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	ВидЗанятостиПоДругомуМестуРаботы,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.ВидЗанятости КАК ВидЗанятости,
	|	ВложенныйЗапрос.КонфликтныйДокумент КАК КонфликтныйДокумент,
	|	ВложенныйЗапрос.ВидЗанятостиПоДругомуМестуРаботы КАК ВидЗанятостиПоДругомуМестуРаботы
	|ИЗ
	|	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПоРаботникуДоНазначения КАК ВложенныйЗапрос
	|		ПО ТЧРаботникиОрганизации.Физлицо = ВложенныйЗапрос.Физлицо
	|			И ТЧРаботникиОрганизации.НомерСтроки <> ВложенныйЗапрос.НомерСтроки
	|			И ТЧРаботникиОрганизации.ВидЗанятости <> ВложенныйЗапрос.ВидЗанятостиПоДругомуМестуРаботы
	|ИТОГИ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоПрежнимМестам()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация, в которую принимается сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ПроверитьВидЗанятости() Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("В табличной части ""Сотрудники"" указаны сотрудники с различным видом занятости!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()
 
// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Сотрудники"": ";

	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвижений" Тогда

		// Сотрудник
		ЕстьСотрудник = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
		Если НЕ ЕстьСотрудник Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
		КонецЕсли;

		// Подразделение
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение, в которое принимается сотрудник!", Отказ, Заголовок);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "указано подразделение, принадлежащее другой организации!", Отказ, Заголовок);
		КонецЕсли;

		// Должность
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Должность) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана должность сотрудника!", Отказ, Заголовок);
		КонецЕсли;

		// ДатаПриема
		ЕстьДатаПриема = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаПриема);
		Если НЕ ЕстьДатаПриема Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата приема на работу!", Отказ, Заголовок);
		Иначе
			#Если Клиент Тогда
				Если ВыборкаПоСтрокамДокумента.ДатаПриема > РабочаяДата Тогда
					Сообщить(СтрокаНачалаСообщенияОбОшибке + "дата приема на работу превышает рабочую дату!", СтатусСообщения.Важное);
				КонецЕсли;
			#КонецЕсли
		КонецЕсли;

		// Количество ставок
		Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указано количество занимаемых сотрудником ставок!", Отказ, Заголовок);
		ИначеЕсли ЕстьДатаПриема И УчетнаяПолитикаПоПерсоналуОрганизации.ПроверкаШтатногоРасписания Тогда
            Если ВыборкаПоСтрокамДокумента.ОстатокСтавок < ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "в штатном расписании не предусмотрены ставки для приема сотрудника!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;

		// ГрафикРаботы
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан рабочий график!", Отказ, Заголовок);
		КонецЕсли;

		Если ЕстьСотрудник И ЕстьДатаПриема Тогда

			// ДатаУвольнения
			Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаУвольнения) И ВыборкаПоСтрокамДокумента.ДатаПриема > ВыборкаПоСтрокамДокумента.ДатаУвольнения Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата приема не может превышать дату окончания работы!", Отказ, Заголовок);
			КонецЕсли;
			
			// Сотрудник указан дважды
			Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
				СтрокаСообщениеОбОшибке = "сотрудник не может быть указан в документе дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			КонецЕсли;	
			
		КонецЕсли;	
		
		// Сотрудник раньше работал в организации
		Если ВыборкаПоСтрокамДокумента.ОшибкаСотрудникРаботалВОрганизации Тогда
			СтрокаСообщениеОбОшибке = "Сотрудник уже работал в " + ПроцедурыУправленияПерсоналом.ПреобразоватьСтрокуИнтерфейса("организации") + ", для повторного приема на работу необходимо создать нового сотрудника!"; 
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;
		
		// Организация сотрудника должна совпадать с организацией документа
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + ПроцедурыУправленияПерсоналом.ПреобразоватьСтрокуИнтерфейса("Указанный сотрудник оформлен в другую организацию!"), Отказ, Заголовок);
		КонецЕсли;
		
		// Принимаем только по трудовому договору
		Если ВыборкаПоСтрокамДокумента.НеВерныйДоговор Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "у сотрудника указан вид договора отличный от 'Трудового договора'!", Отказ, Заголовок);
			Возврат;
		КонецЕсли;

	КонецЕсли;	

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОсновныеНачисления" документа.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверкаШтатногоРасписания)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Основные начисления"": ";

	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;
		
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указано начисление!", Отказ, Заголовок);
	Иначе
		
		// Соответствие размера "основного" начисления штатному расписанию
		Если ПроверкаШтатногоРасписания И НЕ ВыборкаПоСтрокамДокумента.РазмерСоответствуетШТР И
			НЕ ВыборкаПоСтрокамДокумента.ТребуетВводаТарифногоРазряда Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "размер основного начисления не соответствует штатному расписанию!", Отказ, Заголовок);
		КонецЕсли;
		
		// Двойные строки
		Если ВыборкаПоСтрокамДокумента.ДвойнаяСтрока <> NULL Тогда
			Если ВыборкаПоСтрокамДокумента.ОсновноеНачисление Тогда
				СтрокаСообщениеОбОшибке = "работнику не может быть назначено основное начисление дважды (см. строку " + ВыборкаПоСтрокамДокумента.ДвойнаяСтрока + ")!"; 
			Иначе
				СтрокаСообщениеОбОшибке = "работнику не может быть назначено одно и тоже начисление дважды (см. строку " + ВыборкаПоСтрокамДокумента.ДвойнаяСтрока + ")!"; 
			КонецЕсли;
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;	

	КонецЕсли;
	
	ИспользуютсяНачисленияВВалюте = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].ИспользуютсяНачисленияВВалюте;
	ПроведениеРасчетов.ПроверкаПоказателейВПлановыхНачислениях(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, Истина, Отказ, Заголовок, ИспользуютсяНачисленияВВалюте, СоответствиеВалютныеСпособыРасчета);
		
	// проверка на существование работника в табличной части "РаботникиОрганизации"
	Если ВыборкаПоСтрокамДокумента.ДатаПриема = NULL Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "данный работник не введен в приказ - по нему не могут быть введены начисления!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ДополнительныеНачисления" документа.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиДопНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Дополнительные начисления"": ";

	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;
		
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указано начисление!", Отказ, Заголовок);
	Иначе

		// Двойные строки
		Если ВыборкаПоСтрокамДокумента.ДвойнаяСтрока <> NULL Тогда
			СтрокаСообщениеОбОшибке = "работнику не может быть назначено одно и тоже начисление дважды (см. строку " + ВыборкаПоСтрокамДокумента.ДвойнаяСтрока + ")!"; 
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;	

	КонецЕсли;
	
	ИспользуютсяНачисленияВВалюте = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].ИспользуютсяНачисленияВВалюте;
	ПроведениеРасчетов.ПроверкаПоказателейВПлановыхНачислениях(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, Истина, Отказ, Заголовок, ИспользуютсяНачисленияВВалюте, СоответствиеВалютныеСпособыРасчета);
	
	// проверка на существование работника в табличной части "РаботникиОрганизации"
	Если ВыборкаПоСтрокамДокумента.ДатаПриема = NULL Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "данный работник не введен в приказ - по нему не могут быть введены начисления!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиДопНачисления()		

Процедура ПроверитьВидыЗанятостиРаботникаВОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса, Отказ, Заголовок)
	
	// обходим строки запроса
	Пока ВыборкаСтрокЗапроса.Следующий() Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаСтрокЗапроса.НомерСтроки) +
		""" табл. части ""Сотрудники"": ";

		// Проверка сочетаний видов занятости работника в одной организации
		Если ВыборкаСтрокЗапроса.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы  Тогда

			// Для основного места работы недопустимо наличие внешнего совместительства
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы = Перечисления.ВидыЗанятостиВОрганизации.Совместительство  Тогда
				СтрокаСообщениеОбОшибке = "нельзя принять сотрудника на основное место работы до тех пор,
				|	пока он оформлен внешним совместителем!
				|	(См. приказ: " + ВыборкаСтрокЗапроса.КонфликтныйДокумент + ")"; 
				Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;

		ИначеЕсли ВыборкаСтрокЗапроса.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство  Тогда

			// Для внешнего совместительства недопустимо основное место работы
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы  Тогда
				СтрокаСообщениеОбОшибке = "нельзя оформить сотрудника на внешнее совместительство, 
				|	так как он уже оформлен в " + ПроцедурыУправленияПерсоналом.ПреобразоватьСтрокуИнтерфейса("организацию") + " по основному месту работы! 
				|	(См. приказ: " + ВыборкаСтрокЗапроса.КонфликтныйДокумент + ")"; 
				Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;

		ИначеЕсли ВыборкаСтрокЗапроса.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство  Тогда

			// При оформлении на внутреннее совместительство должно быть основное место работы или внешнее совместительство
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы <> Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы И ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы <> Перечисления.ВидыЗанятостиВОрганизации.Совместительство Тогда
				СтрокаСообщениеОбОшибке = "нельзя оформить сотрудника на внутреннее совместительство, 
				|	так как он не оформлен в " + ПроцедурыУправленияПерсоналом.ПреобразоватьСтрокуИнтерфейса("организацию") + " или по основному месту работы или по внешнему совместительству!"; 
				Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьВидыЗанятостиРаботникаВОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, УчетнаяПолитикаПоПерсоналуОрганизации)

	Если ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвижений" Тогда
		
		// Движения на дату приёма
		
		// Движения по регистру "РаботникиОрганизации"
		Движение = Движения.РаботникиОрганизаций.Добавить();
		// Свойства
		Движение.Период                     = ВыборкаПоРаботникиОрганизации.ДатаПриема;
		// Измерения
		Движение.Сотрудник                  = ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация   		    	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

		// Ресурсы
		Движение.ЗанимаемыхСтавок           = ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
		Движение.ПодразделениеОрганизации   = ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
		Движение.Должность   		    	= ВыборкаПоРаботникиОрганизации.Должность;
		Движение.ТарифныйРазряд		    	= ВыборкаПоРаботникиОрганизации.ТарифныйРазряд;
		Движение.ГрафикРаботы				= ВыборкаПоРаботникиОрганизации.ГрафикРаботы;
		
		Если мОрганизацияЯвляетсяВкладчикомОППВ Тогда
			Движение.ИсчислятьОППВ			= ВыборкаПоРаботникиОрганизации.ИсчислятьОППВ;
		КонецЕсли;
		
		// Реквизиты
		Движение.ПричинаИзмененияСостояния  = Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу;
		Движение.ОбособленноеПодразделение  = ВыборкаПоШапкеДокумента.Организация;
		
		Если ВыборкаПоРаботникиОрганизации.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы 
			ИЛИ ВыборкаПоРаботникиОрганизации.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство Тогда

			Движение = Движения.ПериодыРаботыРаботниковОрганизаций.Добавить();
			
			// Измерения
			Движение.Физлицо			= ВыборкаПоРаботникиОрганизации.Физлицо;
			Движение.Организация		= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ВидЗанятости		= ВыборкаПоРаботникиОрганизации.Сотрудник.ВидЗанятости;
			Движение.ДатаНачала			= ВыборкаПоРаботникиОрганизации.ДатаПриема;
			Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаУвольнения) И ВыборкаПоРаботникиОрганизации.ПроизошедшееСобытие Тогда
				Движение.ДатаОкончания	= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
			КонецЕсли;
			
		КонецЕсли;
		
		// Движения на дату увольнения
		Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаУвольнения) тогда
			
			Если ВыборкаПоРаботникиОрганизации.ПроизошедшееСобытие Тогда
				
				// Движения по регистру "РаботникиОрганизации"
				Движение = Движения.РаботникиОрганизаций.Добавить();
				// Свойства
				Движение.Период                     = ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
				// Измерения
				Движение.Сотрудник                  = ВыборкаПоРаботникиОрганизации.Сотрудник;
				Движение.Организация   		    	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				
				// Ресурсы
				Движение.ПодразделениеОрганизации   = ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
				Движение.Должность   				= ВыборкаПоРаботникиОрганизации.Должность;
				Движение.ТарифныйРазряд		    	= ВыборкаПоРаботникиОрганизации.ТарифныйРазряд;
				Движение.ГрафикРаботы   			= ВыборкаПоРаботникиОрганизации.ГрафикРаботы;
				
				// Эти поля не заполняются
				//Движение.ЗанимаемыхСтавок
				//Движение.ИсчислятьОППВ
				
				// Реквизиты
				Движение.ПричинаИзмененияСостояния  = Перечисления.ПричиныИзмененияСостояния.Увольнение;
				Движение.ОбособленноеПодразделение  = ВыборкаПоШапкеДокумента.Организация;

			Иначе
				
				// Движения по регистру "НамеченныеСобытияПоПерсоналуОрганизаций"
				Движение = Движения.НамеченныеСобытияПоПерсоналуОрганизаций.Добавить();
				// Свойства
				// Измерения
				Движение.Сотрудник                  = ВыборкаПоРаботникиОрганизации.Сотрудник;
				Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
				Движение.ДатаИзменения              = ВыборкаПоРаботникиОрганизации.ДатаУвольнения;
				Движение.ПланируемоеСобытие         = Перечисления.НамеченныеСобытияПоПерсоналуОрганизаций.Увольнение;
				
				// Ресурсы
				Движение.ЗанимаемыхСтавок           = 0;
				
			КонецЕсли; 	
		КонецЕсли; 
		
	КонецЕсли; 
	

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// Добавляет движения в регистр плановых начислений
//
Процедура ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса)
	
	Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
	
	// Свойства
	Движение.Период                     = ВыборкаСтрокЗапроса.ДатаПриема;
	
	// Измерения
	Движение.Сотрудник                  = ВыборкаСтрокЗапроса.Сотрудник;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	Если НЕ ВыборкаСтрокЗапроса.ОсновноеНачисление Тогда
		Движение.ВидРасчетаИзмерение        = ВыборкаСтрокЗапроса.ВидРасчета;
	КонецЕсли;

	// Ресурсы
	Движение.Действие	            = Перечисления.ВидыДействияСНачислением.Начать;
	Движение.ВидРасчета             = ВыборкаСтрокЗапроса.ВидРасчета;
	Движение.ТарифныйРазряд1		= ВыборкаСтрокЗапроса.ТарифныйРазряд1;
	Движение.ТарифныйРазряд2		= ВыборкаСтрокЗапроса.ТарифныйРазряд2;
	Движение.ТарифныйРазряд3		= ВыборкаСтрокЗапроса.ТарифныйРазряд3;
	Движение.ТарифныйРазряд4		= ВыборкаСтрокЗапроса.ТарифныйРазряд4;
	Движение.ТарифныйРазряд5		= ВыборкаСтрокЗапроса.ТарифныйРазряд5;
	Движение.ТарифныйРазряд6		= ВыборкаСтрокЗапроса.ТарифныйРазряд6;
	Движение.Показатель1			= ВыборкаСтрокЗапроса.Показатель1;
	Движение.Показатель2			= ВыборкаСтрокЗапроса.Показатель2;
	Движение.Показатель3			= ВыборкаСтрокЗапроса.Показатель3;
	Движение.Показатель4			= ВыборкаСтрокЗапроса.Показатель4;
	Движение.Показатель5			= ВыборкаСтрокЗапроса.Показатель5;
	Движение.Показатель6			= ВыборкаСтрокЗапроса.Показатель6;
	Движение.Валюта1				= ВыборкаСтрокЗапроса.Валюта1;
	Движение.Валюта2				= ВыборкаСтрокЗапроса.Валюта2;
	Движение.Валюта3				= ВыборкаСтрокЗапроса.Валюта3;
	Движение.Валюта4				= ВыборкаСтрокЗапроса.Валюта4;
	Движение.Валюта5				= ВыборкаСтрокЗапроса.Валюта5;
	Движение.Валюта6				= ВыборкаСтрокЗапроса.Валюта6;
	
	// Движения на дату увольнения
	Если ЗначениеЗаполнено(ВыборкаСтрокЗапроса.ДатаУвольнения) И ВыборкаСтрокЗапроса.ПроизошедшееСобытие Тогда
		// Ресурсы завершения
		Движение.ПериодЗавершения       = ВыборкаСтрокЗапроса.ДатаУвольнения;
		Движение.ДействиеЗавершения     = Перечисления.ВидыДействияСНачислением.Прекратить;
        Движение.ВидРасчетаЗавершения   = ВыборкаСтрокЗапроса.ВидРасчета;
	КонецЕсли;
			
КонецПроцедуры

Процедура ДобавитьСтрокуВДвиженияПоДопНачислениям(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса)
	
	Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
	
	// Свойства
	Движение.Период                     = ВыборкаСтрокЗапроса.ДатаПриема;
	
	// Измерения
	Движение.Сотрудник                  = ВыборкаСтрокЗапроса.Сотрудник;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.ВидРасчетаИзмерение        = ВыборкаСтрокЗапроса.ВидРасчета;

	// Ресурсы
	Движение.Действие	            = Перечисления.ВидыДействияСНачислением.Начать;
	Движение.ВидРасчета             = ВыборкаСтрокЗапроса.ВидРасчета;
	Движение.ТарифныйРазряд1		= ВыборкаСтрокЗапроса.ТарифныйРазряд1;
	Движение.ТарифныйРазряд2		= ВыборкаСтрокЗапроса.ТарифныйРазряд2;
	Движение.ТарифныйРазряд3		= ВыборкаСтрокЗапроса.ТарифныйРазряд3;
	Движение.ТарифныйРазряд4		= ВыборкаСтрокЗапроса.ТарифныйРазряд4;
	Движение.ТарифныйРазряд5		= ВыборкаСтрокЗапроса.ТарифныйРазряд5;
	Движение.ТарифныйРазряд6		= ВыборкаСтрокЗапроса.ТарифныйРазряд6;
	Движение.Показатель1			= ВыборкаСтрокЗапроса.Показатель1;
	Движение.Показатель2			= ВыборкаСтрокЗапроса.Показатель2;
	Движение.Показатель3			= ВыборкаСтрокЗапроса.Показатель3;
	Движение.Показатель4			= ВыборкаСтрокЗапроса.Показатель4;
	Движение.Показатель5			= ВыборкаСтрокЗапроса.Показатель5;
	Движение.Показатель6			= ВыборкаСтрокЗапроса.Показатель6;
	Движение.Валюта1				= ВыборкаСтрокЗапроса.Валюта1;
	Движение.Валюта2				= ВыборкаСтрокЗапроса.Валюта2;
	Движение.Валюта3				= ВыборкаСтрокЗапроса.Валюта3;
	Движение.Валюта4				= ВыборкаСтрокЗапроса.Валюта4;
	Движение.Валюта5				= ВыборкаСтрокЗапроса.Валюта5;
	Движение.Валюта6				= ВыборкаСтрокЗапроса.Валюта6;
	
	// Движения на дату увольнения
	Если ЗначениеЗаполнено(ВыборкаСтрокЗапроса.ДатаУвольнения) И ВыборкаСтрокЗапроса.ПроизошедшееСобытие Тогда
		// Ресурсы завершения
		Движение.ПериодЗавершения       = ВыборкаСтрокЗапроса.ДатаУвольнения;
		Движение.ДействиеЗавершения     = Перечисления.ВидыДействияСНачислением.Прекратить;
        Движение.ВидРасчетаЗавершения   = ВыборкаСтрокЗапроса.ВидРасчета;		
	КонецЕсли;

КонецПроцедуры

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)

	Если ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвижений" Тогда
		
		// Движения на дату приема
		
		// ЗанятыеШтатныеЕдиницыОрганизаций";
		Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
		
		// Свойства
		Движение.Период                 = ВыборкаПоРаботникиОрганизации.ДатаПриема;
		Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
		
		// Измерения
		Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
		Движение.Должность			    	= ВыборкаПоРаботникиОрганизации.Должность;
		Движение.ТарифныйРазряд		    	= ВыборкаПоРаботникиОрганизации.ТарифныйРазряд;
		
		// Ресурсы
		Движение.КоличествоСтавок           = ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок; 
		
		// Реквизиты
		Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник; 

		// Движения на дату увольнения
		Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаУвольнения) И ВыборкаПоРаботникиОрганизации.ПроизошедшееСобытие Тогда
			// ЗанятыеШтатныеЕдиницыОрганизаций";
			Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
			// Свойства
			Движение.Период                 = ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
			Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
			// Измерения
			Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
			Движение.Должность			    	= ВыборкаПоРаботникиОрганизации.Должность;
			Движение.ТарифныйРазряд		    	= ВыборкаПоРаботникиОрганизации.ТарифныйРазряд;
			// Ресурсы
			Движение.КоличествоСтавок           = ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок; 
			
			// Реквизиты
			Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник; 

		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ПриУстановкеНовогоНомера"
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)

	ОбщегоНазначения.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);

	// получить новый номер документа по совокупности кадровых документов
	ПроцедурыУправленияПерсоналом.ПриУстановкеНовогоНомераКадровогоДокумента(СтандартнаяОбработка, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, Номер, Префикс, Дата);

КонецПроцедуры // ПриУстановкеНовогоНомера()

Процедура ОбработкаПроведения(Отказ, Режим)

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);	

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	СоответствиеВалютныеСпособыРасчета = ПроведениеРасчетов.ПолучитьСоответствиеСпособовРасчетаТребующихВалюту();
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		мОрганизацияЯвляетсяВкладчикомОППВ = ПроцедурыНалоговогоУчета.ПолучитьПризнакВкладчикаПрофПенсионныхВзносов(ВыборкаПоШапкеДокумента.Организация, ВыборкаПоШапкеДокумента.Дата);

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// выполним выборку по табличной части документа
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента);

			// проверим виды занятости работника в организации
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоПрежнимМестам(ВыборкаПоШапкеДокумента).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
				ПроверитьВидыЗанятостиРаботникаВОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента.Выбрать(), Отказ, Заголовок);
			КонецЦикла;
			
			ВыборкаПоСтрокамДокумента = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			// обходим строки документа
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл 

				// выберем все виды строк запроса для текущей строки документа
				ВыборкаПоВидамСтрокЗапроса = ВыборкаПоСтрокамДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоВидамСтрокЗапроса.Следующий() Цикл 

					// Для каждого вида строки запроса свои проверки
					ВидСтрокиЗапроса = ВыборкаПоВидамСтрокЗапроса.ВидСтрокиЗапроса;
					ВыборкаСтрокЗапроса = ВыборкаПоВидамСтрокЗапроса.Выбрать();

					// обходим строки запроса, проверяем данные и формируем движения
					Пока ВыборкаСтрокЗапроса.Следующий() Цикл

						ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса , Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации);
						Если НЕ Отказ Тогда
							ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
							ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса, УчетнаяПолитикаПоПерсоналуОрганизации);
						КонецЕсли; 

					КонецЦикла;					

				КонецЦикла;
			КонецЦикла;
			
			// выполним выборку по табличной части основных начислений
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоНачисления(УчетнаяПолитикаПоПерсоналуОрганизации).Выбрать();

			// обходим строки документа
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации.ПроверкаШтатногоРасписания);
				Если НЕ Отказ Тогда
					ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
				КонецЕсли;
				
			КонецЦикла;
			
			// выполним выборку по табличной части дополнительных начислений
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоДопНачисления(УчетнаяПолитикаПоПерсоналуОрганизации.ИспользуютсяНачисленияВВалюте).Выбрать();

			// обходим строки документа
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
				ПроверитьЗаполнениеСтрокиДопНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					ДобавитьСтрокуВДвиженияПоДопНачислениям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;

	ПриемНаРаботуВОрганизациюПереопределяемый.ДобавитьДополнительныеДвижения(ЭтотОбъект, Отказ, Заголовок);

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	ЗаполнитьПоДокументуОснования(Основание)
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
	Движения.ПериодыРаботыРаботниковОрганизаций.РежимЗаписиРегистратора	= РежимЗаписи;
	
	// Механизм исправлений
	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПередЗаписью(Отказ, РежимЗаписи, РежимПроведения, ЭтотОбъект, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);

КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// проверим уникальность номера с точки зрения кадровой нумерации
	ПроцедурыУправленияПерсоналом.ПроверкаУникальностиНомераКадровогоДокумента(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, Номер, Дата, Ссылка);
	
	// Механизм исправлений
	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПриЗаписи(Отказ, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

мДлинаСуток = 86400;
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мВосстанавливатьДвижения = Ложь;
