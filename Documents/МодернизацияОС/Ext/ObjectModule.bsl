////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Строки, хранят реквизиты имеющие смысл только для бух. учета
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем мПрименятьПараметрыАмортизацииВТекМесяце Экспорт;

Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

Функция ПечатьА5()
	
	ТабДокумент 				   	= Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб		   	= Истина;
	ТабДокумент.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху		    = 0;
	ТабДокумент.ПолеСнизу 			= 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_МодернизацияОС_А5";
	
	//Запрос для реквизитов шапки
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст = 
	"ВЫБРАТЬ
	|	МодернизацияОС.Дата КАК ДатаДок,
	|	МодернизацияОС.Номер КАК НомерДок,
	|	МодернизацияОС.Организация КАК Организация,
	|   МодернизацияОС.СтруктурноеПодразделение
	|
	|ИЗ
	|	Документ.МодернизацияОС КАК МодернизацияОС
	|ГДЕ
	|	МодернизацияОС.Ссылка = &Ссылка";

	Док = ЗапросШапка.Выполнить().Выбрать();
	Док.Следующий();
	
	//Запрос для заполнения таблицы
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка"	   , ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Док.Организация);
	Запрос.УстановитьПараметр("Период"	   , Док.ДатаДок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПОДСТРОКА(МодернизацияОСОС.ОсновноеСредство.ЗаводскойНомер,1,250) КАК ЗаводскойНомер,
	|	МодернизацияОСОС.СтоимостьБУ - МодернизацияОСОС.АмортизацияБУ - МодернизацияОСОС.АмортизацияЗаМесяцБУ КАК БалансоваяСтоимость,
	|	МодернизацияОСОС.СуммаМодернизацииБУ КАК СуммаМодернизации,
	|	МодернизацияОСОС.СтоимостьБУ + МодернизацияОСОС.СуммаМодернизацииБУ КАК СтоимостьПослеМодернизации,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер,
	|	ВЫРАЗИТЬ(МодернизацияОСОС.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(250)) КАК НаименованиеОС,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ 
	|ИЗ
	|	Документ.МодернизацияОС.ОС КАК МодернизацияОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Период, Организация = &Организация) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО МодернизацияОСОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Период, Организация = &Организация) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|		ПО МодернизацияОСОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|ГДЕ
	|	МодернизацияОСОС.Ссылка = &Ссылка";
	
	Результат  = Запрос.Выполнить();
	ВыборкаОС  = Результат.Выбрать();
	ТаблицаМОЛ = Результат.Выгрузить();
	
	ТаблицаИнвентаризационнаяКомиссия = ИнвентаризационнаяКомиссия.Выгрузить();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Док.Организация, Док.СтруктурноеПодразделение);
	
	Макет = ПолучитьМакет("А5");
	
	// получим области макета
    Шапка 				= Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы 	= Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы 		= Макет.ПолучитьОбласть("СтрокаТаблицы");
	Комиссия 			= Макет.ПолучитьОбласть("СоставКомиссии");	
	ЗаголовокКомиссии	= Макет.ПолучитьОбласть("ЗаголовокКомиссии");	
	ОССдал 				= Макет.ПолучитьОбласть("ОССдал");	
	МОЛ 				= Макет.ПолучитьОбласть("МОЛ");	
	ПодписьГлБухгалтера = Макет.ПолучитьОбласть("ПодписьГлБухгалтера");	
	
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.ДатаДок);
	Руководители		  = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Док.ДатаДок);

	// заполняем и выводим шапку
	Шапка.Параметры.Заполнить(Док);
	Шапка.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Док.ДатаДок, "ru");
	Шапка.Параметры.НомерДок 				 = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	Шапка.Параметры.Должность 				 = Руководители.РуководительДолжность;
	Шапка.Параметры.РасшифровкаПодписи 		 = Руководители.Руководитель;
	
	Стр 				 = """_____"""+"________________________ 20_____года";
	Шапка.Параметры.Дата = ?(ЗначениеЗаполнено(Док.ДатаДок), Формат(Док.ДатаДок, "ДФ=""дд ММММ гггг 'года'"""), Стр);
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        "Члены комиссии:");
	
	ТабДокумент.Вывести(Шапка);
	
	// заполнение и вывод заголовка
	ЗаголовокТаблицы.Параметры.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	// табличная часть
	НомерПоПорядку = 0;
	Пока ВыборкаОС.Следующий() Цикл
		НомерПоПорядку = НомерПоПорядку + 1;
		
		Если Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СтрокаТаблицы) Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;	
		
		СтрокаТаблицы.Параметры.Заполнить(ВыборкаОС);  
		СтрокаТаблицы.Параметры.ЗаводскойНомер = СокрЛП(ВыборкаОС.ЗаводскойНомер);
		СтрокаТаблицы.Параметры.НаименованиеОС = СокрЛП(ВыборкаОС.НаименованиеОС);
		СтрокаТаблицы.Параметры.Номер 		   = НомерПоПорядку;
		
		ТабДокумент.Вывести(СтрокаТаблицы);
		
	КонецЦикла;	
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДокумент.Вывести(ЗаголовокКомиссии);

	
	// Выведем подпись председателя инвентаризационной комиссии
	ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	
	Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		
		ДанныеПредседателя = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, ПредседательКомиссии.ФизЛицо, Док.ДатаДок);
			
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		Комиссия.Параметры.Должность                = ДанныеПредседателя.Должность;
		Комиссия.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		
	Иначе
		
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		Комиссия.Параметры.Должность                = "";
		Комиссия.Параметры.РасшифровкаПодписи       = "";
		
	КонецЕсли;
	
	ТабДокумент.Вывести(Комиссия);
	
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();
	
	Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		Если НЕ Строка.Председатель Тогда
			СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Док.Организация, СписокЧленовКомиссии, Док.ДатаДок);
	
	// Сначала выведем членов комиссии из выборки
	Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, Комиссия) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
		                                               ЗаголовокРазделаКомиссии.ЧленыКомиссии,
													   "");
		Комиссия.Параметры.Должность          = ЧленКомиссии.Должность;
		Комиссия.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
		
		ТабДокумент.Вывести(Комиссия);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, Комиссия) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
			
			Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
			                                               ЗаголовокРазделаКомиссии.ЧленыКомиссии,
														   "");
			Комиссия.Параметры.Должность          = "";
			Комиссия.Параметры.РасшифровкаПодписи = "";
			
			ТабДокумент.Вывести(Комиссия);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
	
	КонецЕсли;

	
	ТабДокумент.Вывести(ОССдал);
	
	// выводим материально-ответственных лиц
	ТаблицаМОЛ.Свернуть("МОЛ");
	СписокМОЛ		  = ТаблицаМОЛ.ВыгрузитьКолонку("МОЛ");
	ДанныеМОЛ 		  = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Док.Организация, СписокМОЛ, Док.ДатаДок);
	ВыводитьЗаголовок = Истина;
	
	Для Каждого СтрокаМОЛ ИЗ ДанныеМОЛ Цикл
		МОЛ.Параметры.Принял	 = ?(ВыводитьЗаголовок, "Принял:", "");
		МОЛ.Параметры.МП 		 = ?(ВыводитьЗаголовок, "М.П.", "");
		МОЛ.Параметры.ДатаПринял = ?(ВыводитьЗаголовок, """_____""____________________20____года", "");
		ВыводитьЗаголовок		 = Ложь;
		
		Мол.Параметры.Должность			 = СтрокаМОЛ.Должность;
		МОЛ.Параметры.РасшифровкаПодписи = СтрокаМОЛ.Представление;
		
		ТабДокумент.Вывести(МОЛ);
	КонецЦикла;	
	
	ПодписьГлБухгалтера.Параметры.РасшифровкаПодписи = Руководители.ГлавныйБухгалтер;
	ТабДокумент.Вывести(ПодписьГлБухгалтера);
	
	Возврат ТабДокумент;
	
КонецФункции 		
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "А5" Тогда
		
		ТабДокумент = ПечатьА5();		
			
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("А5", "А-5 (Акт приемки-передачи отремонтированных активов)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета =  "СтоимостьМодернизацииБУ,
								|СчетУчетаОбъектаМодернизацииБУ,
								|ОС.СрокПолезногоИспользованияБУ,
								|ОС.ФактСрокИспользованияБУ,
								|ОС.ОстСрокИспользованияБУ,
								|ОС.ОбъемПродукцииРаботБУ,
								|ОС.ФактОбъемПродукцииРаботБУ,
								|ОС.ОстОбъемПродукцииРаботБУ,
								|ОС.СтоимостьБУ,
								|ОС.СуммаМодернизацииБУ,
								|ОС.АмортизацияБУ,
								|ОС.АмортизацияЗаМесяцБУ,
								|ОС.ОстСтоимостьБУ,
								|ОС.КоэффициентАмортизацииБУ,
								|ОС.КоэффициентУскоренияБУ";
    	

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

Процедура ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТЧ) Экспорт
	Если не СтрокаТЧ.СчетНУ.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	
	СтрокаТЧ.СчетНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУВнеоборотногоАктива(СтрокаТЧ.ОсновноеСредство,Организация,Дата);
	Если не СтрокаТЧ.СчетНУ.Пустая() Тогда
		Для Счетчик = 1 По СтрокаТЧ.СчетНУ.ВидыСубконто.Количество() Цикл
			// Проставим значения по умолчанию
			ТипВидСубконто = СтрокаТЧ.СчетНУ.ВидыСубконто[Счетчик-1].ВидСубконто.ТипЗначения;
			
			Если ТипВидСубконто.СодержитТип(Типзнч(СтрокаТЧ.ОсновноеСредство)) Тогда
				СтрокаТЧ["СубконтоНУ" + Счетчик] = СтрокаТЧ.ОсновноеСредство;
			КонецЕсли;	
			Если ТипВидСубконто.СодержитТип(Тип("ПеречислениеСсылка.ВидыДвиженияСтоимостиФА")) Тогда
				СтрокаТЧ["СубконтоНУ" + Счетчик] = Перечисления.ВидыДвиженияСтоимостиФА.УвеличениеСтоимостиЗаСчетРемонта;
			КонецЕсли;	
			Если ТипВидСубконто.СодержитТип(Тип("ПеречислениеСсылка.ВидыРемонтаВА")) Тогда
				СтрокаТЧ["СубконтоНУ" + Счетчик] = Перечисления.ВидыРемонтаВА.Капитальный;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры	

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА


// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация, ОбъектМодернизации, СчетУчетаОбъектаМодернизацииБУ";
	
	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда		
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ", ВидУчетаНУ";
	КонецЕсли;
	
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);
	
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Проверим на виды операций, которые не будут полностью отработаны в данном документе
	Если СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету
	или СтруктураШапкиДокумента.ВидСобытияОС  = Перечисления.ВидыСобытийОС.ВнутреннееПеремещение
	или СтруктураШапкиДокумента.ВидСобытияОС  = Перечисления.ВидыСобытийОС.Передача
	или СтруктураШапкиДокумента.ВидСобытияОС  = Перечисления.ВидыСобытийОС.Списание
	или СтруктураШапкиДокумента.ВидСобытияОС  = Перечисления.ВидыСобытийОС.ЧастичнаяЛиквидация
	тогда
		ОбщегоНазначения.ОшибкаПриПроведении("События с основными средствами с видом <"+строка(СтруктураШапкиДокумента.ВидСобытияОС)+">
		|не будут полноценно отражены данным документом (учетное состояние ОС не изменится)!",,Заголовок);
	КонецЕсли;


КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверка реквизитов в ТЧ по регл. учету
// 
Процедура ПроверкаРеквизитовТЧРегл(ТаблицаОС, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
	Если НЕ (ТаблицаОС.Итог("СуммаМодернизацииБУ") = СтруктураШапкиДокумента.СтоимостьМодернизацииБУ) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("По бухгалтерскому учету общая сумма модернизации, указанная в шапке документа, не соответствует в итоге суммам, отнесенным на основные средства!", Отказ, Заголовок);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		ДЛя каждого СтрОС из ТаблицаОС Цикл
			Если НЕ ЗначениеЗаполнено(СтрОС.СчетНУ) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении("Не указан счет налогового учета в строке № " + СтрОС.НомерСтроки + ", " + СтрОС.ОсновноеСредство.Наименование, Отказ, Заголовок);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры // ПроверкаРеквизитовТЧРегл()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(ТаблицаОС, СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт

	РеквизитыТабОС = "ОсновноеСредство,СуммаМодернизацииБУ"; //через запятую
	
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);
	
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
		Если НЕ СтрокаОС.ОтражалосьВБухгалтерскомУчете Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> код <" + СокрЛП(СтрокаОС.Код) + "> не отражалось в учете по указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если СтрокаОС.СнятоСУчета Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> код <" + СокрЛП(СтрокаОС.Код) + "> снято с учета в указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СчетУчетаБУ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> код <" + СокрЛП(СтрокаОС.Код) + "> не указан счет учета (БУ).",,, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
						
	КонецЦикла;
	
	// Логические проверки
	ПроверкаРеквизитовТЧРегл(ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок);

КонецПроцедуры // ПроверкаРеквизитов()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС, Отказ, Заголовок)

	ДатаДока       				= Дата;
	ТекОрганизация				= СтруктураШапкиДокумента.Организация;
	ТекСтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;

	ОперацииОС             = Движения.СобытияОСОрганизаций;
	ПараметрыАмортизацииОС = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
	ПроводкиБУ             = Движения.Типовой;
	ПроводкиНУ             = Движения.Налоговый;
	
	ТаблицаТекМестонахождение = Новый ТаблицаЗначений;
	ВедетсяАналитУчетОсПоПодразделениям = УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоПодразделениям(СтруктураШапкиДокумента.Дата);
	ВедетсяАналитУчетОсПоМОЛ = УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоМОЛ(СтруктураШапкиДокумента.Дата);
	
	Если ВедетсяАналитУчетОсПоМОЛ Или ВедетсяАналитУчетОсПоПодразделениям Тогда
		СписокОС = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство");
		ТаблицаТекМестонахождение = УправлениеВнеоборотнымиАктивами.ОпределитьТекущееМестонахождениеДляСпискаОС(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, СписокОС);
	КонецЕсли;

	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

		ТекОС = СтрокаТЧ.ОсновноеСредство;

		// Движения по регистру СобытияОСОрганизаций
		Движение = ОперацииОС.Добавить();
		Движение.Период           		  = ДатаДока;
		Движение.ОсновноеСредство 		  = ТекОС;
		Движение.Организация        	  = ТекОрганизация;
		Движение.СтруктурноеПодразделение = ТекСтруктурноеПодразделение;
		Движение.Событие          		  = СтруктураШапкиДокумента.СобытиеОС;
		Движение.НазваниеДокумента		  = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента   		  = СтруктураШапкиДокумента.Номер;
		Движение.СуммаЗатратБУ    		  = СтрокаТЧ.СуммаМодернизацииБУ;

		// Движения по регистру ПараметрыАмортизации
		Движение = ПараметрыАмортизацииОС.Добавить();
		Движение.Период                                      = ДатаДока;
		Движение.ОсновноеСредство                            = ТекОС;
		Движение.Организация                                 = ТекОрганизация;
		Движение.СтруктурноеПодразделение                    = ТекСтруктурноеПодразделение;
		Движение.СрокПолезногоИспользования                  = СтрокаТЧ.СрокПолезногоИспользованияБУ;
		Движение.СрокИспользованияДляВычисленияАмортизации   = СтрокаТЧ.СрокПолезногоИспользованияБУ - СтрокаТЧ.ФактСрокИспользованияБУ;
		Движение.СтоимостьДляВычисленияАмортизации           = СтрокаТЧ.СтоимостьБУ + СтрокаТЧ.СуммаМодернизацииБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ - СтрокаТЧ.ЛиквидационнаяСтоимостьБУ;
		Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаТЧ.ОбъемПродукцииРаботБУ - СтрокаТЧ.ФактОбъемПродукцииРаботБУ;
		Движение.КоэффициентАмортизации                      = СтрокаТЧ.КоэффициентАмортизацииБУ;
		Движение.КоэффициентУскорения                        = СтрокаТЧ.КоэффициентУскоренияБУ;
		Движение.ОбъемПродукцииРабот                         = СтрокаТЧ.ОбъемПродукцииРаботБУ;
       	Движение.ЛиквидационнаяСтоимость					 = СтрокаТЧ.ЛиквидационнаяСтоимостьБУ;
		
		// отнесение сумм модернизации на ОС Дт 2410 Кт 2933
		СуммаПроводки = СтрокаТЧ.СуммаМодернизацииБУ;
		
		Если НЕ (СуммаПроводки = 0) Тогда

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период       = ДатаДока;
			Проводка.Организация  = ТекОрганизация;
			Проводка.Содержание   = "Модернизация ОС";
			Проводка.СчетДт       = СтрокаТЧ.СчетУчетаБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
			УправлениеВнеоборотнымиАктивами.УстановитьАналитикуПоМестонахождениюОС(ВедетсяАналитУчетОсПоМОЛ, ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождение, Истина);
			
			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаОбъектаМодернизацииБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтруктураШапкиДокумента.ОбъектМодернизации);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Проводка.НомерЖурнала = "ОС";
			Проводка.Сумма        = СуммаПроводки;

		КонецЕсли;
        // Движения по налоговому учету
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			ВидУчетаВПроводку =  СтруктураШапкиДокумента.ВидУчетаНУ;
			
			ПроводкаНУ = ПроводкиНУ.Добавить();

			ПроводкаНУ.Период       = ДатаДока;
			ПроводкаНУ.Организация  = ТекОрганизация;
			ПроводкаНУ.Содержание   = "Модернизация ОС";
			ПроводкаНУ.СчетДт       = СтрокаТЧ.СчетНУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
										ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТЧ.СубконтоНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаТЧ.СубконтоНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаТЧ.СубконтоНУ3);
			ПроводкаНУ.ВидУчетаДт = ВидУчетаВПроводку;
			Если НЕ СтруктураШапкиДокумента.СчетУчетаОбъектаМодернизацииНУ.Пустая() Тогда
				ПроводкаНУ.СчетКт       = СтруктураШапкиДокумента.СчетУчетаОбъектаМодернизацииНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоОбъектаМодернизацииНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоОбъектаМодернизацииНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоОбъектаМодернизацииНУ3);				
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтруктураШапкиДокумента.ОбъектМодернизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
				ПроводкаНУ.ВидУчетаКт = ВидУчетаВПроводку;
			КонецЕсли;
			ПроводкаНУ.НомерЖурнала = "ОС";
			ПроводкаНУ.Сумма        = СуммаПроводки;
		КонецЕсли;	
	
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ,РежимПроведения)

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);

	мУчетнаяПолитикаПоНалоговомуУчету 		= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
	мУчетнаяПолитикаПоБухгалтерскомуУчету 	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Бух");
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	
	ВедениеУчетаВременныхРазницБалансовымМетодом 	= ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 	ВедениеУчетаВременныхРазницБалансовымМетодом);	
	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);

	// Выборка строк табличной части
	СписокОС =
	"ВЫБРАТЬ
	|	МодернизацияОСОС.ОсновноеСредство
	|ИЗ
	|	Документ.МодернизацияОС.ОС КАК МодернизацияОСОС
	|ГДЕ
	|	МодернизацияОСОС.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	Запрос.УстановитьПараметр("СнятоСУчета",   Перечисления.ВидыСостоянийОС.СнятоСУчета);
	СостоянияФА = Новый СписокЗначений();	
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);
	
	Запрос.УстановитьПараметр("СостоянияФА", 	СостоянияФА);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МодернизацияОСОС.НомерСтроки КАК НомерСтроки,
	|	МодернизацияОСОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МодернизацияОСОС.ОсновноеСредство.Код КАК Код,
	|	МодернизацияОСОС.СтоимостьБУ КАК СтоимостьБУ,
	|	МодернизацияОСОС.СуммаМодернизацииБУ,
	|	МодернизацияОСОС.АмортизацияБУ КАК АмортизацияБУ,
	|	МодернизацияОСОС.АмортизацияЗаМесяцБУ КАК АмортизацияЗаМесяцБУ,
	|	МодернизацияОСОС.СрокПолезногоИспользованияБУ,
	|	МодернизацияОСОС.ФактСрокИспользованияБУ,
	|	МодернизацияОСОС.ОбъемПродукцииРаботБУ,
	|	МодернизацияОСОС.ФактОбъемПродукцииРаботБУ,
	|	МодернизацияОСОС.КоэффициентАмортизацииБУ,
	|	МодернизацияОСОС.КоэффициентУскоренияБУ,
	|	МодернизацияОСОС.ЛиквидационнаяСтоимостьБУ КАК ЛиквидационнаяСтоимостьБУ,
	|	МодернизацияОСОС.СчетНУ,
	|	МодернизацияОСОС.СубконтоНУ1,
	|	МодернизацияОСОС.СубконтоНУ2,
	|	МодернизацияОСОС.СубконтоНУ3,
	|	СчетаУчетаОССрезПоследних.СчетУчетаБУ КАК СчетУчетаБУ,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтражалосьВБухгалтерскомУчете,
	|	ВЫБОР
	|		КОГДА ОбъектыНалоговогоУчетаФА.СостояниеФиксированногоАктива В (&СостоянияФА)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакФисированногоАктива,
	|	ВЫБОР
	|		КОГДА ОС_СнятыеСУчета.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СнятоСУчета
	|ИЗ
	|	Документ.МодернизацияОС.ОС КАК МодернизацияОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|		&ДатаДокумента,
	|		Организация = &Организация
	|		    И ОсновноеСредство В (" + СписокОС + ")) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО МодернизацияОСОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаОС.СрезПоследних(
	|		&ДатаДокумента,
	|		Организация = &Организация
	|		    И ОсновноеСредство В (" + СписокОС + ")) КАК СчетаУчетаОССрезПоследних
	|		ПО МодернизацияОСОС.ОсновноеСредство = СчетаУчетаОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	|		&ДатаДокумента,
	|		Организация = &Организация
	|		    И ФиксированныйАктив В (" + СписокОС + ")) КАК ОбъектыНалоговогоУчетаФА
	|		ПО МодернизацияОСОС.ОсновноеСредство = ОбъектыНалоговогоУчетаФА.ФиксированныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизацииСрезПоследних
	|		ГДЕ
	|			СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &ДатаДокумента
	|			И СостоянияОСОрганизацииСрезПоследних.Организация = &Организация
	|			И СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство В(" + СписокОС + ")
	|			И СостоянияОСОрганизацииСрезПоследних.Состояние = &СнятоСУчета) КАК ОС_СнятыеСУчета
	|		ПО МодернизацияОСОС.ОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство
	|ГДЕ
	|	МодернизацияОСОС.Ссылка = &Ссылка";
	
	ТаблицаПоОС = Запрос.Выполнить().Выгрузить();
	
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);
	
	ПроверкаРеквизитовТЧ(ТаблицаПоОС, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС, Отказ, Заголовок);
		Если Не Отказ Тогда			
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	мПрименятьПараметрыАмортизацииВТекМесяце = УправлениеВнеоборотнымиАктивами.ПолучитьПризнакПримененияПараметровАмортизацииВТекМесяце(Дата, Организация); 
	
	// проверим, установлен ли признак применения параметров амортизации в тек. месяце
	// и если установлен, то очищаем поля "АмортизацияЗаМесяц", "СписываемаяСуммаРезерваЗаМесяц"
	// 
	Если мПрименятьПараметрыАмортизацииВТекМесяце Тогда
		Для Каждого СтрокаТЧ Из ОС Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.АмортизацияЗаМесяцБУ) Тогда
				СтрокаТЧ.АмортизацияЗаМесяцБУ = 0;
			КонецЕсли;		
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();