////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем мДлинаСуток;
Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;

// Механизм исправлений
Перем мВосстанавливатьДвижения;
Перем мСоответствиеДвижений;
Перем мИсправляемыйДокумент;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА   

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.КомандировкиОрганизаций
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПроведениеРасчетов.ЗаполнитьИсправлениеПоКадровомуДокументу(ЭтотОбъект, ИсходныйДокумент.Ссылка, Сотрудники);
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Руководитель", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
    Запрос.УстановитьПараметр("ДатаДокумента", Дата);
    Запрос.УстановитьПараметр("Организация", Организация);

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРуководителя,
		|	УвольнениеИзОрганизаций.Номер КАК НомерДок,
		|	УвольнениеИзОрганизаций.Дата КАК ДатаДок,
		|	ВЫРАЗИТЬ(УвольнениеИзОрганизаций.Организация.НаименованиеПолное КАК СТРОКА(1000)) КАК НазваниеОрганизации,
		|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследних.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОРуководителя
		|ИЗ
		|	Документ.УвольнениеИзОрганизаций КАК УвольнениеИзОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО УвольнениеИзОрганизаций.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|
		|ГДЕ
		|	УвольнениеИзОрганизаций.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда

		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследних.Фамилия) ЕСТЬ NULL  ТОГДА УвольнениеИзОрганизацииРаботники.Физлицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество КОНЕЦ КАК Работник,
			|	ПриемНаРаботуОрганизацииРаботники.ТрудовойДоговорДата,
			|	ПриемНаРаботуОрганизацииРаботники.ТрудовойДоговорНомер,
			|	УвольнениеИзОрганизацииРаботники.НомерСтроки КАК НомерСтроки,
			|	УвольнениеИзОрганизацииРаботники.ДатаУвольнения,
			|	УвольнениеИзОрганизацииРаботники.СтатьяЗаконаОТрудеРК,
			|	ВЫРАЗИТЬ(УвольнениеИзОрганизацииРаботники.РеквизитыДокументаОснования КАК СТРОКА(1000)) КАК ОснованиеУвольнения,
			|	Работники.ПодразделениеОрганизации КАК Подразделение,
			|	Работники.Должность,
			|	Работники.ТарифныйРазряд,
			|	Работники.Сотрудник.Код КАК ТабельныйНомер,
			|	ТЧОтпуска.ВидТрудовогоОтпуска.Наименование КАК ВидОтпуска,
			|	ТЧОтпуска.РабочийГодС,
			|	ТЧОтпуска.РабочийГодПо,
			|	ТЧОтпуска.ДнейОтпуска КАК Продолжительность,
			|	КомпенсацияЗаНеиспользованныйОтпуск.ДнейОтпуска КАК ПродолжительностьВсего
			|ИЗ
			|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацииРаботники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ФизЛицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ 	УвольнениеИзОрганизацииРаботники.Физлицо ИЗ Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацииРаботники ГДЕ 	УвольнениеИзОрганизацииРаботники.Ссылка = &ДокументСсылка )) КАК ФИОФизЛицСрезПоследних
			|		ПО УвольнениеИзОрганизацииРаботники.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ПринРаботники.Сотрудник.ДатаДоговора КАК ТрудовойДоговорДата,
			|			ПринРаботники.Сотрудник.НомерДоговора КАК ТрудовойДоговорНомер,
			|			ПринРаботники.Сотрудник КАК Сотрудник
			|		ИЗ
			|			Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПринРаботники
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|					МАКСИМУМ(ПринРаботники.ДатаПриема) КАК ДатаПриема,
			|					УвРаботники.Сотрудник КАК Сотрудник
			|				ИЗ
			|					Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПринРаботники
			|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвРаботники
			|						ПО УвРаботники.Сотрудник = ПринРаботники.Сотрудник
			|						И УвРаботники.Сторно = ПринРаботники.Сторно
			|				
			|				ГДЕ
			|					ПринРаботники.Ссылка.Организация.ГоловнаяОрганизация = &ГоловнаяОрганизация
			|					И НЕ ПринРаботники.Сторно
			|				
			|				СГРУППИРОВАТЬ ПО
			|					УвРаботники.Сотрудник) КАК ПоследниеПриемы
			|				ПО ПоследниеПриемы.Сотрудник = ПринРаботники.Сотрудник И ПринРаботники.ДатаПриема = ПоследниеПриемы.ДатаПриема) КАК ПриемНаРаботуОрганизацииРаботники
			|		ПО ПриемНаРаботуОрганизацииРаботники.Сотрудник = УвольнениеИзОрганизацииРаботники.Сотрудник
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СписокДат.Сотрудник КАК Сотрудник,
			|			РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизации,
			|			РаботникиОрганизации.Должность.Наименование КАК Должность,
			|			РаботникиОрганизации.ТарифныйРазряд.Наименование КАК ТарифныйРазряд,
			|			РаботникиОрганизации.Сотрудник.Код КАК ТабельныйНомер
			|		ИЗ
			|			(ВЫБРАТЬ
			|				РаботникиВнутри.Сотрудник КАК Сотрудник,
			|				МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения
			|			ИЗ
			|				РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК Док
			|					ПО РаботникиВнутри.Сотрудник = Док.Сотрудник И (РаботникиВнутри.Организация = &ГоловнаяОрганизация) И РаботникиВнутри.Период <= Док.ДатаУвольнения
			|			
			|			ГДЕ
			|				Док.Ссылка = &ДокументСсылка
			|				И НЕ Док.Сторно
			|			
			|			СГРУППИРОВАТЬ ПО
			|				РаботникиВнутри.Сотрудник) КАК СписокДат
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|				ПО СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник И (РаботникиОрганизации.Организация = &ГоловнаяОрганизация) И СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период) КАК Работники
			|		ПО УвольнениеИзОрганизацииРаботники.Сотрудник = Работники.Сотрудник
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеИзОрганизаций.Отпуска КАК ТЧОтпуска
			|		ПО ТЧОтпуска.Ссылка = &ДокументСсылка
			|			И УвольнениеИзОрганизацииРаботники.Сотрудник = ТЧОтпуска.Сотрудник
			|			И УвольнениеИзОрганизацииРаботники.ДатаУвольнения = ТЧОтпуска.ДатаУвольнения
			|			И УвольнениеИзОрганизацииРаботники.Сторно = ТЧОтпуска.Сторно
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|							ТЧОтпуска.Сотрудник,
			|							ТЧОтпуска.ДатаУвольнения,
			|							СУММА(ТЧОтпуска.ДнейОтпуска) КАК ДнейОтпуска
			|						ИЗ 
			|                           Документ.УвольнениеИзОрганизаций.Отпуска КАК ТЧОтпуска
			|						ГДЕ
			|							ТЧОтпуска.Ссылка = &ДокументСсылка
			|							И НЕ ТЧОтпуска.Сторно
			|						СГРУППИРОВАТЬ ПО
			|							ТЧОтпуска.Сотрудник,
			|							ТЧОтпуска.ДатаУвольнения) КАК КомпенсацияЗаНеиспользованныйОтпуск
			|		ПО УвольнениеИзОрганизацииРаботники.Сотрудник = КомпенсацияЗаНеиспользованныйОтпуск.Сотрудник
			|			И УвольнениеИзОрганизацииРаботники.ДатаУвольнения = КомпенсацияЗаНеиспользованныйОтпуск.ДатаУвольнения
			|
			|ГДЕ
			|	УвольнениеИзОрганизацииРаботники.Ссылка = &ДокументСсылка
			|	И НЕ УвольнениеИзОрганизацииРаботники.Сторно
			|
			|УПОРЯДОЧИТЬ ПО
			|	УвольнениеИзОрганизацииРаботники.НомерСтроки,
			|	ТЧОтпуска.НомерСтроки
			|";
	Иначе
		Возврат Неопределено
	КонецЕсли;
                                
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Функция формирует табличный документ с печатной формой приказа списком,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
 Функция ПечатьПриказаСписком(ИмяМакета)

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УвольнениеИзОрганизации_ПриказСписком";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
    ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;

	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	// запоминаем области макета
 	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаРаботник"); // строка работника

	// массив с двумя строками - для разбиения на страницы
    ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	
    // выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации = СокрЛП(ВыборкаДляШапки.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки);// Для подвала.
		ОбластьМакетаШапка.Параметры.НомерДок = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	КонецЕсли;

	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.

	ВыведеноСтраниц = 0; ВыведеноСтрок = 0;
	// выводим строки по работникам
	Пока ВыборкаРаботники.Следующий() Цикл
		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		ОбластьМакета.Параметры.ОснованиеУвольнения = СокрЛП(ВыборкаРаботники.ОснованиеУвольнения);
		Если ЗначениеЗаполнено(ВыборкаРаботники.ТарифныйРазряд) Тогда
			ОбластьМакета.Параметры.Должность = "" + ВыборкаРаботники.Должность + ", " + ВыборкаРаботники.ТарифныйРазряд;
		КонецЕсли;
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = ОбластьМакетаШапка.ВысотаТаблицы Тогда
		СчПечати = 0;
		ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
		ОбластьМакета.Параметры.Работник = " " + Символы.ПС + " ";
		Пока УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти) Цикл
			СчПечати = СчПечати + 1;
			Если СчПечати > 15 Тогда 
				Прервать;
			КонецЕсли;			
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
	КонецЕсли;
	
	// выводим предварительно подготовленный Подвал документа.
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьПриказаСписком()	

// Функция формирует табличный документ с печатной формой приказа по одному сотруднику,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьПриказа(ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УвольнениеИзОрганизации_Приказ";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	// получаем данные для печати
	ВыборкаДляШапки   = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();

	// запоминаем области макета
 	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаШапкаКомпенсации = Макет.ПолучитьОбласть("ШапкаКомпенсации");// Шапка таблицы компенсации
	ОбластьМакетаОтпуск = Макет.ПолучитьОбласть("Отпуск"); // строка отпуска
	ОбластьМакетаПодвалКомпенсации = Макет.ПолучитьОбласть("ПодвалКомпенсации"); // подвал таблицы компенсации
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Работник"); // строка работника

	// выводим данные о руководителях организации
    Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации = СокрЛП(ВыборкаДляШапки.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		НомерДокДляПечати	= ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
		ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати;
	КонецЕсли;
	
	// Начинаем формировать выходной документ
	ЕстьДанные = ВыборкаРаботники.Следующий();
	Пока ЕстьДанные Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Шапка документа.
		Если РаботникиОрганизации.Количество() > 1 Тогда
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВыборкаРаботники.НомерСтроки
		КонецЕсли; 
		ОбластьМакетаШапка.Параметры.ТрудовойДоговорНомер = ВыборкаРаботники.ТрудовойДоговорНомер;
		ОбластьМакетаШапка.Параметры.ТрудовойДоговорДата = ВыборкаРаботники.ТрудовойДоговорДата;
		ТабДокумент.Вывести(ОбластьМакетаШапка);

		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		ОбластьМакета.Параметры.ОснованиеУвольнения = СокрЛП(ВыборкаРаботники.ОснованиеУвольнения);
		Если ЗначениеЗаполнено(ВыборкаРаботники.ТарифныйРазряд) Тогда
			ОбластьМакета.Параметры.Должность = "" + ВыборкаРаботники.Должность + ", " + ВыборкаРаботники.ТарифныйРазряд;
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ВыводитьКомпенсацию = ВыборкаРаботники.ВидОтпуска <> NULL;
		
		Если ВыводитьКомпенсацию Тогда
			ТабДокумент.Вывести(ОбластьМакетаШапкаКомпенсации);
			ОбластьМакетаПодвалКомпенсации.Параметры.Заполнить(ВыборкаРаботники);
		КонецЕсли;
		
		ТекущийНомерСтроки = ВыборкаРаботники.НомерСтроки;
		НомерСтрокиДляПечати = 1;
		Пока ЕстьДанные
				И ВыборкаРаботники.НомерСтроки = ТекущийНомерСтроки Цикл
		    
			Если ВыводитьКомпенсацию Тогда
				ОбластьМакетаОтпуск.Параметры.Заполнить(ВыборкаРаботники);
				ОбластьМакетаОтпуск.Параметры.НомерСтрокиДляПечати = НомерСтрокиДляПечати;
				ТабДокумент.Вывести(ОбластьМакетаОтпуск);
				
				НомерСтрокиДляПечати = НомерСтрокиДляПечати + 1;
			КонецЕсли;
			
			ЕстьДанные = ВыборкаРаботники.Следующий();
			
		КонецЦикла;
		
		Если ВыводитьКомпенсацию Тогда
			ТабДокумент.Вывести(ОбластьМакетаПодвалКомпенсации);
		КонецЕсли;
		
		// Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
	КонецЦикла;
	
	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
        ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаШапкаКомпенсации);
		ТабДокумент.Вывести(ОбластьМакетаОтпуск);
		ТабДокумент.Вывести(ОбластьМакетаПодвалКомпенсации);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьПриказа()	

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
 	Если ИмяМакета = "Приказ" Тогда
 		ТабДокумент = ПечатьПриказа(ИмяМакета);
 	ИначеЕсли ИмяМакета = "ПриказСписком" тогда
 		ТабДокумент = ПечатьПриказаСписком(ИмяМакета);
	ИначеЕсли ИмяМакета = "ОбходнойЛист" Тогда
		ТабДокумент = ПечатьОбходногоЛиста(ИмяМакета);
	Иначе
		ТабДокумент = УвольнениеИзОрганизацийПереопределяемый.ПечатьДополнительныхФорм(ИмяМакета, ЭтотОбъект);
	КонецЕсли;

 	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,"Увольнение из организации "));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	
	СтруктураПечатныхФорм.Вставить("ПриказСписком", "Приказ на список сотрудников");
	СтруктураПечатныхФорм.Вставить("Приказ",  		"Приказ на каждого сотрудника");
	СтруктураПечатныхФорм.Вставить("ОбходнойЛист",  "Обходной лист");

	УвольнениеИзОрганизацийПереопределяемый.ДополнитьСтруктуруПечатныхФорм(СтруктураПечатныхФорм, ЭтотОбъект);
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Рассчитывает неиспользованные отпуска по табличной части РаботникиОрганизации
//
// Параметры:
//	СтрокаРаботникиОрганизации - строка т.ч. РаботникиОрганизации, к-рую рассчитывать
//
Процедура Рассчитать(СтрокаРаботникиОрганизации = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация!");
		Возврат
	КонецЕсли;

    ПараметрыЗапроса = Новый Структура();
    ПараметрыЗапроса.Вставить("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	ПараметрыЗапроса.Вставить("ДокументСсылка", 	 Ссылка);
		
	УсловиеПоРаботнику = "";
	Если СтрокаРаботникиОрганизации <> Неопределено Тогда
		УсловиеПоРаботнику = "Сотрудник = &Сотрудник И ДатаУвольнения = &ДатаУвольнения";
		ПараметрыЗапроса.Вставить("Сотрудник", СтрокаРаботникиОрганизации.Сотрудник);
		ПараметрыЗапроса.Вставить("ДатаУвольнения", СтрокаРаботникиОрганизации.ДатаУвольнения);
	КонецЕсли;
	
	Если ИсправляемыйДокумент <> Неопределено Тогда
		УсловиеИсправляемыйДокумент = Истина;
		ПараметрыЗапроса.Вставить("ИсправлемыйДокумент", ИсправляемыйДокумент);
	Иначе
		УсловиеИсправляемыйДокумент = Ложь;
	КонецЕсли;
		
	// для предотвращения некорректного расчета в случае, когда введено несколько строк по одному работнику
	// рассчитываем на самую последнюю дату
	ДанныеРасчетаТекст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	&ГоловнаяОрганизация КАК Организация,
	|	СтрокиТЧ.Сотрудник,
	|	МАКСИМУМ(СтрокиТЧ.ДатаУвольнения) КАК ДатаРасчета
	|ПОМЕСТИТЬ ВТ_ДанныеРасчета
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК СтрокиТЧ
	|ГДЕ
	|	СтрокиТЧ.Ссылка = &ДокументСсылка
	|	И НЕ СтрокиТЧ.Сторно
	|	" + ?(УсловиеПоРаботнику <> "", " И " + УсловиеПоРаботнику, "") + "
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиТЧ.Сотрудник
	|";
		
	НеиспользованныеОтпускаТекст = ПроцедурыУправленияПерсоналом.СформироватьТекстЗапросаНеиспользованныеОтпуска(ДанныеРасчетаТекст, ПараметрыЗапроса, УсловиеИсправляемыйДокумент);
	
	// определим общее число дней неиспользованного отпуска
	ТекстЗапроса = "
	|" + НеиспользованныеОтпускаТекст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НеиспользованныеОтпуска.Сотрудник,
	|	НеиспользованныеОтпуска.Сотрудник.ФизЛицо,
	|	НеиспользованныеОтпуска.Сотрудник.Наименование КАК ФИОСотрудника,
	|	НеиспользованныеОтпуска.ДатаРасчета КАК ДатаУвольнения,
	|	НеиспользованныеОтпуска.ВидТрудовогоОтпуска,
	|	НеиспользованныеОтпуска.РабочийГодС,
	|	НеиспользованныеОтпуска.РабочийГодПо,
	|	НеиспользованныеОтпуска.Результат КАК ДнейОтпуска
	|
	|ИЗ
	|	ВТ_НеиспользованныеОтпуска КАК НеиспользованныеОтпуска
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НеиспользованныеОтпуска.Сотрудник.ФизЛицо.Наименование,
	|	НеиспользованныеОтпуска.ДатаРасчета,
	|	НеиспользованныеОтпуска.РабочийГодС,
	|	НеиспользованныеОтпуска.ВидТрудовогоОтпуска.ОчередностьПредоставленияОтпуска
	|";
		
	Запрос = Новый Запрос;
	
	// установим параметры запроса
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	                                  
	Выборка = Запрос.Выполнить().Выбрать();
	
	// удалим старые строки
	Если СтрокаРаботникиОрганизации <> Неопределено Тогда
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Сотрудник", 	   СтрокаРаботникиОрганизации.Сотрудник);	
		СтруктураПоиска.Вставить("ДатаУвольнения", СтрокаРаботникиОрганизации.ДатаУвольнения);
		СтруктураПоиска.Вставить("Сторно", 		   СтрокаРаботникиОрганизации.Сторно);
		
		НайденныеСтроки = Отпуска.НайтиСтроки(СтруктураПоиска);
		Для Каждого УдаляемаяСтрока Из НайденныеСтроки Цикл
			Отпуска.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		СтрокаРаботникиОрганизации.ДнейОтпуска = 0;
	Иначе
		ТЗОтпускаСторно = Отпуска.Выгрузить(Отпуска.НайтиСтроки(Новый Структура("Сторно", Истина)),);
		Отпуска.Очистить();
		
		// проставим во всех строках т.ч. РаботникиОрганизации ДнейОтпуска = 0
		Для Каждого СтрокаТЧ Из РаботникиОрганизации Цикл
			Если НЕ СтрокаТЧ.Сторно Тогда
				СтрокаТЧ.ДнейОтпуска = 0;
			КонецЕсли;
		КонецЦикла;
		Отпуска.Загрузить(ТЗОтпускаСторно);
	КонецЕсли;
	
	ТекущийСотрудник 	  = Неопределено;
	ТекущаяДатаУвольнения = Неопределено;
	ДнейОтпуска 		  = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если (ТекущийСотрудник <> Выборка.Сотрудник
				ИЛИ ТекущаяДатаУвольнения <> Выборка.ДатаУвольнения) Тогда

			Если ТекущийСотрудник <> Неопределено Тогда
				// установим общее число дней в т.ч. РаботникиОрганизации
				СтруктураПоиска = Новый Структура();
				СтруктураПоиска.Вставить("Сотрудник", 	   ТекущийСотрудник);	
				СтруктураПоиска.Вставить("ДатаУвольнения", ТекущаяДатаУвольнения);
				СтруктураПоиска.Вставить("Сторно", 		   Ложь);
				
				НайденныеСтроки = РаботникиОрганизации.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденныеСтроки[0].ДнейОтпуска = ДнейОтпуска;
				КонецЕсли;
			КонецЕсли;
			
			ТекущийСотрудник 	  = Выборка.Сотрудник;
			ТекущаяДатаУвольнения = Выборка.ДатаУвольнения;
			ДнейОтпуска 		  = 0;
			
		КонецЕсли;
					
		Если Выборка.ДнейОтпуска <> 0 Тогда
			
			НоваяСтрока = Отпуска.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			ДнейОтпуска = ДнейОтпуска + Выборка.ДнейОтпуска;
			
		КонецЕсли;
		
	КонецЦикла;
	                     
	// заполним число дней в т.ч. РаботникиОрганизации по последнему работнику
	Если ТекущийСотрудник <> Неопределено Тогда
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Сотрудник", 	   ТекущийСотрудник);	
		СтруктураПоиска.Вставить("ДатаУвольнения", ТекущаяДатаУвольнения);
		СтруктураПоиска.Вставить("Сторно", 		   Ложь);
			
		НайденныеСтроки = РаботникиОрганизации.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ДнейОтпуска = ДнейОтпуска;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // Рассчитать()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация" , Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = "
	|Выбрать 
	|	Дата, 
	|	Организация,
	|	Организация.Наименование КАК ОрганизацияНаименование,
	|	ВЫБОР 
	|		КОГДА Организация.ГоловнаяОрганизация = &ПустаяОрганизация 
	|			ТОГДА Организация 
	|		ИНАЧЕ Организация.ГоловнаяОрганизация 
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	| 	Ссылка 
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются данными о 
//  работниках из регистра сведений РаботникиОрганизации и о начислениях
//  и удержаниях из регистров сведений 
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, Режим)

	Запрос = Новый Запрос;

	// Заполним список обособленных подразделений организации 
	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", 			Ссылка);
	Запрос.УстановитьПараметр("Организация", 				Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("Уволен" ,      				Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("Отпуск" ,      				Перечисления.СостоянияРаботникаОрганизации.ОтпускЕжегодный);
	Запрос.УстановитьПараметр("НачальнаяДата", 				'00010101');
	Запрос.УстановитьПараметр("Прекратить", 				Перечисления.ВидыДействияСНачислением.Прекратить);
	Запрос.УстановитьПараметр("Прием", 						Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Запрос.УстановитьПараметр("парамПустаяДата", 			'00010101');
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Запрос.УстановитьПараметр("Налогоплательщик", ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоШапкеДокумента.Организация,
																									ВыборкаПоШапкеДокумента.Организация,
																									глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																									Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты));
	Иначе
		Запрос.УстановитьПараметр("Налогоплательщик", Организация);
	КонецЕсли;
	
	Если Режим = "ПоТабличнойЧастиРаботникиОрганизации" Тогда
		// Описание текста запроса:
		// Первая часть запроса  - вид строки запроса "ДанныеДляДвиженийКадров": 
	    // 1. Выборка "ТЧРаботникиОрганизации": 
		//		Выбираются строки документа.  
		// 2. Выборка "ДанныеПоРаботникиДоНазначения": 
		//		Для каждой строки ТЧРаботникиОрганизации выполняем срез по регистру РаботникиОрганизации на дату ДатаНачала
		//		для выполнения движений и проверки "Работает ли работник на дату перемещения" в указанной организации (структурном подразделении). 
		//		(Использует данные выборки "ДатыПоследнихДвиженийРаботников")
		// 3. Выборка "ПересекающиесяСтроки": 
		//		Среди остальных строк документа ищем строки, имеющие одиноковый набор реквизитов <Сотрудник>.
		//
		// Вторая часть запроса - вид строки запроса "НачисленияРаботникаОрганизации" и "УдержанияРаботниковОрганизации" - выборка открытых начислений и удержаний работника для их закрытия
		// 1. Выборка "ТЧРаботникиОрганизации":
		//		Выбираются строки документа 
		// 2. Выборка "СписокВидовРасчета":
		//		Для каждой строки ТЧРаботникиОрганизации по регистрам ПлановыеНачисленияРаботниковОрганизаций и ПлановыеУдержанияРаботниковОрганизаций выполняем срез последних на дату ДатаУвольнения (выборка СписокВидовРасчета).
		//		Для закрытия нужны только те строки начислений и удержаний, ресурс "Размер" которых не равен нулю.
		//		Удержания физлица закрываем по всем структруным подразделениям только в момент увольнения с основного места работы.

		// Третья часть запроса - вид строки запроса "РабочиеМестаДоУвольнения" - выборка остающихся мест работы после увольнения
		// Данные выборки нужня для проверки "Работник не может быть уволен с основного места работы до тех пор, пока он оформлен внутренним совместителем"
		// 1. Выборка "ТЧРаботникиОрганизации":
		//		Выбираются строки документа 
		// 2. Выборка "ДанныеПоРаботникуДоУвольнения":
		//		Для каждой строки ТЧРаботникиОрганизации выполняем срез по выборке "ДвиженияРаботниковОрганизации" регистру РаботникиОрганизации на дату ДатаУвольнения.
		//		Где выборка "ДвиженияРаботниковОрганизации" есть объединение движений по регистру "РаботникиОрганизации" и движений, которые должны выполниться
		//		проверяемым документом. 

		// Четвертая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
		// 1. Выборка "ТЧРаботникиОрганизации":
		//		Выбираются строки документа 
	   	// 2. Выборка "КонфликтныеДвижения":
		//		Для каждой строки ТЧРаботникиОрганизации ищем движения по регистрам РаботникиОрганизации и СостояниеРаботниковОрганизации
		//		на дату ДатаУвольнения по набору измерений <Сотрудник>

		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		               |	ТЧРаботникиОрганизации.Сотрудник,
		               |	ТЧРаботникиОрганизации.Физлицо КАК ФизЛицо,
		               |	ТЧРаботникиОрганизации.ДатаУвольнения,
		               |	ТЧРаботникиОрганизации.СтатьяЗаконаОТрудеРК,
		               |	ТЧРаботникиОрганизации.ПрекращатьСтандартныеВычеты,
		               |	ТЧРаботникиОрганизации.Сторно
		               |ПОМЕСТИТЬ ВТДанныеДокумента
		               |ИЗ
		               |	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		               |ГДЕ
		               |	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		               |	И НЕ ТЧРаботникиОрганизации.Сторно
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ТЧРаботникиОрганизации.Сотрудник
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
		               |	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		               |	ТЧРаботникиОрганизации.Сотрудник,
		               |	ТЧРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
		               |	ТЧРаботникиОрганизации.ФизЛицо КАК ФизЛицо,
		               |	ТЧРаботникиОрганизации.ДатаУвольнения,
		               |	ТЧРаботникиОрганизации.СтатьяЗаконаОТрудеРК,
		               |	ДанныеПоРаботникуДоНазначения.Сотрудник.ВидЗанятости КАК ВидЗанятости,
		               |	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПрежнееПодразделение,
		               |	ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение КАК ПрежнееОбособленноеПодразделение,
		               |	ДанныеПоРаботникуДоНазначения.Должность КАК ПрежняяДолжность,
		               |	ДанныеПоРаботникуДоНазначения.ТарифныйРазряд КАК ПрежнийТарифныйРазряд,
		               |	ДанныеПоРаботникуДоНазначения.Сотрудник.Код КАК ПрежнийТабельныйНомер,
		               |	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ПрежняяСтавка,
		               |	ДанныеПоРаботникуДоНазначения.ГрафикРаботы КАК ПрежнийГрафикРаботы,
		               |	ДанныеПоРаботникуДоНазначения.ИсчислятьОППВ КАК ПрежнееЗначениеИсчисленияОППВ,
		               |	ДанныеПоРаботникуДоНазначения.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
		               |	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
		               |	NULL КАК ВидРасчетаИзмерение,
		               |	NULL КАК ВидРасчета,
		               |	NULL КАК ДокументОснованиеРасчета,
		               |	NULL КАК КонфликтныйДокумент,
		               |	NULL КАК ВидЗанятостиПоДругомуМестуРаботы,
		               |	NULL КАК Налогоплательщик,
		               |	NULL КАК МесяцНалоговогоПериода,
		               |	NULL КАК ВычетИПН,
		               |	NULL КАК ДокументОснованиеВычета,
		               |	ВЫБОР
		               |		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
		               |ИЗ
		               |	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
		               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |				Док.Сотрудник КАК Сотрудник,
		               |				МАКСИМУМ(СостояниеВнутри.Период) КАК ДатаПоследнегоИзменения
		               |			ИЗ
		               |				РегистрСведений.РаботникиОрганизаций КАК СостояниеВнутри
		               |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК Док
		               |					ПО СостояниеВнутри.Сотрудник = Док.Сотрудник
		               |						И (СостояниеВнутри.Организация = &ГоловнаяОрганизация)
		               |						И СостояниеВнутри.Период <= Док.ДатаУвольнения
		               |			
		               |			СГРУППИРОВАТЬ ПО
		               |				Док.Сотрудник) КАК СписокДат
		               |			ПО ДанныеПоРаботникуДоНазначения.Сотрудник = СписокДат.Сотрудник
		               |				И ДанныеПоРаботникуДоНазначения.Период = СписокДат.ДатаПоследнегоИзменения
		               |				И (ДанныеПоРаботникуДоНазначения.Организация = &ГоловнаяОрганизация)
		               |		ПО (ДанныеПоРаботникуДоНазначения.Сотрудник = ТЧРаботникиОрганизации.Сотрудник)
		               |			И (ДанныеПоРаботникуДоНазначения.Организация = &ГоловнаяОрганизация)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		               |			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
		               |		ИЗ
		               |			ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации2
		               |				ПО (ТЧРаботникиОрганизации2.Ссылка = &ДокументСсылка)
		               |					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
		               |					И ТЧРаботникиОрганизации.НомерСтроки <> ТЧРаботникиОрганизации2.НомерСтроки
		               |					И ТЧРаботникиОрганизации.Сторно = ТЧРаботникиОрганизации2.Сторно
		               |		
		               |		СГРУППИРОВАТЬ ПО
		               |			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
		               |		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СписокВидовРасчета.ВидСтрокиЗапроса,
		               |	ТЧРаботникиОрганизации.НомерСтроки,
		               |	ТЧРаботникиОрганизации.Сотрудник,
		               |	ТЧРаботникиОрганизации.Сотрудник.Наименование,
		               |	ТЧРаботникиОрганизации.ФизЛицо,
		               |	ТЧРаботникиОрганизации.ДатаУвольнения,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	СписокВидовРасчета.ВидРасчетаИзмерение,
		               |	СписокВидовРасчета.ВидРасчета,
		               |	СписокВидовРасчета.ДокументОснование,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL
		               |ИЗ
		               |	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			""НачисленияРаботникаОрганизации"" КАК ВидСтрокиЗапроса,
		               |			НачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник,
		               |			НачисленияРаботниковОрганизации.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
		               |			НачисленияРаботниковОрганизации.ВидРасчета КАК ВидРасчета,
		               |			НачисленияРаботниковОрганизации.Организация КАК Организация,
		               |			NULL КАК ДокументОснование
		               |		ИЗ
		               |			РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
		               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |					НачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник,
		               |					НачисленияРаботниковОрганизации.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
		               |					МАКСИМУМ(НачисленияРаботниковОрганизации.Период) КАК ДатаИзмененияРеквизитов
		               |				ИЗ
		               |					ВТДанныеДокумента КАК Док
		               |						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
		               |						ПО Док.Сотрудник = НачисленияРаботниковОрганизации.Сотрудник
		               |							И (НачисленияРаботниковОрганизации.Организация = &ГоловнаяОрганизация)
		               |							И Док.ДатаУвольнения >= НачисленияРаботниковОрганизации.Период
		               |				
		               |				СГРУППИРОВАТЬ ПО
		               |					НачисленияРаботниковОрганизации.Сотрудник,
		               |					НачисленияРаботниковОрганизации.ВидРасчетаИзмерение) КАК ДатыНачислений
		               |				ПО НачисленияРаботниковОрганизации.Период = ДатыНачислений.ДатаИзмененияРеквизитов
		               |					И НачисленияРаботниковОрганизации.Сотрудник = ДатыНачислений.Сотрудник
		               |					И (НачисленияРаботниковОрганизации.Организация = &ГоловнаяОрганизация)
		               |					И НачисленияРаботниковОрганизации.ВидРасчетаИзмерение = ДатыНачислений.ВидРасчетаИзмерение
		               |					И (НачисленияРаботниковОрганизации.Действие <> &Прекратить)
		               |		
		               |		ОБЪЕДИНИТЬ ВСЕ
		               |		
		               |		ВЫБРАТЬ
		               |			""УдержанияРаботниковОрганизации"",
		               |			ПлановыеУдержанияРаботниковОрганизаций.ФизЛицо,
		               |			ПлановыеУдержанияРаботниковОрганизаций.ВидРасчета,
		               |			NULL,
		               |			ПлановыеУдержанияРаботниковОрганизаций.Организация,
		               |			ПлановыеУдержанияРаботниковОрганизаций.ДокументОснование
		               |		ИЗ
		               |			РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК ПлановыеУдержанияРаботниковОрганизаций
		               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |					ПлановыеУдержанияРаботниковОрганизаций.Организация КАК Организация,
		               |					ПлановыеУдержанияРаботниковОрганизаций.ФизЛицо КАК Физлицо,
		               |					ПлановыеУдержанияРаботниковОрганизаций.ВидРасчета КАК ВидРасчета,
		               |					ПлановыеУдержанияРаботниковОрганизаций.ДокументОснование КАК ДокументОснование,
		               |					МАКСИМУМ(ПлановыеУдержанияРаботниковОрганизаций.Период) КАК ДатаИзмененияРеквизитов,
		               |					Док.ДатаУвольнения КАК ДатаУвольнения
		               |				ИЗ
		               |					ВТДанныеДокумента КАК Док
		               |						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК ПлановыеУдержанияРаботниковОрганизаций
		               |						ПО Док.ФизЛицо = ПлановыеУдержанияРаботниковОрганизаций.ФизЛицо
		               |							И Док.ДатаУвольнения >= ПлановыеУдержанияРаботниковОрганизаций.Период
		               |							И (ПлановыеУдержанияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация)
		               |				
		               |				СГРУППИРОВАТЬ ПО
		               |					ПлановыеУдержанияРаботниковОрганизаций.Организация,
		               |					ПлановыеУдержанияРаботниковОрганизаций.ФизЛицо,
		               |					ПлановыеУдержанияРаботниковОрганизаций.ВидРасчета,
		               |					ПлановыеУдержанияРаботниковОрганизаций.ДокументОснование,
		               |					Док.ДатаУвольнения) КАК ДатыУдержаний
		               |				ПО ПлановыеУдержанияРаботниковОрганизаций.Период = ДатыУдержаний.ДатаИзмененияРеквизитов
		               |					И ПлановыеУдержанияРаботниковОрганизаций.ФизЛицо = ДатыУдержаний.Физлицо
		               |					И ПлановыеУдержанияРаботниковОрганизаций.ВидРасчета = ДатыУдержаний.ВидРасчета
		               |					И ПлановыеУдержанияРаботниковОрганизаций.ДокументОснование = ДатыУдержаний.ДокументОснование
		               |					И ПлановыеУдержанияРаботниковОрганизаций.Организация = ДатыУдержаний.Организация
		               |					И (ВЫБОР
		               |						КОГДА ПлановыеУдержанияРаботниковОрганизаций.ПериодЗавершения <> &парамПустаяДата
		               |								И ПлановыеУдержанияРаботниковОрганизаций.ПериодЗавершения < ДатыУдержаний.ДатаУвольнения
		               |							ТОГДА ПлановыеУдержанияРаботниковОрганизаций.ДействиеЗавершения
		               |						ИНАЧЕ ПлановыеУдержанияРаботниковОрганизаций.Действие
		               |					КОНЕЦ <> &Прекратить)) КАК СписокВидовРасчета
		               |		ПО (СписокВидовРасчета.ВидСтрокиЗапроса = ""НачисленияРаботникаОрганизации""
		               |					И ТЧРаботникиОрганизации.Сотрудник = СписокВидовРасчета.Сотрудник
		               |				ИЛИ СписокВидовРасчета.ВидСтрокиЗапроса = ""УдержанияРаботниковОрганизации""
		               |					И ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство
		               |					И ТЧРаботникиОрганизации.ФизЛицо = СписокВидовРасчета.Сотрудник)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	""РабочиеМестаДоУвольнения"",
		               |	ТЧРаботникиОрганизации.НомерСтроки,
		               |	ДанныеПоРаботникуДоУвольнения.Сотрудник,
		               |	ДанныеПоРаботникуДоУвольнения.Сотрудник.Наименование,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	ДанныеПоМестуУвольнения.Сотрудник.ВидЗанятости,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	ДанныеПоРаботникуДоУвольнения.Сотрудник.ВидЗанятости,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL
		               |ИЗ
		               |	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоУвольнения
		               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |				ДвиженияРаботниковОрганизации.Сотрудник КАК Сотрудник,
		               |				МАКСИМУМ(ДвиженияРаботниковОрганизации.Период) КАК ДатаПоследнегоИзменения
		               |			ИЗ
		               |				(ВЫБРАТЬ
		               |					ДвиженияРаботниковОрганизации.Период КАК Период,
		               |					ДвиженияРаботниковОрганизации.Сотрудник КАК Сотрудник,
		               |					ДвиженияРаботниковОрганизации.Сотрудник.Физлицо КАК ФизЛицо
		               |				ИЗ
		               |					РегистрСведений.РаботникиОрганизаций КАК ДвиженияРаботниковОрганизации
		               |				ГДЕ
		               |					ДвиженияРаботниковОрганизации.Организация = &ГоловнаяОрганизация
		               |				
		               |				ОБЪЕДИНИТЬ ВСЕ
		               |				
		               |				ВЫБРАТЬ
		               |					ТЧРаботникиОрганизации.ДатаУвольнения,
		               |					ТЧРаботникиОрганизации.Сотрудник,
		               |					ТЧРаботникиОрганизации.ФизЛицо
		               |				ИЗ
		               |					ВТДанныеДокумента КАК ТЧРаботникиОрганизации) КАК ДвиженияРаботниковОрганизации
		               |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК Док
		               |					ПО ДвиженияРаботниковОрганизации.ФизЛицо = Док.ФизЛицо
		               |						И (ДвиженияРаботниковОрганизации.Период <= ДОБАВИТЬКДАТЕ(Док.ДатаУвольнения, ДЕНЬ, 1))
		               |			
		               |			СГРУППИРОВАТЬ ПО
		               |				ДвиженияРаботниковОрганизации.Сотрудник) КАК ДатыПоследнихДвиженийПоПриказам
		               |			ПО ДанныеПоРаботникуДоУвольнения.Сотрудник = ДатыПоследнихДвиженийПоПриказам.Сотрудник
		               |				И (ДанныеПоРаботникуДоУвольнения.Организация = &ГоловнаяОрганизация)
		               |				И ДанныеПоРаботникуДоУвольнения.Период = ДатыПоследнихДвиженийПоПриказам.ДатаПоследнегоИзменения
		               |				И (ДанныеПоРаботникуДоУвольнения.ПричинаИзмененияСостояния <> &Уволен)
		               |		ПО (ДанныеПоРаботникуДоУвольнения.Сотрудник.Физлицо = ТЧРаботникиОрганизации.Сотрудник.Физлицо)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		               |			МАКСИМУМ(РаботникиОрганизации.Период) КАК Период
		               |		ИЗ
		               |			ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		               |				ПО ТЧРаботникиОрганизации.Сотрудник = РаботникиОрганизации.Сотрудник
		               |					И (РаботникиОрганизации.Организация = &ГоловнаяОрганизация)
		               |					И (РаботникиОрганизации.Период <= ТЧРаботникиОрганизации.ДатаУвольнения)
		               |		
		               |		СГРУППИРОВАТЬ ПО
		               |			ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыНазначенийПередУвольнением
		               |		ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыНазначенийПередУвольнением.НомерСтроки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоМестуУвольнения
		               |		ПО ТЧРаботникиОрганизации.Сотрудник = ДанныеПоМестуУвольнения.Сотрудник
		               |			И (ДанныеПоМестуУвольнения.Организация = &ГоловнаяОрганизация)
		               |			И (ДатыНазначенийПередУвольнением.Период = ДанныеПоМестуУвольнения.Период)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	""ИПНПлановыеНалоговыеВычетыФизлиц"",
		               |	ПоследниеДатыПлановыхВычетов.НомерСтроки,
		               |	ПоследниеДатыПлановыхВычетов.Сотрудник,
		               |	ПоследниеДатыПлановыхВычетов.Сотрудник.Наименование,
		               |	ПоследниеДатыПлановыхВычетов.ФизЛицо,
		               |	ПоследниеДатыПлановыхВычетов.ДатаУвольнения,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	ИПНПлановыеВычеты.Налогоплательщик,
		               |	ИПНПлановыеВычеты.МесяцНалоговогоПериода,
		               |	ИПНПлановыеВычеты.ВычетИПН,
		               |	ИПНПлановыеВычеты.ДокументОснование,
		               |	NULL
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		               |		ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
		               |		ТЧРаботникиОрганизации.ФизЛицо КАК ФизЛицо,
		               |		ТЧРаботникиОрганизации.ДатаУвольнения КАК ДатаУвольнения,
		               |		ИПНПлановыеВычеты.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		               |		ИПНПлановыеВычеты.ВычетИПН КАК ВычетИПН,
		               |		ИПНПлановыеВычеты.ДокументОснование КАК ДокументОснование,
		               |		ИПНПлановыеВычеты.Налогоплательщик КАК Налогоплательщик,
		               |		МАКСИМУМ(ИПНПлановыеВычеты.Период) КАК Период
		               |	ИЗ
		               |		ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИПНПлановыеНалоговыеВычетыФизлиц КАК ИПНПлановыеВычеты
		               |			ПО ТЧРаботникиОрганизации.ФизЛицо = ИПНПлановыеВычеты.Физлицо
		               |				И (ИПНПлановыеВычеты.Налогоплательщик = &Налогоплательщик)
		               |				И (ИПНПлановыеВычеты.СуммаВычета <> 0)
		               |				И (ИПНПлановыеВычеты.МесяцНалоговогоПериода >= ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ТЧРаботникиОрганизации.ДатаУвольнения, МЕСЯЦ), СЕКУНДА, 1))
		               |				И (ИПНПлановыеВычеты.Период <= ТЧРаботникиОрганизации.ДатаУвольнения)
		               |	ГДЕ
		               |		ТЧРаботникиОрганизации.ПрекращатьСтандартныеВычеты
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		ТЧРаботникиОрганизации.НомерСтроки,
		               |		ТЧРаботникиОрганизации.Сотрудник,
		               |		ТЧРаботникиОрганизации.ФизЛицо,
		               |		ТЧРаботникиОрганизации.ДатаУвольнения,
		               |		ИПНПлановыеВычеты.МесяцНалоговогоПериода,
		               |		ИПНПлановыеВычеты.ВычетИПН,
		               |		ИПНПлановыеВычеты.ДокументОснование,
		               |		ИПНПлановыеВычеты.Налогоплательщик) КАК ПоследниеДатыПлановыхВычетов
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИПНПлановыеНалоговыеВычетыФизлиц КАК ИПНПлановыеВычеты
		               |		ПО ПоследниеДатыПлановыхВычетов.ФизЛицо = ИПНПлановыеВычеты.Физлицо
		               |			И ПоследниеДатыПлановыхВычетов.Период = ИПНПлановыеВычеты.Период
		               |			И (ИПНПлановыеВычеты.Налогоплательщик = &Налогоплательщик)
		               |			И ПоследниеДатыПлановыхВычетов.МесяцНалоговогоПериода = ИПНПлановыеВычеты.МесяцНалоговогоПериода
		               |			И ПоследниеДатыПлановыхВычетов.ВычетИПН = ИПНПлановыеВычеты.ВычетИПН
		               |			И ПоследниеДатыПлановыхВычетов.ДокументОснование = ИПНПлановыеВычеты.ДокументОснование
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	""КонфликтныйДокумент"",
		               |	ТЧРаботникиОрганизации.НомерСтроки,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	КонфликтныеДвижения.Регистратор,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL
		               |ИЗ
		               |	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК КонфликтныеДвижения
		               |		ПО ТЧРаботникиОрганизации.Сотрудник = КонфликтныеДвижения.Сотрудник
		               |			И (КонфликтныеДвижения.Организация = &ГоловнаяОрганизация)
		               |			И (ДОБАВИТЬКДАТЕ(ТЧРаботникиОрганизации.ДатаУвольнения, ДЕНЬ, 1) = КонфликтныеДвижения.Период)
		               |ИТОГИ ПО
		               |	НомерСтроки,
		               |	ВидСтрокиЗапроса";
	
	ИначеЕсли Режим = "ПоТабличнойЧастиОтпуска" Тогда
	
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтрокиРаботникиОрганизации,
		|	ТЧОтпуска.НомерСтроки КАК НомерСтрокиОтпуска,
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
		|	ТЧРаботникиОрганизации.ДатаУвольнения КАК ДатаУвольнения,
		|	ТЧОтпуска.ВидТрудовогоОтпуска КАК ВидОтпуска,
		|	ТЧОтпуска.РабочийГодС КАК РабочийГодС,
		|	ТЧОтпуска.РабочийГодПо КАК РабочийГодПо,
		|	ТЧОтпуска.ДнейОтпуска КАК ДнейОтпуска,
		|	ВЫБОР
		|		КОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ТЧОтпуска.РабочийГодС, ГОД), МЕСЯЦ, МЕСЯЦ(ПриказыОПриеме.Период) - 1), ДЕНЬ, ДЕНЬ(ПриказыОПриеме.Период) - 1) = ТЧОтпуска.РабочийГодС
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаВРабочемГодеС,
		|	ВЫБОР
		|		КОГДА " + ПроцедурыУправленияПерсоналом.СформироватьТекстЗапросаКонецРабочегоГода("ТЧОтпуска.РабочийГодС") + " = ТЧОтпуска.РабочийГодПо
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаВРабочемГодеПо,
		|	NULL КАК КонфликтнаяСтрокаНомер
		|ИЗ
		|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеИзОрганизаций.Отпуска КАК ТЧОтпуска
		|		ПО ТЧРаботникиОрганизации.Сотрудник = ТЧОтпуска.Сотрудник
		|			И ТЧРаботникиОрганизации.Ссылка = ТЧОтпуска.Ссылка
		|			И ТЧРаботникиОрганизации.ДатаУвольнения = ТЧОтпуска.ДатаУвольнения
		|			И ТЧРаботникиОрганизации.Сторно = ТЧОтпуска.Сторно
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|				МАКСИМУМ(Работники.Период) КАК Период,
		|				ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник
		|			ИЗ
		|				Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|					ПО ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
		|						И (Работники.Организация = &ГоловнаяОрганизация)
		|						И Работники.Период <= ТЧРаботникиОрганизации.ДатаУвольнения
		|						И (Работники.ПричинаИзмененияСостояния = &Прием)
		|			ГДЕ
		|				ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|				И НЕ ТЧРаботникиОрганизации.Сторно
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ТЧРаботникиОрганизации.НомерСтроки,
		|				ТЧРаботникиОрганизации.Сотрудник) КАК ПриказыОПриеме
		|		ПО ПриказыОПриеме.НомерСтроки = ТЧРаботникиОрганизации.НомерСтроки
		|
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|	И НЕ ТЧРаботникиОрганизации.Сторно
	 	|";
	                                  
	КонецЕсли;                          
                                         
	Запрос.Текст = ТекстЗапроса;
	                              
	Возврат Запрос.Выполнить();     

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()
 
// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации, Режим)

	Если Режим = "ПоТабличнойЧастиРаботникиОрганизации" Тогда
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
		""" табл. части ""Сотрудники"": ";
	ИначеЕсли Режим = "ПоТабличнойЧастиОтпуска" Тогда
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтрокиОтпуска) +
		""" табл. части ""Неиспользованных трудовых отпусков"" для строки номер """ + СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтрокиРаботникиОрганизации) +
		""" табл. части ""Сотрудники"": ";
	КонецЕсли;

	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда

		// Сотрудник
		НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
		Если НетСотрудника Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
		КонецЕсли;

		// ДатаУвольнения
		НетДатыУвольнения = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаУвольнения);
		Если НетДатыУвольнения Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата увольнения!", Отказ, Заголовок);
		КонецЕсли;

		Если НетСотрудника ИЛИ НетДатыУвольнения Тогда
			Возврат; // Дальше не проверяем
		КонецЕсли;	

		Если Режим = "ПоТабличнойЧастиРаботникиОрганизации" Тогда
			
			// Организация сотрудника должна совпадать с организацией документа
			Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "организация документа не соответствует организации, указанной в карточке сотрудника!", Отказ, Заголовок);
			КонецЕсли;

			// Проверка: ранее работник должен быть принят на работу
			Если ВыборкаПоСтрокамДокумента.ПрежняяСтавка = NULL Тогда
				СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаУвольнения, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
			ИначеЕсли ВыборкаПоСтрокамДокумента.ПрежняяСтавка = 0 Тогда	
				СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаУвольнения, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
			ИначеЕсли ВыборкаПоСтрокамДокумента.ПрежнееОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.Организация Тогда 
				// чтобы при увольнении в шапке было указано именно обособленное подразделение, в котором числится работник
			    ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + " на момент увольнения не работает в организации (обособленном подразделении) " + ВыборкаПоШапкеДокумента.ОрганизацияНаименование + "!", Отказ, Заголовок);
   			КонецЕсли; 
	
		ИначеЕсли Режим = "ПоТабличнойЧастиОтпуска" Тогда
			// РабочийГодС
			ЕстьРабочийГодС = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.РабочийГодС);
			Если НЕ ЕстьРабочийГодС Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала рабочего года!", Отказ, Заголовок);
			ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаВРабочемГодеС Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата начала рабочего года не соответствует дате приема!", Отказ, Заголовок);
			КонецЕсли;
				
			// РабочийГодПо
			ЕстьРабочийГодПо = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.РабочийГодПо);
			Если НЕ ЕстьРабочийГодПо Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания рабочего года!", Отказ, Заголовок);
			ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаВРабочемГодеПо Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата окончания рабочего года не соответствует дате приема!", Отказ, Заголовок);
			КонецЕсли;
				
			// Вид отпуска
			ЕстьВидОтпуска = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидОтпуска);
			Если НЕ ЕстьВидОтпуска Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид отпуска!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;

		// Проверка: противоречие другой строке документа
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			СтрокаСообщениеОбОшибке = "сотрудник не может быть указан в документе дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;	
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда	

		// противоречие другим кадровым приказам
		СтрокаСообщениеОбОшибке = "возникает противоречие кадровому приказу " + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);

	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Проверяет возможность увольнения работника с точки зрения последовательности приказов по "ВидамЗанятости"
Процедура ПроверитьВидыЗанятостиРаботникаВОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ВыборкаСтрокЗапроса, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """ + СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Сотрудники"": ";

	// обходим строки запроса
	Пока ВыборкаСтрокЗапроса.Следующий() Цикл

    	ВидЗанятостиПоПриказу = ВыборкаСтрокЗапроса.ВидЗанятости;
	
		Если ВидЗанятостиПоПриказу = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы
				ИЛИ ВидЗанятостиПоПриказу = Перечисления.ВидыЗанятостиВОрганизации.Совместительство Тогда

			// При увольнении с основного места работы потребуем, чтобы не было внутреннего совместительства
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство  Тогда
				СтрокаСообщениеОбОшибке = "нельзя уволить сотрудника с основного места работы или внешнего совместительства до тех пор,
				|	пока он оформлен внутренним совместителем!
				|	(Сотрудник: " + ВыборкаСтрокЗапроса.СотрудникНаименование + ")"; 
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			КонецЕсли;		

		КонецЕсли; 

	КонецЦикла;		

КонецПроцедуры

// Создает и заполняет структуру, содержащую имена регистров сведений 
//  по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                                           по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	СтруктураПроведенияПоРегистрамСведений.Вставить("РаботникиОрганизаций");
	СтруктураПроведенияПоРегистрамСведений.Вставить("ПлановыеНачисленияРаботниковОрганизаций");
	СтруктураПроведенияПоРегистрамСведений.Вставить("ПлановыеУдержанияРаботниковОрганизаций");
	СтруктураПроведенияПоРегистрамСведений.Вставить("ИПНПлановыеНалоговыеВычетыФизлиц");	
	СтруктураПроведенияПоРегистрамСведений.Вставить("ПериодыРаботыРаботниковОрганизаций");	

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, 
	СтруктураПроведенияПоРегистрамСведений, УчетнаяПолитикаПоПерсоналуОрганизации)
	
	Если ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		
		// Если документ нужно проводить по регистру, то для него есть ключ в структуре
		ИмяРегистра = "РаботникиОрганизаций";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства		
			Движение.Период                     = ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
			
			// Измерения
			Движение.Сотрудник                  = ВыборкаПоРаботникиОрганизации.Сотрудник;
			Движение.Организация           		= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;;
			
			// Ресурсы
			Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПрежнееПодразделение;
			Движение.Должность					= ВыборкаПоРаботникиОрганизации.ПрежняяДолжность;
			Движение.ТарифныйРазряд				= ВыборкаПоРаботникиОрганизации.ПрежнийТарифныйРазряд;
			Движение.ГрафикРаботы				= ВыборкаПоРаботникиОрганизации.ПрежнийГрафикРаботы;
			// оставляем признак ОППВ установленным на случай если будут вручную вносить доплаты и не учтут дату увольнения.
			Движение.ИсчислятьОППВ				= ВыборкаПоРаботникиОрганизации.ПрежнееЗначениеИсчисленияОППВ;   
			// не записываем значения для этих ресурсов:
			//Движение.ЗанимаемыхСтавок
			
			// Реквизиты
			Движение.ПричинаИзмененияСостояния  = Перечисления.ПричиныИзмененияСостояния.Увольнение;
			Движение.ОбособленноеПодразделение  = ВыборкаПоШапкеДокумента.Организация;
			Движение.СтатьяЗаконаОТрудеРК  		= ВыборкаПоРаботникиОрганизации.СтатьяЗаконаОТрудеРК;
			
		КонецЕсли; 
		
		ИмяРегистра = "ПериодыРаботыРаботниковОрганизаций";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			Если ВыборкаПоРаботникиОрганизации.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы 
				ИЛИ ВыборкаПоРаботникиОрганизации.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство Тогда
				Движение = Движения[ИмяРегистра].Добавить();
				
				// Измерения
				Движение.Физлицо		= ВыборкаПоРаботникиОрганизации.Физлицо;
				Движение.Организация    = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ВидЗанятости	= ВыборкаПоРаботникиОрганизации.ВидЗанятости;
				Движение.ДатаОкончания	= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "НачисленияРаботникаОрганизации" Тогда
		
		ИмяРегистра = "ПлановыеНачисленияРаботниковОрганизаций";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			Движение = Движения[ИмяРегистра].Добавить();
			// Свойства
			Движение.Период                 = ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
			// Измерения
			Движение.Сотрудник              = ВыборкаПоРаботникиОрганизации.Сотрудник;
			Движение.Организация            = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ВидРасчетаИзмерение    = ВыборкаПоРаботникиОрганизации.ВидРасчетаИзмерение;
			// Ресурсы
			Движение.Действие				= Перечисления.ВидыДействияСНачислением.Прекратить;
			Движение.ВидРасчета             = ВыборкаПоРаботникиОрганизации.ВидРасчета;
			
		КонецЕсли; 
		
	ИначеЕсли ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "УдержанияРаботниковОрганизации" Тогда
		
		ИмяРегистра = "ПлановыеУдержанияРаботниковОрганизаций";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
				
			// Свойства
			Движение.Период                     = ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
				
			// Измерения
			Движение.Организация                = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ФизЛицо                    = ВыборкаПоРаботникиОрганизации.ФизЛицо;
			Движение.ВидРасчета                 = ВыборкаПоРаботникиОрганизации.ВидРасчетаИзмерение;
			Движение.ДокументОснование          = ВыборкаПоРаботникиОрганизации.ДокументОснованиеРасчета;
				
			// Ресурсы
			Движение.Действие					= Перечисления.ВидыДействияСНачислением.Прекратить;
			
		КонецЕсли; 

	ИначеЕсли ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ИПНПлановыеНалоговыеВычетыФизлиц" Тогда
		
		ИмяРегистра = "ИПНПлановыеНалоговыеВычетыФизлиц";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
		    Движение = Движения[ИмяРегистра].Добавить();
		    
		    // Свойства
		    Движение.Период 			  	= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
		    
		    // Измерения
		    Движение.ФизЛицо			  	= ВыборкаПоРаботникиОрганизации.ФизЛицо;
		    Движение.Налогоплательщик	  	= ВыборкаПоРаботникиОрганизации.Налогоплательщик;
		    Движение.МесяцНалоговогоПериода = ВыборкаПоРаботникиОрганизации.МесяцНалоговогоПериода;
		    Движение.ВычетИПН				= ВыборкаПоРаботникиОрганизации.ВычетИПН;
		    Движение.ДокументОснование		= ВыборкаПоРаботникиОрганизации.ДокументОснованиеВычета;
		    
		    // Ресурсы
		    Движение.СуммаВычета			= 0;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// Создает и заполняет структуру, содержащую имена регистров накопления
// документа. В дальнейшем движения заносятся только по тем регистрам накопления, для которых в 
// данной процедуре заданы ключи
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамНакопления)

	СтруктураПроведенияПоРегистрамНакопления = Новый Структура();
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ЗанятыеШтатныеЕдиницыОрганизаций");
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ИспользованиеОтпусковРаботникамиОрганизаций");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, 
					СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров = "", ШтатныеЕдиницыПоСотрудникам = Неопределено)
	
	Если ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
							
		// Если документ нужно проводить по регистру, то для него есть ключ в структуре
		Режим = "ПоТабличнойЧастиРаботникиОрганизации";
		Если СтруктураПараметров.Свойство(Режим) Тогда
			ИмяРегистра = "ЗанятыеШтатныеЕдиницыОрганизаций";
			Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда
				
				Отбор = Новый Структура();
				Отбор.Вставить("Сотрудник", ВыборкаПоРаботникиОрганизации.Сотрудник);
				Отбор.Вставить("ПрежнееПодразделение", ВыборкаПоРаботникиОрганизации.ПрежнееПодразделение);
				Отбор.Вставить("ПрежняяДолжность", ВыборкаПоРаботникиОрганизации.ПрежняяДолжность);
				Отбор.Вставить("ПрежнийТарифныйРазряд", ВыборкаПоРаботникиОрганизации.ПрежнийТарифныйРазряд);
				
				СтрокаШтатныеЕдиницыПоСотрудникам = ШтатныеЕдиницыПоСотрудникам.НайтиСтроки(Отбор);

				Если СтрокаШтатныеЕдиницыПоСотрудникам.Количество() > 0 И СтрокаШтатныеЕдиницыПоСотрудникам[0].КоличествоСтавок > 0 Тогда
					
					Движение = Движения[ИмяРегистра].Добавить();
					
					// Свойства
					Движение.Период                 	= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
					Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
					
					// Измерения
					Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПрежнееПодразделение;
					Движение.Должность			    	= ВыборкаПоРаботникиОрганизации.ПрежняяДолжность;
					Движение.ТарифныйРазряд		    	= ВыборкаПоРаботникиОрганизации.ПрежнийТарифныйРазряд;
					
					// Ресурсы
					Движение.КоличествоСтавок         	= ВыборкаПоРаботникиОрганизации.ПрежняяСтавка;
					
					// Реквизиты
					Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник; 
					
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли; 
		
		Режим = "ПоТабличнойЧастиОтпуска";
		Если СтруктураПараметров.Свойство(Режим) Тогда
		  	ИмяРегистра = "ИспользованиеОтпусковРаботникамиОрганизаций";
			Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда

				Движение = Движения[ИмяРегистра].Добавить();
				
				// Свойства
				Движение.Период           		    = ВыборкаПоРаботникиОрганизации.ДатаУвольнения;

				// Измерения
				Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.Сотрудник			    	= ВыборкаПоРаботникиОрганизации.Сотрудник;
				Движение.ВидТрудовогоОтпуска	   	= ВыборкаПоРаботникиОрганизации.ВидОтпуска;

				// Ресурсы
				Движение.ИспользованоДней       	= ВыборкаПоРаботникиОрганизации.ДнейОтпуска; 

				// Реквизиты
				Движение.РабочийГодС       			= ВыборкаПоРаботникиОрганизации.РабочийГодС;
				Движение.РабочийГодПо       		= ВыборкаПоРаботникиОрганизации.РабочийГодПо;
				Движение.ВидСтроки       			= Перечисления.ИспользованиеОтпусковВидСтроки.КомпенсацияОтпуска;
				
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

// По строкам документа, в которых указано "Прекращать стандартные вычеты" удаляются
// записи из рег-ра ИПНПрименениеВычетов с "пустой" организацией (которые пишет док при проведении) - 
// тем самым восстанавливается то значение, которое было до проведения документа
Процедура УдалитьСтрокиВычетов()

	Запрос = Новый Запрос;
	НаборЗаписей = РегистрыСведений.ИПНПрименениеВычетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Использование = Истина;
	НаборЗаписей.Отбор.Физлицо.Использование = Истина;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УвольнениеИзОрганизацийРаботникиОрганизации.Физлицо,
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(УвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения, МЕСЯЦ), СЕКУНДА, 1) КАК ДатаПрекращения
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацийРаботникиОрганизации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПНПрименениеВычетов КАК ИПНПрименениеВычетов
	|		ПО УвольнениеИзОрганизацийРаботникиОрганизации.Физлицо = ИПНПрименениеВычетов.Физлицо
	|			И (УвольнениеИзОрганизацийРаботникиОрганизации.ПрекращатьСтандартныеВычеты)
	|			И (ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(УвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения, МЕСЯЦ), СЕКУНДА, 1) = ИПНПрименениеВычетов.Период)
	|			И (ИПНПрименениеВычетов.Налогоплательщик = &ОрганизацияНеУказана)
	|ГДЕ
	|	УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка = &Ссылка
	|	И ИПНПрименениеВычетов.Физлицо ЕСТЬ НЕ NULL ";
	Запрос.УстановитьПараметр("ОрганизацияНеУказана",Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Период.Значение = Выборка.ДатаПрекращения;
		НаборЗаписей.Отбор.Физлицо.Значение = Выборка.Физлицо;
	    НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры // УдалитьСтрокиВычетов

// По строкам документа, в которых указано "Прекращать стандартные вычеты" пишутся
// записи из рег-ра ИПНПрименениеВычетов с "пустой" организацией - 
// тем самым прекращается предоставление вычетов по организации, из которой увольняется 
// работник
Процедура ПрекратитьВычетыРаботникам()

	Запрос = Новый Запрос;
	НаборЗаписей = РегистрыСведений.ИПНПрименениеВычетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Использование = Истина;
	НаборЗаписей.Отбор.Физлицо.Использование = Истина;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УвольнениеИзОрганизацийРаботникиОрганизации.Физлицо,
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(УвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения, МЕСЯЦ), СЕКУНДА, 1) КАК Период,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПериодРегистра = ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(УвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения, МЕСЯЦ), СЕКУНДА, 1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьЗаписьВРегистре
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацийРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|								ДатыРегистра.НомерСтроки КАК НомерСтроки,
	|								ИПНПрименениеВычетов.Налогоплательщик КАК Налогоплательщик,
	|								ДатыРегистра.Период КАК ПериодРегистра
	|							ИЗ
	|								(ВЫБРАТЬ
	|									УвольнениеИзОрганизацийРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|									УвольнениеИзОрганизацийРаботникиОрганизации.Физлицо КАК Физлицо,
	|									МАКСИМУМ(ИПНПрименениеВычетов.Период) КАК Период
	|								ИЗ
	|									Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацийРаботникиОрганизации
	|
	|									ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПНПрименениеВычетов КАК ИПНПрименениеВычетов
	|									ПО УвольнениеИзОрганизацийРаботникиОрганизации.Физлицо = ИПНПрименениеВычетов.Физлицо
	|										И (ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(УвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения, МЕСЯЦ), СЕКУНДА, 1) >= ИПНПрименениеВычетов.Период)
	|								ГДЕ
	|									УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка = &Ссылка
	|									И УвольнениеИзОрганизацийРаботникиОрганизации.ПрекращатьСтандартныеВычеты
	|									И НЕ УвольнениеИзОрганизацийРаботникиОрганизации.Сторно
	|			
	|								СГРУППИРОВАТЬ ПО
	|									УвольнениеИзОрганизацийРаботникиОрганизации.НомерСтроки,
	|									УвольнениеИзОрганизацийРаботникиОрганизации.Физлицо) КАК ДатыРегистра
	|
	|								ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПНПрименениеВычетов КАК ИПНПрименениеВычетов
	|								ПО ДатыРегистра.Физлицо = ИПНПрименениеВычетов.Физлицо
	|									И ДатыРегистра.Период = ИПНПрименениеВычетов.Период) КАК ПрименениеВычетов
	|		ПО УвольнениеИзОрганизацийРаботникиОрганизации.НомерСтроки = ПрименениеВычетов.НомерСтроки
	|ГДЕ
	|	УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка = &Ссылка
	|	И УвольнениеИзОрганизацийРаботникиОрганизации.ПрекращатьСтандартныеВычеты
	|	И НЕ УвольнениеИзОрганизацийРаботникиОрганизации.Сторно";
	Запрос.УстановитьПараметр("ОрганизацияНеУказана",Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Период.Значение = Выборка.Период;
		НаборЗаписей.Отбор.Физлицо.Значение = Выборка.Физлицо;
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),Выборка);
	   	НаборЗаписей.Записать(Выборка.ЕстьЗаписьВРегистре);
	   	НаборЗаписей.Очистить();
	КонецЦикла;

КонецПроцедуры // ПрекратитьВычетыРаботникам

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ПриУстановкеНовогоНомера"
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)

	ОбщегоНазначения.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);

	// получить новый номер документа по совокупности кадровых документов
	ПроцедурыУправленияПерсоналом.ПриУстановкеНовогоНомераКадровогоДокумента(СтандартнаяОбработка, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, Номер, Префикс, Дата);

КонецПроцедуры // ПриУстановкеНовогоНомера()

Процедура ОбработкаПроведения(Отказ, Режим)
	//структура, содержащая имена регистров накопления по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);
			ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамНакопления);
			
			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, "ПоТабличнойЧастиРаботникиОрганизации");
         	ВыборкаПоСтрокамДокумента = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ШтатныеЕдиницыПоСотрудникам = ШтатныеЕдиницыПоСотрудникам(РезультатЗапросаПоРаботники.Выгрузить());
			
			// По табличной части "Работники организации"
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("ПоТабличнойЧастиРаботникиОрганизации");
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл 

				// выберем все виды строк запроса для текущей строки документа
				ВыборкаПоВидамСтрокЗапроса = ВыборкаПоСтрокамДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоВидамСтрокЗапроса.Следующий() Цикл 

					// Для каждого вида строки запроса свои проверки
					ВидСтрокиЗапроса = ВыборкаПоВидамСтрокЗапроса.ВидСтрокиЗапроса;
					ВыборкаСтрокЗапроса = ВыборкаПоВидамСтрокЗапроса.Выбрать();

					Если (ВидСтрокиЗапроса = "РабочиеМестаДоУвольнения") Тогда

						// проверим виды занятости работника в организации
						ПроверитьВидыЗанятостиРаботникаВОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ВыборкаСтрокЗапроса, Отказ, Заголовок);

					Иначе

						// обходим строки запроса, проверяем данные и формируем движения
						Пока ВыборкаСтрокЗапроса.Следующий() Цикл
							
							ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса , Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации, "ПоТабличнойЧастиРаботникиОрганизации");
							
							Если НЕ Отказ Тогда
								ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса, СтруктураПроведенияПоРегистрамСведений, УчетнаяПолитикаПоПерсоналуОрганизации);
								ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса, СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров, ШтатныеЕдиницыПоСотрудникам);
							КонецЕсли;
						КонецЦикла;					
					КонецЕсли;	
				КонецЦикла;
			КонецЦикла; 
			
			// По табличной части "Отпуска"
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, "ПоТабличнойЧастиОтпуска");
			ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать();

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("ПоТабличнойЧастиОтпуска");
			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации, "ПоТабличнойЧастиОтпуска");

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров);
				
				КонецЕсли;

			КонецЦикла;
			
			Если НЕ Отказ Тогда
				ПрекратитьВычетыРаботникам()
			КонецЕсли; 

		КонецЕсли; 

	КонецЕсли;

	УвольнениеИзОрганизацийПереопределяемый.ДобавитьДополнительныеДвижения(ЭтотОбъект, Отказ, Заголовок);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	Если Ссылка.Проведен Тогда // удалим строки, "закрывающие" вычеты
		УдалитьСтрокиВычетов()
	КонецЕсли;

	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
	// Механизм исправлений
	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПередЗаписью(Отказ, РежимЗаписи, РежимПроведения, ЭтотОбъект, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);

КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// проверим уникальность номера с точки зрения кадровой нумерации
	ПроцедурыУправленияПерсоналом.ПроверкаУникальностиНомераКадровогоДокумента(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, Номер, Дата, Ссылка);

	// Механизм исправлений
	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПриЗаписи(Отказ, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипОснования = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.Физлицо,
		|	СотрудникиОрганизаций.ТекущаяСтруктурнаяЕдиница КАК Организация,
		|	СотрудникиОрганизаций.ВидДоговора
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
		Запрос.УстановитьПараметр("Сотрудник",	ДанныеЗаполнения);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если Выборка.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда
				ИЛИ Выборка.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Лицензионный 
					ИЛИ Выборка.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
				Возврат;
			КонецЕсли;
			
			НоваяСтрока = РаботникиОрганизации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			Организация = Выборка.Организация;
			НоваяСтрока.ДатаУвольнения	= ОбщегоНазначения.ПолучитьРабочуюДату();
			Рассчитать(НоваяСтрока);
		КонецЕсли;
		ДокументОснование = ДанныеЗаполнения;
	ИначеЕсли ТипОснования = Тип("Структура") и ДанныеЗаполнения.Свойство("ОбъектЗадачи") Тогда
		ОбъектЗадачи = ДанныеЗаполнения.ОбъектЗадачи;
		НоваяСтрока = РаботникиОрганизации.Добавить();
		НоваяСтрока.Сотрудник	= ОбъектЗадачи;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбъектЗадачи);
		НоваяСтрока.ДатаУвольнения	= ДанныеЗаполнения.ДатаЗадачи;
		Рассчитать(НоваяСтрока);
		ДокументОснование = ОбъектЗадачи;
	КонецЕсли;
	
	
КонецПроцедуры

Функция ШтатныеЕдиницыПоСотрудникам(РаботникиОрганизации) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РаботникиОрганизации", РаботникиОрганизации);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	РаботникиОрганизации.ПрежнееПодразделение,
	|	РаботникиОрганизации.ПрежняяДолжность,
	|	РаботникиОрганизации.ПрежнийТарифныйРазряд,
	|	РаботникиОрганизации.Сотрудник
	|ПОМЕСТИТЬ РаботникиОрганизации
	|ИЗ
	|	&РаботникиОрганизации КАК РаботникиОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР
	|			КОГДА ЗанятыеШтатныеЕдиницыОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ * ЗанятыеШтатныеЕдиницыОрганизаций.КоличествоСтавок) КАК КоличествоСтавок,
	|	РаботникиОрганизации.ПрежнееПодразделение,
	|	РаботникиОрганизации.ПрежняяДолжность,
	|	РаботникиОрганизации.ПрежнийТарифныйРазряд,
	|	РаботникиОрганизации.Сотрудник
	|ИЗ
	|	РаботникиОрганизации КАК РаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗанятыеШтатныеЕдиницыОрганизаций КАК ЗанятыеШтатныеЕдиницыОрганизаций
	|		ПО РаботникиОрганизации.ПрежнееПодразделение = ЗанятыеШтатныеЕдиницыОрганизаций.ПодразделениеОрганизации
	|			И РаботникиОрганизации.ПрежняяДолжность = ЗанятыеШтатныеЕдиницыОрганизаций.Должность
	|			И РаботникиОрганизации.ПрежнийТарифныйРазряд = ЗанятыеШтатныеЕдиницыОрганизаций.ТарифныйРазряд
	|			И РаботникиОрганизации.Сотрудник = ЗанятыеШтатныеЕдиницыОрганизаций.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизации.ПрежнееПодразделение,
	|	РаботникиОрганизации.ПрежняяДолжность,
	|	РаботникиОрганизации.ПрежнийТарифныйРазряд,
	|	РаботникиОрганизации.Сотрудник";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат  Результат;

КонецФункции

//
Функция ПечатьОбходногоЛиста(ИмяМакета)
	////
	//для Каждого Сотрудник Из РаботникиОрганизации Цикл
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УвольнениеИзОрганизации_ОбходнойЛист";
	//ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	//ТабДокумент.ПолеСлева = 0;
	//ТабДокумент.ПолеСправа = 0;
	
	для Каждого Сотрудник Из РаботникиОрганизации Цикл
	
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка");
	ОбластьШапка.Параметры.ФИОРаботника = Сотрудник.Физлицо;
	ТабДокумент.Вывести(ОбластьШапка);
	
	ОбластьШапкиТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьШапкиТаблицы);
	
	ОбластьТаблица = Макет.ПолучитьОбласть("Таблица");
	НомерТаблицы = 0; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтветственныеЛицаОбходногоЛистаСрезПоследних.Период КАК Период,
	|	ОтветственныеЛицаОбходногоЛистаСрезПоследних.Подразделение,
	|	ОтветственныеЛицаОбходногоЛистаСрезПоследних.Ответственный
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОбходногоЛиста.СрезПоследних КАК ОтветственныеЛицаОбходногоЛистаСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НомерТаблицы = НомерТаблицы + 1; 
		ОбластьТаблица.Параметры.Номер = НомерТаблицы;
		ОбластьТаблица.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
		
		ТабДокумент.Вывести(ОбластьТаблица);
		
	КонецЦикла;
ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

КонецЦикла;

	Возврат ТабДокумент;
    
КонецФункции

/////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ  

мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();

мДлинаСуток = 86400;
мВосстанавливатьДвижения = Ложь;
