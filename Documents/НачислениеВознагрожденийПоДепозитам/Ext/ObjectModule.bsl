// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;
Перем мПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль;

#Если Клиент Тогда
	
	
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
#КонецЕсли

// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Макет","График");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоГрафику - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуДепозитов(РезультатЗапросаПоГрафику, СтруктураШапкиДокумента)

	ТаблицаПоДепозитам = РезультатЗапросаПоГрафику.Выгрузить();

	Возврат ТаблицаПоДепозитам;

КонецФункции // ПодготовитьТаблицуУслуг()


// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоДепозитам, Отказ, Заголовок)
	ПроводкиБУ = Движения.Типовой;
	ПроводкиНУ = Движения.Налоговый;
	ПроводкиБУ.Записывать = Истина;
	ПроводкиНУ.Записывать = Истина;
	ДатаДока = СтруктураШапкиДокумента.Дата;
	
	Для Каждого СтрокаТЗ ИЗ ТаблицаПоДепозитам Цикл
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		//
			
		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаВознагрожденийБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,СтрокаТЗ.БанковскийСчет);
		
		Проводка.СчетКт 	 = СтруктураШапкиДокумента.СчетУчетаДоходовБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,           СтруктураШапкиДокумента.СубконтоДоходовБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2,           СтруктураШапкиДокумента.СубконтоДоходовБУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3,           СтруктураШапкиДокумента.СубконтоДоходовБУ3);			
		
		Проводка.Содержание = "Начислены % по депозиту";
		
		Проводка.ВалютаДт        = СтрокаТЗ.Валюта;
		Проводка.ВалютнаяСуммаДт = СтрокаТЗ.ВалСуммаВознагрождения;
		
		Проводка.Сумма = СтрокаТЗ.СуммаВознагрождения;
		
		Если СтрокаТЗ.СуммаКПН+СтрокаТЗ.ВалСуммаКПН <> 0 Тогда
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			//
				
			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаКПНБУ;
  			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,Справочники.НалогиСборыОтчисления.НайтиПоНаименованию("ИндивидуальныйПодоходныйНалогСЮридическихЛиц"));
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			
			Проводка.СчетКт 	 = СтруктураШапкиДокумента.СчетУчетаВознагрожденийБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,  СтрокаТЗ.БанковскийСчет);
			
			Проводка.Содержание = "Начислен ИПН с юр.лиц";
			
			Проводка.ВалютаКт        = СтрокаТЗ.Валюта;
			Проводка.ВалютнаяСуммаКт = СтрокаТЗ.ВалСуммаКПН;
			
			Проводка.Сумма = СтрокаТЗ.СуммаКПН;
		Конецесли;
		
		// проводки по НУ
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда				
			Проводка = ПроводкиНУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			//
			
			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаВознагрожденийНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,СтрокаТЗ.БанковскийСчет);
			
			Проводка.СчетКт 	 = СтруктураШапкиДокумента.СчетУчетаДоходовНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,           СтруктураШапкиДокумента.СубконтоДоходовБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2,           СтруктураШапкиДокумента.СубконтоДоходовБУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3,           СтруктураШапкиДокумента.СубконтоДоходовБУ3);			
			
			Проводка.Содержание = "Начислены % по депозиту";
			
			Проводка.Сумма = СтрокаТЗ.СуммаВознагрождения;
			
			Если СтрокаТЗ.СуммаКПН+СтрокаТЗ.ВалСуммаКПН <> 0 Тогда
				Проводка = ПроводкиНУ.Добавить();
				
				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				//
				
				Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаКПННУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,Справочники.НалогиСборыОтчисления.НайтиПоНаименованию("ИндивидуальныйПодоходныйНалогСЮридическихЛиц"));
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
				Проводка.СчетКт 	 = СтруктураШапкиДокумента.СчетУчетаВознагрожденийНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,  СтрокаТЗ.БанковскийСчет);
				
				Проводка.Содержание = "Начислен ИПН с юр.лиц";
				
				Проводка.Сумма = СтрокаТЗ.СуммаКПН;
			Конецесли;
		Конецесли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
		
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("СчетУчета"  , "СчетУчета");
	СтруктураПолей.Вставить("Банковскийсчет"    , "Банковскийсчет");
	СтруктураПолей.Вставить("Валюта"        , "Валюта");
	СтруктураПолей.Вставить("ВалСуммаВознагрождения"    , "ВалСуммаВознагрождения");
	СтруктураПолей.Вставить("ВалСуммаКПН"         , "ВалСуммаКПН");
	СтруктураПолей.Вставить("СуммаВознагрождения"     , "СуммаВознагрождения");
	СтруктураПолей.Вставить("СуммаКПН"     , "СуммаКПН");
	
	РезультатЗапросаПоГрафику = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "График", СтруктураПолей);
	
	ТаблицаПоДепозитам = ПодготовитьТаблицуДепозитов(РезультатЗапросаПоГрафику, СтруктураШапкиДокумента);
			
	// Движения по документу
	Если Не Отказ Тогда

			ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
						ТаблицаПоДепозитам, Отказ, Заголовок);
	КонецЕсли;

	
КонецПроцедуры // ОбработкаПроведения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры // ПередЗаписью

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,РучнаяКорректировка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
