////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	//так как нет печатных форм у документа, по умолчанию
	//ТабДокумент = Неопределено
	ТабДокумент = Неопределено;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;  

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	мСтрокаРеквизитыБухУчета =  "
								|ОС.СрокПолезногоИспользованияБУ,
								|ОС.СрокИспользованияДляВычисленияАмортизацииБУ,
								|ОС.ОбъемПродукцииРаботБУ,
								|ОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,
								|ОС.СтоимостьДляВычисленияАмортизацииБУ,
								|ОС.КоэффициентАмортизацииБУ,
								|ОС.КоэффициентУскоренияБУ";

	мСтрокаРеквизитыНалУчета =  "";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента,Отказ, Заголовок)


	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Проверим на виды операций, которые не будут полностью отработаны в данном документе
	Если СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету 
	 или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.Передача
	 или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.Списание тогда

		ОбщегоНазначения.ОшибкаПриПроведении("События с основными средствами с видом <"+строка(СтруктураШапкиДокумента.ВидСобытияОС)+">
		|не будут полноценно отражены данным документом (учетное состояние ОС не изменится)!",,Заголовок);

	КонецЕсли;


КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОС(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство");

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС);

	ДатаДок = СтруктураШапкиДокумента.Дата;
	
	ПараметрыАмортизацииБУ = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
	
	Для Каждого СтрокаТЧ из ТаблицаПоОС Цикл
		
		СтрокаДвижений = ПараметрыАмортизацииБУ.Добавить();
		
		СтрокаДвижений.Период           = ДатаДок;
		СтрокаДвижений.ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
		СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
		
		СтрокаДвижений.СтруктурноеПодразделение					   = СтруктураШапкиДокумента.СтруктурноеПодразделение;
		СтрокаДвижений.СрокПолезногоИспользования                  = СтрокаТЧ.СрокПолезногоИспользованияБУ;
		СтрокаДвижений.ОбъемПродукцииРабот                         = СтрокаТЧ.ОбъемПродукцииРаботБУ;
		СтрокаДвижений.СрокИспользованияДляВычисленияАмортизации   = СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииБУ;
		СтрокаДвижений.СтоимостьДляВычисленияАмортизации           = СтрокаТЧ.СтоимостьДляВычисленияАмортизацииБУ;
		СтрокаДвижений.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаТЧ.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ;
		СтрокаДвижений.КоэффициентАмортизации                      = СтрокаТЧ.КоэффициентАмортизацииБУ;
		СтрокаДвижений.КоэффициентУскорения                        = СтрокаТЧ.КоэффициентУскоренияБУ;
		СтрокаДвижений.ЛиквидационнаяСтоимость					   = СтрокаТЧ.ЛиквидационнаяСтоимостьБУ;
			
	КонецЦикла;
	
	ОперацииОС = Движения.СобытияОСОрганизаций;

	Для Каждого СтрокаТЧ из ТаблицаПоОС Цикл

		СтрокаДвижений = ОперацииОС.Добавить();

		СтрокаДвижений.Период            		= ДатаДок;
		СтрокаДвижений.ОсновноеСредство  		= СтрокаТЧ.ОсновноеСредство;
		СтрокаДвижений.Организация       		= СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
		СтрокаДвижений.Событие           		= СтруктураШапкиДокумента.СобытиеОС;
		СтрокаДвижений.НазваниеДокумента 		= Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		СтрокаДвижений.НомерДокумента    		= СтруктураШапкиДокумента.Номер;

	КонецЦикла;

КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДополнитьСтруктуруПолейТабличнойЧастиОСРегл(СтруктураШапкиДокумента, СтруктураПолей)

	СтруктураПолей.Вставить("СрокПолезногоИспользованияБУ"                 , "СрокПолезногоИспользованияБУ");
	СтруктураПолей.Вставить("СрокИспользованияДляВычисленияАмортизацииБУ"  , "СрокИспользованияДляВычисленияАмортизацииБУ");
	СтруктураПолей.Вставить("ОбъемПродукцииРаботБУ"                        , "ОбъемПродукцииРаботБУ");
	СтруктураПолей.Вставить("ОбъемПродукцииРаботДляВычисленияАмортизацииБУ", "ОбъемПродукцииРаботДляВычисленияАмортизацииБУ");
	СтруктураПолей.Вставить("СтоимостьДляВычисленияАмортизацииБУ"          , "СтоимостьДляВычисленияАмортизацииБУ");
	СтруктураПолей.Вставить("ЛиквидационнаяСтоимостьБУ"					   , "ЛиквидационнаяСтоимостьБУ");
	СтруктураПолей.Вставить("КоэффициентАмортизацииБУ"                     , "КоэффициентАмортизацииБУ");
	СтруктураПолей.Вставить("КоэффициентУскоренияБУ"                       , "КоэффициентУскоренияБУ");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)

	Заголовок = "";

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Сформируем структуру табличной части
	СтруктураПолей = Новый Структура("ОсновноеСредство" , "ОсновноеСредство");
	СтруктураПолей.Вставить("НомерСтроки", "НомерСтроки");

	ДополнитьСтруктуруПолейТабличнойЧастиОСРегл(СтруктураШапкиДокумента,СтруктураПолей);

	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();

	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);

	ПроверитьЗаполнениеТабличнойЧастиОС(Отказ, Заголовок);

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС);
	КонецЕсли;

КонецПроцедуры

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();