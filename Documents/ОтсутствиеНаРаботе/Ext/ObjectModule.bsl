Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Заполняет табличную часть документа отпусками по графику отпусков
//
// Параметры
//  ДатаНачала, ДатаОкончания – даты начала и окончания 
//								просмотра графика отпусков	
//                                                                           
Процедура Автозаполнение(ДатаНачала, ДатаОкончания) Экспорт
	
	// Описание текста запроса:
	// 1. Выборка "НачалаОтпусков": 
	//		Выбираются строки из регистра СобытийныйПланЗанятостиФизлиц, соответствующие 
	//		началу предполагаемого отпуска.
	//
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НачалаОтпусков.ФизЛицо,
	|	НачалаОтпусков.Период КАК ДатаНачала,
	|	НачалаОтпусков.ДатаОкончания,
	|	Сотрудники.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК НачалаОтпусков
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СписокСотрудников.Сотрудник КАК Сотрудник,
	|			СписокСотрудников.Физлицо КАК Физлицо
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
	|				РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
	|				1 КАК Приоритет
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)) КАК РаботникиОсновноеМесто
	|			ГДЕ
	|				РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиОсновноеМесто.Сотрудник.Физлицо
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				МАКСИМУМ(РаботникиСовместительство.Сотрудник),
	|				РаботникиСовместительство.Сотрудник.Физлицо,
	|				2
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)) КАК РаботникиСовместительство
	|			ГДЕ
	|				РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиСовместительство.Сотрудник.Физлицо
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				МАКСИМУМ(СотрудникиДУ.Ссылка),
	|				СотрудникиДУ.Физлицо,
	|				ВЫБОР
	|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
	|						ТОГДА 3
	|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|						ТОГДА 4
	|					ИНАЧЕ 5
	|				КОНЕЦ
	|			ИЗ
	|				Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СотрудникиДУ.Физлицо,
	|				ВЫБОР
	|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
	|						ТОГДА 3
	|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|						ТОГДА 4
	|					ИНАЧЕ 5
	|				КОНЕЦ) КАК СписокСотрудников
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					СписокФизическихЛиц.Физлицо КАК Физлицо,
	|					МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
	|				ИЗ
	|					(ВЫБРАТЬ
	|						РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
	|						1 КАК Приоритет
	|					ИЗ
	|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|								&ДатаАктуальности,
	|								Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|									И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)) КАК РаботникиОсновноеМесто
	|					ГДЕ
	|						РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					
	|					ОБЪЕДИНИТЬ
	|					
	|					ВЫБРАТЬ
	|						РаботникиСовместительство.Сотрудник.Физлицо,
	|						2
	|					ИЗ
	|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|								&ДатаАктуальности,
	|								Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|									И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)) КАК РаботникиСовместительство
	|					ГДЕ
	|						РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					
	|					ОБЪЕДИНИТЬ
	|					
	|					ВЫБРАТЬ
	|						СотрудникиДУ.Физлицо,
	|						ВЫБОР
	|							КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
	|								ТОГДА 3
	|							КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|								ТОГДА 4
	|							ИНАЧЕ 5
	|						КОНЕЦ
	|					ИЗ
	|						Справочник.СотрудникиОрганизаций КАК СотрудникиДУ) КАК СписокФизическихЛиц
	|				
	|				СГРУППИРОВАТЬ ПО
	|					СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
	|				ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
	|					И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет) КАК Сотрудники
	|		ПО НачалаОтпусков.ФизЛицо = Сотрудники.Физлицо
	|
	|ГДЕ
	|	НачалаОтпусков.Период >= &ДатаНачала И
	|	НачалаОтпусков.Период <= &ДатаОкончания И
	|	НачалаОтпусков.Состояние = &Отпуск");
	
	Запрос.УстановитьПараметр("ДатаНачала", 	  ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",    ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаАктуальности", Дата);

	Запрос.УстановитьПараметр("Отпуск", Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный);
	
	ТаблицаФизЛиц = Запрос.Выполнить().Выгрузить();
	ТаблицаФизЛиц.Колонки.Добавить("ПричинаОтсутствия");
	ТаблицаФизЛиц.ЗаполнитьЗначения(Перечисления.ПричиныОтсутствияНаРаботе.ОтпускЕжегодный, "ПричинаОтсутствия");
	Работники.Загрузить(ТаблицаФизЛиц);
	
КонецПроцедуры // Автозаполнение()

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если  ИмяМакета = "Диаграмма" Тогда

		// при помощи запроса к т.ч. документа выясним, зарегистрированы ли документом отпуска,
		// и узнаем период времени, затронутый этими отпусками
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МАКСИМУМ(ОтсутствиеНаРаботеРаботники.ДатаОкончания) КАК ДатаКон,
		|	МИНИМУМ(ОтсутствиеНаРаботеРаботники.ДатаНачала) КАК ДатаНач,
		|	КОЛИЧЕСТВО(ОтсутствиеНаРаботеРаботники.ПричинаОтсутствия) Как РаботниковВОтпуске
		|ИЗ
		|	Документ.ОтсутствиеНаРаботе.Работники КАК ОтсутствиеНаРаботеРаботники
		|
		|ГДЕ
		|	(ОтсутствиеНаРаботеРаботники.ПричинаОтсутствия = &ПричинаОтсутствия1 Или 
		|   ОтсутствиеНаРаботеРаботники.ПричинаОтсутствия = &ПричинаОтсутствия2) И
		|	ОтсутствиеНаРаботеРаботники.Ссылка = &Ссылка");

		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("ПричинаОтсутствия1", Перечисления.ПричиныОтсутствияНаРаботе.ОтпускЕжегодный);
		Запрос.УстановитьПараметр("ПричинаОтсутствия2", Перечисления.ПричиныОтсутствияНаРаботе.ОтгулВСчетЕжегодногоОтпуска);
	

		Выборка = Запрос.Выполнить().Выбрать();	 
		Если Выборка.Следующий() Тогда
			Если Выборка.РаботниковВОтпуске > 0 Тогда // будем строить отчет 
				
				Отчет = Отчеты.Отпуска.Создать();
				Форма = Отчет.ПолучитьФорму();
				ЗначениеНастройкиПользователя = ТиповыеОтчеты.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(Отчет, Форма);
				ЗначениеНастройкиПользователя.ВыводитьДиаграммуГанта = Истина;
				ЗначениеНастройкиПользователя.ВыводитьЗаголовокОтчета = Истина;
				Отчет.ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(ЗначениеНастройкиПользователя);
				ТиповыеОтчеты.УстановитьПараметр(Отчет.КомпоновщикНастроек, "НачалоПериода", ?(НЕ ЗначениеЗаполнено(Выборка.ДатаНач),НачалоГода(РабочаяДата),НачалоМесяца(Выборка.ДатаНач)));
				ТиповыеОтчеты.УстановитьПараметр(Отчет.КомпоновщикНастроек, "КонецПериода", ?(НЕ ЗначениеЗаполнено(Выборка.ДатаКон),КонецГода(РабочаяДата),КонецМесяца(Выборка.ДатаКон)));
				ТиповыеОтчеты.ДобавитьОтбор(Отчет.КомпоновщикНастроек, "Регистратор", Ссылка);
				ТабДокумент = Новый ТабличныйДокумент;
				Отчет.СформироватьОтчет(ТабДокумент);
				УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним + " (диаграмма)"));

			Иначе
				Предупреждение("В документе не зарегистрировано ни одного отпуска!");
			КонецЕсли;
		Иначе
            Предупреждение("Ошибка исполнения запроса к т.ч.");
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Диаграмма","Печать");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|Выбрать 
	|	Дата, 
	| 	Ссылка 
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Работники" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботники(Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));

	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвижений": 
	// 1. Выборка "ТЧРаботники": 
	//		Выбираются строки документа.  
	// 2. Выборка "ДанныеПоРаботникуДоНазначения": 
	//		Для каждой строки ТЧРаботники выполняем срез по регистру РегистрСведенийРаботники на дату ДатаНачала
	//		для выполнения движений и проверки "Работает ли работник на дату перемещения"
	//		(Использует данные выборки "ДатыПоследнегоДвиженияРаботника")
	// 3. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки, имеющие пересекающийся период действия
	//
	// Вторая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	// 1. Выборка "ТЧРаботники":
	//		Выбираются строки документа 
	// 2. Выборка "РегистрСведенийРаботники":
	//		Для каждой строки ТЧРаботники ищем движения по регистру РегистрСведенийРаботники за период [ДатаНачала, ДатаОкончания]
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	""ДанныеДляДвижений"" КАК ВидСтрокиЗапроса,
	               |	ТЧРаботники.НомерСтроки КАК НомерСтроки,
	               |	ТЧРаботники.ФизЛицо,
	               |	ТЧРаботники.ФизЛицо.Наименование КАК ФизЛицоНаименование,
	               |	ТЧРаботники.ДатаНачала,
	               |	ТЧРаботники.ДатаОкончания,
	               |	ТЧРаботники.ПроизошедшееСобытие,
	               |	ТЧРаботники.ОсвобождатьСтавку,
	               |	ТЧРаботники.ПричинаОтсутствия,
	               |	ДанныеПоРаботникуДоНазначения.Подразделение КАК ПрежнееПодразделение,
	               |	ДанныеПоРаботникуДоНазначения.Должность КАК ПрежняяДолжность,
	               |	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ПрежняяСтавка,
	               |	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	               |	NULL КАК КонфликтныйДокумент
	               |ИЗ
	               |	Документ.ОтсутствиеНаРаботе.Работники КАК ТЧРаботники
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ТЧРаботники.НомерСтроки КАК НомерСтроки,
	               |			МАКСИМУМ(РегистрСведенийРаботники.Период) КАК ДатаДвижения
	               |		ИЗ
	               |			Документ.ОтсутствиеНаРаботе.Работники КАК ТЧРаботники
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК РегистрСведенийРаботники
	               |				ПО РегистрСведенийРаботники.ФизЛицо = ТЧРаботники.ФизЛицо И РегистрСведенийРаботники.Период <= ТЧРаботники.ДатаНачала
	               |		
	               |		ГДЕ
	               |			ТЧРаботники.Ссылка = &ДокументСсылка
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ТЧРаботники.НомерСтроки) КАК ДатыПоследнегоДвиженияРаботника
	               |		ПО ДатыПоследнегоДвиженияРаботника.НомерСтроки = ТЧРаботники.НомерСтроки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК ДанныеПоРаботникуДоНазначения
	               |		ПО ДанныеПоРаботникуДоНазначения.ФизЛицо = ТЧРаботники.ФизЛицо И ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнегоДвиженияРаботника.ДатаДвижения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ТЧРаботники.НомерСтроки КАК НомерСтроки,
	               |			МИНИМУМ(ТЧРаботники2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	               |		ИЗ
	               |			Документ.ОтсутствиеНаРаботе.Работники КАК ТЧРаботники
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтсутствиеНаРаботе.Работники КАК ТЧРаботники2
	               |				ПО (ТЧРаботники2.Ссылка = &ДокументСсылка) И ТЧРаботники.ФизЛицо = ТЧРаботники2.ФизЛицо И ТЧРаботники.НомерСтроки <> ТЧРаботники2.НомерСтроки И ТЧРаботники.ДатаНачала <= ТЧРаботники2.ДатаНачала И (ТЧРаботники.ДатаОкончания = &ПустаяДата ИЛИ ТЧРаботники.ПроизошедшееСобытие = ЛОЖЬ ИЛИ ДобавитьКДате(ТЧРаботники.ДатаОкончания, День, 1) >= ТЧРаботники2.ДатаНачала)
	               |		
	               |		ГДЕ
	               |			ТЧРаботники.Ссылка = &ДокументСсылка
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ТЧРаботники.НомерСтроки) КАК ПересекающиесяСтроки
	               |		ПО ТЧРаботники.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	               |
	               |ГДЕ
	               |	ТЧРаботники.Ссылка = &ДокументСсылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	""КонфликтныйДокумент"",
	               |	ТЧРаботники.НомерСтроки,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	СостояниеРаботников.Регистратор
	               |ИЗ
	               |	Документ.ОтсутствиеНаРаботе.Работники КАК ТЧРаботники
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботников КАК СостояниеРаботников
	               |		ПО СостояниеРаботников.ФизЛицо = ТЧРаботники.ФизЛицо И (ТЧРаботники.ПроизошедшееСобытие = ИСТИНА И СостояниеРаботников.Период МЕЖДУ ТЧРаботники.ДатаНачала И ДобавитьКДате(ТЧРаботники.ДатаОкончания, День, 1) ИЛИ СостояниеРаботников.Период = ТЧРаботники.ДатаНачала)
	               |
	               |ГДЕ
	               |	ТЧРаботники.Ссылка = &ДокументСсылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
				   
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботники()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 		 - флаг отказа в проведении,
//	Заголовок	 - Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Работники" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам. 
//  Отказ        - флаг отказа в проведении,
//	Заголовок	 - Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Сотрудники"": ";

	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвижений" Тогда

		// ФизЛицо
		ЕстьФизЛицо = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо);
		Если НЕ ЕстьФизЛицо Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
		КонецЕсли;

		// ДатаНачала
		ЕстьДатаНачала = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала);
		Если НЕ ЕстьДатаНачала Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала отсутствия на работе!", Отказ, Заголовок);
		КонецЕсли;

		// ПричинаОтсутствия
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПричинаОтсутствия) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана причина отсутствия!", Отказ, Заголовок);
		КонецЕсли;

		Если ЕстьФизЛицо И ЕстьДатаНачала Тогда

			Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) И ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата начала отсутствия не может превышать дату окончания!", Отказ, Заголовок);
			КонецЕсли;

			// Проверка: ранее работник должен быть принят на работу
			Если ВыборкаПоСтрокамДокумента.ПрежняяСтавка = NULL Тогда
				СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.ФизЛицоНаименование + " еще не принят на работу!";
				Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
			ИначеЕсли ВыборкаПоСтрокамДокумента.ПрежняяСтавка = 0 Тогда	
				СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.ФизЛицоНаименование + " уже уволен!";
				Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
			КонецЕсли; 

			// Проверка: противоречие другой строке документа
			Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
				СтрокаСообщениеОбОшибке = "период отсутствия пересекается с периодом строки " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + "!"; 
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			КонецЕсли;	

		КонецЕсли;

	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда	

		// противоречие другим кадровым приказам
		СтрокаСообщениеОбОшибке = "возникает противоречие кадровому приказу " + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);

	КонецЕсли;	

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботника()

// Создает и заполняет структуру, содержащую имена регистров сведений 
// по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                                           по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	
	СтруктураПроведенияПоРегистрамСведений.Вставить("СостояниеРаботников");
	СтруктураПроведенияПоРегистрамСведений.Вставить("НамеченныеСобытияПоПерсоналу");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники,  
		  СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "")

	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "СостояниеРаботников";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
		
        Причина = ВыборкаПоРаботники.ПричинаОтсутствия;
		
		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период                     = ВыборкаПоРаботники.ДатаНачала;
		
		// Измерения
		Движение.ФизЛицо                    = ВыборкаПоРаботники.ФизЛицо;

		// Ресурсы
		// здесь принято следующее соглашение - на каждую причину отсутствия обязательно есть одноименное состояние работника
		Если  Причина = Перечисления.ПричиныОтсутствияНаРаботе.ОтгулВСчетЕжегодногоОтпуска Тогда
			Движение.Состояние                  = Перечисления.СостоянияРаботника.ОтпускЕжегодный;
		Иначе
			Движение.Состояние                  = Перечисления.СостоянияРаботника[Причина.Метаданные().ЗначенияПеречисления[Перечисления[Причина.Метаданные().Имя].Индекс(Причина)].Имя];
		КонецЕсли;
		
	КонецЕсли; 

	Если ЗначениеЗаполнено(ВыборкаПоРаботники.ДатаОкончания) Тогда

		Если ВыборкаПоРаботники.ПроизошедшееСобытие Тогда

			ИмяРегистра = "СостояниеРаботников";
			Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда

				Движение = Движения[ИмяРегистра].Добавить();

				// Свойства
				Движение.Период                     = ВыборкаПоРаботники.ДатаОкончания + мДлинаСуток;
	
				// Измерения
				Движение.ФизЛицо                    = ВыборкаПоРаботники.ФизЛицо;

				// Ресурсы
				Движение.Состояние                  = Перечисления.СостоянияРаботника.Работает;
					
			КонецЕсли; 
			
		Иначе

			ИмяРегистра = "НамеченныеСобытияПоПерсоналу";
			Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда

				Движение = Движения[ИмяРегистра].Добавить();

				// Свойства
				Движение.Период                     = ВыборкаПоРаботники.ДатаОкончания + мДлинаСуток;
		
				// Измерения
				Движение.ФизЛицо                    = ВыборкаПоРаботники.ФизЛицо;
				Движение.ДатаИзменения              = ВыборкаПоРаботники.ДатаОкончания + мДлинаСуток;
				// здесь принято следующее соглашение - на каждую причину отсутствия обязательно есть одноименное планируемое изменение работника			
				Движение.ПланируемоеСобытие         = Перечисления.НамеченныеСобытияПоПерсоналу[Причина.Метаданные().ЗначенияПеречисления[Перечисления[Причина.Метаданные().Имя].Индекс(Причина)].Имя];
				Движение.ЗаниматьСтавку             = ВыборкаПоРаботники.ОсвобождатьСтавку

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// Создает и заполняет структуру, содержащую имена регистров накопления
// документа. В дальнейшем движения заносятся только по тем регистрам накопления, для которых в 
// данной процедуре заданы ключи.
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                 накопления по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(СтруктураПроведенияПоРегистрамНакопления)

	СтруктураПроведенияПоРегистрамНакопления = Новый Структура();
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ЗанятыеРабочиеМеста");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, 
		  СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров = "")

    // Если документ нужно проводить по регистру, то для него есть ключ в структуре
    ИмяРегистра = "ЗанятыеРабочиеМеста";
	Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) и ВыборкаПоРаботники.ОсвобождатьСтавку Тогда

		Должность							= ВыборкаПоРаботники.ПрежняяДолжность;
		Подразделение				= ВыборкаПоРаботники.ПрежнееПодразделение;
		ЗанимаемаяСтавка					= ВыборкаПоРаботники.ПрежняяСтавка;
		
		// освободим занимаемые ранее ставки
		Движение = Движения[ИмяРегистра].Добавить();
		
		// Свойства
		Движение.Период                 = ВыборкаПоРаботники.ДатаНачала;
		Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
	
		// Измерения
		Движение.Подразделение	= Подразделение;
		Движение.Должность              = Должность;

		// Ресурсы
		Движение.Количество		= ЗанимаемаяСтавка; 

		Если ЗначениеЗаполнено(ВыборкаПоРаботники.ДатаОкончания) 
			И ВыборкаПоРаботники.ПроизошедшееСобытие Тогда
			
			// по прежнему месту работы займем временно освобожденные ставки
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период                = ВыборкаПоРаботники.ДатаОкончания + мДлинаСуток;
			Движение.ВидДвижения		   = ВидДвиженияНакопления.Приход;

	 		// Измерения
			Движение.Подразделение	= Подразделение;
			Движение.Должность              = Должность;

			// Ресурсы
			Движение.Количество      = ЗанимаемаяСтавка; 

 		КонецЕсли;

   КонецЕсли; 

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров накопления по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);	

		// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(СтруктураПроведенияПоРегистрамНакопления);
			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(СтруктураПроведенияПоРегистрамСведений);

			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботники(Режим);
			ВыборкаПоРаботники = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоРаботники.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоРаботники, Отказ, Заголовок);
				
				Если НЕ Отказ И ВыборкаПоРаботники.ВидСтрокиЗапроса = "ДанныеДляДвижений" Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента,ВыборкаПоРаботники, СтруктураПроведенияПоРегистрамНакопления);
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, СтруктураПроведенияПоРегистрамСведений);
					
 				КонецЕсли;

			КонецЦикла;

		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(Работники);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
КонецПроцедуры

мДлинаСуток = 86400;

