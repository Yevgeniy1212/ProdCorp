////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет документ по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	 ОбъявлениеОПроведенииЗакупок 	= Основание.Ссылка;
	 Организация 					= Основание.Организация;
	 Дата 							= ТекущаяДата();
 КонецПроцедуры //ЗаполнитьПоДокументуОснования()
 
// Функция формирует список критериев по объявлению
//
// Возвращаемое значение:
//  Массив - список критериев
//  
Функция СформироватьСписокКритериев() Экспорт 
	
	 Запрос = Новый Запрос;
	 Запрос.УстановитьПараметр("ОбъявлениеОПроведенииЗакупок",ОбъявлениеОПроведенииЗакупок);
	 Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	Критерии.КритерийПредоставленияУсловныхСкидок КАК Критерий,
	                |	Критерии.НомерСтроки
	                |ИЗ
	                |	Документ.гз_ОбъявлениеОПроведенииГосударственныхЗакупок.Критерии КАК Критерии
	                |ГДЕ
	                |	Критерии.Ссылка = &ОбъявлениеОПроведенииЗакупок
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Критерии.НомерСтроки";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Критерий");
	
КонецФункции // СформироватьСписокКритериев()

// Функция формирует запрос по объявлению
//
// Возвращаемое значение:
//  Массив - результат запроса по объявлению
//  
Функция СформироватьЗапросПоОбъявлению() Экспорт 
	
	 Запрос = Новый Запрос;
	 Запрос.УстановитьПараметр("ОбъявлениеОПроведенииЗакупок",ОбъявлениеОПроведенииЗакупок);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	гз_ЦеновоеПредложениеПоставщика.Контрагент
	               |ИЗ
	               |	Документ.гз_ЦеновоеПредложениеПоставщика КАК гз_ЦеновоеПредложениеПоставщика
	               |ГДЕ
	               |	гз_ЦеновоеПредложениеПоставщика.ДокументОснование = &ОбъявлениеОПроведенииЗакупок
	               |	И (НЕ гз_ЦеновоеПредложениеПоставщика.ПометкаУдаления)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	гз_РезультатыВскрытияЦеновыхПредложений.Поставщик КАК Контрагент
	               |ИЗ
	               |	РегистрСведений.гз_РезультатыВскрытияЦеновыхПредложений КАК гз_РезультатыВскрытияЦеновыхПредложений
	               |ГДЕ
	               |	гз_РезультатыВскрытияЦеновыхПредложений.ОбъявлениеОПроведенииКонкурса = &ОбъявлениеОПроведенииЗакупок
	               |	И (НЕ гз_РезультатыВскрытияЦеновыхПредложений.ЦеновоеПредложениеОтклонено)";
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции // СформироватьЗапросПоОбъявлению()

// Функция выполняет проверку, сформированы ли итоги по объявлению-основанию
//
// Возвращаемое значение:
//  Истина, если по данному объявлению-основанию уже сформированы итоги государственных закупок, иначе - ложь
//  
Функция СформированыИтогиПоОбъявлению() Экспорт 
	
	// проверить, сформированы ли итоги гос закупок по объявлению, по которому сформирован данный документ
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование",ОбъявлениеОПроведенииЗакупок);
	Запрос.Текст = "ВЫБРАТЬ
				   |	гз_ИтогиГосударственныхЗакупок.Ссылка
				   |ИЗ
				   |	Документ.гз_ИтогиГосударственныхЗакупок КАК гз_ИтогиГосударственныхЗакупок
				   |ГДЕ
				   |	гз_ИтогиГосударственныхЗакупок.Проведен
				   |	И гз_ИтогиГосударственныхЗакупок.ДокументОснование = &ДокументОснование";
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // СформированыИтогиПоОбъявлению()
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура подготавливает таблицу движений
//
Процедура ПодготовитьТаблицуДвижений(ТаблицаДвижений,СтруктураШапкиДокумента)
	ТаблицаДвижений.Свернуть("Поставщик","УсловнаяСкидка");
	ТаблицаДвижений.Колонки.Добавить("Организация");
	ТаблицаДвижений.Колонки.Добавить("ОбъявлениеОПроведенииЗакупок");
	ТаблицаДвижений.Колонки.Добавить("Активность");
	ТаблицаДвижений.Колонки.Добавить("Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,					"Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОбъявлениеОПроведенииЗакупок,	"ОбъявлениеОПроведенииЗакупок");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,							"Период");
	Для Каждого СтрокаЗаявка Из ТаблицаДвижений Цикл
		 СтрокаЗаявка.УсловнаяСкидка = ?(СтрокаЗаявка.УсловнаяСкидка < 100,СтрокаЗаявка.УсловнаяСкидка,100);
	КонецЦикла;
КонецПроцедуры //ПодготовитьТаблицуЗаявок()

// Процедура проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация"; // , ОперацияСОбъектамиОС - НЕ обязательна к заполнению
	
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);
	СтруктураОбязательныхПолей.Вставить("ОбъявлениеОПроведенииЗакупок");
	СтруктураОбязательныхПолей.Вставить("ДатаРазыгрыванияКонкурса");
	
	// Теперь позовем общую процедуру проверки.
	гз_ОбщегоНазначения.мПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если НЕ Отказ Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОбъявлениеОПроведенииЗакупок",	ОбъявлениеОПроведенииЗакупок);
		Запрос.УстановитьПараметр("Регистратор",					Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		               |	гз_ПредоставлениеУсловныхСкидок.Регистратор
		               |ИЗ
		               |	РегистрСведений.гз_ПредоставлениеУсловныхСкидок КАК гз_ПредоставлениеУсловныхСкидок
		               |ГДЕ
		               |	гз_ПредоставлениеУсловныхСкидок.ОбъявлениеОПроведенииЗакупок = &ОбъявлениеОПроведенииЗакупок
		               |	И гз_ПредоставлениеУсловныхСкидок.Регистратор <> &Регистратор";
		Если НЕ Запрос.Выполнить().Пустой() Тогда
            Отказ = Истина;
			Сообщить("Разыгрывание конкурса "+Ссылка+" не может быть проведено:
			|	имеются другие розыгрыши данного конкурса!",СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ПроверитьЗаполнениеШапки()

// Процедура формирования движений регистров
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаДвижений ,Отказ, Заголовок)
	Если Не Отказ Тогда
		Движения.гз_ПредоставлениеУсловныхСкидок.Загрузить(ТаблицаДвижений);
	КонецЕсли;
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ,РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = гз_ОбщегоНазначения.мПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если гз_ОбщегоНазначения.мРучнаяКорректировкаОбработкаПроведения(Ложь,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = гз_ОбщегоНазначения.мСформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Оплата НМА".
	
	ТаблицаДвижений 	= УчастникиКонкурса.Выгрузить();
	ПодготовитьТаблицуДвижений(ТаблицаДвижений,СтруктураШапкиДокумента);
	
	Если НЕ Отказ Тогда
		// Формирование движений регистров, бухгалтерских и налоговых проводок.
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаДвижений, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры //ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	гз_ОбщегоНазначения.мУдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь);
КонецПроцедуры //ОбработкаУдаленияПроведения()

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	Если ТипЗнч(Основание) =  Тип("ДокументСсылка.гз_ОбъявлениеОПроведенииГосударственныхЗакупок") Тогда
		ЗаполнитьПоДокументуОснования(Основание);
	КонецЕсли;
КонецПроцедуры //ОбработкаЗаполнения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка ИЛИ ДополнительныеСвойства.Свойство("ВнешняяОбработка") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбъявлениеОПроведенииЗакупок.Пустая() Тогда
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование",ОбъявлениеОПроведенииЗакупок);
		Запрос.Текст = "ВЫБРАТЬ
		               |	гз_ИтогиГосударственныхЗакупок.Ссылка
		               |ИЗ
		               |	Документ.гз_ИтогиГосударственныхЗакупок КАК гз_ИтогиГосударственныхЗакупок
		               |ГДЕ
		               |	гз_ИтогиГосударственныхЗакупок.Проведен
		               |	И гз_ИтогиГосударственныхЗакупок.ДокументОснование = &ДокументОснование";
		Если Не Запрос.Выполнить().Пустой() Тогда
             Отказ = Истина;
			 Сообщить("Документ "+Ссылка+" не может быть записан, так как по конкурсу уже подведены итоги!",СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ПередЗаписью()
