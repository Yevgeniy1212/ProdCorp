Перем мНачДата;
Перем мКонДата;
Перем мНачГода;
Перем мНачГраница;
Перем мКонГраница;
         
Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;


Перем мОперация;
Перем мПроводкиБУ;
Перем мПроводкиНУ;

Перем мСтавкаНалогаНаПрибыль;

Перем ПорядокПодразделенийСообщался;
Перем ТаблицаНеЗакрытыхПодразделений;

Перем ПорядокПеределов;

Перем мУбранФлажокПереносНЗП Экспорт;
Перем мУбранФлажокПереносНЗПНУ Экспорт;

Перем ВспомогательныеДанныеРасчета;
Перем ЗаписьРасчетаРБП;

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мИсчислениеНалоговСтруктурныхЕдиниц;
Перем мВедениеУчетаВременныхРазницБалансовымМетодом Экспорт;

// хранит информацию о том, выполняются ли движения затрат по готовой продукции, списанной в производство 
Перем ДвижениеЗатратПоГПСписаннойВПроизводство;

//Переменная хранит текущую операцию, передается из обработки "Закрытие месяца"
Перем ВидРегламентнойОперации Экспорт;

// переменные для управления отображения структурного подразделения
Перем мОтображатьСтруктурныеПодразделения Экспорт;

Перем мСписокОперацийПоОрганизации Экспорт;
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");

	// Вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет запись в регистры информации параметров расчетов по рег.операциям
// по данным которых будут построены справки - расчеты
Процедура ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента, ТаблицаДвижений, ВспомогательныйРегистр, СтрокаГруппировки, СтрокаСуммирования, ЗаполнятьСтруктурноеПодразделение = Истина)
	                         
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	Если ТаблицаДвижений.Колонки.Найти("СтруктурноеПодразделение")<> Неопределено И ЗаполнятьСтруктурноеПодразделение Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтруктурноеПодразделение, "СтруктурноеПодразделение");	
	КонецЕсли;
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ПериодРасчета");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.Свернуть(СтрокаГруппировки,СтрокаСуммирования);
	ВспомогательныйРасчет = ВспомогательныйРегистр.СоздатьНаборЗаписей();
	ВспомогательныйРасчет.Отбор.Регистратор.Установить(Ссылка);
	ВспомогательныйРасчет.Прочитать();
	ВспомогательныйРасчет.Загрузить(ТаблицаДвижений);
	ВспомогательныйРасчет.Записать();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ПО НАЧИСЛЕНИЮ АМОРТИЗАЦИИ ОС и НМА

// Выполняет начисление амортизации основных средств
//
Процедура НачислениеАмортизацииОС(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.АмортизацияОСБУ Тогда
		
		ТабАмортизации  = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииБухРегл(Дата, СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.СтруктурноеПодразделение,,,ЭтотОбъект);

		ТабАмортизации.Колонки.Бух.Имя = "Сумма";
		ТабАмортизации.Колонки.ОС.Имя  = "ОбъектУчета";
		ТабАмортизации.Колонки.СчетАмортизацииБУ.Имя = "СчетАмортизации";	
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"Бух","ОС", ,Перечисления.ВидыРегламентныхОпераций.АмортизацияОСБУ);
		
		мПроводкиБУ.Записать(Ложь);
		мПроводкиНУ.Записать(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры


// Выполняет начисление амортизации НМА
//
Процедура НачислениеАмортизацииНМА(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.АмортизацияНМАБУ Тогда
		ТабАмортизации  = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНМАБухРегл(Дата, СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.СтруктурноеПодразделение, , , ЭтотОбъект);

		ТабАмортизации.Колонки.Бух.Имя = "Сумма";
		ТабАмортизации.Колонки.НМА.Имя  = "ОбъектУчета";
		ТабАмортизации.Колонки.СчетАмортизацииБУ.Имя = "СчетАмортизации";
		ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"Бух","НА", ,Перечисления.ВидыРегламентныхОпераций.АмортизацияНМАБУ);	
		
		мПроводкиБУ.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ПО СПИСАНИЮ РЕЗЕРВА ПО ПЕРЕОЦЕНКЕ ОСНОВЫХ СРЕДСТВ

// Выполняет списание резерва по переоценке основных средств.
//
Процедура СписаниеРезеваПоПереоценкеОС(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.СписаниеРезерваПоПереоценкеОСБУ Тогда		
		
		ПереоценкаВА = Движения.ПереоценкаВнеоборотныхАктивов;
		
		Запрос = Новый Запрос;
		
		ТаблицаТекДанныеОСБУ = УправлениеВнеоборотнымиАктивами.ПолучитьТекДанныеОСБУ(Дата, Организация,СтруктурноеПодразделение,);
		
		Если ТаблицаТекДанныеОСБУ.Количество() = 0 Тогда
			// Продолжать не надо, так как нет ни одного основного средства в указанной организации
			Возврат;
		КонецЕсли;	
		
		ВыводитьСообщения = Истина;
		ТаблицаРезервКСписанию = УправлениеВнеоборотнымиАктивами.РасчетСуммыСписываемогоРезерваПоПереоценке(Дата, Организация, ТаблицаТекДанныеОСБУ, ВыводитьСообщения, ЭтотОбъект);
		
		ТаблицаОС = ТаблицаРезервКСписанию.Скопировать();
		ТаблицаОС.Свернуть("ОС");
		СписокОС = ТаблицаОС.ВыгрузитьКолонку("ОС");

		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПереоценкаВнеоборотныхАктивовОстатки.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
		|	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки КАК ДокументПереоценки,
		|	ПереоценкаВнеоборотныхАктивовОстатки.СуммаПереоценкиСтоимостиОстаток КАК СуммаПереоценкиСтоимости,
		|	ПереоценкаВнеоборотныхАктивовОстатки.СуммаПереоценкиАмортизацииОстаток КАК СуммаПереоценкиАмортизации,
		|	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СчетДоходовБУ КАК СчетДоходовБУ,
		|	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоДоходовБУ1 КАК СубконтоДоходовБУ1,
		|	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоДоходовБУ2 КАК СубконтоДоходовБУ2,
		|	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоДоходовБУ3 КАК СубконтоДоходовБУ3,
		|	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СчетРасходовБУ КАК СчетРасходовБУ,
		|	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоРасходовБУ1 КАК СубконтоРасходовБУ1,
		|	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоРасходовБУ2 КАК СубконтоРасходовБУ2,
		|	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоРасходовБУ3 КАК СубконтоРасходовБУ3
		|ИЗ
		|	РегистрНакопления.ПереоценкаВнеоборотныхАктивов.Остатки(
		|			&Период,
		|			ВнеоборотныйАктив В (&СписокОС) И
		|				Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ПереоценкаВнеоборотныхАктивовОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументПереоценки
		|ИТОГИ
		|	СУММА(СуммаПереоценкиСтоимости),
		|	СУММА(СуммаПереоценкиАмортизации)
		|ПО
		|	ВнеоборотныйАктив";
		
	    // резерв гасится в последующие месяцы, поэтому берем резерв,
		// образовавшийся в предыдущем месяце.
		ПериодПереоценки = ДобавитьМесяц(Дата, -1);
		
		Запрос.УстановитьПараметр("Период", 					КонецМесяца(ПериодПереоценки));
		Запрос.УстановитьПараметр("Организация", 				СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", 	СтруктураШапкиДокумента.СтруктурноеПодразделение);	
		Запрос.УстановитьПараметр("СписокОС", 					СписокОС);
		                                                        		
		Результат = Запрос.Выполнить();
		ВыборкаДокументыПереоценки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		Для Каждого СтрокаРезерва Из ТаблицаРезервКСписанию Цикл
			
			СуммаРезерваКСписанию = СтрокаРезерва.СуммаРезерваКСписанию;
			
			Если СуммаРезерваКСписанию = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			ТекОС = СтрокаРезерва.ОС;
			
			// сначала спишем часть резерва по БУ
			Если СуммаРезерваКСписанию <> 0 Тогда
				// по бух. учету списание резерва переоценки
				Проводка = мПроводкиБУ.Добавить();
				Проводка.Период       = Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.СписаниеРезерваПоПереоценкеОСБУ;
				Проводка.Содержание   = "Списание резерва переоценки стоимости ОС";
				Проводка.НомерЖурнала = "ОС";
				Проводка.Сумма        = СуммаРезерваКСписанию;
				
				Проводка.СчетДт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);
				
				Проводка.СчетКт = ПланыСчетов.Типовой.НераспределеннаяПрибыльНепокрытыйУбытокОтчетногоГода; //5510
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);				
			КонецЕсли;
			
			ВыборкаДокументыПереоценки.Сбросить();
			
			// теперь нужно погасить партии по преоеценкам
			Пока ВыборкаДокументыПереоценки.НайтиСледующий(ТекОС, "ВнеоборотныйАктив") Цикл
				
				СписокПереоценокОС = ВыборкаДокументыПереоценки.Выбрать();
				
				// не закрытые партии переоценок
				Пока СписокПереоценокОС.Следующий() Цикл
					
					Если (СуммаРезерваКСписанию <> 0) И
						((СписокПереоценокОС.СуммаПереоценкиСтоимости > 0) Или (СписокПереоценокОС.СуммаПереоценкиАмортизации < 0))  Тогда
							
						// найдем сумму резерва партии, которую можем закрыть 
						ОстатокРезерваПартии = СписокПереоценокОС.СуммаПереоценкиСтоимости + СписокПереоценокОС.СуммаПереоценкиАмортизации;
						
						СуммаЗакрытияПартии = МИН(ОстатокРезерваПартии, СуммаРезерваКСписанию);
						
						Если СуммаЗакрытияПартии = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						// находим, какую часть составляет сумма резерва стоимости от общей суммы резерва
						КоэфРаспределенияСуммы = СписокПереоценокОС.СуммаПереоценкиСтоимости / ОстатокРезерваПартии;
						 
						СуммаЗакрытияРезерваСтоимости	 = КоэфРаспределенияСуммы * СуммаЗакрытияПартии;
						СуммаЗакрытияРезерваАмортизации = СуммаЗакрытияПартии - СуммаЗакрытияРезерваСтоимости;
					 
						// по регистру ПереоценкаВнеоборотныхАктивов гасим резервы
						ДвижениеПереоценкаВА = ПереоценкаВА.ДобавитьРасход();
						ДвижениеПереоценкаВА.Период				 		= Дата;
						ДвижениеПереоценкаВА.Организация 		     	= СтруктураШапкиДокумента.Организация;
						ДвижениеПереоценкаВА.СтруктурноеПодразделение  	= СтруктураШапкиДокумента.СтруктурноеПодразделение;
												
						ДвижениеПереоценкаВА.ВнеоборотныйАктив   	 	= ТекОС;
						ДвижениеПереоценкаВА.ДокументПереоценки	 		= СписокПереоценокОС.ДокументПереоценки;;
						ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = СуммаЗакрытияРезерваСтоимости;
						ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = СуммаЗакрытияРезерваАмортизации;  
						
						ДвижениеПереоценкаВА.СчетДоходовБУ		 = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
						ДвижениеПереоценкаВА.СубконтоДоходовБУ1  = ТекОС;
						ДвижениеПереоценкаВА.СубконтоДоходовБУ2  = Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств;
						ДвижениеПереоценкаВА.СчетРасходовБУ	  	 = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
						ДвижениеПереоценкаВА.СубконтоРасходовБУ1 = ТекОС;
						ДвижениеПереоценкаВА.СубконтоРасходовБУ2 = Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств;
						
						СуммаРезерваКСписанию = СуммаРезерваКСписанию - СуммаЗакрытияПартии;
					КонецЕсли;	
											
				КонецЦикла;	// Пока СписокПереоценокОС.Следующий() Цикл
			КонецЦикла; // Пока ВыборкаДокументыПереоценки.НайтиСледующий(ТекОС, "ВнеоборотныйАктив") Цикл	
		КонецЦикла;	

			
		мПроводкиБУ.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ПЕРЕОЦЕНКЕ ВАЛЮТНЫХ СРЕДСТВ

// Выполняет переоценку валютных счетов	
//
Процедура ПереоценкаВалютныхСредств(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ПереоценкаВалютныхСредствБУ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("РегламентнаяПереоценка", Истина);
	СтруктураПараметров.Вставить("РегламентныйДокумент",   ЭтотОбъект);
	ТаблицаРасчетаПереоценкиВалюты = Движения.РасчетПереоценкиВалютныхСредств.ВыгрузитьКолонки();
	СтруктураПараметров.Вставить("ТаблицаРасчетаПереоценкиВалюты", ТаблицаРасчетаПереоценкиВалюты);		         			
	
	// Таблица оборотов за месяц по счетам с оборотным субконто
	ЗапросПоОборотнымСубконто = Новый Запрос("ВЫБРАТЬ
	                                         |	СчетаИВидыСубконто.Ссылка КАК Счет,
	                                         |	СчетаИВидыСубконто.ТолькоОбороты1,
	                                         |	СчетаИВидыСубконто.ТолькоОбороты2,
	                                         |	СчетаИВидыСубконто.ТолькоОбороты3,
	                                         |	ТиповойОбороты.Субконто1,
	                                         |	ТиповойОбороты.Субконто2,
	                                         |	ТиповойОбороты.Субконто3,
	                                         |	ТиповойОбороты.ВалютнаяСуммаОборотДт + ТиповойОбороты.ВалютнаяСуммаОборотКт КАК ВалютнаяСумма,
	                                         |	ТиповойОбороты.Валюта
	                                         |ИЗ
	                                         |	(ВЫБРАТЬ
	                                         |		Типовой.Ссылка КАК Ссылка,
	                                         |		ТиповойВидыСубконто1.ВидСубконто КАК ВидСубконто1,
	                                         |		ТиповойВидыСубконто1.ТолькоОбороты КАК ТолькоОбороты1,
	                                         |		ТиповойВидыСубконто2.ВидСубконто КАК ВидСубконто2,
	                                         |		ТиповойВидыСубконто2.ТолькоОбороты КАК ТолькоОбороты2,
	                                         |		ТиповойВидыСубконто3.ВидСубконто КАК ВидСубконто3,
	                                         |		ТиповойВидыСубконто3.ТолькоОбороты КАК ТолькоОбороты3
	                                         |	ИЗ
	                                         |		ПланСчетов.Типовой КАК Типовой
	                                         |			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто1
	                                         |			ПО Типовой.Ссылка = ТиповойВидыСубконто1.Ссылка
	                                         |				И (ТиповойВидыСубконто1.НомерСтроки = 1)
	                                         |			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто2
	                                         |			ПО Типовой.Ссылка = ТиповойВидыСубконто2.Ссылка
	                                         |				И (ТиповойВидыСубконто2.НомерСтроки = 2)
	                                         |			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто3
	                                         |			ПО Типовой.Ссылка = ТиповойВидыСубконто3.Ссылка
	                                         |				И (ТиповойВидыСубконто3.НомерСтроки = 3)
	                                         |	ГДЕ
	                                         |		(ТиповойВидыСубконто1.ТолькоОбороты = ИСТИНА
	                                         |				ИЛИ ТиповойВидыСубконто2.ТолькоОбороты = ИСТИНА
	                                         |				ИЛИ ТиповойВидыСубконто3.ТолькоОбороты = ИСТИНА)) КАК СчетаИВидыСубконто
	                                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(
	                                         |				&ДатаНач,
	                                         |				&ДатаКон,
	                                         |				,
	                                         |				Счет.Валютный = ИСТИНА,
	                                         |				,
	                                         |				Организация = &Организация
	                                         |					И СтруктурноеПодразделение = &СтруктурноеПодразделение,
	                                         |				,
	                                         |				) КАК ТиповойОбороты
	                                         |		ПО СчетаИВидыСубконто.Ссылка = ТиповойОбороты.Счет
	                                         |АВТОУПОРЯДОЧИВАНИЕ");
											 
	ЗапросПоОборотнымСубконто.УстановитьПараметр("ДатаНач", 				мНачГраница);
	ЗапросПоОборотнымСубконто.УстановитьПараметр("ДатаКон", 				мКонГраница);
	ЗапросПоОборотнымСубконто.УстановитьПараметр("Организация", 			СтруктураШапкиДокумента.Организация);
	ЗапросПоОборотнымСубконто.УстановитьПараметр("СтруктурноеПодразделение",СтруктураШапкиДокумента.СтруктурноеПодразделение);
	
	ВыборкаПоОборотнымСубконто = ЗапросПоОборотнымСубконто.Выполнить().Выбрать();
	
	ТаблицаОборотныхСубконтоСчета = Новый ТаблицаЗначений;
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Счет");	
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Субконто1");
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Субконто2");
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Субконто3");
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Сумма");
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("СуммаВРегл");
 
	// Основной запрос	
	
	Запрос = Новый Запрос; 
	Запрос.МенеджерВременныхТаблиц = СтруктураШапкиДокумента.МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("РегламентнаяПереоценка", 	    Перечисления.СпособыПризнанияКурсовойРазницы.Регламентно);
	Запрос.УстановитьПараметр("ДатаКон", 					    мКонГраница);
	Запрос.УстановитьПараметр("Организация", 				    СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",	    СтруктураШапкиДокумента.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("Регистратор",				    Ссылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	мВалютаРегламентированногоУчета);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТиповойОстатки.Счет КАК Счет,
	               |	ТиповойОстатки.Субконто1,
	               |	ТиповойОстатки.Субконто2,
	               |	ТиповойОстатки.Субконто3,
	               |	ТиповойОстатки.Валюта,
	               |	ТиповойОстатки.СуммаОстаток,
	               |	ТиповойОстатки.ВалютнаяСуммаОстаток,
	               |	ВЫБОР
	               |		КОГДА СчетаИВидСубконто.ТолькоОбороты1
	               |				ИЛИ СчетаИВидСубконто.ТолькоОбороты2
	               |				ИЛИ СчетаИВидСубконто.ТолькоОбороты3
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ПризнакОборотныхСубконтоСчета,
	               |	СчетаИВидСубконто.ТолькоОбороты1 КАК ОборотноеСубконто1,
	               |	СчетаИВидСубконто.ТолькоОбороты2 КАК ОборотноеСубконто2,
	               |	СчетаИВидСубконто.ТолькоОбороты3 КАК ОборотноеСубконто3
	               |ИЗ
	               |	ВТ_ТиповойОстатки КАК ТиповойОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			Типовой.Ссылка КАК Ссылка,
	               |			ТиповойВидыСубконто1.ВидСубконто КАК ВидСубконто1,
	               |			ТиповойВидыСубконто1.ТолькоОбороты КАК ТолькоОбороты1,
	               |			ТиповойВидыСубконто2.ВидСубконто КАК ВидСубконто2,
	               |			ТиповойВидыСубконто2.ТолькоОбороты КАК ТолькоОбороты2,
	               |			ТиповойВидыСубконто3.ВидСубконто КАК ВидСубконто3,
	               |			ТиповойВидыСубконто3.ТолькоОбороты КАК ТолькоОбороты3
	               |		ИЗ
	               |			ПланСчетов.Типовой КАК Типовой
	               |				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто1
	               |				ПО Типовой.Ссылка = ТиповойВидыСубконто1.Ссылка
	               |					И (ТиповойВидыСубконто1.НомерСтроки = 1)
	               |				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто2
	               |				ПО Типовой.Ссылка = ТиповойВидыСубконто2.Ссылка
	               |					И (ТиповойВидыСубконто2.НомерСтроки = 2)
	               |				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто3
	               |				ПО Типовой.Ссылка = ТиповойВидыСубконто3.Ссылка
	               |					И (ТиповойВидыСубконто3.НомерСтроки = 3)
	               |		ГДЕ
	               |			(ТиповойВидыСубконто1.ТолькоОбороты = ИСТИНА
	               |					ИЛИ ТиповойВидыСубконто2.ТолькоОбороты = ИСТИНА
	               |					ИЛИ ТиповойВидыСубконто3.ТолькоОбороты = ИСТИНА)) КАК СчетаИВидСубконто
	               |		ПО ТиповойОстатки.Счет = СчетаИВидСубконто.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Счет
	               |АВТОУПОРЯДОЧИВАНИЕ
	               |";
	
	Выборка   = Запрос.Выполнить().Выбрать();
	             	
	Пока Выборка.Следующий() Цикл
		ОбнаруженаОшибка = Ложь;
		СтрокаСообщения = "";
		// переоценка не производится, если существуют остатки, в которых не определена валюта
		Если НЕ ЗначениеЗаполнено(Выборка.Валюта) Тогда
			СтрокаСообщения = "Обнаружены остатки по валютному счету без указания валюты. Переоценка остатка не производится.";
			ОбнаруженаОшибка = Истина;
		КонецЕсли;
		// переоценка сумм в валюте регл учета не производится, если сумма и сумма в валюте отличаются  - это ошибка
		Если Выборка.Валюта = мВалютаРегламентированногоУчета И 
			НЕ Выборка.СуммаОстаток = Выборка.ВалютнаяСуммаОстаток Тогда
			
			СтрокаСообщения = "Обнаружены остатки в валюте регламентированного учета, не совпадающие с суммой счета. Переоценка остатка не производится.";
			ОбнаруженаОшибка = Истина;
		КонецЕсли;
		Если ОбнаруженаОшибка Тогда
			СтрокаСообщения = СтрокаСообщения + Символы.ПС + "   - счет: " + Выборка.Счет.код + " <" + Выборка.Счет.Наименование + ">";
			СтрокаСообщения = СтрокаСообщения + Символы.ПС+ "    - субконто: "; 
			Для НомерСубконто = 1 по 3 Цикл
				СтрокаСообщения = СтрокаСообщения + "<" + СокрЛП(Выборка["Субконто"+НомерСубконто]) + ">";
			КонецЦикла; 
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрокаСообщения, ,  ,ЭтотОбъект,Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредствБУ);
			
			Продолжить;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("ВалютаДокумента", Выборка.Валюта);		
		СтруктураСчетаПереоценки =  Новый Структура("Счет, Субконто1, Субконто2, Субконто3, ТенговыйОстаток, ВалютныйОстаток, ", Выборка.Счет, Выборка.Субконто1, Выборка.Субконто2, Выборка.Субконто3, Выборка.СуммаОстаток, Выборка.ВалютнаяСуммаОстаток);
		
		// Таблица оборотных субконто		
		ТаблицаОборотныхСубконтоСчета.Очистить();
		Если Выборка.ПризнакОборотныхСубконтоСчета = ИСТИНА Тогда
			ВыборкаПоОборотнымСубконто.Сбросить();
			СтруктураПоиска = Новый Структура("Счет, Валюта", Выборка.Счет, Выборка.Валюта);
			Для Счетчик = 1 по 3 Цикл
				Если Выборка["ОборотноеСубконто" + Счетчик] = ЛОЖЬ тогда
					СтруктураПоиска.Вставить("Субконто"+ Счетчик, Выборка["Субконто" + Счетчик]);
				КонецЕсли;	
			КонецЦикла;	
			
			Пока ВыборкаПоОборотнымСубконто.НайтиСледующий(СтруктураПоиска) Цикл 
				СтрокаТаблицыОборотныхСубконтоСчета = ТаблицаОборотныхСубконтоСчета.Добавить();
				
				СтрокаТаблицыОборотныхСубконтоСчета.Счет 		= ВыборкаПоОборотнымСубконто.Счет;	
				СтрокаТаблицыОборотныхСубконтоСчета.Субконто1	= ВыборкаПоОборотнымСубконто.Субконто1;	
				СтрокаТаблицыОборотныхСубконтоСчета.Субконто2	= ВыборкаПоОборотнымСубконто.Субконто2;	
				СтрокаТаблицыОборотныхСубконтоСчета.Субконто3	= ВыборкаПоОборотнымСубконто.Субконто3;	
				СтрокаТаблицыОборотныхСубконтоСчета.Сумма		= ВыборкаПоОборотнымСубконто.ВалютнаяСумма;	
			КонецЦикла;
			СтруктураСчетаПереоценки.Вставить("ТаблицаОборотногоСубконто", ТаблицаОборотныхСубконтоСчета);	
		Иначе
			СтруктураСчетаПереоценки.Вставить("ТаблицаОборотногоСубконто", Неопределено);	
		КонецЕсли;
		
		Если КурсыВалют.Количество() <> 0 Тогда
			СтрокаВалюты = КурсыВалют.Найти(СтруктураШапкиДокумента.ВалютаДокумента, "Валюта");
			Если СтрокаВалюты <> Неопределено Тогда
				ДанныеОВалютеОстатка = Новый Структура;
				ДанныеОВалютеОстатка.Вставить("Курс", СтрокаВалюты.Курс);
				ДанныеОВалютеОстатка.Вставить("Кратность", СтрокаВалюты.Кратность);
				СтруктураПараметров.Вставить("ДанныеОВалютеОстатка", ДанныеОВалютеОстатка);
			КонецЕсли;
		КонецЕсли;
		
		СпособПризнанияКурсовойРазницы = Новый Массив;
		СпособПризнанияКурсовойРазницы.Добавить(Перечисления.СпособыПризнанияКурсовойРазницы.Регламентно);
		СпособПризнанияКурсовойРазницы.Добавить(Перечисления.СпособыПризнанияКурсовойРазницы.ПоОперациямПриПогашении);
		
		ПроцедурыБухгалтерскогоУчета.ПереоценкаСчетаРегл(СтруктураШапкиДокумента, мПроводкиБУ, мПроводкиНУ,СтруктураСчетаПереоценки, , Ложь, Ложь,,Новый СписокЗначений(),СпособПризнанияКурсовойРазницы, Отказ, СтруктураПараметров);							
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;	
		
	КонецЦикла;
	
	мПроводкиБУ.Записать(Ложь);
	мПроводкиНУ.Записать(Ложь);
	
	ЗаписьВВспомогательныеРегистрыСведений(
		СтруктураШапкиДокумента,
		СтруктураПараметров.ТаблицаРасчетаПереоценкиВалюты, 
		РегистрыСведений.РасчетПереоценкиВалютныхСредств,
		"Организация, СтруктурноеПодразделение,  ПериодРасчета, Активность, Регистратор, Счет, Валюта, Субконто1, Субконто2, Субконто3, КурсПереоценки",
		"Сумма,СуммаНУ,СуммаПР,СуммаВР, СуммаВВалюте, СуммаВТенге, СуммаВТенгеНУ, СуммаВТенгеПР, СуммаВТенгеВР");

	СтруктураШапкиДокумента.МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПО СПИСАНИЮ РАСХОДОВ БУДУЩИХ ПЕРИОДОВ
Функция РазностьДатВДнях(Дата1, Дата2)

	мДлинаСуток = 86400; // в секундах

	Возврат Окр((НачалоДня(Дата1) - НачалоДня(Дата2)) / мДлинаСуток);

КонецФункции

// Функция определяет сумму расходов будущих периодов
// подлежащих отнесению на затраты в текущем периоде
Функция СуммаСписанияЗаМесяц(СтатьяРасходовБудущихПериодов, СпособСписания, Знач ДатаНачалаСписания, Знач ДатаОкончанияСписания, Сумма)
	
	СтруктураРезультатаРасчета = Новый Структура("СуммаТекущегоМесяца, СуммаПервогоМесяца,
  												|СуммаПоследнегоМесяца, КоличествоМесяцев,
												|СуммаПризнания, ДатаНачалаСписания",
												0,0,0,0,0, Дата(1,1,1));
	Если Сумма =  0 Тогда
		Возврат СтруктураРезультатаРасчета;
	КонецЕсли;

	ДатаНачалаСписания    = НачалоДня(ДатаНачалаСписания);
	ДатаОкончанияСписания = КонецДня(ДатаОкончанияСписания);

	Если НЕ ЗначениеЗаполнено(ДатаНачалаСписания) Тогда
		Возврат СтруктураРезультатаРасчета;

	ИначеЕсли ДатаНачалаСписания > мКонДата Тогда
		Возврат СтруктураРезультатаРасчета;

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДатаОкончанияСписания) Тогда
		Возврат СтруктураРезультатаРасчета;

	ИначеЕсли ДатаОкончанияСписания < мНачДата Тогда
		Возврат СтруктураРезультатаРасчета;

	ИначеЕсли ДатаОкончанияСписания < ДатаНачалаСписания Тогда
		Возврат СтруктураРезультатаРасчета;

	КонецЕсли;

	Если ДатаНачалаСписания < НачалоМесяца(ДатаОкончанияСписания) Тогда

		Если ДатаНачалаСписания > НачалоМесяца(ДатаНачалаСписания) Тогда
			ДатаНачалаПолногоМесяцаСписания = НачалоМесяца(ДобавитьМесяц(ДатаНачалаСписания, 1));
		Иначе
			ДатаНачалаПолногоМесяцаСписания = ДатаНачалаСписания;
		КонецЕсли;

		Если ДатаОкончанияСписания < КонецМесяца(ДатаОкончанияСписания) Тогда
			ДатаОкончанияПолногоМесяцаСписания = КонецМесяца(ДобавитьМесяц(ДатаОкончанияСписания, -1));
		Иначе
			ДатаОкончанияПолногоМесяцаСписания = ДатаОкончанияСписания;
		КонецЕсли;

		Если ДатаОкончанияПолногоМесяцаСписания >= ДатаНачалаПолногоМесяцаСписания Тогда
			КоличествоПолныхМесяцев = (Год(ДатаОкончанияПолногоМесяцаСписания) - Год(ДатаНачалаПолногоМесяцаСписания)) * 12 
									+ Месяц(ДатаОкончанияПолногоМесяцаСписания) - Месяц(ДатаНачалаПолногоМесяцаСписания) + 1;
		Иначе
			КоличествоПолныхМесяцев = 0;
		КонецЕсли;

		ПериодСписанияВ_Днях          = РазностьДатВДнях(ДатаОкончанияСписания, ДатаНачалаСписания)+ 1;
		СуммаСписанияПервогоМесяца    = Окр(Сумма * РазностьДатВДнях(ДатаНачалаПолногоМесяцаСписания, ДатаНачалаСписания) / ПериодСписанияВ_Днях, 2);
		СуммаСписанияПоследнегоМесяца = Окр(Сумма * РазностьДатВДнях(ДатаОкончанияСписания, ДатаОкончанияПолногоМесяцаСписания) / ПериодСписанияВ_Днях, 2);

		Если КоличествоПолныхМесяцев > 0 Тогда
			СуммаСписанияПолногоМесяца = Окр((Сумма - СуммаСписанияПервогоМесяца - СуммаСписанияПоследнегоМесяца) / КоличествоПолныхМесяцев, 2);
		Иначе
			СуммаСписанияПолногоМесяца = 0;
		КонецЕсли;

		СуммаСписанияПоследнегоМесяца = Сумма - СуммаСписанияПервогоМесяца - СуммаСписанияПолногоМесяца * КоличествоПолныхМесяцев;

		Если ДатаНачалаПолногоМесяцаСписания > мКонДата Тогда
			СуммаСписания = СуммаСписанияПервогоМесяца;
			
		ИначеЕсли ДатаОкончанияПолногоМесяцаСписания < мНачДата Тогда
			СуммаСписания = СуммаСписанияПоследнегоМесяца;
			
		ИначеЕсли мКонДата = КонецМесяца(ДатаОкончанияСписания) Тогда
			СуммаСписания = СуммаСписанияПолногоМесяца + СуммаСписанияПоследнегоМесяца;
			
		Иначе
			СуммаСписания = СуммаСписанияПолногоМесяца;
		КонецЕсли;

	Иначе
		СуммаСписания = Сумма;
	КонецЕсли;
												
    СтруктураРезультатаРасчета.СуммаТекущегоМесяца 		= СуммаСписания;
	
	СтруктураРезультатаРасчета.СуммаПервогоМесяца 		= СуммаСписанияПервогоМесяца;
	СтруктураРезультатаРасчета.СуммаПоследнегоМесяца 	= СуммаСписанияПоследнегоМесяца;
	СтруктураРезультатаРасчета.КоличествоМесяцев 		= КоличествоПолныхМесяцев;
	СтруктураРезультатаРасчета.ДатаНачалаСписания		= ДатаНачалаСписания;
	СтруктураРезультатаРасчета.СуммаПризнания 			= Сумма;
	
	Возврат СтруктураРезультатаРасчета;

КонецФункции // СуммаСписанияЗаМесяц()

// Процедура отнесения на затраты расходов будущих периодов
//
Процедура СписаниеРБП(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.СписаниеРБПБУ Тогда
		Возврат;
	КонецЕсли;	

    СписокСчетовРБП = Новый Массив;
	СписокСчетовРБП.Добавить(ПланыСчетов.Типовой.КраткосрочныеРасходыБудущихПериодов);
	СписокСчетовРБП.Добавить(ПланыСчетов.Типовой.ДолгосрочныеРасходыБудущихПериодов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецМесяца", 	мКонГраница);
	Запрос.УстановитьПараметр("СчетУчетаБУ", 	СписокСчетовРБП);	
	Запрос.УстановитьПараметр("СчетУчетаНУ", 	ПланыСчетов.Налоговый.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ВидУчетаНУ",  	Справочники.ВидыУчетаНУ.НУ);
	Запрос.УстановитьПараметр("ВидУчетаПР",  	Справочники.ВидыУчетаНУ.ПР);
	Запрос.УстановитьПараметр("Организация", 	СтруктураШапкиДокумента.Организация);    
	Запрос.УстановитьПараметр("ВидСубконтоРБП", ПланыВидовХарактеристик.ВидыСубконтоТиповые.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);	
    		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеУчета.ВидДанных КАК ВидДанных,
	|	ДанныеУчета.Субконто1 КАК Субконто1,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеУчета.Субконто1) КАК ПредставлениеСубконто1,
	|	ДанныеУчета.Субконто1.ДатаНачалаСписания КАК ДатаНачалаСписания,
	|	ДанныеУчета.Субконто1.ДатаОкончанияСписания КАК ДатаОкончанияСписания,
	|	ДанныеУчета.Субконто1.СпособСписания КАК СпособСписания,
	|	ДанныеУчета.Субконто1.Сумма КАК СуммаПервоначальногоПризнания,
	|	ДанныеУчета.Субконто1.СчетБУ КАК СчетЗатратБУ,
	|	ДанныеУчета.Субконто1.СубконтоБУ1 КАК СубконтоЗатратБУ1,
	|	ДанныеУчета.Субконто1.СубконтоБУ2 КАК СубконтоЗатратБУ2,
	|	ДанныеУчета.Субконто1.СубконтоБУ3 КАК СубконтоЗатратБУ3,
	|	ДанныеУчета.СчетУчетаБУ КАК СчетУчетаБУ,
	|	ДанныеУчета.СуммаОстатокДтБУ КАК СуммаОстатокДтБУ,
	|	ДанныеУчета.СчетУчетаНУ КАК СчетУчетаНУ,
	|	ДанныеУчета.СуммаОстатокДтНУ КАК СуммаОстатокДтНУ,
	|	ДанныеУчета.Субконто1.СчетНУ КАК СчетЗатратНУ,
	|	ДанныеУчета.Субконто1.СубконтоНУ1 КАК СубконтоЗатратНУ1,
	|	ДанныеУчета.Субконто1.СубконтоНУ2 КАК СубконтоЗатратНУ2,
	|	ДанныеУчета.Субконто1.СубконтоНУ3 КАК СубконтоЗатратНУ3,
	|	ДанныеУчета.СуммаОстатокДтПР КАК СуммаОстатокДтПР,
	|	ДанныеУчета.ВидУчетаНУ КАК ВидУчетаНУ,
	|	ДанныеУчета.Субконто1.Код КАК Код
	|ИЗ
	|	(ВЫБРАТЬ
	|		""БУ"" КАК ВидДанных,
	|		ТиповойОстатки.Субконто1 КАК Субконто1,
	|		ТиповойОстатки.Счет КАК СчетУчетаБУ,
	|		ЕСТЬNULL(ТиповойОстатки.СуммаРазвернутыйОстатокДт, 0) КАК СуммаОстатокДтБУ,
	|		NULL КАК СчетУчетаНУ,
	|		0 КАК СуммаОстатокДтНУ,
	|		0 КАК СуммаОстатокДтПР,
	|		NULL КАК ВидУчетаНУ
	|	ИЗ
	|		РегистрБухгалтерии.Типовой.Остатки(
	|				&КонецМесяца,
	|				Счет В ИЕРАРХИИ (&СчетУчетаБУ),
	|				&ВидСубконтоРБП,
	|				Организация = &Организация
	|					И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|					И НЕ Субконто1.СпособСписания = ЗНАЧЕНИЕ(Перечисление.СпособыСписанияРБП.НеРассчитывать)) КАК ТиповойОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""НУ"",
	|		НалоговыйОстатки.Субконто1,
	|		NULL,
	|		0,
	|		НалоговыйОстатки.СчетУчетаНУ,
	|		СУММА(НалоговыйОстатки.СуммаОстатокДтНУ),
	|		СУММА(НалоговыйОстатки.СуммаОстатокДтПР),
	|		НалоговыйОстатки.ВидУчета
	|	ИЗ
	|		(ВЫБРАТЬ
	|			НалоговыйОстатки.Субконто1.Сумма КАК Сумма,
	|			НалоговыйОстатки.Субконто1 КАК Субконто1,
	|			НалоговыйОстатки.Счет КАК СчетУчетаНУ,
	|			ВЫБОР
	|				КОГДА НалоговыйОстатки.ВидУчета = &ВидУчетаНУ
	|					ТОГДА НалоговыйОстатки.СуммаОстатокДт
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК СуммаОстатокДтНУ,
	|			ВЫБОР
	|				КОГДА НалоговыйОстатки.ВидУчета В ИЕРАРХИИ (&ВидУчетаПР)
	|					ТОГДА НалоговыйОстатки.СуммаОстатокДт
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК СуммаОстатокДтПР,
	|			НалоговыйОстатки.ВидУчета КАК ВидУчета
	|		ИЗ
	|			РегистрБухгалтерии.Налоговый.Остатки(
	|					&КонецМесяца,
	|					Счет В (&СчетУчетаНУ),
	|					&ВидСубконтоРБП,
	|					Организация = &Организация
	|						И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|						И НЕ Субконто1.СпособСписания = ЗНАЧЕНИЕ(Перечисление.СпособыСписанияРБП.НеРассчитывать)) КАК НалоговыйОстатки) КАК НалоговыйОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НалоговыйОстатки.СчетУчетаНУ,
	|		НалоговыйОстатки.ВидУчета,
	|		НалоговыйОстатки.Субконто1) КАК ДанныеУчета
	|ИТОГИ
	|	МАКСИМУМ(СпособСписания),
	|	СУММА(СуммаОстатокДтБУ),
	|	СУММА(СуммаОстатокДтНУ),
	|	СУММА(СуммаОстатокДтПР)
	|ПО
	|	Субконто1";
	
	Результат = Запрос.Выполнить();
	
	ВидРО = Перечисления.ВидыРегламентныхОпераций.СписаниеРБПБУ;
	
	ВыборкаРБП = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");

	Пока ВыборкаРБП.Следующий() Цикл		
		РБП    				= ВыборкаРБП.Субконто1;
		ПредставлениеРБП 	= СокрЛП(ВыборкаРБП.ПредставлениеСубконто1);
		
		Если НЕ ЗначениеЗаполнено(РБП) Тогда
			Продолжить;
		КонецЕсли;
		
		Если  НЕ ЗначениеЗаполнено(ВыборкаРБП.ДатаНачалаСписания) ИЛИ
			НЕ ЗначениеЗаполнено(ВыборкаРБП.ДатаОкончанияСписания) ТОГДА
			
			ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """ + ПредставлениеРБП + """ (код "+ ВыборкаРБП.Код +") не заполнен период списания расходов!";
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,ПредставлениеРБП, , ЭтотОбъект,  ВидРО);				
			
			Продолжить;
		КонецЕсли;					
		
		Если НЕ ЗначениеЗаполнено(ВыборкаРБП.СпособСписания) Тогда
			ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """ + ПредставлениеРБП + """ (код "+ ВыборкаРБП.Код +") не заполнен способ списания расходов!";
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,ПредставлениеРБП, , ЭтотОбъект,  ВидРО);				
			
			Продолжить;
		КонецЕсли;
		
		
		Если ВыборкаРБП.СпособСписания = Перечисления.СпособыСписанияРБП.Равномерно и НЕ ЗначениеЗаполнено(ВыборкаРБП.СуммаПервоначальногоПризнания) ТОГДА
			ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """ + ПредставлениеРБП + """ (код "+ ВыборкаРБП.Код +") не указана сумма затрат!";
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,ПредставлениеРБП, , ЭтотОбъект,  ВидРО);				
			
			Продолжить;
		КонецЕсли;		
		
		Если ВыборкаРБП.СпособСписания = Перечисления.СпособыСписанияРБП.Равномерно и ВыборкаРБП.СуммаПервоначальногоПризнания < ВыборкаРБП.СуммаОстатокДтБУ ТОГДА
			
			ТекстСчетУчета = ?(ВыборкаРБП.СчетУчетаБУ <> Null, "( " + ВыборкаРБП.СчетУчетаБУ + " ) ", "");	
			
			ТекстСообщения = "Сумма затрат ("+ВыборкаРБП.СуммаОстатокДтБУ+") в бухгалтерском учете "+ТекстСчетУчета+"для статьи """ + ПредставлениеРБП + """ (код "+ ВыборкаРБП.Код +") превышает сумму, указанную в справочнике ""Расходы будущих периодов"" ("+ ВыборкаРБП.СуммаПервоначальногоПризнания +")!";
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,ПредставлениеРБП, , ЭтотОбъект,  ВидРО);				
			
			Продолжить;
		КонецЕсли;		
		
		Если ВыборкаРБП.СпособСписания = Перечисления.СпособыСписанияРБП.Равномерно Тогда
			// Для равномерного способа сумма списания определяется исходя из реквизитов справочника
			СтруктураРезультатаРасчета 	= СуммаСписанияЗаМесяц(ВыборкаРБП.Субконто1, ВыборкаРБП.СпособСписания, ВыборкаРБП.ДатаНачалаСписания, ВыборкаРБП.ДатаОкончанияСписания, ВыборкаРБП.СуммаПервоначальногоПризнания);
			ОбщаяСуммаСписанияБУ 		= Мин(СтруктураРезультатаРасчета.СуммаТекущегоМесяца, ВыборкаРБП.СуммаОстатокДтБУ);
			// Суммы в НУ определяются по данным списания в БУ
			ОбщаяСуммаСписанияНУ = Мин(ОбщаяСуммаСписанияБУ, ВыборкаРБП.СуммаОстатокДтНУ);
			ОбщаяСуммаСписанияПР = ?(ВыборкаРБП.СуммаОстатокДтБУ = 0, ВыборкаРБП.СуммаОстатокДтПР, ВыборкаРБП.СуммаОстатокДтПР * ОбщаяСуммаСписанияБУ/ВыборкаРБП.СуммаОстатокДтБУ);
			ОбщаяСуммаСписанияВР = ОбщаяСуммаСписанияБУ - ОбщаяСуммаСписанияНУ - ОбщаяСуммаСписанияПР;
		Иначе
			// для способа ПоОстаточнойСтоимости сумма списания определяется исходя из остатка счета и оставшегося периода списания			
			СтруктураРезультатаРасчета = СуммаСписанияЗаМесяц(ВыборкаРБП.Субконто1, ВыборкаРБП.СпособСписания, Макс(ВыборкаРБП.ДатаНачалаСписания, мНачДата), ВыборкаРБП.ДатаОкончанияСписания, ВыборкаРБП.СуммаОстатокДтБУ);
			ОбщаяСуммаСписанияБУ 	   = СтруктураРезультатаРасчета.СуммаТекущегоМесяца;
			// Суммы в НУ определяются по остаткам в НУ с учетом ВР по разнице между итоговым списанием за месяц в БУ и НУ
			СтруктураРезультатаРасчетаНУ = СуммаСписанияЗаМесяц(ВыборкаРБП.Субконто1, ВыборкаРБП.СпособСписания, Макс(ВыборкаРБП.ДатаНачалаСписания, мНачДата), ВыборкаРБП.ДатаОкончанияСписания, ВыборкаРБП.СуммаОстатокДтНУ);
			ОбщаяСуммаСписанияНУ = СтруктураРезультатаРасчетаНУ.СуммаТекущегоМесяца;
			
			СтруктураРезультатаРасчетаПР = СуммаСписанияЗаМесяц(ВыборкаРБП.Субконто1, ВыборкаРБП.СпособСписания, Макс(ВыборкаРБП.ДатаНачалаСписания, мНачДата), ВыборкаРБП.ДатаОкончанияСписания, ВыборкаРБП.СуммаОстатокДтПР);
			ОбщаяСуммаСписанияПР = СтруктураРезультатаРасчетаПР.СуммаТекущегоМесяца;						
			
			ОбщаяСуммаСписанияВР = ОбщаяСуммаСписанияБУ - ОбщаяСуммаСписанияНУ - ОбщаяСуммаСписанияПР;
		КонецЕсли;
		
		ПризнакСписанияСуммыОстатка = Ложь;
		Если КонецМесяца(ВыборкаРБП.ДатаОкончанияСписания) = КонецМесяца(Дата) Тогда
			// Если это последний период списания РБП, то списываем всю сумму
			ПризнакСписанияСуммыОстатка = Истина;
		КонецЕсли;	
		
		// Временные разницы
		ИсточникОтнесенияВР  = ?(ОбщаяСуммаСписанияНУ = 0 и ОбщаяСуммаСписанияПР = 0, "БУ","НУ");
		
		ВыборкаПоСчетам = ВыборкаРБП.Выбрать();
		Пока ВыборкаПоСчетам.Следующий() Цикл					
			// Отражение в бухгалтерском учете
			Если ВыборкаПоСчетам.ВидДанных = "БУ" Тогда
				Если ОбщаяСуммаСписанияБУ = 0 Тогда
					Продолжить;
				КонецЕсли;	
				
				СуммаСписанияБУ = ?(ВыборкаРБП.СуммаОстатокДтБУ = 0, ВыборкаПоСчетам.СуммаОстатокДтБУ,ОбщаяСуммаСписанияБУ * ВыборкаПоСчетам.СуммаОстатокДтБУ/ВыборкаРБП.СуммаОстатокДтБУ);
				
				Если ПризнакСписанияСуммыОстатка Тогда
					// списываем в последнем месяце все
					СуммаСписанияБУ = ВыборкаПоСчетам.СуммаОстатокДтБУ;					
				КонецЕсли;	
				
				СчетБУ = ВыборкаПоСчетам.СчетЗатратБУ;				
							
				//Сформировать проводку БУ				
				Если (ВыборкаПоСчетам.СуммаОстатокДтБУ = 0) ИЛИ (СуммаСписанияБУ = 0) Тогда
					Продолжить;
				КонецЕсли;
								
				
				Если СписаниеРБПБУ И НЕ ЗначениеЗаполнено(СчетБУ) Тогда					
					ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ ПредставлениеРБП + """ (код "+ ВыборкаПоСчетам.Код +")  не заполнен реквизит ""Счет"" !";
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,ПредставлениеРБП, , ЭтотОбъект,  ВидРО);				
					Продолжить;
				КонецЕсли;
				
				ПроводкаБУ = мПроводкиБУ.Добавить();
				ПроводкаБУ.Период       = Дата;
				ПроводкаБУ.Организация  = СтруктураШапкиДокумента.Организация;
				
				ПроводкаБУ.СчетДт       = СчетБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 1, ВыборкаПоСчетам.СубконтоЗатратБУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 2, ВыборкаПоСчетам.СубконтоЗатратБУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 3, ВыборкаПоСчетам.СубконтоЗатратБУ3);
				
				ПроводкаБУ.СчетКт       = ВыборкаПоСчетам.СчетУчетаБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, "РасходыБудущихПериодов", РБП);				
				ПроводкаБУ.Сумма        = СуммаСписанияБУ;
				
				ПроводкаБУ.Содержание   = "РБП за " + ПредставлениеПериода(мНачДата, мКонДата, "ФП=Истина");
				ПроводкаБУ.НомерЖурнала = "ФР";
				ПроводкаБУ.ВидРегламентнойОперации = ВидРО;
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаБУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				
				// Запись во вспомогательный регистр сведений
				СтрокаЗаписьРасчетаРБП = ЗаписьРасчетаРБП.Добавить();
				СтрокаЗаписьРасчетаРБП.СпособСписания		= ВыборкаРБП.СпособСписания;
				СтрокаЗаписьРасчетаРБП.ДатаНачала 			= СтруктураРезультатаРасчета.ДатаНачалаСписания;				
				СтрокаЗаписьРасчетаРБП.ДатаОкончания 		= ВыборкаРБП.ДатаОкончанияСписания;				
				СтрокаЗаписьРасчетаРБП.КоличествоМесяцев	= СтруктураРезультатаРасчета.КоличествоМесяцев;		
				
				СтрокаЗаписьРасчетаРБП.СчетУчета 			= ВыборкаПоСчетам.СчетУчетаБУ;
				СтрокаЗаписьРасчетаРБП.СчетСписания 		= СчетБУ;
				СтрокаЗаписьРасчетаРБП.Сумма 				= СуммаСписанияБУ;
				СтрокаЗаписьРасчетаРБП.Статья 				= РБП;
				СтрокаЗаписьРасчетаРБП.СуммаДоговора 		= ВыборкаРБП.СуммаПервоначальногоПризнания;
				СтрокаЗаписьРасчетаРБП.НачОстаток	 		= ВыборкаПоСчетам.СуммаОстатокДтБУ;
				СтрокаЗаписьРасчетаРБП.КонОстаток 			= ВыборкаПоСчетам.СуммаОстатокДтБУ - СуммаСписанияБУ;
			
				// Временные разницы
				Если СтруктураШапкиДокумента.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль  и ИсточникОтнесенияВР = "БУ" Тогда
					СуммаСписанияВР = ?(ВыборкаРБП.СуммаОстатокДтБУ = 0, 0, ОбщаяСуммаСписанияВР * ВыборкаПоСчетам.СуммаОстатокДтБУ/ВыборкаРБП.СуммаОстатокДтБУ);
					Если СуммаСписанияВР = 0  Тогда
						Продолжить;
					КонецЕсли;	
					
					СчетНУСоответствующийСчетуБУ = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ВыборкаПоСчетам.СчетУчетаБУ), , , СтруктураШапкиДокумента.Дата);					
					Если НЕ ЗначениеЗаполнено(СчетНУСоответствующийСчетуБУ) Тогда
						ТекстСообщения = "Для РБП """ + ПредставлениеРБП + """ (код "+ ВыборкаПоСчетам.Код +") не найдено соответствие для счета БУ " +  ВыборкаПоСчетам.СчетУчетаБУ + ", разницы между БУ и НУ не рассчитаны";
						ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,ПредставлениеРБП, ,ЭтотОбъект,ВидРО);				
						Продолжить;
					КонецЕсли;
					
                    Если НЕ ЗначениеЗаполнено(ВыборкаПоСчетам.СчетЗатратНУ) Тогда
						ТекстСообщения = "Для РБП """ + ПредставлениеРБП + """ (код "+ ВыборкаПоСчетам.Код +") не указан счет отнесения затрат в НУ. Разницы между БУ и НУ не рассчитаны";
						ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,ПредставлениеРБП, ,ЭтотОбъект,ВидРО);				
						Продолжить;
					КонецЕсли;
					
					ПроводкаНУ = мПроводкиНУ.Добавить();
					ПроводкаНУ.Период       = СтруктураШапкиДокумента.Дата;
					ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
					
					ПроводкаНУ.СчетДт       = ВыборкаПоСчетам.СчетЗатратНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, ВыборкаПоСчетам.СубконтоЗатратНУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, ВыборкаПоСчетам.СубконтоЗатратНУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, ВыборкаПоСчетам.СубконтоЗатратНУ3);
					ПроводкаНУ.ВидУчетаДТ 	= Справочники.ВидыУчетаНУ.ВР;
					
					ПроводкаНУ.СчетКт       = СчетНУСоответствующийСчетуБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "РасходыБудущихПериодов", РБП);				
					ПроводкаНУ.ВидУчетаКТ 	= Справочники.ВидыУчетаНУ.ВР;
					ПроводкаНУ.Сумма        = СуммаСписанияВР;
					
					ПроводкаНУ.Содержание   = "Временная разница по РБП (" + РБП + ") за " + ПредставлениеПериода(мНачДата, мКонДата, "ФП=Истина");
					ПроводкаНУ.НомерЖурнала = "ФР";					
					ПроводкаНУ.ВидРегламентнойОперации = ВидРО;
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
                    
				КонецЕсли;	
			КонецЕсли;		
			
			Если ВыборкаПоСчетам.ВидДанных = "НУ" и СтруктураШапкиДокумента.УчитыватьКПН Тогда												
				
				Если НЕ ЗначениеЗаполнено(ВыборкаПоСчетам.СчетЗатратНУ) Тогда
					ТекстСообщения = "Для РБП """ + ПредставлениеРБП + """ (код "+ ВыборкаПоСчетам.Код +") не указан счет отнесения затрат в НУ. Отражение в НУ невозможно.";
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,ПредставлениеРБП, , ЭтотОбъект, ВидРО);				
					Продолжить;
				КонецЕсли;
					
				ВидУчетаНУ 	= ВыборкаПоСчетам.ВидУчетаНУ;				
				СчетНУ 		= ВыборкаПоСчетам.СчетЗатратНУ;
				Если  ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ Тогда					
					СуммаСписанияНУ = ?(ВыборкаРБП.СуммаОстатокДтНУ = 0, ВыборкаПоСчетам.СуммаОстатокДтНУ,ОбщаяСуммаСписанияНУ * ВыборкаПоСчетам.СуммаОстатокДтНУ/ВыборкаРБП.СуммаОстатокДтНУ);										
					Если СуммаСписанияНУ = 0 Тогда
						Продолжить;
					КонецЕсли;	
					Если ПризнакСписанияСуммыОстатка Тогда
						// списываем в последнем месяце все
						СуммаСписанияНУ= ВыборкаПоСчетам.СуммаОстатокДтНУ;					
					КонецЕсли;	
					
					ПроводкаНУ = мПроводкиНУ.Добавить();
					ПроводкаНУ.Период       = Дата;
					ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
					
					ПроводкаНУ.СчетДт       = СчетНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, ВыборкаПоСчетам.СубконтоЗатратНУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, ВыборкаПоСчетам.СубконтоЗатратНУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, ВыборкаПоСчетам.СубконтоЗатратНУ3);
													
					ПроводкаНУ.СчетКт       = ВыборкаПоСчетам.СчетУчетаНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "РасходыБудущихПериодов", РБП);				
					
					ПроводкаНУ.Сумма        = СуммаСписанияНУ;
					
					ПроводкаНУ.Содержание   = "РБП за " + ПредставлениеПериода(мНачДата, мКонДата, "ФП=Истина");
					ПроводкаНУ.НомерЖурнала = "ФР";
					ПроводкаНУ.ВидРегламентнойОперации = ВидРО;
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
                    					
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, ВидУчетаНУ);
					
					// Запись во вспомогательный регистр сведений
					СтрокаЗаписьРасчетаРБП = ЗаписьРасчетаРБП.Добавить();
					СтрокаЗаписьРасчетаРБП.ВидУчета				= ВидУчетаНУ;
					СтрокаЗаписьРасчетаРБП.СпособСписания		= ВыборкаРБП.СпособСписания;
					СтрокаЗаписьРасчетаРБП.ДатаНачала 			= СтруктураРезультатаРасчета.ДатаНачалаСписания;				
					СтрокаЗаписьРасчетаРБП.ДатаОкончания 		= ВыборкаРБП.ДатаОкончанияСписания;				
					СтрокаЗаписьРасчетаРБП.КоличествоМесяцев	= СтруктураРезультатаРасчета.КоличествоМесяцев;		
					
					СтрокаЗаписьРасчетаРБП.СчетУчета 			= ВыборкаПоСчетам.СчетУчетаНУ;
					СтрокаЗаписьРасчетаРБП.СчетСписания 		= СчетНУ;
					СтрокаЗаписьРасчетаРБП.Сумма 				= СуммаСписанияНУ;
					СтрокаЗаписьРасчетаРБП.Статья 				= РБП;
					СтрокаЗаписьРасчетаРБП.СуммаДоговора 		= ВыборкаРБП.СуммаПервоначальногоПризнания;
					СтрокаЗаписьРасчетаРБП.НачОстаток	 		= ВыборкаПоСчетам.СуммаОстатокДтНУ;
					СтрокаЗаписьРасчетаРБП.КонОстаток 			= ВыборкаПоСчетам.СуммаОстатокДтНУ - СуммаСписанияНУ;
				
					// списываем Постоянную разницу 
				Иначе
					СуммаСписанияПР = ?(ВыборкаРБП.СуммаОстатокДтПР = 0, ВыборкаПоСчетам.СуммаОстатокДтПР,ОбщаяСуммаСписанияПР * ВыборкаПоСчетам.СуммаОстатокДтПР/ВыборкаРБП.СуммаОстатокДтПР);										
										
					Если СуммаСписанияПР = 0 Тогда
						Продолжить;
					КонецЕсли;	
					
					Если ПризнакСписанияСуммыОстатка Тогда
						// списываем в последнем месяце все
						СуммаСписанияПР = ВыборкаПоСчетам.СуммаОстатокДтПР;					
					КонецЕсли;	
					
					ПроводкаНУ = мПроводкиНУ.Добавить();
					ПроводкаНУ.Период       = Дата;
					ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
					
					ПроводкаНУ.СчетДт       = ВыборкаПоСчетам.СчетЗатратНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, ВыборкаПоСчетам.СубконтоЗатратНУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, ВыборкаПоСчетам.СубконтоЗатратНУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, ВыборкаПоСчетам.СубконтоЗатратНУ3);
										
					ПроводкаНУ.СчетКт       = ВыборкаПоСчетам.СчетУчетаНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "РасходыБудущихПериодов", РБП);				
				
					ПроводкаНУ.Сумма        = СуммаСписанияПР;
					
					ПроводкаНУ.Содержание   = "РБП за " + ПредставлениеПериода(мНачДата, мКонДата, "ФП=Истина");
					ПроводкаНУ.НомерЖурнала = "ФР";
					ПроводкаНУ.ВидРегламентнойОперации = ВидРО;
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
                    
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, ВидУчетаНУ);
					
					// Запись во вспомогательный регистр сведений
					СтрокаЗаписьРасчетаРБП = ЗаписьРасчетаРБП.Добавить();
					СтрокаЗаписьРасчетаРБП.ВидУчета				= ВидУчетаНУ;
					СтрокаЗаписьРасчетаРБП.СпособСписания		= ВыборкаРБП.СпособСписания;
					СтрокаЗаписьРасчетаРБП.ДатаНачала 			= СтруктураРезультатаРасчета.ДатаНачалаСписания;				
					СтрокаЗаписьРасчетаРБП.ДатаОкончания 		= ВыборкаРБП.ДатаОкончанияСписания;				
					СтрокаЗаписьРасчетаРБП.КоличествоМесяцев	= СтруктураРезультатаРасчета.КоличествоМесяцев;		
					
					СтрокаЗаписьРасчетаРБП.СчетУчета 			= ВыборкаПоСчетам.СчетУчетаНУ;
					СтрокаЗаписьРасчетаРБП.СчетСписания 		= СчетНУ;
					СтрокаЗаписьРасчетаРБП.Сумма 				= СуммаСписанияПР;
					СтрокаЗаписьРасчетаРБП.Статья 				= РБП;
					СтрокаЗаписьРасчетаРБП.СуммаДоговора 		= ВыборкаРБП.СуммаПервоначальногоПризнания;
					СтрокаЗаписьРасчетаРБП.НачОстаток	 		= ВыборкаПоСчетам.СуммаОстатокДтПР;
					СтрокаЗаписьРасчетаРБП.КонОстаток 			= ВыборкаПоСчетам.СуммаОстатокДтПР - СуммаСписанияПР;
				КонецЕсли;	// Если  ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ Тогда					
				
				// Временные разницы
				Если СтруктураШапкиДокумента.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль  и ИсточникОтнесенияВР = "НУ" Тогда
					СуммаСписанияВР = ?((ВыборкаРБП.СуммаОстатокДтПР + ВыборкаРБП.СуммаОстатокДтНУ) = 0,0, ОбщаяСуммаСписанияВР * (ВыборкаПоСчетам.СуммаОстатокДтПР + ВыборкаПоСчетам.СуммаОстатокДтНУ)/(ВыборкаРБП.СуммаОстатокДтПР + ВыборкаРБП.СуммаОстатокДтНУ));
					
					Если СуммаСписанияВР = 0  Тогда
						Продолжить;
					КонецЕсли;											
                    				
					ПроводкаНУ = мПроводкиНУ.Добавить();
					ПроводкаНУ.Период       = СтруктураШапкиДокумента.Дата;
					ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
					
					ПроводкаНУ.СчетДт       = ВыборкаПоСчетам.СчетЗатратНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, ВыборкаПоСчетам.СубконтоЗатратНУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, ВыборкаПоСчетам.СубконтоЗатратНУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, ВыборкаПоСчетам.СубконтоЗатратНУ3);
					ПроводкаНУ.ВидУчетаДТ 	= Справочники.ВидыУчетаНУ.ВР;
					
					ПроводкаНУ.СчетКт       = ВыборкаПоСчетам.СчетУчетаНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "РасходыБудущихПериодов", РБП);				
					ПроводкаНУ.ВидУчетаКТ 	= Справочники.ВидыУчетаНУ.ВР;
					ПроводкаНУ.Сумма        = СуммаСписанияВР;
					
					ПроводкаНУ.Содержание   = "Временная разница по РБП (" + РБП + ") за " + ПредставлениеПериода(мНачДата, мКонДата, "ФП=Истина");
					ПроводкаНУ.НомерЖурнала = "ФР";		
					ПроводкаНУ.ВидРегламентнойОперации = ВидРО;
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
                    					
					// Запись во вспомогательный регистр сведений
					СтрокаЗаписьРасчетаРБП = ЗаписьРасчетаРБП.Добавить();
					СтрокаЗаписьРасчетаРБП.ВидУчета				= ВидУчетаНУ;
					СтрокаЗаписьРасчетаРБП.СпособСписания		= ВыборкаРБП.СпособСписания;
					СтрокаЗаписьРасчетаРБП.ДатаНачала 			= СтруктураРезультатаРасчета.ДатаНачалаСписания;				
					СтрокаЗаписьРасчетаРБП.ДатаОкончания 		= ВыборкаРБП.ДатаОкончанияСписания;				
					СтрокаЗаписьРасчетаРБП.КоличествоМесяцев	= СтруктураРезультатаРасчета.КоличествоМесяцев;		
					
					СтрокаЗаписьРасчетаРБП.СчетУчета 			= ВыборкаПоСчетам.СчетУчетаНУ;
					СтрокаЗаписьРасчетаРБП.СчетСписания 		= СчетНУ;
					СтрокаЗаписьРасчетаРБП.Сумма 				= СуммаСписанияВР;
					СтрокаЗаписьРасчетаРБП.Статья 				= РБП;
					СтрокаЗаписьРасчетаРБП.СуммаДоговора 		= ВыборкаРБП.СуммаПервоначальногоПризнания;
					СтрокаЗаписьРасчетаРБП.НачОстаток	 		= ВыборкаРБП.СуммаОстатокДтБУ - (ВыборкаРБП.СуммаОстатокДтПР + ВыборкаРБП.СуммаОстатокДтНУ);
					СтрокаЗаписьРасчетаРБП.КонОстаток 			= СтрокаЗаписьРасчетаРБП.НачОстаток - СуммаСписанияВР;
				КонецЕсли;	// Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ  и ИсточникОтнесенияВР = "НУ" Тогда

			КонецЕсли; // Если ВыборкаПоСчетам.ВидДанных = "НУ" и СтруктураШапкиДокумента.УчитыватьКПН Тогда												
			
		КонецЦикла; // Выборка по счетам		
		
	КонецЦикла; // Выборка по Субконто1
	
	мПроводкиБУ.Записать(Ложь);
	мПроводкиНУ.Записать(Ложь);	
	
	ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
											ЗаписьРасчетаРБП,
											РегистрыСведений.РасчетСписанияРБП,
											"Организация,СтруктурноеПодразделение,ПериодРасчета,Активность,Регистратор,
											|Статья,СчетУчета,СчетСписания,ДатаНачала,ДатаОкончания,
											|ВидУчета,КоличествоМесяцев,СуммаДоговора",											
											"Сумма,НачОстаток,КонОстаток");
											

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ПРОИЗВОДСТВЕННОЙ ЧАСТИ

// Формируется запрос по косвенным затратам в котором собрана
// информация о косвенных затратах их способе их распределения.
//
Процедура СформироватьЗапросПоКосвеннымЗатратам(СтруктураШапкиДокумента, РезультатЗапроса, СтруктураДопПараметров)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата", мНачДата);
	Запрос.УстановитьПараметр("КонДата", мКонДата);
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Запрос.УстановитьПараметр("СчетЗатрат", ПланыСчетов.Налоговый.НакладныеРасходы);
		Запрос.УстановитьПараметр("ВидУчета"  , СтруктураДопПараметров.ВидУчетаНУ);
		Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Налоговый.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("СчетЗатрат", ПланыСчетов.Типовой.НакладныеРасходы);
		Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Типовой.ПустаяСсылка());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация",         			СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат",  			Справочники.СтатьиЗатрат.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеПодразделение", 			Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеСтруктурноеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.Период,
		               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.Организация,
		               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.СчетЗатратБУ КАК СчетЗатрат,
		               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.СчетЗатратНУ КАК СчетЗатратНУ,
		               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.СтатьяЗатрат,
		               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.СтруктурноеПодразделение,
		               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.Подразделение,
		               |	МетодыРаспределенияКосвенныхРасходов.БазаРаспределения,
		               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СчетЗакрытияБУ,
		               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СубконтоБУ1,
		               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СубконтоБУ2,
		               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СубконтоБУ3,
		               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.МетодРаспределенияЗатрат.Ссылка,
		               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.ПроцентРаспределения,
		               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделениеЗакрытия,
		               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СчетЗакрытияНУ КАК СчетЗакрытияНУ,
		               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СубконтоНУ1,
		               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СубконтоНУ2,
		               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СубконтоНУ3
		               |ПОМЕСТИТЬ МетодыРаспределения
		               |ИЗ
		               |	РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(&КонДата, Организация = &Организация) КАК МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МетодыРаспределенияКосвенныхРасходов.АналитикаРаспределения КАК МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения
		               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МетодыРаспределенияКосвенныхРасходов КАК МетодыРаспределенияКосвенныхРасходов
		               |			ПО МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.Ссылка = МетодыРаспределенияКосвенныхРасходов.Ссылка
		               |		ПО МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.МетодРаспределенияЗатрат = МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.Ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.Период,
		               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.Организация,
		               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.СчетЗатратБУ,
		               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.СчетЗатратНУ,
		               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.СтатьяЗатрат,
		               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.СтруктурноеПодразделение,
		               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.Подразделение,
		               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СчетЗакрытияБУ,
		               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СубконтоБУ1,
		               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СубконтоБУ2,
		               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СубконтоБУ3,
		               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.МетодРаспределенияЗатрат.Ссылка,
		               |	МетодыРаспределенияКосвенныхРасходов.БазаРаспределения,
		               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.ПроцентРаспределения,
		               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СтруктурноеПодразделение,
		               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СчетЗакрытияНУ,
		               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СубконтоНУ1,
		               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СубконтоНУ2,
		               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СубконтоНУ3
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ТаблицаСпособовРаспределения.СчетЗатрат,
		               |	ТаблицаСпособовРаспределения.СтруктурноеПодразделение,
		               |	ТаблицаСпособовРаспределения.Подразделение,
		               |	ТаблицаСпособовРаспределения.СтатьяЗатрат,
		               |	ТаблицаСпособовРаспределения.СуммаОборот КАК Сумма,
		               |	ВЫБОР
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения
		               |		ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломБазаРаспределения
		               |	КОНЕЦ КАК Метод,
		               |	ВЫБОР
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияСчетЗакрытия
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратСчетЗакрытия
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияСчетЗакрытия
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюСчетЗакрытия
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСчетЗакрытия
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСчетЗакрытия
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСчетЗакрытия
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломСчетЗакрытия
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломСчетЗакрытия
		               |		ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломСчетЗакрытия
		               |	КОНЕЦ КАК СчетЗакрытия,
		               |	ВЫБОР
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияСчетЗакрытияНУ
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратСчетЗакрытияНУ
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияСчетЗакрытияНУ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюСчетЗакрытияНУ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСчетЗакрытияНУ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСчетЗакрытияНУ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСчетЗакрытияНУ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломСчетЗакрытияНУ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломСчетЗакрытияНУ
		               |		ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломСчетЗакрытияНУ
		               |	КОНЕЦ КАК СчетЗакрытияНУ,
		               |	ВЫБОР
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияСчетЗатратНУ
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратСчетЗатратНУ
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияСчетЗатратНУ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюСчетЗатратНУ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСчетЗатратНУ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСчетЗатратНУ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСчетЗатратНУ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломСчетЗатратНУ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломСчетЗатратНУ
		               |		ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломСчетЗатратНУ
		               |	КОНЕЦ КАК СчетЗатратНУ,
		               |	ВЫБОР
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ВЫБОР
		               |					КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияСтруктурноеПодразделениеЗакрытия ССЫЛКА Справочник.Организации
		               |						ТОГДА ТаблицаСпособовРаспределения.СтруктурноеПодразделение
		               |					ИНАЧЕ ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияСтруктурноеПодразделениеЗакрытия
		               |				КОНЕЦ
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ВЫБОР
		               |					КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратСтруктурноеПодразделениеЗакрытия ССЫЛКА Справочник.Организации
		               |						ТОГДА ТаблицаСпособовРаспределения.СтруктурноеПодразделение
		               |					ИНАЧЕ ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратСтруктурноеПодразделениеЗакрытия
		               |				КОНЕЦ
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ВЫБОР
		               |					КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияСтруктурноеПодразделениеЗакрытия ССЫЛКА Справочник.Организации
		               |						ТОГДА ТаблицаСпособовРаспределения.СтруктурноеПодразделение
		               |					ИНАЧЕ ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияСтруктурноеПодразделениеЗакрытия
		               |				КОНЕЦ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ВЫБОР
		               |					КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюСтруктурноеПодразделениеЗакрытия ССЫЛКА Справочник.Организации
		               |						ТОГДА ТаблицаСпособовРаспределения.СтруктурноеПодразделение
		               |					ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюСтруктурноеПодразделениеЗакрытия
		               |				КОНЕЦ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ВЫБОР
		               |					КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСтруктурноеПодразделениеЗакрытия ССЫЛКА Справочник.Организации
		               |						ТОГДА ТаблицаСпособовРаспределения.СтруктурноеПодразделение
		               |					ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСтруктурноеПодразделениеЗакрытия
		               |				КОНЕЦ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ВЫБОР
		               |					КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСтруктурноеПодразделениеЗакрытия ССЫЛКА Справочник.Организации
		               |						ТОГДА ТаблицаСпособовРаспределения.СтруктурноеПодразделение
		               |					ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСтруктурноеПодразделениеЗакрытия
		               |				КОНЕЦ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ВЫБОР
		               |					КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСтруктурноеПодразделениеЗакрытия ССЫЛКА Справочник.Организации
		               |						ТОГДА ТаблицаСпособовРаспределения.СтруктурноеПодразделение
		               |					ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСтруктурноеПодразделениеЗакрытия
		               |				КОНЕЦ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ВЫБОР
		               |					КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломСтруктурноеПодразделениеЗакрытия ССЫЛКА Справочник.Организации
		               |						ТОГДА ТаблицаСпособовРаспределения.СтруктурноеПодразделение
		               |					ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломСтруктурноеПодразделениеЗакрытия
		               |				КОНЕЦ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ВЫБОР
		               |					КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломСтруктурноеПодразделениеЗакрытия ССЫЛКА Справочник.Организации
		               |						ТОГДА ТаблицаСпособовРаспределения.СтруктурноеПодразделение
		               |					ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломСтруктурноеПодразделениеЗакрытия
		               |				КОНЕЦ
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломСтруктурноеПодразделениеЗакрытия ССЫЛКА Справочник.Организации
		               |					ТОГДА ТаблицаСпособовРаспределения.СтруктурноеПодразделение
		               |				ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломСтруктурноеПодразделениеЗакрытия
		               |			КОНЕЦ
		               |	КОНЕЦ КАК СтруктурноеПодразделениеЗакрытия,
		               |	ВЫБОР
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияСубконто1
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратСубконто1
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияСубконто1
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюСубконто1
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСубконто1
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСубконто1
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСубконто1
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломСубконто1
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломСубконто1
		               |		ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломСубконто1
		               |	КОНЕЦ КАК СубконтоЗакрытия1,
		               |	ВЫБОР
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияСубконто2
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратСубконто2
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияСубконто2
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюСубконто2
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСубконто2
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСубконто2
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСубконто2
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломСубконто2
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломСубконто2
		               |		ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломСубконто2
		               |	КОНЕЦ КАК СубконтоЗакрытия2,
		               |	ВЫБОР
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияСубконто3
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратСубконто3
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияСубконто3
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюСубконто3
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСубконто3
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСубконто3
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСубконто3
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломСубконто3
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломСубконто3
		               |		ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломСубконто3
		               |	КОНЕЦ КАК СубконтоЗакрытия3,
		               |	ВЫБОР
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияСубконтоНУ1
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратСубконтоНУ1
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияСубконтоНУ1
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюСубконтоНУ1
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСубконтоНУ1
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСубконтоНУ1
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСубконтоНУ1
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломСубконтоНУ1
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломСубконтоНУ1
		               |		ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломСубконтоНУ1
		               |	КОНЕЦ КАК СубконтоЗакрытияНУ1,
		               |	ВЫБОР
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияСубконтоНУ2
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратСубконтоНУ2
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияСубконтоНУ2
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюСубконтоНУ2
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСубконтоНУ2
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСубконтоНУ2
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСубконтоНУ2
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломСубконтоНУ2
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломСубконтоНУ2
		               |		ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломСубконтоНУ2
		               |	КОНЕЦ КАК СубконтоЗакрытияНУ2,
		               |	ВЫБОР
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияСубконтоНУ3
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратСубконтоНУ3
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияСубконтоНУ3
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюСубконтоНУ3
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСубконтоНУ3
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСубконтоНУ3
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСубконтоНУ3
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломСубконтоНУ3
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломСубконтоНУ3
		               |		ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломСубконтоНУ3
		               |	КОНЕЦ КАК СубконтоЗакрытияНУ3,
		               |	ВЫБОР
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ВЫБОР
		               |					КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияСчетЗакрытия В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_))
		               |						ТОГДА ИСТИНА
		               |					ИНАЧЕ ЛОЖЬ
		               |				КОНЕЦ
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ВЫБОР
		               |					КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратСчетЗакрытия В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_))
		               |						ТОГДА ИСТИНА
		               |					ИНАЧЕ ЛОЖЬ
		               |				КОНЕЦ
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ВЫБОР
		               |					КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияСчетЗакрытия В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_))
		               |						ТОГДА ИСТИНА
		               |					ИНАЧЕ ЛОЖЬ
		               |				КОНЕЦ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ВЫБОР
		               |					КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюСчетЗакрытия В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_))
		               |						ТОГДА ИСТИНА
		               |					ИНАЧЕ ЛОЖЬ
		               |				КОНЕЦ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ВЫБОР
		               |					КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСчетЗакрытия В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_))
		               |						ТОГДА ИСТИНА
		               |					ИНАЧЕ ЛОЖЬ
		               |				КОНЕЦ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ВЫБОР
		               |					КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСчетЗакрытия В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_))
		               |						ТОГДА ИСТИНА
		               |					ИНАЧЕ ЛОЖЬ
		               |				КОНЕЦ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ВЫБОР
		               |					КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСчетЗакрытия В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_))
		               |						ТОГДА ИСТИНА
		               |					ИНАЧЕ ЛОЖЬ
		               |				КОНЕЦ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ВЫБОР
		               |					КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломСчетЗакрытия В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_))
		               |						ТОГДА ИСТИНА
		               |					ИНАЧЕ ЛОЖЬ
		               |				КОНЕЦ
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ВЫБОР
		               |					КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломСчетЗакрытия В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_))
		               |						ТОГДА ИСТИНА
		               |					ИНАЧЕ ЛОЖЬ
		               |				КОНЕЦ
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломСчетЗакрытия В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_))
		               |					ТОГДА ИСТИНА
		               |				ИНАЧЕ ЛОЖЬ
		               |			КОНЕЦ
		               |	КОНЕЦ КАК ПризнакПроизводсвенногоСчета,
		               |	ВЫБОР
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияПроцентРаспределения
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратПроцентРаспределения
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияПроцентРаспределения
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюПроцентРаспределения
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратПроцентРаспределения
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюПроцентРаспределения
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломПроцентРаспределения
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломПроцентРаспределения
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломПроцентРаспределения
		               |		ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломПроцентРаспределения
		               |	КОНЕЦ КАК ПроцентРаспределения,
		               |	ВЫБОР
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияМетодРаспределенияЗатратСсылка
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратМетодРаспределенияЗатратСсылка
		               |		КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияМетодРаспределенияЗатратСсылка
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюМетодРаспределенияЗатратСсылка
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратМетодРаспределенияЗатратСсылка
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюМетодРаспределенияЗатратСсылка
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломМетодРаспределенияЗатратСсылка
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломМетодРаспределенияЗатратСсылка
		               |		КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломМетодРаспределенияЗатратСсылка
		               |		ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломМетодРаспределенияЗатратСсылка
		               |	КОНЕЦ КАК МетодРаспределенияЗатратСсылка
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ВсеСпособыРаспределения.БазаРаспределения КАК ВсеСпособыРаспределенияБазаРаспределения,
		               |		ВсеСпособыРаспределения.СчетЗакрытияБУ КАК ВсеСпособыРаспределенияСчетЗакрытия,
		               |		ВсеСпособыРаспределения.СчетЗатратНУ КАК ВсеСпособыРаспределенияСчетЗатратНУ,
		               |		ВсеСпособыРаспределения.СубконтоБУ1 КАК ВсеСпособыРаспределенияСубконто1,
		               |		ВсеСпособыРаспределения.СубконтоБУ2 КАК ВсеСпособыРаспределенияСубконто2,
		               |		ВсеСпособыРаспределения.СубконтоБУ3 КАК ВсеСпособыРаспределенияСубконто3,
		               |		ВсеСпособыРаспределения.СчетЗакрытияНУ КАК ВсеСпособыРаспределенияСчетЗакрытияНУ,
		               |		ВсеСпособыРаспределения.СубконтоНУ1 КАК ВсеСпособыРаспределенияСубконтоНУ1,
		               |		ВсеСпособыРаспределения.СубконтоНУ2 КАК ВсеСпособыРаспределенияСубконтоНУ2,
		               |		ВсеСпособыРаспределения.СубконтоНУ3 КАК ВсеСпособыРаспределенияСубконтоНУ3,
		               |		ВсеСпособыРаспределения.МетодРаспределенияЗатратСсылка КАК ВсеСпособыРаспределенияМетодРаспределенияЗатратСсылка,
		               |		ВсеСпособыРаспределения.ПроцентРаспределения КАК ВсеСпособыРаспределенияПроцентРаспределения,
		               |		ВсеСпособыРаспределения.СтруктурноеПодразделениеЗакрытия КАК ВсеСпособыРаспределенияСтруктурноеПодразделениеЗакрытия,
		               |		ВсеСпособыРаспределенияКромеСтатьиЗатрат.БазаРаспределения КАК ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения,
		               |		ВсеСпособыРаспределенияКромеСтатьиЗатрат.СчетЗакрытия КАК ВсеСпособыРаспределенияКромеСтатьиЗатратСчетЗакрытия,
		               |		ВсеСпособыРаспределенияКромеСтатьиЗатрат.СчетЗатратНУ КАК ВсеСпособыРаспределенияКромеСтатьиЗатратСчетЗатратНУ,
		               |		ВсеСпособыРаспределенияКромеСтатьиЗатрат.Субконто1 КАК ВсеСпособыРаспределенияКромеСтатьиЗатратСубконто1,
		               |		ВсеСпособыРаспределенияКромеСтатьиЗатрат.Субконто2 КАК ВсеСпособыРаспределенияКромеСтатьиЗатратСубконто2,
		               |		ВсеСпособыРаспределенияКромеСтатьиЗатрат.Субконто3 КАК ВсеСпособыРаспределенияКромеСтатьиЗатратСубконто3,
		               |		ВсеСпособыРаспределенияКромеСтатьиЗатрат.СчетЗакрытияНУ КАК ВсеСпособыРаспределенияКромеСтатьиЗатратСчетЗакрытияНУ,
		               |		ВсеСпособыРаспределенияКромеСтатьиЗатрат.СубконтоНУ1 КАК ВсеСпособыРаспределенияКромеСтатьиЗатратСубконтоНУ1,
		               |		ВсеСпособыРаспределенияКромеСтатьиЗатрат.СубконтоНУ2 КАК ВсеСпособыРаспределенияКромеСтатьиЗатратСубконтоНУ2,
		               |		ВсеСпособыРаспределенияКромеСтатьиЗатрат.СубконтоНУ3 КАК ВсеСпособыРаспределенияКромеСтатьиЗатратСубконтоНУ3,
		               |		ВсеСпособыРаспределенияКромеСтатьиЗатрат.МетодРаспределенияЗатратСсылка КАК ВсеСпособыРаспределенияКромеСтатьиЗатратМетодРаспределенияЗатратСсылка,
		               |		ВсеСпособыРаспределенияКромеСтатьиЗатрат.ПроцентРаспределения КАК ВсеСпособыРаспределенияКромеСтатьиЗатратПроцентРаспределения,
		               |		ВсеСпособыРаспределенияКромеСтатьиЗатрат.СтруктурноеПодразделениеЗакрытия КАК ВсеСпособыРаспределенияКромеСтатьиЗатратСтруктурноеПодразделениеЗакрытия,
		               |		ВсеСпособыРаспределенияКромеПодразделения.БазаРаспределения КАК ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения,
		               |		ВсеСпособыРаспределенияКромеПодразделения.СчетЗакрытия КАК ВсеСпособыРаспределенияКромеПодразделенияСчетЗакрытия,
		               |		ВсеСпособыРаспределенияКромеПодразделения.СчетЗатратНУ КАК ВсеСпособыРаспределенияКромеПодразделенияСчетЗатратНУ,
		               |		ВсеСпособыРаспределенияКромеПодразделения.Субконто1 КАК ВсеСпособыРаспределенияКромеПодразделенияСубконто1,
		               |		ВсеСпособыРаспределенияКромеПодразделения.Субконто2 КАК ВсеСпособыРаспределенияКромеПодразделенияСубконто2,
		               |		ВсеСпособыРаспределенияКромеПодразделения.Субконто3 КАК ВсеСпособыРаспределенияКромеПодразделенияСубконто3,
		               |		ВсеСпособыРаспределенияКромеПодразделения.СчетЗакрытияНУ КАК ВсеСпособыРаспределенияКромеПодразделенияСчетЗакрытияНУ,
		               |		ВсеСпособыРаспределенияКромеПодразделения.СубконтоНУ1 КАК ВсеСпособыРаспределенияКромеПодразделенияСубконтоНУ1,
		               |		ВсеСпособыРаспределенияКромеПодразделения.СубконтоНУ2 КАК ВсеСпособыРаспределенияКромеПодразделенияСубконтоНУ2,
		               |		ВсеСпособыРаспределенияКромеПодразделения.СубконтоНУ3 КАК ВсеСпособыРаспределенияКромеПодразделенияСубконтоНУ3,
		               |		ВсеСпособыРаспределенияКромеПодразделения.МетодРаспределенияЗатратСсылка КАК ВсеСпособыРаспределенияКромеПодразделенияМетодРаспределенияЗатратСсылка,
		               |		ВсеСпособыРаспределенияКромеПодразделения.ПроцентРаспределения КАК ВсеСпособыРаспределенияКромеПодразделенияПроцентРаспределения,
		               |		ВсеСпособыРаспределенияКромеПодразделения.СтруктурноеПодразделениеЗакрытия КАК ВсеСпособыРаспределенияКромеПодразделенияСтруктурноеПодразделениеЗакрытия,
		               |		СпособыРаспределенияПоСчетуЗатратИПодразделению.БазаРаспределения КАК СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения,
		               |		СпособыРаспределенияПоСчетуЗатратИПодразделению.СчетЗакрытия КАК СпособыРаспределенияПоСчетуЗатратИПодразделениюСчетЗакрытия,
		               |		СпособыРаспределенияПоСчетуЗатратИПодразделению.СчетЗатратНУ КАК СпособыРаспределенияПоСчетуЗатратИПодразделениюСчетЗатратНУ,
		               |		СпособыРаспределенияПоСчетуЗатратИПодразделению.Субконто1 КАК СпособыРаспределенияПоСчетуЗатратИПодразделениюСубконто1,
		               |		СпособыРаспределенияПоСчетуЗатратИПодразделению.Субконто2 КАК СпособыРаспределенияПоСчетуЗатратИПодразделениюСубконто2,
		               |		СпособыРаспределенияПоСчетуЗатратИПодразделению.Субконто3 КАК СпособыРаспределенияПоСчетуЗатратИПодразделениюСубконто3,
		               |		СпособыРаспределенияПоСчетуЗатратИПодразделению.СчетЗакрытияНУ КАК СпособыРаспределенияПоСчетуЗатратИПодразделениюСчетЗакрытияНУ,
		               |		СпособыРаспределенияПоСчетуЗатратИПодразделению.СубконтоНУ1 КАК СпособыРаспределенияПоСчетуЗатратИПодразделениюСубконтоНУ1,
		               |		СпособыРаспределенияПоСчетуЗатратИПодразделению.СубконтоНУ2 КАК СпособыРаспределенияПоСчетуЗатратИПодразделениюСубконтоНУ2,
		               |		СпособыРаспределенияПоСчетуЗатратИПодразделению.СубконтоНУ3 КАК СпособыРаспределенияПоСчетуЗатратИПодразделениюСубконтоНУ3,
		               |		СпособыРаспределенияПоСчетуЗатратИПодразделению.МетодРаспределенияЗатратСсылка КАК СпособыРаспределенияПоСчетуЗатратИПодразделениюМетодРаспределенияЗатратСсылка,
		               |		СпособыРаспределенияПоСчетуЗатратИПодразделению.ПроцентРаспределения КАК СпособыРаспределенияПоСчетуЗатратИПодразделениюПроцентРаспределения,
		               |		СпособыРаспределенияПоСчетуЗатратИПодразделению.СтруктурноеПодразделениеЗакрытия КАК СпособыРаспределенияПоСчетуЗатратИПодразделениюСтруктурноеПодразделениеЗакрытия,
		               |		СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.БазаРаспределения КАК СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения,
		               |		СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.СчетЗатратНУ КАК СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСчетЗатратНУ,
		               |		СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.СчетЗакрытия КАК СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСчетЗакрытия,
		               |		СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.Субконто1 КАК СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСубконто1,
		               |		СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.Субконто2 КАК СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСубконто2,
		               |		СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.Субконто3 КАК СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСубконто3,
		               |		СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.СчетЗакрытияНУ КАК СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСчетЗакрытияНУ,
		               |		СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.СубконтоНУ1 КАК СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСубконтоНУ1,
		               |		СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.СубконтоНУ2 КАК СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСубконтоНУ2,
		               |		СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.СубконтоНУ3 КАК СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСубконтоНУ3,
		               |		СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.МетодРаспределенияЗатратСсылка КАК СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратМетодРаспределенияЗатратСсылка,
		               |		СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.ПроцентРаспределения КАК СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратПроцентРаспределения,
		               |		СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.СтруктурноеПодразделениеЗакрытия КАК СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСтруктурноеПодразделениеЗакрытия,
		               |		СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.БазаРаспределения КАК СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения,
		               |		СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.СчетЗакрытия КАК СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСчетЗакрытия,
		               |		СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.СчетЗатратНУ КАК СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСчетЗатратНУ,
		               |		СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.Субконто1 КАК СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСубконто1,
		               |		СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.Субконто2 КАК СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСубконто2,
		               |		СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.Субконто3 КАК СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСубконто3,
		               |		СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.СчетЗакрытияНУ КАК СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСчетЗакрытияНУ,
		               |		СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.СубконтоНУ1 КАК СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСубконтоНУ1,
		               |		СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.СубконтоНУ2 КАК СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСубконтоНУ2,
		               |		СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.СубконтоНУ3 КАК СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСубконтоНУ3,
		               |		СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.МетодРаспределенияЗатратСсылка КАК СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюМетодРаспределенияЗатратСсылка,
		               |		СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.ПроцентРаспределения КАК СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюПроцентРаспределения,
		               |		СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.СтруктурноеПодразделениеЗакрытия КАК СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСтруктурноеПодразделениеЗакрытия,
		               |		СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.БазаРаспределения КАК СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения,
		               |		СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.СчетЗакрытия КАК СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСчетЗакрытия,
		               |		СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.СчетЗатратНУ КАК СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСчетЗатратНУ,
		               |		СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.Субконто1 КАК СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСубконто1,
		               |		СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.Субконто2 КАК СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСубконто2,
		               |		СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.Субконто3 КАК СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСубконто3,
		               |		СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.СчетЗакрытияНУ КАК СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСчетЗакрытияНУ,
		               |		СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.СубконтоНУ1 КАК СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСубконтоНУ1,
		               |		СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.СубконтоНУ2 КАК СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСубконтоНУ2,
		               |		СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.СубконтоНУ3 КАК СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСубконтоНУ3,
		               |		СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.МетодРаспределенияЗатратСсылка КАК СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломМетодРаспределенияЗатратСсылка,
		               |		СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.ПроцентРаспределения КАК СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломПроцентРаспределения,
		               |		СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.СтруктурноеПодразделениеЗакрытия КАК СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСтруктурноеПодразделениеЗакрытия,
		               |		СпособыРаспределенияПоСтатьеЗатратВЦелом.БазаРаспределения КАК СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения,
		               |		СпособыРаспределенияПоСтатьеЗатратВЦелом.СчетЗакрытия КАК СпособыРаспределенияПоСтатьеЗатратВЦеломСчетЗакрытия,
		               |		СпособыРаспределенияПоСтатьеЗатратВЦелом.СчетЗатратНУ КАК СпособыРаспределенияПоСтатьеЗатратВЦеломСчетЗатратНУ,
		               |		СпособыРаспределенияПоСтатьеЗатратВЦелом.Субконто1 КАК СпособыРаспределенияПоСтатьеЗатратВЦеломСубконто1,
		               |		СпособыРаспределенияПоСтатьеЗатратВЦелом.Субконто2 КАК СпособыРаспределенияПоСтатьеЗатратВЦеломСубконто2,
		               |		СпособыРаспределенияПоСтатьеЗатратВЦелом.Субконто3 КАК СпособыРаспределенияПоСтатьеЗатратВЦеломСубконто3,
		               |		СпособыРаспределенияПоСтатьеЗатратВЦелом.СчетЗакрытияНУ КАК СпособыРаспределенияПоСтатьеЗатратВЦеломСчетЗакрытияНУ,
		               |		СпособыРаспределенияПоСтатьеЗатратВЦелом.СубконтоНУ1 КАК СпособыРаспределенияПоСтатьеЗатратВЦеломСубконтоНУ1,
		               |		СпособыРаспределенияПоСтатьеЗатратВЦелом.СубконтоНУ2 КАК СпособыРаспределенияПоСтатьеЗатратВЦеломСубконтоНУ2,
		               |		СпособыРаспределенияПоСтатьеЗатратВЦелом.СубконтоНУ3 КАК СпособыРаспределенияПоСтатьеЗатратВЦеломСубконтоНУ3,
		               |		СпособыРаспределенияПоСтатьеЗатратВЦелом.МетодРаспределенияЗатратСсылка КАК СпособыРаспределенияПоСтатьеЗатратВЦеломМетодРаспределенияЗатратСсылка,
		               |		СпособыРаспределенияПоСтатьеЗатратВЦелом.ПроцентРаспределения КАК СпособыРаспределенияПоСтатьеЗатратВЦеломПроцентРаспределения,
		               |		СпособыРаспределенияПоСтатьеЗатратВЦелом.СтруктурноеПодразделениеЗакрытия КАК СпособыРаспределенияПоСтатьеЗатратВЦеломСтруктурноеПодразделениеЗакрытия,
		               |		СпособыРаспределенияПоСчетуВЦелом.БазаРаспределения КАК СпособыРаспределенияПоСчетуВЦеломБазаРаспределения,
		               |		СпособыРаспределенияПоСчетуВЦелом.СчетЗакрытия КАК СпособыРаспределенияПоСчетуВЦеломСчетЗакрытия,
		               |		СпособыРаспределенияПоСчетуВЦелом.СчетЗатратНУ КАК СпособыРаспределенияПоСчетуВЦеломСчетЗатратНУ,
		               |		СпособыРаспределенияПоСчетуВЦелом.Субконто1 КАК СпособыРаспределенияПоСчетуВЦеломСубконто1,
		               |		СпособыРаспределенияПоСчетуВЦелом.Субконто2 КАК СпособыРаспределенияПоСчетуВЦеломСубконто2,
		               |		СпособыРаспределенияПоСчетуВЦелом.Субконто3 КАК СпособыРаспределенияПоСчетуВЦеломСубконто3,
		               |		СпособыРаспределенияПоСчетуВЦелом.СчетЗакрытияНУ КАК СпособыРаспределенияПоСчетуВЦеломСчетЗакрытияНУ,
		               |		СпособыРаспределенияПоСчетуВЦелом.СубконтоНУ1 КАК СпособыРаспределенияПоСчетуВЦеломСубконтоНУ1,
		               |		СпособыРаспределенияПоСчетуВЦелом.СубконтоНУ2 КАК СпособыРаспределенияПоСчетуВЦеломСубконтоНУ2,
		               |		СпособыРаспределенияПоСчетуВЦелом.СубконтоНУ3 КАК СпособыРаспределенияПоСчетуВЦеломСубконтоНУ3,
		               |		СпособыРаспределенияПоСчетуВЦелом.МетодРаспределенияЗатратСсылка КАК СпособыРаспределенияПоСчетуВЦеломМетодРаспределенияЗатратСсылка,
		               |		СпособыРаспределенияПоСчетуВЦелом.ПроцентРаспределения КАК СпособыРаспределенияПоСчетуВЦеломПроцентРаспределения,
		               |		СпособыРаспределенияПоСчетуВЦелом.СтруктурноеПодразделениеЗакрытия КАК СпособыРаспределенияПоСчетуВЦеломСтруктурноеПодразделениеЗакрытия,
		               |		СпособыРаспределенияПоОрганизацииВЦелом.БазаРаспределения КАК СпособыРаспределенияПоОрганизацииВЦеломБазаРаспределения,
		               |		СпособыРаспределенияПоОрганизацииВЦелом.СчетЗакрытия КАК СпособыРаспределенияПоОрганизацииВЦеломСчетЗакрытия,
		               |		СпособыРаспределенияПоОрганизацииВЦелом.СчетЗатратНУ КАК СпособыРаспределенияПоОрганизацииВЦеломСчетЗатратНУ,
		               |		СпособыРаспределенияПоОрганизацииВЦелом.Субконто1 КАК СпособыРаспределенияПоОрганизацииВЦеломСубконто1,
		               |		СпособыРаспределенияПоОрганизацииВЦелом.Субконто2 КАК СпособыРаспределенияПоОрганизацииВЦеломСубконто2,
		               |		СпособыРаспределенияПоОрганизацииВЦелом.Субконто3 КАК СпособыРаспределенияПоОрганизацииВЦеломСубконто3,
		               |		СпособыРаспределенияПоОрганизацииВЦелом.СчетЗакрытияНУ КАК СпособыРаспределенияПоОрганизацииВЦеломСчетЗакрытияНУ,
		               |		СпособыРаспределенияПоОрганизацииВЦелом.СубконтоНУ1 КАК СпособыРаспределенияПоОрганизацииВЦеломСубконтоНУ1,
		               |		СпособыРаспределенияПоОрганизацииВЦелом.СубконтоНУ2 КАК СпособыРаспределенияПоОрганизацииВЦеломСубконтоНУ2,
		               |		СпособыРаспределенияПоОрганизацииВЦелом.СубконтоНУ3 КАК СпособыРаспределенияПоОрганизацииВЦеломСубконтоНУ3,
		               |		СпособыРаспределенияПоОрганизацииВЦелом.МетодРаспределенияЗатратСсылка КАК СпособыРаспределенияПоОрганизацииВЦеломМетодРаспределенияЗатратСсылка,
		               |		СпособыРаспределенияПоОрганизацииВЦелом.ПроцентРаспределения КАК СпособыРаспределенияПоОрганизацииВЦеломПроцентРаспределения,
		               |		СпособыРаспределенияПоОрганизацииВЦелом.СтруктурноеПодразделениеЗакрытия КАК СпособыРаспределенияПоОрганизацииВЦеломСтруктурноеПодразделениеЗакрытия,
		               |		ТиповойОбороты.СчетЗатрат КАК СчетЗатрат,
		               |		ТиповойОбороты.Подразделение КАК Подразделение,
		               |		ТиповойОбороты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		               |		ТиповойОбороты.СтатьяЗатрат КАК СтатьяЗатрат,
		               |		ТиповойОбороты.СуммаОборот КАК СуммаОборот,
		               |		ТиповойОбороты.Организация КАК Организация
		               |	ИЗ
		               |		(ВЫБРАТЬ
		               |			ТиповойОбороты.Счет КАК СчетЗатрат,
		               |			ТиповойОбороты.Субконто1 КАК Подразделение,
		               |			ТиповойОбороты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		               |			ТиповойОбороты.Субконто2 КАК СтатьяЗатрат,
		               |			СУММА(ТиповойОбороты.СуммаОборот) КАК СуммаОборот,
		               |			ТиповойОбороты.Организация КАК Организация
		               |		ИЗ
		               |			РегистрБухгалтерии.Типовой.Обороты(&НачДата, &КонДата, Месяц, Счет В ИЕРАРХИИ (&СчетЗатрат), &ВидыСубконто, Организация = &Организация, , ) КАК ТиповойОбороты
		               |		
		               |		СГРУППИРОВАТЬ ПО
		               |			ТиповойОбороты.Субконто1,
		               |			ТиповойОбороты.Организация,
		               |			ТиповойОбороты.СтруктурноеПодразделение,
		               |			ТиповойОбороты.Счет,
		               |			ТиповойОбороты.Субконто2) КАК ТиповойОбороты
		               |			ЛЕВОЕ СОЕДИНЕНИЕ МетодыРаспределения КАК ВсеСпособыРаспределения
		               |			ПО ТиповойОбороты.Организация = ВсеСпособыРаспределения.Организация
		               |				И ТиповойОбороты.Подразделение = ВсеСпособыРаспределения.Подразделение
		               |				И ТиповойОбороты.СчетЗатрат = ВсеСпособыРаспределения.СчетЗатрат
		               |				И ТиповойОбороты.СтатьяЗатрат = ВсеСпособыРаспределения.СтатьяЗатрат
		               |				И ТиповойОбороты.СтруктурноеПодразделение = ВсеСпособыРаспределения.СтруктурноеПодразделение
		               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |				СпособыРаспределения.БазаРаспределения КАК БазаРаспределения,
		               |				СпособыРаспределения.СчетЗакрытияБУ КАК СчетЗакрытия,
		               |				СпособыРаспределения.СчетЗатратНУ КАК СчетЗатратНУ,
		               |				СпособыРаспределения.СубконтоБУ1 КАК Субконто1,
		               |				СпособыРаспределения.СубконтоБУ2 КАК Субконто2,
		               |				СпособыРаспределения.СубконтоБУ3 КАК Субконто3,
		               |				СпособыРаспределения.СчетЗакрытияНУ КАК СчетЗакрытияНУ,
		               |				СпособыРаспределения.СубконтоНУ1 КАК СубконтоНУ1,
		               |				СпособыРаспределения.СубконтоНУ2 КАК СубконтоНУ2,
		               |				СпособыРаспределения.СубконтоНУ3 КАК СубконтоНУ3,
		               |				СпособыРаспределения.Организация КАК Организация,
		               |				СпособыРаспределения.МетодРаспределенияЗатратСсылка КАК МетодРаспределенияЗатратСсылка,
		               |				СпособыРаспределения.ПроцентРаспределения КАК ПроцентРаспределения,
		               |				СпособыРаспределения.СтруктурноеПодразделениеЗакрытия КАК СтруктурноеПодразделениеЗакрытия,
		               |				СпособыРаспределения.СчетЗатрат КАК СчетЗатрат,
		               |				СпособыРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		               |				СпособыРаспределения.Подразделение КАК Подразделение,
		               |				СпособыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат
		               |			ИЗ
		               |				МетодыРаспределения КАК СпособыРаспределения
		               |			ГДЕ
		               |				СпособыРаспределения.СтатьяЗатрат = &ПустаяСтатьяЗатрат) КАК ВсеСпособыРаспределенияКромеСтатьиЗатрат
		               |			ПО ТиповойОбороты.Организация = ВсеСпособыРаспределенияКромеСтатьиЗатрат.Организация
		               |				И ТиповойОбороты.СчетЗатрат = ВсеСпособыРаспределенияКромеСтатьиЗатрат.СчетЗатрат
		               |				И ТиповойОбороты.Подразделение = ВсеСпособыРаспределенияКромеСтатьиЗатрат.Подразделение
		               |				И ТиповойОбороты.СтруктурноеПодразделение = ВсеСпособыРаспределенияКромеСтатьиЗатрат.СтруктурноеПодразделение
		               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |				СпособыРаспределения.БазаРаспределения КАК БазаРаспределения,
		               |				СпособыРаспределения.СчетЗакрытияБУ КАК СчетЗакрытия,
		               |				СпособыРаспределения.СчетЗатратНУ КАК СчетЗатратНУ,
		               |				СпособыРаспределения.СубконтоБУ1 КАК Субконто1,
		               |				СпособыРаспределения.СубконтоБУ2 КАК Субконто2,
		               |				СпособыРаспределения.СубконтоБУ3 КАК Субконто3,
		               |				СпособыРаспределения.СчетЗакрытияНУ КАК СчетЗакрытияНУ,
		               |				СпособыРаспределения.СубконтоНУ1 КАК СубконтоНУ1,
		               |				СпособыРаспределения.СубконтоНУ2 КАК СубконтоНУ2,
		               |				СпособыРаспределения.СубконтоНУ3 КАК СубконтоНУ3,
		               |				СпособыРаспределения.Организация КАК Организация,
		               |				СпособыРаспределения.МетодРаспределенияЗатратСсылка КАК МетодРаспределенияЗатратСсылка,
		               |				СпособыРаспределения.ПроцентРаспределения КАК ПроцентРаспределения,
		               |				СпособыРаспределения.СтруктурноеПодразделениеЗакрытия КАК СтруктурноеПодразделениеЗакрытия,
		               |				СпособыРаспределения.СчетЗатрат КАК СчетЗатрат,
		               |				СпособыРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		               |				СпособыРаспределения.Подразделение КАК Подразделение,
		               |				СпособыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат
		               |			ИЗ
		               |				МетодыРаспределения КАК СпособыРаспределения
		               |			ГДЕ
		               |				СпособыРаспределения.Подразделение = &ПустоеПодразделение) КАК ВсеСпособыРаспределенияКромеПодразделения
		               |			ПО ТиповойОбороты.Организация = ВсеСпособыРаспределенияКромеПодразделения.Организация
		               |				И ТиповойОбороты.СчетЗатрат = ВсеСпособыРаспределенияКромеПодразделения.СчетЗатрат
		               |				И ТиповойОбороты.СтатьяЗатрат = ВсеСпособыРаспределенияКромеПодразделения.СтатьяЗатрат
		               |				И ТиповойОбороты.СтруктурноеПодразделение = ВсеСпособыРаспределенияКромеПодразделения.СтруктурноеПодразделение
		               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |				СпособыРаспределения.БазаРаспределения КАК БазаРаспределения,
		               |				СпособыРаспределения.СчетЗакрытияБУ КАК СчетЗакрытия,
		               |				СпособыРаспределения.СчетЗатратНУ КАК СчетЗатратНУ,
		               |				СпособыРаспределения.СубконтоБУ1 КАК Субконто1,
		               |				СпособыРаспределения.СубконтоБУ2 КАК Субконто2,
		               |				СпособыРаспределения.СубконтоБУ3 КАК Субконто3,
		               |				СпособыРаспределения.СчетЗакрытияНУ КАК СчетЗакрытияНУ,
		               |				СпособыРаспределения.СубконтоНУ1 КАК СубконтоНУ1,
		               |				СпособыРаспределения.СубконтоНУ2 КАК СубконтоНУ2,
		               |				СпособыРаспределения.СубконтоНУ3 КАК СубконтоНУ3,
		               |				СпособыРаспределения.Организация КАК Организация,
		               |				СпособыРаспределения.МетодРаспределенияЗатратСсылка КАК МетодРаспределенияЗатратСсылка,
		               |				СпособыРаспределения.ПроцентРаспределения КАК ПроцентРаспределения,
		               |				СпособыРаспределения.СтруктурноеПодразделениеЗакрытия КАК СтруктурноеПодразделениеЗакрытия,
		               |				СпособыРаспределения.СчетЗатрат КАК СчетЗатрат,
		               |				СпособыРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		               |				СпособыРаспределения.Подразделение КАК Подразделение,
		               |				СпособыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат
		               |			ИЗ
		               |				МетодыРаспределения КАК СпособыРаспределения
		               |			ГДЕ
		               |				СпособыРаспределения.СтатьяЗатрат = &ПустаяСтатьяЗатрат
		               |				И ВЫБОР
		               |						КОГДА СпособыРаспределения.СтруктурноеПодразделение ССЫЛКА Справочник.Организации
		               |							ТОГДА СпособыРаспределения.СтруктурноеПодразделение = &Организация
		               |						ИНАЧЕ СпособыРаспределения.СтруктурноеПодразделение = &ПустоеСтруктурноеПодразделение
		               |					КОНЕЦ) КАК СпособыРаспределенияПоСчетуЗатратИПодразделению
		               |			ПО ТиповойОбороты.Организация = СпособыРаспределенияПоСчетуЗатратИПодразделению.Организация
		               |				И ТиповойОбороты.СчетЗатрат = СпособыРаспределенияПоСчетуЗатратИПодразделению.СчетЗатрат
		               |				И ТиповойОбороты.Подразделение = СпособыРаспределенияПоСчетуЗатратИПодразделению.Подразделение
		               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |				СпособыРаспределения.БазаРаспределения КАК БазаРаспределения,
		               |				СпособыРаспределения.СчетЗакрытияБУ КАК СчетЗакрытия,
		               |				СпособыРаспределения.СчетЗатратНУ КАК СчетЗатратНУ,
		               |				СпособыРаспределения.СубконтоБУ1 КАК Субконто1,
		               |				СпособыРаспределения.СубконтоБУ2 КАК Субконто2,
		               |				СпособыРаспределения.СубконтоБУ3 КАК Субконто3,
		               |				СпособыРаспределения.СчетЗакрытияНУ КАК СчетЗакрытияНУ,
		               |				СпособыРаспределения.СубконтоНУ1 КАК СубконтоНУ1,
		               |				СпособыРаспределения.СубконтоНУ2 КАК СубконтоНУ2,
		               |				СпособыРаспределения.СубконтоНУ3 КАК СубконтоНУ3,
		               |				СпособыРаспределения.Организация КАК Организация,
		               |				СпособыРаспределения.МетодРаспределенияЗатратСсылка КАК МетодРаспределенияЗатратСсылка,
		               |				СпособыРаспределения.ПроцентРаспределения КАК ПроцентРаспределения,
		               |				СпособыРаспределения.СтруктурноеПодразделениеЗакрытия КАК СтруктурноеПодразделениеЗакрытия,
		               |				СпособыРаспределения.СчетЗатрат КАК СчетЗатрат,
		               |				СпособыРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		               |				СпособыРаспределения.Подразделение КАК Подразделение,
		               |				СпособыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат
		               |			ИЗ
		               |				МетодыРаспределения КАК СпособыРаспределения
		               |			ГДЕ
		               |				СпособыРаспределения.Подразделение = &ПустоеПодразделение
		               |				И ВЫБОР
		               |						КОГДА СпособыРаспределения.СтруктурноеПодразделение ССЫЛКА Справочник.Организации
		               |							ТОГДА СпособыРаспределения.СтруктурноеПодразделение = &Организация
		               |						ИНАЧЕ СпособыРаспределения.СтруктурноеПодразделение = &ПустоеСтруктурноеПодразделение
		               |					КОНЕЦ) КАК СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат
		               |			ПО ТиповойОбороты.Организация = СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.Организация
		               |				И ТиповойОбороты.СчетЗатрат = СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.СчетЗатрат
		               |				И ТиповойОбороты.СтатьяЗатрат = СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.СтатьяЗатрат
		               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |				СпособыРаспределения.БазаРаспределения КАК БазаРаспределения,
		               |				СпособыРаспределения.СчетЗакрытияБУ КАК СчетЗакрытия,
		               |				СпособыРаспределения.СчетЗатратНУ КАК СчетЗатратНУ,
		               |				СпособыРаспределения.СубконтоБУ1 КАК Субконто1,
		               |				СпособыРаспределения.СубконтоБУ2 КАК Субконто2,
		               |				СпособыРаспределения.СубконтоБУ3 КАК Субконто3,
		               |				СпособыРаспределения.СчетЗакрытияНУ КАК СчетЗакрытияНУ,
		               |				СпособыРаспределения.СубконтоНУ1 КАК СубконтоНУ1,
		               |				СпособыРаспределения.СубконтоНУ2 КАК СубконтоНУ2,
		               |				СпособыРаспределения.СубконтоНУ3 КАК СубконтоНУ3,
		               |				СпособыРаспределения.Организация КАК Организация,
		               |				СпособыРаспределения.МетодРаспределенияЗатратСсылка КАК МетодРаспределенияЗатратСсылка,
		               |				СпособыРаспределения.ПроцентРаспределения КАК ПроцентРаспределения,
		               |				СпособыРаспределения.СтруктурноеПодразделениеЗакрытия КАК СтруктурноеПодразделениеЗакрытия,
		               |				СпособыРаспределения.СчетЗатрат КАК СчетЗатрат,
		               |				СпособыРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		               |				СпособыРаспределения.Подразделение КАК Подразделение,
		               |				СпособыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат
		               |			ИЗ
		               |				МетодыРаспределения КАК СпособыРаспределения
		               |			ГДЕ
		               |				СпособыРаспределения.СтатьяЗатрат = &ПустаяСтатьяЗатрат
		               |				И СпособыРаспределения.Подразделение = &ПустоеПодразделение) КАК СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению
		               |			ПО ТиповойОбороты.Организация = СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.Организация
		               |				И ТиповойОбороты.СчетЗатрат = СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.СчетЗатрат
		               |				И ТиповойОбороты.СтруктурноеПодразделение = СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.СтруктурноеПодразделение
		               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |				СпособыРаспределения.БазаРаспределения КАК БазаРаспределения,
		               |				СпособыРаспределения.СчетЗакрытияБУ КАК СчетЗакрытия,
		               |				СпособыРаспределения.СчетЗатратНУ КАК СчетЗатратНУ,
		               |				СпособыРаспределения.СубконтоБУ1 КАК Субконто1,
		               |				СпособыРаспределения.СубконтоБУ2 КАК Субконто2,
		               |				СпособыРаспределения.СубконтоБУ3 КАК Субконто3,
		               |				СпособыРаспределения.СчетЗакрытияНУ КАК СчетЗакрытияНУ,
		               |				СпособыРаспределения.СубконтоНУ1 КАК СубконтоНУ1,
		               |				СпособыРаспределения.СубконтоНУ2 КАК СубконтоНУ2,
		               |				СпособыРаспределения.СубконтоНУ3 КАК СубконтоНУ3,
		               |				СпособыРаспределения.Организация КАК Организация,
		               |				СпособыРаспределения.МетодРаспределенияЗатратСсылка КАК МетодРаспределенияЗатратСсылка,
		               |				СпособыРаспределения.ПроцентРаспределения КАК ПроцентРаспределения,
		               |				СпособыРаспределения.СтруктурноеПодразделениеЗакрытия КАК СтруктурноеПодразделениеЗакрытия,
		               |				СпособыРаспределения.СчетЗатрат КАК СчетЗатрат,
		               |				СпособыРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		               |				СпособыРаспределения.Подразделение КАК Подразделение,
		               |				СпособыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат
		               |			ИЗ
		               |				МетодыРаспределения КАК СпособыРаспределения
		               |			ГДЕ
		               |				СпособыРаспределения.СчетЗатрат = &ПустойСчет
		               |				И СпособыРаспределения.СтатьяЗатрат = &ПустаяСтатьяЗатрат
		               |				И СпособыРаспределения.Подразделение = &ПустоеПодразделение) КАК СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом
		               |			ПО ТиповойОбороты.Организация = СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.Организация
		               |				И ТиповойОбороты.СтруктурноеПодразделение = СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.СтруктурноеПодразделение
		               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |				СпособыРаспределения.БазаРаспределения КАК БазаРаспределения,
		               |				СпособыРаспределения.СчетЗакрытияБУ КАК СчетЗакрытия,
		               |				СпособыРаспределения.СчетЗатратНУ КАК СчетЗатратНУ,
		               |				СпособыРаспределения.СубконтоБУ1 КАК Субконто1,
		               |				СпособыРаспределения.СубконтоБУ2 КАК Субконто2,
		               |				СпособыРаспределения.СубконтоБУ3 КАК Субконто3,
		               |				СпособыРаспределения.СчетЗакрытияНУ КАК СчетЗакрытияНУ,
		               |				СпособыРаспределения.СубконтоНУ1 КАК СубконтоНУ1,
		               |				СпособыРаспределения.СубконтоНУ2 КАК СубконтоНУ2,
		               |				СпособыРаспределения.СубконтоНУ3 КАК СубконтоНУ3,
		               |				СпособыРаспределения.Организация КАК Организация,
		               |				СпособыРаспределения.МетодРаспределенияЗатратСсылка КАК МетодРаспределенияЗатратСсылка,
		               |				СпособыРаспределения.ПроцентРаспределения КАК ПроцентРаспределения,
		               |				СпособыРаспределения.СтруктурноеПодразделениеЗакрытия КАК СтруктурноеПодразделениеЗакрытия,
		               |				СпособыРаспределения.СчетЗатрат КАК СчетЗатрат,
		               |				СпособыРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		               |				СпособыРаспределения.Подразделение КАК Подразделение,
		               |				СпособыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат
		               |			ИЗ
		               |				МетодыРаспределения КАК СпособыРаспределения
		               |			ГДЕ
		               |				СпособыРаспределения.СчетЗатрат = &ПустойСчет
		               |				И СпособыРаспределения.Подразделение = &ПустоеПодразделение
		               |				И ВЫБОР
		               |						КОГДА СпособыРаспределения.СтруктурноеПодразделение ССЫЛКА Справочник.Организации
		               |							ТОГДА СпособыРаспределения.СтруктурноеПодразделение = &Организация
		               |						ИНАЧЕ СпособыРаспределения.СтруктурноеПодразделение = &ПустоеСтруктурноеПодразделение
		               |					КОНЕЦ) КАК СпособыРаспределенияПоСтатьеЗатратВЦелом
		               |			ПО ТиповойОбороты.Организация = СпособыРаспределенияПоСтатьеЗатратВЦелом.Организация
		               |				И ТиповойОбороты.СтатьяЗатрат = СпособыРаспределенияПоСтатьеЗатратВЦелом.СтатьяЗатрат
		               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |				СпособыРаспределения.БазаРаспределения КАК БазаРаспределения,
		               |				СпособыРаспределения.СчетЗакрытияБУ КАК СчетЗакрытия,
		               |				СпособыРаспределения.СчетЗатратНУ КАК СчетЗатратНУ,
		               |				СпособыРаспределения.СубконтоБУ1 КАК Субконто1,
		               |				СпособыРаспределения.СубконтоБУ2 КАК Субконто2,
		               |				СпособыРаспределения.СубконтоБУ3 КАК Субконто3,
		               |				СпособыРаспределения.СчетЗакрытияНУ КАК СчетЗакрытияНУ,
		               |				СпособыРаспределения.СубконтоНУ1 КАК СубконтоНУ1,
		               |				СпособыРаспределения.СубконтоНУ2 КАК СубконтоНУ2,
		               |				СпособыРаспределения.СубконтоНУ3 КАК СубконтоНУ3,
		               |				СпособыРаспределения.Организация КАК Организация,
		               |				СпособыРаспределения.МетодРаспределенияЗатратСсылка КАК МетодРаспределенияЗатратСсылка,
		               |				СпособыРаспределения.ПроцентРаспределения КАК ПроцентРаспределения,
		               |				СпособыРаспределения.СтруктурноеПодразделениеЗакрытия КАК СтруктурноеПодразделениеЗакрытия,
		               |				СпособыРаспределения.СчетЗатрат КАК СчетЗатрат,
		               |				СпособыРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		               |				СпособыРаспределения.Подразделение КАК Подразделение,
		               |				СпособыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат
		               |			ИЗ
		               |				МетодыРаспределения КАК СпособыРаспределения
		               |			ГДЕ
		               |				СпособыРаспределения.СчетЗатрат = &ПустойСчет
		               |				И СпособыРаспределения.СтатьяЗатрат = &ПустаяСтатьяЗатрат
		               |				И СпособыРаспределения.Подразделение = &ПустоеПодразделение
		               |				И ВЫБОР
		               |						КОГДА СпособыРаспределения.СтруктурноеПодразделение ССЫЛКА Справочник.Организации
		               |							ТОГДА СпособыРаспределения.СтруктурноеПодразделение = &Организация
		               |						ИНАЧЕ СпособыРаспределения.СтруктурноеПодразделение = &ПустоеСтруктурноеПодразделение
		               |					КОНЕЦ) КАК СпособыРаспределенияПоОрганизацииВЦелом
		               |			ПО ТиповойОбороты.Организация = СпособыРаспределенияПоОрганизацииВЦелом.Организация
		               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |				СпособыРаспределения.БазаРаспределения КАК БазаРаспределения,
		               |				СпособыРаспределения.СчетЗакрытияБУ КАК СчетЗакрытия,
		               |				СпособыРаспределения.СчетЗатратНУ КАК СчетЗатратНУ,
		               |				СпособыРаспределения.СубконтоБУ1 КАК Субконто1,
		               |				СпособыРаспределения.СубконтоБУ2 КАК Субконто2,
		               |				СпособыРаспределения.СубконтоБУ3 КАК Субконто3,
		               |				СпособыРаспределения.СчетЗакрытияНУ КАК СчетЗакрытияНУ,
		               |				СпособыРаспределения.СубконтоНУ1 КАК СубконтоНУ1,
		               |				СпособыРаспределения.СубконтоНУ2 КАК СубконтоНУ2,
		               |				СпособыРаспределения.СубконтоНУ3 КАК СубконтоНУ3,
		               |				СпособыРаспределения.Организация КАК Организация,
		               |				СпособыРаспределения.МетодРаспределенияЗатратСсылка КАК МетодРаспределенияЗатратСсылка,
		               |				СпособыРаспределения.ПроцентРаспределения КАК ПроцентРаспределения,
		               |				СпособыРаспределения.СтруктурноеПодразделениеЗакрытия КАК СтруктурноеПодразделениеЗакрытия,
		               |				СпособыРаспределения.СчетЗатрат КАК СчетЗатрат,
		               |				СпособыРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		               |				СпособыРаспределения.Подразделение КАК Подразделение,
		               |				СпособыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат
		               |			ИЗ
		               |				МетодыРаспределения КАК СпособыРаспределения
		               |			ГДЕ
		               |				СпособыРаспределения.СтатьяЗатрат = &ПустаяСтатьяЗатрат
		               |				И СпособыРаспределения.Подразделение = &ПустоеПодразделение
		               |				И ВЫБОР
		               |						КОГДА СпособыРаспределения.СтруктурноеПодразделение ССЫЛКА Справочник.Организации
		               |							ТОГДА СпособыРаспределения.СтруктурноеПодразделение = &Организация
		               |						ИНАЧЕ СпособыРаспределения.СтруктурноеПодразделение = &ПустоеСтруктурноеПодразделение
		               |					КОНЕЦ) КАК СпособыРаспределенияПоСчетуВЦелом
		               |			ПО ТиповойОбороты.Организация = СпособыРаспределенияПоСчетуВЦелом.Организация
		               |				И ТиповойОбороты.СчетЗатрат = СпособыРаспределенияПоСчетуВЦелом.СчетЗатрат) КАК ТаблицаСпособовРаспределения
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ТаблицаСпособовРаспределения.Подразделение,
		               |	ТаблицаСпособовРаспределения.СтатьяЗатрат,
		               |	СубконтоЗакрытия1,
		               |	СубконтоЗакрытия2,
		               |	СубконтоЗакрытия3
		               |ИТОГИ ПО
		               |	Метод
		               |АВТОУПОРЯДОЧИВАНИЕ";
		
		ВидыСубконто = Новый Массив;
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
		Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);  		           			
		
		РезультатЗапроса = Запрос.Выполнить();
	Иначе
		СформироватьЗапросПоКосвеннымЗатратамНУ(СтруктураШапкиДокумента, РезультатЗапроса, СтруктураДопПараметров)		
	КонецЕсли;                                                                                                    
	
КонецПроцедуры // СформироватьЗапросПоКосвеннымЗатратам()

Процедура СформироватьЗапросПоКосвеннымЗатратамНУ(СтруктураШапкиДокумента, РезультатЗапроса, СтруктураДопПараметров)
	
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",     мНачДата);
	Запрос.УстановитьПараметр("КонДата",     мКонДата);
	Запрос.УстановитьПараметр("СчетЗатрат",  ПланыСчетов.Налоговый.НакладныеРасходы);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто); 
	Запрос.УстановитьПараметр("ВидУчета",СтруктураДопПараметров.ВидУчетаНУ); 
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасчетРаспределенияКосвенныхРасходов.Организация КАК Организация,
	               |	РасчетРаспределенияКосвенныхРасходов.СтатьяЗатрат КАК СтатьяЗатрат,
	               |	РасчетРаспределенияКосвенныхРасходов.СчетУчета КАК СчетЗатрат,
	               |	РасчетРаспределенияКосвенныхРасходов.Подразделение КАК Подразделение,
	               |	РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	СУММА(РасчетРаспределенияКосвенныхРасходов.СуммаБазы) КАК СуммаБазы,
	               |	РасчетРаспределенияКосвенныхРасходов.БазаРаспределения КАК Метод,
	               |	РасчетРаспределенияКосвенныхРасходов.СчетРаспределения КАК СчетРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.ПодразделениеРаспределения КАК ПодразделениеРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.НоменклатурнаяГруппаРаспределения КАК НоменклатурнаяГруппаРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.СтатьяЗатратРаспределения КАК СтатьяЗатратРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделениеРаспределения КАК СтруктурноеПодразделениеРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.МетодРаспределенияКосвенныхРасходов КАК МетодРаспределенияЗатратСсылка,
	               |	ВЫБОР
	               |		КОГДА РасчетРаспределенияКосвенныхРасходов.СчетРаспределения В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВспомогательныеПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.НакладныеРасходы))
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ПризнакПроизводсвенногоСчета,
	               |	СУММА(РасчетРаспределенияКосвенныхРасходов.Сумма) КАК СуммаБУ
	               |ПОМЕСТИТЬ РасчетРаспределенияКосвенныхРасходов
	               |ИЗ
	               |	РегистрСведений.РасчетРаспределенияКосвенныхРасходов КАК РасчетРаспределенияКосвенныхРасходов
	               |ГДЕ
	               |	РасчетРаспределенияКосвенныхРасходов.Организация = &Организация
	               |	И НАЧАЛОПЕРИОДА(РасчетРаспределенияКосвенныхРасходов.ПериодРасчета, МЕСЯЦ) = &НачДата
	               |	И РасчетРаспределенияКосвенныхРасходов.СчетУчета ССЫЛКА ПланСчетов.Налоговый
	               |	И РасчетРаспределенияКосвенныхРасходов.РасчетБазы
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасчетРаспределенияКосвенныхРасходов.Организация,
	               |	РасчетРаспределенияКосвенныхРасходов.СчетУчета,
	               |	РасчетРаспределенияКосвенныхРасходов.СтатьяЗатрат,
	               |	РасчетРаспределенияКосвенныхРасходов.Подразделение,
	               |	РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделение,
	               |	РасчетРаспределенияКосвенныхРасходов.БазаРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.СчетРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.ПодразделениеРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.НоменклатурнаяГруппаРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.СтатьяЗатратРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделениеРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.МетодРаспределенияКосвенныхРасходов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МетодыРаспределенияКосвенныхРасходов.Ссылка КАК МетодРаспределенияЗатратСсылка,
	               |	МетодыРаспределенияКосвенныхРасходов.СчетЗакрытияНУ,
	               |	МетодыРаспределенияКосвенныхРасходов.СубконтоНУ1,
	               |	МетодыРаспределенияКосвенныхРасходов.СубконтоНУ2,
	               |	МетодыРаспределенияКосвенныхРасходов.СубконтоНУ3
	               |ПОМЕСТИТЬ МетодыРаспределенияКосвенныхРасходов
	               |ИЗ
	               |	Справочник.МетодыРаспределенияКосвенныхРасходов.АналитикаРаспределения КАК МетодыРаспределенияКосвенныхРасходов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	МетодыРаспределенияКосвенныхРасходов.СчетЗакрытияНУ,
	               |	МетодыРаспределенияКосвенныхРасходов.СубконтоНУ2,
	               |	МетодыРаспределенияКосвенныхРасходов.СубконтоНУ3,
	               |	МетодыРаспределенияКосвенныхРасходов.Ссылка,
	               |	МетодыРаспределенияКосвенныхРасходов.СубконтоНУ1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РасчетРаспределенияКосвенныхРасходов.Организация КАК Организация,
	               |	РасчетРаспределенияКосвенныхРасходов.СтатьяЗатрат КАК СтатьяЗатрат,
	               |	РасчетРаспределенияКосвенныхРасходов.СчетЗатрат КАК СчетЗатрат,
	               |	РасчетРаспределенияКосвенныхРасходов.Подразделение КАК Подразделение,
	               |	РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	МАКСИМУМ(РасчетРаспределенияКосвенныхРасходов.СуммаБазы) КАК СуммаБазы,
	               |	РасчетРаспределенияКосвенныхРасходов.Метод КАК Метод,
	               |	РасчетРаспределенияКосвенныхРасходов.СчетРаспределения КАК СчетРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.ПодразделениеРаспределения КАК ПодразделениеРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.НоменклатурнаяГруппаРаспределения КАК НоменклатурнаяГруппаРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.СтатьяЗатратРаспределения КАК СтатьяЗатратРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделениеРаспределения КАК СтруктурноеПодразделениеРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.МетодРаспределенияЗатратСсылка КАК МетодРаспределенияЗатратСсылка,
	               |	ВЫБОР
	               |		КОГДА РасчетРаспределенияКосвенныхРасходов.ПризнакПроизводсвенногоСчета
	               |			ТОГДА РасчетРаспределенияКосвенныхРасходов.ПодразделениеРаспределения
	               |		ИНАЧЕ МетодыРаспределенияКосвенныхРасходов.СубконтоНУ1
	               |	КОНЕЦ КАК СубконтоЗакрытия1,
	               |	ВЫБОР
	               |		КОГДА РасчетРаспределенияКосвенныхРасходов.ПризнакПроизводсвенногоСчета
	               |			ТОГДА РасчетРаспределенияКосвенныхРасходов.НоменклатурнаяГруппаРаспределения
	               |		ИНАЧЕ МетодыРаспределенияКосвенныхРасходов.СубконтоНУ2
	               |	КОНЕЦ КАК СубконтоЗакрытия2,
	               |	ВЫБОР
	               |		КОГДА РасчетРаспределенияКосвенныхРасходов.ПризнакПроизводсвенногоСчета
	               |			ТОГДА РасчетРаспределенияКосвенныхРасходов.СтатьяЗатратРаспределения
	               |		ИНАЧЕ МетодыРаспределенияКосвенныхРасходов.СубконтоНУ3
	               |	КОНЕЦ КАК СубконтоЗакрытия3,
	               |	МАКСИМУМ(РасчетРаспределенияКосвенныхРасходов.СуммаБУ) КАК СуммаБУ
	               |ПОМЕСТИТЬ РасчетРаспределенияКосвенныхРасходов_Основной
	               |ИЗ
	               |	РасчетРаспределенияКосвенныхРасходов КАК РасчетРаспределенияКосвенныхРасходов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ МетодыРаспределенияКосвенныхРасходов КАК МетодыРаспределенияКосвенныхРасходов
	               |		ПО (МетодыРаспределенияКосвенныхРасходов.МетодРаспределенияЗатратСсылка = РасчетРаспределенияКосвенныхРасходов.МетодРаспределенияЗатратСсылка)
	               |			И (МетодыРаспределенияКосвенныхРасходов.СчетЗакрытияНУ = РасчетРаспределенияКосвенныхРасходов.СчетРаспределения)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасчетРаспределенияКосвенныхРасходов.Организация,
	               |	РасчетРаспределенияКосвенныхРасходов.СчетЗатрат,
	               |	РасчетРаспределенияКосвенныхРасходов.СтатьяЗатрат,
	               |	РасчетРаспределенияКосвенныхРасходов.Подразделение,
	               |	РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделение,
	               |	РасчетРаспределенияКосвенныхРасходов.Метод,
	               |	РасчетРаспределенияКосвенныхРасходов.СчетРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.ПодразделениеРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.НоменклатурнаяГруппаРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.СтатьяЗатратРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделениеРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.МетодРаспределенияЗатратСсылка,
	               |	ВЫБОР
	               |		КОГДА РасчетРаспределенияКосвенныхРасходов.ПризнакПроизводсвенногоСчета
	               |			ТОГДА РасчетРаспределенияКосвенныхРасходов.ПодразделениеРаспределения
	               |		ИНАЧЕ МетодыРаспределенияКосвенныхРасходов.СубконтоНУ1
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА РасчетРаспределенияКосвенныхРасходов.ПризнакПроизводсвенногоСчета
	               |			ТОГДА РасчетРаспределенияКосвенныхРасходов.НоменклатурнаяГруппаРаспределения
	               |		ИНАЧЕ МетодыРаспределенияКосвенныхРасходов.СубконтоНУ2
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА РасчетРаспределенияКосвенныхРасходов.ПризнакПроизводсвенногоСчета
	               |			ТОГДА РасчетРаспределенияКосвенныхРасходов.СтатьяЗатратРаспределения
	               |		ИНАЧЕ МетодыРаспределенияКосвенныхРасходов.СубконтоНУ3
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НалоговыйОбороты.Счет КАК СчетЗатрат,
	               |	НалоговыйОбороты.Субконто1 КАК Подразделение,
	               |	НалоговыйОбороты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	НалоговыйОбороты.Субконто2 КАК СтатьяЗатрат,
	               |	СУММА(НалоговыйОбороты.СуммаОборот) КАК СуммаОборот,
	               |	НалоговыйОбороты.Организация КАК Организация,
	               |	НалоговыйОбороты.ВидУчета КАК ВидУчетаНакладных
	               |ПОМЕСТИТЬ НакладныеРасходыРаспределения
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(
	               |			&НачДата,
	               |			&КонДата,
	               |			Месяц,
	               |			Счет В ИЕРАРХИИ (&СчетЗатрат),
	               |			&ВидыСубконто,
	               |			Организация = &Организация
	               |				И ВидУчета В ИЕРАРХИИ (&ВидУчета),
	               |			,
	               |			) КАК НалоговыйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОбороты.Субконто1,
	               |	НалоговыйОбороты.Организация,
	               |	НалоговыйОбороты.СтруктурноеПодразделение,
	               |	НалоговыйОбороты.Счет,
	               |	НалоговыйОбороты.Субконто2,
	               |	НалоговыйОбороты.ВидУчета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВыпускПродукцииУслуг.ВидУчета КАК ВидУчетаРаспределения,
	               |	ВыпускПродукцииУслуг.Подразделение КАК Подразделение,
	               |	ВыпускПродукцииУслуг.Организация КАК Организация,
	               |	ВыпускПродукцииУслуг.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |	ВыпускПродукцииУслуг.СтруктурноеПодразделение КАК СтруктурноеПодразделение
	               |ПОМЕСТИТЬ выпускпродукции
	               |ИЗ
	               |	РегистрНакопления.ВыпускПродукцииУслугНалоговыйУчет КАК ВыпускПродукцииУслуг
	               |ГДЕ
	               |	ВыпускПродукцииУслуг.Период МЕЖДУ &НачДата И &КонДата
	               |	И ВыпускПродукцииУслуг.Организация = &Организация
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВыпускПродукцииУслуг.ВидУчета,
	               |	ВыпускПродукцииУслуг.Подразделение,
	               |	ВыпускПродукцииУслуг.Организация,
	               |	ВыпускПродукцииУслуг.НоменклатурнаяГруппа,
	               |	ВыпускПродукцииУслуг.СтруктурноеПодразделение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РасчетРаспределенияКосвенныхРасходов.Организация КАК Организация,
	               |	РасчетРаспределенияКосвенныхРасходов.Метод КАК Метод,
	               |	НакладныеРасходыРаспределения.СчетЗатрат КАК СчетЗатрат,
	               |	НакладныеРасходыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат,
	               |	НакладныеРасходыРаспределения.Подразделение КАК Подразделение,
	               |	РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	РасчетРаспределенияКосвенныхРасходов.СчетРаспределения КАК СчетЗакрытия,
	               |	РасчетРаспределенияКосвенныхРасходов.СубконтоЗакрытия1 КАК СубконтоЗакрытия1,
	               |	РасчетРаспределенияКосвенныхРасходов.СубконтоЗакрытия2 КАК СубконтоЗакрытия2,
	               |	РасчетРаспределенияКосвенныхРасходов.СубконтоЗакрытия3 КАК СубконтоЗакрытия3,
	               |	РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделениеРаспределения КАК СтруктурноеПодразделениеЗакрытия,
	               |	ВЫБОР
	               |		КОГДА РасчетРаспределенияКосвенныхРасходов.Метод = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.Процентом)
	               |			ТОГДА РасчетРаспределенияКосвенныхРасходов.СуммаБазы
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ПроцентРаспределения,
	               |	ВЫБОР
	               |		КОГДА РасчетРаспределенияКосвенныхРасходов.СчетРаспределения В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВспомогательныеПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.НакладныеРасходы))
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ПризнакПроизводсвенногоСчета,
	               |	ЕСТЬNULL(НакладныеРасходыРаспределения.СуммаОборот, 0) КАК Сумма,
	               |	ЕСТЬNULL(НакладныеРасходыРаспределения.ВидУчетаНакладных, ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)) КАК ВидУчетаНакладных,
	               |	ЕСТЬNULL(ВыпускПродукции.ВидУчетаРаспределения, ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)) КАК ВидУчетаРаспределения,
	               |	ЕСТЬNULL(РасчетРаспределенияКосвенныхРасходов.СуммаБазы, 0) КАК СуммаБазы,
	               |	РасчетРаспределенияКосвенныхРасходов.МетодРаспределенияЗатратСсылка,
	               |	ЕСТЬNULL(РасчетРаспределенияКосвенныхРасходов.СуммаБУ, 0) КАК СуммаБУ
	               |ИЗ
	               |	НакладныеРасходыРаспределения КАК НакладныеРасходыРаспределения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РасчетРаспределенияКосвенныхРасходов_Основной КАК РасчетРаспределенияКосвенныхРасходов
	               |		ПО НакладныеРасходыРаспределения.Организация = РасчетРаспределенияКосвенныхРасходов.Организация
	               |			И НакладныеРасходыРаспределения.Подразделение = РасчетРаспределенияКосвенныхРасходов.Подразделение
	               |			И НакладныеРасходыРаспределения.СчетЗатрат = РасчетРаспределенияКосвенныхРасходов.СчетЗатрат
	               |			И НакладныеРасходыРаспределения.СтатьяЗатрат = РасчетРаспределенияКосвенныхРасходов.СтатьяЗатрат
	               |			И НакладныеРасходыРаспределения.СтруктурноеПодразделение = РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделение
	               |		ЛЕВОЕ СОЕДИНЕНИЕ выпускпродукции КАК ВыпускПродукции
	               |		ПО (ВыпускПродукции.Организация = РасчетРаспределенияКосвенныхРасходов.Организация)
	               |			И (ВыпускПродукции.Подразделение = РасчетРаспределенияКосвенныхРасходов.ПодразделениеРаспределения)
	               |			И (ВыпускПродукции.НоменклатурнаяГруппа = РасчетРаспределенияКосвенныхРасходов.НоменклатурнаяГруппаРаспределения)
	               |			И (ВыпускПродукции.СтруктурноеПодразделение = РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделениеРаспределения)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Подразделение,
	               |	СтатьяЗатрат,
	               |	СубконтоЗакрытия1,
	               |	СубконтоЗакрытия2,
	               |	СубконтоЗакрытия3
	               |ИТОГИ ПО
	               |	Метод
				   |АВТОУПОРЯДОЧИВАНИЕ";
								                                      		
	
	РезультатЗапроса = Запрос.Выполнить();
		
КонецПроцедуры // СформироватьЗапросПоКосвеннымЗатратам()

// Функция распределения ОПР затрат по базе всех подразделений, если невозможно 
// распределить с учетом аналитики закрытия.
//	Параметры:
//		БазаКоэффициентов - база коэф-тов распределения
//
Функция РаспределитьОПРПоБазе(СтруктураШапкиДокумента, ИмяРеквБазы, мБазаКоэффициентов, 
							  Обход, НаборСтрок = 0, НеРаспределилосьПоБазе = Ложь, СтруктураДопПараметров, МетодРаспределения, ОбщаяСуммаДляСписания = 0)
	
	РаспределениеВыполнено = Ложь;
    ВсегоБазаРаспределения = 0;
	
	Если ОбщаяСуммаДляСписания = 0 Тогда 
		ОбщаяСуммаДляСписания = Обход.Сумма;
	КонецЕсли;
			
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		РегОперация = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ;
	Иначе
		РегОперация = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ;
	КонецЕсли;
		
	ЗаписьРасчетаКосвенныхРасходов = СтруктураДопПараметров.ЗаписьРасчетаКосвенныхРасходов;

	Если НаборСтрок = 0 Тогда
		Если НЕ ЗначениеЗаполнено(Обход.СчетЗакрытия) Тогда
			
			СтруктПоиска = Новый Структура;
			
			Если НЕ НеРаспределилосьПоБазе Тогда
				СтруктПоиска.Вставить("Подразделение", Обход.Подразделение);
				СтруктПоиска.Вставить("СтруктурноеПодразделение", Обход.СтруктурноеПодразделение);
				НаборСтрок = мБазаКоэффициентов.НайтиСтроки(СтруктПоиска);
			Иначе
				НаборСтрок = мБазаКоэффициентов.Скопировать();
			КонецЕсли;			
		Иначе
			НаборСтрок = мБазаКоэффициентов.Скопировать();
		КонецЕсли;	
	КонецЕсли;
	
	// для процента берем базу из основного запроса
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ВидУчетаЗатрат = Обход.ВидУчетаНакладных;
	КонецЕсли;
	
 	Для Каждого СтрКоэф Из НаборСтрок Цикл
		Если Обход.Метод <> Перечисления.БазыРаспределенияКосвенныхРасходов.Процентом Тогда 
			ВсегоБазаРаспределения = ВсегоБазаРаспределения + СтрКоэф["База"+ИмяРеквБазы];
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			ВидУчетаЗатрат = Обход.ВидУчетаРаспределения;
		КонецЕсли;			
	КонецЦикла;		
	
	Если Обход.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.Процентом Тогда 
		ВсегоБазаРаспределения = 100;
	КонецЕсли;	
		
	СуммаКРаспр 					= 0;
	СуммаСписанияНаСебестоимость 	= 0;
	УчтеноБазаРаспределения 		= 0;
	
	// для процента распределяем по другой ветке запроса
	Если Обход.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.Процентом Тогда 
		
		БазаРаспределения 			= Обход.ПроцентРаспределения;
		
		УчтеноБазаРаспределения = УчтеноБазаРаспределения + БазаРаспределения;
		ДолжноБытьСписано 		= Окр(ОбщаяСуммаДляСписания * УчтеноБазаРаспределения / ВсегоБазаРаспределения, 2, 1);
		СуммаСписания 			= ДолжноБытьСписано - СуммаКРаспр;
		СуммаКРаспр 			= СуммаКРаспр + СуммаСписания;
		
		Если СуммаСписания <> 0 Тогда
			
			НоваяПроводка = мОперация.Добавить();
			НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
			НоваяПроводка.Активность  = Истина;
			НоваяПроводка.Период      = Дата;
			
			НоваяПроводка.СтруктурноеПодразделениеДт = Обход.СтруктурноеПодразделение;
			НоваяПроводка.СтруктурноеПодразделениеКт = Обход.СтруктурноеПодразделениеЗакрытия;
			
			НоваяПроводка.ВидРегламентнойОперации = РегОперация;
			Если НЕ НеРаспределилосьПоБазе Тогда
				НоваяПроводка.Содержание  = "Распределение ОПР";
			Иначе
				НоваяПроводка.Содержание  = "Распределение ОПР по всем подразделениям";
			КонецЕсли;	
			
			НоваяПроводка.Сумма = СуммаСписания;			
			НоваяПроводка.СчетДт = Обход.СчетЗакрытия;			
			
			Для НомерСубконто = 1 По Обход.СчетЗакрытия.ВидыСубконто.Количество() Цикл
				
				Если (ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда
					
					Если ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто]) Тогда
						УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
					КонецЕсли;	
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, НомерСубконто, УстанавливаемоеЗначениеАналитики);	
					
				ИначеЕсли (ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.НоменклатурныеГруппы")) Тогда
					
					Если ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто]) Тогда
						УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
					КонецЕсли;	
					
				ИначеЕсли (ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат")) Тогда
					
					Если НЕ ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто]) Тогда
						УстанавливаемоеЗначениеАналитики = Обход.СтатьяЗатрат;
					Иначе
						УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
					КонецЕсли;	
					
				Иначе
					УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
				КонецЕсли;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, НомерСубконто, УстанавливаемоеЗначениеАналитики);	
				
			КонецЦикла;
					
			НоваяПроводка.СчетКт = Обход.СчетЗатрат;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        Обход.Подразделение);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат",         Обход.СтатьяЗатрат);
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				НоваяПроводка.ВидУчетаДт = ВидУчетаЗатрат;
				НоваяПроводка.ВидУчетаКт = Обход.ВидУчетаНакладных;
			КонецЕсли;
			
			РаспределениеВыполнено = Истина;
			
		КонецЕсли;
		
		Если Не СуммаСписания = 0 Тогда
			
			//запишем данные в вспомогательный регистр
			СтрокаЗаписьРасчетаКосвенныхРасходов = ЗаписьРасчетаКосвенныхРасходов.Добавить();
			СтрокаЗаписьРасчетаКосвенныхРасходов.СчетУчета = Обход.СчетЗатрат;
			СтрокаЗаписьРасчетаКосвенныхРасходов.ВидОперации = Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщепроизводственныхРасходов;
			СтрокаЗаписьРасчетаКосвенныхРасходов.Подразделение = Обход.Подразделение;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатрат = Обход.СтатьяЗатрат;
			СтрокаЗаписьРасчетаКосвенныхРасходов.БазаРаспределения = МетодРаспределения;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = БазаРаспределения;
			СтрокаЗаписьРасчетаКосвенныхРасходов.МетодРаспределенияКосвенныхРасходов = Обход.МетодРаспределенияЗатратСсылка;										
			
			// направления распределения возьмем из проводок, так как в проводках уже все определено, исходя из метода распределения
			СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = НоваяПроводка.СчетДт;
			Для Каждого СубконтоСчета Из НоваяПроводка.СчетДт.ВидыСубконто Цикл
				Если СубконтоСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда
					
					СтрокаЗаписьРасчетаКосвенныхРасходов.ПодразделениеРаспределения =
					НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения];
					
				ИначеЕсли СубконтоСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда	
					
					СтрокаЗаписьРасчетаКосвенныхРасходов.НоменклатурнаяГруппаРаспределения =
					НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы];
					
				ИначеЕсли СубконтоСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат Тогда	
						
					СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатратРаспределения =
					НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат]; 
					
				КонецЕсли;	
			КонецЦикла;	
			
			СтрокаЗаписьРасчетаКосвенныхРасходов.Сумма = СуммаСписания;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделение = Обход.СтруктурноеПодразделение;
			
			ВидУчета = ?(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете, Обход.ВидУчетаНакладных, Справочники.ВидыУчетаНУ.ПустаяСсылка());
			СтрокаЗаписьРасчетаКосвенныхРасходов.ВидУчета = ВидУчета;			
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете  Тогда
									
				//Для расчета базы по НУ						
				СтрокаЗаписьРасчетаКосвенныхРасходов = ЗаписьРасчетаКосвенныхРасходов.Добавить();
				СтрокаЗаписьРасчетаКосвенныхРасходов.СчетУчета = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", НоваяПроводка.СчетКт), , , СтруктураШапкиДокумента.Дата);;
				СтрокаЗаписьРасчетаКосвенныхРасходов.ВидОперации = Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщепроизводственныхРасходов;
				СтрокаЗаписьРасчетаКосвенныхРасходов.Подразделение = Обход.Подразделение;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатрат = Обход.СтатьяЗатрат;
				СтрокаЗаписьРасчетаКосвенныхРасходов.БазаРаспределения = Обход.Метод;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", НоваяПроводка.СчетДт), , , СтруктураШапкиДокумента.Дата);
								
				Если НЕ ЗначениеЗаполнено(Обход.СчетЗакрытияНУ) Тогда
					СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", НоваяПроводка.СчетДт), , , СтруктураШапкиДокумента.Дата);
				Иначе
					СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = Обход.СчетЗакрытияНУ;
				КонецЕсли;
				
				СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделениеРаспределения  = Обход.СтруктурноеПодразделениеЗакрытия;
				СтрокаЗаписьРасчетаКосвенныхРасходов.МетодРаспределенияКосвенныхРасходов = Обход.МетодРаспределенияЗатратСсылка;										
				
				НомерСубконтоПодразделенияНУ = 0;
				НомерСубконтоНоменклатурнойГруппыНУ = 0;
				НомерСубконтоСтатьиЗатратНУ = 0;
				
				Для НомерСубконто = 1 По 3 Цикл 					
					Если Не ЗначениеЗаполнено(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) Тогда
						Продолжить;
					КонецЕсли;
					
					Если ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
						НомерСубконтоПодразделенияНУ = НомерСубконто;
					ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						НомерСубконтоНоменклатурнойГруппыНУ = НомерСубконто;
					ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
						НомерСубконтоСтатьиЗатратНУ = НомерСубконто;
					КонецЕсли;  					
				КонецЦикла;
				
				СтрокаЗаписьРасчетаКосвенныхРасходов.ПодразделениеРаспределения = ?(НомерСубконтоПодразделенияНУ = 0, 
					НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения], Обход["СубконтоЗакрытияНУ" + НомерСубконтоПодразделенияНУ]);
				
				СтрокаЗаписьРасчетаКосвенныхРасходов.НоменклатурнаяГруппаРаспределения = ?(НомерСубконтоНоменклатурнойГруппыНУ = 0,
					НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы],Обход["СубконтоЗакрытияНУ" + НомерСубконтоНоменклатурнойГруппыНУ]) ;
				
				СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатратРаспределения = ?(НомерСубконтоСтатьиЗатратНУ = 0,
					НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат], Обход["СубконтоЗакрытияНУ" + НомерСубконтоСтатьиЗатратНУ]);				
				
				СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделение = Обход.СтруктурноеПодразделение;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделениеРаспределения  = Обход.СтруктурноеПодразделениеЗакрытия;
				СтрокаЗаписьРасчетаКосвенныхРасходов.РасчетБазы  		   = Истина;				
				СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = БазаРаспределения;	
				СтрокаЗаписьРасчетаКосвенныхРасходов.Сумма = СуммаСписания;
			КонецЕсли;									
		КонецЕсли;    	
		
	Иначе 
		
		Для Каждого СтрКоэф Из НаборСтрок Цикл
			
			Если (ТипЗнч(Обход.СубконтоЗакрытия1) = Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда
				Если ЗначениеЗаполнено(Обход.СубконтоЗакрытия1) Тогда
					Если СтрКоэф.Подразделение <> Обход.СубконтоЗакрытия1 Тогда  
						
						Продолжить;
						
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			
			БазаРаспределения = СтрКоэф["База"+ИмяРеквБазы];
			
			Если БазаРаспределения = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			УчтеноБазаРаспределения = УчтеноБазаРаспределения + БазаРаспределения;
			ДолжноБытьСписано 		= Окр(ОбщаяСуммаДляСписания * УчтеноБазаРаспределения / ВсегоБазаРаспределения, 2, 1);
			СуммаСписания 			= ДолжноБытьСписано - СуммаКРаспр;
			СуммаКРаспр 			= СуммаКРаспр + СуммаСписания;
			
			
			Если СуммаСписания <> 0 Тогда
				
				НоваяПроводка = мОперация.Добавить();
				НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
				НоваяПроводка.Активность  = Истина;
				НоваяПроводка.Период      = Дата;
				
				НоваяПроводка.ВидРегламентнойОперации = РегОперация;
				Если НЕ НеРаспределилосьПоБазе Тогда
					НоваяПроводка.Содержание  = "Распределение ОПР";
				Иначе
					НоваяПроводка.Содержание  = "Распределение ОПР по всем подразделениям";
				КонецЕсли;	
				
				НоваяПроводка.Сумма = СуммаСписания;
				
				Если НЕ ЗначениеЗаполнено(Обход.СчетЗакрытия) Тогда//стандартное распределение					
					
					НоваяПроводка.СчетДт = СтрКоэф.СчетЗатрат;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрКоэф.НоменклатурнаяГруппа);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения",        СтрКоэф.Подразделение);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         Обход.СтатьяЗатрат);
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(НоваяПроводка, 
					Обход.СтруктурноеПодразделение, Обход.СтруктурноеПодразделение);
					// Присутствует счет закрытия	
				Иначе
					
					// Если производится повторное распределение после того, как не распределились ОПР по аналитике 
					// закрытия, то заполнить можно только статью затрат. Остальные аналитики - из базы коэффициентов
					Если НеРаспределилосьПоБазе Тогда
						
						НоваяПроводка.СчетДт = СтрКоэф.СчетЗатрат;						
						НоваяПроводка.СтруктурноеПодразделениеДт = СтрКоэф.СтруктурноеПодразделение;
						
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрКоэф.НоменклатурнаяГруппа);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения",        СтрКоэф.Подразделение);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         Обход.СтатьяЗатрат);
						
						Для НомерСубконто = 1 По Обход.СчетЗакрытия.ВидыСубконто.Количество() Цикл
							
							Если (ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат")) Тогда
								
								Если НЕ ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто]) Тогда
									УстанавливаемоеЗначениеАналитики = Обход.СтатьяЗатрат;
								Иначе
									УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
								КонецЕсли;	
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, НомерСубконто, УстанавливаемоеЗначениеАналитики);	
							КонецЕсли;	
							
						КонецЦикла;
						
						НоваяПроводка.СчетКт 					 = Обход.СчетЗатрат;
						НоваяПроводка.СтруктурноеПодразделениеКт = Обход.СтруктурноеПодразделение;
				
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        Обход.Подразделение);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат",         Обход.СтатьяЗатрат);
						
						
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(НоваяПроводка, 
						Обход.СтруктурноеПодразделение, Обход.СтруктурноеПодразделение);
						
						РаспределениеВыполнено = Истина;
						
						// Производится первоначальное распределение на счет закрытия	 
					Иначе	
						
						НоваяПроводка.СчетДт 					 = Обход.СчетЗакрытия;
						НоваяПроводка.СтруктурноеПодразделениеДт = Обход.СтруктурноеПодразделениеЗакрытия;
												
						Для НомерСубконто = 1 По Обход.СчетЗакрытия.ВидыСубконто.Количество() Цикл
							
							Если (ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда
								
								Если НЕ ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто]) Тогда
									УстанавливаемоеЗначениеАналитики = СтрКоэф.Подразделение;
								Иначе
									УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
								КонецЕсли;	
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, НомерСубконто, УстанавливаемоеЗначениеАналитики);	
								
							ИначеЕсли (ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.НоменклатурныеГруппы")) Тогда
								
								Если НЕ ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто]) Тогда
									УстанавливаемоеЗначениеАналитики = СтрКоэф.НоменклатурнаяГруппа;
								Иначе
									УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
								КонецЕсли;	
								
							ИначеЕсли (ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат")) Тогда
								
								Если НЕ ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто]) Тогда
									УстанавливаемоеЗначениеАналитики = Обход.СтатьяЗатрат;
								Иначе
									УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
								КонецЕсли;	
								
							Иначе
								УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
							КонецЕсли;
							
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, НомерСубконто, УстанавливаемоеЗначениеАналитики);	
							
						КонецЦикла;  						
					КонецЕсли;       					
				КонецЕсли;
				
				НоваяПроводка.СчетКт 					 = Обход.СчетЗатрат;
				НоваяПроводка.СтруктурноеПодразделениеКт = Обход.СтруктурноеПодразделение;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        Обход.Подразделение);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат",         Обход.СтатьяЗатрат);
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					НоваяПроводка.ВидУчетаДт = Обход.ВидУчетаНакладных;
					НоваяПроводка.ВидУчетаКт = Обход.ВидУчетаРаспределения;
				КонецЕсли;
				
				РаспределениеВыполнено = Истина;
				
			КонецЕсли;
			
			Если Не СуммаСписания = 0 Тогда
				
				//запишем данные в вспомогательный регистр
				СтрокаЗаписьРасчетаКосвенныхРасходов = ЗаписьРасчетаКосвенныхРасходов.Добавить();
				СтрокаЗаписьРасчетаКосвенныхРасходов.СчетУчета = Обход.СчетЗатрат;
				СтрокаЗаписьРасчетаКосвенныхРасходов.ВидОперации = Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщепроизводственныхРасходов;
				СтрокаЗаписьРасчетаКосвенныхРасходов.Подразделение = Обход.Подразделение;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатрат = Обход.СтатьяЗатрат;
				СтрокаЗаписьРасчетаКосвенныхРасходов.БазаРаспределения = МетодРаспределения;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = БазаРаспределения;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделениеРаспределения  = Обход.СтруктурноеПодразделениеЗакрытия;
				СтрокаЗаписьРасчетаКосвенныхРасходов.МетодРаспределенияКосвенныхРасходов = Обход.МетодРаспределенияЗатратСсылка;										
								
				// направления распределения возьмем из проводок, так как в проводках уже все определено, исходя из метода распределения
				СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = НоваяПроводка.СчетДт;
				Для Каждого СубконтоСчета Из НоваяПроводка.СчетДт.ВидыСубконто Цикл
					Если СубконтоСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда
						
						СтрокаЗаписьРасчетаКосвенныхРасходов.ПодразделениеРаспределения =
						НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения];
						
					ИначеЕсли СубконтоСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда	
						
						СтрокаЗаписьРасчетаКосвенныхРасходов.НоменклатурнаяГруппаРаспределения =
						НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы];
						
					ИначеЕсли СубконтоСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат Тогда	
						
						СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатратРаспределения =
						НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат];
						
					КонецЕсли;	
				КонецЦикла;	
				
				СтрокаЗаписьРасчетаКосвенныхРасходов.Сумма = СуммаСписания;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделение = Обход.СтруктурноеПодразделение;
				
				ВидУчета = ?(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете, Обход.ВидУчетаНакладных, Справочники.ВидыУчетаНУ.ПустаяСсылка());
				СтрокаЗаписьРасчетаКосвенныхРасходов.ВидУчета = ВидУчета;		
				
				
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете  Тогда
					
					//Для расчета базы по НУ						
					СтрокаЗаписьРасчетаКосвенныхРасходов = ЗаписьРасчетаКосвенныхРасходов.Добавить();
					СтрокаЗаписьРасчетаКосвенныхРасходов.СчетУчета = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", НоваяПроводка.СчетКт), , , СтруктураШапкиДокумента.Дата);;
					СтрокаЗаписьРасчетаКосвенныхРасходов.ВидОперации = Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщепроизводственныхРасходов;
					СтрокаЗаписьРасчетаКосвенныхРасходов.Подразделение = Обход.Подразделение;
					СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатрат = Обход.СтатьяЗатрат;
					СтрокаЗаписьРасчетаКосвенныхРасходов.БазаРаспределения = Обход.Метод;
					Если НЕ ЗначениеЗаполнено(Обход.СчетЗакрытияНУ) Тогда
						СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", НоваяПроводка.СчетДт), , , СтруктураШапкиДокумента.Дата);
					Иначе
						СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = Обход.СчетЗакрытияНУ;
					КонецЕсли;
					
					СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделениеРаспределения  = Обход.СтруктурноеПодразделениеЗакрытия;
					СтрокаЗаписьРасчетаКосвенныхРасходов.МетодРаспределенияКосвенныхРасходов = Обход.МетодРаспределенияЗатратСсылка;										
					
					НомерСубконтоПодразделенияНУ = 0;
					НомерСубконтоНоменклатурнойГруппыНУ = 0;
					НомерСубконтоСтатьиЗатратНУ = 0;
					
					Для НомерСубконто = 1 По 3 Цикл
						
						Если Не ЗначениеЗаполнено(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) Тогда
							Продолжить;
						КонецЕсли;
						
						Если ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
							НомерСубконтоПодразделенияНУ = НомерСубконто;
						ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
							НомерСубконтоНоменклатурнойГруппыНУ = НомерСубконто;
						ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
							НомерСубконтоСтатьиЗатратНУ = НомерСубконто;
						КонецЕсли;
						
					КонецЦикла;
					
					СтрокаЗаписьРасчетаКосвенныхРасходов.ПодразделениеРаспределения = ?(НомерСубконтоПодразделенияНУ = 0, 
					НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения], Обход["СубконтоЗакрытияНУ" + НомерСубконтоПодразделенияНУ]);
					
					СтрокаЗаписьРасчетаКосвенныхРасходов.НоменклатурнаяГруппаРаспределения = ?(НомерСубконтоНоменклатурнойГруппыНУ = 0,
					НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы],Обход["СубконтоЗакрытияНУ" + НомерСубконтоНоменклатурнойГруппыНУ]) ;
					
					СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатратРаспределения = ?(НомерСубконтоСтатьиЗатратНУ = 0,
					НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат], Обход["СубконтоЗакрытияНУ" + НомерСубконтоСтатьиЗатратНУ]);												
					
					СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделение = Обход.СтруктурноеПодразделение;
					СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделениеРаспределения  = Обход.СтруктурноеПодразделениеЗакрытия;
					СтрокаЗаписьРасчетаКосвенныхРасходов.РасчетБазы  		   = Истина;				
					СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = БазаРаспределения;	
					СтрокаЗаписьРасчетаКосвенныхРасходов.Сумма	   = СуммаСписания;		
				КонецЕсли;								
		КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	    	
	Если НеРаспределилосьПоБазе Тогда
		ЭтоОшибка = Истина;
		
		ТекстСообщения = "Нет базы распределения для косвенных расходов, учитываемых следующим образом:
		|Счет учета			: " + Обход.СчетЗатрат	+ ".
		|Подразделение		: " + Обход.Подразделение + ". 
		|Статья затрат		: " + Обход.СтатьяЗатрат + ". ";
		Если ЗначениеЗаполнено(Обход.СчетЗакрытия) Тогда
			
			ТекстСообщения = ТекстСообщения + "
			|Счет закрытия		: " + Обход.СчетЗакрытия + ". ";
			
			Для НомерСубконто = 1 По Обход.СчетЗакрытия.ВидыСубконто.Количество() Цикл
				ТекущаяАналитика = "<РАСПРЕДЕЛЕНИЕ>";
				Если ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто]) Тогда
					ТекущаяАналитика = Обход["СубконтоЗакрытия" + НомерСубконто];
				КонецЕсли;	
				ТекстСообщения = ТекстСообщения + "
				|Субконто закрытия " + НомерСубконто + "	: " + ТекущаяАналитика + ". ";	
			КонецЦикла;	
			
		КонецЕсли;
		
		Если РаспределениеВыполнено Тогда
			ЭтоОшибка = Ложь;
			ТекстСообщения = ТекстСообщения + "
			|Косвенные расходы были распределены на все подразделения по базе распределения """ + Обход.Метод + """";	
		КонецЕсли;	
		
		ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , ,ЭтотОбъект ,РегОперация, ЭтоОшибка);			
		
	КонецЕсли;	

	Возврат РаспределениеВыполнено;
	
КонецФункции //РаспределитьОПРПоБазе
	
Функция РаспределитьОПР(СтруктураШапкиДокумента, мБазаКоэффициентов, СтруктураДопПараметров)
	
	РаспределениеВыполнено = Ложь;
	
	// Формирование запроса по косвенным расходам
	РезультатЗапроса = Неопределено;
	
	СформироватьЗапросПоКосвеннымЗатратам(СтруктураШапкиДокумента, РезультатЗапроса, СтруктураДопПараметров);
	
	ДеревоОбходПоМетодамРаспределения = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДеревоОбходПоМетодамРаспределения.Колонки.Добавить("БазаРаспределения");
	ДеревоОбходПоМетодамРаспределения.Колонки.Добавить("РезультатРаспределения");
	ДеревоОбходПоМетодамРаспределения.Колонки.Добавить("НаборСтрок");
	
	СтруктПоиска = Новый Структура;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		РегОперация = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ;
	Иначе
		РегОперация = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ;
	КонецЕсли;
	
	Для Каждого ОбходПоМетодамРаспределения Из ДеревоОбходПоМетодамРаспределения.Строки Цикл
		
		Если ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.МатериальныеЗатраты Тогда
			ИмяРеквБазы = "Мат";
		ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ОплатаТруда Тогда
			ИмяРеквБазы = "ЗП";
		ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
			ИмяРеквБазы = "План";
		ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска Тогда
			ИмяРеквБазы = "Выпуск";
		ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.Процентом Тогда
			ИмяРеквБазы = "Процент";
		ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.НеРаспределяется Тогда
			Для Каждого Обход Из ОбходПоМетодамРаспределения.Строки Цикл
				
				ТекстСообщения = "Установлен метод ""Не распределять"" общепроизводственные расходы для:
					|Подразделение: " + Обход.Подразделение + "
					|Статья затрат: " + Обход.СтатьяЗатрат;
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , ,ЭтотОбъект, РегОперация, Ложь);
				
			КонецЦикла;
			Продолжить;
		Иначе
			Для Каждого Обход Из ОбходПоМетодамРаспределения.Строки Цикл
				
				Если СтруктураДопПараметров.Учет = "Нал" И Обход.Сумма <> 0 И Обход.СуммаБазы = 0  Тогда
					ТекстСообщения = "Нет зарегистрированных данных в бухгалтерском учете для распределения накладных расходов в НУ:
					|Подразделение: " + Обход.Подразделение + "
					|Статья затрат: " + Обход.СтатьяЗатрат  + "
					|Нераспределенная сумма накладных: " + Обход.Сумма;
					
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , ,ЭтотОбъект,РегОперация, Ложь);
					
				Иначе
					
					ТекстСообщения = "Не указан способ распределения общепроизводственных расходов для:
					|Подразделение: " + Обход.Подразделение + "
					|Статья затрат: " + Обход.СтатьяЗатрат;
					       					
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , ,ЭтотОбъект,РегОперация, Ложь);
				КонецЕсли;
				
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		МассивГрупп    			 	= Новый Массив();
		ПодразделениеДляПроверки 	= Неопределено;
		СтатьяЗатратДляПроверки  	= Неопределено;
		СуммаДляПроверки 			= Неопределено;
		ПроцентРаспределения 	 	= 0;
		СуммаРспределенияПоПроценту = 0;
	
		// Первым проходом получим базу распределения там, где это необходимо
		// Так же выделим группы строк
		// Этим же проходом формируем проводки по простым схемам распределения
		Для Каждого Обход Из ОбходПоМетодамРаспределения.Строки Цикл
			
			// сумма для распределения не должна быть равной или меньше нуля
			Если Обход.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Обход.СчетЗакрытия) Тогда
				
				// Стандартное распределение
				РаспределениеВыполнено = РаспределитьОПРПоБазе(СтруктураШапкиДокумента, ИмяРеквБазы, мБазаКоэффициентов, Обход, , , СтруктураДопПараметров, ОбходПоМетодамРаспределения.Метод);
				
				// Распределение по всем подразделениям
				Если Не РаспределениеВыполнено Тогда
					РаспределениеВыполнено = РаспределитьОПРПоБазе(СтруктураШапкиДокумента, ИмяРеквБазы, мБазаКоэффициентов, Обход, , Истина, СтруктураДопПараметров, ОбходПоМетодамРаспределения.Метод);
				КонецЕсли;
				
			ИначеЕсли НЕ Обход.ПризнакПроизводсвенногоСчета ИЛИ Обход.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.Процентом Тогда
				
				НоваяПроводка = мОперация.Добавить();
				НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
				НоваяПроводка.Активность  = Истина;
				НоваяПроводка.Период      = Дата;
				НоваяПроводка.Содержание  = "Списание ОПР на непроизводственные счета";
				НоваяПроводка.ВидРегламентнойОперации = РегОперация;
				
				Если Обход.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.Процентом Тогда
					ПроцентРаспределения = ПроцентРаспределения + Обход.ПроцентРаспределения;
					
					Если ПроцентРаспределения = 100 Тогда 
						
						Если ЗначениеЗаполнено(Обход.Сумма) Тогда
							СуммаРспределенияПоПроценту = Окр(Обход.Сумма - СуммаРспределенияПоПроценту,2);
						КонецЕсли;
						
						
						НоваяПроводка.Сумма = СуммаРспределенияПоПроценту; 
				
						СуммаРспределенияПоПроценту = 0;
						ПроцентРаспределения        = 0;
						
					Иначе 
						
						Если ЗначениеЗаполнено(Обход.Сумма) И ЗначениеЗаполнено( Обход.ПроцентРаспределения) Тогда						
							СуммаРспределения = Окр(Обход.Сумма * Обход.ПроцентРаспределения / 100,2);            						
							СуммаРспределенияПоПроценту = СуммаРспределенияПоПроценту + СуммаРспределения;
						КонецЕсли;						
						
						НоваяПроводка.Сумма = СуммаРспределения; 
						
					КонецЕсли;
					
				Иначе 
					НоваяПроводка.Сумма = Обход.Сумма;
				КонецЕсли;
				
				НоваяПроводка.СчетДт = Обход.СчетЗакрытия;
				
				НомерСубконтоПодразделения 		  = 0;
				НомерСубконтоНоменклатурнойГруппы = 0;
				СтатьяЗатратРаспределения         = Неопределено;
				ПодразделениеАналитики            = Неопределено;
				СтатьяЗатратАналитики             = Неопределено;
				НоменклатурнаяГруппаАналитики     = Неопределено;
				 				 			        										
				Для НомерСубконто = 1 По Обход.СчетЗакрытия.ВидыСубконто.Количество() Цикл
					
					Если (ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда
						
						Если НЕ ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто]) Тогда
							УстанавливаемоеЗначениеАналитики = Обход.Подразделение;
						Иначе
							УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
						КонецЕсли;
						ПодразделениеАналитики = УстанавливаемоеЗначениеАналитики;
						
					ИначеЕсли (ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат")) Тогда
						
						Если НЕ ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто]) Тогда
							УстанавливаемоеЗначениеАналитики = Обход.СтатьяЗатрат;
						Иначе
							УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
						КонецЕсли;
						СтатьяЗатратРаспределения = УстанавливаемоеЗначениеАналитики;						
						
					Иначе
						УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
					КонецЕсли;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, НомерСубконто, УстанавливаемоеЗначениеАналитики);
					
					Если ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
						НомерСубконтоПодразделения = НомерСубконто;
					ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						НомерСубконтоНоменклатурнойГруппы = НомерСубконто;
					КонецЕсли;

				КонецЦикла;
				
				НоваяПроводка.СчетКт = Обход.СчетЗатрат;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", Обход.Подразделение);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат",  Обход.СтатьяЗатрат);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(НоваяПроводка, Обход.СтруктурноеПодразделениеЗакрытия, Обход.СтруктурноеПодразделение);
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					НоваяПроводка.ВидУчетаДт = Обход.ВидУчетаРаспределения;
					НоваяПроводка.ВидУчетаКт = Обход.ВидУчетаНакладных;
				КонецЕсли;
				
				РаспределениеВыполнено = Истина;
								
				ЗаписьРасчетаКосвенныхРасходов = СтруктураДопПараметров.ЗаписьРасчетаКосвенныхРасходов;
				
				СтрокаЗаписьРасчетаКосвенныхРасходов 								   = ЗаписьРасчетаКосвенныхРасходов.Добавить();
				СтрокаЗаписьРасчетаКосвенныхРасходов.СчетУчета						   = Обход.СчетЗатрат;
				СтрокаЗаписьРасчетаКосвенныхРасходов.ВидОперации					   = Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщепроизводственныхРасходов;
				СтрокаЗаписьРасчетаКосвенныхРасходов.Подразделение 					   = Обход.Подразделение;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатрат					   = Обход.СтатьяЗатрат;
				СтрокаЗаписьРасчетаКосвенныхРасходов.БазаРаспределения				   = ОбходПоМетодамРаспределения.Метод;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения 				   = Обход.СчетЗакрытия;
				СтрокаЗаписьРасчетаКосвенныхРасходов.ПодразделениеРаспределения 	   = ?(НомерСубконтоПодразделения = 0, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), Обход["СубконтоЗакрытия" + НомерСубконтоПодразделения]);
				СтрокаЗаписьРасчетаКосвенныхРасходов.НоменклатурнаяГруппаРаспределения = ?(НомерСубконтоНоменклатурнойГруппы = 0,Справочники.НоменклатурныеГруппы.ПустаяСсылка(), Обход["СубконтоЗакрытия" + НомерСубконтоНоменклатурнойГруппы]);
				СтрокаЗаписьРасчетаКосвенныхРасходов.Сумма							   = НоваяПроводка.Сумма; 
				СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделение 		   = Обход.СтруктурноеПодразделение;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделениеРаспределения = Обход.СтруктурноеПодразделениеЗакрытия;										
				СтрокаЗаписьРасчетаКосвенныхРасходов.МетодРаспределенияКосвенныхРасходов = Обход.МетодРаспределенияЗатратСсылка;										
				                            				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					СтрокаЗаписьРасчетаКосвенныхРасходов.ВидУчета = Обход.ВидУчетаНакладных;
				КонецЕсли; 				
				
				Если Обход.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.Процентом Тогда
					СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = Обход.ПроцентРаспределения;						
				Иначе
					СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = НоваяПроводка.Сумма;						
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(СтатьяЗатратРаспределения) Тогда
					СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатратРаспределения = СтатьяЗатратРаспределения;
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете  Тогда
					
					НомерСубконтоПодразделенияНУ = 0;
					НомерСубконтоНоменклатурнойГруппыНУ = 0;
					НомерСубконтоСтатьиЗатратНУ = 0;
					
					Для НомерСубконто = 1 По 3 Цикл
						
						Если Не ЗначениеЗаполнено(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) Тогда
							Продолжить;
						КонецЕсли;
						
						Если ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
							НомерСубконтоПодразделенияНУ = НомерСубконто;
						ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
							НомерСубконтоНоменклатурнойГруппыНУ = НомерСубконто;
						ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
							НомерСубконтоСтатьиЗатратНУ = НомерСубконто;
						КонецЕсли;
						
					КонецЦикла;
					
					//Для расчета базы по НУ						
					СтрокаЗаписьРасчетаКосвенныхРасходов = ЗаписьРасчетаКосвенныхРасходов.Добавить();
					СтрокаЗаписьРасчетаКосвенныхРасходов.СчетУчета = Обход.СчетЗатратНУ;
					СтрокаЗаписьРасчетаКосвенныхРасходов.ВидОперации = Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщепроизводственныхРасходов;
					СтрокаЗаписьРасчетаКосвенныхРасходов.Подразделение = Обход.Подразделение;
					СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатрат = Обход.СтатьяЗатрат;
					СтрокаЗаписьРасчетаКосвенныхРасходов.БазаРаспределения = ОбходПоМетодамРаспределения.Метод;
					
					//счет и аналитика закрытия 
					Если НЕ ЗначениеЗаполнено(Обход.СчетЗакрытияНУ) Тогда
						СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", НоваяПроводка.СчетДт), , , СтруктураШапкиДокумента.Дата);
					Иначе
						СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = Обход.СчетЗакрытияНУ;
					КонецЕсли;
					
					СтрокаЗаписьРасчетаКосвенныхРасходов.ПодразделениеРаспределения        = ?(НомерСубконтоПодразделенияНУ = 0,?(НомерСубконтоПодразделения = 0, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), Обход["СубконтоЗакрытия" + НомерСубконтоПодразделения]),Обход["СубконтоЗакрытияНУ" + НомерСубконтоПодразделенияНУ]);
					СтрокаЗаписьРасчетаКосвенныхРасходов.НоменклатурнаяГруппаРаспределения = ?(НомерСубконтоНоменклатурнойГруппыНУ = 0, ?(НомерСубконтоНоменклатурнойГруппы = 0,Справочники.НоменклатурныеГруппы.ПустаяСсылка(), Обход["СубконтоЗакрытия" + НомерСубконтоНоменклатурнойГруппы]),Обход["СубконтоЗакрытияНУ" + НомерСубконтоНоменклатурнойГруппыНУ]);						
					СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатратРаспределения         = ?(НомерСубконтоСтатьиЗатратНУ = 0, СтатьяЗатратРаспределения, Обход["СубконтоЗакрытияНУ" + НомерСубконтоСтатьиЗатратНУ]);
					
					СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделение          = Обход.СтруктурноеПодразделение;
					СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделениеРаспределения 		   = Обход.СтруктурноеПодразделениеЗакрытия;
					СтрокаЗаписьРасчетаКосвенныхРасходов.РасчетБазы  		               = Истина;
					СтрокаЗаписьРасчетаКосвенныхРасходов.МетодРаспределенияКосвенныхРасходов = Обход.МетодРаспределенияЗатратСсылка;										
					
					Если Обход.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.Процентом Тогда
						СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = Обход.ПроцентРаспределения;						
					Иначе
						СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = НоваяПроводка.Сумма;						
					КонецЕсли;	
					СтрокаЗаписьРасчетаКосвенныхРасходов.Сумма  	    =  НоваяПроводка.Сумма;
				КонецЕсли;										
				

			Иначе
				
				Если Обход.Подразделение <> ПодразделениеДляПроверки
				 Или Обход.СтатьяЗатрат <> СтатьяЗатратДляПроверки
				 Или Обход.Сумма <> СуммаДляПроверки Тогда
					// Началась очередная группа
					Группа = Новый Массив();
					МассивГрупп.Добавить(Группа);
					ПодразделениеДляПроверки 			= Обход.Подразделение;
					СтатьяЗатратДляПроверки				= Обход.СтатьяЗатрат;
					СуммаДляПроверки 					= Обход.Сумма;
				КонецЕсли;
				Группа.Добавить(Обход);
				
				Если Обход.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.Процентом Тогда
					Обход.БазаРаспределения = Обход.ПроцентРаспределения; 
				Иначе
					//По БУ ищмем базы
					Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 
						// Накладываем фильтры в зависимости от указанной аналитики закрытия
						СтруктПоиска.Очистить();
						СтруктПоиска.Вставить("СчетЗатрат", Обход.СчетЗакрытия);
						Для НомерСубконто = 1 По 3 Цикл
							Если Не ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто]) Тогда
								Продолжить;
							КонецЕсли;
							
							Если ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
								СтруктПоиска.Вставить("Подразделение", Обход["СубконтоЗакрытия" + НомерСубконто]);
							ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
								СтруктПоиска.Вставить("НоменклатурнаяГруппа", Обход["СубконтоЗакрытия" + НомерСубконто]);
							КонецЕсли;
						КонецЦикла;
																
						НаборСтрок = мБазаКоэффициентов.НайтиСтроки(СтруктПоиска);
						
						БазаРаспределения = 0;
						Для Каждого СтрКоэф Из НаборСтрок Цикл
							БазаРаспределения = БазаРаспределения + СтрКоэф["База"+ИмяРеквБазы];
						КонецЦикла;
						
						Обход.НаборСтрок = НаборСтрок;
						Обход.БазаРаспределения = БазаРаспределения;
					Иначе
						//По НУ базу распределения берем уже рассчитанную на этапе расчета БУ
						Обход.БазаРаспределения = Обход.СуммаБазы;
						Обход.НаборСтрок = 0;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		// Вторым проходом распределяем суммы
		Для Каждого Группа Из МассивГрупп Цикл
			МассивКоэф = Новый Массив();
			Для Каждого Обход Из Группа Цикл
				Сумма = Обход.Сумма;
				МассивКоэф.Добавить(Обход.БазаРаспределения);
			КонецЦикла;
			МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(Сумма, МассивКоэф);
			Счетчик = - 1;
			Для Каждого Обход Из Группа Цикл
				Если МассивСумм = Неопределено Тогда
					Обход.РезультатРаспределения = 0;
				Иначе
					Счетчик = Счетчик + 1;
					Обход.РезультатРаспределения = МассивСумм[Счетчик];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Третим проходом делаем проводки
		Для Каждого Группа Из МассивГрупп Цикл
			Для Каждого Обход Из Группа Цикл
				
				Если Обход.РезультатРаспределения = 0 И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
					Продолжить;
				КонецЕсли;
				
				НомерСубконтоПодразделения = 0;
				НомерСубконтоНоменклатурнойГруппы = 0;
				НомерСубконтоСтатьиЗатрат = 0;
				
				Для НомерСубконто = 1 По 3 Цикл
					
					Если Не ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто]) И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
						Продолжить;
					КонецЕсли;
					
					Если ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
						НомерСубконтоПодразделения = НомерСубконто;
					ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						НомерСубконтоНоменклатурнойГруппы = НомерСубконто;
					ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
						НомерСубконтоСтатьиЗатрат = НомерСубконто;
					КонецЕсли;  					
				КонецЦикла;
				
				
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
					
					НомерСубконтоПодразделенияНУ = 0;
					НомерСубконтоНоменклатурнойГруппыНУ = 0;
					НомерСубконтоСтатьиЗатратНУ = 0;
					
					Для НомерСубконто = 1 По 3 Цикл
						
						Если Не ЗначениеЗаполнено(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) Тогда
							Продолжить;
						КонецЕсли;
						
						Если ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
							НомерСубконтоПодразделенияНУ = НомерСубконто;
						ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
							НомерСубконтоНоменклатурнойГруппыНУ = НомерСубконто;
						ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
							НомерСубконтоСтатьиЗатратНУ = НомерСубконто;
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;

				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					ВидУчетаЗатрат = Обход.ВидУчетаРаспределения;
				КонецЕсли;
				
				ДолжноБытьСписаноОПР = Обход.РезультатРаспределения;
				
				// Если в аналитике закрытия указана Номенклатурная группа, то необходимо ее добавить в каждое подразделение 
				// счета закрытия.
				//Для НУ вся аналитика закрытия уже определена на этапе БУ
				Если НомерСубконтоНоменклатурнойГруппы <> 0 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					Если НомерСубконтоПодразделения = 0 И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
						
					Иначе
						
						Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
							//ошибки округления
							РазницаБУ_НУ = Обход.СуммаБУ - ДолжноБытьСписаноОПР;
							Если РазницаБУ_НУ >-0.5 И РазницаБУ_НУ < 0.5 Тогда
								ДолжноБытьСписаноОПР = ДолжноБытьСписаноОПР + РазницаБУ_НУ;
							КонецЕсли;
						КонецЕсли;

						ВидУчета = ?(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете, Обход.ВидУчетаНакладных, Справочники.ВидыУчетаНУ.ПустаяСсылка());
						
						НоваяПроводка = мОперация.Добавить();
						НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
						НоваяПроводка.Активность  = Истина;
						НоваяПроводка.Период      = Дата;
						НоваяПроводка.Содержание  = "Распределение ОПР";
						НоваяПроводка.ВидРегламентнойОперации = РегОперация;
						
						НоваяПроводка.Сумма = ДолжноБытьСписаноОПР;
						
						НоваяПроводка.СчетДт = Обход.СчетЗакрытия;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", Обход["СубконтоЗакрытия" + НомерСубконтоНоменклатурнойГруппы]);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения",        Обход["СубконтоЗакрытия" + НомерСубконтоПодразделения]);
						
						Если НомерСубконтоСтатьиЗатрат = 0 Тогда
							УстанавливаемоеЗначениеАналитики = Обход.СтатьяЗатрат;
						Иначе
							УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконтоСтатьиЗатрат];
						КонецЕсли;
						
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         УстанавливаемоеЗначениеАналитики);
						
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(НоваяПроводка, Обход.СтруктурноеПодразделениеЗакрытия, Обход.СтруктурноеПодразделение);
						
						НоваяПроводка.СчетКт = Обход.СчетЗатрат;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        Обход.Подразделение);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат",         Обход.СтатьяЗатрат);
						
						Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
							НоваяПроводка.ВидУчетаДт = ВидУчетаЗатрат;
							НоваяПроводка.ВидУчетаКт = Обход.ВидУчетаНакладных;
							ПроцедурыНалоговогоУчета.ВидУчетаНУ(НоваяПроводка, Обход.ВидУчетаНакладных, Ложь, Ложь);
						КонецЕсли;
						
						РаспределениеВыполнено = Истина;
						
						ЗаписьРасчетаКосвенныхРасходов = СтруктураДопПараметров.ЗаписьРасчетаКосвенныхРасходов;
						СтрокаЗаписьРасчетаКосвенныхРасходов = ЗаписьРасчетаКосвенныхРасходов.Добавить();
						СтрокаЗаписьРасчетаКосвенныхРасходов.СчетУчета = Обход.СчетЗатрат;
						СтрокаЗаписьРасчетаКосвенныхРасходов.ВидОперации = Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщепроизводственныхРасходов;
						СтрокаЗаписьРасчетаКосвенныхРасходов.Подразделение = Обход.Подразделение;
						СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатрат = Обход.СтатьяЗатрат;
						СтрокаЗаписьРасчетаКосвенныхРасходов.БазаРаспределения = ОбходПоМетодамРаспределения.Метод;
						СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = Обход.СчетЗакрытия;
						СтрокаЗаписьРасчетаКосвенныхРасходов.ПодразделениеРаспределения = Обход["СубконтоЗакрытия" + НомерСубконтоПодразделения];
						СтрокаЗаписьРасчетаКосвенныхРасходов.НоменклатурнаяГруппаРаспределения = Обход["СубконтоЗакрытия" + НомерСубконтоНоменклатурнойГруппы];
						СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатратРаспределения = УстанавливаемоеЗначениеАналитики;
						СтрокаЗаписьРасчетаКосвенныхРасходов.Сумма = ДолжноБытьСписаноОПР; 
						СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделение = Обход.СтруктурноеПодразделение;
						СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделениеРаспределения 		   = Обход.СтруктурноеПодразделениеЗакрытия;																		
						СтрокаЗаписьРасчетаКосвенныхРасходов.ВидУчета = ВидУчета;						
						СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = Обход.БазаРаспределения;
						СтрокаЗаписьРасчетаКосвенныхРасходов.МетодРаспределенияКосвенныхРасходов = Обход.МетодРаспределенияЗатратСсылка;										
						
						Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
							//Для расчета базы по НУ						
							СтрокаЗаписьРасчетаКосвенныхРасходов = ЗаписьРасчетаКосвенныхРасходов.Добавить();
							СтрокаЗаписьРасчетаКосвенныхРасходов.СчетУчета = Обход.СчетЗатратНУ;
							СтрокаЗаписьРасчетаКосвенныхРасходов.ВидОперации = Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщепроизводственныхРасходов;
							СтрокаЗаписьРасчетаКосвенныхРасходов.Подразделение = Обход.Подразделение;
							СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатрат = Обход.СтатьяЗатрат;
							СтрокаЗаписьРасчетаКосвенныхРасходов.БазаРаспределения = ОбходПоМетодамРаспределения.Метод;
							Если НЕ ЗначениеЗаполнено(Обход.СчетЗакрытияНУ) Тогда
								СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", НоваяПроводка.СчетДт), , , СтруктураШапкиДокумента.Дата);
							Иначе
								СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = Обход.СчетЗакрытияНУ;
							КонецЕсли;
							
							СтрокаЗаписьРасчетаКосвенныхРасходов.ПодразделениеРаспределения = ?(НомерСубконтоПодразделенияНУ = 0, Обход["СубконтоЗакрытия" + НомерСубконтоПодразделения],Обход["СубконтоЗакрытияНУ" + НомерСубконтоПодразделенияНУ]);
							СтрокаЗаписьРасчетаКосвенныхРасходов.НоменклатурнаяГруппаРаспределения = ?(НомерСубконтоНоменклатурнойГруппыНУ = 0, Обход["СубконтоЗакрытия" + НомерСубконтоНоменклатурнойГруппы],Обход["СубконтоЗакрытияНУ" + НомерСубконтоНоменклатурнойГруппыНУ]);												
							СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатратРаспределения = ?(НомерСубконтоСтатьиЗатратНУ = 0, УстанавливаемоеЗначениеАналитики,Обход["СубконтоЗакрытияНУ" + НомерСубконтоСтатьиЗатратНУ]);												
							СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделение = Обход.СтруктурноеПодразделение;	
							СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделениеРаспределения 		   = Обход.СтруктурноеПодразделениеЗакрытия;
							СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделениеРаспределения 		   = Обход.СтруктурноеПодразделениеЗакрытия;
							СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы  = Обход.БазаРаспределения;						
							СтрокаЗаписьРасчетаКосвенныхРасходов.РасчетБазы = Истина;	
							СтрокаЗаписьРасчетаКосвенныхРасходов.МетодРаспределенияКосвенныхРасходов = Обход.МетодРаспределенияЗатратСсылка;	
							СтрокаЗаписьРасчетаКосвенныхРасходов.Сумма	    = ДолжноБытьСписаноОПР;	

						КонецЕсли;   
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				// Стандартное распределение для БУ				
				РаспределениеВыполнено = РаспределитьОПРПоБазе(СтруктураШапкиДокумента, ИмяРеквБазы, мБазаКоэффициентов, Обход, Обход.НаборСтрок, , СтруктураДопПараметров, ОбходПоМетодамРаспределения.Метод, ДолжноБытьСписаноОПР);
					
					// Распределение по всем подразделениям
				Если НЕ РаспределениеВыполнено Тогда
					РаспределениеВыполнено = РаспределитьОПРПоБазе(СтруктураШапкиДокумента, ИмяРеквБазы, мБазаКоэффициентов, Обход, , Истина, СтруктураДопПараметров, ОбходПоМетодамРаспределения.Метод, ДолжноБытьСписаноОПР);
				КонецЕсли;   												
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если РаспределениеВыполнено Тогда
		мОперация.Записать(Ложь);
	КонецЕсли;
	
	Возврат РаспределениеВыполнено;
	
КонецФункции // РаспределитьОПР()

// Функция расчета коэф. распределения косвенных затрат по переделам
//
Функция РасчетБазыКоэффициентов(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
		
	 Запрос = Новый Запрос;
	 Запрос.Текст =  "ВЫБРАТЬ
	                 |	ПолнаяБазаРаспределения.СчетЗатрат,
	                 |	ПолнаяБазаРаспределения.Подразделение,
	                 |	ПолнаяБазаРаспределения.СтруктурноеПодразделение,
	                 |	ПолнаяБазаРаспределения.НоменклатурнаяГруппа,
	                 |	СУММА(ПолнаяБазаРаспределения.БазаМат) КАК БазаМат,
	                 |	СУММА(ПолнаяБазаРаспределения.БазаЗП) КАК БазаЗП,
	                 |	СУММА(ПолнаяБазаРаспределения.БазаВыпуск) КАК БазаВыпуск,
	                 |	СУММА(ПолнаяБазаРаспределения.БазаПлан) КАК БазаПлан
	                 |ИЗ
	                 |	(ВЫБРАТЬ
	                 |		ТиповойОбороты.Счет КАК СчетЗатрат,
	                 |		ТиповойОбороты.Субконто1 КАК Подразделение,
	                 |		ТиповойОбороты.Субконто2 КАК НоменклатурнаяГруппа,
	                 |		ТиповойОбороты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	                 |		СУММА(ВЫБОР
	                 |				КОГДА ТиповойОбороты.Субконто3.КатегорияЗатрат = &МатЗатраты
	                 |					ТОГДА ТиповойОбороты.СуммаОборотДт
	                 |				ИНАЧЕ 0
	                 |			КОНЕЦ) КАК БазаМат,
	                 |		СУММА(ВЫБОР
	                 |				КОГДА ТиповойОбороты.Субконто3.КатегорияЗатрат = &ОплатаТруда
	                 |					ТОГДА ТиповойОбороты.СуммаОборотДт
	                 |				ИНАЧЕ 0
	                 |			КОНЕЦ) КАК БазаЗП,
	                 |		0 КАК БазаВыпуск,
	                 |		0 КАК БазаПлан
	                 |	ИЗ
	                 |		РегистрБухгалтерии.Типовой.Обороты(&НачДата, &КонДата, Месяц, Счет В ИЕРАРХИИ (&СчетаЗатрат), &ВидыСубконто, Организация = &Организация, , ) КАК ТиповойОбороты
	                 |	
	                 |	СГРУППИРОВАТЬ ПО
	                 |		ТиповойОбороты.Счет,
	                 |		ТиповойОбороты.Субконто1,
	                 |		ТиповойОбороты.Субконто2,
	                 |		ТиповойОбороты.СтруктурноеПодразделение
	                 |	
	                 |	ОБЪЕДИНИТЬ ВСЕ
	                 |	
	                 |	ВЫБРАТЬ
	                 |		ВыпускПродукцииУслуг.СчетЗатрат,
	                 |		ВыпускПродукцииУслуг.Подразделение,
	                 |		ВыпускПродукцииУслуг.НоменклатурнаяГруппа,
	                 |		ВыпускПродукцииУслуг.СтруктурноеПодразделение,
	                 |		0,
	                 |		0,
	                 |      ВЫРАЗИТЬ(СУММА(ВыпускПродукцииУслуг.Количество) КАК ЧИСЛО(15, 2)),
	                 |		СУММА(ВыпускПродукцииУслуг.ПлановаяСтоимость)
	                 |	ИЗ
	                 |		РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет КАК ВыпускПродукцииУслуг
	                 |	ГДЕ
	                 |		ВыпускПродукцииУслуг.Период МЕЖДУ &НачДата И &КонДата
	                 |		И ВыпускПродукцииУслуг.Подразделение.Владелец = &Организация
	                 |	
	                 |	СГРУППИРОВАТЬ ПО
	                 |		ВыпускПродукцииУслуг.СчетЗатрат,
	                 |		ВыпускПродукцииУслуг.Подразделение,
	                 |		ВыпускПродукцииУслуг.СтруктурноеПодразделение,
	                 |		ВыпускПродукцииУслуг.НоменклатурнаяГруппа) КАК ПолнаяБазаРаспределения
	                 |
	                 |СГРУППИРОВАТЬ ПО
	                 |	ПолнаяБазаРаспределения.СтруктурноеПодразделение,
	                 |	ПолнаяБазаРаспределения.СчетЗатрат,
	                 |	ПолнаяБазаРаспределения.Подразделение,
	                 |	ПолнаяБазаРаспределения.НоменклатурнаяГруппа";	 
			 
	Запрос.УстановитьПараметр("НачДата",     мНачДата);
	Запрос.УстановитьПараметр("КонДата",     мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ОплатаТруда", Перечисления.КатегорииЗатрат.ОплатаТруда);
	Запрос.УстановитьПараметр("МатЗатраты",  Перечисления.КатегорииЗатрат.МатериальныеРасходы);
	 
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете  Тогда
		СчетаЗатрат = Новый Массив;
		СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ОсновноеПроизводство_);
		СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства);
		СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ВспомогательныеПроизводства);			
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("СчетаЗатрат", СчетаЗатрат);		
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // РасчетБазыКоэффициентов()

// Общепроизводственные расходы списываются на счета учета
// прямых расходов основного и вспомогательного производства.
// При списании расходы распределяются по подразделениям и
// номенклатурным группам.
//
Процедура РаспределениеКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ = Ложь)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		мБазаКоэффициентов = РасчетБазыКоэффициентов(СтруктураШапкиДокумента, СтруктураДопПараметров);
	Иначе // В НУ может потребоваться, если не указаны счета закрытия, в других случаях заполняется по базе, 
		//рассчитанной на этапе БУ
		мБазаКоэффициентов =  РасчетБазыКоэффициентовНУ(СтруктураШапкиДокумента);
	КонецЕсли;
	  	
	РаспределениеВыполнено = Ложь;
	
	// Списание общепроизводственных расходов на счете учета расходов
	// основного и вспомогательного производств.
	РаспределениеВыполнено = РаспределитьОПР(СтруктураШапкиДокумента, мБазаКоэффициентов, СтруктураДопПараметров);
	
	// Распределение общепроизводственных расходов
	// на себестоимость выпущенной продукции (услуг).
	РасчетПрямыхЗатрат(СтруктураШапкиДокумента, Истина, СтруктураДопПараметров, Отказ);

КонецПроцедуры // РаспределениеКосвенныхРасходов()

Функция  РасчетБазыКоэффициентовНУ(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ПериодРасчета", мНачДата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасчетРаспределенияКосвенныхРасходов.СчетРаспределения КАК СчетЗатрат,
	               |	РасчетРаспределенияКосвенныхРасходов.ПодразделениеРаспределения КАК Подразделение,
	               |	РасчетРаспределенияКосвенныхРасходов.Подразделение КАК ПодразделениеНакладных,
	               |	РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделение,
	               |	СУММА(ВЫБОР
	               |			КОГДА РасчетРаспределенияКосвенныхРасходов.БазаРаспределения = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.МатериальныеЗатраты)
	               |				ТОГДА РасчетРаспределенияКосвенныхРасходов.СуммаБазы
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК БазаМат,
	               |	СУММА(ВЫБОР
	               |			КОГДА РасчетРаспределенияКосвенныхРасходов.БазаРаспределения = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.ОплатаТруда)
	               |				ТОГДА РасчетРаспределенияКосвенныхРасходов.СуммаБазы
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК БазаЗП,
	               |	СУММА(ВЫБОР
	               |			КОГДА РасчетРаспределенияКосвенныхРасходов.БазаРаспределения = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска)
	               |				ТОГДА РасчетРаспределенияКосвенныхРасходов.СуммаБазы
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК БазаВыпуск,
	               |	СУММА(ВЫБОР
	               |			КОГДА РасчетРаспределенияКосвенныхРасходов.БазаРаспределения = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость)
	               |				ТОГДА РасчетРаспределенияКосвенныхРасходов.СуммаБазы
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК БазаПлан,
	               |	РасчетРаспределенияКосвенныхРасходов.НоменклатурнаяГруппаРаспределения КАК НоменклатурнаяГруппа,
	               |	РасчетРаспределенияКосвенныхРасходов.СтатьяЗатрат
	               |ИЗ
	               |	РегистрСведений.РасчетРаспределенияКосвенныхРасходов КАК РасчетРаспределенияКосвенныхРасходов
	               |ГДЕ
	               |	РасчетРаспределенияКосвенныхРасходов.Организация = &Организация
	               |	И НАЧАЛОПЕРИОДА(РасчетРаспределенияКосвенныхРасходов.ПериодРасчета, МЕСЯЦ) = &ПериодРасчета
	               |	И РасчетРаспределенияКосвенныхРасходов.СчетУчета ССЫЛКА ПланСчетов.Налоговый
	               |	И РасчетРаспределенияКосвенныхРасходов.РасчетБазы
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасчетРаспределенияКосвенныхРасходов.СчетРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.Подразделение,
	               |	РасчетРаспределенияКосвенныхРасходов.ПодразделениеРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделение,
	               |	РасчетРаспределенияКосвенныхРасходов.НоменклатурнаяГруппаРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.СтатьяЗатрат"; 					
				   
	ТаблицаКоэффициентов = Запрос.Выполнить().Выгрузить();	
					   
	Возврат ТаблицаКоэффициентов;     
	
КонецФункции

// Процедура формирует данные о прямых затратах на переделе по продукции
//
Процедура СформироватьЗапросПоПрямымЗатратам(СтруктураШапкиДокумента, ПеределПодразделение, ПеределНоменклатурнаяГруппа, РезультатЗапроса, СтруктураДопПараметров, ВыполненоРаспределениеОПР)
	  		
	УсловияВстречногоВыпуска1 = "";
	УсловияВстречногоВыпуска2 = "";
	РасчетПрямыхЗатратНомер = СтруктураДопПараметров.РасчетПрямыхЗатратНомер;
	Если Лев(РасчетПрямыхЗатратНомер, 1) = "3" Тогда
		
		ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа", ПеределПодразделение, ПеределНоменклатурнаяГруппа));
		Если ВстречныйВыпуск.Количество() = 0  Тогда
			РасчетПрямыхЗатратНомер = "" 
		КонецЕсли;
		
	ИначеЕсли РасчетПрямыхЗатратНомер <> "" Тогда
		
		ТаблицаВстречногоВыпускаДляОтбора = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.Скопировать();
		ТаблицаВстречногоВыпускаДляОтбора.Свернуть("Продукция, Подразделение, НоменклатурнаяГруппа,  ПодразделениеПересчета, НоменклатурнаяГруппаПересчета", );		
		ВстречныйВыпуск = ТаблицаВстречногоВыпускаДляОтбора.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа", ПеределПодразделение, ПеределНоменклатурнаяГруппа));
		Если ВстречныйВыпуск.Количество() > 0  Тогда
			
			ПродукцияВстречногоВыпуска    = Новый Массив;
			ПодразделениеПересчета        = Новый Массив;
			НоменклатурнаяГруппаПересчета = Новый Массив;
									
			Для Каждого СтрокаВстречногоВыпуска Из ВстречныйВыпуск Цикл
				ПродукцияВстречногоВыпуска.Добавить(СтрокаВстречногоВыпуска.Продукция);
				ПодразделениеПересчета.Добавить(СтрокаВстречногоВыпуска.ПодразделениеПересчета);
				НоменклатурнаяГруппаПересчета.Добавить(СтрокаВстречногоВыпуска.НоменклатурнаяГруппаПересчета);				
			КонецЦикла;
			Если РасчетПрямыхЗатратНомер = "1" Тогда
				УсловияВстречногоВыпуска1 = " И Не (КорСубконто1 В (&ПодразделениеПересчета) И КорСубконто2 В (&НоменклатурнаяГруппаПересчета))";
				УсловияВстречногоВыпуска2 = " И Не (Подразделение В (&ПодразделениеПересчета) И НоменклатурнаяГруппа В (&НоменклатурнаяГруппаПересчета))";
			Иначе
				УсловияВстречногоВыпуска1 = " И КорСубконто1 В (&ПодразделениеПересчета) И КорСубконто2 В (&НоменклатурнаяГруппаПересчета)";
				УсловияВстречногоВыпуска2 = " И Подразделение В (&ПодразделениеПересчета) И НоменклатурнаяГруппа В (&НоменклатурнаяГруппаПересчета)";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли; 
			
	ТекстЗапроса = "ВЫБРАТЬ
		|	ВыпускПродукцииУслуг.СчетЗатрат 			КАК СчетЗатрат,
		|	ВыпускПродукцииУслуг.Подразделение 			КАК Подразделение,
		|	ВыпускПродукцииУслуг.НоменклатурнаяГруппа 	КАК НоменклатурнаяГруппа,"
		+ ?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, """""", "
		| ТиповойОстатки.ВидУчета ") + " Как ВидУчетаНУ,
		|	ВыпускПродукцииУслуг.Продукция,
		|	ВыпускПродукцииУслуг.СчетСписания,
		|	ВыпускПродукцииУслуг.СубконтоСписания1,
		|	ВыпускПродукцииУслуг.СубконтоСписания2,
		|	ВыпускПродукцииУслуг.СубконтоСписания3,
		|	ВыпускПродукцииУслуг.СтруктурноеПодразделение КАК СтруктурноеПодразделение,";
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	СУММА(ЕСТЬNULL(ВыпускПродукцииУслугПоВидамУчета.ПлановаяСтоимостьОборот, 0)) КАК ПлановаяСтоимостьПоВидуУчета,
			|	Сумма(ЕСТЬNULL(ВыпускПродукцииУслугПоВидамУчета.КоличествоОборот,0)) КАК КоличествоПоВидуУчета,";
		КонецЕсли;	
		ТекстЗапроса = ТекстЗапроса + "			
		|	СУММА(ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0)) КАК ПлановаяСтоимость,
		|	Сумма(ЕСТЬNULL(ВыпускПродукцииУслуг.КоличествоОборот,0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0)) КАК СписаноРасходов,
		|	СУММА(ЕСТЬNULL(ТиповойОстатки.СуммаКонечныйОстаток, 0)) 		 КАК ОстатокПрямыхРасходов, 
		|	СУММА(ЕСТЬNULL(ТиповойОстатки.СуммаОборотДт, 0)) 				 КАК ВсегоПрямыхРасходов,			
		|	СУММА(ЕСТЬNULL(ТиповойДвиженияССубконто.Сумма, 0)) 				 КАК СписаноВНЗП,		
		|	МАКСИМУМ(ЕСТЬNULL(ОстаткиНЗП.Сумма"+ ?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "БУ", "НУ")+",0)) КАК СуммаНЗП
		|ИЗ
		|	РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет.Обороты(&НачГраница, &КонГраница, Месяц, 
		| Организация = &Организация И 
		| Подразделение = &Подразделение 
		|" + ?(ПеределНоменклатурнаяГруппа = "Все", "", " И  НоменклатурнаяГруппа = &НоменклатурнаяГруппа") + УсловияВстречногоВыпуска2 + "
		|) КАК ВыпускПродукцииУслуг";
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ 
			|	РегистрНакопления.ВыпускПродукцииУслугНалоговыйУчет.Обороты(&НачГраница, &КонГраница, Месяц,
			| Организация = &Организация И ВидУчета В Иерархии(&ВидУчета) И
			| Подразделение = &Подразделение  
			|" + ?(ПеределНоменклатурнаяГруппа = "Все", "", " И  НоменклатурнаяГруппа = &НоменклатурнаяГруппа") + УсловияВстречногоВыпуска2 + "
			|) КАК ВыпускПродукцииУслугПоВидамУчета
			|		ПО ВыпускПродукцииУслуг.СчетЗатрат = ВыпускПродукцииУслугПоВидамУчета.СчетЗатрат И ВыпускПродукцииУслуг.Подразделение = ВыпускПродукцииУслугПоВидамУчета.Подразделение И ВыпускПродукцииУслуг.НоменклатурнаяГруппа = ВыпускПродукцииУслугПоВидамУчета.НоменклатурнаяГруппа 
			|		И ВыпускПродукцииУслуг.Продукция = ВыпускПродукцииУслугПоВидамУчета.Продукция
			|		И ВыпускПродукцииУслуг.СубконтоСписания1 = ВыпускПродукцииУслугПоВидамУчета.СубконтоСписания1
			|		И ВыпускПродукцииУслуг.СубконтоСписания2 = ВыпускПродукцииУслугПоВидамУчета.СубконтоСписания2
			|		И ВыпускПродукцииУслуг.СубконтоСписания3 = ВыпускПродукцииУслугПоВидамУчета.СубконтоСписания3";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&НачГраница,&КонГраница,,, Счет В ИЕРАРХИИ (&СчетаЗатрат), &ВидыСубконто, 
		| Организация = &Организация		
		|И Субконто1 = &Подразделение
		|" + ?(ПеределНоменклатурнаяГруппа = "Все", "", " И  Субконто2 = &НоменклатурнаяГруппа") + "
		|) КАК ТиповойОстатки
		|		ПО ВыпускПродукцииУслуг.СчетЗатрат = ТиповойОстатки.Счет И ВыпускПродукцииУслуг.Подразделение = ТиповойОстатки.Субконто1 И ВыпускПродукцииУслуг.НоменклатурнаяГруппа = ТиповойОстатки.Субконто2
		|  	    И ВыпускПродукцииУслуг.СтруктурноеПодразделение = ТиповойОстатки.СтруктурноеПодразделение		
		|
		| 		
		|ЛЕВОЕ СОЕДИНЕНИЕ (	ВЫБРАТЬ
		|		ВнутреннийЗапросПоДвижениямНЗП.СчетКт,
		|		ВнутреннийЗапросПоДвижениямНЗП.СубконтоКт1,
		|		ВнутреннийЗапросПоДвижениямНЗП.СубконтоКт2,
		|		ВнутреннийЗапросПоДвижениямНЗП.СтруктурноеПодразделениеКт Как СтруктурноеПодразделение,
		|		Сумма(ВнутреннийЗапросПоДвижениямНЗП.Сумма) КАК Сумма
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.ДвиженияССубконто(&НачГраница, &КонГраница,  СчетКт В ИЕРАРХИИ (&СчетаЗатрат)
		|		 И Организация = &Организация И СубконтоКт1 = &Подразделение
		|		" + ?(ПеределНоменклатурнаяГруппа = "Все", "", " И  СубконтоКт2 = &НоменклатурнаяГруппа") + "
		|		И Регистратор ССЫЛКА Документ.ДвижениеНЗП) КАК ВнутреннийЗапросПоДвижениямНЗП 
		|	СГРУППИРОВАТЬ ПО 
		|		ВнутреннийЗапросПоДвижениямНЗП.СчетКт,
		|		ВнутреннийЗапросПоДвижениямНЗП.СубконтоКт1,
		|		ВнутреннийЗапросПоДвижениямНЗП.СубконтоКт2 ,
		|		ВнутреннийЗапросПоДвижениямНЗП.СтруктурноеПодразделениеКт
		|	) КАК ТиповойДвиженияССубконто
		|		ПО ВыпускПродукцииУслуг.СчетЗатрат = ТиповойДвиженияССубконто.СчетКт И ВыпускПродукцииУслуг.Подразделение = ТиповойДвиженияССубконто.СубконтоКт1 И ВыпускПродукцииУслуг.НоменклатурнаяГруппа = ТиповойДвиженияССубконто.СубконтоКт2
		|		И ВыпускПродукцииУслуг.СтруктурноеПодразделение = ТиповойДвиженияССубконто.СтруктурноеПодразделение  ";
		ТекстЗапроса = ТекстЗапроса + " 
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ИнвентаризацияНЗП.СчетЗатратБУ КАК СчетЗатрат,
		|			ИнвентаризацияНЗП.ПодразделениеОрганизации КАК Подразделение,
		|			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|			ИнвентаризацияНЗП.СтруктурноеПодразделение КАК СтруктурноеПодразделение,";
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете  Тогда
			ТекстЗапроса = ТекстЗапроса + "СУММА(ИнвентаризацияНЗПСостав.СуммаБУ) КАК СуммаБУ";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "СУММА(ИнвентаризацияНЗПСостав.СуммаНУ) КАК СуммаНУ";			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|		ИЗ
		|			Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияНЗП КАК ИнвентаризацияНЗП
		|				ПО ИнвентаризацияНЗПСостав.Ссылка = ИнвентаризацияНЗП.Ссылка
		|		
		|		ГДЕ 
		|			ИнвентаризацияНЗП.Дата МЕЖДУ &НачДата И &КонДата И
		|			ИнвентаризацияНЗП.Организация = &Организация И
		|			(НЕ(ИнвентаризацияНЗП.ПометкаУдаления))
		|		СГРУППИРОВАТЬ ПО
		|			ИнвентаризацияНЗП.ПодразделениеОрганизации,
		|			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа,
		|			ИнвентаризацияНЗП.СтруктурноеПодразделение,
		|			ИнвентаризацияНЗП.СчетЗатратБУ) КАК ОстаткиНЗП
		|		ПО ТиповойОстатки.Субконто1 = ОстаткиНЗП.Подразделение И ТиповойОстатки.Субконто2 = ОстаткиНЗП.НоменклатурнаяГруппа И ТиповойОстатки.Счет = ОстаткиНЗП.СчетЗатрат
		|		И ТиповойОстатки.СтруктурноеПодразделение = ОстаткиНЗП.СтруктурноеПодразделение"; 		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете  Тогда
			ТекстЗапроса = ТекстЗапроса + "
			| ГДЕ НЕ НалоговыйОстатки.ВидУчета Есть Null";  
		КонецЕсли; 		
		ТекстЗапроса = ТекстЗапроса + "
		|СГРУППИРОВАТЬ ПО
		|	ВыпускПродукцииУслуг.СчетЗатрат,
		|	ВыпускПродукцииУслуг.Подразделение,
		|	ВыпускПродукцииУслуг.НоменклатурнаяГруппа,
		|	ВыпускПродукцииУслуг.Продукция,
		|	ВыпускПродукцииУслуг.СчетСписания,
		|	ВыпускПродукцииУслуг.СубконтоСписания1,
		|	ВыпускПродукцииУслуг.СубконтоСписания2,
		|	ВыпускПродукцииУслуг.СубконтоСписания3,
		|	ВыпускПродукцииУслуг.СтруктурноеПодразделение,"
		+ ?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, """""", "
		| НалоговыйОстатки.ВидУчета ")  + ",
		|	ОстаткиНЗП.Сумма"+ ?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,"БУ", "НУ")+",
		|	ЕСТЬNULL(ТиповойОстатки.СуммаНачальныйОстаток, 0)
		|
		|УПОРЯДОЧИТЬ ПО ВыпускПродукцииУслуг.Продукция, ВыпускПродукцииУслуг.СчетСписания, ВыпускПродукцииУслуг.СубконтоСписания1, ВыпускПродукцииУслуг.СубконтоСписания2, ВыпускПродукцииУслуг.СубконтоСписания3
		|ИТОГИ СУММА(ПлановаяСтоимость), МАКСИМУМ(ОстатокПрямыхРасходов), МАКСИМУМ(СписаноВНЗП), СУММА(ВсегоПрямыхРасходов), СУММА(СписаноРасходов),Сумма(Количество), МАКСИМУМ(СуммаНЗП) ";
		
		ТекстЗапроса = ТекстЗапроса + "
		|ПО
		|   СтруктурноеПодразделение,
		|	СчетЗатрат,
		|	Подразделение,
		|	НоменклатурнаяГруппа";		
		
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Субконто1 = &Подразделение","ВидУчета В Иерархии(&ВидУчета) И Субконто1 = &Подразделение"); 		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"СубконтоКт1 = &Подразделение","ВидУчета В Иерархии(&ВидУчета) И СубконтоКт1 = &Подразделение"); 		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ИнвентаризацияНЗП.Организация = &Организация","ИнвентаризацияНЗП.ВидУчетаНУ В Иерархии(&ВидУчета) И ИнвентаризацияНЗП.Организация = &Организация "); 				
	КонецЕсли; 
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НачДата",               			мНачДата);
	Запрос.УстановитьПараметр("КонДата",               			мКонДата);
	Запрос.УстановитьПараметр("НачГраница",            			мНачГраница);
	Запрос.УстановитьПараметр("КонГраница",            			мКонГраница);
	Запрос.УстановитьПараметр("Организация",           			СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Подразделение",         			ПеределПодразделение);
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа",  			ПеределНоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("НоменклатурнаяГруппаПересчета",  НоменклатурнаяГруппаПересчета);
	Запрос.УстановитьПараметр("ПодразделениеПересчета",      	ПодразделениеПересчета);
	Запрос.УстановитьПараметр("ПродукцияВстречногоВыпуска",  	ПродукцияВстречногоВыпуска);
		
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СчетаЗатрат = Новый Массив;
		СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ОсновноеПроизводство_);
		СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства);
		СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ВспомогательныеПроизводства);
		Запрос.УстановитьПараметр("СчетаЗатрат",        СчетаЗатрат);
	Иначе
		
		СчетаЗатрат = Новый Массив;
		СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.ОсновноеПроизводство_);
		СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства);
		СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.ВспомогательныеПроизводства);
		Запрос.УстановитьПараметр("СчетаЗатрат",        СчетаЗатрат);
		Запрос.УстановитьПараметр("ВидУчета",  			СтруктураДопПараметров.ВидУчетаНУ);
	    		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Типовой", "Налоговый");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "БухгалтерскийУчет", "НалоговыйУчет");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИнвентаризацияНЗП.СчетЗатратБУ", "ИнвентаризацияНЗП.СчетЗатратНУ");				
	КонецЕсли; 
                                                                                                                            	 	
	РезультатЗапроса = Запрос.Выполнить();
	
 КонецПроцедуры // СформироватьЗапросПоПрямымЗатратам()

// Процедура формирования движений по прямым затратам по переделу
// Производит распределение прямых расходов, учтенных на счетах 8011 и 8030,
// на стоимость продукции (услуг).
// Распределяются только те прямые расходы, для которых установлен текущий номер передела.
//
//	Параметры:
//		НомерПередела - Число - номер передела;
//		ВыполненоРаспределениеОПР - Булево - определяет на данный момент выполнено ли
//			распределение общепроизводственных расходов.
//
Процедура ДвиженияПоПрямымЗатратам(СтруктураШапкиДокумента, ПеределПодразделение = "", ПеределНоменклатурнаяГруппа = "", ВыполненоРаспределениеОПР = Ложь, МассивНоменклатуры, СтруктураДопПараметров)
	
	// Формирование запроса по прямым расходам.
	РезультатЗапроса = Неопределено;
	
	СформироватьЗапросПоПрямымЗатратам(СтруктураШапкиДокумента, ПеределПодразделение, ПеределНоменклатурнаяГруппа, РезультатЗапроса, СтруктураДопПараметров, ВыполненоРаспределениеОПР);
	ЗаписьРасчетаСебестоимости = СтруктураДопПараметров.ЗаписьРасчетаСебестоимости;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		РегОперация = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ;
	Иначе
		РегОперация = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ;
	КонецЕсли;
	
	// Выбираются прямые расходы в разрезе структурных подразделений
	ОбходПоСтруктурнымПодразделениям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ОбходПоСтруктурнымПодразделениям.Следующий() Цикл   
		// Выбираются прямые расходы в разрезе счета учета, подразделения, номенклатурной группы.
		ОбходПоСчетамЗатрат = ОбходПоСтруктурнымПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходПоСчетамЗатрат.Следующий() Цикл
			ОбходПоПодразделениям = ОбходПоСчетамЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходПоПодразделениям.Следующий() Цикл
				ОбходПоНомГруппам = ОбходПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ОбходПоНомГруппам.Следующий() Цикл
					
					// Прямые расходы за минусом НЗП подлежат распределению
					// на стоимость готовой продукции, услуг.
					// Т.к. при оприходовании на склад готовой продукции часть прямых
					// расходов (в размере плановой стоимости этой продукции) была
					// списана, то необходимо к общей сумме прямых расходов прибавить
					// списанную ранее сумму прямых расходов.
					
					СписаноРасходов = ОбходПоНомГруппам.СписаноРасходов;				
					
					ВсегоПрямыхРасходов 		= ОбходПоНомГруппам.ОстатокПрямыхРасходов + ОбходПоНомГруппам.СписаноВНЗП  + ?(ВыполненоРаспределениеОПР, 0, СписаноРасходов);
					
					СуммаНЗП = ОбходПоНомГруппам.СуммаНЗП;
					
					СуммаПрямыхРасходовНаВыпуск = ВсегоПрямыхРасходов - СуммаНЗП;
					
					// В качестве базы распределения прямых расходов на выпущенную продукцию
					// используется плановая себестоимость.
					ВсегоБазаРаспределения = ОбходПоНомГруппам.ПлановаяСтоимость;
					РаспределеноБазыРаспределения = 0;
					СписаноПрямыхРасходов = 0;
					
					ПоследнийПередел = (Лев(СтруктураДопПараметров.РасчетПрямыхЗатратНомер, 1) = "1" Или  СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "");
					
					ВидУчета = ?(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете, СтруктураДопПараметров.ВидУчетаНУ, Справочники.ВидыУчетаНУ.ПустаяСсылка());
					
					Если Не ДвижениеЗатратПоГПСписаннойВПроизводство Тогда
						Если ПоследнийПередел И ВыполненоРаспределениеОПР = Ложь И НЕ СуммаНЗП = 0 Тогда
							
							СтрокаЗаписиРасчетаСебестоимости = ЗаписьРасчетаСебестоимости.Добавить();
							СтрокаЗаписиРасчетаСебестоимости.СчетУчета = ОбходПоСчетамЗатрат.СчетЗатрат;
							СтрокаЗаписиРасчетаСебестоимости.Подразделение 		  = ОбходПоПодразделениям.Подразделение;
							СтрокаЗаписиРасчетаСебестоимости.НоменклатурнаяГруппа = ОбходПоНомГруппам.НоменклатурнаяГруппа;
							СтрокаЗаписиРасчетаСебестоимости.ВидОперации 		  = Перечисления.ВидыОперацийРасчетаСебестоимости.РасходыНаПроизводствоПродукцииИУслуг;
							СтрокаЗаписиРасчетаСебестоимости.ВидУчета 			  = ВидУчета;
							СтрокаЗаписиРасчетаСебестоимости.СуммаНЗП 			  = СуммаНЗП;
							СтрокаЗаписиРасчетаСебестоимости.СтруктурноеПодразделение = ОбходПоСчетамЗатрат.СтруктурноеПодразделение;
							СтрокаЗаписиРасчетаСебестоимости.Сумма    			  = 0;
							СтрокаЗаписиРасчетаСебестоимости.СуммаПлан			  = 0;
							
						КонецЕсли;
					КонецЕсли;
					
					
					// Обход по операциям выпуска продукции (услуг). Обходя все операции выпуска
					// производим распределение по ним прямых расходов.
					ТаблицаКорректируемыхНаправлений = Новый ТаблицаЗначений;
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("Продукция");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("Подразделение");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("НоменклатурнаяГруппа");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СубконтоСписания1");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СубконтоСписания2");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СубконтоСписания3");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СчетСписания");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СчетЗатрат");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаКорректировкиСписания");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СписаноРасходов");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("ПлановаяСтоимость");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("ПлановаяСтоимостьВПроводках");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаНЗП");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("ВидУчета");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СтруктурноеПодразделение");
					
					СуммаНеКорректируемыхНаправлений = 0;
					
					Обход = ОбходПоНомГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока Обход.Следующий() Цикл
						
						ВидУчета = ?(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете, Обход.ВидУчетаНУ, Справочники.ВидыУчетаНУ.ПустаяСсылка());
						
						
						РаспределеноБазыРаспределения = РаспределеноБазыРаспределения + Обход.ПлановаяСтоимость;
						
						Если ВсегоБазаРаспределения = 0 Тогда
							СуммаСписания = 0;
						Иначе
							СуммаСписания = Окр(СуммаПрямыхРасходовНаВыпуск/ВсегоБазаРаспределения*РаспределеноБазыРаспределения, 2) - СписаноПрямыхРасходов;
						КонецЕсли;
						СписаноПрямыхРасходов = СписаноПрямыхРасходов + СуммаСписания;
						
						Если ВыполненоРаспределениеОПР Тогда
							СуммаКорректировкиСписания = СуммаСписания;						
						Иначе
							СуммаКорректировкиСписания = СуммаСписания - Обход.СписаноРасходов;
						КонецЕсли; 
						
						Если Лев(СтруктураДопПараметров.РасчетПрямыхЗатратНомер, 1) = "3" И СтруктураДопПараметров.РасчетПрямыхЗатратНомер <> "3По средней" Тогда
							
							ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа, Продукция, СубконтоКт2, СубконтоКт3", Обход.Подразделение, Обход.НоменклатурнаяГруппа, Обход.СубконтоСписания1, Обход.СубконтоСписания2, Обход.СубконтоСписания3));
							Если ВстречныйВыпуск.Количество() > 0 Тогда
								СуммаНеКорректируемыхНаправлений = СуммаНеКорректируемыхНаправлений + СуммаКорректировкиСписания;								
								Продолжить;								
							Иначе
								ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа, ПодразделениеПересчета",Обход.Подразделение, Обход.НоменклатурнаяГруппа, Обход.СубконтоСписания1));
								Если ВстречныйВыпуск.Количество() > 0 Тогда
									СуммаНеКорректируемыхНаправлений = СуммаНеКорректируемыхНаправлений + СуммаКорректировкиСписания;									
									Продолжить;
								КонецЕсли;
							КонецЕсли;  							
						КонецЕсли;  						
						
						Если СтруктураШапкиДокумента.СписокНекорректируемойПродукции <> Неопределено Тогда
							Если СтруктураШапкиДокумента.СписокНекорректируемойПродукции.НайтиПоЗначению(Обход.Продукция) <> Неопределено ТОгда
								СуммаНеКорректируемыхНаправлений = СуммаНеКорректируемыхНаправлений + СуммаКорректировкиСписания;
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						
					НоваяСтрока = ТаблицаКорректируемыхНаправлений.Добавить();
					НоваяСтрока.Продукция            = Обход.Продукция;
					НоваяСтрока.Подразделение        = Обход.Подразделение;
					НоваяСтрока.НоменклатурнаяГруппа = Обход.НоменклатурнаяГруппа;
					НоваяСтрока.СубконтоСписания1    = Обход.СубконтоСписания1;
					НоваяСтрока.СубконтоСписания2    = Обход.СубконтоСписания2;
					НоваяСтрока.СубконтоСписания3    = Обход.СубконтоСписания3;
					НоваяСтрока.СчетСписания         = Обход.СчетСписания;
					НоваяСтрока.СчетЗатрат           = Обход.СчетЗатрат;
					НоваяСтрока.СуммаКорректировкиСписания = СуммаКорректировкиСписания;
					НоваяСтрока.СписаноРасходов=?(ВыполненоРаспределениеОПР, 0, Обход.СписаноРасходов);
								
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
						ПлановаяСтоимость   = Обход.ПлановаяСтоимостьПоВидуУчета; 									
					
					Иначе						
						ПлановаяСтоимость   = Обход.ПлановаяСтоимость;
					КонецЕсли;
					
					НоваяСтрока.СуммаНЗП            = Обход.СуммаНЗП;
					НоваяСтрока.ВидУчета            = ВидУчета;
					НоваяСтрока.ПлановаяСтоимость       = ПлановаяСтоимость;
					НоваяСтрока.СтруктурноеПодразделение = Обход.СтруктурноеПодразделение;

					
					Если ПоследнийПередел И ВыполненоРаспределениеОПР = Ложь Тогда
									
						//Для вида учета: НУ и ПР необходимо выдать пользователю сообщению, о том 
						//что если были затраты на выпуск продукции, но не было выпуска.
						Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И СтруктураДопПараметров.ВидУчетаНУ <> Справочники.ВидыУчетаНУ.ВР Тогда
							Если Обход.ПлановаяСтоимость = 0 Тогда
								ТекстСообщения = "По налоговому учету, вид учета:  """ + ВидУчета + """ в текущем периоде были зарегистрированы производственные затраты на продукцию - " + Обход.Продукция
								+ Символы.ПС + "Но выпуска данной продукции не было!";
								ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , ,ЭтотОбъект, Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ);
								
							КонецЕсли;
						КонецЕсли;	
					КонецЕсли;					
				КонецЦикла;
				
				ВсегоКорректировок = ТаблицаКорректируемыхНаправлений.Итог("СуммаКорректировкиСписания");
				
				КоэффициентРаспределенияНекорректируемойСуммы = ?(ВсегоКорректировок = 0, 0, СуммаНеКорректируемыхНаправлений / ВсегоКорректировок);
				
				СуммаПроводокПоКорректировке = 0;

				Для Каждого Обход Из ТаблицаКорректируемыхНаправлений Цикл
					СуммаКорректировкиСписания = Обход.СуммаКорректировкиСписания * (1 + КоэффициентРаспределенияНекорректируемойСуммы);	
					СписаноРасходов = Обход.СписаноРасходов * (1 + КоэффициентРаспределенияНекорректируемойСуммы);	
					
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
						СтруктураПоиска = Новый Структура("НоменклатурнаяГруппа, Подразделение, Продукция", 
						ОбходПоНомГруппам.НоменклатурнаяГруппа, ОбходПоПодразделениям.Подразделение, Обход.Продукция);
						Если ЗначениеЗаполнено(Обход.СтруктурноеПодразделение) Тогда
							СтруктураПоиска.Вставить("СтруктурноеПодразделение", Обход.СтруктурноеПодразделение);
						КонецЕсли;
						
						НайденныеСтроки = ЗаписьРасчетаСебестоимости.НайтиСтроки(СтруктураПоиска);
						Если НайденныеСтроки <> Неопределено Тогда							 
							СуммаСтоимостиБУ = 0;
							СуммаСтоимостиНУ = 0;
							Для Каждого Строка из НайденныеСтроки Цикл
								Если Не ЗначениеЗаполнено(Строка.ВидУчета)Тогда 
									СуммаСтоимостиБУ = СуммаСтоимостиБУ + Строка.Сумма;							 
								Иначе
									СуммаСтоимостиНУ = СуммаСтоимостиНУ + Строка.Сумма;							  
								КонецЕсли;
							КонецЦикла;
							
							ПогрешностьОкругления  = СуммаСтоимостиБУ - (СуммаСтоимостиНУ + СуммаКорректировкиСписания);
							// Это погрешность округления
							Если ПогрешностьОкругления >-0.5 И ПогрешностьОкругления < 0.5 Тогда								
								СуммаКорректировкиСписания = СуммаКорректировкиСписания + ПогрешностьОкругления;
							КонецЕсли;							
						КонецЕсли; 						
					КонецЕсли;	

					
					// Формирование проводок по списанию  					
						Если СуммаКорректировкиСписания <> 0 Тогда
							НоваяПроводка = мОперация.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка выпуска продукции (услуг)";
							
							НоваяПроводка.Сумма       = СуммаКорректировкиСписания;
							
							СуммаПроводокПоКорректировке = СуммаПроводокПоКорректировке + НоваяПроводка.Сумма;
							
							НоваяПроводка.СчетДт =  Обход.СчетСписания;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, Обход.СубконтоСписания1);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, Обход.СубконтоСписания2);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, Обход.СубконтоСписания3);
							
							НоваяПроводка.СчетКт = Обход.СчетЗатрат;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        Обход.Подразделение);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							
							Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
								НоваяПроводка.ВидУчетаДт = Обход.ВидУчета;
								НоваяПроводка.ВидУчетаКт = Обход.ВидУчета;							
							КонецЕсли;   				
							НоваяПроводка.ВидРегламентнойОперации = РегОперация;
							
							ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(НоваяПроводка, 
													Обход.СтруктурноеПодразделение, Обход.СтруктурноеПодразделение);
							
						КонецЕсли;
					
					// Добавим в таблицу список номенклатуры, у которой изменилась средневзвешенная
					// стоимость и, следовательно, необходимо выполнить корректировку списаний.
					Для НомерСубконто = 1 По 2 Цикл
						Если ТипЗнч(Обход["СубконтоСписания" + НомерСубконто]) = Тип("СправочникСсылка.Номенклатура") Тогда
							МассивНоменклатуры.Добавить(Обход["СубконтоСписания" + НомерСубконто]);
							Прервать;
						КонецЕсли;
					КонецЦикла;  
					
					Если  Не СуммаКорректировкиСписания = 0 Тогда					
						СтрокаЗаписиРасчетаСебестоимости = ЗаписьРасчетаСебестоимости.Добавить();
						СтрокаЗаписиРасчетаСебестоимости.СчетУчета            = ОбходПоСчетамЗатрат.СчетЗатрат;
						СтрокаЗаписиРасчетаСебестоимости.Подразделение        = ОбходПоПодразделениям.Подразделение;
						СтрокаЗаписиРасчетаСебестоимости.НоменклатурнаяГруппа = ОбходПоНомГруппам.НоменклатурнаяГруппа;
						СтрокаЗаписиРасчетаСебестоимости.Продукция            = Обход.Продукция;
						
						СтрокаЗаписиРасчетаСебестоимости.СуммаПлан   =  Обход.ПлановаяСтоимость;
						СтрокаЗаписиРасчетаСебестоимости.ВидОперации = Перечисления.ВидыОперацийРасчетаСебестоимости.ВыпускПродукцииИУслуг;
						СтрокаЗаписиРасчетаСебестоимости.Сумма       = СуммаКорректировкиСписания;
						СтрокаЗаписиРасчетаСебестоимости.ВидУчета    = ВидУчета;    																	
						СтрокаЗаписиРасчетаСебестоимости.СтруктурноеПодразделение  = Обход.СтруктурноеПодразделение;    																							
					КонецЕсли;						
					
					// по продукции у которой плановая СБ равна фактической СБ
					Если Не ДвижениеЗатратПоГПСписаннойВПроизводство 
						И ПоследнийПередел И ВыполненоРаспределениеОПР = Ложь 
						И Обход.ПлановаяСтоимость = Обход.СписаноРасходов И СуммаКорректировкиСписания = 0 Тогда					
						СтрокаЗаписиРасчетаСебестоимости = ЗаписьРасчетаСебестоимости.Добавить();
						СтрокаЗаписиРасчетаСебестоимости.СчетУчета            = ОбходПоСчетамЗатрат.СчетЗатрат;
						СтрокаЗаписиРасчетаСебестоимости.Подразделение        = ОбходПоПодразделениям.Подразделение;
						СтрокаЗаписиРасчетаСебестоимости.НоменклатурнаяГруппа = ОбходПоНомГруппам.НоменклатурнаяГруппа;
						СтрокаЗаписиРасчетаСебестоимости.Продукция            = Обход.Продукция;
						
						СтрокаЗаписиРасчетаСебестоимости.СуммаПлан   =  Обход.ПлановаяСтоимость;
						СтрокаЗаписиРасчетаСебестоимости.ВидОперации = Перечисления.ВидыОперацийРасчетаСебестоимости.ВыпускПродукцииИУслуг;
						СтрокаЗаписиРасчетаСебестоимости.Сумма       = СуммаКорректировкиСписания;
						СтрокаЗаписиРасчетаСебестоимости.ВидУчета    = ВидУчета;    																	
						СтрокаЗаписиРасчетаСебестоимости.СтруктурноеПодразделение  = Обход.СтруктурноеПодразделение;    																							
					КонецЕсли;

				КонецЦикла; // по направлениям выпуска продукции (услуг)
								
				Если (СуммаНеКорректируемыхНаправлений <> 0) И (СуммаПроводокПоКорректировке <> 0) Тогда 
					// проверим списанную суммму, из за расчетов с коэффициентами могут не сойтись цифры после запятой
					Разница = Окр(ВсегоКорректировок * (1 + КоэффициентРаспределенияНекорректируемойСуммы), 2) - СуммаПроводокПоКорректировке;
					Если Разница <> 0 Тогда
						ПоследняяПроводка = мОперация.Получить(мОперация.Количество()-1);
						ПоследняяПроводка.Сумма = ПоследняяПроводка.Сумма + Разница;
					КонецЕсли;
				КонецЕсли;

			КонецЦикла; // по номенклатурным группам
		КонецЦикла; // по подразделениям
	КонецЦикла; // по счетам учета прямых затрат
КонецЦикла; //по структуркам

	
	мОперация.Записать(Ложь);
	
КонецПроцедуры // ДвиженияПоПрямымЗатратам()

Функция РасчетПорядкаПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	СпособРасчетаСебестоимостиПроизводства = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация, "Бух").СпособРасчетаСебестоимостиПроизводства;
	
	Если СпособРасчетаСебестоимостиПроизводства  = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		
		СтруктураДопПараметров.СпособРасчетаСебестоимостиПроизводства = "ПоПеределам";
		ПорядокПеределов = ПолучитьПорядокПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров);
		
	Иначе
		
		СтруктураДопПараметров.СпособРасчетаСебестоимостиПроизводства = "ПоПодразделениям";
		Если СтруктураДопПараметров.Учет = "БУ" Тогда
			
			ПроверкаПорядкаЗакрытияПодразделений(СтруктураШапкиДокумента, "Типовой");
		Иначе
			ПроверкаПорядкаЗакрытияПодразделений(СтруктураШапкиДокумента, "Налоговый");
		КонецЕсли;

		ПорядокПеределов = ПолучитьПорядокПодразделений(СтруктураШапкиДокумента, СтруктураДопПараметров);
		
		АнализДанныхПроизводства(СтруктураШапкиДокумента, СтруктураДопПараметров);
	КонецЕсли;
	
	
КонецФункции 

Функция АнализДанныхПроизводства(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	// Модель поизводства в виде последовательности цепочек:
	//ГП(готовая продукция),
	//Подразделение,
	//ном.группа,
	//Номенклатура, израсходованная на производство, в этом подразделении и на эту ном.группу, а значит и на эту ГП
	//счет учета затрат производства	
	СчетаЗатрат = Новый Массив; 	
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		РегОперация = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ;
		ПС = ПланыСчетов.Налоговый;
	Иначе
		РегОперация = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ;
		ПС = ПланыСчетов.Типовой;
	КонецЕсли;

	СчетаЗатрат.Добавить(ПС.ОсновноеПроизводство);
	СчетаЗатрат.Добавить(ПС.ПолуфабрикатыСобственногоПроизводства);
 	СчетаЗатрат.Добавить(ПС.ВспомогательныеПроизводства);
			
  	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.Период,
	               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.Организация,
	               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.СчетЗатратБУ КАК СчетЗатрат,
	               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.СтатьяЗатрат,
	               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.СтруктурноеПодразделение,
	               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.Подразделение,
	               |	МетодыРаспределенияКосвенныхРасходов.БазаРаспределения,
	               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СчетЗакрытияБУ,
	               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СубконтоБУ1,
	               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СубконтоБУ2,
	               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СубконтоБУ3,
	               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.МетодРаспределенияЗатрат.Ссылка,
	               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.ПроцентРаспределения,
	               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделениеЗакрытия
	               |ПОМЕСТИТЬ МетодыРаспределения
	               |ИЗ
	               |	РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(&КонДата, Организация = &Организация) КАК МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МетодыРаспределенияКосвенныхРасходов.АналитикаРаспределения КАК МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МетодыРаспределенияКосвенныхРасходов КАК МетодыРаспределенияКосвенныхРасходов
	               |			ПО МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.Ссылка = МетодыРаспределенияКосвенныхРасходов.Ссылка
	               |		ПО МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.МетодРаспределенияЗатрат = МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.Период,
	               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.Организация,
	               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.СчетЗатратБУ,
	               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.СтатьяЗатрат,
	               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.СтруктурноеПодразделение,
	               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.Подразделение,
	               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СчетЗакрытияБУ,
	               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СубконтоБУ1,
	               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СубконтоБУ2,
	               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СубконтоБУ3,
	               |	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.МетодРаспределенияЗатрат.Ссылка,
	               |	МетодыРаспределенияКосвенныхРасходов.БазаРаспределения,
	               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.ПроцентРаспределения,
	               |	МетодыРаспределенияКосвенныхРасходовАналитикаРаспределения.СтруктурноеПодразделение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АнализДанных.Источник,
	               |	АнализДанных.Подразделение,
	               |	АнализДанных.ПодразделениеПредставление,
	               |	АнализДанных.НоменклатурнаяГруппа,
	               |	АнализДанных.НоменклатурнаяГруппаПредставление,
	               |	АнализДанных.ГП,
	               |	АнализДанных.СчетЗатрат,
	               |	АнализДанных.НоменклатураЗатрат,
	               |	АнализДанных.НоменклатураЗатратПредставление,
	               |	ПоКосвеннымЗатратам.СчетЗатрат КАК СчетЗатратДляПроверки,
	               |	ПоКосвеннымЗатратам.ПризнакПроизводсвенногоСчета,
	               |	ПоКосвеннымЗатратам.СубконтоЗакрытия1,
	               |	ПоКосвеннымЗатратам.СубконтоЗакрытия2,
	               |	ПоКосвеннымЗатратам.СубконтоЗакрытия3,
	               |	ЕСТЬNULL(ПоКосвеннымЗатратам.БазаРаспределения, ЛОЖЬ) КАК БазаРаспределения
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТаблицаЗатрат.Источник КАК Источник,
	               |		ТаблицаЗатрат.Подразделение КАК Подразделение,
	               |		ПРЕДСТАВЛЕНИЕ(ТаблицаЗатрат.Подразделение) КАК ПодразделениеПредставление,
	               |		ЕСТЬNULL(ТаблицаГП.НоменклатурнаяГруппа, ТаблицаЗатрат.НоменклатурнаяГруппа) КАК НоменклатурнаяГруппа,
	               |		ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ТаблицаГП.НоменклатурнаяГруппа, ТаблицаЗатрат.НоменклатурнаяГруппа)) КАК НоменклатурнаяГруппаПредставление,
	               |		ЕСТЬNULL(ТаблицаГП.ГП, ""NULL"") КАК ГП,
	               |		ТаблицаЗатрат.СчетЗатрат КАК СчетЗатрат,
	               |		ТаблицаЗатрат.НоменклатураЗатрат КАК НоменклатураЗатрат,
	               |		ПРЕДСТАВЛЕНИЕ(ТаблицаЗатрат.НоменклатураЗатрат) КАК НоменклатураЗатратПредставление
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			1 КАК Источник,
	               |			ТиповойОбороты.СубконтоДт1 КАК Подразделение,
	               |			ТиповойОбороты.СубконтоДт2 КАК НоменклатурнаяГруппа,
	               |			ТиповойОбороты.СчетДт КАК СчетЗатрат,
	               |			ВЫБОР
	               |				КОГДА ТиповойОбороты.СубконтоКт1 ССЫЛКА Справочник.Номенклатура
	               |					ТОГДА ТиповойОбороты.СубконтоКт1
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА ТиповойОбороты.СубконтоКт2 ССЫЛКА Справочник.Номенклатура
	               |							ТОГДА ТиповойОбороты.СубконтоКт2
	               |						ИНАЧЕ ВЫБОР
	               |								КОГДА ТиповойОбороты.СубконтоКт3 ССЫЛКА Справочник.Номенклатура
	               |									ТОГДА ТиповойОбороты.СубконтоКт3
	               |								ИНАЧЕ ТиповойОбороты.СубконтоКт1
	               |							КОНЕЦ
	               |					КОНЕЦ
	               |			КОНЕЦ КАК НоменклатураЗатрат
	               |		ИЗ
	               |			РегистрБухгалтерии.Типовой.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&Счета), , , , Организация = &Организация) КАК ТиповойОбороты
	               |		
	               |		ОБЪЕДИНИТЬ
	               |		
	               |		ВЫБРАТЬ
	               |			1,
	               |			ВложенныйЗапрос.Субконто1,
	               |			ВложенныйЗапрос.Субконто2,
	               |			ВложенныйЗапрос.Счет,
	               |			ВЫБОР
	               |				КОГДА ТиповойОбороты.СубконтоКт1 ССЫЛКА Справочник.Номенклатура
	               |					ТОГДА ТиповойОбороты.СубконтоКт1
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА ТиповойОбороты.СубконтоКт2 ССЫЛКА Справочник.Номенклатура
	               |							ТОГДА ТиповойОбороты.СубконтоКт2
	               |						ИНАЧЕ ВЫБОР
	               |								КОГДА ТиповойОбороты.СубконтоКт3 ССЫЛКА Справочник.Номенклатура
	               |									ТОГДА ТиповойОбороты.СубконтоКт3
	               |								ИНАЧЕ ТиповойОбороты.СубконтоКт1
	               |							КОНЕЦ
	               |					КОНЕЦ
	               |			КОНЕЦ
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				ТиповойОстатки.Субконто1 КАК Субконто1,
	               |				ТиповойОстатки.Субконто2 КАК Субконто2,
	               |				ТиповойОстатки.Счет КАК Счет
	               |			ИЗ
	               |				РегистрБухгалтерии.Типовой.Остатки(&НачГраница, Счет В ИЕРАРХИИ (&Счета), , Организация = &Организация) КАК ТиповойОстатки) КАК ВложенныйЗапрос
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&Счета), , , , Организация = &Организация) КАК ТиповойОбороты
	               |				ПО (ТиповойОбороты.СубконтоДт1 = ВложенныйЗапрос.Субконто1)
	               |					И (ТиповойОбороты.СубконтоДт2 = ВложенныйЗапрос.Субконто2)
	               |					И (ТиповойОбороты.СчетДт = ВложенныйЗапрос.Счет)
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			2,
	               |			ТиповойОборотыДтКт.СубконтоДт1,
	               |			NULL,
	               |			ТиповойОборотыДтКт.СчетДт,
	               |			&ПустаяСтатьяЗатрат
	               |		ИЗ
	               |			РегистрБухгалтерии.Типовой.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&СчетаОбщихЗатрат), , , , Организация = &Организация) КАК ТиповойОборотыДтКт) КАК ТаблицаЗатрат
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				ВыпускПродукцииУслугБухгалтерскийУчетОбороты.Подразделение КАК Подразделение,
	               |				ВыпускПродукцииУслугБухгалтерскийУчетОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |				ВыпускПродукцииУслугБухгалтерскийУчетОбороты.СчетЗатрат КАК СчетЗатрат,
	               |				ВЫБОР
	               |					КОГДА ВыпускПродукцииУслугБухгалтерскийУчетОбороты.Продукция.Услуга
	               |						ТОГДА ВыпускПродукцииУслугБухгалтерскийУчетОбороты.Подразделение
	               |					ИНАЧЕ ВыпускПродукцииУслугБухгалтерскийУчетОбороты.Продукция
	               |				КОНЕЦ КАК ГП
	               |			ИЗ
	               |				РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет.Обороты(
	               |						&НачДата,
	               |						&КонДата,
	               |						,
	               |						СчетЗатрат В ИЕРАРХИИ (&Счета)
	               |							И Организация = &Организация) КАК ВыпускПродукцииУслугБухгалтерскийУчетОбороты
	               |			
	               |			ОБЪЕДИНИТЬ ВСЕ
	               |			
	               |			ВЫБРАТЬ
	               |				ИнвентаризацияНЗП.ПодразделениеОрганизации,
	               |				ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа,
	               |				ИнвентаризацияНЗП.СчетЗатратБУ,
	               |				&ПустаяНоменклатура
	               |			ИЗ
	               |				Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
	               |					ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияНЗП КАК ИнвентаризацияНЗП
	               |					ПО ИнвентаризацияНЗПСостав.Ссылка = ИнвентаризацияНЗП.Ссылка
	               |			ГДЕ
	               |				ИнвентаризацияНЗП.Дата МЕЖДУ &НачДата И &КонДата
	               |				И ИнвентаризацияНЗП.СчетЗатратБУ В ИЕРАРХИИ(&Счета)
	               |				И ИнвентаризацияНЗП.Организация = &Организация
	               |				И НЕ ИнвентаризацияНЗП.ПометкаУдаления) КАК ТаблицаГП
	               |			ПО (ТаблицаГП.Подразделение = ТаблицаЗатрат.Подразделение)
	               |				И (ВЫБОР
	               |					КОГДА ТаблицаЗатрат.Источник = 1
	               |						ТОГДА ВЫБОР
	               |									КОГДА ТаблицаГП.СчетЗатрат = ТаблицаЗатрат.СчетЗатрат
	               |										ТОГДА ИСТИНА
	               |									ИНАЧЕ ЛОЖЬ
	               |								КОНЕЦ
	               |								И ВЫБОР
	               |									КОГДА ТаблицаЗатрат.НоменклатурнаяГруппа ССЫЛКА Справочник.НоменклатурныеГруппы
	               |										ТОГДА ВЫБОР
	               |												КОГДА ТаблицаЗатрат.НоменклатурнаяГруппа = ТаблицаГП.НоменклатурнаяГруппа
	               |													ТОГДА ИСТИНА
	               |												ИНАЧЕ ЛОЖЬ
	               |											КОНЕЦ
	               |									ИНАЧЕ ИСТИНА
	               |								КОНЕЦ
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ = ИСТИНА)) КАК АнализДанных
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ТаблицаСпособовРаспределения.СчетЗатрат КАК СчетЗатрат,
	               |			ТаблицаСпособовРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |			ТаблицаСпособовРаспределения.Подразделение КАК Подразделение,
	               |			ТаблицаСпособовРаспределения.СтатьяЗатрат КАК СтатьяЗатрат,
	               |			ТаблицаСпособовРаспределения.СуммаОборот КАК Сумма,
	               |			ВЫБОР
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения
	               |				ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломБазаРаспределения
	               |			КОНЕЦ КАК Метод,
	               |			ВЫБОР
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияСчетЗакрытия
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратСчетЗакрытия
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияСчетЗакрытия
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюСчетЗакрытия
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСчетЗакрытия
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСчетЗакрытия
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСчетЗакрытия
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломСчетЗакрытия
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломСчетЗакрытия
	               |				ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломСчетЗакрытия
	               |			КОНЕЦ КАК СчетЗакрытия,
	               |			ВЫБОР
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ВЫБОР
	               |							КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияСтруктурноеПодразделениеЗакрытия ССЫЛКА Справочник.Организации
	               |								ТОГДА ТаблицаСпособовРаспределения.СтруктурноеПодразделение
	               |							ИНАЧЕ ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияСтруктурноеПодразделениеЗакрытия
	               |						КОНЕЦ
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ВЫБОР
	               |							КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратСтруктурноеПодразделениеЗакрытия ССЫЛКА Справочник.Организации
	               |								ТОГДА ТаблицаСпособовРаспределения.СтруктурноеПодразделение
	               |							ИНАЧЕ ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратСтруктурноеПодразделениеЗакрытия
	               |						КОНЕЦ
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ВЫБОР
	               |							КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияСтруктурноеПодразделениеЗакрытия ССЫЛКА Справочник.Организации
	               |								ТОГДА ТаблицаСпособовРаспределения.СтруктурноеПодразделение
	               |							ИНАЧЕ ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияСтруктурноеПодразделениеЗакрытия
	               |						КОНЕЦ
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ВЫБОР
	               |							КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюСтруктурноеПодразделениеЗакрытия ССЫЛКА Справочник.Организации
	               |								ТОГДА ТаблицаСпособовРаспределения.СтруктурноеПодразделение
	               |							ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюСтруктурноеПодразделениеЗакрытия
	               |						КОНЕЦ
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ВЫБОР
	               |							КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСтруктурноеПодразделениеЗакрытия ССЫЛКА Справочник.Организации
	               |								ТОГДА ТаблицаСпособовРаспределения.СтруктурноеПодразделение
	               |							ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСтруктурноеПодразделениеЗакрытия
	               |						КОНЕЦ
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ВЫБОР
	               |							КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСтруктурноеПодразделениеЗакрытия ССЫЛКА Справочник.Организации
	               |								ТОГДА ТаблицаСпособовРаспределения.СтруктурноеПодразделение
	               |							ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСтруктурноеПодразделениеЗакрытия
	               |						КОНЕЦ
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ВЫБОР
	               |							КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСтруктурноеПодразделениеЗакрытия ССЫЛКА Справочник.Организации
	               |								ТОГДА ТаблицаСпособовРаспределения.СтруктурноеПодразделение
	               |							ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСтруктурноеПодразделениеЗакрытия
	               |						КОНЕЦ
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ВЫБОР
	               |							КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломСтруктурноеПодразделениеЗакрытия ССЫЛКА Справочник.Организации
	               |								ТОГДА ТаблицаСпособовРаспределения.СтруктурноеПодразделение
	               |							ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломСтруктурноеПодразделениеЗакрытия
	               |						КОНЕЦ
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ВЫБОР
	               |							КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломСтруктурноеПодразделениеЗакрытия ССЫЛКА Справочник.Организации
	               |								ТОГДА ТаблицаСпособовРаспределения.СтруктурноеПодразделение
	               |							ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломСтруктурноеПодразделениеЗакрытия
	               |						КОНЕЦ
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломСтруктурноеПодразделениеЗакрытия ССЫЛКА Справочник.Организации
	               |							ТОГДА ТаблицаСпособовРаспределения.СтруктурноеПодразделение
	               |						ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломСтруктурноеПодразделениеЗакрытия
	               |					КОНЕЦ
	               |			КОНЕЦ КАК СтруктурноеПодразделениеЗакрытия,
	               |			ВЫБОР
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияСубконто1
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратСубконто1
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияСубконто1
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюСубконто1
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСубконто1
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСубконто1
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСубконто1
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломСубконто1
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломСубконто1
	               |				ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломСубконто1
	               |			КОНЕЦ КАК СубконтоЗакрытия1,
	               |			ВЫБОР
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияСубконто2
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратСубконто2
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияСубконто2
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюСубконто2
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСубконто2
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСубконто2
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСубконто2
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломСубконто2
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломСубконто2
	               |				ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломСубконто2
	               |			КОНЕЦ КАК СубконтоЗакрытия2,
	               |			ВЫБОР
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияСубконто3
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратСубконто3
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияСубконто3
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюСубконто3
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСубконто3
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСубконто3
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСубконто3
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломСубконто3
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломСубконто3
	               |				ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломСубконто3
	               |			КОНЕЦ КАК СубконтоЗакрытия3,
	               |			ВЫБОР
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ВЫБОР
	               |							КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияСчетЗакрытия В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_))
	               |								ТОГДА ИСТИНА
	               |							ИНАЧЕ ЛОЖЬ
	               |						КОНЕЦ
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ВЫБОР
	               |							КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратСчетЗакрытия В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_))
	               |								ТОГДА ИСТИНА
	               |							ИНАЧЕ ЛОЖЬ
	               |						КОНЕЦ
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ВЫБОР
	               |							КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияСчетЗакрытия В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_))
	               |								ТОГДА ИСТИНА
	               |							ИНАЧЕ ЛОЖЬ
	               |						КОНЕЦ
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ВЫБОР
	               |							КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюСчетЗакрытия В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_))
	               |								ТОГДА ИСТИНА
	               |							ИНАЧЕ ЛОЖЬ
	               |						КОНЕЦ
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ВЫБОР
	               |							КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСчетЗакрытия В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_))
	               |								ТОГДА ИСТИНА
	               |							ИНАЧЕ ЛОЖЬ
	               |						КОНЕЦ
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ВЫБОР
	               |							КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСчетЗакрытия В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_))
	               |								ТОГДА ИСТИНА
	               |							ИНАЧЕ ЛОЖЬ
	               |						КОНЕЦ
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ВЫБОР
	               |							КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСчетЗакрытия В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_))
	               |								ТОГДА ИСТИНА
	               |							ИНАЧЕ ЛОЖЬ
	               |						КОНЕЦ
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ВЫБОР
	               |							КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломСчетЗакрытия В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_))
	               |								ТОГДА ИСТИНА
	               |							ИНАЧЕ ЛОЖЬ
	               |						КОНЕЦ
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ВЫБОР
	               |							КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломСчетЗакрытия В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_))
	               |								ТОГДА ИСТИНА
	               |							ИНАЧЕ ЛОЖЬ
	               |						КОНЕЦ
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломСчетЗакрытия В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_))
	               |							ТОГДА ИСТИНА
	               |						ИНАЧЕ ЛОЖЬ
	               |					КОНЕЦ
	               |			КОНЕЦ КАК ПризнакПроизводсвенногоСчета,
	               |			ВЫБОР
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияПроцентРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратПроцентРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияПроцентРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюПроцентРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратПроцентРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюПроцентРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломПроцентРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломПроцентРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломПроцентРаспределения
	               |				ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломПроцентРаспределения
	               |			КОНЕЦ КАК ПроцентРаспределения,
	               |			ВЫБОР
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияБазаРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения
	               |				КОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения ЕСТЬ НЕ NULL 
	               |					ТОГДА ТаблицаСпособовРаспределения.СпособыРаспределенияПоСчетуВЦеломБазаРаспределения
	               |				ИНАЧЕ ТаблицаСпособовРаспределения.СпособыРаспределенияПоОрганизацииВЦеломБазаРаспределения
	               |			КОНЕЦ КАК БазаРаспределения
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				ВсеСпособыРаспределения.БазаРаспределения КАК ВсеСпособыРаспределенияБазаРаспределения,
	               |				ВсеСпособыРаспределения.СчетЗакрытияБУ КАК ВсеСпособыРаспределенияСчетЗакрытия,
	               |				ВсеСпособыРаспределения.СубконтоБУ1 КАК ВсеСпособыРаспределенияСубконто1,
	               |				ВсеСпособыРаспределения.СубконтоБУ2 КАК ВсеСпособыРаспределенияСубконто2,
	               |				ВсеСпособыРаспределения.СубконтоБУ3 КАК ВсеСпособыРаспределенияСубконто3,
	               |				ВсеСпособыРаспределения.МетодРаспределенияЗатратСсылка КАК ВсеСпособыРаспределенияМетодРаспределенияЗатратСсылка,
	               |				ВсеСпособыРаспределения.ПроцентРаспределения КАК ВсеСпособыРаспределенияПроцентРаспределения,
	               |				ВсеСпособыРаспределения.СтруктурноеПодразделениеЗакрытия КАК ВсеСпособыРаспределенияСтруктурноеПодразделениеЗакрытия,
	               |				ВсеСпособыРаспределенияКромеСтатьиЗатрат.БазаРаспределения КАК ВсеСпособыРаспределенияКромеСтатьиЗатратБазаРаспределения,
	               |				ВсеСпособыРаспределенияКромеСтатьиЗатрат.СчетЗакрытия КАК ВсеСпособыРаспределенияКромеСтатьиЗатратСчетЗакрытия,
	               |				ВсеСпособыРаспределенияКромеСтатьиЗатрат.Субконто1 КАК ВсеСпособыРаспределенияКромеСтатьиЗатратСубконто1,
	               |				ВсеСпособыРаспределенияКромеСтатьиЗатрат.Субконто2 КАК ВсеСпособыРаспределенияКромеСтатьиЗатратСубконто2,
	               |				ВсеСпособыРаспределенияКромеСтатьиЗатрат.Субконто3 КАК ВсеСпособыРаспределенияКромеСтатьиЗатратСубконто3,
	               |				ВсеСпособыРаспределенияКромеСтатьиЗатрат.МетодРаспределенияЗатратСсылка КАК ВсеСпособыРаспределенияКромеСтатьиЗатратМетодРаспределенияЗатратСсылка,
	               |				ВсеСпособыРаспределенияКромеСтатьиЗатрат.ПроцентРаспределения КАК ВсеСпособыРаспределенияКромеСтатьиЗатратПроцентРаспределения,
	               |				ВсеСпособыРаспределенияКромеСтатьиЗатрат.СтруктурноеПодразделениеЗакрытия КАК ВсеСпособыРаспределенияКромеСтатьиЗатратСтруктурноеПодразделениеЗакрытия,
	               |				ВсеСпособыРаспределенияКромеПодразделения.БазаРаспределения КАК ВсеСпособыРаспределенияКромеПодразделенияБазаРаспределения,
	               |				ВсеСпособыРаспределенияКромеПодразделения.СчетЗакрытия КАК ВсеСпособыРаспределенияКромеПодразделенияСчетЗакрытия,
	               |				ВсеСпособыРаспределенияКромеПодразделения.Субконто1 КАК ВсеСпособыРаспределенияКромеПодразделенияСубконто1,
	               |				ВсеСпособыРаспределенияКромеПодразделения.Субконто2 КАК ВсеСпособыРаспределенияКромеПодразделенияСубконто2,
	               |				ВсеСпособыРаспределенияКромеПодразделения.Субконто3 КАК ВсеСпособыРаспределенияКромеПодразделенияСубконто3,
	               |				ВсеСпособыРаспределенияКромеПодразделения.МетодРаспределенияЗатратСсылка КАК ВсеСпособыРаспределенияКромеПодразделенияМетодРаспределенияЗатратСсылка,
	               |				ВсеСпособыРаспределенияКромеПодразделения.ПроцентРаспределения КАК ВсеСпособыРаспределенияКромеПодразделенияПроцентРаспределения,
	               |				ВсеСпособыРаспределенияКромеПодразделения.СтруктурноеПодразделениеЗакрытия КАК ВсеСпособыРаспределенияКромеПодразделенияСтруктурноеПодразделениеЗакрытия,
	               |				СпособыРаспределенияПоСчетуЗатратИПодразделению.БазаРаспределения КАК СпособыРаспределенияПоСчетуЗатратИПодразделениюБазаРаспределения,
	               |				СпособыРаспределенияПоСчетуЗатратИПодразделению.СчетЗакрытия КАК СпособыРаспределенияПоСчетуЗатратИПодразделениюСчетЗакрытия,
	               |				СпособыРаспределенияПоСчетуЗатратИПодразделению.Субконто1 КАК СпособыРаспределенияПоСчетуЗатратИПодразделениюСубконто1,
	               |				СпособыРаспределенияПоСчетуЗатратИПодразделению.Субконто2 КАК СпособыРаспределенияПоСчетуЗатратИПодразделениюСубконто2,
	               |				СпособыРаспределенияПоСчетуЗатратИПодразделению.Субконто3 КАК СпособыРаспределенияПоСчетуЗатратИПодразделениюСубконто3,
	               |				СпособыРаспределенияПоСчетуЗатратИПодразделению.МетодРаспределенияЗатратСсылка КАК СпособыРаспределенияПоСчетуЗатратИПодразделениюМетодРаспределенияЗатратСсылка,
	               |				СпособыРаспределенияПоСчетуЗатратИПодразделению.ПроцентРаспределения КАК СпособыРаспределенияПоСчетуЗатратИПодразделениюПроцентРаспределения,
	               |				СпособыРаспределенияПоСчетуЗатратИПодразделению.СтруктурноеПодразделениеЗакрытия КАК СпособыРаспределенияПоСчетуЗатратИПодразделениюСтруктурноеПодразделениеЗакрытия,
	               |				СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.БазаРаспределения КАК СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратБазаРаспределения,
	               |				СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.СчетЗакрытия КАК СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСчетЗакрытия,
	               |				СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.Субконто1 КАК СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСубконто1,
	               |				СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.Субконто2 КАК СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСубконто2,
	               |				СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.Субконто3 КАК СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСубконто3,
	               |				СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.МетодРаспределенияЗатратСсылка КАК СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратМетодРаспределенияЗатратСсылка,
	               |				СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.ПроцентРаспределения КАК СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратПроцентРаспределения,
	               |				СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.СтруктурноеПодразделениеЗакрытия КАК СпособыРаспределенияПоСчетуЗатратИСтатьеЗатратСтруктурноеПодразделениеЗакрытия,
	               |				СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.БазаРаспределения КАК СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюБазаРаспределения,
	               |				СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.СчетЗакрытия КАК СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСчетЗакрытия,
	               |				СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.Субконто1 КАК СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСубконто1,
	               |				СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.Субконто2 КАК СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСубконто2,
	               |				СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.Субконто3 КАК СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСубконто3,
	               |				СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.МетодРаспределенияЗатратСсылка КАК СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюМетодРаспределенияЗатратСсылка,
	               |				СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.ПроцентРаспределения КАК СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюПроцентРаспределения,
	               |				СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.СтруктурноеПодразделениеЗакрытия КАК СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделениюСтруктурноеПодразделениеЗакрытия,
	               |				СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.БазаРаспределения КАК СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломБазаРаспределения,
	               |				СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.СчетЗакрытия КАК СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСчетЗакрытия,
	               |				СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.Субконто1 КАК СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСубконто1,
	               |				СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.Субконто2 КАК СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСубконто2,
	               |				СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.Субконто3 КАК СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСубконто3,
	               |				СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.МетодРаспределенияЗатратСсылка КАК СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломМетодРаспределенияЗатратСсылка,
	               |				СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.ПроцентРаспределения КАК СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломПроцентРаспределения,
	               |				СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.СтруктурноеПодразделениеЗакрытия КАК СпособыРаспределенияПоСтруктурномуПодразделениюВЦеломСтруктурноеПодразделениеЗакрытия,
	               |				СпособыРаспределенияПоСтатьеЗатратВЦелом.БазаРаспределения КАК СпособыРаспределенияПоСтатьеЗатратВЦеломБазаРаспределения,
	               |				СпособыРаспределенияПоСтатьеЗатратВЦелом.СчетЗакрытия КАК СпособыРаспределенияПоСтатьеЗатратВЦеломСчетЗакрытия,
	               |				СпособыРаспределенияПоСтатьеЗатратВЦелом.Субконто1 КАК СпособыРаспределенияПоСтатьеЗатратВЦеломСубконто1,
	               |				СпособыРаспределенияПоСтатьеЗатратВЦелом.Субконто2 КАК СпособыРаспределенияПоСтатьеЗатратВЦеломСубконто2,
	               |				СпособыРаспределенияПоСтатьеЗатратВЦелом.Субконто3 КАК СпособыРаспределенияПоСтатьеЗатратВЦеломСубконто3,
	               |				СпособыРаспределенияПоСтатьеЗатратВЦелом.МетодРаспределенияЗатратСсылка КАК СпособыРаспределенияПоСтатьеЗатратВЦеломМетодРаспределенияЗатратСсылка,
	               |				СпособыРаспределенияПоСтатьеЗатратВЦелом.ПроцентРаспределения КАК СпособыРаспределенияПоСтатьеЗатратВЦеломПроцентРаспределения,
	               |				СпособыРаспределенияПоСтатьеЗатратВЦелом.СтруктурноеПодразделениеЗакрытия КАК СпособыРаспределенияПоСтатьеЗатратВЦеломСтруктурноеПодразделениеЗакрытия,
	               |				СпособыРаспределенияПоСчетуВЦелом.БазаРаспределения КАК СпособыРаспределенияПоСчетуВЦеломБазаРаспределения,
	               |				СпособыРаспределенияПоСчетуВЦелом.СчетЗакрытия КАК СпособыРаспределенияПоСчетуВЦеломСчетЗакрытия,
	               |				СпособыРаспределенияПоСчетуВЦелом.Субконто1 КАК СпособыРаспределенияПоСчетуВЦеломСубконто1,
	               |				СпособыРаспределенияПоСчетуВЦелом.Субконто2 КАК СпособыРаспределенияПоСчетуВЦеломСубконто2,
	               |				СпособыРаспределенияПоСчетуВЦелом.Субконто3 КАК СпособыРаспределенияПоСчетуВЦеломСубконто3,
	               |				СпособыРаспределенияПоСчетуВЦелом.МетодРаспределенияЗатратСсылка КАК СпособыРаспределенияПоСчетуВЦеломМетодРаспределенияЗатратСсылка,
	               |				СпособыРаспределенияПоСчетуВЦелом.ПроцентРаспределения КАК СпособыРаспределенияПоСчетуВЦеломПроцентРаспределения,
	               |				СпособыРаспределенияПоСчетуВЦелом.СтруктурноеПодразделениеЗакрытия КАК СпособыРаспределенияПоСчетуВЦеломСтруктурноеПодразделениеЗакрытия,
	               |				СпособыРаспределенияПоОрганизацииВЦелом.БазаРаспределения КАК СпособыРаспределенияПоОрганизацииВЦеломБазаРаспределения,
	               |				СпособыРаспределенияПоОрганизацииВЦелом.СчетЗакрытия КАК СпособыРаспределенияПоОрганизацииВЦеломСчетЗакрытия,
	               |				СпособыРаспределенияПоОрганизацииВЦелом.Субконто1 КАК СпособыРаспределенияПоОрганизацииВЦеломСубконто1,
	               |				СпособыРаспределенияПоОрганизацииВЦелом.Субконто2 КАК СпособыРаспределенияПоОрганизацииВЦеломСубконто2,
	               |				СпособыРаспределенияПоОрганизацииВЦелом.Субконто3 КАК СпособыРаспределенияПоОрганизацииВЦеломСубконто3,
	               |				СпособыРаспределенияПоОрганизацииВЦелом.МетодРаспределенияЗатратСсылка КАК СпособыРаспределенияПоОрганизацииВЦеломМетодРаспределенияЗатратСсылка,
	               |				СпособыРаспределенияПоОрганизацииВЦелом.ПроцентРаспределения КАК СпособыРаспределенияПоОрганизацииВЦеломПроцентРаспределения,
	               |				СпособыРаспределенияПоОрганизацииВЦелом.СтруктурноеПодразделениеЗакрытия КАК СпособыРаспределенияПоОрганизацииВЦеломСтруктурноеПодразделениеЗакрытия,
	               |				ТиповойОбороты.СчетЗатрат КАК СчетЗатрат,
	               |				ТиповойОбороты.Подразделение КАК Подразделение,
	               |				ТиповойОбороты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |				ТиповойОбороты.СтатьяЗатрат КАК СтатьяЗатрат,
	               |				ТиповойОбороты.СуммаОборот КАК СуммаОборот,
	               |				ТиповойОбороты.Организация КАК Организация
	               |			ИЗ
	               |				(ВЫБРАТЬ
	               |					ТиповойОбороты.Счет КАК СчетЗатрат,
	               |					ТиповойОбороты.Субконто1 КАК Подразделение,
	               |					ТиповойОбороты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |					ТиповойОбороты.Субконто2 КАК СтатьяЗатрат,
	               |					СУММА(ТиповойОбороты.СуммаОборот) КАК СуммаОборот,
	               |					ТиповойОбороты.Организация КАК Организация
	               |				ИЗ
	               |					РегистрБухгалтерии.Типовой.Обороты(&НачДата, &КонДата, Месяц, Счет В ИЕРАРХИИ (&СчетЗатрат), &ВидыСубконто, Организация = &Организация, , ) КАК ТиповойОбороты
	               |				
	               |				СГРУППИРОВАТЬ ПО
	               |					ТиповойОбороты.Субконто1,
	               |					ТиповойОбороты.Организация,
	               |					ТиповойОбороты.СтруктурноеПодразделение,
	               |					ТиповойОбороты.Счет,
	               |					ТиповойОбороты.Субконто2) КАК ТиповойОбороты
	               |					ЛЕВОЕ СОЕДИНЕНИЕ МетодыРаспределения КАК ВсеСпособыРаспределения
	               |					ПО ТиповойОбороты.Организация = ВсеСпособыРаспределения.Организация
	               |						И ТиповойОбороты.Подразделение = ВсеСпособыРаспределения.Подразделение
	               |						И ТиповойОбороты.СчетЗатрат = ВсеСпособыРаспределения.СчетЗатрат
	               |						И ТиповойОбороты.СтатьяЗатрат = ВсеСпособыРаспределения.СтатьяЗатрат
	               |						И (ВЫБОР
	               |							КОГДА ВсеСпособыРаспределения.СтруктурноеПодразделение ССЫЛКА Справочник.Организации
	               |								ТОГДА ТиповойОбороты.СтруктурноеПодразделение.Владелец = &Организация
	               |							ИНАЧЕ ТиповойОбороты.СтруктурноеПодразделение = ВсеСпособыРаспределения.СтруктурноеПодразделение
	               |						КОНЕЦ)
	               |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |						СпособыРаспределения.БазаРаспределения КАК БазаРаспределения,
	               |						СпособыРаспределения.СчетЗакрытияБУ КАК СчетЗакрытия,
	               |						СпособыРаспределения.СубконтоБУ1 КАК Субконто1,
	               |						СпособыРаспределения.СубконтоБУ2 КАК Субконто2,
	               |						СпособыРаспределения.СубконтоБУ3 КАК Субконто3,
	               |						СпособыРаспределения.Организация КАК Организация,
	               |						СпособыРаспределения.МетодРаспределенияЗатратСсылка КАК МетодРаспределенияЗатратСсылка,
	               |						СпособыРаспределения.ПроцентРаспределения КАК ПроцентРаспределения,
	               |						СпособыРаспределения.СтруктурноеПодразделениеЗакрытия КАК СтруктурноеПодразделениеЗакрытия,
	               |						СпособыРаспределения.СчетЗатрат КАК СчетЗатрат,
	               |						СпособыРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |						СпособыРаспределения.Подразделение КАК Подразделение,
	               |						СпособыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат
	               |					ИЗ
	               |						МетодыРаспределения КАК СпособыРаспределения
	               |					ГДЕ
	               |						СпособыРаспределения.СтатьяЗатрат = &ПустаяСтатьяЗатрат) КАК ВсеСпособыРаспределенияКромеСтатьиЗатрат
	               |					ПО ТиповойОбороты.Организация = ВсеСпособыРаспределенияКромеСтатьиЗатрат.Организация
	               |						И ТиповойОбороты.СчетЗатрат = ВсеСпособыРаспределенияКромеСтатьиЗатрат.СчетЗатрат
	               |						И ТиповойОбороты.Подразделение = ВсеСпособыРаспределенияКромеСтатьиЗатрат.Подразделение
	               |						И (ВЫБОР
	               |							КОГДА ВсеСпособыРаспределенияКромеСтатьиЗатрат.СтруктурноеПодразделениеЗакрытия ССЫЛКА Справочник.Организации
	               |								ТОГДА ТиповойОбороты.СтруктурноеПодразделение.Владелец = &Организация
	               |							ИНАЧЕ ТиповойОбороты.СтруктурноеПодразделение = ВсеСпособыРаспределенияКромеСтатьиЗатрат.СтруктурноеПодразделениеЗакрытия
	               |						КОНЕЦ)
	               |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |						СпособыРаспределения.БазаРаспределения КАК БазаРаспределения,
	               |						СпособыРаспределения.СчетЗакрытияБУ КАК СчетЗакрытия,
	               |						СпособыРаспределения.СубконтоБУ1 КАК Субконто1,
	               |						СпособыРаспределения.СубконтоБУ2 КАК Субконто2,
	               |						СпособыРаспределения.СубконтоБУ3 КАК Субконто3,
	               |						СпособыРаспределения.Организация КАК Организация,
	               |						СпособыРаспределения.МетодРаспределенияЗатратСсылка КАК МетодРаспределенияЗатратСсылка,
	               |						СпособыРаспределения.ПроцентРаспределения КАК ПроцентРаспределения,
	               |						СпособыРаспределения.СтруктурноеПодразделениеЗакрытия КАК СтруктурноеПодразделениеЗакрытия,
	               |						СпособыРаспределения.СчетЗатрат КАК СчетЗатрат,
	               |						СпособыРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |						СпособыРаспределения.Подразделение КАК Подразделение,
	               |						СпособыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат
	               |					ИЗ
	               |						МетодыРаспределения КАК СпособыРаспределения
	               |					ГДЕ
	               |						СпособыРаспределения.Подразделение = &ПустоеПодразделение) КАК ВсеСпособыРаспределенияКромеПодразделения
	               |					ПО ТиповойОбороты.Организация = ВсеСпособыРаспределенияКромеПодразделения.Организация
	               |						И ТиповойОбороты.СчетЗатрат = ВсеСпособыРаспределенияКромеПодразделения.СчетЗатрат
	               |						И ТиповойОбороты.СтатьяЗатрат = ВсеСпособыРаспределенияКромеПодразделения.СтатьяЗатрат
	               |						И (ВЫБОР
	               |							КОГДА ВсеСпособыРаспределенияКромеПодразделения.СтруктурноеПодразделение ССЫЛКА Справочник.Организации
	               |								ТОГДА ТиповойОбороты.СтруктурноеПодразделение.Владелец = &Организация
	               |							ИНАЧЕ ТиповойОбороты.СтруктурноеПодразделение = ВсеСпособыРаспределенияКромеПодразделения.СтруктурноеПодразделение
	               |						КОНЕЦ)
	               |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |						СпособыРаспределения.БазаРаспределения КАК БазаРаспределения,
	               |						СпособыРаспределения.СчетЗакрытияБУ КАК СчетЗакрытия,
	               |						СпособыРаспределения.СубконтоБУ1 КАК Субконто1,
	               |						СпособыРаспределения.СубконтоБУ2 КАК Субконто2,
	               |						СпособыРаспределения.СубконтоБУ3 КАК Субконто3,
	               |						СпособыРаспределения.Организация КАК Организация,
	               |						СпособыРаспределения.МетодРаспределенияЗатратСсылка КАК МетодРаспределенияЗатратСсылка,
	               |						СпособыРаспределения.ПроцентРаспределения КАК ПроцентРаспределения,
	               |						СпособыРаспределения.СтруктурноеПодразделениеЗакрытия КАК СтруктурноеПодразделениеЗакрытия,
	               |						СпособыРаспределения.СчетЗатрат КАК СчетЗатрат,
	               |						СпособыРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |						СпособыРаспределения.Подразделение КАК Подразделение,
	               |						СпособыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат
	               |					ИЗ
	               |						МетодыРаспределения КАК СпособыРаспределения
	               |					ГДЕ
	               |						СпособыРаспределения.СтатьяЗатрат = &ПустаяСтатьяЗатрат
	               |						И ВЫБОР
	               |								КОГДА СпособыРаспределения.СтруктурноеПодразделение ССЫЛКА Справочник.Организации
	               |									ТОГДА СпособыРаспределения.СтруктурноеПодразделение = &Организация
	               |								ИНАЧЕ СпособыРаспределения.СтруктурноеПодразделение = &ПустоеСтруктурноеПодразделение
	               |							КОНЕЦ) КАК СпособыРаспределенияПоСчетуЗатратИПодразделению
	               |					ПО ТиповойОбороты.Организация = СпособыРаспределенияПоСчетуЗатратИПодразделению.Организация
	               |						И ТиповойОбороты.СчетЗатрат = СпособыРаспределенияПоСчетуЗатратИПодразделению.СчетЗатрат
	               |						И ТиповойОбороты.Подразделение = СпособыРаспределенияПоСчетуЗатратИПодразделению.Подразделение
	               |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |						СпособыРаспределения.БазаРаспределения КАК БазаРаспределения,
	               |						СпособыРаспределения.СчетЗакрытияБУ КАК СчетЗакрытия,
	               |						СпособыРаспределения.СубконтоБУ1 КАК Субконто1,
	               |						СпособыРаспределения.СубконтоБУ2 КАК Субконто2,
	               |						СпособыРаспределения.СубконтоБУ3 КАК Субконто3,
	               |						СпособыРаспределения.Организация КАК Организация,
	               |						СпособыРаспределения.МетодРаспределенияЗатратСсылка КАК МетодРаспределенияЗатратСсылка,
	               |						СпособыРаспределения.ПроцентРаспределения КАК ПроцентРаспределения,
	               |						СпособыРаспределения.СтруктурноеПодразделениеЗакрытия КАК СтруктурноеПодразделениеЗакрытия,
	               |						СпособыРаспределения.СчетЗатрат КАК СчетЗатрат,
	               |						СпособыРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |						СпособыРаспределения.Подразделение КАК Подразделение,
	               |						СпособыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат
	               |					ИЗ
	               |						МетодыРаспределения КАК СпособыРаспределения
	               |					ГДЕ
	               |						СпособыРаспределения.Подразделение = &ПустоеПодразделение
	               |						И ВЫБОР
	               |								КОГДА СпособыРаспределения.СтруктурноеПодразделение ССЫЛКА Справочник.Организации
	               |									ТОГДА СпособыРаспределения.СтруктурноеПодразделение = &Организация
	               |								ИНАЧЕ СпособыРаспределения.СтруктурноеПодразделение = &ПустоеСтруктурноеПодразделение
	               |							КОНЕЦ) КАК СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат
	               |					ПО ТиповойОбороты.Организация = СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.Организация
	               |						И ТиповойОбороты.СчетЗатрат = СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.СчетЗатрат
	               |						И ТиповойОбороты.СтатьяЗатрат = СпособыРаспределенияПоСчетуЗатратИСтатьеЗатрат.СтатьяЗатрат
	               |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |						СпособыРаспределения.БазаРаспределения КАК БазаРаспределения,
	               |						СпособыРаспределения.СчетЗакрытияБУ КАК СчетЗакрытия,
	               |						СпособыРаспределения.СубконтоБУ1 КАК Субконто1,
	               |						СпособыРаспределения.СубконтоБУ2 КАК Субконто2,
	               |						СпособыРаспределения.СубконтоБУ3 КАК Субконто3,
	               |						СпособыРаспределения.Организация КАК Организация,
	               |						СпособыРаспределения.МетодРаспределенияЗатратСсылка КАК МетодРаспределенияЗатратСсылка,
	               |						СпособыРаспределения.ПроцентРаспределения КАК ПроцентРаспределения,
	               |						СпособыРаспределения.СтруктурноеПодразделениеЗакрытия КАК СтруктурноеПодразделениеЗакрытия,
	               |						СпособыРаспределения.СчетЗатрат КАК СчетЗатрат,
	               |						СпособыРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |						СпособыРаспределения.Подразделение КАК Подразделение,
	               |						СпособыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат
	               |					ИЗ
	               |						МетодыРаспределения КАК СпособыРаспределения
	               |					ГДЕ
	               |						СпособыРаспределения.СтатьяЗатрат = &ПустаяСтатьяЗатрат
	               |						И СпособыРаспределения.Подразделение = &ПустоеПодразделение) КАК СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению
	               |					ПО ТиповойОбороты.Организация = СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.Организация
	               |						И ТиповойОбороты.СчетЗатрат = СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.СчетЗатрат
	               |						И (ВЫБОР
	               |							КОГДА СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.СтруктурноеПодразделение ССЫЛКА Справочник.Организации
	               |								ТОГДА ТиповойОбороты.СтруктурноеПодразделение.Владелец = &Организация
	               |							ИНАЧЕ ТиповойОбороты.СтруктурноеПодразделение = СпособыРаспределенияПоСчетуЗатратИСтруктурномуПодразделению.СтруктурноеПодразделение
	               |						КОНЕЦ)
	               |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |						СпособыРаспределения.БазаРаспределения КАК БазаРаспределения,
	               |						СпособыРаспределения.СчетЗакрытияБУ КАК СчетЗакрытия,
	               |						СпособыРаспределения.СубконтоБУ1 КАК Субконто1,
	               |						СпособыРаспределения.СубконтоБУ2 КАК Субконто2,
	               |						СпособыРаспределения.СубконтоБУ3 КАК Субконто3,
	               |						СпособыРаспределения.Организация КАК Организация,
	               |						СпособыРаспределения.МетодРаспределенияЗатратСсылка КАК МетодРаспределенияЗатратСсылка,
	               |						СпособыРаспределения.ПроцентРаспределения КАК ПроцентРаспределения,
	               |						СпособыРаспределения.СтруктурноеПодразделениеЗакрытия КАК СтруктурноеПодразделениеЗакрытия,
	               |						СпособыРаспределения.СчетЗатрат КАК СчетЗатрат,
	               |						СпособыРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |						СпособыРаспределения.Подразделение КАК Подразделение,
	               |						СпособыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат
	               |					ИЗ
	               |						МетодыРаспределения КАК СпособыРаспределения
	               |					ГДЕ
	               |						СпособыРаспределения.СчетЗатрат = &ПустойСчет
	               |						И СпособыРаспределения.СтатьяЗатрат = &ПустаяСтатьяЗатрат
	               |						И СпособыРаспределения.Подразделение = &ПустоеПодразделение) КАК СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом
	               |					ПО ТиповойОбороты.Организация = СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.Организация
	               |						И (ВЫБОР
	               |							КОГДА СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.СтруктурноеПодразделение ССЫЛКА Справочник.Организации
	               |								ТОГДА ТиповойОбороты.СтруктурноеПодразделение.Владелец = &Организация
	               |							ИНАЧЕ ТиповойОбороты.СтруктурноеПодразделение = СпособыРаспределенияПоСтруктурномуПодразделениюВЦелом.СтруктурноеПодразделение
	               |						КОНЕЦ)
	               |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |						СпособыРаспределения.БазаРаспределения КАК БазаРаспределения,
	               |						СпособыРаспределения.СчетЗакрытияБУ КАК СчетЗакрытия,
	               |						СпособыРаспределения.СубконтоБУ1 КАК Субконто1,
	               |						СпособыРаспределения.СубконтоБУ2 КАК Субконто2,
	               |						СпособыРаспределения.СубконтоБУ3 КАК Субконто3,
	               |						СпособыРаспределения.Организация КАК Организация,
	               |						СпособыРаспределения.МетодРаспределенияЗатратСсылка КАК МетодРаспределенияЗатратСсылка,
	               |						СпособыРаспределения.ПроцентРаспределения КАК ПроцентРаспределения,
	               |						СпособыРаспределения.СтруктурноеПодразделениеЗакрытия КАК СтруктурноеПодразделениеЗакрытия,
	               |						СпособыРаспределения.СчетЗатрат КАК СчетЗатрат,
	               |						СпособыРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |						СпособыРаспределения.Подразделение КАК Подразделение,
	               |						СпособыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат
	               |					ИЗ
	               |						МетодыРаспределения КАК СпособыРаспределения
	               |					ГДЕ
	               |						СпособыРаспределения.СчетЗатрат = &ПустойСчет
	               |						И СпособыРаспределения.Подразделение = &ПустоеПодразделение
	               |						И ВЫБОР
	               |								КОГДА СпособыРаспределения.СтруктурноеПодразделение ССЫЛКА Справочник.Организации
	               |									ТОГДА СпособыРаспределения.СтруктурноеПодразделение = &Организация
	               |								ИНАЧЕ СпособыРаспределения.СтруктурноеПодразделение = &ПустоеСтруктурноеПодразделение
	               |							КОНЕЦ) КАК СпособыРаспределенияПоСтатьеЗатратВЦелом
	               |					ПО ТиповойОбороты.Организация = СпособыРаспределенияПоСтатьеЗатратВЦелом.Организация
	               |						И ТиповойОбороты.СтатьяЗатрат = СпособыРаспределенияПоСтатьеЗатратВЦелом.СтатьяЗатрат
	               |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |						СпособыРаспределения.БазаРаспределения КАК БазаРаспределения,
	               |						СпособыРаспределения.СчетЗакрытияБУ КАК СчетЗакрытия,
	               |						СпособыРаспределения.СубконтоБУ1 КАК Субконто1,
	               |						СпособыРаспределения.СубконтоБУ2 КАК Субконто2,
	               |						СпособыРаспределения.СубконтоБУ3 КАК Субконто3,
	               |						СпособыРаспределения.Организация КАК Организация,
	               |						СпособыРаспределения.МетодРаспределенияЗатратСсылка КАК МетодРаспределенияЗатратСсылка,
	               |						СпособыРаспределения.ПроцентРаспределения КАК ПроцентРаспределения,
	               |						СпособыРаспределения.СтруктурноеПодразделениеЗакрытия КАК СтруктурноеПодразделениеЗакрытия,
	               |						СпособыРаспределения.СчетЗатрат КАК СчетЗатрат,
	               |						СпособыРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |						СпособыРаспределения.Подразделение КАК Подразделение,
	               |						СпособыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат
	               |					ИЗ
	               |						МетодыРаспределения КАК СпособыРаспределения
	               |					ГДЕ
	               |						СпособыРаспределения.СчетЗатрат = &ПустойСчет
	               |						И СпособыРаспределения.СтатьяЗатрат = &ПустаяСтатьяЗатрат
	               |						И СпособыРаспределения.Подразделение = &ПустоеПодразделение
	               |						И ВЫБОР
	               |								КОГДА СпособыРаспределения.СтруктурноеПодразделение ССЫЛКА Справочник.Организации
	               |									ТОГДА СпособыРаспределения.СтруктурноеПодразделение = &Организация
	               |								ИНАЧЕ СпособыРаспределения.СтруктурноеПодразделение = &ПустоеСтруктурноеПодразделение
	               |							КОНЕЦ) КАК СпособыРаспределенияПоОрганизацииВЦелом
	               |					ПО ТиповойОбороты.Организация = СпособыРаспределенияПоОрганизацииВЦелом.Организация
	               |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |						СпособыРаспределения.БазаРаспределения КАК БазаРаспределения,
	               |						СпособыРаспределения.СчетЗакрытияБУ КАК СчетЗакрытия,
	               |						СпособыРаспределения.СубконтоБУ1 КАК Субконто1,
	               |						СпособыРаспределения.СубконтоБУ2 КАК Субконто2,
	               |						СпособыРаспределения.СубконтоБУ3 КАК Субконто3,
	               |						СпособыРаспределения.Организация КАК Организация,
	               |						СпособыРаспределения.МетодРаспределенияЗатратСсылка КАК МетодРаспределенияЗатратСсылка,
	               |						СпособыРаспределения.ПроцентРаспределения КАК ПроцентРаспределения,
	               |						СпособыРаспределения.СтруктурноеПодразделениеЗакрытия КАК СтруктурноеПодразделениеЗакрытия,
	               |						СпособыРаспределения.СчетЗатрат КАК СчетЗатрат,
	               |						СпособыРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |						СпособыРаспределения.Подразделение КАК Подразделение,
	               |						СпособыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат
	               |					ИЗ
	               |						МетодыРаспределения КАК СпособыРаспределения
	               |					ГДЕ
	               |						СпособыРаспределения.СтатьяЗатрат = &ПустаяСтатьяЗатрат
	               |						И СпособыРаспределения.Подразделение = &ПустоеПодразделение
	               |						И ВЫБОР
	               |								КОГДА СпособыРаспределения.СтруктурноеПодразделение ССЫЛКА Справочник.Организации
	               |									ТОГДА СпособыРаспределения.СтруктурноеПодразделение = &Организация
	               |								ИНАЧЕ СпособыРаспределения.СтруктурноеПодразделение = &ПустоеСтруктурноеПодразделение
	               |							КОНЕЦ) КАК СпособыРаспределенияПоСчетуВЦелом
	               |					ПО ТиповойОбороты.Организация = СпособыРаспределенияПоСчетуВЦелом.Организация
	               |						И ТиповойОбороты.СчетЗатрат = СпособыРаспределенияПоСчетуВЦелом.СчетЗатрат) КАК ТаблицаСпособовРаспределения) КАК ПоКосвеннымЗатратам
	               |		ПО (ПоКосвеннымЗатратам.Подразделение = АнализДанных.Подразделение)
	               |			И (ПоКосвеннымЗатратам.СчетЗатрат = АнализДанных.СчетЗатрат)";
				   
	Запрос.УстановитьПараметр("НачДата",          	мНачДата);
	Запрос.УстановитьПараметр("КонДата",          	мКонДата);
	Запрос.УстановитьПараметр("НачГраница",       	Новый Граница(мНачДата, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Счета",       		СчетаЗатрат);
	Запрос.УстановитьПараметр("Организация",      	СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат", Справочники.СтатьиЗатрат.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
		
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Типовой", "Налоговый");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "БухгалтерскийУчет", "НалоговыйУчет");
		Запрос.УстановитьПараметр("СчетЗатрат",          ПланыСчетов.Налоговый.НакладныеРасходы);
		Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Налоговый.ПустаяСсылка());
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.СчетЗатратБУ", "МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.СчетЗатратНУ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СчетЗакрытияБУ", "СчетЗакрытияНУ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СубконтоБУ1", "СубконтоНУ1");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СубконтоБУ2", "СубконтоНУ2");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СубконтоБУ3", "СубконтоНУ3");	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПолуфабрикатыСобственногоПроизводства_", "ПолуфабрикатыСобственногоПроизводства");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВспомогательныеПроизводства_", "ВспомогательныеПроизводства");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НакладныеРасходы_", "НакладныеРасходы");

	Иначе
		Запрос.УстановитьПараметр("СчетЗатрат", ПланыСчетов.Типовой.НакладныеРасходы);	
		Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Типовой.ПустаяСсылка());
	КонецЕсли;
	
	
	////////////////////////////////
	
	Запрос.УстановитьПараметр("ПустоеПодразделение", 			Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеСтруктурноеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	
	////////////////////////////////
	                   	
		
	СчетаОбщихЗатрат = Новый Массив;
	СчетаОбщихЗатрат.Добавить(ПС.НакладныеРасходы);
	Запрос.УстановитьПараметр("СчетаОбщихЗатрат", СчетаОбщихЗатрат);
	
	Результат = Запрос.Выполнить();
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(Результат);

 	ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("ГП");
	ЭлементОтбора.ВидСравнения 	= ВидСравнения.НеРавно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.Значение = "NULL";
	ПостроительЗапроса.Выполнить();
	ТаблицаПроизводства = ПостроительЗапроса.Результат.Выгрузить();
	ТаблицаПроизводства.Колонки.Удалить("Источник");
	
	ПостроительЗапроса.Отбор.Сбросить();
	ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("ГП");
	ЭлементОтбора.Установить("NULL");
	ПостроительЗапроса.Выполнить();
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		ТекстСообщенияЗаголовок = "По результатам анализа производственных затрат:";
			
	КонецЕсли;
		
	Пока Выборка.Следующий() Цикл
		Если Выборка.Источник = 1 Тогда // прямые затраты			
			Если ТаблицаНеЗакрытыхПодразделений.НайтиСтроки(Новый Структура("Подразделение, СчетЗатрат", Выборка.Подразделение, Выборка.СчетЗатрат)).Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;			
			ТекстСообщения = ТекстСообщенияЗаголовок + "
			|Нет базы распределения на себестоимость продукции (услуг) прямых расходов, учитываемых следующим образом:
			|Счет учета				: "		+ Выборка.СчетЗатрат 			+ ".
			|Подразделение			: "		+ Выборка.Подразделение 		+ ".
			|Номенклатурная группа	: " 	+ Выборка.НоменклатурнаяГруппа 	+ ".
			|База распределения		: плановая себестоимость продукции.
			|Проверьте наличие данных о выпуске продукции.";
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , ,ЭтотОбъект,РегОперация, Ложь);
			
			Строка = ТаблицаНеЗакрытыхПодразделений.Добавить();
			Строка.Подразделение 	= Выборка.Подразделение;
			Строка.СчетЗатрат 		= Выборка.СчетЗатрат;

		ИначеЕсли Выборка.Источник = 2 Тогда // общие затраты		
			////
			Если Выборка.СчетЗатратДляПроверки <> Null Тогда 
				// если указан непроизводственный счет закрыти налкданых расходов
				// распределение не производится. Проверка не требуется
				Если ЗначениеЗаполнено(Выборка.СчетЗатратДляПроверки) И (Не Выборка.ПризнакПроизводсвенногоСчета) Тогда 
					Продолжить;
				КонецЕсли;
				
				// если указан производственный счет закрытия, но его аналитика - подразделение и НГ - заполнены,
				// то распределение тоже не производится.
				// проверять наличие базы  ОПР не требуется
				НомерСубконтоПодразделения 			= 0;
				НомерСубконтоНоменклатурнойГруппы 	= 0;
				Для НомерСубконто = 1 По 3 Цикл          					
					Если НЕ ЗначениеЗаполнено(Выборка["СубконтоЗакрытия" + НомерСубконто]) Тогда
						Продолжить;
					КонецЕсли;	                         					
					Если ТипЗнч(Выборка["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда													
						НомерСубконтоПодразделения			= НомерСубконто;						
					ИначеЕсли ТипЗнч(Выборка["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						НомерСубконтоНоменклатурнойГруппы 	= НомерСубконто;							
					КонецЕсли;						
				КонецЦикла;
				
				Если НомерСубконтоПодразделения <> 0 И НомерСубконтоНоменклатурнойГруппы <> 0 Тогда
					Продолжить;
				КонецЕсли;	
			КонецЕсли;
			
			////
			Если ТаблицаНеЗакрытыхПодразделений.НайтиСтроки(Новый Структура("Подразделение, СчетЗатрат", Выборка.Подразделение, Выборка.СчетЗатрат)).Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;			

			Если НЕ Выборка.БазаРаспределения = Ложь Тогда 
				БазаРаспределения = "База распределения: " + Выборка.БазаРаспределения;
			Иначе 
				БазаРаспределения = "База распределения: плановая себестоимость продукции."
			КонецЕсли;
			
			
		 	ТекстСообщения = ТекстСообщенияЗаголовок + "
			|Нет базы распределения на себестоимость продукции (услуг) косвенных расходов, учитываемых следующим образом:
			|Счет учета			: " + Выборка.СчетЗатрат	+ ".
			|Подразделение		: " + Выборка.Подразделение + ". 	
			|" + БазаРаспределения + "			
			|Проверьте наличие данных о выпуске продукции.";
			
			ЭтоСообщениеОшибка = Ложь;
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				Если Выборка.СчетЗатрат = ПланыСчетов.Налоговый.НакладныеРасходы Тогда 
					ЭтоСообщениеОшибка = Ложь;
				Иначе 
					ЭтоСообщениеОшибка = Истина;
				КонецЕсли;
			Иначе 
				Если Выборка.СчетЗатрат = ПланыСчетов.Типовой.НакладныеРасходы Тогда 
					ЭтоСообщениеОшибка = Ложь;
				Иначе 
					ЭтоСообщениеОшибка = Истина;
				КонецЕсли;
			КонецЕсли;

			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , ЭтотОбъект ,РегОперация, ЭтоСообщениеОшибка);
		 			
			Строка = ТаблицаНеЗакрытыхПодразделений.Добавить();
			Строка.Подразделение = Выборка.Подразделение;
			Строка.СчетЗатрат = Выборка.СчетЗатрат; 			
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТаблицаПроизводства;
КонецФункции

Функция ПолучитьПорядокПодразделений(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	// Определяется диапазон переделов после чего начинается перебор
	// всех переделов из найденного диапазона.	
	
	ТекстЗапроса = "ВЫБРАТЬ
				   |	ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.НомерПередела КАК НомерПередела,
				   |	ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.Подразделение КАК Подразделение
				   |ИЗ
				   |	РегистрСведений.ПорядокЗакрытияПодразделенийОрганизаций.СрезПоследних(&КонДата,  Организация = &Организация) КАК ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НомерПередела";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонДата",     мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		
	 Результат = Запрос.Выполнить().Выгрузить();
	 Результат.Колонки.Добавить("НоменклатурнаяГруппа");
	 Результат.ЗаполнитьЗначения("Все", "НоменклатурнаяГруппа");

	Возврат Результат;
	
Конецфункции

Функция ПолучитьТаблицуВстречногоВыпуска(СтруктураШапкиДокумента)
		
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Подразделение,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппа,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета КАК ПодразделениеПересчета,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппаПересчета КАК НоменклатурнаяГруппаПересчета,
	|	ВложенныйЗапрос.СубконтоКт2,
	|	ВложенныйЗапрос.СубконтоКт3
	|ИЗ
	|	РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, ) КАК ВстречныйВыпускПродукцииУслугСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТиповойОборотыДтКт.СубконтоКт2 КАК СубконтоКт2,
	|			ТиповойОборотыДтКт.СубконтоКт3 КАК СубконтоКт3,
	|			ТиповойОборотыДтКт.СуммаОборот КАК СуммаОборот,
	|			ТиповойОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
	|			ТиповойОборотыДтКт.СубконтоДт2 КАК СубконтоДт2,
	|			ТиповойОборотыДтКт.СубконтоДт3 КАК СубконтоДт3,
	|			ТиповойОборотыДтКт.СубконтоКт1 КАК СубконтоКт1,
	|			ТиповойОборотыДтКт.СтруктурноеПодразделениеДт КАК СтруктурноеПодразделениеДт,
	|			ТиповойОборотыДтКт.СтруктурноеПодразделениеКт КАК СтруктурноеПодразделениеКт
	|		ИЗ
	|			РегистрБухгалтерии.Типовой.ОборотыДтКт(&НачДата, &КонДата, , (НЕ СчетДт В ИЕРАРХИИ (&СчетаНакладныхРасх)), , , , &Организация = Организация) КАК ТиповойОборотыДтКт) КАК ВложенныйЗапрос
	|		ПО ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция = ВложенныйЗапрос.СубконтоКт1
	|			И ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета = ВложенныйЗапрос.СубконтоДт1
	|			И ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппаПересчета = ВложенныйЗапрос.СубконтоДт2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Подразделение,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппа,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппаПересчета,
	|	ВложенныйЗапрос.СубконтоКт2,
	|	ВложенныйЗапрос.СубконтоКт3
	|ИЗ
	|	РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, ) КАК ВстречныйВыпускПродукцииУслугСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТиповойОборотыДтКт.СубконтоКт2 КАК СубконтоКт2,
	|			ТиповойОборотыДтКт.СубконтоКт3 КАК СубконтоКт3,
	|			ТиповойОборотыДтКт.СуммаОборот КАК СуммаОборот,
	|			ТиповойОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
	|			ТиповойОборотыДтКт.СубконтоДт2 КАК СубконтоДт2,
	|			ТиповойОборотыДтКт.СубконтоДт3 КАК СубконтоДт3,
	|			ТиповойОборотыДтКт.СубконтоКт1 КАК СубконтоКт1
	|		ИЗ
	|			РегистрБухгалтерии.Типовой.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&СчетаНакладныхРасх), , , , &Организация = Организация) КАК ТиповойОборотыДтКт) КАК ВложенныйЗапрос
	|		ПО ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция = ВложенныйЗапрос.СубконтоКт1
	|			И ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета = ВложенныйЗапрос.СубконтоДт1";
	 
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонДата",     мКонДата);
	Запрос.УстановитьПараметр("НачДата",     мНачДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		
	СчетаНакладныхРасх = Новый Массив;
	СчетаНакладныхРасх.Добавить(ПланыСчетов.Типовой.НакладныеРасходы);
	Запрос.УстановитьПараметр("СчетаНакладныхРасх", СчетаНакладныхРасх);
	
	ТаблицаВстречногоВыпуска = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаВстречногоВыпуска;
 КонецФункции

Функция ПолучитьПорядокПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	ТаблицаПроизводства = АнализДанныхПроизводства(СтруктураШапкиДокумента, СтруктураДопПараметров);
	
	ТаблицаПроизводства.Колонки.Добавить("НомерПередела", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(12,0));
	
	// Для ускорения выгрузим колонку продукция в ТабСписПрод,
	ТабСписПрод = ТаблицаПроизводства.Скопировать();
	ТабСписПрод.Свернуть("ГП");
	
	ТаблицаПроизводства.Сортировать("ПодразделениеПредставление, НоменклатурнаяГруппаПредставление, НоменклатураЗатратПредставление");

	Индекс = 0;
	МаксИндекс = ТаблицаПроизводства.Количество() - 1;
	ТекПередел = 1;
	ПараметрыПоиска = Новый Структура;
 	ПроставленПередел = Истина;
	
	Пока ПроставленПередел Цикл
		
		ПроставленПередел = Ложь;
	
		Пока Индекс <= МаксИндекс Цикл
			ТекСтрока = ТаблицаПроизводства[Индекс];
			
			Если ТабСписПрод.Найти( ТекСтрока.НоменклатураЗатрат, "ГП") = Неопределено Тогда
				ТекСтрока.НомерПередела = ТекПередел;
				ПроставленПередел = Истина;
				Индекс = Индекс + 1;
				Пока Индекс <= МаксИндекс Цикл
					Стр = ТаблицаПроизводства[Индекс];
					Если Стр.НоменклатураЗатрат = ТекСтрока.НоменклатураЗатрат Тогда
						Стр.НомерПередела = ТекПередел;
					Иначе
						Прервать;
					КонецЕсли;
					Индекс = Индекс + 1;
				КонецЦикла;
								
			Иначе
				ПараметрыПоиска.Очистить();
				ПараметрыПоиска.Вставить( "ГП", ТекСтрока.НоменклатураЗатрат);
				НаборСтрок = ТаблицаПроизводства.НайтиСтроки(ПараметрыПоиска);
				Если НаборСтрок.Количество() = 0 Тогда
					ТекСтрока.НомерПередела = ТекПередел;
					ПроставленПередел = Истина;
				Иначе
					СледПередел = Ложь;
					Для Каждого СтрокаПрод Из НаборСтрок Цикл
						Если СтрокаПрод.НомерПередела = 0 ИЛИ СтрокаПрод.НомерПередела = ТекПередел Тогда
							СледПередел = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Не СледПередел Тогда
						ТекСтрока.НомерПередела = ТекПередел;
						ПроставленПередел = Истина;
					КонецЕсли;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаПроизводства.Сортировать("НомерПередела Убыв, ПодразделениеПредставление, НоменклатурнаяГруппаПредставление, НоменклатураЗатратПредставление");
		ТекСтрока = ТаблицаПроизводства.Найти(0, "НомерПередела");
		
		Если ТекСтрока = Неопределено Тогда
			Прервать;
		Иначе
			Индекс = ТаблицаПроизводства.Индекс(ТекСтрока);
			
		КонецЕсли;
		
		ТекПередел = ТекПередел + 1;
		
	КонецЦикла;
	
	ТаблицаПроизводства.Сортировать("НомерПередела Убыв, ПодразделениеПредставление, НоменклатурнаяГруппаПредставление, НоменклатураЗатратПредставление");
	
	// Продукция выпущенная на переделе.
	ТабТемп = ТаблицаПроизводства.Скопировать();
	
	// Рассчитаем максимальный уровень передела для продукции
	ТабТемп.Свернуть("Подразделение, НоменклатурнаяГруппа, ГП, НомерПередела");
	ТабПродукция = ТабТемп.Скопировать();
	ТабПродукция.Свернуть("Подразделение, НоменклатурнаяГруппа, ГП");
	ТабПродукция.Колонки.Добавить("НомерПередела", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(12, 0));
	СтруктПоиска = Новый Структура;
	Для Каждого СтрокаТаб Из ТабПродукция Цикл
		СтруктПоиска.Вставить("Подразделение", 			СтрокаТаб.Подразделение);
		СтруктПоиска.Вставить("НоменклатурнаяГруппа", 	СтрокаТаб.НоменклатурнаяГруппа);
		НаборСтрок = ТабТемп.НайтиСтроки(СтруктПоиска);
		МаксНомерПередела = 0;
		Для Каждого Строка Из НаборСтрок Цикл
			МаксНомерПередела = Макс(МаксНомерПередела, Строка.НомерПередела);
		КонецЦикла;
		СтрокаТаб.НомерПередела = МаксНомерПередела;
	КонецЦикла;
	ТабТемп = 0;
	
	ТабПродукция.Свернуть("Подразделение, НоменклатурнаяГруппа, НомерПередела");
	ТабПродукция.Сортировать("НомерПередела Возр");

	ТаблицаВстречногоВыпуска = ПолучитьТаблицуВстречногоВыпуска(СтруктураШапкиДокумента);
	СтруктураДопПараметров.Вставить("ТаблицаВстречногоВыпуска", ТаблицаВстречногоВыпуска);
	
	// Если в порядке переделов всего один передел, то сообщение не выдыается
	ПорядокПодразделенийСообщался = ПорядокПодразделенийСообщался ИЛИ (ТабПродукция.Количество() = 1);
	
	Если Не ПорядокПодразделенийСообщался Тогда
		Сообщить("-------------------------------------------------------------------------------------");
		Сообщить("Порядок переделов");
		
		НомерПередела = 1;
		Для Каждого Передел Из ТабПродукция Цикл
			Сообщить("" + НомерПередела + " - " + Передел.Подразделение + " - " + Передел.НоменклатурнаяГруппа);
			НомерПередела = НомерПередела + 1;
		КонецЦикла;
		
		Сообщить("-------------------------------------------------------------------------------------");
	КонецЕсли;
	
	ПорядокПодразделенийСообщался = Истина;
	
	Возврат ТабПродукция;
		
КонецФункции

Функция РасчетТекущегоПредела(ТаблицаПроизводства, ТаблицаГПТекущегоПередела, ТекущийНомерПередела)
	
	
	ТаблицаГПСледующегоПередела = Новый ТаблицаЗначений ;
	ТаблицаГПСледующегоПередела.Колонки.Добавить("ГП");
	
	Для Каждого СтрокаГП ИЗ ТаблицаГПТекущегоПередела Цикл
		ФлагВыхода = 1;
		Для Каждого Строка Из ТаблицаПроизводства Цикл
			Если Строка.НомерПередела <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Строка.НоменклатураЗатрат = СтрокаГП.ГП Тогда
				Строка.НомерПередела = ТекущийНомерПередела;
				ФлагВыхода = 0;
				СтрокаГП = ТаблицаГПСледующегоПередела.Добавить();
				СтрокаГП.ГП = Строка.ГП;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ФлагВыхода = 0 ТОгда
		РасчетТекущегоПредела(ТаблицаПроизводства, ТаблицаГПСледующегоПередела, ТекущийНомерПередела + 1);
	Иначе
		Возврат ТаблицаПроизводства;
	КонецЕсли;
	
КонецФункции

// Процедура производит расчет себестоимости по прямым затратам по переделам.
//
Процедура РасчетПрямыхЗатрат(СтруктураШапкиДокумента, ВыполненоРаспределениеОПР = Ложь, СтруктураДопПараметров, Отказ = Ложь)
	
	Для Каждого Передел Из ПорядокПеределов Цикл
		
		// Распределение прямых расходов по тем подразделениям, которым присвоен
		// текущий номер передела.
		МассивНоменклатуры = Новый Массив; // массив номенклатуры, у которой, в результате расчета себестоимости, изменилась среденевзвешенная стоимость.
		ДвиженияПоПрямымЗатратам(СтруктураШапкиДокумента, Передел.Подразделение, Передел.НоменклатурнаяГруппа, ВыполненоРаспределениеОПР, МассивНоменклатуры, СтруктураДопПараметров);		
		  	
		Если МассивНоменклатуры.Количество() > 0 Тогда
				
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете  Тогда
				//Для ВР мы только учитываем затраты. При корректировки себестоимости по НУ, сумма ВР образуется 
				//при отклонениях Суммы НУ/ПР от Суммы БУ
				Если  СтруктураДопПараметров.ВидУчетаНУ = Справочники.ВидыУчетаНУ.ВР Тогда
					Продолжить;
				КонецЕсли;				
								
				Если СтруктураДопПараметров.ТаблицаРасчетаСебестоимости.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли; 			
				
			КонецЕсли;
			
			Если Не Отказ Тогда 				
				КорректирровкаСтоимостиСписанияВыпущеннойПродукции(СтруктураШапкиДокумента, МассивНоменклатуры, ВыполненоРаспределениеОПР, СтруктураДопПараметров);															
			КонецЕсли; 
		КонецЕсли;
			
	КонецЦикла;
		
КонецПроцедуры // РасчетПрямыхЗатрат()
  
// Процедура производит коррекировку стоимости списания
// выпущенной в текущем месяце продукции.
Процедура КорректирровкаСтоимостиСписанияВыпущеннойПродукции(СтруктураШапкиДокумента, МассивНоменклатуры, ВыполненоРаспределениеОПР, СтруктураДопПараметров)

	// Формирование корректировки стоимости списаний, исходя из среденвзвешенной стоимости номенклатуры
	СтруктураДопПараметров.Вставить("Учет",           ?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "Бух", "Нал"));
	СтруктураДопПараметров.Вставить("Организация",    СтруктураШапкиДокумента.Организация);
	СтруктураДопПараметров.Вставить("Период",         Дата);
	СтруктураДопПараметров.Вставить("Регистратор",    ЭтотОбъект);
	СтруктураДопПараметров.Вставить("ТаблицаТоваров", МассивНоменклатуры);
	
	// После закрытия общепроизводственных расходов необходимо,
	// чтобы не корректировалось списание номенклатуры в дебет
	// счета накладных расходов.
	Если ВыполненоРаспределениеОПР Тогда
		
		// Массив счетов по которым не надо делать корректировку операций списания
		МассивСчетов = Новый Массив;
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			МассивСчетов.Добавить(ПланыСчетов.Типовой.ОсновноеПроизводство);
			МассивСчетов.Добавить(ПланыСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства);
			МассивСчетов.Добавить(ПланыСчетов.Типовой.ВспомогательныеПроизводства);
			МассивСчетов.Добавить(ПланыСчетов.Типовой.НакладныеРасходы);
		Иначе
			МассивСчетов.Добавить(ПланыСчетов.Налоговый.ОсновноеПроизводство);
			МассивСчетов.Добавить(ПланыСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства);
			МассивСчетов.Добавить(ПланыСчетов.Налоговый.ВспомогательныеПроизводства);
			МассивСчетов.Добавить(ПланыСчетов.Налоговый.НакладныеРасходы);			
		КонецЕсли;                                                        		
		СтруктураДопПараметров.Вставить("СписокНеКорректируемыхСчетов", МассивСчетов);		
	Иначе
		СтруктураДопПараметров.Вставить("СписокНеКорректируемыхСчетов", Неопределено);
	КонецЕсли;
	
	КорректировкаСтоимости.КорректировкаСтоимости(МассивНоменклатуры, мНачДата, мКонДата, СтруктураДопПараметров);
	
	мОперация.Записать(Ложь);    
    	
КонецПроцедуры

// Проверка все ли подразделения, учавствующие в обороте, указаны в порядке закрытия подразделений
Процедура ПроверкаПорядкаЗакрытияПодразделений(СтруктураШапкиДокумента, ПланСчетов)
		
		
	ТекстЗапроса = "ВЫБРАТЬ
				   |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.НомерПередела) КАК КонечныйПередел,
				   |	ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.Подразделение КАК Подразделение,
				   |	NULL КАК СуммаОборот
				   |ИЗ
				   |	РегистрСведений.ПорядокЗакрытияПодразделенийОрганизаций.СрезПоследних(&КонДата, Организация = &Организация) КАК ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.Подразделение
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	NULL,
				   |	ТиповойОбороты.СубконтоДт1,
				   |	СУММА(ТиповойОбороты.СуммаОборот)
				   |ИЗ
				   |	РегистрБухгалтерии."+ ПланСчетов +".ОборотыДтКт(&НачДата, &КонДата, , , , , , СтруктурноеПодразделениеДт = &СтруктурноеПодразделение И  Организация = &Организация) КАК ТиповойОбороты
				   |
				   |ГДЕ
				   |	(ТиповойОбороты.СубконтоДт1 ССЫЛКА Справочник.ПодразделенияОрганизаций)
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ТиповойОбороты.СубконтоДт1
				   |
				   |ИТОГИ СУММА(КонечныйПередел), СУММА(СуммаОборот) ПО
				   |	Подразделение";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата",     мНачДата);
	Запрос.УстановитьПараметр("КонДата",     мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктураШапкиДокумента.СтруктурноеПодразделение);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Свернуть("Подразделение","КонечныйПередел, СуммаОборот");
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		РегОперация = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ;
	Иначе
		РегОперация = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ;
	КонецЕсли;
			
	Для Каждого Результат Из РезультатЗапроса Цикл
		Если Результат.КонечныйПередел = 0 И Результат.СуммаОборот <> 0  И Не ПорядокПодразделенийСообщался Тогда
			ТекстСообщения = "Не установлен порядок подразделения " + Результат.Подразделение +"
			|для закрытия счетов, используемый
			|при расчете стоимости продукции.
			|Порядок устанавливается документом ""Установка порядка
			|подразделений для закрытия счетов""";
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , ЭтотОбъект, РегОперация);
			
			ПорядокПодразделенийСообщался = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура запускает расчет прямых и косвенных расходов
// если используется простой расчет себестоимости и не используется встречный выпуск
// (производственная цепочка не имеет "закольцованных звеньев"),
// тогда расчет прямых затрат запускается один раз
// в противном случае
// первый расчет прямых затрат производится без учета переделов, задействованных в "кольце"
// второй расчет прямых затрат производится только по пределем, задействованным в "кольце"
// третий расет прямых затрат проводится для всех передлов, но корректирует выпуск только той,
// готовой продукции, которая не была списана на "кольцо"
//
Процедура РасчетПрямыхИКосвенныхРасходов(СтруктураШапкиДокумента,СтруктураДопПараметров, Отказ = Ложь)
		
	Если СтруктураДопПараметров.СпособРасчетаСебестоимостиПроизводства = "ПоПеределам"
		И СтруктураДопПараметров.ТаблицаВстречногоВыпуска.Количество() > 0 Тогда
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "1";
		РасчетПрямыхЗатрат(СтруктураШапкиДокумента, , СтруктураДопПараметров, Отказ);
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "2";
		РасчетПрямыхЗатрат(СтруктураШапкиДокумента, , СтруктураДопПараметров, Отказ);
		// Списание общепроизводственных  расходов
		// на себестоимость продукции (услуг).
		//СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "3" + СпособОценкиМПЗ;
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "3"; 		        	
		
		РаспределениеКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ);						
		  		
	Иначе		
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "";
		РасчетПрямыхЗатрат(СтруктураШапкиДокумента, , СтруктураДопПараметров, Отказ);
		
		РаспределениеКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ);
				
	КонецЕсли;
		
	РасчетПрямыхИКосвенныхРасходовГПСписаннаяВПроизводство(СтруктураШапкиДокумента,СтруктураДопПараметров, Отказ);
	
КонецПроцедуры

// Процедура повторяет процедуру РасчетПрямыхИКосвенныхРасходов() не делая коректировок по ГП, произведенной
// в текущем месяце, списанной на производство
//
Процедура РасчетПрямыхИКосвенныхРасходовГПСписаннаяВПроизводство(СтруктураШапкиДокумента,СтруктураДопПараметров, Отказ = Ложь);
	
	ЗапросОстатков = Новый Запрос;
	ЗапросОстатков.Текст = 
	"ВЫБРАТЬ
	|	ТиповойОстатки.СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&КонГраница, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_)), ,  Организация = &Организация) КАК ТиповойОстатки";
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ЗапросОстатков.Текст = СтрЗаменить(ЗапросОстатков.Текст, "Типовой", "Налоговый");
		ЗапросОстатков.Текст = СтрЗаменить(ЗапросОстатков.Текст, "Организация = &Организация", "Организация = &Организация И ВидУчета В Иерархии(&ВидУчета)");		
		ЗапросОстатков.Текст = СтрЗаменить(ЗапросОстатков.Текст, "ПолуфабрикатыСобственногоПроизводства_", "ПолуфабрикатыСобственногоПроизводства");
		ЗапросОстатков.Текст = СтрЗаменить(ЗапросОстатков.Текст, "ВспомогательныеПроизводства_", "ВспомогательныеПроизводства");
		ЗапросОстатков.Текст = СтрЗаменить(ЗапросОстатков.Текст, "НакладныеРасходы_", "НакладныеРасходы");
		
		ЗапросОстатков.УстановитьПараметр("ВидУчета", СтруктураДопПараметров.ВидУчетаНУ);
	КонецЕсли;
	
	ЗапросОстатков.УстановитьПараметр("КонГраница", мКонГраница);	
	ЗапросОстатков.УстановитьПараметр("Организация", Организация);
		
	Результат = ЗапросОстатков.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если Выборка.СуммаОстаток = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыпускГП.СубконтоДт1 КАК Номенклатура
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ОборотыДтКт(
	|		&НачДата,
	|		&КонДата,,
	|		СчетДт = &СчетГП,,
	|		СчетКт В ИЕРАРХИИ (&СписокСчетовПроизводства),,
	|		Организация = &Организация) КАК ВыпускГП
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрБухгалтерии.Типовой.ОборотыДтКт(
	|		&НачДата,
	|		&КонДата,,
	|		СчетДт В ИЕРАРХИИ (&СписокСчетовПроизводства),,
	|		СчетКт = &СчетГП,,
	|		Организация = &Организация) КАК СписаниеГПВПроизводство
	|ПО 
	|	ВыпускГП.СубконтоДт1 = СписаниеГПВПроизводство.СубконтоКт1";
	
	СписокСчетовПроизводства = новый СписокЗначений;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Типовой", "Налоговый");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация", "Организация = &Организация И ВидУчетаДт В Иерархии(&ВидУчета)");		
		СписокСчетовПроизводства.Добавить(ПланыСчетов.Налоговый.ОсновноеПроизводство);
		СписокСчетовПроизводства.Добавить(ПланыСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства);
		СписокСчетовПроизводства.Добавить(ПланыСчетов.Налоговый.ВспомогательныеПроизводства);
		СписокСчетовПроизводства.Добавить(ПланыСчетов.Налоговый.НакладныеРасходы);
		Запрос.УстановитьПараметр("СчетГП", ПланыСчетов.Налоговый.ГотоваяПродукция);
		Запрос.УстановитьПараметр("ВидУчета", СтруктураДопПараметров.ВидУчетаНУ);
	Иначе
		СписокСчетовПроизводства.Добавить(ПланыСчетов.Типовой.ОсновноеПроизводство);
		СписокСчетовПроизводства.Добавить(ПланыСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства);
		СписокСчетовПроизводства.Добавить(ПланыСчетов.Типовой.ВспомогательныеПроизводства);
		СписокСчетовПроизводства.Добавить(ПланыСчетов.Типовой.НакладныеРасходы);
		Запрос.УстановитьПараметр("СчетГП", ПланыСчетов.Типовой.ГотоваяПродукция);		
	КонецЕсли;
	                                                      	
	Запрос.УстановитьПараметр("НачДата", мНачДата);
	Запрос.УстановитьПараметр("КонДата", мКонДата);
	
	Запрос.УстановитьПараметр("ДокЗакрытиеМесяца", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);	
		
	Запрос.УстановитьПараметр("СписокСчетовПроизводства", СписокСчетовПроизводства);
	
	тзГПСписаннаяВПроизводство = Запрос.Выполнить().Выгрузить();
	
	Если тзГПСписаннаяВПроизводство.Количество() > 0 Тогда
		
		СписокНекорректируемойПродукции = Новый СписокЗначений;
		Для Каждого СтрокаТЗ Из тзГПСписаннаяВПроизводство Цикл
			СписокНекорректируемойПродукции.Добавить(СтрокаТЗ.Номенклатура);
		КонецЦикла;
		
		ДвижениеЗатратПоГПСписаннойВПроизводство = Истина;
				
		Если СтруктураДопПараметров.СпособРасчетаСебестоимостиПроизводства = "ПоПеределам"
			И СтруктураДопПараметров.ТаблицаВстречногоВыпуска.Количество() > 0 Тогда
			СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "1";
			РасчетПрямыхЗатрат(СтруктураШапкиДокумента, , СтруктураДопПараметров, Отказ);
			СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "2";
			РасчетПрямыхЗатрат(СтруктураШапкиДокумента, , СтруктураДопПараметров, Отказ);
			// Списание общепроизводственных  расходов
			// на себестоимость продукции (услуг).
			
			СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "3";
			СтруктураШапкиДокумента.СписокНекорректируемойПродукции = СписокНекорректируемойПродукции;
			
			РаспределениеКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ);			
						
		Иначе
			СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "";
			РасчетПрямыхЗатрат(СтруктураШапкиДокумента, , СтруктураДопПараметров, Отказ);			
			СтруктураШапкиДокумента.СписокНекорректируемойПродукции = СписокНекорректируемойПродукции;
			
			РаспределениеКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ);
			
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПРоцедуры

// Процедура проверяет, есть ли остатки на начало периода.
// Такая ситуация возможна, если в прошлом месяце были закрыты (списаны на счета НЗП)
// не все затраты.
// Кроме того, этими "незакрытами" затратами могут оказаться остатки НЗП, введеные 
// в качестве начальных остатков.
Процедура ЕстьОстаткиНЗПНаНачалоМесяца(СтруктураШапкиДокумента, ВидРегламентнойОперации)
	                      	
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТиповойОстатки.Субконто1 		КАК Субконто1,
	|	ТиповойОстатки.Счет 			КАК Счет,
	|	ТиповойОстатки.Субконто2 		КАК Субконто2,
	|	ТиповойОстатки.СуммаОстатокДт 	КАК КонОстаток	
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&НачГраница, Счет В ИЕРАРХИИ (&СчетаЗатрат), 
	|					 	 &ВидыСубконто, Организация = &Организация) КАК ТиповойОстатки
	|ГДЕ
	|	ТиповойОстатки.СуммаОстатокДт <> 0
	|ИТОГИ
	|	СУММА(КонОстаток)
	|ПО
	|	Субконто1";
	
	НачГраница = Новый Граница(мНачДата, ВидГраницы.Исключая);
	
	Запрос.УстановитьПараметр("НачГраница",    	НачГраница);
	Запрос.УстановитьПараметр("Организация",  	СтруктураШапкиДокумента.Организация);
		
	СчетаЗатрат = Новый Массив;
	Если СтруктураШапкиДокумента.ОтражатьВБУхгалтерскомУчете Тогда
		СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ОсновноеПроизводство);
		СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства);
		СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ВспомогательныеПроизводства);
	Иначе
		СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.ОсновноеПроизводство);
		СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства);
		СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.ВспомогательныеПроизводства);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Типовой", "Налоговый");
	КонецЕсли;

	
	Запрос.УстановитьПараметр("СчетаЗатрат", СчетаЗатрат);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	
	Результат = Запрос.Выполнить();
	
	//существуют остатки на начало
	Если НЕ Результат.Пустой() Тогда
		
		ТекстСообщения = "На начало месяца существуют остатки по счетам прямых затрат производственного учета.
		|Такая ситуация возможна, если в прошлом месяце были закрыты (списаны на счета 
		|незавершенного производства) не все затраты. Ниже приведен перечень затрат:";
		
		ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПодразделениям.Следующий() Цикл		
			ТекстСообщения = ТекстСообщения + "
			|Подразделение		: " + ВыборкаПоПодразделениям.Субконто1 + ". Сумма " + ВыборкаПоПодразделениям.КонОстаток + " " + мВалютаРегламентированногоУчета;
			
			ВыборкаПоСчетамИНоменклатурнымГруппам = ВыборкаПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоСчетамИНоменклатурнымГруппам.Следующий() Цикл		
				
				ТекстСообщения = ТекстСообщения + "
				|Счет затрат : " + ВыборкаПоСчетамИНоменклатурнымГруппам.Счет +
				". Номенклатурная группа : " + ВыборкаПоСчетамИНоменклатурнымГруппам.Субконто2 + 
				". Сумма : " + ВыборкаПоСчетамИНоменклатурнымГруппам.КонОстаток + 
				" " + мВалютаРегламентированногоУчета;
				
			КонецЦикла;
		КонецЦикла;
		
		ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, ,  ,ЭтотОбъект, ВидРегламентнойОперации);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует документы "Движение НЗП" по суммам, оставшимся незакрытими 
// (нераспределенными) на производственных счетам (за исключением счетов косвенных расходов).
// По каждому подразделению формируется два документа:
// 1. Документ "Движение НЗП" с видом операции "Отнесение на НЗП" (в конце текущего месяца).
//   Формируются движения по переносу с производственных счетов на счета незавершенного 
//   производства.
// 2. Документ "Движение НЗП" с видом операции "Отнесение на НЗП" (в начале следующего месяца).
//   Формируются движения по обратному переносу со счетов незавершенного производства
//   на производственные счета.
//
Процедура ДвижениеНЗП(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ПереносНЗПБУ   Тогда
		
		РеглОперация =  Перечисления.ВидыРегламентныхОпераций.ПереносНЗПБУ;
		СтруктураДопПараметров.Вставить("ОтражатьВБухгалтерскомУчете", Истина);
		СтруктураДопПараметров.Вставить("ОтражатьВНалоговомУчете", Ложь);
		СтруктураДопПараметров.Вставить("РеглОперация", РеглОперация); 			      		
		ДвижениеНЗППоБУиНУ(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок)		
	КонецЕсли; 	
	
	Если СтруктураШапкиДокумента.ПереносНЗПНУ И СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
		РеглОперация = Перечисления.ВидыРегламентныхОпераций.ПереносНЗПНУ;
		СтруктураДопПараметров.Вставить("ОтражатьВБухгалтерскомУчете", Ложь);
		СтруктураДопПараметров.Вставить("ОтражатьВНалоговомУчете", Истина);
		СтруктураДопПараметров.Вставить("РеглОперация", РеглОперация); 			
		ДвижениеНЗППоБУиНУ(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок);		
	КонецЕсли;				
	
	// Флаг "Перенос НЗП" был установлен в документе, затем он был снят
	Если мУбранФлажокПереносНЗП  <> Неопределено 
		ИЛИ  мУбранФлажокПереносНЗПНУ <> Неопределено Тогда
		
		РезультатЗапроса = СформироватьЗапросПоДокументамНЗП(СтруктураШапкиДокумента);
		ТаблицаДокументов = РезультатЗапроса.Выгрузить();
		
		//существуют документы "Движение НЗП"
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ТекстСообщения = "
			|У текущего документа существуют подчиненные документы ""Движение НЗП"". 
			|После снятия флажка ""Перенос НЗП"" они будут удалены.";
			
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , ,ЭтотОбъект ,РеглОперация, Ложь);
				                                   			
			Для Каждого Строка Из ТаблицаДокументов Цикл
				ТекущийДокумент = Строка.ДокументСсылка.ПолучитьОбъект();
				ТекущийДокумент.УстановитьПометкуУдаления(Истина);
			КонецЦикла;	
			
		КонецЕсли;		
	КонецЕсли;	

КонецПроцедуры

// Процедура формирует документы "Движение НЗП" по суммам, оставшимся незакрытими 
// (нераспределенными) на производственных счетам (за исключением счетов косвенных расходов).
// По каждому подразделению формируется два документа:
// 1. Документ "Движение НЗП" с видом операции "Отнесение на НЗП" (в конце текущего месяца).
//   Формируются движения по переносу с производственных счетов на счета незавершенного 
//   производства.
// 2. Документ "Движение НЗП" с видом операции "Отнесение на НЗП" (в начале следующего месяца).
//   Формируются движения по обратному переносу со счетов незавершенного производства
//   на производственные счета.
//
Процедура ДвижениеНЗППоБУиНУ(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок)
	
	ЕстьОстаткиНЗПНаНачалоМесяца(СтруктураШапкиДокумента, СтруктураДопПараметров.РеглОперация);
	
	НазваниеНачалаЭтапаСообщалось 		= Ложь;
	НазваниеОкончанияЭтапаСообщалось 	= Ложь;
	СписокСформированныхДокументов 		= Новый СписокЗначений;
	
	// Соберем данные о существующих документах "Движение НЗП".
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ДвижениеНЗП.ПодразделениеОрганизации КАК Подразделение,
	             |	ДвижениеНЗП.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	             |	ДвижениеНЗП.Ссылка КАК ДокументСсылка
	             |ИЗ
	             |	Документ.ДвижениеНЗП КАК ДвижениеНЗП
	             |ГДЕ
	             |	ДвижениеНЗП.Организация = &Организация
	             |	И ДвижениеНЗП.Дата >= &НачДата
	             |	И ДвижениеНЗП.Дата <= &КонДата
	             |	И ДвижениеНЗП.ВидОперации = &ВидОперации
	             |	И ДвижениеНЗП.ОтражатьВБухгалтерскомУчете
	             |ИТОГИ
	             |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументСсылка)
	             |ПО
	             |	СтруктурноеПодразделение,
	             |	Подразделение";
	Запрос.УстановитьПараметр("НачДата",  мНачДата);
	Запрос.УстановитьПараметр("КонДата",  мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктураШапкиДокумента.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийДвиженияНЗП.ОтнесениеНаНЗП);
	Если СтруктураДопПараметров.ОтражатьВНалоговомУчете Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтражатьВБухгалтерскомУчете", "УчитыватьКПН");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	// Дерево значений с документами "Движение НЗП" текущего месяца
	ДокументыДвиженияНЗПТекущегоМесяца = Новый ДеревоЗначений;
	ДокументыДвиженияНЗПТекущегоМесяца.Колонки.Добавить("СтруктурноеПодразделение");
	ДокументыДвиженияНЗПТекущегоМесяца.Колонки.Добавить("Подразделение");
	ДокументыДвиженияНЗПТекущегоМесяца.Колонки.Добавить("ДокументСсылка");
	
	// Выборка по структурным подразделениям
	ВыборкаПоСтруктурнымПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоСтруктурнымПодразделениям.Следующий() Цикл
		// Выборка по подразделениям.
		ВыборкаПоПодразделениям = ВыборкаПоСтруктурнымПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоПодразделениям.Следующий() Цикл
			НоваяСтрока = ДокументыДвиженияНЗПТекущегоМесяца.Строки.Добавить(); 
			НоваяСтрока.Подразделение 	= ВыборкаПоПодразделениям.Подразделение;
			НоваяСтрока.ДокументСсылка 	= ВыборкаПоПодразделениям.ДокументСсылка;
			НоваяСтрока.СтруктурноеПодразделение 	= ВыборкаПоСтруктурнымПодразделениям.СтруктурноеПодразделение;
			ИндексСтроки = ДокументыДвиженияНЗПТекущегоМесяца.Строки.Индекс(НоваяСтрока);
			
			
			// Выборка по документам.
			ВыборкаПоДокументам = ВыборкаПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоДокументам.Следующий() Цикл				
				НоваяСтрока = ДокументыДвиженияНЗПТекущегоМесяца.Строки[ИндексСтроки] .Строки.Добавить(); 
				НоваяСтрока.Подразделение 	= ВыборкаПоДокументам.Подразделение;
				НоваяСтрока.ДокументСсылка 	= ВыборкаПоДокументам.ДокументСсылка;	
				НоваяСтрока.СтруктурноеПодразделение 	= ВыборкаПоДокументам.СтруктурноеПодразделение;
			КонецЦикла; 
		КонецЦикла;
	КонецЦикла; 	
	
	Для Каждого ТекПодразделение Из ДокументыДвиженияНЗПТекущегоМесяца.Строки Цикл
		Для Каждого ТекДокумент Из ТекПодразделение.Строки Цикл			
			ТекДокумент.ДокументСсылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		КонецЦикла;	
	КонецЦикла;	
	
	// Теперь произведем закрытие остатков по производственным счетам на конец месяца.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТиповойОстатки.Субконто1 		КАК Субконто1,
	|	ТиповойОстатки.Счет 			КАК Счет,
	|	ТиповойОстатки.Субконто2		КАК Субконто2,
	|	ТиповойОбороты.Субконто3		КАК Субконто3,
	|	ТиповойОстатки.СтруктурноеПодразделение		КАК СтруктурноеПодразделение," + 
	? (СтруктураДопПараметров.ОтражатьВНалоговомУчете, "ЕСТЬNULL(ТиповойОстаткиОбщее.КонОстаток,0) ", 
	" ЕСТЬNULL(ТиповойОстатки.СуммаОстатокДт,0)") + " КАК КонОстаток,
	|	ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) 	КАК ОборотДт ";
	Если СтруктураДопПараметров.ОтражатьВНалоговомУчете Тогда
		Запрос.Текст  = Запрос.Текст + ",
		|ТиповойОбороты.ВидУчета Как ВидУчета ";
	Иначе
		Запрос.Текст  = Запрос.Текст + ",
		|"""" Как ВидУчета ";		
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ИЗ  РегистрБухгалтерии.Типовой.Остатки(&КонГраница, Счет В ИЕРАРХИИ (&СчетаЗатрат), 
	|			&ВидыСубконто, Организация = &Организация) КАК ТиповойОстатки ";
	Если СтруктураДопПараметров.ОтражатьВНалоговомУчете Тогда
		Запрос.Текст = Запрос.Текст + " Левое соединение (ВЫБРАТЬ
		|	ТиповойОстатки.Субконто1 		КАК Субконто1,
		|	ТиповойОстатки.Счет 			КАК Счет,
		|	ТиповойОстатки.Субконто2		КАК Субконто2,
		|   ТиповойОстатки.СтруктурноеПодразделение,		
		|	Сумма(ТиповойОстатки.СуммаОстатокДт) 	КАК КонОстаток	
		| ИЗ
		|РегистрБухгалтерии.Налоговый.Остатки(&КонГраница, Счет В ИЕРАРХИИ (&СчетаЗатрат), 
		|			&ВидыСубконто, Организация = &Организация) КАК ТиповойОстатки
		| Сгруппировать ПО
		|   ТиповойОстатки.СтруктурноеПодразделение,
		|	ТиповойОстатки.Субконто1, 	
		|	ТиповойОстатки.Счет 	,		
		|	ТиповойОстатки.Субконто2		
		|	) КАК ТиповойОстаткиОбщее 	
		|ПО    ТиповойОстатки.Счет = ТиповойОстаткиОбщее.Счет
		|			И ТиповойОстатки.Субконто1 = ТиповойОстаткиОбщее.Субконто1
		|			И ТиповойОстатки.Субконто2 = ТиповойОстаткиОбщее.Субконто2		
		|			И ТиповойОстатки.СтруктурноеПодразделение = ТиповойОстаткиОбщее.СтруктурноеПодразделение";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + " 	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(&НачГраница, &КонГраница, 
	|		Месяц, Счет В ИЕРАРХИИ (&СчетаЗатрат), &ВидыСубконто,  Организация = &Организация, , ) 
	|		КАК ТиповойОбороты
	|
	|		ПО ТиповойОстатки.Счет = ТиповойОбороты.Счет
	|			И ТиповойОстатки.Субконто1 = ТиповойОбороты.Субконто1
	|			И ТиповойОстатки.Субконто2 = ТиповойОбороты.Субконто2 	
	|			И ТиповойОстатки.СтруктурноеПодразделение = ТиповойОбороты.СтруктурноеПодразделение 	
	|ГДЕ
	|	ТиповойОстатки.СуммаОстатокДт <> 0
	| Упорядочить  По Субконто1,Субконто2	
	|ИТОГИ
	|	МАКСИМУМ(КонОстаток)
	|ПО
	| СтруктурноеПодразделение,
	|	Субконто1,
	|	Счет,
	|	Субконто2	";
	
		
	Запрос.УстановитьПараметр("НачГраница",            			мНачГраница);
	Запрос.УстановитьПараметр("КонГраница",            			мКонГраница);
	Запрос.УстановитьПараметр("Организация",           			СтруктураШапкиДокумента.Организация);
		
	СчетаЗатрат = Новый Массив;
	Если СтруктураДопПараметров.ОтражатьВНалоговомУчете Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Типовой", "Налоговый");			
		СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.ОсновноеПроизводство);
		СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства);
		СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.ВспомогательныеПроизводства);		
	Иначе 		
		СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ОсновноеПроизводство);  			
		СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства);
		СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ВспомогательныеПроизводства);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СчетаЗатрат",        СчетаЗатрат);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	
	Результат = Запрос.Выполнить();
	
	// Дерево значений с суммами НЗП, распределенными по статьям затрат
	ДанныеДляНЗП = Новый ДеревоЗначений;
	ДанныеДляНЗП.Колонки.Добавить("СтруктурноеПодразделение");
	ДанныеДляНЗП.Колонки.Добавить("Подразделение");
	ДанныеДляНЗП.Колонки.Добавить("НоменклатурнаяГруппа");
	
	Если СтруктураДопПараметров.ОтражатьВНалоговомУчете Тогда
		ДанныеДляНЗП.Колонки.Добавить("СчетНУ");
		ДанныеДляНЗП.Колонки.Добавить("СуммаНУ");
		ДанныеДляНЗП.Колонки.Добавить("ВидУчетаНУ");
	Иначе
		ДанныеДляНЗП.Колонки.Добавить("Счет");
		ДанныеДляНЗП.Колонки.Добавить("Сумма");
	КонецЕсли;
	
	ДанныеДляНЗП.Колонки.Добавить("СтатьяЗатрат");
	
	
	//существуют остатки НЗП
	Если НЕ Результат.Пустой() Тогда
		
		Если Не НазваниеНачалаЭтапаСообщалось Тогда
			Сообщить("-----Начало переноса остатков производственных счетов на счета незавершенного производства-----");
			НазваниеНачалаЭтапаСообщалось = Истина;
		КонецЕсли;
		
	КонецЕсли;	
	
	// Выборка по структурным подразделениям.
	ВыборкаПоСтруктурнымПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоСтруктурнымПодразделениям.Следующий() Цикл
		// Выборка по подразделениям.
		ВыборкаПоПодразделениям = ВыборкаПоСтруктурнымПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПодразделениям.Следующий() Цикл		
			
			НоваяСтрока = ДанныеДляНЗП.Строки.Добавить(); 
			НоваяСтрока.Подразделение = ВыборкаПоПодразделениям.Субконто1;
			НоваяСтрока.СтруктурноеПодразделение = ВыборкаПоПодразделениям.СтруктурноеПодразделение;
			
			ИндексСтроки = ДанныеДляНЗП.Строки.Индекс(НоваяСтрока);
			
			// Выборка по счетам.
			ВыборкаПоСчетам = ВыборкаПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоСчетам.Следующий() Цикл		
				
				ВыборкаПоНомГруппам = ВыборкаПоСчетам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);				
				
				Пока ВыборкаПоНомГруппам.Следующий() Цикл		
					ОстатокНЗППоНоменклатурнойГруппе = ВыборкаПоНомГруппам.КонОстаток;
					ОбщийОборотПоНоменклатурнойГруппе= 0;
					// Обходим статьи затрат 2 раза. 1-й - Сбор общей суммы оборота по всем статьям затрат.
					// 2-й - Распределение по статьям и занесение сумм в дерево значений.
					Для СчетчикЦикла = 1 По 2 Цикл
						
						// Выборка по статьям затрат
						ВыборкаПоСтатьямЗатрат = ВыборкаПоНомГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						РаспределеннаяСумма = 0;
						ТекЗапись = 0;
						
						Пока ВыборкаПоСтатьямЗатрат.Следующий() Цикл		
							
							// 1-й проход. Сбор данных.
							Если СчетчикЦикла = 1 Тогда
								 //Если ВыборкаПоСтатьямЗатрат.ОборотДт > 0 Тогда
								ОбщийОборотПоНоменклатурнойГруппе = ОбщийОборотПоНоменклатурнойГруппе + ВыборкаПоСтатьямЗатрат.ОборотДт;
								//КонецЕсли;
								
								// 2-й проход. Распределение и занесение сумм в дерево значений.	
							Иначе
								
								Если ОбщийОборотПоНоменклатурнойГруппе = 0 Тогда
									Продолжить;	
								КонецЕсли;	
								
								НоваяСтрока = ДанныеДляНЗП.Строки[ИндексСтроки] .Строки.Добавить(); 
								НоваяСтрока.СтруктурноеПодразделение = ВыборкаПоСтатьямЗатрат.СтруктурноеПодразделение;
								НоваяСтрока.Подразделение 			 = ВыборкаПоСтатьямЗатрат.Субконто1;
								НоваяСтрока.НоменклатурнаяГруппа 	 = ВыборкаПоСтатьямЗатрат.Субконто2;
								НоваяСтрока.СтатьяЗатрат		 	 = ВыборкаПоСтатьямЗатрат.Субконто3;
								СуммаНЗППоСтатьеЗатрат	= Окр((ВыборкаПоСтатьямЗатрат.КонОстаток * ВыборкаПоСтатьямЗатрат.ОборотДт / ОбщийОборотПоНоменклатурнойГруппе),2, РежимОкругления.Окр15как20);
								
								ОстатокКРаспределению = Окр((ВыборкаПоСтатьямЗатрат.КонОстаток - РаспределеннаяСумма),2, РежимОкругления.Окр15как20);
								
								// берем наименьший из двух величин - рассчитанной суммы НЗП и остатка суммы к распределению
								// так как при расчете каждой суммы СуммаНЗППоСтатьеЗатрат были округления в большую сторону, 
								// и если возникнуть ошибки, то однозначно в большую сторону (режим округления такой), поэтому берем меньший остаток
								// если это последняя запись то списываем полоностью 
								
								ТекЗапись = ТекЗапись + 1;
								
								Если ВыборкаПоСтатьямЗатрат.Количество() <> ТекЗапись Тогда 
									СуммаКОтнесению = ?(СуммаНЗППоСтатьеЗатрат>ОстатокКРаспределению, ОстатокКРаспределению, СуммаНЗППоСтатьеЗатрат);									
								Иначе 
									СуммаКОтнесению = ?(РаспределеннаяСумма + ОстатокКРаспределению = ВыборкаПоСтатьямЗатрат.КонОстаток, ОстатокКРаспределению, СуммаНЗППоСтатьеЗатрат); 
									СуммаНЗППоСтатьеЗатрат = СуммаКОтнесению;
								КонецЕсли;
								
								Если СтруктураДопПараметров.ОтражатьВНалоговомУчете Тогда
									
									НоваяСтрока.СчетНУ				 	= ВыборкаПоСтатьямЗатрат.Счет;
									НоваяСтрока.СуммаНУ 				= СуммаКОтнесению;
									НоваяСтрока.ВидУчетаНУ   		 	= ВыборкаПоСтатьямЗатрат.ВидУчета;
								Иначе
									НоваяСтрока.Счет				 	= ВыборкаПоСтатьямЗатрат.Счет;
									НоваяСтрока.Сумма 				    = СуммаКОтнесению;
								КонецЕсли;    						
								
								
								РаспределеннаяСумма = РаспределеннаяСумма + СуммаНЗППоСтатьеЗатрат; 
								
							КонецЕсли;	
							
						КонецЦикла;	// по статьям затрат.
						
					КонецЦикла;	// по этапам. 
					
				КонецЦикла;	// по номенклатурным группам.
				
			КонецЦикла;	// по счетам.	
			
		КонецЦикла;	// по подразделениям.
	КонецЦикла; // по структурным подразделения

	
	// Если по какому-либо подразделению нет сумм - удаляем строку 
	КолвоЭлементов = ДанныеДляНЗП.Строки.Количество(); 
	Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл 
		ТекСтрока = ДанныеДляНЗП.Строки[КолвоЭлементов - ОбратныйИндекс]; 
		
		Если СтруктураДопПараметров.ОтражатьВНалоговомУчете Тогда
			ИмяКолонки = "СуммаНУ";
		Иначе
			ИмяКолонки = "Сумма";
		КонецЕсли;
		
		Если ТекСтрока.Строки.Итог(ИмяКолонки, Истина) = 0 Тогда 
			ДанныеДляНЗП.Строки.Удалить(ТекСтрока); 
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Формирование документов "Движение НЗП"
	Для Каждого ТекСтрокаДанныхНЗП Из ДанныеДляНЗП.Строки Цикл	
		
		// Для начала определимся с документом. Документ по текущему подразделению может существовать, а может и нет.
		//Проверку будем осуществлять не только по подразделению, но и по структурному подразделению
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Подразделение", ТекСтрокаДанныхНЗП.Подразделение); 
		СтруктураПоиска.Вставить("СтруктурноеПодразделение", ТекСтрокаДанныхНЗП.СтруктурноеПодразделение);
		НайденаяСтрока = ДокументыДвиженияНЗПТекущегоМесяца.Строки.НайтиСтроки(СтруктураПоиска);
		// документ "Движение НЗП" по текущему подразделению не найден 
		// то создаем сразу два документа один по БУ, другой по НУ.
		//В зависмости от выполняемой операции будет либо один пустой(если не выполняется какая-либо операция: Перенос НЗП (БУ, НУ)
		//либо оба будут заполнены
		Если НайденаяСтрока.Количество() = 0 Тогда
			ТекущийДокументДвижениеНЗП = Документы.ДвижениеНЗП.СоздатьДокумент();
			ТекущийДокументДвижениеНЗП.Дата 					 = мКонДата;
			ТекущийДокументДвижениеНЗП.Организация 				 = Организация;
			ТекущийДокументДвижениеНЗП.СтруктурноеПодразделение	 = ТекСтрокаДанныхНЗП.СтруктурноеПодразделение;			
			
			ТекущийДокументДвижениеНЗП.ПодразделениеОрганизации  = ТекСтрокаДанныхНЗП.Подразделение;
			ТекущийДокументДвижениеНЗП.ВидОперации 			     = Перечисления.ВидыОперацийДвиженияНЗП.ОтнесениеНаНЗП;
			ТекущийДокументДвижениеНЗП.Ответственный 			 = Ответственный;
			ТекущийДокументДвижениеНЗП.ДокументЗакрытиеМесяца	 = Ссылка; 
			ТекущийДокументДвижениеНЗП.Комментарий				 = "Отнесение на НЗП " + ПредставлениеПериода(НачалоДня(мНачДата), КонецДня(мКонДата), "ФП = Истина");
			ТекущийДокументДвижениеНЗП.Автор					 = глЗначениеПеременной("глТекущийПользователь");
			ТекущийДокументДвижениеНЗПСсылка					 = ТекущийДокументДвижениеНЗП.Ссылка;
			ТекущийДокументДвижениеНЗП.ОтражатьВБухгалтерскомУчете = СтруктураДопПараметров.ОтражатьВБухгалтерскомУчете;
			ТекущийДокументДвижениеНЗП.УчитыватьКПН                = СтруктураДопПараметров.ОтражатьВНалоговомУчете;
			                              			
			// документ "Движение НЗП" по текущему подразделению найден
		Иначе
			
			// Документов "Движение НЗП" по текущему подразделению более 1.
			Если НайденаяСтрока[0].ДокументСсылка > 1 Тогда
				ТекстСообщения = "По подразделению """ + ТекСтрокаДанныхНЗП.Подразделение+ """ найдено более одного документа
				| """"Движение НЗП """". Допускается наличие только одного документа на каждое подразделение.";
				
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , ,ЭтотОбъект, СтруктураДопПараметров.РеглОперация, Ложь);
				
				КоличествоСуществующихДокументов = НайденаяСтрока[0].ДокументСсылка ;
				Если НайденаяСтрока[0].Строки.Количество() > 0 Тогда
					
					// Перебор документов "Движение НЗП" по текущему подразделению
					Для НомерТекущегоДокумента = 0 По НайденаяСтрока[0].Строки.Количество()-1 Цикл
						ТекущийДокументДвижениеНЗПСсылка = НайденаяСтрока[0].Строки[НомерТекущегоДокумента].ДокументСсылка;
						Если НомерТекущегоДокумента = 0 Тогда
							ТекущийДокументДвижениеНЗП = ТекущийДокументДвижениеНЗПСсылка.ПолучитьОбъект();
							ТекущийДокументДвижениеНЗП.ПометкаУдаления = Ложь;
							ТекущийДокументДвижениеНЗП.Состав.Очистить();
						Иначе
							ТекущийДокументДвижениеНЗПДляУдаления = ТекущийДокументДвижениеНЗПСсылка.ПолучитьОбъект();
							ТекущийДокументДвижениеНЗПДляУдаления.УстановитьПометкуУдаления(Истина);
							
							ТекстСообщения = "Помечен на удаление документ """ + ТекущийДокументДвижениеНЗПДляУдаления+ """";
							ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , ЭтотОбъект , СтруктураДопПараметров.РеглОперация, Ложь);							
							
						КонецЕсли;
						
					КонецЦикла;	
					
				КонецЕсли;
				
				// Документ "Движение НЗП" по текущему подразделению один. Очищаем табличную часть документа.
			Иначе
				ТекущийДокументДвижениеНЗПСсылка = НайденаяСтрока[0].Строки[0].ДокументСсылка;
				ТекущийДокументДвижениеНЗП = ТекущийДокументДвижениеНЗПСсылка.ПолучитьОбъект();
				ТекущийДокументДвижениеНЗП.ПометкаУдаления = Ложь;
				ТекущийДокументДвижениеНЗП.Состав.Очистить();
				ТекущийДокументДвижениеНЗП.Ответственный 			 = Ответственный;
				ТекущийДокументДвижениеНЗП.ДокументЗакрытиеМесяца	 = Ссылка;
				
			КонецЕсли;
			
		КонецЕсли; 			
		
		// Теперь заполняем текущий документ "Движение НЗП".
		Для Каждого ДанныеТекущегоДокумента Из ТекСтрокаДанныхНЗП.Строки Цикл	
			НоваяСтрока = ТекущийДокументДвижениеНЗП.Состав.Добавить();
			Если СтруктураДопПараметров.ОтражатьВНалоговомУчете Тогда
				НоваяСтрока.СчетЗатратНУ 				= ДанныеТекущегоДокумента.СчетНУ;
				НоваяСтрока.СуммаНУ 					= ДанныеТекущегоДокумента.СуммаНУ;					
				НоваяСтрока.ВидУчетаНУ 					= ДанныеТекущегоДокумента.ВидУчетаНУ;					
			Иначе					
				НоваяСтрока.СчетЗатратБУ 				= ДанныеТекущегоДокумента.Счет;
				НоваяСтрока.Сумма 					    = ДанныеТекущегоДокумента.Сумма;
			КонецЕсли;
			
			НоваяСтрока.НоменклатурнаяГруппа 	= ДанныеТекущегоДокумента.НоменклатурнаяГруппа;
			НоваяСтрока.СтатьяЗатрат 			= ДанныеТекущегоДокумента.СтатьяЗатрат;
			
		КонецЦикла;
		
		ТекущийДокументДвижениеНЗП.мПроведениеОперацииИзвне = Истина;
		ТекущийДокументДвижениеНЗП.Записать(РежимЗаписиДокумента.Проведение);
		
		ТекстСообщения = "Создан документ """ + ТекущийДокументДвижениеНЗП+ """.
		|Вид операции ""Отнесение на НЗП"". Подразделение """ + ТекущийДокументДвижениеНЗП.ПодразделениеОрганизации + """";
		
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Информация);
		
		СписокСформированныхДокументов.Добавить(ТекущийДокументДвижениеНЗП);
		
	КонецЦикла;
	
	// Создание документов "Движение НЗП" с видом операции "Возврат из производства"
	Для Каждого ТекущийДокумент Из СписокСформированныхДокументов Цикл
		
		ТекущийДокументДвижениеНЗП = ТекущийДокумент.Значение;
		
		Если ЗначениеЗаполнено(ТекущийДокументДвижениеНЗП.ДокументОснование) Тогда			
			ТекущийДокументДвижениеНЗППеренос = ТекущийДокументДвижениеНЗП.ДокументОснование.ПолучитьОбъект();
			ТекущийДокументДвижениеНЗППеренос.Состав.Очистить();                  
		Иначе						
			ТекущийДокументДвижениеНЗППеренос = Документы.ДвижениеНЗП.СоздатьДокумент();
			ТекущийДокументДвижениеНЗППеренос.Дата   					= НачалоМесяца(ДобавитьМесяц(Дата, 1));
			ТекущийДокументДвижениеНЗППеренос.Организация 			 	= Организация;
			ТекущийДокументДвижениеНЗППеренос.СтруктурноеПодразделение 	= ТекущийДокументДвижениеНЗП.СтруктурноеПодразделение;
			
			ТекущийДокументДвижениеНЗППеренос.ПодразделениеОрганизации 	= ТекущийДокументДвижениеНЗП.ПодразделениеОрганизации;
			ТекущийДокументДвижениеНЗППеренос.ВидОперации 			 	= Перечисления.ВидыОперацийДвиженияНЗП.ВозвратИзНЗП;
			ТекущийДокументДвижениеНЗППеренос.ДокументОснование		 	= ТекущийДокумент.Значение.Ссылка;
			ТекущийДокументДвижениеНЗППеренос.ДокументЗакрытиеМесяца	= Ссылка;
			ТекущийДокументДвижениеНЗППеренос.Ответственный 			= Ответственный;
			ТекущийДокументДвижениеНЗППеренос.Комментарий				= "Перенос с НЗП " + ПредставлениеПериода(НачалоДня(НачалоМесяца(ДобавитьМесяц(Дата, 1))), КонецДня(КонецМесяца(ДобавитьМесяц(Дата, 1))), "ФП = Истина");
			ТекущийДокументДвижениеНЗППеренос.Автор					 	= глЗначениеПеременной("глТекущийПользователь");
			ТекущийДокументДвижениеНЗППереносСсылка					 	= ТекущийДокументДвижениеНЗППеренос.Ссылка;
			ТекущийДокументДвижениеНЗППеренос.ОтражатьВБухгалтерскомУчете = СтруктураДопПараметров.ОтражатьВБухгалтерскомУчете;
			ТекущийДокументДвижениеНЗППеренос.УчитыватьКПН     = СтруктураДопПараметров.ОтражатьВНалоговомУчете;															
		КонецЕсли;		
		
		// Теперь заполняем текущий документ "Движение НЗП".
		Для Каждого СтрокаДокументаОтнесения Из ТекущийДокументДвижениеНЗП.Состав Цикл	
			НоваяСтрока = ТекущийДокументДвижениеНЗППеренос.Состав.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокументаОтнесения); 
		КонецЦикла;
		
		ТекущийДокументДвижениеНЗППеренос.мПроведениеОперацииИзвне = Истина;
		ТекущийДокументДвижениеНЗППеренос.Записать(РежимЗаписиДокумента.Проведение);
		
		ТекстСообщения = "Создан документ """ + ТекущийДокументДвижениеНЗППеренос + """.
		|Вид операции ""Возврат из НЗП"". Подразделение """ + ТекущийДокументДвижениеНЗППеренос.ПодразделениеОрганизации + """";
		
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Информация);
		
		Если НЕ ЗначениеЗаполнено(ТекущийДокументДвижениеНЗП.ДокументОснование) Тогда
			
			ТекущийДокументДвижениеНЗП.ДокументОснование = ТекущийДокументДвижениеНЗППеренос.Ссылка;
			ТекущийДокументДвижениеНЗП.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если НазваниеНачалаЭтапаСообщалось И  (НЕ НазваниеОкончанияЭтапаСообщалось)Тогда
		Сообщить("---Окончание переноса остатков производственных счетов на счета незавершенного производства----");
	КонецЕсли;
	
		
КонецПроцедуры

Процедура РасчетСебестоимостиПродукции(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок, Порядок)
	
	ДвижениеЗатратПоГПСписаннойВПроизводство = Ложь;
	
	Если СтруктураШапкиДокумента.РасчетСтоимостиПродукцииБУ  Тогда
		
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете = Истина;		
		СтруктураШапкиДокумента.ОтражатьВНалоговомУчете = Ложь;
		
		мОперация = мПроводкиБУ;
		СтруктураДопПараметров.Вставить("Учет", "БУ");
		СтруктураШапкиДокумента.Вставить("СписокНекорректируемойПродукции", Неопределено);
		СтруктураДопПараметров.Вставить("ВидУчетаНУ", Справочники.ВидыУчетаНУ.ПустаяСсылка());
					
		ЕстьОстаткиНЗПНаНачалоМесяца(СтруктураШапкиДокумента, Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ);
		
		СтруктураДопПараметров.Вставить("НЗП", Неопределено);
		//Распределение расходов основного и вспомогательного
		// производства на себестоимость выпущенной продукции (услуг).
		РасчетПорядкаПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров);
		
		РасчетПрямыхИКосвенныхРасходов(СтруктураШапкиДокумента,СтруктураДопПараметров);
			
		мПроводкиБУ.Записать(Ложь);	
				
		ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента, 
			СтруктураДопПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров,
			РегистрыСведений.СведенияОКорректировкиСтоимостиПродукцииИТоваров,
			"Активность,Организация,СтруктурноеПодразделение,СтруктурноеПодразделениеПолучатель, ПериодРасчета,Номенклатура,Регистратор,Номенклатура,КорректируемыйДокумент,НоменклатурнаяГруппаВыпуска, ПодразделениеВыпуска, ОперацияСписания, ОПР, СчетЗатратБУ, СтатьяЗатрат","Количество,СуммаКорректировки, Себестоимость,СуммаКорректировкиВНУ", Ложь);		
			
		ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
					СтруктураДопПараметров.ЗаписьРасчетаКосвенныхРасходов,
					РегистрыСведений.РасчетРаспределенияКосвенныхРасходов,
					"Организация,СтруктурноеПодразделение,ПериодРасчета,Активность,Регистратор,СчетУчета,Подразделение,СтатьяЗатрат,ПодразделениеРаспределения,НоменклатурнаяГруппаРаспределения,БазаРаспределения,СчетРаспределения,ВидОперации, ВидУчета,СтатьяЗатратРаспределения, СтруктурноеПодразделениеРаспределения, РасчетБазы,МетодРаспределенияКосвенныхРасходов",
					"Сумма,СуммаБазы", Ложь);

		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.РасчетСтоимостиПродукцииНУ  И СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда  		
			   			
		СтруктураШапкиДокумента.ОтражатьВНалоговомУчете = Истина;
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете = Ложь;		
		
		мОперация = мПроводкиНУ;
		СтруктураДопПараметров.Вставить("Учет", "Нал");
		СтруктураШапкиДокумента.Вставить("СписокНекорректируемойПродукции", Неопределено);
		
		
		ЕстьОстаткиНЗПНаНачалоМесяца(СтруктураШапкиДокумента, Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ);
		
		СтруктураДопПараметров.Вставить("НЗП", Неопределено); 		
		
		Если Не ПорядокПодразделенийСообщался Тогда
			РасчетПорядкаПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров);
		Иначе // если был расчет по БУ то необходимо анализировать данные по НУ 	
			АнализДанныхПроизводства(СтруктураШапкиДокумента, СтруктураДопПараметров);		
		КонецЕсли;        				
		
						
		ДвижениеЗатратПоГПСписаннойВПроизводство = Ложь;
		СтруктураШапкиДокумента.Вставить("СписокНекорректируемойПродукции", Неопределено);
		СтруктураДопПараметров.Вставить("ВидУчетаНУ", Справочники.ВидыУчетаНУ.НУ);	
		//Для корректировки по НУ, необходимо знать корректировку по БУ
		ТаблицаРасчетаСебестоимости = ПолучитьСведенияКорректировкиСписания(СтруктураДопПараметров);             									
		СтруктураДопПараметров.Вставить("ТаблицаРасчетаСебестоимости", ТаблицаРасчетаСебестоимости);				
		РасчетПрямыхИКосвенныхРасходов(СтруктураШапкиДокумента,СтруктураДопПараметров, Отказ);
		
		// НУ продукция может быть списана на ПР производство. Поэтому к моменту расчета ПР НУ переделы уже должны быть рассчитаны.
		СтруктураШапкиДокумента.Вставить("СписокНекорректируемойПродукции", Неопределено);
		ДвижениеЗатратПоГПСписаннойВПроизводство = Ложь;                                            
		СтруктураДопПараметров.Вставить("ВидУчетаНУ", Справочники.ВидыУчетаНУ.ПР); 		
		РасчетПрямыхИКосвенныхРасходов(СтруктураШапкиДокумента,СтруктураДопПараметров, Отказ);
		
		
		//Для Вида учета "ВР" будем только "распределять" суммы на затраты 		
		ДвижениеЗатратПоГПСписаннойВПроизводство = Ложь;
		СтруктураДопПараметров.Вставить("ВидУчетаНУ", Справочники.ВидыУчетаНУ.ВР);
		СтруктураШапкиДокумента.Вставить("СписокНекорректируемойПродукции", Неопределено);		
		РасчетПрямыхИКосвенныхРасходов(СтруктураШапкиДокумента,СтруктураДопПараметров, Отказ);

		мПроводкиНУ.Записать(Ложь);
		  	
		Если СтруктураДопПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Колонки.Найти("ВидУчета") = Неопределено Тогда
			СтруктураДопПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Колонки.Добавить("ВидУчета");
		КонецЕсли;
		
		ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента, 
			СтруктураДопПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров,
			РегистрыСведений.СведенияОКорректировкиСтоимостиПродукцииИТоваров,
			"Активность,Организация,СтруктурноеПодразделение,СтруктурноеПодразделениеПолучатель, ПериодРасчета,Номенклатура,Регистратор,Номенклатура,КорректируемыйДокумент,НоменклатурнаяГруппаВыпуска, ПодразделениеВыпуска, ОперацияСписания, ОПР, ВидУчета,СчетЗатратБУ, СтатьяЗатрат","Количество,СуммаКорректировки, Себестоимость,СуммаКорректировкиВНУ", Ложь);						
			
	КонецЕсли;
	
		СтруктураДопПараметров.ЗаписьРасчетаСебестоимости.Свернуть("Организация,СтруктурноеПодразделение,ПериодРасчета,Активность,Регистратор,СчетУчета,Подразделение,НоменклатурнаяГруппа,Продукция,ВидОперации,ВидУчета,СуммаПлан",
					"Сумма,СуммаНЗП");
		
		ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента, 
					СтруктураДопПараметров.ЗаписьРасчетаСебестоимости,
					РегистрыСведений.РасчетСебестоимостиПродукции,
					"Организация,СтруктурноеПодразделение,ПериодРасчета,Активность,Регистратор,СчетУчета,Подразделение,НоменклатурнаяГруппа,Продукция,ВидОперации, ВидУчета",
					"Сумма,СуммаНЗП,СуммаПлан", Ложь);
		
		ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
					СтруктураДопПараметров.ЗаписьРасчетаКосвенныхРасходов,
					РегистрыСведений.РасчетРаспределенияКосвенныхРасходов,
					"Организация,СтруктурноеПодразделение,ПериодРасчета,Активность,Регистратор,СчетУчета,Подразделение,СтатьяЗатрат,ПодразделениеРаспределения,НоменклатурнаяГруппаРаспределения,БазаРаспределения,СчетРаспределения,ВидОперации, ВидУчета,СтатьяЗатратРаспределения,СтруктурноеПодразделениеРаспределения, РасчетБазы,МетодРаспределенияКосвенныхРасходов",
					"Сумма,СуммаБазы", Ложь);
					
	Для Каждого Строка Из СтруктураДопПараметров.ЗаписьВозвратыПоПроизводству Цикл 
		
		Проводка = мПроводкиБУ.Добавить();
				   
		Проводка.Период = Строка.Период;
		Проводка.Регистратор   = Строка.Регистратор;
		Проводка.Активность    = Истина;
		Проводка.Организация   = Строка.Организация;
		Проводка.Содержание    = "Корректировка стоимости списания";
		Проводка.ВидРегламентнойОперации = Строка.ВидРегламентнойОперации;
				
		Проводка.СчетКт = Строка.СчетКт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Строка.СубконтоКт1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Строка.СубконтоКт2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Строка.СубконтоКт3);
				
		Проводка.СчетДт = Строка.СчетДт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Строка.СубконтоДт1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Строка.СубконтоДт2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Строка.СубконтоДт3);
		
		Проводка.СтруктурноеПодразделениеДт = Строка.СтруктурноеПодразделениеДт; 
		Проводка.СтруктурноеПодразделениеКт = Строка.СтруктурноеПодразделениеКт;
				
		Проводка.Сумма = Строка.Сумма;
				
	КонецЦикла;
	
	мПроводкиБУ.Записать(Ложь);
	
	СтруктураДопПараметров.ЗаписьВозвратыПоПроизводству.Очистить();   				
			
КонецПроцедуры // РасчетСебестоимостиПродукции

//Получает данные по корректировки стоимости списания БУ из регистра сведений
//"СведенияОКорректировкиСтоимостиПродукцииИТоваров"
//
Функция ПолучитьСведенияКорректировкиСписания(СтруктураДопПараметров) Экспорт
			
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СведенияОКорректировкиСтоимостиПродукцииИТоваров.Номенклатура,
	               |	СведенияОКорректировкиСтоимостиПродукцииИТоваров.КорректируемыйДокумент,
	               |	ЕСТЬNULL(СведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировки, 0) КАК СуммаКорректировки,
	               |	ЕСТЬNULL(СведенияОКорректировкиСтоимостиПродукцииИТоваров.Количество, 0) КАК Количество,
	               |	ЕСТЬNULL(СведенияОКорректировкиСтоимостиПродукцииИТоваров.Себестоимость, 0) КАК Себестоимость,
	               |	ЕСТЬNULL(СведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировкиВНУ, 0) КАК СуммаКорректировкиВНУ,
	               |	СведенияОКорректировкиСтоимостиПродукцииИТоваров.ПодразделениеВыпуска,
	               |	СведенияОКорректировкиСтоимостиПродукцииИТоваров.НоменклатурнаяГруппаВыпуска,
	               |	СведенияОКорректировкиСтоимостиПродукцииИТоваров.СтруктурноеПодразделение,
	               |	СведенияОКорректировкиСтоимостиПродукцииИТоваров.СтруктурноеПодразделениеПолучатель,
	               |	СведенияОКорректировкиСтоимостиПродукцииИТоваров.ОперацияСписания,
	               |	СведенияОКорректировкиСтоимостиПродукцииИТоваров.ОПР,
	               |	СведенияОКорректировкиСтоимостиПродукцииИТоваров.СчетЗатратБУ,
	               |	СведенияОКорректировкиСтоимостиПродукцииИТоваров.СтатьяЗатрат
	               |ИЗ
	               |	РегистрСведений.СведенияОКорректировкиСтоимостиПродукцииИТоваров КАК СведенияОКорректировкиСтоимостиПродукцииИТоваров
	               |ГДЕ
	               |	СведенияОКорректировкиСтоимостиПродукцииИТоваров.Организация = &Организация
	               |	И НАЧАЛОПЕРИОДА(СведенияОКорректировкиСтоимостиПродукцииИТоваров.ПериодРасчета, МЕСЯЦ) = &ПериодРасчета
	               |	И СведенияОКорректировкиСтоимостиПродукцииИТоваров.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца" ;	  
				   
   Запрос.УстановитьПараметр("Организация", Организация);
   Запрос.УстановитьПараметр("ПериодРасчета", НачалоМесяца(Дата));
   
   ТаблицаДанных = Запрос.Выполнить().Выгрузить();
   
   //Нам необходимо знать регистраторы корректировок, чтобы их сразу отсечь при выборке
   СтруктураДопПараметров.Вставить("СписокКорректируемыхДокументов",ТаблицаДанных.ВыгрузитьКолонку("КорректируемыйДокумент"));   
   ТаблицаДанных.Свернуть("Номенклатура,СтруктурноеПодразделение,СтруктурноеПодразделениеПолучатель, ПодразделениеВыпуска,НоменклатурнаяГруппаВыпуска, ОперацияСписания, ОПР, КорректируемыйДокумент,СчетЗатратБУ, СтатьяЗатрат", "СуммаКорректировки, Количество,Себестоимость, СуммаКорректировкиВНУ");
   
   //// добавляем колонку признака корректировки по НУ
   //ТаблицаДанных.Колонки.Добавить("СуммаКорректировкиВНУ", Новый ОписаниеТипов("Число"));
   
   Возврат ТаблицаДанных;   
КонецФункции

 ////////////////////////////////////////////////////////////////////////////////
//// ЗАЧЕТ ПО НАЛОГУ НА ДОБАВЛЕННУЮ СТОИМОСТЬ

// Процедура закрывает задолженность по НДС, отнесенную на конкретные СП, на 
// задолженность Организации - Плательщика НДС
Процедура ЗакрытьСуммыНДССтруктурныхПодразделений(СтруктураШапкиДокумента, Отказ)
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		// Получим список Организаций, Налогоплательщиком для которых является наша организация
		СписокСтруктурныхЕдиниц = ПроцедурыНалоговогоУчета.СформироватьСписокОрганизацийНалогоплательщика(СтруктураШапкиДокумента.Организация, Перечисления.РазделыНалоговогоУчета.НДС)
	Иначе
		СписокСтруктурныхЕдиниц = Новый СписокЗначений;
		СписокСтруктурныхЕдиниц.Добавить(Организация);		
	КонецЕсли;
	СписокСчетовНДС = Новый СписокЗначений();
	СписокСчетовНДС.Добавить(ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость);
	СписокСчетовНДС.Добавить(ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению);
	
	ГоловноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ГоловноеСтруктурноеПодразделение", ГоловноеПодразделение);
	Запрос.УстановитьПараметр("СписокСтруктурныхЕдиниц", СписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("СчетаНДС", СписокСчетовНДС);
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(мКонДата, ВидГраницы.Включая));	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТиповойОстатки.Счет,
	               |	ТиповойОстатки.Субконто1,
	               |	ТиповойОстатки.Субконто2,
	               |	ТиповойОстатки.Субконто3,
	               |	ТиповойОстатки.Организация,
	               |	ТиповойОстатки.СтруктурноеПодразделение,
	               |	ТиповойОстатки.СуммаОстаток,
	               |	ВЫБОР
	               |		КОГДА ТиповойОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению))
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ДтПроводка,
	               |	ТиповойОстатки.Счет.СчетНУ КАК СчетНУ
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(
	               |			&ДатаКон,
	               |			Счет В ИЕРАРХИИ (&СчетаНДС),
	               |			,
	               |			Организация В (&СписокСтруктурныхЕдиниц)
	               |				И СтруктурноеПодразделение <> &ГоловноеСтруктурноеПодразделение) КАК ТиповойОстатки";
						  
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
		
				ПроводкаБУ = мПроводкиБУ.Добавить();
				ПроводкаБУ.Период                   = Дата;				
				ПроводкаБУ.СчетДт                   = Выборка.Счет;							
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 1, Выборка.Субконто1);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 2, Выборка.Субконто2);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 3, Выборка.Субконто3);			
								
				ПроводкаБУ.СчетКт                   = Выборка.Счет;			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт,ПроводкаБУ.СубконтоКт, 1, Выборка.Субконто1);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт,ПроводкаБУ.СубконтоКт, 2, Выборка.Субконто2);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт,ПроводкаБУ.СубконтоКт, 3, Выборка.Субконто3);			
				
			
				ПроводкаБУ.Содержание               = "Перенос начисленных сумм НДС на головное предприятие";				
				ПроводкаБУ.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету;	
				// По 1420 проводка в Дт 1420 головного подразделения НП
				Если Выборка.ДтПроводка = 1 Тогда
					ПроводкаБУ.Сумма                    = Выборка.СуммаОстаток;
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаБУ, ГоловноеПодразделение,
															Выборка.СтруктурноеПодразделение);			
				Иначе											
					ПроводкаБУ.Сумма                    = -Выборка.СуммаОстаток;
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаБУ, Выборка.СтруктурноеПодразделение,
															ГоловноеПодразделение);
				КонецЕсли;				
				
				ПроводкаБУ.Организация              = Выборка.Организация;				
				
				// по налоговому учету
				Если СтруктураШапкиДокумента.УчитыватьКПН И СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
					// трансляция счетов
					
					Если НЕ ЗначениеЗаполнено(Выборка.СчетНУ) Тогда
						ТекстСообщения = "Для счета " + Выборка.Счет.Код + " не указан соответствующий ему счет налогового учета.";			
						ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , Отказ, ЭтотОбъект , Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету);						
						Продолжить;
					КонецЕсли;
										
					ПроводкаНУ	= мПроводкиНУ.Добавить();					
					ПроводкаНУ.Период                   = Дата;
					ПроводкаНУ.Организация              = СтруктураШапкиДокумента.Организация;				
					ПроводкаНУ.СчетДт                   = Выборка.СчетНУ;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);			
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, Выборка.Субконто2);			
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, Выборка.Субконто3);			
					
					ПроводкаНУ.СчетКт                   = Выборка.СчетНУ;			
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);			
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 2, Выборка.Субконто2);			
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 3, Выборка.Субконто3);			
					
					
					ПроводкаНУ.Содержание               = "Перенос начисленных сумм НДС на головное предприятие";				
					ПроводкаНУ.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету;	
					// По 1420 проводка в Дт 1420 головного подразделения НП
					Если Выборка.ДтПроводка = 1 Тогда
						ПроводкаНУ.Сумма                    = Выборка.СуммаОстаток;
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, ГоловноеПодразделение,
																Выборка.СтруктурноеПодразделение);			
					Иначе											
						ПроводкаНУ.Сумма                    = -Выборка.СуммаОстаток;
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Выборка.СтруктурноеПодразделение,
						ГоловноеПодразделение);
					КонецЕсли;				
					ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.НУ;
					ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.НУ;
				КонецЕсли;
			КонецЦикла;
		мПроводкиБУ.Записать(Ложь);
	КонецЕсли;	
	
КонецПроцедуры // ЗакрытьСуммыНДССтруктурныхПодразделений(СтруктураШапкиДокумента)

// Функция возвращает долю облагаемого оборота в общем обороте по реализации,
// рассчитываемую как отношение облагаемых оборотов к общим оборотам
Функция ПолучитьДолюОблагаемогоОборота(СтруктураШапкиДокумента, ДатаНачалаПериода)
	
	// Долю облагаемого оборота рассчитываем как 	
	// отношение (Облагаемого оборота по реализации с учетом корректировок, к общему обороту по реализации)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА (НЕ НДСОбороты.СтавкаНДС.ДляОсвобожденногоОборота И НЕ НДСОбороты.СтавкаНДС.МестоРеализацииНеРК)
	               |			ТОГДА ЕСТЬNULL(НДСОбороты.ОборотПоРеализацииОборот, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ОблагаемыйОборот,
	               |	НДСОбороты.ОборотПоРеализацииОборот КАК ОбщийОборотПоРеализации
	               |ИЗ
	               |	РегистрНакопления.НДС.Обороты(
	               |			&ДатаНачала,
	               |			&ДатаОкончания,
	               |			,
	               |			Налогоплательщик = &Налогоплательщик	               
				   |				И (НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСМетодомЗачета))
	               |				И (НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт))) КАК НДСОбороты	               
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
				   |	ВЫБОР
	               |		КОГДА (НЕ КорректировкаНДСОбороты.СтавкаНДС.ДляОсвобожденногоОборота И НЕ КорректировкаНДСОбороты.СтавкаНДС.МестоРеализацииНеРК)
	               |			ТОГДА ЕСТЬNULL(КорректировкаНДСОбороты.СуммаКорректировкиОборотаОборот, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ, 	               
	               |	ЕСТЬNULL(КорректировкаНДСОбороты.СуммаКорректировкиОборотаОборот, 0)
	               |ИЗ
	               |	РегистрНакопления.КорректировкаНДС.Обороты(
	               |			&ДатаНачала,
	               |			&ДатаОкончания,
	               |			,
	               |			Налогоплательщик = &Налогоплательщик	               
				   |				И (НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСМетодомЗачета))
	               |				И (НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт))) КАК КорректировкаНДСОбороты
	               |ИТОГИ
	               |	СУММА(ОблагаемыйОборот),
	               |	СУММА(ОбщийОборотПоРеализации)
	               |ПО
	               |	ОБЩИЕ";
	
	Запрос.УстановитьПараметр("ДатаНачала", 		ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", 		мКонДата);
	Запрос.УстановитьПараметр("Налогоплательщик", 	СтруктураШапкиДокумента.Организация);
	
	ДоляОблагаемогоОборота = 1;
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДоляОблагаемогоОборота = ?(Выборка.ОбщийОборотПоРеализации <>0, Выборка.ОблагаемыйОборот/Выборка.ОбщийОборотПоРеализации,1);
		ТекстКомментарияРасчета = "Зачет по НДС. Доля облагаемого оборота в общем обороте: " + СокрЛП(Окр(ДоляОблагаемогоОборота,2)) + "		
								|				Облагаемый оборот по реализации = " +  СокрЛП(Выборка.ОблагаемыйОборот) + "
								|				Общий оборот по реализации =  " + СокрЛП(Выборка.ОбщийОборотПоРеализации);	
								
		ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстКомментарияРасчета, , , ЭтотОбъект , Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету, Ложь);	
	КонецЕсли;
	
	Возврат ДоляОблагаемогоОборота;

КонецФункции // ПолучитьДолюОблагаемогоОборота

// Процедура формирует записи в регистре НДСВзаиморасчетыСбюджетом
// для учете переносимых зачетов по НДС.
// Сумма текущего движения определяется как разница между текущим остатком и рассчитанной суммой переносимого зачета на конец отчетного периода
Процедура СформироватьДвиженияПоНДСВзаиморасчетыСБюджетом(СтруктураШапкиДокумента, ОбщаяСуммаНДСРазрешенногоКЗачету, ПереносимыйЗачетПрошлогоПериода, СуммаНДСНачисленногоЗаПериод, Отказ, Заголовок)
	
	ЗачетПереносимыйНаСледующийПериод = Макс(0, ОбщаяСуммаНДСРазрешенногоКЗачету - СуммаНДСНачисленногоЗаПериод);
	
	КПроводке = Окр(ЗачетПереносимыйНаСледующийПериод - ПереносимыйЗачетПрошлогоПериода, 2);
	
	Если КПроводке = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Движение = Движения.НДСВзаиморасчетыСБюджетом.Добавить();
	
	Движение.Период 				= СтруктураШапкиДокумента.Дата;
	Движение.ВидДвижения 			= ВидДвиженияНакопления.Приход;
	
	Движение.Налогоплательщик		= СтруктураШапкиДокумента.Организация;		
	
	Движение.СуммаНДС				= КПроводке;
	Движение.СпособПогашения		= Перечисления.ВидыВзаиморасчетовСБюджетом.Зачет;
	Движение.Организация			= СтруктураШапкиДокумента.Организация;	
	Движение.СтруктурнаяЕдиница		= СтруктураШапкиДокумента.Организация;	
	
	Если КПроводке > 0 Тогда		
		ТекстСообщения = "-------------------------------------------------------------------------------------
						|Зачет по НДС. Сумма НДС, переносимая в счет предстоящий платежей (переносимый зачет) = " + КПроводке;
						
		ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , ЭтотОбъект , Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету, Ложь);        		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоНДСВзаиморасчетыСБюджетом()

// Взаимозачет с бюджетом по НДС, с измененным сроком уплаты
//
Процедура СформироватьДвиженияПоНДССИзмененнымСрокомУплаты(СтруктураШапкиДокумента, знач СуммаНДСРазрешенногоКЗачету, Отказ, Заголовок)
	
	// отсутствует сумма к распределению
	Если СуммаНДСРазрешенногоКЗачету = 0 ТОгда
		Возврат;		
	КонецЕсли;			
		
	ЗапросПоОтсроченномуНДС = Новый Запрос;
	ЗапросПоОтсроченномуНДС.Текст = "ВЫБРАТЬ
	                                |	НДССИзмененнымСрокомУплатыОстатки.ВидОперацииПоступления,
	                                |	НДССИзмененнымСрокомУплатыОстатки.ВидНалогаНДС,
	                                |	НДССИзмененнымСрокомУплатыОстатки.ГТД,
	                                |	НДССИзмененнымСрокомУплатыОстатки.СрокПлатежа КАК СрокПлатежа,
	                                |	ЕСТЬNULL(НДССИзмененнымСрокомУплатыОстатки.СуммаНДСОстаток, 0) КАК СуммаНДСОстаток,
	                                |	НДССИзмененнымСрокомУплатыОстатки.Контрагент,
	                                |	НДССИзмененнымСрокомУплатыОстатки.Договор,
	                                |	НДССИзмененнымСрокомУплатыОстатки.СчетУчетаРасчетовСКонтрагентом,
	                                |	НДССИзмененнымСрокомУплатыОстатки.СчетУчетаНДС
	                                |ИЗ
	                                |	РегистрНакопления.НДССИзмененнымСрокомУплаты.Остатки(&Дата, Налогоплательщик = &Налогоплательщик) КАК НДССИзмененнымСрокомУплатыОстатки
	                                |ГДЕ
	                                |	НДССИзмененнымСрокомУплатыОстатки.СуммаНДСОстаток > 0
	                                |
	                                |УПОРЯДОЧИТЬ ПО
	                                |	СрокПлатежа
	                                |ИТОГИ
	                                |	СУММА(СуммаНДСОстаток)
	                                |ПО
	                                |	ОБЩИЕ";
									
	ЗапросПоОтСроченномуНДС.УстановитьПараметр("Дата", 				мКонДата);								
	ЗапросПоОтСроченномуНДС.УстановитьПараметр("Налогоплательщик", 	СтруктураШапкиДокумента.Организация);
	
	Результат = ЗапросПоОтСроченномуНДС.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	СуммаНДСКРаспределению = Выборка.СуммаНДСОстаток;	
	
	// для сообщения пользователю
	ТекстКомментарияРасчета = "Зачет по НДС. Существует непогашенная задолженность по НДС, с измененным сроком уплаты на сумму " + СуммаНДСКРаспределению + "
	|Выполнен взаимозачет с бюджетом по НДС, с измененным сроком уплаты на сумму " + Мин(СуммаНДСКРаспределению, СуммаНДСРазрешенногоКЗачету);
	
	ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстКомментарияРасчета, , , ЭтотОбъект , Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету, Ложь);	
	
	Пока Выборка.Следующий() и (СуммаНДСРазрешенногоКЗачету > 0) Цикл
		
		СуммаЗачета = Мин(СуммаНДСРазрешенногоКЗачету, Выборка.СуммаНДСОстаток);
		СуммаНДСРазрешенногоКЗачету = СуммаНДСРазрешенногоКЗачету - СуммаЗачета;
		
		Если СуммаЗачета = 0 тогда
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.НДССИзмененнымСрокомУплаты.Добавить();
		Движение.Период 				= СтруктураШапкиДокумента.Дата;
		Движение.Налогоплательщик		= СтруктураШапкиДокумента.Организация;
		Движение.ВидДвижения 			= ВидДвиженияНакопления.Расход;
		Движение.ВидНалогаНДС 			= Выборка.ВидНалогаНДС;
		Движение.ВидОперацииПоступления = Выборка.ВидОперацииПоступления;
		Движение.ГТД 					= Выборка.ГТД;
		Движение.Контрагент 			= Выборка.Контрагент;
		Движение.Договор 				= Выборка.Договор;
		Движение.СчетУчетаНДС			= Выборка.СчетУчетаНДС;
		Движение.СчетУчетаРасчетовСКонтрагентом = Выборка.СчетУчетаРасчетовСКонтрагентом;		
	
		Движение.СуммаНДС				= СуммаЗачета;
		Движение.СрокПлатежа			= Выборка.СрокПлатежа;
		Движение.СпособПогашения 		= Перечисления.ВидыВзаиморасчетовСБюджетом.Зачет;		
		Движение.Организация			= СтруктураШапкиДокумента.Организация;
		Движение.СтруктурнаяЕдиница		= СтруктураШапкиДокумента.Организация;
	
		
		// по бух. учету		
		Проводка 						  = мПроводкиБУ.Добавить();
		Проводка.Период                   = СтруктураШапкиДокумента.Дата;
		Проводка.Организация              = СтруктураШапкиДокумента.Организация;				
		Проводка.СчетДт                   = Выборка.СчетУчетаРасчетовСКонтрагентом;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Выборка.Контрагент);			
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	Выборка.Договор);			
		
		Проводка.СчетКт                   = Выборка.СчетУчетаНДС;				
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
		
		Проводка.Сумма                    = СуммаЗачета;
		Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету;
		
		// расчеты по НДС с измененным сроком уплаты могут вестись только
		// в валюте рег. учета.
		
		Если Проводка.СчетДт.Валютный Тогда				
			Проводка.ВалютаДт        = мВалютаРегламентированногоУчета;
			Проводка.ВалютнаяСуммаДт = СуммаЗачета;				
		КонецЕсли;

		Проводка.Содержание               = "Взаимозачет с бюджетом по НДС, с измененным сроком уплаты";
		Проводка.НомерЖурнала             = "НУ";	
	КонецЦикла;										
КонецПроцедуры // СформироватьДвиженияПоНДССИзмененнымСрокомУплаты()

// Процедура формирует бухгалтерские корреспонденции по списанию на затраты суммы НДС,не разрешенной к зачету
//
Процедура СформироватьДвиженияПоНДСНеРазрешенномуВЗачет(СтруктураШапкиДокумента,СуммаНДСНеРазрешенногоКЗачету, ТаблицаРаспределенияНДСКВозмещению, Отказ, Заголовок)
	
	Если ТаблицаРаспределенияНДСКВозмещению.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	ОбщаяСуммаЗачета = ТаблицаРаспределенияНДСКВозмещению.Итог("СуммаНДСКВозмещению");
	
	Если ОбщаяСуммаЗачета = 0 Тогда
		Возврат;
	КонецЕсли;      
	
	ПроцентРаспределения = СуммаНДСНеРазрешенногоКЗачету/ТаблицаРаспределенияНДСКВозмещению.Итог("СуммаНДСКВозмещению");
	
	Для Каждого СтрокаТаблицыНДСКВозмещению из ТаблицаРаспределенияНДСКВозмещению Цикл 
		
		СуммаКСписанию = Окр(СтрокаТаблицыНДСКВозмещению.СуммаНДСКВозмещению*ПроцентРаспределения,2);
		
		Если Не СуммаКСписанию = 0 Тогда
			
			// найдем подразделение для регл. операций, чтобы подставить в качестве соотв. субконто
			ПодразделениеДляРеглОпераций = ПроцедурыБухгалтерскогоУчета.ПолучитьПодразделениеДляРеглОпераций(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
			
			// если получили отказ, тогда дальше не идем
			Если Отказ Тогда
				Возврат;
			КонецЕсли;	
			
			Проводка = мПроводкиБУ.Добавить();
			Проводка.Период                   = Дата;
			Проводка.Организация              = СтруктураШапкиДокумента.Организация;				
			Проводка.СчетДт                   = ПланыСчетов.Типовой.АдминистративныеРасходы;			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", Справочники.СтатьиЗатрат.НДСНеПринятыйКЗачету);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", ПодразделениеДляРеглОпераций);			
			
			Проводка.СчетКт                   = СтрокаТаблицыНДСКВозмещению.Счет;				
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
			Проводка.Сумма                    = СуммаКСписанию;
			Проводка.Содержание               = "Отнесение на затраты суммы НДС, не разрешенного к зачету";
			Проводка.НомерЖурнала             = "НУ";	
			Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету;
			
			
			// по налоговому учету
			Если СтруктураШапкиДокумента.УчитыватьКПН Тогда
				
				СчетДтНУ = 	ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ПланыСчетов.Типовой.АдминистративныеРасходы));
				СчетКтНУ = 	ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицыНДСКВозмещению.Счет));

				ПроводкаНУ	= мПроводкиНУ.Добавить();
				
				ПроводкаНУ.Период                   = Дата;
				ПроводкаНУ.Организация              = СтруктураШапкиДокумента.Организация;				
				ПроводкаНУ.СчетДт                     = ?(ЗначениеЗаполнено(СчетДтНУ),СчетДтНУ,ПланыСчетов.Налоговый.ПрочиеРасходы);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "СтатьиЗатрат", Справочники.СтатьиЗатрат.НДСНеПринятыйКЗачету);			
				ПроводкаНУ.ВидУчетаДт 				= ?(Справочники.СтатьиЗатрат.НДСНеПринятыйКЗачету.ПринятиеКНалоговомуУчету = Истина, Справочники.ВидыУчетаНУ.НУ, Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ);

				
				ПроводкаНУ.СчетКт                     = ?(ЗначениеЗаполнено(СчетКтНУ), СчетКтНУ,ПланыСчетов.Налоговый.ПрочиеНалоги);				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				ПроводкаНУ.ВидУчетаКт 				= ПроводкаНУ.ВидУчетаДт;
				
				ПроводкаНУ.Сумма                    = СуммаКСписанию;
				ПроводкаНУ.Содержание               = "Отнесение на затраты суммы НДС, не разрешенного к зачету";
				ПроводкаНУ.НомерЖурнала             = "НУ";	
				ПроводкаНУ.ВидРегламентнойОперации    = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;	
	
	мПроводкиБУ.Записать(Ложь);
	мПроводкиНУ.Записать(Ложь);
КонецПроцедуры // СформироватьДвиженияПоНДСНеРазрешенномуВЗачет()

// Процедура формирует бухгалтерские корреспонденции по зачету НДС
//
Процедура СформироватьДвиженияПоЗачетуНДС(СтруктураШапкиДокумента,СуммаНДСКЗачету, ТаблицаРаспределенияНДСКВозмещению, ТаблицаРаспределенияНДС, Отказ, Заголовок);
	
	Если ТаблицаРаспределенияНДСКВозмещению.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	ОбщаяСуммаЗачета = ТаблицаРаспределенияНДСКВозмещению.Итог("СуммаНДСКВозмещению");
	
	Если ОбщаяСуммаЗачета = 0 Тогда
		Возврат;
	КонецЕсли;      		
	
	Для каждого СтрокаТаблицыНДСКВозмещению из ТаблицаРаспределенияНДСКВозмещению Цикл 
		ПроцентРаспределения = СтрокаТаблицыНДСКВозмещению.СуммаНДСКВозмещению/ОбщаяСуммаЗачета;
		СуммаЗачетаПоСчетуВозмещения = Окр(СуммаНДСКЗачету * ПроцентРаспределения,2);
		
		// распределяем по счетам НДС начисленного		
		Для каждого СтрокаТаблицыНДС из ТаблицаРаспределенияНДС Цикл 
			
			СуммаЗачета	 					= Мин(СтрокаТаблицыНДС.Сумма, СуммаЗачетаПоСчетуВозмещения);
			СуммаЗачетаПоСчетуВозмещения 	= Окр(СуммаЗачетаПоСчетуВозмещения - СуммаЗачета, 2);
			
			Если Не СуммаЗачета = 0 Тогда
				Проводка = мПроводкиБУ.Добавить();
				Проводка.Период                = Дата;
				Проводка.Организация           = СтруктураШапкиДокумента.Организация;				
				Проводка.СчетДт                = СтрокаТаблицыНДС.Счет;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);	
				
				Проводка.СчетКт                = СтрокаТаблицыНДСКВозмещению.Счет;				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
				Проводка.Сумма                    = СуммаЗачета;
				Проводка.Содержание               = "Зачет по НДС";
				Проводка.НомерЖурнала          	  = "НУ";
				Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету;
				                      				
				СтрокаТаблицыНДС.Сумма 		   = СтрокаТаблицыНДС.Сумма - СуммаЗачета;
				
				// по налоговому учету
				Если СтруктураШапкиДокумента.УчитыватьКПН И СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
					// трансляция счетов
					СчетНДСНУ			 = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицыНДС.Счет));
					СчетНДСКВозмещениюНУ = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицыНДСКВозмещению.Счет));					
					Если НЕ ЗначениеЗаполнено(СчетНДСНУ) Тогда
						ТекстСообщения = "Для счета " + СтрокаТаблицыНДС.Счет.Код + " не не указан соответствующий ему счет налогового учета.";			
						ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , Отказ, ЭтотОбъект , Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету);
						
						Продолжить;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СчетНДСКВозмещениюНУ) Тогда
						ТекстСообщения = "Для счета " + СтрокаТаблицыНДСКВозмещению.Счет.Код + " не не указан соответствующий ему счет налогового учета.";			
						ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , Отказ, ЭтотОбъект , Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету);
						
						Продолжить;
					КонецЕсли;
					
					ПроводкаНУ	= мПроводкиНУ.Добавить();					
					ПроводкаНУ.Период                   = Дата;
					ПроводкаНУ.Организация              = СтруктураШапкиДокумента.Организация;				
					ПроводкаНУ.СчетДт                   = СчетНДСНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);	
					
					
					ПроводкаНУ.ВидУчетаДт 				= Справочники.ВидыУчетаНУ.НУ;
										
					ПроводкаНУ.СчетКт                   = СчетНДСКВозмещениюНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт,"НалогиСборыОтчисления", 		Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт,"ВидыПлатежейВБюджетИФонды", 	Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
					ПроводкаНУ.ВидУчетаКт 				= ПроводкаНУ.ВидУчетаДт;
					
					ПроводкаНУ.Сумма                    = СуммаЗачета;
					ПроводкаНУ.Содержание               = "Зачет по НДС";
					ПроводкаНУ.НомерЖурнала             = "НУ";	
					ПроводкаНУ.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету;
									
				КонецЕсли;			

			КонецЕсли;	
		КонецЦикла;			
		
		Если СуммаЗачетаПоСчетуВозмещения <> 0 Тогда
			
			ТекстСообщения = "По счету " + СтрокаТаблицыНДСКВозмещению.Счет.Код + " не распределена сумма зачета по НДС в размере " + СокрЛП(СуммаЗачетаПоСчетуВозмещения);
			
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , ЭтотОбъект , Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету);
			
		КонецЕсли;	
	КонецЦикла;
	
	мПроводкиБУ.Записать(Ложь);
	мПроводкиНУ.Записать(Ложь);
КонецПроцедуры // СформироватьДвиженияПоЗачетуНДС()

// Процедура выполняет зачет НДС к возмещению
//
Процедура ВыполнитьЗачетПоНДС(СтруктураШапкиДокумента, Отказ, Заголовок)
	 
		Если Не СтруктураШапкиДокумента.РасчетНДСКЗачету Тогда
		Возврат;					
	КонецЕсли;
		
	Если УчетНДСИАкциза.ПолучитьПериодОтнесенияНДСВЗачет(СтруктураШапкиДокумента.Организация, Дата) = Перечисления.Периодичность.Месяц ТОгда
		ДатаНачалаПериодаЗачета = НачалоМесяца(Дата);
	Иначе
		ДатаНачалаПериодаЗачета = НачалоКвартала(Дата);
	КонецЕсли;	
	
	// Если ведется учет по СП, перед зачетом необхоимо закрыть суммы, разнесенные по СП
	ЗакрытьСуммыНДССтруктурныхПодразделений(СтруктураШапкиДокумента, Отказ);
	
	ДоляОблагаемогоОборота 	= ПолучитьДолюОблагаемогоОборота(СтруктураШапкиДокумента, ДатаНачалаПериодаЗачета);
	МетодОтнесенияНДСВЗачет = УчетНДСИАкциза.ПолучитьМетодОтнесенияНДСВЗачет(СтруктураШапкиДокумента.Организация, Дата);
	
	
	// Начисленный НДС за период
	ЗапросПоНДС = Новый Запрос;
	ЗапросПоНДС.Текст = "ВЫБРАТЬ
	//НДС, начисленный за период
	|	ЕСТЬNULL(НДСОбороты.СуммаНДСОборот, 0) КАК НачисленныйНДС,
	|	ВЫБОР КОГДА ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСМетодомЗачета) ТОГДА НДСОбороты.СуммаНДСОборот ИНАЧЕ 0 КОНЕЦ КАК НачисленныйНДСМетодаЗачета,
	|	0 КАК ПереносимыйЗачет
	|ИЗ
	|	РегистрНакопления.НДС.Обороты(&ДатаНачала, &ДатаОкончания, ,Налогоплательщик = &Организация И (НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт))) КАК НДСОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	//Корректировка НДС, за период							
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КорректировкаНДСОбороты.СуммаНДСОборот, 0),
	|	ВЫБОР КОГДА ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСМетодомЗачета) ТОГДА КорректировкаНДСОбороты.СуммаНДСОборот ИНАЧЕ 0 КОНЕЦ КАК НачисленныйНДСМетодаЗачета,
	|	0
	|ИЗ
	|	РегистрНакопления.КорректировкаНДС.Обороты(&ДатаНачала, &ДатаОкончания, , Налогоплательщик = &Организация И (НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт)))  КАК КорректировкаНДСОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	//Сальдо на начало периода по зачету НДС, переносимому из предыдущих периодов	
	|
	|ВЫБРАТЬ
	|0,	
	|0,	
	|ЕСТЬNULL(НДСВзаиморасчетыСБюджетомОстатки.СуммаНДСОстаток,0)
	|ИЗ
	|	РегистрНакопления.НДСВзаиморасчетыСБюджетом.Остатки(&ДатаНачала, Налогоплательщик = &Организация) КАК НДСВзаиморасчетыСБюджетомОстатки
	|ИТОГИ
	|	СУММА(НачисленныйНДС),
	|	СУММА(НачисленныйНДСМетодаЗачета),
	|	СУММА(ПереносимыйЗачет)
	|ПО
	|	ОБЩИЕ";
	ЗапросПоНДС.УстановитьПараметр("ДатаНачала", 		ДатаНачалаПериодаЗачета);
	ЗапросПоНДС.УстановитьПараметр("ДатаОкончания", 	мКонДата);
	ЗапросПоНДС.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);	
	ЗапросПоНДС.УстановитьПараметр("СчетНДСКВозмещению",ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению);
	
	ВыборкаПоНДС = ЗапросПоНДС.Выполнить().Выбрать();
	ВыборкаПоНДС.Следующий();
	
	НДСНачисленныйЗаПериод 				= ВыборкаПоНДС.НачисленныйНДС;
	НДСНачисленныйЗаПериодМетодаЗачета 	= ВыборкаПоНДС.НачисленныйНДСМетодаЗачета;
	ПереносимыйЗачетПоНДС 				= ВыборкаПоНДС.ПереносимыйЗачет;
		
	ЗапросПоНДСКВозмещению = Новый Запрос;
	ЗапросПоНДСКВозмещению .Текст = "ВЫБРАТЬ
	|	ВложенныйЗапрос.ВидОборота,
	|	ВложенныйЗапрос.ВидНалогаНДС,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.НДСКВозмещению, 0)) КАК СуммаНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДСКВозмещениюОбороты.ВидОборота КАК ВидОборота,
	|		НДСКВозмещениюОбороты.ВидНалогаНДС КАК ВидНалогаНДС,
	|		ЕСТЬNULL(НДСКВозмещениюОбороты.СуммаНДСОборот, 0) КАК НДСКВозмещению
	|	ИЗ
	|		РегистрНакопления.НДСКВозмещению.Обороты(&ДатаНачала,&ДатаОкончания,,Налогоплательщик = &Организация И (НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт)) ) КАК НДСКВозмещениюОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КорректировкаНДСКВозмещениюОбороты.ВидОборота,
	|		КорректировкаНДСКВозмещениюОбороты.ВидНалогаНДС,
	|		КорректировкаНДСКВозмещениюОбороты.СуммаНДСОборот
	|	ИЗ
	|		РегистрНакопления.КорректировкаНДСКВозмещению.Обороты(&ДатаНачала, &ДатаОкончания, , Налогоплательщик = &Организация И (НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт)) ) КАК КорректировкаНДСКВозмещениюОбороты) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ВидОборота,
	|	ВложенныйЗапрос.ВидНалогаНДС";
	
	ЗапросПоНДСКВозмещению.УстановитьПараметр("ДатаНачала", 		ДатаНачалаПериодаЗачета);
	ЗапросПоНДСКВозмещению.УстановитьПараметр("ДатаОкончания", 		мКонДата);
	ЗапросПоНДСКВозмещению.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
	
	Выборка = ЗапросПоНДСКВозмещению .Выполнить().Выбрать();
	СуммаНДСРазрешенногоКЗачету 	= 0;
	СуммаНДСНеРазрешенногоКЗачету 	= 0;
	
	Пока Выборка.Следующий() Цикл					
		
		ДоляОтнесения = ДоляОблагаемогоОборота;
		Если МетодОтнесенияНДСВЗачет = Перечисления.МетодыОтнесенияНДСВЗачет.Раздельный Тогда
			Если Выборка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Облагаемый Тогда
				ДоляОтнесения = 1;
			ИначеЕсли Выборка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Освобожденный Тогда	
				ДоляОтнесения = 0;
			КонецЕсли;
		КонецЕсли;          
		// с 01.01.2012 в форме 300.00 НДС методом зачета прибавляется к сумме зачета ПОСЛЕ применения удельного веса, т.е. не участвует в зачете  по удельному весу
		// принимаем в зачет в полном объеме
		Если Дата >= Дата(2012,1,1) И Выборка.ВидНалогаНДС = Перечисления.ВидыНДС.НДСМетодомЗачета Тогда
			ДоляОтнесения = 1;			
		КонецЕсли;	
	
		КЗачетуПоВидуОборота = Окр(Выборка.СуммаНДС * ДоляОтнесения, 2);
		СуммаНДСРазрешенногоКЗачету = СуммаНДСРазрешенногоКЗачету + КЗачетуПоВидуОборота;
		СуммаНДСНеРазрешенногоКЗачету = СуммаНДСНеРазрешенногоКЗачету + Выборка.СуммаНДС - КЗачетуПоВидуОборота;			
	КонецЦикла;		
	
	ОбщаяСуммаНДСРазрешенногоКЗачету = СуммаНДСРазрешенногоКЗачету + ПереносимыйЗачетПоНДС;
	ОбщаяСуммаНДС   = СуммаНДСРазрешенногоКЗачету + СуммаНДСНеРазрешенногоКЗачету; // для сверки итога расчета с 1420
	
	
	ТекстСообщения = "-------------------------------------------------------------------------------------	
	|Зачет по НДС. Итого сумма НДС принятого в зачет: " + ОбщаяСуммаНДС + "
	|Зачет по НДС. Сумма НДС, разрешенного к зачету:
	|				за отчетный период                  = " + СуммаНДСРазрешенногоКЗачету + "
	|				с учетом переносимого зачета 		= " + ОбщаяСуммаНДСРазрешенногоКЗачету + "	
	|Зачет по НДС. Сумма НДС, не разрешенного к зачету	= " + СуммаНДСНеРазрешенногоКЗачету + "	
	|Зачет по НДС. НДС, начисленный за период			= " + НДСНачисленныйЗаПериод + "
	|				в том числе методом зачета 			= " + НДСНачисленныйЗаПериодМетодаЗачета + "		
	|Зачет по НДС. Произведен зачет по НДС в сумме		= " + Мин(ОбщаяСуммаНДСРазрешенногоКЗачету, НДСНачисленныйЗаПериод);
		
	ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , ЭтотОбъект , Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету, Ложь);	
	// выполняем взаиморасчеты по  НДС, с измененным сроком уплаты	
	СформироватьДвиженияПоНДССИзмененнымСрокомУплаты(СтруктураШапкиДокумента, НДСНачисленныйЗаПериод, Отказ, Заголовок);

	
// На оставшуюся сумму выполняем зачет  
	Если Не ОбщаяСуммаНДСРазрешенногоКЗачету = 0 Или Не СуммаНДСНеРазрешенногоКЗачету = 0 Тогда
		// Распределяем сумму закрытия пропорционально данным субсчетов НДС
		ЗапросКСчетам = Новый Запрос;
		ЗапросКСчетам.Текст = "ВЫБРАТЬ
		                      |	ТиповойОстаткиИОбороты.Счет,
		                      |	ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаНачальныйОстатокДт + ТиповойОстаткиИОбороты.СуммаОборотДт, 0) КАК СуммаНДСКВозмещению
		                      |ИЗ
		                      |	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
		                      |		&ДатаНачала,
		                      |		&ДатаОкончания, , ,
		                      |		Счет В ИЕРАРХИИ (&СчетНДСКВозмещению)
		                      |			И (НЕ Счет.ЗапретитьИспользоватьВПроводках),
		                      |		&ВидСубконтоНалоги,
		                      |		Организация = &Организация
		                      |			И (НЕ Субконто1 = &НДСОтсроченный)) КАК ТиповойОстаткиИОбороты";
		
		ЗапросКСчетам.УстановитьПараметр("ДатаНачала", 			ДатаНачалаПериодаЗачета);
		ЗапросКСчетам.УстановитьПараметр("ДатаОкончания", 		мКонДата);
		ЗапросКСчетам.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);		
		ЗапросКСчетам.УстановитьПараметр("СчетНДСКВозмещению", 	ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению);
		ЗапросКСчетам.УстановитьПараметр("ВидСубконтоНалоги", 	ПланыВидовХарактеристик.ВидыСубконтоТиповые.НалогиСборыОтчисления);		
		ЗапросКСчетам.УстановитьПараметр("НДСОтсроченный", 		Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты);
		
		ТаблицаРаспределенияНДСКВозмещению = ЗапросКСчетам.Выполнить().Выгрузить();
		
		// Распределяем сумму закрытия пропорционально данным субсчетов НДС
		ЗапросКСчетам = Новый Запрос;
		ЗапросКСчетам.Текст = "ВЫБРАТЬ
		                      |	ДанныеСчетов.Счет,
		                      |	СУММА(ДанныеСчетов.Сумма) КАК Сумма
		                      |ИЗ
		                      |	(ВЫБРАТЬ
		                      |		ТиповойОбороты.Счет КАК Счет,
		                      |		ТиповойОбороты.СуммаОборотКт КАК Сумма
		                      |	ИЗ
		                      |		РегистрБухгалтерии.Типовой.Обороты(
		                      |				&ДатаНачала,
		                      |				&ДатаОкончания,
		                      |				,
		                      |				Счет В ИЕРАРХИИ (&СчетНДС)
		                      |					И (НЕ Счет.ЗапретитьИспользоватьВПроводках),
		                      |				,
		                      |				Организация = &Организация,
		                      |				,
		                      |				) КАК ТиповойОбороты
		                      |	ГДЕ
		                      |		ТиповойОбороты.СуммаОборотКт > 0
		                      |	
		                      |	ОБЪЕДИНИТЬ ВСЕ
		                      |	
		                      |	ВЫБРАТЬ
		                      |		ТиповойОбороты.Счет,
		                      |		-ТиповойОбороты.СуммаОборотДт
		                      |	ИЗ
		                      |		РегистрБухгалтерии.Типовой.Обороты(
		                      |				&ДатаНачала,
		                      |				&ДатаОкончания,
		                      |				Регистратор,
		                      |				Счет В ИЕРАРХИИ (&СчетНДС)
		                      |					И (НЕ Счет.ЗапретитьИспользоватьВПроводках),
		                      |				,
		                      |				Организация = &Организация,
		                      |				,
		                      |				) КАК ТиповойОбороты
		                      |	ГДЕ
		                      |		ТиповойОбороты.СуммаОборотДт < 0) КАК ДанныеСчетов
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	ДанныеСчетов.Счет";
		
		ЗапросКСчетам.УстановитьПараметр("ДатаНачала", 		ДатаНачалаПериодаЗачета);
		ЗапросКСчетам.УстановитьПараметр("ДатаОкончания", 	мКонДата);
		ЗапросКСчетам.УстановитьПараметр("Организация", 	СтруктураШапкиДокумента.Организация);		
		ЗапросКСчетам.УстановитьПараметр("СчетНДС", 		ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость);
		
		ТаблицаРаспределенияНДС = ЗапросКСчетам.Выполнить().Выгрузить();
		
		СформироватьДвиженияПоНДСНеРазрешенномуВЗачет(СтруктураШапкиДокумента, СуммаНДСНеРазрешенногоКЗачету, ТаблицаРаспределенияНДСКВозмещению, Отказ, Заголовок);
		СформироватьДвиженияПоЗачетуНДС(СтруктураШапкиДокумента, Мин(ОбщаяСуммаНДСРазрешенногоКЗачету, НДСНачисленныйЗаПериод),ТаблицаРаспределенияНДСКВозмещению, ТаблицаРаспределенияНДС,  Отказ, Заголовок);
	КонецЕсли;	
	// Перенос на следующий период неиспользованного зачета по НДС
	СформироватьДвиженияПоНДСВзаиморасчетыСБюджетом(СтруктураШапкиДокумента, ОбщаяСуммаНДСРазрешенногоКЗачету,ПереносимыйЗачетПоНДС,НДСНачисленныйЗаПериод, Отказ, Заголовок);	
	
	мПроводкиБУ.Записать(Ложь);
КонецПроцедуры // ВыполнитьЗачетПоНДС()

////////////////////////////////////////////////////////////////////////////////
//// РЕГЛАМЕНТНЫЕ ОПЕРАЦИИ НАЛОГОВОГО УЧЕТА

// Процедура рассчитывает сумму разрешенного вычета по налогам исходя из требований
// ст. 114 НК. К вычету принимаются начисленные налоги (кроме штрафов и пени) в пределах уплаченных
Процедура РасчетВычетовПоНалогам_НУ(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.РасчетВычетовПоНалогам Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
		ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Для предприятия, не ведущего учет временных разниц балансовым методом, расчет вычета по налогам не поддерживается. Операция не выполнена.", , , ЭтотОбъект , Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоНалогам, Ложь);
		Возврат;
	КонецЕсли;
				 						   
	// Получаем сумму затрат по статье "Налоги в бюджет" за отчетный год
	// Сумма вычета = Мин(СальдоНачПоНалогу + Начисление; Сумма уплаты)
	// Невычет образует ВР	
	// При получении сальдо налога, считаем его в полном объеме НУ
	 Запрос = Новый Запрос("ВЫБРАТЬ
	                       |	НалогиСборыОтчисления.Ссылка КАК Налог,
	                       |	НалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомНУ,
	                       |	НалогиСборыОтчисления.СтатьяЗатрат
	                       |ПОМЕСТИТЬ ВТ_СписокНалогов
	                       |ИЗ
	                       |	Справочник.НалогиСборыОтчисления КАК НалогиСборыОтчисления
	                       |ГДЕ
	                       |	НалогиСборыОтчисления.ОтноситьНаВычетыВПределахУплаченнойСуммы
	                       |	И НЕ НалогиСборыОтчисления.Ссылка = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование)
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	НалогиСборыОтчисления.Ссылка КАК Налог,
	                       |	ВЫБОР
	                       |		КОГДА НалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	                       |			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ОбязательстваПоОтчислениямОСМС)
	                       |		ИНАЧЕ НалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомНУ
	                       |	КОНЕЦ КАК СчетУчетаРасчетовСКонтрагентомНУ,
	                       |	НалогиСборыОтчисления.СтатьяЗатрат КАК СтатьяЗатрат
	                       |ПОМЕСТИТЬ ВТ_СписокНалоговПоОСМС
	                       |ИЗ
	                       |	Справочник.НалогиСборыОтчисления КАК НалогиСборыОтчисления
	                       |ГДЕ
	                       |	НалогиСборыОтчисления.Ссылка = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование)
	                       |	И НалогиСборыОтчисления.ОтноситьНаВычетыВПределахУплаченнойСуммы
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	Общий.Счет,
	                       |	Общий.Организация,
	                       |	Общий.СтруктурноеПодразделение,
	                       |	Общий.Субконто1,
	                       |	Общий.Субконто2,
	                       |	Общий.Субконто3,
	                       |	СУММА(Общий.НачисленныйНалог) КАК НачисленныйНалог,
	                       |	Общий.СтатьяЗатратНалога КАК СтатьяЗатратНалога,
	                       |	СУММА(Общий.СуммаОстаток) КАК СуммаОстаток,
	                       |	СУММА(Общий.СуммаОплаты) КАК УплаченныйНалог
	                       |ИЗ
	                       |	(ВЫБРАТЬ
	                       |		НачисленныйНалог.Счет КАК Счет,
	                       |		НачисленныйНалог.Организация КАК Организация,
	                       |		НачисленныйНалог.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	                       |		НачисленныйНалог.Субконто1 КАК Субконто1,
	                       |		НачисленныйНалог.Субконто2 КАК Субконто2,
	                       |		НачисленныйНалог.Субконто3 КАК Субконто3,
	                       |		НачисленныйНалог.СуммаОборотКт КАК НачисленныйНалог,
	                       |		НачисленныйНалог.Субконто1.СтатьяЗатрат КАК СтатьяЗатратНалога,
	                       |		0 КАК СуммаОстаток,
	                       |		0 КАК СуммаОплаты
	                       |	ИЗ
	                       |		РегистрБухгалтерии.Налоговый.Обороты(
	                       |				&ДатаНачала,
	                       |				&ДатаОкончания,
	                       |				,
	                       |				Счет В
	                       |					(ВЫБРАТЬ
	                       |						НалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомНУ
	                       |					ИЗ
	                       |						ВТ_СписокНалогов КАК НалогиСборыОтчисления),
	                       |				,
	                       |				Организация В (&СписокОрганизаций)
	                       |					И ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
	                       |					И Субконто1 В
	                       |						(ВЫБРАТЬ
	                       |							НалогиСборыОтчисления.Налог
	                       |						ИЗ
	                       |							ВТ_СписокНалогов КАК НалогиСборыОтчисления)
	                       |					И НЕ Субконто2 В (&СписокИсключаемыхПлатежей)
	                       |					И (КорСубконто1 ССЫЛКА Справочник.СтатьиЗатрат
	                       |						ИЛИ КорСубконто2 ССЫЛКА Справочник.СтатьиЗатрат
	                       |						ИЛИ КорСубконто3 ССЫЛКА Справочник.СтатьиЗатрат),
	                       |				,
	                       |				) КАК НачисленныйНалог
	                       |	
	                       |	ОБЪЕДИНИТЬ ВСЕ
	                       |	
	                       |	ВЫБРАТЬ
	                       |		НачисленныйНалог.Счет,
	                       |		НачисленныйНалог.Организация,
	                       |		НачисленныйНалог.СтруктурноеПодразделение,
	                       |		НачисленныйНалог.Субконто1,
	                       |		НачисленныйНалог.Субконто2,
	                       |		НачисленныйНалог.Субконто3,
	                       |		НачисленныйНалог.СуммаОборотКт,
	                       |		СписокНалоговПоОСМС.СтатьяЗатрат,
	                       |		0,
	                       |		0
	                       |	ИЗ
	                       |		РегистрБухгалтерии.Налоговый.Обороты(
	                       |				&ДатаНачала,
	                       |				&ДатаОкончания,
	                       |				,
	                       |				Счет В
	                       |					(ВЫБРАТЬ
	                       |						НалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомНУ
	                       |					ИЗ
	                       |						ВТ_СписокНалоговПоОСМС КАК НалогиСборыОтчисления),
	                       |				,
	                       |				Организация В (&СписокОрганизаций)
	                       |					И ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
	                       |					И НЕ Субконто1 В (&СписокИсключаемыхПлатежей)
	                       |					И (КорСубконто1 ССЫЛКА Справочник.СтатьиЗатрат
	                       |						ИЛИ КорСубконто2 ССЫЛКА Справочник.СтатьиЗатрат
	                       |						ИЛИ КорСубконто3 ССЫЛКА Справочник.СтатьиЗатрат),
	                       |				,
	                       |				) КАК НачисленныйНалог
	                       |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокНалоговПоОСМС КАК СписокНалоговПоОСМС
	                       |			ПО (ИСТИНА)
	                       |	
	                       |	ОБЪЕДИНИТЬ ВСЕ
	                       |	
	                       |	ВЫБРАТЬ
	                       |		НалоговыйОстатки.Счет,
	                       |		НалоговыйОстатки.Организация,
	                       |		НалоговыйОстатки.СтруктурноеПодразделение,
	                       |		НалоговыйОстатки.Субконто1,
	                       |		НалоговыйОстатки.Субконто2,
	                       |		НалоговыйОстатки.Субконто3,
	                       |		0,
	                       |		НалоговыйОстатки.Субконто1.СтатьяЗатрат,
	                       |		ВЫБОР
	                       |			КОГДА НалоговыйОстатки.СуммаОстатокКт > 0
	                       |				ТОГДА НалоговыйОстатки.СуммаОстатокКт
	                       |			ИНАЧЕ 0
	                       |		КОНЕЦ,
	                       |		ВЫБОР
	                       |			КОГДА НалоговыйОстатки.СуммаОстатокКт < 0
	                       |				ТОГДА -НалоговыйОстатки.СуммаОстатокКт
	                       |			ИНАЧЕ 0
	                       |		КОНЕЦ
	                       |	ИЗ
	                       |		РегистрБухгалтерии.Налоговый.Остатки(
	                       |				&ДатаНачала,
	                       |				Счет В
	                       |					(ВЫБРАТЬ
	                       |						НалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомНУ
	                       |					ИЗ
	                       |						ВТ_СписокНалогов КАК НалогиСборыОтчисления),
	                       |				,
	                       |				Организация В (&СписокОрганизаций)
	                       |					И (ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
	                       |						ИЛИ ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.ВР))
	                       |					И Субконто1 В
	                       |						(ВЫБРАТЬ
	                       |							НалогиСборыОтчисления.Налог
	                       |						ИЗ
	                       |							ВТ_СписокНалогов КАК НалогиСборыОтчисления)
	                       |					И НЕ Субконто2 В (&СписокИсключаемыхПлатежей)) КАК НалоговыйОстатки
	                       |	
	                       |	ОБЪЕДИНИТЬ ВСЕ
	                       |	
	                       |	ВЫБРАТЬ
	                       |		НалоговыйОстатки.Счет,
	                       |		НалоговыйОстатки.Организация,
	                       |		НалоговыйОстатки.СтруктурноеПодразделение,
	                       |		НалоговыйОстатки.Субконто1,
	                       |		НалоговыйОстатки.Субконто2,
	                       |		НалоговыйОстатки.Субконто3,
	                       |		0,
	                       |		СписокНалоговПоОСМС.СтатьяЗатрат,
	                       |		ВЫБОР
	                       |			КОГДА НалоговыйОстатки.СуммаОстатокКт > 0
	                       |				ТОГДА НалоговыйОстатки.СуммаОстатокКт
	                       |			ИНАЧЕ 0
	                       |		КОНЕЦ,
	                       |		ВЫБОР
	                       |			КОГДА НалоговыйОстатки.СуммаОстатокКт < 0
	                       |				ТОГДА -НалоговыйОстатки.СуммаОстатокКт
	                       |			ИНАЧЕ 0
	                       |		КОНЕЦ
	                       |	ИЗ
	                       |		РегистрБухгалтерии.Налоговый.Остатки(
	                       |				&ДатаНачала,
	                       |				Счет В
	                       |					(ВЫБРАТЬ
	                       |						НалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомНУ
	                       |					ИЗ
	                       |						ВТ_СписокНалоговПоОСМС КАК НалогиСборыОтчисления),
	                       |				,
	                       |				Организация В (&СписокОрганизаций)
	                       |					И (ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
	                       |						ИЛИ ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.ВР))
	                       |					И НЕ Субконто1 В (&СписокИсключаемыхПлатежей)) КАК НалоговыйОстатки
	                       |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокНалоговПоОСМС КАК СписокНалоговПоОСМС
	                       |			ПО (ИСТИНА)
	                       |	
	                       |	ОБЪЕДИНИТЬ ВСЕ
	                       |	
	                       |	ВЫБРАТЬ
	                       |		УплаченныйНалог.Счет,
	                       |		УплаченныйНалог.Организация,
	                       |		УплаченныйНалог.СтруктурноеПодразделение,
	                       |		УплаченныйНалог.Субконто1,
	                       |		УплаченныйНалог.Субконто2,
	                       |		УплаченныйНалог.Субконто3,
	                       |		0,
	                       |		УплаченныйНалог.Субконто1.СтатьяЗатрат,
	                       |		0,
	                       |		УплаченныйНалог.СуммаОборот
	                       |	ИЗ
	                       |		РегистрБухгалтерии.Налоговый.Обороты(
	                       |				&ДатаНачала,
	                       |				&ДатаОкончания,
	                       |				,
	                       |				Счет В
	                       |					(ВЫБРАТЬ
	                       |						НалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомНУ
	                       |					ИЗ
	                       |						ВТ_СписокНалогов КАК НалогиСборыОтчисления),
	                       |				,
	                       |				Организация В (&СписокОрганизаций)
	                       |					И Субконто1 В
	                       |						(ВЫБРАТЬ
	                       |							НалогиСборыОтчисления.Налог
	                       |						ИЗ
	                       |							ВТ_СписокНалогов КАК НалогиСборыОтчисления)
	                       |					И НЕ КорСубконто1 ССЫЛКА Справочник.СтатьиЗатрат
	                       |					И НЕ ЕСТЬNULL(КорСубконто2, 0) ССЫЛКА Справочник.СтатьиЗатрат
	                       |					И НЕ ЕСТЬNULL(КорСубконто3, 0) ССЫЛКА Справочник.СтатьиЗатрат
	                       |					И ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
	                       |					И НЕ Субконто2 В (&СписокИсключаемыхПлатежей),
	                       |				,
	                       |				) КАК УплаченныйНалог
	                       |	
	                       |	ОБЪЕДИНИТЬ ВСЕ
	                       |	
	                       |	ВЫБРАТЬ
	                       |		УплаченныйНалог.Счет,
	                       |		УплаченныйНалог.Организация,
	                       |		УплаченныйНалог.СтруктурноеПодразделение,
	                       |		УплаченныйНалог.Субконто1,
	                       |		УплаченныйНалог.Субконто2,
	                       |		УплаченныйНалог.Субконто3,
	                       |		0,
	                       |		СписокНалоговПоОСМС.СтатьяЗатрат,
	                       |		0,
	                       |		УплаченныйНалог.СуммаОборот
	                       |	ИЗ
	                       |		РегистрБухгалтерии.Налоговый.Обороты(
	                       |				&ДатаНачала,
	                       |				&ДатаОкончания,
	                       |				,
	                       |				Счет В
	                       |					(ВЫБРАТЬ
	                       |						НалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомНУ
	                       |					ИЗ
	                       |						ВТ_СписокНалоговПоОСМС КАК НалогиСборыОтчисления),
	                       |				,
	                       |				Организация В (&СписокОрганизаций)
	                       |					И НЕ КорСубконто1 ССЫЛКА Справочник.СтатьиЗатрат
	                       |					И НЕ ЕСТЬNULL(КорСубконто2, 0) ССЫЛКА Справочник.СтатьиЗатрат
	                       |					И НЕ ЕСТЬNULL(КорСубконто3, 0) ССЫЛКА Справочник.СтатьиЗатрат
	                       |					И ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
	                       |					И НЕ Субконто1 В (&СписокИсключаемыхПлатежей),
	                       |				,
	                       |				) КАК УплаченныйНалог
	                       |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокНалоговПоОСМС КАК СписокНалоговПоОСМС
	                       |			ПО (ИСТИНА)) КАК Общий
	                       |
	                       |СГРУППИРОВАТЬ ПО
	                       |	Общий.Счет,
	                       |	Общий.Организация,
	                       |	Общий.СтруктурноеПодразделение,
	                       |	Общий.Субконто1,
	                       |	Общий.Субконто2,
	                       |	Общий.Субконто3,
	                       |	Общий.СтатьяЗатратНалога");
	СчетаНалогов = Новый СписокЗначений;
	СчетаНалогов.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоОтчислениямОСМС);
	Запрос.УстановитьПараметр("ДатаНачала", 				мНачГода);
	Запрос.УстановитьПараметр("ДатаОкончания", 				мКонДата);
	Запрос.УстановитьПараметр("ВидСубконтоСтатьиЗатрат", 	ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
	Запрос.УстановитьПараметр("Счет000", 					ПланыСчетов.Налоговый.Вспомогательный);	
	Запрос.УстановитьПараметр("СписокОрганизаций",		    ПроцедурыНалоговогоУчета.СформироватьСписокСтруктурныхЕдиниц(Перечисления.РазделыНалоговогоУчета.КПН, , Организация));
	Запрос.УстановитьПараметр("СчетаНалогов",		        СчетаНалогов);
	
	// Штрафы и пени не разрешены к вычету, поэтому игнорируем их
	СписокИсключаемыхПлатежей = Новый СписокЗначений;
	СписокИсключаемыхПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.ПениАкт);
	СписокИсключаемыхПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.ПениСам);
	СписокИсключаемыхПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.Штраф);	
	Запрос.УстановитьПараметр("СписокИсключаемыхПлатежей", СписокИсключаемыхПлатежей);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммаКВычету = Мин(Макс(Выборка.СуммаОстаток,0) + Выборка.НачисленныйНалог, Макс(Выборка.УплаченныйНалог,0));
		СуммаНеРазрешеннаяКВычету = Выборка.НачисленныйНалог - СуммаКВычету;
		// не разрешенная к вычету сумма образует ВР на счете учета налога и счете затрат
		Если СуммаНеРазрешеннаяКВычету <> 0 Тогда
			// уменьшаем затраты периода на сумму ВР
			// переворачиваем проводку, чтобы в справке расчете были видны исходные данные расчета по НУ
			ПроводкаНУ = мПроводкиНУ.Добавить();
			ПроводкаНУ.Период 		= Дата;
			ПроводкаНУ.Организация 	= Выборка.Организация;
			
			ПроводкаНУ.СчетДт 		= Выборка.Счет;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, Выборка.Субконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, Выборка.Субконто3);
			
			ПроводкаНУ.СчетКт 		= ПланыСчетов.Налоговый.ПрочиеРасходы;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "СтатьиЗатрат", Выборка.СтатьяЗатратНалога);
			
			ПроводкаНУ.Сумма 		= СуммаНеРазрешеннаяКВычету;
			ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.НУ;
			ПроводкаНУ.ВидУчетаКт 	= Справочники.ВидыУчетаНУ.НУ;
			ПроводкаНУ.Содержание 	= "Уменьшение вычета на сумму неоплаченной части налога";
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Выборка.СтруктурноеПодразделение,
																		Выборка.СтруктурноеПодразделение);
			
			// Образуем ВР
			ПроводкаНУ = мПроводкиНУ.Добавить();
			ПроводкаНУ.Период = Дата;
			ПроводкаНУ.Организация 	= Выборка.Организация;
			
			ПроводкаНУ.СчетДт = ПланыСчетов.Налоговый.ПрочиеРасходы;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "СтатьиЗатрат", Выборка.СтатьяЗатратНалога);
			ПроводкаНУ.СчетКт = Выборка.Счет;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Выборка.Субконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, Выборка.Субконто3);
			ПроводкаНУ.Сумма = СуммаНеРазрешеннаяКВычету;
			ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.ВР;
			ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.ВР;			
			ПроводкаНУ.Содержание = "ВР на сумму неоплаченной части налога";
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Выборка.СтруктурноеПодразделение,
																		Выборка.СтруктурноеПодразделение);
		КонецЕсли;	 		
	КонецЦикла;	
	мПроводкиНУ.Записать(Ложь);	
КонецПроцедуры

// Процедура получает данные по ФА в налоговом учете, определяет вид допустимой операции с активом  
// и выполняет соответствующие регламентные операции, вызывая вспомогательные процедуры
//
Процедура РегламентныеОперацииПоФиксированнымАктивамНУ (СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ВыполнятьВсе = Не ЗначениеЗаполнено(ВидРегламентнойОперации);
	Если СтруктураШапкиДокумента.РасчетВычетовПоРасходамНаРемонт 
		И (ВыполнятьВсе  ИЛИ ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоРасходамНаРемонт) Тогда
		РасчетВычетовПоРасходамНаРемонтФАНУ(СтруктураШапкиДокумента, Отказ, Заголовок);	
	КонецЕсли; 		
	
	мПроводкиНУ.Записать(Ложь);	
	
	Если СтруктураШапкиДокумента.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно 
		 И (ВыполнятьВсе  ИЛИ ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно) Тогда
		ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно_НУ(СтруктураШапкиДокумента, Отказ, Заголовок);	
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.РасчетВычетовПоПреференциям 
		 И (ВыполнятьВсе  ИЛИ ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоПреференциям) Тогда
		РасчетВычетовПоПреференциямФАНУ(СтруктураШапкиДокумента, Отказ, Заголовок);	
	КонецЕсли;	
	
		
	Если  НЕ СтруктураШапкиДокумента.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА
		И НЕ СтруктураШапкиДокумента.СписаниеПриВыбытииВсехФАГруппы
		И НЕ СтруктураШапкиДокумента.СписаниеСтоимостногоБалансаГруппыМенееМинимума
		И НЕ СтруктураШапкиДокумента.АмортизацияФАНУ Тогда
		
        мПроводкиНУ.Записать(Ложь);	

		
		Возврат;		
		
	КонецЕсли;	
	
	Запрос = Новый Запрос;		
	Запрос.УстановитьПараметр("ДатаКон", 		мКонГраница);		
	
	Запрос.УстановитьПараметр("РазмерДопустимогоМинимумаДляВычета", 0);
	
	Если СтруктураШапкиДокумента.СписаниеСтоимостногоБалансаГруппыМенееМинимума Тогда
	РазмерМинимумаДляВычетаТекст = "
		|ВЫБРАТЬ
		|	ЕстьNull(РасчетныеПоказатели.РазмерМРП,0) КАК МРП
		|ИЗ
		|	РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&ДатаКон) КАК РасчетныеПоказатели
		|";
			
		Запрос.Текст = РазмерМинимумаДляВычетаТекст;		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Запрос.УстановитьПараметр("РазмерДопустимогоМинимумаДляВычета",	300*Выборка.МРП);	
		КонецЕсли;
	КонецЕсли;	
	// отбираем данные только по ФА, находящимся на учете.
	// Выбывший актив может иметь стоимостной баланс и участвовать в учете ст. 
	СостоянияФА = Новый СписокЗначений();	
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);
	
	Запрос.УстановитьПараметр("СостоянияФА", 	СостоянияФА);		
	
	Запрос.Текст = "
	////////////////////// ОБЪЕКТЫ НАЛОГОВОГО УЧЕТА ФА /////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыНалоговогоУчетаФА.Организация КАК Организация,
		|	ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК ФиксированныйАктив,
		|	ОбъектыНалоговогоУчетаФА.ГруппаНУ КАК ГруппаФА,		
		|	ОбъектыНалоговогоУчетаФА.ПорядокПогашенияСтоимостиНУ КАК ПорядокПогашенияСтоимостиНУ,
		|	ВЫБОР
		|		КОГДА ОбъектыНалоговогоУчетаФА.ГруппаНУ.ВидУчетаВГруппеФА = ЗНАЧЕНИЕ(Перечисление.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам)
		|			ТОГДА ОбъектыНалоговогоУчетаФА.ФиксированныйАктив
		|		ИНАЧЕ ОбъектыНалоговогоУчетаФА.ГруппаНУ	КОНЕЦ КАК ГруппаУчетаФА,
		|	ОбъектыНалоговогоУчетаФА.СостояниеФиксированногоАктива КАК СостояниеФиксированногоАктива,
		|	ВЫБОР КОГДА 
		|		ФиксированныеАктивыУчитываемыеОтдельно.Событие ЕСТЬ NULL 
		|	Тогда  ИСТИНА Иначе Ложь 
		|	КОНЕЦ КАК ВходитВСтоимостныйБалансГруппы	
		|	
		|ПОМЕСТИТЬ ВТ_ОбъектыНалоговогоУчетаФА
		|ИЗ
		|	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
		|			&ДатаОкончания,
		|			Организация В (&СписокОрганизаций)
		|			И СостояниеФиксированногоАктива В (&СостоянияФА)) КАК ОбъектыНалоговогоУчетаФА
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(
		|			&ДатаОкончания,
		|			Организация В (&СписокОрганизаций)) КАК ФиксированныеАктивыУчитываемыеОтдельно
		|ПО 			
		|ОбъектыНалоговогоУчетаФА.Организация = ФиксированныеАктивыУчитываемыеОтдельно.Организация
		|И ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = ФиксированныеАктивыУчитываемыеОтдельно.ФиксированныйАктив
		|И НЕ ФиксированныеАктивыУчитываемыеОтдельно.Событие = Значение(Перечисление.СобытияФАУчитываемыхОтдельно.ВключениеВСоставГруппы);
		|
		|/////////////////////// ВРЕМЕННАЯ ДЛЯ РАСЧЕТА ПОКАЗАТЕЛЕЙ ГРУПП НУ ////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив
		|				И СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ОбъектыНалоговогоУчетаФА.Организация
		|			ТОГДА 1
		|		КОГДА ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив
		|				И СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА 2		
		|		КОГДА СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ОбъектыНалоговогоУчетаФА.Организация
		|			ТОГДА 3
		|		КОГДА СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА 4
		|		ИНАЧЕ 5
		|	КОНЕЦ КАК Приоритет,
		|	ОбъектыНалоговогоУчетаФА.ГруппаФА КАК ГруппаФА,
		|	ОбъектыНалоговогоУчетаФА.ГруппаУчетаФА КАК ГруппаУчетаФА,
		|	ОбъектыНалоговогоУчетаФА.Организация КАК Организация,
		|	ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК ФиксированныйАктив,
		|	ОбъектыНалоговогоУчетаФА.СостояниеФиксированногоАктива КАК СостояниеФиксированногоАктива,
		|	СведенияОГруппахФиксированныхАктивовСрезПоследних.ГруппаФА.ВидУчетаВГруппеФА КАК ВидУчетаВГруппеФА,
		|	ОбъектыНалоговогоУчетаФА.ВходитВСтоимостныйБалансГруппы КАК ВходитВСтоимостныйБалансГруппы,
		|	ВЫБОР КОГДА НЕ ОбъектыНалоговогоУчетаФА.ВходитВСтоимостныйБалансГруппы  И ОбъектыНалоговогоУчетаФА.ПорядокПогашенияСтоимостиНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиФА.НачислениеАмортизацииПоДвойнойНорме)
		|		Тогда (СведенияОГруппахФиксированныхАктивовСрезПоследних.ПрименяемаяНормаАмортизации)*2 
		|       КОГДА НЕ ОбъектыНалоговогоУчетаФА.ВходитВСтоимостныйБалансГруппы Тогда 0		
		|		Иначе СведенияОГруппахФиксированныхАктивовСрезПоследних.ПрименяемаяНормаАмортизации КОНЕЦ КАК ПрименяемаяНормаАмортизации
		|ПОМЕСТИТЬ ВТ_СведенияОГруппахФА
		|ИЗ
		|	ВТ_ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОГруппахФиксированныхАктивов.СрезПоследних(&ДатаОкончания, ) КАК СведенияОГруппахФиксированныхАктивовСрезПоследних
		|		ПО (ОбъектыНалоговогоУчетаФА.Организация = СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация
		|				ИЛИ СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|			И (ОбъектыНалоговогоУчетаФА.ГруппаФА = СведенияОГруппахФиксированныхАктивовСрезПоследних.ГруппаФА
		|					И СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив = НЕОПРЕДЕЛЕНО
		|				ИЛИ СведенияОГруппахФиксированныхАктивовСрезПоследних.ГруппаФА.ВидУчетаВГруппеФА = ЗНАЧЕНИЕ(Перечисление.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам)
		|					И ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив)
		|ГДЕ
		|	(НЕ ОбъектыНалоговогоУчетаФА.ГруппаФА = ЗНАЧЕНИЕ(Справочник.ГруппыНалоговогоУчетаФА.ПустаяСсылка))
		|;
		|
		|////////////////////////////// ПОКАЗАТЕЛИ ГРУПП НУ //////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГруппыФА.ГруппаФА КАК ГруппаФА,
		|	ГруппыФА.ГруппаУчетаФА КАК ГруппаУчетаФА,
		|	ГруппыФА.Организация КАК Организация,
		|	ГруппыФА.ФиксированныйАктив КАК ФиксированныйАктив,
		|	ГруппыФА.СостояниеФиксированногоАктива КАК СостояниеФиксированногоАктива,
		|	СведенияОГруппахФА.ГруппаФА.ВидУчетаВГруппеФА КАК ВидУчетаВГруппеФА,
		|	СведенияОГруппахФА.ПрименяемаяНормаАмортизации КАК ПрименяемаяНормаАмортизации,
		|	СведенияОГруппахФА.ВходитВСтоимостныйБалансГруппы КАК ВходитВСтоимостныйБалансГруппы
		|ПОМЕСТИТЬ ВТ_ГруппыФА
		|ИЗ
		|	(ВЫБРАТЬ
		|		ГруппыФА.ГруппаФА КАК ГруппаФА,
		|		ГруппыФА.ГруппаУчетаФА КАК ГруппаУчетаФА,
		|		ГруппыФА.Организация КАК Организация,
		|		ГруппыФА.ФиксированныйАктив КАК ФиксированныйАктив,		
		|		МИНИМУМ(ГруппыФА.Приоритет) КАК Приоритет,
		|		ГруппыФА.СостояниеФиксированногоАктива КАК СостояниеФиксированногоАктива
		|	ИЗ
		|		ВТ_СведенияОГруппахФА КАК ГруппыФА
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ГруппыФА.ФиксированныйАктив,
		|		ГруппыФА.Организация,
		|		ГруппыФА.ГруппаФА,
		|		ГруппыФА.ГруппаУчетаФА,
		|		ГруппыФА.СостояниеФиксированногоАктива) КАК ГруппыФА
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОГруппахФА КАК СведенияОГруппахФА
		|		ПО ГруппыФА.Организация = СведенияОГруппахФА.Организация
		|			И ГруппыФА.ФиксированныйАктив = СведенияОГруппахФА.ФиксированныйАктив
		|			И ГруппыФА.Приоритет = СведенияОГруппахФА.Приоритет
		|;
		|
		|///////////////// СТОИМОСТЬ ФА В НУ /////////////////////////////////////
		|ВЫБРАТЬ
		|	СтоимостьВА_НУ.Организация КАК Организация,
		|	СтоимостьВА_НУ.Субконто1 КАК ФиксированныйАктив,
		|	СтоимостьВА_НУ.Счет КАК Счет,
		|	СУММА(ВЫБОР
		|			КОГДА СтоимостьВА_НУ.Субконто2 В (&ДвижениеПоступления)
		|				ТОГДА СтоимостьВА_НУ.СуммаОборотДт - СтоимостьВА_НУ.СуммаОборотКт
		|		КОНЕЦ) КАК Поступление,
		|	СУММА(ВЫБОР
		|			КОГДА СтоимостьВА_НУ.Субконто2 = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.Выбытие) ИЛИ СтоимостьВА_НУ.Субконто2 = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.Перемещение)
		|				ТОГДА СтоимостьВА_НУ.СуммаОборотКт - СтоимостьВА_НУ.СуммаОборотДт
		|		КОНЕЦ) КАК Выбытие,
		|	МАКСИМУМ(СтоимостьВА_НУ.СуммаНачальныйОстатокДт) КАК НачальныйОстаток,
		|	МАКСИМУМ(СтоимостьВА_НУ.СуммаКонечныйОстатокДт) КАК КонечныйОстаток,
		|	СУММА(ВЫБОР
		|			КОГДА СтоимостьВА_НУ.Субконто2 = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.Амортизация)
		|				ТОГДА СтоимостьВА_НУ.СуммаОборотКт
		|		КОНЕЦ) КАК АмортизацияУчетная,
		|	СУММА(ВЫБОР
		|			КОГДА СтоимостьВА_НУ.Субконто2 = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.СписаниеСтоимостногоБалансаГруппыМенееМинимума)
		|				ТОГДА СтоимостьВА_НУ.СуммаОборотКт
		|		КОНЕЦ) КАК СписаниеМенееМинимумаУчетное	
		|	ПОМЕСТИТЬ ВТ_СтоимостьВА_НУ
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , ,
		|			Счет В ИЕРАРХИИ (&СчетУчетаВА),	,
		|			((СУБКОНТО1, ОРГАНИЗАЦИЯ) В
		|					(ВЫБРАТЬ
		|						ВЫРАЗИТЬ(ВТ_ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК Справочник.ОсновныеСредства),
		|						ВТ_ОбъектыНалоговогоУчетаФА.Организация
		|					ИЗ
		|						ВТ_ОбъектыНалоговогоУчетаФА)
		|				ИЛИ (СУБКОНТО1, ОРГАНИЗАЦИЯ) В
		|					(ВЫБРАТЬ
		|						ВЫРАЗИТЬ(ВТ_ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК Справочник.НематериальныеАктивы),
		|						ВТ_ОбъектыНалоговогоУчетаФА.Организация
		|					ИЗ
		|						ВТ_ОбъектыНалоговогоУчетаФА))
		|				И ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)) КАК СтоимостьВА_НУ
		|
		|СГРУППИРОВАТЬ ПО
		|	СтоимостьВА_НУ.Организация,
		|	СтоимостьВА_НУ.Субконто1,
		|	СтоимостьВА_НУ.Счет;
		|	
		|//////////// ИТОГИ ПО ГРУППАМ ФА //////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыНалоговогоУчетаФА.ГруппаФА КАК ГруппаФА,
		|	СУММА(ЕСТЬNULL(СтоимостьВА_НУ.НачальныйОстаток, 0) + ЕСТЬNULL(СтоимостьВА_НУ.Поступление, 0) - ЕСТЬNULL(СтоимостьВА_НУ.Выбытие, 0)) КАК СтоимостьНУ,
		|	ОбъектыНалоговогоУчетаФА.ГруппаУчетаФА КАК ГруппаУчетаФА,	
		|	СУММА(СтоимостьВА_НУ.АмортизацияУчетная) КАК АмортизацияУчетная,
		|	СУММА(ВЫБОР
		|			КОГДА ОбъектыНалоговогоУчетаФА.СостояниеФиксированногоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийФА.ПринятКУчету)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоНеВыбывшихВГруппе,
		|	СУММА(СтоимостьВА_НУ.СписаниеМенееМинимумаУчетное) КАК СписаниеМенееМинимумаУчетное
		|ПОМЕСТИТЬ ВТ_ИтогиПоГруппамНУ
		|ИЗ
		|	ВТ_ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА		
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьВА_НУ КАК СтоимостьВА_НУ
		|		ПО (СтоимостьВА_НУ.Организация = ОбъектыНалоговогоУчетаФА.Организация)
		|			И (СтоимостьВА_НУ.ФиксированныйАктив = ОбъектыНалоговогоУчетаФА.ФиксированныйАктив)
		|			И ОбъектыНалоговогоУчетаФА.ВходитВСтоимостныйБалансГруппы = Истина
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъектыНалоговогоУчетаФА.ГруппаФА,
		|	ОбъектыНалоговогоУчетаФА.ГруппаУчетаФА;
		|
		|//////////// Итоговый ЗАПРОС /////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтогиПоГруппамНУ.ГруппаУчетаФА КАК ГруппаУчетаФА,
		|	ГруппыФА.ГруппаФА КАК ГруппаФА,		
		|	ГруппыФА.Организация КАК Организация,		
		|	ГруппыФА.ФиксированныйАктив КАК ФиксированныйАктив,
		|	СтоимостьВА_НУ.Счет КАК СчетУчетаФА,
		|	ГруппыФА.ВидУчетаВГруппеФА КАК ВидУчетаВГруппеФА,
		|	ГруппыФА.СостояниеФиксированногоАктива,
		|	ИтогиПоГруппамНУ.СтоимостьНУ КАК ИтоговаяСтоимостьГруппыНУ,
		|	ЕСТЬNULL(СтоимостьВА_НУ.НачальныйОстаток, 0) + ЕСТЬNULL(СтоимостьВА_НУ.Поступление, 0) - ЕСТЬNULL(СтоимостьВА_НУ.Выбытие, 0) КАК СтоимостьНУ,
		|	ВЫБОР
		|		КОГДА НЕ ГруппыФА.ВходитВСтоимостныйБалансГруппы
		|			ТОГДА 4
		|		КОГДА ЕСТЬNULL(ИтогиПоГруппамНУ.СтоимостьНУ, 0) < 0
		|			ТОГДА 1
		|		КОГДА ЕСТЬNULL(ИтогиПоГруппамНУ.КоличествоНеВыбывшихВГруппе, 0) = 0
		|			ТОГДА 2
		|		КОГДА &СписыватьГруппыМенееМинимума
		|				И ЕСТЬNULL(ИтогиПоГруппамНУ.СтоимостьНУ, 0) < &РазмерДопустимогоМинимумаДляВычета
		|				И (&НачислятьАмортизацию
		|					ИЛИ ЕСТЬNULL(ИтогиПоГруппамНУ.АмортизацияУчетная, 0) = 0)
		|			ТОГДА 3
		|		КОГДА ЕСТЬNULL(ИтогиПоГруппамНУ.СписаниеМенееМинимумаУчетное, 0) = 0
		|			ТОГДА 4
		|		ИНАЧЕ 5
		|	КОНЕЦ КАК ВидОперацииПоАктиву,
		|	ГруппыФА.ПрименяемаяНормаАмортизации КАК ПрименяемаяНормаАмортизации,
		|	(ЕСТЬNULL(СтоимостьВА_НУ.НачальныйОстаток, 0) + ЕСТЬNULL(СтоимостьВА_НУ.Поступление, 0) - ЕСТЬNULL(СтоимостьВА_НУ.Выбытие, 0)) * ЕСТЬNULL(ГруппыФА.ПрименяемаяНормаАмортизации, 0)
		|	/ 100 КАК РасчетнаяАмортизацияФА,
		|	НЕ ГруппыФА.ВходитВСтоимостныйБалансГруппы КАК УчитыватьОтдельно
		|ИЗ
		|	ВТ_ГруппыФА КАК ГруппыФА
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИтогиПоГруппамНУ КАК ИтогиПоГруппамНУ
		|		ПО ГруппыФА.ГруппаУчетаФА = ИтогиПоГруппамНУ.ГруппаУчетаФА
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьВА_НУ КАК СтоимостьВА_НУ
		|		ПО (ГруппыФА.Организация = СтоимостьВА_НУ.Организация)
		|			И (ГруппыФА.ФиксированныйАктив = СтоимостьВА_НУ.ФиксированныйАктив)	
		|			
		|ИТОГИ
		|МАКСИМУМ(ИтоговаяСтоимостьГруппыНУ),
		|	МАКСИМУМ(СтоимостьНУ),
		|	СУММА(РасчетнаяАмортизацияФА)
		|ПО
		|	ВидОперацииПоАктиву,
		|	ГруппаУчетаФА,
		|ФиксированныйАктив";

		
	Запрос.УстановитьПараметр("ДатаНачала",		НачалоГода(мНачДата));		
		
	Запрос.УстановитьПараметр("ДатаОкончания", 	мКонДата);			
	Запрос.УстановитьПараметр("ВидУчетаНУ",			Справочники.ВидыУчетаНУ.НУ);
		
	Запрос.УстановитьПараметр("СубконтоВА",			ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы);	
	Запрос.УстановитьПараметр("СчетУчетаВА",		ПланыСчетов.Налоговый.ВнеоборотныеАктивы);	
	
	Запрос.УстановитьПараметр("УчитываетсяОтдельноОтСтоимостногоБаланса",	Перечисления.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету);	
	Запрос.УстановитьПараметр("СписыватьГруппыМенееМинимума",	СтруктураШапкиДокумента.СписаниеСтоимостногоБалансаГруппыМенееМинимума);	
	Запрос.УстановитьПараметр("НачислятьАмортизацию",			СтруктураШапкиДокумента.АмортизацияФАНУ);	
	Запрос.УстановитьПараметр("СписокОрганизаций",	ПроцедурыНалоговогоУчета.СформироватьСписокСтруктурныхЕдиниц(Перечисления.РазделыНалоговогоУчета.КПН, , Организация));
	
	СписокВидовДвиженияПоступления = Новый СписокЗначений;
	СписокВидовДвиженияПоступления.Добавить(Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
	// Этот вид движения участвует в стоимостном балансе начиная с 01.01.2009, ст. 117 НК
	Если НачалоГода(мКонДата) >= Дата(2009,1,1)Тогда
		СписокВидовДвиженияПоступления.Добавить(Перечисления.ВидыДвиженияСтоимостиФА.УвеличениеСтоимостиЗаСчетРемонта);
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ДвижениеПоступления",	СписокВидовДвиженияПоступления);
	
	МассивСубконтоЗатратНаРемонт = Новый Массив;
	МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы);
	МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыРемонтаВА);
	МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
	
	Запрос.УстановитьПараметр("СписокСубконтоСчетаРемонта",	МассивСубконтоЗатратНаРемонт);
		
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	
	ВыборкаВидовОпераций	 = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); // по Видам операций
	Пока ВыборкаВидовОпераций.Следующий() Цикл		
		Если СтруктураШапкиДокумента.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА 
			И (ВыполнятьВсе  ИЛИ ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА)
			и ВыборкаВидовОпераций.ВидОперацииПоАктиву = 1 Тогда
			ВыполнитьПризнаниеДоходаОтПревышенияСтоимостиВыбывшегоАктива_НУ(ВыборкаВидовОпераций, СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;	
		
		Если СтруктураШапкиДокумента.СписаниеПриВыбытииВсехФАГруппы 
			И (ВыполнятьВсе  ИЛИ ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеПриВыбытииВсехФАГруппы)
			и ВыборкаВидовОпераций.ВидОперацииПоАктиву = 2 Тогда
			ВыполнитьСписаниеПриВыбытииВсехАктивовГруппы_НУ(ВыборкаВидовОпераций, СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;	
		
		Если СтруктураШапкиДокумента.СписаниеСтоимостногоБалансаГруппыМенееМинимума 
			И (ВыполнятьВсе  ИЛИ ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеСтоимостногоБалансаГруппыМенееМинимума)
			и ВыборкаВидовОпераций.ВидОперацииПоАктиву = 3 Тогда
			ВыполнитьСписаниеГруппМенееМинимума_НУ(ВыборкаВидовОпераций, СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;	
		
		Если СтруктураШапкиДокумента.АмортизацияФАНУ 
			И (ВыполнятьВсе  ИЛИ ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияФАНУ)
			и ВыборкаВидовОпераций.ВидОперацииПоАктиву = 4 Тогда
			ВыполнитьРасчетАмортизации_НУ(ВыборкаВидовОпераций, СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;					
	КонецЦикла;	// Выборка ВидовОпераций	
	
	мПроводкиНУ.Записать(Ложь);	
КонецПроцедуры	// РегламентныеОперацииПоФиксированнымАктивамНУ

// Процедура формирует корреспонденции в налоговом учете по инвестиционным налоговым преференциям в соответствии со ст.123-125
//
Процедура РасчетВычетовПоПреференциямФАНУ_РавномерноеСписание(СтруктураШапкиДокумента, Отказ, Заголовок);	
Запрос = Новый Запрос();
Запрос.Текст = "ВЫБРАТЬ
               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив КАК ФиксированныйАктив,
               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА,
               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Период
               |ПОМЕСТИТЬ ВТ_ФиксированныеАктивыУчитываемыеОтдельно
               |ИЗ
               |	РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(&ДатаКон, Организация В (&СписокОрганизаций)) КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
               |ГДЕ
               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Событие = &УчитываетсяОтдельноОтСтоимостногоБаланса
               |	И ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА = &ВидЛьготыФАОбъектПреференций
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ФиксированныеАктивыОрганизации.ФиксированныйАктив КАК ФиксированныйАктив,
               |	ФиксированныеАктивыОрганизации.ПорядокПогашенияСтоимостиНУ КАК ПорядокПогашенияСтоимостиНУ
               |ПОМЕСТИТЬ ВТ_ФиксированныеАктивыОрганизации
               |ИЗ
               |	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
               |			&ДатаКон,
               |			Организация В (&СписокОрганизаций)
               |				И ФиксированныйАктив В
               |					(ВЫБРАТЬ
               |						ВТ_ФиксированныеАктивыУчитываемыеОтдельно.ФиксированныйАктив
               |					ИЗ
               |						ВТ_ФиксированныеАктивыУчитываемыеОтдельно)) КАК ФиксированныеАктивыОрганизации
               |ГДЕ
               |	ФиксированныеАктивыОрганизации.ПорядокПогашенияСтоимостиНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиФА.ПреференцияОтнесениеНаВычетыРавнымиДолями)
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив КАК ФиксированныйАктив,
               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Период КАК ДатаНачалаПреференции,
               |	СтоимостьВА_НУ.Счет КАК СчетУчетаФА,
			   |	СтоимостьВА_НУ.Организация КАК Организация,
               |	ЕСТЬNULL(СтоимостьВА_НУ.НачальныйОстаток, 0) + ЕСТЬNULL(СтоимостьВА_НУ.Поступление, 0) - ЕСТЬNULL(СтоимостьВА_НУ.Выбытие, 0) КАК СтоимостьФА_НУ,
               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА,
               |	ВТ_ФиксированныеАктивыОрганизации.ПорядокПогашенияСтоимостиНУ КАК ПорядокПогашенияСтоимостиНУ
               |ИЗ
               |	ВТ_ФиксированныеАктивыОрганизации КАК ВТ_ФиксированныеАктивыОрганизации
               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФиксированныеАктивыУчитываемыеОтдельно КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
               |		ПО (ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив = ВТ_ФиксированныеАктивыОрганизации.ФиксированныйАктив)
               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
               |			СтоимостьВА_НУ.Организация КАК Организация,
               |			СтоимостьВА_НУ.Субконто1 КАК Субконто1,
               |			СтоимостьВА_НУ.Счет КАК Счет,
               |			СУММА(ВЫБОР
               |					КОГДА СтоимостьВА_НУ.Субконто2 В (&ДвижениеПоступления)
               |						ТОГДА СтоимостьВА_НУ.СуммаОборотДт - СтоимостьВА_НУ.СуммаОборотКт
               |				КОНЕЦ) КАК Поступление,
               |			СУММА(ВЫБОР
               |					КОГДА  СтоимостьВА_НУ.Субконто2 = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.Выбытие) ИЛИ  СтоимостьВА_НУ.Субконто2 = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.Перемещение)
               |						ТОГДА СтоимостьВА_НУ.СуммаОборотКт - СтоимостьВА_НУ.СуммаОборотДт
               |				КОНЕЦ) КАК Выбытие,
               |			МАКСИМУМ(СтоимостьВА_НУ.СуммаНачальныйОстатокДт) КАК НачальныйОстаток,
               |			МАКСИМУМ(СтоимостьВА_НУ.СуммаКонечныйОстатокДт) КАК КонечныйОстаток
               |		ИЗ
               |			РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(
               |					&ДатаНач,
               |					&ДатаКон,
               |					,
               |					,
               |					Счет В ИЕРАРХИИ (&СчетУчетаВА),
               |					,
               |					ВидУчета = &ВидУчетаНУ
               |						И Организация В (&СписокОрганизаций)
               |						И Субконто1 В
               |							(ВЫБРАТЬ
               |								ВТ_ФиксированныеАктивыУчитываемыеОтдельно.ФиксированныйАктив
               |							ИЗ
               |								ВТ_ФиксированныеАктивыУчитываемыеОтдельно)) КАК СтоимостьВА_НУ
               |		
               |		СГРУППИРОВАТЬ ПО
               |			СтоимостьВА_НУ.Организация,
               |			СтоимостьВА_НУ.Субконто1,
               |			СтоимостьВА_НУ.Счет) КАК СтоимостьВА_НУ
               |		ПО (ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив = СтоимостьВА_НУ.Субконто1)
               |ИТОГИ
               |	СУММА(СтоимостьФА_НУ)
               |ПО
               |	ФиксированныйАктив,
               |	СчетУчетаФА";
			   
	Запрос.УстановитьПараметр("ДатаНач", НачалоГода(мКонДата));			   	
	Запрос.УстановитьПараметр("ДатаКон", мКонГраница);
	Запрос.УстановитьПараметр("УчитываетсяОтдельноОтСтоимостногоБаланса",	Перечисления.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету);	
	Запрос.УстановитьПараметр("Организация", 			СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокОрганизаций",		ПроцедурыНалоговогоУчета.СформироватьСписокСтруктурныхЕдиниц(Перечисления.РазделыНалоговогоУчета.КПН, , Организация));
	Запрос.УстановитьПараметр("ВидУчетаНУ",				Справочники.ВидыУчетаНУ.НУ);
	
	СписокВидовДвиженияПоступления = Новый СписокЗначений;
	СписокВидовДвиженияПоступления.Добавить(Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
	// Этот вид движения участвует в стоимостном балансе начиная с 01.01.2009, ст. 117 НК
	Если НачалоГода(мКонДата) >= Дата(2009,1,1)Тогда
		СписокВидовДвиженияПоступления.Добавить(Перечисления.ВидыДвиженияСтоимостиФА.УвеличениеСтоимостиЗаСчетРемонта);
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ДвижениеПоступления",	СписокВидовДвиженияПоступления);
		
	Запрос.УстановитьПараметр("СчетУчетаВА",			ПланыСчетов.Налоговый.ВАНеВключенныеВСтоимостнойБаланс);
	Запрос.УстановитьПараметр("ВидЛьготыФАОбъектПреференций", Перечисления.ВидыФАУчитываемыхОтдельно.ОбъектыПреференций);
	
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаФА = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаФА.Следующий() Цикл		
		
		ВыборкаСчетУчета	= ВыборкаФА.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчетУчета.Следующий() Цикл
			Если ВыборкаСчетУчета.СтоимостьФА_НУ = 0 Тогда
				Продолжить;
			КонецЕсли;	
			СуммаФАНУ = ВыборкаСчетУчета.СтоимостьФА_НУ;
			
			ВыборкаДетали 				= ВыборкаСчетУчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДетали.Следующий() Цикл			
				
				КоличествоПериодовСписания = 3 - (Год(мКонДата) - Год(ВыборкаДетали.ДатаНачалаПреференции));
				
				ПроводкаНУ 				= мПроводкиНУ.Добавить();
				ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация  = ВыборкаДетали.Организация;
				
				ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.ПрочиеРасходыПоВнеоборотнымАктивам;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", ВыборкаДетали.ФиксированныйАктив);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "СтатьиЗатрат", Справочники.СтатьиЗатрат.СписаниеСтоимостиОбъектаПреференций);
				
				ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.НУ;
				
				ПроводкаНУ.СчетКт 		= ВыборкаДетали.СчетУчетаФА;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, ВыборкаДетали.ФиксированныйАктив);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Перечисления.ВидыДвиженияСтоимостиФА.РавномерноеСписаниеСтоимостиОбъектаПреференций);
				ПроводкаНУ.ВидУчетаКт 	= Справочники.ВидыУчетаНУ.НУ;
				
				ПроводкаНУ.Сумма 					= ?(КоличествоПериодовСписания <= 1, СуммаФАНУ, Окр(СуммаФАНУ/КоличествоПериодовСписания,2)) ;
				ПроводкаНУ.Содержание 				= "Отнесение на вычеты стоимости объекта преференций(НУ)";
				ПроводкаНУ.ВидРегламентнойОперации 	= Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоПреференциям;
				
				Если СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
					// признание ВР по операции
					ПроводкаНУ = мПроводкиНУ.Добавить();
					ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;
					ПроводкаНУ.Организация  = ВыборкаДетали.Организация;
					ПроводкаНУ.Содержание   = "Признание ВР по отнесению на вычеты стоимости объекта преференций(НУ)";
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
					ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.ПрочиеРасходыПоВнеоборотнымАктивам;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", ВыборкаДетали.ФиксированныйАктив);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "СтатьиЗатрат", Справочники.СтатьиЗатрат.СписаниеСтоимостиОбъектаПреференций);
					
					ПроводкаНУ.СчетКт 		= ВыборкаДетали.СчетУчетаФА;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, ВыборкаДетали.ФиксированныйАктив);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Перечисления.ВидыДвиженияСтоимостиФА.РавномерноеСписаниеСтоимостиОбъектаПреференций);
					
					ПроводкаНУ.Сумма        = -1* ?(КоличествоПериодовСписания <= 1, СуммаФАНУ, Окр(СуммаФАНУ/КоличествоПериодовСписания,2));
					ПроводкаНУ.ВидУчетаДт	= Справочники.ВидыУчетаНУ.ВР;
					ПроводкаНУ.ВидУчетаКт	= Справочники.ВидыУчетаНУ.ВР;
				КонецЕсли;				

			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры // РасчетВычетовПоПреференциямФАНУ_РавномерноеСписание

// отнесение накопленных затрат по счету н340 на вычету текущего периода
//
Процедура РасчетВычетовПоПреференциямФАНУ_ВычетДоВводаВэксплуатацию(СтруктураШапкиДокумента, Отказ, Заголовок);	
Запрос = Новый Запрос();
Запрос.Текст = "ВЫБРАТЬ
               |	НалоговыйОстатки.Субконто1,
               |	НалоговыйОстатки.Субконто2,
               |	НалоговыйОстатки.Субконто3,
               |	НалоговыйОстатки.Организация,
               |	НалоговыйОстатки.ВидУчета,
               |	НалоговыйОстатки.СуммаОстатокДт,
               |	НалоговыйОстатки.Счет
               |ИЗ
               |	РегистрБухгалтерии.Налоговый.Остатки(&ДатаКон, Счет = &СчетН340, , Организация В (&СписокОрганизаций)) КАК НалоговыйОстатки";
			   
	Запрос.УстановитьПараметр("ДатаКон", 				мКонГраница);	
	Запрос.УстановитьПараметр("СчетН340",				ПланыСчетов.Налоговый.ПреренцииДоВводаВЭксплуатацию);
	Запрос.УстановитьПараметр("СписокОрганизаций",		ПроцедурыНалоговогоУчета.СформироватьСписокСтруктурныхЕдиниц(Перечисления.РазделыНалоговогоУчета.КПН, , Организация));
		
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаФА = Результат.Выбрать();
	Пока ВыборкаФА.Следующий() Цикл				
			
			ПроводкаНУ 				= мПроводкиНУ.Добавить();
			ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;
			ПроводкаНУ.Организация  = ВыборкаФА.Организация;
			
			ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.ПрочиеРасходыПоВнеоборотнымАктивам;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", ВыборкаФА.Субконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "СтатьиЗатрат", ВыборкаФА.Субконто2);
			
			ПроводкаНУ.ВидУчетаДт 	= ВыборкаФА.ВидУчета;
			
			ПроводкаНУ.СчетКт 		= ВыборкаФА.Счет;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, ВыборкаФА.Субконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, ВыборкаФА.Субконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, ВыборкаФА.Субконто3);
			
			ПроводкаНУ.ВидУчетаКт 	= ВыборкаФА.ВидУчета;
				
			ПроводкаНУ.Сумма 		 			= ВыборкаФА.СуммаОстатокДт ;
			ПроводкаНУ.Содержание 	 			= "Отнесение на вычеты стоимости объекта преференций(НУ) до ввода в эксплуатацию";		
			ПроводкаНУ.ВидРегламентнойОперации	= Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоПреференциям;		
	КонецЦикла;	
	
КонецПроцедуры // РасчетВычетовПоПреференциямФАНУ_ВычетДоВводаВэксплуатацию

// Общая процедура по учету преференций
//
Процедура РасчетВычетовПоПреференциямФАНУ(СтруктураШапкиДокумента, Отказ, Заголовок)
	РасчетВычетовПоПреференциямФАНУ_ВычетДоВводаВэксплуатацию(СтруктураШапкиДокумента, Отказ, Заголовок);
	РасчетВычетовПоПреференциямФАНУ_РавномерноеСписание(СтруктураШапкиДокумента, Отказ, Заголовок);		
КонецПроцедуры // РасчетВычетовПоПреференциямФАНУ

// Процедура формирует корреспонденции в налоговом учет и движения по регистру сведений ФиксированныеАктивыУчитываемыеОтдельно
// для отражения операции включения ФА, учитываемых отдельно (ст. 110, п.2) в стоимостный баланс групп НУ.
//
Процедура ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно_НУ(СтруктураШапкиДокумента, Отказ, Заголовок);	
Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив КАК ФиксированныйАктив,
	               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА КАК ВидЛьготыФА,
				   |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Организация КАК Организация
	               |ПОМЕСТИТЬ ВТ_ФиксированныеАктивыУчитываемыеОтдельно
	               |ИЗ
	               |	РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(&ДатаКон, Организация В (&СписокОрганизаций)) КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
	               |ГДЕ
	               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Событие = &УчитываетсяОтдельноОтСтоимостногоБаланса
	               |	И (ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА = ЗНАЧЕНИЕ(Перечисление.ВидыФАУчитываемыхОтдельно.ДвойнаяНормаАмортизации)
	               |				И ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Период < &ДатаНач
	               |			ИЛИ ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА = ЗНАЧЕНИЕ(Перечисление.ВидыФАУчитываемыхОтдельно.ОбъектыПреференций)
	               |				И ДОБАВИТЬКДАТЕ(ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Период, ГОД, 3) < &ДатаНач)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
				   |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Организация КАК Организация,
	               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив КАК ФиксированныйАктив,
	               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА КАК ВидЛьготыФА,
	               |	СтоимостьВА_НУ.Счет КАК СчетУчетаФА,
	               |	ЕСТЬNULL(СтоимостьВА_НУ.НачальныйОстаток, 0) + ЕСТЬNULL(СтоимостьВА_НУ.Поступление, 0) - ЕСТЬNULL(СтоимостьВА_НУ.Выбытие, 0) КАК СтоимостьФА_НУ
	               |ИЗ
	               |	ВТ_ФиксированныеАктивыУчитываемыеОтдельно КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СтоимостьВА_НУ.Организация КАК Организация,
	               |			СтоимостьВА_НУ.Субконто1 КАК Субконто1,
	               |			СтоимостьВА_НУ.Счет КАК Счет,
	               |			СУММА(ВЫБОР
	               |					КОГДА СтоимостьВА_НУ.Субконто2 В (&ДвижениеПоступления)
	               |						ТОГДА СтоимостьВА_НУ.СуммаОборотДт - СтоимостьВА_НУ.СуммаОборотКт
	               |				КОНЕЦ) КАК Поступление,
	               |			СУММА(ВЫБОР
	               |					КОГДА СтоимостьВА_НУ.Субконто2 = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.Выбытие) ИЛИ СтоимостьВА_НУ.Субконто2 = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.Перемещение)
	               |						ТОГДА СтоимостьВА_НУ.СуммаОборотКт - СтоимостьВА_НУ.СуммаОборотДт
	               |				КОНЕЦ) КАК Выбытие,
	               |			МАКСИМУМ(СтоимостьВА_НУ.СуммаНачальныйОстатокДт) КАК НачальныйОстаток,
	               |			МАКСИМУМ(СтоимостьВА_НУ.СуммаКонечныйОстатокДт) КАК КонечныйОстаток
	               |		ИЗ
	               |			РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(
	               |					&ДатаНач,
	               |					&ДатаКон,
	               |					,
	               |					,
	               |					Счет В ИЕРАРХИИ (&СчетУчетаВА),
	               |					,
	               |					ВидУчета = &ВидУчетаНУ
	               |						И Организация В(&СписокОрганизаций)) КАК СтоимостьВА_НУ
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			СтоимостьВА_НУ.Организация,
	               |			СтоимостьВА_НУ.Субконто1,
	               |			СтоимостьВА_НУ.Счет) КАК СтоимостьВА_НУ
	               |		ПО ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив = СтоимостьВА_НУ.Субконто1
				   |			И ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Организация = СтоимостьВА_НУ.Организация
	               |ИТОГИ
	               |	МАКСИМУМ(ВидЛьготыФА),
	               |	СУММА(СтоимостьФА_НУ)
	               |ПО
				   |	Организация,
				   |	ФиксированныйАктив,				   
	               |	СчетУчетаФА";
			   
	Запрос.УстановитьПараметр("ДатаНач", 									НачалоГода(мКонДата));			   
	Запрос.УстановитьПараметр("ДатаКон", 									мКонГраница);	
	Запрос.УстановитьПараметр("УчитываетсяОтдельноОтСтоимостногоБаланса",	Перечисления.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету);	
	Запрос.УстановитьПараметр("СписокОрганизаций",							ПроцедурыНалоговогоУчета.СформироватьСписокСтруктурныхЕдиниц(Перечисления.РазделыНалоговогоУчета.КПН, , Организация));
	Запрос.УстановитьПараметр("ВидУчетаНУ",									Справочники.ВидыУчетаНУ.НУ);
	
	СписокВидовДвиженияПоступления = Новый СписокЗначений;
	СписокВидовДвиженияПоступления.Добавить(Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
	// Этот вид движения участвует в стоимостном балансе начиная с 01.01.2009, ст. 117 НК
	Если НачалоГода(мКонДата) >= Дата(2009,1,1)Тогда
		СписокВидовДвиженияПоступления.Добавить(Перечисления.ВидыДвиженияСтоимостиФА.УвеличениеСтоимостиЗаСчетРемонта);
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ДвижениеПоступления",	СписокВидовДвиженияПоступления);
	
	Запрос.УстановитьПараметр("СчетУчетаВА",			ПланыСчетов.Налоговый.ВАНеВключенныеВСтоимостнойБаланс);	
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаФА = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаФА.Следующий() Цикл
			Движение 					= Движения.ФиксированныеАктивыУчитываемыеОтдельно.Добавить();
			Движение.Период 			= СтруктураШапкиДокумента.Дата;
			Движение.Организация 		= ВыборкаОрганизация.Организация;
			Движение.ФиксированныйАктив = ВыборкаФА.ФиксированныйАктив;
			Движение.Событие 			= Перечисления.СобытияФАУчитываемыхОтдельно.ВключениеВСоставГруппы;		
			Движение.ВидЛьготыФА 		= ВыборкаФА.ВидЛьготыФА;		
			
			ВыборкаДетали 				= ВыборкаФА.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДетали.Следующий() Цикл
				Если ВыборкаДетали.СтоимостьФА_НУ = 0 ТОгда
					Продолжить;
				КонецЕсли;	
				ПроводкаНУ 				= мПроводкиНУ.Добавить();
				ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация  = ВыборкаОрганизация.Организация;
				
				ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.ВАВключенныеВСтоимостнойБаланс;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, ВыборкаДетали.ФиксированныйАктив);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
				ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.НУ;
				
				ПроводкаНУ.СчетКт 		= ВыборкаДетали.СчетУчетаФА;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, ВыборкаДетали.ФиксированныйАктив);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
				ПроводкаНУ.ВидУчетаКт 	= Справочники.ВидыУчетаНУ.НУ;
				
				ПроводкаНУ.Сумма 		= ВыборкаДетали.СтоимостьФА_НУ;
				ПроводкаНУ.Содержание 	= "Активы, учитываемые отдельно, включены в стоимостный баланс групп (НУ)";
				ПроводкаНУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно;
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры // ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно_НУ

// Процедура формирует корреспонденции в НУ по отражению дохода от превышения стоимости выбывших ФА
// над стоимостным балансом группы НУ.
//
// Параметры:
// 	ВыборкаВидовОпераций - выборка из результата запроса, содержаща группировки по ГРуппамФА и ФА.
// 	Содержит поля
//		ГруппаУчетаФА 	- Группа НУ (если учет в целом по группе)	либо ФА, если учет в группе ведется по объектам
//		ГруппаФА 		- 	Группа налогового учета
//		ФиксированныйАктив  - Фиксирвоанный актив
//		СчетУчетаФА			- Счет учета фиксированного актива в НУ
//		ВидУчетаВГруппеФА	- Вид учета в группе: "по объектам"/ "по группе в целом"
//		СостояниеФиксированногоАктива - состояние актива в налоговом учете:	"принят к учету"/"выбыл"/ "снят с учета"
//		ИтоговаяСтоимостьГруппыНУ	 - Стоимостный баланс по ГруппеУчетаФА
//		СтоимостьНУ					 - Стоимостный баланс по фиксированному активу
//		ВидОперацииПоАктиву			 - Вид регламентой операции (из числа взаимоисключающих), которая выполняется с активом в документе:
//									 1 - Признание дохода от превышения стоимости выбывших активов над стоимостным балансом группы
//									 2 - Списание стоимостного баланса при выбытии всех активов группы
//									 3 - Списание стоимостного баланса группы, если величина баланса менее установленого минимума (с. 111, п.2)
//									 4 - Начисление амортизации по активу
//		ПрименяемаяНормаАмортизации - Применяемая норма амортизации
//		РасчетнаяАмортизацияФА		- Сумма расчетной амортизации по активу
//		УчитыватьОтдельно			- Признак того, что данный актив учитывается отдельно от стоимостного баланса группы
//
Процедура ВыполнитьПризнаниеДоходаОтПревышенияСтоимостиВыбывшегоАктива_НУ(ВыборкаВидовОпераций, СтруктураШапкиДокумента, Отказ, Заголовок);
	ВыборкаГрупп = ВыборкаВидовОпераций.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока  ВыборкаГрупп.Следующий() Цикл
		ВыборкаФА = ВыборкаГрупп.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока  ВыборкаФА.Следующий() Цикл		
			ВыборкаДетали = ВыборкаФА.Выбрать();			
			
			Пока ВыборкаДетали.Следующий() Цикл
				Если ВыборкаДетали.СтоимостьНУ = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ПроводкаНУ 				= мПроводкиНУ.Добавить();
				ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация 	= ВыборкаДетали.Организация;
				
				ПроводкаНУ.СчетДт 		= ВыборкаДетали.СчетУчетаФА;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, ВыборкаДетали.ФиксированныйАктив);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, Перечисления.ВидыДвиженияСтоимостиФА.СписаниеОтрицательногоБалансаГруппы);
				ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.НУ;
				
				ПроводкаНУ.СчетКт 		= ПланыСчетов.Налоговый.ДоходыОтРеализацииВнеоборотныхАктивов;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, Справочники.Доходы.ДоходыОтВыбытияФА);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, ВыборкаДетали.ФиксированныйАктив);
				ПроводкаНУ.ВидУчетаКт 	= Справочники.ВидыУчетаНУ.НУ;
				
				ПроводкаНУ.Сумма 				   = -ВыборкаДетали.СтоимостьНУ;
				ПроводкаНУ.Содержание 			   = "Признан доход от превышения доходов выбывших ФА над стоимостным балансом группы/подгруппы";
				ПроводкаНУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА;
				
				// отражаем временные разницы по НУ
				Если СтруктураШапкиДокумента.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
					ПроводкаНУ 				= мПроводкиНУ.Добавить();
					ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;					
					ПроводкаНУ.Организация 	= ВыборкаДетали.Организация;
					
					ПроводкаНУ.СчетДт 		= ВыборкаДетали.СчетУчетаФА;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, ВыборкаДетали.ФиксированныйАктив);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, Перечисления.ВидыДвиженияСтоимостиФА.СписаниеОтрицательногоБалансаГруппы);					
					ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.ВР;

										
					ПроводкаНУ.СчетКт 		= ПланыСчетов.Налоговый.ДоходыОтРеализацииВнеоборотныхАктивов;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, Справочники.Доходы.ДоходыОтВыбытияФА);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, ВыборкаДетали.ФиксированныйАктив);
					ПроводкаНУ.ВидУчетаКт 	= Справочники.ВидыУчетаНУ.ВР;
					
					ПроводкаНУ.Сумма 		 		   = ВыборкаДетали.СтоимостьНУ;
					ПроводкаНУ.Содержание 			   = "Признан доход от превышения доходов выбывших ФА над стоимостным балансом группы/подгруппы";					
					ПроводкаНУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;		
	КонецЦикла;		
КонецПроцедуры	// ВыполнитьПризнаниеДоходаОтПревышенияСтоимостиВыбывшегоАктива_НУ

// Процедура формирует корреспонденции в НУ по списанию стоимостного
// баланса группы при выбытии всех, входищих в нее, активов
//
// Параметры:
// 	ВыборкаВидовОпераций - выборка из результата запроса, содержаща группировки по ГРуппамФА и ФА.
// 	Содержит поля
//		ГруппаУчетаФА 	- Группа НУ (если учет в целом по группе)	либо ФА, если учет в группе ведется по объектам
//		ГруппаФА 		- 	Группа налогового учета
//		ФиксированныйАктив  - Фиксирвоанный актив
//		СчетУчетаФА			- Счет учета фиксированного актива в НУ
//		ВидУчетаВГруппеФА	- Вид учета в группе: "по объектам"/ "по группе в целом"
//		СостояниеФиксированногоАктива - состояние актива в налоговом учете:	"принят к учету"/"выбыл"/ "снят с учета"
//		ИтоговаяСтоимостьГруппыНУ	 - Стоимостный баланс по ГруппеУчетаФА
//		СтоимостьНУ					 - Стоимостный баланс по фиксированному активу
//		ВидОперацииПоАктиву			 - Вид регламентой операции (из числа взаимоисключающих), которая выполняется с активом в документе:
//									 1 - Признание дохода от превышения стоимости выбывших активов над стоимостным балансом группы
//									 2 - Списание стоимостного баланса при выбытии всех активов группы
//									 3 - Списание стоимостного баланса группы, если величина баланса менее установленого минимума (с. 111, п.2)
//									 4 - Начисление амортизации по активу
//		ПрименяемаяНормаАмортизации - Применяемая норма амортизации
//		РасчетнаяАмортизацияФА		- Сумма расчетной амортизации по активу
//		УчитыватьОтдельно			- Признак того, что данный актив учитывается отдельно от стоимостного баланса группы
//
Процедура ВыполнитьСписаниеПриВыбытииВсехАктивовГруппы_НУ(ВыборкаВидовОпераций, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ВыборкаГрупп = ВыборкаВидовОпераций.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока  ВыборкаГрупп.Следующий() Цикл		
		ВыборкаФА = ВыборкаГрупп.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока  ВыборкаФА.Следующий() Цикл		
			ВыборкаДетали = ВыборкаФА.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				ПроводкаНУ 				= мПроводкиНУ.Добавить();
				ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация 	= ВыборкаДетали.Организация;
				
				ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.ПрочиеРасходы;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоДт, 1, Справочники.СтатьиЗатрат.СписаниеПриВыбытииВсехФАГруппы);			
				ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.НУ;
				
				ПроводкаНУ.СчетКт 		= ВыборкаДетали.СчетУчетаФА;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, ВыборкаДетали.ФиксированныйАктив);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Перечисления.ВидыДвиженияСтоимостиФА.СписаниеПриВыбытииВсехАктивовГруппы);
				ПроводкаНУ.ВидУчетаКт 	= Справочники.ВидыУчетаНУ.НУ;
				
				ПроводкаНУ.Сумма 				   = ВыборкаДетали.СтоимостьНУ;
				ПроводкаНУ.Содержание 			   = "Стоимость группы, все активы которой выбыли, отнесена на вычеты";
				ПроводкаНУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеПриВыбытииВсехФАГруппы;
				// отражаем временные разницы по НУ
				Если СтруктураШапкиДокумента.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
					ПроводкаНУ 				= мПроводкиНУ.Добавить();
					ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;					
					ПроводкаНУ.Организация 	= ВыборкаДетали.Организация;
										
					ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.ПрочиеРасходы;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоДт, 1, Справочники.СтатьиЗатрат.СписаниеПриВыбытииВсехФАГруппы);			
					ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.ВР;
					
					ПроводкаНУ.СчетКт 		= ВыборкаДетали.СчетУчетаФА;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, ВыборкаДетали.ФиксированныйАктив);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Перечисления.ВидыДвиженияСтоимостиФА.СписаниеПриВыбытииВсехАктивовГруппы);
					ПроводкаНУ.ВидУчетаКт 	= Справочники.ВидыУчетаНУ.ВР;
					
					ПроводкаНУ.Сумма 				   = -ВыборкаДетали.СтоимостьНУ;
					ПроводкаНУ.Содержание 			   = "Стоимость группы, все активы которой выбыли, отнесена на вычеты";
					ПроводкаНУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеПриВыбытииВсехФАГруппы;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;		
	КонецЦикла;		
КонецПроцедуры // ВыполнитьСписаниеПриВыбытииВсехАктивовГруппы_НУ

// Процедура формирует корреспонденции в НУ по списанию стоимостного
// баланса группы, если данная величина менее установленной налоговым законодательством (ст. 111, п.2)
//
// Параметры:
// 	ВыборкаВидовОпераций - выборка из результата запроса, содержаща группировки по ГРуппамФА и ФА.
// 	Содержит поля
//		ГруппаУчетаФА 	- Группа НУ (если учет в целом по группе)	либо ФА, если учет в группе ведется по объектам
//		ГруппаФА 		- 	Группа налогового учета
//		ФиксированныйАктив  - Фиксирвоанный актив
//		СчетУчетаФА			- Счет учета фиксированного актива в НУ
//		ВидУчетаВГруппеФА	- Вид учета в группе: "по объектам"/ "по группе в целом"
//		СостояниеФиксированногоАктива - состояние актива в налоговом учете:	"принят к учету"/"выбыл"/ "снят с учета"
//		ИтоговаяСтоимостьГруппыНУ	 - Стоимостный баланс по ГруппеУчетаФА
//		СтоимостьНУ					 - Стоимостный баланс по фиксированному активу
//		ВидОперацииПоАктиву			 - Вид регламентой операции (из числа взаимоисключающих), которая выполняется с активом в документе:
//									 1 - Признание дохода от превышения стоимости выбывших активов над стоимостным балансом группы
//									 2 - Списание стоимостного баланса при выбытии всех активов группы
//									 3 - Списание стоимостного баланса группы, если величина баланса менее установленого минимума (с. 111, п.2)
//									 4 - Начисление амортизации по активу
//		ПрименяемаяНормаАмортизации - Применяемая норма амортизации
//		РасчетнаяАмортизацияФА		- Сумма расчетной амортизации по активу
//		УчитыватьОтдельно			- Признак того, что данный актив учитывается отдельно от стоимостного баланса группы
//
Процедура ВыполнитьСписаниеГруппМенееМинимума_НУ(ВыборкаВидовОпераций, СтруктураШапкиДокумента, Отказ, Заголовок);
	ВыборкаГрупп = ВыборкаВидовОпераций.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока  ВыборкаГрупп.Следующий() Цикл		
		ВыборкаФА = ВыборкаГрупп.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока  ВыборкаФА.Следующий() Цикл		
			ВыборкаДетали = ВыборкаФА.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				Если ВыборкаДетали.СтоимостьНУ = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ПроводкаНУ 				= мПроводкиНУ.Добавить();
				ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;				
				ПроводкаНУ.Организация 	= ВыборкаДетали.Организация;
				
				ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.ПрочиеРасходы;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, Справочники.СтатьиЗатрат.СписаниеСтоимостногоБалансаГруппыМенееМинимума);			
				ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.НУ;
				
				ПроводкаНУ.СчетКт 		= ВыборкаДетали.СчетУчетаФА;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, ВыборкаДетали.ФиксированныйАктив);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Перечисления.ВидыДвиженияСтоимостиФА.СписаниеСтоимостногоБалансаГруппыМенееМинимума);
				ПроводкаНУ.ВидУчетаКт 	= Справочники.ВидыУчетаНУ.НУ;
				
				ПроводкаНУ.Сумма 				   = ВыборкаДетали.СтоимостьНУ;
				ПроводкаНУ.Содержание 			   = "Стоимость группы менее минимума отнесена на вычеты";
				ПроводкаНУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеСтоимостногоБалансаГруппыМенееМинимума;
				// отражаем временные разницы по НУ
				Если СтруктураШапкиДокумента.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
					ПроводкаНУ 				= мПроводкиНУ.Добавить();
					ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;					
					ПроводкаНУ.Организация 	= ВыборкаДетали.Организация;
										
					ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.ПрочиеРасходы;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, Справочники.СтатьиЗатрат.СписаниеСтоимостногоБалансаГруппыМенееМинимума);								
					ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.ВР;
					
					ПроводкаНУ.СчетКт 		= ВыборкаДетали.СчетУчетаФА;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, ВыборкаДетали.ФиксированныйАктив);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Перечисления.ВидыДвиженияСтоимостиФА.СписаниеСтоимостногоБалансаГруппыМенееМинимума);
					ПроводкаНУ.ВидУчетаКт 	= Справочники.ВидыУчетаНУ.ВР;
				                                                    					
					ПроводкаНУ.Сумма 				   = -ВыборкаДетали.СтоимостьНУ;
					ПроводкаНУ.Содержание 			   = "Стоимость группы менее минимума отнесена на вычеты";
					ПроводкаНУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеСтоимостногоБалансаГруппыМенееМинимума;
				КонецЕсли;	
				
			КонецЦикла;	
		КонецЦикла;		
	КонецЦикла;		
КонецПроцедуры	// ВыполнитьСписаниеГруппМенееМинимума_НУ

// Процедура формирует корреспонденции по отражению амортизации в налоговом учете
//
// Параметры:
// 	ВыборкаВидовОпераций - выборка из результата запроса, содержаща группировки по ГРуппамФА и ФА.
// 	Содержит поля
//		ГруппаУчетаФА 	- Группа НУ (если учет в целом по группе)	либо ФА, если учет в группе ведется по объектам
//		ГруппаФА 		- 	Группа налогового учета
//		ФиксированныйАктив  - Фиксирвоанный актив
//		СчетУчетаФА			- Счет учета фиксированного актива в НУ
//		ВидУчетаВГруппеФА	- Вид учета в группе: "по объектам"/ "по группе в целом"
//		СостояниеФиксированногоАктива - состояние актива в налоговом учете:	"принят к учету"/"выбыл"/ "снят с учета"
//		ИтоговаяСтоимостьГруппыНУ	 - Стоимостный баланс по ГруппеУчетаФА
//		СтоимостьНУ					 - Стоимостный баланс по фиксированному активу
//		ВидОперацииПоАктиву			 - Вид регламентой операции (из числа взаимоисключающих), которая выполняется с активом в документе:
//									 1 - Признание дохода от превышения стоимости выбывших активов над стоимостным балансом группы
//									 2 - Списание стоимостного баланса при выбытии всех активов группы
//									 3 - Списание стоимостного баланса группы, если величина баланса менее установленого минимума (с. 111, п.2)
//									 4 - Начисление амортизации по активу
//		ПрименяемаяНормаАмортизации - Применяемая норма амортизации
//		РасчетнаяАмортизацияФА		- Сумма расчетной амортизации по активу
//		УчитыватьОтдельно			- Признак того, что данный актив учитывается отдельно от стоимостного баланса группы
//
Процедура ВыполнитьРасчетАмортизации_НУ(ВыборкаВидовОпераций, СтруктураШапкиДокумента, Отказ, Заголовок);
	ВыборкаГрупп = ВыборкаВидовОпераций.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока  ВыборкаГрупп.Следующий() Цикл		
		ВыборкаФА = ВыборкаГрупп.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока  ВыборкаФА.Следующий() Цикл		
			ВыборкаДетали = ВыборкаФА.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				Если Не ВыборкаДетали.РасчетнаяАмортизацияФА = 0 Тогда				
					ПроводкаНУ 				= мПроводкиНУ.Добавить();
					ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;
					ПроводкаНУ.Организация 	= ВыборкаДетали.Организация;
					ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.ПрочиеРасходы;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, Справочники.СтатьиЗатрат.АмортизацияФА);
					ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.НУ;
					
					ПроводкаНУ.СчетКт 		= ВыборкаДетали.СчетУчетаФА;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, ВыборкаДетали.ФиксированныйАктив);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Перечисления.ВидыДвиженияСтоимостиФА.Амортизация);
					ПроводкаНУ.ВидУчетаКт 	= Справочники.ВидыУчетаНУ.НУ;
					ПроводкаНУ.Сумма 		= ВыборкаДетали.РасчетнаяАмортизацияФА;
					ПроводкаНУ.Содержание 	= "Начислена амортизация (НУ)";	
					
					ПроводкаНУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияФАНУ;
					// отражаем временные разницы по НУ
					Если СтруктураШапкиДокумента.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
						ПроводкаНУ 				= мПроводкиНУ.Добавить();
						ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;
						ПроводкаНУ.Организация 	= ВыборкаДетали.Организация;
						ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.ПрочиеРасходы;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, Справочники.СтатьиЗатрат.АмортизацияФА);
						
						ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.ВР;						
						ПроводкаНУ.Сумма 		= - ВыборкаДетали.РасчетнаяАмортизацияФА;
						ПроводкаНУ.Содержание 	= "Начислена амортизация (НУ)";						
						ПроводкаНУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияФАНУ;
						// Заполняем кредитовую часть проводки
						Если СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
							ПроводкаНУ.СчетКт		= ПланыСчетов.Налоговый.ВАВключенныеВСтоимостнойБаланс;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, ВыборкаДетали.ФиксированныйАктив);					
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Перечисления.ВидыДвиженияСтоимостиФА.Амортизация);					
							
							ПроводкаНУ.ВидУчетаКт   = Справочники.ВидыУчетаНУ.ВР;
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;		
		КонецЦикла;		
	КонецЦикла;		
КонецПроцедуры	// ВыполнитьРасчетАмортизации_НУ

// Процедура выполняет расчет допустимого вычета по расходам на ремонтв соответсттвии со ст. 113 НК РК
// и его отражение в налоговом учете
Процедура РасчетВычетовПоРасходамНаРемонтФАНУ(СтруктураШапкиДокумента, Отказ, Заголовок);	
	
	Запрос = Новый Запрос;		
	
	// отбираем данные только по ФА, находящимся на учете.
	// Выбывший актив может иметь стоимостной баланс и участвовать в учете ст. 
	СостоянияФА = Новый СписокЗначений();	
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);
	
	Запрос.УстановитьПараметр("СостоянияФА", 	СостоянияФА);		
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбъектыНалоговогоУчетаФА.Организация КАК Организация,
	               |	ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК ФиксированныйАктив,
	               |	ОбъектыНалоговогоУчетаФА.ГруппаНУ КАК ГруппаФА,
	               |	ОбъектыНалоговогоУчетаФА.СостояниеФиксированногоАктива КАК СостояниеФиксированногоАктива,
	               |	ВЫБОР
	               |		КОГДА ФиксированныеАктивыУчитываемыеОтдельно.Событие ЕСТЬ NULL 
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ВходитВСтоимостныйБалансГруппы
	               |ПОМЕСТИТЬ ВТ_ОбъектыНалоговогоУчетаФА
	               |ИЗ
	               |	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	               |			&ДатаОкончания,
	               |			Организация В (&СписокОрганизаций)
	               |				И СостояниеФиксированногоАктива В (&СостоянияФА)) КАК ОбъектыНалоговогоУчетаФА
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(&ДатаОкончания, Организация В (&СписокОрганизаций)) КАК ФиксированныеАктивыУчитываемыеОтдельно
	               |		ПО ОбъектыНалоговогоУчетаФА.Организация = ФиксированныеАктивыУчитываемыеОтдельно.Организация
	               |			И ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = ФиксированныеАктивыУчитываемыеОтдельно.ФиксированныйАктив
	               |			И ((НЕ ФиксированныеАктивыУчитываемыеОтдельно.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияФАУчитываемыхОтдельно.ВключениеВСоставГруппы)))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтоимостьВА_НУ.Организация КАК Организация,
	               |	СтоимостьВА_НУ.Субконто1 КАК ФиксированныйАктив,
	               |	СтоимостьВА_НУ.Счет КАК Счет,
	               |	СУММА(ВЫБОР
	               |			КОГДА СтоимостьВА_НУ.Субконто2 В (&ДвижениеПоступления)
	               |				ТОГДА СтоимостьВА_НУ.СуммаОборотДт - СтоимостьВА_НУ.СуммаОборотКт
	               |		КОНЕЦ) КАК Поступление,
	               |	СУММА(ВЫБОР
	               |			КОГДА СтоимостьВА_НУ.Субконто2 = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.Выбытие) ИЛИ СтоимостьВА_НУ.Субконто2 = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.Перемещение)
	               |				ТОГДА СтоимостьВА_НУ.СуммаОборотКт - СтоимостьВА_НУ.СуммаОборотДт
	               |		КОНЕЦ) КАК Выбытие,
	               |	МАКСИМУМ(СтоимостьВА_НУ.СуммаНачальныйОстатокДт) КАК НачальныйОстаток,
	               |	МАКСИМУМ(СтоимостьВА_НУ.СуммаКонечныйОстатокДт) КАК КонечныйОстаток
	               |ПОМЕСТИТЬ ВТ_СтоимостьВА_НУ
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(
	               |			&ДатаНачала,
	               |			&ДатаОкончания,
	               |			,
	               |			,
	               |			Счет В ИЕРАРХИИ (&СчетУчетаВА),
	               |			,
	               |			((СУБКОНТО1, ОРГАНИЗАЦИЯ) В
	               |					(ВЫБРАТЬ
	               |						ВЫРАЗИТЬ(ВТ_ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК Справочник.ОсновныеСредства),
	               |						ВТ_ОбъектыНалоговогоУчетаФА.Организация
	               |					ИЗ
	               |						ВТ_ОбъектыНалоговогоУчетаФА)
	               |				ИЛИ (СУБКОНТО1, ОРГАНИЗАЦИЯ) В
	               |					(ВЫБРАТЬ
	               |						ВЫРАЗИТЬ(ВТ_ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК Справочник.НематериальныеАктивы),
	               |						ВТ_ОбъектыНалоговогоУчетаФА.Организация
	               |					ИЗ
	               |						ВТ_ОбъектыНалоговогоУчетаФА))
	               |				И ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)) КАК СтоимостьВА_НУ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтоимостьВА_НУ.Организация,
	               |	СтоимостьВА_НУ.Субконто1,
	               |	СтоимостьВА_НУ.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗатратыНаРемонтВА_НУ.Субконто1 КАК ФиксированныйАктив,
	               |	ЗатратыНаРемонтВА_НУ.Субконто3 КАК СтатьяЗатрат,
	               |	ЗатратыНаРемонтВА_НУ.Организация КАК Организация,
	               |	ЗатратыНаРемонтВА_НУ.СуммаОборотДт - ЗатратыНаРемонтВА_НУ.СуммаОборотКт  КАК СуммаОборотДт
	               |ПОМЕСТИТЬ ВТ_ЗатратыНаРемонтВА_НУ
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(
	               |			&ДатаНачала,
	               |			&ДатаОкончания,
	               |			,
	               |			Счет В ИЕРАРХИИ (&СчетРемонтаВА_НУ),
	               |			&СписокСубконтоСчетаРемонта,
	               |			Организация В (&СписокОрганизаций)
	               |				И ((СУБКОНТО1, ОРГАНИЗАЦИЯ) В
	               |						(ВЫБРАТЬ
	               |							ВЫРАЗИТЬ(ВТ_ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК Справочник.ОсновныеСредства),
	               |							ВТ_ОбъектыНалоговогоУчетаФА.Организация
	               |						ИЗ
	               |							ВТ_ОбъектыНалоговогоУчетаФА)
	               |					ИЛИ (СУБКОНТО1, ОРГАНИЗАЦИЯ) В
	               |						(ВЫБРАТЬ
	               |							ВЫРАЗИТЬ(ВТ_ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК Справочник.НематериальныеАктивы),
	               |							ВТ_ОбъектыНалоговогоУчетаФА.Организация
	               |						ИЗ
	               |							ВТ_ОбъектыНалоговогоУчетаФА))
	               |				И Субконто2 = ЗНАЧЕНИЕ(Перечисление.ВидыРемонтаВА.Капитальный)
	               |				И ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ), КорСчет НЕ В иерархии(Значение(ПланСчетов.Налоговый.ИтоговаяПрибыльИтоговыйУбыток_), Значение(ПланСчетов.Налоговый.Производство_))
	               |			,
	               |			) КАК ЗатратыНаРемонтВА_НУ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбъектыНалоговогоУчетаФА.ГруппаФА КАК ГруппаФА,
	               |	СУММА(ЕСТЬNULL(СтоимостьВА_НУ.НачальныйОстаток, 0) + ЕСТЬNULL(СтоимостьВА_НУ.Поступление, 0) - ЕСТЬNULL(СтоимостьВА_НУ.Выбытие, 0)) КАК СтоимостьНУ,
	               |	ВЫБОР
	               |		КОГДА ОбъектыНалоговогоУчетаФА.ГруппаФА.ВидУчетаВГруппеФА = ЗНАЧЕНИЕ(Перечисление.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам)
	               |			ТОГДА ОбъектыНалоговогоУчетаФА.ФиксированныйАктив
	               |		ИНАЧЕ ОбъектыНалоговогоУчетаФА.ГруппаФА
	               |	КОНЕЦ КАК ГруппаУчетаФА,
	               |	СУММА(ЕСТЬNULL(ЗатратыНаРемонтВА_НУ.СуммаОборотДт, 0)) КАК ЗатратыНаРемонтНУ
	               |ПОМЕСТИТЬ ВТ_ИтогиПоГруппамНУ
	               |ИЗ
	               |	ВТ_ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СУММА(ЗатратыНаРемонтВА_НУ.СуммаОборотДт) КАК СуммаОборотДт,
	               |			ЗатратыНаРемонтВА_НУ.Организация КАК Организация,
	               |			ЗатратыНаРемонтВА_НУ.ФиксированныйАктив КАК ФиксированныйАктив
	               |		ИЗ
	               |			ВТ_ЗатратыНаРемонтВА_НУ КАК ЗатратыНаРемонтВА_НУ
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ЗатратыНаРемонтВА_НУ.Организация,
	               |			ЗатратыНаРемонтВА_НУ.ФиксированныйАктив) КАК ЗатратыНаРемонтВА_НУ
	               |		ПО ОбъектыНалоговогоУчетаФА.Организация = ЗатратыНаРемонтВА_НУ.Организация
	               |			И ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = ЗатратыНаРемонтВА_НУ.ФиксированныйАктив
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьВА_НУ КАК СтоимостьВА_НУ
	               |		ПО (СтоимостьВА_НУ.Организация = ОбъектыНалоговогоУчетаФА.Организация)
	               |			И (СтоимостьВА_НУ.ФиксированныйАктив = ОбъектыНалоговогоУчетаФА.ФиксированныйАктив)
	               |			И (ОбъектыНалоговогоУчетаФА.ВходитВСтоимостныйБалансГруппы = ИСТИНА)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОбъектыНалоговогоУчетаФА.ГруппаФА,
	               |	ВЫБОР
	               |		КОГДА ОбъектыНалоговогоУчетаФА.ГруппаФА.ВидУчетаВГруппеФА = ЗНАЧЕНИЕ(Перечисление.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам)
	               |			ТОГДА ОбъектыНалоговогоУчетаФА.ФиксированныйАктив
	               |		ИНАЧЕ ОбъектыНалоговогоУчетаФА.ГруппаФА
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив
	               |				И СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ОбъектыНалоговогоУчетаФА.Организация
	               |			ТОГДА 1
	               |		КОГДА ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив
	               |				И СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |			ТОГДА 2						   
	               |		КОГДА СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ОбъектыНалоговогоУчетаФА.Организация
	               |			ТОГДА 3
	               |		КОГДА СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |			ТОГДА 4
	               |		ИНАЧЕ 5
	               |	КОНЕЦ КАК Приоритет,
	               |	ОбъектыНалоговогоУчетаФА.ГруппаФА КАК ГруппаФА,
	               |	ОбъектыНалоговогоУчетаФА.Организация КАК Организация,
	               |	ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК ФиксированныйАктив,
	               |	ОбъектыНалоговогоУчетаФА.СостояниеФиксированногоАктива КАК СостояниеФиксированногоАктива,
	               |	СведенияОГруппахФиксированныхАктивовСрезПоследних.ГруппаФА.ВидУчетаВГруппеФА КАК ВидУчетаВГруппеФА,
	               |	СведенияОГруппахФиксированныхАктивовСрезПоследних.ВычетНаРемонт КАК ВычетНаРемонт
	               |ПОМЕСТИТЬ ВТ_СведенияОГруппахФА
	               |ИЗ
	               |	ВТ_ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОГруппахФиксированныхАктивов.СрезПоследних(&ДатаОкончания, ) КАК СведенияОГруппахФиксированныхАктивовСрезПоследних
	               |		ПО (ОбъектыНалоговогоУчетаФА.Организация = СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация
	               |				ИЛИ СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	               |			И (ОбъектыНалоговогоУчетаФА.ГруппаФА = СведенияОГруппахФиксированныхАктивовСрезПоследних.ГруппаФА
	               |					И СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив = НЕОПРЕДЕЛЕНО
	               |				ИЛИ СведенияОГруппахФиксированныхАктивовСрезПоследних.ГруппаФА.ВидУчетаВГруппеФА = ЗНАЧЕНИЕ(Перечисление.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам)
	               |					И ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив)
	               |ГДЕ
	               |	(НЕ ОбъектыНалоговогоУчетаФА.ГруппаФА = ЗНАЧЕНИЕ(Справочник.ГруппыНалоговогоУчетаФА.ПустаяСсылка))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГруппыФА.ГруппаФА КАК ГруппаФА,
	               |	ГруппыФА.Организация КАК Организация,
	               |	ГруппыФА.ФиксированныйАктив КАК ФиксированныйАктив,
	               |	ГруппыФА.СостояниеФиксированногоАктива КАК СостояниеФиксированногоАктива,
	               |	СведенияОГруппахФА.ГруппаФА.ВидУчетаВГруппеФА КАК ВидУчетаВГруппеФА,
	               |	СведенияОГруппахФА.ВычетНаРемонт КАК ВычетНаРемонт,
	               |	ВЫБОР
	               |		КОГДА ГруппыФА.ГруппаФА.ВидУчетаВГруппеФА = ЗНАЧЕНИЕ(Перечисление.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам)
	               |			ТОГДА ГруппыФА.ФиксированныйАктив
	               |		ИНАЧЕ ГруппыФА.ГруппаФА
	               |	КОНЕЦ КАК ГруппаУчетаФА
	               |ПОМЕСТИТЬ ВТ_ГруппыФА
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ГруппыФА.ГруппаФА КАК ГруппаФА,
	               |		ГруппыФА.Организация КАК Организация,
	               |		ГруппыФА.ФиксированныйАктив КАК ФиксированныйАктив,
	               |		МИНИМУМ(ГруппыФА.Приоритет) КАК Приоритет,
	               |		ГруппыФА.СостояниеФиксированногоАктива КАК СостояниеФиксированногоАктива
	               |	ИЗ
	               |		ВТ_СведенияОГруппахФА КАК ГруппыФА
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ГруппыФА.ФиксированныйАктив,
	               |		ГруппыФА.Организация,
	               |		ГруппыФА.ГруппаФА,
	               |		ГруппыФА.СостояниеФиксированногоАктива) КАК ГруппыФА
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОГруппахФА КАК СведенияОГруппахФА
	               |		ПО ГруппыФА.Организация = СведенияОГруппахФА.Организация
	               |			И ГруппыФА.ФиксированныйАктив = СведенияОГруппахФА.ФиксированныйАктив
	               |			И ГруппыФА.Приоритет = СведенияОГруппахФА.Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГруппыФА.Организация КАК Организация,
	               |	ГруппыФА.ГруппаФА КАК ГруппаФА,
	               |	ГруппыФА.ФиксированныйАктив КАК ФиксированныйАктив,
	               |	ГруппыФА.ВидУчетаВГруппеФА КАК ВидУчетаВГруппеФА,
	               |	ГруппыФА.СостояниеФиксированногоАктива,
	               |	ГруппыФА.ВычетНаРемонт КАК ВычетНаРемонт,
	               |	ЗатратыНаРемонтВА_НУ.СтатьяЗатрат КАК СтатьяЗатрат,
	               |	ЕСТЬNULL(ЗатратыНаРемонтВА_НУ.СуммаОборотДт, 0) КАК ЗатратыНаРемонтНУ,
	               |	СтоимостьВА_НУ.Счет КАК СчетУчетаФА,
	               |	ЕСТЬNULL(ИтогиПоГруппамНУ.СтоимостьНУ, 0) КАК ИтоговаяСтоимостьГруппыНУ,
	               |	ЕСТЬNULL(ИтогиПоГруппамНУ.ЗатратыНаРемонтНУ, 0) КАК ИтоговыеЗатратыНаРемонтГруппыНУ,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ИтогиПоГруппамНУ.СтоимостьНУ * ГруппыФА.ВычетНаРемонт / 100, 0) > ИтогиПоГруппамНУ.ЗатратыНаРемонтНУ
	               |			ТОГДА ЕСТЬNULL(ИтогиПоГруппамНУ.ЗатратыНаРемонтНУ, 0)
	               |		ИНАЧЕ ЕСТЬNULL(ИтогиПоГруппамНУ.СтоимостьНУ * ГруппыФА.ВычетНаРемонт / 100, 0)
	               |	КОНЕЦ КАК РазмерДопустимогоВычетаПоГруппе,
	               |	ЕСТЬNULL(СтоимостьВА_НУ.НачальныйОстаток, 0) + ЕСТЬNULL(СтоимостьВА_НУ.Поступление, 0) - ЕСТЬNULL(СтоимостьВА_НУ.Выбытие, 0) КАК СтоимостьНУ,
	               |	ГруппыФА.ГруппаУчетаФА КАК ГруппаУчетаФА
	               |ИЗ
	               |	ВТ_ГруппыФА КАК ГруппыФА
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьВА_НУ КАК СтоимостьВА_НУ
	               |		ПО ГруппыФА.Организация = СтоимостьВА_НУ.Организация
	               |			И ГруппыФА.ФиксированныйАктив = СтоимостьВА_НУ.ФиксированныйАктив
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗатратыНаРемонтВА_НУ КАК ЗатратыНаРемонтВА_НУ
	               |		ПО ГруппыФА.Организация = ЗатратыНаРемонтВА_НУ.Организация
	               |			И ГруппыФА.ФиксированныйАктив = ЗатратыНаРемонтВА_НУ.ФиксированныйАктив
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИтогиПоГруппамНУ КАК ИтогиПоГруппамНУ
	               |		ПО ГруппыФА.ГруппаУчетаФА = ИтогиПоГруппамНУ.ГруппаУчетаФА
	               |ИТОГИ
	               |	МАКСИМУМ(ВидУчетаВГруппеФА),
	               |	МАКСИМУМ(ВычетНаРемонт),
	               |	СУММА(ЗатратыНаРемонтНУ),
	               |	МАКСИМУМ(ИтоговаяСтоимостьГруппыНУ),
	               |	МАКСИМУМ(ИтоговыеЗатратыНаРемонтГруппыНУ),
	               |	МАКСИМУМ(РазмерДопустимогоВычетаПоГруппе),
	               |	МАКСИМУМ(СтоимостьНУ)
	               |ПО
	               |	ГруппаУчетаФА,
	               |	ФиксированныйАктив";
					   
	Запрос.УстановитьПараметр("СостоянияФА", 	СостоянияФА);					   
	Запрос.УстановитьПараметр("ДатаНачала",		НачалоГода(мНачДата));			
	
	Запрос.УстановитьПараметр("ДатаОкончания", 		мКонДата);			
	Запрос.УстановитьПараметр("СписокОрганизаций",	ПроцедурыНалоговогоУчета.СформироватьСписокСтруктурныхЕдиниц(Перечисления.РазделыНалоговогоУчета.КПН, , Организация));
	
	Запрос.УстановитьПараметр("СубконтоВА",			ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы);	
	Запрос.УстановитьПараметр("СчетУчетаВА",		ПланыСчетов.Налоговый.ВнеоборотныеАктивы);	
	
	Запрос.УстановитьПараметр("СчетРемонтаВА_НУ",		ПланыСчетов.Налоговый.РасходыНаРемонтВА);
	
	СписокВидовДвиженияПоступления = Новый СписокЗначений;
	СписокВидовДвиженияПоступления.Добавить(Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
	// Этот вид движения участвует в стоимостном балансе начиная с 01.01.2009, ст. 117 НК
	Если НачалоГода(мКонДата) >= Дата(2009,1,1)Тогда
		СписокВидовДвиженияПоступления.Добавить(Перечисления.ВидыДвиженияСтоимостиФА.УвеличениеСтоимостиЗаСчетРемонта);
	КонецЕсли;		
	Запрос.УстановитьПараметр("ДвижениеПоступления",	СписокВидовДвиженияПоступления);
				
	МассивСубконтоЗатратНаРемонт = Новый Массив;
	МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы);
	МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыРемонтаВА);
	МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
	
	Запрос.УстановитьПараметр("СписокСубконтоСчетаРемонта",	МассивСубконтоЗатратНаРемонт);
		
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	ВыборкаГрупп = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	Пока  ВыборкаГрупп.Следующий() Цикл				
			
		ДопустимыйВычетПоГруппе = Мин(Макс(0,Окр(ВыборкаГрупп.РазмерДопустимогоВычетаПоГруппе,2)), ВыборкаГрупп.ЗатратыНаРемонтНУ);		
		
		ВыборкаФА = ВыборкаГрупп.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока  ВыборкаФА.Следующий() Цикл	
			Если мКонДата>=Дата(2009,1,1) Тогда
				// с 2009 года весь капитальный ремонт относим на увеличение стоимости
				ДоляОтнесенияЗатратПоАктиву = 0;
				ЗатратыНаРемонтКВычету = 0;
			Иначе	
				// до 2009 года капитальный ремонт принимали к вычету в указанном размере от стоимостного баланса
				// группы. Превышение - на увеличение стоимости
				///////////////////////////////////////////////////////
				// Если в группе ведется по-объектный учет			
				// Допустимый вычет рассчитываем по каждому объекту			
				Если ВыборкаФА.ВидУчетаВГруппеФА = Перечисления.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам Тогда				
					ДоляОтнесенияЗатратПоАктиву = 1;
					ЗатратыНаРемонтКВычету = ДопустимыйВычетПоГруппе;
				Иначе	
					ДоляОтнесенияЗатратПоАктиву = ?(ВыборкаГрупп.ЗатратыНаРемонтНУ = 0, 0,ДопустимыйВычетПоГруппе/ВыборкаГрупп.ЗатратыНаРемонтНУ);
					ЗатратыНаРемонтКВычету = Окр(ДоляОтнесенияЗатратПоАктиву * ВыборкаФА.ЗатратыНаРемонтНУ, 2);			
				КонецЕсли;							
			КонецЕсли;	
			ЗатратыНаУвеличениеСтоимости  = Окр(ВыборкаФА.ЗатратыНаРемонтНУ - ЗатратыНаРемонтКВычету, 2);					
			ОсталосьСписать = ЗатратыНаУвеличениеСтоимости;
			
			ВыборкаДетали = ВыборкаФА.Выбрать();
			// списываем расходы по статьям затрат			
			ЕстьЗаписи = ВыборкаДетали.Следующий();
			Пока ЕстьЗаписи и Не ОсталосьСписать = 0 Цикл			
					ДоляСтатьиЗатрат 		= ?(ВыборкаФА.ЗатратыНаРемонтНУ = 0, 0, ВыборкаДетали.ЗатратыНаРемонтНУ/ВыборкаФА.ЗатратыНаРемонтНУ);			
					ВидУчетаВПроводку 		= Справочники.ВидыУчетаНУ.НУ;					
					
					ПроводкаНУ 				= мПроводкиНУ.Добавить();
					ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;
					ПроводкаНУ.Организация 	= ВыборкаДетали.Организация;
					
					// По активам I Группы, если актив Выбыл - расходы на ремонт
					// уменьшают доход от реализации ФА в кодексе до 2009 года
					Если Дата<Дата(2009,1,1) И ВыборкаДетали.ВидУчетаВГруппеФА = Перечисления.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам И 
						ВыборкаДетали.СостояниеФиксированногоАктива = Перечисления.ВидыСостоянийФА.Выбыл Тогда						
						
						ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.ДоходыОтРеализацииВнеоборотныхАктивов;				
						
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, Справочники.Доходы.ДоходыОтВыбытияФА);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, ВыборкаДетали.ФиксированныйАктив);				
						ПроводкаНУ.ВидУчетаДт 	= ВидУчетаВПроводку;
					Иначе					
						ПроводкаНУ.СчетДт 		= ВыборкаДетали.СчетУчетаФА;				
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, ВыборкаДетали.ФиксированныйАктив);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, Перечисления.ВидыДвиженияСтоимостиФА.УвеличениеСтоимостиЗаСчетРемонта);				
						ПроводкаНУ.ВидУчетаДт 	= ВидУчетаВПроводку;
					КонецЕсли;
				
					ПроводкаНУ.СчетКт 		= ПланыСчетов.Налоговый.РасходыНаРемонтВА;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, ВыборкаДетали.СтатьяЗатрат);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, ВыборкаДетали.ФиксированныйАктив);				
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, Перечисления.ВидыРемонтаВА.Капитальный);				
					ПроводкаНУ.ВидУчетаКт 	= ВидУчетаВПроводку;		
					
					СуммаВПроводку = Окр(ОсталосьСписать *ДоляСтатьиЗатрат, 2);
					
					// так как смещается курсор выборки запомним значение в переменные
					СтатьяЗатратВПроводку = ВыборкаДетали.СтатьяЗатрат;
					ОрганизацияВПроводку = ВыборкаДетали.Организация;
					
					ЕстьЗаписи = ВыборкаДетали.Следующий();
					Если не ЕстьЗаписи Тогда
						СуммаВПроводку = ОсталосьСписать;
					КонецЕсли;	
						
					
					ПроводкаНУ.Сумма 		= СуммаВПроводку;
					ПроводкаНУ.Содержание 	= "Затраты по капитальному ремонту отнесены на увеличение стоимости(НУ)";									
					ПроводкаНУ.ВидРегламентнойОперации 	= Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоРасходамНаРемонт;									
												
					
					///////////////////////////////////////////////////////////////////////////////////////////////
					// Поскольку данная сумма будет отнесена на вычеты через амортизационные отчисления
					// ФА в последующие периоды, то в текущем периоде она классифицируется как временная разница
					ПроводкаНУ 				= мПроводкиНУ.Добавить();
					ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;					
					ПроводкаНУ.Организация 	= ОрганизацияВПроводку;
					ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.РасходыНаРемонтВА;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтатьяЗатратВПроводку);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, ВыборкаФА.ФиксированныйАктив);				
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, Перечисления.ВидыРемонтаВА.Капитальный);				
					ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.ВР;		
					
					ПроводкаНУ.Сумма 		= СуммаВПроводку;
					ПроводкаНУ.Содержание 	= "ВР по затратам на кап. ремонт, отнесенных на увеличение стоимости ФА(НУ)";				
					ПроводкаНУ.ВидРегламентнойОперации 	= Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоРасходамНаРемонт;									
					
					ОсталосьСписать = ОсталосьСписать - СуммаВПроводку;	
				КонецЦикла;	// Детальные записи				
				
			КонецЦикла; // Выборка ФА
		КонецЦикла; // Выборка ФА	
КонецПроцедуры // РасчетВычетовПоРасходамНаРемонтФАНУ

//Процедура выполняет расчет вычета по реализованным товарам
//
Процедура РасчетВычетаПоРеализованнымТоварам(СтруктураШапкиДокумента, СтруктураДопПараметров,Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.РасчетВычетаПоРеализованнымТоварам Тогда
		
		СтруктураПараметров = Новый Структура;
		
		//СтруктураПараметров.Вставить("РегламентнаяПереоценка", Истина);
		СтруктураПараметров.Вставить("РегламентныйДокумент",   ЭтотОбъект);
		ТаблицаРасчетаВычета = СтруктураДопПараметров.ЗаписьРасчетВычета;
		СтруктураПараметров.Вставить("ТаблицаРасчетаВычета", ТаблицаРасчетаВычета);	
		
		//признаем поступление ПР в НУ в отчетном периоде		 
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ
		|	ЕСТЬNULL(НалоговыйОбороты.СуммаОборотДт, 0) КАК СуммаПР,
		|	НалоговыйОбороты.Счет,
		|	НалоговыйОбороты.Субконто1,
		|	НалоговыйОбороты.Субконто2,
		|	НалоговыйОбороты.Субконто3,
		|	НалоговыйОбороты.КорСчет,
		|	НалоговыйОбороты.КорСубконто1,
		|	НалоговыйОбороты.КорСубконто2,
		|	НалоговыйОбороты.КорСубконто3
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(
		|			&НачалоГода,
		|			&КонецГода,
		|			,
		|			Счет В ИЕРАРХИИ (&СчетНУ),
		|			,
		|			СтруктурноеПодразделение = &СтруктурноеПодразделение
		|				И Организация = &Организация
		|				И ВидУчета В Иерархии (ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.ПР)),
		|			,
		|			) КАК НалоговыйОбороты
		|ГДЕ
		|	НалоговыйОбороты.СуммаОборотДт <> 0";
		
		Запрос.УстановитьПараметр("НачалоГода",   мНачГода);
		Запрос.УстановитьПараметр("КонецГода",    мКонГраница);	
		Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
		
		МассивСчетовНУ = Новый Массив;
		МассивСчетовНУ.Добавить(ПланыСчетов.Налоговый.Товары);
		МассивСчетовНУ.Добавить(ПланыСчетов.Налоговый.СырьеИМатериалы);
		МассивСчетовНУ.Добавить(ПланыСчетов.Налоговый.ГотоваяПродукция);
		МассивСчетовНУ.Добавить(ПланыСчетов.Налоговый.МатериалыПереданныеВПереработку);
		
		Запрос.УстановитьПараметр("СчетНУ", МассивСчетовНУ);
		
		Результат = Запрос.Выполнить();
		ТЗПР = Результат.Выгрузить();
		
		Выборка = Результат.Выбрать();
		
		Пока  Выборка.Следующий() Цикл
			
			ПроводкаНУ = мПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ПрочиеРасходы;		
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, Справочники.СтатьиЗатрат.УменьшениеВычетаПоПР);
			
			ПроводкаНУ.СчетКт       = Выборка.Счет;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Выборка.Субконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, Выборка.Субконто3);		
			
			ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.НУ;
			ПроводкаНУ.ВидУчетаКт = ПроводкаНУ.ВидУчетаДт;
			
			ПроводкаНУ.Сумма        = -Выборка.СуммаПР;				
			ПроводкаНУ.Содержание   		   = "Признание ПР в отчетном периоде" + ПредставлениеПериода(мНачГода, мКонДата, "ФП=Истина");
			
			ПроводкаНУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВычетаПоРеализованнымТоварам;	
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение,
			СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
			//запишем в вспомогательный регистр
			СтрокаЗаписьРасчетаВычета = ТаблицаРасчетаВычета.Добавить();
			СтрокаЗаписьРасчетаВычета.Номенклатура		= Выборка.Субконто1;  				
			СтрокаЗаписьРасчетаВычета.СуммаПриходПР    	= Выборка.СуммаПР;
			
			//отразим сразу ее как ВР
			ПроводкаНУ = мПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ПрочиеРасходы;		
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, Справочники.СтатьиЗатрат.УменьшениеВычетаПоПР);
			
			
			ПроводкаНУ.СчетКт       = Выборка.Счет;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Выборка.Субконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, Выборка.Субконто3);		
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение,
			СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
			ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.ВР;
			ПроводкаНУ.ВидУчетаКт = ПроводкаНУ.ВидУчетаДт;
			
			ПроводкаНУ.Сумма        = Выборка.СуммаПР;				
			ПроводкаНУ.Содержание   		   = "Признание ПР в отчетном периоде" + ПредставлениеПериода(мНачГода, мКонДата, "ФП=Истина");
			
			ПроводкаНУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВычетаПоРеализованнымТоварам;	
			
		КонецЦикла;
		
				
		//расчитаем вычет по реализованным товарам
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоГода",   мНачГода);
		Запрос.УстановитьПараметр("КонецГода",    мКонГраница);	
		Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Субконто",    ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
		Запрос.УстановитьПараметр("СтруктурноеПодразделение",СтруктураШапкиДокумента.СтруктурноеПодразделение);
		
		МассивСчетовНУ = Новый Массив;
		МассивСчетовНУ.Добавить(ПланыСчетов.Налоговый.Товары);
		МассивСчетовНУ.Добавить(ПланыСчетов.Налоговый.СырьеИМатериалы);
		МассивСчетовНУ.Добавить(ПланыСчетов.Налоговый.ГотоваяПродукция);
		МассивСчетовНУ.Добавить(ПланыСчетов.Налоговый.МатериалыПереданныеВПереработку);
		
		Запрос.УстановитьПараметр("СчетНУ", МассивСчетовНУ);  
		
		Запрос.Текст = "ВЫБРАТЬ
		|	НалоговыйОбороты.Субконто1 КАК Субконто1,
		|	НалоговыйОбороты.Счет,
		|	НалоговыйОбороты.Субконто2,
		|	НалоговыйОбороты.Субконто3,
		|	НалоговыйОбороты.КорСубконто1,
		|	НалоговыйОбороты.КорСубконто2,
		|	НалоговыйОбороты.КорСубконто3,
		|	НалоговыйОбороты.СуммаОборотКт КАК СуммаПР,
		|	НалоговыйОбороты.КорСчет
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(
		|			&НачалоГода,
		|			&КонецГода,
		|			,
		|			Счет В ИЕРАРХИИ (&СчетНУ),
		|			,
		|			СтруктурноеПодразделение = &СтруктурноеПодразделение
		|				И Организация = &Организация
		|				И ВидУчета В Иерархии (ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.ПР)),
		|			,
		|			) КАК НалоговыйОбороты
		|ГДЕ
		|	НалоговыйОбороты.СуммаОборотКт <> 0"
		;
		РезультатПрРеализации = Запрос.Выполнить();
		
		Если НЕ РезультатПрРеализации.Пустой() Тогда 		
			
			ТаблицаПрРеализации = РезультатПрРеализации.Выгрузить();
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("НачалоГода",   мНачГода);
			Запрос.УстановитьПараметр("КонецГода",    мКонГраница);	
			Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
			Запрос.УстановитьПараметр("СтруктурноеПодразделение",  СтруктураШапкиДокумента.СтруктурноеПодразделение);
			Запрос.УстановитьПараметр("Субконто",    ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
			Запрос.УстановитьПараметр("СчетНУ",       МассивСчетовНУ);
			Запрос.УстановитьПараметр("МассивНоменклатуры", ТаблицаПрРеализации.ВыгрузитьКолонку("Субконто1")); 	
			Запрос.УстановитьПараметр("ТЗПР", ТЗПР); 	
			
			МассивСчетовБУ = Новый Массив;
			МассивСчетовБУ.Добавить(ПланыСчетов.Типовой.Товары);
			МассивСчетовБУ.Добавить(ПланыСчетов.Типовой.СырьеИМатериалы);
			МассивСчетовБУ.Добавить(ПланыСчетов.Типовой.ГотоваяПродукция);
			МассивСчетовБУ.Добавить(ПланыСчетов.Типовой.МатериалыПереданныеВПереработку);
			МассивСчетовБУ.Добавить(ПланыСчетов.Типовой.МонтажОборудования);
			
			Запрос.УстановитьПараметр("СчетБУ",       МассивСчетовБУ);
			
			Запрос.Текст = "ВЫБРАТЬ
			|	ПРВНУ.Субконто1 КАК Субконто1,
			|	-ПРВНУ.СуммаПР КАК СуммаПРВНУ
			|ПОМЕСТИТЬ ПРВНУ
			|ИЗ
			|	&ТЗПР КАК ПРВНУ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаНачальныйОстатокДт, 0) КАК СуммаНачальныйОстатокДт,
			|	ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаКонечныйОстатокДт, 0) КАК СуммаКонечныйОстатокДт,
			|	ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаОборотДт, 0) КАК СуммаОборотДт,
			|	ЕСТЬNULL(ПР.СуммаОборотДт, 0) КАК СуммаОборотДтПР,
			|	ЕСТЬNULL(НУ.СуммаОборотКт, 0) КАК СуммаОборотКтНУ,
			|	ТиповойОстаткиИОбороты.Субконто1,
			|	ЕСТЬNULL(ПРВНУ.СуммаПРВНУ, 0) КАК СуммаПРВНУ
			|ИЗ
			|	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
			|			&НачалоГода,
			|			&КонецГода,
			|			,
			|			,
			|			Счет В ИЕРАРХИИ (&СчетБУ),
			|			&Субконто,
			|			СтруктурноеПодразделение = &СтруктурноеПодразделение
			|				И Организация = &Организация
			|				И Субконто1 В (&МассивНоменклатуры)) КАК ТиповойОстаткиИОбороты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Обороты(
			|				&НачалоГода,
			|				&КонецГода,
			|				,
			|				Счет В ИЕРАРХИИ (&СчетНУ),
			|				&Субконто,
			|				СтруктурноеПодразделение = &СтруктурноеПодразделение
			|					И Организация = &Организация
			|					И ВидУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.ПР))
			|					И Субконто1 В (&МассивНоменклатуры),
			|				,
			|				) КАК ПР
			|		ПО ТиповойОстаткиИОбороты.Субконто1 = ПР.Субконто1
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Обороты(
			|				&НачалоГода,
			|				&КонецГода,
			|				,
			|				Счет В ИЕРАРХИИ (&СчетНУ),
			|				&Субконто,
			|				СтруктурноеПодразделение = &СтруктурноеПодразделение
			|					И Организация = &Организация
			|					И ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
			|					И Субконто1 В (&МассивНоменклатуры),
			|				,
			|				) КАК НУ
			|		ПО ТиповойОстаткиИОбороты.Субконто1 = НУ.Субконто1
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПРВНУ КАК ПРВНУ
			|		ПО ТиповойОстаткиИОбороты.Субконто1 = ПРВНУ.Субконто1
			|ИТОГИ
			|	СУММА(СуммаНачальныйОстатокДт),
			|	СУММА(СуммаКонечныйОстатокДт),
			|	СУММА(СуммаОборотДт),
			|	СУММА(СуммаОборотДтПР),
			|	СУММА(СуммаОборотКтНУ),
			|	СУММА(СуммаПРВНУ)
			|ПО
			|	ОБЩИЕ";
			
			Результат = Запрос.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда 				
				ТаблицаСуммПоНУ = Результат.Выгрузить();
				СтрокаПоВычету = ТаблицаСуммПоНУ[0];
				ВычетПоЗатратам	 = СтрокаПоВычету.СуммаНачальныйОстатокДт - СтрокаПоВычету.СуммаКонечныйОстатокДт + СтрокаПоВычету.СуммаОборотДт - СтрокаПоВычету.СуммаОборотДтПР;
				ВычетВНУ		 = ВычетПоЗатратам - (СтрокаПоВычету.СуммаОборотКтНУ + СтрокаПоВычету.СуммаПРВНУ);
				
				Если НЕ ВычетВНУ = 0 Тогда
					
					ОбщаяСуммаРаспределения = ВычетВНУ;
					
					//запишем в вспомогательный регистр даные по вычету
					СтрокаЗаписьРасчетаВычета = ТаблицаРасчетаВычета.Добавить();
					СтрокаЗаписьРасчетаВычета.Вычет  					= ВычетПоЗатратам;
					СтрокаЗаписьРасчетаВычета.РасчетнаяСуммаДляВычета   = ОбщаяСуммаРаспределения;
					СтрокаЗаписьРасчетаВычета.СНДБУ   					= СтрокаПоВычету.СуммаНачальныйОстатокДт;
					СтрокаЗаписьРасчетаВычета.СКДБУ   					= СтрокаПоВычету.СуммаКонечныйОстатокДт;
					СтрокаЗаписьРасчетаВычета.ОборотДтБУ   				= СтрокаПоВычету.СуммаОборотДт;
					СтрокаЗаписьРасчетаВычета.ОборотДтПР   				= СтрокаПоВычету.СуммаОборотДтПР;
					СтрокаЗаписьРасчетаВычета.ОборотКтНУ   				= СтрокаПоВычету.СуммаОборотКтНУ;
					
					КоличествоСтрокПР = ТаблицаПрРеализации.Количество() - 1;
					БазисРаспределенияПР = Новый Массив(); 	
					
					Для Индекс = 0 по КоличествоСтрокПР Цикл			
						БазисРаспределенияПР.Добавить(ТаблицаПрРеализации[Индекс].СуммаПР);			
					КонецЦикла;
					
					РаспределеннаСуммаПоПозициям = ОбщегоНазначения.РаспределитьПропорционально(ОбщаяСуммаРаспределения, БазисРаспределенияПР);
					
					Для НомерСтроки = 0 по РаспределеннаСуммаПоПозициям.ВГраница() цикл
						СтрокаКПроводке = ТаблицаПрРеализации[НомерСтроки];
						СуммаПроводки   = РаспределеннаСуммаПоПозициям[НомерСтроки] ;
						
						//проводки по вычету НУ  			
						ПроводкаНУ = мПроводкиНУ.Добавить();
						ПроводкаНУ.Период       = Дата;
						ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
						
						ПроводкаНУ.СчетДт       = СтрокаКПроводке.КорСчет;		
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаКПроводке.КорСубконто1);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаКПроводке.КорСубконто2);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаКПроводке.КорСубконто3);
						
						ПроводкаНУ.СчетКт       = СтрокаКПроводке.Счет;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаКПроводке.Субконто1);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрокаКПроводке.Субконто2);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтрокаКПроводке.Субконто3);		
						
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение,
						СтруктураШапкиДокумента.СтруктурноеПодразделение);
						
						ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.НУ;
						ПроводкаНУ.ВидУчетаКт = ПроводкаНУ.ВидУчетаДт;
						
						ПроводкаНУ.Сумма        = СуммаПроводки;				
						ПроводкаНУ.Содержание   		   = "Уменьшение вычета в отчетном периоде по ПР " + ПредставлениеПериода(мНачГода, мКонДата, "ФП=Истина");
						
						ПроводкаНУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВычетаПоРеализованнымТоварам;	
						
						//Уменьшение ВР			
						ПроводкаНУ = мПроводкиНУ.Добавить();
						ПроводкаНУ.Период       = Дата;
						ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
						
						ПроводкаНУ.СчетДт       = СтрокаКПроводке.КорСчет;		
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаКПроводке.КорСубконто1);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаКПроводке.КорСубконто2);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаКПроводке.КорСубконто3);
						
						ПроводкаНУ.СчетКт       = СтрокаКПроводке.Счет;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаКПроводке.Субконто1);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрокаКПроводке.Субконто2);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтрокаКПроводке.Субконто3);		
						
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение,
						СтруктураШапкиДокумента.СтруктурноеПодразделение);
						
						ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.ВР;
						ПроводкаНУ.ВидУчетаКт = ПроводкаНУ.ВидУчетаДт;
						
						ПроводкаНУ.Сумма        = -СуммаПроводки;				
						ПроводкаНУ.Содержание   		   = "Уменьшение вычета в отчетном периоде по ПР " + ПредставлениеПериода(мНачГода, мКонДата, "ФП=Истина");
						
						ПроводкаНУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВычетаПоРеализованнымТоварам;						
						
						//запишем в вспомогательный регистр даные по вычету
						СтрокаЗаписьРасчетаВычета = ТаблицаРасчетаВычета.Добавить();
						СтрокаЗаписьРасчетаВычета.Номенклатура  = СтрокаКПроводке.Субконто1;
						СтрокаЗаписьРасчетаВычета.СуммаРасходПР = СтрокаКПроводке.СуммаПР;
						СтрокаЗаписьРасчетаВычета.СуммаУменьшенияПР = СуммаПроводки; 
						
						//найдем первоначальные данные
						СтрокаДанных = ТаблицаСуммПоНУ.НайтиСтроки(Новый Структура("Субконто1",СтрокаКПроводке.Субконто1));
						Если СтрокаДанных.Количество() <> 0 Тогда 			
							СтрокаЗаписьРасчетаВычета.СНДБУ   	   = СтрокаДанных[0].СуммаНачальныйОстатокДт;
							СтрокаЗаписьРасчетаВычета.СКДБУ  	   = СтрокаДанных[0].СуммаКонечныйОстатокДт;
							СтрокаЗаписьРасчетаВычета.ОборотДтБУ   = СтрокаДанных[0].СуммаОборотДт;
							СтрокаЗаписьРасчетаВычета.ОборотДтПР   = СтрокаДанных[0].СуммаОборотДтПР;
							СтрокаЗаписьРасчетаВычета.ОборотКтНУ   = СтрокаДанных[0].СуммаОборотКтНУ; 
						КонецЕсли; 	
						
					КонецЦикла;	
				КонецЕсли;//Если НЕ РезультатПрРеализации.Пустой()
			КонецЕсли;  //Если НЕ Результат.Пустой()
		КонецЕсли;      // Если НЕ ВычетНУ = 0 
		
		
		мПроводкиНУ.Записать(Ложь);
		
		ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
					ТаблицаРасчетаВычета,
					РегистрыСведений.РасчетВычетаПоРеализованнымТоварам,
					"Организация,СтруктурноеПодразделение,ПериодРасчета,Активность,Регистратор,
					|Номенклатура",											
					"Вычет,СуммаПриходПР,СуммаРасходПР,СуммаУменьшенияПР,РасчетнаяСуммаДляВычета, СНДБУ,СКДБУ, ОборотДтБУ, ОборотДтПР, ОборотКтНУ ");
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет расчет ВР по внеоборотным активам на дату закрытия счетов НУ (при переходе на балансовый метод учета ВР)
Процедура ЗакрытиеСчетовВА(СтруктураШапкиДокумента,  Отказ, Заголовок)
	// выберем остатки по всем счетам налогового учета, Кроме счетов ВА по которым уже велся балансовый учет		
	// запрос выполняется на дату документа, чтобы не затрагивать последующие по времени движения по вводу остатков НУ.
	Запрос = Новый Запрос; 
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТиповойОстатки.Организация,
	               |	ТиповойОстатки.Субконто1,
	               |	ТиповойОстатки.СуммаОстаток КАК СуммаБУ,
	               |	0 КАК СуммаНУ
	               |ПОМЕСТИТЬ ВТ_СтоимостьВАПредварительная
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(&КонГраница, Счет В ИЕРАРХИИ (&СчетаБУ), , Организация = &Организация) КАК ТиповойОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОстатки.Организация,
	               |	НалоговыйОстатки.Субконто1,
	               |	0,
	               |	НалоговыйОстатки.СуммаОстаток
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(&КонГраница, Счет В ИЕРАРХИИ (&СчетаНУ), , Организация = &Организация) КАК НалоговыйОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СтоимостьВАПредварительная.Организация,
	               |	ВТ_СтоимостьВАПредварительная.Субконто1,
	               |	СУММА(ВТ_СтоимостьВАПредварительная.СуммаБУ) КАК СуммаБУ,
	               |	СУММА(ВТ_СтоимостьВАПредварительная.СуммаНУ) КАК СуммаНУ
	               |ПОМЕСТИТЬ ВТ_СтоимостьВА
	               |ИЗ
	               |	ВТ_СтоимостьВАПредварительная КАК ВТ_СтоимостьВАПредварительная
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_СтоимостьВАПредварительная.Организация,
	               |	ВТ_СтоимостьВАПредварительная.Субконто1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СтоимостьВА.Организация,
	               |	ВТ_СтоимостьВА.Субконто1 КАК Субконто1,
	               |	ВТ_СтоимостьВА.Субконто1.Код,
	               |	ЕСТЬNULL(НалоговыйОстатки.Счет, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВАНеВключенныеВСтоимостнойБаланс)) КАК СчетУчета,
	               |	ВТ_СтоимостьВА.СуммаБУ КАК СуммаБУ,
	               |	ВТ_СтоимостьВА.СуммаНУ КАК СуммаНУ,
	               |	ВЫБОР
	               |		КОГДА ВТ_СтоимостьВА.СуммаНУ = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ НалоговыйОстатки.СуммаОстаток / ВТ_СтоимостьВА.СуммаНУ
	               |	КОНЕЦ КАК Коэффициент,
	               |	ВТ_СтоимостьВА.СуммаБУ * ВЫБОР
	               |		КОГДА ВТ_СтоимостьВА.СуммаНУ = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ НалоговыйОстатки.СуммаОстаток / ВТ_СтоимостьВА.СуммаНУ
	               |	КОНЕЦ - ЕСТЬNULL(НалоговыйОстатки.СуммаОстаток, 0) КАК СуммаВР
	               |ИЗ
	               |	ВТ_СтоимостьВА КАК ВТ_СтоимостьВА
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&КонГраница, Счет В ИЕРАРХИИ (&СчетаНУ), , Организация = &Организация) КАК НалоговыйОстатки
	               |		ПО ВТ_СтоимостьВА.Организация = НалоговыйОстатки.Организация
	               |			И ВТ_СтоимостьВА.Субконто1 = НалоговыйОстатки.Субконто1
	               |ИТОГИ
	               |	МАКСИМУМ(СуммаБУ),
	               |	МАКСИМУМ(СуммаНУ),
	               |	СУММА(СуммаВР)
	               |ПО
	               |	Субконто1";
				   
	СписокСчетовВА_БУ= Новый СписокЗначений;
	СписокСчетовВА_БУ.Добавить(ПланыСчетов.Типовой.ИнвестицииВНедвижимость_);
	СписокСчетовВА_БУ.Добавить(ПланыСчетов.Типовой.ОсновныеСредства_);
    СписокСчетовВА_БУ.Добавить(ПланыСчетов.Типовой.БиологическиеАктивы);	
	СписокСчетовВА_БУ.Добавить(ПланыСчетов.Типовой.НематериальныеАктивы);	
	
	Запрос.УстановитьПараметр("КонГраница", мКонГраница);			
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетаБУ", СписокСчетовВА_БУ);			
	Запрос.УстановитьПараметр("СчетаНУ", ПланыСчетов.Налоговый.ВнеоборотныеАктивы);			

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаПоФА = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоФА.Следующий() Цикл
		ИтогоВР = ВыборкаПоФА.СуммаБУ - ВыборкаПоФА.СуммаНУ;
		Если ИтогоВР = 0 Тогда
			Продолжить;
			// по активу не выявлены разницы в стоимости БУ и НУ
		КонецЕсли;	
		
		ВыборкаДетали = ВыборкаПоФА.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			Проводка = мПроводкиНУ.Добавить();
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетДт	 	= ВыборкаДетали.СчетУчета;
			Если НЕ ВыборкаДетали.Субконто1 = NULL Тогда
				Проводка["СубконтоДт"].Вставить(Проводка.СчетДт.ВидыСубконто[0].ВидСубконто, ВыборкаДетали.Субконто1);
			КонецЕсли;

			Проводка.ВидУчетаДт = Справочники.ВидыУчетаНУ.ВР;
			
			Проводка.СчетКт	 	= ПланыСчетов.Налоговый.Вспомогательный;
			Проводка.ВидУчетаКт = Справочники.ВидыУчетаНУ.ВР;
			
			Проводка.Сумма 		=  ВыборкаДетали.СуммаВР;			
			Проводка.Содержание = "Закрытие счетов налогового учета ВА";
			// для обработки ошибок округления
			ИтогоВР = ИтогоВР - Проводка.Сумма;
		КонецЦикла;	
		
		// обработка ошибок округления
		Если ИтогоВР <> 0 Тогда
			Проводка.Сумма 		=  Проводка.Сумма + ИтогоВР;
		КонецЕсли;	
	КонецЦикла;                                    	
	
	мПроводкиНУ.Записать(Ложь);			
	
КонецПроцедуры

//Процедура выполняет закрытие счетов по налоговому учету
//
Процедура ЗакрытиеСчетовНУ(СтруктураШапкиДокумента, СтруктураДопПараметров,Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ЗакрытиеСчетовНУ Тогда
		 ЗакрытиеСчетовВА(СтруктураШапкиДокумента,  Отказ, Заголовок);
		 
		//выберем остатки по всем счетам налогового учета, Кроме счетов ВА по которым уже велся балансовый учет		
		// запрос выполняется на дату документа, чтобы не затрагивать последующие по времени движения по вводу остатков НУ.
		Запрос = Новый Запрос; 
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИтогоБезУчетаНовыхОстатков.Счет,
		               |	ИтогоБезУчетаНовыхОстатков.Субконто1,
		               |	ИтогоБезУчетаНовыхОстатков.Субконто2,
		               |	ИтогоБезУчетаНовыхОстатков.Субконто3,
		               |	ИтогоБезУчетаНовыхОстатков.ВидУчета,
		               |	СУММА(ИтогоБезУчетаНовыхОстатков.СуммаОстаток) КАК СуммаОстаток,
		               |	СУММА(ИтогоБезУчетаНовыхОстатков.СуммаОстатокДт) КАК СуммаОстатокДт,
		               |	СУММА(ИтогоБезУчетаНовыхОстатков.СуммаОстатокКт) КАК СуммаОстатокКт,
		               |	СУММА(ИтогоБезУчетаНовыхОстатков.КоличествоОстаток) КАК КоличествоОстаток,
		               |	СУММА(ИтогоБезУчетаНовыхОстатков.КоличествоОстатокДт) КАК КоличествоОстатокДт,
		               |	СУММА(ИтогоБезУчетаНовыхОстатков.КоличествоОстатокКт) КАК КоличествоОстатокКт,
		               |	ИтогоБезУчетаНовыхОстатков.СтруктурноеПодразделение
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		НалоговыйОстатки.Счет КАК Счет,
		               |		НалоговыйОстатки.Субконто1 КАК Субконто1,
		               |		НалоговыйОстатки.Субконто2 КАК Субконто2,
		               |		НалоговыйОстатки.Субконто3 КАК Субконто3,
		               |		НалоговыйОстатки.ВидУчета КАК ВидУчета,
		               |		ЕСТЬNULL(НалоговыйОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
		               |		ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокДт, 0) КАК СуммаОстатокДт,
		               |		ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокКт, 0) КАК СуммаОстатокКт,
		               |		ЕСТЬNULL(НалоговыйОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
		               |		ЕСТЬNULL(НалоговыйОстатки.КоличествоОстатокДт, 0) КАК КоличествоОстатокДт,
		               |		ЕСТЬNULL(НалоговыйОстатки.КоличествоОстатокКт, 0) КАК КоличествоОстатокКт,
		               |		НалоговыйОстатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение
		               |	ИЗ
		               |		РегистрБухгалтерии.Налоговый.Остатки(
		               |				&КонГраница,
		               |				(НЕ Счет В ИЕРАРХИИ (&СчетаВА))
		               |					ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.НезавершенноеСтроительство)),
		               |				,
		               |				Организация = &Организация) КАК НалоговыйОстатки
		               |	ГДЕ
		               |		(ЕСТЬNULL(НалоговыйОстатки.СуммаОстаток, 0) <> 0
		               |				ИЛИ ЕСТЬNULL(НалоговыйОстатки.КоличествоОстаток, 0) <> 0)
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		НалоговыйОбороты.Счет,
		               |		НалоговыйОбороты.Субконто1,
		               |		НалоговыйОбороты.Субконто2,
		               |		НалоговыйОбороты.Субконто3,
		               |		НалоговыйОбороты.ВидУчета,
		               |		СУММА(-ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)),
		               |		СУММА(-ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)),
		               |		СУММА(ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)),
		               |		СУММА(-ЕСТЬNULL(НалоговыйОбороты.КоличествоОборот, 0)),
		               |		СУММА(-ЕСТЬNULL(НалоговыйОбороты.КоличествоОборот, 0)),
		               |		СУММА(ЕСТЬNULL(НалоговыйОбороты.КоличествоОборот, 0)),
		               |		НалоговыйОбороты.СтруктурноеПодразделение
		               |	ИЗ
		               |		РегистрБухгалтерии.Налоговый.Обороты(
		               |				&ДатаНач,
		               |				&ДатаКон,
		               |				Регистратор,
		               |				(НЕ Счет В ИЕРАРХИИ (&СчетаВА))
		               |					ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.НезавершенноеСтроительство)),
		               |				,
		               |				Организация = &Организация,
		               |				,
		               |				) КАК НалоговыйОбороты
		               |	ГДЕ
		               |		(НалоговыйОбороты.Регистратор ССЫЛКА Документ.ВводНачальныхОстатков
		               |				ИЛИ НалоговыйОбороты.Регистратор ССЫЛКА Документ.ВводНачальныхОстатковОС
		               |				ИЛИ НалоговыйОбороты.Регистратор ССЫЛКА Документ.ВводНачальныхОстатковПоЗарплате)
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		НалоговыйОбороты.Счет,
		               |		НалоговыйОбороты.Субконто1,
		               |		НалоговыйОбороты.Субконто2,
		               |		НалоговыйОбороты.Субконто3,
		               |		НалоговыйОбороты.ВидУчета,
		               |		НалоговыйОбороты.СтруктурноеПодразделение) КАК ИтогоБезУчетаНовыхОстатков
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ИтогоБезУчетаНовыхОстатков.Счет,
		               |	ИтогоБезУчетаНовыхОстатков.Субконто1,
		               |	ИтогоБезУчетаНовыхОстатков.Субконто2,
		               |	ИтогоБезУчетаНовыхОстатков.Субконто3,
		               |	ИтогоБезУчетаНовыхОстатков.ВидУчета,
		               |	ИтогоБезУчетаНовыхОстатков.СтруктурноеПодразделение"  ; 		
		
		Запрос.УстановитьПараметр("КонГраница", мКонГраница);	
		Запрос.УстановитьПараметр("ДатаНач", НачалоДня(мКонДата));	
		Запрос.УстановитьПараметр("ДатаКон", мКонДата);	
		Запрос.УстановитьПараметр("СчетаВА", ПланыСчетов.Налоговый.ВнеоборотныеАктивы);			
		Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
				
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Проводка = мПроводкиНУ.Добавить();
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;		

			Если Выборка.Счет.Вид = ВидСчета.Активный Тогда
				Префикс 	= "Дт";
				Префикс000 	= "Кт";
			ИначеЕсли Выборка.Счет.Вид = ВидСчета.Пассивный Тогда
				Префикс 	= "Кт";
				Префикс000 	= "Дт";
				
			ИначеЕсли Выборка.Счет.Вид = ВидСчета.АктивноПассивный Тогда
				Если Выборка.СуммаОстаток > 0 Тогда
					Префикс 	= "Дт";     				
					Префикс000 	= "Кт";
				Иначе           					
					Префикс 	= "Кт";    
					Префикс000 	= "Дт";
				КонецЕсли;
			КонецЕсли;
			Проводка["Счет" + Префикс000] = ПланыСчетов.Налоговый.Вспомогательный;
			Проводка["ВидУчета" + Префикс000]  = Справочники.ВидыУчетаНУ.НУ;
			
			Проводка["Счет" + Префикс] = Выборка.Счет;	
			// могут быть значения NULL и Неопределено на счетах с измененной аналитикой
			// поэтому устанавливаем субконто в зависимости от исходного значения без стандартной процедуры
			Если НЕ Выборка.Субконто1 = NULL Тогда
				Проводка["Субконто" + Префикс].Вставить(Выборка.Счет.ВидыСубконто[0].ВидСубконто, Выборка.Субконто1);
			КонецЕсли;
			Если НЕ Выборка.Субконто2 = NULL Тогда
				Проводка["Субконто" + Префикс].Вставить(Выборка.Счет.ВидыСубконто[1].ВидСубконто, Выборка.Субконто2);
			КонецЕсли;
			Если НЕ Выборка.Субконто3 = NULL Тогда
				Проводка["Субконто" + Префикс].Вставить(Выборка.Счет.ВидыСубконто[2].ВидСубконто, Выборка.Субконто3);
			КонецЕсли;
            				
			Если  Выборка.Счет.Количественный Тогда
				Если Выборка.Счет.Вид = ВидСчета.АктивноПассивный Тогда
					Если Выборка.КоличествоОстаток > 0 Тогда
						Проводка["Количество"+ Префикс] = - Выборка["КоличествоОстаток"];
					Иначе
						Проводка["Количество"+ Префикс] =  Выборка["КоличествоОстаток"];
					КонецЕсли;
				Иначе	
					Проводка["Количество"+ Префикс] = - Выборка["КоличествоОстаток" + Префикс];
				КонецЕсли;
			КонецЕсли;
			
			
			Если Выборка.Счет.Вид = ВидСчета.АктивноПассивный Тогда
				Если Выборка.СуммаОстаток > 0 Тогда
					Проводка["Сумма"] = - Выборка["СуммаОстаток"];										
				Иначе						
					Проводка["Сумма"] = Выборка["СуммаОстаток"];										
				КонецЕсли;
			Иначе	
				Проводка["Сумма"] = - Выборка["СуммаОстаток" + Префикс];										
			КонецЕсли;
					
			
			Проводка["СтруктурноеПодразделение" + Префикс] = Выборка.СтруктурноеПодразделение;						                                                    										
			
			Проводка["ВидУчета" + Префикс]  = Выборка.ВидУчета;
			
			Проводка.Содержание = "Закрытие счетов налогового учета";
			Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетовНУ;			
			
		КонецЦикла;                                    	
		
		мПроводкиНУ.Записать(Ложь);		
		/// Закрытие счета 00
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЕСТЬNULL(НалоговыйОстатки.СуммаОстаток, 0) КАК СуммаОстаток
					   |ИЗ
		               |	РегистрБухгалтерии.Налоговый.Остатки(&ДатаК, Счет  = Значение(ПланСчетов.Налоговый.Вспомогательный), , Организация = &Организация) КАК НалоговыйОстатки";  
					   
					   Запрос.УстановитьПараметр("ДатаК", мКонГраница);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Если ЗначениеЗаполнено(Выборка.СуммаОстаток) Тогда
			ПроводкаНУ = мПроводкиНУ.Добавить();
			ПроводкаНУ.Период       	= Дата;
			ПроводкаНУ.Организация  	= СтруктураШапкиДокумента.Организация;		
			ПроводкаНУ.СчетКт 			= ПланыСчетов.Налоговый.Вспомогательный;
			ПроводкаНУ.ВидУчетаКт 		= Справочники.ВидыУчетаНУ.НУ;
			ПроводкаНУ.Сумма 			= Выборка.СуммаОстаток;		
			
			мПроводкиНУ.Записать(Ложь);			
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры
  
////////////////////////////////////////////////////////////////////////////////
//// РЕФОРМАЦИЯ БАЛАНСА

// Функция формирует массив счетов 6000 и 7000 разделов
// для проведения реформации баланса
//
Функция СформироватьСписокСчетовДоходовРасходов(Учет = "Бух")
	
	МассивСчетовДоходовРасходов = Новый Массив;
	Если Учет = "Бух" Тогда
		// Счета доходов
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.ДоходыОтФинансирования);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.ПрочиеДоходы_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.ДоходыСвязанныеСПрекращаемойДеятельностью_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.ДоляПрибылиОрганизацийУчитываемыхПоМетодуДолевогоУчастия);
		// Счета расходов
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.СебестоимостьРеализованнойПродукцииИОказанныхУслуг_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.РасходыПоРеализацииПродукцииИОказаниюУслуг_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.АдминистративныеРасходы_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.РасходыНаФинансирование);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.ПрочиеРасходы_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.РасходыСвязанныеСПрекращаемойДеятельностью_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.ДоляВУбыткеОрганизацийУчитываемыхМетодомДолевогоУчастия);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу_);	
	Иначе
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Налоговый.Доходы);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Налоговый.Расходы);
	КонецЕсли;
	
	Возврат МассивСчетовДоходовРасходов;
КонецФункции // СформироватьСписокСчетовДоходовРасходов

// Процедура формирует корреспонденции по закрытию сумм доходов и затрат за период
// на счет итогового дохода убытка (5610 "Итоговая прибыль итоговый убыток")
//
Процедура РасчетИтоговогоДоходаУбытка(Учет = "Бух", СтруктураШапкиДокумента, Отказ, Заголовок)  
	Если Учет = "Бух" Тогда
		ИмяРегистра 		= "Типовой";
		ВыборВидаУчета 		= "";
		ИмяРеглОперации 	= "РасчетИтоговогоДоходаУбыткаБУ";
		Проводки 			= мПроводкиБУ;
	Иначе
		ИмяРегистра 		= "Налоговый";
		ВыборВидаУчета 		= ", ТиповойОстатки.ВидУчета ";
		ИмяРеглОперации		= "РасчетИтоговогоДоходаУбыткаНУ";
		Проводки 			= мПроводкиНУ;
	КонецЕсли;
	
	
 Если СтруктураШапкиДокумента[ИмяРеглОперации] Тогда
	 
		// Закрытие 6000 и 7000 счетов в БУ
		СписокСчетовДоходовИРасходов = СформироватьСписокСчетовДоходовРасходов(Учет);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаКон",     				мКонГраница);
		Запрос.УстановитьПараметр("Организация", 				СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", 	СтруктураШапкиДокумента.СтруктурноеПодразделение);
		Запрос.УстановитьПараметр("Счет",      					СписокСчетовДоходовИРасходов);
		
		Запрос.УстановитьПараметр("ДатаНач",     				мНачГраница);
		
				
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТиповойОстатки.Счет КАК Счет,
		|	ЕСТЬNULL(ТиповойОстатки.СуммаОборотДт, 0) КАК СуммаДт,
		|	ЕСТЬNULL(ТиповойОстатки.СуммаОборотКт, 0) КАК СуммаКт,
		|	ТиповойОстатки.Субконто1,
		|	ТиповойОстатки.Субконто2,
		|	ТиповойОстатки.Субконто3"+ ВыборВидаУчета +"
		|ИЗ
		|	РегистрБухгалтерии." + ИмяРегистра + ".Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстатки
		|ГДЕ
		|	(НЕ ЕСТЬNULL(ТиповойОстатки.СуммаОборотДт, 0) = 0)
		|	Или (НЕ ЕСТЬNULL(ТиповойОстатки.СуммаОборотКт, 0) = 0)";

		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() ТОгда
			Возврат;
		КонецЕсли;
		
		Выборка   = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.СуммаДт <> 0 Тогда
				// Списываем расходы
				Проводка = Проводки.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;								
				Проводка.СчетДт                    = ?(Учет = "Бух", ПланыСчетов.Типовой.ИтоговаяПрибыльИтоговыйУбыток, ПланыСчетов.Налоговый.ИтоговаяПрибыльИтоговыйУбытокОтчетногоГода);
				Проводка.СчетКт                    = Выборка.Счет;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Субконто1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Выборка.Субконто2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Выборка.Субконто3);   				
				
				Проводка.Сумма                     = Выборка.СуммаДт;
				Проводка.Содержание                = "Расчет итогового дохода/убытка";
				Проводка.ВидРегламентнойОперации   = Перечисления.ВидыРегламентныхОпераций[ИмяРеглОперации];
				Проводка.НомерЖурнала              = "ФР";
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				Если НЕ Учет = "Бух" Тогда
					Проводка.ВидУчетаДт = Выборка.ВидУчета;
					Проводка.ВидУчетаКт = Выборка.ВидУчета;
					// По филиалам выполняем закрытие на головное подразделение
					// Закрываем на головное
					Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СтруктурноеПодразделение) Тогда
						Проводка = Проводки.Добавить();
						Проводка.Период                   = Дата;
						Проводка.Организация              = СтруктураШапкиДокумента.Организация;				
						Проводка.СчетДт                   = ПланыСчетов.Налоговый.ИтоговаяПрибыльИтоговыйУбытокОтчетногоГода;
												
						Проводка.СчетКт                   = ПланыСчетов.Налоговый.ИтоговаяПрибыльИтоговыйУбытокОтчетногоГода;						
						Проводка.Сумма                    = Выборка.СуммаДт;
						Проводка.Содержание               = "Расчет итогового дохода/убытка";
						Проводка.НомерЖурнала             = "ФР";
						Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций[ИмяРеглОперации];
						
						Проводка.ВидУчетаДт = Выборка.ВидУчета;
						Проводка.ВидУчетаКт = Выборка.ВидУчета;
						
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), СтруктураШапкиДокумента.СтруктурноеПодразделение);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Выборка.СуммаКт <> 0 Тогда
				// Списываем Доходы
				Проводка = Проводки.Добавить();
				Проводка.Период                   = Дата;
				Проводка.Организация              = СтруктураШапкиДокумента.Организация;				
				Проводка.СчетДт                   = Выборка.Счет;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.Субконто1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Выборка.Субконто2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Выборка.Субконто3);
				
				Проводка.СчетКт                   = ?(Учет = "Бух", ПланыСчетов.Типовой.ИтоговаяПрибыльИтоговыйУбыток, ПланыСчетов.Налоговый.ИтоговаяПрибыльИтоговыйУбытокОтчетногоГода);
				
				Проводка.Сумма                    = Выборка.СуммаКТ;
				Проводка.Содержание               = "Расчет итогового дохода/убытка";
				Проводка.НомерЖурнала             = "ФР";
				Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций[ИмяРеглОперации];
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				Если НЕ Учет = "Бух" Тогда
					Проводка.ВидУчетаДт = Выборка.ВидУчета;
					Проводка.ВидУчетаКт = Выборка.ВидУчета;
					// По филиалам выполняем закрытие на головное подразделение
					// Закрываем на головное
					Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СтруктурноеПодразделение) Тогда
						Проводка = Проводки.Добавить();
						Проводка.Период                   = Дата;
						Проводка.Организация              = СтруктураШапкиДокумента.Организация;				
						Проводка.СчетДт                   = ПланыСчетов.Налоговый.ИтоговаяПрибыльИтоговыйУбытокОтчетногоГода;
												
						Проводка.СчетКт                   = ПланыСчетов.Налоговый.ИтоговаяПрибыльИтоговыйУбытокОтчетногоГода;						
						Проводка.Сумма                    = Выборка.СуммаКТ;
						Проводка.Содержание               = "Расчет итогового дохода/убытка";
						Проводка.НомерЖурнала             = "ФР";
						Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций[ИмяРеглОперации];
						
						Проводка.ВидУчетаДт = Выборка.ВидУчета;
						Проводка.ВидУчетаКт = Выборка.ВидУчета;						
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;				
		КонецЦикла;	
		
		Проводки.Записать(Ложь);
	КонецЕсли;
КонецПроцедуры // РасчетИтоговогоДоходаУбытка

// Реформация итогового дохода/убытка. Закрытие 5610 "Итоговая прибыль итоговый убыток"
// на счет 5510 "Нераспределенная прибыль непокрытый убыток отчетного года"
//
Процедура ПроведениеРеформацииБаланса(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяРегистра 		= "Типовой";
	ВыборВидаУчета 		= "";
	ИмяРеглОперации 	= "РеформацияБалансаБУ";
	Проводки 			= мПроводкиБУ;
	
	
	Если НЕ СтруктураШапкиДокумента[ИмяРеглОперации] Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКон",     	мКонГраница);
	Запрос.УстановитьПараметр("Организация", 	СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет",      		ПланыСчетов.Типовой.ИтоговаяПрибыльИтоговыйУбыток);
	
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", 	СтруктураШапкиДокумента.СтруктурноеПодразделение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ		
	|	ТиповойОстатки.Счет,
	|	ЕСТЬNULL(ТиповойОстатки.СуммаОстатокКт, 0) КАК СуммаКт,
	|	ТиповойОстатки.Субконто1,
	|	ТиповойОстатки.Субконто2,
	|	ТиповойОстатки.Субконто3
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстатки";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.СуммаКт = 0 Тогда
			Продолжить;
		КонецЕсли;
		// Реформация итогового дохода/убытка
		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период                   = Дата;
		Проводка.Организация              = СтруктураШапкиДокумента.Организация;				
		Проводка.СчетДт                   = Выборка.Счет;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Выборка.Субконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Выборка.Субконто3);
		
		Проводка.СчетКт                   = ПланыСчетов.Типовой.НераспределеннаяПрибыльНепокрытыйУбытокОтчетногоГода;				
		
		Проводка.Сумма                    = Выборка.СуммаКТ;
		Проводка.Содержание               = "Реформация баланса";
		Проводка.НомерЖурнала             = "ФР";
		Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций[ИмяРеглОперации];
		// Закрываем на головное
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	КонецЦикла;	
	                           	
	мПроводкиБУ.Записать(Ложь);
КонецПроцедуры // ПроведениеРеформацииБаланса


////////////////////////////////////////////////////////////////////////////////
//// ЗАЧЕТЫ И ПЕРЕКРЫТИЕ СЧЕТОВ

// Процедура выполняет перекрытие счетов расчетов и авансов по налогам и сборам 
//
Процедура ВыполнитьЗачетНалоговИСборовБУ(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Не СтруктураШапкиДокумента.ЗачетАвансовыхПлатежейПоНалогамИСборамБУ Тогда
		Возврат;		
	КонецЕсли;	
	
	ЗапросНачислений = Новый Запрос;
	ЗапросНачислений.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Субконто1 КАК НалогСбор,
	|	Начисления.Счет КАК СчетНачислений,	
	|	Начисления.СуммаОстатокКт КАК СуммаНачислений,
	|	Начисления.Субконто2,
	|	Начисления.Субконто3
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&ДатаЗапроса, Счет В ИЕРАРХИИ (&СписокСчетовНачислений), , Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК Начисления
	|
	|УПОРЯДОЧИТЬ ПО
	|	НалогСбор";
	
	ЗапросНачислений.УстановитьПараметр("ДатаЗапроса", 				мКонГраница);
	ЗапросНачислений.УстановитьПараметр("Организация", 				СтруктураШапкиДокумента.Организация);
	ЗапросНачислений.УстановитьПараметр("СтруктурноеПодразделение", СтруктураШапкиДокумента.СтруктурноеПодразделение);
	
	
	
	СписокСчетовНачислений = Новый СписокЗначений;
	СписокСчетовНачислений.Добавить(ПланыСчетов.Типовой.КорпоративныйПодоходныйНалогПодлежащийУплате);
	СписокСчетовНачислений.Добавить(ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог);
	СписокСчетовНачислений.Добавить(ПланыСчетов.Типовой.Акцизы);
	СписокСчетовНачислений.Добавить(ПланыСчетов.Типовой.СоциальныйНалог);
	СписокСчетовНачислений.Добавить(ПланыСчетов.Типовой.ЗемельныйНалог);
	СписокСчетовНачислений.Добавить(ПланыСчетов.Типовой.НалогНаТранспортныеСредства);
	СписокСчетовНачислений.Добавить(ПланыСчетов.Типовой.НалогНаИмущество);
	СписокСчетовНачислений.Добавить(ПланыСчетов.Типовой.ПрочиеНалоги);
	ЗапросНачислений.УстановитьПараметр("СписокСчетовНачислений", СписокСчетовНачислений);
	
	РезультатЗапросаНачислений = ЗапросНачислений.Выполнить();
	
	Если РезультатЗапросаНачислений.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАвансов = Новый Запрос;
	ЗапросАвансов.Текст = 
	"ВЫБРАТЬ
	|	Авансы.Субконто1 КАК НалогСбор,
	|	Авансы.Счет КАК СчетАвансов,
	|	Авансы.СуммаОстатокДт КАК СуммаАвансов,
	|	Авансы.Субконто2,
	|	ЕстьNull(Авансы.Субконто3, Неопределено) КАК Субконто3
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&ДатаЗапроса, Счет В ИЕРАРХИИ (&СписокСчетовАвансов), , Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК Авансы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НалогСбор";
	
	ЗапросАвансов.УстановитьПараметр("ДатаЗапроса", мКонГраница);
	
	СписокСчетовАвансов = Новый СписокЗначений;
	СписокСчетовАвансов.Добавить(ПланыСчетов.Типовой.КорпоративныйПодоходныйНалог);
	СписокСчетовАвансов.Добавить(ПланыСчетов.Типовой.ПрочиеНалогиИДругиеОбязательныеПлатежиВБюджет);
	
	ЗапросАвансов.УстановитьПараметр("СписокСчетовАвансов", СписокСчетовАвансов);
	
	ЗапросАвансов.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	ЗапросАвансов.УстановитьПараметр("СтруктурноеПодразделение", СтруктураШапкиДокумента.СтруктурноеПодразделение);
	
	РезультатЗапросаАвансов = ЗапросАвансов.Выполнить();
	Если РезультатЗапросаАвансов.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	тзАвансов = РезультатЗапросаАвансов.Выгрузить();
	ВыборкаНачислений = РезультатЗапросаНачислений.Выбрать();
	Пока ВыборкаНачислений.Следующий() Цикл
		СуммаНачислений = ВыборкаНачислений.СуммаНачислений;
		Для Каждого СтрокаАвансов Из тзАвансов Цикл
			
			Если СуммаНачислений = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если (ВыборкаНачислений.НалогСбор = СтрокаАвансов.НалогСбор) И 
				 (ВыборкаНачислений.Субконто2 = СтрокаАвансов.Субконто2) И 
				 (ВыборкаНачислений.Субконто3 = СтрокаАвансов.Субконто3 ИЛИ СтрокаАвансов.Субконто3 = Неопределено) И
				 (СтрокаАвансов.СуммаАвансов > 0) Тогда
				 
				СуммаЗачета = 0;
				Если СуммаНачислений >= СтрокаАвансов.СуммаАвансов Тогда
					СуммаЗачета = СтрокаАвансов.СуммаАвансов;
					СуммаНачислений = СуммаНачислений - СуммаЗачета;
					СтрокаАвансов.СуммаАвансов = 0;
				Иначе
					СуммаЗачета = СуммаНачислений;
					СтрокаАвансов.СуммаАвансов = СтрокаАвансов.СуммаАвансов - СуммаЗачета;
					СуммаНачислений = 0;
				КонецЕсли;
				
				Если СуммаЗачета = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Проводка = мПроводкиБУ.Добавить();
				Проводка.Период                = СтруктураШапкиДокумента.Дата;
				Проводка.Организация           = СтруктураШапкиДокумента.Организация;				
				Проводка.СчетДт                = ВыборкаНачислений.СчетНачислений;				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, ВыборкаНачислений.НалогСбор);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, ВыборкаНачислений.Субконто2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, ВыборкаНачислений.Субконто3);
				
				Проводка.СчетКт                = СтрокаАвансов.СчетАвансов;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1, ВыборкаНачислений.НалогСбор);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2, ВыборкаНачислений.Субконто2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3, ВыборкаНачислений.Субконто3);
				
				Проводка.Сумма                   = СуммаЗачета;
				Проводка.Содержание              = "Зачет авансовых платежей по налогам и сборам";
				Проводка.НомерЖурнала            = "БУ";
				Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ЗачетАвансовыхПлатежейПоНалогамИСборамБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);								
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	мПроводкиБУ.Записать(Ложь);	
	
КонецПроцедуры // ВыполнитьЗачетНалоговИСборовБУ

// Процедура выполняет перекрытие счетов расчетов и авансов по налогам и сборам 
//
Процедура ВыполнитьЗачетНалоговИСборовНУ(СтруктураШапкиДокумента, Отказ, Заголовок);
   	Если Не СтруктураШапкиДокумента.ЗачетАвансовыхПлатежейПоНалогамИСборамНУ Тогда
		Возврат;		
	КонецЕсли;	
	
	Если Не СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
		Возврат;		
	КонецЕсли;	
	
	ЗапросНачислений = Новый Запрос;
	ЗапросНачислений.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Субконто1 КАК НалогСбор,
	|	Начисления.Счет КАК СчетНачислений,	
	|	Начисления.СуммаОстатокКт КАК СуммаНачислений,
	|	Начисления.Субконто2,
	|	Начисления.Субконто3,
	|	Начисления.ВидУчета КАК ВидУчета
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&ДатаЗапроса, Счет В ИЕРАРХИИ (&СписокСчетовНачислений), , Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК Начисления
	|
	|УПОРЯДОЧИТЬ ПО
	|	НалогСбор";
	
	ЗапросНачислений.УстановитьПараметр("ДатаЗапроса", 				мКонГраница);
	ЗапросНачислений.УстановитьПараметр("Организация", 				СтруктураШапкиДокумента.Организация);
	ЗапросНачислений.УстановитьПараметр("СтруктурноеПодразделение", СтруктураШапкиДокумента.СтруктурноеПодразделение);
	
	
	
	СписокСчетовНачислений = Новый СписокЗначений;
	СписокСчетовНачислений.Добавить(ПланыСчетов.Налоговый.КорпоративныйПодоходныйНалог);
	СписокСчетовНачислений.Добавить(ПланыСчетов.Налоговый.ИндивидуальныйПодоходныйНалог);
	СписокСчетовНачислений.Добавить(ПланыСчетов.Налоговый.ПрочиеНалоги);
	
	ЗапросНачислений.УстановитьПараметр("СписокСчетовНачислений", СписокСчетовНачислений);
	
	РезультатЗапросаНачислений = ЗапросНачислений.Выполнить();
	
	Если РезультатЗапросаНачислений.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАвансов = Новый Запрос;
	ЗапросАвансов.Текст = 
	"ВЫБРАТЬ
	|	Авансы.Субконто1 КАК НалогСбор,
	|	Авансы.Счет КАК СчетАвансов,
	|	Авансы.СуммаОстатокДт КАК СуммаАвансов,
	|	Авансы.Субконто2,
	|	ЕстьNull(Авансы.Субконто3, Неопределено) КАК Субконто3,
	|	Авансы.ВидУчета КАК ВидУчета
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&ДатаЗапроса, Счет В ИЕРАРХИИ (&СписокСчетовАвансов), , Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК Авансы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НалогСбор";
	
	ЗапросАвансов.УстановитьПараметр("ДатаЗапроса", мКонГраница);
	
	СписокСчетовАвансов = Новый СписокЗначений;
	СписокСчетовАвансов.Добавить(ПланыСчетов.Налоговый.КорпоративныйПодоходныйНалогАвансы);
	СписокСчетовАвансов.Добавить(ПланыСчетов.Налоговый.НалоговыеАктивыПрочее);
	
	ЗапросАвансов.УстановитьПараметр("СписокСчетовАвансов", СписокСчетовАвансов);
	
	ЗапросАвансов.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	ЗапросАвансов.УстановитьПараметр("СтруктурноеПодразделение", СтруктураШапкиДокумента.СтруктурноеПодразделение);
	
	РезультатЗапросаАвансов = ЗапросАвансов.Выполнить();
	Если РезультатЗапросаАвансов.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	тзАвансов = РезультатЗапросаАвансов.Выгрузить();
	ВыборкаНачислений = РезультатЗапросаНачислений.Выбрать();
	Пока ВыборкаНачислений.Следующий() Цикл
		СуммаНачислений = ВыборкаНачислений.СуммаНачислений;
		Если СуммаНачислений = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Для Каждого СтрокаАвансов Из тзАвансов Цикл			
								 
				Если (ВыборкаНачислений.НалогСбор <> СтрокаАвансов.НалогСбор) 
					ИЛИ (ВыборкаНачислений.Субконто2 <> СтрокаАвансов.Субконто2)  Тогда
					
					Продолжить;
				КонецЕсли;
				
				// Если на есть налога есть ВР, то это означает, что в прошлых периодах
				// имелась задолженность по налогу. В этом случае зачет может быть выполнен (есть начисленный ранее налог),
				Если СтрокаАвансов.ВидУчета <> ВыборкаНачислений.ВидУчета
					И ВыборкаНачислений.ВидУчета <> Справочники.ВидыУчетаНУ.ВР Тогда
					Продолжить;
				КонецЕсли;	
				
				// Зачет в пределах соответствующего НК. Допускаем так же возможность незаполненности
				// субконто на счете аванса.
				Если  (ВыборкаНачислений.Субконто3 = СтрокаАвансов.Субконто3 ИЛИ НЕ ЗначениеЗаполнено(СтрокаАвансов.Субконто3)) И
					(СтрокаАвансов.СуммаАвансов > 0) Тогда
					
					СуммаЗачета = 0;
					Если СуммаНачислений >= СтрокаАвансов.СуммаАвансов Тогда
						СуммаЗачета = СтрокаАвансов.СуммаАвансов;
						СуммаНачислений = СуммаНачислений - СуммаЗачета;
						СтрокаАвансов.СуммаАвансов = 0;
					Иначе
						СуммаЗачета = СуммаНачислений;
						СтрокаАвансов.СуммаАвансов = СтрокаАвансов.СуммаАвансов - СуммаЗачета;
						СуммаНачислений = 0;
					КонецЕсли;
					
					Если СуммаЗачета = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Проводка = мПроводкиНУ.Добавить();
					Проводка.Период                = СтруктураШапкиДокумента.Дата;
					Проводка.Организация           = СтруктураШапкиДокумента.Организация;				
					Проводка.СчетДт                = ВыборкаНачислений.СчетНачислений;				
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, ВыборкаНачислений.НалогСбор);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, ВыборкаНачислений.Субконто2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, ВыборкаНачислений.Субконто3);
					// Если на есть налога есть ВР, то это означает, что в прошлых периодах
					// имелась задолженность по налогу. В этом случае зачет может быть выполнен (есть начисленный ранее налог),
					// но отражаем его с видом учета НУ со стороны счета налога. Для того чтобы учесть в последующих корректировках вычета.
					// Виды учета ПР и НУ отражаем с исходным видом учета.				
					Проводка.ВидУчетаДт            = ?(ВыборкаНачислений.ВидУчета = Справочники.ВидыУчетаНУ.ВР, Справочники.ВидыУчетаНУ.НУ,ВыборкаНачислений.ВидУчета);
					
					Проводка.СчетКт                = СтрокаАвансов.СчетАвансов;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1, ВыборкаНачислений.НалогСбор);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2, ВыборкаНачислений.Субконто2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3, ВыборкаНачислений.Субконто3);
					Проводка.ВидУчетаКт            = СтрокаАвансов.ВидУчета;				
					
					Проводка.Сумма                   = СуммаЗачета;
					Проводка.Содержание              = "Зачет авансовых платежей по налогам и сборам";
					Проводка.НомерЖурнала            = "НУ";
					Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ЗачетАвансовыхПлатежейПоНалогамИСборамНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	мПроводкиНУ.Записать(Ложь);
КонецПроцедуры // ВыполнитьЗачетНалоговИСборовНУ	

// Процедура выполняет перенос отрицательной дебиторской задолженности
// по расчетам с подотчеными лицами на соответствующий счет кредиторской задолженности
//
Процедура ВыполнитьЗакрытиеПодотчетныхСуммБУ(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ЗакрытиеПодотчетныхСуммБУ Тогда
		Возврат;		
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТиповойОстатки.Счет,
	|	ТиповойОстатки.Субконто1 КАК Работник,
	|	ТиповойОстатки.Организация,
	|	ТиповойОстатки.Валюта,
	|	ТиповойОстатки.СуммаОстаток КАК Сумма,
	|	ТиповойОстатки.ВалютнаяСуммаОстаток КАК ВалютнаяСумма
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&ДатаОстатков, Счет В (&СписокСчетов), , Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстатки
	|ГДЕ
	|	ТиповойОстатки.СуммаОстаток < 0";
	
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц);
	//СписокСчетов.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПодотчетныхЛиц);
	
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("ДатаОстатков", мКонГраница);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктураШапкиДокумента.СтруктурноеПодразделение);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаРезультатов = Результат.Выбрать();
	Пока ВыборкаРезультатов.Следующий() Цикл
		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период                = Дата;
		Проводка.Организация           = СтруктураШапкиДокумента.Организация;				
		Проводка.СчетДт                = ВыборкаРезультатов.Счет;				
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"РаботникиОрганизаций", ВыборкаРезультатов.Работник);
		
		Проводка.СчетКт                = ?(ВыборкаРезультатов.Счет = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц, ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПередПодотчетнымиЛицами, ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПередПодотчетнымиЛицами);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"РаботникиОрганизаций", ВыборкаРезультатов.Работник);
		
		Если ВыборкаРезультатов.ВалютнаяСумма <> 0 Тогда
			Проводка.ВалютаДт 			   = ВыборкаРезультатов.Валюта;
			Проводка.ВалютнаяСуммаДт	   = -ВыборкаРезультатов.ВалютнаяСумма;
			Проводка.ВалютаКт 			   = ВыборкаРезультатов.Валюта;
			Проводка.ВалютнаяСуммаКт	   = -ВыборкаРезультатов.ВалютнаяСумма;
		КонецЕсли;
		
		Проводка.Сумма                   = -ВыборкаРезультатов.Сумма;
		Проводка.Содержание              = "Закрытие подотчетных сумм";
		Проводка.НомерЖурнала          	 = "БУ";
		Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеПодотчетныхСуммБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
	КонецЦикла;
	
	мПроводкиБУ.Записать(Ложь);	
КонецПроцедуры // ВыполнитьЗакрытиеПодотчетныхСумм
    
////////////////////////////////////////////////////////////////////////////////
//// РАСЧЕТ НАЛОГА НА ПРИБЫЛЬ

Процедура РасчетВременныхРазницБалансовымМетодом(СтруктураШапкиДокумента, СписокСтруктурныхЕдиниц, Отказ, Заголовок)
	
	МассивРассматриваемыхСчетов = Новый Массив;
	МассивРассматриваемыхСчетов.Добавить(ПланыСчетов.Налоговый.ОборотныеАктивы);
	МассивРассматриваемыхСчетов.Добавить(ПланыСчетов.Налоговый.ВнеоборотныеАктивы);
	МассивРассматриваемыхСчетов.Добавить(ПланыСчетов.Налоговый.РасчетыСКонтрагентамиИПрочиеВзаиморасчеты);
	МассивРассматриваемыхСчетов.Добавить(ПланыСчетов.Налоговый.СобственныйКапитал);
	
		
	// Найдем расчетное значение ОНО и ОНА по результатам года
	Запрос = Новый Запрос;                                           	
	Запрос.УстановитьПараметр("ДатаКон",    				мКонГраница);
	Запрос.УстановитьПараметр("СписокСтруктурныхЕдиниц",    СписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("СписокСчетов",   			МассивРассматриваемыхСчетов);
	Запрос.УстановитьПараметр("ВидУчетаВР", 				Справочники.ВидыУчетаНУ.ВР);
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	НалоговыйОстатки.Счет,
	               |	НалоговыйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
	               |	НалоговыйОстатки.СуммаОстатокКт КАК СуммаОстатокКт,
	               |	НалоговыйОстатки.СуммаОстаток КАК СуммаОНО
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(
	               |			&ДатаКон,
	               |			Счет В ИЕРАРХИИ (&СписокСчетов),
	               |			,
	               |			Организация В (&СписокСтруктурныхЕдиниц)
	               |				И ВидУчета = &ВидУчетаВР) КАК НалоговыйОстатки
	               |ИТОГИ
	               |	СУММА(СуммаОстатокДт),
	               |	СУММА(СуммаОстатокКт),
	               |	СУММА(СуммаОНО)
	               |ПО
	               |	ОБЩИЕ";

    Результат = Запрос.Выполнить();
	РасчетнаяСумаОНА_ОНО = 0;
	Если НЕ Результат.Пустой() Тогда		
	    ПодразделениеДляРеглОпераций = ПроцедурыБухгалтерскогоУчета.ПолучитьПодразделениеДляРеглОпераций(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);		
		ВыборкаИтогов = Результат.Выбрать();
		ВыборкаИтогов.Следующий();
		
		ТекстСообщения = "Величина ВР по данным налогового баланса: " + СокрЛП(ВыборкаИтогов.СуммаОНО);	
		ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , ЭтотОбъект , Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц, Ложь);	
	
		РасчетнаяСумаОНА_ОНО = Окр(ВыборкаИтогов.СуммаОНО*мСтавкаНалогаНаПрибыль/100, 2);
	КонецЕсли;
	
	ПризнакОНО = РасчетнаяСумаОНА_ОНО > 0;	
	ТекстСообщения = "Ставка налога на прибыль: " + СокрЛП(мСтавкаНалогаНаПрибыль) + "%";
	ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , ЭтотОбъект , Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц, Ложь);	
	
	ТекстСообщения = "Расчетная величина " + ?(ПризнакОНО, "ОНО", "ОНА") + " по итогам года: " + ?(ПризнакОНО,СокрЛП(РасчетнаяСумаОНА_ОНО), СокрЛП(-РасчетнаяСумаОНА_ОНО));	
	ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , ЭтотОбъект , Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц, Ложь);	
	
		// Найдем текущие данные по отражению ОНО и ОНА в балансе
		Запрос.Текст  = "ВЫБРАТЬ
		                |	ТиповойОстатки.Счет,
		                |	ТиповойОстатки.СуммаОстаток КАК СуммаОстаток
		                |ИЗ
		                |	РегистрБухгалтерии.Типовой.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОтложенныеНалоговыеАктивыПоКорпоративномуПодоходномуНалогу), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОтложенныеНалоговыеОбязательстваПоКорпоративномуПодоходномуНалогу)), , Организация В (&СписокСтруктурныхЕдиниц)) КАК ТиповойОстатки";
	   
	   Результат = Запрос.Выполнить();
	   ТекущаяСуммаОНА_ОНО = РасчетнаяСумаОНА_ОНО; // будем корректировать имеющиеся остатки ОНО_ОНА. Оставшуюся величину - признаем в балансе 
	   Если НЕ Результат.Пустой() Тогда
		   Выборка  = Результат.Выбрать();
		   Пока Выборка.Следующий() Цикл			
			   // ОНО. Списываем имеющееся ОНА. Корректируем размер ОНО
			   Если Выборка.СуммаОстаток > 0 Тогда
				   // в балансе отражено ОНА. Списываем его
				   ПроводкаБУ = мПроводкиБУ.Добавить();
				   ПроводкаБУ.Период       = Дата;
				   ПроводкаБУ.Организация  = СтруктураШапкиДокумента.Организация;
				   
				   ПроводкаБУ.СчетДт       = ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу;
				   ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт,1, Справочники.СтатьиЗатрат.УсловныеРасходыПоНалогуНаПрибыль);				
				   ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, "Подразделения", ПодразделениеДляРеглОпераций);
				   
				   ПроводкаБУ.СчетКт       = Выборка.Счет;		
				   ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, 1, Справочники.НалогиСборыОтчисления.НалогНаПрибыль);										
				   ПроводкаБУ.Сумма        = Выборка.СуммаОстаток;
				   
				   ПроводкаБУ.Содержание   		   = "Списан имеющийся отложенный налоговый актив " + ПредставлениеПериода(мНачГода, мКонДата, "ФП=Истина");
				   ПроводкаБУ.НомерЖурнала 		   = "ФР";	
				   ПроводкаБУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц;	
				   
			   Иначе	
				   // в балансе отражено ОНО. Списываем его
				   ПроводкаБУ = мПроводкиБУ.Добавить();
				   ПроводкаБУ.Период       = Дата;
				   ПроводкаБУ.Организация  = СтруктураШапкиДокумента.Организация;
				   
				   ПроводкаБУ.СчетДт       = Выборка.Счет;		
				   ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 1, Справочники.НалогиСборыОтчисления.НалогНаПрибыль);
				   
				   ПроводкаБУ.СчетКт       = ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу;
				   ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт,1, Справочники.СтатьиЗатрат.УсловныеРасходыПоНалогуНаПрибыль);				
				   ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, "Подразделения", ПодразделениеДляРеглОпераций);
				   
				   ПроводкаБУ.Сумма        = - Выборка.СуммаОстаток;
				   
				   ПроводкаБУ.Содержание   		   = "Списано имеющееся отложенное налоговое обязательство " + ПредставлениеПериода(мНачГода, мКонДата, "ФП=Истина");
				   ПроводкаБУ.НомерЖурнала 		   = "ФР";	
				   ПроводкаБУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц;	
			   КонецЕсли;	
		   КонецЦикла;	
	   КонецЕсли;
		
	   Если РасчетнаяСумаОНА_ОНО <> 0 Тогда
		   
		   Если ПризнакОНО Тогда
			   // отложенное налоговое обязательство
			   ПроводкаБУ = мПроводкиБУ.Добавить();
			   ПроводкаБУ.Период       = Дата;
			   ПроводкаБУ.Организация  = СтруктураШапкиДокумента.Организация;
			   
			   ПроводкаБУ.СчетДт       = ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу;		
			   ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 1, Справочники.СтатьиЗатрат.УсловныеРасходыПоНалогуНаПрибыль);		
			   ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, "Подразделения", ПодразделениеДляРеглОпераций);
			   
			   ПроводкаБУ.СчетКт       = ПланыСчетов.Типовой.ОтложенныеНалоговыеОбязательстваПоКорпоративномуПодоходномуНалогу;
			   ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт,1, Справочники.НалогиСборыОтчисления.НалогНаПрибыль);				
			   ПроводкаБУ.Сумма        = РасчетнаяСумаОНА_ОНО;
			   
			   ПроводкаБУ.Содержание   		   = "Признано отложенное налоговое обязательство за период" + ПредставлениеПериода(мНачГода, мКонДата, "ФП=Истина");
			   ПроводкаБУ.НомерЖурнала 		   = "ФР";	
			   ПроводкаБУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц;	
			   
		   Иначе
			   // отложенный налоговый актив, так как сумма вычетов по налоговому учету превысила полученные доходы
			   ПроводкаБУ = мПроводкиБУ.Добавить();
			   ПроводкаБУ.Период       = Дата;
			   ПроводкаБУ.Организация  = СтруктураШапкиДокумента.Организация;
			   
			   ПроводкаБУ.СчетДт       = ПланыСчетов.Типовой.ОтложенныеНалоговыеАктивыПоКорпоративномуПодоходномуНалогу;		
			   ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 1, Справочники.НалогиСборыОтчисления.НалогНаПрибыль);
			   
			   ПроводкаБУ.СчетКт       = ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу;
			   ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт,1, Справочники.СтатьиЗатрат.УсловныеРасходыПоНалогуНаПрибыль);				
			   ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, "Подразделения", ПодразделениеДляРеглОпераций);
			   
			   ПроводкаБУ.Сумма        = - РасчетнаяСумаОНА_ОНО;
			   
			   ПроводкаБУ.Содержание   		   = "Признан отложенный налоговый актив за период" + ПредставлениеПериода(мНачГода, мКонДата, "ФП=Истина");
			   ПроводкаБУ.НомерЖурнала 		   = "ФР";	
			   ПроводкаБУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц;	
		   КонецЕсли;			
	   КонецЕсли;					
	мПроводкиБУ.Записать(Ложь);	
	
КонецПроцедуры

Процедура РасчетВременныхРазницМетодомПиБ(СтруктураШапкиДокумента, СписокСтруктурныхЕдиниц, Отказ, Заголовок)
	МассивРассматриваемыхСчетов = новый Массив;	
	МассивРассматриваемыхСчетов.Добавить(ПланыСчетов.Налоговый.Доходы);
	МассивРассматриваемыхСчетов.Добавить(ПланыСчетов.Налоговый.Расходы);
	
	// Сумма налогооблагаемого дохода по временным разницам
	Запрос = Новый Запрос;                                           
	Запрос.УстановитьПараметр("НачалоГода",   	мНачГода);
	Запрос.УстановитьПараметр("КонецГода",    	мКонГраница);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("СписокСчетов",   МассивРассматриваемыхСчетов);
	Запрос.УстановитьПараметр("ВидУчетаВР", 	Справочники.ВидыУчетаНУ.ВР);
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕстьNUll(НалоговыйОбороты.СуммаОборот,0) как УбытокВР
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(&НачалоГода, &КонецГода,, 
				   |				Счет В ИЕРАРХИИ (&СписокСчетов),, ВидУчета = &ВидУчетаВР	И Организация = &Организация,,) КАК НалоговыйОбороты
	               |ИТОГИ
	               |	СУММА(УбытокВР)
	               |ПО
	               |	ОБЩИЕ";

    Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПодразделениеДляРеглОпераций = ПроцедурыБухгалтерскогоУчета.ПолучитьПодразделениеДляРеглОпераций(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
	ВыборкаИтогов = Результат.Выбрать();
	ВыборкаИтогов.Следующий();
	
	Если ВыборкаИтогов.УбытокВР > 0 Тогда
		// отложенный налоговый актив, так как сумма вычетов по налоговому учету превысила полученные доходы
		ПроводкаБУ = мПроводкиБУ.Добавить();
		ПроводкаБУ.Период       = Дата;
		ПроводкаБУ.Организация  = СтруктураШапкиДокумента.Организация;
				
		ПроводкаБУ.СчетДт       = ПланыСчетов.Типовой.ОтложенныеНалоговыеАктивыПоКорпоративномуПодоходномуНалогу;		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 1, Справочники.НалогиСборыОтчисления.НалогНаПрибыль);
		
		ПроводкаБУ.СчетКт       = ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт,1, Справочники.СтатьиЗатрат.УсловныеРасходыПоНалогуНаПрибыль);				
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, "Подразделения", ПодразделениеДляРеглОпераций);

		ПроводкаБУ.Сумма        = ВыборкаИтогов.УбытокВР*мСтавкаНалогаНаПрибыль/100;
				
		ПроводкаБУ.Содержание   		   = "Признан отложенный налоговый актив за период" + ПредставлениеПериода(мНачГода, мКонДата, "ФП=Истина");
		ПроводкаБУ.НомерЖурнала 		   = "ФР";	
		ПроводкаБУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц;	
	КонецЕсли;	
	
	Если ВыборкаИтогов.УбытокВР < 0 Тогда		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;	
		// отложенное налоговое обязательство, так как сумма доходов по налоговому учету превысила вычеты
		ПроводкаБУ = мПроводкиБУ.Добавить();
		ПроводкаБУ.Период       = Дата;
		ПроводкаБУ.Организация  = СтруктураШапкиДокумента.Организация;
				
		ПроводкаБУ.СчетДт       = ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу;		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 1, Справочники.СтатьиЗатрат.УсловныеРасходыПоНалогуНаПрибыль);		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, "Подразделения", ПодразделениеДляРеглОпераций);
		
		ПроводкаБУ.СчетКт       = ПланыСчетов.Типовой.ОтложенныеНалоговыеОбязательстваПоКорпоративномуПодоходномуНалогу;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт,1, Справочники.НалогиСборыОтчисления.НалогНаПрибыль);				
		ПроводкаБУ.Сумма        = -ВыборкаИтогов.УбытокВР*мСтавкаНалогаНаПрибыль/100;
				
		ПроводкаБУ.Содержание   		   = "Признано отложенное налоговое обязательство за период" + ПредставлениеПериода(мНачГода, мКонДата, "ФП=Истина");
		ПроводкаБУ.НомерЖурнала 		   = "ФР";	
		ПроводкаБУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц;	
		
	КонецЕсли;	
	
	мПроводкиБУ.Записать(Ложь);
КонецПроцедуры

// Рассчитываются отложенные налоговые обязательства и
// отложенные налоговые активы.
// 
Процедура 	РасчетВременныхРазниц(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.РасчетВременныхРазниц Тогда
		Возврат;	
	КонецЕсли;	
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
																		СтруктураШапкиДокумента.Организация,
																		мИсчислениеНалоговСтруктурныхЕдиниц,
																		Перечисления.РазделыНалоговогоУчета.КПН);
	Иначе
		Налогоплательщик = СтруктураШапкиДокумента.Организация;
	КонецЕсли;
	
	мСтавкаНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.НалогНаПрибыль, СтруктураШапкиДокумента.Дата);
	Если мСтавкаНалогаНаПрибыль = 0 Тогда
		ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Не указана ставка налога на прибыль. Расчет временных разниц не возможен.", , ,ЭтотОбъект, Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц);
		Возврат;
	КонецЕсли;	
	
	СписокСтруктурныхЕдиниц = ПроцедурыНалоговогоУчета.СформироватьСписокСтруктурныхЕдиниц(Перечисления.РазделыНалоговогоУчета.КПН, , Налогоплательщик);
	Если СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
		РасчетВременныхРазницБалансовымМетодом(СтруктураШапкиДокумента, СписокСтруктурныхЕдиниц, Отказ, Заголовок);
	Иначе
		РасчетВременныхРазницМетодомПиБ(СтруктураШапкиДокумента, СписокСтруктурныхЕдиниц, Отказ, Заголовок);
	КонецЕсли;	

КонецПроцедуры  // РасчетВременныхРазниц

// Процедура выполняет расчет налога на прибыль и его отражение 
// в бухгалтерском учете
//
Процедура РасчетНалогаНаПрибыль(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.РасчетНалогаНаПрибыль Тогда
		Возврат;
	КонецЕсли;	
	
	Если мКонДата >= Дата(2009,1,1) Тогда
		Сообщить("Операцию по расчету налога на прибыль рекомендуется выполнять в форме регламентированной отчетности: формы 100.00 (или формы 220.00) и отражать в бухг. учете с помощью механизма отражения в учете регламентированной отчетности.", СтатусСообщения.Информация);
	КонецЕсли;	
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
																		СтруктураШапкиДокумента.Организация,
																		мИсчислениеНалоговСтруктурныхЕдиниц,
																		Перечисления.РазделыНалоговогоУчета.КПН);
	Иначе
		Налогоплательщик = СтруктураШапкиДокумента.Организация;
	КонецЕсли;
	
	мСтавкаНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.НалогНаПрибыль, СтруктураШапкиДокумента.Дата);
	
	Если мСтавкаНалогаНаПрибыль = 0 Тогда
		ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Не указана ставка налога на прибыль. Расчет налога на прибыль не возможен.", ,,ЭтотОбъект, Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль);
		Возврат;
	КонецЕсли;	
	
	МассивРассматриваемыхСчетов = новый Массив;	
	МассивРассматриваемыхСчетов.Добавить(ПланыСчетов.Налоговый.Доходы);
	МассивРассматриваемыхСчетов.Добавить(ПланыСчетов.Налоговый.Расходы);
	
	// Сумма налогооблагаемого дохода
	Запрос = Новый Запрос;                                           
	Запрос.УстановитьПараметр("НачалоГода",   мНачГода);
	Запрос.УстановитьПараметр("КонецГода",    мКонГраница);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("СписокСчетов",   МассивРассматриваемыхСчетов);
	Запрос.УстановитьПараметр("ВидУчетаНУ", 	Справочники.ВидыУчетаНУ.НУ);
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(НалоговыйОбороты.СуммаОборотКт - НалоговыйОбороты.СуммаОборотДт, 0) КАК ДоходНУ
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(&НачалоГода,&КонецГода,,Счет В ИЕРАРХИИ (&СписокСчетов),,
	               |		ВидУчета = &ВидУчетаНУ И Организация = &Организация,,) КАК НалоговыйОбороты
	               |ИТОГИ
	               |	СУММА(ДоходНУ)
	               |ПО
	               |	ОБЩИЕ";

    Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИтогов = Результат.Выбрать();
	ВыборкаИтогов.Следующий();
	
	Если ВыборкаИтогов.ДоходНУ > 0 Тогда
		// есть налогооблагаемый доход		
		ПодразделениеДляРеглОпераций = ПроцедурыБухгалтерскогоУчета.ПолучитьПодразделениеДляРеглОпераций(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПроводкаБУ = мПроводкиБУ.Добавить();
		ПроводкаБУ.Период       = Дата;
		ПроводкаБУ.Организация  = СтруктураШапкиДокумента.Организация;
				
		ПроводкаБУ.СчетДт       = ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу;		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 1, Справочники.СтатьиЗатрат.РасходыПоНалогуНаПрибыль);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, "Подразделения", ПодразделениеДляРеглОпераций);
		
		ПроводкаБУ.СчетКт       = ПланыСчетов.Типовой.КорпоративныйПодоходныйНалогПодлежащийУплате;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт,1, Справочники.НалогиСборыОтчисления.НалогНаПрибыль);				
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
		ПроводкаБУ.Сумма        = ВыборкаИтогов.ДоходНУ*мСтавкаНалогаНаПрибыль/100;
				
		ПроводкаБУ.Содержание   		   = "Начислен налог на прибыль за период" + ПредставлениеПериода(мНачГода, мКонДата, "ФП=Истина");
		ПроводкаБУ.НомерЖурнала 		   = "ФР";	
		ПроводкаБУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль;	
	КонецЕсли;	
	
	мПроводкиБУ.Записать(Ложь);

КонецПроцедуры  // РасчетНалогаНаПрибыль

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА


// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Все,Себестоимость,Калькуляция,РаспределениеКосвенныхРасходов,СписаниеРБП,Переоценка,РасчетВычетаПоРеализованнымТоварам,РасчетВычетовПоНалогам","Все операции","Себестоимость продукции","Калькуляция", "Распределение косвенных расходов", "Списание расходов будущих периодов", "Переоценка валютных средств", "Расчет вычета по реализованным товарам (НУ)", "Расчет вычетов по налогам, уплаченным в бюджет (НУ)");	

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

//Процедура отменяет движения переданной операции из обработки "Закрытие месяца"
//
Процедура ОтменитьОперацию(ВидРегламентнойОперации) Экспорт
	
	//Необходимо по всем наборам записям удалить записи по текущей операции
	
	//1. Регистр бухгалтерии "Типовой"
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидРегламентнойОперации", ВидРегламентнойОперации);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
		|	Типовой.НомерСтроки
		|ИЗ
		|	РегистрБухгалтерии.Типовой КАК Типовой
		|ГДЕ
		|	Типовой.ВидРегламентнойОперации = &ВидРегламентнойОперации
		|	И Типовой.Регистратор = &Регистратор";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		НаборЗаписей = РегистрыБухгалтерии.Типовой.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение  = Ссылка;
		НаборЗаписей.Отбор.Регистратор.Использование = Истина;
		НаборЗаписей.Отбор.Регистратор.ВидСравнения	 = ВидСравнения.Равно;
		НаборЗаписей.Прочитать();
		
		Выборка = Результат.Выбрать();
		МассивУдаляемыхПроводок = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МассивУдаляемыхПроводок.Добавить(НаборЗаписей.Получить(Выборка.НомерСтроки-1));				
		КонецЦикла;	
		УдалитьЗаписиИзНабора(НаборЗаписей, МассивУдаляемыхПроводок);		 		
		НаборЗаписей.Записать();
	КонецЕсли;	  				

	//2. Регистр бухгалтерии "Налоговый"
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидРегламентнойОперации", ВидРегламентнойОперации);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
		|	Типовой.НомерСтроки
		|ИЗ
		|	РегистрБухгалтерии.Налоговый КАК Типовой
		|ГДЕ
		|	Типовой.ВидРегламентнойОперации = &ВидРегламентнойОперации
		|	И Типовой.Регистратор = &Регистратор";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		НаборЗаписей = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение  = Ссылка;
		НаборЗаписей.Отбор.Регистратор.Использование = Истина;
		НаборЗаписей.Отбор.Регистратор.ВидСравнения	 = ВидСравнения.Равно;
		НаборЗаписей.Прочитать();
		
		Выборка = Результат.Выбрать();
		МассивУдаляемыхПроводок = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МассивУдаляемыхПроводок.Добавить(НаборЗаписей.Получить(Выборка.НомерСтроки-1));				
		КонецЦикла;	
		УдалитьЗаписиИзНабора(НаборЗаписей, МассивУдаляемыхПроводок);		 		
		НаборЗаписей.Записать();
	КонецЕсли;	  				
	
	//3. Очистим записи у регистров, для операции "Расчет стоимости продукции"	
	Если ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ Тогда
		
		//3.1 - Регистр сведений "РасчетСебестоимостиПродукции"	
		НаборЗаписей = РегистрыСведений.РасчетСебестоимостиПродукции.СоздатьНаборЗаписей();
		ОчиститьНаборЗаписей(НаборЗаписей);
		
		//3.2 - Регистр сведений "РасчетРаспределенияКосвенныхРасходов"	
		НаборЗаписей = РегистрыСведений.РасчетРаспределенияКосвенныхРасходов.СоздатьНаборЗаписей();
		ОчиститьНаборЗаписей(НаборЗаписей);
		
		//3.3 - Регистр накопления "Реализция ТМЗ"	
		
		НаборЗаписей = РегистрыНакопления.РеализацияТМЗ.СоздатьНаборЗаписей();
		ОчиститьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
	//3. Очистим записи у регистров, для операции "Расчет стоимости продукции"	
	Если ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ Тогда
		
		//3.1 - Регистр сведений "РасчетСебестоимостиПродукции"	
		НаборЗаписей = РегистрыСведений.РасчетСебестоимостиПродукции.СоздатьНаборЗаписей();
		ОчиститьНаборЗаписей(НаборЗаписей);
		
		//3.2 - Регистр сведений "РасчетРаспределенияКосвенныхРасходов"	
		НаборЗаписей = РегистрыСведений.РасчетРаспределенияКосвенныхРасходов.СоздатьНаборЗаписей();
		ОчиститьНаборЗаписей(НаборЗаписей);
	
	КонецЕсли;
	              	
	//4. Очистим записи у регистров сведений, для операции "Расчет списания РБП"
	Если ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеРБПБУ Тогда
		
		//4.1 - Регистр сведений "РасчетСписанияРБП"	
		НаборЗаписей = РегистрыСведений.РасчетСписанияРБП.СоздатьНаборЗаписей();
		ОчиститьНаборЗаписей(НаборЗаписей);                				
	КонецЕсли;
	
	//5. Очистим записи у регистров сведений, для операции "Включение активов, учитываемых отдельно в стоимостной баланс(НУ)"
	Если ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно Тогда
		
		//5.1 - Регистр сведений "ФиксированныеАктивыУчитываемыеОтдельно"	
		НаборЗаписей = РегистрыСведений.ФиксированныеАктивыУчитываемыеОтдельно.СоздатьНаборЗаписей();
		ОчиститьНаборЗаписей(НаборЗаписей);                				
	КонецЕсли;
	
	//6. Очистим записи у регистров накопления, для операции "Расчет НДС к зачету"	
	Если ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету Тогда
		
		//6.1 - Регистр накопления "НДССИзмененнымСрокомУплаты"	
		НаборЗаписей = РегистрыНакопления.НДССИзмененнымСрокомУплаты.СоздатьНаборЗаписей();
		ОчиститьНаборЗаписей(НаборЗаписей);
		
		//6.2 - Регистр накопления "НДСВзаиморасчетыСБюджетом"	
		НаборЗаписей = РегистрыНакопления.НДСВзаиморасчетыСБюджетом.СоздатьНаборЗаписей();
		ОчиститьНаборЗаписей(НаборЗаписей);
	КонецЕсли;      
	
КонецПроцедуры

//Процедура удаляет записи из указанного набора записей
//
Процедура УдалитьЗаписиИзНабора(НаборЗаписей, МассивУдаляемыхЗаписей)
	Индекс = НаборЗаписей.Количество();
	Пока Индекс > 0 Цикл
		УдаляемаяЗапись = МассивУдаляемыхЗаписей.Найти(НаборЗаписей[Индекс-1]);
		Если УдаляемаяЗапись = Неопределено Тогда
			Индекс = Индекс -1;
			Продолжить;
		КонецЕсли;
		НаборЗаписей.Удалить(НаборЗаписей.Индекс(МассивУдаляемыхЗаписей.Получить(УдаляемаяЗапись)));
		Индекс = Индекс -1;
	КонецЦикла;			
КонецПроцедуры

//Процедура удаляет все записи из набора по данному регситратору
//
Процедура ОчиститьНаборЗаписей(НаборЗаписей)
	НаборЗаписей.Отбор.Регистратор.Значение  = Ссылка;
	НаборЗаписей.Отбор.Регистратор.Использование = Истина;
	НаборЗаписей.Отбор.Регистратор.ВидСравнения	 = ВидСравнения.Равно;
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры
	   
//Процедура удаляет ошибки по переданной регламентной операции из обработки "ЗакрытиеМесяца"
//
Процедура ОчиститьОшибкиПоРегламентнойОперации(ВидРегламентнойОперации) Экспорт
	Индекс = Ошибки.Количество();
	Пока Индекс > 0 Цикл
		Если Ошибки[Индекс-1].ВидРегламентнойОперации = ВидРегламентнойОперации Тогда
			Ошибки.Удалить(Ошибки[Индекс-1]);
		КонецЕсли;
		Индекс = Индекс -1 ;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеКурсовВалют(СтруктураШапкиДокумента, Отказ)
	  	
	 МетаданныеРеквизиты = Метаданные().ТабличныеЧасти["КурсыВалют"].Реквизиты;
   	  СтрокаНачалаСообщенияОбОшибке = "";
	  
	  //проверим что заполнены валюты, курс и кратность	   
	  Для Каждого СтрокаВалюты Из КурсыВалют Цикл
		  СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаВалюты.НомерСтроки) +
		  """ табличной части ""Курсы валют"": ";
		  СтруктураРеквизитов = Новый Структура;
		  СтруктураРеквизитов.Вставить("Валюта");
		  СтруктураРеквизитов.Вставить("Курс");
		  СтруктураРеквизитов.Вставить("Кратность");
		  
		  // Цикл проверки по списку СтруктураРеквизитов
		  Для Каждого КлючЗначение Из СтруктураРеквизитов Цикл			
			  Значение = СтрокаВалюты[КлючЗначение.Ключ];           			
			  Если НЕ ЗначениеЗаполнено(Значение) Тогда 				
				  // Проверка и вывод сообщений
				  Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //стандартное ругательство
					  ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					  СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!"; 					
				  Иначе
					  СтрокаСообщения = КлючЗначение.Значение;				
				  КонецЕсли;                                  
				  
				  ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, );
			  КонецЕсли;                                  
		  КонецЦикла;		   
	  КонецЦикла;
	  
	//проверим, что указаны все валюты, для которых нужно провести переоценку
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивВалют =  Новый Массив;
	МассивВалют = КурсыВалют.ВыгрузитьКолонку("Валюта");
	МассивВалют.Добавить(мВалютаРегламентированногоУчета);
	
	РегламентнаяПереоценка = Новый Массив;
	РегламентнаяПереоценка.Добавить(Перечисления.СпособыПризнанияКурсовойРазницы.Регламентно);
	РегламентнаяПереоценка.Добавить(Перечисления.СпособыПризнанияКурсовойРазницы.ПоОперациямПриПогашении);
	
	Запрос.УстановитьПараметр("РегламентнаяПереоценка", 	    РегламентнаяПереоценка);
	Запрос.УстановитьПараметр("ДатаКон", 					    мКонГраница);
	Запрос.УстановитьПараметр("Организация", 				    Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",	    СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("Регистратор",				    Ссылка);	
	Запрос.УстановитьПараметр("МассивВалют"              ,      МассивВалют);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТиповойОстатки.Счет,
	               |	ТиповойОстатки.Субконто1,
	               |	ТиповойОстатки.Субконто2,
	               |	ТиповойОстатки.Субконто3,
	               |	ТиповойОстатки.Валюта,
	               |	ТиповойОстатки.СуммаОстаток,
	               |	ТиповойОстатки.ВалютнаяСуммаОстаток
	               |ПОМЕСТИТЬ ВТ_ТиповойОстатки
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(
	               |			&ДатаКон,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					Типовой.Ссылка КАК СчетПереоценки
	               |				ИЗ
	               |					ПланСчетов.Типовой КАК Типовой
	               |						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценкиБУ
	               |						ПО
	               |							СчетаСОсобымПорядкомПереоценкиБУ.Счет = Типовой.Ссылка
	               |				ГДЕ
	               |					Типовой.Валютный = ИСТИНА
	               |					И (СчетаСОсобымПорядкомПереоценкиБУ.Счет ЕСТЬ NULL 
	               |						ИЛИ СчетаСОсобымПорядкомПереоценкиБУ.СпособПризнанияКурсовойРазницы В(&РегламентнаяПереоценка))),
	               |			,
	               |			Организация = &Организация
	               |				И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТиповойОстатки.Валюта
	               |ИЗ
	               |	ВТ_ТиповойОстатки КАК ТиповойОстатки
	               |ГДЕ
	               |	НЕ ТиповойОстатки.Валюта В (&МассивВалют)";
				   
	   ТаблицаПоНеЗаданнымВалютам = Запрос.Выполнить().Выгрузить();	
	   
	   Если КурсыВалют.Количество() <> 0 И  ТаблицаПоНеЗаданнымВалютам.Количество() <> 0 Тогда
		   СтрокаСообщения = "Для операции ""Переоценка валютных средств"" не заданы курсы закрытия для валют:";
		   ПерваяСтрока = Истина;
		   ЕстьОшибки   = Ложь;
		   
		   Для Каждого СтрокаОшибкиВалюты Из ТаблицаПоНеЗаданнымВалютам Цикл 
			   Если Не ЗначениеЗаполнено(СтрокаОшибкиВалюты.Валюта) Тогда				   
				   Продолжить;
			   КонецЕсли;
			   
			   Если Не ПерваяСтрока Тогда
				   СтрокаСообщения = СтрокаСообщения + ", ";				   
			   КонецЕсли;
			   СтрокаСообщения = СтрокаСообщения + СтрокаОшибкиВалюты.Валюта;
			   ЕстьОшибки   = Истина;
			   ПерваяСтрока = Ложь;			   
		   КонецЦикла;        		   
		   
		   Если ЕстьОшибки Тогда
		   		СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Укажите курсы для указанных валют или установите переключатель  ""Использовать текущие курса регистра ""Курсы валют"""". 
		   													|Документ не может быть проведен!";
		   
		   		Сообщить(СтрокаСообщения,СтатусСообщения.Важное);
		   		Отказ = Истина;		
			КонецЕсли;	   
	   КонецЕсли;
	   
	   СтруктураШапкиДокумента.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);		   
	    
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Функция формирует список документов "Движение НЗП" текущего месяца
Функция СформироватьЗапросПоДокументамНЗП(СтруктураШапкиДокумента)
	
	// Соберем данные о существующих документах "Движение НЗП".
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ДвижениеНЗП.Ссылка КАК ДокументСсылка
	             |ИЗ
	             |	Документ.ДвижениеНЗП КАК ДвижениеНЗП
	             |ГДЕ
	             |	ДвижениеНЗП.Организация = &Организация
				 |	
	             |	И ДвижениеНЗП.Дата >= &НачДата
	             |	И ДвижениеНЗП.Дата <= &КонДата
	             |	И ДвижениеНЗП.ВидОперации = &ВидОперации
	             |	И ДвижениеНЗП.ОтражатьВБухгалтерскомУчете";
	Запрос.УстановитьПараметр("НачДата",  НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонДата",  КонецМесяца (Дата));
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);	
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийДвиженияНЗП.ОтнесениеНаНЗП);
		
	Если (мУбранФлажокПереносНЗПНУ <> Неопределено и мУбранФлажокПереносНЗП <> Неопределено)
		ИЛИ (СтруктураШапкиДокумента.ПереносНЗПНУ И СтруктураШапкиДокумента.ПереносНЗПБУ) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ДвижениеНЗП.ОтражатьВБухгалтерскомУчете", "");
	ИначеЕсли мУбранФлажокПереносНЗПНУ <> Неопределено ИЛИ СтруктураШапкиДокумента.ПереносНЗПНУ Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтражатьВБухгалтерскомУчете", "УчитыватьКПН");
	КонецЕсли;
 	 		
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции	

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)

    Если Не ЗначениеЗаполнено(ВидРегламентнойОперации) Тогда
		Сообщить("-----" + "Начало проведения документа " + Ссылка + "-----", СтатусСообщения.Информация);
	КонецЕсли;
	
	
	СтруктураДопПараметров = Новый Структура;
	СтруктураДопПараметров.Вставить("СпособРасчетаСебестоимостиПроизводства", "");
	СтруктураДопПараметров.Вставить("РасчетПрямыхЗатратНомер", "");

	ЗаписьРасчетаСебестоимости = Движения.РасчетСебестоимостиПродукции.Выгрузить();
	ЗаписьРасчетаСебестоимости.Очистить();
	СтруктураДопПараметров.Вставить("ЗаписьРасчетаСебестоимости", ЗаписьРасчетаСебестоимости);
	
	ЗаписьРасчетаРаспределенияКосвенныхРасходов = Движения.РасчетРаспределенияКосвенныхРасходов.Выгрузить();
	ЗаписьРасчетаРаспределенияКосвенныхРасходов.Очистить();
	СтруктураДопПараметров.Вставить("ЗаписьРасчетаКосвенныхРасходов", ЗаписьРасчетаРаспределенияКосвенныхРасходов);
	
	ЗаписьВозвратыПоПроизводству = Движения.Типовой.Выгрузить();
	ЗаписьВозвратыПоПроизводству.Очистить();
	СтруктураДопПараметров.Вставить("ЗаписьВозвратыПоПроизводству", ЗаписьВозвратыПоПроизводству);
	
	ЗаписьРасчетВычета = Движения.РасчетВычетаПоРеализованнымТоварам.Выгрузить();
	ЗаписьРасчетВычета.Очистить();
	СтруктураДопПараметров.Вставить("ЗаписьРасчетВычета", ЗаписьРасчетВычета);

	ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров = Движения.СведенияОКорректировкиСтоимостиПродукцииИТоваров.Выгрузить();
	ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Очистить();
	СтруктураДопПараметров.Вставить("ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров", ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров);
	
	Если СтруктураШапкиДокумента.СписаниеРБПБУ Тогда
		
		ЗаписьРасчетаРБП = Движения.РасчетСписанияРБП.Выгрузить();
		ЗаписьРасчетаРБП.Очистить();
	КонецЕсли;
         	
	//Так как документ "Закрытие месяца" может работать как самостоятельно, так и в связки с
	//обраткой "ЗакрытиеМесяца", в которой имеется возможность выполнять не все сразу операции, а поэтапно,
	//поэтому необходимо понять, выполняется только одна операция или нет - за это отвечает переменная модуля 
	//ВидРегламентнойОперации. 
	
	//очистим ошибки
	ВыполнятьВсе = НЕ ЗначениеЗаполнено(ВидРегламентнойОперации);
	Если ВыполнятьВсе Тогда
		Ошибки.Очистить();
	Иначе	
		ОчиститьОшибкиПоРегламентнойОперации(ВидРегламентнойОперации);
	КонецЕсли;
	

	Если (ЗначениеЗаполнено(ВидРегламентнойОперации) И ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияОСБУ)
		ИЛИ ВыполнятьВсе Тогда
		// АМОРТИЗАЦИЯ
		// Начисление амортизации ОС
		НачислениеАмортизацииОС(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	КонецЕсли;
	
	
	Если (ЗначениеЗаполнено(ВидРегламентнойОперации) И ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияНМАБУ)
		ИЛИ ВыполнятьВсе Тогда

		// Начисление амортизации НМА
		НачислениеАмортизацииНМА(СтруктураШапкиДокумента, Отказ, Заголовок);		 	
	КонецЕсли;

	Если (ЗначениеЗаполнено(ВидРегламентнойОперации) И ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеРезерваПоПереоценкеОСБУ)
		ИЛИ ВыполнятьВсе Тогда
		
		// СПИСАНИЕ РЕЗЕРВА ПО ПЕРЕОЦЕНКЕ ОСНОВНЫХ СРЕДСТВ
		СписаниеРезеваПоПереоценкеОС(СтруктураШапкиДокумента, Отказ, Заголовок); 	
			
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ВидРегламентнойОперации)
		И ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредствБУ)
		ИЛИ ВыполнятьВсе Тогда
		// ПЕРЕОЦЕНКА
		ПереоценкаВалютныхСредств(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	
	Если (ЗначениеЗаполнено(ВидРегламентнойОперации)
		И ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеРБПБУ)  
		ИЛИ ВыполнятьВсе Тогда

		// СПИСАНИЕ РАСХОДОВ БУДУЩИХ ПЕРИОДОВ
		СписаниеРБП(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ВидРегламентнойОперации)
		И (ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ
		ИЛИ ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ)) 
		ИЛИ ВыполнятьВсе Тогда
	
		// ПРОИЗВОДСТВО БУ
		РасчетСебестоимостиПродукции(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок, "БУ");
	КонецЕсли;
	
	
	Если (ЗначениеЗаполнено(ВидРегламентнойОперации)
		И (ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ПереносНЗПБУ)
		ИЛИ ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ПереносНЗПНУ)
		ИЛИ ВыполнятьВсе Тогда
	
		// ПРОИЗВОДСТВО БУ
		ДвижениеНЗП(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок);
	КонецЕсли;



	//ЗАКРЫТИЕ СЧЕТОВ БУ
	Если (ЗначениеЗаполнено(ВидРегламентнойОперации)
		И (ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ЗачетАвансовыхПлатежейПоНалогамИСборамБУ))
		ИЛИ ВыполнятьВсе Тогда

		ВыполнитьЗачетНалоговИСборовБУ(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ВидРегламентнойОперации)
		И (ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ЗачетАвансовыхПлатежейПоНалогамИСборамНУ))
		ИЛИ ВыполнятьВсе Тогда

		ВыполнитьЗачетНалоговИСборовНУ(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	// ...
	
	Если (ЗначениеЗаполнено(ВидРегламентнойОперации)
		И (ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА
		ИЛИ ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоРасходамНаРемонт
		ИЛИ ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно
		ИЛИ ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоПреференциям
		ИЛИ ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеПриВыбытииВсехФАГруппы
		ИЛИ ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеСтоимостногоБалансаГруппыМенееМинимума
		ИЛИ ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияФАНУ))
		ИЛИ ВыполнятьВсе Тогда

		// РЕГЛАМЕНТНЫЕ НАЛОГОВОГО УЧЕТА
		РегламентныеОперацииПоФиксированнымАктивамНУ(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ВидРегламентнойОперации)
		И (ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВычетаПоРеализованнымТоварам))
		ИЛИ ВыполнятьВсе Тогда

		РасчетВычетаПоРеализованнымТоварам(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок);
	КонецЕсли;

	
	Если (ЗначениеЗаполнено(ВидРегламентнойОперации)
		И (ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетовНУ))
		ИЛИ ВыполнятьВсе Тогда

		ЗакрытиеСчетовНУ(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок);
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ВидРегламентнойОперации)
		И (ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоНалогам))
		ИЛИ ВыполнятьВсе Тогда

		РасчетВычетовПоНалогам_НУ(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок);
	КонецЕсли;
	
	
	// РЕГЛАМЕНТНЫЕ ОПЕРАЦИИ ПО НАЛОГУ НА ПРИБЫЛЬ
	
	Если (ЗначениеЗаполнено(ВидРегламентнойОперации)
		И (ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц))
		ИЛИ ВыполнятьВсе Тогда

		РасчетВременныхРазниц(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	//
	Если (ЗначениеЗаполнено(ВидРегламентнойОперации)
		И (ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль))
		ИЛИ ВыполнятьВсе Тогда

		РасчетНалогаНаПрибыль(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	
	Если (ЗначениеЗаполнено(ВидРегламентнойОперации)
		И (ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету))
		ИЛИ ВыполнятьВсе Тогда
		
		ВыполнитьЗачетПоНДС(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	
	Если (ЗначениеЗаполнено(ВидРегламентнойОперации)
		И (ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеПодотчетныхСуммБУ))
		ИЛИ ВыполнятьВсе Тогда

		ВыполнитьЗакрытиеПодотчетныхСуммБУ(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
		
	Если (ЗначениеЗаполнено(ВидРегламентнойОперации)
		И (ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетИтоговогоДоходаУбыткаБУ))
		ИЛИ ВыполнятьВсе Тогда

		РасчетИтоговогоДоходаУбытка("Бух", СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ВидРегламентнойОперации)
		И (ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетИтоговогоДоходаУбыткаНУ))
		ИЛИ ВыполнятьВсе Тогда

		РасчетИтоговогоДоходаУбытка("Нал", СтруктураШапкиДокумента, Отказ, Заголовок);
		
		Если Организация.ГоловнаяОрганизация <> Организация Тогда
			ЗакрытиеИтоговогоДоходаУбыткаНа1240(СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;

	
	
	Если (ЗначениеЗаполнено(ВидРегламентнойОперации)
		И (ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РеформацияБалансаБУ))
		ИЛИ ВыполнятьВсе Тогда

		ПроведениеРеформацииБаланса(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;	

	СтруктураДопПараметров.ЗаписьВозвратыПоПроизводству.Очистить();    	

	Если Не ЗначениеЗаполнено(ВидРегламентнойОперации) Тогда	
    	Сообщить("-----Окончание проведения документа " + Ссылка + "---", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)
	
	//Если вызываем проведение из обработки "ЗакрытиеМесяца" и передан вид регламентной операции, то
	//в этом случае не удаляем все движения, а только по переданной операции
	Если Не ЭтоНовый() И ЗначениеЗаполнено(ВидРегламентнойОперации)	Тогда		
		// Проверка ручной корректировки
		Если РучнаяКорректировка Тогда
			ОбщегоНазначения.ВключитьАктивностьПоРегистратору(ЭтотОбъект, Отказ);
			ТекстСообщения = "Движения документа отредактированы вручную и не могут быть автоматически актуализированы.";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, ,"");			
			Возврат;
		КонецЕсли; 		
		
		ОтменитьОперацию(ВидРегламентнойОперации);
		
	ИначеЕсли	ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,"",ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
		      	
 	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);	
	СтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете",    Ложь);
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете",    Ложь);
	СтруктураШапкиДокумента.Вставить("ВидУчетаНУ",    			   Справочники.ВидыУчетаНУ.ПустаяСсылка());
	
	мНачДата    = НачалоМесяца(Дата);
	мКонДата    = КонецДня(Дата);
	мНачГода    = НачалоГода(Дата);
	мНачГраница = Новый Граница(мНачДата, ВидГраницы.Включая);
	мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);

	//Проверим заполнение курсов валют, если она заполнена хоть одним значением при выполнении операции "Переоценка валютных средств"
	Если ПереоценкаВалютныхСредствБУ  Тогда		
		ПроверитьЗаполнениеКурсовВалют(СтруктураШапкиДокумента, Отказ); 		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	мУчетнаяПолитикаПоБухгалтерскомуУчету 	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(мКонДата, Отказ, СтруктураШапкиДокумента.Организация, "Бух");
	мУчетнаяПолитикаПоНалоговомуУчету 		= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(мКонДата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	
	СтруктураШапкиДокумента.Вставить("УчитыватьКПН",    						        ОрганизацияПлательщикНалогаНаПрибыль);	
	СтруктураШапкиДокумента.Вставить("ВидУчетаНУ",   									Справочники.ВидыУчетаНУ.НУ);	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						ОрганизацияПлательщикНалогаНаПрибыль или ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);

	ВедениеУчетаВременныхРазницБалансовымМетодом   =  ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 			ВедениеУчетаВременныхРазницБалансовымМетодом);
	
	мИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");	    

	СообщенияОповторахВидовОпераций = ПроверкаПовторовВидовОпераций(СтруктураШапкиДокумента);
	Если ЗначениеЗаполнено(СообщенияОповторахВидовОпераций) Тогда
		 ОбщегоНазначения.СообщитьОбОшибке(СообщенияОповторахВидовОпераций + " 
	 	|Документ не может быть проведен!");
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	мПроводкиБУ = Движения.Типовой;
	мПроводкиНУ = Движения.Налоговый;
	
	ПорядокПодразделенийСообщался 	= Ложь;
	
	ТаблицаНеЗакрытыхПодразделений = Новый ТаблицаЗначений;
	ТаблицаНеЗакрытыхПодразделений.Колонки.Добавить("Подразделение");
	ТаблицаНеЗакрытыхПодразделений.Колонки.Добавить("СчетЗатрат");
		
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	//После проведения устанавливаем состояние
	ПроставитьСостояниеОперации(Отказ);

КонецПроцедуры

//Процедура простаялет состояние выполнения документа "Закрытие месяца"
//
Процедура ПроставитьСостояниеОперации (Отказ)
	//необходимо заполнить состояние операции
		//ищем ошибки
	МассивОшибок = Ошибки.НайтиСтроки(Новый Структура("Комментарий", Ложь));
	
	Если Отказ Тогда			
		Если Не МассивОшибок.Количество() = 0 Тогда
			Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСошибками;
		Иначе
			Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
		КонецЕсли;
	ИначеЕсли НЕ МассивОшибок.Количество() = 0 Тогда
		Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСошибками;				
	Иначе
		Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
	КонецЕсли;
	
	
	//так как ошибки могут дублироваться, то необходимо свернуть их по описанию
	ТаблицаОшибок = Ошибки.Выгрузить();
	ТаблицаОшибок.Свернуть("Описание, ВидРегламентнойОперации, Комментарий");
	Ошибки.Загрузить(ТаблицаОшибок);
	
	Записать(); 	
КонецПроцедуры  

// Процедура проверяет наличие операций заданного вида в месяце проведения документа
// 
Функция ПроверкаПовторовВидовОпераций(СтруктураШапкиДокумента)
	///////////////////////////////////////////////////////////////////////////////////////////////////////
	// Проверка повторов Операций, выполняемых в разрезе СП
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",  СтруктураШапкиДокумента.СтруктурноеПодразделение);
	
	// Проверка отмеченных операций
	СтруктураВидовОперацийПоОрганизации	= Новый Структура();
	СтруктураВидовОперацийПоСтруктуркам =  Новый Структура();
	
	ЗакрытиеМесяцаМД  = Метаданные(); // метаданные документа закрытие месяца
	
	Для ИндексРегОперации = 1 по Перечисления.ВидыРегламентныхОпераций.Количество() Цикл
		РегОперация 	= Перечисления.ВидыРегламентныхОпераций.Получить(ИндексРегОперации-1);
		ИмяРегОперации 	= Метаданные.Перечисления.ВидыРегламентныхОпераций.ЗначенияПеречисления[ИндексРегОперации-1].Имя;
		Если ЗакрытиеМесяцаМД.Реквизиты.Найти(ИмяРегОперации) <> Неопределено Тогда
			Если СтруктураШапкиДокумента[ИмяРегОперации] Тогда
			 	ЗакрытиеМесяца.ЗаполнитьСпискиРегламентныхОперацийПоПериодамПроверки(мНачДата, СтруктураШапкиДокумента.Организация, РегОперация, СтруктураВидовОперацийПоОрганизации,СтруктураВидовОперацийПоСтруктуркам, мСписокОперацийПоОрганизации, СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом);
			КонецЕсли; 
		Иначе
			Сообщить(ИмяРегОперации);
		КонецЕсли;	
	КонецЦикла;	

	ТекстСообщения = "";
		
	Если СтруктураВидовОперацийПоОрганизации.Количество() <> 0 Тогда
		ТекстСообщения = ТекстСообщения + ЗакрытиеМесяца.ПроверитьПовторОперацииВОтчетномПериоде(НачалоГода(мНачдата), мКонДата, Организация, СтруктураВидовОперацийПоОрганизации);		
	КонецЕсли;
	
	Если СтруктураВидовОперацийПоСтруктуркам.Количество() <> 0 Тогда
		ТекстСообщения = ТекстСообщения + ЗакрытиеМесяца.ПроверитьПовторОперацииВОтчетномПериоде(НачалоГода(мНачдата), мКонДата, Организация, СтруктураВидовОперацийПоСтруктуркам,СтруктурноеПодразделение, ИСТИНА);		
	КонецЕсли;

	Возврат ТекстСообщения;	
Конецфункции

// Процедура проверяет наличие операций заданного вида в диапазоне даты отличных от текущего месяца
// Например для НДС - отчетным периодом может быть квартал, соответственно не должно быть повторов 
// этого вида операций за весь отчетный квартал
// Параметр СтруктураВидовОпераций - структура, ключом которой является идентификатор реквизита документа (имя операции)
//									 значение ключа - дата начала периода проверки.
Функция ПроверитьПовторОперацииВОтчетномПериоде(СтруктураШапкиДокумента, ДатаНачалаПериода, ДатаОкончанияПериода, СтруктураВидовОперации, ПроверятьСУчетомСП = Ложь)
	
	Если СтруктураВидовОперации.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаПериода", 	  ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ДатаОкончанияПериода", ДатаОкончанияПериода);
	Запрос.УстановитьПараметр("Организация",  		  СтруктураШапкиДокумента.Организация);
	Если ПроверятьСУчетомСП Тогда
		Запрос.УстановитьПараметр("СтруктурноеПодразделение",  СтруктураШапкиДокумента.СтруктурноеПодразделение);
	КонецЕсли;
	
		// временная таблица для выборки документов
	Запрос.Текст = "ВЫБРАТЬ ";	
	Для Каждого ВидОперации Из СтруктураВидовОперации Цикл
		ИмяОперации 	= ВидОперации.Ключ;
		Запрос.Текст 	= Запрос.Текст + "
	               |	ЗакрытиеМесяца." + ИмяОперации + " КАК " + ИмяОперации + ","
	КонецЦикла;
	Запрос.Текст 	= Запрос.Текст + "
				|	ЗакрытиеМесяца.Ссылка,
	            |	ЗакрытиеМесяца.Представление,
				|	ЗакрытиеМесяца.Дата
	            |ПОМЕСТИТЬ ВТ_СписокЗакрытияМесяца
	            |ИЗ
	            |	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
	            |ГДЕ
	            |	ЗакрытиеМесяца.Организация = &Организация " + ?(ПроверятьСУчетомСП, " И ЗакрытиеМесяца.СтруктурноеПодразделение = &СтруктурноеПодразделение ", "")+ "	            
	            |	И ЗакрытиеМесяца.Дата >= &ДатаНачалаПериода
	            |	И ЗакрытиеМесяца.Дата <= &ДатаОкончанияПериода
	            |	И ЗакрытиеМесяца.Проведен
	            |	И (НЕ ЗакрытиеМесяца.ПометкаУдаления); ";
	
	// Строим запрос с учетом группировки по виду операции, чтобы показывать пользвателю дубли в разрезе видов документа
	ПерваяОперация = Истина; // для первой записи не нужно ключевое слово ОБЪЕДИНИТЬ
	Для Каждого ВидОперации из СтруктураВидовОперации Цикл
		ИмяОперации 		 = ВидОперации.Ключ;
		ДатаПроверкиОперации = ВидОперации.Значение;
		Если НЕ ПерваяОперация Тогда
			Запрос.Текст = Запрос.Текст +	"
			            |ОБЪЕДИНИТЬ ВСЕ ";		
			
		КонецЕсли;      		
		ПерваяОперация = Ложь;			
		Запрос.Текст = Запрос.Текст +	" 
	               |ВЫБРАТЬ
	               |	""" + ИмяОперации + """ КАК ВидОперации,
	               |	1 КАК КоличествоОпераций,	               
				   |	ЗакрытиеМесяца.Ссылка КАК Ссылка,
	               |	ЗакрытиеМесяца.Представление  КАК ПредставлениеДокумента
	               |ИЗ
	               |	ВТ_СписокЗакрытияМесяца КАК ЗакрытиеМесяца
	               |ГДЕ
	               |	ЗакрытиеМесяца." + ИмяОперации;
		СтрокаДаты = "ДатаВремя(" + Формат(Год(ДатаПроверкиОперации),"ЧГ=0") + "," + Месяц(ДатаПроверкиОперации) + ","+День(ДатаПроверкиОперации) + ")";
		Запрос.Текст = Запрос.Текст + "			
			|	И ЗакрытиеМесяца.Дата >= " + СтрокаДаты; 		   
	               
	КонецЦикла;
	// добавляем Итоги по виду операции	
	Запрос.Текст = Запрос.Текст + "	               
	               |ИТОГИ
	               |	СУММА(КоличествоОпераций)
	               |ПО
	               |	ВидОперации";
				   
				   
	ВыборкаВидовОпераций = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	ТекстСообщения = "";
	
	Пока ВыборкаВидовОпераций.Следующий() Цикл

		Если ВыборкаВидовОпераций.КоличествоОпераций > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции " + СокрЛП(ВыборкаВидовОпераций.ВидОперации)+ " в документах:";
			// показываем пользователю перечень документов
			ВыборкаДетали = ВыборкаВидовОпераций.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				ТекстСообщения = ТекстСообщения + "
					|   " + СокрЛП(ВыборкаДетали.ПредставлениеДокумента);
			КонецЦикла;			
		   ТекстСообщения = ТекстСообщения + "
			| ";
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстСообщения;
КонецФункции

Процедура ОбработкаУдаленияПроведения(Отказ)
	
 	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
		
	//установим состояние = Не выполнено
	Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
	
	Если СтруктураШапкиДокумента.ПереносНЗПБУ ИЛИ СтруктураШапкиДокумента.ПереносНЗПНУ Тогда
		
		РезультатЗапроса = СформироватьЗапросПоДокументамНЗП(СтруктураШапкиДокумента);
		ТаблицаДокументов = РезультатЗапроса.Выгрузить();
		
		//существуют документы
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ТекстСообщения = "У текущего документа существуют подчиненные документы ""Движение НЗП"". 
			|Отмена проведения текущего документа вызовет также отмену проведения подчиненных документов.";
 			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , "Отмена проведения документа """ + Ссылка + """", СтатусСообщения.Важное);			

			Для Каждого Строка Из ТаблицаДокументов Цикл
				ТекущийДокумент = Строка.ДокументСсылка.ПолучитьОбъект();
				ТекущийДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЦикла;	 			
		КонецЕсли;	
	
	КонецЕсли;	

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	Если СтруктураШапкиДокумента.РасчетСтоимостиПродукцииНУ  Тогда
		
		// Проверка. Если в этом месяце не было Закрытия месяца с расчетом себестоимости по БУ, но сейчас 
		// проводится Закрытие расчетом стоимости НУ, то необходимо выдать соответствующее сообщение
		Если НЕ СтруктураШапкиДокумента.РасчетСтоимостиПродукцииБУ  Тогда
			
			мНачДата    = НачалоМесяца(Дата);
			мКонДата    = КонецМесяца (Дата);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("НачалоМесяца", мНачДата);
			Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
			Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
			
			Запрос.Текст = "ВЫБРАТЬ
			|	ЗакрытиеМесяца.Ссылка
			|ИЗ
			|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
			|
			|ГДЕ
			|	ЗакрытиеМесяца.Организация = &Организация 	И
			|	ЗакрытиеМесяца.Дата >= &НачалоМесяца 		И
			|	ЗакрытиеМесяца.Дата <= &КонецМесяца 		И
			|	ЗакрытиеМесяца.Проведен 					И
			|	НЕ ЗакрытиеМесяца.ПометкаУдаления 			И
			|   ЗакрытиеМесяца.РасчетСтоимостиПродукцииБУ";
			
			Результат = Запрос.Выполнить().Выгрузить();
			
			Если Результат.Количество() = 0 Тогда
				
				ТекстСообщения = "В текущем месяце не был выполнен расчет и корректировка себестоимости продукции(услуг).
				|Необходимо провести документ ""Закрытие месяца"" с таким флажком!";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);		
				
			КонецЕсли;	
		КонецЕсли;		
	КонецЕсли;
			

	Если СтруктураШапкиДокумента.ПереносНЗПБУ  Тогда
		
		// Проверка. Если в этом месяце не было Закрытия месяца с расчетом себестоимости, но сейчас 
		// проводится Закрытие с переносом НЗП, то необходимо выдать соответствующее сообщение
		Если НЕ СтруктураШапкиДокумента.РасчетСтоимостиПродукцииБУ  Тогда
			
			мНачДата    = НачалоМесяца(Дата);
			мКонДата    = КонецМесяца (Дата);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("НачалоМесяца", мНачДата);
			Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
			Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
			
			Запрос.Текст = "ВЫБРАТЬ
			|	ЗакрытиеМесяца.Ссылка
			|ИЗ
			|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
			|
			|ГДЕ
			|	ЗакрытиеМесяца.Организация = &Организация 	И
			|	ЗакрытиеМесяца.Дата >= &НачалоМесяца 		И
			|	ЗакрытиеМесяца.Дата <= &КонецМесяца 		И
			|	ЗакрытиеМесяца.Проведен 					И
			|	НЕ ЗакрытиеМесяца.ПометкаУдаления 			И
			|   ЗакрытиеМесяца.РасчетСтоимостиПродукцииБУ";
			
			Результат = Запрос.Выполнить().Выгрузить();
			
			Если Результат.Количество() = 0 Тогда
				
				ТекстСообщения = "В текущем месяце не был выполнен расчет и корректировка себестоимости продукции(услуг).
				|Необходимо провести документ ""Закрытие месяца"" с таким флажком!";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);			
				
			КонецЕсли;	
		КонецЕсли;		
			
		Если ПометкаУдаления  <> Ссылка.ПометкаУдаления  Тогда
			
			РезультатЗапроса = СформироватьЗапросПоДокументамНЗП(СтруктураШапкиДокумента);
			ТаблицаДокументов = РезультатЗапроса.Выгрузить();
			
			//существуют документы
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ТекстСообщения = "У текущего документа существуют подчиненные документы ""Движение НЗП"". """
				+?(Ссылка.ПометкаУдаления = Ложь, "
				|Удаление текущего документа вызовет также удаление подчиненных документов.", "
				|Снятие пометки удаления с текущего документа вызовет также снятие пометки удаления с подчиненных документов.");
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ?(Ссылка.ПометкаУдаления = Ложь, "Удаление документа ", "Снятие пометки удаления документа ") + Ссылка + """", СтатусСообщения.Важное);			
				
				Для Каждого Строка Из ТаблицаДокументов Цикл
					ТекущийДокумент = Строка.ДокументСсылка.ПолучитьОбъект();
					ТекущийДокумент.УстановитьПометкуУдаления(?(Ссылка.ПометкаУдаления = Ложь, Истина, Ложь));
				КонецЦикла;					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Состояние) Тогда
		Если Движения.Типовой.Количество() + Движения.Налоговый.Количество() = 0 Тогда
			Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
		Иначе
			Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
		КонецЕсли;
	КонецЕсли;
	
	//очистим табличную часть "Курсы валют", если переоценка валютных средств отключена
	Если НЕ ПереоценкаВалютныхСредствБУ И КурсыВалют.Количество() <> 0 Тогда
		КурсыВалют.Очистить();
	КонецЕсли;
		
КонецПроцедуры

//
Процедура ЗакрытиеИтоговогоДоходаУбыткаНа1240(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	НаборЗаписей = РегистрыСведений.СобственныеКонтрагенты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Значение = СтруктураШапкиДокумента.Организация.ГоловнаяОрганизация;
	НаборЗаписей.Отбор.Организация.Использование = Истина;
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		КонтрагентГоловнойОрганизации = НаборЗаписей[0].Контрагент;
	Иначе
		КонтрагентГоловнойОрганизации = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.СобственныеКонтрагенты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Значение = СтруктураШапкиДокумента.Организация;
	НаборЗаписей.Отбор.Организация.Использование = Истина;
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		КонтрагентОрганизации = НаборЗаписей[0].Контрагент;
	Иначе
		КонтрагентОрганизации = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Типовой.ИтоговаяПрибыльИтоговыйУбыток);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКон",     	мКонГраница);
	Запрос.УстановитьПараметр("Организация", 	СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет", МассивСчетов);
	
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", 	СтруктураШапкиДокумента.СтруктурноеПодразделение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ		
	|	ТиповойОстатки.Счет,
	|	ЕСТЬNULL(ТиповойОстатки.СуммаОстатокКт, 0) КАК СуммаКт,
	|	ТиповойОстатки.Субконто1,
	|	ТиповойОстатки.Субконто2,
	|	ТиповойОстатки.Субконто3
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|	    ) КАК ТиповойОстатки";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.СуммаКт = 0 Тогда
			Продолжить;
		КонецЕсли;
		// Реформация итогового дохода/убытка
		// Закрываем на головное
		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период                   = Дата;
		Проводка.Организация              = СтруктураШапкиДокумента.Организация;				
		Проводка.СчетДт                   = Выборка.Счет;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Выборка.Субконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Выборка.Субконто3);
		
		Проводка.СчетКт                   = ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПредставительств;				
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, КонтрагентГоловнойОрганизации);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Справочники.СтатьиОборотов.ИтоговаяПрибыльУбыток);
		
		Проводка.Сумма                    = Выборка.СуммаКТ;
		Проводка.Содержание               = "Реформация баланса";
		Проводка.НомерЖурнала             = "ФР";
		Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.РеформацияБалансаБУ;
		
		// Проводим у головного
		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период                   = Дата;
		Проводка.Организация              = СтруктураШапкиДокумента.Организация.ГоловнаяОрганизация;				
		Проводка.СчетКт                   = Выборка.Счет;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Выборка.Субконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Выборка.Субконто3);
		
		Проводка.СчетДт                   = ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПредставительств;				
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, КонтрагентОрганизации);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Справочники.СтатьиОборотов.ИтоговаяПрибыльУбыток);
		
		Проводка.Сумма                    = Выборка.СуммаКТ;
		Проводка.Содержание               = "Итоговый доход/убыток "+СокрЛП( СтруктураШапкиДокумента.Организация.Наименование);
		Проводка.НомерЖурнала             = "ФР";
		Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.РеформацияБалансаБУ;
		
	КонецЦикла;	
	                           	
	мПроводкиБУ.Записать(Ложь);
	
КонецПроцедуры //ЗакрытиеИтоговогоДоходаУбыткаНа1240

// Процедура выполняет перенос отрицательной дебиторской задолженности
// по расчетам с подотчеными лицами на соответствующий счет кредиторской задолженности
//
Процедура ВыполнитьЗакрытиеПодотчетныхСумм(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ЗакрытиеПодотчетныхСумм Тогда
		Возврат;		
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТиповойОстатки.Счет,
	|	ТиповойОстатки.Субконто1 КАК Работник,
	|	ТиповойОстатки.Организация,
	|	ТиповойОстатки.Валюта,
	|	ТиповойОстатки.СуммаОстаток КАК Сумма,
	|	ТиповойОстатки.ВалютнаяСуммаОстаток КАК ВалютнаяСумма
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&ДатаОстатков, Счет В (&СписокСчетов), , Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстатки
	|ГДЕ
	|	ТиповойОстатки.СуммаОстаток < 0";
	
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц);
	//СписокСчетов.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПодотчетныхЛиц);
	
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("ДатаОстатков", мКонГраница);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктураШапкиДокумента.СтруктурноеПодразделение);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаРезультатов = Результат.Выбрать();
	Пока ВыборкаРезультатов.Следующий() Цикл
		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период                = Дата;
		Проводка.Организация           = СтруктураШапкиДокумента.Организация;				
		Проводка.СчетДт                = ВыборкаРезультатов.Счет;				
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"РаботникиОрганизаций", ВыборкаРезультатов.Работник);
		
		Проводка.СчетКт                = ?(ВыборкаРезультатов.Счет = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц, ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПередПодотчетнымиЛицами, ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПередПодотчетнымиЛицами);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"РаботникиОрганизаций", ВыборкаРезультатов.Работник);
		
		Если ВыборкаРезультатов.ВалютнаяСумма <> 0 Тогда
			Проводка.ВалютаДт 			   = ВыборкаРезультатов.Валюта;
			Проводка.ВалютнаяСуммаДт	   = -ВыборкаРезультатов.ВалютнаяСумма;
			Проводка.ВалютаКт 			   = ВыборкаРезультатов.Валюта;
			Проводка.ВалютнаяСуммаКт	   = -ВыборкаРезультатов.ВалютнаяСумма;
		КонецЕсли;
		
		Проводка.Сумма                   = -ВыборкаРезультатов.Сумма;
		Проводка.Содержание              = "Закрытие подотчетных сумм";
		Проводка.НомерЖурнала          	 = "БУ";
		Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеПодотчетныхСумм;
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
	КонецЦикла;
	
	мПроводкиБУ.Записать(Ложь);	
КонецПроцедуры // ВыполнитьЗакрытиеПодотчетныхСумм

мВалютаРегламентированногоУчета 			  = Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Ложь;
//мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения 		  = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
ДвижениеЗатратПоГПСписаннойВПроизводство 	  = Ложь;


мСписокОперацийПоОрганизации = ЗакрытиеМесяца.ПолучитьСписокОперацийЗакрытияМесяцаПоОрганизации();

