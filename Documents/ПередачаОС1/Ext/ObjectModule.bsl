////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;


Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

Перем ТабЗатрат;
Перем ПроводкиНУ;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Заполняет аналитику счета табличной части
// значениями по умолчанию
//
Процедура ЗаполнитьАналитикуСчета(СтрокаТЧ, ИмяСчета, ИмяАналитикиСчета) Экспорт
	ПроцедурыБухгалтерскогоУчета.НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТЧ, СтрокаТЧ[ИмяСчета],ИмяАналитикиСчета);
	
	Для Счетчик = 1  По  3 Цикл					
		Если СтрокаТЧ[ИмяСчета].ВидыСубконто.Количество() >= Счетчик Тогда		
			// Заполняем значения аналитики ОС
			Если СтрокаТЧ[ИмяСчета].ВидыСубконто[Счетчик - 1].ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ОсновныеСредства")) Тогда
				СтрокаТЧ[ИмяАналитикиСчета + Счетчик]= СтрокаТЧ.ОсновноеСредство;
			КонецЕсли;														
		Иначе
			СтрокаТЧ[ИмяАналитикиСчета + Счетчик] = Неопределено;	
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрисоединитьСекцию(Макет, ТабДокумент, ВыводитьПринял, ВыводитьДатаПринял, ВыводитьПодвалВерх, ВыводитьПодвалНиз, ВыведенПодвал)

	Если ВыводитьПринял Тогда
		ТекущаяСекция = Макет.ПолучитьОбласть("ОССдал|Принял");
		ТекущаяСекция.Параметры.Принял = "Принял";
		// данная область выводится только один раз
		ВыводитьПринял = Ложь;
		ВыводитьДатаПринял = Истина;
	ИначеЕсли ВыводитьДатаПринял Тогда
		ТекущаяСекция = Макет.ПолучитьОбласть("ПодвалДата|Принял");
		// данная область выводится только один раз
		ВыводитьДатаПринял = Ложь;
		ВыводитьПодвалВерх = Истина;
	ИначеЕсли ВыводитьПодвалВерх Тогда
		ТекущаяСекция = Макет.ПолучитьОбласть("ПодвалВерх|Принял");
		ЗаполнятьДоверенность = (ТипЗнч(ЭтотОбъект.Ссылка) = Тип("ДокументСсылка.ПередачаОС") ИЛИ ТипЗнч(ЭтотОбъект) = Тип("ДокументСсылка.ПередачаНМА"));
		ТекущаяСекция.Параметры.Доверенность = ?(ЗаполнятьДоверенность И ЗначениеЗаполнено(ЭтотОбъект.Доверенность), СокрЛП(ЭтотОбъект.Доверенность), "№_________________ от ""____""_______________ 20___ года");
		ТекущаяСекция.Параметры.ЧерезКого = ?(ЗаполнятьДоверенность И ЗначениеЗаполнено(ЭтотОбъект.ДоверенностьЧерезКого), СокрЛП(ЭтотОбъект.ДоверенностьЧерезКого), "");
		// данная область выводится только один раз
		ВыводитьПодвалВерх = Ложь;
		ВыводитьПодвалНиз = Истина;
	ИначеЕсли ВыводитьПодвалНиз Тогда
		ТекущаяСекция = Макет.ПолучитьОбласть("ПодвалНиз|Принял");
		// данная область выводится только один раз
		ВыводитьПодвалНиз = Ложь;
		ВыведенПодвал = Истина;
	Иначе
		ТекущаяСекция = Макет.ПолучитьОбласть("ПодвалПустаяСекция|Принял");
	КонецЕсли;
	
	ТабДокумент.Присоединить(ТекущаяСекция);

КонецПроцедуры

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()   
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПередачаОС.Номер,
	|	ПередачаОС.Дата,
	|	ПередачаОС.ДоговорКонтрагента КАК Основание,
	|	ПередачаОС.Контрагент КАК Получатель,
	|	ПередачаОС.Организация,
	|	ПередачаОС.СтруктурноеПодразделение,
	|	ПередачаОС.Организация КАК Поставщик,
	|	ПередачаОС.СуммаДокумента,
	|	ПередачаОС.ВалютаДокумента,
	|	ПередачаОС.УчитыватьНДС,
	|	ПередачаОС.СуммаВключаетНДС,
	|	ПередачаОС.Доверенность,
	|	ПередачаОС.ДоверенностьЧерезКого
	|ИЗ
	|	Документ.ПередачаОС1 КАК ПередачаОС
	|ГДЕ
	|	ПередачаОС.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаДок",     Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПередачаОС.ОсновноеСредство КАК ОС,
	|	ПередачаОС.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ПередачаОС.Сумма) КАК Сумма,
	|	СУММА(ПередачаОС.СуммаНДС) КАК СуммаНДС,
	|	МИНИМУМ(ПередачаОС.НомерСтроки) КАК НомерСтроки,
	|	МИНИМУМ(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер) КАК ИнвентарныйНомер
	|ИЗ
	|	Документ.ПередачаОС1.ОС КАК ПередачаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаДок, Организация = &Организация) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО ПередачаОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|ГДЕ
	|	ПередачаОС.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ПередачаОС.ОсновноеСредство,
	|	ПередачаОС.СтавкаНДС
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаОС_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Расходная накладная", глСписокПрефиксовУзлов);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ПредставлениеПоставщика = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = СокрЛП(ПредставлениеПоставщика);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ПредставлениеПолучателя = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = СокрЛП(ПредставлениеПолучателя);
	ТабДокумент.Вывести(ОбластьМакета);

	Если ЗначениеЗаполнено(Шапка.Доверенность) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Доверенность");
		ДанныеДляДоверенности = СокрЛП(Шапка.Доверенность);
		Если ЗначениеЗаполнено(Шапка.ДоверенностьЧерезКого) Тогда
			ДанныеДляДоверенности = ДанныеДляДоверенности + " выданной, "  + СокрЛП(Шапка.ДоверенностьЧерезКого);
		КонецЕсли;		
		ОбластьМакета.Параметры.Доверенность = ДанныеДляДоверенности;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Шапка.Основание) Тогда 
		ОбластьМакета = Макет.ПолучитьОбласть("Основание");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;


	ЕстьСкидки = Ложь;

	ВыводитьКоды = Ложь;

	ОбластьШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы");

	ТабДокумент.Вывести(ОбластьШапка);

	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	Сумма    = 0;
	СуммаНДС = 0;
	
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.ОС) Тогда
			Сообщить("В одной из строк не заполнено значение ОС - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьСтрока.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ОбластьСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьСтрока.Параметры.Цена       = ВыборкаСтрокТовары.Сумма;
		ОбластьСтрока.Параметры.Код        = ВыборкаСтрокТовары.ОС.Код;
		ОбластьСтрока.Параметры.ИнвентарныйНомер = ВыборкаСтрокТовары.ИнвентарныйНомер;
		ОбластьСтрока.Параметры.Количество = 1;
		ОбластьСтрока.Параметры.Цена = ВыборкаСтрокТовары.Сумма;
		ОбластьСтрока.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.ОС);
		ТабДокумент.Вывести(ОбластьСтрока);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		
	КонецЦикла;

	// Вывести Итого
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	
	ОбластьИтого.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьИтого);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьИтогоНДС = Макет.ПолучитьОбласть("ИтогоНДС");		
		ОбластьИтогоНДС.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ОбластьИтогоНДС.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
		ТабДокумент.Вывести(ОбластьИтогоНДС); 
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Функция формирует табличный документ с печатной формой ОС-1.
// 
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта (накладной) приемки-передачи группы ОС
//
Функция ПечатьОС1()
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        "Члены комиссии");
	
	
	// запрос для реквизитов шапки 
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПередачаОС.Дата,
	|	ПередачаОС.Номер,
	|	ПередачаОС.Организация,
	|	ПередачаОС.СтруктурноеПодразделение,
	|	ПередачаОС.Контрагент,
	|	ПередачаОС.СчетУчетаРасчетовСКонтрагентом,
	|	ПередачаОС.ДокументОснованиеВид,
	|	ПередачаОС.ДокументОснованиеДата,
	|	ПередачаОС.ДокументОснованиеНомер,
	|	ПередачаОС.ИнвентаризационнаяКомиссия.(
	|		Ссылка,
	|		НомерСтроки,
	|		ФизЛицо,
	|		Председатель
	|	) КАК ИнвентаризационнаяКомиссия,
	|	ПередачаОС.Доверенность,
	|	ПередачаОС.ДоверенностьЧерезКого КАК ЧерезКого
	|ИЗ
	|	Документ.ПередачаОС КАК ПередачаОС
	|ГДЕ
	|	ПередачаОС.Ссылка = &Ссылка";
	
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	ТаблицаИнвентаризационнаяКомиссия = Док.ИнвентаризационнаяКомиссия.Выгрузить();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",      Ссылка);
	Запрос.УстановитьПараметр("ДатаДок",     Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПередачаОСОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ВЫРАЗИТЬ(ПередачаОСОС.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеОС,
	|	ПередачаОСОС.СтоимостьБУ,
	|	ПередачаОСОС.АмортизацияБУ,
	|	ПередачаОСОС.АмортизацияЗаМесяцБУ,
	|	ВЫРАЗИТЬ(ПередачаОСОС.ОсновноеСредство.ЗаводскойНомер КАК СТРОКА(1000)) КАК ЗаводскойНомер,
	|	ВЫРАЗИТЬ(ПередачаОСОС.ОсновноеСредство.НомерПаспорта КАК СТРОКА(1000)) КАК НомерПаспорта,
	|	ПередачаОСОС.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
	|	ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ПередачаОСОС.СчетДоходовБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокСлужбыПолезной,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации КАК СрокСлужбыНормативной,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации КАК НормаАмортизации,
	|	СпособыОтраженияРасходов.СчетЗатрат
	|ИЗ
	|	Документ.ПередачаОС.ОС КАК ПередачаОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаДок, Организация = &Организация) КАК ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних
	|		ПО ПередачаОСОС.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ДатаДок, Организация = &Организация) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО ПередачаОСОС.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|			СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
	|			СпособыОтраженияРасходовПоАмортизацииСпособы.СчетЗатрат КАК СчетЗатрат
	|		ИЗ
	|			РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ДатаДок, Организация = &Организация) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
	|				ПО СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации.Ссылка = СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка
	|					И (СпособыОтраженияРасходовПоАмортизацииСпособы.НомерСтроки = 1)) КАК СпособыОтраженияРасходов
	|		ПО ПередачаОСОС.ОсновноеСредство = СпособыОтраженияРасходов.ОсновноеСредство
	|ГДЕ
	|	ПередачаОСОС.Ссылка = &Ссылка";
	
	РезЗапросаОС = Запрос.Выполнить();
	ТаблицаОС = РезЗапросаОС.Выгрузить();
	
	// Получим список МОЛ на основании списка ОС
	СписокОС = РезЗапросаОС.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ОсновноеСредство", СписокОС);
	Запрос.УстановитьПараметр("Организация",      Док.Организация);
	Запрос.УстановитьПараметр("Дата",             Док.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛ
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|		&Дата,
	|		Организация = &Организация
	|		    И ОсновноеСредство В (&ОсновноеСредство)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних";
	
	ТаблицаМОЛ = Запрос.Выполнить().Выгрузить();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Док.Организация, Док.СтруктурноеПодразделение);
	
	//формирование печатной формы документа

	Макет = ПолучитьМакет("ОС1");
	
	// Получаем области макета для вывода в табличный документ
	Шапка             = Макет.ПолучитьОбласть("Шапка");
	Таблица1		  = Макет.ПолучитьОбласть("Таблица1");
	ЗаголовокТаблицы2 = Макет.ПолучитьОбласть("ЗаголовокТаблицы2");
	СтрокаТаблицы2    = Макет.ПолучитьОбласть("СтрокаТаблицы2");
	Приказ			  = Макет.ПолучитьОбласть("Приказ");
	Подвал            = Макет.ПолучитьОбласть("Подвал");	
	ШапкаОборотнойСтороны = Макет.ПолучитьОбласть("ШапкаОборотнойСтороны");	
	ЗаголовокТаблицы3 = Макет.ПолучитьОбласть("ЗаголовокТаблицы3");
	ОССдал			  = Макет.ПолучитьОбласть("ОССдал|Сдал");
	ПодвалСдал		  = Макет.ПолучитьОбласть("ПодвалМОЛ|Сдал");
	ПодвалПринял	  = Макет.ПолучитьОбласть("ПодвалМОЛ|Принял");
	ОСПринял		  = Макет.ПолучитьОбласть("ОССдал|Принял");
	МОЛ		  		  = Макет.ПолучитьОбласть("МОЛ|Принял");
	ОбластьКомиссии          = Макет.ПолучитьОбласть("Комиссия");	
	ПодписьГлавногоБухгалтера = Макет.ПолучитьОбласть("ПодписьГлавногоБухгалтера");
		
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаОС_ОС1";

	////////////////////////////////////////////////////////////////////////
	// 1-я страница формы
	
	// Выведем шапку документа
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.Дата);
	Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Док.Дата);
	
	Шапка.Параметры.Заполнить(Док);
	Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	Шапка.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
	Шапка.Параметры.ОрганизацияРНН    = СведенияОбОрганизации.РНН;
	Шапка.Параметры.НомерДок = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	Шапка.Параметры.РасшифровкаПодписи = Руководители.Руководитель;
	Шапка.Параметры.Должность = Руководители.РуководительДолжность;
	
	//формируем список основных средств через запятую
	СписокОС = "";
	СписокНаименованийОС = ТаблицаОС.Скопировать();
	СписокНаименованийОС.Свернуть("НаименованиеОС");
	Для Каждого СтрокаОС ИЗ СписокНаименованийОС Цикл
		Если СписокОС = "" Тогда
			СписокОС = СтрокаОС.НаименованиеОС;
		Иначе
			СписокОС = СписокОС + ", " + СтрокаОС.НаименованиеОС;
		КонецЕсли;	
	КонецЦикла;	
	
	Шапка.Параметры.НаименованиеОбъекта = СписокОС;
	ТабДокумент.Вывести(Шапка);
	
	Таблица1.Параметры.ДатаДок = Док.Дата;
	
	//Заполняем раздел "Основание"
	Таблица1.Параметры.НаимДокОсн  = Ссылка.Метаданные().Синоним;
	Таблица1.Параметры.НомерДокОсн = Номер;
	Таблица1.Параметры.ДатаДокОсн  = Дата;
		
	ТаблицаМОЛ.Свернуть("МОЛ");
	СтрокаМОЛ = "";
	
	Для Каждого Стр Из ТаблицаМОЛ Цикл
		СтрокаМОЛ = СтрокаМОЛ + СокрЛП(Стр.МОЛ) + Символы.ПС;  			
	КонецЦикла;	
	СтрокаМОЛ = Лев(СтрокаМОЛ, СтрДлина(СтрокаМОЛ) -1); 
	
	Таблица1.Параметры.СписокМОЛ = СтрокаМОЛ; 

	Сдатчик = "";
	СчетКт  = "";
	
	Сдатчик    = СтруктурнаяЕдиницаОрганизация; 
	Получатель = Док.Контрагент;
	СчетДт     = Док.СчетУчетаРасчетовСКонтрагентом;
	
	Таблица1.Параметры.Сдатчик    = Сдатчик;
	Таблица1.Параметры.Получатель = Получатель;
	ТабДокумент.Вывести(Таблица1);
	
	ЗаголовокТаблицы2.Параметры.Валюта = ВалютаДокумента;
	ТабДокумент.Вывести(ЗаголовокТаблицы2);

	ДокументПринятияКУчетуБУ = Неопределено;
	ДатаПринятияКУчету 	 = '00010101';

	// Выведем строки таблицы
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СтрокаТаблицы2) Тогда
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			// Выведем заголовок таблицы	
			ТабДокумент.Вывести(ЗаголовокТаблицы2);
		КонецЕсли;
				
		СтрокаТаблицы2.Параметры.СчетКт						= СтрокаОС.СчетДоходовБУ;
        СтрокаТаблицы2.Параметры.СчетДт						= СчетДт;
		СтрокаТаблицы2.Параметры.ПервоначальнаяСтоимость 	= СтрокаОС.СтоимостьБУ;
		УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(СтрокаОС.ОсновноеСредство, Док.Организация, Перечисления.ВидыСостоянийОС.ПринятоКУчету, Док.Дата, ДокументПринятияКУчетуБУ,  ДатаПринятияКУчету);
		СтрокаТаблицы2.Параметры.ДатаВводаВЭксплуатацию 	= ДатаПринятияКУчету; 
		СтрокаТаблицы2.Параметры.Заполнить(СтрокаОС);
		ТабДокумент.Вывести(СтрокаТаблицы2);
		
	КонецЦикла;
	
	//Приказ.Параметры.Заполнить(Док);
	Стр = "";
	Стр = """_____"""+"________________________ 20_____г.";
	Приказ.Параметры.ДокументОснованиеВид = ?(ЗначениеЗаполнено(Док.ДокументОснованиеВид),Док.ДокументОснованиеВид,"приказа (распоряжения)");
	Приказ.Параметры.ДокументОснованиеДата = ?(ЗначениеЗаполнено(Док.ДокументОснованиеДата),Формат(Док.ДокументОснованиеДата,"ДЛФ=DD"),Стр);
	Приказ.Параметры.ДокументОснованиеНомер = ?(ЗначениеЗаполнено(Док.ДокументОснованиеНомер),Док.ДокументОснованиеНомер,"_________ ");
	Приказ.Параметры.НаименованиеОбъекта = СписокОС;
	ТабДокумент.Вывести(Приказ);
	
	ТабДокумент.Вывести(Подвал);
	ТабДокумент.Вывести(ШапкаОборотнойСтороны);
	ТабДокумент.Вывести(ЗаголовокТаблицы3);
	
	//Печать данных о комисси
	ОбластьМакета = Макет.ПолучитьОбласть("Комиссия");
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", "Председатель комиссии:");
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        "Члены комиссии:");
	
	// Выведем подпись председателя инвентаризационной комиссии
	ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	
	Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		
		ДанныеПредседателя = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, ПредседательКомиссии.ФизЛицо, Док.Дата);
			
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		ОбластьМакета.Параметры.Должность                = ДанныеПредседателя.Должность;
		ОбластьМакета.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		
	Иначе
		
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		ОбластьМакета.Параметры.Должность                = "";
		ОбластьМакета.Параметры.РасшифровкаПодписи       = "";
		
	КонецЕсли;
		
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();
	
	Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		Если НЕ Строка.Председатель Тогда
			СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Док.Организация, СписокЧленовКомиссии, Док.Дата);
	
		
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	Если ИнвентаризационнаяКомиссия.Количество() < 1 Тогда
		ВыводитьЗаголовок = Истина;	
		
		Для Итератор = 1 По 3 Цикл
			
			Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьКомиссии) Тогда
				
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
			КонецЕсли;
			
			ОбластьКомиссии.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
			ЗаголовокРазделаКомиссии.ЧленыКомиссии,
			"");
			ОбластьКомиссии.Параметры.Должность          = "";
			ОбластьКомиссии.Параметры.РасшифровкаПодписи = "";
			
			ТабДокумент.Вывести(ОбластьКомиссии);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
	Иначе
		// Сначала выведем членов комиссии из выборки
		Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
			
			Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
				
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
			КонецЕсли;
			
			ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
			ЗаголовокРазделаКомиссии.ЧленыКомиссии,
			"");
			ОбластьМакета.Параметры.Должность          = ЧленКомиссии.Должность;
			ОбластьМакета.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
	КонецЕсли;

	//список МОЛ
	СписокМОЛ = ТаблицаМОЛ.ВыгрузитьКолонку("МОЛ");
	ДанныеМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Док.Организация, СписокМОЛ, Док.Дата);
	ВыводитьОС = Истина;
	ВыводитьПринял = Истина;
	ВыводитьПодвалПринял = Ложь; // признак вывода области ПодвалПринял
	ВыводитьМОЛ = Ложь; // признак вывода области МОЛ
	ВыводитьПодвалСдал = Истина;
	
	ВыведенаПодвалПринял = Ложь;
	ВыведенаМОЛ = Ложь;
	
	Для Каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОССдал) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьОС = Истина; // на новой странице выведем заголовок набора подписей
			
		КонецЕсли;
		
		ОССдал.Параметры.ОбъектОсновныхСредств 	 = ?(ВыводитьОС,	"Объект основных средств" 	 ,"");
		ОССдал.Параметры.Сдал = ?(ВыводитьОС,	"Сдал" ,"");

		ОССдал.Параметры.Должность          = СтрокаМОЛ.Должность;
		ОССдал.Параметры.РасшифровкаПодписи = СтрокаМОЛ.Представление;
		
		ТабДокумент.Вывести(ОССдал);
		
		Если ВыводитьМОЛ Тогда
			ТабДокумент.Присоединить(МОЛ);
			ВыведенаМОЛ = Истина;
			// данная область выводится только один раз
			ВыводитьМОЛ = Ложь;
		КонецЕсли;	
		 
		Если ВыводитьПодвалПринял Тогда
			ТабДокумент.Присоединить(ПодвалПринял);
			ВыведенаПодвалПринял = Истина;
			// данная область выводится только один раз
			ВыводитьПодвалПринял = Ложь;
			// только после того как вывели область ПодвалПринял, можем выводить область СтрокаМОЛ
			ВыводитьМОЛ = Истина;
		КонецЕсли;	
		
		Если ВыводитьПринял Тогда
			ТабДокумент.Присоединить(ОСПринял);
			// данная область выводится только один раз
			ВыводитьПодвалПринял = Истина;
		КонецЕсли;	
		
		ВыводитьОС = Ложь;	
		ВыводитьПринял = Ложь;
		
	КонецЦикла;
	
	Если НЕ ВыведенаПодвалПринял Тогда 
		ТабДокумент.Вывести(ПодвалСдал);
		ВыводитьПодвалСдал = Ложь;
		
		ТабДокумент.Присоединить(ПодвалПринял);
	КонецЕсли;
	
	Если Не ВыведенаМОЛ Тогда
		МОЛ = Макет.ПолучитьОбласть("МОЛ");
		ТабДокумент.Вывести(МОЛ);
	КонецЕсли;
	
	Если ВыводитьПодвалСдал Тогда
		ТабДокумент.Вывести(ПодвалСдал);
	КонецЕсли;	
	
	// Выведем подпись бухгалтера
	Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Док.Дата);
	
	ПодписьГлавногоБухгалтера.Параметры.РасшифровкаПодписи = Руководители.ГлавныйБухгалтер;
	
	ТабДокумент.Вывести(ПодписьГлавногоБухгалтера);

	Возврат ТабДокумент;
	
КонецФункции // ПечатьОС1()

Функция ПечатьДА1()
	СсылкаНаОбъект = ссылка;
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        "Члены комиссии");
	
	// запрос для реквизитов шапки 
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	ТекстЗапроса = "ВЫБРАТЬ
		|	ДокументОС.Дата,
		|	ДокументОС.Номер,
		|	ДокументОС.Организация,
		|	ДокументОС.СтруктурноеПодразделение,
		|	ДокументОС.ДокументОснование,
		|	ДокументОС.ДокументОснованиеВид,
		|	ДокументОС.ДокументОснованиеДата,
		|	ДокументОС.ДокументОснованиеНомер,
		|	ДокументОС.Контрагент КАК Контрагент,
		|	ДокументОС.СчетУчетаРасчетовСКонтрагентом,
		|	ДокументОС.ИнвентаризационнаяКомиссия.(
		|		Ссылка,
		|		НомерСтроки,
		|		ФизЛицо,
		|		Председатель
		|	) КАК ИнвентаризационнаяКомиссия
		|ИЗ
		|	Документ.ПередачаОС1 КАК ДокументОС
		|ГДЕ
		|	ДокументОС.Ссылка = &Ссылка";
	
	Запрос.Текст = ТекстЗапроса;
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	ТаблицаИнвентаризационнаяКомиссия = Док.ИнвентаризационнаяКомиссия.Выгрузить();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",      СсылкаНаОбъект);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументОСОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ВЫРАЗИТЬ(ДокументОСОС.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеОС,
		|	ПОДСТРОКА(ДокументОСОС.ОсновноеСредство.ЗаводскойНомер,1,250) КАК ЗаводскойНомер,
		|	ПОДСТРОКА(ДокументОСОС.ОсновноеСредство.НомерПаспорта,1,250) КАК НомерПаспорта,
		|	ДокументОСОС.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
		|	ДокументОСОС.СтоимостьБУ КАК ПервоначальнаяСтоимость,
		|	ДокументОСОС.АмортизацияБУ,
		|	ДокументОСОС.АмортизацияЗаМесяцБУ,
		|	ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ДокументОСОС.СчетДоходовБУ,
		|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокСлужбыПолезной
		|ИЗ
		|	Документ.ПередачаОС1.ОС КАК ДокументОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаДок, Организация = &Организация) КАК ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних
		|		ПО ДокументОСОС.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ДатаДок, Организация = &Организация) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
		|		ПО ДокументОСОС.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|			СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации
		|		ИЗ
		|			РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ДатаДок, Организация = &Организация) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
		|				ПО СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации.Ссылка = СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка
		|					И (СпособыОтраженияРасходовПоАмортизацииСпособы.НомерСтроки = 1)) КАК СпособыОтраженияРасходов
		|		ПО ДокументОСОС.ОсновноеСредство = СпособыОтраженияРасходов.ОсновноеСредство
		|ГДЕ
		|	ДокументОСОС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ДатаДок",     СсылкаНаОбъект.Дата);
	Запрос.УстановитьПараметр("Организация", СсылкаНаОбъект.Организация);
	Запрос.Текст = ТекстЗапроса;
	РезЗапросаОС = Запрос.Выполнить();
	ТаблицаОС 	 = РезЗапросаОС.Выгрузить();
	
	// Получим список МОЛ на основании списка ОС
	СписокОС = РезЗапросаОС.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ОсновноеСредство", СписокОС);
	Запрос.УстановитьПараметр("Организация",      Док.Организация);
	Запрос.УстановитьПараметр("Дата",             Док.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛ
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|		&Дата,
	|		Организация = &Организация
	|		    И ОсновноеСредство В (&ОсновноеСредство)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних";
	
	ТаблицаМОЛ = Запрос.Выполнить().Выгрузить();
		
	ТаблицаМОЛ.Свернуть("МОЛ");
		
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Док.Организация, Док.СтруктурноеПодразделение);
	
	//формирование печатной формы документа

	Макет = ПолучитьМакет("ДА1");
	
	// Получаем области макета для вывода в табличный документ
	Шапка             	 	  = Макет.ПолучитьОбласть("Шапка");
	Таблица1		  	 	  = Макет.ПолучитьОбласть("Таблица1");
	СтрокаТаблицы1    	 	  = Макет.ПолучитьОбласть("СтрокаТаблицы1");
	ЗаголовокТаблицы2 	 	  = Макет.ПолучитьОбласть("ЗаголовокТаблицы2");
	СтрокаТаблицы2    	 	  = Макет.ПолучитьОбласть("СтрокаТаблицы2");
	ИтогоСтрокаТаблицы2	 	  = Макет.ПолучитьОбласть("ИтогоСтрокаТаблицы2");
	Приказ			  	 	  = Макет.ПолучитьОбласть("Приказ");
	Подвал            	 	  = Макет.ПолучитьОбласть("Подвал");	
	ШапкаОборотнойСтороны	  = Макет.ПолучитьОбласть("ШапкаОборотнойСтороны");	
	ОССдал			  	 	  = Макет.ПолучитьОбласть("ОССдал|Сдал");
	ПодвалДатаСдал    	 	  = Макет.ПолучитьОбласть("ПодвалДата|Сдал");
	Комиссия          		  = Макет.ПолучитьОбласть("Комиссия");	
	ПодписьГлавногоБухгалтера = Макет.ПолучитьОбласть("ПодписьГлавногоБухгалтера");
	ПустаяСекцияСдал  	 	  = Макет.ПолучитьОбласть("ПодвалПустаяСекция|Сдал");
		
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаОС_ДА1";

	////////////////////////////////////////////////////////////////////////
	// 1-я страница формы
	
	// Выведем шапку документа
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.Дата);
	Руководители 		  = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Док.Дата);
	
	Шапка.Параметры.Заполнить(Док);
	
	// Организация-сдатчик
	ПредставлениеОрганизацииСдатчик				    = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	Шапка.Параметры.ПредставлениеОрганизацииСдатчик = ПредставлениеОрганизацииСдатчик;
	Шапка.Параметры.ОрганизацияРНН_БИН_Сдатчик		= ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь);
	
	// Организация-получатель
	СведенияОбОрганизацииПолучателе					   = ОбщегоНазначения.СведенияОЮрФизЛице(Док.Контрагент, Док.Дата);
	ПредставлениеОрганизацииПолучатель				   = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизацииПолучателе, "ПолноеНаименование,");
	Шапка.Параметры.ПредставлениеОрганизацииПолучатель = ПредставлениеОрганизацииПолучатель;
	Шапка.Параметры.ОрганизацияРНН_БИН_Получатель	   = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизацииПолучателе, "БИН_ИИН,", Ложь);
	
	Шапка.Параметры.НомерДок          	   = ОбщегоНазначения.ПолучитьНомерНаПечать(СсылкаНаОбъект, глСписокПрефиксовУзлов);
	Шапка.Параметры.ДатаДок           	   = Формат(Док.Дата,"ДЛФ=Д");
	Шапка.Параметры.РасшифровкаПодписиСдал = Руководители.Руководитель;
	Шапка.Параметры.ДолжностьСдал          = Руководители.РуководительДолжность;
	
	ТабДокумент.Вывести(Шапка);
	//ВалютаПечати = Константы.ВалютаУправленческогоУчета.Получить();
	//НазваниеВалютыЦелойЧасти = "";
	//ОбщегоНазначения.ПолучитьНазваниеЦелойИДробнойЧастиВалюты(ВалютаПечати.ПараметрыПрописиНаРусском,0 , НазваниеВалютыЦелойЧасти, );
	////Таблица1.Параметры.Валюта = НазваниеВалютыЦелойЧасти;
	
	Таблица1.Параметры.Валюта = СсылкаНаОбъект.ВалютаДокумента;
	ТабДокумент.Вывести(Таблица1);	
	//Заполняем раздел "Основание"  	
	Если Док.ДокументОснование <> Неопределено И ЗначениеЗаполнено(Док.ДокументОснование) Тогда 
		СтрокаТаблицы1.Параметры.НаимДокОсн  = Док.ДокументОснование.Метаданные().Синоним;
		СтрокаТаблицы1.Параметры.НомерДокОсн = Док.ДокументОснование.Номер;
		СтрокаТаблицы1.Параметры.ДатаДокОсн  = Док.ДокументОснование.Дата;
	КонецЕсли;	
	
		
	СтрокаМОЛ = "";
	
	Для Каждого Стр Из ТаблицаМОЛ Цикл
		СтрокаМОЛ = СтрокаМОЛ + СокрЛП(Стр.МОЛ) + Символы.ПС;  			
	КонецЦикла;	
	СтрокаМОЛ = Лев(СтрокаМОЛ, СтрДлина(СтрокаМОЛ) -1); 
	
	СтрокаТаблицы1.Параметры.СписокМОЛ = СтрокаМОЛ; 

	СчетКт     = "";
	Сдатчик    = ПредставлениеОрганизацииСдатчик; 
	Получатель = ПредставлениеОрганизацииПолучатель;
	СчетДт     = Док.СчетУчетаРасчетовСКонтрагентом;
	
	//Таблица1.Параметры.Сдатчик = Сдатчик;
	//Таблица1.Параметры.Получатель = Получатель;
		
	ДокументПринятияКУчетуБУ = Неопределено;
	ДатаПринятияКУчету 		 = '00010101';


	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
			
		Если Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СтрокаТаблицы1) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			// Выведем переносимую часть заголовка таблицы	
			ТабДокумент.Вывести(Таблица1);
			
		КонецЕсли;
		
		СтрокаТаблицы1.Параметры.Заполнить(СтрокаОС);
		
		УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(СтрокаОС.ОсновноеСредство, Док.Организация, Перечисления.ВидыСостоянийОС.ПринятоКУчету, Док.Дата, ДокументПринятияКУчетуБУ,  ДатаПринятияКУчету);
		
		ТабДокумент.Вывести(СтрокаТаблицы1);
	
	КонецЦикла;	

		
	// выводим вторую часть таблицы
	ЗаголовокТаблицы2.Параметры.Валюта = СсылкаНаОбъект.ВалютаДокумента;
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДокумент.Вывести(ЗаголовокТаблицы2);
	
	ДокументПринятияКУчетуБУ = Неопределено;
	ДатаПринятияКУчету 		 = '00010101';
    ИтогоСуммаАмортизации	 = 0;
	ИтогоБалансоваяСтоимость = 0;
	
	// Выведем строки таблицы и итоги таблицы
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СтрокаТаблицы2) Тогда
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			// Выведем заголовок таблицы	
			ТабДокумент.Вывести(ЗаголовокТаблицы2);
		КонецЕсли;
		
		СтрокаТаблицы2.Параметры.Заполнить(СтрокаОС);
		
		УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(СтрокаОС.ОсновноеСредство, Док.Организация, Перечисления.ВидыСостоянийОС.ПринятоКУчету, Док.Дата, ДокументПринятияКУчетуБУ,  ДатаПринятияКУчету);
		
		СтрокаТаблицы2.Параметры.СчетКт				 = СтрокаОС.СчетДоходовБУ;
        СтрокаТаблицы2.Параметры.СчетДт				 = СчетДт;
		СуммаАмортизации		                     = СтрокаОС.АмортизацияБУ + СтрокаОС.АмортизацияЗаМесяцБУ;
        СтрокаТаблицы2.Параметры.СуммаАмортизации	 = СуммаАмортизации;
        СтрокаТаблицы2.Параметры.БалансоваяСтоимость = СтрокаОС.ПервоначальнаяСтоимость - СуммаАмортизации;

		ИтогоСуммаАмортизации								   = ИтогоСуммаАмортизации + СуммаАмортизации;
		ИтогоСтрокаТаблицы2.Параметры.ИтогоСуммаАмортизации    = ИтогоСуммаАмортизации;
		ИтогоБалансоваяСтоимость							   = ИтогоБалансоваяСтоимость + СтрокаТаблицы2.Параметры.БалансоваяСтоимость;
		ИтогоСтрокаТаблицы2.Параметры.ИтогоБалансоваяСтоимость = ИтогоБалансоваяСтоимость;
		
		ТабДокумент.Вывести(СтрокаТаблицы2);  
		       		
	КонецЦикла;
	
	ТабДокумент.Вывести(ИтогоСтрокаТаблицы2);
	

	//формируем список основных средств через запятую
	СписокОС 			 = "";
	СписокНаименованийОС = ТаблицаОС.Скопировать();
	СписокНаименованийОС.Свернуть("НаименованиеОС");
	Для Каждого СтрокаОС ИЗ СписокНаименованийОС Цикл
		Если СписокОС = "" Тогда
			СписокОС = СтрокаОС.НаименованиеОС;
		Иначе
			СписокОС = СписокОС + ", " + СтрокаОС.НаименованиеОС;
		КонецЕсли;	
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(Док.ДокументОснованиеВид) Тогда
		Если Док.ДокументОснованиеВид = "приказа" Тогда
			Приказ.Параметры.ДокументОснованиеВид = "приказа";
		ИначеЕсли Док.ДокументОснованиеВид = "постановления" Тогда
			Приказ.Параметры.ДокументОснованиеВид = "постановления";
		ИначеЕсли Док.ДокументОснованиеВид = "распоряжения" Тогда
			Приказ.Параметры.ДокументОснованиеВид = "распоряжения";
		КонецЕсли;	
	Иначе
		Приказ.Параметры.ДокументОснованиеВид = "приказа (распоряжения)";
	КонецЕсли;

	Стр 									= """_____"""+"________________________ 20_____года";
	Приказ.Параметры.ДокументОснованиеДата 	= ?(ЗначениеЗаполнено(Док.ДокументОснованиеДата), Формат(Док.ДокументОснованиеДата, "ДФ=""дд ММММ гггг 'года'"""), Стр);
	Приказ.Параметры.ДокументОснованиеНомер = ?(ЗначениеЗаполнено(Док.ДокументОснованиеНомер),Док.ДокументОснованиеНомер,"__________ ");
	Приказ.Параметры.НаименованиеОбъекта 	= СписокОС;
	ТабДокумент.Вывести(Приказ);
	
	ТабДокумент.Вывести(Подвал);

	//выводим комиссию
	
	//сначала председатель 
	ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		ДанныеПредседателя = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, ПредседательКомиссии.ФизЛицо, Док.Дата);
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		Комиссия.Параметры.Должность                = ДанныеПредседателя.Должность;
		Комиссия.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
	Иначе
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		Комиссия.Параметры.Должность                = "";
		Комиссия.Параметры.РасшифровкаПодписи       = "";
	КонецЕсли;
	
	ТабДокумент.Вывести(Комиссия);
	
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();
	
	Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		Если НЕ Строка.Председатель Тогда
			СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Док.Организация, СписокЧленовКомиссии, Док.Дата);
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	Если ТаблицаИнвентаризационнаяКомиссия.Количество() < 1 Тогда
		ВыводитьЗаголовок = Истина;	
		
		Для Итератор = 1 По 3 Цикл
			
			Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, Комиссия) Тогда
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			КонецЕсли;
			
			Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
			                                                 ЗаголовокРазделаКомиссии.ЧленыКомиссии,
			                                                 "");
			Комиссия.Параметры.Должность          = "";
			Комиссия.Параметры.РасшифровкаПодписи = "";
			
			ТабДокумент.Вывести(Комиссия);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
	Иначе
		// Сначала выведем членов комиссии из выборки
		Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
			
			Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, Комиссия) Тогда
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			КонецЕсли;
			
			Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
			                                                ЗаголовокРазделаКомиссии.ЧленыКомиссии,
			                                                "");
			Комиссия.Параметры.Должность          = ЧленКомиссии.Должность;
			Комиссия.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
			
			ТабДокумент.Вывести(Комиссия);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДокумент.Вывести(ШапкаОборотнойСтороны);
	
	//список МОЛ
	СписокМОЛ = ТаблицаМОЛ.ВыгрузитьКолонку("МОЛ");
	ДанныеМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Док.Организация, СписокМОЛ, Док.Дата);
	
	ВыводитьОС		   = Истина;
	ВыводитьПринял	   = Истина;
	ВыводитьДатаПринял = Ложь;
	
	ВыводитьПодвалВерх = Ложь;
	ВыводитьПодвалНиз  = Ложь;
	
	ВыведенДатаСдал = Ложь;
	ВыведенПодвал	= Ложь;
	
	Для Каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОССдал) Тогда
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьОС = Истина; // на новой странице выведем заголовок набора подписей
		КонецЕсли;
		
		ОССдал.Параметры.ОбъектОсновныхСредств = ?(ВыводитьОС, "Долгосрочный актив", "");
		ОССдал.Параметры.Сдал				   = ?(ВыводитьОС, "Сдал" , "");

		ОССдал.Параметры.Должность          = СтрокаМОЛ.Должность;
		ОССдал.Параметры.РасшифровкаПодписи = СтрокаМОЛ.Представление;
		
		ТабДокумент.Вывести(ОССдал);
		
		ПрисоединитьСекцию(Макет, ТабДокумент, ВыводитьПринял, ВыводитьДатаПринял, ВыводитьПодвалВерх, ВыводитьПодвалНиз, ВыведенПодвал);
		
		ВыводитьОС = Ложь;
		
	КонецЦикла;
	
	Пока НЕ ВыведенПодвал Цикл
		Если НЕ ВыведенДатаСдал Тогда
			ТабДокумент.Вывести(ПодвалДатаСдал);
			ВыведенДатаСдал = Истина;
		Иначе
			ТабДокумент.Вывести(ПустаяСекцияСдал);
		КонецЕсли;
		ПрисоединитьСекцию(Макет, ТабДокумент, ВыводитьПринял, ВыводитьДатаПринял, ВыводитьПодвалВерх, ВыводитьПодвалНиз, ВыведенПодвал);
		//ВыведенПодвал = Истина;
	КонецЦикла;
	
	// Выведем подпись бухгалтера
	ПодписьГлавногоБухгалтера.Параметры.РасшифровкаПодписиСдал = Руководители.ГлавныйБухгалтер;
	
	ТабДокумент.Вывести(ПодписьГлавногоБухгалтера);

	Возврат ТабДокумент;
	
КонецФункции // Печать()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если  ИмяМакета = "Накладная" Тогда
		ТабДокумент = ПечатьДокумента();
	ИначеЕсли ИмяМакета = "ОС1" Тогда
		ТабДокумент = ПечатьОС1();			
	ИначеЕсли ИмяМакета = "ДА1" Тогда
		ТабДокумент = ПечатьДА1();			
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Накладная,ОС1,ДА1","Накладная","Форма ОС-1","Форма ДА-1 (Приказ №562)"); 
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()
 
// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента)
	Если ЗаполнятьБУ = Истина Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПередачиОС.ПередачаСтруктурномуПодразделению Тогда
			СтрокаТЧ.СчетДоходовБУ  			= СчетаУчета.СчетПоложительныхОтклонений;					
			СтрокаТЧ.СчетРасходовБУ 			= СчетаУчета.СчетОтрицательныхОтклонений;			
		Иначе	
			СтрокаТЧ.СчетДоходовБУ  			= СчетаУчета.СчетДоходовОтРеализацииБУ;					
			СтрокаТЧ.СчетРасходовБУ 			= СчетаУчета.СчетСебестоимостиПриРеализацииБУ;			
		КонецЕсли;
		
		СтрокаТЧ.СчетУчетаНДСПоРеализации 	=  СчетаУчета.СчетУчетаНДСПоРеализации;
		
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		СтрокаТЧ.СчетДоходовБУ  			= ПланыСчетов.Типовой.ПустаяСсылка();		
		СтрокаТЧ.СчетРасходовБУ 			= ПланыСчетов.Типовой.ПустаяСсылка();				
		СтрокаТЧ.СчетУчетаНДСПоРеализации 	=  ПланыСчетов.Типовой.ПустаяСсылка();
	КонецЕсли;
	
	ЗаполнитьАналитикуСчета(СтрокаТЧ, "СчетДоходовБУ", "СубконтоДоходовБУ");
	ЗаполнитьАналитикуСчета(СтрокаТЧ, "СчетРасходовБУ", "СубконтоРасходовБУ");	
КонецПроцедуры

// Заполняет счета НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ, МетаданныеДокумента)
	
	Если ЗаполнятьНУ = Истина Тогда
		СтрокаТЧ.СчетДоходовНУ  = СчетаУчета.СчетДоходовОтРеализацииНУ;					
		
		Если НЕ ЗначениеЗаполнено (СтрокаТЧ.СчетДоходовНУ )Тогда
			УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТЧ, "СчетДоходовБУ","СчетДоходовНУ" , Дата);	
		КонецЕсли;	
		
		СтрокаТЧ.СчетРасходовНУ = СчетаУчета.СчетСебестоимостиПриРеализацииНУ;				
		
		Если НЕ ЗначениеЗаполнено (СтрокаТЧ.СчетРасходовНУ )Тогда
			УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТЧ, "СчетРасходовБУ", "СчетРасходовНУ" , Дата);	
		КонецЕсли;	
		
	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		СтрокаТЧ.СчетДоходовНУ  = ПланыСчетов.Налоговый.ПустаяСсылка();		
		СтрокаТЧ.СчетРасходовНУ = ПланыСчетов.Налоговый.ПустаяСсылка();				
	КонецЕсли;
	
	ЗаполнитьАналитикуСчета(СтрокаТЧ, "СчетДоходовНУ", "СубконтоДоходовНУ");
	ЗаполнитьАналитикуСчета(СтрокаТЧ, "СчетРасходовНУ", "СубконтоРасходовНУ");	
КонецПроцедуры

// Заполняет счета БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаОС(Организация, СтрокаТЧ.ОсновноеСредство, Дата);
	
	МетаданныеДокумента = ЭтотОбъект.Метаданные();
  	ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента);
	ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ, МетаданныеДокумента);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ)Экспорт 
	
	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(основание) Экспорт
		
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ДокументОснование = Основание;
		   		
		Если Основание.ПодтвержденДокументамиОтгрузки Тогда
			#Если Клиент Тогда
				Если Основание.ПодтвержденДокументамиОтгрузки Тогда
					Сообщить("Данные счет-фактуры уже подтверждены документами отгрузки! Ввод на основании не возможен!", СтатусСообщения.Важное);				
				КонецЕсли;
				
			#КонецЕсли

			Возврат;       		
		КонецЕсли;  	
		// Заполним реквизиты шапки по документу основанию.
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Грузополучатель             = Основание.Контрагент;	 	
		БанковскийСчетОрганизации   = Основание.СчетОрганизации;
		АдресДоставки			    = Основание.ПунктНазначения;
		Доверенность			    = Основание.Доверенность;
        				
		УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(ЭтотОбъект, Основание.Ссылка);		
		ПоддержкаУчетаВременныхРазниц = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, Неопределено) и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, Неопределено);
		
		Если ОС.Количество() > 0 Тогда
			ЗаполнитьСчетаУчетаВТабЧасти(ОС, "ОС", Истина, УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ДокументОснование = Основание;
		   		
		// Заполним реквизиты шапки по документу основанию.
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Грузополучатель             = Основание.Контрагент;	 	
		Если ТипЗнч(Основание.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			БанковскийСчетОрганизации   = Основание.СтруктурнаяЕдиница;
		КонецЕсли;
		АдресДоставки			    = Основание.АдресДоставки;
		                                            			
		УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(ЭтотОбъект, Основание.Ссылка);
		ПоддержкаУчетаВременныхРазниц = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, Неопределено) и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, Неопределено);
		
		Если ОС.Количество() > 0 Тогда
			ЗаполнитьСчетаУчетаВТабЧасти(ОС, "ОС", Истина, УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
		КонецЕсли;				
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуОС(РезультатЗапросаПоОС, СтруктураШапкиДокумента)

	ТаблицаОС = РезультатЗапросаПоОС.Выгрузить();

	Возврат ТаблицаОС;

КонецФункции // ПодготовитьТаблицуТоваров()

 // Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента, Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов");

	СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
	Если  СтруктураШапкиДокумента.УчитыватьКПН Тогда
		СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");
	КонецЕсли;
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверим на виды операций, которые не будут полностью отработаны в данном документе
	Если СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету 
	тогда
		ОбщегоНазначения.ОшибкаПриПроведении("События с основными средствами с видом <"+строка(СтруктураШапкиДокумента.ВидСобытияОС)+">
		|не могут отражаться данным документом!",Отказ,Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОС(ТаблицаПоОС, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ОС";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство, Сумма");

	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	СтруктураОбязательныхПолей.Вставить("СчетДоходовБУ");
	СтруктураОбязательныхПолей.Вставить("СчетРасходовБУ");

	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда

		СтруктураОбязательныхПолей.Вставить("СчетДоходовНУ");
		СтруктураОбязательныхПолей.Вставить("СчетРасходовНУ");

	КонецЕсли;

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьЗаполнениеТабличнойЧастиОСПоСтрочно(ТаблицаПоОС, СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Выполняет проверки,которые нужны только для регл. учета
Процедура ПроверитьЗаполнениеТабличнойЧастиОСПоСтрочно(ТаблицаПоОС, СтруктураШапкиДокумента, Отказ, Заголовок)

	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""ОС"": ";

		Если СтруктураШапкиДокумента.УчитыватьНДС 
			И НЕ (УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС) = 0)
    		И НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДСПоРеализации) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета НДС по реализации""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		Если СтруктураШапкиДокумента.УчитыватьНДС 			
    		И НЕ ЗначениеЗаполнено(СтрокаТЧ.НДСВидОперацииРеализации) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Вид операции реализации для целей НДС""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;		
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетДоходовБУ) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Счет доходов (БУ)""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетРасходовБУ) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Счет Расходов (БУ)""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
        		
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТоварыПоСтрочно()

// Процедура проверяет, достаточно ли данных в таблице по ОС.
//
Процедура ПроверитьТаблицуПоОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		
		Если НЕ СтрокаОС.ОтражалосьВБухгалтерскомУчете Тогда
//			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> код <" + СокрЛП(СтрокаОС.Код) + "> не отражалось в учете по указанной организации.",,, СтатусСообщения.Важное);
//			Отказ = Истина;
			Возврат;
		КонецЕсли;

		Если СтрокаОС.СнятоСУчета Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> код <" + СокрЛП(СтрокаОС.Код) + "> снято с учета в указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СчетУчетаБУ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> код <" + СокрЛП(СтрокаОС.Код) + "> не указан счет учета (БУ).",,, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		Если СтрокаОС.СтруктурноеПодразделение <> СтруктураШапкиДокумента.СтруктурноеПодразделение Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> не отражалось в учете структурной единицы <" + СтруктураШапкиДокумента.Организация + ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.СтруктурноеПодразделение), " - " + СтруктураШапкиДокумента.СтруктурноеПодразделение, "") + ">.",,, СтатусСообщения.Важное);
//			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если  ((СтрокаОС.АмортизацияБУ + СтрокаОС.АмортизацияЗаМесяцБУ) <> 0) Тогда 
			
			Если НЕ ЗначениеЗаполнено(СтрокаОС.СчетНачисленияАмортизацииБУ) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> код <" + СокрЛП(СтрокаОС.Код) + "> не указан счет начисления амортизации (БУ).",,, СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаОС.Направление_БУ) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> код <" + СокрЛП(СтрокаОС.Код) + "> не указаны способы отражения расходов по амортизации (БУ).",,, СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
						
	КонецЦикла;
	
КонецПроцедуры // ПроверитьТаблицуПоОС()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру СоставОС 
//
Процедура ДвижениеПоРегиструСоставОС(СтруктураШапкиДокумента)
	
	//формируем список ОС, по которым необходимо осущестывить контроль их вхождения в какие-либо комплекты
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	Запрос   = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", МоментВремени());
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	Запрос.УстановитьПараметр("СостояниеВСоставеОС", Перечисления.ВидыСостоянийВСоставеОС.ВключеноВСостав);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоставОССрезПоследних.ОсновноеСредство,
	               |	СоставОССрезПоследних.ВСоставеОС
	               |ИЗ
	               |	РегистрСведений.СоставОС.СрезПоследних(
	               |		&Дата,
	               |		ОсновноеСредство В (&СписокОС)
	               |			И СостояниеВСоставеОС = &СостояниеВСоставеОС) КАК СоставОССрезПоследних";
	
				   
				   
    НаборДвижений   = Движения.СоставОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период              = СтруктураШапкиДокумента.Дата;
			НоваяСтрока.Активность          = Истина;
			НоваяСтрока.ОсновноеСредство    = Выборка.ОсновноеСредство;
			НоваяСтрока.ВСоставеОС          = Выборка.ВСоставеОС;
			НоваяСтрока.СостояниеВСоставеОС = Перечисления.ВидыСостоянийВСоставеОС.ИсключеноИзСостава;
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструСоставОС()

//Процедура закрывает имеющиеся суммы резерва по переоценкам ОС по бух. учету и гасит не закрытые партии переоценок в регистре ПереоценкаВнеоборотныхАктивов
//
Процедура ЗакрытиеПереоценокОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	ДатаДока       = СтруктураШапкиДокумента.Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;

	ПереоценкаВА   = Движения.ПереоценкаВнеоборотныхАктивов;	
	ПроводкиБУ     = Движения.Типовой;
	СписокОС       = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	//выбираем имеющиеся суммы резерва 
	ЗапросРезервыПоПереоценкеОС = Новый Запрос;
	ЗапросРезервыПоПереоценкеОС.УстановитьПараметр("Организация", ТекОрганизация);
	ЗапросРезервыПоПереоценкеОС.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	
	ЗапросРезервыПоПереоценкеОС.УстановитьПараметр("СписокОС",    СписокОС);
	ЗапросРезервыПоПереоценкеОС.УстановитьПараметр("Период",      ДатаДока);
	ЗапросРезервыПоПереоценкеОС.УстановитьПараметр("СчетРезерваПереоценки", ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств);
	
	ЗапросРезервыПоПереоценкеОС.Текст = "ВЫБРАТЬ
	                                    |	ТиповойОстатки.Субконто1,
	                                    |	ТиповойОстатки.СуммаОстатокКт
	                                    |ИЗ
	                                    |	РегистрБухгалтерии.Типовой.Остатки(
	                                    |		&Период,
	                                    |		Счет = &СчетРезерваПереоценки,
	                                    |		,
	                                    |		Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение
	                                    |			И Субконто1 В (&СписокОС)) КАК ТиповойОстатки";  
	
										
										
	ЗапросОстаткиПереоценокВА = Новый Запрос;
	ЗапросОстаткиПереоценокВА.УстановитьПараметр("Организация", ТекОрганизация);
	ЗапросОстаткиПереоценокВА.УстановитьПараметр("СтруктурноеПодразделение",      СтруктурноеПодразделение);
	ЗапросОстаткиПереоценокВА.УстановитьПараметр("СписокОС",    СписокОС);
	ЗапросОстаткиПереоценокВА.УстановитьПараметр("Период",      ДатаДока);	
	
	ЗапросОстаткиПереоценокВА.Текст = "ВЫБРАТЬ
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.ВнеоборотныйАктив,
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки,
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.СуммаПереоценкиСтоимостиОстаток,
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.СуммаПереоценкиАмортизацииОстаток
	                                  |ИЗ
	                                  |	РегистрНакопления.ПереоценкаВнеоборотныхАктивов.Остатки(
	                                  |		&Период,
	                                  |		ВнеоборотныйАктив В (&СписокОС)
	                                  |		    И Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ПереоценкаВнеоборотныхАктивовОстатки";	
	
									  
	//закрываем резерв переоценок по бух. учету								  
	РезервыПоПереоценкеОС = ЗапросРезервыПоПереоценкеОС.Выполнить().Выбрать();								  
	
	Пока РезервыПоПереоценкеОС.Следующий() Цикл
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период       = ДатаДока;
		Проводка.Организация  = ТекОрганизация;
		Проводка.Содержание   = "Закрытие резерва переоценки";
		Проводка.НомерЖурнала = "ОС";
		Проводка.Сумма        = РезервыПоПереоценкеОС.СуммаОстатокКт;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);				

		Проводка.СчетДт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", РезервыПоПереоценкеОС.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);
		
		Проводка.СчетКт = ПланыСчетов.Типовой.НераспределеннаяПрибыльНепокрытыйУбытокОтчетногоГода;
		
	КонецЦикла;
	
	//гасим остатки по переоценкам в регистре ПереоценкаВнеоборотныхАктивов, для того чтобы вывести ресурсы в 0 
	ОстаткиПереоценокВА = ЗапросОстаткиПереоценокВА.Выполнить().Выбрать();								  
	Пока ОстаткиПереоценокВА.Следующий() Цикл
		
		ДвижениеПереоценкаВА = ПереоценкаВА.Добавить();
		ДвижениеПереоценкаВА.Период			    		= ДатаДока;
		ДвижениеПереоценкаВА.Организация 	    		= ТекОрганизация;
		ДвижениеПереоценкаВА.СтруктурноеПодразделение 	= СтруктурноеПодразделение;
		ДвижениеПереоценкаВА.ВнеоборотныйАктив  = ОстаткиПереоценокВА.ВнеоборотныйАктив;
		ДвижениеПереоценкаВА.ДокументПереоценки = ОстаткиПереоценокВА.ДокументПереоценки;
		
		Если ОстаткиПереоценокВА.СуммаПереоценкиСтоимостиОстаток > 0 Тогда
			ДвижениеПереоценкаВА.ВидДвижения = ВидДвиженияНакопления.Расход; 		
			ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = ОстаткиПереоценокВА.СуммаПереоценкиСтоимостиОстаток;
			ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = ОстаткиПереоценокВА.СуммаПереоценкиАмортизацииОстаток;
		Иначе
			ДвижениеПереоценкаВА.ВидДвижения = ВидДвиженияНакопления.Приход; 			
			ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = - ОстаткиПереоценокВА.СуммаПереоценкиСтоимостиОстаток;
			ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = - ОстаткиПереоценокВА.СуммаПереоценкиАмортизацииОстаток;
		КонецЕсли;
		
	КонецЦикла;//Пока ОстаткиПереоценокВА.Следующий() Цикл
	
КонецПроцедуры //ЗакрытиеПереоценокОС	

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по регистрам подсистемы учета НДС "НДС"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ)
	
	Если Не ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	ТаблицаПоТоварам.Колонки.Добавить("Номенклатура");
	ТаблицаПоТоварам.ЗагрузитьКолонку(ТаблицаПоТоварам.ВыгрузитьКолонку("ОсновноеСредство"), "Номенклатура");
	
	// Работа со структурными подразделениями
	//Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПлательщикНДС 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
																	СтруктураШапкиДокумента.Организация,
																	глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	Перечисления.РазделыНалоговогоУчета.НДС);
	//Иначе
	//	ПлательщикНДС 	= СтруктураШапкиДокумента.Организация;															
	//КонецЕсли;																
	
	СтруктураШапкиДокумента.Вставить("ПлательщикНДС", ПлательщикНДС);

	УчетНДСИАкциза.СформироватьДвиженияПоРегиструНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, "ОС", Движения, Отказ);
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)

	ТекОрганизация 				= СтруктураШапкиДокумента.Организация;
	ТекСтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
	ДатаДока       				= СтруктураШапкиДокумента.Дата;
	НомерЖурнала   				= "ОС";

	//Фиксация выручки и НДС по БУ (проводки)

	ПроводкиБУ = Движения.Типовой;
	ПроводкиНУ = Движения.Налоговый;

	//Возможны корректировки таблиц при расчетах в у.е.
	ТаблицаАвансов = УправлениеВзаиморасчетами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента, Истина, мВалютаРегламентированногоУчета, Новый Структура("ТаблицаПоТоварам", ТаблицаПоОС), Отказ, Заголовок, НомерЖурнала, мУчетнаяПолитикаПоБухгалтерскомуУчету);

	ВыручкаПоБУ = ТаблицаПоОС.Скопировать();
	
	ВыручкаПоБУ.Свернуть("СчетДоходовБУ, СчетУчетаНДСПоРеализации, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, СтавкаНДС, ОсновноеСредство", "Сумма, СуммаВал, НДС, НДСВал, СуммаБезНДС, СуммаБезНДСВал");

	Для каждого СтрокаТаблицы из ВыручкаПоБУ Цикл

		// Выручка
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если ВидОперации <> Перечисления.ВидыОперацийПередачиОС.ПередачаСтруктурномуПодразделению Тогда
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период       = ДатаДока;
			Проводка.Организация  = ТекОрганизация;
			Проводка.Сумма        = СтрокаТаблицы.СуммаБезНДС;
			Проводка.Содержание   = "Выручка от реализации ОС";
			Проводка.НомерЖурнала = НомерЖурнала;

			Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ТипыОпераций", СтруктураШапкиДокумента.ТипОперации);

			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаБезНДСВал;
			КонецЕсли;

			Проводка.СчетКт = СтрокаТаблицы.СчетДоходовБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы",  СтрокаТаблицы.ОсновноеСредство);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, ТекСтруктурноеПодразделение, ТекСтруктурноеПодразделение);

		Иначе
			
			// Для данного вида операции проводки можно сформировать только после формирования проводок по остаточной стоимости
			
		КонецЕсли;
		
		// НДС
		Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС > 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = ТекОрганизация;
			Проводка.Сумма       = СтрокаТаблицы.НДС;
			Проводка.Содержание  = "Выделен НДС";
			
			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ТипыОпераций", СтруктураШапкиДокумента.ТипОперации);
			
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				
				//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.НДСВал;
				
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, ТекСтруктурноеПодразделение, ТекСтруктурноеПодразделение);
			
			// Проводки по налоговому учету
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда						
				ПроводкаНУ = ПроводкиНУ.Добавить();
				
				ПроводкаНУ.Период      = ДатаДока;
				ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Сумма       = СтрокаТаблицы.НДС;
				ПроводкаНУ.Содержание  = "НДС";
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				ПроводкаНУ.СчетДт      = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ(СчетУчетаРасчетовСКонтрагентом);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				
				ПроводкаНУ.СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСНачисленногоНУ(СтрокаТаблицы.СчетУчетаНДСПоРеализации, Дата);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  ВидУчетаНУ);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	// Выполнить движения по спецрегистрам подсистемы учета НДС	
    ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ);
			
	// Движения по регистрам подсистемы ОсновныеСредства
	//
	СостояниеОС             = Движения.СостоянияОСОрганизаций;
	СобытияОС               = Движения.СобытияОСОрганизаций;
	НачислениеАмортизацииБУ = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
	
	ВедетсяАналитУчетОсПоПодразделениям = УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоПодразделениям(СтруктураШапкиДокумента.Дата);
	ВедетсяАналитУчетОсПоМОЛ = УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоМОЛ(СтруктураШапкиДокумента.Дата);
	
	// Подготовим таблицу с данными по амортизации для списания амортизации по направлениям затрат
	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("СтруктурноеПодразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТабАмортизации.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТабАмортизации.Колонки.Добавить("СчетАмортизации");
	ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
	ТабАмортизации.Колонки.Добавить("ПризнакФиксированногоАктива", Новый ОписаниеТипов("Булево"));	
	ТабАмортизации.Колонки.Добавить("ТекущееПодразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТабАмортизации.Колонки.Добавить("ТекущийМОЛ", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл

		Если СтрокаОС.АмортизацияЗаМесяцБУ > 0 Тогда
 			НоваяСтрока = ТабАмортизации.Добавить();
			НоваяСтрока.СтруктурноеПодразделение	= СтруктурноеПодразделение;
			НоваяСтрока.Сумма                  		= СтрокаОС.АмортизацияЗаМесяцБУ;
			НоваяСтрока.ОбъектУчета            		= СтрокаОС.ОсновноеСредство;
			НоваяСтрока.НаправлениеАмортизации 		= СтрокаОС.Направление_БУ;
			НоваяСтрока.СчетАмортизации        		= СтрокаОС.СчетНачисленияАмортизацииБУ;
			НоваяСтрока.ПризнакФиксированногоАктива = СтрокаОС.ПризнакФА;
			НоваяСтрока.ТекущееПодразделение		= СтрокаОС.ТекущееПодразделение;
			НоваяСтрока.ТекущийМОЛ					= СтрокаОС.МОЛОрганизации;
		КонецЕсли;

	КонецЦикла;

	// Вызов процедуры списания амортизации по направлениям.
	// Создаются движения по начислению амортизации.
	Если ВидОперации = Перечисления.ВидыОперацийПередачиОС.ПередачаСтруктурномуПодразделению Тогда
		СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ = Ложь;
	КонецЕсли;
	ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "Бух", "ОС");
		
    ТекОС = "";
	// Создание движений документа по БУ	
	Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
		Если ТекОС <> СтрокаТЧ.ОсновноеСредство Тогда
			ТекОС = СтрокаТЧ.ОсновноеСредство;
			
			// Движения по регистру СостоянияОСОрганизаций
			Движение = СостояниеОС.Добавить();
			
			Движение.Период			  		  = Дата;
			Движение.ДатаСостояния  		  = Дата;
			Движение.ОсновноеСредство		  = ТекОС;
			Движение.Организация    		  = ТекОрганизация;
			Движение.Состояние       		  = Перечисления.ВидыСостоянийОС.СнятоСУчета;
			Движение.СтруктурноеПодразделение = ТекСтруктурноеПодразделение;
			
			// Движения по регистру СобытияОСОрганизаций
			Движение = СобытияОС.Добавить();
			
			Движение.Период            = ДатаДока;
			Движение.ОсновноеСредство  = СтрокаТЧ.ОсновноеСредство;
			Движение.Организация       = ТекОрганизация;
			Движение.СтруктурноеПодразделение = ТекСтруктурноеПодразделение;
			Движение.Событие           = СтруктураШапкиДокумента.СобытиеОС;
			Движение.НазваниеДокумента = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
			Движение.НомерДокумента    = СтруктураШапкиДокумента.Номер;
			
			// Движения по регистру НачислениеАмортизацииБУ
			Движение = НачислениеАмортизацииБУ.Добавить();
			
			Движение.Период    	 			  = ДатаДока;
			Движение.ОсновноеСредство   	  = ТекОС;
			Движение.Организация         	  = ТекОрганизация;
			Движение.НачислятьАмортизацию	  = Ложь;
			Движение.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
		КонецЕсли;
		//списываем амортизацию
		СуммаПроводки = СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;
		
		Если СуммаПроводки <> 0 Тогда
			// списание амортизации Д 2420 К 2410
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = ДатаДока;
				Проводка.Активность   = Истина;
				Проводка.Организация  = ТекОрганизация;
				Проводка.Содержание   = "Списана амортизация";
				Проводка.НомерЖурнала = НомерЖурнала;
				Проводка.Сумма        = СуммаПроводки;
				
				Проводка.СчетДт = СтрокаТЧ.СчетНачисленияАмортизацииБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				
				Проводка.СчетКт = СтрокаТЧ.СчетУчетаБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
				
				// на тот случай если списывается со счета, где субконто "Внеоборотные активы" а не "Основные средства", например со счета 1510
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, ТекСтруктурноеПодразделение, ТекСтруктурноеПодразделение);

				Если ВедетсяАналитУчетОсПоПодразделениям Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТЧ.ТекущееПодразделение);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТЧ.ТекущееПодразделение);
				КонецЕсли;
						
				Если ВедетсяАналитУчетОсПоМОЛ Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТЧ.МОЛОрганизации);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаТЧ.МОЛОрганизации);
				КонецЕсли;	
						
		КонецЕсли;
		
		// списание балансовой стоимости Д 7410 К 2410
		СуммаПроводки = СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ;
		
		Если СуммаПроводки <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Организация  = ТекОрганизация;
			Проводка.Содержание   = "Списана ост. стоимость";
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Сумма        = СуммаПроводки;
			
			//Проводка.СчетКт = СтрокаТЧ.СчетУчетаБУ;
			Проводка.СчетКт = ПланыСчетов.Типовой.ДолгосрочныеАктивыДляПродажи;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
			
			// на тот случай если списывается со счета, где субконто "Внеоборотные активы" а не "Основные средства", например со счета 1510
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
				Проводка, ТекСтруктурноеПодразделение, "Кт");
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения",Подразделение );
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций",ПодотчетноеЛицо );
			
//			Если ВедетсяАналитУчетОсПоМОЛ Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаТЧ.МОЛОрганизации);
//			КонецЕсли;	
			
			Если ВидОперации = Перечисления.ВидыОперацийПередачиОС.ПередачаСтруктурномуПодразделению Тогда
				
				Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
				
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					
					КурсыВалют = РегистрыСведений.КурсыВалют.СрезПоследних(ДатаДока, Новый Структура("Валюта", СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов));
					КурсВалютыВзаиморачетов = 1;
					Если КурсыВалют.Количество() > 0 Тогда
						КурсВалютыВзаиморачетов = КурсыВалют[0].Курс;
					КонецЕсли;
					СуммаПроводкиВал = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаПроводки, Константы.ВалютаРегламентированногоУчета.Получить(), СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
																  1, КурсВалютыВзаиморачетов);
																  
	    			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	    			Проводка.ВалютнаяСуммаДт = СуммаПроводкиВал;
					
				КонецЕсли;
				
			Иначе
				
				Проводка.СчетДт = СтрокаТЧ.СчетРасходовБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоРасходовБУ1);
	    		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТЧ.СубконтоРасходовБУ2);
	    		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТЧ.СубконтоРасходовБУ3);
	    		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы",  ТекОС);
							
			КонецЕсли;
			// ВР на сумму операции не отражавшейся в БУ			
			Если НЕ СтрокаТЧ.ПризнакФА Тогда
				СоответствиеСчетовСтоимостиФА = Новый Соответствие;
				СоответствиеСчетовСтоимостиФА.Вставить(СтрокаТЧ.СчетУчетаБУ, ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУВнеоборотногоАктива(ТекОС,ТекОрганизация,Дата, СтрокаТЧ.ПризнакФА));
				
				ПроцедурыНалоговогоУчета.ОтразитьВременныеРазницыВНУ(СтруктураШапкиДокумента, Проводка, ПроводкиНУ, СуммаПроводки, Истина, СоответствиеСчетовСтоимостиФА);
			КонецЕсли;
		КонецЕсли;
		
		
		// Здесь пропишем движения по отклонениям стоимости при передаче структурному подразделению
		
		Если ВидОперации = Перечисления.ВидыОперацийПередачиОС.ПередачаСтруктурномуПодразделению Тогда
			
			СуммаПроводкиОтклонений = СтрокаТЧ.СуммаБезНДС - СуммаПроводки;
			
			КурсыВалют = РегистрыСведений.КурсыВалют.СрезПоследних(ДатаДока, Новый Структура("Валюта", СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов));
			КурсВалютыВзаиморачетов = 1;
			Если КурсыВалют.Количество() > 0 Тогда
				КурсВалютыВзаиморачетов = КурсыВалют[0].Курс;
			КонецЕсли;
			СуммаСписанияВал = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаПроводки, Константы.ВалютаРегламентированногоУчета.Получить(), СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
														  1, КурсВалютыВзаиморачетов);
			СуммаПроводкиВал = СтрокаТЧ.СуммаБезНДСВал - СуммаСписанияВал;
			СуммаПроводкиВал = ?(СуммаПроводкиВал > 0, СуммаПроводкиВал, -СуммаПроводкиВал);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
			Если СуммаПроводкиОтклонений > 0  Тогда
				
				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период       	= ДатаДока;
				Проводка.Организация 	= ТекОрганизация;
				Проводка.Сумма   		= СуммаПроводкиОтклонений;
				Проводка.Содержание 	= "Положит. отклонение ст-ти реал-ции от остат. ст-ти ";
				Проводка.НомерЖурнала 	= НомерЖурнала;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, ТекСтруктурноеПодразделение, ТекСтруктурноеПодразделение);
	    
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
	    		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
	    		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
	    		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);

				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
	    			//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
	    			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	    			Проводка.ВалютнаяСуммаДт = СуммаПроводкиВал;
	    		КонецЕсли;

				Проводка.СчетКт = СтрокаТЧ.СчетДоходовБУ;
	    		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТЧ.СубконтоДоходовБУ1);
	    		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТЧ.СубконтоДоходовБУ2);
	    		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТЧ.СубконтоДоходовБУ3);
	    		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы",  СтрокаТЧ.ОсновноеСредство);
				
			ИначеЕсли СуммаПроводкиОтклонений < 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период       	= ДатаДока;
				Проводка.Организация 	= ТекОрганизация;
				Проводка.Сумма   		= -СуммаПроводкиОтклонений;
				Проводка.Содержание 	= "Отрицат. отклонение ст-ти реал-ции от остат. ст-ти ";
				Проводка.НомерЖурнала 	= НомерЖурнала;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
	    		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ТипыОпераций", СтруктураШапкиДокумента.ТипОперации);
				
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
	    			//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
	    			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	    			Проводка.ВалютнаяСуммаКт = СуммаПроводкиВал;
	    		КонецЕсли;

				Проводка.СчетДт = СтрокаТЧ.СчетРасходовБУ;
	    		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоРасходовБУ1);
	    		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТЧ.СубконтоРасходовБУ2);
	    		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТЧ.СубконтоРасходовБУ3);
	    		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы",  СтрокаТЧ.ОсновноеСредство);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	УправлениеВнеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийОС(Дата, ТекОрганизация, Движения.СостоянияОСОрганизаций,Отказ,Заголовок);


	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		ПроцедурыБухгалтерскогоУчета.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли; // Учет курсовых разниц
	
	ЗакрытиеПереоценокОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Движения по регистру "ОбъектыНалоговогоУчетаФА"
//
Процедура ДвиженияПоРегиструФАОрганизации(СтруктураШапкиДокумента, СтрТаблицыОС)	
	Движение = Движения.ОбъектыНалоговогоУчетаФА.Добавить();
	Движение.Период 						= СтруктураШапкиДокумента.Дата;
	Движение.Организация 					= СтруктураШапкиДокумента.Организация;
	Движение.ФиксированныйАктив 			= СтрТаблицыОС.ВнеоборотныйАктивНУ;
	Движение.ГруппаНУ						= СтрТаблицыОС.ГруппаНУ;
	Движение.СостояниеФиксированногоАктива 	= Перечисления.ВидыСостоянийФА.Выбыл;
	Движение.ПорядокПогашенияСтоимостиНУ 	= СтрТаблицыОС.ПорядокПогашенияСтоимостиНУ;
КонецПроцедуры // ДвиженияПоРегиструФАОрганизации()

// Снимает основное средство с учета по земельному, транспортному и имущественному налогам
//
Процедура ДвиженияпоРегистрамМестныхНалогов(СтруктураШапкиДокумента, ТаблицаПоОС)
	
	ПредыдущееОС = Справочники.ОсновныеСредства.ПустаяСсылка();
	
	Для Каждого СтрокаОС Из ТаблицаПоОс Цикл
		
		Если ПредыдущееОС = СтрокаОС.ОсновноеСредство Тогда
			Продолжить;
		КонецЕсли;
		// Снимаем с учета по налогу на имущество
		Если СтрокаОС.ОбъектИмущественногоНалога Тогда
			Движение = Движения.ОбъектыИмущественногоНалога.Добавить();
			Движение.Период 		= СтруктураШапкиДокумента.Дата;
			Движение.Организация 	= СтруктураШапкиДокумента.Организация;
			Движение.ОбъектНалогообложения = СтрокаОС.ОсновноеСредство;
			Движение.НачислятьНалог = Ложь;				
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаОС.СтруктурнаяЕдиницаИмущественногоНалога,
																			СтруктураШапкиДокумента.Организация,
																			глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																			Перечисления.РазделыНалоговогоУчета.МестныеНалоги);

				Движение.СтруктурнаяЕдиница = СтрокаОС.СтруктурнаяЕдиницаИмущественногоНалога;
			Иначе
				Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
				Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
			КонецЕсли;
		КонецЕсли;
		// Снимаем с учета по налогу на транспорт
		Если СтрокаОС.ОбъектТранспортногоНалога Тогда
			Движение = Движения.ОбъектыТранспортногоНалога.Добавить();
			
			Движение.Период 				= СтруктураШапкиДокумента.Дата;
			Движение.Организация 			= СтруктураШапкиДокумента.Организация;
			Движение.ОбъектНалогообложения 	= СтрокаОС.ОсновноеСредство;
			Движение.НачислятьНалог 		= Ложь;				
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаОС.СтруктурнаяЕдиницаТранспортногоНалога,
																			СтруктураШапкиДокумента.Организация,
																			глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																			Перечисления.РазделыНалоговогоУчета.МестныеНалоги);

				Движение.СтруктурнаяЕдиница = СтрокаОС.СтруктурнаяЕдиницаТранспортногоНалога;
			Иначе
				Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
				Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
			КонецЕсли;
		КонецЕсли;
		// Снимаем с учета по земельному налогу
		Если СтрокаОС.ОбъектЗемельногоНалога Тогда
			Движение = Движения.ОбъектыЗемельногоНалога.Добавить();
			Движение.Период 				= СтруктураШапкиДокумента.Дата;
			Движение.Организация 			= СтруктураШапкиДокумента.Организация;
			Движение.ОбъектНалогообложения 	= СтрокаОС.ОсновноеСредство;
			Движение.НачислятьНалог 		= Ложь;				
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаОС.СтруктурнаяЕдиницаЗемельногоНалога,
																			СтруктураШапкиДокумента.Организация,
																			глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																			Перечисления.РазделыНалоговогоУчета.МестныеНалоги);

				Движение.СтруктурнаяЕдиница = СтрокаОС.СтруктурнаяЕдиницаЗемельногоНалога;
			Иначе
				Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
				Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
			КонецЕсли;
		КонецЕсли;	
		
		ПредыдущееОС = СтрокаОС.ОсновноеСредство;
	КонецЦикла;	      
	
КонецПроцедуры	

// Движения по регистру "ФиксированныеАктивыУчитываемыеОтдельно"
//
Процедура ДвиженияПоРегиструФАУчитываемыеОтдельно(СтруктураШапкиДокумента, СтрТаблицыОС)
	
	// фиксируем выбытие только того актива, который выбывает, не включившись в состав группы
	ПризнакОтдельногоУчета = СтрТаблицыОС.ПризнакОтдельногоУчетаФА;
	
	Если Не ПризнакОтдельногоУчета Тогда
		Возврат;
	КонецЕсли;
	
	Движение = Движения.ФиксированныеАктивыУчитываемыеОтдельно.Добавить();
	
	Движение.Период 			= СтруктураШапкиДокумента.Дата;
	Движение.Организация 		= СтруктураШапкиДокумента.Организация;
	Движение.ФиксированныйАктив = СтрТаблицыОС.ВнеоборотныйАктивНУ;
	Движение.Событие	 		= Перечисления.СобытияФАУчитываемыхОтдельно.Выбытие;
	Движение.ВидЛьготыФА 		= СтрТаблицыОС.ВидЛьготыФА;
КонецПроцедуры // ДвиженияПоРегиструФАУчитываемыеОтдельно()

// Возрашает стоимость в налоговом учете для списка внеоборотных активов.
// Колонки результирующей таблицы:
//	ВнеоборотныйАктивНУ
// 	СчетУчетаНУ
// 	ВидУчетаНУ
//	СтоимостьНУ
//	ПризнакФА
//  
Функция ПолучитьТаблицуСтоимостиВАВНалоговомУчете(Организация, СписокВА, Период) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",	Период);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("СчетУчетаВА",	ПланыСчетов.Налоговый.ВнеоборотныеАктивы);
	Запрос.УстановитьПараметр("СубконтоВА",		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы);
	Запрос.УстановитьПараметр("СписокВА",		СписокВА);		
	Запрос.УстановитьПараметр("Ссылка",		Ссылка);		
	
	СостоянияФА = Новый СписокЗначений();	
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);
	
	Запрос.УстановитьПараметр("СостоянияФА", 	СостоянияФА);	
	Запрос.УстановитьПараметр("СобытиеПринятКУчету", Перечисления.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету);					
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив,
	               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Организация,
	               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА
	               |ПОМЕСТИТЬ ВТ_ФиксированныеАктивыУчитываемыеОтдельно
	               |ИЗ
	               |	РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(
	               |			&НачалоПериода,
	               |			Организация = &Организация
	               |				И ФиксированныйАктив В (&СписокВА)) КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
	               |ГДЕ
	               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Событие = &СобытиеПринятКУчету
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПередачаОСОС.ОсновноеСредство КАК ОсновноеСредство,
	               |	ПередачаОСОС.СчетДоходовНУ КАК СчетДоходовНУ,
	               |	ПередачаОСОС.СубконтоДоходовНУ1 КАК СубконтоДоходовНУ1,
	               |	ПередачаОСОС.СубконтоДоходовНУ2 КАК СубконтоДоходовНУ2,
	               |	ПередачаОСОС.СубконтоДоходовНУ3 КАК СубконтоДоходовНУ3,
	               |	ПередачаОСОС.СчетРасходовНУ КАК СчетРасходовНУ,
	               |	ПередачаОСОС.СубконтоРасходовНУ1 КАК СубконтоРасходовНУ1,
	               |	ПередачаОСОС.СубконтоРасходовНУ2 КАК СубконтоРасходовНУ2,
	               |	ПередачаОСОС.СубконтоРасходовНУ3 КАК СубконтоРасходовНУ3,
	               |	ПередачаОСОС.Ссылка.Организация КАК Организация
	               |ПОМЕСТИТЬ ВТ_ПередачаОС
	               |ИЗ
	               |	Документ.ПередачаОС.ОС КАК ПередачаОСОС
	               |ГДЕ
	               |	ПередачаОСОС.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ПередачаОС.ОсновноеСредство КАК ВнеоборотныйАктивНУ,
	               |	СтоимостьВА_НУ.Счет КАК СчетУчетаНУ,
	               |	ЕСТЬNULL(СтоимостьВА_НУ.СуммаОстатокДт, 0) КАК СтоимостьНУ,
	               |	СтоимостьВА_НУ.ВидУчета КАК ВидУчетаНУ,
	               |	ВЫБОР
	               |		КОГДА ОбъектыНалоговогоУчетаФА.СостояниеФиксированногоАктива В (&СостоянияФА)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ПризнакФА,
	               |	ОбъектыНалоговогоУчетаФА.ГруппаНУ,
	               |	ОбъектыНалоговогоУчетаФА.ПорядокПогашенияСтоимостиНУ КАК ПорядокПогашенияСтоимостиНУ,
	               |	ВТ_ФиксированныеАктивыУчитываемыеОтдельно.ВидЛьготыФА КАК ВидЛьготыФА,
	               |	ВЫБОР
	               |		КОГДА ВТ_ФиксированныеАктивыУчитываемыеОтдельно.ФиксированныйАктив ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ПризнакОтдельногоУчетаФА,
	               |	ВТ_ПередачаОС.СчетДоходовНУ,
	               |	ВТ_ПередачаОС.СубконтоДоходовНУ1,
	               |	ВТ_ПередачаОС.СубконтоДоходовНУ2,
	               |	ВТ_ПередачаОС.СубконтоДоходовНУ3,
	               |	ВТ_ПередачаОС.СчетРасходовНУ,
	               |	ВТ_ПередачаОС.СубконтоРасходовНУ1,
	               |	ВТ_ПередачаОС.СубконтоРасходовНУ2,
	               |	ВТ_ПередачаОС.СубконтоРасходовНУ3
	               |ИЗ
	               |	ВТ_ПередачаОС КАК ВТ_ПередачаОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(
	               |				&НачалоПериода,
	               |				Счет В ИЕРАРХИИ (&СчетУчетаВА),
	               |				&СубконтоВА,
	               |				Организация = &Организация
	               |					И Субконто1 В (&СписокВА)) КАК СтоимостьВА_НУ
	               |		ПО ВТ_ПередачаОС.ОсновноеСредство = СтоимостьВА_НУ.Субконто1
	               |			И ВТ_ПередачаОС.Организация = СтоимостьВА_НУ.Организация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	               |				&НачалоПериода,
	               |				Организация = &Организация
	               |					И ФиксированныйАктив В (&СписокВА)) КАК ОбъектыНалоговогоУчетаФА
	               |		ПО ВТ_ПередачаОС.ОсновноеСредство = ОбъектыНалоговогоУчетаФА.ФиксированныйАктив
	               |			И ВТ_ПередачаОС.Организация = ОбъектыНалоговогоУчетаФА.Организация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФиксированныеАктивыУчитываемыеОтдельно КАК ВТ_ФиксированныеАктивыУчитываемыеОтдельно
	               |		ПО ВТ_ПередачаОС.ОсновноеСредство = ВТ_ФиксированныеАктивыУчитываемыеОтдельно.ФиксированныйАктив
	               |			И ВТ_ПередачаОС.Организация = ВТ_ФиксированныеАктивыУчитываемыеОтдельно.Организация";
					
	

	ТЗ = Запрос.Выполнить().Выгрузить();   
	
	Возврат ТЗ;
КонецФункции // ПроцедурыНалоговогоУчета.ОпределитьСтоимостьНУПоСпискуВА()

// Движения по регистру налогового учета
// 	Формирование проводок зависит от Признака фиксированного актива.
//	Для фиксированных активов: 
// 	Кт СчетУчетаНУ - стоимость реализации БУ (НУ)
//  Дт Н410 Кт Н750 - сумма БУ (ВР)
//  		Кт Н880 - ост. стоимость БУ (ВР)
//	Для активов, не подлежащих амортизации, доходом признается превышение
//	суммы реализации над остаточной стоимостью в БУ: 
//  Дт Н410 Кт Н750 - СуммаДоходаНУ (ВР)
//  		Кт Н880 - Ост. стоимость БУ (ВР)
//
Процедура ДвиженияПоРегистрамНУ(СтруктураШапкиДокумента,Период, ТаблицаОС, Отказ)
	ТекОрганизация = СтруктураШапкиДокумента.Организация;	
	ДатаДока       = СтруктураШапкиДокумента.Дата;
	
	НомерЖурнала   = "НА";
	ПроводкиНУ = Движения.Налоговый;
	ТаблицаОС.Колонки.Добавить("СтоимостьНУ");
	ТаблицаОС.ЗаполнитьЗначения(0,"СтоимостьНУ");
	ПредыдущийАктив = Неопределено;
	//// Списание Стоимостного баланса актива
	ТаблицаСтоимостиНУ = ПолучитьТаблицуСтоимостиВАВНалоговомУчете(Организация, ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство"), Период);
	Для Каждого СтрБалансаНУ Из ТаблицаСтоимостиНУ Цикл
		СтрОС = ТаблицаОС.Найти(СтрБалансаНУ.ВнеоборотныйАктивНУ, "ОсновноеСредство");
		СнятьСУчетаПоНалогам = Ложь;
		Если Не СтрОС = Неопределено Тогда
			СтрОС.СтоимостьНУ = СтрОС.СтоимостьНУ + СтрБалансаНУ.СтоимостьНУ;			
		КонецЕсли;	
		
		Если СтрБалансаНУ.ПризнакФА Тогда
			// Отметим выбытие актива в регистре сведений
			// ОбъектыНалоговогоУчетаФА
			Если Не ПредыдущийАктив = СтрБалансаНУ.ВнеоборотныйАктивНУ   Тогда				
				ДвиженияПоРегиструФАОрганизации(СтруктураШапкиДокумента, СтрБалансаНУ);
				ДвиженияПоРегиструФАУчитываемыеОтдельно(СтруктураШапкиДокумента, СтрБалансаНУ);				
				ПредыдущийАктив = СтрБалансаНУ.ВнеоборотныйАктивНУ;
			КонецЕсли;		
		КонецЕсли;                                          		
		
		// при выбытии списываем стоимостной баланс для ОС не учитываемых в НУ, а так же ПР часть в стоимости ФА
		Если НЕ СтрБалансаНУ.ПризнакФА  ИЛИ (СтрБалансаНУ.ВидУчетаНУ<> Справочники.ВидыУчетаНУ.НУ И СтрБалансаНУ.ВидУчетаНУ<> Справочники.ВидыУчетаНУ.ВР) Тогда		
			Если СтрБалансаНУ.СтоимостьНУ = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			ПроводкаНУ = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период = ДатаДока;
			ПроводкаНУ.Организация = ТекОрганизация;
			ПроводкаНУ.Содержание = "Списание балансовой стоимости ФА";
			
			Если СтруктураШапкиДокумента.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
				// Постоянные разницы в размере балансовой стоимости актива.
				// ПР в стоимости списываем в момент реализации ФА.
				ПроводкаНУ.СчетДт = СтрБалансаНУ.СчетРасходовНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрБалансаНУ.СубконтоРасходовНУ1);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрБалансаНУ.СубконтоРасходовНУ2);							
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрБалансаНУ.СубконтоРасходовНУ3);							
				// здесь должны быть только вариации постоянных разниц
				ПроводкаНУ.ВидУчетаДт = ?(НЕ ЗначениеЗаполнено(СтрБалансаНУ.ВидУчетаНУ) или НЕ СтрБалансаНУ.ВидУчетаНУ.ПринадлежитЭлементу(Справочники.ВидыУчетаНУ.ПР), Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ,СтрБалансаНУ.ВидУчетаНУ);
			КонецЕсли;                                             				
			
			ПроводкаНУ.СчетКт = СтрБалансаНУ.СчетУчетаНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрБалансаНУ.ВнеоборотныйАктивНУ);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
			ВидУчетаВПроводке = СтрБалансаНУ.ВидУчетаНУ;				
			
			ПроводкаНУ.Сумма = СтрБалансаНУ.СтоимостьНУ;								
			
			ПроводкаНУ.ВидУчетаКт = СтрБалансаНУ.ВидУчетаНУ;
			
			// ВР на сумму операции не отражавшейся в БУ			
			ПроцедурыНалоговогоУчета.ОтразитьВременныеРазницыВНУ(СтруктураШапкиДокумента, ПроводкаНУ, ПроводкиНУ, -СтрБалансаНУ.СтоимостьНУ);
		КонецЕсли;   		
	КонецЦикла;	
	//
	///////////////////////////////////////////////////////////////////////////////////////
	// Расчет налогооблагаемого дохода и временных разниц	
	//// Движения по налоговому учету	
	Для каждого СтрОС из ТаблицаОС Цикл		
		//// Движения в НУ фиксированных активов
		СчетУчетаФА = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУВнеоборотногоАктива(СтрОС.ОсновноеСредство, ТекОрганизация,ДатаДока, СтрОС.ПризнакФА);
		Если СтрОС.ПризнакФА Тогда			
			// При выбытии стоимостный баланс группы уменьшается на сумму реализации
			Если СтрОС.СуммаБезНДС <> 0 Тогда
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период = ДатаДока;
				ПроводкаНУ.Организация = ТекОрганизация;
				ПроводкаНУ.Содержание = "Реализация фиксированного актива";
				
				ПроводкаНУ.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ(СчетУчетаРасчетовСКонтрагентом);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",      СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				ПроводкаНУ.СчетКт = СчетУчетаФА;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрОС.ОсновноеСредство);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
				ПроводкаНУ.Сумма = СтрОС.СуммаБезНДС;		
				
				
				ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.НУ;	
				ВидУчетаВПроводке = ?(СтруктураШапкиДокумента.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, Справочники.ВидыУчетаНУ.ВР, Справочники.ВидыУчетаНУ.НУ);			
				ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.НУ;							
			КонецЕсли;	
			
			
			Если СтруктураШапкиДокумента.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
				// Временные разницы
				// 1. Доходы. 	В БУ возникает доход на сумму реализации. В НУ дохода не возникает. Величина дохода от реализации в БУ
				// 	  будет являться временной разницей по НУ. 	Кт Н750 (ВР) Сумма РеализацииБУ
				// 2. Затраты. В БУ признаются затраты в размере остаточной стоимости актива по БУ, в НУ в этом периоде затраты не возникают.
				//    Величина остаточной стоимости в БУ является времененной разницей. Дт Н880 (ВР) ОстаточнаяСтоимостьБУ
				// 3. Стоимость ФА. В БУ актив выбывает и его стоимость равно 0, в НУ актив продолжает числиться. Возникает временная разница
				///   на сумму ( СуммаРеализацииБУ - ОстаточнаяСтоимостьФАНУ). Списание остаточной стоимость ФА отражено в блоке выше.
                	
				// 1. Доходы
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период = ДатаДока;
				ПроводкаНУ.Организация = ТекОрганизация;
				ПроводкаНУ.Содержание = "ВР: Доход от реализация фиксированного актива в БУ";
				
				ПроводкаНУ.СчетКт = СтрОС.СчетДоходовНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрОС.СубконтоДоходовНУ1);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрОС.СубконтоДоходовНУ2);							
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтрОС.СубконтоДоходовНУ3);											
				ПроводкаНУ.Сумма = СтрОС.СуммаБезНДС;		
				
				ВидУчетаВПроводке = Справочники.ВидыУчетаНУ.ВР;			
				
				ПроводкаНУ.ВидУчетаДт = ВидУчетаВПроводке;
				ПроводкаНУ.ВидУчетаКт = ВидУчетаВПроводке;									
				
				// 2. Затраты
				СуммаПроводки = СтрОС.СтоимостьБУ - СтрОС.АмортизацияБУ - СтрОС.АмортизацияЗаМесяцБУ;
				
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период = ДатаДока;
				ПроводкаНУ.Организация = ТекОрганизация;
				ПроводкаНУ.Содержание = "ВР: Затраты в сумме остаточной стоимости фиксированного актива в БУ и НУ";
				
				ПроводкаНУ.СчетДт = СтрОС.СчетРасходовНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрОС.СубконтоРасходовНУ1);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрОС.СубконтоРасходовНУ2);							
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрОС.СубконтоРасходовНУ3);											
				ПроводкаНУ.Сумма = СуммаПроводки;		
				
				ПроводкаНУ.СчетКт = СчетУчетаФА;
                ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрОС.ОсновноеСредство);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
				
				ВидУчетаВПроводке = Справочники.ВидыУчетаНУ.ВР;							
				ПроводкаНУ.ВидУчетаДт = ВидУчетаВПроводке;				
				ПроводкаНУ.ВидУчетаКт = ВидУчетаВПроводке;				
				
				// 3. Стоимость ФА								
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период = ДатаДока;
				ПроводкаНУ.Организация = ТекОрганизация;
				ПроводкаНУ.Содержание = "ВР: Разница в стоимости актива по БУ и НУ";
				
				ПроводкаНУ.СчетДт = СчетУчетаФА;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", СтрОС.ОсновноеСредство);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
				ПроводкаНУ.Сумма = СтрОС.СуммаБезНДС;		
				
				ВидУчетаВПроводке = Справочники.ВидыУчетаНУ.ВР;			
				
				ПроводкаНУ.ВидУчетаДт = ВидУчетаВПроводке;
				ПроводкаНУ.ВидУчетаКт = ВидУчетаВПроводке;													
				
			КонецЕсли;					
		Иначе
			// Движения в НУ ВА, не подлежащих амортизации		
			// Если возникает налогооблагаемый доход, признаем его в НУ
			// Отражаем балансовую стоимость
			// Отражаем доход от реализации.		
			
			СуммаДоходаНУ = СтрОС.СуммаБезНДС - СтрОС.СтоимостьНУ ;
			
			Если СуммаДоходаНУ  > 0 Тогда
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период = ДатаДока;
				ПроводкаНУ.Организация = ТекОрганизация;
				ПроводкаНУ.Содержание = "Реализация ОС";
				
				ПроводкаНУ.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ(СчетУчетаРасчетовСКонтрагентом);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",          СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				ПроводкаНУ.СчетКт = СтрОС.СчетДоходовНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрОС.СубконтоДоходовНУ1);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрОС.СубконтоДоходовНУ2);							
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтрОС.СубконтоДоходовНУ3);							
				
				ПроводкаНУ.Сумма = СуммаДоходаНУ;						
				
				ВидУчетаВПроводке = Справочники.ВидыУчетаНУ.НУ;			
				
				ПроводкаНУ.ВидУчетаДт = ВидУчетаВПроводке;
				ПроводкаНУ.ВидУчетаКт = ВидУчетаВПроводке;			
			КонецЕсли;	
			
			Если СтруктураШапкиДокумента.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
				// отражаем доход отреализации
				СуммаДоходаПР = Мин(СтрОС.СуммаБезНДС, СтрОС.СтоимостьНУ);
				Если СуммаДоходаПР <> 0 Тогда
					ПроводкаНУ = ПроводкиНУ.Добавить();
					ПроводкаНУ.Период = ДатаДока;
					ПроводкаНУ.Организация = ТекОрганизация;
					ПроводкаНУ.Содержание = "Часть дохода от реализации ФА, не признаваемая в НУ";
					
					ПроводкаНУ.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ(СчетУчетаРасчетовСКонтрагентом);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);			
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",          СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					ПроводкаНУ.СчетКт = СтрОС.СчетДоходовНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрОС.СубконтоДоходовНУ1);			
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрОС.СубконтоДоходовНУ2);							
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтрОС.СубконтоДоходовНУ3);												
					ПроводкаНУ.Сумма = СуммаДоходаПР;					
					ВидУчетаВПроводке = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;								
					ПроводкаНУ.ВидУчетаДт = ВидУчетаВПроводке;
					ПроводкаНУ.ВидУчетаКт = ВидУчетаВПроводке;			
				КонецЕсли;	
			КонецЕсли;	
						
			// списание амортизации тек. месяца
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;
			ПроводкаНУ.Организация 	= СтруктураШапкиДокумента.Организация;
			ПроводкаНУ.Содержание 	= "Списание внеоборотного актива";
			
			ПроводкаНУ.Сумма = -СтрОС.АмортизацияЗаМесяцБУ;				
			
			ПроводкаНУ.СчетДт = СтрОС.СчетРасходовНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрОС.СубконтоРасходовНУ1);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрОС.СубконтоРасходовНУ2);							
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрОС.СубконтоРасходовНУ3);											
			
			
			ПроводкаНУ.СчетКт = СчетУчетаФА;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрОС.ОсновноеСредство);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
			
			// по налоговому учету				
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ);
			// ВР на сумму операции не отражавшейся в БУ
			ПроцедурыНалоговогоУчета.ОтразитьВременныеРазницыВНУ(СтруктураШапкиДокумента, ПроводкаНУ, Движения.Налоговый, СтрОС.АмортизацияЗаМесяцБУ);		
		КонецЕсли;		
	КонецЦикла;	
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ОС");

	УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;	
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	ВедениеУчетаВременныхРазницБалансовымМетодом 	= ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);
	
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 	ВедениеУчетаВременныхРазницБалансовымМетодом);	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
		
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
		
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора", "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации", "СделкаВидОперации");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.СтруктурноеПодразделение,
			СтруктураШапкиДокумента.Организация,
			глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
			Перечисления.РазделыНалоговогоУчета.МестныеНалоги);
	Иначе
		Налогоплательщик = СтруктураШапкиДокумента.Организация;
	КонецЕсли;
			
	// Выборка строк табличной части
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",   		Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", 		Дата);
	Запрос.УстановитьПараметр("Ссылка",        		Ссылка);
	Запрос.УстановитьПараметр("СнятоСУчета",   		Перечисления.ВидыСостоянийОС.СнятоСУчета);
	Запрос.УстановитьПараметр("Налогоплательщик",	Налогоплательщик);
	
	СостоянияФА = Новый СписокЗначений();	
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);	
	Запрос.УстановитьПараметр("СостоянияФА", 	СостоянияФА);		

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПередачаОСОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ СписокОС
	|ИЗ
	|	Документ.ПередачаОС.ОС КАК ПередачаОСОС
	|ГДЕ
	|	ПередачаОСОС.Ссылка = &Ссылка
    |
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ОС_СнятыеСУчета
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|			И ОсновноеСредство В
	|			(ВЫБРАТЬ
	|				СписокОС.ОсновноеСредство
	|			ИЗ
	|				СписокОС КАК СписокОС)) КАК СостоянияОСОрганизацииСрезПоследних
	|ГДЕ
	|	СостоянияОСОрганизацииСрезПоследних.Состояние = &СнятоСУчета
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|ПОМЕСТИТЬ ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОССрезПоследних.СчетУчетаБУ КАК СчетУчетаБУ,
	|	СчетаУчетаОССрезПоследних.СчетНачисленияАмортизацииБУ КАК СчетНачисленияАмортизацииБУ
	|ПОМЕСТИТЬ СчетаУчетаОССрезПоследних
	|ИЗ
	|	РегистрСведений.СчетаУчетаОС.СрезПоследних(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК СчетаУчетаОССрезПоследних
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации
	|ПОМЕСТИТЬ СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыИмущественногоНалогаСрезПоследних.НачислятьНалог,
	|	ОбъектыИмущественногоНалогаСрезПоследних.СтруктурнаяЕдиница,
	|	ВЫРАЗИТЬ(ОбъектыИмущественногоНалогаСрезПоследних.ОбъектНалогообложения КАК Справочник.ОсновныеСредства) КАК ОбъектНалогообложения
	|ПОМЕСТИТЬ ОбъектыИмущественногоНалогаСрезПоследних
	|ИЗ
	|	РегистрСведений.ОбъектыИмущественногоНалога.СрезПоследних(
	|			&ДатаДокумента,
	|			ВЫРАЗИТЬ(ОбъектНалогообложения КАК Справочник.ОсновныеСредства) В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)
	|				И Налогоплательщик = &Налогоплательщик) КАК ОбъектыИмущественногоНалогаСрезПоследних
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыЗемельногоНалогаСрезПоследних.ОбъектНалогообложения КАК ОбъектНалогообложения,
	|	ОбъектыЗемельногоНалогаСрезПоследних.НачислятьНалог,
	|	ОбъектыЗемельногоНалогаСрезПоследних.СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ОбъектыЗемельногоНалогаСрезПоследних
	|ИЗ
	|	РегистрСведений.ОбъектыЗемельногоНалога.СрезПоследних(
	|			&ДатаДокумента,
	|			ОбъектНалогообложения В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)
	|				И Налогоплательщик = &Налогоплательщик) КАК ОбъектыЗемельногоНалогаСрезПоследних
    |
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектНалогообложения
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыТранспортногоНалогаСрезПоследних.ОбъектНалогообложения КАК ОбъектНалогообложения,
	|	ОбъектыТранспортногоНалогаСрезПоследних.НачислятьНалог,
	|	ОбъектыТранспортногоНалогаСрезПоследних.СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ОбъектыТранспортногоНалогаСрезПоследних
	|ИЗ
	|	РегистрСведений.ОбъектыТранспортногоНалога.СрезПоследних(
	|			&ДатаДокумента,
	|			ОбъектНалогообложения В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)
	|				И Налогоплательщик = &Налогоплательщик) КАК ОбъектыТранспортногоНалогаСрезПоследних
    |
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектНалогообложения
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК Справочник.ОсновныеСредства) КАК ФиксированныйАктив,
	|	ОбъектыНалоговогоУчетаФА.ГруппаНУ,
	|	ВЫБОР
	|		КОГДА ОбъектыНалоговогоУчетаФА.СостояниеФиксированногоАктива В (&СостоянияФА)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакФА
	|ПОМЕСТИТЬ ОбъектыНалоговогоУчетаФА
	|ИЗ
	|	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|				И ВЫРАЗИТЬ(ФиксированныйАктив КАК Справочник.ОсновныеСредства) В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ОбъектыНалоговогоУчетаФА
    |
	|ИНДЕКСИРОВАТЬ ПО
	|	ФиксированныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МестонахождениеОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОССрезПоследних.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	МестонахождениеОССрезПоследних.Местонахождение КАК ТекущееПодразделение,
	|	МестонахождениеОССрезПоследних.МОЛ КАК МОЛОрганизации
	|ПОМЕСТИТЬ МестонахождениеОС
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС))МестонахождениеОССрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПередачаОСОС.НомерСтроки,
	|	ПередачаОСОС.ОсновноеСредство,
	|	ПередачаОСОС.ОсновноеСредство.Код КАК Код,
	|	ПередачаОСОС.Сумма,
	|	ПередачаОСОС.СтавкаНДС,
	|	ПередачаОСОС.СуммаНДС КАК НДС,
	|	ПередачаОСОС.СтоимостьБУ,
	|	ПередачаОСОС.АмортизацияБУ,
	|	ПередачаОСОС.АмортизацияЗаМесяцБУ,
	|	ПередачаОСОС.СчетУчетаНДСПоРеализации,
	|	ПередачаОСОС.НДСВидОперацииРеализации,
	|	ПередачаОСОС.СчетДоходовБУ,
	|	ПередачаОСОС.СубконтоДоходовБУ1,
	|	ПередачаОСОС.СубконтоДоходовБУ2,
	|	ПередачаОСОС.СубконтоДоходовБУ3,
	|	ПередачаОСОС.СчетРасходовБУ,
	|	ПередачаОСОС.СубконтоРасходовБУ1,
	|	ПередачаОСОС.СубконтоРасходовБУ2,
	|	ПередачаОСОС.СубконтоРасходовБУ3,
	|	ПередачаОСОС.СчетДоходовНУ,
	|	ПередачаОСОС.СубконтоДоходовНУ1,
	|	ПередачаОСОС.СубконтоДоходовНУ2,
	|	ПередачаОСОС.СубконтоДоходовНУ3,
	|	ПередачаОСОС.СчетРасходовНУ,
	|	ПередачаОСОС.СубконтоРасходовНУ1,
	|	ПередачаОСОС.СубконтоРасходовНУ2,
	|	ПередачаОСОС.СубконтоРасходовНУ3,
	|	ЕСТЬNULL(ОбъектыИмущественногоНалогаСрезПоследних.НачислятьНалог, ЛОЖЬ) КАК ОбъектИмущественногоНалога,
	|	ОбъектыИмущественногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаИмущественногоНалога,
	|	ЕСТЬNULL(ОбъектыТранспортногоНалогаСрезПоследних.НачислятьНалог, ЛОЖЬ) КАК ОбъектТранспортногоНалога,
	|	ОбъектыТранспортногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаТранспортногоНалога,
	|	ЕСТЬNULL(ОбъектыЗемельногоНалогаСрезПоследних.НачислятьНалог, ЛОЖЬ) КАК ОбъектЗемельногоНалога,
	|	ОбъектыЗемельногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаЗемельногоНалога,
	|	СчетаУчетаОССрезПоследних.СчетУчетаБУ КАК СчетУчетаБУ,
	|	СчетаУчетаОССрезПоследних.СчетНачисленияАмортизацииБУ КАК СчетНачисленияАмортизацииБУ,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации КАК Направление_БУ,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтражалосьВБухгалтерскомУчете,
	|	ВЫБОР
	|		КОГДА ОС_СнятыеСУчета.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СнятоСУчета,
	|	ЕСТЬNULL(ОбъектыНалоговогоУчетаФА.ПризнакФА, ЛОЖЬ) КАК ПризнакФА,
	|	ОбъектыНалоговогоУчетаФА.ГруппаНУ,
	|	МестонахождениеОС.СтруктурноеПодразделение,
	|	МестонахождениеОС.ТекущееПодразделение,
	|	МестонахождениеОС.МОЛОрганизации КАК МОЛОрганизации
	|ИЗ
	|	Документ.ПередачаОС1.ОС КАК ПередачаОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО ПередачаОСОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчетаОССрезПоследних КАК СчетаУчетаОССрезПоследних
	|		ПО ПередачаОСОС.ОсновноеСредство = СчетаУчетаОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО ПередачаОСОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОС_СнятыеСУчета КАК ОС_СнятыеСУчета
	|		ПО ПередачаОСОС.ОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыИмущественногоНалогаСрезПоследних КАК ОбъектыИмущественногоНалогаСрезПоследних
	|		ПО ПередачаОСОС.ОсновноеСредство = ОбъектыИмущественногоНалогаСрезПоследних.ОбъектНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыЗемельногоНалогаСрезПоследних КАК ОбъектыЗемельногоНалогаСрезПоследних
	|		ПО ПередачаОСОС.ОсновноеСредство = ОбъектыЗемельногоНалогаСрезПоследних.ОбъектНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыТранспортногоНалогаСрезПоследних КАК ОбъектыТранспортногоНалогаСрезПоследних
	|		ПО ПередачаОСОС.ОсновноеСредство = ОбъектыТранспортногоНалогаСрезПоследних.ОбъектНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА
	|		ПО ПередачаОСОС.ОсновноеСредство = ОбъектыНалоговогоУчетаФА.ФиксированныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОС КАК МестонахождениеОС
	|		ПО ПередачаОСОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|ГДЕ
	|	ПередачаОСОС.Ссылка = &Ссылка";
	
	РезультатЗапросаПоОС = Запрос.Выполнить();

	// Подготовим таблицу товаров для проведения
	ТаблицаПоОС = ПодготовитьТаблицуОС(РезультатЗапросаПоОС, СтруктураШапкиДокумента);
//	ТаблицаПоОС.ВыбратьСтроку();
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	//УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);
	
	// Проверим, достаточно ли данных в таблице по ОС
	ПроверитьТаблицуПоОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	
	// Проверка заполнения ТЧ
	ПроверитьЗаполнениеТабличнойЧастиОС(ТаблицаПоОС, СтруктураШапкиДокумента, Отказ, Заголовок);

	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоОС, СтруктураШапкиДокумента, Истина);

	//Проверим на возможность проведения в БУ и НУ
	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента, Отказ, Заголовок);

	// Движения по документу
	Если НЕ Отказ Тогда
	   	ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
		ДвижениеПоРегиструСоставОС(СтруктураШапкиДокумента);
		ДвиженияПоРегистрамМестныхНалогов(СтруктураШапкиДокумента, ТаблицаПоОС);
		
		Если ВидОперации = Перечисления.ВидыОперацийПередачиОС.Реализация Тогда
			
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда			
				ДвиженияПоРегистрамНУ(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, ТаблицаПоОС, Отказ)
			КонецЕсли;	
						
			
			Если Не Отказ Тогда			
				ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
			КонецЕсли;
			
		Иначе
			
			// Движения документа по данному виду операции по налоговому учету не предусмотрены
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Истина, "СчетФактураВыданный");
	КонецЕсли;
КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	Если  НЕ Отказ Тогда
		УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Ложь, "СчетФактураВыданный");
	КонецЕсли;	
КонецПроцедуры

//Предопределенная процедура обработки заполнения документа
//
Процедура ОбработкаЗаполнения(Основание)
	ЗаполнитьПоДокументуОснования(основание);
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();