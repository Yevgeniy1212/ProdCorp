Перем мВалютаРегламентированногоУчета Экспорт;
Перем мИспользоватьХарактеристики Экспорт;

Перем мОтображатьСтруктурныеПодразделения Экспорт;


#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";		
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаТаблицыСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Ответственный.Представление КАК ОтветственныйПредставление
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры КАК УстановкаЦенНоменклатуры
	|
	|ГДЕ
	|	УстановкаЦенНоменклатуры.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	УстановкаЦенНоменклатуры.НомерСтроки 				     КАК НомерСтроки,
	|	УстановкаЦенНоменклатуры.Номенклатура,
	|	ВЫРАЗИТЬ(УстановкаЦенНоменклатуры.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	УстановкаЦенНоменклатуры.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	УстановкаЦенНоменклатуры.Цена,
	|	УстановкаЦенНоменклатуры.Номенклатура.БазоваяЕдиницаИзмерения.Представление  КАК ЕдиницаИзмеренияПредставление,
	|	УстановкаЦенНоменклатуры.Валюта,
	|	УстановкаЦенНоменклатуры.Валюта.Представление            КАК ВалютаПредставление
	|
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.Товары КАК УстановкаЦенНоменклатуры
	|
	|ГДЕ
	|	УстановкаЦенНоменклатуры.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	УстановкаЦенНоменклатуры.НомерСтроки
	|";

	ЗапросПоТоварам = Запрос.Выполнить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УстановкаЦенНоменклатуры_ИзменениеЦен";

	Макет = ПолучитьМакет("ИзменениеЦен");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Изменение цен номенклатуры", глСписокПрефиксовУзлов);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьШапкаНоменклатура   = Макет.ПолучитьОбласть(ОбластьШапки + "|Номенклатура");
	ОбластьШапкаТипЦен         = Макет.ПолучитьОбласть(ОбластьШапки + "|Цена");
	ОбластьСтрокаНоменклатура  = Макет.ПолучитьОбласть(ОбластьСтроки + "|Номенклатура");
	ОбластьСтрокаТипЦен        = Макет.ПолучитьОбласть(ОбластьСтроки + "|Цена");
	ОбластьПодвалНоменклатура  = Макет.ПолучитьОбласть("Подписи|Номенклатура");
	ОбластьПодвалТипЦен        = Макет.ПолучитьОбласть("Подписи|Цена");

	// Выведем шапку
	Если ВыводитьКоды Тогда
		ОбластьШапкаНоменклатура.Параметры.Колонка = Колонка;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьШапкаНоменклатура);
	
	ОбластьШапкаТипЦен.Параметры.ТипЦен = ТипЦен;
	ТабДокумент.Присоединить(ОбластьШапкаТипЦен);
	
	// Выведем таблицу
	ВыборкаПоСтрокам = ЗапросПоТоварам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСтрокам.Следующий() Цикл
		ОбластьСтрокаНоменклатура.Параметры.Заполнить(ВыборкаПоСтрокам);
		ОбластьСтрокаНоменклатура.Параметры.Товар = ВыборкаПоСтрокам.Товар;
		Если ВыводитьКоды Тогда
			ОбластьСтрокаНоменклатура.Параметры.КодАртикул = ВыборкаПоСтрокам.КодАртикул;
		КонецЕсли; 
		ТабДокумент.Вывести(ОбластьСтрокаНоменклатура);
		ОбластьСтрокаТипЦен.Параметры.Заполнить(ВыборкаПоСтрокам);
		ТабДокумент.Присоединить(ОбластьСтрокаТипЦен);
	КонецЦикла;

	// Выведем подвал
	ОбластьПодвалНоменклатура.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьПодвалНоменклатура);
	ТабДокумент.Присоединить(ОбластьПодвалТипЦен);

	ТекОбласть = ТабДокумент.Области.ОтветственныйПредставление;

	ОбластьОтветственного = ТабДокумент.Область(ТекОбласть.Низ, 14, ТекОбласть.Низ, Мин(ТабДокумент.ШиринаТаблицы, 29));
	ОбластьОтветственного.Объединить();
	ОбластьОтветственного.ГраницаСнизу            = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	ОбластьОтветственного.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяМакета = "ПереченьЦен" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьДокумента();
	КонецЕсли;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПереченьЦен", "Перечень цен");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	ДокументОснование = Основание.Ссылка;
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
				
		ТипЦен = Основание.ТипЦен;
		
		Если НЕ ЗначениеЗаполнено(Основание.ТипЦен) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В документе "+СокрЛП(Основание)+" не установлен тип цен! Заполнение невозможно.");
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", Основание);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Док.СуммаВключаетНДС,
		               |	Док.ВалютаДокумента,
		               |	Док.Контрагент,
		               |	Док.ТипЦен КАК ТипЦен,
		               |	Док.Товары.(
		               |		Номенклатура,
		               |		Цена,
		               |		СтавкаНДС,
		               |		НомерСтроки
		               |	),
		               |	Док.Услуги.(
		               |		НомерСтроки,
		               |		Номенклатура,
		               |		Цена,
		               |		СтавкаНДС
		               |	)
		               |ИЗ
		               |	Документ.ПоступлениеТоваровУслуг КАК Док
		               |ГДЕ
		               |	Док.Ссылка = &ДокументОснование";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Выборка = Шапка.Товары.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура",               Выборка.Номенклатура);
			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Товары, СтруктураОтбора);
			
			Если СтрокаТабличнойЧасти = Неопределено Тогда
				
				СтрокаТабличнойЧасти = Товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
				
			КонецЕсли;
			СтрокаТабличнойЧасти.Цена  = ОбработкаТабличныхЧастей.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Выборка.Цена,
			Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
			Шапка.СуммаВключаетНДС,
			Шапка.ТипЦен.ЦенаВключаетНДС,
			Шапка.ТипЦен.ЦенаВключаетНДС,
			УчетНДСИАкциза.ПолучитьСтавкуНДС(Выборка.СтавкаНДС));
			
			СтрокаТабличнойЧасти.Валюта =  Шапка.ВалютаДокумента;
		КонецЦикла;
		
		Выборка = Шапка.Услуги.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура",               Выборка.Номенклатура);
			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Товары, СтруктураОтбора);
			
			Если СтрокаТабличнойЧасти = Неопределено Тогда
				
				СтрокаТабличнойЧасти = Товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
				
			КонецЕсли;
			СтрокаТабличнойЧасти.Цена  = ОбработкаТабличныхЧастей.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Выборка.Цена,
			Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
			Шапка.СуммаВключаетНДС,
			Шапка.ТипЦен.ЦенаВключаетНДС,
			Шапка.ТипЦен.ЦенаВключаетНДС,
			УчетНДСИАкциза.ПолучитьСтавкуНДС(Выборка.СтавкаНДС));
			
			СтрокаТабличнойЧасти.Валюта =  Шапка.ВалютаДокумента;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ТипЦен, Организация");

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет наличие одних и тех же номенклатурных позиций в табличной
// части "Товары" и выдает сообщение об ошибке при проведении.
//
Процедура ПроверитьДублиТовары(ТаблицаТоваров, Отказ, Заголовок) Экспорт
	
	ТаблицаДублей = ТаблицаТоваров.Скопировать();
	
	// Подсчитываем количество повторений.
	ТаблицаДублей.Колонки.Добавить("КоличествоПовторений");
	ТаблицаДублей.ЗаполнитьЗначения(1, "КоличествоПовторений");
	ТаблицаДублей.Свернуть("Номенклатура", "КоличествоПовторений");
	
	// Если количество повторений > 1, выдаем сообщение об ошибке.
	Если ?(ТаблицаДублей.Количество() > 0, ТаблицаДублей.Итог("КоличествоПовторений") / ТаблицаДублей.Количество(), 0) > 1 Тогда
		
		ТекстСообщенияОбОшибке = "";
		
		// Цикл по каждому найденному повторению.
		Для Каждого СтрокаТаблицыДублей Из ТаблицаДублей Цикл
			
			Если СтрокаТаблицыДублей.КоличествоПовторений = 1 Тогда
				Продолжить; // повторений нет.
			КонецЕсли;
			
			// Добавим перевод строки, если требуется.
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
								   + ?(НЕ ЗначениеЗаполнено(ТекстСообщенияОбОшибке), "", "
																						|");
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке
								   + "В строках №№ "; 
								   
			// Выводим номера строк.
			СписокНомеровСтрок = "";
			МассивСтрок = ТаблицаТоваров.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаблицыДублей.Номенклатура));
			
			Для Каждого Строка Из МассивСтрок Цикл
				СписокНомеровСтрок = СписокНомеровСтрок + ?(НЕ ЗначениеЗаполнено(СписокНомеровСтрок), "", ", ") + Строка.НомерСтроки;
			КонецЦикла;
			
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке
								   + СписокНомеровСтрок
								   + " в табличной части документа указана одна и та же номенклатурная позиция.";
								   
		КонецЦикла;
														  
		ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщенияОбОшибке, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьТовары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Валюта");
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары",СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("ТипЦен");
    ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ТипЦен, "ТипЦен");
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	НаборДвижений   = Движения.ЦеныНоменклатуры;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ЦеныНоменклатуры.ВыполнитьДвижения();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
    // Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	    	
		ЗаполнитьПоДокументуОснования(Основание);
	КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,РучнаяКорректировка);
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Информация = Строка(ТипЦен);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)
 
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, "");

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура",               "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Цена",                       "Цена");
	СтруктураПолей.Вставить("Валюта",                     "Валюта");

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	ТаблицаПоТоварам          = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	Если СтруктураШапкиДокумента.НеПроводитьНулевыеЗначения Тогда
		Сч = 0;
		Пока Сч < ТаблицаПоТоварам.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТоварам.Получить(Сч);
			Если СтрокаТаблицы.Цена = 0 Тогда
				ТаблицаПоТоварам.Удалить(СтрокаТаблицы);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ПроверитьДублиТовары(ТаблицаПоТоварам, Отказ, Заголовок); 
	
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры	// ОбработкаПроведения

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();