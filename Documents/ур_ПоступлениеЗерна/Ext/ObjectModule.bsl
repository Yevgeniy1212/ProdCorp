////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ   

Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем ПартионныйУчетБУ, ПартионныйУчетНУ;


Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;
Перем ВводНаОснованииРеализацииТМЗПередачиОС Экспорт;

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПоступлениеТоваров()
	КодОС = Ложь;
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
		КодОС			= Истина;
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаТаблицыСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.Текст ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента КАК Основание,
	|	Контрагент,
	|	Организация,
	|   СтруктурноеПодразделение,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Склад,
	| 	ОтветственныеЛицаСклад.ФизическоеЛицо КАК МОЛ
	|
	|ИЗ
	|	Документ.ур_поступлениеЗерна КАК ПоступлениеЗерна
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСклад
	|	ПО ПоступлениеЗерна.Склад = ОтветственныеЛицаСклад.СтруктурнаяЕдиница
	|
	|ГДЕ
	|	ПоступлениеЗерна.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.КоличествоПоДокументу,
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	ВложенныйЗапрос.Сумма КАК Сумма,
	|   ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка (1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.КодАртикул КАК КодАртикул,
	|	ВложенныйЗапрос.ЕдиницаНаименование,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Метка
	|  
	|ИЗ
	|(ВЫБРАТЬ
	|	СУММА(Товары.Количество) КАК КоличествоПоДокументу,
	|	Товары.Цена КАК Цена,
	|	СУММА(Товары.Сумма) КАК Сумма,
	|   Товары.Номенклатура,
	|	Товары.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Товары.ЕдиницаИзмерения.Представление КАК ЕдиницаНаименование,
	|	Сумма(Товары.СуммаНДС) КАК СуммаНДС,
	|	МИНИМУМ(Товары.НомерСтроки) КАК НомерСтроки,
	|   0 Как Метка
	|ИЗ
	|	Документ.ур_поступлениеЗерна.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Цена,
	|	Товары.Номенклатура,
	|	Товары.Номенклатура."+ ТекстКодАртикул + ",
	|	Товары.ЕдиницаИзмерения.Представление) ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Услуги.Количество,
	|	Услуги.Цена,
	|	Услуги.Сумма,
	|	ВЫРАЗИТЬ(Услуги.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеПолное,
	|	Услуги.Номенклатура."+ ТекстКодАртикул + ",
	|	""ед."",
	|	Услуги.СуммаНДС,
	|	Услуги.НомерСтроки,
	|	1 Как Метка
	|ИЗ
	|	Документ.ур_поступлениеЗерна.Услуги КАК Услуги
	|ГДЕ
	|	Услуги.Ссылка = &ТекущийДокумент
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|  
	|ВЫБРАТЬ
	|	1,
	|	ОС.Сумма,
	|	ОС.Сумма,
	|	ВЫРАЗИТЬ(ОС.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеПолное,
	|	" + ?(КодОС,"ОС.ОсновноеСредство.Код", """""") + ",  
	|	""ед."",
	|	ОС.СуммаНДС,
	|	ОС.НомерСтроки,
	|	2 Как Метка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ОС КАК ОС
	|ГДЕ
	|	ОС.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|";
	
	ВыборкаСтрок = ЗапросПоТоварам.Выполнить().Выгрузить();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_Накладная";
	Макет       = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Приходная накладная", глСписокПрефиксовУзлов);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = СокрЛП(ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,"));
	ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = СокрЛП(ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата), "ПолноеНаименование,"));
	ОбластьМакета.Параметры.Получатель = СтруктурнаяЕдиницаОрганизация;
	ТабДокумент.Вывести(ОбластьМакета);
		
	Если ЗначениеЗаполнено(Шапка.Основание) Тогда 
		ОбластьМакета = Макет.ПолучитьОбласть("Основание");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	Если ЗначениеЗаполнено(Шапка.Склад) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Склад");
		ОбластьМакета.Параметры.ПредставлениеСклада = Шапка.Склад;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
	Сумма    = 0;
	СуммаНДС = 0;

	
	Для Каждого ВыборкаСтрокТовары Из ВыборкаСтрок Цикл
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
		КонецЕсли;   
		ТабДокумент.Вывести(ОбластьМакета);
		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.ИтогСумма = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ИтогСуммаНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если НЕ Шапка.СуммаВключаетНДС ТОгда
			ОбластьИтогоСНДС = Макет.ПолучитьОбласть("ИтогоСНДС");
			ОбластьИтогоСНДС.Параметры.ВсегоСНДС = Сумма+СуммаНДС;
			ТабДокумент.Вывести(ОбластьИтогоСНДС);
		КонецЕсли;
		
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрок.Количество()
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	// заполняем МОЛ
	Если ЗначениеЗаполнено(Шапка.Склад) Тогда
		ДанныеМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Организация, Шапка.МОЛ, Дата);
		ОбластьМакета.Параметры.Получил = ДанныеМОЛ.Представление;
	КонецЕсли;	
	
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПоступлениеТоваров()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьЗ3()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номер КАК НомерДокумента,
	|	Дата КАК ДатаДокумента,
	|	Контрагент,
	|	Организация,
	|   СтруктурноеПодразделение,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	ВалютаДокумента.Представление КАК ВалютаПредставление,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Склад,
	|	СчетУчетаРасчетовСКонтрагентом КАК КорреспондентскийСчет,
	|	ОтветственныеЛицаСклад.ФизическоеЛицо КАК МОЛ,
	|	НомерВходящегоДокумента КАК НомерСопроводительногоДокумента
	|ИЗ
	|	Документ.ур_поступлениеЗерна КАК ПоступлениеЗерна
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСклад
	|		ПО Склад = ОтветственныеЛицаСклад.СтруктурнаяЕдиница
	|ГДЕ
	|	Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(Товары.Количество) КАК КоличествоПоДокументу,
	|	Товары.Цена КАК Цена,
	|	СУММА(Товары.Сумма) КАК ВсегоСНДС,
	|	Товары.ЕдиницаИзмерения.Представление КАК ЕдиницаНаименование,
	|	СУММА(Товары.СуммаНДС) КАК СуммаНДС,
	|	Товары.Номенклатура.Код КАК ТоварКод,
	|	Товары.ЕдиницаИзмерения.Код КАК ЕдиницаКод,
	|	ВЫРАЗИТЬ(Товары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ур_поступлениеЗерна.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Цена,
	|	Товары.Номенклатура.Наименование,
	|	Товары.Номенклатура.Код,
	|	Товары.ЕдиницаИзмерения.Код,
	|	Товары.ЕдиницаИзмерения.Представление,
	|	ВЫРАЗИТЬ(Товары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	|	Товары.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	ТоварНаименование
	|АВТОУПОРЯДОЧИВАНИЕ";
	ВыборкаСтрок = ЗапросПоТоварам.Выполнить().Выгрузить();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_З3";
	Макет       = ПолучитьОбщийМакет("З3");

	// Выводим шапку накладной
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеСклада = Шапка.Склад.Наименование;
	ОбластьМакета.Параметры.ОрганизацияПоОКПО = СтруктурнаяЕдиницаОрганизация.КодПоОКПО;
	ОбластьМакета.Параметры.ОрганизацияРНН = СтруктурнаяЕдиницаОрганизация.РНН;
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДокумента");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента), "полноеНаименование,");
	ОбластьМакета.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакета.Параметры.ВалютаПредставление = Шапка.ВалютаПредставление;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Количество  = 0;
	Сумма    	= 0;
		
	Для Каждого ВыборкаСтрокТовары Из ВыборкаСтрок Цикл

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		ТабДокумент.Вывести(ОбластьМакета);

		Сумма    = Сумма    + ВыборкаСтрокТовары.ВсегоСНДС;
		Количество = Количество + ВыборкаСтрокТовары.КоличествоПоДокументу;

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.ИтогВсегоСНДС = ОбщегоНазначения.ФорматСумм(Сумма);
	ОбластьМакета.Параметры.ИтогКоличествоПоДокументу = Количество;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	// заполняем МОЛ
	Если ЗначениеЗаполнено(Шапка.Склад) Тогда
		ДанныеМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Организация, Шапка.МОЛ, Дата);
		ОбластьМакета.Параметры.МОЛ = ДанныеМОЛ.Представление;
	КонецЕсли;	
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьЗ3()

#КонецЕсли

// Заполняет счета БУ в строке табличной части
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента)

	Если ЗаполнятьБУ = Истина Тогда

		Если ИмяТабЧасти = "Услуги" Тогда
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
				СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетЗатратБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
				СтрокаТЧ.СчетЗатратБУ = СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоСебестоимостиБУ", "СчетЗатратБУ", "СубконтоЗатратБУ");			
			КонецЕсли;	
		ИначеЕсли ИмяТабЧасти = "ОС" Тогда	
			СтрокаТЧ.СчетУчетаБУ  = СчетаУчета.СчетУчетаБУ;	
			СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
		Иначе
			Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
				СтрокаТЧ.СчетУчетаБУ  = СчетаУчета.СчетУчетаДавСырья;
				
			Иначе
				СтрокаТЧ.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
				
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
					СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;
		
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда

        Если ИмяТабЧасти = "Услуги" Тогда
			СтрокаТЧ.СчетЗатратБУ = ПланыСчетов.Типовой.ПустаяСсылка();
			Для СчетчикЦикла = 1 По 3 Цикл
				СтрокаТЧ["СубконтоЗатратБУ" + СчетчикЦикла] = Неопределено;
			КонецЦикла; 	
		Иначе
			СтрокаТЧ.СчетУчетаБУ  = ПланыСчетов.Типовой.ПустаяСсылка();
		КонецЕсли;

		СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Типовой.ПустаяСсылка();
                                      
	КонецЕсли; // Если ЗаполнятьБУ = Истина Тогда

КонецПроцедуры // ЗаполнитьСчетаБУ

// Заполняет счета НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ, МетаданныеДокумента)

	Если ЗаполнятьНУ  = Истина Тогда

		Если ИмяТабЧасти = "Товары" ИЛИ ИмяТабЧасти = "ОС" Тогда
			СтрокаТЧ.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;

		ИначеЕсли ИмяТабЧасти = "Услуги" Тогда
			СтрокаТЧ.СчетЗатратНУ = СчетаУчета.СчетСебестоимостиПриРеализацииНУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоСебестоимостиНУ", "СчетЗатратНУ", "СубконтоЗатратНУ");			
		КонецЕсли;

	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
       Если ИмяТабЧасти = "Товары" ИЛИ ИмяТабЧасти = "ОС" Тогда
			СтрокаТЧ.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();

		ИначеЕсли ИмяТабЧасти = "Услуги" Тогда
			СтрокаТЧ.СчетЗатратНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
			Для СчетчикЦикла = 1 По 3 Цикл
				СтрокаТЧ["СубконтоЗатратНУ" + СчетчикЦикла] = Неопределено;
			КонецЦикла; 	
		КонецЕсли;
		
	КонецЕсли; // Если ЗаполнятьНУ  = Истина Тогда

КонецПроцедуры // ЗаполнитьСчетаНУ()

// Заполняет счета расчетов по умолчанию, если это нужно
Процедура ЗаполнитьСчетаУчетаРасчетовРегл()

	СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;

	

КонецПроцедуры

// Функция заполнения шапки документа на основании документов реализация ТМЗ и передача ОС
// с видом операции передача структурному подразделению
//
Функция ЗаполнитьНаОснованииПередачиРеализации(Основание)
	
	Запрос = новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобственныеКонтрагенты.Организация
	|ИЗ
	|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	|ГДЕ 
	| 	СобственныеКонтрагенты.Контрагент = &КонтрагентОрганизации");
	
	Запрос.УстановитьПараметр("КонтрагентОрганизации", Основание.Контрагент);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		#Если Клиент Тогда
		Сообщить("Нет организации, соответсвтующей контрагенту документа-основания.", СтатусСообщения.Внимание);
		#КонецЕсли
		Возврат Ложь;
	КонецЕсли;
	
	ВыборкаРезультатов = Результат.Выбрать();
	ВыборкаРезультатов.Следующий();
	ОрганизацияДокумента = ВыборкаРезультатов.Организация;
	
	Запрос = новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобственныеКонтрагенты.Контрагент
	|ИЗ
	|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	|ГДЕ 
	| 	СобственныеКонтрагенты.Организация = &Организация");
	
	Запрос.УстановитьПараметр("Организация", Основание.Организация);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		ВыборкаРезультатов = Результат.Выбрать();
		ВыборкаРезультатов.Следующий();
		КонтрагентДокумента = ВыборкаРезультатов.Контрагент;
		
	Иначе
		
		КонтрагентДокумента = Справочники.Контрагенты.ПустаяСсылка();
		#Если Клиент Тогда
		Сообщить("Нет контрагента, соответсвтующего организации документа-основания, контрагент не будет заполнен.");
		#КонецЕсли
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание.Ссылка) Тогда
		ДокументОснование = Основание.Ссылка;
	КонецЕсли;
	
	Организация = ОрганизацияДокумента;		
	Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнойСклад");
	
	Если ЗначениеЗаполнено(КонтрагентДокумента) Тогда
		
		Контрагент = КонтрагентДокумента;
		
		ДоговорКонтрагентаДокумента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		
		Если ЗначениеЗаполнено(Основание.ДоговорКонтрагента) Тогда
			ПараметрВалюта = Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Иначе
			ПараметрВалюта = Основание.ВалютаДокумента
		КонецЕсли;
		
		ДоступныйОсновнойДоговорКонтрагента = ОбщегоНазначения.ДоступныйДоговорКонтрагента(Контрагент.ОсновнойДоговорКонтрагента);
		
		Если ЗначениеЗаполнено(ДоступныйОсновнойДоговорКонтрагента) Тогда
			Если (ДоступныйОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее) И
				 (ДоступныйОсновнойДоговорКонтрагента.Организация = Организация) И
				 (ДоступныйОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов = ПараметрВалюта) Тогда
				ДоговорКонтрагентаДокумента = ДоступныйОсновнойДоговорКонтрагента;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДоговорКонтрагентаДокумента) Тогда
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДоговорыКонтрагентов.Ссылка
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Владелец = &Владелец
			|	И ДоговорыКонтрагентов.Организация = &Организация
			|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
			|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора");
			
			Запрос.УстановитьПараметр("Владелец", Контрагент);
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.Прочее);
			
			Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ПараметрВалюта);
			
			Результат = Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда
				
				ВыборкаРезультатов = Результат.Выбрать();
				ВыборкаРезультатов.Следующий();
				ДоговорКонтрагента = ВыборкаРезультатов.Ссылка;
				
			Иначе
				
				#Если Клиент Тогда
				Сообщить("Нет договора с поставщиком, соответсвтующего контрагенту, организации и валюте. Будет создан новый договор.");
				#КонецЕсли
				ДоговорКонтрагентаДокумента = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
				ДоговорКонтрагентаДокумента.Владелец = Контрагент;
				ДоговорКонтрагентаДокумента.Наименование = "Основной (" + СокрЛП(Организация) + ", " + СокрЛП(ПараметрВалюта) + ")"; 
				ДоговорКонтрагентаДокумента.Организация = Организация;
				ДоговорКонтрагентаДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
				ДоговорКонтрагентаДокумента.ВалютаВзаиморасчетов = ПараметрВалюта;
				ДоговорКонтрагентаДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
				ДоговорКонтрагентаДокумента.Записать();
				
				ДоговорКонтрагента = ДоговорКонтрагентаДокумента.Ссылка;
					
				
			КонецЕсли;
			
		КонецЕсли;
			
		КурсВзаиморасчетов = Основание.КурсВзаиморасчетов;
		КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;
			
	КонецЕсли;
	
	ВалютаДокумента = Основание.ВалютаДокумента;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента.ТипЦен) Тогда
			ТипЦен = ДоговорКонтрагента.ТипЦен;
		КонецЕсли;
		
		СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		
		СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
		СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
		
	КонецЕсли;
	
		
	УчитыватьНДС = Основание.УчитыватьНДС;
	СуммаВключаетНДС = Основание.СуммаВключаетНДС;
	
	ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения;
	
	Возврат Истина;
	
КонецФункции

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Накладная" тогда
		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПоступлениеТоваров();
	ИначеЕсли ИмяМакета = "З3" тогда
		// Типовая форма форма З-3
		ТабДокумент = ПечатьЗ3();
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	СтруктураПечатныхФорм = Новый Структура;
	СтруктураПечатныхФорм.Вставить("З3","З-3 (приходный ордер)");
	СтруктураПечатныхФорм.Вставить("Накладная", "Приходная накладная");
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти) Экспорт
	
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекущийПользователь);		

Конецпроцедуры	

// Заполняет счета БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	Если ИмяТабЧасти = "ОС" Тогда
		СчетаУчета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаОС(Организация, СтрокаТЧ.ОсновноеСредство, Дата);
		
		Если СчетаУчета.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка() Тогда
			СчетаУчета.СчетУчетаБУ  = ПланыСчетов.Типовой.ОсновныеСредства;
		КонецЕсли;	

		Если СчетаУчета.СчетУчетаНДСПоПриобретению = ПланыСчетов.Типовой.ПустаяСсылка() Тогда
			СчетаУчета.СчетУчетаНДСПоПриобретению  = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
		КонецЕсли;	
		
	Иначе	
		СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	КонецЕсли;
	
	МетаданныеДокумента = ЭтотОбъект.Метаданные();
  	ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента);
	ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ, МетаданныеДокумента);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

Функция ПолучитьТекстСчетаФактурыПолученной(СчетФактура, ФлагВыделения = Ложь) Экспорт
    ДополнительныйТекст = "";
	Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
		Возврат "Ввести счет-фактуру";
	Иначе
		Если СчетФактура.ПометкаУдаления Тогда
			ДополнительныйТекст = " (помечен на удаление)";
			ФлагВыделения = Истина;
		Иначе
			Если НЕ СчетФактура.Проведен Тогда
				ДополнительныйТекст = " (не проведен)";
				ФлагВыделения = Истина;
			КонецЕсли;	
		КонецЕсли;				
		
		Если  НЕ ЗначениеЗаполнено(СчетФактура.НомерВходящегоДокумента) И НЕ ЗначениеЗаполнено(СчетФактура.ДатаВходящегоДокумента) Тогда
			Возврат Строка(СчетФактура) + ДополнительныйТекст;
		Иначе
		Текст = Строка(СчетФактура) + ?(НЕ ЗначениеЗаполнено(СчетФактура.НомерВходящегоДокумента), "" , " (№" + СчетФактура.НомерВходящегоДокумента)
		                            + ?(НЕ ЗначениеЗаполнено(СчетФактура.ДатаВходящегоДокумента), "" , " от " + Формат(СчетФактура.ДатаВходящегоДокумента,"ДФ=dd.MM.yyyy") + ")") + ДополнительныйТекст;		              		
		Возврат Текст;
	КонецЕсли;
КонецЕсли;

КонецФункции // УчетНДСИАкциза.ПолучитьТекстСчетаФактуры()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ)Экспорт 
	
	Для Каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Очищает ненужные строки табличных частей
//
Процедура ОчиститьНенужныеТабличныеЧасти() Экспорт
	
	
КонецПроцедуры // ОчиститьНенужныеТабличныеЧасти()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА


// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ЕстьКоэффициент = Ложь)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	Если ЕстьКоэффициент Тогда
		Для Каждого СтрокаТаблицы ИЗ ТаблицаТоваров Цикл
			Если (СтрокаТаблицы.Коэффициент<>0) Тогда
				СтрокаТаблицы.Количество = СтрокаТаблицы.Количество*СтрокаТаблицы.Коэффициент;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураОбязательныхПолей = Новый Структура("ВидОперации, Организация, Контрагент, ДоговорКонтрагента");

	Если Товары.Количество() > 0  Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;

	Если не ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
		Если СтруктураШапкиДокумента.УчитыватьКПН Тогда			
			СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");
		КонецЕсли;
		
	КонецЕсли;

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	
	//Если Не ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
	//	СтруктураОбязательныхПолей.Вставить("Сумма");
	//КонецЕсли;
	
	СтруктураОбязательныхПолей.Вставить("СчетУчетаБУ");
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия Тогда		
		Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
			Если НЕ СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету Тогда		
				СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
				СтруктураОбязательныхПолей.Вставить("НДСВидОборота");
				СтруктураОбязательныхПолей.Вставить("НДСВидПоступления");
			КонецЕсли;    	
			
			Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость И НЕ СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету  Тогда
				СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
			КонецЕсли;
		КонецЕсли;  		
			
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ");
		КонецЕсли;	
	КонецЕсли;                         	

	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьЗаполнениеТабличнойЧастиПострочно(СтруктураШапкиДокумента, Товары, "Товары", Отказ, Заголовок);
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Сумма");
    	
	Если СтруктураШапкиДокумента.УчитыватьНДС И НЕ СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету Тогда	
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
		СтруктураОбязательныхПолей.Вставить("НДСВидОборота");
		СтруктураОбязательныхПолей.Вставить("НДСВидПоступления");
	КонецЕсли;   

	Если СтруктураШапкиДокумента.УчитыватьНДС И НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость И НЕ СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету  Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
	КонецЕсли;

	СтруктураОбязательныхПолей.Вставить("СчетЗатратБУ");
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		СтруктураОбязательныхПолей.Вставить("СчетЗатратНУ");
	КонецЕсли;	

	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПострочно(СтруктураШапкиДокумента, Услуги, "Услуги", Отказ, Заголовок);
	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Проверяет правильность заполнения строк табличной части "ОС".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОС(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ОС";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство, Сумма");
	
	СтруктураОбязательныхПолей.Вставить("СчетУчетаБУ");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
		СтруктураОбязательныхПолей.Вставить("НДСВидОборота");
		СтруктураОбязательныхПолей.Вставить("НДСВидПоступления");
	КонецЕсли;   
	
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ");
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.ВедетсяАналитУчетОсПоПодразделениям Тогда
		СтруктураОбязательныхПолей.Вставить("ПодразделениеОрганизации");
	КонецЕсли;
	Если СтруктураШапкиДокумента.ВедетсяАналитУчетОсПоМОЛ Тогда
		СтруктураОбязательныхПолей.Вставить("МОЛОрганизации");
	КонецЕсли;

	
	// Теперь вызовем общую процедуру проверки.
	//ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураОбязательныхПолей, Отказ, Заголовок);
	//ПроверитьЗаполнениеТабличнойЧастиПострочно(СтруктураШапкиДокумента, ОС, "ОС", Отказ, Заголовок);
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения табличной части Прочее
// в специфических случаях
Процедура ПроверитьЗаполнениеТабличнойЧастиПострочно(СтруктураШапкиДокумента, ТаблицаДокумента, ИмяТабличнойЧасти, Отказ, Заголовок)
	// Цикл по строкам табличной части.
	
	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
    СтрокаНачалаСообщенияОбОшибке = "";
	
	Для каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
											""" табличной части """ + ИмяТабличнойЧасти +""": ";
				
		СтруктураОбязательныхПолей = Новый Структура;
		// проверка реквизитов НДС						
		Если СтруктураШапкиДокумента.УчитыватьНДС И ((СтрокаТаблицы.СтавкаНДС.Ставка <> 0) и (Не СтруктураШапкиДокумента.НДСВключенВСтоимость)) Тогда 
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
		КонецЕсли;				
		
		// Цикл проверки по списку реквизитов
		Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл			
			Значение = СтрокаТаблицы[КлючЗначение.Ключ];           			
			Если НЕ ЗначениеЗаполнено(Значение) Тогда // нужно ругаться
				
				// Проверка и вывод сообщений
				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //стандартное ругательство
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
					
				Иначе
					СтрокаСообщения = КлючЗначение.Значение;				
				КонецЕсли;                                  
				
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;                                  
		КонецЦикла;		
	КонецЦикла;         

КонецПроцедуры	

//Проверяем правильность заполнения реквизитов зерновой расписки
Процедура ПроверитьЗаполнениеЗерновыхРасписок(ТаблицаПоЗерновымРаспискам, Отказ, Заголовок)
	СтрокаНачалаСообщенияОбОшибке = "";
	Для каждого СтрокаЗР ИЗ ТаблицаПоЗерновымРаспискам Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаЗР.НомерСтроки) +
		""" Зерновая расписка """;
		
		если Не ЗначениеЗаполнено(СтрокаЗР.ВидРесурса) Тогда
			
			СтрокаСообщения = "Не заполнено значение реквизита вид ресурса !";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаЗР.ГодУрожая) Тогда
			
			СтрокаСообщения = "Не заполнено значение реквизита Год урожая !";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаЗР.Культура) Тогда
			
			СтрокаСообщения = "Не заполнено значение реквизита Вид культуры !";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаЗР.Класс) Тогда
			
			СтрокаСообщения = "Не заполнено значение реквизита класс культуры !";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоЗерновымРаспискам, Отказ, Заголовок);

	// Проводки по взаиморасчетам

	   ТаблицыДокумента = Новый Структура();
	   ТаблицыДокумента.Вставить("ТаблицаПоТоварам",	ТаблицаПоТоварам);
	   ТаблицыДокумента.Вставить("ТаблицаПоУслугам",	ТаблицаПоУслугам);
       // зачет авансов
	   ТаблицаАвансов = УправлениеВзаиморасчетами.ЗачетАванса(ЭтотОбъект,СтруктураШапкиДокумента,СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ,Заголовок,"АВ", мУчетнаяПолитикаПоБухгалтерскомуУчету);
	   
		ДвиженияРегистровПодсистемыУчетаРесурсов(СтруктураШапкиДокумента, ТаблицаПоЗерновымРаспискам, Отказ, Заголовок);
		
		Если Не ОтложитьПринятиеНДСКЗачету Тогда
			
			ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, Отказ, Заголовок);

		КонецЕсли;
	
	// Формирование проводок
	// Проводки по поступлению товаров, тары и услуг.
	
	ДатаДока   = Дата;
	ПроводкиБУ 					= Движения.Типовой;
	ПроводкиНУ 					= Движения.Налоговый;
	СписокСчетовПроизводства 	= Неопределено;
	
	// чтобы для каждой строки не выполнять запрос по стратегии списания для счета
	// добавим соответствие [Счет, СтратегияСписания]
	СтратегииСписания = Новый Соответствие;
	// Проводки по товарам
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период       = ДатаДока;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание   = "Поступление зерна";
		
		Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", 	 СтрокаТаблицы.Номенклатура,Истина, Заголовок);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       	 СтруктураШапкиДокумента.Склад);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии",  СтрокаТаблицы.ЗерноваяРасписка);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		Если Проводка.СчетДт.Валютный Тогда
			
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВал;
			
		КонецЕсли;
		
		//// если нет соответствия стратегии выбранному счету, добавим значение
		//Если СтратегииСписания.Получить(СтрокаТаблицы.СчетУчетаБУ) = Неопределено Тогда
		//	
		//	СтратегииСписания.Вставить(СтрокаТаблицы.СчетУчетаБУ,УправлениеЗапасами.ВедетсяПартионныйУчетДляСчета(СтрокаТаблицы.СчетУчетаБУ));
		//	
		//КонецЕсли;
		//
		//ВедетсяПартионныйУчетДляСчета = СтратегииСписания.Получить(СтрокаТаблицы.СчетУчетаБУ);
		//
		//
		//Если ВедетсяПартионныйУчетДляСчета Тогда
		//	
		//	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии", Ссылка,, Заголовок);
		//	
		//КонецЕсли;
		
		Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		
		Проводка.Сумма = СтрокаТаблицы.Сумма;
		
		Если СтрокаТаблицы.СчетУчетаБУ.Забалансовый И НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
			
			Проводка.Сумма = Проводка.Сумма + СтрокаТаблицы.НДС;
			
		КонецЕсли;
		
		// Проверка - вид Операции - комиссия
		Если СтрокаТаблицы.СчетУчетаБУ.Забалансовый Тогда			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);			
		Иначе
			
			Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ТипыОпераций",           СтруктураШапкиДокумента.ТипОперации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",           СтруктураШапкиДокумента.Ссылка);
			
			Если Проводка.СчетКт.Валютный Тогда
				
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;
				
			КонецЕсли;
			
		КонецЕсли;
	
		// Проводки по НДС
		Если  НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Импорт и
			  НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость И
			   	СтруктураШапкиДокумента.УчитыватьНДС И 			
				СтрокаТаблицы.НДС <> 0 Тогда
				
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = СтрокаТаблицы.НДС;
			
			Если  ОтложитьПринятиеНДСКЗачету Тогда
				Проводка.СчетДт       = ПланыСчетов.Типовой.НДСНачисленныйПриПокупке;
				Проводка.Содержание   = "Отложенное принятие НДС к зачету"; 
			Иначе
				Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаНДС;
				Проводка.Содержание   = "Выделен НДС";
			КонецЕсли;

			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			
			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ТипыОпераций",           СтруктураШапкиДокумента.ТипОперации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",           СтруктураШапкиДокумента.Ссылка);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				
				Проводка.ВалютаКт = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.НДСВал;
				
			КонецЕсли;
				
		КонецЕсли;
		
		
		// Налоговый учет
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда		
			// Проверка - вид Операции - комиссия
			// Поступление комиссионного товара не отражаем в НУ
			Если СтрокаТаблицы.СчетУчетаБУ.Забалансовый Тогда			
				Продолжить;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНУ) Тогда
				Проводка = ПроводкиНУ.Добавить();
				
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;	
				Проводка.Содержание   = "Оприходованы ТМЗ";
				
				Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура",СтрокаТаблицы.Номенклатура,Истина , Заголовок);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",	СтруктураШапкиДокумента.Склад);
				
				Проводка.КоличествоДт = СтрокаТаблицы.Количество;
				
				Проводка.СчетКт       = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				Проводка.Сумма = СтрокаТаблицы.Сумма;
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, СтруктураШапкиДокумента.ВидУчетаНУ);										
			КонецЕсли; 	
			
			// Проводки по НДС
			Если  НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Импорт и
				НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость И
				СтруктураШапкиДокумента.УчитыватьНДС И 			
				СтрокаТаблицы.НДС <> 0 Тогда
				
				ПроводкаНУ = ПроводкиНУ.Добавить();
				
				ПроводкаНУ.Период       = Дата;
				ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Сумма        = СтрокаТаблицы.НДС;
				
				Если  ОтложитьПринятиеНДСКЗачету Тогда
					ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКНачислениюНУ(ПланыСчетов.Типовой.НДСНачисленныйПриПокупке, Дата);					
					ПроводкаНУ.Содержание   = "Отложенное принятие НДС к зачету"; 
				Иначе
					ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКВозмещениюНУ(СтрокаТаблицы.СчетУчетаНДС, Дата);					
					ПроводкаНУ.Содержание   = "Выделен НДС";
				КонецЕсли;
	
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
				ПроводкаНУ.СчетКт       = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);						
				
			КонецЕсли;
			
		КонецЕсли;			
		
	
	КонецЦикла; // Проводки по товарам
	
	// Проводки по услугам - только при покупке.
		
		Для каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = СтрокаТаблицы.Содержание;
			Проводка.Сумма        = СтрокаТаблицы.Сумма;
			
			Проводка.СчетДт       = СтрокаТаблицы.СчетЗатратБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоЗатратБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоЗатратБУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоЗатратБУ3);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
			Если Проводка.СчетДт.Валютный Тогда
				
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВал;
				
			КонецЕсли;
			
			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",           СтруктураШапкиДокумента.Ссылка);
			
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;
				
			КонецЕсли;
			
			// Проводка по НДС
			Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма        = СтрокаТаблицы.НДС;
				
				Если  ОтложитьПринятиеНДСКЗачету Тогда
					Проводка.СчетДт       = ПланыСчетов.Типовой.НДСНачисленныйПриПокупке;
					Проводка.Содержание   = "Отложенное принятие НДС к зачету"; 
				Иначе
					Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаНДС;
					Проводка.Содержание   = "Выделен НДС";
				КонецЕсли; 
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
				Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",           СтруктураШапкиДокумента.Ссылка);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.НДСВал;
					
				КонецЕсли;
				
			КонецЕсли; // Проводка по НДС
			
			
			// Налоговый учет
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда		
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатратНУ) Тогда
					Проводка = ПроводкиНУ.Добавить();
					
					Проводка.Период       = ДатаДока;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;					
					
					Проводка.СчетДт      = СтрокаТаблицы.СчетЗатратНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,СтрокаТаблицы.СубконтоЗатратНУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,СтрокаТаблицы.СубконтоЗатратНУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,СтрокаТаблицы.СубконтоЗатратНУ3);            			
					
					Проводка.СчетКт       = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					Проводка.Сумма = СтрокаТаблицы.Сумма;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, ВидУчетаНУ);
					Проводка.Содержание   = "Прочие затраты";	
					
					
					ПроцедурыНалоговогоУчета.ОтразитьРасходыНаРемонтПроизводственныхОС(ПроводкиНУ,
										Новый Структура("СчетБУ, СубконтоБУ1, СубконтоБУ2,СубконтоБУ3",
										СтрокаТаблицы.СчетЗатратБУ, СтрокаТаблицы.СубконтоЗатратБУ1, СтрокаТаблицы.СубконтоЗатратБУ2, СтрокаТаблицы.СубконтоЗатратБУ3),
										Новый Структура("СчетНУ, СубконтоНУ1, СубконтоНУ2,СубконтоНУ3",
										СтрокаТаблицы.СчетЗатратНУ, СтрокаТаблицы.СубконтоЗатратНУ1, СтрокаТаблицы.СубконтоЗатратНУ2, СтрокаТаблицы.СубконтоЗатратНУ3),
										ДатаДока, СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение, ВидУчетаНУ, СтрокаТаблицы.Сумма, 0, Отказ, СписокСчетовПроизводства);
				КонецЕсли; 			
				
				// Проводки по НДС
				Если  НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость И
					СтруктураШапкиДокумента.УчитыватьНДС И 			
					СтрокаТаблицы.НДС <> 0 Тогда
					
					ПроводкаНУ = ПроводкиНУ.Добавить();
					
					ПроводкаНУ.Период       = Дата;
					ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
					ПроводкаНУ.Сумма        = СтрокаТаблицы.НДС;
					
					Если  ОтложитьПринятиеНДСКЗачету Тогда
						ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКНачислениюНУ(ПланыСчетов.Типовой.НДСНачисленныйПриПокупке, Дата);					
						ПроводкаНУ.Содержание   = "Отложенное принятие НДС к зачету"; 
					Иначе
						ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКВозмещениюНУ(СтрокаТаблицы.СчетУчетаНДС, Дата);					
						ПроводкаНУ.Содержание   = "Выделен НДС";
					КонецЕсли; 
					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
					
					ПроводкаНУ.СчетКт       = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);						
					
				КонецЕсли;					
			КонецЕсли;        			
		КонецЦикла;
		
	// -учет договоров- начало
	//Движение 					= Движения.СобытияПоДоговорам.Добавить();
	//Движение.Организация 		= Организация;
	//Движение.ДоговорКонтрагента = ДоговорКонтрагента;
	//Движение.Период 			= Дата;
	//Движение.Событие 			= Справочники.СобытияПоДоговору.Покупка;
	// -учет договоров- конец
	
	
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		ПроцедурыБухгалтерскогоУчета.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли; // Учет курсовых разниц

КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по регистрам подсистемы учета НДС "НДСКВозмещению"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, Отказ, Заголовок)
	
	Если Не ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Импорт Тогда
		// Движения по НДС не формируются
		// Они должны быть сделаны документом "ГТД Импорт"
		Возврат;
	КонецЕсли;	
	
	Если НЕ СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	// Работа со структурными подразделениями
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПлательщикНДС 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
																	СтруктураШапкиДокумента.Организация,
																	глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	Перечисления.РазделыНалоговогоУчета.НДС);
	Иначе
		ПлательщикНДС 	= СтруктураШапкиДокумента.Организация;															
	КонецЕсли;																
	
	СтруктураШапкиДокумента.Вставить("ПлательщикНДС", ПлательщикНДС);
	
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл		
		ИдТабЧасти = ТаблицаДокумента.Ключ;
		ТабЧасть   = ТаблицаДокумента.Значение;          		
		Если ТабЧасть.Количество()> 0 Тогда              			
			УчетНДСИАкциза.СформироватьДвиженияПоРегиструНДСКВозмещению(СтруктураШапкиДокумента, ТабЧасть, Движения, Отказ);			
		КонецЕсли; 
	КонецЦикла;	
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ДвиженияРегистровСведенийПоСтроке(СтрокаТаблицы,СтруктураШапкиДокумента, КонтрагентОрганизации)
	
		// Движения по регистру "Индоссаменты зерновой расписки"
		Движение = Движения.ур_ИндоссаментыЗерновыхРасписок.Добавить();
		// Свойства
		Движение.Период           = СтруктураШапкиДокумента.Дата;
		// Измерения
		Движение.ЗерноваяРасписка = СтрокаТаблицы.ЗерноваяРасписка.Ссылка;

		// Ресурсы
		Движение.Индоссат         = СтруктураШапкиДокумента.Контрагент;
		Движение.Индоссант        = КонтрагентОрганизации;

		//Движения по регистру сведений "Статусы зерновых расписок
		//
		Движение = Движения.ур_СтатусыЗерновыхРасписок.Добавить();
		// Свойства
		Движение.Период           = СтруктураШапкиДокумента.Дата;
		// Измерения
		Движение.ЗерноваяРасписка = СтрокаТаблицы.ЗерноваяРасписка.Ссылка;

		// Ресурсы
		Движение.Статус         = Перечисления.ур_СтатусыЗерновойРасписки.Действующая;

КонецПроцедуры

Процедура ДвиженияРегистровСведенийПодсистемыУчетаРесурсов(ТаблицаПоЗерновымРаспискам,СтруктураШапкиДокумента)
	
	НаборЗаписей = РегистрыСведений.СобственныеКонтрагенты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Значение = СтруктураШапкиДокумента.организация;
	НаборЗаписей.Отбор.Организация.Использование = Истина;
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		КонтрагентОрганизации = НаборЗаписей[0].Контрагент;
	Иначе 
		КонтрагентОрганизации = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	СвернутаяТаблицаПоЗерновымРаспискам = ТаблицаПоЗерновымРаспискам.Скопировать(,"ЗерноваяРасписка,ЗачтенныйВес");
	
	СвернутаяТаблицаПоЗерновымРаспискам.Свернуть("ЗерноваяРасписка","ЗачтенныйВес");
	
	Для каждого СтрокаТаблицы ИЗ СвернутаяТаблицаПоЗерновымРаспискам Цикл
		ДвиженияРегистровСведенийПоСтроке(СтрокаТаблицы,СтруктураШапкиДокумента, КонтрагентОрганизации);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы ИЗ ТаблицаПоЗерновымРаспискам Цикл
		
		 //Движение по оборотному регистру "Движения зерна"
		Движение = Движения.ур_ДвиженияЗерна.Добавить();
		
		Движение.Период 				 = СтруктураШапкиДокумента.Дата;
		Движение.Организация 			 = СтруктураШапкиДокумента.Организация;
		Движение.Склад 	  				 = СтруктураШапкиДокумента.Склад;
		Движение.ТипОперации			 = СтруктураШапкиДокумента.ТипОперации;
		Движение.Контрагент 			 = СтруктураШапкиДокумента.Контрагент;
		Движение.ДоговорКонтрагента 	 = СтруктураШапкиДокумента.ДоговорКонтрагента;
		Движение.Видресурса				 = СтрокаТаблицы.Видресурса;
		Движение.РегламентныйВидОперации = Перечисления.ур_РегламентныеОперацииДвиженияЗерна.Приход;
		Движение.Зерноваярасписка		 = СтрокаТаблицы.Зерноваярасписка;
		Движение.ЗачтенныйВес  			 = СтрокаТаблицы.ЗачтенныйВес;
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета ресурсов "ЗерноНаСкладах"
Процедура ДвиженияРегистровПодсистемыУчетаРесурсов(СтруктураШапкиДокумента, ТаблицаПоЗерновымРаспискам, Отказ, Заголовок)
	
	ДвиженияРегистровСведенийПодсистемыУчетаРесурсов(ТаблицаПоЗерновымРаспискам, СтруктураШапкиДокумента);
	
	НаборДвижений = Движения.ур_ЗерноНаСкладах;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// Заполним таблицу движений.
	ТаблицаПоЗерновымРаспискамПолученным = ТаблицаПоЗерновымРаспискам.Скопировать();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоЗерновымРаспискамПолученным, ТаблицаДвижений);
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(ТипОперации,"ТипОперации");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.ур_ЗерноНаСкладах.ВыполнитьПриход();
	КонецЕсли;
	
КонецПроцедуры


// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ" , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ" , "СчетУчетаНУ");
	
	Если (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия) 
		 Или (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения) Тогда
		СтруктураПолей.Вставить("СчетУчетаНДС", "СчетУчетаНДС");
	КонецЕсли;
	
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетЗатратБУ", "СчетЗатратБУ" );
	СтруктураПолей.Вставить("СчетУчетаНДС", "СчетУчетаНДС");
	
	СтруктураПолей.Вставить("СубконтоЗатратБУ1",    "СубконтоЗатратБУ1");
	СтруктураПолей.Вставить("СубконтоЗатратБУ2",    "СубконтоЗатратБУ2");
	СтруктураПолей.Вставить("СубконтоЗатратБУ3",    "СубконтоЗатратБУ3");
	
	СтруктураПолей.Вставить("СчетЗатратНУ",   "СчетЗатратНУ" );
	СтруктураПолей.Вставить("СубконтоЗатратНУ1",    "СубконтоЗатратНУ1");
	СтруктураПолей.Вставить("СубконтоЗатратНУ2",    "СубконтоЗатратНУ2");
	СтруктураПолей.Вставить("СубконтоЗатратНУ3",    "СубконтоЗатратНУ3");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
// 
Процедура ОбработкаЗаполнения(Основание)
	
	ЗаполнитьПоДокументуОснования(Основание);
	
КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//процедура в зависимоти от вида операции очищает неиспользуемые табличные
	//части
	ОчиститьНенужныеТабличныеЧасти();

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	
	УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект,"СчетФактураПолученный");

КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	
	СтруктураШапкиДокумента.Вставить("ВедетсяАналитУчетОсПоПодразделениям", УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоПодразделениям(Дата));
	СтруктураШапкиДокумента.Вставить("ВедетсяАналитУчетОсПоМОЛ", 			УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоМОЛ(Дата));
		           
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"          , "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"          , "ВидДоговора");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, );

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
    // Получим необходимые данные для проведения и проверки заполенения данные по табличной части "ОсновныеСредства".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура",		"ОсновноеСредство");	
	СтруктураПолей.Вставить("Сумма"       , 	"Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"   , 	"СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         ,		"СуммаНДС");
	СтруктураПолей.Вставить("НДСВидОборота", 	"НДСВидОборота");
	СтруктураПолей.Вставить("НДСВидПоступления","НДСВидПоступления");	
	
	СтруктураПолей.Вставить("ПодразделениеОрганизации", 	"ПодразделениеОрганизации");
	СтруктураПолей.Вставить("МОЛОрганизации",				"МОЛОрганизации");	
	
	// Дополним полями, нужными для регл.
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", 	"Номенклатура");
	СтруктураПолей.Вставить("ЗерноваяРасписка"  , 	"ЗерноваяРасписка");
	СтруктураПолей.Вставить("Количество"  , 	"Количество");
	СтруктураПолей.Вставить("Коэффициент"  , 	"Коэффициент");
	СтруктураПолей.Вставить("Сумма"       , 	"Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"   , 	"СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         ,		"СуммаНДС");
	СтруктураПолей.Вставить("НДСВидОборота", 	"НДСВидОборота");
	СтруктураПолей.Вставить("НДСВидПоступления","НДСВидПоступления");
	СтруктураПолей.Вставить("Услуга"      , 	"Номенклатура.Услуга");

	// Дополним полями, нужными для регл.
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей);
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("Сумма"       , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"   , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         , "СуммаНДС");
	СтруктураПолей.Вставить("НДСВидОборота", 	"НДСВидОборота");
	СтруктураПолей.Вставить("НДСВидПоступления","НДСВидПоступления");
	СтруктураПолей.Вставить("Содержание"  , "Содержание");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");  	

	// Дополним полями
	ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей);
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);
	
	
	// Подготовим таблицы товаров, услуг, ОС для проведения.
	ТаблицаПоТоварам    = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, Истина);
	
	ТаблицаПоУслугам    = ПодготовитьТаблицуТоваров(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	
 	ТаблицаПоЗерновымРаспискам    = УправлениеРесурсами.ПодготовитьТаблицуЗерновыхРасписок(ЭтотОбъект);

	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеЗерновыхРасписок(ТаблицаПоЗерновымРаспискам, Отказ, Заголовок);
	
	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента,СтруктураШапкиДокумента.ДоговорКонтрагента,Отказ, Заголовок);
    	
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, 	СтруктураШапкиДокумента,	СтруктураШапкиДокумента.НДСВключенВСтоимость,	мВалютаРегламентированногоУчета);
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, 	СтруктураШапкиДокумента,	СтруктураШапкиДокумента.НДСВключенВСтоимость,	мВалютаРегламентированногоУчета);

	Если Дата <> КонецДня(Дата) Тогда
		Дата = КонецДня(Дата);
	КонецЕсли;
	
		
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоЗерновымРаспискам, Отказ, Заголовок);
							
		УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Истина, "СчетФактураПолученный");					
		
			Если Не Отказ Тогда			
				ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
			КонецЕсли;							
			
	КонецЕсли;	
	          
КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	Если  НЕ Отказ Тогда
		УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Ложь, "СчетФактураПолученный");
	КонецЕсли;	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Истина;
//мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
ВводНаОснованииРеализацииТМЗПередачиОС = Ложь;