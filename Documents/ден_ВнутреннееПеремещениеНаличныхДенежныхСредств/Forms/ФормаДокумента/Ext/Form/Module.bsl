
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриСозданииНаСервере(ЭтотОбъект);
	
	
	ПодготовитьФормуНаСервере();
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриЧтенииНаСервере(ЭтотОбъект,ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ОбщегоНазначенияКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияОтправительПриИзменении(Элемент)
	
	Результат = общ_РаботаСоСтруктурнымиПодразделениями.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизацияОтправитель, Объект.ОрганизацияОтправитель, Объект.СтруктурноеПодразделениеОтправитель);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		СтруктурноеПодразделениеОрганизацияОтправительПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияОтправитель) Тогда 
		Объект.СтруктурноеПодразделениеОтправитель     = Неопределено;
        СтруктурноеПодразделениеОрганизацияОтправитель = Объект.ОрганизацияОтправитель;
	Иначе 
		Объект.СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделениеОрганизацияОтправитель;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.ОрганизацияОтправитель, Объект.СтруктурноеПодразделениеОтправитель, Истина, "ПослеВыбораСтруктурногоПодразделенияОтправителя");

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательПриИзменении(Элемент)
	
	Результат = общ_РаботаСоСтруктурнымиПодразделениями.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизацияПолучатель, Объект.ОрганизацияПолучатель, Объект.СтруктурноеПодразделениеПолучатель);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		СтруктурноеПодразделениеОрганизацияПолучательПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияПолучатель) Тогда 
		Объект.СтруктурноеПодразделениеПолучатель     = Неопределено;
		СтруктурноеПодразделениеОрганизацияПолучатель = Объект.ОрганизацияПолучатель;
	Иначе 
		Объект.СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделениеОрганизацияПолучатель;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.ОрганизацияПолучатель, Объект.СтруктурноеПодразделениеПолучатель, Истина, "ПослеВыбораСтруктурногоПодразделенияПолучателя");

КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	ОтражатьВБухгалтерскомУчетеПриИзмененииНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	Если ТекущаяКассаОтправитель = Объект.Касса Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущаяКассаОтправитель = Объект.Касса; 
	
	КассаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКассаОтправительПриИзменении(Элемент)
	
	СчетКассаОтправительПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПолучательПриИзменении(Элемент)
	
	Если ТекущаяКассаПолучатель = Объект.КассаПолучатель Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущаяКассаПолучатель = Объект.КассаПолучатель; 
	
	КассаПолучательПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СчетКассаПолучательПриИзменении(Элемент)
	
	СчетКассаПолучательПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда) Экспорт
	
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда) Экспорт
	
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// Управление формой

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента 			= Объект.Дата;
	ТекущаяОрганизацияОтправитель 	= Объект.ОрганизацияОтправитель;
	ТекущаяОрганизацияПолучатель 	= Объект.ОрганизацияПолучатель;
	ТекущаяКассаОтправитель			= Объект.Касса;
	ТекущаяКассаПолучатель			= Объект.КассаПолучатель;
	
	ВалютаРегламентированногоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
	
	ОткрыватьНастройкуДвижений = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(, "ПоказыватьДвиженияПриПроведении");
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПоддержкаРаботыСоСтруктурнымиПодразделениями Или
		 (ПоддержкаРаботыСоСтруктурнымиПодразделениями = Ложь И (ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) 
		 Или ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель)));
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьВидимостьСтруктурногоПодразделения(Объект.ОрганизацияОтправитель, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизацияОтправитель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияОтправитель, Объект.СтруктурноеПодразделениеОтправитель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьВидимостьСтруктурногоПодразделения(Объект.ОрганизацияПолучатель, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизацияПолучатель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияПолучатель, Объект.СтруктурноеПодразделениеПолучатель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	усд_УправлениеСогласованиемДокументов.ДоступностьРедактированияДокумента(ЭтотОбъект,Объект);

	СтруктураКурсаДокумента = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	КурсДокумента      		= СтруктураКурсаДокумента.Курс;
	КратностьДокумента 		= СтруктураКурсаДокумента.Кратность;
	
	ЗаполнитьСчетаКассыОтправитель();
	ЗаполнитьСчетаКассыПолучатель();
	
	Элементы.НадписьВалютаДокумент.Заголовок = Строка(Объект.ВалютаДокумента);
	
	оф_ИсточникЗаголовок 				= "Отправитель";
	оф_ПриемникЗаголовок 				= "Получатель";
	оф_ПеремещаемыеСредстваЗаголовок 	= "Перемещаемые средства";

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
КонецПроцедуры

// При изменении реквизитов (на сервере)

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияОтправительПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
		И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизацияОтправитель, Объект.ОрганизацияОтправитель, Объект.СтруктурноеПодразделениеОтправитель, СтруктураПараметров);
	КонецЕсли;
	
	ТекущаяОрганизацияОтправитель = Объект.ОрганизацияОтправитель;
		
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения, "Отправитель");
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПолучательПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
		И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизацияПолучатель, Объект.ОрганизацияПолучатель, Объект.СтруктурноеПодразделениеПолучатель, СтруктураПараметров);
	КонецЕсли;
	
	ТекущаяОрганизацияПолучатель = Объект.ОрганизацияПолучатель;

	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения, "Получатель");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения, ОтправительПолучатель = "Отправитель") Экспорт

	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизитаОрганизация = Новый Соответствие;
	ИмяРеквизитаОрганизация.Вставить("Отправитель", "ОрганизацияОтправитель");
	ИмяРеквизитаОрганизация.Вставить("Получатель", "ОрганизацияПолучатель");
	
	ИмяРеквизитаСП = Новый Соответствие;
	ИмяРеквизитаСП.Вставить("Отправитель", "СтруктурноеПодразделениеОтправитель");
	ИмяРеквизитаСП.Вставить("Получатель", "СтруктурноеПодразделениеПолучатель");
	
	ИмяРеквизитаКасса = Новый Соответствие;
	ИмяРеквизитаКасса.Вставить("Отправитель", "Касса");
	ИмяРеквизитаКасса.Вставить("Получатель", "КассаПолучатель");
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	
	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОрганизация.Получить(ОтправительПолучатель)]) Тогда
		Если ЗначениеЗаполнено(Объект[ИмяРеквизитаСП.Получить(ОтправительПолучатель)]) Тогда
			Объект[ИмяРеквизитаКасса.Получить(ОтправительПолучатель)] = Объект[ИмяРеквизитаСП.Получить(ОтправительПолучатель)].ОсновнаяКасса;
		Иначе
			Объект[ИмяРеквизитаКасса.Получить(ОтправительПолучатель)] = Объект[ИмяРеквизитаОрганизация.Получить(ОтправительПолучатель)].ОсновнаяКасса;
		КонецЕсли;	
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОтражатьВБухгалтерскомУчетеПриИзмененииНаСервере()
	
	Если Объект.ОтражатьВБухгалтерскомУчете Тогда
		Документы.ден_ВнутреннееПеремещениеНаличныхДенежныхСредств.ЗаполнитьСчетаУчетаКассыОтправительРегл(Объект);
		Документы.ден_ВнутреннееПеремещениеНаличныхДенежныхСредств.ЗаполнитьСчетаУчетаКассыПолучательРегл(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КассаПриИзмененииНаСервере()
	
	ВалютаКасса = ПолучитьВалютуДС(Объект.Касса);
	
    Если НЕ Объект.КассаПолучатель.Пустая() И НЕ ВалютаКасса = ПолучитьВалютуДС(Объект.КассаПолучатель) Тогда
        ТекстСообщения = Нстр("ru = 'Разные валюты кассы - плательщика и кассы - получателя.'");
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
        Объект.Касса = Справочники.Кассы.ПустаяСсылка();
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(Объект.ОрганизацияОтправитель) Тогда
        Объект.ОрганизацияОтправитель = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Касса, "Владелец");
    КонецЕсли;
    
    Переменные = Неопределено;
    ПолучитьКурсИКратность(Переменные);
    ден_ПроцедурыКазначейства.ПриИзмененииЗначенияКассыБанковскогоСчета(Объект.ВалютаДокумента, 
															   Переменные.КурсДокумента, 
															   Переменные.КратностьДокумента, 
															   Объект.Дата, 
															   Объект.СуммаДокумента, 
															   ВалютаКасса);
															   
    Элементы.НадписьВалютаДокумент.Заголовок = Строка(Объект.ВалютаДокумента);

КонецПроцедуры

&НаСервере
Процедура КассаПолучательПриИзмененииНаСервере()
	
    Если НЕ Объект.Касса.Пустая() И НЕ ПолучитьВалютуДС(Объект.Касса) = ПолучитьВалютуДС(Объект.КассаПолучатель) Тогда
        Сообщить("Разные валюты кассы - плательщика и кассы - получателя.");
        Объект.КассаПолучатель = Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
	
    Если НЕ ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
        Объект.ОрганизацияПолучатель = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.КассаПолучатель, "Владелец");
    КонецЕсли;
    
    Если Объект.ОтражатьВБухгалтерскомУчете Тогда
        Документы.ден_ВнутреннееПеремещениеНаличныхДенежныхСредств.ЗаполнитьСчетаУчетаКассыПолучательРегл(Объект);
        СчетКассаПолучательПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СчетКассаОтправительПриИзмененииНаСервере()
	
	Если Элементы.СчетКассаОтправитель.СписокВыбора.НайтиПоЗначению(Объект.СчетКассаОтправитель) = Неопределено Тогда
		ТекстСообщения = "Счет " + Объект.СчетКассаОтправитель + " не используется при учете наличных денежных средств.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СчетКассаОтправитель", "Объект");
		Объект.СчетКассаОтправитель = "";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СчетКассаПолучательПриИзмененииНаСервере()
	
	Если Элементы.СчетКассаПолучатель.СписокВыбора.НайтиПоЗначению(Объект.СчетКассаПолучатель) = Неопределено Тогда
		ТекстСообщения = "Счет " + Объект.СчетКассаПолучатель + " не используется при учете наличных денежных средств."; 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СчетКассаПолучатель", "Объект");
		Объект.СчетКассаПолучатель = "";
		Возврат;
	КонецЕсли;

КонецПроцедуры

// Обработчики, вызываемые после окончания интерактивных действий пользователя

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделенияОтправителя(Результат, Параметры) Экспорт
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.ОрганизацияОтправитель, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизацияОтправитель);
	
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда 
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияОтправительПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделенияПолучателя(Результат, Параметры) Экспорт
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.ОрганизацияПолучатель, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизацияПолучатель);
	
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда 
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПолучательПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;

КонецПроцедуры

// Служебные процедуры и функции

// Заполняет список счетов для выбора реквизита "СчетКассаОтправитель"
// 
&НаСервере
Процедура ЗаполнитьСчетаКассыОтправитель()
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ДенежныеСредстваВКассе"));
	Значения = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСписокВыбораСчетов(МассивОтбора);
	Элементы.СчетКассаОтправитель.СписокВыбора.ЗагрузитьЗначения(Значения.ВыгрузитьЗначения());	

КонецПроцедуры	// ЗаполнитьСчетаКассыОтправитель

// Заполняет список счетов для выбора реквизита "СчетКассаПолучатель"
// 
&НаСервере
Процедура ЗаполнитьСчетаКассыПолучатель()
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ДенежныеСредстваВКассе"));
	Значения = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСписокВыбораСчетов(МассивОтбора);
	Элементы.СчетКассаПолучатель.СписокВыбора.ЗагрузитьЗначения(Значения.ВыгрузитьЗначения());
 
КонецПроцедуры // ЗаполнитьСчетаКассыПолучатель

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияОтправительПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияОтправительПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
		
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПолучательПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВалютуДС(Значение)
	
	Возврат фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Значение, "ВалютаДенежныхСредств");
	
КонецФункции

// Процедура вызывается при изменении кассы организации
//
&НаСервере
Функция ПолучитьКурсИКратность(Переменные)
	
	Переменные = Новый Структура;
	Переменные.Вставить("КурсДокумента", КурсДокумента);
	Переменные.Вставить("КратностьДокумента", КратностьДокумента);
	
	Если Объект.ОтражатьВБухгалтерскомУчете Тогда
		Документы.ден_ВнутреннееПеремещениеНаличныхДенежныхСредств.ЗаполнитьСчетаУчетаКассыОтправительРегл(Объект);
		СчетКассаОтправительПриИзмененииНаСервере();
	КонецЕсли;
	
КонецФункции
