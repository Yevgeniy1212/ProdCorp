#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Заполняет счета учета БУ в документе
//
Процедура ЗаполнитьСчетаУчетаКассыОтправительРегл(Объект) Экспорт
	
	Касса = Объект.Касса;
	СчетКассаОтправитель = Объект.СчетКассаОтправитель;
	
	Если НЕ Касса.Пустая() Тогда
		СчетУчетаКассыОтправитель = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(Касса, СчетКассаОтправитель.Пустая()).СчетУчетаБУ;
		Если ЗначениеЗаполнено(СчетУчетаКассыОтправитель) Тогда
			Объект.СчетКассаОтправитель = СчетУчетаКассыОтправитель;
		КонецЕсли;	
	КонецЕсли; 	
	
КонецПроцедуры // ЗаполнитьСчетаУчетаРегл()

// Заполняет счета учета БУ в документе
//
Процедура ЗаполнитьСчетаУчетаКассыПолучательРегл(Объект) Экспорт
	
	КассаПолучатель = Объект.КассаПолучатель;
	СчетКассаПолучатель = Объект.СчетКассаПолучатель;
	
	Если НЕ КассаПолучатель.Пустая() Тогда
		СчетУчетаКассыПолучатель = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(КассаПолучатель, СчетКассаПолучатель.Пустая()).СчетУчетаБУ;
		Если ЗначениеЗаполнено(СчетУчетаКассыПолучатель) Тогда
			Объект.СчетКассаПолучатель= СчетУчетаКассыПолучатель;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаУчетаРегл()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт 
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты[0]);
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.ВерсияДанных КАК ВерсияДанных,
	|	Реквизиты.ПометкаУдаления КАК ПометкаУдаления,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Проведен КАК Проведен,
	|	Реквизиты.Автор КАК Автор,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Касса КАК Касса,
	|	Реквизиты.КассаПолучатель КАК КассаПолучатель,
	|	Реквизиты.Комментарий КАК Комментарий,
	|	Реквизиты.Оплачено КАК Оплачено,
	|	Реквизиты.ОрганизацияОтправитель КАК ОрганизацияОтправитель,
	|	Реквизиты.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	Реквизиты.Ответственный КАК Ответственный,
	|	Реквизиты.ОтражатьВБухгалтерскомУчете КАК ОтражатьВБухгалтерскомУчете,
	|	Реквизиты.ОтражатьВУправленческомУчете КАК ОтражатьВУправленческомУчете,
	|	Реквизиты.РучнаяКорректировка КАК РучнаяКорректировка,
	|	Реквизиты.СтатьяДвиженияДенежныхСредствОтправитель КАК СтатьяДвиженияДенежныхСредствОтправитель,
	|	Реквизиты.СтатьяДвиженияДенежныхСредствПолучатель КАК СтатьяДвиженияДенежныхСредствПолучатель,
	|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделениеПолучатель,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	Реквизиты.СчетКассаОтправитель КАК СчетКассаОтправитель,
	|	Реквизиты.СчетКассаПолучатель КАК СчетКассаПолучатель,
	|	Реквизиты.ЦФООтправитель КАК ЦФООтправитель,
	|	Реквизиты.ЦФОПолучатель КАК ЦФОПолучатель
	|ИЗ
	|	Документ.ден_ВнутреннееПеремещениеНаличныхДенежныхСредств КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + фин_УправлениеПроведениемДокументовСервер.ТекстРазделителяЗапросовПакета();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Расходный кассовый ордер
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РасходныйКассовыйОрдер";
	КомандаПечати.Представление = НСтр("ru = 'Расходный кассовый ордер'");
	КомандаПечати.Порядок = 50;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасходныйКассовыйОрдер") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"РасходныйКассовыйОрдер",
			НСтр("ru = 'Расходный кассовый ордер'"),
			ПечатьРКО(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ден_ВнутреннееПеремещениеНаличныхДенежныхСредств.ПФ_MXL_КО2");
	КонецЕсли;
		
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

Функция ПечатьРКО(МассивОбъектов, ОбъектыПечати) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнутреннееПеремещениеНаличныхДенежныхСредств.Ссылка,
	|	ВнутреннееПеремещениеНаличныхДенежныхСредств.Номер,
	|	ВнутреннееПеремещениеНаличныхДенежныхСредств.Дата КАК ДатаДокумента,
	|	ВнутреннееПеремещениеНаличныхДенежныхСредств.ОрганизацияОтправитель КАК Организация,
	|	ВнутреннееПеремещениеНаличныхДенежныхСредств.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделение,
	|	ВнутреннееПеремещениеНаличныхДенежныхСредств.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделениеПолучатель,
	|	ВнутреннееПеремещениеНаличныхДенежныхСредств.ОрганизацияОтправитель КАК ЮрФизЛицо,
	|	ВнутреннееПеремещениеНаличныхДенежныхСредств.ОрганизацияОтправитель КАК Руководители,
	|	ВнутреннееПеремещениеНаличныхДенежныхСредств.СуммаДокумента КАК Сумма,
	|	ВнутреннееПеремещениеНаличныхДенежныхСредств.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	ВнутреннееПеремещениеНаличныхДенежныхСредств.ВалютаДокумента КАК Валюта,
	|	ВнутреннееПеремещениеНаличныхДенежныхСредств.ВалютаДокумента.Представление КАК ВалютаПредставление,
	|	ВнутреннееПеремещениеНаличныхДенежныхСредств.Касса КАК Касса,
	|	ВнутреннееПеремещениеНаличныхДенежныхСредств.КассаПолучатель КАК КассаПолучатель
	|ПОМЕСТИТЬ ВТ_ДанныеДокумента
	|ИЗ
	|	Документ.ден_ВнутреннееПеремещениеНаличныхДенежныхСредств КАК ВнутреннееПеремещениеНаличныхДенежныхСредств
	|ГДЕ
	|	ВнутреннееПеремещениеНаличныхДенежныхСредств.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	|	ОтветственныеЛица.СтруктурнаяЕдиница КАК Касса,
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.ДатаДокумента
	|ПОМЕСТИТЬ ВТ_ПериодыОтвЛица
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеДокумента КАК ДанныеДокумента
	|		ПО ОтветственныеЛица.СтруктурнаяЕдиница = ДанныеДокумента.Касса
	|			И ОтветственныеЛица.Период <= ДанныеДокумента.ДатаДокумента
	|			И (ОтветственныеЛица.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир))
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница,
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.ДатаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыОтвЛица.Ссылка КАК Ссылка,
	|	ПериодыОтвЛица.Касса,
	|	ОтветственныеЛица.ФизическоеЛицо,
	|	МАКСИМУМ(ФИОФизЛиц.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_ПериодыФИО
	|ИЗ
	|	ВТ_ПериодыОтвЛица КАК ПериодыОтвЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛица
	|		ПО ПериодыОтвЛица.Период = ОтветственныеЛица.Период
	|			И ПериодыОтвЛица.Касса = ОтветственныеЛица.СтруктурнаяЕдиница
	|			И (ОтветственныеЛица.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|		ПО (ОтветственныеЛица.ФизическоеЛицо = ФИОФизЛиц.ФизЛицо)
	|			И (ФИОФизЛиц.Период <= ПериодыОтвЛица.ДатаДокумента)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыОтвЛица.Ссылка,
	|	ПериодыОтвЛица.Касса,
	|	ОтветственныеЛица.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыФИО.Ссылка,
	|	ПериодыФИО.Касса,
	|	ОтветственныеЛицаФИОФизЛиц.ФизЛицо КАК ФизическоеЛицо,
	|	ОтветственныеЛицаФИОФизЛиц.Фамилия + ВЫБОР
	|		КОГДА ПОДСТРОКА(ОтветственныеЛицаФИОФизЛиц.Имя, 1, 1) <> """"
	|			ТОГДА "" "" + ПОДСТРОКА(ОтветственныеЛицаФИОФизЛиц.Имя, 1, 1) + "".""
	|		ИНАЧЕ """"
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ПОДСТРОКА(ОтветственныеЛицаФИОФизЛиц.Отчество, 1, 1) <> """"
	|			ТОГДА "" "" + ПОДСТРОКА(ОтветственныеЛицаФИОФизЛиц.Отчество, 1, 1) + "".""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Кассир
	|ПОМЕСТИТЬ ВТ_ОтвЛицаФИО
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц КАК ОтветственныеЛицаФИОФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыФИО КАК ПериодыФИО
	|		ПО ОтветственныеЛицаФИОФизЛиц.ФизЛицо = ПериодыФИО.ФизическоеЛицо
	|			И ОтветственныеЛицаФИОФизЛиц.Период = ПериодыФИО.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеДокумента.Ссылка,
	|	ВТ_ДанныеДокумента.Номер,
	|	ВТ_ДанныеДокумента.ДатаДокумента,
	|	ВТ_ДанныеДокумента.Организация,
	|	ВТ_ДанныеДокумента.СтруктурноеПодразделение,
	|	ВТ_ДанныеДокумента.СтруктурноеПодразделениеПолучатель,
	|	ВТ_ДанныеДокумента.ЮрФизЛицо,
	|	ВТ_ДанныеДокумента.Руководители,
	|	ВТ_ДанныеДокумента.Сумма,
	|	ВТ_ДанныеДокумента.ОрганизацияПолучатель,
	|	ВТ_ДанныеДокумента.Валюта,
	|	ВТ_ДанныеДокумента.ВалютаПредставление,
	|	ВТ_ДанныеДокумента.Касса,
	|	ВТ_ДанныеДокумента.КассаПолучатель,
	|	ВТ_ОтвЛицаФИО.Кассир
	|ИЗ
	|	ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтвЛицаФИО КАК ВТ_ОтвЛицаФИО
	|		ПО ВТ_ДанныеДокумента.Ссылка = ВТ_ОтвЛицаФИО.Ссылка";
				  
	ДанныеДокументов = Запрос.Выполнить().Выбрать();
	
	ЕстьРасчетыСКонтрагентами 		= ден_ПроцедурыКазначейства.ЕстьРасчетыСКонтрагентами(Неопределено);
	ЕстьРасчетыПоКредитам     		= ден_ПроцедурыКазначейства.ЕстьРасчетыПоКредитам(Неопределено);
	
	Макет         					= УправлениеПечатью.МакетПечатнойФормы("Документ.ден_ВнутреннееПеремещениеНаличныхДенежныхСредств.ПФ_MXL_КО2");
	ТабДокумент   					= Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВнутреннееПеремещениеНаличныхДенежныхСредств_КО2";
	
	ОбластьМакета					= Макет.ПолучитьОбласть("Шапка");
	Пока ДанныеДокументов.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
				
		СтруктурнаяЕдиницаОрганизация = ПолучитьСтруктурнуюЕдиницу(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделение);
					  
		СведенияОбОрганизации 	= фин_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ДанныеДокументов.ДатаДокумента);
		ПечатьСуммыПрописью 	= фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ПечатьСуммыПрописьюВДокументах");
	    	
		// Выводим шапку накладной
		ОбластьМакета.Параметры.Заполнить(ДанныеДокументов);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = фин_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		ОбластьМакета.Параметры.СуммаПрописью     		 = ?(ПечатьСуммыПрописью, СформироватьСуммуПрописью(ДанныеДокументов.Сумма, ДанныеДокументов.Валюта), "");
		ОбластьМакета.Параметры.ОрганизацияРНН_БИН		 = фин_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, ДанныеДокументов.ДатаДокумента, "ru");	
		ОбластьМакета.Параметры.ДатаДокумента     		 = Формат(ДанныеДокументов.ДатаДокумента, "ДФ = 'дд.ММ.гггг'")+" года";
		ОбластьМакета.Параметры.НомерДокумента    		 = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеДокументов.Номер);

		ДебетСубСчет = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(ДанныеДокументов.КассаПолучатель, Истина).СчетУчетаБУ;
		КодАналитическогоУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(ДанныеДокументов.Касса, Истина).СчетУчетаБУ;

		ОбластьМакета.Параметры.ДебетСубСчет  		   = ДебетСубСчет;
		ОбластьМакета.Параметры.КодАналитическогоУчета = КодАналитическогоУчета;

		Руководители		  = ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, КонецДня(ДанныеДокументов.ДатаДокумента),);
		Руководитель 		  = Руководители.Руководитель;
		РуководительДолжность = Руководители.РуководительДолжность;
		Бухгалтер   		  = Руководители.ГлавныйБухгалтер;
		
		ОбластьМакета.Параметры.ФИОРуководителя       = Руководитель;
		ОбластьМакета.Параметры.ДолжностьРуководителя = РуководительДолжность;

		ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = ?(НЕ ЗначениеЗаполнено(Бухгалтер), НСтр("ru = 'Не предусмотрен'"), Бухгалтер);
		ОбластьМакета.Параметры.ФИОКассира            = ДанныеДокументов.Кассир;

		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
		|			ТОГДА ОтветственныеЛица.ФизическоеЛицо.Наименование
		|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		|				ИНАЧЕ """"
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|				ИНАЧЕ """"
		|			КОНЕЦ
		|	КОНЕЦ КАК ФИОПолное
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&Дата, ) КАК ОтветственныеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФизЛицСрезПоследних
		|		ПО ОтветственныеЛица.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|ГДЕ
		|	ОтветственныеЛица.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|	И ОтветственныеЛица.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир)";
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ДанныеДокументов.КассаПолучатель); 
		Запрос.УстановитьПараметр("Дата", ДанныеДокументов.ДатаДокумента); 
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекстВыдатьФИО = Выборка.ФИОПолное;
		Иначе
			ТекстВыдатьФИО = "";
		КонецЕсли;
		
		КассаПолучатель = ДанныеДокументов.КассаПолучатель;
		
		ОрганизацияПолучатель = ПолучитьСтруктурнуюЕдиницу(ДанныеДокументов.ОрганизацияПолучатель, ДанныеДокументов.СтруктурноеПодразделениеПолучатель);
		ТекстВыдать 		  = ?(ЗначениеЗаполнено(КассаПолучатель), КассаПолучатель, ОрганизацияПолучатель.Наименование);
				
		ОбластьМакета.Параметры.Получатель    = ТекстВыдать;
		ОбластьМакета.Параметры.ФИОПолучателя = ТекстВыдатьФИО;

		ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокументов.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции

Функция ПолучитьСтруктурнуюЕдиницу(Организация,СтруктурноеПодразделение)
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 Тогда 
		Возврат Вычислить("ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Организация, СтруктурноеПодразделение)");	
	ИначеЕсли фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана
		ИЛИ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана Тогда 
		Возврат Вычислить("ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Организация, СтруктурноеПодразделение)");	
	Иначе	
		Возврат Организация;
	КонецЕсли;
КонецФункции

Функция ОтветственныеЛицаОрганизаций(Организация,ДатаСреза,Исполнитель=Неопределено,Результат=Неопределено)
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 Тогда 
		Возврат Вычислить("ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(Организация, ДатаСреза,Исполнитель,Результат)");	
	ИначеЕсли фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана
		ИЛИ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана Тогда 
		Возврат Вычислить("ОбщегоНазначения.ОтветственныеЛицаОрганизаций(Организация, ДатаСреза,Исполнитель,Результат)");	
	Иначе	
		Возврат Организация;
	КонецЕсли;
КонецФункции

// Функция формирует представление суммы прописью в указанной валюте
//
// Возвращаемое значение:
//  Строка - сумма прописью
//
Функция СформироватьСуммуПрописью(Сумма, Валюта) Экспорт

	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 Тогда 
		Возврат Вычислить("ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(Сумма, Валюта)");	
	ИначеЕсли фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана
		ИЛИ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана Тогда 
		Возврат Вычислить("ОбщегоНазначения.СформироватьСуммуПрописью(Сумма, Валюта)");	
	Иначе
		Возврат ЧислоПрописью(Сумма, "L=ru_RU");
	КонецЕсли;

КонецФункции // СформироватьСуммуПрописью()

#КонецЕсли