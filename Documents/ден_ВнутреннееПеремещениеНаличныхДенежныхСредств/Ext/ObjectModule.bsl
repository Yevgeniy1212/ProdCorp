#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТекПользователь = Пользователи.ТекущийПользователь();

	ВалютаРегламентированногоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	Если Не ЗначениеЗаполнено(ОрганизацияОтправитель) Тогда
		ОрганизацияОтправитель = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяОрганизация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОрганизацияПолучатель) Тогда
		ОрганизацияПолучатель = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяОрганизация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктурноеПодразделениеОтправитель) Тогда
		СтруктурноеПодразделение = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеСтруктурноеПодразделениеОрганизации");
		Если СтруктурноеПодразделение = Неопределено Тогда
			СтруктурноеПодразделениеОтправитель = ОрганизацияОтправитель;
		ИначеЕсли ТипЗнч(СтруктурноеПодразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделение;
		Иначе
			СтруктурноеПодразделениеОтправитель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();							
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктурноеПодразделениеПолучатель) Тогда
		СтруктурноеПодразделение = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеСтруктурноеПодразделениеОрганизации");
		Если СтруктурноеПодразделение = Неопределено Тогда
			СтруктурноеПодразделениеПолучатель = ОрганизацияПолучатель;
		ИначеЕсли ТипЗнч(СтруктурноеПодразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделение;
		Иначе
			СтруктурноеПодразделениеПолучатель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();							
		КонецЕсли;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойОтветственный");
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Автор) Тогда
		Автор = ТекПользователь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Касса) Тогда
		Касса = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ОрганизацияОтправитель, "ОсновнаяКасса");
		ЗначРеквизитовКасса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Касса, "Владелец, ВалютаДенежныхСредств");
		Если ЗначРеквизитовКасса.Владелец <> ОрганизацияОтправитель Тогда
			Касса = Справочники.Кассы.ПустаяСсылка();
		КонецЕсли;
		ВалютаДокумента = ЗначРеквизитовКасса.ВалютаДенежныхСредств;
	КонецЕсли;
		
 	Если Не ЗначениеЗаполнено(КассаПолучатель) И ОрганизацияПолучатель.ОсновнаяКасса.ВалютаДенежныхСредств = ВалютаДокумента Тогда
		КассаПолучатель = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ОрганизацияПолучатель, "ОсновнаяКасса");
		Если фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(КассаПолучатель, "Владелец") <> ОрганизацияПолучатель Тогда
			КассаПолучатель = Справочники.Кассы.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Документы.ден_ВнутреннееПеремещениеНаличныхДенежныхСредств.ЗаполнитьСчетаУчетаКассыОтправительРегл(ЭтотОбъект);
	Документы.ден_ВнутреннееПеремещениеНаличныхДенежныхСредств.ЗаполнитьСчетаУчетаКассыПолучательРегл(ЭтотОбъект);
		
	ОтражатьВБухгалтерскомУчете = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВБухгалтерскомУчете");
	ОтражатьВУправленческомУчете = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВУправленческомУчете");

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();	
	
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетКассаПолучатель");
		МассивНепроверяемыхРеквизитов.Добавить("СчетКассаОтправитель");
	КонецЕсли;
		
	Если ОтражатьВБухгалтерскомУчете И ОрганизацияОтправитель <> ОрганизацияПолучатель Тогда
		ТекстСообщения = Нстр("ru = 'Происходит перемещение наличных в бухгалтерском учете между различными организациями.
			|Такие операции следует отражать в бухгалтерском учете парой документов ""Приходный кассовый ордер"" - ""Расходный кассовый ордер"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,,,Отказ);
		Возврат;
	КонецЕсли;
	
	Если Не Оплачено Тогда
		// Проверяем остаток доступных денежных средств
		СвободныйОстаток = ден_ПроцедурыКазначейства.ПолучитьСвободныйОстатокДС(Касса,Дата,,СтруктурноеПодразделениеОтправитель);
		Если СвободныйОстаток < СуммаДокумента Тогда
			ТекстСообщения = "Сумма документа превышает возможный к использованию остаток денежных средств
				|по " + фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Касса, "Наименование") + ".
				|Возможный к использованию остаток: " + Формат(СвободныйОстаток,"ЧЦ=15; ЧДЦ=2") + " " + ВалютаДокумента + "
				|Сумма документа = "  + Формат(СуммаДокумента,"ЧЦ=15; ЧДЦ=2") + " " + ВалютаДокумента;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента"); 	
			Если Не фин_ОбщегоНазначенияВызовСервераПовтИсп.ЕстьДополнительноеПравоПользователя("РазрешитьПревышениеСвободногоОстаткаДС") Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;

	фин_ЗаполнениеДокументов.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	фин_ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ден_ВнутреннееПеремещениеНаличныхДенежныхСредств.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	ден_ПроцедурыКазначейства.СформироватьДвиженияВнутреннееПеремещениеНаличныхДенежныхСредств(ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#КонецЕсли