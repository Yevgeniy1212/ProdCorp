////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

#Если Клиент Тогда
	
// Функция формирует табличный документ унифицированной формы З-8
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме З-8.
//
Функция Печатьтаблицы()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номер,
	|	Дата КАК ДатаДокумента,
	|	Организация,
	|	ПериодПланирования,
	|	ФормируемыйБюджет КАК Бюджет,
	|	Статьябюджета,
	|	ВидОперацииРеализации
	|ИЗ
	|	Документ.б_РасчетнаяТаблицаРеализации КАК ур_РасчетнаяТаблицаРеализации
	|ГДЕ
	|	Ссылка = &ТекДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ур_РасчетнаяТаблицаРеализации.НомерСтроки,
	|	ур_РасчетнаяТаблицаРеализации.Номенклатура КАК Номенклатура,
	|	ур_РасчетнаяТаблицаРеализации.ГодУрожая КАК ГодУрожая,
	|	ур_РасчетнаяТаблицаРеализации.Период КАК Период,
	|	ур_РасчетнаяТаблицаРеализации.Количество КАК Количество,
	|	ур_РасчетнаяТаблицаРеализации.КоличествоМесяцевХранения КАК КоличествоМесяцевХранения,
	|	ур_РасчетнаяТаблицаРеализации.РасценкаХранения КАК РасценкаХранения,
	|	ур_РасчетнаяТаблицаРеализации.РасходыПоХранению КАК РасходыПоХранению,
	|	ур_РасчетнаяТаблицаРеализации.СуммаВознагрожденияБанка КАК СуммаВознагрожденияБанка,
	|	ур_РасчетнаяТаблицаРеализации.УчетнаяЦена КАК УчетнаяЦена,
	|	ур_РасчетнаяТаблицаРеализации.РеализационнаяЦена1  КАК РеализационнаяЦена1,
	|	ур_РасчетнаяТаблицаРеализации.СуммаВознагрожденияКорпорации КАК СуммаВознагрожденияКорпорации,
	|	ур_РасчетнаяТаблицаРеализации.СуммаМаржа КАК СуммаМаржа,
	|	ур_РасчетнаяТаблицаРеализации.РеализационнаяЦена2 КАК РеализационнаяЦена2,
	|	ур_РасчетнаяТаблицаРеализации.суммаБезНДС/1000 КАК суммаБезНДС,
	|	ур_РасчетнаяТаблицаРеализации.РеализационнаяЦена/1000 КАК РеализационнаяЦена,
	|	ур_РасчетнаяТаблицаРеализации.ЦенаВВалютеДокумента КАК ЦенаВВалютеДокумента,
	|	ур_РасчетнаяТаблицаРеализации.СуммаСНДС/1000 КАК СуммаСНДС,
	|	ур_РасчетнаяТаблицаРеализации.УсловиеОплаты КАК УсловияОплаты,
	|	ур_РасчетнаяТаблицаРеализации.СуммаБиржевыхУслуг/1000 КАК СуммаБиржевыхУслуг,
	|	ур_РасчетнаяТаблицаРеализации.СуммаРасходовПоРеализации/1000  КАК РасходыПоРеализации,
	|	ур_РасчетнаяТаблицаРеализации.Себестоимость/1000 КАК Себестоимость
	|ИЗ
	|	Документ.б_РасчетнаяТаблицаРеализации.Расчетнаятаблица КАК ур_РасчетнаяТаблицаРеализации
	|ГДЕ
	|	ур_РасчетнаяТаблицаРеализации.Ссылка = &ТекДокумент
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	
	Макет = ПолучитьМакет("Макет");

	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 10;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
    ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетнаяТаблица";
	
	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
  	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ТекстЗаголовка = Строка(Шапка.Бюджет)+ " на "+ДополнительныеПоБюджетированию.ПолучитьНадписьПериодаСтрокой(ПериодПланирования,Сценарий);
	ТабДокумент.Вывести(ОбластьМакета);

 	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
  	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");

	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		ОбластьСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	// Вывести Итого
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	
	ОбластьИтого.Параметры.Количество = ЗапросТовары.Итог("Количество");
	ОбластьИтого.Параметры.СуммаБезНДС = ЗапросТовары.Итог("СуммаБезНДС");
	ОбластьИтого.Параметры.СуммаСНДС = ЗапросТовары.Итог("СуммаСНДС");
	ОбластьИтого.Параметры.СуммаБиржевыхУслуг = ЗапросТовары.Итог("СуммаБиржевыхУслуг");
	ОбластьИтого.Параметры.Себестоимость = ЗапросТовары.Итог("Себестоимость");
	ОбластьИтого.Параметры.РасходыПоРеализации = ЗапросТовары.Итог("РасходыПоРеализации");
	ТабДокумент.Вывести(ОбластьИтого);

	Возврат ТабДокумент;

КонецФункции // ПечатьБронирование()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Макет" Тогда
		ТабДокумент = ПечатьТаблицы();
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
                                                                                                                                                    
КонецПроцедуры // Печать

#КонецЕсли

Функция ПолучитьВыборку() Экспорт
	
	Запрос = Новый Запрос;
	
	мНачГраница = Новый Граница(НачалоДня(НачалоГода(ПериодПланирования)), ВидГраницы.Включая);
	мКонГраница = Новый Граница(КонецДня(КонецМесяца(Дата(Год(ПериодПланирования),Видкорректировки.НомерМесяца-1,1))), ВидГраницы.Включая);
	мКонДата = КонецДня(КонецМесяца(Дата(Год(ПериодПланирования),Видкорректировки.НомерМесяца-1,1)));

	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТекДокумент", ссылка);
	Запрос.УстановитьПараметр("НачалоПериода", мНачГраница);
	Запрос.УстановитьПараметр("КонецПериода", мКонГраница);
	Запрос.УстановитьПараметр("мКонДата", мКонДата);
	Запрос.УстановитьПараметр("ВидоперацииРеализации", ВидоперацииРеализации);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Вн_запрос.Номенклатура КАК Номенклатура,
	|	СУММА(Вн_запрос.ПланКоличество) КАК ПланКоличество,
	|	СУММА(Вн_запрос.Количество) КАК Количество,
	|	СУММА(Вн_запрос.ПланСебестоимость) КАК ПланСебестоимость,
	|	СУММА(Вн_запрос.Себестоимость) КАК Себестоимость,
	|	СУММА(Вн_запрос.ПланСуммаБезНДС) КАК ПланСуммаБезНДС,
	|	СУММА(Вн_запрос.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(Вн_запрос.ПланСуммаСНДС) КАК ПланСуммаСНДС,
	|	СУММА(Вн_запрос.СуммаСНДС) КАК СуммаСНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетнаяТаблица.Номенклатура КАК Номенклатура,
	|		РасчетнаяТаблица.Количество КАК ПланКоличество,
	|		0 КАК Количество,
	|		РасчетнаяТаблица.Себестоимость КАК ПланСебестоимость,
	|		0 КАК Себестоимость,
	|		РасчетнаяТаблица.СуммаБезНДС КАК ПланСуммаБезНДС,
	|		0 КАК СуммаБезНДС,
	|		РасчетнаяТаблица.СуммаСНДС КАК ПланСуммаСНДС,
	|		0 КАК СуммаСНДС
	|	ИЗ
	|		Документ.б_РасчетнаяТаблицаРеализации.РасчетнаяТаблица КАК РасчетнаяТаблица
	|	ГДЕ
	|		РасчетнаяТаблица.Ссылка = &ТекДокумент
	|		И РасчетнаяТаблица.Период <= &мКонДата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Реализация.ЗерноваяРасписка.Культура.ГруппаКультур,
	|		0,
	|		Реализация.КоличествоОборот,
	|		0,
	|		Реализация.СтоимостьОборот,
	|		0,
	|		Реализация.СуммаОборот,
	|		0,
	|		Реализация.СуммаОборот + Реализация.НДСОборот
	|	ИЗ
	|		РегистрНакопления.ур_РеализацияЗерна.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				ТипОперации.ВидРеализацииЗерна = &ВидоперацииРеализации
	|				) КАК Реализация) КАК Вн_запрос
	|
	|СГРУППИРОВАТЬ ПО
	|	Вн_запрос.Номенклатура";
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Процедура РассчитатьОтклонения() Экспорт
	
	тзРезультат = ПолучитьВыборку();
	
	//Для Каждого СтрокаТЧ из РасчетнаяТаблица Цикл
	//	Если СтрокаТЧ.ПризнакДополнительнойЗаписи Тогда
	//		 РасчетнаяТаблица.НайтиСтроки();
	//	КонецЕсли;	
	//КонецЦикла;
	
	Для Каждого СтрокаТЗ из тзРезультат Цикл
		НоваяСтрока = РасчетнаяТаблица.Добавить();
		НоваяСтрока.ПризнакКорректировки = Истина;
		НоваяСтрока.ПризнакДополнительнойЗаписи = Истина;
		НоваяСтрока.Период = Дата(Год(ПериодПланирования),Видкорректировки.НомерМесяца,1);
		НоваяСтрока.Номенклатура = СтрокаТЗ.Номенклатура;
		НоваяСтрока.Количество =  СтрокаТЗ.Количество - СтрокаТЗ.ПланКоличество;
		НоваяСтрока.Себестоимость =  СтрокаТЗ.Себестоимость - СтрокаТЗ.ПланСебестоимость;
		НоваяСтрока.СуммаБезНДС = СтрокаТЗ.СуммаБезНДС - СтрокаТЗ.ПланСуммаБезНДС;
		НоваяСтрока.СуммаСНДС = СтрокаТЗ.СуммаСНДС - СтрокаТЗ.ПланСуммаСНДС;
	КонецЦикла;
	
	РасчетнаяТаблица.Сортировать("Период");
КонецПроцедуры

Функция СформироватьТаблицуВлияющихОборотов() Экспорт
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекДокумент", ЭтотОбъект.Ссылка);
	
	Если ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Бюджет Тогда
				Запрос.Текст =
			"ВЫБРАТЬ
			|	ДанныеПоТаблице.СтатьяБюджета КАК СтатьяБюджета,
			|	ДанныеПоТаблице.Период КАК Период,
			|	СУММА(ДанныеПоТаблице.Количество) КАК Количество,
			|	СУММА(ДанныеПоТаблице.Сумма) КАК Сумма,
			|	ДанныеПоТаблице.СтатьяБюджета.Владелец КАК Бюджет
			|ИЗ
			|	(ВЫБРАТЬ
			|		РасчетнаяТаблица.Ссылка.СтатьяБюджета КАК СтатьяБюджета,
			|		РасчетнаяТаблица.Период КАК Период,
			|		РасчетнаяТаблица.Количество КАК Количество,
			|		РасчетнаяТаблица.СуммаБезНДС - РасчетнаяТаблица.Количество * РасчетнаяТаблица.СуммаВознагрожденияКорпорации КАК Сумма
			|	ИЗ
			|		Документ.б_РасчетнаяТаблицаРеализации.РасчетнаяТаблица КАК РасчетнаяТаблица
			|	ГДЕ
			|		РасчетнаяТаблица.Ссылка = &ТекДокумент) КАК ДанныеПоТаблице
			|
			|СГРУППИРОВАТЬ ПО
			|	ДанныеПоТаблице.СтатьяБюджета,
			|	ДанныеПоТаблице.Период
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаСебестоимости,
			|	РасчетнаяТаблица.Период,
			|	СУММА(0),
			|	СУММА(РасчетнаяТаблица.Себестоимость),
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаСебестоимости.Владелец
			|ИЗ
			|	Документ.б_РасчетнаяТаблицаРеализации.РасчетнаяТаблица КАК РасчетнаяТаблица
			|ГДЕ
			|	РасчетнаяТаблица.Ссылка = &ТекДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаСебестоимости,
			|	РасчетнаяТаблица.Период
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаБиржевыеУслуги,
			|	РасчетнаяТаблица.Период,
			|	СУММА(0),
			|	СУММА(РасчетнаяТаблица.СуммаБиржевыхУслуг),
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаБиржевыеУслуги.Владелец
			|ИЗ
			|	Документ.б_РасчетнаяТаблицаРеализации.РасчетнаяТаблица КАК РасчетнаяТаблица
			|ГДЕ
			|	РасчетнаяТаблица.Ссылка = &ТекДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаБиржевыеУслуги,
			|	РасчетнаяТаблица.Период
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаПоВознагрождениям,
			|	РасчетнаяТаблица.Период,
			|	СУММА(0),
			|	СУММА(РасчетнаяТаблица.Количество * РасчетнаяТаблица.СуммаВознагрожденияКорпорации),
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаПоВознагрождениям.Владелец
			|ИЗ
			|	Документ.б_РасчетнаяТаблицаРеализации.РасчетнаяТаблица КАК РасчетнаяТаблица
			|ГДЕ
			|	РасчетнаяТаблица.Ссылка = &ТекДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаПоВознагрождениям,
			|	РасчетнаяТаблица.Период
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаПоВознагрождениям,
			|	РасчетнаяТаблица.Период,
			|	СУММА(0),
			|	СУММА(РасчетнаяТаблица.СуммаВознагражденияЗаТоварныйКредит),
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаПоВознагрождениям.Владелец
			|ИЗ
			|	Документ.б_РасчетнаяТаблицаРеализации.РасчетнаяТаблица КАК РасчетнаяТаблица
			|ГДЕ
			|	РасчетнаяТаблица.Ссылка = &ТекДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаПоВознагрождениям,
			|	РасчетнаяТаблица.Период";
			
			
		ИначеЕсли ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
		Запрос.УстановитьПараметр("ПериодКорректировки", Дата(Год(ПериодПланирования),ВидКорректировки.НомерМесяца,1));
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДанныеПоТаблице.СтатьяБюджета КАК СтатьяБюджета,
			|	ДанныеПоТаблице.Период КАК Период,
			|	СУММА(ДанныеПоТаблице.Количество - ДанныеПоТаблице.ИКоличество) КАК Количество,
			|	СУММА(ДанныеПоТаблице.Сумма - ДанныеПоТаблице.ИСумма) КАК Сумма,
			|	ДанныеПоТаблице.СтатьяБюджета.Владелец КАК Бюджет
			|ИЗ
			|	(ВЫБРАТЬ
			|		РасчетнаяТаблица.Ссылка.СтатьяБюджета КАК СтатьяБюджета,
			|		РасчетнаяТаблица.Период КАК Период,
			|		РасчетнаяТаблица.Количество КАК Количество,
			|		РасчетнаяТаблица.ИКоличество КАК ИКоличество,
			|		РасчетнаяТаблица.СуммаБезНДС - РасчетнаяТаблица.Количество * РасчетнаяТаблица.СуммаВознагрожденияКорпорации КАК Сумма,
			|		РасчетнаяТаблица.ИСуммаБезНДС - РасчетнаяТаблица.ИКоличество * РасчетнаяТаблица.СуммаВознагрожденияКорпорации КАК ИСумма
			|	ИЗ
			|		Документ.б_РасчетнаяТаблицаРеализации.РасчетнаяТаблица КАК РасчетнаяТаблица
			|	ГДЕ
			|		РасчетнаяТаблица.Ссылка = &ТекДокумент) КАК ДанныеПоТаблице
			|
			|СГРУППИРОВАТЬ ПО
			|	ДанныеПоТаблице.СтатьяБюджета,
			|	ДанныеПоТаблице.Период,
			|	ДанныеПоТаблице.СтатьяБюджета.Владелец
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаСебестоимости,
			|	РасчетнаяТаблица.Период,
			|	0,
			|	СУММА(РасчетнаяТаблица.Себестоимость - РасчетнаяТаблица.ИСебестоимость),
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаСебестоимости.Владелец
			|ИЗ
			|	Документ.б_РасчетнаяТаблицаРеализации.РасчетнаяТаблица КАК РасчетнаяТаблица
			|ГДЕ
			|	РасчетнаяТаблица.Ссылка = &ТекДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаСебестоимости,
			|	РасчетнаяТаблица.Период,
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаСебестоимости.Владелец
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаБиржевыеУслуги,
			|	РасчетнаяТаблица.Период,
			|	0,
			|	СУММА(РасчетнаяТаблица.СуммаБиржевыхУслуг),
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаБиржевыеУслуги.Владелец
			|ИЗ
			|	Документ.б_РасчетнаяТаблицаРеализации.РасчетнаяТаблица КАК РасчетнаяТаблица
			|ГДЕ
			|	РасчетнаяТаблица.Ссылка = &ТекДокумент
			|	И РасчетнаяТаблица.Период >= &ПериодКорректировки
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаБиржевыеУслуги,
			|	РасчетнаяТаблица.Период,
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаБиржевыеУслуги.Владелец
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаПоВознагрождениям,
			|	РасчетнаяТаблица.Период,
			|	0,
			|	СУММА(РасчетнаяТаблица.Количество * РасчетнаяТаблица.СуммаВознагрожденияКорпорации + РасчетнаяТаблица.СуммаВознагражденияЗаТоварныйКредит - РасчетнаяТаблица.ИСуммаВознагражденияЗаТоварныйКредит),
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаПоВознагрождениям.Владелец
			|ИЗ
			|	Документ.б_РасчетнаяТаблицаРеализации.РасчетнаяТаблица КАК РасчетнаяТаблица
			|ГДЕ
			|	РасчетнаяТаблица.Ссылка = &ТекДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаПоВознагрождениям,
			|	РасчетнаяТаблица.Период,
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаПоВознагрождениям.Владелец";
		
		
	КонецЕсли;	
	тз = Запрос.Выполнить().Выгрузить();
//	тз.ВыбратьСтроку();
	//тз.Колонки.Добавить("Бюджет");
	//
	//тз.ЗаполнитьЗначения(ФормируемыйБюджет, "Бюджет");
	
	Возврат тз;	

КонецФункции

// Заполняет таблицу зависимых оборотов рекурсивно зависимыми от статьи
// переданной в качестве параметра.
//
// Параметры
//  Статья  – <Справочник.СтатьиОборотовБюджета> – статья оборотов, для которой выбираются зависимые
//  ДатаДвижения - дата движения по влияющей статье
//  КоличествоПоСтатье - количественный оборот по влияющей статье
//  СуммаПоСтатье - суммовой оборот по влияющей статье
//
Процедура ЗаполнитьЗависимымиОборотами(ТекБюджет,
										ТекСтатьяБюджета,
										ТекПериод,
										СуммаПоСтатье,
										КоличествоПоСтатье)
	Запрос = Новый Запрос;
										
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗависимостиСтатейБюджета.ЗависимыйБюджет,
	|	ЗависимостиСтатейБюджета.ЗависимаяСтатьяБюджета,
	|	ЗависимостиСтатейБюджета.Коэффициент,
	|	ЗависимостиСтатейБюджета.ПериодОтражения
	|ИЗ
	|	РегистрСведений.ЗависимостиСтатейБюджета КАК ЗависимостиСтатейБюджета
	|ГДЕ
	|	ЗависимостиСтатейБюджета.ВлияющийБюджет = &ТекБюджет
	|	И ЗависимостиСтатейБюджета.ВлияющаяСтатьяБюджета = &ТекСтатьяБюджета
	|";
	
	Запрос.УстановитьПараметр("ТекБюджет",ТекБюджет);
	Запрос.УстановитьПараметр("ТекСтатьяБюджета",ТекСтатьяБюджета);
  Тз = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса=Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	Иначе
		
		ТабЗависимыхСтатей=РезультатЗапроса.Выгрузить();
		
		Для Каждого ТекущаяЗависимость Из ТабЗависимыхСтатей Цикл
				НовыйЗависимыйОборот				=ЗависимыеОбороты.Добавить();
				НовыйЗависимыйОборот.Период			=?(ТекущаяЗависимость.ПериодОтражения>0,Дата(Год(ТекПериод),ТекущаяЗависимость.ПериодОтражения,1),ТекПериод);
				
				Если ТекущаяЗависимость.ЗависимаяСтатьяБюджета.КодСтрокиБюджета = "414.2" 
					И ТекущаяЗависимость.ЗависимыйБюджет.Наименование = "Прогнозный бухгалтерский баланс" Тогда

					НовыйЗависимыйОборот.Период	=?(ТекущаяЗависимость.ПериодОтражения>0, НачалоМесяца(КонецГода(Дата(Год(ТекПериод),ТекущаяЗависимость.ПериодОтражения,1))),НачалоМесяца(КонецГода(ТекПериод)));
					
				КонецЕсли;
				
				
				Если ТекущаяЗависимость.ЗависимаяСтатьяБюджета.КодСтрокиБюджета = "1.1.1" 
					И ТекущаяЗависимость.ЗависимыйБюджет.Наименование = "1 БК" Тогда

					НовыйЗависимыйОборот.Период	=?(ТекущаяЗависимость.ПериодОтражения>0, НачалоМесяца(КонецГода(Дата(Год(ТекПериод),ТекущаяЗависимость.ПериодОтражения,1))),НачалоМесяца(КонецГода(ТекПериод)));
					
				КонецЕсли;

				Если ТекущаяЗависимость.ЗависимаяСтатьяБюджета.КодСтрокиБюджета = "1.1.2" 
					И ТекущаяЗависимость.ЗависимыйБюджет.Наименование = "1 БК" Тогда

					НовыйЗависимыйОборот.Период	=?(ТекущаяЗависимость.ПериодОтражения>0, НачалоМесяца(КонецГода(Дата(Год(ТекПериод),ТекущаяЗависимость.ПериодОтражения,1))),НачалоМесяца(КонецГода(ТекПериод)));
					
				КонецЕсли;

				НовыйЗависимыйОборот.Бюджет			=ТекущаяЗависимость.ЗависимыйБюджет;
				НовыйЗависимыйОборот.СтатьяБюджета	=ТекущаяЗависимость.ЗависимаяСтатьяБюджета;
				НовыйЗависимыйОборот.Сумма			=СуммаПоСтатье*ТекущаяЗависимость.Коэффициент;
				НовыйЗависимыйОборот.Количество		=КоличествоПоСтатье*ТекущаяЗависимость.Коэффициент*НовыйЗависимыйОборот.СтатьяБюджета.ЗнакКоличество;
				
				ЗаполнитьЗависимымиОборотами(НовыйЗависимыйОборот.Бюджет,
											НовыйЗависимыйОборот.СтатьяБюджета,
											НовыйЗависимыйОборот.Период,
											НовыйЗависимыйОборот.Сумма,
											НовыйЗависимыйОборот.Количество)
		КонецЦикла;
	Конецесли;
	
		

КонецПроцедуры
									
// Инициирует процесс заполнения ТЧ "ЗависимыеОбороты"
//
Процедура РассчитатьЗависимыеОбороты() Экспорт
	
	ЗависимыеОбороты.Очистить();
	
	тз = СформироватьТаблицуВлияющихОборотов();
	Для Каждого СтрокаТЗ из тз Цикл
		ЗаполнитьЗависимымиОборотами(СтрокаТЗ.Бюджет,
									СтрокаТЗ.СтатьяБюджета,
									СтрокаТЗ.Период,
									СтрокаТЗ.Сумма,
									СтрокаТЗ.Количество);
	КонецЦикла;
КонецПроцедуры // РассчитатьЗависимые()

// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Макет","Расчетная таблица");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Бюджет Тогда
	СтруктураОбязательныхПолей = Новый Структура("Организация, 
									|ФормируемыйБюджет,
									|Сценарий,
									|ВидОперацииРеализации,
									|СтатьяБюджета,
									|СтатьяБюджетаСебестоимости");
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
	СтруктураОбязательныхПолей = Новый Структура("Организация, 
									|ФормируемыйБюджет,
									|Сценарий,
									|ВидКорректировки,
									|ВидОперацииРеализации,
									|СтатьяБюджета,
									|СтатьяБюджетаСебестоимости");
	КонецЕсли;	
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Функция ПодготовитьТаблицу(РезультатЗапросаПоРасчетнойТаблице,СтруктураШапкиДокумента)
	
	ТаблицаПоРасчетнойТаблице = РезультатЗапросаПоРасчетнойТаблице.Выгрузить();
//	ТаблицаПоРасчетнойТаблице.ВыбратьСтроку();
	ТаблицаПоРасчетнойТаблице.Колонки.Добавить("Бюджет");
	ТаблицаПоРасчетнойТаблице.Колонки.Добавить("Сценарий");
	ТаблицаПоРасчетнойТаблице.Колонки.Добавить("СтатьяБюджета");
	ТаблицаПоРасчетнойТаблице.Колонки.Добавить("Организация");
	ТаблицаПоРасчетнойТаблице.Колонки.Добавить("ВидОперации");
	
	ТаблицаПоРасчетнойТаблице.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаПоРасчетнойТаблице.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтатьяБюджета, "СтатьяБюджета");
	ТаблицаПоРасчетнойТаблице.ЗаполнитьЗначения(СтруктураШапкиДокумента.ФормируемыйБюджет, "Бюджет");
	ТаблицаПоРасчетнойТаблице.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сценарий, "Сценарий");
	ТаблицаПоРасчетнойТаблице.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидОперацииРеализации, "ВидОперации");
	
	Если ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
		Для Каждого СтрокаТЧ ИЗ  ТаблицаПоРасчетнойТаблице Цикл
			СтрокаТЧ.Количество = СтрокаТЧ.Количество - СтрокаТЧ.иКоличество ;
			СтрокаТЧ.Себестоимость = СтрокаТЧ.Себестоимость - СтрокаТЧ.иСебестоимость ;
			СтрокаТЧ.СуммаБезНДС = СтрокаТЧ.СуммаБезНДС - СтрокаТЧ.иСуммаБезНДС ;
			СтрокаТЧ.СуммаСНДС = СтрокаТЧ.СуммаСНДС - СтрокаТЧ.иСуммаСНДС ;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаПоРасчетнойТаблице;
КонецФункции

Функция СформироватьТаблицуДляДоходовИРасходов(СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Бюджет Тогда
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ТекДокумент",ЭтотОбъект.Ссылка);
		
				Запрос.Текст =
			"ВЫБРАТЬ
			|	ДанныеПоТаблице.Бюджет КАК Бюджет,
			|	ДанныеПоТаблице.СтатьяБюджета КАК СтатьяБюджета,
			|	ДанныеПоТаблице.Период КАК Период,
			|	СУММА(ДанныеПоТаблице.Количество) КАК Количество,
			|	СУММА(ДанныеПоТаблице.Сумма) КАК Сумма
			|ИЗ
			|	(ВЫБРАТЬ
			|		РасчетнаяТаблица.Ссылка.ФормируемыйБюджет КАК Бюджет,
			|		РасчетнаяТаблица.Ссылка.СтатьяБюджета КАК СтатьяБюджета,
			|		РасчетнаяТаблица.Период КАК Период,
			|		РасчетнаяТаблица.Количество КАК Количество,
			|		РасчетнаяТаблица.СуммаБезНДС - РасчетнаяТаблица.Количество * РасчетнаяТаблица.СуммаВознагрожденияКорпорации КАК Сумма
			|	ИЗ
			|		Документ.б_РасчетнаяТаблицаРеализации.РасчетнаяТаблица КАК РасчетнаяТаблица
			|	ГДЕ
			|		РасчетнаяТаблица.Ссылка = &ТекДокумент) КАК ДанныеПоТаблице
			|
			|СГРУППИРОВАТЬ ПО
			|	ДанныеПоТаблице.Бюджет,
			|	ДанныеПоТаблице.СтатьяБюджета,
			|	ДанныеПоТаблице.Период
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасчетнаяТаблица.Ссылка.ФормируемыйБюджет,
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаСебестоимости,
			|	РасчетнаяТаблица.Период,
			|	СУММА(РасчетнаяТаблица.Количество),
			|	СУММА(РасчетнаяТаблица.Себестоимость)
			|ИЗ
			|	Документ.б_РасчетнаяТаблицаРеализации.РасчетнаяТаблица КАК РасчетнаяТаблица
			|ГДЕ
			|	РасчетнаяТаблица.Ссылка = &ТекДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетнаяТаблица.Ссылка.ФормируемыйБюджет,
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаСебестоимости,
			|	РасчетнаяТаблица.Период
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасчетнаяТаблица.Ссылка.ФормируемыйБюджет,
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаПоВознагрождениям,
			|	РасчетнаяТаблица.Период,
			|	СУММА(РасчетнаяТаблица.Количество),
			|	СУММА(РасчетнаяТаблица.СуммаВознагражденияЗаТоварныйКредит)
			|ИЗ
			|	Документ.б_РасчетнаяТаблицаРеализации.РасчетнаяТаблица КАК РасчетнаяТаблица
			|ГДЕ
			|	РасчетнаяТаблица.Ссылка = &ТекДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетнаяТаблица.Ссылка.ФормируемыйБюджет,
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаПоВознагрождениям,
			|	РасчетнаяТаблица.Период
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасчетнаяТаблица.Ссылка.ФормируемыйБюджет,
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаБиржевыеУслуги,
			|	РасчетнаяТаблица.Период,
			|	СУММА(РасчетнаяТаблица.Количество),
			|	СУММА(РасчетнаяТаблица.СуммаБиржевыхУслуг)
			|ИЗ
			|	Документ.б_РасчетнаяТаблицаРеализации.РасчетнаяТаблица КАК РасчетнаяТаблица
			|ГДЕ
			|	РасчетнаяТаблица.Ссылка = &ТекДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетнаяТаблица.Ссылка.ФормируемыйБюджет,
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаБиржевыеУслуги,
			|	РасчетнаяТаблица.Период
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗависимыеОбороты.Бюджет,
			|	ЗависимыеОбороты.СтатьяБюджета,
			|	ЗависимыеОбороты.Период,
			|	СУММА(ЗависимыеОбороты.Количество),
			|	СУММА(ЗависимыеОбороты.Сумма)
			|ИЗ
			|	Документ.б_РасчетнаяТаблицаРеализации.ЗависимыеОбороты КАК ЗависимыеОбороты
			|ГДЕ
			|	ЗависимыеОбороты.Ссылка = &ТекДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗависимыеОбороты.Бюджет,
			|	ЗависимыеОбороты.СтатьяБюджета,
			|	ЗависимыеОбороты.Период";
		
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекДокумент",ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("ПериодКорректировки", Дата(Год(ПериодПланирования),ВидКорректировки.НомерМесяца,1));
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДанныеПоТаблице.Бюджет КАК Бюджет,
			|	ДанныеПоТаблице.СтатьяБюджета КАК СтатьяБюджета,
			|	ДанныеПоТаблице.Период КАК Период,
			|	СУММА(ДанныеПоТаблице.Количество) - СУММА(ДанныеПоТаблице.ИКоличество) КАК Количество,
			|	СУММА(ДанныеПоТаблице.Сумма) - СУММА(ДанныеПоТаблице.ИСумма) КАК Сумма
			|ИЗ
			|	(ВЫБРАТЬ
			|		РасчетнаяТаблица.Ссылка.ФормируемыйБюджет КАК Бюджет,
			|		РасчетнаяТаблица.Ссылка.СтатьяБюджета КАК СтатьяБюджета,
			|		РасчетнаяТаблица.Период КАК Период,
			|		РасчетнаяТаблица.Количество КАК Количество,
			|		РасчетнаяТаблица.ИКоличество КАК ИКоличество,
			|		РасчетнаяТаблица.СуммаБезНДС - РасчетнаяТаблица.Количество * РасчетнаяТаблица.СуммаВознагрожденияКорпорации КАК Сумма,
			|		РасчетнаяТаблица.ИСуммаБезНДС КАК ИСумма
			|	ИЗ
			|		Документ.б_РасчетнаяТаблицаРеализации.РасчетнаяТаблица КАК РасчетнаяТаблица
			|	ГДЕ
			|		РасчетнаяТаблица.Ссылка = &ТекДокумент) КАК ДанныеПоТаблице
			|
			|СГРУППИРОВАТЬ ПО
			|	ДанныеПоТаблице.Бюджет,
			|	ДанныеПоТаблице.СтатьяБюджета,
			|	ДанныеПоТаблице.Период
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасчетнаяТаблица.Ссылка.ФормируемыйБюджет,
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаСебестоимости,
			|	РасчетнаяТаблица.Период,
			|	СУММА(РасчетнаяТаблица.Количество) - СУММА(РасчетнаяТаблица.ИКоличество),
			|	СУММА(РасчетнаяТаблица.Себестоимость) - СУММА(РасчетнаяТаблица.ИСебестоимость)
			|ИЗ
			|	Документ.б_РасчетнаяТаблицаРеализации.РасчетнаяТаблица КАК РасчетнаяТаблица
			|ГДЕ
			|	РасчетнаяТаблица.Ссылка = &ТекДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетнаяТаблица.Ссылка.ФормируемыйБюджет,
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаСебестоимости,
			|	РасчетнаяТаблица.Период
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасчетнаяТаблица.Ссылка.ФормируемыйБюджет,
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаБиржевыеУслуги,
			|	РасчетнаяТаблица.Период,
			|	0,
			|	СУММА(РасчетнаяТаблица.СуммаБиржевыхУслуг)
			|ИЗ
			|	Документ.б_РасчетнаяТаблицаРеализации.РасчетнаяТаблица КАК РасчетнаяТаблица
			|ГДЕ
			|	РасчетнаяТаблица.Ссылка = &ТекДокумент
			|	И РасчетнаяТаблица.Период >= &ПериодКорректировки
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетнаяТаблица.Ссылка.ФормируемыйБюджет,
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаБиржевыеУслуги,
			|	РасчетнаяТаблица.Период
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасчетнаяТаблица.Ссылка.ФормируемыйБюджет,
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаПоВознагрождениям,
			|	РасчетнаяТаблица.Период,
			|	СУММА(РасчетнаяТаблица.Количество) - СУММА(РасчетнаяТаблица.ИКоличество),
			|	СУММА(РасчетнаяТаблица.СуммаВознагражденияЗаТоварныйКредит) - СУММА(РасчетнаяТаблица.ИСуммаВознагражденияЗаТоварныйКредит)
			|ИЗ
			|	Документ.б_РасчетнаяТаблицаРеализации.РасчетнаяТаблица КАК РасчетнаяТаблица
			|ГДЕ
			|	РасчетнаяТаблица.Ссылка = &ТекДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетнаяТаблица.Ссылка.ФормируемыйБюджет,
			|	РасчетнаяТаблица.Ссылка.СтатьяБюджетаПоВознагрождениям,
			|	РасчетнаяТаблица.Период
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗависимыеОбороты.Бюджет,
			|	ЗависимыеОбороты.СтатьяБюджета,
			|	ЗависимыеОбороты.Период,
			|	СУММА(ЗависимыеОбороты.Количество),
			|	СУММА(ЗависимыеОбороты.Сумма)
			|ИЗ
			|	Документ.б_РасчетнаяТаблицаРеализации.ЗависимыеОбороты КАК ЗависимыеОбороты
			|ГДЕ
			|	ЗависимыеОбороты.Ссылка = &ТекДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗависимыеОбороты.Бюджет,
			|	ЗависимыеОбороты.СтатьяБюджета,
			|	ЗависимыеОбороты.Период";
				
	КонецЕсли;
	
	тз = Запрос.Выполнить().Выгрузить();
	
	тз.Колонки.Добавить("Организация");
	тз.Колонки.Добавить("Статус");
	
	тз.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	тз.ЗаполнитьЗначения(СтруктураШапкиДокумента.Состояние, "Статус");
	
	Возврат тз;	
КонецФункции

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента,
									ТаблицаПоРасчетнойТаблице, Отказ, Заголовок)
									
	//Зафиксировать расчетную таблицу
	ДвижениеПоБюджетам	= Движения.б_СформированныеРасчетныеТаблицыРеализации.Добавить();
	ДвижениеПоБюджетам.Бюджет = СтруктураШапкиДокумента.Формируемыйбюджет;
	ДвижениеПоБюджетам.Организация = СтруктураШапкиДокумента.Организация;
	ДвижениеПоБюджетам.Сценарий = СтруктураШапкиДокумента.Сценарий;
	ДвижениеПоБюджетам.Видоперации = СтруктураШапкиДокумента.Видоперации;
	ДвижениеПоБюджетам.ПериодПланирования = СтруктураШапкиДокумента.ПериодПланирования;
	ДвижениеПоБюджетам.ВидоперацииРеализации = СтруктураШапкиДокумента.ВидоперацииРеализации;
	ДвижениеПоБюджетам.СтатьяБюджета = СтруктураШапкиДокумента.СтатьяБюджета;
	//ЦС
	ДвижениеПоБюджетам.ВидКорректировки = СтруктураШапкиДокумента.ВидКорректировки;
	ДвижениеПоБюджетам.ПодразделениеОрганизации = СтруктураШапкиДокумента.ПодразделениеОрганизации;
	//ЦС
	
	// Выполнить движения по регистру накопления 	
	НаборДвижений = Движения.б_РасчетнаяТаблицаРеализация;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// Заполним таблицу движений.
	ТаблицаДанных = ТаблицаПоРасчетнойТаблице.Скопировать();
	ТаблицаДанных.Колонки.Добавить("Активность");
	ТаблицаДанных.ЗаполнитьЗначения(Истина, "Активность");
	
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДанных, ТаблицаДвижений);
	
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	
	// Выполнить движения по регистру накопления 	
	НаборДвижений = Движения.б_Бюджет;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// Заполним таблицу движений.
	ТаблицаДанных = СформироватьТаблицуДляДоходовИРасходов(СтруктураШапкиДокумента);
	ТаблицаДанных.Колонки.Добавить("Активность");
	ТаблицаДанных.ЗаполнитьЗначения(Истина, "Активность");
	
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДанных, ТаблицаДвижений);
	
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ 
		И ВидОперации <> Перечисления.фин_ВидыОперацийБюджет.Заявка Тогда
		Движения.б_РасчетнаяТаблицаРеализация.ВыполнитьДвижения();
		Движения.б_Бюджет.ВыполнитьДвижения();
		
		ДвиженияПоБюджету = Движения.фин_Бюджетирование;
		
		ТабПроводокДокумента = ДополнительныеПоБюджетированию.ВыполнитьДвижениеПроводокПоБюджетированию(ЭтотОбъект, ДвиженияПоБюджету, СтруктураШапкиДокумента, ТаблицаДанных);
	КонецЕсли;

Конецпроцедуры
								
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
    // Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
		//ЗаполнитьПоДокументуОснования(Основание);
    КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если НЕ РежимЗаписи=РежимЗаписиДокумента.ОтменаПроведения Тогда 
		РассчитатьЗависимыеОбороты();
	КонецЕсли;

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

		
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	//Если ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Бюджет И Состояние <> Перечисления.СостоянияОбъектов.Утвержден Тогда
	//	ОбщегоНазначения.ОшибкаПриПроведении("Расчетная таблица не утверждена",Отказ,Заголовок);
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	
	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("НоменклатураНом", "НоменклатураНом");  
	СтруктураПолей.Вставить("Период", "Период");
	СтруктураПолей.Вставить("Количество", "Количество");
	СтруктураПолей.Вставить("СуммаСНДС", "СуммаСНДС");
	СтруктураПолей.Вставить("СуммаБезНДС", "СуммаБезНДС");
	СтруктураПолей.Вставить("Себестоимость", "Себестоимость");
 	СтруктураПолей.Вставить("иКоличество", "иКоличество");
	СтруктураПолей.Вставить("иСуммаСНДС", "иСуммаСНДС");
	СтруктураПолей.Вставить("иСуммаБезНДС", "иСуммаБезНДС");
	СтруктураПолей.Вставить("иСебестоимость", "иСебестоимость");

	РезультатЗапросаПоРасчетнойТаблице = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "РасчетнаяТаблица", СтруктураПолей);
	
	ТаблицаДанных = ПодготовитьТаблицу(РезультатЗапросаПоРасчетнойТаблице,СтруктураШапкиДокумента);
	
	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаДанных, Отказ, Заголовок);
							
	КонецЕсли;
КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
