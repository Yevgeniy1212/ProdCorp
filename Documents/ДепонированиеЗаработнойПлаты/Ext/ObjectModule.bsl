////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет заполнение документа на основании переданного.
//
Процедура ЗаполнитьПоЗарплатеКВыплатеОрганизаций(Основание)
	
	// Определим сумму задепонированной заработной платы.
	// Причем только те, где СпособРасчетаСуммКВыплате = ЗарплатаЗаМесяц,
	// чтобы был известен период.
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	СУММА(ЗарплатаКВыплатеЗарплата.Сумма) КАК Сумма,
	|	ЗарплатаКВыплатеЗарплата.Ссылка.Организация  КАК Организация
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеЗарплата
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеЗарплата.ФизЛицо = РанееВыплаченныеСуммы.ФизЛицо 
	|		   И ЗарплатаКВыплатеЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|		   И РанееВыплаченныеСуммы.Регистратор <> &парамРегистратор
	|
	|ГДЕ
	|	ЗарплатаКВыплатеЗарплата.Ссылка = &Ссылка И
	|	ЗарплатаКВыплатеЗарплата.ВыплаченностьЗарплаты = &Задепонировано И
	|	ЗарплатаКВыплатеЗарплата.Ссылка.СпособРасчетаСуммКВыплате = &ЗарплатаЗаМесяц И
	|	РанееВыплаченныеСуммы.ФизЛицо ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеЗарплата.Ссылка.Организация";

	Запрос.УстановитьПараметр("Ссылка",Основание);
	Запрос.УстановитьПараметр("Задепонировано",Перечисления.ВыплаченностьЗарплаты.Задепонировано);
	Запрос.УстановитьПараметр("ЗарплатаЗаМесяц",Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц);
	Запрос.УстановитьПараметр("парамРегистратор", Ссылка);

	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		СтрокаВедомость = ДепонированнаяЗаработнаяПлата.Добавить();
		СтрокаВедомость.Ведомость = Основание;	
		СтрокаВедомость.ДепонированнаяСумма	= РезультатЗапроса.Сумма;
		Организация							= РезультатЗапроса.Организация;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗарплатеКВыплатеОрганизаций()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	//так как нет печатных форм у документа, по умолчанию
	//ТабДокумент = Неопределено
	ТабДокумент = Неопределено;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;  
    	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура();

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	ЗаполнитьПоЗарплатеКВыплатеОрганизаций(Основание);
	
КонецПроцедуры

	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах.
//
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчетыРегл()

	СтруктураПолей = Новый Структура("Организация");

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейРасчетыРегл()

// Процедура проверяет корректность заполнения реквизитов документа.
//
Процедура ПроверитьЗаполнениеДокумента(Отказ, Заголовок)

	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчетыРегл(), Отказ, Заголовок);
	
	// Проверка на то, чтобы в закрываемых ведомостях не было невыплаченных значений 
	// и введенные суммы к выплате были только за один месяц, чтобы знать период 
	// взаморасчетов для депонирования.
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("НеВыплачено",Перечисления.ВыплаченностьЗарплаты.НеВыплачено);
	Запрос.УстановитьПараметр("Задепонировано",Перечисления.ВыплаченностьЗарплаты.Задепонировано);
	Запрос.УстановитьПараметр("ЗарплатаЗаМесяц",Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
	|	ВЫБОР 
	|		КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &НеВыплачено 
	|			ТОГДА ""есть строки с невыплаченной зарплатой"" 
	|		КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособРасчетаСуммКВыплате <> &ЗарплатаЗаМесяц 
	|			ТОГДА ""есть ведомости более чем за один месяц начисления"" 
	|		КОГДА НЕ (РанееВыплаченныеСуммы.ФизЛицо ЕСТЬ NULL) 
	|				И (ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &Задепонировано)
	|			ТОГДА ""на основании ведомости уже был проведен документ 'Депонирование заработной платы' № "" + РанееВыплаченныеСуммы.Регистратор.Номер
	|		ИНАЧЕ """" 
	|	КОНЕЦ КАК ОписаниеКонфликта
	|ИЗ
	|	Документ.ДепонированиеЗаработнойПлаты.ДепонированнаяЗаработнаяПлата КАК ДепонированиеЗаработнойПлаты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|		ПО ДепонированиеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.ФизЛицо = РанееВыплаченныеСуммы.ФизЛицо
	|		   И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|		   И РанееВыплаченныеСуммы.Регистратор <> &Ссылка
	|
	|ГДЕ
	|	ДепонированиеЗаработнойПлаты.Ссылка = &Ссылка
	|";
	РезультатЗапроса=Запрос.Выполнить().Выбрать();

	Пока РезультатЗапроса.Следующий() Цикл
		Если ЗначениеЗаполнено(РезультатЗапроса.ОписаниеКонфликта) Тогда
			Сообщить(ОбщегоНазначения.ПредставлениеДокументаПриПроведении(РезультатЗапроса.Ведомость) + ": " + РезультатЗапроса.ОписаниеКонфликта);
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеДокумента()

// Процедура формирования движений по регистрам взаиморасчетов с работниками организаций.
//
Процедура ДвиженияПоЗарплате()
	
	СтруктураПризнаковРапсределенияНалогов = ПроцедурыНалоговогоУчета.ПолучитьПризнакиРаспределенияНалогов(Организация, Дата);
	
	РаспределятьНалогиПоСтруктурнымЕдиницам = СтруктураПризнаковРапсределенияНалогов.РаспределятьНалогиПоСтруктурнымЕдиницам;
	РаспределятьНалогиПоПодразделениямОрганизаций = СтруктураПризнаковРапсределенияНалогов.РаспределятьНалогиПоПодразделениямОрганизаций;

	Запрос = Новый Запрос;
	МестоРаботыТекст="";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	// По регистру ВзаиморасчетыСДепонентамиОрганизаций
	ИмяИсточникаФизЛица = "ЗарплатаКВыплатеОрганизацииЗарплата.";
	ИмяИсточникаПериодВзаиморасчетов = "";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ) КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК ФизЛицо,
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК Сумма,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Номер КАК Номер,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Дата КАК Дата,
	|	&Организация КАК Организация,
	|	&Организация КАК СтруктурнаяЕдиница,
	|	&Организация КАК СтруктурнаяЕдиницаПоМестуРаботы,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы,	
	|	&Организация КАК Налогоплательщик,
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК ОстатокКВыплате
	|ИЗ
	|	Документ.ДепонированиеЗаработнойПлаты.ДепонированнаяЗаработнаяПлата КАК ДепонированиеЗарплаты
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = ДепонированиеЗарплаты.Ведомость
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.ФизЛицо = РанееВыплаченныеСуммы.ФизЛицо 
	|		   И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|		   И РанееВыплаченныеСуммы.Регистратор <> &Ссылка
	|
	|
	|ГДЕ
	|	ДепонированиеЗарплаты.Ссылка = &Ссылка
	|	И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
	|	И РанееВыплаченныеСуммы.ФизЛицо ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО 
	|	НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ),
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
	|";

	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		// получим сведения о структурной единице и налогоплательщике по фактическим остаткам зарплаты
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗарплатаКВыплатеОрганизацииЗарплата.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ) КАК Период
		|ИЗ
		|	Документ.ДепонированиеЗаработнойПлаты.ДепонированнаяЗаработнаяПлата КАК ДепонированиеЗарплаты
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = ДепонированиеЗарплаты.Ведомость
		|
		|ГДЕ
		|	ДепонированиеЗарплаты.Ссылка = &Ссылка
		|";
	
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекст, Организация, Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
	
		ИмяИсточникаФизЛица = "ДанныеДокумента.";
		ИмяИсточникаПериодВзаиморасчетов = "ДанныеДокумента.";
		
		ТекстЗапроса = МестоРаботыТекст + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеДокумента.ПериодВзаиморасчетов,
		|	ДанныеДокумента.ФизЛицо,
		|	ДанныеДокумента.Сумма,
		|	ДанныеДокумента.Ведомость,
		|	ДанныеДокумента.Номер,
		|	ДанныеДокумента.Дата,
		|	ДанныеДокумента.Организация,
		|	ВЫБОР
		|		КОГДА НЕ (ВзаиморасчетыСРаботниками.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ВзаиморасчетыСРаботниками.СтруктурнаяЕдиница
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &Организация
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &Организация
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (ВзаиморасчетыСРаботниками.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ВзаиморасчетыСРаботниками.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	ВзаиморасчетыСРаботниками.Налогоплательщик,
		|	ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток КАК ОстатокКВыплате
		|
		|ИЗ
		|	(" + СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "") + ") КАК ДанныеДокумента
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
		|			&Дата,
		|			Организация = &Организация
		|			И ФизЛицо В (ВЫБРАТЬ 
		|								ЗарплатаКВыплатеОрганизацииЗарплата.ФизЛицо
		|							ИЗ
		|								Документ.ДепонированиеЗаработнойПлаты.ДепонированнаяЗаработнаяПлата КАК ДепонированиеЗарплаты
		|								ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|									ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = ДепонированиеЗарплаты.Ведомость
		|							ГДЕ
		|								ДепонированиеЗарплаты.Ссылка = &Ссылка)) КАК ВзаиморасчетыСРаботниками
		|		ПО ДанныеДокумента.ФизЛицо = ВзаиморасчетыСРаботниками.ФизЛицо
		|			И ДанныеДокумента.ПериодВзаиморасчетов = НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов, МЕСЯЦ)
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
		|		ПО ДанныеДокумента.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ДанныеДокумента.ПериодВзаиморасчетов = МестоРаботы.Период
		|";
		
	КонецЕсли;
	
	// упорядочим для списания по ФИФО
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	" + ИмяИсточникаФизЛица + "ФизЛицо,
	|	" + ИмяИсточникаПериодВзаиморасчетов + "ПериодВзаиморасчетов,
	|	Ведомость
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
	
	// т.к. в запросе делится по ведостям, а регистр ВзаиморасчетыСРаботникамиОрганизаций
	// не имеет измерения ведомости, то в результате запроса может быть, что для каждой ведомости
	// перечислены все комбинации СтруктурнойЕдиницы+Налогоплательщика за соответствующий период взаиморасчетов,
	// поэтому необходимо вести таблицу "реальных" остатков (с учетом уже закрытых сумм по предыдущим ведомостям
	// на предшествующих шагах цикла списания.
	ТаблицаСписанныхОстатков = Новый ТаблицаЗначений;
	ТаблицаСписанныхОстатков.Колонки.Добавить("СтруктурнаяЕдиница");
	ТаблицаСписанныхОстатков.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаСписанныхОстатков.Колонки.Добавить("Налогоплательщик");
	ТаблицаСписанныхОстатков.Колонки.Добавить("ОстатокКВыплате");
	
	ТаблицаСписанныхОстатков.Индексы.Добавить("СтруктурнаяЕдиница, ПодразделениеОрганизации, Налогоплательщик");
	СтруктураПоиска = Новый Структура("СтруктурнаяЕдиница, ПодразделениеОрганизации, Налогоплательщик");
	
	Пока Результат.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
		Пока Результат.СледующийПоЗначениюПоля("ПериодВзаиморасчетов") Цикл

			// т.к. остатки из ВзаиморасчетыСРаботникамиОрганизаций берем без учета ведомости,
			// то до цикла по ведомостям надо очистить вспомогательную таблицу
			ТаблицаСписанныхОстатков.Очистить();
	
			Пока Результат.СледующийПоЗначениюПоля("Ведомость") Цикл
		
				Если Результат.Сумма = 0 Тогда
					Продолжить;
				КонецЕсли;
			
				// Регистрируем факт использования ведомости
				Движение = Движения.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Добавить();
				// Измерения
				Движение.Физлицо   = Результат.ФизЛицо;
				Движение.Ведомость = Результат.Ведомость;

				// Отражаем депонирование зарплаты в бухучете
				Проводка = Движения.Типовой.Добавить();
				
				Проводка.Период      = Дата;
				Проводка.Организация = Результат.Организация;
				Проводка.Сумма       = Результат.Сумма;
				
				Проводка.СчетДт      = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", Результат.ФизЛицо);
				
				Проводка.СчетКт      = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", Результат.ФизЛицо);

				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктурноеПодразделение, СтруктурноеПодразделение);

				Проводка.Содержание  = "Депонир. з/п по ведомости №" + Результат.Номер + " от " + Формат(Результат.Дата, "ДФ='дд.ММ.гг'");

				// теперь ФИФО по взаиморасчетам
				ОстатокКСписанию 	= Результат.Сумма;
				ТекущаяОрганизация	= Результат.Организация;
				ТекущееФизЛицо 		= Результат.ФизЛицо;
				ТекущаяСтруктурнаяЕдиницаПоМестуРаботы = Результат.СтруктурнаяЕдиницаПоМестуРаботы;
				ТекущееПодразделениеОрганизацииПоМестуРаботы = Результат.ПодразделениеОрганизацииПоМестуРаботы;
				ТекущийПериодВзаиморасчетов	= Результат.ПериодВзаиморасчетов;
				ТекущаяВедомость	= Результат.Ведомость;
				
				Пока Результат.Следующий()
						И Результат.ФизЛицо = ТекущееФизЛицо 
						И Результат.ПериодВзаиморасчетов = ТекущийПериодВзаиморасчетов 
						И Результат.Ведомость = ТекущаяВедомость 
						И ОстатокКСписанию <> 0
						И Результат.Налогоплательщик <> NULL Цикл 
				
					// определим фактические суммы остатков (с учетом списанных на предыдущих шагах цикла)
					ОстатокКВыплате 					= Результат.ОстатокКВыплате;
					СтруктураПоиска.СтруктурнаяЕдиница 	= Результат.СтруктурнаяЕдиница;
					СтруктураПоиска.ПодразделениеОрганизации = Результат.ПодразделениеОрганизации;
					СтруктураПоиска.Налогоплательщик	= Результат.Налогоплательщик;
					
					НайденныеСтроки = ТаблицаСписанныхОстатков.НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтроки.Количество() > 0 Тогда
						ОстатокКВыплате = ОстатокКВыплате - НайденныеСтроки[0].ОстатокКВыплате;
					КонецЕсли;
					
					СуммаКСписанию = Мин(ОстатокКСписанию, ОстатокКВыплате);
					
					// запомним, какую часть суммы уже списали
					Если НайденныеСтроки.Количество() > 0 Тогда
						НайденныеСтроки[0].ОстатокКВыплате = НайденныеСтроки[0].ОстатокКВыплате + СуммаКСписанию;
					Иначе
						НоваяСтрока = ТаблицаСписанныхОстатков.Добавить();
						НоваяСтрока.СтруктурнаяЕдиница	= Результат.СтруктурнаяЕдиница;
						НоваяСтрока.ПодразделениеОрганизации = Результат.ПодразделениеОрганизации;
						НоваяСтрока.Налогоплательщик	= Результат.Налогоплательщик;
						НоваяСтрока.ОстатокКВыплате		= СуммаКСписанию;
					КонецЕсли;
					
					Если СуммаКСписанию = 0 Тогда
						// с текущей СтруктурнойЕдиницы + Налогоплательщика больше нечего списывать - ищем следущую комбинацию
						Продолжить;
					КонецЕсли;
					
					ОстатокКСписанию = ОстатокКСписанию - СуммаКСписанию;
						
					// Убираем суммы с текущих взаиморасчетов с сотрудниками
					Строка = Движения.ВзаиморасчетыСРаботникамиОрганизаций.мТаблицаДвижений.Добавить();
					
					// Свойства
					Строка.Период      			= Дата;
					Строка.ВидДвижения 			= ВидДвиженияНакопления.Расход;
					
					// Измерения
					Строка.ФизЛицо 				= Результат.ФизЛицо;
					Строка.СтруктурнаяЕдиница	= Результат.СтруктурнаяЕдиница;
					Строка.ПериодВзаиморасчетов = Результат.ПериодВзаиморасчетов;
					Строка.Организация 			= Результат.Организация;
					Строка.Налогоплательщик		= Результат.Налогоплательщик;
					//Остаток всегда списываем по подразделениям чтобы не было зависания
					Строка.ПодразделениеОрганизации = Результат.ПодразделениеОрганизации;
					
					// Ресурсы
					Строка.СуммаВзаиморасчетов 	= СуммаКСписанию;
					
					// Реквизиты
					Строка.ВидСтроки			= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Депонирование;
				
					// Ставим на депонированные суммы
					Строка = Движения.ВзаиморасчетыСДепонентамиОрганизаций.мТаблицаДвижений.Добавить();
					
					// Свойства
					Строка.Период      			= Дата;
					Строка.ВидДвижения 			= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Строка.ФизЛицо 				= Результат.ФизЛицо;
					Строка.СтруктурнаяЕдиница	= Результат.СтруктурнаяЕдиница;
					Строка.ПериодВзаиморасчетов = Результат.ПериодВзаиморасчетов;
					Строка.Организация 			= Результат.Организация;
					Строка.Налогоплательщик		= Результат.Налогоплательщик;
					//Остаток всегда списываем по подразделениям чтобы не было зависания
					Строка.ПодразделениеОрганизации = Результат.ПодразделениеОрганизации;
					
					// Ресурсы
					Строка.СуммаВзаиморасчетов 	= СуммаКСписанию;		

					// Реквизиты
					Строка.ВидСтроки			= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Депонирование;
					
				КонецЦикла;
				
				Если ОстатокКСписанию <> 0 Тогда
					// нераспределенный на структурные единицы и налогоплательщиков остаток ставим по месту работы
					
					Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ТекущаяСтруктурнаяЕдиницаПоМестуРаботы, 
																					ТекущаяОрганизация,
																					ИсчислениеНалоговСтруктурныхЕдиниц,
																					Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
					
					// Убираем суммы с текущих взаиморасчетов с сотрудниками
					Строка = Движения.ВзаиморасчетыСРаботникамиОрганизаций.мТаблицаДвижений.Добавить();
					
					// Свойства
					Строка.Период      			= Дата;
					Строка.ВидДвижения 			= ВидДвиженияНакопления.Расход;
					
					// Измерения
					Строка.ФизЛицо 				= ТекущееФизЛицо;
					Строка.СтруктурнаяЕдиница	= ТекущаяСтруктурнаяЕдиницаПоМестуРаботы;
					Строка.ПериодВзаиморасчетов = ТекущийПериодВзаиморасчетов;
					Строка.Организация 			= ТекущаяОрганизация;
					Строка.Налогоплательщик		= Налогоплательщик;
					//Нераспределенный остатокотносим на основное место работы, только если используется распределение
					Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда
						Строка.ПодразделениеОрганизации = ТекущееПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
					
					// Ресурсы
					Строка.СуммаВзаиморасчетов 	= ОстатокКСписанию;
					
					// Реквизиты
					Строка.ВидСтроки			= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Депонирование;
				
					// Ставим на депонированные суммы
					Строка = Движения.ВзаиморасчетыСДепонентамиОрганизаций.мТаблицаДвижений.Добавить();
					
					// Свойства
					Строка.Период      			= Дата;
					Строка.ВидДвижения 			= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Строка.ФизЛицо 				= ТекущееФизЛицо;
					Строка.СтруктурнаяЕдиница	= ТекущаяСтруктурнаяЕдиницаПоМестуРаботы;
					Строка.ПериодВзаиморасчетов = ТекущийПериодВзаиморасчетов;
					Строка.Организация 			= ТекущаяОрганизация;
					Строка.Налогоплательщик		= Налогоплательщик;
					//Нераспределенный остатокотносим на основное место работы, только если используется распределение
					Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда
						Строка.ПодразделениеОрганизации = ТекущееПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
					
					// Ресурсы
					Строка.СуммаВзаиморасчетов 	= ОстатокКСписанию;		

					// Реквизиты
					Строка.ВидСтроки			= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Депонирование;
					
				КонецЕсли;
					
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры // ДвиженияПоЗарплате()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения"
//
Процедура ОбработкаЗаполнения(Основание)
    // Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
		
		ЗаполнитьПоДокументуОснования(Основание);
	КонецЕсли;	
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, Режим)

	// создадим таблицы движений по структуре совпадающие со структрой регистров накопления
	Для Каждого НаборЗаписей Из Движения Цикл
		Если Метаданные.РегистрыНакопления.Содержит(НаборЗаписей.Метаданные()) Тогда
			НаборЗаписей.мТаблицаДвижений = НаборЗаписей.ВыгрузитьКолонки();
		КонецЕсли;
	Конеццикла;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	ПроверитьЗаполнениеДокумента(Отказ, Заголовок);

	Если Не Отказ Тогда

		ДвиженияПоЗарплате();

		// свернем таблицы регистров накопления и запишим их в наборы записей
		Для Каждого НаборЗаписей Из Движения Цикл
			Если Метаданные.РегистрыНакопления.Содержит(НаборЗаписей.Метаданные()) Тогда
				ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(НаборЗаписей);
				НаборЗаписей.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
				НаборЗаписей.Загрузить(НаборЗаписей.мТаблицаДвижений);
			КонецЕсли;
		Конеццикла;

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 

мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();