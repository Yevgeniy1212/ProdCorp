Перем мДлинаСуток;
Перем СоответствиеВалютныеСпособыРасчета;
Перем мСписокНедоступныхРасчетов;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура();
	
	КадровоеПеремещениеПереопределяемый.ДополнитьСтруктуруПечатныхФорм(СтруктураПечатныхФорм, ЭтотОбъект);

	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	ТабДокумент = КадровоеПеремещениеПереопределяемый.ПечатьДополнительныхФорм(ИмяМакета, ЭтотОбъект);

	Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,"Кадровое перемещение "));

КонецФункции // Печать()

#КонецЕсли

// Заполняет начисления и удержания по схемам мотивации
//
Процедура ЗаполнениеПоСхемамМотивации(ИмяТабличнойЧасти = "") Экспорт
	
	Если ИмяТабличнойЧасти = "Начисления" ИЛИ ИмяТабличнойЧасти = "" Тогда
		Начисления.Очистить();
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Взыскания" ИЛИ ИмяТабличнойЧасти = "" Тогда
		Взыскания.Очистить();
	КонецЕсли;
	
	// заполним табличные части Начисления и Взыскания
	НачисленияИВзыскания = ЗаполнениеДокументов.ПолучитьТаблицуДействийСУправленческимиНачислениями(Работники.Выгрузить(), Ссылка, Дата);
	
	Если ИмяТабличнойЧасти = "Начисления" Тогда
		СтрокиНачисленийВзысканий = НачисленияИВзыскания.НайтиСтроки(Новый Структура("ЭтоНачисление", Истина));
	ИначеЕсли ИмяТабличнойЧасти = "Взыскания" Тогда
		СтрокиНачисленийВзысканий = НачисленияИВзыскания.НайтиСтроки(Новый Структура("ЭтоНачисление", Ложь));
	Иначе
		СтрокиНачисленийВзысканий = НачисленияИВзыскания;
	КонецЕсли;
	
	Для Каждого СтрокаНачисленийВзысканий Из СтрокиНачисленийВзысканий Цикл
		Если СтрокаНачисленийВзысканий.ЭтоНачисление Тогда
			НоваяСтрока = Начисления.Добавить();
		Иначе
			НоваяСтрока = Взыскания.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисленийВзысканий);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет строки в табличные части "Начисления" и "Взыскания" на основе данных строки
//  табличной части "Работники"
//
Процедура ДобавитьНачисленияПоСтроке(СтрокаТабличнойЧасти) Экспорт
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СтрокаТабличнойЧасти);
	
	ДействияСНачислениями = ЗаполнениеДокументов.ПолучитьТаблицуДействийСУправленческимиНачислениями(Работники.Выгрузить(МассивСтрок), Ссылка, Дата);

	СтруктураПоиска = Новый Структура("Физлицо, ВидРасчета");
	
	Для Каждого СтрокаТаблицы Из ДействияСНачислениями Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		Если СтрокаТаблицы.ЭтоНачисление Тогда
			МассивНачислений = Начисления.НайтиСтроки(СтруктураПоиска);
		Иначе
			МассивНачислений = Взыскания.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		
		Если МассивНачислений.Количество() = 0 Тогда
			Если СтрокаТаблицы.ЭтоНачисление Тогда
				ЗаполнитьЗначенияСвойств(Начисления.Добавить(), СтрокаТаблицы);
			Иначе
				ЗаполнитьЗначенияСвойств(Взыскания.Добавить(), СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
	КадровоеПеремещениеПереопределяемый.ДобавитьДополнительноПоСтроке(ЭтотОбъект, СтрокаТабличнойЧасти);
	
КонецПроцедуры // ДобавитьНачисленияПоСтроке()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|Выбрать РАЗРЕШЕННЫЕ
	|	Дата, 
	| 	Ссылка 
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Работники" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботники(Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
   	Запрос.УстановитьПараметр("ПустойВидРасчета", ПланыВидовРасчета.УправленческиеНачисления.ПустаяСсылка());
   	Запрос.УстановитьПараметр("Прекратить", Перечисления.ВидыДействияСНачислением.Прекратить);

	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "Работники": 
	// 1. Выборка "ТЧРаботники": 
	//		Выбираются строки т.ч. "Работники" документа.  
	// 2. Выборка "ДанныеПоРаботникуДоНазначения": 
	//		Для каждой строки ТЧРаботники выполняем срез по регистру РегистрСведенийРаботники на дату ДатаНачала
	//		для выполнения движений и проверки "Работает ли работник на дату перемещения"
	//		(Использует данные выборки "ДатыПоследнегоДвиженияРаботника")
	// 3. Выборка "УчетОсновногоЗаработкаДоНазначения": 
	//		Для каждой строки ТЧРаботники выполняем срез по регистру УчетЗаработкаРаботников на дату ДатаНачала
	//		для восстановления данных по отражению затрат в учете на дату ДатаОкончания+1
	//		(Использует данные выборки "ДатыПоследнихДвиженийНачисленийРаботников")
	// 4. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки, имеющие пересекающийся период действия
	//
	// Вторая часть запроса - вид строки запроса "Начисления": 
	// 1. Выборка "КадровоеПеремещениеНачисления":
	//		Выбираются строки т.ч. "Начисления" документа 
	// 1. Выборка "КадровоеПеремещениеРаботники":
	//		Из строк т.ч. "Работники"  выбираются даты перемещения 
	// 3. Выборка "НачисленияДоНазначения": 
	//		Для каждой строки т.ч. "Работники" выполняем срез по регистру ПлановыеНачисленияРаботников на дату ДатаНачала
	//		для восстановления основного вида расчета на момент окончания перемещения
	//		(Использует данные выборки "ДатыПоследнихДвиженийНачисленийРаботников")
	// 4. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки, имеющие повторяющиеся виды начислений
	//
	// Третья часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	// 1. Выборка "ТЧРаботники":
	//		Выбираются строки документа 
	// 2. Выборка "РегистрСведенийРаботники":
	//		Для каждой строки ТЧРаботники ищем движения по регистру РегистрСведенийРаботники за период [ДатаНачала, ДатаОкончания]
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.ВидРасчета,
	|	МАКСИМУМ(Показатели.НомерСтроки) КАК КоличествоПоказателей,
	|	Показатели1.Показатель.Наименование КАК Показатель1Наименование,
	|	Показатели2.Показатель.Наименование КАК Показатель2Наименование,
	|	Показатели3.Показатель.Наименование КАК Показатель3Наименование,
	|	Показатели4.Показатель.Наименование КАК Показатель4Наименование,
	|	Показатели5.Показатель.Наименование КАК Показатель5Наименование,
	|	Показатели6.Показатель.Наименование КАК Показатель6Наименование,
	|	Показатели1.Показатель.ТипПоказателя КАК Показатель1ТипПоказателя,
	|	Показатели2.Показатель.ТипПоказателя КАК Показатель2ТипПоказателя,
	|	Показатели3.Показатель.ТипПоказателя КАК Показатель3ТипПоказателя,
	|	Показатели4.Показатель.ТипПоказателя КАК Показатель4ТипПоказателя,
	|	Показатели5.Показатель.ТипПоказателя КАК Показатель5ТипПоказателя,
	|	Показатели6.Показатель.ТипПоказателя КАК Показатель6ТипПоказателя,
	|	Показатели1.Показатель.ВозможностьИзменения КАК Показатель1ВозможностьИзменения,
	|	Показатели2.Показатель.ВозможностьИзменения КАК Показатель2ВозможностьИзменения,
	|	Показатели3.Показатель.ВозможностьИзменения КАК Показатель3ВозможностьИзменения,
	|	Показатели4.Показатель.ВозможностьИзменения КАК Показатель4ВозможностьИзменения,
	|	Показатели5.Показатель.ВозможностьИзменения КАК Показатель5ВозможностьИзменения,
	|	Показатели6.Показатель.ВозможностьИзменения КАК Показатель6ВозможностьИзменения,
	|	Показатели1.Показатель.Валюта КАК Показатель1Валюта,
	|	Показатели2.Показатель.Валюта КАК Показатель2Валюта,
	|	Показатели3.Показатель.Валюта КАК Показатель3Валюта,
	|	Показатели4.Показатель.Валюта КАК Показатель4Валюта,
	|	Показатели5.Показатель.Валюта КАК Показатель5Валюта,
	|	Показатели6.Показатель.Валюта КАК Показатель6Валюта,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели1.Показатель.Предопределенный КАК Показатель1Предопределенный,
	|	Показатели2.Показатель.Предопределенный КАК Показатель2Предопределенный,
	|	Показатели3.Показатель.Предопределенный КАК Показатель3Предопределенный,
	|	Показатели4.Показатель.Предопределенный КАК Показатель4Предопределенный,
	|	Показатели5.Показатель.Предопределенный КАК Показатель5Предопределенный,
	|	Показатели6.Показатель.Предопределенный КАК Показатель6Предопределенный
	|ПОМЕСТИТЬ ВТ_ПоказателиНачислений
	|ИЗ
	|	Документ.КадровоеПеремещение.Начисления КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели1
	|		ПО ТЧНачисления.ВидРасчета = Показатели1.Ссылка
	|			И (Показатели1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели2
	|		ПО ТЧНачисления.ВидРасчета = Показатели2.Ссылка
	|			И (Показатели2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели3
	|		ПО ТЧНачисления.ВидРасчета = Показатели3.Ссылка
	|			И (Показатели3.НомерСтроки = 3)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели4
	|		ПО ТЧНачисления.ВидРасчета = Показатели4.Ссылка
	|			И (Показатели4.НомерСтроки = 4)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели5
	|		ПО ТЧНачисления.ВидРасчета = Показатели5.Ссылка
	|			И (Показатели5.НомерСтроки = 5)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели6
	|		ПО ТЧНачисления.ВидРасчета = Показатели6.Ссылка
	|			И (Показатели6.НомерСтроки = 6)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели
	|		ПО ТЧНачисления.ВидРасчета = Показатели.Ссылка
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧНачисления.НомерСтроки,
	|	ТЧНачисления.ВидРасчета,
	|	Показатели1.Показатель.Наименование,
	|	Показатели2.Показатель.Наименование,
	|	Показатели3.Показатель.Наименование,
	|	Показатели4.Показатель.Наименование,
	|	Показатели5.Показатель.Наименование,
	|	Показатели6.Показатель.Наименование,
	|	Показатели1.Показатель.ТипПоказателя,
	|	Показатели2.Показатель.ТипПоказателя,
	|	Показатели3.Показатель.ТипПоказателя,
	|	Показатели4.Показатель.ТипПоказателя,
	|	Показатели5.Показатель.ТипПоказателя,
	|	Показатели6.Показатель.ТипПоказателя,
	|	Показатели1.Показатель.ВозможностьИзменения,
	|	Показатели2.Показатель.ВозможностьИзменения,
	|	Показатели3.Показатель.ВозможностьИзменения,
	|	Показатели4.Показатель.ВозможностьИзменения,
	|	Показатели5.Показатель.ВозможностьИзменения,
	|	Показатели6.Показатель.ВозможностьИзменения,
	|	Показатели1.Показатель.Валюта,
	|	Показатели2.Показатель.Валюта,
	|	Показатели3.Показатель.Валюта,
	|	Показатели4.Показатель.Валюта,
	|	Показатели5.Показатель.Валюта,
	|	Показатели6.Показатель.Валюта,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели1.Показатель.Предопределенный,
	|	Показатели2.Показатель.Предопределенный,
	|	Показатели3.Показатель.Предопределенный,
	|	Показатели4.Показатель.Предопределенный,
	|	Показатели5.Показатель.Предопределенный,
	|	Показатели6.Показатель.Предопределенный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧВзыскания.НомерСтроки КАК НомерСтроки,
	|	ТЧВзыскания.ВидРасчета,
	|	МАКСИМУМ(Показатели.НомерСтроки) КАК КоличествоПоказателей,
	|	Показатели1.Показатель.Наименование КАК Показатель1Наименование,
	|	Показатели2.Показатель.Наименование КАК Показатель2Наименование,
	|	Показатели3.Показатель.Наименование КАК Показатель3Наименование,
	|	Показатели4.Показатель.Наименование КАК Показатель4Наименование,
	|	Показатели5.Показатель.Наименование КАК Показатель5Наименование,
	|	Показатели6.Показатель.Наименование КАК Показатель6Наименование,
	|	Показатели1.Показатель.ТипПоказателя КАК Показатель1ТипПоказателя,
	|	Показатели2.Показатель.ТипПоказателя КАК Показатель2ТипПоказателя,
	|	Показатели3.Показатель.ТипПоказателя КАК Показатель3ТипПоказателя,
	|	Показатели4.Показатель.ТипПоказателя КАК Показатель4ТипПоказателя,
	|	Показатели5.Показатель.ТипПоказателя КАК Показатель5ТипПоказателя,
	|	Показатели6.Показатель.ТипПоказателя КАК Показатель6ТипПоказателя,
	|	Показатели1.Показатель.ВозможностьИзменения КАК Показатель1ВозможностьИзменения,
	|	Показатели2.Показатель.ВозможностьИзменения КАК Показатель2ВозможностьИзменения,
	|	Показатели3.Показатель.ВозможностьИзменения КАК Показатель3ВозможностьИзменения,
	|	Показатели4.Показатель.ВозможностьИзменения КАК Показатель4ВозможностьИзменения,
	|	Показатели5.Показатель.ВозможностьИзменения КАК Показатель5ВозможностьИзменения,
	|	Показатели6.Показатель.ВозможностьИзменения КАК Показатель6ВозможностьИзменения,
	|	Показатели1.Показатель.Валюта КАК Показатель1Валюта,
	|	Показатели2.Показатель.Валюта КАК Показатель2Валюта,
	|	Показатели3.Показатель.Валюта КАК Показатель3Валюта,
	|	Показатели4.Показатель.Валюта КАК Показатель4Валюта,
	|	Показатели5.Показатель.Валюта КАК Показатель5Валюта,
	|	Показатели6.Показатель.Валюта КАК Показатель6Валюта,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели1.Показатель.Предопределенный КАК Показатель1Предопределенный,
	|	Показатели2.Показатель.Предопределенный КАК Показатель2Предопределенный,
	|	Показатели3.Показатель.Предопределенный КАК Показатель3Предопределенный,
	|	Показатели4.Показатель.Предопределенный КАК Показатель4Предопределенный,
	|	Показатели5.Показатель.Предопределенный КАК Показатель5Предопределенный,
	|	Показатели6.Показатель.Предопределенный КАК Показатель6Предопределенный
	|ПОМЕСТИТЬ ВТ_ПоказателиВзысканий
	|ИЗ
	|	Документ.КадровоеПеремещение.Взыскания КАК ТЧВзыскания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели1
	|		ПО ТЧВзыскания.ВидРасчета = Показатели1.Ссылка
	|			И (Показатели1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели2
	|		ПО ТЧВзыскания.ВидРасчета = Показатели2.Ссылка
	|			И (Показатели2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели3
	|		ПО ТЧВзыскания.ВидРасчета = Показатели3.Ссылка
	|			И (Показатели3.НомерСтроки = 3)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели4
	|		ПО ТЧВзыскания.ВидРасчета = Показатели4.Ссылка
	|			И (Показатели4.НомерСтроки = 4)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели5
	|		ПО ТЧВзыскания.ВидРасчета = Показатели5.Ссылка
	|			И (Показатели5.НомерСтроки = 5)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели6
	|		ПО ТЧВзыскания.ВидРасчета = Показатели6.Ссылка
	|			И (Показатели6.НомерСтроки = 6)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели
	|		ПО ТЧВзыскания.ВидРасчета = Показатели.Ссылка
	|ГДЕ
	|	ТЧВзыскания.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧВзыскания.НомерСтроки,
	|	ТЧВзыскания.ВидРасчета,
	|	Показатели1.Показатель.Наименование,
	|	Показатели2.Показатель.Наименование,
	|	Показатели3.Показатель.Наименование,
	|	Показатели4.Показатель.Наименование,
	|	Показатели5.Показатель.Наименование,
	|	Показатели6.Показатель.Наименование,
	|	Показатели1.Показатель.ТипПоказателя,
	|	Показатели2.Показатель.ТипПоказателя,
	|	Показатели3.Показатель.ТипПоказателя,
	|	Показатели4.Показатель.ТипПоказателя,
	|	Показатели5.Показатель.ТипПоказателя,
	|	Показатели6.Показатель.ТипПоказателя,
	|	Показатели1.Показатель.ВозможностьИзменения,
	|	Показатели2.Показатель.ВозможностьИзменения,
	|	Показатели3.Показатель.ВозможностьИзменения,
	|	Показатели4.Показатель.ВозможностьИзменения,
	|	Показатели5.Показатель.ВозможностьИзменения,
	|	Показатели6.Показатель.ВозможностьИзменения,
	|	Показатели1.Показатель.Валюта,
	|	Показатели2.Показатель.Валюта,
	|	Показатели3.Показатель.Валюта,
	|	Показатели4.Показатель.Валюта,
	|	Показатели5.Показатель.Валюта,
	|	Показатели6.Показатель.Валюта,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели1.Показатель.Предопределенный,
	|	Показатели2.Показатель.Предопределенный,
	|	Показатели3.Показатель.Предопределенный,
	|	Показатели4.Показатель.Предопределенный,
	|	Показатели5.Показатель.Предопределенный,
	|	Показатели6.Показатель.Предопределенный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""Работники"" КАК ВидСтрокиЗапроса,
	|	ТЧРаботники.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботники.ФизЛицо,
	|	ТЧРаботники.ФизЛицо.Наименование КАК ФизЛицоНаименование,
	|	ТЧРаботники.НовоеПодразделение,
	|	ТЧРаботники.НоваяДолжность,
	|	ТЧРаботники.ЗанимаемыхСтавок,
	|	ТЧРаботники.ДатаНачала,
	|	ТЧРаботники.ДатаОкончания,
	|	ТЧРаботники.ПроизошедшееСобытие,
	|	ТЧРаботники.ГрафикРаботы,
	|	ТЧРаботники.СпособОтраженияВУпрУчете,
	|	ТЧРаботники.УчетНачисленийПоОрганизации,
	|	ДанныеПоРаботникуДоНазначения.Подразделение КАК ПрежнееПодразделение,
	|	ДанныеПоРаботникуДоНазначения.Должность КАК ПрежняяДолжность,
	|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ПрежняяСтавка,
	|	ДанныеПоРаботникуДоНазначения.ГрафикРаботы КАК ПрежнийГрафикРаботы,
	|	УчетОсновногоЗаработкаДоНазначения.СпособОтраженияВУпрУчете КАК ПрежнийСпособОтраженияВУпрУчете,
	|	УчетОсновногоЗаработкаДоНазначения.УчетНачисленийПоОрганизации КАК ПрежнийУчетНачисленийПоОрганизации,
	|	ДанныеПоРаботникуДоНазначения.ДатаПоследнегоДвиженияПоРаботнику,
	|	NULL КАК Действие,
	|	NULL КАК ВидРасчета,
	|	NULL КАК ОсновноеНачисление,
	|	NULL КАК КоличествоПоказателей,
	|	NULL КАК ПроизвольнаяФормулаРасчета,
	|	NULL КАК Показатель1,
	|	NULL КАК Показатель2,
	|	NULL КАК Показатель3,
	|	NULL КАК Показатель4,
	|	NULL КАК Показатель5,
	|	NULL КАК Показатель6,
	|	NULL КАК Валюта1,
	|	NULL КАК Валюта2,
	|	NULL КАК Валюта3,
	|	NULL КАК Валюта4,
	|	NULL КАК Валюта5,
	|	NULL КАК Валюта6,
	|	NULL КАК СпособРасчета,
	|	NULL КАК Показатель1Наименование,
	|	NULL КАК Показатель2Наименование,
	|	NULL КАК Показатель3Наименование,
	|	NULL КАК Показатель4Наименование,
	|	NULL КАК Показатель5Наименование,
	|	NULL КАК Показатель6Наименование,
	|	NULL КАК Показатель1ТипПоказателя,
	|	NULL КАК Показатель2ТипПоказателя,
	|	NULL КАК Показатель3ТипПоказателя,
	|	NULL КАК Показатель4ТипПоказателя,
	|	NULL КАК Показатель5ТипПоказателя,
	|	NULL КАК Показатель6ТипПоказателя,
	|	NULL КАК Показатель1ВозможностьИзменения,
	|	NULL КАК Показатель2ВозможностьИзменения,
	|	NULL КАК Показатель3ВозможностьИзменения,
	|	NULL КАК Показатель4ВозможностьИзменения,
	|	NULL КАК Показатель5ВозможностьИзменения,
	|	NULL КАК Показатель6ВозможностьИзменения,
	|	NULL КАК ПрежнийВидРасчета,
	|	NULL КАК ПрежнийДействует,
	|	NULL КАК ПрежнийПоказатель1,
	|	NULL КАК ПрежнийПоказатель2,
	|	NULL КАК ПрежнийПоказатель3,
	|	NULL КАК ПрежнийПоказатель4,
	|	NULL КАК ПрежнийПоказатель5,
	|	NULL КАК ПрежнийПоказатель6,
	|	NULL КАК ПрежняяВалюта1,
	|	NULL КАК ПрежняяВалюта2,
	|	NULL КАК ПрежняяВалюта3,
	|	NULL КАК ПрежняяВалюта4,
	|	NULL КАК ПрежняяВалюта5,
	|	NULL КАК ПрежняяВалюта6,
	|	NULL КАК Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	NULL КАК Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	NULL КАК Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	NULL КАК Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	NULL КАК Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	NULL КАК Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	NULL КАК Показатель1Предопределенный,
	|	NULL КАК Показатель2Предопределенный,
	|	NULL КАК Показатель3Предопределенный,
	|	NULL КАК Показатель4Предопределенный,
	|	NULL КАК Показатель5Предопределенный,
	|	NULL КАК Показатель6Предопределенный,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	NULL КАК КонфликтныйДокумент
	|ИЗ
	|	Документ.КадровоеПеремещение.Работники КАК ТЧРаботники
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Работники.Подразделение КАК Подразделение,
	|			Работники.Должность КАК Должность,
	|			Работники.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|			Работники.ГрафикРаботы КАК ГрафикРаботы,
	|			ДатыПоследнегоДвиженияРаботника.НомерСтроки КАК НомерСтроки,
	|			ДатыПоследнегоДвиженияРаботника.ДатаДвижения КАК ДатаПоследнегоДвиженияПоРаботнику
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ТЧРаботники.НомерСтроки КАК НомерСтроки,
	|				МАКСИМУМ(РегистрСведенийРаботники.Период) КАК ДатаДвижения,
	|				ТЧРаботники.ФизЛицо КАК ФизЛицо
	|			ИЗ
	|				Документ.КадровоеПеремещение.Работники КАК ТЧРаботники
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК РегистрСведенийРаботники
	|					ПО (РегистрСведенийРаботники.ФизЛицо = ТЧРаботники.ФизЛицо)
	|						И (РегистрСведенийРаботники.Период <= ТЧРаботники.ДатаНачала)
	|			ГДЕ
	|				ТЧРаботники.Ссылка = &ДокументСсылка
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ТЧРаботники.НомерСтроки,
	|				ТЧРаботники.ФизЛицо) КАК ДатыПоследнегоДвиженияРаботника
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
	|				ПО ДатыПоследнегоДвиженияРаботника.ФизЛицо = Работники.ФизЛицо
	|					И ДатыПоследнегоДвиженияРаботника.ДатаДвижения = Работники.Период) КАК ДанныеПоРаботникуДоНазначения
	|		ПО ТЧРаботники.НомерСтроки = ДанныеПоРаботникуДоНазначения.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			УчетЗаработкаРаботников.СпособОтраженияВУпрУчете КАК СпособОтраженияВУпрУчете,
	|			УчетЗаработкаРаботников.УчетНачисленийПоОрганизации КАК УчетНачисленийПоОрганизации,
	|			ДатыПоследнихДвиженийУчетаЗаработкаРаботников.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(УчетЗаработкаРаботников.Период) КАК ДатаДвижения,
	|				ТЧРаботники.ФизЛицо КАК ФизЛицо,
	|				ТЧРаботники.НомерСтроки КАК НомерСтроки
	|			ИЗ
	|				Документ.КадровоеПеремещение.Работники КАК ТЧРаботники
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников КАК УчетЗаработкаРаботников
	|					ПО ТЧРаботники.ФизЛицо = УчетЗаработкаРаботников.Физлицо
	|						И (УчетЗаработкаРаботников.Период <= ТЧРаботники.ДатаНачала)
	|			ГДЕ
	|				ТЧРаботники.Ссылка = &ДокументСсылка
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ТЧРаботники.ФизЛицо,
	|				ТЧРаботники.НомерСтроки) КАК ДатыПоследнихДвиженийУчетаЗаработкаРаботников
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников КАК УчетЗаработкаРаботников
	|				ПО ДатыПоследнихДвиженийУчетаЗаработкаРаботников.ФизЛицо = УчетЗаработкаРаботников.Физлицо
	|					И ДатыПоследнихДвиженийУчетаЗаработкаРаботников.ДатаДвижения = УчетЗаработкаРаботников.Период) КАК УчетОсновногоЗаработкаДоНазначения
	|		ПО ТЧРаботники.НомерСтроки = УчетОсновногоЗаработкаДоНазначения.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботники.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧРаботники2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.КадровоеПеремещение.Работники КАК ТЧРаботники
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещение.Работники КАК ТЧРаботники2
	|				ПО (ТЧРаботники2.Ссылка = &ДокументСсылка)
	|					И ТЧРаботники.ФизЛицо = ТЧРаботники2.ФизЛицо
	|					И ТЧРаботники.НомерСтроки <> ТЧРаботники2.НомерСтроки
	|					И ТЧРаботники.ДатаНачала <= ТЧРаботники2.ДатаНачала
	|					И (ТЧРаботники.ДатаОкончания = &ПустаяДата
	|						ИЛИ ТЧРаботники.ПроизошедшееСобытие = ЛОЖЬ
	|						ИЛИ ДОБАВИТЬКДАТЕ(ТЧРаботники.ДатаОкончания, ДЕНЬ, 1) >= ТЧРаботники2.ДатаНачала)
	|		ГДЕ
	|			ТЧРаботники.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботники.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧРаботники.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|ГДЕ
	|	ТЧРаботники.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Начисления"",
	|	КадровоеПеремещениеНачисления.НомерСтроки,
	|	КадровоеПеремещениеНачисления.Физлицо,
	|	КадровоеПеремещениеРаботники.ФизЛицо.Наименование,
	|	NULL,
	|	NULL,
	|	NULL,
	|	КадровоеПеремещениеРаботники.ДатаНачала,
	|	КадровоеПеремещениеРаботники.ДатаОкончания,
	|	КадровоеПеремещениеРаботники.ПроизошедшееСобытие,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	КадровоеПеремещениеНачисления.Действие,
	|	КадровоеПеремещениеНачисления.ВидРасчета,
	|	КадровоеПеремещениеНачисления.ВидРасчета.ЗачетОтработанногоВремени,
	|	ЕСТЬNULL(ПоказателиНачислений.КоличествоПоказателей, 0),
	|	ВЫБОР
	|		КОГДА КадровоеПеремещениеНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	КадровоеПеремещениеНачисления.Показатель1,
	|	КадровоеПеремещениеНачисления.Показатель2,
	|	КадровоеПеремещениеНачисления.Показатель3,
	|	КадровоеПеремещениеНачисления.Показатель4,
	|	КадровоеПеремещениеНачисления.Показатель5,
	|	КадровоеПеремещениеНачисления.Показатель6,
	|	КадровоеПеремещениеНачисления.Валюта1,
	|	КадровоеПеремещениеНачисления.Валюта2,
	|	КадровоеПеремещениеНачисления.Валюта3,
	|	КадровоеПеремещениеНачисления.Валюта4,
	|	КадровоеПеремещениеНачисления.Валюта5,
	|	КадровоеПеремещениеНачисления.Валюта6,
	|	КадровоеПеремещениеНачисления.ВидРасчета.СпособРасчета,
	|	ПоказателиНачислений.Показатель1Наименование,
	|	ПоказателиНачислений.Показатель2Наименование,
	|	ПоказателиНачислений.Показатель3Наименование,
	|	ПоказателиНачислений.Показатель4Наименование,
	|	ПоказателиНачислений.Показатель5Наименование,
	|	ПоказателиНачислений.Показатель6Наименование,
	|	ПоказателиНачислений.Показатель1ТипПоказателя,
	|	ПоказателиНачислений.Показатель2ТипПоказателя,
	|	ПоказателиНачислений.Показатель3ТипПоказателя,
	|	ПоказателиНачислений.Показатель4ТипПоказателя,
	|	ПоказателиНачислений.Показатель5ТипПоказателя,
	|	ПоказателиНачислений.Показатель6ТипПоказателя,
	|	ПоказателиНачислений.Показатель1ВозможностьИзменения,
	|	ПоказателиНачислений.Показатель2ВозможностьИзменения,
	|	ПоказателиНачислений.Показатель3ВозможностьИзменения,
	|	ПоказателиНачислений.Показатель4ВозможностьИзменения,
	|	ПоказателиНачислений.Показатель5ВозможностьИзменения,
	|	ПоказателиНачислений.Показатель6ВозможностьИзменения,
	|	НачисленияДоНазначения.ВидРасчета,
	|	НачисленияДоНазначения.Действует,
	|	НачисленияДоНазначения.Показатель1,
	|	НачисленияДоНазначения.Показатель2,
	|	НачисленияДоНазначения.Показатель3,
	|	НачисленияДоНазначения.Показатель4,
	|	НачисленияДоНазначения.Показатель5,
	|	НачисленияДоНазначения.Показатель6,
	|	НачисленияДоНазначения.Валюта1,
	|	НачисленияДоНазначения.Валюта2,
	|	НачисленияДоНазначения.Валюта3,
	|	НачисленияДоНазначения.Валюта4,
	|	НачисленияДоНазначения.Валюта5,
	|	НачисленияДоНазначения.Валюта6,
	|	ПоказателиНачислений.Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиНачислений.Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиНачислений.Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиНачислений.Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиНачислений.Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиНачислений.Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиНачислений.Показатель1Предопределенный,
	|	ПоказателиНачислений.Показатель2Предопределенный,
	|	ПоказателиНачислений.Показатель3Предопределенный,
	|	ПоказателиНачислений.Показатель4Предопределенный,
	|	ПоказателиНачислений.Показатель5Предопределенный,
	|	ПоказателиНачислений.Показатель6Предопределенный,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	NULL
	|ИЗ
	|	Документ.КадровоеПеремещение.Начисления КАК КадровоеПеремещениеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоказателиНачислений КАК ПоказателиНачислений
	|		ПО КадровоеПеремещениеНачисления.НомерСтроки = ПоказателиНачислений.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещение.Работники КАК КадровоеПеремещениеРаботники
	|		ПО КадровоеПеремещениеНачисления.Ссылка = КадровоеПеремещениеРаботники.Ссылка
	|			И КадровоеПеремещениеНачисления.Физлицо = КадровоеПеремещениеРаботники.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДатыПоследнихДвиженийНачисленийРаботников.ФизЛицо КАК ФизЛицо,
	|			ДатыПоследнихДвиженийНачисленийРаботников.ВидРасчета КАК Измерение,
	|			ПлановыеНачисленияРаботников.ВидРасчета КАК ВидРасчета,
	|			ПлановыеНачисленияРаботников.Действует КАК Действует,
	|			ПлановыеНачисленияРаботников.Показатель1 КАК Показатель1,
	|			ПлановыеНачисленияРаботников.Валюта1 КАК Валюта1,
	|			ПлановыеНачисленияРаботников.Показатель2 КАК Показатель2,
	|			ПлановыеНачисленияРаботников.Валюта2 КАК Валюта2,
	|			ПлановыеНачисленияРаботников.Показатель3 КАК Показатель3,
	|			ПлановыеНачисленияРаботников.Валюта3 КАК Валюта3,
	|			ПлановыеНачисленияРаботников.Показатель4 КАК Показатель4,
	|			ПлановыеНачисленияРаботников.Валюта4 КАК Валюта4,
	|			ПлановыеНачисленияРаботников.Показатель5 КАК Показатель5,
	|			ПлановыеНачисленияРаботников.Валюта5 КАК Валюта5,
	|			ПлановыеНачисленияРаботников.Показатель6 КАК Показатель6,
	|			ПлановыеНачисленияРаботников.Валюта6 КАК Валюта6
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(НачисленияРаботников.Период) КАК ДатаДвижения,
	|				ТЧРаботники.ФизЛицо КАК ФизЛицо,
	|				НачисленияРаботников.ВидРасчетаИзмерение КАК ВидРасчета
	|			ИЗ
	|				Документ.КадровоеПеремещение.Работники КАК ТЧРаботники
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботников КАК НачисленияРаботников
	|					ПО ТЧРаботники.ФизЛицо = НачисленияРаботников.ФизЛицо
	|						И (НачисленияРаботников.Период <= ТЧРаботники.ДатаНачала)
	|			ГДЕ
	|				ТЧРаботники.Ссылка = &ДокументСсылка
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ТЧРаботники.ФизЛицо,
	|				НачисленияРаботников.ВидРасчетаИзмерение) КАК ДатыПоследнихДвиженийНачисленийРаботников
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботников КАК ПлановыеНачисленияРаботников
	|				ПО ДатыПоследнихДвиженийНачисленийРаботников.ФизЛицо = ПлановыеНачисленияРаботников.ФизЛицо
	|					И ДатыПоследнихДвиженийНачисленийРаботников.ДатаДвижения = ПлановыеНачисленияРаботников.Период
	|					И ДатыПоследнихДвиженийНачисленийРаботников.ВидРасчета = ПлановыеНачисленияРаботников.ВидРасчетаИзмерение) КАК НачисленияДоНазначения
	|		ПО КадровоеПеремещениеНачисления.Физлицо = НачисленияДоНазначения.ФизЛицо
	|			И (ВЫБОР
	|				КОГДА КадровоеПеремещениеНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|					ТОГДА &ПустойВидРасчета
	|				ИНАЧЕ КадровоеПеремещениеНачисления.ВидРасчета
	|			КОНЕЦ = НачисленияДоНазначения.Измерение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧНачисления2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.КадровоеПеремещение.Начисления КАК ТЧНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещение.Начисления КАК ТЧНачисления2
	|				ПО (ТЧНачисления2.Ссылка = ТЧНачисления.Ссылка)
	|					И ТЧНачисления.Физлицо = ТЧНачисления2.Физлицо
	|					И (ТЧНачисления.ВидРасчета = ТЧНачисления2.ВидРасчета
	|						ИЛИ ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|							И ТЧНачисления2.ВидРасчета.ЗачетОтработанногоВремени)
	|					И ТЧНачисления.НомерСтроки < ТЧНачисления2.НомерСтроки
	|		ГДЕ
	|			ТЧНачисления.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧНачисления.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО КадровоеПеремещениеНачисления.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|ГДЕ
	|	КадровоеПеремещениеНачисления.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Взыскания"",
	|	КадровоеПеремещениеВзыскания.НомерСтроки,
	|	КадровоеПеремещениеВзыскания.Физлицо,
	|	КадровоеПеремещениеРаботники.ФизЛицо.Наименование,
	|	NULL,
	|	NULL,
	|	NULL,
	|	КадровоеПеремещениеРаботники.ДатаНачала,
	|	КадровоеПеремещениеРаботники.ДатаОкончания,
	|	КадровоеПеремещениеРаботники.ПроизошедшееСобытие,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	КадровоеПеремещениеВзыскания.Действие,
	|	КадровоеПеремещениеВзыскания.ВидРасчета,
	|	NULL,
	|	ЕСТЬNULL(ПоказателиВзысканий.КоличествоПоказателей, 0),
	|	ВЫБОР
	|		КОГДА КадровоеПеремещениеВзыскания.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	КадровоеПеремещениеВзыскания.Показатель1,
	|	КадровоеПеремещениеВзыскания.Показатель2,
	|	КадровоеПеремещениеВзыскания.Показатель3,
	|	КадровоеПеремещениеВзыскания.Показатель4,
	|	КадровоеПеремещениеВзыскания.Показатель5,
	|	КадровоеПеремещениеВзыскания.Показатель6,
	|	КадровоеПеремещениеВзыскания.Валюта1,
	|	КадровоеПеремещениеВзыскания.Валюта2,
	|	КадровоеПеремещениеВзыскания.Валюта3,
	|	КадровоеПеремещениеВзыскания.Валюта4,
	|	КадровоеПеремещениеВзыскания.Валюта5,
	|	КадровоеПеремещениеВзыскания.Валюта6,
	|	КадровоеПеремещениеВзыскания.ВидРасчета.СпособРасчета,
	|	ПоказателиВзысканий.Показатель1Наименование,
	|	ПоказателиВзысканий.Показатель2Наименование,
	|	ПоказателиВзысканий.Показатель3Наименование,
	|	ПоказателиВзысканий.Показатель4Наименование,
	|	ПоказателиВзысканий.Показатель5Наименование,
	|	ПоказателиВзысканий.Показатель6Наименование,
	|	ПоказателиВзысканий.Показатель1ТипПоказателя,
	|	ПоказателиВзысканий.Показатель2ТипПоказателя,
	|	ПоказателиВзысканий.Показатель3ТипПоказателя,
	|	ПоказателиВзысканий.Показатель4ТипПоказателя,
	|	ПоказателиВзысканий.Показатель5ТипПоказателя,
	|	ПоказателиВзысканий.Показатель6ТипПоказателя,
	|	ПоказателиВзысканий.Показатель1ВозможностьИзменения,
	|	ПоказателиВзысканий.Показатель2ВозможностьИзменения,
	|	ПоказателиВзысканий.Показатель3ВозможностьИзменения,
	|	ПоказателиВзысканий.Показатель4ВозможностьИзменения,
	|	ПоказателиВзысканий.Показатель5ВозможностьИзменения,
	|	ПоказателиВзысканий.Показатель6ВозможностьИзменения,
	|	ВзысканияДоНазначения.ВидРасчета,
	|	ВзысканияДоНазначения.Действует,
	|	ВзысканияДоНазначения.Показатель1,
	|	ВзысканияДоНазначения.Показатель2,
	|	ВзысканияДоНазначения.Показатель3,
	|	ВзысканияДоНазначения.Показатель4,
	|	ВзысканияДоНазначения.Показатель5,
	|	ВзысканияДоНазначения.Показатель6,
	|	ВзысканияДоНазначения.Валюта1,
	|	ВзысканияДоНазначения.Валюта2,
	|	ВзысканияДоНазначения.Валюта3,
	|	ВзысканияДоНазначения.Валюта4,
	|	ВзысканияДоНазначения.Валюта5,
	|	ВзысканияДоНазначения.Валюта6,
	|	ПоказателиВзысканий.Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиВзысканий.Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиВзысканий.Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиВзысканий.Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиВзысканий.Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиВзысканий.Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиВзысканий.Показатель1Предопределенный,
	|	ПоказателиВзысканий.Показатель2Предопределенный,
	|	ПоказателиВзысканий.Показатель3Предопределенный,
	|	ПоказателиВзысканий.Показатель4Предопределенный,
	|	ПоказателиВзысканий.Показатель5Предопределенный,
	|	ПоказателиВзысканий.Показатель6Предопределенный,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	NULL
	|ИЗ
	|	Документ.КадровоеПеремещение.Взыскания КАК КадровоеПеремещениеВзыскания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоказателиВзысканий КАК ПоказателиВзысканий
	|		ПО КадровоеПеремещениеВзыскания.НомерСтроки = ПоказателиВзысканий.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещение.Работники КАК КадровоеПеремещениеРаботники
	|		ПО КадровоеПеремещениеВзыскания.Ссылка = КадровоеПеремещениеРаботники.Ссылка
	|			И КадровоеПеремещениеВзыскания.Физлицо = КадровоеПеремещениеРаботники.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДатыПоследнихДвиженийУдержанийРаботников.ФизЛицо КАК ФизЛицо,
	|			ДатыПоследнихДвиженийУдержанийРаботников.ВидРасчета КАК Измерение,
	|			ПлановыеУдержанияРаботников.ВидРасчета КАК ВидРасчета,
	|			ПлановыеУдержанияРаботников.Действует КАК Действует,
	|			ПлановыеУдержанияРаботников.Показатель1 КАК Показатель1,
	|			ПлановыеУдержанияРаботников.Валюта1 КАК Валюта1,
	|			ПлановыеУдержанияРаботников.Показатель2 КАК Показатель2,
	|			ПлановыеУдержанияРаботников.Валюта2 КАК Валюта2,
	|			ПлановыеУдержанияРаботников.Показатель3 КАК Показатель3,
	|			ПлановыеУдержанияРаботников.Валюта3 КАК Валюта3,
	|			ПлановыеУдержанияРаботников.Показатель4 КАК Показатель4,
	|			ПлановыеУдержанияРаботников.Валюта4 КАК Валюта4,
	|			ПлановыеУдержанияРаботников.Показатель5 КАК Показатель5,
	|			ПлановыеУдержанияРаботников.Валюта5 КАК Валюта5,
	|			ПлановыеУдержанияРаботников.Показатель6 КАК Показатель6,
	|			ПлановыеУдержанияРаботников.Валюта6 КАК Валюта6
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(УдержанияРаботников.Период) КАК ДатаДвижения,
	|				ТЧРаботники.ФизЛицо КАК ФизЛицо,
	|				УдержанияРаботников.ВидРасчета КАК ВидРасчета
	|			ИЗ
	|				Документ.КадровоеПеремещение.Работники КАК ТЧРаботники
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботников КАК УдержанияРаботников
	|					ПО ТЧРаботники.ФизЛицо = УдержанияРаботников.ФизЛицо
	|						И (УдержанияРаботников.Период <= ТЧРаботники.ДатаНачала)
	|			ГДЕ
	|				ТЧРаботники.Ссылка = &ДокументСсылка
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ТЧРаботники.ФизЛицо,
	|				УдержанияРаботников.ВидРасчета) КАК ДатыПоследнихДвиженийУдержанийРаботников
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботников КАК ПлановыеУдержанияРаботников
	|				ПО ДатыПоследнихДвиженийУдержанийРаботников.ФизЛицо = ПлановыеУдержанияРаботников.ФизЛицо
	|					И ДатыПоследнихДвиженийУдержанийРаботников.ДатаДвижения = ПлановыеУдержанияРаботников.Период
	|					И ДатыПоследнихДвиженийУдержанийРаботников.ВидРасчета = ПлановыеУдержанияРаботников.ВидРасчета) КАК ВзысканияДоНазначения
	|		ПО КадровоеПеремещениеВзыскания.Физлицо = ВзысканияДоНазначения.ФизЛицо
	|			И КадровоеПеремещениеВзыскания.ВидРасчета = ВзысканияДоНазначения.ВидРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧВзыскания.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧВзыскания2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.КадровоеПеремещение.Взыскания КАК ТЧВзыскания
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещение.Взыскания КАК ТЧВзыскания2
	|				ПО (ТЧВзыскания2.Ссылка = ТЧВзыскания.Ссылка)
	|					И ТЧВзыскания.Физлицо = ТЧВзыскания2.Физлицо
	|					И ТЧВзыскания.ВидРасчета = ТЧВзыскания2.ВидРасчета
	|					И ТЧВзыскания.НомерСтроки < ТЧВзыскания2.НомерСтроки
	|		ГДЕ
	|			ТЧВзыскания.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧВзыскания.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО КадровоеПеремещениеВзыскания.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|ГДЕ
	|	КадровоеПеремещениеВзыскания.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""КонфликтныйДокумент"",
	|	ТЧРаботники.НомерСтроки,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	РегистрСведенийРаботники.Регистратор.Представление
	|ИЗ
	|	Документ.КадровоеПеремещение.Работники КАК ТЧРаботники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК РегистрСведенийРаботники
	|		ПО (РегистрСведенийРаботники.ФизЛицо = ТЧРаботники.ФизЛицо)
	|			И (ТЧРаботники.ПроизошедшееСобытие = ИСТИНА
	|					И (РегистрСведенийРаботники.Период МЕЖДУ ТЧРаботники.ДатаНачала И ДОБАВИТЬКДАТЕ(ТЧРаботники.ДатаОкончания, ДЕНЬ, 1))
	|				ИЛИ РегистрСведенийРаботники.Период = ТЧРаботники.ДатаНачала)
	|ГДЕ
	|	ТЧРаботники.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
				   
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
			   
КонецФункции // СформироватьЗапросПоРаботники()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа.
//  Отказ        - флаг отказа в проведении.
//	Заголовок	 - Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Работники" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам. 
//  Отказ        - флаг отказа в проведении.
//	Заголовок	 - Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоСтрокамДокумента, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналу)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Сотрудники"": ";
	
	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "Работники" Тогда

		// ФизЛицо
		НетФизЛица = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо);
		Если НетФизЛица Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
		КонецЕсли;
		
		// ДатаНачала
		НетДатыНачала = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала);
		Если НетДатыНачала Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала кадрового перемещения!", Отказ, Заголовок);
		КонецЕсли;

		// Подразделение
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.НовоеПодразделение) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбрано подразделение!", Отказ, Заголовок);
		КонецЕсли;

		// Должность
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.НоваяДолжность) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбрана должность!", Отказ, Заголовок);
		КонецЕсли;  

		// Количество
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указано количество ставок!", Отказ, Заголовок);
		КонецЕсли;

		// ГрафикРаботы
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы)  Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан рабочий график!", Отказ, Заголовок);
		КонецЕсли;

		Если НетФизЛица ИЛИ НетДатыНачала Тогда
			Возврат; // Дальше не проверяем
		КонецЕсли;	

		// ДатаОкончания
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) И ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата начала перемещения не может превышать дату окончания!", Отказ, Заголовок);
		КонецЕсли;

		// Проверка: ранее работник должен быть принят на работу
		Если ВыборкаПоСтрокамДокумента.ПрежняяСтавка = NULL Тогда
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.ФизЛицоНаименование + " еще не принят на работу!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ПрежняяСтавка = 0 Тогда	
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.ФизЛицоНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
		КонецЕсли; 

		// Проверка: противоречие другой строке документа
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			СтрокаСообщениеОбОшибке = "период действия назначения пересекается с периодом действия строки " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + "!"; 
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;	

	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "Начисления" Тогда	
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
		""" табл. части ""Начисления"": ";

		НетФизЛица = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо);
		Если НетФизЛица Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
		Иначе
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицоНаименование) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "указан сотрудник, отсутствующее в списке сотрудников!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		// Действие
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Действие) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указано действие!", Отказ, Заголовок);
		КонецЕсли;
		
		// ВидРасчета
		НетВР = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета);
		Если НетВР Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указано начисление!", Отказ, Заголовок);
		ИначеЕсли мСписокНедоступныхРасчетов.НайтиПоЗначению(ВыборкаПоСтрокамДокумента.ВидРасчета) <> Неопределено Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "указанный вид расчета нельзя назначать в качестве планового!", Отказ, Заголовок);
		ИначеЕсли (ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Начать или ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Изменить) Тогда	
			
			ПроведениеРасчетов.ПроверкаПоказателейВПлановыхНачислениях(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, Ложь, Отказ, Заголовок, Истина, СоответствиеВалютныеСпособыРасчета);
	        			
		КонецЕсли;
		
		// Проверка: противоречие другой строке документа
		Если НЕ НетВР И НЕ НетФизЛица И ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			Если ВыборкаПоСтрокамДокумента.ОсновноеНачисление Тогда
				СтрокаСообщениеОбОшибке = "основное начисление сотрудника следует редактировать в одной строке (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
			Иначе
				СтрокаСообщениеОбОшибке = "сотруднику не может быть назначено одно и тоже начисление дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
			КонецЕсли;
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;	
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "Взыскания" Тогда	
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
		""" табл. части ""Взыскания"": ";

		НетФизЛица = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо);
		Если НетФизЛица Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
		Иначе
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицоНаименование) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "указан сотрудник, отсутствующий в списке сотрудников!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		// Действие
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Действие) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указано действие!", Отказ, Заголовок);
		КонецЕсли;
		
		// ВидРасчета
		НетВР = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета);
		Если НетВР Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указано взыскания!", Отказ, Заголовок);
		ИначеЕсли мСписокНедоступныхРасчетов.НайтиПоЗначению(ВыборкаПоСтрокамДокумента.ВидРасчета) <> Неопределено Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "указанный вид расчета нельзя назначать в качестве планового!", Отказ, Заголовок);
		ИначеЕсли (ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Начать или ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Изменить) Тогда	

			ПроведениеРасчетов.ПроверкаПоказателейВПлановыхНачислениях(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, Ложь, Отказ, Заголовок, Истина, СоответствиеВалютныеСпособыРасчета);
			
		КонецЕсли;
		
		// Проверка: противоречие другой строке документа
		Если НЕ НетВР И НЕ НетФизЛица И ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "сотруднику не может быть назначено одно и тоже удержание дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!", Отказ, Заголовок);
		КонецЕсли;	

		

	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда	

		// противоречие другим кадровым приказам
		СтрокаСообщениеОбОшибке = "период действия приказа противоречит кадровому приказу " + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);

	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботника()

// Создает и заполняет структуру, содержащую имена регистров сведений 
//  по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                 по которым надо проводить документ.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	
	СтруктураПроведенияПоРегистрамСведений.Вставить("Работники");
    СтруктураПроведенияПоРегистрамСведений.Вставить("НамеченныеСобытияПоПерсоналу");
    СтруктураПроведенияПоРегистрамСведений.Вставить("ПлановыеНачисленияРаботников");
	СтруктураПроведенияПоРегистрамСведений.Вставить("ПлановыеУдержанияРаботников");
	
	КадровоеПеремещениеПереопределяемый.ДополнитьСтруктуруПроведенияПоРегистрамСведений(СтруктураПроведенияПоРегистрамСведений);
	
КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//	ВыборкаПоРаботники					   - выборка из результата запроса ТЧ "Работники".									
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, 
	СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "", УчетнаяПолитикаПоПерсоналу)
	
	Если ВыборкаПоРаботники.ВидСтрокиЗапроса = "Работники" Тогда
		
		// Если документ нужно проводить по регистру, то для него есть ключ в структуре
		ИмяРегистра = "Работники";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			
			// отразим новое место работы
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период                     = ВыборкаПоРаботники.ДатаНачала;
			
			// Измерения
			Движение.ФизЛицо                    = ВыборкаПоРаботники.ФизЛицо;
			
			// Ресурсы
			Движение.Подразделение				= ВыборкаПоРаботники.НовоеПодразделение;
			Движение.Должность                  = ВыборкаПоРаботники.НоваяДолжность;
			Движение.ЗанимаемыхСтавок           = ВыборкаПоРаботники.ЗанимаемыхСтавок;
			Движение.ГрафикРаботы   		    = ВыборкаПоРаботники.ГрафикРаботы;
			// Реквизиты
			Движение.ПричинаИзмененияСостояния  = Перечисления.ПричиныИзмененияСостояния.Перемещение;
			
		КонецЕсли;
		
		УчетРасходовНаПерсоналПереопределяемый.ДополнитьДвиженияСведениямиДляУпрУчета(Движения, ВыборкаПоРаботники, ВыборкаПоРаботники.ДатаНачала, "НовоеПодразделение");
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботники.ДатаОкончания) Тогда
			
			ПрежняяСтавка        = ВыборкаПоРаботники.ПрежняяСтавка;
			ПрежнееПодразделение = ВыборкаПоРаботники.ПрежнееПодразделение;
			ПрежняяДолжность     = ВыборкаПоРаботники.ПрежняяДолжность;
			
			Если ВыборкаПоРаботники.ПроизошедшееСобытие Тогда
				
				ИмяРегистра = "Работники";
				Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
					
					// вернем прежние данные по прежнему месту работы
					Движение = Движения[ИмяРегистра].Добавить();
					
					// Свойства
					Движение.Период             = ВыборкаПоРаботники.ДатаОкончания + мДлинаСуток;
					
					// Измерения
					Движение.ФизЛицо            = ВыборкаПоРаботники.ФизЛицо;
					
					// Ресурсы
					Движение.Подразделение		= ПрежнееПодразделение;
					Движение.Должность          = ПрежняяДолжность;
					Движение.ЗанимаемыхСтавок   = ПрежняяСтавка;
					Движение.ГрафикРаботы   	= ВыборкаПоРаботники.ПрежнийГрафикРаботы;
					// реквизиты
					Движение.ПричинаИзмененияСостояния  = Перечисления.ПричиныИзмененияСостояния.Перемещение;
					
				КонецЕсли;
				
				УчетРасходовНаПерсоналПереопределяемый.ДополнитьДвиженияСведениямиДляУпрУчета(Движения, ВыборкаПоРаботники, ВыборкаПоРаботники.ДатаОкончания + мДлинаСуток, "ПрежнееПодразделение");
				
			Иначе
				
				ИмяРегистра = "НамеченныеСобытияПоПерсоналу";
				Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
					
					Движение = Движения[ИмяРегистра].Добавить();
					
					// Свойства
					Движение.Период                 = ВыборкаПоРаботники.ДатаОкончания + мДлинаСуток;
					
					// Измерения
					Движение.ФизЛицо                = ВыборкаПоРаботники.ФизЛицо;
					Движение.ДатаИзменения          = ВыборкаПоРаботники.ДатаОкончания + мДлинаСуток;
					Движение.ПланируемоеСобытие     = Перечисления.НамеченныеСобытияПоПерсоналу.Перемещение;
					
					// Реквизиты
					Движение.Подразделение			= ПрежнееПодразделение;
					Движение.Должность              = ПрежняяДолжность;
					Движение.ЗанимаемыхСтавок       = ПрежняяСтавка;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
		
	ИначеЕсли ВыборкаПоРаботники.ВидСтрокиЗапроса = "Начисления" Тогда	
		
		Если ВыборкаПоРаботники.Действие = Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
			Возврат;
		КонецЕсли;
		
		ИмяРегистра = "ПлановыеНачисленияРаботников";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период                     = ВыборкаПоРаботники.ДатаНачала;
			
			// Измерения
			Движение.ФизЛицо                    = ВыборкаПоРаботники.ФизЛицо;
			Если НЕ ВыборкаПоРаботники.ОсновноеНачисление Тогда
				Движение.ВидРасчетаИзмерение    = ВыборкаПоРаботники.ВидРасчета;
			КонецЕсли; 
			
			// Ресурсы
			Движение.ВидРасчета					= ВыборкаПоРаботники.ВидРасчета;
			Если ВыборкаПоРаботники.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
				Движение.Действует				= Истина;
				Движение.Показатель1			= ВыборкаПоРаботники.Показатель1;
				Движение.Валюта1				= ВыборкаПоРаботники.Валюта1;
				Движение.Показатель2			= ВыборкаПоРаботники.Показатель2;
				Движение.Валюта2				= ВыборкаПоРаботники.Валюта2;
				Движение.Показатель3			= ВыборкаПоРаботники.Показатель3;
				Движение.Валюта3				= ВыборкаПоРаботники.Валюта3;
				Движение.Показатель4			= ВыборкаПоРаботники.Показатель4;
				Движение.Валюта4				= ВыборкаПоРаботники.Валюта4;
				Движение.Показатель5			= ВыборкаПоРаботники.Показатель5;
				Движение.Валюта5				= ВыборкаПоРаботники.Валюта5;
				Движение.Показатель6			= ВыборкаПоРаботники.Показатель6;
				Движение.Валюта6				= ВыборкаПоРаботники.Валюта6;
			Иначе
				Движение.Действует				= Ложь;
			КонецЕсли; 
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботники.ДатаОкончания) И ВыборкаПоРаботники.ПроизошедшееСобытие Тогда
			
			ИмяРегистра = "ПлановыеНачисленияРаботников";
			Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
				
				Движение = Движения[ИмяРегистра].Добавить();
				
				// Свойства
				Движение.Период                     = ВыборкаПоРаботники.ДатаОкончания + мДлинаСуток;
				
				// Измерения
				Движение.ФизЛицо                    = ВыборкаПоРаботники.ФизЛицо;
				Если НЕ ВыборкаПоРаботники.ОсновноеНачисление Тогда
					Движение.ВидРасчетаИзмерение    = ВыборкаПоРаботники.ВидРасчета;
				КонецЕсли; 
				
				// Ресурсы
				Если НЕ ВыборкаПоРаботники.ОсновноеНачисление Тогда
					Движение.ВидРасчета				= ВыборкаПоРаботники.ВидРасчета;
				Иначе 	
					Движение.ВидРасчета				= ВыборкаПоРаботники.ПрежнийВидРасчета;
				КонецЕсли;
				
				Если ВыборкаПоРаботники.ПрежнийВидРасчета <> Null Тогда
					Движение.Действует				= ВыборкаПоРаботники.ПрежнийДействует;
					Движение.Показатель1			= ВыборкаПоРаботники.ПрежнийПоказатель1;
					Движение.Валюта1				= ВыборкаПоРаботники.ПрежняяВалюта1;
					Движение.Показатель2			= ВыборкаПоРаботники.ПрежнийПоказатель2;
					Движение.Валюта2				= ВыборкаПоРаботники.ПрежняяВалюта2;
					Движение.Показатель3			= ВыборкаПоРаботники.ПрежнийПоказатель3;
					Движение.Валюта3				= ВыборкаПоРаботники.ПрежняяВалюта3;
					Движение.Показатель4			= ВыборкаПоРаботники.ПрежнийПоказатель4;
					Движение.Валюта4				= ВыборкаПоРаботники.ПрежняяВалюта4;
					Движение.Показатель5			= ВыборкаПоРаботники.ПрежнийПоказатель5;
					Движение.Валюта5				= ВыборкаПоРаботники.ПрежняяВалюта5;
					Движение.Показатель6			= ВыборкаПоРаботники.ПрежнийПоказатель6;
					Движение.Валюта6				= ВыборкаПоРаботники.ПрежняяВалюта6;
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли; 
		
		
	ИначеЕсли ВыборкаПоРаботники.ВидСтрокиЗапроса = "Взыскания" Тогда	
		
		Если ВыборкаПоРаботники.Действие = Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
			Возврат;
		КонецЕсли;
		
		ИмяРегистра = "ПлановыеУдержанияРаботников";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период                     = ВыборкаПоРаботники.ДатаНачала;
			
			// Измерения
			Движение.ФизЛицо                    = ВыборкаПоРаботники.ФизЛицо;
			Движение.ВидРасчета   				= ВыборкаПоРаботники.ВидРасчета;
			
			// Ресурсы
			Движение.ВидРасчета					= ВыборкаПоРаботники.ВидРасчета;
			Если ВыборкаПоРаботники.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
				Движение.Действует				= Истина;
				Движение.Показатель1			= ВыборкаПоРаботники.Показатель1;
				Движение.Валюта1				= ВыборкаПоРаботники.Валюта1;
				Движение.Показатель2			= ВыборкаПоРаботники.Показатель2;
				Движение.Валюта2				= ВыборкаПоРаботники.Валюта2;
				Движение.Показатель3			= ВыборкаПоРаботники.Показатель3;
				Движение.Валюта3				= ВыборкаПоРаботники.Валюта3;
				Движение.Показатель4			= ВыборкаПоРаботники.Показатель4;
				Движение.Валюта4				= ВыборкаПоРаботники.Валюта4;
				Движение.Показатель5			= ВыборкаПоРаботники.Показатель5;
				Движение.Валюта5				= ВыборкаПоРаботники.Валюта5;
				Движение.Показатель6			= ВыборкаПоРаботники.Показатель6;
				Движение.Валюта6				= ВыборкаПоРаботники.Валюта6;
			Иначе
				Движение.Действует				= Ложь;
			КонецЕсли; 
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботники.ДатаОкончания) И ВыборкаПоРаботники.ПроизошедшееСобытие Тогда
			
			ИмяРегистра = "ПлановыеУдержанияРаботников";
			Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
				
				Движение = Движения[ИмяРегистра].Добавить();
				
				// Свойства
				Движение.Период                     = ВыборкаПоРаботники.ДатаОкончания + мДлинаСуток;
				
				// Измерения
				Движение.ФизЛицо                    = ВыборкаПоРаботники.ФизЛицо;
				Движение.ВидРасчета				    = ВыборкаПоРаботники.ВидРасчета;
							
				Если ВыборкаПоРаботники.ПрежнийВидРасчета <> Null Тогда
					Движение.Действует				= ВыборкаПоРаботники.ПрежнийДействует;
					Движение.Показатель1			= ВыборкаПоРаботники.ПрежнийПоказатель1;
					Движение.Валюта1				= ВыборкаПоРаботники.ПрежняяВалюта1;
					Движение.Показатель2			= ВыборкаПоРаботники.ПрежнийПоказатель2;
					Движение.Валюта2				= ВыборкаПоРаботники.ПрежняяВалюта2;
					Движение.Показатель3			= ВыборкаПоРаботники.ПрежнийПоказатель3;
					Движение.Валюта3				= ВыборкаПоРаботники.ПрежняяВалюта3;
					Движение.Показатель4			= ВыборкаПоРаботники.ПрежнийПоказатель4;
					Движение.Валюта4				= ВыборкаПоРаботники.ПрежняяВалюта4;
					Движение.Показатель5			= ВыборкаПоРаботники.ПрежнийПоказатель5;
					Движение.Валюта5				= ВыборкаПоРаботники.ПрежняяВалюта5;
					Движение.Показатель6			= ВыборкаПоРаботники.ПрежнийПоказатель6;
					Движение.Валюта6				= ВыборкаПоРаботники.ПрежняяВалюта6;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

// Создает и заполняет структуру, содержащую имена регистров накопления
// документа. В дальнейшем движения заносятся только по тем регистрам накопления, для которых в 
// данной процедуре заданы ключи
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                  накопления по которым надо проводить документ.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(СтруктураПроведенияПоРегистрамНакопления)

	СтруктураПроведенияПоРегистрамНакопления = Новый Структура();
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ЗанятыеРабочиеМеста");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа.
//	ВыборкаПоРаботники					     - выборка из результата запроса ТЧ "Работники".									
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента,ВыборкаПоРаботники,  
	СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров = "")
	
	Если ВыборкаПоРаботники.ВидСтрокиЗапроса = "Работники" Тогда
		
		// Если документ нужно проводить по регистру, то для него есть ключ в структуре
		ИмяРегистра = "ЗанятыеРабочиеМеста";
		Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда
			
			ПрежняяСтавка        = ВыборкаПоРаботники.ПрежняяСтавка;
			ПрежнееПодразделение = ВыборкаПоРаботники.ПрежнееПодразделение; 
			ПрежняяДолжность     = ВыборкаПоРаботники.ПрежняяДолжность;
			
			// по прежнему месту работы освободим занимаемые ранее ставки
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период                 = ВыборкаПоРаботники.ДатаНачала;
			Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.Подразделение	= ПрежнееПодразделение;
			Движение.Должность              = ПрежняяДолжность;
			
			// Ресурсы
			Движение.Количество      = ПрежняяСтавка; 
			
			// по новому месту работы займем указанные ставки
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период                = ВыборкаПоРаботники.ДатаНачала;
			Движение.ВидДвижения		   = ВидДвиженияНакопления.Приход;

			
			// Измерения
			Движение.Подразделение		= ВыборкаПоРаботники.НовоеПодразделение;
			Движение.Должность                  = ВыборкаПоРаботники.НоваяДолжность;
			
			// Ресурсы
			Движение.Количество      = ВыборкаПоРаботники.ЗанимаемыхСтавок; 
			
			Если ЗначениеЗаполнено(ВыборкаПоРаботники.ДатаОкончания)
				и ВыборкаПоРаботники.ПроизошедшееСобытие Тогда
				
				// по прежнему месту работы займем временно освобожденные ставки
				Движение = Движения[ИмяРегистра].Добавить();
				
				// Свойства
				Движение.Период                = ВыборкаПоРаботники.ДатаОкончания + мДлинаСуток;
				Движение.ВидДвижения		   = ВидДвиженияНакопления.Приход;
					
				// Измерения
				Движение.Подразделение	= ПрежнееПодразделение;
				Движение.Должность              = ПрежняяДолжность;
				
				// Ресурсы
				Движение.Количество      = ПрежняяСтавка; 
				
				// по новому месту работы освободим временно занимавшиеся ставки
				Движение = Движения[ИмяРегистра].Добавить();
				
				// Свойства
				Движение.Период                = ВыборкаПоРаботники.ДатаОкончания + мДлинаСуток;
				Движение.ВидДвижения		   = ВидДвиженияНакопления.Расход;
				
				// Измерения
				Движение.Подразделение		   = ВыборкаПоРаботники.НовоеПодразделение;
				Движение.Должность             = ВыборкаПоРаботники.НоваяДолжность;
				
				// Ресурсы
				Движение.Количество      = ВыборкаПоРаботники.ЗанимаемыхСтавок; 
				
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 	  
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров накопления по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);	
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	СоответствиеВалютныеСпособыРасчета = ПроведениеРасчетов.ПолучитьСоответствиеСпособовРасчетаТребующихВалюту();
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	УчетнаяПолитикаПоПерсоналу = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу");

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда
			
			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(СтруктураПроведенияПоРегистрамНакопления);
			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(СтруктураПроведенияПоРегистрамСведений);
			
			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботники(Режим);
    	    ВыборкаПоРаботники = РезультатЗапросаПоРаботники.Выбрать();

			Пока ВыборкаПоРаботники.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоРаботники, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналу);
				
				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента,ВыборкаПоРаботники, СтруктураПроведенияПоРегистрамНакопления);
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, СтруктураПроведенияПоРегистрамСведений, , УчетнаяПолитикаПоПерсоналу);
					
 				КонецЕсли;

			КонецЦикла;

		КонецЕсли; 

	КонецЕсли;
	
	КадровоеПеремещениеПереопределяемый.ДобавитьДополнительныеДвижения(ЭтотОбъект, Отказ, Заголовок);

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(Работники);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаДокумента", ОбщегоНазначения.ПолучитьРабочуюДату());
		Запрос.УстановитьПараметр("ФизЛицо", ДанныеЗаполнения.ФизЛицо);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РаботникиСрезПоследних.ФизЛицо,
			|	РаботникиСрезПоследних.Подразделение КАК НовоеПодразделение,
			|	РаботникиСрезПоследних.Должность КАК НоваяДолжность,
			|	РаботникиСрезПоследних.ЗанимаемыхСтавок,
			|	РаботникиСрезПоследних.ГрафикРаботы
			|ИЗ
			|	РегистрСведений.Работники.СрезПоследних(&ДатаДокумента, ФизЛицо = &ФизЛицо) КАК РаботникиСрезПоследних";
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		НоваяСтрока = Работники.Добавить();
		НоваяСтрока.Сотрудник = ДанныеЗаполнения;

		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
		КонецЕсли;
		
		НоваяСтрока.ДатаНачала = ОбщегоНазначения.ПолучитьРабочуюДату();
		
	КонецЕсли;
	
	ДокументОснование = ДанныеЗаполнения;

КонецПроцедуры


мДлинаСуток = 86400;

мСписокНедоступныхРасчетов = Новый СписокЗначений;
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерии);
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерииСдельно);
