#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ОбновитьДиаграмму(Объект,Диаграмма,ВидШкалыВремени=Неопределено) Экспорт
	Регламент = БюджетныйРегламент(Объект);

	Отчет = Отчеты.фин_ДиаграммаГантаБюджетногоПроцесса.Создать();
	Отчет.БюджетныйРегламент = Регламент;
	Отчет.Организация = Объект.Организация;
	Отчет.СценарийПланирования = Объект.Сценарий;
	Отчет.ГрафикПроцесса.Загрузить(Объект.ГрафикПроцесса.Выгрузить());
	Для Каждого СтрокаОтчета Из Отчет.ГрафикПроцесса Цикл
		СтрокаОтчета.Организация = Объект.Организация;
		СтрокаОтчета.Сценарий = Объект.Сценарий;
	КонецЦикла;
	
	СтрокаДетализация = Отчет.Детализация.Добавить();
	СтрокаДетализация.ВидДетализации = Перечисления.фин_ВидыДетализацииДиаграммыГантаБюджетногоПроцесса.Бюджет;
	СтрокаДетализация = Отчет.Детализация.Добавить();
	СтрокаДетализация.ВидДетализации = Перечисления.фин_ВидыДетализацииДиаграммыГантаБюджетногоПроцесса.ВидЗадачи;
	Если Объект.ГрафикПроцесса.НайтиСтроки(Новый Структура("УровеньДетализации",фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустоеЗначениеРазреза("Проект"))).Количество()<>Объект.ГрафикПроцесса.Количество() Тогда
		СтрокаДетализация = Отчет.Детализация.Добавить();
		СтрокаДетализация.ВидДетализации = Перечисления.фин_ВидыДетализацииДиаграммыГантаБюджетногоПроцесса.УровеньДетализации;
	КонецЕсли;
	Если Объект.ГрафикПроцесса.НайтиСтроки(Новый Структура("ЭтапБюджетногоПроцесса",Справочники.фин_ЭтапыБюджетногоПроцесса.ПустаяСсылка())).Количество()<>Объект.ГрафикПроцесса.Количество() Тогда
		СтрокаДетализация = Отчет.Детализация.Добавить();
		СтрокаДетализация.ВидДетализации = Перечисления.фин_ВидыДетализацииДиаграммыГантаБюджетногоПроцесса.ЭтапБюджетногоПроцесса;
	КонецЕсли;
	Если Объект.ГрафикПроцесса.НайтиСтроки(Новый Структура("Пользователь",Справочники.Пользователи.ПустаяСсылка())).Количество()<>Объект.ГрафикПроцесса.Количество() Тогда
		СтрокаДетализация = Отчет.Детализация.Добавить();
		СтрокаДетализация.ВидДетализации = Перечисления.фин_ВидыДетализацииДиаграммыГантаБюджетногоПроцесса.Пользователь;
	КонецЕсли;
	Отчеты.фин_ДиаграммаГантаБюджетногоПроцесса.СформироватьДиаграмму(Отчет,Диаграмма,ВидШкалыВремени,Ложь,,Истина);
КонецПроцедуры

Процедура Автозаполнение(Объект) Экспорт
	Объект.ГрафикПроцесса.Очистить();
	
	Регламент = БюджетныйРегламент(Объект);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.СценарийПланирования,
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.Организация,
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.Регламент
		|ИЗ
		|	РегистрСведений.фин_КалендарноеПланированиеБюджетногоПроцесса КАК фин_КалендарноеПланированиеБюджетногоПроцесса";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаИмеющихсяНастроек = РезультатЗапроса.Выгрузить();
	
	ПоРегламенту 				= ТаблицаИмеющихсяНастроек.НайтиСтроки(Новый Структура("Регламент",Регламент)).Количество()>0;
	ПоСценариюИОрганизации 		= ТаблицаИмеющихсяНастроек.НайтиСтроки(Новый Структура("Регламент,СценарийПланирования,Организация",?(ПоРегламенту,Регламент,Документы.фин_БюджетныйРегламент.ПустаяСсылка()),Объект.Сценарий,Объект.Организация)).Количество()>0;
	ПоСценарию 					= ТаблицаИмеющихсяНастроек.НайтиСтроки(Новый Структура("Регламент,СценарийПланирования",?(ПоРегламенту,Регламент,Документы.фин_БюджетныйРегламент.ПустаяСсылка()),Объект.Сценарий)).Количество()>0;
	ПоОрганизации 				= ТаблицаИмеющихсяНастроек.НайтиСтроки(Новый Структура("Регламент,Организация",?(ПоРегламенту,Регламент,Документы.фин_БюджетныйРегламент.ПустаяСсылка()),Объект.Организация)).Количество()>0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("АктивныйРегламент",Регламент);
	Если ПоРегламенту Тогда
		РегламентПолученияНастроек = Регламент;
	Иначе
		РегламентПолученияНастроек = Документы.фин_БюджетныйРегламент.ПустаяСсылка();
	КонецЕсли;
	Если ПоСценариюИОрганизации Тогда
		Сценарий = Объект.Сценарий;
		Организация = Объект.Организация;
	ИначеЕсли ПоОрганизации Тогда
		Сценарий = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий();
		Организация = Объект.Организация;
	ИначеЕсли ПоСценарию Тогда
		Сценарий = Объект.Сценарий;
		Организация = Справочники.Организации.ПустаяСсылка();
	Иначе
		Возврат;
	КонецЕсли;
	
	ГоризонтПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(Объект.ПериодПланирования,Объект.Сценарий);
	График = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ГрафикУчетаРаботПоСогласованию");
	
	ТаблицаИмеющихсяНастроек = фин_ПроцедурыКалендарногоПланирования.ПолучитьСписокЗадачПоНастройкамРегламента(РегламентПолученияНастроек,Сценарий,Организация,Регламент);
	Для Каждого СтрокаНастроек Из ТаблицаИмеющихсяНастроек Цикл
		НоваяСтрока = Объект.ГрафикПроцесса.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаНастроек);
		НоваяСтрока.УровеньДетализации 	= ?(ЗначениеЗаполнено(СтрокаНастроек.УправленческоеПодразделение),СтрокаНастроек.УправленческоеПодразделение,СтрокаНастроек.Проект);
		ДатаЗавершения 					= фин_ПроцедурыКалендарногоПланирования.КалендарныйКонецСобытия(СтрокаНастроек,Объект.Сценарий,Объект.ПериодПланирования,ГоризонтПланирования,График,Истина);
		НоваяСтрока.ДатаНачала 			= фин_ПроцедурыКалендарногоПланирования.КалендарноеНачалоСобытия(СтрокаНастроек,Объект.Сценарий,ДатаЗавершения,График);
		НоваяСтрока.ДатаЗавершения		= ДатаЗавершения - ?(СтрокаНастроек.ЕдиницаИзмеренияВремениОтсчета=Перечисления.усд_ЕдиницыИзмеренияВремениИсполненияЗадачСогласования.Дней ИЛИ СтрокаНастроек.ЕдиницаИзмеренияВремениОтсчета=Перечисления.усд_ЕдиницыИзмеренияВремениИсполненияЗадачСогласования.Часов,1,0);
	КонецЦикла;
	
КонецПроцедуры


Функция БюджетныйРегламент(Объект) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ПрименяемыеРегламентыФормированияБюджетовСрезПоследних.Регламент
		|ИЗ
		|	РегистрСведений.фин_ПрименяемыеРегламентыФормированияБюджетов.СрезПоследних(&Период, ) КАК фин_ПрименяемыеРегламентыФормированияБюджетовСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", Объект.ПериодПланирования);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Регламент =  ВыборкаДетальныеЗаписи.Регламент;
	Иначе
		Регламент = Документы.фин_БюджетныйРегламент.ПустаяСсылка();
	КонецЕсли;
	Возврат Регламент;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


////////////////////////////////////////////////////////////////////////////////
// Заполнение

Процедура ЗаполнитьПоДокументуОснованию(Объект, ДокументОснование) Экспорт
	
	фин_ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, ДокументОснование);
	
	Объект.ДокументОснование = ДокументОснование;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.фин_Бюджет") Тогда
	
		// выплата заработной платы всегда в валюте регл. учета
		Объект.Бюджет      			= ДокументОснование.ФормируемыйБюджет;
		Объект.ВидЗадачи   			= ?(ДокументОснование.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Бюджет,Перечисления.фин_ВидыЗадачПоБюджетам.ФормированиеБюджета,?(ДокументОснование.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Заявка,Перечисления.фин_ВидыЗадачПоБюджетам.ПодачаЗаявок,Перечисления.фин_ВидыЗадачПоБюджетам.КорректировкаБюджета));
		Объект.Организация 			= ДокументОснование.Организация;
//		Объект.Сценарий 			= ДокументОснование.Сценарий;
		Объект.Пользователь			= ДокументОснование.Автор;
		Объект.ДатаНачала			= ДокументОснование.Дата;
		Объект.ДатаЗавершения 		= ТекущаяДата();
		Объект.УровеньДетализации 	= ?(ДокументОснование.УровеньДетализацииБюджета = Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения,ДокументОснование.УправленческоеПодразделение,?(ДокументОснование.УровеньДетализацииБюджета = Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта,ДокументОснование.Проект,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустоеЗначениеРазреза("Проект")));
		Объект.Состояние			= фин_БюджетированиеОбщегоНазначения.СостояниеОбъектаПоУмолчанию();
		
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_КалендарныйПланБюджетнойКампании.Ссылка
			|ИЗ
			|	Документ.фин_КалендарныйПланБюджетнойКампании КАК фин_КалендарныйПланБюджетнойКампании
			|ГДЕ
			|	фин_КалендарныйПланБюджетнойКампании.Организация = &Организация
			|	И фин_КалендарныйПланБюджетнойКампании.ПериодПланирования = &ПериодПланирования
			|	И фин_КалендарныйПланБюджетнойКампании.Сценарий = &Сценарий
			|	И фин_КалендарныйПланБюджетнойКампании.Проведен";
		
		Запрос.УстановитьПараметр("Организация", 			Объект.Организация);
		Запрос.УстановитьПараметр("ПериодПланирования", 	ДокументОснование.ПериодПланирования);
		Запрос.УстановитьПараметр("Сценарий", 				ДокументОснование.Сценарий);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Объект.КалендарныйПлан = ВыборкаДетальныеЗаписи.Ссылка;
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	фин_КалендарныеПланыБюджетныхКампаний.Исполнитель
				|ИЗ
				|	РегистрСведений.фин_КалендарныеПланыБюджетныхКампаний КАК фин_КалендарныеПланыБюджетныхКампаний
				|ГДЕ
				|	фин_КалендарныеПланыБюджетныхКампаний.КалендарныйПлан = &КалендарныйПлан
				|	И фин_КалендарныеПланыБюджетныхКампаний.Регистратор = &КалендарныйПлан
				|	И фин_КалендарныеПланыБюджетныхКампаний.Бюджет = &Бюджет
				|	И фин_КалендарныеПланыБюджетныхКампаний.ВидЗадачи = &ВидЗадачи
				|	И фин_КалендарныеПланыБюджетныхКампаний.УровеньДетализации = &УровеньДетализации";
			
			Запрос.УстановитьПараметр("КалендарныйПлан", 		Объект.КалендарныйПлан);
			Запрос.УстановитьПараметр("Бюджет", 				Объект.Бюджет);
			Запрос.УстановитьПараметр("ВидЗадачи", 				Объект.ВидЗадачи);
			Запрос.УстановитьПараметр("УровеньДетализации", 	Объект.УровеньДетализации);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				Объект.Исполнитель = ВыборкаДетальныеЗаписи.Исполнитель;
				
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры   

Процедура ЗаполнитьПоОснованию(Объект, ДокументОснование) Экспорт
	
	Если ТипЗнч(ДокументОснование) = Тип("Структура") Тогда
	
		// выплата заработной платы всегда в валюте регл. учета
		Объект.Пользователь			= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь");
		Объект.Состояние			= фин_БюджетированиеОбщегоНазначения.СостояниеОбъектаПоУмолчанию();
		ЗаполнитьЗначенияСвойств(Объект,ДокументОснование);
		Если НЕ ЗначениеЗаполнено(Объект.УровеньДетализации) Тогда
			Объект.УровеньДетализации = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустоеЗначениеРазреза("Проект");
		КонецЕсли;
		Объект.ДатаЗавершения = ТекущаяДата();
		
		Если ЗначениеЗаполнено(Объект.КалендарныйПлан) Тогда
			Объект.Организация 			= Объект.КалендарныйПлан.Организация;
//			Объект.Сценарий 			= Объект.КалендарныйПлан.Сценарий;
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(Объект.КалендарныйПлан) И НЕ ЗначениеЗаполнено(Объект.Исполнитель) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	фин_КалендарныеПланыБюджетныхКампаний.Исполнитель,
				|	фин_КалендарныеПланыБюджетныхКампаний.ДатаНачала,
				|	фин_КалендарныеПланыБюджетныхКампаний.ДатаЗавершения
				|ИЗ
				|	РегистрСведений.фин_КалендарныеПланыБюджетныхКампаний КАК фин_КалендарныеПланыБюджетныхКампаний
				|ГДЕ
				|	фин_КалендарныеПланыБюджетныхКампаний.КалендарныйПлан = &КалендарныйПлан
				|	И фин_КалендарныеПланыБюджетныхКампаний.Регистратор = &КалендарныйПлан
				|	И фин_КалендарныеПланыБюджетныхКампаний.Бюджет = &Бюджет
				|	И фин_КалендарныеПланыБюджетныхКампаний.ВидЗадачи = &ВидЗадачи
				|	И фин_КалендарныеПланыБюджетныхКампаний.УровеньДетализации = &УровеньДетализации";
			
			Запрос.УстановитьПараметр("КалендарныйПлан", 		Объект.КалендарныйПлан);
			Запрос.УстановитьПараметр("Бюджет", 				Объект.Бюджет);
			Запрос.УстановитьПараметр("ВидЗадачи", 				Объект.ВидЗадачи);
			Запрос.УстановитьПараметр("УровеньДетализации", 	Объект.УровеньДетализации);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				Объект.Исполнитель 	= ВыборкаДетальныеЗаписи.Исполнитель;
				Объект.ДатаНачала 	= ВыборкаДетальныеЗаписи.ДатаНачала;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры   


////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ДополнительныеТаблицы = Новый Массив;
	ДополнительныеТаблицы.Добавить("ГрафикПроцесса");
	
	
	ПараметрыПроведения = фин_УправлениеПроведениемДокументовСервер.ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ,,,,,,,,ДополнительныеТаблицы);
	
	Возврат ПараметрыПроведения;

КонецФункции 

Функция ТекстЗапросаГрафикПроцесса(НомераТаблиц, ПараметрыПроведения, Реквизиты) Экспорт
	
	НомераТаблиц.Вставить("ТаблицаГрафикПроцесса", НомераТаблиц.Количество());

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Отчет.Ссылка,
	               |	0 КАК НомерСтроки,
	               |	Отчет.ВидЗадачи,
	               |	Отчет.Бюджет,
	               |	Отчет.ЭтапБюджетногоПроцесса,
	               |	Отчет.Пользователь,
	               |	Отчет.ДатаНачала,
	               |	Отчет.ДатаЗавершения,
	               |	ВЫБОР
	               |		КОГДА Отчет.УровеньДетализации = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений()+".ПустаяСсылка)
	               |				ИЛИ Отчет.УровеньДетализации.Ссылка ЕСТЬ NULL 
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПроектов()+".ПустаяСсылка)
	               |		ИНАЧЕ Отчет.УровеньДетализации
	               |	КОНЕЦ КАК УровеньДетализации,
	               |	Отчет.Исполнитель,
	               |	Отчет.Организация КАК Организация,
	               |	Отчет.КалендарныйПлан.Сценарий КАК СценарийПланирования,
	               |	Отчет.КалендарныйПлан КАК КалендарныйПлан,
	               |	ИСТИНА КАК Завершено
	               |ИЗ
	               |	Документ.фин_ОтчетОбИсполненииЗадачиБюджетногоПроцесса КАК Отчет
	               |ГДЕ
	               |	Отчет.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + фин_УправлениеПроведениемДокументовСервер.ТекстРазделителяЗапросовПакета();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.


////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции


#КонецЕсли