//// Строки, хранят реквизиты имеющие смысл только для бухгалтерского
// и налогового учетов, соответственно в случае если документ не
// отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт;

// Переменные в которые помещаются параметры учетной политики
//Перем мУчетнаяПолитикаБух;

Перем ДвиженияВыпускПродукцииУслугБУ;
Перем ТаблицаДвиженийВыпускБУ;

Перем ДвиженияВыпускПродукцииУслугНУ;
Перем ТаблицаДвиженийВыпускНУ; 

Перем ОперацияБУ;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем ОперацияНУ;

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция формирующая краткий состав документа
//
Функция ЗаполнитьКраткийСоставДокументаПоРеквизитуТЧ(ДокументОбъект, ИмяТЧ, ИмяРеквизита) Экспорт 

	КраткийСоставДокумента = "";
	
	ТабЧасть = ДокументОбъект.Метаданные().ТабличныеЧасти.Найти(ИмяТЧ);
	Если ТабЧасть = Неопределено Тогда
		Возврат КраткийСоставДокумента;
	КонецЕсли;
	Если ТабЧасть.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат КраткийСоставДокумента;
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ДокументОбъект[ИмяТЧ] Цикл
			
		ЗначениеРеквизита = СокрЛП(СтрокаТЧ[ИмяРеквизита]);
		Если Найти(КраткийСоставДокумента, ЗначениеРеквизита) = 0 Тогда
			
			Если СтрДлина(КраткийСоставДокумента) < 250 Тогда
				КраткийСоставДокумента = КраткийСоставДокумента + ", " + ЗначениеРеквизита;
			Иначе
				КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,245) + "...";
				Прервать;
			КонецЕсли;
			
		КонецЕсли; 
	
	КонецЦикла;
	
	Если Лев(КраткийСоставДокумента,2) = ", " Тогда
		ДлинаСтроки = СтрДлина(КраткийСоставДокумента);
		Если ДлинаСтроки < 250 Тогда
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3)
		Иначе
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,245) + "...";
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат КраткийСоставДокумента;
	
КонецФункции // ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьЗ1()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата"		   , Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтчетПроизводстваЗаСмену.Номер 			КАК НомерДокумента,
	|	ОтчетПроизводстваЗаСмену.Дата 			КАК ДатаДокумента,
	|	ОтчетПроизводстваЗаСмену.Организация,
	|   ОтчетПроизводстваЗаСмену.СтруктурноеПодразделение,
	|	ОтчетПроизводстваЗаСмену.Склад,
	|	ОтчетПроизводстваЗаСмену.СчетЗатратБУ 	КАК КорреспондентскийСчет,
	|	ОтветственныеЛицаСклад.ФизическоеЛицо   КАК МОЛ
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену КАК ОтчетПроизводстваЗаСмену
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСклад
	|	ПО ОтчетПроизводстваЗаСмену.Склад = ОтветственныеЛицаСклад.СтруктурнаяЕдиница
	|
	|ГДЕ
	|	ОтчетПроизводстваЗаСмену.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(Продукция.Количество) 				КАК КоличествоПоДокументу,
	|	Продукция.ПлановаяСтоимость					КАК Цена,
	|	СУММА(Продукция.СуммаПлановая)				КАК ВсегоСНДС,
	|	Продукция.Номенклатура.Наименование 		КАК ТоварНаименование,
	|	Продукция.ЕдиницаИзмерения.Представление 	КАК ЕдиницаНаименование,
	|	Продукция.Номенклатура.Код 					КАК ТоварКод,
	|	Продукция.ЕдиницаИзмерения.Код 				КАК ЕдиницаКод
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК Продукция
	|ГДЕ
	|	Продукция.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Продукция.ПлановаяСтоимость,
	|	Продукция.Номенклатура.Наименование,
	|	Продукция.Номенклатура.Код,
	|	Продукция.ЕдиницаИзмерения.Код,
	|	Продукция.ЕдиницаИзмерения.Представление";
	ВыборкаСтрок = ЗапросПоТоварам.Выполнить().Выгрузить();

	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
	СведенияОбОрганизации 		  = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента);
	
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетПроизводстваЗаСмену_З1";
	Макет							= ПолучитьОбщийМакет("З1");

	// Выводим шапку накладной
	ТекстРНН_БИН  = "";
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеСклада 	 = Шапка.Склад.Наименование;
	ОбластьМакета.Параметры.ОрганизацияРНН_БИН 		 = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Шапка.ДатаДокумента, "ru");
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДокумента");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = "";
	ОбластьМакета.Параметры.НомерДокумента		    = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакета.Параметры.ВалютаПредставление = Константы.ВалютаРегламентированногоУчета.Получить();
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Количество    = 0;
	Сумма    	  = 0;
	
	Для Каждого ВыборкаСтрокТовары Из ВыборкаСтрок Цикл

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Вывести(ОбластьМакета);

		Сумма      = Сумма    	+ ВыборкаСтрокТовары.ВсегоСНДС;
		Количество = Количество + ВыборкаСтрокТовары.КоличествоПоДокументу;

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.ИтогВсегоСНДС 			  = ОбщегоНазначения.ФорматСумм(Сумма);
	ОбластьМакета.Параметры.ИтогКоличествоПоДокументу = Количество;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	// заполняем МОЛ
	Если ЗначениеЗаполнено(Шапка.Склад) Тогда
		ДанныеМОЛ					= ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Организация, Шапка.МОЛ, Дата);
		ОбластьМакета.Параметры.МОЛ = ДанныеМОЛ.Представление;
	КонецЕсли;	
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьЗ1()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьМХ18()
	
	ТоварКод = "Код";
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
    Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номер,
	|	Дата 						КАК ДатаДокумента,
	|	Организация,
	|   СтруктурноеПодразделение,
	|	Склад,	
	|	ПодразделениеОрганизации 	КАК Подразделение,
	|	СчетЗатратБУ 				КАК КорреспондентскийСчет,
	|	ОтветственныеЛицаСклад.ФизическоеЛицо   КАК МОЛ
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену КАК ОтчетПроизводстваЗаСмену
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСклад
	|	ПО ОтчетПроизводстваЗаСмену.Склад = ОтветственныеЛицаСклад.СтруктурнаяЕдиница
	|
	|ГДЕ
	|	ОтчетПроизводстваЗаСмену.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтчетПроизводстваЗаСмену.Номенклатура		 								КАК Номенклатура,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.Код 									КАК ТоварКод,	
	|	ОтчетПроизводстваЗаСмену.Номенклатура.БазоваяЕдиницаИзмерения.Наименование 	КАК ЕдиницаИзмеренияНаименование,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.БазоваяЕдиницаИзмерения.Код 			КАК ЕдиницаИзмеренияКод,
	|	ОтчетПроизводстваЗаСмену.ЕдиницаИзмерения.Наименование 						КАК ВидУпаковки,
	|	СУММА(ОтчетПроизводстваЗаСмену.Количество) 									КАК Количество,
	|	СУММА(ОтчетПроизводстваЗаСмену.СуммаПлановая) 								КАК СуммаПлановая,
	|	МИНИМУМ(ОтчетПроизводстваЗаСмену.НомерСтроки) 								КАК НомерСтроки
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСмену
	|ГДЕ
	|	ОтчетПроизводстваЗаСмену.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетПроизводстваЗаСмену.Номенклатура,
	|   ОтчетПроизводстваЗаСмену.Номенклатура.Код, 
	|	ОтчетПроизводстваЗаСмену.ЕдиницаИзмерения,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	ОтчетПроизводстваЗаСмену.ЕдиницаИзмерения.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
	
	ТабДокумент  = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетПроизводстваЗаСмену_МХ18";

	Макет = ПолучитьМакет("МХ18");

	// Выводим общие реквизиты шапки
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	ОбластьМакета.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
	
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);

	Если НЕ СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка() Тогда
		Если ТипЗнч(СтруктурнаяЕдиницаОрганизация) = Тип("СправочникСсылка.Организации") Тогда
			ОбластьМакета.Параметры.ПредставлениеОрганизации   = Шапка.Организация;
			ОбластьМакета.Параметры.ОрганизацияПоОКПО          = Шапка.Организация.КодПоОКПО;
    	Иначе
			ОбластьМакета.Параметры.ПредставлениеОрганизации   = СтруктурноеПодразделение.НаименованиеПолное;
			ОбластьМакета.Параметры.ОрганизацияПоОКПО          = Шапка.СтруктурноеПодразделение.КодПоОКПО;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ПредставлениеСтруктурноеПодразделение = Шапка.СтруктурноеПодразделение;
	Иначе
		Если мОтображатьСтруктурныеПодразделения Тогда
			ОбластьМакета.Параметры.ПредставлениеСтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		Иначе			
			ОбластьМакета.Параметры.ПредставлениеСтруктурноеПодразделение = Шапка.Подразделение;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ПредставлениеОрганизации   = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ОрганизацияПоОКПО          = Шапка.Организация.КодПоОКПО;
	КонецЕсли;

	ОбластьМакета.Параметры.ПредставлениеПодразделения = Шапка.Подразделение;
    ОбластьМакета.Параметры.Получатель = Шапка.Склад;
	
	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 20;
	СтрокШапки      = 10;
	СтрокПодвала    = 9;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ЗапросТовары.Количество();

	Если КоличествоСтрок <= 2 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогоМассаБруттоНаСтранице = 0;
	ИтогоКоличествоНаСтранице  = 0;

	// инициализация итогов по документу
	ИтогоМассаБрутто = 0;
	ИтогоКоличество  = 0;
	Ном              = 0;
    ИтогСумма        = 0;
	
	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтого = Макет.ПолучитьОбласть("Итого"); 
	
	МассивОбластей = Новый Массив;
	МассивОбластей.Добавить(ОбластьМакета);
	
	КоличествоЗапросТовары = ЗапросТовары.Количество();

	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		Если Ном = КоличествоЗапросТовары Тогда
			МассивОбластей.Добавить(Макет.ПолучитьОбласть("Итого"));
			МассивОбластей.Добавить(Макет.ПолучитьОбласть("Подвал"));
		КонецЕсли;
		                		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, МассивОбластей) Тогда	
			
			// очистим итоги по странице
			ИтогоМассаБруттоНаСтранице = 0;
			ИтогоКоличествоНаСтранице  = 0;  
			
			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.ТоварНаименование  = СокрЛП(ВыборкаСтрок.Номенклатура.НаименованиеПолное);
		ОбластьМакета.Параметры.Цена  = ?(ВыборкаСтрок.Количество = 0, 0, ВыборкаСтрок.СуммаПлановая / ВыборкаСтрок.Количество);
		ОбластьМакета.Параметры.Сумма = ВыборкаСтрок.СуммаПлановая;

		Количество  = ВыборкаСтрок.Количество;

  		ТабДокумент.Вывести(ОбластьМакета);

		// увеличим итоги по странице
		ИтогоМассаБруттоНаСтранице = 0;
		ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + Количество;
        ИтогСумма                  = ИтогСумма                  + ВыборкаСтрок.СуммаПлановая;
		// увеличим итоги по дукументу
		ИтогоМассаБрутто = 0;
		ИтогоКоличество  = ИтогоКоличество  + Количество;

	КонецЦикла;

	// Выводим итоги по документу в целом
	ОбластьМакетаИтого.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
	ОбластьМакетаИтого.Параметры.ИтогКоличество  = ИтогоКоличество;
    ОбластьМакетаИтого.Параметры.ИтогСуммы       = ИтогСумма;

	ТабДокумент.Вывести(ОбластьМакетаИтого);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");

	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакета.Параметры.ИтогСуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогСумма, Константы.ВалютаРегламентированногоУчета.Получить());
	
	// заполняем МОЛ
	Если ЗначениеЗаполнено(Шапка.Склад) Тогда
		ДанныеМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Организация, Шапка.МОЛ, Дата);
		ОбластьМакета.Параметры.МОЛ = ДанныеМОЛ.Представление;
		ОбластьМакета.Параметры.ДолжностьМОЛ = ДанныеМОЛ.Должность;
	КонецЕсли;	
	
	ТабДокумент.Вывести(ОбластьМакета);

	
	Возврат ТабДокумент;

КонецФункции // ПечатьМХ18()
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "З1" тогда
		// Типовая форма форма З-1
		ТабДокумент = ПечатьЗ1();
	ИначеЕсли  ИмяМакета = "МХ18" Тогда
		ТабДокумент = ПечатьМХ18();
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	СтруктураПечатныхФорм.Вставить("З1","З-1 (Приходный ордер запасов)");
	СтруктураПечатныхФорм.Вставить("МХ18","Накладная на передачу готовой продукции");
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	мСтрокаРеквизитыБухУчета = "Продукция.СчетБУ, СчетЗатрат";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет счета учета по бухгалтерскому и налоговому учету.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	
	Если ЗаполнятьБУ = Истина Тогда
		СтрокаТЧ.СчетБУ = СчетаУчета.СчетУчетаБУ;
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		СтрокаТЧ.СчетБУ = ПланыСчетов.Типовой.ПустаяСсылка();
	КонецЕсли;
       	
	Если ЗаполнятьНУ = Истина Тогда
		СтрокаТЧ.СчетНУ = СчетаУчета.СчетУчетаНУ;
	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		СтрокаТЧ.СчетНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, " + ?(Продукция.Количество() = 0 И ВозвратныеОтходы.Количество() = 0, "", "Склад, ") + "ПодразделениеОрганизации, СчетЗатратБУ, НоменклатурнаяГруппа");

	Если СтруктурашапкиДокумента.УчитыватьКПН Тогда
		СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		СтруктураОбязательныхПолей.Вставить("СчетЗатратНУ");
	КонецЕсли;

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт

	РеквизитыТабПродукция = "Номенклатура,Количество,СчетБУ, СуммаПлановая";
	
	РеквизитыТабУслуги    = "Номенклатура,СчетБУ,СуммаПлановая";
	РеквизитыТабОтходы    = "Номенклатура,Количество,СчетБУ,СтатьяЗатрат";
	
		
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		РеквизитыТабПродукция = РеквизитыТабПродукция + ", СчетНУ";
		РеквизитыТабУслуги    = РеквизитыТабУслуги + ", СчетНУ";
		РеквизитыТабОтходы    = РеквизитыТабОтходы + ", СчетНУ";
	КонецЕсли;

	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабПродукция, мСтрокаРеквизитыБухУчета, "Продукция");
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Продукция", Новый Структура(РеквизитыТабПродукция), Отказ, Заголовок);
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", Новый Структура(РеквизитыТабУслуги), Отказ, Заголовок);
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратныеОтходы", Новый Структура(РеквизитыТабОтходы), Отказ, Заголовок);
	
КонецПроцедуры // ПроверкаРеквизитов()

// Проверяет, что в табличной части нет счетов учета МПЗ.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетСчетаМПЗ(СтруктураШапкиДокумента, ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок) 

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
                                               
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетБУ)
		   И  СтрокаТаблицы.СчетБУ.Количественный Тогда

				ОбщегоНазначения.ОшибкаПриПроведении("В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
				                    """ табличной части """ + ПредставлениеТабличнойЧасти + """: "
				                    + "содержится счет (БУ)" + СтрокаТаблицы.СчетБУ+ ". Укажите счет затрат!", Отказ, Заголовок);

		КонецЕсли;

		                                           
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ И ЗначениеЗаполнено(СтрокаТаблицы.СчетНУ)
		   И  СтрокаТаблицы.СчетНУ.Количественный Тогда

				ОбщегоНазначения.ОшибкаПриПроведении("В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
				                    """ табличной части """ + ПредставлениеТабличнойЧасти + """: "
				                    + "содержится счет (НУ)" + СтрокаТаблицы.СчетНУ+ ". Укажите счет затрат!", Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЧтоНетСчетаМПЗ()

// Процедура формирует движения регистров по табличной части Продукция
////
Процедура ДвиженияПоТабличнойЧастиПродукция(ТаблицаПоПродукции, СтруктураШапкиДокумента, СтратегииСписания)

	Если Продукция.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаПоПродукции Цикл

		ДвиженияПоВыпускуПродукцииОтходов(Строка, ОперацияБУ, ТаблицаДвиженийВыпускБУ, Истина, Ложь, СтратегииСписания);
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			ДвиженияПоВыпускуПродукцииОтходов(Строка, ОперацияНУ, ТаблицаДвиженийВыпускНУ, Ложь, Истина, СтратегииСписания);	
		КонецЕсли;		
		
	КонецЦикла;
	

	ДвиженияВыпускПродукцииУслугБУ.мПериод 			= Дата;
	ДвиженияВыпускПродукцииУслугБУ.мТаблицаДвижений = ТаблицаДвиженийВыпускБУ;
	
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		ДвиженияВыпускПродукцииУслугНУ.мПериод 			= Дата;
		ДвиженияВыпускПродукцииУслугНУ.мТаблицаДвижений = ТаблицаДвиженийВыпускНУ;
	КонецЕсли;

КонецПроцедуры // ДвиженияПоТабличнойЧастиПродукция()

// Процедура формирует движения регистров по табличной части Услуги
////
Процедура ДвиженияПоТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, СтратегииСписания)

	Если Услуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаПоУслугам Цикл

		 ДвиженияПоВыпускуВнутрУслуг(Строка, ОперацияБУ, ТаблицаДвиженийВыпускБУ, Истина, Ложь, СтратегииСписания);
		 
		 Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		 	ДвиженияПоВыпускуВнутрУслуг(Строка, ОперацияНУ, ТаблицаДвиженийВыпускНУ, Ложь,Истина, СтратегииСписания);
		КонецЕсли;
		
	КонецЦикла;
		

	ДвиженияВыпускПродукцииУслугБУ.мПериод 			= Дата;
	ДвиженияВыпускПродукцииУслугБУ.мТаблицаДвижений = ТаблицаДвиженийВыпускБУ;
	
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		ДвиженияВыпускПродукцииУслугНУ.мПериод 			= Дата;
		ДвиженияВыпускПродукцииУслугНУ.мТаблицаДвижений = ТаблицаДвиженийВыпускНУ;
	КонецЕсли;

КонецПроцедуры // ДвиженияПоТабличнойЧастиУслуги()

// Процедура формирует движения регистров по табличной части ВозвратныеОтходы
////
Процедура ДвиженияПоТабличнойЧастиОтходы(ТаблицаПоОтходам, СтруктураШапкиДокумента, СтратегииСписания)

	Если ВозвратныеОтходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;      

	Для Каждого Строка Из ТаблицаПоОтходам Цикл

		ДвиженияПоВыпускуОтходов(Строка, ОперацияБУ, ТаблицаДвиженийВыпускБУ, Истина, Ложь, СтратегииСписания);
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			ДвиженияПоВыпускуОтходов(Строка, ОперацияНУ, ТаблицаДвиженийВыпускНУ, Ложь, Истина, СтратегииСписания);
		КонецЕсли;		
	КонецЦикла;
		          
	ДвиженияВыпускПродукцииУслугБУ.мПериод 			= Дата;
	ДвиженияВыпускПродукцииУслугБУ.мТаблицаДвижений = ТаблицаДвиженийВыпускБУ;

КонецПроцедуры // ДвиженияПоТабличнойЧастиПродукция()

// Процедура формирует движения по выпуску продукции.
//
Процедура ДвиженияПоВыпускуПродукцииОтходов(Строка, Операция, ТаблицаДвиженийВыпуск, ПризнакБухгалтерскогоУчета,ПризнакНалоговогоУчета, СтратегииСписания)

	Если ПризнакБухгалтерскогоУчета Тогда
		Счет                		= Строка.СчетБУ;
		СчетЗатратТекущий   		= СчетЗатратБУ;
		СчетЗатратТекущийРегистра 	= СчетЗатратБУ;
	КонецЕсли;
              	
	Если ПризнакНалоговогоУчета Тогда
		Счет                		= Строка.СчетНУ;
		СчетЗатратТекущий   		= СчетЗатратНУ;
		СчетЗатратТекущийРегистра 	= СчетЗатратНУ;
	КонецЕсли;

	// Сформируем проводку.
	Если НЕ ЗначениеЗаполнено(Счет)
	 ИЛИ НЕ ЗначениеЗаполнено(СчетЗатратТекущий) Тогда
		Возврат;
	КонецЕсли;

	НоваяПроводка = Операция.Добавить();

	НоваяПроводка.Организация 	= Организация;
	НоваяПроводка.Период      	= Дата;
	НоваяПроводка.СчетДт 		= Счет;
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Номенклатура", Строка.Номенклатура);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Склады",       Склад);
	
	Если ПризнакБухгалтерскогоУчета Тогда
		
		// если нет соответствия стратегии выбранному счету, добавим значение
		Если СтратегииСписания.Получить(НоваяПроводка.СчетДт) = Неопределено Тогда
			
			СтратегииСписания.Вставить(НоваяПроводка.СчетДт, УправлениеЗапасами.ВедетсяПартионныйУчетДляСчета(НоваяПроводка.СчетДт));
			
		КонецЕсли;
		
		ВедетсяПартионныйУчетДляСчета = СтратегииСписания.Получить(НоваяПроводка.СчетДт);
		
		Если ВедетсяПартионныйУчетДляСчета Тогда
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Партии",  Ссылка);
			
		КонецЕсли;
	КонецЕсли;
       	
	НоваяПроводка.Содержание 	= "Выпуск продукции";

	НоваяПроводка.СчетКт 		= СчетЗатратТекущий;
	
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        ПодразделениеОрганизации);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", НоменклатурнаяГруппа);

	НоваяПроводка.КоличествоДт = ?(НоваяПроводка.СчетДТ.Количественный, Строка.Количество, 0);
	НоваяПроводка.Сумма        = Строка.СуммаПлановая;
	
	ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				НоваяПроводка, СтруктурноеПодразделение, СтруктурноеПодразделение);

	Если ПризнакНалоговогоУчета Тогда
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(НоваяПроводка, ВидУчетаНУ);
	КонецЕсли;
	
	// Отражения выпуска в регистре накопления ВыпускПродукцииУслуг
	СтрокаДвижения = ТаблицаДвиженийВыпуск.Добавить();
	СтрокаДвижения.Организация           = Организация;
	СтрокаДвижения.Продукция             = Строка.Номенклатура;
	СтрокаДвижения.СчетЗатрат            = СчетЗатратТекущийРегистра;
	СтрокаДвижения.Подразделение         = ПодразделениеОрганизации;
	СтрокаДвижения.НоменклатурнаяГруппа  = НоменклатурнаяГруппа;
	СтрокаДвижения.СчетСписания          = Счет;
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		СтрокаДвижения.СтруктурноеПодразделение = СтруктурноеПодразделение;
	КонецЕсли; 	
	
	Если Счет.ВидыСубконто.Количество() > 0 Тогда
		СтрокаДвижения.СубконтоСписания1 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[0].ВидСубконто];
	КонецЕсли; 
	
	Если Счет.ВидыСубконто.Количество() > 1 Тогда
		СтрокаДвижения.СубконтоСписания2 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[1].ВидСубконто];
	КонецЕсли;
	
	Если Счет.ВидыСубконто.Количество() > 2 Тогда
		СтрокаДвижения.СубконтоСписания3 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[2].ВидСубконто];
	КонецЕсли;
	
	Если ПризнакНалоговогоУчета Тогда
		СтрокаДвижения.ВидУчета        = НоваяПроводка.ВидУчетаКт;
	КонецЕсли;
			
	СтрокаДвижения.Количество = Строка.Количество;
	СтрокаДвижения.ПлановаяСтоимость = Строка.СуммаПлановая;
	
КонецПроцедуры // ДвиженияПоВыпускуПродукцииОтходов()

// Процедура формирует движения по выпуску отходов.
//
Процедура ДвиженияПоВыпускуОтходов(Строка, Операция, ТаблицаДвиженийВыпуск, ПризнакБухгалтерскогоУчета, ПризнакНалоговогоУчета, СтратегииСписания)
	
	Если ПризнакБухгалтерскогоУчета Тогда
		Счет                = Строка.СчетБУ;
		СчетЗатратТекущий   = СчетЗатратБУ;
		СтатьяЗатрат        = Строка.СтатьяЗатрат;
	Иначе
		
		Счет                = Строка.СчетНУ;
		СчетЗатратТекущий   = СчетЗатратНУ;
		СтатьяЗатрат        = Строка.СтатьяЗатрат;	
		
	КонецЕсли;
	
	// Сформируем проводку.
	Если НЕ ЗначениеЗаполнено(Счет)
		ИЛИ НЕ ЗначениеЗаполнено(СчетЗатратТекущий) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяПроводка = Операция.Добавить();
	
	НоваяПроводка.Организация = Организация;
	НоваяПроводка.Период      = Дата;
	
	НоваяПроводка.СчетКт = Счет;
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Номенклатура", Строка.Номенклатура);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Склады",       Склад);
	
	// если нет соответствия стратегии выбранному счету, добавим значение
	Если СтратегииСписания.Получить(НоваяПроводка.СчетКт) = Неопределено Тогда
		
		СтратегииСписания.Вставить(НоваяПроводка.СчетКт, УправлениеЗапасами.ВедетсяПартионныйУчетДляСчета(НоваяПроводка.СчетКт));
		
	КонецЕсли;
	
	Если ПризнакБухгалтерскогоУчета Тогда
		ВедетсяПартионныйУчетДляСчета = СтратегииСписания.Получить(НоваяПроводка.СчетКт);
		
		Если ВедетсяПартионныйУчетДляСчета Тогда
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Партии",  Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяПроводка.Содержание = "Выпуск возвратных отходов";
	
	НоваяПроводка.СчетДт = СчетЗатратТекущий;
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения",        ПодразделениеОрганизации);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", НоменклатурнаяГруппа);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         СтатьяЗатрат);
	
	ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				НоваяПроводка, СтруктурноеПодразделение, СтруктурноеПодразделение);

	Если ПризнакНалоговогоУчета Тогда
		
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(НоваяПроводка, ВидУчетаНУ);	
	КонецЕсли;

	НоваяПроводка.КоличествоКт = ?(НоваяПроводка.СчетКТ.Количественный, - Строка.Количество, 0);
	НоваяПроводка.Сумма        = - Строка.Сумма;
	
КонецПроцедуры // ДвиженияПоВыпускуОтходов()


// Процедура формирует движения по выпуску внутренних услуг производственных подразделений.
//
Процедура ДвиженияПоВыпускуВнутрУслуг(Строка, Операция, ТаблицаДвиженийВыпуск, ПризнакБухгалтерскогоУчета, ПризнакНалоговогоУчета, СтратегииСписания)

	Если ПризнакБухгалтерскогоУчета Тогда
		
		Счет                      = Строка.СчетБУ;
		СчетЗатратТекущий         = СчетЗатратБУ;
		СчетЗатратТекущийРегистра = СчетЗатратБУ;
	Иначе
		
		Счет                      = Строка.СчетНУ;
		СчетЗатратТекущий         = СчетЗатратНУ;
		СчетЗатратТекущийРегистра = СчетЗатратНУ;	
	КонецЕсли;
	

	// Сформируем проводку.
	Если НЕ ЗначениеЗаполнено(Счет)
	 ИЛИ НЕ ЗначениеЗаполнено(СчетЗатратТекущий) Тогда
		Возврат;
	КонецЕсли;

	НоваяПроводка = Операция.Добавить();

	НоваяПроводка.Организация = Организация;
	НоваяПроводка.Период      = Дата;

	НоваяПроводка.СчетДт = Счет;
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, Строка.СубконтоБУ1);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, Строка.СубконтоБУ2);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, Строка.СубконтоБУ3);

	НоваяПроводка.Содержание = "Выпуск внутр.услуг";

	НоваяПроводка.СчетКт = СчетЗатратТекущий;
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", НоменклатурнаяГруппа);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        ПодразделениеОрганизации);
	
	ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				НоваяПроводка, СтруктурноеПодразделение, СтруктурноеПодразделение);

	Если ПризнакНалоговогоУчета Тогда
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(НоваяПроводка, ВидУчетаНУ);	
	КонецЕсли;
	
	НоваяПроводка.КоличествоДт = ?(НоваяПроводка.СчетДТ.Количественный, Строка.Количество, 0);
	НоваяПроводка.Сумма        = Строка.СуммаПлановая;
	
	// Отражения выпуска в регистре накопления ВыпускПродукцииУслуг
	СтрокаДвижения = ТаблицаДвиженийВыпуск.Добавить();
	СтрокаДвижения.Организация           = Организация;
	СтрокаДвижения.Продукция             = Строка.Номенклатура;
	СтрокаДвижения.СчетЗатрат            = СчетЗатратТекущийРегистра;
	СтрокаДвижения.Подразделение         = ПодразделениеОрганизации;
	СтрокаДвижения.НоменклатурнаяГруппа  = НоменклатурнаяГруппа;
	СтрокаДвижения.СчетСписания          = Счет;
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		СтрокаДвижения.СтруктурноеПодразделение = СтруктурноеПодразделение;
	КонецЕсли; 	
	
	Если Счет.ВидыСубконто.Количество() > 0 Тогда
		СтрокаДвижения.СубконтоСписания1 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[0].ВидСубконто];
	КонецЕсли; 
	
	Если Счет.ВидыСубконто.Количество() > 1 Тогда
		СтрокаДвижения.СубконтоСписания2 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[1].ВидСубконто];
	КонецЕсли;
	
	Если Счет.ВидыСубконто.Количество() > 2 Тогда
		СтрокаДвижения.СубконтоСписания3 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[2].ВидСубконто];
	КонецЕсли;
	
	Если ПризнакНалоговогоУчета Тогда
		СтрокаДвижения.ВидУчета        = НоваяПроводка.ВидУчетаКт;
	КонецЕсли; 
	
	СтрокаДвижения.Количество 			= 0;
	СтрокаДвижения.ПлановаяСтоимость 	= Строка.СуммаПлановая;
	
КонецПроцедуры // ДвиженияПоВыпускуВнутрУслуг()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения"
////
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	
	мУчетнаяПолитикаПоНалоговомуУчету 		= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
	мУчетнаяПолитикаПоБухгалтерскомуУчету 	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Бух");
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	ВедениеУчетаВременныхРазницБалансовымМетодом = ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);
	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И ВедениеУчетаВременныхРазницБалансовымМетодом И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 	ВедениеУчетаВременныхРазницБалансовымМетодом);
	
	// Проверка заполнены ли все необходимые реквизиты шакпи.
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверка заполнены ли все необходимые реквизиты табличной части.
	ПроверкаРеквизитовТЧ(Отказ, Заголовок,СтруктураШапкиДокумента);
	
	//мУчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ, Организация, "Бух");

	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура" , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"       , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"   , "Количество");
	СтруктураПолей.Вставить("СуммаПлановая", "СуммаПлановая");
	СтруктураПолей.Вставить("СчетБУ"       , "СчетБУ");
	СтруктураПолей.Вставить("СчетНУ"       , "СчетНУ");
	СтруктураПолей.Вставить("НомерГТД"     ,"НомерГТД");
		
	РезультатЗапросаПоТаблицеПродукция = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураПолей);
	ТаблицаПоПродукции = РезультатЗапросаПоТаблицеПродукция.Выгрузить();
	
	СтруктураПолейУслуг = Новый Структура();
	СтруктураПолейУслуг.Вставить("Номенклатура" , "Номенклатура");
	СтруктураПолейУслуг.Вставить("Услуга"       , "Номенклатура.Услуга");
	СтруктураПолейУслуг.Вставить("СуммаПлановая", "СуммаПлановая");
	СтруктураПолейУслуг.Вставить("СчетБУ"       , "СчетБУ");
	СтруктураПолейУслуг.Вставить("СубконтоБУ1"  , "СубконтоБУ1");
	СтруктураПолейУслуг.Вставить("СубконтоБУ2"  , "СубконтоБУ2");
	СтруктураПолейУслуг.Вставить("СубконтоБУ3"  , "СубконтоБУ3");
	СтруктураПолейУслуг.Вставить("СчетНУ"       , "СчетНУ");
	СтруктураПолейУслуг.Вставить("СубконтоНУ1"  , "СубконтоНУ1");
	СтруктураПолейУслуг.Вставить("СубконтоНУ2"  , "СубконтоНУ2");
	СтруктураПолейУслуг.Вставить("СубконтоНУ3"  , "СубконтоНУ3");
	
	РезультатЗапросаПоТаблицеУслуги = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолейУслуг);
	ТаблицаПоУслугам = РезультатЗапросаПоТаблицеУслуги.Выгрузить();
	
	СтруктураПолейОтходов = Новый Структура();
	СтруктураПолейОтходов.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолейОтходов.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолейОтходов.Вставить("Сумма"       , "Сумма");
	СтруктураПолейОтходов.Вставить("Количество"  , "Количество");
	СтруктураПолейОтходов.Вставить("СчетБУ"      , "СчетБУ");
	СтруктураПолейОтходов.Вставить("СтатьяЗатрат", "СтатьяЗатрат");
	СтруктураПолейОтходов.Вставить("СчетНУ"      , "СчетНУ");
	СтруктураПолейОтходов.Вставить("НомерГТД"    ,"НомерГТД");
	
	РезультатЗапросаПоТаблицеОтходам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратныеОтходы", СтруктураПолейОтходов);
	ТаблицаПоОтходам = РезультатЗапросаПоТаблицеОтходам.Выгрузить();
	
	// Проверим, что в табличной части продукция не указаны услуги.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Продукция", ТаблицаПоПродукции, Отказ, Заголовок);
	
	// Проверим, что в табличной части Услуги не указаны счета учета МПЗ
	ПроверитьЧтоНетСчетаМПЗ(СтруктураШапкиДокумента,ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Проверим, что в табличной части услуги не указаны товары.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Проверим, что в табличной части отходы не указаны услуги.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратныеОтходы", ТаблицаПоОтходам, Отказ, Заголовок);
	
	Если НЕ Отказ Тогда // Формирование движений регистров
		
		// Очистим движения регистров.
		Для Каждого Движение Из Движения Цикл
			Движение.Очистить();
			Движение.Записать(Истина);
		КонецЦикла;
		
		ОперацияБУ = Движения["Типовой"];
		ОперацияНУ = Движения["Налоговый"];
		ДвиженияВыпускПродукцииУслугБУ = Движения["ВыпускПродукцииУслугБухгалтерскийУчет"];
		ТаблицаДвиженийВыпускБУ        = ДвиженияВыпускПродукцииУслугБУ.Выгрузить();
		
		ДвиженияВыпускПродукцииУслугНУ = Движения["ВыпускПродукцииУслугНалоговыйУчет"];
		ТаблицаДвиженийВыпускНУ        = ДвиженияВыпускПродукцииУслугНУ.Выгрузить();				
		// чтобы для каждой строки не выполнять запрос по стратегии списания для счета
		// добавим соответствие [Счет, СтратегияСписания]
		СтратегииСписания = Новый Соответствие;

		ДвиженияПоТабличнойЧастиПродукция(ТаблицаПоПродукции, СтруктураШапкиДокумента, СтратегииСписания);
		ДвиженияПоТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, СтратегииСписания);
		
		Если Продукция.Количество() <> 0 Или Услуги.Количество() <> 0 Тогда
			
			ДвиженияВыпускПродукцииУслугБУ.ДобавитьДвижение();
			
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				ДвиженияВыпускПродукцииУслугНУ.ДобавитьДвижение();
			КонецЕсли;

		КонецЕсли;
		
		ДвиженияПоТабличнойЧастиОтходы(ТаблицаПоОтходам, СтруктураШапкиДокумента, СтратегииСписания);
		
		// Движения по регистру накопления ТоварыОрганизацийБУ
		НомераГТДСервер.СформироватьДвиженияТоварыОрганизацийПриход(ТаблицаПоПродукции, СтруктураШапкиДокумента, Движения, Отказ);
		НомераГТДСервер.СформироватьДвиженияТоварыОрганизацийПриход(ТаблицаПоОтходам  , СтруктураШапкиДокумента, Движения, Отказ);
		
	КонецЕсли;

	Если Не Отказ  Тогда			
		ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

// Процедура - обработчик заполнения
////
Процедура ОбработкаЗаполнения(Основание)
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		// Заполнение шапки
		Комментарий 			 = Основание.Комментарий;
		Организация 			 = Основание.Организация;
		СтруктурноеПодразделение = Основание.СтруктурноеПодразделение;
		Ответственный 			 = Основание.Ответственный;
			
		Для Каждого ТекСтрокаУслуги Из Основание.Услуги Цикл
			НоваяСтрока 	= Продукция.Добавить();
			НоваяСтрока.Количество 			= ТекСтрокаУслуги.Количество;
			НоваяСтрока.Номенклатура 		= ТекСтрокаУслуги.Номенклатура;
			НоваяСтрока.ПлановаяСтоимость 	= ТекСтрокаУслуги.ПлановаяСтоимость;
			НоваяСтрока.Спецификация 		= ТекСтрокаУслуги.Спецификация;
			НоваяСтрока.СуммаПлановая 		= ТекСтрокаУслуги.СуммаПлановая;
			НоваяСтрока.СчетБУ 				= ТекСтрокаУслуги.СчетУчетаБУ;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью"
////
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	КраткийСоставДокумента = ЗаполнитьКраткийСоставДокументаПоРеквизитуТЧ(ЭтотОбъект, "Продукция", "Номенклатура");
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();