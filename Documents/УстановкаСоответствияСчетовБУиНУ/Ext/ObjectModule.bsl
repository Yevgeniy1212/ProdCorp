Перем мОтображатьСтруктурныеПодразделения Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Заполняет регистр сведений СоответствиеСчетовБУиНУ значениями по умолчанию
//
Процедура ЗаполнитьСоответствиеСчетовБУиНУпоУмолчанию() Экспорт
	
	СоответствиеСчетовБУиНУ.Очистить();
	
	#Если Клиент Тогда
	Состояние("Установка соответствий между счетами бухгалтерского и налогового учета...");
	#КонецЕсли
	Макет = ПолучитьМакет("СоответствияСчетовБУиНУ");
	
	Для Индекс = 2 По Макет.ВысотаТаблицы Цикл

		ИмяСчетаБУ     = Макет.Область(Индекс, 1, Индекс, 1).Текст;
		КодСчетаБУ     = Макет.Область(Индекс, 2, Индекс, 2).Текст;
		ИмяСчетаКоррБУ = Макет.Область(Индекс, 5, Индекс, 5).Текст;
		КодСчетаКоррБУ = Макет.Область(Индекс, 6, Индекс, 6).Текст;
		ИмяСчетаНУ     = Макет.Область(Индекс, 3, Индекс, 3).Текст;
		КодСчетаНУ     = Макет.Область(Индекс, 4, Индекс, 4).Текст;
		ИмяВидЗатратНУ = Макет.Область(Индекс, 7, Индекс, 7).Текст;
	
		Если КодСчетаБУ = "" Тогда
			Продолжить;
		КонецЕсли;
			
		СчетБУ = ПланыСчетов.Типовой.НайтиПоКоду(КодСчетаБУ);
		#Если Клиент Тогда
			Состояние("Установка соответствий для счета: " + Строка(СчетБУ));
		#КонецЕсли
		
		Если СчетБУ = Неопределено Тогда
			Продолжить; // Нет счета с таким именем
			Сообщить("Не счета БУ" + КодСчетаБУ);
		КонецЕсли;
		
		СчетКоррБУ = ПланыСчетов.Типовой.НайтиПоКоду(КодСчетаКоррБУ);
		Если СчетКоррБУ= Неопределено Тогда
			СчетКоррБУ = ПланыСчетов.Типовой.ПустаяСсылка();
		КонецЕсли;

		Если КодСчетаНУ = "" Тогда
			Продолжить;
		КонецЕсли;	
		СчетНУ = ПланыСчетов.Налоговый.НайтиПоКоду(КодСчетаНУ);
		Если СчетНУ = Неопределено Тогда
			Продолжить; // Нет счета с таким именем
			Сообщить("Не счета НУ" + КодСчетаНУ);
		КонецЕсли;
	    			
		Если НЕ ЗначениеЗаполнено(СчетБУ) Или НЕ ЗначениеЗаполнено(СчетНУ) Тогда
			Продолжить;
		КонецЕсли;
		ВидЗатратНУ = "";
		
		Запись = СоответствиеСчетовБУиНУ.Добавить();

		Запись.СчетБУ = СчетБУ;
		КолвоСубконто = СчетБУ.ВидыСубконто.Количество();
		Если КолвоСубконто > 0 Тогда
			Запись.СубконтоБУ1 = Новый(СчетБУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
		КонецЕсли;
		Если КолвоСубконто > 1 Тогда
			Запись.СубконтоБУ2 = Новый(СчетБУ.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0]);
		КонецЕсли;
		Если КолвоСубконто > 2 Тогда
			Запись.СубконтоБУ3 = Новый(СчетБУ.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0]);
		КонецЕсли;

		Если ЗначениеЗаполнено(СчетКоррБУ) Тогда
			Запись.СчетКоррБУ = СчетКоррБУ;
		КонецЕсли;


		Запись.СчетНУ = СчетНУ;
		КолвоСубконто = СчетНУ.ВидыСубконто.Количество();
		Если КолвоСубконто > 0 Тогда
			Запись.СубконтоНУ1 = Новый(СчетНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
		КонецЕсли;
		Если КолвоСубконто > 1 Тогда
			Запись.СубконтоНУ2 = Новый(СчетНУ.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0])
		КонецЕсли;
		Если КолвоСубконто > 2 Тогда
			Запись.СубконтоНУ3 = Новый(СчетНУ.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0])
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидЗатратНУ) Тогда
			Запись.ВидЗатратНУ = ВидЗатратНУ;
		КонецЕсли;
		
		Запись.Учитывается = Истина;		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСоответствиеСчетовБУиНУпоУмолчанию()

// Дополняет регистр сведений СоответствиеСчетовБУиНУ недостающими значениями по умолчанию 
//
Процедура ДополнитьСоответствиеСчетовБУиНУпоУмолчанию() Экспорт
	
	Макет = ПолучитьМакет("СоответствияСчетовБУиНУ");
	
	Для Индекс = 3 По Макет.ВысотаТаблицы Цикл

		ИмяСчетаБУ     = Макет.Область(Индекс, 1, Индекс, 1).Текст;
		КодСчетаБУ     = Макет.Область(Индекс, 2, Индекс, 2).Текст;
		ИмяСчетаКоррБУ = Макет.Область(Индекс, 5, Индекс, 5).Текст;
		КодСчетаКоррБУ = Макет.Область(Индекс, 6, Индекс, 6).Текст;
		ИмяСчетаНУ     = Макет.Область(Индекс, 3, Индекс, 3).Текст;
		КодСчетаНУ     = Макет.Область(Индекс, 4, Индекс, 4).Текст;
		ИмяВидЗатратНУ = Макет.Область(Индекс, 7, Индекс, 7).Текст;		
		ВидЗатратНУ	   = Справочники.СтатьиЗатрат.НайтиПоНаименованию(ИмяВидЗатратНУ);	
		Если КодСчетаБУ = "" Тогда
			Продолжить;
		КонецЕсли;	
		СчетБУ = ПланыСчетов.Типовой.НайтиПоКоду(КодСчетаБУ);
		#Если Клиент Тогда
			Состояние("Установка соответствий для счета: " + Строка(СчетБУ));
		#КонецЕсли
		
		Если СчетБУ = Неопределено Тогда
			Продолжить; // Нет счета с таким именем
			КонецЕсли;

			СчетКоррБУ = ПланыСчетов.Типовой.НайтиПоКоду(КодСчетаКоррБУ);
		Если СчетКоррБУ= Неопределено Тогда
			СчетКоррБУ = ПланыСчетов.Типовой.ПустаяСсылка();
		КонецЕсли;

		Если КодСчетаНУ = "" Тогда
			Продолжить;
		КонецЕсли;	
			СчетНУ = ПланыСчетов.Налоговый.НайтиПоКоду(КодСчетаНУ);
			Если СчетНУ = Неопределено Тогда
				Продолжить; // Нет счета с таким именем
			КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СчетБУ) Или НЕ ЗначениеЗаполнено(СчетНУ) Тогда
			Продолжить;
		КонецЕсли;
			СчетКоррБУ = ПланыСчетов.Типовой.НайтиПоКоду(КодСчетаКоррБУ);
		Если СчетКоррБУ= Неопределено Тогда
			СчетКоррБУ = ПланыСчетов.Типовой.ПустаяСсылка();
		КонецЕсли;
        		
		Запись = СоответствиеСчетовБУиНУ.Добавить();

		Запись.СчетБУ = СчетБУ;
		КолвоСубконто = СчетБУ.ВидыСубконто.Количество();
		Если КолвоСубконто > 0 Тогда
			Запись.СубконтоБУ1 = Новый(СчетБУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
		КонецЕсли;
		Если КолвоСубконто > 1 Тогда
			Запись.СубконтоБУ2 = Новый(СчетБУ.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0]);
		КонецЕсли;
		Если КолвоСубконто > 2 Тогда
			Запись.СубконтоБУ3 = Новый(СчетБУ.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0]);
		КонецЕсли;

		Если ЗначениеЗаполнено(СчетКоррБУ) Тогда
			Запись.СчетКоррБУ = СчетКоррБУ;
		КонецЕсли;


		Запись.СчетНУ = СчетНУ;
		КолвоСубконто = СчетНУ.ВидыСубконто.Количество();
		Если КолвоСубконто > 0 Тогда
			Запись.СубконтоНУ1 = Новый(СчетНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
		КонецЕсли;
		Если КолвоСубконто > 1 Тогда
			Запись.СубконтоНУ2 = Новый(СчетНУ.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0])
		КонецЕсли;
		Если КолвоСубконто > 2 Тогда
			Запись.СубконтоНУ3 = Новый(СчетНУ.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0])
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидЗатратНУ) Тогда
			Запись.ВидЗатратНУ = ВидЗатратНУ;
		КонецЕсли;
		Запись.Учитывается = Истина;
		
	КонецЦикла;
	
	ТекущийНабор = СоответствиеСчетовБУиНУ.Выгрузить();
	ТекущийНабор.Колонки.Добавить("Флаг", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1,0));
	ТекущийНабор.Свернуть("СчетБУ, СчетКоррБУ, ВидЗатратНУ, СчетНУ, Учитывается, Комментарий", "Флаг");
	
	НаборПроверки = СоответствиеСчетовБУиНУ.Выгрузить();
	НаборПроверки.Колонки.Добавить("Флаг", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1,0));
	НаборПроверки.Свернуть("СчетБУ, СчетКоррБУ, ВидЗатратНУ, СчетНУ, Учитывается, Комментарий", "Флаг");
	НаборПроверки.ЗаполнитьЗначения(1, "Флаг");
	НаборПроверки.Свернуть("СчетБУ, СчетКоррБУ, ВидЗатратНУ", "Флаг");
	Для Каждого СтрокаПроверки Из НаборПроверки Цикл
		КоличествоПовторений = СтрокаПроверки.Флаг;
		Если КоличествоПовторений > 1 Тогда
			Для Каждого СтрокаНабора Из ТекущийНабор Цикл
				Если СтрокаНабора.СчетБУ = СтрокаПроверки.СчетБУ И СтрокаНабора.СчетКоррБУ = СтрокаПроверки.СчетКоррБУ И СтрокаНабора.ВидЗатратНУ = СтрокаПроверки.ВидЗатратНУ Тогда
					ТекущийНабор.Удалить(СтрокаНабора);
					КоличествоПовторений = КоличествоПовторений - 1;
					Если КоличествоПовторений = 1 Тогда
					Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеСчетовБУиНУ.Загрузить(ТекущийНабор);
	
КонецПроцедуры // ДополнитьСоответствиеСчетовБУиНУпоУмолчанию()

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	//так как нет печатных форм у документа, по умолчанию
	//ТабДокумент = Неопределено
	ТабДокумент = Неопределено;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;  

    	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура();

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	СтруктураПолейШапки = Новый Структура;
	СтруктураПолейШапки.Вставить("Организация");
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,"",ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	

	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолейШапки, Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка));
	
	Для Каждого ТекСтрокаСоответствиеСчетовБУиНУ Из СоответствиеСчетовБУиНУ Цикл
		Движение = Движения.СоответствиеСчетовБУиНУ.Добавить();
		Движение.Период 	= Дата;
		Движение.СчетБУ 	= ТекСтрокаСоответствиеСчетовБУиНУ.СчетБУ;
		Движение.СчетКоррБУ = ТекСтрокаСоответствиеСчетовБУиНУ.СчетКоррБУ;
		
		Движение.СубконтоБУ1 = ?(НЕ ЗначениеЗаполнено(ТекСтрокаСоответствиеСчетовБУиНУ.СубконтоБУ1), Неопределено, ТекСтрокаСоответствиеСчетовБУиНУ.СубконтоБУ1);
		Движение.СубконтоБУ2 = ?(НЕ ЗначениеЗаполнено(ТекСтрокаСоответствиеСчетовБУиНУ.СубконтоБУ2), Неопределено, ТекСтрокаСоответствиеСчетовБУиНУ.СубконтоБУ2);
		Движение.СубконтоБУ3 = ?(НЕ ЗначениеЗаполнено(ТекСтрокаСоответствиеСчетовБУиНУ.СубконтоБУ3), Неопределено, ТекСтрокаСоответствиеСчетовБУиНУ.СубконтоБУ3);
		
		Движение.ВидЗатратНУ = ?(НЕ ЗначениеЗаполнено(ТекСтрокаСоответствиеСчетовБУиНУ.ВидЗатратНУ), Неопределено, ТекСтрокаСоответствиеСчетовБУиНУ.ВидЗатратНУ);
		
		Движение.СчетНУ = ТекСтрокаСоответствиеСчетовБУиНУ.СчетНУ;
		
		Движение.СубконтоНУ1 = ?(НЕ ЗначениеЗаполнено(ТекСтрокаСоответствиеСчетовБУиНУ.СубконтоНУ1), Неопределено, ТекСтрокаСоответствиеСчетовБУиНУ.СубконтоНУ1);
		Движение.СубконтоНУ2 = ?(НЕ ЗначениеЗаполнено(ТекСтрокаСоответствиеСчетовБУиНУ.СубконтоНУ2), Неопределено, ТекСтрокаСоответствиеСчетовБУиНУ.СубконтоНУ2);
		Движение.СубконтоНУ3 = ?(НЕ ЗначениеЗаполнено(ТекСтрокаСоответствиеСчетовБУиНУ.СубконтоНУ3), Неопределено, ТекСтрокаСоответствиеСчетовБУиНУ.СубконтоНУ3);
		
		Движение.Учитывается = ТекСтрокаСоответствиеСчетовБУиНУ.Учитывается;
		Движение.Комментарий = ТекСтрокаСоответствиеСчетовБУиНУ.Комментарий;
		Движение.РеквизитПредставление = "";
	КонецЦикла;
	
	Попытка	
		Движения.СоответствиеСчетовБУиНУ.Записать();	
	Исключение
		Сообщить("На дату "+ Формат(Дата,"ДФ=dd.MM.yyyy") +" уже существует документ «Установка соответствия счетов БУ и НУ».", СтатусСообщения.Важное);
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,РучнаяКорректировка);
КонецПроцедуры
                                                                                                                  
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();;