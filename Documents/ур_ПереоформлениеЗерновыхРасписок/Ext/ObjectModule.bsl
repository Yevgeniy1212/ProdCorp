////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ   

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

 #Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьЗР()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПереоформлениеЗерновойРасписки";
	
	Возврат ТабДокумент;

КонецФункции // ПечатьПоступлениеТоваров()


#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Макет" тогда
		// Управленческая печатная форма документа
		ТабДокумент = ПечатьЗР();
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	СтруктураПечатныхФорм = Новый Структура;
	СтруктураПечатныхФорм.Вставить("Макет", "Схема переоформления");
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

//Проверить заполненость обязательных реквизитов зерновой расписки
Процедура ПроверитьЗаполнениеЗерновыхРасписок(ТаблицаПоЗерновымРаспискам, Отказ, Заголовок)
	СтрокаНачалаСообщенияОбОшибке = "";
	Для каждого СтрокаЗР ИЗ ТаблицаПоЗерновымРаспискам Цикл
		СтрокаНачалаСообщенияОбОшибке = "";
		
		если Не ЗначениеЗаполнено(СтрокаЗР.ВидРесурса) Тогда
			
			СтрокаСообщения = "Не заполнено значение реквизита вид ресурса !";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаЗР.ГодУрожая) Тогда
			
			СтрокаСообщения = "Не заполнено значение реквизита Год урожая !";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаЗР.Культура) Тогда
			
			СтрокаСообщения = "Не заполнено значение реквизита Вид культуры !";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаЗР.Класс) Тогда
			
			СтрокаСообщения = "Не заполнено значение реквизита класс культуры !";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаЗР.ЗачтенныйВес) Тогда
			
			СтрокаСообщения = "Не заполнено значение реквизита зачтенный вес !";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Проверить заполнение реквизитов табличной части

Процедура ПроверитьЗаполнениетабличнойЧасти(Отказ, Заголовок)
	
	для каждого СтрокаТЧ ИЗ Товары Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки);
		
		если Не ЗначениеЗаполнено(СтрокаТЧ.ЗерноваяРасписка) Тогда
			
			СтрокаСообщения = "Не заполнено значение реквизита зерновая расписка !";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		если Не ЗначениеЗаполнено(СтрокаТЧ.Количество) Тогда
			
			СтрокаСообщения = "Не заполнено значение реквизита зачтенный вес !";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		если Не ЗначениеЗаполнено(СтрокаТЧ.НоваяЗерноваяРасписка) Тогда
			
			СтрокаСообщения = "Не заполнено значение реквизита  зерновая расписка !";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		если Не ЗначениеЗаполнено(СтрокаТЧ.нКоличество) Тогда
			
			СтрокаСообщения = "Не заполнено значение реквизита зачтенный вес !";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
Конецпроцедуры

	
// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Склад, ВидРесурса");
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()


Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента,ТаблицаПоЗерновымРаспискам, 
							ТаблицаПриходаПоЗерновымРаспискам, ТаблицаРасходаПоЗерновымРаспискам, Отказ, Заголовок);

  	ДвиженияРегистровСведенийПодсистемыУчетаРесурсов(ТаблицаРасходаПоЗерновымРаспискам, СтруктураШапкиДокумента);
	
  	ДвиженияПоРегиструБронирования(ЭтотОбъект, СтруктураШапкиДокумента, Отказ);
	
	// Выполнить движения расхода по регистру накопления "Зерно на складах"
	
	НаборДвижений = Движения.ур_ЗерноНаСкладах;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// Заполним таблицу движений.
	ТаблицаПоЗерновымРаспискамПолученным = ТаблицаРасходаПоЗерновымРаспискам.Скопировать();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоЗерновымРаспискамПолученным, ТаблицаДвижений);
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(ТипОперации,"ТипОперации");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	
	Если Не Отказ Тогда
		Движения.ур_ЗерноНаСкладах.ВыполнитьРасход();
	КонецЕсли;
	
	Для каждого СтрокаТаблицы ИЗ ТаблицаРасходаПоЗерновымРаспискам Цикл
		//Движение по оборотному регистру "Движения зерна"
		Движение = Движения.ур_ДвиженияЗерна.Добавить();
		
		Движение.Период 				 = СтруктураШапкиДокумента.Дата;
		Движение.Организация 			 = СтруктураШапкиДокумента.Организация;
		Движение.Склад 	  				 = СтруктураШапкиДокумента.Склад;
		Движение.ТипОперации			 = СтруктураШапкиДокумента.ТипОперации;
		Движение.Контрагент 			 = СтруктураШапкиДокумента.Склад;
		//Движение.ДоговорКонтрагента 	 = СтруктураШапкиДокумента.ДоговорКонтрагента;
		Движение.Видресурса				 = СтрокаТаблицы.Видресурса;
		Движение.РегламентныйВидОперации = Перечисления.ур_РегламентныеОперацииДвиженияЗерна.Расход;
		Движение.Зерноваярасписка		 = СтрокаТаблицы.Зерноваярасписка;
		Движение.ЗачтенныйВес  			 = СтрокаТаблицы.ЗачтенныйВес;
		
		
	КонецЦикла;
	
	// Выполнить движения прихода по регистру накопления "Зерно на складах"
	
	НаборДвижений = Движения.ур_ЗерноНаСкладах;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// Заполним таблицу движений.
	ТаблицаПоЗерновымРаспискамПолученным = ТаблицаПриходаПоЗерновымРаспискам.Скопировать();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоЗерновымРаспискамПолученным, ТаблицаДвижений);
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(ТипОперации,"ТипОперации");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	
	Если Не Отказ Тогда
		Движения.ур_ЗерноНаСкладах.ВыполнитьПриход();
	КонецЕсли;
	
	Для каждого СтрокаТаблицы ИЗ ТаблицаПриходаПоЗерновымРаспискам Цикл
		//Движение по оборотному регистру "Движения зерна"
		Движение = Движения.ур_ДвиженияЗерна.Добавить();
		
		Движение.Период 				 = СтруктураШапкиДокумента.Дата;
		Движение.Организация 			 = СтруктураШапкиДокумента.Организация;
		Движение.Склад 	  				 = СтруктураШапкиДокумента.Склад;
		Движение.ТипОперации			 = СтруктураШапкиДокумента.ТипОперации;
		Движение.Контрагент 			 = СтруктураШапкиДокумента.Склад;
		Движение.Видресурса				 = СтрокаТаблицы.Видресурса;
		Движение.РегламентныйВидОперации = Перечисления.ур_РегламентныеОперацииДвиженияЗерна.Приход;
		Движение.Зерноваярасписка		 = СтрокаТаблицы.Зерноваярасписка;
		Движение.ЗачтенныйВес  			 = СтрокаТаблицы.ЗачтенныйВес;
	КонецЦикла;

	Если Не Отказ Тогда
		// Формирование проводок
		// Проводки по поступлению товаров, тары и услуг.
		
		ДатаДока   = Дата;
		ПроводкиБУ 					= Движения.Типовой;
		ПроводкиНУ 					= Движения.Налоговый;
		
		Для каждого СтрокаТаблицы ИЗ ТаблицаПоЗерновымРаспискам Цикл
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = ДатаДока;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Списание при переоформлении зерновой расписки";
			
			Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", 	 СтруктураШапкиДокумента.Номенклатура,Истина, Заголовок);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       	 СтруктураШапкиДокумента.Склад);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии",  СтрокаТаблицы.ЗерноваяРасписка);
			Проводка.КоличествоДт = СтрокаТаблицы.ЗачтенныйВес;
			
			Проводка.СчетКт       = СтрокаТаблицы.СчетУчетаБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Номенклатура", 	 СтруктураШапкиДокумента.Номенклатура,Истина, Заголовок);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Склады",       	 СтруктураШапкиДокумента.Склад);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Партии",  СтрокаТаблицы.ЗерноваяРаспискаСписания);
			Проводка.КоличествоКт = СтрокаТаблицы.ЗачтенныйВес;
			
			Проводка.Сумма = СтрокаТаблицы.Сумма;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияРегистровСведенийПоСтроке(СтрокаТаблицы,СтруктураШапкиДокумента, КонтрагентОрганизации)
	
	Статус = УправлениеРесурсами.ПолучитьСтатусЗерновойРасписки(СтрокаТаблицы.ЗерноваяРасписка);
	если Статус = Перечисления.ур_СтатусыЗерновойРасписки.Действующая Тогда
		//Движения по регистру сведений "Статусы зерновых расписок
		//
		Движение = Движения.ур_СтатусыЗерновыхРасписок.Добавить();
		// Свойства
		Движение.Период           = СтруктураШапкиДокумента.Дата;
		// Измерения
		Движение.ЗерноваяРасписка = СтрокаТаблицы.ЗерноваяРасписка.Ссылка;
		
		// Ресурсы
		Движение.Статус         = Перечисления.ур_СтатусыЗерновойРасписки.Закрыта;
	КонецЕсли;
	
	Статус = УправлениеРесурсами.ПолучитьСтатусПогашения(СтрокаТаблицы.ЗерноваяРасписка);
	если Статус = Неопределено Тогда
		// Движения по регистру сведений "Погашения зерновой расписки"
		//
		Движение = Движения.ур_ПогашенияЗерновыхРасписок.Добавить();
		// Свойства
		Движение.Период           = СтруктураШапкиДокумента.Дата;
		// Измерения
		Движение.ЗерноваяРасписка = СтрокаТаблицы.ЗерноваяРасписка.Ссылка;
		
		// Ресурсы
		Движение.ВидПогашения         = Перечисления.ур_ВидыПогашенияЗерновыхРасписок.Замена;
		Движение.ДатаПогашения        = СтруктураШапкиДокумента.Дата;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияРегистровСведенийПодсистемыУчетаРесурсов(ТаблицаПоЗерновымРаспискам,СтруктураШапкиДокумента)
	
	НаборЗаписей = РегистрыСведений.СобственныеКонтрагенты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Значение = СтруктураШапкиДокумента.организация;
	НаборЗаписей.Отбор.Организация.Использование = Истина;
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		КонтрагентОрганизации = НаборЗаписей[0].Контрагент;
	Иначе 
		КонтрагентОрганизации = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Для каждого СтрокаТаблицы ИЗ ТаблицаПоЗерновымРаспискам Цикл
		ДвиженияРегистровСведенийПоСтроке(СтрокаТаблицы,СтруктураШапкиДокумента, КонтрагентОрганизации);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструБронирования(ЭтотОбъект, СтруктураШапкиДокумента, Отказ)
	ТаблицаБронированияЗерна = УправлениеРесурсами.СформироватьТаблицуЗабронированногоЗерна(ЭтотОбъект, СтруктураШапкиДокумента);
	
	НаборДвижений = Движения.ур_ЗабронированноеЗерно;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// Заполним таблицу движений.
	ТаблицаПоЗерновымРаспискамПолученным = ТаблицаБронированияЗерна.Скопировать();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоЗерновымРаспискамПолученным, ТаблицаДвижений);
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
		
	
	Если Не Отказ Тогда
		Движения.ур_ЗабронированноеЗерно.ВыполнитьРасход();
	КонецЕсли;
	
	Для Каждого Стр из ТаблицаДвижений Цикл
		ЗерноваяСтарая = Стр.ЗерноваяРасписка;
		
		// регистр ур_ЗабронированноеЗерно Приход
		Для Каждого ТекСтрокаТовары Из Товары Цикл
			
			Если ТекСтрокаТовары.ЗерноваяРасписка = ЗерноваяСтарая Тогда
				
				Движение = Движения.ур_ЗабронированноеЗерно.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
				Движение.Период = Дата;
				Движение.Организация = Организация;
				Движение.ВидРесурса = ВидРесурса;
				Движение.Склад = Склад;
				Движение.ТипОперации = ТипОперации;
				Движение.ГодУрожая = ТекСтрокаТовары.НоваяЗерноваяРасписка.ГодУрожая;
				Движение.Культура = ТекСтрокаТовары.НоваяЗерноваяРасписка.ВидКультуры;
				Движение.Класс = ТекСтрокаТовары.НоваяЗерноваяРасписка.КлассностьКультуры;
				Движение.Зерноваярасписка = ТекСтрокаТовары.НоваяЗерноваяРасписка;
				Движение.Получатель = ТекСтрокаТовары.НоваяЗерноваяРасписка.УчастникЕЗХ;
				Движение.Зачтенныйвес = ТекСтрокаТовары.нКоличество;
			КонецЕсли;
			
		КонецЦикла;

		
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
		           
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ТаблицаРасходаПоЗерновымРаспискам = УправлениеРесурсами.ПодготовитьТаблицуРасходаЗерновыхРасписокПриПереоформлении(ЭтотОбъект);
	ТаблицаПриходаПоЗерновымРаспискам = УправлениеРесурсами.ПодготовитьТаблицуПриходаЗерновыхРасписокПриПереоформлении(ЭтотОбъект);
	ТаблицаПоЗерновымРаспискам = УправлениеРесурсами.ПодготовитьТаблицуЗерновыхРасписокПриПереоформлении(ЭтотОбъект);
	
	ПроверитьЗаполнениеЗерновыхРасписок(ТаблицаПриходаПоЗерновымРаспискам, Отказ, Заголовок);
	ПроверитьЗаполнениеЗерновыхРасписок(ТаблицаРасходаПоЗерновымРаспискам, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТабличнойЧасти(Отказ,Заголовок);
	
	//Отключено по просьбе пользователей 05.10.2021
	//УправлениеРесурсами.КонтрольОстатковНаЗерновыхРасписках(ЭтотОбъект,СтруктураШапкиДокумента,"Товары",Отказ);
	
	//УправлениеРесурсами.КонтрольБронированияНаЗерновыхРасписках(ЭтотОбъект,СтруктураШапкиДокумента,"Товары",Отказ);
	
	УправлениеРесурсами.КонтрольЗалогаНаЗерновыхРасписках(ЭтотОбъект,СтруктураШапкиДокумента,"Товары",Отказ);
	
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента,ТаблицаПоЗерновымРаспискам, 
							ТаблицаПриходаПоЗерновымРаспискам, ТаблицаРасходаПоЗерновымРаспискам, Отказ, Заголовок);
							
	КонецЕсли;	
	          
КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
