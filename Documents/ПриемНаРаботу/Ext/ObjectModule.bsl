Перем мДлинаСуток;
Перем мВалютаУправленческогоУчета Экспорт;
Перем мСписокНедоступныхРасчетов;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Заполняет табличную часть документа "Работники" списком принятых во все организации за период
//
Процедура ЗаполнитьТабличнуюЧастьРаботникиПринятымиВОрганизации(ДатаНачалаПериода, ДатаОкончанияПериода) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаПериода", ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ДатаОкончанияПериода", ДатаОкончанияПериода);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПриемыВОрганизации.Сотрудник,
	               |	ПриемыВОрганизации.ФизЛицо,
	               |	ВложенныйЗапрос.ДатаПриема,
	               |	ВложенныйЗапрос.ИспытательныйСрок,
	               |	ВложенныйЗапрос.ЗанимаемыхСтавок,
	               |	ПриемыВОрганизации.ДатаУвольнения,
				   |	ПриемыВОрганизации.ГрафикРаботы,
	               |	ПриемыВОрганизации.ПроизошедшееСобытие,
				   |	ПриемыВОрганизации.Должность,
    			   |	СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВложенныйЗапрос.ФизЛицо КАК ФизЛицо,
	               |		ВложенныйЗапрос.ДатаПриема КАК ДатаПриема,
	               |		ЗНАЧЕНИЕ(Перечисление.ИспытательныйСрок.БезИспытательногоСрока) КАК ИспытательныйСрок,
	               |		1 КАК ЗанимаемыхСтавок,
	               |		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПриемыВОрганизации.Ссылка.Организация) КАК Организация
	               |	ИЗ
	               |		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ПриемыВОрганизации.ФизЛицо КАК ФизЛицо,
	               |			МИНИМУМ(ПриемыВОрганизации.ДатаПриема) КАК ДатаПриема
	               |		ИЗ
	               |			Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемыВОрганизации
	               |		ГДЕ
	               |			ПриемыВОрганизации.Ссылка.Проведен
	               |			И ПриемыВОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)";
				   Если ЗначениеЗаполнено(ДатаНачалаПериода) Тогда
				   Запрос.Текст = Запрос.Текст + "
				   |			И ПриемыВОрганизации.ДатаПриема >= &ДатаНачалаПериода";
				   КонецЕсли;
				   Если ЗначениеЗаполнено(ДатаОкончанияПериода) Тогда
				   Запрос.Текст = Запрос.Текст + "
				   |			И ПриемыВОрганизации.ДатаПриема <= &ДатаОкончанияПериода";
				   КонецЕсли;
				   Запрос.Текст = Запрос.Текст + "
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ПриемыВОрганизации.ФизЛицо) КАК ВложенныйЗапрос
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемыВОрганизации
	               |			ПО ВложенныйЗапрос.ФизЛицо = ПриемыВОрганизации.ФизЛицо
	               |				И ВложенныйЗапрос.ДатаПриема = ПриемыВОрганизации.ДатаПриема
	               |				И (ПриемыВОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВложенныйЗапрос.ФизЛицо,
	               |		ВложенныйЗапрос.ДатаПриема) КАК ВложенныйЗапрос
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемыВОрганизации
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
	               |			ПО ПриемыВОрганизации.Ссылка.Организация = СоответствиеПодразделенийИПодразделенийОрганизаций.Организация
	               |				И ПриемыВОрганизации.ПодразделениеОрганизации = СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации
	               |		ПО ВложенныйЗапрос.ФизЛицо = ПриемыВОрганизации.Сотрудник.Физлицо
	               |			И (ПриемыВОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	               |			И ВложенныйЗапрос.ДатаПриема = ПриемыВОрганизации.ДатаПриема
	               |			И (ВложенныйЗапрос.Организация = 1)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПриемыВОрганизации.Сотрудник.Наименование";
	
	ТаблицаРаботников = Запрос.Выполнить().Выгрузить();
	Работники.Загрузить(ТаблицаРаботников);

	ЗаполнениеПоСхемамМотивации();

КонецПроцедуры 

// Заполняет начисления и удержания по схемам мотивации
//
Процедура ЗаполнениеПоСхемамМотивации(ИмяТабличнойЧасти = "") Экспорт
	
	Если ИмяТабличнойЧасти = "Начисления" ИЛИ ИмяТабличнойЧасти = "" Тогда
		Начисления.Очистить();
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Взыскания" ИЛИ ИмяТабличнойЧасти = "" Тогда
		Взыскания.Очистить();
	КонецЕсли;
	
	// заполним табличные части Начисления и Взыскания
	НачисленияИВзыскания = ЗаполнениеДокументов.ПолучитьТаблицуДействийСУправленческимиНачислениями(Работники.Выгрузить(), Ссылка, Дата, Ложь);
	
	Если ИмяТабличнойЧасти = "Начисления" Тогда
		СтрокиНачисленийВзысканий = НачисленияИВзыскания.НайтиСтроки(Новый Структура("ЭтоНачисление", Истина));
	ИначеЕсли ИмяТабличнойЧасти = "Взыскания" Тогда
		СтрокиНачисленийВзысканий = НачисленияИВзыскания.НайтиСтроки(Новый Структура("ЭтоНачисление", Ложь));
	Иначе
		СтрокиНачисленийВзысканий = НачисленияИВзыскания;
	КонецЕсли;
	
	Для Каждого СтрокаНачисленийВзысканий Из СтрокиНачисленийВзысканий Цикл
		Если СтрокаНачисленийВзысканий.ЭтоНачисление Тогда
			НоваяСтрока = Начисления.Добавить();
		Иначе
			НоваяСтрока = Взыскания.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисленийВзысканий);
	КонецЦикла;
	
КонецПроцедуры

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция  Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	ТабДокумент = ПриемНаРаботуПереопределяемый.ПечатьДополнительныхФорм(ИмяМакета, ЭтотОбъект);

	Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,"Прием на работу "));

КонецФункции // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	
	ПриемНаРаботуПереопределяемый.ДополнитьСтруктуруПечатныхФорм(СтруктураПечатныхФорм, ЭтотОбъект);
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		НоваяСтрока = Работники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Основание);
		НоваяСтрока.Сотрудник = Основание;
		НоваяСтрока.ФизЛицо = Основание.ФизЛицо;
		Если НоваяСтрока.ЗанимаемыхСтавок = 0 Тогда
			НоваяСтрока.ЗанимаемыхСтавок = 1;
		КонецЕсли;

	КонецЕсли;
	
	ДокументОснование = Основание;
	
КонецПроцедуры // ОбработкаЗаполненияУпр()

// Добавляет строки в табличные части "Начисления" и "Взыскания" на основе данных строки
//  табличной части "Работники"
//
Процедура ДобавитьНачисленияПоСтроке(СтрокаТабличнойЧасти) Экспорт
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СтрокаТабличнойЧасти);
	
	ДействияСНачислениями = ЗаполнениеДокументов.ПолучитьТаблицуДействийСУправленческимиНачислениями(Работники.Выгрузить(МассивСтрок), Ссылка, Дата, Ложь);

	СтруктураПоиска = Новый Структура("Физлицо, ВидРасчета");
	
	Для Каждого СтрокаТаблицы Из ДействияСНачислениями Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		Если СтрокаТаблицы.ЭтоНачисление Тогда
			МассивНачислений = Начисления.НайтиСтроки(СтруктураПоиска);
		Иначе
			МассивНачислений = Взыскания.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		
		Если МассивНачислений.Количество() = 0 Тогда
			Если СтрокаТаблицы.ЭтоНачисление Тогда
				ЗаполнитьЗначенияСвойств(Начисления.Добавить(), СтрокаТаблицы);
			Иначе
				ЗаполнитьЗначенияСвойств(Взыскания.Добавить(), СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьНачисленияПоСтроке()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	Дата, 
	| 	Ссылка 
	|ИЗ 
	|	Документ." + Метаданные().Имя + "
	|ГДЕ 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Работники" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоРаботники(Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
   	Запрос.УстановитьПараметр("МассивФизЛиц", Работники.ВыгрузитьКолонку("ФизЛицо"));

	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "Работники": 
	// 1. Выборка "ТЧРаботники": 
	//		Выбираются строки документа.  
	// 2. Выборка "ДанныеПоРаботникуДоНазначения": 
	//		Для каждой строки ТЧРаботники выполняем срез по регистру РегистрСведенийРаботники на дату ДатаНачала
	//		для выполнения проверки "Работник не должен работать на дату приема"
	// 3. Выборка "ДанныеПоКандидатуДоНазначения":
	//		Для каждой строки ТЧРаботники выполняем срез по регистру КандидатыНаРаботу на дату ДатаНачала
	//		для выполнения движений по регистру КандидатыНаРаботу  
	// 4. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки с одинаковым значением реквизита "ФизЛицо".
    //
	// Вторая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	//		На каждую дату приема и увольнения ищем движения в регистре "Работники"
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.ВидРасчета,
	|	МАКСИМУМ(Показатели.НомерСтроки) КАК КоличествоПоказателей,
	|	Показатели1.Показатель.Наименование КАК Показатель1Наименование,
	|	Показатели2.Показатель.Наименование КАК Показатель2Наименование,
	|	Показатели3.Показатель.Наименование КАК Показатель3Наименование,
	|	Показатели4.Показатель.Наименование КАК Показатель4Наименование,
	|	Показатели5.Показатель.Наименование КАК Показатель5Наименование,
	|	Показатели6.Показатель.Наименование КАК Показатель6Наименование,
	|	Показатели1.Показатель.ТипПоказателя КАК Показатель1ТипПоказателя,
	|	Показатели2.Показатель.ТипПоказателя КАК Показатель2ТипПоказателя,
	|	Показатели3.Показатель.ТипПоказателя КАК Показатель3ТипПоказателя,
	|	Показатели4.Показатель.ТипПоказателя КАК Показатель4ТипПоказателя,
	|	Показатели5.Показатель.ТипПоказателя КАК Показатель5ТипПоказателя,
	|	Показатели6.Показатель.ТипПоказателя КАК Показатель6ТипПоказателя,
	|	Показатели1.Показатель.ВозможностьИзменения КАК Показатель1ВозможностьИзменения,
	|	Показатели2.Показатель.ВозможностьИзменения КАК Показатель2ВозможностьИзменения,
	|	Показатели3.Показатель.ВозможностьИзменения КАК Показатель3ВозможностьИзменения,
	|	Показатели4.Показатель.ВозможностьИзменения КАК Показатель4ВозможностьИзменения,
	|	Показатели5.Показатель.ВозможностьИзменения КАК Показатель5ВозможностьИзменения,
	|	Показатели6.Показатель.ВозможностьИзменения КАК Показатель6ВозможностьИзменения,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели1.Показатель.Предопределенный КАК Показатель1Предопределенный,
	|	Показатели2.Показатель.Предопределенный КАК Показатель2Предопределенный,
	|	Показатели3.Показатель.Предопределенный КАК Показатель3Предопределенный,
	|	Показатели4.Показатель.Предопределенный КАК Показатель4Предопределенный,
	|	Показатели5.Показатель.Предопределенный КАК Показатель5Предопределенный,
	|	Показатели6.Показатель.Предопределенный КАК Показатель6Предопределенный,
	|	Показатели1.Показатель.Валюта КАК Показатель1Валюта,
	|	Показатели2.Показатель.Валюта КАК Показатель2Валюта,
	|	Показатели3.Показатель.Валюта КАК Показатель3Валюта,
	|	Показатели4.Показатель.Валюта КАК Показатель4Валюта,
	|	Показатели5.Показатель.Валюта КАК Показатель5Валюта,
	|	Показатели6.Показатель.Валюта КАК Показатель6Валюта
	|ПОМЕСТИТЬ ВТ_ПоказателиНачислений
	|ИЗ
	|	Документ.ПриемНаРаботу.Начисления КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели
	|		ПО ТЧНачисления.ВидРасчета = Показатели.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели1
	|		ПО ТЧНачисления.ВидРасчета = Показатели1.Ссылка
	|			И (Показатели1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели2
	|		ПО ТЧНачисления.ВидРасчета = Показатели2.Ссылка
	|			И (Показатели2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели3
	|		ПО ТЧНачисления.ВидРасчета = Показатели3.Ссылка
	|			И (Показатели3.НомерСтроки = 3)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели4
	|		ПО ТЧНачисления.ВидРасчета = Показатели4.Ссылка
	|			И (Показатели4.НомерСтроки = 4)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели5
	|		ПО ТЧНачисления.ВидРасчета = Показатели5.Ссылка
	|			И (Показатели5.НомерСтроки = 5)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели6
	|		ПО ТЧНачисления.ВидРасчета = Показатели6.Ссылка
	|			И (Показатели6.НомерСтроки = 6)
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧНачисления.НомерСтроки,
	|	ТЧНачисления.ВидРасчета,
	|	Показатели1.Показатель.Наименование,
	|	Показатели2.Показатель.Наименование,
	|	Показатели3.Показатель.Наименование,
	|	Показатели4.Показатель.Наименование,
	|	Показатели5.Показатель.Наименование,
	|	Показатели6.Показатель.Наименование,
	|	Показатели1.Показатель.ТипПоказателя,
	|	Показатели2.Показатель.ТипПоказателя,
	|	Показатели3.Показатель.ТипПоказателя,
	|	Показатели4.Показатель.ТипПоказателя,
	|	Показатели5.Показатель.ТипПоказателя,
	|	Показатели6.Показатель.ТипПоказателя,
	|	Показатели1.Показатель.ВозможностьИзменения,
	|	Показатели2.Показатель.ВозможностьИзменения,
	|	Показатели3.Показатель.ВозможностьИзменения,
	|	Показатели4.Показатель.ВозможностьИзменения,
	|	Показатели5.Показатель.ВозможностьИзменения,
	|	Показатели6.Показатель.ВозможностьИзменения,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели1.Показатель.Предопределенный,
	|	Показатели2.Показатель.Предопределенный,
	|	Показатели3.Показатель.Предопределенный,
	|	Показатели4.Показатель.Предопределенный,
	|	Показатели5.Показатель.Предопределенный,
	|	Показатели6.Показатель.Предопределенный,
	|	Показатели1.Показатель.Валюта,
	|	Показатели2.Показатель.Валюта,
	|	Показатели3.Показатель.Валюта,
	|	Показатели4.Показатель.Валюта,
	|	Показатели5.Показатель.Валюта,
	|	Показатели6.Показатель.Валюта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧВзыскания.НомерСтроки КАК НомерСтроки,
	|	ТЧВзыскания.ВидРасчета,
	|	МАКСИМУМ(Показатели.НомерСтроки) КАК КоличествоПоказателей,
	|	Показатели1.Показатель.Наименование КАК Показатель1Наименование,
	|	Показатели2.Показатель.Наименование КАК Показатель2Наименование,
	|	Показатели3.Показатель.Наименование КАК Показатель3Наименование,
	|	Показатели4.Показатель.Наименование КАК Показатель4Наименование,
	|	Показатели5.Показатель.Наименование КАК Показатель5Наименование,
	|	Показатели6.Показатель.Наименование КАК Показатель6Наименование,
	|	Показатели1.Показатель.ТипПоказателя КАК Показатель1ТипПоказателя,
	|	Показатели2.Показатель.ТипПоказателя КАК Показатель2ТипПоказателя,
	|	Показатели3.Показатель.ТипПоказателя КАК Показатель3ТипПоказателя,
	|	Показатели4.Показатель.ТипПоказателя КАК Показатель4ТипПоказателя,
	|	Показатели5.Показатель.ТипПоказателя КАК Показатель5ТипПоказателя,
	|	Показатели6.Показатель.ТипПоказателя КАК Показатель6ТипПоказателя,
	|	Показатели1.Показатель.ВозможностьИзменения КАК Показатель1ВозможностьИзменения,
	|	Показатели2.Показатель.ВозможностьИзменения КАК Показатель2ВозможностьИзменения,
	|	Показатели3.Показатель.ВозможностьИзменения КАК Показатель3ВозможностьИзменения,
	|	Показатели4.Показатель.ВозможностьИзменения КАК Показатель4ВозможностьИзменения,
	|	Показатели5.Показатель.ВозможностьИзменения КАК Показатель5ВозможностьИзменения,
	|	Показатели6.Показатель.ВозможностьИзменения КАК Показатель6ВозможностьИзменения,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели1.Показатель.Предопределенный КАК Показатель1Предопределенный,
	|	Показатели2.Показатель.Предопределенный КАК Показатель2Предопределенный,
	|	Показатели3.Показатель.Предопределенный КАК Показатель3Предопределенный,
	|	Показатели4.Показатель.Предопределенный КАК Показатель4Предопределенный,
	|	Показатели5.Показатель.Предопределенный КАК Показатель5Предопределенный,
	|	Показатели6.Показатель.Предопределенный КАК Показатель6Предопределенный,
	|	Показатели1.Показатель.Валюта КАК Показатель1Валюта,
	|	Показатели2.Показатель.Валюта КАК Показатель2Валюта,
	|	Показатели3.Показатель.Валюта КАК Показатель3Валюта,
	|	Показатели4.Показатель.Валюта КАК Показатель4Валюта,
	|	Показатели5.Показатель.Валюта КАК Показатель5Валюта,
	|	Показатели6.Показатель.Валюта КАК Показатель6Валюта
	|ПОМЕСТИТЬ ВТ_ПоказателиВзысканий
	|ИЗ
	|	Документ.ПриемНаРаботу.Взыскания КАК ТЧВзыскания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели
	|		ПО ТЧВзыскания.ВидРасчета = Показатели.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели1
	|		ПО ТЧВзыскания.ВидРасчета = Показатели1.Ссылка
	|			И (Показатели1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели2
	|		ПО ТЧВзыскания.ВидРасчета = Показатели2.Ссылка
	|			И (Показатели2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели3
	|		ПО ТЧВзыскания.ВидРасчета = Показатели3.Ссылка
	|			И (Показатели3.НомерСтроки = 3)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели4
	|		ПО ТЧВзыскания.ВидРасчета = Показатели4.Ссылка
	|			И (Показатели4.НомерСтроки = 4)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели5
	|		ПО ТЧВзыскания.ВидРасчета = Показатели5.Ссылка
	|			И (Показатели5.НомерСтроки = 5)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели6
	|		ПО ТЧВзыскания.ВидРасчета = Показатели6.Ссылка
	|			И (Показатели6.НомерСтроки = 6)
	|ГДЕ
	|	ТЧВзыскания.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧВзыскания.НомерСтроки,
	|	ТЧВзыскания.ВидРасчета,
	|	Показатели1.Показатель.Наименование,
	|	Показатели2.Показатель.Наименование,
	|	Показатели3.Показатель.Наименование,
	|	Показатели4.Показатель.Наименование,
	|	Показатели5.Показатель.Наименование,
	|	Показатели6.Показатель.Наименование,
	|	Показатели1.Показатель.ТипПоказателя,
	|	Показатели2.Показатель.ТипПоказателя,
	|	Показатели3.Показатель.ТипПоказателя,
	|	Показатели4.Показатель.ТипПоказателя,
	|	Показатели5.Показатель.ТипПоказателя,
	|	Показатели6.Показатель.ТипПоказателя,
	|	Показатели1.Показатель.ВозможностьИзменения,
	|	Показатели2.Показатель.ВозможностьИзменения,
	|	Показатели3.Показатель.ВозможностьИзменения,
	|	Показатели4.Показатель.ВозможностьИзменения,
	|	Показатели5.Показатель.ВозможностьИзменения,
	|	Показатели6.Показатель.ВозможностьИзменения,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели1.Показатель.Предопределенный,
	|	Показатели2.Показатель.Предопределенный,
	|	Показатели3.Показатель.Предопределенный,
	|	Показатели4.Показатель.Предопределенный,
	|	Показатели5.Показатель.Предопределенный,
	|	Показатели6.Показатель.Предопределенный,
	|	Показатели1.Показатель.Валюта,
	|	Показатели2.Показатель.Валюта,
	|	Показатели3.Показатель.Валюта,
	|	Показатели4.Показатель.Валюта,
	|	Показатели5.Показатель.Валюта,
	|	Показатели6.Показатель.Валюта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""Работники"" КАК ВидСтрокиЗапроса,
	|	ТЧРаботники.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботники.ФизЛицо,
	|	ТЧРаботники.ФизЛицо.Наименование КАК ФизЛицоНаименование,
	|	ТЧРаботники.Подразделение,
	|	ТЧРаботники.Должность,
	|	ТЧРаботники.ЗанимаемыхСтавок,
	|	ТЧРаботники.ДатаПриема,
	|	ТЧРаботники.ДатаУвольнения,
	|	ТЧРаботники.ПроизошедшееСобытие,
	|	ТЧРаботники.ИспытательныйСрок,
	|	ТЧРаботники.ГрафикРаботы,
	|	ТЧРаботники.СпособОтраженияВУпрУчете,
	|	ТЧРаботники.УчетНачисленийПоОрганизации,
	|	NULL КАК ВидРасчета,
	|	NULL КАК ПроизвольнаяФормулаРасчета,
	|	NULL КАК КоличествоПоказателей,
	|	NULL КАК ОсновноеНачисление,
	|	NULL КАК Показатель1,
	|	NULL КАК Показатель2,
	|	NULL КАК Показатель3,
	|	NULL КАК Показатель4,
	|	NULL КАК Показатель5,
	|	NULL КАК Показатель6,
	|	NULL КАК Валюта1,
	|	NULL КАК Валюта2,
	|	NULL КАК Валюта3,
	|	NULL КАК Валюта4,
	|	NULL КАК Валюта5,
	|	NULL КАК Валюта6,
	|	NULL КАК Показатель1Наименование,
	|	NULL КАК Показатель2Наименование,
	|	NULL КАК Показатель3Наименование,
	|	NULL КАК Показатель4Наименование,
	|	NULL КАК Показатель5Наименование,
	|	NULL КАК Показатель6Наименование,
	|	NULL КАК Показатель1ТипПоказателя,
	|	NULL КАК Показатель2ТипПоказателя,
	|	NULL КАК Показатель3ТипПоказателя,
	|	NULL КАК Показатель4ТипПоказателя,
	|	NULL КАК Показатель5ТипПоказателя,
	|	NULL КАК Показатель6ТипПоказателя,
	|	NULL КАК Показатель1ВозможностьИзменения,
	|	NULL КАК Показатель2ВозможностьИзменения,
	|	NULL КАК Показатель3ВозможностьИзменения,
	|	NULL КАК Показатель4ВозможностьИзменения,
	|	NULL КАК Показатель5ВозможностьИзменения,
	|	NULL КАК Показатель6ВозможностьИзменения,
	|	NULL КАК Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	NULL КАК Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	NULL КАК Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	NULL КАК Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	NULL КАК Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	NULL КАК Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	NULL КАК Показатель1Предопределенный,
	|	NULL КАК Показатель2Предопределенный,
	|	NULL КАК Показатель3Предопределенный,
	|	NULL КАК Показатель4Предопределенный,
	|	NULL КАК Показатель5Предопределенный,
	|	NULL КАК Показатель6Предопределенный,
	|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ПрежняяСтавка,
	|	ДанныеПоКандидатуДоНазначения.СтатусКандидата КАК СтатусКандидата,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	NULL КАК КонфликтныйДокумент
	|ИЗ
	|	Документ.ПриемНаРаботу.Работники КАК ТЧРаботники
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДатыПоследнегоДвижения.НомерСтроки КАК НомерСтроки,
	|			РегистрСведенийРаботники.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ТЧРаботники.НомерСтроки КАК НомерСтроки,
	|				ТЧРаботники.ФизЛицо КАК ФизЛицо,
	|				МАКСИМУМ(РегистрСведенийРаботники.Период) КАК ДатаДвижения
	|			ИЗ
	|				Документ.ПриемНаРаботу.Работники КАК ТЧРаботники
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК РегистрСведенийРаботники
	|					ПО (РегистрСведенийРаботники.ФизЛицо = ТЧРаботники.ФизЛицо)
	|						И (РегистрСведенийРаботники.Период <= ТЧРаботники.ДатаПриема)
	|			ГДЕ
	|				ТЧРаботники.Ссылка = &ДокументСсылка
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ТЧРаботники.НомерСтроки,
	|				ТЧРаботники.ФизЛицо) КАК ДатыПоследнегоДвижения
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК РегистрСведенийРаботники
	|				ПО (РегистрСведенийРаботники.ФизЛицо = ДатыПоследнегоДвижения.ФизЛицо)
	|					И (РегистрСведенийРаботники.Период = ДатыПоследнегоДвижения.ДатаДвижения)) КАК ДанныеПоРаботникуДоНазначения
	|		ПО (ДанныеПоРаботникуДоНазначения.НомерСтроки = ТЧРаботники.НомерСтроки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДатыПоследнегоДвижения.НомерСтроки КАК НомерСтроки,
	|			КандидатыНаРаботу.Статус КАК СтатусКандидата
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ТЧРаботники.НомерСтроки КАК НомерСтроки,
	|				ТЧРаботники.ФизЛицо КАК ФизЛицо,
	|				МАКСИМУМ(КандидатыНаРаботу.Период) КАК ДатаДвижения
	|			ИЗ
	|				Документ.ПриемНаРаботу.Работники КАК ТЧРаботники
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КандидатыНаРаботу КАК КандидатыНаРаботу
	|					ПО (КандидатыНаРаботу.ФизЛицо = ТЧРаботники.ФизЛицо)
	|						И (КандидатыНаРаботу.Период <= ТЧРаботники.ДатаПриема)
	|			ГДЕ
	|				ТЧРаботники.Ссылка = &ДокументСсылка
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ТЧРаботники.НомерСтроки,
	|				ТЧРаботники.ФизЛицо) КАК ДатыПоследнегоДвижения
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КандидатыНаРаботу КАК КандидатыНаРаботу
	|				ПО (КандидатыНаРаботу.ФизЛицо = ДатыПоследнегоДвижения.ФизЛицо)
	|					И (КандидатыНаРаботу.Период = ДатыПоследнегоДвижения.ДатаДвижения)) КАК ДанныеПоКандидатуДоНазначения
	|		ПО (ДанныеПоКандидатуДоНазначения.НомерСтроки = ТЧРаботники.НомерСтроки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботники.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧРаботники2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ПриемНаРаботу.Работники КАК ТЧРаботники
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Работники КАК ТЧРаботники2
	|				ПО (ТЧРаботники2.Ссылка = &ДокументСсылка)
	|					И ТЧРаботники.ФизЛицо = ТЧРаботники2.ФизЛицо
	|					И ТЧРаботники.НомерСтроки > ТЧРаботники2.НомерСтроки
	|		ГДЕ
	|			ТЧРаботники.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботники.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧРаботники.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|ГДЕ
	|	ТЧРаботники.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Начисления"",
	|	ТЧНачисления.НомерСтроки,
	|	ТЧНачисления.Физлицо,
	|	ТЧРаботники.ФизЛицо.Наименование,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ТЧРаботники.ДатаПриема,
	|	ТЧРаботники.ДатаУвольнения,
	|	ТЧРаботники.ПроизошедшееСобытие,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ТЧНачисления.ВидРасчета,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЕСТЬNULL(ПоказателиНачислений.КоличествоПоказателей, 0),
	|	ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени,
	|	ТЧНачисления.Показатель1,
	|	ТЧНачисления.Показатель2,
	|	ТЧНачисления.Показатель3,
	|	ТЧНачисления.Показатель4,
	|	ТЧНачисления.Показатель5,
	|	ТЧНачисления.Показатель6,
	|	ТЧНачисления.Валюта1,
	|	ТЧНачисления.Валюта2,
	|	ТЧНачисления.Валюта3,
	|	ТЧНачисления.Валюта4,
	|	ТЧНачисления.Валюта5,
	|	ТЧНачисления.Валюта6,
	|	ПоказателиНачислений.Показатель1Наименование,
	|	ПоказателиНачислений.Показатель2Наименование,
	|	ПоказателиНачислений.Показатель3Наименование,
	|	ПоказателиНачислений.Показатель4Наименование,
	|	ПоказателиНачислений.Показатель5Наименование,
	|	ПоказателиНачислений.Показатель6Наименование,
	|	ПоказателиНачислений.Показатель1ТипПоказателя,
	|	ПоказателиНачислений.Показатель2ТипПоказателя,
	|	ПоказателиНачислений.Показатель3ТипПоказателя,
	|	ПоказателиНачислений.Показатель4ТипПоказателя,
	|	ПоказателиНачислений.Показатель5ТипПоказателя,
	|	ПоказателиНачислений.Показатель6ТипПоказателя,
	|	ПоказателиНачислений.Показатель1ВозможностьИзменения,
	|	ПоказателиНачислений.Показатель2ВозможностьИзменения,
	|	ПоказателиНачислений.Показатель3ВозможностьИзменения,
	|	ПоказателиНачислений.Показатель4ВозможностьИзменения,
	|	ПоказателиНачислений.Показатель5ВозможностьИзменения,
	|	ПоказателиНачислений.Показатель6ВозможностьИзменения,
	|	ПоказателиНачислений.Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиНачислений.Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиНачислений.Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиНачислений.Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиНачислений.Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиНачислений.Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиНачислений.Показатель1Предопределенный,
	|	ПоказателиНачислений.Показатель2Предопределенный,
	|	ПоказателиНачислений.Показатель3Предопределенный,
	|	ПоказателиНачислений.Показатель4Предопределенный,
	|	ПоказателиНачислений.Показатель5Предопределенный,
	|	ПоказателиНачислений.Показатель6Предопределенный,
	|	NULL,
	|	NULL,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	NULL
	|ИЗ
	|	Документ.ПриемНаРаботу.Начисления КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоказателиНачислений КАК ПоказателиНачислений
	|		ПО ТЧНачисления.НомерСтроки = ПоказателиНачислений.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Работники КАК ТЧРаботники
	|		ПО (ТЧРаботники.ФизЛицо = ТЧНачисления.Физлицо)
	|			И ТЧНачисления.Ссылка = ТЧРаботники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПриемНаРаботуНачисления1.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ПриемНаРаботуНачисления2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ПриемНаРаботу.Начисления КАК ПриемНаРаботуНачисления1
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Начисления КАК ПриемНаРаботуНачисления2
	|				ПО ПриемНаРаботуНачисления1.Ссылка = ПриемНаРаботуНачисления2.Ссылка
	|					И ПриемНаРаботуНачисления1.Физлицо = ПриемНаРаботуНачисления2.Физлицо
	|					И ПриемНаРаботуНачисления1.ВидРасчета = ПриемНаРаботуНачисления2.ВидРасчета
	|					И ПриемНаРаботуНачисления1.НомерСтроки < ПриемНаРаботуНачисления2.НомерСтроки
	|		ГДЕ
	|			ПриемНаРаботуНачисления1.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПриемНаРаботуНачисления1.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧНачисления.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Взыскания"",
	|	ТЧВзыскания.НомерСтроки,
	|	ТЧВзыскания.Физлицо,
	|	ТЧРаботники.ФизЛицо.Наименование,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ТЧРаботники.ДатаПриема,
	|	ТЧРаботники.ДатаУвольнения,
	|	ТЧРаботники.ПроизошедшееСобытие,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ТЧВзыскания.ВидРасчета,
	|	ВЫБОР
	|		КОГДА ТЧВзыскания.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЕСТЬNULL(ПоказателиВзысканий.КоличествоПоказателей, 0),
	|	NULL,
	|	ТЧВзыскания.Показатель1,
	|	ТЧВзыскания.Показатель2,
	|	ТЧВзыскания.Показатель3,
	|	ТЧВзыскания.Показатель4,
	|	ТЧВзыскания.Показатель5,
	|	ТЧВзыскания.Показатель6,
	|	ТЧВзыскания.Валюта1,
	|	ТЧВзыскания.Валюта2,
	|	ТЧВзыскания.Валюта3,
	|	ТЧВзыскания.Валюта4,
	|	ТЧВзыскания.Валюта5,
	|	ТЧВзыскания.Валюта6,
	|	ПоказателиВзысканий.Показатель1Наименование,
	|	ПоказателиВзысканий.Показатель2Наименование,
	|	ПоказателиВзысканий.Показатель3Наименование,
	|	ПоказателиВзысканий.Показатель4Наименование,
	|	ПоказателиВзысканий.Показатель5Наименование,
	|	ПоказателиВзысканий.Показатель6Наименование,
	|	ПоказателиВзысканий.Показатель1ТипПоказателя,
	|	ПоказателиВзысканий.Показатель2ТипПоказателя,
	|	ПоказателиВзысканий.Показатель3ТипПоказателя,
	|	ПоказателиВзысканий.Показатель4ТипПоказателя,
	|	ПоказателиВзысканий.Показатель5ТипПоказателя,
	|	ПоказателиВзысканий.Показатель6ТипПоказателя,
	|	ПоказателиВзысканий.Показатель1ВозможностьИзменения,
	|	ПоказателиВзысканий.Показатель2ВозможностьИзменения,
	|	ПоказателиВзысканий.Показатель3ВозможностьИзменения,
	|	ПоказателиВзысканий.Показатель4ВозможностьИзменения,
	|	ПоказателиВзысканий.Показатель5ВозможностьИзменения,
	|	ПоказателиВзысканий.Показатель6ВозможностьИзменения,
	|	ПоказателиВзысканий.Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиВзысканий.Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиВзысканий.Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиВзысканий.Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиВзысканий.Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиВзысканий.Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	ПоказателиВзысканий.Показатель1Предопределенный,
	|	ПоказателиВзысканий.Показатель2Предопределенный,
	|	ПоказателиВзысканий.Показатель3Предопределенный,
	|	ПоказателиВзысканий.Показатель4Предопределенный,
	|	ПоказателиВзысканий.Показатель5Предопределенный,
	|	ПоказателиВзысканий.Показатель6Предопределенный,
	|	NULL,
	|	NULL,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	NULL
	|ИЗ
	|	Документ.ПриемНаРаботу.Взыскания КАК ТЧВзыскания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоказателиВзысканий КАК ПоказателиВзысканий
	|		ПО ТЧВзыскания.НомерСтроки = ПоказателиВзысканий.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Работники КАК ТЧРаботники
	|		ПО (ТЧРаботники.ФизЛицо = ТЧВзыскания.Физлицо)
	|			И ТЧВзыскания.Ссылка = ТЧРаботники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПриемНаРаботуВзыскания1.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ПриемНаРаботуВзыскания2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ПриемНаРаботу.Взыскания КАК ПриемНаРаботуВзыскания1
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Взыскания КАК ПриемНаРаботуВзыскания2
	|				ПО ПриемНаРаботуВзыскания1.Ссылка = ПриемНаРаботуВзыскания2.Ссылка
	|					И ПриемНаРаботуВзыскания1.Физлицо = ПриемНаРаботуВзыскания2.Физлицо
	|					И ПриемНаРаботуВзыскания1.ВидРасчета = ПриемНаРаботуВзыскания2.ВидРасчета
	|					И ПриемНаРаботуВзыскания1.НомерСтроки < ПриемНаРаботуВзыскания2.НомерСтроки
	|		ГДЕ
	|			ПриемНаРаботуВзыскания1.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПриемНаРаботуВзыскания1.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧВзыскания.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|ГДЕ
	|	ТЧВзыскания.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""КонфликтныйДокумент"",
	|	ТЧРаботники.НомерСтроки,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	КонфликтныеДвижения.Регистратор
	|ИЗ
	|	Документ.ПриемНаРаботу.Работники КАК ТЧРаботники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РегистрСведенийРаботники.Период КАК Период,
	|			РегистрСведенийРаботники.ФизЛицо КАК ФизЛицо,
	|			РегистрСведенийРаботники.Регистратор КАК Регистратор
	|		ИЗ
	|			РегистрСведений.Работники КАК РегистрСведенийРаботники
	|		ГДЕ
	|			РегистрСведенийРаботники.ФизЛицо В(&МассивФизЛиц)) КАК КонфликтныеДвижения
	|		ПО (КонфликтныеДвижения.ФизЛицо = ТЧРаботники.ФизЛицо)
	|			И (ТЧРаботники.ПроизошедшееСобытие = ИСТИНА
	|					И (КонфликтныеДвижения.Период МЕЖДУ ТЧРаботники.ДатаПриема И ДОБАВИТЬКДАТЕ(ТЧРаботники.ДатаУвольнения, ДЕНЬ, 1))
	|				ИЛИ КонфликтныеДвижения.Период = ТЧРаботники.ДатаПриема)
	|ГДЕ
	|	ТЧРаботники.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Запрос.Текст = ТекстЗапроса;
	                       
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботники()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Работники" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналу)


	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "Работники" Тогда

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
		""" табл. части ""Сотрудники"": ";
		
		// ФизЛицо
		ЕстьФизЛицо = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо);
		Если НЕ ЕстьФизЛицо Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
		КонецЕсли;

		// Дата приема
		ЕстьДатаПриема = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаПриема);
		Если НЕ ЕстьДатаПриема Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата приема на работу!", Отказ, Заголовок);
		КонецЕсли;

		// Количество ставок
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указано количество занимаемых сотрудником ставок!", Отказ, Заголовок);
		КонецЕсли;

		Если ВыборкаПоСтрокамДокумента.ИспытательныйСрок = Перечисления.ИспытательныйСрок.СИспытательнымСроком 
			И НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаУвольнения) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания испытательного срока!", Отказ, Заголовок);
		КонецЕсли;

		// ГрафикРаботы
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы)  Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан рабочий график!", Отказ, Заголовок);
		КонецЕсли;

		Если ЕстьФизЛицо И ЕстьДатаПриема Тогда
			// проверка корректности сочетаний реквизитов

			Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаУвольнения) И ВыборкаПоСтрокамДокумента.ДатаПриема > ВыборкаПоСтрокамДокумента.ДатаУвольнения Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата приема не может превышать дату окончания работы!", Отказ, Заголовок);
			КонецЕсли;

			// Проверка: на дату приёма работник работать не должен
			Если ВыборкаПоСтрокамДокумента.ПрежняяСтавка <> NULL И ВыборкаПоСтрокамДокумента.ПрежняяСтавка <> 0 Тогда
				СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаПриема, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.ФизЛицоНаименование + " уже принят на работу!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
			КонецЕсли; 

		КонецЕсли;

		// физлицо указано дважды
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			СтрокаСообщениеОбОшибке = "сотрудник не может быть указан в документе дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;	
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "Начисления" Тогда

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
		""" табл. части ""Начисления"": ";
		
		// ФизЛицо
		ЕстьФизЛицо = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо);
		Если НЕ ЕстьФизЛицо Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
		Иначе
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицоНаименование) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "указан сотрудник, отсутствующий в списке сотрудников!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;

		// ВидРасчета
		ЕстьВР = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета);
		Если НЕ ЕстьВР Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
		ИначеЕсли мСписокНедоступныхРасчетов.НайтиПоЗначению(ВыборкаПоСтрокамДокумента.ВидРасчета) <> Неопределено Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "указанный вид расчета нельзя назначать в качестве планового!", Отказ, Заголовок);
		Иначе	
			
			ПроведениеРасчетов.ПроверкаПоказателейВПлановыхНачислениях(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, Ложь, Отказ, Заголовок, Истина);
			
		КонецЕсли;
		
		// начисление указано дважды
		Если ЕстьВР И ЕстьФизЛицо И ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			СтрокаСообщениеОбОшибке = "сотруднику не может быть назначено одно и тоже начисление дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "Взыскания" Тогда

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
		""" табл. части ""Взыскания"": ";
		
		// ФизЛицо
		ЕстьФизЛицо = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо);
		Если НЕ ЕстьФизЛицо Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
		Иначе
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицоНаименование) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "указан сотрудник, отсутствующий в списке сотрудников!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;

		// ВидРасчета
		ЕстьВР = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета);
		Если НЕ ЕстьВР Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
		ИначеЕсли мСписокНедоступныхРасчетов.НайтиПоЗначению(ВыборкаПоСтрокамДокумента.ВидРасчета) <> Неопределено Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "указанный вид расчета нельзя назначать в качестве планового!", Отказ, Заголовок);
		Иначе	
			
			ПроведениеРасчетов.ПроверкаПоказателейВПлановыхНачислениях(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, Ложь, Отказ, Заголовок, Истина);
	
		КонецЕсли;
		
		// начисление указано дважды
		Если ЕстьВР И ЕстьФизЛицо И ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			СтрокаСообщениеОбОшибке = "сотруднику не может быть назначено одно и тоже взыскание дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;	
		
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда	

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
		""" табл. части ""Сотрудники"": ";
		
		// противоречие другим кадровым приказам
		СтрокаСообщениеОбОшибке = "период действия приказа противоречит кадровому приказу " + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли; 

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботника()

// Создает и заполняет структуру, содержащую имена регистров сведений 
//  по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                                           по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	
	СтруктураПроведенияПоРегистрамСведений.Вставить("Работники");
	СтруктураПроведенияПоРегистрамСведений.Вставить("НамеченныеСобытияПоПерсоналу");
	СтруктураПроведенияПоРегистрамСведений.Вставить("КандидатыНаРаботу");
	СтруктураПроведенияПоРегистрамСведений.Вставить("ПлановыеНачисленияРаботников");
	СтруктураПроведенияПоРегистрамСведений.Вставить("ПлановыеУдержанияРаботников");
	СтруктураПроведенияПоРегистрамСведений.Вставить("УчетЗаработкаРаботников");
	СтруктураПроведенияПоРегистрамСведений.Вставить("СостояниеРаботников");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, 
					СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "", УчетнаяПолитикаПоПерсоналу)
	
	Если ВыборкаПоРаботники.ВидСтрокиЗапроса = "Работники" Тогда
		
		// Если документ нужно проводить по регистру, то для него есть ключ в структуре
		ИмяРегистра = "Работники";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период                     = ВыборкаПоРаботники.ДатаПриема;
			
			// Измерения
			Движение.ФизЛицо                    = ВыборкаПоРаботники.ФизЛицо;
			
			// Ресурсы
			Движение.Подразделение				= ВыборкаПоРаботники.Подразделение;
			Движение.Должность                  = ВыборкаПоРаботники.Должность;
			Движение.ЗанимаемыхСтавок           = ВыборкаПоРаботники.ЗанимаемыхСтавок;
			Движение.ГрафикРаботы				= ВыборкаПоРаботники.ГрафикРаботы;
			// реквизиты
			Движение.ПричинаИзмененияСостояния  = Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу;
			
		КонецЕсли; 
		
		УчетРасходовНаПерсоналПереопределяемый.ДополнитьДвиженияСведениямиДляУпрУчета(Движения, ВыборкаПоРаботники, ВыборкаПоРаботники.ДатаПриема);
		
		ИмяРегистра = "СостояниеРаботников";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();

			// Свойства
			Движение.Период                     = ВыборкаПоРаботники.ДатаПриема;
			
			// Измерения
			Движение.ФизЛицо                    = ВыборкаПоРаботники.ФизЛицо;

			// Ресурсы
			Движение.Состояние                  = Перечисления.СостоянияРаботника.Работает;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботники.ДатаУвольнения) Тогда
			
			Если ВыборкаПоРаботники.ПроизошедшееСобытие Тогда
				
				ИмяРегистра = "Работники";
				Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
					
					Движение = Движения[ИмяРегистра].Добавить();
					
					// Свойства
					Движение.Период                     = ВыборкаПоРаботники.ДатаУвольнения + мДлинаСуток;
					
					// Измерения
					Движение.ФизЛицо                    = ВыборкаПоРаботники.ФизЛицо;
					
					// Ресурсы
					Движение.Подразделение				= ВыборкаПоРаботники.Подразделение;
					Движение.Должность                  = ВыборкаПоРаботники.Должность;
					Движение.ГрафикРаботы				= ВыборкаПоРаботники.ГрафикРаботы;
					
					// Эти поля не заполняются
					//Движение.ЗанимаемыхСтавок
					
					// Реквизиты
					Движение.ПричинаИзмененияСостояния  = Перечисления.ПричиныИзмененияСостояния.Увольнение;
				КонецЕсли;
				
				УчетРасходовНаПерсоналПереопределяемый.ДополнитьДвиженияСведениямиДляУпрУчета(Движения, ВыборкаПоРаботники, ВыборкаПоРаботники.ДатаУвольнения + мДлинаСуток, "");
				
				ИмяРегистра = "СостояниеРаботников";
				Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
					
					Движение = Движения[ИмяРегистра].Добавить();

					// Свойства
					Движение.Период                     = ВыборкаПоРаботники.ДатаУвольнения + мДлинаСуток;
					
					// Измерения
					Движение.ФизЛицо                    = ВыборкаПоРаботники.ФизЛицо;

					// Ресурсы
					Движение.Состояние                  = Перечисления.СостоянияРаботника.НеРаботает;
					
				КонецЕсли;
		
			Иначе
				
				ИмяРегистра = "НамеченныеСобытияПоПерсоналу";
				Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
					
					Движение = Движения[ИмяРегистра].Добавить();
					
					// Свойства
					Движение.Период                     = ВыборкаПоРаботники.ДатаУвольнения + мДлинаСуток;
					
					// Измерения
					Движение.ФизЛицо                    = ВыборкаПоРаботники.ФизЛицо;
					Движение.ДатаИзменения              = ВыборкаПоРаботники.ДатаУвольнения;
					Движение.ПланируемоеСобытие         = ?(ВыборкаПоРаботники.ИспытательныйСрок = Перечисления.ИспытательныйСрок.СИспытательнымСроком,Перечисления.НамеченныеСобытияПоПерсоналу.УвольнениеПослеИспытательногоСрока,Перечисления.НамеченныеСобытияПоПерсоналу.Увольнение);
					
					// Реквизиты
					Движение.Подразделение				= ВыборкаПоРаботники.Подразделение;
					Движение.Должность                  = ВыборкаПоРаботники.Должность;
					Движение.ЗанимаемыхСтавок           = 0;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаПоРаботники.СтатусКандидата <> NULL Тогда // работник проходил систему подбора кадров
			ИмяРегистра = "КандидатыНаРаботу";
			Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
				
				Движение = Движения[ИмяРегистра].Добавить();
				
				// Свойства
				Движение.Период      = ВыборкаПоРаботники.ДатаПриема;
				
				// Измерения
				Движение.ФизЛицо     = ВыборкаПоРаботники.ФизЛицо;
				
				// Ресурсы
				Движение.Статус      = Перечисления.СостоянияКандидатаНаРаботу.ПринятНаРаботу;
				
			КонецЕсли; 
		КонецЕсли;
		
	ИначеЕсли ВыборкаПоРаботники.ВидСтрокиЗапроса = "Начисления" тогда	
		
		ИмяРегистра = "ПлановыеНачисленияРаботников";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период                 = ВыборкаПоРаботники.ДатаПриема;
			
			// Измерения
			Движение.ФизЛицо                = ВыборкаПоРаботники.ФизЛицо;
			Если НЕ ВыборкаПоРаботники.ОсновноеНачисление Тогда
				Движение.ВидРасчетаИзмерение = ВыборкаПоРаботники.ВидРасчета;
			КонецЕсли; 
			
			// Ресурсы
			Движение.ВидРасчета				= ВыборкаПоРаботники.ВидРасчета;
			Движение.Действует				= Истина;
			Движение.Показатель1			= ВыборкаПоРаботники.Показатель1;
			Движение.Валюта1				= ВыборкаПоРаботники.Валюта1;
			Движение.Показатель2			= ВыборкаПоРаботники.Показатель2;
			Движение.Валюта2				= ВыборкаПоРаботники.Валюта2;
			Движение.Показатель3			= ВыборкаПоРаботники.Показатель3;
			Движение.Валюта3				= ВыборкаПоРаботники.Валюта3;
			Движение.Показатель4			= ВыборкаПоРаботники.Показатель4;
			Движение.Валюта4				= ВыборкаПоРаботники.Валюта4;
			Движение.Показатель5			= ВыборкаПоРаботники.Показатель5;
			Движение.Валюта5				= ВыборкаПоРаботники.Валюта5;
			Движение.Показатель6			= ВыборкаПоРаботники.Показатель6;
			Движение.Валюта6				= ВыборкаПоРаботники.Валюта6;
			
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботники.ДатаУвольнения) Тогда
			
			Если ВыборкаПоРаботники.ПроизошедшееСобытие Тогда
				ИмяРегистра = "ПлановыеНачисленияРаботников";
				Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
					
					Движение = Движения[ИмяРегистра].Добавить();
					
					// Свойства
					Движение.Период                     = ВыборкаПоРаботники.ДатаУвольнения + мДлинаСуток;
					
					// Измерения
					Движение.ФизЛицо                    = ВыборкаПоРаботники.ФизЛицо;
					Если НЕ ВыборкаПоРаботники.ОсновноеНачисление Тогда
						Движение.ВидРасчетаИзмерение    = ВыборкаПоРаботники.ВидРасчета;
					КонецЕсли; 
					
					// Ресурсы
					Движение.ВидРасчета					= ВыборкаПоРаботники.ВидРасчета;
					Движение.Действует					= Ложь;
					
				КонецЕсли; 
				
			КонецЕсли;	
		КонецЕсли;	
	ИначеЕсли ВыборкаПоРаботники.ВидСтрокиЗапроса = "Взыскания" тогда	
		ИмяРегистра = "ПлановыеУдержанияРаботников";					   
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период                 = ВыборкаПоРаботники.ДатаПриема;
			
			// Измерения
			Движение.ФизЛицо                = ВыборкаПоРаботники.ФизЛицо;
			Движение.ВидРасчета			    = ВыборкаПоРаботники.ВидРасчета;
			
			// Ресурсы			
			Движение.Действует				= Истина;
			Движение.Показатель1			= ВыборкаПоРаботники.Показатель1;
			Движение.Валюта1				= ВыборкаПоРаботники.Валюта1;
			Движение.Показатель2			= ВыборкаПоРаботники.Показатель2;
			Движение.Валюта2				= ВыборкаПоРаботники.Валюта2;
			Движение.Показатель3			= ВыборкаПоРаботники.Показатель3;
			Движение.Валюта3				= ВыборкаПоРаботники.Валюта3;
			Движение.Показатель4			= ВыборкаПоРаботники.Показатель4;
			Движение.Валюта4				= ВыборкаПоРаботники.Валюта4;
			Движение.Показатель5			= ВыборкаПоРаботники.Показатель5;
			Движение.Валюта5				= ВыборкаПоРаботники.Валюта5;
			Движение.Показатель6			= ВыборкаПоРаботники.Показатель6;
			Движение.Валюта6				= ВыборкаПоРаботники.Валюта6;
			
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботники.ДатаУвольнения) Тогда
			
			Если ВыборкаПоРаботники.ПроизошедшееСобытие Тогда
				ИмяРегистра = "ПлановыеУдержанияРаботников";
				Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
					
					Движение = Движения[ИмяРегистра].Добавить();
					
					// Свойства
					Движение.Период                     = ВыборкаПоРаботники.ДатаУвольнения + мДлинаСуток;
					
					// Измерения
					Движение.ФизЛицо                    = ВыборкаПоРаботники.ФизЛицо;
					Движение.ВидРасчета			    	= ВыборкаПоРаботники.ВидРасчета;
					
					// Ресурсы
					Движение.Действует					= Ложь;
					
				КонецЕсли; 
				
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// Создает и заполняет структуру, содержащую имена регистров накопления
// документа. В дальнейшем движения заносятся только по тем регистрам накопления, для которых в 
// данной процедуре заданы ключи
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамНакопления)

	СтруктураПроведенияПоРегистрамНакопления = Новый Структура();
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ЗанятыеРабочиеМеста");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, 
	СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров = "")
	
	Если ВыборкаПоРаботники.ВидСтрокиЗапроса = "Работники" Тогда
		
		// Если документ нужно проводить по регистру, то для него есть ключ в структуре
		ИмяРегистра = "ЗанятыеРабочиеМеста";
		Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период                 = ВыборкаПоРаботники.ДатаПриема;
			Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.Подразделение			= ВыборкаПоРаботники.Подразделение;
			Движение.Должность			    = ВыборкаПоРаботники.Должность;
			
			// Ресурсы
			Движение.Количество		        = ВыборкаПоРаботники.ЗанимаемыхСтавок; 
			
			Если ЗначениеЗаполнено(ВыборкаПоРаботники.ДатаУвольнения) 
				И ВыборкаПоРаботники.ПроизошедшееСобытие Тогда
				
				Движение = Движения[ИмяРегистра].Добавить();
				
				// Свойства
				Движение.Период                = ВыборкаПоРаботники.ДатаУвольнения + мДлинаСуток;
				Движение.ВидДвижения		   = ВидДвиженияНакопления.Расход;
				
				// Измерения
				Движение.Подразделение		   = ВыборкаПоРаботники.Подразделение;
				Движение.Должность			   = ВыборкаПоРаботники.Должность;
				
				// Ресурсы
				Движение.Количество 	       = ВыборкаПоРаботники.ЗанимаемыхСтавок; 
				
			КонецЕсли;
			
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров накопления по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	УчетнаяПолитикаПоПерсоналу = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу");

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);
			ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамНакопления);

			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботники(Режим);
			ВыборкаПоРаботники = РезультатЗапросаПоРаботники.Выбрать();

			Пока ВыборкаПоРаботники.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналу);

				Если НЕ Отказ  Тогда
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, СтруктураПроведенияПоРегистрамНакопления);
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, СтруктураПроведенияПоРегистрамСведений, , УчетнаяПолитикаПоПерсоналу);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;

	ПриемНаРаботуПереопределяемый.ДобавитьДополнительныеДвижения(ЭтотОбъект, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	ЗаполнитьПоДокументуОснования(Основание)	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)	
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(Работники);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
КонецПроцедуры

мДлинаСуток = 86400;
мВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();

мСписокНедоступныхРасчетов = Новый СписокЗначений;
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерии);
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерииСдельно);
