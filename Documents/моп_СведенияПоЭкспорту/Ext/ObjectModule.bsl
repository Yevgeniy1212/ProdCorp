Перем мВалютаРегламентированногоУчета Экспорт; // Валюта регламентированного учета
Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт; // Признак поддержки работы со структурными подразделениями

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Заполняет таб часть Товары по указанному поступлению товаров
//
// Параметры
//  ДокументПоступления - ссылка на документ ПоступлениеТоваровУслуг,
//  определяет документ поступления, по которому надо заполнить этот документ,
//  НомерРаздела        - число, номер раздела, который надо заполнить.
//
Процедура ЗаполнитьПоРеализации(ДокументРеализации, ИмяТабличнойЧасти = "Товары") Экспорт
	
	ОснованиеВидОперации = ДокументРеализации.ВидОперации;
	ПоддержкаУчетаВременныхРазниц = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, ОбщегоНазначения.ПолучитьРабочуюДату(), Неопределено) и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, ОбщегоНазначения.ПолучитьРабочуюДату(), Неопределено);
	   
	ТаблицаЗначенийТовары = ДокументРеализации[ИмяТабличнойЧасти].Выгрузить();						
	
	ДатаГТД = ДокументРеализации.Дата;
	
	// пересчитываем в валюту рег. учета 
	ВалютаВзаиморасчетов 		= мВалютаРегламентированногоУчета;
	
	СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ОбщегоНазначения.ПолучитьРабочуюДату());
	КурсВзаиморасчетов 			= СтруктураКурсаДокумента.Курс;
	КратностьВзаиморасчетов 		= СтруктураКурсаДокумента.Кратность;	
	
	Если ИмяТабличнойЧасти = "Товары" Тогда			
		ТаблицаЗначенийТовары.Свернуть("Номенклатура");
	КонецЕсли;
	
	// Обработка добавленных строк	
	Для Каждого СтрокаТаблицыЗначений Из ТаблицаЗначенийТовары Цикл
		
		НоваяСтрока = ЭтотОбъект[ИмяТабличнойЧасти].Добавить();
		
			Если ИмяТабличнойЧасти = "Товары" Тогда			
			НоваяСтрока.Номенклатура     = СтрокаТаблицыЗначений.Номенклатура;
			НоваяСтрока.ДокументПартии   = ДокументРеализации;
		КонецЕсли;
				
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьПоПоступлению()

#Если Клиент Тогда
			
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ТабДокумент = Неопределено;	
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура();
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет документ по основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если моп_Общий.ПолучитьОсновнуюКонфигурацию() <> Перечисления.моп_Конфигурации.Нефтебаза Тогда
		
		Если НЕ (ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг")) Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		
		Если (НЕ (ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг"))) и (НЕ (ТипЗнч(Основание) = Тип("ДокументСсылка.гсм_Реализация"))) Тогда
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;
		
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	ЗаполнитьПоРеализации(Основание, "Товары");
	
	ДокументОснование = Основание;
		
					

КонецПроцедуры //  ЗаполнитьПоДокументуОснования

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
		
		ЗаполнитьПоДокументуОснования(Основание);
		
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	СуммаПошлины = Товары.Итог("СуммаПошлины"); 
	СуммаСборов  = Товары.Итог("СуммаСборов"); 
		
КонецПроцедуры	

// Процедура - обработчик события "ПриЗаписи".
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();