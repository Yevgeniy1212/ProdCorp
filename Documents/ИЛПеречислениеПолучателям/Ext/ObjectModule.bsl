// - БК - начало
Перем мОтображатьСтруктурныеПодразделения Экспорт;
// - БК - конец
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Выполняет заполнение документа по данным в регистрах.
//
Процедура Автозаполнение(ВариантЗаполнения) Экспорт
	
	ИсполнительныеЛисты.Очистить();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ДанныеРеглУчетаТекст = 
		"ВЫБРАТЬ "+?(мОтображатьСтруктурныеПодразделения,"","РАЗРЕШЕННЫЕ")+"
		|	ВзаиморасчетыОрганизацийСПолучателямиИЛ.Получатель КАК Получатель,
		|	ВзаиморасчетыОрганизацийСПолучателямиИЛ.ДокументОснование КАК ДокументОснование,
		|	ВзаиморасчетыОрганизацийСПолучателямиИЛ.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
		|	ВзаиморасчетыОрганизацийСПолучателямиИЛ.СуммаСборовОстаток КАК СуммаСборов,
		|	ВзаиморасчетыОрганизацийСПолучателямиИЛ.СуммаВзаиморасчетовОстаток + ВзаиморасчетыОрганизацийСПолучателямиИЛ.СуммаСборовОстаток КАК СуммаПлатежа,
		|	ИСТИНА КАК Авторасчет
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Остатки(
		|					&парамДата, 
		|					Организация = &парамОрганизация И 
		|					ДокументОснование.СпособПеречисления = &парамСпособПеречисления И 
		|					ПериодВзаиморасчетов = &парамМесяц) КАК ВзаиморасчетыОрганизацийСПолучателямиИЛ
		|ГДЕ
		|	(ВзаиморасчетыОрганизацийСПолучателямиИЛ.СуммаВзаиморасчетовОстаток > 0)";
		
		// - КУФИБ - начало
		Если мОтображатьСтруктурныеПодразделения Тогда
			ДанныеРеглУчетаТекст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВзаиморасчетыОрганизацийСПолучателямиИЛ.Получатель КАК Получатель,
			|	ВзаиморасчетыОрганизацийСПолучателямиИЛ.ДокументОснование КАК ДокументОснование,
			|	ВзаиморасчетыОрганизацийСПолучателямиИЛ.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
			|	ВзаиморасчетыОрганизацийСПолучателямиИЛ.СуммаСборов КАК СуммаСборов,
			|	ВзаиморасчетыОрганизацийСПолучателямиИЛ.СуммаПлатежа КАК СуммаПлатежа,
			|	ВзаиморасчетыОрганизацийСПолучателямиИЛ.Авторасчет КАК Авторасчет
			|ИЗ
			|	("+ДанныеРеглУчетаТекст+") КАК ВзаиморасчетыОрганизацийСПолучателямиИЛ
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.общ_РеглУчетВзаиморасчетовССотрудникамиОрганизаций.СрезПоследних(&парамМесяц,Организация = &парамГоловнаяОрганизация И Сотрудник.ВидЗанятости<>ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК ЗапросСтруктурные
			|		ПО ВзаиморасчетыОрганизацийСПолучателямиИЛ.ДокументОснование.ФизЛицо = ЗапросСтруктурные.Сотрудник.ФизЛицо
			|ГДЕ
			|	ЕСТЬNULL(ЗапросСтруктурные.СтруктурноеПодразделение,ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))=&СтруктурноеПодразделение";
		КонецЕсли;
		// - КУФИБ - конец
		
		Запрос = Новый Запрос(ДанныеРеглУчетаТекст);
		// - КУФИБ - начало
		Если мОтображатьСтруктурныеПодразделения Тогда
			Запрос.УстановитьПараметр("СтруктурноеПодразделение",СтруктурноеПодразделение);
			Запрос.УстановитьПараметр("парамГоловнаяОрганизация",ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		КонецЕсли;
		// - КУФИБ - конец
		
		Если ВариантЗаполнения = "Остатки" Тогда
			Запрос.УстановитьПараметр("парамДата", Дата);
		ИначеЕсли ВариантЗаполнения = "ОстаткиНаКонецМесяца" Тогда
			Запрос.УстановитьПараметр("парамДата", КонецМесяца(ПериодРегистрации) + 1);
		КОнецЕсли;	

		Запрос.УстановитьПараметр("парамМесяц", ПериодРегистрации);
		Запрос.УстановитьПараметр("парамОрганизация", Организация);
		Запрос.УстановитьПараметр("парамСпособПеречисления", СпособПеречисления);
		
		ИсполнительныеЛисты.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры // Автозаполнение()

// Рассчитывает строки документа по данным регистров.
//
Процедура Рассчитать(ВариантРасчета) Экспорт

	ДанныеРеглУчетаТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеречислениеПоИсполнительнымЛиста.НомерСтроки,
	|	ПеречислениеПоИсполнительнымЛиста.Получатель,
	|	ПеречислениеПоИсполнительнымЛиста.ДокументОснование,
	|	ЕСТЬNULL(ВзаиморасчетыОрганизацийСПолучателямиИЛ.СуммаВзаиморасчетовОстаток, 0) КАК СуммаВзаиморасчетов,
	|	ЕСТЬNULL(ВзаиморасчетыОрганизацийСПолучателямиИЛ.СуммаСборовОстаток, 0) КАК СуммаСборов,
	|	ЕСТЬNULL(ВзаиморасчетыОрганизацийСПолучателямиИЛ.СуммаВзаиморасчетовОстаток, 0) + ЕСТЬNULL(ВзаиморасчетыОрганизацийСПолучателямиИЛ.СуммаСборовОстаток, 0) КАК СуммаПлатежа
	|
	|ИЗ
	|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ПеречислениеПоИсполнительнымЛиста
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Остатки(
	|									&парамДата, 
	|									Организация = &парамОрганизация И 
	|									ДокументОснование.СпособПеречисления = &парамСпособПеречисления И
	|									ПериодВзаиморасчетов = &парамМесяц) КАК ВзаиморасчетыОрганизацийСПолучателямиИЛ
	|		ПО ПеречислениеПоИсполнительнымЛиста.Получатель = ВзаиморасчетыОрганизацийСПолучателямиИЛ.Получатель
	|		   И ПеречислениеПоИсполнительнымЛиста.ДокументОснование = ВзаиморасчетыОрганизацийСПолучателямиИЛ.ДокументОснование
	|
	|ГДЕ
	|	ПеречислениеПоИсполнительнымЛиста.Ссылка = &парамСсылка
	|	И ПеречислениеПоИсполнительнымЛиста.Авторасчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПеречислениеПоИсполнительнымЛиста.НомерСтроки";
	
	Запрос = Новый Запрос(ДанныеРеглУчетаТекст);
	
	Если ВариантРасчета = "НаДатуДокумента" Тогда
		Запрос.УстановитьПараметр("парамДата", Дата);
	ИначеЕсли ВариантРасчета = "НаКонецМесяца" Тогда
		Запрос.УстановитьПараметр("парамДата", КонецМесяца(ПериодРегистрации) + 1);
	КОнецЕсли;	

	Запрос.УстановитьПараметр("парамСсылка", Ссылка);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамМесяц", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамСпособПеречисления", СпособПеречисления);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = ИсполнительныеЛисты[Выборка.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка);
	КонецЦикла;
		
КонецПроцедуры // Рассчитать() 

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	//так как нет печатных форм у документа, по умолчанию
	ТабДокумент = Неопределено;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект),Ссылка);

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура();

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "ВЫБРАТЬ
	               |	ИЛПеречислениеПолучателям.Дата,
	               |	ИЛПеречислениеПолучателям.Организация,
	               |	ИЛПеречислениеПолучателям.ПериодРегистрации,
	               |	ИЛПеречислениеПолучателям.СпособПеречисления,
	               |	ИЛПеречислениеПолучателям.Ссылка
	               |ИЗ
	               |	Документ.ИЛПеречислениеПолучателям КАК ИЛПеречислениеПолучателям
	               |
	               |ГДЕ
	               |	ИЛПеречислениеПолучателям.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "ИсполнительныеЛисты" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоИсполнительныеЛисты(ВыборкаПоШапкеДокумента, Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИсполнительныеЛисты.НомерСтроки КАК НомерСтроки,
	               |	ИсполнительныеЛисты.Ссылка.Организация КАК Организация,
	               |	ИсполнительныеЛисты.Получатель КАК Получатель,
	               |	ИсполнительныеЛисты.ДокументОснование КАК ДокументОснование,
	               |	ИсполнительныеЛисты.ДокументОснование.Получатель КАК ПолучательВДокументеОсновании,
	               |	ИсполнительныеЛисты.ДокументОснование.Организация КАК ОрганизацияВДокументеОсновании
	               |ИЗ
	               |	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИсполнительныеЛисты
	               |ГДЕ
	               |	ИсполнительныеЛисты.Ссылка = &ДокументСсылка
	               |";
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	// Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;

	// ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан месяц, за который перечисляются суммы по исполнительным листам!", Отказ, Заголовок);
	КонецЕсли;

	// СпособПеречисления
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.СпособПеречисления) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан способ перечисления!", Отказ, Заголовок);
	КонецЕсли;


КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ИсполнительныеЛисты" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиИсполнительныеЛисты(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Исполнительные листы"": ";

	// Получатель
	ЕстьПолучатель = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Получатель);
	Если Не ЕстьПолучатель Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан получатель!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДокументОснование
	ЕстьДокументОснование = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументОснование);
	Если Не ЕстьДокументОснование Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан документ-основание!", Отказ, Заголовок);
	КонецЕсли;

	Если ЕстьПолучатель И ЕстьДокументОснование Тогда
		// Соответствие организаций
		Если ВыборкаПоСтрокамДокумента.Организация <> ВыборкаПоСтрокамДокумента.ОрганизацияВДокументеОсновании Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не соответствует организация в документе-основании!", Отказ, Заголовок);
		КонецЕсли;
		
		// Соответствие получателей
		Если ВыборкаПоСтрокамДокумента.Получатель <> ВыборкаПоСтрокамДокумента.ПолучательВДокументеОсновании Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не соответствует получатель в документе-основании!", Отказ, Заголовок);
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиИсполнительныеЛисты()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью()
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	ВрмСуммаДокумента = 0;
	
	КраткийСоставДокумента = "";
	
	Для Каждого СтрокаТЧ Из ИсполнительныеЛисты Цикл
			
		НаименованиеПолучателя = СокрЛП(СтрокаТЧ.Получатель.Наименование);
		
		Если Найти(КраткийСоставДокумента, НаименованиеПолучателя) = 0 Тогда
			
			Если СтрДлина(КраткийСоставДокумента) < 100 Тогда
				КраткийСоставДокумента = КраткийСоставДокумента + ", " + НаименованиеПолучателя;
			Иначе
				КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
			КонецЕсли;
			
		КонецЕсли; 
		
		ВрмСуммаДокумента = ВрмСуммаДокумента + СтрокаТЧ.СуммаПлатежа;
	
	КонецЦикла;
	
	Если Лев(КраткийСоставДокумента,2) = ", " Тогда
		ДлинаСтроки = СтрДлина(КраткийСоставДокумента);
		Если ДлинаСтроки < 100 Тогда
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3)
		Иначе
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
		КонецЕсли; 
		
	КонецЕсли;

	СуммаДокумента = ВрмСуммаДокумента;

КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ОбработкаПроведения" 
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);	

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			РезультатЗапроса = СформироватьЗапросПоИсполнительныеЛисты(ВыборкаПоШапкеДокумента, Режим);
			Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);

			Пока Выборка.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиИсполнительныеЛисты(ВыборкаПоШапкеДокумента, Выборка, Отказ, Заголовок);

			КонецЦикла;
			
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// - БК - начало
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделенийВЗарплате();
// - БК - конец
