// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

Перем ТаблицаПлатежейУпр;
Перем ДатаДвижений;
Перем РасчетныйДокумент;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	//так как нет печатных форм у документа, по умолчанию
	//ТабДокумент = Неопределено
	ТабДокумент = Неопределено;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;  

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура();

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт

	ЗначениеСтавкиНДС     = УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);

КонецПроцедуры // ПересчитатьСуммуНДС()

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента      = ?(КурсДокумента      = 0, 1, КурсДокумента);
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента);

	Если Не СтрокаПлатеж = Неопределено Тогда
		
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);

	КонецЕсли;
	
КонецПроцедуры // ПроверкаКурсовВалют()

// Заполняет счета учета БУ и НУ в документе
//
Процедура ЗаполнитьСчетаУчетаРегл() Экспорт
	
	Если Не СчетОрганизации.Пустая() Тогда
		СчетБанк = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(СчетОрганизации, СчетБанк.Пустая()).СчетУчетаБУ;		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаРегл()

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	ВалютаДокумента             = мВалютаРегламентированногоУчета;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

	Дата = ОбщегоНазначения.ПолучитьРабочуюДату();
		
	ПараметрыДокументаОснования = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Основание);
	ВидДокументаОснования       = Основание.Метаданные().Имя;

	ДокументОснование = ПараметрыДокументаОснования.Ссылка;
		
	Если ВидДокументаОснования = "СчетНаОплатуПокупателю" тогда
		СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(ПараметрыДокументаОснования.Организация, 
		                                                ПараметрыДокументаОснования.Контрагент, ПараметрыДокументаОснования.ДоговорКонтрагента);
		ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовСКонтрагентом",    СчетаУчета.СчетРасчетовПокупателя);
		ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовПоАвансам",        СчетаУчета.СчетАвансовПокупателя);
	КонецЕсли;

	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ЦФО", Основание.Метаданные()) Тогда
		Подразделение = Основание.ЦФО;
	КонецЕсли;

	Если ВидДокументаОснования = "РеализацияТоваровУслуг"
		или ВидДокументаОснования = "АктОбОказанииПроизводственныхУслуг" 
		или ВидДокументаОснования = "РеализацияУслугПоПереработке"
		или ВидДокументаОснования = "ПередачаОС" 
		или ВидДокументаОснования = "ВозвратТоваровПоставщику" 		
		или ВидДокументаОснования = "ПередачаНМА"
		или ВидДокументаОснования = "СчетНаОплатуПокупателю" тогда
		
		Если ВидДокументаОснования = "ВозвратТоваровПоставщику"  Тогда
			 ВидОперации  = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком;
		Иначе
			ВидОперации  = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
		КонецЕсли; 
		
		Контрагент   = ПараметрыДокументаОснования.Контрагент;
		ДоговорКонтрагента = ПараметрыДокументаОснования.ДоговорКонтрагента;
		ВидРасчетовПоДоговору           = УправлениеВзаиморасчетами.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,мВалютаРегламентированногоУчета);
		
		Если ВидРасчетовПоДоговору=Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте тогда
			ВалютаДокумента = ПараметрыДокументаОснования.ВалютаВзаиморасчетов;
		КонецЕсли;
		СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		СтруктураКурсаВзаиморасчетов         = ОбщегоНазначения.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		Если Не ВидДокументаОснования = "ПередачаНМА" тогда
			СуммаДокументаОснования = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
		Иначе
		    СуммаДокументаОснования = Новый ТаблицаЗначений();
			СуммаДокументаОснования.Колонки.Добавить("СуммаПлатежа",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			СуммаДокументаОснования.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
			СуммаДокументаОснования.Колонки.Добавить("СуммаНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
			Если ВидДокументаОснования = "ПередачаНМА" тогда
				СтрокаТаблицыСумм.СуммаПлатежа	= ПараметрыДокументаОснования.СуммаДокумента;
				СтрокаТаблицыСумм.СтавкаНДС	= ПараметрыДокументаОснования.СтавкаНДС;
				СтрокаТаблицыСумм.СуммаНДС	= ПараметрыДокументаОснования.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,"КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность,"КратностьВзаиморасчетов");
		Если ПараметрыДокументаОснования.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание,"Сделка");
		КонецЕсли;

		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"),"СуммаВзаиморасчетов");

		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			ПроверкаКурсовВалют(СтрокаПлатеж);
		КонецЦикла; 
		
		ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентомБУ") ;		
		
		Если ВидДокументаОснования = "ВозвратТоваровПоставщику"  Тогда			
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоВозвратам, "СчетУчетаРасчетовПоАвансам") ;
		Иначе				
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовПоАвансам") ;
		КонецЕсли;
		
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтрокаПлатеж = РасшифровкаПлатежа[0];
		
	ИначеЕсли ВидДокументаОснования = "РасходныйКассовыйОрдер" Тогда
		
		Если НЕ Основание.ВидОперации=Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
			Сообщить("Платежный ордер вводится только на основании расходного кассового ордера с видом операции
			|""Инкассация денежных средств"".");
			
			Возврат;
			
		КонецЕсли;
		
		ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств;
		
		СчетУчетаРасчетовСКонтрагентомБУ 	= Основание.СчетУчетаРасчетовСКонтрагентомБУ;
		СубконтоКтБУ1						= Основание.СубконтоДтБУ1;
		СубконтоКтБУ2						= Основание.СубконтоДтБУ2;
		СубконтоКтБУ3						= Основание.СубконтоДтБУ3;
		
		СтатьяДвиженияДенежныхСредств=Основание.СтатьяДвиженияДенежныхСредств;
		
		СуммаДокумента=Основание.СуммаДокумента;
		
		СчетБанк = ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах;
		
		Если РасшифровкаПлатежа.Количество()=0 Тогда
			СтрокаРасшифровка = РасшифровкаПлатежа.Добавить();
		КонецЕсли;
		Если ДокументОснование.РасшифровкаПлатежа.Количество() <>0 Тогда
			СтрокаРасшифровка = РасшифровкаПлатежа[0];
			СтрокаРасшифровка.Подразделение 	= ДокументОснование.РасшифровкаПлатежа[0].Подразделение;
			СтрокаРасшифровка.Проект 			= ДокументОснование.РасшифровкаПлатежа[0].Проект;
		КонецЕсли;
	ИначеЕсли ВидДокументаОснования = "ОплатаОтПокупателяПлатежнойКартой" Тогда
		
		ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		
		Контрагент = Основание.Эквайрер;
		ДоговорКонтрагента = Основание.ДоговорВзаиморасчетовЭквайрера;
		ВидРасчетовПоДоговору = УправлениеВзаиморасчетами.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента, мВалютаРегламентированногоУчета);
		
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
		СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		НоваяСтрокаПлатежа = РасшифровкаПлатежа.Добавить();
		
		НоваяСтрокаПлатежа.ДоговорКонтрагента = ДоговорКонтрагента;
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			НоваяСтрокаПлатежа.Сделка = Основание;
		КонецЕсли;

		НоваяСтрокаПлатежа.КурсВзаиморасчетов = КурсДокумента;
		НоваяСтрокаПлатежа.КратностьВзаиморасчетов = КратностьДокумента;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
			СчетУчетаРасчетовСКонтрагентомБУ = СчетаУчета.СчетРасчетовПокупателя;
			НоваяСтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = СчетУчетаРасчетовСКонтрагентомБУ;	
		КонецЕсли;
		
		Если Основание.РасшифровкаПлатежа.Количество() = 1 Тогда
			НоваяСтрокаПлатежа.СтатьяДвиженияДенежныхСредств = Основание.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
		КонецЕсли;

		НоваяСтрокаПлатежа.СуммаПлатежа = Основание.СуммаДокумента - Основание.СуммаТорговойУступки;
        НоваяСтрокаПлатежа.СуммаВзаиморасчетов = НоваяСтрокаПлатежа.СуммаПлатежа;
		ПроверкаКурсовВалют(НоваяСтрокаПлатежа);
		НоваяСтрокаПлатежа.СтавкаНДС  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
		ПересчитатьСуммуНДС(НоваяСтрокаПлатежа);
		
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");

		СчетБанк = ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах;
		Если ЗначениеЗаполнено(Контрагент) Тогда
			СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;	
	ИначеЕсли ВидДокументаОснования = "ден_ПланируемоеПоступлениеДенежныхСредств" Тогда
		
		Если (НЕ Основание.ФормаОплаты=Перечисления.ден_ВидыДенежныхСредств.Безналичные) Тогда
			Сообщить("Документом планировалось поступление наличных денежных средств.");
			Возврат;
		КонецЕсли;
		
		ВидОперацииПоступление = Основание.ВидОперации;
		УправлениеДенежнымиСредствами.ОпределитьОперациюПоОснованиюУпр(ВидОперации, ВидОперацииПоступление);
		
		ВалютаДокумента         = Основание.ВалютаДокумента;

		СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");	
	
		УправлениеДенежнымиСредствами.ЗаполнитьПоПланируемомуПоступлениюУпр(
		РасшифровкаПлатежа,
		Основание,
		СтавкаНДС, 
		ВалютаДокумента,
		КурсДокумента,
		КратностьДокумента,
		ВидОперации,
		Подразделение);
		
		СчетОрганизации = Основание.БанковскийСчетКасса;

		Если Основание.ВидОперации = Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ПрочееПоступлениеДенежныхСредств И Основание.РасшифровкаПлатежа.Количество()>0 Тогда
            СтатьяДвиженияДенежныхСредств = Основание.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
		СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтруктурноеПодразделениеПолучатель = Основание.СтруктурноеПодразделение;
		
	КонецЕсли;
	
	ЗаполнитьСчетаУчетаРегл();
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	Ответственный             = глЗначениеПеременной("глТекущийПользователь");
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//  Режим 					  - режим проведения документа
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента,РежимПроведения, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

// Формирует движения по регистрам бухгалтерского и налогового учета
// 
Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента,РежимПроведения, Отказ, Заголовок)
	
	// Бухгалтерские проводки документа
	Если (НЕ СтруктураШапкиДокумента.Оплачено) ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	ДатаДока = СтруктураШапкиДокумента.Дата;
	
	ВидСчетаОрг = СтруктураШапкиДокумента.СчетОрганизации.ВидСчета;
	ВалютаСчета = СтруктураШапкиДокумента.СчетОрганизации.ВалютаДенежныхСредств;
	ПроводкиБУ  = Движения.Типовой;
	ПроводкиНУ  = Движения.Налоговый;

	РасчетыВВалюте = Ложь;
	
	СчетДт = СтруктураШапкиДокумента.СчетБанк;

	СчетДт = СтруктураШапкиДокумента.СчетБанк;
	СчетДтНУ = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(СтруктураШапкиДокумента.СчетОрганизации, Истина).СчетУчетаНУ;	
		
	СтруктураШапкиДокумента.Вставить("СчетБанкНУ",СчетДтНУ );

	Если СчетДт.Валютный Тогда
		РасчетыВВалюте = Истина;
	КонецЕсли;
	
		
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты или
				ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		
		СтруктураШапкиДокумента.Вставить("КоррСчет", СчетДт);		
		СтруктураШапкиДокумента.Вставить("КоррСчетНУ", СчетДтНУ);		     
		
		
		РеестрПлатежей = УправлениеДенежнымиСредствами.ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
		РеестрПлатежей.Колонки.Добавить("СодержаниеПроводки",		ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50));			
		РеестрПлатежей.Колонки.Добавить("РезультатРаспределения", 	Новый ОписаниеТипов("Булево"));
		
		 СтрокаПриобретения = РеестрПлатежей[0];
		 
		
		 ФинРезультатСделкиСВалютой = 0;
		
		 Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты	Тогда
			 //При приобретении валюты используется только первая строка реестра платежей						
			 
			 СуммаРасчетовПоКурсуБанка = СтрокаПриобретения.ТенговаяСумма;
			 
			 Если НЕ СтруктураШапкиДокумента.КурсНаДатуПриобретенияРеализацииВалюты = СтрокаПриобретения.КурсВзаиморасчетов Тогда						
				 
				 СуммаРасчетовПоКурсуБанка = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПриобретения.ВалютнаяСумма, СтрокаПриобретения.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
				 СтруктураШапкиДокумента.КурсНаДатуПриобретенияРеализацииВалюты, 1,
				 СтруктураШапкиДокумента.КратностьДокумента, 1);
				 
			 КонецЕсли; 	
			 
			 ФинРезультатСделкиСВалютой =  СтрокаПриобретения.ТенговаяСумма - СуммаРасчетовПоКурсуБанка;			
		 ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты тогда		
			 //При приобретении валюты используется только первая строка реестра платежей			
			 
			 СтрокаПриобретения.СодержаниеПроводки = "Приобретение иностранной валюты";
			 
			 СуммаРасчетовПоКурсуБанка = СтрокаПриобретения.ТенговаяСумма;
			 
			 Если не СтруктураШапкиДокумента.КурсНаДатуПриобретенияРеализацииВалюты = СтрокаПриобретения.КурсВзаиморасчетов Тогда
				 СтрокаПриобретения.ТенговаяСумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПриобретения.ВалютнаяСумма, СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
													 СтруктураШапкиДокумента.КурсНаДатуПриобретенияРеализацииВалюты, 1,
													 СтруктураШапкиДокумента.КратностьДокумента, 1);						
			 КонецЕсли; 	
			 ФинРезультатСделкиСВалютой = СтрокаПриобретения.ТенговаяСумма - СуммаРасчетовПоКурсуБанка;			
		 КонецЕсли; 		 
		 
		 
		  Если СтруктураШапкиДокумента.ВедениеУчетаВременныхразницБалансовымМетодом Тогда
			 //  в НУ отражаем полную информацию
			 РеестрПлатежейНУ = РеестрПлатежей.Скопировать();
		 Иначе
			 // схема ред. 1.5 в НУ не отражаем информацию о взаиморасчетах
			 РеестрПлатежейНУ = РеестрПлатежей.СкопироватьКолонки();
		 КонецЕсли;		

		 Если НЕ (ФинРезультатСделкиСВалютой = 0) Тогда
			 
			 СтрокаРазницыКурсов = РеестрПлатежей.Добавить();
			 СтрокаРазницыКурсов.ВалютнаяСумма = 0;
			 Для Каждого Колонка Из РеестрПлатежей.Колонки Цикл
				 Если Колонка.Имя = "ТенговаяСумма" Тогда
					 // с точки зрения операции поступления
					 // для того чтобы показкать возникновение дохода по кредиту
					 // отражаем сумму с минусом
					 СтрокаРазницыКурсов[Колонка.Имя] = -ФинРезультатСделкиСВалютой;
				 ИначеЕсли Колонка.Имя = "ВалютнаяСумма" ИЛИ Колонка.Имя = "СуммаВзаиморасчетов" Тогда
					 СтрокаРазницыКурсов[Колонка.Имя] = 0;
				 Иначе
					 СтрокаРазницыКурсов[Колонка.Имя] = СтрокаПриобретения[Колонка.Имя];
				 КонецЕсли;
			 КонецЦикла;
			 
			 Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты	Тогда
				 СтрокаРазницыКурсов.СодержаниеПроводки = ?(ФинРезультатСделкиСВалютой < 0,"Убыток","Прибыль")+" от продажи валюты";		
			 Иначе
				 СтрокаРазницыКурсов.СодержаниеПроводки = ?(ФинРезультатСделкиСВалютой < 0,"Убыток","Прибыль")+" от покупки валюты";				
			 КонецЕсли;
			 СтрокаРазницыКурсов.КоррСчет = ?(ФинРезультатСделкиСВалютой < 0, ПланыСчетов.Типовой.ПрочиеРасходы, ПланыСчетов.Типовой.ПрочиеДоходы);
			 			 
			 // найдем подразделение для регл. операций, чтобы подставить в качестве соотв. субконто
			 ПодразделениеДляРеглОпераций = ПроцедурыБухгалтерскогоУчета.ПолучитьПодразделениеДляРеглОпераций(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
			 Если Отказ Тогда
				 Возврат;
			 КонецЕсли;	 
			 
			 Для Каждого Субконто Из СтрокаРазницыКурсов.КоррСчет.ВидыСубконто Цикл
				 Если Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоТиповые.Доходы Тогда
					 СтрокаРазницыКурсов["КоррСубконто"+Субконто.НомерСтроки] = Справочники.Доходы.ДоходыПриОбменеВалюты;
				 ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат Тогда
					 СтрокаРазницыКурсов["КоррСубконто"+Субконто.НомерСтроки] = Справочники.СтатьиЗатрат.РасходыПриОбменеВалюты;					
				 ИначеЕсли Субконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда
					 СтрокаРазницыКурсов["КоррСубконто"+Субконто.НомерСтроки] = ПодразделениеДляРеглОпераций;
				 КонецЕсли;
			 КонецЦикла;	
			 
			 Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда				 
				 
				 СтрокаРазницыКурсов.КоррСчетНУ = ?(ФинРезультатСделкиСВалютой < 0, ПланыСчетов.Налоговый.ПрочиеРасходы, ПланыСчетов.Налоговый.ПрочиеДоходы);				 
				 СтрокаРазницыКурсов.СчетОплатыНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();				 
				 
				 Для Каждого Субконто Из СтрокаРазницыКурсов.КоррСчетНУ.ВидыСубконто Цикл
					 Если Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоТиповые.Доходы Тогда
						 СтрокаРазницыКурсов["КоррСубконтоНУ"+Субконто.НомерСтроки] = Справочники.Доходы.ДоходыПриОбменеВалюты;
					 ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат Тогда
						 СтрокаРазницыКурсов["КоррСубконтоНУ"+Субконто.НомерСтроки] = Справочники.СтатьиЗатрат.РасходыПриОбменеВалюты;					
					 ИначеЕсли Субконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда
						 СтрокаРазницыКурсов["КоррСубконтоНУ"+Субконто.НомерСтроки] = ПодразделениеДляРеглОпераций;
					 КонецЕсли;
				 КонецЦикла;	
				 СтрокаРазницыКурсовНУ = РеестрПлатежейНУ.Добавить();
				 ЗаполнитьЗначенияСвойств(СтрокаРазницыКурсовНУ,СтрокаРазницыКурсов);
				 
				 // закрытие взаиморасчетов в НУ
				 Если СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
					 СтрокаРазницыКурсовНУ = РеестрПлатежейНУ.Добавить();
					 СтрокаРазницыКурсовНУ.ВалютнаяСумма = 0;
					 Для Каждого Колонка Из РеестрПлатежей.Колонки Цикл
						 Если Колонка.Имя = "ТенговаяСумма" Тогда
							 // с точки зрения операции поступления
							 // для того чтобы показкать возникновение дохода по кредиту
							 // отражаем сумму с минусом
							 СтрокаРазницыКурсовНУ[Колонка.Имя] = -ФинРезультатСделкиСВалютой;
						 ИначеЕсли Колонка.Имя = "ВалютнаяСумма" ИЛИ Колонка.Имя = "СуммаВзаиморасчетов" Тогда
							 СтрокаРазницыКурсовНУ[Колонка.Имя] = 0;
						 Иначе
							 СтрокаРазницыКурсовНУ[Колонка.Имя] = СтрокаПриобретения[Колонка.Имя];
						 КонецЕсли;
					 КонецЦикла;
					 
					 Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты	Тогда
						 СтрокаРазницыКурсовНУ.СодержаниеПроводки = ?(ФинРезультатСделкиСВалютой < 0,"Убыток","Прибыль")+" от продажи валюты";		
					 Иначе
						 СтрокаРазницыКурсовНУ.СодержаниеПроводки = ?(ФинРезультатСделкиСВалютой < 0,"Убыток","Прибыль")+" от покупки валюты";				
					 КонецЕсли; 				 
					 
					 СтрокаРазницыКурсовНУ.КоррСчетНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
					 СтрокаРазницыКурсовНУ.КоррСубконтоНУ1 = СтруктураШапкиДокумента.Контрагент;
					 СтрокаРазницыКурсовНУ.КоррСубконтоНУ2 = СтруктураШапкиДокумента.ОсновнойДоговорКонтрагента;
				 КонецЕсли;  			 
			 КонецЕсли;  			 
		 КонецЕсли;
		 // формирование проводок		 
		  
		 //Проводки по результатам распределения
		 УправлениеДенежнымиСредствами.СформироватьПроводкиПоДвижениюДенег(ЭтотОбъект, СтруктураШапкиДокумента, РеестрПлатежей,,,,Истина);
		 
		 Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			 УправлениеДенежнымиСредствами.СформироватьПроводкиПоДвижениюДенегНУ(ЭтотОбъект, СтруктураШапкиДокумента, РеестрПлатежейНУ,,,,Истина);			
		 КонецЕсли; 	     
			
	ИначеЕсли ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда

		СтруктураШапкиДокумента.Вставить("КоррСчет", СчетДт);
		СтруктураШапкиДокумента.Вставить("КоррСчетНУ", СчетДтНУ);		     
		
		СтруктураШапкиДокумента.Вставить("ВзаиморасчетыСоСтруктурнымПодразделением", ?(ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаСтруктурногоПодразделения, Истина, Ложь));
		
		РеестрПлатежей = УправлениеДенежнымиСредствами.ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
		
		Если РеестрПлатежей.Количество()= 0 Тогда
			// Таблица оплат не заполнена, не требуется обработка
			Возврат;
		КонецЕсли; 
		
		СодержаниеПроводки = "";
		ПереворачиватьОтрицательныеПроводки = Ложь;
		
			
		Если ЕстьРасчетыПоКредитам тогда
            СодержаниеПроводки = "Расчеты по кредитам и займам";
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами тогда
			СодержаниеПроводки = "Расчеты с контрагентом";
			РеестрПлатежей.ЗагрузитьКолонку(РеестрПлатежей.ВыгрузитьКолонку("СчетОплатыБУ"),"СчетАванса");
		КонецЕсли;
		
		УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Ложь,Отказ,Заголовок,СодержаниеПроводки,,РеестрПлатежей,ПереворачиватьОтрицательныеПроводки);		
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств
		ИЛИ ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств Тогда

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период     = ДатаДока;
		Проводка.Содержание = ?(ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств,
								"Инкассация денежных средств",
								"Прочее поступление денежных средств");
		Проводка.Организация = СтруктураШапкиДокумента.Организация;

		Проводка.СчетДт     = СчетДт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
		
		//Бит Источники финансирования
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.ИсточникФинансирования);	
		//Бит Источники финансирования
		
		Проводка.СчетКт = СчетУчетаРасчетовСКонтрагентомБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоКтБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоКтБУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоКтБУ3);
        
		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;

		Если Проводка.СчетКт.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;

		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);	
		Иначе
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
		КонецЕсли;

		ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, ДатаДока);

		Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
														 СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
														 СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
		
		// проводки по НУ 
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда				
			
			ПроводкаНУ = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период      = ДатаДока;
			ПроводкаНУ.Организация = Организация;				
			ПроводкаНУ.ИсточникФинансирования = СтруктураШапкиДокумента.ИсточникФинансирования;
			
			 Если ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СчетУчетаРасчетовСКонтрагентомБУ) Тогда
				 
				 ПроводкаНУ.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Договоры", 	СтруктураШапкиДокумента.ОсновнойДоговорКонтрагента);						
			 Иначе
				 ПроводкаНУ.СчетДт     = СчетДтНУ;
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
			 КонецЕсли;		
						
			ПроводкаНУ.СчетКт     = СчетУчетаРасчетовСКонтрагентомНУ;
			ПроводкаНУ.Содержание = ?(ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств,
								"Инкассация денежных средств",
								"Прочее поступление денежных средств");

								
			Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
			Иначе
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
            КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,1,СубконтоКтНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,2,СубконтоКтНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,3,СубконтоКтНУ3);
			
			Если РасчетыВВалюте Тогда
				
				ПроводкаНУ.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, 
												СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
												СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
												СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
			Иначе
				ПроводкаНУ.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли; // Если РасчетыВВалюте Тогда
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
			
			 Если ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СчетУчетаРасчетовСКонтрагентомБУ) Тогда
				 
				 //если выбран счет затрат или доходов, то сделаем еще одну проводку
				 //погашение начисленной выше задолженности
				 ПроводкаНУ_Погашение = ПроводкиНУ.Добавить();
				 ЗаполнитьЗначенияСвойств(ПроводкаНУ_Погашение, ПроводкаНУ, "Период, Организация, Сумма,Содержание") ;
				 
				 ПроводкаНУ_Погашение.СчетДт     = СчетДтНУ;
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетДт, ПроводкаНУ_Погашение.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетДт, ПроводкаНУ_Погашение.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
				 
				 ПроводкаНУ_Погашение.СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетКт, ПроводкаНУ_Погашение.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетКт, ПроводкаНУ_Погашение.СубконтоКт, "Договоры", 	СтруктураШапкиДокумента.ОсновнойДоговорКонтрагента);						
				 
				 Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
					 //СП = СП-получатель, так как мы с 3310Н(СП-получатель) переносим  на 1010Н также на СП-получатель
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
													 ПроводкаНУ_Погашение, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель);	 
				 Иначе
					 ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
													 ПроводкаНУ_Погашение, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				 
				КонецЕсли; 
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ_Погашение,  СтруктураШапкиДокумента.ВидУчетаНУ);

			 КонецЕсли; 				 
		КонецЕсли;      		
	КонецЕсли;	
	
	//Учет курсовых разниц
	Если ( СтруктураШапкиДокумента.ВалютаДокумента <> мВалютаРегламентированногоУчета)
		ИЛИ  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты	Тогда
		
		ПроцедурыБухгалтерскогоУчета.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
		
	КонецЕсли; // Учет курсовых разниц
	
КонецПроцедуры // ДвиженияПоРегистрамРегл

// Процедура проверки заполнения необходимых полей и их корректности
//
Процедура ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок)
    ОбязательноОтражатьВОперУчете = УправлениеДенежнымиСредствами.КонтрольОтраженияПлатежныхДокументовВОперативномУчете(Дата);
	Если ОбязательноОтражатьВОперУчете И (НЕ ОтраженоВОперУчете) И НЕ УправлениеДенежнымиСредствами.ЕстьРазрешениеПроводитьБезОперУчета() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ необходимо отразить в оперативном учете", Отказ, Заголовок);
		Возврат;
	КонецЕсли;

	СтруктураПолей = Новый Структура("Организация, СуммаДокумента, Ответственный");
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);

	Если ОтраженоВОперУчете Тогда
		
		ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			ПроверитьЗаполнениеТЧ(Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли; 	
	
	СтруктураПолей = Новый Структура();

	СтруктураПолей.Вставить("СчетБанк",       "Не указан счет учета денежных средств");
	//СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	//СтруктураПолей.Вставить("СуммаДокумента");

	Если СчетБанк.Валютный Тогда
		СтруктураПолей.Вставить("ВалютаДокумента","Не указана валюта документа.");
	КонецЕсли;

	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда			
		СтруктураПолей.Вставить("ВидУчетаНУ");
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств 
		ИЛИ СтруктураШапкиДокумента.ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств Тогда

		СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентомБУ","Не указан счет учета.");
        	
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда				
			СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентомНУ","Не указан счет налогового учета.");		
		КонецЕсли;
		
	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		СтруктураПолей.Вставить("Контрагент");

	КонецЕсли;

	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);

	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

		// Проверим соответствие суммы по документу в целом, и сумм указанных в расшифровке платежа
		Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа") = СуммаДокумента Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не совпадают сумма документа и ее расшифровка.",Отказ,Заголовок);
		КонецЕсли;
		
		//Проверяем заполнение табличной части 
		СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентомБУ,ДоговорКонтрагента");
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ И  ЕстьРасчетыПоКредитам Тогда
			СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;
		        
		ВыводитьНомераСтрокВСообщении = РасшифровкаПлатежа.Количество()>1;
		ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок, ВыводитьНомераСтрокВСообщении);

		// Проверки на логическое соответствие реквизитов
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты тогда
			Если НЕ СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда

				//Документ выписан в валюте регламентированного учета, валюта договара на приобретение валюты должна отличаться.
				ОбщегоНазначения.ОшибкаПриПроведении("При отражении операции реализации иностранной валюты валюта документа должна соответствовать валюте регламентированного учета."
								 ,Отказ,Заголовок);

		   КонецЕсли;
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
			Если СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда

				//Документ выписан валюте приобретения, валюта договора на приобретение валюты должна отличаться.
				ОбщегоНазначения.ОшибкаПриПроведении("При отражении операции приобретения иностранной валюты валюта документа должна отличаться от валюты регламентированного учета."
								 ,Отказ,Заголовок);

		   КонецЕсли;
			
		КонецЕсли;
		
		
		Для Каждого Платеж Из РасшифровкаПлатежа Цикл
			//Проверим соответствие организации. указанной в документе и организации указанной в договоре
			ОбщегоНазначения.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, Платеж.ДоговорКонтрагента, 
													  Платеж.ДоговорКонтрагента.Организация, Отказ, Заголовок);
													  
			//Сопоставление валюты расчетов по договору и валюты документа
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты тогда
				Если НЕ ЗначениеЗаполнено(Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) 
					или Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета тогда

					//Документ выписан в валюте регламентированного учета, валюта договара на приобретение валюты должна отличаться.
					ОбщегоНазначения.ОшибкаПриПроведении("Валюта договора"+?(НЕ ЗначениеЗаполнено(Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов)," не заполнена","("+Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов+") не отличается от валюты регламентированного учета (" + мВалютаРегламентированногоУчета+")")+". 
					                 |При отражении операции реализации иностранной валюты валюта договора должна соответствовать реализуемой валюте."
									 ,Отказ,Заголовок);

	           КонецЕсли;
			ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
				Если НЕ ЗначениеЗаполнено(Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) 
					или не Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета тогда

					//Документ выписан валюте приобретения, валюта договора на приобретение валюты должна отличаться.
					ОбщегоНазначения.ОшибкаПриПроведении("Валюта договора"+?(НЕ ЗначениеЗаполнено(Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов)," не заполнена","("+Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов+") отличается от валюты регламентированного учета (" + мВалютаРегламентированногоУчета+")")+". 
					                 |При отражении операции приобретения иностранной валюты валюта договора должна соответствовать валюте регламентированного учета."
									 ,Отказ,Заголовок);

	           КонецЕсли;
				
			Иначе
				УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента,Платеж.ДоговорКонтрагента,
													 Отказ, Заголовок,"Строка "+Платеж.НомерСтроки+" - ");
	        КонецЕсли;
													  
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеДокумента

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


// Процедура - обработчик события "ОбработкаЗаполнения" документа.
//
Процедура ОбработкаЗаполнения(Основание)
    // Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
     	ЗаполнитьПоДокументуОснования(Основание);
	КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПередЗаписью" документа.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	Если Не ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделениеПолучатель;
	КонецЕсли;

	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ОбработкаПроведения" документа.
//
Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ОтражатьВУправленческомУчете",Истина); // Банковские документы всегда отражаются в упр. учете
	
	Если РасшифровкаПлатежа.Количество() > 0 Тогда
		СтруктураШапкиДокумента.Вставить("ОсновнойДоговорКонтрагента", РасшифровкаПлатежа[0].ДоговорКонтрагента);
	Иначе
		СтруктураШапкиДокумента.Вставить("ОсновнойДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	КонецЕсли;
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	
	ВедениеУчетаВременныхРазницБалансовымМетодом = ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом",  ВедениеУчетаВременныхРазницБалансовымМетодом);
 
	 //так как для всех операций, кроме одной используется только одно поле дя выбора структурного подразделения,
	 //то добавим в структуру еще одну запись
	СтруктураШапкиДокумента.Вставить("СтруктурноеПодразделение", 			СтруктурноеПодразделениеПолучатель);

	//Бит Источники финансирования
	СтруктураШапкиДокумента.Вставить("ИсточникФинансирования", 			ИсточникФинансирования);
	//Бит Источники финансирования

	Если НЕ Оплачено Тогда

		ОбщегоНазначения.ОшибкаПриПроведении("Платежный ордер может быть проведен только если он оплачен(флаг ""Оплачено"")." + Символы.ПС +
		         "До установки признака оплаты документ можно только записать.",Отказ,Заголовок);
	Иначе
		ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента,Отказ, Заголовок);
	КонецЕсли;
	ДатаДвижений=?(Оплачено и ЗначениеЗаполнено(Дата),КонецДня(Дата),Дата);
	ТаблицаПлатежейУпр=УправлениеДенежнымиСредствами.ПолучитьТаблицуПлатежейУпр(ДатаДвижений,ВалютаДокумента,Ссылка, "ПлатежныйОрдерПоступлениеДенежныхСредств");
	
	// Движения по документу
	Если Оплачено И НЕ Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
		Если Не Отказ Тогда			
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

//Формирует движения по управленческим регистрам
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если НЕ ОтраженоВОперУчете Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ВидДокументаОснования       = ДокументОснование.Метаданные().Имя;
		Если ВидДокументаОснования = "ПлатежноеПоручениеВходящее" Тогда
			Если ДокументОснование.Оплачено = ЛОЖЬ Тогда
				РасчетныйДокумент = ДокументОснование.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДвиженияПоСтатьям = ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоПланируемымПлатежам = ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоРезерву = ТаблицаПлатежейУпр.Скопировать();
	
	ДвиженияПоПланируемымПлатежам.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,Сделка,ВестиПоДокументамРасчетовСКонтрагентом,СтатьяДвиженияДенежныхСредств,Проект","СуммаПлатежа,СуммаВзаиморасчетов,СуммаПлатежаПлан,СуммаУпр");

	ДвиженияПоСтатьям.Свернуть("СтатьяДвиженияДенежныхСредств","СуммаПлатежа, СуммаУпр");
	ДвиженияПоРезерву.Свернуть("ДокументПланированияПлатежа","СуммаПлатежа");
	
	// По регистру "Денежные средства"
	НаборДвиженийОстатки 		= Движения.ден_ДенежныеСредства;
	ТаблицаДвиженийОстатки 		= НаборДвиженийОстатки.Выгрузить();
	
	// По регистру "Денежные средства к получению"
	НаборДвиженийПолучение   = Движения.ден_ДенежныеСредстваКПолучению;
	ТаблицаДвиженийПолучение = НаборДвиженийПолучение.Выгрузить();
	
	СтрокаКурсыВалют=ТаблицаПлатежейУпр[0];
	
	СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
			Константы.ВалютаУправленческогоУчета.Получить(), 
			СтрокаКурсыВалют.КурсДокумента,
			СтрокаКурсыВалют.КурсУпрУчета, 
			СтрокаКурсыВалют.КратностьДокумента,
			СтрокаКурсыВалют.КратностьУпрУчета);
	
	СтрокаДвиженийОстатки = ТаблицаДвиженийОстатки.Добавить();
	СтрокаДвиженийОстатки.БанковскийСчетКасса = СчетОрганизации;
	СтрокаДвиженийОстатки.Организация 		  = Организация;
	СтрокаДвиженийОстатки.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
	СтрокаДвиженийОстатки.Сумма               = СуммаДокумента;
	СтрокаДвиженийОстатки.СуммаУпр            = СуммаУпр;
	СтрокаДвиженийОстатки.СтруктурноеПодразделение = СтруктурноеПодразделениеПолучатель;
	
	НаборДвиженийОстатки.мПериод              = ДатаДвижений;
	НаборДвиженийОстатки.мТаблицаДвижений     = ТаблицаДвиженийОстатки;
	Движения.ден_ДенежныеСредства.ВыполнитьПриход();
	
	Если ОтраженоВОперУчете Тогда // Разнесено менеджером по оперативным взаиморасчетам
		// По регистру "Денежные средства к получению"
		Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
			
			СтрокаДвиженийПолучение = ТаблицаДвиженийПолучение.Добавить();
			СтрокаДвиженийПолучение.БанковскийСчетКасса = СчетОрганизации;
			СтрокаДвиженийПолучение.Организация 		= Организация;
			СтрокаДвиженийПолучение.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
			СтрокаДвиженийПолучение.Сумма               = СтрокаДвижение.СуммаПлатежа;
			СтрокаДвиженийПолучение.СуммаУпр            = СтрокаДвижение.СуммаУпр;
			СтрокаДвиженийПолучение.ДокументПолучения    = ?(Не ЗначениеЗаполнено(РасчетныйДокумент),Ссылка,РасчетныйДокумент);
			СтрокаДвиженийПолучение.СтатьяДвиженияДенежныхСредств=СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
			СтрокаДвиженийПолучение.СтруктурноеПодразделение = СтруктурноеПодразделениеПолучатель;
			
		КонецЦикла;
		
		НаборДвиженийПолучение.мПериод              = ДатаДвижений;
		НаборДвиженийПолучение.мТаблицаДвижений     = ТаблицаДвиженийПолучение;
		Движения.ден_ДенежныеСредстваКПолучению.ВыполнитьРасход();
	КонецЕсли;
	Для Каждого СтрокаРезерв ИЗ ДвиженияПоРезерву Цикл
		
		// Резервируем денежные средства, если приход планировался и по нему размещались заявки
		Если НЕ СтрокаРезерв.ДокументПланированияПлатежа.Пустая() Тогда
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	РазмещениеЗаявокНаРасходованиеСредствОстатки.ДокументРезервирования КАК Заявка,
			|	РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток КАК СуммаОстаток,
			|	РазмещениеЗаявокНаРасходованиеСредствОстатки.ДокументРезервирования.ДатаРасхода КАК ДокументРезервированияДатаРасхода
			|ИЗ
			|	РегистрНакопления.ден_РазмещениеЗаявокНаРасходованиеСредств.Остатки(, ДокументПланирования=&ДокументПланирования) КАК РазмещениеЗаявокНаРасходованиеСредствОстатки
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДокументРезервированияДатаРасхода";
			
			Запрос.УстановитьПараметр("ДокументПланирования",СтрокаРезерв.ДокументПланированияПлатежа);
			
			Результат=Запрос.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				
				СуммаРезерв=СтрокаРезерв.СуммаПлатежа;	
				
				НаборРазмещение=Движения.ден_РазмещениеЗаявокНаРасходованиеСредств;
				ТаблицаРазмещение=НаборРазмещение.Выгрузить();
				ТаблицаРазмещение.Очистить();
				
				НаборРезерв=Движения.ден_ДенежныеСредстваВРезерве;
				ТаблицаРезерв=НаборРезерв.Выгрузить();
				ТаблицаРезерв.Очистить();
				
				Выборка=Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					Если Выборка.СуммаОстаток>=СуммаРезерв Тогда
						
						СтрокаРазмещение=ТаблицаРазмещение.Добавить();
						СтрокаРазмещение.ДокументПланирования=СтрокаРезерв.ДокументПланированияПлатежа;
						СтрокаРазмещение.ДокументРезервирования=Выборка.Заявка;
						СтрокаРазмещение.Сумма=СуммаРезерв;
						
						СтрокаРезерв=ТаблицаРезерв.Добавить();
						СтрокаРезерв.БанковскийСчетКасса=СчетОрганизации;
						СтрокаРезерв.Организация 		= Организация;
						СтрокаРезерв.ВидДенежныхСредств=Перечисления.ден_ВидыДенежныхСредств.Безналичные;
						СтрокаРезерв.ДокументРезервирования=Выборка.Заявка;
						СтрокаРезерв.Сумма=СуммаРезерв;
						СтрокаРезерв.СтруктурноеПодразделение = СтруктурноеПодразделениеПолучатель;
						
						Прервать;
						
					Иначе
						
						СтрокаРазмещение=ТаблицаРазмещение.Добавить();
						СтрокаРазмещение.ДокументПланирования=СтрокаРезерв.ДокументПланированияПлатежа;
						СтрокаРазмещение.ДокументРезервирования=Выборка.Заявка;
						СтрокаРазмещение.Сумма=Выборка.СуммаОстаток;
						
						СтрокаРезерв=ТаблицаРезерв.Добавить();
						СтрокаРезерв.БанковскийСчетКасса=СчетОрганизации;
						СтрокаРезерв.Организация 		= Организация;
						СтрокаРезерв.ВидДенежныхСредств=Перечисления.ден_ВидыДенежныхСредств.Безналичные;
						СтрокаРезерв.ДокументРезервирования=Выборка.Заявка;
						СтрокаРезерв.Сумма=Выборка.СуммаОстаток;
						СтрокаРезерв.СтруктурноеПодразделение = СтруктурноеПодразделениеПолучатель;
					
						СуммаРезерв=СуммаРезерв-Выборка.СуммаОстаток;
						
					КонецЕсли;
					
				КонецЦикла;
				
				НаборРазмещение.мПериод=ДатаДвижений;
				НаборРазмещение.мТаблицаДвижений=ТаблицаРазмещение;
				Движения.ден_РазмещениеЗаявокНаРасходованиеСредств.ВыполнитьРасход();
				
				НаборРезерв.мПериод=ДатаДвижений;
				НаборРезерв.мТаблицаДвижений=ТаблицаРезерв;
				Движения.ден_ДенежныеСредстваВРезерве.ВыполнитьПриход();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если ОтраженоВОперУчете Тогда
		
		Если Не ЗначениеЗаполнено(РасчетныйДокумент) Тогда
			
			// По регистру "Денежные средства к получению"
			НаборДвиженийДС   = Движения.ден_ДенежныеСредстваКПолучению;
			ТаблицаДвиженийДС = НаборДвиженийДС.Выгрузить();
			ТаблицаДвиженийДС.Очистить();
			
			Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
				
				СтрокаДвиженийДС = ТаблицаДвиженийДС.Добавить();
				СтрокаДвиженийДС.БанковскийСчетКасса = СчетОрганизации;
				СтрокаДвиженийДС.Организация 		 = Организация;
				СтрокаДвиженийДС.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
				СтрокаДвиженийДС.Сумма               = СтрокаДвижение.СуммаПлатежа;
				СтрокаДвиженийДС.СуммаУпр            = СтрокаДвижение.СуммаУпр;
				СтрокаДвиженийДС.ДокументПолучения   = Ссылка;
				СтрокаДвиженийДС.СтатьяДвиженияДенежныхСредств=СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
				СтрокаДвиженийДС.СтруктурноеПодразделение = СтруктурноеПодразделениеПолучатель;
				
			КонецЦикла;
			
			НаборДвиженийДС.мПериод              = Дата;
			НаборДвиженийДС.мТаблицаДвижений     = ТаблицаДвиженийДС;
			Движения.ден_ДенежныеСредстваКПолучению.ВыполнитьПриход();
			
			// По регистру "Планируемые поступления денежных средств"
			НаборДвиженийПлан  = Движения.ден_ПланируемыеПоступленияДенежныхСредств;
			ТаблицаДвиженийПлан = НаборДвиженийПлан.Выгрузить();
			ТаблицаДвиженийПлан.Очистить();
			
			// По строкам табличной части
			Для Каждого СтрокаПлатеж ИЗ ДвиженияПоПланируемымПлатежам Цикл
				
				ЕстьПланПоступление=Ложь;
				ЕстьРасчеты=Ложь;
				
				Если НЕ СтрокаПлатеж.ДокументПланированияПлатежа.Пустая() Тогда
					
					СуммаПлатежа=СтрокаПлатеж.СуммаПлатежаПлан;
					СтрокаДвиженийЗаявки = ТаблицаДвиженийПлан.Добавить();
					СтрокаДвиженийЗаявки.СуммаУпр            			= СтрокаПлатеж.СуммаУпр;
					СтрокаДвиженийЗаявки.Сумма                			= СтрокаПлатеж.СуммаПлатежаПлан;
					СтрокаДвиженийЗаявки.СуммаВзаиморасчетов  			= СтрокаПлатеж.СуммаВзаиморасчетов;
					СтрокаДвиженийЗаявки.ДокументПланирования 			= СтрокаПлатеж.ДокументПланированияПлатежа;
					СтрокаДвиженийЗаявки.СтатьяДвиженияДенежныхСредств 	= СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
					СтрокаДвиженийЗаявки.Проект						 	= СтрокаПлатеж.Проект;
					СтрокаДвиженийЗаявки.ДоговорКонтрагента				= СтрокаПлатеж.ДоговорКонтрагента;
					СтрокаДвиженийЗаявки.Организация					= Организация;
					СтрокаДвиженийЗаявки.Контрагент						= Контрагент;
 					СтрокаДвиженийЗаявки.СтруктурноеПодразделение 		= СтруктурноеПодразделениеПолучатель;

					Если СтрокаПлатеж.ВестиПоДокументамРасчетовСКонтрагентом Тогда
						СтрокаДвиженийЗаявки.Сделка = ?(Не ЗначениеЗаполнено(СтрокаПлатеж.Сделка),
						Ссылка,
						СтрокаПлатеж.Сделка);
					КонецЕсли;
					
					ЕстьПланПоступление = Истина;
				
				КонецЕсли;
			
			КонецЦикла;
		
			Если ТаблицаДвиженийПлан.Количество()>0 Тогда
				
				НаборДвиженийПлан.мПериод          = Дата;
				НаборДвиженийПлан.мТаблицаДвижений = ТаблицаДвиженийПлан;
				Движения.ден_ПланируемыеПоступленияДенежныхСредств.ВыполнитьРасход();
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Проводим по фактическим взаиморасчетам
		
		// По регистру "Движения денежных средств"
		НаборДвижений = Движения.ден_ДвиженияДенежныхСредств;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		// Заполним таблицу движений. 
		
		ДвиженияДенежныхСредств=ТаблицаПлатежейУпр.Скопировать();
		
		ДвиженияДенежныхСредств.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,Сделка,ВестиПоДокументамРасчетовСКонтрагентом,СтатьяДвиженияДенежныхСредств,Проект,Подразделение","СуммаПлатежа,СуммаУпр");
		ДвиженияДенежныхСредств.Колонки["СуммаПлатежа"].Имя="Сумма";
		
		фин_УправлениеПроектами.ОтразитьДвиженияПоПроектам(ДвиженияДенежныхСредств,ТаблицаДвижений,Неопределено,ДатаДвижений,"ДенежныеСредстваПоступление",Ссылка);
			
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ден_ВидыДенежныхСредств.Безналичные,"ВидДенежныхСредств");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ден_ВидыДвиженийПриходРасход.Приход,"ПриходРасход");
		ТаблицаДвижений.ЗаполнитьЗначения(СчетОрганизации,"БанковскийСчетКасса");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументДвижения");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктурноеПодразделениеПолучатель,"СтруктурноеПодразделение");
		
		НаборДвижений.мПериод            = ДатаДвижений;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Движения.ден_ДвиженияДенежныхСредств.ВыполнитьДвижения();
		
	КонецЕсли; 
		
КонецПроцедуры

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, Отказ, Заголовок, ИмяРеквизита)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда 
		
		ОбщегоНазначения.ОшибкаПриПроведении("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗначение()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ, Заголовок)
	
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл

		ПроверитьЗначение(Платеж.ДоговорКонтрагента,Отказ, Заголовок,"Договор");
		ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок,"Сумма взаиморасчетов");
		
		Если Не Отказ Тогда
			
			Если ЗначениеЗаполнено(Организация) 
				И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТЧ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();