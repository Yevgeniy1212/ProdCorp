#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ИсточникЗаявки = Перечисления.узп_ИсточникиЗаявокМТС.Подразделение Тогда
		Для Каждого СтрокаТовар Из Товары Цикл
			СтрокаТовар.Подразделение 	= Подразделение;
		КонецЦикла;
		Для Каждого СтрокаУслуги Из Услуги Цикл
			СтрокаУслуги.Подразделение 	= Подразделение;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из Товары Цикл
		//СтрокаТЧ.ПериодПланирования = НачалоМесяца(СтрокаТЧ.ПериодПланирования);
		СтрокаТЧ.ОбъектРемонта = ОбъектРемонта;
	КонецЦикла;
	Для каждого СтрокаТЧ Из Услуги Цикл
		//СтрокаТЧ.ПериодПланирования = НачалоМесяца(СтрокаТЧ.ПериодПланирования);
		СтрокаТЧ.ОбъектРемонта = ОбъектРемонта;
	КонецЦикла;
	
	ПериодПланирования = НачалоМесяца(ПериодПланирования);
	СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	фин_ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.узп_ЗаявкаМТС.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ Тогда
		фин_УправлениеПроведениемДокументовСервер.СформироватьДвиженияПоРегистрам(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТовары, Движения, Отказ,"Товары","узп_УправлениеЗакупками","ЗарегистрироватьДвиженияЗаявкиМТС",,);
		фин_УправлениеПроведениемДокументовСервер.СформироватьДвиженияПоРегистрам(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаУслуги, Движения, Отказ,"Услуги","узп_УправлениеЗакупками","ЗарегистрироватьДвиженияЗаявкиМТС",,);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок = "";
	
	Если ИсточникЗаявки<>Перечисления.узп_ИсточникиЗаявокМТС.Подразделение Тогда
		дог_УправлениеДоговорами.ИсключитьПроверку(ПроверяемыеРеквизиты,"Подразделение");
	КонецЕсли;
	
	//Проверка наличия повторений номенклатур
	Документы.узп_ЗаявкаМТС.ПроверитьНоменклатуруНаНаличиеПовторений(Отказ,Товары,"Товары", ЭтотОбъект);
	Документы.узп_ЗаявкаМТС.ПроверитьНоменклатуруНаНаличиеПовторений(Отказ,Услуги,"Услуги", ЭтотОбъект);
	
	//Проверка на несоответствие номенклатур табличным частям
	Документы.узп_ЗаявкаМТС.ПроверитьТоварыУслуги(ЭтотОбъект, Отказ);
	
	//Проверка превышения лимитов
	Отказ = Не Документы.узп_ЗаявкаМТС.ПроверкаНаЛимиты(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.узп_ЗаказПокупателя") Тогда
		// Заполнение шапки
		Состояние 							= Перечисления.СостоянияОбъектов.Подготовлен;
		Комментарий 						= ДанныеЗаполнения.Комментарий;
		Организация 						= ДанныеЗаполнения.Организация;
		Подразделение 						= ДанныеЗаполнения.Подразделение;
		Если ЗначениеЗаполнено(Подразделение) Тогда
			ИсточникЗаявки					= Перечисления.узп_ИсточникиЗаявокМТС.Подразделение;
		Иначе
			ИсточникЗаявки					= Перечисления.узп_ИсточникиЗаявокМТС.ПрочиеИсточники;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Сценарий) Тогда
			ОсновнойСценарий 				= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("узп_ОсновнойСценарийПланированияЗакупок");
			Сценарий 						= ОсновнойСценарий;
		КонецЕсли;
		ПериодПланирования 					= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ДанныеЗаполнения.СрокПоставки,Сценарий);
		ДокументОснование 					= ДанныеЗаполнения.Ссылка;
		СтруктурноеПодразделение 			= ДанныеЗаполнения.СтруктурноеПодразделение;
		СуммаДокумента 						= ДанныеЗаполнения.СуммаДокумента;
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения 	= ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.Количество 			= ТекСтрокаТовары.Количество;
			НоваяСтрока.Коэффициент 		= ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Номенклатура 		= ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ПериодПланирования 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ТекСтрокаТовары.СрокПоставки,Сценарий);
			НоваяСтрока.Сумма 				= ТекСтрокаТовары.Сумма;
			НоваяСтрока.Характеристика 		= ТекСтрокаТовары.Характеристика;
			НоваяСтрока.Цена 				= ТекСтрокаТовары.Цена;
			НоваяСтрока.Подразделение		= ДанныеЗаполнения.Подразделение;
		КонецЦикла;
		Для Каждого ТекСтрокаУслуги Из ДанныеЗаполнения.Услуги Цикл
			НоваяСтрока = Услуги.Добавить();
			НоваяСтрока.Количество 			= ТекСтрокаУслуги.Количество;
			НоваяСтрока.Номенклатура 		= ТекСтрокаУслуги.Номенклатура;
			НоваяСтрока.ПериодПланирования 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ТекСтрокаУслуги.СрокПоставки,Сценарий);
			НоваяСтрока.Сумма 				= ТекСтрокаУслуги.Сумма;
			НоваяСтрока.Характеристика 		= ТекСтрокаУслуги.Характеристика;
			НоваяСтрока.Цена 				= ТекСтрокаУслуги.Цена;
			НоваяСтрока.Подразделение		= ДанныеЗаполнения.Подразделение;
		КонецЦикла;
	КонецЕсли;
	
	фин_ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета"));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#КонецЕсли



