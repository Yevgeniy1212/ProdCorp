#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение

Процедура ЗаполнитьПоДокументуОснованию(Объект, ДокументОснование) Экспорт
	
КонецПроцедуры   

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// анализ промежуточного исполнения
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаявкаМТС";
	КомандаПечати.Представление = НСтр("ru = 'Заявка МТС'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
	// анализ промежуточного исполнения
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаявкаМТСПериоды";
	КомандаПечати.Представление = НСтр("ru = 'Заявка МТС (По периодам)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
	Возврат;	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявкаМТС") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЗаявкаМТС",
			НСтр("ru = 'Заявка МТС'"),
			ПечатьЗаявкаМТС(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.узп_ЗаявкаМТС.ПФ_MXL_ЗаявкаМТС");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявкаМТСПериоды") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЗаявкаМТСПериоды",
			НСтр("ru = 'Заявка МТС (По периодам)'"),
			ПечатьЗаявкаМТСПериоды(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.узп_ЗаявкаМТС.ПФ_MXL_ЗаявкаМТСПериоды");
	КонецЕсли;
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

//Печать заказа поставщику
Функция ПечатьЗаявкаМТС(МассивОбъектов, ОбъектыПечати) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Макет 									= Документы.узп_ЗаявкаМТС.ПолучитьМакет("ПФ_MXL_ЗаявкаМТС");
	ТабличныйДокумент 						= Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати 	= "узп_ЗаявкаМТС_ЗаявкаМТС";
	
	ПризнакПроекта 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("узп_ВестиУчетЗакупокПоПроектам");
	Запрос 			= Новый Запрос;
	Запрос.Текст 	=
	"ВЫБРАТЬ
	|	ЗаявкаМТС.Ссылка,
	|	ЗаявкаМТС.Автор,
	|	ЗаявкаМТС.Дата,
	|	ЗаявкаМТС.ИсточникЗаявки,
	|	ЗаявкаМТС.Номер,
	|	ЗаявкаМТС.Организация,
	|	ЗаявкаМТС.Ответственный,
	|	ЗаявкаМТС.ПериодПланирования,
	|	ЗаявкаМТС.Подразделение,
	|	ЗаявкаМТС.СтруктурноеПодразделение,
	|	ЗаявкаМТС.Сценарий,
	|	ЗаявкаМТС.Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Характеристика,
	|		ЕдиницаИзмерения,
	|		Коэффициент,
	|		ПериодПланирования,
	|		Количество,
	|		Цена,
	|		Сумма,
	|		Подразделение,
	|		Приоритет,
	|		ОбъектРемонта,
	|		Описание,
	|		Проект
	|	),
	|	ЗаявкаМТС.Услуги.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Характеристика,
	|		ПериодПланирования,
	|		Количество,
	|		Цена,
	|		Сумма,
	|		Подразделение,
	|		ОбъектРемонта,
	|		Приоритет,
	|		Описание,
	|		Проект
	|	),
	|	ЗаявкаМТС.ОбъектРемонта
	|ИЗ
	|	Документ.узп_ЗаявкаМТС КАК ЗаявкаМТС
	|ГДЕ
	|	ЗаявкаМТС.Ссылка В(&Ссылка)";
	Запрос.Параметры.Вставить("Ссылка", МассивОбъектов);
	Выборка 					= Запрос.Выполнить().Выбрать();

	Шапка						= Макет.ПолучитьОбласть("Шапка");
	ОбластьТоварыШапка 			= Макет.ПолучитьОбласть("ТоварыШапка");
	ОбластьТовары 				= Макет.ПолучитьОбласть("Товары");
	ОбластьТоварыШапкаПроект 	= Макет.ПолучитьОбласть("ТоварыШапкаПроект");
	ОбластьТоварыПроект 		= Макет.ПолучитьОбласть("ТоварыПроект");
	ОбластьУслугиШапка 			= Макет.ПолучитьОбласть("УслугиШапка");
	ОбластьУслуги 				= Макет.ПолучитьОбласть("Услуги");
	ОбластьУслугиШапкаПроект 	= Макет.ПолучитьОбласть("УслугиШапкаПроект");
	ОбластьУслугиПроект 		= Макет.ПолучитьОбласть("УслугиПроект");
	ОбластьСпейсер 				= Макет.ПолучитьОбласть("Спейсер");
	Подвал 						= Макет.ПолучитьОбласть("Подвал");

	ТабличныйДокумент.Очистить();

	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		НомерСтрокиНачало 							= ТабличныйДокумент.ВысотаТаблицы + 1;
		ВставлятьРазделительСтраниц 				= Ложь;
		Шапка.Параметры.Заполнить(Выборка);
		Шапка.Параметры.ОрганизацияНаименование 	= Выборка.Организация.Наименование+?(ЗначениеЗаполнено(Выборка.СтруктурноеПодразделение),"/"+Выборка.СтруктурноеПодразделение.Наименование,"");
		Шапка.Параметры.ПодразделениеНаименование 	= ?(Выборка.ИсточникЗаявки=Перечисления.узп_ИсточникиЗаявокМТС.Подразделение,Выборка.Подразделение.Наименование,Выборка.ИсточникЗаявки);
		Шапка.Параметры.ПериодПланирования 			= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПредставлениеИнтервалаСтрокой(Выборка.ПериодПланирования,Выборка.Сценарий); 
		ТабличныйДокумент.Вывести(Шапка, Выборка.Уровень());

		ВыборкаТовары 			= Выборка.Товары.Выбрать();
		Если ВыборкаТовары.Количество()>0 Тогда
			ТабличныйДокумент.Вывести(ОбластьСпейсер);
			ТабличныйДокумент.Вывести(ОбластьТоварыШапка);
			Если ПризнакПроекта Тогда
				ТабличныйДокумент.Присоединить(ОбластьТоварыШапкаПроект);
			КонецЕсли;
		КонецЕсли;
		Пока ВыборкаТовары.Следующий() Цикл
			ОбластьТовары.Параметры.Заполнить(ВыборкаТовары);
			ОбластьТовары.Параметры.ПериодПланирования 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(ВыборкаТовары.ПериодПланирования,Выборка.Сценарий);
			ОбластьТовары.Параметры.ОбъектРемонта 		= Выборка.ОбъектРемонта;
			Если ЗначениеЗаполнено(ВыборкаТовары.Характеристика) Тогда
				ОбластьТовары.Параметры.Номенклатура 	= ВыборкаТовары.Номенклатура.Наименование + " / "+ВыборкаТовары.Характеристика.Наименование;
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьТовары, ВыборкаТовары.Уровень());
			Если ПризнакПроекта Тогда
				ОбластьТоварыПроект.Параметры.Проект = ВыборкаТовары.Проект;
				ТабличныйДокумент.Присоединить(ОбластьТоварыПроект);
			КонецЕсли;

		КонецЦикла;

		ВыборкаУслуги = Выборка.Услуги.Выбрать();
		Если ВыборкаУслуги.Количество()>0 Тогда
			ТабличныйДокумент.Вывести(ОбластьСпейсер);
			ТабличныйДокумент.Вывести(ОбластьУслугиШапка);
			Если ПризнакПроекта Тогда
				ТабличныйДокумент.Присоединить(ОбластьУслугиШапкаПроект);
			КонецЕсли;
			
		КонецЕсли;
		Пока ВыборкаУслуги.Следующий() Цикл
			ОбластьУслуги.Параметры.Заполнить(ВыборкаУслуги);
			ОбластьУслуги.Параметры.ПериодПланирования 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(ВыборкаТовары.ПериодПланирования,Выборка.Сценарий);
			ОбластьУслуги.Параметры.ОбъектРемонта 		= Выборка.ОбъектРемонта;
			Если ЗначениеЗаполнено(ВыборкаУслуги.Характеристика) Тогда
				ОбластьУслуги.Параметры.Номенклатура 	= ВыборкаУслуги.Номенклатура.Наименование + " / "+ВыборкаУслуги.Характеристика.Наименование;
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьУслуги, ВыборкаУслуги.Уровень());
			Если ПризнакПроекта Тогда
				ОбластьУслугиПроект.Параметры.Проект = ВыборкаУслуги.Проект;
				ТабличныйДокумент.Присоединить(ОбластьУслугиПроект);
			КонецЕсли;
		КонецЦикла;

		Подвал.Параметры.Заполнить(Выборка);
		ТабличныйДокумент.Вывести(Подвал);

		ВставлятьРазделительСтраниц = Истина;
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
	КонецЦикла;	
	
	Возврат ТабличныйДокумент;
КонецФункции

//Печать заказа поставщику
Функция ПечатьЗаявкаМТСПериоды(МассивОбъектов, ОбъектыПечати) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Макет 									= Документы.узп_ЗаявкаМТС.ПолучитьМакет("ПФ_MXL_ЗаявкаМТСПериоды");
	ТабличныйДокумент 						= Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати 	= "узп_ЗаявкаМТСПериоды_ЗаявкаМТСПериоды";
	
	ПризнакПроекта 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("узп_ВестиУчетЗакупокПоПроектам");
	Если ПризнакПроекта тогда
		Проект 		= ", Проект";
	Иначе
		Проект 		= "";
	КонецЕсли;
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	=
	"ВЫБРАТЬ
	|	ЗаявкаМТС.Ссылка,
	|	ЗаявкаМТС.Автор,
	|	ЗаявкаМТС.Дата,
	|	ЗаявкаМТС.ИсточникЗаявки,
	|	ЗаявкаМТС.Номер,
	|	ЗаявкаМТС.Организация,
	|	ЗаявкаМТС.Ответственный,
	|	ЗаявкаМТС.ПериодПланирования,
	|	ЗаявкаМТС.Подразделение,
	|	ЗаявкаМТС.СтруктурноеПодразделение,
	|	ЗаявкаМТС.Сценарий,
	|	ЗаявкаМТС.Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Характеристика,
	|		ЕдиницаИзмерения,
	|		Коэффициент,
	|		ПериодПланирования,
	|		Количество,
	|		Цена,
	|		Сумма,
	|		Подразделение,
	|		Приоритет,
	|		ОбъектРемонта,
	|		Описание" + Проект + "
	|	),
	|	ЗаявкаМТС.Услуги.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Характеристика,
	|		ПериодПланирования,
	|		Количество,
	|		Цена,
	|		Сумма,
	|		Подразделение,
	|		ОбъектРемонта,
	|		Приоритет,
	|		Описание" + Проект + "
	|	),
	|	ЗаявкаМТС.ОбъектРемонта
	|ИЗ
	|	Документ.узп_ЗаявкаМТС КАК ЗаявкаМТС
	|ГДЕ
	|	ЗаявкаМТС.Ссылка В(&Ссылка)";
	Запрос.Параметры.Вставить("Ссылка", МассивОбъектов);
	Выборка 		= Запрос.Выполнить().Выбрать();
    Выборка.Следующий();
	ТаблицаТовары 	= Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("НомерСтроки");
	
	Массив 			= Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	Массив.Добавить(Тип("СправочникСсылка.фин_ПлановаяНоменклатура"));
	
	//ТаблицаТовары.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТовары.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов(Массив));
	ТаблицаТовары.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.узп_ПлановыеХарактеристикиНоменклатуры"));
	ТаблицаТовары.Колонки.Добавить("ЕдиницаИзмерения",Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	ТаблицаТовары.Колонки.Добавить("Коэффициент",Новый ОписаниеТипов("Число"));
	Для НомерПериода = 1 По ПродолжительностьЦикла(Выборка.Сценарий) Цикл
		ТаблицаТовары.Колонки.Добавить("ТоварыПериод"+НомерПериода,Новый ОписаниеТипов("Дата"));
		ТаблицаТовары.Колонки.Добавить("ТоварыКоличество"+НомерПериода,Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("ТоварыЦена"+НомерПериода,Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("ТоварыСумма"+НомерПериода,Новый ОписаниеТипов("Число"));
	КонецЦикла;
	ТаблицаТовары.Колонки.Добавить("Подразделение",Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	ТаблицаТовары.Колонки.Добавить("Приоритет");
	ТаблицаТовары.Колонки.Добавить("ОбъектРемонта");
	ТаблицаТовары.Колонки.Добавить("Описание",Новый ОписаниеТипов("Строка"));
	Если ПризнакПроекта тогда
		ТаблицаТовары.Колонки.Добавить("Проект",Новый ОписаниеТипов("СправочникСсылка.Проекты"));
	КонецЕсли;
	ТаблицаУслуги = Новый ТаблицаЗначений;
	ТаблицаУслуги.Колонки.Добавить("НомерСтроки");
	//ТаблицаУслуги.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаУслуги.Колонки.Добавить("Номенклатура");
	ТаблицаУслуги.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.узп_ПлановыеХарактеристикиНоменклатуры"));
	ТаблицаУслуги.Колонки.Добавить("ЕдиницаИзмерения",Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	ТаблицаУслуги.Колонки.Добавить("Коэффициент",Новый ОписаниеТипов("Число"));
	Для НомерПериода = 1 По ПродолжительностьЦикла(Выборка.Сценарий) Цикл
		ТаблицаУслуги.Колонки.Добавить("УслугиПериод"+НомерПериода,Новый ОписаниеТипов("Дата"));
		ТаблицаУслуги.Колонки.Добавить("УслугиКоличество"+НомерПериода,Новый ОписаниеТипов("Число"));
		ТаблицаУслуги.Колонки.Добавить("УслугиЦена"+НомерПериода,Новый ОписаниеТипов("Число"));
		ТаблицаУслуги.Колонки.Добавить("УслугиСумма"+НомерПериода,Новый ОписаниеТипов("Число"));
	КонецЦикла;
	ТаблицаУслуги.Колонки.Добавить("Подразделение",Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	ТаблицаУслуги.Колонки.Добавить("Приоритет");
	ТаблицаУслуги.Колонки.Добавить("ОбъектРемонта");
	ТаблицаУслуги.Колонки.Добавить("Описание",Новый ОписаниеТипов("Строка"));
	Если ПризнакПроекта тогда
		ТаблицаУслуги.Колонки.Добавить("Проект",Новый ОписаниеТипов("СправочникСсылка.Проекты"));
	КонецЕсли;	
		
	ВыборкаТовары = Выборка.Товары.Выбрать();
	НомерСтроки = 0;
	Для НомерПериода = 1 По ПродолжительностьЦикла(Выборка.Сценарий) Цикл
		Пока ВыборкаТовары.Следующий() Цикл
			ТекущийПериод = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(ДобавитьМесяц(Выборка.ПериодПланирования,НомерПериода-1),Выборка.Сценарий);
			Если ПризнакПроекта тогда
				ПараметрыПоиска = Новый Структура ("Номенклатура,Характеристика,Проект,ЕдиницаИзмерения,Коэффициент,Подразделение,Описание",
										  ВыборкаТовары.Номенклатура,ВыборкаТовары.Характеристика,ВыборкаТовары.Проект,
										  ВыборкаТовары.ЕдиницаИзмерения,ВыборкаТовары.Коэффициент,ВыборкаТовары.Подразделение,
										  ВыборкаТовары.Описание);
			Иначе
				ПараметрыПоиска = Новый Структура ("Номенклатура,Характеристика,ЕдиницаИзмерения,Коэффициент,Подразделение,Описание",
										  ВыборкаТовары.Номенклатура,ВыборкаТовары.Характеристика,
										  ВыборкаТовары.ЕдиницаИзмерения,ВыборкаТовары.Коэффициент,ВыборкаТовары.Подразделение,
										  ВыборкаТовары.Описание);
			КонецЕсли;	
			
			НайденныеСтроки = ТаблицаТовары.НайтиСтроки(ПараметрыПоиска);
			Если фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(ВыборкаТовары.ПериодПланирования,Выборка.Сценарий) = ТекущийПериод Тогда
				Если НайденныеСтроки.Количество()=0 Тогда
					НомерСтроки = НомерСтроки + 1;
					НоваяСтрока = ТаблицаТовары.Добавить();
					НоваяСтрока.НомерСтроки 		= НомерСтроки;
					НоваяСтрока.Номенклатура 		= ВыборкаТовары.Номенклатура;
					НоваяСтрока.Характеристика 		= ВыборкаТовары.Характеристика;
					НоваяСтрока.ЕдиницаИзмерения 	= ВыборкаТовары.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент 		= ВыборкаТовары.Коэффициент;
					НоваяСтрока["ТоварыПериод" + Строка(НомерПериода)] 		= ВыборкаТовары.ПериодПланирования;
					НоваяСтрока["ТоварыКоличество" + Строка(НомерПериода)] 	= ВыборкаТовары.Количество;
					НоваяСтрока["ТоварыЦена" + Строка(НомерПериода)] 		= ВыборкаТовары.Цена;
					НоваяСтрока["ТоварыСумма" + Строка(НомерПериода)]		= ВыборкаТовары.Сумма;
					НоваяСтрока.Подразделение 		= ВыборкаТовары.Подразделение;
					НоваяСтрока.Приоритет 			= ВыборкаТовары.Приоритет;
					НоваяСтрока.ОбъектРемонта 		= ВыборкаТовары.ОбъектРемонта;
					НоваяСтрока.Описание 			= ВыборкаТовары.Описание;
					Если ПризнакПроекта Тогда
						НоваяСтрока.Проект		 		= ВыборкаТовары.Проект;
					КонецЕсли;
				Иначе
					СтрокаПериод 		= ТаблицаТовары.Получить(ТаблицаТовары.Индекс(НайденныеСтроки[0]))["ТоварыПериод" + Строка(НомерПериода)];
					СтрокаКоличество 	= ТаблицаТовары.Получить(ТаблицаТовары.Индекс(НайденныеСтроки[0]))["ТоварыКоличество" + Строка(НомерПериода)];
					СтрокаЦена 			= ТаблицаТовары.Получить(ТаблицаТовары.Индекс(НайденныеСтроки[0]))["ТоварыЦена" + Строка(НомерПериода)];
					СтрокаСумма 		= ТаблицаТовары.Получить(ТаблицаТовары.Индекс(НайденныеСтроки[0]))["ТоварыСумма" + Строка(НомерПериода)];
					ТаблицаТовары.Получить(ТаблицаТовары.Индекс(НайденныеСтроки[0]))["ТоварыПериод" + Строка(НомерПериода)] 	= ВыборкаТовары.ПериодПланирования;
					ТаблицаТовары.Получить(ТаблицаТовары.Индекс(НайденныеСтроки[0]))["ТоварыКоличество" + Строка(НомерПериода)] = ТаблицаТовары.Получить(ТаблицаТовары.Индекс(НайденныеСтроки[0]))["ТоварыКоличество" + Строка(НомерПериода)]+ВыборкаТовары.Количество;
					ТаблицаТовары.Получить(ТаблицаТовары.Индекс(НайденныеСтроки[0]))["ТоварыЦена" + Строка(НомерПериода)] 		= ВыборкаТовары.Цена;
					ТаблицаТовары.Получить(ТаблицаТовары.Индекс(НайденныеСтроки[0]))["ТоварыСумма" + Строка(НомерПериода)]		= ТаблицаТовары.Получить(ТаблицаТовары.Индекс(НайденныеСтроки[0]))["ТоварыСумма" + Строка(НомерПериода)]+ВыборкаТовары.Сумма;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ВыборкаТовары.Сбросить();
	КонецЦикла;
	Выборка.Следующий();
	ВыборкаУслуги = Выборка.Услуги.Выбрать();
	НомерСтроки = 0;
	Для НомерПериода = 1 По ПродолжительностьЦикла(Выборка.Сценарий) Цикл
		Пока ВыборкаУслуги.Следующий() Цикл
			ТекущийПериод = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(ДобавитьМесяц(Выборка.ПериодПланирования,НомерПериода-1),Выборка.Сценарий);
		    Если ПризнакПроекта тогда
				ПараметрыПоиска = Новый Структура ("Номенклатура,Характеристика,Проект,Подразделение,Описание",
										  ВыборкаТовары.Номенклатура,ВыборкаТовары.Характеристика,ВыборкаТовары.Проект,
										  ВыборкаТовары.Подразделение,
										  ВыборкаТовары.Описание);
			Иначе
				ПараметрыПоиска = Новый Структура ("Номенклатура,Характеристика,Подразделение,Описание",
										  ВыборкаТовары.Номенклатура,ВыборкаТовары.Характеристика,
										  ВыборкаТовары.Подразделение,
										  ВыборкаТовары.Описание);
			КонецЕсли; 
			НайденныеСтроки = ТаблицаУслуги.НайтиСтроки(ПараметрыПоиска);
			Если фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(ВыборкаУслуги.ПериодПланирования,Выборка.Сценарий) = ТекущийПериод Тогда
				Если НайденныеСтроки.Количество()=0 Тогда
					НомерСтроки = НомерСтроки + 1;
					НоваяСтрока = ТаблицаУслуги.Добавить();
					НоваяСтрока.НомерСтроки 	= НомерСтроки;
					НоваяСтрока.Номенклатура 	= ВыборкаУслуги.Номенклатура;
					НоваяСтрока.Характеристика 	= ВыборкаУслуги.Характеристика;
					НоваяСтрока["УслугиПериод" + Строка(НомерПериода)] 		= ВыборкаУслуги.ПериодПланирования;
					НоваяСтрока["УслугиКоличество" + Строка(НомерПериода)] 	= ВыборкаУслуги.Количество;
					НоваяСтрока["УслугиЦена" + Строка(НомерПериода)] 		= ВыборкаУслуги.Цена;
					НоваяСтрока["УслугиСумма" + Строка(НомерПериода)] 		= ВыборкаУслуги.Сумма;
					НоваяСтрока.Подразделение 	= ВыборкаУслуги.Подразделение;
					НоваяСтрока.Приоритет 		= ВыборкаУслуги.Приоритет;
					НоваяСтрока.ОбъектРемонта 	= ВыборкаУслуги.ОбъектРемонта;
					НоваяСтрока.Описание 		= ВыборкаУслуги.Описание;
					Если ПризнакПроекта Тогда
						НоваяСтрока.Проект		 	= ВыборкаУслуги.Проект;
					КонецЕсли;
				Иначе
					СтрокаПериод 		= ТаблицаУслуги.Получить(ТаблицаУслуги.Индекс(НайденныеСтроки[0]))["УслугиПериод" + Строка(НомерПериода)];
					СтрокаКоличество 	= ТаблицаУслуги.Получить(ТаблицаУслуги.Индекс(НайденныеСтроки[0]))["УслугиКоличество" + Строка(НомерПериода)];
					СтрокаЦена 			= ТаблицаУслуги.Получить(ТаблицаУслуги.Индекс(НайденныеСтроки[0]))["УслугиЦена" + Строка(НомерПериода)];
					СтрокаСумма 		= ТаблицаУслуги.Получить(ТаблицаУслуги.Индекс(НайденныеСтроки[0]))["УслугиСумма" + Строка(НомерПериода)];
					ТаблицаУслуги.Получить(ТаблицаУслуги.Индекс(НайденныеСтроки[0]))["УслугиПериод" + Строка(НомерПериода)] 	= ВыборкаТовары.ПериодПланирования;
					ТаблицаУслуги.Получить(ТаблицаУслуги.Индекс(НайденныеСтроки[0]))["УслугиКоличество" + Строка(НомерПериода)] = ТаблицаУслуги.Получить(ТаблицаУслуги.Индекс(НайденныеСтроки[0]))["ТоварыКоличество" + Строка(НомерПериода)]+ВыборкаТовары.Количество;
					ТаблицаУслуги.Получить(ТаблицаУслуги.Индекс(НайденныеСтроки[0]))["УслугиЦена"+Строка(НомерПериода)] 		= ВыборкаТовары.Цена;
					ТаблицаУслуги.Получить(ТаблицаУслуги.Индекс(НайденныеСтроки[0]))["УслугиСумма" + Строка(НомерПериода)] 	= ТаблицаУслуги.Получить(ТаблицаУслуги.Индекс(НайденныеСтроки[0]))["ТоварыСумма" + Строка(НомерПериода)]+ВыборкаТовары.Сумма;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ВыборкаУслуги.Сбросить();
	КонецЦикла;	
	Выборка.Сбросить();
	Шапка = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьТоварыДоПериода 			= Макет.ПолучитьОбласть("ТоварыДоПериода");
	ОбластьТоварыПослеПериода 		= Макет.ПолучитьОбласть("ТоварыПослеПериода");
	ОбластьТоварыШапкаДоПериода 	= Макет.ПолучитьОбласть("ТоварыШапкаДоПериода");
	ОбластьТоварыШапкаПослеПериода 	= Макет.ПолучитьОбласть("ТоварыШапкаПослеПериода");
	ОбластьШапкаТоварыПериоды 		= Макет.ПолучитьОбласть("ТоварыПериодыШапка");
	ОбластьТоварыПериоды 			= Макет.ПолучитьОбласть("ТоварыПериоды");
	ОбластьШапкаТоварыПроекты 		= Макет.ПолучитьОбласть("ШапкаТоварыПроекты");
	ОбластьТоварыПроекты 			= Макет.ПолучитьОбласть("ТоварыПроекты");
	ОбластьУслугиДоПериода 			= Макет.ПолучитьОбласть("УслугиДоПериода");
	ОбластьУслугиПослеПериода 		= Макет.ПолучитьОбласть("УслугиПослеПериода");
	ОбластьУслугиШапкаДоПериода 	= Макет.ПолучитьОбласть("УслугиШапкаДоПериода");
	ОбластьУслугиШапкаПослеПериода 	= Макет.ПолучитьОбласть("УслугиШапкаПослеПериода");
	ОбластьШапкаУслугиПериоды 		= Макет.ПолучитьОбласть("УслугиПериодыШапка");
	ОбластьУслугиПериоды 			= Макет.ПолучитьОбласть("УслугиПериоды");
	ОбластьШапкаУслугиПроекты 		= Макет.ПолучитьОбласть("ШапкаУслугиПроекты");
	ОбластьУслугиПроекты 			= Макет.ПолучитьОбласть("УслугиПроекты");
	
	Подвал 							= Макет.ПолучитьОбласть("Подвал");

	ОбластьСпейсера 				= Макет.ПолучитьОбласть("Спейсер");
	ТабличныйДокумент.Очистить();

	ВставлятьРазделительСтраниц 	= Ложь;
	Пока Выборка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		НомерСтрокиНачало 			= ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Шапка.Параметры.Заполнить(Выборка);
		Шапка.Параметры.ОрганизацияНаименование 	= Выборка.Организация.Наименование+?(ЗначениеЗаполнено(Выборка.СтруктурноеПодразделение),"/"+Выборка.СтруктурноеПодразделение.Наименование,"");
		Шапка.Параметры.ПодразделениеНаименование 	= ?(Выборка.ИсточникЗаявки=Перечисления.узп_ИсточникиЗаявокМТС.Подразделение,Выборка.Подразделение.Наименование,Выборка.ИсточникЗаявки);
		Шапка.Параметры.ПериодПланирования 			= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПредставлениеИнтервалаСтрокой(Выборка.ПериодПланирования,Выборка.Сценарий);
		ТабличныйДокумент.Вывести(Шапка, Выборка.Уровень());
		ТабличныйДокумент.Вывести(ОбластьСпейсера);
		ВыборкаТовары = Выборка.Товары.Выбрать();
		Если ВыборкаТовары.Количество()>0 Тогда
			ТабличныйДокумент.Вывести(ОбластьТоварыШапкаДоПериода);
			СекцияРодитель 			= ОбластьШапкаТоварыПериоды.ПолучитьОбласть("ТоварыПериодыШапка");
			Для НомерПериода = 1 По ПродолжительностьЦикла(Выборка.Сценарий) Цикл
				Секция 						= СекцияРодитель;
				Секция.Параметры["Период"] 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(ДобавитьМесяц(Выборка.ПериодПланирования,НомерПериода-1),Выборка.Сценарий);
				ТабличныйДокумент.Присоединить(Секция);
				СекцияРодитель 				= Секция.ПолучитьОбласть("ТоварыПериодыШапка");
			КонецЦикла;
			ТабличныйДокумент.Присоединить(ОбластьТоварыШапкаПослеПериода);		
			Если ПризнакПроекта Тогда
				ТабличныйДокумент.Присоединить(ОбластьШапкаТоварыПроекты);
			КонецЕсли;
			Для Каждого СтрокаТЧ из ТаблицаТовары Цикл
				ОбластьТоварыДоПериода.Параметры.Заполнить(СтрокаТЧ);
				ОбластьТоварыПослеПериода.Параметры.Заполнить(СтрокаТЧ);
				Если ЗначениеЗаполнено(ВыборкаТовары.Характеристика) Тогда
					ОбластьТоварыДоПериода.Параметры.Номенклатура = ВыборкаТовары.Номенклатура.Наименование + " / "+ВыборкаТовары.Характеристика.Наименование;
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьТоварыДоПериода, ВыборкаТовары.Уровень());
				СекцияРодитель = ОбластьТоварыПериоды.ПолучитьОбласть("ТоварыПериоды");
				Для НомерПериода = 1 По ПродолжительностьЦикла(Выборка.Сценарий) Цикл
					Секция = СекцияРодитель;
					Секция.Параметры["Сумма"] 		= СтрокаТЧ["ТоварыСумма"+НомерПериода];
					Секция.Параметры["Количество"] 	= СтрокаТЧ["ТоварыКоличество"+НомерПериода];
					Секция.Параметры["Цена"] 		= СтрокаТЧ["ТоварыЦена"+НомерПериода];
					ТабличныйДокумент.Присоединить(Секция, ВыборкаТовары.Уровень());
					СекцияРодитель 					= Секция.ПолучитьОбласть("ТоварыПериоды");
				КонецЦикла;
				ТабличныйДокумент.Присоединить(ОбластьТоварыПослеПериода, ВыборкаТовары.Уровень());
				Если ПризнакПроекта Тогда
					ОбластьТоварыПроекты.Параметры.Проект = СтрокаТЧ.Проект;
					ТабличныйДокумент.Присоединить(ОбластьТоварыПроекты);
				КонецЕсли;
			КонецЦикла;
			ТабличныйДокумент.Вывести(ОбластьСпейсера);
			КонецЕсли;
        //Услуги
		ВыборкаУслуги = Выборка.Услуги.Выбрать();
		Если ВыборкаУслуги.Количество()>0 Тогда	
			ТабличныйДокумент.Вывести(ОбластьУслугиШапкаДоПериода);
			СекцияРодитель 					= ОбластьШапкаУслугиПериоды.ПолучитьОбласть("УслугиПериодыШапка");
			Для НомерПериода = 1 По ПродолжительностьЦикла(Выборка.Сценарий) Цикл
				Секция = СекцияРодитель;
				Секция.Параметры["Период"] 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(ДобавитьМесяц(Выборка.ПериодПланирования,НомерПериода-1),Выборка.Сценарий);
				ТабличныйДокумент.Присоединить(Секция);
				СекцияРодитель 				= Секция.ПолучитьОбласть("УслугиПериодыШапка");
			КонецЦикла;
			ТабличныйДокумент.Присоединить(ОбластьУслугиШапкаПослеПериода);
			Если ПризнакПроекта Тогда
				ТабличныйДокумент.Присоединить(ОбластьШапкаУслугиПроекты);
			КонецЕсли;

			Для Каждого СтрокаТЧ из ТаблицаУслуги Цикл
				ОбластьУслугиДоПериода.Параметры.Заполнить(СтрокаТЧ);
				ОбластьУслугиПослеПериода.Параметры.Заполнить(СтрокаТЧ);
				Если ЗначениеЗаполнено(ВыборкаУслуги.Характеристика) Тогда
					ОбластьУслугиДоПериода.Параметры.Номенклатура = ВыборкаУслуги.Номенклатура.Наименование + " / "+ВыборкаУслуги.Характеристика.Наименование;
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьУслугиДоПериода, ВыборкаУслуги.Уровень());
				СекцияРодитель = ОбластьУслугиПериоды.ПолучитьОбласть("УслугиПериоды");
				Для НомерПериода = 1 По ПродолжительностьЦикла(Выборка.Сценарий) Цикл
					Секция = СекцияРодитель;
					Секция.Параметры["Сумма"] 		= СтрокаТЧ["УслугиСумма" + НомерПериода];
					Секция.Параметры["Количество"] 	= СтрокаТЧ["УслугиКоличество" + НомерПериода];
					Секция.Параметры["Цена"] 		= СтрокаТЧ["УслугиЦена" + НомерПериода];
					ТабличныйДокумент.Присоединить(Секция, ВыборкаТовары.Уровень());
					СекцияРодитель 					= Секция.ПолучитьОбласть("УслугиПериоды");
				КонецЦикла;
				ТабличныйДокумент.Присоединить(ОбластьУслугиПослеПериода, ВыборкаУслуги.Уровень());
				Если ПризнакПроекта Тогда
					ОбластьУслугиПроекты.Параметры.Проект = СтрокаТЧ.Проект;
					ТабличныйДокумент.Присоединить(ОбластьУслугиПроекты);
				КонецЕсли;
			КонецЦикла;
        КонецЕсли;
		Подвал.Параметры.Заполнить(Выборка);
		ТабличныйДокумент.Вывести(Подвал);
		ВставлятьРазделительСтраниц = Истина;
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
	КонецЦикла;	
		
	Возврат ТабличныйДокумент;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ДополнительныеПараметрыЗапросов = Новый Структура();
		
	ДополнительныеЗапросы = Новый Массив;
		
	ПараметрыПроведения = фин_УправлениеПроведениемДокументовСервер.ПодготовитьПараметрыПроведения(ДокументСсылка,Отказ,Истина,Истина,,,,,ДополнительныеПараметрыЗапросов,ДополнительныеЗапросы);
	
	
	Возврат ПараметрыПроведения;

КонецФункции 

////////////////////////////////////////////////////////////////////////////////
//

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ПользователиКлиентСервер.АвторизованныйПользователь(), "РедактированиеДокументовЗакупокВМатричномВиде") и ВидФормы = "ФормаОбъекта" Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаДокументаПоПериодам";
	КонецЕсли;
	
КонецПроцедуры

Функция ПродолжительностьЦикла(Сценарий)
	Запрос 		 = Новый Запрос;
	запрос.УстановитьПараметр("Ссылка", Сценарий);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СценарииПланирования.ПродолжительностьЦикла
	               |ИЗ
	               |	Справочник.СценарииПланирования КАК СценарииПланирования
	               |ГДЕ
	               |	СценарииПланирования.Ссылка = &Ссылка";
	Результат 	= Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	Возврат Результат.ПродолжительностьЦикла;
КонецФункции

Процедура ПроверитьНоменклатуруНаНаличиеПовторений(Отказ,ТЧ,ИмяТЧ, Объект) Экспорт
	Для Номер1 = 0 По ТЧ.Количество()-1 Цикл
		Для Номер2 = Номер1 + 1 По ТЧ.Количество()-1 Цикл
			Если ТЧ[номер1].Номенклатура = ТЧ[Номер2].Номенклатура 
				И ТЧ[номер1].Характеристика = ТЧ[Номер2].Характеристика Тогда
				Если НЕ ТЧ[Номер1].Приоритет = ТЧ[Номер2].Приоритет 
					И ТЧ[Номер1].Проект 			= ТЧ[Номер2].Проект 
					И ТЧ[Номер1].Подразделение 		= ТЧ[Номер2].Подразделение 
					И ТЧ[Номер1].ПериодПланирования = ТЧ[Номер2].ПериодПланирования Тогда
					Текст = "Номенклатура " + ТЧ[номер1].Номенклатура + ": нельзя планировать позицию по различным приоритетам!  см. строку № " + Строка(номер1 + 1) + ", " + Строка(номер2 + 1);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,Объект,ИмяТЧ + "["+Строка(Номер2) + "].Приоритет",,Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;			
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проверка табличных частей

Процедура ПроверитьТоварыУслуги(ЭтотОбъект, Отказ) Экспорт
	Товары 		= ЭтотОбъект.Товары;
	Услуги 		= ЭтотОбъект.Услуги;
	Заголовок 	= "";
	
	//Проверка что нет услуг в товарах
	Для каждого СтрокаТаблицы Из Товары Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + "Товары" + """: ";
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
		   И  СтрокаТаблицы.Номенклатура.Услуга Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + "содержится услуга. " +
				                   "Услуг здесь быть не должно!",,,,Отказ);
		КонецЕсли;
	КонецЦикла;
	//Проверка что нет товаров в услугах
	Для Каждого СтрокаТаблицы Из Услуги Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
        	                       """ табличной части """ + "Услуги" + """: ";
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
		   И  Не СтрокаТаблицы.Номенклатура.Услуга Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + "содержится номенклатура, не являющаяся услугой. " +
				                   "Здесь могут быть только услуги!",,,,Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проверка лимитов при проведении

Функция ПроверкаНаЛимиты(ЭтотОбъект) Экспорт
	Лимиты 					= ПолучитьПараметрыЛимитов(ЭтотОбъект);
	//Контроль по лимитам согласно сценария
	Если Лимиты.КонтрольПоЛимитам Тогда
		//Сводная таблица товаров и услуг
		ОбщаяТаблица 		= Новый ТаблицаЗначений;
		//загрузка сводной таблицы
		ЗагрузкаОбщейТаблицы(ОбщаяТаблица, ЭтотОбъект);
		
		ОшибкаЛимита 		= Ложь; 										//флаг ошибки лимитов
		МассивСообщений 	= Новый Массив;									//инициализация массива сообщений пользователю
		СписокНоменклатуры 	= ОбщаяТаблица.ВыгрузитьКолонку("Номенклатура");//список номенклатуры текущего документа
		СписокНоменклатуры.Добавить(ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		СписокНоменклатуры.Добавить(ПредопределенноеЗначение("Справочник.фин_ПлановаяНоменклатура.ПустаяСсылка"));
		СписокНоменклатуры.Добавить();
		мПериодичность 		= Строка(ЭтотОбъект.Сценарий.Периодичность); 	//периодичность сценария (Месяц,Квартал,Год)
		ДатаНачалоПериода 	= ЭтотОбъект.ПериодПланирования;				//Начало всего периода
		ДатаКонецПериода 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(ЭтотОбъект.ПериодПланирования,ЭтотОбъект.Сценарий);//конец всего периода
		//определение списка подразделений
		Если ЭтотОбъект.ИсточникЗаявки = Перечисления.узп_ИсточникиЗаявокМТС.Подразделение Тогда
			СписокПодразделений = Новый Массив;
			СписокПодразделений.Добавить(ЭтотОбъект.Подразделение);
		Иначе
			СписокПодразделений = ОбщаяТаблица.ВыгрузитьКолонку("Подразделение");
		КонецЕсли;
		//выгрузка в таблицу всей проведенной номенклатуры за период документа
		ТаблицаПроведеннойНоменклатуры = ПолучитьПроведеннуюНоменклатуру(ОбщаяТаблица,СписокНоменклатуры,мПериодичность,ДатаНачалоПериода,ДатаКонецПериода,СписокПодразделений, ЭтотОбъект);
		мСценарий 		 = Новый Массив;
		мСценарий.Добавить(ЭтотОбъект.Сценарий);
		мСценарий.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.ПустаяСсылка"));
		СписокФП 		 = Неопределено;
		Если Лимиты.НаОснованииБюджетов Тогда	
			Запрос 		 = Новый Запрос;
			Запрос.УстановитьПараметр("Подразделение",СписокПодразделений);
			Запрос.Текст = "ВЫБРАТЬ
			               |	узп_НастройкиНормированияОбъемовСнабжения.Подразделение,
			               |	узп_НастройкиНормированияОбъемовСнабжения.ФинансовыйПоказательНормированияСнабжения КАК ФинансовыйПоказатель,
						   |	узп_НастройкиНормированияОбъемовСнабжения.РежимНормирования
			               |ИЗ
			               |	РегистрСведений.узп_НастройкиНормированияОбъемовСнабжения КАК узп_НастройкиНормированияОбъемовСнабжения
			               |ГДЕ
			               |	узп_НастройкиНормированияОбъемовСнабжения.Подразделение В(&Подразделение)";
			СписокФП 	= Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФинансовыйПоказатель");
	    КонецЕсли;
		//получение норм
		НормыПодразделения = ПолучитьНормы(Лимиты,СписокПодразделений,мСценарий,СписокНоменклатуры,СписокФП, ЭтотОбъект);
		
		//Проверка на превышение лимита по номенклатурам
		ЛимитПроверкаПоНоменклатуре(Лимиты,ОшибкаЛимита,МассивСообщений,ОбщаяТаблица,ТаблицаПроведеннойНоменклатуры,НормыПодразделения, ЭтотОбъект);
		//ПроверкаНаЛимитыПоНоменклатурам(Лимиты,ОшибкаЛимита,МассивСообщений,ОбщаяТаблица);
		
		//проверка на превышение лимита по подразделению в целом
		ЛимитПроверкаПоПодразделению(Лимиты,ОшибкаЛимита,МассивСообщений,ОбщаяТаблица,ТаблицаПроведеннойНоменклатуры,НормыПодразделения, ЭтотОбъект);
		//ПроверкаНаЛимитыПоПодразделению(Лимиты,ОшибкаЛимита,МассивСообщений,ОбщаяТаблица);
		Для Каждого СообщениеИзМассива Из МассивСообщений Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеИзМассива);
		КонецЦикла;
		Если Не МассивСообщений.Количество()=0 Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

Функция ПолучитьПараметрыЛимитов(ЭтотОбъект)
	Лимиты = Новый Структура;
	Лимиты.Вставить("КонтрольПоЛимитам",Ложь);
	Лимиты.Вставить("НаОснованииБюджетов",Ложь);
	Лимиты.Вставить("КонтрольПоПодразделению",Ложь);
	Лимиты.Вставить("КонтрольПоНоменклатуре",Ложь);
	Лимиты.Вставить("ЛимитПоПодразделениюСумма", 0);
	Лимиты.Вставить("ЛимитПоПодразделениюКоличество", 0);
	Лимиты.Вставить("ЛимитПоНоменклатурам", Новый Массив);
	//Проверка на лимиты по заявкам
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	фин_УчетнаяПолитикаПоБюджетированиюСрезПоследних.Период,
	               |	фин_УчетнаяПолитикаПоБюджетированиюСрезПоследних.НормироватьОбъемыСнабжения,
	               |	фин_УчетнаяПолитикаПоБюджетированиюСрезПоследних.ИсточникПолученияНормСнабжения
	               |ИЗ
	               |	РегистрСведений.фин_УчетнаяПолитикаПоБюджетированию.СрезПоследних(&Дата, ) КАК фин_УчетнаяПолитикаПоБюджетированиюСрезПоследних";
	Запрос.УстановитьПараметр("Дата", ЭтотОбъект.ПериодПланирования);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Лимиты.КонтрольПоЛимитам=Результат.НормироватьОбъемыСнабжения;
		Если Результат.ИсточникПолученияНормСнабжения = Перечисления.узп_ИсточникиПолученияНормСнабжения.НаОснованииБюджетов Тогда
			Лимиты.НаОснованииБюджетов = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Лимиты;	
КонецФункции

Процедура ЗагрузкаОбщейТаблицы(ОбщаяТаблица, ЭтотОбъект)
	ТипыНоменклатуры = Новый Массив;
	ТипыНоменклатуры.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ТипыНоменклатуры.Добавить(Тип("СправочникСсылка.фин_ПлановаяНоменклатура"));
	ОбщаяТаблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов(ТипыНоменклатуры));
	ОбщаяТаблица.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ОбщаяТаблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ОбщаяТаблица.Колонки.Добавить("КоличествоПоПрочимЗаявкам", Новый ОписаниеТипов("Число"));
	ОбщаяТаблица.Колонки.Добавить("СуммаПоПрочимЗаявкам", Новый ОписаниеТипов("Число"));
	ОбщаяТаблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	ОбщаяТаблица.Колонки.Добавить("ПериодПланирования", Новый ОписаниеТипов("Дата"));
	Таблицы = Новый Массив;
	Таблицы.Добавить(ЭтотОбъект.Товары);
	Таблицы.Добавить(ЭтотОбъект.Услуги);
	Для Каждого ТаблицаНоменклатур Из Таблицы Цикл
		Для каждого СтрокаТЧ Из ТаблицаНоменклатур Цикл
			НоваяСтрока 					= ОбщаяТаблица.Добавить();
			НоваяСтрока.Номенклатура 		= СтрокаТЧ.Номенклатура;
			НоваяСтрока.Количество 			= СтрокаТЧ.Количество;
			НоваяСтрока.Сумма 				= СтрокаТЧ.Сумма;
			НоваяСтрока.Подразделение 		= ПолучитьПодразделениеТекущейСтроки(СтрокаТЧ, ЭтотОбъект);
			НоваяСтрока.ПериодПланирования 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаТЧ.ПериодПланирования,ЭтотОбъект.Сценарий);
		КонецЦикла;
	КонецЦикла;
	ОбщаяТаблица.Свернуть("Номенклатура,Подразделение,ПериодПланирования", "Количество,Сумма,КоличествоПоПрочимЗаявкам,СуммаПоПрочимЗаявкам");
КонецПроцедуры

Функция ПолучитьПроведеннуюНоменклатуру(ОбщаяТаблица,СписокНоменклатуры,мПериодичность,ДатаНачалоПериода,ДатаКонецПериода,СписокПодразделений, ЭтотОбъект)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаКонецПериода);
	Запрос.УстановитьПараметр("Номенклатура", 	СписокНоменклатуры);
	Запрос.УстановитьПараметр("Ссылка", 		ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Подразделение", 	СписокПодразделений);
	Запрос.УстановитьПараметр("ПриходРасход", 	Перечисления.узп_ВидыОборотовПоЗаказам.Заказано);
	Запрос.Текст ="ВЫБРАТЬ
	              |	узп_ЗаявкиМТС.Номенклатура,
	              |	узп_ЗаявкиМТС.ПериодПланирования,
				  |	узп_ЗаявкиМТС.Заявка,
				  |	узп_ЗаявкиМТС.Подразделение,
				  |	ЕСТЬNULL(узп_ЗаявкиМТС.СуммаОборот,0) КАК Сумма,
	              |	ЕСТЬNULL(узп_ЗаявкиМТС.КоличествоОборот,0) КАК Количество,
				  |	ЕСТЬNULL(узп_ЗаявкиМТС.СуммаОборот,0) КАК СуммаПоПрочимЗаявкам,
	              |	ЕСТЬNULL(узп_ЗаявкиМТС.КоличествоОборот,0) КАК КоличествоПоПрочимЗаявкам
	              |ИЗ
	              |	РегистрНакопления.узп_ЗаявкиМТС.Обороты(,,,ПериодПланирования МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, "+мПериодичность+") И КОНЕЦПЕРИОДА(&ДатаОкончания, "+мПериодичность+")
				  |												И Подразделение В(&Подразделение) И Заявка <> &Ссылка И ПриходРасход = &ПриходРасход) КАК узп_ЗаявкиМТС";
	НоменклатураПодразделения = Запрос.Выполнить().Выгрузить();
	Возврат НоменклатураПодразделения;
	
КонецФункции

Функция ПолучитьНормы(Лимиты,СписокПодразделений,мСценарий,СписокНоменклатуры,СписокФП, ЭтотОбъект)
	Если Лимиты.НаОснованииБюджетов Тогда
		БюджетированиеПоОрганизациям = Константы.фин_БюджетированиеПоОрганизациям.Получить();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаНачала",ЭтотОбъект.ПериодПланирования);
		Запрос.УстановитьПараметр("ДатаОкончания",фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(ЭтотОбъект.ПериодПланирования,ЭтотОбъект.Сценарий));
		Запрос.УстановитьПараметр("Номенклатура",СписокНоменклатуры);
		Запрос.УстановитьПараметр("Подразделение",СписокПодразделений);
		Запрос.УстановитьПараметр("Сценарий",мСценарий);
		Запрос.УстановитьПараметр("ФинансовыйПоказатель",СписокФП);
		Запрос.УстановитьПараметр("Организация",ЭтотОбъект.Организация);
		Запрос.Текст = "ВЫБРАТЬ
		               |	фин_ОборотыБюджетовОбороты.Сценарий,
		               |	фин_ОборотыБюджетовОбороты.Номенклатура,
		               |	ЕСТЬNULL(фин_ОборотыБюджетовОбороты.КоличествоОборот, 0) КАК Количество,
		               |	ЕСТЬNULL(фин_ОборотыБюджетовОбороты.СуммаУпрОборот, 0) КАК Сумма,
		               |	фин_ОборотыБюджетовОбороты.УправленческоеПодразделение КАК Подразделение,
		               |	фин_ОборотыБюджетовОбороты.ПериодПланирования КАК Период,
		               |	узп_НастройкиНормированияОбъемовСнабжения.РежимНормирования
		               |ИЗ
		               |	РегистрНакопления.фин_ОборотыБюджетов.Обороты(
		               |			,
		               |			,
		               |			,
		               |			ПериодПланирования МЕЖДУ &ДатаНачала И &ДатаОкончания
		              // |				И Номенклатура В (&Номенклатура)
		               |				И УправленческоеПодразделение В (&Подразделение)
		               |				И Сценарий В (&Сценарий)
		               |				И ФинансовыйПоказатель В (&ФинансовыйПоказатель)
					   |				"+?(БюджетированиеПоОрганизациям,"И Организация = &Организация","")+"
					   |				) КАК фин_ОборотыБюджетовОбороты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.узп_НастройкиНормированияОбъемовСнабжения КАК узп_НастройкиНормированияОбъемовСнабжения
		               |		ПО фин_ОборотыБюджетовОбороты.УправленческоеПодразделение = узп_НастройкиНормированияОбъемовСнабжения.Подразделение
		               |			И фин_ОборотыБюджетовОбороты.ФинансовыйПоказатель = узп_НастройкиНормированияОбъемовСнабжения.ФинансовыйПоказательНормированияСнабжения";
					   
		Результат = Запрос.Выполнить().Выгрузить();
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Подразделение", СписокПодразделений);
		Запрос.УстановитьПараметр("Сценарий", мСценарий);
		Запрос.УстановитьПараметр("Номенклатура",СписокНоменклатуры);
		Запрос.УстановитьПараметр("Дата",ЭтотОбъект.ПериодПланирования);
		Запрос.Текст = "ВЫБРАТЬ
		               |	узп_НормыСнабженияИЗакупаСрезПоследних.Подразделение,
		               |	узп_НормыСнабженияИЗакупаСрезПоследних.Номенклатура,
		               |	узп_НормыСнабженияИЗакупаСрезПоследних.Сценарий,
		               |	узп_НормыСнабженияИЗакупаСрезПоследних.КоличествоЗаявка КАК Количество,
		               |	узп_НормыСнабженияИЗакупаСрезПоследних.СуммаЗаявка КАК Сумма,
		               |	узп_НормыСнабженияИЗакупаСрезПоследних.Период,
		               |	ВЫБОР
		               |		КОГДА узп_НормыСнабженияИЗакупаСрезПоследних.КоличествоЗаявка > 0
		               |				И узп_НормыСнабженияИЗакупаСрезПоследних.СуммаЗаявка > 0
		               |			ТОГДА ""Все""
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА узп_НормыСнабженияИЗакупаСрезПоследних.КоличествоЗаявка > 0
		               |						И узп_НормыСнабженияИЗакупаСрезПоследних.СуммаЗаявка = 0
		               |					ТОГДА ЗНАЧЕНИЕ(Перечисление.Узп_РежимыНормированияОбъемовСнабжения.ПоКоличеству)
		               |				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.Узп_РежимыНормированияОбъемовСнабжения.ПоСумме)
		               |			КОНЕЦ
		               |	КОНЕЦ КАК РежимНормирования
		               |ИЗ
		               |	РегистрСведений.узп_НормыСнабженияИЗакупа.СрезПоследних(&Дата, ) КАК узп_НормыСнабженияИЗакупаСрезПоследних
		               |ГДЕ
		               |	узп_НормыСнабженияИЗакупаСрезПоследних.Подразделение В(&Подразделение)
		               |	И узп_НормыСнабженияИЗакупаСрезПоследних.Сценарий В(&Сценарий)";
		Результат = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	Возврат Результат;
КонецФункции

Процедура ЛимитПроверкаПоНоменклатуре(Лимиты,ОшибкаЛимита,МассивСообщений,ОбщаяТаблица,ТаблицаПроведеннойНоменклатуры,НормыПодразделения, ЭтотОбъект)
	Для Каждого СтрокаНоменклатура Из ОбщаяТаблица Цикл
		ДатаОкончания 		= СтрокаНоменклатура.ПериодПланирования;
		ДатаНачала 			= ОпределитьНачальнуюДатуПоСценарию(ЭтотОбъект.Сценарий,СтрокаНоменклатура.ПериодПланирования);
		КоличествоПроведенное 	= 0;
		СуммаПроведенное		= 0;
		КоличествоПоПрочимЗаявкам 	= 0;
		СуммаПоПрочимЗаявкам		= 0;
		
		НайденнаяПроведеннаяНоменклатура = ТаблицаПроведеннойНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура,Подразделение",СтрокаНоменклатура.Номенклатура,СтрокаНоменклатура.Подразделение));
		
		Для Каждого СтрокаНайденнойПроведеннойНоменклатуры Из НайденнаяПроведеннаяНоменклатура Цикл
			Если СтрокаНайденнойПроведеннойНоменклатуры.ПериодПланирования > ДатаНачала 
				И СтрокаНайденнойПроведеннойНоменклатуры.ПериодПланирования <= ДатаОкончания Тогда
				КоличествоПроведенное 	= КоличествоПроведенное + СтрокаНайденнойПроведеннойНоменклатуры.Количество;
				СуммаПроведенное 		= СуммаПроведенное + СтрокаНайденнойПроведеннойНоменклатуры.Сумма;
				КоличествоПоПрочимЗаявкам 	= КоличествоПоПрочимЗаявкам + СтрокаНайденнойПроведеннойНоменклатуры.Количество;
				СуммаПоПрочимЗаявкам		= СуммаПоПрочимЗаявкам + СтрокаНайденнойПроведеннойНоменклатуры.Сумма;
			КонецЕсли;
		КонецЦикла;
		
		КоличествоОбщее 	= КоличествоПроведенное + СтрокаНоменклатура.Количество;
		СуммаОбщее 			= СуммаПроведенное + СтрокаНоменклатура.Сумма;
		
		НайденныеНормыПодразделения = НормыПодразделения.НайтиСтроки(Новый Структура("Номенклатура, Подразделение",СтрокаНоменклатура.Номенклатура, СтрокаНоменклатура.Подразделение));
		Если Не НайденныеНормыПодразделения.Количество() = 0 Тогда 
			СтрокаНорм = НайденныеНормыПодразделения[0];
			ТекстОшибки = "";
			Если КоличествоОбщее > СтрокаНорм.Количество 
				И Не СтрокаНорм.Количество = 0 Тогда
				ОшибкаЛимита = Истина;
				ТекстОшибки = "количество";
			КонецЕсли;
			Если Не ТекстОшибки = "" Тогда
				ТекстСообщения = "Превышен лимит: подразделение """+СтрокаНоменклатура.Подразделение + 
				""", номенклатура """+СтрокаНоменклатура.Номенклатура + """, период " + 
				Формат(СтрокаНоменклатура.ПериодПланирования,"ДФ=""ММММ гггг""")+
				" "+ТРег(ТекстОшибки)+": запрошено "+?(ТекстОшибки = "сумма",СуммаОбщее,КоличествоОбщее)+?(ТекстОшибки = "сумма",?(СуммаПоПрочимЗаявкам=0,""," (в т. ч. по прочим заявкам "+СуммаПоПрочимЗаявкам+")"),?(КоличествоПоПрочимЗаявкам=0,""," (в т. ч. по прочим заявкам "+КоличествоПоПрочимЗаявкам+")"))+", разрешено "+?(ТекстОшибки = "сумма",СтрокаНорм.Сумма,СтрокаНорм.Количество)+" , превышение "+(?(ТекстОшибки = "сумма",СуммаОбщее,КоличествоОбщее)-?(ТекстОшибки = "сумма",СтрокаНорм.Сумма,СтрокаНорм.Количество));
				Если МассивСообщений.Найти(ТекстСообщения)=Неопределено ТОгда
					МассивСообщений.Добавить(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			ТекстОшибки = "";
			Если СуммаОбщее > СтрокаНорм.Сумма 
				И Не СтрокаНорм.Сумма = 0 Тогда
				ОшибкаЛимита = Истина;
				ТекстОшибки = "сумма";
			КонецЕсли;
			Если Не ТекстОшибки = "" Тогда
				ТекстСообщения = "Превышен лимит: подразделение """+СтрокаНоменклатура.Подразделение + 
				""", номенклатура """+СтрокаНоменклатура.Номенклатура + """, период " + 
				Формат(СтрокаНоменклатура.ПериодПланирования,"ДФ=""ММММ гггг""")+
				" "+ТРег(ТекстОшибки)+": запрошено "+?(ТекстОшибки = "сумма",СуммаОбщее,КоличествоОбщее)+?(ТекстОшибки = "сумма",?(СуммаПоПрочимЗаявкам=0,""," (в т. ч. по прочим заявкам "+СуммаПоПрочимЗаявкам+")"),?(КоличествоПоПрочимЗаявкам=0,""," (в т. ч. по прочим заявкам "+КоличествоПоПрочимЗаявкам+")"))+", разрешено "+?(ТекстОшибки = "сумма",СтрокаНорм.Сумма,СтрокаНорм.Количество)+" , превышение "+(?(ТекстОшибки = "сумма",СуммаОбщее,КоличествоОбщее)-?(ТекстОшибки = "сумма",СтрокаНорм.Сумма,СтрокаНорм.Количество));
				Если МассивСообщений.Найти(ТекстСообщения)=Неопределено ТОгда
					МассивСообщений.Добавить(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЛимитПроверкаПоПодразделению(Лимиты,ОшибкаЛимита,МассивСообщений,ОбщаяТаблица,ТаблицаПроведеннойНоменклатуры,НормыПодразделения, ЭтотОбъект)
	ОбщаяТаблица1 = ОбщаяТаблица.Скопировать();
	ОбщаяТаблица1.Свернуть("Подразделение, ПериодПланирования","Сумма,Количество");
	Для Каждого СтрокаНоменклатура Из ОбщаяТаблица1 Цикл
		ДатаОкончания 		= СтрокаНоменклатура.ПериодПланирования;
		ДатаНачала 			= ОпределитьНачальнуюДатуПоСценарию(ЭтотОбъект.Сценарий,СтрокаНоменклатура.ПериодПланирования);
		КоличествоПроведенное 	= 0;
		СуммаПроведенное		= 0;
		КоличествоПоПрочимЗаявкам 	= 0;
		СуммаПоПрочимЗаявкам		= 0;
		
		НайденнаяПроведеннаяНоменклатура = ТаблицаПроведеннойНоменклатуры.НайтиСтроки(Новый Структура("Подразделение",СтрокаНоменклатура.Подразделение));
		
		Для Каждого СтрокаНайденнойПроведеннойНоменклатуры Из НайденнаяПроведеннаяНоменклатура Цикл
			Если СтрокаНайденнойПроведеннойНоменклатуры.ПериодПланирования > ДатаНачала 
				И СтрокаНайденнойПроведеннойНоменклатуры.ПериодПланирования <= ДатаОкончания Тогда
				КоличествоПроведенное 	= КоличествоПроведенное + СтрокаНайденнойПроведеннойНоменклатуры.Количество;
				СуммаПроведенное 		= СуммаПроведенное + СтрокаНайденнойПроведеннойНоменклатуры.Сумма;
				КоличествоПоПрочимЗаявкам 	= КоличествоПоПрочимЗаявкам + СтрокаНайденнойПроведеннойНоменклатуры.Количество;
				СуммаПоПрочимЗаявкам		= СуммаПоПрочимЗаявкам + СтрокаНайденнойПроведеннойНоменклатуры.Сумма;
			КонецЕсли;
		КонецЦикла;
		
		КоличествоОбщее 	= КоличествоПроведенное + СтрокаНоменклатура.Количество;
		СуммаОбщее 			= СуммаПроведенное + СтрокаНоменклатура.Сумма;
		
		НормыПодразделения1 = НормыПодразделения.Скопировать();
		НормыПодразделения1.Свернуть("Номенклатура, Подразделение","Сумма,Количество");
		
		НайденныеНормыПодразделения = НормыПодразделения1.НайтиСтроки(Новый Структура("Номенклатура, Подразделение",, СтрокаНоменклатура.Подразделение));
		Если Не НайденныеНормыПодразделения.Количество() = 0 Тогда 
			СтрокаНорм = НайденныеНормыПодразделения[0];
			ТекстОшибки = "";
			Если КоличествоОбщее > СтрокаНорм.Количество 
				И Не СтрокаНорм.Количество = 0 Тогда
				ОшибкаЛимита = Истина;
				ТекстОшибки = "количество";
			КонецЕсли;
			Если Не ТекстОшибки = "" Тогда
				ТекстСообщения = "Превышен лимит: подразделение """+СтрокаНоменклатура.Подразделение + 
				""", период " + 
				Формат(СтрокаНоменклатура.ПериодПланирования,"ДФ=""ММММ гггг""")+
				" "+ТРег(ТекстОшибки)+": запрошено "+?(ТекстОшибки = "сумма",СуммаОбщее,КоличествоОбщее)+?(ТекстОшибки = "сумма",?(СуммаПоПрочимЗаявкам=0,""," (в т. ч. по прочим заявкам "+СуммаПоПрочимЗаявкам+")"),?(КоличествоПоПрочимЗаявкам=0,""," (в т. ч. по прочим заявкам "+КоличествоПоПрочимЗаявкам+")"))+", разрешено "+?(ТекстОшибки = "сумма",СтрокаНорм.Сумма,СтрокаНорм.Количество)+" , превышение "+(?(ТекстОшибки = "сумма",СуммаОбщее,КоличествоОбщее)-?(ТекстОшибки = "сумма",СтрокаНорм.Сумма,СтрокаНорм.Количество));
				Если МассивСообщений.Найти(ТекстСообщения)=Неопределено ТОгда
					МассивСообщений.Добавить(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			ТекстОшибки = "";
			Если СуммаОбщее > СтрокаНорм.Сумма 
				И Не СтрокаНорм.Сумма = 0 Тогда
				ОшибкаЛимита = Истина;
				ТекстОшибки = "сумма";
			КонецЕсли;
			Если Не ТекстОшибки = "" Тогда
				ТекстСообщения = "Превышен лимит: подразделение """+СтрокаНоменклатура.Подразделение + 
				""", период " + 
				Формат(СтрокаНоменклатура.ПериодПланирования,"ДФ=""ММММ гггг""")+
				" "+ТРег(ТекстОшибки)+": запрошено "+?(ТекстОшибки = "сумма",СуммаОбщее,КоличествоОбщее)+?(ТекстОшибки = "сумма",?(СуммаПоПрочимЗаявкам=0,""," (в т. ч. по прочим заявкам "+СуммаПоПрочимЗаявкам+")"),?(КоличествоПоПрочимЗаявкам=0,""," (в т. ч. по прочим заявкам "+КоличествоПоПрочимЗаявкам+")"))+", разрешено "+?(ТекстОшибки = "сумма",СтрокаНорм.Сумма,СтрокаНорм.Количество)+" , превышение "+(?(ТекстОшибки = "сумма",СуммаОбщее,КоличествоОбщее)-?(ТекстОшибки = "сумма",СтрокаНорм.Сумма,СтрокаНорм.Количество));
				Если МассивСообщений.Найти(ТекстСообщения)=Неопределено ТОгда
					МассивСообщений.Добавить(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьПодразделениеТекущейСтроки(СтрокаТЧ, ЭтотОбъект);
	Если ЭтотОбъект.ИсточникЗаявки = Перечисления.узп_ИсточникиЗаявокМТС.Подразделение Тогда
		мПодразделение = ЭтотОбъект.Подразделение;
	Иначе
		мПодразделение = СтрокаТЧ.Подразделение;
	КонецЕсли;
	Возврат мПодразделение;
КонецФункции

Функция ОпределитьНачальнуюДатуПоСценарию(Сценарий, Период)
	Если Сценарий.Периодичность = Перечисления.фин_Периодичность.День Тогда
		НачальнаяДата = Период - 86400;
	ИначеЕсли Сценарий.Периодичность = Перечисления.фин_Периодичность.Неделя Тогда
		НачальнаяДата = Период - 604800;
	ИначеЕсли Сценарий.Периодичность = Перечисления.фин_Периодичность.Декада тогда
		НачальнаяДата = Период - 864000;
	ИначеЕсли Сценарий.Периодичность = Перечисления.фин_Периодичность.Месяц тогда
		НачальнаяДата = ДобавитьМесяц(Период, -1);
	ИначеЕсли Сценарий.Периодичность = Перечисления.фин_Периодичность.Квартал тогда
		НачальнаяДата = ДобавитьМесяц(Период, -3);
	ИначеЕсли Сценарий.Периодичность = Перечисления.фин_Периодичность.Полугодие тогда
		НачальнаяДата = ДобавитьМесяц(Период, -6);
	ИначеЕсли Сценарий.Периодичность = Перечисления.фин_Периодичность.Год тогда
		НачальнаяДата = ДобавитьМесяц(Период, -12);
	КонецЕсли;
	Возврат НачальнаяДата;
КонецФункции

#КонецЕсли
