//// Строки, хранят реквизиты имеющие смысл только для бухгалтерского
// и налогового учетов, соответственно в случае если документ не
// отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем ДвиженияВыпускПродукцииУслугБУ;
Перем ТаблицаДвиженийВыпускБУ;

Перем ДвиженияВыпускПродукцииУслугНУ;
Перем ТаблицаДвиженийВыпускНУ; 

Перем Заголовок;
Перем мВалютаРегламентированногоУчета Экспорт;

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

//////////////////////////////////////////////////////////////////////////////////
//// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
 // Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	мСтрокаРеквизитыБухУчета = "Продукция.СчетБУ, СчетЗатратБУ";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти) Экспорт
		
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекущийПользователь);		
	
Конецпроцедуры	

// Процедура заполняет счета учета по бухгалтерскому и налоговому учету.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	Если ИмяТабЧасти = "ИспользованныеМатериалы" Тогда
		СчетПодстановкиБУ 	= СчетаУчета.СчетПередачиБУ;		
		СчетПодстановкиНУ 	= СчетаУчета.СчетПередачиНУ;
		ИмяРеквизитаБУ = "СчетУчетаБУ";
		ИмяРеквизитаНУ = "СчетУчетаНУ";		
	ИначеЕсли ИмяТабЧасти = "ВозвращенныеМатериалы"  Тогда
		СчетПодстановкиБУ 	= СчетаУчета.СчетПередачиБУ;		
		СчетПодстановкиНУ 	= СчетаУчета.СчетПередачиНУ;		
		ИмяРеквизитаБУ = "СчетУчетаБУ";
		ИмяРеквизитаНУ = "СчетУчетаНУ";
		СтрокаТЧ.СчетУчетаБУ    	= СчетаУчета.СчетПередачиБУ;
		СтрокаТЧ.СчетПередачиБУ    	= СчетаУчета.СчетУчетаБУ;
		
		СтрокаТЧ.СчетУчетаНУ    	= СчетаУчета.СчетПередачиНУ;
		СтрокаТЧ.СчетПередачиНУ    	= СчетаУчета.СчетУчетаНУ;

	Иначе
		СчетПодстановкиБУ 	= СчетаУчета.СчетУчетаБУ;				
		СчетПодстановкиНУ 	= СчетаУчета.СчетУчетаНУ;				
		ИмяРеквизитаБУ = "СчетБУ";		
		ИмяРеквизитаНУ = "СчетНУ";
	КонецЕсли;	
	
	Если ЗаполнятьБУ = Истина Тогда
		СтрокаТЧ[ИмяРеквизитаБУ] = СчетПодстановкиБУ;	
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		СтрокаТЧ[ИмяРеквизитаБУ] = ПланыСчетов.Типовой.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяРеквизитаНУ) Тогда
		Если ЗаполнятьНУ = Истина Тогда
			СтрокаТЧ[ИмяРеквизитаНУ] = СчетПодстановкиНУ;	
		ИначеЕсли ЗаполнятьНУ = Ложь Тогда
			СтрокаТЧ[ИмяРеквизитаНУ] = ПланыСчетов.Налоговый.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Процедура заполняет счета БУ и НУ в табличной части.
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	Для Каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
		
	КонецЦикла;

КонецПроцедуры // обЗаполнитьСчетаУчетаВТабЧасти()

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) экспорт
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	ДокументОснование = Основание.Ссылка;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		Если Основание.ПодтвержденДокументамиОтгрузки Тогда
			#Если Клиент Тогда
				Если Основание.ПодтвержденДокументамиОтгрузки Тогда
					Сообщить("Данные счет-фактуры уже подтверждены документами отгрузки! Ввод на основании не возможен!", СтатусСообщения.Важное);				
				КонецЕсли;				
			#КонецЕсли
			Возврат;       		
		КонецЕсли;  
		        			
		Дата = Основание.ДатаСовершенияОборотаПоРеализации;
		
		УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(ЭтотОбъект, Основание.Ссылка);
		
		ПлательщикНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата);
		
		Если НЕ ПлательщикНДС И Основание.УчитыватьНДС И НЕ Основание.СуммаВключаетНДС Тогда
			УчестьСуммуНДС = Истина;
		Иначе
			УчестьСуммуНДС = Ложь;
		КонецЕсли;

		Для каждого СтрокаТабличнойЧасти Из Услуги Цикл
			ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти);	
			СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура);
			СтрокаТабличнойЧасти.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
			
			Если УчестьСуммуНДС Тогда
				СтрокаТабличнойЧасти.Сумма    = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
				СтрокаТабличнойЧасти.СуммаНДС = 0;
				СтрокаТабличнойЧасти.Цена = Окр(?(СтрокаТабличнойЧасти.Количество = 0, СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество),2);
			КонецЕсли;

		КонецЦикла;
		
		СчетЗатратБУ  = ПланыСчетов.Типовой.ОсновноеПроизводство;
		
   		УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(ЭтотОбъект, , , Дата);
		
		СчетаУчета 	= УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
		СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;

	КонецЕсли;
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Склад, ПодразделениеОрганизации, СчетЗатратБУ, Контрагент, ДоговорКонтрагента,  НоменклатурнаяГруппа");
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		СтруктураОбязательныхПолей.Вставить("СчетЗатратНУ");		
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда			
		СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");
	КонецЕсли;

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверим на возможность проведения в БУ и НУ
	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента, Отказ, Заголовок);


КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт

	РеквизитыТабПродукция = "Номенклатура,Количество,СчетБУ, СуммаПлановая";
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ И СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
        РеквизитыТабПродукция = РеквизитыТабПродукция + ", СчетНУ";
	КонецЕсли;
	
	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабПродукция, мСтрокаРеквизитыБухУчета, "Продукция");
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Продукция", Новый Структура(РеквизитыТабПродукция), Отказ, Заголовок);
	
	РеквизитыТабПродукция = Новый Структура("Номенклатура,Количество,СчетУчетаБУ");
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		РеквизитыТабПродукция.Вставить("СчетУчетаНУ");
	КонецЕсли;		
	
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ИспользованныеМатериалы", РеквизитыТабПродукция, Отказ, Заголовок);
КонецПроцедуры // ПроверкаРеквизитов()

Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Сумма");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость И НЕ ОтложитьПринятиеНДСКЗачету Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
		КонецЕсли;	
		
		Если  НЕ ОтложитьПринятиеНДСКЗачету Тогда
			СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
			СтруктураОбязательныхПолей.Вставить("НДСВидОборота");
			СтруктураОбязательныхПолей.Вставить("НДСВидПоступления");
		КонецЕсли;
		
	КонецЕсли;   

	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента)

	ТаблицаПоУслугам = РезультатЗапросаПоУслугам.Выгрузить();
	
	Возврат ТаблицаПоУслугам;

КонецФункции // ПодготовитьТаблицуУслуг()

// Процедура формирует движения регистров по табличной части Продукция
////
Процедура ДвиженияПоТабличнойЧастиПродукция(ТаблицаПоПродукции, СтруктураШапкиДокумента, СтратегииСписания)
 
	Если Продукция.Количество() = 0 И Услуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ОперацияБУ = Движения["Типовой"];
	ОперацияНУ = Движения["Налоговый"];
	ДвиженияВыпускПродукцииУслугБУ = Движения["ВыпускПродукцииУслугБухгалтерскийУчет"];
	ТаблицаДвиженийВыпускБУ        = ДвиженияВыпускПродукцииУслугБУ.Выгрузить();
	ДвиженияВыпускПродукцииУслугНУ = Движения["ВыпускПродукцииУслугНалоговыйУчет"];
	ТаблицаДвиженийВыпускНУ        = ДвиженияВыпускПродукцииУслугНУ.Выгрузить();

	Для Каждого Строка Из ТаблицаПоПродукции Цикл

		ДвиженияПоВыпускуПродукцииОтходов(Строка, ОперацияБУ, ТаблицаДвиженийВыпускБУ, Истина, Ложь, СтратегииСписания);	
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ И СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
			ДвиженияПоВыпускуПродукцииОтходов(Строка, ОперацияНУ, ТаблицаДвиженийВыпускНУ, Ложь, Истина, СтратегииСписания);		
		КонецЕсли;
	КонецЦикла;    		

	ДвиженияВыпускПродукцииУслугБУ.мПериод = Дата;
	ДвиженияВыпускПродукцииУслугБУ.мТаблицаДвижений = ТаблицаДвиженийВыпускБУ;
	
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ И СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
		ДвиженияВыпускПродукцииУслугНУ.мПериод = Дата;
		ДвиженияВыпускПродукцииУслугНУ.мТаблицаДвижений = ТаблицаДвиженийВыпускНУ;
	КонецЕсли;

КонецПроцедуры // ДвиженияПоТабличнойЧастиПродукция()

// Процедура формирует движения регистров по табличной части Услуги
////
Процедура ДвиженияПоТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ)

	Если ТаблицаПоУслугам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// зачет авансов
	ТаблицаАвансов = УправлениеВзаиморасчетами.ЗачетАванса(ЭтотОбъект,СтруктураШапкиДокумента,СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета, Новый Структура("ТаблицаПоУслугам",	ТаблицаПоУслугам) , Отказ,Заголовок,"АВ", мУчетнаяПолитикаПоБухгалтерскомуУчету);

	ПроводкиБУ = Движения["Типовой"];
	ПроводкиНУ = Движения["Налоговый"];
	
	ДатаДока = СтруктураШапкиДокумента.Дата;
	
	Для каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период       = Дата;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание   = "Отнесение на затраты услуги по переработке";
		Проводка.Сумма        = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт       = СтруктураШапкиДокумента.СчетЗатратБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтруктураШапкиДокумента.ПодразделениеОрганизации);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтруктураШапкиДокумента.НоменклатурнаяГруппа);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтрокаТаблицы.СтатьяЗатрат);
		
		Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",Ссылка);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;
		КонецЕсли;
		
		// Проводка по НДС
		Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС > 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = СтрокаТаблицы.НДС;
			
			Если СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету Тогда
				Проводка.СчетДт       = ПланыСчетов.Типовой.НДСНачисленныйПриПокупке;
				Проводка.Содержание   = "Отложенное принятие НДС к зачету"; 
			Иначе
				Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаНДС;
				Проводка.Содержание   = "Выделен НДС";
			КонецЕсли;  
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);

			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.НДСВал;
			КонецЕсли;
			
		КонецЕсли; // Проводка по НДС
		
		//Фиксация выручки по НУ (проводки)
		// Налоговый учет
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда		
			
				// Выручка
				Если СтрокаТаблицы.Сумма= 0 Тогда
					Продолжить;
				КонецЕсли;
												
				Проводка = ПроводкиНУ.Добавить();
				
				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = СтрокаТаблицы.СуммаБезНДС;
				Проводка.Содержание   = "Отнесение на затраты услуги по переработке";
				
				Проводка.СчетДт       = СтруктураШапкиДокумента.СчетЗатратНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтруктураШапкиДокумента.ПодразделениеОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтруктураШапкиДокумента.НоменклатурнаяГруппа);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтрокаТаблицы.СтатьяЗатрат);
				
				Проводка.СчетКт       = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",Ссылка);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				Проводка.Сумма        = СтрокаТаблицы.Сумма; 
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, ВидУчетаНУ);
				
				// Проводка по НДС
				Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС > 0 Тогда
					
					ПроводкаНУ = ПроводкиНУ.Добавить();
					
					ПроводкаНУ.Период       = Дата;
					ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
					ПроводкаНУ.Сумма        = СтрокаТаблицы.НДС;
					
					Если  СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету Тогда
						ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКНачислениюНУ(ПланыСчетов.Типовой.НДСНачисленныйПриПокупке, Дата);					
						ПроводкаНУ.Содержание   = "Отложенное принятие НДС к зачету"; 
					Иначе
						ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКВозмещениюНУ(СтрокаТаблицы.СчетУчетаНДС, Дата);					
						ПроводкаНУ.Содержание   = "Выделен НДС";
					КонецЕсли;   					
					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
					
					ПроводкаНУ.СчетКт       = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					ПРоцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);					
				КонецЕсли;				
			КонецЕсли; 
		КонецЦикла;		
		
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		ПроцедурыБухгалтерскогоУчета.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли; // Учет курсовых разниц
	
КонецПроцедуры // ДвиженияПоТабличнойЧастиУслуги()
		
// Процедура формирует движения по выпуску продукции.
//
Процедура ДвиженияПоВыпускуПродукцииОтходов(Строка, Операция, ТаблицаДвиженийВыпуск, ПризнакБухгалтерскогоУчета, ПризнакНалоговогоУчета, СтратегииСписания)

	Если ПризнакБухгалтерскогоУчета Тогда
		Счет                		= Строка.СчетБУ;
		СчетЗатратТекущий   		= СчетЗатратБУ;
		СчетЗатратТекущийРегистра 	= СчетЗатратБУ; 		
	КонецЕсли;
	
	Если ПризнакНалоговогоУчета Тогда
		Счет                		= Строка.СчетНУ;
		СчетЗатратТекущий   		= СчетЗатратНУ;
		СчетЗатратТекущийРегистра 	= СчетЗатратНУ; 		
	КонецЕсли;
	       	
	// Сформируем проводку.
	Если НЕ ЗначениеЗаполнено(Счет)
	 ИЛИ НЕ ЗначениеЗаполнено(СчетЗатратТекущий) Тогда
		Возврат;
	КонецЕсли;

	НоваяПроводка = Операция.Добавить();

	НоваяПроводка.Организация = Организация;
	НоваяПроводка.Период      = Дата;

	НоваяПроводка.СчетДт = Счет;
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Номенклатура", Строка.Номенклатура);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Склады",       Склад);
	
		
	ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				НоваяПроводка, СтруктурноеПодразделение, СтруктурноеПодразделение);
	
	Если ПризнакБухгалтерскогоУчета Тогда
		// если нет соответствия стратегии выбранному счету, добавим значение
		Если СтратегииСписания.Получить(НоваяПроводка.СчетДт) = Неопределено Тогда
			
			СтратегииСписания.Вставить(НоваяПроводка.СчетДт, УправлениеЗапасами.ВедетсяПартионныйУчетДляСчета(НоваяПроводка.СчетДт));
			
		КонецЕсли;
		
		ВедетсяПартионныйУчетДляСчета = СтратегииСписания.Получить(НоваяПроводка.СчетДт);
		
		Если ВедетсяПартионныйУчетДляСчета Тогда
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Партии",  Ссылка,, Заголовок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяПроводка.Содержание = "Выпуск продукции";
	
	НоваяПроводка.СчетКт = СчетЗатратТекущий;
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        ПодразделениеОрганизации);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", НоменклатурнаяГруппа);
	
	НоваяПроводка.КоличествоДт = ?(НоваяПроводка.СчетДТ.Количественный, Строка.Количество, 0);
	НоваяПроводка.Сумма        = Строка.СуммаПлановая;
	
	Если ПризнакНалоговогоУчета Тогда
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(НоваяПроводка, ВидУчетаНУ);	
	КонецЕсли;

	// Отражения выпуска в регистре накопления ВыпускПродукцииУслуг
	СтрокаДвижения = ТаблицаДвиженийВыпуск.Добавить();
	СтрокаДвижения.Организация           = Организация;
	СтрокаДвижения.Продукция             = Строка.Номенклатура;
	СтрокаДвижения.СчетЗатрат            = СчетЗатратТекущийРегистра;
	СтрокаДвижения.Подразделение         = ПодразделениеОрганизации;
	СтрокаДвижения.НоменклатурнаяГруппа  = НоменклатурнаяГруппа;
	СтрокаДвижения.СчетСписания          = Счет;
	
	СтрокаДвижения.СтруктурноеПодразделение = СтруктурноеПодразделение;
				
	Если Счет.ВидыСубконто.Количество() > 0 Тогда
		СтрокаДвижения.СубконтоСписания1 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[0].ВидСубконто];
	КонецЕсли; 
	
	Если Счет.ВидыСубконто.Количество() > 1 Тогда
		СтрокаДвижения.СубконтоСписания2 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[1].ВидСубконто];
	КонецЕсли;
	
	Если Счет.ВидыСубконто.Количество() > 2 Тогда
		СтрокаДвижения.СубконтоСписания3 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[2].ВидСубконто];
	КонецЕсли;
	
	Если ПризнакНалоговогоУчета Тогда
		СтрокаДвижения.ВидУчета        = НоваяПроводка.ВидУчетаКт;
	КонецЕсли;
			
	СтрокаДвижения.Количество = Строка.Количество;
	СтрокаДвижения.ПлановаяСтоимость = Строка.СуммаПлановая;
	
КонецПроцедуры // ДвиженияПоВыпускуПродукцииОтходов()


//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ НДС

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по регистрам подсистемы учета НДС "НДСКВозмещению"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаДокумента, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок)
	
	Если Не ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	// Работа со структурными подразделениями
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПлательщикНДС 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
																	СтруктураШапкиДокумента.Организация,
																	глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	Перечисления.РазделыНалоговогоУчета.НДС);
	Иначе
		ПлательщикНДС 	= СтруктураШапкиДокумента.Организация;															
	КонецЕсли;																
	
	СтруктураШапкиДокумента.Вставить("ПлательщикНДС", ПлательщикНДС);
    		
	УчетНДСИАкциза.СформироватьДвиженияПоРегиструНДСКВозмещению(СтруктураШапкиДокумента, ТаблицаДокумента, Движения, Отказ, ТаблицаПоУчастникамСовместнойДеятельности);	
		
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьМХ18()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеИзПереработки.Номер КАК Номер,
	|	ПоступлениеИзПереработки.Дата КАК ДатаДокумента,
	|	ПоступлениеИзПереработки.Организация КАК Организация,
	|   ПоступлениеИзПереработки.СтруктурноеПодразделение,
	|	ПоступлениеИзПереработки.ПодразделениеОрганизации КАК Подразделение,
	|	ПоступлениеИзПереработки.Склад КАК Склад,
	|	ОтветственныеЛицаСклад.ФизическоеЛицо КАК МОЛ,
	|	ПоступлениеИзПереработки.СчетЗатратБУ КАК КоррСчет
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК ПоступлениеИзПереработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСклад
	|		ПО ПоступлениеИзПереработки.Склад = ОтветственныеЛицаСклад.СтруктурнаяЕдиница
	|ГДЕ
	|	ПоступлениеИзПереработки.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеИзПереработки.Номенклатура,
	|	ПоступлениеИзПереработки.Номенклатура.Код КАК ТоварКод,
	|	ПоступлениеИзПереработки.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ПоступлениеИзПереработки.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	СУММА(ПоступлениеИзПереработки.Количество) КАК Количество,
	|	СУММА(ПоступлениеИзПереработки.СуммаПлановая) КАК СуммаПлановая,
	|	МИНИМУМ(ПоступлениеИзПереработки.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ПоступлениеИзПереработки.Продукция КАК ПоступлениеИзПереработки
	|ГДЕ
	|	ПоступлениеИзПереработки.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеИзПереработки.Номенклатура,
	|	ПоступлениеИзПереработки.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	ПоступлениеИзПереработки.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	ПоступлениеИзПереработки.Номенклатура.Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
	
	ТабДокумент  = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;

	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеИзПереработки_МХ18";

	Макет = ПолучитьМакет("МХ18");

	// Выводим общие реквизиты шапки
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	ОбластьМакета.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
	
	Если НЕ СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка() Тогда
		Если ТипЗнч(СтруктурнаяЕдиницаОрганизация) = Тип("СправочникСсылка.Организации") Тогда
			ОбластьМакета.Параметры.ПредставлениеОрганизации   = Шапка.Организация.НаименованиеПолное;
			ОбластьМакета.Параметры.ОрганизацияПоОКПО          = Шапка.Организация.КодПоОКПО;
    	Иначе
			ОбластьМакета.Параметры.ПредставлениеОрганизации   = СтруктурноеПодразделение.НаименованиеПолное;
			ОбластьМакета.Параметры.ОрганизацияПоОКПО          = Шапка.СтруктурноеПодразделение.КодПоОКПО;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ПредставлениеПодразделения = Шапка.СтруктурноеПодразделение;
	Иначе
		Если мОтображатьСтруктурныеПодразделения Тогда
			ОбластьМакета.Параметры.ПредставлениеПодразделения = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		Иначе			
			ОбластьМакета.Параметры.ПредставлениеПодразделения = Шапка.Подразделение;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ПредставлениеОрганизации   = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ОрганизацияПоОКПО          = Шапка.Организация.КодПоОКПО;
	КонецЕсли;

	ОбластьМакета.Параметры.Получатель = Шапка.Склад;
	ОбластьМакета.Параметры.КоррСчет = Шапка.КоррСчет;
	
	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 20;
	СтрокШапки      = 10;
	СтрокПодвала    = 9;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ЗапросТовары.Количество();

	Если КоличествоСтрок <= 2 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогоМассаБруттоНаСтранице = 0;
	ИтогоКоличествоНаСтранице  = 0;

	// инициализация итогов по документу
	ИтогоМассаБрутто = 0;
	ИтогоКоличество  = 0;
	Ном              = 0;
    ИтогСумма        = 0;
	
	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном           = Ном + 1;
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			// очистим итоги по странице
			ИтогоМассаБруттоНаСтранице = 0;
			ИтогоКоличествоНаСтранице  = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.Номенклатура.НаименованиеПолное);
        ОбластьМакета.Параметры.Цена  = ?(ВыборкаСтрок.Количество = 0, 0, ВыборкаСтрок.СуммаПлановая / ВыборкаСтрок.Количество);
		ОбластьМакета.Параметры.Сумма = ВыборкаСтрок.СуммаПлановая;

		Количество  = ВыборкаСтрок.Количество;
		
		ТабДокумент.Вывести(ОбластьМакета);

		// увеличим итоги по странице
		ИтогоМассаБруттоНаСтранице = 0;
		ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + Количество;
        ИтогСумма                  = ИтогСумма                  + ВыборкаСтрок.СуммаПлановая;
		// увеличим итоги по дукументу
		ИтогоМассаБрутто = 0;
		ИтогоКоличество  = ИтогоКоличество  + Количество;

	КонецЦикла;

	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
	ОбластьМакета.Параметры.ИтогМест        = "";
	ОбластьМакета.Параметры.ИтогКоличество  = ИтогоКоличество;
    ОбластьМакета.Параметры.ИтогСуммы       = ИтогСумма;

	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");

	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакета.Параметры.ИтогСуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогСумма, Константы.ВалютаРегламентированногоУчета.Получить());
	
	// заполняем МОЛ
	Если ЗначениеЗаполнено(Шапка.Склад) Тогда
		ДанныеМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Организация, Шапка.МОЛ, Дата);
		ОбластьМакета.Параметры.Получил = ДанныеМОЛ.Представление;
		ОбластьМакета.Параметры.ДолжностьПолучил = ДанныеМОЛ.Должность;
	КонецЕсли;	
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьМХ18()
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "МХ18" Тогда
		ТабДокумент = ПечатьМХ18();
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
	
КонецПроцедуры // Печать
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("МХ18", "Накладная на передачу");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ
// Процедура - обработчик события "ОбработкаПроведения"
////
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"          , "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"          , "ВидДоговора");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, );

	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);		
	ВедениеУчетаВременныхРазницБалансовымМетодом = ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);
	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 	ВедениеУчетаВременныхРазницБалансовымМетодом);
	
	// Проверка заполнены ли все необходимые реквизиты шакпи.
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	// Проверка заполнены ли все необходимые реквизиты табличной части.
	ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"      , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"            , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"        , "Количество");
	СтруктураПолей.Вставить("СуммаПлановая"     , "СуммаПлановая");
	СтруктураПолей.Вставить("СчетБУ"            , "СчетБУ");	
	СтруктураПолей.Вставить("СчетНУ"            , "СчетНУ");
	СтруктураПолей.Вставить("НомерГТД"          , "НомерГТД");
		
	РезультатЗапросаПоТаблицеПродукция = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураПолей);
	ТаблицаПоПродукции = РезультатЗапросаПоТаблицеПродукция.Выгрузить();
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"      , "Номенклатура");
	СтруктураПолей.Вставить("Количество"        , "Количество");
	СтруктураПолей.Вставить("Сумма"             , "Сумма");
	СтруктураПолей.Вставить("СчетЗатратБУ"      , "Ссылка.СчетЗатратБУ");
	СтруктураПолей.Вставить("СчетЗатратНУ"      , "Ссылка.СчетЗатратНУ");
	СтруктураПолей.Вставить("СтатьяЗатрат"      , "СтатьяЗатрат");
	СтруктураПолей.Вставить("СтавкаНДС"         , "СтавкаНДС");
	СтруктураПолей.Вставить("СчетУчетаНДС"      , "СчетУчетаНДС");
	СтруктураПолей.Вставить("НДС"               , "СуммаНДС");
	СтруктураПолей.Вставить("НДСВидОборота"     , "НДСВидОборота");
	СтруктураПолей.Вставить("НДСВидПоступления" , "НДСВидПоступления");
	СтруктураПолей.Вставить("Содержание"        , "Содержание");
	СтруктураПолей.Вставить("Услуга"            , "Номенклатура.Услуга");

	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);
	
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость);
	
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("НомерСтроки"       , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"      , "Номенклатура");
	СтруктураПолей.Вставить("Количество"        , "Количество");
	СтруктураПолей.Вставить("СчетУчетаБУ"       , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"       , "СчетУчетаНУ");
	СтруктураПолей.Вставить("СтатьяЗатрат"      , "СтатьяЗатрат");
	
	РезультатЗапросаПоМатериалам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ИспользованныеМатериалы", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаМатериалов = ПодготовитьТаблицуТоваров(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента);

	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("НомерСтроки"       , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"      , "Номенклатура");
	СтруктураПолей.Вставить("Количество"        , "Количество");
	СтруктураПолей.Вставить("СчетУчетаБУ"       , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетПередачиБУ"    , "СчетПередачиБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"       , "СчетУчетаНУ");
	СтруктураПолей.Вставить("СчетПередачиНУ"    , "СчетПередачиНУ");
	СтруктураПолей.Вставить("НомерГТД"          , "НомерГТД");
		
	РезультатЗапросаПоВозвращеннымМатериалам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвращенныеМатериалы", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаВозвращенныхМатериалов = ПодготовитьТаблицуВозвратов(РезультатЗапросаПоВозвращеннымМатериалам, СтруктураШапкиДокумента);
	
	// Проверим, что в табличной части продукция не указаны услуги.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Продукция", ТаблицаПоПродукции, Отказ, Заголовок);
	
	// Подготовим таблицу УчастникиСовместнойДеятельности для проведения.
	ТаблицаПоУчастникамСовместнойДеятельности = ОбщегоНазначения.СформироватьТаблицуУчастниковСовместнойДеятельности(УчастникиСовместнойДеятельности);

	Если НЕ Отказ Тогда // Формирование движений регистров
		
		// Очистим движения регистров.
		Для Каждого Движение Из Движения Цикл
			Движение.Очистить();
			Движение.Записать(Истина);
		КонецЦикла;

		// чтобы для каждой строки не выполнять запрос по стратегии списания для счета
		// добавим соответствие [Счет, СтратегияСписания]
		СтратегииСписания = Новый Соответствие;


		ДвиженияПоТабличнойЧастиПродукция(ТаблицаПоПродукции, СтруктураШапкиДокумента, СтратегииСписания);
		ДвиженияПоТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ);
		
		Если Не ТаблицаВозвращенныхМатериалов.Количество() = 0 Тогда
			
			ТаблицаМатериалов.Колонки.Добавить("СчетПередачиБУ");
			ТаблицаМатериалов.Колонки.Добавить("СодержаниеПроводки"); 
		
			ТаблицаМатериалов.Колонки.Добавить("НеПроводитьВНУ"); 
			ТаблицаМатериалов.ЗаполнитьЗначения( Не СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом, "НеПроводитьВНУ");
			
			ТаблицаВозвращенныхМатериалов.Колонки.Добавить("СодержаниеПроводки");
			ТаблицаВозвращенныхМатериалов.ЗаполнитьЗначения("Возврат сырья из переработки", "СодержаниеПроводки");
			
			ТаблицаВозвращенныхМатериалов.Колонки.Добавить("НеПроводитьВНУ");
			ТаблицаВозвращенныхМатериалов.ЗаполнитьЗначения( Не СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом, "НеПроводитьВНУ");
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаВозвращенныхМатериалов, ТаблицаМатериалов);
		КонецЕсли;

		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаМатериалов, Истина, СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ, Отказ);
		
		Если Не ОтложитьПринятиеНДСКЗачету Тогда
			ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок);
		КонецЕсли;
				
		Если ТаблицаПоПродукции.Количество() <> 0 Или ТаблицаПоУслугам.Количество() <> 0 Тогда
			ДвиженияВыпускПродукцииУслугБУ.ДобавитьДвижение();
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ И СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
				ДвиженияВыпускПродукцииУслугНУ.ДобавитьДвижение();
			КонецЕсли; 			
		КонецЕсли;
		
		ПроводкиБУ = Движения.Типовой;
		
		// Движения по регистру накопления ТоварыОрганизацийБУ
		НомераГТДСервер.СформироватьДвиженияТоварыОрганизацийПриход(ТаблицаПоПродукции           , СтруктураШапкиДокумента, Движения, Отказ);
		НомераГТДСервер.СформироватьДвиженияТоварыОрганизацийПриход(ТаблицаВозвращенныхМатериалов, СтруктураШапкиДокумента, Движения, Отказ);
	
	КонецЕсли;
	
	Если Не Отказ Тогда
		УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Истина, "СчетФактураПолученный");
	КонецЕсли;
	
	Если Не Отказ Тогда			
		ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	Если  НЕ Отказ Тогда
		УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Ложь, "СчетФактураПолученный");
	КонецЕсли;	
КонецПроцедуры

Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаМатериалов = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаМатериалов.Колонки.Добавить("ДокументОприходования");
	ТаблицаМатериалов.Колонки.Добавить("Регистратор");
	ТаблицаМатериалов.Колонки.Добавить("Склад");
	ТаблицаМатериалов.Колонки.Добавить("Организация");
	
	ТаблицаМатериалов.Колонки.Добавить("СтруктурноеПодразделение");
		
	ТаблицаМатериалов.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаМатериалов.Колонки.Добавить("ДоговорПоставщика");
	
	ТаблицаМатериалов.Колонки.Добавить("Валюта");
	ТаблицаМатериалов.Колонки.Добавить("ВходящийНДС");
	ТаблицаМатериалов.Колонки.Добавить("КоэффОплаты");
	
	ТаблицаМатериалов.Колонки.Добавить("КорСчетСписанияБУ");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ1");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ2");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ3");
	
	ТаблицаМатериалов.Колонки.Добавить("КорСчетСписанияНУ");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияНУ1");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияНУ2");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияНУ3");
	
	КоэффОплаты      = 1;

	ТаблицаМатериалов.ЗаполнитьЗначения(КоэффОплаты,   "КоэффОплаты");
	ТаблицаМатериалов.ЗаполнитьЗначения(ЭтотОбъект,    "Регистратор");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,       "ДоговорКонтрагента");
	ТаблицаМатериалов.ЗаполнитьЗначения(Неопределено,								       "ДоговорПоставщика");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаМатериалов.ЗаполнитьЗначения(СчетЗатратБУ,    "КорСчетСписанияБУ");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "КорСубконтоСписанияБУ1");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.НоменклатурнаяГруппа,     "КорСубконтоСписанияБУ2");
	
	ТаблицаМатериалов.ЗаполнитьЗначения(СчетЗатратНУ,    "КорСчетСписанияНУ");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "КорСубконтоСписанияНУ1");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.НоменклатурнаяГруппа,     "КорСубконтоСписанияНУ2");
	
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтруктурноеПодразделение, "СтруктурноеПодразделение");
		
	Для Каждого Строка Из ТаблицаМатериалов Цикл
		Строка.КорСубконтоСписанияБУ3  = Строка.СтатьяЗатрат;
		Строка.КорСубконтоСписанияНУ3  = Строка.СтатьяЗатрат;
	КонецЦикла;
	
	Возврат ТаблицаМатериалов;

КонецФункции // ПодготовитьТаблицуТоваров()

Функция ПодготовитьТаблицуВозвратов(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаМатериалов = РезультатЗапросаПоТоварам.Выгрузить();

	
	ТаблицаМатериалов.Колонки.Добавить("ДокументОприходования");
	ТаблицаМатериалов.Колонки.Добавить("Регистратор");
	ТаблицаМатериалов.Колонки.Добавить("Склад");
	ТаблицаМатериалов.Колонки.Добавить("Организация");
	ТаблицаМатериалов.Колонки.Добавить("СтруктурноеПодразделение");
	ТаблицаМатериалов.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаМатериалов.Колонки.Добавить("ДоговорПоставщика");	
	ТаблицаМатериалов.Колонки.Добавить("Валюта");
	ТаблицаМатериалов.Колонки.Добавить("ВходящийНДС");
	ТаблицаМатериалов.Колонки.Добавить("КоэффОплаты");
	
	ТаблицаМатериалов.Колонки.Добавить("КорСчетСписанияБУ");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ1");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ2");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ3");
	
	ТаблицаМатериалов.Колонки.Добавить("КорСчетСписанияНУ");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияНУ1");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияНУ2");
		
	КоэффОплаты      = 1;

	ТаблицаМатериалов.ЗаполнитьЗначения(КоэффОплаты,   "КоэффОплаты");
 	ТаблицаМатериалов.ЗаполнитьЗначения(ЭтотОбъект,    "Регистратор");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,       "ДоговорКонтрагента");
	ТаблицаМатериалов.ЗаполнитьЗначения(Неопределено,								       "ДоговорПоставщика");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад, "КорСубконтоСписанияБУ3");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтруктурноеПодразделение, "СтруктурноеПодразделение");
	Для Каждого Строка Из ТаблицаМатериалов Цикл
		Строка.КорСчетСписанияБУ = Строка.СчетПередачиБУ;	
		Строка.КорСубконтоСписанияБУ1  = Строка.Номенклатура;
		Строка.КорСубконтоСписанияБУ2  = СтруктураШапкиДокумента.Склад;
		
		Строка.КорСчетСписанияНУ = Строка.СчетПередачиНУ;	
		Строка.КорСубконтоСписанияНУ1  = Строка.Номенклатура;
		Строка.КорСубконтоСписанияНУ2  = СтруктураШапкиДокумента.Склад;

	КонецЦикла;
	
	Возврат ТаблицаМатериалов;

КонецФункции // ПодготовитьТаблицуВозвратов()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
	УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект,"СчетФактураПолученный");

КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи" документа.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//синхронизируем данные счет-фактуры и документа основания
	УчетНДСИАкциза.СинхронизироватьДанныеДокументаИСчетаФактуры(ЭтотОбъект, Отказ, "СчетФактураПолученный"); 		
	Если Отказ Тогда
		Сообщить("Документ не записан ...", СтатусСообщения.ОченьВажное);
	КонецЕсли;	
КонецПроцедуры // ПриЗаписи


Процедура ОбработкаЗаполнения(Основание)
	// Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
		ЗаполнитьПоДокументуОснования(Основание);
	КонецЕсли;
КонецПроцедуры


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();