// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;
Перем мПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль;
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой графика
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьГрафика()
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекДокумент",ЭтотОбъект.Ссылка);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ГрафикВознагрождений.Организация КАК ПредставлениеОрганизации,
	|	ГрафикВознагрождений.Дата КАК ДатаНачала,
	|	ГрафикВознагрождений.Дата КАК ДатаОкончания
	|ИЗ
	|	Документ.НачислениеВознагрожденийПоЗаймамВыданным КАК ГрафикВознагрождений
	|ГДЕ
	|	 ГрафикВознагрождений.ссылка = &ТекДокумент
	|";
	
	ЗапросШапка.Текст = ТекстЗапроса;
	
	ЗапросШапка = ЗапросШапка.Выполнить().Выбрать();
	ЗапросШапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДокумент",ЭтотОбъект.Ссылка);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ГрафикВознагрождений.НомерСтроки,
	|	ГрафикВознагрождений.Контрагент,
	|	ГрафикВознагрождений.ДоговорКонтрагента.НомерДоговора КАК НомерДоговора,
	|	ГрафикВознагрождений.ДоговорКонтрагента.ДатаДоговора КАК ДатаДоговора,
	|	ГрафикВознагрождений.ДоговорКонтрагента.ВидКалендарныхДней КАК КоличествоДнейГода,
	|	ГрафикВознагрождений.ДоговорКонтрагента.СпособНачисленияВознагрождения КАК Способ,
	|	ГрафикВознагрождений.ПроцентВознагрождения,
	|	ГрафикВознагрождений.КоличествоДней,
	|	ГрафикВознагрождений.Валюта,
	|	ГрафикВознагрождений.Курс,
	|	ГрафикВознагрождений.ВалСумма,
	|	ГрафикВознагрождений.ВалСуммаВознагрождения,
	|	ГрафикВознагрождений.СуммаВознагрождения
	|ИЗ
	|	Документ.НачислениеВознагрожденийПоЗаймамВыданным.График КАК ГрафикВознагрождений
	|ГДЕ
	|	 ГрафикВознагрождений.ссылка = &ТекДокумент
	|Итоги 
	|	Сумма(ВалСуммаВознагрождения),
	|	Сумма(СуммаВознагрождения)
	|ПО Общие
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НачислениеВознагрожденияПоКредитамИЗаймам";

	Макет = ПолучитьМакет("Макет");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ЗапросШапка);
	ОбластьМакета.Параметры.ДатаНачала = Формат(НачалоМесяца(ЗапросШапка.ДатаНачала),"ДФ = dd.MM.yyyy");
	ОбластьМакета.Параметры.ДатаОкончания = Формат(КонецМесяца(ЗапросШапка.ДатаОкончания),"ДФ = dd.MM.yyyy");
	ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Начисление вознагрождения по займам выданным", глСписокПрефиксовУзлов);
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Общие");
	ВыборкаОбщийИтог.Следующий();
	
	выборка = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,);
	
	Пока Выборка.Следующий() Цикл
		ОбластьСтрока.Параметры.Заполнить(Выборка);
		ОбластьСтрока.Параметры.ДатаДоговора = Формат(Выборка.ДатаДоговора,"ДФ = dd.MM.yyyy");
		ТабДокумент.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	
	ОбластьИтого.Параметры.Заполнить(ВыборкаОбщийИтог);
	ТабДокумент.Вывести(ОбластьИтого);
	
	Возврат ТабДокумент;
	
КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Макет" Тогда
		ТабДокумент = ПечатьГрафика();
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
                                                                                                                                                    
КонецПроцедуры // Печать
	
#КонецЕсли

// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Макет","Начисление вознагрождений");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоГрафику - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуНачислений(РезультатЗапросаПоГрафику, СтруктураШапкиДокумента)

	ТаблицаПоНачислению = РезультатЗапросаПоГрафику.Выгрузить();

	Возврат ТаблицаПоНачислению;

КонецФункции // ПодготовитьТаблицуУслуг()


// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоНачислению, Отказ, Заголовок)
	ПроводкиБУ = Движения.Типовой;
	ПроводкиНУ = Движения.Налоговый;
	ПроводкиБУ.Записывать = Истина;
	ПроводкиНУ.записывать = Истина;
	ДатаДока = СтруктураШапкиДокумента.Дата;
	
	Для Каждого СтрокаТЗ ИЗ ТаблицаПоНачислению Цикл
		Если СтрокаТЗ.СуммаВознагрождения = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		//
			
		Проводка.СчетДт 	 = СтрокаТЗ.СчетУчетаВознагрождений;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,           СтрокаТЗ.Контрагент);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2,           СтрокаТЗ.ДоговорКонтрагента);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3,           СтрокаТЗ.ТипОперации);			
		
		Проводка.СчетКт      = СтрокаТЗ.СчетУчетаДоходов;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,СтрокаТЗ.СубконтоДоходов1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,СтрокаТЗ.СубконтоДоходов2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3,СтрокаТЗ.СубконтоДоходов3);
		
		
		Проводка.Содержание = "Начислены % по займам выданным";
		
		Если СтрокаТЗ.СчетУчетаВознагрождений.Валютный Тогда
			Проводка.ВалютаДт        = СтрокаТЗ.Валюта;
			Проводка.ВалютнаяСуммаДт = СтрокаТЗ.ВалСуммаВознагрождения;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаТЗ.СуммаВознагрождения;
		
		// проводки по НУ
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда				
			Проводка = ПроводкиНУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			//
			
			Проводка.СчетДт 	 = СтрокаТЗ.СчетУчетаВознагрождений;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,           СтрокаТЗ.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2,           СтрокаТЗ.ДоговорКонтрагента);
			
			Проводка.СчетКт      = СтрокаТЗ.СчетУчетаДоходовНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,СтрокаТЗ.СубконтоДоходов1);
			
			
			Проводка.Содержание = "Начислены % по займам выданным";
			
			Проводка.Сумма = СтрокаТЗ.СуммаВознагрождения;
			
		Конецесли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль или УчитыватьКПН);
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
		
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("СчетУчетаВознагрождений"  , "СчетУчетаВознагрождений");
	СтруктураПолей.Вставить("СчетУчетаДоходов"  , "СчетУчетаДоходов");
	СтруктураПолей.Вставить("СубконтоДоходов1"  , "СубконтоДоходов1");
	СтруктураПолей.Вставить("СубконтоДоходов2"  , "СубконтоДоходов2");
	СтруктураПолей.Вставить("СубконтоДоходов3"  , "СубконтоДоходов3");
	СтруктураПолей.Вставить("СчетУчетаВознагрожденийНУ"  , "СчетУчетаВознагрожденийНУ");
	СтруктураПолей.Вставить("СчетУчетаДоходовНУ"  , "СчетУчетаДоходовНУ");
	СтруктураПолей.Вставить("СубконтоДоходовНУ1"  , "СубконтоДоходовНУ1");
	СтруктураПолей.Вставить("СубконтоДоходовНУ2"  , "СубконтоДоходовНУ2");
	СтруктураПолей.Вставить("СубконтоДоходовНУ3"  , "СубконтоДоходовНУ3");
	СтруктураПолей.Вставить("Контрагент"    , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"    , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ТипОперации"    , "ТипОперации");
	СтруктураПолей.Вставить("Валюта"        , "Валюта");
	СтруктураПолей.Вставить("ВалСуммаВознагрождения"    , "ВалСуммаВознагрождения");
	СтруктураПолей.Вставить("СуммаВознагрождения"     , "СуммаВознагрождения");
	
	РезультатЗапросаПоГрафику = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "График", СтруктураПолей);
	
	ТаблицаПоНачислению = ПодготовитьТаблицуНачислений(РезультатЗапросаПоГрафику, СтруктураШапкиДокумента);
			
	// Движения по документу
	Если Не Отказ Тогда

			ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
						ТаблицаПоНачислению, Отказ, Заголовок);
	КонецЕсли;

	
КонецПроцедуры // ОбработкаПроведения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры // ПередЗаписью

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,РучнаяКорректировка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
