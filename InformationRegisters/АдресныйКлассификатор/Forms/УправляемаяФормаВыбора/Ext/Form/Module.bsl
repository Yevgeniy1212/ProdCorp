&НаКлиенте
Перем мНазваниеЭлемента;
&НаКлиенте
Перем КодРодительскогоЭлемента;
&НаКлиенте
Перем КодОбластиРодительскогоЭлемента;
&НаКлиенте
Перем КодРайонаРодительскогоЭлемента;
&НаКлиенте
Перем КодГородаРодительскогоЭлемента;
&НаКлиенте
Перем КодНасПунктаРодительскогоЭлемента;
&НаКлиенте
Перем мКодСтроки;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ АДРЕСНОЙ ИНФОРМАЦИИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ СПИСКА

// Процедура устанавливает условия отбора для демонстрации в списке для 
// выбора только регионов
//
// Параметры: 
//  нет
//
&НаКлиенте
Процедура ОтобратьТолькоОбласти() Экспорт
	//////////////////////////////
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипАдресногоЭлемента");
	ЭлементОтбора.ПравоеЗначение = 1;
	//ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
	//ЭлементОтбора.Использование = Истина;
	//
	//Список.Отбор.Элементы.Код.Использование = Ложь;
	//Список.Отбор.Элементы.КодОбластиВКоде.Использование = Ложь;
	//Список.Отбор.Элементы.КодРайонаВКоде.Использование  = Ложь;
	//Список.Отбор.Элементы.КодНаселенногоПунктаВКоде.Использование  = Ложь;

	//Список.Отбор.Элементы.ТипАдресногоЭлемента.ВидСравнения  = ВидСравнения.Равно;
	//Список.Отбор.Элементы.ТипАдресногоЭлемента.Значение      = 1;
	//Список.Отбор.Элементы.ТипАдресногоЭлемента.Использование = Истина;

	мНазваниеЭлемента = "областей";
КонецПроцедуры

// Процедура устанавливает условия отбора для демонстрации в списке для 
// выбора только регионов
//
// Параметры: 
//  нет
//
&НаКлиенте
Процедура ОтобратьТолькоРайоны() Экспорт
	
	Если КодРодительскогоЭлемента = 0 Тогда
		//Список.Отбор.Элементы["КодОбластиВКоде"].Использование = Ложь;
	Иначе
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КодОбластиВКоде");
		ЭлементОтбора.ПравоеЗначение = КодОбластиРодительскогоЭлемента;
		//ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
		ЭлементОтбора.Использование = Истина;
		//Список.Отбор.Элементы["КодОбластиВКоде"].ВидСравнения  = ВидСравнения.Равно;
		//Список.Отбор.Элементы["КодОбластиВКоде"].Значение      = КодОбластиРодительскогоЭлемента;
		//Список.Отбор.Элементы["КодОбластиВКоде"].Использование = Истина;
	КонецЕсли;
	
	//Список.Отбор.КодРайонаВКоде.Использование = Ложь;
	//Список.Отбор.КодНаселенногоПунктаВКоде.Использование = Ложь;	
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипАдресногоЭлемента");
	ЭлементОтбора.ПравоеЗначение = 2;
	//ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
	ЭлементОтбора.Использование = Истина;

	//Список.Отбор.ТипАдресногоЭлемента.ВидСравнения  = ВидСравнения.Равно;
	//Список.Отбор.ТипАдресногоЭлемента.Значение      = 2;
	//Список.Отбор.ТипАдресногоЭлемента.Использование = Истина;
	
	мНазваниеЭлемента = "районов";	
	
КонецПроцедуры

// Процедура устанавливает условия отбора для демонстрации в списке для 
// выбора только районов
//
// Параметры: 
//  нет
//
&НаКлиенте
Процедура ОтобратьТолькоГорода() Экспорт
	Если КодОбластиРодительскогоЭлемента = 0 Тогда
		//Список.Отбор.КодОбластиВКоде.Использование = Ложь;
		//Список.Отбор.КодОбластиВКоде.Использование = Ложь;
	Иначе
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КодОбластиВКоде");
		ЭлементОтбора.ПравоеЗначение = КодОбластиРодительскогоЭлемента;
        ЭлементОтбора.Использование = Истина;
		//Список.Отбор.КодОбластиВКоде.ВидСравнения  = ВидСравнения.Равно;
		//Список.Отбор.КодОбластиВКоде.Значение     = КодОбластиРодительскогоЭлемента;
		//Список.Отбор.КодОбластиВКоде.Использование = Истина;
	КонецЕсли;
	Если КодРайонаРодительскогоЭлемента = 0 Тогда
		//Список.Отбор.КодРайонаВКоде.Использование = Ложь;
		//Список.Отбор.КодРайонаВКоде.Использование = Ложь;
	Иначе	
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КодРайонаВКоде");
		ЭлементОтбора.ПравоеЗначение = КодРайонаРодительскогоЭлемента;
        ЭлементОтбора.Использование = Истина;
		//Список.Отбор.КодРайонаВКоде.ВидСравнения  = ВидСравнения.Равно;
		//Список.Отбор.КодРайонаВКоде.Значение    = КодРайонаРодительскогоЭлемента;
		//Список.Отбор.КодРайонаВКоде.Использование = Истина;
	КонецЕсли;
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипАдресногоЭлемента");
	ЭлементОтбора.ПравоеЗначение = 3;
    ЭлементОтбора.Использование = Истина;
	
	//Список.Отбор.КодНаселенногоПунктаВКоде.Использование = Ложь;
	//Список.Отбор.ТипАдресногоЭлемента.ВидСравнения  = ВидСравнения.Равно;
	//Список.Отбор.ТипАдресногоЭлемента.Значение      = 3;
	//Список.Отбор.ТипАдресногоЭлемента.Использование = Истина;
	мНазваниеЭлемента = "городов";
КонецПроцедуры

// Процедура устанавливает условия отбора для демонстрации в списке для 
// выбора только населенных пунктов
//
// Параметры: 
//  нет
//
&НаКлиенте
Процедура ОтобратьТолькоОкруга() Экспорт
	Если КодРодительскогоЭлемента = 0 Тогда
		//Список.Отбор.КодОбластиВКоде.Использование = Ложь;
		//Список.Отбор.КодРайонаВКоде.Использование = Ложь;
		//Список.Отбор.КодНаселенногоПунктаВКоде.Использование = Ложь;
	Иначе
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КодОбластиВКоде");
		ЭлементОтбора.ПравоеЗначение = КодОбластиРодительскогоЭлемента;
        ЭлементОтбора.Использование = Истина;
		
		//Список.Отбор.КодОбластиВКоде.ВидСравнения  	= ВидСравнения.Равно;
		//Список.Отбор.КодОбластиВКоде.Значение     	= КодОбластиРодительскогоЭлемента;
		//Список.Отбор.КодОбластиВКоде.Использование 	= Истина;
		
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КодРайонаВКоде");
		ЭлементОтбора.ПравоеЗначение = КодРайонаРодительскогоЭлемента;
        ЭлементОтбора.Использование = Истина;
		
		//Список.Отбор.КодРайонаВКоде.ВидСравнения  	= ВидСравнения.Равно;
		//Список.Отбор.КодРайонаВКоде.Значение    		= КодРайонаРодительскогоЭлемента;
		//Список.Отбор.КодРайонаВКоде.Использование 	= Истина;
		
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КодНаселенногоПунктаВКоде");
		ЭлементОтбора.ПравоеЗначение = КодГородаРодительскогоЭлемента;
        ЭлементОтбора.Использование = Истина;

		//Список.Отбор.КодНаселенногоПунктаВКоде.ВидСравнения  = ВидСравнения.Равно;
		//Список.Отбор.КодНаселенногоПунктаВКоде.Значение    	= КодГородаРодительскогоЭлемента;
		//Список.Отбор.КодНаселенногоПунктаВКоде.Использование = Истина;
	КонецЕсли;
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипАдресногоЭлемента");
	ЭлементОтбора.ПравоеЗначение = 4;
    ЭлементОтбора.Использование = Истина;

	//Список.Отбор.ТипАдресногоЭлемента.ВидСравнения  = ВидСравнения.Равно;
	//Список.Отбор.ТипАдресногоЭлемента.Значение      = 4;
	//Список.Отбор.ТипАдресногоЭлемента.Использование = Истина;
	мНазваниеЭлемента = "округов";
КонецПроцедуры

// Процедура устанавливает условия отбора для демонстрации в списке для 
// выбора только населенных пунктов
//
// Параметры: 
//  нет
//
&НаКлиенте
Процедура ОтобратьТолькоНаселенныеПункты() Экспорт
	Если КодОбластиРодительскогоЭлемента = 0 Тогда
		//Список.Отбор.КодОбластиВКоде.Использование = Ложь;
		//Список.Отбор.КодОбластиВКоде.Использование = Ложь;
	Иначе
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КодОбластиВКоде");
		ЭлементОтбора.ПравоеЗначение = КодОбластиРодительскогоЭлемента;
        ЭлементОтбора.Использование = Истина;
		//Список.Отбор.КодОбластиВКоде.ВидСравнения  = ВидСравнения.Равно;
		//Список.Отбор.КодОбластиВКоде.Значение     = КодОбластиРодительскогоЭлемента;
		//Список.Отбор.КодОбластиВКоде.Использование = Истина;
	КонецЕсли;
		
	Если КодРайонаРодительскогоЭлемента = 0 Тогда
		//Список.Отбор.КодРайонаВКоде.Использование = Ложь;
		//Список.Отбор.КодРайонаВКоде.Использование = Ложь;
	Иначе	
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КодРайонаВКоде");
		ЭлементОтбора.ПравоеЗначение = КодРайонаРодительскогоЭлемента;
        ЭлементОтбора.Использование = Истина;
		
		//Список.Отбор.КодРайонаВКоде.ВидСравнения  = ВидСравнения.Равно;
		//Список.Отбор.КодРайонаВКоде.Значение    = КодРайонаРодительскогоЭлемента;
		//Список.Отбор.КодРайонаВКоде.Использование = Истина;
	КонецЕсли;
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипАдресногоЭлемента");
	ЭлементОтбора.ПравоеЗначение = 4;
    ЭлементОтбора.Использование = Истина;
	//Список.Отбор.ТипАдресногоЭлемента.ВидСравнения  = ВидСравнения.Равно;
	//Список.Отбор.ТипАдресногоЭлемента.Значение      = 4;
	//Список.Отбор.ТипАдресногоЭлемента.Использование = Истина;
	мНазваниеЭлемента = "населенных пунктов";
КонецПроцедуры

// Процедура устанавливает условия отбора для демонстрации в списке для 
// выбора только улиц
//
// Параметры: 
//  нет
//
&НаКлиенте
Процедура ОтобратьТолькоУлицы() Экспорт
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипАдресногоЭлемента");
	ЭлементОтбора.ПравоеЗначение = 5;
    ЭлементОтбора.Использование = Истина;
	//Список.Отбор.ТипАдресногоЭлемента.ВидСравнения  = ВидСравнения.Равно;
	//Список.Отбор.ТипАдресногоЭлемента.Значение      = 5;
	//Список.Отбор.ТипАдресногоЭлемента.Использование = Истина;
	мНазваниеЭлемента = "улиц";
КонецПроцедуры

// Процедура устанавливает "родителя" для постороения условий отбора по переданным
// уже заполненным адресным полям
//
// Параметры: 
// Параметры: 
//  НазваниеРегиона - название региона( с сокращением)
//  НазваниеРайона - название района( с сокращением)
//  НазваниеГорода - название города( с сокращением)
//  НазваниеНаселенногоПункта - название населенного пункта( с сокращением)
//
&НаКлиенте
Процедура УстановитьРодителя(Знач НазваниеОбласти, Знач НазваниеРайона, Знач НазваниеГорода, Знач НазваниеНаселенногоПункта) Экспорт
	РодительскийЭлемент = куфиб_УправлениеКонтактнойИнформацией.ПолучитьПустуюСтруктуруАдреса();
	КодРодителяРодителя = 0;
	Область = куфиб_УправлениеКонтактнойИнформацией.ПолучитьАдресныйЭлемент(УправлениеКонтактнойИнформацией.ОбрезатьСокращение(НазваниеОбласти), 1);
	Если Область.Код > 0 Тогда
		РодительскийЭлемент = Область;
		КодРодителяРодителя = Область.Код;
	КонецЕсли;
	Район = куфиб_УправлениеКонтактнойИнформацией.ПолучитьАдресныйЭлемент(УправлениеКонтактнойИнформацией.ОбрезатьСокращение(НазваниеРайона), 2, КодРодителяРодителя);
	Если Район.Код > 0 Тогда
		РодительскийЭлемент = Район;
		КодРодителяРодителя = Район.Код;
	КонецЕсли;
	Город = куфиб_УправлениеКонтактнойИнформацией.ПолучитьАдресныйЭлемент(УправлениеКонтактнойИнформацией.ОбрезатьСокращение(НазваниеГорода), 3, КодРодителяРодителя);
	Если Город.Код > 0 Тогда
		РодительскийЭлемент = Город;
		КодРодителяРодителя = Город.Код;
	КонецЕсли;		
	КодРодительскогоЭлемента = РодительскийЭлемент.Код;
	КодОбластиРодительскогоЭлемента   = Цел(КодРодительскогоЭлемента / куфиб_УправлениеКонтактнойИнформацией.МаскаОБласти());
	КодРайонаРодительскогоЭлемента    = Цел(КодРодительскогоЭлемента / куфиб_УправлениеКонтактнойИнформацией.МаскаРайона()) % 100;
	КодГородаРодительскогоЭлемента    = Цел(КодРодительскогоЭлемента / куфиб_УправлениеКонтактнойИнформацией.МаскаГорода()) % 100;
	КодНасПунктаРодительскогоЭлемента = Цел(КодРодительскогоЭлемента / куфиб_УправлениеКонтактнойИнформацией.МаскаНасПункта()) % 100;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ И ЭЛЕМЕНТОВ ФОРМЫ


// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля СписокДокументов
//
&НаКлиенте
Процедура ОбработчикОжиданияПриАктивизацииСтроки()
	Элементы.НадписьРодителей.Заголовок = куфиб_УправлениеКонтактнойИнформациейКлиент.ПолучитьПолноеНазвание(мКодСтроки);
КонецПроцедуры // ОбработчикОжиданияСписокДокументовПриАктивизацииСтроки

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ И ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура Добавить(Кнопка)
	//ФормаЗаписи = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаЗаписи", ЭтаФорма);
	//ФормаЗаписи.Открыть();
	ОткрытьФорму("РегистрСведений.АдресныйКлассификатор.ФормаЗаписи",,ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мНазваниеЭлемента = "адресных элементов";

КодРодительскогоЭлемента = 0;
КодОбластиРодительскогоЭлемента = 0;
КодРайонаРодительскогоЭлемента = 0;
КодГородаРодительскогоЭлемента = 0;
КодНасПунктаРодительскогоЭлемента = 0;


