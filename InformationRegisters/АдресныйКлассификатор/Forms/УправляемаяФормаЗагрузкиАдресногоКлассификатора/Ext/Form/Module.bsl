&НаКлиенте
Перем СтрокаДопустимыхКодов;
&НаКлиенте
Перем АдресныеСведения;
&НаКлиенте
Перем АдресныеСведенияИБ;
&НаКлиенте
Перем ИспользованныеКоды;
&НаКлиенте
Перем АльтернативныеНазвания;


//  Процедура устанавливает заданную кодировку для файла XBASE
//
// Параметры:
//  ФайлБД - Объект с отрытым файлом XBASE.
//
&НаСервере
Процедура УстановитьКодировку(ФайлБД)

	Если КодировкаWindows Тогда
		ФайлБД.Кодировка = КодировкаXBase.ANSI;
	Иначе
		ФайлБД.Кодировка = КодировкаXBase.OEM;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАГРУЗКИ АДРЕСНОЙ ИНФОРМАЦИИ

// Процедура загружает в справочник адресный классификатор один адресный 
// элемент по переданным параметрам.
//
// Параметры:
//  КодЭлемента - значение кода для адресного элемента.
//  Наименование - значение наименования для адресного элемента.
//  Сокращение - значение сокращения для адресного элемента.
//  Индекс - значение индекса для адресного элемента.
//  МножительСдвига - множитель для окончательного сдвига кода ( см. вычисление выражения).
//  ДелительСдвига - делитель для первичного сдвига кода ( см. вычисление выражения).
//
&НаСервере
Процедура ЗагрузитьАдресныйЭлемент(Знач КодЭлемента, Знач КодОбласти, Знач КодРайона, Знач КодОкруга, Знач КодПункта,  Знач Наименование, Знач ТипЭлемента, Знач Индекс, Знач ИспользованныеКоды, Знач АдресныеСведения, Знач АдресныеСведенияИБ)

	Если СокрЛП(Строка(КодЭлемента)) = "" Тогда
		Возврат;
	КонецЕсли;

	Если СокрЛП(Строка(Наименование)) = "" Тогда
		Возврат;
	КонецЕсли;
	СтруктураНаименования = УправлениеКонтактнойИнформацией.ОтделитьСокращение(СокрЛП(Наименование));
	
	Сокращение = СтруктураНаименования.Сокращение;
	Наименование = СтруктураНаименования.Наименование;
	
	ТипАдресногоЭлемента = УправлениеКонтактнойИнформацией.ПолучитьТипАдресногоЭлемента(КодОбласти, КодРайона, КодОкруга, КодПункта, ТипЭлемента);
	Если ТипАдресногоЭлемента = 0 тогда
		Возврат;
	КонецЕсли;	
	
	Если ИспользованныеКоды[КодЭлемента] = Истина Тогда  //уже добавили элемент с таким кодом
		Сообщить("Не удалось добавить адресную информацию о """ + Наименование + " " + Сокращение + " (" + КодЭлемента + ")""", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	ИспользованныеКоды.Вставить(КодЭлемента, Истина);
	
	ЗаписьАдреса = АдресныеСведения.Добавить();
	ЗаписьАдреса.Код = КодЭлемента;

	ЗаписьАдреса.Наименование = Наименование;
	ЗаписьАдреса.АльтернативныеНазвания = "";
	ЗаписьАдреса.Сокращение = Сокращение;
	ЗаписьАдреса.Индекс = Индекс;
	ЗаписьАдреса.ТипАдресногоЭлемента = УправлениеКонтактнойИнформацией.ПолучитьТипАдресногоЭлемента(КодОбласти, КодРайона, КодОкруга, КодПункта, ТипЭлемента);
	
	ЗаписьАдреса.КодОбластиВКоде           = КодОбласти;
	ЗаписьАдреса.КодРайонаВКоде            = КодРайона;
	ЗаписьАдреса.КодНаселенногоПунктаВКоде = Число(СокрЛП(Строка(КодОкруга))+СокрЛП(Строка(КодПункта)));
	
	
	Если АдресныеСведенияИБ[КодЭлемента] = Истина Тогда
		 АдресныеСведенияИБ[КодЭлемента] = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// 
// Функция заполняет справочник "Алресные сокращения"
// из внутренней таблицы-макета
// Параметры
//  нет
//
&НаСервере
Функция ЗагрузитьСокращения()
	КлассификаторСокращений = РегистрыСведений.АдресныйКлассификатор.ПолучитьМакет("ТаблицаСокращений");
	СправочникКлассификатора = Справочники.АдресныеСокращения;
	
	ВсегоЗаписей = КлассификаторСокращений.ВысотаТаблицы - 1;	

	Для Сч = 2 По КлассификаторСокращений.ВысотаТаблицы Цикл		
		Сокращение = СокрЛП(КлассификаторСокращений.Область(Сч, 1, Сч, 1).Текст);
		ПолноеНаименование = СокрЛП(КлассификаторСокращений.Область(Сч, 2, Сч, 2).Текст);
		Уровень = СокрЛП(КлассификаторСокращений.Область(Сч, 5, Сч, 5).Текст);
		ОбъектАдреса = СправочникКлассификатора.НайтиПоНаименованию(ПолноеНаименование);
		
		Если НЕ ЗначениеЗаполнено(ОбъектАдреса) Тогда
			ОбъектАдреса = СправочникКлассификатора.СоздатьЭлемент();			
		Иначе
			ОбъектАдреса = ОбъектАдреса.ПолучитьОбъект()
		КонецЕсли;
		ОбъектАдреса.Наименование = ПолноеНаименование;
		ОбъектАдреса.Сокращение = Сокращение;
		ОбъектАдреса.Уровень = Число(Уровень);
		
		ОбъектАдреса.Записать();
	КонецЦикла;	                	

КонецФункции // ЗагрузитьСокращения()
 
// Процедура загружает адресные класиификаторы из файлов.
//
// Параметры:
//  ФайлАдресногоКлассификатора - имя файла адресного классификатора.
//  ФайлКлассификатораУлиц - имя файла классификатора улиц.
//  ФайлКлассификатораДомов - имя файла классификатора домов.
//  ФайлКлассификатораСокращений - имя файла классификатора сокращений.
//  СписокРегионов - список значений с регионами, адресную информацию по которым 
//                   необходимо обновить (другие не обрабатываются).
//
&наСервере
Функция ВыборкаАдресныхКлассификаторов(ТекстЗапроса, Значение)
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КодОбластиВКоде", Значение);
	Возврат Запрос.Выполнить();	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьКлассификаторы(ФайлАдресногоКлассификатора, СписокОбластей) Экспорт
	ФормаИндикацииХодаЗагрузки = ПолучитьФорму("ОбщаяФорма.ФормаИндикатора");
	ФормаИндикацииХодаЗагрузки.НаименованиеОбработкиДанных = "Загрузка адресной информации";
	ФормаИндикацииХодаЗагрузки.Открыть();
	ЗагрузитьСокращения();
	СтрокаДопустимыхКодов = "_";
		
	ЗагрузитьКлассификаторыНаСервере(ФайлАдресногоКлассификатора, СписокОбластей,ФормаИндикацииХодаЗагрузки,ИспользованныеКоды,АдресныеСведения);
	
	ФормаИндикацииХодаЗагрузки.Закрыть();

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьКлассификаторыНаСервере(ФайлАдресногоКлассификатора, СписокОбластей,ФормаИндикацииХодаЗагрузки,ИспользованныеКоды,АдресныеСведения) Экспорт
Для каждого Элемент Из СписокОбластей Цикл
		Если Элемент.Пометка Тогда
			ИспользованныеКоды = Новый Соответствие();
			АльтернативныеНазвания  = Новый ТаблицаЗначений();
			АльтернативныеНазвания.Колонки.Добавить("Код");
			АльтернативныеНазвания.Колонки.Добавить("Наименование");
			АльтернативныеНазвания.Колонки.Добавить("Сокращение");

			АдресныеСведения = Новый ТаблицаЗначений();
			АдресныеСведения.Колонки.Добавить("Код");
			АдресныеСведения.Колонки.Добавить("КодОбластиВКоде");
			АдресныеСведения.Колонки.Добавить("Наименование");
			АдресныеСведения.Колонки.Добавить("АльтернативныеНазвания");
			АдресныеСведения.Колонки.Добавить("Сокращение");
			АдресныеСведения.Колонки.Добавить("Индекс");
			АдресныеСведения.Колонки.Добавить("ТипАдресногоЭлемента");
			АдресныеСведения.Колонки.Добавить("КодРайонаВКоде");
			АдресныеСведения.Колонки.Добавить("КодНаселенногоПунктаВКоде");			

			ТекстЗапроса = "ВЫБРАТЬ
						  |	АдресныйКлассификатор.Код,
						  |	АдресныйКлассификатор.КодОбластиВКоде,
						  |	АдресныйКлассификатор.Наименование,
						  |	АдресныйКлассификатор.АльтернативныеНазвания,
						  |	АдресныйКлассификатор.Сокращение,
						  |	АдресныйКлассификатор.Индекс,
						  |	АдресныйКлассификатор.ТипАдресногоЭлемента,
						  |	АдресныйКлассификатор.КодРайонаВКоде,
						  |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде						  
						  |ИЗ
						  |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
						  |
						  |ГДЕ
						  |	АдресныйКлассификатор.КодОБластиВКоде = &КодОбластиВКоде";
			
		  РезультатЗапросаСведений = ВыборкаАдресныхКлассификаторов(ТекстЗапроса, Элемент.Значение);
		  МассивСведений = РезультатЗапросаСведений.Выгрузить().ВыгрузитьКолонку("Код");
			АдресныеСведенияИБ = Новый Соответствие();
			Для Сч = 0 По МассивСведений.ВГраница() Цикл
				АдресныеСведенияИБ.Вставить(МассивСведений[Сч], Истина);
			КонецЦикла;

			ВыражениеДляИндекса = "SUBSTR(te,1,2)='" + Формат(Элемент.Значение, "ЧЦ=2;ЧВН=") + "'";
			КлассификаторАдресов = Новый XBase(ФайлАдресногоКлассификатора);

			Если КлассификаторАдресов.Открыта() Тогда

				ФормаИндикацииХодаЗагрузки.СтрокаСостоянияПрогрессора = "Загружается адресный классификатор из файла " + ФайлАдресногоКлассификатора;
				ФормаИндикацииХодаЗагрузки.НадписьСостоянияПрогрессора = "Позиция в файле классификатора:";
				ФормаИндикацииХодаЗагрузки.МаксимальноеЗначение = КлассификаторАдресов.КоличествоЗаписей();
				ФормаИндикацииХодаЗагрузки.ЗначениеИндикатора = 0;

				// проверяем структуру адресных полей
				Если (КлассификаторАдресов.поля.Найти("AB") = Неопределено)
				 ИЛИ (КлассификаторАдресов.поля.Найти("CD") = Неопределено)
				 ИЛИ (КлассификаторАдресов.поля.Найти("EF") = Неопределено)
				 ИЛИ (КлассификаторАдресов.поля.Найти("HIJ") = Неопределено)
				 ИЛИ (КлассификаторАдресов.поля.Найти("K") = Неопределено)
				 ИЛИ (КлассификаторАдресов.поля.Найти("rus_name") = Неопределено)				 Тогда
					Сообщить("Файл классификатора адресов имеет неправильную структуру. Классификатор не загружен!", СтатусСообщения.Важное);
				Иначе 

					КлассификаторАдресов.индексы.Добавить("MAIN","RECNO()", , , ВыражениеДляИндекса);
					КлассификаторАдресов.СоздатьИндексныйФайл(КаталогВременныхФайлов() + "mainkldr.cdx");
					КлассификаторАдресов.ЗакрытьФайл();
					
					КлассификаторАдресов = Новый XBase(ФайлАдресногоКлассификатора, КаталогВременныхФайлов() + "mainkldr.cdx", Истина);
					КлассификаторАдресов.ТекущийИндекс = КлассификаторАдресов.индексы.Найти("MAIN");
						
					УстановитьКодировку(КлассификаторАдресов);
					
					// если в стурктуре есть необходимые поля - загружаем
					КлассификаторАдресов.Первая();
					
					Если НЕ КлассификаторАдресов.ВКонце() Тогда
					
						ЗагрузитьАдресныйЭлемент(Число(КлассификаторАдресов.te),
												 Число(КлассификаторАдресов.AB),
												 Число(КлассификаторАдресов.CD),
												 Число(КлассификаторАдресов.EF),
												 Число(КлассификаторАдресов.HIJ),
												 КлассификаторАдресов.rus_name, 
												 Число(КлассификаторАдресов.K),
												 0,
												 ИспользованныеКоды,
												 АдресныеСведения,
												 АдресныеСведенияИБ);

						 Пока КлассификаторАдресов.Следующая() Цикл
							ЗагрузитьАдресныйЭлемент(Число(КлассификаторАдресов.te),
												 Число(КлассификаторАдресов.AB),
												 Число(КлассификаторАдресов.CD),
												 Число(КлассификаторАдресов.EF),
												 Число(КлассификаторАдресов.HIJ),
												 КлассификаторАдресов.rus_name, 
												 Число(КлассификаторАдресов.K),
												 0,
												 ИспользованныеКоды,
												 АдресныеСведения,
												 АдресныеСведенияИБ);
												 
							//ОбработкаПрерыванияПользователя();
							ФормаИндикацииХодаЗагрузки.ЗначениеИндикатора = КлассификаторАдресов.НомерЗаписи();
						КонецЦикла;
				
					КонецЕсли;
				
					КлассификаторАдресов.ЗакрытьФайл();
				
				КонецЕсли;
				
			КонецЕсли;

			ФормаИндикацииХодаЗагрузки.СтрокаСостоянияПрогрессора = "Подготавливаем данные к записи по области";
			ФормаИндикацииХодаЗагрузки.НадписьСостоянияПрогрессора = СписокОбластей.НайтиПоЗначению(Элемент.Значение).Представление;
			ФормаИндикацииХодаЗагрузки.ЗначениеИндикатора = 0;
			
			ВыборкаЗапроса = РезультатЗапросаСведений.Выбрать();
			Для Сч = 0 По МассивСведений.ВГраница() Цикл
				Если АдресныеСведенияИБ[МассивСведений[Сч]] = Истина Тогда
					Если ВыборкаЗапроса.НайтиСледующий(МассивСведений[Сч], "Код") Тогда
						ЗаписьАдреса = АдресныеСведения.Добавить();
						
						ЗаписьАдреса.Код = ВыборкаЗапроса.Код;
						
						ЗаписьАдреса.Наименование              = ВыборкаЗапроса.Наименование;
						ЗаписьАдреса.АльтернативныеНазвания    = ВыборкаЗапроса.АльтернативныеНазвания;
						ЗаписьАдреса.Сокращение                = ВыборкаЗапроса.Сокращение;
						ЗаписьАдреса.Индекс                    = ВыборкаЗапроса.Индекс;
						ЗаписьАдреса.ТипАдресногоЭлемента      = ВыборкаЗапроса.ТипАдресногоЭлемента;
						
						ЗаписьАдреса.КодОбластиВКоде           = ВыборкаЗапроса.КодОбластиВКоде;
						ЗаписьАдреса.КодРайонаВКоде            = ВыборкаЗапроса.КодРайонаВКоде;
						ЗаписьАдреса.КодНаселенногоПунктаВКоде = ВыборкаЗапроса.КодНаселенногоПунктаВКоде;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
					
			
			// очищаем область
			НаборАдресныхСведений = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
			НаборАдресныхСведений.Отбор.КодОбластиВКоде.Использование = Истина;
			НаборАдресныхСведений.Отбор.КодОбластиВКоде.Значение = Элемент.Значение;
			НаборАдресныхСведений.Записать(Истина);

			// заносим новые данные порциями
			ФормаИндикацииХодаЗагрузки.МаксимальноеЗначение = АдресныеСведения.Количество();
			ФормаИндикацииХодаЗагрузки.СтрокаСостоянияПрогрессора = "Записываем данные по области " + Символы.ПС + СписокОбластей.НайтиПоЗначению(Элемент.Значение).Представление;
			ФормаИндикацииХодаЗагрузки.НадписьСостоянияПрогрессора = "Записано данных:";
			СчетчикЗаписей = 0;
			ФормаИндикацииХодаЗагрузки.ЗначениеИндикатора = 0;
			
			Для каждого АдреснаяЗапись из АдресныеСведения Цикл
				Если СчетчикЗаписей = 0 Тогда
					НаборАдресныхСведений = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
					НаборАдресныхСведений.Отбор.КодОбластиВКоде.Использование = Истина;
					НаборАдресныхСведений.Отбор.КодОбластиВКоде.Значение = Элемент.Значение;
				КонецЕсли;
				
				ЗаписьАдреса = НаборАдресныхСведений.Добавить();
				
				ЗаписьАдреса.Код = АдреснаяЗапись.Код;
				
				ЗаписьАдреса.Наименование              	= АдреснаяЗапись.Наименование;
				ЗаписьАдреса.АльтернативныеНазвания    	= АдреснаяЗапись.АльтернативныеНазвания;
				ЗаписьАдреса.Сокращение                = АдреснаяЗапись.Сокращение;
				ЗаписьАдреса.Индекс                    	= АдреснаяЗапись.Индекс;
				ЗаписьАдреса.ТипАдресногоЭлемента      	= АдреснаяЗапись.ТипАдресногоЭлемента;
				
				ЗаписьАдреса.КодОбластиВКоде           	= АдреснаяЗапись.КодОбластиВКоде;
				ЗаписьАдреса.КодРайонаВКоде            	= АдреснаяЗапись.КодРайонаВКоде;
				ЗаписьАдреса.КодНаселенногоПунктаВКоде	= АдреснаяЗапись.КодНаселенногоПунктаВКоде;
				
				Если СчетчикЗаписей >= 170 Тогда
					НаборАдресныхСведений.Записать(Ложь);
					СчетчикЗаписей = 0;
				Иначе
					СчетчикЗаписей = СчетчикЗаписей + 1;
				КонецЕсли;
				ФормаИндикацииХодаЗагрузки.ЗначениеИндикатора = ФормаИндикацииХодаЗагрузки.ЗначениеИндикатора + 1;
				
			КонецЦикла;
			
			Если СчетчикЗаписей > 0 Тогда
				НаборАдресныхСведений.Записать(Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

// Процедура загружает области из внутренних таблиц.
//
// Параметры:
//  нет
//
&НаСервере
Процедура ЗагрузитьОбласти() Экспорт

	ФормаИндикацииХодаЗагрузки = ПолучитьОбщуюФорму("ФормаИндикатора");
	ФормаИндикацииХодаЗагрузки.НаименованиеОбработкиДанных = "Загрузка адресной информации";
	ФормаИндикацииХодаЗагрузки.Открыть();
	
	АдресныеСведения = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
	КлассификаторАдресов = РегистрыСведений.АдресныйКлассификатор.ПолучитьМакет("ТаблицаОбластей");
	
	ВсегоЗаписей = КлассификаторАдресов.ВысотаТаблицы - 1;
	ФормаИндикацииХодаЗагрузки.СтрокаСостоянияПрогрессора = "Загружаются области из внутренних таблиц.";
	ФормаИндикацииХодаЗагрузки.НадписьСостоянияПрогрессора = "Загружено:";

	Для Сч = 2 По КлассификаторАдресов.ВысотаТаблицы Цикл

		ФормаИндикацииХодаЗагрузки.ЗначениеИндикатора = (Сч - 1) * 100 / ВсегоЗаписей;

		ЗаписьАдреса = РегистрыСведений.АдресныйКлассификатор.СоздатьМенеджерЗаписи();
		
		ЗаписьАдреса.Код = Число(КлассификаторАдресов.Область(Сч, 1, Сч, 1).Текст);
		КодОбласти = Цел(ЗаписьАдреса.Код / УправлениеКонтактнойИнформацией.МаскаОБласти());
		
		ЗаписьАдреса.Наименование = СокрЛП(КлассификаторАдресов.Область(Сч, 2, Сч, 2).Текст);
		ЗаписьАдреса.Сокращение   = СокрЛП(КлассификаторАдресов.Область(Сч, 3, Сч, 3).Текст);
		ЗаписьАдреса.Индекс       = СокрЛП(КлассификаторАдресов.Область(Сч, 4, Сч, 4).Текст);
		ЗаписьАдреса.ТипАдресногоЭлемента = 1;
		
		ЗаписьАдреса.КодОбластиВКоде           	= КодОбласти;
		ЗаписьАдреса.КодРайонаВКоде            	= Цел(ЗаписьАдреса.Код / УправлениеКонтактнойИнформацией.МаскаРайона()) % 10;
		ЗаписьАдреса.КодНаселенногоПунктаВКоде	= Цел(ЗаписьАдреса.Код / УправлениеКонтактнойИнформацией.МаскаГорода()) % 10000;		
		
		ЗаписьАдреса.Записать(Истина);
		
	КонецЦикла;
	
	ФормаИндикацииХодаЗагрузки.Закрыть();

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ СПИСКА

//  Процедура устанавливает свойства элементов диалога в соответствии
// со значением реквизитов формы.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура УстановитьНастройку()
	//Если КодировкаWindows Тогда
	//	Элементы.Кодировка = Элементы.Кодировка.СписокВыбора.Получить(0).Значение;
	//Иначе
	//	Элементы.Кодировка = Элементы.Кодировка.СписокВыбора.Получить(1).Значение;
	//КонецЕсли;
КонецПроцедуры

//  Процедура заполняет список областей. Список областей используется для
//  загрузки только части классификатора
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ЗаполнитьСписокОбластей()

	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	АдресныйКлассификатор.КодОбластиВКоде,
	|	АдресныйКлассификатор.Наименование,
	|	АдресныйКлассификатор.Сокращение
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|
	|ГДЕ
	|	АдресныйКлассификатор.ТипАдресногоЭлемента = 1" ;

	Выборка = Запрос.Выполнить().Выбрать();
	СписокОбластей.Очистить();

	Пока Выборка.Следующий() Цикл
		СписокОбластей.Добавить(Выборка.КодОбластиВКоде, Выборка.Наименование + " " + Выборка.Сокращение, Ложь);
	КонецЦикла;
	
	СписокОбластей.СортироватьПоПредставлению();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ И ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)

	//КодировкаWindows = ВосстановитьЗначение("АдресныйКлассификаторКодировкаWindows");
	//ФайлАдресногоКлассификатора  = ВосстановитьЗначение("АдресныйКлассификаторФайлАдресногоКлассификатора");
	
	Если НЕ ЗначениеЗаполнено(КодировкаWindows) Тогда
		КодировкаWindows = Истина;
	КонецЕсли;                

	УстановитьНастройку();
	ЗаполнитьСписокОбластей();
	
КонецПроцедуры

// Процедура - обработчик события "Загрузить" командной панели "ДействияФормы".
//
&НаКлиенте
Процедура ОсновныеДействияФормыДействиеЗагрузить(Кнопка)
	
	
	Для каждого Элемент Из СписокОбластей Цикл
		
		Если Элемент.Пометка Тогда
			
			ЗагрузитьКлассификаторы(ФайлАдресногоКлассификатора,                     
									СписокОбластей);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Предупреждение("Необходимо отметить хотя бы одну область для загрузки");
	
КонецПроцедуры

// Процедура - обработчик события "ЗагрузитьРегионы" командной панели "ДействияФормы".
//
&НаКлиенте
Процедура ОсновныеДействияФормыЗагрузитьОбласти(Кнопка)
	
	ЗагрузитьОбласти();
	ЗаполнитьСписокОбластей();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ФайлАдресногоКлассификатора".
//
&НаКлиенте
Процедура ФайлАдресногоКлассификатораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ВводФайлаАдресногоКлассификатора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВводФайлаАдресногоКлассификатора.Фильтр = "Файл базы данных(*.dbf)|*.dbf";
	ВводФайлаАдресногоКлассификатора.ПроверятьСуществованиеФайла = Истина;
	Если ВводФайлаАдресногоКлассификатора.Выбрать() Тогда
		ФайлАдресногоКлассификатора = ВводФайлаАдресногоКлассификатора.ПолноеИмяФайла;
	КонецЕсли

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ПолеВыбораКодировки".
//
&НаКлиенте
Процедура КодировкаПриИзменении(Элемент)

	КодировкаWindows = (Элементы.ПолеВыбораКодировки.Значение = "win"); 
	
КонецПроцедуры

// Процедура - обработчик события "ПриНажатии" кнопки "УстановитьФлажки".
//
&НаКлиенте
Процедура КнопкаУстановитьФлажкиНажатие(Элемент)

	СписокОбластей.ЗаполнитьПометки(Истина);

КонецПроцедуры

// Процедура - обработчик события "ПриНажатии" кнопки "СнятьФлажки".
//
&НаКлиенте
Процедура КнопкаСнятьФлажкиНажатие(Элемент)

	СписокОбластей.ЗаполнитьПометки(Ложь);

КонецПроцедуры

// Процедура - обработчик события "ПриНажатии" кнопки "ЗатенитьФлажки".
//
&НаКлиенте
Процедура КнопкаЗатенитьФлажкиНажатие(Элемент)

	Для каждого Элемент Из СписокОбластей Цикл
		Элемент.Пометка = Не Элемент.Пометка;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОсновныеДействияФормыОчиститьКлассификатор(Кнопка)
	Ответ = Вопрос("Вся адресная информация в классификаторе по выбранным областям будет удалена!
					|Очистить адресный классификатор по выбранным областям?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОсновныеДействияФормыОчиститьКлассификаторНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОсновныеДействияФормыОчиститьКлассификаторНаСервере()
		МенеджерЗаписи = РегистрыСведений.АдресныйКлассификатор.СоздатьМенеджерЗаписи();
		НаборЗаписей = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.КодОбластиВКоде.Использование = Истина;
		Для каждого Элемент Из СписокОбластей Цикл
			Если Элемент.Пометка Тогда
				// очищаем классификатор по области
				//Состояние("Очищаем классификатор по области " + Элемент.Представление + ".");
				НаборЗаписей.Отбор.КодОбластиВКоде.Значение = Элемент.Значение;
				АдресныеСведения = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
				АдресныеСведения.Отбор.КодОбластиВКоде.Использование = Истина;
				АдресныеСведения.Отбор.КодОбластиВКоде.Значение = Элемент.Значение;
				ТексЗапроса = "ВЫБРАТЬ
							  |	АдресныйКлассификатор.Код,
							  |	АдресныйКлассификатор.КодОбластиВКоде,
							  |	АдресныйКлассификатор.Наименование,
							  |	АдресныйКлассификатор.Сокращение,
							  |	АдресныйКлассификатор.Индекс,
							  |	АдресныйКлассификатор.ТипАдресногоЭлемента,
							  |	АдресныйКлассификатор.КодРайонаВКоде,
							  |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде
							  |ИЗ
							  |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
							  |
							  |ГДЕ
							  |	АдресныйКлассификатор.КодОбластиВКоде = &КодОбластиВКоде И
							  |	АдресныйКлассификатор.ТипАдресногоЭлемента = 1";
				Запрос = Новый Запрос(ТексЗапроса);
				Запрос.УстановитьПараметр("КодОбластиВКоде", Элемент.Значение);
				ВыборкаСведений = Запрос.Выполнить().Выбрать();
				Пока ВыборкаСведений.Следующий() Цикл
					ЗаписьАдреса = АдресныеСведения.Добавить();
					ЗаписьАдреса.Код = ВыборкаСведений.Код;
					ЗаписьАдреса.Наименование              	= ВыборкаСведений.Наименование;
					ЗаписьАдреса.Сокращение                	= ВыборкаСведений.Сокращение;
					ЗаписьАдреса.Индекс                    	= ВыборкаСведений.Индекс;
					ЗаписьАдреса.ТипАдресногоЭлемента      	= ВыборкаСведений.ТипАдресногоЭлемента;
					ЗаписьАдреса.КодОбластиВКоде           	= ВыборкаСведений.КодОбластиВКоде;
					ЗаписьАдреса.КодРайонаВКоде            	= ВыборкаСведений.КодРайонаВКоде;
					ЗаписьАдреса.КодНаселенногоПунктаВКоде	= ВыборкаСведений.КодНаселенногоПунктаВКоде;
				КонецЦикла;
				АдресныеСведения.Записать(Истина);
			КонецЕсли;
		КонецЦикла;
		// очищаем классификатор от элементом с нулевой областью
		//Состояние("Проверяем на существование записей с областью ""0"".");
		НаборЗаписей.Отбор.КодОбластиВКоде.Значение = 0;
		НаборЗаписей.Прочитать();
		МенеджерЗаписи.КодОбластиВКоде = НаборЗаписей.Отбор.КодОбластиВКоде.Значение;
		Если НаборЗаписей.Количество() > 0 Тогда
			Для каждого ЗаписьРегистра из НаборЗаписей Цикл
				МенеджерЗаписи.Код = ЗаписьРегистра.Код;
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.Удалить();
			КонецЦикла;
			Сообщить("Дополнительно удалены некорректные записи, содержащие область 0!", СтатусСообщения.Важное);
		КонецЕсли;
КонецПроцедуры