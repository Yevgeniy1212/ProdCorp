
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//	ЗаполнитьЗначенияСвойств(ЭтотОбъект,Параметры,"Бюджет");
	Если Параметры.Свойство("Отбор") Тогда
		Если Параметры.Отбор.Свойство("Бюджет") Тогда
			Бюджет = Параметры.Отбор.Бюджет;
		КонецЕсли;
		Если Параметры.Отбор.Свойство("СтатьяБюджета") Тогда
			СтатьяБюджета = Параметры.Отбор.СтатьяБюджета;
		КонецЕсли;
		Если Параметры.Отбор.Свойство("ФормируемыйСценарий") Тогда
			СценарииПланирования.Добавить(Параметры.Отбор.ФормируемыйСценарий);
		КонецЕсли;
	КонецЕсли;
	
	Если СценарииПланирования.Количество()=0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	фин_ПорядокАктуализацииСтатейБюджетов.ФормируемыйСценарий,
			|	фин_ПорядокАктуализацииСтатейБюджетов.ФормируемыйСценарий.Наименование
			|ПОМЕСТИТЬ ВТ
			|ИЗ
			|	РегистрСведений.фин_ПорядокАктуализацииСтатейБюджетов КАК фин_ПорядокАктуализацииСтатейБюджетов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ.ФормируемыйСценарий,
			|	ВТ.ФормируемыйСценарийНаименование
			|ИЗ
			|	ВТ КАК ВТ
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВТ.ФормируемыйСценарийНаименование";
		
		Запрос.УстановитьПараметр("Бюджет", Бюджет);
		РезультатЗапроса = Запрос.Выполнить();
		СценарииПланирования.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ФормируемыйСценарий"));
	КонецЕсли;
	ЗаполнитьДанные();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанные()
	ТабличныйДокумент.Очистить();
	ДанныеРасшифровкиКомпоновкиДанных = Неопределено;	
	Отчет = Отчеты.фин_ПравилаАктуализацииСтатейБюджетов.Создать();
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Бюджет",Бюджет);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("СтатьяБюджета",СтатьяБюджета);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("СценарииПланирования",СценарииПланирования);
	Отчет.СкомпоноватьРезультат(ТабличныйДокумент,ДанныеРасшифровкиКомпоновкиДанных);
	ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиКомпоновкиДанных,УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РезультатОбработки = ОбработатьРасшифровку(Расшифровка);
	Если РезультатОбработки = Неопределено Тогда
		Возврат;
	ИначеЕсли РезультатОбработки.Действие = "ОткрытьЗначение" Тогда
		ПоказатьЗначение(,РезультатОбработки.Параметр);
	ИначеЕсли РезультатОбработки.Действие = "ВыбратьРежим" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораРежима",ЭтотОбъект);
		ОткрытьФорму("РегистрСведений.фин_ПорядокАктуализацииСтатейБюджетов.Форма.ФормаВводаПорядка",Новый Структура("Адрес,Бюджет",Адрес,Бюджет),ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		//ПоказатьВыборИзСписка(ОписаниеОповещения,СписокРежимы,,СписокРежимы.НайтиПоЗначению(НЕ РезультатОбработки.Параметр));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораРежима(Результат,ДополнительныеПараметры) Экспорт
	Если Результат<>Неопределено Тогда
		ОбработкаВыбораРежимаНаСервере(Результат);	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРежимаНаСервере(Результат)
	НачатьТранзакцию();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_СтатьиБюджета.Ссылка КАК Статья
		|ПОМЕСТИТЬ ВТ_Статьи
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
		|ГДЕ
		|	фин_СтатьиБюджета.Владелец = &Бюджет
		|	И фин_СтатьиБюджета.ЭтоГруппа = ЛОЖЬ
		|	И фин_СтатьиБюджета.ПометкаУдаления = ЛОЖЬ
		|	И ВЫБОР
		|			КОГДА &ИерархияСтатей
		|				ТОГДА фин_СтатьиБюджета.Ссылка В ИЕРАРХИИ (&Статьи)
		|			ИНАЧЕ фин_СтатьиБюджета.Ссылка В (&Статьи)
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СценарииПланирования.Ссылка КАК Сценарий
		|ПОМЕСТИТЬ ВТ_Сценарии
		|ИЗ
		|	Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования КАК СценарииПланирования
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ИерархияСценарий
		|				ТОГДА СценарииПланирования.Ссылка В ИЕРАРХИИ (&Сценарии)
		|			ИНАЧЕ СценарииПланирования.Ссылка В (&Сценарии)
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Статьи.Статья,
		|	ВТ_Сценарии.Сценарий
		|ИЗ
		|	ВТ_Статьи КАК ВТ_Статьи
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Сценарии КАК ВТ_Сценарии
		|		ПО (ИСТИНА)";
	ИерархияСценарий = Ложь;
	ИерархияСтатей = Ложь;
	СценарииОтбора = Новый СписокЗначений;
	СтатьиОтбора = Новый СписокЗначений;
	
	СтрокиСтатья = ТаблицаОтбора.НайтиСтроки(Новый Структура("Поле","Статья"));
	Если СтрокиСтатья.Количество()>0 Тогда
		СтрокаТаблицы = СтрокиСтатья[0];
		ИерархияСтатей = СтрокаТаблицы.ВидСравнения = "ВИерархии";
		СтатьиОтбора.Добавить(СтрокаТаблицы.Значение);
	КонецЕсли;
	
	СтрокиПодразделение = ТаблицаОтбора.НайтиСтроки(Новый Структура("Поле","Сценарий"));
	Если СтрокиПодразделение.Количество()>0 Тогда
		СтрокаТаблицы = СтрокиПодразделение[0];
		ИерархияСценарий = СтрокаТаблицы.ВидСравнения = "ВИерархии";
		СценарииОтбора.Добавить(СтрокаТаблицы.Значение);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Значение) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен сценарий!");
			Возврат;
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен сценарий!");
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Бюджет", Бюджет);
	Запрос.УстановитьПараметр("Версия", Версия);
	Запрос.УстановитьПараметр("ИерархияСценарий", ИерархияСценарий);
	Запрос.УстановитьПараметр("ИерархияСтатей", ИерархияСтатей);
	Запрос.УстановитьПараметр("Сценарии", СценарииОтбора);
	Запрос.УстановитьПараметр("Статьи", СтатьиОтбора);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.фин_ПорядокАктуализацииСтатейБюджетов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Бюджет.Установить(Бюджет);
		НаборЗаписей.Отбор.ФормируемыйСценарий.Установить(ВыборкаДетальныеЗаписи.Сценарий);
		НаборЗаписей.Отбор.СтатьяБюджета.Установить(ВыборкаДетальныеЗаписи.Статья);
		НЗ = НаборЗаписей.Добавить();
		НЗ.Бюджет = Бюджет;
		НЗ.ФормируемыйСценарий = ВыборкаДетальныеЗаписи.Сценарий;
		НЗ.СтатьяБюджета = ВыборкаДетальныеЗаписи.Статья;
		ЗаполнитьЗначенияСвойств(НЗ,Результат);
		НаборЗаписей.Записать();
	КонецЦикла;
	ЗаполнитьДанные();
	ЗафиксироватьТранзакцию();
КонецПроцедуры



&НаСервере
Функция ОбработатьРасшифровку(Расшифровка, ВариантРасшифровки = Неопределено)
	
	ДанныеДляОбработки = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	ИнформацияДляРасшифровки = ДанныеДляОбработки.Элементы.Получить(Расшифровка);
	Если ИнформацияДляРасшифровки <> Неопределено Тогда
		ДействиеРасшифровки = СокрЛП(Строка(ИнформацияДляРасшифровки.ОсновноеДействие));
		Данные = ИнформацияДляРасшифровки.ПолучитьПоля();
		Если ДействиеРасшифровки= "Нет" Тогда
			Возврат Неопределено;
		ИначеЕсли ДействиеРасшифровки = "Открыть значение" Тогда
			Возврат Новый Структура("Действие,Параметр","ОткрытьЗначение",Данные[0].Значение);
		ИначеЕсли ДействиеРасшифровки = "Расшифровать" Тогда
			ТаблицаОтбора.Очистить();
			//ТаблицаОтбора.Колонки.Добавить("Поле");
			//ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
			//ТаблицаОтбора.Колонки.Добавить("Значение");
			ЗаполнитьОтборИзГруппировок(ТаблицаОтбора,ИнформацияДляРасшифровки,ДанныеДляОбработки);
			Адрес = ПоместитьВоВременноеХранилище(ТаблицаОтбора.Выгрузить(),УникальныйИдентификатор);
			Возврат Новый Структура("Действие,Параметр","ВыбратьРежим",?(Данные[0].Значение=Null,Истина,Данные[0].Значение));
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьОтборИзГруппировок(ТаблицаОтбора,ИнформацияДляРасшифровки,ДанныеРасшифровки)
	РодительскиеПоля = ИнформацияДляРасшифровки.ПолучитьРодителей();
	Для Каждого ПолеРодитель Из РодительскиеПоля Цикл
		ДанныеРодителя = ДанныеРасшифровки.Элементы.Получить(ПолеРодитель.Идентификатор);
		Если НЕ ТипЗнч(ДанныеРодителя)=Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
			Для Каждого ПолеРодителя Из ДанныеРодителя.ПолучитьПоля() Цикл
				НС = ТаблицаОтбора.Добавить();
				НС.Поле = ПолеРодителя.Поле;
				НС.Значение = ПолеРодителя.Значение;
				НС.ВидСравнения = ?(ЗначениеЗаполнено(ПолеРодителя.Значение),?(ПолеРодителя.Иерархия,"ВИерархии","Равно"),"Незаполнено");
			КонецЦикла;
		КонецЕсли;
		ЗаполнитьОтборИзГруппировок(ТаблицаОтбора,ДанныеРодителя,ДанныеРасшифровки);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	ЗаполнитьДанные();
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияПриИзменении(Элемент)
	ПодразделенияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПодразделенияПриИзмененииНаСервере()
	ЗаполнитьДанные();
КонецПроцедуры

&НаКлиенте
Процедура СтатьяБюджетаПриИзменении(Элемент)
	ПодразделенияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура БюджетПриИзменении(Элемент)
	ПодразделенияПриИзмененииНаСервере();
КонецПроцедуры
