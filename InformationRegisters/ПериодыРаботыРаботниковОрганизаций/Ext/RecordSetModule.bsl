////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем РежимЗаписиРегистратора Экспорт;
Перем ПустойНаборЗаписей;

Перем мФизлица;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ВыполнитьПроверку(СообщатьОбОшибкахПериодов, УчитыватьРегистратор, Отказ)
	
	Регистратор = Отбор.Регистратор.Значение;
	
	Если СообщатьОбОшибкахПериодов Тогда
		СообщенияОбОшибках = Новый Массив;
	Иначе
		СообщенияОбОшибках = Неопределено;
	КонецЕсли;
	
	ОшибкиПериодов = Новый Соответствие;

	// Проверим основное место работы
	ПолныеПрава.ПолучитьОшибкиПериодовРаботыСотрудника(Регистратор, УчитыватьРегистратор, мФизлица, Регистратор.Организация, "ОсновноеМестоРаботы", СообщенияОбОшибках, ОшибкиПериодов);
	
	// запишем новое состояние ошибок
	//НаборЗаписей = РегистрыСведений.ПериодыРаботыРаботниковОрганизаций.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Физлицо.Использование = Истина;
	//Для Каждого Элемент Из мФизлица Цикл
	//	НаборЗаписей.Очистить();
	//	НаборЗаписей.Отбор.Физлицо.Значение = Элемент;
	//	// если ошибка периода - пишем непустой набор записей
	//	Если ОшибкиПериодов[Элемент] = 0 Тогда
	//		Строка = НаборЗаписей.Добавить();
	//		Строка.Физлицо = Элемент;
	//	КонецЕсли;
	//	НаборЗаписей.Записать();
	//КонецЦикла;

	ПолныеПрава.СообщитьОбОшибке(СообщатьОбОшибкахПериодов, СообщенияОбОшибках, "основному месту работы", Отказ);
	
	// Проверим совместительство
	Если СообщатьОбОшибкахПериодов Тогда
		СообщенияОбОшибках = Новый Массив;
	Иначе
		СообщенияОбОшибках = Неопределено;
	КонецЕсли;

	ОшибкиПериодов.Очистить();
	ПолныеПрава.ПолучитьОшибкиПериодовРаботыСотрудника(Регистратор, УчитыватьРегистратор, мФизлица, Регистратор.Организация, "Совместительство", СообщенияОбОшибках, ОшибкиПериодов);
	
	// запишем новое состояние ошибок
	//НаборЗаписей = РегистрыСведений.ПериодыРаботыРаботниковОрганизаций.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Физлицо.Использование = Истина;
	//Для Каждого Элемент Из мФизлица Цикл
	//	НаборЗаписей.Очистить();
	//	НаборЗаписей.Отбор.Физлицо.Значение = Элемент;
	//	// если ошибка периода - пишем непустой набор записей
	//	Если ОшибкиПериодов[Элемент] = 0 Тогда
	//		Строка = НаборЗаписей.Добавить();
	//		Строка.Физлицо = Элемент;
	//	КонецЕсли;
	//	НаборЗаписей.Записать();
	//КонецЦикла;
	
	ПолныеПрава.СообщитьОбОшибке(СообщатьОбОшибкахПериодов, СообщенияОбОшибках, "совместительству", Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;      
	
	Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Периоды.Физлицо
	|ИЗ
	|	РегистрСведений.ПериодыРаботыРаботниковОрганизаций КАК Периоды
	|ГДЕ
	|	Периоды.Регистратор = &Регистратор";
	
	мФизлица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Физлицо");
	
	ВыполнитьПроверку(РежимЗаписиРегистратора = РежимЗаписиДокумента.ОтменаПроведения, Ложь, Отказ);
	
	ПустойНаборЗаписей = ЭтотОбъект.Количество() = 0;
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мФизлица.Очистить();
	
	Для Каждого Запись Из ЭтотОбъект Цикл
		мФизлица.Добавить(Запись.Физлицо);
	КонецЦикла;

	Если НЕ ПустойНаборЗаписей Тогда
		ВыполнитьПроверку(РежимЗаписиРегистратора = РежимЗаписиДокумента.Проведение, Истина, Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

