&НаКлиенте
Перем СтрокаДляВсехОрганизаций Экспорт; 			 //константа с текстом, обозначающим, что настройка будет действовать для всех организаций
&НаКлиенте
Перем СтрокаДляВсехКонтрагентов Экспорт; 			 //константа с текстом, обозначающим, что настройка будет действовать для всех контрагентов
&НаКлиенте
Перем СтрокаДляВсехДоговоровКонтрагентов Экспорт; 	 //константа с текстом, обозначающим, что настройка будет действовать для всех договоров контрагентов
&НаКлиенте
Перем СтрокаДляВсехВидовРасчетовПоДоговорам Экспорт; //константа с текстом, обозначающим, что настройка будет действовать для всех видов расчетов по договорам
&НаКлиенте
Перем СписокСчетовПокупателя, СписокСчетовПоставщика, СписокСчетовВозвратаПоставщику, СписокСчетовВозвратаОтПокупателя;

&НаКлиенте
Процедура СписокПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ДанныеСтроки = Элемент.ТекущиеДанные;
	СчетУчетаАвансовВыданных = ДанныеСтроки.СчетУчетаАвансовВыданных;
	СчетУчетаРасчетовСПоставщиком = ДанныеСтроки.СчетУчетаРасчетовСПоставщиком;
	СчетУчетаАвансовПолученных = ДанныеСтроки.СчетУчетаАвансовПолученных;
	СчетУчетаРасчетовСПокупателем = ДанныеСтроки.СчетУчетаРасчетовСПокупателем;
	Если (ЗначениеЗаполнено(СчетУчетаАвансовВыданных))
		  И (СчетУчетаАвансовВыданных.Вид = ВидСчета.Пассивный)
		  И (СчетУчетаАвансовВыданных<>СчетУчетаРасчетовСПоставщиком) Тогда
	
		Сообщить("В качестве счета авансов выданных должен выбираться активный счет!");
		Отказ = Истина;
	
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(СчетУчетаАвансовПолученных))
		  И (СчетУчетаАвансовПолученных.Вид = ВидСчета.Активный)
		  И (СчетУчетаАвансовПолученных<>СчетУчетаРасчетовСПокупателем) Тогда
	
		Сообщить("В качестве счета авансов полученных должен выбираться пассивный счет!");
		Отказ = Истина;
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
		КонтрагентВОтборе =  куфиб_ОбщегоНазначения.НайтиЭлементОтбораВКомпоновке(Список.Отбор,"Контрагент");	
		Если КонтрагентВОтборе <> Неопределено
			И КонтрагентВОтборе.Использование
			И КонтрагентВОтборе.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Контрагент", КонтрагентВОтборе.ПравоеЗначение);
			ПараметрыФормы.Вставить("Организация", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация"));
			ОткрытьФорму("РегистрСведений.СчетаУчетаРасчетовСКонтрагентами.ФормаЗаписи",ПараметрыФормы,Элемент);
			Отказ = Истина;
		КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СписокДоговорНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(Элемент.ВыборПоВладельцу) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Не выбран контрагент!");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элементы.РегистрСведенийСписок.ТекущиеДанные.Организация) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		СтруктураОтбор = Новый Структура("Организация,Владелец",Элементы.РегистрСведенийСписок.ТекущиеДанные.Организация,Элементы.РегистрСведенийСписок.ТекущиеДанные.Контрагент);
		ПараметрыФормы.Вставить("Отбор", СтруктураОтбор);
		ФормаВыбораДоговора = ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора",ПараметрыФормы,Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтрагентПриИзменении(Элемент)
	Если Элементы.РегистрСведенийСписок.ТекущиеДанные <> Неопределено Тогда
		Договор = Элементы.РегистрСведенийСписок.ТекущиеДанные.Договор;
		Если ЗначениеЗаполнено(Договор) Тогда
			Если Договор.Владелец<>Элемент.Значение Тогда
				Элементы.РегистрСведенийСписок.ТекущиеДанные.Договор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаРасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяКолонки = Элементы.РегистрСведенийСписок.ТекущаяКолонка.Имя;
	Если ИмяКолонки = "СчетУчетаРасчетовСПоставщиком" ИЛИ ИмяКолонки = "СчетУчетаАвансовПолученных" ТОгда
		УстановитьОтборОткрытьВыбор(Элемент,ВидСравнения.ВСписке,СписокСчетовПоставщика);
	ИначеЕсли ИмяКолонки = "СчетУчетаРасчетовСПокупателем" ИЛИ ИмяКолонки = "СчетУчетаАвансовВыданных" Тогда
		УстановитьОтборОткрытьВыбор(Элемент,ВидСравнения.ВСписке,СписокСчетовПокупателя);
	ИначеЕсли ИмяКолонки = "СчетУчетаРасчетовСПоставщикомПоВозвратам" Тогда
		УстановитьОтборОткрытьВыбор(Элемент,ВидСравнения.ВСписке,СписокСчетовВозвратаПоставщику);
	Иначе
		УстановитьОтборОткрытьВыбор(Элемент,ВидСравнения.ВСписке,СписокСчетовВозвратаОтПокупателя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборОткрытьВыбор(ВладелецФормы,ВидСравненияДляОтбора,ЗначениеОтбора)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Ссылка",ЗначениеОтбора));
	ОткрытьФорму("ПланСчетов.Типовой.ФормаВыбора",ПараметрыФормы,ВладелецФормы);
	//
	//ФормаВыбора = ПланыСчетов.Типовой.ПолучитьФормуВыбора(,ВладелецФормы,);
	//ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.ВидСравнения = ВидСравненияДляОтбора;
	//ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Значение = ЗначениеОтбора;
	//ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Использование = Истина;
	//
	//ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОрганизацияПриИзменении(Элемент)

	Если Элементы.РегистрСведенийСписок.ТекущиеДанные <> Неопределено Тогда
		Договор = Элементы.РегистрСведенийСписок.ТекущиеДанные.Договор;
		Если ЗначениеЗаполнено(Договор) Тогда
			Если Договор.Организация<>Элемент.Значение Тогда
				Элементы.РегистрСведенийСписок.ТекущиеДанные.Договор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНажатие(Элемент, СтандартнаяОбработка)
	СписокДоговорНачалоВыбора(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		СписокСчетовОбщий = Новый СписокЗначений;
	СписокСчетовПокупателя = Новый СписокЗначений;
	СписокСчетовПоставщика = Новый СписокЗначений;
	СписокСчетовОбщий.ЗагрузитьЗначения(УправлениеВзаиморасчетами.ПолучитьСписокСчетовВзаиморасчетов().ВыгрузитьКолонку("Ссылка"));
	СписокСчетовВозвратаПоставщику = Новый СписокЗначений;
	СписокСчетовВозвратаПоставщику.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамТМЗПоставщикам"));
	СписокСчетовВозвратаПоставщику.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ДолгосрочнаяЗадолженностьПоВозвратамТМЗПоставщикам"));
	СписокСчетовВозвратаОтПокупателя = Новый СписокЗначений;
	СписокСчетовВозвратаОтПокупателя.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамРеализованныхГотовойПродукцииТоваровРаботУслуг"));
	СписокСчетовВозвратаОтПокупателя.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ДолгосрочнаяЗадолженностьПоВозвратамРеализованныхГотовойПродукцииТоваровРаботУслуг"));
	
	Для Каждого Счет Из СписокСчетовОбщий Цикл
		Если Не СписокСчетовВозвратаПоставщику.НайтиПоЗначению(Счет.Значение) = Неопределено 
			ИЛИ Не СписокСчетовВозвратаОтПокупателя.НайтиПоЗначению(Счет.Значение) = Неопределено Тогда
			продолжить;
		КонецЕсли;
		Если Счет.Значение.Вид = ВидСчета.Активный Тогда
			СписокСчетовПокупателя.Добавить(Счет.Значение);
		Иначе
			СписокСчетовПоставщика.Добавить(Счет.Значение);
		КонецЕсли; 
	КонецЦикла;
	

КонецПроцедуры

СтрокаДляВсехОрганизаций   			  = "<Для всех организаций>";
СтрокаДляВсехКонтрагентов 			  = "<Для всех контрагентов>";
СтрокаДляВсехДоговоровКонтрагентов 	  = "<Для всех договоров контрагентов>";
СтрокаДляВсехВидовРасчетовПоДоговорам = "<Для всех видов расчетов по договорам>";