
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриОткрытииНаСервере(Отказ);
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере(Отказ)
	//Список.Отбор.Объект.Использование = Истина;
	//ПредставлениеОбъекта = "";
	//Если ТипЗнч(Список.Отбор.Элементы.Объект.Значение) = Тип("СписокЗначений") Тогда
	//	Если Список.Отбор.Элементы.Объект.ВидСравнения = ВидСравнения.ВСписке ИЛИ Список.Отбор.Элементы.Объект.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
	//		ПредставлениеОбъекта = "в списке ";
	//	ИначеЕсли Список.Отбор.Элементы.Объект.ВидСравнения = ВидСравнения.НеВСписке ИЛИ Список.Отбор.Элементы.Объект.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
	//		ПредставлениеОбъекта = "не в списке ";
	//	КонецЕсли;
	//	ПредставлениеСписка = "";
	//	Для каждого ЭлементСписка Из Список.Отбор.Элементы.Объект.Значение Цикл
	//		Если Не ПустаяСтрока(ПредставлениеСписка) Тогда
	//			ПредставлениеСписка = ПредставлениеСписка + ", ";
	//		КонецЕсли;
	//		ПредставлениеСписка = ПредставлениеСписка + ?(НЕ ЗначениеЗаполнено(ЭлементСписка.Значение), "<...>", Строка(ЭлементСписка.Значение));
	//	КонецЦикла;
	//	ПредставлениеОбъекта = ПредставлениеОбъекта + ПредставлениеСписка;
	//ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Список.Отбор.Объект.Значение)) Тогда
	//	Если НЕ ЗначениеЗаполнено(Список.Отбор.Объект.Значение) Тогда
	//		ПредставлениеОбъекта = "не определен";
	//	Иначе
	//		Если Список.Отбор.Элементы.Объект.ВидСравнения = ВидСравнения.Равно Тогда
	//			ПредставлениеОбъекта = "";
	//		ИначеЕсли Список.Отбор.Элементы.Объект.ВидСравнения = ВидСравнения.НеРавно Тогда
	//			ПредставлениеОбъекта = "не равно ";
	//		КонецЕсли;
	//		ПредставлениеОбъекта = ПредставлениеОбъекта + Строка(Список.Отбор.Элементы.Объект.Значение);
	//	КонецЕсли;
	//КонецЕсли;
	//ЭтаФорма.Заголовок = "Контактная информация. Объект: " + ПредставлениеОбъекта;
КонецПроцедуры // ПриОткрытии()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

// Процедура обработчик события "ПередНачаломИзменения" списка регитсра сведений
//
&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
//куфиб_УправлениеКонтактнойИнформациейКлиент.УстановитьПараметрыОкна(Отказ, Список.Отбор.Элементы[0].ПравоеЗначение,Элемент, Истина, ложь,,Ложь);
	куфиб_УправлениеКонтактнойИнформациейКлиент.УстановитьПараметрыОкна(Отказ, Элементы.Список.ТекущиеДанные.Объект,Элемент, Истина, ложь,,Ложь);	
	
КонецПроцедуры

&НаСервере
Процедура СписокПередНачаломИзмененияНаСервере(ТекущиеДанные,Отказ)
	//Отказ = Истина;
	//МенеджерЗаписи = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
	//Для каждого Измерение Из Метаданные.РегистрыСведений.КонтактнаяИнформация.Измерения Цикл
	//	МенеджерЗаписи[Измерение.Имя] = ТекущиеДанные[Измерение.Имя];
	//КонецЦикла;
	//МенеджерЗаписи.Прочитать();
	
	//Обработки.общ_РедактированиеКонтактнойИнформации.Создать().РедактироватьЗапись(МенеджерЗаписи, Истина,,,ЭтаФорма.УникальныйИдентификатор);
КонецПроцедуры // СписокПередНачаломИзменения()

// Процедура обработчик события "ПередНачаломДобавления" списка регитсра сведений
//
&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	Если Список.Отбор.Элементы.Количество() > 0 Тогда 
		ОбъектОтбора = Список.Отбор.Элементы[0].ПравоеЗначение
	Иначе
		ОбъектОтбора = Неопределено;
	КонецЕсли;
	куфиб_УправлениеКонтактнойИнформациейКлиент.КонтактнаяИнформацияПередНачаломДобавленияОбработкаДоступностиЭлементовОбщее(Отказ, Элемент, ОбъектОтбора, Копирование, Истина);
КонецПроцедуры
&НаСервере
Процедура СписокПередНачаломДобавленияНаСервере(ТекущиеДанные, Отказ, Копирование, Родитель, Группа)
	
	//МенеджерЗаписи = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
	//Если Копирование Тогда
	//	Для каждого Измерение Из Метаданные.РегистрыСведений.КонтактнаяИнформация.Измерения Цикл
	//		МенеджерЗаписи[Измерение.Имя] = ТекущиеДанные[Измерение.Имя];
	//	КонецЦикла;
	//	Для каждого Ресурс Из Метаданные.РегистрыСведений.КонтактнаяИнформация.Ресурсы Цикл
	//		МенеджерЗаписи[Ресурс.Имя] = ТекущиеДанные[Ресурс.Имя];
	//	КонецЦикла;
	//	Для каждого Реквизит Из Метаданные.РегистрыСведений.КонтактнаяИнформация.Реквизиты Цикл
	//		МенеджерЗаписи[Ресурс.Имя] = ТекущиеДанные[Ресурс.Имя];
	//	КонецЦикла;
	//КонецЕсли;
	//Если Список.Отбор.Объект.Использование = Истина
	//   И ТипЗнч(Параметры.Отбор.Объект.Значение) <> Тип("СписокЗначений")
	//   И ЗначениеЗаполнено(Параметры.Отбор.Объект.Значение) Тогда
	//	МенеджерЗаписи.Объект = Параметры.Отбор.Объект.Значение;
	//КонецЕсли;
	//Если Параметры.Отбор.Тип.Использование = Истина
	//   И ТипЗнч(Параметры.Отбор.Тип.Значение) <> Тип("СписокЗначений")
	//   И ЗначениеЗаполнено(Параметры.Отбор.Тип.Значение) Тогда
	//	МенеджерЗаписи.Тип = Параметры.Отбор.Тип.Значение;
	//КонецЕсли;
	//Если Параметры.Отбор.Вид.Использование = Истина
	//   И ТипЗнч(Параметры.Отбор.Вид.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации")
	//   И ЗначениеЗаполнено(Параметры.Отбор.Вид.Значение) Тогда
	//	МенеджерЗаписи.Объект = куфиб_УправлениеКонтактнойИнформацией.ПолучитьПустоеЗначениеОбъектаКонтактнойИнформации(Параметры.Отбор.Вид.Значение.ВидОбъектаКонтактнойИнформации);
	//	МенеджерЗаписи.Тип    = Параметры.Отбор.Вид.Значение.Тип;
	//	МенеджерЗаписи.Вид    = Параметры.Отбор.Вид.Значение;
	//КонецЕсли;
	//Обработки.РедактированиеКонтактнойИнформации.Создать().РедактироватьЗапись(МенеджерЗаписи, Истина);
	
КонецПроцедуры // СписокПередНачаломДобавления()

// Процедура обработчик события "Выбор" списка регитсра сведений
//
&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	Если Элементы.Список.РежимВыбора Тогда
		СтандартнаяОбработка = Ложь;
		ЭтаФорма.Закрыть(Элемент.ТекущиеДанные.Представление);
	КонецЕсли;
КонецПроцедуры // СписокВыбор()

&НаКлиенте
Процедура СписокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЗаписьКИВРегистр(ВыбранноеЗначение);
	ОбновитьКИ();
	
	//НаборКонтактнойИнформации.
КонецПроцедуры

&НаСервере
Процедура ОбновитьКИ()
	КИ = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	Если Список.Отбор.Элементы.Количество()>0 Тогда
		КИ.Отбор.Объект.Значение = Список.Отбор.Элементы[0].ПравоеЗначение;	
		КИ.Отбор.Объект.Использование = Истина;	
	КонецЕсли;
	//
	КИ.Прочитать();
	Элементы.Список.Обновить();
	//Список.Загрузить(КИ.Выгрузить());
	//Список.Сортировать("Тип, Вид");
	
КонецПроцедуры

&НаСервере
Процедура ЗаписьКИВРегистр(ВыбранноеЗначение)
Попытка
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		КИ = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		КИ.Записывать = истина;
		Если Список.Отбор.Элементы.Количество()>0 Тогда
			КИ.Отбор.Объект.Значение = Список.Отбор.Элементы[0].ПравоеЗначение;	
			КИ.Отбор.Объект.Использование = Истина;	
		КонецЕсли;

		КИ.Прочитать();
		СтрокаКИ = КИ.Добавить();
		СтрокаКИ.Тип = ВыбранноеЗначение.Тип;
		СтрокаКИ.Вид = ВыбранноеЗначение.Вид;
		СтрокаКИ.Объект = ВыбранноеЗначение.Объект;
		СтрокаКИ.Комментарий = ВыбранноеЗначение.Комментарий;
		СтрокаКИ.Представление = ВыбранноеЗначение.Представление;
		СтрокаКИ.Поле1 = ВыбранноеЗначение.Поле1;
		СтрокаКИ.Поле2 = ВыбранноеЗначение.Поле2;
		СтрокаКИ.Поле3 = ВыбранноеЗначение.Поле3;
		СтрокаКИ.Поле4 = ВыбранноеЗначение.Поле4;
		СтрокаКИ.Поле5 = ВыбранноеЗначение.Поле5;
		СтрокаКИ.Поле6 = ВыбранноеЗначение.Поле6;
		СтрокаКИ.Поле7 = ВыбранноеЗначение.Поле7;
		СтрокаКИ.Поле8 = ВыбранноеЗначение.Поле8;
		СтрокаКИ.Поле9 = ВыбранноеЗначение.Поле9;
		СтрокаКИ.Поле10 = ВыбранноеЗначение.Поле10;
		КИ.Записать(Истина);
	КонецЕсли;
Исключение
	Сообщить(ОписаниеОшибки());
КонецПопытки;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Добавим колонки в список для всех измерений, ресурсов и реквизитов

