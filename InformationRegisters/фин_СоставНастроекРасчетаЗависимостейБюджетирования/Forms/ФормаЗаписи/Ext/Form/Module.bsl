
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ РеквизитФормыВЗначение("Запись").Выбран() Тогда
		ЗаполнитьЗначенияСвойств(Запись,Параметры);
	КонецЕсли;
	ПереформироватьСписокКолонок();
	СтруктураОтбораИсходныхЗначений = Запись.ИсходныйНаборРазрезов;
	Для Каждого СтрокаРазрез Из Запись.НастройкаРасчета.ОграниченияОбластиДействияЗависимости Цикл
		Если СтрокаРазрез.Использование Тогда
			ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(СтрокаРазрез.Измерение); 
			ЭтотОбъект[ИмяРазреза] = СтруктураОтбораИсходныхЗначений[ИмяРазреза];
			Если Найти(ИмяРазреза,"Разрез")<>0 Тогда
				ЭтотОбъект[ИмяРазреза] = ЭтотОбъект["ПВХ"+ИмяРазреза].ТипЗначения.ПривестиЗначение(ЭтотОбъект[ИмяРазреза]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	СтруктураОтбораРезультирующихЗначений = Запись.ЗависимыйНаборРазрезов;
	Для Каждого СтрокаРазрез Из Запись.НастройкаРасчета.РезультирующиеЗначенияРазрезов Цикл
		Если СтрокаРазрез.Использование Тогда
			ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(СтрокаРазрез.Измерение); 
			ЭтотОбъект["Результат"+ИмяРазреза] = СтруктураОтбораРезультирующихЗначений[ИмяРазреза];
			Если Найти(ИмяРазреза,"Разрез")<>0 Тогда
				ЭтотОбъект["Результат"+ИмяРазреза] = ЭтотОбъект["ПВХ"+ИмяРазреза].ТипЗначения.ПривестиЗначение(ЭтотОбъект["Результат"+ИмяРазреза]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	НадписьРезультирующиеЗначенияРазрезов 	= "Результирующие значения разрезов";
	НадписьОграниченияОбластиДействия 		= "Ограничения области действия";
	НадписьИспользуемыеПоказатели 			= "Используемые показатели";
	НадписьОсновное							= "Основное";
КонецПроцедуры

&НаСервере
Процедура ПереформироватьСписокКолонок()
	МассивУдалить = Новый Массив;
	СписокПодчиненных = Новый Массив;
	СписокПодчиненных.Добавить("ОбластьДействия");	
	СписокПодчиненных.Добавить("ЗависимыеРазрезы");	
	СписокПодчиненных.Добавить("Показатели");
	Для Каждого ЭлементКОчистке Из СписокПодчиненных Цикл
		ЭлементыУдалить = Элементы[ЭлементКОчистке].ПодчиненныеЭлементы;
		Для Каждого Элемент Из ЭлементыУдалить Цикл
			Если Найти(Элемент.Имя,"Надпись") = 0 Тогда
				Элемент.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	СписокРазрезов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов");
	ИменаРазрезов = Новый СписокЗначений;
	Для Каждого РазрезЭлемент Из СписокРазрезов Цикл
		ИменаРазрезов.Добавить(фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение),фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(РазрезЭлемент.Значение));
		Если Найти(фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение),"Разрез")<>0 Тогда
			НомерРазреза = Сред(фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение),СтрДлина("Разрез")+1);
			ЭтотОбъект["ПВХРазрез"+НомерРазреза] = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(РазрезЭлемент.Значение);
			Элементы["Разрез"+НомерРазреза].ОграничениеТипа = ЭтотОбъект["ПВХРазрез"+НомерРазреза].ТипЗначения;
			Элементы["РезультатРазрез"+НомерРазреза].ОграничениеТипа = ЭтотОбъект["ПВХРазрез"+НомерРазреза].ТипЗначения;
		КонецЕсли;
	КонецЦикла;
	// создадим колонки по исходным разрезам
	Для Каждого ИмяРазреза Из ИменаРазрезов Цикл
		СтрокиРасчета = Запись.НастройкаРасчета.ОграниченияОбластиДействияЗависимости.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования[ИмяРазреза.Значение]));
		Если Запись.НастройкаРасчета.Пустая() ИЛИ (СтрокиРасчета.Количество()>0 И СтрокиРасчета[0].Использование) Тогда
			НовыйЭлементФормы = Элементы.Найти(ИмяРазреза.Значение);
			НовыйЭлементФормы.Заголовок = ИмяРазреза.Представление;
			НовыйЭлементФормы.Видимость = Истина;
		КонецЕсли;
	КонецЦикла;
	// создадим колонки по результирующим разрезам
	Для Каждого ИмяРазреза Из ИменаРазрезов Цикл
		СтрокиРасчета = Запись.НастройкаРасчета.РезультирующиеЗначенияРазрезов.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования[ИмяРазреза.Значение]));
		Если Запись.НастройкаРасчета.Пустая() ИЛИ (СтрокиРасчета.Количество()>0 И СтрокиРасчета[0].Использование) Тогда
			НовыйЭлементФормы = Элементы.Найти("Результат"+ИмяРазреза.Значение);
			НовыйЭлементФормы.Заголовок = ИмяРазреза.Представление;
			НовыйЭлементФормы.Видимость = Истина;
		КонецЕсли;
	КонецЦикла;
	// создадим колонки по показателям
	Для Инд=1 По 3 Цикл
		СтрокиРасчета = Запись.НастройкаРасчета.ИспользуемыеПоказатели.НайтиСтроки(Новый Структура("Показатель","Показатель"+Строка(Инд)));
		Если Запись.НастройкаРасчета.Пустая() ИЛИ (СтрокиРасчета.Количество()>0 И СтрокиРасчета[0].Использование) Тогда
			НовыйЭлементФормы = Элементы.Найти("Показатель"+Строка(Инд));
			НовыйЭлементФормы.Заголовок = ?(СтрокиРасчета.Количество()>0,СтрокиРасчета[0].Представление,"Показатель"+Строка(Инд));
			НовыйЭлементФормы.Видимость = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРасчетаПриИзменении(Элемент)
	НастройкаРасчетаПриИзмененииНаСервере();
	ОбновитьОтображениеДанных();
КонецПроцедуры

&НаСервере
Процедура НастройкаРасчетаПриИзмененииНаСервере()
	ПереформироватьСписокКолонок();
	СтруктураОтбораИсходныхЗначений = Запись.ИсходныйНаборРазрезов;
	Для Каждого СтрокаРазрез Из Запись.НастройкаРасчета.ОграниченияОбластиДействияЗависимости Цикл
		Если СтрокаРазрез.Использование Тогда
			ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(СтрокаРазрез.Измерение); 
			Если Найти(ИмяРазреза,"Разрез")<>0 Тогда
				ЭтотОбъект[ИмяРазреза] = ЭтотОбъект["ПВХ"+ИмяРазреза].ТипЗначения.ПривестиЗначение(ЭтотОбъект[ИмяРазреза]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	СтруктураОтбораРезультирующихЗначений = Запись.ЗависимыйНаборРазрезов;
	Для Каждого СтрокаРазрез Из Запись.НастройкаРасчета.РезультирующиеЗначенияРазрезов Цикл
		Если СтрокаРазрез.Использование Тогда
			ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(СтрокаРазрез.Измерение); 
			Если Найти(ИмяРазреза,"Разрез")<>0 Тогда
				ЭтотОбъект["Результат"+ИмяРазреза] = ЭтотОбъект["ПВХ"+ИмяРазреза].ТипЗначения.ПривестиЗначение(ЭтотОбъект["Результат"+ИмяРазреза]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ОбновитьОтображениеДанных();
КонецПроцедуры

&НаКлиенте
Процедура История(Команда)
	ОткрытьФорму("РегистрСведений.фин_СоставНастроекРасчетаЗависимостейБюджетирования.Форма.ФормаИстория",Новый Структура("НастройкаРасчета",Запись.НастройкаРасчета),ЭтотОбъект,КлючУникальности);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ЗаполнитьПозициюКлассификатора();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПозициюКлассификатора()
	СтруктураОтбораИсходныхЗначений = Новый Структура;
	Для Каждого СтрокаРазрез Из Запись.НастройкаРасчета.ОграниченияОбластиДействияЗависимости Цикл
		Если СтрокаРазрез.Использование Тогда
			ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(СтрокаРазрез.Измерение); 
			СтруктураОтбораИсходныхЗначений.Вставить(ИмяРазреза,ЭтотОбъект[ИмяРазреза]);
			СтруктураОтбораИсходныхЗначений.Вставить("Отбор"+ИмяРазреза,Истина);
		КонецЕсли;
	КонецЦикла;
	СтруктураОтбораРезультирующихЗначений = Новый Структура;
	Для Каждого СтрокаРазрез Из Запись.НастройкаРасчета.РезультирующиеЗначенияРазрезов Цикл
		Если СтрокаРазрез.Использование Тогда
			ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(СтрокаРазрез.Измерение); 
			СтруктураОтбораРезультирующихЗначений.Вставить(ИмяРазреза,ЭтотОбъект["Результат"+ИмяРазреза]);
			СтруктураОтбораРезультирующихЗначений.Вставить("Отбор"+ИмяРазреза,Истина);
		КонецЕсли;
	КонецЦикла;
	Запись.ИсходныйНаборРазрезов = фин_УправлениеЗависимостямиСтатейБюджетов.ОпределитьПозициюНабораПоЗависимостям(Истина,СтруктураОтбораИсходныхЗначений);
	Запись.ЗависимыйНаборРазрезов = фин_УправлениеЗависимостямиСтатейБюджетов.ОпределитьПозициюНабораПоЗависимостям(Ложь,СтруктураОтбораРезультирующихЗначений);
КонецПроцедуры

&НаКлиенте
Процедура УправленческоеПодразделениеПриИзменении(Элемент)
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьОтображениеДанных();
КонецПроцедуры
