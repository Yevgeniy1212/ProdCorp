
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("НастройкаРасчета") Тогда
		НастройкаРасчета = Параметры.НастройкаРасчета;
	КонецЕсли;
	Список.Параметры.УстановитьЗначениеПараметра("Настройка",НастройкаРасчета);
	ПереформироватьСписокКолонок();
	НадписьПараметры="Параметры";
КонецПроцедуры

&НаСервере
Процедура ПереформироватьСписокКолонок()
	МассивУдалить = Новый Массив;
	СписокПодчиненных = Новый Массив;
	СписокПодчиненных.Добавить("ОбластьДействияЗависимости");	
	СписокПодчиненных.Добавить("РезультирующиеЗначенияРазрезов");	
	СписокПодчиненных.Добавить("Показатели");
	Для Каждого ЭлементКОчистке Из СписокПодчиненных Цикл
		ЭлементыУдалить = Элементы.Список.ПодчиненныеЭлементы[ЭлементКОчистке].ПодчиненныеЭлементы;
		Для Каждого Элемент Из ЭлементыУдалить Цикл
			Элемент.Видимость = Ложь;
		КонецЦикла;
	КонецЦикла;
	СписокРазрезов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов");
	ИменаРазрезов = Новый СписокЗначений;
	Для Каждого РазрезЭлемент Из СписокРазрезов Цикл
		ИменаРазрезов.Добавить(фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение),фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(РазрезЭлемент.Значение));
	КонецЦикла;
	// создадим колонки по исходным разрезам
	Для Каждого ИмяРазреза Из ИменаРазрезов Цикл
		СтрокиРасчета = НастройкаРасчета.ОграниченияОбластиДействияЗависимости.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования[ИмяРазреза.Значение]));
		Если НастройкаРасчета.Пустая() ИЛИ (СтрокиРасчета.Количество()>0 И СтрокиРасчета[0].Использование) Тогда
			НовыйЭлементФормы = Элементы.Найти(ИмяРазреза.Значение);
			НовыйЭлементФормы.Заголовок = ИмяРазреза.Представление;
			НовыйЭлементФормы.Видимость = Истина;
		КонецЕсли;
	КонецЦикла;
	// создадим колонки по результирующим разрезам
	Для Каждого ИмяРазреза Из ИменаРазрезов Цикл
		СтрокиРасчета = НастройкаРасчета.РезультирующиеЗначенияРазрезов.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования[ИмяРазреза.Значение]));
		Если НастройкаРасчета.Пустая() ИЛИ (СтрокиРасчета.Количество()>0 И СтрокиРасчета[0].Использование) Тогда
			НовыйЭлементФормы = Элементы.Найти("Результат"+ИмяРазреза.Значение);
			НовыйЭлементФормы.Заголовок = ИмяРазреза.Представление;
			НовыйЭлементФормы.Видимость = Истина;
		КонецЕсли;
	КонецЦикла;
	// создадим колонки по показателям
	Для Инд=1 По 3 Цикл
		СтрокиРасчета = НастройкаРасчета.ИспользуемыеПоказатели.НайтиСтроки(Новый Структура("Показатель","Показатель"+Строка(Инд)));
		Если НастройкаРасчета.Пустая() ИЛИ (СтрокиРасчета.Количество()>0 И СтрокиРасчета[0].Использование) Тогда
			НовыйЭлементФормы = Элементы.Найти("Показатель"+Строка(Инд));
			НовыйЭлементФормы.Заголовок = ?(СтрокиРасчета.Количество()>0,СтрокиРасчета[0].Представление,"Показатель"+Строка(Инд));
			НовыйЭлементФормы.Видимость = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРасчетаПриИзменении(Элемент)
	Список.Параметры.УстановитьЗначениеПараметра("Настройка",НастройкаРасчета);
	ПереформироватьСписокКолонок();
КонецПроцедуры

&НаКлиенте
Процедура История(Команда)
	ОткрытьФорму("РегистрСведений.фин_СоставНастроекРасчетаЗависимостейБюджетирования.Форма.ФормаИстория",Новый Структура("НастройкаРасчета",НастройкаРасчета),ЭтотОбъект,КлючУникальности);
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	Структура = Новый Структура("НастройкаРасчета,Использование",НастройкаРасчета,Истина);
	Если ДатаВводаСведений <>'00010101' Тогда
		Структура.Вставить("Период",ДатаВводаСведений);
	КонецЕсли;
	ОткрытьФорму("РегистрСведений.фин_СоставНастроекРасчетаЗависимостейБюджетирования.Форма.ФормаЗаписи",Структура,Элементы.Список,УникальныйИдентификатор);
КонецПроцедуры
