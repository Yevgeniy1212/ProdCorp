
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	ПодготовитьФормуНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не ТаблицыИдентичны(ЭтотОбъект) Тогда
		
		ТекущийГод = Год(ПроизводственныйКалендарь);
		
		СтруктураПараметров = Новый Структура("ТекущийГод, Организация", ТекущийГод, Организация);
		Оповещение = Новый ОписаниеОповещения("ПослеВопросаОЗаписиДанных", ЭтаФорма, СтруктураПараметров);
		
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Записать измененные данные за '") + Формат(ТекущийГод,"ЧГ=0") + НСтр("ru = ' год?'"), РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПроизводственныйКалендарьВыбор(Элемент, ВыбраннаяДата)
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораВидаДня", ЭтаФорма);
	ПоказатьВыборИзМеню(Оповещение, СписокВидовДней, Элементы.ПроизводственныйКалендарь);

КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйКалендарьПриВыводеПериода(Элемент, ОформлениеПериода)
		
	Коллекция_ОформленияДаты = ОформлениеПериода.Даты;

	Для Каждого Строка_ОформленияДаты Из Коллекция_ОформленияДаты Цикл

		ЗначениеВидДня = ВидыДней.Получить(Строка_ОформленияДаты.Дата);
		
		Если ЗначениеВидДня = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Строка_ОформленияДаты.ЦветТекста = ЦветаВидовДней.Получить(ЗначениеВидДня);
		
		Если ЗначениеВидДня = ПредопределенноеЗначение("Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник") ИЛИ
			ЗначениеВидДня = ПредопределенноеЗначение("Перечисление.ВидыДнейПроизводственногоКалендаря.ДополнительныйВыходной") Тогда
			Строка_ОформленияДаты.Шрифт = ШрифтВыделения;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ГодВФормеПриИзменении(Элемент)
	
	Если НЕ ТаблицыИдентичны(ЭтотОбъект) Тогда
		
		ТекущийГод = Год(ПроизводственныйКалендарь);
		СтруктураПараметров = Новый Структура("ТекущийГод, ПрочитатьНовыйГод, Организация", ТекущийГод, Истина, Организация);
		Оповещение = Новый ОписаниеОповещения("ПослеВопросаОЗаписиДанных", ЭтаФорма, СтруктураПараметров);
		
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Записать измененные данные за '") + Формат(ТекущийГод,"ЧГ=0") + НСтр("ru = ' год?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(ГодВФорме) Тогда 
			ТекстСообщения = НСтр("ru = 'Не указан год!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,);
			Возврат;
		КонецЕсли;
			
		ДатаУстановки = Дата(ГодВФорме, 1, 1);

		ПрочитатьДанныеКалендаря(ДатаУстановки);
		
		ПроизводственныйКалендарь = ДатаУстановки;
		УправлениеФормой();	

		// Отображение заполненого календаря
		Элементы.ПроизводственныйКалендарь.Обновить();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГодВФормеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Ожидание = 0;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Для СчГод = ГодВФорме - 50 По ГодВФорме + 50 Цикл
		ДанныеВыбора.Добавить(СчГод,Формат(СчГод,"ЧГ=0"));
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Организация) И ТекущаяОрганизация <> Организация И Модифицированность Тогда
		ЗаКакойГод = ГодВФорме;
		СтруктураПараметров = Новый Структура("ТекущийГод, Организация, ПрочитатьНовыйГод", ЗаКакойГод, ТекущаяОрганизация, Истина);
		Оповещение = Новый ОписаниеОповещения("ПослеВопросаОЗаписиДанных", ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Записать измененные данные за '") + Формат(ЗаКакойГод,"ЧГ=0") + НСтр("ru = ' год?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ДатаУстановки = Дата(Формат(ГодВФорме, "ЧГ=0") + "0101");
		ИнтервалКалендаря(ДатаУстановки);
		
		ПрочитатьДанныеКалендаря(ДатаУстановки);
		
		Элементы.ПроизводственныйКалендарь.Обновить();
		ПроизводственныйКалендарь = ДатаУстановки;
		
		УправлениеФормой();
	КонецЕсли;
	
	ТекущаяОрганизация = Организация;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПервоначальноеЗаполнение(Команда) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ГодВФорме) Тогда 
		ТекстСообщения = НСтр("ru = 'Не указан год!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВопросаОПервоначальномЗаполнении", ЭтаФорма);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Восстановить первоначальное заполнение производственного календаря?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда) Экспорт

	ЗаписатьДанныеРегистраНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Организация = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяОрганизация");
	ТекущаяОрганизация = Организация;
	
	ПроизводственныйКалендарь = ТекущаяДата();
	ГодВФорме = Год(ПроизводственныйКалендарь);
	
	// Заполним список лет
	Для СчГод = ГодВФорме - 50 По ГодВФорме + 50 Цикл
		Элементы.ГодВФорме.СписокВыбора.Добавить(СчГод, Формат(СчГод, "ЧГ=0"));
	КонецЦикла;
	
	Для Каждого День Из Перечисления.фин_ДниНедели Цикл
		ПометкаПлатежный = ?(День = Перечисления.фин_ДниНедели.Воскресенье ИЛИ День = Перечисления.фин_ДниНедели.Суббота, Ложь, Истина);
		СтрокаТЧ = ПлатежныеДни.Добавить(День, День, ПометкаПлатежный);
	КонецЦикла;
	
	ПрочитатьДанныеКалендаря(ПроизводственныйКалендарь);
	
	ШрифтВыделения = Новый Шрифт(,,Истина);
	
	// Назначим Цвета
	ЦветаОформления = Новый Соответствие;
	
	ЦветаОформления.Вставить(Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.Платежный,				Новый Цвет(0,  	150, 170));
	ЦветаОформления.Вставить(Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.НеПлатежный,				Новый Цвет(0,  	  0,   0)); // Черный
	ЦветаОформления.Вставить(Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.Суббота,					Новый Цвет(153,  51,   0));	// Темно-красный
	ЦветаОформления.Вставить(Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.Воскресенье,				Новый Цвет(255,   0,   0));	// Красный
	ЦветаОформления.Вставить(Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.ДополнительныйВыходной, 	Новый Цвет(0,	  0, 186));	// Темно-синий
	ЦветаОформления.Вставить(Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.Праздник,				Новый Цвет(208,  32, 144));	// Фиолетовый
	ЦветаОформления.Вставить(Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.ПустаяСсылка(),			Новый Цвет(0,  	  0,   0));	// Черный

	ЦветаВидовДней = Новый ФиксированноеСоответствие(ЦветаОформления);	
	
	// Заполним список для выбора
	СписокВидовДней = Новый СписокЗначений();
	СписокВидовДней.Добавить(Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.Платежный, 		 		"Платежный");
	СписокВидовДней.Добавить(Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.Праздник,		 		"Праздник");
	СписокВидовДней.Добавить(Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.Суббота,		 			"Суббота");
	СписокВидовДней.Добавить(Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.Воскресенье,	 			"Воскресенье");
	СписокВидовДней.Добавить(Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.ДополнительныйВыходной,	"Дополнительный выходной");
	СписокВидовДней.Добавить(Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.НеПлатежный, 		 	"Не платежный");

КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	ИнтервалКалендаря(ПроизводственныйКалендарь);

	Заголовок = НСтр("ru = 'График платежных дней на '") + Формат(ГодВФорме,"ЧГ=0") + НСтр("ru = ' год'");

КонецПроцедуры

&НаКлиенте
Процедура ИнтервалКалендаря(ДатаУстановки)
    
    Элементы.ПроизводственныйКалендарь.НачалоПериодаОтображения = НачалоГода(ДатаУстановки);
    Элементы.ПроизводственныйКалендарь.КонецПериодаОтображения = КонецГода(ДатаУстановки);

КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеКалендаря(ПериодКалендаря)
	
	РезультатЗапроса = СформироватьЗапросПоКалендарюГрафикаПлатежей(НачалоГода(ПериодКалендаря), КонецГода(ПериодКалендаря));
	
	Если РезультатЗапроса.Пустой() Тогда
		ДанныеКалендаря = ПервоначальноеЗаполнениеРегистра(ПериодКалендаря);
	Иначе
		ДанныеКалендаря = РезультатЗапроса.Выгрузить();
		Элементы.ПроизводственныйКалендарь.ТолькоПросмотр = Ложь;
	КонецЕсли; 
	
	ПреобразоватьДанныеПроизводственногоКалендаря(ДанныеКалендаря);
	ЭталонныеВидыДней = ВидыДней;
	
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьДанныеПроизводственногоКалендаря(ДанныеКалендаря)
	
	ВидыДнейСоответствие = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ДанныеКалендаря Цикл
		ВидыДнейСоответствие.Вставить(СтрокаТаблицы.ДатаКалендаря, СтрокаТаблицы.ВидДня);
	КонецЦикла;
	
	ВидыДней = Новый ФиксированноеСоответствие(ВидыДнейСоответствие);
	
КонецПроцедуры

&НаСервере
Функция ПервоначальноеЗаполнениеРегистра(КонтрольнаяДата, Сообщать = Истина)
	
	ТаблицаРегистра = Новый ТаблицаЗначений;
	ТаблицаРегистра.Колонки.Добавить("ДатаКалендаря");
	ТаблицаРегистра.Колонки.Добавить("ВидДня");
	
	Если Не ЗначениеЗаполнено(Организация) Тогда   
		ТекстСообщения = НСтр("ru = 'Внимание!!! Для заполнения графика необходимо заполнить значение реквизита ""Организация""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация");
		Возврат ТаблицаРегистра;
	КонецЕсли;	
	
	ДатаУстановки = Дата(Формат(ГодВФорме, "ЧГ=0") + "0101");
	
	Результат = СформироватьЗапросПоКалендарюРегл(НачалоГода(ДатаУстановки), КонецГода(ДатаУстановки));
	Если Результат.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен регламентированный производственный календарь за " + Формат(ДатаУстановки, "ДФ=гггг"));
		Элементы.ПроизводственныйКалендарь.ТолькоПросмотр = Истина;
		Возврат ТаблицаРегистра;
	Иначе
		Элементы.ПроизводственныйКалендарь.ТолькоПросмотр = Ложь;
	КонецЕсли;
	РезЗапроса = Результат.Выбрать();
	Пока РезЗапроса.Следующий() Цикл
			
		НоваяЗаписьРегистра = РегистрыСведений.ден_ГрафикПлатежныхДней.СоздатьМенеджерЗаписи();
		ЗаписываемаяДата = РезЗапроса.ДатаКалендаря;
		НоваяЗаписьРегистра.ДатаКалендаря = ЗаписываемаяДата;
		НоваяЗаписьРегистра.Год = Год(ЗаписываемаяДата);
		НоваяЗаписьРегистра.Организация = Организация;
		
		Если РезЗапроса.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье Тогда
			НоваяЗаписьРегистра.ВидДня = Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.Воскресенье;
		ИначеЕсли РезЗапроса.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота Тогда
			НоваяЗаписьРегистра.ВидДня = Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.Суббота;
		ИначеЕсли РезЗапроса.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.ДополнительныйВыходной Тогда
			НоваяЗаписьРегистра.ВидДня = Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.ДополнительныйВыходной;
		ИначеЕсли РезЗапроса.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник Тогда
			НоваяЗаписьРегистра.ВидДня = Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.Праздник;
		ИначеЕсли РезЗапроса.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий
			И ПлатежныеДни[ДеньНедели(ЗаписываемаяДата)-1].Пометка Тогда
			НоваяЗаписьРегистра.ВидДня = Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.Платежный;
		Иначе
			НоваяЗаписьРегистра.ВидДня = Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.НеПлатежный;
		КонецЕсли; 
		
		// Установим ресурс "КалендарныеДни"
		ЗаполнитьРесурсыЗаписиРегистра(НоваяЗаписьРегистра);
		
		НоваяЗаписьРегистра.Записать();
		
		// Запишем в таблицу значений
		НоваяСтрокаТаблицыРегистра = ТаблицаРегистра.Добавить();
		НоваяСтрокаТаблицыРегистра.ДатаКалендаря = ЗаписываемаяДата;
		НоваяСтрокаТаблицыРегистра.ВидДня        = НоваяЗаписьРегистра.ВидДня;
		
	КонецЦикла; 
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("График платежных дней для "+ Организация+" сформирован за " + Формат(ДатаУстановки, "ДФ=гггг")+" год.");
	
	ТаблицаРегистра.Сортировать("ДатаКалендаря");
	
	Возврат ТаблицаРегистра;
	
КонецФункции

&НаСервере
Функция СформироватьЗапросПоКалендарюРегл(ДатаНачалаЗапроса, ДатаОкончанияЗапроса)
	
	ЗапросПоКалендарю = Новый Запрос();
	ЗапросПоКалендарю.УстановитьПараметр("ДатаКалендаря1", ДатаНачалаЗапроса);
	ЗапросПоКалендарю.УстановитьПараметр("ДатаКалендаря2", ДатаОкончанияЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря,
	|	РегламентированныйПроизводственныйКалендарь.ВидДня
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаКалендаря1 И &ДатаКалендаря2
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаКалендаря";	
	
	ЗапросПоКалендарю.Текст = ТекстЗапроса;
	Возврат ЗапросПоКалендарю.Выполнить();
	
КонецФункции   

&НаСервере
Функция СформироватьЗапросПоКалендарюГрафикаПлатежей(ДатаНачалаЗапроса, ДатаОкончанияЗапроса)
	
	ЗапросПоКалендарю = Новый Запрос();
	ЗапросПоКалендарю.УстановитьПараметр("ДатаКалендаря1", ДатаНачалаЗапроса);
	ЗапросПоКалендарю.УстановитьПараметр("ДатаКалендаря2", ДатаОкончанияЗапроса);
	ЗапросПоКалендарю.УстановитьПараметр("Организация", Организация);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ГрафикПлатежныхДней.ДатаКалендаря,
	|	ГрафикПлатежныхДней.ВидДня
	|ИЗ
	|	РегистрСведений.ден_ГрафикПлатежныхДней КАК ГрафикПлатежныхДней
	|ГДЕ
	|	ГрафикПлатежныхДней.ДатаКалендаря МЕЖДУ &ДатаКалендаря1 И &ДатаКалендаря2
	|	И ГрафикПлатежныхДней.Организация = &Организация";	
	
	ЗапросПоКалендарю.Текст = ТекстЗапроса;
	Возврат ЗапросПоКалендарю.Выполнить()
	
КонецФункции 

&НаКлиенте
Процедура ИзменитьВидыДней(ДатыДней, ВидДня)
	
	ВидыДнейСоответствие = СоответствиеПоФиксированномуСоответствию(ВидыДней);
	
	Для Каждого ВыбраннаяДата Из ДатыДней Цикл
		ВидыДнейСоответствие.Вставить(ВыбраннаяДата, ВидДня);
	КонецЦикла;
	
	ВидыДней = Новый ФиксированноеСоответствие(ВидыДнейСоответствие);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьРесурсыЗаписиРегистра(ЗаписьРегистра)
	
 	// рабочий день
	Если ЗаписьРегистра.ВидДня =  Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.Платежный Тогда
		ЗаписьРегистра.КалендарныеДни = 1;
	    			
	// суббота	
	ИначеЕсли ЗаписьРегистра.ВидДня = Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.Суббота Тогда
		ЗаписьРегистра.КалендарныеДни = 1;
		
	// воскресение
	ИначеЕсли ЗаписьРегистра.ВидДня = Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.Воскресенье Тогда
		ЗаписьРегистра.КалендарныеДни = 1;
	
	// дополнительный выходной
	ИначеЕсли ЗаписьРегистра.ВидДня = Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.ДополнительныйВыходной Тогда
		ЗаписьРегистра.КалендарныеДни = 1;
		
	// празничный день и не платежный	
	Иначе  
		ЗаписьРегистра.КалендарныеДни = 0;
		
	КонецЕсли;

КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ТаблицыИдентичны(Форма)
	
	ВидыДней = Форма.ВидыДней;
	ЭталонныеВидыДней = Форма.ЭталонныеВидыДней;
	
	Для Каждого День Из ЭталонныеВидыДней Цикл
		Если День.Значение <> ВидыДней[День.Ключ] Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции

// Создает и заполняет соответствие по данным фиксированного соответствия
//
&НаКлиенте
Функция СоответствиеПоФиксированномуСоответствию(ФиксированноеСоответствие)
	
	НовоеСоответствие = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из ФиксированноеСоответствие Цикл
		НовоеСоответствие.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат НовоеСоответствие;
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораВидаДня(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	ИзменитьВидыДней(Элементы.ПроизводственныйКалендарь.ВыделенныеДаты, ВыбранныйЭлемент.Значение);
	Элементы.ПроизводственныйКалендарь.Обновить();
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте 
Процедура ПослеВопросаОЗаписиДанных(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИзТаблицыВРегистр(Параметры.ТекущийГод, Параметры.Организация);
	КонецЕсли;
	
	Если Параметры.Свойство("ПрочитатьНовыйГод") И Параметры.ПрочитатьНовыйГод Тогда
		
		Если НЕ ЗначениеЗаполнено(ГодВФорме) Тогда 
			ТекстСообщения = НСтр("ru = 'Не указан год!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,);
			Возврат;
		КонецЕсли;
			
		ДатаУстановки = Дата(ГодВФорме, 1, 1);

		ПрочитатьДанныеКалендаря(ДатаУстановки);
		
		ПроизводственныйКалендарь = ДатаУстановки;
		УправлениеФормой();	

		// Отображение заполненого календаря
		Элементы.ПроизводственныйКалендарь.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеРегистраНаСервере()
	
	Если НЕ ТаблицыИдентичны(ЭтотОбъект) Тогда
	
		ЗаписатьИзТаблицыВРегистр(ГодВФорме, Организация);
		
		ДатаУстановки = Дата(ГодВФорме, 1, 1);
		РезультатЗапроса = СформироватьЗапросПоКалендарюГрафикаПлатежей(ДатаУстановки, КонецГода(ДатаУстановки));
		
		Если РезультатЗапроса.Пустой() Тогда
			ДанныеКалендаря = ПервоначальноеЗаполнениеРегистра(ДатаУстановки);
		Иначе
			ДанныеКалендаря = РезультатЗапроса.Выгрузить();
		КонецЕсли;
		
		ПреобразоватьДанныеПроизводственногоКалендаря(ДанныеКалендаря);
		ЭталонныеВидыДней = ВидыДней;
		
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

// Выполняет запись в регистр сведений "ден_ГрафикПлатежныхДней" данных из временной таблицы 
&НаСервере 
Процедура ЗаписатьИзТаблицыВРегистр(ГодВФорме, Организация)

	// Очистим старые данные за год
	НаборЗаписей = РегистрыСведений.ден_ГрафикПлатежныхДней.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Год.Значение		 			= ГодВФорме;
	НаборЗаписей.Отбор.Год.Использование 			= Истина;
	НаборЗаписей.Отбор.Организация.Значение 		= Организация;
	НаборЗаписей.Отбор.Организация.Использование 	= Истина;
	НаборЗаписей.Прочитать();
	
	ЕстьЗаписиВРегистре = НаборЗаписей.Количество() > 0;
	
	// Запишем новые данные за год
	Если ЕстьЗаписиВРегистре Тогда
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.ВидДня = ВидыДней.Получить(Запись.ДатаКалендаря);
			// Установим ресурсы "Пятидневка"
			ЗаполнитьРесурсыЗаписиРегистра(Запись);
		КонецЦикла;  
	Иначе
		Для Каждого ЗначениеДень ИЗ ВидыДней Цикл
			НоваяЗаписьРегистра = НаборЗаписей.Добавить();
			НоваяЗаписьРегистра.ДатаКалендаря = ЗначениеДень.Ключ;
			НоваяЗаписьРегистра.Год			  = Год(ЗначениеДень.Ключ);
			НоваяЗаписьРегистра.ВидДня		  = ЗначениеДень.Значение;
			НоваяЗаписьРегистра.Организация	  = Организация;
			// Установим ресурсы "Пятидневка", "Шестидневка" и "КалендарныеДни"
			ЗаполнитьРесурсыЗаписиРегистра(НоваяЗаписьРегистра);
		КонецЦикла; 
	КонецЕсли;
	
	// запишем набор записей
	НаборЗаписей.Записать();
	
	Модифицированность = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОПервоначальномЗаполнении(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПослеВопросаОПервоначальномЗаполненииНаСервере();
	// Отображение заполненого календаря
	Элементы.ПроизводственныйКалендарь.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПослеВопросаОПервоначальномЗаполненииНаСервере() Экспорт

	ДанныеКалендаря = ПервоначальноеЗаполнениеРегистра(Дата(ГодВФорме, 1, 1));
	ПреобразоватьДанныеПроизводственногоКалендаря(ДанныеКалендаря);
	ЭталонныеВидыДней = ВидыДней;
	
КонецПроцедуры
