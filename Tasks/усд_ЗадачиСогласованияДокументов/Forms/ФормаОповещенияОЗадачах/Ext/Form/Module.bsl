////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	мСписокОтложенногоВремени = усд_УправлениеСогласованиемДокументов.ПолучитьСписокИнтерваловНапоминания();
	ЗначениеОтложенногоВремени = мСписокОтложенногоВремени[0].Значение;
	ПредставлениеОтложенногоВремени = мСписокОтложенногоВремени[0].Представление;
	
	Список.Параметры.УстановитьЗначениеПараметра("Исполнитель",фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"));
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата",ТекущаяДата());
	
	НастроитьПредставлениеСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ОбновитьПоляФормы(Элемент);
	
КонецПроцедуры
 
// Процедура обновляет содержимое заданных объектов формы
//
&НаКлиенте
Процедура ОбновитьПоляФормы(Элемент)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда
		ЗаполнитьПоля("", "Выбрано задач - " + Строка(Элементы.Список.ВыделенныеСтроки.Количество()));	
	ИначеЕсли Элементы.Список.ВыделенныеСтроки.Количество() = 1 Тогда
		ЗаполнитьПоля(Элементы.Список.ТекущиеДанные.Наименование, "Исполнить: " + Формат(Элементы.Список.ТекущиеДанные.СрокИсполнения, "ДФ=""дддд', 'дд ММММ гггг 'г. в' ЧЧ:мм"""));
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПоляФормы()

    // Процедура изменяет содержимое элементов Надпись формы
//
// Параметры
//	Тема - содержимое надписи НадписьТема
//	Напомнить - содержимое надписи НадписьНапомнить
//
&НаКлиенте
Процедура ЗаполнитьПоля(Тема, Напомнить)
	
	НадписьТема      = Тема;
	НадписьНапомнить = Напомнить; 
	
КонецПроцедуры // ЗаполнитьПоля()


// Функция представляет разницу между параметром и текущей датой, в виде строки
//
// Параметры
//	ДатаСрока - Дата формата ДатаВремя
//
Функция СрокСтрокой(ДатаСрока)
	
	РазностьДат = КонецМинуты(ТекущаяДата()) - КонецМинуты(ДатаСрока);
	Если РазностьДат > 0 Тогда
		
		Предлог     = "на";
		Определение = "просрочен";
		Секунды     = РазностьДат;
		
	Иначе
		
		Предлог     = "через";
		Определение = "истекает";
		Секунды     = - РазностьДат;
		
	КонецЕсли;
	
	ЧислоМинут = 1;
	ЧислоЧасов = 0;
	ЧислоДней  = 0;
	
	Если (Секунды >= 60) И (Секунды < 3600) Тогда // в 1 часе 3600 секунд
		ЧислоМинут = Цел(Секунды/60);
	ИначеЕсли (Секунды >= 3600) И (Секунды < 86400) Тогда // в 1 дне 86400 секунд
		
		ЧислоЧасов = Цел(Секунды/(60*60));
		ЧислоМинут = Цел((Секунды - ЧислоЧасов*60*60)/60);
		
	ИначеЕсли Секунды >= 86400 Тогда
		
		ЧислоДней  = Цел(Секунды/(60*60*24));
		ЧислоЧасов = Цел((Секунды - ЧислоДней*60*60*24)/(60*60));
		ЧислоМинут = Цел((Секунды - (ЧислоДней*60*60*24 + ЧислоЧасов*60*60))/60);
		
	КонецЕсли;
	
	Возврат Предлог + " " + ?(ЧислоДней > 0, Строка(ЧислоДней) + " дн. ", "") + ?(ЧислоЧасов > 0, Строка(ЧислоЧасов) + " час. ", "") + Строка(ЧислоМинут) + " мин. " + Определение;
	
КонецФункции // СрокСтрокой()

&НаКлиенте
Процедура ОткрытьЗадачи(Команда)
	
	ОбработатьВыделенныеСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложитьВыбранные(Команда)
	
	ОбработатьВыделенныеСтроки("Отложить");
		
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьЗадачи(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, "Вы уверены, что следует прекратить выделенные напоминания?", РежимДиалогаВопрос.ДаНет, 0);
	Иначе 
		ПослеЗакрытияВопроса(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
        ОбработатьВыделенныеСтроки("Прекратить");
    КонецЕсли;    

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыделенныеСтроки(Режим="Открыть")
	
	ШагПрохода = 0;
	
	Пока ШагПрохода <= Элементы.Список.ВыделенныеСтроки.Количество() - 1 Цикл
		
		ВыделеннаяСтрока = Элементы.Список.ДанныеСтроки(Элементы.Список.ВыделенныеСтроки.Получить(ШагПрохода));
		
		Если Режим = "Открыть" Тогда
			ОткрытьФорму("Задача.усд_ЗадачиСогласованияДокументов.ФормаОбъекта",Новый Структура("Ключ",ВыделеннаяСтрока.Ссылка));
		ИначеЕсли Режим = "Прекратить" Тогда
			ВыполнитьЗадачу(ВыделеннаяСтрока.Ссылка);
		ИначеЕсли (Режим = "Отложить") Тогда
			ОтложитьЗадачу(ВыделеннаяСтрока.Ссылка);
		КонецЕсли;
		
		ШагПрохода = ШагПрохода + 1;
				
	КонецЦикла;
	
	Элементы.Список.Обновить();
	
	усд_ПроцедурыСогласованияКлиент.ПроверитьНапоминанияПользователя();
	
КонецПроцедуры

 
// Процедура отмечает выделенную задачу как выполненную и записывает
//
&НаСервере
Процедура ВыполнитьЗадачу(ТекущаяЗадача)
	
	Задача = ТекущаяЗадача.ПолучитьОбъект();
	Задача.Выполнена = ИСТИНА;
	Если Задача.Исполнитель.Пустая() Тогда
		Задача.Исполнитель = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь");
	КонецЕсли;
	Задача.Записать();
	
КонецПроцедуры // ВыполнитьЗадачу()

// Процедура переносит срок исполнения выделенной Задачи на поздний срок
//
&НаСервере
Процедура ОтложитьЗадачу(ТекущаяЗадача)
	
	Задача = ТекущаяЗадача.ПолучитьОбъект();
	Задача.СрокОповещения = НачалоМинуты(ТекущаяДата() + ЗначениеОтложенногоВремени);
	Задача.Записать();
	
КонецПроцедуры // ОтложитьЗадачу()

&НаКлиенте
Процедура ВыполнитьУтверждениеДокумента(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Не выбрана задача согласования!");
		Возврат;
	ИначеЕсли Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда
		ПоказатьПредупреждение(, "Не доступно согласование по нескольким задачам!");
		Возврат;
	ИначеЕсли Элементы.Список.ТекущиеДанные.ВидЗадачиСогласования<>ПредопределенноеЗначение("Перечисление.усд_ВидыЗадачСогласования.СогласованиеДокумента") Тогда
		ПоказатьПредупреждение(, "Выбранная задача не обрабатывается автоматически!");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.Объект) Тогда
		ПоказатьПредупреждение(, "Не указан объект задачи!");
		Возврат;
	КонецЕсли;
	Если НаМаршруте(Элементы.Список.ТекущиеДанные.Объект)=Неопределено Тогда
		ПоказатьПредупреждение(, "Документ не находится на маршрутах!");
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Обработка.усд_УтверждениеДокументов.Форма", Новый Структура("Документ", Элементы.Список.ТекущиеДанные.Объект));
	
КонецПроцедуры

&НаСервере
Функция НаМаршруте(Документ)
	Возврат усд_УправлениеСогласованиемДокументов.НаМаршруте(Документ);	
КонецФункции

&НаСервере
Процедура НастроитьПредставлениеСроков()
	Элементы.Список.Обновить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗадачиСогласованияДокументовЗадачиПоИсполнителю.Ссылка,
	               |	ЗадачиСогласованияДокументовЗадачиПоИсполнителю.СрокИсполнения
	               |ИЗ
	               |	Задача.усд_ЗадачиСогласованияДокументов.ЗадачиПоИсполнителю(
	               |			&ТекПользователь,
	               |			Выполнена = ЛОЖЬ
	               |				И Оповещение = ИСТИНА
	               |				И СрокОповещения <= &ДатаСреза) КАК ЗадачиСогласованияДокументовЗадачиПоИсполнителю";
	Запрос.УстановитьПараметр("ТекПользователь",фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"));	
	Запрос.УстановитьПараметр("ДатаСреза",ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	УсловноеОформление.Элементы.Очистить();
	Пока Выборка.Следующий() Цикл
		НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование=Истина;
		ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Ссылка");
		ОтборЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение = Выборка.Ссылка;
		ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование=Истина;
		ПолеОформления.Поле=Новый ПолеКомпоновкиДанных("СписокСрокИсполнения");
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",СрокСтрокой(Выборка.СрокИсполнения));
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура АктивизироватьФорму(ВыгрузкаЗадачДляСверки) Экспорт
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата());	
	НастроитьПредставлениеСроков();
	Если (НЕ ЭтотОбъект.ВводДоступен()) Тогда
		ЭтотОбъект.Активизировать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтложенногоВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = мСписокОтложенногоВремени;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтложенногоВремениОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение <> Неопределено Тогда
		ЗначениеОтложенногоВремени = ВыбранноеЗначение;
		ПредставлениеОтложенногоВремени = мСписокОтложенногоВремени.НайтиПоЗначению(ВыбранноеЗначение).Представление;
	КонецЕсли;
КонецПроцедуры
