////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.СправочникПриСозданииНаСервере(ЭтотОбъект);
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если мВыполнена<>ТекущийОбъект.Выполнена И ТекущийОбъект.Выполнена И ТекущийОбъект.Исполнитель.Пустая() Тогда
		ТекущийОбъект.Исполнитель = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если мВыполнена<>ТекущийОбъект.Выполнена И ТекущийОбъект.Выполнена И ТекущийОбъект.Исполнитель.Пустая() Тогда
		ТекущийОбъект.Исполнитель = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если (НЕ ЗначениеЗаполнено(Объект.Исполнитель)) И (Объект.Маршрут.Пустая() И Объект.ВидДокументов.Пустая()) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо определить исполнителя задачи в поле ""Исполнитель""!");
		Отказ = Истина;
	КонецЕсли;
	Если ((мВыполнена<>Объект.Выполнена И Объект.Выполнена) ИЛИ ПараметрыЗаписи.Свойство("ВыполнитьЗадачу")) И Объект.Исполнитель.Пустая() Тогда
		Объект.Исполнитель = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

// Процедура сохраняет значения переменных мЧас и мМинута
//
&НаКлиенте
Процедура ПрисвоитьЧасМинутуИзЭлемента(Элемент)
	
	мЧас    = Час(Объект[Элемент.Имя]);
	мМинута = Минута(Объект[Элемент.Имя]);
	
КонецПроцедуры

// Процедура присваивает дату с учетом сохраненных значений мЧас и мМинута
//
&НаКлиенте
Процедура ПередатьДатуВЭлемент(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	Объект[Элемент.Имя] = НачалоДня(ВыбранноеЗначение) + мЧас*60*60 + мМинута*60;
	мЧас             = 0;
	мМинута          = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполненаПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПрисвоитьЧасМинутуИзЭлемента(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	// Управление выпадающим списком полей дат
	СтандартнаяОбработка = Ложь;
	
	СписокВремен = Новый СписокЗначений;
	
	Если НЕ ЗначениеЗаполнено(Объект[Элемент.Имя]) Тогда
		Объект[Элемент.Имя] = НачалоМинуты(ТекущаяДата());
	КонецЕсли;
	
	Если ДеньГода(Объект[Элемент.Имя]) = ДеньГода(ТекущаяДата()) Тогда
		
		Если Минута(ТекущаяДата()) > 30 Тогда
			ВремяСписка = НачалоМинуты(КонецЧаса(ТекущаяДата()) + 60);
		Иначе
			ВремяСписка = НачалоМинуты(КонецЧаса(ТекущаяДата()) - 29*60);
		КонецЕсли;
		
	Иначе
		ВремяСписка = НачалоДня(Объект[Элемент.Имя]);
	КонецЕсли;
		
	Пока НачалоЧаса(ВремяСписка) < КонецДня(Объект[Элемент.Имя]) Цикл
		
		СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка, "ДФ='дд.ММ.гггг ЧЧ:мм'"));
		ВремяСписка = ВремяСписка + 30*60;
		
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВыборИзСписка", ЭтотОбъект, Новый Структура("ИмяЭлемента", Элемент.Имя));
	ПоказатьВыборИзСписка(Оповещение, СписокВремен, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПередатьДатуВЭлемент(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	ОбновитьОтображениеДанных();
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВидЗадачиСогласованияПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура ВыполнитьУтверждениеДокумента(Команда)
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаНаЗапись", ЭтотОбъект, Новый Структура("Запись", Истина));
		ПоказатьВопрос(Оповещение, "Перед продолжением необходимо записать задачу. Продолжить?", РежимДиалогаВопрос.ДаНет);
	Иначе 
		ПослеЗакрытияВопросаНаЗапись(КодВозвратаДиалога.Да, Новый Структура("Запись", Ложь));
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Параметры.Свойство("Объект") Тогда
			Объект.Объект = Параметры.Объект;
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Объект) Тогда
			Объект.Объект = Документы.фин_Бюджет.ПустаяСсылка();
		КонецЕсли;
		Объект.Инициатор   = ПараметрыСеанса.ТекущийПользователь;
		Объект.Исполнитель = ПараметрыСеанса.ТекущийПользователь;
	Иначе
		Элементы.Маршрут.ТолькоПросмотр			= Истина;
		Элементы.Этап.ТолькоПросмотр			= Истина;
		Элементы.ВидДокументов.ТолькоПросмотр	= Истина;
	КонецЕсли;
	мВыполнена = Объект.Выполнена;
	НадписьЗадача = "Задача";
	НадписьКлассификацияЗадачи = "Классификация задачи";
	НадписьОписание = "Описание";
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы 	= Форма.Элементы;
	Объект 		= Форма.Объект;
	
	Элементы.Наименование.ТолькоПросмотр = Объект.Выполнена ИЛИ ((НЕ Объект.Выполнена) И (Объект.Инициатор <> фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь")));
	Элементы.Оповещение.Доступность      = НЕ Объект.Выполнена;
	Элементы.СрокОповещения.Доступность  = Объект.Оповещение;
	
	Элементы.ВыполнитьУтверждениеДокумента.Видимость = Объект.ВидЗадачиСогласования = ПредопределенноеЗначение("Перечисление.усд_ВидыЗадачСогласования.СогласованиеДокумента");
	Элементы.Выполнена.Видимость = Объект.Выполнена;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаНаЗапись(Ответ, ДопоплнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ДопоплнительныеПараметры.Запись Тогда		
			Попытка
				Записать();
			Исключение
				ПоказатьПредупреждение(, "Не удалось записать задачу!");
				Возврат;
			КонецПопытки;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Объект) Тогда
			ПоказатьПредупреждение(, "Не указан объект задачи!");
			Возврат;
		КонецЕсли;
		Если НаМаршруте(Объект.Объект)=Неопределено Тогда
			ПоказатьПредупреждение(, "Документ не находится на маршрутах!");
			Возврат;
		КонецЕсли;
		ОткрытьФорму("Обработка.усд_УтверждениеДокументов.Форма", Новый Структура("Документ", Объект.Объект));
		Закрыть();		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВыборИзСписка(ВыбранноеВремя, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранноеВремя <> Неопределено Тогда
		Объект[ДополнительныеПараметры.ИмяЭлемента] = ВыбранноеВремя.Значение;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция НаМаршруте(Документ)
	Возврат усд_УправлениеСогласованиемДокументов.НаМаршруте(Документ);	
КонецФункции

