// Выполняется списание номенклатуры по бухгалтерскому учету
//
// Параметры
//  ТаблицаДокумента - таблица с данными, которые необходимы для выполнения списания номенклатуры.
//  ОтражатьВБухгалтерскомУчете – определяет должно ли выполнятся списания для целей бухгалтерского учета.
//  ОтражатьВНалоговомУчете  – определяет должно ли выполнятся списания для целей налогового учета.
//
Процедура ДвижениеПартийТоваров(ТаблицаДокумента = Неопределено, ОтражатьВБухгалтерскомУчете = Истина, ОтражатьВНалоговомУчете = Истина, Отказ = Ложь, Партия = Неопределено, Содержание = "Списаны ТМЗ", НДСВключенВСтоимость = Ложь, НеФормироватьПроводкиБУ=Ложь) Экспорт

	ТаблицаСписания = ТаблицаДокумента;

	Если ТаблицаДокумента.Количество() > 0 Тогда

		ДокументМоментВремени = Новый МоментВремени(ТаблицаДокумента[0].Регистратор.Дата, ТаблицаДокумента[0].Регистратор.Ссылка);

		ВыполнитьСписание(ТаблицаСписания, ДокументМоментВремени, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, Отказ, Партия, Содержание, НДСВключенВСтоимость, НеФормироватьПроводкиБУ);

	КонецЕсли;

КонецПроцедуры // ДвижениеПартийТоваров()

      
/////////////////////////////////////////////////////////////////////////////////
// СПИСАНИЕ ПАРТИЙ ТОВАРОВ ПО ЗАДАННОЙ ТАБЛИЦЕ СПИСАНИЯ

// Списание со склада по строке
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура СписаниеСоСклада(СтрокаДокумента, СтруктураПараметров, Учет, ОтражатьВНалоговомУчете = Истина, Отказ, НДСВключенВСтоимость, НеФормироватьПроводкиБУ=Ложь)
	
	// Партии для данного учета
	ДеревоОстатковПартий = СтруктураПараметров["ДеревоПартийТоваровНаСкладах" + Учет];
		
	// Переменная определяет списывать номенклатуру исходя из стоимости остатка
	// номенклатуры на счете или по указанной в параметрах стоимости.
	СписыватьПоУказаннойСтоимости = Ложь;
	УказаннаяСтоимость = 0;

	Если Учет = "Бух" Тогда
		СчетУчета = СтрокаДокумента.СчетУчетаБУ;
		СтрокаДокумента.СписанныеПартииБУ = ПустаяТаблицаСписанныхПартий(Учет);
		ТаблицаСписанныхПартии = СтрокаДокумента.СписанныеПартииБУ;
		
		// Если стоимость списания указана, то списывать надо по указанной стоимости.
		СписыватьПоУказаннойСтоимости = СтрокаДокумента.СписыватьПоУказаннойСтоимости;
	КонецЕсли;
	
	
	Если СписыватьПоУказаннойСтоимости Тогда
		Если НЕ НДСВключенВСтоимость Тогда
			УказаннаяСтоимость = СтрокаДокумента.СуммаБезНДС;
		Иначе
			УказаннаяСтоимость = СтрокаДокумента.Сумма;
		КонецЕсли;
	КонецЕсли; 

	// Подлежащее погашению при списании количество
	КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
		
	
	//Определим количествоДт для комплектации
	Если СтруктураПараметров.ЕстьКоличествоДт Тогда
		КоличествоОсталосьПогаситьДт = СтрокаДокумента.КоличествоДт;
	Иначе
		КоличествоОсталосьПогаситьДт = КоличествоОсталосьПогасить;
	КонецЕсли;

	СтоимостьБУ  = 0;
	КоличествоБУ = 0;
	УказаннаяСтоимостьНУ = УказаннаяСтоимость;
	Если ДеревоОстатковПартий.Строки.Количество() <> 0 Тогда
        
		// Если указана конкретная партия и на счете учета ведется
		// партионный учет, то в структура отбора добавим партию.
		ОтборПоДокументуОприходования = Неопределено;
		Если ЗначениеЗаполнено(СтрокаДокумента.ДокументОприходования) Тогда
			Если УправлениеЗапасами.ВедетсяПартионныйУчетДляСчета(СчетУчета) Тогда
				ОтборПоДокументуОприходования = СтрокаДокумента.ДокументОприходования;
			КонецЕсли;
		КонецЕсли;

		// Если указан конкретный договор и на счете учета ведется
		// партионный учет, то в структуру отбора добавим договор поставщика.
		ОтборПоДоговоруПостащика = Неопределено;
		Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорПоставщика) Тогда
			Если УправлениеЗапасами.ВедетсяПартионныйУчетДляСчета(СчетУчета) Тогда
				ОтборПоДоговоруПостащика = СтрокаДокумента.ДоговорПоставщика;
			КонецЕсли;
		КонецЕсли;

		// Пустой склад покупателя - значение измерения "Склад" когда не ведется 
		//  учет по складам (или не ведется суммовой учет по складам)
		ПустойСклад = Справочники.Склады.ПустаяСсылка();
		
		СтрокаНоменклатуры = ДеревоОстатковПартий.Строки.Найти(СтрокаДокумента.Номенклатура, "Номенклатура");
		ПартийПоСтроке = ?(СтрокаНоменклатуры = Неопределено, -1, СтрокаНоменклатуры.Строки.Количество() - 1);
        УчетПоПартиямВедется = Новый Соответствие;
				
		
		// Если есть отбор по договору (в случае возврата), сначала попытаемся списать
		// партии отобранные по нему, потом партии вообще
		ВторойПроход = (ОтборПоДоговоруПостащика = Неопределено);
		
		Для Индекс = 0 по ПартийПоСтроке Цикл
			
			СтрокаПартии = СтрокаНоменклатуры.Строки[индекс];
			
			Если СтрокаПартии.СчетУчета <> СчетУчета Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОтборПоДокументуОприходования <> Неопределено Тогда
				Если СтрокаПартии.ДокументОприходования <> ОтборПоДокументуОприходования Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ВторойПроход Тогда
				Если (ОтборПоДоговоруПостащика <> Неопределено) И (ЗначениеЗаполнено(СтрокаПартии.ДокументОприходования)) Тогда
					МетаданныеДокумента = СтрокаПартии.ДокументОприходования.Метаданные();
					Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента) 
						И (НЕ ТипЗнч(СтрокаПартии.ДокументОприходования) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) Тогда
						Если СтрокаПартии.ДокументОприходования.ДоговорКонтрагента <> ОтборПоДоговоруПостащика Тогда
							Если Индекс = ПартийПоСтроке Тогда
								ВторойПроход = Истина;
								Индекс = -1;
							КонецЕсли;
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;

			// Проверки условий:

			// Количество по строке больше 0
			Если НЕ СтрокаПартии.Количество > 0 Тогда
				Если Индекс = ПартийПоСтроке И НЕ ВторойПроход Тогда
					Второйпроход = Истина;
					Индекс = -1;
				КонецЕсли;
				Продолжить;
			КонецЕсли; 
             			               
			Если СтрокаПартии.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / СтрокаПартии.Количество;
				КоличествоДт = КоличествоОсталосьПогаситьДт;
			Иначе
				КоэффСписания = 1;
				КоличествоДт = Окр(КоличествоОсталосьПогаситьДт * СтрокаПартии.Количество / КоличествоОсталосьПогасить,3,1);
			КонецЕсли;
						
			Если СтрокаПартии.КоличествоПартии >= КоличествоОсталосьПогасить Тогда
				КоэффСписанияСтоимости = КоличествоОсталосьПогасить/СтрокаПартии.КоличествоПартии;
			Иначе
				КоэффСписанияСтоимости = 1;
			КонецЕсли;
 
			Количество = Окр(СтрокаПартии.Количество * КоэффСписания,3,1);
			Стоимость  = Окр(СтрокаПартии.Стоимость  * КоэффСписанияСтоимости,2,1);
			СтоимостьПартии  = Окр(СтрокаПартии.Стоимость  * КоэффСписанияСтоимости,2,1);
			
			Если  СтоимостьПартии < 0  И НЕ СписыватьПоУказаннойСтоимости Тогда
				ОбщегоНазначения.СообщитьОбОшибке(""+Учет+". учет. Строка: " + СтрокаДокумента.НомерСтроки +  Символы.ПС
                         + "На счете учете " + СчетУчета  + ", по товару " +  СтрокаДокумента.Номенклатура + " на складе " + СтрокаДокумента.Склад + Символы.ПС
						 + ?(ЗначениеЗаполнено(СтрокаПартии.ДокументОприходования), "по партии " + СтрокаПартии.ДокументОприходования,"")  + " обнаружен отрицательный суммовой остаток " + СтоимостьПартии + "." + Символы.ПС
						 + "Списание " + ?(ЗначениеЗаполнено(СтрокаПартии.ДокументОприходования), "по партии ","") + "не выполнено!"
						 ,,,СтатусСообщения.Внимание); 
                        										
				Продолжить;
			КонецЕсли;
			
			Если СписыватьПоУказаннойСтоимости Тогда // списывать по стоимост, указанной в параметрах
				Стоимость = Окр(УказаннаяСтоимость  * Количество / КоличествоОсталосьПогасить,2,1);
				УказаннаяСтоимость = УказаннаяСтоимость - Стоимость;
			КонецЕсли;

			КоличествоОсталосьПогасить		= КоличествоОсталосьПогасить - Количество;
			КоличествоОсталосьПогаситьДт 	= КоличествоОсталосьПогаситьДт - КоличествоДт;
			
			СтрокаПартии.Количество			= СтрокаПартии.Количество - Количество;
			СтрокаПартии.КоличествоПартии	= СтрокаПартии.КоличествоПартии - Количество;
			СтрокаПартии.Стоимость			= СтрокаПартии.Стоимость  - СтоимостьПартии;
			           			
			СтоимостьБУ  = СтоимостьБУ + Стоимость;
			КоличествоБУ = КоличествоБУ + Количество;
			
			Если Не НеФормироватьПроводкиБУ Тогда
				
				КолонкиДокумента = СтрокаДокумента.Владелец().Колонки;
				
				Проводка						= СтрокаДокумента.Регистратор.Движения.Типовой.Добавить();
				Проводка.Содержание				= ?( НЕ ЗначениеЗаполнено(СтрокаДокумента.СодержаниеПроводки), СтруктураПараметров.СодержаниеПроводки, СтрокаДокумента.СодержаниеПроводки);
				Проводка.СчетКт					= СчетУчета;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
					Проводка, СтрокаДокумента.СтруктурноеПодразделение, "Кт");
	
				// Балансовый счет учета не может корреспондировать с забалансовым
				Если СтрокаДокумента.КорСчетСписанияБУ.Забалансовый = СчетУчета.Забалансовый Тогда
					
					Проводка.СчетДт = СтрокаДокумента.КорСчетСписанияБУ;
					
					Если НЕ КолонкиДокумента.Найти("КорСтруктурноеПодразделение") = Неопределено Тогда
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаДокумента.КорСтруктурноеПодразделение, "Дт");
					Иначе
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаПартии.СтруктурноеПодразделение, "Дт");
					КонецЕсли;

					Если Проводка.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Типовой.Запасы)
						И Проводка.СчетДт <> ПланыСчетов.Типовой.НезавершенноеПроизводство Тогда
						
						// если нет соответствия стратегии выбранному счету, добавим значение
						Если УчетПоПартиямВедется.Получить(Проводка.СчетДт) = Неопределено Тогда
							УчетПоПартиямВедется.Вставить(Проводка.СчетДт, УправлениеЗапасами.ВедетсяПартионныйУчетДляСчета(Проводка.СчетДт));
						КонецЕсли;
						
						ВедетсяПартионныйУчетДляСчета = УчетПоПартиямВедется.Получить(Проводка.СчетДт);
						
						Комплектация = (ТипЗнч(СтрокаДокумента.Регистратор) = Тип("ДокументОбъект.КомплектацияНоменклатуры"));
						
						Если ВедетсяПартионныйУчетДляСчета Тогда
							
							Если НЕ ЗначениеЗаполнено(СтрокаПартии.ДокументОприходования) ИЛИ Комплектация Тогда
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии", СтрокаДокумента.КорСубконтоСписанияБУ3,, );
							Иначе
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии", СтрокаПартии.ДокументОприходования,, );
								СтрокаДокумента.КорСубконтоСписанияБУ3 = Неопределено;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли; 
					
				КонецЕсли;
				
				ЗаполнитьСубконто(	Проводка, СтрокаДокумента, 
									СтрокаДокумента.КорСубконтоСписанияБУ1,
									СтрокаДокумента.КорСубконтоСписанияБУ2,
									СтрокаДокумента.КорСубконтоСписанияБУ3,
									СтрокаПартии.ДокументОприходования,,);
				
				Проводка.Сумма = Стоимость;
				
				Если Проводка.СчетДт.Количественный Тогда
					Проводка.КоличествоДт = КоличествоДт;
				КонецЕсли;
				
				Если Проводка.СчетКт.Количественный Тогда
					Проводка.КоличествоКт = Количество;
				КонецЕсли;
				
				Если Проводка.СчетДт.Валютный Тогда
					Если СтрокаДокумента.Сумма = СтрокаДокумента.СуммаВал Тогда
						Проводка.ВалютаДт = Константы.ВалютаРегламентированногоУчета.Получить();
						Проводка.ВалютнаяСуммаДт = Стоимость;
					Иначе
						Если (ЗначениеЗаполнено(СтрокаДокумента.ДоговорКонтрагента)) И (ТипЗнч(СтрокаДокумента.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
							Проводка.ВалютаДт = СтрокаДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
							Проводка.ВалютнаяСуммаДт = ?(СтрокаДокумента.Сумма = 0, Стоимость, Стоимость * СтрокаДокумента.СуммаВал / СтрокаДокумента.Сумма);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если Проводка <> Неопределено Тогда
					Проводка.Период      = СтрокаДокумента.Регистратор.Дата;
					Проводка.Организация = СтрокаДокумента.Организация;
				КонецЕсли;
			КонецЕсли;
			
				// В таблицу списанных партий записывается строка с информацией.
			 СтрокаСписаннаяПартия               = ТаблицаСписанныхПартии.Добавить();
			 СтрокаСписаннаяПартия.Партия        = СтрокаПартии.ДокументОприходования;
			 СтрокаСписаннаяПартия.Количество    = Количество;
			 СтрокаСписаннаяПартия.СуммаСписания = Стоимость;
			 СтрокаСписаннаяПартия.СуммаСписанияПартии = СтоимостьПартии;
			 
			 СтрокаСписаннаяПартия.СчетУчетаБУ = СчетУчета;
							 
			 Если Индекс = ПартийПоСтроке И НЕ ВторойПроход И КоличествоОсталосьПогасить>0 Тогда
				 ВторойПроход = Истина;
			 	 Индекс = -1;
				 Продолжить;
			 КонецЕсли;
			 
	 	КонецЦикла;
	КонецЕсли; 
	
	// Не списанное количесвто добавим отдельной строкой 
	// в таблицу списанных партий.
	Если КоличествоОсталосьПогасить > 0  Тогда
		
		// В таблицу списанных партий записывается строка с информацией.
		СтрокаСписаннаяПартия				= ТаблицаСписанныхПартии.Добавить();
		СтрокаСписаннаяПартия.Количество	= КоличествоОсталосьПогасить;
		СтрокаСписаннаяПартия.СчетУчетаБУ	= СчетУчета;		
	КонецЕсли;
		
	Если ОтражатьВНалоговомУчете Тогда					 
		СписаниеСоСкладаНУ(СтрокаДокумента, СтруктураПараметров, "Нал", КоличествоБУ, СтоимостьБУ, УказаннаяСтоимостьНУ, СписыватьПоУказаннойСтоимости, Отказ);
	КонецЕсли; 	
	
	Если (КоличествоОсталосьПогасить > 0)
	   И (НЕ СтруктураПараметров.ПроводитьДокументПоРазделуУчета) Тогда
		
		Количество = КоличествоОсталосьПогасить;
		Если Учет = "Бух" Тогда
			
			КолонкиДокумента = СтрокаДокумента.Владелец().Колонки;
			
			Проводка			= СтрокаДокумента.Регистратор.Движения.Типовой.Добавить();
			Проводка.Содержание	= ?( НЕ ЗначениеЗаполнено(СтрокаДокумента.СодержаниеПроводки), СтруктураПараметров.СодержаниеПроводки, СтрокаДокумента.СодержаниеПроводки);
			Проводка.СчетКт		= СчетУчета;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
					Проводка, СтрокаДокумента.СтруктурноеПодразделение, "Кт");
					
			Если НЕ КолонкиДокумента.Найти("КорСтруктурноеПодразделение") = Неопределено Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаДокумента.КорСтруктурноеПодразделение, "Дт");
			Иначе
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаДокумента.СтруктурноеПодразделение, "Дт");
			КонецЕсли;
						
			Если СчетУчета.Забалансовый = СтрокаДокумента.КорСчетСписанияБУ.Забалансовый Тогда
				
				Проводка.СчетДт	= СтрокаДокумента.КорСчетСписанияБУ;
				
				Если Проводка.СчетДт.Количественный Тогда
					Проводка.КоличествоДт = Количество;
				КонецЕсли;
				
			КонецЕсли;
			
			ЗаполнитьСубконто(	Проводка, СтрокаДокумента, 
								СтрокаДокумента.КорСубконтоСписанияБУ1,
								СтрокаДокумента.КорСубконтоСписанияБУ2,
								СтрокаДокумента.КорСубконтоСписанияБУ3,,,);
			
			Проводка.Сумма = 0;
			
			Если Проводка.СчетКт.Количественный Тогда
				Проводка.КоличествоКт = Количество;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Проводка <> Неопределено Тогда
			Проводка.Период			= СтрокаДокумента.Регистратор.Дата;
			Проводка.Организация	= СтрокаДокумента.Организация;
		КонецЕсли;
		
	ИначеЕсли КоличествоОсталосьПогасить > 0 Тогда
        		
		ОбщегоНазначения.СообщитьОбОшибке(""+Учет+". учет. Строка: " + СтрокаДокумента.НомерСтроки + Символы.ПС
						 + "Не списано " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.БазоваяЕдиницаИзмерения 
						 + " товара " + СтрокаДокумента.Номенклатура + ", счет учета " + СчетУчета 
						 + ?(ЗначениеЗаполнено(СтрокаДокумента.СтруктурноеПодразделение), ", подразделение " 
						 + СтрокаДокумента.СтруктурноеПодразделение, "") + ", склад " + СтрокаДокумента.Склад + "");

		Отказ = Истина;

	КонецЕсли;
	
КонецПроцедуры // СписаниеСоСклада()

Процедура СписаниеСоСкладаНУ(СтрокаДокумента, СтруктураПараметров,  Учет, КоличествоБУ, СтоимостьБУ, УказаннаяСтоимость, СписыватьПоУказаннойСтоимости, Отказ, СписокСчетовПроизводства = Неопределено) Экспорт
	
	ДеревоОстатковПартийНУ = СтруктураПараметров["ДеревоПартийТоваровНаСкладах" + Учет];
	ВедениеУчетаВременныхРазницБалансовымМетодом = СтруктураПараметров["ВедениеУчетаВременныхРазницБалансовымМетодом"];
	
	СчетУчетаНУ = СтрокаДокумента.СчетУчетаНУ;
	
	КоличествоОсталосьПогаситьНУ = КоличествоБУ;
		 
	
	ВидУчетаНУ = СтрокаДокумента.Регистратор.ВидУчетаНУ;
	
	Если НЕ ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
	// списываем по стоимости БУ
    		ПроводкаНУ						= СтрокаДокумента.Регистратор.Движения.Налоговый.Добавить();
			ПроводкаНУ.Содержание			= ?( НЕ ЗначениеЗаполнено(СтрокаДокумента.СодержаниеПроводки), СтруктураПараметров.СодержаниеПроводки, СтрокаДокумента.СодержаниеПроводки);
			ПроводкаНУ.СчетКт				= СчетУчетаНУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
					ПроводкаНУ, СтрокаДокумента.СтруктурноеПодразделение, "Кт");
					
			КолонкиДокумента = СтрокаДокумента.Владелец().Колонки;
			
			Если НЕ КолонкиДокумента.Найти("КорСтруктурноеПодразделение") = Неопределено Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(ПроводкаНУ, СтрокаДокумента.КорСтруктурноеПодразделение, "Дт");
			Иначе
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(ПроводкаНУ, СтрокаДокумента.СтруктурноеПодразделение, "Дт");
			КонецЕсли;

 			ПроводкаНУ.Сумма                = СтоимостьБУ;
			
			Если СтрокаДокумента.КорСчетСписанияНУ.Забалансовый = СчетУчетаНУ.Забалансовый Тогда
				
				ПроводкаНУ.СчетДт = СтрокаДокумента.КорСчетСписанияНУ;
				
			КонецЕсли;
			
			ЗаполнитьСубконто(	ПроводкаНУ, СтрокаДокумента, 
							СтрокаДокумента.КорСубконтоСписанияНУ1,
							СтрокаДокумента.КорСубконтоСписанияНУ2,
							СтрокаДокумента.КорСубконтоСписанияНУ3,
			,,);
						
			Если ПроводкаНУ.СчетДт.Количественный Тогда
				ПроводкаНУ.КоличествоДт = КоличествоБУ;
			КонецЕсли;
			
			Если ПроводкаНУ.СчетКт.Количественный Тогда
				ПроводкаНУ.КоличествоКт = КоличествоБУ;
			КонецЕсли;
			
			Если ПроводкаНУ <> Неопределено Тогда
				ПроводкаНУ.Период      = СтрокаДокумента.Регистратор.Дата;
				ПроводкаНУ.Организация = СтрокаДокумента.Организация;
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, ВидУчетаНУ);
			КонецЕсли; 			
			
			Возврат;
	КонецЕсли;
	
	// Списание по партиям НУ с контроллем остатка
	Если СтруктураПараметров.ЕстьКоличествоДт Тогда
		КоличествоОсталосьПогаситьДтНУ = СтрокаДокумента.КоличествоДт;
	Иначе
		КоличествоОсталосьПогаситьДтНУ = КоличествоОсталосьПогаситьНУ;
	КонецЕсли; 
	
	Если ДеревоОстатковПартийНУ.Строки.Количество() <> 0 Тогда           
    
		// Пустой склад покупателя - значение измерения "Склад" когда не ведется 
		//  учет по складам (или не ведется суммовой учет по складам)
		ПустойСклад = Справочники.Склады.ПустаяСсылка();
				
		СтрокаНоменклатурыНУ = ДеревоОстатковПартийНУ.Строки.Найти(СтрокаДокумента.Номенклатура, "Номенклатура");
		ПартийПоСтрокеНУ = ?(СтрокаНоменклатурыНУ = Неопределено, -1, СтрокаНоменклатурыНУ.Строки.Количество() - 1);
		
		Для Индекс = 0 по ПартийПоСтрокеНУ Цикл
			
			СтрокаПартии = СтрокаНоменклатурыНУ.Строки[индекс];			
			
			Если СтрокаПартии.СчетУчета <> СчетУчетаНУ Тогда   				
				Продолжить;
			КонецЕсли;
			
			ВидУчетаНУ = СтрокаДокумента.Регистратор.ВидУчетаНУ;				
						
			Если СтрокаПартии.ВидУчета <> ВидУчетаНУ Тогда   				
				Продолжить;
			КонецЕсли;
			
			Если КоличествоОсталосьПогаситьНУ <= 0 Тогда
				Прервать;
			КонецЕсли;

			Если НЕ СтрокаПартии.Количество > 0 Тогда
				Продолжить;
			КонецЕсли;     			

			Если СтрокаПартии.Количество >= КоличествоОсталосьПогаситьНУ Тогда
				КоэффСписания = КоличествоОсталосьПогаситьНУ / СтрокаПартии.Количество;
				КоличествоДтНУ = КоличествоОсталосьПогаситьДтНУ;
			Иначе
				КоэффСписания = 1;
				КоличествоДтНУ = КоличествоОсталосьПогаситьДтНУ * СтрокаПартии.Количество / КоличествоОсталосьПогаситьНУ;
			КонецЕсли;
						
			Если СтрокаПартии.КоличествоПартии >= КоличествоОсталосьПогаситьНУ Тогда
				КоэффСписанияСтоимости = КоличествоОсталосьПогаситьНУ/СтрокаПартии.КоличествоПартии;
			Иначе
				КоэффСписанияСтоимости = 1;
			КонецЕсли;
            		
			КоличествоНУ = Окр(СтрокаПартии.Количество * КоэффСписания,3,1);
			СтоимостьНУ  = Окр(СтрокаПартии.Стоимость  * КоэффСписанияСтоимости,2,1);
			СтоимостьПартииНУ  = Окр(СтрокаПартии.Стоимость  * КоэффСписанияСтоимости,2,1);
		                      					
			//В случае, если списывается последняя единица товара по виду учета – в проводке отражается вся сумма остатка. 
			//В остальных случаях списывается  сумма в пределах остатка на НУ.
			//Разница с суммой БУ образует ВР.
 
			Если (СтрокаПартии.Стоимость - СтоимостьБУ)>= 0 И  КоэффСписания <> 1 Тогда
				СтоимостьНУ = СтоимостьБУ;
				СуммаВР = 0;
				СтрокаПартии.Стоимость  = СтрокаПартии.Стоимость - СтоимостьБУ;
			Иначе
				СтоимостьНУ = СтоимостьНУ;
				СуммаВР = СтоимостьБУ - СтоимостьНУ;
				СтрокаПартии.Стоимость  = СтрокаПартии.Стоимость - СтоимостьНУ;
			КонецЕсли;

			//в случае возврата поставщиком, то списываем по указанной стоиомости,
			//потом разница между стиомстью отразится как отклонений на счета дохода/затрат
			
			Если СписыватьПоУказаннойСтоимости Тогда // списывать по стоимост, указанной в параметрах
				СтоимостьНУ = Окр(УказаннаяСтоимость  * КоличествоНУ / КоличествоОсталосьПогаситьНУ,2,1);
				УказаннаяСтоимость = УказаннаяСтоимость - СтоимостьНУ;   
				СуммаВР = 0;
			КонецЕсли;   
				
			
			КоличествоОсталосьПогаситьНУ		= КоличествоОсталосьПогаситьНУ - КоличествоНУ;
			КоличествоОсталосьПогаситьДтНУ      = КоличествоОсталосьПогаситьДтНУ - КоличествоДтНУ;
			
			СтрокаПартии.Количество			= СтрокаПартии.Количество - КоличествоНУ;
			СтрокаПартии.КоличествоПартии	= СтрокаПартии.КоличествоПартии - КоличествоНУ;

			
			ПроводкаНУ						= СтрокаДокумента.Регистратор.Движения.Налоговый.Добавить();
			ПроводкаНУ.Содержание			= ?( НЕ ЗначениеЗаполнено(СтрокаДокумента.СодержаниеПроводки), СтруктураПараметров.СодержаниеПроводки, СтрокаДокумента.СодержаниеПроводки);
			ПроводкаНУ.СчетКт				= СчетУчетаНУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
					ПроводкаНУ, СтрокаДокумента.СтруктурноеПодразделение, "Кт");
					
			КолонкиДокумента = СтрокаДокумента.Владелец().Колонки;
			
			СтруктурноеПодразделениеДт = Неопределено;
			Если НЕ КолонкиДокумента.Найти("КорСтруктурноеПодразделение") = Неопределено Тогда
				 СтруктурноеПодразделениеДт = СтрокаДокумента.КорСтруктурноеПодразделение;
			Иначе
				СтруктурноеПодразделениеДт = СтрокаПартии.СтруктурноеПодразделение;
			КонецЕсли;
            ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(ПроводкаНУ, СтруктурноеПодразделениеДт, "Дт");
			
			ПроводкаНУ.Сумма                = СтоимостьНУ;
			
			Если СтрокаДокумента.КорСчетСписанияНУ.Забалансовый = СчетУчетаНУ.Забалансовый Тогда
				
				ПроводкаНУ.СчетДт = СтрокаДокумента.КорСчетСписанияНУ;
				
			КонецЕсли;
			
			ЗаполнитьСубконто(	ПроводкаНУ, СтрокаДокумента, 
							СтрокаДокумента.КорСубконтоСписанияНУ1,
							СтрокаДокумента.КорСубконтоСписанияНУ2,
							СтрокаДокумента.КорСубконтоСписанияНУ3,
			,,);
						
			Если ПроводкаНУ.СчетДт.Количественный Тогда
				ПроводкаНУ.КоличествоДт = КоличествоДтНУ;
			КонецЕсли;
			
			Если ПроводкаНУ.СчетКт.Количественный Тогда
				ПроводкаНУ.КоличествоКт = КоличествоНУ;
			КонецЕсли;
			
			Если ПроводкаНУ <> Неопределено Тогда
				ПроводкаНУ.Период      = СтрокаДокумента.Регистратор.Дата;
				ПроводкаНУ.Организация = СтрокаДокумента.Организация;
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, ВидУчетаНУ);
			КонецЕсли; 	
			
			ПроцедурыНалоговогоУчета.ОтразитьРасходыНаРемонтПроизводственныхОС(СтрокаДокумента.Регистратор.Движения.Налоговый,
										Новый Структура("СчетБУ, СубконтоБУ1, СубконтоБУ2,СубконтоБУ3",
										СтрокаДокумента.КорСчетСписанияБУ, СтрокаДокумента.КорСубконтоСписанияБУ1, СтрокаДокумента.КорСубконтоСписанияБУ2, СтрокаДокумента.КорСубконтоСписанияБУ3),
										Новый Структура("СчетНУ, СубконтоНУ1, СубконтоНУ2,СубконтоНУ3",
										СтрокаДокумента.КорСчетСписанияНУ, СтрокаДокумента.КорСубконтоСписанияНУ1, СтрокаДокумента.КорСубконтоСписанияНУ2, СтрокаДокумента.КорСубконтоСписанияНУ3),
										СтрокаДокумента.Регистратор.Дата, СтрокаДокумента.Организация, СтруктурноеПодразделениеДт, СтрокаДокумента.СтруктурноеПодразделение, ВидУчетаНУ, СтоимостьНУ, КоличествоДтНУ, Отказ, СписокСчетовПроизводства);
									
			
			//отразим временную разницу,...
			Если  СуммаВР <> 0 Тогда
				ПроводкаНУ						= СтрокаДокумента.Регистратор.Движения.Налоговый.Добавить();
				ПроводкаНУ.Содержание			= ?(НЕ ЗначениеЗаполнено(СтрокаДокумента.СодержаниеПроводки), СтруктураПараметров.СодержаниеПроводки, СтрокаДокумента.СодержаниеПроводки);
				ПроводкаНУ.СчетКт				= СчетУчетаНУ;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
					ПроводкаНУ, СтрокаДокумента.СтруктурноеПодразделение, "Кт");
				
				КолонкиДокумента = СтрокаДокумента.Владелец().Колонки;
				
				Если НЕ КолонкиДокумента.Найти("КорСтруктурноеПодразделение") = Неопределено Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(ПроводкаНУ, СтрокаДокумента.КорСтруктурноеПодразделение, "Дт");
				Иначе
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(ПроводкаНУ, СтрокаПартии.СтруктурноеПодразделение, "Дт");
				КонецЕсли;
				
				// Балансовый счет учета не может корреспондировать с забалансовым
				Если СтрокаДокумента.КорСчетСписанияНУ.Забалансовый = СчетУчетаНУ.Забалансовый Тогда
					
					ПроводкаНУ.СчетДт = СтрокаДокумента.КорСчетСписанияНУ;
					
				КонецЕсли;
				
				ЗаполнитьСубконто(	ПроводкаНУ, СтрокаДокумента, 
								СтрокаДокумента.КорСубконтоСписанияНУ1,
								СтрокаДокумента.КорСубконтоСписанияНУ2,
								СтрокаДокумента.КорСубконтоСписанияНУ3,
				,,);
				
				ПроводкаНУ.Сумма = СуммаВР;
				
				Если ПроводкаНУ <> Неопределено Тогда
					ПроводкаНУ.Период      = СтрокаДокумента.Регистратор.Дата;
					ПроводкаНУ.Организация = СтрокаДокумента.Организация;
					ПроводкаНУ.ВидУчетаДт  = Справочники.ВидыУчетаНУ.ВР;
					ПроводкаНУ.ВидУчетаКт  = ПроводкаНУ.ВидУчетаДт;
				КонецЕсли;                 					 
			КонецЕсли;			
						
		КонецЦикла;
	КонецЕсли; 
	
	Если ВедениеУчетаВременныхРазницБалансовымМетодом И (НЕ СтруктураПараметров.ПроводитьДокументПоРазделуУчета) Тогда
		
		// списываем количество НУ
		ПроводкаНУ						= СтрокаДокумента.Регистратор.Движения.Налоговый.Добавить();
		ПроводкаНУ.Содержание			= ?( НЕ ЗначениеЗаполнено(СтрокаДокумента.СодержаниеПроводки), СтруктураПараметров.СодержаниеПроводки, СтрокаДокумента.СодержаниеПроводки);
		ПроводкаНУ.СчетКт				= СчетУчетаНУ;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
		ПроводкаНУ, СтрокаДокумента.СтруктурноеПодразделение, "Кт");
		
		КолонкиДокумента = СтрокаДокумента.Владелец().Колонки;
		
		Если НЕ КолонкиДокумента.Найти("КорСтруктурноеПодразделение") = Неопределено Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(ПроводкаНУ, СтрокаДокумента.КорСтруктурноеПодразделение, "Дт");
		Иначе
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(ПроводкаНУ, СтрокаДокумента.СтруктурноеПодразделение, "Дт");
		КонецЕсли;
		
		ПроводкаНУ.Сумма                = СтоимостьБУ;
		
		Если СтрокаДокумента.КорСчетСписанияНУ.Забалансовый = СчетУчетаНУ.Забалансовый Тогда
			
			ПроводкаНУ.СчетДт = СтрокаДокумента.КорСчетСписанияНУ;
			
		КонецЕсли;
		
		ЗаполнитьСубконто(	ПроводкаНУ, СтрокаДокумента, 
		СтрокаДокумента.КорСубконтоСписанияНУ1,
		СтрокаДокумента.КорСубконтоСписанияНУ2,
		СтрокаДокумента.КорСубконтоСписанияНУ3,
		,,);
		
		Если ПроводкаНУ.СчетДт.Количественный Тогда
			ПроводкаНУ.КоличествоДт = КоличествоОсталосьПогаситьНУ;
		КонецЕсли;
		
		Если ПроводкаНУ.СчетКт.Количественный Тогда
			ПроводкаНУ.КоличествоКт = КоличествоОсталосьПогаситьНУ;
		КонецЕсли;
		
		Если ПроводкаНУ <> Неопределено Тогда
			ПроводкаНУ.Период      = СтрокаДокумента.Регистратор.Дата;
			ПроводкаНУ.Организация = СтрокаДокумента.Организация;
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, ВидУчетаНУ);
		КонецЕсли; 			
		
	ИначеЕсли ВедениеУчетаВременныхРазницБалансовымМетодом И КоличествоОсталосьПогаситьНУ > 0 Тогда

		ОбщегоНазначения.СообщитьОбОшибке(""+Учет+". учет. Строка: " + СтрокаДокумента.НомерСтроки + Символы.ПС
						 + "Не списано " + КоличествоОсталосьПогаситьНУ + " " + СтрокаДокумента.Номенклатура.БазоваяЕдиницаИзмерения 
						 + " товара " + СтрокаДокумента.Номенклатура + ", счет учета " + СчетУчетаНУ + ", вид учета " + ВидУчетаНУ
						 + ?(ЗначениеЗаполнено(СтрокаДокумента.СтруктурноеПодразделение), ", подразделение " 
						 + СтрокаДокумента.СтруктурноеПодразделение, "") + ", склад " + СтрокаДокумента.Склад, "");

		Отказ = Истина;

	КонецЕсли;  	
	
КонецПроцедуры

// Процедура формирует проводки по партионному учету
//
Процедура ВыполнитьСписание(ТаблицаСписания, МоментКон, ОтражатьВБухгалтерскомУчете = Истина, 
							ОтражатьВНалоговомУчете = Истина, Отказ, Партия, Содержание, НДСВключенВСтоимость, НеФормироватьПроводкиБУ=Ложь) Экспорт

	// Структура общих параметров, используемых в большинстве процедур
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("МоментКон", МоментКон);
	СтруктураПараметров.Вставить("Организация", ТаблицаСписания[0].Организация);
	СтруктураПараметров.Вставить("ПроводитьДокументПоРазделуУчета", ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураПараметров.Организация, Перечисления.РазделыУчета.ОценкаТМЗ, СтруктураПараметров.МоментКон.Дата));
	СтруктураПараметров.Вставить("ОтражатьВНалоговомУчете", ОтражатьВНалоговомУчете);
	СтруктураПараметров.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(СтруктураПараметров.Организация, СтруктураПараметров.МоментКон.Дата));
	
	

	Если ТаблицаСписания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Бух = ОтражатьВБухгалтерскомУчете;
	Нал = ОтражатьВНалоговомУчете;

	// Сформируем структура отбора данных при формировании запроса по номенклатуре
	МассивНоменклатуры = ТаблицаСписания.ВыгрузитьКолонку("Номенклатура");
	УдалитьПовторяющиесяЭлементы(МассивНоменклатуры);

	МассивСчетовУчетаБУ = ТаблицаСписания.ВыгрузитьКолонку("СчетУчетаБУ");
	УдалитьПовторяющиесяЭлементы(МассивСчетовУчетаБУ);
	
	Если ОтражатьВНалоговомУчете Тогда
		МассивСчетовУчетаНУ = ТаблицаСписания.ВыгрузитьКолонку("СчетУчетаНУ");
		УдалитьПовторяющиесяЭлементы(МассивСчетовУчетаНУ);
	Иначе                                  		
		МассивСчетовУчетаНУ = Новый Массив;
	КонецЕсли;
		

	МассивСкладов = ТаблицаСписания.ВыгрузитьКолонку("Склад");
	УдалитьПовторяющиесяЭлементы(МассивСкладов);

	МассивОрганизаций = ТаблицаСписания.ВыгрузитьКолонку("Организация");
	УдалитьПовторяющиесяЭлементы(МассивОрганизаций);
	
	//для правильной сортировки запроса необходимо определить стратегии
	//списания для каждого счета и заполнить списки значений
	
	СписокСчетовФИФО 		= Новый СписокЗначений;
	СписокСчетовЛИФО	 	= Новый СписокЗначений;

	//Определим фильтр по структурному подразделению
	Если ТаблицаСписания.Колонки.Найти("СтруктурноеПодразделение") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("СтруктурноеПодразделение");
		ТаблицаСписания.ЗаполнитьЗначения(Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), "СтруктурноеПодразделение");
		ФильтрПодразделения = Неопределено;
	Иначе
		МассивПодразделений = ТаблицаСписания.ВыгрузитьКолонку("СтруктурноеПодразделение");
		УдалитьПовторяющиесяЭлементы(МассивПодразделений);
		ФильтрПодразделения = МассивПодразделений;
	КонецЕсли;

	// получим дату документа
	СтратегииСписания = Новый Соответствие;
	
	Для каждого Строка Из МассивСчетовУчетаБУ Цикл
		
		// если нет соответствия стратегии выбранному счету, добавим значение
		Если СтратегииСписания.Получить(Строка.Ссылка) = Неопределено Тогда
			СтратегииСписания.Вставить(Строка.Ссылка, УправлениеЗапасами.ПолучитьСтратегиюСписанияСчета(Строка.Ссылка));
		КонецЕсли;
		
		СпособСписания = СтратегииСписания.Получить(Строка.Ссылка);
		
		Если СпособСписания = Перечисления.СпособыОценки.ЛИФО Тогда
			СписокСчетовЛИФО.Добавить(Строка.Ссылка);
		ИначеЕсли СпособСписания = Перечисления.СпособыОценки.ФИФО Тогда
			СписокСчетовФИФО.Добавить(Строка.Ссылка);
		КонецЕсли; 
		
	КонецЦикла; 
		
	ДоговорКонтрагент = ТаблицаСписания[0].ДоговорКонтрагента;
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагент) Тогда
		
		Контрагент = Неопределено;
		
		Для Индекс = 1 По 3 Цикл
			Если НЕ ТаблицаСписания.Колонки.Найти("КорСубконтоСписанияБУ" + Индекс) = Неопределено Тогда
				Если ТипЗнч(ТаблицаСписания[0][("КорСубконтоСписанияБУ" + Индекс)]) = Тип("СправочникСсылка.Контрагенты") 
				   И ЗначениеЗаполнено(ТаблицаСписания[0][("КорСубконтоСписанияБУ" + Индекс)]) Тогда
					Контрагент = ТаблицаСписания[0][("КорСубконтоСписанияБУ" + Индекс)];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Контрагент = ДоговорКонтрагент.Владелец;
	КонецЕсли; 

	Если ОтражатьВНалоговомУчете Тогда
		СтруктураПараметров.Вставить("ВидУчетаНУ", ТаблицаСписания[0].Регистратор.ВидУчетаНУ);
	КонецЕсли;
	// Если есть Бух учет
	Если Бух Тогда
		СтруктураПараметров.Вставить(	"ДеревоПартийТоваровНаСкладахБух", 
										ПолучитьТаблицуПартийНаСкладах(	СтруктураПараметров, "Бух", МассивОрганизаций, 
																		МассивСчетовУчетаБУ,  МассивНоменклатуры, 
																		МассивСкладов, Контрагент, Партия, 
																		СписокСчетовЛИФО, СписокСчетовФИФО, ФильтрПодразделения));
		
		// Добавим колонку в которой будут отражаться списанные по БУ партии
		Если ТаблицаСписания.Колонки.Найти("СписанныеПартииБУ") = Неопределено Тогда
			ТаблицаСписания.Колонки.Добавить("СписанныеПартииБУ");
		КонецЕсли;
		
	КонецЕсли;

	Если Нал Тогда
		СтруктураПараметров.Вставить(	"ДеревоПартийТоваровНаСкладахНал", 
										ПолучитьТаблицуПартийНаСкладахНУ(	СтруктураПараметров, "Нал", МассивОрганизаций, 
																		 МассивСчетовУчетаНУ, МассивНоменклатуры, 
																		МассивСкладов, ФильтрПодразделения 
																		 ));
		
			
	КонецЕсли;


			
	СтруктураПараметров.Вставить("Контрагент",         Контрагент);
	СтруктураПараметров.Вставить("СодержаниеПроводки", Содержание);
	СтруктураПараметров.Вставить("ДоговорКонтрагента", ТаблицаСписания[0].ДоговорКонтрагента);
	СтруктураПараметров.Вставить("ЕстьКоличествоДт",   (НЕ ТаблицаСписания.Колонки.Найти("КоличествоДт") = Неопределено));

	// Проверим - существует ли колонка, идентифицирующая случай, когда в таблице есть строки без НУ.
	Если ТаблицаСписания.Колонки.Найти("НеПроводитьВНУ") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("НеПроводитьВНУ", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	// Проверим - существует ли колонка с содержанием проводки.
	Если ТаблицаСписания.Колонки.Найти("СодержаниеПроводки") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("СодержаниеПроводки", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	// Проверим - все ли нужные нам колонки есть на месте.
	Для Индекс = 1 По 3 Цикл

		Если ТаблицаСписания.Колонки.Найти("КорСубконтоСписанияБУ" + Индекс) = Неопределено Тогда
			ТаблицаСписания.Колонки.Добавить("КорСубконтоСписанияБУ" + Индекс);
		КонецЕсли;

	КонецЦикла;
	
	Если ТаблицаСписания.Колонки.Найти("СписыватьПоУказаннойСтоимости") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("СписыватьПоУказаннойСтоимости", Новый ОписаниеТипов("Булево"));
	КонецЕсли;

	Для Каждого СтрокаДокумента Из ТаблицаСписания Цикл

		МассивУчетов = Новый Массив; // массив учетов, в которых нужно отразить данную строку списания
        
		Если Бух Тогда
			МассивУчетов.Добавить("Бух");
		КонецЕсли;

		// ОБРАБОТКА ДАННЫХ ДОКУМЕНТОВ
		
		Для каждого Учет Из МассивУчетов Цикл

			// Списание со склада
			СписаниеСоСклада(СтрокаДокумента, СтруктураПараметров, Учет, ОтражатьВНалоговомУчете, Отказ, НДСВключенВСтоимость, НеФормироватьПроводкиБУ);

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ВыполнитьСписание()

// Удаляет повторяющиеся значения из массива
//
// Параметры:
//	Массив
//
Процедура УдалитьПовторяющиесяЭлементы(Массив) Экспорт
	
	Если ТипЗнч(Массив) = Тип("Массив") Тогда
		
		// Удалим повторы
		Инд=0;
		КолВо = Массив.Количество();
		
		Пока Инд<КолВо Цикл
			
			Инд2 = Инд+1;
			Пока Инд2<КолВо Цикл
				
				Если Массив[Инд2] = Массив[Инд] Тогда
					Массив.Удалить(Инд2);
					КолВо = КолВо-1;
				Иначе
					Инд2 = Инд2+1;
				КонецЕсли;
				
			КонецЦикла; 
			
			Инд = Инд+1;
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет ведется ли учет по складам
//
Функция ВедетсяУчетПоСкладам(Счет) Экспорт

	УчетПоСкладам = Ложь;

	СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады, "ВидСубконто");

	Если СтрокаВидаСубконто <> Неопределено Тогда
		УчетПоСкладам = Истина;
	КонецЕсли;

	Возврат УчетПоСкладам;

КонецФункции // ВедетсяСуммовойУчетПоСкладам()

// Функция проверяет ведется ли суммовой учет по складам
//
Функция ВедетсяСуммовойУчетПоСкладам(Счет) Экспорт

	УчетПоСкладам = Ложь;

	СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады, "ВидСубконто");

	Если СтрокаВидаСубконто <> Неопределено Тогда
		УчетПоСкладам = СтрокаВидаСубконто.Суммовой;
	КонецЕсли;

	Возврат УчетПоСкладам;

КонецФункции // ВедетсяСуммовойУчетПоСкладам()

// Функция проверяет есть ли субконто "склад" на указанном счете
//
Функция ЕстьСубконтоСклады(Счет) Экспорт

	СкладскойУчет = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
	Иначе
		СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады, "ВидСубконто");

		Если СтрокаВидаСубконто <> Неопределено Тогда
			СкладскойУчет = Истина;
		КонецЕсли;
		
	КонецЕсли;

	Возврат СкладскойУчет;

КонецФункции // ЕстьСубконтоСклады()

// Функция проверяет есть ли субконто "Партия" на указанном счете
//
Функция ЕстьСубконтоПартии(Счет) Экспорт

	ПартионныйУчет = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
	Иначе
		СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии, "ВидСубконто");

		Если СтрокаВидаСубконто <> Неопределено Тогда
			ПартионныйУчет = Истина;
		КонецЕсли;
		
	КонецЕсли;

	Возврат ПартионныйУчет;

КонецФункции // ЕстьСубконтоПартии()

// Функция проверяет есть ли субконто "Контрагенты" на указанном счете
//
Функция ЕстьСубконтоКонтрагенты(Счет) Экспорт

	УчетПоКонтрагентам = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
	Иначе
		СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты, "ВидСубконто");

		Если СтрокаВидаСубконто <> Неопределено Тогда
			УчетПоКонтрагентам = Истина;
		КонецЕсли;
		
	КонецЕсли;

	Возврат УчетПоКонтрагентам;

КонецФункции // ЕстьСубконтоКонтрагенты()

Процедура ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Субконто, ЗначениеСубконто1, 
										ЗначениеСубконто2, ЗначениеСубконто3)

	Если ЗначениеЗаполнено(ЗначениеСубконто1) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто1)) Тогда
		Субконто.Вставить(ВидСубконто.ВидСубконто, ЗначениеСубконто1);

	ИначеЕсли ЗначениеЗаполнено(ЗначениеСубконто2) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто2)) Тогда
		Субконто.Вставить(ВидСубконто.ВидСубконто, ЗначениеСубконто2);

	ИначеЕсли ЗначениеЗаполнено(ЗначениеСубконто3) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто3)) Тогда
		Субконто.Вставить(ВидСубконто.ВидСубконто, ЗначениеСубконто3);

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСубконтоПоРеквизитам()

// Процедура устанавливает субконто на счете. Если такое субконто не счете
// отсутствует, то ничего не делается.
//
// Параметры:
//		Счет - Счет, к которому относится субконто
//      Субконто - вид субконто
//		Номер или имя установливаемого субконто
//      Значение субконто - значение устанавливаемого субконто
//
Процедура ЗаполнитьСубконто(Проводка, СтрокаДокумента, СубконтоДт1 = Неопределено, 
							СубконтоДт2 = Неопределено, СубконтоДт3 = Неопределено, 
							СубконтоКт1 = Неопределено, СубконтоКт2 = Неопределено, 
							СубконтоКт3 = Неопределено)

	// Заполняем дебет:
	Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда

		Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл

			Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Номенклатура);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Организация);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Склады")) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Склад);

				Если ЗначениеЗаполнено(СтрокаДокумента.Склад) Тогда
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Склад);

				КонецЕсли;

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
				Если ТипЗнч(СтрокаДокумента.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента.Владелец);

				КонецЕсли;

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента);

			КонецЕсли;

			ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоДт, СубконтоДт1, СубконтоДт2, СубконтоДт3);

		КонецЦикла;

	КонецЕсли;

	// Заполняем кредит
	Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда

		Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл

			Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Номенклатура);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Организация);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Склады")) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Склад);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
				Если ТипЗнч(СтрокаДокумента.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента.Владелец);
				ИначеЕсли ТипЗнч(СубконтоДт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(СубконтоДт1) Тогда
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СубконтоДт1);
				ИначеЕсли ТипЗнч(СубконтоДт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(СубконтоДт2) Тогда
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СубконтоДт2);
				ИначеЕсли ТипЗнч(СубконтоДт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(СубконтоДт3) Тогда
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СубконтоДт3);
				КонецЕсли;

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента);

			КонецЕсли;

			ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоКт, СубконтоКт1, СубконтоКт2, СубконтоКт3);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСубконто()

// Выполняется сортировка списка счетов на счета, по которм вдется разный
// суммовой учет (в части аналитики).
//
// Параметры
//  СчетаУчета  – Список значений - список счетов, который необходимо рассортировать.
//  СчетаУчетаН – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет только по номенклатуре.
//  СчетаУчетаНС – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет по номенклатуре и по складам.
//  СчетаУчетаНП – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет по номенклатуре и по партиям.
//  СчетаУчетаНСП – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет по номенклатуре, складам и партиям.
//  СчетаУчетаКН – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет по номенклатуре и контрагентам.
//  СчетаУчетаКНП – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет по номенклатуре, контрагентам и партиям.
//
Процедура СортировкаСчетовУчета(СчетаУчета, СчетаУчетаН, СчетаУчетаНК, СчетаУчетаНС, СчетаУчетаНП, 
								СчетаУчетаНКП, СчетаУчетаНСП, СчетаУчетаНКонтП, СчетаУчетаНКонтК, 
								СчетаУчетаНКонтС, СчетаУчетаНКонт)

	Для каждого Счет Из СчетаУчета Цикл

		Если ВедетсяСуммовойУчетПоСкладам(Счет) И ЕстьСубконтоПартии(Счет)  Тогда
			СчетаУчетаНСП.Добавить(Счет);

		ИначеЕсли ВедетсяСуммовойУчетПоСкладам(Счет) Тогда
			Если ЕстьСубконтоКонтрагенты(Счет) Тогда
				СчетаУчетаНКонтС.Добавить(Счет);
			Иначе
				СчетаУчетаНС.Добавить(Счет);
			КонецЕсли;

		ИначеЕсли ЕстьСубконтоПартии(Счет)Тогда
			Если ЕстьСубконтоСклады(Счет) Тогда
				СчетаУчетаНКП.Добавить(Счет);
			ИначеЕсли ЕстьСубконтоКонтрагенты(Счет) Тогда
				СчетаУчетаНКонтП.Добавить(Счет);
			Иначе
				СчетаУчетаНП.Добавить(Счет);
			КонецЕсли; 
			
		Иначе
			Если ЕстьСубконтоСклады(Счет) Тогда
				Если НЕ ЕстьСубконтоКонтрагенты(Счет) Тогда
					СчетаУчетаНК.Добавить(Счет);
				Иначе
					СчетаУчетаНКонтК.Добавить(Счет);
				КонецЕсли;
				
			Иначе
				Если НЕ ЕстьСубконтоКонтрагенты(Счет) Тогда
					СчетаУчетаН.Добавить(Счет);
				Иначе
					СчетаУчетаНКонт.Добавить(Счет);
				КонецЕсли;
			КонецЕсли; 
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // СортировкаСчетовУчета()

Процедура СортировкаСчетовУчетаНУ(СчетаУчетаНУ, СчетаУчетаН_НУ, СчетаУчетаНК_НУ, СчетаУчетаНС_НУ)

	Для каждого Счет Из СчетаУчетаНУ Цикл

		//Если ВедетсяСуммовойУчетПоСкладам(Счет) И ЕстьСубконтоПартии(Счет)  Тогда
		//	СчетаУчетаНСП.Добавить(Счет);

		Если ВедетсяСуммовойУчетПоСкладам(Счет) Тогда
			СчетаУчетаНС_НУ.Добавить(Счет);			
			
		Иначе
			Если ЕстьСубконтоСклады(Счет) Тогда
				СчетаУчетаНК_НУ.Добавить(Счет);
				
			Иначе
				СчетаУчетаН_НУ.Добавить(Счет);
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СортировкаСчетовУчета()


// Формирует запрос по остаткам партий товаров на конец рабочего  периода
//
// Параметры:
//  МоментКон      - момент времени, на которой возвращаются остатки.
//
// Возвращаемое значение:
//	Результат запроса, выгруженный в таблицу значений.
//
Функция ПолучитьТаблицуПартийНаСкладах(СтруктураПараметров, Учет, Организации, СчетаУчета, Номенклатура = Неопределено, Склады = Неопределено, Контрагент = Неопределено, Партия = Неопределено, СписокСчетовЛИФО, СписокСчетовФИФО, ФильтрПодразделения = Неопределено) Экспорт
	
	Если НЕ СтруктураПараметров.ПроводитьДокументПоРазделуУчета Тогда
		Возврат Новый ДеревоЗначений();
	КонецЕсли;

	// Сортировка счетов учета
	СчетаУчетаН			= Новый СписокЗначений; // счета, с суммовым учетом только по номенклатуре
	СчетаУчетаНК		= Новый СписокЗначений; // счета, с суммовым учетом только по номенклатуре и количественным по складу
	СчетаУчетаНС		= Новый СписокЗначений; // счета, с суммовым учетом по номенклатуре и складам
	СчетаУчетаНП		= Новый СписокЗначений; // счета, с суммовым учетом по номенклатуре и партиям
	СчетаУчетаНКП		= Новый СписокЗначений; // счета, с суммовым учетом по номенклатуре и партиям и количественным по складу
	СчетаУчетаНСП		= Новый СписокЗначений; // счета, с суммовым учетом по номенклатуре, складам и партиям
	СчетаУчетаНКонт		= Новый СписокЗначений; // счета, с суммовым учетом по номенклатуре, контрагенту
	СчетаУчетаНКонтП	= Новый СписокЗначений; // счета, с суммовым учетом по номенклатуре, контрагенту и партиям
	СчетаУчетаНКонтК	= Новый СписокЗначений; // счета, с суммовым учетом по номенклатуре и контрагентам и количественным по складу
	СчетаУчетаНКонтС	= Новый СписокЗначений; // счета, с суммовым учетом по номенклатуре, контрагентам и складам

	СортировкаСчетовУчета(	СчетаУчета, СчетаУчетаН, СчетаУчетаНК, СчетаУчетаНС, СчетаУчетаНП, 
							СчетаУчетаНКП, СчетаУчетаНСП, СчетаУчетаНКонтП, СчетаУчетаНКонтК,
							СчетаУчетаНКонтС, СчетаУчетаНКонт);
  							
							
	ВидСубконтоНоменклатура	= ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура;
	ВидСубконтоПартии		= ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии;
	ВидСубконтоСклады		= ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады;
	ВидСубконтоКонтрагенты	= ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты;

	ВидыСубконтоН = Новый Массив;
	ВидысубконтоН.Добавить(ВидСубконтоНоменклатура);
	
	ВидыСубконтоНКонт = Новый Массив;
	ВидысубконтоНКонт.Добавить(ВидСубконтоНоменклатура);
	ВидысубконтоНКонт.Добавить(ВидСубконтоКонтрагенты);
	
	ВидыСубконтоНС = Новый Массив;
	ВидысубконтоНС.Добавить(ВидСубконтоНоменклатура);
	ВидысубконтоНС.Добавить(ВидСубконтоСклады);

	ВидыСубконтоНП = Новый Массив;
	ВидысубконтоНП.Добавить(ВидСубконтоНоменклатура);
	ВидысубконтоНП.Добавить(ВидСубконтоПартии);
	
	ВидыСубконтоНСП = Новый Массив;
	ВидысубконтоНСП.Добавить(ВидСубконтоНоменклатура);
	ВидысубконтоНСП.Добавить(ВидСубконтоПартии);
	ВидысубконтоНСП.Добавить(ВидСубконтоСклады);
	
	ВидыСубконтоНКонтП = Новый Массив;
	ВидыСубконтоНКонтП.Добавить(ВидСубконтоНоменклатура);
	ВидыСубконтоНКонтП.Добавить(ВидСубконтоКонтрагенты);
	ВидыСубконтоНКонтП.Добавить(ВидСубконтоПартии);
	
	ВидыСубконтоНКонтС = Новый Массив;
	ВидыСубконтоНКонтС.Добавить(ВидСубконтоНоменклатура);
	ВидыСубконтоНКонтС.Добавить(ВидСубконтоКонтрагенты);
	ВидыСубконтоНКонтС.Добавить(ВидСубконтоСклады);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментКон",			СтруктураПараметров.МоментКон);
	Запрос.УстановитьПараметр("Организации",		Организации);
	Запрос.УстановитьПараметр("СчетаУчетаН",		СчетаУчетаН);
	Запрос.УстановитьПараметр("СчетаУчетаНК",		СчетаУчетаНК);
	Запрос.УстановитьПараметр("СчетаУчетаНС",		СчетаУчетаНС);
		
	Запрос.УстановитьПараметр("СчетаУчетаНП",		СчетаУчетаНП);
	Запрос.УстановитьПараметр("СчетаУчетаНКП",		СчетаУчетаНКП);
	Запрос.УстановитьПараметр("СчетаУчетаНСП",		СчетаУчетаНСП);
	Запрос.УстановитьПараметр("СчетаУчетаНКонт",	СчетаУчетаНКонт);
	Запрос.УстановитьПараметр("СчетаУчетаНКонтП",	СчетаУчетаНКонтП);
	Запрос.УстановитьПараметр("СчетаУчетаНКонтК",	СчетаУчетаНКонтК);
	Запрос.УстановитьПараметр("СчетаУчетаНКонтС",	СчетаУчетаНКонтС);
	Запрос.УстановитьПараметр("Номенклатура",		Номенклатура);
	Запрос.УстановитьПараметр("Контрагент",			Контрагент);
	Запрос.УстановитьПараметр("Склады",				Склады);
	Запрос.УстановитьПараметр("ВидысубконтоН",		ВидысубконтоН);
	Запрос.УстановитьПараметр("ВидысубконтоНС",		ВидысубконтоНС);
	Запрос.УстановитьПараметр("ВидысубконтоНП",		ВидысубконтоНП);
	Запрос.УстановитьПараметр("ВидысубконтоНСП",	ВидысубконтоНСП);
	Запрос.УстановитьПараметр("ВидыСубконтоНКонт",	ВидыСубконтоНКонт);
	Запрос.УстановитьПараметр("ВидыСубконтоНКонтП",	ВидыСубконтоНКонтП);
	Запрос.УстановитьПараметр("ВидыСубконтоНКонтС",	ВидыСубконтоНКонтС);
	Запрос.УстановитьПараметр("ПустойСклад",		Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяПартия",		Неопределено);
	Запрос.УстановитьПараметр("Контрагент",			Контрагент);
	Запрос.УстановитьПараметр("Партия",				Партия);
	Запрос.УстановитьПараметр("ПустаяДата",			Дата("00010101"));
	
	Запрос.УстановитьПараметр("СписокСчетовЛИФО",      СписокСчетовЛИФО);
	Запрос.УстановитьПараметр("СписокСчетовФИФО",      СписокСчетовФИФО);
	
	Запрос.УстановитьПараметр("ФильтрПодразделения",   ФильтрПодразделения);

	Текст = "";
	
	Если СчетаУчетаН.Количество() > 0 Тогда

		Текст = Текст + "
		|ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	&ПустаяДата КАК ДатаПартииДляЛИФО,
		|	&ПустаяДата КАК ДатаПартииДляФИФО,
		|	&ПустаяДата КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	Остатки.Организация КАК Организация,
		|	Остатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ КАК Количество,
		|	ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ КАК КоличествоПартии,
		|	ВЫБОР КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаОстатокДт КОНЕЦ КАК Стоимость
	    |ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&МоментКон, Счет В (&СчетаУчетаН), &ВидыСубконтоН,
        |										"+ ?(ЗначениеЗаполнено(ФильтрПодразделения), "(СтруктурноеПодразделение В (&ФильтрПодразделения) ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И ", "") + "Субконто1 В (&Номенклатура) И Организация В (&Организации)) КАК Остатки
		|
		|";
	КонецЕсли;
	
	Если СчетаУчетаНКонт.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Текст = Текст + "
		|ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	&ПустаяДата КАК ДатаПартииДляЛИФО,
		|	&ПустаяДата КАК ДатаПартииДляФИФО,
		|	&ПустаяДата КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	Остатки.Организация КАК Организация,
		|	Остатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ КАК Количество,
		|	ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ КАК КоличествоПартии,
		|	ВЫБОР КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаОстатокДт КОНЕЦ КАК Стоимость
	    |ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&МоментКон, Счет В (&СчетаУчетаНКонт), &ВидыСубконтоНКонт,
        |										"+ ?(ЗначениеЗаполнено(ФильтрПодразделения), "(СтруктурноеПодразделение В (&ФильтрПодразделения) ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И ", "") + "Субконто1 В (&Номенклатура) И Субконто2 В (&Контрагент) И Организация В (&Организации)) КАК Остатки
		|
		|";
	КонецЕсли;
	
	Если СчетаУчетаНК.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.СчетУчета,
		|	Остатки.Номенклатура,
		|	Остатки.ДатаПартииДляЛИФО,
		|	Остатки.ДатаПартииДляФИФО,
		|	Остатки.ДокументОприходованияДата,
		|	Остатки.ДокументОприходования,
		|	Остатки.Организация,
		|	Остатки.СтруктурноеПодразделение,
		|	СУММА(Остатки.Количество) КАК Количество,
		|	СУММА(Остатки.КоличествоПартии) КАК КоличествоПартии,
		|	СУММА(Остатки.Стоимость) КАК Стоимость
		|ИЗ
		|	(ВЫБРАТЬ
		|		Остатки.Счет КАК СчетУчета,
		|		Остатки.Субконто1 КАК Номенклатура,
		|		&ПустаяДата КАК ДатаПартииДляЛИФО,
		|		&ПустаяДата КАК ДатаПартииДляФИФО,
		|		&ПустаяДата КАК ДокументОприходованияДата,
		|		&ПустаяПартия КАК ДокументОприходования,
		|		Остатки.Организация КАК Организация,
		|		Остатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|		ВЫБОР
		|			КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ Остатки.КоличествоОстатокДт
		|		КОНЕЦ КАК Количество,
		|		0 КАК КоличествоПартии,
		|		0 КАК Стоимость
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Остатки(
		|			&МоментКон,
		|			Счет В (&СчетаУчетаНК),
		|			&ВидыСубконтоНС,
		|			" + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(СтруктурноеПодразделение В (&ФильтрПодразделения) ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И ", "") + "
		|			Субконто1 В (&Номенклатура)
		|			    И Субконто2 В (&Склады)
		|			    И Организация В (&Организации)) КАК Остатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Остатки.Счет,
		|		Остатки.Субконто1,
		|		&ПустаяДата,
		|		&ПустаяДата,
		|		&ПустаяДата,
		|		&ПустаяПартия,
		|		Остатки.Организация,
		|		Остатки.СтруктурноеПодразделение,
		|		0,
		|		ВЫБОР
		|			КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ Остатки.КоличествоОстатокДт
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ Остатки.СуммаОстатокДт
		|		КОНЕЦ
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Остатки(
		|			&МоментКон,
		|			Счет В (&СчетаУчетаНК),
		|			&ВидыСубконтоНС,
		|			" + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(СтруктурноеПодразделение В (&ФильтрПодразделения) ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И ", "") + "
		|			Субконто1 В (&Номенклатура)
		|			    И Организация В (&Организации)) КАК Остатки) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.СчетУчета,
		|	Остатки.Номенклатура,
		|	Остатки.Организация,
		|	Остатки.СтруктурноеПодразделение,
		|	Остатки.ДатаПартииДляЛИФО,
		|	Остатки.ДатаПартииДляФИФО,
		|	Остатки.ДокументОприходованияДата,
		|	Остатки.ДокументОприходования";
		
	КонецЕсли;
	
	Если СчетаУчетаНКонтК.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.СчетУчета,
		|	Остатки.Номенклатура,
		|	Остатки.ДатаПартииДляЛИФО,
		|	Остатки.ДатаПартииДляФИФО,
		|	Остатки.ДокументОприходованияДата,
		|	Остатки.ДокументОприходования,
		|	Остатки.Организация,
		|	Остатки.СтруктурноеПодразделение,
		|	СУММА(Остатки.Количество) КАК Количество,
		|	СУММА(Остатки.КоличествоПартии) КАК КоличествоПартии,
		|	СУММА(Остатки.Стоимость) КАК Стоимость
		|ИЗ
		|	(ВЫБРАТЬ
		|		Остатки.Счет КАК СчетУчета,
		|		Остатки.Субконто1 КАК Номенклатура,
		|		&ПустаяДата КАК ДатаПартииДляЛИФО,
		|		&ПустаяДата КАК ДатаПартииДляФИФО,
		|		&ПустаяДата КАК ДокументОприходованияДата,
		|		&ПустаяПартия КАК ДокументОприходования,
		|		Остатки.Организация КАК Организация,
		|		Остатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|		ВЫБОР
		|			КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ Остатки.КоличествоОстатокДт
		|		КОНЕЦ КАК Количество,
		|		0 КАК КоличествоПартии,
		|		0 КАК Стоимость
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Остатки(
		|			&МоментКон,
		|			Счет В (&СчетаУчетаНКонтК),
		|			&ВидыСубконтоНКонтС,
		|			" + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(СтруктурноеПодразделение В (&ФильтрПодразделения) ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И ", "") + "
		|			Субконто1 В (&Номенклатура)
		|			    И Субконто2 В (&Контрагент)
		|			    И Субконто3 В (&Склады)
		|			    И Организация В (&Организации)) КАК Остатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Остатки.Счет,
		|		Остатки.Субконто1,
		|		&ПустаяДата,
		|		&ПустаяДата,
		|		&ПустаяДата,
		|		&ПустаяПартия,
		|		Остатки.Организация,
		|		Остатки.СтруктурноеПодразделение,
		|		0,
		|		ВЫБОР
		|			КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ Остатки.КоличествоОстатокДт
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ Остатки.СуммаОстатокДт
		|		КОНЕЦ
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Остатки(
		|			&МоментКон,
		|			Счет В (&СчетаУчетаНКонтК),
		|			&ВидыСубконтоНКонтС,
		|			" + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(СтруктурноеПодразделение В (&ФильтрПодразделения) ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И ", "") + "
		|			Субконто1 В (&Номенклатура)
		|			И Субконто2 В (&Контрагент)
		|			    И Организация В (&Организации)) КАК Остатки) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.СчетУчета,
		|	Остатки.Номенклатура,
		|	Остатки.Организация,
		|	Остатки.СтруктурноеПодразделение,
		|	Остатки.ДатаПартииДляЛИФО,
		|	Остатки.ДатаПартииДляФИФО,
		|	Остатки.ДокументОприходованияДата,
		|	Остатки.ДокументОприходования";
		
	КонецЕсли;
	
	Если СчетаУчетаНС.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "
		|ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	&ПустаяДата КАК ДатаПартииДляЛИФО,
		|	&ПустаяДата КАК ДатаПартииДляФИФО,
		|	&ПустаяДата КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	Остатки.Организация КАК Организация,
		|	Остатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	ВЫБОР
		|		КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ Остатки.КоличествоОстатокДт
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ Остатки.КоличествоОстатокДт
		|	КОНЕЦ КАК КоличествоПартии,
		|	ВЫБОР
		|		КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ Остатки.СуммаОстатокДт
		|	КОНЕЦ КАК Стоимость 
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(
		|		&МоментКон,
		|		Счет В (&СчетаУчетаНС),
		|		&ВидыСубконтоНС,
		|		" + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(СтруктурноеПодразделение В (&ФильтрПодразделения) ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И ", "") + "
		|		Субконто1 В (&Номенклатура)
		|		    И Субконто2 В (&Склады)
		|		    И Организация В (&Организации)) КАК Остатки
		|
		|";		
		
	КонецЕсли;
	
	Если СчетаУчетаНКонтС.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "
		|ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	&ПустаяДата КАК ДатаПартииДляЛИФО,
		|	&ПустаяДата КАК ДатаПартииДляФИФО,
		|	&ПустаяДата КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	Остатки.Организация КАК Организация,
		|	Остатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	ВЫБОР
		|		КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ Остатки.КоличествоОстатокДт
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ Остатки.КоличествоОстатокДт
		|	КОНЕЦ КАК КоличествоПартии,
		|	ВЫБОР
		|		КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ Остатки.СуммаОстатокДт
		|	КОНЕЦ КАК Стоимость
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(
		|		&МоментКон,
		|		Счет В (&СчетаУчетаНКонтС),
		|		&ВидыСубконтоНКонтС,
		|		" + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(СтруктурноеПодразделение В (&ФильтрПодразделения) ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И ", "") + "
		|		Субконто1 В (&Номенклатура)
		|			И Субконто2 В (&Контрагент)
		|		    И Субконто3 В (&Склады)
		|		    И Организация В (&Организации)) КАК Остатки
		|
		|";
		
	КонецЕсли;

	Если СчетаУчетаНП.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "
		|ВЫБРАТЬ
		|	ОбщийЗапрос.СчетУчета,
		|	ОбщийЗапрос.Номенклатура,
		|	ОбщийЗапрос.ДатаПартииДляЛИФО,
		|	ОбщийЗапрос.ДатаПартииДляФИФО,
		|	ОбщийЗапрос.ДокументОприходованияДата,
		|	ОбщийЗапрос.ДокументОприходования,
		|	ОбщийЗапрос.Организация,
		|	ОбщийЗапрос.СтруктурноеПодразделение,
		|	ОбщийЗапрос.Количество,
		|	ОбщийЗапрос.КоличествоПартии,
		|	ОбщийЗапрос.Стоимость
		|ИЗ
		|	(ВЫБРАТЬ
		|		Остатки.Счет КАК СчетУчета,
		|		Остатки.Субконто1 КАК Номенклатура,
		|		ВЫБОР
		|			КОГДА Остатки.Счет В (&СписокСчетовЛИФО)
		|				ТОГДА Остатки.Субконто2.Дата
		|			ИНАЧЕ &ПустаяДата
		|		КОНЕЦ КАК ДатаПартииДляЛИФО,
		|		ВЫБОР
		|			КОГДА Остатки.Счет В (&СписокСчетовФИФО)
		|				ТОГДА Остатки.Субконто2.Дата
		|			ИНАЧЕ &ПустаяДата
		|		КОНЕЦ КАК ДатаПартииДляФИФО,
		|		Остатки.Субконто2.Дата КАК ДокументОприходованияДата,
		|		Остатки.Субконто2 КАК ДокументОприходования,
		|		Остатки.Организация КАК Организация,
		|		Остатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|		ВЫБОР
		|			КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ Остатки.КоличествоОстатокДт
		|		КОНЕЦ КАК Количество,
		|		ВЫБОР
		|			КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ Остатки.КоличествоОстатокДт
		|		КОНЕЦ КАК КоличествоПартии,
		|		ВЫБОР
		|			КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ Остатки.СуммаОстатокДт
		|		КОНЕЦ КАК Стоимость
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Остатки(
		|			&МоментКон,
		|			Счет В (&СчетаУчетаНП),
		|			&ВидыСубконтоНП,
		|			" + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(СтруктурноеПодразделение В (&ФильтрПодразделения) ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И ", "") + "
		|			Субконто1 В (&Номенклатура)
		|			    " + ?(НЕ ЗначениеЗаполнено(Партия), "", "И Субконто2 В (&Партия) ")+ "
		|			    И Организация В (&Организации)) КАК Остатки) КАК ОбщийЗапрос
		|";
		
	КонецЕсли;
	
	Если СчетаУчетаНКонтП.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "
		|ВЫБРАТЬ
		|	ОбщийЗапрос.СчетУчета,
		|	ОбщийЗапрос.Номенклатура,
		|	ОбщийЗапрос.ДатаПартииДляЛИФО,
		|	ОбщийЗапрос.ДатаПартииДляФИФО,
		|	ОбщийЗапрос.ДокументОприходованияДата,
		|	ОбщийЗапрос.ДокументОприходования,
		|	ОбщийЗапрос.Организация,
		|	ОбщийЗапрос.СтруктурноеПодразделение,
		|	ОбщийЗапрос.Количество,
		|	ОбщийЗапрос.КоличествоПартии,
		|	ОбщийЗапрос.Стоимость
		|ИЗ
		|	(ВЫБРАТЬ
		|		Остатки.Счет КАК СчетУчета,
		|		Остатки.Субконто1 КАК Номенклатура,
		|		ВЫБОР
		|			КОГДА Остатки.Счет В (&СписокСчетовЛИФО)
		|				ТОГДА Остатки.Субконто3.Дата
		|			ИНАЧЕ &ПустаяДата
		|		КОНЕЦ КАК ДатаПартииДляЛИФО,
		|		ВЫБОР
		|			КОГДА Остатки.Счет В (&СписокСчетовФИФО)
		|				ТОГДА Остатки.Субконто3.Дата
		|			ИНАЧЕ &ПустаяДата
		|		КОНЕЦ КАК ДатаПартииДляФИФО,
		|		Остатки.Субконто3.Дата КАК ДокументОприходованияДата,
		|		Остатки.Субконто3 КАК ДокументОприходования,
		|		Остатки.Организация КАК Организация,
		|		Остатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|		ВЫБОР
		|			КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ Остатки.КоличествоОстатокДт
		|		КОНЕЦ КАК Количество,
		|		ВЫБОР
		|			КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ Остатки.КоличествоОстатокДт
		|		КОНЕЦ КАК КоличествоПартии,
		|		ВЫБОР
		|			КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ Остатки.СуммаОстатокДт
		|		КОНЕЦ КАК Стоимость
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Остатки(
		|			&МоментКон,
		|			Счет В (&СчетаУчетаНКонтП),
		|			&ВидыСубконтоНКонтП,
		|			" + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(СтруктурноеПодразделение В (&ФильтрПодразделения) ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И ", "") + "
		|			Субконто1 В (&Номенклатура)
		|			    И Субконто2 В (&Контрагент)
		|			    " + ?(НЕ ЗначениеЗаполнено(Партия), "", "И Субконто3 В (&Партия) ")+ "
		|			    И Организация В (&Организации)) КАК Остатки) КАК ОбщийЗапрос
		|
		|";
		
	КонецЕсли;

	Если СчетаУчетаНКП.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.СчетУчета КАК СчетУчета,
		|	Остатки.Номенклатура КАК Номенклатура,
		|	Остатки.ДатаПартииДляЛИФО КАК ДатаПартииДляЛИФО,
		|	Остатки.ДатаПартииДляФИФО КАК ДатаПартииДляФИФО,
		|	Остатки.ДокументОприходованияДата КАК ДокументОприходованияДата,
		|	Остатки.ДокументОприходования КАК ДокументОприходования,
		|	Остатки.Организация КАК Организация,
		|	Остатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	СУММА(Остатки.Количество) КАК Количество,
		|	СУММА(Остатки.КоличествоПартии) КАК КоличествоПартии,
		|	СУММА(Остатки.Стоимость) КАК Стоимость
		|ИЗ
		|	(ВЫБРАТЬ
		|		Остатки.Счет КАК СчетУчета,
		|		Остатки.Субконто1 КАК Номенклатура,
		|		ВЫБОР
		|			КОГДА Остатки.Счет В (&СписокСчетовЛИФО)
		|				ТОГДА Остатки.Субконто2.Дата
		|			ИНАЧЕ &ПустаяДата
		|		КОНЕЦ КАК ДатаПартииДляЛИФО,
		|		ВЫБОР
		|			КОГДА Остатки.Счет В (&СписокСчетовФИФО)
		|				ТОГДА Остатки.Субконто2.Дата
		|			ИНАЧЕ &ПустаяДата
		|		КОНЕЦ КАК ДатаПартииДляФИФО,
		|		Остатки.Субконто2.Дата КАК ДокументОприходованияДата,
		|		Остатки.Субконто2 КАК ДокументОприходования,
		|		Остатки.Организация КАК Организация,
		|		Остатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|		ВЫБОР
		|			КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ Остатки.КоличествоОстатокДт
		|		КОНЕЦ КАК Количество,
		|		0 КАК КоличествоПартии,
		|		0 КАК Стоимость
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Остатки(
		|			&МоментКон,
		|			Счет В (&СчетаУчетаНКП),
		|			&ВидысубконтоНСП,
		|			" + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(СтруктурноеПодразделение В (&ФильтрПодразделения) ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И ", "") + "
		|			Субконто1 В (&Номенклатура)
		|		    " + ?(НЕ ЗначениеЗаполнено(Партия), "", "И Субконто2 В (&Партия) ")+ "
		|			    И Субконто3 В (&Склады)
		|			    И Организация В (&Организации)) КАК Остатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Остатки.Счет,
		|		Остатки.Субконто1,
		|		ВЫБОР
		|			КОГДА Остатки.Счет В (&СписокСчетовЛИФО)
		|				ТОГДА Остатки.Субконто2.Дата
		|			ИНАЧЕ &ПустаяДата
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА Остатки.Счет В (&СписокСчетовФИФО)
		|				ТОГДА Остатки.Субконто2.Дата
		|			ИНАЧЕ &ПустаяДата
		|		КОНЕЦ,
		|		Остатки.Субконто2.Дата,
		|		Остатки.Субконто2,
		|		Остатки.Организация,
		|		Остатки.СтруктурноеПодразделение,
		|		0,
		|		ВЫБОР
		|			КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ Остатки.КоличествоОстатокДт
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ Остатки.СуммаОстатокДт
		|		КОНЕЦ
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Остатки(
		|			&МоментКон,
		|			Счет В (&СчетаУчетаНКП),
		|			&ВидысубконтоНСП,
		|			" + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(СтруктурноеПодразделение В (&ФильтрПодразделения) ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И ", "") + "
		|			Субконто1 В (&Номенклатура)
		|		    " + ?(НЕ ЗначениеЗаполнено(Партия), "", "И Субконто2 В (&Партия) ")+ "
		|			    И Организация В (&Организации)) КАК Остатки) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.СчетУчета,
		|	Остатки.Номенклатура,
		|	Остатки.Организация,
		|	Остатки.СтруктурноеПодразделение,
		|	Остатки.ДатаПартииДляЛИФО,
		|	Остатки.ДатаПартииДляФИФО,
		|	Остатки.ДокументОприходованияДата,
		|	Остатки.ДокументОприходования";
		
	КонецЕсли;
	
	Если СчетаУчетаНСП.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "
		|ВЫБРАТЬ
		|	ОбщийЗапрос.СчетУчета,
		|	ОбщийЗапрос.Номенклатура,
		|	ОбщийЗапрос.ДатаПартииДляЛИФО,
		|	ОбщийЗапрос.ДатаПартииДляФИФО,
		|	ОбщийЗапрос.ДокументОприходованияДата,
		|	ОбщийЗапрос.ДокументОприходования,
		|	ОбщийЗапрос.Организация,
		|	ОбщийЗапрос.СтруктурноеПодразделение,
		|	ОбщийЗапрос.Количество,
		|	ОбщийЗапрос.КоличествоПартии,
		|	ОбщийЗапрос.Стоимость
		| ИЗ
		|	(ВЫБРАТЬ
		|		Остатки.Счет КАК СчетУчета,
		|		Остатки.Субконто1 КАК Номенклатура,
		|		ВЫБОР
		|			КОГДА Остатки.Счет В (&СписокСчетовЛИФО)
		|				ТОГДА Остатки.Субконто2.Дата
		|			ИНАЧЕ &ПустаяДата
		|		КОНЕЦ КАК ДатаПартииДляЛИФО,
		|		ВЫБОР
		|			КОГДА Остатки.Счет В (&СписокСчетовФИФО)
		|				ТОГДА Остатки.Субконто2.Дата
		|			ИНАЧЕ &ПустаяДата
		|		КОНЕЦ КАК ДатаПартииДляФИФО,
		|		Остатки.Субконто2.Дата КАК ДокументОприходованияДата,
		|		Остатки.Субконто2 КАК ДокументОприходования,
		|		Остатки.Организация КАК Организация,
		|		Остатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|		ВЫБОР
		|			КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ Остатки.КоличествоОстатокДт
		|		КОНЕЦ КАК Количество,
		|		ВЫБОР
		|			КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ Остатки.КоличествоОстатокДт
		|		КОНЕЦ КАК КоличествоПартии,
		|		ВЫБОР
		|			КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ Остатки.СуммаОстатокДт
		|		КОНЕЦ КАК Стоимость
		|	ИЗ 
		|		РегистрБухгалтерии.Типовой.Остатки(
		|			&МоментКон,
		|			Счет В (&СчетаУчетаНСП),
		|			&ВидысубконтоНСП,
		|			" + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(СтруктурноеПодразделение В (&ФильтрПодразделения) ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И ", "") + "
		|			Субконто1 В (&Номенклатура)
		|			    " + ?(НЕ ЗначениеЗаполнено(Партия), "", "И Субконто2 В (&Партия) ")+ "
		|			    И Субконто3 В (&Склады)
		|			    И Организация В (&Организации)) КАК Остатки) Как ОбщийЗапрос
		|
		|";

	КонецЕсли;
	
	Запрос.Текст = Текст+ "
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ДатаПартииДляЛИФО убыв,
	|	ДатаПартииДляФИФО
	|ИТОГИ
	|ПО 
	|	Номенклатура";
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);

КонецФункции // ПолучитьТаблицуПартийНаСкладах()

// Формирует запрос по остаткам партий товаров на конец рабочего  периода
//
// Параметры:
//  МоментКон      - момент времени, на которой возвращаются остатки.
//
// Возвращаемое значение:
//	Результат запроса, выгруженный в таблицу значений.
//
Функция ПолучитьТаблицуПартийНаСкладахНУ(СтруктураПараметров, Учет, Организации, СчетаУчетаНУ, Номенклатура = Неопределено, Склады = Неопределено, ФильтрПодразделения = Неопределено) Экспорт
	
	Если НЕ СтруктураПараметров.ПроводитьДокументПоРазделуУчета Тогда
		Возврат Новый ДеревоЗначений();
	КонецЕсли;

    Если СтруктураПараметров.ОтражатьВНалоговомУчете Тогда
		СчетаУчетаН_НУ	    = Новый СписокЗначений; // счета, с суммовым учетом только по номенклатуре
		СчетаУчетаНК_НУ		= Новый СписокЗначений; // счета, с суммовым учетом только по номенклатуре и количественным по складу
		СчетаУчетаНС_НУ		= Новый СписокЗначений; // счета, с суммовым учетом по номенклатуре и складам		
		
		СортировкаСчетовУчетаНУ(СчетаУчетаНУ, СчетаУчетаН_НУ, СчетаУчетаНК_НУ, СчетаУчетаНС_НУ);		
	КонецЕсли; 							
							
	ВидСубконтоНоменклатура	= ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура;
	ВидСубконтоПартии		= ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии;
	ВидСубконтоСклады		= ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады;
	ВидСубконтоКонтрагенты	= ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты;

	ВидыСубконтоН = Новый Массив;
	ВидысубконтоН.Добавить(ВидСубконтоНоменклатура);
	
	ВидыСубконтоНС = Новый Массив;
	ВидысубконтоНС.Добавить(ВидСубконтоНоменклатура);
	ВидысубконтоНС.Добавить(ВидСубконтоСклады);
 	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментКон",			СтруктураПараметров.МоментКон);
	Запрос.УстановитьПараметр("Организации",		Организации);
	
	Запрос.УстановитьПараметр("СчетаУчетаН_НУ",		СчетаУчетаН_НУ);
	Запрос.УстановитьПараметр("СчетаУчетаНК_НУ",	СчетаУчетаНК_НУ);
	Запрос.УстановитьПараметр("СчетаУчетаНС_НУ",	СчетаУчетаНС_НУ);
	
	Запрос.УстановитьПараметр("Номенклатура",		Номенклатура);
	Запрос.УстановитьПараметр("Склады",				Склады);
	Запрос.УстановитьПараметр("ВидысубконтоН",		ВидысубконтоН);
	Запрос.УстановитьПараметр("ВидысубконтоНС",		ВидысубконтоНС);
	
	Запрос.УстановитьПараметр("ПустойСклад",		Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяПартия",		Неопределено);
	Запрос.УстановитьПараметр("ПустаяДата",			Дата("00010101"));

	Запрос.УстановитьПараметр("ФильтрПодразделения",   ФильтрПодразделения);
	
	ТекстНУ = "";
	Если СтруктураПараметров.ОтражатьВНалоговомУчете Тогда
		
		Если СчетаУчетаН_НУ.Количество() > 0 Тогда

		ТекстНУ = ТекстНУ + "ВЫБРАТЬ
		                    |	Остатки.Счет КАК СчетУчета,
		                    |	Остатки.Субконто1 КАК Номенклатура,
		                    |	&ПустаяДата КАК ДокументОприходованияДата,
		                    |	&ПустаяПартия КАК ДокументОприходования,
		                    |	Остатки.Организация КАК Организация,
							|	Остатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
							|	ВЫБОР
		                    |		КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL 
		                    |			ТОГДА 0
		                    |		ИНАЧЕ Остатки.КоличествоОстатокДт
		                    |	КОНЕЦ КАК Количество,
		                    |	ВЫБОР
		                    |		КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL 
		                    |			ТОГДА 0
		                    |		ИНАЧЕ Остатки.КоличествоОстатокДт
		                    |	КОНЕЦ КАК КоличествоПартии,
		                    |	ВЫБОР
		                    |		КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL 
		                    |			ТОГДА 0
		                    |		ИНАЧЕ Остатки.СуммаОстатокДт
		                    |	КОНЕЦ КАК Стоимость,
		                    |	Остатки.ВидУчета
		                    |ИЗ
		                    |	РегистрБухгалтерии.Налоговый.Остатки(
		                    |			&МоментКон,
		                    |			Счет В (&СчетаУчетаН_НУ),
		                    |			&ВидыСубконтоН,
							|			" + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(СтруктурноеПодразделение В (&ФильтрПодразделения) ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И ", "") + "
							|			Субконто1 В (&Номенклатура)
		                    |				И Организация В (&Организации)) КАК Остатки";
	КонецЕсли;
	
	
	Если СчетаУчетаНК_НУ.Количество() > 0 Тогда

		Если ТекстНУ <> "" Тогда
			ТекстНУ = ТекстНУ + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		ТекстНУ = ТекстНУ + "ВЫБРАТЬ
		|	Остатки.СчетУчета,
		|	Остатки.Номенклатура,
		|	Остатки.Организация,
		|	Остатки.СтруктурноеПодразделение,
		|	Остатки.ДокументОприходованияДата,
		|	Остатки.ДокументОприходования,
		|	СУММА(Остатки.Количество) КАК Количество,
		|	СУММА(Остатки.КоличествоПартии) КАК КоличествоПартии,
		|	СУММА(Остатки.Стоимость) КАК Стоимость,
		|	Остатки.ВидУчета
		|ИЗ
		|	(ВЫБРАТЬ
		|		Остатки.Счет КАК СчетУчета,
		|		Остатки.Субконто1 КАК Номенклатура,
		|		Остатки.Организация КАК Организация,
		|		Остатки.СтруктурноеПодразделение,
		|		&ПустаяДата КАК ДокументОприходованияДата,
		|		&ПустаяПартия КАК ДокументОприходования,
		|		ВЫБОР
		|			КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ Остатки.КоличествоОстатокДт
		|		КОНЕЦ КАК Количество,
		|		0 КАК КоличествоПартии,
		|		0 КАК Стоимость,
		|	Остатки.ВидУчета
		|	ИЗ
		|		РегистрБухгалтерии.Налоговый.Остатки(
		|			&МоментКон,
		|			Счет В (&СчетаУчетаНК_НУ),
		|			&ВидыСубконтоНС,
		|			" + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(СтруктурноеПодразделение В (&ФильтрПодразделения) ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И ", "") + "
		|			Субконто1 В (&Номенклатура)
		|			    И Субконто2 В (&Склады)
		|			    И Организация В (&Организации)) КАК Остатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Остатки.Счет,
		|		Остатки.Субконто1,
		|		Остатки.Организация,
		|		Остатки.СтруктурноеПодразделение,
		|		&ПустаяДата,
		|		&ПустаяДата,
		|		0,
		|		ВЫБОР
		|			КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ Остатки.КоличествоОстатокДт
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ Остатки.СуммаОстатокДт
		|		КОНЕЦ ,
		|	Остатки.ВидУчета
		|	ИЗ
		|		РегистрБухгалтерии.Налоговый.Остатки(
		|			&МоментКон,
		|			Счет В (&СчетаУчетаНК_НУ),
		|			&ВидыСубконтоНС,
		|			" + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(СтруктурноеПодразделение В (&ФильтрПодразделения) ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И ", "") + "
		|			Субконто1 В (&Номенклатура)
		|			    И Организация В (&Организации)) КАК Остатки) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.СчетУчета,
		|	Остатки.Номенклатура,
		|	Остатки.Организация,
		|	Остатки.СтруктурноеПодразделение,
		|	Остатки.ДокументОприходованияДата,
		|	Остатки.ДокументОприходования,
		|	Остатки.ВидУчета";
		
	КонецЕсли;
	
	Если СчетаУчетаНС_НУ.Количество() > 0 Тогда

		Если ТекстНУ <> "" Тогда
			ТекстНУ = ТекстНУ + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		ТекстНУ = ТекстНУ + "ВЫБРАТЬ
		                |	Остатки.Счет КАК СчетУчета,
		                |	Остатки.Субконто1 КАК Номенклатура,
		                |	Остатки.Организация КАК Организация,
						|	Остатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
						|	&ПустаяДата КАК ДокументОприходованияДата,
		                |	&ПустаяПартия КАК ДокументОприходования,
		                |	ВЫБОР
		                |		КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL 
		                |			ТОГДА 0
		                |		ИНАЧЕ Остатки.КоличествоОстатокДт
		                |	КОНЕЦ КАК Количество,
		                |	ВЫБОР
		                |		КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL 
		                |			ТОГДА 0
		                |		ИНАЧЕ Остатки.КоличествоОстатокДт
		                |	КОНЕЦ КАК КоличествоПартии,
		                |	ВЫБОР
		                |		КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL 
		                |			ТОГДА 0
		                |		ИНАЧЕ Остатки.СуммаОстатокДт
		                |	КОНЕЦ КАК Стоимость,
		                |	Остатки.ВидУчета
		                |ИЗ
		                |	РегистрБухгалтерии.Налоговый.Остатки(
		                |			&МоментКон,
		                |			Счет В (&СчетаУчетаНС_НУ),
		                |			&ВидыСубконтоНС,
						|			" + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(СтруктурноеПодразделение В (&ФильтрПодразделения) ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И ", "") + "
						|			Субконто1 В (&Номенклатура)
		                |				И Субконто2 В (&Склады)
		                |				И Организация В (&Организации)) КАК Остатки" ; 
				
	КонецЕсли;     	
	
	КонецЕсли;//СтруктураПараметров.ОтражатьВНалоговомУчете
	
	Запрос.Текст = ТекстНУ+ "
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|ИТОГИ
	|ПО 
	|	Номенклатура";
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);

КонецФункции // ПолучитьТаблицуПартийНаСкладах()

// Создается пустая таблица, в которую будут в дальнейшем записыватся списанные партии.
//
Функция ПустаяТаблицаСписанныхПартий(Учет) Экспорт

	ТаблицаСписанныхПартий = Новый ТаблицаЗначений;
	ТаблицаСписанныхПартий.Колонки.Добавить("Партия");
	ТаблицаСписанныхПартий.Колонки.Добавить("Количество",			ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3));
	ТаблицаСписанныхПартий.Колонки.Добавить("СуммаСписания",		ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаСписанныхПартий.Колонки.Добавить("СуммаСписанияПартии",	ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	Если Учет = "Бух" Тогда
		ТаблицаСписанныхПартий.Колонки.Добавить("СчетУчетаБУ");
		
	ИначеЕсли Учет = "Нал" Тогда
		ТаблицаСписанныхПартий.Колонки.Добавить("СчетУчетаНУ");
	КонецЕсли;
	
	Возврат ТаблицаСписанныхПартий;
	
КонецФункции // ПустаяТаблицаСписанныхПартий()

Функция ПолучитьОбъектПоТипу(ТипСтр, Субконто1, Субконто2, Субконто3) Экспорт

	ИскомыйТип = Тип(ТипСтр);
	ИскомыйОбъект = Неопределено;
	
	Если ТипЗнч(Субконто1) = ИскомыйТип Тогда
		ИскомыйОбъект = Субконто1;
		
	ИначеЕсли ТипЗнч(Субконто2) = ИскомыйТип Тогда
		ИскомыйОбъект = Субконто2;
		
	ИначеЕсли ТипЗнч(Субконто3) = ИскомыйТип Тогда
		ИскомыйОбъект = Субконто3;
	КонецЕсли; 	
	
	Возврат ИскомыйОбъект;

КонецФункции // ПолучитьОбъектПоТипу()
