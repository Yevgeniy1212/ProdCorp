////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает номер версии библиотеки ЭСФ и ВС.
//
// Возвращаемое значение:
//  Строка - номер сборки.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "2.0.6.40";
	
КонецФункции

Функция ВерсияКомпонентыНЦАВБазе() Экспорт
	Возврат "4.5";
КонецФункции

Функция КонтейнерМетодов() Экспорт
	
	Контейнер = Неопределено;
	ИспользоватьВнешнююОбработку = ЭСФВызовСервера.ИспользоватьВнешнююОбработку();
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		// Если база клиент-серверная, то это точно только клиент.
		// Если база файловая, то это может быть как клиент, так и сервер.
		
		// Если выполняется препроцессоре ТолстыйКлиентОбычноеПриложение,
		// то код ВнешниеОбработки.Подключить() вызовет ошибку,
		// поэтому внешняя обработка для данного режима подлкючается через файл.
		
		Если ИспользоватьВнешнююОбработку Тогда
			ВнешняяОбработка = ЭСФСерверПереопределяемый.СоздатьВнешнююОбработкуИзФайла();
			Контейнер = ВнешняяОбработка.ПолучитьФорму("КлиентОбычная");
		Иначе
			Контейнер = Обработки.ОбменЭСФ.ПолучитьФорму("КлиентОбычная");
		КонецЕсли;
		
	#ИначеЕсли ТонкийКлиент ИЛИ ВебКлиент ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		
		// Это точно клиент на управляемые формы.
		
		Если ИспользоватьВнешнююОбработку Тогда
			ИмяВнешнейОбработки = ЭСФВызовСервера.ПодключитьВнешнююОбработку();
			Контейнер = ПолучитьФорму("ВнешняяОбработка." + ИмяВнешнейОбработки + ".Форма.КлиентУправляемая");
		Иначе
			Контейнер = ПолучитьФорму("Обработка.ОбменЭСФ.Форма.КлиентУправляемая");
		КонецЕсли;
		
	#ИначеЕсли Сервер ИЛИ ВнешнееСоединение Тогда
		
		// Это сервер и только сервер, без разницы управляемое приложение или обычное.
		
		Если ИспользоватьВнешнююОбработку Тогда
			ИмяВнешнейОбработки = ЭСФВызовСервера.ПодключитьВнешнююОбработку();
			Контейнер = ВнешниеОбработки.Создать(ИмяВнешнейОбработки);
		Иначе
			Контейнер = Обработки.ОбменЭСФ.Создать();
		КонецЕсли;
		
	#Иначе
		
		// Вызов переопределяемого модуля для остальных видов инструкций препроцессора.
		
		ЭСФКлиентСерверПереопределяемый.КонтейнерМетодов(Контейнер, ИспользоватьВнешнююОбработку);
		
	#КонецЕсли
	
	Возврат Контейнер;
	
КонецФункции

Функция ИмяПропуститьПроверкуЗапретаИзменения() Экспорт
	
	Возврат ЭСФКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения();
	
КонецФункции

// Определяет доступность нового метода аутентификации API ИС ЭСФ
//
Функция ДоступенНовыйМетодАутентификации() Экспорт
	Возврат ЭСФКлиентСерверПереопределяемый.ДоступенНовыйМетодАутентификации();
КонецФункции

// Определяет доступность контроля времени переоткрытия сессии API ИС ЭСФ
//
Функция ДоступенКонтрольАктивностиСессии() Экспорт
	Возврат ЭСФКлиентСерверПереопределяемый.ДоступенКонтрольАктивностиСессии();
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКИИ

///////////////////////////////////////////////////////////////////////////////
// Преобразование значений для обмена с ИС ЭСФ

Функция ПользовательскийСтатусИСЭСФ(Знач ПользовательскийСтатусИБ) Экспорт
	
	Если ПользовательскийСтатусИБ = ПредопределенноеЗначение("Перечисление.ПользовательскиеСтатусыЭСФ.Принят") Тогда
		ПользовательскийСтатус = "ACCEPTED";
		
	ИначеЕсли ПользовательскийСтатусИБ = ПредопределенноеЗначение("Перечисление.ПользовательскиеСтатусыЭСФ.Отклонен") Тогда
		ПользовательскийСтатус = "DECLINED";
		
	Иначе
		ПользовательскийСтатус = "";
		
	КонецЕсли;
	
	Возврат ПользовательскийСтатус;
	
КонецФункции

Функция ПользовательскийСтатусИБ(Знач ПользовательскийСтатусИСЭСФ) Экспорт
	
	ВРегПользовательскийСтатусИСЭСФ = ВРег(ПользовательскийСтатусИСЭСФ);
	
	Если ВРегПользовательскийСтатусИСЭСФ = "ACCEPTED" Тогда
		ПользовательскийСтатус = ПредопределенноеЗначение("Перечисление.ПользовательскиеСтатусыЭСФ.Принят");
		
	ИначеЕсли ВРегПользовательскийСтатусИСЭСФ = "DECLINED" Тогда
		ПользовательскийСтатус = ПредопределенноеЗначение("Перечисление.ПользовательскиеСтатусыЭСФ.Отклонен");
		
	Иначе
		ПользовательскийСтатус = ПредопределенноеЗначение("Перечисление.ПользовательскиеСтатусыЭСФ.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат ПользовательскийСтатус;
	
КонецФункции

Функция СтатусИСЭСФ(Знач СтатусИБ) Экспорт
	
	Если СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Созданный") Тогда
		Статус = "CREATED";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Доставленный") Тогда
		Статус = "DELIVERED";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Аннулированный") Тогда
		Статус = "CANCELED";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Отозванный") Тогда
		Статус = "REVOKED";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Импортированный") Тогда
		Статус = "IMPORTED";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Черновик") Тогда
		Статус = "DRAFT";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Ошибочный") Тогда
		Статус = "FAILED";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Удаленный") Тогда
		Статус = "DELETED";

	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Отклоненный") Тогда
		Статус = "DECLINED";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.АннулированИСЭСФДляОтнесенияВЗачетИНаВычеты") Тогда
		Статус = "CANCELED_BY_OGD";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.АннулированПриОтклоненииСНТ") Тогда
		Статус = "CANCELED_BY_SNT_DECLINE";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.АннулированПриОтзывеСНТ") Тогда
		Статус = "CANCELED_BY_SNT_REVOKE";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.ЗаблокированИСЭСФ") Тогда
		Статус = "SEND_TO_ISGO";
		
	Иначе
		Статус = "";	
		
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция СтатусИБ(Знач СтатусИСЭСФ) Экспорт
	
	ВРегСтатусИСЭСФ = ВРег(СтатусИСЭСФ);
	
	Если ВРегСтатусИСЭСФ = "CREATED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Созданный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "DELIVERED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Доставленный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "CANCELED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Аннулированный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "REVOKED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Отозванный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "IMPORTED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Импортированный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "DRAFT" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Черновик");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "FAILED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Ошибочный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "DELETED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Удаленный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "DECLINED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Отклоненный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "CANCELED_BY_OGD" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.АннулированИСЭСФДляОтнесенияВЗачетИНаВычеты");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "CANCELED_BY_SNT_DECLINE" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.АннулированПриОтклоненииСНТ");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "CANCELED_BY_SNT_REVOKE" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.АннулированПриОтзывеСНТ");
		
	// При выписке ЭСФ в другие государственные органы для получения мер государственной поддержки.
	ИначеЕсли ВРегСтатусИСЭСФ = "SEND_TO_ISGO" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.ЗаблокированИСЭСФ");
		
	Иначе
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция НаправлениеИСЭСФ(Знач НаправлениеИБ) Экспорт
	
	Если НаправлениеИБ = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий") Тогда
		Направление =  "INBOUND";
		
	ИначеЕсли НаправлениеИБ = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий") Тогда
		Направление = "OUTBOUND";
		
	Иначе
		Направление = "";
		
	КонецЕсли;
	
	Возврат Направление;
	
КонецФункции

Функция НаправлениеИБ(Знач НаправлениеИСЭСФ) Экспорт
	
	ВРегНаправлениеИСЭСФ = ВРег(НаправлениеИСЭСФ);
	
	Если ВРегНаправлениеИСЭСФ = "INBOUND" Тогда
		Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий");
		
	ИначеЕсли ВРегНаправлениеИСЭСФ = "OUTBOUND" Тогда
		Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий");
		
	Иначе
		Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат Направление;
	
КонецФункции

Функция ВидИСЭСФ(Знач ВидИБ) Экспорт
	
	Если ВидИБ = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Обычный") Тогда
		Вид = "ORDINARY_INVOICE";
		
	ИначеЕсли ВидИБ = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Исправленный") Тогда
		Вид = "FIXED_INVOICE";
		
	ИначеЕсли ВидИБ = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Дополнительный") Тогда
		Вид = "ADDITIONAL_INVOICE";
		
	Иначе
		Вид = "";
		
	КонецЕсли;
	
	Возврат Вид;
	
КонецФункции

Функция ВидИБ(Знач ВидИСЭСФ) Экспорт
	
	ВРегВидИСЭСФ = ВРег(ВидИСЭСФ);
	
	Если ВРегВидИСЭСФ = "ORDINARY_INVOICE" Тогда
		Вид = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Обычный");
		
	ИначеЕсли ВРегВидИСЭСФ = "FIXED_INVOICE" Тогда
		Вид = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Исправленный");
		
	ИначеЕсли ВРегВидИСЭСФ = "ADDITIONAL_INVOICE" Тогда
		Вид = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Дополнительный");
		
	Иначе
		Вид = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат Вид;
	
КонецФункции

Функция ТипПодписиИСЭСФ(Знач ТипПодписиИБ) Экспорт
	
	Если ТипПодписиИБ = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.ЮридическоеЛицо") Тогда
		ТипПодписи = "COMPANY";
		
	ИначеЕсли ТипПодписиИБ = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.УполномоченноеЛицо") Тогда
		ТипПодписи = "OPERATOR";
		
	Иначе	
		ТипПодписи = "";
		
	КонецЕсли;
	
	Возврат ТипПодписи;
	
КонецФункции

Функция ТипПодписиИБ(Знач ТипПодписиИСЭСФ) Экспорт
	
	ВРегТипПодписиИСЭСФ = ВРег(ТипПодписиИСЭСФ);
	
	Если ВРегТипПодписиИСЭСФ = "COMPANY" Тогда
		ТипПодписи = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.ЮридическоеЛицо");
		
	ИначеЕсли ВРегТипПодписиИСЭСФ = "OPERATOR" Тогда
		ТипПодписи = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.УполномоченноеЛицо");
		
	Иначе	
		ТипПодписи = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат ТипПодписи;
	
КонецФункции

Функция СпособыПроисхожденияТоваровИСЭСФ(Знач СпособыПроисхожденияТоваровИБ) Экспорт
	
	Если СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.ВТО") Тогда		
		СпособыПроисхожденияТоваровИСЭСФ = "ВТО";
		
	ИначеЕсли СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.ЕТТЕАЭС") Тогда		
		СпособыПроисхожденияТоваровИСЭСФ = "ЕТТ";
		
	ИначеЕсли СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.СТ1") Тогда
		СпособыПроисхожденияТоваровИСЭСФ = "СТ-1";
		
	ИначеЕсли СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.ТС") Тогда
		СпособыПроисхожденияТоваровИСЭСФ = "ТС";
		
	Иначе		
		СпособыПроисхожденияТоваровИСЭСФ = "";
		
	КонецЕсли;
	
	Возврат СпособыПроисхожденияТоваровИСЭСФ;
	
КонецФункции

Функция СпособыПроисхожденияТоваровИБ(Знач СпособыПроисхожденияТоваровИСЭСФ) Экспорт
	
	СпособыПроисхожденияТоваровИСЭСФ = ВРег(СпособыПроисхожденияТоваровИСЭСФ);
	
	Если СпособыПроисхожденияТоваровИСЭСФ = "ВТО" Тогда		
		СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.ВТО");
		
	ИначеЕсли СпособыПроисхожденияТоваровИСЭСФ = "ЕТТ" Тогда		
		СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.ЕТТЕАЭС");
		
	ИначеЕсли СпособыПроисхожденияТоваровИСЭСФ = "СТ-1" Тогда
		СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.СТ1");
		
	ИначеЕсли СпособыПроисхожденияТоваровИСЭСФ = "ТС" Тогда
		СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.ТС");
		
	Иначе		
		СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат СпособыПроисхожденияТоваровИБ;
	
КонецФункции

Функция ПричинаВыпискиНаБумагеИБ(Знач ПричинаВыпискиИСЭСФ) Экспорт
	
	ПричинаВыпискиИСЭСФ = ВРег(ПричинаВыпискиИСЭСФ);
	
	Если ПричинаВыпискиИСЭСФ = "UNLAWFUL_REMOVAL_REGISTRATION" Тогда		
		ПричинаВыпискиИБ = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.БлокированиеДоступа");
		
	ИначеЕсли ПричинаВыпискиИСЭСФ = "DOWN_TIME" Тогда		
		ПричинаВыпискиИБ = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.ПростойСистемы");
		
	ИначеЕсли ПричинаВыпискиИСЭСФ = "MISSING_REQUIREMENT" Тогда		
		ПричинаВыпискиИБ = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.ОтсутствиеТребованиеПоВыписке");
			
	Иначе		
		ПричинаВыпискиИБ = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат ПричинаВыпискиИБ;
	
КонецФункции

Функция МестоРеализацииНеРКИБ(Знач ТипНДСИСЭСФ) Экспорт
	
	ТипНДСИСЭСФ = ВРег(ТипНДСИСЭСФ);
	
	Если ТипНДСИСЭСФ = "WITHOUT_NDS_NOT_KZ" Тогда		
		МестоРеализацииНеРК = Истина;
		
	Иначе		
		МестоРеализацииНеРК = Ложь;
		
	КонецЕсли;
	
	Возврат МестоРеализацииНеРК;	
	
КонецФункции

Функция МестоРеализацииНеРКИСЭСФ(Знач ТипНДСИСЭСФ) Экспорт
		
	Если ТипНДСИСЭСФ Тогда		
		МестоРеализацииНеРК = "WITHOUT_NDS_NOT_KZ";
		
	Иначе		
		МестоРеализацииНеРК = "";
		
	КонецЕсли;
	
	Возврат МестоРеализацииНеРК;	
	
КонецФункции

Функция ТипПрофиляИСЭСФ(ТипПрофиля) Экспорт
	
	Если ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.Адвокат") Тогда		
		
		ТипПрофиляИСЭСФ = "LAWYER";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.ИндивидуальныйПредприниматель") Тогда		
		
		ТипПрофиляИСЭСФ = "ENTREPRENEUR"; 		
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.Медиатор") Тогда		
		
		ТипПрофиляИСЭСФ = "MEDIATOR";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.Нотариус") Тогда		
		
		ТипПрофиляИСЭСФ = "NOTARY";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.РуководительЮЛ") Тогда		
		
		ТипПрофиляИСЭСФ = "ADMIN_ENTERPRISE";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.РуководительЮЛПроект") Тогда		
		
		ТипПрофиляИСЭСФ = "PROJECT_ADMIN";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СотрудникИП") Тогда		
		
		ТипПрофиляИСЭСФ = "ENTREPRENEUR_USER";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СотрудникАдвоката") Тогда		
		
		ТипПрофиляИСЭСФ = "LAWYER_USER";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СотрудникНотариуса") Тогда		
		
		ТипПрофиляИСЭСФ = "NOTARY_USER";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СотрудникПроекта") Тогда		
		
		ТипПрофиляИСЭСФ = "PROJECT_USER";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СотрудникСудебногоИсполнителя") Тогда		
		
		ТипПрофиляИСЭСФ = "BAILIFF_USER";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СотрудникМедиатора") Тогда		
		
		ТипПрофиляИСЭСФ = "MEDIATOR_USER";
	
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СотрудникЮЛ") Тогда		
		
		ТипПрофиляИСЭСФ = "USER";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СудебныйИсполнитель") Тогда		
		
		ТипПрофиляИСЭСФ = "BAILIFF";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.ФизическоеЛицо") Тогда		
		
		ТипПрофиляИСЭСФ = "INDIVIDUAL";	
		
	КонецЕсли;
	
	Возврат ТипПрофиляИСЭСФ;	
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Возврат строковых констант

Функция АдресВебПриложенияИСЭСФ() Экспорт
	Возврат "https://esf.gov.kz:8443/esf-web/";
КонецФункции

Функция ИмяСервисаInvoiceService() Экспорт
	Возврат "invoiceService";	
КонецФункции

Функция ИмяСервисаClientSession() Экспорт
	Возврат "clientSession";	
КонецФункции

Функция ИмяСервисаUploadInvoiceService() Экспорт
	Возврат "uploadInvoiceService";	
КонецФункции

Функция ИмяСервисаVersionService() Экспорт
	Возврат "versionService";	
КонецФункции

Функция ИмяСобытияЗаписьЭСФ() Экспорт 
	Возврат "Запись_ЭСФ";	
КонецФункции

Функция ИмяСобытияЗаписьСчетаФактуры() Экспорт 
	Возврат "Запись_СчетФактура";	
КонецФункции

Функция ИмяСобытияЗаписьСторно() Экспорт 	
	Возврат "Запись_Сторно";
КонецФункции

Функция ИмяПараметраСинхронизацияСИСЭСФПриЗапуске() Экспорт 
	Возврат "СинхронизацияСИСЭСФПриЗапуске";
КонецФункции

Функция СделатьАктуальным() Экспорт
	Возврат "СделатьАктуальным";	
КонецФункции

Функция ДействиеОтправка() Экспорт
	Возврат "Отправка";
КонецФункции

Функция ДействиеВыгрузка() Экспорт
	Возврат "Выгрузка";
КонецФункции

Функция ДействиеОтзыв() Экспорт
	Возврат "Отзыв";	
КонецФункции

Функция ДействиеОтклонение() Экспорт	
	Возврат "Отклонение";	
КонецФункции

Функция ДействиеОтклонениеДополнительногоИлиИсправленного() Экспорт	
	Возврат "ОтклонениеДополнительногоИлиИсправленного";	
КонецФункции

Функция ДействиеОтклонениеОтзыва() Экспорт	
	Возврат "ОтклонениеОтзыва";	
КонецФункции

Функция ИмяВнешнейОбработкиОбменЭСФ() Экспорт
	
	Возврат "ОбменЭСФ";
	
КонецФункции

Функция ТипПроверкиРеквизит() Экспорт
	Возврат "Реквизит";
КонецФункции

Функция ТипПроверкиТабличнаяЧасть() Экспорт
	Возврат "ТабличнаяЧасть";
КонецФункции

Функция ТипПроверкиРеквизитТабличнойЧасти() Экспорт
	Возврат "РеквизитТабличнойЧасти";
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Варианты настроек прокси-сервера для обмена с ИС ЭСФ

Функция ПроксиНеИспользовать() Экспорт
	Возврат "НеИспользовать";	
КонецФункции

Функция ПроксиСистемныеНастройки() Экспорт
	Возврат "СистемныеНастройки";
КонецФункции

Функция ПроксиДругиеНастройки() Экспорт
	Возврат "ДругиеНастройки";
КонецФункции

Функция НовыйПроксиСерверИСЭСФ() Экспорт
	
	НастройкиПрокси = ЭСФВызовСервераПовтИсп.ПолучитьПараметрыПодключенияКСерверуИСЭСФ();
	
	Если НастройкиПрокси.ПроксиСервер_ВариантИспользования = ЭСФКлиентСервер.ПроксиНеИспользовать() Тогда
		
		ИнтернетПрокси = Новый ИнтернетПрокси(Ложь);	
		
	ИначеЕсли НастройкиПрокси.ПроксиСервер_ВариантИспользования = ЭСФКлиентСервер.ПроксиСистемныеНастройки() Тогда
		
		ИнтернетПрокси = Новый ИнтернетПрокси(Истина);	
		
	ИначеЕсли НастройкиПрокси.ПроксиСервер_ВариантИспользования = ЭСФКлиентСервер.ПроксиДругиеНастройки() Тогда
		
		ИнтернетПрокси = Новый ИнтернетПрокси(Ложь);
		ИнтернетПрокси.Установить("http", НастройкиПрокси.ПроксиСервер_Сервер, НастройкиПрокси.ПроксиСервер_Порт);
		ИнтернетПрокси.Установить("https", НастройкиПрокси.ПроксиСервер_Сервер, НастройкиПрокси.ПроксиСервер_Порт);
		ИнтернетПрокси.Пользователь = НастройкиПрокси.ПроксиСервер_Пользователь;
		ИнтернетПрокси.Пароль = НастройкиПрокси.ПроксиСервер_Пароль;
		
	Иначе
		
		ИнтернетПрокси = Неопределено;
	
	КонецЕсли;
	
	Возврат ИнтернетПрокси;
	
КонецФункции

Функция ЦветЗеленый() Экспорт 
	Возврат WebЦвета.ТемноЗеленый;	
КонецФункции

Функция ЦветКрасный() Экспорт
	Возврат WebЦвета.Кирпичный;	
КонецФункции

Функция ЦветСиний() Экспорт
	Синий = Новый Цвет(25, 85, 174);
	Возврат Синий;	
КонецФункции

Функция ЦветЧерный() Экспорт
	Возврат WebЦвета.Черный;	
КонецФункции

Функция ЦветСостоянияЭСФ(Знач СостояниеЭСФ) Экспорт
	
	Если СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.Сформирован")
		ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ОбрабатываетсяСервером") Тогда
		
		Цвет = ЭСФКлиентСервер.ЦветСиний();
		
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ПринятСервером")
		ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ДоставленПолучателю")
		ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ПринятОтПоставщика")
		ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ЗаблокированИСЭСФ") Тогда
		
		Цвет = ЭСФКлиентСервер.ЦветЗеленый();
		
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ОтклоненСервером")
		ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.Отозван")
		ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.Аннулирован")
		ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.АннулированИСЭСФДляОтнесенияВЗачетИНаВычеты")
		ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.АннулированПриОтзывеСНТ")
		ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.АннулированПриОтклоненииСНТ")
		ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ОтклоненПолучателем") Тогда
		
		Цвет = ЭСФКлиентСервер.ЦветКрасный();
		
	Иначе
		
		Цвет = ЭСФКлиентСервер.ЦветСиний();
		
	КонецЕсли;
	
	Возврат Цвет;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Тексты сообщений

Функция ТекстСообщенияНеУстановленОбменЧерезAPI() Экспорт 
	
	Возврат НСтр("ru = 'Не установлена константа ""Использовать прямой обмен с ИС ЭСФ"".'");
	
КонецФункции

Функция ТекстСообщенияНеУстановленОбменЧерезXML() Экспорт
	
	Возврат НСтр("ru = 'Не установлена константа ""Использовать обмен с ИС ЭСФ через выгрузку/загрузку XML файлов"".'");
	
КонецФункции

Функция ТекстСообщенияНеУстановленыОбеКонстанты() Экспорт
	
	Возврат НСтр("ru = 'Не установлена ни одна из констант ""Использовать прямой обмен с ИС ЭСФ"", ""Использовать обмен с ИС ЭСФ через выгрузку/загрузку XML файлов"".'");
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Работа с реквизитом формы РеквизитыЭСФ

Функция РеквизитыЭСФ(Форма) Экспорт
	
	РеквизитыЭСФ = Неопределено;
	
	Если Форма.РеквизитыЭСФ = Неопределено Тогда
		Форма.РеквизитыЭСФ = НовыеРеквизитыЭСФ();
	КонецЕсли;
	
	Возврат Форма.РеквизитыЭСФ;
	
КонецФункции

Функция НовыеРеквизитыЭСФ() Экспорт
	
	РеквизитыЭСФ = Новый Структура;
	
	РеквизитыЭСФ.Вставить("МассивСторнирований", Новый Массив);
	РеквизитыЭСФ.Вставить("СсылкаЭСФ", ПредопределенноеЗначение("Документ.ЭСФ.ПустаяСсылка"));
	РеквизитыЭСФ.Вставить("ЗаписатьЭСФ", Ложь);
	                                
	Возврат РеквизитыЭСФ;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Криптография

// Возвращает коллекцию ЭЦП, сформированную на основе КоллекцияSignedContent с помощью ДанныеКлючаЭЦП.
//
// Параметры:
//  КоллекцияSignedContent - Соответствие - Коллекция строк для формирования ЭЦП.
//  ДанныеКлючаЭЦП - Структура - См. Обработки.ОбменЭСФ.ВводДанныхКлючаЭЦП.
//
// Возвращаемое значение:
//  Соответствие - Коллекция сформированных ЭЦП.
//   |- Ключ - Произвольный - Ключ из КоллекцияSignedContent.
//   |- Значение - Строка - ЭЦП.
//
Функция НоваяКоллекцияПодписейЭСФ(Знач КоллекцияSignedContent, Знач ДанныеКлючаЭЦП) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();
	
	Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдер();
	Криптопровайдер.ИнициализироватьХранилищеКлюча(ДанныеКлючаЭЦП.КлючBase64, ДанныеКлючаЭЦП.Пароль, Контейнер.ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64());	
	
	КоллекцияПодписейЭСФ = Новый Соответствие;
	Для Каждого Элемент Из КоллекцияSignedContent Цикл
		Подпись = Контейнер.СоздатьЭЦПДляПакета(Криптопровайдер, Элемент.Значение);
		КоллекцияПодписейЭСФ.Вставить(Элемент.Ключ, Подпись);
	КонецЦикла;
		
	Возврат КоллекцияПодписейЭСФ;
	
КонецФункции

// Определяет тип подписи - Подпись ЮЛ или Подпись ФЛ.
//
// Параметры:
//  ДанныеКлючаЭЦП - См. Обработка.ОбменЭСФ.ВводДанныхКлючаЭЦП.
//  ДанныеПрофиляИСЭСФ - См. ЭСФСервер.ДанныеПрофиляИСЭСФ().
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыПодписиЭСФ - Тип подписи, определенный по данным ключа ЭЦП.
//   Если не удалось определить тип подписи, то возвращает пустую ссылку.
//
Функция ТипПодписиЭСФ(Знач ДанныеКлючаЭЦП, Знач ДанныеПрофиляИСЭСФ) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();
	
	Если ЭСФВызовСервера.ИспользоватьПодписьНовойКомпоненты() Тогда
		Если ДанныеПрофиляИСЭСФ.Свойство("ТипКлюча") Тогда
			ТипКлюча = ДанныеПрофиляИСЭСФ.ТипКлюча;
		Иначе	
			ТипКлюча = Контейнер.ТипКлюча(ДанныеКлючаЭЦП.КлючBase64, ДанныеКлючаЭЦП.Пароль);
		КонецЕсли;
	Иначе
		ТипКлюча = Контейнер.ТипКлюча(ДанныеКлючаЭЦП.КлючBase64, ДанныеКлючаЭЦП.Пароль);
	КонецЕсли; 
	
	
	ТипПодписиЭСФ = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.ПустаяСсылка");
	
	Если ТипКлюча = Контейнер.КлючGOST() Тогда
		
		ТипПодписиЭСФ = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.ЮридическоеЛицо");
		
	ИначеЕсли ТипКлюча = Контейнер.КлючRSA() Тогда
		
		Если ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.ЭтоИндивидуальныйПредприниматель Тогда
			ТипПодписиЭСФ = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.ЮридическоеЛицо");
		Иначе
			ТипПодписиЭСФ = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.УполномоченноеЛицо");
		КонецЕсли;
		
	Иначе
		
		ТипПодписиЭСФ = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат ТипПодписиЭСФ;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

Функция КраткоеПредставлениеЭСФ(Знач СсылкаЭСФ) Экспорт
	
	СтрокаЭСФ = Строка(СсылкаЭСФ);
	СтрокаЭСФ = СтрЗаменить(СтрокаЭСФ, НСтр("ru = 'Электронный счет-фактура'"), НСтр("ru = 'ЭСФ'"));	
	СтрокаЭСФ = СтрЗаменить(СтрокаЭСФ, НСтр("ru = ' 0:00:00'"), "");
	Возврат СтрокаЭСФ;
	
КонецФункции

Функция ПреобразованноеНаименование(Знач ИсходноеНаименование) Экспорт
	
	Возврат ВРег(СокрЛП(ИсходноеНаименование));
	
КонецФункции

// Возвращает имя для аутентификации в ИС ЭСФ, полученное из ИИН.
//
// Параметры:
//  ИИН - Строка - ИИН, для формаирования имени для аутентификации в ИС ЭСФ.
//
// Возвращаемое значение:
//  Строка - Имя для аутентификации в ИСФ ЭСФ.
//
Функция ИмяАутентификации(ИИН) Экспорт
	
	Попытка
		Число = Число(ИИН);
		ИмяАутентификации = ИИН;
	Исключение
		ИмяАутентификации = "";
	КонецПопытки;
	
	Если ПустаяСтрока(ИмяАутентификации) Тогда 
		Попытка
			ИИН = СтрЗаменить(ИИН, "IIN", "");
			Число = Число(ИИН);
			ИмяАутентификации = ИИН;
		Исключение
			ИмяАутентификации = "";	
		КонецПопытки;
	КонецЕсли;
	
	Возврат ИмяАутентификации;
	
КонецФункции

// Возвращает новый массив строк, созданный на основании параметра ИменаЧерезЗапятую.
//
// Параметры:
//  ИменаЧерезЗапятую - Строка - Имена объектов, переменных, реквизитов и т.д.
//
// Возвращаемое значение:
//  Массив - Массив имен, созданный на основании параметра ИменаЧерезЗапятую.
//
// Пример:
//  // Переменная МассивИмен будет массивом, содержащим три элемента:
//  // "Идентификатор", "РегистрационныйНомер", "УполномоченныйСотрудник".
//  МассивИмен = МассивИмен("Идентификатор, РегистрационныйНомер, УполномоченныйСотрудник")
//
Функция МассивИмен(Знач ИменаЧерезЗапятую) Экспорт
	
	МассивПодстрок = Новый Массив;
	
	// Удалить все пробелы, оставив только запятые.
	Пока Найти(ИменаЧерезЗапятую, " ") <> 0 Цикл
		ИменаЧерезЗапятую = СтрЗаменить(ИменаЧерезЗапятую, " ", "");	
	КонецЦикла;
	
	// Разбить строку и заполнить массив.	
	Позиция = Найти(ИменаЧерезЗапятую, ",");
	Пока Позиция <> 0 Цикл
		МассивПодстрок.Добавить(Лев(ИменаЧерезЗапятую, Позиция - 1));
		ИменаЧерезЗапятую = Сред(ИменаЧерезЗапятую, Позиция + 1);
		Позиция = Найти(ИменаЧерезЗапятую, ",");
	КонецЦикла;	
	Если НЕ ПустаяСтрока(ИменаЧерезЗапятую) Тогда
		МассивПодстрок.Добавить(ИменаЧерезЗапятую);	
	КонецЕсли;
	
	Возврат МассивПодстрок;
	
КонецФункции

Процедура ЗаписьЖурналаРегистрацииОшибкаУдаленияФайла(ИмяФайла, ИнформацияОбОшибке)
	
	Комментарий = НСтр(
		"ru = 'Не удалось удалить файл %ИмяФайла% по причине:
		|
		|%ПодробноеПредставлениеОшибки%'");
		
	Комментарий = СтрЗаменить(Комментарий, "%ИмяФайла%", ИмяФайла);
	Комментарий = СтрЗаменить(Комментарий, "%ПодробноеПредставлениеОшибки%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
	ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ЭСФКлиентСервер.УдалитьВременныеФайлы", "Ошибка", , , Комментарий);
	
КонецПроцедуры

Функция ЭтоОбычнаяФорма(Форма) Экспорт
	
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
		ОбычнаяФорма = Ложь;	
	Иначе
		ОбычнаяФорма = Истина;	
	КонецЕсли;
	
	Возврат ОбычнаяФорма;
	
КонецФункции

// Проверяет корректность указанного идентификатора. 
// В качестве идентификатора должна быть указана строка, содержащая только цифры.
//
// Параметры:
//  Идентификатор  - Строка - идентификатор для проверки.
//  ТекстСообщения - Строка - если идентификатор некорректен, то в данный параметр будет помещен текст с причиной некорректности
//
// Возвращаемое значение:
//  Истина       - идентификатор содержит только цифры или пустой;
//  Ложь         - идентификатор содержит не только цифры.
//
Функция ИдентификаторКорректен(Идентификатор, ТекстСообщения = "") Экспорт
	
	Если ТипЗнч(Идентификатор) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Идентификатор) Тогда
		ТекстСообщения = НСтр("ru = 'Идентификатор не указан'");
		Возврат Истина;
	КонецЕсли;
	
	Для а = 1 По СтрДлина(Идентификатор) Цикл
		КодСимвола = КодСимвола(Сред(Идентификатор, а, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			ТекстСообщения = НСтр("ru = 'Идентификатор ""%Идентификатор%"" содержит нецифровые символы'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Идентификатор%", Идентификатор);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура УдалитьВременныеФайлы(ПутьКФайлам) Экспорт
	
	Попытка
		УдалитьФайлы(ПутьКФайлам);
	Исключение
		ЗаписьЖурналаРегистрацииОшибкаУдаленияФайла(ПутьКФайлам, ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

Функция ЭтоОповещениеПодсистемыЭСФ(Знач ИмяСобытия) Экспорт
	
	Если ИмяСобытия = ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ()
	 ИЛИ ИмяСобытия = ЭСФКлиентСервер.ИмяСобытияЗаписьСторно() 
	 ИЛИ ИмяСобытия = ЭСФКлиентСервер.ИмяСобытияЗаписьСчетаФактуры() Тогда
		
		ОповещениеЭСФ = Истина;
		
	Иначе
		
		ОповещениеЭСФ = Ложь;
		
	КонецЕсли;
	
	Возврат ОповещениеЭСФ;
	
КонецФункции

Функция ПриоритетСостоянияЭСФ(Знач СостояниеЭСФ) Экспорт
	
	Приоритет = 0;
	
	Если СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ПустаяСсылка") Тогда
		Приоритет = 0;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.Сформирован") Тогда
		Приоритет = 1;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ОтклоненСервером") Тогда
		Приоритет = 2;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.Отозван") Тогда
		Приоритет = 3;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.Аннулирован") Тогда
		Приоритет = 3;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.АннулированИСЭСФДляОтнесенияВЗачетИНаВычеты") Тогда
		Приоритет = 3;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.АннулированПриОтзывеСНТ") Тогда
		Приоритет = 3;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.АннулированПриОтклоненииСНТ") Тогда
		Приоритет = 3;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ОбрабатываетсяСервером") Тогда
		Приоритет = 4;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ПринятСервером") Тогда
		Приоритет = 5;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ДоставленПолучателю") Тогда
		Приоритет = 5;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ПринятОтПоставщика") Тогда
		Приоритет = 5;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ОтклоненПолучателем") Тогда
		Приоритет = 6;
	КонецЕсли;
	
	Возврат Приоритет;
	
КонецФункции

// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
// Параметры:
//     СтрокаURI - Строка - ссылка на ресурс в формате: <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>
//
// Возвращаемое значение:
//     Структура - составные части URI согласно формату:
//         * Схема         - Строка
//         * Логин         - Строка
//         * Пароль        - Строка
//         * ИмяСервера    - Строка - часть <хост>:<порт> входного параметра
//         * Хост          - Строка
//         * Порт          - Строка
//         * ПутьНаСервере - Строка - часть <путь>?<параметры>#<якорь> входного параметра
//
Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

// Устанавливает свойство ИмяСвойства элемента формы с именем ИмяЭлемента в значение Значение.
// Применяется в тех случаях, когда элемент формы может не быть на форме из-за отсутствия прав у пользователя
// на объект, реквизит объекта или команду.
//
// Параметры:
//  ЭлементыФормы - свойство ЭлементыФормы управляемой формы.
//  ИмяЭлемента - Строка - имя элемента формы
//  ИмяСвойства - Строка - имя устанавливаемого свойства элемента формы
//  Значение - Произвольный - новое значение элемента
// 
Процедура УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение) Экспорт
    
    ЭлементФормы = ЭлементыФормы.Найти(ИмяЭлемента);
    Если ЭлементФормы <> Неопределено Тогда
        ЭлементФормы[ИмяСвойства] = Значение;
    КонецЕсли;
    
КонецПроцедуры

Функция ПустыеПараметрыФормыИзменениеСтатусовЭСФ() Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Действие", "");
	ПараметрыФормы.Вставить("МассивЭСФ", Новый Массив);
	ПараметрыФормы.Вставить("ЗапускатьФоновоеЗадание", Ложь);
	
	Возврат ПараметрыФормы;
	
КонецФункции

Функция НаименованиеДоговора(Знач ОбъектЭСФ) Экспорт
	
	НаименованиеДоговора = "";
	
	ВалютаРегламентированногоУчета = ЭСФВызовСервера.ВалютаРегламентированногоУчета();
	
	Если ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПоставкиНомер)
		И ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПоставкиДата) Тогда
		
		Если ОбъектЭСФ.Валюта = ВалютаРегламентированногоУчета Тогда
			НаименованиеДоговора = НСтр("ru = 'Договор №[Номер] от [Дата]'");
		Иначе
			НаименованиеДоговора = НСтр("ru = 'Договор №[Номер] от [Дата] в [Валюта]'");
		КонецЕсли;		
		
	Иначе
		
		Если ОбъектЭСФ.Валюта = ВалютаРегламентированногоУчета Тогда
			НаименованиеДоговора = НСтр("ru = 'Без договора'");
		Иначе
			НаименованиеДоговора = НСтр("ru = 'Договор в [Валюта]'");
		КонецЕсли;		
		
	КонецЕсли;
		
	НаименованиеДоговора = СтрЗаменить(НаименованиеДоговора, "[Номер]", ОбъектЭСФ.ДоговорПоставкиНомер);	
	НаименованиеДоговора = СтрЗаменить(НаименованиеДоговора, "[Дата]", Формат(ОбъектЭСФ.ДоговорПоставкиДата, "ДФ=dd.MM.yyyy"));	
	НаименованиеДоговора = СтрЗаменить(НаименованиеДоговора, "[Валюта]", ОбъектЭСФ.Валюта);	
	
	Возврат НаименованиеДоговора;
	
КонецФункции

Функция ТекстКомментарияСозданПоДаннымЭСФ(СсылкаЭСФ) Экспорт
	
	КраткоеПредставлениеЭСФ = ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(СсылкаЭСФ);
	
	ТекстКомментария = НСтр("ru = 'Создан по данным документа ""[ЭСФ]"".'");
	ТекстКомментария = СтрЗаменить(ТекстКомментария, "[ЭСФ]", КраткоеПредставлениеЭСФ);

	Возврат ТекстКомментария;
	
КонецФункции

Функция ПолучитьВерсиюТекущейПлатформы() Экспорт
	
	ОбъектСисИнфо = Новый СистемнаяИнформация;
	Возврат СокрЛП(ОбъектСисИнфо.ВерсияПриложения);
	
КонецФункции

Функция РазобратьСтрокуВМассивПоРазделителю(Знач Стр, СтрРазделитель = ".") Экспорт
	
	Результат = Новый Массив;
	
	ВхождениеРазделителя = Найти(Стр, СтрРазделитель);
	Пока ВхождениеРазделителя <> 0 Цикл
		ЧастьДоРазделителя = СокрЛП(Лев(Стр, ВхождениеРазделителя - 1));
		Результат.Добавить(ЧастьДоРазделителя);
		Стр = СокрЛП(Сред(Стр, ВхождениеРазделителя + 1));
		ВхождениеРазделителя = Найти(Стр, СтрРазделитель);
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(Стр) Тогда
		Результат.Добавить(СокрЛП(Стр));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЭлементДаты(МассивЭлементов, ИндексЭлемента) 
	
	Если МассивЭлементов.Количество() <= ИндексЭлемента Тогда
		Возврат 0;
	Иначе
		ЭлементДаты = МассивЭлементов[ИндексЭлемента];
		Если ПустаяСтрока(ЭлементДаты) ИЛИ НЕ ЭСФКлиентСерверПереопределяемый.ТолькоЦифрыВСтроке(ЭлементДаты) Тогда
			Возврат 0;
		Иначе
			Возврат Число(ЭлементДаты);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ДатаПоСтроке(Знач Стр) Экспорт
	
	Попытка
		Если Найти(Стр, "-") <> 0 Тогда
			Если СтрДлина(Стр) > 10 Тогда
				Возврат Дата(Число(СокрЛП(Сред(Стр, 1, 4))),
							Число(СокрЛП(Сред(Стр, 6, 2))),
							Число(СокрЛП(Сред(Стр, 9, 2))),
							Число(СокрЛП(Сред(Стр, 12, 2))),
							Число(СокрЛП(Сред(Стр, 15, 2))),
							Число(СокрЛП(Сред(Стр, 18, 2))));
			Иначе
				Возврат Дата(Число(СокрЛП(Сред(Стр, 1, 4))),
							Число(СокрЛП(Сред(Стр, 6, 2))),
							Число(СокрЛП(Сред(Стр, 9, 2))));
			КонецЕсли;
		Иначе
			Если Найти(Стр, ":") <> 0 Тогда
				Стр = СтрЗаменить(Стр, " ", ",");
				Стр = СтрЗаменить(Стр, ":", ",");
				Стр = СтрЗаменить(Стр, ".", ",");
				Стр = СтрЗаменить(Стр, ",,", ",");
				МассивЭлементов = Новый Массив;
				ВхождениеРазделителя = Найти(Стр, ",");
				Пока ВхождениеРазделителя <> 0 Цикл
					МассивЭлементов.Добавить(СокрЛП(Лев(Стр, ВхождениеРазделителя - 1)));
					Стр = СокрЛП(Сред(Стр, ВхождениеРазделителя + 1));
					ВхождениеРазделителя = Найти(Стр, ",");
				КонецЦикла;
				Возврат Дата(ПолучитьЭлементДаты(МассивЭлементов, 2),
							ПолучитьЭлементДаты(МассивЭлементов, 1),
							ПолучитьЭлементДаты(МассивЭлементов, 0),
							ПолучитьЭлементДаты(МассивЭлементов, 3),
							ПолучитьЭлементДаты(МассивЭлементов, 4),
							ПолучитьЭлементДаты(МассивЭлементов, 5));
			Иначе
				Возврат Дата(Число(СокрЛП(Сред(Стр, 7, 4))),
							Число(СокрЛП(Сред(Стр, 4, 2))),
							Число(СокрЛП(Сред(Стр, 1, 2))));
			КонецЕсли;
		КонецЕсли;
	Исключение
		Возврат '00010101';
	КонецПопытки;
	
КонецФункции

Процедура СообщитьПользователю(Текст, Поле = Неопределено) Экспорт
	Сообщение = Новый СообщениеПользователю;
	
	Сообщение.Текст = Текст; 		
	Если ЗначениеЗаполнено(Поле) Тогда
		Сообщение.Поле = Поле;	
	КонецЕсли;	
	
	Сообщение.Сообщить();
КонецПроцедуры

Функция ПроксиСерверИСЭСФ() Экспорт
	
	НастройкиПрокси = ЭСФВызовСервераПовтИсп.ПолучитьПараметрыПодключенияКСерверуИСЭСФ();
	
	Если НастройкиПрокси.ПроксиСервер_ВариантИспользования = ЭСФКлиентСервер.ПроксиНеИспользовать() Тогда
		
		ИнтернетПрокси = Новый ИнтернетПрокси(Ложь);	
		
	ИначеЕсли НастройкиПрокси.ПроксиСервер_ВариантИспользования = ЭСФКлиентСервер.ПроксиСистемныеНастройки() Тогда
		
		ИнтернетПрокси = Новый ИнтернетПрокси(Истина);	
		
	ИначеЕсли НастройкиПрокси.ПроксиСервер_ВариантИспользования = ЭСФКлиентСервер.ПроксиДругиеНастройки() Тогда
		
		ИнтернетПрокси = Новый ИнтернетПрокси(Ложь);
		ИнтернетПрокси.Установить("http", НастройкиПрокси.ПроксиСервер_Сервер, НастройкиПрокси.ПроксиСервер_Порт);
		ИнтернетПрокси.Установить("https", НастройкиПрокси.ПроксиСервер_Сервер, НастройкиПрокси.ПроксиСервер_Порт);
		ИнтернетПрокси.Пользователь = НастройкиПрокси.ПроксиСервер_Пользователь;
		ИнтернетПрокси.Пароль = НастройкиПрокси.ПроксиСервер_Пароль;
		
	Иначе
		
		ИнтернетПрокси = Неопределено;
	
	КонецЕсли;
	
	Возврат ИнтернетПрокси;
	
КонецФункции

// Возвращает структуру параметров открытия сессии с подписью по-умолчанию.
//
// Возвращаемое значение:
//   Структура   - содержит параметры открытия сессии по-умолчанию.
//
Функция ПолучитьПараметрыОткрытияСессииСПодписьюПоУмолчанию() Экспорт
	
	ПараметрыОткрытияСессииСПодписью = Новый Структура();
	ПараметрыОткрытияСессииСПодписью.Вставить("ПроверятьАктивностьСессии", Истина);
	ПараметрыОткрытияСессииСПодписью.Вставить("ПроверятьПараметрыТикета", Ложь);
	ПараметрыОткрытияСессииСПодписью.Вставить("ВерсияЭСФ", Неопределено);
	ПараметрыОткрытияСессииСПодписью.Вставить("ВерсияВС", Неопределено);
	ПараметрыОткрытияСессииСПодписью.Вставить("ИмяМодуля", "ESF");
	ПараметрыОткрытияСессииСПодписью.Вставить("ТребуетсяДополнительноеОткрытиеСессииВС", Ложь);
	ПараметрыОткрытияСессииСПодписью.Вставить("ОткрытьСессиюБезПроверок", Ложь);
	
	Возврат ПараметрыОткрытияСессииСПодписью;
	
КонецФункции

#Область МетодыОбщегоНазначения

// Служебная функция, предназначенная для получения описания типов строки, заданной длины.
//
// Параметры:
//  ДлинаСтроки - число, длина строки.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для строки указанной длины.
//
Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки) Экспорт

	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));

	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);

	Возврат Новый ОписаниеТипов(Массив, , КвалификаторСтроки);

КонецФункции // ПолучитьОписаниеТиповСтроки()

// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
// 
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
Функция ПолучитьОписаниеТиповЧисла(Разрядность,РазрядностьДробнойЧасти=0) Экспорт

	Массив = Новый Массив;

	Массив.Добавить(Тип("Число"));
	КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность,РазрядностьДробнойЧасти);

	Возврат Новый ОписаниеТипов(Массив, КвалификаторЧисла);

КонецФункции // ПолучитьОписаниеТиповЧисла()

Функция ПустоеЗначениеТипа(ЗаданныйТип) Экспорт

	Если ЗаданныйТип = Тип("Число") Тогда
		Возврат 0;

	ИначеЕсли ЗаданныйТип = Тип("Строка") Тогда
		Возврат "";

	ИначеЕсли ЗаданныйТип = Тип("Дата") Тогда
		Возврат '00010101000000';

	ИначеЕсли ЗаданныйТип = Тип("Булево") Тогда
		Возврат Ложь;

	Иначе
		Возврат Новый (ЗаданныйТип);

	КонецЕсли;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Цвета

Функция ЦветСерый() Экспорт
	Возврат WebЦвета.Серый;	
КонецФункции

#КонецОбласти 

#Область ИдентификаторыТРУ

Функция СтруктураИдентификатораТовара(ИдентификаторТовара) Экспорт
	
	//пример полного идентификатора сожердащего все коды
	// физическая метка может отсутствовать
	//05.10.10.01-2701190000/8602026474128[JF1SJ9LC5JG385200]<3620>(957)
	//
	СтруктураИдентификатора = Новый Структура("КодКПВЭД, КодГСВСПолный, КодТНВЭД, МеткаТовара, КодGTIN", "","","","","");
	
	СтруктураИдентификатора.КодКПВЭД = ОпределитьКПВЭДПоИдентификатору(ИдентификаторТовара);
	СтруктураИдентификатора.КодТНВЭД = ОпределитьТНВЭДПоИдентификатору(ИдентификаторТовара);
	//СтруктураИдентификатора.КодGTIN  = ОпределитьGTINПоИдентификатору(ИдентификаторТовара);
	
	Если ЗначениеЗаполнено(СтруктураИдентификатора.КодКПВЭД) Тогда
		
		Если ЗначениеЗаполнено(СтруктураИдентификатора.КодТНВЭД) Тогда
			КодГСВС = СтруктураИдентификатора.КодКПВЭД + "-" + СтруктураИдентификатора.КодТНВЭД;
			Если ЗначениеЗаполнено(СтруктураИдентификатора.КодGTIN) Тогда
				КодГСВС = КодГСВС + "/" + СтруктураИдентификатора.КодGTIN;
			КонецЕсли;
		Иначе			
			КодГСВС = СтруктураИдентификатора.КодКПВЭД;
		КонецЕсли;
		
		СтруктураИдентификатора.КодГСВСПолный = КодГСВС;
		
	КонецЕсли;	
			
	СтруктураИдентификатора.МеткаТовара = ОпределитьМеткуПоИдентификатору(ИдентификаторТовара);		
	     
	Возврат СтруктураИдентификатора;
	
КонецФункции	

Функция ОпределитьКПВЭДПоИдентификатору(ИдентификаторТовара) Экспорт
	
	КПВЭД = "";
	Если СтрДлина(ИдентификаторТовара) >= 11 Тогда
		
		КПВЭД = Сред(ИдентификаторТовара, 1, 11);
		
		Если Сред(КПВЭД, 3,1) = "." И Сред(КПВЭД, 6,1) = "." И Сред(КПВЭД, 9,1) = "." Тогда
			
			Попытка
			    ПерваяЧасть = Число(Сред(КПВЭД, 1,2));
				ВтораяЧасть = Число(Сред(КПВЭД, 4,2));
				ТретьяЧасть = Число(Сред(КПВЭД, 7,2));
				ЧетвертаяЧасть = Число(Сред(КПВЭД, 10,2));
			Исключение
				ПерваяЧасть = Неопределено;
				ВтораяЧасть = Неопределено;
				ТретьяЧасть = Неопределено;
				ЧетвертаяЧасть = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		Если ПерваяЧасть = Неопределено Или ВтораяЧасть = Неопределено Или ТретьяЧасть = Неопределено Или ЧетвертаяЧасть = Неопределено Тогда
			КПВЭД = "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат КПВЭД;
	
КонецФункции

Функция ОпределитьТНВЭДПоИдентификатору(ИдентификаторТовара) Экспорт
	
	ТНВЭД = "";
	Если СтрДлина(ИдентификаторТовара) >= 22 Тогда
		
		ТНВЭД = Сред(ИдентификаторТовара, 13, 10);
				
		Попытка
			ТНВЭДЧисло = Число(ТНВЭД);
		Исключение
		    ТНВЭДЧисло = 0;
		КонецПопытки;
				
		Если ТНВЭДЧисло = 0 Тогда
			ТНВЭД = "";
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ТНВЭД;
	
КонецФункции

Функция ОпределитьМеткуПоИдентификатору(ИдентификаторТовара) Экспорт
	
	Метка = "";
	
	//ПерваяПозиция = СтрНайти(ИдентификаторТовара, "[");
	//ВтораяПозиция = СтрНайти(ИдентификаторТовара, "]");
	ПерваяПозиция = Найти(ИдентификаторТовара, "[");
	ВтораяПозиция = Найти(ИдентификаторТовара, "]");

	
	Если ПерваяПозиция <> 0 И ВтораяПозиция <> 0 Тогда
		ЧислоСимволов = ВтораяПозиция - (ПерваяПозиция + 1); 
		                                              
		Метка = Сред(ИдентификаторТовара, ПерваяПозиция+1, ЧислоСимволов);
	КонецЕсли;	
		
	Возврат Метка;
	
КонецФункции

#КонецОбласти

#Область ИнтернетПоддержка

// Возвращает текущие настройки соединения с серверами Интернет-поддержки.
//
Функция НастройкиСоединенияССерверами() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("УстанавливатьПодключениеНаСервере", Ложь);
	Результат.Вставить("ТаймаутПодключения"               , 30);
	Результат.Вставить("ДоменРасположенияСерверовИПП"     , 0);
	
	Возврат Результат;
	
КонецФункции

Функция АдресГлавнойСтраницыПортала(Путь = "") Экспорт
	
	НастройкиСоединения = НастройкиСоединенияССерверами();
	Возврат "https://"
		+ ХостПорталаПоддержки(НастройкиСоединения.ДоменРасположенияСерверовИПП)
		+ Путь;
	
КонецФункции

Функция АдресСтраницыСервиса(Путь = "") Экспорт
	
	НастройкиСоединения = НастройкиСоединенияССерверами();
	Возврат "https://"
		+ ХостСервисаLogin(НастройкиСоединения.ДоменРасположенияСерверовИПП)
		+ Путь;
	
КонецФункции

Функция ХостПорталаПоддержки(Домен)
	Если Домен = 0 Тогда
		Возврат "portal.1c.ru";
	Иначе
		Возврат "portal.1c.eu";
	КонецЕсли;
КонецФункции


Функция ХостСервисаLogin(Домен)

	Если Домен = 0 Тогда
		Возврат "login.1c.ru";
	Иначе
		Возврат "login.1c.eu";
	КонецЕсли;

КонецФункции

Функция URLСервисаПолученияТикетов(ДоменРасположенияСерверовИПП)

	Возврат "https://"
		+ ХостСервисаLogin(ДоменРасположенияСерверовИПП)
		+ "/rest/public/ticket/get";

КонецФункции

Функция URLСервисаПроверкиПаролей(ДоменРасположенияСерверовИПП)

	Возврат "https://"
		+ ХостСервисаLogin(ДоменРасположенияСерверовИПП)
		+ "/rest/public/user/auth";

КонецФункции

Функция ПараметрыAuthJSON(Логин, Пароль)

	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Логин);

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Пароль);

	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();

	Возврат ЗаписьДанныхСообщения.Закрыть();

КонецФункции

Функция ПроверитьЛогинИПароль(Логин, Пароль, Знач НастройкиСоединенияССерверами) Экспорт

	Результат = Новый Структура("КодОшибки, СообщениеОбОшибке, Результат", "", "", Ложь);

	URLСервиса = URLСервисаПроверкиПаролей(НастройкиСоединенияССерверами.ДоменРасположенияСерверовИПП);
		
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");

	ДопПараметрыЗапроса = Новый Структура;
	ДопПараметрыЗапроса.Вставить("Метод"                   , "POST");
	ДопПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
	ДопПараметрыЗапроса.Вставить("ФорматОтвета"            , 1);
	ДопПараметрыЗапроса.Вставить("Таймаут"                 , НастройкиСоединенияССерверами.ТаймаутПодключения);
	ДопПараметрыЗапроса.Вставить("ДанныеДляОбработки"      , ПараметрыAuthJSON(Логин, Пароль));
	ДопПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);

	РезультатПолученияФайла = ЗагрузитьСодержимоеИзИнтернет(
		URLСервиса,
		,
		,
		ДопПараметрыЗапроса);

	Если РезультатПолученияФайла.КодСостояния = 200 Тогда

		Результат.Результат = Истина;

	ИначеЕсли РезультатПолученияФайла.КодСостояния = 403 Тогда

		Результат.КодОшибки = "НеверныйЛогинИлиПароль";
		Результат.СообщениеОбОшибке = НСтр("ru = 'Неверный логин или пароль.'");

	ИначеЕсли РезультатПолученияФайла.КодСостояния = 429 Тогда

		Результат.КодОшибки = "ПревышеноКоличествоПопыток";
		Результат.СообщениеОбОшибке = НСтр("ru = 'Превышено количество попыток ввода логина и пароля.
			|Повторите попытку позже.'");

	Иначе

		ЭСФВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось проверить логин и пароль в сервисе %1. %2'"),
				URLСервиса,
				РезультатПолученияФайла.ИнформацияОбОшибке));

		Результат.КодОшибки         = РезультатПолученияФайла.КодОшибки;
		Результат.СообщениеОбОшибке = РезультатПолученияФайла.СообщениеОбОшибке;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Загружает содержимое из Интернет по протоколу HTTP(S)
// с использованием методов GET, POST или PUT.
//
Функция ЗагрузитьСодержимоеИзИнтернет(
	Знач URL,
	Знач Логин = Неопределено,
	Знач Пароль = Неопределено,
	ДопПараметры = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("КодОшибки"         , "");
	Результат.Вставить("СообщениеОбОшибке" , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("Содержимое"        , Неопределено);
	Результат.Вставить("КодСостояния"      , 0);
	Результат.Вставить("ФорматОтвета"      , 0);

	// Формат ответа: 0 - имя файла ответа, 1 - как строка, 2 - как двоичные данные.
	// Метод: "GET", "POST" или "PUT".
	// ДанныеДляОбработки: данные, передаваемые методом POST.
	// ФорматДанныхДляОбработки: 0 - имя файла, 1 как строка, 2 - как двоичные данные.
	// Заголовки - заголовки запроса.
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ФорматОтвета"            , 0);
	ПараметрыПолучения.Вставить("Метод"                   , "GET");
	ПараметрыПолучения.Вставить("ДанныеДляОбработки"      , Неопределено);
	ПараметрыПолучения.Вставить("ФорматДанныхДляОбработки", 0);
	ПараметрыПолучения.Вставить("Заголовки"               , Неопределено);
	ПараметрыПолучения.Вставить("ИмяФайлаОтвета"          , Неопределено);
	ПараметрыПолучения.Вставить("Таймаут"                 , -1);
	ПараметрыПолучения.Вставить("НастройкиПрокси"         , Неопределено);
	
	Если ДопПараметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыПолучения, ДопПараметры);
	КонецЕсли;
	
	Если ПараметрыПолучения.Таймаут = -1 Тогда
		ПараметрыПолучения.Таймаут = НастройкиСоединенияССерверами().ТаймаутПодключения;
	КонецЕсли;
	
	Результат.ФорматОтвета = ПараметрыПолучения.ФорматОтвета;
	
	КоличествоПеренаправлений  = 0;
	МаксКолвоПеренаправлений   = 7;
	Перенаправления            = Новый Массив;
	ВыполненныеПеренаправления = Новый Соответствие;
	ЗащищенноеСоединениеКэш    = Неопределено;
	
	URLДляПолучения = URL;
	HTTPЗапрос = Новый HTTPЗапрос;
	Если ПараметрыПолучения.Заголовки <> Неопределено Тогда
		HTTPЗапрос.Заголовки = ПараметрыПолучения.Заголовки;
	КонецЕсли;
	ТелоУстановлено = Ложь;
	Ответ = Неопределено;
	Пока КоличествоПеренаправлений < МаксКолвоПеренаправлений Цикл

		СтруктураURI = СтруктураURI(URLДляПолучения);
		Если СтруктураURI.Схема <> "https" Тогда
			ЗащищенноеСоединение = Неопределено;
		Иначе
			Если ЗащищенноеСоединениеКэш = Неопределено Тогда
				ЗащищенноеСоединениеКэш = Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);
			КонецЕсли;
			ЗащищенноеСоединение = ЗащищенноеСоединениеКэш;
		КонецЕсли;

		Если НЕ ПустаяСтрока(СтруктураURI.Логин) Тогда
			ЛогинДляПолучения  = СтруктураURI.Логин;
			ПарольДляПолучения = СтруктураURI.Пароль;
		Иначе
			ЛогинДляПолучения  = Логин;
			ПарольДляПолучения = Пароль;
		КонецЕсли;

		Если СтруктураURI.Порт = Неопределено ИЛИ ПустаяСтрока(СтруктураURI.Порт) Тогда
			Порт = ?(ЗащищенноеСоединение = Неопределено, 80, 443);
		Иначе
			Порт = Число(СтруктураURI.Порт);
		КонецЕсли;

		Прокси = НовыйПроксиСерверИСЭСФ();
		
		Соединение = Новый HTTPСоединение(
			СтруктураURI.Хост,
			Порт,
			ЛогинДляПолучения,
			ПарольДляПолучения,
			Прокси,
			ПараметрыПолучения.Таймаут,
			ЗащищенноеСоединение);

		Попытка

			HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;

			Если ПараметрыПолучения.Метод = "GET" Тогда
				Ответ = Соединение.Получить(HTTPЗапрос, ПараметрыПолучения.ИмяФайлаОтвета);
			ИначеЕсли ПараметрыПолучения.Метод = "HEAD" Тогда
				Ответ = Соединение.ПолучитьЗаголовки(HTTPЗапрос);
			Иначе

				Если НЕ ТелоУстановлено Тогда

					Если ПараметрыПолучения.ДанныеДляОбработки <> Неопределено Тогда

						Если ПараметрыПолучения.ФорматДанныхДляОбработки = 0 Тогда

							HTTPЗапрос.УстановитьИмяФайлаТела(ПараметрыПолучения.ДанныеДляОбработки);

						ИначеЕсли ПараметрыПолучения.ФорматДанныхДляОбработки = 1 Тогда

							HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыПолучения.ДанныеДляОбработки);

						Иначе

							HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыПолучения.ДанныеДляОбработки);

						КонецЕсли;

					КонецЕсли;

					ТелоУстановлено = Истина;

				КонецЕсли;

				Если ПараметрыПолучения.Метод = "PUT" Тогда
					Ответ = Соединение.Записать(HTTPЗапрос);
				Иначе
					// POST
					Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос, ПараметрыПолучения.ИмяФайлаОтвета);
				КонецЕсли;

			КонецЕсли;

		Исключение
			УстановитьОписаниеОшибки(
				Результат,
				"ConnectError",
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось загрузить содержимое (%1). %2'"),
					URL,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),
				Перенаправления);
			Возврат Результат;
		КонецПопытки;

		Результат.КодСостояния = Ответ.КодСостояния;

		Если Ответ.КодСостояния = 301 // 301 Moved Permanently
			ИЛИ Ответ.КодСостояния = 302 // 302 Found, 302 Moved Temporarily
			ИЛИ Ответ.КодСостояния = 303 // 303 See Other by GET
			ИЛИ Ответ.КодСостояния = 307 Тогда // 307 Temporary Redirect

			КоличествоПеренаправлений = КоличествоПеренаправлений + 1;

			Если КоличествоПеренаправлений > МаксКолвоПеренаправлений Тогда
				УстановитьОписаниеОшибки(
					Результат,
					"ServerError",
					НСтр("ru = 'Превышено количество перенаправлений.'"),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка сервера при получении файла (%1). Превышено количество перенаправлений (%2).'"),
						URL,
						МаксКолвоПеренаправлений),
					Перенаправления);
				Возврат Результат;
			Иначе
				Location = Ответ.Заголовки.Получить("Location");
				Если Location = Неопределено Тогда
					УстановитьОписаниеОшибки(
						Результат,
						"ServerError",
						НСтр("ru = 'Некорректное перенаправление.'"),
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Ошибка сервера (%1) при получении файла (%2). Некорректное перенаправление, отсутствует HTTP-заголовок ответа ""Location"".'"),
							Ответ.КодСостояния,
							URL),
						Перенаправления);
					Возврат Результат;
				Иначе
					Location = СокрЛП(Location);
					Если ПустаяСтрока(Location) Тогда
						УстановитьОписаниеОшибки(
							Результат,
							"ServerError",
							НСтр("ru = 'Некорректное перенаправление.'"),
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Ошибка сервера (%1) при получении файла (%2). Некорректное перенаправление, пустой HTTP-заголовок ответа ""Location"".'"),
								Ответ.КодСостояния,
								URL),
							Перенаправления);
						Возврат Результат;
					КонецЕсли;

					Если ВыполненныеПеренаправления.Получить(Location) <> Неопределено Тогда
						УстановитьОписаниеОшибки(
							Результат,
							"ServerError",
							НСтр("ru = 'Циклическое перенаправление.'"),
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Ошибка сервера (%1) при получении файла (%2). Циклическое перенаправление (%3).'"),
								Ответ.КодСостояния,
								URL,
								Location),
							Перенаправления);
						Возврат Результат;
					КонецЕсли;

					ВыполненныеПеренаправления.Вставить(Location, Истина);
					URLДляПолучения = Location;

					Перенаправления.Добавить(Строка(Ответ.КодСостояния) + ": " + Location);

				КонецЕсли;
			КонецЕсли;

		Иначе

			Прервать;

		КонецЕсли;

	КонецЦикла;

	Если ПараметрыПолучения.ФорматОтвета = 0 Тогда
		Результат.Содержимое = Ответ.ПолучитьИмяФайлаТела();
	ИначеЕсли ПараметрыПолучения.ФорматОтвета = 1 Тогда
		Результат.Содержимое = Ответ.ПолучитьТелоКакСтроку();
	ИначеЕсли ПараметрыПолучения.ФорматОтвета = 2 Тогда
		Результат.Содержимое = Ответ.ПолучитьТелоКакДвоичныеДанные();
	Иначе
		Результат.Содержимое = Ответ;
	КонецЕсли;
	
	// Обработка ответа
	Если Ответ.КодСостояния < 200 Или Ответ.КодСостояния >= 300 Тогда

		// Анализ ошибки
		Если Ответ.КодСостояния = 407 Тогда

			// Ошибка подключения - не пройдена аутентификация на прокси-сервере.
			УстановитьОписаниеОшибки(
				Результат,
				"ConnectError",
				НСтр("ru = 'Ошибка аутентификации на прокси-сервере.'"),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка клиента (%1) при выполнении запроса к ресурсу (%2).
						|Тело ответа: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		ИначеЕсли Ответ.КодСостояния < 200
			ИЛИ Ответ.КодСостояния >= 300
			И Ответ.КодСостояния < 400 Тогда

			// Формат ответа сервера не поддерживается.
			УстановитьОписаниеОшибки(
				Результат,
				"ServerError",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Некорректный ответ сервера (%1).'"),
					Ответ.КодСостояния),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка сервера при получении файла (%1). Некорректный (неподдерживаемый) ответ (%2).
						|Тело ответа: %3'"),
					URL,
					Ответ.КодСостояния,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		ИначеЕсли Ответ.КодСостояния >= 400 И Ответ.КодСостояния < 500 Тогда

			// Ошибка клиентской части - некорректный запрос.
			УстановитьОписаниеОшибки(
				Результат,
				"ClientError",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка (%1) при выполнении запроса к ресурсу.'"),
					Строка(Ответ.КодСостояния)),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка клиента (%1) при выполнении запроса к ресурсу (%2).
						|Тело ответа: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		Иначе

			// Ошибка сервера - 5хх
			УстановитьОписаниеОшибки(
				Результат,
				"ServerError",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Код ошибки: %1.'"),
					Строка(Ответ.КодСостояния)),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка сервера (%1) при обработке запроса к ресурсу (%2).
						|Тело ответа: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		КонецЕсли;

		ДобавитьСписокПеренаправленийКИнформацииОбОшибке(
			Результат.ИнформацияОбОшибке,
			Перенаправления);

	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура УстановитьОписаниеОшибки(Результат, КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке, Перенаправления)

	Результат.КодОшибки          = КодОшибки;
	Результат.СообщениеОбОшибке  = СообщениеОбОшибке;
	ДопСообщение = "";
	Если КодОшибки = "ConnectError" Тогда
		ДопСообщение = НСтр("ru = 'Ошибка при подключении к серверу.'");

	ИначеЕсли КодОшибки = "ServerError" Тогда
		ДопСообщение = НСтр("ru = 'На сервере возникла внутренняя ошибка при обработке запроса.'");

	ИначеЕсли КодОшибки = "ClientError" Тогда
		ДопСообщение = НСтр("ru = 'Некорректный запрос.'");

	ИначеЕсли КодОшибки = "InternalError" Тогда
		ДопСообщение = НСтр("ru = 'Внутренняя ошибка.'");

	ИначеЕсли КодОшибки = "LoginError" Тогда
		ДопСообщение = НСтр("ru = 'Ошибка аутентификации на сервере.'");

	КонецЕсли;

	Результат.СообщениеОбОшибке =
		?(ПустаяСтрока(ДопСообщение), "", ДопСообщение + " ")
		+ СообщениеОбОшибке;

	Результат.ИнформацияОбОшибке = ИнформацияОбОшибке;

	Если Перенаправления.Количество() > 0 Тогда
		Результат.ИнформацияОбОшибке = Результат.ИнформацияОбОшибке + Символы.ПС
			+ НСтр("ru = 'Перенаправления:'") + Символы.ПС
			+ СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(Перенаправления, ", " + Символы.ПС);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьСписокПеренаправленийКИнформацииОбОшибке(ИнформацияОбОшибке, Перенаправления)

	Если Перенаправления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ИнформацияОбОшибке = ИнформацияОбОшибке + Символы.ПС
		+ НСтр("ru = 'Перенаправления:'") + Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(Перенаправления, ", " + Символы.ПС);

КонецПроцедуры

Функция ПараметрыTicketGetJSON(Логин, Пароль, ВладелецТикета)

	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Логин);

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Пароль);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("serviceNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ВладелецТикета);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();

	Возврат ЗаписьДанныхСообщения.Закрыть();

КонецФункции

// Внутренняя функция для получения тикетов аутентификации.
//
Функция СлужебнаяТикетАутентификации(
	Знач Логин,
	Знач Пароль,
	Знач ИмяСервиса,
	НастройкиСоединения,
	НастройкиПрокси = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("КодОшибки"         , "");
	Результат.Вставить("СообщениеОбОшибке" , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("Тикет"             , Неопределено);
	
	Если Не ЗначениеЗаполнено(Логин) Тогда
		ПараметрыПолученияТикета = ЭСФВызовСервера.ПараметрыПолученияТикета(ИмяСервиса);
		Если ПараметрыПолученияТикета <> Неопределено Тогда
			Если ПараметрыПолученияТикета.Свойство("Тикет") Тогда
				// Получение тикета уже выполнено.
				Возврат ПараметрыПолученияТикета;
			Иначе
				Логин  = ПараметрыПолученияТикета.Логин;
				Пароль = ПараметрыПолученияТикета.Пароль;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Логин) Тогда
		Результат.КодОшибки = "НеверныйЛогинИлиПароль";
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Неверный логин или пароль.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
		Возврат Результат;
	КонецЕсли;
	
	Если НастройкиСоединения = Неопределено Тогда
		НастройкиСоединения = НастройкиСоединенияССерверами();
	КонецЕсли;
	
	URLСервиса = URLСервисаПолученияТикетов(НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ДопПараметрыЗапроса = Новый Структура;
	ДопПараметрыЗапроса.Вставить("Метод"                   , "POST");
	ДопПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
	ДопПараметрыЗапроса.Вставить("ФорматОтвета"            , 1);
	ДопПараметрыЗапроса.Вставить("ДанныеДляОбработки"      , ПараметрыTicketGetJSON(Логин, Пароль, ИмяСервиса));
	ДопПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ДопПараметрыЗапроса.Вставить("Таймаут"                 , 30);

	РезультатОперации = ЗагрузитьСодержимоеИзИнтернет(
		URLСервиса,
		,
		,
		ДопПараметрыЗапроса);

	Если РезультатОперации.КодСостояния = 200 Тогда
		
		Попытка
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(РезультатОперации.Содержимое);
			ОтветОбъект = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			Результат.Тикет = ОтветОбъект.ticket;
			
		Исключение
			
			ИнфОшибка = ИнформацияОбОшибке();
			Результат.КодОшибки = "ОшибкаСервиса";
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить тикет аутентификации в сервисе %1.
					|Некорректный ответ сервиса.
					|Ошибка при обработке ответа сервиса:
					|%2
					|Код состояния: %3;
					|Тело ответа: %4'"),
				URLСервиса,
				ПодробноеПредставлениеОшибки(ИнфОшибка),
				РезультатОперации.КодСостояния,
				Лев(РезультатОперации.Содержимое, 5120));
			ЭСФВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				Результат.ИнформацияОбОшибке);
			Результат.СообщениеОбОшибке =
				НСтр("ru = 'Ошибка аутентификации. Некорректный ответ сервиса.'");
			Результат.СообщениеОбОшибке =
				НСтр("ru = 'Ошибка аутентификации в сервисе.
					|Подробнее см. в журнале регистрации.'");
			
		КонецПопытки;
		
	ИначеЕсли РезультатОперации.КодСостояния = 403 Тогда
		
		Результат.КодОшибки = "НеверныйЛогинИлиПароль";
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Неверный логин или пароль.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
		
	ИначеЕсли РезультатОперации.КодСостояния = 429 Тогда
		
		Результат.КодОшибки = "ПревышеноКоличествоПопыток";
		Результат.СообщениеОбОшибке = НСтр("ru = 'Превышено количество попыток аутентификации.
			|Повторите попытку позже.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
		
	ИначеЕсли РезультатОперации.КодСостояния = 500 Тогда
		
		Результат.КодОшибки          = "ОшибкаСервиса";
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить тикет аутентификации в сервисе %1.
				|Внутренняя ошибка сервиса.
				|Код состояния: %2;
				|Тело ответа: %3'"),
			URLСервиса,
			РезультатОперации.КодСостояния,
			Лев(РезультатОперации.Содержимое, 5120));
		ЭСФВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		
		Результат.СообщениеОбОшибке =
			НСтр("ru = 'Ошибка аутентификации. Внутренняя ошибка сервиса.
				|Подробнее см. в журнале регистрации.'");
		
	ИначеЕсли РезультатОперации.КодСостояния = 0 Тогда
		
		Результат.КодОшибки         = "ОшибкаПодключения";
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить тикет аутентификации в сервисе %1.
				|%2'"),
			URLСервиса,
			РезультатОперации.ИнформацияОбОшибке);
		ЭСФВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		Результат.СообщениеОбОшибке = НСтр("ru = 'Ошибка подключения к сервису.
			|Подробнее см. в журнале регистрации.'");
		
	Иначе
		
		Результат.КодОшибки = "НеизвестнаяОшибка";
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить тикет аутентификации в сервисе %1.
				|Неизвестный код состояния ответа сервиса.
				|Код состояния: %2;
				|Тело ответа: %3'"),
			URLСервиса,
			РезультатОперации.КодСостояния,
			Лев(РезультатОперации.Содержимое, 5120));
		ЭСФВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		Результат.СообщениеОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка аутентификации в сервисе (%1).
					|Подробнее см. в журнале регистрации.'"),
				РезультатОперации.КодСостояния);
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция НовыйОпределенияСервиса(МестоположениеWSDL, Импорт = Ложь, ТаймаутПодключения = -1, НастройкиПрокси = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("КодОшибки"         , "");
	Результат.Вставить("СообщениеОбОшибке" , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("ДлительностьПолученияОписанияСервиса", 0);
	
	ДопПараметрыПолученияФайла = Новый Структура("ФорматОтвета, Таймаут", 1, ТаймаутПодключения);
	ДопПараметрыПолученияФайла.Вставить("НастройкиПрокси", НастройкиПрокси);
	ВремяНачалаЗагрузки = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОписаниеWSDL = ЗагрузитьСодержимоеИзИнтернет(
		МестоположениеWSDL,
		,
		,
		ДопПараметрыПолученияФайла);
	Результат.ДлительностьПолученияОписанияСервиса =
		(ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачалаЗагрузки);
	
	Если НЕ ПустаяСтрока(ОписаниеWSDL.КодОшибки) Тогда

		Результат.КодОшибки          = ОписаниеWSDL.КодОшибки;
		Результат.СообщениеОбОшибке  = ОписаниеWSDL.СообщениеОбОшибке;
		Результат.ИнформацияОбОшибке =
			НСтр("ru = 'Ошибка при получении WSDL-описания.'") + " "
				+ ОписаниеWSDL.ИнформацияОбОшибке;

		Возврат Результат;

	КонецЕсли;

	ТекстWSDL = ОписаниеWSDL.Содержимое;

	Попытка

		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстWSDL);
		ПостроительDOM = Новый ПостроительDOM;
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);

	Исключение

		Результат.КодОшибки          = "ServerError";
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Некорректное WSDL-описание сервиса.'");
		Результат.ИнформацияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при обработке WSDL-описания %1. %2'"),
				МестоположениеWSDL,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Результат;

	КонецПопытки;

	КорневойЭлемент = ДокументDOM.ПервыйДочерний;
	URIСервисов = ЗначениеАтрибутаУзлаDOM(КорневойЭлемент, "targetNamespace", "");

	Схемы         = Новый Массив;
	СервисыИПорты = Новый Массив;
	УзлыДирективыИмпорта = ДокументDOM.ПолучитьЭлементыПоИмени("http://schemas.xmlsoap.org/wsdl/", "import");
	Если УзлыДирективыИмпорта.Количество() > 0 Тогда

		Для каждого УзелИмпорта Из УзлыДирективыИмпорта Цикл

			Если УзелИмпорта.URIПространстваИмен <> "http://schemas.xmlsoap.org/wsdl/" Тогда
				Продолжить;
			КонецЕсли;

			Location = ЗначениеАтрибутаУзлаDOM(УзлыДирективыИмпорта[0], "location", "");
			Если ПустаяСтрока(Location) Тогда
				Результат.КодОшибки          = "ServerError";
				Результат.СообщениеОбОшибке  = НСтр("ru = 'Некорректное WSDL-описание сервиса.'");
				Результат.ИнформацияОбОшибке =
					НСтр("ru = 'Отсутствует location для директивы import.'");
				Возврат Результат;
			КонецЕсли;

			ОписаниеИмпорта = НовыйОпределенияСервиса(Location, Истина, ТаймаутПодключения, НастройкиПрокси);
			
			Результат.ДлительностьПолученияОписанияСервиса =
				Результат.ДлительностьПолученияОписанияСервиса
				+ ОписаниеИмпорта.ДлительностьПолученияОписанияСервиса;
			
			Если Не ПустаяСтрока(ОписаниеИмпорта.КодОшибки) Тогда
				Возврат ОписаниеИмпорта;
			КонецЕсли;

			// Обработка импорта
			Для каждого Схема Из ОписаниеИмпорта.Схемы Цикл
				Схемы.Добавить(Схема);
			КонецЦикла;

			Для каждого СервисИПорт Из ОписаниеИмпорта.СервисыИПорты Цикл
				СервисыИПорты.Добавить(СервисИПорт);
			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

	// Создание фабрики XDTO

	УзлыОписанияТипов = ДокументDOM.ПолучитьЭлементыПоИмени("http://schemas.xmlsoap.org/wsdl/", "types");
	Для каждого УзелТипов Из УзлыОписанияТипов Цикл

		УзлыСхем = УзелТипов.ПолучитьЭлементыПоИмени("http://www.w3.org/2001/XMLSchema", "schema");
		Для каждого УзелСхемы Из УзлыСхем Цикл

			СхемаОбщая = Новый СхемаXML;

			Попытка
				ПостроительСхемы = Новый ПостроительСхемXML;
				СхемаДанных = ПостроительСхемы.СоздатьСхемуXML(УзелСхемы);
				Схемы.Добавить(СхемаДанных);
			Исключение

				Результат.КодОшибки          = "ServerError";
				Результат.СообщениеОбОшибке  = НСтр("ru = 'Некорректное WSDL-описание сервиса.'");
				Результат.ИнформацияОбОшибке =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка при обработке WSDL-описания %1. Ошибка построения схемы данных. %2'"),
						МестоположениеWSDL,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат Результат;

			КонецПопытки;

		КонецЦикла;

	КонецЦикла;

	Если Импорт Тогда

		// Возвратить набор схем
		Результат.Вставить("Схемы", Схемы);

	Иначе

		// Создать фабрику XDTO сервиса
		Если Схемы.Количество() = 0 Тогда

			ФабрикаСервиса = Неопределено;

		Иначе

			Попытка

				НаборСхем = Новый НаборСхемXML;
				Для каждого Схема Из Схемы Цикл
					НаборСхем.Добавить(Схема);
				КонецЦикла;
				ФабрикаСервиса = Новый ФабрикаXDTO(НаборСхем);

			Исключение

				Результат.КодОшибки          = "ServerError";
				Результат.СообщениеОбОшибке  = НСтр("ru = 'Некорректное WSDL-описание сервиса.'");
				Результат.ИнформацияОбОшибке =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка при обработке WSDL-описания %1. Ошибка при создании фабрики XDTO сервиса. %2'"),
						МестоположениеWSDL,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат Результат;

			КонецПопытки;

		КонецЕсли;

		Результат.Вставить("ФабрикаXDTO", ФабрикаСервиса);

	КонецЕсли;

	// Сервисы и порты
	УзлыСервисов = КорневойЭлемент.ПолучитьЭлементыПоИмени("http://schemas.xmlsoap.org/wsdl/", "service");
	Для каждого УзелСервиса Из УзлыСервисов Цикл

		ИмяСервиса = ЗначениеАтрибутаУзлаDOM(УзелСервиса, "name", "");
		Если ПустаяСтрока(ИмяСервиса) Тогда
			Продолжить;
		КонецЕсли;

		УзлыПортов = УзелСервиса.ПолучитьЭлементыПоИмени("http://schemas.xmlsoap.org/wsdl/", "port");
		Для каждого УзелПорта Из УзлыПортов Цикл

			ИмяПорта = ЗначениеАтрибутаУзлаDOM(УзелПорта, "name", "");
			Если ПустаяСтрока(ИмяПорта) Тогда
				Продолжить;
			КонецЕсли;

			УзлыАдреса = УзелПорта.ПолучитьЭлементыПоИмени("http://schemas.xmlsoap.org/wsdl/soap/", "address");
			Если УзлыАдреса.Количество() > 0 Тогда

				УзелАдреса = УзлыАдреса[0];
				АдресПорта = ЗначениеАтрибутаУзлаDOM(УзелАдреса, "location", "");
				Если НЕ ПустаяСтрока(АдресПорта) Тогда
					СервисИПорт = Новый Структура;
					СервисИПорт.Вставить("URI"           , URIСервисов);
					СервисИПорт.Вставить("Сервис"        , ИмяСервиса);
					СервисИПорт.Вставить("Порт"          , ИмяПорта);
					СервисИПорт.Вставить("Местоположение", АдресПорта);
					СервисыИПорты.Добавить(СервисИПорт);
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Результат.Вставить("СервисыИПорты", СервисыИПорты);

	Возврат Результат;

КонецФункции

Функция ОпределенияСервиса(МестоположениеWSDL, ТаймаутПодключения = -1, НастройкиПрокси = Неопределено)

	ОписательОшибки = Неопределено;
	Попытка
		Если НастройкиПрокси = Неопределено Тогда
			
			Определения = НовыйОпределенияСервиса(
				МестоположениеWSDL,
				,
				ТаймаутПодключения);
				
			Если НЕ ПустаяСтрока(Определения.КодОшибки) Тогда
				ОписательОшибки = Определения;
				ВызватьИсключение Определения.СообщениеОбОшибке;
			КонецЕсли;
			
		Иначе
			Определения = НовыйОпределенияСервиса(
				МестоположениеWSDL,
				,
				ТаймаутПодключения,
				НастройкиПрокси);
		КонецЕсли;
	Исключение
		Возврат ОписательОшибки;
	КонецПопытки;

	Возврат Определения;

КонецФункции

Функция НовыйПроксиВебСервиса(
	МестоположениеWSDL,
	ТаймаутПодключения = -1,
	НастройкиПрокси = Неопределено)

	Результат = Новый Структура;
	Результат.Вставить("КодОшибки"         , "");
	Результат.Вставить("СообщениеОбОшибке" , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("ДлительностьПолученияОписанияСервиса", 0);
	
	URIПространстваИмен = Неопределено;
	ИмяСервиса          = Неопределено;
	ИмяТочкиПодключения = Неопределено;
	
	ОпределениеСервиса = ОпределенияСервиса(
		МестоположениеWSDL,
		ТаймаутПодключения,
		НастройкиПрокси);
	
	Результат.ДлительностьПолученияОписанияСервиса =
		Цел(ОпределениеСервиса.ДлительностьПолученияОписанияСервиса/1000);
	
	Если НЕ ПустаяСтрока(ОпределениеСервиса.КодОшибки) Тогда
		Результат.КодОшибки         = ОпределениеСервиса.КодОшибки;
		Результат.СообщениеОбОшибке = ОпределениеСервиса.СообщениеОбОшибке;
		Результат.ИнформацияОбОшибке =
			НСтр("ru = 'Ошибка при создании описания веб-сервиса.'") + " "
			+ ОпределениеСервиса.ИнформацияОбОшибке;
		Возврат Результат;
	КонецЕсли;

	НайденныйПорт = Неопределено;
	Для каждого СервисИПорт Из ОпределениеСервиса.СервисыИПорты Цикл

		Если (URIПространстваИмен = Неопределено ИЛИ СервисИПорт.URI = URIПространстваИмен)
			И (ИмяСервиса = Неопределено ИЛИ СервисИПорт.Сервис = ИмяСервиса)
			И (ИмяТочкиПодключения = Неопределено ИЛИ СервисИПорт.Порт = ИмяТочкиПодключения) Тогда
			НайденныйПорт = СервисИПорт;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Если НайденныйПорт = Неопределено Тогда

		Результат.КодОшибки         = "InternalError";
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не найдено определение сервиса.'");
		Результат.ИнформацияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при создании описания веб-сервиса %1. Определение сервиса не найдено.
					|URI пространства имен: %2;
					|Имя сервиса: %3;
					|Имя точки подключения: %4'"),
				МестоположениеWSDL,
				URIПространстваИмен,
				ИмяСервиса,
				ИмяТочкиПодключения);
		Возврат Результат;

	КонецЕсли;

	Результат.Вставить("ФабрикаXDTO"          , ОпределениеСервиса.ФабрикаXDTO);
	Результат.Вставить("АдресТочкиПодключения", НайденныйПорт.Местоположение);
	Результат.Вставить("URIПространстваИмен"  , НайденныйПорт.URI);

	Возврат Результат;

КонецФункции

// Возвращает строковое значение атрибута узла DOM-документа.
//
// Параметры:
//	УзелDOM - УзелDOM - узел DOM-документа;
//	ИмяАтрибута - Строка - полное имя атрибута;
//	ЗначениеЕслиНеНайдено - Произвольный - значение, которое необходимо
//		возвратить, если атрибут не найден;
//
// Возвращаемое значение:
//	Строка - строковое значение атрибута узла;
//
Функция ЗначениеАтрибутаУзлаDOM(УзелDOM, ИмяАтрибута, ЗначениеЕслиНеНайдено = Неопределено)

	Атрибут = УзелDOM.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);

	Если Атрибут = Неопределено Тогда
		Возврат ЗначениеЕслиНеНайдено;
	Иначе
		Возврат Атрибут.Значение;
	КонецЕсли;

КонецФункции

// Чтение объекта или значения в ответном SOAP-конверте в
// соответствии с фабрикой типов XDTO веб-сервиса.
//
// Параметры:
//	ТелоОтвета - Строка - тело SOAP-конверта-ответа;
//	ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//	ТипЗначения - ТипЗначенияXDTO, ТипОбъектаXDTO - тип читаемого значения;
//
// Возвращаемое значение:
//	ЗначениеXDTO, ОбъектXDTO - прочитанный ответ сервиса.
//
Функция ПрочитатьОтветВКонвертеSOAP(ТелоОтвета, ОписаниеСервисаИПП, ТипЗначения)

	Результат = Новый Структура;
	Результат.Вставить("Ошибка"              , Ложь);
	Результат.Вставить("СообщениеОбОшибке"   , "");
	Результат.Вставить("ИнформацияОбОшибке"  , "");
	Результат.Вставить("ВозвращенноеЗначение", Неопределено);

	ЧтениеОтвета = Новый ЧтениеXML;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);

	URISOAP = "http://schemas.xmlsoap.org/soap/envelope/";

	Попытка

		// Переход к телу ответа
		Пока НЕ (НРег(ЧтениеОтвета.ЛокальноеИмя) = "body"
			И ЧтениеОтвета.URIПространстваИмен = URISOAP) Цикл
			Если НЕ ЧтениеОтвета.Прочитать() Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;

		// Переход к описанию объекта ответа
		ЧтениеОтвета.Прочитать();

	Исключение

		Результат.Ошибка = Истина;
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Неверный формат ответа.'");
		Результат.ИнформацияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверный формат ответа SOAP. %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Результат;

	КонецПопытки;

	Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.НачалоЭлемента
		И ВРег(ЧтениеОтвета.ЛокальноеИмя) = "FAULT"
		И ЧтениеОтвета.URIПространстваИмен = URISOAP Тогда

		// Это исключение веб-сервиса
		Попытка
			ДеталиИсключения = ПрочитатьОписаниеИсключенияСервиса(ЧтениеОтвета);
		Исключение

			Результат.Ошибка = Истина;
			Результат.СообщениеОбОшибке  = НСтр("ru = 'Неверный формат ответа.'");
			Результат.ИнформацияОбОшибке =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неверный формат ответа SOAP. %1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат Результат;

		КонецПопытки;

		Результат.Ошибка = Истина;
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Ошибка SOAP-сервера.'");
		Результат.ИнформацияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка SOAP-сервера. %1'"),
				ОписаниеИсключенияSOAPВСтроку(ДеталиИсключения));
		Возврат Результат;

	КонецЕсли;

	Попытка
		Если ТипЗначения = Неопределено Тогда
			Значение = ОписаниеСервисаИПП.ФабрикаXDTO.ПрочитатьXML(ЧтениеОтвета);//, ТипЗначения);
		Иначе
			Значение = ОписаниеСервисаИПП.ФабрикаXDTO.ПрочитатьXML(ЧтениеОтвета, ТипЗначения);
		КонецЕсли;
	Исключение

		Результат.Ошибка = Истина;
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Неверный формат ответа.'");
		Результат.ИнформацияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверный формат ответа SOAP. %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Результат;

	КонецПопытки;

	Результат.ВозвращенноеЗначение = Значение;

	Возврат Результат;

КонецФункции

// Преобразование структуры-описателя исключения SOAP
// в строку для пользовательского представления;
//
// Параметры:
//	ИсключениеSOAP - Структура - см. ПрочитатьОписаниеИсключенияСервиса();
//
// Возвращаемое значение:
//	Строка - пользовательское представление исключения SOAP;
//
Функция ОписаниеИсключенияSOAPВСтроку(ИсключениеSOAP)

	Результат = "";
	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultCode) Тогда
		Результат = ИсключениеSOAP.FaultCode;
	КонецЕсли;

	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultString) Тогда
		Результат = Результат
			+ ?(ПустаяСтрока(Результат), "", " - ")
			+ ИсключениеSOAP.FaultString;
	КонецЕсли;

	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultActor) Тогда
		Результат = Результат + ?(ПустаяСтрока(Результат), "", Символы.ПС + НСтр("ru = 'Источник ошибки:'") + " ")
			+ ИсключениеSOAP.FaultActor;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Если в ответном SOAP-конверте содержится описание ошибки,
// то выполняется чтение описания ошибки.
//
// Параметры:
//	ЧтениеОтвета - ЧтениеXML - объект, используемый для чтения
//		ответного SOAP-конверта. На момент вызова спозиционирован на описании
//		исключения SOAP;
//
// Возвращаемое значение:
// Структура - описание исключения SOAP-сервера:
//	* FaultCode - Строка - код ошибки;
//	* FaultString - Строка - строковое описание ошибки;
//	* FaultActor - Строка - источник ошибки;
//
Функция ПрочитатьОписаниеИсключенияСервиса(ЧтениеОтвета)

	ОписаниеИсключения = Новый Структура("FaultCode, FaultString, FaultActor", "", "", "");

	URISOAP = "http://schemas.xmlsoap.org/soap/envelope/";

	Пока НЕ (ВРег(ЧтениеОтвета.ЛокальноеИмя) = "BODY"
		И ЧтениеОтвета.URIПространстваИмен = URISOAP
		И ЧтениеОтвета.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл

		Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяУзлаВРег = ВРег(ЧтениеОтвета.ЛокальноеИмя);

			Если ИмяУзлаВРег = "FAULTCODE"
				ИЛИ ИмяУзлаВРег = "FAULTSTRING"
				ИЛИ ИмяУзлаВРег = "FAULTACTOR" Тогда

				ЧтениеОтвета.Прочитать(); // Прочитать текст узла

				Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.Текст Тогда
					ОписаниеИсключения[ИмяУзлаВРег] = ЧтениеОтвета.Значение;
				КонецЕсли;

				ЧтениеОтвета.Прочитать(); // Прочитать конец элемента

			КонецЕсли;

		КонецЕсли;

		Если НЕ ЧтениеОтвета.Прочитать() Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат ОписаниеИсключения;

КонецФункции

// Отправку SOAP-конверта веб-сервису ИПП и получение ответного SOAP-конверта.
//
// Параметры:
//	ТекстКонверта - Строка - текст конверта-запроса;
//	ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//
// Возвращаемое значение:
//	Строка - текст SOAP-конверта-ответа;
//
Функция ОтправитьЗапросSOAP(ТекстКонверта, ПроксиСервиса, Таймаут = -1, НастройкиПрокси = Неопределено)

	Результат = Новый Структура(
		"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке, ТелоОтвета",
		"",
		"",
		Неопределено);

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "text/xml;charset=UTF-8");

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ФорматОтвета"            , 1);
	ДопПараметры.Вставить("Метод"                   , "POST");
	ДопПараметры.Вставить("ДанныеДляОбработки"      , ТекстКонверта);
	ДопПараметры.Вставить("ФорматДанныхДляОбработки", 1);
	ДопПараметры.Вставить("Заголовки"               , Заголовки);
	ДопПараметры.Вставить("Таймаут"                 , Таймаут);
	ДопПараметры.Вставить("НастройкиПрокси"         , НастройкиПрокси);

	ОтветСервера = ЗагрузитьСодержимоеИзИнтернет(
		ПроксиСервиса.АдресТочкиПодключения, , , ДопПараметры);

	ЗаполнитьЗначенияСвойств(Результат, ОтветСервера, "КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
	Если ПустаяСтрока(ОтветСервера.КодОшибки) Тогда
		Результат.ТелоОтвета = ОтветСервера.Содержимое;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Финализирует запись конверта SOAP и возвращает текст конверта.
//
// Параметры:
//	ЗаписьКонверта - ЗаписьXML - объект, в который выполнялась запись конверта;
//
// Возвращаемое значение:
//	Строка - текст конверта SOAP;
//
Функция ТекстВКонвертеSOAP(ЗаписьКонверта)

	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // </soap:Body>
	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // </soap:Envelope>

	Возврат ЗаписьКонверта.Закрыть();

КонецФункции

// Формирует объект тип ЗаписьXML с записанными SOAP-заголовками;
//
// Возвращаемое значение:
//	ЗаписьXML - объект записи XML с записанными SOAP-заголовками;
//
Функция НовыйЗаписьКонвертаSOAP(СоответствияПространствИмен = Неопределено)

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();

	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Envelope");

	Если СоответствияПространствИмен <> Неопределено Тогда
		Для каждого КлючЗначение Из СоответствияПространствИмен Цикл
			ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(
				КлючЗначение.Ключ,
				КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;

	ЗаписьXML.ЗаписатьАтрибут("xmlns:soap", "http://schemas.xmlsoap.org/soap/envelope/");
	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Header");
	ЗаписьXML.ЗаписатьКонецЭлемента(); // </soap:Header>
	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Body");

	Возврат ЗаписьXML;

КонецФункции

#КонецОбласти
