
//Заполняет значения прочих полей в строках табличной части Участники документов взаимодействий.
//
//Параметры
//  Контакт                 - СправочникСсылка - контакт, на основании данных которого будут заполнены прочие поля.
//  Представление           - Строка - представление контакта.
//  Адрес                   - Строка - контактная информация контакта.
//  ТипКонтактнойИнформации - Перечисления.ТипыКонтактнойИнформации - контактная информация контакта.
//
Процедура ДозаполнитьПоляКонтактов(Контакт, Представление, Адрес, ТипКонтактнойИнформации = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Контакт) Тогда
		Возврат;
	ИначеЕсли Не ПустаяСтрока(Представление) И Не ПустаяСтрока(Адрес) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним поле представление
	Если ПустаяСтрока(Представление) Тогда
		Представление = ?(ЗначениеЗаполнено(Контакт), ОбщегоНазначения.ПолучитьЗначениеРеквизита(Контакт,"Наименование"),"");
	КонецЕсли;
	
	// Для всех типов кроме электронной почты
	Если ТипКонтактнойИнформации <> Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		
		Если ПустаяСтрока(Адрес) Тогда
			ПолучитьПредставлениеИВсюКонтактнуюИнформациюКонтакта(
				Контакт, "", Адрес, ТипКонтактнойИнформации);
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	// Для адреса электронной почты проверим, введен он или нет
	Если Найти(Адрес, "@") <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	Адреса = ПолучитьНаименованиеИАдресаЭлектроннойПочтыКонтакта(Контакт);
	Если Адреса <> Неопределено И Адреса.Адреса.Количество() > 0 Тогда
		Элемент = Адреса.Адреса.Получить(0);
		Адрес = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

// Получает представление и всю контактную информацию контакта.
//
// Параметры
//  Контакт       - Ссылка - контакт для которого получается информация
//  Представление - Строка - в данный параметр будет помещено полученное представление
//  СтрокаКИ      - Строка - в данный параметр будет помещено полученная контактная информация
//
Процедура ПолучитьПредставлениеИВсюКонтактнуюИнформациюКонтакта(Контакт, Представление, СтрокаКИ,ТипКонтакнойИнформации = Неопределено) Экспорт
	
	Представление = "";
	СтрокаКИ = "";
	Если Не ЗначениеЗаполнено(Контакт) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = Контакт.Метаданные().Имя;
	ИмяПоляДляНаименованияВладельца = ПолучитьИмяПоляДляНаименованияВладельца(ИмяТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект КАК Наименование,
	|	" + ИмяПоляДляНаименованияВладельца + " КАК НаименованиеВладельца,
	|	КонтактнаяИнформация.Тип,
	|	КонтактнаяИнформация.Вид,
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.Поле1,
	|	КонтактнаяИнформация.Поле2,
	|	КонтактнаяИнформация.Поле3,
	|	КонтактнаяИнформация.Поле4,
	|	КонтактнаяИнформация.Поле5,
	|	КонтактнаяИнформация.Поле6,
	|	КонтактнаяИнформация.Поле7,
	|	КонтактнаяИнформация.Поле8,
	|	КонтактнаяИнформация.Поле9,
	|	КонтактнаяИнформация.Поле10,
	|	КонтактнаяИнформация.Комментарий,
	|	КонтактнаяИнформация.ЗначениеПоУмолчанию,
	|	КонтактнаяИнформация.ПользовательЛичногоКонтакта
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Контакт" + ?(ТипКонтакнойИнформации = Неопределено,""," И КонтактнаяИнформация.Тип = &ТипКонтактнойИнформации");
	
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Запрос.УстановитьПараметр("ТипКонтактнойИнформации", ТипКонтакнойИнформации);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Представление = Выборка.Наименование;
	
	Если Не ПустаяСтрока(Выборка.НаименованиеВладельца) Тогда
		Представление = Представление + " (" + Выборка.НаименованиеВладельца + ")";
	КонецЕсли;
	
	Выборка.Сбросить();
	
	Пока Выборка.Следующий() Цикл 
	//Для Каждого СтрокаТаблицы Из Выборка.КонтактнаяИнформация.Выгрузить() Цикл
		Если Выборка.Тип <> Перечисления.ТипыКонтактнойИнформации.Другое Тогда
			СтрокаКИ = СтрокаКИ + ?(ПустаяСтрока(СтрокаКИ), "", ", ") + Выборка.Представление;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает поля для получения наименования владельца, если такой имеется
//
//Параметры
//  ИмяТаблицы - Строка - Имя основной таблицы, для которой формируется запрос.
//
//Возвращаемое значение:
//  Строка - строка, которая будет вставлена в запрос.
//
Функция ПолучитьИмяПоляДляНаименованияВладельца(ИмяТаблицы) Экспорт
	
	МассивОписанияКонтактов = ПолучитьМассивОписанияВозможныхКонтактов();
	
	Для каждого ЭлементОписанияМассива Из МассивОписанияКонтактов Цикл
		Если ЭлементОписанияМассива.Имя = ИмяТаблицы И ЭлементОписанияМассива.ЕстьВладелец Тогда
			Возврат "Таблица.Владелец.Наименование";
		КонецЕсли;
	КонецЦикла;
	
	Возврат """""";
	
КонецФункции

// Возвращает описания возможных типов контактов.
// Используется, если в конфигурации определен хотя бы один тип контактов взаимодействий,
// помимо справочника Пользователи.
//
// Возвращаемое значение:
//   Массив   - массив структур, в котором описываются возможные типы контактов.
//              Каждая структура содержит описание одного типа контактов.   
//              Описание полей структуры см. в комментарии к функции
//              ДобавитьЭлементМассиваОписанияВозможныхТиповКонтактов общего модуля
//              ВзаимодействияКлиентСервер.
//
Функция ПолучитьМассивОписанияВозможныхКонтактов() Экспорт

	МассивВозможныеКонтакты = Новый Массив();
	ДобавитьЭлементМассиваОписанияВозможныхТиповКонтактов(МассивВозможныеКонтакты,
		Тип("СправочникСсылка.ПодразделенияОрганизаций"),Ложь,"ПодразделенияОрганизаций","Подразделения организаций",Ложь,Ложь,"",Ложь,"");
	ДобавитьЭлементМассиваОписанияВозможныхТиповКонтактов(МассивВозможныеКонтакты,
		Тип("СправочникСсылка.Контрагенты"),Ложь,"Контрагенты","Контрагенты",Ложь,Ложь,"",Ложь,"");
	ДобавитьЭлементМассиваОписанияВозможныхТиповКонтактов(МассивВозможныеКонтакты,
		Тип("СправочникСсылка.КонтактныеЛица"),Ложь,"КонтактныеЛица","Контактные лица",Ложь,Ложь,"",Ложь,"");
	ДобавитьЭлементМассиваОписанияВозможныхТиповКонтактов(МассивВозможныеКонтакты,
		Тип("СправочникСсылка.ФизическиеЛица"),Ложь,"ФизическиеЛица","Физические лица",Ложь,Ложь,"",Ложь,"");
	ДобавитьЭлементМассиваОписанияВозможныхТиповКонтактов(МассивВозможныеКонтакты,
		Тип("СправочникСсылка.Организации"),Ложь,"Организации","Организации",Ложь,Ложь,"",Ложь,"");
	ДобавитьЭлементМассиваОписанияВозможныхТиповКонтактов(МассивВозможныеКонтакты,
		Тип("СправочникСсылка.Пользователи"),Ложь,"Пользователи","Пользователи",Ложь,Ложь,"",Ложь,"");
		
	//ДополнитьМассивОписанияВозможныхКонтактов(МассивВозможныеКонтакты);
	
	Возврат МассивВозможныеКонтакты;

КонецФункции // ПолучитьСтруктуруВозможныеКонтакты()


//Получает наименование и адреса электронной почты контакта
//
//Параметры
//  Контакт - Ссылка - контакт, для которого получаются данные
//
//Возвращаемое значение:
//  Структура - содержит наименование контакта и список значений электронной почты контакта
//
Функция ПолучитьНаименованиеИАдресаЭлектроннойПочтыКонтакта(Контакт) Экспорт
	
	Если Не ЗначениеЗаполнено(Контакт) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Контакт.Метаданные().Иерархический Тогда
		Если Контакт.ЭтоГруппа Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяТаблицы = Контакт.Метаданные().ПолноеИмя();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Объект КАК Наименование,
	|	КонтактнаяИнформация.Представление КАК АдресЭП
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Контакт
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И КонтактнаяИнформация.ЗначениеПоУмолчанию = ИСТИНА";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Адреса = Новый Структура("Наименование,Адреса", Выборка.Наименование, Новый СписокЗначений);
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		Адреса.Адреса.Добавить(Выборка.АдресЭП);
	КонецЦикла;
	
	Возврат Адреса;
	
КонецФункции


// Добавляет элемент в массив структур контакта
//
// Параметры
//  МассивОписания                     - Массив - массив, в который будут добавлена структура описания контакта.
//  Тип                                - Тип - тип ссылки контакта.
//  ВозможностьИнтерактивногоСоздания  - Булево - признак возможности интерактивного создания контакта из документов - взаимодействий.
//  Имя                                 - Строка - имя типа контакта , как оно определено в метаданных.
//  Представление                       - Строка - представление типа контакта для отображения пользователю.
//  Иерархический                       - Булево - признак того, является ли справочник иерархическим.
//  ЕстьВладелец                        - Булево - признак того, что у контакта есть владелец.
//  ИмяВладельца                        - Строка - имя владельца контакта, как оно определено в метаданных.
//  ИскатьПоДомену                      - Булево - признак того, что по данному типу контакта будет осуществляться поиск по домену.
//  Связь                               - Строка - описывает возможную связь данного контакта с другим контактом, в случае когда текущий контакт
//                                        является реквизитом другого контакта. Описывается следующей строкой "ИмяТаблицы.ИмяРеквизита" 
//
Процедура ДобавитьЭлементМассиваОписанияВозможныхТиповКонтактов(
	МассивОписания,
	Тип,
	ВозможностьИнтерактивногоСоздания,
	Имя,
	Представление,
	Иерархический,
	ЕстьВладелец,
	ИмяВладельца,
	ИскатьПоДомену,
	Связь) Экспорт
	
	МассивОписания.Добавить(Новый Структура(
		"Тип,ВозможностьИнтерактивногоСоздания, Имя, Представление, Иерархический, ЕстьВладелец, ИмяВладельца, ИскатьПоДомену, Связь",
		Тип,
		ВозможностьИнтерактивногоСоздания,
		Имя,
		Представление,
		Иерархический,
		ЕстьВладелец,
		ИмяВладельца,
		ИскатьПоДомену,
		Связь));
	
КонецПроцедуры

#Если ТолстыйКлиентОбычноеПриложение Тогда

Функция ПолучателейБольшеОдного(Получатель) Экспорт
	Если ТипЗнч(Получатель) = Тип("Массив") Или ТипЗнч(Получатель) = Тип("СписокЗначений") Тогда
		Возврат Получатель.Количество() > 1;
	Иначе
		Возврат ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(Получатель).Количество() > 1;
	КонецЕсли;
КонецФункции

Функция ПоместитьТабличныеДокументыВоВременноеХранилище(НастройкиСохранения, ПараметрыОтправки) Экспорт 
	Перем ЗаписьZipФайла, ИмяАрхива;
	
	Результат = Новый СписокЗначений;
	
	// подготовка архива
	Если НастройкиСохранения.УпаковатьВАрхив Тогда
		ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
		ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяАрхива);
	КонецЕсли;
	
	// подготовка временной папки
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	ИспользованныеИменаФайлов = Новый Соответствие;
	
	ВыбранныеФорматыСохранения = НастройкиСохранения.ФорматыСохранения;
	ТаблицаФорматов = НастройкиФорматовСохраненияТабличногоДокумента();
	
	Для Каждого ТипФайла Из ВыбранныеФорматыСохранения Цикл
		НастройкиФормата = ТаблицаФорматов.НайтиСтроки(Новый Структура("ТипФайлаТабличногоДокумента", ТипФайла))[0];
		
		ИмяФайла = ПолучитьИмяВременногоФайлаДляПечатнойФормы(ПараметрыОтправки.Тема,НастройкиФормата.Расширение,ИспользованныеИменаФайлов);
		ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайла;
		
		Попытка
			ПараметрыОтправки.ПолеДокумента.Записать(ПолноеИмяФайла, ТипФайла);
		Исключение
			Сообщить("Не удалось сохранить файл в формат:" + НастройкиФормата.Расширение + ". Пожалуйста, выберите другой формат сохранения файла.", СтатусСообщения.Важное);
			Продолжить;
		КонецПопытки;
				
		Если ТипФайла = ТипФайлаТабличногоДокумента.HTML Тогда
			ВставитьКартинкиВHTML(ПолноеИмяФайла);
		КонецЕсли;
		
		Если ЗаписьZipФайла <> Неопределено Тогда 
			ЗаписьZipФайла.Добавить(ПолноеИмяФайла);
		Иначе
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ПараметрыОтправки.КлючУникальности);
			Результат.Добавить(ПутьВоВременномХранилище, ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	
	// если архив подготовлен, записываем и помещаем его во временное хранилище
	Если ЗаписьZipФайла <> Неопределено Тогда 
		ЗаписьZipФайла.Записать();
		ФайлАрхива = Новый Файл(ИмяАрхива);
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяАрхива);
		ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ПараметрыОтправки.КлючУникальности);
		Результат.Добавить(ПутьВоВременномХранилище, ПолучитьИмяФайлаДляАрхива(ПараметрыОтправки));
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременнойПапки);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИмяВременногоФайлаДляПечатнойФормы(ИмяМакета, Расширение, ИспользованныеИменаФайлов)
	
	ШаблонИмениФайла = "%1%2.%3";
	
	ИмяМакета = СокрЛП(Лев(ИмяМакета, 250));
	
	ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, ИмяМакета, "", Расширение));
		
	НомерИспользования = ?(ИспользованныеИменаФайлов[ИмяВременногоФайла] <> Неопределено,
							ИспользованныеИменаФайлов[ИмяВременногоФайла] + 1,
							1);
	
	ИспользованныеИменаФайлов.Вставить(ИмяВременногоФайла, НомерИспользования);
	
	// если имя уже было ранее использовано, прибавляем счётчик в конце имени
	Если НомерИспользования > 1 Тогда
		ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонИмениФайла,
				ИмяМакета,
				" (" + НомерИспользования + ")",
				Расширение));
	КонецЕсли;
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

Процедура ВставитьКартинкиВHTML(ИмяФайлаHTML) Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	ТекстHTML = ТекстовыйДокумент.ПолучитьТекст();
	
	ФайлHTML = Новый Файл(ИмяФайлаHTML);
	
	ИмяПапкиКартинок = ФайлHTML.ИмяБезРасширения + "_files";
	ПутьКПапкеКартинок = СтрЗаменить(ФайлHTML.ПолноеИмя, ФайлHTML.Имя, ИмяПапкиКартинок);
	
	// ожидается, что в папке будут только картинки
	ФайлыКартинок = НайтиФайлы(ПутьКПапкеКартинок, "*");
	
	Для Каждого ФайлКартинки Из ФайлыКартинок Цикл
		КартинкаТекстом = Base64Строка(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя));
		КартинкаТекстом = "data:image/" + Сред(ФайлКартинки.Расширение,2) + ";base64," + Символы.ПС + КартинкаТекстом;
		
		ТекстHTML = СтрЗаменить(ТекстHTML, ИмяПапкиКартинок + "\" + ФайлКартинки.Имя, КартинкаТекстом);
	КонецЦикла;
		
	ТекстовыйДокумент.УстановитьТекст(ТекстHTML);
	ТекстовыйДокумент.Записать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	
КонецПроцедуры

Функция ПолучитьИмяФайлаДляАрхива(ПараметрыОтправки) Экспорт 
	
	Результат = "";
	
	Если ПустаяСтрока(Результат) Тогда
		Результат = ПараметрыОтправки.Тема;
	Иначе
		Результат = НСтр("ru = 'Документы'");
	КонецЕсли;
	
	Возврат Результат + ".zip";
	
КонецФункции

#КонецЕсли


// Возвращает таблицу возможных форматов для сохранения табличного документа.
//
// Возвращаемое значение
//  ТаблицаЗначений:
//                   ТипФайлаТабличногоДокумента - ТипФайлаТабличногоДокумента                 - значение в платформе, соответствующее формату;
//                   Ссылка                      - ПеречислениеСсылка.ФорматыСохраненияОтчетов - ссылка на метаданные, где хранится представление;
//                   Представление               - Строка -                                    - представление типа файла (заполняется из перечисления);
//                   Расширение                  - Строка -                                    - тип файла для операционной системы;
//                   Картинка                    - Картинка                                    - значок формата.
//
// Примечание: таблица форматов может быть переопределена в процедуре УправлениеПечатьюПереопределяемый.ПриЗаполненииНастроекФорматовСохранения().
//
Функция НастройкиФорматовСохраненияТабличногоДокумента() Экспорт
	
	ТаблицаФорматов = Новый ТаблицаЗначений;
	
	ТаблицаФорматов.Колонки.Добавить("ТипФайлаТабличногоДокумента", Новый ОписаниеТипов("ТипФайлаТабличногоДокумента"));
	ТаблицаФорматов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ПеречислениеСсылка.ФорматыСохраненияОтчетов"));
	ТаблицаФорматов.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ТаблицаФорматов.Колонки.Добавить("Расширение", Новый ОписаниеТипов("Строка"));
	ТаблицаФорматов.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));

	// Документ PDF (.pdf)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.PDF;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.PDF;
	НовыйФормат.Расширение = "pdf";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматPDF;
	
	// Лист Microsoft Excel 2007 (.xlsx)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.XLSX;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.XLSX;
	НовыйФормат.Расширение = "xlsx";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматExcel2007;

	// Лист Microsoft Excel 97-2003 (.xls)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.XLS;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.XLS;
	НовыйФормат.Расширение = "xls";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматExcel;

	// Электронная таблица OpenDocument (.ods)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.ODS;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.ODS;
	НовыйФормат.Расширение = "ods";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматOpenOfficeCalc;
	
	// Табличный документ (.mxl)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.MXL;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.MXL;
	НовыйФормат.Расширение = "mxl";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматMXL;

	// Документ Word 2007 (.docx)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.DOCX;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.DOCX;
	НовыйФормат.Расширение = "docx";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматWord2007;
	
	// Веб-страница (.html)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.HTML;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.HTML;
	НовыйФормат.Расширение = "html";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматHTML;
	
	// Текстовый документ UTF-8 (.txt)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.TXT;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.TXT;
	НовыйФормат.Расширение = "txt";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматTXT;
	
	// Текстовый документ ANSI (.txt)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.ANSITXT;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.ANSITXT;
	НовыйФормат.Расширение = "txt";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматTXT;

	// дополнительные форматы / изменение списка текущих
	//УправлениеПечатьюПереопределяемый.ПриЗаполненииНастроекФорматовСохраненияТабличногоДокумента(ТаблицаФорматов);
	
	Для Каждого ФорматСохранения Из ТаблицаФорматов Цикл
		ФорматСохранения.Представление = Строка(ФорматСохранения.Ссылка);
	КонецЦикла;
		
	Возврат ТаблицаФорматов;
	
КонецФункции


#Если Клиент Тогда
	
Процедура ОткрытьФормуОтправкиПочтовогоСообщения(Отправитель,Получатель,Тема,Текст,СписокФайлов,УдалятьФайлыПослеОтправки) Экспорт
	
	Письмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
	Письмо.Автор = глЗначениеПеременной("глТекущийПользователь");
	Письмо.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	Письмо.ТекстПисьма = Текст;
	Письмо.Тема = Тема;
	Письмо.УчетнаяЗапись = Отправитель;
	Если НЕ ЗначениеЗаполнено(Отправитель) Тогда
		Письмо.УчетнаяЗапись = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяУчетнаяЗапись");
	КонецЕсли;
	Для Каждого ЭлПолучатель Из Получатель Цикл
		Если ЗначениеЗаполнено(ЭлПолучатель.Адрес) Тогда
			НС = Письмо.КомуТЧ.Добавить();
			НС.Представление = ЭлПолучатель.Представление;
			НС.АдресЭлектроннойПочты = ЭлПолучатель.Адрес;
			Письмо.Кому = Письмо.Кому+?(Письмо.Кому="","",", ")+ЭлПолучатель.Представление+" <"+ЭлПолучатель.Адрес+">";
		КонецЕсли;
	КонецЦикла;
	ФормаДокумента = Письмо.ПолучитьФорму();
	Для Каждого Файл Из СписокФайлов Цикл
		СтрокаТЧ = ФормаДокумента.ВложенияПисьмаТЗ.Добавить();
		СтрокаТЧ.Наименование = Файл.Представление;
		СтрокаТЧ.ИмяФайла = Файл.Представление;
		СтрокаТЧ.Данные = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(Файл.Значение));
		//СтрокаТЧ.Картинка = Файл.Картинка;
	КонецЦикла;
	ФормаДокумента.Открыть();
	
	//ПараметрыПисьма.Вставить("УчетнаяЗапись", Отправитель);
	//ПараметрыПисьма.Вставить("Кому", Получатель);
	//ПараметрыПисьма.Вставить("Тема", Тема);
	//ПараметрыПисьма.Вставить("Тело", Текст);
	//ПараметрыПисьма.Вставить("Вложения", СписокФайлов);
	//
	//ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.ФормаДокумента", ПараметрыПисьма);
	//
КонецПроцедуры

#КонецЕсли

Процедура НастроитьКнопкиОтправки(Форма,КоманднаяПанель) Экспорт
	Если Константы.ИспользоватьПочтовыйКлиент.Получить() Тогда
		НоваяКоманда = Форма.Команды.Добавить("ОтправитьНаПочту");
		НоваяКоманда.Заголовок = "Отправить...";
		НоваяКоманда.Картинка = БиблиотекаКартинок.ОтправитьПолучитьПочту;
		НоваяКоманда.Отображение= ОтображениеКнопки.КартинкаИТекст;
		НоваяКоманда.Действие = "ОтправитьНаПочту";
		КП = Форма.Элементы.Добавить("Отправить",Тип("КнопкаФормы"),КоманднаяПанель);
		КП.Заголовок = "Отправить...";
		КП.Картинка = БиблиотекаКартинок.ОтправитьПолучитьПочту;
		КП.Отображение= ОтображениеКнопки.КартинкаИТекст;
		КП.ИмяКоманды = "ОтправитьНаПочту";
	КонецЕсли;
КонецПроцедуры
