
#Если Клиент Тогда

	//////////////////////////////////////////////////////////////////////////////////
	//// ПРОЦЕДУРЫ И ФУНКЦИИ ДИАЛОГОВ РАСЧЕТНЫХ ДОКУМЕНТОВ

	// Процедура выполняет общие действия при изменении контрагента
	//
	// Параметры:
	//  ДокументОбъект - объект редактируемого документа,
	//
	Процедура мПриИзмененииЗначенияКонтрагента(	ДокументОбъект, Знач СтруктураПараметровДляПолученияДоговора = Неопределено) Экспорт

		Если СтруктураПараметровДляПолученияДоговора <> Неопределено Тогда
			// для совместимости с прежней версией процедуры проверим тип параметра - раньше был список с видами договоров
			Если ТипЗнч(СтруктураПараметровДляПолученияДоговора) = Тип("СписокЗначений") Тогда
				ВрмСписок = СтруктураПараметровДляПолученияДоговора;
				СтруктураПараметровДляПолученияДоговора = Новый Структура("СписокДопустимыхВидовДоговоров", ВрмСписок);
			КонецЕсли;
		КонецЕсли;

		МетаданныеДокумента = ДокументОбъект.Метаданные();

		ЕстьДоговорКонтрагента        = гз_ОбщегоНазначения.мЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента);
		ЕстьКонтактноеЛицоКонтрагента = гз_ОбщегоНазначения.мЕстьРеквизитДокумента("КонтактноеЛицоКонтрагента", МетаданныеДокумента);

		Если ДокументОбъект.Контрагент = Неопределено Тогда
			ДокументОбъект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли; 

		Если ТипЗнч(ДокументОбъект.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
				Если ТипЗнч(ДокументОбъект.Контрагент) = Тип("Строка") Тогда
					КонтактноеЛицоКонтрагента = "";
				Иначе
					КонтактноеЛицоКонтрагента = Справочники["КонтактныеЛицаКонтрагентов"].ПустаяСсылка();
				КонецЕсли; 
			КонецЕсли;

		Иначе

			// Если в документе уже выбран "правильный" договор, то не будем его менять.
			Если ЕстьДоговорКонтрагента Тогда
				Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда 
					ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				Иначе
					Если мМожноИспользоватьДоговорДляДокумента(ДокументОбъект.ДоговорКонтрагента, ДокументОбъект.Контрагент, ДокументОбъект.Организация, СтруктураПараметровДляПолученияДоговора) Тогда
						ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;
					Иначе
						ДоговорКонтрагента = мПолучитьДоговорПоОрганизацииИКонтрагенту(ДокументОбъект.Организация, ДокументОбъект.Контрагент, СтруктураПараметровДляПолученияДоговора);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Если ЕстьКонтактноеЛицоКонтрагента Тогда
				Если НЕ ЗначениеЗаполнено(ДокументОбъект.КонтактноеЛицоКонтрагента)
				 ИЛИ ТипЗнч(ДокументОбъект.КонтактноеЛицоКонтрагента) <> Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") Тогда
					КонтактноеЛицоКонтрагента = ДокументОбъект.Контрагент.ОсновноеКонтактноеЛицо;
				Иначе
					Если ДокументОбъект.КонтактноеЛицоКонтрагента.Владелец <> ДокументОбъект.Контрагент Тогда
						КонтактноеЛицоКонтрагента = ДокументОбъект.Контрагент.ОсновноеКонтактноеЛицо;
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 

		КонецЕсли;

		Если ЕстьДоговорКонтрагента Тогда
			ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
			Если гз_ОбщегоНазначения.мЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
			   И ДоговорКонтрагента <> Неопределено 
			   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
				ДокументОбъект.Организация        = ДоговорКонтрагента.Организация;
			КонецЕсли;
		КонецЕсли;

		Если ЕстьКонтактноеЛицоКонтрагента 
			И КонтактноеЛицоКонтрагента <> Неопределено Тогда
			ДокументОбъект.КонтактноеЛицоКонтрагента = КонтактноеЛицоКонтрагента;
		КонецЕсли; 

		Если гз_ОбщегоНазначения.мЕстьРеквизитДокумента("Сделка", МетаданныеДокумента) Тогда
			ДокументОбъект.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре
		КонецЕсли;

		Если гз_ОбщегоНазначения.мЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента)
		   И ЗначениеЗаполнено(ДокументОбъект.ТипЦен)
		   И ДокументОбъект.ТипЦен.Метаданные().Имя = "ТипыЦенНоменклатурыКонтрагентов"
		   И НЕ ДокументОбъект.ТипЦен.Владелец = ДокументОбъект.Контрагент Тогда
			// очистим тип цен
			ДокументОбъект.ТипЦен =  Неопределено;
		КонецЕсли;
		
		Если гз_ОбщегоНазначения.мЕстьРеквизитДокумента("БанковскийСчетКонтрагента", МетаданныеДокумента) Тогда
			ДокументОбъект.БанковскийСчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;
		
	КонецПроцедуры // мПриИзмененииЗначенияКонтрагента()

	// Процедура выполняет общие действия при изменении договора взаиморасчетов
	//
	// Параметры:
	//  ДокументОбъект                 - объект редактируемого документа,
	//  СпособЗаполненияЦен            - значение перечисления "Способы заполнения цен", определяет по какому из регистров 
	//                                  ("Цены номенклатуры" или "Цены номенклатуры контрагентов") будет строиться запрос;
	//  СтараяВалютаВзаиморасчетов     - ссылка на справочник валют, определяет валюту взаиморасчетов 
	//                                   до изменения договора;
	//  ВалютаРегламентированногоУчета - валюта регламентированного учета
	//  СтруктураРеквизитовДокумента   - структура, задает список обрабатываемых реквизитов документа;
	//                                   если реквизит надо обрабатывать, то для него есть ключ в этой структуре
	//  ТипОперации                    - необязаетельный, строка вида операции ("Покупка" или "Продажа");
	//                                   если не передан, то реквизиты, зависящие от вида операции, не заполняются
	//  ИмяТабличнойЧасти	           - имя табличной части
	//  СтарыйДоговорКонтрагента       - старый договор контрагента, который был до изменения
	//  СтруктураЗначений              - структура, в эту переменную возвращаются значения элементов диалога выбора валюты.
	//
	Процедура мПриИзмененииЗначенияДоговора( ДокументОбъект, СтараяВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
									 		СпособЗаполненияЦен, СтруктураРеквизитовДокумента=Неопределено, ТипОперации = "", 
									 		ИмяТабличнойЧасти, СтарыйДоговорКонтрагента = Неопределено,
									 		СтруктураЗначений = Неопределено) Экспорт
        // Хранят договор и тип цен договора
		Перем Договор, ТипЦенВДоговоре; // локальные переменные

		МетаданныеДокумента = ДокументОбъект.Метаданные();
		Договор = ДокументОбъект.ДоговорКонтрагента;
		// отработка не инициализированного значения догов
		Если СтарыйДоговорКонтрагента = Неопределено Тогда
			СтарыйДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		

		Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда

			ДокументОбъект.Контрагент = Договор.Владелец;

		ИначеЕсли ЗначениеЗаполнено(Договор)
				И ДокументОбъект.Контрагент <> Договор.Владелец Тогда //Владелец нового договора должен совпадать с контрагентом документа.
				
				Предупреждение("Выбранный договор принадлежит другому контрагенту. 
							   |Будет восстановлен старый договор.");
				Договор = СтарыйДоговорКонтрагента;

		КонецЕсли;

		//Владелец нового договора должен совпадать с контрагентом документа.
		
		Если гз_ОбщегоНазначения.мЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
			 И НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
			ДокументОбъект.Организация = Договор.Организация;
			Если Не ПустаяСтрока(ДокументОбъект.Номер) Тогда
				ДокументОбъект.Номер = "";
			КонецЕсли;
		КонецЕсли;

	КонецПроцедуры // мПриИзмененииЗначенияДоговора()

#КонецЕсли

// Функция проверяет, можно ли использовать переданный договор в соответствии с переданными параметрами.
//
// Параметры
//  Договор                                 – ссылка на договор, который нужно проверить,
//  Контрагент                              - ссылка на контрагента, которому должен принадлежать договор,
//  Организация                             - ссылка на организацию, от имени которой должен быть выписан договор,
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых способов ведения взаиморасчетов.
//
// Возвращаемое значение:
//   Логическое, Истина - можно использовать, ложь - нельзя.
//
Функция мМожноИспользоватьДоговорДляДокумента(Договор, Контрагент, Организация, СтруктураПараметровДляПолученияДоговора) Экспорт
    // Переменные хранят данные по договорам
	Перем СписокДопустимыхВидовДоговоров, СписокДопустимыхВидовВзаиморасчетов, ВалютаВзаиморасчетовДоговора, ВидСравненияВалютыВзаиморасчетов; // локальные переменные

	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат Ложь; // Если не передали параметры, то считаем, что нельзя использовать.
	КонецЕсли;

	Если СтруктураПараметровДляПолученияДоговора <> Неопределено Тогда
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВалютаВзаиморасчетовДоговора", ВалютаВзаиморасчетовДоговора);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВидСравненияВалютыВзаиморасчетов", ВидСравненияВалютыВзаиморасчетов);
	КонецЕсли;

	// Организация должна совпадать.
	Если ЗначениеЗаполнено(Организация)
	   И Организация <> Договор.Организация Тогда
		Возврат Ложь;
	КонецЕсли;

	// Контрагент должен совпадать, если в документе не выбран контрагент, то любой договор не подходит.
	Если Контрагент <> Договор.Владелец Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверка по виду договора.
	Если СписокДопустимыхВидовДоговоров <> Неопределено 
	   И СписокДопустимыхВидовДоговоров.НайтиПоЗначению(Договор.ВидДоговора) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверка по виду взаиморасчетов.
	Если СписокДопустимыхВидовВзаиморасчетов <> Неопределено 
	   И СписокДопустимыхВидовВзаиморасчетов.НайтиПоЗначению(Договор.ВедениеВзаиморасчетов) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверка по валюте взаиморасчетов.
	Если ВалютаВзаиморасчетовДоговора <> Неопределено
	   И ВидСравненияВалютыВзаиморасчетов <> Неопределено Тогда
		Если ВидСравненияВалютыВзаиморасчетов = "=" Тогда
			Если Договор.ВалютаВзаиморасчетов <> ВалютаВзаиморасчетовДоговора Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе // ВидСравненияВалютыВзаиморасчетов может принимать только два значения: "=" и "<>".
			Если Договор.ВалютаВзаиморасчетов = ВалютаВзаиморасчетовДоговора Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;

КонецФункции // мМожноИспользоватьДоговорДляДокумента()

// Функция определяет договор, соответствующий указанным значениям
// организации и контрагента, а также переданным параметрам.
// Если всем параметрам удовлетворяет основной договор, то выбирается он.
//
// Параметры
//  Организация                             - организация, по которой определяется договор
//  Контрагент                              - контрагент, по которому определяется договор
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых способов ведения взаиморасчетов, не обязательный.
//
// Возвращаемое значение:
//  Договор - договор контрагентов
//
Функция мПолучитьДоговорПоОрганизацииИКонтрагенту(Организация, Контрагент, СтруктураПараметровДляПолученияДоговора = Неопределено) Экспорт
    // Переменные хранят данные по договорам
	Перем СписокДопустимыхВидовДоговоров, СписокДопустимыхВидовВзаиморасчетов, ВалютаВзаиморасчетовДоговора, ВидСравненияВалютыВзаиморасчетов; // локальные переменные

	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Если не передана организация, то проверим, можно ли использовать основной договор. 
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Договор = гз_ОбщегоНазначения.мПолучитьОсновнойДоговорКонтрагента(Контрагент);
		Если мМожноИспользоватьДоговорДляДокумента(Договор, Контрагент, Организация, СтруктураПараметровДляПолученияДоговора) Тогда
			Возврат Договор;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	РезультатЗапроса = мПолучитьДоступныеДоговорыКонтрагента(Контрагент, СтруктураПараметровДляПолученияДоговора, Истина, Организация );
	ТаблицаДоговоров = РезультатЗапроса.Выгрузить();

	Если ТаблицаДоговоров.Количество() = 1 Тогда
		Возврат ТаблицаДоговоров[0].Договор;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // мПолучитьДоговорПоОрганизацииИКонтрагенту()

// Функция получает доступные договоры контрагента
//
Функция мПолучитьДоступныеДоговорыКонтрагента(Контрагент, СтруктураПараметровДляПолученияДоговора, ВозвращатьТолькоПервые, Организация = Неопределено, ДополнительныеРеквизиты = Неопределено) Экспорт
    // Переменные хранят данные по договорам
	Перем СписокДопустимыхВидовДоговоров, СписокДопустимыхВидовВзаиморасчетов, ВалютаВзаиморасчетовДоговора, ВидСравненияВалютыВзаиморасчетов; // локальные переменные

	Если СтруктураПараметровДляПолученияДоговора <> Неопределено Тогда
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВалютаВзаиморасчетовДоговора", ВалютаВзаиморасчетовДоговора);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВидСравненияВалютыВзаиморасчетов", ВидСравненияВалютыВзаиморасчетов);
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ПарКонтрагент",  Контрагент);
	Запрос.УстановитьПараметр("ПарВидДоговора", СписокДопустимыхВидовДоговоров);
	Запрос.УстановитьПараметр("ПарВидВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
	Запрос.УстановитьПараметр("ПарВалютаВзаиморасчетов", ВалютаВзаиморасчетовДоговора);
	Запрос.УстановитьПараметр("ПарОрганизация", Организация);

	ПсевдонимТаблицы = "ДоговорыКонтрагентов"; 
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ"
	+?(ВозвращатьТолькоПервые," ПЕРВЫЕ 2","") + "
	|	ДоговорыКонтрагентов.Ссылка КАК Договор";
	
	Если ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		
		Для Каждого НаименованиеРеквизита Из ДополнительныеРеквизиты Цикл
		
			Запрос.Текст = Запрос.Текст  + ", " + ПсевдонимТаблицы + "." + НаименованиеРеквизита;
		
		КонецЦикла; 		
	
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст  + "
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК " + ПсевдонимТаблицы + "
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)"
	+?(ЗначениеЗаполнено(Организация), "	И ДоговорыКонтрагентов.Организация = &ПарОрганизация", "") + "
	|	И ДоговорыКонтрагентов.Владелец    = &ПарКонтрагент"
	+?(ВалютаВзаиморасчетовДоговора = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов " 
	+?(ВидСравненияВалютыВзаиморасчетов = Неопределено, "=", ВидСравненияВалютыВзаиморасчетов) + "(&ПарВалютаВзаиморасчетов)
	|")
	+?(СписокДопустимыхВидовДоговоров = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВидДоговора В (&ПарВидДоговора)
	|")
	+?(СписокДопустимыхВидовВзаиморасчетов = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВедениеВзаиморасчетов В (&ПарВидВзаиморасчетов)
	|");

	Если ЗначениеЗаполнено(Организация) Тогда 

		Запрос.Текст = Запрос.Текст + "
		|	И (ВЫБОР КОГДА ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.Организация = &ПарОрганизация"
		+?(ВалютаВзаиморасчетовДоговора = Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов " 
		+?(ВидСравненияВалютыВзаиморасчетов = Неопределено, "=", ВидСравненияВалютыВзаиморасчетов) + "&ПарВалютаВзаиморасчетов
		|")
		+?(СписокДопустимыхВидовДоговоров = Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВидДоговора В (&ПарВидДоговора)
		|")
		+?(СписокДопустимыхВидовВзаиморасчетов = Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВедениеВзаиморасчетов В (&ПарВидВзаиморасчетов)
		|")
		+ "
		|	         ТОГДА ДоговорыКонтрагентов.Ссылка  = ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента
		|	         ИНАЧЕ ДоговорыКонтрагентов.Ссылка <> ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента КОНЕЦ)";

	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // мПолучитьДоступныеДоговорыКонтрагента()

// Функция получает список счетов взаиморасчетов
// для которых может быть установлено субконто "ДокументРасчетовСКонтрагентом"
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   СписокЗначений   – список, содержащий исключаемые счета
//
Функция мПолучитьСписокСчетовВзаиморасчетов() Экспорт

	ЗапросКСчетамВзаиморасчетов = Новый Запрос("ВЫБРАТЬ
    |	Типовой.Ссылка КАК Ссылка
    |ИЗ
    |	ПланСчетов.Типовой КАК Типовой
    |ГДЕ
	|	Типовой.ВидыСубконто.ВидСубконто = (&ВидСубконтоКонтрагенты)
	|	И Типовой.ВидыСубконто.ВидСубконто = (&ВидСубконтоДоговоры)");
	
	ЗапросКСчетамВзаиморасчетов.УстановитьПараметр("ВидСубконтоКонтрагенты",ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ЗапросКСчетамВзаиморасчетов.УстановитьПараметр("ВидСубконтоДоговоры",	ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	
	Возврат ЗапросКСчетамВзаиморасчетов.Выполнить().Выгрузить();

КонецФункции // мПолучитьСписокСчетовВзаиморасчетов()
