
Процедура ВыполнитьРассылку(СписокПолучателей,СрокИсполнения,Описание,ТекущийПользователь,Документ,ВидДокумента,Маршрут,Этап,ВидЗадачиСогласования,ВидАдресацииЗадачи,Вложение,ИмяФайла="") Экспорт
	ИмяФайла = "";
	ТабличныйДокумент = Неопределено;
	Расширение = "";
	Если Вложение = Неопределено Тогда
		Вложение = усд_РассылкаОповещенийЧерезПочтовыйКлиент.СформироватьВложение(Документ,ВидДокумента,ИмяФайла,ТабличныйДокумент,Расширение);
	КонецЕсли;
	ЗаголовокПисьма = "Автоматическое оповещение о задаче согласования: "+Описание+"/ исполнить до: "+Строка(СрокИсполнения);
	ТекстПисьма = "Служба автоматического оповещения о задачах согласования документов сообщает:
	|"+Описание+"
	|
	|Срок исполнения: "+Строка(СрокИсполнения)+"
	|Вид документа: "+ВидДокумента+"
	|Маршрут согласования: "+Маршрут+"
	|Этап: "+Этап+"
	|Вид задачи: "+ВидЗадачиСогласования+"
	|Вид адресации задачи: "+ВидАдресацииЗадачи+"
	|Инициатор: "+ТекущийПользователь;
	ТекстПисьмаHTML = "Служба автоматического оповещения о задачах согласования документов сообщает:
	|"+"<BR>"+Описание+";
	|
	|Срок исполнения: "+Строка(СрокИсполнения)+"<BR>"+"
	|Вид документа: "+ВидДокумента+"<BR>"+"
	|Маршрут согласования: "+Маршрут+"<BR>"+"
	|Этап: "+Этап+"<BR>"+"
	|Вид задачи: "+ВидЗадачиСогласования+"<BR>"+"
	|Вид адресации задачи: "+ВидАдресацииЗадачи+"<BR>"+"
	|Инициатор: "+ТекущийПользователь;
	УчетнаяЗаписьДляОтправки = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_УчетнаяЗаписьРассылкиЗадачСогласования");
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьДляОтправки) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ фин_ОбщегоНазначенияСервер.ИспользоватьКлиентБСП() Тогда
		ЭлектронныеПисьма = Новый Соответствие;
		Для Каждого Получатель Из СписокПолучателей Цикл
			ТекстКОтправке = "Уважаемый(-ая), "+фин_ОбщегоНазначенияСервер.ФамилияИнициалыФизЛица(Получатель)+"!
			|"+"<BR>"+ТекстПисьма;
			Адрес = ПолучитьЭлектронныйАдресПолучателя(Получатель);
			Если Адрес = "" И ЗначениеЗаполнено(Получатель.ФизЛицо) Тогда
				Адрес = ПолучитьЭлектронныйАдресПолучателя(Получатель.ФизЛицо);
			КонецЕсли;
			Если Адрес = "" Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось отправить почтовое оповещение пользователю "+Получатель+" по причине: не указан адрес электронной почты пользователя!",Документ);
				Продолжить;
			КонецЕсли;
			СформироватьПисьмо(ЭлектронныеПисьма,УчетнаяЗаписьДляОтправки,Адрес,фин_ОбщегоНазначенияСервер.ФамилияИнициалыФизЛица(Получатель),ЗаголовокПисьма,ТекстКОтправке,Вложение,ИмяФайла);
		КонецЦикла;
		усд_РассылкаОповещенийЧерезПочтовыйКлиент.ОтправитьПисьма(УчетнаяЗаписьДляОтправки,ЭлектронныеПисьма, Новый Соответствие, фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"),,,Истина);
	
	Иначе
		// клиент БСП
		ПараметрыПисьма = Новый Структура;
		
		МассивПолучатель = Новый Массив;
		Для Каждого Получатель Из СписокПолучателей Цикл
			Адрес = ПолучитьЭлектронныйАдресПолучателя(Получатель);
			Если Адрес = "" И ЗначениеЗаполнено(Получатель.ФизЛицо) Тогда
				Адрес = ПолучитьЭлектронныйАдресПолучателя(Получатель.ФизЛицо);
			КонецЕсли;
			Если Адрес = "" Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось отправить почтовое оповещение пользователю "+Получатель+" по причине: не указан адрес электронной почты пользователя!",Документ);
				Продолжить;
			КонецЕсли;
			МассивПолучатель.Добавить(Новый Структура("Контакт, Адрес, Представление", Получатель, Адрес, фин_ОбщегоНазначенияСервер.ФамилияИнициалыФизЛица(Получатель)));
		КонецЦикла;
	    ПараметрыПисьма.Вставить("Получатели",МассивПолучатель);
	    ПараметрыПисьма.Вставить("Тема",ЗаголовокПисьма);
	    ПараметрыПисьма.Вставить("Текст",ТекстПисьма);
	    ПараметрыПисьма.Вставить("ТекстHTML",ТекстПисьмаHTML);
	    ПараметрыПисьма.Вставить("Расширение",Расширение);
		усд_РассылкаОповещенийЧерезПочтовыйКлиент.ОтправкаОповещенияПоЭлПочте(УчетнаяЗаписьДляОтправки,ПараметрыПисьма,ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПисьмо(ЭлектронныеПисьма,УчетнаяЗаписьДляОтправки,Адрес,Получатель,ЗаголовокПисьма,ТекстПисьма,Вложение,ИмяФайла)
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьДляОтправки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не задана учетная запись для отправки писем");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("УчетнаяЗапись", УчетнаяЗаписьДляОтправки);
	СтруктураПараметров.Вставить("Тема", ЗаголовокПисьма);
	СтруктураПараметров.Вставить("Тело", ТекстПисьма);
	
	СписокКому = Новый СписокЗначений;
	СписокКому.Добавить(Адрес, Получатель);
	СтруктураПараметров.Вставить("Кому", СписокКому);
	
	СписокФайловВложений = Новый СписокЗначений;
	
	Если Вложение<>Неопределено Тогда
		СтруктураВложения = Новый Структура("ВидДанных, ИмяФайла, Наименование, Хранилище", Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл,
		ИмяФайла, ИмяФайла, Новый ХранилищеЗначения(Вложение));
		СписокФайловВложений.Добавить(СтруктураВложения);
	КонецЕсли;
	СтруктураПараметров.Вставить("СписокФайловВложений", СписокФайловВложений);
	
	НачатьТранзакцию();
	
	СтруктураПисьма = усд_РассылкаОповещенийЧерезПочтовыйКлиент.НаписатьПисьмоСУчетнойЗаписи(УчетнаяЗаписьДляОтправки,фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"), СтруктураПараметров,Истина);
	
	Если ТипЗнч(СтруктураПисьма) <> Тип("Структура") Тогда
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Письмо получателю " + Получатель+ " не отправлено.");
		Если ТипЗнч(СтруктураПисьма) = Тип("Строка") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураПисьма);
		КонецЕсли; 
		Возврат;
	Иначе
		ЗафиксироватьТранзакцию();
		ЭлектронныеПисьма.Вставить(СтруктураПисьма.ПисьмоСсылка);
	КонецЕсли; 
		
КонецПроцедуры

Функция ПолучитьЭлектронныйАдресПолучателя(Объект)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Пользователи") Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫРАЗИТЬ(КонтактнаяИнформация.АдресЭлектроннойПочты КАК СТРОКА(1000)) КАК Представление
	               |ИЗ
	               |	РегистрСведений.усд_НастройкаПочтовойРассылкиУведомленийПользователямОЗадачахСогласования КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Пользователь = &Объект
	               |	И КонтактнаяИнформация.АдресЭлектроннойПочты <>""""";
	КонецЕсли;
	Если Объект.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация")<>Неопределено Тогда
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.Текст = Запрос.Текст+?(Запрос.Текст="","","
				|	ОБЪЕДИНИТЬ ВСЕ
				|")+"ВЫБРАТЬ "+?(Запрос.Текст="","РАЗРЕШЕННЫЕ","")+"
	               |	ВЫРАЗИТЬ(КонтактнаяИнформация.АдресЭП КАК СТРОКА(1000)) КАК Представление
	               |ИЗ
	               |	Справочник."+Объект.Метаданные().Имя+".КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Объект
	               |	И КонтактнаяИнформация.Тип = &Тип";
	ИначеЕсли Метаданные.РегистрыСведений.Найти("КонтактнаяИнформация")<>Неопределено Тогда
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.Текст = Запрос.Текст+?(Запрос.Текст="","","
				|	ОБЪЕДИНИТЬ ВСЕ
				|")+"ВЫБРАТЬ "+?(Запрос.Текст="","РАЗРЕШЕННЫЕ","")+"
	               |	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)) КАК Представление
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Объект
	               |	И КонтактнаяИнформация.Тип = &Тип";
	КонецЕсли;
	Если Запрос.Текст = "" Тогда
		Возврат "";
	КонецЕсли;
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		Возврат ТаблицаЗапроса[0].Представление;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ИмеютсяБюджетыПоЗаявке(Заявка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БюджетЗаявкиНаФормирование.Ссылка
	|ИЗ
	|	Документ.фин_Бюджет.ЗаявкиНаФормирование КАК БюджетЗаявкиНаФормирование
	|ГДЕ
	|	БюджетЗаявкиНаФормирование.Заявка = &Ссылка
	|	И (НЕ БюджетЗаявкиНаФормирование.Ссылка.ПометкаУдаления)";
	Запрос.УстановитьПараметр("Ссылка",Заявка);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	ТекстБюджеты = "";
	Пока РезультатЗапроса.Следующий() Цикл
		ТекстБюджеты = ТекстБюджеты+"
		|	- "+Строка(РезультатЗапроса.Ссылка);
	КонецЦикла;
	Возврат ТекстБюджеты;
КонецФункции

Функция ИмеютсяДанныеПоРазрезу(Измерение,ИмяРазреза,Поле,ОписаниеТипов) Экспорт
	ПустыеЗначения = Новый СписокЗначений;
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		ПустыеЗначения.Добавить(Тип);
	КонецЦикла;
	ПустыеЗначения.Добавить(Неопределено);
	ПустыеЗначения.Добавить(Null);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Измерение",Измерение);
	Запрос.УстановитьПараметр("ПустыеЗначения",ПустыеЗначения);
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФинансовыеПоказателиРазрезыУчета.Ссылка КАК ФинансовыйПоказатель
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	Справочник.фин_ФинансовыеПоказатели.РазрезыУчета КАК ФинансовыеПоказателиРазрезыУчета
	|ГДЕ
	|	ФинансовыеПоказателиРазрезыУчета.Измерение = &Измерение";
	Запрос.Выполнить();
	МассивРегистров = фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрыФактическихДанных();
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВложенныйЗапрос.Регистратор
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1
		|		ОборотыБюджетов.Регистратор КАК Регистратор
		|	ИЗ
		|		РегистрНакопления.фин_ОборотыБюджетов КАК ОборотыБюджетов
		|	ГДЕ
		|		ОборотыБюджетов.ФинансовыйПоказатель В (ВЫБРАТЬ ВТ_Показатели.ФинансовыйПоказатель ИЗ ВТ_Показатели)
		|		И (НЕ ОборотыБюджетов."+Поле+".Ссылка.Ссылка ЕСТЬ NULL )
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|";
		
		Для Каждого ИмяРегистра Из МассивРегистров Цикл
			Если ИмяРегистра = "фин_ОборотыБюджетов" Тогда
				Продолжить;
			КонецЕсли;
			Запрос.Текст = Запрос.Текст+"
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|		ОборотыБюджетов.Регистратор КАК Регистратор
				|	ИЗ
				|		РегистрНакопления."+ИмяРегистра+" КАК ОборотыБюджетов
				|	ГДЕ
				|		ОборотыБюджетов.ФинансовыйПоказатель В (ВЫБРАТЬ ВТ_Показатели.ФинансовыйПоказатель ИЗ ВТ_Показатели)
				|		И (НЕ ОборотыБюджетов."+Поле+".Ссылка.Ссылка ЕСТЬ NULL )
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|";
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст+"
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		БюджетОборотыПоСтатьям.Ссылка
	|	ИЗ
	|		Документ.фин_Бюджет.ОборотыПоСтатьям КАК БюджетОборотыПоСтатьям
	|	ГДЕ
	|		БюджетОборотыПоСтатьям.ФинансовыйПоказатель В (ВЫБРАТЬ ВТ_Показатели.ФинансовыйПоказатель ИЗ ВТ_Показатели)
	|		И (НЕ БюджетОборотыПоСтатьям."+ИмяРазреза+" НЕ В (&ПустыеЗначения) )
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗависимостиФинансовыхПоказателей.Регистратор
	|ИЗ
	|	РегистрСведений.фин_ЗависимостиФинансовыхПоказателей КАК ЗависимостиФинансовыхПоказателей
	|ГДЕ
	|	ЗависимостиФинансовыхПоказателей.ИсхФинансовыйПоказатель В (ВЫБРАТЬ ВТ_Показатели.ФинансовыйПоказатель ИЗ ВТ_Показатели)
	|	И ЗависимостиФинансовыхПоказателей.ИсходныйНаборРазрезов.Отбор"+ИмяРазреза+" = ИСТИНА) КАК ВложенныйЗапрос";
	
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
КонецФункции

Процедура ЗаполнитьСписокЗапрещенныхКРедактированиюРазрезов(СписокЗапрещенныхКРедактированиюРазрезов,ФинансовыйПоказатель) Экспорт
	Запрос = Новый Запрос;
	
	МассивРегистров = фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрыФактическихДанных();
	
	Для Каждого СтрокаРазрез Из ФинансовыйПоказатель.РазрезыУчета Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаРазрез.Измерение) Тогда
			Продолжить;
		КонецЕсли;
		Номер = Строка(СтрокаРазрез.НомерСтроки);
		ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(СтрокаРазрез.Измерение);
		Поле = ?(Найти(ИмяРазреза,"Разрез")=0,ИмяРазреза,"ДополнительныеРазрезы."+ИмяРазреза);
		Запрос.УстановитьПараметр("Разрез"+Номер,СтрокаРазрез.Измерение);
		Запрос.Текст = Запрос.Текст+?(Запрос.Текст="","","
		|ОБЪЕДИНИТЬ ВСЕ 
		|")+
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВложенныйЗапрос.Регистратор,
		|	&Разрез"+Номер+" КАК Разрез
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1
		|		ОборотыБюджетов.Регистратор КАК Регистратор
		|	ИЗ
		|		РегистрНакопления.фин_ОборотыБюджетов КАК ОборотыБюджетов
		|	ГДЕ
		|		ОборотыБюджетов.ФинансовыйПоказатель = &ФинансовыйПоказатель
		|		И (НЕ ОборотыБюджетов."+Поле+".Ссылка.Ссылка ЕСТЬ NULL )
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|";
		
		Для Каждого ИмяРегистра Из МассивРегистров Цикл
			Если ИмяРегистра = "фин_ОборотыБюджетов" Тогда
				Продолжить;
			КонецЕсли;
			Запрос.Текст = Запрос.Текст+"
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|		ОборотыБюджетов.Регистратор КАК Регистратор
			|	ИЗ
			|		РегистрНакопления."+ИмяРегистра+" КАК ОборотыБюджетов
			|	ГДЕ
			|		ОборотыБюджетов.ФинансовыйПоказатель = &ФинансовыйПоказатель
			|		И (НЕ ОборотыБюджетов."+Поле+".Ссылка.Ссылка ЕСТЬ NULL )
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст+"
		|	ВЫБРАТЬ ПЕРВЫЕ 1
		|		БюджетОборотыПоСтатьям.Ссылка
		|	ИЗ
		|		Документ.фин_Бюджет.ОборотыПоСтатьям КАК БюджетОборотыПоСтатьям
		|	ГДЕ
		|		БюджетОборотыПоСтатьям.ФинансовыйПоказатель = &ФинансовыйПоказатель
		|		И (НЕ БюджетОборотыПоСтатьям."+ИмяРазреза+".Ссылка.Ссылка ЕСТЬ NULL )
		|		И БюджетОборотыПоСтатьям.Ссылка.Проведен
		|	ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗависимостиФинансовыхПоказателей.Регистратор
		|ИЗ
		|	РегистрСведений.фин_ЗависимостиФинансовыхПоказателей КАК ЗависимостиФинансовыхПоказателей
		|ГДЕ
		|	ЗависимостиФинансовыхПоказателей.ИсхФинансовыйПоказатель = &ФинансовыйПоказатель
		|	И ЗависимостиФинансовыхПоказателей.ИсходныйНаборРазрезов.Отбор"+ИмяРазреза+" = ИСТИНА) КАК ВложенныйЗапрос";
	КонецЦикла;
	Если НЕ ЗначениеЗаполнено(Запрос.Текст) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ФинансовыйПоказатель", ФинансовыйПоказатель);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокЗапрещенныхКРедактированиюРазрезов.Добавить(ВыборкаДетальныеЗаписи.Разрез);
	КонецЦикла;
КонецПроцедуры

Функция ИмеютсяДокументыНаМаршруте(Маршрут) Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
    |    НазначенияМаршрутов.Документ
    |ИЗ
    |    РегистрСведений.усд_НазначенияМаршрутов КАК НазначенияМаршрутов
    |ГДЕ
    |    НазначенияМаршрутов.Маршрут = &Маршрут";
    ВидДокументов = Маршрут.Владелец;
    Если ЗначениеЗаполнено(ВидДокументов) Тогда
        ИД = ВидДокументов.ПрограммныйИдентификатор;
        Если ЗначениеЗаполнено(ИД) И Метаданные.Документы.Найти(ИД)<>Неопределено Тогда
            Запрос.Текст = "ВЫБРАТЬ
            |    НазначенияМаршрутов.Документ
            |ИЗ
            |    РегистрСведений.усд_НазначенияМаршрутов КАК НазначенияМаршрутов
            |    ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ."+ИД+" КАК СписокДокументов
            |        ПО НазначенияМаршрутов.Документ = СписокДокументов.Ссылка
            |ГДЕ
            |    НазначенияМаршрутов.Маршрут = &Маршрут
            |    И НЕ СписокДокументов.ПометкаУдаления";
        КонецЕсли;
    КонецЕсли;
    Запрос.УстановитьПараметр("Маршрут",Маршрут);
    РезультатЗапроса = Запрос.Выполнить();
    Возврат НЕ РезультатЗапроса.Пустой();
КонецФункции

Процедура ЗагрузитьТабличнуюЧастьВТаблицуЗначений(ТаблицаЗначений,ИмяТабличнойЧасти,Ссылка=Неопределено) Экспорт
	ТаблицаЗначений.Очистить();
	Если ТипЗнч(ИмяТабличнойЧасти)<>Тип("Строка") Тогда
		Для Каждого СтрокаИсходная Из ИмяТабличнойЧасти Цикл
			НС = ТаблицаЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(НС,СтрокаИсходная);
		КонецЦикла;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ ТЧ.* ИЗ Документ."+Ссылка.Метаданные().Имя+"."+ИмяТабличнойЧасти+" КАК ТЧ ГДЕ ТЧ.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НС = ТаблицаЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(НС,Выборка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция РазрешеноПолучениеОтчета(Бюджет,Сценарий,Отбор) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоставПрофилейДоступа.Профиль,
		|	ПрофилиДоступа.ВариантОграничения
		|ПОМЕСТИТЬ ВТ_Профили
		|ИЗ
		|	РегистрСведений.общ_СоставПрофилейДоступа КАК СоставПрофилейДоступа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.общ_ПрофилиДоступа КАК ПрофилиДоступа
		|		ПО СоставПрофилейДоступа.Профиль = ПрофилиДоступа.Ссылка
		|			И (ПрофилиДоступа.ВидПрофиляДоступа = ЗНАЧЕНИЕ(Перечисление.общ_ВидыПрофилейДоступа.Бюджеты))
		|			И (СоставПрофилейДоступа.Пользователь = &ТекущийПользователь)
		|			И (НЕ ПрофилиДоступа.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Профили.ВариантОграничения КАК ВариантОграничения,
		|	общ_ОбъектыДоступаПоПрофилям.ОбъектДоступа
		|ИЗ
		|	ВТ_Профили КАК ВТ_Профили
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.общ_ОбъектыДоступаПоПрофилям КАК общ_ОбъектыДоступаПоПрофилям
		|		ПО ВТ_Профили.Профиль = общ_ОбъектыДоступаПоПрофилям.Профиль
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВариантОграничения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Профили.ВариантОграничения
		|ИЗ
		|	ВТ_Профили КАК ВТ_Профили";

	Запрос.УстановитьПараметр("ТекущийПользователь", фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("глТекущийПользователь"));

	Результат = Запрос.ВыполнитьПакет();
    ТаблицаОбъектов = Результат[1].Выгрузить();
	СписокВариантовОграничения = Результат[2].Выгрузить().ВыгрузитьКолонку("ВариантОграничения");
	
	Для Каждого ВариантОграничения Из СписокВариантовОграничения Цикл
		Если ВариантОграничения = Перечисления.фин_ВариантыОграниченияДоступаКДаннымБюджетов.ПоВидамБюджетов Тогда
			 МассивБюджетов = ПолучитьМассивБюджетов(Бюджет);
			 Для Каждого мБюджет Из МассивБюджетов Цикл
				 Если ТаблицаОбъектов.НайтиСтроки(Новый Структура("ВариантОграничения,ОбъектДоступа",Перечисления.фин_ВариантыОграниченияДоступаКДаннымБюджетов.ПоВидамБюджетов,мБюджет)).Количество()<>0 Тогда
					 Возврат Истина;
				 КонецЕсли;
			 КонецЦикла;
		 ИначеЕсли ВариантОграничения = Перечисления.фин_ВариантыОграниченияДоступаКДаннымБюджетов.ПоСценариям Тогда
			 МассивСценариев = ПолучитьМассивСценариев(Сценарий);
			 ВсеСценарииРазрешены = Истина;
			 Для Каждого мСценарий Из МассивСценариев Цикл
				 Если ТаблицаОбъектов.НайтиСтроки(Новый Структура("ВариантОграничения,ОбъектДоступа",Перечисления.фин_ВариантыОграниченияДоступаКДаннымБюджетов.ПоСценариям,мСценарий)).Количество()=0 Тогда
					 ВсеСценарииРазрешены = Ложь;
				 КонецЕсли;
			 КонецЦикла;
			 Если ВсеСценарииРазрешены Тогда
				 Возврат Истина;
			 КонецЕсли;
		 ИначеЕсли ВариантОграничения = Перечисления.фин_ВариантыОграниченияДоступаКДаннымБюджетов.ПоПодразделениям Тогда
			 СтрокиОтбор = Отбор.НайтиСтроки(Новый Структура("Использование,ПолеОтбора",Истина,Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение));
			 Если СтрокиОтбор.Количество()=0 Тогда
				 Продолжить;
			 КонецЕсли;
			 МассивПодразделений = ПолучитьМассивПодразделенийИзОтбора(СтрокиОтбор);
			 ВсеПодразделенияРазрешены = Истина;
			 Для Каждого мПодразделение Из МассивПодразделений Цикл
				 Если ТаблицаОбъектов.НайтиСтроки(Новый Структура("ВариантОграничения,ОбъектДоступа",Перечисления.фин_ВариантыОграниченияДоступаКДаннымБюджетов.ПоПодразделениям,мПодразделение)).Количество()=0 Тогда
					 ВсеПодразделенияРазрешены = Ложь;
				 КонецЕсли;
			 КонецЦикла;
			 Если ВсеПодразделенияРазрешены Тогда
				 Возврат Истина;
			 КонецЕсли;
		 ИначеЕсли ВариантОграничения = Перечисления.фин_ВариантыОграниченияДоступаКДаннымБюджетов.ПоВидамБюджетовИПоПодразделениям Тогда
			 СтрокиОтбор = Отбор.НайтиСтроки(Новый Структура("Использование,ПолеОтбора",Истина,Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение));
			 Если СтрокиОтбор.Количество()=0 Тогда
				 Продолжить;
			 КонецЕсли;
			 МассивПодразделений = ПолучитьМассивПодразделенийИзОтбора(СтрокиОтбор);
			 ВсеПодразделенияРазрешены = Истина;
			 Для Каждого мПодразделение Из МассивПодразделений Цикл
				 Если ТаблицаОбъектов.НайтиСтроки(Новый Структура("ВариантОграничения,ОбъектДоступа",Перечисления.фин_ВариантыОграниченияДоступаКДаннымБюджетов.ПоВидамБюджетовИПоПодразделениям,мПодразделение)).Количество()=0 Тогда
					 ВсеПодразделенияРазрешены = Ложь;
				 КонецЕсли;
			 КонецЦикла;
			 ВсеБюджетыРазрешены = Истина;
			 МассивБюджетов = ПолучитьМассивБюджетов(Бюджет);
			 Для Каждого мБюджет Из МассивБюджетов Цикл
				 Если ТаблицаОбъектов.НайтиСтроки(Новый Структура("ВариантОграничения,ОбъектДоступа",Перечисления.фин_ВариантыОграниченияДоступаКДаннымБюджетов.ПоВидамБюджетовИПоПодразделениям,мБюджет)).Количество()=0 Тогда
					 ВсеБюджетыРазрешены = Ложь;
				 КонецЕсли;
			 КонецЦикла;
			 Если ВсеПодразделенияРазрешены И ВсеБюджетыРазрешены Тогда
				 Возврат Истина;
			 КонецЕсли;
		 ИначеЕсли ВариантОграничения = Перечисления.фин_ВариантыОграниченияДоступаКДаннымБюджетов.ПоПроектам Тогда
			 СтрокиОтбор = Отбор.НайтиСтроки(Новый Структура("Использование,ПолеОтбора",Истина,Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект));
			 Если СтрокиОтбор.Количество()=0 Тогда
				 Продолжить;
			 КонецЕсли;
			 МассивПроектов = ПолучитьМассивПроектовИзОтбора(СтрокиОтбор);
			 ВсеПроектыРазрешены = Истина;
			 Для Каждого мПроект Из МассивПроектов Цикл
				 Если ТаблицаОбъектов.НайтиСтроки(Новый Структура("ВариантОграничения,ОбъектДоступа",Перечисления.фин_ВариантыОграниченияДоступаКДаннымБюджетов.ПоПроектам,мПроект)).Количество()=0 Тогда
					 ВсеПроектыРазрешены = Ложь;
				 КонецЕсли;
			 КонецЦикла;
			 Если ВсеПроектыРазрешены Тогда
				 Возврат Истина;
			 КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ПолучитьМассивПроектовИзОтбора(СтрокиОтбора)
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	Проекты.Ссылка
	             |ИЗ
	             |	Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПроектов()+" КАК Проекты
	             |ГДЕ
	             |	ИСТИНА";
	Инд = 1;
	Для Каждого СтрокаОтбор Из СтрокиОтбора Цикл
		Если СтрокаОтбор.ВидСравнения=Перечисления.усд_ВидыСравненияДляУсловий.Равно Тогда
			Запрос.Текст=Запрос.Текст+"
			|	И Проекты.Ссылка = &Параметр"+Строка(Инд);
			Запрос.УстановитьПараметр("Параметр"+Строка(Инд),СтрокаОтбор.Значение);
		ИначеЕсли СтрокаОтбор.ВидСравнения=Перечисления.усд_ВидыСравненияДляУсловий.ВСписке Тогда
			Запрос.Текст=Запрос.Текст+"
			|	И Проекты.Ссылка В (&Параметр"+Строка(Инд)+")";
			Запрос.УстановитьПараметр("Параметр"+Строка(Инд),СтрокаОтбор.Значение);
		ИначеЕсли СтрокаОтбор.ВидСравнения=Перечисления.усд_ВидыСравненияДляУсловий.ВСпискеПоИерархии Тогда
			Запрос.Текст=Запрос.Текст+"
			|	И Проекты.Ссылка В ИЕРАРХИИ (&Параметр"+Строка(Инд)+")";
			Запрос.УстановитьПараметр("Параметр"+Строка(Инд),СтрокаОтбор.Значение);
		ИначеЕсли СтрокаОтбор.ВидСравнения=Перечисления.усд_ВидыСравненияДляУсловий.НеРавно Тогда
			Запрос.Текст=Запрос.Текст+"
			|	И Проекты.Ссылка <> &Параметр"+Строка(Инд);
			Запрос.УстановитьПараметр("Параметр"+Строка(Инд),СтрокаОтбор.Значение);
		ИначеЕсли СтрокаОтбор.ВидСравнения=Перечисления.усд_ВидыСравненияДляУсловий.НеВСписке Тогда
			Запрос.Текст=Запрос.Текст+"
			|	И (НЕ Проекты.Ссылка В (&Параметр"+Строка(Инд)+"))";
			Запрос.УстановитьПараметр("Параметр"+Строка(Инд),СтрокаОтбор.Значение);
		ИначеЕсли СтрокаОтбор.ВидСравнения=Перечисления.усд_ВидыСравненияДляУсловий.НеВСпискеПоИерархии Тогда
			Запрос.Текст=Запрос.Текст+"
			|	И ( НЕ Проекты.Ссылка В ИЕРАРХИИ (&Параметр"+Строка(Инд)+"))";
			Запрос.УстановитьПараметр("Параметр"+Строка(Инд),СтрокаОтбор.Значение);
		КонецЕсли;
		Инд = Инд + 1;
	КонецЦикла;
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

Функция ПолучитьМассивПодразделенийИзОтбора(СтрокиОтбора)
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	Подразделения.Ссылка
	             |ИЗ
	             |	Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений()+" КАК Подразделения
	             |ГДЕ
	             |	ИСТИНА";
	Инд = 1;
	Для Каждого СтрокаОтбор Из СтрокиОтбора Цикл
		Если СтрокаОтбор.ВидСравнения=Перечисления.усд_ВидыСравненияДляУсловий.Равно Тогда
			Запрос.Текст=Запрос.Текст+"
			|	И Подразделения.Ссылка = &Параметр"+Строка(Инд);
			Запрос.УстановитьПараметр("Параметр"+Строка(Инд),СтрокаОтбор.Значение);
		ИначеЕсли СтрокаОтбор.ВидСравнения=Перечисления.усд_ВидыСравненияДляУсловий.ВСписке Тогда
			Запрос.Текст=Запрос.Текст+"
			|	И Подразделения.Ссылка В (&Параметр"+Строка(Инд)+")";
			Запрос.УстановитьПараметр("Параметр"+Строка(Инд),СтрокаОтбор.Значение);
		ИначеЕсли СтрокаОтбор.ВидСравнения=Перечисления.усд_ВидыСравненияДляУсловий.ВСпискеПоИерархии Тогда
			Запрос.Текст=Запрос.Текст+"
			|	И Подразделения.Ссылка В ИЕРАРХИИ (&Параметр"+Строка(Инд)+")";
			Запрос.УстановитьПараметр("Параметр"+Строка(Инд),СтрокаОтбор.Значение);
		ИначеЕсли СтрокаОтбор.ВидСравнения=Перечисления.усд_ВидыСравненияДляУсловий.НеРавно Тогда
			Запрос.Текст=Запрос.Текст+"
			|	И Подразделения.Ссылка <> &Параметр"+Строка(Инд);
			Запрос.УстановитьПараметр("Параметр"+Строка(Инд),СтрокаОтбор.Значение);
		ИначеЕсли СтрокаОтбор.ВидСравнения=Перечисления.усд_ВидыСравненияДляУсловий.НеВСписке Тогда
			Запрос.Текст=Запрос.Текст+"
			|	И (НЕ Подразделения.Ссылка В (&Параметр"+Строка(Инд)+"))";
			Запрос.УстановитьПараметр("Параметр"+Строка(Инд),СтрокаОтбор.Значение);
		ИначеЕсли СтрокаОтбор.ВидСравнения=Перечисления.усд_ВидыСравненияДляУсловий.НеВСпискеПоИерархии Тогда
			Запрос.Текст=Запрос.Текст+"
			|	И ( НЕ Подразделения.Ссылка В ИЕРАРХИИ (&Параметр"+Строка(Инд)+"))";
			Запрос.УстановитьПараметр("Параметр"+Строка(Инд),СтрокаОтбор.Значение);
		КонецЕсли;
		Инд = Инд + 1;
	КонецЦикла;
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

Функция ПолучитьМассивСценариев(Сценарий)
	Если ТипЗнч(Сценарий)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования() Тогда
		Массив = Новый Массив;
		Массив.Добавить(Сценарий);
		Возврат Массив;
    КонецЕсли;
	Возврат Сценарий;
КонецФункции

Функция ПолучитьМассивБюджетов(Бюджеты)
	Если ТипЗнч(Бюджеты)=Тип("СправочникСсылка.фин_Бюджеты") Тогда
		Массив = Новый Массив;
		Массив.Добавить(Бюджеты);
		Возврат Массив;
	ИначеЕсли ТипЗнч(Бюджеты)=Тип("СправочникСсылка.фин_ФинансовыеПоказатели") Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_СтатьиБюджета.Владелец
			|ИЗ
			|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
			|ГДЕ
			|	фин_СтатьиБюджета.ФинансовыйПоказатель = &ФинансовыйПоказатель
			|	И НЕ фин_СтатьиБюджета.ПометкаУдаления";

		Запрос.УстановитьПараметр("ФинансовыйПоказатель", Бюджеты);

		Результат = Запрос.Выполнить();
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Владелец");
    КонецЕсли;
	Возврат Бюджеты;
КонецФункции

Функция ДокументРегистрацииФактическихДанных(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ОперацияБюджетирования.Ссылка
		|ИЗ
		|	Документ.фин_ОперацияБюджетирования КАК фин_ОперацияБюджетирования
		|ГДЕ
		|	фин_ОперацияБюджетирования.ДокументОснование = &ДокументОснование
		|	И НЕ фин_ОперацияБюджетирования.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	НовыйДокумент = Документы.фин_ОперацияБюджетирования.СоздатьДокумент();
	НовыйДокумент.Дата = ДокументСсылка.Дата;
	Если ДокументСсылка.Метаданные().Реквизиты.Найти("Организация")<>Неопределено Тогда
		НовыйДокумент.Организация = ДокументСсылка.Организация;
	КонецЕсли;
	НовыйДокумент.ДокументОснование = ДокументСсылка;
	НовыйДокумент.Комментарий = "автоматическая регистрация фактических данных";
	НовыйДокумент.УстановитьНовыйНомер();
	Попытка
		НовыйДокумент.Записать();
		Возврат НовыйДокумент.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось создать операцию ручной регистрации фактических данных бюджетирования для документа "+Строка(ДокументСсылка)+"
		|	:"+ОписаниеОшибки());
		Возврат ДокументСсылка;
	КонецПопытки;

КонецФункции