// Функция возвращает счета учета по выбранному ОС
// Параметры:
//  Организация - по которой выполняется поиск
//  ОС      	- по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета 
// 
Функция ПолучитьСчетаУчетаОС(Организация, ОС, ДатаСведений) Экспорт

	Результат = Новый Структура("СчетУчетаБУ, СчетНачисленияАмортизацииБУ, СчетУчетаНДСПоПриобретению, 
								 |СчетУчетаНДСПоРеализации,СчетУчетаНДСУплаченногоНаТаможне,
								 |СчетДоходовОтРеализацииБУ, СчетСебестоимостиПриРеализацииБУ, СчетУчетаЗатратПоМодернизацииБУ,
								 |СчетУчетаНУ,СчетНачисленияАмортизацииНУ,СчетДоходовОтРеализацииНУ,
								 |СчетСебестоимостиПриРеализацииНУ, СчетПоложительныхОтклонений, СчетОтрицательныхОтклонений");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр ("ДатаСведений", ДатаСведений);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ОС",            ОС);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СчетаУчетаОССрезПоследних.СчетУчетаБУ,
	               |	СчетаУчетаОССрезПоследних.СчетНачисленияАмортизацииБУ,
				   |    СчетаУчетаОССрезПоследних.СчетУчетаЗатратПоМодернизацииБУ,
	               |	СчетаУчетаОССрезПоследних.СчетУчетаНДСПоПриобретению,
	               |	СчетаУчетаОССрезПоследних.СчетУчетаНДСПоРеализации,
	               |	СчетаУчетаОССрезПоследних.СчетУчетаНДСУплаченногоНаТаможне,
	               |	СчетаУчетаОССрезПоследних.СчетДоходовОтРеализацииБУ,
	               |	СчетаУчетаОССрезПоследних.СчетСебестоимостиПриРеализацииБУ,
				   |	СчетаУчетаОССрезПоследних.СчетУчетаНУ,
				   |	СчетаУчетаОССрезПоследних.СчетНачисленияАмортизацииНУ,
				   |	СчетаУчетаОССрезПоследних.СчетДоходовОтРеализацииНУ,
	               |	СчетаУчетаОССрезПоследних.СчетСебестоимостиПриРеализацииНУ,
	               |	СчетаУчетаОССрезПоследних.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ,
	               |	СчетаУчетаОССрезПоследних.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ
	               |ИЗ
	               |	РегистрСведений.СчетаУчетаОС.СрезПоследних(
	               |		&ДатаСведений,
	               |		Организация = &Организация
	               |		    И ОсновноеСредство = &ОС) КАК СчетаУчетаОССрезПоследних";
	 
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
  		Результат.СчетУчетаБУ						= Выборка.СчетУчетаБУ;
		Результат.СчетНачисленияАмортизацииБУ		= Выборка.СчетНачисленияАмортизацииБУ;
		Результат.СчетУчетаЗатратПоМодернизацииБУ	= Выборка.СчетУчетаЗатратПоМодернизацииБУ;
		Результат.СчетУчетаНДСПоПриобретению		= Выборка.СчетУчетаНДСПоПриобретению;
		Результат.СчетУчетаНДСПоРеализации			= Выборка.СчетУчетаНДСПоРеализации;
		Результат.СчетУчетаНДСУплаченногоНаТаможне	= Выборка.СчетУчетаНДСУплаченногоНаТаможне;
		Результат.СчетДоходовОтРеализацииБУ			= Выборка.СчетДоходовОтРеализацииБУ;
		Результат.СчетСебестоимостиПриРеализацииБУ	= Выборка.СчетСебестоимостиПриРеализацииБУ;
		
		Результат.СчетУчетаНУ						= Выборка.СчетУчетаНУ;
		Результат.СчетНачисленияАмортизацииНУ		= Выборка.СчетНачисленияАмортизацииНУ;
		Результат.СчетДоходовОтРеализацииНУ			= Выборка.СчетДоходовОтРеализацииНУ;
		Результат.СчетСебестоимостиПриРеализацииНУ	= Выборка.СчетСебестоимостиПриРеализацииНУ;
		
		Результат.СчетПоложительныхОтклонений		= Выборка.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ;
		Результат.СчетОтрицательныхОтклонений		= Выборка.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ;
	Иначе
		ПустойСчет = ПланыСчетов.Типовой.ПустаяСсылка();
		Результат.СчетУчетаБУ						= ПустойСчет;
		Результат.СчетНачисленияАмортизацииБУ		= ПустойСчет;
		Результат.СчетУчетаЗатратПоМодернизацииБУ   = ПустойСчет;
		Результат.СчетУчетаНДСПоПриобретению		= ПустойСчет;	
		Результат.СчетУчетаНДСПоРеализации			= ПустойСчет;	
		Результат.СчетУчетаНДСУплаченногоНаТаможне	= ПустойСчет;	
		Результат.СчетДоходовОтРеализацииБУ			= ПустойСчет;	
		Результат.СчетСебестоимостиПриРеализацииБУ	= ПустойСчет;	
		Результат.СчетПоложительныхОтклонений		= ПустойСчет;
		Результат.СчетОтрицательныхОтклонений		= ПустойСчет;
		
		ПустойСчетНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
		Результат.СчетУчетаНУ						= ПустойСчетНУ;
		Результат.СчетНачисленияАмортизацииНУ		= ПустойСчетНУ;
		Результат.СчетДоходовОтРеализацииНУ			= ПустойСчетНУ;
		Результат.СчетСебестоимостиПриРеализацииНУ	= ПустойСчетНУ;
		
  	КонецЕсли;

	Возврат Результат;

КонецФункции //ПолучитьСчетаУчетаОС()

// Функция возвращает счета учета по выбранному НМА
// Параметры:
//  Организация - по которой выполняется поиск
//  НМА      	- по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета 
// 
Функция ПолучитьСчетаУчетаНМА(Организация, НМА, ДатаСведений) Экспорт

	Результат = Новый Структура("СчетУчетаБУ, СчетНачисленияАмортизацииБУ");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр ("ДатаСведений", ДатаСведений);
	Запрос.УстановитьПараметр ("Организация",  Организация);
	Запрос.УстановитьПараметр ("НМА",          НМА);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СчетаУчетаНМАСрезПоследних.СчетУчетаБУ,
	               |	СчетаУчетаНМАСрезПоследних.СчетНачисленияАмортизацииБУ
	               |ИЗ
	               |	РегистрСведений.СчетаУчетаНМА.СрезПоследних(
	               |		&ДатаСведений,
	               |		Организация = &Организация
	               |		И НематериальныйАктив = &НМА) КАК СчетаУчетаНМАСрезПоследних";
	 
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
  		Результат.СчетУчетаБУ						= Выборка.СчетУчетаБУ;
		Результат.СчетНачисленияАмортизацииБУ		= Выборка.СчетНачисленияАмортизацииБУ;
	Иначе
		Результат.СчетУчетаБУ						= ПланыСчетов.Типовой.ПустаяСсылка();
		Результат.СчетНачисленияАмортизацииБУ		= ПланыСчетов.Типовой.ПустаяСсылка();	
  	КонецЕсли;

	Возврат Результат;

КонецФункции //ПолучитьСчетаУчетаНМА()

// Функция определяет фактический срок использования актива (в месяцах)
// исходя из даты принятия актива к учету и даты выбытия
//
// Параметры:
//   ДатаПринятияКУчету - дата принятия актива к учету
//   ДатаВыбытия - дата выбытия актива
//
// Возвращаемое значение:
//   Число месяцев.
//
Функция ОпределитьФактическийСрокИспользования(ДатаПринятияКУчету, ДатаВыбытия) Экспорт
	
	КоличествоЛет     = Год(ДатаВыбытия) - Год(ДатаПринятияКУчету);
	КоличествоМесяцев = Месяц(ДатаВыбытия) - Месяц(ДатаПринятияКУчету);
	
	Возврат КоличествоЛет * 12 + КоличествоМесяцев;
	
КонецФункции // ОпределитьФактическийСрокИспользования()

// Функция определяет объем выработки ОС начиная с указанной даты
//
// Параметры:
//   НачальнаяДата - дата, начиная с которой нам необходимо определить объем выработки принятия актива к учету
//   КонечнаяДата - дата, по которую нам необходим проанализировать объем выработки
//   ОсновноеСредство - актив, для которого мы определяем объем выработки
// Возвращаемое значение:
//   Число - объем выработки 
//
Функция ОпределитьОбъемВыработкиОС(НачальнаяДата, КонечнаяДата, ОсновноеСредство) Экспорт
	
	ОбъемВыработки = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВыработкаОСОбороты.КоличествоОборот
	               |ИЗ
	               |	РегистрНакопления.ВыработкаОС.Обороты(&НачДата, &КонДата, , ОсновноеСредство = &ОсновноеСредство) КАК ВыработкаОСОбороты";
				   
	Запрос.УстановитьПараметр("НачДата", НачальнаяДата);
	Запрос.УстановитьПараметр("КонДата", КонечнаяДата);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	Если ВыборкаОС.Следующий() Тогда
		ОбъемВыработки = ВыборкаОС.КоличествоОборот;
	КонецЕсли;	
	
	Возврат ОбъемВыработки;
	
КонецФункции // ОпределитьФактическийСрокИспользования()

// Функция возвращает признак применения параметров начисления амортиации в месяце их изменения.
//
// Параметры:
//  КонДата  - Дата, на которую определяется признак из учетной политики по бух.учету
//  Организция - СправочникСсылка.Организации - организация, для кторой определяется призанк из учетнойц политики.
// 
// Возвращаемое значение:
//  Булево   - значение признака учетной политики. Если учетная политика не заполнена, 
//             то возвращается ЛОЖЬ.
//
Функция ПолучитьПризнакПримененияПараметровАмортизацииВТекМесяце(КонДата, Организация) Экспорт

	ПрименятьПараметрыНачисленияАмортизацииВМесяцеИзменения = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		//Отказ = Истина;
		Возврат ПрименятьПараметрыНачисленияАмортизацииВМесяцеИзменения;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонДата) Тогда
		
		//Отказ = Истина;
		Возврат ПрименятьПараметрыНачисленияАмортизацииВМесяцеИзменения;
		
	КонецЕсли;

	// получим параметры уч.политики по БУ
	УчетнаяПолитика=глЗначениеПеременной("глУчетнаяПолитикаПоБухгалтерскомуУчету");	
			
	УчетнаяПолитикаОрганизации = УчетнаяПолитика.НайтиСтроки(Новый Структура("Организация", Организация));
		
	Если УчетнаяПолитикаОрганизации.Количество() = 0 Тогда
		//Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке("Не указаны параметры учетной политики " + "бухгалтерского учета ("+СокрЛП(Организация)+") на " + Формат(КонДата, "ДЛФ=DD"));
		Возврат ПрименятьПараметрыНачисленияАмортизацииВМесяцеИзменения;	
	Иначе
			
		Номер = 0;
		ФлагОтказа = Истина;
		Для НомерСтроки = 1 По УчетнаяПолитикаОрганизации.Количество() Цикл
				
			Строка = УчетнаяПолитикаОрганизации.Получить(НомерСтроки - 1);
			Если Строка.Период <= КонДата Тогда
				Номер = НомерСтроки;
				ФлагОтказа = Ложь;
					
			Иначе 
				Прервать;
			КонецЕсли;
		КонецЦикла;
			
		Если Номер <> 0 Тогда
			Строка = УчетнаяПолитикаОрганизации.Получить(Номер - 1);
			ПрименятьПараметрыНачисленияАмортизацииВМесяцеИзменения = Строка.ПрименятьПараметрыНачисленияАмортизацииВМесяцеИзменения;
							
		КонецЕсли;
			
	КонецЕсли;
		
	Если  ФлагОтказа = Истина Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указаны параметры учетной политики " + "бухгалтерского учета ("+СокрЛП(Организация)+") на " + Формат(КонДата, "ДЛФ=DD"));
		Возврат ПрименятьПараметрыНачисленияАмортизацииВМесяцеИзменения;	
	КонецЕсли; 
	
	Возврат ПрименятьПараметрыНачисленияАмортизацииВМесяцеИзменения;
	
КонецФункции // ПолучитьПараметрыУчетнойПолитики()

// Функция возвращает признак ведения аналитического учета ОС 
// по подразделениям в период даты, переданной в функцию.
//
Функция ВедетсяАналитическийУчетОСПоПодразделениям(ДатаПроверки) Экспорт
	
	ДатаНачалаВеденияУчетаОСПоПодразделениям = глЗначениеПеременной("ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений");
	
	Возврат (ДатаНачалаВеденияУчетаОСПоПодразделениям <> Дата(1,1,1) И ДатаПроверки >= ДатаНачалаВеденияУчетаОСПоПодразделениям);
	
КонецФункции

// Функция возвращает признак ведения аналитического учета ОС 
// по МОЛ в период даты, переданной в функцию.
//
Функция ВедетсяАналитическийУчетОСПоМОЛ(ДатаПроверки) Экспорт
	
	ДатаНачалаВеденияУчетаОСПоМОЛ = глЗначениеПеременной("ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ");
	
	Возврат (ДатаНачалаВеденияУчетаОСПоМОЛ <> Дата(1,1,1) И ДатаПроверки >= ДатаНачалаВеденияУчетаОСПоМОЛ);
	
КонецФункции

// Функция определяет текущее местонахождение для списка ОС
// 
// Параметры:
//  Дата - Дата, дата определения параметров
//  Организация - СправочникСсылка.Организации, организация в которой приняты ОС
//  ОсновныеСредства - СписокЗначений/СправочникСсылка.ОсновныеСредства,
//						ОС, для которых определяется местонахождение
//
// Возвращаемое значение:
//  ТаблицаЗначений, состоит из колонок "ОсновноеСредство", "МОЛОрганизации", "ПодразделениеОрганизации"
//
Функция ОпределитьТекущееМестонахождениеДляСпискаОС(Дата, Организация, ОсновныеСредства, ОпределятьНаКонецДня = Истина) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	               |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.СтруктурноеПодразделение,
	               |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛОрганизации,
	               |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК ПодразделениеОрганизации
	               |ИЗ
	               |	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	               |			&ТекДата,
	               |			Организация = &Организация
	               |				И ОсновноеСредство В (&ОсновныеСредства)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних";
				   
				   
	Запрос.УстановитьПараметр("ТекДата", ?(ОпределятьНаКонецДня, КонецДня(Дата), Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОсновныеСредства", ОсновныеСредства);
	
	Результат = Запрос.Выполнить();
	
	ТаблицаМестонахождений = Результат.Выгрузить();
	
	Возврат ТаблицаМестонахождений;
		
КонецФункции	

Функция ПолучитьСчетаУчетаПоВА() Экспорт
	
	Счета = Новый СписокЗначений();
	Счета.Добавить("ДолгосрочныеАктивыДляПродажи_");
	Счета.Добавить("ДолгосрочныеАктивыДляПродажи");
	Счета.Добавить("ГруппаНаВыбытиеДляПродажи");

	Счета.Добавить("ИнвестицииВНедвижимость_");
	Счета.Добавить("ИнвестицииВНедвижимость");
	Счета.Добавить("АмортизацияИнвестицийВНедвижимость");
	Счета.Добавить("УбытокОтОбесцененияИнвестицийВНедвижимость");
	Счета.Добавить("ОсновныеСредства_");
	Счета.Добавить("ОсновныеСредства");
	Счета.Добавить("АмортизацияОсновныхСредств");
	Счета.Добавить("УбытокОтОбесцененияОсновныхСредств");

	//Счета.Добавить("НематериальныеАктивы");
	//Счета.Добавить("Гудвилл");
	//Счета.Добавить("ОбесценениеГудвилла");
	//Счета.Добавить("ПрочиеНематериальныеАктивы");
	//Счета.Добавить("АмортизацияПрочихНематериальныхАктивов");
	//Счета.Добавить("УбытокОтОбесцененияПрочихНематериальныхАктивов");
	
	Возврат Счета;
	
КонецФункции	

Процедура УстановитьАналитикуПоМестонахождениюОС(ВедетсяАналитУчетОсПоМОЛ, ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождение, УстановитьДТ = Ложь, УстановитьКТ = Ложь) Экспорт
	
	Если ВедетсяАналитУчетОсПоМОЛ Или ВедетсяАналитУчетОсПоПодразделениям Тогда
		СтрокаТекМестонахождение = ТаблицаТекМестонахождение.Найти(ТекОС,"ОсновноеСредство");
		
		Если СтрокаТекМестонахождение <> Неопределено Тогда
			Если ВедетсяАналитУчетОсПоПодразделениям Тогда
				Если УстановитьДТ Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТекМестонахождение.ПодразделениеОрганизации);
				КонецЕсли;
				Если УстановитьКТ Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТекМестонахождение.ПодразделениеОрганизации);
				КонецЕсли;
				    				
			КонецЕсли;
			
			Если ВедетсяАналитУчетОсПоМОЛ Тогда
				Если УстановитьДТ Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТекМестонахождение.МОЛОрганизации);
				КонецЕсли;
				
				Если УстановитьКТ Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаТекМестонахождение.МОЛОрганизации);
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ АМОРТИЗАЦИИ ОС

// Расчитывает сумму амортизации по указаному основному средству по бух учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   Число - Сумма начисленной амортизации
//
Функция РасчетАмортизацииБухРегл(ДатаРасчета, Организация, СтруктурноеПодразделение, ОсновноеСредство = Неопределено, 
									ВыдаватьСообщения = Истина, ДокОбъект = Неопределено) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОС",							Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
    ТаблицаАмортизации.Колонки.Добавить("СтруктурноеПодразделение",		Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчетаБУ",					Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ТаблицаАмортизации.Колонки.Добавить("СчетАмортизацииБУ",			Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации", 		Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("ПризнакФиксированногоАктива",  Новый ОписаниеТипов("Булево"));
	ТаблицаАмортизации.Колонки.Добавить("Бух",                    		ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	// колонка ТекущееПодразделение содержит подразделение, в котором числится ОС.
	// подставляется в качестве аналитики при отражении расходов по амортизации, если соответствующая
	// аналитика в справочнике не заполнена
	ТаблицаАмортизации.Колонки.Добавить("ТекущееПодразделение",			Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаАмортизации.Колонки.Добавить("ТекущийМОЛ",					Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	// определим признак применения параметров амортизации в тек. месяце
	ПрименятьПараметрыАмортизацииВТекМесяце = ПолучитьПризнакПримененияПараметровАмортизацииВТекМесяце(ДатаРасчета, Организация); 
	ПериодПараметровАмортизации = ?(ПрименятьПараметрыАмортизацииВТекМесяце, Новый Граница(КонецМесяца(ДатаРасчета)), НачалоМесяца(ДатаРасчета));
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("НачалоГода",                  НачалоГода(ДатаРасчета));
	Запрос.УстановитьПараметр("Организация",                 Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",    СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("НачалоПериода",               НачалоМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("КонецПериода",              	 Новый Граница(КонецМесяца(ДатаРасчета)));
	Запрос.УстановитьПараметр("Период",                    	 ДатаРасчета);
	Запрос.УстановитьПараметр("СнятоСУчета",                 Перечисления.ВидыСостоянийОС.СнятоСУчета);
	Запрос.УстановитьПараметр("ПериодПараметровАмортизации", ПериодПараметровАмортизации);
	
	// Выбывший актив может иметь стоимостной баланс и участвовать в учете ст. 
	СостоянияФА = Новый СписокЗначений();	
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);                  	
	Запрос.УстановитьПараметр("СостоянияФА", СостоянияФА);	
	
	Если ОсновноеСредство = Неопределено Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		               |ИЗ
		               |	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Период, ) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
		               |ГДЕ
		               |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Организация = &Организация
		               |	И ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СтруктурноеПодразделение = &СтруктурноеПодразделение";
		ОсновноеСредство = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	КонецЕсли;

	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	ТекстУсловия = " И ОсновноеСредство В (&ОсновноеСредство)";
	ТекстУсловияПереоценки = " И ВнеоборотныйАктив В (&ОсновноеСредство)"; 
	
	СубконтоОС = Новый Массив();
	СубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	Запрос.УстановитьПараметр("СубконтоОС", СубконтоОС);
     
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ СнятыеСУчета
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|			&Период,
	|			Организация = &Организация) КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = &СнятоСУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ СписокОС
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&ПериодПараметровАмортизации,
	|			Организация = &Организация " + ТекстУсловия + " 
	|				И (НЕ ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							СнятыеСУчета.ОсновноеСредство
	|						ИЗ
	|							СнятыеСУчета))) КАК НачислениеАмортизацииБухгалтерскийУчетСрезПоследних
	|ГДЕ
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ИнвентарныйНомер,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПараметрВыработки
	|ПОМЕСТИТЬ ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ПериодПараметровАмортизации, Организация = &Организация) КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство = СписокОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	ПараметрВыработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыработкаОСОбороты.ОсновноеСредство КАК ОсновноеСредство,
	|	ВыработкаОСОбороты.ПараметрВыработки,
	|	ЕСТЬNULL(ВыработкаОСОбороты.КоличествоОборот, 0) КАК КоличествоОборот
	|ПОМЕСТИТЬ ВыработкаОСОбороты
	|ИЗ
	|	РегистрНакопления.ВыработкаОС.Обороты(&НачалоПериода, &КонецПериода, , ) КАК ВыработкаОСОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ВыработкаОСОбороты.ОсновноеСредство = СписокОС.ОсновноеСредство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|		ПО ВыработкаОСОбороты.ПараметрВыработки = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПараметрВыработки
	|			И ВыработкаОСОбороты.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации, 0) КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации, 0) КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0) КАК КоэффициентАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения, 0) КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Период
	|ПОМЕСТИТЬ ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ПериодПараметровАмортизации, Организация = &Организация) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СписокОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ГрафикАмортизации
	|ПОМЕСТИТЬ ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ПериодПараметровАмортизации, Организация = &Организация) КАК ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СписокОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации
	|ПОМЕСТИТЬ СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ПериодПараметровАмортизации, Организация = &Организация) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СписокОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ,
	|	СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|ПОМЕСТИТЬ СчетаУчетаОсновныхСредствСрезПоследних
	|ИЗ
	|	РегистрСведений.СчетаУчетаОС.СрезПоследних(&ПериодПараметровАмортизации, Организация = &Организация) КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = СписокОС.ОсновноеСредство
	|				
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтоимостьОСНачалоПериода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(СтоимостьОСНачалоПериода.СуммаОстатокДт, 0) КАК СтоимостьНачальныйОстаток
	|ПОМЕСТИТЬ СтоимостьОСНачалоПериода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&НачалоПериода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследних),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК СтоимостьОСНачалоПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СтоимостьОСНачалоПериода.Субконто1 = СписокОС.ОсновноеСредство
	|			
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО СтоимостьОСНачалоПериода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство	
	|		И СтоимостьОСНачалоПериода.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтоимостьОСКонецПериода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(СтоимостьОСКонецПериода.СуммаОстатокДт, 0) КАК СтоимостьКонечныйОстаток
	|ПОМЕСТИТЬ СтоимостьОСКонецПериода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&КонецПериода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследних),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК СтоимостьОСКонецПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СтоимостьОСКонецПериода.Субконто1 = СписокОС.ОсновноеСредство
	|			
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО СтоимостьОСКонецПериода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство	
	|		И СтоимостьОСКонецПериода.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ

	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияОСНачалоПериода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(АмортизацияОСНачалоПериода.СуммаОстатокКт, 0) КАК АмортизацияНачальныйОстаток
	|ПОМЕСТИТЬ АмортизацияОСНачалоПериода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&НачалоПериода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследних),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК АмортизацияОСНачалоПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО АмортизацияОСНачалоПериода.Субконто1 = СписокОС.ОсновноеСредство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО АмортизацияОСНачалоПериода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство	
	|		И АмортизацияОСНачалоПериода.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияОСКонецПериода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(АмортизацияОСКонецПериода.СуммаОстатокКт, 0) КАК АмортизацияКонечныйОстаток
	|ПОМЕСТИТЬ АмортизацияОСКонецПериода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&КонецПериода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследних),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК АмортизацияОСКонецПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО АмортизацияОСКонецПериода.Субконто1 = СписокОС.ОсновноеСредство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО АмортизацияОСКонецПериода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство	
	|		И АмортизацияОСКонецПериода.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияОСОбороты.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(АмортизацияОСОбороты.СуммаОборотКт, 0) КАК АмортизацияОборот
	|ПОМЕСТИТЬ АмортизацияОСОбороты
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследних),
	|			&СубконтоОС,
	|			Организация = &Организация,
	|			,
	|			) КАК АмортизацияОСОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО АмортизацияОСОбороты.Субконто1 = СписокОС.ОсновноеСредство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО АмортизацияОСОбороты.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство	
	|		И АмортизацияОСОбороты.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ

	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетУчетаБУ КАК СчетУчетаБУ,
	|	СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетНачисленияАмортизацииБУ КАК СчетНачисленияАмортизацииБУ
	|ПОМЕСТИТЬ СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода
	|ИЗ
	|	РегистрСведений.СчетаУчетаОС.СрезПоследних(&НачалоГода, Организация = &Организация) КАК СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.ОсновноеСредство = СписокОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтоимостьНаНачалоГода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(СтоимостьНаНачалоГода.СуммаОстатокДт, 0) КАК СтоимостьОстатокНаНачалоГода
	|ПОМЕСТИТЬ СтоимостьНаНачалоГода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&НачалоГода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетУчетаБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК СтоимостьНаНачалоГода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СтоимостьНаНачалоГода.Субконто1 = СписокОС.ОсновноеСредство
	|			
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода КАК СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода
	|		ПО СтоимостьНаНачалоГода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.ОсновноеСредство	
	|		И СтоимостьНаНачалоГода.Счет 	   = СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетУчетаБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияНаНачалоГода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(АмортизацияНаНачалоГода.СуммаОстатокКт, 0) КАК АмортизацияОстатокНаНачалоГода
	|ПОМЕСТИТЬ АмортизацияНаНачалоГода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&НачалоГода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетНачисленияАмортизацииБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК АмортизацияНаНачалоГода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО АмортизацияНаНачалоГода.Субконто1 = СписокОС.ОсновноеСредство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода КАК СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода
	|		ПО АмортизацияНаНачалоГода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.ОсновноеСредство	
	|		И АмортизацияНаНачалоГода.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетНачисленияАмортизацииБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоложительныеПереоценкиОС.ВнеоборотныйАктив КАК ОсновноеСредство,
	|	СУММА(ПоложительныеПереоценкиОС.СуммаПереоценкиАмортизацииПриход) КАК СуммаПереоценкиАмортизации
	|ПОМЕСТИТЬ ПоложительныеПереоценкиОС
	|ИЗ
	|	РегистрНакопления.ПереоценкаВнеоборотныхАктивов.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация и СтруктурноеПодразделение = &СтруктурноеПодразделение" + ТекстУсловияПереоценки + ") КАК ПоложительныеПереоценкиОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ПоложительныеПереоценкиОС.ВнеоборотныйАктив = СписокОС.ОсновноеСредство
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоложительныеПереоценкиОС.ВнеоборотныйАктив
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ОбъектыНалоговогоУчетаФА
	|ИЗ
	|	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И СостояниеФиксированногоАктива В (&СостоянияФА)) КАК ОбъектыНалоговогоУчетаФА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = СписокОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МестонахождениеОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОССрезПоследних.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	МестонахождениеОССрезПоследних.Местонахождение КАК ТекущееПодразделение,
	|	МестонахождениеОССрезПоследних.МОЛ КАК МОЛ
	|ПОМЕСТИТЬ МестонахождениеОС
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&ПериодПараметровАмортизации,
	|			Организация = &Организация)МестонахождениеОССрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокОС.ОсновноеСредство,
	|	СписокОС.ОсновноеСредство.Код КАК Код,
	|	ЕСТЬNULL(СтоимостьОСНачалоПериода.СтоимостьНачальныйОстаток, 0) КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьОСКонецПериода.СтоимостьКонечныйОстаток, 0) КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСНачалоПериода.АмортизацияНачальныйОстаток, 0) КАК АмортизацияНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСКонецПериода.АмортизацияКонечныйОстаток, 0) КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСОбороты.АмортизацияОборот, 0) КАК АмортизацияОборот,
	|	ЕСТЬNULL(ПоложительныеПереоценкиОС.СуммаПереоценкиАмортизации, 0) КАК СуммаПереоценкиАмортизации,
	|	ЕСТЬNULL(ВыработкаОСОбороты.КоличествоОборот, 0) КАК Количество,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации, 0) КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации, 0) КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0) КАК КоэффициентАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения, 0) КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Период,
	|	ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ГрафикАмортизации,
	|	СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ,
	|	СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации,
	|	ЕСТЬNULL(СтоимостьНаНачалоГода.СтоимостьОстатокНаНачалоГода, 0) - ЕСТЬNULL(АмортизацияНаНачалоГода.АмортизацияОстатокНаНачалоГода, 0) КАК СтоимостьНаНачалоГода,
	|	ВЫБОР
	|		КОГДА ОбъектыНалоговогоУчетаФА.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПризнакФиксированногоАктива,
	|	МестонахождениеОС.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	МестонахождениеОС.ТекущееПодразделение КАК ТекущееПодразделение,
	|	МестонахождениеОС.МОЛ КАК ТекущийМОЛ
	|ИЗ
	|	СписокОС КАК СписокОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО СписокОС.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних КАК ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних
	|		ПО СписокОС.ОсновноеСредство = ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|		ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО СписокОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО СписокОС.ОсновноеСредство = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьОСНачалоПериода КАК СтоимостьОСНачалоПериода
	|		ПО СписокОС.ОсновноеСредство = СтоимостьОСНачалоПериода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьОСКонецПериода КАК СтоимостьОСКонецПериода
	|		ПО СписокОС.ОсновноеСредство = СтоимостьОСКонецПериода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСНачалоПериода КАК АмортизацияОСНачалоПериода
	|		ПО СписокОС.ОсновноеСредство = АмортизацияОСНачалоПериода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСКонецПериода КАК АмортизацияОСКонецПериода
	|		ПО СписокОС.ОсновноеСредство = АмортизацияОСКонецПериода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСОбороты КАК АмортизацияОСОбороты
	|		ПО СписокОС.ОсновноеСредство = АмортизацияОСОбороты.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыработкаОСОбороты КАК ВыработкаОСОбороты
	|		ПО СписокОС.ОсновноеСредство = ВыработкаОСОбороты.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьНаНачалоГода КАК СтоимостьНаНачалоГода
	|		ПО СписокОС.ОсновноеСредство = СтоимостьНаНачалоГода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияНаНачалоГода КАК АмортизацияНаНачалоГода
	|		ПО СписокОС.ОсновноеСредство = АмортизацияНаНачалоГода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоложительныеПереоценкиОС КАК ПоложительныеПереоценкиОС
	|		ПО СписокОС.ОсновноеСредство = ПоложительныеПереоценкиОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА
	|		ПО СписокОС.ОсновноеСредство = ОбъектыНалоговогоУчетаФА.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОС КАК МестонахождениеОС
	|		ПО СписокОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство";
	
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();

	ТаблицаГрафиков = ПолучитьТаблицуГрафиков();
	ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияОСБУ;

	Пока ВыборкаПоОС.Следующий() Цикл

		Если (ВыборкаПоОС.АмортизацияОборот + ВыборкаПоОС.СуммаПереоценкиАмортизации)<> 0 Тогда
			Если ВыдаватьСообщения = Истина И НЕ (ОсновноеСредство = Неопределено) Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для основного средства <" + ВыборкаПоОС.ОсновноеСредство + "> код <" + СокрЛП(ВыборкаПоОС.Код) +"> амортизация в этом месяце уже начислялась",
												ВыборкаПоОС.ОсновноеСредство, ,ДокОбъект, ВидРегламентнойОперации, Ложь);
			КонецЕсли;
			Продолжить; // по указанному ОС в этом месяце уже начисляли амортизацию 
		КонецЕсли;

		СуммаАмортизации = 0;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СчетНачисленияАмортизацииБУ) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для основного средства <" + ВыборкаПоОС.ОсновноеСредство + "> код <" + СокрЛП(ВыборкаПоОС.Код) +"> не указан счет для начисления амортизации",
												ВыборкаПоОС.ОсновноеСредство, ,ДокОбъект, ВидРегламентнойОперации);
				
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СпособНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для основного средства <" + ВыборкаПоОС.ОсновноеСредство + "> код <" + СокрЛП(ВыборкаПоОС.Код) +"> не указан способ амортизации",
												ВыборкаПоОС.ОсновноеСредство, ,ДокОбъект, ВидРегламентнойОперации);
				
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для основного средства <" + ВыборкаПоОС.ОсновноеСредство + "> код <" + СокрЛП(ВыборкаПоОС.Код) +"> стоимость равна 0",
												ВыборкаПоОС.ОсновноеСредство, ,ДокОбъект, ВидРегламентнойОперации);
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		Если ВыборкаПоОС.СпособНачисленияАмортизации <> Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) Тогда
				Если ВыдаватьСообщения = Истина Тогда
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для основного средства <" + ВыборкаПоОС.ОсновноеСредство + "> код <" + СокрЛП(ВыборкаПоОС.Код) +"> срок использования равен 0",
												ВыборкаПоОС.ОсновноеСредство, ,ДокОбъект, ВидРегламентнойОперации);
				КонецЕсли; 
				Продолжить;
			КонецЕсли;
        КонецЕсли; 
		
		Если ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ЛинейныйПроцентом Тогда
			Если Не ЗначениеЗаполнено(ВыборкаПоОС.КоэффициентАмортизации) Тогда
				Если ВыдаватьСообщения = Истина Тогда
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для основного средства <" + ВыборкаПоОС.ОсновноеСредство + "> код <" + СокрЛП(ВыборкаПоОС.Код) +"> не указан процент годовой амотризации",
												ВыборкаПоОС.ОсновноеСредство, ,ДокОбъект, ВидРегламентнойОперации);
				КонецЕсли; 
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		
		СуммаАмортизации = 0;

		Если ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
 
			СуммаГодовойАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации/ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации * 12;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.Количество) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации) Тогда
				Если ВыдаватьСообщения = Истина Тогда
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для основного средства <" + ВыборкаПоОС.ОсновноеСредство + "> код <" + СокрЛП(ВыборкаПоОС.Код) +"> объем продукции для вычисления не определен",
												ВыборкаПоОС.ОсновноеСредство, ,ДокОбъект, ВидРегламентнойОперации);
				КонецЕсли; 
				Продолжить;
			КонецЕсли;
		
			СуммаАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.Количество / ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда

			Если Год(ВыборкаПоОС.Период) = Год(ДатаРасчета) Тогда
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;
			Иначе
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГода;
			КонецЕсли;
			
			СтоимостьИтоговая		= ?(СтоимостьИтоговая = NULL, 0, СтоимостьИтоговая);
			СуммаГодовойАмортизации = СтоимостьИтоговая / ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации * 12;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации	= СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода	= ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации	= СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;
			
			КоэффициентУскорения	= ВыборкаПоОС.КоэффициентУскорения;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.КоэффициентУскорения) Тогда
				
				КоэффициентУскорения = 1;
				
				Если ВыдаватьСообщения = Истина Тогда
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для основного средства <" + ВыборкаПоОС.ОсновноеСредство + "> код <" + СокрЛП(ВыборкаПоОС.Код) +"> коэффициент ускорения не заполнен",
													ВыборкаПоОС.ОсновноеСредство, ,ДокОбъект, ВидРегламентнойОперации, Ложь);
				КонецЕсли;
			КонецЕсли;

			СуммаАмортизации = СуммаАмортизации * КоэффициентУскорения;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда

			//Дата последнего изменения параметров
			Если ВыборкаПоОС.Период = Null Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для основного средства <" + ВыборкаПоОС.ОсновноеСредство + "> код <" + СокрЛП(ВыборкаПоОС.Код) +"> не определилась дата начала использования (изменения параметров)!",
													ВыборкаПоОС.ОсновноеСредство, ,ДокОбъект, ВидРегламентнойОперации);
				Продолжить;
			КонецЕсли; 
			
			ДатаНачалаРасчета = НачалоМесяца(ДобавитьМесяц(ВыборкаПоОС.Период,1));

			ЧислоЛетПользования       = ?(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации = NULL, 0, ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) / 12;
			ЧислоЛетПользования       = Цел(Макс( 1, ЧислоЛетПользования));
			СуммаЧислеЛет             = 0;
			ГодИспользования          = Год(ДатаРасчета) - Год(ДатаНачалаРасчета);
			ГодовщинаНачалаИспользования = Дата(Год(ДатаРасчета), Месяц(ДатаНачалаРасчета), День(ДатаНачалаРасчета));
			
			Если КонецМесяца(ДатаРасчета) >= КонецМесяца(ГодовщинаНачалаИспользования) Тогда
				ГодИспользования = ГодИспользования + 1;
			КонецЕсли;    

			ГодИспользования = Макс(ГодИспользования,1);

			// Формула суммы чисел от 1 до N
			//		S = (N + 1) * N / 2
			СуммаЧислеЛет = (ЧислоЛетПользования + 1) * ЧислоЛетПользования / 2;
			
			ПроцентГодовойАмортизации	= Макс((ЧислоЛетПользования - ГодИспользования + 1),1) / СуммаЧислеЛет;
			СуммаГодовойАмортизации		= ?(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации = NULL, 0, ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) *
			                              ПроцентГодовойАмортизации;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации		= СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода		= ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации		= СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ЛинейныйПроцентом Тогда
 
			СуммаГодовойАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.КоэффициентАмортизации / 100;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;


		КонецЕсли;
		
		Если ПрименятьПараметрыАмортизацииВТекМесяце Тогда 
			СтоимостьОстаток   = ВыборкаПоОС.СтоимостьКонечныйОстаток;
			АмортизацияОстаток = ВыборкаПоОС.АмортизацияКонечныйОстаток;
		Иначе 
			СтоимостьОстаток   = ВыборкаПоОС.СтоимостьНачальныйОстаток;
			АмортизацияОстаток = ВыборкаПоОС.АмортизацияНачальныйОстаток;
		КонецЕсли;
		
		ВсегоОсталосьСписать = СтоимостьОстаток - АмортизацияОстаток - ВыборкаПоОС.ЛиквидационнаяСтоимость;
		
		//Списываем остаток если он есть
		Разница = 0;
		Разница = Цел(ВсегоОсталосьСписать - СуммаАмортизации);
		
		Если Разница = 0 Тогда 
			СуммаАмортизации  = ВсегоОсталосьСписать;
		Иначе 
			СуммаАмортизации  = Макс(0,Мин(СуммаАмортизации, ВсегоОсталосьСписать));
		КонецЕсли;
			
		СтрокаАмортизации = ТаблицаАмортизации.Добавить();

		СтрокаАмортизации.ОС							= ВыборкаПоОС.ОсновноеСредство;
		СтрокаАмортизации.СтруктурноеПодразделение		= ВыборкаПоОС.СтруктурноеПодразделение;
		СтрокаАмортизации.СчетУчетаБУ					= ВыборкаПоОС.СчетУчетаБУ;
		СтрокаАмортизации.СчетАмортизацииБУ				= ВыборкаПоОС.СчетНачисленияАмортизацииБУ;
		СтрокаАмортизации.НаправлениеАмортизации		= ВыборкаПоОС.СпособОтраженияРасходовПоАмортизации;
		СтрокаАмортизации.ПризнакФиксированногоАктива 	= ВыборкаПоОС.ПризнакФиксированногоАктива;		
		СтрокаАмортизации.Бух							= СуммаАмортизации;
        СтрокаАмортизации.ТекущееПодразделение			= ВыборкаПоОС.ТекущееПодразделение;
		СтрокаАмортизации.ТекущийМОЛ					= ВыборкаПоОС.ТекущийМОЛ;
		
	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииБухРегл()

// Получает сводную таблицу графиков - годовых и индивидуальных одним запросом - чтобы потом можно было 
// данные ез нее дергать, а не лазить в справочник за каждым значеним
//
Функция ПолучитьТаблицуГрафиков()

	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ссылка КАК График,
	|	Коэффициент1,
	|	Коэффициент2,
	|	Коэффициент3,
	|	Коэффициент4,
	|	Коэффициент5,
	|	Коэффициент6,
	|	Коэффициент7,
	|	Коэффициент8,
	|	Коэффициент9,
	|	Коэффициент10,
	|	Коэффициент11,
	|	Коэффициент12,
	|	Коэффициент1 + Коэффициент2 + Коэффициент3 + Коэффициент4 + Коэффициент5 + Коэффициент6 + Коэффициент7 + Коэффициент8 + Коэффициент9 + Коэффициент10 + Коэффициент11 + Коэффициент12 КАК СуммаКоэффициентов
	|ИЗ
	|	Справочник.ГодовыеГрафикиАмортизацииОС КАК ГодовыеГрафикиАмортизацииОС";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуГрафиков()

Функция ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, График, ДатаРасчета)

	КоэффициентАммортизации = 0;

	СтрокаТЧ = ТаблицаГрафиков.Найти(График, "График");
	Если СтрокаТЧ = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	СуммаВсех   = СтрокаТЧ.СуммаКоэффициентов;
	СуммаОдного = СтрокаТЧ["Коэффициент" + Месяц(ДатаРасчета)];

	КоэффициентАммортизации = СуммаОдного / ?(СуммаВсех = 0 ИЛИ СуммаВсех = NULL, 1, СуммаВсех);

	Возврат КоэффициентАммортизации;

КонецФункции // ПолучитьКоэффициентАмортизацииИзГрафика()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА АМОРТИЗАЦИИ НМА 

Функция РасчетАмортизацииНМАБухРегл(ДатаРасчета, Организация, СтруктурноеПодразделение, НематериальныйАктив = Неопределено,
											ВыдаватьСообщения = Истина, ДокОбъект = неопределено) Экспорт

    ТаблицаАмортизации = Новый ТаблицаЗначений();

    ТаблицаАмортизации.Колонки.Добавить("НМА", 							Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));
    ТаблицаАмортизации.Колонки.Добавить("СчетУчетаБУ",			 		Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
    ТаблицаАмортизации.Колонки.Добавить("СчетАмортизацииБУ",	 		Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
    ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации", 		Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("ПризнакФиксированногоАктива",  Новый ОписаниеТипов("Булево"));
    ТаблицаАмортизации.Колонки.Добавить("Бух",                    		ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
    ТаблицаАмортизации.Колонки.Добавить("СтруктурноеПодразделение",  	Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	// определим признак применения параметров амортизации в тек. месяце
	ПрименятьПараметрыАмортизацииВТекМесяце = ПолучитьПризнакПримененияПараметровАмортизацииВТекМесяце(ДатаРасчета, Организация); 
	ПериодПараметровАмортизации = ?(ПрименятьПараметрыАмортизацииВТекМесяце, Новый Граница(КонецМесяца(ДатаРасчета)), НачалоМесяца(ДатаРасчета));
	
	Если НематериальныйАктив = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",   			  Организация);
	    Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	    Запрос.УстановитьПараметр("ПериодПараметровАмортизации", ПериодПараметровАмортизации);
		
		Запрос.УстановитьПараметр("СубконтоНМА", 				 ПланыВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы);
		

		Запрос.Текст = "ВЫБРАТЬ
					   |	ТиповойОстатки.Счет,
		               |	ТиповойОстатки.Организация,
		               |	ТиповойОстатки.СтруктурноеПодразделение,
		               |	ТиповойОстатки.СуммаОстатокДт,
		               |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.НематериальныеАктивы) КАК НематериальныйАктив
		               |ИЗ
		               |	РегистрБухгалтерии.Типовой.Остатки(&ПериодПараметровАмортизации, , &СубконтоНМА, Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстатки";
		
		НематериальныйАктив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НематериальныйАктив");
		
	КонецЕсли;
	
	СписокНМА = ПолучитьСписокНМАОрганизации(ПериодПараметровАмортизации, Организация, НематериальныйАктив);
    
    Если СписокНМА.количество()=0 тогда
    	//Не обнаружено объектов 
    	Возврат ТаблицаАмортизации;
    КонецЕсли;
	
	Запрос = Новый Запрос();
    Запрос.УстановитьПараметр("НачалоГода",    				 НачалоГода(ДатаРасчета));
    Запрос.УстановитьПараметр("Организация",   				 Организация);
    Запрос.УстановитьПараметр("СтруктурноеПодразделение",	 СтруктурноеПодразделение);	
    Запрос.УстановитьПараметр("НачалоПериода", 				 НачалоМесяца(ДатаРасчета));
    Запрос.УстановитьПараметр("КонецПериода",  				 КонецМесяца(ДатаРасчета));
    Запрос.УстановитьПараметр("Период",  	   				 ДатаРасчета);
    Запрос.УстановитьПараметр("СписокНМА", 					 СписокНМА);
    Запрос.УстановитьПараметр("ПериодПараметровАмортизации", ПериодПараметровАмортизации);
	Запрос.УстановитьПараметр("СубконтоНМА", 				 ПланыВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы);
    Запрос.УстановитьПараметр("СнятоСУчета", 				 Перечисления.ВидыСостоянийНМА.Списан); 
	
	// Выбывший актив может иметь стоимостной баланс и участвовать в учете ст. 
	СостоянияФА = Новый СписокЗначений();	
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);                  	
	Запрос.УстановитьПараметр("СостоянияФА", 	СостоянияФА);	

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.Организация,
	               |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	               |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.СрокПолезногоИспользования,
	               |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.СтоимостьДляВычисленияАмортизации,
	               |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации,
	               |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.Период,
	               |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.СпособНачисленияАмортизации,
	               |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	               |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.НачислятьАмортизацию
	               |ПОМЕСТИТЬ ПервоначальныеСведенияОНМАОрганизацийСрезПоследних
	               |ИЗ
	               |	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&ПериодПараметровАмортизации, НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведенияОНМАОрганизацийСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	НематериальныйАктив
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	               |	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации
	               |ПОМЕСТИТЬ СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	               |ИЗ
	               |	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(
	               |			&ПериодПараметровАмортизации,
	               |			Организация = &Организация
	               |				И НематериальныйАктив В (&СписокНМА)) КАК СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	НематериальныйАктив
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СчетаУчетаНМАСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	               |	СчетаУчетаНМАСрезПоследних.СчетУчетаБУ КАК СчетУчетаБУ,
	               |	СчетаУчетаНМАСрезПоследних.СчетНачисленияАмортизацииБУ КАК СчетНачисленияАмортизацииБУ
	               |ПОМЕСТИТЬ СчетаУчетаНМАСрезПоследних
	               |ИЗ
	               |	РегистрСведений.СчетаУчетаНМА.СрезПоследних(
	               |			&ПериодПараметровАмортизации,
	               |			Организация = &Организация
	               |				И НематериальныйАктив В (&СписокНМА)) КАК СчетаУчетаНМАСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	НематериальныйАктив,
	               |	СчетУчетаБУ,
	               |	СчетНачисленияАмортизацииБУ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СтоимостьНМА_БУ.СтруктурноеПодразделение,
	               |	СтоимостьНМА_БУ.СуммаНачальныйОстатокДт,
	               |	СтоимостьНМА_БУ.СуммаКонечныйОстатокДт,
	               |	СтоимостьНМА_БУ.СуммаКонечныйОстатокКт,
	               |	СтоимостьНМА_БУ.СуммаОборотКт,
	               |	ВЫРАЗИТЬ(СтоимостьНМА_БУ.Субконто1 КАК Справочник.НематериальныеАктивы) КАК Субконто1,
	               |	СтоимостьНМА_БУ.Счет КАК Счет
	               |ПОМЕСТИТЬ СтоимостьНМА_БУ
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			Период,
	               |			,
	               |			,
	               |			&СубконтоНМА,
	               |			Организация = &Организация
	               |				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	               |				И Субконто1 В (&СписокНМА)) КАК СтоимостьНМА_БУ
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Субконто1,
	               |	Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВыработкаНМАОбороты.КоличествоОборот,
	               |	ВыработкаНМАОбороты.НематериальныйАктив КАК НематериальныйАктив
	               |ПОМЕСТИТЬ ВыработкаНМАОбороты
	               |ИЗ
	               |	РегистрНакопления.ВыработкаНМА.Обороты(&НачалоПериода, &КонецПериода, Месяц, НематериальныйАктив В (&СписокНМА)) КАК ВыработкаНМАОбороты
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	НематериальныйАктив
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Стоимость.СтруктурноеПодразделение,
	               |	ВЫРАЗИТЬ(Стоимость.Субконто1 КАК Справочник.НематериальныеАктивы) КАК Субконто1,
	               |	Стоимость.СуммаОстатокДт,
	               |	Стоимость.СуммаОстатокКт,
	               |	Стоимость.Счет КАК Счет
	               |ПОМЕСТИТЬ Стоимость
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(
	               |			&НачалоГода,
	               |			,
	               |			&СубконтоНМА,
	               |			Организация = &Организация
	               |				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	               |				И Субконто1 В (&СписокНМА)) КАК Стоимость
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Субконто1,
	               |	Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Стоимость.СтруктурноеПодразделение,
	               |	СчетаУчетаНМАСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	               |	Стоимость.СуммаОстатокДт - ЕСТЬNULL(Амортизация.СуммаОстатокКт, 0)КАК СтоимостьНаНачалоГода
	               |ПОМЕСТИТЬ СтоимостьНМАНаНачалоГода_БУ
	               |ИЗ
	               |	РегистрСведений.СчетаУчетаНМА.СрезПоследних(
	               |			&НачалоГода,
	               |			Организация = &Организация
	               |				И НематериальныйАктив В (&СписокНМА)) КАК СчетаУчетаНМАСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Стоимость КАК Стоимость
	               |		ПО СчетаУчетаНМАСрезПоследних.НематериальныйАктив = Стоимость.Субконто1
	               |			И СчетаУчетаНМАСрезПоследних.СчетУчетаБУ = Стоимость.Счет
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Стоимость КАК Амортизация
	               |		ПО СчетаУчетаНМАСрезПоследних.НематериальныйАктив = Амортизация.Субконто1
	               |			И СчетаУчетаНМАСрезПоследних.СчетНачисленияАмортизацииБУ = Амортизация.Счет
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	НематериальныйАктив
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив КАК НематериальныйАктив
	               |ПОМЕСТИТЬ СнятыеСУчета
	               |ИЗ
	               |	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	               |			&Период,
	               |			Организация = &Организация
	               |				И НематериальныйАктив В (&СписокНМА)
	               |				И Состояние = &СнятоСУчета) КАК СостоянияНМАОрганизацийСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	НематериальныйАктив
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫРАЗИТЬ(ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК Справочник.НематериальныеАктивы) КАК ФиксированныйАктив
	               |ПОМЕСТИТЬ ОбъектыНалоговогоУчетаФА
	               |ИЗ
	               |	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	               |			&КонецПериода,
	               |			Организация = &Организация
	               |				И СостояниеФиксированногоАктива В (&СостоянияФА)
	               |				И ВЫРАЗИТЬ(ФиксированныйАктив КАК Справочник.НематериальныеАктивы) В (&СписокНМА)) КАК ОбъектыНалоговогоУчетаФА
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ФиксированныйАктив
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СтоимостьНМА_БУ.СтруктурноеПодразделение,
	               |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.НематериальныйАктив,
	               |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.НематериальныйАктив.Код КАК Код,
	               |	СтоимостьНМА_БУ.СуммаНачальныйОстатокДт КАК СтоимостьНачальныйОстаток,
	               |	СтоимостьНМА_БУ.СуммаКонечныйОстатокДт КАК СтоимостьКонечныйОстаток,
	               |	АмортизацияНМА_БУ.СуммаКонечныйОстатокКт КАК АмортизацияКонечныйОстаток,
	               |	АмортизацияНМА_БУ.СуммаОборотКт КАК АмортизацияОборот,
	               |	ВыработкаНМАОбороты.КоличествоОборот КАК Количество,
	               |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.СрокПолезногоИспользования КАК СрокИспользованияДляВычисленияАмортизации,
	               |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизации,
	               |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации,
	               |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.Период,
	               |	СчетаУчетаНМАСрезПоследних.СчетУчетаБУ,
	               |	СчетаУчетаНМАСрезПоследних.СчетНачисленияАмортизацииБУ,
	               |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.СпособНачисленияАмортизации,
	               |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.ПервоначальнаяСтоимость,
	               |	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
	               |	ВЫБОР
	               |		КОГДА ОбъектыНалоговогоУчетаФА.ФиксированныйАктив ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ПризнакФиксированногоАктива,
	               |	СтоимостьНМАНаНачалоГода_БУ.СтоимостьНаНачалоГода
	               |ИЗ
	               |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних КАК ПервоначальныеСведенияОНМАОрганизацийСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних КАК СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	               |		ПО ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.НематериальныйАктив = СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчетаНМАСрезПоследних КАК СчетаУчетаНМАСрезПоследних
	               |			ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьНМА_БУ КАК СтоимостьНМА_БУ
	               |			ПО СчетаУчетаНМАСрезПоследних.НематериальныйАктив = СтоимостьНМА_БУ.Субконто1
	               |				И СчетаУчетаНМАСрезПоследних.СчетУчетаБУ = СтоимостьНМА_БУ.Счет
	               |			ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьНМА_БУ КАК АмортизацияНМА_БУ
	               |			ПО СчетаУчетаНМАСрезПоследних.НематериальныйАктив = АмортизацияНМА_БУ.Субконто1
	               |				И СчетаУчетаНМАСрезПоследних.СчетНачисленияАмортизацииБУ = АмортизацияНМА_БУ.Счет
	               |		ПО ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.НематериальныйАктив = СчетаУчетаНМАСрезПоследних.НематериальныйАктив
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВыработкаНМАОбороты КАК ВыработкаНМАОбороты
	               |		ПО ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.НематериальныйАктив = ВыработкаНМАОбороты.НематериальныйАктив
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьНМАНаНачалоГода_БУ КАК СтоимостьНМАНаНачалоГода_БУ
	               |		ПО ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.НематериальныйАктив = СтоимостьНМАНаНачалоГода_БУ.НематериальныйАктив
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СнятыеСУчета КАК СнятыеСУчета
	               |		ПО ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.НематериальныйАктив = СнятыеСУчета.НематериальныйАктив
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА
	               |		ПО ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.НематериальныйАктив = ОбъектыНалоговогоУчетаФА.ФиксированныйАктив
	               |ГДЕ
	               |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.Организация = &Организация
	               |	И ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.НачислятьАмортизацию = ИСТИНА
	               |	И СнятыеСУчета.НематериальныйАктив ЕСТЬ NULL 
	               |	И СтоимостьНМА_БУ.СтруктурноеПодразделение = &СтруктурноеПодразделение";
		
	ВыборкаПоНМА = Запрос.Выполнить().Выбрать();

	ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияНМАБУ;
	Пока ВыборкаПоНМА.Следующий() Цикл
		

    	Если (ВыборкаПоНМА.АмортизацияОборот <> 0) И
    		(ВыборкаПоНМА.АмортизацияОборот <> Null)Тогда
    		Если ВыдаватьСообщения = Истина и не (НематериальныйАктив = Неопределено) Тогда
    			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для нематериального актива <" + ВыборкаПоНМА.НематериальныйАктив + "> код <" + СокрЛП(ВыборкаПоНМА.Код) +"> амортизация в этом месяце уже начислялась",
												    ВыборкаПоНМА.НематериальныйАктив, , ДокОбъект, ВидРегламентнойОперации, Ложь);
    		КонецЕсли; 
    		Продолжить; // по указанному НМА в этом месяце уже начисляли амортизацию 
    	КонецЕсли;

    	СуммаАмортизации = 0;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СчетНачисленияАмортизацииБУ) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для нематериального актива <" + ВыборкаПоНМА.НематериальныйАктив + "> код <" + СокрЛП(ВыборкаПоНМА.Код) +"> не указан счет для начисления амортизации",
												ВыборкаПоНМА.НематериальныйАктив, , ДокОбъект, ВидРегламентнойОперации);
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		
    	Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СпособНачисленияАмортизации) Тогда
    		Если ВыдаватьСообщения = Истина Тогда
    			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для нематериального актива <" + ВыборкаПоНМА.НематериальныйАктив + "> код <" + СокрЛП(ВыборкаПоНМА.Код) +"> не указан способ амортизации",
												ВыборкаПоНМА.НематериальныйАктив, , ДокОбъект, ВидРегламентнойОперации);
    		КонецЕсли; 
    		Продолжить;
    	КонецЕсли;

    	Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации) Тогда
    		Если ВыдаватьСообщения = Истина Тогда
    			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для нематериального актива <" + ВыборкаПоНМА.НематериальныйАктив + "> код <" + СокрЛП(ВыборкаПоНМА.Код) +"> стоимость равна 0",
												ВыборкаПоНМА.НематериальныйАктив, , ДокОбъект, ВидРегламентнойОперации);
    		КонецЕсли; 
    		Продолжить;
    	КонецЕсли;

    	Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации) Тогда
    		Если ВыдаватьСообщения = Истина Тогда
    			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для нематериального актива <" + ВыборкаПоНМА.НематериальныйАктив + "> код <" + СокрЛП(ВыборкаПоНМА.Код) +"> срок использования равен 0",
												ВыборкаПоНМА.НематериальныйАктив, , ДокОбъект, ВидРегламентнойОперации);
    		КонецЕсли;
    		Продолжить;
    	КонецЕсли;

    	СуммаАмортизации = 0;

    	Если ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.Линейный Тогда
 
			СуммаГодовойАмортизации = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации/ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации * 12;
    		СуммаАмортизации        = СуммаГодовойАмортизации / 12;

    	ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.Производственный Тогда

    		Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.Количество) Тогда
    			Продолжить;
    		КонецЕсли;

    		Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.ОбъемПродукцииРаботДляВычисленияАмортизации) Тогда
    			Если ВыдаватьСообщения = Истина Тогда
    				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для нематериального актива <" + ВыборкаПоНМА.НематериальныйАктив + "> код <" + СокрЛП(ВыборкаПоНМА.Код) +"> объем продукции для вычисления не определен",
												     ВыборкаПоНМА.НематериальныйАктив, , ДокОбъект, ВидРегламентнойОперации);
    			КонецЕсли; 
    			Продолжить;
    		КонецЕсли;

    		СуммаАмортизации = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации * ВыборкаПоНМА.Количество / ВыборкаПоНМА.ОбъемПродукцииРаботДляВычисленияАмортизации;

    	ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда

    		Если Год(ВыборкаПоНМА.Период) = Год(ДатаРасчета) Тогда
    			СтоимостьИтоговая = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации;
    		Иначе
    			СтоимостьИтоговая = ВыборкаПоНМА.СтоимостьНаНачалоГода;
    		КонецЕсли;
    		СтоимостьИтоговая = ?(СтоимостьИтоговая = NULL, 0, СтоимостьИтоговая);

    		СуммаГодовойАмортизации = СтоимостьИтоговая / ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации * 12;
    		СуммаАмортизации        = СуммаГодовойАмортизации / 12;

    	КонецЕсли;

    	ВсегоОсталосьСписать = ?(ВыборкаПоНМА.СтоимостьКонечныйОстаток    = Null, 0, ВыборкаПоНМА.СтоимостьКонечныйОстаток) - 
    			  			   ?(ВыборкаПоНМА.АмортизацияКонечныйОстаток = Null, 0, ВыборкаПоНМА.АмортизацияКонечныйОстаток);

		//Списываем остаток если он есть
		Разница = 0;
		Разница = Цел(ВсегоОсталосьСписать - СуммаАмортизации);
		
		Если Разница = 0 Тогда 
			СуммаАмортизации  = ВсегоОсталосьСписать;
		Иначе 
			СуммаАмортизации  = Макс(0,Мин(СуммаАмортизации, ВсегоОсталосьСписать));
		КонецЕсли;
		
    	СтрокаАмортизации = ТаблицаАмортизации.Добавить();
		
		СтрокаАмортизации.СтруктурноеПодразделение		= ВыборкаПоНМА.СтруктурноеПодразделение;
    	СтрокаАмортизации.НМА                    		= ВыборкаПоНМА.НематериальныйАктив;
    	СтрокаАмортизации.СчетУчетаБУ           		= ВыборкаПоНМА.СчетУчетаБУ;
    	СтрокаАмортизации.СчетАмортизацииБУ      		= ВыборкаПоНМА.СчетНачисленияАмортизацииБУ;
    	СтрокаАмортизации.НаправлениеАмортизации 		= ВыборкаПоНМА.СпособОтраженияРасходовПоАмортизации;
		СтрокаАмортизации.ПризнакФиксированногоАктива 	= ВыборкаПоНМА.ПризнакФиксированногоАктива;		
    	СтрокаАмортизации.Бух                    		= СуммаАмортизации;
		
	КонецЦикла;

    Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииНМАБухРегл()

//Получает список НМА, учитываемых в указанной организации
// НМА включается в список если последняя организация, в которой он учитывался соответсвует переданной в функцию
//
//Параметры:
//	Период - Дата или момент времени - период на который определяется принадлежность организации
//	Орагнизация - СправочникСсылка.Орагнизации
//	НУ 			- булево - признак необходимости определения отражения объекта в НУ, по умолчанию - ложь 
//	ОбъектНМА	- Массив, СписокЗначений или СправочникСсылка.НематериальныеАктивы - список объектов НМА,
//	по которому необходимо отфильтровать полученный результат
//
//Возвращаемое значение:
// 	Массив ссылок СправочникСсылка.НематериальныеАктивы, если ни обин объект не подобран - пустой массив!
//
Функция ПолучитьСписокНМАОрганизации(Период, Организация, ОбъектНМА = Неопределено) Экспорт
	
	ТекстУсловия = ?(ОбъектНМА = Неопределено,""," И НематериальныйАктив В(&НематериальныйАктив) ");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&Период, Организация = &Организация "+ТекстУсловия+" ) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
		|";
	
	Запрос.УстановитьПараметр("Период",Период );
	Запрос.УстановитьПараметр("Организация",Организация );
	Запрос.УстановитьПараметр("НематериальныйАктив",ОбъектНМА);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		//Нет подходящих объектов
		Возврат Новый массив();
	КонецЕсли; 
	
	ТаблицаОбъектов = Результат.Выгрузить();
	Возврат ТаблицаОбъектов.ВыгрузитьКолонку("НематериальныйАктив");
	
КонецФункции // ПолучитьСписокНМАОрганизации()

///////////////////////////////////////////////////////////////////////////////
// РАСПРЕДЕЛЕНИЕ АМОРТИЗАЦИИ

//Функция получает таблицу значений с указанием списка ОС или НМА и сумм амортизации
//возвращает таблицу значений с распределенными значениями амортизации
//
Функция ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(	ДокОбъект, Отказ, Заголовок, ТабАмортизации, 
															СтруктураШапкиДокумента, ТипУчета, НомерЖурнала, 
															ТекстПроводки = Неопределено, ВидРегламентнойОперации = Неопределено) Экспорт

	ДатаРасчета = ДокОбъект.Дата;

	// определим структуру выходной таблицы
	ТабЗатрат = Новый ТаблицаЗначений;
	ТабЗатрат.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 15, 2));
	ТабЗатрат.Колонки.Добавить("ПризнакФиксированногоАктива", 	Новый ОписаниеТипов("Булево"));	
	ТабЗатрат.Колонки.Добавить("ПризнакПроизводственныхЗатрат", Новый ОписаниеТипов("Булево"));	
	ТабЗатрат.Колонки.Добавить("СчетЗатрат");
	ТабЗатрат.Колонки.Добавить("СчетАмортизации");
	ТабЗатрат.Колонки.Добавить("ОбъектУчета");
	ТабЗатрат.Колонки.Добавить("Субконто1");
	ТабЗатрат.Колонки.Добавить("Субконто2");
	ТабЗатрат.Колонки.Добавить("Субконто3");
	
	ТабЗатрат.Колонки.Добавить("ТекПодразделение");
    ТабЗатрат.Колонки.Добавить("ТекМОЛ");
	
	ТабЗатрат.Колонки.Добавить("СтруктурноеПодразделение");
    ТабЗатрат.Колонки.Добавить("КорСтруктурноеПодразделение");
	
	МассивКоэф = Новый Массив;
    СписокСчетовПроизводства = глЗначениеПеременной("глСписокСчетовПроизводстваБУ"); 
	// цикл по Объектам из ТабАмортизации
	Для Каждого СтрокаТЗ Из ТабАмортизации Цикл

		Если СтрокаТЗ.Сумма=0 тогда
			//Распределять амортизацию не надо, так как распределять нечего.
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.НаправлениеАмортизации) Тогда
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Для объекта " + СтрокаТЗ.ОбъектУчета + " не указаны способы отражения расходов по амортизации",
											СтрокаТЗ.ОбъектУчета, ,ДокОбъект, ВидРегламентнойОперации );
			
			Продолжить;
		КонецЕсли;

		Если СтрокаТЗ.НаправлениеАмортизации.Способы.Количество() = 0 Тогда
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Для объекта " + СтрокаТЗ.ОбъектУчета + " в способах отражения затрат по амортизации нет записей",
											СтрокаТЗ.ОбъектУчета, ,ДокОбъект, ВидРегламентнойОперации );
			
			Продолжить;
		КонецЕсли;

		МассивКоэф.Очистить();
		Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл
			МассивКоэф.Добавить(СтрокаНапр.Коэффициент);
		КонецЦикла;

		МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЗ.Сумма, МассивКоэф, 2);
		Если МассивСумм = Неопределено Тогда
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Для объекта " + СтрокаТЗ.ОбъектУчета + " в способах отражения расходов по амортизации не проставлены коэффициенты",
											СтрокаТЗ.ОбъектУчета, ,ДокОбъект, ВидРегламентнойОперации );
			Продолжить;
		КонецЕсли;

		Если МассивСумм.Количество() <> МассивКоэф.Количество() Тогда
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Для объекта "+ СтрокаТЗ.ОбъектУчета+" в способах отражения затрат по амортизации есть нулевые коэффициенты",
											СтрокаТЗ.ОбъектУчета, ,ДокОбъект, ВидРегламентнойОперации );
			
			Продолжить;
		КонецЕсли;

		КолонкиДокумента = СтрокаТЗ.Владелец().Колонки;
			
		Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл
				НоваяСтрока = ТабЗатрат.Добавить();
				НоваяСтрока.СчетЗатрат						= СтрокаНапр.СчетЗатрат;
				НоваяСтрока.ОбъектУчета						= СтрокаТЗ.ОбъектУчета;
				НоваяСтрока.СчетАмортизации					= СтрокаТЗ.СчетАмортизации;
				НоваяСтрока.ПризнакПроизводственныхЗатрат 	= ПроцедурыБухгалтерскогоУчета.СчетЯвляетсяПроизводственным(НоваяСтрока.СчетЗатрат, СписокСчетовПроизводства);
				
				Если ТипЗнч(СтрокаТЗ.ОбъектУчета) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
					// среди субконто счета ищем, есть ли субконто с типом Подразделения
					Для Каждого ВидСубконтоСчета Из СтрокаНапр.СчетЗатрат.ВидыСубконто Цикл
						
						Индекс = СтрокаНапр.СчетЗатрат.ВидыСубконто.Индекс(ВидСубконтоСчета) + 1;
						
						Если ВидСубконтоСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда
							НоваяСтрока["Субконто" + Индекс] = ?(ЗначениеЗаполнено(СтрокаНапр["Субконто" + Индекс]), СтрокаНапр["Субконто" + Индекс], СтрокаТЗ.ТекущееПодразделение);
						Иначе
							НоваяСтрока["Субконто" + Индекс] = СтрокаНапр["Субконто" + Индекс];
						КонецЕсли;					
						
					КонецЦикла;
					
					НоваяСтрока.ТекПодразделение= СтрокаТЗ.ТекущееПодразделение;
					НоваяСтрока.ТекМОЛ			= СтрокаТЗ.ТекущийМОЛ;
					
				Иначе
					НоваяСтрока.Субконто1		= СтрокаНапр.Субконто1;
					НоваяСтрока.Субконто2		= СтрокаНапр.Субконто2;
					НоваяСтрока.Субконто3		= СтрокаНапр.Субконто3;
				КонецЕсли;			
				
				Если НЕ КолонкиДокумента.Найти("КорСтруктурноеПодразделение") = Неопределено Тогда
					НоваяСтрока.СтруктурноеПодразделение 	= СтрокаТЗ.СтруктурноеПодразделение;
					НоваяСтрока.КорСтруктурноеПодразделение	= СтрокаТЗ.КорСтруктурноеПодразделение;
				Иначе
					НоваяСтрока.СтруктурноеПодразделение 	= СтрокаТЗ.СтруктурноеПодразделение;
					НоваяСтрока.КорСтруктурноеПодразделение	= СтрокаТЗ.СтруктурноеПодразделение;
				КонецЕсли;
				
				НоваяСтрока.ПризнакФиксированногоАктива	= СтрокаТЗ.ПризнакФиксированногоАктива;                				
				НоваяСтрока.Сумма = МассивСумм[СтрокаНапр.НомерСтроки - 1];
		КонецЦикла;

	КонецЦикла;

	Если ТипУчета = "Бух" Тогда

		ДопПараметры = Новый Структура;
		
		//формирование проводок
		Проводки 	= ДокОбъект.Движения.Типовой;
		ПроводкиНУ 	= ДокОбъект.Движения.Налоговый;

		Для Каждого СтрокаЗатрат Из ТабЗатрат Цикл
			
			КолонкиДокумента = СтрокаЗатрат.Владелец().Колонки;
		
			Если НЕ ЗначениеЗаполнено(СтрокаЗатрат.Сумма) тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = Проводки.Добавить();

			Проводка.Период			= ДатаРасчета;
			Проводка.Содержание		= ?(НЕ ЗначениеЗаполнено(ТекстПроводки), "Начислена амортизация", ТекстПроводки);
			Проводка.НомерЖурнала	= НомерЖурнала;
			Проводка.ВидРегламентнойОперации = ВидРегламентнойОперации;
			Проводка.Организация	= СтруктураШапкиДокумента.Организация;
			Проводка.Сумма			= СтрокаЗатрат.Сумма;

			Проводка.СчетДт			= СтрокаЗатрат.СчетЗатрат;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 1, СтрокаЗатрат.Субконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 2, СтрокаЗатрат.Субконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 3, СтрокаЗатрат.Субконто3);

			Проводка.СчетКт			= СтрокаЗатрат.СчетАмортизации;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаЗатрат.СчетАмортизации, Проводка.СубконтоКт, 1, СтрокаЗатрат.ОбъектУчета);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
					Проводка, СтрокаЗатрат.СтруктурноеПодразделение, "Кт");
					
			Если НЕ КолонкиДокумента.Найти("КорСтруктурноеПодразделение") = Неопределено Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаЗатрат.КорСтруктурноеПодразделение, "Дт");
			Иначе
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаЗатрат.СтруктурноеПодразделение, "Дт");
			КонецЕсли;

			Если ТипЗнч(СтрокаЗатрат.ОбъектУчета) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
				Если УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоПодразделениям(СтруктураШапкиДокумента.Дата) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаЗатрат.ТекПодразделение);
				КонецЕсли;	
					
				Если УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоМОЛ(СтруктураШапкиДокумента.Дата) Тогда
		            ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаЗатрат.ТекМОЛ);
				КонецЕсли;
			КонецЕсли;	
				
			// Отражение в НУ
			// по объектам, являющимся ФА, образуется ВР
			// по прочим ОС - ПР
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				ПроводкаНУ = ПроводкиНУ.Добавить();
				
				ПроводкаНУ.Период			= ДатаРасчета;
				ПроводкаНУ.Содержание	= ?(НЕ ЗначениеЗаполнено(ТекстПроводки), "Начислена амортизация по бухг. учету", ТекстПроводки);
				ПроводкаНУ.НомерЖурнала	= НомерЖурнала;
				ПроводкаНУ.ВидРегламентнойОперации = ВидРегламентнойОперации;
				ПроводкаНУ.Организация	= СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Сумма		= СтрокаЗатрат.Сумма;
				
				ПроводкаНУ.СчетДт		= ПланыСчетов.Налоговый.ПрочиеРасходы;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, Справочники.СтатьиЗатрат.АмортизацияФА);
				ПроводкаНУ.ВидУчетаДт   = ?(СтрокаЗатрат.ПризнакФиксированногоАктива, Справочники.ВидыУчетаНУ.ВР,Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ);								
						
				Если НЕ КолонкиДокумента.Найти("КорСтруктурноеПодразделение") = Неопределено Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(ПроводкаНУ, СтрокаЗатрат.КорСтруктурноеПодразделение, "Дт");
				Иначе
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(ПроводкаНУ, СтрокаЗатрат.СтруктурноеПодразделение, "Дт");
				КонецЕсли;
				
				// Заполняем кредитовую часть проводки
				Если СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
					
					Если СтрокаЗатрат.ПризнакФиксированногоАктива Тогда
						СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУВнеоборотногоАктива(СтрокаЗатрат.ОбъектУчета,ДокОбъект.Организация,ДатаРасчета);
						Если Не ЗначениеЗаполнено(СчетКт) Тогда
							СчетКт = ПланыСчетов.Налоговый.ВАВключенныеВСтоимостнойБаланс;
						КонецЕсли;
					Иначе
						СчетКт = ПланыСчетов.Налоговый.ВАНеПодлежащиеАмортизации;
					КонецЕсли;
					
					ПроводкаНУ.СчетКт		= СчетКт;
				    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаЗатрат.ОбъектУчета);					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Перечисления.ВидыДвиженияСтоимостиФА.Амортизация);					
					
					ПроводкаНУ.ВидУчетаКт   = ?(СтрокаЗатрат.ПризнакФиксированногоАктива, Справочники.ВидыУчетаНУ.ВР,Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ);																			
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(ПроводкаНУ, СтрокаЗатрат.СтруктурноеПодразделение, "Кт");
					
				КонецЕсли;	
				
				 // Амортизация, входящая в производственные затраты относится на вычеты через реализованные товары, услуги.
				 // Поэтому для производственных затрат по амортизации Формируем дополнительную проводку по включению амортизация в сумму производственных затрат с видом НУ
				Если СтрокаЗатрат.ПризнакПроизводственныхЗатрат  И СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
					СчетЗатратНУ =  ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СтрокаЗатрат.СчетЗатрат));
					Если НЕ ЗначениеЗаполнено(СчетЗатратНУ) Тогда
						ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Для счета " + СтрокаЗатрат.СчетЗатрат + " не указан соответствующий ему счет НУ.",
											СтрокаТЗ.ОбъектУчета, ,ДокОбъект, ВидРегламентнойОперации );
						Продолжить;					
					КонецЕсли;						
											
					ПроводкаНУ = ПроводкиНУ.Добавить();
					
					ПроводкаНУ.Период			= ДатаРасчета;
					ПроводкаНУ.Содержание	= ?(НЕ ЗначениеЗаполнено(ТекстПроводки), "Амортизация (БУ) включена в производственные затраты", ТекстПроводки);
					ПроводкаНУ.НомерЖурнала	= НомерЖурнала;
					ПроводкаНУ.ВидРегламентнойОперации = ВидРегламентнойОперации;
					ПроводкаНУ.Организация	= СтруктураШапкиДокумента.Организация;
					ПроводкаНУ.Сумма		= СтрокаЗатрат.Сумма;
					
					ПроводкаНУ.СчетДт		= СчетЗатратНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаЗатрат.Субконто1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаЗатрат.Субконто2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаЗатрат.Субконто3);
					ПроводкаНУ.ВидУчетаДт   = ?(СтрокаЗатрат.ПризнакФиксированногоАктива, Справочники.ВидыУчетаНУ.НУ,Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ);								
					
					ПроводкаНУ.СчетКт		= ПланыСчетов.Налоговый.ПрочиеРасходы;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, Справочники.СтатьиЗатрат.АмортизацияФА);
					ПроводкаНУ.ВидУчетаКт   = ПроводкаНУ.ВидУчетаДт;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(ПроводкаНУ, СтрокаЗатрат.СтруктурноеПодразделение, "Кт");
					
					Если НЕ КолонкиДокумента.Найти("КорСтруктурноеПодразделение") = Неопределено Тогда
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(ПроводкаНУ, СтрокаЗатрат.КорСтруктурноеПодразделение, "Дт");
					Иначе
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(ПроводкаНУ, СтрокаЗатрат.СтруктурноеПодразделение, "Дт");
					КонецЕсли;
				КонецЕсли;					
			КонецЕсли;	                                                
		КонецЦикла;
	КонецЕсли;

	Возврат ТабЗатрат;

КонецФункции // ПолучитьРаспределениеАмортизацииПоНаправлениямРегл()

///////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ СОСТОЯНИЯ ОС

//Функция получает стоимость и сумму начисленной амортизации ОС по переданному списку
//возвращает таблицу значений с полученными значениями сумм стоимости и амортизации
//
Функция ОпределитьСтоимостьПоСпискуОС(Организация, СписокОС, Период, ПериодПолученияСтоимостиИАмортизации = Неопределено) Экспорт

	Если ПериодПолученияСтоимостиИАмортизации = Неопределено Тогда
		ПериодПолученияСтоимостиИАмортизации = Период;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("СписокОС",         СписокОС);
	Запрос.УстановитьПараметр("Период",    		  ПериодПолученияСтоимостиИАмортизации);
	Запрос.УстановитьПараметр("НачалоПериода",    Период);
	Запрос.УстановитьПараметр("ДатаНачалаПериода",?(ТипЗнч(Период) = Тип("МоментВремени"), 
	                                              Период.Дата, 
												  Период));
	Запрос.УстановитьПараметр("СубконтоОС",       ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	Запрос.УстановитьПараметр("СубконтоВА",       ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы);
	Запрос.УстановитьПараметр("СнятоСУчета",      Перечисления.ВидыСостоянийОС.СнятоСУчета);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	               |ПОМЕСТИТЬ ВТ_ОС_СнятыеСУчета
	               |ИЗ
	               |	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	               |			&ДатаНачалаПериода,
	               |			Организация = &Организация
	               |				И ОсновноеСредство В (&СписокОС)) КАК СостоянияОСОрганизацииСрезПоследних
	               |ГДЕ
	               |	СостоянияОСОрганизацииСрезПоследних.Состояние = &СнятоСУчета
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТиповойОстатки.Счет КАК Счет,
	               |	ТиповойОстатки.Субконто1 КАК Субконто1,
	               |	ТиповойОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
	               |	ТиповойОстатки.СуммаОстатокКт КАК СуммаОстатокКт
	               |ПОМЕСТИТЬ ВТ_ОС_ТиповойОстатки
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(
	               |			&Период,
				   |			,
				   |			&СубконтоОС,
	               |			Организация = &Организация
	               |				И Субконто1 В (&СписокОС)) КАК ТиповойОстатки
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ТиповойОстатки.Счет КАК Счет,
	               |	ТиповойОстатки.Субконто1 КАК Субконто1,
	               |	ТиповойОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
	               |	ТиповойОстатки.СуммаОстатокКт КАК СуммаОстатокКт
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(
	               |			&Период,
				   |			,
				   |			&СубконтоВА,
	               |			Организация = &Организация
	               |				И Субконто1 В (&СписокОС)) КАК ТиповойОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Счет,
	               |	Субконто1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОС_БУ.ОсновноеСредство КАК ОС_БУ,
	               |	ЕСТЬNULL(ВТ_СтоимостьОС_БУ.СуммаОстатокДт, 0) КАК СтоимостьБУ,
	               |	ЕСТЬNULL(ВТ_АмортизацияОС_БУ.СуммаОстатокКт, 0) КАК АмортизацияБУ,
	               |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость,
	               |	ВЫБОР
	               |		КОГДА ОС_СнятыеСУчета.ОсновноеСредство ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК СнятоСУчета,
	               |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимостьБУ
	               |ИЗ
	               |	РегистрСведений.СчетаУчетаОС.СрезПоследних(
	               |			&НачалоПериода,
	               |			Организация = &Организация
	               |				И ОсновноеСредство В (&СписокОС)) КАК ОС_БУ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	               |				&НачалоПериода,
	               |				Организация = &Организация
	               |					И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	               |		ПО ОС_БУ.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОС_СнятыеСУчета КАК ОС_СнятыеСУчета
	               |		ПО ОС_БУ.ОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	               |				&НачалоПериода,
	               |				Организация = &Организация
	               |					И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	               |		ПО ОС_БУ.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОС_ТиповойОстатки КАК ВТ_СтоимостьОС_БУ
	               |		ПО ОС_БУ.ОсновноеСредство = ВТ_СтоимостьОС_БУ.Субконто1
	               |			И ОС_БУ.СчетУчетаБУ = ВТ_СтоимостьОС_БУ.Счет
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОС_ТиповойОстатки КАК ВТ_АмортизацияОС_БУ
	               |		ПО ОС_БУ.ОсновноеСредство = ВТ_АмортизацияОС_БУ.Субконто1
	               |			И ОС_БУ.СчетНачисленияАмортизацииБУ = ВТ_АмортизацияОС_БУ.Счет";
		
	ТЗ = Запрос.Выполнить().Выгрузить();

	Возврат ТЗ;

КонецФункции // ОпределитьСтоимостьПоСпискуОС()

//Получает документ и дату для указанного состояния основного средства по бух учету
//
// Параметры
//
//
// Вовзаращаемое значение
//  Дата и документ - через указанные параметры процедуры.
//
Процедура ПолучитьДокументБухСостоянияОС(ОсновноеСредство, Организация, Состояние, ДатаСведений, 
											ДокРегистратор, ДатаДокРегистратора) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СостояниеОС", Состояние);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	
	УсловиеОрганизация = "";
	Если ЗначениеЗаполнено(Организация)Тогда
		УсловиеОрганизация = " И СостоянияОСОрганизаций.Организация = &Организация ";		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияОСОрганизаций.ДатаСостояния КАК Дата,
	|	СостоянияОСОрганизаций.Регистратор КАК Документ
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|			СостоянияОСОрганизаций.Организация КАК Организация,
	|			СостоянияОСОрганизаций.Состояние КАК Состояние,
	|			МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|					СостоянияОСОрганизацийСрезПоследних.Организация КАК Организация,
	|					СостоянияОСОрганизацийСрезПоследних.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|					СостоянияОСОрганизацийСрезПоследних.Состояние КАК Состояние,
	|					СостоянияОСОрганизацийСрезПоследних.ДатаСостояния КАК ДатаСостояния
	|				ИЗ
	|					РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|							&ДатаСведений,
	|							ОсновноеСредство = &ОсновноеСредство
	|								" + СтрЗаменить(УсловиеОрганизация, "СостоянияОСОрганизаций.", "") + ") КАК СостоянияОСОрганизацийСрезПоследних
	|				ГДЕ
	|					СостоянияОСОрганизацийСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)) КАК СнятыеСУчетаОС
	|				ПО СостоянияОСОрганизаций.Организация = СнятыеСУчетаОС.Организация
	|					И СостоянияОСОрганизаций.ОсновноеСредство = СнятыеСУчетаОС.ОсновноеСредство
	|					И СостоянияОСОрганизаций.ДатаСостояния < СнятыеСУчетаОС.ДатаСостояния
	|		ГДЕ
	|			СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)
	|			И СостоянияОСОрганизаций.ОсновноеСредство = &ОсновноеСредство
	|			" + УсловиеОрганизация + "
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СостоянияОСОрганизаций.ОсновноеСредство,
	|			СостоянияОСОрганизаций.Организация,
	|			СостоянияОСОрганизаций.Состояние
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СостоянияОСОрганизаций.ОсновноеСредство,
	|			СостоянияОСОрганизаций.Организация,
	|			СостоянияОСОрганизаций.Состояние,
	|			МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния)
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ГДЕ
	|			СостоянияОСОрганизаций.ДатаСостояния <= &ДатаСведений
	|			И (НЕ СостоянияОСОрганизаций.ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							СостоянияОСОрганизаций.ОсновноеСредство
	|						ИЗ
	|							РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|									&ДатаСведений, 
	|									ОсновноеСредство = &ОсновноеСредство
	|									" + СтрЗаменить(УсловиеОрганизация, "СостоянияОСОрганизаций.", "") + ") КАК СостоянияОСОрганизаций
	|						ГДЕ
	|							СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)))
	|			И СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)
	|			" + УсловиеОрганизация + "
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СостоянияОСОрганизаций.ОсновноеСредство,
	|			СостоянияОСОрганизаций.Организация,
	|			СостоянияОСОрганизаций.Состояние) КАК РанееСнятыеСУчета
	|		ПО СостоянияОСОрганизаций.Организация = РанееСнятыеСУчета.Организация
	|			И СостоянияОСОрганизаций.ОсновноеСредство = РанееСнятыеСУчета.ОсновноеСредство
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РанееСнятыеСУчета.ДатаСостояния ЕСТЬ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА СостоянияОСОрганизаций.ДатаСостояния > РанееСнятыеСУчета.ДатаСостояния
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ
	|	И СостоянияОСОрганизаций.ОсновноеСредство = &ОсновноеСредство
	|	" + УсловиеОрганизация + "
	|	И СостоянияОСОрганизаций.ДатаСостояния <= &ДатаСведений
	|	И СостоянияОСОрганизаций.Состояние = &СостояниеОС
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	ВыборкаДоков = Запрос.Выполнить().Выбрать();

	Если ВыборкаДоков.Следующий()  Тогда
		ДокРегистратор      = ВыборкаДоков.Документ;
		ДатаДокРегистратора = ВыборкаДоков.Дата;
	Иначе
		ДокРегистратор      = Неопределено;
		ДатаДокРегистратора = '00010101';
	КонецЕсли;

КонецПроцедуры // ПолучитьДокументБухСостоянияОС()

//Получает документ и дату для указанного состояния основного средства по бух учету
//
// Параметры
//
//
// Вовзаращаемое значение
//  Дата и документ - через указанные параметры процедуры.
//
Функция ПолучитьПоследнееСостояниеОС(Период, ОсновноеСредство, Организация) Экспорт

	ДанныеОСостоянии = Новый Структура("СостояниеОС,Дата,Документ,Событие,НазваниеДокумента,НомерДокумента");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("ОС",          ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 
	|	СостоянияОСОрганизаций.Регистратор КАК Документ,
	|	СостоянияОСОрганизаций.ДатаСостояния КАК Дата,
	|	СостоянияОСОрганизаций.Состояние КАК СостояниеОС,
	|	СобытияОСОрганизаций.Событие,
	|	СобытияОСОрганизаций.НазваниеДокумента,
	|	СобытияОСОрганизаций.НомерДокумента
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|			&Период,
	|			Организация = &Организация 
	|			И ОсновноеСредство = &ОС) КАК СостоянияОСОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
	|		ПО СостоянияОСОрганизаций.Регистратор = СобытияОСОрганизаций.Регистратор 
	|			И СостоянияОСОрганизаций.Период = СобытияОСОрганизаций.Период 
	|			И СостоянияОСОрганизаций.Организация = СобытияОСОрганизаций.Организация 
	|			И СостоянияОСОрганизаций.ОсновноеСредство = СобытияОСОрганизаций.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДоков = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДоков.Следующий() Тогда
		
		ДанныеОСостоянии.Вставить("СостояниеОС"		  , ВыборкаДоков.СостояниеОС);
		ДанныеОСостоянии.Вставить("Дата"			  , ВыборкаДоков.Дата);
		ДанныеОСостоянии.Вставить("Документ"		  , ВыборкаДоков.Документ);
		ДанныеОСостоянии.Вставить("Событие"			  , ВыборкаДоков.Событие);
		ДанныеОСостоянии.Вставить("НазваниеДокумента" , ВыборкаДоков.НазваниеДокумента);
		ДанныеОСостоянии.Вставить("НомерДокумента"	  , ВыборкаДоков.НомерДокумента);

	КонецЕсли;
		
	Возврат ДанныеОСостоянии;
	
КонецФункции // ПолучитьПоследнееСостояниеОС()

// Возвращает из справочника событий ОС первую найденную запись с заданным видом события,
// иначе возвращает пустую ссылку на справочник
//
// Параметры
//  ВидСобытия (Перечисление ВидыСобытийОС): вид события
//
// Возвращаемое значение:
//   элемент справочника событий ОС
//
Функция ПолучитьСобытиеПоОСИзСправочника(ВидСобытия) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСобытияОС", ВидСобытия);
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка,
	|	ВидСобытияОС
	|ИЗ
	|	Справочник.СобытияОС КАК СобытияОС
	|
	|ГДЕ
	|	ВидСобытияОС = &ВидСобытияОС";
	ТаблицаСобытий = Запрос.Выполнить().Выгрузить();

	Если ТаблицаСобытий.Количество()>0 Тогда
		Возврат ТаблицаСобытий[0].Ссылка;

	Иначе
		Возврат Справочники.СобытияОС.ПустаяСсылка();

	КонецЕсли;

КонецФункции // ПолучитьСобытиеПоОСИзСправочника()

// Процедура выполняет стандартные действия при начале выбора состояния ОС в формах документов.
//
// Параметры:
//  ДокументОбъект                   - объект редактируемого документа;
//  ЭлементФормы                     - элемент формы документа, который надо заполнить; 
//  ВидыОпераций                     - вид операций ОС для отбора, значение перечисления ВидыОперацийОС;
//  СтандартнаяОбработка             - булево, признак выполнения стандартной (системной) обработки события,
//
Процедура НачалоВыбораЗначенияСобытийОС(ЭлементФормы, ВидыСобытий = Неопределено, СтандартнаяОбработка, 
										ЗаблокироватьПолученныеВидыСобытий = Ложь) Экспорт

	СтандартнаяОбработка = Ложь;
	ФормаВыбора          = Справочники.СобытияОС.ПолучитьФормуВыбора(,ЭлементФормы,);

	Если ВидыСобытий<>Неопределено Тогда

		Если ЗаблокироватьПолученныеВидыСобытий тогда            
			// Удалим из выбора "неправильные" состояния
			Если ТипЗнч(ВидыСобытий) = Тип("СписокЗначений") Тогда
				ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.ВидСравнения = ВидСравнения.НеВСписке;
			Иначе
				ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.ВидСравнения = ВидСравнения.НеРавно;
			КонецЕсли;
		Иначе
			// Оставим в выборе только "правильные" состояния
			Если ТипЗнч(ВидыСобытий) = Тип("СписокЗначений") Тогда
				ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.ВидСравнения = ВидСравнения.ВСписке;
			Иначе
				ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.ВидСравнения = ВидСравнения.Равно;
			КонецЕсли;
        КонецЕсли;
		ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.Значение         = ВидыСобытий;
		ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.Использование    = Истина;

	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияСостоянияОС()

// Процедура выполняет стандартные действия при начале выбора способов отражения расходов по амортизации формах документов.
//
// Параметры:
//  ДокументОбъект                   - объект редактируемого документа;
//  ЭлементФормы                     - элемент формы документа, который надо заполнить; 
//  ВидыОпераций                     - вид операций ОС для отбора, значение перечисления ВидыОперацийОС;
//  СтандартнаяОбработка             - булево, признак выполнения стандартной (системной) обработки события,
//
Процедура НачалоВыбораЗначенияСпособовОтраженияРасходовПоАмортизации(	ЭлементФормы, Организация = Неопределено, 
																		СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	ФормаВыбора          = Справочники.СпособыОтраженияРасходовПоАмортизации.ПолучитьФормуВыбора(,ЭлементФормы,);

	Если Организация<>Неопределено Тогда
		// Оставим в выборе только записи с организацией из документа и те, в которых организация вообще не указана
		СписокОрганизаций = Новый СписокЗначений;
		СписокОрганизаций.Добавить(Организация);
		СписокОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
		ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения = ВидСравнения.ВСписке;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Значение         = СписокОрганизаций;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Использование    = Истина;

	КонецЕсли;
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ЭлементФормы.Значение;
	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияСпособовОтраженияРасходовПоАмортизации()

// Поцедура проверяет дублирование состояний ОС. 
//  Если определенное состояние было установлено ранее, 
//  устанавливать его второй раз нельзя (в пределах одной организации)
Процедура ПроверкаДублированияЗаписейСостоянийОС(Период, Организация, ТаблицаЗаписей, Отказ, Заголовок) Экспорт

	Если ТаблицаЗаписей.Количество() =0 тогда
		Возврат;
	КонецЕсли;
	
	НаборСостояний		= Новый Массив();
	ОС_ПоСостояниям		= Новый Массив();
	
	Для каждого Состояние из Перечисления.ВидыСостоянийОС Цикл
		НаборСостояний.Добавить(Состояние);
		ОС_ПоСостояниям.Добавить(Новый Массив());
	КонецЦикла;
	
	Для Каждого ТекЗапись Из ТаблицаЗаписей Цикл
		Для А = 1 по НаборСостояний.количество() Цикл
			Если ТекЗапись.Состояние = НаборСостояний[А-1] тогда	
				ОС_ПоСостояниям[А-1].Добавить(ТекЗапись.ОсновноеСредство);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для А = 1 по НаборСостояний.количество() Цикл
		Если ОС_ПоСостояниям[А-1].Количество()>0 тогда
			Запрос = Новый Запрос;
			Если НаборСостояний[А-1] = Перечисления.ВидыСостоянийОС.СнятоСУчета Тогда
				
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				               |	СостоянияОСОрганизаций.ОсновноеСредство,
				               |	СостоянияОСОрганизаций.ДатаСостояния,
				               |	СостоянияОСОрганизаций.Регистратор,
				               |	СостоянияОСОрганизаций.ОсновноеСредство.Код КАК Код
				               |ИЗ
				               |	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
							   |			&Период,
							   |			Организация = &Организация
							   |			И ОсновноеСредство В(&ОсновныеСредства))КАК СостоянияОСОрганизаций
				               |ГДЕ
				               |	СостоянияОСОрганизаций.Состояние = &Состояние";
							   
			Иначе
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СостоянияОСОрганизаций.ОсновноеСредство,
				|	СостоянияОСОрганизаций.ОсновноеСредство.Код КАК Код,
				|	СостоянияОСОрганизаций.ДатаСостояния,
				|	СостоянияОСОрганизаций.Регистратор
				|ИЗ
				|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
				|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
				|			СостоянияОСОрганизаций.Организация КАК Организация,
				|			СостоянияОСОрганизаций.Состояние КАК Состояние,
				|			МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
				|		ИЗ
				|			РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
				|					&Период,
				|					ОсновноеСредство В (&ОсновныеСредства)
				|						И Организация = &Организация) КАК СостоянияОСОрганизаций
				|		ГДЕ
				|			СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)
				|			И СостоянияОСОрганизаций.ОсновноеСредство В(&ОсновныеСредства)
				|			И СостоянияОСОрганизаций.Организация = &Организация
				|		
				|		СГРУППИРОВАТЬ ПО
				|			СостоянияОСОрганизаций.ОсновноеСредство,
				|			СостоянияОСОрганизаций.Организация,
				|			СостоянияОСОрганизаций.Состояние
				|		
				|		ОБЪЕДИНИТЬ ВСЕ
				|		
				|		ВЫБРАТЬ
				|			СостоянияОСОрганизаций.ОсновноеСредство,
				|			СостоянияОСОрганизаций.Организация,
				|			СостоянияОСОрганизаций.Состояние,
				|			МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния)
				|		ИЗ
				|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
				|		ГДЕ
				|			СостоянияОСОрганизаций.ДатаСостояния <= &Период
				|			И (НЕ СостоянияОСОрганизаций.ОсновноеСредство В
				|						(ВЫБРАТЬ
				|							СостоянияОСОрганизаций.ОсновноеСредство
				|						ИЗ
				|							РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(&Период, ОсновноеСредство В (&ОсновныеСредства)
				|								И Организация = &Организация) КАК СостоянияОСОрганизаций
				|						ГДЕ
				|							СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)))
				|			И СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)
				|			И СостоянияОСОрганизаций.Организация = &Организация
				|			И СостоянияОСОрганизаций.ОсновноеСредство В(&ОсновныеСредства)
				|		
				|		СГРУППИРОВАТЬ ПО
				|			СостоянияОСОрганизаций.ОсновноеСредство,
				|			СостоянияОСОрганизаций.Организация,
				|			СостоянияОСОрганизаций.Состояние) КАК РанееСнятыеСУчета
				|		ПО СостоянияОСОрганизаций.Организация = РанееСнятыеСУчета.Организация
				|			И СостоянияОСОрганизаций.ОсновноеСредство = РанееСнятыеСУчета.ОсновноеСредство
				|ГДЕ
				|	ВЫБОР
				|			КОГДА РанееСнятыеСУчета.ДатаСостояния ЕСТЬ NULL 
				|				ТОГДА ИСТИНА
				|			ИНАЧЕ ВЫБОР
				|					КОГДА СостоянияОСОрганизаций.ДатаСостояния > РанееСнятыеСУчета.ДатаСостояния
				|						ТОГДА ИСТИНА
				|					ИНАЧЕ ЛОЖЬ
				|				КОНЕЦ
				|		КОНЕЦ
				|	И СостоянияОСОрганизаций.ОсновноеСредство В(&ОсновныеСредства)
				|	И СостоянияОСОрганизаций.Организация = &Организация
				|	И СостоянияОСОрганизаций.ДатаСостояния <= &Период
				|	И СостоянияОСОрганизаций.Состояние = &Состояние";

			КонецЕсли;
			
			Запрос.УстановитьПараметр("Период",				Период);			   
			Запрос.УстановитьПараметр("Организация",		Организация );
			Запрос.УстановитьПараметр("Состояние",			НаборСостояний[А-1]);
			Запрос.УстановитьПараметр("ОсновныеСредства",	ОС_ПоСостояниям[А-1]);

			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();

			Пока Выборка.Следующий() Цикл
				ОбщегоНазначения.ОшибкаПриПроведении("Для основного средства <"+Строка(Выборка.ОсновноеСредство)+ "> код <" + СокрЛП(Выборка.Код) + "> в организации <"+Строка(Организация)+"> уже зафиксировано состояние <"+Строка(НаборСостояний[А-1])+"> 
				| документом <"+Строка(Выборка.Регистратор)+">. Дата состояния: "+Формат(Выборка.ДатаСостояния,"ДФ=dd.MM.yyyy"),Отказ,Заголовок);
			КонецЦикла;
			
			
				
			
		КонецЕсли;
	КонецЦикла;
	
Конецпроцедуры // ПроверкаДублированияЗаписейСостоянийОС()


///////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ СОСТОЯНИЯ НМА

Функция ОпределитьСтоимостьПоСпискуНМА(Организация, СтруктурноеПодразделение, СписокНМА, Период) Экспорт

	СубконтоНМА = Новый массив();
	СубконтоНМА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",	СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("СписокНМА",					СписокНМА);
	Запрос.УстановитьПараметр("НачалоПериода",				Период);
	Запрос.УстановитьПараметр("СубконтоНМА",				СубконтоНМА);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НМА_БУ.НематериальныйАктив КАК НМА_БУ,
	               |	НМА_БУ.СчетУчетаБУ КАК СчетУчетаБУ,
	               |	НМА_БУ.СчетНачисленияАмортизацииБУ КАК СчетАмортизацииБУ,
	               |	СтоимостьНМА_БУ.СуммаОстатокДт КАК СтоимостьБУ,
	               |	АмортизацияНМА_БУ.СуммаОстатокКт КАК АмортизацияБУ
	               |ИЗ
	               |	РегистрСведений.СчетаУчетаНМА.СрезПоследних(
	               |			&НачалоПериода,
	               |			Организация = &Организация
	               |				И НематериальныйАктив В (&СписокНМА)) КАК НМА_БУ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(
	               |				&НачалоПериода,
	               |				,
	               |				&СубконтоНМА,
	               |				Организация = &Организация
				   |					И СтруктурноеПодразделение = &СтруктурноеПодразделение
	               |					И Субконто1 В (&СписокНМА)) КАК СтоимостьНМА_БУ
	               |		ПО НМА_БУ.НематериальныйАктив = СтоимостьНМА_БУ.Субконто1
	               |			И НМА_БУ.СчетУчетаБУ = СтоимостьНМА_БУ.Счет
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(
	               |				&НачалоПериода,
	               |				,
	               |				&СубконтоНМА,
	               |				Организация = &Организация
				   |					И СтруктурноеПодразделение = &СтруктурноеПодразделение
	               |					И Субконто1 В (&СписокНМА)) КАК АмортизацияНМА_БУ
	               |		ПО НМА_БУ.НематериальныйАктив = АмортизацияНМА_БУ.Субконто1
	               |			И НМА_БУ.СчетНачисленияАмортизацииБУ = АмортизацияНМА_БУ.Счет
	               |";
	
	ТЗ = Запрос.Выполнить().Выгрузить();

	ЧисловыеКолонки = Новый Структура("СтоимостьБУ,АмортизацияБУ");

	Для каждого СтрокаТЗ из ТЗ цикл

		Для каждого Колонка из ЧисловыеКолонки цикл

			Если СтрокаТЗ[Колонка.Ключ] = Null тогда
				СтрокаТЗ[Колонка.Ключ] = 0;
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Возврат ТЗ;

КонецФункции // ОпределитьСтоимостьПоСпискуНМА()

// Поцедура проверяет дублирование состояний НМА. 
//  Если определенное состояние было установлено ранее, устанавливать его 
//  второй раз нельзя (в пределах одной организации)
Процедура ПроверкаДублированияЗаписейСостоянийНМА(Регистратор, Организация, ТаблицаЗаписей, Отказ, Заголовок) Экспорт
	
	Если ТаблицаЗаписей.Количество() =0 тогда
		Возврат;
	КонецЕсли;
	
	НаборСостояний		= Новый Массив();
	НМА_ПоСостояниям	= Новый Массив();
	
	Для каждого Состояние из Перечисления.ВидыСостоянийНМА Цикл
		НаборСостояний.Добавить(Состояние);
		НМА_ПоСостояниям.Добавить(Новый массив());
	КонецЦикла;
	
	Для Каждого ТекЗапись из ТаблицаЗаписей Цикл
		Для А = 1 по НаборСостояний.количество() Цикл
			Если ТекЗапись.Состояние = НаборСостояний[А-1] тогда	
				НМА_ПоСостояниям[А-1].Добавить(ТекЗапись.НематериальныйАктив);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	
	Для А = 1 по НаборСостояний.Количество() Цикл
		Если НМА_ПоСостояниям[А-1].Количество()>0 тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив,
			|	СостоянияНМАОрганизацийСрезПоследних.Регистратор,
			|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив.Код КАК Код
			|ИЗ
			|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
			|			,
			|			Организация = &Организация
			|				И НематериальныйАктив В (&НематериальныеАктивы)
			|				И Состояние = &Состояние
			|				И (НЕ Регистратор = &ТекущийРегистратор)) КАК СостоянияНМАОрганизацийСрезПоследних";

    		Запрос.УстановитьПараметр("Организация",			Организация );
			Запрос.УстановитьПараметр("Состояние",				НаборСостояний[А-1]);
			Запрос.УстановитьПараметр("НематериальныеАктивы",	НМА_ПоСостояниям[А-1]);
			Запрос.УстановитьПараметр("ТекущийРегистратор",		Регистратор);
			Результат = Запрос.Выполнить();
			Выборка	  = Результат.Выбрать();

			Пока Выборка.Следующий() Цикл
				ОбщегоНазначения.ОшибкаПриПроведении("Для НМА <"+Строка(Выборка.НематериальныйАктив)+"> код <" + СокрЛП(Выборка.Код) + "> в организации <"+Строка(Организация)+"> уже зафиксировано состояние <"+Строка(НаборСостояний[А-1])+"> 
				| документом <"+Строка(Выборка.Регистратор)+">. Дата состояния: "+Формат(Выборка.Регистратор.Дата,"ДФ=dd.MM.yyyy"),Отказ,Заголовок);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверкаДублированияЗаписейСостоянийНМА()

///////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ СТОИМОСТИ АКТИВОВ

// Функция расчитывает стоимость объекта строительства по разным видам учета.
// Возвращает структуру со значениями стоимостей по видам учета, поля:
// - СтоимостьБУ
// - СтоимостьНУ
//
Функция РасчитатьСтоимостьОбъектаСтроительства(ОтражатьВБухгалтерскомУчете,
                                               ОтражатьВНалоговомУчете = Ложь,
                                               СчетУчетаОбъектаСтроительстваБУ,
                                               СчетУчетаОбъектаСтроительстваНУ = Неопределено,
                                               ОбъектСтроительства,
                                               Организация,
                                               Период) Экспорт

	СтруктураСтоимость = Новый Структура;
	СтруктураСтоимость.Вставить("СтоимостьБУ",    0);
	СтруктураСтоимость.Вставить("СтоимостьНУ",    0);

	ПорядокСубконто = Новый Массив();
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОбъектыСтроительства);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекОрганизация",      Организация);
	Запрос.УстановитьПараметр("ТекСчетБУ",           СчетУчетаОбъектаСтроительстваБУ);
	Запрос.УстановитьПараметр("ТекСчетНУ",           СчетУчетаОбъектаСтроительстваНУ);
	Запрос.УстановитьПараметр("ОбъектСтроительства", ОбъектСтроительства);
	Запрос.УстановитьПараметр("ПорядокСубконто",     ПорядокСубконто);
	Запрос.УстановитьПараметр("Период",              Новый Граница(Период, ВидГраницы.Включая));
	
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	ТиповойОстатки.СуммаОстатокДт КАК СтоимостьБУ,
	|	НалоговыйОстаткиНУ.СуммаОстатокДт КАК СтоимостьНУ
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&Период, Счет = &ТекСчетБУ, &ПорядокСубконто, Субконто1 = &ОбъектСтроительства И Организация = &ТекОрганизация) КАК ТиповойОстатки	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&Период, Счет = &ТекСчетНУ, &ПорядокСубконто, Субконто1 = &ОбъектСтроительства И Организация = &ТекОрганизация) КАК НалоговыйОстаткиНУ
	|		ПО ТиповойОстатки.Субконто1 = НалоговыйОстаткиНУ.Субконто1";
	
	ТЗ = Запрос.Выполнить().Выгрузить();

	Если ТЗ.Количество() > 0 Тогда

		СтруктураСтоимость.Вставить("СтоимостьБУ" , ТЗ.Итог("СтоимостьБУ"));
		СтруктураСтоимость.Вставить("СтоимостьНУ" , ТЗ.Итог("СтоимостьНУ"));
		
	КонецЕсли;

	Возврат СтруктураСтоимость;

КонецФункции // РасчитатьСтоимостьОбъектаСтроительства()


// Функция расчитывает стоимость объекта модернизации по разным видам учета.
// Возвращает структуру со значениями стоимостей по видам учета, поля:
// - СтоимостьБУ
// - СтоимостьНУ
//
Функция РасчитатьСтоимостьОбъектаМодернизации(ОтражатьВБухгалтерскомУчете,
                                               ОтражатьВНалоговомУчете = Ложь,
                                               СчетУчетаОбъектаМодернизацииБУ,
                                               СчетУчетаОбъектаМодернизацииНУ = Неопределено,
                                               ОбъектМодернизации,
                                               Организация,
                                               Период) Экспорт

	СтруктураСтоимость = Новый Структура;
	СтруктураСтоимость.Вставить("СтоимостьБУ",    0);
	СтруктураСтоимость.Вставить("СтоимостьНУ",    0);

	ПорядокСубконто = Новый Массив();
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекОрганизация",      Организация);
	Запрос.УстановитьПараметр("ТекСчетБУ",           СчетУчетаОбъектаМодернизацииБУ);
	Запрос.УстановитьПараметр("ТекСчетНУ",           СчетУчетаОбъектаМодернизацииНУ);
	Запрос.УстановитьПараметр("ОбъектМодернизации",  ОбъектМодернизации);
	Запрос.УстановитьПараметр("ПорядокСубконто",     ПорядокСубконто);
	Запрос.УстановитьПараметр("Период",              Период);
	
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	ТиповойОстатки.СуммаОстатокДт КАК СтоимостьБУ,
	|	НалоговыйОстаткиНУ.СуммаОстатокДт КАК СтоимостьНУ
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&Период, Счет = &ТекСчетБУ, &ПорядокСубконто, Субконто1 = &ОбъектМодернизации И Организация = &ТекОрганизация) КАК ТиповойОстатки	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&Период, Счет = &ТекСчетНУ, &ПорядокСубконто, Субконто1 = &ОбъектМодернизации И Организация = &ТекОрганизация) КАК НалоговыйОстаткиНУ
	|		ПО ТиповойОстатки.Субконто1 = НалоговыйОстаткиНУ.Субконто1";
	
	ТЗ = Запрос.Выполнить().Выгрузить();

	Если ТЗ.Количество() > 0 Тогда

		СтруктураСтоимость.Вставить("СтоимостьБУ" , ТЗ.Итог("СтоимостьБУ"));
		СтруктураСтоимость.Вставить("СтоимостьНУ" , ТЗ.Итог("СтоимостьНУ"));
		
	КонецЕсли;

	Возврат СтруктураСтоимость;

КонецФункции // РасчитатьСтоимостьОбъектаСтроительства()


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ТАБЛИЧНЫХ ЧАСТЕЙ ДОКУМЕНТОВ ПО ОС

// Процедура проверяет наличие одних и тех же основных средств в табличной
// части "Основные средства" и выдает сообщение об ошибке при проведении.
//
Процедура ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок) Экспорт
	
	ТаблицаДублей = ТаблицаПоОС.Скопировать();
	
	// Подсчитываем количество повторений.
	ТаблицаДублей.Колонки.Добавить("КоличествоПовторений");
	ТаблицаДублей.ЗаполнитьЗначения(1, "КоличествоПовторений");
	ТаблицаДублей.Свернуть("ОсновноеСредство", "КоличествоПовторений");
	
	// Если количество повторений > 1, выдаем сообщение об ошибке.
	Если ?(ТаблицаДублей.Количество() > 0, ТаблицаДублей.Итог("КоличествоПовторений") / ТаблицаДублей.Количество(), 0) > 1 Тогда
		
		ТекстСообщенияОбОшибке = "";
		
		// Цикл по каждому найденному повторению.
		Для Каждого СтрокаТаблицыДублей Из ТаблицаДублей Цикл
			
			Если СтрокаТаблицыДублей.КоличествоПовторений = 1 Тогда
				Продолжить; // повторений нет.
			КонецЕсли;
			
			// Добавим перевод строки, если требуется.
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + ?(НЕ ЗначениеЗаполнено(ТекстСообщенияОбОшибке), "", "
			                                                                            |");
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке
			                       + "В строках №№ "; 
								   
			// Выводим номера строк.
			СписокНомеровСтрок = "";
			МассивСтрок = ТаблицаПоОС.НайтиСтроки(Новый Структура("ОсновноеСредство", СтрокаТаблицыДублей.ОсновноеСредство));
			Для Каждого Строка Из МассивСтрок Цикл
				СписокНомеровСтрок = СписокНомеровСтрок + ?(НЕ ЗначениеЗаполнено(СписокНомеровСтрок), "", ", ") + Строка.НомерСтроки;
			КонецЦикла;
			
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке
			                       + СписокНомеровСтрок
			                       + " табличной части ""Основные средства"" указано одно и то же основное средство.";
								   
		КонецЦикла;
														  
		ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщенияОбОшибке, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДублиОС()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ЗАПОЛНЕНИ ДОКУМЕНТОВ ПО ОС

// Функция заполняет краткий состав МОЛ или подразделений.
//  
// Параметры:
//  ТЧДокумента 		- Табличная часть документа 
//  КолонкаЗаполнения   - Строка, наименование колокни заполнения
//
Функция ЗаполнитьКраткийСоставДокументаОСМОЛПодразделения(ТЧДокумента, КолонкаЗаполнения, ЗаполнятьПоМол) Экспорт

	КраткийСоставДокумента = "";
	
	Если ЗаполнятьПоМол Тогда 
		Для каждого СтрокаТЧ Из ТЧДокумента Цикл
			
			ФИОФизЛица = ОбщегоНазначения.ФамилияИнициалыФизЛица(СтрокаТЧ[КолонкаЗаполнения]);
			Если Найти(КраткийСоставДокумента, ФИОФизЛица) = 0 Тогда
				
				Если СтрДлина(КраткийСоставДокумента) < 250 Тогда
					КраткийСоставДокумента = КраткийСоставДокумента + ", " + ФИОФизЛица;
				Иначе
					КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
					Прервать;
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЦикла;
	Иначе 
		Для каждого СтрокаТЧ Из ТЧДокумента Цикл
			
			Подразделение = СокрЛП(СтрокаТЧ[КолонкаЗаполнения].Наименование);
			Если Найти(КраткийСоставДокумента, Подразделение) = 0 Тогда
				
				Если СтрДлина(КраткийСоставДокумента) < 250 Тогда
					КраткийСоставДокумента = КраткийСоставДокумента + ", " + Подразделение;
				Иначе
					КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
					Прервать;
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЦикла;

	КонецЕсли;
	
	Если Лев(КраткийСоставДокумента,2) = ", " Тогда
		ДлинаСтроки = СтрДлина(КраткийСоставДокумента);
		Если ДлинаСтроки < 250 Тогда
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3)
		Иначе
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат КраткийСоставДокумента;
	
КонецФункции // ЗаполнитьКраткийСоставДокумента()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ТАБЛИЧНЫХ ЧАСТЕЙ ДОКУМЕНТОВ ПО НМА

// Процедура проверяет наличие дублей строк в таб. части документа.
// Нельзя указывать одно и тоже НМА в таб. части дважды.
//
Процедура ПроверитьДублиНМА(ТаблицаПоНМА, Отказ, Заголовок) Экспорт

	СписокДублей = Новый Соответствие;
	СтруктПоиска = Новый Структура;
	ЕстьДубли    = Ложь;

	Для Каждого СтрокаТЧ Из ТаблицаПоНМА Цикл

		СтруктПоиска.Вставить( "НематериальныйАктив", СтрокаТЧ.НематериальныйАктив);
		НаборСтрок = ТаблицаПоНМА.НайтиСтроки(СтруктПоиска);

		Если НаборСтрок.Количество() <= 1 Тогда
			Продолжить;
		КонецЕсли;

		ЕстьДубли = Истина;

		// Надо выдать сообщение об ошибке
		Если СписокДублей[СтрокаТЧ.НематериальныйАктив] = Неопределено Тогда

			СписокДублей.Вставить(СтрокаТЧ.НематериальныйАктив, 0);
			ТекстОшибки = "Дублируется нематериальный актив """ + СтрокаТЧ.НематериальныйАктив + """ в строках №№ ";

			Для Каждого СтрокаНабора Из НаборСтрок Цикл
				ТекстОшибки = ТекстОшибки + " " + СтрокаНабора.НомерСтроки + ",";
			КонецЦикла;

			ТекстОшибки = Лев( ТекстОшибки, СтрДлина(ТекстОшибки) - 1);
			ОбщегоНазначения.ОшибкаПриПроведении(ТекстОшибки, Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;
    		
КонецПроцедуры // ПроверитьДублиНМА()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАСЧЕТА СУММЫ СПИСАНИЯ РЕЗЕРВА ПО ПЕРЕОЦЕНКЕ

// Получает амортизацию за период и остаточную стоимость основного средства.
//
// Параметры
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//  Организация									- СправочникСсылка.Организации - организация,
//												  	для основных средств которго будет получена информация.	
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                	нужно рассчитать амортизацию.
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с данными об амортизации ОС, состоит из колонок:
//		ОС				 			- СправочникСсылка.ОсновныеСредства
//		АмортизацияЗаМесяц 			- Число, амортизация за месяц
//		СтоимостьОС				 	- Число, остаточная стоимость основного средства.
//
Функция ПолучитьТекДанныеОСБУ(ДатаРасчета, Организация, СтруктурноеПодразделение, ОсновноеСредство = Неопределено) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОС",							Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаАмортизации.Колонки.Добавить("АмортизацияЗаМесяц",      		ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СтоимостьОС",     				ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СтоимостьОСНаКонецМесяца",     ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2)); // для списания резерва в случае, если параметры амортизации применяются в месяце их изменения и для списания остатка резерва в случае если ОС полностью самортизировано
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоГода",                	НачалоГода(ДатаРасчета));
	Запрос.УстановитьПараметр("Организация",              	Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", 	СтруктурноеПодразделение);
	
	Запрос.УстановитьПараметр("НачалоПериода",             НачалоМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("КонецПериода",              КонецМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("Период",                    ДатаРасчета);
	Запрос.УстановитьПараметр("СнятоСУчета",               Перечисления.ВидыСостоянийОС.СнятоСУчета);
	
	Если ОсновноеСредство = Неопределено Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		               |ИЗ
		               |	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Период, ) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
		               |ГДЕ
		               |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Организация = &Организация
		               |	И ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СтруктурноеПодразделение = &СтруктурноеПодразделение";
		ОсновноеСредство = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	ТекстУсловия = " И ОсновноеСредство В (&ОсновноеСредство)";
	ТекстУсловияПереоценки = " И ВнеоборотныйАктив В (&ОсновноеСредство)"; 
	
	СубконтоОС = Новый Массив();
	СубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	Запрос.УстановитьПараметр("СубконтоОС", СубконтоОС);
     
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПоложительныеПереоценкиОС.ВнеоборотныйАктив КАК ОсновноеСредство,
	               |	СУММА(ПоложительныеПереоценкиОС.СуммаПереоценкиАмортизацииПриход) КАК СуммаПереоценкиАмортизации
	               |ПОМЕСТИТЬ ВТ_ПоложительныеПереоценкиОС
	               |ИЗ
	               |	РегистрНакопления.ПереоценкаВнеоборотныхАктивов.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			,
	               |			Организация = &Организация
	               |				И СтруктурноеПодразделение = &СтруктурноеПодразделение " +ТекстУсловияПереоценки+ ") КАК ПоложительныеПереоценкиОС
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоложительныеПереоценкиОС.ВнеоборотныйАктив
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	               |ПОМЕСТИТЬ ВТ_СнятыеСУчета
	               |ИЗ
	               |	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(&Период, Организация = &Организация) КАК СостоянияОСОрганизаций
	               |ГДЕ
	               |	СостоянияОСОрганизаций.Состояние = &СнятоСУчета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	               |ПОМЕСТИТЬ ВТ_НачислениеАмортизацииБухгалтерскийУчетСрезПоследних
	               |ИЗ
	               |	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	               |			&НачалоПериода,
	               |			Организация = &Организация " + ТекстУсловия + ") КАК НачислениеАмортизацииБухгалтерскийУчетСрезПоследних
	               |ГДЕ
	               |	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство
	               |ПОМЕСТИТЬ ВТ_ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	               |ИЗ
	               |	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	               |ГДЕ
	               |	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.Организация = &Организация
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	               |	СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ,
	               |	СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ
	               |ПОМЕСТИТЬ ВТ_СчетаУчетаОсновныхСредствСрезПоследних
	               |ИЗ
	               |	РегистрСведений.СчетаУчетаОС.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК СчетаУчетаОсновныхСредствСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	               |	СУММА(ЕСТЬNULL(АмортизацияОС_БУ.СуммаОборотДт, 0)) КАК АмортизацияОборотПеремещения
	               |ПОМЕСТИТЬ ВТ_ОборотПеремещения
	               |ИЗ
	               |	ВТ_НачислениеАмортизацииБухгалтерскийУчетСрезПоследних КАК ВТ_НачислениеАмортизацииБухгалтерскийУчетСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних КАК ВТ_ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	               |		ПО ВТ_НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ВТ_ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаУчетаОсновныхСредствСрезПоследних КАК ВТ_СчетаУчетаОсновныхСредствСрезПоследних
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Регистратор, , , &СубконтоОС, Организация = &Организация) КАК АмортизацияОС_БУ
	               |			ПО ВТ_СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = АмортизацияОС_БУ.Субконто1
	               |				И ВТ_СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ = АмортизацияОС_БУ.Счет
	               |		ПО ВТ_НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ВТ_СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СнятыеСУчета КАК СнятыеСУчета
	               |		ПО ВТ_НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СнятыеСУчета.ОсновноеСредство
	               |ГДЕ
	               |	СнятыеСУчета.ОсновноеСредство ЕСТЬ NULL 
	               |	И ТИПЗНАЧЕНИЯ(АмортизацияОС_БУ.Регистратор) = ТИПЗНАЧЕНИЯ(Значение(Документ.ПеремещениеОС.ПустаяСсылка))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	               |	ЕСТЬNULL(СтоимостьОС_БУ.СуммаНачальныйОстатокДт, 0) КАК СтоимостьНачальныйОстаток,
	               |	ЕСТЬNULL(СтоимостьОС_БУ.СуммаКонечныйОстатокДт, 0) КАК СтоимостьКонечныйОстаток,
	               |	ЕСТЬNULL(АмортизацияОС_БУ.СуммаНачальныйОстатокКт, 0) КАК АмортизацияНачальныйОстаток,
	               |	ЕСТЬNULL(АмортизацияОС_БУ.СуммаКонечныйОстатокКт, 0) КАК АмортизацияКонечныйОстаток,
	               |	ЕСТЬNULL(ПоложительныеПереоценкиОС.СуммаПереоценкиАмортизации, 0) КАК СуммаПереоценкиАмортизации,
	               |	ЕСТЬNULL(АмортизацияОС_БУ.СуммаОборотКт, 0) - ЕСТЬNULL(ВТ_ОборотПеремещения.АмортизацияОборотПеремещения, 0) КАК АмортизацияОборот,
	               |	ЕСТЬNULL(СтоимостьОС_БУ.СуммаНачальныйОстатокДт, 0) - ЕСТЬNULL(АмортизацияОС_БУ.СуммаНачальныйОстатокКт, 0) КАК СтоимостьБУ,
	               |	ЕСТЬNULL(СтоимостьОС_БУ.СуммаКонечныйОстатокДт, 0) - ЕСТЬNULL(АмортизацияОС_БУ.СуммаКонечныйОстатокКт, 0) КАК СтоимостьБУНаКонецМесяца
	               |ИЗ
	               |	ВТ_НачислениеАмортизацииБухгалтерскийУчетСрезПоследних КАК ВТ_НачислениеАмортизацииБухгалтерскийУчетСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних КАК ВТ_ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	               |		ПО ВТ_НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ВТ_ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаУчетаОсновныхСредствСрезПоследних КАК ВТ_СчетаУчетаОсновныхСредствСрезПоследних
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , , &СубконтоОС, Организация = &Организация) КАК СтоимостьОС_БУ
	               |			ПО ВТ_СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = СтоимостьОС_БУ.Субконто1
	               |				И ВТ_СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ = СтоимостьОС_БУ.Счет
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , , &СубконтоОС, Организация = &Организация) КАК АмортизацияОС_БУ
	               |				ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОборотПеремещения КАК ВТ_ОборотПеремещения
	               |				ПО АмортизацияОС_БУ.Субконто1 = ВТ_ОборотПеремещения.ОсновноеСредство
	               |			ПО ВТ_СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = АмортизацияОС_БУ.Субконто1
	               |				И ВТ_СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ = АмортизацияОС_БУ.Счет
	               |		ПО ВТ_НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ВТ_СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СнятыеСУчета КАК СнятыеСУчета
	               |		ПО ВТ_НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СнятыеСУчета.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоложительныеПереоценкиОС КАК ПоложительныеПереоценкиОС
	               |		ПО ВТ_НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПоложительныеПереоценкиОС.ОсновноеСредство
	               |ГДЕ
	               |	СнятыеСУчета.ОсновноеСредство ЕСТЬ NULL ";
	
	
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();

	Пока ВыборкаПоОС.Следующий() Цикл

		СтрокаАмортизации = ТаблицаАмортизации.Добавить();

		СтрокаАмортизации.ОС = ВыборкаПоОС.ОсновноеСредство;
		СтрокаАмортизации.СтоимостьОС = ВыборкаПоОС.СтоимостьБУ;
		СтрокаАмортизации.СтоимостьОСНаКонецМесяца = ВыборкаПоОС.СтоимостьБУНаКонецМесяца;
		
		// т.к. сумма переоценки амортизации всегда идет с минусом, нужно вычесть амортизация с минусом
		СтрокаАмортизации.АмортизацияЗаМесяц = ВыборкаПоОС.АмортизацияОборот - (- ВыборкаПоОС.СуммаПереоценкиАмортизации);								
	КонецЦикла;	
		
	Возврат ТаблицаАмортизации;

КонецФункции // ПолучитьТекДанныеОСБУ()

// Функция рассчитывает сумму списываемого резерва по переоценке основных средств.
//  
// Параметры:
//  Дата 		- Дата, период расчета
//  Организация - СправочникСсылка.Организации, организация, 
//					по основным средствам которого будет производиться расчет.
//  ТаблицаОС 	- ТаблицаЗначений, таблица, содержащая информацию об основных средствах,
//					для которых будет производится расчет
//     Должна содержать колонки:
//       ОС 				 - СправочникССылка.ОсновынеСредства,
//       АмортизацияЗаМесяц  - Число, сумма амортизации за период,
//       СтоимостьОС		 - Число, сумма остаточной стоимости основного средства. 
//
// Возвращаемое значение:
//  ТаблицаЗначений, состоит из
//   ОС 					- СправочникСсылка.ОсновныеСредства
//   СуммаРезерваКСписанию 	- Число, рассчитанная сума резерва.
//
Функция РасчетСуммыСписываемогоРезерваПоПереоценке(Дата, Организация, ТаблицаОС, ВыдаватьСообщения = Ложь, ДокОбъект = Неопределено) Экспорт
	
	ТаблицаРезервКСписанию = Новый ТаблицаЗначений;
	ТаблицаРезервКСписанию.Колонки.Добавить("ОС", 					 Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаРезервКСписанию.Колонки.Добавить("СуммаРезерваКСписанию", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	СписокОС = ТаблицаОС.ВыгрузитьКолонку("ОС");
			
	// получим сумму списанного резерва за тек. месяц
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонПериода", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойОбороты.Субконто1 КАК ОС,
	|	ТиповойОбороты.СуммаОборотДт КАК СписанныйРезервЗаМесяц
	|
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(&НачПериода, &КонПериода, , 
	|		Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.РезервНаПереоценкуОсновныхСредств), , 
	|		Организация = &Организация И Субконто1 В (&СписокОС), 
	|		КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.НераспределеннаяПрибыльНепокрытыйУбытокОтчетногоГода), ) КАК ТиповойОбороты
	|";
	
	ТаблицаСписанныйРезерв 					= Запрос.Выполнить().Выгрузить();
	ПрименятьПараметрыАмортизацииВТекМесяце = ПолучитьПризнакПримененияПараметровАмортизацииВТекМесяце(Дата, Организация); 
	
	// получим остаток резерва на переоценку   	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойОстаткиИОбороты.Субконто1 КАК ОС,
	|	ТиповойОстаткиИОбороты.СуммаНачальныйОстатокКт КАК ОстатокРезерваНаНачало,
	|	ТиповойОстаткиИОбороты.СуммаКонечныйОстатокКт КАК ОстатокРезерваНаКонец
	|
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&НачПериода, &КонПериода, , , 
	|		Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.РезервНаПереоценкуОсновныхСредств), , 
	|		Организация = &Организация И Субконто1 В (&СписокОС)) КАК ТиповойОстаткиИОбороты
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();	
	
	//установим вид регламентной операции, в случае если проуедура вызывается из 
	//документа "Закрытие месяца", в ошибки записывалась соответсвующая операция
	
	ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеРезерваПоПереоценкеОСБУ;	
	
	Пока Выборка.Следующий() Цикл
		
		ТекОС = Выборка.ОС;
		
		СтрокаСписанныйРезерв = ТаблицаСписанныйРезерв.Найти(ТекОС, "ОС");
		
		Если СтрокаСписанныйРезерв <> Неопределено Тогда
			Если СтрокаСписанныйРезерв.СписанныйРезервЗаМесяц <> 0 Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Для основного средства """ + ТекОС + """ уже выполнялось списание резерва по переоценке!",
														ТекОС,, ДокОбъект,ВидРегламентнойОперации, Ложь);
				
				Продолжить;
			КонецЕсли;	
		КонецЕсли;	
			
		Если Выборка.ОстатокРезерваНаНачало <= 0 И Выборка.ОстатокРезерваНаКонец<= 0 Тогда
			// нет положительного остатка резерва по переоценке, значит переходим к следующему ОС
			Продолжить;
		КонецЕсли;
		
		СтрокаОС = ТаблицаОС.Найти(ТекОС, "ОС");
		// В случае если ПрименятьПараметрыАмортизацииВТекМесяце = истина, амортизация объекта уже закончена, а последняя сумма резерва еще имеется
		Если СтрокаОС.АмортизацияЗаМесяц = 0 И НЕ ПрименятьПараметрыАмортизацииВТекМесяце Тогда
			Если ВыдаватьСообщения Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Списание резерва по переоценке: Для основного средства """ + СтрокаОС.ОС + """ не начислена амортизация за текущий месяц!",
														ТекОС,,ДокОбъект,ВидРегламентнойОперации);
				
			КонецЕсли;	
			Продолжить;
		КонецЕсли;
		
		Если ПрименятьПараметрыАмортизацииВТекМесяце Тогда
			// коэффициент не изменяется в зависимости от настройки применяетбпараметрыАмортизацииВтекМесяце
			// (так как такой расчет был реализован изначально и мы не изменяем его сейчас), но в последнем месяце мы должны списать всю сумму остатка,
			// поскольку дальнейшеного начисления амортизации не будет
			Если СтрокаОС.СтоимостьОСНаКонецМесяца = 0 Тогда
				КоэффициентРаспределения = 1;
			Иначе	
				КоэффициентРаспределения = ?(СтрокаОС.СтоимостьОС<>0, СтрокаОС.АмортизацияЗаМесяц/СтрокаОС.СтоимостьОС, 1);
			КонецЕсли;
		Иначе	
			КоэффициентРаспределения = ?(СтрокаОС.СтоимостьОС<>0, СтрокаОС.АмортизацияЗаМесяц/СтрокаОС.СтоимостьОС, 1);
		КонецЕсли;
		
		СуммаРезерваКСписанию = 0;
		СуммаРезерваКСписанию = КоэффициентРаспределения * Выборка.ОстатокРезерваНаНачало;
		
		СтрокаРезервОС = ТаблицаРезервКСписанию.Добавить();
		СтрокаРезервОС.ОС = ТекОС;
		СтрокаРезервОС.СуммаРезерваКСписанию = СуммаРезерваКСписанию;
						
	КонецЦикла;	
	
	Возврат ТаблицаРезервКСписанию;
	
КонецФункции	

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ТАБЛИЧНЫХ ЧАСТЕЙ ОС

// позже перенести в общий модуль
// Открывает форму обработки для подготовки списка работников, отобранного по указанным пользователем критериям
//
// Владелец - форма, для которой требуется вызвать обработку
// ДатаАктуальности - дата, по состоянию на которую осматривается список работников
// ИмяРегистра - строка, возможны 2 значения - "РаботникиОрганизаций" или "Работники" - определяет
//               какие работники будут отбираться - по регл. или по упр. учету
// Организация - ссылка на организацию (может быть в том числе обособленным подразделением), если передана пустая ссылка, выбираются 
//					работники всех организаций
// Подразделение - ссылка на подразделение, если передана пустая ссылка, выбираются 
//					работники всех подразделений
// 
Процедура ОткрытьФормуОтбораСпискаОС(Владелец, ЭлементФормы, ДатаАктуальности, Организация, СтруктурноеПодразделение) Экспорт
	
	ФормированиеСпискаОС = Обработки.ФормированиеСпискаОсновныхСредств.Создать();
	ФормированиеСпискаОС.ДатаАктуальности = ДатаАктуальности;
		
	// подготовим Построитель отчета к работе
	ФормированиеСпискаОС.ЗаполнитьНачальныеНастройки();
	
	СтруктураНедоступныхОтборов = Новый Структура;
	Если ФормированиеСпискаОС.ПостроительОтчета.Отбор.Количество() = 0 Тогда 
		ФормированиеСпискаОС.ЗаполнитьНачальныеНастройки();	
	КонецЕсли;
	
	// Переданную организацию и подразделение пропишем независимо от сохраненных ранее настроек отбора
	Если ФормированиеСпискаОС.ПостроительОтчета.Отбор.Найти("Организация") = Неопределено Тогда
		ФормированиеСпискаОС.ПостроительОтчета.Отбор.Добавить("Организация")
	КонецЕсли;
	
	Если ФормированиеСпискаОС.ПостроительОтчета.Отбор.Найти("СтруктурноеПодразделение") = Неопределено Тогда
		ФормированиеСпискаОС.ПостроительОтчета.Отбор.Добавить("СтруктурноеПодразделение");
		ФормированиеСпискаОС.ПостроительОтчета.Отбор.СтруктурноеПодразделение.Установить(СтруктурноеПодразделение,);
   		СтруктураНедоступныхОтборов.Вставить("СтруктурноеПодразделение");
	КонецЕсли;

	ФормированиеСпискаОС.ПостроительОтчета.Отбор.Организация.Установить(Организация,);
	
	СтруктураНедоступныхОтборов.Вставить("Организация");
	
	// Теперь откроем подготовленную форму
	Форма = ФормированиеСпискаОС.ПолучитьФорму("ФормаНастройки", Владелец);
	Форма.мСтруктураНедоступныхОтборов = СтруктураНедоступныхОтборов;	
	Форма.ОткрытьМодально();
	
КонецПроцедуры  // ОткрытьФормуОтбораСпискаРаботников()

// позже перенести в общуий модуль
// Процедура выполняет заполнение табличной части документа работниками из обработки формирования списка работников.
//
// Параметры:
//	ТабличнаяЧастьДокумента - табличная часть документа, которую необходимо заполнить.
//	СтруктураРезультатаФормированияСписка - структура, сформировання обработкой ФормированиеСпискаРаботников.
//	РежимЗаполнения - строка ("Заполнить", "Добавить"), определяющая действие.
//
Процедура ЗаполнитьТабличнуюЧастьДокументаСпискомОС(ТабличнаяЧастьДокумента, СтруктураРезультатаФормированияСписка, РежимЗаполнения) Экспорт

	ТЗСписокОС = СтруктураРезультатаФормированияСписка.Данные.Выгрузить();

	Если РежимЗаполнения = "Заполнить" Тогда 
		
		// полностью загружаем всю таблицу в табличную часть
		НачальныйНомерСтроки = 1;
		ТабличнаяЧастьДокумента.Загрузить(ТЗСписокОС);
		
	Иначе 

		// добавление к существующим строкам табличной части
		НачальныйНомерСтроки = ТабличнаяЧастьДокумента.Количество() + 1;
		Для Каждого СтрокаТЗ Из ТЗСписокОС Цикл
			СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЗ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьДокументаСпискомРаботников()

