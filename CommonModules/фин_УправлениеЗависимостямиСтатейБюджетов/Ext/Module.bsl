
// Заполняет таблицу зависимых оборотов рекурсивно зависимыми от статьи
// переданной в качестве параметра.
//
// Параметры
//  Статья  – <Справочник.СтатьиОборотовБюджета> – финансовый показатель, для которой выбираются зависимые
//  ДатаДвижения - дата движения по влияющей статье
//  КоличествоПоСтатье - количественный оборот по влияющей статье
//  СуммаПоСтатье - суммовой оборот по влияющей статье
//
Процедура ЗаполнитьЗависимымиОборотами(ПериодПланирования,ВестиУчетПоПроектам,Сценарий,
	ЗависимыеОбороты,
	ТаблицаНовыхЗависимостей,
	ТабЗависимыхСтатей=Неопределено,
	ТекСтатья,
	СтруктураЗначенийРазрезов,
	ДатаДвижения, 
	КоличествоПоСтатье, 
	СуммаПоСтатье,
	ТекВалюта,
	ТекСостояние,
	МассивИзмерений,
	ФактическиеДанные=Ложь,
	РасчетПоМоделям = Ложь,
	ПолеБазовойСтроки,
	ТекущийИдентификатор,
	ВложеннаяЗависимость=Ложь,
	КЭШ_НастроекРасчета = Неопределено,
	КЭШ_РазрезовУчетаПоСтатьям = Неопределено)
	
	СоответствиеПоредставленийПоказателей = Новый Соответствие;
	СоответствиеПоредставленийПоказателей.Вставить(Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель1,"Показатель1");
	СоответствиеПоредставленийПоказателей.Вставить(Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель2,"Показатель2");
	СоответствиеПоредставленийПоказателей.Вставить(Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель3,"Показатель3");
	
	Если КЭШ_РазрезовУчетаПоСтатьям = Неопределено Тогда
		КЭШ_РазрезовУчетаПоСтатьям = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого ТекущаяЗависимость Из ТабЗависимыхСтатей Цикл
		Если ЗначениеЗаполнено(ТекущаяЗависимость.НастройкаРасчета) Тогда
			НастройкиИзКЭШа = КЭШ_НастроекРасчета.Получить(ТекущаяЗависимость.НастройкаРасчета);
			СтруктураФильтра = Новый Структура;
			Для Каждого Измерение Из МассивИзмерений Цикл
				Если ТекущаяЗависимость.ИсходныйНаборРазрезов["Отбор"+Измерение] И ТекущаяЗависимость.ИсходныйНаборРазрезов[Измерение]=Перечисления.фин_СпособыРасчетаРазрезовПоЗависимостям.ПоНастройке Тогда
					СтруктураФильтра.Вставить(Измерение,СтруктураЗначенийРазрезов[Измерение]);
				КонецЕсли;
			КонецЦикла;
			СтрокиНастройки = НастройкиИзКЭШа.НайтиСтроки(СтруктураФильтра);
		Иначе
			СтрокиНастройки = Неопределено;
		КонецЕсли;
		Если ТекущаяЗависимость.ДатаЗавершения<>'00010101' И ДатаДвижения > ТекущаяЗависимость.ДатаЗавершения Тогда
			Продолжить;
		КонецЕсли;
		РеквизитДляСуммы        	= ТекущаяЗависимость.РеквизитВлияющейСтатьиДляРасчетаСуммы;
		РеквизитДляКоличества   	= ТекущаяЗависимость.РеквизитВлияющейСтатьиДляРасчетаКоличества;
		КоэффициентДляСуммы     	= ТекущаяЗависимость.КоэффициентДляРасчетаСуммы;
		КоэффициентДляКоличества	= ТекущаяЗависимость.КоэффициентДляРасчетаКоличества;
		ДопКоэффициентДляСуммы     	= ТекущаяЗависимость.ДополнительныйКоэффициентСуммы;
		ДопКоэффициентДляКоличества	= ТекущаяЗависимость.ДополнительныйКоэффициентКоличества;
		СуммаЗависимая				= 0;
		КоличествоЗависимое			= 0;
		Если РеквизитДляКоличества=Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Количество Тогда
			КоличествоЗависимое	= КоличествоПоСтатье*КоэффициентДляКоличества;
		ИначеЕсли РеквизитДляКоличества=Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Сумма Тогда
			КоличествоЗависимое	= СуммаПоСтатье*КоэффициентДляКоличества;
		ИначеЕсли (РеквизитДляКоличества=Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель1 
			ИЛИ РеквизитДляКоличества=Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель2
			ИЛИ РеквизитДляКоличества=Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель3) И СтрокиНастройки<>Неопределено И СтрокиНастройки.Количество()<>0 Тогда
			КоличествоЗависимое	= СтрокиНастройки[0][СоответствиеПоредставленийПоказателей.Получить(РеквизитДляКоличества)]*КоэффициентДляКоличества;
		КонецЕсли;
		Если РеквизитДляСуммы=Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Количество Тогда
			СуммаЗависимая		= КоличествоПоСтатье*КоэффициентДляСуммы;
		ИначеЕсли РеквизитДляСуммы=Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Сумма Тогда
			СуммаЗависимая		= СуммаПоСтатье*КоэффициентДляСуммы;
		ИначеЕсли РеквизитДляСуммы=Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Цена Тогда
			СуммаЗависимая		= КоличествоЗависимое*КоэффициентДляСуммы;
		ИначеЕсли (РеквизитДляСуммы=Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель1 
			ИЛИ РеквизитДляСуммы=Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель2
			ИЛИ РеквизитДляСуммы=Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель3) И СтрокиНастройки<>Неопределено И СтрокиНастройки.Количество()<>0 Тогда
			СуммаЗависимая	= СтрокиНастройки[0][СоответствиеПоредставленийПоказателей.Получить(РеквизитДляСуммы)]*КоэффициентДляСуммы;
		КонецЕсли;
		Если СтрокиНастройки<>Неопределено И СтрокиНастройки.Количество()<>0 Тогда
			Если (ДопКоэффициентДляКоличества=Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель1 
				ИЛИ ДопКоэффициентДляКоличества=Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель2
				ИЛИ ДопКоэффициентДляКоличества=Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель3) Тогда
				КоличествоЗависимое	= КоличествоЗависимое * СтрокиНастройки[0][СоответствиеПоредставленийПоказателей.Получить(ДопКоэффициентДляКоличества)];
			КонецЕсли;
			Если (ДопКоэффициентДляСуммы=Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель1 
				ИЛИ ДопКоэффициентДляСуммы=Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель2
				ИЛИ ДопКоэффициентДляСуммы=Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель3) Тогда
				СуммаЗависимая	= СуммаЗависимая * СтрокиНастройки[0][СоответствиеПоредставленийПоказателей.Получить(ДопКоэффициентДляСуммы)];
			КонецЕсли;
		КонецЕсли;
		Если НЕ ТекущаяЗависимость.ЗначениеИзмененияПоПериодам.Пустая() Тогда
			ПериодСмещения 	= ТекущаяЗависимость.ЗначениеИзмененияПоПериодам.ПериодСмещения;
			ВидПрофиля 		= ТекущаяЗависимость.ЗначениеИзмененияПоПериодам.ВидПрофиля;
			ПериодЦикла		= ТекущаяЗависимость.ЗначениеИзмененияПоПериодам.ПериодЦикла;
			СуммаКоэффициентов = ТекущаяЗависимость.ЗначениеИзмененияПоПериодам.ПрофильИзменения.Итог("Коэффициент");
			КоличествоНераспределенное 	= КоличествоЗависимое;
			СуммаНераспределенная 		= СуммаЗависимая;
			Для Каждого Период Из ТекущаяЗависимость.ЗначениеИзмененияПоПериодам.ПрофильИзменения Цикл
				НовыйЗависимыйОборот					= ЗависимыеОбороты.Добавить();
				НовыйЗависимыйОборот.Количество 		= 0;
				НовыйЗависимыйОборот.Сумма 				= 0;
				ТекущийИдентификатор 					= ТекущийИдентификатор+1;
				НовыйЗависимыйОборот.ИдентификаторСтроки = ТекущийИдентификатор;
				НовыйЗависимыйОборот.ВложеннаяЗависимость= ВложеннаяЗависимость;
				НовыйЗависимыйОборот[?(ФактическиеДанные=Ложь,"ВлияющаяОперация","НомерСтрокиИсточника")]	= ПолеБазовойСтроки;
				Если ВидПрофиля = Перечисления.фин_ВидыПрофилейИзмененияПоПериодам.Периодический Тогда
					ДатаПериодаЦикла = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ДатаДвижения,ПериодЦикла);
					НовыйЗависимыйОборот[?(ФактическиеДанные=Ложь,"ПериодПланирования","Период")]	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(ДатаПериодаЦикла,ПериодСмещения,Период.НомерПериода),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий));
				Иначе
					НовыйЗависимыйОборот[?(ФактическиеДанные=Ложь,"ПериодПланирования","Период")]	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(ДатаДвижения,ПериодСмещения,Период.НомерПериода),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий));
				КонецЕсли;
				НовыйЗависимыйОборот.ФинансовыйПоказатель		= ТекущаяЗависимость.ЗависимаяФинансовыйПоказатель;
				СписокРазрезовДляВторогоОбхода = Новый Массив;
				Для Каждого Измерение Из МассивИзмерений Цикл
					Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.УчетПоСтатьеПоРазрезу(ТекущаяЗависимость.ЗависимаяФинансовыйПоказатель,Перечисления.фин_ФактическиеПоказателиБюджетирования[Измерение],КЭШ_РазрезовУчетаПоСтатьям) Тогда
						ЗначениеИсходное = Неопределено;
						СтруктураЗначенийРазрезов.Свойство(Измерение,ЗначениеИсходное);
						Если ТекущаяЗависимость[Измерение]=Перечисления.фин_СпособыРасчетаРазрезовПоЗависимостям.ПоИсходнымДанным Тогда
							НовыйЗависимыйОборот[Измерение] = ЗначениеИсходное;
						ИначеЕсли ТекущаяЗависимость[Измерение]=Перечисления.фин_СпособыРасчетаРазрезовПоЗависимостям.ПоНастройке Тогда
							Если СтрокиНастройки<>Неопределено И СтрокиНастройки.Количество()>0 Тогда
								НовыйЗависимыйОборот[Измерение] = СтрокиНастройки[0]["Результат"+Измерение];
							КонецЕсли;
						ИначеЕсли ТекущаяЗависимость[Измерение]=Перечисления.фин_СпособыРасчетаРазрезовПоЗависимостям.ПоПравилуАвтоматическогоРасчета Тогда
                            СписокРазрезовДляВторогоОбхода.Добавить(Измерение);
						Иначе
							НовыйЗависимыйОборот[Измерение] = ?(ЗначениеЗаполнено(ТекущаяЗависимость[Измерение]),ТекущаяЗависимость[Измерение],ЗначениеИсходное);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Измерение Из СписокРазрезовДляВторогоОбхода Цикл
					ЗначениеИсходное = Неопределено;
					СтруктураЗначенийРазрезов.Свойство(Измерение,ЗначениеИсходное);
					НовыйЗависимыйОборот[Измерение] = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РассчитатьРазрезАвтоматически(Перечисления.фин_ФактическиеПоказателиБюджетирования[Измерение],ПериодПланирования,Сценарий,НовыйЗависимыйОборот);
				КонецЦикла;
				Если (НЕ ФактическиеДанные) И (НЕ  РасчетПоМоделям) Тогда
					НовыйЗависимыйОборот.Состояние 			= ТекСостояние;
				КонецЕсли;
				Если ТекущаяЗависимость.УчетПоКоличеству Тогда
					Если (НЕ ФактическиеДанные) И (НЕ  РасчетПоМоделям) Тогда
						НовыйЗависимыйОборот.РеквизитОперацииДляРасчетаКоличества	= РеквизитДляКоличества;
						НовыйЗависимыйОборот.КоэффициентДляРасчетаКоличества		= КоэффициентДляКоличества*?(СуммаКоэффициентов = 0,0,Период.Коэффициент/СуммаКоэффициентов);		
					КонецЕсли;
					НовыйЗависимыйОборот.Количество								= КоличествоЗависимое*?(СуммаКоэффициентов = 0,0,Период.Коэффициент/СуммаКоэффициентов);
					КоличествоНераспределенное 			= КоличествоНераспределенное - НовыйЗависимыйОборот.Количество;
				КонецЕсли;
				Если ТекущаяЗависимость.УчетПоСумме Тогда
					НовыйЗависимыйОборот[?(ФактическиеДанные=Ложь,"ВалютаОперации","Валюта")] 					= ТекВалюта;
					Если РеквизитДляСуммы=Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Цена Тогда
						фин_ПроцедурыУправленияПлановымЦенообразованием.УстановитьЦенуПоУмолчанию(НовыйЗависимыйОборот,Сценарий,НЕ ВестиУчетПоПроектам,ПериодПланирования,,Истина);
						НовыйЗависимыйОборот.Сумма 	= НовыйЗависимыйОборот.Сумма*КоэффициентДляСуммы;
						СуммаЗависимая 				= НовыйЗависимыйОборот.Сумма;
					КонецЕсли;
					Если (НЕ ФактическиеДанные) И (НЕ  РасчетПоМоделям) Тогда
						НовыйЗависимыйОборот.РеквизитОперацииДляРасчетаСуммы	= РеквизитДляСуммы;
						НовыйЗависимыйОборот.КоэффициентДляРасчетаСуммы			= КоэффициентДляСуммы*?(СуммаКоэффициентов = 0,0,Период.Коэффициент/СуммаКоэффициентов);
					КонецЕсли;
					НовыйЗависимыйОборот.Сумма								= СуммаЗависимая*?(СуммаКоэффициентов = 0,0,Период.Коэффициент/СуммаКоэффициентов);
					СуммаНераспределенная 			= СуммаНераспределенная - НовыйЗависимыйОборот.Сумма;
				КонецЕсли;
				Если Период = ТекущаяЗависимость.ЗначениеИзмененияПоПериодам.ПрофильИзменения[ТекущаяЗависимость.ЗначениеИзмененияПоПериодам.ПрофильИзменения.Количество()-1] Тогда
					Если ТекущаяЗависимость.УчетПоКоличеству Тогда
						НовыйЗависимыйОборот.Количество			= НовыйЗависимыйОборот.Количество + КоличествоНераспределенное;
					КонецЕсли;
					Если ТекущаяЗависимость.УчетПоСумме Тогда
						НовыйЗависимыйОборот.Сумма				= НовыйЗависимыйОборот.Сумма + СуммаНераспределенная;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаНоваяЗависимость = ТаблицаНовыхЗависимостей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНоваяЗависимость,НовыйЗависимыйОборот);
			КонецЦикла;
		Иначе
			НовыйЗависимыйОборот						= ЗависимыеОбороты.Добавить();
			НовыйЗависимыйОборот.Количество =0;
			НовыйЗависимыйОборот.Сумма =0;
			НовыйЗависимыйОборот.ВложеннаяЗависимость	= ВложеннаяЗависимость;
			ТекущийИдентификатор 	= ТекущийИдентификатор+1;
			НовыйЗависимыйОборот.ИдентификаторСтроки = ТекущийИдентификатор;
			НовыйЗависимыйОборот[?(ФактическиеДанные=Ложь,"ВлияющаяОперация","НомерСтрокиИсточника")]		= ПолеБазовойСтроки;
			НовыйЗависимыйОборот[?(ФактическиеДанные,"Период","ПериодПланирования")]	= ДатаДвижения;
			НовыйЗависимыйОборот.ФинансовыйПоказатель			= ТекущаяЗависимость.ЗависимаяФинансовыйПоказатель;
			Если (НЕ ФактическиеДанные) Тогда
				Если ТипЗнч(ЗависимыеОбороты)=Тип("ТаблицаЗначений") Тогда
					Если ЗависимыеОбороты.Колонки.Найти("Состояние")<>Неопределено Тогда
						НовыйЗависимыйОборот.Состояние 				= ТекСостояние;
					КонецЕсли;
				Иначе
					НовыйЗависимыйОборот.Состояние 				= ТекСостояние;
				КонецЕсли;
			КонецЕсли;
			СписокРазрезовДляВторогоОбхода = Новый Массив;
			Для Каждого Измерение Из МассивИзмерений Цикл
				Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.УчетПоСтатьеПоРазрезу(ТекущаяЗависимость.ЗависимаяФинансовыйПоказатель,Перечисления.фин_ФактическиеПоказателиБюджетирования[Измерение],КЭШ_РазрезовУчетаПоСтатьям) Тогда
					ЗначениеИсходное = Неопределено;
					СтруктураЗначенийРазрезов.Свойство(Измерение,ЗначениеИсходное);
					Если ТекущаяЗависимость[Измерение]=Перечисления.фин_СпособыРасчетаРазрезовПоЗависимостям.ПоИсходнымДанным Тогда
						НовыйЗависимыйОборот[Измерение] = ЗначениеИсходное;
					ИначеЕсли ТекущаяЗависимость[Измерение]=Перечисления.фин_СпособыРасчетаРазрезовПоЗависимостям.ПоНастройке Тогда
						Если СтрокиНастройки<>Неопределено И СтрокиНастройки.Количество()>0 Тогда
							НовыйЗависимыйОборот[Измерение] = СтрокиНастройки[0]["Результат"+Измерение];
						КонецЕсли;
					ИначеЕсли ТекущаяЗависимость[Измерение]=Перечисления.фин_СпособыРасчетаРазрезовПоЗависимостям.ПоПравилуАвтоматическогоРасчета Тогда
						СписокРазрезовДляВторогоОбхода.Добавить(Измерение);
					Иначе
						НовыйЗависимыйОборот[Измерение] = ?(ЗначениеЗаполнено(ТекущаяЗависимость[Измерение]),ТекущаяЗависимость[Измерение],ЗначениеИсходное);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Для Каждого Измерение Из СписокРазрезовДляВторогоОбхода Цикл
				ЗначениеИсходное = Неопределено;
				СтруктураЗначенийРазрезов.Свойство(Измерение,ЗначениеИсходное);
				НовыйЗависимыйОборот[Измерение] = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РассчитатьРазрезАвтоматически(Перечисления.фин_ФактическиеПоказателиБюджетирования[Измерение],ПериодПланирования,Сценарий,НовыйЗависимыйОборот);
			КонецЦикла;
			Если ТекущаяЗависимость.УчетПоКоличеству Тогда
				Если (НЕ ФактическиеДанные) И (НЕ  РасчетПоМоделям) Тогда
					НовыйЗависимыйОборот.РеквизитОперацииДляРасчетаКоличества	= РеквизитДляКоличества;
					НовыйЗависимыйОборот.КоэффициентДляРасчетаКоличества		= КоэффициентДляКоличества;
				КонецЕсли;
				НовыйЗависимыйОборот.Количество								= КоличествоЗависимое;
			КонецЕсли;
			Если РеквизитДляСуммы=Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Цена Тогда
				НовыйЗависимыйОборот[?(ФактическиеДанные,"Валюта","ВалютаОперации")]= ТекВалюта;
				фин_ПроцедурыУправленияПлановымЦенообразованием.УстановитьЦенуПоУмолчанию(НовыйЗависимыйОборот,Сценарий,ВестиУчетПоПроектам,ПериодПланирования,,Истина);
				НовыйЗависимыйОборот.Сумма 	= НовыйЗависимыйОборот.Сумма*КоэффициентДляСуммы;
				СуммаЗависимая 				= НовыйЗависимыйОборот.Сумма;
			КонецЕсли;
			Если ТекущаяЗависимость.УчетПоСумме Тогда
				Если (НЕ ФактическиеДанные) И (НЕ  РасчетПоМоделям) Тогда
					НовыйЗависимыйОборот.РеквизитОперацииДляРасчетаСуммы	= РеквизитДляСуммы;
					НовыйЗависимыйОборот.КоэффициентДляРасчетаСуммы			= КоэффициентДляСуммы;
				КонецЕсли;
				НовыйЗависимыйОборот.Сумма								= СуммаЗависимая;
				НовыйЗависимыйОборот[?(ФактическиеДанные,"Валюта","ВалютаОперации")]= ТекВалюта;
			КонецЕсли;
			СтрокаНоваяЗависисмость = ТаблицаНовыхЗависимостей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНоваяЗависисмость,НовыйЗависимыйОборот);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ЗаполнитьЗависимымиОборотами

//Функция ПолучитьТаблицуЗависимостей
//
Функция ПолучитьТаблицуЗависимостей(ИсходнаяТаблица,Сценарий,Организация,БюджетированиеПоОрганизациям,ПериодПланирования,ФактическиеДанные,СтруктураРазрезов) Экспорт
	 ТаблицаОборотов = ИсходнаяТаблица.Скопировать();
	 Если ТаблицаОборотов.Колонки.Найти("Сценарий")=Неопределено Тогда
	 	ТаблицаОборотов.Колонки.Добавить("Сценарий", Новый ОписаниеТипов("СправочникСсылка."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования"));
	 КонецЕсли;
	 ТаблицаОборотов.ЗаполнитьЗначения(Сценарий,"Сценарий");
	 Если ТаблицаОборотов.Колонки.Найти("НомерСтроки")=Неопределено Тогда
	 	ТаблицаОборотов.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Строка"));
		НомерСтроки = 1;
		Для Каждого СтрокаОборотов Из ТаблицаОборотов Цикл
			СтрокаОборотов.НомерСтроки = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	КонецЕсли;
	ВидыИспользования = Новый СписокЗначений;
	ВидыИспользования.Добавить(Перечисления.фин_ИспользованиеЗависимостейСтатейОборотов.ПриПланированииИИсполнении);
	Если НЕ ФактическиеДанные Тогда
		ВидыИспользования.Добавить(Перечисления.фин_ИспользованиеЗависимостейСтатейОборотов.ПриПланировании);
	КонецЕсли;
	ПолеПолученияДопРазрезов=?(ФактическиеДанные,"ОборотыПоСтатьям.ДополнительныеРазрезы","ОборотыПоСтатьям");
	 Запрос=Новый Запрос;
	 Запрос.УстановитьПараметр("Сценарий",		Сценарий);
	 Запрос.УстановитьПараметр("Обороты",		ТаблицаОборотов);
	 Запрос.УстановитьПараметр("ДатаНачала",	ПериодПланирования);
	 Запрос.УстановитьПараметр("Организация",	Организация);
	 Запрос.УстановитьПараметр("БюджетированиеПоОрганизациям",	БюджетированиеПоОрганизациям);
	 Запрос.УстановитьПараметр("ВидыИспользования",	ВидыИспользования);
	 ТекстСоединенияЗависимостей = "";
	 ТекстВыбораПолей = "";
	 ПоляИндексирования = "";
	 ПоляИндексированияВТЗависимости = "";
	 Для Каждого ЭлементРазрез Из СтруктураРазрезов Цикл
		ТекстРазрез = ?(ТипЗнч(ЭлементРазрез)=Тип("Строка"),ЭлементРазрез,ЭлементРазрез.Значение);
		ТекстСоединенияЗависимостей = ТекстСоединенияЗависимостей+"
		|	И ВЫБОР
		|		КОГДА ВТ_Зависимости.Отбор"+ТекстРазрез+"=Истина
		|			ТОГДА ВЫБОР
		|						КОГДА ВТ_Зависимости."+ТекстРазрез+"=ЗНАЧЕНИЕ(Перечисление.фин_СпособыРасчетаРазрезовПоЗависимостям.ПоНастройке)
		|							ТОГДА ИСТИНА //ВТ_Обороты."+ТекстРазрез+" В ()
		|						ИНАЧЕ ВТ_Обороты."+ТекстРазрез+"=ВТ_Зависимости."+ТекстРазрез+"
		|					КОНЕЦ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ";
		ПоляИндексирования = ПоляИндексирования + ",
		|	"+ТекстРазрез;
		ПоляИндексированияВТЗависимости = ПоляИндексированияВТЗависимости + ",
		|	Отбор"+ТекстРазрез;
	 КонецЦикла;
	 Запрос.Текст="ВЫБРАТЬ
	              |	ОборотыПоСтатьям.Сценарий,
	              |	ОборотыПоСтатьям.УправленческоеПодразделение,
	              |	ОборотыПоСтатьям.Проект,
	              |	ОборотыПоСтатьям.Контрагент,
	              |	ОборотыПоСтатьям.Номенклатура,
	              |	ОборотыПоСтатьям.Разрез1,
	              |	ОборотыПоСтатьям.Разрез2,
	              |	ОборотыПоСтатьям.Разрез3,
	              |	ОборотыПоСтатьям.Разрез4,
	              |	ОборотыПоСтатьям.Разрез5,
	              |	ОборотыПоСтатьям.Разрез6,
	              |	ОборотыПоСтатьям.Разрез7,
	              |	ОборотыПоСтатьям.Разрез8,
	              |	ОборотыПоСтатьям.Разрез9,
	              |	ОборотыПоСтатьям.Разрез10,
	              |	ОборотыПоСтатьям.ФинансовыйПоказатель,
	              |	ОборотыПоСтатьям.НомерСтроки
	              |ПОМЕСТИТЬ ВТ_Обороты
	              |ИЗ
	              |	&Обороты КАК ОборотыПоСтатьям
				  |ИНДЕКСИРОВАТЬ ПО
				  |	ФинансовыйПоказатель
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	Зависимости.ЗначениеИзмененияПоПериодам,
	              |	Зависимости.КоэффициентДляРасчетаКоличества,
	              |	Зависимости.КоэффициентДляРасчетаСуммы,
	              |	Зависимости.РеквизитВлияющейСтатьиДляРасчетаКоличества,
	              |	Зависимости.РеквизитВлияющейСтатьиДляРасчетаСуммы,
	              |	Зависимости.ДополнительныйКоэффициентСуммы,
	              |	Зависимости.ДополнительныйКоэффициентКоличества,
	              |	Зависимости.ДатаЗавершения,
	              |	Зависимости.ЗависимаяФинансовыйПоказатель.УчетПоКоличеству КАК УчетПоКоличеству,
	              |	Зависимости.ЗависимаяФинансовыйПоказатель.УчетПоСумме КАК УчетПоСумме,
	              |	Зависимости.ЗависимаяОрганизация,
	              |	Зависимости.ЗависимаяФинансовыйПоказатель,
	              |	Зависимости.ЗависимыйНаборРазрезов,
	              |	Зависимости.ИсходныйНаборРазрезов,
	              |	Зависимости.ИсхФинансовыйПоказатель,
	              |	Зависимости.ИсхСценарий,
	              |	Зависимости.ИспользованиеЗависимости,
	              |	Зависимости.Регистратор,
	              |	Зависимости.НастройкаРасчета,
	              |	НаборРазрезовИсходный.Разрез1,
	              |	НаборРазрезовИсходный.Разрез2,
	              |	НаборРазрезовИсходный.Разрез3,
	              |	НаборРазрезовИсходный.Разрез4,
	              |	НаборРазрезовИсходный.Разрез5,
	              |	НаборРазрезовИсходный.Разрез6,
	              |	НаборРазрезовИсходный.Разрез7,
	              |	НаборРазрезовИсходный.Разрез8,
	              |	НаборРазрезовИсходный.Разрез9,
	              |	НаборРазрезовИсходный.Разрез10,
	              |	НаборРазрезовИсходный.Проект,
	              |	НаборРазрезовИсходный.Контрагент,
	              |	НаборРазрезовИсходный.Номенклатура,
	              |	НаборРазрезовИсходный.УправленческоеПодразделение,
	              |	НаборРазрезовИсходный.ОтборРазрез1,
	              |	НаборРазрезовИсходный.ОтборРазрез2,
	              |	НаборРазрезовИсходный.ОтборРазрез3,
	              |	НаборРазрезовИсходный.ОтборРазрез4,
	              |	НаборРазрезовИсходный.ОтборРазрез5,
	              |	НаборРазрезовИсходный.ОтборРазрез6,
	              |	НаборРазрезовИсходный.ОтборРазрез7,
	              |	НаборРазрезовИсходный.ОтборРазрез8,
	              |	НаборРазрезовИсходный.ОтборРазрез9,
	              |	НаборРазрезовИсходный.ОтборРазрез10,
	              |	НаборРазрезовИсходный.ОтборПроект,
	              |	НаборРазрезовИсходный.ОтборКонтрагент,
	              |	НаборРазрезовИсходный.ОтборНоменклатура,
	              |	НаборРазрезовИсходный.ОтборУправленческоеПодразделение
	              |ПОМЕСТИТЬ ВТ_Зависимости
	              |ИЗ
	              |	РегистрСведений.фин_ЗависимостиФинансовыхПоказателей.СрезПоследних(
	              |			&ДатаНачала,
	              |			ВЫБОР
	              |					КОГДА &БюджетированиеПоОрганизациям
	              |						ТОГДА Организация = &Организация
	              |								ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	              |								ИЛИ Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	              |					ИНАЧЕ ИСТИНА
	              |				КОНЕЦ
	              |				И ИспользованиеЗависимости В (&ВидыИспользования) И (ВЫБОР КОГДА &Сценарий=ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ ИсхСценарий=&Сценарий ИЛИ ИсхСценарий=ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка) КОНЕЦ)
	              |				И ИсхФинансовыйПоказатель В
	              |					(ВЫБРАТЬ
	              |						ВТ_Обороты.ФинансовыйПоказатель
	              |					ИЗ
	              |						ВТ_Обороты)) КАК Зависимости
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_НаборыРазрезовПоЗависимостям КАК НаборРазрезовИсходный
	              |		ПО Зависимости.ИсходныйНаборРазрезов = НаборРазрезовИсходный.Ссылка
	              |ГДЕ
	              |	(Зависимости.ДатаЗавершения > &ДатаНачала
	              |			ИЛИ Зависимости.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
				  |И Зависимости.ЗависимаяФинансовыйПоказатель<>ЗНАЧЕНИЕ(Справочник.фин_ФинансовыеПоказатели.ПустаяСсылка)
				  |ИНДЕКСИРОВАТЬ ПО
				  |  ЗависимыйНаборРазрезов,
				  |  ИсхФинансовыйПоказатель,
				  |  ДатаЗавершения
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ВТ_Обороты.НомерСтроки,
	              |	ВТ_Зависимости.ЗависимаяФинансовыйПоказатель,
	              |	ВТ_Зависимости.ЗначениеИзмененияПоПериодам,
	              |	ВТ_Зависимости.КоэффициентДляРасчетаКоличества,
	              |	ВТ_Зависимости.КоэффициентДляРасчетаСуммы,
	              |	ВТ_Зависимости.РеквизитВлияющейСтатьиДляРасчетаКоличества,
	              |	ВТ_Зависимости.РеквизитВлияющейСтатьиДляРасчетаСуммы,
	              |	ВТ_Зависимости.ДополнительныйКоэффициентСуммы,
	              |	ВТ_Зависимости.ДополнительныйКоэффициентКоличества,
	              |	ВТ_Зависимости.ДатаЗавершения,
	              |	ВТ_Зависимости.ИспользованиеЗависимости,
	              |	ВТ_Зависимости.УчетПоКоличеству КАК УчетПоКоличеству,
	              |	ВТ_Зависимости.УчетПоСумме КАК УчетПоСумме,
	              |	ВТ_Зависимости.Регистратор,
	              |	ВТ_Зависимости.ИсхСценарий,
		          |	ВТ_Зависимости.ЗависимыйНаборРазрезов,
	              |	ВТ_Зависимости.ИсхФинансовыйПоказатель,
	              |	ВТ_Зависимости.ИсходныйНаборРазрезов,
	              |	ВТ_Зависимости.НастройкаРасчета,
				  |	НаборРазрезовЗависимый.УправленческоеПодразделение,       
              	  |	НаборРазрезовЗависимый.Проект,
	              |	НаборРазрезовЗависимый.Контрагент,
	              |	НаборРазрезовЗависимый.Номенклатура,
	              |	НаборРазрезовЗависимый.Разрез1,
	              |	НаборРазрезовЗависимый.Разрез2,
	              |	НаборРазрезовЗависимый.Разрез3,
	              |	НаборРазрезовЗависимый.Разрез4,
	              |	НаборРазрезовЗависимый.Разрез5,
	              |	НаборРазрезовЗависимый.Разрез6,
	              |	НаборРазрезовЗависимый.Разрез7,
	              |	НаборРазрезовЗависимый.Разрез8,
	              |	НаборРазрезовЗависимый.Разрез9,
	              |	НаборРазрезовЗависимый.Разрез10
	              |ИЗ
	              |	ВТ_Обороты КАК ВТ_Обороты
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Зависимости КАК ВТ_Зависимости
	              |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_НаборыРазрезовПоЗависимостям КАК НаборРазрезовЗависимый
	              |			ПО ВТ_Зависимости.ЗависимыйНаборРазрезов = НаборРазрезовЗависимый.Ссылка
	              |		ПО ВТ_Обороты.ФинансовыйПоказатель = ВТ_Зависимости.ИсхФинансовыйПоказатель "+ТекстСоединенияЗависимостей+"
	              |ГДЕ
	              |	(ВТ_Зависимости.ДатаЗавершения > &ДатаНачала
	              |			ИЛИ ВТ_Зависимости.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))";
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции //ПолучитьТаблицуЗависимостей

// возвращает состав запрошенных настроек
//
Функция ПолучитьСоставНастройки(Настройка,Дата,МассивИзмерений)
	
	ТекстПоля = "";
	Для Каждого Измерение Из МассивИзмерений Цикл
		ТекстПоля = ТекстПоля+",
		|	ВЫБОР
		|		КОГДА НаборИсходный.Отбор"+Измерение+"
		|			ТОГДА НаборИсходный."+Измерение+"
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК "+Измерение+",
		|	ВЫБОР
		|		КОГДА НаборРезультирующий.Отбор"+Измерение+"
		|			ТОГДА НаборРезультирующий."+Измерение+"
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК Результат"+Измерение;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Состав.Показатель1,
		|	Состав.Показатель2,
		|	Состав.Показатель3,
		|	НаборИсходный.Ссылка КАК НаборИсходный,
		|	НаборРезультирующий.Ссылка КАК НаборРезультирующий"+ТекстПоля+"
		|ИЗ
		|	РегистрСведений.фин_СоставНастроекРасчетаЗависимостейБюджетирования.СрезПоследних(&Дата, НастройкаРасчета = &НастройкаРасчета) КАК Состав
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_НаборыРазрезовПоЗависимостям КАК НаборИсходный
		|		ПО Состав.ИсходныйНаборРазрезов = НаборИсходный.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_НаборыРазрезовПоЗависимостям КАК НаборРезультирующий
		|		ПО Состав.ЗависимыйНаборРазрезов = НаборРезультирующий.Ссылка
		|ГДЕ
		|	Состав.Использование";

	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("НастройкаРасчета", Настройка);

	Результат = Запрос.Выполнить();
    Возврат Результат.Выгрузить();
КонецФункции //ПолучитьСоставНастройки

// Инициирует процесс заполнения ТЧ "ЗависимыеОбороты"
//
Процедура РассчитатьЗависимыеОбороты(ФормируемыйБюджет=Неопределено,ОборотыПоСтатьям,ЗависимыеОбороты,Сценарий,Организация,БюджетированиеПоОрганизациям,ПериодПланирования,НеВестиУчетПоПроектам,ФактическиеДанные=Ложь,РасчетПоМоделям=Ложь,ПолеБазовойСтроки="НомерСтроки",ТекущийИдентификатор=0) Экспорт
	
	СтруктураРазрезов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйМассивРазрезов");
	МассивИзмерений = Новый Массив;
	Для Каждого ЭлементРазрез Из СтруктураРазрезов Цикл
		ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ЭлементРазрез);
		МассивИзмерений.Добавить(ИмяРазреза);
	КонецЦикла;
	
	// получим список применимых зависимостей
	ТаблицаОборотовПоСтатьям = ?(ТипЗнч(ОборотыПоСтатьям)=Тип("ТаблицаЗначений"),ОборотыПоСтатьям.Скопировать(),ОборотыПоСтатьям.Выгрузить());
	
	ТаблицаЗависимостей=ПолучитьТаблицуЗависимостей(ТаблицаОборотовПоСтатьям,Сценарий,Организация,БюджетированиеПоОрганизациям,ПериодПланирования,ФактическиеДанные,МассивИзмерений);
	ТаблицаЗависимостей.Индексы.Добавить("номерСтроки");
	ТаблицаНовыхЗависимостей = ?(ТипЗнч(ЗависимыеОбороты)=Тип("ТаблицаЗначений"),ЗависимыеОбороты.СкопироватьКолонки(),ЗависимыеОбороты.ВыгрузитьКолонки());
	
	КЭШ_Настроек = Новый Соответствие;
	КЭШ_РазрезовУчетаПоСтатьям = Новый Соответствие;
	
	ЗависимыеОбороты.Очистить();
	Для Каждого СтрокаОборот Из ОборотыПоСтатьям Цикл
		Если СтрокаОборот.Количество= 0 И СтрокаОборот.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокиЗависимостей = ТаблицаЗависимостей.НайтиСтроки(Новый Структура("НомерСтроки",СтрокаОборот.НомерСтроки));
		
		// фильтрация строк
		МассивУдалить = Новый Массив;
		Для Каждого СтрокаМассива Из СтрокиЗависимостей Цикл
			Если ЗначениеЗаполнено(СтрокаМассива.НастройкаРасчета) Тогда
				НастройкиИзКЭШа = КЭШ_Настроек.Получить(СтрокаМассива.НастройкаРасчета);
				Если НастройкиИзКЭШа = Неопределено Тогда
					НастройкиИзКЭШа = ПолучитьСоставНастройки(СтрокаМассива.НастройкаРасчета,ПериодПланирования,МассивИзмерений);
					КЭШ_Настроек.Вставить(СтрокаМассива.НастройкаРасчета,НастройкиИзКЭШа);
				КонецЕсли;
				СтруктураФильтра = Новый Структура;
				Для Каждого Измерение Из МассивИзмерений Цикл
					Если СтрокаМассива.ИсходныйНаборРазрезов["Отбор"+Измерение] И СтрокаМассива.ИсходныйНаборРазрезов[Измерение]=Перечисления.фин_СпособыРасчетаРазрезовПоЗависимостям.ПоНастройке Тогда
						СтруктураФильтра.Вставить(Измерение,СтрокаОборот[Измерение]);
					КонецЕсли;
				КонецЦикла;
				Если СтруктураФильтра.Количество()>0 Тогда
					Если НастройкиИзКЭШа.НайтиСтроки(СтруктураФильтра).Количество()=0 Тогда
						МассивУдалить.Вставить(0,СтрокиЗависимостей.Найти(СтрокаМассива));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаУдалить Из МассивУдалить Цикл
			СтрокиЗависимостей.Удалить(СтрокаУдалить);
		КонецЦикла;
		// - фильтрация окончена
		
		Если СтрокиЗависимостей.Количество() <>0 Тогда
			СтруктураЗначенийРазрезов = Новый Структура;
			Для Каждого Измерение Из МассивИзмерений Цикл
				СтруктураЗначенийРазрезов.Вставить(Измерение,СтрокаОборот[Измерение]);
			КонецЦикла;
			КоличествоЗависимостей = ЗависимыеОбороты.Количество();
			ЗаполнитьЗависимымиОборотами(ПериодПланирования,НеВестиУчетПоПроектам,
				Сценарий,
				ЗависимыеОбороты,
				ТаблицаНовыхЗависимостей,
				СтрокиЗависимостей,
				СтрокаОборот.ФинансовыйПоказатель,
				СтруктураЗначенийРазрезов,
				?(ФактическиеДанные,СтрокаОборот.Период,СтрокаОборот.ПериодПланирования),
				СтрокаОборот.Количество,
				СтрокаОборот.Сумма,
				?(ФактическиеДанные,СтрокаОборот.Валюта,СтрокаОборот.ВалютаОперации),
				?(ФактическиеДанные ИЛИ РасчетПоМоделям,Неопределено,СтрокаОборот.Состояние),
				МассивИзмерений,
				ФактическиеДанные,
				РасчетПоМоделям,
				СтрокаОборот[ПолеБазовойСтроки],
				ТекущийИдентификатор,,
				КЭШ_Настроек,
				КЭШ_РазрезовУчетаПоСтатьям);
				Если (НЕ ФактическиеДанные) И ОборотыПоСтатьям.Колонки.Найти("ПричинаКорректировки") <> Неопределено Тогда
					Для Инд = КоличествоЗависимостей По ЗависимыеОбороты.Количество()-1 Цикл
						ЗависимыеОбороты[Инд].ПричинаКорректировки = СтрокаОборот.ПричинаКорректировки;
						ЗависимыеОбороты[Инд].ПричинаОтклонения = СтрокаОборот.ПричинаОтклонения;
					КонецЦикла;
				КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Пока ТаблицаНовыхЗависимостей.Количество() <> 0 Цикл
		ИсходнаяТаблица = ТаблицаНовыхЗависимостей.Скопировать();
		ТаблицаНовыхЗависимостей.Очистить();
		Индекс = 1;
		Для Каждого СтрокаТЗ Из ИсходнаяТаблица Цикл
			СтрокаТЗ.НомерСтроки = Индекс;
			Индекс= Индекс+1;
		КонецЦикла;
		ТаблицаЗависимостей=ПолучитьТаблицуЗависимостей(ИсходнаяТаблица,Сценарий,Организация,БюджетированиеПоОрганизациям,ПериодПланирования,ФактическиеДанные,МассивИзмерений);
		Если ТаблицаЗависимостей.Количество()<>0 Тогда
			Для Каждого СтрокаОборот Из ИсходнаяТаблица Цикл
				Если СтрокаОборот.Количество= 0 И СтрокаОборот.Сумма = 0 Тогда
					Продолжить;
				КонецЕсли;
				СтрокиЗависимостей = ТаблицаЗависимостей.НайтиСтроки(Новый Структура("НомерСтроки",СтрокаОборот.НомерСтроки));
				// фильтрация строк
				МассивУдалить = Новый Массив;
				Для Каждого СтрокаМассива Из СтрокиЗависимостей Цикл
					Если ЗначениеЗаполнено(СтрокаМассива.НастройкаРасчета) Тогда
						НастройкиИзКЭШа = КЭШ_Настроек.Получить(СтрокаМассива.НастройкаРасчета);
						Если НастройкиИзКЭШа = Неопределено Тогда
							НастройкиИзКЭШа = ПолучитьСоставНастройки(СтрокаМассива.НастройкаРасчета,ПериодПланирования,МассивИзмерений);
							КЭШ_Настроек.Вставить(СтрокаМассива.НастройкаРасчета,НастройкиИзКЭШа);
						КонецЕсли;
						СтруктураФильтра = Новый Структура;
						Для Каждого Измерение Из МассивИзмерений Цикл
							Если СтрокаМассива.ИсходныйНаборРазрезов["Отбор"+Измерение] И СтрокаМассива.ИсходныйНаборРазрезов[Измерение]=Перечисления.фин_СпособыРасчетаРазрезовПоЗависимостям.ПоНастройке Тогда
								СтруктураФильтра.Вставить(Измерение,СтрокаОборот[Измерение]);
							КонецЕсли;
						КонецЦикла;
						Если СтруктураФильтра.Количество()>0 Тогда
							Если НастройкиИзКЭШа.НайтиСтроки(СтруктураФильтра).Количество()=0 Тогда
								МассивУдалить.Вставить(0,СтрокиЗависимостей.Найти(СтрокаМассива));
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Для Каждого СтрокаУдалить Из МассивУдалить Цикл
					СтрокиЗависимостей.Удалить(СтрокаУдалить);
				КонецЦикла;
				// - фильтрация окончена
				Если СтрокиЗависимостей.Количество() <>0 Тогда
						СтруктураЗначенийРазрезов = Новый Структура;
						Для Каждого Измерение Из МассивИзмерений Цикл
							СтруктураЗначенийРазрезов.Вставить(Измерение,СтрокаОборот[Измерение]);
						КонецЦикла;
						КоличествоЗависимостей = ЗависимыеОбороты.Количество();
						ЗаполнитьЗависимымиОборотами(ПериодПланирования,НеВестиУчетПоПроектам,
							Сценарий,
							ЗависимыеОбороты,
							ТаблицаНовыхЗависимостей,
							СтрокиЗависимостей,
							СтрокаОборот.ФинансовыйПоказатель,
							СтруктураЗначенийРазрезов,
							?(ФактическиеДанные=Истина,СтрокаОборот.Период,СтрокаОборот.ПериодПланирования),
							СтрокаОборот.Количество,
							СтрокаОборот.Сумма,
							?(ФактическиеДанные=Истина,СтрокаОборот.Валюта,СтрокаОборот.ВалютаОперации),
							?(ФактическиеДанные=Истина ИЛИ (ТипЗнч(ИсходнаяТаблица)=Тип("ТаблицаЗначений") И ИсходнаяТаблица.Колонки.Найти("Состояние")=Неопределено),1,СтрокаОборот.Состояние),
							МассивИзмерений,
							ФактическиеДанные,
							РасчетПоМоделям,
							СтрокаОборот.ИдентификаторСтроки,
							ТекущийИдентификатор,
							Истина,
							КЭШ_Настроек,
							КЭШ_РазрезовУчетаПоСтатьям);
						Если (НЕ ФактическиеДанные) И ОборотыПоСтатьям.Колонки.Найти("ПричинаКорректировки") <> Неопределено Тогда
							Для Инд = КоличествоЗависимостей По ЗависимыеОбороты.Количество()-1 Цикл
								ЗависимыеОбороты[Инд].ПричинаКорректировки = СтрокаОборот.ПричинаКорректировки;
								ЗависимыеОбороты[Инд].ПричинаОтклонения = СтрокаОборот.ПричинаОтклонения;
							КонецЦикла;
						КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ФактическиеДанные Тогда
		СписокСтатей = ?(ТипЗнч(ЗависимыеОбороты)=Тип("ТаблицаЗначений"),ЗависимыеОбороты.Скопировать(),ЗависимыеОбороты.Выгрузить());
		СписокСтатей.Свернуть("ФинансовыйПоказатель");
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	СтатьиБюджета.ФинансовыйПоказатель,
		|	СтатьиБюджета.Ссылка КАК СтатьяБюджета
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
		|ГДЕ
		|	СтатьиБюджета.Владелец = &Бюджет
		|	И СтатьиБюджета.ФинансовыйПоказатель В(&Статьи)";
		Запрос.УстановитьПараметр("Статьи",СписокСтатей);
		Запрос.УстановитьПараметр("Бюджет",ФормируемыйБюджет);
		СоответствиеСтатей = Новый Соответствие;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СоответствиеСтатей.Вставить(Выборка.ФинансовыйПоказатель,Выборка.СтатьяБюджета);
		КонецЦикла;
		Для Каждого СтрокаЗависимыйОборот Из ЗависимыеОбороты Цикл
			СтатьяБюджета = СоответствиеСтатей.Получить(СтрокаЗависимыйОборот.ФинансовыйПоказатель);
			Если СтатьяБюджета <> Неопределено Тогда
				СтрокаЗависимыйОборот.СтатьяБюджета = СтатьяБюджета; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры //РассчитатьЗависимыеОбороты

Функция ИмеютсяЗависимостиПоФактическимДанным(Показатели,Дата,Организация) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ЗависимостиФинансовыхПоказателейСрезПоследних.ИспользованиеЗависимости
		|ИЗ
		|	РегистрСведений.фин_ЗависимостиФинансовыхПоказателей.СрезПоследних(
		|			&Дата,
		|			ИсхФинансовыйПоказатель В (&Показатели)
		|				И (Организация = &Организация
		|					ИЛИ Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|				И ИспользованиеЗависимости = &ИспользованиеЗависимости) КАК фин_ЗависимостиФинансовыхПоказателейСрезПоследних";

	Запрос.УстановитьПараметр("ИспользованиеЗависимости", Перечисления.фин_ИспользованиеЗависимостейСтатейОборотов.ПриПланированииИИсполнении);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Показатели", Показатели);

	Результат = Запрос.Выполнить();

	Возврат НЕ Результат.Пустой();

КонецФункции

Функция ОпределитьПозициюНабораПоЗависимостям(Исходная,СтруктураПараметров) Экспорт


	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыРазрезовПоЗависимостям.Ссылка
		|ИЗ
		|	Справочник.фин_НаборыРазрезовПоЗависимостям КАК НаборыРазрезовПоЗависимостям
		|ГДЕ
		|	НаборыРазрезовПоЗависимостям.Исходный = &Исходный
		|	И НаборыРазрезовПоЗависимостям.ОтборРазрез1 = &ОтборРазрез1
		|	И ВЫБОР
		|			КОГДА &ОтборРазрез1
		|				ТОГДА НаборыРазрезовПоЗависимостям.Разрез1 = &Разрез1
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НаборыРазрезовПоЗависимостям.ОтборРазрез2 = &ОтборРазрез2
		|	И ВЫБОР
		|			КОГДА &ОтборРазрез2
		|				ТОГДА НаборыРазрезовПоЗависимостям.Разрез2 = &Разрез2
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НаборыРазрезовПоЗависимостям.ОтборРазрез3 = &ОтборРазрез3
		|	И ВЫБОР
		|			КОГДА &ОтборРазрез3
		|				ТОГДА НаборыРазрезовПоЗависимостям.Разрез3 = &Разрез3
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НаборыРазрезовПоЗависимостям.ОтборРазрез4 = &ОтборРазрез4
		|	И ВЫБОР
		|			КОГДА &ОтборРазрез4
		|				ТОГДА НаборыРазрезовПоЗависимостям.Разрез4 = &Разрез4
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НаборыРазрезовПоЗависимостям.ОтборРазрез5 = &ОтборРазрез5
		|	И ВЫБОР
		|			КОГДА &ОтборРазрез5
		|				ТОГДА НаборыРазрезовПоЗависимостям.Разрез5 = &Разрез5
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НаборыРазрезовПоЗависимостям.ОтборРазрез6 = &ОтборРазрез6
		|	И ВЫБОР
		|			КОГДА &ОтборРазрез6
		|				ТОГДА НаборыРазрезовПоЗависимостям.Разрез6 = &Разрез6
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НаборыРазрезовПоЗависимостям.ОтборРазрез7 = &ОтборРазрез7
		|	И ВЫБОР
		|			КОГДА &ОтборРазрез7
		|				ТОГДА НаборыРазрезовПоЗависимостям.Разрез7 = &Разрез7
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НаборыРазрезовПоЗависимостям.ОтборРазрез8 = &ОтборРазрез8
		|	И ВЫБОР
		|			КОГДА &ОтборРазрез8
		|				ТОГДА НаборыРазрезовПоЗависимостям.Разрез8 = &Разрез8
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НаборыРазрезовПоЗависимостям.ОтборРазрез9 = &ОтборРазрез9
		|	И ВЫБОР
		|			КОГДА &ОтборРазрез9
		|				ТОГДА НаборыРазрезовПоЗависимостям.Разрез9 = &Разрез9
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НаборыРазрезовПоЗависимостям.ОтборРазрез10 = &ОтборРазрез10
		|	И ВЫБОР
		|			КОГДА &ОтборРазрез10
		|				ТОГДА НаборыРазрезовПоЗависимостям.Разрез10 = &Разрез10
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НаборыРазрезовПоЗависимостям.ОтборУправленческоеПодразделение = &ОтборУправленческоеПодразделение
		|	И ВЫБОР
		|			КОГДА &ОтборУправленческоеПодразделение
		|				ТОГДА НаборыРазрезовПоЗависимостям.УправленческоеПодразделение = &УправленческоеПодразделение
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НаборыРазрезовПоЗависимостям.ОтборПроект = &ОтборПроект
		|	И ВЫБОР
		|			КОГДА &ОтборПроект
		|				ТОГДА НаборыРазрезовПоЗависимостям.Проект = &Проект
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НаборыРазрезовПоЗависимостям.ОтборКонтрагент = &ОтборКонтрагент
		|	И ВЫБОР
		|			КОГДА &ОтборКонтрагент
		|				ТОГДА НаборыРазрезовПоЗависимостям.Контрагент = &Контрагент
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НаборыРазрезовПоЗависимостям.ОтборНоменклатура = &ОтборНоменклатура
		|	И ВЫБОР
		|			КОГДА &ОтборНоменклатура
		|				ТОГДА НаборыРазрезовПоЗависимостям.Номенклатура = &Номенклатура
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И (НЕ НаборыРазрезовПоЗависимостям.ПометкаУдаления)";

	Запрос.УстановитьПараметр("Исходный",	Исходная);
	Запрос.УстановитьПараметр("ОтборУправленческоеПодразделение",	Ложь);
	Запрос.УстановитьПараметр("ОтборКонтрагент", 	Ложь);
	Запрос.УстановитьПараметр("ОтборНоменклатура",	Ложь);
	Запрос.УстановитьПараметр("ОтборПроект", 	Ложь);
	Запрос.УстановитьПараметр("ОтборРазрез1", 	Ложь);
	Запрос.УстановитьПараметр("ОтборРазрез10",	Ложь);
	Запрос.УстановитьПараметр("ОтборРазрез2", 	Ложь);
	Запрос.УстановитьПараметр("ОтборРазрез3", 	Ложь);
	Запрос.УстановитьПараметр("ОтборРазрез4", 	Ложь);
	Запрос.УстановитьПараметр("ОтборРазрез5", 	Ложь);
	Запрос.УстановитьПараметр("ОтборРазрез6", 	Ложь);
	Запрос.УстановитьПараметр("ОтборРазрез7", 	Ложь);
	Запрос.УстановитьПараметр("ОтборРазрез8", 	Ложь);
	Запрос.УстановитьПараметр("ОтборРазрез9", 	Ложь);
	Запрос.УстановитьПараметр("УправленческоеПодразделение", Неопределено);
	Запрос.УстановитьПараметр("Проект", 		Неопределено);
	Запрос.УстановитьПараметр("Контрагент", 	Неопределено);
	Запрос.УстановитьПараметр("Номенклатура",	Неопределено);
	Запрос.УстановитьПараметр("Разрез1", 		Неопределено);
	Запрос.УстановитьПараметр("Разрез10", 		Неопределено);
	Запрос.УстановитьПараметр("Разрез2", 		Неопределено);
	Запрос.УстановитьПараметр("Разрез3", 		Неопределено);
	Запрос.УстановитьПараметр("Разрез4", 		Неопределено);
	Запрос.УстановитьПараметр("Разрез5", 		Неопределено);
	Запрос.УстановитьПараметр("Разрез6", 		Неопределено);
	Запрос.УстановитьПараметр("Разрез7", 		Неопределено);
	Запрос.УстановитьПараметр("Разрез8", 		Неопределено);
	Запрос.УстановитьПараметр("Разрез9", 		Неопределено);
	
	Для Каждого Параметр Из СтруктураПараметров Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ,Параметр.Значение);
	КонецЦикла;

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе	
		НовыйЭлемент = Справочники.фин_НаборыРазрезовПоЗависимостям.СоздатьЭлемент();
		НовыйЭлемент.Исходный = Исходная;
		Для Каждого Параметр Из СтруктураПараметров Цикл
			НовыйЭлемент[Параметр.Ключ]=Параметр.Значение;
		КонецЦикла;
		Попытка
			НовыйЭлемент.Записать();
			Возврат НовыйЭлемент.Ссылка;
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;

КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С КОНТРОЛИРУЕМЫМИ ЗНАЧЕНИЯМИ

Функция ПолучитьСписокПодконтрольныхПоказателей(Бюджет,Сценарий,БюджетированиеПоОрганизациям,Организация,ПериодПланирования,ИспользованиеКонтролируемыхЗначений,ФактическиеДанные = Ложь) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Запрос=Новый Запрос;
	
	ТекстГруппировка = "СГРУППИРОВАТЬ ПО
			|	УстановкаОграниченийПоБюджетам.ФинансовыйПоказатель,
			|	УстановкаОграниченийПоБюджетам.Сценарий,
			|	УстановкаОграниченийПоБюджетам.КонтролирующийСценарий";
	
	ВыражениеПериода = ?(ФактическиеДанные=Истина,"МАКСИМУМ(УстановкаОграниченийПоБюджетам.ПериодПланирования)","УстановкаОграниченийПоБюджетам.ПериодПланирования");
	
	
	Запрос.Текст=	"ВЫБРАТЬ
	|	фин_СтатьиБюджета.ФинансовыйПоказатель
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
	|ГДЕ
	|	фин_СтатьиБюджета.Владелец = &Бюджет
	|	И фин_СтатьиБюджета.ЭтоГруппа = ЛОЖЬ
	|
	|;ВЫБРАТЬ
	|	"+ВыражениеПериода+" КАК Период,
	|	УстановкаОграниченийПоБюджетам.ФинансовыйПоказатель КАК ФинансовыйПоказатель
	|ИЗ
	|	РегистрСведений.фин_УстановкаОграниченийПоБюджетам КАК УстановкаОграниченийПоБюджетам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Показатели КАК ВТ_Показатели
	|			ПО УстановкаОграниченийПоБюджетам.ФинансовыйПоказатель =  ВТ_Показатели.ФинансовыйПоказатель
	|
	|ГДЕ "+?(БюджетированиеПоОрганизациям,"УстановкаОграниченийПоБюджетам.Организация = &Организация И ","")+"
	|	УстановкаОграниченийПоБюджетам.ПериодПланирования "+?(ТипЗнч(ПериодПланирования)=Тип("Дата"),?(ФактическиеДанные=Истина,"<= &Период","= &Период"),"В (&Период)")+" И
	|	"+?(ФактическиеДанные=Истина,"","УстановкаОграниченийПоБюджетам.Сценарий = &Сценарий И")+"
	|	УстановкаОграниченийПоБюджетам.ИспользованиеКонтролируемогоЗначения = &ИспользованиеКонтролируемогоЗначения
	|	И УстановкаОграниченийПоБюджетам.ВидКонтролируемогоЗначения=ЗНАЧЕНИЕ(Перечисление.фин_ВидыКонтролируемогоЗначенияБюджета.Ограничивающее)"+?(ФактическиеДанные=Истина,ТекстГруппировка,"");
	
	Запрос.УстановитьПараметр("Организация",							Организация);
	Запрос.УстановитьПараметр("Период",									ПериодПланирования);
	Запрос.УстановитьПараметр("Бюджет",									Бюджет);
	Запрос.УстановитьПараметр("ИспользованиеКонтролируемогоЗначения",	ИспользованиеКонтролируемыхЗначений);	
	Запрос.УстановитьПараметр("Сценарий",								Сценарий);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Функция ПроверкаКонтролируемыхЗначений
// 
Функция ПроверкаКонтролируемыхЗначений(СтруктураДанныхШапки, ИндексСтрокаОборотовДляКонтроля,ТаблицаОборотовДокументаДляКонтроля,Сценарий,БюджетированиеПоОрганизациям,Организация,СтатьиИФинансовыеПоказатели = Неопределено,КЭШ_РазрезыФинансовыхПоказателей=Неопределено,КЭШ_ТаблицаОграничений = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	// Получение списка контролирующих сценариев для выбранного периода и измерений бюджетирования
	СтрокаОборотовДляКонтроля = ?(ТипЗнч(ИндексСтрокаОборотовДляКонтроля)=Тип("Число"),ТаблицаОборотовДокументаДляКонтроля[ИндексСтрокаОборотовДляКонтроля],ИндексСтрокаОборотовДляКонтроля);
	ПолучитьСтруктуру = Истина;
	Если КЭШ_РазрезыФинансовыхПоказателей <>Неопределено Тогда
		ЗначениеКЭШа = КЭШ_РазрезыФинансовыхПоказателей.Получить(СтрокаОборотовДляКонтроля.ФинансовыйПоказатель);
		Если ЗначениеКЭШа <> Неопределено Тогда
			ПолучитьСтруктуру = Ложь;
			СтруктураРазрезов = Новый СписокЗначений;
			СтруктураРазрезов.ЗагрузитьЗначения(ЗначениеКЭШа);
		КонецЕсли;
	КонецЕсли;
	Если ПолучитьСтруктуру Тогда
		СтруктураРазрезов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокРазрезовСтатьи(СтрокаОборотовДляКонтроля.ФинансовыйПоказатель);
		Если КЭШ_РазрезыФинансовыхПоказателей <> Неопределено Тогда
			КЭШ_РазрезыФинансовыхПоказателей.Вставить(СтрокаОборотовДляКонтроля.ФинансовыйПоказатель,СтруктураРазрезов.ВыгрузитьЗначения());
		КонецЕсли;
	КонецЕсли;
	ПолучитьОграничения = Истина;
	Если КЭШ_ТаблицаОграничений <> Неопределено И СтруктураРазрезов.Количество()=0 Тогда
		ЗначениеКЭШа = КЭШ_ТаблицаОграничений.Получить(СтрокаОборотовДляКонтроля.ФинансовыйПоказатель);
		Если ЗначениеКЭШа <>Неопределено Тогда
			ЗначениеКЭШаПоПериоду = ЗначениеКЭШа.Получить(СтрокаОборотовДляКонтроля.ПериодПланирования);
			Если ЗначениеКЭШаПоПериоду <> Неопределено Тогда
				ТабРезультата = ЗначениеКЭШаПоПериоду;
				СписокУдалить = Новый Массив;
				Для Каждого СтрокаРезультата Из ТабРезультата Цикл
					Для Каждого РазрезЭлемент Из СтруктураРазрезов Цикл
						ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
						Если ТабРезультата.Колонки.Найти(ИмяРазреза)<>Неопределено И ЗначениеЗаполнено(СтрокаРезультата[ИмяРазреза]) И СтрокаРезультата[ИмяРазреза]<>СтрокаОборотовДляКонтроля[ИмяРазреза] Тогда
							СписокУдалить.Добавить(СтрокаРезультата);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				Для Каждого СтрокаУдалить Из СписокУдалить Цикл
					ТабРезультата.Удалить(СтрокаУдалить);
				КонецЦикла;
				ПолучитьОграничения = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ПолучитьОграничения Тогда
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Период",СтрокаОборотовДляКонтроля.ПериодПланирования);
		ИменаРазрезов = Новый Массив;
		Для Каждого РазрезЭлемент Из СтруктураРазрезов Цикл
			ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
			СтруктураДанных.Вставить(ИмяРазреза,СтрокаОборотовДляКонтроля[ИмяРазреза]);
			ИменаРазрезов.Добавить(ИмяРазреза);
		КонецЦикла;
		ТабРезультата=ПолучитьТаблицуКонтролирующихПравил(СтрокаОборотовДляКонтроля.ФинансовыйПоказатель,Сценарий,БюджетированиеПоОрганизациям,Организация,СтруктураДанных,Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриПланировании);
		Если КЭШ_ТаблицаОграничений <>Неопределено И СтруктураРазрезов.Количество()=0 Тогда
			Если ЗначениеКЭШа <>Неопределено Тогда
				ЗначениеКЭШа.Вставить(СтрокаОборотовДляКонтроля.ПериодПланирования,ТабРезультата);
			Иначе
				ЗначениеКЭШа = Новый Соответствие;
				ЗначениеКЭШа.Вставить(СтрокаОборотовДляКонтроля.ПериодПланирования,ТабРезультата);
			КонецЕсли;
			КЭШ_ТаблицаОграничений.Вставить(СтрокаОборотовДляКонтроля.ФинансовыйПоказатель,ЗначениеКЭШа);
		КонецЕсли;
	Иначе
		ИменаРазрезов = Новый Массив;
		Для Каждого РазрезЭлемент Из СтруктураРазрезов Цикл
			ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
			ИменаРазрезов.Добавить(ИмяРазреза);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПроверитьПоказателиВСоответствииСправиламиКонтроля(ТабРезультата,ТаблицаОборотовДокументаДляКонтроля,СтрокаОборотовДляКонтроля,ИменаРазрезов,Сценарий,СтруктураДанныхШапки,БюджетированиеПоОрганизациям,Организация,СтатьиИФинансовыеПоказатели);
КонецФункции // ПроверкаКонтролируемыхЗначений()

Функция ПолучитьТаблицуКонтролирующихПравил(ФинансовыйПоказатель,Сценарий,БюджетированиеПоОрганизациям,Организация,СтруктураДанных,ИспользованиеКонтролируемыхЗначений,ФактическиеДанные = Ложь) Экспорт
	Запрос=Новый Запрос;
	
	ТекстГруппировка = "СГРУППИРОВАТЬ ПО
			|	УстановкаОграниченийПоБюджетам.ФинансовыйПоказатель,
			|	УстановкаОграниченийПоБюджетам.Сценарий,
			|	УстановкаОграниченийПоБюджетам.КонтролирующийСценарий";
	
	СтруктураРазрезов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокРазрезовСтатьи(ФинансовыйПоказатель);
	ТекстИзмерения 	= "";
	ТекстУсловие 	= "";
	ИменаРазрезов = Новый Массив;
	Для Каждого РазрезЭлемент Из СтруктураРазрезов Цикл
		ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
		Если НЕ СтруктураДанных.Свойство(ИмяРазреза) Тогда
			Продолжить;
		КонецЕсли;
		ИменаРазрезов.Добавить(ИмяРазреза);
		ИмяПоля = "УстановкаОграниченийПоБюджетам."+?(Найти(ИмяРазреза,"Разрез")=0,"","ДополнительныеРазрезы.")+ИмяРазреза;
		ТекстИзмерения = ТекстИзмерения +",
			|	 "+ИмяПоля+" КАК "+ИмяРазреза;
		ТекстУсловие = ТекстУсловие+" И
			|	("+ИмяПоля+?(ФактическиеДанные=Ложь,"=&"," В(&")+ИмяРазреза+?(ФактическиеДанные=Истина,")","")+" ИЛИ "+ИмяПоля+" В (&СписокПустых_"+ИмяРазреза+")"+" ИЛИ "+ИмяПоля+" ЕСТЬ NULL)";	
		Запрос.УстановитьПараметр(ИмяРазреза,СтруктураДанных[ИмяРазреза]);
		ТекстГруппировка = ТекстГруппировка+",
			|	"+ИмяПоля;
		СписокПустых = Новый СписокЗначений;
		СписокПустых.Добавить(Неопределено);
		ТипРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(РазрезЭлемент.Значение);
		МассивТипов = ТипРазреза.ТипЗначения.Типы();
		Для Каждого Тип Из МассивТипов Цикл
			нМассив = Новый Массив;
			нМассив.Добавить(Тип);
			Описание = Новый ОписаниеТипов(нМассив);
			СписокПустых.Добавить(Описание.ПривестиЗначение(""));
		КонецЦикла;
		Запрос.УстановитьПараметр("СписокПустых_"+ИмяРазреза,СписокПустых);
	КонецЦикла;
	
	ВыражениеПериода = ?(ФактическиеДанные=Истина,"МАКСИМУМ(УстановкаОграниченийПоБюджетам.ПериодПланирования)","УстановкаОграниченийПоБюджетам.ПериодПланирования");
	
	Запрос.Текст="ВЫБРАТЬ
	|	"+ВыражениеПериода+" КАК Период,
	|	УстановкаОграниченийПоБюджетам.Сценарий КАК Сценарий,
	|	УстановкаОграниченийПоБюджетам.КонтролирующийСценарий КАК КонтролирующийСценарий,
	|	УстановкаОграниченийПоБюджетам.ФинансовыйПоказатель КАК ФинансовыйПоказатель"+ТекстИзмерения+"
	|ИЗ
	|	РегистрСведений.фин_УстановкаОграниченийПоБюджетам КАК УстановкаОграниченийПоБюджетам
	|
	|ГДЕ "+?(БюджетированиеПоОрганизациям,"УстановкаОграниченийПоБюджетам.Организация = &Организация И ","")+"
	|	УстановкаОграниченийПоБюджетам.ПериодПланирования "+?(ТипЗнч(СтруктураДанных.Период)=Тип("Дата"),?(ФактическиеДанные=Истина,"<= &Период","= &Период"),"В (&Период)")+" И
	|	УстановкаОграниченийПоБюджетам.ФинансовыйПоказатель "+?(ТипЗнч(ФинансовыйПоказатель)=Тип("СправочникСсылка.фин_ФинансовыеПоказатели"),"= &ФинансовыйПоказатель","В (&ФинансовыйПоказатель)")+" И
	|	"+?(ФактическиеДанные=Истина,"","УстановкаОграниченийПоБюджетам.Сценарий = &Сценарий И")+"
	|	УстановкаОграниченийПоБюджетам.ИспользованиеКонтролируемогоЗначения = &ИспользованиеКонтролируемогоЗначения
	|	И УстановкаОграниченийПоБюджетам.ВидКонтролируемогоЗначения=ЗНАЧЕНИЕ(Перечисление.фин_ВидыКонтролируемогоЗначенияБюджета.Ограничивающее)"+ТекстУсловие+?(ФактическиеДанные=Истина,ТекстГруппировка,"");
	
	Запрос.УстановитьПараметр("Организация",							Организация);
	Запрос.УстановитьПараметр("Период",									СтруктураДанных.Период);
	Запрос.УстановитьПараметр("ФинансовыйПоказатель",					ФинансовыйПоказатель);
	Запрос.УстановитьПараметр("ИспользованиеКонтролируемогоЗначения",	ИспользованиеКонтролируемыхЗначений);	
	Запрос.УстановитьПараметр("Сценарий",								Сценарий);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьТаблицуФиксированныхКонтролирующихПравил(ФинансовыйПоказатель,Сценарий,БюджетированиеПоОрганизациям,Организация,СтруктураДанных,ИспользованиеКонтролируемыхЗначений,ФактическиеДанные = Ложь) Экспорт
	Запрос=Новый Запрос;
	
	ТекстГруппировка = "СГРУППИРОВАТЬ ПО
			|	УстановкаОграниченийПоБюджетам.ФинансовыйПоказатель,
			|	УстановкаОграниченийПоБюджетам.Сценарий";
	
	СтруктураРазрезов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокРазрезовСтатьи(ФинансовыйПоказатель);
	ТекстИзмерения 	= "";
	ТекстУсловие 	= "";
	ИменаРазрезов = Новый Массив;
	Для Каждого РазрезЭлемент Из СтруктураРазрезов Цикл
		ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
		Если НЕ СтруктураДанных.Свойство(ИмяРазреза) Тогда
			Продолжить;
		КонецЕсли;
		ИменаРазрезов.Добавить(ИмяРазреза);
		ТекстИзмерения = ТекстИзмерения +",
			|	 УстановкаОграниченийПоБюджетам."+ИмяРазреза+" КАК "+ИмяРазреза;
		ТекстУсловие = ТекстУсловие+" И
			|	(УстановкаОграниченийПоБюджетам."+ИмяРазреза+?(ФактическиеДанные=Ложь,"=&"," В(&")+ИмяРазреза+?(ФактическиеДанные=Истина,")","")+" ИЛИ УстановкаОграниченийПоБюджетам."+ИмяРазреза+" В (&СписокПустых_"+ИмяРазреза+"))";	
		Запрос.УстановитьПараметр(ИмяРазреза,СтруктураДанных[ИмяРазреза]);
		ТекстГруппировка = ТекстГруппировка+",
			|	УстановкаОграниченийПоБюджетам."+ИмяРазреза;
		СписокПустых = Новый СписокЗначений;
		СписокПустых.Добавить(Неопределено);
		ТипРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(РазрезЭлемент.Значение);
		МассивТипов = ТипРазреза.ТипЗначения.Типы();
		Для Каждого Тип Из МассивТипов Цикл
			нМассив = Новый Массив;
			нМассив.Добавить(Тип);
			Описание = Новый ОписаниеТипов(нМассив);
			СписокПустых.Добавить(Описание.ПривестиЗначение(""));
		КонецЦикла;
		Запрос.УстановитьПараметр("СписокПустых_"+ИмяРазреза,СписокПустых);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Организация",							Организация);
	Запрос.УстановитьПараметр("ФинансовыйПоказатель",					ФинансовыйПоказатель);
	Запрос.УстановитьПараметр("ИспользованиеКонтролируемогоЗначения",	ИспользованиеКонтролируемыхЗначений);	
	Запрос.УстановитьПараметр("Сценарий",								Сценарий);
	
	Если ТипЗнч(СтруктураДанных.Период) = Тип("Массив") Тогда
		МассивПериодов = СтруктураДанных.Период;
	Иначе
		МассивПериодов = Новый Массив;
		МассивПериодов.Добавить(СтруктураДанных.Период);
	КонецЕсли;
	
	
	Для Каждого Период Из МассивПериодов Цикл
		Запрос.УстановитьПараметр("Период"+Строка(МассивПериодов.Найти(Период)),									Период);
		Если МассивПериодов.Найти(Период)<>0 Тогда
			Запрос.Текст=Запрос.Текст+"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|"
		КонецЕсли;
		Запрос.Текст=Запрос.Текст+"ВЫБРАТЬ
		|	&Период"+Строка(МассивПериодов.Найти(Период))+" КАК Период,
		|	УстановкаОграниченийПоБюджетам.Сценарий КАК Сценарий,
		|	УстановкаОграниченийПоБюджетам.Отклонение КАК СуммаКонтроль,
		|	УстановкаОграниченийПоБюджетам.ФинансовыйПоказатель КАК ФинансовыйПоказатель"+ТекстИзмерения+"
		|ИЗ
		|	РегистрСведений.фин_НастройкиРегулярногоКонтроляПоказателей.СрезПоследних(&Период"+Строка(МассивПериодов.Найти(Период))+",ФинансовыйПоказатель=&ФинансовыйПоказатель И Сценарий=&Сценарий И ИспользованиеКонтролируемыхЗначений=&ИспользованиеКонтролируемогоЗначения) КАК УстановкаОграниченийПоБюджетам
		|
		|ГДЕ УстановкаОграниченийПоБюджетам.ПрименятьКонтроль И
		|	УстановкаОграниченийПоБюджетам.ВидКонтроля=ЗНАЧЕНИЕ(Перечисление.фин_ВидыКонтролируемогоЗначенияБюджета.Ограничивающее)"+ТекстУсловие;
	КонецЦикла;
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПроверитьПоказателиВСоответствииСПравиламиКонтроля(ТабРезультата,ТаблицаОборотовДокументаДляКонтроля,
								СтрокаОборотовДляКонтроля,ИменаРазрезов,Сценарий=Неопределено,
								СтруктураДанныхШапки,БюджетированиеПоОрганизациям,Организация,
								СтатьиИФинансовыеПоказатели=Неопределено,ФактическиеДанные=Ложь,
								ВалютаУправленческогоУчета=Неопределено,ПроверкаПройдена=Неопределено,ВозвращатьТаблицуВЛюбомСлучае=Ложь,РегистрироватьОбщееИсполнение = Ложь)  Экспорт
	КЭШ_РазрезовУчетаПоСтатьям = Новый Соответствие;							
	КонтрольПройден = Истина;
	Запрос=Новый Запрос;
	Если ТабРезультата.Количество()=0 Тогда
		
		Возврат ТабРезультата;
		
	Иначе
		
		Если ТабРезультата.Колонки.Найти("СуммаСценарияИсполнение")=Неопределено Тогда
			ТабРезультата.Колонки.Добавить("СуммаСценарияИсполнение");
		КонецЕсли;
		
		Если РегистрироватьОбщееИсполнение И ТабРезультата.Колонки.Найти("СуммаСценарияИсполнение")=Неопределено Тогда
			ТабРезультата.Колонки.Добавить("СуммаСценарияИсполнениеИтого");
		КонецЕсли;
		//Если ФактическиеДанные = Ложь Тогда
		//	ТабРезультата.Колонки.Добавить("Период");
		//КонецЕсли;
		
		Для каждого СтрокаПроверки Из ТабРезультата Цикл
			
			СтруктураПоискаОборотов = Новый Структура("ПериодПланирования,ФинансовыйПоказатель",СтрокаОборотовДляКонтроля.ПериодПланирования,СтрокаОборотовДляКонтроля.ФинансовыйПоказатель);
			
			ТекстФильтр = "";
			Для Каждого Разрез Из ИменаРазрезов Цикл
				Если НЕ фин_РаботаСДополнительнымиРазрезамиБюджетирования.УчетПоСтатьеПоРазрезу(СтрокаОборотовДляКонтроля.ФинансовыйПоказатель,Перечисления.фин_ФактическиеПоказателиБюджетирования[Разрез],КЭШ_РазрезовУчетаПоСтатьям) Тогда
					Продолжить;
				КонецЕсли;
				Если ТабРезультата.Колонки.Найти(Разрез)=Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаПроверки[Разрез]) Тогда
					СтруктураПоискаОборотов.Вставить(Разрез,СтрокаПроверки[Разрез]);
				КонецЕсли;
				ТекстФильтр = ТекстФильтр+" И 
				|			"+?(Найти(Разрез,"Разрез")=0,"","ДополнительныеРазрезы.")+Разрез+"=&"+Разрез;
				Запрос.УстановитьПараметр(Разрез,СтрокаПроверки[Разрез]);
			КонецЦикла;
			Если СтрокаПроверки.КонтролирующийСценарий.Пустая() Тогда
				ТекущийСценарий	= ?(ФактическиеДанные = Истина,	СтрокаПроверки.Сценарий,																						Сценарий);
				ДатаНачала		= ?(ФактическиеДанные = Ложь,	СтрокаОборотовДляКонтроля.ПериодПланирования,																	фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаОборотовДляКонтроля.Период, фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(ТекущийСценарий)));
				ДатаКонца  		= ?(ФактическиеДанные = Ложь, 	фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ДатаНачала,СтруктураДанныхШапки.Сценарий),	фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ДатаНачала,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СтрокаПроверки.Сценарий)));
			Иначе
				ТекущийСценарий=СтрокаПроверки.КонтролирующийСценарий;				
				ДатаНачала = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(?(ФактическиеДанные,СтрокаОборотовДляКонтроля.Период,СтрокаОборотовДляКонтроля.ПериодПланирования), фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(ТекущийСценарий));
				ДатаКонца  = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ДатаНачала,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(ТекущийСценарий));
			КонецЕсли;
			
			Если ФактическиеДанные=Ложь Тогда
				СуммаСценария=СтрокаОборотовДляКонтроля.СуммаСценария;
			Иначе
				СуммаУпр	= СтрокаОборотовДляКонтроля.СуммаУпр;
				// пересчет в валюту сценария
				ВалютаСценария = ?(ЗначениеЗаполнено(СтрокаПроверки.КонтролирующийСценарий),СтрокаПроверки.КонтролирующийСценарий.Валюта,фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета"));
				
				Если ВалютаСценария = СтрокаОборотовДляКонтроля.Валюта Тогда
					СуммаСценария = СтрокаОборотовДляКонтроля.ВалютнаяСумма;
					Если ВалютаСценария <> ВалютаУправленческогоУчета Тогда
						Курс 		= фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ВалютаСценария,ДатаНачала);
						КурсУпр 	= фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ВалютаУправленческогоУчета,ДатаНачала);
					КонецЕсли;
				ИначеЕсли ВалютаСценария = ВалютаУправленческогоУчета Тогда
					СуммаСценария = СуммаУпр;
				Иначе
					Курс 		= фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ВалютаСценария,ДатаНачала);
					КурсУпр 	= фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ВалютаУправленческогоУчета,ДатаНачала);
					СуммаСценария=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаУпр,
					ВалютаУправленческогоУчета,ВалютаСценария,
					КурсУпр.Курс,Курс.Курс,
					КурсУпр.Кратность,Курс.Кратность);
				КонецЕсли;
			КонецЕсли;
			
			ДополнительныеСуммы = 0;
			ДополнительныеСуммыВВалютеСценария = 0;
			
			СтрокиПоискаСумм = ТаблицаОборотовДокументаДляКонтроля.НайтиСтроки(СтруктураПоискаОборотов);
			Для Каждого СтрокаСумм Из СтрокиПоискаСумм Цикл
				Если СтрокаСумм <> СтрокаОборотовДляКонтроля Тогда
					Если ФактическиеДанные=Истина Тогда
						Если СтрокаСумм.Валюта = ВалютаСценария Тогда
							ДополнительныеСуммыВВалютеСценария = ДополнительныеСуммыВВалютеСценария + СтрокаСумм["ВалютнаяСумма"];
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					ДополнительныеСуммы = ДополнительныеСуммы + СтрокаСумм[?(ФактическиеДанные=Истина,"СуммаУпр","СуммаСценария")];
				КонецЕсли;
			КонецЦикла;
			
			Если ФактическиеДанные=Истина Тогда
				Если ВалютаСценария <> ВалютаУправленческогоУчета Тогда
					ДополнительныеСуммы=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(ДополнительныеСуммы,
					ВалютаУправленческогоУчета,ВалютаСценария,
					КурсУпр.Курс,Курс.Курс,
					КурсУпр.Кратность,Курс.Кратность);
				КонецЕсли;
			КонецЕсли;
			
			СуммаСценарияПолная =СуммаСценария + ДополнительныеСуммы + ДополнительныеСуммыВВалютеСценария;
			
			Запрос.Текст="ВЫБРАТЬ
			|	СУММА(КонтролируемыеФинансовыеПоказателиОбороты.СуммаСценарияКонтрольОборот) КАК СуммаКонтроль,
			|	СУММА(КонтролируемыеФинансовыеПоказателиОбороты.СуммаСценарияИсполнениеОборот) КАК СуммаИсполнение
			|ИЗ
			|	РегистрНакопления.фин_КонтролируемыеФинансовыеПоказатели.Обороты(, , ,ПериодПланирования>=&ДатаНачала И ПериодПланирования<=&ДатаОкончания И "+?(БюджетированиеПоОрганизациям,"Организация = &Организация И ","")+" 
			|					КонтролирующийСценарий=&КонтролирующийСценарий И
			|					ФинансовыйПоказатель=&ФинансовыйПоказатель И 
			|					Сценарий=&Сценарий И 
			|					ИспользованиеКонтролируемогоЗначения=&ИспользованиеКонтролируемогоЗначения"+ТекстФильтр+"
			|					) КАК КонтролируемыеФинансовыеПоказателиОбороты";		
			
			Запрос.УстановитьПараметр("Организация",							Организация);
			Запрос.УстановитьПараметр("ДатаНачала",								ДатаНачала);
			Запрос.УстановитьПараметр("ДатаОкончания",							ДатаКонца);
			Запрос.УстановитьПараметр("КонтролирующийСценарий",					СтрокаПроверки.КонтролирующийСценарий);
			Запрос.УстановитьПараметр("ФинансовыйПоказатель",					СтрокаПроверки.ФинансовыйПоказатель);
			Запрос.УстановитьПараметр("Сценарий",								?(ФактическиеДанные=Ложь,Сценарий,СтрокаПроверки.Сценарий));
			Запрос.УстановитьПараметр("ИспользованиеКонтролируемогоЗначения",	Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов[?(ФактическиеДанные=Истина,"ПриИсполнении","ПриПланировании")]);
			
			СуммаКонтроль=0;
			СуммаИсполнение=0;
			
			Результат = Запрос.Выполнить();
			Выборка=Результат.Выбрать();
			Если Выборка.Следующий() И (НЕ Выборка["СуммаКонтроль"]=NULL) И (НЕ Выборка["СуммаИсполнение"]=NULL) Тогда
				СуммаКонтроль	=Выборка["СуммаКонтроль"]*?(ФактическиеДанные=Ложь,1,фин_РегистрацияФактическихДанныхПоБюджетированию.РазрядностьПланирования());
				СуммаИсполнение	=Выборка["СуммаИсполнение"]+СуммаСценарияПолная;
				Если РегистрироватьОбщееИсполнение Тогда
					СтрокаПроверки.СуммаСценарияИсполнениеИтого=Выборка["СуммаИсполнение"];
				КонецЕсли;
			КонецЕсли;
			
			Если СуммаИсполнение>СуммаКонтроль Тогда
				
				ТекстСообщения="Оборот приведет к превышению контролируемого значения!
				|	Контролирующий сценарий: "+ ТекущийСценарий+"
				|	Период планирования: "+Формат(ДатаНачала,"ДФ=dd.MM.yyyy")+" - "+Формат(ДатаКонца,"ДФ=dd.MM.yyyy");
				
				Если Не СтрокаПроверки.ФинансовыйПоказатель.Пустая() Тогда
					
					ТекстСообщения=ТекстСообщения+"
					|	Финансовый показатель: "+СтрокаПроверки.ФинансовыйПоказатель;
					
				КонецЕсли;
				
				Для Каждого Разрез Из ИменаРазрезов Цикл
					Если НЕ фин_РаботаСДополнительнымиРазрезамиБюджетирования.УчетПоСтатьеПоРазрезу(СтрокаПроверки.ФинансовыйПоказатель,Перечисления.фин_ФактическиеПоказателиБюджетирования[Разрез],КЭШ_РазрезовУчетаПоСтатьям) Тогда
						Продолжить;
					КонецЕсли;
					Если ТабРезультата.Колонки.Найти(Разрез)=Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрокаПроверки[Разрез]) Тогда
						
						ТекстСообщения=ТекстСообщения+"
						|	"+фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Перечисления.фин_ФактическиеПоказателиБюджетирования[Разрез])+": "+СтрокаПроверки[Разрез];
						
					КонецЕсли;
				КонецЦикла;
				ВалютаОперации = ?(ФактическиеДанные=Ложь,СтруктураДанныхШапки.Сценарий.Валюта,СтрокаПроверки.Сценарий.Валюта);
				ТекстСообщения=ТекстСообщения+"
				|	Контролируемое значение: "+СуммаКонтроль+" "+ВалютаОперации+"
				|	Значение с учетом суммы операции: "+СуммаИсполнение+" "+ВалютаОперации;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				Если СтатьиИФинансовыеПоказатели <>Неопределено Тогда
					СтрокиДляСтатьи = СтатьиИФинансовыеПоказатели.НайтиСтроки(Новый Структура("ФинансовыйПоказатель",СтрокаПроверки.ФинансовыйПоказатель));
					СписокСтатей = Новый СписокЗначений;
					Для Каждого СтрокаСтатей Из СтрокиДляСтатьи Цикл
						Если (Не СтрокаСтатей.СтатьяБюджета.Пустая()) И СписокСтатей.НайтиПоЗначению(СтрокаСтатей.СтатьяБюджета)= Неопределено Тогда
							СписокСтатей.Добавить(СтрокаСтатей.СтатьяБюджета);
						КонецЕсли;
					КонецЦикла;
					Если СписокСтатей.Количество() >0 Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Проверьте суммы по статьям бюджета:");
						Для Каждого Элемент Из СписокСтатей Цикл
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Символы.Таб+" - "+Строка(Элемент.Значение));
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				КонтрольПройден = Ложь;
			КонецЕсли;
			СтрокаПроверки.СуммаСценарияИсполнение=СуммаСценария;
			СтрокаПроверки.Период=ДатаНачала;
		КонецЦикла; 
	КонецЕсли;
	Если ПроверкаПройдена=Неопределено Тогда
		Возврат ?(КонтрольПройден ИЛИ ВозвращатьТаблицуВЛюбомСлучае=Истина,ТабРезультата,Ложь);
	Иначе
		ПроверкаПройдена = КонтрольПройден;
		Возврат ТабРезультата;
	КонецЕсли;
КонецФункции

//Процедура ВывестиЛимиты
//
Процедура ВывестиЛимиты(СтрокаОборотовДляКонтроля,ЗависимаяСтатья,БюджетированиеПоОрганизациям,Документ,СтруктураПараметровОтбора,ТаблицаЛимитов,Разрезы) Экспорт
	
	Запрос=Новый Запрос;
	
	СтруктураРазрезов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокРазрезовСтатьи(СтрокаОборотовДляКонтроля.СтатьяБюджета.ФинансовыйПоказатель);
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Период",СтрокаОборотовДляКонтроля.Период);
	ИменаРазрезов = Новый Массив;
	Для Каждого РазрезЭлемент Из СтруктураРазрезов Цикл
		ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
		Если НЕ СтрокаОборотовДляКонтроля.Свойство(ИмяРазреза) Тогда
			Продолжить;
		КонецЕсли;
		СтруктураДанных.Вставить(ИмяРазреза,СтрокаОборотовДляКонтроля[ИмяРазреза]);
		ИменаРазрезов.Добавить(ИмяРазреза);
	КонецЦикла;
	ВалютаОперации = ?(Документ.ЕдинаяВалюта,Документ.ВалютаДокумента,СтрокаОборотовДляКонтроля.ВалютаОперации);
	
	ТабРезультата=фин_УправлениеЗависимостямиСтатейБюджетов.ПолучитьТаблицуКонтролирующихПравил(СтрокаОборотовДляКонтроля.СтатьяБюджета.ФинансовыйПоказатель,СтрокаОборотовДляКонтроля.Сценарий,БюджетированиеПоОрганизациям,Документ.Организация,СтруктураДанных,Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриПланировании);
	
	Если ТабРезультата.Количество()=0 Тогда
		ВывестиФиксированныеЛимиты(СтрокаОборотовДляКонтроля,ЗависимаяСтатья,БюджетированиеПоОрганизациям,Документ,СтруктураПараметровОтбора,ТаблицаЛимитов,Разрезы);
	Иначе
		Для каждого СтрокаПроверки Из ТабРезультата Цикл
			Если СтрокаПроверки.КонтролирующийСценарий.Пустая() Тогда
				ТекущийСценарий	= СтрокаОборотовДляКонтроля.Сценарий;
				ДатаНачала		= СтрокаПроверки.Период;
				ДатаКонца  		= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ДатаНачала,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СтрокаОборотовДляКонтроля.Сценарий));
			Иначе
				ТекущийСценарий	= СтрокаПроверки.КонтролирующийСценарий;				
				ДатаНачала 		= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаПроверки.Период, фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(ТекущийСценарий));
				ДатаКонца  		= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ДатаНачала,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(ТекущийСценарий));
			КонецЕсли;
			ТекстФильтр = "";
			Для Каждого Разрез Из ИменаРазрезов Цикл
				ТекстФильтр = ТекстФильтр+" И 
				|			"+?(Найти(Разрез,"Разрез")=0,"","ДополнительныеРазрезы.")+Разрез+"=&"+Разрез;
				Запрос.УстановитьПараметр(Разрез,СтрокаПроверки[Разрез]);
			КонецЦикла;
			Запрос.Текст="ВЫБРАТЬ
			|	СУММА(КонтролируемыеФинансовыеПоказателиОбороты.СуммаСценарияКонтрольОборот) КАК СуммаКонтроль,
			|	СУММА(КонтролируемыеФинансовыеПоказателиОбороты.СуммаСценарияИсполнениеОборот) КАК СуммаИсполнение
			|ИЗ
			|	РегистрНакопления.фин_КонтролируемыеФинансовыеПоказатели.Обороты(, ,Регистратор,"+?(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям"),"Организация = &Организация И ","")+" 
			|					КонтролирующийСценарий=&КонтролирующийСценарий И ПериодПланирования>= &ДатаНачала И ПериодПланирования<=&ДатаКонца И
			|					ФинансовыйПоказатель=&ФинансовыйПоказатель И 
			|					Сценарий=&Сценарий И 
			|					ИспользованиеКонтролируемогоЗначения=&ИспользованиеКонтролируемогоЗначения"+ТекстФильтр+"
			|					) КАК КонтролируемыеФинансовыеПоказателиОбороты
			|	ГДЕ КонтролируемыеФинансовыеПоказателиОбороты.Регистратор <>&Ссылка";		
			
			Запрос.УстановитьПараметр("Организация",			Документ.Организация);
			Запрос.УстановитьПараметр("ДатаНачала",				ДатаНачала);
			Запрос.УстановитьПараметр("ДатаКонца",				ДатаКонца);
			Запрос.УстановитьПараметр("КонтролирующийСценарий",	СтрокаПроверки.КонтролирующийСценарий);
			Запрос.УстановитьПараметр("ФинансовыйПоказатель",	СтрокаПроверки.ФинансовыйПоказатель);
			Запрос.УстановитьПараметр("Сценарий",				СтрокаОборотовДляКонтроля.Сценарий);
			Запрос.УстановитьПараметр("ИспользованиеКонтролируемогоЗначения",Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриПланировании);
			Запрос.УстановитьПараметр("Ссылка",					Документ.Ссылка);
			
			СуммаКонтроль=0;
			СуммаИсполнение=0;
			
			Результат = Запрос.Выполнить();
			Выборка=Результат.Выбрать();
			Если Выборка.Следующий() И (НЕ Выборка["СуммаКонтроль"]=NULL) И (НЕ Выборка["СуммаИсполнение"]=NULL) Тогда
				СуммаКонтроль	= ПересчитатьИзКурсаСценария(Выборка["СуммаКонтроль"],	ДатаНачала,ВалютаОперации,Документ);
				СуммаИсполнение	= ПересчитатьИзКурсаСценария(Выборка["СуммаИсполнение"],ДатаНачала,ВалютаОперации,Документ);
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("ПериодПланирования,ФинансовыйПоказатель",ДатаНачала,СтрокаПроверки.ФинансовыйПоказатель);
			ВсеИзмеренияУказаны = Истина;
			Для Каждого Разрез Из ИменаРазрезов Цикл
				Если ЗначениеЗаполнено(СтрокаПроверки[Разрез]) Тогда
					СтруктураПоиска.Вставить(Разрез,СтрокаПроверки[Разрез]);
				Иначе
					ВсеИзмеренияУказаны = Ложь;
				КонецЕсли;
			КонецЦикла;
			СуммаНабраннаяВБюджете = 0;
			Если НЕ ВсеИзмеренияУказаны Тогда
				СтрокиБюджета = Документ.ОборотыПоСтатьям.НайтиСтроки(СтруктураПоиска);
				Для Каждого СтрокаБюджета Из СтрокиБюджета Цикл
					ДопустимаяСтрока = Истина;
					Для Каждого Разрез Из ИменаРазрезов Цикл
						Если НЕ ((НЕ СтруктураПараметровОтбора.Свойство(Разрез)) ИЛИ (СтруктураПараметровОтбора.Свойство(Разрез) И СтрокаБюджета[Разрез] = СтруктураПараметровОтбора[Разрез])) Тогда
							ДопустимаяСтрока = Ложь;
						КонецЕсли;
					КонецЦикла;
					Если (НЕ ЗависимаяСтатья) И ДопустимаяСтрока Тогда
						// нам эта сумма не нужна
					Иначе
						СуммаНабраннаяВБюджете = СуммаНабраннаяВБюджете + ПересчитатьИзКурсаОперации(СтрокаБюджета.Сумма,ДатаНачала,СтрокаБюджета.ВалютаОперации,ВалютаОперации,Документ);
					КонецЕсли;
				КонецЦикла;
				СтрокиБюджета = Документ.ЗависимыеОбороты.НайтиСтроки(СтруктураПоиска);
				Для Каждого СтрокаБюджета Из СтрокиБюджета Цикл
					ДопустимаяСтрока = Истина;
					Для Каждого Разрез Из ИменаРазрезов Цикл
						Если НЕ ((НЕ СтруктураПараметровОтбора.Свойство(Разрез)) ИЛИ (СтруктураПараметровОтбора.Свойство(Разрез) И СтрокаБюджета[Разрез] = СтруктураПараметровОтбора[Разрез])) Тогда
							ДопустимаяСтрока = Ложь;
						КонецЕсли;
					КонецЦикла;
					Если (ЗависимаяСтатья) И ДопустимаяСтрока Тогда
						// нам эта сумма не нужна
					Иначе
						СуммаНабраннаяВБюджете = СуммаНабраннаяВБюджете + ПересчитатьИзКурсаОперации(СтрокаБюджета.Сумма,ДатаНачала,СтрокаБюджета.ВалютаОперации,ВалютаОперации,Документ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			СтрокаЛимита 				= ТаблицаЛимитов.Добавить();
			СтрокаЛимита.Период 		= ДатаНачала;
			СтрокаЛимита.Лимит 			= СуммаКонтроль;
			СтрокаЛимита.ВыбранныйЛимит = СуммаИсполнение+СуммаНабраннаяВБюджете;
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры //ВывестиЛимиты

//Процедура ВывестиЛимиты
//
Процедура ВывестиФиксированныеЛимиты(СтрокаОборотовДляКонтроля,ЗависимаяСтатья,БюджетированиеПоОрганизациям,Документ,СтруктураПараметровОтбора,ТаблицаЛимитов,Разрезы) Экспорт
	
	Запрос=Новый Запрос;
	
	СтруктураРазрезов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокРазрезовСтатьи(СтрокаОборотовДляКонтроля.СтатьяБюджета.ФинансовыйПоказатель);
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Период",СтрокаОборотовДляКонтроля.Период);
	ВалютаОперации = СтрокаОборотовДляКонтроля.ВалютаОперации;
	ИменаРазрезов = Новый Массив;
	Для Каждого РазрезЭлемент Из СтруктураРазрезов Цикл
		ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
		Если НЕ СтрокаОборотовДляКонтроля.Свойство(ИмяРазреза) Тогда
			Продолжить;
		КонецЕсли;
		СтруктураДанных.Вставить(ИмяРазреза,СтрокаОборотовДляКонтроля[ИмяРазреза]);
		ИменаРазрезов.Добавить(ИмяРазреза);
	КонецЦикла;
	
	ТабРезультата=ПолучитьТаблицуФиксированныхКонтролирующихПравил(СтрокаОборотовДляКонтроля.СтатьяБюджета.ФинансовыйПоказатель,СтрокаОборотовДляКонтроля.Сценарий,БюджетированиеПоОрганизациям,Документ.Организация,СтруктураДанных,Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриПланировании);
	
	Если ТабРезультата.Количество()=0 Тогда
		Возврат;
	Иначе
		Для каждого СтрокаПроверки Из ТабРезультата Цикл
			ТекущийСценарий	= СтрокаОборотовДляКонтроля.Сценарий;
			ДатаНачала		= СтрокаПроверки.Период;
			ДатаКонца  		= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ДатаНачала,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СтрокаОборотовДляКонтроля.Сценарий));
			ТекстФильтр = "";
			Для Каждого Разрез Из ИменаРазрезов Цикл
				ТекстФильтр = ТекстФильтр+" И 
				|			"+?(Найти(Разрез,"Разрез")=0,"","ДополнительныеРазрезы.")+Разрез+"=&"+Разрез;
				Запрос.УстановитьПараметр(Разрез,СтрокаПроверки[Разрез]);
			КонецЦикла;
			Запрос.Текст="ВЫБРАТЬ
			|	СУММА(КонтролируемыеФинансовыеПоказателиОбороты.СуммаСценарияОборот) КАК СуммаИсполнение
			|ИЗ
			|	РегистрНакопления.фин_ОборотыБюджетов.Обороты(, ,,"+?(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям"),"Организация = &Организация И ","")+" 
			|					ПериодПланирования>= &ДатаНачала И ПериодПланирования<=&ДатаКонца И
			|					ФинансовыйПоказатель=&ФинансовыйПоказатель И 
			|					Сценарий=&Сценарий И
			|					ДокументПланирования <> &Ссылка
			|					"+ТекстФильтр+"
			|					) КАК КонтролируемыеФинансовыеПоказателиОбороты";		
			
			Запрос.УстановитьПараметр("Организация",			Документ.Организация);
			Запрос.УстановитьПараметр("ДатаНачала",				ДатаНачала);
			Запрос.УстановитьПараметр("ДатаКонца",				ДатаКонца);
			Запрос.УстановитьПараметр("ФинансовыйПоказатель",	СтрокаПроверки.ФинансовыйПоказатель);
			Запрос.УстановитьПараметр("Сценарий",				СтрокаОборотовДляКонтроля.Сценарий);
			Запрос.УстановитьПараметр("ИспользованиеКонтролируемогоЗначения",Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриПланировании);
			Запрос.УстановитьПараметр("Ссылка",					Документ.Ссылка);
			
			СуммаКонтроль	= ПересчитатьИзКурсаУпр(СтрокаПроверки["СуммаКонтроль"],	ДатаНачала,ВалютаОперации,Документ);
			СуммаИсполнение=0;
			
			Результат = Запрос.Выполнить();
			Выборка=Результат.Выбрать();
			Если Выборка.Следующий() И (НЕ Выборка["СуммаИсполнение"]=NULL) Тогда
				СуммаИсполнение	= ПересчитатьИзКурсаСценария(Выборка["СуммаИсполнение"],ДатаНачала,ВалютаОперации,Документ);
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("ПериодПланирования,ФинансовыйПоказатель",ДатаНачала,СтрокаПроверки.ФинансовыйПоказатель);
			ВсеИзмеренияУказаны = Истина;
			Для Каждого Разрез Из ИменаРазрезов Цикл
				Если ЗначениеЗаполнено(СтрокаПроверки[Разрез]) Тогда
					СтруктураПоиска.Вставить(Разрез,СтрокаПроверки[Разрез]);
				Иначе
					ВсеИзмеренияУказаны = Ложь;
				КонецЕсли;
			КонецЦикла;
			СуммаНабраннаяВБюджете = 0;
			Если НЕ ВсеИзмеренияУказаны Тогда
				СтрокиБюджета = Документ.ОборотыПоСтатьям.НайтиСтроки(СтруктураПоиска);
				Для Каждого СтрокаБюджета Из СтрокиБюджета Цикл
					ДопустимаяСтрока = Истина;
					Для Каждого Разрез Из ИменаРазрезов Цикл
						Если НЕ ((НЕ СтруктураПараметровОтбора.Свойство(Разрез)) ИЛИ (СтруктураПараметровОтбора.Свойство(Разрез) И СтрокаБюджета[Разрез] = СтруктураПараметровОтбора[Разрез])) Тогда
							ДопустимаяСтрока = Ложь;
						КонецЕсли;
					КонецЦикла;
					Если (НЕ ЗависимаяСтатья) И ДопустимаяСтрока Тогда
						// нам эта сумма не нужна
					Иначе
						СуммаНабраннаяВБюджете = СуммаНабраннаяВБюджете + ПересчитатьИзКурсаОперации(СтрокаБюджета.Сумма,ДатаНачала,СтрокаБюджета.ВалютаОперации,ВалютаОперации,Документ);
					КонецЕсли;
				КонецЦикла;
				СтрокиБюджета = Документ.ЗависимыеОбороты.НайтиСтроки(СтруктураПоиска);
				Для Каждого СтрокаБюджета Из СтрокиБюджета Цикл
					ДопустимаяСтрока = Истина;
					Для Каждого Разрез Из ИменаРазрезов Цикл
						Если НЕ ((НЕ СтруктураПараметровОтбора.Свойство(Разрез)) ИЛИ (СтруктураПараметровОтбора.Свойство(Разрез) И СтрокаБюджета[Разрез] = СтруктураПараметровОтбора[Разрез])) Тогда
							ДопустимаяСтрока = Ложь;
						КонецЕсли;
					КонецЦикла;
					Если (ЗависимаяСтатья) И ДопустимаяСтрока Тогда
						// нам эта сумма не нужна
					Иначе
						СуммаНабраннаяВБюджете = СуммаНабраннаяВБюджете + ПересчитатьИзКурсаОперации(СтрокаБюджета.Сумма,ДатаНачала,СтрокаБюджета.ВалютаОперации,ВалютаОперации,Документ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			СтрокаЛимита 				= ТаблицаЛимитов.Добавить();
			СтрокаЛимита.Период 		= ДатаНачала;
			СтрокаЛимита.Лимит 			= СуммаКонтроль;
			СтрокаЛимита.ВыбранныйЛимит = СуммаИсполнение+СуммаНабраннаяВБюджете;
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры //ВывестиЛимиты


//пересчитывает сумму из валюты сценария
//
Функция ПересчитатьИзКурсаСценария(Сумма,ДатаПланирования,ВалютаОперации,Документ)
	ВалютаСценария = Документ.Сценарий.Валюта;
	мСтарый 	= фин_УправлениеБюджетированием.КурсВалютыПоСценарию(ВалютаСценария, 	ДатаПланирования, 	Документ.Сценарий);
	мНовый	 	= фин_УправлениеБюджетированием.КурсВалютыПоСценарию(ВалютаОперации, 		ДатаПланирования, 	Документ.Сценарий);
	СтарыйКурс		=	мСтарый.Курс;
	СтараяКратность	=	мСтарый.Кратность;
	НовыйКурс		=	мНовый.Курс;
	НоваяКратность	=	мНовый.Кратность;
	ТекСумма=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(Сумма,
										ВалютаСценария,ВалютаОперации,
										СтарыйКурс,НовыйКурс,
										СтараяКратность,НоваяКратность);
	Возврат ТекСумма;	
КонецФункции // ПересчитатьИзКурсаСценария

//пересчитывает сумму из валюты сценария
//
Функция ПересчитатьИзКурсаУпр(Сумма,ДатаПланирования,ВалютаОперации,Документ)
	ВалютаСценария = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	мСтарый 	= фин_УправлениеБюджетированием.КурсВалютыПоСценарию(ВалютаСценария, 	ДатаПланирования, 	Документ.Сценарий);
	мНовый	 	= фин_УправлениеБюджетированием.КурсВалютыПоСценарию(ВалютаОперации, 		ДатаПланирования, 	Документ.Сценарий);
	СтарыйКурс		=	мСтарый.Курс;
	СтараяКратность	=	мСтарый.Кратность;
	НовыйКурс		=	мНовый.Курс;
	НоваяКратность	=	мНовый.Кратность;
	ТекСумма=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(Сумма,
										ВалютаСценария,ВалютаОперации,
										СтарыйКурс,НовыйКурс,
										СтараяКратность,НоваяКратность);
	Возврат ТекСумма;	
КонецФункции // ПересчитатьИзКурсаСценария

//пересчитывает сумму из валюты сценария
//
Функция ПересчитатьИзКурсаОперации(Сумма,ДатаПланирования,ВалютаОперации,ВалютаОперацииНовая,Документ) Экспорт
	Если Документ.ЗадаватьКурсыВалютВДокументе Тогда
		СтрокиКурсов = Документ.КурсыВалютДокумента.НайтиСтроки(Новый Структура("Валюта,ПериодПланирования",ВалютаОперации,ДатаПланирования));
		Если СтрокиКурсов.Количество()>0 Тогда
			мСтарый 	= Новый Структура("Курс,Кратность",СтрокиКурсов[0].Курс,СтрокиКурсов[0].Кратность);
		Иначе
			мСтарый 	= фин_УправлениеБюджетированием.КурсВалютыПоСценарию(ВалютаОперации, 	ДатаПланирования, 	Документ.Сценарий);
		КонецЕсли;
		СтрокиКурсов = Документ.КурсыВалютДокумента.НайтиСтроки(Новый Структура("Валюта,ПериодПланирования",ВалютаОперацииНовая,ДатаПланирования));
		Если СтрокиКурсов.Количество()>0 Тогда
			мНовый 	= Новый Структура("Курс,Кратность",СтрокиКурсов[0].Курс,СтрокиКурсов[0].Кратность);
		Иначе
			мНовый 	= фин_УправлениеБюджетированием.КурсВалютыПоСценарию(ВалютаОперацииНовая, 	ДатаПланирования, 	Документ.Сценарий);
		КонецЕсли;
	Иначе
		мСтарый 	= фин_УправлениеБюджетированием.КурсВалютыПоСценарию(ВалютаОперации, 	ДатаПланирования, 	Документ.Сценарий);
		мНовый	 	= фин_УправлениеБюджетированием.КурсВалютыПоСценарию(ВалютаОперацииНовая, 	ДатаПланирования, 	Документ.Сценарий);
	КонецЕсли;
	СтарыйКурс		=	мСтарый.Курс;
	СтараяКратность	=	мСтарый.Кратность;
	НовыйКурс		=	мНовый.Курс;
	НоваяКратность	=	мНовый.Кратность;
	ТекСумма=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(Сумма,
										ВалютаОперации,ВалютаОперацииНовая,
										СтарыйКурс,НовыйКурс,
										СтараяКратность,НоваяКратность);
	Возврат ТекСумма;	
КонецФункции // ПересчитатьИзКурсаСценария
