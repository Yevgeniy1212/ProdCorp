
//Получить список показателей отчета
//
Функция ПолучитьСписокПоказателейОтчета(ИмяВидаОтчетов) Экспорт
	
	НаборПоказателей = Новый СписокЗначений;
	
	СКД = Отчеты[ИмяВидаОтчетов].ПолучитьМакет(Метаданные.Отчеты[ИмяВидаОтчетов].ОсновнаяСхемаКомпоновкиДанных.Имя);
	ПоляОтчета = НаборПолейОтчета(СКД);
	Для Каждого ПолеИтога Из СКД.ПоляИтога Цикл
		НаборПоказателей.Добавить(ПолеИтога.ПутьКДанным,ПоляОтчета.НайтиПоЗначению(ПолеИтога.ПутьКДанным).Представление);
	КонецЦикла;
	
	Возврат НаборПоказателей;
	
КонецФункции

//Получить список группировок отчета
//
Функция ПолучитьСписокГруппировокОтчета(ИмяВидаОтчетов) Экспорт
	
	НаборГруппировок = Новый СписокЗначений;
	
	СКД = Отчеты[ИмяВидаОтчетов].ПолучитьМакет(Метаданные.Отчеты[ИмяВидаОтчетов].ОсновнаяСхемаКомпоновкиДанных.Имя);
	ПоляОтчета = НаборПолейОтчета(СКД);
	Для Каждого ПолеГруппировок Из ПоляОтчета Цикл
		Если ПолеГруппировок.Пометка Тогда
			НаборГруппировок.Добавить(ПолеГруппировок.Значение,ПолеГруппировок.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НаборГруппировок;
	
КонецФункции

Функция НаборПолейОтчета(СКД)
	СписокПолей = Новый СписокЗначений;
	Для Каждого НаборДанных Из СКД.НаборыДанных Цикл
		Для Каждого ПолеНабора Из НаборДанных.Поля Цикл
			Если СписокПолей.НайтиПоЗначению(ПолеНабора.ПутьКДанным)<>Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Поле = СписокПолей.Добавить(ПолеНабора.ПутьКДанным,ЗаголовокПоля(ПолеНабора));
			Если ПолеНабора.Роль.Измерение=Истина И НЕ ПолеНабора.ОграничениеИспользования.Группировка Тогда
				Поле.Пометка = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого ПолеНабора Из СКД.ВычисляемыеПоля Цикл
		Если СписокПолей.НайтиПоЗначению(ПолеНабора.ПутьКДанным)<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Поле = СписокПолей.Добавить(ПолеНабора.ПутьКДанным,ЗаголовокПоля(ПолеНабора));
	КонецЦикла;
	Возврат СписокПолей;
КонецФункции

Функция ЗаголовокПоля(ПолеСКД)
	Если ПолеСКД.Заголовок<>"" Тогда
		Возврат ПолеСКД.Заголовок;
	Иначе
		ИмяПоля 	= ПолеСКД.ПутьКДанным;
		ТекстСтрока	= "";
		Для Инд = 1 По СтрДлина(ИмяПоля) Цикл
			Символ = Сред(ИмяПоля,Инд,1);
			Если Инд<>1 И ВРег(Символ) = Символ Тогда
				ТекстСтрока = ТекстСтрока + " ";
			КонецЕсли;
			ТекстСтрока = ТекстСтрока + ?(Инд=1,ВРег(Символ),НРег(Символ));
		КонецЦикла;
	КонецЕсли;
	Возврат ТекстСтрока;
КонецФункции

//Обработка проверки заполнения
//
Процедура ОбработкаПроверкиЗаполнения(ОтчетОбъект, Отказ, Проверки = Неопределено) Экспорт
	
	Если Проверки = Неопределено Тогда
		Проверки = Новый Структура("КорректностьПериода, ВыборПоказателя", Истина, Истина);
	КонецЕсли;
	
	Если Проверки.Свойство("КорректностьПериода") И Проверки.КорректностьПериода Тогда
		Если ЗначениеЗаполнено(ОтчетОбъект.КонецПериода) И ОтчетОбъект.НачалоПериода > ОтчетОбъект.КонецПериода Тогда
			ТекстСообщения = НСтр("ru = 'Дата начала периода не может быть больше даты конца периода'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Отчет.НачалоПериода",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	//Если Проверки.Свойство("ВыборПоказателя") И Проверки.ВыборПоказателя Тогда
	//	КоличествоПоказателей = 0;
	//	ПервыйПоказатель = "";
	//	НаборПоказателей = Отчеты[ОтчетОбъект.Метаданные().Имя].ПолучитьНаборПоказателей();
	//	Для Каждого ЭлементНабора Из НаборПоказателей Цикл
	//		КоличествоПоказателей = КоличествоПоказателей + (ОтчетОбъект["Показатель" + ЭлементНабора] И ЭлементНабора <> "РазвернутоеСальдо");
	//		Если ПустаяСтрока(ПервыйПоказатель) Тогда
	//			ПервыйПоказатель = "Показатель" + ЭлементНабора;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	Если КоличествоПоказателей = 0 И НаборПоказателей.Количество() > 0 Тогда
	//		ТекстСообщения = НСтр("ru = 'Не выбран показатель(и)'");
	//		
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Отчет." + ПервыйПоказатель,, Отказ);
	//	КонецЕсли;
	//КонецЕсли;
	
	Если Проверки.Свойство("СписокОрганизаций") И Проверки.СписокОрганизаций Тогда
		
		Если НЕ ЗначениеЗаполнено(ОтчетОбъект.ПредставлениеСпискаОрганизаций) Тогда
			ТекстСообщения = НСтр("ru = 'Не указана организация.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Отчет.ПредставлениеСпискаОрганизаций",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//При создании на сервере
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Отчет     = Форма.Отчет;
	Параметры = Форма.Параметры;
	//Если Параметры.Свойство("РежимРасшифровки") Тогда 
	//	Отчет.РежимРасшифровки = Параметры.РежимРасшифровки;
	//КонецЕсли;
	
	//Если ЕстьЭлементФормы(Форма, "ВидПериода") Тогда
	//	ВыборПериодаКлиентСервер.ЗаполнитьСписокВыбораВидПериода(Перечисления.ДоступныеПериодыОтчета.День,
	//		Форма.Элементы.ВидПериода.СписокВыбора, Форма.ВидПериода);
	//КонецЕсли;
	
	Если ЕстьРеквизитФормы(Форма, "ПоддержкаРаботыСоСтруктурнымиПодразделениями") Тогда
		Форма.ПоддержкаРаботыСоСтруктурнымиПодразделениями = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(Форма, "УчетПоВсемОрганизациям") Тогда
		Форма.УчетПоВсемОрганизациям = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("УчетПоВсемОрганизациям");
	КонецЕсли;
	
	Если Параметры.Свойство("ВидРасшифровки") Тогда 
		// 1 - из временного хранилища, 2 - из параметров формы
		Если Параметры.ВидРасшифровки = 1 Тогда
			ДанныеОбъекта = ПолучитьИзВременногоХранилища(Параметры.АдресНастроек);
			ПользовательскиеНастройки = ДанныеОбъекта.НастройкиРасшифровки[Параметры.ИДРасшифровки];
		ИначеЕсли Параметры.ВидРасшифровки = 2 Тогда
			ПользовательскиеНастройки = Параметры.ПользовательскиеНастройки;
		КонецЕсли;
		
		Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта") 
			И ЗначениеЗаполнено(ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта)Тогда
			Форма.УстановитьТекущийВариант(ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта);
		КонецЕсли;
		
		// Установка пользовательских настроек
		Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		
		// Загрузка пользовательских настроек в компоновщик настроек отчета
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
		
		// Получение основных настроек компоновщика настроек, с учетом пользовательских настроек
		Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
		
		// Загрузка основных настроек
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		
		// Очистка пользовательских настроек
		Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
		Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
		Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		
		// Установка значений реквизитов отчета
		Для Каждого ЭлементСтруктуры Из ПользовательскиеНастройки.ДополнительныеСвойства Цикл
			Если Отчет.Свойство(ЭлементСтруктуры.Ключ) Тогда
				Отчет[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
			КонецЕсли;
			Если ЭлементСтруктуры.Ключ = "СписокСтруктурныхЕдиниц" И ЕстьРеквизитФормы(Форма, "СписокСтруктурныхЕдиниц") Тогда
				Форма.СписокСтруктурныхЕдиниц = ЭлементСтруктуры.Значение;
			КонецЕсли;
			Если ЭлементСтруктуры.Ключ = "СписокПодразделений" И ЕстьРеквизитФормы(Форма, "СписокПодразделений") Тогда
				Форма.СписокПодразделений = ЭлементСтруктуры.Значение;
			КонецЕсли;
			Если ЭлементСтруктуры.Ключ = "СписокВладельцевГоловныхПодразделений" И ЕстьРеквизитФормы(Форма, "СписокВладельцевГоловныхПодразделений") Тогда
				Форма.СписокВладельцевГоловныхПодразделений = ЭлементСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ПараметрыВыводаРасшифровки") Тогда
			ПараметрыВыводаРасшифровки = ПользовательскиеНастройки.ДополнительныеСвойства.ПараметрыВыводаРасшифровки;
			Для Каждого ЭлементСтруктуры Из ПараметрыВыводаРасшифровки Цикл
				УстановитьПараметр(Отчет.КомпоновщикНастроек, ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			КонецЦикла;
		КонецЕсли;
		
		Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта") Тогда
			Параметры.КлючВарианта = ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта;
		КонецЕсли;
	КонецЕсли;

	Если ЕстьРеквизитФормы(Форма, "ОписанияТиповВидовСубконто") Тогда
		Форма.ОписанияТиповВидовСубконто = Новый Структура;
	КонецЕсли;
	
	ОтчетОбъект = Форма.РеквизитФормыВЗначение("Отчет");
	Если Не ЗначениеЗаполнено(Форма.СхемаКомпоновкиДанных) Тогда
		Форма.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор);
	КонецЕсли;
	Форма.ДанныеРасшифровки = ПоместитьВоВременноеХранилище(Форма.ДанныеРасшифровки, Форма.УникальныйИдентификатор);
	
	Если ЕстьРеквизитФормы(Форма, "НаборПоказателей") Тогда		
		Форма.НаборПоказателей = Новый ФиксированныйМассив(ПолучитьНаборПоказателей(?(ЕстьРеквизитФормы(Форма,"ИмяОтчета"),Форма.ИмяОтчета,ПолучитьИдентификаторОбъекта(Форма))));
	КонецЕсли;
	
	ПараметрМакетОформления = ПолучитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления");
	СписокМакетовОформления = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьСписокМакетовОформления();
	Для Каждого ЭлементСписка Из СписокМакетовОформления Цикл
		Если ЕстьЭлементФормы(Форма, "МакетОформления") Тогда
			Форма.Элементы.МакетОформления.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЕсли;
	КонецЦикла;
	Если ЕстьРеквизитФормы(Форма, "МакетОформления") Тогда
		Если ПараметрМакетОформления.Использование И Не ПустаяСтрока(ПараметрМакетОформления.Значение) Тогда
			Форма.МакетОформления = ПараметрМакетОформления.Значение;
		Иначе
			ОсновнойМакетОтчетов = СписокМакетовОформления.НайтиПоЗначению("МакетОформленияОтчетов");
			Если ОсновнойМакетОтчетов <> Неопределено Тогда
				Форма.МакетОформления = ОсновнойМакетОтчетов.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//	
	//Если Параметры.Свойство("СформироватьПриОткрытии") И Параметры.СформироватьПриОткрытии =Истина Тогда
	//	СтандартнаяОбработка = Ложь;
	//	//Попытка
	//	//	Форма.ИзменениеСхемыКомпоновкиДанныхНаСервере();
	//	//Исключение
	//	//	// Запись в журнал регистрации не требуется
	//	//КонецПопытки;
	//	//Если Параметры.Свойство("ЗаполняемыеНастройки") Тогда
	//	//	Попытка
	//	//		Форма.ЗаполнитьНастройкамиПоУмолчанию(Параметры.ЗаполняемыеНастройки);
	//	//	Исключение
	//	//		// Запись в журнал регистрации не требуется
	//	//	КонецПопытки;
	//	//КонецЕсли;
	//	//Если ЕстьРеквизитФормы(Форма, "ВыводитьЗаголовок") Тогда
	//	//	Форма.ВыводитьЗаголовок = Истина;
	//	//КонецЕсли;
	//	Форма.СформироватьОтчетНаСервере();
	//КонецЕсли;
	//
КонецПроцедуры

Функция ДобавитьОтборПоОрганизациямИПодразделениям(ЭлементСтруктуры, ПараметрыОтчета, Использование = Истина, ДтКт = Ложь, ИмяПоляПодразделения = "Подразделение") Экспорт
	
	ПолеОрганизация 	= Новый ПолеКомпоновкиДанных("Организация");
	ПолеПодразделение 	= Новый ПолеКомпоновкиДанных(ИмяПоляПодразделения);
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	НоваяГруппаИли = Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	НоваяГруппаИли.Использование  	= Использование;
	НоваяГруппаИли.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	НоваяГруппаИли.Представление 	= "###ОтборПоОрганизации###";
	
	ИспользованиеОграничения = Ложь;
	
	СписокСтруктурныхЕдиниц = ?(ПараметрыОтчета.Свойство("СписокСтруктурныхЕдиниц"), ПараметрыОтчета.СписокСтруктурныхЕдиниц, Новый СписокЗначений);
	СписокПодразделений     = ?(ПараметрыОтчета.Свойство("СписокПодразделений")    , ПараметрыОтчета.СписокПодразделений, Новый СписокЗначений);
	СписокВладельцевГоловныхПодразделений = ?(ПараметрыОтчета.Свойство("СписокВладельцевГоловныхПодразделений"), ПараметрыОтчета.СписокВладельцевГоловныхПодразделений, Новый СписокЗначений); 
		
	//В случае если в отборе нет ни одного подразделения и включен РЛС по подразделениям
	//добавим в отбор все доступные пользователю подразделения
	Если СписокСтруктурныхЕдиниц.Количество() = 0 Тогда
		Если ДобавитьОграничениеПоПодразделениям() Тогда
			ТаблицаДоступныхОрганизаций = ПолучитьСписокДоступныхОрганизаций();
			ИспользованиеОграничения = Истина;
			Для Каждого СтрокаТЗ Из ТаблицаДоступныхОрганизаций Цикл 
				СписокСтруктурныхЕдиниц.Добавить(СтрокаТЗ.Организация);
			КонецЦикла;						
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ТекОрганизация Из СписокСтруктурныхЕдиниц Цикл 
		
		НоваяГруппаИ = НоваяГруппаИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		НоваяГруппаИ.Использование  = Использование;
		НоваяГруппаИ.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		НовыйЭлемент = НоваяГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлемент.Использование  = Использование;
		НовыйЭлемент.ЛевоеЗначение 	= ПолеОрганизация;
		НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлемент.ПравоеЗначение = ТекОрганизация.Значение;
		
		ТекущийСписокПодразделений = Новый СписокЗначений;
		
		Если Не ИспользованиеОграничения Тогда 
			
			ГоловноеПодразделениеДобавлено = Ложь;
			
			Для Каждого ЭлементПодразделение Из СписокПодразделений Цикл
				Подразделение = ЭлементПодразделение.Значение;
				Владелец = Подразделение.Владелец;
				Если Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка()
					И СписокВладельцевГоловныхПодразделений.НайтиПоЗначению(ТекОрганизация.Значение) <> Неопределено
					И НЕ ГоловноеПодразделениеДобавлено Тогда
					ТекущийСписокПодразделений.Добавить(Подразделение);
					ГоловноеПодразделениеДобавлено = Истина;
				Иначе
					Если СписокСтруктурныхЕдиниц.НайтиПоЗначению(Владелец) <> Неопределено
						И Владелец = ТекОрганизация.Значение Тогда
						ТекущийСписокПодразделений.Добавить(Подразделение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		//В случае если в отборе нет ни одного подразделения и включен РЛС по подразделениям
		//добавим в отбор все доступные пользователю подразделения
		Если СписокПодразделений.Количество() = 0 Тогда
			Если ДобавитьОграничениеПоПодразделениям() Тогда
				ТаблицаДоступныхПодразделений = ПолучитьСписокДоступныхПодразделений(ТекОрганизация);
				Для Каждого СтрокаТЗ Из ТаблицаДоступныхПодразделений Цикл 
					ТекущийСписокПодразделений.Добавить(СтрокаТЗ.Подразделение);
				КонецЦикла;						
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущийСписокПодразделений.Количество() > 0 Тогда 
				
			ДоступныеПоляОтбора = Отбор.ДоступныеПоляОтбора;
			
			ГруппаПодразделений = НоваяГруппаИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаПодразделений.Использование  	= Использование;
			ГруппаПодразделений.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			НовыйЭлемент = ГруппаПодразделений.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлемент.Использование  = Использование;
			НовыйЭлемент.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ИмяПоляПодразделения);
			НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
			НовыйЭлемент.ПравоеЗначение = ТекущийСписокПодразделений;				
			
			ПодразделениеДт = Новый ПолеКомпоновкиДанных("ПодразделениеДт");
			Если ДоступныеПоляОтбора.НайтиПоле(ПодразделениеДт) <> Неопределено Тогда
				НовыйЭлемент = ГруппаПодразделений.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.Использование  = Использование;
				НовыйЭлемент.ЛевоеЗначение 	= ПодразделениеДт;
				НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
				НовыйЭлемент.ПравоеЗначение = ТекущийСписокПодразделений;				
			КонецЕсли;
			
			ПодразделениеКт = Новый ПолеКомпоновкиДанных("ПодразделениеКт");
			Если ДоступныеПоляОтбора.НайтиПоле(ПодразделениеКт) <> Неопределено Тогда
				НовыйЭлемент = ГруппаПодразделений.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.Использование  = Использование;
				НовыйЭлемент.ЛевоеЗначение 	= ПодразделениеКт;
				НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
				НовыйЭлемент.ПравоеЗначение = ТекущийСписокПодразделений;				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат НовыйЭлемент;	
		
КонецФункции

//Функция вернёт все доступные пользователю подразделения организации
//
Функция ПолучитьСписокДоступныхОрганизаций() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции

Функция ДобавитьОграничениеПоПодразделениям() Экспорт
	
	Если  фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ГруппыПользователейПользователиГруппы.Ссылка КАК ГруппаПользователей
		               |ПОМЕСТИТЬ ГруппыПользователя
		               |ИЗ
		               |	Справочник.ГруппыПользователей."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяТабличнойЧастиСоставаГруппыПользователей()+" КАК ГруппыПользователейПользователиГруппы
		               |ГДЕ
		               |	ГруппыПользователейПользователиГруппы.Пользователь = &ТекущийПользователь
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа
		               |ИЗ
		               |	РегистрСведений.НазначениеВидовОбъектовДоступа КАК НазначениеВидовОбъектовДоступа
		               |ГДЕ
		               |	НазначениеВидовОбъектовДоступа.ГруппаПользователей В
		               |			(ВЫБРАТЬ
		               |				Группыпользователя.ГруппаПользователей
		               |			ИЗ
		               |				ГруппыПользователя КАК Группыпользователя)
		               |	И НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.СтруктурныеПодразделения)";
					   
		Запрос.УстановитьПараметр("ТекущийПользователь", фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"));
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда 
			Возврат Ложь;
		Иначе 
			Возврат Истина;
		КонецЕсли;
	Иначе 
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции 

//Функция вернёт все доступные пользователю подразделения организации
//
Функция ПолучитьСписокДоступныхПодразделений(Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыПользователейПользователиГруппы.Ссылка КАК ГруппаПользователей
	               |ПОМЕСТИТЬ ГруппыПользователя
	               |ИЗ
	               |	Справочник.ГруппыПользователей."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяТабличнойЧастиСоставаГруппыПользователей()+" КАК ГруппыПользователейПользователиГруппы
	               |ГДЕ
	               |	ГруппыПользователейПользователиГруппы.Пользователь = &ТекущийПользователь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	НастройкиПравДоступаПользователей.ОбъектДоступа КАК Подразделение
	               |ИЗ
	               |	РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
	               |ГДЕ
	               |	НастройкиПравДоступаПользователей.ОбъектДоступа ССЫЛКА Справочник.ПодразделенияОрганизаций
	               |	И НастройкиПравДоступаПользователей.Пользователь В
	               |			(ВЫБРАТЬ
	               |				Группыпользователя.ГруппаПользователей
	               |			ИЗ
	               |				ГруппыПользователя КАК Группыпользователя)";
	
	Если ТипЗнч(Организация) = Тип("СписокЗначений") Тогда 
		Запрос.Текст = запрос.Текст + "		
		|	И НастройкиПравДоступаПользователей.ОбъектДоступа.Владелец В (&Организация)";
	ИначеЕсли ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		Запрос.Текст = запрос.Текст + "				   
		|	И НастройкиПравДоступаПользователей.ОбъектДоступа.Владелец = &Организация";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТекущийПользователь", фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"));
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции


//При сохранении пользовательских настроек
//
Процедура ПриСохраненииПользовательскихНастроекНаСервере(ФормаОтчета, Настройки,ТаблицыДанных= Неопределено, СохраняемыеРеквизитыФормы = Неопределено) Экспорт
	
	// Сохранение реквизитов формы
	ДополнительныеСвойства = Новый Структура;
	Если ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьЗаголовок") Тогда
		ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ФормаОтчета.ВыводитьЗаголовок);
	КонецЕсли;
	Если ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьПодписиРуководителей") Тогда
		ДополнительныеСвойства.Вставить("ВыводитьПодписиРуководителей", ФормаОтчета.ВыводитьПодписиРуководителей);
	КонецЕсли;
	Если ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьПодписи") Тогда
		ДополнительныеСвойства.Вставить("ВыводитьПодписи", ФормаОтчета.ВыводитьПодписи);
	КонецЕсли;
	Если ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьДиаграмму") Тогда
		ДополнительныеСвойства.Вставить("ВыводитьДиаграмму", ФормаОтчета.ВыводитьДиаграмму);
	КонецЕсли;
	Если ЕстьРеквизитФормы(ФормаОтчета, "МакетОформления") Тогда
		ДополнительныеСвойства.Вставить("МакетОформления", ФормаОтчета.МакетОформления);
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ФормаОтчета, "СкрыватьНастройкиПриФормированииОтчета") Тогда
		ДополнительныеСвойства.Вставить("СкрыватьНастройкиПриФормированииОтчета", ФормаОтчета.СкрыватьНастройкиПриФормированииОтчета);
	КонецЕсли;
	
	Если ЕстьЭлементФормы(ФормаОтчета, "ГруппаПанельНастроек") Тогда
		Если Настройки.ДополнительныеСвойства.Свойство("ПанельНастроекСкрытаАвтоматически")
			И Настройки.ДополнительныеСвойства.ПанельНастроекСкрытаАвтоматически = Истина Тогда
			ДополнительныеСвойства.Вставить("ВидимостьПанелиНастроек", Истина);
		Иначе
			ДополнительныеСвойства.Вставить("ВидимостьПанелиНастроек", ФормаОтчета.Элементы.ГруппаПанельНастроек.Видимость);
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ФормаОтчета, "СписокСтруктурныхЕдиниц") Тогда
		ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", ФормаОтчета.СписокСтруктурныхЕдиниц);
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ФормаОтчета, "СписокПодразделений") Тогда
		ДополнительныеСвойства.Вставить("СписокПодразделений", ФормаОтчета.СписокПодразделений);
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ФормаОтчета, "СписокВладельцевГоловныхПодразделений") Тогда
		ДополнительныеСвойства.Вставить("СписокВладельцевГоловныхПодразделений", ФормаОтчета.СписокВладельцевГоловныхПодразделений);
	КонецЕсли;
	
	Если СохраняемыеРеквизитыФормы <> Неопределено И ТипЗнч(СохраняемыеРеквизитыФормы) = Тип("Массив") Тогда
		Для Каждого РеквизитФормы Из СохраняемыеРеквизитыФормы Цикл
			Если НРег(РеквизитФормы)=НРег("ИспользоватьНастройкуПериода") Тогда
				ДополнительныеСвойства.Вставить(РеквизитФормы, ФормаОтчета[РеквизитФормы]);
				ДополнительныеСвойства.Вставить("НастройкаПериодаНачалоПериода", ФормаОтчета.НастройкаПериода.ДатаНачала);
				ДополнительныеСвойства.Вставить("НастройкаПериодаКонецПериода", ФормаОтчета.НастройкаПериода.ДатаОкончания);
			ИначеЕсли ЕстьРеквизитФормы(ФормаОтчета,РеквизитФормы) Тогда
				Попытка
					Если ТаблицыДанных.Найти(РеквизитФормы)<>Неопределено Тогда
						ДополнительныеСвойства.Вставить(РеквизитФормы, ФормаОтчета[РеквизитФормы].Выгрузить());
					Иначе
						ДополнительныеСвойства.Вставить(РеквизитФормы, ФормаОтчета[РеквизитФормы]);
					КонецЕсли;
				Исключение
				КонецПопытки;
			ИначеЕсли ФормаОтчета.Отчет.Свойство(РеквизитФормы) Тогда
				Если ТипЗнч(ФормаОтчета.Отчет[РеквизитФормы]) = Тип("ДанныеФормыКоллекция") Тогда
					ДополнительныеСвойства.Вставить(РеквизитФормы, ФормаОтчета.Отчет[РеквизитФормы].Выгрузить());
				ИначеЕсли РеквизитФормы <> "РежимРасшифровки" Тогда
					ДополнительныеСвойства.Вставить(РеквизитФормы, ФормаОтчета.Отчет[РеквизитФормы]);
				КонецЕсли;
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ТаблицыДанных = Неопределено Тогда
		Для Каждого ТаблицаДанных Из ТаблицыДанных Цикл
			ДополнительныеСвойства.Вставить(ТаблицаДанных, ФормаОтчета[ТаблицаДанных].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	Если (НЕ ЕстьРеквизитФормы(ФормаОтчета,"ИзменятьСтруктуруОтчета")) ИЛИ ФормаОтчета.ИзменятьСтруктуруОтчета = Истина Тогда
		Настройки.ДополнительныеСвойства.Вставить("ДанныеОтчета", Новый ХранилищеЗначения(ДополнительныеСвойства));
		Возврат;	
	КонецЕсли;
	
КонецПроцедуры

//При загрузке пользовательских настроек
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(ФормаОтчета, Настройки,СохраняемыеТаблицыФормы, ЗагружаемыеРеквизитыФормы = Неопределено,ЗагруженыИндивидуальныеНастройки = Ложь,ЗагружатьТолькоРеквизиты=Ложь) Экспорт

	Если Настройки = Неопределено Тогда
		Возврат;		
	Иначе 
		
		Если (НЕ ЕстьРеквизитФормы(ФормаОтчета,"ИзменятьСтруктуруОтчета")) ИЛИ ФормаОтчета.ИзменятьСтруктуруОтчета = Ложь Тогда
			Возврат;	
		КонецЕсли;
		
		// Восстановление сохраненных настроек
		Если Настройки.ДополнительныеСвойства.Свойство("ДанныеОтчета") Тогда
			ДополнительныеСвойства = Настройки.ДополнительныеСвойства.ДанныеОтчета.Получить();
			Для Каждого ЭлементСтруктуры Из ДополнительныеСвойства Цикл
				Если ЕстьРеквизитФормы(ФормаОтчета,ЭлементСтруктуры.Ключ) Тогда
					Попытка
						Если СохраняемыеТаблицыФормы.Найти(ЭлементСтруктуры.Ключ)<>Неопределено Тогда
							ФормаОтчета[ЭлементСтруктуры.Ключ].Очистить();
							Для Каждого СтрокаТЧ Из ЭлементСтруктуры.Значение Цикл
								НоваяСтрока = ФормаОтчета[ЭлементСтруктуры.Ключ].Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ);
							КонецЦикла;
							ЗагруженыИндивидуальныеНастройки = Истина;
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЕсли;
				
				Если ФормаОтчета.Отчет.Свойство(ЭлементСтруктуры.Ключ) Тогда
					Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("ТаблицаЗначений") Тогда
						ФормаОтчета.Отчет[ЭлементСтруктуры.Ключ].Очистить();
						Для Каждого СтрокаТЧ Из ЭлементСтруктуры.Значение Цикл
							НоваяСтрока = ФормаОтчета.Отчет[ЭлементСтруктуры.Ключ].Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ);
						КонецЦикла;
					ИначеЕсли ЭлементСтруктуры.Ключ <> "РежимРасшифровки" Тогда
						ФормаОтчета.Отчет[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
					КонецЕсли;
				КонецЕсли;
				
				// Восстановление реквизитов формы
				Если ЭлементСтруктуры.Ключ = "ВыводитьЗаголовок" И ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьЗаголовок") Тогда
					ФормаОтчета.ВыводитьЗаголовок = ЭлементСтруктуры.Значение;
				ИначеЕсли ЭлементСтруктуры.Ключ = "ВыводитьПодписи" И ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьПодписи") Тогда
					ФормаОтчета.ВыводитьПодписи = ЭлементСтруктуры.Значение;
				ИначеЕсли ЭлементСтруктуры.Ключ = "ВыводитьПодписиРуководителей" И ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьПодписиРуководителей") Тогда
					ФормаОтчета.ВыводитьПодписиРуководителей = ЭлементСтруктуры.Значение;
				ИначеЕсли ЭлементСтруктуры.Ключ = "ВыводитьДиаграмму" И ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьДиаграмму") Тогда
					ФормаОтчета.ВыводитьДиаграмму = ЭлементСтруктуры.Значение;
				ИначеЕсли ЭлементСтруктуры.Ключ = "МакетОформления" И ЕстьРеквизитФормы(ФормаОтчета, "МакетОформления") Тогда
					ФормаОтчета.МакетОформления = ЭлементСтруктуры.Значение;
					УстановитьПараметрВывода(
						ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, 
						"МакетОформления", ФормаОтчета.МакетОформления);
				КонецЕсли;
				Если НРег(ЭлементСтруктуры.Ключ)=НРег("НастройкаПериодаНачалоПериода") Тогда
					ФормаОтчета.НастройкаПериода.ДатаНачала = ДополнительныеСвойства[ЭлементСтруктуры.Ключ];
				ИначеЕсли НРег(ЭлементСтруктуры.Ключ)=НРег("НастройкаПериодаКонецПериода") Тогда
					ФормаОтчета.НастройкаПериода.ДатаОкончания = ДополнительныеСвойства[ЭлементСтруктуры.Ключ];
				КонецЕсли;
				Если ЭлементСтруктуры.Ключ = "СкрыватьНастройкиПриФормированииОтчета" И ЕстьРеквизитФормы(ФормаОтчета, "СкрыватьНастройкиПриФормированииОтчета") Тогда
					ФормаОтчета.СкрыватьНастройкиПриФормированииОтчета = ЭлементСтруктуры.Значение;		
				КонецЕсли;
				//Если ЭлементСтруктуры.Ключ = "ВидимостьПанелиНастроек" И НЕ ЕстьЭлементФормы(ФормаОтчета, "РазделыОтчета") Тогда
				//	Если ЕстьЭлементФормы(ФормаОтчета, "ПанельНастроек") Тогда
				//		БухгалтерскиеОтчетыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(
				//			ФормаОтчета.Элементы.ПанельНастроек, ДополнительныеСвойства.ВидимостьПанелиНастроек);
				//	КонецЕсли;
				//	Если ЕстьЭлементФормы(ФормаОтчета, "ГруппаПанельНастроек") Тогда
				//	ФормаОтчета.Элементы.ГруппаПанельНастроек.Видимость = ДополнительныеСвойства.ВидимостьПанелиНастроек;
				//	КонецЕсли;
				//КонецЕсли;
				Если ЭлементСтруктуры.Ключ = "СписокСтруктурныхЕдиниц" И ЕстьРеквизитФормы(ФормаОтчета, "СписокСтруктурныхЕдиниц") Тогда
					ФормаОтчета.СписокСтруктурныхЕдиниц = ЭлементСтруктуры.Значение;
					Если ФормаОтчета.Отчет.Свойство("ПредставлениеСпискаОрганизаций") Тогда
						ФормаОтчета.Отчет.ПредставлениеСпискаОрганизаций = ВыгрузитьСписокВСтроку(ФормаОтчета.СписокСтруктурныхЕдиниц);
					КонецЕсли;
					Если ФормаОтчета.Отчет.Свойство("ПредставлениеСпискаСтруктурныхЕдиниц") Тогда
						ФормаОтчета.Отчет.ПредставлениеСпискаСтруктурныхЕдиниц = ВыгрузитьСписокВСтроку(ФормаОтчета.СписокСтруктурныхЕдиниц);
					КонецЕсли;
				КонецЕсли;
				Если ЭлементСтруктуры.Ключ = "СписокПодразделений" И ЕстьРеквизитФормы(ФормаОтчета, "СписокПодразделений") Тогда
					ФормаОтчета.СписокПодразделений = ЭлементСтруктуры.Значение;
					Если ФормаОтчета.Отчет.Свойство("ПредставлениеСпискаПодразделений") Тогда
						ФормаОтчета.Отчет.ПредставлениеСпискаПодразделений = ВыгрузитьСписокВСтроку(ФормаОтчета.СписокПодразделений);
					КонецЕсли;
				КонецЕсли;
				Если ЭлементСтруктуры.Ключ = "СписокВладельцевГоловныхПодразделений" И ЕстьРеквизитФормы(ФормаОтчета, "СписокВладельцевГоловныхПодразделений") Тогда
					ФормаОтчета.СписокВладельцевГоловныхПодразделений = ЭлементСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// Восстановление сохраненных настроек
		Если Не ЗагружатьТолькоРеквизиты Тогда
			ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
			
			// Установка пользовательских настроек
			ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
			ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
			ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
			
			// Перенос пользовательских настроек в основные
			ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);
			ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПолучитьНастройки());
			
			// Очистка пользовательских настроек
			ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
			ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
			ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
			ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		КонецЕсли;		
	КонецЕсли;
	
	Если ЗагружаемыеРеквизитыФормы <> Неопределено
		И ТипЗнч(ЗагружаемыеРеквизитыФормы) = Тип("Массив")
		И ДополнительныеСвойства <> Неопределено Тогда
		
		Для Каждого РеквизитФормы Из ЗагружаемыеРеквизитыФормы Цикл
			Если НРег(РеквизитФормы)=НРег("ИспользоватьНастройкуПериода") Тогда
				Продолжить;
			ИначеЕсли ДополнительныеСвойства.Свойство(РеквизитФормы) Тогда
				Если ЕстьРеквизитФормы(ФормаОтчета,РеквизитФормы) Тогда
					ФормаОтчета[РеквизитФормы] = ДополнительныеСвойства[РеквизитФормы];
				ИначеЕсли ФормаОтчета.Отчет.Свойство(РеквизитФормы) Тогда
					Если ТипЗнч(ФормаОтчета.Отчет[РеквизитФормы]) = Тип("ДанныеФормыКоллекция") Тогда
						ФормаОтчета.Отчет[РеквизитФормы].Очистить();
						Для Каждого СтрокаТЧ Из ДополнительныеСвойства[РеквизитФормы] Цикл
							НоваяСтрока = ФормаОтчета.Отчет[РеквизитФормы].Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ);
						КонецЦикла;
					ИначеЕсли РеквизитФормы <> "РежимРасшифровки" Тогда
						ФормаОтчета.Отчет[РеквизитФормы] = ДополнительныеСвойства[РеквизитФормы];
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ЕстьРеквизитФормы(Форма, ИмяРеквизита) Экспорт
	
	Для Каждого РеквизитФормы Из Форма.ПолучитьРеквизиты() Цикл
		Если ВРег(РеквизитФормы.Имя) = ВРег(ИмяРеквизита) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьЭлементФормы(Форма, ИмяЭлемента)
	
	Возврат Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС ОТЧЕТОВ

//Получение параметров исполнения отчета
//
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки",
							Истина, Ложь, Истина, Истина);
							
КонецФункции

//Получение набора показателей
//
Функция ПолучитьНаборПоказателей(ИмяВидаОтчетов) Экспорт
	
	НаборПоказателей = Новый Массив;
	
	СКД = Отчеты[ИмяВидаОтчетов].ПолучитьМакет(Метаданные.Отчеты[ИмяВидаОтчетов].ОсновнаяСхемаКомпоновкиДанных.Имя);
	Для Каждого ПолеИтога Из СКД.ПоляИтога Цикл
		НаборПоказателей.Добавить(ПолеИтога.ПутьКДанным);
	КонецЦикла;
	
	Возврат НаборПоказателей;
	
КонецФункции

//Получение текста заголовка
//
Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина,ЗаголовокОтчета="") Экспорт
	
	Если ПараметрыОтчета.Свойство("Период") Тогда
		ЗаголовокОтчета = НСтр("ru = '"+ЗаголовокОтчета+" на %1'");
		ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ЗаголовокОтчета, Формат(ПараметрыОтчета.Период,"ДЛФ=DD"));
	ИначеЕсли ПараметрыОтчета.Свойство("НачалоПериода") И ПараметрыОтчета.Свойство("КонецПериода") Тогда
		ЗаголовокОтчета = НСтр("ru = '"+ЗаголовокОтчета+" %1'");
		ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ЗаголовокОтчета, ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода));
	Иначе
		ЗаголовокОтчета = НСтр("ru = '"+ЗаголовокОтчета+"'");
	КонецЕсли;
	Возврат ЗаголовокОтчета;
	
КонецФункции

Функция ПолучитьПредставлениеПериода(НачалоПериода = '00010101', КонецПериода = '00010101', ТолькоДаты  = Ложь) Экспорт
	
	ТекстПериод = "";
	
	Если ЗначениеЗаполнено(КонецПериода) Тогда 
		Если КонецПериода >= НачалоПериода Тогда
			ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП = Истина");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
		ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(Дата(3999, 11, 11)), "ФП = Истина");
		ТекстПериод = СтрЗаменить(ТекстПериод, Сред(ТекстПериод, Найти(ТекстПериод, " - ")), " - ...");
	КонецЕсли;
	
	Возврат ТекстПериод;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ПараметрыОтчета.Свойство("Группировка") ИЛИ ПараметрыОтчета.Свойство("Показатели") Тогда
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("НачалоПериода") Тогда
		Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
			УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
		Иначе
			УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", Дата(1, 1, 1));
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыОтчета.Свойство("КонецПериода") Тогда
		Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
			УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
		Иначе
			УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", Дата(3999, 11, 1));
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыОтчета.Свойство("Период") Тогда
		Если ЗначениеЗаполнено(ПараметрыОтчета.Период) Тогда
			УстановитьПараметр(КомпоновщикНастроек, "Период", КонецДня(ПараметрыОтчета.Период));
		Иначе
			УстановитьПараметр(КомпоновщикНастроек, "Период", Дата(3999, 11, 1));
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("СтруктураПараметровОтчетаДляФормирования") Тогда
		Для Каждого ПараметрОтчета Из ПараметрыОтчета.СтруктураПараметровОтчетаДляФормирования Цикл
			Если ПараметрОтчета.Ключ = "Период" ИЛИ ПараметрОтчета.Ключ = "НачалоПериода" ИЛИ ПараметрОтчета.Ключ = "КонецПериода" Тогда
				Продолжить;
			КонецЕсли;
			УстановитьПараметр(КомпоновщикНастроек, ПараметрОтчета.Ключ, ПараметрОтчета.Значение);
		КонецЦикла;
	КонецЕсли;
	
	
	Если ПараметрыОтчета.Свойство("Группировка") Тогда
		Структура = КомпоновщикНастроек.Настройки;
		Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
			Если ПолеВыбраннойГруппировки.Использование И ЗначениеЗаполнено(ПолеВыбраннойГруппировки.ТипГруппировки) Тогда
				Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
				ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеГруппировки.Использование  = Истина;
				ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
				Если ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.общ_ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
					ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
				ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.общ_ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
					ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
				Иначе
					ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
				КонецЕсли;
				Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
				Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			КонецЕсли;
		КонецЦикла;
		Первый = Истина;
		Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
			Если ПолеВыбраннойГруппировки.Использование И НЕ ЗначениеЗаполнено(ПолеВыбраннойГруппировки.ТипГруппировки) Тогда
				Если Первый Тогда
					Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
					Первый = Ложь;
                КонецЕсли;
				ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеГруппировки.Использование  = Истина;
				ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
				Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
				Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("Показатели")  Тогда	
		Для Каждого ПолеВыбранногоПоказателя Из ПараметрыОтчета.Показатели Цикл 
			Если ПолеВыбранногоПоказателя.Использование Тогда
				ДобавитьВыбранноеПоле(КомпоновщикНастроек, ПолеВыбранногоПоказателя.Поле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, ПараметрыОтчета,,,"СтруктурноеПодразделение");
	
КонецПроцедуры

// Функция добавляет выбранное поле и возвращает элемент выбранного поля. 
//
// Параметры:
//		ЭлементСтруктуры - компоновщик настроек, настройка СКД, элемент структуры настройки отчета
//		Поле - имя поля, которое нужно добавить в СКД
//		Заголовок - заголовок добавляемого поля
//
Функция ДобавитьВыбранноеПоле(ЭлементСтруктуры, Знач Поле, Заголовок = Неопределено) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	ВыбранноеПоле = ВыбранныеПоля.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Поле;
	Если Заголовок <> Неопределено Тогда
		ВыбранноеПоле.Заголовок = Заголовок;
	КонецЕсли;
	
	Возврат ВыбранноеПоле;
	
КонецФункции

//После вывода результата
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);

КонецПроцедуры

// Функция возвращает представление всех элементов списка в виде строки для вывода в текстовые поля
// 
// Параметры
//	Список - объект список значений
//	МаксЧислоСимволовНаЭлемент - предельное число символов, выводимых для одного элемента, если больше, то окончание заменяется "..."
//	РазделительЭлеменов - строка, используемая для разделения элементов друг от друга
//
Функция ВыгрузитьСписокВСтроку(Список, МаксЧислоСимволовНаЭлемент = 50, РазделительЭлементов = "; ", ВыгружатьПолныеНаименованияОрганизаций=Ложь, ПредставлениеПустойСсылки = "") Экспорт

	Результат = "";
	Для Каждого ЭлементСписка Из Список Цикл
		Если НЕ ВыгружатьПолныеНаименованияОрганизаций Тогда
			Если Не ПустаяСтрока(ЭлементСписка.Представление) Тогда
				ПредставлениеЭлемента = ЭлементСписка.Представление;
			Иначе
				ПредставлениеЭлемента = Строка(ЭлементСписка.Значение);
			КонецЕсли;
			ПредставлениеЭлемента = СокрЛП(ПредставлениеЭлемента);
			Если Не ПустаяСтрока(ПредставлениеЭлемента) Тогда
				
				Если МаксЧислоСимволовНаЭлемент > 0 И Список.Количество() > 1 Тогда
					Если СтрДлина(ПредставлениеЭлемента) > МаксЧислоСимволовНаЭлемент Тогда
						ПредставлениеЭлемента = Лев(ПредставлениеЭлемента, МаксЧислоСимволовНаЭлемент) + "...";
					КонецЕсли;
				КонецЕсли;
			
				Если Не ПустаяСтрока(Результат) Тогда
					Результат = Результат + РазделительЭлементов;
				КонецЕсли;
			
				Результат = Результат + ПредставлениеЭлемента;
				
			КонецЕсли;
		Иначе
			Попытка 
				ПредставлениеЭлемента = ЭлементСписка.Значение.НаименованиеПолное;
			Исключение
				ПредставлениеЭлемента = "";
			КонецПопытки;
			Если Не ПустаяСтрока(Результат) Тогда
				Результат = Результат + РазделительЭлементов;
			КонецЕсли;
		
			Результат = Результат + ПредставлениеЭлемента;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции // ВыгрузитьСписокВСтроку()

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ВыводитьПолностью = Истина;
	
	Отказ = Ложь;
	ДанныеРасшифровкиОбъект = Неопределено;
	ПараметрыИсполненияОтчета = Неопределено;
	
	Если ПараметрыОтчета.Свойство("ОтчетОбъект") Тогда
		МенеджерОтчета = ПараметрыОтчета.ОтчетОбъект;
	Иначе
		МенеджерОтчета = Отчеты[ПараметрыОтчета.ИдентификаторОтчета];
	КонецЕсли;
	
	Попытка
		ПараметрыИсполненияОтчета = МенеджерОтчета.ПолучитьПараметрыИсполненияОтчета();
	Исключение
		// Запись в журнал регистрации не требуется
	КонецПопытки;
	
	ИспользоватьВнешниеНаборыДанных            = Ложь;
	ИспользоватьПриВыводеЗаголовка             = Ложь;
	ИспользоватьПриВыводеПодвала               = Ложь;
	ИспользоватьПередКомпоновкойМакета         = Ложь;
	ИспользоватьПослеКомпоновкиМакета          = Ложь;
	ИспользоватьПередВыводомЭлементаРезультата = Ложь;
	ИспользоватьПослеВыводаРезультата          = Ложь;
	ИспользоватьДанныеРасшифровки              = Истина;
	
	
	Если ПараметрыИсполненияОтчета <> Неопределено Тогда
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьВнешниеНаборыДанных") Тогда
			ИспользоватьВнешниеНаборыДанных = ПараметрыИсполненияОтчета.ИспользоватьВнешниеНаборыДанных;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПриВыводеЗаголовка") Тогда
			ИспользоватьПриВыводеЗаголовка = ПараметрыИсполненияОтчета.ИспользоватьПриВыводеЗаголовка;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПриВыводеПодвала") Тогда
			ИспользоватьПриВыводеПодвала = ПараметрыИсполненияОтчета.ИспользоватьПриВыводеПодвала;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПередКомпоновкойМакета") Тогда
			ИспользоватьПередКомпоновкойМакета = ПараметрыИсполненияОтчета.ИспользоватьПередКомпоновкойМакета;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПослеКомпоновкиМакета") Тогда
			ИспользоватьПослеКомпоновкиМакета = ПараметрыИсполненияОтчета.ИспользоватьПослеКомпоновкиМакета;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПередВыводомЭлементаРезультата") Тогда
			ИспользоватьПередВыводомЭлементаРезультата = ПараметрыИсполненияОтчета.ИспользоватьПередВыводомЭлементаРезультата;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПослеВыводаРезультата") Тогда
			ИспользоватьПослеВыводаРезультата = ПараметрыИсполненияОтчета.ИспользоватьПослеВыводаРезультата;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьДанныеРасшифровки") Тогда
			ИспользоватьДанныеРасшифровки = ПараметрыИсполненияОтчета.ИспользоватьДанныеРасшифровки;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыОтчета.СхемаКомпоновкиДанных) = Тип("Строка") Тогда
		Если ЭтоАдресВременногоХранилища(ПараметрыОтчета.СхемаКомпоновкиДанных) Тогда
			СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ПараметрыОтчета.СхемаКомпоновкиДанных);
		КонецЕсли;
	Иначе
		СхемаКомпоновкиДанных = ПараметрыОтчета.СхемаКомпоновкиДанных;
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ПараметрыОтчета.НастройкиКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	ВыводитьЗаголовок = ?(ПараметрыОтчета.Свойство("ВыводитьЗаголовок") <> Ложь, ПараметрыОтчета.ВыводитьЗаголовок, Истина);
	ВыводитьПодписи   = ?(ПараметрыОтчета.Свойство("ВыводитьПодписи")   <> Ложь, ПараметрыОтчета.ВыводитьПодписи  , Истина);
	
	ВыводитьПодписиРуководителей = ?(ПараметрыОтчета.Свойство("ВыводитьПодписиРуководителей") <> Ложь,
	                                 ПараметрыОтчета.ВыводитьПодписиРуководителей, Ложь);
	
	Результат = Новый ТабличныйДокумент;
	
	Если ВыводитьЗаголовок Тогда
		Если ИспользоватьПриВыводеЗаголовка Тогда
			МенеджерОтчета.ПриВыводеЗаголовка(ПараметрыОтчета, Результат);
		Иначе
			ВывестиЗаголовокОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат);
		КонецЕсли;
	КонецЕсли;
	
	Если ВыводитьПолностью Тогда
		
		Если ИспользоватьПередКомпоновкойМакета Тогда
			МенеджерОтчета.ПередКомпоновкойМакета(ПараметрыОтчета, СхемаКомпоновкиДанных, КомпоновщикНастроек);
		КонецЕсли;
		КомпоновщикНастроек.Восстановить();
		
		НастройкиДляКомпоновкиМакета = КомпоновщикНастроек.ПолучитьНастройки();
		
		Если ПараметрыОтчета.Свойство("СвойМакетОформления") И ПараметрыОтчета.СвойМакетОформления
			И ПараметрыОтчета.Свойство("МакетОформления") И ЗначениеЗаполнено(ПараметрыОтчета.МакетОформления) Тогда
			СвойМакетОформления = МенеджерОтчета.ПолучитьМакет(ПараметрыОтчета.МакетОформления);
		Иначе
			УстановитьМакетОформленияОтчета(ПараметрыОтчета, НастройкиДляКомпоновкиМакета);
			СвойМакетОформления = Неопределено;
		КонецЕСли;
		
		//Сгенерируем макет компоновки данных при помощи компоновщика макета
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Попытка
			
			//В качестве схемы компоновки будет выступать схема самого отчета
			//В качестве настроек отчета - текущие настройки отчета
			//Данные расшифровки будем помещать в ДанныеРасшифровки
			Если ИспользоватьДанныеРасшифровки Тогда 
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиДляКомпоновкиМакета, ДанныеРасшифровкиОбъект, СвойМакетОформления);
			Иначе
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиДляКомпоновкиМакета,, СвойМакетОформления);
			КонецЕсли;
			
			Если ПараметрыОтчета.Свойство("КоличествоВыводимыхЗаписейВДиаграмме") Тогда
				СхемаКомпоновкиДанных.НаборыДанных[0].Запрос =
					СтрЗаменить(СхемаКомпоновкиДанных.НаборыДанных[0].Запрос, Врег("Первые ") + ПараметрыОтчета.КоличествоВыводимыхЗаписейВДиаграмме, Врег("Первые 7"));
			КонецЕсли;
			
			//Вызываем событие отчета
			Если ИспользоватьПослеКомпоновкиМакета Тогда
				МенеджерОтчета.ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки);
			КонецЕсли;
			
			Если ИспользоватьВнешниеНаборыДанных Тогда
				ВнешниеНаборыДанных = МенеджерОтчета.ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки);
			КонецЕсли;
		
			//Создадим и инициализируем процессор компоновки
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			Если ВнешниеНаборыДанных = Неопределено Тогда
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровкиОбъект, Истина);
			Иначе
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровкиОбъект, Истина);
			КонецЕсли;	
			
			ДанныеДляРасшифровки = Новый Структура("Объект, ДанныеРасшифровки", ПараметрыОтчета, ДанныеРасшифровкиОбъект); 
			ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеДляРасшифровки, ПараметрыОтчета.ДанныеРасшифровки);
			
			//Создадим и инициализируем процессор вывода результата
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВывода.УстановитьДокумент(Результат);
			
			//Обозначим начало вывода
			ПроцессорВывода.НачатьВывод();
			
			Если ИспользоватьПередВыводомЭлементаРезультата Тогда
				//Основной цикл вывода отчета
				Пока Истина Цикл
					
					//Получим следующий элемент результата компоновки
					ЭлементРезультата = ПроцессорКомпоновки.Следующий();
					
					Если ЭлементРезультата = Неопределено Тогда
						//Следующий элемент не получен - заканчиваем цикл вывода
						Прервать;
					Иначе
						
						Отказ = Ложь;
						
						МенеджерОтчета.ПередВыводомЭлементаРезультата(ПараметрыОтчета, МакетКомпоновки, ДанныеРасшифровкиОбъект, ЭлементРезультата, Отказ);
						
						Если Не Отказ Тогда
							//Элемент получен - выведем его при помощи процессора вывода
							ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
				
				//Завершение вывода отчета
				ПроцессорВывода.ЗакончитьВывод();
			Иначе
				ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
			КонецЕсли;
			
			//Если ПараметрыОтчета.Свойство("КоличествоВыводимыхЗаписейВДиаграмме") Тогда
			//	СхемаКомпоновкиДанных.НаборыДанных[0].Запрос =
			//		СтрЗаменить(СхемаКомпоновкиДанных.НаборыДанных[0].Запрос, Врег("Первые ") + ПараметрыОтчета.КоличествоВыводимыхЗаписейВДиаграмме, Врег("Первые 7"));
			//КонецЕсли;
			
		Исключение
			// Запись в журнал регистрации не требуется
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
				ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
			КонецЦикла;
			ТекстСообщения = НСтр("ru = 'Отчет не сформирован!'") + Символы.ПС + ИнформацияОбОшибке.Описание;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если ВыводитьПодписи Тогда
			Если ИспользоватьПриВыводеПодвала Тогда 
				МенеджерОтчета.ПриВыводеПодвала(ПараметрыОтчета, Результат);
			Иначе
				ВыводПодписейОтчета(ПараметрыОтчета, Результат);
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьПослеВыводаРезультата Тогда
			МенеджерОтчета.ПослеВыводаРезультата(ПараметрыОтчета, Результат);
		Иначе
			ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Новый Структура("Результат,ДанныеРасшифровки", Результат, ДанныеРасшифровки), АдресХранилища);
	
КонецПроцедуры


Процедура УстановитьМакетОформленияОтчета(ПараметрыОтчета, НастройкаКомпоновкиДанных) Экспорт
	
	Если ПараметрыОтчета.Свойство("МакетОформления") И ЗначениеЗаполнено(ПараметрыОтчета.МакетОформления) Тогда
		УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", ПараметрыОтчета.МакетОформления);
	Иначе
		УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "МакетОформленияОтчетов");  // "МакетОформленияОтчетовЗеленый" "green" "Main"
	КонецЕсли;
	
КонецПроцедуры

// Получает параметр вывода компоновщика настроек или настройки СКД
//
// Параметры:
//		КомпоновщикНастроекГруппировка - компоновщик настроек или настройка/группировка СКД
//		ИмяПараметра - имя параметра СКД
//
Функция ПолучитьПараметрВывода(Настройка, ИмяПараметра) Экспорт
	
	МассивПараметров   = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяПараметра, ".");
	УровеньВложенности = МассивПараметров.Количество();
	
	Если УровеньВложенности > 1 Тогда
		ИмяПараметра = МассивПараметров[0];		
	КонецЕсли;
	
	Если ТипЗнч(Настройка) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройка.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Иначе
		ЗначениеПараметра = Настройка.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	
	Если УровеньВложенности > 1 Тогда
		Для Индекс = 1 По УровеньВложенности - 1 Цикл
			ИмяПараметра = ИмяПараметра + "." + МассивПараметров[Индекс];
			ЗначениеПараметра = ЗначениеПараметра.ЗначенияВложенныхПараметров.Найти(ИмяПараметра); 
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;  
	
КонецФункции

// Устанавливает параметр вывода компоновщика настроек или настройки СКД
//
// Параметры:
//		КомпоновщикНастроекГруппировка - компоновщик настроек или настройка/группировка СКД
//		ИмяПараметра - имя параметра СКД
//		Значение - значение параметра вывода СКД
//		Использование - Признак использования параметра. По умолчанию всегда принимается равным истине.
//
Функция УстановитьПараметрВывода(Настройка, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = ПолучитьПараметрВывода(Настройка, ИмяПараметра);
	
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Использование = Использование;
		ЗначениеПараметра.Значение      = Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Функция возвращает значение параметра компоновки данных
//
// Параметры:
//  Настройки - Пользовательские настройки СКД, Настройки СКД, Компоновщик настроек
//  Параметр - имя параметра СКД для которого нужно вернуть значение параметра
Функция ПолучитьПараметр(Настройки, Параметр) Экспорт
	
	ЗначениеПараметра = Неопределено;
	ПолеПараметр = ?(ТипЗнч(Параметр) = Тип("Строка"), Новый ПараметрКомпоновкиДанных(Параметр), Параметр);
	
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из Настройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Настройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из Настройки.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = Настройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
		КонецЕсли;
	#Если Сервер Тогда
	ИначеЕсли ТипЗнч(Настройки) = Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	#КонецЕсли		
	ИначеЕсли ТипЗнч(Настройки) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.Найти(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ОформлениеКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.НайтиЗначениеПараметра(ПолеПараметр);
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Функция устанавливает значение параметра компоновки данных
//
// Параметры:
//		Настройки     - Пользовательские настройки СКД, Настройки СКД, Компоновщик настроек
//		Параметр      - имя параметра СКД для которого нужно вернуть значение параметра
//      Значение      - значение параметра
//		Использование - Признак использования параметра. По умолчанию всегда принимается равным истине.
//
Функция УстановитьПараметр(Настройки, Параметр, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = ПолучитьПараметр(Настройки, Параметр);
	
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Использование = Использование;
		ЗначениеПараметра.Значение      = Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

Процедура ВывестиЗаголовокОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат, ПланСчетов = "Типовой") Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	
	// Организация
	Если ПараметрыОтчета.Свойство("СписокСтруктурныхЕдиниц") И ЗначениеЗаполнено(ПараметрыОтчета.СписокСтруктурныхЕдиниц) Тогда
		ТекстОрганизация = ВыгрузитьСписокВСтроку(ПараметрыОтчета.СписокСтруктурныхЕдиниц);
		ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
		Результат.Вывести(ОбластьОрганизация);
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ОтчетОбъект") Тогда
		МенеджерОтчета   = ПараметрыОтчета.ОтчетОбъект;
		МетаданныеОтчета = ПараметрыОтчета.ОтчетОбъект.Метаданные();
	Иначе
		МенеджерОтчета   = Отчеты[ПараметрыОтчета.ИдентификаторОтчета];
		МетаданныеОтчета = Метаданные.Отчеты[ПараметрыОтчета.ИдентификаторОтчета];
	КонецЕсли;
	
	// Текст заголовка
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = МенеджерОтчета.ПолучитьТекстЗаголовка(ПараметрыОтчета);
	Результат.Вывести(ОбластьЗаголовок);
	
	ИдентификаторОбъекта = "ОтчетОбъект." + ПараметрыОтчета.ИдентификаторОтчета;
	
	// Показатели отчета
	ПоказыватьВыводимыеДанные = Ложь;
	ТекстВыводимыеДанные = "";
	КоличествоПоказателей = 0;
	
	Если ПараметрыОтчета.Свойство("НаборПоказателей") Тогда
		Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] И ИмяПоказателя <> "РазвернутоеСальдо" Тогда
				ТекстВыводимыеДанные = ТекстВыводимыеДанные + МетаданныеОтчета.Реквизиты["Показатель" + ИмяПоказателя].Синоним + ", ";
				КоличествоПоказателей = КоличествоПоказателей + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ТекстВыводимыеДанные = Лев(ТекстВыводимыеДанные, СтрДлина(ТекстВыводимыеДанные) - 2);
	
	Если КоличествоПоказателей > 1 Тогда
		ПоказыватьВыводимыеДанные = Истина;
	КонецЕсли;
	Если ПоказыватьВыводимыеДанные Тогда 
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Выводимые данные:'");
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстВыводимыеДанные;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	// Отбор
	ТекстОтбор = Строка(КомпоновщикНастроек.Настройки.Отбор);
	ТекстПодразделение = "";
	
	ЕстьОтборПоПодразделению = Ложь;
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") 
				И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда 
				ЕстьОтборПоПодразделению = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьОтборПоПодразделению Тогда 
		Если ПараметрыОтчета.Свойство("СписокПодразделений") И ЗначениеЗаполнено(ПараметрыОтчета.СписокПодразделений) Тогда
			ТекстПодразделение = НСтр("ru = 'Подразделение В группе ""%1""'");
			ТекстПодразделение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                     	ТекстПодразделение, ВыгрузитьСписокВСтроку(ПараметрыОтчета.СписокПодразделений));
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстОтбор) И Не ПустаяСтрока(ТекстПодразделение) Тогда
			ТекстОтбор = ТекстПодразделение + НСтр("ru = ' И '") + ТекстОтбор;
		ИначеЕсли ПустаяСтрока(ТекстОтбор) И Не ПустаяСтрока(ТекстПодразделение) Тогда
			ТекстОтбор = ТекстПодразделение;
		КонецЕсли;
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстОтбор) Тогда
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Отбор:'");
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстОтбор;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
		// Сортировка
		ТекстСортировка = "";
		Для Каждого СтрокаПорядок Из КомпоновщикНастроек.Настройки.Порядок.Элементы Цикл
			Если СтрокаПорядок.Использование Тогда
				ТекстСортировка = ТекстСортировка + ПолучитьСвойствоПоля(КомпоновщикНастроек, СтрокаПорядок.Поле);
				ТекстСортировка = ТекстСортировка + " " + Строка(СтрокаПорядок.ТипУпорядочивания) + ", ";
			КонецЕсли;
		КонецЦикла;
		ТекстСортировка = Лев(ТекстСортировка, СтрДлина(ТекстСортировка) - 2);
		
		Если Не ПустаяСтрока(ТекстСортировка) Тогда
			ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Сортировка:'");
			ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстСортировка;
			Результат.Вывести(ОбластьОписаниеНастроек);
		КонецЕсли;
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	Результат.Области.Заголовок.Видимость = ПараметрыОтчета.ВыводитьЗаголовок;
	
КонецПроцедуры

Функция ПолучитьСвойствоПоля(ЭлементСтруктура, Поле, Свойство = "Заголовок") Экспорт
	
	Если ТипЗнч(ЭлементСтруктура) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Коллекция = ЭлементСтруктура.Настройки.ДоступныеПоляВыбора;
	Иначе
		Коллекция = ЭлементСтруктура;
	КонецЕсли;
	
	ПолеСтрокой = Строка(Поле);
	ПозицияКвадратнойСкобки = Найти(ПолеСтрокой, "[");
	Окончание = "";
	Заголовок = "";
	Если ПозицияКвадратнойСкобки > 0 Тогда
		Окончание = Сред(ПолеСтрокой, ПозицияКвадратнойСкобки);
		ПолеСтрокой = Лев(ПолеСтрокой, ПозицияКвадратнойСкобки - 2);
	КонецЕсли;
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолеСтрокой, ".");
	
	Если Не ПустаяСтрока(Окончание) Тогда
		МассивСтрок.Добавить(Окончание);
	КонецЕсли;
	
	ДоступныеПоля = Коллекция.Элементы;
	ПолеПоиска = "";
	Для Индекс = 0 По МассивСтрок.Количество() - 1 Цикл
		ПолеПоиска = ПолеПоиска + ?(Индекс = 0, "", ".") + МассивСтрок[Индекс];
		ДоступноеПоле = ДоступныеПоля.Найти(ПолеПоиска);
		Если ДоступноеПоле <> Неопределено Тогда
			ДоступныеПоля = ДоступноеПоле.Элементы;
		КонецЕсли;
	КонецЦикла;
	
	Если ДоступноеПоле <> Неопределено Тогда
		Если Свойство = "ДоступноеПоле" Тогда
			Результат = ДоступноеПоле;
		Иначе
			Результат = ДоступноеПоле[Свойство]; 
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыводПодписейОтчета(ПараметрыОтчета, Результат) Экспорт
	
	Если ПараметрыОтчета.Свойство("ВыводитьПодписиРуководителей") И ПараметрыОтчета.ВыводитьПодписиРуководителей Тогда
		ВыводПодписейРуководителей(ПараметрыОтчета, Результат);
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ВыводитьПодписи") И ПараметрыОтчета.ВыводитьПодписи Тогда 
		Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
		ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
		
		Если ПараметрыОтчета.Свойство("ПримечаниеПодписи") И ЗначениеЗаполнено(ПараметрыОтчета.ПримечаниеПодписи) Тогда
			ОбластьПодписи.Параметры.ТекстПримечание = ПараметрыОтчета.ПримечаниеПодписи;
		КонецЕсли;
		
		Результат.Вывести(ОбластьПодписи);
		
		Результат.Области.Подписи.Видимость = ПараметрыОтчета.ВыводитьПодписи;
	КонецЕсли;

КонецПроцедуры

Процедура ВыводПодписейРуководителей(ПараметрыОтчета, Результат)
	
	Макет = ПолучитьОбщийМакет("фин_ОбщиеОбластиСтандартногоОтчета");
	ОбластьПодписи = Макет.ПолучитьОбласть("ПодписиРуководителей");
	
	ВыбиратьОрганизацию = Ложь;
	Попытка
		СписокСтруктурныхЕдиниц = ПараметрыОтчета.СписокСтруктурныхЕдиниц;
		Если СписокСтруктурныхЕдиниц.Количество() > 0 Тогда
			ВыбиратьОрганизацию = Истина;
		КонецЕсли;
	Исключение
	КонецПопытки;

	Если ВыбиратьОрганизацию Тогда
		Если СписокСтруктурныхЕдиниц.Количество() = 1 Тогда
			Организация = СписокСтруктурныхЕдиниц[0].Значение;
		Иначе
			Организация = Неопределено;
		КонецЕсли;	
	Иначе
		Организация = Неопределено;
	КонецЕсли;
	
	Если Организация = Неопределено Тогда
		ОбластьПодписи.Параметры.РукРасшифровкаПодписи     = "";	
		ОбластьПодписи.Параметры.РукДолжность              = "";
		ОбластьПодписи.Параметры.ГлавБухРасшифровкаПодписи = "";	
		ОбластьПодписи.Параметры.ГлавБухДолжность          = "";
	Иначе
		//Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(Организация, ТекущаяДата());
		//ОбластьПодписи.Параметры.РукРасшифровкаПодписи     = Руководители.Руководитель;	
		//ОбластьПодписи.Параметры.РукДолжность              = Руководители.РуководительДолжность;
		//ОбластьПодписи.Параметры.ГлавБухРасшифровкаПодписи = Руководители.ГлавныйБухгалтер;	
		//ОбластьПодписи.Параметры.ГлавБухДолжность          = Руководители.ГлавныйБухгалтерДолжность;
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ПримечаниеПодписиРуководителей") И ЗначениеЗаполнено(ПараметрыОтчета.ПримечаниеПодписиРуководителей) Тогда
		ОбластьПодписи.Параметры.ТекстПримечание = ПараметрыОтчета.ПримечаниеПодписиРуководителей;
	КонецЕсли;

	Результат.Вывести(ОбластьПодписи);
	
КонецПроцедуры

Процедура ОбработкаРезультатаОтчета(ИдентификаторОтчета, Результат) Экспорт
	
	// Выводим надписи вертикально, если количество точек диаграмм больше 9
	Для Каждого Рисунок Из Результат.Рисунки Цикл
		Попытка
			Если ТипЗнч(Рисунок.Объект) = Тип("Диаграмма") Тогда
				Рисунок.Объект.ОбластьПостроения.ВертикальныеМетки  = (Рисунок.Объект.Точки.Количество() > 9);
				Рисунок.Объект.ОбластьПостроения.ФорматШкалыЗначений = "ЧГ=3,0";
				Рисунок.Объект.ОбластьЛегенды.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
				
				Рисунок.Объект.ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы = ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы.НаШкале;
				Рисунок.Объект.ПодписиШкалыЗначенийИзмерительнойДиаграммыВдольШкалы = Истина;
				Рисунок.Объект.ТолщинаШкалыИзмерительнойДиаграммы                   = 3;
				Рисунок.Объект.ФорматЗначенийВПодписях                              = "ЧДЦ=2; ЧГ=3,0";
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	//Удалим строки с высотой равной 1
	Индекс = Результат.ВысотаТаблицы;
	Пока Индекс > 0 Цикл
		ИндексСтроки = "R" + Формат(Индекс, "ЧГ=0");
		Если Результат.Область(ИндексСтроки).ВысотаСтроки = 1 Тогда
			Результат.УдалитьОбласть(Результат.Область(ИндексСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
		
	Результат.АвтоМасштаб = Истина;
	
	Результат.ПолеСлева   = 5;
	Результат.ПолеСправа  = 5;
	
	Результат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ИдентификаторОтчета;
		
КонецПроцедуры


Функция ПолучитьИдентификаторОбъекта(Форма) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".")[1];
	
КонецФункции


Функция ПолучитьНаименованиеЗаданияВыполненияОтчета(Форма) Экспорт
	
	НаименованиеЗадания = НСтр("ru = 'Выполнение отчета: %1'");
	ИмяОтчета = ПолучитьИдентификаторОбъекта(Форма);
	НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеЗадания, ИмяОтчета);
	
	Возврат НаименованиеЗадания;
	
КонецФункции

Функция ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(Знач Результат, КэшВыделеннойОбласти) Экспорт
	
	Сумма = 0;
	Для Каждого КлючИЗначение Из КэшВыделеннойОбласти Цикл
		СтруктураАдресВыделеннойОбласти = КлючИЗначение.Значение;
		Для ИндексСтрока = СтруктураАдресВыделеннойОбласти.Верх По СтруктураАдресВыделеннойОбласти.Низ Цикл
			Для ИндексКолонка = СтруктураАдресВыделеннойОбласти.Лево По СтруктураАдресВыделеннойОбласти.Право Цикл
				Попытка
					Ячейка = Результат.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
					Если Ячейка.Видимость = Истина Тогда
						Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
							Сумма = Сумма + Ячейка.Значение;
						ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
							Сумма = Сумма + Число(СтрЗаменить(Ячейка.Текст, " ", ""));
						КонецЕсли;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	КэшВыделеннойОбласти.Вставить("Сумма", Сумма);
	
	Возврат Сумма;
	
КонецФункции


// Функция добавляет набор данных - запрос в указанную в параметре коллекцию наборов данных
Функция ДобавитьНаборДанныхЗапрос(НаборыДанных, ИсточникДанных, ИмяНабораДанных = "НаборДанных1") Экспорт
	
	НаборДанных = НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = ИмяНабораДанных;
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
	Возврат НаборДанных;
	
КонецФункции


Процедура ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка) Экспорт
	
	ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
	Если ПолеВыбраннойГруппировки.ТипГруппировки = 1 Тогда
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = 2 Тогда
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
	Иначе
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	КонецЕсли;
	Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Группировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
КонецПроцедуры


// Возвращает доступное поле по полю компоновки
Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, ОбластьПоиска) Экспорт
	
	Если ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка") Тогда
		ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПолеКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
	 Или ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
	 Или ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПоле(ПолеПоиска);
	КонецЕсли;
	
КонецФункции

Функция ДобавитьРодителей(ЭлементРасшифровки, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы = Ложь)  Экспорт
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Поле.Поле), ТекущийОтчет);
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ВключатьРесурсы И ДоступноеПоле.Ресурс Тогда
				Продолжить;
			КонецЕсли;
			МассивПолейРасшифровки.Добавить(Поле);
		КонецЦикла;
	КонецЕсли;
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителей(Родитель, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	КонецЦикла;
	
КонецФункции

// Возвращает массив, по которому следует расшифровать отчет
Функция ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, ТекущийОтчет = Неопределено, ВключатьРесурсы = Ложь) Экспорт
	
	МассивПолейРасшифровки = Новый Массив;
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
	   И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		Возврат МассивПолейРасшифровки;
	КонецЕсли;
	
	Если ТекущийОтчет = Неопределено Тогда
		ТекущийОтчет = ДанныеРасшифровки;
	КонецЕсли;
	
	// Добавим поля родительских группировок
	ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	
	Количество = МассивПолейРасшифровки.Количество();
	Для Индекс = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Индекс;
		Для ИндексВнутри = 0 По ОбратныйИндекс - 1 Цикл
			Если МассивПолейРасшифровки[ОбратныйИндекс].Поле = МассивПолейРасшифровки[ИндексВнутри].Поле Тогда
				МассивПолейРасшифровки.Удалить(ОбратныйИндекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Добавим отбор, установленный в отчете
	Для каждого ЭлементОтбора Из ТекущийОтчет.Настройки.Отбор.Элементы Цикл
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		МассивПолейРасшифровки.Добавить(ЭлементОтбора);
	КонецЦикла;
	
	Возврат МассивПолейРасшифровки;
	
КонецФункции

// Добавляет в набор данных поле набора данных
Функция ДобавитьПолеНабораДанных(НаборДанных, Поле, Заголовок, ПутьКДанным = Неопределено) Экспорт
	
	Если ПутьКДанным = Неопределено Тогда
		ПутьКДанным = Поле;
	КонецЕсли;
	
	ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораДанных.Поле        = Поле;
	ПолеНабораДанных.Заголовок   = Заголовок;
	ПолеНабораДанных.ПутьКДанным = ПутьКДанным;
	Возврат ПолеНабораДанных;
	
КонецФункции

// Добавляет отбор в набор отборов компоновщика или группы отборов
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено, Использование = Истина, Применение = Неопределено) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
		
	НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.Использование  = Использование;
	НовыйЭлемент.ЛевоеЗначение 	= Поле;
	НовыйЭлемент.ВидСравнения 	= ВидСравнения;
	НовыйЭлемент.ПравоеЗначение = Значение;
	          	
	Если Применение <> Неопределено Тогда
		НовыйЭлемент.Применение = Применение;
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции
