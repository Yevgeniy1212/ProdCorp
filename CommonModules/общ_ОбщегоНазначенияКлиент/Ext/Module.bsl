
// Работа с отправкой печатной формы
//
Процедура ОтправкаПечатнойФормыПоЭлПочте(Форма, Знач ТабДокумент)Экспорт 
	
	ТабДокумент.АвтоМасштаб = Истина;
	
	ПараметрыОтправки = Новый Структура;
	Получатель = Новый Массив;
	//Попытка
	//	ПолучательПисьма = Форма.ОбъектПечати.Контрагент;
	//	Представление = "";
	//	Адрес = "";
	//	ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	//	Взаимодействия.ДозаполнитьПоляКонтактов(ПолучательПисьма, Представление, Адрес, ТипКонтактнойИнформации);

	//	Получатель.Добавить(Новый Структура("ИсточникКонтактнойИнформации, Адрес, Представление", ПолучательПисьма, Адрес, Представление));
	//Исключение
		Получатель.Добавить(Новый Структура("ИсточникКонтактнойИнформации, Адрес, Представление", Неопределено, Неопределено, Неопределено));
	//КонецПопытки;
	
	ПараметрыОтправки.Вставить("Получатель", Получатель);
	ПараметрыОтправки.Вставить("Тема", Форма.Заголовок);
	ПараметрыОтправки.Вставить("Текст", Форма.Заголовок);
    ПараметрыОтправки.Вставить("КлючУникальности", ?(ТипЗнч(Форма)=Тип("УправляемаяФорма"),Форма.УникальныйИдентификатор,Форма.КлючУникальности));
	ПараметрыОтправки.Вставить("ПолеДокумента", ТабДокумент);
	
	ПараметрыОткрытия = Новый Структура;
	ИмяОткрываемойФормы = "ОбщаяФорма.ВыборФорматаВложений";
	//Если ПолучателейБольшеОдного(ПараметрыОтправки.Получатель) Тогда
	//	ПараметрыОткрытия.Вставить("Получатели", ПараметрыОтправки.Получатель);
	//	ИмяОткрываемойФормы = "ОбщаяФорма.ОтправкаПечатнойФормыПоПочте";
	//КонецЕсли;
	
	ОписаниеОбработкаВыбораНастроекСохранения = Новый ОписаниеОповещения("ОбработкаВыбораНастроекСохранения",общ_ОбщегоНазначенияКлиент,ПараметрыОтправки);
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыОткрытия,Форма,,,,ОписаниеОбработкаВыбораНастроекСохранения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

Функция ОбработкаВыбораНастроекСохранения(НастройкиСохранения,ПараметрыОтправки) Экспорт
	Если НастройкиСохранения <> Неопределено И НастройкиСохранения <> КодВозвратаДиалога.Отмена Тогда
		СписокВложений 	= ПоместитьТабличныеДокументыВоВременноеХранилище(НастройкиСохранения, ПараметрыОтправки);
		Получатели 		= ПараметрыОтправки.Получатель;
		РежимИнтеграции = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
		Если НЕ фин_ОбщегоНазначенияСервер.ИспользоватьКлиентБСП() Тогда
			ОткрытьФормуОтправкиПочтовогоСообщения( , Получатели, ПараметрыОтправки.Тема, ПараметрыОтправки.Текст, СписокВложений, Истина);
		Иначе
			Выполнить("ВзаимодействияКлиент.ОткрытьФормуОтправкиПочтовогоСообщения( , Получатели, ПараметрыОтправки.Тема, ПараметрыОтправки.Текст, СписокВложений, Истина)");
		КонецЕсли;
	КонецЕсли;
КонецФункции


Функция ПолучателейБольшеОдного(Получатель) Экспорт
	Если ТипЗнч(Получатель) = Тип("Массив") Или ТипЗнч(Получатель) = Тип("СписокЗначений") Тогда
		Возврат Получатель.Количество() > 1;
	Иначе
		Возврат ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(Получатель).Количество() > 1;
	КонецЕсли;
КонецФункции

Функция ПоместитьТабличныеДокументыВоВременноеХранилище(НастройкиСохранения, ПараметрыОтправки) Экспорт 
	Перем ЗаписьZipФайла, ИмяАрхива;
	
	Результат = Новый СписокЗначений;
	
	// подготовка архива
	#Если НЕ ВебКлиент Тогда
	Если НастройкиСохранения.УпаковатьВАрхив Тогда
		ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
		ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяАрхива);
	КонецЕсли;
	#КонецЕсли
	
	// подготовка временной папки
	#Если НЕ ВебКлиент Тогда
		ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	#Иначе
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		Диалог.Заголовок="Укажите каталог временных файлов для сохранения вложения";
		Если Диалог.Выбрать() Тогда
			ИмяВременнойПапки = Диалог.Каталог;
		Иначе
			Возврат Результат;
		КонецЕсли;
	#КонецЕсли
	СоздатьКаталог(ИмяВременнойПапки);
	ИспользованныеИменаФайлов = Новый Соответствие;
	
	ВыбранныеФорматыСохранения = НастройкиСохранения.ФорматыСохранения;
	
	Для Каждого ТипФайла Из ВыбранныеФорматыСохранения Цикл
		НастройкиФормата = фин_ОбщегоНазначенияСервер.НастройкиФормата(ТипФайла);
		
		ИмяФайла = ПолучитьИмяВременногоФайлаДляПечатнойФормы(ПараметрыОтправки.Тема,НастройкиФормата.Расширение,ИспользованныеИменаФайлов);
		ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайла;
		
		Попытка
			ПараметрыОтправки.ПолеДокумента.Записать(ПолноеИмяФайла, ТипФайла);
		Исключение
			Сообщить("Не удалось сохранить файл в формат:" + НастройкиФормата.Расширение + ". Пожалуйста, выберите другой формат сохранения файла.", СтатусСообщения.Важное);
			Продолжить;
		КонецПопытки;
				
		Если ТипФайла = ТипФайлаТабличногоДокумента.HTML Тогда
			ВставитьКартинкиВHTML(ПолноеИмяФайла);
		КонецЕсли;
		
		Если ЗаписьZipФайла <> Неопределено Тогда 
			ЗаписьZipФайла.Добавить(ПолноеИмяФайла);
		Иначе
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ПараметрыОтправки.КлючУникальности);
			Результат.Добавить(ПутьВоВременномХранилище, ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	
	// если архив подготовлен, записываем и помещаем его во временное хранилище
	Если ЗаписьZipФайла <> Неопределено Тогда 
		ЗаписьZipФайла.Записать();
		ФайлАрхива = Новый Файл(ИмяАрхива);
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяАрхива);
		ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ПараметрыОтправки.КлючУникальности);
		Результат.Добавить(ПутьВоВременномХранилище, ПолучитьИмяФайлаДляАрхива(ПараметрыОтправки));
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременнойПапки);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИмяВременногоФайлаДляПечатнойФормы(ИмяМакета, Расширение, ИспользованныеИменаФайлов)
	
	ШаблонИмениФайла = "%1%2.%3";
	
	ИмяМакета = СокрЛП(Лев(ИмяМакета, 250));
	
	ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, ИмяМакета, "", Расширение));
		
	НомерИспользования = ?(ИспользованныеИменаФайлов[ИмяВременногоФайла] <> Неопределено,
							ИспользованныеИменаФайлов[ИмяВременногоФайла] + 1,
							1);
	
	ИспользованныеИменаФайлов.Вставить(ИмяВременногоФайла, НомерИспользования);
	
	// если имя уже было ранее использовано, прибавляем счётчик в конце имени
	Если НомерИспользования > 1 Тогда
		ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонИмениФайла,
				ИмяМакета,
				" (" + НомерИспользования + ")",
				Расширение));
	КонецЕсли;
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

Процедура ВставитьКартинкиВHTML(ИмяФайлаHTML) Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	ТекстHTML = ТекстовыйДокумент.ПолучитьТекст();
	
	ФайлHTML = Новый Файл(ИмяФайлаHTML);
	
	ИмяПапкиКартинок = ФайлHTML.ИмяБезРасширения + "_files";
	ПутьКПапкеКартинок = СтрЗаменить(ФайлHTML.ПолноеИмя, ФайлHTML.Имя, ИмяПапкиКартинок);
	
	// ожидается, что в папке будут только картинки
	ФайлыКартинок = НайтиФайлы(ПутьКПапкеКартинок, "*");
	
	Для Каждого ФайлКартинки Из ФайлыКартинок Цикл
		КартинкаТекстом = Base64Строка(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя));
		КартинкаТекстом = "data:image/" + Сред(ФайлКартинки.Расширение,2) + ";base64," + Символы.ПС + КартинкаТекстом;
		
		ТекстHTML = СтрЗаменить(ТекстHTML, ИмяПапкиКартинок + "\" + ФайлКартинки.Имя, КартинкаТекстом);
	КонецЦикла;
		
	ТекстовыйДокумент.УстановитьТекст(ТекстHTML);
	ТекстовыйДокумент.Записать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	
КонецПроцедуры

Функция ПолучитьИмяФайлаДляАрхива(ПараметрыОтправки) Экспорт 
	
	Результат = "";
	
	Если ПустаяСтрока(Результат) Тогда
		Результат = ПараметрыОтправки.Тема;
	Иначе
		Результат = НСтр("ru = 'Документы'");
	КонецЕсли;
	
	Возврат Результат + ".zip";
	
КонецФункции

// работа с почтовыми сообщениями на старом почтовом клиенте
	
Процедура ОткрытьФормуОтправкиПочтовогоСообщения(Отправитель,Получатель,Тема,Текст,СписокФайлов,УдалятьФайлыПослеОтправки) Экспорт
	
	#Если ТолстыйКлиент Тогда
	Письмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
	Письмо.Автор = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("глТекущийПользователь");
	Письмо.Ответственный = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("глТекущийПользователь");
	Письмо.ТекстПисьма = Текст;
	Письмо.Тема = Тема;
	Письмо.УчетнаяЗапись = Отправитель;
	Если НЕ ЗначениеЗаполнено(Отправитель) Тогда
		Письмо.УчетнаяЗапись = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнаяУчетнаяЗапись");
	КонецЕсли;
	Для Каждого ЭлПолучатель Из Получатель Цикл
		Если ЗначениеЗаполнено(ЭлПолучатель.Адрес) Тогда
			НС = Письмо.КомуТЧ.Добавить();
			НС.Представление = ЭлПолучатель.Представление;
			НС.АдресЭлектроннойПочты = ЭлПолучатель.Адрес;
			Письмо.Кому = Письмо.Кому+?(Письмо.Кому="","",", ")+ЭлПолучатель.Представление+" <"+ЭлПолучатель.Адрес+">";
		КонецЕсли;
	КонецЦикла;
	ФормаДокумента = Письмо.ПолучитьФорму();
	Для Каждого Файл Из СписокФайлов Цикл
		СтрокаТЧ = ФормаДокумента.ВложенияПисьмаТЗ.Добавить();
		СтрокаТЧ.Наименование = Файл.Представление;
		СтрокаТЧ.ИмяФайла = Файл.Представление;
		СтрокаТЧ.Данные = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(Файл.Значение));
		//СтрокаТЧ.Картинка = Файл.Картинка;
	КонецЦикла;
	ФормаДокумента.Открыть();
	#КонецЕсли
КонецПроцедуры


Процедура ОткрытьФормуПоИмени(ИмяФормы) Экспорт
	ОткрытьФорму(ИмяФормы);	
КонецПроцедуры


Процедура НажатиеНаПанельЗакладок(Элементы, Элемент,Родитель) Экспорт
	ЖирныйШрифт = Новый Шрифт(,,Истина,,,);
	НеЖирныйШрифт = Новый Шрифт(,,Ложь,,);
	Для Каждого Группа из Родитель.ПодчиненныеЭлементы Цикл
		ИмяЭлемента = Сред(ОтсечьЦифры(Группа.Имя),СтрДлина("Группа")+1);
		Элементы["Декорация"+ИмяЭлемента+"1"].Шрифт =  НеЖирныйШрифт;
	КонецЦикла;
	ИмяЭлемента = Сред(ОтсечьЦифры(Элемент.Имя),СтрДлина("Декорация")+1);
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы["Страница"+ИмяЭлемента];
	Элементы["Декорация"+ИмяЭлемента+"1"].Шрифт =  ЖирныйШрифт;
КонецПроцедуры

Функция ОтсечьЦифры(ИсходнаяСтрока)

	ФинальнаяСтрока = ИсходнаяСтрока;
	
	КодСимвола = КодСимвола(Прав(ИсходнаяСтрока, 1));
	
	Если (КодСимвола >= 48 И КодСимвола <= 57) Тогда
		ФинальнаяСтрока = Лев(ИсходнаяСтрока, СтрДлина(ИсходнаяСтрока) - 1);
	КонецЕсли; 
	
	КодСимвола = КодСимвола(Прав(ФинальнаяСтрока, 1));
	
	Если (КодСимвола >= 48 И КодСимвола <= 57) Тогда
		ФинальнаяСтрока = Лев(ФинальнаяСтрока, СтрДлина(ФинальнаяСтрока) - 1);
	КонецЕсли; 
	
	Возврат ФинальнаяСтрока;
		
КонецФункции // ОтсечьЦифры()

// Процедура вызывается из модуля формы документов при обработке оповещения
//
// Параметры:
//   Форма - Управляемая форма, для которой производится обработка оповещения
//   ДокументСсылка - ссылка на документ формы
//   ИмяСобытия - имя обрабатываемого события
//   Параметр - параметр, переданный в обработку оповещения
//   Источник - источник, переданный в обработку оповещения
Процедура ОбработкаОповещенияФормыДокумента(Форма, ДокументСсылка, ИмяСобытия, Параметр, Источник) Экспорт
	Если ИмяСобытия = "ВыполненаЗаписьДокумента" Тогда
		Если ДокументСсылка = Параметр.ДокументСсылка Тогда 
			Форма.Прочитать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ВВОДА ДАТЫ КАК МЕСЯЦА

// Предназначена для реализации "произвольного" ввода даты-месяца
// подбирает по переданному тексту строку-представление даты или список таких строк
// в переданный параметр ДатаПоТексту возвращает подобранную по тексту дату
Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = Неопределено) Экспорт
    СписокВозврата = Новый СписокЗначений;
    ТекущийГод = Год(ТекущаяДата());
    
    Если ПустаяСтрока(Текст) Тогда
        Возврат СписокВозврата;
    КонецЕсли;
    Если Найти(Текст, ".") <> 0 Тогда
        Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ".");
    ИначеЕсли Найти(Текст, ",") <> 0 Тогда
        Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ",");
    ИначеЕсли Найти(Текст, "-") <> 0 Тогда
        Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "-");
    ИначеЕсли Найти(Текст, "/") <> 0 Тогда
        Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "/");
    ИначеЕсли Найти(Текст, "\") <> 0 Тогда
        Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "\");
    Иначе
        Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, " ");
    КонецЕсли;
    Если Подстроки.Количество() = 1 Тогда
        // единственное слово - пытаемся получить месяц
        Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
            МесяцЧислом = Число(Текст);
            Если МесяцЧислом >= 1 и МесяцЧислом <=12 Тогда
                ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
                Если СтрДлина(Текст) = 1 Тогда
                    СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
                Иначе
                    СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
                КонецЕсли;
            Иначе
                Возврат СписокВозврата;
            КонецЕсли;                
        Иначе
            СписокМесяцев = СписокМесяцевПоСтроке(Текст);
            Для Каждого Месяц Из СписокМесяцев Цикл
                ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
                СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гг'"));
            КонецЦикла;
        КонецЕсли;
    ИначеЕсли Подстроки.Количество() = 2 Тогда
        // два слова - первое считаем месяцем, второе - годом
        Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
            Если ПустаяСтрока(Подстроки[1]) Тогда
                ГодЧислом = 0;
                Подстроки[1] = "0";
                ТекстВозврата = Текст + "0";
            Иначе
                ГодЧислом = Число(Подстроки[1]);
                ТекстВозврата = "";
            КонецЕсли;
            Если ГодЧислом > 3000 Тогда
                Возврат СписокВозврата;
            КонецЕсли;
            Если СтрДлина(Подстроки[1]) <= 1 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
                СтрокаФорматированияГода = "г";
            ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
                СтрокаФорматированияГода = "гг";
            ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
                СтрокаФорматированияГода = "гггг";
            КонецЕсли;                    
        Иначе
            // второе слово может быть только годом
            Возврат СписокВозврата;
        КонецЕсли;                
        Если ЗначениеЗаполнено(Подстроки[0]) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
            МесяцЧислом = Число(Подстроки[0]);
            Если МесяцЧислом >= 1 и МесяцЧислом <= 12 Тогда
                // если "правильный" месяц и год
                ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
                СписокВозврата.Добавить(ТекстВозврата);
            Иначе
                Возврат СписокВозврата;
            КонецЕсли;                
        Иначе
            СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
			Если СписокМесяцев.Количество() = 1 Тогда
				ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Для Каждого Месяц Из СписокМесяцев Цикл
                    ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
                    СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гг'"));
                КонецЦикла;
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
    Возврат СписокВозврата;
КонецФункции // ДатаКакМесяцПодобратьДатуПоТексту()

// Процедура обрабатывается событие "АвтоПодборТекста" для поля ввода текста с датой
// 
Процедура ДатаКакМесяцАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
    ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
    Если ДанныеВыбора.Количество() = 1 Тогда
        ТекстАвтоПодбора = ДанныеВыбора[0].Значение;
    КонецЕсли;
    СтандартнаяОбработка = Ложь;
КонецПроцедуры // ДатаКакМесяцАвтоПодборТекста()

// Процедура обрабатывается событие "ОкончаниеВводаТекста" для поля ввода текста с датой
//
Процедура ДатаКакМесяцОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
	Если ДанныеВыбора.Количество() = 1 Тогда
		Значение = Текст;
	Иначе
		Значение = ДанныеВыбора;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры // ДатаКакМесяцОкончаниеВводаТекста()

// Подбирает массив номеров месяцев, соответствующих переданной строке
// например, для строки "ма" это будут 3 и 5, для "а" - 4 и 8
// используется в ПодобратьДатуПоТексту
//
Функция СписокМесяцевПоСтроке(Текст) Экспорт
	
	СписокМесяцев = Новый СписокЗначений;
	Месяцы = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции // СписокМесяцевПоСтроке()

// Изменяет значение отбора в динамическом списке.
// Поиск производится по представлению в элементах отборов верхнего уровня.
//
// Надо анализировать возвращаемое значение - и если вернется
//  Неопределено (т.е. отбор не установлен по причине того, что в списке
//  нет отбора по основной организации (он исправлен вручную и т.п.)), то не надо
//  присваивать Неопределено специальному полю "ОтборПоОрганизации" в форме списка.
//
// Параметры
//  Список         - ДинамическийСписок - список, в котором необходимо изменить значение отбора.
//  ИмяРеквизита   - Строка - имя поля-организации в динамическом списке.
//  ЗначениеОтбора - СправочникСсылка.Организации, СписокЗначений, Массив - значение отбора.
//
// Возвращаемое значение:
//   СправочникСсылка.Организации - Если отбор установлен, то вернет значение отбора.
//
Функция ИзменитьОтборПоОсновнойОрганизации(Список, ИмяРеквизита = "Организация", ЗначениеОтбора = Неопределено) Экспорт

	Представление = НСтр("ru = 'Отбор по основной организации'");
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, ИмяРеквизита);
	
	Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		Если ТипЗнч(ЗначениеОтбора) <> Тип("СправочникСсылка.Организации")
			И ТипЗнч(ЗначениеОтбора) <> Тип("Массив")
			И ТипЗнч(ЗначениеОтбора) <> Тип("СписокЗначений") Тогда
			ЗначениеОтбора = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеОтбора) = Тип("Массив")
		ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") Тогда
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
	Иначе
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	ИспользованиеОтбора = ЗначениеЗаполнено(ЗначениеОтбора);
	
	фин_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, ИмяРеквизита, ЗначениеОтбора, ВидСравненияОтбора, , ИспользованиеОтбора, 
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Возврат ЗначениеОтбора;

КонецФункции

Процедура мПоказатьВводСтроки(Владелец,ОписаниеОповещенияОЗавершении=Неопределено, Строка="", Подсказка="", Длина=0, Многострочность=Ложь) Экспорт
	Параметры = Новый Структура("Строка,Подсказка,Длина,Многострочность",Строка,Подсказка,Длина,Многострочность);
	ОткрытьФорму("ОбщаяФорма.общ_ФормаВводаСтроки",Параметры,Владелец,Владелец.УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещенияОЗавершении,?(ТекущийРежимЗапуска()=РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение,РежимОткрытияОкнаФормы.Независимый,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца));	
КонецПроцедуры

// Процедура обрабатывает событие начала выбора из списка в поле периода регистрации
// Процедура исполняется только на клиенте
// СтандартнаяОбработка не устанавливается в значение Ложь, иначе появляется поле данных выбора со значением """" не найдено"
//
Процедура НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, ПериодРегистрации, ЭтаФорма, НачальноеЗначение = Неопределено, ОбрабатыватьВыборИзСписаНаФорме = Ложь) Экспорт

	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = ПериодРегистрации;
	КонецЕсли; 
	
	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	НачалоМесяцаЗаполнения = НачалоТекущегоГода;
	Для а = 1 По 12 Цикл
		ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоМесяцаЗаполнения, ДатаКакМесяцПредставление(НачалоМесяцаЗаполнения));
		НачалоМесяцаЗаполнения = ДобавитьМесяц(НачалоМесяцаЗаполнения, 1);
	КонецЦикла;
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));
	
	ДопПараметры = Новый Структура("Элемент, ПериодРегистрации, ЭтаФорма", Элемент, ПериодРегистрации, ЭтаФорма);
	
	ЭтаФорма.ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ВыполнитьПослеВыбораИзСпискаПредставленияПериодаРегистрации", ?(ОбрабатыватьВыборИзСписаНаФорме, ЭтаФорма, общ_ОбщегоНазначенияКлиент), ДопПараметры), СписокВыбора, Элемент, СписокВыбора.НайтиПоЗначению(ПериодРегистрации));
	
КонецПроцедуры

// Функция возвращает дату как месяц в виде строки
//
Функция ДатаКакМесяцПредставление(ДатаДата) Экспорт
	
	Возврат Формат(ДатаДата, "ДФ='ММММ гггг'");
	
КонецФункции // ДатаКакМесяцПредставление()

Процедура ВыполнитьПослеВыбораИзСпискаПредставленияПериодаРегистрации(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(ДопПараметры.ПериодРегистрации) Тогда
		НачалоВыбораИзСпискаПредставленияПериодаРегистрации(ДопПараметры.Элемент, ВыбранныйЭлемент.Значение, ДопПараметры.ЭтаФорма, ВыбранныйЭлемент.Значение);
		Возврат;
	КонецЕсли;
	
	ДопПараметры.ЭтаФорма.Объект.ПериодРегистрации = ВыбранныйЭлемент.Значение; 
	ДопПараметры.ЭтаФорма.МесяцНачисленияСтрокой   = ДатаКакМесяцПредставление(ВыбранныйЭлемент.Значение);
	ДопПараметры.ЭтаФорма.Модифицированность = Истина;

	//////////////////////////////////////////////////////////////////////////////
	// Оповещение об изменении периода необходимо
	// для выполнения дополнительных действий в форме источнике.
	
	ПараметрыОповещения = Новый Структура;	
	Если ДопПараметры.Свойство("ЭтаФорма") Тогда
		ПараметрыОповещения.Вставить("Форма", ДопПараметры.ЭтаФорма); 	
	КонецЕсли;
	Оповестить("ИзмененПериод", ПараметрыОповещения);
	
КонецПроцедуры

Процедура мПоказатьВводЗначения(Владелец,ОписаниеОповещенияОЗавершении=Неопределено, Значение=Неопределено, Подсказка="",Тип = Неопределено) Экспорт
	Если Тип = Неопределено Тогда
		Тип = Новый ОписаниеТипов;
	КонецЕсли;
	Параметры = Новый Структура("Значение,Подсказка,Тип",Значение,Подсказка,Тип);
	ОткрытьФорму("ОбщаяФорма.общ_ФормаВводаЗначения",Параметры,Владелец,Владелец.УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещенияОЗавершении,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
КонецПроцедуры

