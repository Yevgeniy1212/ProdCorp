
//Функция РеквизитСодержитТип
//
Функция РеквизитСодержитТип(РеквизитТип,НадлежащийТип) Экспорт
	Возврат фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(РеквизитТип,НадлежащийТип);
КонецФункции //РеквизитСодержитТип

//Функция НаличиеРазрезаБюджета
//
Функция НаличиеРазрезаБюджета(Бюджет,Разрез) Экспорт
    Возврат фин_РаботаСДополнительнымиРазрезамиБюджетирования.НаличиеРазрезаБюджета(Бюджет,Разрез);
КонецФункции //НаличиеРазрезаБюджета
  
//Процедура ОбработатьРедактированиеДополнительныхРеквизитовДокумента
//
Процедура ОбработатьРедактированиеДополнительныхРеквизитовДокумента(Форма,Объект) Экспорт
	#Если ТолстыйКлиентОбычноеПриложение Тогда
	Если Объект.ЭтоНовый() И Объект.Метаданные().ТабличныеЧасти.Найти("фин_ЗначенияДополнительныхРеквизитовБюджетирования")=Неопределено Тогда
		Ответ = Вопрос("Для редактирования дополнительных реквизитов документ необходимо записать. Записать?", РежимДиалогаВопрос.ДаНет, 60);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		Попытка
		    Объект.Записать();
		Исключение
			ПоказатьПредупреждение(,"Не удалось записать документ!");
			Возврат;
		КонецПопытки;
	КонецЕсли;
	СуществующаяФорма = Неопределено;
	Если Объект.ДополнительныеСвойства.Свойство("ФормаБюджетирование",СуществующаяФорма) Тогда
		Если СуществующаяФорма <> Неопределено И СуществующаяФорма.Открыта() Тогда
			СуществующаяФорма.Активизировать();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	 ОбработкаРедактирования 				= Обработки["фин_РедактированиеДополнительныхРеквизитовОбычноеПриложение"].Создать();
	 ОбработкаРедактирования.ДокументОбъект = Объект;
	 ФормаОбработки 						= ОбработкаРедактирования.ПолучитьФорму(,Объект,Объект);
	 ФормаОбработки.ВладелецФормы 			= Форма;
	 ФормаОбработки.ЗакрыватьПриЗакрытииВладельца = Истина;
	 ФормаОбработки.Открыть();
	 ФормаОбработки.ТолькоПросмотр 			= Форма.ТолькоПросмотр; 
	 Объект.ДополнительныеСвойства.Вставить("ФормаБюджетирование",ФормаОбработки)
	#КонецЕсли
КонецПроцедуры //ОбработатьРедактированиеДополнительныхРеквизитовДокумента

//Процедура ОбработатьВыборВидаДокументаДляОтраженияВБюджетировании
//
Процедура ОбработатьВыборВидаДокументаДляОтраженияВБюджетировании(Элемент,СтандартнаяОбработка,УчитыватьДокументооборот=Ложь,Значение=Неопределено) Экспорт
	 СтандартнаяОбработка = Ложь;
	 СписокВидов = фин_УправлениеБюджетированием.СписокВидовДокументовРегистрируемыхпоФакту();
	 ОткрытьФорму("Справочник.фин_ВидыДокументов.ФормаВыбора",Новый Структура("Отбор",Новый Структура("ПрограммныйИдентификатор",СписокВидов)),Элемент);
КонецПроцедуры //ОбработатьВыборВидаДокументаДляОтраженияВБюджетировании

//Процедура ОбработатьВыборВидаДокументаДляОтраженияВБюджетировании
//
Процедура ОбработатьВыборВидаРегистраДляОтраженияВБюджетировании(Элемент,СтандартнаяОбработка,УчитыватьДокументооборот=Ложь,Значение=Неопределено) Экспорт
	 СтандартнаяОбработка = Ложь;
	 СписокВидов = фин_УправлениеБюджетированием.СписокРегистровРегистрируемыхПоФакту();
	 ОткрытьФорму("Справочник.фин_КлассификаторРегистров.ФормаВыбора",Новый Структура("Отбор",Новый Структура("ПрограммныйИдентификатор",СписокВидов)),Элемент);
КонецПроцедуры //ОбработатьВыборВидаДокументаДляОтраженияВБюджетировании

// В тонком клиенте необходимо вызывать на сервере для этого модуля это не возможно!
////Процедура ДобавитьВСписокАвтовыборПоСубконто
////
//Процедура ДобавитьВСписокАвтовыборПоСубконто(НаборРеквизитов,СписокВыбора,Префикс=Неопределено) Экспорт
//	Для Каждого Реквизит Из НаборРеквизитов Цикл
//		Если Найти(Реквизит.Имя,"Субконто")<>0 И Прав(Реквизит.Имя,1)="1" Тогда
//			Имя = Лев(Реквизит.Имя,СтрДлина(Реквизит.Имя)-1);
//			Если НаборРеквизитов.Найти(Имя+"2")<> Неопределено И НаборРеквизитов.Найти(Имя+"3")<> Неопределено Тогда
//				СписокВыбора.Добавить("АвтовыборПоТипу:"+?(Префикс=Неопределено,"",Префикс+":")+Имя,"Автовыбор по типу из: "+?(Префикс=Неопределено,"",Префикс+":")+Имя);
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//КонецПроцедуры //ДобавитьВСписокАвтовыборПоСубконто


///////////////////////////////////////////////
// работа с отчетами

Функция РазрезНайден(СтруктураРазрезов,Разрез) Экспорт
	Возврат СтруктураРазрезов.НайтиПоЗначению(Разрез)<>Неопределено;
КонецФункции

Функция ИмяРазреза(Разрез) Экспорт
	Возврат фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(Разрез);	
КонецФункции

Функция ПредставлениеРазреза(Разрез) Экспорт
	Возврат фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Разрез);	
КонецФункции

Функция РазрезПоИзмерению(Разрез,КЭШ=Неопределено) Экспорт
	Возврат фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Разрез,КЭШ);	
КонецФункции

Функция УчетПоСтатьеПоРазрезу(ФинансовыйПоказатель,Измерение,КЭШ=Неопределено) Экспорт
	Возврат фин_РаботаСДополнительнымиРазрезамиБюджетирования.УчетПоСтатьеПоРазрезу(ФинансовыйПоказатель,Измерение,КЭШ);	
КонецФункции

Функция НаличиеДополнительныхРазрезов(ФинансовыйПоказатель) Экспорт

	Возврат фин_РаботаСДополнительнымиРазрезамиБюджетирования.НаличиеДополнительныхРазрезов(ФинансовыйПоказатель);

КонецФункции

//пересчитывает сумму из валюты сценария
//
Функция ПересчитатьИзКурсаОперации(Сумма,ДатаПланирования,ВалютаОперации,Разрезы,Документ) Экспорт
	СтрокиВалюта = Разрезы.НайтиСтроки(Новый Структура("Разрез","Валюта:"));
	Если СтрокиВалюта.Количество() > 0 Тогда
		ТекВалюта =  СтрокиВалюта[0].Значение;
	Иначе
		ТекВалюта =  Документ.ВалютаДокумента;
	КонецЕсли;
	ВалютаСценария = ВалютаОперации;
	мСтарый 	= фин_УправлениеБюджетированием.КурсВалютыПоСценарию(ВалютаСценария, 	ДатаПланирования, 	Документ.Сценарий);
	мНовый	 	= фин_УправлениеБюджетированием.КурсВалютыПоСценарию(ТекВалюта, 		ДатаПланирования, 	Документ.Сценарий);
	СтарыйКурс		=	мСтарый.Курс;
	СтараяКратность	=	мСтарый.Кратность;
	НовыйКурс		=	мНовый.Курс;
	НоваяКратность	=	мНовый.Кратность;
	ТекСумма=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(Сумма,
										ВалютаСценария,ТекВалюта,
										СтарыйКурс,НовыйКурс,
										СтараяКратность,НоваяКратность);
	Возврат ТекСумма;	
КонецФункции // ПересчитатьИзКурсаСценария


// Процедура выводит форму структуры подчиненности документа
//
Процедура ПоказатьСтруктуруПодчиненностиДокумента(ДокументСсылка,ПараметрыВыполненияКоманды=Неопределено) Экспорт
	РежимИнтеграции = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимИнтеграции = ПредопределенноеЗначение("Перечисление.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана") Тогда
	 	Если фин_ОбщегоНазначенияСервер.ЕстьОбъектМетаданных("куфиб_ФормаСтруктурыПодчиненности","ОбщиеФормы") = Ложь Тогда
			Возврат;
		КонецЕсли;
		
		ФормаСтруктурыПодчиненности = ПолучитьФорму("ОбщаяФорма.куфиб_ФормаСтруктурыПодчиненности",Новый Структура("ДокументСсылка",ДокументСсылка),,ДокументСсылка);
		
		Если ФормаСтруктурыПодчиненности.Открыта() Тогда
			ФормаСтруктурыПодчиненности.Закрыть();
		КонецЕсли;
		
		ФормаСтруктурыПодчиненности.Открыть();
	ИначеЕсли РежимИнтеграции = ПредопределенноеЗначение("Перечисление.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана")  Тогда
		Выполнить("РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(ДокументСсылка)");
	ИначеЕсли РежимИнтеграции = ПредопределенноеЗначение("Перечисление.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3") ИЛИ РежимИнтеграции = ПредопределенноеЗначение("Перечисление.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0") ИЛИ РежимИнтеграции = ПредопределенноеЗначение("Перечисление.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный")  Тогда

		ОткрытьФорму("ОбщаяФорма.СтруктураПодчиненности",Новый Структура("ОбъектОтбора", ДокументСсылка),
				ПараметрыВыполненияКоманды.Источник,
				ПараметрыВыполненияКоманды.Источник.КлючУникальности,
				ПараметрыВыполненияКоманды.Окно);

	Иначе
		
	КонецЕсли;
	 
КонецПроцедуры // ПоказатьСтруктуруПодчиненностиДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ ДОКУМЕНТОВ

// Процедура выполняет открытие формы работы со свойствами документа
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//  ФормаДокумента - форма редактируемого документа
//
Процедура ОткрытьСвойстваДокумента(ДокументСсылка, ФормаДокумента) Экспорт
 	РежимИнтеграции = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимИнтеграции = ПредопределенноеЗначение("Перечисление.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана") Тогда
		Если фин_ОбщегоНазначенияСервер.ЕстьОбработка("ЗначенияСвойствОбъекта") = Ложь Тогда
			Возврат;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
			ПоказатьПредупреждение(,"Перед началом работы со свойствами необходимо записать документ");
			Возврат;
		КонецЕсли;

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Форма = Обработки.ЗначенияСвойствОбъекта.ПолучитьФорму("ЗначенияСвойствОбъекта", ФормаДокумента, ДокументСсылка);
			Форма.НазначениеСвойств      = ПредопределенноеЗначение("ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы");
			Форма.ОбъектОтбораЗначений   = ДокументСсылка;
			Форма.ОбъектОтбораНазначений = ДокументСсылка;

			Форма.ПрочитатьЗаполнитьСвойстваИЗначения();
		#Иначе
			Форма = ПолучитьФорму("Обработка.ЗначенияСвойствОбъекта.Форма.ФормаУправляемая",Новый Структура("НазначениеСвойств,ОбъектОтбораЗначений,ОбъектОтбораНазначений",ПредопределенноеЗначение("ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы"),ДокументСсылка,ДокументСсылка) ,ФормаДокумента, ДокументСсылка);
		#КонецЕсли

		Форма.Открыть();
	ИначеЕсли РежимИнтеграции = ПредопределенноеЗначение("Перечисление.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана")  Тогда
		
	ИначеЕсли РежимИнтеграции = ПредопределенноеЗначение("Перечисление.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0")  Тогда

		ПараметрыФормы = Новый Структура("ВладелецСвойств", ДокументСсылка);
		ОткрытьФорму("Обработка.ЗначенияСвойствОбъекта.Форма", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры // ОткрытьСвойстваДокумента()

// Процедура выполняет открытие формы работы с категориями документа
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//  ФормаДокумента - форма редактируемого документа
//
Процедура ОткрытьКатегорииДокумента(ДокументСсылка, ФормаДокумента) Экспорт
 	РежимИнтеграции = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимИнтеграции = ПредопределенноеЗначение("Перечисление.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана") Тогда
	
	Если фин_ОбщегоНазначенияСервер.ЕстьОбработка("КатегорииОбъекта") = Ложь Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		ПоказатьПредупреждение(,"Перед началом работы с категориями необходимо записать документ");
		Возврат;
	КонецЕсли;

	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Форма = Обработки.КатегорииОбъекта.ПолучитьФорму("КатегорииОбъекта", ФормаДокумента, ДокументСсылка);

		Форма.НазначениеКатегорий   = ПредопределенноеЗначение("ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы");
		Форма.ОбъектОтбораКатегорий = ДокументСсылка;

		Форма.ПрочитатьЗаполнитьКатегорииОбъекта();
 	#Иначе
		Форма = ПолучитьФорму("Обработка.КатегорииОбъекта.Форма.ФормаУправляемая",Новый Структура("НазначениеКатегорий,ОбъектОтбораКатегорий",ПредопределенноеЗначение("ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы"),ДокументСсылка) ,ФормаДокумента, ДокументСсылка);
	#КонецЕсли
	Форма.Открыть();
	ИначеЕсли РежимИнтеграции = ПредопределенноеЗначение("Перечисление.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана")  Тогда
		
	ИначеЕсли РежимИнтеграции = ПредопределенноеЗначение("Перечисление.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0") Тогда

	
		ПараметрыФормы = Новый Структура("ОбъектОтбораКатегорий", ДокументСсылка);
		ОткрытьФорму("Обработка.КатегорииОбъекта.Форма", ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры // ОткрытьКатегорииДокумента()

