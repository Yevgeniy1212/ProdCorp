Функция ДанныеНадписиОГарантии(ОснованиеГр, ТребуетсяГарантия, СтруктураОтбора = Неопределено) Экспорт
	
	Гарантия = Неопределено;
	НадписьГр   = НСтр("ru='Ввести гарантию'");
	
	Если НЕ ТребуетсяГарантия Тогда
		
		НадписьГр = НСтр("ru='Не требуется'");
		
	ИначеЕсли ЗначениеЗаполнено(ОснованиеГр) Тогда
		
		РеквизитыГр = ЦС_ОбщегоНазначенияБПВызовСервераПовтИсп.РеквизитыДляНадписиОГарантии(ОснованиеГр);
		
		Если РеквизитыГр <> Неопределено Тогда
			Гарантия = РеквизитыГр.Ссылка;
							НадписьГр = ПодставитьПараметрыВСтроку(
					НСтр("ru='№ %1 от %2 г. (%3)'"),
					?(ЗначениеЗаполнено(РеквизитыГр.НомерГарантияФЗ), РеквизитыГр.НомерГарантияФЗ, "..."),
					?(ЗначениеЗаполнено(РеквизитыГр.ДатаГарантияФЗ),  Формат(РеквизитыГр.ДатаГарантияФЗ, "ДЛФ=D"), "..."),
					РеквизитыГр.Представление);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("цс_ГарантияФЗ,НадписьГарантия", Гарантия, НадписьГр); 

КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   – текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1,	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	Если СтрокаПодстановки = Неопределено ИЛИ СтрДлина(СтрокаПодстановки) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	НачПозиция = 1;
	Позиция = 1;
	Пока Позиция <= СтрДлина(СтрокаПодстановки) Цикл
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		Если СимволСтроки <> "%" Тогда
			Позиция = Позиция + 1;
			Продолжить;
		КонецЕсли;
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, Позиция - НачПозиция);
		Позиция = Позиция + 1;
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		
		Если СимволСтроки = "%" Тогда
			Позиция = Позиция + 1;
			НачПозиция = Позиция;
			Результат = Результат + "%";
			Продолжить;
		КонецЕсли;
		
		Попытка
			НомерПараметра = Число(СимволСтроки);
		Исключение
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + СимволСтроки);
		КонецПопытки;
		
		Если СимволСтроки = "1" Тогда
			ЗначениеПараметра = Параметр1;
		ИначеЕсли СимволСтроки = "2" Тогда
			ЗначениеПараметра = Параметр2;
		ИначеЕсли СимволСтроки = "3" Тогда
			ЗначениеПараметра = Параметр3;
		ИначеЕсли СимволСтроки = "4" Тогда
			ЗначениеПараметра = Параметр4;
		ИначеЕсли СимволСтроки = "5" Тогда
			ЗначениеПараметра = Параметр5;
		ИначеЕсли СимволСтроки = "6" Тогда
			ЗначениеПараметра = Параметр6;
		ИначеЕсли СимволСтроки = "7" Тогда
			ЗначениеПараметра = Параметр7;
		ИначеЕсли СимволСтроки = "8" Тогда
			ЗначениеПараметра = Параметр8;
		ИначеЕсли СимволСтроки = "9" Тогда
			ЗначениеПараметра = Параметр9;
		Иначе
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + ЗначениеПараметра);
		КонецЕсли;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = "";
		Иначе
			ЗначениеПараметра = Строка(ЗначениеПараметра);
		КонецЕсли;
		Результат = Результат + ЗначениеПараметра;
		Позиция = Позиция + 1;
		НачПозиция = Позиция;
	
	КонецЦикла;
	
	Если (НачПозиция <= СтрДлина(СтрокаПодстановки)) Тогда
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, СтрДлина(СтрокаПодстановки) - НачПозиция + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

 // Процедура установки типа и доступности субконто в зависимости от выбранного счета
//
Процедура ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей = Неопределено, ЭтоТаблица = Ложь) Экспорт
	
	ДанныеСчета = ЦС_ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Для Индекс = 1 По 3 Цикл
		Если Индекс <= ДанныеСчета.КоличествоСубконто Тогда
			Если ЭтоТаблица Тогда
				Если ПоляФормы.Свойство("Субконто" + Индекс) Тогда
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].ОграничениеТипа = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"];
				КонецЕсли;
				Если ПоляФормы.Свойство("ВидСубконто" + Индекс) Тогда
					ПоляФормы["ВидСубконто" + Индекс] = ДанныеСчета["ВидСубконто" + Индекс ];
				КонецЕсли;

			Иначе
				Если ЗаголовкиПолей.Свойство("Субконто" + Индекс) Тогда
					Форма[ЗаголовкиПолей["Субконто" + Индекс]] = ДанныеСчета["ВидСубконто" + Индекс + "Наименование"] + ":";
				КонецЕсли;
				Если ПоляФормы.Свойство("Субконто" + Индекс) Тогда
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].Доступность     = Истина;
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].ОграничениеТипа = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"];
				КонецЕсли;
			КонецЕсли;
		Иначе 
			// Ничего делать не надо, т.к. не доступные поля будут скрыты
			Если Не ЭтоТаблица Тогда
				Если ЗаголовкиПолей.Свойство("Субконто" + Индекс) Тогда
					Форма[ЗаголовкиПолей["Субконто" + Индекс]] = "";
				КонецЕсли;
				Если ПоляФормы.Свойство("Субконто" + Индекс) Тогда
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].Доступность     = Ложь;
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЭтоТаблица Тогда
		Если ЗаголовкиПолей.Свойство("Подразделение") Тогда
			Форма[ЗаголовкиПолей["Подразделение"]] = ?(ДанныеСчета.УчетПоПодразделениям, "Подразделение:", "");
		КонецЕсли;
		Если ПоляФормы.Свойство("Подразделение") Тогда
			Форма.Элементы[ПоляФормы["Подразделение"]].Доступность = ДанныеСчета.УчетПоПодразделениям;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура установки типа и доступности субконто в зависимости от выбранного счета
//
Процедура ПриИзмененииСчета(Счет, Объект, ПоляОбъекта, ЭтоТаблица = Ложь) Экспорт
	
	ДанныеСчета = ЦС_ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Для Индекс = 1 По 3 Цикл
		Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда
			Если Индекс <= ДанныеСчета.КоличествоСубконто Тогда
				Объект[ПоляОбъекта["Субконто" + Индекс]] = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"].ПривестиЗначение(Объект[ПоляОбъекта["Субконто" + Индекс]]);
			Иначе 
				Объект[ПоляОбъекта["Субконто" + Индекс]] = Неопределено;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	Если ЭтоТаблица Тогда
		УстановитьДоступностьСубконто(Счет, Объект, ПоляОбъекта);
	КонецЕсли;	
	
	Если ПоляОбъекта.Свойство("Подразделение") Тогда
		Если ДанныеСчета.УчетПоПодразделениям Тогда
			ПодразделениеПоУмолчанию = Неопределено;
			ПоляОбъекта.Свойство("ПодразделениеПоУмолчанию", ПодразделениеПоУмолчанию);
			
			//ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделениеПриИзмененииСчета(Объект[ПоляОбъекта.Подразделение],
			//ПоляОбъекта.Организация,
			//ПодразделениеПоУмолчанию);
			
			Если ЭтоТаблица Тогда
				Объект[ПоляОбъекта["Подразделение"] + "Доступность"] = Истина;
			КонецЕсли;															
		Иначе
			Объект[ПоляОбъекта.Подразделение] = Неопределено;
			Если ЭтоТаблица Тогда
				Объект[ПоляОбъекта["Подразделение"] + "Доступность"] = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура установки доступности субконто в зависимости от выбранного счета
//
Процедура УстановитьДоступностьСубконто(Счет, Объект, ПоляОбъекта) Экспорт
	
	ДанныеСчета = ЦС_ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Для Индекс = 1 По 3 Цикл
		Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда
			Объект[ПоляОбъекта["Субконто" + Индекс] + "Доступность"] = (Индекс <= ДанныеСчета.КоличествоСубконто);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
