// Процедура распределяет движения денежных средств по проектам.
// Параметры:
// 		ТабДвижений      - таблица значений, со структурой соответствующей структуре регистра Затраты
//		Строка           - строка ТабДвижений. в ней содержится все данные записи регистра кроме проекта.
//					       сумма в данной строке изменится при выходе из процедуры
//		ВидРаспределения - проект, элемент справочника "Виды распределения по проектам". 
//
Процедура РаспределитьДвиженияДСПоПроектам(ТабДвижений, Строка, ВидРаспределения, Знач ДатаКонМесяца) Экспорт
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	РаспределениеПоПроектамСрезПоследних.Проект,
		|	РаспределениеПоПроектамСрезПоследних.ДоляРаспределения
		|ИЗ
		|	РегистрСведений."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"РаспределениеПоПроектам.СрезПоследних(&КонМесяца, ВидРаспределения = &ВидРаспределения) КАК РаспределениеПоПроектамСрезПоследних
		|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "ВидРаспределения", ВидРаспределения);
	Запрос.УстановитьПараметр( "КонМесяца",        КонецМесяца( ДатаКонМесяца));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось выполнить распределение движений денежных средств по виду распределения """ + ВидРаспределения + """");
		Возврат;
	КонецЕсли;
	
	Сумма  		= Строка.Сумма;
	СуммаУпр 	= Строка.СуммаУпр;
	
	ТабЗапроса 		= РезультатЗапроса.Выгрузить();
	МассивКоэф 		= ТабЗапроса.ВыгрузитьКолонку("ДоляРаспределения");
	МассивСумма  	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.РаспределитьПропорционально(Сумма, МассивКоэф,,Ложь);
	МассивСуммаУпр	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.РаспределитьПропорционально(СуммаУпр, МассивКоэф,,Ложь);
	
	Если МассивСумма = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Неверные коэффициенты (сумма) для распределения движения денежных средств по виду распределения """ + ВидРаспределения + """");
		
		НоваяСтрока = ТабДвижений.Добавить();
		КопироватьСтрокуТаблицыЗначений(НоваяСтрока, Строка, ТабДвижений);
		
		Возврат;
	КонецЕсли;
	
	Для К = 0 По МассивСумма.ВГраница() Цикл
		НоваяСтрока = ТабДвижений.Добавить();
		КопироватьСтрокуТаблицыЗначений(НоваяСтрока, Строка, ТабДвижений);
		НоваяСтрока.Проект 			= ТабЗапроса[К].Проект;
		НоваяСтрока.Сумма  			= МассивСумма[К];
		НоваяСтрока.СуммаУпр  		= ?(МассивСуммаУпр = Неопределено, 0, МассивСуммаУпр[К]);
	КонецЦикла;
	
КонецПроцедуры // РаспределитьДвиженияДСПоПроектам

// Процедура заполняет таблицу движений регистра, отражая движения по проектам.
// Параметры: 
//		ИсходнаяТаблица - подготовленная на основе ТЧ документа таблица
//		ТаблицаДвижений - таблица движений регистра
//		Проект - проект из шапки документа
//		Дата - дата документа
//		ВидДвижения - (строка): продажи или закупки 
//
Процедура ОтразитьДвиженияПоПроектам(ИсходнаяТаблица,ТаблицаДвижений,Проект,Дата,ВидДвижения="Продажи",ДокументРасчетов=Неопределено) Экспорт
	
	ТаблицаПроекты = ИсходнаяТаблица.Скопировать();
	ТаблицаПроекты.Очистить();
	
	ВалютаУпрУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");

	Если ВидДвижения = "ДенежныеСредстваПоступление" Тогда
		
		// Распределение по проектам.
		Для Каждого Строка Из ИсходнаяТаблица Цикл
			
			Если ЗначениеЗаполнено(Строка.Проект) Тогда
				
				ОпределитьРасчетныйДокумент(Строка, ДокументРасчетов);
				
				Если ТипЗнч(Строка.Проект) = фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникВидыРаспределенияПоПроектам() Тогда
					
					РаспределитьДвиженияДСПоПроектам(ТаблицаПроекты, Строка, Строка.Проект, Дата);
					
				Иначе
					
					НоваяСтрока = ТаблицаПроекты.Добавить();
					КопироватьСтрокуТаблицыЗначений(НоваяСтрока, Строка, ТаблицаПроекты);
					
				КонецЕсли;
				
			Иначе
				
				ОпределитьРасчетныйДокумент(Строка, ДокументРасчетов);

				НоваяСтрока = ТаблицаПроекты.Добавить();
				КопироватьСтрокуТаблицыЗначений(НоваяСтрока, Строка, ТаблицаПроекты);
								
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаПроекты.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,Сделка,СтатьяДвиженияДенежныхСредств,Проект"+?(ТаблицаПроекты.Колонки.Найти("Подразделение")<>Неопределено,",Подразделение",""),"Сумма,СуммаУпр");
		фин_ОбщегоНазначенияСервер.ЗагрузитьВТаблицуЗначений(ТаблицаПроекты, ТаблицаДвижений);
			
	ИначеЕсли ВидДвижения = "ДенежныеСредстваСписание" Тогда
		
		 // Распределение по проектам.
		Для Каждого Строка Из ИсходнаяТаблица Цикл
			
			Если ЗначениеЗаполнено(Строка.Проект) Тогда
				
				ОпределитьРасчетныйДокумент(Строка, ДокументРасчетов);
				
				Если ТипЗнч(Строка.Проект) = фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникВидыРаспределенияПоПроектам() Тогда
				
					РаспределитьДвиженияДСПоПроектам(ТаблицаПроекты, Строка, Строка.Проект, Дата);
					
				Иначе
					
					НоваяСтрока = ТаблицаПроекты.Добавить();
					КопироватьСтрокуТаблицыЗначений(НоваяСтрока, Строка, ТаблицаПроекты);		
				
				КонецЕсли;
				
			Иначе
				
				ОпределитьРасчетныйДокумент(Строка, ДокументРасчетов);
				
				НоваяСтрока = ТаблицаПроекты.Добавить();
				КопироватьСтрокуТаблицыЗначений(НоваяСтрока, Строка, ТаблицаПроекты);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаПроекты.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,Сделка,СтатьяДвиженияДенежныхСредств,Проект"+?(ТаблицаПроекты.Колонки.Найти("Подразделение")<>Неопределено,",Подразделение",""),"Сумма,СуммаУпр");
		фин_ОбщегоНазначенияСервер.ЗагрузитьВТаблицуЗначений(ТаблицаПроекты, ТаблицаДвижений);

	Иначе
		
		фин_ОбщегоНазначенияСервер.ЗагрузитьВТаблицуЗначений(ИсходнаяТаблица, ТаблицаДвижений);
		Если ЗначениеЗаполнено(Проект) Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Проект, "Проект");
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // ОтразитьДвиженияПоПроектам()

//Процедура ОпределитьРасчетныйДокумент
//
Процедура ОпределитьРасчетныйДокумент(СтрокаПлатеж,ДокументРасчетов) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) И СтрокаПлатеж.ВестиПоДокументамРасчетовСКонтрагентом И СтрокаПлатеж.Сделка=Неопределено Тогда
	
		СтрокаПлатеж.Сделка=ДокументРасчетов;
	
	КонецЕсли; 
	
КонецПроцедуры // ОпределитьРасчетныйДокумент() 

// Возвращает вид распределения по проектам для статьи движения денежных средств
//
Функция ПолучитьВидРаспределенияДляСтатьиДДС(Статья,Дата) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВидыРаспределенияСтатейДДС.ВидРаспределенияПоПроектам КАК ВидРаспределения
	|ИЗ
	|	РегистрСведений."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"УстановкаВидовРаспределенияДляСтатейДДС.СрезПоследних(&Дата, СтатьяДвиженияДенежныхСредств = &Статья) КАК ВидыРаспределенияСтатейДДС";
	
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("Статья",Статья);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.ВидРаспределения;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьВидРаспределенияДляСтатьиДДС()

// Процедура копирует значения одной строки таблицы значений в другую
// структура колонок должна совпадать
//
// Параметры:
//		СтрокаПриемник - строка в которую копируем
//		СтрокаИсточник - строка из которой копируем
//      ИменаКол - имена колонок, разделенные запятыми, которые надо скопировать
//                 необязателен. По умолчанию - все колонки
//
Процедура КопироватьСтрокуТаблицыЗначений(СтрокаПриемник, СтрокаИсточник, ИменаКол) Экспорт

	Если ТипЗнч( ИменаКол) = Тип("ТаблицаЗначений") Тогда
		СписокСвойств = "";
		Для Каждого Кол Из ИменаКол.Колонки Цикл
			Если Не Кол.Имя = "НомерСтроки" Тогда
				Если Не ПустаяСтрока(СписокСвойств) Тогда
					СписокСвойств = СписокСвойств + ",";	
				КонецЕсли;
				СписокСвойств = СписокСвойств + Кол.Имя;
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник, СписокСвойств,);
	Иначе // Строка с именами колонок
        ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник, ИменаКол,);
	КонецЕсли;

КонецПроцедуры // КопироватьСтрокуТаблицыЗначений()

Процедура НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Истина;	
КонецПроцедуры