//////////////////////////////////////////////////////////////////////////////////
//// Подсистема "Пользователи".
////
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

//// Заполняет параметр сеанса ТекущийПользователь или ТекущийВнешнийПользователь
//// значением пользователя, найденному по пользователю информационной базы
//// под которым запущен сеанс.
////  Если пользователь не найден, то при наличии административных прав
//// создается новый пользователь в справочнике, иначе вызывается исключение.
//// 
//Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
//	
//	Если ИмяПараметра <> "ТекущийПользователь"
//	   И ИмяПараметра <> "ТекущийВнешнийПользователь" Тогда
//		
//		Возврат;
//	КонецЕсли;
//	
//	УстановитьПривилегированныйРежим(Истина);
//	ПроверитьВозможностьЗапускаСПустымСпискомПользователейИБ();
//	
//	Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
//		ВызватьИсключение
//			НСтр("ru = 'Недопустимое получение параметра сеанса ТекущийПользователь
//					   |в сеансе без указания всех разделителей.'");
//	КонецЕсли;
//	
//	НачатьТранзакцию();
//	Попытка
//		ПользовательНеНайден = Ложь;
//		СоздатьПользователя  = Ложь;
//		СсылкаНового         = Неопределено;
//		Служебный            = Ложь;
//		
//		ТекущийПользователь        = Неопределено;
//		ТекущийВнешнийПользователь = Неопределено;
//		
//		Если ПустаяСтрока(ПользователиИнформационнойБазы.ТекущийПользователь().Имя) Тогда
//			
//			ТекущийВнешнийПользователь = Справочники.ВнешниеПользователи.ПустаяСсылка();
//			
//			СвойстваНеуказанногоПользователя = СвойстваНеуказанногоПользователя();
//			
//			ИмяПользователя       = СвойстваНеуказанногоПользователя.ПолноеИмя;
//			ПолноеИмяПользователя = СвойстваНеуказанногоПользователя.ПолноеИмя;
//			СсылкаНового          = СвойстваНеуказанногоПользователя.СтандартнаяСсылка;
//			
//			Если СвойстваНеуказанногоПользователя.Ссылка = Неопределено Тогда
//				ПользовательНеНайден = Истина;
//				СоздатьПользователя  = Истина;
//				Служебный = Истина;
//				ИдентификаторПользователяИБ = "";
//			Иначе
//				ТекущийПользователь = СвойстваНеуказанногоПользователя.Ссылка;
//			КонецЕсли;
//		Иначе
//			ИдентификаторПользователяИБ =
//				ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
//			
//			Пользователи.НайтиНеоднозначныхПользователейИБ(, ИдентификаторПользователяИБ);
//			
//			Запрос = Новый Запрос;
//			Запрос.Параметры.Вставить("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);
//			
//			Запрос.Текст =
//			"ВЫБРАТЬ ПЕРВЫЕ 1
//			|	Пользователи.Ссылка КАК Ссылка
//			|ИЗ
//			|	Справочник.Пользователи КАК Пользователи
//			|ГДЕ
//			|	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
//			РезультатПользователи = Запрос.Выполнить();
//			
//			Запрос.Текст =
//			"ВЫБРАТЬ ПЕРВЫЕ 1
//			|	ВнешниеПользователи.Ссылка КАК Ссылка
//			|ИЗ
//			|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
//			|ГДЕ
//			|	ВнешниеПользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
//			РезультатВнешниеПользователи = Запрос.Выполнить();
//			
//			Если НЕ РезультатВнешниеПользователи.Пустой() Тогда
//				
//				Выборка = РезультатВнешниеПользователи.Выбрать();
//				Выборка.Следующий();
//				ТекущийПользователь        = Справочники.Пользователи.ПустаяСсылка();
//				ТекущийВнешнийПользователь = Выборка.Ссылка;
//				
//				Если НЕ ВнешниеПользователи.ИспользоватьВнешнихПользователей() Тогда
//				
//					ТекстСообщенияОбОшибке = НСтр("ru = 'Внешние пользователи отключены.'");
//					ВызватьИсключение ТекстСообщенияОбОшибке;
//				КонецЕсли;
//			Иначе
//				ТекущийВнешнийПользователь = Справочники.ВнешниеПользователи.ПустаяСсылка();
//				
//				Если РезультатПользователи.Пустой() Тогда
//					Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
//						
//						ТекущийПользовательИБ       = ПользователиИнформационнойБазы.ТекущийПользователь();
//						ИмяПользователя             = ТекущийПользовательИБ.Имя;
//						ПолноеИмяПользователя       = ТекущийПользовательИБ.ПолноеИмя;
//						ИдентификаторПользователяИБ = ТекущийПользовательИБ.УникальныйИдентификатор;
//						ПользовательПоНаименованию  = СсылкаПользователяПоПолномуНаименованию(ПолноеИмяПользователя);
//						
//						Если ПользовательПоНаименованию = Неопределено Тогда
//							ПользовательНеНайден = Истина;
//							СоздатьПользователя  = Истина;
//						Иначе
//							ТекущийПользователь = ПользовательПоНаименованию;
//						КонецЕсли;
//					Иначе
//						ПользовательНеНайден = Истина;
//					КонецЕсли;
//				Иначе
//					Выборка = РезультатПользователи.Выбрать();
//					Выборка.Следующий();
//					ТекущийПользователь = Выборка.Ссылка;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
//		
//		Если СоздатьПользователя Тогда
//			
//			СтандартныеПодсистемыПереопределяемый.ЗарегистрироватьНеразделенногоПользователя();
//			
//			Если СсылкаНового = Неопределено Тогда
//				СсылкаНового = Справочники.Пользователи.ПолучитьСсылку();
//			КонецЕсли;
//			
//			ТекущийПользователь = СсылкаНового;
//			
//			НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
//			НовыйПользователь.Служебный = Служебный;
//			НовыйПользователь.Наименование = ПолноеИмяПользователя;
//			НовыйПользователь.УстановитьСсылкуНового(СсылкаНового);
//			
//			Если ЗначениеЗаполнено(ИдентификаторПользователяИБ) Тогда
//				
//				ОписаниеПользователяИБ = Новый Структура;
//				ОписаниеПользователяИБ.Вставить("Действие", "Записать");
//				ОписаниеПользователяИБ.Вставить(
//					"УникальныйИдентификатор", ИдентификаторПользователяИБ);
//				
//				НовыйПользователь.ДополнительныеСвойства.Вставить(
//					"ОписаниеПользователяИБ", ОписаниеПользователяИБ);
//			КонецЕсли;
//			
//			Попытка
//				НовыйПользователь.Записать();
//			Исключение
//				ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//					НСтр("ru = 'Авторизация не выполнена. Работа системы будет завершена.
//							   |Пользователь: %1 не найден в справочнике ""Пользователи"".
//							   |
//							   |При попытке добавления пользователя в справочник возникла ошибка:
//							   |""%2"".
//							   |
//							   |Обратитесь к администратору.'"),
//					ИмяПользователя,
//					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) );
//				ВызватьИсключение ТекстСообщенияОбОшибке;
//			КонецПопытки;
//			
//		ИначеЕсли ПользовательНеНайден Тогда
//			ВызватьИсключение ТекстСообщенияПользовательНеНайденВСправочнике(ИмяПользователя);
//		КонецЕсли;
//		
//		ЗафиксироватьТранзакцию();
//	Исключение
//		ОтменитьТранзакцию();
//		ВызватьИсключение;
//	КонецПопытки;
//	
//	Если ТекущийПользователь = Неопределено
//	 ИЛИ ТекущийВнешнийПользователь = Неопределено Тогда
//		
//		ТекстСообщенияОбОшибке = ТекстСообщенияПользовательНеНайденВСправочнике(ИмяПользователя) +
//			НСтр("ru = '
//					   |Возникла внутренняя ошибка при поиске пользователя.'");
//		ВызватьИсключение ТекстСообщенияОбОшибке;
//	КонецЕсли;
//	
//	ПараметрыСеанса.ТекущийПользователь        = ТекущийПользователь;
//	ПараметрыСеанса.ТекущийВнешнийПользователь = ТекущийВнешнийПользователь;
//	
//	УстановленныеПараметры.Добавить("ТекущийПользователь");
//	УстановленныеПараметры.Добавить("ТекущийВнешнийПользователь");
//	
//КонецПроцедуры

//// Вызывается при начале работы системы, чтобы проверить возможность выполнения авторизации и
//// вызвать заполнение значений параметров сеанса ТекущийПользователь и ТекущийВнешнийПользователь.
//// Также вызывается при входе в область данных.
////
//// Возвращаемое значение:
////  Строка - пустая строка   - авторизация выполнена успешно.
////           непустая строка - описание ошибки.
////                             При начале работы системы следует
////                             завершить работу 1С:Предприятия.
////
//Функция АвторизоватьТекущегоПользователя(ПриНачалеРаботыСистемы = Ложь) Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Если НЕ ПриНачалеРаботыСистемы Тогда
//		ОбновитьПовторноИспользуемыеЗначения();
//	Иначе
//		// Программное заполнение списка пользователей.
//		Перезапустить = Ложь;
//		ДополнительныеПараметрыКомаднойСтроки = "";
//		
//		СтандартныеПодсистемыПереопределяемый.ПередАвторизациейТекущегоПользователяПриНачалеРаботыСистемы(
//			Перезапустить, ДополнительныеПараметрыКомаднойСтроки);
//		
//		Если Перезапустить Тогда
//			Возврат Новый Структура(
//				"ДополнительныеПараметрыКомаднойСтроки",
//				ДополнительныеПараметрыКомаднойСтроки);
//		КонецЕсли;
//		
//		// Проверка возможности продолжения.
//		ТекстОшибки = ПроверитьВозможностьЗапускаСПустымСпискомПользователейИБ(Истина);
//		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
//			Возврат ТекстОшибки;
//		КонецЕсли;
//	КонецЕсли;
//	
//	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
//	ПроверитьПраваПользователя(ТекущийПользователь);
//	
//	СтандартныеПодсистемыПереопределяемый.ЗарегистрироватьНеразделенногоПользователя();
//	
//	Если ПустаяСтрока(ТекущийПользователь.Имя)
//	 ИЛИ ПользовательПоИдентификаторуСуществует(ТекущийПользователь.УникальныйИдентификатор) Тогда
//		// Авторизуется пользователь по умолчанию
//		// или пользовательИБ найден в справочнике.
//		Возврат "";
//	КонецЕсли;
//	
//	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
//		И ТекущийПользователь.РазделениеДанных.Количество() = 0 Тогда
//		
//		НачатьТранзакцию();
//		
//		// Это неразделенный пользователь, требуется создать элемент в текущей области.
//		ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();
//		ПользовательОбъект.Наименование = ТекущийПользователь.Имя;
//		
//		ОписаниеПользователяИБ = Новый Структура;
//		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
//		ОписаниеПользователяИБ.Вставить(
//			"УникальныйИдентификатор", ТекущийПользователь.УникальныйИдентификатор);
//		
//		ПользовательОбъект.ДополнительныеСвойства.Вставить(
//			"ОписаниеПользователяИБ", ОписаниеПользователяИБ);
//		
//		ПользовательОбъект.Служебный = Истина;
//		ПользовательОбъект.Записать();
//		
//		ЗафиксироватьТранзакцию();
//		УстановитьПривилегированныйРежим(Ложь);
//		
//		Возврат "";
//	КонецЕсли;
//	
//	// Требуется либо создать администратора, либо сообщить об отказе авторизации.
//	ТекстСообщенияОбОшибке = "";
//	ТребуетсяСоздатьАдминистратора = Ложь;
//	
//	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
//	
//	Если ПользователиИБ.Количество() = 1 Или Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
//		// Авторизуется администратор, созданный в конфигураторе.
//		ТребуетсяСоздатьАдминистратора = Истина;
//	Иначе
//		// Авторизуется обычный пользователь, созданный в конфигураторе.
//		ТекстСообщенияОбОшибке = ТекстСообщенияПользовательНеНайденВСправочнике(ТекущийПользователь.Имя);
//	КонецЕсли;
//	
//	Если ТребуетсяСоздатьАдминистратора Тогда
//		
//		Если РольДоступна(Метаданные.Роли.ПолныеПрава)
//			И (РольДоступна(Пользователи.РольАдминистратораСистемы())
//			   ИЛИ ОбщегоНазначенияПовтИсп.РазделениеВключено() ) Тогда
//			
//			Пользователь = Пользователи.СоздатьАдминистратора(ТекущийПользователь);
//			
//			Комментарий =
//				НСтр("ru = 'Выполняется запуск от имени пользователя с ролью ""Полные права"",
//						   |который не зарегистрирован в списке пользователей.
//						   |Выполнена автоматическая регистрация в списке пользователей.
//						   |
//						   |Для ведения списка и настройки прав пользователей предназначен список Пользователи,
//						   |режим конфигурирования 1С:Предприятия для этого использовать не следует.'");
//			
//			СтандартныеПодсистемыПереопределяемый.ПослеЗаписиАдминистратораПриАвторизации(Комментарий);
//			
//			ЗаписьЖурналаРегистрации(
//				НСтр("ru = 'Пользователи.Администратор зарегистрирован в справочнике Пользователи'"),
//				УровеньЖурналаРегистрации.Предупреждение,
//				Метаданные.Справочники.Пользователи,
//				Пользователь,
//				Комментарий);
//		Иначе
//			ТекстСообщенияОбОшибке =
//				НСтр("ru = 'Запуск от имени пользователя с правом Администрирование невозможен,
//						   |так как он не зарегистрирован в списке пользователей.
//						   |
//						   |Для ведения списка и настройки прав пользователей предназначен список Пользователи,
//						   |режим конфигурирования 1С:Предприятия для этого использовать не следует.'");
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат ТекстСообщенияОбОшибке;
//	
//КонецФункции

//// Добавляет в список Обработчики процедуры-обработчики обновления,
//// необходимые данной подсистеме.
////
//// Параметры:
////   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
////                                   общего модуля ОбновлениеИнформационнойБазы.
//// 
//Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
//	
//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.0.5.2";
//	Обработчик.Процедура = "ПользователиСлужебный.ЗаполнитьИдентификаторыПользователей";
//	
//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.0.5.15";
//	Обработчик.Процедура = "ПользователиСлужебный.ЗаполнениеРегистраСоставыГруппПользователей";
//	
//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.0.6.5";
//	Обработчик.Процедура = "ПользователиСлужебный.ЗаполнитьСоставыГруппВнешнихПользователей";
//	
//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.0.6.5";
//	Обработчик.Процедура = "ПользователиСлужебный.ДляВнешнихПользователейСоздатьПользователейИБ";
//	
//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "2.1.1.10";
//	Обработчик.Процедура = "ПользователиСлужебный.ЗаполнитьФлажокСлужебный";
//	
//КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// Для работы интерфейса ролей в управляемой форме

//Процедура ОбработатьИнтерфейсРолей(Действие, Параметры) Экспорт
//	
//	Если Действие = "УстановитьТолькоПросмотрРолей" Тогда
//		УстановитьТолькоПросмотрРолей(Параметры);
//		
//	ИначеЕсли Действие = "НастроитьИнтерфейсРолейПриЗагрузкеНастроек" Тогда
//		НастроитьИнтерфейсРолейПриЗагрузкеНастроек(Параметры);
//		
//	ИначеЕсли Действие = "НастроитьИнтерфейсРолейПриСозданииФормы" Тогда
//		НастроитьИнтерфейсРолейПриСозданииФормы(Параметры);
//		
//	ИначеЕсли Действие = "ТолькоВыбранныеРоли" Тогда
//		ТолькоВыбранныеРоли(Параметры);
//		
//	ИначеЕсли Действие = "ГруппировкаПоПодсистемам" Тогда
//		ГруппировкаПоПодсистемам(Параметры);
//		
//	ИначеЕсли Действие = "ОбновитьДеревоРолей" Тогда
//		ОбновитьДеревоРолей(Параметры);
//		
//	ИначеЕсли Действие = "ОбновитьСоставРолей" Тогда
//		ОбновитьСоставРолей(Параметры);
//		
//	ИначеЕсли Действие = "ЗаполнитьРоли" Тогда
//		ЗаполнитьРоли(Параметры);
//	Иначе
//		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//			НСтр("ru = 'Ошибка в процедуре ПользователиСлужебный.ОбработатьИнтерфейсРолей()
//					   |Неверное значение параметра Действие: ""%1"".'"),
//			Действие);
//	КонецЕсли;
//	
//КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// Процедуры используемые при обмене данными

//// Переопределяет стандартное поведение при выгрузке данных.
//// Реквизит ИдентификаторПользователяИБ не переносится.
////
//Процедура ПриОтправкеПользователя(ЭлементДанных, ОтправкаЭлемента) Экспорт
//	
//	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить
//		ИЛИ ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
//		
//		// Стандартную обработку не переопределяем
//		
//	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.Пользователи")
//		ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВнешниеПользователи") Тогда
//		
//		Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
//			И Пользователи.ЭтоНеразделенныйПользователь(ЭлементДанных.ИдентификаторПользователяИБ) Тогда
//			
//			ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
//			Возврат;
//			
//		КонецЕсли;
//		
//		ЭлементДанных.ИдентификаторПользователяИБ = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//// Переопределяет стандартное поведение при загрузке данных.
//// Реквизит ИдентификаторПользователяИБ не переносится, т.к. всегда
//// связан с пользователем текущей базы или не связан с пользователем.
////
//Процедура ПриПолученииПользователя(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад = Неопределено) Экспорт
//	
//	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
//		
//		// Стандартную обработку не переопределяем
//		
//	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.Пользователи")
//		ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВнешниеПользователи") Тогда
//		
//		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
//			
//			// Получение пользователей из автономного рабочего места игнорируем.
//			// Дополнительно отправляем данные в автономное рабочее место для полной синхронизации с сервисом.
//			ОтправкаНазад = Истина;
//			ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
//			
//		Иначе
//			
//			ЭлементДанных.ИдентификаторПользователяИБ = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭлементДанных.Ссылка, "ИдентификаторПользователяИБ");
//			
//		КонецЕсли;
//		
//	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ГруппыПользователей")
//		ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ГруппыВнешнихПользователей")
//		ИЛИ ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.СоставыГруппПользователей")
//		ИЛИ ТипЗнч(ЭлементДанных) = Тип("КонстантаМенеджерЗначения.ИспользоватьВнешнихПользователей")
//		ИЛИ ТипЗнч(ЭлементДанных) = Тип("КонстантаМенеджерЗначения.ИспользоватьГруппыПользователей") Тогда
//		
//		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
//			
//			// Получение элемента из автономного рабочего места игнорируем.
//			// Дополнительно отправляем данные в автономное рабочее место для полной синхронизации с сервисом.
//			ОтправкаНазад = Истина;
//			ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//////////////////////////////////////////////////////////////////////////////////
//// Обработчики подписок на события

//// Вызывает обновление представления внешнего пользователя при изменении
//// представления его объекта авторизации.
////
////  В состав подписки следует включить типы объектов авторизации:
//// Метаданные.Справочники.ВнешниеПользователи.Реквизиты.ОбъектАвторизации.Тип.
//// Например: Справочник.ФизическиеЛица, Справочник.Контрагенты
////
//Процедура ОбновитьПредставлениеВнешнегоПользователяПриЗаписи(Знач Объект, Отказ) Экспорт
//	
//	Если Объект.ОбменДанными.Загрузка Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ОбновитьПредставлениеВнешнегоПользователя(Объект.Ссылка);
//	
//КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с пользователями

Функция ПроверитьВозможностьЗапускаСПустымСпискомПользователейИБ(ВернутьТекстОшибки = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстОшибки = "";
	
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если НЕ ЗначениеЗаполнено(ТекущийПользовательИБ.Имя)
	   И НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено()
	   И ТипЗнч(Метаданные.ОсновнаяРоль) = Тип("ОбъектМетаданных")
	   И Метаданные.Роли.Содержит(Метаданные.ОсновнаяРоль)
	   И НЕ ПравоДоступа("Администрирование", Метаданные, Метаданные.ОсновнаяРоль)
	   И НЕ ЭтоСеансФоновогоЗадания()
	   И ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
		
		ТекстОшибки =
			НСтр("ru = 'Запуск с пустым списком пользователей информационной базы невозможен.
					   |Необходимо добавить администратора системы с двумя ролями
					   |""Администратор системы"", ""Полные права"" и повторить запуск программы от его имени.
					   |
					   |Для перехода к списку пользователей информационной базы необходимо открыть
					   |Конфигуратор и воспользоваться пунктом меню ""Администрирование - Пользователи"".'");
		
		Если НЕ ВернутьТекстОшибки Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

//// Возвращает сохраняемое значение пароля для указанного пароля.
////
//// Параметры:
////  Пароль                      - Строка - пароль для которого нужно получить сохраняемое значение.
////
////  ИдентификаторПользователяИБ - УникальныйИдентификатор - пользователя ИБ для которого нужно
////                                сравнить сохраняемое значение с полученным и результат поместить
////                                в следующий параметр Совпадает.
////
////  Совпадает                   - Булево (возвращаемое значение) - см. комментарий к параметру
////                                ИдентификаторПользователяИБ.
//// Возвращаемое значение:
////  Строка - сохраняемое значение пароля.
////
//Функция СохраняемоеЗначениеСтрокиПароля(Знач Пароль,
//										Знач ИдентификаторПользователяИБ = Неопределено,
//										Совпадает = Ложь) Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	НачатьТранзакцию();
//	Попытка
//		ВременныйПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
//		ВременныйПользовательИБ.АутентификацияСтандартная = Истина;
//		ВременныйПользовательИБ.Пароль = Пароль;
//		
//		ВременныйПользовательИБ.Имя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//			НСтр("ru = 'Временный пользователь (%1)'"),
//			Новый УникальныйИдентификатор);
//		
//		ВременныйПользовательИБ.Записать();
//		
//		ВременныйПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
//			ВременныйПользовательИБ.УникальныйИдентификатор);
//		
//		СохраняемоеЗначениеПароля = ВременныйПользовательИБ.СохраняемоеЗначениеПароля;
//		ОтменитьТранзакцию();
//	Исключение
//		ОтменитьТранзакцию();
//		ВызватьИсключение;
//	КонецПопытки;
//	
//	Если ТипЗнч(ИдентификаторПользователяИБ) = Тип("УникальныйИдентификатор") Тогда
//		
//		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
//			ИдентификаторПользователяИБ);
//		
//		Если ТипЗнч(ПользовательИБ) = Тип("ПользовательИнформационнойБазы") Тогда
//			Совпадает = (СохраняемоеЗначениеПароля = ПользовательИБ.СохраняемоеЗначениеПароля);
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат СохраняемоеЗначениеПароля;
//	
//КонецФункции

//Процедура НачатьОбработкуПользователяИБ(ПользовательОбъект,
//										ПараметрыОбработки,
//										УдалениеПользователяИзСправочника = Ложь) Экспорт
//	
//	// Внешние пользователи не поддерживаются в модели сервиса.
//	Если ТипЗнч(ПользовательОбъект) = Тип("СправочникОбъект.ВнешниеПользователи")
//	   И ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
//		
//		ВызватьИсключение
//			НСтр("ru = 'Внешние пользователи не поддерживаются в модели сервиса.'");
//	КонецЕсли;
//	
//	ДополнительныеСвойства = ПользовательОбъект.ДополнительныеСвойства;
//	
//	ПараметрыОбработки = Новый Структура;
//	ПараметрыОбработки.Вставить("ЗаписьАдминистратора", Ложь);
//	ПараметрыОбработки.Вставить("УдалениеПользователяИзСправочника", УдалениеПользователяИзСправочника);
//	
//	Если ДополнительныеСвойства.Свойство("ЗначениеКопирования")
//	   И ЗначениеЗаполнено(ДополнительныеСвойства.ЗначениеКопирования)
//	   И ТипЗнч(ДополнительныеСвойства.ЗначениеКопирования) = ТипЗнч(ПользовательОбъект.Ссылка) Тогда
//		
//		ПараметрыОбработки.Вставить("ЗначениеКопирования", ДополнительныеСвойства.ЗначениеКопирования);
//	КонецЕсли;
//	
//	Если ДополнительныеСвойства.Свойство("ОбработкаСообщенияКаналаУдаленногоАдминистрирования") Тогда
//		
//		// Проверка прав.
//		Если НЕ ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей() Тогда
//			ВызватьИсключение НСтр("ru = 'Обновление пользователя по сообщению
//										 |канала удаленного администрирования
//										 |доступно только неразделенным пользователям.'");
//		КонецЕсли;
//		
//		ПараметрыОбработки.Вставить("ОбработкаСообщенияКаналаУдаленногоАдминистрирования");
//	Иначе
//		СтандартныеПодсистемыПереопределяемый.ПередЗаписьюПользователя(ПользовательОбъект);
//	КонецЕсли;
//	
//	СтарыеСвойства = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
//		ПользовательОбъект.Ссылка,
//		"ИдентификаторПользователяИБ,
//		|ИдентификаторПользователяСервиса");
//	
//	Если НЕ ЗначениеЗаполнено(СтарыеСвойства.ИдентификаторПользователяИБ) Тогда
//		СтарыеСвойства.ИдентификаторПользователяИБ =
//			Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
//	КонецЕсли;
//	
//	Если НЕ ЗначениеЗаполнено(СтарыеСвойства.ИдентификаторПользователяСервиса) Тогда
//		СтарыеСвойства.ИдентификаторПользователяСервиса =
//			Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
//	КонецЕсли;
//	
//	// Идентификаторы для дальнейшего использования при обработке пользователя.
//	ПараметрыОбработки.Вставить("СтарыйИдентификаторПользователяИБ",
//		СтарыеСвойства.ИдентификаторПользователяИБ);
//	ПараметрыОбработки.Вставить("СтарыйИдентификаторПользователяСервиса",
//		СтарыеСвойства.ИдентификаторПользователяСервиса);
//	
//	// Новые значения полей для контроля при записи элемента справочника Пользователи.
//	ПараметрыОбработки.Вставить("НовыйИдентификаторПользователяИБ",
//		СтарыеСвойства.ИдентификаторПользователяИБ);
//		
//	Если ПараметрыОбработки.Свойство("ОбработкаСообщенияКаналаУдаленногоАдминистрирования") Тогда
//		
//		ПараметрыОбработки.Вставить("НовыйИдентификаторПользователяСервиса",
//			ПользовательОбъект.ИдентификаторПользователяСервиса);
//	Иначе
//		ПараметрыОбработки.Вставить("НовыйИдентификаторПользователяСервиса",
//			СтарыеСвойства.ИдентификаторПользователяСервиса);
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ПараметрыОбработки.НовыйИдентификаторПользователяСервиса)
//	   И ПараметрыОбработки.НовыйИдентификаторПользователяСервиса <>
//		 ПараметрыОбработки.СтарыйИдентификаторПользователяСервиса Тогда
//		
//		Если ЗначениеЗаполнено(ПараметрыОбработки.СтарыйИдентификаторПользователяСервиса) Тогда
//			
//			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//				НСтр("ru = 'Ошибка при записи пользователя ""%1"".
//						   |Нельзя изменять уже установленный идентификатор
//						   |пользователя сервиса в элементе справочника.'"),
//				ПользовательОбъект.Наименование);
//			
//		КонецЕсли;
//		
//		НайденныйПользователь = Неопределено;
//		
//		Если ПользовательПоИдентификаторуСуществует(
//				ПараметрыОбработки.НовыйИдентификаторПользователяСервиса,
//				ПользовательОбъект.Ссылка,
//				НайденныйПользователь,
//				Истина) Тогда
//			
//			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//				НСтр("ru = 'Ошибка при записи пользователя ""%1"".
//						   |Нельзя устанавливать идентификатор
//						   |пользователя сервиса ""%2""
//						   |в этот элемент справочника, т.к. он
//						   |уже используется в элементе ""%3"".'"),
//				ПользовательОбъект.Наименование,
//				ПараметрыОбработки.НовыйИдентификаторПользователяСервиса,
//				НайденныйПользователь);
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если НЕ ДополнительныеСвойства.Свойство("ОписаниеПользователяИБ") Тогда
//		Возврат;
//	КонецЕсли;
//	ОписаниеПользователяИБ = ДополнительныеСвойства.ОписаниеПользователяИБ;
//	
//	Если НЕ ОписаниеПользователяИБ.Свойство("Действие") Тогда
//		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
//					   |В параметре ОписаниеПользователяИБ не указано свойство Действие.'"),
//			ПользовательОбъект.Ссылка);
//	КонецЕсли;
//	
//	Если ОписаниеПользователяИБ.Действие <> "Записать"
//	   И ОписаниеПользователяИБ.Действие <> "Удалить" Тогда
//		
//		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
//					   |В параметре ОписаниеПользователяИБ указано
//					   |неверное значение ""%2"" свойства Действие.'"),
//			ПользовательОбъект.Ссылка,
//			ОписаниеПользователяИБ.Действие);
//	КонецЕсли;
//	ПараметрыОбработки.Вставить("Действие", ОписаниеПользователяИБ.Действие);
//	
//	Если ЗначениеЗаполнено(ПараметрыОбработки.СтарыйИдентификаторПользователяИБ)
//	   И ОбщегоНазначенияПовтИсп.РазделениеВключено()
//	   И Пользователи.ЭтоНеразделенныйПользователь(
//			 ПараметрыОбработки.СтарыйИдентификаторПользователяИБ) Тогда
//		
//		ВызватьИсключение ТекстИсключенияЗаписьНеразделенныхПользователейЗапрещена();
//		
//	ИначеЕсли ОписаниеПользователяИБ.Свойство("УникальныйИдентификатор")
//			И ЗначениеЗаполнено(ОписаниеПользователяИБ.УникальныйИдентификатор)
//			И ОбщегоНазначенияПовтИсп.РазделениеВключено()
//			И Пользователи.ЭтоНеразделенныйПользователь(
//				  ОписаниеПользователяИБ.УникальныйИдентификатор) Тогда
//		
//		ПараметрыОбработки.Вставить("ЭтоНеразделенныйПользовательИБ");
//		
//		Если ОписаниеПользователяИБ.Количество() > 2
//		 ИЛИ ОписаниеПользователяИБ.Действие = "Удалить" Тогда
//			
//			ВызватьИсключение ТекстИсключенияЗаписьНеразделенныхПользователейЗапрещена();
//		КонецЕсли;
//	КонецЕсли;
//	
//	УровеньДоступа = ПолучитьУровеньДоступаНаИзменениеСвойствПользователяИБ();
//	ТекстСообщения = НСтр("ru = 'Недостаточно прав для изменения пользователя информационной базы.'");
//	
//	Если УровеньДоступа = "НетДоступа" Тогда
//		ВызватьИсключение ТекстСообщения;
//	КонецЕсли;
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	ОписаниеСтарогоПользователяИБ = Неопределено;
//	Если Пользователи.ПрочитатьПользователяИБ(
//			 ПараметрыОбработки.СтарыйИдентификаторПользователяИБ,
//			 ОписаниеСтарогоПользователяИБ) Тогда
//		
//		ПараметрыОбработки.Вставить("СтарыйПользовательИБСуществует", Истина);
//	Иначе
//		ПараметрыОбработки.Вставить("СтарыйПользовательИБСуществует", Ложь);
//	КонецЕсли;
//	ПараметрыОбработки.Вставить(
//		"ОписаниеСтарогоПользователяИБ", ОписаниеСтарогоПользователяИБ);
//		
//	Если УровеньДоступа <> "ПолныйДоступ"
//	   И УровеньДоступа <> "УправлениеСписком"
//	   И ( НЕ ПараметрыОбработки.СтарыйПользовательИБСуществует
//			И ОписаниеПользователяИБ.Действие = "Записать"
//		  ИЛИ ПараметрыОбработки.СтарыйПользовательИБСуществует
//			 И ОписаниеПользователяИБ.Действие = "Удалить" ) Тогда
//		
//		ВызватьИсключение ТекстСообщения;
//	КонецЕсли;
//	
//	Если ОписаниеПользователяИБ.Действие = "Записать"
//	   И ОписаниеПользователяИБ.Свойство("УникальныйИдентификатор")
//	   И ЗначениеЗаполнено(ОписаниеПользователяИБ.УникальныйИдентификатор) Тогда
//		
//		Если ПараметрыОбработки.СтарыйПользовательИБСуществует Тогда
//			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//				НСтр("ru = 'Ошибка при записи пользователя ""%1"".
//						   |Нельзя связать пользователя ИБ с пользователем
//						   |справочника для которого уже задан пользователь ИБ.'"),
//				ПользовательОбъект.Наименование);
//			
//		ИначеЕсли ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
//					  ОписаниеПользователяИБ.УникальныйИдентификатор) = Неопределено Тогда
//			
//			Если НЕ ПараметрыОбработки.Свойство("ЭтоНеразделенныйПользовательИБ") Тогда
//				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//					НСтр("ru = 'Ошибка при записи пользователя ""%1"".
//							   |Нельзя связать несуществующего пользователя ИБ
//							   |с пользователем справочника.'"),
//					ПользовательОбъект.Наименование);
//			КонецЕсли;
//		КонецЕсли;
//		
//		НайденныйПользователь = Неопределено;
//		
//		Если ПользовательПоИдентификаторуСуществует(
//			ОписаниеПользователяИБ.УникальныйИдентификатор,
//			ПользовательОбъект.Ссылка,
//			НайденныйПользователь) Тогда
//			
//			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//				НСтр("ru = 'Ошибка при записи пользователя ""%1"".
//						   |Нельзя связать с этим пользователем справочника
//						   |пользователя ИБ уже связанного с другим пользователем
//						   |справочника ""%2"".'"),
//				НайденныйПользователь,
//				ПользовательОбъект.Наименование);
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если ПараметрыОбработки.Свойство("ЭтоНеразделенныйПользовательИБ") Тогда
//		
//		ПользовательОбъект.ИдентификаторПользователяИБ =
//			ОписаниеПользователяИБ.УникальныйИдентификатор;
//		
//		// Обновление значения реквизита контролируемого при записи.
//		ПараметрыОбработки.НовыйИдентификаторПользователяИБ =
//			ПользовательОбъект.ИдентификаторПользователяИБ;
//		
//		Возврат;
//	КонецЕсли;
//	
//	ОписаниеПользователя = Новый Структура;
//	ПараметрыОбработки.Вставить("ОписаниеПользователя", Новый Структура);
//	
//	Если ОписаниеПользователяИБ.Действие = "Записать" Тогда
//		// Проверка попытки изменения недоступных свойств.
//		
//		Если УровеньДоступа = "УправлениеСписком" Тогда
//			Если ОписаниеПользователяИБ.Свойство("Роли") Тогда
//				ВызватьИсключение ТекстСообщения;
//			КонецЕсли;
//			
//		ИначеЕсли УровеньДоступа = "ИзменениеТекущего" Тогда
//			
//			ВсеСвойства = Пользователи.НовоеОписаниеПользователяИБ();
//			
//			ДопустимыеСвойства = Новый Массив;
//			ДопустимыеСвойства.Добавить("Имя");
//			ДопустимыеСвойства.Добавить("Пароль");
//			ДопустимыеСвойства.Добавить("Язык");
//			
//			Для каждого КлючИЗначение Из ОписаниеПользователяИБ Цикл
//				
//				Если ВсеСвойства.Свойство(КлючИЗначение.Ключ)
//				   И ДопустимыеСвойства.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
//					
//					ВызватьИсключение ТекстСообщения;
//				КонецЕсли;
//			КонецЦикла;
//		КонецЕсли;
//		
//		ЗаписатьПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
//	Иначе
//		УдалитьПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
//	КонецЕсли;
//	
//	// Обновление значения реквизита контролируемого при записи.
//	ПараметрыОбработки.НовыйИдентификаторПользователяИБ =
//		ПользовательОбъект.ИдентификаторПользователяИБ;
//	
//	ОписаниеНовогоПользователяИБ = Неопределено;
//	Если Пользователи.ПрочитатьПользователяИБ(
//			 ПользовательОбъект.ИдентификаторПользователяИБ,
//			 ОписаниеНовогоПользователяИБ) Тогда
//		
//		ПараметрыОбработки.Вставить("НовыйПользовательИБСуществует", Истина);
//	Иначе
//		ПараметрыОбработки.Вставить("НовыйПользовательИБСуществует", Ложь);
//	КонецЕсли;
//	ПараметрыОбработки.Вставить(
//		"ОписаниеНовогоПользователяИБ", ОписаниеНовогоПользователяИБ);
//	
//	ПараметрыОбработки.Вставить("СоздатьПользователяСервиса", Ложь);
//	
//	Если ПараметрыОбработки.НовыйПользовательИБСуществует
//	   И ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
//		
//		Если НЕ ЗначениеЗаполнено(ПараметрыОбработки.НовыйИдентификаторПользователяСервиса) Тогда
//			ПараметрыОбработки.Вставить("СоздатьПользователяСервиса", Истина);
//			ПользовательОбъект.ИдентификаторПользователяСервиса = Новый УникальныйИдентификатор;
//			// Обновление значения реквизита контролируемого при записи.
//			ПараметрыОбработки.НовыйИдентификаторПользователяСервиса =
//				ПользовательОбъект.ИдентификаторПользователяСервиса;
//		КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ЗавершитьОбработкуПользователяИБ(ПользовательОбъект, ПараметрыОбработки) Экспорт
//	
//	Если ПараметрыОбработки.НовыйИдентификаторПользователяИБ
//		 <> ПользовательОбъект.ИдентификаторПользователяИБ Тогда
//		
//		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
//					   |Реквизит ИдентификаторПользователяИБ не допускается изменять.
//					   |Обновление реквизита выполняется автоматически.'"),
//			ПользовательОбъект.Ссылка);
//	КонецЕсли;
//	
//	Если ПараметрыОбработки.НовыйИдентификаторПользователяСервиса
//		 <> ПользовательОбъект.ИдентификаторПользователяСервиса Тогда
//		
//		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
//					   |Реквизит ИдентификаторПользователяИБ не допускается изменять.
//					   |Обновление реквизита выполняется автоматически.'"),
//			ПользовательОбъект.Ссылка);
//	КонецЕсли;
//	
//	Если НЕ ПараметрыОбработки.Свойство("Действие") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если НЕ ПараметрыОбработки.Свойство("ОбработкаСообщенияКаналаУдаленногоАдминистрирования")
//	   И НЕ ПараметрыОбработки.Свойство("ЭтоНеразделенныйПользовательИБ")
//	   И ПараметрыОбработки.ОписаниеПользователя.Количество() > 0 Тогда
//		
//		СтандартныеПодсистемыПереопределяемый.ПриЗаписиПользователя(
//			ПользовательОбъект,
//			ПараметрыОбработки.ОписаниеПользователя,
//			ПараметрыОбработки.СтарыйПользовательИБСуществует,
//			ПараметрыОбработки.НовыйПользовательИБСуществует,
//			ПараметрыОбработки.СоздатьПользователяСервиса);
//	КонецЕсли;
//	
//	Если ПараметрыОбработки.ЗаписьАдминистратора Тогда
//		УстановитьПривилегированныйРежим(Истина);
//		
//		СтандартныеПодсистемыПереопределяемый.ПриЗаписиАдминистратора(ПользовательОбъект.Ссылка);
//		
//		УстановитьПривилегированныйРежим(Ложь);
//	КонецЕсли;
//	
//	СкопироватьНастройкиПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
//	
//КонецПроцедуры

//Процедура ЗаписатьПользователяИБ(ПользовательОбъект, ПараметрыОбработки)
//	
//	ДополнительныеСвойства = ПользовательОбъект.ДополнительныеСвойства;
//	ОписаниеПользователяИБ = ДополнительныеСвойства.ОписаниеПользователяИБ;
//	
//	Если ОписаниеПользователяИБ.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	СоздатьНовогоПользователяИБ = Ложь;
//	
//	Если ОписаниеПользователяИБ.Свойство("УникальныйИдентификатор")
//	   И ЗначениеЗаполнено(ОписаниеПользователяИБ.УникальныйИдентификатор) Тогда
//		
//		ИдентификаторПользователяИБ = ОписаниеПользователяИБ.УникальныйИдентификатор;
//		
//	ИначеЕсли ЗначениеЗаполнено(ПараметрыОбработки.СтарыйИдентификаторПользователяИБ) Тогда
//		ИдентификаторПользователяИБ = ПараметрыОбработки.СтарыйИдентификаторПользователяИБ;
//		СоздатьНовогоПользователяИБ = НЕ ПараметрыОбработки.СтарыйПользовательИБСуществует;
//	Иначе
//		ИдентификаторПользователяИБ = Неопределено;
//		СоздатьНовогоПользователяИБ = Истина;
//	КонецЕсли;
//	
//	ОписаниеПользователяИБ.Вставить("ПолноеИмя", ПользовательОбъект.Наименование);
//	
//	// Попытка записи пользователя ИБ.
//	ОписаниеОшибки = "";
//	ПользовательИБ = Неопределено;
//	Если НЕ Пользователи.ЗаписатьПользователяИБ(
//			 ИдентификаторПользователяИБ,
//			 ОписаниеПользователяИБ,
//			 СоздатьНовогоПользователяИБ,
//			 ОписаниеОшибки,
//			 ПользовательИБ) Тогда
//		
//		ВызватьИсключение ОписаниеОшибки;
//	КонецЕсли;
//	
//	Если ПользовательИБ.Роли.Содержит(Метаданные.роли.ПолныеПрава) Тогда
//		ПараметрыОбработки.Вставить("ЗаписьАдминистратора", Истина);
//	КонецЕсли;
//	
//	Если СоздатьНовогоПользователяИБ Тогда
//		ОписаниеПользователяИБ.Вставить("РезультатДействия", "ДобавленПользовательИБ");
//		ИдентификаторПользователяИБ = ОписаниеПользователяИБ.УникальныйИдентификатор;
//	Иначе
//		ОписаниеПользователяИБ.Вставить("РезультатДействия", "ИзмененПользовательИБ");
//	КонецЕсли;
//	
//	ПользовательОбъект.ИдентификаторПользователяИБ = ИдентификаторПользователяИБ;
//	
//	ОписаниеПользователяИБ.Вставить(
//		"УникальныйИдентификатор",
//		ИдентификаторПользователяИБ);
//	
//	ПараметрыОбработки.ОписаниеПользователя.Вставить("Имя",       ПользовательИБ.Имя);
//	ПараметрыОбработки.ОписаниеПользователя.Вставить("ПолноеИмя", ПользовательИБ.ПолноеИмя);
//	ПараметрыОбработки.ОписаниеПользователя.Вставить("Язык",      Строка(ПользовательИБ.Язык));
//	
//КонецПроцедуры

//Функция УдалитьПользователяИБ(ПользовательОбъект, ПараметрыОбработки)
//	
//	ОписаниеПользователяИБ = ПользовательОбъект.ДополнительныеСвойства.ОписаниеПользователяИБ;
//	
//	// Очистка идентификатора пользователя ИБ.
//	ПользовательОбъект.ИдентификаторПользователяИБ = Неопределено;
//	
//	Если ПараметрыОбработки.СтарыйПользовательИБСуществует Тогда
//		
//		УстановитьПривилегированныйРежим(Истина);
//		
//		ОписаниеОшибки = "";
//		ПользовательИБ = Неопределено;
//		Если Пользователи.УдалитьПользователяИБ(
//				 ПараметрыОбработки.СтарыйИдентификаторПользователяИБ,
//				 ОписаниеОшибки,
//				 ПользовательИБ) Тогда
//			
//			// Установка идентификатора удаляемого пользователя ИБ, как результата действия Удалить.
//			ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор",
//				ПараметрыОбработки.СтарыйИдентификаторПользователяИБ);
//			
//			ОписаниеПользователяИБ.Вставить("РезультатДействия", "УдаленПользовательИБ");
//			
//			ПараметрыОбработки.ОписаниеПользователя.Вставить("Имя",       ПользовательИБ.Имя);
//			ПараметрыОбработки.ОписаниеПользователя.Вставить("ПолноеИмя", ПользовательИБ.ПолноеИмя);
//			ПараметрыОбработки.ОписаниеПользователя.Вставить("Язык",      Строка(ПользовательИБ.Язык));
//		Иначе
//			ВызватьИсключение ОписаниеОшибки;
//		КонецЕсли;
//		
//	ИначеЕсли ЗначениеЗаполнено(ПараметрыОбработки.СтарыйИдентификаторПользователяИБ) Тогда
//		
//		ОписаниеПользователяИБ.Вставить(
//			"РезультатДействия", "ОчищенаСвязьСНесуществущимПользователемИБ");
//	Иначе
//		ОписаниеПользователяИБ.Вставить(
//			"РезультатДействия", "НеТребуетсяУдалениеПользовательИБ");
//	КонецЕсли;
//	
//КонецФункции

//// Нельзя вызвать из фоновых заданий с пустым пользователем.
//Функция ТребуетсяСоздатьПервогоАдминистратора(Знач ОписаниеПользователяИБ,
//											  Текст = Неопределено) Экспорт
//	
//	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
//		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
//		
//		Возврат Ложь;
//	КонецЕсли;
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Если НЕ ЗначениеЗаполнено(ПользователиИнформационнойБазы.ТекущийПользователь().Имя) Тогда
//		
//		Если ОписаниеПользователяИБ = Тип("Структура") Тогда
//			// Проверка перед записью обычного пользователя или пользователя ИБ.
//			
//			Если ОписаниеПользователяИБ.Свойство("Роли") Тогда
//				Роли = ОписаниеПользователяИБ.Роли;
//			Иначе
//				Роли = Новый Массив;
//			КонецЕсли;
//			
//			Если ПользователиПереопределяемый.ЗапретРедактированияРолей()
//				ИЛИ Роли.Найти("ПолныеПрава") = Неопределено
//				ИЛИ Роли.Найти(Пользователи.РольАдминистратораСистемы().Имя) = Неопределено Тогда
//				
//				// Подготовка текста вопроса при записи первого администратора.
//				Текст = НСтр("ru = 'В список пользователей программы добавляется первый пользователь,
//								   |поэтому ему автоматически будет назначена роль ""Полные права"".
//								   |Продолжить?'");
//				СтандартныеПодсистемыПереопределяемый.ТекстВопросаПередЗаписьюПервогоАдминистратора(
//					Текст);
//				
//				Возврат Истина;
//			КонецЕсли;
//		Иначе
//			// Проверка перед записью внешнего пользователя.
//			Текст = НСтр("ru = 'Первый пользователь информационной базы должен иметь полные права.
//							   |Внешний пользователь не может быть полноправным.
//							   |Сначала создайте обычного пользователя-администратора.'");
//			Возврат Истина;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат Ложь;
//	
//КонецФункции

//Процедура СкопироватьНастройкиПользователяИБ(ПользовательОбъект, ПараметрыОбработки)
//	
//	Если НЕ ПараметрыОбработки.Свойство("ЗначениеКопирования")
//	 ИЛИ НЕ ПараметрыОбработки.НовыйПользовательИБСуществует Тогда
//		
//		Возврат;
//	КонецЕсли;
//	
//	ИмяНовогоПользователя = ПараметрыОбработки.ОписаниеНовогоПользователяИБ.Имя;
//	
//	ИдентификаторКопируемогоПользователяИБ =
//		ОбщегоНазначения.ПолучитьЗначениеРеквизита(
//			ПараметрыОбработки.ЗначениеКопирования, "ИдентификаторПользователяИБ");
//	
//	Если НЕ ЗначениеЗаполнено(ИдентификаторКопируемогоПользователяИБ) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ОписаниеКопируемогоПользователяИБ = Неопределено;
//	Если НЕ Пользователи.ПрочитатьПользователяИБ(
//			 ИдентификаторКопируемогоПользователяИБ,
//			 ОписаниеКопируемогоПользователяИБ) Тогда
//		
//		Возврат;
//	КонецЕсли;
//	
//	ИмяКопируемогоПользователяИБ = ОписаниеКопируемогоПользователяИБ.Имя;
//	
//	// Копирование настроек.
//	СкопироватьНастройкиПользователя(ИмяКопируемогоПользователяИБ, ИмяНовогоПользователя, Ложь);
//	
//КонецПроцедуры

//Функция СвойстваНеуказанногоПользователя() Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Свойства = Новый Структура;
//	
//	// Ссылка на найденный элемент справочника
//	// соответствующий неуказанному пользователю.
//	Свойства.Вставить("Ссылка", Неопределено);
//	
//	// Ссылка, используемая для поиска и создания
//	// неуказанного пользователя в справочнике Пользователи.
//	Свойства.Вставить("СтандартнаяСсылка", Справочники.Пользователи.ПолучитьСсылку(
//		Новый УникальныйИдентификатор("aa00559e-ad84-4494-88fd-f0826edc46f0")));
//	
//	// Полное имя, которое устанавливается в элемент справочника Пользователи
//	// при создании несуществующего неуказанного пользователя.
//	Свойства.Вставить("ПолноеИмя", Пользователи.ПолноеИмяНеуказанногоПользователя());
//	
//	// Полное имя, которое используется для поиска неуказанного пользователя
//	// старым способом, необходимым для поддержки старых версий
//	// неуказанного пользователя. Это имя не требуется изменять.
//	Свойства.Вставить("ПолноеИмяДляПоиска", НСтр("ru = '<Не указан>'"));
//	
//	// Поиск по уникальному идентификатору.
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Ссылка", Свойства.СтандартнаяСсылка);
//	Запрос.Текст =
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ИСТИНА КАК ЗначениеИстина
//	|ИЗ
//	|	Справочник.Пользователи КАК Пользователи
//	|ГДЕ
//	|	Пользователи.Ссылка = &Ссылка";
//	
//	НачатьТранзакцию();
//	Попытка
//		Если Запрос.Выполнить().Пустой() Тогда
//			Запрос.УстановитьПараметр("ПолноеИмя", Свойства.ПолноеИмяДляПоиска);
//			Запрос.Текст =
//			"ВЫБРАТЬ ПЕРВЫЕ 1
//			|	Пользователи.Ссылка
//			|ИЗ
//			|	Справочник.Пользователи КАК Пользователи
//			|ГДЕ
//			|	Пользователи.Наименование = &ПолноеИмя";
//			Результат = Запрос.Выполнить();
//			
//			Если НЕ Результат.Пустой() Тогда
//				Выборка = Результат.Выбрать();
//				Выборка.Следующий();
//				Свойства.Ссылка = Выборка.Ссылка;
//			КонецЕсли;
//		Иначе
//			Свойства.Ссылка = Свойства.СтандартнаяСсылка;
//		КонецЕсли;
//		ЗафиксироватьТранзакцию();
//	Исключение
//		ОтменитьТранзакцию();
//		ВызватьИсключение;
//	КонецПопытки;
//	
//	Возврат Свойства;
//	
//КонецФункции

//// Проверяет корректность заполнения структуры описания пользователя ИБ.
//// В случае нахождения ошибок устанавливает параметр Отказ в Истина и
//// отправляет сообщения об ошибках.
////
//// Параметры:
////  ОписаниеПользователяИБ - Структура - описание пользователя ИБ
////                 заполнение которого требуется проверить.
////
////  Отказ        - Булево - флаг отказа от выполнения операции.
////                 Устанавливается в случае ошибки.
////
//// Возвращаемое значение:
////  Булево - если Истина, ошибок не найдено.
////
//Функция ПроверитьОписаниеПользователяИБ(Знач ОписаниеПользователяИБ, Отказ) Экспорт
//	
//	Если ОписаниеПользователяИБ.Свойство("Имя") Тогда
//	
//		Если ПустаяСтрока(ОписаниеПользователяИБ.Имя) Тогда
//			
//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//				НСтр("ru = 'Не заполнено имя пользователя информационной базы.'"),
//				,
//				"Имя",
//				,
//				Отказ);
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Если ОписаниеПользователяИБ.Свойство("Пароль") Тогда
//		
//		Если ОписаниеПользователяИБ.Пароль <> Неопределено
//			И ОписаниеПользователяИБ.Пароль
//			  <> ОписаниеПользователяИБ.ПодтверждениеПароля Тогда
//			
//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//				НСтр("ru = 'Пароль и подтверждение пароля не совпадают.'"),
//				,
//				"Пароль",
//				,
//				Отказ);
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Если ОписаниеПользователяИБ.Свойство("ПользовательОС") Тогда
//		
//		Если НЕ ПустаяСтрока(ОписаниеПользователяИБ.ПользовательОС) Тогда
//			
//			УстановитьПривилегированныйРежим(Истина);
//			Попытка
//				ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
//				ПользовательИБ.ПользовательОС = ОписаниеПользователяИБ.ПользовательОС;
//			Исключение
//				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//					НСтр("ru = 'Пользователь ОС должен быть в формате
//							   |""\\ИмяДомена\ИмяПользователя"".'"),
//					,
//					"ПользовательОС",
//					,
//					Отказ);
//			КонецПопытки;
//			УстановитьПривилегированныйРежим(Ложь);
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Возврат НЕ Отказ;
//	
//КонецФункции

//// Записывает указанного Пользователя ИБ с учетом режима разделения данных.
////  Если режим разделения данных включен, тогда перед записью проверяются
//// права записываемого пользователя.
////
//// Параметры:
////  ПользовательИБ - ПользовательИнформационнойБазы - объект, который требуется записать.
////
//Процедура ЗаписатьПользователяИнформационнойБазы(ПользовательИБ) Экспорт
//	
//	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
//		
//		Если Пользователи.ЭтоНеразделенныйПользователь(
//				 ПользовательИБ.УникальныйИдентификатор) Тогда
//			
//			ВызватьИсключение ТекстИсключенияЗаписьНеразделенныхПользователейЗапрещена();
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	ПроверитьПраваПользователя(ПользовательИБ);
//	
//	ПользовательИБ.Записать();

//КонецПроцедуры

//// Проверяет существование пользователя информационной базы.
////
//// Параметры:
////  Идентификатор  - Строка - имя пользователя ИБ,
////                   УникальныйИдентификатор - идентификатор пользователя ИБ.
////
//// Возвращаемое значение:
////  Булево.
////
//Функция ПользовательИБСуществует(Знач Идентификатор) Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
//		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);
//	Иначе
//		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Идентификатор);
//	КонецЕсли;
//	
//	Если ПользовательИБ = Неопределено Тогда
//		Возврат Ложь;
//	Иначе
//		Возврат Истина;
//	КонецЕсли;
//	
//КонецФункции

//// Определяет наличие элемента в справочнике Пользователи
//// или справочнике ВнешниеПользователи по уникальному идентификатору
//// пользователя информационной.
////  Функция используется для проверки наличия связи пользователяИБ только
//// с одним элементом справочников Пользователи, ВнешниеПользователи.
////
//// Параметры:
////  УникальныйИдентификатор - идентификатор пользователя ИБ.
////
////  СсылкаНаТекущего - СправочникСсылка.Пользователи,
////                     СправочникСсылка.ВнешниеПользователи - исключить
////                       указанную ссылку из поиска.
////                     Неопределено - искать среди всех элементов справочников.
////
////  НайденныйПользователь (Возвращаемое значение):
////                     Неопределено - пользователь не существует.
////                     СправочникСсылка.Пользователи,
////                     СправочникСсылка.ВнешниеПользователи, если найден.
////
////  ИдентификаторПользователяСервиса - Булево.
////                     Ложь   - проверять ИдентификаторПользователяИБ.
////                     Истина - проверять ИдентификаторПользователяСервиса.
////
//// Возвращаемое значение:
////  Булево.
////
//Функция ПользовательПоИдентификаторуСуществует(УникальныйИдентификатор,
//											   СсылкаНаТекущего = Неопределено,
//											   НайденныйПользователь = Неопределено,
//											   ИдентификаторПользователяСервиса = Ложь) Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("СсылкаНаТекущего", СсылкаНаТекущего);
//	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	Пользователи.Ссылка КАК Пользователь
//	|ИЗ
//	|	Справочник.Пользователи КАК Пользователи
//	|ГДЕ
//	|	Пользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор
//	|	И Пользователи.Ссылка <> &СсылкаНаТекущего
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ВнешниеПользователи.Ссылка
//	|ИЗ
//	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
//	|ГДЕ
//	|	ВнешниеПользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор
//	|	И ВнешниеПользователи.Ссылка <> &СсылкаНаТекущего";
//	
//	Результат = Ложь;
//	НайденныйПользователь = Неопределено;
//	
//	НачатьТранзакцию();
//	Попытка
//		РезультатЗапроса = Запрос.Выполнить();
//		
//		Если НЕ РезультатЗапроса.Пустой() Тогда
//			Выборка = РезультатЗапроса.Выбрать();
//			Выборка.Следующий();
//			НайденныйПользователь = Выборка.Пользователь;
//			Результат = Истина;
//			Пользователи.НайтиНеоднозначныхПользователейИБ(, УникальныйИдентификатор);
//		КонецЕсли;
//		
//		ЗафиксироватьТранзакцию();
//	Исключение
//		ОтменитьТранзакцию();
//		ВызватьИсключение;
//	КонецПопытки;
//	
//	Возврат Результат;
//	
//КонецФункции

//// Обновляет составы пользователей у групп пользователей с учетом иерархии
//// в регистре сведений "Составы групп пользователей".
////  Данные регистра используются в форме списка и формы выбора пользователей.
////  Данные регистра могут быть использованы для повышения производительности запросов,
//// т.к. не требуется работать с иерархией.
////
//// Параметры:
////  ГруппаПользователей - СправочникСсылка.ГруппыПользователей.
////
////  Пользователь - Неопределено                                  - для всех пользователей.
////               - Массив значений СправочникСсылка.Пользователи - для указанных пользователей.
////               - СправочникСсылка.Пользователи                 - для указанного пользователя.
////
//Процедура ОбновитьСоставыГруппПользователей(Знач ГруппаПользователей, Знач Пользователь = Неопределено) Экспорт
//	
//	Если НЕ ЗначениеЗаполнено(ГруппаПользователей) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ТипЗнч(Пользователь) = Тип("Массив") И Пользователь.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	НачатьТранзакцию();
//	Попытка
//		Если ГруппаПользователей = Справочники.ГруппыПользователей.ВсеПользователи Тогда
//			
//			ОбновитьСоставГруппыВсеПользователи(Пользователь);
//		Иначе
//			ОбновитьСоставыИерархическихГруппПользователей(ГруппаПользователей, Пользователь);
//		КонецЕсли;
//		
//		ЗафиксироватьТранзакцию();
//	Исключение
//		ОтменитьТранзакцию();
//		ВызватьИсключение;
//	КонецПопытки;
//	
//КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// Процедуры и функции работы с внешними пользователями

//// Обновляет составы внешних пользователей у групп внешних пользователей
//// с учетом иерархии в регистре сведений "Составы групп пользователей".
////  Данные используеются в форме списка и форме выбора внешних пользователей.
////  Данные могут быть использованы в целях для повышения производительности,
//// так как не требуется работать с иерархией на языке запросов.
////
//// Параметры:
////  ГруппаВнешнихПользователей - СправочникСсылка.ГруппыВнешнихПользователей
////                        Когда указана группа ВсеВнешниеПользователи обновляются также все
////                        автоматические группы внешних пользователей по типам объектов авторизации.
////
////  ВнешнийПользователь - Неопределено                         - для всех внешних пользователей.
////                      - Массив значений СправочникСсылка.ВнешниеПользователи
////                                                             - для указанных  внешних пользователей.
////                      - СправочникСсылка.ВнешниеПользователи - для указанного внешнего пользователя.
////
//Процедура ОбновитьСоставыГруппВнешнихПользователей(Знач ГруппаВнешнихПользователей,
//												   Знач ВнешнийПользователь = Неопределено) Экспорт
//	
//	Если НЕ ЗначениеЗаполнено(ГруппаВнешнихПользователей) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ТипЗнч(ВнешнийПользователь) = Тип("Массив") И ВнешнийПользователь.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Если НЕ ПользователиПереопределяемый.ЗапретРедактированияРолей() Тогда
//		УчастникиИзменений = Новый Соответствие;
//	КонецЕсли;
//	
//	НачатьТранзакцию();
//	Попытка
//		Если ГруппаВнешнихПользователей = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
//			
//			ОбновитьСоставГруппыВсеПользователи(ВнешнийПользователь, Истина, УчастникиИзменений);
//			ОбновитьСоставыГруппПоТипамОбъектовАвторизации( , ВнешнийПользователь, УчастникиИзменений);
//			
//		ИначеЕсли ОбщегоНазначения.ПолучитьЗначениеРеквизита(
//					ГруппаВнешнихПользователей, "ВсеОбъектыАвторизации") = Истина Тогда
//			
//			ОбновитьСоставыГруппПоТипамОбъектовАвторизации(
//				ГруппаВнешнихПользователей, ВнешнийПользователь, УчастникиИзменений);
//		Иначе
//			ОбновитьСоставыИерархическихГруппПользователей(
//				ГруппаВнешнихПользователей, ВнешнийПользователь, УчастникиИзменений);
//		КонецЕсли;
//		
//		Если НЕ ПользователиПереопределяемый.ЗапретРедактированияРолей() Тогда
//			
//			УчастникиИзмененийМассив = Новый Массив;
//			Для каждого КлючИЗначение Из УчастникиИзменений Цикл
//				УчастникиИзмененийМассив.Добавить(КлючИЗначение.Ключ);
//			КонецЦикла;
//			
//			ОбновитьРолиВнешнихПользователей(УчастникиИзмененийМассив);
//		КонецЕсли;
//		
//		ЗафиксироватьТранзакцию();
//	Исключение
//		ОтменитьТранзакцию();
//		ВызватьИсключение;
//	КонецПопытки;
//	
//КонецПроцедуры

//// Обновляет список ролей пользователей информационной базы, которые соответствуют
//// внешним пользователям. Состав ролей вычисляется исходя из вхождения внешних
//// пользователей в группы внешних пользователей, кроме тех внешних пользователей,
//// для которых роли установлены непосредственно.
////  Требуется только при разрешении редактирования ролей, например, если
//// встроена подсистема Управление доступом, то эта процедура не требуется.
//// 
//// Параметры:
////  МассивВнешнихПользователей - Неопределено - все внешние пользователи.
////                               СправочникСсылка.ГруппаВнешнихПользователей,
////                               Массив элементов СправочникСсылка.ВнешниеПользователи.
////
//Процедура ОбновитьРолиВнешнихПользователей(Знач МассивВнешнихПользователей = Неопределено) Экспорт
//	
//	Если ПользователиПереопределяемый.ЗапретРедактированияРолей() Тогда
//		// Роли устанавливаются другим механизмом, например, механизмом подсистемы УправлениеДоступом.
//		Возврат;
//	КонецЕсли;
//	
//	Если ТипЗнч(МассивВнешнихПользователей) = Тип("Массив")
//	   И МассивВнешнихПользователей.Количество() = 0 Тогда
//		
//		Возврат;
//	КонецЕсли;
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	НачатьТранзакцию();
//	Попытка
//		Если ТипЗнч(МассивВнешнихПользователей) <> Тип("Массив") Тогда
//			
//			Если МассивВнешнихПользователей = Неопределено Тогда
//				ГруппаВнешнихПользователей = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи;
//			Иначе
//				ГруппаВнешнихПользователей = МассивВнешнихПользователей;
//			КонецЕсли;
//			
//			Запрос = Новый Запрос;
//			Запрос.УстановитьПараметр("ГруппаВнешнихПользователей", ГруппаВнешнихПользователей);
//			Запрос.Текст =
//			"ВЫБРАТЬ
//			|	СоставыГруппПользователей.Пользователь
//			|ИЗ
//			|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
//			|ГДЕ
//			|	СоставыГруппПользователей.ГруппаПользователей = &ГруппаВнешнихПользователей";
//			
//			МассивВнешнихПользователей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
//		КонецЕсли;
//		
//		Пользователи.НайтиНеоднозначныхПользователейИБ();
//		
//		ИдентификаторыПользователейИБ = Новый Соответствие;
//		
//		Запрос = Новый Запрос;
//		Запрос.УстановитьПараметр("ВнешниеПользователи", МассивВнешнихПользователей);
//		Запрос.Текст =
//		"ВЫБРАТЬ
//		|	ВнешниеПользователи.Ссылка КАК ВнешнийПользователь,
//		|	ВнешниеПользователи.ИдентификаторПользователяИБ
//		|ИЗ
//		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
//		|ГДЕ
//		|	ВнешниеПользователи.Ссылка В(&ВнешниеПользователи)
//		|	И (НЕ ВнешниеПользователи.УстановитьРолиНепосредственно)";
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Пока Выборка.Следующий() Цикл
//			ИдентификаторыПользователейИБ.Вставить(
//				Выборка.ВнешнийПользователь, Выборка.ИдентификаторПользователяИБ);
//		КонецЦикла;
//		
//		// Подготовка таблицы старых ролей внешних пользователей.
//		СтарыеРолиВнешнихПользователей = Новый ТаблицаЗначений;
//		
//		СтарыеРолиВнешнихПользователей.Колонки.Добавить(
//			"ВнешнийПользователь", Новый ОписаниеТипов("СправочникСсылка.ВнешниеПользователи"));
//		
//		СтарыеРолиВнешнихПользователей.Колонки.Добавить(
//			"Роль", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
//		
//		ТекущийНомер = МассивВнешнихПользователей.Количество() - 1;
//		Пока ТекущийНомер >= 0 Цикл
//			
//			// Проверка необходимости обработки пользователя.
//			ПользовательИБ = Неопределено;
//			ИдентификаторПользователяИБ = ИдентификаторыПользователейИБ[МассивВнешнихПользователей[ТекущийНомер]];
//			Если ИдентификаторПользователяИБ <> Неопределено Тогда
//				
//				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
//					ИдентификаторПользователяИБ);
//			КонецЕсли;
//			
//			Если ПользовательИБ = Неопределено
//			 ИЛИ ПустаяСтрока(ПользовательИБ.Имя) Тогда
//				
//				МассивВнешнихПользователей.Удалить(ТекущийНомер);
//			Иначе
//				Для каждого Роль Из ПользовательИБ.Роли Цикл
//					СтараяРольВнешнегоПользователя = СтарыеРолиВнешнихПользователей.Добавить();
//					СтараяРольВнешнегоПользователя.ВнешнийПользователь = МассивВнешнихПользователей[ТекущийНомер];
//					СтараяРольВнешнегоПользователя.Роль = Роль.Имя;
//				КонецЦикла;
//			КонецЕсли;
//			ТекущийНомер = ТекущийНомер - 1;
//		КонецЦикла;
//		
//		// Подготовка списка ролей отсутствующих в метаданных и которые нужно переустановить.
//		Запрос = Новый Запрос;
//		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
//		Запрос.УстановитьПараметр("ВнешниеПользователи", МассивВнешнихПользователей);
//		Запрос.УстановитьПараметр("ВсеДоступныеРоли", ПользователиСлужебныйПовтИсп.ВсеРоли());
//		Запрос.УстановитьПараметр("СтарыеРолиВнешнихПользователей", СтарыеРолиВнешнихПользователей);
//		Запрос.Текст =
//		"ВЫБРАТЬ
//		|	СтарыеРолиВнешнихПользователей.ВнешнийПользователь,
//		|	СтарыеРолиВнешнихПользователей.Роль
//		|ПОМЕСТИТЬ СтарыеРолиВнешнихПользователей
//		|ИЗ
//		|	&СтарыеРолиВнешнихПользователей КАК СтарыеРолиВнешнихПользователей
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВсеДоступныеРоли.Имя
//		|ПОМЕСТИТЬ ВсеДоступныеРоли
//		|ИЗ
//		|	&ВсеДоступныеРоли КАК ВсеДоступныеРоли
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаВнешнихПользователей,
//		|	СоставыГруппПользователей.Пользователь КАК ВнешнийПользователь,
//		|	Роли.Роль
//		|ПОМЕСТИТЬ ВсеНовыеРолиВнешнихПользователей
//		|ИЗ
//		|	Справочник.ГруппыВнешнихПользователей.Роли КАК Роли
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
//		|		ПО (СоставыГруппПользователей.Пользователь В (&ВнешниеПользователи))
//		|			И (СоставыГруппПользователей.ГруппаПользователей = Роли.Ссылка)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	ВсеНовыеРолиВнешнихПользователей.ВнешнийПользователь,
//		|	ВсеНовыеРолиВнешнихПользователей.Роль
//		|ПОМЕСТИТЬ НовыеРолиВнешнихПользователей
//		|ИЗ
//		|	ВсеНовыеРолиВнешнихПользователей КАК ВсеНовыеРолиВнешнихПользователей
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	СтарыеРолиВнешнихПользователей.ВнешнийПользователь
//		|ПОМЕСТИТЬ ИзмененныеВнешниеПользователи
//		|ИЗ
//		|	СтарыеРолиВнешнихПользователей КАК СтарыеРолиВнешнихПользователей
//		|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеРолиВнешнихПользователей КАК НовыеРолиВнешнихПользователей
//		|		ПО (НовыеРолиВнешнихПользователей.ВнешнийПользователь = СтарыеРолиВнешнихПользователей.ВнешнийПользователь)
//		|			И (НовыеРолиВнешнихПользователей.Роль = СтарыеРолиВнешнихПользователей.Роль)
//		|ГДЕ
//		|	НовыеРолиВнешнихПользователей.Роль ЕСТЬ NULL 
//		|
//		|ОБЪЕДИНИТЬ
//		|
//		|ВЫБРАТЬ
//		|	НовыеРолиВнешнихПользователей.ВнешнийПользователь
//		|ИЗ
//		|	НовыеРолиВнешнихПользователей КАК НовыеРолиВнешнихПользователей
//		|		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеРолиВнешнихПользователей КАК СтарыеРолиВнешнихПользователей
//		|		ПО НовыеРолиВнешнихПользователей.ВнешнийПользователь = СтарыеРолиВнешнихПользователей.ВнешнийПользователь
//		|			И НовыеРолиВнешнихПользователей.Роль = СтарыеРолиВнешнихПользователей.Роль
//		|ГДЕ
//		|	СтарыеРолиВнешнихПользователей.Роль ЕСТЬ NULL 
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВсеНовыеРолиВнешнихПользователей.ГруппаВнешнихПользователей,
//		|	ВсеНовыеРолиВнешнихПользователей.ВнешнийПользователь,
//		|	ВсеНовыеРолиВнешнихПользователей.Роль
//		|ИЗ
//		|	ВсеНовыеРолиВнешнихПользователей КАК ВсеНовыеРолиВнешнихПользователей
//		|ГДЕ
//		|	НЕ ИСТИНА В
//		|				(ВЫБРАТЬ ПЕРВЫЕ 1
//		|					ИСТИНА КАК ЗначениеИстина
//		|				ИЗ
//		|					ВсеДоступныеРоли КАК ВсеДоступныеРоли
//		|				ГДЕ
//		|					ВсеДоступныеРоли.Имя = ВсеНовыеРолиВнешнихПользователей.Роль)";
//		
//		// Регистрация ошибок имен ролей в профилях групп доступа.
//		Выборка = Запрос.Выполнить().Выбрать();
//		Пока Выборка.Следующий() Цикл
//			
//			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//				НСтр("ru= 'При обновлении ролей внешнего пользователя
//						  |""%1""
//						  |роль ""%2""
//						  |группы внешних пользователей ""%3""
//						  |не найдена в метаданных.'"),
//				СокрЛП(Выборка.ВнешнийПользователь.Наименование),
//				Выборка.Роль,
//				Строка(Выборка.ГруппаВнешнихПользователей));
//			
//			ЗаписьЖурналаРегистрации(
//				НСтр("ru = 'Внешние пользователи.Роль не найдена в метаданных'"),
//				УровеньЖурналаРегистрации.Ошибка,
//				,
//				,
//				ТекстСообщения,
//				РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
//		КонецЦикла;
//		
//		// Обновление ролей пользователей ИБ.
//		Запрос.Текст =
//		"ВЫБРАТЬ
//		|	ИзмененныеВнешниеПользователиИРоли.ВнешнийПользователь,
//		|	ИзмененныеВнешниеПользователиИРоли.Роль
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		НовыеРолиВнешнихПользователей.ВнешнийПользователь КАК ВнешнийПользователь,
//		|		НовыеРолиВнешнихПользователей.Роль КАК Роль
//		|	ИЗ
//		|		НовыеРолиВнешнихПользователей КАК НовыеРолиВнешнихПользователей
//		|	ГДЕ
//		|		НовыеРолиВнешнихПользователей.ВнешнийПользователь В
//		|				(ВЫБРАТЬ
//		|					ИзмененныеВнешниеПользователи.ВнешнийПользователь
//		|				ИЗ
//		|					ИзмененныеВнешниеПользователи КАК ИзмененныеВнешниеПользователи)
//		|	
//		|	ОБЪЕДИНИТЬ
//		|	
//		|	ВЫБРАТЬ
//		|		ВнешниеПользователи.Ссылка,
//		|		""""
//		|	ИЗ
//		|		Справочник.ВнешниеПользователи КАК ВнешниеПользователи
//		|	ГДЕ
//		|		ВнешниеПользователи.Ссылка В
//		|				(ВЫБРАТЬ
//		|					ИзмененныеВнешниеПользователи.ВнешнийПользователь
//		|				ИЗ
//		|					ИзмененныеВнешниеПользователи КАК ИзмененныеВнешниеПользователи)) КАК ИзмененныеВнешниеПользователиИРоли
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ИзмененныеВнешниеПользователиИРоли.ВнешнийПользователь,
//		|	ИзмененныеВнешниеПользователиИРоли.Роль";
//		Выборка = Запрос.Выполнить().Выбрать();
//		
//		ПользовательИБ = Неопределено;
//		Пока Выборка.Следующий() Цикл
//			Если ЗначениеЗаполнено(Выборка.Роль) Тогда
//				ПользовательИБ.Роли.Добавить(Метаданные.Роли[Выборка.Роль]);
//				Продолжить;
//			КонецЕсли;
//			Если ПользовательИБ <> Неопределено Тогда
//				ПользовательИБ.Записать();
//			КонецЕсли;
//			
//			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
//				ИдентификаторыПользователейИБ[Выборка.ВнешнийПользователь]);
//			
//			ПользовательИБ.Роли.Очистить();
//		КонецЦикла;
//		Если ПользовательИБ <> Неопределено Тогда
//			ПользовательИБ.Записать();
//		КонецЕсли;
//		
//		ЗафиксироватьТранзакцию();
//	Исключение
//		ОтменитьТранзакцию();
//		ВызватьИсключение;
//	КонецПопытки;
//	
//КонецПроцедуры

//// Проверяет, что объект информационной базы используется в качестве объекта авторизации
//// какого-нибудь внешнего пользователя, кроме заданного внешнего пользователя (если задан).
////
//Функция ОбъектАвторизацииИспользуется(Знач СсылкаНаОбъектАвторизации,
//									  Знач СсылкаНаТекущегоВнешнегоПользователя = Неопределено,
//									  НайденныйВнешнийПользователь = Неопределено,
//									  ЕстьПравоДобавленияВнешнегоПользователя = Ложь,
//									  ТекстОшибки = "") Экспорт
//	
//	ТекстОшибки = НСтр("ru = 'Объект информационной базы уже используется
//							 |для другого внешнего пользователя.'");
//	
//	ЕстьПравоДобавленияВнешнегоПользователя = ПравоДоступа(
//		"Добавление", Метаданные.Справочники.ВнешниеПользователи);
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Запрос = Новый Запрос;
//	
//	Запрос.УстановитьПараметр(
//		"СсылкаНаТекущегоВнешнегоПользователя", СсылкаНаТекущегоВнешнегоПользователя);
//		
//	Запрос.УстановитьПараметр("СсылкаНаОбъектАвторизации", СсылкаНаОбъектАвторизации);
//	
//	Запрос.Текст =
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ВнешниеПользователи.Ссылка
//	|ИЗ
//	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
//	|ГДЕ
//	|	ВнешниеПользователи.ОбъектАвторизации = &СсылкаНаОбъектАвторизации
//	|	И ВнешниеПользователи.Ссылка <> &СсылкаНаТекущегоВнешнегоПользователя";
//	
//	НачатьТранзакцию();
//	Попытка
//		Таблица = Запрос.Выполнить().Выгрузить();
//		Если Таблица.Количество() > 0 Тогда
//			НайденныйВнешнийПользователь = Таблица[0].Ссылка;
//		КонецЕсли;
//		
//		ЗафиксироватьТранзакцию();
//	Исключение
//		ОтменитьТранзакцию();
//		ВызватьИсключение;
//	КонецПопытки;
//	
//	Возврат Таблица.Количество() > 0;
//	
//КонецФункции

//// Обновляет представление внешнего пользователя при изменении представления его объекта авторизации.
//Процедура ОбновитьПредставлениеВнешнегоПользователя(СсылкаНаОбъектАвторизации) Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ВнешниеПользователи.Ссылка
//	|ИЗ
//	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
//	|ГДЕ
//	|	ВнешниеПользователи.ОбъектАвторизации = &СсылкаНаОбъектАвторизации
//	|	И ВнешниеПользователи.Наименование <> &НовоеПредставлениеОбъектаАвторизации");
//	Запрос.УстановитьПараметр("СсылкаНаОбъектАвторизации", СсылкаНаОбъектАвторизации);
//	Запрос.УстановитьПараметр("НовоеПредставлениеОбъектаАвторизации", Строка(СсылкаНаОбъектАвторизации));
//	
//	НачатьТранзакцию();
//	Попытка
//		РезультатЗапроса = Запрос.Выполнить();
//		
//		Если НЕ РезультатЗапроса.Пустой() Тогда
//			Выборка = РезультатЗапроса.Выбрать();
//			Выборка.Следующий();
//			
//			ВнешнийПользовательОбъект = Выборка.Ссылка.ПолучитьОбъект();
//			ВнешнийПользовательОбъект.Наименование = Строка(СсылкаНаОбъектАвторизации);
//			ВнешнийПользовательОбъект.Записать();
//		КонецЕсли;
//		
//		ЗафиксироватьТранзакцию();
//	Исключение
//		ОтменитьТранзакцию();
//		ВызватьИсключение;
//	КонецПопытки;
//	
//КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// Работа с настройками пользователя информационной базы

//// Копирует настройки от пользователя источника пользователю приемнику. При значении
//// параметра Переносить = Истина, настройки у пользователя источника удаляются.
////
//// Параметры
//// ИмяПользователяИсточник - Строка - Имя пользователя ИБ от которого будет производиться копирование настроек
////
//// ИмяПользователяПриемник - Строка - Имя пользователя ИБ которому будут записаны настройки
////
//// Переносить              - Булево - Если Истина - настройки переносятся от одного пользователя другому,
////                           если Ложь - копируются новому
////
//Процедура СкопироватьНастройкиПользователя(ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить = Ложь) Экспорт
//	
//	// Перенос пользовательских настроек отчетов
//	СкопироватьНастройки(ХранилищеПользовательскихНастроекОтчетов, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);
//	// Перенос настроек внешнего вида
//	СкопироватьНастройки(ХранилищеСистемныхНастроек,ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);
//	// Перенос произвольных настроек пользователей
//	СкопироватьНастройки(ХранилищеОбщихНастроек, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);
//	// Перенос настроек данных форм
//	СкопироватьНастройки(ХранилищеНастроекДанныхФорм, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);

//КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// Универсальные процедуры и функции

//Функция РазличияЗначенийКолонки(ИмяКолонки, Таблица1, Таблица2) Экспорт
//	
//	Если ТипЗнч(Таблица1) <> Тип("ТаблицаЗначений")
//	   И ТипЗнч(Таблица2) <> Тип("ТаблицаЗначений") Тогда
//		
//		Возврат Новый Массив;
//	КонецЕсли;
//	
//	Если ТипЗнч(Таблица1) <> Тип("ТаблицаЗначений") Тогда
//		Возврат Таблица2.ВыгрузитьКолонку(ИмяКолонки);
//	КонецЕсли;
//	
//	Если ТипЗнч(Таблица2) <> Тип("ТаблицаЗначений") Тогда
//		Возврат Таблица1.ВыгрузитьКолонку(ИмяКолонки);
//	КонецЕсли;
//	
//	Таблица11 = Таблица1.Скопировать(, ИмяКолонки);
//	Таблица11.Свернуть(ИмяКолонки);
//	
//	Таблица22 = Таблица2.Скопировать(, ИмяКолонки);
//	Таблица22.Свернуть(ИмяКолонки);
//	
//	Для каждого Строка Из Таблица22 Цикл
//		НоваяСтрока = Таблица11.Добавить();
//		НоваяСтрока[ИмяКолонки] = Строка[ИмяКолонки];
//	КонецЦикла;
//	
//	Таблица11.Колонки.Добавить("Признак");
//	Таблица11.ЗаполнитьЗначения(1, "Признак");
//	
//	Таблица11.Свернуть(ИмяКолонки, "Признак");
//	
//	Отбор = Новый Структура("Признак", 1);
//	Таблица = Таблица11.Скопировать(Таблица11.НайтиСтроки(Отбор));
//	
//	Возврат Таблица.ВыгрузитьКолонку(ИмяКолонки);
//	
//КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

Функция ТекстСообщенияПользовательНеНайденВСправочнике(ИмяПользователя)
	
	//Если ВнешниеПользователи.ИспользоватьВнешнихПользователей() Тогда
	//	ТекстСообщенияОбОшибке = НСтр("ru = 'Авторизация не выполнена. Работа системы будет завершена.
	//										|
	//										|Пользователь ""%1"" не найден в справочниках
	//										|""Пользователи"" и ""Внешние пользователи"".
	//										|
	//										|Обратитесь к администратору.'");
	//Иначе
		ТекстСообщенияОбОшибке = НСтр("ru = 'Авторизация не выполнена. Работа системы будет завершена.
											|
											|Пользователь ""%1"" не найден в справочнике ""Пользователи"".
											|
											|Обратитесь к администратору.'");
	//КонецЕсли;
	
	ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке, ИмяПользователя);
	
	Возврат ТекстСообщенияОбОшибке;
	
КонецФункции

//Функция СсылкаПользователяПоПолномуНаименованию(ПолноеИмя)
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	Пользователи.Ссылка КАК Ссылка,
//	|	Пользователи.ИдентификаторПользователяИБ
//	|ИЗ
//	|	Справочник.Пользователи КАК Пользователи
//	|ГДЕ
//	|	Пользователи.Наименование = &ПолноеИмя";
//	
//	Запрос.УстановитьПараметр("ПолноеИмя", ПолноеИмя);
//	
//	Результат = Неопределено;
//	
//	НачатьТранзакцию();
//	Попытка
//		РезультатЗапроса = Запрос.Выполнить();
//		Если НЕ РезультатЗапроса.Пустой() Тогда
//			
//			Выборка = РезультатЗапроса.Выбрать();
//			Выборка.Следующий();
//			
//			Если НЕ Пользователи.ПользовательИБЗанят(Выборка.ИдентификаторПользователяИБ) Тогда
//				Результат = Выборка.Ссылка;
//			КонецЕсли;
//		КонецЕсли;
//		
//		ЗафиксироватьТранзакцию();
//	Исключение
//		ОтменитьТранзакцию();
//		ВызватьИсключение;
//	КонецПопытки;
//	
//	Возврат Неопределено;
//	
//КонецФункции

Функция ЭтоСеансФоновогоЗадания()
	
	НомерСеанса = НомерСеансаИнформационнойБазы();
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	
	Для каждого Сеанс Из Сеансы Цикл
		Если Сеанс.НомерСеанса = НомерСеанса Тогда
			Возврат Сеанс.ИмяПриложения = "BackgroundJob";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

//// Используется в процедурах ОбновитьСоставыГруппПользователей,
//// ОбновитьСоставыГруппВнешнихПользователей.
////
//// Параметры:
////  Таблица      - полное имя объекта метаданных.
////
//// Возвращаемое значение:
////  ТаблицаЗначений (Ссылка, Родитель)
////
//Функция СсылкиВИерархииРодителей(Таблица)
//	
//	// Подготовка состава групп родителей.
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ
//	|	СсылкиРодителей.Ссылка КАК Ссылка,
//	|	СсылкиРодителей.Родитель КАК Родитель
//	|ИЗ
//	|	" + Таблица + " КАК СсылкиРодителей");
//	СсылкиРодителей = Запрос.Выполнить().Выгрузить();
//	СсылкиРодителей.Индексы.Добавить("Родитель");
//	СсылкиВИерархииРодителей = СсылкиРодителей.Скопировать(Новый Массив);
//	
//	Для каждого ОписаниеСсылки Из СсылкиРодителей Цикл
//		НоваяСтрока = СсылкиВИерархииРодителей.Добавить();
//		НоваяСтрока.Родитель = ОписаниеСсылки.Ссылка;
//		НоваяСтрока.Ссылка   = ОписаниеСсылки.Ссылка;
//		
//		ЗаполнитьСсылкиВИерархииРодителя(ОписаниеСсылки.Ссылка, ОписаниеСсылки.Ссылка, СсылкиРодителей, СсылкиВИерархииРодителей);
//	КонецЦикла;
//	
//	Возврат СсылкиВИерархииРодителей;
//	
//КонецФункции

//Процедура ЗаполнитьСсылкиВИерархииРодителя(Знач Родитель, Знач ТекущийРодитель, Знач СсылкиРодителей, Знач СсылкиВИерархииРодителей)
//	
//	СсылкиРодителя = СсылкиРодителей.НайтиСтроки(Новый Структура("Родитель", ТекущийРодитель));
//	
//	Для каждого ОписаниеСсылки Из СсылкиРодителя Цикл
//		НоваяСтрока = СсылкиВИерархииРодителей.Добавить();
//		НоваяСтрока.Родитель = Родитель;
//		НоваяСтрока.Ссылка   = ОписаниеСсылки.Ссылка;
//		
//		ЗаполнитьСсылкиВИерархииРодителя(Родитель, ОписаниеСсылки.Ссылка, СсылкиРодителей, СсылкиВИерархииРодителей);
//	КонецЦикла;
//	
//КонецПроцедуры

//// Используется в процедурах ОбновитьСоставыГруппПользователей,
//// ОбновитьСоставыГруппВнешнихПользователей.
////
//Процедура ОбновитьСоставГруппыВсеПользователи(Пользователь,
//											  ОбновитьГруппуВнешнихПользователей = Ложь,
//											  УчастникиИзменений = Неопределено)
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр(
//		"ГруппаВсеПользователи",
//		?(ОбновитьГруппуВнешнихПользователей,
//		  Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи,
//		  Справочники.ГруппыПользователей.ВсеПользователи) );
//	
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	Пользователи.Ссылка КАК Ссылка
//	|ПОМЕСТИТЬ Пользователи
//	|ИЗ
//	|	Справочник.Пользователи КАК Пользователи
//	|ГДЕ
//	|	&ОтборПользователя
//	|
//	|ИНДЕКСИРОВАТЬ ПО
//	|	Пользователи.Ссылка
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	&ГруппаВсеПользователи КАК ГруппаПользователей,
//	|	Пользователи.Ссылка КАК Пользователь
//	|ИЗ
//	|	Пользователи КАК Пользователи
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
//	|		ПО (СоставыГруппПользователей.ГруппаПользователей = &ГруппаВсеПользователи)
//	|			И (СоставыГруппПользователей.Пользователь = Пользователи.Ссылка)
//	|ГДЕ
//	|	СоставыГруппПользователей.Пользователь ЕСТЬ NULL 
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	Пользователи.Ссылка,
//	|	Пользователи.Ссылка
//	|ИЗ
//	|	Пользователи КАК Пользователи
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
//	|		ПО (СоставыГруппПользователей.ГруппаПользователей = Пользователи.Ссылка)
//	|			И (СоставыГруппПользователей.Пользователь = Пользователи.Ссылка)
//	|ГДЕ
//	|	СоставыГруппПользователей.Пользователь ЕСТЬ NULL ";
//	
//	Если ОбновитьГруппуВнешнихПользователей Тогда
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Пользователи", "Справочник.ВнешниеПользователи");
//	КонецЕсли;
//	
//	Если Пользователь = Неопределено Тогда
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПользователя", "ИСТИНА");
//	Иначе
//		Запрос.УстановитьПараметр("Пользователь", Пользователь);
//		Запрос.Текст = СтрЗаменить(
//			Запрос.Текст, "&ОтборПользователя", "Пользователи.Ссылка В (&Пользователь)");
//	КонецЕсли;
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		НаборЗаписей = РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
//		Запись = НаборЗаписей.Добавить();
//		Выборка = РезультатЗапроса.Выбрать();
//		
//		Пока Выборка.Следующий() Цикл
//			НаборЗаписей.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
//			НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
//			ЗаполнитьЗначенияСвойств(Запись, Выборка);
//			НаборЗаписей.Записать(); // Добавление недостающих записей о связях.
//			Если УчастникиИзменений <> Неопределено Тогда
//				УчастникиИзменений.Вставить(Выборка.Пользователь);
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	
//КонецПроцедуры

//// Используется в процедуре ОбновитьСоставыГруппВнешнихПользователей.
//Процедура ОбновитьСоставыГруппПоТипамОбъектовАвторизации(ГруппаВнешнихПользователей = Неопределено,
//														 ВнешнийПользователь,
//														 УчастникиИзменений = Неопределено)
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	Группы.Ссылка КАК Ссылка,
//	|	Группы.ТипОбъектовАвторизации
//	|ПОМЕСТИТЬ Группы
//	|ИЗ
//	|	Справочник.ГруппыВнешнихПользователей КАК Группы
//	|ГДЕ
//	|	Группы.ВсеОбъектыАвторизации = ИСТИНА
//	|	И &ОтборГрупп
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	Группы.Ссылка КАК ГруппаПользователей,
//	|	ВнешниеПользователи.Ссылка КАК Пользователь
//	|ИЗ
//	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Группы КАК Группы
//	|		ПО (ТИПЗНАЧЕНИЯ(ВнешниеПользователи.ОбъектАвторизации) = ТИПЗНАЧЕНИЯ(Группы.ТипОбъектовАвторизации))
//	|			И (&ОтборВнешнегоПользователя)
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
//	|		ПО (СоставыГруппПользователей.ГруппаПользователей = Группы.Ссылка)
//	|			И (СоставыГруппПользователей.Пользователь = ВнешниеПользователи.Ссылка)
//	|ГДЕ
//	|	СоставыГруппПользователей.Пользователь ЕСТЬ NULL ";
//	
//	Если ГруппаВнешнихПользователей = Неопределено Тогда
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборГрупп", "ИСТИНА");
//	Иначе
//		Запрос.УстановитьПараметр("Группа", ГруппаВнешнихПользователей);
//		Запрос.Текст = СтрЗаменить(
//			Запрос.Текст, "&ОтборГрупп", "Группы.Ссылка В (&Группа)");
//	КонецЕсли;
//	
//	Если ВнешнийПользователь = Неопределено Тогда
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборВнешнегоПользователя", "ИСТИНА");
//	Иначе
//		Запрос.УстановитьПараметр("ВнешнийПользователь", ВнешнийПользователь);
//		Запрос.Текст = СтрЗаменить(
//			Запрос.Текст,
//			"&ОтборВнешнегоПользователя",
//			"ВнешниеПользователи.Ссылка В (&ВнешнийПользователь)");
//	КонецЕсли;
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		НаборЗаписей = РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
//		Запись = НаборЗаписей.Добавить();
//		Выборка = РезультатЗапроса.Выбрать();
//		
//		Пока Выборка.Следующий() Цикл
//			НаборЗаписей.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
//			НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
//			ЗаполнитьЗначенияСвойств(Запись, Выборка);
//			НаборЗаписей.Записать(); // Добавление недостающих записей о связях.
//			Если УчастникиИзменений <> Неопределено Тогда
//				УчастникиИзменений.Вставить(Выборка.Пользователь);
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	
//КонецПроцедуры

//// Используется в процедурах ОбновитьСоставыГруппПользователей,
//// ОбновитьСоставыГруппВнешнихПользователей.
////
//Процедура ОбновитьСоставыИерархическихГруппПользователей(ГруппаПользователей,
//														 Пользователь,
//														 УчастникиИзменений = Неопределено)
//	
//	ОбновитьГруппыВнешнихПользователей =
//		ТипЗнч(ГруппаПользователей) <> Тип("СправочникСсылка.ГруппыПользователей");
//	
//	// Подготовка групп пользователей в иерархии их родителей.
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	СсылкиВИерархииРодителей.Родитель,
//	|	СсылкиВИерархииРодителей.Ссылка
//	|ПОМЕСТИТЬ СсылкиВИерархииРодителей
//	|ИЗ
//	|	&СсылкиВИерархииРодителей КАК СсылкиВИерархииРодителей";
//	
//	Запрос.УстановитьПараметр("СсылкиВИерархииРодителей", СсылкиВИерархииРодителей(
//		?(ОбновитьГруппыВнешнихПользователей,
//		  "Справочник.ГруппыВнешнихПользователей",
//		  "Справочник.ГруппыПользователей") ));
//	
//	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
//	Запрос.Выполнить();
//	
//	// Подготовка запроса для цикла.
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	СоставыГруппПользователей.Пользователь
//	|ПОМЕСТИТЬ СоставыГруппПользователей
//	|ИЗ
//	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
//	|ГДЕ
//	|	&ОтборПользователяВРегистре
//	|	И СоставыГруппПользователей.ГруппаПользователей = &ГруппаПользователей
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	СоставыГруппПользователей.Пользователь
//	|ИЗ
//	|	СоставыГруппПользователей КАК СоставыГруппПользователей
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
//	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СсылкиВИерархииРодителей КАК СсылкиВИерархииРодителей
//	|			ПО (СсылкиВИерархииРодителей.Ссылка = ГруппыПользователейСостав.Ссылка)
//	|				И (СсылкиВИерархииРодителей.Родитель = &ГруппаПользователей)
//	|				И (&ОтборПользователяВСправочнике)
//	|		ПО СоставыГруппПользователей.Пользователь = ГруппыПользователейСостав.Пользователь
//	|ГДЕ
//	|	ГруппыПользователейСостав.Ссылка ЕСТЬ NULL 
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	&ГруппаПользователей КАК ГруппаПользователей,
//	|	ГруппыПользователейСостав.Пользователь КАК Пользователь
//	|ИЗ
//	|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СсылкиВИерархииРодителей КАК СсылкиВИерархииРодителей
//	|		ПО (СсылкиВИерархииРодителей.Ссылка = ГруппыПользователейСостав.Ссылка)
//	|			И (СсылкиВИерархииРодителей.Родитель = &ГруппаПользователей)
//	|			И (&ОтборПользователяВСправочнике)
//	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставыГруппПользователей КАК СоставыГруппПользователей
//	|		ПО (СоставыГруппПользователей.Пользователь = ГруппыПользователейСостав.Пользователь)
//	|ГДЕ
//	|	СоставыГруппПользователей.Пользователь ЕСТЬ NULL 
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ГруппыПользователей.Родитель КАК Родитель
//	|ИЗ
//	|	Справочник.ГруппыПользователей КАК ГруппыПользователей
//	|ГДЕ
//	|	ГруппыПользователей.Ссылка = &ГруппаПользователей
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ СоставыГруппПользователей";
//	
//	Если Пользователь = Неопределено Тогда
//		ОтборПользователяВРегистре    = "ИСТИНА";
//		ОтборПользователяВСправочнике = "ИСТИНА";
//	Иначе
//		Запрос.УстановитьПараметр("Пользователь", Пользователь);
//		ОтборПользователяВРегистре    = "СоставыГруппПользователей.Пользователь В (&Пользователь)";
//		ОтборПользователяВСправочнике = "ГруппыПользователейСостав.Пользователь В (&Пользователь)";
//	КонецЕсли;
//	
//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПользователяВРегистре",    ОтборПользователяВРегистре);
//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПользователяВСправочнике", ОтборПользователяВСправочнике);
//	
//	Если ОбновитьГруппыВнешнихПользователей Тогда
//		
//		Запрос.Текст = СтрЗаменить(
//			Запрос.Текст,
//			"Справочник.ГруппыПользователей",
//			"Справочник.ГруппыВнешнихПользователей");
//		
//		Запрос.Текст = СтрЗаменить(
//			Запрос.Текст,
//			"ГруппыПользователейСостав.Пользователь",
//			"ГруппыПользователейСостав.ВнешнийПользователь");
//	КонецЕсли;
//	
//	// Выполнение для текущий группы пользователей и каждой группы-родителя.
//	Пока ЗначениеЗаполнено(ГруппаПользователей) Цикл
//		
//		Запрос.УстановитьПараметр("ГруппаПользователей", ГруппаПользователей);
//		
//		РезультатыЗапроса = Запрос.ВыполнитьПакет();
//		
//		Если НЕ РезультатыЗапроса[1].Пустой() Тогда
//			НаборЗаписей = РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
//			Выборка = РезультатыЗапроса[1].Выбрать();
//			
//			Пока Выборка.Следующий() Цикл
//				НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
//				НаборЗаписей.Отбор.ГруппаПользователей.Установить(ГруппаПользователей);
//				НаборЗаписей.Записать(); // Удаление лишних записей о связях.
//				Если УчастникиИзменений <> Неопределено Тогда
//					УчастникиИзменений.Вставить(Выборка.Пользователь);
//				КонецЕсли;
//			КонецЦикла;
//		КонецЕсли;
//		
//		Если НЕ РезультатыЗапроса[2].Пустой() Тогда
//			НаборЗаписей = РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
//			Запись = НаборЗаписей.Добавить();
//			Выборка = РезультатыЗапроса[2].Выбрать();
//			
//			Пока Выборка.Следующий() Цикл
//				НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
//				НаборЗаписей.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
//				ЗаполнитьЗначенияСвойств(Запись, Выборка);
//				НаборЗаписей.Записать(); // Добавление недостающих записей о связях.
//				Если УчастникиИзменений <> Неопределено Тогда
//					УчастникиИзменений.Вставить(Выборка.Пользователь);
//				КонецЕсли;
//			КонецЦикла;
//		КонецЕсли;
//		
//		Если НЕ РезультатыЗапроса[3].Пустой() Тогда
//			Выборка = РезультатыЗапроса[3].Выбрать();
//			Выборка.Следующий();
//			ГруппаПользователей = Выборка.Родитель;
//		Иначе
//			ГруппаПользователей = Неопределено;
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецПроцедуры

//// Проверяет права указанного Пользователя ИБ в режиме разделения данных.
////
//// Параметры:
////  ПользовательИБ - ПользовательИнформационнойБазы.
////
//Процедура ПроверитьПраваПользователя(ПользовательИБ)
//	
//	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
//		
//		Если ПользовательИБ.РазделениеДанных.Количество() > 0 Тогда
//			
//			НедоступныеПрава = ПользователиСлужебныйПовтИсп.НедоступныеПраваПоТипуПользователя(
//				Перечисления.ТипыПользователей.ПользовательОбластиДанных);
//				
//			НедоступнаяРоль = Неопределено;
//			
//			Для каждого Роль Из ПользовательИБ.Роли Цикл
//				
//				ДоступныеДляИзмененияОбщиеДанные =
//					ПользователиСлужебныйПовтИсп.ОбщиеДанныеДоступныеДляИзменения(Роль.Имя);
//				
//				Если ДоступныеДляИзмененияОбщиеДанные.Количество() > 0 Тогда
//					НедоступнаяРоль = Роль;
//					
//					Запись = Новый ЗаписьXML;
//					Запись.УстановитьСтроку();
//					СериализаторXDTO.ЗаписатьXML(Запись, ДоступныеДляИзмененияОбщиеДанные);
//					ТаблицаСтрокой = Запись.Закрыть();
//					
//					ЗаписьЖурналаРегистрации(
//						НСтр("ru = 'Пользователи.Запись'"),
//						УровеньЖурналаРегистрации.Ошибка,
//						,
//						ПользовательИБ,
//						НСтр("ru = 'Разделенному пользователю назначена роль,
//								   |предоставляющая права на изменение общих данных:
//								   |'") + ТаблицаСтрокой);
//				КонецЕсли;
//					
//				Для каждого Право Из НедоступныеПрава Цикл
//					
//					Если ПравоДоступа(Право, Метаданные, Роль) Тогда
//						НедоступнаяРоль = Роль;
//						
//						ШаблонСообщения = НСтр("ru = 'Разделенному пользователю назначена роль,
//													 |предоставляющая право ""%1"".'");
//						
//						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//							ШаблонСообщения,
//							Право);
//						
//						ЗаписьЖурналаРегистрации(
//							НСтр("ru = 'Пользователи.Запись'"),
//							УровеньЖурналаРегистрации.Ошибка,
//							,
//							ПользовательИБ,
//							ТекстСообщения);
//					КонецЕсли;
//				КонецЦикла;
//			КонецЦикла;
//			
//			Если НедоступнаяРоль <> Неопределено Тогда
//				
//				ШаблонСообщения = НСтр("ru = 'Разделенным пользователям не может быть назначена
//											 |роль ""%1"".'");
//				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//					ШаблонСообщения,
//					НедоступнаяРоль.Представление());
//			КонецЕсли;
//			
//		КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры

//// Возвращает текущий уровень доступа на изменение свойств пользователя.
//// 
//// Возвращаемое значение:
//// Строка.
//// Возможные значения:
////  "ПолныйДоступ"      - любое изменение свойств пользователя.
////  "УправлениеСписком" - управление списком пользователей, без возможности
////                        изменения прав.
////  "ИзменениеТекущего" - изменение свойств текущего пользователя "Имя",
////                        "Пароль" и "Язык".
////  "НетДоступа"        - права на изменение пользователей отсутствуют.
////
//Функция ПолучитьУровеньДоступаНаИзменениеСвойствПользователяИБ()
//	
//	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
//		Возврат "ПолныйДоступ";
//		
//	ИначеЕсли РольДоступна(Метаданные.Роли.ДобавлениеИзменениеПользователей) Тогда
//		Возврат "УправлениеСписком";
//		
//	ИначеЕсли РольДоступна(Метаданные.Роли.ИзменениеТекущегоПользователя) Тогда
//		Возврат "ИзменениеТекущего";
//	Иначе
//		Возврат "НетДоступа";
//	КонецЕсли;
//	
//КонецФункции

//Функция ТекстИсключенияЗаписьНеразделенныхПользователейЗапрещена()
//	
//	Возврат
//		НСтр("ru = 'Запись неразделенных пользователей
//				   |при включенном использовании разделителей запрещена.'");
//КонецФункции

//Функция СписокНастроек(ИмяПользователяИБ, МенеджерНастроек)
//	
//	ТаблицаНастроек = Новый ТаблицаЗначений;
//	ТаблицаНастроек.Колонки.Добавить("КлючОбъекта");
//	ТаблицаНастроек.Колонки.Добавить("КлючНастроек");
//	
//	Отбор = Новый Структура;
//	Отбор.Вставить("Пользователь", ИмяПользователяИБ);
//	
//	ВыборкаНастроек = МенеджерНастроек.Выбрать(Отбор);
//	Пропустить = Ложь;
//	Пока СледующаяНастройка(ВыборкаНастроек, Пропустить) Цикл
//		
//		Если Пропустить Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		НоваяСтрока = ТаблицаНастроек.Добавить();
//		НоваяСтрока.КлючОбъекта = ВыборкаНастроек.КлючОбъекта;
//		НоваяСтрока.КлючНастроек = ВыборкаНастроек.КлючНастроек;
//	КонецЦикла;
//	
//	Возврат ТаблицаНастроек;
//	
//КонецФункции

//Функция СледующаяНастройка(ВыборкаНастроек, Пропустить) 
//	
//	Попытка 
//		Пропустить = Ложь;
//		Возврат ВыборкаНастроек.Следующий();
//	Исключение
//		Пропустить = Истина;
//		Возврат Истина;
//	КонецПопытки;
//	
//КонецФункции

//Процедура СкопироватьНастройки(МенеджерНастроек, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить)
//	
//	ТаблицаНастроек = СписокНастроек(ИмяПользователяИсточник, МенеджерНастроек);
//	
//	Для Каждого Настройка Из ТаблицаНастроек Цикл
//		КлючОбъекта = Настройка.КлючОбъекта;
//		КлючНастроек = Настройка.КлючНастроек;
//		Значение = МенеджерНастроек.Загрузить(КлючОбъекта, КлючНастроек, , ИмяПользователяИсточник);
//		ОписаниеНастроек = МенеджерНастроек.ПолучитьОписание(КлючОбъекта, КлючНастроек, ИмяПользователяИсточник);
//		МенеджерНастроек.Сохранить(КлючОбъекта, КлючНастроек, Значение,
//			ОписаниеНастроек, ИмяПользователяПриемник);
//		Если Переносить Тогда
//			МенеджерНастроек.Удалить(КлючОбъекта, КлючНастроек, ИмяПользователяИсточник);
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// Для процедуры ОбработатьИнтерфейсРолей

//Процедура ЗаполнитьРоли(Параметры)
//	
//	ПрочитанныеРоли = Параметры.ОсновнойПараметр;
//	КоллекцияРолей  = Параметры.КоллекцияРолей;
//	
//	КоллекцияРолей.Очистить();
//	
//	Для каждого Роль Из ПрочитанныеРоли Цикл
//		КоллекцияРолей.Добавить().Роль = Роль;
//	КонецЦикла;
//	
//	ОбновитьДеревоРолей(Параметры);
//	
//КонецПроцедуры

//Процедура НастроитьИнтерфейсРолейПриСозданииФормы(Параметры)
//	
//	Форма    = Параметры.Форма;
//	Элементы = Форма.Элементы;
//	
//	// Установка начальных значений перед загрузкой данных из настроек на сервере
//	// для случая, когда данные ещё не были записаны и не загружаются.
//	ПоказатьПодсистемыРолей = Истина;
//	Элементы.РолиПоказатьПодсистемыРолей.Пометка = Истина;
//	
//	// Для нового элемента показать все роли, для существующего - только выбранные роли.
//	Если Элементы.Найти("РолиПоказатьТолькоВыбранныеРоли") <> Неопределено Тогда
//		Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка = Параметры.ОсновнойПараметр;
//	КонецЕсли;
//	
//	ОбновитьДеревоРолей(Параметры);
//	
//КонецПроцедуры

//Процедура НастроитьИнтерфейсРолейПриЗагрузкеНастроек(Параметры)
//	
//	Настройки = Параметры.ОсновнойПараметр;
//	Форма     = Параметры.Форма;
//	Элементы  = Форма.Элементы;
//	
//	ПоказатьПодсистемыРолей = Форма.ПоказатьПодсистемыРолей;
//	
//	Если Настройки["ПоказатьПодсистемыРолей"] = Ложь Тогда
//		Форма.ПоказатьПодсистемыРолей = Ложь;
//		Элементы.РолиПоказатьПодсистемыРолей.Пометка = Ложь;
//	Иначе
//		Форма.ПоказатьПодсистемыРолей = Истина;
//		Элементы.РолиПоказатьПодсистемыРолей.Пометка = Истина;
//	КонецЕсли;
//	
//	Если ПоказатьПодсистемыРолей <> Форма.ПоказатьПодсистемыРолей Тогда
//		ОбновитьДеревоРолей(Параметры);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура УстановитьТолькоПросмотрРолей(Параметры)
//	
//	Элементы               = Параметры.Форма.Элементы;
//	ТолькоПросмотрРолей    = Параметры.ОсновнойПараметр;
//	
//	Если Параметры.Свойство("ДополнительныйПараметр")
//	   И ТипЗнч(Параметры.ДополнительныйПараметр) = Тип("Булево") Тогда
//		
//		РазрешитьПросмотрТолькоВыбранных = Параметры.ДополнительныйПараметр;
//	Иначе
//		РазрешитьПросмотрТолькоВыбранных = Ложь;
//	КонецЕсли;
//	
//	Если ТолькоПросмотрРолей <> Неопределено Тогда
//		
//		Элементы.Роли.ТолькоПросмотр              =    ТолькоПросмотрРолей;
//		
//		Если Элементы.Найти("РолиУстановитьФлажки") <> Неопределено Тогда
//			Элементы.РолиУстановитьФлажки.Доступность = НЕ ТолькоПросмотрРолей;
//		КонецЕсли;
//		Если Элементы.Найти("РолиСнятьФлажки") <> Неопределено Тогда
//			Элементы.РолиСнятьФлажки.Доступность = НЕ ТолькоПросмотрРолей;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если РазрешитьПросмотрТолькоВыбранных Тогда
//		Если Элементы.Найти("РолиПоказатьТолькоВыбранныеРоли") <> Неопределено Тогда
//			Элементы.РолиПоказатьТолькоВыбранныеРоли.Доступность = Ложь;
//		КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ТолькоВыбранныеРоли(Параметры)
//	
//	Параметры.Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка =
//		НЕ Параметры.Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
//	
//	ОбновитьДеревоРолей(Параметры);
//	
//КонецПроцедуры

//Процедура ГруппировкаПоПодсистемам(Параметры)
//	
//	Параметры.Форма.ПоказатьПодсистемыРолей = НЕ Параметры.Форма.ПоказатьПодсистемыРолей;
//	Параметры.Форма.Элементы.РолиПоказатьПодсистемыРолей.Пометка = Параметры.Форма.ПоказатьПодсистемыРолей;
//	
//	ОбновитьДеревоРолей(Параметры);
//	
//КонецПроцедуры

//Процедура ОбновитьДеревоРолей(Параметры)
//	
//	Форма           = Параметры.Форма;
//	Элементы        = Форма.Элементы;
//	Роли            = Форма.Роли;
//	ТипПользователя = Параметры.ТипПользователя;
//	КоллекцияРолей  = Параметры.КоллекцияРолей;
//	
//	СкрытьРольПолныеПрава = Параметры.Свойство("СкрытьРольПолныеПрава")
//						  И Параметры.СкрытьРольПолныеПрава = Истина;
//	
//	Если Элементы.Найти("РолиПоказатьТолькоВыбранныеРоли") <> Неопределено Тогда
//		Если НЕ Элементы.РолиПоказатьТолькоВыбранныеРоли.Доступность Тогда
//			Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка = Истина;
//		КонецЕсли;
//		ПоказатьТолькоВыбранныеРоли = Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
//	Иначе
//		ПоказатьТолькоВыбранныеРоли = Истина;
//	КонецЕсли;
//	
//	ПоказатьПодсистемыРолей     = Параметры.Форма.ПоказатьПодсистемыРолей;
//	
//	// Запоминание текущей строки.
//	ТекущаяПодсистема = "";
//	ТекущаяРоль       = "";
//	
//	Если Элементы.Роли.ТекущаяСтрока <> Неопределено Тогда
//		ТекущиеДанные = Роли.НайтиПоИдентификатору(Элементы.Роли.ТекущаяСтрока);
//		Если ТекущиеДанные.ЭтоРоль Тогда
//			ТекущаяПодсистема = ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, "", ТекущиеДанные.ПолучитьРодителя().Имя);
//			ТекущаяРоль       = ТекущиеДанные.Имя;
//		Иначе
//			ТекущаяПодсистема = ТекущиеДанные.Имя;
//			ТекущаяРоль       = "";
//		КонецЕсли;
//	КонецЕсли;
//	
//	ДеревоРолей = ПользователиСлужебныйПовтИсп.ДеревоРолей(
//		ПоказатьПодсистемыРолей, ТипПользователя).Скопировать();
//	
//	ДобавитьИменаНесуществующихРолей(Параметры, ДеревоРолей);
//	
//	ДеревоРолей.Колонки.Добавить("Пометка",       Новый ОписаниеТипов("Булево"));
//	ДеревоРолей.Колонки.Добавить("НомерКартинки", Новый ОписаниеТипов("Число"));
//	ПодготовитьДеревоРолей(ДеревоРолей.Строки, СкрытьРольПолныеПрава, ПоказатьТолькоВыбранныеРоли, Параметры.КоллекцияРолей);
//	
//	Параметры.Форма.ЗначениеВРеквизитФормы(ДеревоРолей, "Роли");
//	
//	Элементы.Роли.Отображение = ?(ДеревоРолей.Строки.Найти(Ложь, "ЭтоРоль") = Неопределено, ОтображениеТаблицы.Список, ОтображениеТаблицы.Дерево);
//	
//	// Восстановление текущей строки
//	НайденныеСтроки = ДеревоРолей.Строки.НайтиСтроки(Новый Структура("ЭтоРоль, Имя", Ложь, ТекущаяПодсистема), Истина);
//	Если НайденныеСтроки.Количество() <> 0 Тогда
//		ОписаниеПодсистемы = НайденныеСтроки[0];
//		ИндексПодсистемы = ?(ОписаниеПодсистемы.Родитель = Неопределено, ДеревоРолей.Строки, ОписаниеПодсистемы.Родитель.Строки).Индекс(ОписаниеПодсистемы);
//		СтрокаПодсистемы = ДанныеФормыКоллекцияЭлементовДерева(Роли, ОписаниеПодсистемы).Получить(ИндексПодсистемы);
//		Если ЗначениеЗаполнено(ТекущаяРоль) Тогда
//			НайденныеСтроки = ОписаниеПодсистемы.Строки.НайтиСтроки(Новый Структура("ЭтоРоль, Имя", Истина, ТекущаяРоль));
//			Если НайденныеСтроки.Количество() <> 0 Тогда
//				ОписаниеРоли = НайденныеСтроки[0];
//				Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьЭлементы().Получить(ОписаниеПодсистемы.Строки.Индекс(ОписаниеРоли)).ПолучитьИдентификатор();
//			Иначе
//				Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьИдентификатор();
//			КонецЕсли;
//		Иначе
//			Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьИдентификатор();
//		КонецЕсли;
//	Иначе
//		НайденныеСтроки = ДеревоРолей.Строки.НайтиСтроки(Новый Структура("ЭтоРоль, Имя", Истина, ТекущаяРоль), Истина);
//		Если НайденныеСтроки.Количество() <> 0 Тогда
//			ОписаниеРоли = НайденныеСтроки[0];
//			ИндексРоли = ?(ОписаниеРоли.Родитель = Неопределено, ДеревоРолей.Строки, ОписаниеРоли.Родитель.Строки).Индекс(ОписаниеРоли);
//			СтрокаРоли = ДанныеФормыКоллекцияЭлементовДерева(Роли, ОписаниеРоли).Получить(ИндексРоли);
//			Элементы.Роли.ТекущаяСтрока = СтрокаРоли.ПолучитьИдентификатор();
//		КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДобавитьИменаНесуществующихРолей(Параметры, ДеревоРолей)
//	
//	КоллекцияРолей  = Параметры.КоллекцияРолей;
//	
//	// Добавление несуществующих ролей.
//	Для каждого Строка Из КоллекцияРолей Цикл
//		Отбор = Новый Структура("ЭтоРоль, Имя", Истина, Строка.Роль);
//		Если ДеревоРолей.Строки.НайтиСтроки(Отбор, Истина).Количество() = 0 Тогда
//			СтрокаДерева = ДеревоРолей.Строки.Вставить(0);
//			СтрокаДерева.ЭтоРоль       = Истина;
//			СтрокаДерева.Имя           = Строка.Роль;
//			СтрокаДерева.Синоним       = "? " + Строка.Роль;
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ПодготовитьДеревоРолей(Знач Коллекция, Знач СкрытьРольПолныеПрава, Знач ПоказатьТолькоВыбранныеРоли, КоллекцияРолей)
//	
//	Индекс = Коллекция.Количество()-1;
//	
//	Пока Индекс >= 0 Цикл
//		Строка = Коллекция[Индекс];
//		
//		ПодготовитьДеревоРолей(Строка.Строки, СкрытьРольПолныеПрава, ПоказатьТолькоВыбранныеРоли, КоллекцияРолей);
//		
//		Если Строка.ЭтоРоль Тогда
//			Если СкрытьРольПолныеПрава И 
//				(ВРег(Строка.Имя) = ВРег("ПолныеПрава") ИЛИ ВРег(Строка.Имя) = ВРег("АдминистраторСистемы")) Тогда
//				Коллекция.Удалить(Индекс);
//			Иначе
//				Строка.НомерКартинки = 6;
//				Строка.Пометка = КоллекцияРолей.НайтиСтроки(Новый Структура("Роль", Строка.Имя)).Количество() > 0;
//				Если ПоказатьТолькоВыбранныеРоли И НЕ Строка.Пометка Тогда
//					Коллекция.Удалить(Индекс);
//				КонецЕсли;
//			КонецЕсли;
//		Иначе
//			Если Строка.Строки.Количество() = 0 Тогда
//				Коллекция.Удалить(Индекс);
//			Иначе
//				Строка.НомерКартинки = 5;
//				Строка.Пометка = Строка.Строки.НайтиСтроки(Новый Структура("Пометка", Ложь)).Количество() = 0;
//			КонецЕсли;
//		КонецЕсли;
//		
//		Индекс = Индекс-1;
//	КонецЦикла;
//	
//КонецПроцедуры

//Функция ДанныеФормыКоллекцияЭлементовДерева(Знач ДанныеФормыДерево, Знач СтрокаДереваЗначений)
//	
//	Если СтрокаДереваЗначений.Родитель = Неопределено Тогда
//		ДанныеФормыКоллекцияЭлементовДерева = ДанныеФормыДерево.ПолучитьЭлементы();
//	Иначе
//		ИндексРодителя = ?(СтрокаДереваЗначений.Родитель.Родитель = Неопределено, СтрокаДереваЗначений.Владелец().Строки, СтрокаДереваЗначений.Родитель.Родитель.Строки).Индекс(СтрокаДереваЗначений.Родитель);
//		ДанныеФормыКоллекцияЭлементовДерева = ДанныеФормыКоллекцияЭлементовДерева(ДанныеФормыДерево, СтрокаДереваЗначений.Родитель).Получить(ИндексРодителя).ПолучитьЭлементы();
//	КонецЕсли;
//	
//	Возврат ДанныеФормыКоллекцияЭлементовДерева;
//	
//КонецФункции

//Процедура ОбновитьСоставРолей(Параметры)
//	
//	Роли                        = Параметры.Форма.Роли;
//	ПоказатьТолькоВыбранныеРоли = Параметры.Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
//	ТипПользователя             = Параметры.ТипПользователя;
//	
//	Если Параметры.ОсновнойПараметр = "ВключитьВсе" Тогда
//		ИдентификаторСтроки = Неопределено;
//		Добавить            = Истина;
//		
//	ИначеЕсли Параметры.ОсновнойПараметр = "ИсключитьВсе" Тогда
//		ИдентификаторСтроки = Неопределено;
//		Добавить            = Ложь;
//	Иначе
//		ИдентификаторСтроки = Параметры.Форма.Элементы.Роли.ТекущаяСтрока;
//	КонецЕсли;
//	
//	Если ИдентификаторСтроки = Неопределено Тогда
//		// Обработка всех
//		КоллекцияРолей = Параметры.КоллекцияРолей;
//		КоллекцияРолей.Очистить();
//		Если Добавить Тогда
//			ДоступныеРоли = ПользователиСлужебныйПовтИсп.ДоступныеРоли(ТипПользователя);
//			Для каждого ОписаниеРоли Из ДоступныеРоли Цикл
//				
//				Если ОписаниеРоли.Имя <> "ПолныеПрава"
//				   И ОписаниеРоли.Имя <> "АдминистраторСистемы" Тогда
//					
//					КоллекцияРолей.Добавить().Роль = ОписаниеРоли.Имя;
//				КонецЕсли;
//			КонецЦикла;
//		КонецЕсли;
//		Если ПоказатьТолькоВыбранныеРоли Тогда
//			Если КоллекцияРолей.Количество() > 0 Тогда
//				ОбновитьДеревоРолей(Параметры);
//			Иначе
//				Роли.ПолучитьЭлементы().Очистить();
//			КонецЕсли;
//			// Возврат
//			Возврат;
//			// Возврат
//		КонецЕсли;
//	Иначе
//		ТекущиеДанные = Роли.НайтиПоИдентификатору(ИдентификаторСтроки);
//		Если ТекущиеДанные.ЭтоРоль Тогда
//			ДобавитьУдалитьРоль(Параметры, ТекущиеДанные.Имя, ТекущиеДанные.Пометка);
//		Иначе
//			ДобавитьУдалитьРолиПодсистемы(Параметры, ТекущиеДанные.ПолучитьЭлементы(), ТекущиеДанные.Пометка);
//		КонецЕсли;
//	КонецЕсли;
//	
//	ОбновитьПометкуВыбранныхРолей(Параметры, Роли.ПолучитьЭлементы());
//	
//	Модифицированность = Истина;
//	
//КонецПроцедуры

//Процедура ДобавитьУдалитьРоль(Параметры, Знач Роль, Знач Добавить)
//	
//	НайденныеРоли = Параметры.КоллекцияРолей.НайтиСтроки(Новый Структура("Роль", Роль));
//	
//	Если Добавить Тогда
//		Если НайденныеРоли.Количество() = 0 Тогда
//			Параметры.КоллекцияРолей.Добавить().Роль = Роль;
//		КонецЕсли;
//	Иначе
//		Если НайденныеРоли.Количество() > 0 Тогда
//			Параметры.КоллекцияРолей.Удалить(НайденныеРоли[0]);
//		КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДобавитьУдалитьРолиПодсистемы(Параметры, Знач Коллекция, Знач Добавить)
//	
//	Для каждого Строка Из Коллекция Цикл
//		Если Строка.ЭтоРоль Тогда
//			ДобавитьУдалитьРоль(Параметры, Строка.Имя, Добавить);
//		Иначе
//			ДобавитьУдалитьРолиПодсистемы(Параметры, Строка.ПолучитьЭлементы(), Добавить);
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ОбновитьПометкуВыбранныхРолей(Параметры, Знач Коллекция)
//	
//	ПоказатьТолькоВыбранныеРоли = Параметры.Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
//	
//	Индекс = Коллекция.Количество()-1;
//	
//	Пока Индекс >= 0 Цикл
//		Строка = Коллекция[Индекс];
//		
//		Если Строка.ЭтоРоль Тогда
//			Строка.Пометка = Параметры.КоллекцияРолей.НайтиСтроки(Новый Структура("Роль", Строка.Имя)).Количество() > 0;
//			Если ПоказатьТолькоВыбранныеРоли И НЕ Строка.Пометка Тогда
//				Коллекция.Удалить(Индекс);
//			КонецЕсли;
//		Иначе
//			ОбновитьПометкуВыбранныхРолей(Параметры, Строка.ПолучитьЭлементы());
//			Если Строка.ПолучитьЭлементы().Количество() = 0 Тогда
//				Коллекция.Удалить(Индекс);
//			Иначе
//				Строка.Пометка = Истина;
//				Для каждого Элемент Из Строка.ПолучитьЭлементы() Цикл
//					Если НЕ Элемент.Пометка Тогда
//						Строка.Пометка = Ложь;
//						Прервать;
//					КонецЕсли;
//				КонецЦикла;
//			КонецЕсли;
//		КонецЕсли;
//		
//		Индекс = Индекс-1;
//	КонецЦикла;
//	
//КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// Обновление информационной базы

//// Вызывается при обновлении конфигурации на версию 1.0.5.2
//// Выполняет попытку сопоставления / заполнения реквизита "ИдентификаторПользователяИБ"
//// для каждого элемента справочника Пользователи.
////
//Процедура ЗаполнитьИдентификаторыПользователей() Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Пользователи.НайтиНеоднозначныхПользователейИБ();
//	
//	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
//	
//	Запрос = Новый Запрос;
//	
//	Запрос.УстановитьПараметр("ПустойИдентификатор",
//		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") );
//	
//	Запрос.УстановитьПараметр("НеуказанныйПользователь",
//		СвойстваНеуказанногоПользователя().Ссылка);
//	
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	Пользователи.ИдентификаторПользователяИБ
//	|ИЗ
//	|	Справочник.Пользователи КАК Пользователи
//	|
//	|ОБЪЕДИНИТЬ
//	|
//	|ВЫБРАТЬ
//	|	ВнешниеПользователи.ИдентификаторПользователяИБ
//	|ИЗ
//	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	Пользователи.Ссылка КАК Ссылка,
//	|	Пользователи.Наименование КАК Наименование
//	|ИЗ
//	|	Справочник.Пользователи КАК Пользователи
//	|ГДЕ
//	|	Пользователи.Ссылка <> &НеуказанныйПользователь
//	|	И Пользователи.ИдентификаторПользователяИБ = &ПустойИдентификатор";
//	
//	РезультатыЗапроса = Запрос.ВыполнитьПакет();
//	
//	Если РезультатыЗапроса[1].Пустой() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ЗанятыеИдентификаторы = РезультатыЗапроса[0].Выгрузить();
//	ЗанятыеИдентификаторы.Индексы.Добавить("ИдентификаторПользователяИБ");
//	
//	ДлинаПолногоИмени = Метаданные.Справочники.Пользователи.ДлинаНаименования;
//	СвободныеПользователи = РезультатыЗапроса[1].Выгрузить();
//	СвободныеПользователи.Индексы.Добавить("Наименование");
//	
//	Для каждого Строка Из СвободныеПользователи Цикл
//		Строка.Наименование = ВРег(СокрЛП(Строка.Наименование));
//	КонецЦикла;
//	
//	Для каждого ПользовательИБ Из ПользователиИБ Цикл
//		
//		Если ЗанятыеИдентификаторы.Найти(
//			  ПользовательИБ.УникальныйИдентификатор,
//			  "ИдентификаторПользователяИБ") <> Неопределено Тогда
//			
//			Продолжить;
//		КонецЕсли;
//		
//		ПолноеИмяПользователя = ВРег(СокрЛП(Лев(ПользовательИБ.ПолноеИмя, ДлинаПолногоИмени)));
//		
//		ОписаниеПользователя = СвободныеПользователи.Найти(ПолноеИмяПользователя, "Наименование");
//		Если ОписаниеПользователя <> Неопределено Тогда
//			
//			ОбъектПользователь = ОписаниеПользователя.Ссылка.ПолучитьОбъект();
//			ОбъектПользователь.ОбменДанными.Загрузка = Истина;
//			ОбъектПользователь.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
//			ОбъектПользователь.Записать();
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецПроцедуры

//// Вызывается при обновлении конфигурации на версию 1.0.5.15
//// Возможен вызов с любой версии начиная с 1.0.5.15.
////
//Процедура ЗаполнениеРегистраСоставыГруппПользователей() Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	ОбновитьСоставыГруппПользователей(
//		Справочники.ГруппыПользователей.ВсеПользователи);
//	
//КонецПроцедуры

//// Вызывается при переходе на версию конфигурации 1.0.6.5
//// для обновления записей регистра сведений СоставыГруппПользователей.
////
//Процедура ЗаполнитьСоставыГруппВнешнихПользователей() Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	ОбновитьСоставыГруппВнешнихПользователей(
//		Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи);
//	
//КонецПроцедуры

//// Вызывается при переходе на версию конфигурации 1.0.6.5
//// создает пользователей ИБ из данных Справочник.ВнешниеПользователи
////
//Процедура ДляВнешнихПользователейСоздатьПользователейИБ() Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Выборка = Справочники.ВнешниеПользователи.Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		
//		Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторПользователяИБ) И
//				ЗначениеЗаполнено(Выборка.ОбъектАвторизации) И
//				ЗначениеЗаполнено(Выборка.Код) Тогда
//			
//			ВнешнийПользовательОбъект = Выборка.Ссылка.ПолучитьОбъект();
//			Попытка
//				ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
//				ПользовательИБ.Имя       = Выборка.Код;
//				ПользовательИБ.Пароль    = Выборка.УдалитьПароль;
//				ПользовательИБ.ПолноеИмя = Строка(Выборка.ОбъектАвторизации);
//				ПользовательИБ.Записать();
//				ВнешнийПользовательОбъект.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
//				ВнешнийПользовательОбъект.Записать();
//			Исключение
//				ЗаписьЖурналаРегистрации(НСтр("ru = 'Внешние пользователи.Ошибка при обновлении информационной базы'"),
//										 УровеньЖурналаРегистрации.Ошибка,
//										 ,
//										 ,
//										 СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//											  НСтр("ru= 'При создании пользователя информационной базы с именем ""%1"" для внешнего пользователя ""%2"" произошла ошибка:
//														|%3'"),
//											  Выборка.Код,
//											  Выборка.Наименование,
//											  ОписаниеОшибки()),
//										 РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
//			КонецПопытки;
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецПроцедуры

//// Вызывается при переходе на версию конфигурации 2.1.1.10
//Процедура ЗаполнитьФлажокСлужебный() Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	// Заполнение для пользователя <Не указан> и
//	// для неразделенных пользователей.
//	
//	НеуказанныеПользователи = Новый Массив;
//	НеуказанныеПользователи.Добавить(СвойстваНеуказанногоПользователя().Ссылка);
//	НеуказанныеПользователи.Добавить(СвойстваНеуказанногоПользователя().СтандартнаяСсылка);
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("НеуказанныеПользователи", НеуказанныеПользователи);
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	Пользователи.Ссылка
//	|ИЗ
//	|	Справочник.Пользователи КАК Пользователи
//	|ГДЕ
//	|	Пользователи.Ссылка В(&НеуказанныеПользователи)
//	|	И НЕ Пользователи.Служебный
//	|
//	|ОБЪЕДИНИТЬ
//	|
//	|ВЫБРАТЬ
//	|	Пользователи.Ссылка
//	|ИЗ
//	|	Справочник.Пользователи КАК Пользователи
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НеразделенныеПользователи КАК НеразделенныеПользователи
//	|		ПО Пользователи.ИдентификаторПользователяИБ = НеразделенныеПользователи.ИдентификаторПользователяИБ
//	|ГДЕ
//	|	НЕ Пользователи.Служебный";
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		ПользовательОбъект = Выборка.Ссылка.ПолучитьОбъект();
//		ПользовательОбъект.ОбменДанными.Загрузка = Истина;
//		ПользовательОбъект.Служебный = Истина;
//		ПользовательОбъект.Записать();
//	КонецЦикла;
//	
//КонецПроцедуры
