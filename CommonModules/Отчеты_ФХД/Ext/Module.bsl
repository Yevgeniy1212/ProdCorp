
Функция ПолучитьСохраненнуюНастройкуСчетовИсключаемыхИзРасчетаЗадолженности(Тип = 1) 
	
	Если Тип = 1 Тогда
		НастраиваемыйОбъект = "ОтчетыФХД.СчетаИсключаемыеИзРасчетаЗадолженностиПокупателей";
	ИначеЕсли Тип = 2 Тогда
		НастраиваемыйОбъект = "ОтчетыФХД.СчетаИсключаемыеИзРасчетаЗадолженностиПоставщикам";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Ссылка
	|ИЗ
	|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроек.ПроизвольныеНастройки)
	|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект
	|	И СохраненныеНастройки.Пользователи.Пользователь = &Пользователь
	|	И (НЕ СохраненныеНастройки.ПометкаУдаления)";
	Запрос.УстановитьПараметр("Пользователь"       , глЗначениеПеременной("глТекущийПользователь"));
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", НастраиваемыйОбъект);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0].Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСохраненнуюНастройкуСчетовДляРасчетаЗадолженности(Тип = 1) 
	
	Если Тип = 1 Тогда
		НастраиваемыйОбъект = "ОтчетыФХД.СчетаДляРасчетаЗадолженностиПокупателей";
	ИначеЕсли Тип = 2 Тогда
		НастраиваемыйОбъект = "ОтчетыФХД.СчетаДляРасчетаЗадолженностиПоставщикам";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Ссылка
	|ИЗ
	|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроек.ПроизвольныеНастройки)
	|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект
	|	И СохраненныеНастройки.Пользователи.Пользователь = &Пользователь
	|	И (НЕ СохраненныеНастройки.ПометкаУдаления)";
	Запрос.УстановитьПараметр("Пользователь"       , глЗначениеПеременной("глТекущийПользователь"));
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", НастраиваемыйОбъект);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0].Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Тип - определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик
Функция ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Тип = 1) Экспорт
	
	НастройкаСсылка = ПолучитьСохраненнуюНастройкуСчетовИсключаемыхИзРасчетаЗадолженности(Тип);
	
	Если НастройкаСсылка <> Неопределено Тогда
		Возврат НастройкаСсылка.ХранилищеНастроек.Получить();
	КонецЕсли;
	
КонецФункции

// Тип - определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик
Функция ПолучитьСписокСчетовДляРасчетаЗадолженности(Тип = 1) Экспорт
	
	НастройкаСсылка = ПолучитьСохраненнуюНастройкуСчетовДляРасчетаЗадолженности(Тип);
	
	Если НастройкаСсылка <> Неопределено Тогда
		Возврат НастройкаСсылка.ХранилищеНастроек.Получить();
	КонецЕсли;
	
КонецФункции

// Тип - определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик
Процедура СохранитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Тип = 1, СписокСчетов) Экспорт
	
	НастройкаСсылка = ПолучитьСохраненнуюНастройкуСчетовИсключаемыхИзРасчетаЗадолженности(Тип);
	
	Если Тип = 1 Тогда
		НастраиваемыйОбъект = "ОтчетыФХД.СчетаИсключаемыеИзРасчетаЗадолженностиПокупателей";
		Наименование        = "Счета исключаемые из расчета задолженности покупателей";
	ИначеЕсли Тип = 2 Тогда
		НастраиваемыйОбъект = "ОтчетыФХД.СчетаИсключаемыеИзРасчетаЗадолженностиПоставщикам";
		Наименование        = "Счета исключаемые из расчета задолженности поставщикам";
	КонецЕсли;
	
	Если НастройкаСсылка = Неопределено Тогда
		НастройкаОбъект = Справочники.СохраненныеНастройки.СоздатьЭлемент();
		НовыйПользователь = НастройкаОбъект.Пользователи.Добавить();
		НовыйПользователь.Пользователь = глЗначениеПеременной("глТекущийПользователь");
		//НастройкаОбъект.Владелец     = НовыйПользователь.Пользователь;
	Иначе
		НастройкаОбъект = НастройкаСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	НастройкаОбъект.НастраиваемыйОбъект = НастраиваемыйОбъект;
	НастройкаОбъект.ТипНастройки        = Перечисления.ТипыНастроек.ПроизвольныеНастройки;
	НастройкаОбъект.Наименование        = Наименование;
	НастройкаОбъект.ХранилищеНастроек   = Новый ХранилищеЗначения(СписокСчетов);
	НастройкаОбъект.Записать();
	
КонецПроцедуры

// Тип - определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик
Процедура СохранитьСписокСчетовДляРасчетаЗадолженности(Тип = 1, СписокСчетов) Экспорт
	
	НастройкаСсылка = ПолучитьСохраненнуюНастройкуСчетовДляРасчетаЗадолженности(Тип);
	
	Если Тип = 1 Тогда
		НастраиваемыйОбъект = "ОтчетыФХД.СчетаДляРасчетаЗадолженностиПокупателей";
		Наименование        = "Счета для расчета задолженности покупателей";
	ИначеЕсли Тип = 2 Тогда
		НастраиваемыйОбъект = "ОтчетыФХД.СчетаДляРасчетаЗадолженностиПоставщикам";
		Наименование        = "Счета для расчета задолженности поставщикам";
	КонецЕсли;
	
	Если НастройкаСсылка = Неопределено Тогда
		НастройкаОбъект = Справочники.СохраненныеНастройки.СоздатьЭлемент();
		НовыйПользователь = НастройкаОбъект.Пользователи.Добавить();
		НовыйПользователь.Пользователь = глЗначениеПеременной("глТекущийПользователь");
		//НастройкаОбъект.Владелец     = НовыйПользователь.Пользователь;
	Иначе
		НастройкаОбъект = НастройкаСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	НастройкаОбъект.НастраиваемыйОбъект = НастраиваемыйОбъект;
	НастройкаОбъект.ТипНастройки        = Перечисления.ТипыНастроек.ПроизвольныеНастройки;
	НастройкаОбъект.Наименование        = Наименование;
	НастройкаОбъект.ХранилищеНастроек   = Новый ХранилищеЗначения(СписокСчетов);
	НастройкаОбъект.Записать();
	
КонецПроцедуры

// Тип - определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик
Функция РедактироватьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Тип = 1,ВыводитьДолгосрочнуюЗадолженность = Истина) Экспорт
	
	СписокИзменен = Ложь;
	
	ФормаСпискаСчетов = ПолучитьОбщуюФорму("фхд_ФормаСпискаСчетов");
	СписокСчетовИсключаемыхИзРасчетаЗадолженности = ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Тип);
	ФормаСпискаСчетов.Список = СписокСчетовИсключаемыхИзРасчетаЗадолженности;
	
	СписокСчетовДляРасчетаЗадолжности = ПолучитьСписокСчетовДляРасчетаЗадолженности(Тип);
	ФормаСпискаСчетов.ТаблицаСчетовРасчета = СписокСчетовДляРасчетаЗадолжности;
	
	Если Тип = 1 Тогда
		ДляКредиторскойЗадолженности = Ложь;
	Иначе
		ДляКредиторскойЗадолженности = Истина;
	КонецЕсли;
			
	//ФормаСпискаСчетов.СписокСчетовРасчета.ЗагрузитьЗначения(ВозвратитьМассивСчетовДтКтЗадолженности(ДляКредиторскойЗадолженности,Истина,ВыводитьДолгосрочнуюЗадолженность)); 
	
	ФормаСпискаСчетов.Тип    = Тип;
	Если ФормаСпискаСчетов.ОткрытьМодально() = КодВозвратаДиалога.ОК Тогда
		СписокСчетовИсключаемыхИзРасчетаЗадолженности = ФормаСпискаСчетов.Список.Скопировать();
		СохранитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Тип, СписокСчетовИсключаемыхИзРасчетаЗадолженности);
		
		СписокСчетовДляРасчетаЗадолженности = ФормаСпискаСчетов.ТаблицаСчетовРасчета;
		СохранитьСписокСчетовДляРасчетаЗадолженности(Тип, СписокСчетовДляРасчетаЗадолженности);
		
		СписокИзменен = Истина;
	КонецЕсли;
	
	Возврат СписокИзменен;
	
КонецФункции

Процедура РаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт
	
	//Для Каждого Оформление Из ОформленияСтрок Цикл		
	//	Если Не Оформление.ДанныеСтроки.Использование Тогда			
	//		Оформление.ЦветТекста = ПолучитьЦветНеИспользуемогоЭлемента();			
	//	КонецЕсли;		
	//КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЦветНеИспользуемогоЭлемента() Экспорт 
	
	Возврат Новый Цвет(117, 117, 117);
	
КонецФункции

Функция СформироватьМассивСчетовДебиторскойЗадолжности()Экспорт
	
	мВидСубконто = Новый массив;
	мВидСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	мВидСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций);
	мВидСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НалогиСборыОтчисления);
	
	
	
	Запрос = Новый Запрос;
	ТекстЗапроса=
	"ВЫБРАТЬ
	|	Типовой.Ссылка,
	|	ИСТИНА КАК Использование,
	|	Типовой.Код КАК Код,
	|	Типовой.Наименование КАК Наименование
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	Типовой.ВидыСубконто.ВидСубконто В(&мВидСубконто)
	|	И НЕ Типовой.ЗапретитьИспользоватьВПроводках
	|	И НЕ Типовой.Забалансовый
	|
	|УПОРЯДОЧИТЬ ПО
	|	Типовой.Порядок";
	Запрос.Текст = Текстзапроса;
	Запрос.УстановитьПараметр("мВидСубконто",мВидСубконто);
	//Запрос.УстановитьПараметр("мВид",Видсчета.Активный);
	тз = запрос.Выполнить().Выгрузить();
	
	Возврат тз;
	
КонецФункции

Функция СформироватьМассивСчетовКредиторскойЗадолжности()Экспорт
	
	мВидСубконто = Новый массив;
	мВидСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	мВидСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций);
	мВидСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НалогиСборыОтчисления);
	
	
	Запрос = Новый Запрос;
	ТекстЗапроса=
	"ВЫБРАТЬ
	|	Типовой.Ссылка,
	|	ИСТИНА КАК Использование,
	|	Типовой.Код КАК Код,
	|	Типовой.Наименование КАК Наименование
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	Типовой.ВидыСубконто.ВидСубконто В(&мВидСубконто)
	|	И Типовой.Вид = &мВид
	|	И (НЕ Типовой.ЗапретитьИспользоватьВПроводках)
	|	И (НЕ Типовой.Забалансовый)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Типовой.Порядок";
	Запрос.Текст = Текстзапроса;
	Запрос.УстановитьПараметр("мВидСубконто",мВидСубконто);
	Запрос.УстановитьПараметр("мВид",Видсчета.Пассивный);
	
	Возврат запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СформироватьМассивСчетовДенежныхСредств()Экспорт
	
	мСчетДДС = Новый СписокЗначений;
	мСчетДДС.Добавить(Планысчетов.Типовой.ДенежныеСредстваВКассе);
	мСчетДДС.Добавить(Планысчетов.Типовой.ДенежныеСредстваНаКорреспондентскихСчетах);
	мСчетДДС.Добавить(Планысчетов.Типовой.ДенежныеСредстваНаСберегательныхСчетах);
	мСчетДДС.Добавить(Планысчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах);
	мСчетДДС.Добавить(Планысчетов.Типовой.ПрочиеДенежныеСредства);
	
	Возврат мСчетДДС;
	
КонецФункции
