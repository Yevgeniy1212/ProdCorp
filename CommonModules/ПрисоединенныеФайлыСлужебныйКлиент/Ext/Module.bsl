////////////////////////////////////////////////////////////////////////////////
// Подсистема "Присоединенные файлы".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Добавляет файлы перетаскиванием в список файлов.
//
// Параметры:
//  ВладелецФайла      - Ссылка - владелец файла.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//  МассивИменФайлов   - Массив Строк - путей к файлам.
//
Процедура ДобавитьФайлыПеретаскиванием(Знач ВладелецФайла, Знач ИдентификаторФормы, Знач МассивИменФайлов) Экспорт
	
	ПрисоединенныеФайлыМассив = Новый Массив;
	ПоместитьВыбранныеФайлыВХранилище(
		МассивИменФайлов,
		ВладелецФайла,
		ПрисоединенныеФайлыМассив,
		ИдентификаторФормы);
	
	Если ПрисоединенныеФайлыМассив.Количество() = 1 Тогда
		ПрисоединенныйФайл = ПрисоединенныеФайлыМассив[0];
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание'"),
			ПолучитьНавигационнуюСсылку(ПрисоединенныйФайл),
			ПрисоединенныйФайл,
			БиблиотекаКартинок.Информация32);
		
		ПараметрыФормы = Новый Структура("ПрисоединенныйФайл, ЭтоНовый", ПрисоединенныйФайл, Истина);
		ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", ПараметрыФормы, , ПрисоединенныйФайл);
	КонецЕсли;
	
	Если ПрисоединенныеФайлыМассив.Количество() > 0 Тогда
		ОповеститьОбИзменении(ПрисоединенныеФайлыМассив[0]);
		Оповестить("Запись_ПрисоединенныйФайл", Новый Структура("ЭтоНовый", Истина), ПрисоединенныеФайлыМассив);
	КонецЕсли;
	
КонецПроцедуры

#Если ВебКлиент Тогда
// Помещает файл с диска в хранилище присоединенных файлов (веб-клиент).
// 
// Параметры:
//  ВладелецФайла           - Ссылка на владельца файла.
//  НастройкиРаботыСФайлами - Структура.
//  ИдентификаторФормы      - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//  Ссылка на файл.
//
Функция ПоместитьВыбранныеФайлыВХранилищеВеб(Знач ВладелецФайла, Знач ИдентификаторФормы) Экспорт
	
	АдресВременногоХранилищаФайла = "";
	ИмяФайла = "";
	Если НЕ ПоместитьФайл(АдресВременногоХранилищаФайла, ИмяФайла, ИмяФайла, Истина, ИдентификаторФормы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ИмяФайла);
	
	Если СтрокиПути.Количество() >= 2 Тогда
		Расширение = СтрокиПути[СтрокиПути.Количество()-1];
		ИмяБезРасширения = СтрокиПути[СтрокиПути.Количество()-2];
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при помещении файла
			           |""%1""
			           |во временное хранилище.'"),
			ИмяФайла);
	КонецЕсли;
	
	ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(Расширение);
	
	// Создание карточки Файла в базе данных.
	ПрисоединенныйФайл = ПрисоединенныеФайлыСлужебныйВызовСервера.ДобавитьФайл(
		ВладелецФайла,
		ИмяБезРасширения,
		Расширение,
		,
		,
		АдресВременногоХранилищаФайла,
		"");
	
	Возврат ПрисоединенныйФайл;
	
КонецФункции
#КонецЕсли

// Помещает отредактированные файлы в хранилище.
// Используется, как обработчик команды окончания редактирования файлов.
//
// Параметры
//  ДанныеФайла        - Структура с данными файла.
//  ИнформацияОФайле   - Структура (возвращаемое значение) - информация о файле.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//  Истина - файл успешно помещен во временное хранилище.
//
Функция ПоместитьРедактируемыйФайлНаДискеВХранилище(Знач ДанныеФайла, ИнформацияОФайле, Знач ИдентификаторФормы) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами()Тогда
		
		РабочийКаталогПользователя = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
		
		ПолноеИмяФайлаНаКлиенте = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
		
		Файл = Новый Файл(ПолноеИмяФайлаНаКлиенте);
		Если НЕ Файл.Существует() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Файл не найден в рабочем каталоге.'"));
			Возврат Ложь;
		КонецЕсли;
		
		Возврат ПрисоединенныеФайлыКлиент.ПоместитьФайлНаДискеВХранилище(
			ДанныеФайла, ИнформацияОФайле, ПолноеИмяФайлаНаКлиенте, ИдентификаторФормы);
		
	Иначе
#Если ВебКлиент Тогда
		Результат = ПоместитьФайлНаДискеВХранилищеВеб(ДанныеФайла, ИнформацияОФайле, ИдентификаторФормы);
		
		Если НЕ Результат Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ДанныеФайла.ИмяФайла <> ИнформацияОФайле.ИмяФайла Тогда
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Имя выбранного файла
				           |""%1""
				           |отличается от имени файла в хранилище
				           |""%2"".
				           |
				           |Продолжить?'"),
				ИнформацияОФайле.ИмяФайла,
				ДанныеФайла.ИмяФайла);
			
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			Если Ответ <> КодВозвратаДиалога.ОК Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Результат;
#КонецЕсли
	КонецЕсли;
	
КонецФункции

// Выбирает файл с диска и помещает его во временное хранилище на сервере.
//
// Параметры:
//  ДанныеФайла        - Структура с данными файла.
//  ИнформацияОФайле   - Структура (возвращаемое значение) - информация о файле.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//  Истина - файл успешно выбран и помещен во временное хранилище, иначе Ложь.
//
Функция ВыбратьФайлНаДискеИПоместитьВХранилище(Знач ДанныеФайла, ИнформацияОФайле, Знач ИдентификаторФормы) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами()Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла     = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
		ВыборФайла.Расширение         = ДанныеФайла.Расширение;
		ВыборФайла.Фильтр             = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		                                НСтр("ru = 'Все файлы (*.%1)|*.%1'"), ДанныеФайла.Расширение);
		
		Если НЕ ВыборФайла.Выбрать() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат ПрисоединенныеФайлыКлиент.ПоместитьФайлНаДискеВХранилище(
			ДанныеФайла, ИнформацияОФайле, ВыборФайла.ПолноеИмяФайла, ИдентификаторФормы);
		
	Иначе
#Если ВебКлиент Тогда
		Возврат ПоместитьФайлНаДискеВХранилищеВеб(ДанныеФайла, ИнформацияОФайле, ИдентификаторФормы);
#КонецЕсли
	КонецЕсли;
	
КонецФункции

#Если ВебКлиент Тогда
// Помещает файл с диска клиента во временное хранилище.
//  Аналог функции ПоместитьФайлНаДискеВХранилище
// для веб-клиента без расширения для работы с файлами.
//
// Параметры:
//  ДанныеФайла             - Структура с данными файла.
//  ИнформацияОФайле        - Структура (возвращаемое значение) с информацией о файле.
//  ИдентификаторФормы      - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//  Булево - Истина - файл успешно помещен в хранилище, иначе Ложь.
//
Функция ПоместитьФайлНаДискеВХранилищеВеб(Знач ДанныеФайла, ИнформацияОФайле, Знач ИдентификаторФормы)
	
	АдресВременногоХранилищаФайла = "";
	ВыбранноеИмяФайла = "";
	
	Если Не ПоместитьФайл(АдресВременногоХранилищаФайла, ДанныеФайла.ИмяФайла, ВыбранноеИмяФайла, Истина, ИдентификаторФормы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ВыбранноеИмяФайла);
	
	Если СтрокиПути.Количество() >= 2 Тогда
		НовоеИмя = СтрокиПути[СтрокиПути.Количество()-2];
		НовоеРасширение = СтрокиПути[СтрокиПути.Количество()-1];
		ИмяФайла = НовоеИмя + "." + НовоеРасширение;
		
	ИначеЕсли СтрокиПути.Количество() = 1 Тогда
		НовоеИмя = СтрокиПути[0];
		НовоеРасширение = "";
		ИмяФайла = НовоеИмя;
	КонецЕсли;
	
	ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(НовоеРасширение);
	
	ИнформацияОФайле = Новый Структура;
	ИнформацияОФайле.Вставить("ДатаМодификацииУниверсальная",   Неопределено);
	ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресВременногоХранилищаФайла);
	ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
	ИнформацияОФайле.Вставить("ИмяФайла",                       ИмяФайла);
	ИнформацияОФайле.Вставить("Расширение",                     НовоеРасширение);
	
	Возврат Истина;
	
КонецФункции
#КонецЕсли

// Открывает каталог с файлом (при необходимости получает файл из хранилища).
// Используется, как обработчик команды открытия каталога с файлом.
//
// Параметры:
//  ДанныеФайла - Структура с данными файла.
//
Процедура ОткрытьКаталогСФайлом(Знач ДанныеФайла) Экспорт
	
	Перем ПолноеИмяФайла;
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		РабочийКаталогПользователя = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
		
		Если ПустаяСтрока(РабочийКаталогПользователя) Тогда
			Предупреждение(НСтр("ru = 'Не задан рабочий каталог'"));
			Возврат;
		КонецЕсли;
		
		ПолныйПуть = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
		
		Файл = Новый Файл(ПолныйПуть);
		
		Если НЕ Файл.Существует() Тогда
			Ответ = Вопрос(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Файл ""%1""
				           |отсутствует в рабочем каталоге.
				           |
				           |Получить файл из хранилища файлов?'"),
				Файл.Имя),
			РежимДиалогаВопрос.ДаНет);
			
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
			ПолноеИмяФайлаНаКлиенте = "";
			ПрисоединенныеФайлыКлиент.ПолучитьФайлВРабочийКаталог(
				ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
				ДанныеФайла.ОтносительныйПуть,
				ДанныеФайла.ДатаМодификацииУниверсальная,
				ДанныеФайла.ИмяФайла,
				РабочийКаталогПользователя,
				ПолноеИмяФайлаНаКлиенте);
			
		КонецЕсли;
		
		ФайловыеФункцииСлужебныйКлиент.ОткрытьПроводникСФайлом(ПолныйПуть);
	Иначе
#Если ВебКлиент Тогда
		ФайловыеФункцииСлужебныйКлиент.ПредупредитьОНеобходимостиРасширенияРаботыСФайлами();
#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Помещает файлы с диска в хранилище присоединенных файлов.
// 
// Параметры:
//  ВыбранныеФайлы                 - Массив - пути к файлам на диске.
//  ВладелецФайла                  - Ссылка на владельца файла.
//  НастройкиРаботыСФайлами        - Структура.
//  ПрисоединенныеФайлыМассив      - Массив (возвращаемое значение) - заполняется ссылками
//                                   на добавленные файлы.
//  ИдентификаторФормы             - УникальныйИдентификатор формы.
//
Процедура ПоместитьВыбранныеФайлыВХранилище(Знач ВыбранныеФайлы,
                                            Знач ВладелецФайла,
                                            ПрисоединенныеФайлыМассив,
                                            Знач ИдентификаторФормы) Экспорт
	
	ОбщиеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами();
	
	ТекущаяПозиция = 0;
	
	ПоследнийСохраненныйФайл = Неопределено;
	
	Для Каждого ПолноеИмяФайла Из ВыбранныеФайлы Цикл
		
		ТекущаяПозиция = ТекущаяПозиция + 1;
		
		Файл = Новый Файл(ПолноеИмяФайла);
		
		ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьВозможностьЗагрузкиФайла(Файл);
		
		Если ОбщиеНастройки.ИзвлекатьТекстыФайловНаСервере Тогда
			АдресВременногоХранилищаТекста = "";
		Иначе
			АдресВременногоХранилищаТекста =
				ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
					ПолноеИмяФайла, ИдентификаторФормы);
		КонецЕсли;
	
		ВремяИзмененияУниверсальное = Файл.ПолучитьУниверсальноеВремяИзменения();
		
		ОбновитьСостояниеОСохраненииФайлов(ВыбранныеФайлы, Файл, ТекущаяПозиция);
		ПоследнийСохраненныйФайл = Файл;
		
		ПомещаемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя, "");
		ПомещаемыеФайлы.Добавить(Описание);
		
		ПомещенныеФайлы = Новый Массив;
		
		Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ИдентификаторФормы) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при помещении файла
					           |""%1""
					           |во временное хранилище.'"),
					Файл.ПолноеИмя) );
			Продолжить;
		КонецЕсли;
		
		АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
		
		// Создание карточки Файла в базе данных.
		ПрисоединенныйФайл = ПрисоединенныеФайлыСлужебныйВызовСервера.ДобавитьФайл(
			ВладелецФайла,
			Файл.ИмяБезРасширения,
			ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение),
			,
			ВремяИзмененияУниверсальное,
			АдресВременногоХранилищаФайла,
			АдресВременногоХранилищаТекста);
		
		Если ПрисоединенныйФайл = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПрисоединенныеФайлыМассив.Добавить(ПрисоединенныйФайл);
		
	КонецЦикла;
	
	ОбновитьСостояниеОСохраненииФайлов(ВыбранныеФайлы, ПоследнийСохраненныйФайл);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

Процедура ОбновитьСостояниеОСохраненииФайлов(Знач ВыбранныеФайлы, Знач Файл, Знач ТекущаяПозиция = Неопределено);
	
	Если Файл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РазмерВМб = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(Файл.Размер() / (1024 * 1024));
	
	Если ВыбранныеФайлы.Количество() > 1 Тогда
		
		Если ТекущаяПозиция = Неопределено Тогда
			Состояние(НСтр("ru = 'Сохранение файлов завершено.'"));
		Иначе
			ИндикаторПроцент = ТекущаяПозиция * 100 / ВыбранныеФайлы.Количество();
			
			НадписьПодробнее = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сохраняется файл ""%1"" (%2 Мб) ...'"), Файл.Имя, РазмерВМб);
				
			ТекстСостояния = НСтр("ru = 'Сохранение нескольких файлов.'");
			
			Состояние(ТекстСостояния, ИндикаторПроцент, НадписьПодробнее, БиблиотекаКартинок.Информация32);
		КонецЕсли;
	Иначе
		Если ТекущаяПозиция = Неопределено Тогда
			ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сохранение файла ""%1"" (%2 Мб)
				           |завершено.'"), Файл.Имя, РазмерВМб);
		Иначе
			ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сохраняется файл ""%1"" (%2 Мб).
				           |Пожалуйста, подождите...'"), Файл.Имя, РазмерВМб);
		КонецЕсли;
		Состояние(ТекстПояснения);
	КонецЕсли;
	
КонецПроцедуры
