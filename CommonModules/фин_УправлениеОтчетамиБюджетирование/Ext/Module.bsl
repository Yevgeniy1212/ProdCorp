#Если НЕ (ТонкийКлиент ИЛИ ВебКлиент) Тогда

#Область ПроцедурыФормированияТекстаЗапросовКДанным	
	
 //Процедура ЗаполнитьТекстУсловийОтбора
//
Процедура ЗаполнитьТекстУсловийОтбора(Отбор,ТекстОтбораОбороты,ТекстОтбораОстатки="",ТекстФильтраОбороты=Неопределено,Исключаемые=Неопределено,Выбранные=Неопределено,ДополнительныеПоляДляСтатейБюджета = Ложь) Экспорт
	Если Отбор.Количество()>0 Тогда
		Для Каждого СтрокаОтбор Из Отбор Цикл
			Если НЕ ОбрабатыватьГруппировку(СтрокаОтбор.ПолеОтбора,Истина,ДополнительныеПоляДляСтатейБюджета) Тогда
				Продолжить;
			КонецЕсли;
			Если Исключаемые <> Неопределено Тогда
				Если Найти(СтрокаОтбор.Путь,".")=0 И Исключаемые.Свойство(СтрокаОтбор.Путь) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если Выбранные <> Неопределено Тогда
				Если Найти(СтрокаОтбор.Путь,".")=0 И Выбранные.Свойство(СтрокаОтбор.Путь)=Ложь Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если СтрокаОтбор.Путь="" ИЛИ СтрокаОтбор.ВидСравнения.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			ТекстУсловия = " = &ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор));
			Если СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСписке Тогда
				ТекстУсловия = " В (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
			ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВСписке  Тогда
				ТекстУсловия = " НЕ В (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
			ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСпискеПоИерархии ИЛИ СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВИерархии  Тогда
				ТекстУсловия = " В ИЕРАРХИИ (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
			ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВСпискеПоИерархии  Тогда
				ТекстУсловия = " НЕ В ИЕРАРХИИ (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
			ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеРавно  Тогда
				ТекстУсловия = " <> &ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор));
			КонецЕсли;
			Если СтрокаОтбор.Путь = "СтатьяБюджета" Тогда
				ТекстОтбораОбороты = ТекстОтбораОбороты+?(ТекстОтбораОбороты="",""," И ")+"СтатьиБюджета.Ссылка "+ТекстУсловия;
				ТекстОтбораОстатки = ТекстОтбораОстатки+?(ТекстОтбораОстатки="",""," И ")+"СтатьиБюджета.Счет "+ТекстУсловия;
			ИначеЕсли СтрокаОтбор.Путь = "Валюта" Тогда
				Если ТекстФильтраОбороты=Неопределено Тогда
					ТекстОтбораОбороты = ТекстОтбораОбороты+?(ТекстОтбораОбороты="",""," И ")+"Обороты.Валюта "+ТекстУсловия;
				Иначе
					ТекстФильтраОбороты = ТекстФильтраОбороты+?(ТекстФильтраОбороты="",""," И ")+"Валюта "+ТекстУсловия;
				КонецЕсли;
				ТекстОтбораОстатки = ТекстОтбораОстатки+?(ТекстОтбораОстатки="",""," И ")+"Обороты.Валюта "+ТекстУсловия;
			Иначе
				СтрогийОтбор = СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСписке  ИЛИ СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВИерархии ИЛИ СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСпискеПоИерархии ИЛИ СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.Равно;
				Если ТекстФильтраОбороты=Неопределено ИЛИ ((Метаданные.РегистрыНакопления.фин_ОборотыБюджетов.Измерения.Найти(СтрокаОтбор.Путь)=Неопределено) И Найти(СтрокаОтбор.Путь,"ДополнительныеРазрезы.Разрез")<>0) Тогда
					ТекстОтбораОбороты 		= ТекстОтбораОбороты	+?(ТекстОтбораОбороты="",""," И ")	+"(Обороты."+?(Найти(СтрокаОтбор.Путь,"Разрез")=0,"","ДополнительныеРазрезы.")+СтрокаОтбор.Путь+ТекстУсловия+?(СтрогийОтбор,")"," ИЛИ Обороты."	+?(Найти(СтрокаОтбор.Путь,"Разрез")=0,СтрокаОтбор.Путь,"ДополнительныеРазрезы."+СтрокаОтбор.Путь)+" ЕСТЬ NULL)");
				Иначе
					ТекстФильтраОбороты 	= ТекстФильтраОбороты	+?(ТекстФильтраОбороты="",""," И ")	+"("		+?(Найти(СтрокаОтбор.Путь,"Разрез")=0,"","ДополнительныеРазрезы.")+СтрокаОтбор.Путь+ТекстУсловия+?(СтрогийОтбор,")"," ИЛИ "		+?(Найти(СтрокаОтбор.Путь,"Разрез")=0,СтрокаОтбор.Путь,"ДополнительныеРазрезы."+СтрокаОтбор.Путь)+" ЕСТЬ NULL)");
				КонецЕсли;
				Если ТипЗнч(СтрокаОтбор.ПолеОтбора)=Тип("СправочникСсылка.фин_ДополнительныеРазрезыОтчетовПоБюджетам") Тогда
					НадлежащийТип = фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипЗначенияГруппировки(СтрокаОтбор.ПолеОтбора).Типы();
				Иначе
					ИмяСправочника = Новый Массив;
					НадлежащийТип = Новый Массив;
					фин_ПроцедурыМеханизмовБюджетирования.УстановитьНадлежащийТип(СтрокаОтбор.Путь,ИмяСправочника,НадлежащийТип,Истина);
				КонецЕсли;
				Если НадлежащийТип.Найти(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникВидыРаспределенияПоПроектам())<>Неопределено Тогда  
					НадлежащийТип.Удалить(НадлежащийТип.Найти(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникВидыРаспределенияПоПроектам()));
				КонецЕсли;
				ВыражениеПоискаПоля = "	ВЫБОР";
				Для Каждого ТипЗначения Из НадлежащийТип Цикл
					ИмяТаблицы = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОпределитьТаблицуПоТипу(ТипЗначения);
					ВыражениеПоискаПоля = ВыражениеПоискаПоля+"
											|		КОГДА Обороты.Субконто1 ССЫЛКА "+ИмяТаблицы+"
											|			ТОГДА Обороты.Субконто1
											|		КОГДА Обороты.Субконто2 ССЫЛКА "+ИмяТаблицы+"
											|			ТОГДА Обороты.Субконто2
											|		КОГДА Обороты.Субконто3 ССЫЛКА "+ИмяТаблицы+"
											|			ТОГДА Обороты.Субконто3";
				КонецЦикла;
				Для Каждого ТипЗначения Из НадлежащийТип Цикл
					ИмяТаблицы = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОпределитьТаблицуПоТипу(ТипЗначения);
					Если НадлежащийТип.Найти(ТипЗначения)=НадлежащийТип.Количество()-1 Тогда
						ВыражениеПоискаПоля = ВыражениеПоискаПоля+"
											|		ИНАЧЕ ЗНАЧЕНИЕ("+ИмяТаблицы+".ПустаяСсылка)";
					Иначе
					ВыражениеПоискаПоля = ВыражениеПоискаПоля+"
											|		КОГДА &ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+" ССЫЛКА "+ИмяТаблицы+"
											|			ТОГДА ЗНАЧЕНИЕ("+ИмяТаблицы+".ПустаяСсылка)";
					КонецЕсли;
				КонецЦикла;
				ВыражениеПоискаПоля = ВыражениеПоискаПоля+" 
											|	КОНЕЦ";
				//ТекстОтбораОстатки 	= ТекстОтбораОстатки+" И ("+ВыражениеПоискаПоля+ТекстУсловия+" ИЛИ "+ВыражениеПоискаПоля+" ЕСТЬ NULL)";
				ТекстОтбораОстатки 	= ТекстОтбораОстатки+?(ТекстОтбораОстатки="",""," И ")+" ("+ВыражениеПоискаПоля+ТекстУсловия+")";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ДополнительныеПоляДляСтатейБюджета Тогда
		ТекстОтбораОбороты = СтрЗаменить(ТекстОтбораОбороты,"Обороты.СтатьяБюджета","СтатьиБюджета");
	КонецЕсли;
КонецПроцедуры //ЗаполнитьТекстУсловийОтбора

Функция ПолучитьТекстУсловийОтбора(Отбор) Экспорт
	ТекстОтбораОбороты = "";
	ТекстФильтраОбороты = "";
	Если Отбор.Количество()>0 Тогда
		Для Каждого СтрокаОтбор Из Отбор Цикл
			Если СтрокаОтбор.Путь="" ИЛИ СтрокаОтбор.ВидСравнения.Пустая() ИЛИ НЕ СтрокаОтбор.Использование Тогда
				Продолжить;
			КонецЕсли;
			ТекстУсловия = " = &ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор));
			Если СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСписке Тогда
				ТекстУсловия = " В (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
			ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВСписке  Тогда
				ТекстУсловия = " НЕ В (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
			ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСпискеПоИерархии ИЛИ СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВИерархии  Тогда
				ТекстУсловия = " В ИЕРАРХИИ (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
			ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВСпискеПоИерархии ИЛИ СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВИерархии  Тогда
				ТекстУсловия = " НЕ В ИЕРАРХИИ (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
			ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеРавно  Тогда
				ТекстУсловия = " <> &ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор));
			КонецЕсли;
			Если СтрокаОтбор.Путь = "СтатьяБюджета" Тогда
				ТекстОтбораОбороты = ТекстОтбораОбороты+?(ТекстОтбораОбороты="",""," И ")+"СтатьиБюджета.Ссылка "+ТекстУсловия;
			ИначеЕсли СтрокаОтбор.Путь = "Валюта" Тогда
				Если ТекстФильтраОбороты=Неопределено Тогда
					ТекстОтбораОбороты = ТекстОтбораОбороты+?(ТекстОтбораОбороты="",""," И ")+"Обороты.Валюта "+ТекстУсловия;
				Иначе
					ТекстФильтраОбороты = ТекстФильтраОбороты+?(ТекстФильтраОбороты="",""," И ")+"Валюта "+ТекстУсловия;
				КонецЕсли;
			Иначе
				Если ТекстФильтраОбороты=Неопределено ИЛИ ((Метаданные.РегистрыНакопления.фин_ОборотыБюджетов.Измерения.Найти(СтрокаОтбор.Путь)=Неопределено) И Найти(СтрокаОтбор.Путь,"ДополнительныеРазрезы.Разрез")<>0) Тогда
					ТекстОтбораОбороты 	= ТекстОтбораОбороты+?(ТекстОтбораОбороты="",""," И ")+"(Обороты."+?(Найти(СтрокаОтбор.Путь,"Разрез")=0,"","ДополнительныеРазрезы.")+СтрокаОтбор.Путь+ТекстУсловия+" ИЛИ Обороты."+?(Найти(СтрокаОтбор.Путь,"Разрез")=0,СтрокаОтбор.Путь,"ДополнительныеРазрезы")+" ЕСТЬ NULL)";
				Иначе
					ТекстФильтраОбороты 	= ТекстФильтраОбороты+?(ТекстФильтраОбороты="",""," И ")+"("+?(Найти(СтрокаОтбор.Путь,"Разрез")=0,"","ДополнительныеРазрезы.")+СтрокаОтбор.Путь+ТекстУсловия+" ИЛИ "+?(Найти(СтрокаОтбор.Путь,"Разрез")=0,СтрокаОтбор.Путь,"ДополнительныеРазрезы")+" ЕСТЬ NULL)";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Новый Структура("Фильтр,Условие",ТекстФильтраОбороты,ТекстОтбораОбороты);	
КонецФункции //ЗаполнитьТекстУсловийОтбора

//Функция ПолучитьФрагментЗапросаВыбораИзмеренийПоОборотамБюджетов()
//
Функция ПолучитьФрагментЗапросаГруппировки(Группировки,Показатели=Неопределено,ОсновнаяГруппировка,мПериодичность,ПересчетВНоменклатурныеГруппы=Ложь,БезПсевдонимов=Ложь,ТолькоОсновные=Ложь,СДополнительнымиПолями = Ложь,БезИсточниковДополнительныхПолей = Ложь,ДополнительныеПоляДляСтатейБюджета = Ложь) Экспорт
	ТекстИзмерения = "";
	Для Каждого Измерение Из Группировки Цикл
		Если НЕ ОбрабатыватьГруппировку(Измерение.Измерение,СДополнительнымиПолями ИЛИ ДополнительныеПоляДляСтатейБюджета,ДополнительныеПоляДляСтатейБюджета) Тогда
			Продолжить;
		КонецЕсли;
		Имя = ?(ТипЗнч(Измерение.Измерение)=Тип("СправочникСсылка.фин_ДополнительныеРазрезыОтчетовПоБюджетам"),?(БезИсточниковДополнительныхПолей,"Поле"+Измерение.Измерение.Код,Измерение.Измерение.Путь),фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Измерение.Измерение));
		Если Имя = "СтатьяБюджета" ИЛИ Имя = "ФинансовыйПоказатель" ИЛИ Имя = "Счет" ИЛИ (Найти(Имя,"Разрез")<>0 И ТолькоОсновные) Тогда
			Продолжить;
		КонецЕсли;
		СтрокиГрупп = Группировки.НайтиСтроки(Новый Структура("Измерение",Измерение.Измерение));
		Если СтрокиГрупп.Количество()>1 Тогда
			Если Измерение <> СтрокиГрупп[0] Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если Имя = "ПериодПланирования" Тогда
			ТекстИзмерения = ТекстИзмерения+",
			|	НАЧАЛОПЕРИОДА(Обороты.ПериодПланирования, "+мПериодичность+")"+?(БезПсевдонимов,""," КАК ПериодПланирования");
		Иначе
			Если ПересчетВНоменклатурныеГруппы И Имя = "Номенклатура" И НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЭтоУТ3() Тогда
				ТекстИзмерения = ТекстИзмерения+",
				|	ВЫБОР КОГДА Обороты.Номенклатура ССЫЛКА Справочник.Номенклатура ИЛИ Обороты.Номенклатура ССЫЛКА Справочник.фин_ПлановаяНоменклатура ТОГДА Обороты.Номенклатура.НоменклатурнаяГруппа ИНАЧЕ Обороты.Номенклатура КОНЕЦ"+?(БезПсевдонимов,""," КАК "+Имя);
			Иначе	
				ТекстИзмерения = ТекстИзмерения+",
				|	Обороты."+?(Найти(Имя,"Разрез")=0,"","ДополнительныеРазрезы.")+Имя+?(БезПсевдонимов,""," КАК "+?(ТипЗнч(Измерение.Измерение)=Тип("СправочникСсылка.фин_ДополнительныеРазрезыОтчетовПоБюджетам"),"Поле"+Измерение.Измерение.Код,Имя));
			КонецЕсли;	
			Если Показатели<>Неопределено И (НЕ ТолькоОсновные) И Имя = "Номенклатура" И Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.Количество)).Количество()>0 Тогда
				ТекстИзмерения = ТекстИзмерения+",
				|	ВЫБОР
				|		КОГДА Обороты.Номенклатура.Ссылка ЕСТЬ NULL 
				|				"+?(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЭтоУТ3(),"","ИЛИ Обороты.Номенклатура ССЫЛКА Справочник.НоменклатурныеГруппы")+"
				|			ТОГДА """"
				|		ИНАЧЕ Обороты.Номенклатура."+фин_ОбщегоНазначенияВызовСервераПовтИсп.РеквизитЕдиницыИзмерения()+"
				|	КОНЕЦ КАК ЕдиницаИзмерения";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(ОсновнаяГруппировка) И Группировки.НайтиСтроки(Новый Структура("Измерение",ОсновнаяГруппировка)).Количество()=0 И ОсновнаяГруппировка<>Перечисления.фин_ФактическиеПоказателиБюджетирования.ФинансовыйПоказатель И ОбрабатыватьГруппировку(ОсновнаяГруппировка,СДополнительнымиПолями,ДополнительныеПоляДляСтатейБюджета) Тогда
		Имя = ?(ТипЗнч(ОсновнаяГруппировка)=Тип("СправочникСсылка.фин_ДополнительныеРазрезыОтчетовПоБюджетам"),ОсновнаяГруппировка.Путь,фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ОсновнаяГруппировка));
		Если Имя = "ПериодПланирования" Тогда
			ТекстИзмерения = ТекстИзмерения+",
			|	НАЧАЛОПЕРИОДА(Обороты.ПериодПланирования, "+мПериодичность+")"+?(БезПсевдонимов,""," КАК ПериодПланирования");
		Иначе
			Если ПересчетВНоменклатурныеГруппы И Имя = "Номенклатура" И НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЭтоУТ3() Тогда
				ТекстИзмерения = ТекстИзмерения+",
				|	ВЫБОР КОГДА Обороты.Номенклатура ССЫЛКА Справочник.Номенклатура ИЛИ Обороты.Номенклатура ССЫЛКА Справочник.фин_ПлановаяНоменклатура ТОГДА Обороты.Номенклатура.НоменклатурнаяГруппа ИНАЧЕ Обороты.Номенклатура КОНЕЦ"+?(БезПсевдонимов,""," КАК "+Имя);
			Иначе	
				ТекстИзмерения = ТекстИзмерения+",
				|	Обороты."+?(Найти(Имя,"Разрез")=0,"","ДополнительныеРазрезы.")+Имя+?(БезПсевдонимов,""," КАК "+?(ТипЗнч(ОсновнаяГруппировка)=Тип("СправочникСсылка.фин_ДополнительныеРазрезыОтчетовПоБюджетам"),"Поле"+ОсновнаяГруппировка.Код,Имя));
			КонецЕсли;	
			Если Показатели<>Неопределено И (НЕ ТолькоОсновные) И Имя = "Номенклатура" И Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.Количество)).Количество()>0 Тогда
				ТекстИзмерения = ТекстИзмерения+",
				|	ВЫБОР
				|		КОГДА Обороты.Номенклатура.Ссылка ЕСТЬ NULL 
				|				"+?(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЭтоУТ3(),"","ИЛИ Обороты.Номенклатура ССЫЛКА Справочник.НоменклатурныеГруппы")+"
				|			ТОГДА """"
				|		ИНАЧЕ Обороты.Номенклатура."+фин_ОбщегоНазначенияВызовСервераПовтИсп.РеквизитЕдиницыИзмерения()+"
				|	КОНЕЦ КАК ЕдиницаИзмерения";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ДополнительныеПоляДляСтатейБюджета Тогда
		ТекстИзмерения = СтрЗаменить(ТекстИзмерения,"Обороты.СтатьяБюджета","СтатьиБюджета");
	КонецЕсли;
	Возврат ТекстИзмерения;
КонецФункции //ПолучитьФрагментЗапросаВыбораИзмеренийПоОборотамБюджетов

Функция ОбрабатыватьГруппировку(Измерение,СДополнительнымиПолями,ДополнительныеПоляДляСтатейБюджета)
	Если СДополнительнымиПолями=Ложь И ТипЗнч(Измерение)=Тип("СправочникСсылка.фин_ДополнительныеРазрезыОтчетовПоБюджетам") Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ДополнительныеПоляДляСтатейБюджета Тогда
		Если НЕ ТипЗнч(Измерение)=Тип("СправочникСсылка.фин_ДополнительныеРазрезыОтчетовПоБюджетам") Тогда
			Возврат Ложь;
		КонецЕсли;
		Если НЕ Измерение.Измерение=Перечисления.фин_ДополнительныеРазрезыОтчетов.СтатьяБюджета Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Если ТипЗнч(Измерение)=Тип("СправочникСсылка.фин_ДополнительныеРазрезыОтчетовПоБюджетам") И Измерение.Измерение=Перечисления.фин_ДополнительныеРазрезыОтчетов.СтатьяБюджета Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

//Функция ПолучитьФрагментЗапросаВыбораИзмеренийПоОборотамБюджетов()
//
Функция ПолучитьФрагментСоединенияЗапросаПоГруппировкам(ЛеваяТаблица,ПраваяТаблица,Исключаемые = Неопределено,Группировки,Показатели=Неопределено,ОсновнаяГруппировка,мПериодичность,ПересчетВНоменклатурныеГруппы=Ложь,БезПсевдонимов=Ложь,ТолькоОсновные=Ложь) Экспорт
	ТекстИзмерения = "";
	Для Каждого Измерение Из Группировки Цикл
		Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Измерение.Измерение);
		Если Исключаемые<>Неопределено И Исключаемые.Свойство(Имя) Тогда
			Продолжить;
		КонецЕсли;
		Если Имя = "СтатьяБюджета" ИЛИ Имя = "ФинансовыйПоказатель" ИЛИ Имя = "Счет" ИЛИ (Найти(Имя,"Разрез")<>0 И ТолькоОсновные) Тогда
			Продолжить;
		КонецЕсли;
		СтрокиГрупп = Группировки.НайтиСтроки(Новый Структура("Измерение",Измерение.Измерение));
		Если СтрокиГрупп.Количество()>1 Тогда
			Если Измерение <> СтрокиГрупп[0] Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если Имя = "ПериодПланирования" Тогда
			ТекстИзмерения = ТекстИзмерения+?(ТекстИзмерения="",""," И ")+"
			|	НАЧАЛОПЕРИОДА("+ЛеваяТаблица+".ПериодПланирования, "+мПериодичность+") = НАЧАЛОПЕРИОДА("+ПраваяТаблица+".ПериодПланирования, "+мПериодичность+")";
		Иначе
			Если ПересчетВНоменклатурныеГруппы И Имя = "Номенклатура" Тогда
				ТекстИзмерения = ТекстИзмерения+?(ТекстИзмерения="",""," И ")+"
				|	ВЫБОР КОГДА "+ЛеваяТаблица+".Номенклатура ССЫЛКА Справочник.Номенклатура ИЛИ "+ЛеваяТаблица+".Номенклатура ССЫЛКА Справочник.фин_ПлановаяНоменклатура ТОГДА "+ЛеваяТаблица+".Номенклатура.НоменклатурнаяГруппа ИНАЧЕ "+ЛеваяТаблица+".Номенклатура КОНЕЦ = ВЫБОР КОГДА "+ПраваяТаблица+".Номенклатура ССЫЛКА Справочник.Номенклатура ИЛИ "+ПраваяТаблица+".Номенклатура ССЫЛКА Справочник.фин_ПлановаяНоменклатура ТОГДА "+ПраваяТаблица+".Номенклатура.НоменклатурнаяГруппа ИНАЧЕ "+ПраваяТаблица+".Номенклатура КОНЕЦ";
			Иначе	
				ТекстИзмерения = ТекстИзмерения+?(ТекстИзмерения="",""," И ")+"
				|	"+ЛеваяТаблица+"."+?(Найти(Имя,"Разрез")=0,"","ДополнительныеРазрезы.")+Имя+" = "+ПраваяТаблица+"."+?(Найти(Имя,"Разрез")=0,"","ДополнительныеРазрезы.")+Имя;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(ОсновнаяГруппировка) И Группировки.НайтиСтроки(Новый Структура("Измерение",ОсновнаяГруппировка)).Количество()=0 И ОсновнаяГруппировка<>Перечисления.фин_ФактическиеПоказателиБюджетирования.ФинансовыйПоказатель Тогда
		Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ОсновнаяГруппировка);
		Если Исключаемые<>Неопределено И Исключаемые.Свойство(Имя) Тогда
			Возврат ТекстИзмерения;
		КонецЕсли;
		Если Имя = "ПериодПланирования" Тогда
			ТекстИзмерения = ТекстИзмерения+?(ТекстИзмерения="",""," И ")+"
			|	НАЧАЛОПЕРИОДА("+ЛеваяТаблица+".ПериодПланирования, "+мПериодичность+")=НАЧАЛОПЕРИОДА("+ПраваяТаблица+".ПериодПланирования, "+мПериодичность+")";
		Иначе
			Если ПересчетВНоменклатурныеГруппы И Имя = "Номенклатура" Тогда
				ТекстИзмерения = ТекстИзмерения+",
				|	ВЫБОР КОГДА "+ЛеваяТаблица+".Номенклатура ССЫЛКА Справочник.Номенклатура ИЛИ "+ЛеваяТаблица+".Номенклатура ССЫЛКА Справочник.фин_ПлановаяНоменклатура ТОГДА "+ЛеваяТаблица+".Номенклатура.НоменклатурнаяГруппа ИНАЧЕ "+ЛеваяТаблица+".Номенклатура КОНЕЦ = ВЫБОР КОГДА "+ПраваяТаблица+".Номенклатура ССЫЛКА Справочник.Номенклатура ИЛИ "+ПраваяТаблица+".Номенклатура ССЫЛКА Справочник.фин_ПлановаяНоменклатура ТОГДА "+ПраваяТаблица+".Номенклатура.НоменклатурнаяГруппа ИНАЧЕ "+ПраваяТаблица+".Номенклатура КОНЕЦ";
			Иначе	
				ТекстИзмерения = ТекстИзмерения+",
				|	"+ЛеваяТаблица+"."+?(Найти(Имя,"Разрез")=0,"","ДополнительныеРазрезы.")+Имя+"="+ПраваяТаблица+"."+?(Найти(Имя,"Разрез")=0,"","ДополнительныеРазрезы.")+Имя;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	Возврат ТекстИзмерения;
КонецФункции //ПолучитьФрагментСоединенияЗапросаПоГруппировкам

Функция ПолучитьФрагментЗапросаПоказатели(Показатели,ТекстРазрядность="",ТекстРазрядностьКоличество="",Постфикс="",ВидВиртуальногоПоля="Оборот",ВыбиратьЦенуКакПоле=Ложь) Экспорт
	ТекстПоказатели = "";
	Для Каждого Показатель Из Показатели Цикл
		Если ТипЗнч(Показатель.Показатель)=Тип("СправочникСсылка.фин_ДополнительныеРасчетныеПоляОтчетовПоБюджетам") Тогда
			Продолжить;
		КонецЕсли;
		СтрокиГрупп = Показатели.НайтиСтроки(Новый Структура("Показатель",Показатель.Показатель));
		Если СтрокиГрупп.Количество()>1 Тогда
			Если Показатель <> СтрокиГрупп[0] Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Показатель.Показатель);
		Если Найти(Имя,"Цена")<>0 И ВыбиратьЦенуКакПоле=Ложь Тогда
			Продолжить;
		КонецЕсли;
		ТекстПоказатели = ТекстПоказатели+",
		|	Обороты."+Имя+ВидВиртуальногоПоля+?(Имя="Количество",ТекстРазрядностьКоличество,ТекстРазрядность)+" КАК "+Имя+Постфикс;
	КонецЦикла;
	Возврат ТекстПоказатели;
КонецФункции

#КонецОбласти

/////////////////////

#Область ПроцедурыФормированияСКД

Функция ПредставлениеКолонкиОтчета(Колонка,Язык=Неопределено,СтруктураПеревода = Неопределено,КЭШ=Неопределено,ВалютаСценария = Неопределено) Экспорт
    Текст = Колонка;
	Если ТипЗнч(Текст)<>Тип("Строка") Тогда
		Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Колонка)) Тогда
			Текст = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Колонка);
		ИначеЕсли ТипЗнч(Колонка)=Тип("СправочникСсылка.фин_ПоляПользовательскихОтчетов") Тогда
			Если Колонка.СпособОтображения = Перечисления.фин_СпособыОтображенияПолейПользовательскихОтчетов.ПоСоответствиюИзмерениямБюджетирования Тогда
				Текст = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Колонка.Измерение);
			Иначе
				Текст = Колонка;
			КонецЕсли;
		//Иначе
		//	ВызватьИсключение "Не определено текстовое представление элемента!";
		КонецЕсли;
	КонецЕсли;
	Возврат фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина(Текст,Язык,СтруктураПеревода,КЭШ)+?(Текст="СуммаСценария" И ВалютаСценария<>Неопределено,", "+фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина(ВалютаСценария,Язык,СтруктураПеревода,КЭШ),?(Текст="СуммаУпр",", "+фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета"),Язык,СтруктураПеревода,КЭШ),""));
КонецФункции

Функция ПредставлениеСтатьиБезКода(Статья,Язык) Экспорт
	Если Статья = Справочники.фин_СтатьиБюджета.ПустаяСсылка() Тогда
		Возврат фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина("Итого",Язык);
	КонецЕсли;
	Возврат фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина(Статья,Язык);
КонецФункции

Функция ПредставлениеСтатьиСКодом(Статья,Язык) Экспорт
	Если Статья = Справочники.фин_СтатьиБюджета.ПустаяСсылка() Тогда
		Возврат фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина("Итого",Язык);
	КонецЕсли;
	Разделитель = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РазделительКодаСтатьиВОтчетах");
	Разделитель = ?(Разделитель="",". ",Разделитель);
	Возврат Статья.КодСтрокиБюджета + Разделитель+фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина(Статья,Язык);
КонецФункции

// возвращает текстовое представление периода
//
Функция ПредставлениеПериодаСтрокойНаЯзыке(Дата,Сценарий,Язык = Неопределено) Экспорт
	Если Дата=Null ИЛИ Дата=Неопределено Тогда
		Возврат "";
	КонецЕсли;
    Текст = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПредставлениеПериодаСтрокой(Дата,?(Сценарий=Null ИЛИ Не ЗначениеЗаполнено(Сценарий),Перечисления.фин_Периодичность.Месяц,Сценарий));
	Возврат фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина(Текст,Язык);
КонецФункции //ПредставлениеПериодаСтрокой

Функция ПредставлениеПоляСтрокойНаЯзыке(Значение,Язык) Экспорт
	Возврат фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина(Значение,Язык);
КонецФункции

Функция ПредставлениеВалютнойСуммыНаЯзыке(Сумма,Валюта,Язык) Экспорт
	Возврат ?(Сумма=0 ИЛИ Сумма=Null,"",Строка(Сумма)+", "+фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина(Валюта,Язык));
КонецФункции

Функция ПредставлениеСчета(Статья,Язык) Экспорт
	Разделитель = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РазделительКодаСтатьиВОтчетах");
	Разделитель = ?(Разделитель="",". ",Разделитель);
	Возврат Статья.Код + Разделитель+фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина(Статья,Язык);
КонецФункции

Функция ПромежуточныеГруппировкиОтчета(Группировки,ОсновнаяГруппировка = Неопределено) Экспорт
	мГруппировки = Группировки.Выгрузить();
	Для Каждого СтрокаГруппировки Из Группировки Цикл
		Если ТипЗнч(СтрокаГруппировки.Измерение)=Тип("СправочникСсылка.фин_ДополнительныеРазрезыОтчетовПоБюджетам") Тогда
			ИзмерениеПоля = СтрокаГруппировки.Измерение.Измерение;
			Если ТипЗнч(ИзмерениеПоля)=Тип("ПеречислениеСсылка.фин_ФактическиеПоказателиБюджетирования") И мГруппировки.НайтиСтроки(Новый Структура("Измерение",ИзмерениеПоля)).Количество()=0 Тогда
				НС = мГруппировки.Добавить();
				НС.Измерение = ИзмерениеПоля;
			КонецЕсли;
		КонецЕсли;
		Если ЭтоВложенноеПолеПричиныОтклонения(СтрокаГруппировки.Измерение) И мГруппировки.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ДополнительныеРазрезыОтчетов.ПричинаОтклоненияФактическихДанных)).Количество()=0 Тогда
			НС = мГруппировки.Добавить();
			НС.Измерение = Перечисления.фин_ДополнительныеРазрезыОтчетов.ПричинаОтклоненияФактическихДанных;
		КонецЕсли;
		Если СтрокаГруппировки.СоставноеПоле И ЗначениеЗаполнено(СтрокаГруппировки.Состав) Тогда
			Состав = ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Состав);
			Если ТипЗнч(Состав)=Тип("СписокЗначений") Тогда
				Для Каждого ЭлементПолей Из Состав Цикл
					Если ТипЗнч(ЭлементПолей.Значение)<>Тип("Строка") И мГруппировки.НайтиСтроки(Новый Структура("Измерение",ЭлементПолей.Значение)).Количество()=0 Тогда
						НС = мГруппировки.Добавить();
						НС.Измерение = ЭлементПолей.Значение;
						Если ЭтоВложенноеПолеПричиныОтклонения(ЭлементПолей.Значение) И мГруппировки.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ДополнительныеРазрезыОтчетов.ПричинаОтклоненияФактическихДанных)).Количество()=0 Тогда
							НС = мГруппировки.Добавить();
							НС.Измерение = Перечисления.фин_ДополнительныеРазрезыОтчетов.ПричинаОтклоненияФактическихДанных;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(ОсновнаяГруппировка) Тогда
		Если мГруппировки.НайтиСтроки(Новый Структура("Измерение",ОсновнаяГруппировка)).Количество()=0 Тогда
			НС = мГруппировки.Добавить();
			НС.Измерение = ОсновнаяГруппировка;
		КонецЕсли;
		Если ЭтоВложенноеПолеПричиныОтклонения(ОсновнаяГруппировка) И мГруппировки.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ДополнительныеРазрезыОтчетов.ПричинаОтклоненияФактическихДанных)).Количество()=0 Тогда
			НС = мГруппировки.Добавить();
			НС.Измерение = Перечисления.фин_ДополнительныеРазрезыОтчетов.ПричинаОтклоненияФактическихДанных;
		КонецЕсли;
	КонецЕсли;
	Возврат мГруппировки;
КонецФункции

Функция ЭтоВложенноеПолеПричиныОтклонения(Поле)
	Возврат Поле = Перечисления.фин_ДополнительныеРазрезыОтчетов.ВидВлиянияНаФинансовыйРезультат ИЛИ Поле = Перечисления.фин_ДополнительныеРазрезыОтчетов.ВидОтклонения ИЛИ Поле = Перечисления.фин_ДополнительныеРазрезыОтчетов.ВидСтруктурногоОтклонения ИЛИ Поле = Перечисления.фин_ДополнительныеРазрезыОтчетов.СтруктурноеОтклонение;	
КонецФункции

Функция ПолучитьСКД(Отчет,мГруппировки,СтруктураПеревода,СхемаКомпоновкиДанных,КЭШ,ИмяОтчета=Неопределено,ВыбиратьЦенуКакПоле=Ложь) Экспорт
	
	ЯзыкОтчета 				= Отчет.ЯзыкОтчета;
	Если НЕ (ИмяОтчета = "фин_МониторингЛимитовИЦелевыхЗначенийПоБюджетам" ИЛИ ИмяОтчета="фин_АнализРассогласованияСтатей") Тогда
		УпорядочиваниеСтатей 	= Отчет.УпорядочиваниеСтатей;
		ВыводитьКодыСтрокБюджета= Отчет.ВыводитьКодыСтрокБюджета;
		Бюджет 					= Отчет.Бюджет;
	ИначеЕсли ИмяОтчета="фин_АнализРассогласованияСтатей" Тогда
		ВыводитьКодыСтрокБюджета= Отчет.ВыводитьКодыСтрокБюджета;
	КонецЕсли;
	Если НЕ (ИмяОтчета="фин_ИсполнениеБюджета" ИЛИ ИмяОтчета = "фин_СравнительныйАнализ" ИЛИ ИмяОтчета="фин_АнализРассогласованияСтатей" ИЛИ ИмяОтчета = "фин_ВременнойАнализБюджетныхДанных" ИЛИ ИмяОтчета = "фин_МониторингЛимитовИЦелевыхЗначенийПоБюджетам") Тогда
		Сценарий 				= Отчет.Сценарий;
	КонецЕсли;
	ОсновнаяГруппировка 	= Отчет.ОсновнаяГруппировка;
	Группировки 			= Отчет.Группировки;
	Если НЕ (ИмяОтчета = "фин_ВременнойАнализБюджетныхДанных") Тогда
		Показатели 				= Отчет.Показатели;
	КонецЕсли;
	
	//получаем схему компоновки данных
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.НаборДанныхОбъект;
	НаборДанных.Поля.Очистить();
	СхемаКомпоновкиДанных.ПоляИтога.Очистить();
	
	Если ИмяОтчета = "фин_МониторингЛимитовИЦелевыхЗначенийПоБюджетам" Тогда
		НовоеПоле=НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Заголовок		= ПредставлениеКолонкиОтчета("ФинансовыйПоказатель",ЯзыкОтчета,СтруктураПеревода,КЭШ);
		НовоеПоле.ПутьКДанным	= "ФинансовыйПоказатель";
		НовоеПоле.Поле			= "ФинансовыйПоказатель";
		НовоеПоле.ТипЗначения	= Новый ОписаниеТипов("СправочникСсылка.фин_ФинансовыеПоказатели");
		НовоеПоле.Роль.Измерение = Истина;
		НовоеПоле.ВыражениеПредставления	= "фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке(ФинансовыйПоказатель,&ЯзыкОтчета)";
	Иначе
		НовоеПоле=НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Заголовок		= ПредставлениеКолонкиОтчета("СтатьяБюджета",ЯзыкОтчета,СтруктураПеревода,КЭШ);
		НовоеПоле.ПутьКДанным	= "СтатьяБюджета";
		НовоеПоле.Поле			= "СтатьяБюджета";
		НовоеПоле.ТипЗначения	= Новый ОписаниеТипов("СправочникСсылка.фин_СтатьиБюджета");
		НовоеПоле.Роль.Измерение = Истина;
		НовоеПоле.ВыражениеПредставления	= "фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке(СтатьяБюджета,&ЯзыкОтчета)";
		Если ИмяОтчета<>"фин_АнализРассогласованияСтатей" И УпорядочиваниеСтатей<>"" Тогда
			Порядок = НовоеПоле.ВыраженияУпорядочивания.Добавить();
			Если Бюджет.РежимыРасчетаИтоговойСтрокиБюджета=Перечисления.фин_РежимыРасчетаИтоговойСтрокиБюджета.НеРассчитывать ИЛИ Бюджет.РежимыРасчетаИтоговойСтрокиБюджета=Перечисления.фин_РежимыРасчетаИтоговойСтрокиБюджета.ПустаяСсылка() Тогда
				Порядок.Выражение = "СтатьяБюджета."+УпорядочиваниеСтатей;
			Иначе
				Порядок.Выражение = "ВЫБОР КОГДА СтатьяБюджета=ЗНАЧЕНИЕ(Справочник.фин_СтатьиБюджета.ПустаяСсылка) ТОГДА ""я999999999999999999999999999"" ИНАЧЕ СтатьяБюджета."+УпорядочиваниеСтатей+" КОНЕЦ";
			КонецЕсли;
			Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		КонецЕсли;
		Если ВыводитьКодыСтрокБюджета Тогда
			НовоеПоле.ВыражениеПредставления	= "фин_УправлениеОтчетамиБюджетирование.ПредставлениеСтатьиСКодом(СтатьяБюджета,&ЯзыкОтчета)";
		Иначе
			НовоеПоле.ВыражениеПредставления	= "фин_УправлениеОтчетамиБюджетирование.ПредставлениеСтатьиБезКода(СтатьяБюджета,&ЯзыкОтчета)";
		КонецЕсли;
	КонецЕсли;
	
	ОбъектПоискаПоказателей = ?(ИмяОтчета = "фин_ВременнойАнализБюджетныхДанных",Отчет.ДанныеОтчета,Показатели);
	
	Имя = Неопределено;
	Для Каждого СтрокаПоказатель Из ОбъектПоискаПоказателей Цикл
		Если ИмяОтчета = "фин_ВременнойАнализБюджетныхДанных" Тогда
			Если СтрокаПоказатель.ПоФормуле Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если ТипЗнч(СтрокаПоказатель.Показатель) = Тип("СправочникСсылка.фин_ДополнительныеРасчетныеПоляОтчетовПоБюджетам") ИЛИ (ТипЗнч(СтрокаПоказатель.Показатель) = Тип("ПеречислениеСсылка.фин_РесурсыДанныхБюджетирования") И ВыбиратьЦенуКакПоле=Ложь И Найти(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель),"Цена")<>0) Тогда
				Продолжить;
			КонецЕсли;
			СтрокиГрупп = Показатели.НайтиСтроки(Новый Структура("Показатель",СтрокаПоказатель.Показатель));
			Если СтрокиГрупп.Количество()>1 Тогда
				Если СтрокаПоказатель <> СтрокиГрупп[0] Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ИмяОтчета="фин_ИсполнениеБюджета" ИЛИ ИмяОтчета = "фин_СравнительныйАнализ" Тогда
			Для Каждого СтрокаДанных Из Отчет.ДанныеДляАнализа Цикл
				МеткаУровня 	= Строка(СтрокаДанных.НомерСтроки);
				ЗаголовокПоля 	= ПредставлениеКолонкиОтчета(?(СтрокаДанных.НомерСтроки=1,"Эталон","ИсполнениеАбсолютное"),ЯзыкОтчета,СтруктураПеревода,КЭШ,?(ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения),СтрокаДанных.ДанныеДляСравнения.Валюта,Справочники.Валюты.ПустаяСсылка()))+?(СтрокаДанных.НомерСтроки>2," #"+МеткаУровня,"");
				ДобавитьПоказательВСКД(,СхемаКомпоновкиДанных,НаборДанных,СтрокаПоказатель,Имя = "ВалютнаяСумма",ЯзыкОтчета,СтруктураПеревода,КЭШ,СтрокаДанных.ДанныеДляСравнения,МеткаУровня,ЗаголовокПоля);
			КонецЦикла;
			Если Отчет.ВыводитьОтклонения Тогда
				МеткаУровня 	= Строка(Отчет.ДанныеДляАнализа.Количество()+1);
				ЗаголовокПоля 	= ПредставлениеКолонкиОтчета("РассмотренныеОтклонения",ЯзыкОтчета,СтруктураПеревода,КЭШ,Отчет.СценарийДляОтклонений);
				ДобавитьПоказательВСКД(,СхемаКомпоновкиДанных,НаборДанных,СтрокаПоказатель,Имя = "ВалютнаяСумма",ЯзыкОтчета,СтруктураПеревода,КЭШ,Отчет.СценарийДляОтклонений,МеткаУровня,ЗаголовокПоля);
			КонецЕсли;
		ИначеЕсли ИмяОтчета="фин_АнализРассогласованияСтатей" Тогда
			Для Каждого СтрокаДанных Из Отчет.ДанныеДляАнализа Цикл
				МеткаУровня 	= Строка(СтрокаДанных.НомерСтроки);
				ЗаголовокПоля 	= ПредставлениеКолонкиОтчета(СтрокаДанных.СтатьяБюджета,ЯзыкОтчета,СтруктураПеревода,КЭШ,?(ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения),СтрокаДанных.ДанныеДляСравнения.Валюта,Справочники.Валюты.ПустаяСсылка()));
				ДобавитьПоказательВСКД(,СхемаКомпоновкиДанных,НаборДанных,СтрокаПоказатель,Имя = "ВалютнаяСумма",ЯзыкОтчета,СтруктураПеревода,КЭШ,СтрокаДанных.ДанныеДляСравнения,МеткаУровня,ЗаголовокПоля);
			КонецЦикла;
		ИначеЕсли ИмяОтчета="фин_СводКорректировокИОтклоненийПоБюджетам" Тогда
			Для Каждого СтрокаВид Из Отчет.АналитическиеПоляСводаКорректировок Цикл
				СтрокиГрупп = Отчет.АналитическиеПоляСводаКорректировок.НайтиСтроки(Новый Структура("Поле",СтрокаВид.Поле));
				Если СтрокиГрупп.Количество()>1 Тогда
					Если СтрокаВид <> СтрокиГрупп[0] Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель)+фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаВид.Поле);
				ЗаголовокПоля 	= ПредставлениеКолонкиОтчета(СтрокаВид.Поле,ЯзыкОтчета,СтруктураПеревода,КЭШ,Сценарий.Валюта);
				ТипЗначения	= Метаданные.РегистрыНакопления.фин_ОборотыБюджетов.Ресурсы.Найти(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель)).Тип;
				ДобавитьПоказательВСКД(Имя,СхемаКомпоновкиДанных,НаборДанных,СтрокаПоказатель,Имя = "ВалютнаяСумма",ЯзыкОтчета,СтруктураПеревода,КЭШ,Сценарий,,ЗаголовокПоля,ТипЗначения);
			КонецЦикла;
		ИначеЕсли ИмяОтчета = "фин_ВременнойАнализБюджетныхДанных" Тогда
			ЗаголовокПоля 	= ПредставлениеКолонкиОтчета(СтрокаПоказатель.Заголовок,ЯзыкОтчета,СтруктураПеревода,КЭШ,?(ЭтоПлановыеДанные(СтрокаПоказатель.Данные),СтрокаПоказатель.Данные.Валюта,Справочники.Валюты.ПустаяСсылка()));
			МеткаУровня 	= Строка(СтрокаПоказатель.НомерСтроки);
			Имя 			= СтрокаПоказатель.ИдентификаторПоля;
			ТипЗначения 	= Метаданные.РегистрыНакопления.фин_ОборотыБюджетов.Ресурсы.Найти(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Ресурс)).Тип;
			ТребуетсяВалюта	= СтрокаПоказатель.Ресурс = Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяСумма И НаборДанных.Поля.Найти("Валюта")=Неопределено;
			ДобавитьПоказательВСКД(Имя,СхемаКомпоновкиДанных,НаборДанных,СтрокаПоказатель,ТребуетсяВалюта,ЯзыкОтчета,СтруктураПеревода,КЭШ,?(ТипЗнч(СтрокаПоказатель.Данные)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования(),СтрокаПоказатель.Данные,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий()),,ЗаголовокПоля,ТипЗначения);
		ИначеЕсли ИмяОтчета = "фин_МониторингЛимитовИЦелевыхЗначенийПоБюджетам" Тогда
			Заголовок		= ПредставлениеКолонкиОтчета(СтрокаПоказатель.Показатель,ЯзыкОтчета,СтруктураПеревода,КЭШ);
			ТипЗначения	= Метаданные.РегистрыНакопления.фин_ОборотыБюджетов.Ресурсы.Найти("СуммаУпр").Тип;
			ДобавитьПоказательВСКД(,СхемаКомпоновкиДанных,НаборДанных,СтрокаПоказатель,Имя = "ВалютнаяСумма",ЯзыкОтчета,СтруктураПеревода,КЭШ,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий(),,Заголовок,ТипЗначения);
		Иначе
			ДобавитьПоказательВСКД(,СхемаКомпоновкиДанных,НаборДанных,СтрокаПоказатель,Имя = "ВалютнаяСумма",ЯзыкОтчета,СтруктураПеревода,КЭШ,Сценарий);
			Если ИмяОтчета = "фин_АнализПричинОтклоненийФактическихДанныхБюджетов" И Отчет.РассчитыватьЗначимостьОтклонений Тогда
				ДобавитьПоказательВСКД(,СхемаКомпоновкиДанных,НаборДанных,СтрокаПоказатель,,ЯзыкОтчета,СтруктураПеревода,КЭШ,Сценарий,"План");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаПоказатель Из мГруппировки Цикл
		Имя = ?(ТипЗнч(СтрокаПоказатель.Измерение)=Тип("СправочникСсылка.фин_ДополнительныеРазрезыОтчетовПоБюджетам"),"Поле"+СтрокаПоказатель.Измерение.Код,фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Измерение));
		Если Имя = "СтатьяБюджета" Тогда
			Продолжить;
		ИначеЕсли ИмяОтчета = "фин_МониторингЛимитовИЦелевыхЗначенийПоБюджетам" И Имя = "ФинансовыйПоказатель" Тогда
			Продолжить;
		КонецЕсли;
		СтрокиГрупп = мГруппировки.НайтиСтроки(Новый Структура("Измерение",СтрокаПоказатель.Измерение));
		Если СтрокиГрупп.Количество()>1 Тогда
			Если СтрокаПоказатель <> СтрокиГрупп[0] Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		НовоеПоле=НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Заголовок		= ПредставлениеКолонкиОтчета(СтрокаПоказатель.Измерение,ЯзыкОтчета,СтруктураПеревода,КЭШ);
		НовоеПоле.ПутьКДанным	= Имя;
		НовоеПоле.ТипЗначения	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипЗначенияГруппировки(СтрокаПоказатель.Измерение);
		НовоеПоле.Поле			= Имя;
		НовоеПоле.Роль.Измерение = Истина;
		Если ИмяОтчета = "фин_МониторингЛимитовИЦелевыхЗначенийПоБюджетам" И Имя = "ПериодПланирования" Тогда
			НовоеПоле.ВыражениеПредставления	= "фин_УправлениеОтчетамиБюджетирование.ПредставлениеПериодаСтрокойНаЯзыке(ПериодПланирования,"+?(Отчет.ИспользованиеКонтроля=Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриПланировании,"Сценарий."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолеПериодичность(),"КонтролирующийСценарий."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолеПериодичность())+",&ЯзыкОтчета)";
		ИначеЕсли Имя = "ПериодПланирования" Тогда
			НовоеПоле.ВыражениеПредставления	= "фин_УправлениеОтчетамиБюджетирование.ПредставлениеПериодаСтрокойНаЯзыке(ПериодПланирования,&Периодичность,&ЯзыкОтчета)";
		Иначе
			НовоеПоле.ВыражениеПредставления	= "фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("+Имя+",&ЯзыкОтчета)";
		КонецЕсли;
		Если ИмяОтчета = "фин_ВременнойАнализБюджетныхДанных" Тогда
			ДобавлятьЕдиницуИзмерения = (Имя = "Номенклатура" И Отчет.ДанныеОтчета.НайтиСтроки(Новый Структура("Использование,Ресурс",Истина,Перечисления.фин_РесурсыДанныхБюджетирования.Количество)).Количество()>0);
		Иначе
			ДобавлятьЕдиницуИзмерения = (Имя = "Номенклатура" И Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.Количество)).Количество()>0);
		КонецЕсли;
		Если ДобавлятьЕдиницуИзмерения Тогда
			НовоеПоле=НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			НовоеПоле.Заголовок		= ПредставлениеКолонкиОтчета("ЕдиницаИзмерения",ЯзыкОтчета,СтруктураПеревода,КЭШ);
			НовоеПоле.ПутьКДанным	= "ЕдиницаИзмерения";
			НовоеПоле.Поле			= "ЕдиницаИзмерения";
			НовоеПоле.ТипЗначения	= Метаданные.Справочники.Номенклатура.Реквизиты[фин_ОбщегоНазначенияВызовСервераПовтИсп.РеквизитЕдиницыИзмерения()].Тип;
			НовоеПоле.Роль.Измерение = Истина;
			НовоеПоле.Роль.РодительскоеИзмерение  = "Номенклатура";
			НовоеПоле.ВыражениеПредставления	= "фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке(ЕдиницаИзмерения,&ЯзыкОтчета)";
		КонецЕсли;
	КонецЦикла;
	
	Если ОсновнаяГруппировка<>?(ИмяОтчета = "фин_МониторингЛимитовИЦелевыхЗначенийПоБюджетам",Перечисления.фин_ФактическиеПоказателиБюджетирования.ФинансовыйПоказатель,Перечисления.фин_ДополнительныеРазрезыОтчетов.СтатьяБюджета) И ЗначениеЗаполнено(ОсновнаяГруппировка) И мГруппировки.НайтиСтроки(Новый Структура("Измерение",ОсновнаяГруппировка)).Количество()=0 Тогда
		Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ОсновнаяГруппировка);
		НовоеПоле=НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Заголовок		= ПредставлениеКолонкиОтчета(ОсновнаяГруппировка,ЯзыкОтчета,СтруктураПеревода,КЭШ);
		НовоеПоле.ПутьКДанным	= Имя;
		НовоеПоле.ТипЗначения	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипЗначенияГруппировки(ОсновнаяГруппировка);
		НовоеПоле.Поле			= Имя;
		НовоеПоле.Роль.Измерение = Истина;
		Если Имя = "ПериодПланирования" Тогда
			НовоеПоле.ВыражениеПредставления	= "фин_УправлениеОтчетамиБюджетирование.ПредставлениеПериодаСтрокойНаЯзыке(ПериодПланирования,&Периодичность,&ЯзыкОтчета)";
		Иначе
			НовоеПоле.ВыражениеПредставления	= "фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("+Имя+",&ЯзыкОтчета)";
		КонецЕсли;
		Если ИмяОтчета = "фин_ВременнойАнализБюджетныхДанных" Тогда
			ДобавлятьЕдиницуИзмерения = (Имя = "Номенклатура" И Отчет.ДанныеОтчета.НайтиСтроки(Новый Структура("Ресурс",Перечисления.фин_РесурсыДанныхБюджетирования.Количество)).Количество()>0);
		Иначе
			ДобавлятьЕдиницуИзмерения = (Имя = "Номенклатура" И Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.Количество)).Количество()>0);
		КонецЕсли;
		Если ДобавлятьЕдиницуИзмерения Тогда
			НовоеПоле=НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			НовоеПоле.Заголовок		= ПредставлениеКолонкиОтчета("ЕдиницаИзмерения",ЯзыкОтчета,СтруктураПеревода,КЭШ);
			НовоеПоле.ПутьКДанным	= "ЕдиницаИзмерения";
			НовоеПоле.Поле			= "ЕдиницаИзмерения";
			НовоеПоле.ТипЗначения	= Метаданные.Справочники.Номенклатура.Реквизиты.БазоваяЕдиницаИзмерения.Тип;
			НовоеПоле.Роль.Измерение = Истина;
			НовоеПоле.Роль.РодительскоеИзмерение  = "Номенклатура";
			НовоеПоле.ВыражениеПредставления	= "фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке(ЕдиницаИзмерения,&ЯзыкОтчета)";
		КонецЕсли;
	КонецЕсли;
	
	Возврат СхемаКомпоновкиДанных;
КонецФункции

Процедура ДобавитьПоказательВСКД(Имя=Неопределено,СхемаКомпоновкиДанных,НаборДанных,СтрокаПоказатель,ТребуетсяВалюта,ЯзыкОтчета,СтруктураПеревода,КЭШ,Сценарий,МеткаУровня="",ЗаголовокПоля=Неопределено,ТипЗначения=Неопределено)
	Если Имя = Неопределено Тогда
		Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель);
	КонецЕсли;
	НовоеПоле=НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Заголовок		= ?(ЗаголовокПоля=Неопределено,ПредставлениеКолонкиОтчета(СтрокаПоказатель.Показатель,ЯзыкОтчета,СтруктураПеревода,КЭШ,Сценарий.Валюта),ЗаголовокПоля);
	НовоеПоле.ПутьКДанным	= Имя+МеткаУровня;
	НовоеПоле.Поле			= Имя+МеткаУровня;
	НовоеПоле.ТипЗначения	= ?(ТипЗначения=Неопределено,Метаданные.РегистрыНакопления.фин_ОборотыБюджетов.Ресурсы.Найти(СтрЗаменить(Имя,"Цена","Сумма")).Тип,ТипЗначения);
	НовоеПоле.ОграничениеИспользованияРеквизитов.Группировка 	= Истина; 
	НовоеПоле.ОграничениеИспользованияРеквизитов.Поле 			= Истина; 
	НовоеПоле.ОграничениеИспользованияРеквизитов.Порядок 		= Истина; 
	НовоеПоле.ОграничениеИспользованияРеквизитов.Условие 		= Истина; 
	НовоеПолеИтога=СхемаКомпоновкиДанных.ПоляИтога.Добавить();
	НовоеПолеИтога.ПутьКДанным=Имя+МеткаУровня;
	НовоеПолеИтога.Выражение=?(Найти(Имя,"Цена")<>0,"СРЕДНЕЕ(","СУММА(")+Имя+МеткаУровня+")";
	Если ТребуетсяВалюта=Истина Тогда
		НовоеПоле=НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Заголовок		= ПредставлениеКолонкиОтчета("Валюта",ЯзыкОтчета,СтруктураПеревода,КЭШ);
		НовоеПоле.ПутьКДанным	= "Валюта";
		НовоеПоле.ТипЗначения	= Новый ОписаниеТипов("СправочникСсылка.Валюты");
		НовоеПоле.Поле			= "Валюта";
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


//////////////////////////////
// ДОРАБОТКА КОМПОНОВЩИКА ПРИ ВЫВОДЕ ПЕРЕТЕКАЮЩИХ ОСТАТКОВ

#Область ПроцедурыДоработкиКомпоновщикаПриВыводе

Функция ИмяПоляРесурсаМакетаСКД(ЭлементРезультата,Показатели,ДанныеРасшифровки) Экспорт
	Для Каждого ЗначениеПараметров Из ЭлементРезультата.ЗначенияПараметров Цикл
		Если НЕ ТипЗнч(ЗначениеПараметров.Значение)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		ЭлементыРасшифровки = ДанныеРасшифровки.Элементы.Получить(ЗначениеПараметров.Значение).ПолучитьПоля();
		Для Каждого ПолеРасшифровки Из ЭлементыРасшифровки Цикл
			Если Метаданные.Перечисления.фин_РесурсыДанныхБюджетирования.ЗначенияПеречисления.Найти(ПолеРасшифровки.Поле)<>Неопределено Тогда
				Если Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования[ПолеРасшифровки.Поле])).Количество()>0 Тогда
					Возврат ПолеРасшифровки.Поле;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат "";
КонецФункции

Функция ПолучитьСтруктуруПоПолямРасшифровки(ЭлементРезультата,ДанныеРасшифровки) Экспорт
	Структура = Новый Структура;
	Для Каждого ЗначениеПараметров Из ЭлементРезультата.ЗначенияПараметров Цикл
		Если НЕ ТипЗнч(ЗначениеПараметров.Значение)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		РодителиПоля = ДанныеРасшифровки.Элементы.Получить(ЗначениеПараметров.Значение).ПолучитьРодителей();
		Для Каждого РодительПоля Из РодителиПоля Цикл
			Если ТипЗнч(РодительПоля)<>Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
				ПоляДанногоРодителя = РодительПоля.ПолучитьПоля();
				Для Каждого ПолеДанногоРодителя Из ПоляДанногоРодителя Цикл
					Если Найти(ПолеДанногоРодителя.Поле,".")<>0 ИЛИ Найти(ПолеДанногоРодителя.Поле,"Поле")<>0  Тогда
						Продолжить;
					КонецЕсли;
					Структура.Вставить(ПолеДанногоРодителя.Поле,ПолеДанногоРодителя.Значение);
				КонецЦикла;
			КонецЕсли;
			ДополнитьСтруктуруПоПолямРасшифровки(РодительПоля.Идентификатор,ДанныеРасшифровки,Структура);
		КонецЦикла;
	КонецЦикла;
	Возврат Структура;
КонецФункции

Процедура ДополнитьСтруктуруПоПолямРасшифровки(ИдентификаторДляРасшифровки,ДанныеРасшифровки,Структура) Экспорт
	РодителиПоля = ДанныеРасшифровки.Элементы.Получить(ИдентификаторДляРасшифровки).ПолучитьРодителей();
	Для Каждого РодительПоля Из РодителиПоля Цикл
		Если ТипЗнч(РодительПоля)<>Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
			ПоляДанногоРодителя = РодительПоля.ПолучитьПоля();
			Для Каждого ПолеДанногоРодителя Из ПоляДанногоРодителя Цикл
				Если Найти(ПолеДанногоРодителя.Поле,".")<>0 Тогда
					Продолжить;
				КонецЕсли;
				Структура.Вставить(ПолеДанногоРодителя.Поле,ПолеДанногоРодителя.Значение);
			КонецЦикла;
		КонецЕсли;
		ДополнитьСтруктуруПоПолямРасшифровки(РодительПоля.Идентификатор,ДанныеРасшифровки,Структура);
	КонецЦикла;
КонецПроцедуры

Процедура ОпределитьПринадлежностьИтогаПериоду(ИдентификаторДляРасшифровки,ДанныеРасшифровки,ЕстьПериод,ВидПериода,ПервыйПериод,ПоследнийПериод) Экспорт
	РодителиПоля = ДанныеРасшифровки.Элементы.Получить(ИдентификаторДляРасшифровки).ПолучитьРодителей();
	Для Каждого РодительПоля Из РодителиПоля Цикл
		Если ТипЗнч(РодительПоля)<>Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
			ПоляДанногоРодителя = РодительПоля.ПолучитьПоля();
			Для Каждого ПолеДанногоРодителя Из ПоляДанногоРодителя Цикл
				Если ПолеДанногоРодителя.Поле = "ПериодПланирования" Тогда
					ЕстьПериод = Истина;
					Если ПолеДанногоРодителя.Значение = ПервыйПериод Тогда
						ВидПериода = "Первый";
					ИначеЕсли ПолеДанногоРодителя.Значение = ПоследнийПериод Тогда
						ВидПериода = "Последний";
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если НЕ ЕстьПериод Тогда
			ОпределитьПринадлежностьИтогаПериоду(РодительПоля.Идентификатор,ДанныеРасшифровки,ЕстьПериод,ВидПериода,ПервыйПериод,ПоследнийПериод);
		КонецЕсли;
		Если ЕстьПериод Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ИмяПоляБезПериода(Знач ИмяПоля)
	Для Инд = 0 По 9 Цикл
		ИмяПоля = СтрЗаменить(ИмяПоля,Строка(Инд),"");
	КонецЦикла;
	Возврат ИмяПоля;
КонецФункции

Функция НомерПериодаИзПоля(Знач ИмяПоля)
	Начало = СтрДлина(ИмяПоля)+1;
	Для Инд = 0 По 9 Цикл
		Позиция = Найти(ИмяПоля,Строка(Инд));
		Если Позиция<>0 Тогда
			Начало = Мин(Начало,Позиция);
		КонецЕсли;
	КонецЦикла;
	Если Сред(ИмяПоля,Начало)="" Тогда
		Возврат 0;
	Иначе
		Возврат Число(Сред(ИмяПоля,Начало));
	КонецЕсли;
КонецФункции

#КонецОбласти

//////////////////////////////////////
// ФОРМИРОВАНИЕ БЮДЖЕТНЫХ ОТЧЕТОВ

#Область ПроцедурыРаботчыСОтчетами

Функция ТипЗначенияГруппировки(Группировка) Экспорт
	Если Группировка = Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка.Валюты");
	ИначеЕсли Группировка = Перечисления.фин_ФактическиеПоказателиБюджетирования.ПериодПланирования Тогда
		Возврат Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата)); 
	ИначеЕсли Группировка = Перечисления.фин_ДополнительныеРазрезыОтчетов.СтатьяБюджета Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка.Фин_СтатьиБюджета"); 
	ИначеЕсли Группировка = Перечисления.фин_ДополнительныеРазрезыОтчетов.ДокументПланирования Тогда
		Возврат Новый ОписаниеТипов("ДокументСсылка.Фин_Бюджет"); 
	ИначеЕсли Группировка = Перечисления.фин_ФактическиеПоказателиБюджетирования.Организация Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка.Организации"); 
	ИначеЕсли Группировка = Перечисления.фин_ДополнительныеРазрезыОтчетов.ПричинаКорректировки Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка.фин_ОснованияКорректировокБюджетов"); 
	ИначеЕсли Группировка = Перечисления.фин_ДополнительныеРазрезыОтчетов.СпособКорректировки Тогда
		Возврат Новый ОписаниеТипов("ПеречислениеСсылка.фин_СпособыВводаКорректировок"); 
	ИначеЕсли Группировка = Перечисления.фин_ДополнительныеРазрезыОтчетов.ПричинаОтклонения Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка.фин_ПричиныНепринятияСтрокБюджетов"); 
	ИначеЕсли Группировка = Перечисления.фин_ДополнительныеРазрезыОтчетов.ПричинаОтклоненияФактическихДанных Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка.фин_ПричиныОтклоненийФактическихДанных"); 
	ИначеЕсли Группировка = Перечисления.фин_ДополнительныеРазрезыОтчетов.ДокументРассмотрения Тогда
		Возврат Новый ОписаниеТипов("ДокументСсылка.фин_РассмотрениеОтклоненийФактическихДанных"); 
	ИначеЕсли Группировка = Перечисления.фин_ДополнительныеРазрезыОтчетов.ВидВлиянияНаФинансовыйРезультат Тогда
		Возврат Новый ОписаниеТипов("ПеречислениеСсылка.фин_ВидыВлиянияОтклонений"); 
	ИначеЕсли Группировка = Перечисления.фин_ДополнительныеРазрезыОтчетов.ВидОтклонения Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка.фин_ВидыОтклоненийФактическихДанных"); 
	ИначеЕсли Группировка = Перечисления.фин_ДополнительныеРазрезыОтчетов.СтруктурноеОтклонение Тогда
		Возврат Новый ОписаниеТипов("Булево"); 
	ИначеЕсли Группировка = Перечисления.фин_ДополнительныеРазрезыОтчетов.ВидСтруктурногоОтклонения Тогда
		Возврат Новый ОписаниеТипов("ПеречислениеСсылка.фин_ВидыСтруктурныхОтклонений"); 
	ИначеЕсли Группировка = Перечисления.фин_ДополнительныеРазрезыОтчетов.ОтветственноеЛицо Тогда
		Возврат Метаданные.ОпределяемыеТипы.фин_ОтветственныеБюджетногоПроцесса.Тип; 
	ИначеЕсли Группировка = Перечисления.фин_ДополнительныеРазрезыОтчетов.Сценарий Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования"); 
	ИначеЕсли Группировка = Перечисления.фин_ДополнительныеРазрезыОтчетов.КонтролирующийСценарий Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования"); 
	ИначеЕсли Группировка = Перечисления.фин_ФактическиеПоказателиБюджетирования.ФинансовыйПоказатель Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка.фин_ФинансовыеПоказатели"); 
	ИначеЕсли Группировка = Перечисления.фин_ДополнительныеРазрезыОтчетов.Счет Тогда
		Возврат Новый ОписаниеТипов("ПланСчетовСсылка.Фин_Бюджетирование"); 
	ИначеЕсли ТипЗнч(Группировка)=Тип("СправочникСсылка.фин_ПоляПользовательскихОтчетов") Тогда
		
		ШаблонОтчета = Группировка.Владелец;
		
		Запрос = Новый Запрос;
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		СтруктураПредставленийПолей = Новый Структура;
		Построитель = Новый ПостроительОтчета;
		ВсеПоля = ШаблонОтчета.ПоляОтчета.Выгрузить().Скопировать().ВыгрузитьКолонку("Поле");
		СписокИзмерений = Новый Массив;
		Показатели = Новый Массив;
		Для Каждого Поле Из ВсеПоля Цикл
			Если Поле.РольПоля = Перечисления.фин_РолиПолейПользовательскихОтчетов.Измерение Тогда
				СписокИзмерений.Добавить(Поле);
			Иначе
				Показатели.Добавить(Поле);
			КонецЕсли;
		КонецЦикла;
		Запрос.Текст = Отчеты.фин_ПользовательскийОтчет.ПолучитьТекстЗапроса(ШаблонОтчета,ШаблонОтчета.ПараметрыШаблона.Выгрузить(),Запрос,СтруктураПредставленийПолей,СписокИзмерений,Показатели,Построитель);
		Попытка
			Возврат Построитель.ДоступныеПоля.Найти(ШаблонОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",Группировка))[0].ИмяПоля).ТипЗначения;
		Исключение
			Возврат Новый ОписаниеТипов("Неопределено");
		КонецПопытки;
	ИначеЕсли ТипЗнч(Группировка)=Тип("СправочникСсылка.фин_ДополнительныеРазрезыОтчетовПоБюджетам") Тогда
		
		Путь = Группировка.Путь;
		
		Построитель = Новый ПостроительОтчета;
		Если Группировка.Измерение = Перечисления.фин_ДополнительныеРазрезыОтчетов.СтатьяБюджета Тогда
			Построитель.Текст = "ВЫБРАТЬ "+СтрЗаменить(Путь,"СтатьяБюджета.","")+" КАК Поле1 ИЗ Справочник.фин_СтатьиБюджета";
		Иначе
			Построитель.Текст = "ВЫБРАТЬ "+?(Найти(Путь,"Разрез")=0,"","ДополнительныеРазрезы.")+Путь+" КАК Поле1 ИЗ РегистрНакопления.фин_ОборотыБюджетов";
		КонецЕсли;
		Попытка
			Построитель.ЗаполнитьНастройки();
			Возврат Построитель.ДоступныеПоля.Найти("Поле1").ТипЗначения;
		Исключение
			Возврат Новый ОписаниеТипов("Неопределено");
		КонецПопытки;
	ИначеЕсли Найти(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Группировка),"Субконто")<>0 Тогда
		Возврат Справочники.ТипВсеСсылки();
	ИначеЕсли Найти(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Группировка),"Валюта")<>0 Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка.Валюты");
	ИначеЕсли Найти(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Группировка),"Счет")<>0 Тогда
		Возврат Новый ОписаниеТипов("ПланСчетовСсылка.фин_Бюджетирование");
	Иначе
		Разрез = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Группировка);
		Возврат ?(Разрез=Неопределено,Новый ОписаниеТипов("Неопределено"),Разрез.ТипЗначения);
	КонецЕсли;
КонецФункции

Процедура ЗаполнитьСпискиПоказателейИГруппировок(Отчет,Бюджет=Неопределено,СПериодом = Истина,ДополнительныеГруппировки = Неопределено) Экспорт
	Если Бюджет = Неопределено Тогда
		Бюджет = Отчет.Бюджет;
	КонецЕсли;
	ДоступныеПоказатели 	= Отчет.ДоступныеПоказатели;
	ДоступныеГруппировки 	= Отчет.ДоступныеГруппировки;
	
   	ДоступныеПоказатели.Очистить();
	ДоступныеГруппировки.Очистить();
	Если Бюджет.УчетПоСумме Тогда
		ДоступныеПоказатели.Добавить(Перечисления.фин_РесурсыДанныхБюджетирования.СуммаУпр);
		ДоступныеПоказатели.Добавить(Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяСумма);
		ДоступныеПоказатели.Добавить(Перечисления.фин_РесурсыДанныхБюджетирования.СуммаСценария);
	КонецЕсли;
	Если Бюджет.УчетПоКоличеству Тогда
		ДоступныеПоказатели.Добавить(Перечисления.фин_РесурсыДанныхБюджетирования.Количество);
	КонецЕсли;
	ДоступныеГруппировки.Добавить(Перечисления.фин_ДополнительныеРазрезыОтчетов.СтатьяБюджета,"Статья бюджета");
	Если СПериодом Тогда
		ДоступныеГруппировки.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.ПериодПланирования,"Период планирования");
	КонецЕсли;
	Для Каждого СтрокаРазрез Из Бюджет.РазрезыУчета Цикл
		ДоступныеГруппировки.Добавить(СтрокаРазрез.Измерение,фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(СтрокаРазрез.Измерение));
	КонецЦикла;
	Если ДополнительныеГруппировки <> Неопределено Тогда
		Для Каждого ДополнительнаяГруппировка Из ДополнительныеГруппировки Цикл
			ДоступныеГруппировки.Добавить(ДополнительнаяГруппировка.Значение,ДополнительнаяГруппировка.Представление);
		КонецЦикла;
	КонецЕсли;
	ДоступныеГруппировки.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта,"Валюта операции");
	ДоступныеГруппировки.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Организация,"Организация");
	МетаданныеОтчета = Отчет.Метаданные();
	Если МетаданныеОтчета.Имя="фин_Бюджет" ИЛИ МетаданныеОтчета.Имя="фин_ПечатьБюджета" Тогда
		Если Бюджет.УчетПоКоличеству И Бюджет.УчетПоСумме Тогда
			ДоступныеПоказатели.Добавить(Перечисления.фин_РесурсыДанныхБюджетирования.ЦенаУпр);
			ДоступныеПоказатели.Добавить(Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяЦена);
			ДоступныеПоказатели.Добавить(Перечисления.фин_РесурсыДанныхБюджетирования.ЦенаСценария);
		КонецЕсли;
	КонецЕсли;
	Если МетаданныеОтчета.ТабличныеЧасти.Найти("Группировки")<>Неопределено Тогда
		Если МетаданныеОтчета.ТабличныеЧасти.Группировки.Реквизиты.Измерение.Тип.СодержитТип(Тип("СправочникСсылка.фин_ДополнительныеРазрезыОтчетовПоБюджетам")) Тогда
	
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	фин_ДополнительныеРазрезыОтчетовПоБюджетам.Ссылка,
				|	фин_ДополнительныеРазрезыОтчетовПоБюджетам.Наименование
				|ИЗ
				|	Справочник.фин_ДополнительныеРазрезыОтчетовПоБюджетам КАК фин_ДополнительныеРазрезыОтчетовПоБюджетам
				|ГДЕ
				|	фин_ДополнительныеРазрезыОтчетовПоБюджетам.ПометкаУдаления = ЛОЖЬ
				|	И фин_ДополнительныеРазрезыОтчетовПоБюджетам.Измерение В(&Измерение) ИЛИ фин_ДополнительныеРазрезыОтчетовПоБюджетам.Измерение=ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.ФинансовыйПоказатель)";
			
			Запрос.УстановитьПараметр("Измерение", ДоступныеГруппировки);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ДоступныеГруппировки.Добавить(ВыборкаДетальныеЗаписи.Ссылка,ВыборкаДетальныеЗаписи.Наименование);
			КонецЦикла;
	
		КонецЕсли;
	КонецЕсли;
	Если МетаданныеОтчета.ТабличныеЧасти.Найти("Показатели")<>Неопределено Тогда
		Если МетаданныеОтчета.ТабличныеЧасти.Показатели.Реквизиты.Показатель.Тип.СодержитТип(Тип("СправочникСсылка.фин_ДополнительныеРасчетныеПоляОтчетовПоБюджетам")) Тогда
	
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	фин_ДополнительныеРасчетныеПоляОтчетовПоБюджетам.Ссылка,
				|	фин_ДополнительныеРасчетныеПоляОтчетовПоБюджетам.Наименование
				|ИЗ
				|	Справочник.фин_ДополнительныеРасчетныеПоляОтчетовПоБюджетам КАК фин_ДополнительныеРасчетныеПоляОтчетовПоБюджетам
				|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			Ресурсы.Ссылка КАК Ссылка
				|		ИЗ
				|			Справочник.фин_ДополнительныеРасчетныеПоляОтчетовПоБюджетам.Ресурсы КАК Ресурсы
				|		ГДЕ
				|			НЕ Ресурсы.Ресурс В (&Ресурс)) КАК ВложенныйЗапрос
				|		ПО фин_ДополнительныеРасчетныеПоляОтчетовПоБюджетам.Ссылка = ВложенныйЗапрос.Ссылка
				|ГДЕ
				|	фин_ДополнительныеРасчетныеПоляОтчетовПоБюджетам.ПометкаУдаления = ЛОЖЬ
				|	И фин_ДополнительныеРасчетныеПоляОтчетовПоБюджетам.Владелец = &ВидОтчета
				|	И ВложенныйЗапрос.Ссылка ЕСТЬ NULL ";
			
			Запрос.УстановитьПараметр("Ресурс", ДоступныеПоказатели);
			Запрос.УстановитьПараметр("ВидОтчета", Справочники.фин_ВидыОтчетовПоБюджетам[МетаданныеОтчета.Имя]);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ДоступныеПоказатели.Добавить(ВыборкаДетальныеЗаписи.Ссылка,ВыборкаДетальныеЗаписи.Наименование);
			КонецЦикла;
	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ЭтоПлановыеДанные(Данные)
	Возврат ЗначениеЗаполнено(Данные) И ТипЗнч(Данные)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования();	
КонецФункции

Процедура ПроверитьКорректностьЦеновыхПоказателей(Показатели,Бюджет,Ошибки) Экспорт
	Если Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяЦена)).Количество()<>0 Тогда
		Если (НЕ Бюджет.УчетПоКоличеству) ИЛИ (НЕ Бюджет.УчетПоСумме) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для вывода показателя """+Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяЦена+""" бюджет должен содержать как количественные, так и суммовые показатели!");
			Ошибки = Истина;
		КонецЕсли;
		Если Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.Количество)).Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для вывода показателя """+Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяЦена+""" в отчете необходимо вывести показатель ""Количество""!");
			Ошибки = Истина;
		КонецЕсли;
		Если Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяСумма)).Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для вывода показателя """+Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяЦена+""" в отчете необходимо вывести показатель """+Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяСумма+"""!");
			Ошибки = Истина;
		КонецЕсли;
	КонецЕсли;
	Если Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.ЦенаСценария)).Количество()<>0 Тогда
		Если (НЕ Бюджет.УчетПоКоличеству) ИЛИ (НЕ Бюджет.УчетПоСумме) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для вывода показателя """+Перечисления.фин_РесурсыДанныхБюджетирования.ЦенаСценария+""" бюджет должен содержать как количественные, так и суммовые показатели!");
			Ошибки = Истина;
		КонецЕсли;
		Если Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.Количество)).Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для вывода показателя """+Перечисления.фин_РесурсыДанныхБюджетирования.ЦенаСценария+""" в отчете необходимо вывести показатель ""Количество""!");
			Ошибки = Истина;
		КонецЕсли;
		Если Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.СуммаСценария)).Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для вывода показателя """+Перечисления.фин_РесурсыДанныхБюджетирования.ЦенаСценария+""" в отчете необходимо вывести показатель """+Перечисления.фин_РесурсыДанныхБюджетирования.СуммаСценария+"""!");
			Ошибки = Истина;
		КонецЕсли;
	КонецЕсли;
	Если Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.ЦенаУпр)).Количество()<>0 Тогда
		Если (НЕ Бюджет.УчетПоКоличеству) ИЛИ (НЕ Бюджет.УчетПоСумме) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для вывода показателя """+Перечисления.фин_РесурсыДанныхБюджетирования.ЦенаУпр+""" бюджет должен содержать как количественные, так и суммовые показатели!");
			Ошибки = Истина;
		КонецЕсли;
		Если Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.Количество)).Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для вывода показателя """+Перечисления.фин_РесурсыДанныхБюджетирования.ЦенаУпр+""" в отчете необходимо вывести показатель ""Количество""!");
			Ошибки = Истина;
		КонецЕсли;
		Если Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.СуммаУпр)).Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для вывода показателя """+Перечисления.фин_РесурсыДанныхБюджетирования.ЦенаУпр+""" в отчете необходимо вывести показатель ""Сумма (упр.)""!");
			Ошибки = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСпискиДоступныхПоказателейИГруппировок(Форма,ВидОтчетаБюджетирования,Объект) Экспорт
	ИмяОтчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяОтчетаПоВиду(ВидОтчетаБюджетирования);
	Если ИмяОтчета = "фин_ПрогнозныйОтчетОДвиженииДенег"
		ИЛИ ИмяОтчета = "фин_ПрогнозныйОтчетОДоходахИРасходах" Тогда
		Возврат;
	КонецЕсли;
	Форма.ДоступныеПоказатели.Очистить();
	Форма.ДоступныеГруппировки.Очистить();
	Форма.ПоказателиДляСортировки.Очистить();
	МетаданныеОтчета 			= Справочники.фин_ВидыОтчетовПоБюджетам.МетаданныеОтчета(ВидОтчетаБюджетирования);
	МетаданныеНастроек 			= Метаданные.Справочники.фин_НастройкиОтчетовПоБюджетам;
	ОтчетОбъект 				= Справочники.фин_ВидыОтчетовПоБюджетам.НовыйЭкземплярОтчета(ВидОтчетаБюджетирования);
	ПереченьОсновныхРеквизитов 	= ОтчетОбъект.ПереченьОсновныхРеквизитов;
	Для Каждого Реквизит Из ПереченьОсновныхРеквизитов Цикл
		ОтчетОбъект[Реквизит] = ?(ТипЗнч(Объект)=Тип("УправляемаяФорма"),Объект[Реквизит],Справочники.фин_НастройкиОтчетовПоБюджетам.ЗначениеРеквизитаОтчетаИзТекущейНастройки(Реквизит,Объект));
	КонецЦикла;
	Если ИмяОтчета = "фин_ПечатьБюджета" Тогда
		ОтчетОбъект["Бюджет"] = ?(ТипЗнч(Объект)=Тип("УправляемаяФорма"),Объект["ДокументПечатиБюджета_Бюджет"],Объект.Бюджет);
	КонецЕсли;             
	ОтчетОбъект.ЗаполнитьСпискиПоказателейИГруппировок();
	Для Каждого ЭлементПоказатель Из ОтчетОбъект.ДоступныеПоказатели Цикл
		Форма.ДоступныеПоказатели.Добавить(ЭлементПоказатель.Значение,ЭлементПоказатель.Представление);
		Если ИмяОтчета="фин_Бюджет" Тогда
			Форма.ПоказателиДляСортировки.Добавить(ЭлементПоказатель.Значение,ЭлементПоказатель.Представление);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементПоказатель Из ОтчетОбъект.ДоступныеГруппировки Цикл
		Форма.ДоступныеГруппировки.Добавить(ЭлементПоказатель.Значение,ЭлементПоказатель.Представление);
	КонецЦикла;
	Форма.Элементы.НастройкиОтбора.Видимость=Форма.ДоступныеГруппировки.Количество()>0 И ИмяОтчета<>"фин_ПользовательскийОтчет";
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыСозданияНастроекСКД

Функция ПолучитьНастройкиСКД(Отчет,КомпоновщикНастроек,СтруктураПеревода,КЭШ,ПериодичностьОтчета,ИмяОтчета = Неопределено,ОтборТаблиц=Неопределено,ОтключитьОтборПоПустымПоказателям=Ложь,ВыбиратьЦенуКакПоле=Ложь) Экспорт
	ОсновнаяГруппировка 		= Отчет.ОсновнаяГруппировка;
	ПоказателиВОднойКолонке 	= Отчет.ПоказателиВОднойКолонке;
	ВыводитьГруппыСтатейВнизу 	= Отчет.ВыводитьГруппыСтатейВнизу;
	ШиринаКолонкиРеквизита 		= Отчет.ШиринаКолонкиРеквизита;
	ШиринаКолонкиПоказателя		= Отчет.ШиринаКолонкиПоказателя;
	ШиринаКолонкиСтатьиБюджета	= Отчет.ШиринаКолонкиСтатьиБюджета;
	Если ИмяОтчета <> "фин_ВременнойАнализБюджетныхДанных" И ИмяОтчета<>"фин_МониторингЛимитовИЦелевыхЗначенийПоБюджетам" Тогда
		РасположениеИтоговОтчета	= Отчет.РасположениеИтоговОтчета;
	КонецЕсли;
	ЯзыкОтчета 					= Отчет.ЯзыкОтчета;
	ОсновнаяГруппировка 		= Отчет.ОсновнаяГруппировка;
	ВсеГруппировки 				= Отчет.Группировки;
	ВсеПоказатели 					= ?(ИмяОтчета="фин_ВременнойАнализБюджетныхДанных",Отчет.ДанныеОтчета,Отчет.Показатели);
	Настройки					= КомпоновщикНастроек.Настройки;
	Настройки.Структура.Очистить();
	Настройки.УсловноеОформление.Элементы.Очистить();
	Настройки.ПользовательскиеПоля.Элементы.Очистить();
	Настройки.Выбор.Элементы.Очистить();
	
	БазаДляДобавленияТаблицОтчета = Настройки.Структура;
	
	Если ЗначениеЗаполнено(ОсновнаяГруппировка) Тогда
		Имя = ?(ТипЗнч(ОсновнаяГруппировка)=Тип("СправочникСсылка.фин_ДополнительныеРазрезыОтчетовПоБюджетам"),"Поле"+ОсновнаяГруппировка.Код,фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ОсновнаяГруппировка));
		ГруппировкаПоОсновномуПолю=Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаПоОсновномуПолю.Использование = Истина;
		ПолеОсновнаяГруппировка					= ГруппировкаПоОсновномуПолю.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеОсновнаяГруппировка.Использование	= Истина;
		ПолеОсновнаяГруппировка.Поле			= Новый ПолеКомпоновкиДанных(Имя);
		ВыбранноеПоле=ГруппировкаПоОсновномуПолю.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование	= Истина;
		ВыбранноеПоле.Заголовок		= ПредставлениеКолонкиОтчета(ОсновнаяГруппировка,ЯзыкОтчета,СтруктураПеревода,КЭШ);
		ВыбранноеПоле.Поле			= Новый ПолеКомпоновкиДанных(Имя);
		Если Имя = "ПериодПланирования" Тогда
			Список = Новый СписокЗначений;
			Список.Добавить(NULL);
			Список.Добавить('00010101');
			Отбор = ГруппировкаПоОсновномуПолю.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
			Отбор.Использование = Истина;
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПериодПланирования");
			Отбор.ПравоеЗначение = Список;
			ГруппировкаПоОсновномуПолю.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
			ГруппировкаПоОсновномуПолю.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		ИначеЕсли Имя<>?(ИмяОтчета="фин_МониторингЛимитовИЦелевыхЗначенийПоБюджетам","ФинансовыйПоказатель","СтатьяБюджета") Тогда
				Если ВсеПоказатели.Количество()>0 И ?(ИмяОтчета<>"фин_СводКорректировокИОтклоненийПоБюджетам",Истина,Отчет.АналитическиеПоляСводаКорректировок.Количество()>0) Тогда
					ГруппаОтбора =  ГруппировкаПоОсновномуПолю.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
					ГруппаОтбора.Использование = Истина;
					ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
					ГруппаОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
					Если ОтключитьОтборПоПустымПоказателям=Ложь Тогда
						ДобавитьОтборПоПоказателям(ГруппаОтбора,Отчет,ИмяОтчета);
					КонецЕсли;
					ГруппировкаПоОсновномуПолю.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
					ГруппировкаПоОсновномуПолю.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
				КонецЕсли;
		КонецЕсли;
		Порядок = ГруппировкаПоОсновномуПолю.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		Порядок.Использование = Истина;
		Порядок.Поле = Новый ПолеКомпоновкиДанных(Имя);
		Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		
		ПолеОформления = ГруппировкаПоОсновномуПолю.УсловноеОформление.Элементы.Добавить();
		ПолеОформления.Использование = Истина;
		ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
		ДопПоле.Использование = Истина;
		ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(Имя);
		ПолеОформления.Оформление.Элементы.Найти("Шрифт").Значение = Новый Шрифт(,12,Истина);
		ПолеОформления.Оформление.Элементы.Найти("Шрифт").Использование = Истина;
		
		БазаДляДобавленияТаблицОтчета = ГруппировкаПоОсновномуПолю.Структура;
	//	ТаблицаБюджета=ГруппировкаПоОсновномуПолю.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	//Иначе	
	//	ТаблицаБюджета=Настройки.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	КонецЕсли;
	
	СписокТаблицОтчета = Новый СписокЗначений;
	ПоддержкаНесколькихТаблиц = Ложь;
	
	Если Отчет.Метаданные().ТабличныеЧасти.Найти("ТаблицыОтчета")<>Неопределено Тогда
		Если Отчет.ТаблицыОтчета.Количество()=0 Тогда
			СписокТаблицОтчета.Добавить(Справочники.фин_ТаблицыОтчетовПоБюджетам.ПустаяСсылка());
		Иначе
			СписокТаблицОтчета.ЗагрузитьЗначения(Отчет.ТаблицыОтчета.Выгрузить().ВыгрузитьКолонку("Таблица"));
			ПоддержкаНесколькихТаблиц = Истина;
		КонецЕсли;
	Иначе	
		СписокТаблицОтчета.Добавить(Справочники.фин_ТаблицыОтчетовПоБюджетам.ПустаяСсылка());
	КонецЕсли;
	
	//добавляем таблицу
	Для Каждого ЭлементТаблица Из СписокТаблицОтчета Цикл
		
		ТаблицаОтчета_Настройки = ЭлементТаблица.Значение;
		ЭтоДиаграмма = Ложь;
		ОтборТекущейТаблицы = Неопределено;
		
		Если ПоддержкаНесколькихТаблиц Тогда
			Группировки 	= ВсеГруппировки.Выгрузить(Новый Структура("Таблица",ТаблицаОтчета_Настройки));
			Показатели 		= ВсеПоказатели.Выгрузить(Новый Структура("Таблица",ТаблицаОтчета_Настройки));
			ЭтоДиаграмма	= ТаблицаОтчета_Настройки.ВидТаблицы = Перечисления.фин_ВидыТаблицОтчета.Диаграмма;
			Если ЗначениеЗаполнено(ТаблицаОтчета_Настройки) И ОтборТаблиц<>Неопределено И ПоддержкаНесколькихТаблиц Тогда
				ОтборТекущейТаблицы = ОтборТаблиц.Скопировать(Новый Структура("Таблица",ТаблицаОтчета_Настройки));
			КонецЕсли;
			Если ЭтоДиаграмма И Показатели.Количество()=0 Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Группировки 	= ВсеГруппировки;
			Показатели 		= ВсеПоказатели;
		КонецЕсли;
		
		
		ТаблицаБюджета=БазаДляДобавленияТаблицОтчета.Добавить(Тип(?(ЭтоДиаграмма,"ДиаграммаКомпоновкиДанных","ТаблицаКомпоновкиДанных")));
		ТаблицаБюджета.Использование=Истина;
		Если ЭтоДиаграмма Тогда
			УстановленныйТипДиаграммы = ТаблицаОтчета_Настройки.ТипДиаграммы.Получить();
			Если ЗначениеЗаполнено(УстановленныйТипДиаграммы) Тогда
				ПараметрВывода=ТаблицаБюджета.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТипДиаграммы"));
				ПараметрВывода.Использование=Истина;
				ПараметрВывода.Значение= УстановленныйТипДиаграммы;
			КонецЕсли;
		КонецЕсли;
		ТекущийРодительКолонки = ?(ЭтоДиаграмма,ТаблицаБюджета.Точки,ТаблицаБюджета.Колонки);
		ТекущийРодительСтроки = ?(ЭтоДиаграмма,ТаблицаБюджета.Серии,ТаблицаБюджета.Строки);
		
		ГруппировкаСтатья = Неопределено;
		
		Для Каждого СтрокаГруппировки Из Группировки Цикл
			Если Не (СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.Колонка ИЛИ СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.КолонкаСИерерахией) Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьГруппировкуВНастройкиСКД(Настройки,СтрокаГруппировки,Отчет,ИмяОтчета,ГруппировкаСтатья,ТекущийРодительСтроки,ТекущийРодительКолонки,Истина,,,ОтборТекущейТаблицы,ОтключитьОтборПоПустымПоказателям);
		КонецЦикла;
		
		Для Каждого СтрокаГруппировки Из Группировки Цикл
			Если Не (СтрокаГруппировки.ВидГруппировки = Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаСтрок ИЛИ СтрокаГруппировки.ВидГруппировки = Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаСтрокСИерархией ИЛИ СтрокаГруппировки.ВидГруппировки = Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаТолькоИерархия) Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьГруппировкуВНастройкиСКД(Настройки,СтрокаГруппировки,Отчет,ИмяОтчета,ГруппировкаСтатья,ТекущийРодительСтроки,ТекущийРодительКолонки,,,,ОтборТекущейТаблицы,ОтключитьОтборПоПустымПоказателям);
		КонецЦикла;
		
		Если Группировки.НайтиСтроки(Новый Структура("ВидГруппировки",Перечисления.фин_ВидыГруппировокОтчета.Поле)).Количество() >0 И НЕ ЭтоДиаграмма Тогда
			ГруппировкаАналитика=?(ТипЗнч(ТекущийРодительСтроки)=Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных"),ТекущийРодительСтроки.Добавить(),ТекущийРодительСтроки.Структура.Добавить());
			ГруппировкаАналитика.Использование=Истина;
			Если НЕ (ИмяОтчета = "фин_ИсполнениеБюджета" ИЛИ ИмяОтчета = "фин_СравнительныйАнализ" ИЛИ ИмяОтчета = "фин_АнализРассогласованияСтатей" ИЛИ ИмяОтчета = "фин_ВременнойАнализБюджетныхДанных" ИЛИ ИмяОтчета = "фин_АнализПричинКорректировок" ИЛИ ИмяОтчета = "фин_АнализПричинОтклоненийПоБюджетам" ИЛИ ИмяОтчета = "фин_МониторингЛимитовИЦелевыхЗначенийПоБюджетам" ИЛИ ИмяОтчета = "фин_СводКорректировокИОтклоненийПоБюджетам") Тогда
				Отбор = ГруппировкаАналитика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
				Отбор.Использование = Истина;
				Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатьяБюджета");
			КонецЕсли;
			Если Показатели.Количество()>0 И ?(ИмяОтчета<>"фин_СводКорректировокИОтклоненийПоБюджетам",Истина,Отчет.АналитическиеПоляСводаКорректировок.Количество()>0) Тогда
				ГруппаОтбора =  ГруппировкаАналитика.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтбора.Использование = Истина;
				ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				ГруппаОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
				Если ОтключитьОтборПоПустымПоказателям=Ложь Тогда
					ДобавитьОтборПоПоказателям(ГруппаОтбора,Отчет,ИмяОтчета);
				КонецЕсли;
				ГруппировкаАналитика.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
				ГруппировкаАналитика.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
			КонецЕсли;
			Для Каждого СтрокаГруппировки Из Группировки Цикл
				Если СтрокаГруппировки.ВидГруппировки <> Перечисления.фин_ВидыГруппировокОтчета.Поле Тогда
					Продолжить;
				КонецЕсли;
				ДобавитьГруппировкуВНастройкиСКД(Настройки,СтрокаГруппировки,Отчет,ИмяОтчета,ГруппировкаСтатья,ТекущийРодительСтроки,ТекущийРодительКолонки,,ГруппировкаАналитика,Истина,ОтборТекущейТаблицы,ОтключитьОтборПоПустымПоказателям);
			КонецЦикла;
			
			//для созданной группировки добавляем автовыбор полей
			ВыбранныеПоляДляТекущей=ГруппировкаАналитика.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ВыбранныеПоляДляТекущей.Использование=Истина;
		КонецЕсли;
		
		СоответствиеПользовательскихПолей = Новый Соответствие;
		
		КорневаяГруппаПолей = ТаблицаБюджета.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		КорневаяГруппаПолей.Использование	= Истина;
		//КорневаяГруппаПолей.Заголовок		= ПредставлениеКолонкиОтчета(СтрокаПоказатель.Показатель,ЯзыкОтчета,СтруктураПеревода,КЭШ);
		КорневаяГруппаПолей.Расположение	= ?(ПоказателиВОднойКолонке,РасположениеПоляКомпоновкиДанных.Вертикально,РасположениеПоляКомпоновкиДанных.Горизонтально);
		Для Каждого СтрокаПоказатель Из Показатели Цикл
			Если ИмяОтчета = "фин_ИсполнениеБюджета" ИЛИ ИмяОтчета = "фин_СравнительныйАнализ" ИЛИ ИмяОтчета = "фин_АнализРассогласованияСтатей" Тогда
				Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель);
				ГруппаПолей = КорневаяГруппаПолей.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ГруппаПолей.Использование	= Истина;
				ГруппаПолей.Заголовок		= ПредставлениеКолонкиОтчета(СтрокаПоказатель.Показатель,ЯзыкОтчета,СтруктураПеревода,КЭШ);
				ГруппаПолей.Расположение	= ?(Отчет.АналитическиеПоляВОднойКолонке,РасположениеПоляКомпоновкиДанных.Вертикально,РасположениеПоляКомпоновкиДанных.Горизонтально);
				Для Каждого СтрокаДанных Из Отчет.ДанныеДляАнализа Цикл
					МеткаУровня = Строка(СтрокаДанных.НомерСтроки);
					ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
					ПолеПользователя.Заголовок = Строка(СтрокаПоказатель.Показатель)+МеткаУровня+"Итоги";
					ПолеПользователя.Использование = Истина;
					ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("Сумма(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+МеткаУровня+" КОНЕЦ)");
					
					Для Каждого ВидИтоговойФункции Из Метаданные.Перечисления.фин_ИтоговыеФункции.ЗначенияПеречисления Цикл
						Если ВидИтоговойФункции.Имя = "НеРассчитывать" Тогда
							Продолжить;
						КонецЕсли;
						ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
						ПолеПользователя.Заголовок = Строка(СтрокаПоказатель.Показатель)+Строка(СтрокаДанных.НомерСтроки)+"Итоги"+ВидИтоговойФункции.Имя;
						ПолеПользователя.Использование = Истина;
						ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей(ВидИтоговойФункции.Имя+"("+Имя+Строка(СтрокаДанных.НомерСтроки)+")");
						Для Каждого ВидАнализа Из Отчет.ВидыАналитическихДанных Цикл
							ИмяВидаАнализа = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВидАнализа.ВидДанных);
							Если ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ИсполнениеОтносительное Тогда
								ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
								ПолеПользователя.Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоГруппе"+ВидИтоговойФункции.Имя;
								ПолеПользователя.Использование = Истина;
								ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА "+ВидИтоговойФункции.Имя+"(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ)=0 ТОГДА 0 ИНАЧЕ ("+ВидИтоговойФункции.Имя+"(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+МеткаУровня+" КОНЕЦ)/"+ВидИтоговойФункции.Имя+"(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ))*100 КОНЕЦ");
							ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеАбсолютное Тогда
								ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
								ПолеПользователя.Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоГруппе"+ВидИтоговойФункции.Имя;
								ПолеПользователя.Использование = Истина;
								ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей(""+ВидИтоговойФункции.Имя+"(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+МеткаУровня+" КОНЕЦ) - "+ВидИтоговойФункции.Имя+"(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ)");
							ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеОтносительное Тогда
								ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
								ПолеПользователя.Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоГруппе"+ВидИтоговойФункции.Имя;
								ПолеПользователя.Использование = Истина;
								ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА "+ВидИтоговойФункции.Имя+"(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ)=0 ТОГДА 0 ИНАЧЕ (("+ВидИтоговойФункции.Имя+"(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+МеткаУровня+" КОНЕЦ)-"+ВидИтоговойФункции.Имя+"(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ))/"+ВидИтоговойФункции.Имя+"(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ))*100 КОНЕЦ");
							КонецЕсли;
							Если ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ИсполнениеОтносительное Тогда
								ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
								ПолеПользователя.Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоСтатье"+ВидИтоговойФункции.Имя;
								ПолеПользователя.Использование = Истина;
								ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА "+ВидИтоговойФункции.Имя+"("+Имя+"1)=0 ТОГДА 0 ИНАЧЕ ("+ВидИтоговойФункции.Имя+"("+Имя+МеткаУровня+")/"+ВидИтоговойФункции.Имя+"("+Имя+"1))*100 КОНЕЦ");
							ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеАбсолютное Тогда
								ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
								ПолеПользователя.Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоСтатье"+ВидИтоговойФункции.Имя;
								ПолеПользователя.Использование = Истина;
								ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей(""+ВидИтоговойФункции.Имя+"("+Имя+МеткаУровня+") - "+ВидИтоговойФункции.Имя+"("+Имя+"1)");
							ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеОтносительное Тогда
								ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
								ПолеПользователя.Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоСтатье"+ВидИтоговойФункции.Имя;
								ПолеПользователя.Использование = Истина;
								ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА "+ВидИтоговойФункции.Имя+"("+Имя+"1)=0 ТОГДА 0 ИНАЧЕ (("+ВидИтоговойФункции.Имя+"("+Имя+МеткаУровня+")-"+ВидИтоговойФункции.Имя+"("+Имя+"1))/"+ВидИтоговойФункции.Имя+"("+Имя+"1))*100 КОНЕЦ");
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					Для Каждого ВидАнализа Из Отчет.ВидыАналитическихДанных Цикл
						ИмяВидаАнализа = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВидАнализа.ВидДанных);
						Если ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ИсполнениеОтносительное Тогда
							ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
							ПолеПользователя.Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоГруппе";
							ПолеПользователя.Использование = Истина;
							ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА Сумма(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ)=0 ТОГДА 0 ИНАЧЕ (Сумма(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+МеткаУровня+" КОНЕЦ)/Сумма(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ))*100 КОНЕЦ");
						ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеАбсолютное Тогда
							ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
							ПолеПользователя.Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоГруппе";
							ПолеПользователя.Использование = Истина;
							ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("Сумма(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+МеткаУровня+" КОНЕЦ) - Сумма(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ)");
						ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеОтносительное Тогда
							ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
							ПолеПользователя.Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоГруппе";
							ПолеПользователя.Использование = Истина;
							ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА Сумма(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ)=0 ТОГДА 0 ИНАЧЕ ((Сумма(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+МеткаУровня+" КОНЕЦ)-Сумма(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ))/Сумма(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ))*100 КОНЕЦ");
						КонецЕсли;
					КонецЦикла;
					Если СтрокаДанных.НомерСтроки=1 Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого ВидАнализа Из Отчет.ВидыАналитическихДанных Цикл
						ИмяВидаАнализа = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВидАнализа.ВидДанных);
						ЗаголовокПоляСКД = ПредставлениеКолонкиОтчета(ИмяВидаАнализа,ЯзыкОтчета,СтруктураПеревода,КЭШ,?(ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения),СтрокаДанных.ДанныеДляСравнения.Валюта,справочники.Валюты.ПустаяСсылка()))+?(СтрокаДанных.НомерСтроки>2," #"+МеткаУровня,"");
						Если ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.Эталон Тогда
							ИмяПоляСКД		= Имя+"1";
							Если ИмяОтчета = "фин_АнализРассогласованияСтатей" Тогда
								ЗаголовокПоляСКД = ПредставлениеКолонкиОтчета(Отчет.ДанныеДляАнализа[0].СтатьяБюджета,ЯзыкОтчета,СтруктураПеревода,КЭШ,?(ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения),СтрокаДанных.ДанныеДляСравнения.Валюта,справочники.Валюты.ПустаяСсылка()))+?(СтрокаДанных.НомерСтроки>2," #"+МеткаУровня,"");
							КонецЕсли;
						ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ИсполнениеАбсолютное Тогда
							ИмяПоляСКД		= Имя+МеткаУровня;
							Если ИмяОтчета = "фин_АнализРассогласованияСтатей" Тогда
								ЗаголовокПоляСКД = ПредставлениеКолонкиОтчета(СтрокаДанных.СтатьяБюджета,ЯзыкОтчета,СтруктураПеревода,КЭШ,?(ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения),СтрокаДанных.ДанныеДляСравнения.Валюта,справочники.Валюты.ПустаяСсылка()))+?(СтрокаДанных.НомерСтроки>2," #"+МеткаУровня,"");
							КонецЕсли;
						ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.РассмотренныеОтклонения Тогда
							ИмяПоляСКД		= Имя+Строка(Отчет.ДанныеДляАнализа.Количество()+1);
						ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ИсполнениеОтносительное Тогда
							ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
							ПолеПользователя.Заголовок = ЗаголовокПоляСКД;
							ПолеПользователя.Использование = Истина;
							ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА Сумма("+Имя+"1)=0 ТОГДА 0 ИНАЧЕ (Сумма("+Имя+МеткаУровня+")/Сумма("+Имя+"1))*100 КОНЕЦ");
							ИмяПоляСКД		= ПолеПользователя.ПутьКДанным;
						ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеАбсолютное Тогда
							ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
							ПолеПользователя.Заголовок = ЗаголовокПоляСКД;
							ПолеПользователя.Использование = Истина;
							ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("Сумма("+Имя+МеткаУровня+") - Сумма("+Имя+"1)");
							ИмяПоляСКД		= ПолеПользователя.ПутьКДанным;
						ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеОтносительное Тогда
							ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
							ПолеПользователя.Заголовок = ЗаголовокПоляСКД;
							ПолеПользователя.Использование = Истина;
							ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА Сумма("+Имя+"1)=0 ТОГДА 0 ИНАЧЕ ((Сумма("+Имя+МеткаУровня+")-Сумма("+Имя+"1))/Сумма("+Имя+"1))*100 КОНЕЦ");
							ИмяПоляСКД		= ПолеПользователя.ПутьКДанным;
						КонецЕсли;
						
						ДобавитьПоказательВНастройкиСКД(Настройки,ГруппаПолей,СтрокаПоказатель,ИмяПоляСКД,ЗаголовокПоляСКД,"",ШиринаКолонкиПоказателя,фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель),Ложь,Ложь,,СоответствиеПользовательскихПолей,Имя+ИмяВидаАнализа+МеткаУровня);
					КонецЦикла;
					
				КонецЦикла;
				Если ИмяОтчета <> "фин_АнализРассогласованияСтатей" И Отчет.ВыводитьОтклонения Тогда
					СтрокаДанных = Новый Структура("НомерСтроки,ДанныеДляСравнения",Отчет.ДанныеДляАнализа.Количество()+1,Отчет.СценарийДляОтклонений);
					МеткаУровня = Строка(СтрокаДанных.НомерСтроки);
					ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
					ПолеПользователя.Заголовок = Строка(СтрокаПоказатель.Показатель)+МеткаУровня+"Итоги";
					ПолеПользователя.Использование = Истина;
					ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("Сумма(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+МеткаУровня+" КОНЕЦ)");
					
					Для Каждого ВидИтоговойФункции Из Метаданные.Перечисления.фин_ИтоговыеФункции.ЗначенияПеречисления Цикл
						Если ВидИтоговойФункции.Имя = "НеРассчитывать" Тогда
							Продолжить;
						КонецЕсли;
						ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
						ПолеПользователя.Заголовок = Строка(СтрокаПоказатель.Показатель)+Строка(СтрокаДанных.НомерСтроки)+"Итоги"+ВидИтоговойФункции.Имя;
						ПолеПользователя.Использование = Истина;
						ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей(ВидИтоговойФункции.Имя+"("+Имя+Строка(СтрокаДанных.НомерСтроки)+")");
						Для Каждого ВидАнализа Из Отчет.ВидыАналитическихДанных Цикл
							ИмяВидаАнализа = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВидАнализа.ВидДанных);
							Если ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ИсполнениеОтносительное Тогда
								ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
								ПолеПользователя.Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоГруппе"+ВидИтоговойФункции.Имя;
								ПолеПользователя.Использование = Истина;
								ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА "+ВидИтоговойФункции.Имя+"(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ)=0 ТОГДА 0 ИНАЧЕ ("+ВидИтоговойФункции.Имя+"(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+МеткаУровня+" КОНЕЦ)/"+ВидИтоговойФункции.Имя+"(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ))*100 КОНЕЦ");
							ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеАбсолютное Тогда
								ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
								ПолеПользователя.Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоГруппе"+ВидИтоговойФункции.Имя;
								ПолеПользователя.Использование = Истина;
								ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей(""+ВидИтоговойФункции.Имя+"(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+МеткаУровня+" КОНЕЦ) - "+ВидИтоговойФункции.Имя+"(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ)");
							ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеОтносительное Тогда
								ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
								ПолеПользователя.Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоГруппе"+ВидИтоговойФункции.Имя;
								ПолеПользователя.Использование = Истина;
								ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА "+ВидИтоговойФункции.Имя+"(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ)=0 ТОГДА 0 ИНАЧЕ (("+ВидИтоговойФункции.Имя+"(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+МеткаУровня+" КОНЕЦ)-"+ВидИтоговойФункции.Имя+"(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ))/"+ВидИтоговойФункции.Имя+"(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ))*100 КОНЕЦ");
							КонецЕсли;
							Если ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ИсполнениеОтносительное Тогда
								ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
								ПолеПользователя.Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоСтатье"+ВидИтоговойФункции.Имя;
								ПолеПользователя.Использование = Истина;
								ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА "+ВидИтоговойФункции.Имя+"("+Имя+"1)=0 ТОГДА 0 ИНАЧЕ ("+ВидИтоговойФункции.Имя+"("+Имя+МеткаУровня+")/"+ВидИтоговойФункции.Имя+"("+Имя+"1))*100 КОНЕЦ");
							ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеАбсолютное Тогда
								ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
								ПолеПользователя.Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоСтатье"+ВидИтоговойФункции.Имя;
								ПолеПользователя.Использование = Истина;
								ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей(""+ВидИтоговойФункции.Имя+"("+Имя+МеткаУровня+") - "+ВидИтоговойФункции.Имя+"("+Имя+"1)");
							ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеОтносительное Тогда
								ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
								ПолеПользователя.Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоСтатье"+ВидИтоговойФункции.Имя;
								ПолеПользователя.Использование = Истина;
								ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА "+ВидИтоговойФункции.Имя+"("+Имя+"1)=0 ТОГДА 0 ИНАЧЕ (("+ВидИтоговойФункции.Имя+"("+Имя+МеткаУровня+")-"+ВидИтоговойФункции.Имя+"("+Имя+"1))/"+ВидИтоговойФункции.Имя+"("+Имя+"1))*100 КОНЕЦ");
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					Для Каждого ВидАнализа Из Отчет.ВидыАналитическихДанных Цикл
						ИмяВидаАнализа = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВидАнализа.ВидДанных);
						Если ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ИсполнениеОтносительное Тогда
							ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
							ПолеПользователя.Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоГруппе";
							ПолеПользователя.Использование = Истина;
							ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА Сумма(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ)=0 ТОГДА 0 ИНАЧЕ (Сумма(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+МеткаУровня+" КОНЕЦ)/Сумма(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ))*100 КОНЕЦ");
						ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеАбсолютное Тогда
							ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
							ПолеПользователя.Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоГруппе";
							ПолеПользователя.Использование = Истина;
							ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("Сумма(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+МеткаУровня+" КОНЕЦ) - Сумма(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ)");
						ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеОтносительное Тогда
							ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
							ПолеПользователя.Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоГруппе";
							ПолеПользователя.Использование = Истина;
							ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА Сумма(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ)=0 ТОГДА 0 ИНАЧЕ ((Сумма(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+МеткаУровня+" КОНЕЦ)-Сумма(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ))/Сумма(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"1 КОНЕЦ))*100 КОНЕЦ");
						КонецЕсли;
					КонецЦикла;
						ИмяВидаАнализа = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.РассмотренныеОтклонения);
						ЗаголовокПоляСКД = ПредставлениеКолонкиОтчета(ИмяВидаАнализа,ЯзыкОтчета,СтруктураПеревода,КЭШ,?(ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения),СтрокаДанных.ДанныеДляСравнения.Валюта,справочники.Валюты.ПустаяСсылка()))+?(СтрокаДанных.НомерСтроки>2," #"+МеткаУровня,"");
						ИмяПоляСКД		= Имя+МеткаУровня;
						
						ДобавитьПоказательВНастройкиСКД(Настройки,ГруппаПолей,СтрокаПоказатель,ИмяПоляСКД,ЗаголовокПоляСКД,"",ШиринаКолонкиПоказателя,фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель),Ложь,Ложь,,СоответствиеПользовательскихПолей,Имя+ИмяВидаАнализа+МеткаУровня);
				КонецЕсли;
			ИначеЕсли ИмяОтчета = "фин_ВременнойАнализБюджетныхДанных" Тогда
				Если НЕ СтрокаПоказатель.Использование Тогда
					Продолжить;
				КонецЕсли;
				Имя = СтрокаПоказатель.ИдентификаторПоля;
				МеткаУровня = Строка(СтрокаПоказатель.НомерСтроки);
				ЗаголовокПоляСКД = ПредставлениеКолонкиОтчета(СтрокаПоказатель.Заголовок,ЯзыкОтчета,СтруктураПеревода,КЭШ,?(ЭтоПлановыеДанные(СтрокаПоказатель.Данные),СтрокаПоказатель.Данные.Валюта,Справочники.Валюты.ПустаяСсылка()));
				Если СтрокаПоказатель.ПоФормуле Тогда
					ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
					ПолеПользователя.Заголовок = ЗаголовокПоляСКД;
					ПолеПользователя.Использование = Истина;
					ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей(СтрокаПоказатель.Формула);
					ИмяПоляСКД		= ПолеПользователя.ПутьКДанным;
				Иначе
					ИмяПоляСКД		= СтрокаПоказатель.ИдентификаторПоля;
				КонецЕсли;
				
				ДобавитьПоказательВНастройкиСКД(Настройки,КорневаяГруппаПолей,СтрокаПоказатель,ИмяПоляСКД,ЗаголовокПоляСКД,"",ШиринаКолонкиПоказателя,СтрокаПоказатель.ИдентификаторПоля,Ложь,Ложь,"ЧЦ=16; ЧДЦ=3",СоответствиеПользовательскихПолей,Имя,"Ресурс");

				ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
				ПолеПользователя.Заголовок = Имя+"Итоги";
				ПолеПользователя.Использование = Истина;
				Если СтрокаПоказатель.ПоФормуле Тогда
					ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей(ВыражениеИтоговыхЗаписей(Отчет.ДанныеОтчета,СтрокаПоказатель.Формула));
				Иначе
					ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("Сумма(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+" КОНЕЦ)");
				КонецЕсли;
				ДобавитьПользовательскиеПоляИтоговыхФункций(Имя,Имя,Настройки,,?(СтрокаПоказатель.ПоФормуле,СтрокаПоказатель.Формула,Неопределено));
				ДобавитьПользовательскиеПоляИтоговыхФункций(Имя,Имя,Настройки,"ИтогиСтатья",?(СтрокаПоказатель.ПоФормуле,ВыражениеИтоговыхЗаписей(Отчет.ДанныеОтчета,СтрокаПоказатель.Формула,Истина,"Сумма"),Неопределено));
				
			ИначеЕсли ИмяОтчета = "фин_СводКорректировокИОтклоненийПоБюджетам" Тогда
				ГруппаПолей = КорневаяГруппаПолей.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ГруппаПолей.Использование	= Истина;
				ГруппаПолей.Заголовок		= ПредставлениеКолонкиОтчета(СтрокаПоказатель.Показатель,ЯзыкОтчета,СтруктураПеревода,КЭШ);
				ГруппаПолей.Расположение	= ?(Отчет.АналитическиеПоляВОднойКолонке,РасположениеПоляКомпоновкиДанных.Вертикально,РасположениеПоляКомпоновкиДанных.Горизонтально);
				Для Каждого ВидАнализа Из Отчет.АналитическиеПоляСводаКорректировок Цикл
					Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель)+фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВидАнализа.Поле);
					ЗаголовокПоляСКД 	= ПредставлениеКолонкиОтчета(ВидАнализа.Поле,ЯзыкОтчета,СтруктураПеревода,КЭШ,Отчет.Сценарий.Валюта);
					ДобавитьПоказательВНастройкиСКД(Настройки,ГруппаПолей,СтрокаПоказатель,Имя,ЗаголовокПоляСКД,Имя,ШиринаКолонкиПоказателя,Имя,,Ложь);
				КонецЦикла;
			ИначеЕсли ТипЗнч(СтрокаПоказатель.Показатель)=Тип("СправочникСсылка.фин_ДополнительныеРасчетныеПоляОтчетовПоБюджетам") Тогда
				ДобавитьРасчетныйПоказательВНастройкиСКД(Настройки,КорневаяГруппаПолей,СтрокаПоказатель.Показатель,ШиринаКолонкиПоказателя);
			ИначеЕсли Найти(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель),"Цена")<>0 И ВыбиратьЦенуКакПоле=Ложь Тогда
				ДобавитьРасчетныйПоказательВНастройкиСКД(Настройки,КорневаяГруппаПолей,СтрокаПоказатель.Показатель,ШиринаКолонкиПоказателя);
			Иначе
				Имя 				= фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель);
				ЗаголовокПоляСКД 	= ПредставлениеКолонкиОтчета(СтрокаПоказатель.Показатель,ЯзыкОтчета,СтруктураПеревода,КЭШ,?(ИмяОтчета="фин_МониторингЛимитовИЦелевыхЗначенийПоБюджетам",Неопределено,Отчет.Сценарий.Валюта));
				ЗаголовокПоказателя = Строка(СтрокаПоказатель.Показатель);
				ДобавитьПоказательВНастройкиСКД(Настройки,КорневаяГруппаПолей,СтрокаПоказатель,Имя,ЗаголовокПоляСКД,ЗаголовокПоказателя,ШиринаКолонкиПоказателя,Имя,ИмяОтчета<>"фин_МониторингЛимитовИЦелевыхЗначенийПоБюджетам",Ложь);
				Если ИмяОтчета = "фин_АнализПричинОтклоненийФактическихДанныхБюджетов" И Отчет.РассчитыватьЗначимостьОтклонений Тогда
					ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
					ПолеПользователя.Заголовок = Имя+"ПроцентОтПлана";
					ПолеПользователя.Использование = Истина;
					ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА СУММА(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"План КОНЕЦ)=0 ТОГДА 0 ИНАЧЕ (СУММА(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+" КОНЕЦ)/СУММА(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+"План КОНЕЦ))*100 КОНЕЦ");
					
					Имя 				= ПолеПользователя.ПутьКДанным;
					ЗаголовокПоляСКД 	= ПредставлениеКолонкиОтчета("ПроцентОтПлана",ЯзыкОтчета,СтруктураПеревода,КЭШ,Отчет.Сценарий.Валюта)+" / "+ПредставлениеКолонкиОтчета(СтрокаПоказатель.Показатель,ЯзыкОтчета,СтруктураПеревода,КЭШ,Отчет.Сценарий.Валюта);
					ДобавитьПоказательВНастройкиСКД(Настройки,КорневаяГруппаПолей,СтрокаПоказатель,Имя,ЗаголовокПоляСКД,"",ШиринаКолонкиПоказателя,Имя,Ложь,Ложь);
					
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		Если ИмяОтчета = "фин_ИсполнениеБюджета" ИЛИ ИмяОтчета = "фин_СравнительныйАнализ" ИЛИ ИмяОтчета="фин_АнализРассогласованияСтатей" Тогда
			Если Отчет.ВыводитьСреднююЦену И Отчет.Бюджет.УчетПоКоличеству И Отчет.Бюджет.УчетПоСумме Тогда
				СоответствиеПолейСреднейЦены = Новый Соответствие;
				Имя = "Цена";
				ГруппаПолей = КорневаяГруппаПолей.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ГруппаПолей.Использование	= Истина;
				ГруппаПолей.Заголовок		= ПредставлениеКолонкиОтчета(Имя,ЯзыкОтчета,СтруктураПеревода,КЭШ);
				ГруппаПолей.Расположение	= ?(Отчет.АналитическиеПоляВОднойКолонке,РасположениеПоляКомпоновкиДанных.Вертикально,РасположениеПоляКомпоновкиДанных.Горизонтально);
				Для Каждого СтрокаДанных Из Отчет.ДанныеДляАнализа Цикл
					Если СтрокаДанных.НомерСтроки = 1 Тогда
						Продолжить;
					КонецЕсли;
					МеткаУровня = Строка(СтрокаДанных.НомерСтроки);
					Для Каждого ВидАнализа Из Отчет.ВидыАналитическихДанных Цикл
						ИмяВидаАнализа = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВидАнализа.ВидДанных);
						
						ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
						ПолеПользователя.Заголовок = "Цена"+МеткаУровня;
						ПолеПользователя.Использование = Истина;
						ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА СУММА(Количество"+МеткаУровня+")=0 ТОГДА 0 ИНАЧЕ СУММА(СуммаУпр"+МеткаУровня+")/СУММА(Количество"+МеткаУровня+") КОНЕЦ");
						
						//ВыбранноеПоле.Заголовок		= ПредставлениеКолонкиОтчета(ИмяВидаАнализа,ЯзыкОтчета,СтруктураПеревода,КЭШ,СтрокаДанных.ДанныеДляСравнения.Валюта)+?(СтрокаДанных.НомерСтроки>2," #"+МеткаУровня,"");
						Если ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.Эталон Тогда
							ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА СУММА(Количество1)=0 ТОГДА 0 ИНАЧЕ СУММА(СуммаУпр1)/СУММА(Количество1) КОНЕЦ");
						ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ИсполнениеАбсолютное Тогда
							ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА СУММА(Количество"+МеткаУровня+")=0 ТОГДА 0 ИНАЧЕ СУММА(СуммаУпр"+МеткаУровня+")/СУММА(Количество"+МеткаУровня+") КОНЕЦ");
						ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ИсполнениеОтносительное Тогда
							ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("100 * ВЫБОР КОГДА СУММА(Количество1)=0 ИЛИ СУММА(СуммаУпр1)=0 ТОГДА 0 ИНАЧЕ ВЫБОР КОГДА СУММА(Количество"+МеткаУровня+")=0 ТОГДА 0 ИНАЧЕ СУММА(СуммаУпр"+МеткаУровня+")/СУММА(Количество"+МеткаУровня+") КОНЕЦ/(СУММА(СуммаУпр1)/СУММА(Количество1)) КОНЕЦ");
						ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеАбсолютное Тогда
							ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА СУММА(Количество"+МеткаУровня+")=0 ТОГДА 0 ИНАЧЕ СУММА(СуммаУпр"+МеткаУровня+")/СУММА(Количество"+МеткаУровня+") КОНЕЦ - ВЫБОР КОГДА СУММА(Количество1)=0 ТОГДА 0 ИНАЧЕ СУММА(СуммаУпр1)/СУММА(Количество1) КОНЕЦ");
						ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеОтносительное Тогда
							ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("100 * ВЫБОР КОГДА СУММА(Количество1)=0 ИЛИ СУММА(СуммаУпр1)=0 ТОГДА 0 ИНАЧЕ ВЫБОР КОГДА СУММА(Количество"+МеткаУровня+")=0 ТОГДА 0 ИНАЧЕ СУММА(СуммаУпр"+МеткаУровня+")/СУММА(Количество"+МеткаУровня+") КОНЕЦ - ВЫБОР КОГДА СУММА(Количество1)=0 ТОГДА 0 ИНАЧЕ СУММА(СуммаУпр1)/СУММА(Количество1) КОНЕЦ/(СУММА(СуммаУпр1)/СУММА(Количество1)) КОНЕЦ");
						КонецЕсли;
					
					
						СоответствиеПолейСреднейЦены.Вставить(МеткаУровня,ПолеПользователя.ПутьКДанным);
					
						ВыбранноеПоле=ГруппаПолей.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
						ВыбранноеПоле.Использование	= Истина;
						ВыбранноеПоле.Заголовок		= ПредставлениеКолонкиОтчета(ИмяВидаАнализа,ЯзыкОтчета,СтруктураПеревода,КЭШ,?(ТипЗнч(СтрокаДанных.ДанныеДляСравнения)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования(),СтрокаДанных.ДанныеДляСравнения.Валюта,Неопределено))+?(СтрокаДанных.НомерСтроки>2," #"+МеткаУровня,"");
						ВыбранноеПоле.Поле			= Новый ПолеКомпоновкиДанных(ПолеПользователя.ПутьКДанным);
						ПолеОформления 				= Настройки.УсловноеОформление.Элементы.Добавить();
						ПолеОформления.Использование = Истина;
						ДопПоле 					= ПолеОформления.Поля.Элементы.Добавить();
						ДопПоле.Использование 		= Истина;
						ДопПоле.Поле  				= ВыбранноеПоле.Поле;
						НастроитьОформлениеПоляПоказателя(Настройки,ВыбранноеПоле.Поле,ШиринаКолонкиПоказателя,СтрокаПоказатель.Показатель);
					КонецЦикла;
				КонецЦикла;
				Если ИмяОтчета<>"фин_АнализРассогласованияСтатей" И Отчет.ВыводитьОтклонения Тогда
					СтрокаДанных = Новый Структура("НомерСтроки,ДанныеДляСравнения",Отчет.ДанныеДляАнализа.Количество()+1,Отчет.СценарийДляОтклонений);
					МеткаУровня = Строка(СтрокаДанных.НомерСтроки);
					Для Каждого ВидАнализа Из Отчет.ВидыАналитическихДанных Цикл
						ИмяВидаАнализа = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВидАнализа.ВидДанных);
						
						ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
						ПолеПользователя.Заголовок = "Цена"+МеткаУровня;
						ПолеПользователя.Использование = Истина;
						ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА СУММА(Количество"+МеткаУровня+")=0 ТОГДА 0 ИНАЧЕ СУММА(СуммаУпр"+МеткаУровня+")/СУММА(Количество"+МеткаУровня+") КОНЕЦ");
						
						//ВыбранноеПоле.Заголовок		= ПредставлениеКолонкиОтчета(ИмяВидаАнализа,ЯзыкОтчета,СтруктураПеревода,КЭШ,СтрокаДанных.ДанныеДляСравнения.Валюта)+?(СтрокаДанных.НомерСтроки>2," #"+МеткаУровня,"");
						Если ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.Эталон Тогда
							ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА СУММА(Количество1)=0 ТОГДА 0 ИНАЧЕ СУММА(СуммаУпр1)/СУММА(Количество1) КОНЕЦ");
						ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ИсполнениеАбсолютное Тогда
							ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА СУММА(Количество"+МеткаУровня+")=0 ТОГДА 0 ИНАЧЕ СУММА(СуммаУпр"+МеткаУровня+")/СУММА(Количество"+МеткаУровня+") КОНЕЦ");
						ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.РассмотренныеОтклонения Тогда
							ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА СУММА(Количество"+МеткаУровня+")=0 ТОГДА 0 ИНАЧЕ СУММА(СуммаУпр"+МеткаУровня+")/СУММА(Количество"+МеткаУровня+") КОНЕЦ");
						ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ИсполнениеОтносительное Тогда
							ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("100 * ВЫБОР КОГДА СУММА(Количество1)=0 ИЛИ СУММА(СуммаУпр1)=0 ТОГДА 0 ИНАЧЕ ВЫБОР КОГДА СУММА(Количество"+МеткаУровня+")=0 ТОГДА 0 ИНАЧЕ СУММА(СуммаУпр"+МеткаУровня+")/СУММА(Количество"+МеткаУровня+") КОНЕЦ/(СУММА(СуммаУпр1)/СУММА(Количество1)) КОНЕЦ");
						ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеАбсолютное Тогда
							ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА СУММА(Количество"+МеткаУровня+")=0 ТОГДА 0 ИНАЧЕ СУММА(СуммаУпр"+МеткаУровня+")/СУММА(Количество"+МеткаУровня+") КОНЕЦ - ВЫБОР КОГДА СУММА(Количество1)=0 ТОГДА 0 ИНАЧЕ СУММА(СуммаУпр1)/СУММА(Количество1) КОНЕЦ");
						ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеОтносительное Тогда
							ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("100 * ВЫБОР КОГДА СУММА(Количество1)=0 ИЛИ СУММА(СуммаУпр1)=0 ТОГДА 0 ИНАЧЕ ВЫБОР КОГДА СУММА(Количество"+МеткаУровня+")=0 ТОГДА 0 ИНАЧЕ СУММА(СуммаУпр"+МеткаУровня+")/СУММА(Количество"+МеткаУровня+") КОНЕЦ - ВЫБОР КОГДА СУММА(Количество1)=0 ТОГДА 0 ИНАЧЕ СУММА(СуммаУпр1)/СУММА(Количество1) КОНЕЦ/(СУММА(СуммаУпр1)/СУММА(Количество1)) КОНЕЦ");
						КонецЕсли;
					
					
						СоответствиеПолейСреднейЦены.Вставить(МеткаУровня,ПолеПользователя.ПутьКДанным);
					
						ВыбранноеПоле=ГруппаПолей.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
						ВыбранноеПоле.Использование	= Истина;
						ВыбранноеПоле.Заголовок		= ПредставлениеКолонкиОтчета(ИмяВидаАнализа,ЯзыкОтчета,СтруктураПеревода,КЭШ,СтрокаДанных.ДанныеДляСравнения.Валюта)+?(СтрокаДанных.НомерСтроки>2," #"+МеткаУровня,"");
						ВыбранноеПоле.Поле			= Новый ПолеКомпоновкиДанных(ПолеПользователя.ПутьКДанным);
						ПолеОформления 				= Настройки.УсловноеОформление.Элементы.Добавить();
						ПолеОформления.Использование = Истина;
						ДопПоле 					= ПолеОформления.Поля.Элементы.Добавить();
						ДопПоле.Использование 		= Истина;
						ДопПоле.Поле  				= ВыбранноеПоле.Поле;
						НастроитьОформлениеПоляПоказателя(Настройки,ВыбранноеПоле.Поле,ШиринаКолонкиПоказателя,СтрокаПоказатель.Показатель);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// настраиваем пользовательские поля
		
		Если ИмяОтчета<>"фин_МониторингЛимитовИЦелевыхЗначенийПоБюджетам" И ГруппировкаСтатья<>Неопределено Тогда
			Если ИмяОтчета = "фин_ВременнойАнализБюджетныхДанных" Тогда
				Для Каждого СтрокаДанных Из Отчет.ДанныеОтчета Цикл
					Если (НЕ СтрокаДанных.Использование) Тогда
						Продолжить;
					КонецЕсли;
					Метка = Строка(СтрокаДанных.НомерСтроки);
					Имя = СтрокаДанных.ИдентификаторПоля;

					Для Каждого Элемент Из Настройки.ПользовательскиеПоля.Элементы Цикл
						Если Элемент.Заголовок = Имя+"Итоги" Тогда
							ПутьКДанным = Элемент.ПутьКДанным;
						КонецЕсли;
					КонецЦикла;
					Если СтрокаДанных.ПоФормуле Тогда
						Заголовок = Имя+"ИтогиПоГруппе";
						//Иначе
						//	Продолжить;
					КонецЕсли;
					ДобавитьУсловноеОформлениеПоГруппеСтатей(ГруппировкаСтатья.УсловноеОформление,Новый ПолеКомпоновкиДанных(Имя),Имя,ПутьКДанным);
					
					Для Каждого Элемент Из Настройки.ПользовательскиеПоля.Элементы Цикл
						Если Элемент.Заголовок = Заголовок Тогда
							ПутьКДанным = Элемент.ПутьКДанным;
						КонецЕсли;
					КонецЦикла;
					
					ДобавитьУсловноеОформлениеПоГруппеСтатей(ГруппировкаСтатья.УсловноеОформление,СоответствиеПользовательскихПолей.Получить(Имя),Имя,ПутьКДанным);
					
					Для Каждого ВидИтоговойФункции Из Метаданные.Перечисления.фин_ИтоговыеФункции.ЗначенияПеречисления Цикл
						ДобавитьПользовательскоеПолеИтоговыхФункцийВУсловноеОформление(ВидИтоговойФункции,Настройки,ГруппировкаСтатья,Имя,Имя,СоответствиеПользовательскихПолей.Получить(Имя));
					КонецЦикла;
					Для Каждого Элемент Из Настройки.ПользовательскиеПоля.Элементы Цикл
						Если Элемент.Заголовок = Имя+"ИтогиСумма" Тогда
							ПутьКДанным = Элемент.ПутьКДанным;
						КонецЕсли;
					КонецЦикла;
					ДобавитьУсловноеОформлениеПоДетальнойСтатье(ГруппировкаСтатья.УсловноеОформление,СоответствиеПользовательскихПолей.Получить(Имя),Имя,ПутьКДанным,Перечисления.фин_ИтоговыеФункции.ПустаяСсылка());

				КонецЦикла;
			Иначе
				Для Каждого СтрокаПоказатель Из Показатели Цикл
					Если ТипЗнч(СтрокаПоказатель.Показатель)=Тип("СправочникСсылка.фин_ДополнительныеРасчетныеПоляОтчетовПоБюджетам") ИЛИ (Найти(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель),"Цена")<>0) Тогда
						Продолжить;
					КонецЕсли;
					Если ИмяОтчета = "фин_ИсполнениеБюджета" ИЛИ ИмяОтчета = "фин_СравнительныйАнализ" ИЛИ ИмяОтчета="фин_АнализРассогласованияСтатей" Тогда
						Для Каждого СтрокаДанных Из Отчет.ДанныеДляАнализа Цикл
							Метка = Строка(СтрокаДанных.НомерСтроки);
							Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель);
							Для Каждого Элемент Из Настройки.ПользовательскиеПоля.Элементы Цикл
								Если Элемент.Заголовок = Строка(СтрокаПоказатель.Показатель)+Метка+"Итоги" Тогда
									ПутьКДанным = Элемент.ПутьКДанным;
								КонецЕсли;
							КонецЦикла;
							ДобавитьУсловноеОформлениеПоГруппеСтатей(ГруппировкаСтатья.УсловноеОформление,Новый ПолеКомпоновкиДанных(Имя+Метка),Имя+Метка,ПутьКДанным);
							Если СтрокаДанных.НомерСтроки<>1 Тогда
								Для Каждого ВидАнализа Из Отчет.ВидыАналитическихДанных Цикл
									ИспользуемаяМетка = Метка;
									ИмяВидаАнализа = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВидАнализа.ВидДанных);
									Если ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ИсполнениеОтносительное Тогда
										Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоГруппе";
									ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеАбсолютное Тогда
										Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоГруппе";
									ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеОтносительное Тогда
										Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоГруппе";
									//ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.РассмотренныеОтклонения Тогда
									//	ИспользуемаяМетка = Строка(Отчет.ДанныеДляАнализа.Количество()+1);
									Иначе
										Продолжить;
									КонецЕсли;
									Для Каждого Элемент Из Настройки.ПользовательскиеПоля.Элементы Цикл
										Если Элемент.Заголовок = Заголовок Тогда
											ПутьКДанным = Элемент.ПутьКДанным;
										КонецЕсли;
									КонецЦикла;
									ДобавитьУсловноеОформлениеПоГруппеСтатей(ГруппировкаСтатья.УсловноеОформление,СоответствиеПользовательскихПолей.Получить(Имя+ИмяВидаАнализа+ИспользуемаяМетка),Имя+ИмяВидаАнализа+ИспользуемаяМетка,ПутьКДанным);
								КонецЦикла;
							КонецЕсли;
							
							Для Каждого ВидИтоговойФункции Из Метаданные.Перечисления.фин_ИтоговыеФункции.ЗначенияПеречисления Цикл
								ДобавитьПользовательскоеПолеИтоговыхФункцийВУсловноеОформление(ВидИтоговойФункции,Настройки,ГруппировкаСтатья,Имя+Метка,Строка(СтрокаПоказатель.Показатель)+Метка);
								Если СтрокаДанных.НомерСтроки<>1 Тогда
									Для Каждого ВидАнализа Из Отчет.ВидыАналитическихДанных Цикл
										ИспользуемаяМетка = Метка;
										Если ВидИтоговойФункции.Имя = "НеРассчитывать" ИЛИ ВидАнализа.ВидДанных = Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ИсполнениеАбсолютное ИЛИ ВидАнализа.ВидДанных = Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.Эталон Тогда
											Продолжить;
										ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.РассмотренныеОтклонения Тогда
											//ИспользуемаяМетка = Строка(Отчет.ДанныеДляАнализа.Количество()+1);
											//Заголовок = Строка(СтрокаПоказатель.Показатель)+ИспользуемаяМетка+"Итоги"+ВидИтоговойФункции.Имя;
											//ДобавитьПользовательскоеПолеИтоговыхФункцийВУсловноеОформление(ВидИтоговойФункции,Настройки,ГруппировкаСтатья,Имя+ИспользуемаяМетка,Строка(СтрокаПоказатель.Показатель)+ИспользуемаяМетка,СоответствиеПользовательскихПолей.Получить(Заголовок),Заголовок);
										Иначе
											ИмяВидаАнализа = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВидАнализа.ВидДанных);
											Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоСтатье"+ВидИтоговойФункции.Имя;
											ДобавитьПользовательскоеПолеИтоговыхФункцийВУсловноеОформление(ВидИтоговойФункции,Настройки,ГруппировкаСтатья,Имя+ИспользуемаяМетка,Строка(СтрокаПоказатель.Показатель)+ИспользуемаяМетка,СоответствиеПользовательскихПолей.Получить(Имя+ИмяВидаАнализа+ИспользуемаяМетка),Заголовок);
										КонецЕсли;
									КонецЦикла;
								КонецЕсли;
							КонецЦикла;

							Для Каждого Элемент Из Настройки.ПользовательскиеПоля.Элементы Цикл
								Если Элемент.Заголовок = Строка(СтрокаПоказатель.Показатель)+Метка+"ИтогиСумма" Тогда
									ПутьКДанным = Элемент.ПутьКДанным;
								КонецЕсли;
							КонецЦикла;
							
							ДобавитьУсловноеОформлениеПоДетальнойСтатье(ТаблицаБюджета.УсловноеОформление,Новый ПолеКомпоновкиДанных(Имя+Метка),Имя+Метка,ПутьКДанным,Перечисления.фин_ИтоговыеФункции.ПустаяСсылка());

						КонецЦикла;
						Если ИмяОтчета<>"фин_АнализРассогласованияСтатей" И Отчет.ВыводитьОтклонения Тогда
							СтрокаДанных = Новый Структура("НомерСтроки,ДанныеДляСравнения",Отчет.ДанныеДляАнализа.Количество()+1,Отчет.СценарийДляОтклонений);
							Метка = Строка(СтрокаДанных.НомерСтроки);
							Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель);
							Для Каждого Элемент Из Настройки.ПользовательскиеПоля.Элементы Цикл
								Если Элемент.Заголовок = Строка(СтрокаПоказатель.Показатель)+Метка+"Итоги" Тогда
									ПутьКДанным = Элемент.ПутьКДанным;
								КонецЕсли;
							КонецЦикла;
							ДобавитьУсловноеОформлениеПоГруппеСтатей(ГруппировкаСтатья.УсловноеОформление,Новый ПолеКомпоновкиДанных(Имя+Метка),Имя+Метка,ПутьКДанным);
							//Если СтрокаДанных.НомерСтроки<>1 Тогда
							//	Для Каждого ВидАнализа Из Отчет.ВидыАналитическихДанных Цикл
							//		ИмяВидаАнализа = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВидАнализа.ВидДанных);
							//		Если ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ИсполнениеОтносительное Тогда
							//			Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоГруппе";
							//		ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеАбсолютное Тогда
							//			Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоГруппе";
							//		ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеОтносительное Тогда
							//			Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоГруппе";
							//		Иначе
							//			Продолжить;
							//		КонецЕсли;
							//		Для Каждого Элемент Из Настройки.ПользовательскиеПоля.Элементы Цикл
							//			Если Элемент.Заголовок = Заголовок Тогда
							//				ПутьКДанным = Элемент.ПутьКДанным;
							//			КонецЕсли;
							//		КонецЦикла;
							//		ДобавитьУсловноеОформлениеПоГруппеСтатей(ГруппировкаСтатья.УсловноеОформление,СоответствиеПользовательскихПолей.Получить(Имя+ИмяВидаАнализа+Метка),Имя+ИмяВидаАнализа+Метка,ПутьКДанным);
							//	КонецЦикла;
							//КонецЕсли;
							//
							//Для Каждого ВидИтоговойФункции Из Метаданные.Перечисления.фин_ИтоговыеФункции.ЗначенияПеречисления Цикл
							//	ДобавитьПользовательскоеПолеИтоговыхФункцийВУсловноеОформление(ВидИтоговойФункции,Настройки,ГруппировкаСтатья,Имя+Метка,Строка(СтрокаПоказатель.Показатель)+Метка);
							//	Если СтрокаДанных.НомерСтроки<>1 Тогда
							//		Для Каждого ВидАнализа Из Отчет.ВидыАналитическихДанных Цикл
							//			Если ВидИтоговойФункции.Имя = "НеРассчитывать" ИЛИ ВидАнализа.ВидДанных = Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.РассмотренныеОтклонения ИЛИ ВидАнализа.ВидДанных = Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ИсполнениеАбсолютное ИЛИ ВидАнализа.ВидДанных = Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.Эталон Тогда
							//				Продолжить;
							//			КонецЕсли;
							//			ИмяВидаАнализа = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВидАнализа.ВидДанных);
							//			Заголовок = Имя+ИмяВидаАнализа+МеткаУровня+"ИтогиПоСтатье"+ВидИтоговойФункции.Имя;
							//			ДобавитьПользовательскоеПолеИтоговыхФункцийВУсловноеОформление(ВидИтоговойФункции,Настройки,ГруппировкаСтатья,Имя+Метка,Строка(СтрокаПоказатель.Показатель)+Метка,СоответствиеПользовательскихПолей.Получить(Имя+ИмяВидаАнализа+Метка),Заголовок);
							//		КонецЦикла;
							//	КонецЕсли;
							//КонецЦикла;

							//Для Каждого Элемент Из Настройки.ПользовательскиеПоля.Элементы Цикл
							//	Если Элемент.Заголовок = Строка(СтрокаПоказатель.Показатель)+Метка+"ИтогиСумма" Тогда
							//		ПутьКДанным = Элемент.ПутьКДанным;
							//	КонецЕсли;
							//КонецЦикла;
							//
							//ДобавитьУсловноеОформлениеПоДетальнойСтатье(ТаблицаБюджета.УсловноеОформление,Новый ПолеКомпоновкиДанных(Имя+Метка),Имя+Метка,ПутьКДанным,Перечисления.фин_ИтоговыеФункции.ПустаяСсылка());

						КонецЕсли;
					ИначеЕсли ИмяОтчета = "фин_СводКорректировокИОтклоненийПоБюджетам" Тогда
						Для Каждого ВидАнализа Из Отчет.АналитическиеПоляСводаКорректировок Цикл
							Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель)+фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВидАнализа.Поле);
							НастроитьПользовательскоеПолеПоПоказателю(Имя,ГруппировкаСтатья,ТаблицаБюджета,Настройки,СтрокаПоказатель,Имя);

						КонецЦикла;
					Иначе 
						Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель);
						НастроитьПользовательскоеПолеПоПоказателю(Имя,ГруппировкаСтатья,ТаблицаБюджета,Настройки,СтрокаПоказатель,Строка(СтрокаПоказатель.Показатель));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТаблицаОтчета_Настройки) Тогда
			
			
			ПараметрВывода=ТаблицаБюджета.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьЗаголовок"));
			ПараметрВывода.Использование=Истина;
			ПараметрВывода.Значение= ?(ТаблицаОтчета_Настройки.ОтображатьЗаголовок,ТипВыводаТекстаКомпоновкиДанных.Выводить,ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
			ПараметрВывода=ТаблицаБюджета.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок"));
			ПараметрВывода.Использование=Истина;
			ПараметрВывода.Значение= фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина(ТаблицаОтчета_Настройки,ЯзыкОтчета);
		КонецЕсли;
			
		//новые значения параметров вывода
		ПараметрВывода=Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьЗаголовок"));
		ПараметрВывода.Использование=Истина;
		ПараметрВывода.Значение= ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		
		ПараметрВывода=Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВертикальноеРасположениеОбщихИтогов"));
		ПараметрВывода.Использование=Истина;
		ПараметрВывода.Значение=РасположениеИтоговКомпоновкиДанных.Нет;
		
		ПараметрВывода=Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("МакетОформления"));
		ПараметрВывода.Использование=Истина;
		ПараметрВывода.Значение=фин_БюджетированиеОбщегоНазначения.ПолучитьМакетОформленияУпр();
		
		Если ЗначениеЗаполнено(РасположениеИтоговОтчета) И ИмяОтчета <> "фин_ВременнойАнализБюджетныхДанных" И ИмяОтчета<>"фин_МониторингЛимитовИЦелевыхЗначенийПоБюджетам" Тогда
			ПараметрВывода=Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ГоризонтальноеРасположениеОбщихИтогов"));
			ПараметрВывода.Использование=Истина;
			ПараметрВывода.Значение=РасположениеИтоговКомпоновкиДанных[фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(РасположениеИтоговОтчета)];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТаблицаОтчета_Настройки) И ТаблицаОтчета_Настройки.НастройкаИтогов Тогда
			Если ЗначениеЗаполнено(ТаблицаОтчета_Настройки.ВертикальноеРасположениеОбщихИтогов) Тогда
				ПараметрВывода=Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВертикальноеРасположениеОбщихИтогов"));
				ПараметрВывода.Использование=Истина;
				ПараметрВывода.Значение=РасположениеИтоговКомпоновкиДанных[фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ТаблицаОтчета_Настройки.ВертикальноеРасположениеОбщихИтогов)];
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТаблицаОтчета_Настройки.ГоризонтальноеРасположениеОбщихИтогов) И ИмяОтчета <> "фин_ВременнойАнализБюджетныхДанных" И ИмяОтчета<>"фин_МониторингЛимитовИЦелевыхЗначенийПоБюджетам" Тогда
				ПараметрВывода=Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ГоризонтальноеРасположениеОбщихИтогов"));
				ПараметрВывода.Использование=Истина;
				ПараметрВывода.Значение=РасположениеИтоговКомпоновкиДанных[фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ТаблицаОтчета_Настройки.ГоризонтальноеРасположениеОбщихИтогов)];
			КонецЕсли;
			
//		Иначе
			
		КонецЕсли;
		
		ПараметрВывода=Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьПараметрыДанных"));
		ПараметрВывода.Использование=Истина;
		ПараметрВывода.Значение=ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	
	КонецЦикла;
	
	Если ИмяОтчета<>"фин_МониторингЛимитовИЦелевыхЗначенийПоБюджетам" Тогда
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Периодичность",ПериодичностьОтчета);
	Иначе
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ИспользованиеКонтроля",Отчет.ИспользованиеКонтроля);
	КонецЕсли;
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ЯзыкОтчета",ЯзыкОтчета);
	
	Возврат Настройки;
КонецФункции

Процедура НастроитьПользовательскоеПолеПоПоказателю(Имя,ГруппировкаСтатья,ТаблицаБюджета,Настройки,СтрокаПоказатель,ФрагментЗаголовка)
	ПутьКДанным = "";
	Для Каждого Элемент Из Настройки.ПользовательскиеПоля.Элементы Цикл
		Если Элемент.Заголовок = ФрагментЗаголовка+"Итоги" Тогда
			ПутьКДанным = Элемент.ПутьКДанным;
		КонецЕсли;
	КонецЦикла;
	ДобавитьУсловноеОформлениеПоГруппеСтатей(ГруппировкаСтатья.УсловноеОформление,,Имя,ПутьКДанным);
	
	ДобавитьПользовательскиеПоляИтоговыхФункцийВУсловноеОформление(Настройки,ТаблицаБюджета,Имя,ФрагментЗаголовка);

	Для Каждого Элемент Из Настройки.ПользовательскиеПоля.Элементы Цикл
		Если Элемент.Заголовок = ФрагментЗаголовка+"ИтогиСумма" Тогда   // ?? ФрагментЗаголовка вместо   Строка(СтрокаПоказатель.Показатель) ???
			ПутьКДанным = Элемент.ПутьКДанным;
		КонецЕсли;
	КонецЦикла;
	ДобавитьУсловноеОформлениеПоДетальнойСтатье(ТаблицаБюджета.УсловноеОформление,Новый ПолеКомпоновкиДанных(Имя),Имя,ПутьКДанным,Перечисления.фин_ИтоговыеФункции.ПустаяСсылка());

КонецПроцедуры

Процедура ДобавитьПользовательскиеПоляИтоговыхФункцийВУсловноеОформление(Настройки,ТаблицаБюджета,Имя,ФрагментЗаголовка)
	Для Каждого ВидИтоговойФункции Из Метаданные.Перечисления.фин_ИтоговыеФункции.ЗначенияПеречисления Цикл
		ДобавитьПользовательскоеПолеИтоговыхФункцийВУсловноеОформление(ВидИтоговойФункции,Настройки,ТаблицаБюджета,Имя,ФрагментЗаголовка);
	КонецЦикла;	
КонецПроцедуры

Процедура ДобавитьПользовательскоеПолеИтоговыхФункцийВУсловноеОформление(ВидИтоговойФункции,Настройки,ТаблицаБюджета,Имя,ФрагментЗаголовка,ПолеСКД = Неопределено,ИтоговыйЗаголовокПоиска = Неопределено)
	ПутьКДанным = "";
	Для Каждого Элемент Из Настройки.ПользовательскиеПоля.Элементы Цикл
		Если Элемент.Заголовок = ?(ИтоговыйЗаголовокПоиска = Неопределено,ФрагментЗаголовка+"Итоги"+ВидИтоговойФункции.Имя,ИтоговыйЗаголовокПоиска) Тогда
			ПутьКДанным = Элемент.ПутьКДанным;
		КонецЕсли;
	КонецЦикла;
	ДобавитьУсловноеОформлениеПоДетальнойСтатье(ТаблицаБюджета.УсловноеОформление,?(ПолеСКД = Неопределено,Новый ПолеКомпоновкиДанных(Имя),ПолеСКД),Имя,ПутьКДанным,Перечисления.фин_ИтоговыеФункции[ВидИтоговойФункции.Имя]);
КонецПроцедуры

Процедура ДобавитьУсловноеОформлениеПоГруппеСтатей(УсловноеОформление,ПолеСКД=Неопределено,ИмяПоля,ПользовательскоеПоле)
	ПолеОформления 					= УсловноеОформление.Элементы.Добавить();
	ПолеОформления.Использование 	= Истина;
	ДопПоле 						= ПолеОформления.Поля.Элементы.Добавить();
	ДопПоле.Использование 			= Истина;
	ДопПоле.Поле  					= ?(ПолеСКД = Неопределено,Новый ПолеКомпоновкиДанных(ИмяПоля),ПолеСКД);
	ПолеОформления.Оформление.Элементы.Найти("Текст").Значение 		= Новый ПолеКомпоновкиДанных(ПользовательскоеПоле);
	ПолеОформления.Оформление.Элементы.Найти("Текст").Использование = Истина;
	// условие на то что это детальная статья
	ОтборОформления = ПолеОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.Использование 	= Истина;
	ОтборОформления.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СтатьяБюджета.ЭтоГруппа");
	ОтборОформления.ПравоеЗначение 	= Истина;
КонецПроцедуры

Процедура ДобавитьУсловноеОформлениеПоДетальнойСтатье(УсловноеОформление,ПолеСКД=Неопределено,ИмяПоля,ПользовательскоеПоле,ИтоговаяФункция)
	ПолеОформления 					= УсловноеОформление.Элементы.Добавить();
	ПолеОформления.Использование 	= Истина;
	ДопПоле 						= ПолеОформления.Поля.Элементы.Добавить();
	ДопПоле.Использование 			= Истина;
	ДопПоле.Поле  					= ?(ПолеСКД = Неопределено,Новый ПолеКомпоновкиДанных(ИмяПоля),ПолеСКД);
	ПолеОформления.Оформление.Элементы.Найти("Текст").Значение 		= ?(ИтоговаяФункция = Перечисления.фин_ИтоговыеФункции.НеРассчитывать,"",Новый ПолеКомпоновкиДанных(ПользовательскоеПоле));
	ПолеОформления.Оформление.Элементы.Найти("Текст").Использование = Истина;
	// условие на то что это детальная статья
	ОтборОформления = ПолеОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.Использование 	= Истина;
	ОтборОформления.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СтатьяБюджета.ЭтоГруппа");
	ОтборОформления.ПравоеЗначение 	= Ложь;
	// условие на функцию
	ОтборОформления = ПолеОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.Использование 	= Истина;
	ОтборОформления.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СтатьяБюджета.ИтоговаяФункция");
	ОтборОформления.ПравоеЗначение 	= ИтоговаяФункция;
КонецПроцедуры

Процедура ДобавитьРасчетныйПоказательВНастройкиСКД(Настройки,ГруппаПолей,Показатель,ШиринаКолонкиПоказателя)
	ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
	ПолеПользователя.Заголовок = Показатель;
	ПолеПользователя.Использование = Истина;
	Попытка
		Если ТипЗнч(Показатель)=тип("СправочникСсылка.фин_ДополнительныеРасчетныеПоляОтчетовПоБюджетам") Тогда
			ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей(Показатель.ВыражениеИтоговыхЗаписей);
			ПолеПользователя.УстановитьВыражениеДетальныхЗаписей(Показатель.ВыражениеДетальныхЗаписей);
		Иначе
			ИмяПоказателя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Показатель);
			ПолеСуммы = СтрЗаменить(ИмяПоказателя,"Цена","Сумма");
			ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА СУММА(Количество)=0 ТОГДА 0 ИНАЧЕ СУММА("+ПолеСуммы+")/СУММА(Количество) КОНЕЦ");
			ПолеПользователя.УстановитьВыражениеДетальныхЗаписей("ВЫБОР КОГДА Количество=0 ТОГДА 0 ИНАЧЕ "+ПолеСуммы+"/Количество КОНЕЦ");
		КонецЕсли;
		
		ВыбранноеПоле=ГруппаПолей.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование	= Истина;
		ВыбранноеПоле.Заголовок		= Показатель;
		ВыбранноеПоле.Поле			= Новый ПолеКомпоновкиДанных(ПолеПользователя.ПутьКДанным);
		НастроитьОформлениеПоляПоказателя(Настройки,ВыбранноеПоле.Поле,ШиринаКолонкиПоказателя,Показатель);
		
		//Если ДобавлятьВВыбранные Тогда
			//Поле = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			//Поле.Использование	= Истина;
			//Поле.Заголовок		= Показатель;
			//Поле.Поле			= Новый ПолеКомпоновкиДанных(ПолеПользователя.ПутьКДанным);
		//КонецЕсли;
	Исключение
	    ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось добавить расчетное поле """+Показатель+""" по причине:
		|	"+ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Процедура ДобавитьПоказательВНастройкиСКД(Настройки,ГруппаПолей,СтрокаПоказатель,Имя,ЗаголовокПоляСКД,ЗаголовокПользовательскогоПоля,ШиринаКолонкиПоказателя,ИмяПользовательскогоПоля=Неопределено,ДобавлятьПользовательскиеПоля = Истина,ДобавлятьВВыбранные = Истина,Формат=Неопределено,СоответствиеПользовательскихПолей=Неопределено,КлючСоответствия=Неопределено,ПолеПоказателя = "Показатель")
	Если ИмяПользовательскогоПоля = Неопределено Тогда
		ИмяПользовательскогоПоля = Имя;
	КонецЕсли;
	ВыбранноеПоле=ГруппаПолей.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Использование	= Истина;
	ВыбранноеПоле.Заголовок		= ЗаголовокПоляСКД;
	ВыбранноеПоле.Поле			= Новый ПолеКомпоновкиДанных(Имя);
	Если СоответствиеПользовательскихПолей<>Неопределено Тогда
		СоответствиеПользовательскихПолей.Вставить(?(КлючСоответствия=Неопределено,Имя,КлючСоответствия),ВыбранноеПоле.Поле);
	КонецЕсли;
	НастроитьОформлениеПоляПоказателя(Настройки,ВыбранноеПоле.Поле,ШиринаКолонкиПоказателя,СтрокаПоказатель[ПолеПоказателя],Формат);
	
	Если ДобавлятьВВыбранные Тогда
		Поле = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		Поле.Использование	= Истина;
		Поле.Заголовок		= ЗаголовокПоляСКД;
		Поле.Поле			= Новый ПолеКомпоновкиДанных(Имя);
	КонецЕсли;

	Если ДобавлятьПользовательскиеПоля Тогда
		ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
		ПолеПользователя.Заголовок = ЗаголовокПользовательскогоПоля+"Итоги";
		ПолеПользователя.Использование = Истина;
		ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("Сумма(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+Имя+" КОНЕЦ)");
		ДобавитьПользовательскиеПоляИтоговыхФункций(Имя,ЗаголовокПользовательскогоПоля,Настройки);
	КонецЕсли;
КонецПроцедуры

Процедура НастроитьОформлениеПоляПоказателя(Настройки,ВыбранноеПоле,ШиринаКолонкиПоказателя,Показатель,Формат=Неопределено)
	ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
	ДопПоле.Использование = Истина;
	ДопПоле.Поле  = ВыбранноеПоле;
	ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = ШиринаКолонкиПоказателя;
	ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = ШиринаКолонкиПоказателя;
	ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("Формат").Значение = ?(Формат=Неопределено,?(Показатель="Количество","ЧЦ=15; ЧДЦ=3","ЧЦ=15; ЧДЦ=2"),Формат);
	ПолеОформления.Оформление.Элементы.Найти("Формат").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
	ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Верх;
	ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Право;
	ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
КонецПроцедуры

Процедура ДобавитьПользовательскиеПоляИтоговыхФункций(Имя,ЗаголовокПользовательскогоПоля,Настройки,ИмяПоляИтогов="Итоги",Формула=Неопределено)
	Для Каждого ВидИтоговойФункции Из Метаданные.Перечисления.фин_ИтоговыеФункции.ЗначенияПеречисления Цикл
		Если ВидИтоговойФункции.Имя = "НеРассчитывать" Тогда
			Продолжить;
		КонецЕсли;
		ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
		ПолеПользователя.Заголовок = ЗаголовокПользовательскогоПоля+ИмяПоляИтогов+ВидИтоговойФункции.Имя;
		ПолеПользователя.Использование = Истина;
		Если Формула=Неопределено Тогда
			ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей(ВидИтоговойФункции.Имя+"("+Имя+")");
		Иначе
			Если ИмяПоляИтогов = "ИтогиСтатья" Тогда
				ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей(Формула);
			Иначе
				ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей(ВидИтоговойФункции.Имя+"("+Формула+")");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ДобавитьГруппировкуВНастройкиСКД(Настройки,СтрокаГруппировки,Отчет,ИмяОтчета,ГруппировкаСтатья,ТекущийРодительСтроки,ТекущийРодительКолонки,Колонка = Ложь,ГруппировкаАналитика=Неопределено,ЭтоПростоеПоле=Ложь,ОтборТекущейТаблицы = Неопределено,ОтключитьОтборПоПустымПоказателям=Ложь)
	Имя = ?(ТипЗнч(СтрокаГруппировки.Измерение)=Тип("СправочникСсылка.фин_ДополнительныеРазрезыОтчетовПоБюджетам"),"Поле"+СтрокаГруппировки.Измерение.Код,фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.Измерение));
	ОсновноеПолеДобавлено = Ложь;
	ИмяДобавленногоСоставногоПоля = Неопределено;
	Если ГруппировкаАналитика<>Неопределено Тогда
		НоваяГруппировкаАналитикиОтчета = ГруппировкаАналитика;
	ИначеЕсли Колонка Тогда
		НоваяГруппировкаАналитикиОтчета = ?(ТипЗнч(ТекущийРодительКолонки)=Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") ИЛИ ТипЗнч(ТекущийРодительКолонки)=Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных"),ТекущийРодительКолонки.Добавить(),ТекущийРодительКолонки.Структура.Добавить());
	Иначе
		НоваяГруппировкаАналитикиОтчета = ?(ТипЗнч(ТекущийРодительСтроки)=Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") ИЛИ ТипЗнч(ТекущийРодительСтроки)=Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных"),ТекущийРодительСтроки.Добавить(),ТекущийРодительСтроки.Структура.Добавить());
	КонецЕсли;
	НоваяГруппировкаАналитикиОтчета.Использование = Истина;
	СоставПолей = ?(ЗначениеЗаполнено(СтрокаГруппировки.Состав),ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Состав),Неопределено);
	Если (НЕ СтрокаГруппировки.СоставноеПоле) ИЛИ (НЕ ТипЗнч(СоставПолей)=Тип("СписокЗначений")) ИЛИ СоставПолей.Количество()=0 Тогда
		ПолеРазрезаАналитики=НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеРазрезаАналитики.Использование	=Истина;
		ПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(Имя);
		ОсновноеПолеДобавлено = Истина;
	Иначе
		Поля = СоставПолей;
		Для Каждого СтрокаПолей Из Поля Цикл
			ДопПоле = СтрокаПолей.Значение;
			Если ДопПоле="ЗначениеПоля" Тогда
				ПолеРазрезаАналитики=НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеРазрезаАналитики.Использование	=Истина;
				ПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(Имя);
				ОсновноеПолеДобавлено = Истина;
			ИначеЕсли ТипЗнч(ДопПоле)<>Тип("Строка") Тогда
				ДопПолеРазрезаАналитики=НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ДопПолеРазрезаАналитики.Использование	=Истина;
				ДопПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ДопПоле));
				ИмяДобавленногоСоставногоПоля =  фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ДопПоле);
			Иначе
				ДопПолеРазрезаАналитики=НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ДопПолеРазрезаАналитики.Использование	=Истина;
				ДопПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(?(Найти(ДопПоле,".")<>0,СтрЗаменить(ДопПоле,"ЗначениеПоля",Имя),Имя+"."+ДопПоле));
				ИмяДобавленногоСоставногоПоля = ?(Найти(ДопПоле,".")<>0,СтрЗаменить(ДопПоле,"ЗначениеПоля",Имя),Имя+"."+ДопПоле);
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(СтрокаГруппировки.РасположениеРеквизитов) И ТипЗнч(НоваяГруппировкаАналитикиОтчета)<>Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов").Использование = Истина;
			НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов").Значение = РасположениеРеквизитовКомпоновкиДанных[фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.РасположениеРеквизитов)];
		КонецЕсли;
	КонецЕсли;
	Если ПолеРазрезаАналитики<>Неопределено И (СтрокаГруппировки.ВидГруппировки = Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаСтрокСИерархией ИЛИ СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.КолонкаСИерерахией) И Имя <>"ПериодПланирования" Тогда
		ПолеРазрезаАналитики.ТипГруппировки	= ТипГруппировкиКомпоновкиДанных.Иерархия;
	ИначеЕсли ПолеРазрезаАналитики<>Неопределено И СтрокаГруппировки.ВидГруппировки = Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаТолькоИерархия И Имя <>"ПериодПланирования" Тогда
		ПолеРазрезаАналитики.ТипГруппировки	= ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
	КонецЕсли;
	ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	Если ОсновноеПолеДобавлено ИЛИ ИмяДобавленногоСоставногоПоля<>Неопределено Тогда
		ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
		ДопПоле.Использование = Истина;
		ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(?(ОсновноеПолеДобавлено,Имя,ИмяДобавленногоСоставногоПоля));
	КонецЕсли;
	Если (ИмяОтчета = "фин_ИсполнениеБюджета" ИЛИ ИмяОтчета = "фин_СравнительныйАнализ" ИЛИ ИмяОтчета="фин_АнализРассогласованияСтатей") И ЗначениеЗаполнено(СтрокаГруппировки.ОтборПоУровнюЗначимости) И СтрокаГруппировки.ОтборПоУровнюЗначимости<>Перечисления.фин_ВариантыОтбораПоУровнюЗначимости.НеФильтровать Тогда
		Если СтрокаГруппировки.ОтборПоУровнюЗначимости=Перечисления.фин_ВариантыОтбораПоУровнюЗначимости.ПоАбсолютномуСуммовомуОтклонению ИЛИ СтрокаГруппировки.ОтборПоУровнюЗначимости=Перечисления.фин_ВариантыОтбораПоУровнюЗначимости.ПоОтносительномуСуммовомуОтклонению Тогда
			Если Отчет.Показатели.Количество()>Отчет.Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.Количество)).Количество() Тогда
				ГруппаОтбора 				=  НоваяГруппировкаАналитикиОтчета.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтбора.Использование 	= Истина;
				ГруппаОтбора.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				ГруппаОтбора.Применение 	= ТипПримененияОтбораКомпоновкиДанных.Элементы;
				Для Каждого СтрокаДанных Из Отчет.ДанныеДляАнализа Цикл
					Если СтрокаДанных.НомерСтроки = 1 Тогда
						Продолжить;
					КонецЕсли;
					МеткаУровня = Строка(СтрокаДанных.НомерСтроки);
					
					Для Каждого Показатель Из Отчет.Показатели Цикл
						
						Если Показатель.Показатель = Перечисления.фин_РесурсыДанныхБюджетирования.Количество Тогда
							Продолжить;
						КонецЕсли;
						ИмяПоказателя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Показатель.Показатель);
						
						ПользовательскоеПолеМаксимум 				= Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
						ПользовательскоеПолеМаксимум.Заголовок 		= "Максимум "+ИмяПоказателя+" #"+ Строка(СтрокаГруппировки.НомерСтроки);
						ПользовательскоеПолеМаксимум.Использование 	= Истина;
						ПользовательскоеПолеМаксимум.УстановитьВыражениеИтоговыхЗаписей("СУММА("+ИмяПоказателя+"1)"+ДополнениеКВыражениюПоУровнюЗначимости(СтрокаГруппировки.ОтборПоУровнюЗначимости,СтрокаГруппировки.УровеньЗначимости));
						//ПользовательскоеПолеМаксимум.УстановитьВыражениеДетальныхЗаписей(ИмяПоказателя+"1"+ДополнениеКВыражениюПоУровнюЗначимости(СтрокаГруппировки.ОтборПоУровнюЗначимости,СтрокаГруппировки.УровеньЗначимости));
						
						Отбор 					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
						Отбор.Использование 	= Истина;
						Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ИмяПоказателя+Строка(СтрокаДанных.НомерСтроки));
						Отбор.ПравоеЗначение 	= Новый ПолеКомпоновкиДанных(ПользовательскоеПолеМаксимум.ПутьКДанным);
						
						ПользовательскоеПолеМинимум 				= Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
						ПользовательскоеПолеМинимум.Заголовок 		= "Максимум "+ИмяПоказателя+" #"+ Строка(СтрокаГруппировки.НомерСтроки);
						ПользовательскоеПолеМинимум.Использование 	= Истина;
						ПользовательскоеПолеМинимум.УстановитьВыражениеИтоговыхЗаписей("СУММА("+ИмяПоказателя+"1)"+ДополнениеКВыражениюПоУровнюЗначимости(СтрокаГруппировки.ОтборПоУровнюЗначимости,СтрокаГруппировки.УровеньЗначимости,Ложь));
						//ПользовательскоеПолеМинимум.УстановитьВыражениеДетальныхЗаписей(ИмяПоказателя+"1"+ДополнениеКВыражениюПоУровнюЗначимости(СтрокаГруппировки.ОтборПоУровнюЗначимости,СтрокаГруппировки.УровеньЗначимости,Ложь));
						
						Отбор 					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
						Отбор.Использование 	= Истина;
						Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ИмяПоказателя+Строка(СтрокаДанных.НомерСтроки));
						Отбор.ПравоеЗначение 	= Новый ПолеКомпоновкиДанных(ПользовательскоеПолеМинимум.ПутьКДанным);
					
//					Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Показатель.Показатель)+Строка(СтрокаДанных.НомерСтроки));

					КонецЦикла;
					
				КонецЦикла;
				НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
				НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
			КонецЕсли;
		Иначе
			Если Отчет.Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.Количество)).Количество()>0 Тогда
				ГруппаОтбора 				=  НоваяГруппировкаАналитикиОтчета.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтбора.Использование 	= Истина;
				ГруппаОтбора.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				ГруппаОтбора.Применение 	= ТипПримененияОтбораКомпоновкиДанных.Элементы;
				Для Каждого СтрокаДанных Из Отчет.ДанныеДляАнализа Цикл
					Если СтрокаДанных.НомерСтроки = 1 Тогда
						Продолжить;
					КонецЕсли;
					МеткаУровня = Строка(СтрокаДанных.НомерСтроки);
					
					ПользовательскоеПолеМаксимум 				= Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
					ПользовательскоеПолеМаксимум.Заголовок 		= "Максимум Количество #"+ Строка(СтрокаГруппировки.НомерСтроки);
					ПользовательскоеПолеМаксимум.Использование 	= Истина;
					ПользовательскоеПолеМаксимум.УстановитьВыражениеИтоговыхЗаписей("СУММА(Количество1)"+ДополнениеКВыражениюПоУровнюЗначимости(СтрокаГруппировки.ОтборПоУровнюЗначимости,СтрокаГруппировки.УровеньЗначимости));
					ПользовательскоеПолеМаксимум.УстановитьВыражениеДетальныхЗаписей("Количество1"+ДополнениеКВыражениюПоУровнюЗначимости(СтрокаГруппировки.ОтборПоУровнюЗначимости,СтрокаГруппировки.УровеньЗначимости));
					
					Отбор 					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
					Отбор.Использование 	= Истина;
					Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Количество"+Строка(СтрокаДанных.НомерСтроки));
					Отбор.ПравоеЗначение 	= Новый ПолеКомпоновкиДанных(ПользовательскоеПолеМаксимум.ПутьКДанным);
					
					ПользовательскоеПолеМинимум 				= Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
					ПользовательскоеПолеМинимум.Заголовок 		= "Максимум Количество #"+ Строка(СтрокаГруппировки.НомерСтроки);
					ПользовательскоеПолеМинимум.Использование 	= Истина;
					ПользовательскоеПолеМинимум.УстановитьВыражениеИтоговыхЗаписей("СУММА(Количество1)"+ДополнениеКВыражениюПоУровнюЗначимости(СтрокаГруппировки.ОтборПоУровнюЗначимости,СтрокаГруппировки.УровеньЗначимости,Ложь));
					ПользовательскоеПолеМинимум.УстановитьВыражениеДетальныхЗаписей("Количество1"+ДополнениеКВыражениюПоУровнюЗначимости(СтрокаГруппировки.ОтборПоУровнюЗначимости,СтрокаГруппировки.УровеньЗначимости,Ложь));
					
					Отбор 					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
					Отбор.Использование 	= Истина;
					Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Количество"+Строка(СтрокаДанных.НомерСтроки));
					Отбор.ПравоеЗначение 	= Новый ПолеКомпоновкиДанных(ПользовательскоеПолеМинимум.ПутьКДанным);
					
//					Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Показатель.Показатель)+Строка(СтрокаДанных.НомерСтроки));
					
				КонецЦикла;
				НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
				НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЭтоПростоеПоле Тогда
		Если ЗначениеЗаполнено(СтрокаГруппировки.Расположение) И ТипЗнч(НоваяГруппировкаАналитикиОтчета)<>Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеПолейГруппировки").Использование = Истина;
			НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеПолейГруппировки").Значение = РасположениеПолейГруппировкиКомпоновкиДанных[фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.Расположение)];
		КонецЕсли;
		Если Имя = "СтатьяБюджета" Тогда
			Если ОсновноеПолеДобавлено Тогда
				ГруппировкаСтатья = НоваяГруппировкаАналитикиОтчета;
			КонецЕсли;
		Иначе
			Если Колонка = Ложь И ИмяОтчета <> "фин_АнализПричинКорректировок" И ИмяОтчета<>"фин_АнализПричинОтклоненийПоБюджетам" И ИмяОтчета<>"фин_МониторингЛимитовИЦелевыхЗначенийПоБюджетам" И ИмяОтчета <> "фин_СводКорректировокИОтклоненийПоБюджетам" Тогда
				Отбор = НоваяГруппировкаАналитикиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
				Отбор.Использование = Истина;
				Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатьяБюджета");
			КонецЕсли;
			Если ?(ИмяОтчета = "фин_ВременнойАнализБюджетныхДанных",Отчет.ДанныеОтчета,Отчет.Показатели).Количество()>0 И ?(ИмяОтчета<>"фин_СводКорректировокИОтклоненийПоБюджетам",Истина,Отчет.АналитическиеПоляСводаКорректировок.Количество()>0) Тогда
				ГруппаОтбора =  НоваяГруппировкаАналитикиОтчета.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтбора.Использование = Истина;
				ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				ГруппаОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
				Если ОтключитьОтборПоПустымПоказателям=Ложь Тогда
					ДобавитьОтборПоПоказателям(ГруппаОтбора,Отчет,ИмяОтчета);
				КонецЕсли;
				Если ТипЗнч(НоваяГруппировкаАналитикиОтчета)<>Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
					НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
					НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Имя = "ПериодПланирования" Тогда
		Список = Новый СписокЗначений;
		Список.Добавить(NULL);
		Список.Добавить('00010101');
		Отбор = НоваяГруппировкаАналитикиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		Отбор.Использование = Истина;
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПериодПланирования");
		Отбор.ПравоеЗначение = Список;
		Если ТипЗнч(НоваяГруппировкаАналитикиОтчета)<>Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
			НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		КонецЕсли;
	КонецЕсли;
	Если ОтборТекущейТаблицы<>Неопределено Тогда
		Для Каждого СтрокаОтбора Из ОтборТекущейТаблицы Цикл
			Отбор = НоваяГруппировкаАналитикиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных[фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаОтбора.ВидСравнения)];
			Отбор.Использование = Истина;
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрокаОтбора.Путь);
			Отбор.ПравоеЗначение = СтрокаОтбора.Значение;
		КонецЦикла;
		ПараметрВыводитьОтбор = НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор");
		Если ПараметрВыводитьОтбор<>Неопределено Тогда
			ПараметрВыводитьОтбор.Использование = Истина;
			ПараметрВыводитьОтбор.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		КонецЕсли;
		
	КонецЕсли;

	Если НЕ ЭтоПростоеПоле Тогда
		Если Колонка = Ложь И Отчет.ВыводитьГруппыСтатейВнизу И НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеГруппировки")<>Неопределено Тогда
			НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеГруппировки").Использование = Истина;
			НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеГруппировки").Значение = РасположениеГруппировкиКомпоновкиДанных.Конец;
		КонецЕсли;
		//для созданной группировки добавляем автовыбор полей
		ВыбранныеПоляДляТекущей=НоваяГруппировкаАналитикиОтчета.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ВыбранныеПоляДляТекущей.Использование=Истина;
	КонецЕсли;
	
	Если ОсновноеПолеДобавлено ИЛИ ИмяДобавленногоСоставногоПоля<>Неопределено Тогда
		Если Отчет.Метаданные().ТабличныеЧасти.Найти("Группировки")<>Неопределено И Отчет.Метаданные().ТабличныеЧасти.Найти("Группировки").Реквизиты.Найти("Сортировка")<>Неопределено И ЗначениеЗаполнено(СтрокаГруппировки.Сортировка) И ТипЗнч(ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Сортировка))=Тип("СписокЗначений") И ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Сортировка).Количество()>0 Тогда
			СписокПорядка = ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Сортировка);
			Для Каждого ЭлементСписка Из СписокПорядка Цикл
				Порядок = НоваяГруппировкаАналитикиОтчета.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
				Порядок.Использование = Истина;
				Если ЭлементСписка.Значение = "ЗначениеПоля" Тогда
					Порядок.Поле = Новый ПолеКомпоновкиДанных(Имя);
				ИначеЕсли ТипЗнч(ЭлементСписка.Значение)<>Тип("Строка") Тогда
					Порядок.Поле = Новый ПолеКомпоновкиДанных(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ЭлементСписка.Значение));
				Иначе
					Порядок.Поле = Новый ПолеКомпоновкиДанных(?(Найти(ЭлементСписка.Значение,".")<>0,СтрЗаменить(ЭлементСписка.Значение,"ЗначениеПоля",Имя),Имя+"."+ЭлементСписка.Значение));
				КонецЕсли;
				Порядок.ТипУпорядочивания = ?(ЭлементСписка.Пометка,НаправлениеСортировкиКомпоновкиДанных.Убыв,НаправлениеСортировкиКомпоновкиДанных.Возр);
			КонецЦикла;
		Иначе	
			Порядок = НоваяГруппировкаАналитикиОтчета.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			Порядок.Использование = Истина;
			Если ОсновноеПолеДобавлено Тогда
				Порядок.Поле = Новый ПолеКомпоновкиДанных(Имя);
			Иначе
				ПервоеПоле =НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Получить(0);
				Если ПервоеПоле = Неопределено Тогда
					Порядок.Поле = Новый ПолеКомпоновкиДанных(ИмяДобавленногоСоставногоПоля);
				Иначе
					Порядок.Поле = ПервоеПоле.Поле;
				КонецЕсли;
			КонецЕсли;
			Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		КонецЕсли;
	КонецЕсли;
	
	
	ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = ?(Колонка,Отчет.ШиринаКолонкиПоказателя,?(Имя="СтатьяБюджета" ИЛИ Имя="ФинансовыйПоказатель",Отчет.ШиринаКолонкиСтатьиБюджета,Отчет.ШиринаКолонкиРеквизита));
	ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = ?(Колонка,Отчет.ШиринаКолонкиПоказателя,?(Имя="СтатьяБюджета" ИЛИ Имя="ФинансовыйПоказатель",Отчет.ШиринаКолонкиСтатьиБюджета,Отчет.ШиринаКолонкиРеквизита));
	ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
	ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ?(Колонка,ВертикальноеПоложение.Центр,ВертикальноеПоложение.Верх);
	ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ?(Колонка,ВертикальноеПоложение.Центр,ГоризонтальноеПоложение.Лево);
	ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
	Если ИмяОтчета = "фин_ВременнойАнализБюджетныхДанных" Тогда
		СтруктураПоискаНоменклатура = Новый Структура("Использование,Ресурс",Истина,Перечисления.фин_РесурсыДанныхБюджетирования.Количество);
	Иначе
		СтруктураПоискаНоменклатура = Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.Количество);
	КонецЕсли;
	Если (ЭтоПростоеПоле ИЛИ ОсновноеПолеДобавлено) И Имя = "Номенклатура" И ?(ИмяОтчета = "фин_ВременнойАнализБюджетныхДанных",Отчет.ДанныеОтчета,Отчет.Показатели).НайтиСтроки(СтруктураПоискаНоменклатура).Количество()>0 Тогда
		ПолеРазрезаАналитики=НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеРазрезаАналитики.Использование	=Истина;
		ПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных("ЕдиницаИзмерения");
		ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
		ПолеОформления.Использование = Истина;
		ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
		ДопПоле.Использование = Истина;
		ДопПоле.Поле  = Новый ПолеКомпоновкиДанных("ЕдиницаИзмерения");
		ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = 7;
		ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = 7;
		ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
		ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ?(Колонка,ВертикальноеПоложение.Центр,ВертикальноеПоложение.Верх);
		ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ?(Колонка,ВертикальноеПоложение.Центр,ГоризонтальноеПоложение.Лево);
		ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
	КонецЕсли;
	Если НЕ ЭтоПростоеПоле Тогда
		//для созданной группировки добавляем автовыбор полей
		ВыбранныеПоляДляТекущей=НоваяГруппировкаАналитикиОтчета.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ВыбранныеПоляДляТекущей.Использование=Истина;
		Если Колонка Тогда
			ТекущийРодительКолонки = НоваяГруппировкаАналитикиОтчета;
		Иначе
			ТекущийРодительСтроки = НоваяГруппировкаАналитикиОтчета;
		КонецЕсли;
	КонецЕсли;
	
	Если ОсновноеПолеДобавлено ИЛИ ИмяДобавленногоСоставногоПоля<>Неопределено Тогда
		СтрокаОформление = СтрокаГруппировки;
		Если СтрокаОформление.ПрименятьОформление Тогда
			ПолеОформления = НоваяГруппировкаАналитикиОтчета.УсловноеОформление.Элементы.Добавить();
			ПолеОформления.Использование = Истина;
			ПолеОформления.ИспользоватьВЗаголовке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
			ПолеОформления.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
			//Если ЭтоПростоеПоле Тогда
			//	ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
			//	ДопПоле.Использование = Истина;
			//	ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(?(ОсновноеПолеДобавлено,Имя,ИмяДобавленногоСоставногоПоля));
			//	Если ИмяОтчета = "фин_ВременнойАнализБюджетныхДанных" Тогда
			//		СтруктураПоискаНоменклатура = Новый Структура("Использование,Ресурс",Истина,Перечисления.фин_РесурсыДанныхБюджетирования.Количество);
			//	Иначе
			//		СтруктураПоискаНоменклатура = Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.Количество);
			//	КонецЕсли;
			//	Если Имя = "Номенклатура" И Отчет.Показатели.НайтиСтроки(СтруктураПоискаНоменклатура).Количество()>0 Тогда
			//		ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
			//		ДопПоле.Использование = Истина;
			//		ДопПоле.Поле  = Новый ПолеКомпоновкиДанных("ЕдиницаИзмерения");
			//	КонецЕсли;
			//Иначе
			//	Если ОсновноеПолеДобавлено Тогда
			//		ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
			//		ДопПоле.Использование = Истина;
			//		ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(Имя);
			//	КонецЕсли;
			//	Если ИмяОтчета = "фин_ВременнойАнализБюджетныхДанных" Тогда
			//		СтруктураПоискаНоменклатура = Новый Структура("Использование,Ресурс",Истина,Перечисления.фин_РесурсыДанныхБюджетирования.Количество);
			//	Иначе
			//		СтруктураПоискаНоменклатура = Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.Количество);
			//	КонецЕсли;
			//	Если ОсновноеПолеДобавлено И Имя = "Номенклатура" И Отчет.Показатели.НайтиСтроки(СтруктураПоискаНоменклатура).Количество()>0 Тогда
			//		ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
			//		ДопПоле.Использование = Истина;
			//		ДопПоле.Поле  = Новый ПолеКомпоновкиДанных("ЕдиницаИзмерения");
			//	КонецЕсли;
			//	СоставПолей = ?(ЗначениеЗаполнено(СтрокаГруппировки.Состав),ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Состав),Неопределено);
			//	Если СтрокаГруппировки.СоставноеПоле И ТипЗнч(СоставПолей)=Тип("СписокЗначений") И СоставПолей.Количество()>0 Тогда
			//		Поля = СоставПолей;
			//		Для Каждого СтрокаПолей Из Поля Цикл
			//			ДопПоле = СтрокаПолей.Значение;
			//			Если ДопПоле="ЗначениеПоля" Тогда
			//				ИмяДопПоляВСКД = Имя;
			//			ИначеЕсли ТипЗнч(ДопПоле)<>Тип("Строка") Тогда
			//				ИмяДопПоляВСКД = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ДопПоле);
			//			Иначе
			//				ИмяДопПоляВСКД = ?(Найти(ДопПоле,".")<>0,СтрЗаменить(ДопПоле,"ЗначениеПоля",Имя),Имя+"."+ДопПоле);
			//			КонецЕсли;
			//			ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
			//			ДопПоле.Использование = Истина;
			//			ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(ИмяДопПоляВСКД);
			//		КонецЦикла;
			//	КонецЕсли;				
			//КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаОформление.Цвет) Тогда
				ПолеОформления.Оформление.Элементы.Найти("ЦветФона").Значение = ЗначениеИзСтрокиВнутр(СтрокаОформление.Цвет);
				ПолеОформления.Оформление.Элементы.Найти("ЦветФона").Использование = Истина;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаОформление.Шрифт) Тогда
				ПолеОформления.Оформление.Элементы.Найти("Шрифт").Значение = ЗначениеИзСтрокиВнутр(СтрокаОформление.Шрифт);
				ПолеОформления.Оформление.Элементы.Найти("Шрифт").Использование = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ДополнениеКВыражениюПоУровнюЗначимости(ОтборПоУровнюЗначимости,УровеньЗначимости,Максимум = Истина)
	Возврат ?(ОтборПоУровнюЗначимости=Перечисления.фин_ВариантыОтбораПоУровнюЗначимости.ПоАбсолютномуКоличественномуОтклонению
				ИЛИ ОтборПоУровнюЗначимости=Перечисления.фин_ВариантыОтбораПоУровнюЗначимости.ПоАбсолютномуСуммовомуОтклонению,?(Максимум,"+","-")+Формат(УровеньЗначимости,"ЧРД=.; ЧН=0; ЧГ="),"*"+Формат(1+?(Максимум,1,-1)*(УровеньЗначимости/100),"ЧРД=.; ЧН=0; ЧГ="));	
КонецФункции

Процедура ДобавитьОтборПоПоказателям(ГруппаОтбора,Отчет,ИмяОтчета)
	Для Каждого Показатель Из ?(ИмяОтчета = "фин_ВременнойАнализБюджетныхДанных",Отчет.ДанныеОтчета,Отчет.Показатели) Цикл
		Если ИмяОтчета <> "фин_ВременнойАнализБюджетныхДанных" И (ТипЗнч(Показатель.Показатель)=Тип("СправочникСсылка.фин_ДополнительныеРасчетныеПоляОтчетовПоБюджетам") ИЛИ Найти(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Показатель.Показатель),"Цена")<>0) Тогда
			Продолжить;
		КонецЕсли;
		Если ИмяОтчета = "фин_ИсполнениеБюджета" ИЛИ ИмяОтчета = "фин_СравнительныйАнализ" ИЛИ ИмяОтчета="фин_АнализРассогласованияСтатей" Тогда
			Для Каждого СтрокаДанных Из Отчет.ДанныеДляАнализа Цикл
				Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
				Отбор.Использование = Истина;
				Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Показатель.Показатель)+Строка(СтрокаДанных.НомерСтроки));
			КонецЦикла;
			Если ИмяОтчета<>"фин_АнализРассогласованияСтатей" И Отчет.ВыводитьОтклонения Тогда
				Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
				Отбор.Использование = Истина;
				Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Показатель.Показатель)+Строка(Отчет.ДанныеДляАнализа.Количество()+1));
			КонецЕсли;
		ИначеЕсли ИмяОтчета = "фин_СводКорректировокИОтклоненийПоБюджетам" Тогда
			Для Каждого ВидАнализа Из Отчет.АналитическиеПоляСводаКорректировок Цикл
				Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
				Отбор.Использование = Истина;
				Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Показатель.Показатель)+фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВидАнализа.Поле));
			КонецЦикла;
		Иначе
			Если ИмяОтчета = "фин_ВременнойАнализБюджетныхДанных" Тогда
				Если Показатель.Использование=Ложь ИЛИ Показатель.ПоФормуле Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
			Отбор.Использование = Истина;
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(?(ИмяОтчета = "фин_ВременнойАнализБюджетныхДанных",Показатель.ИдентификаторПоля,фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Показатель.Показатель)));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ВыражениеИтоговыхЗаписей(ДанныеОтчета,Формула,ВключаяВсе=Ложь,ВидФункции="Сумма")
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Показатель");
	ТаблицаПоказателей.Колонки.Добавить("Длина");
	Для Каждого СтрокаДанные ИЗ ДанныеОтчета Цикл
		Если СтрокаДанные.ПоФормуле=Ложь И СтрокаДанные.Использование Тогда
			НС = ТаблицаПоказателей.Добавить();
			НС.Показатель = СтрокаДанные.ИдентификаторПоля;
			НС.Длина = СтрДлина(НС.Показатель);
		КонецЕсли;
	КонецЦикла;
	ТаблицаПоказателей.Сортировать("Длина УБЫВ");
	ВыходнаяСтрока = Формула;
	Для Каждого СтрокаПоказатель Из ТаблицаПоказателей Цикл
		ПолеДополнения = ?(ВключаяВсе,ВидФункции+"("+СтрокаПоказатель.Показатель+")",ВидФункции+"(ВЫБОР КОГДА СтатьяБюджета.ИсключитьИзИтогов = ИСТИНА ТОГДА 0 ИНАЧЕ "+СтрокаПоказатель.Показатель+" КОНЕЦ)");
		ВыходнаяСтрокаЭтапа = "";
		Остаток = ВыходнаяСтрока;
		Позиция = Найти(Остаток,СтрокаПоказатель.Показатель);
		Если Позиция <> 0 Тогда
			Пока Позиция <> 0 Цикл
				Если СтрДлина(Остаток) = Позиция +СтрДлина(СтрокаПоказатель.Показатель)-1 Тогда
					ВыходнаяСтрокаЭтапа = ВыходнаяСтрокаЭтапа + Лев(Остаток,Позиция-1) + ПолеДополнения;
					Остаток = "";
				ИначеЕсли фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьНедопустимыеСимволы(Истина).Найти(Сред(Остаток,Позиция+СтрДлина(СтрокаПоказатель.Показатель),1))<>Неопределено Тогда
					ВыходнаяСтрокаЭтапа = ВыходнаяСтрокаЭтапа + Лев(Остаток,Позиция-1) + ПолеДополнения;
					Остаток = Сред(Остаток,Позиция+СтрДлина(СтрокаПоказатель.Показатель));
				Иначе
					ВыходнаяСтрокаЭтапа = ВыходнаяСтрокаЭтапа + Лев(Остаток,Позиция+СтрДлина(СтрокаПоказатель.Показатель));
					Остаток = Сред(Остаток,Позиция+СтрДлина(СтрокаПоказатель.Показатель)+1);
				КонецЕсли;
				Позиция = Найти(Остаток,СтрокаПоказатель.Показатель);
			КонецЦикла;
			ВыходнаяСтрокаЭтапа = ВыходнаяСтрокаЭтапа + Остаток;
			ВыходнаяСтрока = ВыходнаяСтрокаЭтапа;
		КонецЕсли;
	КонецЦикла;
	Возврат ВыходнаяСтрока;
КонецФункции

Функция ИтогиТребуются(Группировки) Экспорт
	СтрокиСтатья = Группировки.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ДополнительныеРазрезыОтчетов.СтатьяБюджета));
	Для Каждого СтрокаСтатья Из СтрокиСтатья Цикл
		Если СтрокаСтатья.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаСтрокСИерархией ИЛИ СтрокаСтатья.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.КолонкаСИерерахией Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

#КонецОбласти

Процедура ВыполнитьФормированиеОтчета(Отчет,СхемаКомпоновкиДанных,КомпоновщикНастроек,Настройки,ДанныеРасшифровки,ДокументРезультат,ТаблицаВнешнегоНабораДанных,ИмяОтчета=Неопределено,Заголовок,ВерсииБюджета = Неопределено) Экспорт
	//ПОДГОТОВКА К ВЫПОЛНЕНИЮ - ФОРМИРОВАНИЕ МАКЕТА КОМПОНОВКИ
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	Попытка
		МакетКомпоновки=КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройки,ДанныеРасшифровки);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	//СхемаКомпоновкиДанных.НаборыДанных.Основной.Поля.Найти("Период").ВыражениеПредставления="фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(Период,"""+Периодичность+""")";
	
	ВнешниеНаборыДанных=Новый Структура;
	ВнешниеНаборыДанных.Вставить("ОбъектДанных",ТаблицаВнешнегоНабораДанных); 
	
	//ВЫПОЛНЕНИЕ КОМПОНОВКИ ДАННЫХ
	ПроцессорКомпоновки=Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,ДанныеРасшифровки,Истина);
	
	//ВЫВОД РЕЗУЛЬТАТА В ТАБЛИЧНЫЙ ДОКУМЕНТ
	ДокументРезультат.Очистить();
	ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.ОтображатьПроцентВывода=Истина;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	//инициализация начала вывода
	
	Если ИмяОтчета = "фин_Бюджет" ИЛИ ИмяОтчета = "фин_ПечатьБюджета" ИЛИ ИмяОтчета = "фин_ИсполнениеБюджета" ИЛИ ИмяОтчета = "фин_СравнительныйАнализ" ИЛИ ИмяОтчета = "фин_ВременнойАнализБюджетныхДанных" Тогда 
		СтатьиСПеретекающимиОстатками 	= ?(ИмяОтчета = "фин_ВременнойАнализБюджетныхДанных",Новый Массив,Справочники.фин_Бюджеты.СтатьиБюджетаСПеретекающимиОстатками(Отчет.Бюджет,,ВерсииБюджета));
		ЕстьПеретекающиеОстатки 		= СтатьиСПеретекающимиОстатками.Количество()>0;
		РучнаяНастройкаИтоговПоГруппам	= Отчет.Бюджет.РучнаяНастройкаИтоговПоГруппам;
		Если НЕ (РучнаяНастройкаИтоговПоГруппам ИЛИ ЕстьПеретекающиеОстатки) Тогда
			ПроцессорВывода.Вывести(ПроцессорКомпоновки,Истина);
		Иначе
			ПроцессорВывода.НачатьВывод();
			МакетСтатьи = "";
			МакетИерархии = "";
			ПараметрСтатьи = "";
			ПараметрИерархии = "";
			ПараметрЗначенияСтатьи = "";
			ПараметрЗначенияИерархии = "";
			ПредставлениеИерархии = "";
			МакетИтогов = "";
			МакетПериода = "";
			ПараметрПериода = "";
			ЭтоРучнойИтог			= Ложь;
			ЭтоПеретекающийОстаток 	= Ложь;
			ПервыеЗначения 			= Новый Структура;
			ПоследниеЗначения 		= Новый Структура;
			ЗначенияПолучены 		= Ложь;
			//цикл вывода отчета
			СбрасыватьВывод = Ложь;
			Пока Истина Цикл
				ЭлементРезультата=ПроцессорКомпоновки.Следующий();
				Если ЭлементРезультата=НЕОПРЕДЕЛЕНО Тогда
					Прервать; //следующего элемента не существует
				Иначе
					Если ЭлементРезультата.Макеты.Количество()>0 Тогда
						Для Каждого Макет Из ЭлементРезультата.Макеты Цикл
							Если Макет.Параметры.Количество()=0 Тогда
								Продолжить;
							КонецЕсли;
							Для Каждого ПараметрМакета Из Макет.Параметры Цикл
								Если ТипЗнч(ПараметрМакета)=Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных") Тогда
									Для Каждого ВыражениеПоля Из ПараметрМакета.ВыраженияПолей Цикл
										Если ВыражениеПоля.Выражение = "СтатьяБюджетаИерархия.СтатьяБюджета" Тогда
											МакетИерархии = Макет.Имя;
											ПараметрЗначенияИерархии = ПараметрМакета.Имя;
										ИначеЕсли ВыражениеПоля.Выражение = "НаборДанныхОбъект.СтатьяБюджета" Тогда
											МакетСтатьи = Макет.Имя;
											ПараметрЗначенияСтатьи = ПараметрМакета.Имя;
										ИначеЕсли ВыражениеПоля.Выражение = "НаборДанныхОбъект.ПериодПланирования" Тогда
											МакетПериода = Макет.Имя;
											ПараметрПериода = ПараметрМакета.Имя;
										КонецЕсли;
									КонецЦикла;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
					Если ЭлементРезультата.ЗначенияПараметров.Количество()>0 Тогда
						Если ЭлементРезультата.Макет=МакетСтатьи Тогда
							Попытка
								ЭлементыРасшифровки = ДанныеРасшифровки.Элементы.Получить(ЭлементРезультата.ЗначенияПараметров[ПараметрЗначенияСтатьи].Значение).ПолучитьПоля();
								Для Каждого ПолеРасшифровки Из ЭлементыРасшифровки Цикл
									Если ПолеРасшифровки.Поле = "СтатьяБюджета" И ПолеРасшифровки.Иерархия=Ложь Тогда
										ПредставлениеСтатьи = ПолеРасшифровки.Значение;
										ЭтоПеретекающийОстаток = СтатьиСПеретекающимиОстатками.Найти(ПредставлениеСтатьи)<>Неопределено;
										ЭтоРучнойИтог			= Ложь;
										ПервыеЗначения 			= Новый Структура;
										ПоследниеЗначения 		= Новый Структура;
										//ИдетВыводПоказателей 	= Ложь;
										ЗначенияПолучены 		= Ложь;
									КонецЕсли;
								КонецЦикла;
								Если ПредставлениеСтатьи = ПредставлениеИерархии Тогда
									СбрасыватьВывод = Истина;
								//	Продолжить;
								Иначе
									СбрасыватьВывод = Ложь;
								КонецЕсли;
							Исключение
							КонецПопытки;
						КонецЕсли;
						Если ЭлементРезультата.Макет=МакетИерархии Тогда
							ЭтоПеретекающийОстаток = Ложь;
							ПервыеЗначения 			= Новый Структура;
							ПоследниеЗначения 		= Новый Структура;
							//ИдетВыводПоказателей 	= Ложь;
							ЗначенияПолучены 		= Ложь;
							Попытка
								ЭлементыРасшифровки = ДанныеРасшифровки.Элементы.Получить(ЭлементРезультата.ЗначенияПараметров[ПараметрЗначенияИерархии].Значение).ПолучитьПоля();
								Для Каждого ПолеРасшифровки Из ЭлементыРасшифровки Цикл
									Если ПолеРасшифровки.Поле = "СтатьяБюджета" И ПолеРасшифровки.Иерархия=Истина И ПолеРасшифровки.Значение.ЭтоГруппа Тогда
										ПредставлениеИерархии = ПолеРасшифровки.Значение;
										Если РучнаяНастройкаИтоговПоГруппам Тогда
											ЭтоРучнойИтог		= Отчет.ТаблицаИтоговСтатей.НайтиСтроки(Новый Структура("СтатьяБюджета",ПредставлениеИерархии)).Количество()<>0;
										Иначе
											ЭтоРучнойИтог		= Ложь;
										КонецЕсли;
									КонецЕсли;
								КонецЦикла;
								СбрасыватьВывод = Ложь;
							Исключение
							КонецПопытки;
						КонецЕсли;
						Если ЭтоПеретекающийОстаток И ЭлементРезультата.Макет<>МакетСтатьи И ЭлементРезультата.Макет<>МакетИерархии Тогда
							ЭтоРесурсОтчета			= Ложь;
							СтруктураРесурсовОтчета	= Новый Структура;
							ЕстьПериод 				= Ложь;
							ВидПериода 				= "";
							ИмяПоляБезПериода 	= "";
							НомерПериода 		= 0;
							СтруктураПользовательскихПолейОтчета	= Новый Структура;
							ВключенВСписок = Ложь;
							Для Каждого ЗначениеПараметров Из ЭлементРезультата.ЗначенияПараметров Цикл
								Если НЕ ТипЗнч(ЗначениеПараметров.Значение)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
									Продолжить;
								КонецЕсли;
								ВключенВСписокНаЭтапе = Ложь;
								ЭлементыРасшифровки = ДанныеРасшифровки.Элементы.Получить(ЗначениеПараметров.Значение).ПолучитьПоля();
								Для Каждого ПолеРасшифровки Из ЭлементыРасшифровки Цикл
									ИмяПоляБезПериода 	= ИмяПоляБезПериода(ПолеРасшифровки.Поле);
									Если Метаданные.Перечисления.фин_РесурсыДанныхБюджетирования.ЗначенияПеречисления.Найти(ИмяПоляБезПериода)<>Неопределено Тогда
										Если Отчет.Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования[ИмяПоляБезПериода])).Количество()>0 Тогда
											НомерПериода = НомерПериодаИзПоля(ПолеРасшифровки.Поле);
											Если (ИмяОтчета <> "фин_ИсполнениеБюджета" И ИмяОтчета <> "фин_СравнительныйАнализ") ИЛИ Отчет.ВыводитьОтклонения = Ложь ИЛИ НЕ Отчет.ДанныеДляАнализа.Количество()<НомерПериода Тогда
												ВключенВСписок 	= Истина;
												ВключенВСписокНаЭтапе = Истина;
												СтруктураРесурсовОтчета.Вставить(ПолеРасшифровки.Поле,ЭлементРезультата.ЗначенияПараметров.Индекс(ЗначениеПараметров));
												ЭтоРесурсОтчета = Истина;
												Прервать;
											КонецЕсли;
										КонецЕсли;
									ИначеЕсли Найти(ПолеРасшифровки.Поле,"ПользовательскиеПоля.")<>0 Тогда
										Для Каждого ПолеПользователя Из Настройки.ПользовательскиеПоля.Элементы Цикл
											Если ПолеРасшифровки.Поле = ПолеПользователя.ПутьКДанным Тогда
												ЭтоРесурсОтчета = Истина;
												СтруктураПользовательскихПолейОтчета.Вставить(СтрЗаменить(ПолеРасшифровки.Поле,"ПользовательскиеПоля.",""),Новый Структура("Позиция,Выражение",ЭлементРезультата.ЗначенияПараметров.Индекс(ЗначениеПараметров),ПолеПользователя.ПолучитьВыражениеИтоговыхЗаписей()));
											КонецЕсли;
										КонецЦикла;
									КонецЕсли;
								КонецЦикла;
								Если ВключенВСписокНаЭтапе Тогда
									Если ЭтоРесурсОтчета Тогда
										Если ИмяОтчета = "фин_ИсполнениеБюджета" ИЛИ ИмяОтчета = "фин_СравнительныйАнализ" Тогда
											СтрокаДанных = Отчет.ДанныеДляАнализа[НомерПериода-1];
											ОпределитьПринадлежностьИтогаПериоду(ЗначениеПараметров.Значение,ДанныеРасшифровки,ЕстьПериод,ВидПериода,СтрокаДанных.НачалоПериода,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаДанных.ОкончаниеПериода,?(Отчет.ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СтрокаДанных.ДанныеДляСравнения),Отчет.Периодичность())));
										Иначе
											ОпределитьПринадлежностьИтогаПериоду(ЗначениеПараметров.Значение,ДанныеРасшифровки,ЕстьПериод,ВидПериода,Отчет.НачалоПериодаПланирования,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Отчет.КонецПериодаПланирования,?(ЗначениеЗаполнено(Отчет.Сценарий),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Отчет.Сценарий),Перечисления.фин_Периодичность.Месяц)));
										КонецЕсли;
									Иначе
										ЗначенияПолучены = Ложь;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							Если ЭтоРесурсОтчета И ВключенВСписок Тогда
								Для Каждого ЭлементСтруктуры Из СтруктураРесурсовОтчета Цикл
									Если ЕстьПериод Тогда
										Если ВидПериода<>"" Тогда
											ПолученноеЗначение = ЭлементРезультата.ЗначенияПараметров.Получить(ЭлементСтруктуры.Значение-1).Значение;
											Если ВидПериода = "Первый" Тогда
												ПервыеЗначения.Вставить(ЭлементСтруктуры.Ключ,ПолученноеЗначение);
											ИначеЕсли ВидПериода = "Последний" Тогда
												ПоследниеЗначения.Вставить(ЭлементСтруктуры.Ключ,ПолученноеЗначение);
											КонецЕсли;
											ЗначенияПолучены 		= Истина;
										КонецЕсли;
									Иначе
										ЗначениеПараметров = ЭлементРезультата.ЗначенияПараметров.Получить(ЭлементСтруктуры.Значение-1);
										Если ЗначенияПолучены = Ложь Тогда
											ЗначениеПараметров.Значение = 0;
											СтруктураПоискаОстатков = ПолучитьСтруктуруПоПолямРасшифровки(ЭлементРезультата,ДанныеРасшифровки);
											Если (НЕ СтруктураПоискаОстатков.Свойство("ПериодПланирования")) И ТаблицаВнешнегоНабораДанных.Колонки.Найти("ПериодПланирования")<>Неопределено Тогда
												Если ИмяОтчета = "фин_ИсполнениеБюджета" ИЛИ ИмяОтчета = "фин_СравнительныйАнализ" Тогда
													СтруктураПоискаОстатков.Вставить("ПериодПланирования",?(ПредставлениеСтатьи.ФинансовыйПоказатель.ПризнакПеретекающегоОстатка=Перечисления.фин_ПризнакиПеретекающихОстатковМеждуПериодами.ОстатокНаНачалоПериода,Отчет.ДанныеДляАнализа[НомерПериода-1].НачалоПериода,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Отчет.ДанныеДляАнализа[НомерПериода-1].ОкончаниеПериода,?(ЗначениеЗаполнено(Отчет.ДанныеДляАнализа[НомерПериода-1].ДанныеДляСравнения),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Отчет.ДанныеДляАнализа[НомерПериода-1].ДанныеДляСравнения),Перечисления.фин_Периодичность.Месяц))));
												Иначе
													СтруктураПоискаОстатков.Вставить("ПериодПланирования",?(ПредставлениеСтатьи.ФинансовыйПоказатель.ПризнакПеретекающегоОстатка=Перечисления.фин_ПризнакиПеретекающихОстатковМеждуПериодами.ОстатокНаНачалоПериода,Отчет.НачалоПериодаПланирования,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Отчет.КонецПериодаПланирования,?(ЗначениеЗаполнено(Отчет.Сценарий),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Отчет.Сценарий),Перечисления.фин_Периодичность.Месяц))));
												КонецЕсли;
											КонецЕсли;
											НайденныеОстатки = ТаблицаВнешнегоНабораДанных.Скопировать(СтруктураПоискаОстатков);
											ЗначениеПараметров.Значение = НайденныеОстатки.Итог(ЭлементСтруктуры.Ключ);
											Если ПредставлениеСтатьи.ФинансовыйПоказатель.ПризнакПеретекающегоОстатка=Перечисления.фин_ПризнакиПеретекающихОстатковМеждуПериодами.ОстатокНаНачалоПериода Тогда
												ПервыеЗначения.Вставить(ЭлементСтруктуры.Ключ,ЗначениеПараметров.Значение);
											Иначе
												ПоследниеЗначения.Вставить(ЭлементСтруктуры.Ключ,ЗначениеПараметров.Значение);
											КонецЕсли;
										Иначе
											ПервоеЗначение 		= 0;
											ПоследнееЗначение 	= 0;
											ПервыеЗначения.Свойство(ЭлементСтруктуры.Ключ,ПервоеЗначение);
											ПоследниеЗначения.Свойство(ЭлементСтруктуры.Ключ,ПоследнееЗначение);
											ЗначениеПараметров.Значение = ?(ПредставлениеСтатьи.ФинансовыйПоказатель.ПризнакПеретекающегоОстатка=Перечисления.фин_ПризнакиПеретекающихОстатковМеждуПериодами.ОстатокНаНачалоПериода,ПервоеЗначение,ПоследнееЗначение);
										КонецЕсли;
									КонецЕсли;
								КонецЦикла;
								Для Каждого ЭлементСтруктуры Из СтруктураПользовательскихПолейОтчета Цикл
									Если ЕстьПериод Тогда
										Если ВидПериода<>"" Тогда
											ПолученноеЗначение = ЭлементРезультата.ЗначенияПараметров.Получить(ЭлементСтруктуры.Значение.Позиция-1).Значение;
											Если ВидПериода = "Первый" Тогда
												ПервыеЗначения.Вставить(ЭлементСтруктуры.Ключ,ПолученноеЗначение);
											ИначеЕсли ВидПериода = "Последний" Тогда
												ПоследниеЗначения.Вставить(ЭлементСтруктуры.Ключ,ПолученноеЗначение);
											КонецЕсли;
											ЗначенияПолучены 		= Истина;
										КонецЕсли;
									Иначе	
										ЗначениеПараметров = ЭлементРезультата.ЗначенияПараметров.Получить(ЭлементСтруктуры.Значение.Позиция-1);
										Если ЗначенияПолучены = Ложь Тогда
											ЗначениеПараметров.Значение = 0;
											РезультатРасчета = 0;
											ТекстРасчета = ЭлементСтруктуры.Значение.Выражение;
											ОбъектОбхода = ?(ПредставлениеСтатьи.ФинансовыйПоказатель.ПризнакПеретекающегоОстатка=Перечисления.фин_ПризнакиПеретекающихОстатковМеждуПериодами.ОстатокНаНачалоПериода,ПервыеЗначения,ПоследниеЗначения);
											Для Каждого ЭлементОбхода Из ОбъектОбхода Цикл
												ТекстРасчета = СтрЗаменить(ТекстРасчета,ЭлементОбхода.Ключ,?(НЕ ЗначениеЗаполнено(ЭлементОбхода.Значение),"0",СтрЗаменить(Формат(ЭлементОбхода.Значение,"ЧРГ=.; ЧГ="),",",".")));
											КонецЦикла;
											Запрос = Новый Запрос;
											Запрос.Текст="ВЫБРАТЬ "+ТекстРасчета+" КАК Результат";
											Попытка
												Выборка = Запрос.Выполнить().Выбрать();
												Пока Выборка.Следующий() Цикл
													РезультатРасчета = Выборка.Результат;
												КонецЦикла;
											Исключение
												СтруктураПоискаОстатков = ПолучитьСтруктуруПоПолямРасшифровки(ЭлементРезультата,ДанныеРасшифровки);
												НайденныеОстатки = ТаблицаВнешнегоНабораДанных.Скопировать(СтруктураПоискаОстатков);
												Для Инд = 1 По Отчет.ДанныеДляАнализа.Количество() Цикл
													Для Каждого СтрокаПоказатель Из Отчет.Показатели Цикл
														Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель);
														Для Каждого СтрокаОстатки Из НайденныеОстатки Цикл
															Если СтрокаОстатки.ПериодПланирования <> ?(ПредставлениеСтатьи.ФинансовыйПоказатель.ПризнакПеретекающегоОстатка=Перечисления.фин_ПризнакиПеретекающихОстатковМеждуПериодами.ОстатокНаНачалоПериода,Отчет.ДанныеДляАнализа[Инд-1].НачалоПериода,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Отчет.ДанныеДляАнализа[Инд-1].ОкончаниеПериода,?(ЗначениеЗаполнено(Отчет.ДанныеДляАнализа[Инд-1].ДанныеДляСравнения),Отчет.ДанныеДляАнализа[Инд-1].ДанныеДляСравнения,Перечисления.фин_Периодичность.Месяц))) Тогда
																СтрокаОстатки[Имя+Строка(Инд)]=0;
															КонецЕсли;
														КонецЦикла;
													КонецЦикла;
												КонецЦикла;
												Для Каждого Колонка Из ТаблицаВнешнегоНабораДанных.Колонки Цикл
													Если Найти(Колонка.Имя,"Сумма")<>0 ИЛИ Найти(Колонка.Имя,"Количество")<>0 Тогда
														ТекстРасчета = СтрЗаменить(ТекстРасчета,Колонка.Имя,?(НЕ ЗначениеЗаполнено(НайденныеОстатки.Итог(Колонка.Имя)),"0",СтрЗаменить(Формат(НайденныеОстатки.Итог(Колонка.Имя),"ЧРГ=.; ЧГ="),",",".")));
													КонецЕсли;
												КонецЦикла;
												Запрос = Новый Запрос;
												Запрос.Текст="ВЫБРАТЬ "+ТекстРасчета+" КАК Результат";
												Попытка
													Выборка = Запрос.Выполнить().Выбрать();
													Пока Выборка.Следующий() Цикл
														РезультатРасчета = Выборка.Результат;
													КонецЦикла;
												Исключение
												КонецПопытки;
												
											КонецПопытки;
											
											ЗначениеПараметров.Значение = РезультатРасчета;
											Если ПредставлениеСтатьи.ФинансовыйПоказатель.ПризнакПеретекающегоОстатка=Перечисления.фин_ПризнакиПеретекающихОстатковМеждуПериодами.ОстатокНаНачалоПериода Тогда
												ПервыеЗначения.Вставить(ЭлементСтруктуры.Ключ,ЗначениеПараметров.Значение);
											Иначе
												ПоследниеЗначения.Вставить(ЭлементСтруктуры.Ключ,ЗначениеПараметров.Значение);
											КонецЕсли;
										Иначе
											ПервоеЗначение 		= 0;
											ПоследнееЗначение 	= 0;
											ПервыеЗначения.Свойство(ЭлементСтруктуры.Ключ,ПервоеЗначение);
											ПоследниеЗначения.Свойство(ЭлементСтруктуры.Ключ,ПоследнееЗначение);
											ЗначениеПараметров.Значение = ?(ПредставлениеСтатьи.ФинансовыйПоказатель.ПризнакПеретекающегоОстатка=Перечисления.фин_ПризнакиПеретекающихОстатковМеждуПериодами.ОстатокНаНачалоПериода,ПервоеЗначение,ПоследнееЗначение);
										КонецЕсли;
									КонецЕсли;
								КонецЦикла;	
							КонецЕсли;
						КонецЕсли;
						Если ЭтоРучнойИтог И РучнаяНастройкаИтоговПоГруппам И ЭлементРезультата.Макет<>МакетСтатьи И ЭлементРезультата.Макет<>МакетИерархии Тогда
							ЭтоРесурсОтчета			= Ложь;
							СтруктураРесурсовОтчета	= Новый Структура;
							ЕстьПериод 				= Ложь;
							ИмяПоляБезПериода 	= "";
							НомерПериода 		= 0;
							СтруктураПользовательскихПолейОтчета	= Новый Структура;
							Для Каждого ЗначениеПараметров Из ЭлементРезультата.ЗначенияПараметров Цикл
								Если НЕ ТипЗнч(ЗначениеПараметров.Значение)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
									Продолжить;
								КонецЕсли;
								ВключенВСписок = Ложь;
								ЭлементыРасшифровки = ДанныеРасшифровки.Элементы.Получить(ЗначениеПараметров.Значение).ПолучитьПоля();
								Для Каждого ПолеРасшифровки Из ЭлементыРасшифровки Цикл
									Если ИмяОтчета = "фин_ВременнойАнализБюджетныхДанных" Тогда
										Если Найти(ПолеРасшифровки.Поле,"ПользовательскиеПоля.")<>0 Тогда
											Для Каждого ПолеПользователя Из Настройки.ПользовательскиеПоля.Элементы Цикл
												Если ПолеРасшифровки.Поле = ПолеПользователя.ПутьКДанным Тогда
													ЭтоРесурсОтчета = Истина;
													СтруктураПользовательскихПолейОтчета.Вставить(СтрЗаменить(ПолеРасшифровки.Поле,"ПользовательскиеПоля.",""),Новый Структура("Позиция,Выражение",ЭлементРезультата.ЗначенияПараметров.Индекс(ЗначениеПараметров),ПолеПользователя.ПолучитьВыражениеИтоговыхЗаписей()));
												КонецЕсли;
											КонецЦикла;
										ИначеЕсли Отчет.ДанныеОтчета.НайтиСтроки(Новый Структура("ИдентификаторПоля",ПолеРасшифровки.Поле)).Количество()>0 Тогда
											//ВключенВСписок 	= Истина;
											СтруктураРесурсовОтчета.Вставить(ПолеРасшифровки.Поле,ЭлементРезультата.ЗначенияПараметров.Индекс(ЗначениеПараметров));
											ЭтоРесурсОтчета = Истина;
											Прервать;
										КонецЕсли;
									Иначе
										ИмяПоляБезПериода 	= ИмяПоляБезПериода(ПолеРасшифровки.Поле);
										Если Метаданные.Перечисления.фин_РесурсыДанныхБюджетирования.ЗначенияПеречисления.Найти(ИмяПоляБезПериода)<>Неопределено Тогда
											Если Отчет.Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования[ИмяПоляБезПериода])).Количество()>0 Тогда
												НомерПериода = НомерПериодаИзПоля(ПолеРасшифровки.Поле);
												//ВключенВСписок 	= Истина;
												СтруктураРесурсовОтчета.Вставить(ПолеРасшифровки.Поле,ЭлементРезультата.ЗначенияПараметров.Индекс(ЗначениеПараметров));
												ЭтоРесурсОтчета = Истина;
												Прервать;
											КонецЕсли;
										ИначеЕсли Найти(ПолеРасшифровки.Поле,"ПользовательскиеПоля.")<>0 Тогда
											Для Каждого ПолеПользователя Из Настройки.ПользовательскиеПоля.Элементы Цикл
												Если ПолеРасшифровки.Поле = ПолеПользователя.ПутьКДанным Тогда
													ЭтоРесурсОтчета = Истина;
													СтруктураПользовательскихПолейОтчета.Вставить(СтрЗаменить(ПолеРасшифровки.Поле,"ПользовательскиеПоля.",""),Новый Структура("Позиция,Выражение",ЭлементРезультата.ЗначенияПараметров.Индекс(ЗначениеПараметров),ПолеПользователя.ПолучитьВыражениеИтоговыхЗаписей()));
												КонецЕсли;
											КонецЦикла;
										КонецЕсли;
									КонецЕсли;
								КонецЦикла;
								//Если ВключенВСписок Тогда
								//	Если ЭтоРесурсОтчета Тогда
								//		Если ИмяОтчета = "фин_ИсполнениеБюджета" ИЛИ ИмяОтчета = "фин_СравнительныйАнализ" Тогда
								//			СтрокаДанных = Отчет.ДанныеДляАнализа[НомерПериода-1];
								//			ОпределитьПринадлежностьИтогаПериоду(ЗначениеПараметров.Значение,ДанныеРасшифровки,ЕстьПериод,ВидПериода,СтрокаДанных.НачалоПериода,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаДанных.ОкончаниеПериода,?(ЗначениеЗаполнено(СтрокаДанных.ДанныеДляСравнения),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СтрокаДанных.ДанныеДляСравнения),Перечисления.фин_Периодичность.Месяц)));
								//		Иначе
								//			ОпределитьПринадлежностьИтогаПериоду(ЗначениеПараметров.Значение,ДанныеРасшифровки,ЕстьПериод,ВидПериода,Отчет.НачалоПериодаПланирования,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Отчет.КонецПериодаПланирования,?(ЗначениеЗаполнено(Отчет.Сценарий),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Отчет.Сценарий),Перечисления.фин_Периодичность.Месяц)));
								//		КонецЕсли;
								//	Иначе
								//		ЗначенияПолучены = Ложь;
								//	КонецЕсли;
								//КонецЕсли;
							КонецЦикла;
							Если ЭтоРесурсОтчета Тогда
								Для Каждого ЭлементСтруктуры Из СтруктураРесурсовОтчета Цикл
									//Если НЕ ЕстьПериод Тогда
										//ПолученноеЗначение = ЭлементРезультата.ЗначенияПараметров.Получить(ЭлементСтруктуры.Значение-1).Значение;
										//ПервыеЗначения.Вставить(ЭлементСтруктуры.Ключ,ПолученноеЗначение);
										ЗначениеПараметров = ЭлементРезультата.ЗначенияПараметров["П"+Число(Сред(ЭлементРезультата.ЗначенияПараметров.Получить(ЭлементСтруктуры.Значение).Имя,2)-1)];//ЭлементРезультата.ЗначенияПараметров.Получить(ЭлементСтруктуры.Значение-1);
										ЗначениеПараметров.Значение = 0;
										СтруктураПоискаОстатков = ПолучитьСтруктуруПоПолямРасшифровки(ЭлементРезультата,ДанныеРасшифровки);
										СтруктураПоискаОстатков.Вставить("СтатьяБюджета",ПредставлениеИерархии);
										НайденныеОстатки = Отчет.ТаблицаИтоговСтатей.Скопировать(СтруктураПоискаОстатков);
										ЗначениеПараметров.Значение = НайденныеОстатки.Итог(ЭлементСтруктуры.Ключ);
										
										ПервыеЗначения.Вставить(ЭлементСтруктуры.Ключ,НайденныеОстатки.Итог(ЭлементСтруктуры.Ключ));
									//КонецЕсли;
								КонецЦикла;
								Для Каждого ЭлементСтруктуры Из СтруктураПользовательскихПолейОтчета Цикл
									ЗначениеПараметров = ЭлементРезультата.ЗначенияПараметров["П"+Число(Сред(ЭлементРезультата.ЗначенияПараметров.Получить(ЭлементСтруктуры.Значение.Позиция).Имя,2)-1)];//ЭлементРезультата.ЗначенияПараметров.Получить(ЭлементСтруктуры.Значение.Позиция-1);
									Если ЗначенияПолучены = Ложь Тогда
										ЗначениеПараметров.Значение = 0;
										РезультатРасчета = 0;
										ТекстРасчета = ЭлементСтруктуры.Значение.Выражение;
										ОбъектОбхода = ПервыеЗначения;
										Для Каждого ЭлементОбхода Из ОбъектОбхода Цикл
											ТекстРасчета = СтрЗаменить(ТекстРасчета,ЭлементОбхода.Ключ,?(НЕ ЗначениеЗаполнено(ЭлементОбхода.Значение),"0",СтрЗаменить(Формат(ЭлементОбхода.Значение,"ЧРГ=.; ЧГ="),",",".")));
										КонецЦикла;
										Запрос = Новый Запрос;
										Запрос.Текст="ВЫБРАТЬ "+ТекстРасчета+" КАК Результат";
										Попытка
											Выборка = Запрос.Выполнить().Выбрать();
											Пока Выборка.Следующий() Цикл
												РезультатРасчета = Выборка.Результат;
											КонецЦикла;
										Исключение
											СтруктураПоискаОстатков = ПолучитьСтруктуруПоПолямРасшифровки(ЭлементРезультата,ДанныеРасшифровки);
											НайденныеОстатки = Отчет.ТаблицаИтоговСтатей.Скопировать(СтруктураПоискаОстатков);//ТаблицаВнешнегоНабораДанных.Скопировать(СтруктураПоискаОстатков);
											Если ИмяОтчета="фин_ИсполнениеБюджета" ИЛИ ИмяОтчета="фин_СравнительныйАнализ" Тогда
												Для Инд = 1 По Отчет.ДанныеДляАнализа.Количество() Цикл
													Для Каждого СтрокаПоказатель Из Отчет.Показатели Цикл
														Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель);
														Для Каждого СтрокаОстатки Из НайденныеОстатки Цикл
															Если СтрокаОстатки.ПериодПланирования <> ?(ПредставлениеСтатьи.ФинансовыйПоказатель.ПризнакПеретекающегоОстатка=Перечисления.фин_ПризнакиПеретекающихОстатковМеждуПериодами.ОстатокНаНачалоПериода,Отчет.ДанныеДляАнализа[Инд-1].НачалоПериода,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Отчет.ДанныеДляАнализа[Инд-1].ОкончаниеПериода,?(ЗначениеЗаполнено(Отчет.ДанныеДляАнализа[Инд-1].ДанныеДляСравнения),Отчет.ДанныеДляАнализа[Инд-1].ДанныеДляСравнения,Перечисления.фин_Периодичность.Месяц))) Тогда
																СтрокаОстатки[Имя+Строка(Инд)]=0;
															КонецЕсли;
														КонецЦикла;
													КонецЦикла;
												КонецЦикла;
												Для Каждого Колонка Из ТаблицаВнешнегоНабораДанных.Колонки Цикл
													Если Найти(Колонка.Имя,"Сумма")<>0 ИЛИ Найти(Колонка.Имя,"Количество")<>0 Тогда
														ТекстРасчета = СтрЗаменить(ТекстРасчета,Колонка.Имя,?(НЕ ЗначениеЗаполнено(НайденныеОстатки.Итог(Колонка.Имя)),"0",СтрЗаменить(Формат(НайденныеОстатки.Итог(Колонка.Имя),"ЧРГ=.; ЧГ="),",",".")));
													КонецЕсли;
												КонецЦикла;
											ИначеЕсли ИмяОтчета="фин_ВременнойАнализБюджетныхДанных" Тогда
												//Для Каждого СтрокаПоказатель Из Отчет.ДанныеОтчета Цикл
												//	Имя = СтрокаПоказатель.ИдентификаторПоля;
												//	Для Каждого СтрокаОстатки Из НайденныеОстатки Цикл
												//		Если СтрокаОстатки.ПериодПланирования <> ?(ПредставлениеСтатьи.ФинансовыйПоказатель.ПризнакПеретекающегоОстатка=Перечисления.фин_ПризнакиПеретекающихОстатковМеждуПериодами.ОстатокНаНачалоПериода,Отчет.ДанныеДляАнализа[Инд-1].НачалоПериода,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Отчет.ДанныеДляАнализа[Инд-1].ОкончаниеПериода,?(ЗначениеЗаполнено(Отчет.ДанныеДляАнализа[Инд-1].ДанныеДляСравнения),Отчет.ДанныеДляАнализа[Инд-1].ДанныеДляСравнения,Перечисления.фин_Периодичность.Месяц))) Тогда
												//			СтрокаОстатки[Имя+Строка(Инд)]=0;
												//		КонецЕсли;
												//	КонецЦикла;
												//КонецЦикла;
												Для Каждого Колонка Из ТаблицаВнешнегоНабораДанных.Колонки Цикл
													Если Отчет.ДанныеОтчета.НайтиСтроки(Новый Структура("ИдентификаторПоля",Колонка.Имя)).Количество()<>0 Тогда
														ТекстРасчета = СтрЗаменить(ТекстРасчета,Колонка.Имя,?(НЕ ЗначениеЗаполнено(НайденныеОстатки.Итог(Колонка.Имя)),"0",СтрЗаменить(Формат(НайденныеОстатки.Итог(Колонка.Имя),"ЧРГ=.; ЧГ="),",",".")));
													КонецЕсли;
												КонецЦикла;
											КонецЕсли;
											Запрос = Новый Запрос;
											Запрос.Текст="ВЫБРАТЬ "+ТекстРасчета+" КАК Результат";
											Попытка
												Выборка = Запрос.Выполнить().Выбрать();
												Пока Выборка.Следующий() Цикл
													РезультатРасчета = Выборка.Результат;
												КонецЦикла;
											Исключение
											КонецПопытки;
											
										КонецПопытки;
										
										ЗначениеПараметров.Значение = РезультатРасчета;
										//Если ПредставлениеСтатьи.ФинансовыйПоказатель.ПризнакПеретекающегоОстатка=Перечисления.фин_ПризнакиПеретекающихОстатковМеждуПериодами.ОстатокНаНачалоПериода Тогда
										ПервыеЗначения.Вставить(ЭлементСтруктуры.Ключ,ЗначениеПараметров.Значение);
										//Иначе
										//	ПоследниеЗначения.Вставить(ЭлементСтруктуры.Ключ,ЗначениеПараметров.Значение);
										//КонецЕсли;
									Иначе
										ПервоеЗначение 		= 0;
										ПоследнееЗначение 	= 0;
										ПервыеЗначения.Свойство(ЭлементСтруктуры.Ключ,ПервоеЗначение);
										ПоследниеЗначения.Свойство(ЭлементСтруктуры.Ключ,ПоследнееЗначение);
										ЗначениеПараметров.Значение = ?(ПредставлениеСтатьи.ФинансовыйПоказатель.ПризнакПеретекающегоОстатка=Перечисления.фин_ПризнакиПеретекающихОстатковМеждуПериодами.ОстатокНаНачалоПериода,ПервоеЗначение,ПоследнееЗначение);
									КонецЕсли;
								КонецЦикла;	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					//Если СбрасыватьВывод Тогда
					//	Продолжить;
					//КонецЕсли;
					ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
				КонецЕсли;
			КонецЦикла;
			
			ПроцессорВывода.ЗакончитьВывод();
		КонецЕсли;
	Иначе
		ПроцессорВывода.Вывести(ПроцессорКомпоновки,Истина);
	КонецЕсли;
				
	Если ЗначениеЗаполнено(Отчет.ЯзыкОтчета) Тогда
		ОбластьИтого = ДокументРезультат.НайтиТекст("Итого");
		Если ОбластьИтого<>Неопределено Тогда
			ОбластьИтого.Текст = фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина("Итого",Отчет.ЯзыкОтчета);
		КонецЕсли;
	КонецЕсли;
	МакетЗаголовок = ПолучитьОбщийМакет("фин_МакетЗаголовк");
	Область = МакетЗаголовок.ПолучитьОбласть("Заголовок");
	Область.Параметры.Заголовок = Заголовок;
	ДокументРезультат.ВставитьОбласть(Область.Область("R1:R3"),ДокументРезультат.Область("R1:R3"),ТипСмещенияТабличногоДокумента.ПоВертикали,3);
	ДокументРезультат.ФиксацияСверху = ДокументРезультат.ФиксацияСверху + 3; 
	ДокументРезультат.ОтображатьСетку=Ложь;
	ДокументРезультат.ОтображатьЗаголовки=Ложь;
КонецПроцедуры

#Область ПроцедурыРаботыСНастройкамиИФормойОтчетов

Процедура ЗаполнитьОтчетНастройкойШаблона(ШаблонСсылка,ОбъектНастройки,Отбор=Неопределено) Экспорт
	Шаблон = ШаблонСсылка.ПолучитьОбъект();
	МетаданныеОтчета 	= Справочники.фин_ВидыОтчетовПоБюджетам.МетаданныеОтчета(Шаблон.Владелец);
	ИмяОтчета 			= Справочники.фин_ВидыОтчетовПоБюджетам.ПолучитьИмяМетаданныхОтчета(Шаблон.Владелец);
	МетаданныеНастроек 	= Метаданные.Справочники.фин_НастройкиОтчетовПоБюджетам;
	Если ИмяОтчета = "фин_ПечатьБюджета" Тогда
		ОбъектНастройки["ДокументПечатиБюджета_Бюджет"] = Шаблон.Бюджет;
	КонецЕсли;
	Для Каждого Реквизит Из МетаданныеОтчета.Реквизиты Цикл
		ОбъектНастройки[Реквизит.Имя] = Справочники.фин_НастройкиОтчетовПоБюджетам.ЗначениеРеквизитаОтчетаИзТекущейНастройки(Реквизит.Имя,Шаблон);
		//Если МетаданныеНастроек.Реквизиты.Найти(Реквизит.Имя)<>Неопределено Тогда
		//	ОбъектНастройки[Реквизит.Имя] = Шаблон[Реквизит.Имя];
		//Иначе
		//	СтрокиДопНастроек = Шаблон.ДополнительныеПараметрыОтчета.НайтиСтроки(Новый Структура("Параметр",Реквизит.Имя));
		//	Если СтрокиДопНастроек.Количество()>0 Тогда
		//		ОбъектНастройки[Реквизит.Имя] = СтрокиДопНастроек[0].Значение;
		//	КонецЕсли;
		//КонецЕсли;
	КонецЦикла;
	Для Каждого ТЧ Из МетаданныеОтчета.ТабличныеЧасти Цикл
		Если МетаданныеНастроек.ТабличныеЧасти.Найти(ТЧ.Имя)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОбъектНастройки[ТЧ.Имя].Очистить();
		Для Каждого СтрокаТЧ Из Шаблон[ТЧ.Имя] Цикл
			НоваяСтрока = ОбъектНастройки[ТЧ.Имя].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ);
			Если ТЧ.Имя = "Группировки" Тогда
				Если ТЧ.Реквизиты.Найти("Цвет")<>Неопределено И ЗначениеЗаполнено(СтрокаТЧ.Цвет) Тогда
					Попытка
						НоваяСтрока.Цвет = ЗначениеИзСтрокиВнутр(СтрокаТЧ.Цвет);
					Исключение
						
					КонецПопытки;
				КонецЕсли;
				Если ТЧ.Реквизиты.Найти("Шрифт")<>Неопределено И ЗначениеЗаполнено(СтрокаТЧ.Шрифт) Тогда
					Попытка
						НоваяСтрока.Шрифт = ЗначениеИзСтрокиВнутр(СтрокаТЧ.Шрифт);
					Исключение
						
					КонецПопытки;
				КонецЕсли;
				Если ТЧ.Реквизиты.Найти("Состав")<>Неопределено И ЗначениеЗаполнено(СтрокаТЧ.Состав) Тогда
					Попытка
						НоваяСтрока.Состав = ЗначениеИзСтрокиВнутр(СтрокаТЧ.Состав);
					Исключение
						
					КонецПопытки;
				КонецЕсли;
				Если ТЧ.Реквизиты.Найти("Сортировка")<>Неопределено И ЗначениеЗаполнено(СтрокаТЧ.Сортировка) Тогда
					Попытка
						НоваяСтрока.Сортировка = ЗначениеИзСтрокиВнутр(СтрокаТЧ.Сортировка);
					Исключение
						
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если Отбор=Неопределено Тогда
		Отбор = Шаблон.Отбор.ВыгрузитьКолонки();
		Отбор.Колонки["Значение"].Имя = "ЗначениеСсылка";
		Отбор.Колонки.Добавить("Значение");
	Иначе
		Отбор.Очистить();
	КонецЕсли;
	Для Каждого СтрокаОтбор Из Шаблон.Отбор Цикл
		НоваяСтрока = Отбор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаОтбор);
		Если ЗначениеЗаполнено(СтрокаОтбор.ЗначениеСписок) Тогда
			НоваяСтрока.Значение = ЗначениеИзСтрокиВнутр(СтрокаОтбор.ЗначениеСписок);
		КонецЕсли;
	КонецЦикла;		
	
	мХранилищеНастроек = Шаблон.ХранилищеДополнительныхНастроек.Получить();
	Если ТипЗнч(мХранилищеНастроек) = Тип("Структура") Тогда
		Если Справочники.фин_ВидыОтчетовПоБюджетам.ДоступноИзменениеНастроекКомпоновщика(Шаблон.Владелец) Тогда
			Если мХранилищеНастроек.Свойство("ПользовательскиеНастройки") Тогда
				ОбъектНастройки.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(мХранилищеНастроек.ПользовательскиеНастройки);
			КонецЕсли;
			Если мХранилищеНастроек.Свойство("ФиксированныеНастройки") Тогда
				ОбъектНастройки.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(мХранилищеНастроек.ФиксированныеНастройки);
			КонецЕсли;
			Если мХранилищеНастроек.Свойство("НастройкиКомпоновщика") Тогда
				ОбъектНастройки.КомпоновщикНастроек.ЗагрузитьНастройки(мХранилищеНастроек.НастройкиКомпоновщика);
			КонецЕсли;
		КонецЕсли;
		РеквизитыФормы = Новый Массив;
		Для Каждого Реквизит Из ОбъектНастройки.ПолучитьРеквизиты() Цикл
			РеквизитыФормы.Добавить(Реквизит.Имя);
		КонецЦикла;
		Для Каждого ЭлементНастроек Из мХранилищеНастроек Цикл
			Если ЭлементНастроек.Ключ="НастройкиКомпоновщика" ИЛИ ЭлементНастроек.Ключ="ФиксированныеНастройки" ИЛИ ЭлементНастроек.Ключ="ПользовательскиеНастройки" ИЛИ РеквизитыФормы.Найти(ЭлементНастроек.Ключ)=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Попытка
				Если ТипЗнч(ОбъектНастройки[ЭлементНастроек.Ключ])=Тип("СписокЗначений") Тогда
					ОбъектНастройки[ЭлементНастроек.Ключ].ЗагрузитьЗначения(ЭлементНастроек.Значение.ВыгрузитьЗначения());
				ИначеЕсли ТипЗнч(ОбъектНастройки[ЭлементНастроек.Ключ])=Тип("ДанныеФормыДерево") ИЛИ ТипЗнч(ОбъектНастройки[ЭлементНастроек.Ключ])=Тип("ДанныеФормыКоллекция")  Тогда
					Попытка
						ЗначениеВДанныеФормы(ЭлементНастроек.Значение,ОбъектНастройки[ЭлементНастроек.Ключ]);
					Исключение
						ОбъектНастройки[ЭлементНастроек.Ключ].Очистить();
						Для Каждого СтрокаДанных Из ЭлементНастроек.Значение Цикл
							НС = ОбъектНастройки[ЭлементНастроек.Ключ].Добавить();
							ЗаполнитьЗначенияСвойств(НС,СтрокаДанных);
						КонецЦикла;
					КонецПопытки;
				Иначе
					ОбъектНастройки[ЭлементНастроек.Ключ]= ЭлементНастроек.Значение;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ОграничиватьВидимостьНастроекОтчетов() Экспорт
	Возврат НЕ (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("фин_Бюджетирование") ИЛИ РольДоступна("фин_СозданиеПользовательскихОтчетовБюджетирования"));
КонецФункции

Функция ДоступныеПользователюНастройки(ТолькоРедактируемые=Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	фин_НастройкиОтчетовПоБюджетам.Ссылка
	|ИЗ
	|	Справочник.фин_НастройкиОтчетовПоБюджетам КАК фин_НастройкиОтчетовПоБюджетам
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Доступность.Ссылка КАК НастройкаОтчета
	|		ИЗ
	|			Справочник.фин_НастройкиОтчетовПоБюджетам.Доступность КАК Доступность
	|		ГДЕ
	|			Доступность.Пользователь = &Пользователь "+?(ТолькоРедактируемые," И Доступность.ЗапретитьИзменение = ЛОЖЬ","")+") КАК ДоступностьНастроек
	|		ПО фин_НастройкиОтчетовПоБюджетам.Ссылка = ДоступностьНастроек.НастройкаОтчета
	|ГДЕ
	|	(фин_НастройкиОтчетовПоБюджетам.ОграничитьПоПользователям = ЛОЖЬ
	|			ИЛИ НЕ ДоступностьНастроек.НастройкаОтчета ЕСТЬ NULL )";
	Запрос.УстановитьПараметр("Пользователь",фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СписокДоступных = Новый СписокЗначений;
	СписокДоступных.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат СписокДоступных;
КонецФункции

Процедура ПодготовкаФормыОтчета(Форма,ВидОтчета = Неопределено) Экспорт
	ГруппировкиДерево = Форма.ГруппировкиДерево;
	
	НоваяСтрока = ГруппировкиДерево.ПолучитьЭлементы().Добавить();
	НоваяСтрока.ВидГруппировки 	= Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаСтрок;
	НоваяСтрока.Представление 	= "Строки";
	НоваяСтрока.ЭтоГруппа 		= Истина;
	
	Если ВидОтчета <> Справочники.фин_ВидыОтчетовПоБюджетам.фин_ВременнойАнализБюджетныхДанных Тогда
		НоваяСтрока = ГруппировкиДерево.ПолучитьЭлементы().Добавить();
		НоваяСтрока.ВидГруппировки 	= Перечисления.фин_ВидыГруппировокОтчета.Колонка;
		НоваяСтрока.Представление 	= "Колонки";
		НоваяСтрока.ЭтоГруппа 		= Истина;
	КонецЕсли;
	
	НоваяСтрока = ГруппировкиДерево.ПолучитьЭлементы().Добавить();
	НоваяСтрока.ВидГруппировки 	= Перечисления.фин_ВидыГруппировокОтчета.Поле;
	НоваяСтрока.Представление 	= "Поля детальных записей";
	НоваяСтрока.ЭтоГруппа 		= Истина;
	
	Форма.НадписьПараметры 				= "Параметры";
	Форма.НадписьОтбор 					= "Отбор";
	Форма.НадписьГруппировки 				= "Группировки";
	Форма.НадписьДополнительныеПараметры 	= "Дополнительные параметры";
	Форма.НадписьОформление 				= "Оформление";
	Форма.НадписьПоказатели 				= "Показатели";
	Форма.НадписьДанныеДляАнализа 		= "Данные для анализа";
	Форма.НадписьВидыАналитическихДанных 	= "Виды аналитических данных";
	Форма.НадписьТаблицыОтчета 			= "Таблицы отчета";
	Форма.НадписьДанныеОтчета 			= "Данные отчета";
	Форма.НадписьДетализацияСчетов 		= "Детализация счетов";
	Форма.НадписьПоляАнализаКорректировокИОтклонений = "Поля анализа корректировок и отклонений";
	Форма.Элементы.Отбор.ОтборСтрок = Новый ФиксированнаяСтруктура("Таблица",ПредопределенноеЗначение("Справочник.фин_ТаблицыОтчетовПоБюджетам.ПустаяСсылка"));	
КонецПроцедуры

Процедура УправлениеФормойОтчета(Форма,ВидОтчетаБюджетирования,Параметры,ИмяОтчета=Неопределено,ОбъектСправочникаНастроек = Неопределено) Экспорт
	
	РеквизитыНастроек 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.РеквизитыСправочникаНастроекОтчетов();
	Элементы 			= Форма.Элементы;
	НастройкаПериода 	= Форма.НастройкаПериода;
	
	ИспользованиеСтруктурныхПодразделений 	= Ложь;
	ОбъектОтчета 							= Справочники.фин_ВидыОтчетовПоБюджетам.НовыйЭкземплярОтчета(ВидОтчетаБюджетирования);
	Если ОбъектОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Форма.ДополнительныеПредставления	= ОбъектОтчета.ДополнительныеПредставления;
	Если ИмяОтчета = Неопределено Тогда
		ИмяОтчета 						= Справочники.фин_ВидыОтчетовПоБюджетам.ПолучитьИмяМетаданныхОтчета(ВидОтчетаБюджетирования);
	КонецЕсли;
	МетаданныеОтчета 					= Справочники.фин_ВидыОтчетовПоБюджетам.МетаданныеОтчета(ВидОтчетаБюджетирования);
	
	Если ОбъектСправочникаНастроек <> Неопределено Тогда
		Если Форма.СписокДополнительныхПараметров.Количество()>0 Тогда
			МассивУдалить = Новый Массив;
			Для Каждого РеквизитФормы Из Форма.ПолучитьРеквизиты() Цикл
				Если Форма.СписокДополнительныхПараметров.НайтиПоЗначению(РеквизитФормы.Имя)<>Неопределено Тогда
					Если МетаданныеОтчета.Реквизиты.Найти(РеквизитФормы.Имя)=Неопределено Тогда
						МассивУдалить.Добавить(РеквизитФормы.Имя);
						Форма.СписокДополнительныхПараметров.Удалить(Форма.СписокДополнительныхПараметров.НайтиПоЗначению(РеквизитФормы.Имя));
					КонецЕсли;
					Элементформы = Форма.Элементы.Найти(РеквизитФормы.Имя);
					Если Элементформы<>Неопределено Тогда
						Форма.Элементы.Удалить(ЭлементФормы);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если МассивУдалить.Количество()>0 Тогда
				Форма.ИзменитьРеквизиты(,МассивУдалить);
			КонецЕсли;
		КонецЕсли;
		Для Каждого ТаблицаОтчета Из фин_ОбщегоНазначенияВызовСервераПовтИсп.ТабличныеЧастиСправочникаНастроекОтчетов() Цикл
			Если Элементы.Найти("ГруппаТаблица"+ТаблицаОтчета)<>Неопределено Тогда
				Элементы["ГруппаТаблица"+ТаблицаОтчета].Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
		СлужебныеНастройки = Новый Массив;
		СлужебныеНастройки.Добавить(НРег("ОграничитьПоПользователям"));
		СлужебныеНастройки.Добавить(НРег("ВидНастройки"));
		СлужебныеНастройки.Добавить(НРег("ОткрыватьПриЗапуске"));
		СлужебныеНастройки.Добавить(НРег("СохранятьАвтоматически"));
		Для Каждого Реквизит Из РеквизитыНастроек Цикл
			Если Элементы.Найти(Реквизит)<>Неопределено И СлужебныеНастройки.Найти(НРег(Реквизит))=Неопределено Тогда
				Элементы[Реквизит].Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	Форма.ИспользованиеОрганизации 			= МетаданныеОтчета.Реквизиты.Найти("Организация")<>Неопределено И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям");
	Попытка
		Если ИмяОтчета = "фин_ПрогнозныйОтчетОДвиженииДенег" ИЛИ ИмяОтчета="фин_ПрогнозныйОтчетОДоходахИРасходах" Тогда
			СпискиВыбораДляПереключателей 	= ОбъектОтчета.СпискиВыбораДляПереключателей;
		Иначе
			СпискиВыбораДляПереключателей 	= Новый Структура;
		КонецЕсли;
	Исключение
		СпискиВыбораДляПереключателей 		= Новый Структура;
	КонецПопытки;
	Форма.ПоддержкаНесколькихТаблиц 		= МетаданныеОтчета.ТабличныеЧасти.Найти("ТаблицыОтчета")<>Неопределено;
	МассивЭлементов 	= Новый Массив;
	П_НачалоПериода 	= МетаданныеОтчета.Реквизиты.Найти("НачалоПериода");
	П_КонецПериода 		= МетаданныеОтчета.Реквизиты.Найти("КонецПериода");
	Если П_НачалоПериода<>Неопределено
		И П_КонецПериода<>Неопределено Тогда
		Форма.ИспользоватьНастройкуПериода	= Истина;
	Иначе
		Форма.ИспользоватьНастройкуПериода	= Ложь;
	КонецЕсли;
	Элементы.ПериодОтчета.Видимость	= Форма.ИспользоватьНастройкуПериода;
	П_НачалоПериодаПлан 			= МетаданныеОтчета.Реквизиты.Найти("НачалоПериодаПланирования");
	П_КонецПериодаПлан 				= МетаданныеОтчета.Реквизиты.Найти("КонецПериодаПланирования");
	П_Сценарий 						= МетаданныеОтчета.Реквизиты.Найти("Сценарий");
	Если П_НачалоПериодаПлан<>Неопределено 
		И П_КонецПериодаПлан<>Неопределено 
		И П_Сценарий<>Неопределено  Тогда
		Форма.ИспользоватьПериодСценария	= Истина;	
	Иначе
		Форма.ИспользоватьПериодСценария	= Ложь;
	КонецЕсли;
	П_Бюджет = МетаданныеОтчета.Реквизиты.Найти("Бюджет");
	Если П_Бюджет<>Неопределено ИЛИ (ИмяОтчета = "фин_ПечатьБюджета" И ОбъектСправочникаНастроек <> Неопределено) Тогда
		Элементы.Бюджет.Видимость 		= Истина;
		Элементы.Бюджет.ОграничениеТипа	= Новый ОписаниеТипов("СправочникСсылка.фин_Бюджеты");
	Иначе
		Элементы.Бюджет.Видимость 		= Ложь;
	КонецЕсли;
	П_ВидДанных 							= МетаданныеОтчета.Реквизиты.Найти("ВидДанных");
	Если П_ВидДанных <>Неопределено Тогда
		Элементы.ВидДанных.Видимость 	= Истина;
	Иначе 
		Элементы.ВидДанных.Видимость 	= Ложь;
	КонецЕсли;
	Элементы.ПериодПланирования.Видимость	= Форма.ИспользоватьПериодСценария;
	МассивПризнаковОтбора 					= Новый Массив;
	МассивПолейОтбора 						= Новый Массив;
	МассивГруппЭлементовОтбора 				= Новый Массив;
	Форма.РеквизитыТекущегоОтчета.Очистить();
	Для Каждого ПараметрОтчета Из МетаданныеОтчета.Реквизиты Цикл
		Имя 		= ПараметрОтчета.Имя;
		Форма.РеквизитыТекущегоОтчета.Добавить(Имя);
		Если ОбъектСправочникаНастроек <> Неопределено Тогда
			Если РеквизитыНастроек.Найти(НРег(Имя))<>Неопределено ИЛИ Форма.СписокДополнительныхПараметров.НайтиПоЗначению(Имя)<>Неопределено Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если Форма.ИспользоватьНастройкуПериода И (Строка(Имя)="НачалоПериода" ИЛИ Строка(Имя)="КонецПериода") Тогда
				Продолжить;
			КонецЕсли;
			Если Форма.ИспользоватьПериодСценария И (Строка(Имя)="НачалоПериодаПланирования" ИЛИ Строка(Имя)="КонецПериодаПланирования" ИЛИ Строка(Имя)="Сценарий") Тогда
				Если Элементы.Найти(Имя)<>Неопределено Тогда
					Элементы[Имя].Заголовок = ПараметрОтчета.Синоним;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			Если Строка(Имя)="Сценарий" Тогда
				Если Элементы.Найти(Имя)<>Неопределено Тогда
					Элементы[Имя].Заголовок = ПараметрОтчета.Синоним;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			Если Строка(Имя)="Периодичность" ИЛИ Строка(Имя)="ВидДанных" ИЛИ Строка(Имя)="Бюджет" Тогда
				Если Элементы.Найти(Имя)<>Неопределено Тогда
					Элементы[Имя].Заголовок = ПараметрОтчета.Синоним;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		мЗаголовок 	= ПараметрОтчета.Синоним;
		Тип 		= ПараметрОтчета.Тип;
		НовыйРеквизит = Новый РеквизитФормы(Строка(Имя),Тип,,мЗаголовок);
		Если ОбъектСправочникаНастроек <> Неопределено Тогда
			Форма.СписокДополнительныхПараметров.Добавить(Имя);
		КонецЕсли;
		МассивЭлементов.Добавить(НовыйРеквизит);
		Если МетаданныеОтчета.Реквизиты.Найти("Отбор"+Строка(Имя))<>Неопределено Тогда
			МассивПолейОтбора.Добавить(Строка(Имя));
			МассивПризнаковОтбора.Добавить("Отбор"+Строка(Имя));
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТаблицаОтчета Из МетаданныеОтчета.ТабличныеЧасти Цикл
		Имя 		= ТаблицаОтчета.Имя;
		Если Элементы.Найти("ГруппаТаблица"+Имя)<>Неопределено Тогда
			Элементы["ГруппаТаблица"+Имя].Видимость = Истина;
		КонецЕсли;
		Если ОбъектСправочникаНастроек = Неопределено И Параметры.Свойство(Имя) И Имя<>"Показатели" Тогда
			Для Каждого СтрокаТЧ Из Параметры[Имя] Цикл
				НС = Форма[Имя].Добавить();
				ЗаполнитьЗначенияСвойств(НС,СтрокаТЧ);
			КонецЦикла;
		ИначеЕсли ОбъектСправочникаНастроек<>Неопределено И (Имя<>"Группировки" И Имя<>"Показатели" И Имя<>"Отбор") Тогда
			Попытка
				Для Каждого СтрокаТЧ Из ОбъектСправочникаНастроек[Имя] Цикл
					НС = Форма[Имя].Добавить();
					ЗаполнитьЗначенияСвойств(НС,СтрокаТЧ);
				КонецЦикла;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	Если ОбъектСправочникаНастроек = Неопределено Тогда
		Если Параметры.Свойство("Показатели") Тогда
			Для Каждого Показатель Из Параметры.Показатели Цикл
				НС 				= Форма.Показатели.Добавить();
				НС.Показатель 	= ?(ТипЗнч(Показатель)=Тип("СтрокаТаблицыЗначений"),Показатель.Показатель,Показатель);
			КонецЦикла;
		КонецЕсли;
		Если Параметры.Свойство("ОтборДляРасшифровки") Тогда
			ТаблицаОтбор 	= ЗначениеИзСтрокиВнутр(Параметры.ОтборДляРасшифровки);
			Для Каждого ЭлементОтбора Из ТаблицаОтбор Цикл
				НС 			= Форма.Отбор.Добавить();
				ЗаполнитьЗначенияСвойств(НС,ЭлементОтбора);
				Если Параметры.Свойство("Счет") И ОбъектОтчета.Метаданные().Реквизиты.Найти("Счет")<>Неопределено И ТипЗнч(НС.ПолеОтбора)=Тип("ПеречислениеСсылка.фин_ДополнительныеРазрезыОтчетов") И Найти(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(НС.ПолеОтбора),"Субконто")<>0 Тогда
					НС.ПолеОтбора = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИзмерениеПоРазрезу(Параметры.Счет.ВидыСубконто[Число(Прав(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(НС.ПолеОтбора),1))-1].ВидСубконто);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Форма.ИзменитьРеквизиты(МассивЭлементов);
	Если ОбъектСправочникаНастроек <> Неопределено Тогда
		Для Каждого ЭлементСписка Из Форма.СписокДополнительныхПараметров Цикл
			Форма[ЭлементСписка.Значение] = Справочники.фин_НастройкиОтчетовПоБюджетам.ЗначениеРеквизитаОтчетаИзТекущейНастройки(ЭлементСписка.Значение,ОбъектСправочникаНастроек);
		КонецЦикла;
		Если Форма.ИспользоватьНастройкуПериода Тогда
			НастройкаПериода.ДатаНачала 	= ОбъектСправочникаНастроек.НачалоПериода;
			НастройкаПериода.ДатаОкончания 	= ОбъектСправочникаНастроек.КонецПериода;
		КонецЕсли;
	Иначе
		Форма.УстановитьОтборИПараметры(ОбъектОтчета);
		Для Каждого Параметр Из МетаданныеОтчета.Реквизиты Цикл
			Если Параметры.Свойство(Параметр.Имя) Тогда
				Форма[Параметр.Имя] =  Параметры[Параметр.Имя];
			КонецЕсли;
		КонецЦикла;
		Форма.ОбновитьЗначенияПараметров();
	КонецЕсли;
	Для Каждого ЭлементОтбора Из МассивПолейОтбора Цикл
		ПолеГруппыОтбора 						= Элементы.Добавить("ГруппаОтбор"+ЭлементОтбора,Тип("ГруппаФормы"),Элементы.ПараметрыОтчета);
		ПолеГруппыОтбора.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
		ПолеГруппыОтбора.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ПолеГруппыОтбора.ОтображатьЗаголовок 	= Ложь;
		ПолеГруппыОтбора.Отображение 			= ОтображениеОбычнойГруппы.Нет;
		МассивГруппЭлементовОтбора.Добавить(ПолеГруппыОтбора);
	КонецЦикла;
	Для Каждого ПараметрОтчета Из МетаданныеОтчета.Реквизиты Цикл
		Имя 			= ПараметрОтчета.Имя;
		Если Форма.ИспользоватьНастройкуПериода И (Имя="НачалоПериода" ИЛИ Имя="КонецПериода") Тогда
			Продолжить;
		КонецЕсли;
		Если Форма.ИспользоватьПериодСценария И (Имя="НачалоПериодаПланирования" ИЛИ Имя="КонецПериодаПланирования" ИЛИ Имя="Сценарий") Тогда
			Если Элементы.Найти(Имя)<>Неопределено Тогда
				Элементы[Имя].Заголовок = ПараметрОтчета.Синоним;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если Строка(Имя)="Периодичность" ИЛИ Строка(Имя)="ВидДанных" Тогда
			Если Элементы.Найти(Имя)<>Неопределено Тогда
				Элементы[Имя].Заголовок = ПараметрОтчета.Синоним;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если Строка(Имя)="Бюджет" Тогда
			Если Элементы.Найти(Имя)<>Неопределено Тогда
				Элементы[Имя].Заголовок = ПараметрОтчета.Синоним;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если ОбъектСправочникаНастроек <> Неопределено Тогда
			Если РеквизитыНастроек.Найти(НРег(Имя))<>Неопределено И Форма.Элементы.Найти(Имя)<>Неопределено Тогда//ИЛИ Форма.СписокДополнительныхПараметров.НайтиПоЗначению(Имя)<>Неопределено Тогда
				Форма.Элементы[Имя].Видимость = Истина;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если МассивПолейОтбора.Найти(Имя)<>Неопределено Тогда
			ЭлементПараметра 					= Элементы.Добавить(Имя,Тип("ПолеФормы"),МассивГруппЭлементовОтбора.Получить(МассивПолейОтбора.Найти(Имя)));
			ЭлементПараметра.Вид 				= ВидПоляФормы.ПолеВвода;
			ЭлементПараметра.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ИначеЕсли МассивПризнаковОтбора.Найти(Имя)<>Неопределено Тогда
			ГруппаФормы = МассивГруппЭлементовОтбора.Получить(МассивПризнаковОтбора.Найти(Имя));
			Если ГруппаФормы.ПодчиненныеЭлементы.Количество()>0 Тогда
				ЭлементПараметра = Элементы.Вставить(Имя,Тип("ПолеФормы"),ГруппаФормы,ГруппаФормы.ПодчиненныеЭлементы[0]);
			Иначе
				ЭлементПараметра = Элементы.Добавить(Имя,Тип("ПолеФормы"),ГруппаФормы);
			КонецЕсли;
			ЭлементПараметра.Вид 				= ВидПоляФормы.ПолеФлажка;
			ЭлементПараметра.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Право;
		Иначе
			Если ОбъектОтчета.ДополнительныеПараметры.Найти(Имя)<>Неопределено Тогда
				ЭлементПараметра = Элементы.Добавить(Имя,Тип("ПолеФормы"),Элементы.ДополнительныеПараметрыОтчета);
			ИначеЕсли ОбъектОтчета.ПараметрыОформления.Найти(Имя)<>Неопределено Тогда
				ЭлементПараметра = Элементы.Добавить(Имя,Тип("ПолеФормы"),Элементы.ОформлениеОтчета);
			Иначе
				ЭлементПараметра = Элементы.Добавить(?(Имя="Сценарий","Сценарий1",Имя),Тип("ПолеФормы"),Элементы.ПараметрыОтчета);
			КонецЕсли;
			ЭлементПараметра.Вид = ?(ПараметрОтчета.Тип.СодержитТип(Тип("Булево")) И ПараметрОтчета.Тип.Типы().Количество()=1,ВидПоляФормы.ПолеФлажка,?(СпискиВыбораДляПереключателей.Свойство(Имя),ВидПоляФормы.ПолеПереключателя,ВидПоляФормы.ПолеВвода));
		КонецЕсли;
		ЭлементПараметра.ПутьКДанным = ?(ОбъектСправочникаНастроек = Неопределено ИЛИ РеквизитыНастроек.Найти(НРег(Имя))=Неопределено,"","Объект.")+Имя;
		Если ЭлементПараметра.Вид = ВидПоляФормы.ПолеВвода Тогда
			ЭлементПараметра.Ширина = 25;
			ЭлементПараметра.РастягиватьПоГоризонтали=Истина;
		ИначеЕсли ЭлементПараметра.Вид = ВидПоляФормы.ПолеФлажка Тогда
			ЭлементПараметра.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Право;
		ИначеЕсли ЭлементПараметра.Вид = ВидПоляФормы.ПолеПереключателя И СпискиВыбораДляПереключателей.Свойство(Имя) Тогда
			ЭлементПараметра.КоличествоКолонок = 1;
			СписокВыбораПереключателя = СпискиВыбораДляПереключателей[Имя];
			Для Каждого ЭлементСписка Из СписокВыбораПереключателя Цикл
				ЭлементПараметра.СписокВыбора.Добавить(ЭлементСписка.Значение,ЭлементСписка.Представление);
			КонецЦикла;
		КонецЕсли;
		ЭлементПараметра.ТолькоПросмотр = ?((Имя="Пользователь" ИЛИ Имя="ОтборПользователь") И НЕ (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("усд_УправлениеСогласованиемИУтверждениемДокументов")),Истина,Ложь);
		ЭлементПараметра.УстановитьДействие("ПриИзменении","ПриИзмененииПараметра");
		Если Имя = "ОсновнаяГруппировка" Тогда
			ЭлементПараметра.УстановитьДействие("НачалоВыбора","ГруппировкиГруппировкаНачалоВыбора");
			ЭлементПараметра.РедактированиеТекста = Ложь;
			ЭлементПараметра.КнопкаОчистки = Истина;
			//фин_РаботаСДополнительнымиРазрезамиБюджетирования.НастроитьПредставлениеРазрезовВПолеФормы(Форма);
			
			НастроитьРасширенноеПредставлениеРазрезов(Форма,"ОсновнаяГруппировка","",Ложь,ОбъектСправочникаНастроек = Неопределено,Форма.ДополнительныеПредставления);
		КонецЕсли;
		Если Имя = "УпорядочиваниеСтатей" Тогда
			ЭлементПараметра.УстановитьДействие("НачалоВыбора","УпорядочиваниеСтатейНачалоВыбора");
			ЭлементПараметра.КнопкаВыбора = Истина;
			ЭлементПараметра.РедактированиеТекста = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если ИмяОтчета = "фин_ПечатьБюджета" Тогда
		Если ОбъектСправочникаНастроек = Неопределено Тогда
			Если НЕ Параметры.Свойство("Документ") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данный отчет не предназначен для самостоятельного использования!");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			Форма.ДокументПечатиБюджета 		= Параметры["Документ"];
			Форма.ДокументПечатиБюджета_Бюджет 	= Форма.ДокументПечатиБюджета.ФормируемыйБюджет;
			Элементы["Документ"].ТолькоПросмотр = Истина;
		КонецЕсли;
		Элементы["ВидФормы"].ТолькоПросмотр = Истина;
	КонецЕсли;
	//Заполним представление структурных единиц
	Форма.ИспользоватьВидГруппировки 	= Истина;
	Форма.ИспользоватьСоставноеПоле 	= Истина;
	Форма.ИспользоватьРасположение 		= Истина;
	Форма.ИспользоватьСортировку 		= Ложь;
	Если МетаданныеОтчета.ТабличныеЧасти.Найти("Группировки")<>Неопределено И МетаданныеОтчета.ТабличныеЧасти.Найти("Группировки").Реквизиты.Найти("Сортировка")<>Неопределено Тогда
		Форма.ИспользоватьСортировку 		= Истина;
	КонецЕсли;
	Если МетаданныеОтчета.ТабличныеЧасти.Найти("Группировки")<>Неопределено И МетаданныеОтчета.ТабличныеЧасти.Найти("Группировки").Реквизиты.Найти("ВидГруппировки")=Неопределено Тогда
		Форма.ИспользоватьВидГруппировки 	= Ложь;
	КонецЕсли;
	Если МетаданныеОтчета.ТабличныеЧасти.Найти("Группировки")<>Неопределено И МетаданныеОтчета.ТабличныеЧасти.Найти("Группировки").Реквизиты.Найти("СоставноеПоле")=Неопределено Тогда
		Форма.ИспользоватьСоставноеПоле 	= Ложь;
	КонецЕсли;
	Если МетаданныеОтчета.ТабличныеЧасти.Найти("Группировки")<>Неопределено И МетаданныеОтчета.ТабличныеЧасти.Найти("Группировки").Реквизиты.Найти("Расположение")=Неопределено Тогда
		Форма.ИспользоватьРасположение 	= Ложь;
	КонецЕсли;
	Элементы.ДанныеДляАнализаСтатьяБюджета.Видимость = ИмяОтчета="фин_АнализРассогласованияСтатей"; 
	ЗаполнитьСпискиПоказателейИГруппировокВФормеОтчета(Форма,ВидОтчетаБюджетирования,?(ОбъектСправочникаНастроек=Неопределено,Форма,ОбъектСправочникаНастроек));
	//Если Элементы.ВидДанных.Видимость И ИмяОтчета<>"фин_ИсполнениеБюджета" Тогда
	//	Факт = (Объект.ВидДанных <> Перечисления.фин_ВидыДанныхОтчета.Плановые И Объект.ВидДанных <> Перечисления.фин_ВидыДанныхОтчета.ПустаяСсылка()) И Элементы.Сценарий.Видимость=Истина;
	//	Если Факт Тогда
	//		Элементы.Сценарий.Видимость = Ложь;
	//		Элементы.Периодичность.Видимость = Истина;
	//	Иначе
	//		Элементы.Сценарий.Видимость = Истина;
	//		Элементы.Периодичность.Видимость = Ложь;
	//	КонецЕсли;
	//КонецЕсли;
	ОбъектНастроек = ?(ОбъектСправочникаНастроек=Неопределено,Форма,ОбъектСправочникаНастроек);
	фин_УправлениеОтчетамиКлиентСервер.УстановитьТекстПериода(Форма.НадписьПериодПланирования,ИмяОтчета,ОбъектНастроек.ВидДанных,Элементы,ОбъектНастроек.Периодичность,ОбъектНастроек.Сценарий,ОбъектНастроек.НачалоПериодаПланирования,ОбъектНастроек.КонецПериодаПланирования,Ложь);
	НастроитьРасширенноеПредставлениеРазрезов(Форма,"Отбор","ПолеОтбора",Ложь,Истина,Форма.ДополнительныеПредставления);
КонецПроцедуры

Процедура ЗаполнитьСпискиПоказателейИГруппировокВФормеОтчета(Форма,ВидОтчетаБюджетирования,Объект) Экспорт
	ИмяОтчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяОтчетаПоВиду(ВидОтчетаБюджетирования);
	Если ИмяОтчета = "фин_ПрогнозныйОтчетОДвиженииДенег"
		ИЛИ ИмяОтчета = "фин_ПрогнозныйОтчетОДоходахИРасходах" Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВидОтчетаБюджетирования) Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьСпискиДоступныхПоказателейИГруппировок(Форма,ВидОтчетаБюджетирования,Объект);
	СтрокиУдалить = Новый Массив;
	Для Каждого СтрокаПоказатель Из Объект.Показатели Цикл
		Если Форма.ДоступныеПоказатели.НайтиПоЗначению(СтрокаПоказатель.Показатель)=Неопределено Тогда
			СтрокиУдалить.Добавить(СтрокаПоказатель);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаПоказатель Из СтрокиУдалить Цикл
		Объект.Показатели.Удалить(СтрокаПоказатель);
	КонецЦикла;
	СтрокиУдалить = Новый Массив;
	Для Каждого СтрокаПоказатель Из Объект.Группировки Цикл
		Если Форма.ДоступныеГруппировки.НайтиПоЗначению(СтрокаПоказатель.Измерение)=Неопределено Тогда
			Если СтрокаПоказатель.Измерение = Перечисления.фин_ФактическиеПоказателиБюджетирования.ФинансовыйПоказатель Тогда
				СтрокаПоказатель.Измерение = Перечисления.фин_ДополнительныеРазрезыОтчетов.СтатьяБюджета;
				Продолжить;
			КонецЕсли;
			СтрокиУдалить.Добавить(СтрокаПоказатель);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаПоказатель Из СтрокиУдалить Цикл
		Объект.Группировки.Удалить(СтрокаПоказатель);
	КонецЦикла;
	СтрокиУдалить = Новый Массив;
	Для Каждого СтрокаПоказатель Из Форма.Отбор Цикл
		Если Форма.ДоступныеГруппировки.НайтиПоЗначению(СтрокаПоказатель.ПолеОтбора)=Неопределено Тогда
			СтрокиУдалить.Добавить(СтрокаПоказатель);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаПоказатель Из СтрокиУдалить Цикл
		Форма.Отбор.Удалить(СтрокаПоказатель);
	КонецЦикла;
	Если Форма.РеквизитыТекущегоОтчета.НайтиПоЗначению("ОсновнаяГруппировка")<>Неопределено И Форма.ДоступныеГруппировки.НайтиПоЗначению(Объект["ОсновнаяГруппировка"])=Неопределено Тогда
		Объект["ОсновнаяГруппировка"] = Перечисления.фин_ФактическиеПоказателиБюджетирования.ПустаяСсылка();
	КонецЕсли;
	фин_УправлениеОтчетамиКлиентСервер.ЗаполнитьИерархиюГруппировокИзТаблицы(Форма.ГруппировкиДерево,Объект.Группировки,Форма.ТекущаяТаблица,Форма.ПоддержкаНесколькихТаблиц,Истина);
КонецПроцедуры

Процедура НастроитьРасширенноеПредставлениеРазрезов(Форма,ИмяПоля="РазрезыУчета",ИмяРеквизита="Измерение",Очищать=Истина,ТаблицаЗначений=Ложь,ДополнительныеПредставления=Неопределено) Экспорт
	УсловноеОформление = Форма.УсловноеОформление;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкаДополнительныхРазрезовБюджетирования.Измерение,
		|	НастройкаДополнительныхРазрезовБюджетирования.Разрез
		|ИЗ
		|	РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК НастройкаДополнительныхРазрезовБюджетирования";

	Результат = Запрос.Выполнить().Выбрать();
	Если Очищать Тогда
		УсловноеОформление.Элементы.Очистить();
	КонецЕсли;
	Пока Результат.Следующий() Цикл
		НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование=Истина;
		ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение = Результат.Измерение;
		ОтборЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(?(ТаблицаЗначений=Ложь,"Объект.","")+ИмяПоля+?(ИмяРеквизита="","","."+ИмяРеквизита));
		ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование=Истина;
		ПолеОформления.Поле=Новый ПолеКомпоновкиДанных(ИмяПоля+ИмяРеквизита);
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Результат.Измерение));
	КонецЦикла;
	Если ДополнительныеПредставления<>Неопределено Тогда
		Для Каждого Элемент Из ДополнительныеПредставления Цикл
			НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
			НовыйЭлементОформления.Использование=Истина;
			ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемент.ПравоеЗначение = Элемент.Значение;
			ОтборЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(?(ТаблицаЗначений=Ложь,"Объект.","")+ИмяПоля+?(ИмяРеквизита="","","."+ИмяРеквизита));
			ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
			ПолеОформления.Использование=Истина;
			ПолеОформления.Поле=Новый ПолеКомпоновкиДанных(ИмяПоля+ИмяРеквизита);
			НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",Элемент.Представление);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// возвращает описание типа для элементов отбора
//
Функция ОписаниеТипаДляОтбора(ТипРазреза,ВидСравнения=Неопределено) Экспорт
	Если ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСписке 
		ИЛИ ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВСписке  
		ИЛИ ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСпискеПоИерархии  
		ИЛИ ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВСпискеПоИерархии  Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СписокЗначений"));
		Возврат Новый ОписаниеТипов(МассивТипов);
	Иначе
		Возврат ТипРазреза;
	КонецЕсли;
КонецФункции //ОписаниеТипаДляОтбора

#КонецОбласти

#КонецЕсли

