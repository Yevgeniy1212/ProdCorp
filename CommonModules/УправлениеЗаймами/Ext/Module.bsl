 //
 Функция ПолучитьЧислоДнейВГоду(ВидГодовогоКоличестваДней) Экспорт
	 
	 Если  ВидГодовогоКоличестваДней = Перечисления.ВидыГодовогоКоличестваДней.К360 Тогда
		 ЧислоДней = 360;
	 ИначеЕсли  ВидГодовогоКоличестваДней = Перечисления.ВидыГодовогоКоличестваДней.К365 Тогда
		 ЧислоДней = 365;
	 Иначе
		 ЧислоДней = 365;
	 КонецЕсли;
	 
	 Возврат ЧислоДней;
 КонецФункции
 
 Функция ПолучитьДеньКонцаМесяца(ТекДата,ВидГодовогоКоличестваДней) Экспорт
	 //Если Месяц(ТекДата) = 2 Тогда
	 //	ДнейКонцаМесяца = 28;
	 //Иначе
	 //	Если  ВидГодовогоКоличестваДней = Перечисления.ВидыГодовогоКоличестваДней.К360 Тогда
	 //   	 ДнейКонцаМесяца = 30;
	 //	Иначе
			 ДнейКонцаМесяца = День(КонецМесяца(ТекДата));
	 //	КонецЕсли;
	 //КонецЕсли;
	 
	 Возврат ДнейКонцаМесяца;
 КонецФункции
 
 //
 Процедура ПолучитьСуммуВознагрожденияКПолучению(СтрокаТЧ) Экспорт
	 
	 СтрокаТЧ.СуммаВознагрожденияКПолучению = СтрокаТЧ.СуммаВознагрождения-СтрокаТЧ.СуммаКПН;
	  
 КонецПроцедуры
 
 //
 Процедура РассчитатьСуммуВознагрождения(СтруктураДляРасчета) Экспорт
	 
	 СтрокаТЧ = СтруктураДляРасчета.ТекущаяСтрокаТЧ;
	 КоличествоДнейВГоду = ПолучитьЧислоДнейВГоду(СтруктураДляРасчета.ВидГодовогоКоличестваДней);
	 
	 СтрокаТЧ.СуммаВознагрождения = СтрокаТЧ.Сумма*(СтрокаТЧ.КоличествоДней/КоличествоДнейВГоду)*(СтрокаТЧ.ПроцентВознагрождения/100);
	 
 КонецПроцедуры
 
 Процедура РассчитатьСуммуНачисленногоВознагрождения(СтруктураДляРасчета) Экспорт
	 
	 СтрокаТЧ = СтруктураДляРасчета.ТекущаяСтрокаТЧ;
	 КоличествоДнейВГоду = ПолучитьЧислоДнейВГоду(СтруктураДляРасчета.ВидГодовогоКоличестваДней);
	 
	 СтрокаТЧ.ВалСуммаВознагрождения = СтрокаТЧ.ВалСумма*(СтрокаТЧ.КоличествоДней/КоличествоДнейВГоду)*(СтрокаТЧ.ПроцентВознагрождения/100);
	 
 КонецПроцедуры

 //
 Процедура РассчитатьСуммуКПН(СтруктураДляРасчета) Экспорт
	 
	 СтрокаТЧ = СтруктураДляРасчета.ТекущаяСтрокаТЧ;
	 Ставка =  СтруктураДляРасчета.СтавкаКПН;
	 
	 СтрокаТЧ.СуммаКПН = СтрокаТЧ.СуммаВознагрождения*Ставка/100;
	 
 КонецПроцедуры

 //
 Процедура ПолучитьПериод(СтруктураДляРасчета) Экспорт
	 
	 ДатаНачала 	= СтруктураДляРасчета.ДатаНачала;
	 ДатаОкончания  = СтруктураДляРасчета.ДатаОкончания;
	 ДатаПериода 	= СтруктураДляРасчета.ТекДата;
	 ТекСтрокаТЧ 	= СтруктураДляРасчета.ТекущаяСтрокаТЧ;
	 
	 Если НачалоМесяца(Датаначала) = НачалоМесяца(ДатаПериода) Тогда
		 ТекСтрокаТЧ.Период = Датаначала;
	 ИначеЕсли НачалоМесяца(ДатаОкончания) = НачалоМесяца(ДатаПериода) Тогда
		 ТекСтрокаТЧ.Период = ДатаОкончания;
	 Иначе	 
		 ТекСтрокаТЧ.Период = НачалоМесяца(ДатаПериода);
	 КонецЕсли;
	 
 КонецПроцедуры
 
 //
 Функция РассчитатьКоличествоДней(СтруктураДляРасчета) Экспорт
	 
	 ДатаНачала 	= СтруктураДляРасчета.ДатаНачала;
	 ДатаОкончания  = СтруктураДляРасчета.ДатаОкончания;
	 ДатаПериода 	= СтруктураДляРасчета.ТекДата;
	 
	 Если НачалоМесяца(Датаначала) = НачалоМесяца(ДатаПериода) Тогда
		 НачПериода = День(Датаначала);
		 КонПериода = ПолучитьДеньКонцаМесяца(Датаначала,СтруктураДляРасчета.ВидГодовогоКоличестваДней);
	 ИначеЕсли НачалоМесяца(ДатаОкончания) = НачалоМесяца(ДатаПериода) Тогда
		 НачПериода = 1;
		 КонПериода = День(ДатаОкончания);
	 Иначе	 
		 НачПериода = 1;
		 КонПериода = ПолучитьДеньКонцаМесяца(ДатаПериода,СтруктураДляРасчета.ВидГодовогоКоличестваДней);
	 КонецЕсли;
	 
	Возврат КонПериода-НачПериода+1; 
КонецФункции 

//
Процедура ЗаполнитьГрафик(ТекДокумент,ТекТаблЧасть,ТекСтруктура) Экспорт
	Если ТекДокумент.Метаданные().Имя = ("ГрафикНачисленияВознагрожденийПоРС") или (ТекДокумент.Метаданные().Имя = "НачисленияВознагрожденияПоРС") Тогда
		Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиВознагражденияПоРС.Период,
		|	СтавкиВознагражденияПоРС.ДоговорКонтрагента,
		|	СтавкиВознагражденияПоРС.Ставка 
		|ИЗ
		|	РегистрСведений.СтавкиВознагражденияПоРС КАК СтавкиВознагражденияПоРС
		|ГДЕ
		|	СтавкиВознагражденияПоРС.ДоговорКонтрагента = &Договор";
	Запрос.УстановитьПараметр("Договор", ТекДокумент.ДоговорКонтрагента);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
	Сообщить("Не заполнены ставки вознаграждения",СтатусСообщения.Важное);	
	Возврат;	
	КонецЕсли;	
	ДатаНачалаНачисленияПроцентов = ТекСтруктура.ДатаНачала;
	ДатаОкончанияНачисленияПроцентов = ТекСтруктура.ДатаОкончания;
	ДатаНачала = НачалоМесяца(ТекДокумент.ДатаОперации);
	ДатаОкончания = КонецМесяца(ТекДокумент.ДатаОперации);
	ТекущаяДата = ТекДокумент.Дата;
	СуммаДоговора = ТекСтруктура.Сумма;
	Валюта = ТекСтруктура.Валюта;
//	Способ = ТекСтруктура.Способ;
	ВидГодовогоКоличестваДней = ТекСтруктура.ВидГодовогоКоличестваДней;
	ПроцентВознагрождения = ТекСтруктура.ПроцентВознагрождения;
	УдерживатьКПН = ТекДокумент.УдерживатьКПН;
	СтавкаКПН = ТекДокумент.СтавкаКПН;
	ОстатокНаНачало = ТекСтруктура.ОстатокНаНачало;
	РасчетныйСчет = ТекСтруктура.РасчетныйСчет;
	НеснижаемыйОстаток = ТекСтруктура.НеснижаемыйОстаток;
	МаксимальныйОстаток = ТекСтруктура.МаксимальныйОстаток;
	Если ВидГодовогоКоличестваДней = Перечисления.ВидыГодовогоКоличестваДней.К360 тогда
         КоличествоДней = 30; КоличествоДнейВГоду = 360;
	 Иначе
	 КоличествоДнейВГоду = 365; // т.е. каждфй день месяца
     СтруктураДляРасчета = Новый Структура;
	 СтруктураДляРасчета.Вставить("ДатаНачала",ДатаНачала);
	 СтруктураДляРасчета.Вставить("ДатаОкончания",ДатаОкончания);
	 СтруктураДляРасчета.Вставить("ТекДата",ТекущаяДата);
	 СтруктураДляРасчета.Вставить("ВидГодовогоКоличестваДней",ВидГодовогоКоличестваДней);
	 КоличествоДней = РассчитатьКоличествоДней(СтруктураДляРасчета);
	КонецЕсли;	 
		//СчетаОтбора = Новый СписокЗначений;
		//СчетаОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетахГос);
		//СчетаОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетахСоб);
		СчетаОтбора = ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетахСоб;

	
	Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КонецПериода",ДатаОкончания);
		Запрос.УстановитьПараметр("СчетаОтбора",СчетаОтбора);
		Запрос.УстановитьПараметр("мВидыСубконто",ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДенежныеСредства);
		Запрос.УстановитьПараметр("РасчетныйСчет",РасчетныйСчет);
		Если ОстатокНаНачало = Истина Тогда
	 		Запрос.УстановитьПараметр("НачалоПериода",ДатаНачала-86400);
        Иначе
		Запрос.УстановитьПараметр("НачалоПериода",ДатаНачала);
		КонецЕсли;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ТиповойОстаткиИОбороты.Период КАК Дата,
	|	ТиповойОстаткиИОбороты.Субконто1 КАК РасчетныйСчет,
	|	ТиповойОстаткиИОбороты.Валюта КАК Валюта,
	|	ТиповойОстаткиИОбороты.СуммаКонечныйОстаток КАК Остаток,
	|	ТиповойОстаткиИОбороты.ВалютнаяСуммаКонечныйОстаток КАК ВалютныйОстаток
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&Началопериода, &КонецПериода,День, ,Счет = &счетаОтбора, &мВидысубконто, Субконто1 = &РасчетныйСчет) КАК ТиповойОстаткиИОбороты";
	ТабЗн =	Запрос.Выполнить().Выгрузить();
	Если ТабЗн.Количество() = 0 Тогда
		Сообщить("На счете нет необходимой суммы денег",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	    Если Валюта = Справочники.Валюты.НайтиПоКоду("398") Тогда
		ТабЗн.ЗаполнитьЗначения(0,"ВалютныйОстаток");
		КонецЕсли;
		 ТаблицаОстатков = Новый ТаблицаЗначений;
		 ТаблицаОстатков.Колонки.Добавить("Дата");
		 ТаблицаОстатков.Колонки.Добавить("Остаток");
		 ТаблицаОстатков.Колонки.Добавить("ВалютныйОстаток");
		 ТаблицаОстатков.Колонки.Добавить("Валюта");
		 ТаблицаОстатков.Колонки.Добавить("Курс");
		 Если ОстатокНаНачало = Истина Тогда
		 ДатаНачисления = ДатаНачала;
		 ДатаОстатка = ДатаНачисления-86400;
		 Для НомерПП = 1 По КоличествоДней Цикл
			 НовСтр = ТаблицаОстатков.Добавить();
			 НовСтр.Дата = ДатаНачисления;
			 НайденнаяСтрока = ТабЗн.Найти(ДатаОстатка,"Дата");
			 Если НайденнаяСтрока = Неопределено Тогда
				 НовСтр.Остаток = 0;
				 НовСтр.ВалютныйОстаток = 0;
				 НовСтр.Курс = 0;
			 Иначе
				 НовСтр.Остаток = НайденнаяСтрока.Остаток; 
				 НовСтр.ВалютныйОстаток = НайденнаяСтрока.ВалютныйОстаток;
				 НовСтр.Валюта = НайденнаяСтрока.Валюта;
			КонецЕсли;	 
			ДатаНачисления = ДатаНачисления + 86400;
			ДатаОстатка = ДатаОстатка + 86400;
		 КонецЦикла;	 
			  Иначе
		 ДатаНачисления = ДатаНачала;
		 Для НомерПП = 1 По КоличествоДней Цикл
			 НовСтр = ТаблицаОстатков.Добавить();
			 НовСтр.Дата = ДатаНачисления;
			 НайденнаяСтрока = ТабЗн.Найти(ДатаНачисления,"Дата");
			 Если НайденнаяСтрока = Неопределено Тогда
				 НовСтр.Остаток = 0;
				 НовСтр.ВалютныйОстаток = 0;
				 НовСтр.Курс = 0;
			 Иначе
				 НовСтр.Остаток = НайденнаяСтрока.Остаток; 
				 НовСтр.ВалютныйОстаток = НайденнаяСтрока.ВалютныйОстаток;
				 НовСтр.Валюта = НайденнаяСтрока.Валюта;
			КонецЕсли;	 
			ДатаНачисления = ДатаНачисления + 86400;	
		КонецЦикла;
		КонецЕсли;
		Для Каждого стр из ТаблицаОстатков Цикл
			Если стр.Остаток <> 0 Тогда
			ТекущийОстаток = стр.Остаток;
			ТекущийВалютныйОстаток = стр.ВалютныйОстаток;
			ТекущаяВалюта = стр.Валюта;
			КонецЕсли;
			Если стр.Остаток = 0 Тогда
				стр.Остаток = ТекущийОстаток;
				стр.ВалютныйОстаток = ТекущийВалютныйОстаток;
				стр.Валюта = ТекущаяВалюта;
			КонецЕсли;	
		КонецЦикла;
		 ДатаНачисления = ДатаНачала;
					 Для Каждого строка из РезультатЗапроса Цикл
							 ТекущаяСтавка = Строка.Ставка;
					 КонецЦикла;
		 Для НомеПП = 1 По КоличествоДней Цикл
			 Если (ДатаНачисления>=ДатаНачалаНачисленияПроцентов) И (ДатаНачисления<=ДатаОкончанияНачисленияПроцентов) Тогда
					НоваяСтрока = ТекДокумент[ТекТаблЧасть].Добавить();
                    НоваяСтрока.Период = ДатаНачисления;
					Стр = ТаблицаОстатков.Найти(ДатаНачисления,"Дата");
					 Для Каждого строка из РезультатЗапроса Цикл
						 Если ДатаНачисления = Строка.Период Тогда
							 ТекущаяСтавка = Строка.Ставка;
							 Прервать;
						 КонецЕсли;	 
					 КонецЦикла;
					НоваяСтрока.Сумма = Стр.Остаток;
					НоваяСтрока.ПроцентВознагрождения = ТекущаяСтавка;
					Если стр.Остаток = неопределено  Тогда
        		    НоваяСтрока.СуммаКПН = 0;
					НоваяСтрока.СуммаВознагрожденияКПолучению = 0;
					НоваяСтрока.СуммаВознагрождения = 0;
					НоваяСтрока.Курс = 0;
				    Иначе
					СтруктураКурса = ОбщегоНазначения.ПолучитьКурсВалюты(Валюта, ДатаНачисления);
         		 	НоваяСтрока.Курс = СтруктураКурса.Курс;
					НоваяСтрока.СуммаВознагрождения = (Стр.Остаток*ТекущаяСтавка/100)/КоличествоДнейВГоду;
					НоваяСтрока.ВалютнаяСумма = стр.ВалютныйОстаток;
					НоваяСтрока.ВылютнаяСуммаВознаграждения = (Стр.ВалютныйОстаток*ТекущаяСтавка/100)/КоличествоДнейВГоду;
					Если УдерживатьКПН = Истина Тогда
					СуммаКНП = ((((Стр.Остаток*ТекущаяСтавка)/100)/КоличествоДнейВГоду)*СтавкаКПН)/100;
					ВалютнаяСуммаКНП = ((((Стр.ВалютныйОстаток*ТекущаяСтавка)/100)/КоличествоДнейВГоду)*СтавкаКПН)/100;
					НоваяСтрока.ВалютнаяСуммаКНП = ВалютнаяСуммаКНП;
					НоваяСтрока.СуммаКПН = СуммаКНП;
					НоваяСтрока.СуммаВознагрожденияКПолучению =  (((Стр.Остаток*ТекущаяСтавка)/100)/КоличествоДнейВГоду) - СуммаКНП;
					НоваяСтрока.ВалютнаяСуммаВознаграждекияКПолучению =  (((Стр.ВалютныйОстаток*ТекущаяСтавка)/100)/КоличествоДнейВГоду) - ВалютнаяСуммаКНП;
					Иначе
					НоваяСтрока.СуммаВознагрожденияКПолучению =  (((Стр.Остаток*ТекущаяСтавка)/100)/КоличествоДнейВГоду);
					НоваяСтрока.ВалютнаяСуммаВознаграждекияКПолучению =  (((Стр.ВалютныйОстаток*ТекущаяСтавка)/100)/КоличествоДнейВГоду);
					КонецЕсли;
			КонецЕсли;	
			КонецЕсли;
			ДатаНачисления = ДатаНачисления + 86400;	
		 КонецЦикла;	 
//	Иначе
//		Запрос = Новый Запрос;
//		СчетаОтбора = Новый СписокЗначений;
//		СчетаОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетахГос);
//		СчетаОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетахСоб);
//		Запрос.УстановитьПараметр("НачалоПериода",ДатаНачала);
//		Запрос.УстановитьПараметр("КонецПериода",ДатаОкончания);
//		Запрос.УстановитьПараметр("СчетОтбора",СчетаОтбора);
//		Запрос.УстановитьПараметр("мВидыСубконто",ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДенежныеСредства);
//		Запрос.УстановитьПараметр("РасчетныйСчет",РасчетныйСчет);
//		Запрос.Текст =
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	    ТиповойОстаткиИОбороты.Период КАК Дата,
//		|	    ТиповойОстаткиИОбороты.Субконто1 КАК РасчетныйСчет,
//		|	    ТиповойОстаткиИОбороты.СуммаКонечныйОстаток КАК Остаток
//		|	ИЗ
//		|		РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
//		|				&Началопериода,
//		|				&КонецПериода,
//		|				День,,
//		|				счет В (&счетОтбора),
//		|				&мВидысубконто,
//		|					 Субконто1 = &РасчетныйСчет)
//		|				 КАК ТиповойОстаткиИОбороты";
//		ТабЗн =	Запрос.Выполнить().Выгрузить();
//	Если ВидГодовогоКоличестваДней = Перечисления.ВидыГодовогоКоличестваДней.К360 тогда
//		 КоличествоДней = 30; КоличествоДнейВГоду = 360;
//		 // Подготовим таблицу остатков на р/с по датам
//		 ТаблицаОстатков = Новый ТаблицаЗначений;
//		 ТаблицаОстатков.Колонки.Добавить("Дата");
//		 ТаблицаОстатков.Колонки.Добавить("Остаток");
//		 ДатаНачисления = ДатаНачала;
//		 Для НомерПП = 1 По КоличествоДней Цикл
//			 НовСтр = ТаблицаОстатков.Добавить();
//			 НовСтр.Дата = ДатаНачисления;
//			 НайденнаяСтрока = ТабЗн.Найти(ДатаНачисления,"Дата");
//			 Если НайденнаяСтрока = Неопределено Тогда
//				 НовСтр.Остаток = 0;
//				Иначе
//				 НовСтр.Остаток = НайденнаяСтрока.Остаток; 
//			 КонецЕсли;	 
//			ДатаНачисления = ДатаНачисления + 86400;	
//		КонецЦикла;
//		Для Каждого стр из ТаблицаОстатков Цикл
//			Если стр.Остаток <> 0 Тогда
//			ТекущийОстаток = стр.Остаток;
//			КонецЕсли;
//			Если стр.Остаток = 0 Тогда
//				стр.Остаток = ТекущийОстаток;
//			КонецЕсли;	
//		КонецЦикла;
//		 ДатаНачисления = ДатаНачала;
//		 Для НомеПП = 1 По КоличествоДней Цикл
//			 Если (ДатаНачисления>=ДатаНачалаНачисленияПроцентов) И (ДатаНачисления<=ДатаОкончанияНачисленияПроцентов) Тогда
//					НоваяСтрока = ТекДокумент[ТекТаблЧасть].Добавить();
//					НоваяСтрока.Период = ДатаНачисления;
//					Стр = ТаблицаОстатков.Найти(ДатаНачисления,"Дата");
//					НоваяСтрока.Сумма = Стр.Остаток;
//					НоваяСтрока.ПроцентВознагрождения = ПроцентВознагрождения;
//					НоваяСтрока.СуммаВознагрождения = ((Стр.Остаток*ПроцентВознагрождения)/100)/КоличествоДнейВГоду;
//					Если УдерживатьКПН = Истина Тогда
//					СуммаКНП = ((((Стр.Остаток*ПроцентВознагрождения)/100)/КоличествоДнейВГоду)*СтавкаКПН)/100;	
//					НоваяСтрока.СуммаКПН = СуммаКНП;
//					НоваяСтрока.СуммаВознагрожденияКПолучению =  (((Стр.Остаток*ПроцентВознагрождения)/100)/КоличествоДнейВГоду) - СуммаКНП;
//					Иначе
//					НоваяСтрока.СуммаВознагрожденияКПолучению =  (((Стр.Остаток*ПроцентВознагрождения)/100)/КоличествоДнейВГоду);
//					КонецЕсли;
//			КонецЕсли;
//			ДатаНачисления = ДатаНачисления + 86400;	
//		 КонецЦикла;	 
//	 Иначе
//		 КоличествоДней = 365; // т.е. каждфй день месяца
//	КонецЕсли;	 
//КонецЕсли;
//
// Конец расчета графиков по РС
//
	Иначе	
	
	ДатаНачала = ТекСтруктура.ДатаНачала;
	ДатаОкончания = ТекСтруктура.ДатаОкончания;
	СуммаДоговора = ТекСтруктура.Сумма;
	Способ = ТекСтруктура.Способ;
	ВидГодовогоКоличестваДней = ТекСтруктура.ВидГодовогоКоличестваДней;
	ПроцентВознагрождения = ТекСтруктура.ПроцентВознагрождения;
	УдерживатьКПН = ТекДокумент.УдерживатьКПН;
	СтавкаКПН = ТекДокумент.СтавкаКПН;
	
	
	ДатаПериода = ДатаНачала;
	
	Пока 1=1 Цикл
		Если ДатаПериода > ДатаОкончания Тогда
			прервать;
		КонецЕсли;
		НоваяСтрока = ТекДокумент[ТекТаблЧасть].Добавить();
		НоваяСтрока.Сумма = СуммаДоговора;
		НоваяСтрока.ПроцентВознагрождения = ПроцентВознагрождения;
		
		СтруктураДляРасчета = Новый Структура;
		СтруктураДляРасчета.Вставить("ТекДата",ДатаПериода);
		СтруктураДляРасчета.Вставить("ДатаНачала",ДатаНачала);
		СтруктураДляРасчета.Вставить("ДатаОкончания",ДатаОкончания);
		СтруктураДляРасчета.Вставить("ТекущаяСтрокаТЧ",НоваяСтрока);
		СтруктураДляРасчета.Вставить("ВидГодовогоКоличестваДней",ВидГодовогоКоличестваДней);
		
		ПолучитьПериод(СтруктураДляРасчета);
		
		НоваяСтрока.КоличествоДней = РассчитатьКоличествоДней(СтруктураДляРасчета);
		
		РассчитатьСуммуВознагрождения(СтруктураДляРасчета);
		
		СтруктураДляРасчетаКПН = Новый Структура;
		СтруктураДляРасчетаКПН.Вставить("ТекущаяСтрокаТЧ",НоваяСтрока);
		СтруктураДляРасчетаКПН.Вставить("ПризнакРасчетаКПН",УдерживатьКПН);
		СтруктураДляРасчетаКПН.Вставить("СтавкаКПН",СтавкаКПН);
		
		РассчитатьСуммуКПН(СтруктураДляРасчетаКПН);
		
		ПолучитьСуммуВознагрожденияКПолучению(НоваяСтрока);
		
		ДатаПериода = НачалоМесяца(ДобавитьМесяц(ДатаПериода,1));
	КонецЦикла;
КонецЕсли;	
Конецпроцедуры


Функция НайтиДокументГрафик(ТекОбъект, ВидДокумента) Экспорт
	
	НайденныйДокумент = Неопределено;
	
	Если ЗначениеЗаполнено(ТекОбъект) Тогда 
		Запрос = Новый Запрос;
		
		// Установим параметры запроса
		Запрос.УстановитьПараметр("ОбъектОтбора", ТекОбъект);
		
		Если  ВидДокумента = "ГрафикНачисленияВознагрожденийПоДепозитам" Тогда
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Ссылка 
			|ИЗ
			|	Документ." + ВидДокумента+" Как Документ
			|
			|ГДЕ
			|	Документ.БанковскийСчет = &ОбъектОтбора";
		ИначеЕсли  ВидДокумента = "ГрафикНачисленияВознагрожденийПоКредитамИЗаймам" Тогда
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Ссылка 
			|ИЗ
			|	Документ." + ВидДокумента+" Как Документ
			|
			|ГДЕ
			|	Документ.ДоговорКонтрагента = &ОбъектОтбора";
		КонецЕсли;
		
		ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаИзЗапроса.Следующий() Тогда
			НайденныйДокумент = ВыборкаИзЗапроса.Ссылка;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат НайденныйДокумент;
КонецФункции

Функция ПолучитьТекстГрафика(График) Экспорт
	Если НЕ ЗначениеЗаполнено(График) Тогда
		Возврат "Ввести график вознагрождений";
	Иначе
		Возврат Строка(График) + ?(График.ПометкаУдаления, " (помечен на удаление)", "");
	КонецЕсли; 
КонецФункции

Процедура ВвестиДокументГрафик(ТекОбъект,ТекФорма,ВидГрафика) Экспорт
	
	График = НайтиДокументГрафик(ТекОбъект.ссылка, ВидГрафика);

	ОбъектГрафик = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(График) Тогда
		ОбъектГрафик = Документы[ВидГрафика].СоздатьДокумент();
		ОбъектГрафик.Контрагент = ТекОбъект.Владелец;
		ОбъектГрафик.ДоговорКонтрагента = ТекОбъект.Ссылка;
	ИначеЕсли ЗначениеЗаполнено(График) Тогда
		ОбъектГрафик = График.ПолучитьОбъект();
	КонецЕсли;
	
	Если ОбъектГрафик <> Неопределено Тогда
		// Откроем форму для редактирования 
		ФормаОбъекта = ОбъектГрафик.ПолучитьФорму( , ТекФорма, );
		ФормаОбъекта.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСчетаУчетаПоДепозитам() Экспорт
	
	Результат = Новый Структура("
	|СчетУчетаДС, СчетУчетаВознагрождений,СчетУчетаДоходов,СчетУчетаКПН");
	
	Запрос = Новый Запрос;
		
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СчетаУчетаПоДепозитам.СчетУчетаДС,
	|	СчетаУчетаПоДепозитам.СчетУчетаВознагрождений,
	|	СчетаУчетаПоДепозитам.СчетУчетаДохода,
	|	СчетаУчетаПоДепозитам.СчетУчетаКПН
	|ИЗ
	|	РегистрСведений.СчетаУчетаПоДепозитам КАК СчетаУчетаПоДепозитам
	|";

	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат.СчетУчетаДС              = Выборка.СчетУчетаДС;
		Результат.СчетУчетаВознагрождений  = Выборка.СчетУчетаВознагрождений;
		Результат.СчетУчетаДоходов          = Выборка.СчетУчетаДохода;
		Результат.СчетУчетаКПН          	= Выборка.СчетУчетаКПН;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции
 
Процедура ЗаполнитьНачислениеВознагрожденияПоДепозитам(ТекДокумент,СтруктураШапкиДокумента) Экспорт
	
	СчетаУчета = УправлениеЗаймами.ПолучитьСчетаУчетаПоДепозитам();
	
	КонПериода = Конецдня(СтруктураШапкиДокумента.Дата);
	НачПериода = Началодня(НачалоМесяца(СтруктураШапкиДокумента.Дата));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода",НачПериода);
	Запрос.УстановитьПараметр("КонПериода",КонПериода);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетУчета",СчетаУчета.СчетУчетаДС);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|    Вт_Запрос.СчетУчета КАК Счетучета,
	|    Вт_Запрос.БанковскийСчет КАК БанковскийСчет,
	|    Вт_Запрос.Валюта КАК Валюта,
	|    Вт_Запрос.Курс КАК Курс,
	|    Вт_Запрос.ВалСумма КАК ВалСумма,
	|    Вт_Запрос.ВалСуммаВознагрождения КАК ВалСуммаВознагрождения,
	|    Вт_Запрос.ВалСуммаКПН КАК ВалСуммаКПН,
	|    Вт_Запрос.ВалСуммаВознагрожденияКПолучению КАК ВалСуммаВознагрожденияКПолучению,
	|    Вт_Запрос.ВалСумма*Вт_Запрос.Курс КАК Сумма,
	|    Вт_Запрос.ВалСуммаВознагрождения*Вт_Запрос.Курс КАК СуммаВознагрождения,
	|    Вт_Запрос.ВалСуммаКПН*Вт_Запрос.Курс КАК СуммаКПН,
	|    Вт_Запрос.ВалСуммаВознагрожденияКПолучению*Вт_Запрос.Курс КАК СуммаВознагрожденияКПолучению
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|        ДанныеОБанковскихСчетах.счетУчета,
	|        ДанныеОБанковскихСчетах.БанковскийСчет КАК БанковскийСчет,
	|        ДанныеОБанковскихСчетах.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта,
	|        ЕстьNULL(КурсыВалют.Курс,1) КАК Курс,
	|        График.ВалСумма,
	|        График.ВалСуммаВознагрождения,
	|        График.ВалСуммаКПН,
	|        График.ВалСуммаВознагрожденияКПолучению
	|
	|
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТиповойОстатки.Счет КАК СчетУчета,
	|			ТиповойОстатки.Субконто1 КАК БанковскийСчет
	|		ИЗ
	|			РегистрБухгалтерии.Типовой.Остатки(
	|				&КонПериода,
	|				Счет = &СчетУчета,
	|				,
	|					 Организация = &Организация) КАК ТиповойОстатки
	|        ) КАК ДанныеОБанковскихСчетах
	|   Левое соединение
	|                  (ВЫБРАТЬ
	|						КурсыВалютСрезПоследних.Валюта,
	|						КурсыВалютСрезПоследних.Курс,
	|						КурсыВалютСрезПоследних.Кратность
	|					ИЗ
	|						РегистрСведений.КурсыВалют.СрезПоследних(&КонПериода, ) 
	|							КАК КурсыВалютСрезПоследних 
	|					) КАК КурсыВалют
	|           ПО  БанковскийСчет.ВалютаДенежныхСредств = КурсыВалют.Валюта
	|   Левое соединение
	|       	(ВЫБРАТЬ
	|				СведенияПоГрафикамВознагрожденийСрезПоследних.Сумма КАК ВалСумма,
	|				СведенияПоГрафикамВознагрожденийСрезПоследних.СуммаВознагрождения КАК ВалСуммаВознагрождения,
	|				СведенияПоГрафикамВознагрожденийСрезПоследних.СуммаКПН КАК ВалСуммаКПН,
	|				СведенияПоГрафикамВознагрожденийСрезПоследних.СуммаВознагрожденияКПолучению КАК ВалСуммаВознагрожденияКПолучению,
	|				СведенияПоГрафикамВознагрожденийСрезПоследних.Объект
	|			ИЗ
	|				РегистрСведений.СведенияПоГрафикамВознагрождений.СрезПоследних(
	|					&КонПериода,
	|					Организация = &Организация)
	|						        КАК СведенияПоГрафикамВознагрожденийСрезПоследних
	|			ГДЕ   &НачПериода < СведенияПоГрафикамВознагрожденийСрезПоследних.ДатаОкончания			
	|			) КАК График	
	|       ПО  БанковскийСчет = График.Объект
	|
	|    ) КАК Вт_Запрос
	|
	|";
	
	Запрос.Текст =Текстзапроса;
	
	тз = Запрос.Выполнить().Выгрузить();
	
	ТекДокумент.График.Загрузить(тз);
КонецПроцедуры

Функция ПолучитьСчетаУчетаПоКредитамИЗаймам(СтруктураШапкиДокумента) Экспорт
	
	СписокСчетов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипСчетаУчета",СтруктураШапкиДокумента.ТипСчетаУчета);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СчетаУчетаПоКредитамИЗаймам.СчетУчета
	|ИЗ
	|	РегистрСведений.СчетаУчетаПоКредитамИЗаймам КАК СчетаУчетаПоКредитамИЗаймам
	|ГДЕ
	|	 СчетаУчетаПоКредитамИЗаймам.ТипСчетаУчета = &ТипСчетаУчета
	|";

	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		 СписокСчетов.Добавить(Выборка.СчетУчета);
	КонецЦикла;
		
	Возврат СписокСчетов;
	
КонецФункции

Функция ПолучитьСоответствиеСчетовУчетаПоКредитамИЗаймам(СтруктураОтбора) Экспорт
	Результат = Новый Структура("
	|СчетУчетаВознагрождений,
	|СчетУчетаПени,
	|СчетУчетаРасходов,
	|СубконтоРасходов1,
	|СубконтоРасходов2,
	|СубконтоРасходов3,
	|СчетУчетаДоходов,
	|СубконтоДоходов1,
	|СубконтоДоходов2,
	|СубконтоДоходов3");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетУчета",СтруктураОтбора.СчетУчета);
	Запрос.УстановитьПараметр("ТипСчетаУчета",СтруктураОтбора.ТипСчетаУчета);
	
	Текст =
	"ВЫБРАТЬ
	|   ""1"" КАК ID,
	|   счетаУчетаРасчетов.СчетУчетаВознагрождений,
	|   счетаУчетаРасчетов.СчетУчетаПени,
	|   счетаУчетаРасчетов.СчетУчетаРасходов,
	|   счетаУчетаРасчетов.СубконтоРасходов1,
	|   счетаУчетаРасчетов.СубконтоРасходов2,
	|   счетаУчетаРасчетов.СубконтоРасходов3,
	|   счетаУчетаРасчетов.СчетУчетаДоходов,
	|   счетаУчетаРасчетов.СубконтоДоходов1,
	|   счетаУчетаРасчетов.СубконтоДоходов2,
	|   счетаУчетаРасчетов.СубконтоДоходов3
	|ИЗ
	|	Регистрсведений.СоответствиеСчетовУчетаРасчетовПоКредитамИЗаймам КАК счетаУчетаРасчетов
	|ГДЕ
	|	счетаУчетаРасчетов.СчетУчета = &СчетУчета
	|
	|Объединить Все
	|ВЫБРАТЬ
	|   ""2"" КАК ID,
	|   счетаУчетаРасчетов.СчетУчетаВознагрождений,
	|   счетаУчетаРасчетов.СчетУчетаПени,
	|   счетаУчетаРасчетов.СчетУчетаРасходов,
	|   счетаУчетаРасчетов.СубконтоРасходов1,
	|   счетаУчетаРасчетов.СубконтоРасходов2,
	|   счетаУчетаРасчетов.СубконтоРасходов3,
	|   счетаУчетаРасчетов.СчетУчетаДоходов,
	|   счетаУчетаРасчетов.СубконтоДоходов1,
	|   счетаУчетаРасчетов.СубконтоДоходов2,
	|   счетаУчетаРасчетов.СубконтоДоходов3
	|ИЗ
	|	Регистрсведений.СоответствиеСчетовУчетаРасчетовПоКредитамИЗаймам КАК счетаУчетаРасчетов
	|ГДЕ
	|	счетаУчетаРасчетов.СчетУчета = &СчетУчета
	|УПОРЯДОЧИТЬ ПО ID
	|";
	
	Запрос.Текст = Текст;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат.СчетУчетаВознагрождений   = Выборка.СчетУчетаВознагрождений;
		Результат.СчетУчетаПени  			= Выборка.СчетУчетаПени;
		Результат.СчетУчетаДоходов          = Выборка.СчетУчетаДоходов;
		Результат.СубконтоДоходов1         	= Выборка.СубконтоДоходов1;
		Результат.СубконтоДоходов2         	= Выборка.СубконтоДоходов2;
		Результат.СубконтоДоходов3         	= Выборка.СубконтоДоходов3;
		Результат.СчетУчетаРасходов         = Выборка.СчетУчетаРасходов;
		Результат.СубконтоРасходов1        	= Выборка.СубконтоРасходов1;
		Результат.СубконтоРасходов2        	= Выборка.СубконтоРасходов2;
		Результат.СубконтоРасходов3        	= Выборка.СубконтоРасходов3;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьНачислениеВознагрожденияПоКредитамИЗаймам(ТекДокумент,СтруктураШапкиДокумента) Экспорт
	
	СчетаУчета = ПолучитьСчетаУчетаПоКредитамИЗаймам(СтруктураШапкиДокумента);
	
	КонПериода = Конецдня(СтруктураШапкиДокумента.Дата);
	НачПериода = Началодня(СтруктураШапкиДокумента.Дата);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода",НачПериода);
	Запрос.УстановитьПараметр("КонПериода",КонПериода);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетУчета",СчетаУчета);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|    Вт_Запрос.СчетУчета КАК Счетучета,
	|    Вт_Запрос.Контрагент КАК Контрагент,
	|    Вт_Запрос.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|    Вт_Запрос.ТипОперации КАК ТипОперации,
	|	 Вт_Запрос.СчетУчетаВознагрождений,
	|	 Вт_Запрос.СчетУчетаДоходов,
	|	 Вт_Запрос.СубконтоДоходов1,
	|	 Вт_Запрос.СубконтоДоходов2,
	|	 Вт_Запрос.СубконтоДоходов3,
	|	 Вт_Запрос.СчетУчетаРасходов,
	|	 Вт_Запрос.СубконтоРасходов1,
	|	 Вт_Запрос.СубконтоРасходов2,
	|	 Вт_Запрос.СубконтоРасходов3,
	|	 Вт_Запрос.СчетУчетаВознагрождений.СчетНУ КАК СчетУчетаВознагрожденийНУ,
	|	 Вт_Запрос.СчетУчетаДоходов.СчетНУ КАК СчетУчетаДоходовНУ,
	|	 Вт_Запрос.СубконтоДоходов1 КАК СубконтоДоходовНУ1,
	|	 Вт_Запрос.СубконтоДоходов2	КАК СубконтоДоходовНУ2,
	|	 Вт_Запрос.СубконтоДоходов3	КАК СубконтоДоходовНУ3,
	|	 Вт_Запрос.СчетУчетаРасходов.СчетНУ КАК СчетУчетаРасходовНУ,
	|	 Вт_Запрос.СубконтоРасходов1 КАК СубконтоРасходовНУ1,
	|	 Вт_Запрос.СубконтоРасходов2 КАК СубконтоРасходовНУ2,
	|	 Вт_Запрос.СубконтоРасходов3 КАК СубконтоРасходовНУ3,
	|    Вт_Запрос.ПроцентВознагрождения КАК ПроцентВознагрождения,
	|    Вт_Запрос.КоличествоДней КАК КоличествоДней,
	|    Вт_Запрос.Валюта КАК Валюта,
	|    Вт_Запрос.Курс КАК Курс,
	|    Вт_Запрос.ВалСумма КАК ВалСумма,
	|    Вт_Запрос.ВалСуммаВознагрождения КАК ВалСуммаВознагрождения,
	|    Вт_Запрос.ВалСуммаКПН КАК ВалСуммаКПН,
	|    Вт_Запрос.ВалСуммаВознагрожденияКПолучению КАК ВалСуммаВознагрожденияКПолучению,
	|    Вт_Запрос.ВалСумма*Вт_Запрос.Курс КАК Сумма,
	|    Вт_Запрос.ВалСуммаВознагрождения*Вт_Запрос.Курс КАК СуммаВознагрождения,
	|    Вт_Запрос.ВалСуммаКПН*Вт_Запрос.Курс КАК СуммаКПН,
	|    Вт_Запрос.ВалСуммаВознагрожденияКПолучению*Вт_Запрос.Курс КАК СуммаВознагрожденияКПолучению
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|        ДанныеОЗаймах.счетУчета,
	|        ДанныеОЗаймах.Контрагент КАК Контрагент,
	|        ДанныеОЗаймах.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|        ДанныеОЗаймах.ТипОперации КАК ТипОперации,
	|	 	 СоответствиеСчетовУчета.СчетУчетаВознагрождений,
	|	 	 СоответствиеСчетовУчета.СчетУчетаДоходов,
	|	 	 СоответствиеСчетовУчета.СубконтоДоходов1,
	|	 	 СоответствиеСчетовУчета.СубконтоДоходов2,
	|	 	 СоответствиеСчетовУчета.СубконтоДоходов3,
	|	 	 СоответствиеСчетовУчета.СчетУчетаРасходов,
	|	 	 СоответствиеСчетовУчета.СубконтоРасходов1,
	|	 	 СоответствиеСчетовУчета.СубконтоРасходов2,
	|	 	 СоответствиеСчетовУчета.СубконтоРасходов3,
	|        ДанныеОЗаймах.Валюта КАК Валюта,
	|        ЕстьNULL(КурсыВалют.Курс,1) КАК Курс,
	|        График.ПроцентВознагрождения,
	|        График.КоличествоДней,
	|        График.ВалСумма,
	|        График.ВалСуммаВознагрождения,
	|        График.ВалСуммаКПН,
	|        График.ВалСуммаВознагрожденияКПолучению
	|
	|
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТиповойОстатки.Счет КАК СчетУчета,
	|			ТиповойОстатки.Субконто1 КАК Контрагент,
	|			ТиповойОстатки.Субконто2 КАК ДоговорКонтрагента,
	|			ТиповойОстатки.Субконто3 КАК ТипОперации,
	|			ТиповойОстатки.Валюта КАК Валюта
	|		ИЗ
	|			РегистрБухгалтерии.Типовой.Остатки(
	|				&КонПериода,
	|				Счет в (&СчетУчета),
	|				,
	|					 Организация = &Организация) КАК ТиповойОстатки
	|        ) КАК ДанныеОЗаймах
	|   Левое соединение
	|                  (ВЫБРАТЬ
	|						КурсыВалютСрезПоследних.Валюта,
	|						КурсыВалютСрезПоследних.Курс,
	|						КурсыВалютСрезПоследних.Кратность
	|					ИЗ
	|						РегистрСведений.КурсыВалют.СрезПоследних(&КонПериода, ) 
	|							КАК КурсыВалютСрезПоследних 
	|					) КАК КурсыВалют
	|           ПО  ДанныеОЗаймах.Валюта = КурсыВалют.Валюта
	|   Левое соединение
	|       	(ВЫБРАТЬ
	|				СведенияПоГрафикамВознагрожденийСрезПоследних.ПроцентВознагрождения КАК ПроцентВознагрождения,
	|				СведенияПоГрафикамВознагрожденийСрезПоследних.КоличествоДней КАК КоличествоДней,
	|				СведенияПоГрафикамВознагрожденийСрезПоследних.Сумма КАК ВалСумма,
	|				СведенияПоГрафикамВознагрожденийСрезПоследних.СуммаВознагрождения КАК ВалСуммаВознагрождения,
	|				СведенияПоГрафикамВознагрожденийСрезПоследних.СуммаКПН КАК ВалСуммаКПН,
	|				СведенияПоГрафикамВознагрожденийСрезПоследних.СуммаВознагрожденияКПолучению КАК ВалСуммаВознагрожденияКПолучению,
	|				СведенияПоГрафикамВознагрожденийСрезПоследних.Объект
	|			ИЗ
	|				РегистрСведений.СведенияПоГрафикамВознагрождений.СрезПоследних(
	|					&КонПериода,
	|					Организация = &Организация)
	|						        КАК СведенияПоГрафикамВознагрожденийСрезПоследних
	|			ГДЕ   &НачПериода <= СведенияПоГрафикамВознагрожденийСрезПоследних.ДатаОкончания			
	|			) КАК График	
	|       ПО  ДоговорКонтрагента = График.Объект
	|
	|   Левое соединение
	|          РегистрСведений.СоответствиеСчетовучетаРасчетовПоКредитамИЗаймам
	|				КАК СоответствиеСчетовУчета
	|              По  СоответствиеСчетовУчета.СчетУчета = ДанныеОЗаймах.счетУчета
	|
	|    ) КАК Вт_Запрос
	//|Левое соединение
	//|             РегистрСведений.СоответствиеСчетовБУиНУ КАК СчетаБУиНУРасходов
	//|         ПО  Вт_Запрос.СчетУчетаРасходов =  СчетаБУиНУРасходов.СчетБУ
	//|Левое соединение
	//|             РегистрСведений.СоответствиеСчетовБУиНУ КАК СчетаБУиНУДоходов
	//|         ПО  Вт_Запрос.СчетУчетаДоходов =  СчетаБУиНУДоходов.СчетБУ
	//|Левое соединение
	//|             РегистрСведений.СоответствиеСчетовБУиНУ КАК СчетаБУиНУВозн
	//|         ПО  Вт_Запрос.СчетУчетаВознагрождений =  СчетаБУиНУВозн.СчетБУ
	|
	|Автоупорядочивание";
	
	Запрос.Текст =Текстзапроса;
	
	тз = Запрос.Выполнить().Выгрузить();
	
	ТекДокумент.График.Загрузить(тз);
	
КонецПроцедуры

Процедура ЗаполнитьНачислениеВознагрожденияПоЗаймамВыданным(ТекДокумент,СтруктураШапкиДокумента) Экспорт
	СчетаУчета = ПолучитьСчетаУчетаПоКредитамИЗаймам(СтруктураШапкиДокумента);
	
	СписокВидовСубконто = Новый Массив;
	СписокВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	СписокВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	СписокВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ТипыОпераций);
	
	КонПериода = Конецдня(СтруктураШапкиДокумента.Дата);
	НачПериода = Началодня(НачалоМесяца(СтруктураШапкиДокумента.Дата));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода",НачПериода);
	Запрос.УстановитьПараметр("КонПериода",КонПериода);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетУчета",СчетаУчета);
	Запрос.УстановитьПараметр("СписокВидовСубконто",СписокВидовСубконто);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТиповойОстатки.Субконто1 КАК Контрагент,
	|	ТиповойОстатки.Субконто2 КАК ДоговорКонтрагента,
	|	ТиповойОстатки.Субконто3 КАК ТипОперации,
	|	ТиповойОстатки.Валюта,
	|	ТиповойОстатки.СуммаОстатокДт КАК Сумма,
	|	ТиповойОстатки.ВалютнаяСуммаОстатокДт КАК ВалСумма,
	|	ЕстьNULL(КурсыВалют.Курс,1) КАК Курс,
	|   естьNull(График.ПроцентВознагрождения,0) КАК ПроцентВознагрождения,
	|   естьNull(График.КоличествоДней,0) КАК КоличествоДней,
	//|   естьNull(График.ВалСумма,0) КАК ВалСумма,
	//|   естьNull(График.ВалСумма,0)*ЕстьNULL(КурсыВалют.Курс,1) КАК Сумма,
	|   естьNull(График.ВалСуммаВознагрождения,0) КАК ВалСуммаВознагрождения,
	|   естьNull(График.ВалСуммаВознагрождения,0)*ЕстьNULL(КурсыВалют.Курс,1) КАК СуммаВознагрождения,
	|   естьNull(График.ВалСуммаКПН,0) КАК ВалСуммаКПН,
	|   естьNull(График.ВалСуммаВознагрожденияКПолучению,0) КАК ВалСуммаВознагрожденияКПолучению,
	|   ВЫБОР КОГДА НачислениеВознагрождения.ДатаОперации Есть Null
	|	ТОГДА &НачПериода
	|	ИНАЧЕ НачислениеВознагрождения.ДатаОперации
	|	КОНЕЦ КАК ДатаОперации,
	|	СоответствиеСчетовУчета.СчетУчетаВознагрождений,
	|	СоответствиеСчетовУчета.СчетУчетаВознагрождений.СчетНУ КАК СчетУчетаВознагрожденийНУ,
	|	СоответствиеСчетовУчета.СчетУчетаДоходов,
	|	СоответствиеСчетовУчета.СубконтоДоходов1,
	|	СоответствиеСчетовУчета.СубконтоДоходов2,
	|	СоответствиеСчетовУчета.СубконтоДоходов3,
	|	СоответствиеСчетовУчета.СчетУчетаДоходов.СчетНУ КАК СчетУчетаДоходовНУ,
	|	СоответствиеСчетовУчета.СубконтоДоходов1 КАК СубконтоДоходовНУ1,
	|	СоответствиеСчетовУчета.СубконтоДоходов2 КАК СубконтоДоходовНУ2,
	|	СоответствиеСчетовУчета.СубконтоДоходов3 КАК СубконтоДоходовНУ3,
	|	СоответствиеСчетовУчета.СчетУчетаРасходов,
	|	СоответствиеСчетовУчета.СубконтоРасходов1,
	|	СоответствиеСчетовУчета.СубконтоРасходов2,
	|	СоответствиеСчетовУчета.СубконтоРасходов3,
	|	СоответствиеСчетовУчета.СчетУчетаРасходов.СчетНУ КАК СчетУчетаРасходовНУ,
	|	СоответствиеСчетовУчета.СубконтоРасходов1 КАК СубконтоРасходовНУ1,
	|	СоответствиеСчетовУчета.СубконтоРасходов2 КАК СубконтоРасходовНУ2,
	|	СоответствиеСчетовУчета.СубконтоРасходов3 КАК СубконтоРасходовНУ3
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&КонПериода,
	|			Счет в ИЕРАРХИИ (&СчетУчета),
	|			,
	|				 Организация = &Организация) КАК ТиповойОстатки
	|   Левое соединение
	|                  (ВЫБРАТЬ
	|						КурсыВалютСрезПоследних.Валюта,
	|						КурсыВалютСрезПоследних.Курс,
	|						КурсыВалютСрезПоследних.Кратность
	|					ИЗ
	|						РегистрСведений.КурсыВалют.СрезПоследних(&КонПериода, ) 
	|							КАК КурсыВалютСрезПоследних 
	|					) КАК КурсыВалют
	|           ПО  ТиповойОстатки.Валюта = КурсыВалют.Валюта
	|   Левое соединение
	|       	(ВЫБРАТЬ
	|				СведенияПоГрафикамВознагрожденийСрезПоследних.ПроцентВознагрождения КАК ПроцентВознагрождения,
	|				СведенияПоГрафикамВознагрожденийСрезПоследних.КоличествоДней КАК КоличествоДней,
	|				СведенияПоГрафикамВознагрожденийСрезПоследних.Сумма КАК ВалСумма,
	|				СведенияПоГрафикамВознагрожденийСрезПоследних.СуммаВознагрождения КАК ВалСуммаВознагрождения,
	|				СведенияПоГрафикамВознагрожденийСрезПоследних.СуммаКПН КАК ВалСуммаКПН,
	|				СведенияПоГрафикамВознагрожденийСрезПоследних.СуммаВознагрожденияКПолучению КАК ВалСуммаВознагрожденияКПолучению,
	|				СведенияПоГрафикамВознагрожденийСрезПоследних.Объект
	|			ИЗ
	|				РегистрСведений.СведенияПоГрафикамВознагрождений.СрезПоследних(
	|					&КонПериода,
	|					Организация = &Организация)
	|						        КАК СведенияПоГрафикамВознагрожденийСрезПоследних
	|			ГДЕ   &НачПериода <= СведенияПоГрафикамВознагрожденийСрезПоследних.ДатаОкончания			
	|			) КАК График	
	|       ПО  ТиповойОстатки.Субконто2 = График.Объект
	|
	|   Левое соединение
	|          (ВЫБРАТЬ
	|				МАКСИМУМ(ТиповойОборотыДтКт.Период) КАК ДатаОперации,
	|				ТиповойОборотыДтКт.СубконтоДт1 КАК Контрагент,
	|				ТиповойОборотыДтКт.СубконтоДт2 КАК Договор,
	|				ТиповойОборотыДтКт.СубконтоДт3 КАК ТипОперации
	|			ИЗ
	|				РегистрБухгалтерии.Типовой.ОборотыДтКт(
	|				&НачПериода,
	|				&КонПериода,
	|				День,
	|				СчетДт В ИЕРАРХИИ(ВЫБРАТЬ Различные
	|									СоответствияСчетов.СчетУчетаВознагрождений
	|								  ИЗ
	|									РегистрСведений.СоответствиеСчетовУчетаРасчетовПоКредитамИЗаймам КАК СоответствияСчетов
	|                                 Где
	|                                    СоответствияСчетов.СчетУчета в ИЕРАРХИИ (&СчетУчета)
	|								  ),
	|				&СписокВидовСубконто,
	|				,
	|				,
	|				И Организация = &организация) КАК ТиповойОборотыДтКт
	|			СГРУППИРОВАТЬ ПО
	|				ТиповойОборотыДтКт.СубконтоДт1,
	|				ТиповойОборотыДтКт.СубконтоДт2,
	|				ТиповойОборотыДтКт.СубконтоДт3
	|            ) КАК НачислениеВознагрождения
	|         ПО  НачислениеВознагрождения.Контрагент = ТиповойОстатки.Субконто1
	|         	  И НачислениеВознагрождения.Договор = ТиповойОстатки.Субконто2
	|             И НачислениеВознагрождения.ТипОперации = ТиповойОстатки.Субконто3
	|
	|   Левое соединение
	|          РегистрСведений.СоответствиеСчетовучетаРасчетовПоКредитамИЗаймам
	|				КАК СоответствиеСчетовУчета
	|             ПО СоответствиеСчетовУчета.СчетУчета = ТиповойОстатки.Субконто2.счетУчетаЗаймов
	|";
	
	
	тз = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЗ из тз Цикл
		 Сообщить(СтрокаТЗ.Контрагент);
		 Сообщить(СтрокаТЗ.ДатаОперации);
		 Сообщить(СтрокаТЗ.ПроцентВознагрождения);
		Если СтрокаТЗ.ДатаОперации <> НачПериода Тогда
			КолДней=0;
			//ОбщегоНазначения.РазобратьРазностьДат(КонПериода,СтрокаТЗ.ДатаОперации,,,КолДней);
			КолДней = День(КонПериода)-День(СтрокаТЗ.ДатаОперации);
			КолДней = Макс(0,КолДней);
			//СтрокаТЗ.КоличествоДней = КолДней+1;
			СтрокаТЗ.КоличествоДней = КолДней+1;
			КоличествоДнейВГоду = УправлениеЗаймами.ПолучитьЧислоДнейВГоду(СтрокаТЗ.ДоговорКонтрагента.ВидКалендарныхДней);
			КоличествоДнейНачисления = ?(КоличествоДнейВГоду=0,0,(СтрокаТЗ.КоличествоДней/КоличествоДнейВГоду));
			СтрокаТЗ.ВалСуммаВознагрождения = СтрокаТЗ.ВалСумма*КоличествоДнейНачисления*(СтрокаТЗ.ПроцентВознагрождения/100);
			СтрокаТЗ.СуммаВознагрождения = СтрокаТЗ.ВалСуммаВознагрождения*СтрокаТЗ.Курс;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекДокумент.График.Загрузить(тз);
	
КонецПроцедуры

Функция ПолучитьСписокВалют(ЭтотОбъект, мВалютаРегламентированногоУчета) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекДокумент",ЭтотОбъект.ссылка);
	Запрос.УстановитьПараметр("мВалютаРегламентированногоУчета",мВалютаРегламентированногоУчета);
	
	Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	График.Валюта КАК ВалютаДокумента,
	|	График.Курс КАК КурсДокумента
	|ИЗ
	|	Документ.НачислениеВознагрожденийПоКредитамИЗаймам.График КАК График
	|ГДЕ
	|	График.Ссылка = &ТекДокумент
	|	И График.Валюта <>&мВалютаРегламентированногоУчета
	|";
	
	Запрос.Текст = Текст;
	
	Тз = Запрос.Выполнить().Выгрузить();
	
	Возврат тз;
Конецфункции

Функция ПолучитьСписокСчетовУчетаКредитовЗаймов(ИсточникФинансирования,ТипКредитаЗайма) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипКредитаЗайма", ТипКредитаЗайма);
	
	Запрос.Текст=
	"ВЫБРАТЬ Различные
	|	СчетаУчетаПоКредитамИЗаймам.СчетУчета КАК СчетУчета
	|ИЗ
	|	РегистрСведений.СчетаУчетаПоКредитамИЗаймам КАК СчетаУчетаПоКредитамИЗаймам
	|ГДЕ 
	|	СчетаУчетаПоКредитамИЗаймам.ТипСчетаУчета = &ТипКредитаЗайма
	|
	|";
	
	тз = Запрос.Выполнить().Выгрузить();
	
	Возврат тз;
	
Конецфункции

Функция ЗаполнитьСписокВыбораСчетовЗалога() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетовОтбора",Планысчетов.Типовой.СчетаТребованийПоГарантиям);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Типовой.Ссылка КАК Счет,
	|	Типовой.Код КАК Код,
	|	Типовой.Наименование КАК Наименование
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	Типовой.Ссылка В ИЕРАРХИИ (&МассивСчетовОтбора)
	|	И (НЕ Типовой.ЗапретитьИспользоватьВПроводках)
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	СписокВыбора = Новый СписокЗначений;

	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		СписокВыбора.Добавить(Результат.Счет, Результат.Код + " (" + Результат.Наименование + ")");
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

Процедура ЗаполнитьНачислениеВознагрожденияПоЗаймамПолученным(ТекДокумент,СтруктураШапкиДокумента) экспорт
	
	СчетаУчета = ПолучитьСчетаУчетаПоКредитамИЗаймам(СтруктураШапкиДокумента);
	
	КонПериода = Конецдня(КонецМесяца(СтруктураШапкиДокумента.Дата));
	НачПериода = Началодня(НачалоМесяца(СтруктураШапкиДокумента.Дата));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода",НачПериода);
	Запрос.УстановитьПараметр("КонПериода",КонПериода);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Контрагент",СтруктураШапкиДокумента.Контрагент);
	Запрос.УстановитьПараметр("СчетУчета",СчетаУчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТиповойОстаткиИОбороты.Субконто2 КАК ДоговорКонтрагента,
	|	ТиповойОстаткиИОбороты.Субконто3 КАК ТипОперации,
	|	ТиповойОстаткиИОбороты.Период КАК ДатаПоступления,
	|	ТиповойОстаткиИОбороты.Валюта КАК Валюта,
	|	ТиповойОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт КАК ВалСумма,
	|	ТиповойОстаткиИОбороты.СуммаНачальныйОстатокКт КАК Сумма,
	|	ТиповойОстаткиИОбороты.ВалютнаяСуммаОборотКт КАК ВалСуммаПоступления,
	|	ТиповойОстаткиИОбороты.СуммаОборотКт КАК СуммаПоступления,
	|	ТиповойОстаткиИОбороты.ВалютнаяСуммаОборотДт КАК ВалСуммаПогашения,
	|	ТиповойОстаткиИОбороты.СуммаОборотДт КАК СуммаПогашения,
	|	СоответствиеСчетовУчета.СчетУчетаВознагрождений,
	|	СоответствиеСчетовУчета.СчетУчетаДоходов,
	|	СоответствиеСчетовУчета.СубконтоДоходов1,
	|	СоответствиеСчетовУчета.СубконтоДоходов2,
	|	СоответствиеСчетовУчета.СубконтоДоходов3,
	|	СоответствиеСчетовУчета.СчетУчетаРасходов,
	|	СоответствиеСчетовУчета.СубконтоРасходов1,
	|	СоответствиеСчетовУчета.СубконтоРасходов2,
	|	СоответствиеСчетовУчета.СубконтоРасходов3,
	|	СоответствиеСчетовУчета.СчетУчетаВознагрождений.СчетНУ КАК СчетУчетаВознагрожденийНУ,
	|	СоответствиеСчетовУчета.СчетУчетаДоходов.СчетНУ КАК СчетУчетаДоходовНУ,
	|	СоответствиеСчетовУчета.СубконтоДоходов1 КАК СубконтоДоходовНУ1,
	|	СоответствиеСчетовУчета.СубконтоДоходов2 КАК СубконтоДоходовНУ2,
	|	СоответствиеСчетовУчета.СубконтоДоходов3 КАК СубконтоДоходовНУ3,
	|	СоответствиеСчетовУчета.СчетУчетаРасходов.СчетНУ КАК СчетУчетаРасходовНУ,
	|	СоответствиеСчетовУчета.СубконтоРасходов1 КАК СубконтоРасходовНУ1,
	|	СоответствиеСчетовУчета.СубконтоРасходов2 КАК СубконтоРасходовНУ2,
	|	СоответствиеСчетовУчета.СубконтоРасходов3 КАК СубконтоРасходовНУ3
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
	|			&НачПериода,
	|			&КонПериода,
	|			День,
	|			,
	|			Счет В (&СчетУчета),
	|			,
	|			 Организация = &Организация
	|				И Субконто1 = &Контрагент) КАК ТиповойОстаткиИОбороты
	|
	|   Левое соединение
	|          РегистрСведений.СоответствиеСчетовучетаРасчетовПоКредитамИЗаймам
	|				КАК СоответствиеСчетовУчета
	|          По  СоответствиеСчетовУчета.СчетУчета = ТиповойОстаткиИОбороты.счет
	|Упорядочить ПО ТипОперации,ДоговорКонтрагента,ДатаПоступления
	//|Автоупорядочивание
	|";
	
	тз = Запрос.Выполнить().Выгрузить();
	
	тз.Колонки.Добавить("ДатаНачалаПериода");
	тз.Колонки.Добавить("ДатаОкончанияПериода");
	тз.Колонки.Добавить("Контрагент");
	тз.Колонки.Добавить("КоличествоДней");
	тз.Колонки.Добавить("ВалСуммаВознагрождения");
	тз.Колонки.Добавить("СуммаВознагрождения");
	тз.Колонки.Добавить("ПроцентВознагрождения");
	тз.Колонки.Добавить("Курс");
	тз.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент,  "Контрагент");
	
	ДатаНачалаПериода = начПериода;
	
	ТекДоговор = ""; ТекОперация = "";
	
	Для Каждого СтрокаТЗ из тз Цикл
		
		СтруктураВалюты = ОбщегоНазначения.ПолучитьКурсВалюты(СтрокаТЗ.Валюта, СтрокаТЗ.ДатаПоступления);
		
		СтрокаТЗ.Курс = ?(СтруктураВалюты.Курс=0,1,СтруктураВалюты.Курс);
		
		Если ТекДоговор <> СтрокаТЗ.ДоговорКонтрагента 
			ИЛИ ТекОперация <> СтрокаТЗ.ТипОперации Тогда
			
			ДатаНачалаПериода = начПериода;
			ТекДоговор = СтрокаТЗ.ДоговорКонтрагента; ТекОперация = СтрокаТЗ.ТипОперации;
		КонецЕсли;
		
		Если КонецДня(СтрокаТЗ.ДатаПоступления) = КонПериода Тогда
			СтрокаТЗ.ДатаНачалаПериода = ДатаНачалаПериода;
			СтрокаТЗ.ДатаОкончанияПериода = КонПериода;
			КолДней=0;
			//ОбщегоНазначения.РазобратьРазностьДат(СтрокаТЗ.ДатаОкончанияПериода,СтрокаТЗ.ДатаНачалаПериода,,,КолДней);
			Если Месяц(КонПериода)=2 Тогда
				КолДнейМесяца = 30;
			Иначе
				КолДнейМесяца = 30;
			КонецЕсли;
			КолДней = КолДнейМесяца - ?(День(ДатаНачалаПериода)>КолДнейМесяца,КолДнейМесяца,День(ДатаНачалаПериода))+1;
			СтрокаТЗ.КоличествоДней = КолДней;
			СтрокаТЗ.ПроцентВознагрождения = СтрокаТЗ.ДоговорКонтрагента.ПроцентВознагрождения;
			
			КоличествоДнейВГоду = ПолучитьЧислоДнейВГоду(СтрокаТЗ.ДоговорКонтрагента.ВидКалендарныхДней);
			СтрокаТЗ.ВалСуммаВознагрождения = СтрокаТЗ.ВалСумма*(СтрокаТЗ.КоличествоДней/КоличествоДнейВГоду)*(СтрокаТЗ.ПроцентВознагрождения/100);
			СтрокаТЗ.СуммаВознагрождения = СтрокаТЗ.ВалСуммаВознагрождения*СтрокаТЗ.Курс;
		Иначе
			Если СтрокаТЗ.СуммаПоступления+СтрокаТЗ.СуммаПогашения > 0 тогда
				СтрокаТЗ.ДатаНачалаПериода = ДатаНачалаПериода;
				СтрокаТЗ.ДатаОкончанияПериода = СтрокаТЗ.ДатаПоступления;
				КолДней=0;
				ОбщегоНазначения.РазобратьРазностьДат(СтрокаТЗ.ДатаОкончанияПериода,СтрокаТЗ.ДатаНачалаПериода,,,КолДней);
				КолДней = КолДней+1;
				СтрокаТЗ.КоличествоДней = КолДней;
				СтрокаТЗ.ПроцентВознагрождения = СтрокаТЗ.ДоговорКонтрагента.ПроцентВознагрождения;
				КоличествоДнейВГоду = ПолучитьЧислоДнейВГоду(СтрокаТЗ.ДоговорКонтрагента.ВидКалендарныхДней);
				
				СтрокаТЗ.ВалСуммаВознагрождения = СтрокаТЗ.ВалСумма*(СтрокаТЗ.КоличествоДней/КоличествоДнейВГоду)*(СтрокаТЗ.ПроцентВознагрождения/100);
				СтрокаТЗ.СуммаВознагрождения = СтрокаТЗ.ВалСуммаВознагрождения*СтрокаТЗ.Курс;
				
				ДатаНачалаПериода = СтрокаТЗ.ДатаПоступления+86400;
			Конецесли;
		Конецесли;
		
	КонецЦикла;
	
	ТекДокумент.График.Загрузить(тз);
КонецПроцедуры

Функция ПолучитьЗадолжностьПениИВознагрождений(ЭтотОбъект,СтруктураШапкиДокумента,СчетУчета,ДоговорКонтрагента) Экспорт
	
	СписокВидовСубконто = Новый Массив;
	СписокВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	СписокВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	СписокВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ТипыОпераций);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СчетУчета",СчетУчета);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Контрагент",СтруктураШапкиДокумента.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ТипОперации",СтруктураШапкиДокумента.ТипОперации);
	Запрос.УстановитьПараметр("НачПериода",СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("СписокВидовСубконто",СписокВидовСубконто);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТиповойОстатки.СуммаОстатокДт КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&НачПериода,
	|			Счет = &СчетУчета,
	|			&СписокВидовСубконто,
	|			 Организация = &Организация
	|				И Субконто1 = &Контрагент
	|				И Субконто2 = &ДоговорКонтрагента
	|				И Субконто3 = &ТипОперации) КАК ТиповойОстатки
	|";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Остаток = Результат.Остаток;
	Иначе
		Остаток =0;
	КонецЕсли;
	
	Возврат Остаток;
	
КонецФункции

Функция ПолучитьДатуПоследнегоНачисления(ЭтотОбъект, СтруктураШапкиДокумента, СчетВознагрождения, ДоговорКонтрагента) Экспорт
	
	СписокВидовСубконто = Новый Массив;
	СписокВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	СписокВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	СписокВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ТипыОпераций);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СчетУчета",СчетВознагрождения);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Контрагент",СтруктураШапкиДокумента.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ТипОперации",СтруктураШапкиДокумента.ТипОперации);
	Запрос.УстановитьПараметр("НачПериода",НачалоДня(НачалоМесяца(СтруктураШапкиДокумента.Дата)));
	Запрос.УстановитьПараметр("КонПериода",КонецДня(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("СписокВидовСубконто",СписокВидовСубконто);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ТиповойОборотыДтКт.Период) КАК Дата,
	|	ТиповойОборотыДтКт.СубконтоДт1 КАК Контрагент,
	|	ТиповойОборотыДтКт.СубконтоДт2 КАК Договор,
	|	ТиповойОборотыДтКт.СубконтоДт3 КАК ТипОперации
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ОборотыДтКт(
	|			&НачПериода,
	|			&КонПериода,
	|			День,
	|			СчетДт = &счетУчета,
	|			&СписокВидовСубконто,
	|			,
	|			,
	|			 Организация = &организация
	|				И СубконтоДт1 = &Контрагент
	|				И СубконтоДт2 = &ДоговорКонтрагента
	|				И СубконтоДт3 = &ТипОперации) КАК ТиповойОборотыДтКт
	|
	|СГРУППИРОВАТЬ ПО
	|	ТиповойОборотыДтКт.СубконтоДт1,
	|	ТиповойОборотыДтКт.СубконтоДт2,
	|	ТиповойОборотыДтКт.СубконтоДт3";
	
	результат = Запрос.Выполнить().Выбрать();
	
	если Результат.Следующий() Тогда
		Возвращаемаядата = Результат.Дата;
	Иначе
		Возвращаемаядата = НачалоДня(НачалоМесяца(СтруктураШапкиДокумента.Дата));
	Конецесли;
	
	Возврат Возвращаемаядата;	
КонецФункции

Функция ПолучитьСуммуВознагрожденияПоГрафику(ЭтотОбъект,СтруктураШапкиДокумента,ДоговорКонтрагента) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонПериода",СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("ПериодОтбора",НачалоМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",ДоговорКонтрагента);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияПоГрафикамВознагрожденийСрезПоследних.СуммаВознагрождения
	|ИЗ
	|	РегистрСведений.СведенияПоГрафикамВознагрождений.СрезПоследних(
	|			&КонПериода,
	|			 Организация = &Организация
	|				И Объект = &ДоговорКонтрагента
	|				И Период = &ПериодОтбора) КАК СведенияПоГрафикамВознагрожденийСрезПоследних
	|";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ВозвращаемаяСумма = Результат.СуммаВознагрождения;
	Иначе
		ВозвращаемаяСумма = 0;
	КонецЕсли;
	
	Возврат ВозвращаемаяСумма;	
КонецФункции

Функция ПолучитьСуммуОсновногоДолга(СтруктураШапкиДокумента,ДоговорКонтрагента) Экспорт
	
	СтруктураШапкиДокумента.Вставить("ТипСчетаУчета",Перечисления.ТипыКредитовИЗаймов.Выданные);
	
	СчетаУчета = ПолучитьСчетаУчетаПоКредитамИЗаймам(СтруктураШапкиДокумента);
	
	СписокВидовСубконто = Новый Массив;
	СписокВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	СписокВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	СписокВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ТипыОпераций);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Контрагент",СтруктураШапкиДокумента.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ТипОперации",СтруктураШапкиДокумента.ТипОперации);
	Запрос.УстановитьПараметр("СчетаУчета",СчетаУчета);
	Запрос.УстановитьПараметр("СписокВидовСубконто",СписокВидовСубконто);
	Запрос.УстановитьПараметр("КонПериода",НачалоДня(СтруктураШапкиДокумента.Дата));
	
	Запрос.Текст =
	 "ВЫБРАТЬ
	 |	ТиповойОстатки.СуммаОстатокДт
	 |ИЗ
	 |	РегистрБухгалтерии.Типовой.Остатки(
	 |			&КонПериода,
	 |			Счет В ИЕРАРХИИ (&СчетаУчета),
	 |			&СписокВидовСубконто,
	 |			 Организация = &Организация
	 |				И Субконто1 = &Контрагент
	 |				И Субконто2 = &ДоговорКонтрагента
	 |				И Субконто3 = &ТипОперации) КАК ТиповойОстатки
	 |";
	 
	 Результат = Запрос.Выполнить().Выбрать();
	 
	 Если Результат.Следующий() Тогда
		 СуммаДолга = Результат.СуммаОстатокДт;
	 Иначе
		 СуммаДолга = 0;
	 КонецЕсли;
	 
	Возврат СуммаДолга;	
КонецФункции

Функция ПолучитьСтруктуруОсновногоДолга(СтруктураШапкиДокумента,ДоговорКонтрагента) Экспорт
	СтруктураШапкиДокумента.Вставить("ТипСчетаУчета",Перечисления.ТипыКредитовИЗаймов.Выданные);
	
	СчетаУчета = ПолучитьСчетаУчетаПоКредитамИЗаймам(СтруктураШапкиДокумента);
	
	СписокВидовСубконто = Новый Массив;
	СписокВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	СписокВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	СписокВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ТипыОпераций);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Контрагент",СтруктураШапкиДокумента.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ТипОперации",СтруктураШапкиДокумента.ТипОперации);
	Запрос.УстановитьПараметр("СчетаУчета",СчетаУчета);
	Запрос.УстановитьПараметр("СписокВидовСубконто",СписокВидовСубконто);
	Запрос.УстановитьПараметр("КонПериода",НачалоДня(СтруктураШапкиДокумента.Дата));
	
	Запрос.Текст =
	 "ВЫБРАТЬ
	 |	ТиповойОстатки.Счет КАК Счет,
	 |	ТиповойОстатки.СуммаОстатокДт Как Остаток
	 |ИЗ
	 |	РегистрБухгалтерии.Типовой.Остатки(
	 |			&КонПериода,
	 |			Счет В ИЕРАРХИИ (&СчетаУчета),
	 |			&СписокВидовСубконто,
	 |			Организация = &Организация
	 |				И Субконто1 = &Контрагент
	 |				И Субконто2 = &ДоговорКонтрагента
	 |				И Субконто3 = &ТипОперации) КАК ТиповойОстатки
	 |Упорядочить По ТиповойОстатки.Счет.Порядок";
	 
	 Результат = Запрос.Выполнить().Выгрузить();
	 
	Возврат Результат;	
	
КонецФункции

Функция ПолучитьДатуОкончанияНачисления(ТекДокумент, СтруктураШапкиДокумента, СчетВознагрождений, ДоговорКонтрагента) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонПериода",СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("ПериодОтбора",НачалоМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",ДоговорКонтрагента);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияПоГрафикамВознагрожденийСрезПоследних.ДатаОкончания
	|ИЗ
	|	РегистрСведений.СведенияПоГрафикамВознагрождений.СрезПоследних(
	|			&КонПериода,
	|			Организация = &Организация
	|				И Объект = &ДоговорКонтрагента
	|				И Период = &ПериодОтбора) КАК СведенияПоГрафикамВознагрожденийСрезПоследних";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ВозвращаемаяДата = Результат.ДатаОкончания;
	Иначе
		ВозвращаемаяДата = НЕопределено;
	КонецЕсли;
	
	Возврат ВозвращаемаяДата;	
Конецфункции
