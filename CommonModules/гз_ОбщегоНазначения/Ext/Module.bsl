
///////////////////////////////////////////////////////////////////////////////////
//ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Функция ТекущаяВерсияКонфигурации
//
Функция ТекущаяВерсияКонфигурации() Экспорт
	Возврат "1.0.3.7";
КонецФункции //ТекущаяВерсияКонфигурации

// Функция сокращает строку/представление
//
// Параметры:
//  Объект - строка
//
// Возвращаемое значение:
//  Строка - сокращенная строка.
//
Функция Сократить(Объект,Длина=10) Экспорт
	Строка = Объект;
	Если ТипЗнч(Объект) <> Тип("Строка") Тогда
		Строка=Строка(Объект);
	КонецЕсли;
	Строка = Лев(Строка,8)+"..";
	Возврат Строка;
КонецФункции //Сократить()

// Функция возвращает описание режима - самостоятельный, БК, БГУ, БГП
//
// Параметры:
//  нет.
//
Функция ПолучитьРежимРаботы() Экспорт
	//Если ПараметрыСеанса.гз_РежимРаботы = Перечисления.гз_РежимыВстраивания.БухгалтерияДляКазахстана ИЛИ ПараметрыСеанса.гз_РежимРаботы = Перечисления.гз_РежимыВстраивания.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана Тогда
		Возврат "БК";
	//ИначеЕсли ПараметрыСеанса.гз_РежимРаботы = Перечисления.гз_РежимыВстраивания.БухгалтерияДляГосударственныхПредприятийКазахстана Тогда
	//	Возврат "БУГП";
	//ИначеЕсли ПараметрыСеанса.гз_РежимРаботы = Перечисления.гз_РежимыВстраивания.АвтономныйРежим Тогда
	//	Возврат "Самостоятельный";
	//ИначеЕсли ПараметрыСеанса.гз_РежимРаботы = Перечисления.гз_РежимыВстраивания.БухгалтерияДляГосударственныхУчрежденийКазахстана Тогда
	//	Возврат "БГУ";
	//ИначеЕсли ПараметрыСеанса.гз_РежимРаботы = Перечисления.гз_РежимыВстраивания.РейтингБухгалтерияГосударственногоПредприятия Тогда
	//	Возврат "БГП";
	//Иначе
	//	Возврат "Самостоятельный";
	//КонецЕсли;
КонецФункции //ПолучитьРежимРаботы()

// Функция возвращает описание режима - самостоятельный, БК, БГУ, БГП
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если самостоятельный режим работы, иначе - ложь
//
Функция АвтономныйРежимРаботы() Экспорт
	Если ПолучитьРежимРаботы()="Самостоятельный" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции //АвтономныйРежимРаботы()

// Определение каталога "Application Data" текущего пользователя Windows
//
Функция ПолучитьПутьККаталогуДанныхПриложений() Экспорт 
	
	// Создаем COM объект "Shell.Application" (Для Windows 98 и  Windows NT 4.0 требуется установка
    // Windows Script Host 5.1 и Internet Explorer 4.0)	
	App = Новый COMОбъект("Shell.Application");
	Folder = App.Namespace(26);
	Путь = СокрЛП(Folder.Self.Path);
	Возврат ?(Прав(Путь, 1) = "\", Путь, Путь + "\");
	
КонецФункции 

// Функция возвращает массив возможных путей к каталогу шаблонов конфигураций
//
Функция ПолучитьПутиККаталогуШаблонов() Экспорт
   
    Перем ПутиККаталогуШаблонов;
   
    ПутиККаталогуШаблонов = Новый Массив();
   // Добавляем в массив сначала стандартный путь 
    ПутиККаталогуШаблонов.Добавить(СтрЗаменить(КаталогПрограммы(),"bin","tmplts"));
   
    // Определяем версию платформы
    СистемнаяИнформация = Новый СистемнаяИнформация;
    ТекущаяВерсия = Лев(СистемнаяИнформация.ВерсияПриложения, 3);
   
    // если это 8.2
	Если ТекущаяВерсия = "8.2" Тогда
		   
        ПутьКФайлуНастроек = "";
        КаталогДанныхПриложений = "";
		Попытка
			// Получаем путь к каталогу  "Application Data" для текущего пользователя Windows
			КаталогДанныхПриложений = ПолучитьПутьККаталогуДанныхПриложений();
			// Добавлям путь к файлу, в котором храняться настройки пути к каталогу шалонов для 8.2			
			ПутьКФайлуНастроек = КаталогДанныхПриложений + "1C\1CEStart\1CEStart.cfg";
        Исключение
            Возврат ПутиККаталогуШаблонов;
        КонецПопытки;
               
        Файл = Новый Файл(ПутьКФайлуНастроек);
        Если Не Файл.Существует() Тогда
            Возврат ПутиККаталогуШаблонов;   
        КонецЕсли;
       
        // Считываем файл настроек в текстовый документ
        // и ищем в нем строку начинающуюся с "ConfigurationTemplatesLocation"
		ТекстДок = Новый ТекстовыйДокумент;
        ТекстДок.Прочитать(ПутьКФайлуНастроек);
        КоличествоСтрок = ТекстДок.КоличествоСтрок();
        Для Счетчик = 1 по КоличествоСтрок  Цикл
            Строка = СокрЛП(ТекстДок.ПолучитьСтроку(Счетчик));
            НомерСимволаНачалаПути = Найти(Строка, "ConfigurationTemplatesLocation=");
            // Если искомая строка найдена, получаем из нее путь к каталогу шаблонов
            Если НомерСимволаНачалаПути > 0 Тогда
                Путь = СокрЛП(Прав(Строка, СтрДлина(Строка) - (НомерСимволаНачалаПути + 30)));
                Если Прав(Путь, 1) <> "\" Тогда
                Путь = Путь + "\";
                КонецЕсли;
                Если ПутиККаталогуШаблонов.Найти(Путь) = Неопределено Тогда
                    ПутиККаталогуШаблонов.Добавить(Путь);                       
                КонецЕсли;
            КонецЕсли;
           
        КонецЦикла;
       
        // Добавим стандартный для 8.2 путь к папке шалонов
        СтандартныйПуть = КаталогДанныхПриложений + "\1C\1Cv82\tmplts\";
        Если ПутиККаталогуШаблонов.Найти(СтандартныйПуть) = Неопределено Тогда
            ПутиККаталогуШаблонов.Добавить(СтандартныйПуть);                       
        КонецЕсли;
		
 // если это не 8.2   
 Иначе
        ПутьКФайлуНастроек = "";   
		Попытка
			// Получаем путь к каталогу  "Application Data" для текущего пользователя Windows
			// и добавлям путь к файлу, в котором храняться настройки пути к каталогу шалонов для 8.2						
              ПутьКФайлуНастроек = ПолучитьПутьККаталогуДанныхПриложений() + "1C\1Cv81\v8cscadr.lst";
        Исключение
            Возврат ПутиККаталогуШаблонов;
        КонецПопытки;
       
        Файл = Новый Файл(ПутьКФайлуНастроек);
        Если Не Файл.Существует() Тогда
            Возврат ПутиККаталогуШаблонов;   
        КонецЕсли;
       
        // Считываем файл настроек в текстовый документ
        // и ищем в нем строку начинающуюся с "file://"  типа "file://C:\Program Files\1cv81\tmplts"
        ТекстДок = Новый ТекстовыйДокумент;
        ТекстДок.Прочитать(ПутьКФайлуНастроек);
        КоличествоСтрок = ТекстДок.КоличествоСтрок();
        Для Счетчик = 1 по КоличествоСтрок  Цикл
            Строка = СокрЛП(ТекстДок.ПолучитьСтроку(Счетчик));
            НомерСимволаНачалаПути = Найти(Строка, "file://");
            // Если искомая строка найдена, получаем из нее путь к каталогу шаблонов
            Если НомерСимволаНачалаПути > 0 Тогда
                Путь = СокрЛП(Прав(Строка, СтрДлина(Строка) - (НомерСимволаНачалаПути + 6)));
                Если Прав(Путь, 1) <> "\" Тогда
                Путь = Путь + "\";
                КонецЕсли;
                Если ПутиККаталогуШаблонов.Найти(Путь) = Неопределено Тогда
                    ПутиККаталогуШаблонов.Добавить(Путь);                       
                КонецЕсли;
                Возврат ПутиККаталогуШаблонов;
            КонецЕсли;
           
        КонецЦикла;
	        
    КонецЕсли;
   
    Возврат ПутиККаталогуШаблонов;
   
КонецФункции

///////////////////////////////////////////////////////////////////////////////////
//ОБРАБОТЧИКИ СОБЫТИЙ 

///////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, обеспечивающие подписку на событие гз_ПриПроведенииДокументовПоДоговорамГосПлана

// Функция проверяет, входит ли договор в гос закупки
//
// Параметры:
//  СсылкаНаДоговор - ссылка на договор, для которого необходимо проверить, является ли он договором гос. закупок
//
// Возвращаемое значение:
//  Истина - если это договор гос закупок, иначе - ложь
//
Функция ЭтоДоговорГосЗакупок(СсылкаНаДоговор) Экспорт
	
	ЗапросПоРегиструДоговоров = Новый Запрос;
	ЗапросПоРегиструДоговоров.Текст = "ВЫБРАТЬ
	|	гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам.ДоговорКонтрагента
	|Из
	|	РегистрСведений.гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам КАК гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам
	|ГДЕ
	|	гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам.ДоговорКонтрагента.Ссылка = &Ссылка";
	
	ЗапросПоРегиструДоговоров.УстановитьПараметр("Ссылка", СсылкаНаДоговор);
	
	Возврат НЕ ЗапросПоРегиструДоговоров.Выполнить().Пустой();
	
КонецФункции //ЭтоДоговорГосЗакупок()

#Если Клиент Тогда
     	
	// Процедура - заполнение ТЧ документов по данным договора о гос. закупках
	//
	Процедура ЗаполнитьТЧНаОснованииДанныхДоговораГосЗакупок(Товары, Договор, Объект,ИнтерактивныйРежим=Истина) Экспорт
		Если НЕ ЭтоДоговорГосЗакупок(Договор.Ссылка) Тогда
			Возврат;
		КонецЕсли;
		ТекстВопроса = "Заполнить табличные части документа по данным договора?";
		Если ИнтерактивныйРежим И Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		ЗапросПоТоварам = Новый Запрос;
		ЗапросПоТоварам.Текст = "ВЫБРАТЬ
		                        |	гз_НоменклатураПоДоговорамГосударственныхЗакупокСрезПоследних.Номенклатура,
		                        |	гз_НоменклатураПоДоговорамГосударственныхЗакупокСрезПоследних.Сумма,
		                        |	гз_НоменклатураПоДоговорамГосударственныхЗакупокСрезПоследних.Количество,
		                        |	гз_НоменклатураПоДоговорамГосударственныхЗакупокСрезПоследних.Сумма / гз_НоменклатураПоДоговорамГосударственныхЗакупокСрезПоследних.Количество КАК Цена,
		                        |	гз_НоменклатураПоДоговорамГосударственныхЗакупокСрезПоследних.ПроцентКазахстанскогоСодержания,
		                        |	гз_НоменклатураПоДоговорамГосударственныхЗакупокСрезПоследних.Производитель,
		                        |	гз_НоменклатураПоДоговорамГосударственныхЗакупокСрезПоследних.СуммаТоваров,
		                        |	гз_НоменклатураПоДоговорамГосударственныхЗакупокСрезПоследних.ТрудСубподрядчика,
		                        |	гз_НоменклатураПоДоговорамГосударственныхЗакупокСрезПоследних.КазахстанскоеСодержаниеТоваровПриВыполненииРабот,
		                        |	гз_НоменклатураПоДоговорамГосударственныхЗакупокСрезПоследних.НаименованиеТовара,
		                        |	гз_НоменклатураПоДоговорамГосударственныхЗакупокСрезПоследних.РазмерАвансовогоПлатежа,
		                        |	гз_НоменклатураПоДоговорамГосударственныхЗакупокПоМестамПоставкиСрезПоследних.МестоПоставки
		                        |ИЗ
		                        |	РегистрСведений.гз_НоменклатураПоДоговорамГосударственныхЗакупок.СрезПоследних КАК гз_НоменклатураПоДоговорамГосударственныхЗакупокСрезПоследних
		                        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гз_НоменклатураПоДоговорамГосударственныхЗакупокПоМестамПоставки.СрезПоследних КАК гз_НоменклатураПоДоговорамГосударственныхЗакупокПоМестамПоставкиСрезПоследних
		                        |		ПО гз_НоменклатураПоДоговорамГосударственныхЗакупокСрезПоследних.Регистратор = гз_НоменклатураПоДоговорамГосударственныхЗакупокПоМестамПоставкиСрезПоследних.Регистратор
		                        |			И гз_НоменклатураПоДоговорамГосударственныхЗакупокСрезПоследних.Номенклатура = гз_НоменклатураПоДоговорамГосударственныхЗакупокПоМестамПоставкиСрезПоследних.Номенклатура
		                        |			И гз_НоменклатураПоДоговорамГосударственныхЗакупокСрезПоследних.НомерСтроки = гз_НоменклатураПоДоговорамГосударственныхЗакупокПоМестамПоставкиСрезПоследних.НомерСтроки
		                        |ГДЕ
		                        |	гз_НоменклатураПоДоговорамГосударственныхЗакупокСрезПоследних.ДоговорКонтрагента = &ДоговорКонтрагента
		                        |
		                        |УПОРЯДОЧИТЬ ПО
		                        |	гз_НоменклатураПоДоговорамГосударственныхЗакупокСрезПоследних.НомерСтроки";
		
		ЗапросПоТоварам.УстановитьПараметр("ДоговорКонтрагента", Договор);						
		РезультатЗапросаПоТоварам = ЗапросПоТоварам.Выполнить().Выбрать();
		Товары.Очистить();
		Пока РезультатЗапросаПоТоварам.Следующий() Цикл
			НовСтр 					= Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,РезультатЗапросаПоТоварам);
			ТекущийПользователь 	= мПолучитьЗначениеПеременной("глТекущийПользователь");
			Если Объект.Метаданные().Имя <> "гз_РегистрацияДоговораПоГосударственнымЗакупкам" Тогда
			Иначе
				НовСтр.ПроцентКазахстанскогоСодержания = РезультатЗапросаПоТоварам.ПроцентКазахстанскогоСодержания;
				НовСтр.Производитель = РезультатЗапросаПоТоварам.Производитель;
			КонецЕсли;	
		КонецЦикла;
	КонецПроцедуры //ЗаполнитьТЧНаОснованииДанныхДоговораГосЗакупок()


// Процедура ОбработатьСтартСистемы
//
// Описание: запускается из модуля приложения при старте 
// системы и устанавливает значения глобальных переменных
// подсистемы Государственные закупки
//
// Параметры глЗапрашиватьПодтверждениеПриЗакрытии, ПервыйЗапуск - переменные контекста модуля приложения
//
Процедура ОбработатьСтартСистемы(глЗапрашиватьПодтверждениеПриЗакрытии,ПервыйЗапуск) Экспорт
	Если НЕ (РольДоступна("гз_ИнициализацияСистемыЗащиты") ИЛИ РольДоступна("гз_МенеджерПоГосЗакупкам") ИЛИ РольДоступна("гз_ПодачаЗаявокПоГосЗакупкам") ИЛИ РольДоступна("ПолныеПрава")) Тогда
		Возврат;	 
	КонецЕсли;
	гз_Защита.ИнициализацияКонфигурации();
КонецПроцедуры //ОбработатьСтартСистемы()

#КонецЕсли

// Процедура 	ОповещениеПользователю
//
// Описание: 	выдает предупреждение если клиент и сообщение если сервер
//
// Параметры:	Текст	-	тип Строка, сообщение;
//				Статус	-	тип СтатусСообщения, статус выдаваемого сообщения
//
Процедура ОповещениеПользователю(Текст,Статус=Неопределено) Экспорт
	Если Статус=Неопределено Тогда
		Статус=СтатусСообщения.БезСтатуса;
	КонецЕсли;
	#Если Клиент Тогда
		Предупреждение(Текст);
	#Иначе
		Сообщить(Текст,Статус);
	#КонецЕсли
КонецПроцедуры //ОповещениеПользователю()

// Функция возвращает список значений способов закупки, используемых для конкурса
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  СписокСпособов - список значений способов закупки, используемых для конкурса
//
Функция ПолучитьСписокСпособовЗакупкиДляКонкурса()  Экспорт
	СписокСпособов = Новый СписокЗначений;
	СписокСпособов.Добавить(Справочники.гз_СпособыЗакупки.СпособомКонкурса);
	СписокСпособов.Добавить(Справочники.гз_СпособыЗакупки.СпособомКонкурсаСИспользованиемДвухэтапныхПроцедур);
	Возврат СписокСпособов;
КонецФункции //ПолучитьСписокСпособовЗакупкиДляКонкурса()

// Процедура обрабатывает событие ПередЗаписью документа,
// предназначена для очистки реквизита РучнаяКорректировка в случае отмены проведения документа
//
// Параметры:
//  Источник				- документ
//	Отказ					- отказ от записи
//	РежимЗаписи				- режим записи документа
// 	РежимПроведения			- режим проведения документа
//
Процедура мПередЗаписьюДокументаОчисткаРеквизитаРучнаяКорректировка(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если (Источник.РучнаяКорректировка) И (РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) Тогда 
		Источник.РучнаяКорректировка = Ложь
	КонецЕсли;	
	
КонецПроцедуры //мПередЗаписьюДокументаОчисткаРеквизитаРучнаяКорректировка()

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ПередЗаписью" документов
// Параметры:
//  Источник				- документ
//	Отказ					- отказ от записи
//	РежимЗаписи				- режим записи документа
// 	РежимПроведения			- режим проведения документа
//
Процедура мПередЗаписьюДокументаУстановкаАвтораПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Метаданные().Реквизиты.Найти("Автор")<>Неопределено
	   И (НЕ ЗначениеЗаполнено(Источник.Автор)) Тогда
		Источник.Автор = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	
КонецПроцедуры //мПередЗаписьюДокументаУстановкаАвтораПередЗаписью()

// Процедура формирования номера документа
//
Процедура мПриУстановкеНовогоНомераДляДокументов(Источник, СтандартнаяОбработка, Префикс) Экспорт
	мДобавитьПрефиксОрганизации(Источник, Префикс);
КонецПроцедуры //мПриУстановкеНовогоНомераДляДокументов()

// Процедура добавляет префикс организации
//
Процедура мДобавитьПрефиксОрганизации(ДокументОбъект, Префикс) Экспорт
	
	// Если  нет реквизита "Организация" или для нее не задан префикс, то 
	// используем пустой префикс,
	// иначе используем префикс организации.
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Если мЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда 
		Реквизит = "Организация";
	ИначеЕсли мЕстьРеквизитДокумента("ОрганизацияОтправитель", МетаданныеДокумента) Тогда 
		Реквизит = "ОрганизацияОтправитель";
	Иначе 
		Если Не ЗначениеЗаполнено(Префикс) Тогда
			 Префикс = "0";
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект[Реквизит].Префикс)  Тогда
		Если Не ЗначениеЗаполнено(Префикс) Тогда
			 Префикс = "0";
		КонецЕсли;
	Иначе
                                
		Префикс = ДокументОбъект[Реквизит].Префикс + Префикс;
        		
	КонецЕсли;
	
Конецпроцедуры //мДобавитьПрефиксОрганизации()

// Функция позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Булево: Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция мЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // мЕстьРеквизитДокумента()

// Процедура предназначена для заполнения общих реквизитов документов по документу основанию,
//	вызывается в обработчиках событий "ОбработкаЗаполнения" в модулях документов.
//
// Параметры:
//  ДокументОбъект  - объект редактируемого документа,
//  ДокументОснование - объект документа основания
//
Процедура мЗаполнитьШапкуДокументаПоОснованию(ДокументОбъект, ДокументОснование) Экспорт

		МетаданныеДокумента          = ДокументОбъект.Метаданные();
		МетаданныеДокументаОснования = ДокументОснование.Метаданные();

		//заполнение даты
		Если Не ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
		  	ДокументОбъект.Дата = НачалоДня(мПолучитьРабочуюДату());
		КонецЕсли;
		
		// Организация.
		Если мЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
		   И мЕстьРеквизитДокумента("Организация", МетаданныеДокументаОснования) Тогда
			ДокументОбъект.Организация = ДокументОснование.Организация;
		КонецЕсли;

		// Подразделение.
		Если мЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента)
		   И мЕстьРеквизитДокумента("Подразделение", МетаданныеДокументаОснования) Тогда
			ДокументОбъект.Подразделение = ДокументОснование.Подразделение;
		КонецЕсли;

		// ПодразделениеОрганизации.
		Если мЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокумента)
		   И мЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокументаОснования) Тогда
			ДокументОбъект.ПодразделениеОрганизации = ДокументОснование.ПодразделениеОрганизации;
		КонецЕсли;

		// Ответственный.
		Если мЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента)
		   И мЕстьРеквизитДокумента("Ответственный", МетаданныеДокументаОснования) Тогда
			ДокументОбъект.Ответственный = ДокументОснование.Ответственный;
		КонецЕсли;

		// Контрагент.
		Если мЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента)
		   И мЕстьРеквизитДокумента("Контрагент", МетаданныеДокументаОснования) Тогда
			ДокументОбъект.Контрагент = ДокументОснование.Контрагент;
		КонецЕсли;

		// ДоговорКонтрагента.
		Если мЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента)
		   И мЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокументаОснования) 
		   И (НЕ мЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
		      ИЛИ ДокументОбъект.Организация = ДокументОснование.ДоговорКонтрагента.Организация) Тогда

			ДокументОбъект.ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента;

			// КурсВзаиморасчетов.
			Если мЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
				// Определим дату получения курсов
				ДатаСреза = ?(ЗначениеЗаполнено(ДокументОбъект.Дата), ДокументОбъект.Дата, мПолучитьРабочуюДату());
							
				СтруктураКурсаВзаиморасчетов = гз_ОбщегоНазначения.мПолучитьКурсВалюты(ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДатаСреза);
				ДокументОбъект.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;

				// КратностьВзаиморасчетов.
				Если мЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
					ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

КонецПроцедуры // мЗаполнитьШапкуДокументаПоОснованию()

// Функция получает значение по умолчанию.
//
// Параметры
//  Ссылка         - Ссылка, для которой необходимо напечатать документ
//  ИсточникМакета - ИсточникМакета, структура, содержащая внешнюю обработку для печати
//
// Возвращаемое значение:
//   ТабличныйДокумент
//
Функция мПолучитьЗначениеПоУмолчанию(Пользователь, Настройка) Экспорт
	// Хранит дополнительные параметры
	Перем ДополнительныеПараметры; // локальная переменная
	
	Если АвтономныйРежимРаботы() Тогда
		Если Настройка = "ЗапрашиватьПодтверждениеПриЗакрытии"  Тогда
			 Возврат Ложь;
		ИначеЕсли Настройка = "ОсновнаяОрганизация"  Тогда
			 Организация = Справочники.Организации.ПустаяСсылка();
			 Выборка = Справочники.Организации.Выбрать();
			 Пока Выборка.Следующий() Цикл
				 Если Не Выборка.ЭтоГруппа Тогда
					 Возврат Выборка.Ссылка;
				 КонецЕсли;
			 КонецЦикла;
			 Возврат Организация;
		ИначеЕсли Настройка = "ЗапрашиватьВидОперацииПриВводеНового"  Тогда
			 Возврат Истина;
		ИначеЕсли Настройка = "ПриОткрытииДокументовПозиционироватьсяНаДату"  Тогда
			 Возврат Ложь;
		ИначеЕсли Настройка = "УчетПоВсемОрганизациям"  Тогда
			 Возврат Истина;
		ИначеЕсли Настройка = "ЗапрашиватьНастройкиДокументаПриВводеНового"  Тогда
			 Возврат Ложь;
		ИначеЕсли Настройка = "ПечатьДокументовБезПредварительногоПросмотра"  Тогда
			 Возврат Ложь;
		ИначеЕсли Настройка = "ПоказыватьДвиженияПриПроведении"  Тогда
			 Возврат Ложь;
		ИначеЕсли Настройка = "ОсновнойОтветственный"  Тогда
			 Возврат Справочники.Пользователи.ПустаяСсылка();
		Иначе
			Возврат "";
		КонецЕсли;
	Иначе
		Если гз_ОбщегоНазначения.ПолучитьРежимРаботы()="БГУ" Тогда
			Если Настройка = "ПоказыватьДвиженияПриПроведении" Тогда
				Возврат Ложь;
			ИначеЕсли Настройка = "ПриОткрытииДокументовПозиционироватьсяНаДату"  Тогда
				 Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.УстановитьПараметр("Настройка"   , ПланыВидовХарактеристик.НастройкиПользователей[Настройка]);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Значение
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК РегистрЗначениеПрав
		|
		|ГДЕ
		|	Пользователь = &Пользователь
		| И Настройка    = &Настройка";

		Выборка = Запрос.Выполнить().Выбрать();
		ПустоеЗначение = ПланыВидовХарактеристик.НастройкиПользователей[Настройка].ТипЗначения.ПривестиЗначение();
		Если Выборка.Количество() = 0 Тогда
			Если Настройка = "ОткрыватьПриЗапускеПанельФункций" Тогда
				Возврат Истина;
			КонецЕсли;
			
			Если Настройка = "ОтражатьДокументыВНалоговомУчете" Тогда
				Возврат Истина;
			КонецЕсли;
					
			Если Настройка = "ОтражатьДокументыВУправленческомУчете" Тогда
				Возврат Истина;
			КонецЕсли;
					
			Если Настройка = "ОтражатьДокументыВБухгалтерскомУчете" Тогда
				Возврат Истина;
			КонецЕсли;
			
			Возврат ПустоеЗначение;

		ИначеЕсли Выборка.Следующий() Тогда

			Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
				Возврат ПустоеЗначение;
			Иначе
				Возврат Выборка.Значение;
			КонецЕсли;

		Иначе
			Возврат ПустоеЗначение;

		КонецЕсли;
	КонецЕсли;
КонецФункции // мПолучитьЗначениеПоУмолчанию()

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ПриОткрытии" в модулях форм всех документов.
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа,
//  ТекПользователь                - ссылка на справочник, определяет текущего пользователя  
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ТипОперации                    - необязаетельный, строка вида операции ("Покупка" или "Продажа"),
//                                   если не передан, то реквизиты, зависящие от вида операции, не заполняются
//
Процедура мЗаполнитьШапкуДокумента(ДокументОбъект, ТекПользователь, ВалютаРегламентированногоУчета = Неопределено, ТипОперации = "", НеИзменятьРеквизитыПоНДС = Ложь,ПараметрОбъектКопирования = Неопределено, ПараметрОснование = Неопределено) Экспорт
    // Хранит тип цен
	Перем ТипЦен; // локальная переменная

		МетаданныеДокумента = ДокументОбъект.Метаданные();
		Если мЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
		  И (НЕ ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
			ДокументОбъект.Организация = мПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяОрганизация");
		КонецЕсли;

		Если мЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента)
		   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Ответственный)) Тогда
			ДокументОбъект.Ответственный = ТекПользователь;
		КонецЕсли;

		Если мЕстьРеквизитДокумента("Автор", МетаданныеДокумента)
		   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Автор)) Тогда
			ДокументОбъект.Автор = ТекПользователь;
		КонецЕсли;
		
		Если мЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента)
		   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации)) Тогда
			ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][0];
		КонецЕсли;

КонецПроцедуры // мЗаполнитьШапкуДокумента()

// Процедура удаления существующих движений документа при перепроведении (отмене проведения)
//
Процедура мУдалитьДвиженияРегистратора(ДокументОбъект, Отказ, РучнаяКорректировка = Ложь) Экспорт
	
	// получение списка регистров, по которым существуют движения
	ТаблицаДвижений = гз_ПолныеПрава.ОпределитьНаличиеДвиженийПоРегистратору(ДокументОбъект.Ссылка);
	ТаблицаДвижений.Колонки.Добавить("НаборЗаписей");
		
	Для Каждого СтрокаДвижения ИЗ ТаблицаДвижений Цикл
		// имя регистра передается как значение, полученное с помощью
		// функции ПолноеИмя() метаданных регистра
		ПозицияТочки = Найти(СтрокаДвижения.Имя, ".");
		ТипРегистра = Лев(СтрокаДвижения.Имя, ПозицияТочки - 1);
		ИмяРегистра = СокрП(Сред(СтрокаДвижения.Имя, ПозицияТочки + 1));
		
		Если РучнаяКорректировка Тогда
			Набор = ДокументОбъект.Движения[ИмяРегистра];
			Набор.Прочитать();
			Набор.УстановитьАктивность(Ложь);
			
		Иначе
			ЕСли ТипРегистра = "РегистрНакопления" Тогда
				МетаданныеНабора = Метаданные.РегистрыНакопления[ИмяРегистра];
				Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
				
			ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
				МетаданныеНабора = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
				Набор = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
				
			ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
				МетаданныеНабора = Метаданные.РегистрыСведений[ИмяРегистра];
				Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
				
			ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
				МетаданныеНабора = Метаданные.РегистрыРасчета[ИмяРегистра];
				Набор = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
				
			КонецЕсли;
			
			Если НЕ ПравоДоступа("Изменение", МетаданныеНабора) Тогда
				// отсутствуют права на всю таблицу регистра
				мСообщитьОбОшибке("Нарушение прав доступа", Отказ, СтрокаДвижения.Имя);
				Возврат;
			КонецЕсли;
			
			Набор.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);			
			// набор не записывается сразу, чтобы не откатывать транзакцию, если впоследствии
			// выяснится, что на один из регистров не хватает прав.
		КонецЕсли;
		
		СтрокаДвижения.НаборЗаписей = Набор;		
		
	КонецЦикла;	
	
	Для Каждого СтрокаДвижения ИЗ ТаблицаДвижений Цикл		
		Попытка
			СтрокаДвижения.НаборЗаписей.Записать();
		Исключение
			// возможно «сработал» RLS или механизм даты запрета изменения
			мСообщитьОбОшибке(ОписаниеОшибки(), Отказ, СтрокаДвижения.Имя);
			ВызватьИсключение "Операция не выполнена";
		КонецПопытки;
	КонецЦикла;
	
	Если (НЕ Отказ) И (НЕ РучнаяКорректировка) Тогда
		Для Каждого Движение ИЗ ДокументОбъект.Движения Цикл
			Если Движение.Количество() > 0 Тогда
				Движение.Очистить();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Удаление записей регистрации из всех последовательностей
	мУдалитьРегистрациюДокументаВПоследовательностях(ДокументОбъект, Истина);

КонецПроцедуры //мУдалитьДвиженияРегистратора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ПОСЛЕДОВАТЕЛЬНОСТЯМИ

// Процедура удаления регистрации документа в последовательностях
//
Процедура мУдалитьРегистрациюДокументаВПоследовательностях(ДокументОбъект, ПроверятьДвижения = Ложь)Экспорт
	// получение списка последовательностей в которых зарегистрирован документ
	Если ПроверятьДвижения Тогда
		ТаблицаРегистраций = мОпределитьНаличиеРегистрацииДокументаВПоследовательности(ДокументОбъект);
	КонецЕсли;      
	КоллекцияПоследовательностей = ДокументОбъект.ПринадлежностьПоследовательностям;
	Для Каждого НаборЗаписейРегистрацииВПоследовательности ИЗ КоллекцияПоследовательностей Цикл
		Если (НаборЗаписейРегистрацииВПоследовательности.Количество() > 0)
		  ИЛИ (ПроверятьДвижения И (НЕ ТаблицаРегистраций.Найти(НаборЗаписейРегистрацииВПоследовательности.Метаданные().Имя,"Имя") = Неопределено)) Тогда
		   НаборЗаписейРегистрацииВПоследовательности.Очистить();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //мУдалитьРегистрациюДокументаВПоследовательностях()

// Функция определяет наличие регистрации документа в последовательностях
//
// Параметры: 
//  ДокументОбъект - документ, для которого нужно определить наличие регистрации в последовательностях, 
//
Функция мОпределитьНаличиеРегистрацииДокументаВПоследовательности(ДокументОбъект) Экспорт
	ТекстЗапроса = "";	
	
	Для Каждого Последовательность ИЗ ДокументОбъект.ПринадлежностьПоследовательностям Цикл
		// в запросе получаем имена последовательностей, в которых документ зарегистрирован
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ """ + Последовательность.Метаданные().Имя 
		+  """ КАК Имя ИЗ " + Последовательность.Метаданные().ПолноеИмя()  
		+ " ГДЕ Регистратор = &Регистратор";
	КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		Возврат Новый ТаблицаЗначений();
	Иначе
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Регистратор", ДокументОбъект.Ссылка);
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();	
		Возврат ТаблицаЗапроса;
	КонецЕсли;
	
КонецФункции //мОпределитьНаличиеРегистрацииДокументаВПоследовательности()

// Функция проверяет ручную корректировку
//
Функция мРучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект)  Экспорт
	
	Если РучнаяКорректировка Тогда
		мВключитьАктивностьПоРегистратору(ЭтотОбъект, Отказ);
		ТекстСообщения = "Движения документа отредактированы вручную и не могут быть автоматически актуализированы.";
		мСообщитьОбОшибке(ТекстСообщения, ,Заголовок);
		Возврат Истина;
	Иначе
		мУдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
		Возврат Ложь;
	КонецЕсли;
 	
КонецФункции // мРучнаяКорректировкаОбработкаПроведения()

// Процедура включения активности движений при проведении документа, движения которого
// заданы вручную
Процедура мВключитьАктивностьПоРегистратору(ДокументОбъект, Отказ) Экспорт
	
	// получение списка регистров, по которым существуют движения
	ТаблицаДвижений = гз_ПолныеПрава.ОпределитьНаличиеДвиженийПоРегистратору(ДокументОбъект.Ссылка);
	ТаблицаДвижений.Колонки.Добавить("НаборЗаписей");
		
	Для Каждого СтрокаДвижения ИЗ ТаблицаДвижений Цикл
		// имя регистра передается как значение, полученное с помощью
		// функции ПолноеИмя() метаданных регистра
		ПозицияТочки = Найти(СтрокаДвижения.Имя, ".");
		ТипРегистра = Лев(СтрокаДвижения.Имя, ПозицияТочки - 1);
		ИмяРегистра = СокрП(Сред(СтрокаДвижения.Имя, ПозицияТочки + 1));
		
		Набор = ДокументОбъект.Движения[ИмяРегистра];
		Набор.Прочитать();
		Набор.УстановитьАктивность(Истина);
			
		СтрокаДвижения.НаборЗаписей = Набор;		
		
	КонецЦикла;	
	
	Для Каждого СтрокаДвижения ИЗ ТаблицаДвижений Цикл		
		Попытка
			СтрокаДвижения.НаборЗаписей.Записать();
		Исключение
			// возможно «сработал» RLS или механизм даты запрета изменения
			мСообщитьОбОшибке(ОписаниеОшибки(), Отказ, СтрокаДвижения.Имя);
			ВызватьИсключение "Операция не выполнена";
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры //мВключитьАктивностьПоРегистратору()

// Функция получает рабочую дату
//
Функция мПолучитьРабочуюДату() Экспорт 
	
	#Если Клиент Тогда 
		Дата = РабочаяДата; 
	#Иначе 
		Дата = ТекущаяДата(); 
	#КонецЕсли 
	
	Возврат Дата;
	
КонецФункции // мПолучитьРабочуюДату() 

// Функция возвращает курс валюты на дату
//
// Параметры:
//  Валюта     - Валюта (элемент справочника "Валюты")
//  ДатаКурса  - Дата, на которую следует получить курс
//
// Возвращаемое значение: 
//  Структура, содержащая:
//   Курс      - курс валюты
//   Кратность - кратность валюты
//
Функция мПолучитьКурсВалюты(Валюта, ДатаКурса) Экспорт

	Структура = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Валюта));
	Возврат Структура;
	
КонецФункции // мПолучитьКурсВалюты()

// Процедура выводит сообщение об ошибке и выставляет параметр Отказ в "Истина". 
//  В случае работы на клиенте или на сервере выводит в окно сообщений,
//  в случае внешнего соединения вызывает исключение.
// Параметры:
//  ТекстСообщения - строка, текст сообщения.
//  Отказ          - булево, признак отказа (необязательный)
Процедура мСообщитьОбОшибке(ТекстСообщения, Отказ = Ложь, Заголовок = "",Статус = Неопределено) Экспорт

	ОкончаниеСлужебногоСообщения = Найти(ТекстСообщения, "}:");

	Если ОкончаниеСлужебногоСообщения > 0 И Лев(ТекстСообщения, 1) = "{" Тогда
		ТекстСообщения = СокрЛП(Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2)));
	КонецЕсли;

	Отказ = Истина;

	#Если ВнешнееСоединение Тогда

		Если ЗначениеЗаполнено(Заголовок) Тогда
			ТекстСообщения = Заголовок + Символы.ПС + ТекстСообщения;
			Заголовок = "";
		КонецЕсли;

		ВызватьИсключение (ТекстСообщения);

	#Иначе

		Если ЗначениеЗаполнено(Заголовок) Тогда
			Сообщить(Заголовок);
			Заголовок = "";
		КонецЕсли;

		Если Статус = Неопределено тогда
			Статус = СтатусСообщения.Важное;
		КонецЕсли;
		Сообщить(ТекстСообщения, Статус);

	#КонецЕсли

КонецПроцедуры // мСообщитьОбОшибке()

// Функция пересчитывает сумму из валюты ВалютаНач по курсу ПоКурсуНач 
// в валюту ВалютаКон по курсу ПоКурсуКон
//
// Параметры:      
//	Сумма          - сумма, которую следует пересчитать;
//	ВалютаНач      - ссылка на элемент справочника Валют;
//                   определяет валюты из которой надо пересчитывать;
//	ВалютаКон      - ссылка на элемент справочника Валют;
//                   определяет валюты в которую надо пересчитывать;
// 	ПоКурсуНач     - курс из которого надо пересчитать;
// 	ПоКурсуКон     - курс в который надо пересчитать;
// 	ПоКратностьНач - кратность из которого надо пересчитать (по умолчанию = 1);
// 	ПоКратностьКон - кратность в который надо пересчитать  (по умолчанию = 1);
//
// Возвращаемое значение: 
//  Сумма, пересчитанная в другую валюту
//
Функция мПересчитатьИзВалютыВВалюту(Сумма, ВалютаНач, ВалютаКон, ПоКурсуНач, ПоКурсуКон, 
								   ПоКратностьНач = 1, ПоКратностьКон = 1 ) Экспорт

	Если (ВалютаНач = ВалютаКон) Тогда

		// Считаем, что пересчет не нужен.
		Возврат Сумма;

	КонецЕсли;

	Если (ПоКурсуНач     = ПоКурсуКон) 
	   И (ПоКратностьНач = ПоКратностьКон) Тогда

		// ну, тут и считать нечего...
		Возврат Сумма;

	КонецЕсли;
	
	// Проверка установки значений
	ПризнакОшибки = Ложь;
	Если ПоКурсуНач     = 0  Тогда
		мСообщитьОбОшибке("При пересчете валютных сумм обнаружен нулевой курс валюты: " + СокрЛП(ВалютаНач));
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если ПоКурсуКон     = 0  Тогда
		мСообщитьОбОшибке("При пересчете валютных сумм обнаружен нулевой курс валюты: " + СокрЛП(ВалютаКон));
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если ПоКратностьНач = 0  Тогда
		мСообщитьОбОшибке("При пересчете валютных сумм обнаружена нулевая кратность валюты: " + СокрЛП(ВалютаНач));
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если ПоКратностьКон = 0  Тогда
		мСообщитьОбОшибке("При пересчете валютных сумм обнаружена нулевая кратность валюты: " + СокрЛП(ВалютаКон));
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если ПризнакОшибки Тогда
		Возврат 0;          
	КонецЕсли;

	Возврат Окр((Сумма * ПоКурсуНач * ПоКратностьКон) / (ПоКурсуКон * ПоКратностьНач), 2);

КонецФункции // мПересчитатьИзВалютыВВалюту()

// Функция определяет курс документа, который равен либо курсу документа (если в документе он существует),
// либо курсу взаиморасчетов, либо 1.
//
// Параметры: 
//  ДокументОбъект                 - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - курс документа.
//
Функция мКурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Если валюта документа совпадает с валютой регл. учета, то курс 1.
	Если мЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
		
		Если ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		
			// Если есть реквизит КурсДокумента - его и вернем
			Если мЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КурсДокумента;
			КонецЕсли;

			// Если нет КурсДокумента и валюта документа не совпадает с валютой регл. учета, 
			// то такой документ может быть выписан только в валюте взаиморасчетов,
			// если есть реквизит КурсВзаиморасчетов - его и вернем.
			Если мЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КурсВзаиморасчетов;
			КонецЕсли;

			// Если нет КурсВзаиморасчетов и валюта документа не совпадает с валютой регл. учета, 
			// то КурсВзаиморасчетов должен быть в табличной части документа или может вообще отсутствовать.
			// Тогда возьмем курс из справочника на дату документа.
			Возврат мПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,ДокументОбъект.Дата).Курс;

		КонецЕсли;
		
	КонецЕсли;

	Возврат 1;

КонецФункции // мКурсДокумента()

// Функция определяет кратность документа, которая равен либо кратности документа (если в документе она существует),
// либо кратности взаиморасчетов, либо 1.
//
// Параметры: 
//  ДокументОбъект - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - кратность валюты в документе.
//
Функция мКратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если мЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда

		// Если валюта документа совпадает с валютой регл. учета, то кратность 1.
		Если ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда

			// Если есть реквизит КратностьДокумента - его и вернем
			Если мЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КратностьДокумента;
			КонецЕсли;

			// Если нет КратностьДокумента и валюта документа не совпадает с валютой регл. учета, 
			// то такой документ может быть выписан только в валюте взаиморасчетов,
			// если есть реквизит КратностьВзаиморасчетов - его и вернем.
			Если мЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КратностьВзаиморасчетов;
			КонецЕсли;

			// Если нет КратностьВзаиморасчетов и валюта документа не совпадает с валютой регл. учета, 
			// то КратностьВзаиморасчетов должна быть в табличной части документа или может вообще отсутствовать.
			// Тогда возьмем Кратность из справочника на дату документа.
			Возврат мПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,ДокументОбъект.Дата).Кратность;

		КонецЕсли;
	
	КонецЕсли;

	Возврат 1;

КонецФункции // мКратностьДокумента()

// Функция формирует строку представления документа для сообщений при проведении.
//
// Параметры
//  Документ - ссылка на проводимый документ.
//
// Возвращаемое значение
//  Строка с представлением документа.
//
Функция мПредставлениеДокументаПриПроведении(Документ) Экспорт

	МетаданныеДокумента = Документ.Метаданные();

	ВидОперацииСтр = "";

	Если мЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента) Тогда
		ВидОперацииСтр = " (" + Документ.ВидОперации + ")";
	КонецЕсли;

	Возврат "Проведение документа: " + СокрЛП(Документ) + ВидОперацииСтр;

КонецФункции // мПредставлениеДокументаПриПроведении()

// Функция получает значение переменной.
//
Функция мПолучитьЗначениеПеременной(ИмяПараметра, Кэш = Неопределено, КэшИзменен = Ложь) Экспорт
	
	Если Кэш = Неопределено Тогда
		// Кэш не был проинициализирован
		Кэш = Новый Структура;
	Иначе
		// Ищем значение в структуре
		НайденноеЗначение = Неопределено;
		Если Кэш.Свойство(ИмяПараметра, НайденноеЗначение) Тогда
			Если ВРег(ИмяПараметра) = ВРег("глИсчислениеНалоговСтруктурныхЕдиниц") Тогда
				Если НайденноеЗначение = Неопределено Тогда
					НайденноеЗначение = гз_ПолныеПрава.мЗаполнитьИсчислениеНалоговСтруктурныхЕдиниц();
				КонецЕсли; 
			КонецЕсли;
			Возврат НайденноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Если ВРег(ИмяПараметра) = ВРег("СтруктураМенеджерЛицензий") Тогда
		Попытка
			мКэш = ПараметрыСеанса.гз_ОбщиеЗначения.Получить();
	 		НайденноеЗначение = Неопределено;
			Если мКэш.Свойство("СтруктураМенеджерЛицензий",НайденноеЗначение) Тогда
				Возврат НайденноеЗначение;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;

	// Значение в КЭШе не нашли, получим значение из БД
	Если ВРег(ИмяПараметра) = ВРег("глТекущийПользователь") Тогда
		НайденноеЗначение = ПараметрыСеанса.ТекущийПользователь;
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ВалютаРегламентированногоУчета") Тогда
		НайденноеЗначение = Константы.ВалютаРегламентированногоУчета.Получить();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("СтруктураМенеджерЛицензий") Тогда
		НайденноеЗначение = Новый Структура;
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ВестиУчетПоСпецификам") Тогда
		НайденноеЗначение = Константы.гз_ВестиУчетПоСпецификам.Получить();
		
	Иначе
		СтрокаИсключения = "Невозможно обработать параметр " + """" + ИмяПараметра + """" + " для получения значения";
		ВызватьИсключение СтрокаИсключения;
	КонецЕсли;
	
	Кэш.Вставить(ИмяПараметра, НайденноеЗначение);
	КэшИзменен = Истина;
	
	Возврат НайденноеЗначение;
	
КонецФункции //мПолучитьЗначениеПеременной()
 
// Процедура устанавливает значение переменной.
//
Процедура мУстановитьЗначениеПеременной(ИмяПараметра, Кэш, ЗначениеПараметра, ОбновлятьВоВсехКэшах = Ложь) Экспорт
	
	Если Кэш = Неопределено Тогда
		// Кэш не был проинициализирован
		Кэш = Новый Структура;
	КонецЕсли;

	Если Кэш.Свойство(ИмяПараметра) Тогда
		Кэш.Вставить(ИмяПараметра, ЗначениеПараметра);
	КонецЕсли;
	
	#Если Клиент ИЛИ ВнешнееСоединение Тогда
		Если ОбновлятьВоВсехКэшах Тогда
			Попытка
				Кэш = ПараметрыСеанса.гз_ОбщиеЗначения.Получить();
			Исключение
				Кэш = Новый Структура;
			КонецПопытки;
			Кэш.Вставить(ИмяПараметра, ЗначениеПараметра);
			ПараметрыСеанса.гз_ОбщиеЗначения = Новый ХранилищеЗначения(Кэш);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры //мУстановитьЗначениеПеременной()

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция мФорматСумм(Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "", ЧРД = "", ВалютаПрописью = Ложь) Экспорт

	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
					?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
					?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ)+
					?(НЕ ЗначениеЗаполнено(ЧРД),"", ";" + "ЧРД=" + ЧРД);
					
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		Если ВалютаПрописью и НЕ СокрЛП(Валюта.ПараметрыПрописиНаРусском) = "" Тогда 
			СтрокаПараметров = СтрЗаменить(Валюта.ПараметрыПрописиНаРусском, ",", Символы.ПС);
			НовыеПараметрыПрописи = СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 1))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 2))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 3))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 4))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 5))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 6))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 7))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 8))+","+ 0;
	
	
			ЗначимаяЧасть = ЧислоПрописью(Цел(Сумма),"ru_RU; НП = Ложь; ДП = Ложь", НовыеПараметрыПрописи);
    		ЧисловаяЧасть = ЧислоПрописью(Цел(Сумма),"ru_RU; НП = Ложь; ДП = Ложь", ",,,,,,,,0");
            РезультирующаяСтрока = СтрЗаменить(ЗначимаяЧасть, ЧисловаяЧасть, РезультирующаяСтрока + " ");
		Иначе			
			РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
		КонецЕсли;	
	КонецЕсли;

	Возврат РезультирующаяСтрока;

КонецФункции // мФорматСумм()

// Процедура проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  ДокументОбъект             - объект проводимого документа, 
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура мПроверитьЗаполнениеШапкиДокумента(ДокументОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок) Экспорт

	ТипыПланыСчетов     = ПланыСчетов.ТипВсеСсылки();
	МетаданныеРеквизиты = ДокументОбъект.Метаданные().Реквизиты;

	Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

		Значение = ДокументОбъект[КлючЗначение.Ключ];
		ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();

		Если НЕ ЗначениеЗаполнено(Значение) Тогда // надо ругаться

			Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //стандартное ругательство
				СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
			Иначе
				СтрокаСообщения = КлючЗначение.Значение;
			КонецЕсли;

			мОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);

		ИначеЕсли ТипыПланыСчетов.СодержитТип(ТипЗнч(Значение)) тогда

			Если Значение.ЗапретитьИспользоватьВПроводках Тогда
				СтрокаСообщения = "Реквизит """ + СокрЛП(ПредставлениеРеквизита) + """ : счет " + СокрЛП(Значение)+" """ + Значение.Наименование + """ нельзя использовать в проводках.";
				мОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Если СтруктураОбязательныхПолей.Свойство("Организация") и СтруктураОбязательныхПолей.Свойство("ДоговорКонтрагента") тогда

		// Если в документе есть организация и договор - провести проверку на соответствие
		//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
		Организация = ДокументОбъект.Организация;
		ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;
		Если ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") тогда
			мПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, ДоговорКонтрагента.Организация, Отказ, Заголовок);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // мПроверитьЗаполнениеШапкиДокумента()

// Процедура проверяет правильность заполнения строк табличной части документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
//
// Параметры:
//  ДокументОбъект             - объект проводимого документа, 
//  ИмяТабличнойЧасти          - табличная часть документа,
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура мПроверитьЗаполнениеТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, 
                                            Отказ, Заголовок, ВыводитьНомераСтрокВСообщении = Истина) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	ТабличнаяЧасть      = ДокументОбъект[ИмяТабличнойЧасти];
	МетаданныеРеквизиты = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
		
	СтрокаНачалаСообщенияОбОшибке = "";
	
	// Цикл по строкам табличной части.
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл    
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
											""" табличной части """ + ПредставлениеТабличнойЧасти + """: ";
		// Цикл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			Если НЕ ЗначениеЗаполнено(Значение) Тогда // надо ругаться

				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //стандартное ругательство
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";

				Иначе
					СтрокаСообщения = КлючЗначение.Значение;

				КонецЕсли;

				мОшибкаПриПроведении(?(ВыводитьНомераСтрокВСообщении, СтрокаНачалаСообщенияОбОшибке, "")
										+ СтрокаСообщения, Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;		

	КонецЦикла;

КонецПроцедуры // мПроверитьЗаполнениеТабличнойЧасти()

// Функция формирует структуру, содержащую значения реквизитов шапки документа.
//
// Параметры: 
//  ДокументОбъект - объект документа для формирования структуры шапки, 
//
// Возвращаемое значение:
//  Сформированная структура.
//
Функция мСформироватьСтруктуруШапкиДокумента(ДокументОбъект) Экспорт
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	//Первоначальные данные о документе
	СтруктураШапкиДокумента = Новый Структура;
	СтруктураШапкиДокумента.Вставить("Ссылка", ДокументОбъект.Ссылка);
	СтруктураШапкиДокумента.Вставить("Дата",   ДокументОбъект.Дата);
	СтруктураШапкиДокумента.Вставить("Номер",  ДокументОбъект.Номер);

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	СтруктураШапкиДокумента.Вставить("ВидДокумента",  МетаданныеДокумента.Имя);
	СтруктураШапкиДокумента.Вставить("ПредставлениеВидаДокумента",  МетаданныеДокумента.Представление());
    
	Для каждого Реквизит из МетаданныеДокумента.Реквизиты Цикл
		СтруктураШапкиДокумента.Вставить(Реквизит.Имя, ДокументОбъект[Реквизит.Имя]);
		Если Реквизит.Имя = "Организация" Тогда
			СтруктураШапкиДокумента.Вставить("ГоловнаяОрганизация", мГоловнаяОрганизация(ДокументОбъект[Реквизит.Имя]));
		КонецЕсли;	
	КонецЦикла;

	//Отображение данных о валютах
	СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);	

	//Отображение обязательных данных о договоре
	Если СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента") Тогда

		Если ТипЗнч(СтруктураШапкиДокумента.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") тогда

			СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетов",     СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов);

		КонецЕсли;

	КонецЕсли;

	Возврат СтруктураШапкиДокумента;

КонецФункции // мСформироватьСтруктуруШапкиДокумента()

// Процедура формирует сообщение при ошибках проведения документов.
//
// Параметры: 
//  ТекстСообщения - Исходный текст, выводимого сообщения,
//  Отказ          - Флаг отказа в проведении документа,
//  Заголовок      - Заголовок начала серии сообщений об ошибках проведения (не обязательный)
//
Процедура мОшибкаПриПроведении(ТекстСообщения, Отказ, Заголовок="") Экспорт

	мСообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);

КонецПроцедуры // мОшибкаПриПроведении()

// Процедура добавляет в таблицу значений строки из другой таблицы значений и 
// в них значения колонок с совпадающими наименованиями.
//
// Параметры:
//  ТаблицаИсточник - таблица значений, откуда берутся значения.
//  ТаблицаПриемник - таблица значений, куда добавляются строки.
//
Процедура мЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник) Экспорт

	// Заполним значения в совпадающих колонках.
	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);

	КонецЦикла;
	
КонецПроцедуры // мЗагрузитьВТаблицуЗначений()

// Функция формирует структуру дерева значений, содержащего имена полей, которые
// нужно заполнить в запросе по шапке документа.
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Дерево значений.
//
Функция мСформироватьДеревоПолейЗапросаПоШапке()  Экспорт

	ДеревоПолейЗапросаПоШапке = Новый ДеревоЗначений;
	ОписаниеТиповСтрока       = мПолучитьОписаниеТиповСтроки(100);

	ДеревоПолейЗапросаПоШапке.Колонки.Добавить("Объект"   , ОписаниеТиповСтрока);
	ДеревоПолейЗапросаПоШапке.Колонки.Добавить("Поле"     , ОписаниеТиповСтрока);
	ДеревоПолейЗапросаПоШапке.Колонки.Добавить("Псевдоним", ОписаниеТиповСтрока);

	Возврат ДеревоПолейЗапросаПоШапке;

КонецФункции // мСформироватьДеревоПолейЗапросаПоШапке()

// Функция предназначена для получения пустого значения заданного типа:
//	примитивного, или ссылочного. Используется
//
// Параметры:
//	ЗаданныйТип   - тип, пустое значение которого нужно получить
//
Функция мПустоеЗначениеТипа(ЗаданныйТип) Экспорт

	Если ЗаданныйТип = Тип("Число") Тогда
		Возврат 0;

	ИначеЕсли ЗаданныйТип = Тип("Строка") Тогда
		Возврат "";

	ИначеЕсли ЗаданныйТип = Тип("Дата") Тогда
		Возврат '00010101000000';

	ИначеЕсли ЗаданныйТип = Тип("Булево") Тогда
		Возврат Ложь;

	Иначе
		Возврат Новый (ЗаданныйТип);

	КонецЕсли;

КонецФункции // мПустоеЗначениеТипа()

// Процедура проверяет, что организация в документе совпадает с организацией, указанной в договоре взаиморасчетов.
//  при несовпадении устанавливается флаг отказа в проведении.
//
// Параметры:
//  Организация			- ссылка на организацию, выбранную в документе,
//  ДоговорКонтрагента	- ссылка на договор, выбранный в документе,
//  ДоговорОрганизация	- ссылка на Организацию, выбранную в договоре,
//  Отказ				- флаг отказа в проведении.
//  Заголовок			- строка, заголовок сообщения об ошибке проведения.
//
Процедура мПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, 
																 ДоговорОрганизация, Отказ, Заголовок) Экспорт

	// Если не заполнен договор или организация, то не ругаемся
	Если ЗначениеЗаполнено(Организация) 
	   И ЗначениеЗаполнено(ДоговорКонтрагента)
	   И Организация <> ДоговорОрганизация Тогда

		мСообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);

	КонецЕсли;

КонецПроцедуры // мПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов()

// Функция возвращает головную организацию для заданной организации
// Если для организации реквизит ГоловнаяОрганизация не заполнен 
// это значит, что сама организация является головной
//
// Параметры
//  Организация – СправочникСсылка.Организации
//
// Возвращаемое значение:
//   СправочникСсылка.Организации
//
Функция мГоловнаяОрганизация(Организация) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Организации.Ссылка
	|		ИНАЧЕ Организации.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Возврат Выборка.ГоловнаяОрганизация;

	Иначе
		Возврат Организация;

	КонецЕсли;

КонецФункции // мГоловнаяОрганизация()

// Служебная функция, предназначенная для получения описания типов строки, заданной длины.
// 
// Параметры:
//  ДлинаСтроки - число, длина строки.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для строки указанной длины.
//
Функция мПолучитьОписаниеТиповСтроки(ДлинаСтроки) Экспорт

	Массив = Новый Массив; 
	Массив.Добавить(Тип("Строка"));

	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);

	Возврат Новый ОписаниеТипов(Массив, , КвалификаторСтроки);

КонецФункции // мПолучитьОписаниеТиповСтроки()

// Функция извлекает сведения об организации по списку, переданному в параметре.
// 
// Параметры:
//  Показатели     - Список значений. Содержит в виде представлений перечень 
//                   сведений, которые надо получить. В первом элемент списка
//                   
// Описание:
//  Функция умеет обрабатывать следующие мнемонические имена:
//  ФИОРук
//  РННРук
//  ФИОБух
//  РННБух
//
Функция мПолучитьСведенияОбОрганизации(Организация, ДатаЗначения, СписокПоказателей) Экспорт

	// Хранит сведения об организации
	Перем ОргСведения; // локальная переменная
	// Хранит значение
	Перем Значение; // локальная переменная

	// Структура, в которой будут возвращаться найденные значения
	ОргСведения = Новый Структура;
	
	ТекстЗапросаОтвЛица = "";
	ТекстЗапросаФИОФизЛиц = "";
	
	ТекстЗапросаОтвЛица = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктурнаяЕдиница,
	|	ОтветственноеЛицо,
	|	ФизическоеЛицо,
	|	Должность
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|			&ДатаЗначения,
	|			СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И ОтветственноеЛицо = &ОтветственноеЛицо) КАК ОтветственныеЛицаОрганизацийСрезПоследних";
	
	
	ТекстЗапросаФИОФизЛиц = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизЛицо,
	|	Фамилия,
	|	Имя,
	|	Отчество,
	|	НеСклонятьФамилию
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаЗначения, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних";

	
	Для каждого ЭлементСписка Из СписокПоказателей Цикл
		ИмяПоказателя = ЭлементСписка.Представление;
		Значение = Неопределено;

		Если Имяпоказателя = "ОКЭД" Тогда
			
			Значение = Организация.ОсновнойВидДеятельности.КодОКЭД;

		ИначеЕсли Имяпоказателя = "ПолноеНаименованиеОКЭД" Тогда
			
			Результат = Организация.ОсновнойВидДеятельности.ПолноеНаименование;
			Если НЕ ЗначениеЗаполнено(Результат) Тогда
				Результат = Организация.ОсновнойВидДеятельности.Наименование;
			КонецЕсли;
			Значение = Результат;

		ИначеЕсли ИмяПоказателя = "КодПоОКПО" Тогда
			
			Значение = Организация.КодПоОКПО;

		ИначеЕсли ИмяПоказателя = "АдрПочт" Тогда
			
			Данные = Новый Структура("Объект, Тип, Вид",Организация, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый);

			Результат = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);

			Если Результат <> Неопределено Тогда
				Значение = Результат.Представление;
			Иначе
				Значение = ",,,,,,,,,";
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ",,,,,,,,,";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НаимЮЛПол" Тогда
			
			Значение = Организация.НаименованиеПолное;
			
		ИначеЕсли ИмяПоказателя = "РННЮЛ" Тогда
			
			Значение = Организация.РНН;
			
		ИначеЕсли ИмяПоказателя = "ИИН_БИН" Тогда
			
			Если гз_ОбщегоНазначения.ПолучитьРежимРаботы() <> "БГУ" Тогда 
				Значение = Организация.ИдентификационныйНомер;
			Иначе 
				Значение = Организация.БИН;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрЮР" Тогда
			
			Данные = Новый Структура("Объект, Тип, Вид", Организация, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);

			Результат = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);

			Если Результат <> Неопределено Тогда
				Значение = Результат.Представление;
			Иначе
				Значение = ",,,,,,,,,";
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ",,,,,,,,,";
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "АдрФакт" Тогда
			
			Данные = Новый Структура("Объект, Тип, Вид", Организация, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);

			Результат = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);

			Если Результат <> Неопределено Тогда
				Значение = Результат.Представление;
			Иначе
				Значение = ",,,,,,,,,";
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ",,,,,,,,,";
			КонецЕсли;
	
		ИначеЕсли ИмяПоказателя = "ТелОрганизации" Тогда
			
			Данные = Новый Структура("Объект, Тип, Вид", Организация, Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);

			Результат = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);

			Если Результат <> Неопределено Тогда
				Значение = Результат.Представление;
			Иначе
				Значение = ",,,,,,,,,";
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ",,,,,,,,,";
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "ФИОРук" ИЛИ ИмяПоказателя = "ФИОРукКраткое" Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДатаЗначения", ДатаЗначения);
			Запрос.УстановитьПараметр("СтруктурнаяЕдиница",Организация);
			Запрос.УстановитьПараметр("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
			Запрос.Текст = ТекстЗапросаОтвЛица;
			ОтвЛица = Запрос.Выполнить().Выгрузить();
			
			Результат = ОтвЛица.Найти(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);

			Если Результат <> Неопределено Тогда
				
				ЗапросФИОФизЛиц = Новый Запрос;
				ЗапросФИОФизЛиц.УстановитьПараметр("ДатаЗначения", ДатаЗначения);
				ЗапросФИОФизЛиц.УстановитьПараметр("ФизЛицо", Результат.ФизическоеЛицо);
				ЗапросФИОФизЛиц.Текст = ТекстЗапросаФИОФизЛиц;
				
				ФИОФизЛиц = ЗапросФИОФизЛиц.Выполнить().Выгрузить();
				
				Если ФИОФизЛиц.Количество() <> 0 Тогда
					ФИОФизЛиц = ФИОФизЛиц[0];
					Если ИмяПоказателя = "ФИОРук" Тогда
						Значение = ФИОФизЛиц.Фамилия + ?(НЕ ПустаяСтрока(ФИОФизЛиц.Имя), " " + ФИОФизЛиц.Имя, "") + ?(НЕ ПустаяСтрока(ФИОФизЛиц.Отчество), " " + ФИОФизЛиц.Отчество, "");
					Иначе // Краткое
						Значение = ФИОФизЛиц.Фамилия + ?(НЕ ПустаяСтрока(ФИОФизЛиц.Имя), " " + Лев(ФИОФизЛиц.Имя, 1) + ".", "") + ?(НЕ ПустаяСтрока(ФИОФизЛиц.Отчество), " " + Лев(ФИОФизЛиц.Отчество, 1) + ".", "");	
					КонецЕсли;
				Иначе
					Значение = Результат.ФизическоеЛицо.Наименование;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "РННРук" Тогда

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДатаЗначения", ДатаЗначения);
			Запрос.УстановитьПараметр("СтруктурнаяЕдиница",Организация);
			Запрос.УстановитьПараметр("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
			Запрос.Текст = ТекстЗапросаОтвЛица;
			ОтвЛица = Запрос.Выполнить().Выгрузить();

			Результат = ОтвЛица.Найти(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);

			Если Результат <> Неопределено Тогда
				Значение = Результат.ФизическоеЛицо.РНН;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "ФИОБух" ИЛИ ИмяПоказателя = "ФИОБухКраткое" Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДатаЗначения", ДатаЗначения);
			Запрос.УстановитьПараметр("СтруктурнаяЕдиница",Организация);
			Запрос.УстановитьПараметр("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
			Запрос.Текст = ТекстЗапросаОтвЛица;
			ОтвЛица = Запрос.Выполнить().Выгрузить();

			Результат = ОтвЛица.Найти(Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);

			Если Результат <> Неопределено Тогда
				
				ЗапросФИОФизЛиц = Новый Запрос;
				ЗапросФИОФизЛиц.УстановитьПараметр("ДатаЗначения", ДатаЗначения);
				ЗапросФИОФизЛиц.УстановитьПараметр("ФизЛицо", Результат.ФизическоеЛицо);
				ЗапросФИОФизЛиц.Текст = ТекстЗапросаФИОФизЛиц;
				
				ФИОФизЛиц = ЗапросФИОФизЛиц.Выполнить().Выгрузить();
				
				Если ФИОФизЛиц.Количество() <> 0 Тогда
					ФИОФизЛиц = ФИОФизЛиц[0];
					Если ИмяПоказателя = "ФИОБух" Тогда
						Значение = ФИОФизЛиц.Фамилия + ?(НЕ ПустаяСтрока(ФИОФизЛиц.Имя), " " + ФИОФизЛиц.Имя, "") + ?(НЕ ПустаяСтрока(ФИОФизЛиц.Отчество), " " + ФИОФизЛиц.Отчество, "");
					Иначе // Краткое
						Значение = ФИОФизЛиц.Фамилия + ?(НЕ ПустаяСтрока(ФИОФизЛиц.Имя), " " + Лев(ФИОФизЛиц.Имя, 1) + ".", "") + ?(НЕ ПустаяСтрока(ФИОФизЛиц.Отчество), " " + Лев(ФИОФизЛиц.Отчество, 1) + ".", "");	
					КонецЕсли;
				Иначе
					Значение = Результат.ФизическоеЛицо.Наименование;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "РННБух" Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДатаЗначения", ДатаЗначения);
			Запрос.УстановитьПараметр("СтруктурнаяЕдиница",Организация);
			Запрос.УстановитьПараметр("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
			Запрос.Текст = ТекстЗапросаОтвЛица;
			ОтвЛица = Запрос.Выполнить().Выгрузить();

			Результат = ОтвЛица.Найти(Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);

			Если Результат <> Неопределено Тогда
				Значение = Результат.ФизическоеЛицо.РНН;
			КонецЕсли;


		Иначе
			Значение = Неопределено;
		КонецЕсли;

		ОргСведения.Вставить(ИмяПоказателя, Значение);

	КонецЦикла;

	Возврат ОргСведения;

КонецФункции // мПолучитьСведенияОбОрганизации()

//Функция возвращает информацию об ответственных лицах организации и их должностях 
//
Функция мОтветственныеЛицаОрганизаций(Организация, ДатаСреза, Исполнитель = Неопределено) Экспорт
    Если Не гз_ОбщегоНазначения.АвтономныйРежимРаботы() Тогда 
		Результат = Новый Структура("Руководитель, 
									|РуководительФИзЛицо,
									|РуководительДолжность, 
									|РуководительДолжностьСсылка,
									|ГлавныйБухгалтер, 
									|ГлавныйБухгалтерФИзЛицо,
									|ГлавныйБухгалтерДолжность, 
									|ГлавныйБухгалтерДолжностьСсылка,
									|ГлавныйБухгалтерДляПодписиБанковскихДокументов,
									|ГлавныйБухгалтерДляПодписиБанковскихДокументовДолжность,
									|УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтера,
									|УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтераДолжность,
									|УполномоченныйПодписыватьСчетаФактурыЗаРуководителя,
									|УполномоченныйПодписыватьСчетаФактурыЗаРуководителяДолжность,
									|Кассир, 
									|КассирФИзЛицо,								
									|КассирДолжность, 
									|КассирДолжностьСсылка,
									|Исполнитель, 
									|ИсполнительДолжность, 
									|ОтветственныйЗаРегистры,
									|ОтветственныйЗаРегистрыДолжность,
									|РуководительКадровойСлужбы,
									|РуководительКадровойСлужбыДолжность,
									|РуководительКадровойСлужбыДолжностьСсылка,
									|РуководительКадровойСлужбыФизЛицо");

		Если Организация <> Неопределено тогда

			ЗапросПоЛицам = Новый Запрос();
			ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
			ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
			ЗапросПоЛицам.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОтветственныеЛицаОрганизацииСрезПоследних.ОтветственноеЛицо,
			|	ОтветственныеЛицаОрганизацииСрезПоследних.Должность.Наименование КАК Должность,
			|	ОтветственныеЛицаОрганизацииСрезПоследних.Должность КАК ДолжностьСсылка,
			|   ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо КАК ФизЛицо,
			|	ВЫБОР 
			|		КОГДА (ФИОФизЛицСрезПоследних.ФизЛицо) ЕСТЬ NULL  
			|			ТОГДА ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо.Наименование 
			|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР 
			|													КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """" 
			|														ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + ""."" 
			|													ИНАЧЕ """" 
			|												КОНЕЦ + ВЫБОР 
			|															КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """" 
			|																ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + ""."" 
			|															ИНАЧЕ """" 
			|														КОНЕЦ 
			|	КОНЕЦ КАК ФИОПолное
			|ИЗ
			|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
			|					&ДатаСреза, 
			|					СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацииСрезПоследних
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
			|		ПО ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
			Выборка = ЗапросПоЛицам.Выполнить().Выбрать();

			Пока Выборка.Следующий() Цикл

				Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
					Результат.Руководитель            		= Выборка.ФИОПолное;
					Результат.РуководительФизЛицо     		= Выборка.ФизЛицо;
					Результат.РуководительДолжность   		= Выборка.Должность;
					Результат.РуководительДолжностьСсылка   = Выборка.ДолжностьСсылка;


				ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
					Результат.ГлавныйБухгалтер        			= Выборка.ФИОПолное;
					Результат.ГлавныйБухгалтерФизЛицо    		= Выборка.ФизЛицо;
					Результат.ГлавныйБухгалтерДолжность 		= Выборка.Должность;
					Результат.ГлавныйБухгалтерДолжностьСсылка   = Выборка.ДолжностьСсылка;

				ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтерДляПодписиБанковскихДокументов Тогда
					Результат.ГлавныйБухгалтерДляПодписиБанковскихДокументов		  = Выборка.ФИОПолное;
					Результат.ГлавныйБухгалтерДляПодписиБанковскихДокументовДолжность = Выборка.Должность;
					
				ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
					Результат.Кассир                  = Выборка.ФИОПолное;
					Результат.КассирФизЛицо 		  = Выборка.ФизЛицо;
					Результат.КассирДолжность         = Выборка.Должность;
					Результат.КассирДолжностьСсылка   = Выборка.ДолжностьСсылка;

				ИначеЕсли Метаданные.Перечисления.ОтветственныеЛицаОрганизаций.ЗначенияПеречисления.Найти("ОтветственныйЗаНалоговыеРегистры") <> Неопределено
							И Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры Тогда
					Результат.ОтветственныйЗаРегистры = Выборка.ФИОПолное;
					Результат.ОтветственныйЗаРегистрыДолжность = Выборка.Должность;
					
				ИначеЕсли Метаданные.Перечисления.ОтветственныеЛицаОрганизаций.ЗначенияПеречисления.Найти("РуководительКадровойСлужбы") <> Неопределено
							И Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы Тогда
					Результат.РуководительКадровойСлужбы 				= Выборка.ФИОПолное;
					Результат.РуководительКадровойСлужбыДолжность 		= Выборка.Должность;
					Результат.РуководительКадровойСлужбыДолжностьСсылка	= Выборка.ДолжностьСсылка;
					Результат.РуководительКадровойСлужбыФизЛицо			= Выборка.ФизЛицо;
					
				ИначеЕсли Метаданные.Перечисления.ОтветственныеЛицаОрганизаций.ЗначенияПеречисления.Найти("УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтера") <> Неопределено 
							И Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтера Тогда
					Результат.УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтера        	 = Выборка.ФИОПолное;
					Результат.УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтераДолжность = Выборка.Должность;
					
				ИначеЕсли Метаданные.Перечисления.ОтветственныеЛицаОрганизаций.ЗначенияПеречисления.Найти("УполномоченныйПодписыватьСчетаФактурыЗаРуководителя") <> Неопределено
							И Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.УполномоченныйПодписыватьСчетаФактурыЗаРуководителя Тогда
					Результат.УполномоченныйПодписыватьСчетаФактурыЗаРуководителя        	 = Выборка.ФИОПолное;
					Результат.УполномоченныйПодписыватьСчетаФактурыЗаРуководителяДолжность   = Выборка.Должность;
				КонецЕсли;

			КонецЦикла;

			Если Исполнитель <> Неопределено И Метаданные.РегистрыСведений.Найти("РаботникиОрганизаций") <> Неопределено тогда

				ЗапросПоИсполнителям = Новый Запрос();
				ЗапросПоИсполнителям.УстановитьПараметр("Организация",         Организация);
				ЗапросПоИсполнителям.УстановитьПараметр("ГоловнаяОрганизация",         мГоловнаяОрганизация(Организация));
				ЗапросПоИсполнителям.УстановитьПараметр("ДатаСреза",           ДатаСреза);
				ЗапросПоИсполнителям.УстановитьПараметр("Исполнитель",         Исполнитель);
				ЗапросПоИсполнителям.УстановитьПараметр("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
				ЗапросПоИсполнителям.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	РаботникиОрганизацииСрезПоследних.Должность.Наименование КАК Должность,
				|	ВЫБОР 
				|		КОГДА (ФИОФизЛицСрезПоследних.ФизЛицо) ЕСТЬ NULL  
				|			ТОГДА РаботникиОрганизацииСрезПоследних.Физлицо.Наименование 
				|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР 
				|													КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """" 
				|														ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + ""."" 
				|													ИНАЧЕ """" 
				|												КОНЕЦ + ВЫБОР 
				|															КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """" 
				|																ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + ""."" 
				|															ИНАЧЕ """" 
				|														КОНЕЦ 
				|	КОНЕЦ КАК ФИОПолное
				|ИЗ
				|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
				|					&ДатаСреза, 
				|					Организация = &ГоловнаяОрганизация 
				|					И ФизЛицо = &Исполнитель 
				|					И ВидЗанятости <> &ВнутреннееСовместительство) КАК РаботникиОрганизацииСрезПоследних
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
				|					&ДатаСреза, 
				|					ФизЛицо = &Исполнитель) КАК ФИОФизЛицСрезПоследних
				|		ПО РаботникиОрганизацииСрезПоследних.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
				|
				|ГДЕ
				|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.Владелец = &Организация
				|УПОРЯДОЧИТЬ ПО
				|	РаботникиОрганизацииСрезПоследних.Период УБЫВ
				|";
				ВыборкаИсполнителей = ЗапросПоИсполнителям.Выполнить().Выбрать();

				Если ВыборкаИсполнителей.Следующий() тогда
					Результат.ИсполнительДолжность = ВыборкаИсполнителей.Должность;
					Результат.Исполнитель          = ВыборкаИсполнителей.ФиоПолное;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
		
	Иначе 
		Результат = Новый Структура("Руководитель, 
									|РуководительФИзЛицо,
									|РуководительДолжность, 
									|РуководительДолжностьСсылка,
									|ГлавныйБухгалтер, 
									|ГлавныйБухгалтерФИзЛицо,
									|ГлавныйБухгалтерДолжность, 
									|ГлавныйБухгалтерДолжностьСсылка,
									|ГлавныйБухгалтерДляПодписиБанковскихДокументов,
									|ГлавныйБухгалтерДляПодписиБанковскихДокументовДолжность,
									|УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтера,
									|УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтераДолжность,
									|УполномоченныйПодписыватьСчетаФактурыЗаРуководителя,
									|УполномоченныйПодписыватьСчетаФактурыЗаРуководителяДолжность,
									|Кассир, 
									|КассирФИзЛицо,								
									|КассирДолжность, 
									|КассирДолжностьСсылка,
									|Исполнитель, 
									|ИсполнительДолжность, 
									|ОтветственныйЗаРегистры,
									|ОтветственныйЗаРегистрыДолжность,
									|РуководительКадровойСлужбы,
									|РуководительКадровойСлужбыДолжность,
									|РуководительКадровойСлужбыДолжностьСсылка,
									|РуководительКадровойСлужбыФизЛицо");
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // мОтветственныеЛицаОрганизации()

// Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация, контрагент или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и отчества.
//  БанковскийСчет - Банковский счет, если счет не основной.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция мСведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода = '20200101', ДляФизЛицаТолькоИнициалы = Истина, БанковскийСчет = Неопределено) Экспорт

	Сведения = Новый Структура("Представление, 
								|ПолноеНаименование, 
								|КодПоОКПО, 
								|РНН, 
								|БИН_ИИН,
								|КБЕ,  
								|Телефоны, 
								|ЮридическийАдрес, 
								|БИК, 
								|КоррСчет, 
								|НомерСчета, 
								|ДатаСвидетельстваПоНДС,
								|НомерСвидетельстваПоНДС,
								|СерияСвидетельстваПоНДС,
								|СвидетельствоПоНДС");
	Запрос   = Новый Запрос;
	Данные   = Неопределено;

	Если ЮрФизЛицо = Неопределено ИЛИ ЮрФИзЛицо = NULL Тогда
		Возврат Сведения;
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("Строка") Тогда
		Сведения.Вставить("Представление",      ЮрФизЛицо);
		Сведения.Вставить("ПолноеНаименование", ЮрФизЛицо);
		
		Возврат Сведения;
	КонецЕсли;

	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		ИмяСправочника = "Организации";
		Если гз_ОбщегоНазначения.ПолучитьРежимРаботы() = "БГУ" Тогда 
			ИмяРеквизитаБИН_ИИН = "БИН";
		Иначе 
			ИмяРеквизитаБИН_ИИН = "ИдентификационныйНомер";
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяСправочника = "Контрагенты";
		Если гз_ОбщегоНазначения.ПолучитьРежимРаботы() = "БГУ" Тогда 
			ИмяРеквизитаБИН_ИИН = "БИН";
		Иначе 
			ИмяРеквизитаБИН_ИИН = "ИдентификационныйКодЛичности";
		КонецЕсли;
	Иначе
		Возврат Сведения;
	КонецЕсли;

	МетаданныеСправочника = Метаданные.Справочники[ИмяСправочника];

	Запрос.УстановитьПараметр("ПарЮрФизЛицо", ЮрФизЛицо);

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Представление           						КАК Наименование,
		|	ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(250))    КАК ПолноеНаименование,
		|	Организации.РНН                     						КАК РНН,
		|	Организации." + ИмяРеквизитаБИН_ИИН + "                     КАК БИН_ИИН "+ ?(гз_ОбщегоНазначения.ПолучитьРежимРаботы()="БК" ИЛИ гз_ОбщегоНазначения.ПолучитьРежимРаботы()="БГП" ИЛИ гз_ОбщегоНазначения.ПолучитьРежимРаботы()="БУГП","
		|,
		|	Организации.КБЕ                     						КАК КБЕ,
		|	Организации.КодПоОКПО               						КАК КодПоОКПО ","");
		Если МетаданныеСправочника.Реквизиты.Найти("ДатаСвидетельстваПоНДС") <> Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "
			|	,
			|	Организации.ДатаСвидетельстваПоНДС  КАК ДатаСвидетельстваПоНДС,
			|	Организации.НомерСвидетельстваПоНДС КАК НомерСвидетельстваПоНДС,
	        |	Организации.СерияСвидетельстваПоНДС КАК СерияСвидетельстваПоНДС";
        КонецЕсли;
        Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК Организации
		|
		|ГДЕ
		|	Организации.Ссылка       = &ПарЮрФизЛицо";

	РезультатЗапроса = Запрос.Выполнить();
	Данные = РезультатЗапроса.Выбрать();
	Данные.Следующий();

	Сведения.Вставить("ПолноеНаименование", СокрЛП(Данные.ПолноеНаименование));

	Если Данные <> Неопределено Тогда
		Сведения.Вставить("Представление",    СокрЛП(Данные.Наименование));
		Сведения.Вставить("РНН",              Данные.РНН);
		Сведения.Вставить("БИН_ИИН",          Данные.БИН_ИИН);
		Если гз_ОбщегоНазначения.ПолучитьРежимРаботы()="БК" ИЛИ гз_ОбщегоНазначения.ПолучитьРежимРаботы()="БГП" ИЛИ гз_ОбщегоНазначения.ПолучитьРежимРаботы()="БУГП" Тогда 
			Сведения.Вставить("КБЕ",              Данные.КБЕ);
			Сведения.Вставить("КодПоОКПО", 		  Данные.КодПоОКПО);
		КонецЕсли;
		Если РезультатЗапроса.Колонки.Найти("ДатаСвидетельстваПоНДС") <> Неопределено Тогда
			Сведения.Вставить("ДатаСвидетельстваПоНДС", Данные.ДатаСвидетельстваПоНДС);
			Сведения.Вставить("НомерСвидетельстваПоНДС", Данные.НомерСвидетельстваПоНДС);
			Сведения.Вставить("СерияСвидетельстваПоНДС", Данные.СерияСвидетельстваПоНДС);
	        Сведения.Вставить("СвидетельствоПоНДС", " серия " + Данные.СерияСвидетельстваПоНДС + ",  № " + Данные.НомерСвидетельстваПоНДС 
													 + ", от " + Формат(Данные.ДатаСвидетельстваПоНДС,"ДФ=dd.MM.yyyy"));
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
			Сведения.ПолноеНаименование = Сведения.Представление;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Сведения;

КонецФункции // мСведенияОЮрФизЛице()

// Функция получает из полного номера версии конфигурации номер релиза без номера сборки.
//
// Параметры
//  НомерВерсии  – Строка – полный номер версии
//
// Возвращаемое значение:
//  Строка – номер релиза без номера сборки
//
Функция мПолучитьНомерРелиза(НомерВерсии) Экспорт

	КоличествоТочек = 0;
	ДлинаОписанияНомераРелиза = 0;

	Для х = 1 По СтрДлина(НомерВерсии) Цикл

		Если Сред(НомерВерсии, х, 1) = "." Тогда
			КоличествоТочек = КоличествоТочек + 1;
		КонецЕсли;

		Если КоличествоТочек = 3 Тогда
			ДлинаОписанияНомераРелиза = х - 1;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат Лев(НомерВерсии, ДлинаОписанияНомераРелиза);

КонецФункции // мПолучитьНомерРелиза()

// Процедура выполняет движение по регистру.
//
// Параметры:
//  НаборДвижений   - набор движений регистра. 
//
Процедура мВыполнитьДвижениеПоРегистру(НаборДвижений, ВидДвижения = Неопределено,
	                                  ПустыеКолонкиСоставногоТипа = Неопределено, ЗаполнитьПериод = истина) Экспорт

	ТаблицаДвижений = НаборДвижений.мТаблицаДвижений;
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустыеКолонкиСоставногоТипа = Неопределено Тогда
		ПустыеКолонкиСоставногоТипа = Новый Структура;
	КонецЕсли;
	
	//
	КолонкиТаблицы = ТаблицаДвижений.Колонки;
	
	//
	МетаРег = НаборДвижений.Метаданные();
	ИзмеренияСостТипа = Новый Структура;
	ИзмеренияСостТипаСтр = "";
	Для Каждого МетаИзм Из МетаРег.Измерения Цикл
		Если (МетаИзм.Тип.Типы().Количество() > 1)
		   И НЕ (ПустыеКолонкиСоставногоТипа.Свойство(МетаИзм.Имя)) Тогда
			Если не КолонкиТаблицы.Найти(МетаИзм.Имя)=Неопределено Тогда
				ИзмеренияСостТипа.Вставить(МетаИзм.Имя);
				ИзмеренияСостТипаСтр = ИзмеренияСостТипаСтр + ", " + МетаИзм.Имя;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	Для Каждого МетаРек Из МетаРег.Реквизиты Цикл
		Если (МетаРек.Тип.Типы().Количество() > 1)
		   И НЕ (ПустыеКолонкиСоставногоТипа.Свойство(МетаРек.Имя)) Тогда
			Если не КолонкиТаблицы.Найти(МетаРек.Имя)=Неопределено Тогда
				ИзмеренияСостТипа.Вставить(МетаРек.Имя);
				ИзмеренияСостТипаСтр = ИзмеренияСостТипаСтр + ", " + МетаРек.Имя;
			КонецЕсли; 
			
		КонецЕсли;
	КонецЦикла;
	Для Каждого МетаРес Из МетаРег.Ресурсы Цикл
		Если (МетаРес.Тип.Типы().Количество() > 1)
		   И НЕ (ПустыеКолонкиСоставногоТипа.Свойство(МетаРес.Имя)) Тогда
			Если не КолонкиТаблицы.Найти(МетаРес.Имя)=Неопределено Тогда
				ИзмеренияСостТипа.Вставить(МетаРес.Имя);
				ИзмеренияСостТипаСтр = ИзмеренияСостТипаСтр + ", " + МетаРес.Имя;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	Если ИзмеренияСостТипаСтр <> "" Тогда
		ИзмеренияСостТипаСтр = Сред(ИзмеренияСостТипаСтр, 3);
	КонецЕсли;
	
	ТипЧисло = Тип("Число");
	ТипСтрока = Тип("Строка");
	ТипДата = Тип("Дата");
	
	ЕстьПериод = НЕ ТаблицаДвижений.Колонки.Найти("Период") = Неопределено;

	Для Каждого СтрокаДвижения ИЗ ТаблицаДвижений Цикл
		Движение = НаборДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения, ,ИзмеренияСостТипаСтр);
		
		Если ВидДвижения <> Неопределено Тогда
			Движение.ВидДвижения = ВидДвижения;
		КонецЕсли;
		
		Если НЕ ЗаполнитьПериод И ЕстьПериод И НЕ СтрокаДвижения.Период = '00010101000000' Тогда
			Движение.Период = СтрокаДвижения.Период;
		Иначе
			Движение.Период = НаборДвижений.мПериод;
		КонецЕсли; 
		Движение.Активность = Истина;
		
		Для Каждого КлючИЗначение ИЗ ИзмеренияСостТипа Цикл
			ЗначениеВКолонке = СтрокаДвижения[КлючИЗначение.Ключ];
			
			Если ЗначениеВКолонке = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТипЗначенияВКолонке = ТипЗнч(ЗначениеВКолонке);
			
			Если ТипЗначенияВКолонке = ТипЧисло Тогда
				Если ЗначениеВКолонке = 0 Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ТипЗначенияВКолонке = ТипСтрока Тогда
				Если ЗначениеВКолонке = "" Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ТипЗначенияВКолонке = ТипДата Тогда
				Если ЗначениеВКолонке = '00010101000000' Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЗначениеВКолонке.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			Движение[КлючИЗначение.Ключ] = ЗначениеВКолонке;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры // мВыполнитьДвижениеПоРегистру()

// Функция возвращает имя табличной части, к которой принадлежит переданная строка
//
// Параметры
//  СтрокаТабличнойЧасти - ссылка на строку табличной части
//
// Возвращаемое значение:
//   Строка - имя табличной части, как оно задано в конфигураторе
//
Функция мПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти) Экспорт

	Возврат Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Имя;

КонецФункции // мПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку()

// Функция из исходной строки формирует строку для поиска данных в запросе
//
Функция мСформироватьСтрокуДляПоискаВЗапросе(Знач СтрокаПоиска) Экспорт
	
	ИтоговаяСтрокаДляПоиска = СтрокаПоиска;
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "~", "~~");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "%", "~%");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "_", "~_");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "[", "~[");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "-", "~-");

	Возврат ИтоговаяСтрокаДляПоиска;
	
КонецФункции //мСформироватьСтрокуДляПоискаВЗапросе()

// Процедура предназначена для преобразования номера документа.
//
// Параметры:
//  Документ - (ДокументСсылка), документ, чей номер надо получить для печати.
//
// Возвращаемое значение.
//  Строка - номер документа для печати
//
Функция мПолучитьНомерНаПечать(Документ, глСписокПрефиксовУзлов = Неопределено, ПредставлениеНомераДокумента = Неопределено) Экспорт

	Если Документ = Неопределено Тогда 
		Возврат 0;
	КонецЕсли;

	Номер = СокрЛП(Документ.Номер);
	
	Если ПредставлениеНомераДокумента = Неопределено Тогда
		ПредставлениеНомераДокумента = Константы.ПредставлениеНомераДокументов.Получить();
	КонецЕсли;	
	
	Если (ПредставлениеНомераДокумента <> Перечисления.ВидыПредставленийНомеровДокументов.ПустаяСсылка()) И (ПредставлениеНомераДокумента <> 
		 Перечисления.ВидыПредставленийНомеровДокументов.ПрефиксИНули) Тогда
		 
		Попытка
			ПрефиксОрганизации = СокрЛП(Документ.Организация.Префикс); 
		Исключение
			Попытка
				ПрефиксОрганизации = СокрЛП(Документ.ДокументОснование.Организация.Префикс); 
			Исключение
				ПрефиксОрганизации = "";
			КонецПопытки;
		КонецПопытки;
		СписокПрефиксовУзлов = ?(глСписокПрефиксовУзлов<>Неопределено, глСписокПрефиксовУзлов, Новый Структура);
		ДополнительныйПрефикс = мПолучитьДополнительныйПрефиксНомераДокумента(Документ);
		
		ПолныйПрефиксНайден = Ложь;
		
		//в номере может быть префикс любого узла
		Для Каждого ЭлементСпискаПрефиксовУзлов Из СписокПрефиксовУзлов Цикл
			ПрефиксУзла = СокрЛП(ЭлементСпискаПрефиксовУзлов.Значение);
			ПолныйПрефикс = ПрефиксУзла + ПрефиксОрганизации + ДополнительныйПрефикс;
			ПозицияПолногоПрефикса = Найти(Номер, ПолныйПрефикс);
			Если ПозицияПолногоПрефикса = 1 Тогда
				Номер = Прав(Номер, СтрДлина(Номер) - СтрДлина(ПолныйПрефикс));
				ПолныйПрефиксНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		
		//так же возможно в номере нет префикса узла
		Если Не ПолныйПрефиксНайден Тогда
			ПолныйПрефикс = ПрефиксОрганизации + ДополнительныйПрефикс;
			Если Не ПустаяСтрока(ПолныйПрефикс) Тогда 
				ПозицияПолногоПрефикса = Найти(Номер, ПолныйПрефикс);
				Если ПозицияПолногоПрефикса = 1 Тогда
					Номер = Прав(Номер, СтрДлина(Номер) - СтрДлина(ПолныйПрефикс));
					ПолныйПрефиксНайден = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//возможно в номере есть только префикс организации
		Если Не ПолныйПрефиксНайден Тогда
			ПолныйПрефикс = ПрефиксОрганизации;
			Если Не ПустаяСтрока(ПолныйПрефикс) Тогда 
				ПозицияПолногоПрефикса = Найти(Номер, ПолныйПрефикс);
				Если ПозицияПолногоПрефикса = 1 Тогда
					Номер = Прав(Номер, СтрДлина(Номер) - СтрДлина(ПолныйПрефикс));
					ПолныйПрефиксНайден = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Пока Лев(Номер, 1) = "0" Цикл
			Номер = Прав(Номер, СтрДлина(Номер) - 1);
		КонецЦикла;
		
		Если ПредставлениеНомераДокумента = Перечисления.ВидыПредставленийНомеровДокументов.ПрефиксБезНулей Тогда
			Если ПолныйПрефиксНайден Тогда
				Номер = ПолныйПрефикс + Номер;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Номер;
	
КонецФункции // мПолучитьНомерНаПечать()

// Функция формирует список обособленных структурных подразделений организации
//
Функция мПолучитьСписокОбособленныхПодразделенийОрганизации(Организация) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация");
	Запрос.УстановитьПараметр("Организация", Организация);

	СписокОрганизаций = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;

КонецФункции // мПолучитьСписокОбособленныхПодразделенийОрганизации()

// Функция "расщепляет" строку на подстроки, используя заданный 
//		разделитель. Разделитель может иметь любую длину. 
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//
//	Параметры: 
//		Стр - 			строка, которую необходимо разложить на подстроки. 
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция мРазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт

	МассивСтрок = Новый Массив();

	Если Разделитель = " " Тогда

		Стр = СокрЛП(Стр);

		Пока 1 = 1 Цикл

			Поз = Найти(Стр,Разделитель);

			Если Поз = 0 Тогда

				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;

			КонецЕсли;

			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));

		КонецЦикла;

	Иначе

		ДлинаРазделителя = СтрДлина(Разделитель);

		Пока 1 = 1 Цикл

			Поз = Найти(Стр,Разделитель);
			Если Поз = 0 Тогда

				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;

			КонецЕсли;

			МассивСтрок.Добавить(Лев(Стр,Поз-1));

			Стр = Сред(Стр,Поз + ДлинаРазделителя);

		КонецЦикла;

	КонецЕсли;

КонецФункции // РазложитьСтрокуВМассивПодстрок()

// Функция проверяет наличие в строке только цифр
//
// Параметры
//  СтрокаПроверки - Строка для проверки только цифр
//
// Возвращаемое значение:
//   Булево
//
Функция мТолькоЦифрыВСтроке(Знач СтрокаПроверки, УчитыватьЛидирующиеНули = Истина, УчитыватьПробелы = Истина) Экспорт
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если НЕ УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
	КонецЕсли;
	
	Если НЕ УчитыватьЛидирующиеНули Тогда
		НомерПервойЦифры = 0;
		Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
			НомерПервойЦифры = НомерПервойЦифры + 1;
			КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
			Если КодСимвола <> 48 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СтрокаПроверки = Сред(СтрокаПроверки, НомерПервойЦифры);
	КонецЕсли;
	
	СтрокаПроверки = СокрЛП(СтрокаПроверки);
	Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла; 

	Возврат Истина;
	
КонецФункции //мТолькоЦифрыВСтроке()

// Функция подбирает массив номеров месяцев, соответствующих переданной строке
// например, для строки "ма" это будут 3 и 5, для "а" - 4 и 8
// используется в ПодобратьДатуПоТексту
//
Функция мСписокМесяцевПоСтроке(Текст) Экспорт
	
	СписокМесяцев = Новый СписокЗначений;
	Месяцы = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции // мСписокМесяцевПоСтроке()

// Функция формирует текст сообщения на линию техподдержки
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Текст сообщения
//
Функция мПолучитьТекстСообщенияВОтделТехническойПоддержки() Экспорт

	ТекстВозврата = "";
	
	ТекстВозврата = ТекстВозврата + Символы.ПС;
	ТекстВозврата = ТекстВозврата + Символы.ПС;
	ТекстВозврата = ТекстВозврата + Символы.ПС + "============ Сведения об использовании ПП 1С:Предприятие 8 ============";
	
	ТаблицаДанных = Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Получить().Получить();
	
	// Сформируем обязательный информационный раздел
	
	СистемИнфо = Новый СистемнаяИнформация;
	
	ТекстВозврата = ТекстВозврата + Символы.ПС;
	ТекстВозврата = ТекстВозврата + Символы.ПС + "1. ДАННЫЕ ТЕКУЩЕГО КОМПЬЮТЕРА И КОНФИГУРАЦИИ";
	ТекстВозврата = ТекстВозврата + Символы.ПС + "Версия 1С:Предприятия 8" + СистемИнфо.ВерсияПриложения;
	ТекстВозврата = ТекстВозврата + Символы.ПС + "Конфигурация: "              + Метаданные.Синоним;
	ТекстВозврата = ТекстВозврата + Символы.ПС + "Поставщик: "                 + Метаданные.Поставщик;
	ТекстВозврата = ТекстВозврата + Символы.ПС + "Операционная система: "      + СистемИнфо.ВерсияОС;
	ТекстВозврата = ТекстВозврата + Символы.ПС + "Оперативная память (МБ): "   + СистемИнфо.ОперативнаяПамять;
	ТекстВозврата = ТекстВозврата + Символы.ПС + "Процессор: "                 + СистемИнфо.Процессор;

	НомерСтрокиРаздела = 1;
	
	Если ТипЗнч(ТаблицаДанных) = Тип("ТаблицаЗначений") Тогда
		
		Для каждого СтрокаТаблицыРаздела Из ТаблицаДанных Цикл
			
			СтрокаРаздела = "";
			
			Если СтрокаТаблицыРаздела.ИмяРаздела = "ПараметрыОтправкиЭлектронногоСообщения" Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого ЭлементЗначения Из СтрокаТаблицыРаздела.ДанныеРаздела Цикл
				Если НЕ ЗначениеЗаполнено(ЭлементЗначения.Значение[1]) Тогда
					Продолжить;
				КонецЕсли; 
				СтрокаРаздела = СтрокаРаздела + Символы.ПС + ЭлементЗначения.Значение[0] + " " + ?(ТипЗнч(ЭлементЗначения.Значение[1]) = Тип("Булево"), ?(ЭлементЗначения.Значение[1], "Да", "Нет"), ЭлементЗначения.Значение[1]);
			КонецЦикла; 
			
			Если НЕ ЗначениеЗаполнено(СтрокаРаздела) Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСтрокиРаздела = НомерСтрокиРаздела + 1;
			
			СтрокаРаздела = Строка(НомерСтрокиРаздела) + ". " + ВРег(СтрокаТаблицыРаздела.ПредставлениеРаздела) + СтрокаРаздела;
			
			ТекстВозврата = ТекстВозврата + Символы.ПС;
			ТекстВозврата = ТекстВозврата + Символы.ПС + СтрокаРаздела;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТекстВозврата;

КонецФункции // мПолучитьТекстСообщенияВОтделТехническойПоддержки()

// Функция возвращает значение дополнительного префикса номера документа
//
// Параметры:
//  Документ - (ДокументОбъект), документ, чей дополнительный префикс надо получить для печати.
//
// Возвращаемое значение.
//  Строка - дополнительный префикс документа для печати
//
Функция мПолучитьДополнительныйПрефиксНомераДокумента(Документ)
	
	Если гз_ОбщегоНазначения.ПолучитьРежимРаботы() = "БК" ИЛИ гз_ОбщегоНазначения.ПолучитьРежимРаботы() = "БГП" ИЛИ гз_ОбщегоНазначения.ПолучитьРежимРаботы()="БУГП" Тогда 
		МассивТиповПодпискаКассы = Метаданные.ПодпискиНаСобытия.ПриУстановкеНовогоНомераДокументаПрефиксКассы.Источник.Типы();
		
		Если МассивТиповПодпискаКассы.Найти(Тип("ДокументОбъект." + Документ.Метаданные().Имя)) <> Неопределено Тогда 
			Если ЗначениеЗаполнено(Документ.Касса) Тогда 
				Возврат Документ.Касса.Префикс;
			Иначе 
				Возврат "";
			КонецЕсли;
		КонецЕсли;
		
		МассивТиповПодпискаСклады = Метаданные.ПодпискиНаСобытия.ПриУстановкеНовогоНомераДокументаПрефиксСклады.Источник.Типы();
		
		Если МассивТиповПодпискаСклады.Найти(Тип("ДокументОбъект." + Документ.Метаданные().Имя)) <> Неопределено Тогда 
			
			МетаданныеДокумента = Документ.Метаданные();
			
			Если мЕстьРеквизитДокумента("Склад", МетаданныеДокумента) Тогда 
				Если ЗначениеЗаполнено(Документ.Склад) Тогда 
					Возврат Документ.Склад.Префикс;
				Иначе 
					Возврат "";
				КонецЕсли;
			ИначеЕсли мЕстьРеквизитДокумента("СкладОтправитель", МетаданныеДокумента) Тогда 
				Если ЗначениеЗаполнено(Документ.СкладОтправитель) Тогда 
					Возврат Документ.СкладОтправитель.Префикс;
				Иначе 
					Возврат "";
				КонецЕсли;
			ИначеЕсли мЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента) Тогда 
				Если ЗначениеЗаполнено(Документ.СкладОрдер) Тогда
					Если ТипЗнч(Документ.СкладОрдер) = Тип("СправочникСсылка.Склады") Тогда 
			 			Возврат Документ.СкладОрдер.Префикс;
					Иначе 
						Возврат Документ.СкладОрдер.Склад.Префикс;
					КонецЕсли;
				Иначе 
					Возврат "";
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;
		
		МассивТиповПодпискаСчета = Метаданные.ПодпискиНаСобытия.ПриУстановкеНовогоНомераДокументаПрефиксБанковскиеСчета.Источник.Типы();
		
		Если МассивТиповПодпискаСчета.Найти(Тип("ДокументОбъект." + Документ.Метаданные().Имя)) <> Неопределено Тогда 
			Если ЗначениеЗаполнено(Документ.СчетОрганизации) Тогда 
				Возврат Документ.СчетОрганизации.Префикс;
			Иначе 
				Возврат "";
			КонецЕсли;
		КонецЕсли;
	
		Возврат "";
		
	Иначе 
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции //мПолучитьДополнительныйПрефиксНомераДокумента()

// Функция преобразует десятичное число в шестнадцатиричное
// 
// Параметры:
//	Источник - число (десятичное) от 0 до 255
//
// Возвращаемое значение:
//	Строка - десятичное число
//
Функция мДесятичноеВШестнадцатиричное(Источник) Экспорт
	
	ШестнадцатиричныеСимволы = "0123456789ABCDEF";
	
	Если Источник < 0 Тогда
		Возврат "00";
	КонецЕсли;
	Если Источник > 255 Тогда
		Возврат "FF";
	КонецЕсли;
	
	ПервыйСимвол	= Цел(Источник / 16) + 1;
	ВторойСимвол	= Источник % 16;
	
	Возврат Сред(ШестнадцатиричныеСимволы, ПервыйСимвол, 1) + Сред(ШестнадцатиричныеСимволы, ВторойСимвол, 1);
	
КонецФункции // мДесятичноеВШестнадцатиричное()

// Функция возвращает основной договор контрагента, если он доступен для чтения
//
Функция мПолучитьОсновнойДоговорКонтрагента(Контрагент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК ДоступныйДоговорКонтрагента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.Ссылка = &Контрагент)
	|			И Контрагенты.ОсновнойДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА Контрагенты.ОсновнойДоговорКонтрагента ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДоступныйДоговорКонтрагента;		
	Иначе
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();		
	КонецЕсли;	
		
КонецФункции // мПолучитьОсновнойДоговорКонтрагента()

// Функция проверяет соответствие РНН требованиям
// Параметры:
//		РНН - строка - проверяемый регистрационный номер налогоплательщика
//		
Функция мРННСоответствуетТребованиям(Знач РНН) Экспорт

	РНН		 = СокрЛП(РНН);
	ДлинаРНН = СтрДлина(РНН);
	
	//Проверка на длину РНН
	Если ДлинаРНН < 12 Тогда
		Сообщить("Количество знаков в РНН меньше 12!");
		Возврат Ложь;
	КонецЕсли;
	
	// В РНН имеются символы, отличные от цифр (0..9)
	РННБезНулей = СтрЗаменить(РНН,"0","1");
	Попытка
	    ЧислоРНН = Число(РННБезНулей);
	Исключение
		Сообщить("РНН содержит символы отличные от цифр!");
		Возврат Ложь;
	КонецПопытки; 
		
	// Проверка на одинаковость всех цифр
	Если СтрЧислоВхождений(РНН, Лев(РНН, 1)) = 12 Тогда 
		Сообщить("Цифра " + Лев(РНН, 1) + " повторяется 12 раз!");
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка РНН на корректность   
	ПодстрокаРНН11 	 = Лев(РНН, 11);	// копируем первые 11 символов
	КонтрольнаяСумма = Прав(РНН, 1);	// контрольная сумма РНН
	
	Для СчетчикЦикла1 = 1 По 10 Цикл
		
		СуммаПроизведений = 0;
		Вес = СчетчикЦикла1 - 1;
		
		// Накапливаем сумму произведений
		Для СчетчикЦикла2 = 1 По 11 Цикл
			
			Вес = Вес + 1;
			
			Если Вес = 11 Тогда 
				Вес = 1; //сбросили вес на единицу
			КонецЕсли;
			
			СуммаПроизведений =  СуммаПроизведений + Вес * Число(Сред(ПодстрокаРНН11, СчетчикЦикла2, 1));
			
		КонецЦикла;
		
		//Рассчитываем коэффициент для проверки РНН 
		Коэффициент = СуммаПроизведений - Цел((СуммаПроизведений) / 11) * 11;
		
		Если Коэффициент < 10 Тогда 
			
			Если Коэффициент <> Число(КонтрольнаяСумма) Тогда // Проверка равенства полученного коэффициента Контрольной сумме
				Сообщить("Введенный РНН не корректен!");
				Возврат Ложь;
			КонецЕсли; 
			
			Прервать;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // мРННСоответствуетТребованиям()

// Проверяет соответствие СИК требованиям
// Параметры:
//		СИК - строка - проверяемый социальный индивидуальный код
//		
Функция мСИКСоответствуетТребованиям(Знач СИК) Экспорт

	СИК		 = СокрЛП(СИК);
	ДлинаСИК = СтрДлина(СИК);
	
	//Проверка на длину СИК
	Если ДлинаСИК < 16 Тогда
		Сообщить("Количество знаков в СИК меньше 16!");
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка на одинаковость всех цифр
	Если СтрЧислоВхождений(СИК, Лев(СИК, 1)) = 16 Тогда 
		Сообщить("Цифра " + Лев(СИК, 1) + " повторяется 16 раз!");
		Возврат Ложь;
	КонецЕсли;

	// Проверка на наличие символов, отличных от букв латинского алфавита
	Для Н = 1 По ДлинаСИК Цикл
		Если Найти("ABCDEFGHIJKLMNPQRSTUVWXYZ0123456789", Сред(СИК, Н, 1)) = 0 Тогда
			Сообщить("Недопустимый символ " + Сред(СИК, Н, 1) + " (позиция " + Н + ")");
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

// Функция формирует список головных организаций предприятия
//
Функция мПолучитьСписокГоловныхОрганизаций() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &ПустаяОрганизация
	|	ИЛИ Организации.ГоловнаяОрганизация = Организации.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование");

	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	СписокОрганизаций = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;

КонецФункции // мПолучитьСписокГоловныхОрганизаций()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВСПОМОГАТЕЛЬНОГО НАЗНАЧЕНИЯ

// Функция формирует бухгалтерские документы (поступления)
//
Функция ОформитьПоступлениеБУ(мВалютаРегламентированногоУчета,ВедениеУчетаЗакупокВРазрезеСкладов,Документ,Вид=Неопределено,Склад = Неопределено) Экспорт
	
	БК = ?(гз_ОбщегоНазначения.ПолучитьРежимРаботы()="БК",Истина,Ложь);
	БГП = ?(гз_ОбщегоНазначения.ПолучитьРежимРаботы()="БГП",Истина,Ложь);
	БГУ = ?(гз_ОбщегоНазначения.ПолучитьРежимРаботы()="БГУ",Истина,Ложь);
	БУГП = ?(гз_ОбщегоНазначения.ПолучитьРежимРаботы()="БУГП",Истина,Ложь);
	Автономный = гз_ОбщегоНазначения.АвтономныйРежимРаботы();
	
	Если БК ИЛИ БГП ИЛИ БГУ ИЛИ БУГП Тогда
		МассивРезультат = Новый Массив;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",Документ.Ссылка);
		Запрос.Текст="ВЫБРАТЬ
		|	гз_ПоступлениеТоваровРаботУслугПоДоговорамГосударственныхЗакупокТовары.Номенклатура,
		|	гз_ПоступлениеТоваровРаботУслугПоДоговорамГосударственныхЗакупокТовары.Количество,
		|	гз_ПоступлениеТоваровРаботУслугПоДоговорамГосударственныхЗакупокТовары.Сумма,
		|	гз_ПоступлениеТоваровРаботУслугПоДоговорамГосударственныхЗакупокТовары.Цена,
		|" + ?(БК ИЛИ БГП ИЛИ БУГП,"гз_ПоступлениеТоваровРаботУслугПоДоговорамГосударственныхЗакупокТовары.Номенклатура.СтавкаНДС КАК СтавкаНДС,","")+"
		|	ВЫБОР
		|		КОГДА гз_СвойстваНоменклатуры.ПризнакВА = ЗНАЧЕНИЕ(Перечисление.гз_ГруппыВнеоборотныхАктивов.НематериальныйАктив)
		|			ТОГДА ""НМА""
		|		ИНАЧЕ ""ТРУ""
		|	КОНЕЦ КАК Вид,
		|	ВЫБОР
		|		КОГДА гз_ПоступлениеТоваровРаботУслугПоДоговорамГосударственныхЗакупокТовары.МестоПоставки <> ЗНАЧЕНИЕ(Справочник.гз_МестаПоставки.ПустаяСсылка)
		|			ТОГДА гз_ПоступлениеТоваровРаботУслугПоДоговорамГосударственныхЗакупокТовары.МестоПоставки.Склад
		|		КОГДА гз_ПоступлениеТоваровРаботУслугПоДоговорамГосударственныхЗакупокТовары.Ссылка.МестоПоставки <> ЗНАЧЕНИЕ(Справочник.гз_МестаПоставки.ПустаяСсылка)
		|			ТОГДА гз_ПоступлениеТоваровРаботУслугПоДоговорамГосударственныхЗакупокТовары.Ссылка.МестоПоставки.Склад
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.гз_МестаПоставки.ПустаяСсылка)
		|	КОНЕЦ КАК Склад,
		|	гз_СвойстваНоменклатуры.ПризнакВА
		|ИЗ
		|	Документ.гз_ПоступлениеТоваровРаботУслугПоДоговорамГосударственныхЗакупок.Товары КАК гз_ПоступлениеТоваровРаботУслугПоДоговорамГосударственныхЗакупокТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гз_СвойстваНоменклатуры КАК гз_СвойстваНоменклатуры
		|		ПО гз_ПоступлениеТоваровРаботУслугПоДоговорамГосударственныхЗакупокТовары.Номенклатура = гз_СвойстваНоменклатуры.Номенклатура
		|ГДЕ
		|	гз_ПоступлениеТоваровРаботУслугПоДоговорамГосударственныхЗакупокТовары.Ссылка = &Ссылка
		|ИТОГИ ПО
		|	Вид"+?(ВедениеУчетаЗакупокВРазрезеСкладов,"
		|	, Склад","");
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Вид");
		Пока Выборка.Следующий() Цикл
			Если Вид <> Неопределено И Выборка.Вид <> Вид Тогда
				Продолжить;
			КонецЕсли;
			Если Выборка.Вид = "ТРУ" ИЛИ БГУ Тогда
				Если Документ.ВозвратПоставщику Тогда 
					Если НЕ БГУ Тогда 
						ТипДокумента = "ВозвратТоваровПоставщику";
						ВидОперацииДокумента = Перечисления["ВидыОперацийВозвратТоваровПоставщику"].Покупка;
					Иначе 
						Сообщить("Невозможно оформить возврат поставщику!");
						Возврат Новый Массив;
					КонецЕсли;
				Иначе 
					ТипДокумента = "ПоступлениеТоваровУслуг";
					Если БК ИЛИ БГП ИЛИ БУГП Тогда 
						ВидОперацииДокумента = Перечисления["ВидыОперацийПоступлениеТоваровУслуг"].ПокупкаКомисия;
					ИначеЕсли БГУ Тогда 
						ВидОперацииДокумента = Перечисления["ВидыОперацийПоступлениеТоваровУслуг"].ПриходОтПоставщика;
					КонецЕсли;
				КонецЕсли;
				Если ВедениеУчетаЗакупокВРазрезеСкладов Тогда
					ВыборкаСклад = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Склад");
					Пока ВыборкаСклад.Следующий() Цикл
						Если Склад <> Неопределено И ВыборкаСклад.Склад <> Склад Тогда
							Продолжить;
						КонецЕсли;
						мДокументОбъект 					= Документы[ТипДокумента].СоздатьДокумент();
						мДокументОбъект.Организация 		= Документ.Организация;
						мДокументОбъект.Дата 				= ТекущаяДата();
						мДокументОбъект.Контрагент 			= Документ.Контрагент;
						мДокументОбъект.ДоговорКонтрагента 	= Документ.ДоговорКонтрагента;
						мДокументОбъект.Склад			 	= ВыборкаСклад.Склад;
						Если БГУ Тогда
							мДокументОбъект.ВидОперации  = Перечисления["ВидыОперацийПоступлениеТоваровУслуг"].ПриходОтПоставщика;
							ЗаполнениеДокументов = Ложь;     
							ПроцедурыНалоговогоУчета = Ложь;
						ИначеЕсли БК ИЛИ БУГП ИЛИ БГП Тогда 
							ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(мДокументОбъект, гз_ОбщегоНазначения.мПолучитьЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Покупка",  Ложь, Неопределено, Неопределено);
							
							Если БК ИЛИ БГП Тогда 
							
								мУчетнаяПолитикаПоНалоговомуУчету = Неопределено;
								мУчетнаяПолитикаПоБухгалтерскомуУчету = Неопределено;
								
								ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(мДокументОбъект.Организация, мДокументОбъект.Дата, мУчетнаяПолитикаПоНалоговомуУчету);
								ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(мДокументОбъект.Организация, мДокументОбъект.Дата, мДокументОбъект.УчитыватьКПН, мУчетнаяПолитикаПоНалоговомуУчету);	
								
								ПоддержкаУчетаВременныхРазниц =  ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(мДокументОбъект.Организация, мДокументОбъект.Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);
								
								ВидимостьНалоговогоУчета = мДокументОбъект.УчитыватьКПН И(ПоддержкаУчетаВременныхРазниц ИЛИ мДокументОбъект.ВидУчетаНУ = Справочники["ВидыУчетаНУ"].НУ);
								
							КонецЕсли;
														
						КонецЕсли;
						ВыборкаНоменклатура = ВыборкаСклад.Выбрать();
						Пока ВыборкаНоменклатура.Следующий() Цикл
							ИмяТабличнойЧасти = ?(ВыборкаНоменклатура.ПризнакВА = Перечисления.гз_ГруппыВнеоборотныхАктивов.ОсновноеСредство,"ОС",?(ВыборкаНоменклатура.Номенклатура.Услуга,"Услуги","Товары"));
							НоваяСтрока = мДокументОбъект[ИмяТабличнойЧасти].Добавить();
							НоваяСтрока.Сумма 		= ВыборкаНоменклатура.Сумма;
							Если БГУ Тогда 
								ОбработкаТабличныхЧастей = Ложь;
							ИначеЕсли БК ИЛИ БУГП ИЛИ БГП Тогда 
								НоваяСтрока.СтавкаНДС = ВыборкаНоменклатура.СтавкаНДС;
								мДокументОбъект.ЗаполнитьРеквизитыНалоговогоУчета(НоваяСтрока);
								ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, мДокументОбъект);
							КонецЕсли;
							Если ИмяТабличнойЧасти <> "ОС" Тогда
								НоваяСтрока.Цена 		= ВыборкаНоменклатура.Цена;
							КонецЕсли;
							Если ИмяТабличнойЧасти <> "ОС" ИЛИ БГУ Тогда
								НоваяСтрока.Количество 	= ВыборкаНоменклатура.Количество;
							КонецЕсли;
							
							Если ИмяТабличнойЧасти = "ОС" Тогда
								
								Если НЕ Документ.ВозвратПоставщику Тогда  
								
									ГруппаНМА = Справочники[?(БГУ,"ОсновныеСредстваИНематериальныеАктивы","ОсновныеСредства")].НайтиПоНаименованию("Гос. закупки: созданные в соответствие номенклатуре годового плана");
									Если Не ЗначениеЗаполнено(ГруппаНМА) Тогда
										ГруппаНМА = Справочники[?(БГУ,"ОсновныеСредстваИНематериальныеАктивы","ОсновныеСредства")].СоздатьГруппу();
										ГруппаНМА.Наименование = "Гос. закупки: созданные в соответствие номенклатуре годового плана";
										ГруппаНМА.Записать();
									КонецЕсли;
									
									ОбъектНМА = Справочники[?(БГУ,"ОсновныеСредстваИНематериальныеАктивы","ОсновныеСредства")].СоздатьЭлемент();
									ОбъектНМА.Наименование = ВыборкаНоменклатура.Номенклатура.Наименование;
									ОбъектНМА.Родитель = ГруппаНМА.Ссылка;
									ОбъектНМА.НаименованиеПолное = ВыборкаНоменклатура.Номенклатура.НаименованиеПолное;
									ОбъектНМА.Записать();
									Сообщить("Создан элемент справочника """ + ОбъектНМА.Метаданные().Синоним + """. Код: "+ОбъектНМА.Код+"; Наименование: """+ОбъектНМА.Наименование + """");
									
									МенеджерЗаписиРС = РегистрыСведений.гз_СоответствиеВнеоборотныхАктивовНоменклатуре.СоздатьМенеджерЗаписи();
									МенеджерЗаписиРС.ОСНМА = ОбъектНМА.Ссылка;
									Если НЕ МенеджерЗаписиРС.Выбран() Тогда
										МенеджерЗаписиРС.Номенклатура = ВыборкаНоменклатура.Номенклатура;
									КонецЕсли;
									МенеджерЗаписиРС.Записать(Ложь);
									НоваяСтрока.ОсновноеСредство 	= ОбъектНМА.Ссылка;
									
								Иначе 
									Сообщить("В строке номер "+НоваяСтрока.НомерСтроки + " табличной части ""ОС"": Необходимо заполнить значение реквизита ""Основное средство""!");
								КонецЕсли;
								
								КоличествоСтрок = Окр(ВыборкаНоменклатура.Количество);
								Сумма = ВыборкаНоменклатура.Сумма/КоличествоСтрок;
								СуммаИтог = 0;
								
								НоваяСтрока.Сумма = Сумма;
								
								Если БГУ Тогда 
									НоваяСтрока.Количество = 1;
								ИначеЕсли БК ИЛИ БУГП ИЛИ БГП Тогда 
									НоваяСтрока.СтавкаНДС = ?(НоваяСтрока.СтавкаНДС.Пустая(),гз_УправлениеПользователямиБК.мПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС"),НоваяСтрока.СтавкаНДС);
									ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, мДокументОбъект);
								КонецЕсли;
								
								Если КоличествоСтрок > 1 Тогда 
									
									СуммаИтог = СуммаИтог + Сумма;
									
									Для Индекс = 1 По КоличествоСтрок-1 Цикл 
										
										НоваяСтрокаОС = мДокументОбъект[ИмяТабличнойЧасти].Добавить();
										Если БК ИЛИ БУГП ИЛИ БГП Тогда 
											НоваяСтрокаОС.СтавкаНДС = ВыборкаНоменклатура.СтавкаНДС;
											мДокументОбъект.ЗаполнитьРеквизитыНалоговогоУчета(НоваяСтрокаОС);
											НоваяСтрокаОС.СтавкаНДС = ?(НоваяСтрокаОС.СтавкаНДС.Пустая(),гз_УправлениеПользователямиБК.мПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС"),НоваяСтрокаОС.СтавкаНДС);
										ИначеЕсли БГУ Тогда 
											НоваяСтрокаОС.Количество = 1;
										КонецЕсли;
										
										Если НЕ Документ.ВозвратПоставщику Тогда  
									
											ОбъектНМА = Справочники[?(БГУ,"ОсновныеСредстваИНематериальныеАктивы","ОсновныеСредства")].СоздатьЭлемент();
											ОбъектНМА.Наименование = ВыборкаНоменклатура.Номенклатура.Наименование;
											ОбъектНМА.Родитель = ГруппаНМА.Ссылка;
											ОбъектНМА.НаименованиеПолное = ВыборкаНоменклатура.Номенклатура.НаименованиеПолное;
											ОбъектНМА.Записать();
											Сообщить("Создан элемент справочника """ + ОбъектНМА.Метаданные().Синоним + """. Код: "+ОбъектНМА.Код+"; Наименование: """+ОбъектНМА.Наименование + """");
									
											МенеджерЗаписиРС = РегистрыСведений.гз_СоответствиеВнеоборотныхАктивовНоменклатуре.СоздатьМенеджерЗаписи();
											МенеджерЗаписиРС.ОСНМА = ОбъектНМА.Ссылка;
											Если НЕ МенеджерЗаписиРС.Выбран() Тогда
												МенеджерЗаписиРС.Номенклатура = ВыборкаНоменклатура.Номенклатура;
											КонецЕсли;
											МенеджерЗаписиРС.Записать(Ложь);
											НоваяСтрокаОС.ОсновноеСредство 	= ОбъектНМА.Ссылка;
											
										Иначе 
											Сообщить("В строке номер "+НоваяСтрокаОС.НомерСтроки + " табличной части ""ОС"": Необходимо заполнить значение реквизита ""Основное средство""!");
										КонецЕсли;
										
										Если БГУ Тогда 
											мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрокаОС,ИмяТабличнойЧасти);
											УправлениеПроизводством = Ложь;
										ИначеЕсли БК ИЛИ БУГП ИЛИ БГП Тогда 
											Если мДокументОбъект.Метаданные().Имя = "ВозвратТоваровПоставщику" Тогда 
												Если БК ИЛИ БГП Тогда 
													мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрокаОС,ИмяТабличнойЧасти,Истина,ВидимостьНалоговогоУчета);
												ИначеЕсли БУГП Тогда  
													мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрокаОС,ИмяТабличнойЧасти,Истина,мДокументОбъект.ОтражатьВНалоговомУчете);
												КонецЕсли;
												
											Иначе 
												Если БК ИЛИ БГП Тогда 
													мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрокаОС,ИмяТабличнойЧасти,Истина,ВидимостьНалоговогоУчета);
												ИначеЕсли БУГП Тогда  
													мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрокаОС,ИмяТабличнойЧасти,Истина,мДокументОбъект.ОтражатьВНалоговомУчете);
												КонецЕсли;
											КонецЕсли;
											УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(НоваяСтрокаОС, "СчетУчетаБУ","СчетУчетаНУ" , мДокументОбъект.Дата);	
										КонецЕсли;
										
										Если НЕ (Индекс = КоличествоСтрок-1) Тогда 
											НоваяСтрокаОС.Сумма = Сумма;
											СуммаИтог = СуммаИтог + Окр(Сумма,2);
										Иначе 
											НоваяСтрокаОС.Сумма = ВыборкаНоменклатура.Сумма - СуммаИтог;
										КонецЕсли;
										
										Если БК ИЛИ БУГП ИЛИ БГП Тогда 
											ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаОС, мДокументОбъект);
										КонецЕсли;
										
									КонецЦикла;
									
								КонецЕсли;
								
							Иначе
								НоваяСтрока.Номенклатура 	= ВыборкаНоменклатура.Номенклатура;
							КонецЕсли;
							
							Если БК ИЛИ БУГП ИЛИ БГП Тогда 
								Если мДокументОбъект.Метаданные().Имя = "ВозвратТоваровПоставщику" Тогда 
									Если БК ИЛИ БГП Тогда 
										мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока,ИмяТабличнойЧасти,Истина,ВидимостьНалоговогоУчета);
									ИначеЕсли БУГП Тогда  
										мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока,ИмяТабличнойЧасти,Истина,мДокументОбъект.ОтражатьВНалоговомУчете);
									КонецЕсли;
								Иначе 
									мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока,ИмяТабличнойЧасти,Истина,ВидимостьНалоговогоУчета);
									Если БК ИЛИ БГП Тогда 
										мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока,ИмяТабличнойЧасти,Истина,ВидимостьНалоговогоУчета);
									ИначеЕсли БУГП Тогда 
										мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока,ИмяТабличнойЧасти,Истина,мДокументОбъект.ОтражатьВНалоговомУчете);
									КонецЕсли;
								КонецЕсли;
								Если ИмяТабличнойЧасти = "ОС" Тогда 
									УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(НоваяСтрока, "СчетУчетаБУ","СчетУчетаНУ" , мДокументОбъект.Дата);	
                                КонецЕсли;
							ИначеЕсли БГУ Тогда 
								мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока,ИмяТабличнойЧасти);	
							КонецЕсли;
							
						КонецЦикла;
						МассивРезультат.Добавить(мДокументОбъект);
					КонецЦикла;
				Иначе
					мДокументОбъект 					= Документы[ТипДокумента].СоздатьДокумент();
					мДокументОбъект.Организация 		= Документ.Организация;
					мДокументОбъект.Дата 				= ТекущаяДата();
					мДокументОбъект.Контрагент 			= Документ.Контрагент;
					мДокументОбъект.ДоговорКонтрагента 	= Документ.ДоговорКонтрагента;
					Если БГУ Тогда
						мДокументОбъект.ВидОперации  = Перечисления["ВидыОперацийПоступлениеТоваровУслуг"].ПриходОтПоставщика;
					Иначе
						Если Документ.ВозвратПоставщику Тогда
							мДокументОбъект.ВидОперации  = Перечисления["ВидыОперацийВозвратТоваровПоставщику"].Покупка;
						Иначе
							мДокументОбъект.ВидОперации  = Перечисления["ВидыОперацийПоступлениеТоваровУслуг"].ПокупкаКомисия;
						КонецЕсли;
						ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(мДокументОбъект, гз_ОбщегоНазначения.мПолучитьЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Покупка",  Ложь, Неопределено, Неопределено);
						
						Если БК ИЛИ БГП Тогда 
							
							мУчетнаяПолитикаПоНалоговомуУчету = Неопределено;
							мУчетнаяПолитикаПоБухгалтерскомуУчету = Неопределено;
							
							ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(мДокументОбъект.Организация, мДокументОбъект.Дата, мУчетнаяПолитикаПоНалоговомуУчету);
							ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(мДокументОбъект.Организация, мДокументОбъект.Дата, мДокументОбъект.УчитыватьКПН, мУчетнаяПолитикаПоНалоговомуУчету);	
							
							ПоддержкаУчетаВременныхРазниц =  ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(мДокументОбъект.Организация, мДокументОбъект.Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);
							
							ВидимостьНалоговогоУчета = мДокументОбъект.УчитыватьКПН И(ПоддержкаУчетаВременныхРазниц ИЛИ мДокументОбъект.ВидУчетаНУ = Справочники["ВидыУчетаНУ"].НУ);
							
						КонецЕсли;
												
					КонецЕсли;
					
					ВыборкаНоменклатура = Выборка.Выбрать();
					Пока ВыборкаНоменклатура.Следующий() Цикл
						ИмяТабличнойЧасти = ?(ВыборкаНоменклатура.ПризнакВА = Перечисления.гз_ГруппыВнеоборотныхАктивов.ОсновноеСредство,"ОС",?(ВыборкаНоменклатура.Номенклатура.Услуга,"Услуги","Товары"));
						НоваяСтрока = мДокументОбъект[ИмяТабличнойЧасти].Добавить();
						НоваяСтрока.Сумма 		= ВыборкаНоменклатура.Сумма;
						Если БК ИЛИ БУГП ИЛИ БГП Тогда 
							НоваяСтрока.СтавкаНДС = ВыборкаНоменклатура.СтавкаНДС;
							мДокументОбъект.ЗаполнитьРеквизитыНалоговогоУчета(НоваяСтрока);
							ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, мДокументОбъект);
						КонецЕсли;
						Если ИмяТабличнойЧасти <> "ОС" Тогда
							НоваяСтрока.Цена 		= ВыборкаНоменклатура.Цена;
						КонецЕсли;
						Если ИмяТабличнойЧасти <> "ОС" ИЛИ БГУ Тогда
							НоваяСтрока.Количество 	= ВыборкаНоменклатура.Количество;
						КонецЕсли;
						
						Если ИмяТабличнойЧасти = "ОС" Тогда
							
							Если НЕ Документ.ВозвратПоставщику Тогда  
								ГруппаНМА = Справочники[?(БГУ,"ОсновныеСредстваИНематериальныеАктивы","ОсновныеСредства")].НайтиПоНаименованию("Гос. закупки: созданные в соответствие номенклатуре годового плана");
								Если Не ЗначениеЗаполнено(ГруппаНМА) Тогда
									ГруппаНМА = Справочники[?(БГУ,"ОсновныеСредстваИНематериальныеАктивы","ОсновныеСредства")].СоздатьГруппу();
									ГруппаНМА.Наименование = "Гос. закупки: созданные в соответствие номенклатуре годового плана";
									ГруппаНМА.Записать();
								КонецЕсли;
								
								ОбъектНМА = Справочники[?(БГУ,"ОсновныеСредстваИНематериальныеАктивы","ОсновныеСредства")].СоздатьЭлемент();
								ОбъектНМА.Наименование = ВыборкаНоменклатура.Номенклатура.Наименование;
								ОбъектНМА.Родитель = ГруппаНМА.Ссылка;
								ОбъектНМА.НаименованиеПолное = ВыборкаНоменклатура.Номенклатура.НаименованиеПолное;
								ОбъектНМА.Записать();
								Сообщить("Создан элемент справочника """ + ОбъектНМА.Метаданные().Синоним + """. Код: "+ОбъектНМА.Код+"; Наименование: """+ОбъектНМА.Наименование + """");
								
								МенеджерЗаписиРС = РегистрыСведений.гз_СоответствиеВнеоборотныхАктивовНоменклатуре.СоздатьМенеджерЗаписи();
								МенеджерЗаписиРС.ОСНМА = ОбъектНМА.Ссылка;
								
								Если НЕ МенеджерЗаписиРС.Выбран() Тогда
									МенеджерЗаписиРС.Номенклатура = ВыборкаНоменклатура.Номенклатура;
								КонецЕсли;
								МенеджерЗаписиРС.Записать(Ложь);
								НоваяСтрока.ОсновноеСредство 	= ОбъектНМА.Ссылка;
								
							Иначе 
								Сообщить("В строке номер "+НоваяСтрока.НомерСтроки + " табличной части ""ОС"": Необходимо заполнить значение реквизита ""Основное средство""!");
							КонецЕсли;
							
							КоличествоСтрок = Окр(ВыборкаНоменклатура.Количество);
							Сумма = ВыборкаНоменклатура.Сумма/КоличествоСтрок;
							СуммаИтог = 0;
							
							НоваяСтрока.Сумма = Сумма;
							
							Если БГУ Тогда 
								НоваяСтрока.Количество = 1;
							ИначеЕсли (БК ИЛИ БУГП ИЛИ БГП) Тогда 
								НоваяСтрока.СтавкаНДС = ?(НоваяСтрока.СтавкаНДС.Пустая(),гз_УправлениеПользователямиБК.мПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС"),НоваяСтрока.СтавкаНДС);
								ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, мДокументОбъект);
							КонецЕсли;
							
							Если КоличествоСтрок > 1 Тогда 
								
								
								СуммаИтог = СуммаИтог + Сумма;
								
								Для Индекс = 1 По КоличествоСтрок-1 Цикл 
									
									НоваяСтрокаОС = мДокументОбъект[ИмяТабличнойЧасти].Добавить();
									Если БК ИЛИ БУГП ИЛИ БГП Тогда 
										НоваяСтрокаОС.СтавкаНДС = ВыборкаНоменклатура.СтавкаНДС;
										мДокументОбъект.ЗаполнитьРеквизитыНалоговогоУчета(НоваяСтрокаОС);
										НоваяСтрокаОС.СтавкаНДС = ?(НоваяСтрокаОС.СтавкаНДС.Пустая(),гз_УправлениеПользователямиБК.мПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС"),НоваяСтрокаОС.СтавкаНДС);
										ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаОС, мДокументОбъект);
									ИначеЕсли БГУ Тогда 
										НоваяСтрокаОС.Количество = 1;
									КонецЕсли;
									
									Если НЕ Документ.ВозвратПоставщику Тогда  
							
										ОбъектНМА = Справочники[?(БГУ,"ОсновныеСредстваИНематериальныеАктивы","ОсновныеСредства")].СоздатьЭлемент();
										ОбъектНМА.Наименование = ВыборкаНоменклатура.Номенклатура.Наименование;
										ОбъектНМА.Родитель = ГруппаНМА.Ссылка;
										ОбъектНМА.НаименованиеПолное = ВыборкаНоменклатура.Номенклатура.НаименованиеПолное;
										ОбъектНМА.Записать();
										Сообщить("Создан элемент справочника """ + ОбъектНМА.Метаданные().Синоним + """. Код: "+ОбъектНМА.Код+"; Наименование: """+ОбъектНМА.Наименование + """");
										
										МенеджерЗаписиРС = РегистрыСведений.гз_СоответствиеВнеоборотныхАктивовНоменклатуре.СоздатьМенеджерЗаписи();
										МенеджерЗаписиРС.ОСНМА = ОбъектНМА.Ссылка;
										Если НЕ МенеджерЗаписиРС.Выбран() Тогда
											МенеджерЗаписиРС.Номенклатура = ВыборкаНоменклатура.Номенклатура;
										КонецЕсли;
										МенеджерЗаписиРС.Записать(Ложь);
										НоваяСтрокаОС.ОсновноеСредство 	= ОбъектНМА.Ссылка;
									Иначе 
										Сообщить("В строке номер "+НоваяСтрокаОС.НомерСтроки + " табличной части ""ОС"": Необходимо заполнить значение реквизита ""Основное средство""!");
									КонецЕсли;
										
									Если БК ИЛИ БУГП ИЛИ БГП Тогда 
										Если мДокументОбъект.Метаданные().Имя = "ВозвратТоваровПоставщику" Тогда 
											Если БК ИЛИ БГП Тогда 
												мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрокаОС,ИмяТабличнойЧасти,Истина,ВидимостьНалоговогоУчета);
											ИначеЕсли БУГП Тогда  
												мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрокаОС,ИмяТабличнойЧасти,Истина,мДокументОбъект.ОтражатьВНалоговомУчете);
											КонецЕсли;
										Иначе 
											Если БК ИЛИ БГП Тогда 
												мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрокаОС,ИмяТабличнойЧасти,Истина,ВидимостьНалоговогоУчета);
											ИначеЕсли БУГП Тогда 
												мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрокаОС,ИмяТабличнойЧасти,Истина,мДокументОбъект.ОтражатьВНалоговомУчете);
											КонецЕсли;
										КонецЕсли;
									УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(НоваяСтрокаОС, "СчетУчетаБУ","СчетУчетаНУ" , мДокументОбъект.Дата);	
									ИначеЕсли БГУ Тогда 
										мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрокаОС,ИмяТабличнойЧасти);	
									КонецЕсли;
									
									Если НЕ (Индекс = КоличествоСтрок-1) Тогда 
										НоваяСтрокаОС.Сумма = Сумма;
										СуммаИтог = СуммаИтог + Окр(Сумма,2);
									Иначе 
										НоваяСтрокаОС.Сумма = ВыборкаНоменклатура.Сумма - СуммаИтог;
									КонецЕсли;
									
									Если БК ИЛИ БУГП ИЛИ БГП Тогда 
										ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаОС, мДокументОбъект);
									КонецЕсли;
									
								КонецЦикла;
								
							КонецЕсли;
								
						Иначе
							НоваяСтрока.Номенклатура 	= ВыборкаНоменклатура.Номенклатура;
						КонецЕсли;
						
						Если БК ИЛИ БУГП ИЛИ БГП Тогда 
							Если мДокументОбъект.Метаданные().Имя = "ВозвратТоваровПоставщику" Тогда 
								Если БК ИЛИ БГП Тогда 
									мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока,ИмяТабличнойЧасти,Истина,ВидимостьНалоговогоУчета);
								ИначеЕсли БУГП Тогда  
									мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока,ИмяТабличнойЧасти,Истина,мДокументОбъект.ОтражатьВНалоговомУчете);
								КонецЕсли;
								
							Иначе 
								Если БК ИЛИ БГП Тогда 
									мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока,ИмяТабличнойЧасти,Истина,ВидимостьНалоговогоУчета);
								ИначеЕсли БУГП Тогда  
									мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока,ИмяТабличнойЧасти,Истина,мДокументОбъект.ОтражатьВНалоговомУчете);
								КонецЕсли;
							КонецЕсли;
							Если ИмяТабличнойЧасти = "ОС" Тогда 
								УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(НоваяСтрока, "СчетУчетаБУ","СчетУчетаНУ" , мДокументОбъект.Дата);	
							КонецЕсли;
						ИначеЕсли БГУ Тогда 
							мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока,ИмяТабличнойЧасти);	
						КонецЕсли;
						
					КонецЦикла;
					МассивРезультат.Добавить(мДокументОбъект);
				КонецЕсли;
			Иначе
				Если НЕ Документ.ВозвратПоставщику Тогда 
					мДокументОбъект 					= Документы["ПоступлениеНМА"].СоздатьДокумент();
					мДокументОбъект.Организация 		= Документ.Организация;
					мДокументОбъект.Дата 				= ТекущаяДата();
					мДокументОбъект.Контрагент 			= Документ.Контрагент;
					мДокументОбъект.ДоговорКонтрагента 	= Документ.ДоговорКонтрагента;
					Если БГУ Тогда 
						ПроцедурыНалоговогоУчета = Ложь;
					ИначеЕсли БК ИЛИ БУГП ИЛИ БГП Тогда
						ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(мДокументОбъект, гз_ОбщегоНазначения.мПолучитьЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Покупка",  Ложь, Неопределено, Неопределено);
						мУчетнаяПолитикаПоНалоговомуУчету = Неопределено;
						мУчетнаяПолитикаПоБухгалтерскомуУчету = Неопределено;
						ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(мДокументОбъект.Организация, мДокументОбъект.Дата, мУчетнаяПолитикаПоНалоговомуУчету);
						Если БУГП Тогда 
							ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(мДокументОбъект.Организация, мДокументОбъект.Дата, мДокументОбъект.УчитыватьКПН, мУчетнаяПолитикаПоНалоговомуУчету);	
						Иначе 
							ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(мДокументОбъект.Организация, мДокументОбъект.Дата, мДокументОбъект.ОтражатьВНалоговомУчете, мУчетнаяПолитикаПоНалоговомуУчету);	
						КонецЕсли;
						ПоддержкаУчетаВременныхРазниц = ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(мДокументОбъект.Организация, мДокументОбъект.Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);
					КонецЕсли;
					Если ВедениеУчетаЗакупокВРазрезеСкладов Тогда
						ВыборкаСклад = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаСклад.Следующий() Цикл
							ВыборкаНоменклатура = ВыборкаСклад.Выбрать();
							Пока ВыборкаНоменклатура.Следующий() Цикл
								НоваяСтрока = мДокументОбъект.НМА.Добавить();
								НоваяСтрока.Сумма = ВыборкаНоменклатура.Сумма;
								Если БК ИЛИ БУГП ИЛИ БГП Тогда 
									НоваяСтрока.СтавкаНДС = ВыборкаНоменклатура.СтавкаНДС;
									НоваяСтрока.СтавкаНДС = ?(НоваяСтрока.СтавкаНДС.Пустая(),гз_УправлениеПользователямиБК.мПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС"),НоваяСтрока.СтавкаНДС);
									мДокументОбъект.ЗаполнитьРеквизитыНалоговогоУчета(НоваяСтрока);
									ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, мДокументОбъект);
								КонецЕсли;
								
								ГруппаНМА = Справочники["НематериальныеАктивы"].НайтиПоНаименованию("Гос. закупки: созданные в соответствие номенклатуре годового плана");
								Если Не ЗначениеЗаполнено(ГруппаНМА) Тогда
									ГруппаНМА = Справочники["НематериальныеАктивы"].СоздатьГруппу();
									ГруппаНМА.Наименование = "Гос. закупки: созданные в соответствие номенклатуре годового плана";
									ГруппаНМА.Записать();
								КонецЕсли;
								
								ОбъектНМА = Справочники["НематериальныеАктивы"].СоздатьЭлемент();
								ОбъектНМА.Наименование = ВыборкаНоменклатура.Номенклатура.Наименование;
								ОбъектНМА.Родитель = ГруппаНМА.Ссылка;
								ОбъектНМА.НаименованиеПолное = ВыборкаНоменклатура.Номенклатура.НаименованиеПолное;
								ОбъектНМА.Записать();
								Сообщить("Создан элемент справочника """ + ОбъектНМА.Метаданные().Синоним + """. Код: "+ОбъектНМА.Код+"; Наименование: """+ОбъектНМА.Наименование + """");
								
								МенеджерЗаписиРС = РегистрыСведений.гз_СоответствиеВнеоборотныхАктивовНоменклатуре.СоздатьМенеджерЗаписи();
								МенеджерЗаписиРС.ОСНМА = ОбъектНМА.Ссылка;
								Если НЕ МенеджерЗаписиРС.Выбран() Тогда
									МенеджерЗаписиРС.Номенклатура = ВыборкаНоменклатура.Номенклатура;
								КонецЕсли;
								МенеджерЗаписиРС.Записать(Ложь);
								НоваяСтрока.НематериальныйАктив 	= ОбъектНМА.Ссылка;
								
								Если БК ИЛИ БУГП ИЛИ БГП Тогда 
									мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока,"НМА",Истина,Истина);
								КонецЕсли;
								КоличествоСтрок = Окр(ВыборкаНоменклатура.Количество);
								Сумма = ВыборкаНоменклатура.Сумма/КоличествоСтрок;
								СуммаИтог = 0;
								
								Если КоличествоСтрок > 1 Тогда 
									
									НоваяСтрока.Сумма = Сумма;
									ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, мДокументОбъект);
									
									СуммаИтог = СуммаИтог + Сумма;
									
									Для Индекс = 1 По КоличествоСтрок-1 Цикл 
										
										НоваяСтрокаНМА = мДокументОбъект.НМА.Добавить();
										Если БК ИЛИ БУГП ИЛИ БГП Тогда 
											НоваяСтрокаНМА.СтавкаНДС = ВыборкаНоменклатура.СтавкаНДС;
											НоваяСтрокаНМА.СтавкаНДС = ?(НоваяСтрокаНМА.СтавкаНДС.Пустая(),гз_УправлениеПользователямиБК.мПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС"),НоваяСтрокаНМА.СтавкаНДС);
											мДокументОбъект.ЗаполнитьРеквизитыНалоговогоУчета(НоваяСтрокаНМА);
											ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаНМА, мДокументОбъект);
										КонецЕсли;
										
										ОбъектНМА = Справочники["НематериальныеАктивы"].СоздатьЭлемент();
										ОбъектНМА.Наименование = ВыборкаНоменклатура.Номенклатура.Наименование;
										ОбъектНМА.Родитель = ГруппаНМА.Ссылка;
										ОбъектНМА.НаименованиеПолное = ВыборкаНоменклатура.Номенклатура.НаименованиеПолное;
										ОбъектНМА.Записать();
										Сообщить("Создан элемент справочника """ + ОбъектНМА.Метаданные().Синоним + """. Код: "+ОбъектНМА.Код+"; Наименование: """+ОбъектНМА.Наименование + """");
										
										МенеджерЗаписиРС = РегистрыСведений.гз_СоответствиеВнеоборотныхАктивовНоменклатуре.СоздатьМенеджерЗаписи();
										МенеджерЗаписиРС.ОСНМА = ОбъектНМА.Ссылка;
										Если НЕ МенеджерЗаписиРС.Выбран() Тогда
											МенеджерЗаписиРС.Номенклатура = ВыборкаНоменклатура.Номенклатура;
										КонецЕсли;
										МенеджерЗаписиРС.Записать(Ложь);
										НоваяСтрокаНМА.НематериальныйАктив 	= ОбъектНМА.Ссылка;
										Если БК ИЛИ БУГП ИЛИ БГП Тогда 
											мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрокаНМА,"НМА",Истина,Истина);
										КонецЕсли;
										
										Если НЕ (Индекс = КоличествоСтрок-1) Тогда 
											НоваяСтрокаНМА.Сумма = Сумма;
											СуммаИтог = СуммаИтог + Окр(Сумма,2);
										Иначе 
											НоваяСтрокаНМА.Сумма = ВыборкаНоменклатура.Сумма - СуммаИтог;
										КонецЕсли;
										
										ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаНМА, мДокументОбъект);
										
									КонецЦикла;
									
								КонецЕсли;
								
							КонецЦикла;
						КонецЦикла;
					Иначе
						ВыборкаНоменклатура = Выборка.Выбрать();
						Пока ВыборкаНоменклатура.Следующий() Цикл
							НоваяСтрока = мДокументОбъект.НМА.Добавить();
							НоваяСтрока.Сумма = ВыборкаНоменклатура.Сумма;
							Если БК ИЛИ БУГП ИЛИ БГП Тогда 
								НоваяСтрока.СтавкаНДС = ВыборкаНоменклатура.СтавкаНДС;
								НоваяСтрока.СтавкаНДС = ?(НоваяСтрока.СтавкаНДС.Пустая(),гз_УправлениеПользователямиБК.мПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС"),НоваяСтрока.СтавкаНДС);
								мДокументОбъект.ЗаполнитьРеквизитыНалоговогоУчета(НоваяСтрока);
								ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, мДокументОбъект);
							КонецЕсли;
							
							ГруппаНМА = Справочники["НематериальныеАктивы"].НайтиПоНаименованию("Гос. закупки: созданные в соответствие номенклатуре годового плана");
							Если Не ЗначениеЗаполнено(ГруппаНМА) Тогда
								ГруппаНМА = Справочники["НематериальныеАктивы"].СоздатьГруппу();
								ГруппаНМА.Наименование = "Гос. закупки: созданные в соответствие номенклатуре годового плана";
								ГруппаНМА.Записать();
							КонецЕсли;
							
							ОбъектНМА = Справочники["НематериальныеАктивы"].СоздатьЭлемент();
							ОбъектНМА.Наименование = ВыборкаНоменклатура.Номенклатура.Наименование;
							ОбъектНМА.Родитель = ГруппаНМА.Ссылка;
							ОбъектНМА.НаименованиеПолное = ВыборкаНоменклатура.Номенклатура.НаименованиеПолное;
							ОбъектНМА.Записать();
							Сообщить("Создан элемент справочника """ + ОбъектНМА.Метаданные().Синоним + """. Код: "+ОбъектНМА.Код+"; Наименование: """+ОбъектНМА.Наименование + """");
							
							МенеджерЗаписиРС = РегистрыСведений.гз_СоответствиеВнеоборотныхАктивовНоменклатуре.СоздатьМенеджерЗаписи();
							МенеджерЗаписиРС.ОСНМА = ОбъектНМА.Ссылка;
							Если НЕ МенеджерЗаписиРС.Выбран() Тогда
								МенеджерЗаписиРС.Номенклатура = ВыборкаНоменклатура.Номенклатура;
							КонецЕсли;
							МенеджерЗаписиРС.Записать(Ложь);
							НоваяСтрока.НематериальныйАктив 	= ОбъектНМА.Ссылка;
							Если БК ИЛИ БУГП ИЛИ БГП Тогда 
								мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока,"НМА",Истина,Истина);
							КонецЕсли;
							
							КоличествоСтрок = Окр(ВыборкаНоменклатура.Количество);
							Сумма = ВыборкаНоменклатура.Сумма/КоличествоСтрок;
							СуммаИтог = 0;
							
							Если КоличествоСтрок > 1 Тогда 
								
								НоваяСтрока.Сумма = Сумма;
								ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, мДокументОбъект);

								СуммаИтог = СуммаИтог + Сумма;
								
								Для Индекс = 1 По КоличествоСтрок-1 Цикл 
									
									НоваяСтрокаНМА = мДокументОбъект.НМА.Добавить();
									Если БК ИЛИ БУГП ИЛИ БГП Тогда 
										НоваяСтрокаНМА.СтавкаНДС = ВыборкаНоменклатура.СтавкаНДС;
										НоваяСтрокаНМА.СтавкаНДС = ?(НоваяСтрокаНМА.СтавкаНДС.Пустая(),гз_УправлениеПользователямиБК.мПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС"),НоваяСтрокаНМА.СтавкаНДС);
										мДокументОбъект.ЗаполнитьРеквизитыНалоговогоУчета(НоваяСтрокаНМА);
										ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаНМА, мДокументОбъект);
									КонецЕсли;
									
									ОбъектНМА = Справочники["НематериальныеАктивы"].СоздатьЭлемент();
									ОбъектНМА.Наименование = ВыборкаНоменклатура.Номенклатура.Наименование;
									ОбъектНМА.Родитель = ГруппаНМА.Ссылка;
									ОбъектНМА.НаименованиеПолное = ВыборкаНоменклатура.Номенклатура.НаименованиеПолное;
									ОбъектНМА.Записать();
									Сообщить("Создан элемент справочника """ + ОбъектНМА.Метаданные().Синоним + """. Код: "+ОбъектНМА.Код+"; Наименование: """+ОбъектНМА.Наименование + """");
									
									МенеджерЗаписиРС = РегистрыСведений.гз_СоответствиеВнеоборотныхАктивовНоменклатуре.СоздатьМенеджерЗаписи();
									МенеджерЗаписиРС.ОСНМА = ОбъектНМА.Ссылка;
									Если НЕ МенеджерЗаписиРС.Выбран() Тогда
										МенеджерЗаписиРС.Номенклатура = ВыборкаНоменклатура.Номенклатура;
									КонецЕсли;
									МенеджерЗаписиРС.Записать(Ложь);
									НоваяСтрокаНМА.НематериальныйАктив 	= ОбъектНМА.Ссылка;
									Если БК ИЛИ БУГП ИЛИ БГП Тогда 
										мДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрокаНМА,"НМА",Истина,Истина);
									КонецЕсли;
									
									Если НЕ (Индекс = КоличествоСтрок-1) Тогда 
										НоваяСтрокаНМА.Сумма = Сумма;
										СуммаИтог = СуммаИтог + Окр(Сумма,2);
									Иначе 
										НоваяСтрокаНМА.Сумма = ВыборкаНоменклатура.Сумма - СуммаИтог;
									КонецЕсли;
									ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, мДокументОбъект);
									
								КонецЦикла;
								
							КонецЕсли;
							
						КонецЦикла;
					КонецЕсли;
				Иначе 
					Сообщить("Для нематериального актива невозможно оформить возврат");	
				КонецЕсли;
				
				МассивРезультат.Добавить(мДокументОбъект);
			КонецЕсли;
		КонецЦикла;
		
		Возврат МассивРезультат;
	Иначе
		Сообщить("В текущей конфигурации работа с бухгалтерскими документами из подсистемы государственных закупок невозможна");	
		Возврат Неопределено;
	КонецЕсли;
КонецФункции //ОформитьПоступлениеБУ()

// Функция формирует бухгалтерские документы (оплаты)
//
Функция ОформитьПоступлениеОплатБУ(Документ, Вид=Неопределено) Экспорт
	
	Если гз_ОбщегоНазначения.ПолучитьРежимРаботы()="БК" ИЛИ гз_ОбщегоНазначения.ПолучитьРежимРаботы()="БГП" ИЛИ гз_ОбщегоНазначения.ПолучитьРежимРаботы()="БГУ" ИЛИ гз_ОбщегоНазначения.ПолучитьРежимРаботы()="БУГП" Тогда
		Если гз_ОбщегоНазначения.ПолучитьРежимРаботы()="БК" ИЛИ гз_ОбщегоНазначения.ПолучитьРежимРаботы()="БГП" ИЛИ гз_ОбщегоНазначения.ПолучитьРежимРаботы()="БУГП" Тогда
			Если Документ.ВозвратОтПоставщика Тогда 
				мДокумент = Документы["ПлатежноеПоручениеВходящее"].СоздатьДокумент();
				мДокумент.ВидОперации = Перечисления["ВидыОперацийПоступлениеБезналичныхДенежныхСредств"].ВозвратДенежныхСредствПоставщиком; 
			Иначе 
				мДокумент = Документы["ПлатежноеПоручениеИсходящее"].СоздатьДокумент();
				мДокумент.ВидОперации = Перечисления["ВидыОперацийППИсходящее"].ОплатаПоставщику;
			КонецЕсли;
			 мДокумент.Организация 		= Документ.Организация;
			 мДокумент.ВалютаДокумента 	= Константы.ВалютаРегламентированногоУчета.Получить();
			 мДокумент.Дата 			= ТекущаяДата();
			 мДокумент.ДатаВыписки 		= ТекущаяДата();
			 мДокумент.Контрагент 		= Документ.Контрагент;
			 мДокумент.СуммаДокумента 	= Документ.СуммаДокумента;
			 НоваяСтрока = мДокумент.РасшифровкаПлатежа.Добавить();
			 НоваяСтрока.ДоговорКонтрагента = Документ.ДоговорКонтрагента;
			 НоваяСтрока.СуммаВзаиморасчетов = Документ.СуммаДокумента;
			 НоваяСтрока.КратностьВзаиморасчетов = 1;
			 НоваяСтрока.КурсВзаиморасчетов = 1;
			 НоваяСтрока.СуммаПлатежа = Документ.СуммаДокумента;
		 ИначеЕсли гз_ОбщегоНазначения.ПолучитьРежимРаботы()="БГУ" Тогда
			 Если Документ.ВозвратОтПоставщика Тогда 
				Сообщить("Невозможно оформить возврат от поставщика!");
				Возврат Неопределено;
			КонецЕсли;
			 мДокумент = Документы["СчетКОплате"].СоздатьДокумент();
			 мДокумент.Организация 		= Документ.Организация;
			 мДокумент.ВалютаДокумента 	= Константы.ВалютаРегламентированногоУчета.Получить();
			 мДокумент.ВидОперации 		= Перечисления["ВидыОперацийСчетКОплате"].ОплатаПоставщику;
			 мДокумент.Дата 			= ТекущаяДата();
			 мДокумент.ДатаВыписки 		= ТекущаяДата();
			 мДокумент.Контрагент 		= Документ.Контрагент;
			 мДокумент.СуммаДокумента 	= Документ.СуммаДокумента;
			 НоваяСтрока = мДокумент.РасшифровкаПлатежа.Добавить();
			 Если гз_ОбщегоНазначения.ПолучитьРежимРаботы() = "БГУ" Тогда 
				 мДокумент.ДоговорКонтрагента = Документ.ДоговорКонтрагента;
			 Иначе 
				 НоваяСтрока.ДоговорКонтрагента = Документ.ДоговорКонтрагента;
			 КонецЕсли;
			 НоваяСтрока.СуммаВзаиморасчетов = Документ.СуммаДокумента;
			 НоваяСтрока.КратностьВзаиморасчетов = 1;
			 НоваяСтрока.КурсВзаиморасчетов = 1;
			 НоваяСтрока.СуммаПлатежа = Документ.СуммаДокумента;
		КонецЕсли;
		Возврат мДокумент;
	Иначе
		Сообщить("В текущей конфигурации работа с бухгалтерскими документами из подсистемы государственных закупок невозможна");	
		Возврат Неопределено;
	КонецЕсли;
КонецФункции //ОформитьПоступлениеБУ()

// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
// 
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
Функция мПолучитьОписаниеТиповЧисла(Разрядность,РазрядностьДробнойЧасти=0) Экспорт

	Массив = Новый Массив;

	Массив.Добавить(Тип("Число"));
	КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность,РазрядностьДробнойЧасти);

	Возврат Новый ОписаниеТипов(Массив, КвалификаторЧисла);

КонецФункции // ПолучитьОписаниеТиповЧисла() 

