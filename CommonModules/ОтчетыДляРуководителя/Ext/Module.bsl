Процедура ВывестиОтчет(ОтчетОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, ИспользоватьРасшифровку = Истина) Экспорт
	
	ОтчетОбъект.КомпоновщикНастроек.Восстановить();
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ОтчетОбъект);
	
	Если ТипЗнч(ОтчетОбъект) = Вычислить("Тип(""ОтчетОбъект.ДинамикаЗадолженностиПоставщикам"")")
		ИЛИ ТипЗнч(ОтчетОбъект) = Вычислить("Тип(""ОтчетОбъект.ДинамикаЗадолженностиПокупателей"")") Тогда
		Схема.НаборыДанных[0].Запрос = СтрЗаменить(Схема.НаборыДанных[0].Запрос, Врег("Первые 7"), Врег("Первые ") + ОтчетОбъект.КоличествоВыводимыхЗаписейВДиаграмме);
	КонецЕсли;
			
	//Сгенерируем макет компоновки данных при помощи компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Попытка
		
		//В качестве схемы компоновки будет выступать схема самого отчета
		//В качестве настроек отчета - текущие настройки отчета
		//Данные расшифровки будем помещать в ДанныеРасшифровки
		Если ИспользоватьРасшифровку Тогда
			МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, ОтчетОбъект.КомпоновщикНастроек.Настройки,ДанныеРасшифровки , ПолучитьОбщийМакет("МакетОформленияОтчетов"));
		Иначе
			МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, ОтчетОбъект.КомпоновщикНастроек.Настройки, , ПолучитьОбщийМакет("МакетОформленияОтчетов"));
		КонецЕсли;
		
		//ДополнитьМакетыМакетаКомпоновкиРасшифровкойРесурсов(МакетКомпоновки, ОтчетОбъект.КомпоновщикНастроек);
		//Создадим и инициализируем процессор компоновки
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		Если ВнешниеНаборыДанных = Неопределено Тогда
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		Иначе
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
		КонецЕсли;
		
		//Создадим и инициализируем процессор вывода результата
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		//Обозначим начало вывода
		ПроцессорВывода.НачатьВывод();
		Состояние(НСТР("ru='Если Вы хотите прервать вывод отчета, нажмите Ctrl+Break'"));
		
		ТаблицаЗафиксирована = Не ВыводВФормуОтчета;
		
		Результат.ФиксацияСверху = 0;
		//Основной цикл вывода отчета
		Пока Истина Цикл
			
			ОбработкаПрерыванияПользователя();
			//Получим следующий элемент результата компоновки
			ЭлементРезультата = ПроцессорКомпоновки.Следующий();
			
			Если ЭлементРезультата = Неопределено Тогда
				//Следующий элемент не получен - заканчиваем цикл вывода
				Прервать;				
			Иначе
				
				// Зафиксируем шапку
				Если Не ОтчетОбъект.РасширеннаяНастройка 
					И Не ТаблицаЗафиксирована 
					И ЭлементРезультата.ЗначенияПараметров.Количество() > 0 
					И ТипЗнч(ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура[0]) <> Тип("ДиаграммаКомпоновкиДанных") Тогда
					ТаблицаЗафиксирована = Истина;
					Результат.ФиксацияСверху = Результат.ВысотаТаблицы;
				КонецЕсли;
				
				//Элемент получен - выведем его при помощи процессора вывода
				ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
				
			КонецЕсли;
			
		КонецЦикла;
		
		//Обозначем завершение вывода
		ПроцессорВывода.ЗакончитьВывод();
		
		//опять меняем запрос на изначальный 
	Если ТипЗнч(ОтчетОбъект) = Вычислить("Тип(""ОтчетОбъект.ДинамикаЗадолженностиПоставщикам"")")
		ИЛИ ТипЗнч(ОтчетОбъект) = Вычислить("Тип(""ОтчетОбъект.ДинамикаЗадолженностиПокупателей"")") Тогда
		Схема.НаборыДанных[0].Запрос = СтрЗаменить(Схема.НаборыДанных[0].Запрос, Врег("Первые ") + ОтчетОбъект.КоличествоВыводимыхЗаписейВДиаграмме, Врег("Первые 7"));
	КонецЕсли;

		
	Исключение
		Вопрос("Отчет не сформирован!" + Символы.ПС + ТиповыеОтчеты.ПолучитьОписаниеРодительскойПричиныИнформацииОбОшибке(ИнформацияОбОшибке()), РежимДиалогаВопрос.ОК);
	КонецПопытки;

КонецПроцедуры

Функция ПолучитьТипДополненияПоИнтервалу(Интервал = 0) Экспорт
	
	ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
	
	Если Интервал = 6 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.День;
	ИначеЕсли Интервал = 7 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Неделя;
	ИначеЕсли Интервал = 8 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Декада;
	ИначеЕсли Интервал = 9 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Месяц;
	ИначеЕсли Интервал = 10 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Квартал;
	ИначеЕсли Интервал = 11 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Полугодие;
	ИначеЕсли Интервал = 12 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Год;
	КонецЕсли;
	
	Возврат ТипДополнения;	
	
КонецФункции

Процедура УстановитьИнтервал(ОбъектОтчета) Экспорт
	
	ДлинаПериода = (?(ЗначениеЗаполнено(ОбъектОтчета.КонецПериода), ОбъектОтчета.КонецПериода, Дата(3999, 12, 31)) - ОбъектОтчета.НачалоПериода) / (60*60*24);
	
	Если ОбъектОтчета.Интервал < 6 ИЛИ ОбъектОтчета.Интервал > 12 Тогда
		ОбъектОтчета.Интервал = 6;
	КонецЕсли;
	
	Если ДлинаПериода < 31 Тогда
		ОбъектОтчета.Интервал = 6;
	ИначеЕсли ДлинаПериода >= 31 И ДлинаПериода < 62 Тогда
		ОбъектОтчета.Интервал = 7;
	ИначеЕсли ДлинаПериода >= 62 И ДлинаПериода < 610 Тогда
		ОбъектОтчета.Интервал = 9;
	ИначеЕсли ДлинаПериода >= 610 Тогда
		ОбъектОтчета.Интервал = 10;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДополнениеПоляГруппировки(Группировка, ТипДополнения, ИмяПоля = "Период") Экспорт

	Для каждого ПолеГруппировки Из Группировка.ПоляГруппировки.Элементы Цикл
		Если ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля) Тогда
			ПолеГруппировки.ТипДополнения = ТипДополнения;
			Возврат;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры


Функция ПолучитьДенежныеСредства(Период, СписокОрганизаций)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Наличные.СуммаОстаток КАК Остаток
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(
	               |			&ГраницаПериод,
	               |			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДенежныеСредстваВКассе)),
	               |			,
	               |			Организация В (&СписокОрганизаций)) КАК Наличные
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СУММА(Безналичные.СуммаОстаток)
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(
	               |			&ГраницаПериод,
	               |			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах))
	               |				ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДенежныеСредстваНаСберегательныхСчетах))
	               |				ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДенежныеСредстваНаКорреспондентскихСчетах))
	               |				ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПрочиеДенежныеСредства)),	               
	               |			,
	               |			Организация В (&СписокОрганизаций)) КАК Безналичные
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Подотчет.СуммаОстаток
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(&ГраницаПериод, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочнаяДебиторскаяЗадолженностьРаботников)), , Организация В (&СписокОрганизаций)) КАК Подотчет
	               |ИТОГИ
	               |	СУММА(Остаток)
	               |ПО
	               |	ОБЩИЕ";
	
	Если НЕ ЗначениеЗаполнено(СписокОрганизаций) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация В (&СписокОрганизаций)", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ГраницаПериод", Новый Граница(Период, ВидГраницы.Включая)); 
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Выборка.Следующий();
		Возврат Выборка.Остаток;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

Функция ПолучитьПродажи(НачалоПериода, КонецПериода, СписокОрганизаций)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СУММА(ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) - ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) + ЕСТЬNULL(ТиповойОборотыНДС.СуммаОборотКт, 0) - ЕСТЬNULL(ТиповойОборотыНДС.СуммаОборотДт, 0)) КАК Сумма
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Обороты(&НачалоПериода, &КонецПериода, , Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг_)), , Организация В (&СписокОрганизаций), , ) КАК ТиповойОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(&НачалоПериода, &КонецПериода, , Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.НалогНаДобавленнуюСтоимость)), , Организация В (&СписокОрганизаций), , ) КАК ТиповойОборотыНДС
	               |		ПО ТиповойОбороты.КорСубконто1 = ТиповойОборотыНДС.КорСубконто1
	               |			И ТиповойОбороты.КорСубконто2 = ТиповойОборотыНДС.КорСубконто2";
	
	Если НЕ ЗначениеЗаполнено(СписокОрганизаций) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация В (&СписокОрганизаций)", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  		КонецПериода);
	Запрос.УстановитьПараметр("СписокОрганизаций",  СписокОрганизаций);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Сумма;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПоступлениеДенежныхСредств(НачалоПериода, КонецПериода, СписокОрганизаций)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	СчетаКонтрагентов.Ссылка КАК Счет
	               |ПОМЕСТИТЬ СчетаКД
	               |ИЗ
	               |	ПланСчетов.Типовой.ВидыСубконто КАК СчетаКонтрагентов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ТиповойВидыСубконто.Ссылка КАК Ссылка
	               |		ИЗ
	               |			ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто
	               |		ГДЕ
	               |			ТиповойВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Договоры)) КАК СчетаДоговоров
	               |		ПО СчетаКонтрагентов.Ссылка = СчетаДоговоров.Ссылка
	               |ГДЕ
	               |	СчетаКонтрагентов.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(ОплатаОтКонтрагентов.СуммаОборотДт, 0) КАК Сумма
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			,
	               |			Счет В ИЕРАРХИИ (&СчетаДС),
	               |			,
	               |			Организация В (&СписокОрганизаций),
	               |			КорСчет В
	               |				(ВЫБРАТЬ
	               |					СчетаКД.Счет
	               |				ИЗ
	               |					СчетаКД КАК СчетаКД),
	               |			&ВидыСубконтоКД) КАК ОплатаОтКонтрагентов
	               |				 
	               |ИТОГИ
	               |	СУММА(Сумма)
	               |ПО
	               |	ОБЩИЕ";
	
	Если НЕ ЗначениеЗаполнено(СписокОрганизаций) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация В (&СписокОрганизаций)", "");
	КонецЕсли;
	
	СчетаДС = Новый СписокЗначений;
	СчетаДС.Добавить(ПланыСчетов.Типовой.ДенежныеСредства);
		
	ВидыСубконтоКД = Новый СписокЗначений;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	
    Запрос.УстановитьПараметр("ВидыСубконтоКД", 	ВидыСубконтоКД);
	Запрос.УстановитьПараметр("СчетаДС",        	СчетаДС);
	Запрос.УстановитьПараметр("НачалоПериода",  	НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",   	КонецПериода);
	Запрос.УстановитьПараметр("СписокОрганизаций",  СписокОрганизаций);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Выборка.Следующий();
		Возврат Выборка.Сумма;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПрибыль(НачалоПериода, КонецПериода, СписокОрганизаций)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(ДоходыРасходы.Доход, 0) - ЕСТЬNULL(ДоходыРасходы.Расход, 0) КАК Сумма
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СУММА(Доходы.СуммаОборотКт) КАК Доход,
	               |		0 КАК Расход
	               |	ИЗ
	               |		РегистрБухгалтерии.Типовой.Обороты(&НачалоПериода, &КонецПериода, , 
	               | 			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг_))
	               |			, , Организация В (&СписокОрганизаций), , ) КАК Доходы
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		0,
	               |		ТиповойОбороты.СуммаОборотДт
	               |	ИЗ
	               |		РегистрБухгалтерии.Типовой.Обороты(&НачалоПериода, &КонецПериода, , 
	               |	   			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.СебестоимостьРеализованнойПродукцииИОказанныхУслуг_),
	               |						ЗНАЧЕНИЕ(ПланСчетов.Типовой.РасходыПоРеализацииПродукцииИОказаниюУслуг_),
	               |						ЗНАЧЕНИЕ(ПланСчетов.Типовой.АдминистративныеРасходы_),
	               |						ЗНАЧЕНИЕ(ПланСчетов.Типовой.РасходыНаФинансирование),
	               |						ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПрочиеРасходы_))
	               |						, , Организация В (&СписокОрганизаций), , ) КАК ТиповойОбороты) КАК ДоходыРасходы";
	
	Если НЕ ЗначениеЗаполнено(СписокОрганизаций) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация В (&СписокОрганизаций)", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериода",  	НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода",   	КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("СписокОрганизаций",  СписокОрганизаций);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Сумма;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

Функция ПолучитьЗадолженностьПокупателей(Период, СписокОрганизаций) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВложенныйЗапрос.СуммаОстаток КАК СуммаОстаток
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ДолгПокупателей.СуммаРазвернутыйОстатокДт КАК СуммаОстаток,
	               |		ДолгПокупателей.Счет КАК Счет,
	               |		ДолгПокупателей.Субконто1 КАК Субконто1,
	               |		ДолгПокупателей.Субконто2 КАК Субконто2
	               |	ИЗ
	               |		РегистрБухгалтерии.Типовой.Остатки(
	               |				&Период,
	               |				(НЕ Счет.Забалансовый)
				   |					И (Счет В ИЕРАРХИИ (&СчетаРасчетов) ИЛИ Счет В (&СчетаПользователя))
	               |					И (НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета)),
	               |				&ВидыСубконтоКД,
	               |					 Организация В(&СписокОрганизаций)) КАК ДолгПокупателей) КАК ВложенныйЗапрос
	               |ИТОГИ
	               |	СУММА(СуммаОстаток)
	               |ПО
	               |	ОБЩИЕ,
	               |	ВложенныйЗапрос.Счет,
	               |	ВложенныйЗапрос.Субконто2";
	
	Если Не ЗначениеЗаполнено(СписокОрганизаций) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация В(&СписокОрганизаций)", "");
	КонецЕсли;
	
	ВидыСубконтоКД = Новый СписокЗначений;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконтоКД"  , ВидыСубконтоКД);
	Запрос.УстановитьПараметр("Период"          , Новый Граница(Период, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СписокОрганизаций",  СписокОрганизаций);
	Запрос.УстановитьПараметр("ИсключенныеСчета", ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(1));
	Запрос.УстановитьПараметр("СчетаРасчетов",    ВозвратитьМассивСчетовДтКтЗадолженности(Ложь, Истина, Истина));
	Запрос.УстановитьПараметр("СчетаПользователя", ПолучитьСписокСчетовПользователяДляРасчетаЗадолженности(1));
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.СуммаОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;
    		
КонецФункции

Функция ПолучитьПросроченнуюЗадолженностьПокупателей(Период, СписокОрганизаций)
	
	Запрос = Новый Запрос;
	
	УстановитьТекстЗапроса(Запрос, Период, СписокОрганизаций);
	
	ПросроченнаяЗадолженность1 = Запрос.Выполнить();	
	
	Запрос.УстановитьПараметр("ПросроченнаяЗадолженность1", ПросроченнаяЗадолженность1);

	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПросроченнаяЗадолженность1.Организация,
	|	ПросроченнаяЗадолженность1.Контрагент,
	|	ПросроченнаяЗадолженность1.Договор,
	|	ПросроченнаяЗадолженность1.Просрочено
	|ПОМЕСТИТЬ ПросроченнаяЗадолженность1
	|ИЗ
	|	&ПросроченнаяЗадолженность1 КАК ПросроченнаяЗадолженность1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ПросроченнаяЗадолженность.Просрочено) КАК Просрочено
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПросроченнаяЗадолженность1.Организация КАК Организация,
	|		ПросроченнаяЗадолженность1.Контрагент КАК Контрагент,
	|		ПросроченнаяЗадолженность1.Договор КАК Договор,
	|		ПросроченнаяЗадолженность1.Просрочено КАК Просрочено
	|	ИЗ
	|		ПросроченнаяЗадолженность1 КАК ПросроченнаяЗадолженность1) КАК ПросроченнаяЗадолженность
	|ИТОГИ
	|	СУММА(Просрочено)
	|ПО
	|	ОБЩИЕ";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Просрочено;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции 

Процедура УстановитьТекстЗапроса(Запрос, КонДата, СписокОрганизаций)
	
	ВидыСубконтоКД = Новый СписокЗначений;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконтоКД", 	ВидыСубконтоКД);
	Запрос.УстановитьПараметр("ГраницаОстатков", 	Новый Граница(КонДата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СписокОрганизаций",	СписокОрганизаций);
	Запрос.УстановитьПараметр("СтандартныйСрокОплатыПокупателей", Константы.СрокОплатыПокупателей.Получить());
	Запрос.УстановитьПараметр("КонецИнтервала", 	КонДата);
	Запрос.УстановитьПараметр("СчетаДтЗадолженности", ВозвратитьМассивСчетовДтКтЗадолженности(Ложь, Истина, Истина));
	Запрос.УстановитьПараметр("ИсключенныеСчета", ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(1));
	Запрос.УстановитьПараметр("СчетаПользователя", ПолучитьСписокСчетовПользователяДляРасчетаЗадолженности(1));
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапросаПоОстаткам =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СчетаКонтрагентов.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаКД
	|ИЗ
	|	ПланСчетов.Типовой.ВидыСубконто КАК СчетаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТиповойВидыСубконто.Ссылка КАК Ссылка
	|		ИЗ
	|			ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто
	|		ГДЕ
	|			ТиповойВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Договоры)) КАК СчетаДоговоров
	|		ПО СчетаКонтрагентов.Ссылка = СчетаДоговоров.Ссылка
	|ГДЕ
	|	СчетаКонтрагентов.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты)
	|	И (СчетаКонтрагентов.Ссылка В ИЕРАРХИИ(&СчетаДтЗадолженности) ИЛИ СчетаКонтрагентов.Ссылка В (&СчетаПользователя))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыОстатки.Организация,
	|	ВзаиморасчетыОстатки.Субконто1 КАК Контрагент,
	|	ВзаиморасчетыОстатки.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).УстановленСрокОплаты
	|			ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокОплаты
	|		ИНАЧЕ &СтандартныйСрокОплатыПокупателей
	|	КОНЕЦ КАК СрокОплаты,
	|	ВзаиморасчетыОстатки.СуммаОстаток КАК ОстатокДолга
	|ПОМЕСТИТЬ ОстаткиДолга
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&ГраницаОстатков,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаКД.Счет
	|				ИЗ
	|					СчетаКД КАК СчетаКД) И (НЕ Счет.Забалансовый)
	|					И (НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета)),
	|			&ВидыСубконтоКД,
	|				Организация В (&СписокОрганизаций)) КАК ВзаиморасчетыОстатки
	|ГДЕ
	|	ВзаиморасчетыОстатки.СуммаОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОстаткиДолга.СрокОплаты КАК СрокОплаты
	|ИЗ
	|	ОстаткиДолга КАК ОстаткиДолга
	|
	|УПОРЯДОЧИТЬ ПО
	|	СрокОплаты";
	
	Если НЕ ЗначениеЗаполнено(СписокОрганизаций) Тогда
		ТекстЗапросаПоОстаткам = СтрЗаменить(ТекстЗапросаПоОстаткам, "Организация В (&СписокОрганизаций)", "");
	КонецЕсли;
	Запрос.Текст = ТекстЗапросаПоОстаткам;
	
	МассивСроковОплаты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СрокОплаты");
	
	Если МассивСроковОплаты.Количество() = 0 Тогда
		МассивСроковОплаты.Добавить(0);
	КонецЕсли;
	
	ТекстОстатки = 
	"ВЫБРАТЬ
	|	ОстаткиДолга.Организация,
	|	ОстаткиДолга.Контрагент,
	|	ОстаткиДолга.Договор,
	|	ОстаткиДолга.СрокОплаты,
	|	ОстаткиДолга.ОстатокДолга,
	|	ЕСТЬNULL(Обороты.УвеличениеДолга, 0) КАК УвеличениеДолга
	|ИЗ
	|	ОстаткиДолга КАК ОстаткиДолга";
	
	ТекстОборотыПоСроку = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыОбороты.Организация КАК Организация,
	|	ВзаиморасчетыОбороты.Субконто1 КАК Контрагент,
	|	ВзаиморасчетыОбороты.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыОбороты.СуммаОборотДт > 0
	|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ВзаиморасчетыОбороты.СуммаОборотКт < 0
	|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотКт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УвеличениеДолга
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(
	|			&НачалоИнтервала1,
	|			&КонецИнтервала,
	|			,
	|			Счет В (ВЫБРАТЬ СчетаКД.Счет ИЗ СчетаКД КАК СчетаКД) И (НЕ Счет.Забалансовый)
	|					И (НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета)),
	|			&ВидыСубконтоКД,
	|			(Субконто1, Субконто2) В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ОстаткиДолга.Контрагент,
	|					ОстаткиДолга.Договор
	|				ИЗ
	|					ОстаткиДолга КАК ОстаткиДолга
	|				ГДЕ
	|					ОстаткиДолга.СрокОплаты = &СрокОплаты1) 
	|			И Организация В (&СписокОрганизаций),
	|			,) КАК ВзаиморасчетыОбороты";
	
	Если НЕ ЗначениеЗаполнено(СписокОрганизаций) Тогда
		ТекстОборотыПоСроку = СтрЗаменить(ТекстОборотыПоСроку, "И Организация В (&СписокОрганизаций)", "");
	КонецЕсли;
	
	ТекстОборотыПоВсемСрокам = "";
	Для Ном = 1 По МассивСроковОплаты.Количество() Цикл
		
		СрокОплаты = МассивСроковОплаты[Ном - 1];
		Запрос.УстановитьПараметр("НачалоИнтервала" + Ном, НачалоДня(КонДата - СрокОплаты * 60*60*24));
		Запрос.УстановитьПараметр("СрокОплаты" + Ном, СрокОплаты);
		
		ТекстОборотыПоСрокуНом = СтрЗаменить(ТекстОборотыПоСроку, "&НачалоИнтервала1", "&НачалоИнтервала" + Ном);
		ТекстОборотыПоСрокуНом = СтрЗаменить(ТекстОборотыПоСрокуНом, "&СрокОплаты1", "&СрокОплаты" + Ном);
		
		ТекстОборотыПоВсемСрокам = ТекстОборотыПоВсемСрокам
		+ ?(ПустаяСтрока(ТекстОборотыПоВсемСрокам), "", "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|") 
		+ ТекстОборотыПоСрокуНом;
	
	КонецЦикла;
	
	ТекстОстаткиИОбороты = ТекстОстатки + "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(" + ТекстОборотыПоВсемСрокам + ") КАК Обороты
	|	ПО ОстаткиДолга.Организация = Обороты.Организация
	|		И ОстаткиДолга.Контрагент = Обороты.Контрагент
	|		И ОстаткиДолга.Договор = Обороты.Договор";
	
	ТекстПросрочено =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиИОбороты.Организация,
	|	ОстаткиИОбороты.Контрагент,
	|	ОстаткиИОбороты.Договор,
	|	ОстаткиИОбороты.СрокОплаты,
	|	ОстаткиИОбороты.ОстатокДолга,
	|	ОстаткиИОбороты.ОстатокДолга - 
	|		ВЫБОР
	|			КОГДА ОстаткиИОбороты.ОстатокДолга < ОстаткиИОбороты.УвеличениеДолга
	|				ТОГДА ОстаткиИОбороты.ОстатокДолга
	|			ИНАЧЕ ОстаткиИОбороты.УвеличениеДолга
	|		КОНЕЦ КАК Просрочено
	|ИЗ
	|	(" + ТекстОстаткиИОбороты + ") КАК ОстаткиИОбороты
	|ГДЕ
	|	ОстаткиИОбороты.ОстатокДолга - 
	|		ВЫБОР
	|			КОГДА ОстаткиИОбороты.ОстатокДолга < ОстаткиИОбороты.УвеличениеДолга
	|				ТОГДА ОстаткиИОбороты.ОстатокДолга
	|			ИНАЧЕ ОстаткиИОбороты.УвеличениеДолга
	|		КОНЕЦ > 0";
	
	Запрос.Текст = ТекстПросрочено;
	
КонецПроцедуры

Функция ПолучитьОборотныеСредства(НачалоПериода, КонецПериода, СписокОрганизаций, СуммаНаНачало, СуммаНаКонец)
	
	ПС = ПланыСчетов["Типовой"];
	Счет1000   = ПС.ДенежныеСредства;
	Счет1010   = ПС.ДенежныеСредстваВКассе;
	Счет1021   = ПС.ДенежныеСредстваВПути_;
	Счет1022   = ПС.ДенежныеСредстваВПутиКонвертацияВалюты;
	Счет1030   = ПС.ДенежныеСредстваНаТекущихБанковскихСчетах;
	Счет1040   = ПС.ДенежныеСредстваНаКорреспондентскихСчетах;
	Счет1050   = ПС.ДенежныеСредстваНаСберегательныхСчетах;
	Счет1060   = ПС.ПрочиеДенежныеСредства;
	
	Счет1100   = ПС.КраткосрочныеФинансовыеИнвестиции;
	Счет1110   = ПС.КраткосрочныеПредоставленныеЗаймы;
	Счет1120   = ПС.КраткосрочныеФинансовыеАктивыПредназначенныеДляПродажи;
	Счет1130   = ПС.КраткосрочныеИнвестицииУдерживаемыеДоПогашения;
	Счет1140   = ПС.КраткосрочныеФинансовыеИнвестицииДляПродажи;
	Счет1150   = ПС.ПрочиеКраткосрочныеФинансовыеИнвестиции;
	
	Счет1200   = ПС.КраткосрочнаяДебиторскаяЗадолженность;
	Счет1200   = ПС.КраткосрочнаяДебиторскаяЗадолженность;
	
	Счет1210  = ПС.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков;
	Счет1220  = ПС.КраткосрочнаяДебиторскаяЗадолженностьДочернихОрганизаций;
	Счет1230  = ПС.КраткосрочнаяДебиторскаяЗадолженностьАссоциированныхИСовместныхОрганизаций;
	Счет1240  = ПС.КраткосрочнаяДебиторскаяЗадолженностьПредставительств;
	
	Счет1250  = ПС.КраткосрочнаяДебиторскаяЗадолженностьРаботников;
	Счет1252  = ПС.КраткосрочнаяЗадолженностьПоВыплаченнойЗаработнойПлате;
	Счет1253  = ПС.КраткосрочныеЗаймыПредоставленныеРаботникамСоб;
	Счет1254  = ПС.ПрочаяКраткосрочнаяЗадолжностьРаботниковПорчаНедостачи;

	Счет1260  = ПС.КраткосрочнаяДебиторскаяЗадолженностьПоАренде;
	Счет1270  = ПС.КраткосрочныеВознагражденияКПолучению ;
	Счет1280  = ПС.ПрочаяКраткосрочнаяДебиторскаяЗадолженность_; 
	Счет1290  = ПС.РезервПоСомнительнымТребованиям; 
		
	Счет1610  = ПС.КраткосрочныеАвансыВыданные;
	Счет1620  = ПС.КраткосрочныеРасходыБудущихПериодов;
	Счет1630  = ПС.ПрочиеКраткосрочныеАктивы;
	
	Счет1251   = ПС.КраткосрочнаяЗадолженностьПодотчетныхЛиц;
	
	Счет1300   = ПС.Запасы;
	Счет1310   = ПС.СырьеИМатериалы;
	Счет1320   = ПС.ГотоваяПродукция;
	Счет1330   = ПС.Товары;
	//Счет1340   = ПС.НезавершенноеПроизводство;
	//Счет1341   = ПС.НезавершенноеПроизводство_ОсновноеПроизводство;
	//Счет1342   = ПС.НезавершенноеПроизводство_ПолуфабрикатыСобственногоПроизводства;
	//Счет1343   = ПС.НезавершенноеПроизводство_ВспомогательныеПроизводства;
	
	Счет1351   = ПС.ПрочиеЗапасы;
	
	Счет1361   = ПС.РезервПоСписаниюСырьяИМатериалов;
	Счет1362   = ПС.РезервПоСписаниюГотовойПродукции;
	Счет1363   = ПС.РезервПоСписаниюТоваров;
			

	ПромежуточныеДанные = ОтчетыДляРуководителя.ПолучитьОписаниеТаблицыПромежуточныеДанные();
	
	ВыборкаПоСчету = ПолучитьВыборкуПоСчету(0, НачалоПериода, КонецПериода, СписокОрганизаций); 
	
	// Денежные средства (порядок 0)
	//Наличные
	П1Н_1010  = ПолучитьИтог(Счет1010, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П1К_1010  = ПолучитьИтог(Счет1010   , ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	
	П1Н = П1Н_1010;
	П1К = П1К_1010;
			
	//безналичные
	П2Н_1030  = ПолучитьИтог(Счет1030, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П2К_1030  = ПолучитьИтог(Счет1030   , ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	
	П2Н_1040  = ПолучитьИтог(Счет1040 , ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П2К_1040  = ПолучитьИтог(Счет1040 , ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	
	П2Н_1050  = ПолучитьИтог(Счет1050 , ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П2К_1050  = ПолучитьИтог(Счет1050 , ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
			
	П2Н_1060  = ПолучитьИтог(Счет1060 , ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П2К_1060  = ПолучитьИтог(Счет1060 , ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
			
	П2Н = П2Н_1030 + П2Н_1040  + П2Н_1050 + П2Н_1060;
	П2К = П2К_1030 + П2К_1040  + П2К_1050 + П2К_1060;
	
	//деньги в пути
	П3Н_1021  = ПолучитьИтог(Счет1021, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П3К_1021  = ПолучитьИтог(Счет1021   , ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
			
	П3Н_1022  = ПолучитьИтог(Счет1022, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П3К_1022  = ПолучитьИтог(Счет1022   , ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
			
	П3Н = П3Н_1021 + П3Н_1022;
	П3К = П3К_1021 + П3К_1022;
	
	//Общая сумма по денежным средстсвам
	П0Н = П1Н + П2Н + П3Н;
	П0К = П1К + П2К + П3К; 	
			 		
	//// Краткосрочные финансовые вложения 
	
	П4Н_1110  = ПолучитьИтог(Счет1110, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П4К_1110  = ПолучитьИтог(Счет1110, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	         	
	П4Н_1120  = ПолучитьИтог(Счет1120, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П4К_1120  = ПолучитьИтог(Счет1120, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
		
	П4Н_1130  = ПолучитьИтог(Счет1130, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П4К_1130  = ПолучитьИтог(Счет1130, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
		
	П4Н_1140  = ПолучитьИтог(Счет1140, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П4К_1140  = ПолучитьИтог(Счет1140, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
		
	П4Н_1150  = ПолучитьИтог(Счет1150, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П4К_1150  = ПолучитьИтог(Счет1150, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
		
	П4Н = П4Н_1110 + П4Н_1120 + П4Н_1130 + П4Н_1140 + П4Н_1150;
	П4К = П4К_1110 + П4К_1120 + П4К_1130 + П4К_1140 + П4К_1150;
	
	//////////Задолженность покупателей(расчет составляющих)////////////////
	ИсключенныеСчета = ОтчетыДляРуководителя.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(1) ;
	Если ИсключенныеСчета = Неопределено Тогда
		 ИсключенныеСчета = Новый СписокЗначений();
	 КонецЕсли;
	 
	ВыборкаПоСчетуЗ = ПолучитьВыборкуПоСчету(0, НачалоПериода, КонецПериода, СписокОрганизаций); 
	
	П6Н1210 = 0;
	П6К1210 = 0;
	П6Н1220 = 0;
	П6К1220 = 0;
	П6Н1230 = 0;
	П6К1230 = 0;
	П6Н1240 = 0;
	П6К1240 = 0;
	П6Н1260 = 0;
	П6К1260 = 0;
	П6Н1270 = 0;
	П6К1270 = 0;
	П6Н1280 = 0;
	П6К1280 = 0;
	П6Н1610 = 0;
	П6К1610 = 0;	
		
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1210) = Неопределено Тогда
		П6Н1210 = ПолучитьИтог(Счет1210, ВыборкаПоСчетуЗ, "СуммаНачальныйОстатокДт");
		П6К1210 = ПолучитьИтог(Счет1210, ВыборкаПоСчетуЗ, "СуммаКонечныйОстатокДт");
	КонецЕсли;
	
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1220) = Неопределено Тогда
		П6Н1220 = ПолучитьИтог(Счет1220, ВыборкаПоСчетуЗ, "СуммаНачальныйОстатокДт");
		П6К1220 = ПолучитьИтог(Счет1220, ВыборкаПоСчетуЗ, "СуммаКонечныйОстатокДт");
	КонецЕсли;
	
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1230) = Неопределено Тогда
		П6Н1230 = ПолучитьИтог(Счет1230, ВыборкаПоСчетуЗ, "СуммаНачальныйОстатокДт");
		П6К1230 = ПолучитьИтог(Счет1230, ВыборкаПоСчетуЗ, "СуммаКонечныйОстатокДт");
	КонецЕсли;

	Если ИсключенныеСчета.НайтиПоЗначению(Счет1240) = Неопределено Тогда
		П6Н1240 = ПолучитьИтог(Счет1240, ВыборкаПоСчетуЗ, "СуммаНачальныйОстатокДт");
		П6К1240 = ПолучитьИтог(Счет1240, ВыборкаПоСчетуЗ, "СуммаКонечныйОстатокДт");
	КонецЕсли;
		
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1260) = Неопределено Тогда
		П6Н1260 = ПолучитьИтог(Счет1260, ВыборкаПоСчетуЗ, "СуммаНачальныйОстатокДт");
		П6К1260 = ПолучитьИтог(Счет1260, ВыборкаПоСчетуЗ, "СуммаКонечныйОстатокДт");
	КонецЕсли;

	Если ИсключенныеСчета.НайтиПоЗначению(Счет1270) = Неопределено Тогда
		П6Н1270 = ПолучитьИтог(Счет1270, ВыборкаПоСчетуЗ, "СуммаНачальныйОстатокДт");
		П6К1270 = ПолучитьИтог(Счет1270, ВыборкаПоСчетуЗ, "СуммаКонечныйОстатокДт");
	КонецЕсли;
	
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1280) = Неопределено Тогда
		П6Н1280 = ПолучитьИтог(Счет1280, ВыборкаПоСчетуЗ, "СуммаНачальныйОстатокДт");
		П6К1280 = ПолучитьИтог(Счет1280, ВыборкаПоСчетуЗ, "СуммаКонечныйОстатокДт");
	КонецЕсли;  
	
	П6Н1290 = ПолучитьИтог(Счет1290, ВыборкаПоСчетуЗ, "СуммаНачальныйОстатокКт");
	П6К1290 = ПолучитьИтог(Счет1290, ВыборкаПоСчетуЗ, "СуммаКонечныйОстатокКт");
		  	
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1610) = Неопределено Тогда
		П6Н1610 = ПолучитьИтог(Счет1610, ВыборкаПоСчетуЗ, "СуммаНачальныйОстатокДт");
		П6К1610 = ПолучитьИтог(Счет1610, ВыборкаПоСчетуЗ, "СуммаКонечныйОстатокДт");
	КонецЕсли;  
	П6Н = П6Н1210 + П6Н1220 + П6Н1230 + П6Н1240 +  П6Н1260 + П6Н1270 + П6Н1280 - П6Н1290 + П6Н1610;
	П6К = П6К1210 + П6К1220 + П6К1230 + П6К1240 +  П6К1260 + П6К1270 + П6К1280 - П6К1290 + П6К1610;
	
	 //задолженность подотчтетных лиц
	П7Н_1251  = ПолучитьИтог(Счет1251, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П7К_1251  = ПолучитьИтог(Счет1251, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");

	П7Н = П7Н_1251;
	П7К = П7К_1251;
    
	//прочая задолженность работников
	П8Н_1252 = ПолучитьИтог(Счет1252, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П8К_1252 = ПолучитьИтог(Счет1252, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	
	П8Н_1253 = ПолучитьИтог(Счет1253, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П8К_1253 = ПолучитьИтог(Счет1253, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	
	
	П8Н_1254 = ПолучитьИтог(Счет1254, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П8К_1254 = ПолучитьИтог(Счет1254, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
		
	
	П8Н = П8Н_1252 + П8Н_1253 + П8Н_1254;
	П8К = П8К_1252 + П8К_1253 + П8К_1254;

	//прочие активы
	П9Н_1620 = ПолучитьИтог(Счет1620, ВыборкаПоСчетуЗ, "СуммаНачальныйОстатокДт");
	П9К_1620 = ПолучитьИтог(Счет1620, ВыборкаПоСчетуЗ, "СуммаКонечныйОстатокДт");
		
	П9Н_1630 = ПолучитьИтог(Счет1630, ВыборкаПоСчетуЗ, "СуммаНачальныйОстатокДт");
	П9К_1630 = ПолучитьИтог(Счет1630, ВыборкаПоСчетуЗ, "СуммаКонечныйОстатокДт");
	
	П9Н = П9Н_1620 + П9Н_1630;
	П9К = П9К_1620 + П9К_1630;
	
	
	//общая задолженность покупателей
	П5Н = П6Н + П7Н + П8Н + П9Н;
	П5К = П6К + П7К + П8К + П9К;                                        
	
	//////Запасы(расчет составляющих)///////////////////////
	
		//Сырье и материалы////////
	П10Н_1310  = ПолучитьИтог(Счет1310, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П10К_1310  = ПолучитьИтог(Счет1310, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
		
	П10Н_1361  = ПолучитьИтог(Счет1361, ВыборкаПоСчету, "СуммаНачальныйОстатокКт");
	П10К_1361  = ПолучитьИтог(Счет1361, ВыборкаПоСчету, "СуммаКонечныйОстатокКт");
	
	П10Н = П10Н_1310 - П10Н_1361;
	П10К = П10К_1310 - П10К_1361;
	
	//Готовая продукция	
	П11Н_1320  = ПолучитьИтог(Счет1320, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П11К_1320  = ПолучитьИтог(Счет1320, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
		
	П11Н_1362  = ПолучитьИтог(Счет1362, ВыборкаПоСчету, "СуммаНачальныйОстатокКт");
	П11К_1362  = ПолучитьИтог(Счет1362, ВыборкаПоСчету, "СуммаКонечныйОстатокКт");
    	
	П11Н = П11Н_1320 - П11Н_1362;
	П11К = П11К_1320 - П11К_1362;
	
	//Товары
	П12Н_1330  = ПолучитьИтог(Счет1330, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П12К_1330  = ПолучитьИтог(Счет1330, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
		 	
	П12Н_1363 = ПолучитьИтог(Счет1363, ВыборкаПоСчету, "СуммаНачальныйОстатокКт");
	П12К_1363 = ПолучитьИтог(Счет1363, ВыборкаПоСчету, "СуммаКонечныйОстатокКт");
    		
	П12Н = П12Н_1330 - П12Н_1363;
	П12К = П12К_1330 - П12К_1363;
			
	//незавершенное производство
	//П13Н_1341  = ПолучитьИтог(Счет1341, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	//П13К_1341  = ПолучитьИтог(Счет1341, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	//
	//П13Н_1342  = ПолучитьИтог(Счет1342, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	//П13К_1342  = ПолучитьИтог(Счет1342, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	//	
	//П13Н_1343  = ПолучитьИтог(Счет1343, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	//П13К_1343  = ПолучитьИтог(Счет1343, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	//	
	//П13Н = П13Н_1341 + П13Н_1342 + П13Н_1343; 
	//П13К = П13К_1341 + П13К_1342 + П13К_1343; 
	//П13Н_1341  = ПолучитьИтог(Счет1341, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	//П13К_1341  = ПолучитьИтог(Счет1341, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	//
	//П13Н_1342  = ПолучитьИтог(Счет1342, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	//П13К_1342  = ПолучитьИтог(Счет1342, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	//	
	//П13Н_1343  = ПолучитьИтог(Счет1343, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	//П13К_1343  = ПолучитьИтог(Счет1343, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	//	
	//П13Н = П13Н_1341 + П13Н_1342 + П13Н_1343; 
	//П13К = П13К_1341 + П13К_1342 + П13К_1343; 
		
	//прочие запасы
	П14Н_1351  = ПолучитьИтог(Счет1351, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П14К_1351  = ПолучитьИтог(Счет1351, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
			
	П14Н = П14Н_1351; 
	П14К = П14К_1351; 
	
	ИтогоНаНачало = 0;
	ИтогоНаКонец  = 0;
	
	ИтогоНаНачало = ИтогоНаНачало + П0Н + П4Н + П5Н + П10Н + П11Н + П12Н +  П14Н;
	ИтогоНаКонец  = ИтогоНаКонец + П0К + П4К + П5К + П10К + П11К + П12К +  П14К;
		   	
	СуммаНаНачало = ИтогоНаНачало;
	СуммаНаКонец  = ИтогоНаКонец;  
	
	
КонецФункции // ПолучитьОборотныеСредства

Функция ПолучитьИтог(Счет, Выборка, ВидИтога)
	
	Итог = 0;
	
	Выборка.Сбросить();
	Если Выборка.НайтиСледующий(Счет, "Счет") Тогда
		Итог = Выборка[ВидИтога];	
	КонецЕсли;
	
	Возврат Итог;
	
КонецФункции

Функция ПолучитьВыборкуПоСчету(ВидОстатков, НачалоПериода, КонецПериода, СписокОрганизаций, Счета = Неопределено, ВидыСубконто = Неопределено)
	
	Запрос = Новый Запрос;
	
	СтрокаПоля = "";
	СтрокаИтог = "";
	Если ВидОстатков = 0 Тогда
		СтрокаПоля = "ТиповойОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
		|	ТиповойОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СуммаНачальныйОстатокКт,
		|	ТиповойОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
		|	ТиповойОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт";	
		
		СтрокаИтог = "СУММА(СуммаНачальныйОстатокДт),
		|	СУММА(СуммаНачальныйОстатокКт),
		|	СУММА(СуммаКонечныйОстатокДт),
		|	СУММА(СуммаКонечныйОстатокКт)";
	ИначеЕсли ВидОстатков = 1 Тогда 
		СтрокаПоля = "ТиповойОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК СуммаНачальныйРазвернутыйОстатокДт,
		|	ТиповойОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт КАК СуммаНачальныйРазвернутыйОстатокКт,
		|	ТиповойОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК СуммаКонечныйРазвернутыйОстатокДт,
		|	ТиповойОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт КАК СуммаКонечныйРазвернутыйОстатокКт";	
		
		СтрокаИтог = "СУММА(СуммаНачальныйРазвернутыйОстатокДт),
		|	СУММА(СуммаНачальныйРазвернутыйОстатокКт),
		|	СУММА(СуммаКонечныйРазвернутыйОстатокДт),
		|	СУММА(СуммаКонечныйРазвернутыйОстатокКт)";
	ИначеЕсли ВидОстатков = 2 Тогда
		СтрокаПоля = "ТиповойОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК СуммаНачальныйРазвернутыйОстатокДт,
		|	ТиповойОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт КАК СуммаНачальныйРазвернутыйОстатокКт,
		|	ТиповойОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК СуммаКонечныйРазвернутыйОстатокДт,
		|	ТиповойОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт КАК СуммаКонечныйРазвернутыйОстатокКт,
		|	ТиповойОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
		|	ТиповойОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СуммаНачальныйОстатокКт,
		|	ТиповойОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
		|	ТиповойОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт";	
		
		СтрокаИтог = "СУММА(СуммаНачальныйРазвернутыйОстатокДт),
		|	СУММА(СуммаНачальныйРазвернутыйОстатокКт),
		|	СУММА(СуммаКонечныйРазвернутыйОстатокДт),
		|	СУММА(СуммаКонечныйРазвернутыйОстатокКт),
		|	СУММА(СуммаНачальныйОстатокДт),
		|	СУММА(СуммаНачальныйОстатокКт),
		|	СУММА(СуммаКонечныйОстатокДт),
		|	СУММА(СуммаКонечныйОстатокКт)";
	КонецЕсли;
	СтрокаСубконто = "";
	СтрокаУсловие = "&НачалоПериода, &КонецПериода, , , Счет В ИЕРАРХИИ (&Счета), &ВидыСубконто, Организация В(&СписокОрганизаций)";
	Если Счета = Неопределено Тогда
		СтрокаУсловие = СтрЗаменить(СтрокаУсловие, "Счет В ИЕРАРХИИ (&Счета)", "");
	КонецЕсли;
	Если ВидыСубконто = Неопределено Тогда
		СтрокаУсловие = СтрЗаменить(СтрокаУсловие, "&ВидыСубконто", "");
	Иначе
		Для Индекс = 1 По ВидыСубконто.Количество() Цикл
			СтрокаСубконто = СтрокаСубконто + "ТиповойОстаткиИОбороты.Субконто" + Индекс + ", ";	
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойОстаткиИОбороты.Счет КАК Счет,"
	+ СтрокаСубконто + "" 
	+ СтрокаПоля + 
	" ИЗ
	|	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(" + СтрокаУсловие + ") КАК ТиповойОстаткиИОбороты
	|ИТОГИ " 
	+ СтрокаИтог + 
	"
	|ПО
	|	Счет ИЕРАРХИЯ";
	
	Если Не ЗначениеЗаполнено(СписокОрганизаций) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация В(&СписокОрганизаций)", "");	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Если КонецПериода <> '00010101000000' Тогда
		Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода) + 1);
	Иначе
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	КонецЕсли;
	Запрос.УстановитьПараметр("СписокОрганизаций",   СписокОрганизаций);
	Запрос.УстановитьПараметр("Счета", Счета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоСчету = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ВыборкаПоСчету;
	
КонецФункции


Процедура ЗаполнитьСтрокуТаблицыОперативныхДанных(ПредшествующаяДата, ТекущаяДата, Организация, СтрокаТаблицы, Номер) Экспорт
	
	Если Номер = 1 Тогда
		ЗаполнитьДенежныеСредства(СтрокаТаблицы, ПредшествующаяДата, ТекущаяДата, Организация);	
	ИначеЕсли Номер = 2 Тогда
		ЗаполнитьПродажи(СтрокаТаблицы, ПредшествующаяДата, ТекущаяДата, Организация);	
	ИначеЕсли Номер = 3 Тогда
		ЗаполнитьПоступлениеДенежныхСредств(СтрокаТаблицы, ПредшествующаяДата, ТекущаяДата, Организация);	
	ИначеЕсли Номер = 4 Тогда
		ЗаполнитьПродажиЗаПериод(СтрокаТаблицы, ТекущаяДата, Организация);	
	ИначеЕсли Номер = 5 Тогда
		ЗаполнитьПрибыль(СтрокаТаблицы, ТекущаяДата, Организация);	
	ИначеЕсли Номер = 6 Тогда
		ЗаполнитьПоступлениеДенежныхСредствЗаПериод(СтрокаТаблицы, ТекущаяДата, Организация);	
	ИначеЕсли Номер = 7 Тогда
		ЗаполнитьЗадолженностьПокупателей(СтрокаТаблицы, ТекущаяДата, Организация);	
	ИначеЕсли Номер = 8 Тогда
		ЗаполнитьПросроченнуюЗадолженностьПокупателей(СтрокаТаблицы, ТекущаяДата, Организация);	
	ИначеЕсли Номер = 9 Тогда
		ЗаполнитьОборотныеСредства(СтрокаТаблицы, ТекущаяДата, Организация);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДенежныеСредства(СтрокаТаблицы, ПредшествующаяДата, ТекущаяДата, Организация)
	
	СтрокаТаблицы.Показатель = "Остаток денежных средств";
	СтрокаТаблицы.Сегодня    = ПолучитьДенежныеСредства(КонецДня(ТекущаяДата), Организация);
	СтрокаТаблицы.Вчера      = ПолучитьДенежныеСредства(КонецДня(ПредшествующаяДата), Организация);
	СтрокаТаблицы.Изменение  = (СтрокаТаблицы.Сегодня - СтрокаТаблицы.Вчера) / ?(СтрокаТаблицы.Вчера = 0, 1, СтрокаТаблицы.Вчера) * 100;
	
КонецПроцедуры

Процедура ЗаполнитьПродажи(СтрокаТаблицы, ПредшествующаяДата, ТекущаяДата, Организация)
	
	СтрокаТаблицы.Показатель = "Продажи";
	СтрокаТаблицы.Сегодня    = ПолучитьПродажи(НачалоДня(ТекущаяДата), КонецДня(ТекущаяДата), Организация);
	СтрокаТаблицы.Вчера      = ПолучитьПродажи(НачалоДня(ПредшествующаяДата), КонецДня(ПредшествующаяДата), Организация);
	СтрокаТаблицы.Изменение  = РассчитатьИзменение(СтрокаТаблицы.Вчера, СтрокаТаблицы.Сегодня);
	
КонецПроцедуры

Процедура ЗаполнитьПоступлениеДенежныхСредств(СтрокаТаблицы, ПредшествующаяДата, ТекущаяДата, Организация)
	
	СтрокаТаблицы.Показатель = "Поступление денежных средств";
	СтрокаТаблицы.Сегодня    = ПолучитьПоступлениеДенежныхСредств(НачалоДня(ТекущаяДата), КонецДня(ТекущаяДата), Организация);
	СтрокаТаблицы.Вчера      = ПолучитьПоступлениеДенежныхСредств(НачалоДня(ПредшествующаяДата), КонецДня(ПредшествующаяДата), Организация);
	СтрокаТаблицы.Изменение  = РассчитатьИзменение(СтрокаТаблицы.Вчера, СтрокаТаблицы.Сегодня);
	
КонецПроцедуры

Процедура ЗаполнитьПродажиЗаПериод(СтрокаТаблицы, ТекущаяДата, Организация)
	
	Перем НачалоПериода, КонецПериода;
	
	СтрокаТаблицы.Показатель        = "Продажи";
	УстановитьПериод(НачалоПериода, КонецПериода, ТекущаяДата, 1);
	СтрокаТаблицы.ТекущийМесяц      = ПолучитьПродажи(НачалоПериода, КонецПериода, Организация);
	УстановитьПериод(НачалоПериода, КонецПериода, ТекущаяДата, 2);	
	СтрокаТаблицы.ПрошлыйМесяц      = ПолучитьПродажи(НачалоПериода, КонецПериода, Организация);
	СтрокаТаблицы.ИзменениеЗаМесяц  = РассчитатьИзменение(СтрокаТаблицы.ПрошлыйМесяц, СтрокаТаблицы.ТекущийМесяц);
	УстановитьПериод(НачалоПериода, КонецПериода, ТекущаяДата, 3);
	СтрокаТаблицы.МесяцПрошлогоГода = ПолучитьПродажи(НачалоПериода, КонецПериода, Организация);
	СтрокаТаблицы.ИзменениеЗаГод    = РассчитатьИзменение(СтрокаТаблицы.МесяцПрошлогоГода, СтрокаТаблицы.ТекущийМесяц);
	
КонецПроцедуры

Процедура ЗаполнитьПрибыль(СтрокаТаблицы, ТекущаяДата, Организация)
	
	Перем НачалоПериода, КонецПериода;
	
	СтрокаТаблицы.Показатель        = "Прибыль (убыток)";
	УстановитьПериод(НачалоПериода, КонецПериода, ТекущаяДата, 1);
	СтрокаТаблицы.ТекущийМесяц      = ПолучитьПрибыль(НачалоПериода, КонецПериода, Организация);
	УстановитьПериод(НачалоПериода, КонецПериода, ТекущаяДата, 2);	
	СтрокаТаблицы.ПрошлыйМесяц      = ПолучитьПрибыль(НачалоПериода, КонецПериода, Организация);
	СтрокаТаблицы.ИзменениеЗаМесяц  = РассчитатьИзменение(СтрокаТаблицы.ПрошлыйМесяц, СтрокаТаблицы.ТекущийМесяц);
	УстановитьПериод(НачалоПериода, КонецПериода, ТекущаяДата, 3);
	СтрокаТаблицы.МесяцПрошлогоГода = ПолучитьПрибыль(НачалоПериода, КонецПериода, Организация);
	СтрокаТаблицы.ИзменениеЗаГод    = РассчитатьИзменение(СтрокаТаблицы.МесяцПрошлогоГода, СтрокаТаблицы.ТекущийМесяц);

КонецПроцедуры

Процедура ЗаполнитьПоступлениеДенежныхСредствЗаПериод(СтрокаТаблицы, ТекущаяДата, Организация)
	
	Перем НачалоПериода, КонецПериода;
	
	СтрокаТаблицы.Показатель        = "Поступление денежных средств";
	УстановитьПериод(НачалоПериода, КонецПериода, ТекущаяДата, 1);
	СтрокаТаблицы.ТекущийМесяц      = ПолучитьПоступлениеДенежныхСредств(НачалоПериода, КонецПериода, Организация);
	УстановитьПериод(НачалоПериода, КонецПериода, ТекущаяДата, 2);	
	СтрокаТаблицы.ПрошлыйМесяц      = ПолучитьПоступлениеДенежныхСредств(НачалоПериода, КонецПериода, Организация);
	СтрокаТаблицы.ИзменениеЗаМесяц  = РассчитатьИзменение(СтрокаТаблицы.ПрошлыйМесяц, СтрокаТаблицы.ТекущийМесяц);
	УстановитьПериод(НачалоПериода, КонецПериода, ТекущаяДата, 3);
	СтрокаТаблицы.МесяцПрошлогоГода = ПолучитьПоступлениеДенежныхСредств(НачалоПериода, КонецПериода, Организация);
	СтрокаТаблицы.ИзменениеЗаГод    = РассчитатьИзменение(СтрокаТаблицы.МесяцПрошлогоГода, СтрокаТаблицы.ТекущийМесяц);
	
КонецПроцедуры

Процедура ЗаполнитьЗадолженностьПокупателей(СтрокаТаблицы, ТекущаяДата, Организация)
	
	СтрокаТаблицы.Показатель   = "Задолженность покупателей";
	СтрокаТаблицы.Сегодня      = ПолучитьЗадолженностьПокупателей(КонецДня(ТекущаяДата) + 1, Организация);
	СтрокаТаблицы.НачалоМесяца = ПолучитьЗадолженностьПокупателей(НачалоМесяца(ТекущаяДата), Организация);
	СтрокаТаблицы.Изменение    = РассчитатьИзменение(СтрокаТаблицы.НачалоМесяца, СтрокаТаблицы.Сегодня);
	
КонецПроцедуры

Процедура ЗаполнитьПросроченнуюЗадолженностьПокупателей(СтрокаТаблицы, ТекущаяДата, Организация)
	
	СтрокаТаблицы.Показатель   = "  в т. ч. просроченная";
	СтрокаТаблицы.Сегодня      = ПолучитьПросроченнуюЗадолженностьПокупателей(КонецДня(ТекущаяДата) + 1, Организация);
	СтрокаТаблицы.НачалоМесяца = ПолучитьПросроченнуюЗадолженностьПокупателей(НачалоМесяца(ТекущаяДата), Организация);
	СтрокаТаблицы.Изменение    = РассчитатьИзменение(СтрокаТаблицы.НачалоМесяца, СтрокаТаблицы.Сегодня);
	
КонецПроцедуры

Процедура ЗаполнитьОборотныеСредства(СтрокаТаблицы, ТекущаяДата, Организация)
	
	СтрокаТаблицы.Показатель   = "Оборотные средства";
	СуммаНачалоМесяца = СтрокаТаблицы.НачалоМесяца;
	СуммаСегодня      = СтрокаТаблицы.Сегодня;
	ПолучитьОборотныеСредства(НачалоМесяца(ТекущаяДата), КонецДня(ТекущаяДата), Организация, СтрокаТаблицы.НачалоМесяца, СтрокаТаблицы.Сегодня);
	СтрокаТаблицы.НачалоМесяца = СтрокаТаблицы.НачалоМесяца;
	СтрокаТаблицы.Сегодня      = СтрокаТаблицы.Сегодня;
	СтрокаТаблицы.Изменение    = РассчитатьИзменение(СтрокаТаблицы.НачалоМесяца, СтрокаТаблицы.Сегодня);
	
КонецПроцедуры

Функция РассчитатьИзменение(ПрошлыйПериод, ТекущийПериод)
	
	Изменение = 0;
	
	Если ПрошлыйПериод = 0 ИЛИ ТекущийПериод = 0 Тогда
		Изменение = 0;
	Иначе
		Изменение = (ТекущийПериод - ПрошлыйПериод) / ?(ПрошлыйПериод = 0, 1, ПрошлыйПериод) * 100;
	КонецЕсли;
	
	Возврат Изменение;
	
КонецФункции

Процедура УстановитьПериод(НачалоПериода, КонецПериода, ТекущаяДата, ВидПериода)
	
	Сутки = 24 * 60 * 60;
	
	КоличествоДнейТекущее = (КонецДня(ТекущаяДата) - НачалоМесяца(ТекущаяДата)) / Сутки;
	
	КоличествоДнейТекущийМесяц = (КонецМесяца(ТекущаяДата) - НачалоМесяца(ТекущаяДата)) / Сутки;
	
	КоличествоДнейПрошлыйМесяц = (КонецМесяца(НачалоМесяца(ТекущаяДата) - 1) - НачалоМесяца(НачалоМесяца(ТекущаяДата) - 1)) / Сутки;
	
	// Установить текущй период
	Если ВидПериода = 1 Тогда
		Если КоличествоДнейТекущее = КоличествоДнейТекущийМесяц Тогда
			НачалоПериода = НачалоМесяца(ТекущаяДата);
			КонецПериода  = КонецМесяца(ТекущаяДата);
		Иначе 
			НачалоПериода = НачалоМесяца(ТекущаяДата);
			КонецПериода  = КонецДня(ТекущаяДата);
		КонецЕсли;
		// Установить прошлый месяц	
	ИначеЕсли ВидПериода = 2 Тогда
		Если КоличествоДнейТекущее = КоличествоДнейТекущийМесяц Тогда
			НачалоПериода = НачалоМесяца(НачалоМесяца(ТекущаяДата) - 1);
			КонецПериода  = КонецМесяца(НачалоМесяца(ТекущаяДата) - 1);
		Иначе
			Если КоличествоДнейТекущее > КоличествоДнейПрошлыйМесяц Тогда
				НачалоПериода = НачалоМесяца(НачалоМесяца(ТекущаяДата) - 1);
				КонецПериода  = КонецДня(НачалоМесяца(ТекущаяДата) - 1);
			Иначе
				НачалоПериода = НачалоМесяца(НачалоМесяца(ТекущаяДата) - 1);
				КонецПериода  = КонецДня(НачалоМесяца(ТекущаяДата) - 1);
			КонецЕсли;
		КонецЕсли;
		// Установить период прошлого года
	ИначеЕсли ВидПериода = 3 Тогда
		Если Месяц(ТекущаяДата) = 2 И День(ТекущаяДата) = 29 Тогда
			НачалоПериода = НачалоМесяца(Дата(Год(ТекущаяДата) - 1, 2, 1));
			КонецПериода  = КонецМесяца(Дата(Год(ТекущаяДата) - 1, 2, 28));
		Иначе
			НачалоПериода = НачалоМесяца(Дата(Год(ТекущаяДата) - 1, Месяц(ТекущаяДата), День(ТекущаяДата)));
			КонецПериода  = КонецДня(Дата(Год(ТекущаяДата) - 1, Месяц(ТекущаяДата), День(ТекущаяДата)));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры   

// ВозвратитьМассивСчетов
//
Функция ВозвратитьМассивСчетовДтКтЗадолженности(ДляКредиторскойЗадолженности,Краткосрочная = Истина, Долгосрочная = Ложь) Экспорт
	ПС = ПланыСчетов["Типовой"];
	СчетаДебиторскойЗадолж = Новый Массив;
	
	Если ДляКредиторскойЗадолженности Тогда
		Если Краткосрочная Тогда
			Счет3310 = ПС.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам;
			Счет3320 = ПС.КраткосрочнаяКредиторскаяЗадолженностьДочернимОрганизациям;
			Счет3330 = ПС.КраткосрочнаяКредиторскаяЗадолженностьАссоциированнымИСовместнымОрганизациям;
			Счет3340 = ПС.КраткосрочнаяКредиторскаяЗадолженностьпредставительств;
			Счет3350 = ПС.КраткосрочнаяЗадолженностьПоОплатеТруда;
			Счет3360 = ПС.КраткосрочнаяЗадолженностьПоАренде;
			Счет3370 = ПС.ТекущаяЧастьДолгосрочнойКредиторскойЗадолженности;
			Счет3380 = ПС.КраткосрочныеВознагражденияКВыплате;
			Счет3390 = ПС.ПрочаяКраткосрочнаяКредиторскаяЗадолженность_ ;
			
			Счет3510 = ПС.КраткосрочныеАвансыПолученные;
			
			СчетаДебиторскойЗадолж.Добавить(Счет3310);
			СчетаДебиторскойЗадолж.Добавить(Счет3320);
			СчетаДебиторскойЗадолж.Добавить(Счет3330);
			СчетаДебиторскойЗадолж.Добавить(Счет3340);
			СчетаДебиторскойЗадолж.Добавить(Счет3350);
			СчетаДебиторскойЗадолж.Добавить(Счет3360);
			СчетаДебиторскойЗадолж.Добавить(Счет3370);
			СчетаДебиторскойЗадолж.Добавить(Счет3380);
			СчетаДебиторскойЗадолж.Добавить(Счет3390);
			СчетаДебиторскойЗадолж.Добавить(Счет3510);			
		КонецЕсли;
		
		Если Долгосрочная Тогда
			
			Счет4110 = ПС.ДолгосрочнаяЗадолженностьПоставщикамИПодрядчикам;
			Счет4120 = ПС.ДолгосрочнаяКредиторскаяЗадолженностьДочернимОрганизациям;
			Счет4130 = ПС.ДолгосрочнаяКредиторскаяЗадолженностьАссоциированнымИСовместнымОрганизациям;
			Счет4140 = ПС.ДолгосрочнаяКредиторскаяЗадолженностьПредставительтвам;
			Счет4150 = ПС.ДолгосрочнаяЗадолженностьПоАренде;
			Счет4160 = ПС.ДолгосрочныеВознагражденияКВыплате;
			Счет4170 = ПС.ПрочаяДолгосрочнаяКредиторскаяЗадолженность_;
			
			Счет4410 = ПС.ДолгосрочныеАвансыПолученные;
			
			СчетаДебиторскойЗадолж.Добавить(Счет4110);
			СчетаДебиторскойЗадолж.Добавить(Счет4120);
			СчетаДебиторскойЗадолж.Добавить(Счет4130);
			СчетаДебиторскойЗадолж.Добавить(Счет4140);
			СчетаДебиторскойЗадолж.Добавить(Счет4150);
			СчетаДебиторскойЗадолж.Добавить(Счет4160);
			СчетаДебиторскойЗадолж.Добавить(Счет4170);
			СчетаДебиторскойЗадолж.Добавить(Счет4410);			
		КонецЕсли; 	
		
	Иначе
		// *** Дебиторская
		//если краткосрочная
		Если Краткосрочная Тогда
			Счет1210  = ПС.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков;
			Счет1220  = ПС.КраткосрочнаяДебиторскаяЗадолженностьДочернихОрганизаций;
			Счет1230  = ПС.КраткосрочнаяДебиторскаяЗадолженностьАссоциированныхИСовместныхОрганизаций;
			Счет1240  = ПС.КраткосрочнаяДебиторскаяЗадолженностьПредставительств;
			
			Счет1250  = ПС.КраткосрочнаяДебиторскаяЗадолженностьРаботников;
			Счет1260  = ПС.КраткосрочнаяДебиторскаяЗадолженностьПоАренде;
			Счет1270  = ПС.КраткосрочныеВознагражденияКПолучению ;
			Счет1280  = ПС.ПрочаяКраткосрочнаяДебиторскаяЗадолженность_; 
			Счет1290  = ПС.РезервПоСомнительнымТребованиям;
			
			Счет1610  = ПС.КраткосрочныеАвансыВыданные;
			
			
			СчетаДебиторскойЗадолж.Добавить(Счет1210);
			СчетаДебиторскойЗадолж.Добавить(Счет1220);
			СчетаДебиторскойЗадолж.Добавить(Счет1230);
			СчетаДебиторскойЗадолж.Добавить(Счет1240);
			СчетаДебиторскойЗадолж.Добавить(Счет1250);
			СчетаДебиторскойЗадолж.Добавить(Счет1260);
			СчетаДебиторскойЗадолж.Добавить(Счет1270);
			СчетаДебиторскойЗадолж.Добавить(Счет1280);
			СчетаДебиторскойЗадолж.Добавить(Счет1290); 
			СчетаДебиторскойЗадолж.Добавить(Счет1610); 
			
		КонецЕсли;
		//долгосрочная задолженность
		Если Долгосрочная Тогда
			
			Счет2110  = ПС.ДолгосрочнаяЗадолженностьПокупателейИЗаказчиков;
			Счет2120  = ПС.ДолгосрочнаяДебиторскаяЗадолженностьДочернихОрганизаций;
			Счет2130  = ПС.ДолгосрочнаяДебиторскаяЗадолженностьАссоциированныхИСовместныхОрганизаций;
			Счет2140  = ПС.ДолгосрочнаяДебиторскаяЗадолженностьПредставительств;
			
			Счет2150  = ПС.ДолгосрочнаяДебиторскаяЗадолженностьРаботников;
			Счет2160  = ПС.ДолгосрочнаяДебиторскаяЗадолженностьПоАренде;
			Счет2170  = ПС.ДолгосрочныеВознагражденияКПолучению ;
			Счет2180  = ПС.ПрочаяДолгосрочнаяДебиторскаяЗадолженность_; 
			
			Счет2910  = ПС.ДолгосрочныеАвансыВыданные; 
			
			
			СчетаДебиторскойЗадолж.Добавить(Счет2110);
			СчетаДебиторскойЗадолж.Добавить(Счет2120);
			СчетаДебиторскойЗадолж.Добавить(Счет2130);
			СчетаДебиторскойЗадолж.Добавить(Счет2140);
			СчетаДебиторскойЗадолж.Добавить(Счет2150);
			СчетаДебиторскойЗадолж.Добавить(Счет2160);
			СчетаДебиторскойЗадолж.Добавить(Счет2170);
			СчетаДебиторскойЗадолж.Добавить(Счет2180);
			СчетаДебиторскойЗадолж.Добавить(Счет1290); 		
			СчетаДебиторскойЗадолж.Добавить(Счет2910); 					
		КонецЕсли;
	КонецЕсли;
	
	Возврат СчетаДебиторскойЗадолж;

КонецФункции // ВозвратитьМассивСчетов


//////РАСШИФРОВКА АНТИКРИЗИСНЫХ ОТЧЕТОВ////////////////////////////////

Функция КонецПериода(Период, Периодичность) Экспорт
	
	КонецПериода = Период;
	Если Периодичность = 6 Тогда
		КонецПериода = КонецДня(Период);
	ИначеЕсли Периодичность = 7 Тогда
		КонецПериода = КонецНедели(Период);
	ИначеЕсли Периодичность = 8 Тогда
		КонецПериода = КонецДня(Период + 10 * 86400);
	ИначеЕсли Периодичность = 9 Тогда
		КонецПериода = КонецМесяца(Период);
	ИначеЕсли Периодичность = 10 Тогда
		КонецПериода = КонецКвартала(Период);
	ИначеЕсли Периодичность = 11 Тогда
		КонецПериода = ?(Месяц(Период) < 7, КонецДня(Дата(Год(Период), 6, 30)), КонецДня(Дата(Год(Период), 12, 31)));
	ИначеЕсли Периодичность = 12 Тогда
		КонецПериода = КонецГода(Период);
	КонецЕсли;
	
	Возврат КонецПериода;
	
КонецФункции

Функция ПолучитьПредставлениеПериода(ОтчетОбъект = Неопределено, НачалоПериода = Неопределено, КонецПериода = Неопределено, ТолькоДаты  = Ложь) Экспорт
	
	ТекстПериод = "";
	
	Если ОтчетОбъект <> Неопределено Тогда 
		НачалоПериода = ОтчетОбъект.НачалоПериода;
		КонецПериода  = ОтчетОбъект.КонецПериода;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонецПериода) Тогда 
		Если КонецПериода >= НачалоПериода Тогда
			ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
		ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(Дата(3999, 11, 11)), "ФП");
		ТекстПериод = СтрЗаменить(ТекстПериод, Сред(ТекстПериод, Найти(ТекстПериод, " - ")), " - ...");
	КонецЕсли;
	
	Возврат ТекстПериод;
	
КонецФункции        

Процедура УправлениеОтображениемПанелиРасшифровки(ФормаОтчета, Видимость = Истина) Экспорт
	
	Если Видимость тогда
		ФормаОтчета.ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Нет;
		ФормаОтчета.ЭлементыФормы.Результат.Ширина = ФормаОтчета.ЭлементыФормы.ПанельПользователя.Лево - 6;
	Иначе
		ФормаОтчета.ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Право;
		ФормаОтчета.ЭлементыФормы.Результат.Ширина = ФормаОтчета.Ширина - 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаРасшифровкиОтчетовДляРуководителя(ОтчетОбъект, ФормаОтчета, Расшифровка, СтандартнаяОбработка, СписокКонтрагентов = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	МассивПолей = ТиповыеОтчеты.ПолучитьМассивПолейРасшифровки(Расшифровка, ФормаОтчета.ДанныеРасшифровки,, Истина);
	
	ВидРесурса    = Неопределено;
	БухВидРесурса = Неопределено;
	Субконто1     = Неопределено;
	Субконто2     = Неопределено;
	Период        = Неопределено;
	КонтрагентДляДиаграммы = Неопределено;
	
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	
	Для Каждого Поле Из МассивПолей Цикл 
		Если ТипЗнч(Поле) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
			Если Поле.Поле = "Контрагент"   ИЛИ Поле.Поле = "Раздел"
				ИЛИ Поле.Поле = "НоменклатурнаяГруппа" ИЛИ Поле.Поле = "ВидРасхода"
				ИЛИ Поле.Поле = "ВидПоступления"       ИЛИ Поле.Поле = "ВидДенежныхСредств"
				ИЛИ Поле.Поле = "Вид" Тогда
				Субконто1 = Поле.Значение;
			ИначеЕсли Поле.Поле = "Договор" ИЛИ Поле.Поле = "Подраздел" 
				ИЛИ Поле.Поле = "Аналитика" Тогда
				Субконто2 = Поле.Значение;
			ИначеЕсли Поле.Поле = "ВидРесурса" Тогда
				ВидРесурса = Поле.Значение;
			ИначеЕсли Поле.Поле = "БухВидРесурса" Тогда
				БухВидРесурса = Поле.Значение;
			ИначеЕсли Поле.Поле = "Период" Тогда
				Период = Поле.Значение;
			ИначеЕсли Поле.Поле = "Валюта" ИЛИ Поле.Поле = "КонтрагентКор" Тогда
				КорСубконто1 = Поле.Значение;
			ИначеЕсли Поле.Поле = "КонтрагентДляДиаграммы"  Тогда
				Если Поле.Значение = "Прочие" Тогда
					КонтрагентДляДиаграммы = Поле.Значение;
				Иначе
					Субконто1 =Поле.Значение;
				КонецЕсли; 			
			КонецЕсли;     			
		КонецЕсли;
	КонецЦикла;
	Если ИдентификаторОбъекта = "ОтчетОбъект.ДоходыРасходы" Тогда
		Если Субконто1 <> "Расходы" И Субконто1 <> "Доходы без НДС" Тогда 
			Возврат;
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОстаткиДенежныхСредств" Тогда
		Если КорСубконто1 = Неопределено Тогда
			КорСубконто1 = "Итого, тенге";
		КонецЕсли;
	КонецЕсли;	
	
	ФормаОтчета.ЭлементыФормы.ПолеРасшифровка.Очистить();
	
	СхемаРасшифровки = ПолучитьОбщийМакет("МакетРасшифровкиОтчетовДляРуководителя");
	ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаРасшифровки));
	
	ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка.ЗагрузитьНастройки(СхемаРасшифровки.НастройкиПоУмолчанию);
	Если Субконто1 <> Неопределено Тогда
		ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "Субконто1", Субконто1);
	КонецЕсли;
	Если Субконто2 <> Неопределено Тогда
		ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "Субконто2", Субконто2);
	КонецЕсли;
	Если КорСубконто1 <> Неопределено Тогда
		ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "КорСубконто1", КорСубконто1);
	КонецЕсли;
	Если ВидРесурса <> Неопределено Тогда
		ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "ВидРесурса", ВидРесурса);
	КонецЕсли;
	Если БухВидРесурса <> Неопределено Тогда
		ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "БухВидРесурса", БухВидРесурса);
	КонецЕсли;
	Если Период <> Неопределено Тогда
		Если ИдентификаторОбъекта <> "ОтчетОбъект.ДинамикаЗадолженностиПокупателей"
			И ИдентификаторОбъекта <> "ОтчетОбъект.ДинамикаЗадолженностиПоставщикам" Тогда 
			ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "Период", Период, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
			ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "Период", ?(КонецПериода(Период, ОтчетОбъект.Интервал) > КонецДня(ОтчетОбъект.КонецПериода), КонецДня(ОтчетОбъект.КонецПериода), КонецПериода(Период, ОтчетОбъект.Интервал)), ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
			
		КонецЕсли;
	КонецЕсли;
	ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "ВидОтчета", """" + ОтчетОбъект.Метаданные().Синоним + """");
	
	Показатель = "";	
	Если ИдентификаторОбъекта = "ОтчетОбъект.ЗадолженностьПокупателей"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ЗадолженностьПоставщикам" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ДинамикаЗадолженностиПокупателей"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ДинамикаЗадолженностиПоставщикам" Тогда
		Если Субконто1 <> Неопределено И Субконто2 <> Неопределено Тогда
			Показатель = "Контрагент: " + Строка(Субконто1) + Символы.ПС + "Договор: " + Строка(Субконто2);
		ИначеЕсли Субконто1 <> Неопределено Тогда
			Показатель = "Контрагент: " + Строка(Субконто1);
		ИначеЕсли КонтрагентДляДиаграммы <> Неопределено Тогда
			Показатель = "Контрагент: " + КонтрагентДляДиаграммы; 			
		Иначе
			Показатель = "По контрагентам";
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотныеСредства" Тогда
		Если Субконто2 <> Неопределено Тогда
			Показатель = "Показатель: " + Строка(Субконто2);
		Иначе
			Показатель = "Показатель: " + Строка(Субконто1);
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ДоходыРасходы" Тогда
		Показатель = "Показатель: " + Строка(Субконто1);
		Если Субконто2 <> Неопределено И ТипЗнч(Субконто2) = Тип("СправочникСсылка.Доходы") Тогда
			Показатель = Показатель + Символы.ПС + "Вид дохода: " + Строка(Субконто2);
		ИначеЕсли Субконто2 <> Неопределено  И ТипЗнч(Субконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			Показатель = Показатель + Символы.ПС + "Сатья затрат: " + Строка(Субконто2);
		КонецЕсли;			
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.Продажи" Тогда
		Если ОтчетОбъект.РежимФормирования = 0 Тогда
			Если Субконто1 = Неопределено Тогда		
				Показатель = "По номенклатурным группам";
			Иначе
				Показатель = "Номенклатурная группа: " + Строка(Субконто1);
			КонецЕсли;
		Иначе
			Если КорСубконто1 = Неопределено Тогда		
				Показатель = "По контрагентам";
			Иначе
				Показатель = "Контрагент: " + Строка(КорСубконто1);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОстаткиДенежныхСредств" Тогда
		Если Субконто1 <> Неопределено И Субконто2 <> Неопределено Тогда
			Показатель = "Вид: " + Строка(Субконто1) + Символы.ПС + "Аналитика: " + Строка(Субконто2);
		ИначеЕсли Субконто1 <> Неопределено Тогда
			Показатель = "Вид: " + Строка(Субконто1);
		КонецЕсли;
		Если ТипЗнч(КорСубконто1) = Тип("СправочникСсылка.Валюты") 
			И КорСубконто1 <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			Показатель = Показатель + Символы.ПС + "Валюта: " + КорСубконто1;
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ПоступлениеДенежныхСредств"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.РасходДенежныхСредств" Тогда
		Если Субконто1 <> Неопределено Тогда
			Показатель = "Показатель: " + Строка(Субконто1);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Показатель) Тогда 
		Показатель = Показатель + Символы.ПС;
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ОтчетОбъект.Продажи"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ДоходыРасходы"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ПоступлениеДенежныхСредств"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.РасходДенежныхСредств" Тогда
		Если Период = Неопределено Тогда
			Показатель = Показатель + "За " + ПолучитьПредставлениеПериода(ОтчетОбъект,,, Истина);
			ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "НачалоПериода", ОтчетОбъект.НачалоПериода);
			ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "КонецПериода" , ОтчетОбъект.КонецПериода);
		Иначе
			Показатель = Показатель + "За " + ПолучитьПредставлениеПериода(, Период, ?(КонецПериода(Период, ОтчетОбъект.Интервал) > КонецДня(ОтчетОбъект.КонецПериода), КонецДня(ОтчетОбъект.КонецПериода), КонецПериода(Период, ОтчетОбъект.Интервал)), Истина);
			ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "НачалоПериода", Период);
			ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "КонецПериода" , ?(КонецПериода(Период, ОтчетОбъект.Интервал) > КонецДня(ОтчетОбъект.КонецПериода), КонецДня(ОтчетОбъект.КонецПериода), КонецПериода(Период, ОтчетОбъект.Интервал)));
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотныеСредства"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ЗадолженностьПокупателей"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ЗадолженностьПоставщикам" Тогда 
		Если ВидРесурса = "начало" Тогда
			Показатель = Показатель + "На " + Формат(ОтчетОбъект.НачалоПериода, "ДФ=dd.MM.yyyy") + " (начало дня)";
		ИначеЕсли ВидРесурса = "конец" Тогда
			Показатель = Показатель + "На " + Формат(ОтчетОбъект.КонецПериода, "ДФ=dd.MM.yyyy") + " (конец дня)";
		ИначеЕсли ВидРесурса = "оборот" Тогда
			Показатель = Показатель + "За " + ПолучитьПредставлениеПериода(ОтчетОбъект,,, Истина);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "НачалоПериода", ОтчетОбъект.НачалоПериода);
		ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "КонецПериода" , ОтчетОбъект.КонецПериода);
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОстаткиДенежныхСредств" Тогда
		Показатель = Показатель + "На " + Формат(ОтчетОбъект.Период, "ДФ=dd.MM.yyyy") + " (конец дня)";
		ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "НачалоПериода", НачалоДня(ОтчетОбъект.Период));
		ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "КонецПериода" , КонецДня(ОтчетОбъект.Период));
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ДинамикаЗадолженностиПокупателей" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ДинамикаЗадолженностиПоставщикам" Тогда
		Если Период = Неопределено Тогда
			Возврат;
		Иначе			
			Показатель = Показатель + "На " + Формат(?(КонецПериода(Период, ОтчетОбъект.Интервал) > КонецДня(ОтчетОбъект.КонецПериода), КонецДня(ОтчетОбъект.КонецПериода), КонецПериода(Период, ОтчетОбъект.Интервал)), "ДФ=dd.MM.yyyy") + " (конец дня)";
			ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "НачалоПериода", Период);
			ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "КонецПериода" , ?(КонецПериода(Период, ОтчетОбъект.Интервал) > КонецДня(ОтчетОбъект.КонецПериода), КонецДня(ОтчетОбъект.КонецПериода), КонецПериода(Период, ОтчетОбъект.Интервал)));
		КонецЕсли;
		
	КонецЕсли;

	ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "Заголовок", Показатель);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаРасшифровки, ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка.Настройки, ФормаОтчета.ДанныеРасшифровкиПромежуточнаяРасшифровка);
	
	ВнешниеНаборыДанных = Новый Структура;
	Если ИдентификаторОбъекта = "ОтчетОбъект.ДинамикаЗадолженностиПокупателей"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ДинамикаЗадолженностиПоставщикам" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ Первые 7
		|	Долг.Контрагент,
		|	МАКСИМУМ(Долг.Задолженность) КАК Задолженность
		|ПОМЕСТИТЬ ЗадолженностьКонтрагентов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДолгДтКт.Субконто1 КАК Контрагент,
		|		ДолгДтКт.СуммаКонечныйОстатокДт КАК Задолженность,
		|		ДолгДтКт.Счет КАК Счет
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
		|				&НачалоПериода,
		|				&КонецПериода,
		|				,
		|				,
		|				(НЕ Счет.Забалансовый)
		|					И (Счет В ИЕРАРХИИ (&СписокСчетовЗадолженности) ИЛИ Счет В (&СчетаПользователя)) И Не Счет В Иерархии(&ИсключенныеСчета),
		|				&ВидыСубконтоКД,
		|				Организация В (&Организация)) КАК ДолгДтКт) КАК Долг
		|
		|СГРУППИРОВАТЬ ПО
		|	Долг.Контрагент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Задолженность УБЫВ		
		|;
		| //////////////////////////////////////////////////		
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Знак,
		|	ВложенныйЗапрос.Счет,
		|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
		|	ВложенныйЗапрос.СтрокаРасшифровки,
		|	ВложенныйЗапрос.КорСчет,
		|	ВложенныйЗапрос.Субконто1,
		|	ВложенныйЗапрос.Субконто2,
		|	ВложенныйЗапрос.КорСубконто1,
		|	ВложенныйЗапрос.ВидРесурса,
		|	ВложенныйЗапрос.Период,
		|	ВложенныйЗапрос.БухВидРесурса
		|ИЗ
		|	(ВЫБРАТЬ 
		|	""+"" КАК Знак,
		|	ТиповойОстатки.Счет КАК Счет,
		|	ТиповойОстатки.СуммаОстатокДтКт КАК Сумма,
		|	""Остаток ДтКт "" + ТиповойОстатки.Счет.Код + "" """""" + ТиповойОстатки.Счет.Наименование + """""""" КАК СтрокаРасшифровки,
		|	NULL КАК КорСчет,
		|	Субконто1 КАК Субконто1,
		|	NULL  КАК Субконто2,
		|	NULL КАК КорСубконто1,
		|	""конец"" КАК ВидРесурса,
		|	NULL КАК Период,
		|	""ДтКт"" КАК БухВидРесурса
	//	|ТиповойОстатки.Субконто1 КАК Субконто11,
	//	|ТиповойОстатки.Субконто2 КАК Субконто21
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(
		|			&Период,
		|			(НЕ Счет.Забалансовый)
		|			И (Счет В ИЕРАРХИИ (&СписокСчетовЗадолженности) ИЛИ Счет В (&СчетаПользователя)) И (НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета)),
		|			&ВидыСубконтоКД,";
	   	
		Если ИдентификаторОбъекта = "ОтчетОбъект.ДинамикаЗадолженностиПокупателей" Тогда
			Запрос.Текст = Запрос.Текст + "Организация В(&Организация)";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДтКт", "Дт");    			
			ТипКонтрагента = 1;
			КтЗадолженность = Ложь;  
					
		Иначе 
			Запрос.Текст = Запрос.Текст + "	Организация В(&Организация)";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДтКт", "Кт");
			
			ТипКонтрагента = 2;
			КтЗадолженность = Истина;  
		КонецЕсли;
		
		Если КонтрагентДляДиаграммы = "Прочие" Тогда
			Запрос.Текст = Запрос.Текст + " И Не Субконто1 В (Выбрать Контрагент Из ЗадолженностьКонтрагентов)";				
		КонецЕсли; 
		Запрос.Текст = Запрос.Текст + ")КАК ТиповойОстатки) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Знак,
		|	ВложенныйЗапрос.СтрокаРасшифровки,
		|	ВложенныйЗапрос.Счет,
		|	ВложенныйЗапрос.КорСубконто1,
		|	ВложенныйЗапрос.ВидРесурса,
		|	ВложенныйЗапрос.Период,
		|	ВложенныйЗапрос.БухВидРесурса,
		|	ВложенныйЗапрос.Субконто2,
		|	ВложенныйЗапрос.Субконто1,
		|	ВложенныйЗапрос.КорСчет";		
		
		Если Не ЗначениеЗаполнено(ОтчетОбъект.мСписокСтруктурныхЕдиниц) И  КонтрагентДляДиаграммы = "Прочие" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация В(&Организация) И ", "");			
		ИначеЕсли Не ЗначениеЗаполнено(ОтчетОбъект.мСписокСтруктурныхЕдиниц) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация В(&Организация)", "");
		КонецЕсли;
		Если ОтчетОбъект.КоличествоВыводимыхЗаписейВДиаграмме <> 7 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Первые 7", "Первые " + ОтчетОбъект.КоличествоВыводимыхЗаписейВДиаграмме);
		КонецЕсли;	
		
		СписокСчетовИсключаемыхИзРасчетаЗадолженности = ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(ТипКонтрагента);	
		СписокСчетовПользователяДляРасчетаЗадолженности = ПолучитьСписокСчетовПользователяДляРасчетаЗадолженности(ТипКонтрагента);	
		
		СписокСчетовДтКтЗадолженности =  ОтчетыДляРуководителя.ВозвратитьМассивСчетовДтКтЗадолженности(КтЗадолженность,Истина,Истина);		

		Запрос.УстановитьПараметр("Период", ?(КонецПериода(Период, ОтчетОбъект.Интервал) > КонецДня(ОтчетОбъект.КонецПериода), КонецДня(ОтчетОбъект.КонецПериода), КонецПериода(Период, ОтчетОбъект.Интервал)) + 1);
		Запрос.УстановитьПараметр("НачалоПериода", ОтчетОбъект.НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ОтчетОбъект.КонецПериода));
		
		ВидыСубконтоКД = Новый Массив;
		ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
		ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
		Запрос.УстановитьПараметр("ВидыСубконтоКД", ВидыСубконтоКД);
		Запрос.УстановитьПараметр("Организация", ОтчетОбъект.мСписокСтруктурныхЕдиниц);
		Запрос.УстановитьПараметр("ИсключенныеСчета", СписокСчетовИсключаемыхИзРасчетаЗадолженности);
		Запрос.УстановитьПараметр("СписокСчетовЗадолженности", СписокСчетовДтКтЗадолженности);
		Запрос.УстановитьПараметр("СчетаПользователя", СписокСчетовПользователяДляРасчетаЗадолженности);
		ВнешниеНаборыДанных.Вставить("ТаблицаДанных", Запрос.Выполнить());
		
		Если КонтрагентДляДиаграммы = "Прочие" Тогда
			СписокКонтрагентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Субконто1");
		Иначе
			СписокКонтрагентов = Неопределено;
		КонецЕсли;   		
	Иначе
		ВнешниеНаборыДанных.Вставить("ТаблицаДанных", ОтчетОбъект.ПромежуточныеДанные);
	КонецЕсли;
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ФормаОтчета.ДанныеРасшифровкиПромежуточнаяРасшифровка);
	
	//Создадим и инициализируем процессор вывода результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ФормаОтчета.ЭлементыФормы.ПолеРасшифровка);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	Если ФормаОтчета.ЭлементыФормы.ПанельПользователя.Свертка <> РежимСверткиЭлементаУправления.Нет Тогда
		УправлениеОтображениемПанелиРасшифровки(ФормаОтчета, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеРасшифровкаОбработкаРасшифровки(ОтчетОбъект, ФормаОтчета, Расшифровка, СтандартнаяОбработка,СписокКонтрагентов = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
		
	МассивПолей = ТиповыеОтчеты.ПолучитьМассивПолейРасшифровки(Расшифровка, ФормаОтчета.ДанныеРасшифровкиПромежуточнаяРасшифровка);
	Счет = Неопределено;
	ЗначенияСубконто    = Новый Массив;
	ЗначенияКорСубконто = Новый Массив;
	Валюта = Неопределено;
	НачалоПериодаРасшифровки = ТиповыеОтчеты.ПолучитьПараметр(ФормаОтчета.ДанныеРасшифровкиПромежуточнаяРасшифровка, "НачалоПериода").Значение;
	КонецПериодаРасшифровки  = ТиповыеОтчеты.ПолучитьПараметр(ФормаОтчета.ДанныеРасшифровкиПромежуточнаяРасшифровка, "КонецПериода").Значение;
	Для Каждого Поле Из МассивПолей Цикл
		Если ТипЗнч(Поле) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
			Если Поле.Поле = "Счет" Тогда
				Счет = Поле.Значение;
			ИначеЕсли Поле.Поле = "КорСчет" Тогда
				КорСчет = Поле.Значение;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Поле) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если Поле.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто1")
				ИЛИ Поле.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто2") Тогда
				ЗначенияСубконто.Добавить(Поле.ПравоеЗначение);
			ИначеЕсли Поле.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорСубконто1") Тогда
				ЗначенияКорСубконто.Добавить(Поле.ПравоеЗначение);
				Валюта = Поле.ПравоеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыНастройки = Новый Структура;
	ОтборПоСубконто = Новый ТаблицаЗначений;
	ОтборПоСубконто.Колонки.Добавить("ВидСравнения");
	ОтборПоСубконто.Колонки.Добавить("Значение");
	ОтборПоСубконто.Колонки.Добавить("ЗначениеПо");
	ОтборПоСубконто.Колонки.Добавить("ЗначениеС");
	ОтборПоСубконто.Колонки.Добавить("Имя");
	ОтборПоСубконто.Колонки.Добавить("Использование");
	ОтборПоСубконто.Колонки.Добавить("ПутьКДанным");	
	
	Если КорСчет <> Неопределено И КорСчет <> null Тогда
		ФормаРасшифровка = Отчеты.АнализСчетатиповой.ПолучитьФорму();
		ПараметрыНастройки.Вставить("КорСчет", КорСчет);
		ПараметрыНастройки.Вставить("ПоСубсчетамИСубконто"   , Истина);
		ПараметрыНастройки.Вставить("ПоКорСубсчетамИСубконто", Истина);
		ПараметрыНастройки.Вставить("ЗаполнитьПоУмолчанию", Ложь);
	Иначе
		ФормаРасшифровка = Отчеты.ОборотноСальдоваяВедомостьПоСчетуТиповой.ПолучитьФорму();
		ПараметрыНастройки.Вставить("ЗаполнитьПоУмолчанию", Истина);
	КонецЕсли;
	
	ПараметрыНастройки.Вставить("ДатаНач"    , НачалоПериодаРасшифровки);
	ПараметрыНастройки.Вставить("ДатаКон"    , КонецПериодаРасшифровки);
	ПараметрыНастройки.Вставить("СписокОрганизаций", ОтчетОбъект.мСписокСтруктурныхЕдиниц);
	ПараметрыНастройки.Вставить("Счет"       , Счет);

	//ОтчетОбъект.ПоСубсчетам = Истина;
	
	Для Индекс = 1 По Счет.ВидыСубконто.Количество() Цикл
		Для Каждого ЭлементМассива Из ЗначенияСубконто Цикл
			Если Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЭлементМассива)) Тогда
				НовыйОтбор = ОтборПоСубконто.Добавить();
				НовыйОтбор.ВидСравнения  = ВидСравнения.Равно;
				НовыйОтбор.Значение      = ЭлементМассива;
				НовыйОтбор.Использование = Истина;
				НовыйОтбор.ПутьКДанным   = "Субконто" + Индекс;
			КонецЕсли; 
		КонецЦикла;
		Если (ИдентификаторОбъекта = "ОтчетОбъект.ДинамикаЗадолженностиПокупателей"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ДинамикаЗадолженностиПоставщикам") И
			ТипЗнч(СписокКонтрагентов) = Тип("Массив") И СписокКонтрагентов.Количество() > 0   Тогда
			Если Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
		    	СписокОтбора = Новый СписокЗначений;
				СписокКонтрагентов =ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокКонтрагентов) ;
				СписокОтбора.ЗагрузитьЗначения(СписокКонтрагентов);
				НовыйОтбор = ОтборПоСубконто.Добавить();
				НовыйОтбор.ВидСравнения  = ВидСравнения.ВСписке;
				НовыйОтбор.Значение      = СписокОтбора;
				НовыйОтбор.Использование = Истина;
				НовыйОтбор.ПутьКДанным   = "Субконто" + Индекс;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПараметрыНастройки.Вставить("Отбор", ОтборПоСубконто);

	ФормаРасшифровка.Настроить(ПараметрыНастройки);
	ФормаРасшифровка.ПоказыватьЗаголовок = Истина;
	ФормаРасшифровка.НеЗаполнятьНастройкиПриОткрытии = Истина;
	
	ФормаРасшифровка.ОбновитьОтчет();
	ФормаРасшифровка.Открыть();
	
КонецПроцедуры
     
Процедура РезультатПриАктивизацииОбласти(ФормаОтчета, Элемент) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	ЭлементыФормы.ПолеСумма.Значение = ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(Элемент);
	
КонецПроцедуры

Функция ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(ПолеТабличногоДокумента) Экспорт
	
	Сумма = 0;
	Для Каждого Область Из ПолеТабличногоДокумента.ВыделенныеОбласти Цикл
		Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Для ИндексСтрока = Область.Верх По Область.Низ Цикл
				Для ИндексКолонка = Область.Лево По Область.Право Цикл
					Попытка
						Сумма = Сумма + Число(СтрЗаменить(ПолеТабличногоДокумента.Область("R" + Формат(ИндексСтрока, "ЧГ=0") + "C" + Формат(ИндексКолонка, "ЧГ=0")) .Текст, " ", ""));
					Исключение
					КонецПопытки;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции

Функция ПолучитьОписаниеТаблицыПромежуточныеДанные() Экспорт
	
	ПромежуточныеДанные = Новый ТаблицаЗначений;
	ПромежуточныеДанные.Колонки.Добавить("Знак");
	ПромежуточныеДанные.Колонки.Добавить("Счет");
	ПромежуточныеДанные.Колонки.Добавить("КорСчет");
	ПромежуточныеДанные.Колонки.Добавить("Субконто1");
	ПромежуточныеДанные.Колонки.Добавить("Субконто2");
	ПромежуточныеДанные.Колонки.Добавить("КорСубконто1");
	ПромежуточныеДанные.Колонки.Добавить("СтрокаРасшифровки");
	ПромежуточныеДанные.Колонки.Добавить("Сумма");
	ПромежуточныеДанные.Колонки.Добавить("ВидРесурса");
	ПромежуточныеДанные.Колонки.Добавить("БухВидРесурса");
	ПромежуточныеДанные.Колонки.Добавить("Период");
	
	Возврат ПромежуточныеДанные;
	
КонецФункции

Функция ПолучитьОписаниеСтруктурыПараметра() Экспорт
	
	Возврат Новый Структура("Знак, Счет, КорСчет, Субконто1, Субконто2,  
							|КорСубконто1, Сумма, ВидРесурса, БухВидРесурса, Период");

КонецФункции

Процедура ДобавитьЗаписьВТаблицуПромежуточныеДанные(Таблица, Параметры) Экспорт
		
	НоваяСтрока = Таблица.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметры);
	Счет           = НоваяСтрока.Счет;
	КорСчет        = НоваяСтрока.КорСчет;
	БухВидРесурса  = НоваяСтрока.БухВидРесурса;
	
	Если ЗначениеЗаполнено(КорСчет) Тогда
		Если БухВидРесурса = "Дт" Тогда
			СтрокаРасшифровки = "Оборот Дт " + Счет + " """ + Счет.Наименование + """ Кт " + КорСчет + " """ + КорСчет.Наименование + """";
		ИначеЕсли БухВидРесурса = "Кт" Тогда
			СтрокаРасшифровки = "Оборот Дт " + КорСчет + " """ + КорСчет.Наименование + """ Кт " + Счет + " """ + Счет.Наименование + """";
		КонецЕсли;	
	Иначе 
		СтрокаРасшифровки = "Остаток " + БухВидРесурса + " " + Счет + " """ + Счет.Наименование + """";
	КонецЕсли;
	
	НоваяСтрока.СтрокаРасшифровки = СтрокаРасшифровки;
	
КонецПроцедуры


////////////РЕДАКТИРОВАНИЯ СЧЕТОВ РАСЧЕТОВ С КОНТРАГЕНТАМИ  В АНТИКРИЗИСНЫХ ОТЧЕТОВ////////////////
// Тип - определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик
Функция ПолучитьСохраненнуюНастройкуСчетовИсключаемыхИзРасчетаЗадолженности(Тип = 1) 
	
	Если Тип = 1 Тогда
		НастраиваемыйОбъект = "ОтчетыДляРуководителя.СчетаИсключаемыеИзРасчетаЗадолженностиПокупателей";
	ИначеЕсли Тип = 2 Тогда
		НастраиваемыйОбъект = "ОтчетыДляРуководителя.СчетаИсключаемыеИзРасчетаЗадолженностиПоставщикам";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Ссылка
	|ИЗ
	|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроек.ПроизвольныеНастройки)
	|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект
	|	И СохраненныеНастройки.Пользователи.Пользователь = &Пользователь
	|	И (НЕ СохраненныеНастройки.ПометкаУдаления)";
	Запрос.УстановитьПараметр("Пользователь"       , глЗначениеПеременной("глТекущийПользователь"));
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", НастраиваемыйОбъект);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0].Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Тип - определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик
Функция ПолучитьСохраненнуюНастройкуСчетовПользователяДляРасчетаЗадолженности(Тип = 1) 
	
	Если Тип = 1 Тогда
		НастраиваемыйОбъект = "ОтчетыДляРуководителя.СчетаПользователяДляРасчетаЗадолженностиПокупателей";
	ИначеЕсли Тип = 2 Тогда
		НастраиваемыйОбъект = "ОтчетыДляРуководителя.СчетаПользователяДляРасчетаЗадолженностиПоставщикам";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Ссылка
	|ИЗ
	|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроек.ПроизвольныеНастройки)
	|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект
	|	И СохраненныеНастройки.Пользователи.Пользователь = &Пользователь
	|	И (НЕ СохраненныеНастройки.ПометкаУдаления)";
	Запрос.УстановитьПараметр("Пользователь"       , глЗначениеПеременной("глТекущийПользователь"));
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", НастраиваемыйОбъект);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0].Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Тип - определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик
Функция ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Тип = 1) Экспорт
	
	НастройкаСсылка = ПолучитьСохраненнуюНастройкуСчетовИсключаемыхИзРасчетаЗадолженности(Тип);
	
	Если НастройкаСсылка <> Неопределено Тогда
		Возврат НастройкаСсылка.ХранилищеНастроек.Получить();
	КонецЕсли;
	
КонецФункции

// Тип - определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик
Функция ПолучитьСписокСчетовПользователяДляРасчетаЗадолженности(Тип = 1) Экспорт
	
	НастройкаСсылка = ПолучитьСохраненнуюНастройкуСчетовПользователяДляРасчетаЗадолженности(Тип);
	
	Если НастройкаСсылка <> Неопределено Тогда
		Возврат НастройкаСсылка.ХранилищеНастроек.Получить();
	КонецЕсли;
	
КонецФункции

// Тип - определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик
Функция ПолучитьСписокСчетовДляРасчетаЗадолженности(Тип = 1) Экспорт
	
	ИсключенныеСчета = ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Тип);
	Если Тип = 1 Тогда
		ЗадолженностьКт = Ложь;
	Иначе
		ЗадолженностьКт = Истина;
	КонецЕсли;
	
	СчетаРасчетов    = ВозвратитьМассивСчетовДтКтЗадолженности(ЗадолженностьКт,Истина,Истина);
	Если ИсключенныеСчета = Неопределено Тогда
		Возврат СчетаРасчетов;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ
		                |	Типовой.Ссылка
		                |ИЗ
		                |	ПланСчетов.Типовой КАК Типовой
		                |ГДЕ
		                |	Типовой.Ссылка В ИЕРАРХИИ(&СписокСчетовРасчета)
		                |	И (НЕ Типовой.Ссылка В ИЕРАРХИИ (&ИсключенныеСчета))
		                |
		                |УПОРЯДОЧИТЬ ПО
		                |	Типовой.Порядок";
		Запрос.УстановитьПараметр("СписокСчетовРасчета",СчетаРасчетов);
		Запрос.УстановитьПараметр("ИсключенныеСчета",ИсключенныеСчета); 		
		
		Возврат Запрос.Выполнить().Выгрузить();
	КонецЕсли;		
КонецФункции  

// Тип - определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик
Процедура СохранитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Тип = 1, СписокСчетов) Экспорт
	
	НастройкаСсылка = ПолучитьСохраненнуюНастройкуСчетовИсключаемыхИзРасчетаЗадолженности(Тип);
	
	Если Тип = 1 Тогда
		НастраиваемыйОбъект = "ОтчетыДляРуководителя.СчетаИсключаемыеИзРасчетаЗадолженностиПокупателей";
		Наименование        = "Счета исключаемые из расчета задолженности покупателей";
	ИначеЕсли Тип = 2 Тогда
		НастраиваемыйОбъект = "ОтчетыДляРуководителя.СчетаИсключаемыеИзРасчетаЗадолженностиПоставщикам";
		Наименование        = "Счета исключаемые из расчета задолженности поставщикам";
	КонецЕсли;
	
	Если НастройкаСсылка = Неопределено Тогда
		НастройкаОбъект = Справочники.СохраненныеНастройки.СоздатьЭлемент();
		НовыйПользователь = НастройкаОбъект.Пользователи.Добавить();
		НовыйПользователь.Пользователь = глЗначениеПеременной("глТекущийПользователь");
	Иначе
		НастройкаОбъект = НастройкаСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	НастройкаОбъект.НастраиваемыйОбъект = НастраиваемыйОбъект;
	НастройкаОбъект.ТипНастройки        = Перечисления.ТипыНастроек.ПроизвольныеНастройки;
	НастройкаОбъект.Наименование        = Наименование;
	НастройкаОбъект.ХранилищеНастроек   = Новый ХранилищеЗначения(СписокСчетов);
	НастройкаОбъект.Записать();
	
КонецПроцедуры

// Тип - определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик
Процедура СохранитьСписокСчетовПользователяДляРасчетаЗадолженности(Тип = 1, СписокСчетов) Экспорт
	
	НастройкаСсылка = ПолучитьСохраненнуюНастройкуСчетовПользователяДляРасчетаЗадолженности(Тип);
	
	Если Тип = 1 Тогда
		НастраиваемыйОбъект = "ОтчетыДляРуководителя.СчетаПользователяДляРасчетаЗадолженностиПокупателей";
		Наименование        = "Счета пользователя для расчета задолженности покупателей";
	ИначеЕсли Тип = 2 Тогда
		НастраиваемыйОбъект = "ОтчетыДляРуководителя.СчетаПользователяДляРасчетаЗадолженностиПоставщикам";
		Наименование        = "Счета пользователя для расчета задолженности поставщикам";
	КонецЕсли;
	
	Если НастройкаСсылка = Неопределено Тогда
		НастройкаОбъект = Справочники.СохраненныеНастройки.СоздатьЭлемент();
		НовыйПользователь = НастройкаОбъект.Пользователи.Добавить();
		НовыйПользователь.Пользователь = глЗначениеПеременной("глТекущийПользователь");
	Иначе
		НастройкаОбъект = НастройкаСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	НастройкаОбъект.НастраиваемыйОбъект = НастраиваемыйОбъект;
	НастройкаОбъект.ТипНастройки        = Перечисления.ТипыНастроек.ПроизвольныеНастройки;
	НастройкаОбъект.Наименование        = Наименование;
	НастройкаОбъект.ХранилищеНастроек   = Новый ХранилищеЗначения(СписокСчетов);
	НастройкаОбъект.Записать();
	
КонецПроцедуры

// Тип - определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик
Функция РедактироватьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Тип = 1,ВыводитьДолгосрочнуюЗадолженность = Истина) Экспорт
	
	СписокИзменен = Ложь;
	
	ФормаСпискаСчетов = ПолучитьОбщуюФорму("ФормаСпискаСчетов");
	СписокСчетовИсключаемыхИзРасчетаЗадолженности = ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Тип);
	ФормаСпискаСчетов.Список = СписокСчетовИсключаемыхИзРасчетаЗадолженности;
	
	СписокСчетовПользователяДляРасчетаЗадолженности = ПолучитьСписокСчетовПользователяДляРасчетаЗадолженности(Тип);
	ФормаСпискаСчетов.СписокПользовательскихСчетов = СписокСчетовПользователяДляРасчетаЗадолженности;
	
	Если Тип = 1 Тогда
		ДляКредиторскойЗадолженности = Ложь;
	Иначе
		ДляКредиторскойЗадолженности = Истина;
	КонецЕсли;
			
	ФормаСпискаСчетов.СписокСчетовРасчета.ЗагрузитьЗначения(ВозвратитьМассивСчетовДтКтЗадолженности(ДляКредиторскойЗадолженности,Истина,ВыводитьДолгосрочнуюЗадолженность)); 
	
	ФормаСпискаСчетов.Тип    = Тип;
	Если ФормаСпискаСчетов.ОткрытьМодально() = КодВозвратаДиалога.ОК Тогда
		
		СписокСчетовИсключаемыхИзРасчетаЗадолженности = ФормаСпискаСчетов.Список.Скопировать();
		СохранитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Тип, СписокСчетовИсключаемыхИзРасчетаЗадолженности);
		
		СписокСчетовПользователяДляРасчетаЗадолженности = ФормаСпискаСчетов.СписокПользовательскихСчетов.Скопировать();
		СохранитьСписокСчетовПользователяДляРасчетаЗадолженности(Тип, СписокСчетовПользователяДляРасчетаЗадолженности);
		
		СписокИзменен = Истина;
		
	КонецЕсли;
	
	Возврат СписокИзменен;
	
КонецФункции

Процедура РаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт
	
	Для Каждого Оформление Из ОформленияСтрок Цикл		
		Если Не Оформление.ДанныеСтроки.Использование Тогда			
			Оформление.ЦветТекста = ПолучитьЦветНеИспользуемогоЭлемента();			
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЦветНеИспользуемогоЭлемента() Экспорт 
	
	Возврат Новый Цвет(117, 117, 117);
	
КонецФункции
