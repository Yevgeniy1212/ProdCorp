
// Процедура рассчитывает сумму в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект     - объект редактируемого документа.
//
Процедура мРассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СпособРасчета = Неопределено, ИмяТабличнойЧасти = Неопределено) Экспорт

	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

КонецПроцедуры // мРассчитатьСуммуТабЧасти()

// Процедура выполняет стандартные действия при изменении суммы 
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//  ТекПользователь      - необходим для совместимости аналогичной процедуры в УТ
//
Процедура мПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ТекПользователь = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли; 

КонецПроцедуры // мПриИзмененииСуммыТабЧасти()

// Функция выполняет поиск первой, удовлетворяющей условию поиска, строки табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа, в которой осуществляется поиск,
//  СтруктураОтбора - структура - задает условие поиска.
//
// Возвращаемое значение: 
//  Строка табличной части - найденная строка табличной части,
//  Неопределено           - строка табличной части не найдена.
//
Функция мНайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора) Экспорт

	СтрокаТабличнойЧасти = Неопределено;
	МассивНайденныхСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции // мНайтиСтрокуТабЧасти()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПОДБОРА В ТОРГОВЫЕ ДОКУМЕНТЫ

// Универсальная процедура, которая инициирует механизм подбора
// номенклатуры в документы (открывает основную форму обработки подбор).
//
// Параметры:
//  ФормаДокумента - форма документа, в который осуществляется подбор,
//  СтруктураПараметров - параметры, которые передаются в форму подбора.
//
Процедура мОткрытьПодборНоменклатуры(ФормаДокумента, СтруктураПараметров, ФормаПодбора = Неопределено) Экспорт

	Если гз_ОбщегоНазначения.АвтономныйРежимРаботы() Тогда
		Возврат;
	КонецЕсли;
	// Добавляем обработчики в форму
	МетаданныеДокумента = ФормаДокумента.ДокументОбъект.Метаданные();

	Для Каждого ЭлементСтруктурыПараметров Из СтруктураПараметров Цикл

		ИмяРеквизита = ЭлементСтруктурыПараметров.Ключ;

		Если гз_ОбщегоНазначения.мЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Тогда

			ФормаДокумента.ПодключитьОбработчикИзмененияДанных(ИмяРеквизита, "ОбновитьФормуПодбора", Ложь);

		Иначе
			Если ИмяРеквизита = "Склад" Тогда
			
				ИмяРеквизита = "СкладОрдер";
				Если гз_ОбщегоНазначения.мЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Тогда

					ФормаДокумента.ПодключитьОбработчикИзмененияДанных(ИмяРеквизита, "ОбновитьФормуПодбора", Ложь);
					Продолжить;

				КонецЕсли;

				ИмяРеквизита = "СкладОтправитель";
				Если гз_ОбщегоНазначения.мЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Тогда

					ФормаДокумента.ПодключитьОбработчикИзмененияДанных(ИмяРеквизита, "ОбновитьФормуПодбора", Ложь);
					Продолжить;

				КонецЕсли;

			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	// Открываем форму подбора.
	ФормаПодбора = Обработки["ПодборНоменклатуры"].ПолучитьФорму("ОсновнаяФорма", ФормаДокумента, ФормаДокумента);
	ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаПодбора.Открыть();
	
КонецПроцедуры // мОткрытьПодборНоменклатуры()

// Процедура, которая обновляет параметры подбора номенклатуры и
// инициирует обновление формы подбора, если она открыта
//
// Параметры:
//  ДокументОбъект     - объект документа, в котором производится подбор.
//  ФормаДокумента     - форма документа, в который осуществляется подбор,
//  ПолноеИмяРеквизита - полное имя реквизита, который изменился.
//
Процедура мОбновитьПараметрыИФормуПодбора(ДокументОбъект, ФормаДокумента, ПолноеИмяРеквизита) Экспорт

	ФормаПодбора = Обработки["ПодборНоменклатуры"].ПолучитьФорму("ОсновнаяФорма", ФормаДокумента, ФормаДокумента);

	Если ФормаПодбора.Открыта() Тогда

		ИмяРеквизита = СтрЗаменить(ПолноеИмяРеквизита, "ДокументОбъект.", "");

		Если ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров.Свойство(ИмяРеквизита) Тогда

			ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров.Вставить(ИмяРеквизита, ДокументОбъект[ИмяРеквизита]);
			СтруктураЗапроса = ФормаПодбора.ЭлементыФормы.СписокВидовПодбора.Значение;
			Родитель         = ФормаПодбора.ПолучитьТекущегоРодителя();

			ФормаПодбора.ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // мОбновитьПараметрыИФормуПодбора()

#Если Клиент Тогда
	
	////////////////////////////////////////////////////////////////////////////////
	// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПЕРЕТАСКИВАНИЕМ НОМЕНКЛАТУРЫ ИЗ ПОДБОРА

	// Функция выполняет проверку перетаскивания из подбора номенклатуры.
	//
	// Параметры:
	//  ПараметрыПеретаскивания - параметры перетаскивания.
	//
	// Возвращаемое значение: 
	//  Флаг проверки.
	//
	Функция мЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Экспорт

		Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") Тогда
			Возврат ПараметрыПеретаскивания.Значение.Свойство("ИзПодбора");
		Иначе
			Возврат Ложь;
		КонецЕсли;

	КонецФункции // мЭтоПеретаскиваниеИзПодбора()

	// Процедура проверки перетаскивания из подбора номенклатуры.
	//
	// Параметры:
	//  ПараметрыПеретаскивания - параметры перетаскивания.
	//  СтандартнаяОбработка    - cтандартная обработка.
	//  ДокументСсылка          - ссылка на документ.
	//  ИмяТЧ                   - имя табличной части.
	//
	Процедура мПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ДокументСсылка, ИмяТЧ) Экспорт

		СтандартнаяОбработка = Ложь;

		Если ДокументСсылка = ПараметрыПеретаскивания.Значение.Владелец
		   И ИмяТЧ = ПараметрыПеретаскивания.Значение.ИмяТЧ Тогда
		   
			Если НЕ ПараметрыПеретаскивания.Значение.ВыбСтрока.ЭтоГруппа Тогда
				Если (ИмяТЧ =  "Услуги" И НЕ ПараметрыПеретаскивания.Значение.ВыбСтрока.Услуга)
				 ИЛИ (ИмяТЧ <> "Услуги" И    ПараметрыПеретаскивания.Значение.ВыбСтрока.Услуга) Тогда
					ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
					ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
				Иначе
					ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Копирование;
					ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
				КонецЕсли;
			Иначе
				ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Копирование;
				ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
			КонецЕсли;
		Иначе
			ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		КонецЕсли;

	КонецПроцедуры // мПроверкаПеретаскиванияИзПодбора()

	// Процедура подтверждающая перетаскивание из подбора номенклатуры.
	//
	// Параметры:
	//  ПараметрыПеретаскивания - параметры перетаскивания.
	//  СтандартнаяОбработка    - cтандартная обработка.
	//
	Процедура мПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка) Экспорт

		СтандартнаяОбработка                       = Ложь;
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Копирование;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;

	КонецПроцедуры // мПеретаскиваниеИзПодбора()

#КонецЕсли
