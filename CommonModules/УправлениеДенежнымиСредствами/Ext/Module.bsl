////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Сформировать наименование карт-счета по его номеру и банку
//
Функция СформироватьНаименованиеКартСчета(КартСчет) Экспорт
	
	Результат = КартСчет.Наименование;
	Если Не ЗначениеЗаполнено(Результат) 
	 ИЛИ Результат = (КартСчет.НомерСчета + " в " + Строка(КартСчет.Банк))
	 Или Результат = КартСчет.НомерСчета
	 Или Результат = Строка(КартСчет.Банк) Тогда
	  // Переформируем
		Результат = СокрЛП(КартСчет.НомерСчета) + ?(ЗначениеЗаполнено(КартСчет.Банк), " в " + СокрЛП(КартСчет.Банк), "");  	  
	КонецЕсли; 
	
	Возврат Результат
	
КонецФункции // СформироватьНаименованиеКартСчета()

// Получить код банка в платежной системе КЦМР
//
Функция ПолучитьКодБанкаВПлатежнойСистеме(КодБанка) Экспорт
	Если КодБанка = Неопределено Тогда
		Возврат ""
	КонецЕсли;
					
    КодВПлатежнойСистеме = "K" + Сред(КодБанка,3,2) + Прав(КодБанка,3)+"00";	    
	Возврат КодВПлатежнойСистеме
КонецФункции // ПолучитьКодБанкаВПлатежнойСистеме()

// Получить имя реквизита БИК с учетом его изменения с 07.06.2010
//
Функция ПолучитьИмяРеквизитаКодБанкаВПлатежнойСистеме(ДатаПериода) Экспорт
	Если НЕ ЗначениеЗаполнено(ДатаПериода) Тогда
	    ДатаПериода =  ТекущаяДата();	
	КонецЕсли;
	ИмяРеквизитаБИК = ?(ДатаПериода >= Дата(2010,06,07), "КодВПлатежнойСистеме", "КодВПлатежнойСистемеДоРеформыБанковскихСчетов");
	
	Возврат ИмяРеквизитаБИК
КонецФункции // ПолучитьИмяРеквизитаКодБанкаВПлатежнойСистеме()

// Получить имя реквизита БИК с учетом его изменения с 07.06.2010
//
Функция ПолучитьИмяРеквизитаБИКБанка(ДатаПериода) Экспорт
	Если НЕ ЗначениеЗаполнено(ДатаПериода) Тогда
	    ДатаПериода =  ТекущаяДата();	
	КонецЕсли;
	ИмяРеквизитаБИК = ?(ДатаПериода >= Дата(2010,06,07), "БИК", "БИКДоРеформыБанковскихСчетов");
	
	Возврат ИмяРеквизитаБИК
КонецФункции // ПолучитьИмяРеквизитаБИКБанка()

// Получить БИК  банка с учетом его изменения с 07.06.2010
//
Функция ПолучитьБИКБанка(ДатаПериода, Банк) Экспорт
	Если НЕ ЗначениеЗаполнено(ДатаПериода) Тогда
	    ДатаПериода =  ТекущаяДата();	
	КонецЕсли;
	
	ЗначениеБИК = ?(ДатаПериода >= Дата(2010,06,07), Банк.БИК, Банк.БИКДоРеформыБанковскихСчетов);
	
	
	Возврат ЗначениеБИК
КонецФункции // ПолучитьБИКБанка()




// Устанавливает банковский счет по умолчанию. Возвращает состояние установлен/не установлен
//
// Параметры
//  Счет				-	Текущее значение счета
//  ВладелецСчета  		–	<СправочникСсылка.Контрагенты (.Организации)> 
//							Контрагент (организация), счет которого нужно получить
//  Валюта  			–	<СправочникСсылка.Валюты>
//							Валюта регламентированного учета
//  СовпадениеВалюты	–	<Булево>
//                          признак совпадения нужной вылюты с указанной, либо исключения ее из поиска
//							По умолчанию ищем счет с указанной валютой.
//
// Возвращаемое значение:
//   <СправочникСсылка.БанковскиеСчета> – найденный счет или пустая ссылка
//
Функция УстановитьБанковскийСчет(Счет,ВладелецСчета, Валюта, СовпадениеВалюты = Истина) Экспорт
	
	НовыйСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	БанковскиеСчета.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СправочникВладелец
	|		ПО БанковскиеСчета.Владелец = СправочникВладелец.Ссылка
	|			И БанковскиеСчета.Ссылка = СправочникВладелец.ОсновнойБанковскийСчет
	|ГДЕ
	|	БанковскиеСчета.Владелец = &ВладелецСчета
	|	И БанковскиеСчета.ПометкаУдаления = ЛОЖЬ
	|	И (БанковскиеСчета.ВалютаДенежныхСредств = &Валюта
	|				И &СовпадениеВалюты = ИСТИНА
	|			ИЛИ (НЕ БанковскиеСчета.ВалютаДенежныхСредств = &Валюта)
	|				И &СовпадениеВалюты = ЛОЖЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецСчета",   ВладелецСчета);
	Запрос.УстановитьПараметр("Валюта", 		 Валюта);
	Запрос.УстановитьПараметр("СовпадениеВалюты",СовпадениеВалюты);
	
	Если ТипЗнч(ВладелецСчета) = Тип("СправочникСсылка.Контрагенты") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.Организации", "Справочник.Контрагенты");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат    = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойСчет = Выборка.Приоритет = 1;
		НайденОдинСчет     = Выборка.Количество() = 1;
		
		Если НайденОсновнойСчет ИЛИ НайденОдинСчет Тогда
			НовыйСчет = Выборка.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
	Если Счет <> НовыйСчет 
		И ((НЕ ЗначениеЗаполнено(Счет))
			ИЛИ (ТипЗнч(Счет) = Тип("СправочникСсылка.БанковскиеСчета") 
				И Счет.Владелец <> ВладелецСчета)) Тогда
		
		Счет = НовыйСчет;
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПолучитьБанковскийСчет()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОПЛАТЫ
                       
// Возвращает признак расчетов с контрагентами
//
Функция ЕстьРасчетыСКонтрагентами(ВидОперации = Неопределено) Экспорт

	Если ВидОперации = Неопределено Тогда 
		
		ЕстьРасчеты  = Ложь;
		
	Иначе

		ЕстьРасчеты = ВидыОперацийРасчетыСКонтрагентами().НайтиПоЗначению(ВидОперации)<>Неопределено;
		
	КонецЕсли;

	Возврат ЕстьРасчеты;

КонецФункции // ЕстьРасчетыСКонтрагентами()

// Возвращает признак расчетов с контрагентами по кредитам
//
// Возвращает признак расчетов с контрагентами
//
Функция ЕстьРасчетыПоКредитам(ВидОперации = Неопределено) Экспорт
	
	Если ВидОперации = Неопределено Тогда 
		ЕстьРасчеты  = Ложь;
	Иначе
		ЕстьРасчеты = (ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ (Метаданные.Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЗначенияПеречисления.Найти("ПоступлениеОплатыПоБанковскимКредитам")<>Неопределено
			И ВидОперации = Вычислить("Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоБанковскимКредитам"))
		ИЛИ (Метаданные.Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЗначенияПеречисления.Найти("ПоступлениеОплатыПоПлатежнымКартам")<>Неопределено
			И ВидОперации = Вычислить("Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам"))
		ИЛИ (Метаданные.Перечисления.Найти("ден_ВидыОперацийЗаявкиНаРасходование")<>Неопределено
			И ВидОперации = Перечисления["ден_ВидыОперацийЗаявкиНаРасходование"].РасчетыПоКредитамИЗаймамСКонтрагентами)
		ИЛИ (Метаданные.Перечисления.Найти("ден_ВидыОперацийПланируемоеПоступлениеДС")<>Неопределено
			И ВидОперации = Перечисления["ден_ВидыОперацийПланируемоеПоступлениеДС"].РасчетыПоКредитамИЗаймам));
	
	КонецЕсли;
	
	Возврат ЕстьРасчеты;
	
КонецФункции // ЕстьРасчетыПоКредитам()

// Определяет вид действия документа расчета с контрагентами
//
Функция ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента, ВидОперации = Неопределено) Экспорт

	ВидДействийДокумента = Новый Структура("Направление,РасчетыВозврат");
	ВидыДокументовДДС    = Новый Соответствие();

	ВидыДокументовДДС.Вставить("ПлатежноеПоручениеИсходящее",				"Выбытие");	
	ВидыДокументовДДС.Вставить("ПлатежныйОрдерСписаниеДенежныхСредств",		"Выбытие");
	ВидыДокументовДДС.Вставить("РасходныйКассовыйОрдер",					"Выбытие");
	ВидыДокументовДДС.Вставить("АвансовыйОтчет",							"Выбытие");	
	
	ВидыДокументовДДС.Вставить("ПлатежноеПоручениеВходящее",				"Поступление");	
	ВидыДокументовДДС.Вставить("ПлатежныйОрдерПоступлениеДенежныхСредств",	"Поступление");
	ВидыДокументовДДС.Вставить("ПриходныйКассовыйОрдер",					"Поступление");
	
	ВидыДокументовДДС.Вставить("ОплатаОтПокупателяПлатежнойКартой",			"Поступление");

	ВидДействийДокумента.Вставить("Направление", ВидыДокументовДДС[ВидДокумента]);

	ВидОперацииРасчет  = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;

	Если ЗначениеЗаполнено(ВидОперации) Тогда
		
		//Определение вида операции
		РасчетВозвратПоВидуОпераций = Новый Соответствие();

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя, ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);

		ВидДействийДокумента.Вставить("РасчетыВозврат",РасчетВозвратПоВидуОпераций[ВидОперации]);
		
		Если ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю Тогда
			ВидДействийДокумента.Вставить("Направление", "Выбытие");
		КонецЕсли; 

	ИначеЕсли ВидДокумента="АвансовыйОтчет" тогда
		ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
	КонецЕсли;

	Возврат ВидДействийДокумента;

КонецФункции // ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств()

// Подготавливает реестр платежей
//
Функция ПодготовитьТаблицуОплат(СтруктураШапкиДокумента) Экспорт	
	
	Перем ВидОперации;

	СтруктураШапкиДокумента.Свойство("ВидОперации", ВидОперации);
                                      
	Ссылка       = СтруктураШапкиДокумента.Ссылка;
	ВидДокумента = СтруктураШапкиДокумента.ВидДокумента;
	ЭтоВозврат   = (ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента, ВидОперации).РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат);

			
	//Зафиксируем расчеты-возврат в структуре шапки документа 
	СтруктураШапкиДокумента.Вставить("ЭтоВозврат", ЭтоВозврат);

	ИмяТабличнойЧасти = ?(ВидДокумента = "АвансовыйОтчет", "ОплатаПоставщикам", "РасшифровкаПлатежа");
	
	МетаданныеДок = СтруктураШапкиДокумента.Ссылка.ПолучитьОбъект().Метаданные();
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаРасчетовСКонтрагентомБУ",МетаданныеДок,ИмяТабличнойЧасти) Тогда
		ИмяРеквизитаСчетаРасчетовСКонтрагентом =  "СчетУчетаРасчетовСКонтрагентомБУ";
	Иначе
		ИмяРеквизитаСчетаРасчетовСКонтрагентом =  "СчетУчетаРасчетовСКонтрагентом";		
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаРасчетовСКонтрагентомНУ",МетаданныеДок,ИмяТабличнойЧасти) Тогда
		ТекстСчетаРасчетовСКонтрагентомНУ =  "ТаблицаПлатежей.СчетУчетаРасчетовСКонтрагентомНУ Как СчетОплатыНУ, ";
	Иначе
		ТекстСчетаРасчетовСКонтрагентомНУ =  "Значение(ПланСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаработУслугПрав) Как СчетОплатыНУ,";		
	КонецЕсли;
        		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",					Ссылка);
	Запрос.УстановитьПараметр("ЭтоВозврат",				ЭтоВозврат);
	Запрос.УстановитьПараметр("ПоРасчетнымДокументам",	Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты	Тогда
		РассчитатьСуммуВВалютеРеглУчета = Ложь;
	Иначе
		РассчитатьСуммуВВалютеРеглУчета = НЕ (СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("РассчитатьСуммуВВалютеРеглУчета", РассчитатьСуммуВВалютеРеглУчета);
	
	ВалютнаяСуммаВКолонкеВзаиморасчетов = ?(ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты, Ложь, Истина);
	
	Запрос.УстановитьПараметр("ВалютнаяСуммаВКолонкеВзаиморасчетов", ВалютнаяСуммаВКолонкеВзаиморасчетов);
	Запрос.УстановитьПараметр("ПустаяСтатьяДДС", Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПлатежей.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	ТаблицаПлатежей.ДоговорКонтрагента,
	|	ТаблицаПлатежей.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	ТаблицаПлатежей.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаПлатежей.КурсВзаиморасчетов,
	|	ТаблицаПлатежей.КратностьВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаПлатежей.ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоРасчетнымДокументам
	|				ИЛИ &ЭтоВозврат = ИСТИНА
	|			ТОГДА ТаблицаПлатежей.Сделка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Сделка,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат = ИСТИНА
	|			ТОГДА ТаблицаПлатежей.СчетУчетаРасчетовПоАвансам
	|		ИНАЧЕ ТаблицаПлатежей."+ИмяРеквизитаСчетаРасчетовСКонтрагентом +"
	|	КОНЕЦ КАК СчетОплатыБУ, " 
	+ ТекстСчетаРасчетовСКонтрагентомНУ + "
	|
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат = ИСТИНА
	|			ТОГДА ТаблицаПлатежей."+ ИмяРеквизитаСчетаРасчетовСКонтрагентом +"
	|		ИНАЧЕ ТаблицаПлатежей.СчетУчетаРасчетовПоАвансам
	|	КОНЕЦ КАК СчетАванса,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &РассчитатьСуммуВВалютеРеглУчета = ИСТИНА
	|				ТОГДА ВЫБОР
	|					КОГДА ТаблицаПлатежей.КратностьВзаиморасчетов = 0 Тогда 0 
	|					Иначе ВЫБОР
	|						КОГДА &ВалютнаяСуммаВКолонкеВзаиморасчетов = ИСТИНА
	|							ТОГДА ТаблицаПлатежей.СуммаВзаиморасчетов
	|						ИНАЧЕ ТаблицаПлатежей.СуммаПлатежа
	|					КОНЕЦ * ТаблицаПлатежей.КурсВзаиморасчетов / ТаблицаПлатежей.КратностьВзаиморасчетов
	|					Конец
	|			ИНАЧЕ ВЫБОР
	|					КОГДА &ВалютнаяСуммаВКолонкеВзаиморасчетов = ИСТИНА
	|						ТОГДА ТаблицаПлатежей.СуммаПлатежа
	|					ИНАЧЕ ТаблицаПлатежей.СуммаВзаиморасчетов
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ТенговаяСумма,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ВалютнаяСуммаВКолонкеВзаиморасчетов = ИСТИНА
	|				ТОГДА ТаблицаПлатежей.СуммаВзаиморасчетов
	|			ИНАЧЕ ТаблицаПлатежей.СуммаПлатежа
	|		КОНЕЦ КАК ЧИСЛО) КАК ВалютнаяСумма,
	|	ВЫРАЗИТЬ(ТаблицаПлатежей.СуммаВзаиморасчетов КАК ЧИСЛО) КАК СуммаВзаиморасчетов,";
	
	//Добавим информация в поле Содержание, для документа Авансовый тчет
	Если ВидДокумента = "АвансовыйОтчет" Тогда
		Запрос.Текст = Запрос.Текст + "
		|  ТаблицаПлатежей.Содержание КАК СодержаниеПроводки,"
	КонецЕсли;
	
	//Бит Источники финансирования
	Если ВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		Запрос.Текст = Запрос.Текст + "
		|  ТаблицаПлатежей.ИсточникФинансирования КАК ИсточникФинансирования,"
	КонецЕсли;
	//Бит Источники финансирования
	
	Запрос.Текст = Запрос.Текст + "	
	|	ТаблицаПлатежей.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ТаблицаПлатежей
	|ГДЕ
	|	ТаблицаПлатежей.Ссылка = &Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа", Строка(ВидДокумента + "." + ИмяТабличнойЧасти));
	
	Если ВидДокумента = "АвансовыйОтчет" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,	"СуммаПлатежа",										"Сумма");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,	"ТаблицаПлатежей.СтатьяДвиженияДенежныхСредств",	"Неопределено");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,	"ССЫЛКА.СтатьяДвиженияДенежныхСредств",	"Неопределено");
	КонецЕсли; 
	
	Если ВидДокумента  = "ОплатаОтПокупателяПлатежнойКартой" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,	"ССЫЛКА.СтатьяДвиженияДенежныхСредств",	"Неопределено");		
	КонецЕсли;
	
	РеестрПлатежей = Запрос.Выполнить().Выгрузить();
	
	//Дополнение информацией о корр. счете
	
	РеестрПлатежей.Колонки.Добавить("КоррСчет", Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	РеестрПлатежей.ЗаполнитьЗначения(СтруктураШапкиДокумента.КоррСчет, "КоррСчет");	
	
	Для НомерСубконто = 1 По 3 Цикл
		РеестрПлатежей.Колонки.Добавить("КоррСубконто" + НомерСубконто);
	КонецЦикла; 
	
	Для НомерСубконто = 1 По СтруктураШапкиДокумента.КоррСчет.ВидыСубконто.Количество() Цикл
		Если СтруктураШапкиДокумента.Свойство("КоррСубконто" + НомерСубконто) Тогда
			РеестрПлатежей.ЗаполнитьЗначения(СтруктураШапкиДокумента["КоррСубконто" + НомерСубконто], "КоррСубконто" + НомерСубконто);
		КонецЕсли;
	КонецЦикла;

	Для каждого Субконто из СтруктураШапкиДокумента.КоррСчет.ВидыСубконто Цикл

		Если Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиДвиженияДенежныхСредств Тогда
			РеестрПлатежей.ЗагрузитьКолонку(РеестрПлатежей.ВыгрузитьКолонку("СтатьяДДС"), "КоррСубконто" + Субконто.НомерСтроки);
		ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДенежныеСредства тогда
			
			// в документе могут присутствовать несколько рекизитов типа "Справочник.ДенежныеСредства"
			// в этом случае дополнительный элемент структуры "ОбъектДенежныхСредств" указывает
			// конкретный элемент аналитики
			Если СтруктураШапкиДокумента.Свойство("ОбъектУчетаДенежныхСредств") Тогда
			 	РеестрПлатежей.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОбъектУчетаДенежныхСредств, "КоррСубконто" + Субконто.НомерСтроки);
			Иначе				
				Если СтруктураШапкиДокумента.Свойство("СчетОрганизации") Тогда
					РеестрПлатежей.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетОрганизации, "КоррСубконто" + Субконто.НомерСтроки);
				КонецЕсли;
			КонецЕсли; 
			
		ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций тогда
			РеестрПлатежей.ЗаполнитьЗначения(СтруктураШапкиДокумента.ФизЛицо, "КоррСубконто" + Субконто.НомерСтроки);
			
		//Бит источники финансирования 
		ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоТиповые.ИсточникФинансирования тогда
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику Тогда
				РеестрПлатежей.ЗагрузитьКолонку(РеестрПлатежей.ВыгрузитьКолонку("ИсточникФинансирования"), "КоррСубконто" + Субконто.НомерСтроки);
			Иначе
				РеестрПлатежей.ЗаполнитьЗначения(СтруктураШапкиДокумента.ИсточникФинансирования, "КоррСубконто" + Субконто.НомерСтроки);	
			КонецЕсли;
			
		//Бит источники финансирования 
		
		КонецЕсли;
		
	КонецЦикла;

	//есди вид операции = "Приобретение ин.валюты" или "Поступления от продажи ин.валюты"
	//то подставляются счета Н111, Н112
	//иначе Счет по умолчанию  Н410
	СтрокаПлатежа = РеестрПлатежей[0];	
	Для каждого СтрокаПлатежа Из РеестрПлатежей Цикл
		//может быть заполнено, при операции "расчеты по кредитам и займам"
		Если ЗначениеЗаполнено(СтрокаПлатежа.СчетОплатыНУ) Тогда
			Продолжить;
		КонецЕсли;  		
		Если 
			//СтрокаПлатежа.СчетОплатыБУ  = ПланыСчетов.Типовой.ДенежныеСредстваВПутиГос
			//ИЛИ 
			СтрокаПлатежа.СчетОплатыБУ  = ПланыСчетов.Типовой.ДенежныеСредстваВПути Тогда			
			СчетНУПоУмолчанию = ПланыСчетов.Налоговый.ДенежныеСредстваВПути;
		ИначеЕсли СтрокаПлатежа.СчетОплатыБУ  = ПланыСчетов.Типовой.ДенежныеСредстваВПутиКонвертацияВалюты Тогда
			СчетНУПоУмолчанию = ПланыСчетов.Налоговый.ДенежныеСредстваВПутиКонвертацияВалюты;
		Иначе
			СчетНУПоУмолчанию = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();			 
		КонецЕсли;     		
		СтрокаПлатежа.СчетОплатыНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СтрокаПлатежа.СчетОплатыБУ, СтруктураШапкиДокумента.Дата, СчетНУПоУмолчанию);		
	КонецЦикла; 	
	
	Если СтруктураШапкиДокумента.Свойство("КоррСчетНУ") Тогда
		//Дополнение информацией о корр. счете НУ
		РеестрПлатежей.Колонки.Добавить("КоррСчетНУ", Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
		РеестрПлатежей.ЗаполнитьЗначения(СтруктураШапкиДокумента.КоррСчетНУ, "КоррСчетНУ");	
		
		Для НомерСубконто = 1 По 3 Цикл
			РеестрПлатежей.Колонки.Добавить("КоррСубконтоНУ" + НомерСубконто);
		КонецЦикла; 
		
		Для НомерСубконто = 1 По СтруктураШапкиДокумента.КоррСчетНУ.ВидыСубконто.Количество() Цикл
			Если СтруктураШапкиДокумента.Свойство("КоррСубконтоНУ" + НомерСубконто) Тогда
				РеестрПлатежей.ЗаполнитьЗначения(СтруктураШапкиДокумента["КоррСубконтоНУ" + НомерСубконто], "КоррСубконтоНУ" + НомерСубконто);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Субконто из СтруктураШапкиДокумента.КоррСчетНУ.ВидыСубконто Цикл
			
			Если Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиДвиженияДенежныхСредств Тогда
				РеестрПлатежей.ЗагрузитьКолонку(РеестрПлатежей.ВыгрузитьКолонку("СтатьяДДС"), "КоррСубконтоНУ" + Субконто.НомерСтроки);
			ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДенежныеСредства тогда
				
				// в документе могут присутствовать несколько рекизитов типа "Справочник.ДенежныеСредства"
				// в этом случае дополнительный элемент структуры "ОбъектДенежныхСредств" указывает
				// конкретный элемент аналитики
				Если СтруктураШапкиДокумента.Свойство("ОбъектУчетаДенежныхСредств") Тогда
					РеестрПлатежей.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОбъектУчетаДенежныхСредств, "КоррСубконтоНУ" + Субконто.НомерСтроки);
				Иначе				
					Если СтруктураШапкиДокумента.Свойство("СчетОрганизации") Тогда
						РеестрПлатежей.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетОрганизации, "КоррСубконтоНУ" + Субконто.НомерСтроки);
					КонецЕсли;
				КонецЕсли; 
				
			ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций тогда
				РеестрПлатежей.ЗаполнитьЗначения(СтруктураШапкиДокумента.ФизЛицо, "КоррСубконтоНУ" + Субконто.НомерСтроки);		
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	Для каждого СтрокаПлатежа из РеестрПлатежей Цикл

		Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.Сделка) тогда
			СтрокаПлатежа.Сделка = Неопределено;
		КонецЕсли;

	КонецЦикла;

	Возврат РеестрПлатежей;

КонецФункции // ПодготовитьТаблицуОплат()

// Выполняет приход/расход (возврат) денег по платежным документам при расчетах с контрагентами
//
// Параметры
// ОбъектСсылка    - ДокументОбъект или ДокументСсылка - Документ для которого выполяентся операция.
// РежимПроведения - РежимПроведенияДокумента- Режим проведения документа, для регламентной процедуры - неопределено
// РасчетыВВалюте  - Булево                  - Признак расчетов в валюте
// СчетКт          - ПланСчетов.Типовой - корреспондирующий счет
//
Функция ДвижениеДенег(	ДокументОбъект, СтруктураШапкиДокумента, ОпределятьСостояниеРасчетов = Ложь, Отказ, 
						Заголовок, БазовоеСодержаниеПроводки = "", НомерЖурнала = "", РеестрПлатежей = Неопределено, 
						ПереворачиватьОтрицательныеПроводки = Ложь) Экспорт

	Перем ВидОперации;
	
	Если ОпределятьСостояниеРасчетов
	   И НЕ ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, 
	   										Перечисления.РазделыУчета.РасчетыСКонтрагентами, 
											СтруктураШапкиДокумента.Дата) Тогда
		//Оперативное определение состояния расчетов не требуется.
		ОпределятьСостояниеРасчетов = Ложь;
	КонецЕсли; 
	
	//Подготовим реестр платежей по данным документа
	Если РеестрПлатежей = Неопределено Тогда
		РеестрПлатежей = ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
	КонецЕсли; 

	Если РеестрПлатежей.Количество() = 0 тогда
		//Расчеты отсутствуют
		Возврат Истина;
	КонецЕсли;

	//Получение основных данных документа для фильтра остатков
	Организация         	 = СтруктураШапкиДокумента.Организация;
	СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
	ДатаДока                 = СтруктураШапкиДокумента.Дата;
	
	Если СтруктураШапкиДокумента.ВидДокумента = "КорректировкаДолга" Тогда
		НаправлениеДвижения = ?(СтруктураШапкиДокумента.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, "Поступление", "Выбытие");
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "ОплатаОтПокупателяПлатежнойКартой" Тогда
		НаправлениеДвижения = ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтруктураШапкиДокумента.ВидДокумента, СтруктураШапкиДокумента.ВидОперации).Направление;	
	Иначе	
		НаправлениеДвижения = ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтруктураШапкиДокумента.ВидДокумента).Направление;
	КонецЕсли; 
	
	ЭтоВозврат						= СтруктураШапкиДокумента.ЭтоВозврат;
	
	СтруктураШапкиДокумента.Свойство("ВидОперации", ВидОперации);
	
	//Таблица значений для занесения промежуточных расчетов
	РеестрПроводок = РеестрПлатежей.Скопировать();
	РеестрПроводок.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов("Булево"));

	Если ОпределятьСостояниеРасчетов тогда
		
		//Оценка текущего состояния расчетов по БУ для каждого счета из счетов оплаты в документе.
		РеестрПроводок.Очистить();
		
		//Для банковских документов дата движения может отличаться
		МоментДокумента = Новый МоментВремени(ДатаДока,СтруктураШапкиДокумента.Ссылка);

		ПлатежиСвернуто = РеестрПлатежей.Скопировать();
		ПлатежиСвернуто.Свернуть("Контрагент,ДоговорКонтрагента,Сделка,СчетОплатыБУ,ВалютаВзаиморасчетов","СуммаВзаиморасчетов");//, ТенговаяСумма,ВалютнаяСумма

		РеестрЗадолженности = ПлатежиСвернуто.Скопировать();
		РеестрЗадолженности.Очистить();

		//Дополним реестр задолженностей необходимыми колонками
		ТекущаяЗадолженность = ПроцедурыБухгалтерскогоУчета.ПолучитьОстатокПоСчету(Организация, СтруктурноеПодразделение, МоментДокумента, ПланыСчетов.Типовой.ПустаяСсылка());
		
		ОбщегоНазначения.ДополнитьКолонкиТаблицыЗначений(РеестрЗадолженности,	ТекущаяЗадолженность);
		ОбщегоНазначения.ДополнитьКолонкиТаблицыЗначений(РеестрПроводок,			ТекущаяЗадолженность);

		//Получим таблицу задолженностей по данным бух. учета
		Для каждого ХарактеристикиПлатежа Из ПлатежиСвернуто Цикл

			//Для пустой оплаты не нужны остатки
			Если ХарактеристикиПлатежа.СуммаВзаиморасчетов = 0 Тогда
				Продолжить;
			КонецЕсли;

			СчетОплатыБУ = ХарактеристикиПлатежа.СчетОплатыБУ;
			Если НЕ ЗначениеЗаполнено(СчетОплатыБУ) Тогда
				//Если счет оплаты не заполнен (возможно при возврате), остатки оценивать не надо.
				Продолжить;
			КонецЕсли;

			//Определяем режим получения остатков
			ПолучитьОстаткиВВалюте = НЕ(ХарактеристикиПлатежа.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета) 
				                      И ХарактеристикиПлатежа.СчетОплатыБУ.Валютный;

			//Определяем фильтр по аналитике
			АналитикаСчета = Новый массив(3);

			Для каждого Субконто из ХарактеристикиПлатежа.СчетОплатыБУ.ВидыСубконто Цикл

				Если Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты тогда
					АналитикаСчета[Субконто.НомерСтроки-1] = ХарактеристикиПлатежа.Контрагент;
				ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры тогда
					АналитикаСчета[Субконто.НомерСтроки-1] = ХарактеристикиПлатежа.ДоговорКонтрагента;
				ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами тогда
					АналитикаСчета[Субконто.НомерСтроки-1] = ХарактеристикиПлатежа.Сделка;
				ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоТиповые.ТипыОпераций тогда
					АналитикаСчета[Субконто.НомерСтроки-1] = СтруктураШапкиДокумента.ТипОперации;
	
				КонецЕсли;

			КонецЦикла;

			УсловиеВалюта = Неопределено;

			Если ПолучитьОстаткиВВалюте Тогда
				УсловиеВалюта = ХарактеристикиПлатежа.ВалютаВзаиморасчетов;
			КонецЕсли;

			ЗнакФильтрПоОстаткам			= ?(НаправлениеДвижения = "Поступление",1,-1);
			НомерСубконтоРасчетныеДокументы	= 0;

			Если НЕ СчетОплатыБУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами,"ВидСубконто")=Неопределено тогда
				НомерСубконтоРасчетныеДокументы = СчетОплатыБУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами,"ВидСубконто").НомерСтроки;
			КонецЕсли;
			
			Если ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(	СтруктураШапкиДокумента.Организация, 
													Перечисления.РазделыУчета.РасчетыСКонтрагентами, 
													СтруктураШапкиДокумента.Дата) Тогда
				ТекущаяЗадолженность = 	ПроцедурыБухгалтерскогоУчета.ПолучитьОстатокПоСчету(Организация, СтруктурноеПодразделение, МоментДокумента, СчетОплатыБУ,
																УсловиеВалюта, АналитикаСчета[0], АналитикаСчета[1],
																АналитикаСчета[2], ЗнакФильтрПоОстаткам);
			КонецЕсли; 

			Если НЕ НомерСубконтоРасчетныеДокументы = 0 тогда
				УправлениеВзаиморасчетами.УпорядочитьТаблицуПоДокументу(ТекущаяЗадолженность,"Субконто" + НомерСубконтоРасчетныеДокументы);
			КонецЕсли;

			Если ТекущаяЗадолженность.Количество() > 0 тогда

				Для каждого СтрокаЗадолженности из ТекущаяЗадолженность цикл

					СтрокаРеестра = РеестрЗадолженности.Добавить();

					Для каждого Колонка из ПлатежиСвернуто.Колонки Цикл
						СтрокаРеестра[Колонка.Имя] = ХарактеристикиПлатежа[Колонка.Имя];
					КонецЦикла;

					Для каждого Колонка из ТекущаяЗадолженность.Колонки Цикл
						СтрокаРеестра[Колонка.Имя] = СтрокаЗадолженности[Колонка.Имя];
					КонецЦикла;

				КонецЦикла;

			КонецЕсли;

		КонецЦикла;

		СуммовыеРазницыПоДокументам = Неопределено;

		//так как нам для НУ, нужно просто общую стомиость без деления на авансы и оплату
		//то скопируем имеюещуюся таблицу
		РеестрПроводокНУ = РеестрПлатежей.Скопировать();
		ФифоПоРасчетам(	РеестрПроводок, РеестрПлатежей, РеестрЗадолженности, СтруктураШапкиДокумента, 
						"СчетОплатыБУ", СуммовыеРазницыПоДокументам, Заголовок);	

	Иначе
		//так как нам для НУ, нужно просто общую стомиость без деления на авансы и оплату
		//то скопируем имеюещуюся таблицу
		РеестрПроводокНУ = РеестрПлатежей.Скопировать();				
	КонецЕсли;
	
	СформироватьПроводкиПоДвижениюДенег(ДокументОбъект, СтруктураШапкиДокумента, РеестрПроводок, ОпределятьСостояниеРасчетов, НомерЖурнала,БазовоеСодержаниеПроводки, ПереворачиватьОтрицательныеПроводки);
	
	//ВзаиморасчетыСоСтруктурнымПодразделением = Ложь;
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда		
		СформироватьПроводкиПоДвижениюДенегНУ(ДокументОбъект, СтруктураШапкиДокумента, РеестрПроводокНУ, ОпределятьСостояниеРасчетов, НомерЖурнала,БазовоеСодержаниеПроводки, ПереворачиватьОтрицательныеПроводки);				
	КонецЕсли;   
	
	Возврат Истина;

КонецФункции // ДвижениеДенег()

Процедура СформироватьПроводкиПоДвижениюДенег(ДокументОбъект, СтруктураШапкиДокумента, РеестрПроводок, ОпределятьСостояниеРасчетов = Ложь, НомерЖурнала = "",БазовоеСодержаниеПроводки = "", ПереворачиватьОтрицательныеПроводки = Ложь) экспорт
	ПроводкиБУ = ДокументОбъект.Движения.Типовой;
	ПроводкиНУ = ДокументОбъект.Движения.Налоговый;
	
	Организация         = СтруктураШапкиДокумента.Организация;
	ДатаДока            = СтруктураШапкиДокумента.Дата;
	
	Если СтруктураШапкиДокумента.ВидДокумента = "КорректировкаДолга" Тогда
		НаправлениеДвижения = ?(СтруктураШапкиДокумента.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, "Поступление", "Выбытие");
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "ОплатаОтПокупателяПлатежнойКартой" Тогда
		НаправлениеДвижения = ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтруктураШапкиДокумента.ВидДокумента, СтруктураШапкиДокумента.ВидОперации).Направление;	
	Иначе	
		НаправлениеДвижения = ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтруктураШапкиДокумента.ВидДокумента).Направление;
	КонецЕсли; 
	
	ЭтоВозврат						= СтруктураШапкиДокумента.ЭтоВозврат;
	
	
	БазовыйСуфиксСчетаРасчетов = ?(НаправлениеДвижения = "Поступление", "Кт", "Дт");
	БазовыйСуфиксКоррСчета     = ?(НаправлениеДвижения = "Поступление", "Дт", "Кт");

	//Проводки по результатам распределения
	Для каждого РезультатРаспределения Из РеестрПроводок Цикл

		Если РезультатРаспределения.ВалютнаяСумма = 0
		   И РезультатРаспределения.ТенговаяСумма = 0
		   И РезультатРаспределения.СуммаВзаиморасчетов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПереворачиватьОтрицательныеПроводки Тогда
			СуфиксСчетаРасчетов = ?(РезультатРаспределения.ТенговаяСумма>0,БазовыйСуфиксСчетаРасчетов,БазовыйСуфиксКоррСчета);
			СуфиксКоррСчета     = ?(РезультатРаспределения.ТенговаяСумма>0,БазовыйСуфиксКоррСчета,БазовыйСуфиксСчетаРасчетов);
		Иначе
			СуфиксСчетаРасчетов = БазовыйСуфиксСчетаРасчетов;
			СуфиксКоррСчета     = БазовыйСуфиксКоррСчета;
		КонецЕсли; 

		Если РезультатРаспределения.РезультатРаспределения тогда
			
			Если НЕ (РеестрПроводок.Колонки.Найти("СодержаниеПроводки") = Неопределено)
			   И ЗначениеЗаполнено(РезультатРаспределения.СодержаниеПроводки) Тогда
				СодержаниеПроводки = РезультатРаспределения.СодержаниеПроводки;
			ИначеЕсли ЗначениеЗаполнено(БазовоеСодержаниеПроводки) Тогда
				СодержаниеПроводки = БазовоеСодержаниеПроводки;
			Иначе
				СодержаниеПроводки  = ?(ЭтоВозврат, 
										?(ТипЗнч(РезультатРаспределения.Сделка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"),
										  "Возврат оплаты", "Возврат аванса"),
										"Оплата");
			КонецЕсли;

			СчетРасчетов = ?(НЕ ЗначениеЗаполнено(РезультатРаспределения.СчетОплатыБУ), 
							 РезультатРаспределения.СчетАванса, 
							 РезультатРаспределения.СчетОплатыБУ);

		Иначе

			Если НЕ (РеестрПроводок.Колонки.Найти("СодержаниеПроводки") = Неопределено)
			   И ЗначениеЗаполнено(РезультатРаспределения.СодержаниеПроводки) Тогда
				СодержаниеПроводки = РезультатРаспределения.СодержаниеПроводки;
			ИначеЕсли ЗначениеЗаполнено(БазовоеСодержаниеПроводки) Тогда
				СодержаниеПроводки = БазовоеСодержаниеПроводки;
			Иначе
				СодержаниеПроводки  = ?(ЭтоВозврат, "Возврат", "Оплата (аванс)");
			КонецЕсли;

			СчетРасчетов = ?(НЕ ЗначениеЗаполнено(РезультатРаспределения.СчетАванса),РезультатРаспределения.СчетОплатыБУ,РезультатРаспределения.СчетАванса);

		КонецЕсли;

		Проводка				= ПроводкиБУ.Добавить();
		
		Проводка.Период			= ДатаДока;
		Проводка.Организация	= Организация;
		Проводка.Содержание		= СодержаниеПроводки;
		Проводка.НомерЖурнала	= НомерЖурнала;

		Проводка["Счет" + СуфиксСчетаРасчетов] = СчетРасчетов;

		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		Если РезультатРаспределения.РезультатРаспределения тогда

			Для НомерСубконто = 1 по 3 Цикл
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет"+СуфиксСчетаРасчетов],Проводка["Субконто"+СуфиксСчетаРасчетов],НомерСубконто,РезультатРаспределения["Субконто"+НомерСубконто]);
			КонецЦикла;

		Иначе
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет"+СуфиксСчетаРасчетов],Проводка["Субконто"+СуфиксСчетаРасчетов],"Контрагенты",РезультатРаспределения.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет"+СуфиксСчетаРасчетов],Проводка["Субконто"+СуфиксСчетаРасчетов],"Договоры",РезультатРаспределения.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет"+СуфиксСчетаРасчетов],Проводка["Субконто"+СуфиксСчетаРасчетов],"ТипыОпераций",СтруктураШапкиДокумента.ТипОперации);
			
			// если корсчет - счет учета денег
			// его аналитика - аналогичная корресп. счету.
			// Ситуация проявляется при поступлении ДС отпродажи валюты в банковских документах
			Если Проводка["Счет"+СуфиксСчетаРасчетов].ПринадлежитЭлементу(ПланыСчетов.Типовой.ДенежныеСредства) Тогда
				Для НомерСубконто = 1 по СчетРасчетов.ВидыСубконто.Количество() Цикл
					Если СчетРасчетов.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДенежныеСредства Тогда
						Если СтруктураШапкиДокумента.Свойство("СчетОрганизации") Тогда
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(	Проводка["Счет" + СуфиксСчетаРасчетов], 
										Проводка["Субконто" + СуфиксСчетаРасчетов],
										НомерСубконто, 
										СтруктураШапкиДокумента.СчетОрганизации);
						КонецЕсли;
									
					ИначеЕсли СчетРасчетов.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиДвиженияДенежныхСредств Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(	Проводка["Счет" + СуфиксСчетаРасчетов], 
										Проводка["Субконто" + СуфиксСчетаРасчетов],
										НомерСубконто, 
										РезультатРаспределения["СтатьяДДС"]);						
					Иначе						
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(	Проводка["Счет" + СуфиксСчетаРасчетов], 
										Проводка["Субконто" + СуфиксСчетаРасчетов],
										НомерСубконто, 
										РезультатРаспределения["КоррСубконто" + НомерСубконто]);
					КонецЕсли;					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;

		Проводка["Счет" + СуфиксКоррСчета] = РезультатРаспределения.КоррСчет;

		Для НомерСубконто = 1 по 3 Цикл
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(	Проводка["Счет" + СуфиксКоррСчета],
								Проводка["Субконто" + СуфиксКоррСчета],
								НомерСубконто,
								РезультатРаспределения["КоррСубконто" + НомерСубконто]);
		КонецЦикла;
		
        ЗнакСуммы = ?(ПереворачиватьОтрицательныеПроводки И РезультатРаспределения.ТенговаяСумма < 0, -1, 1);
		
		Проводка.Сумма = РезультатРаспределения.ТенговаяСумма * ЗнакСуммы;

		Если Проводка["Счет" + СуфиксКоррСчета].Валютный Тогда
			Проводка["Валюта" + СуфиксКоррСчета]        = СтруктураШапкиДокумента.ВалютаДокумента;
			Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
				Проводка["ВалютнаяСумма" + СуфиксКоррСчета] = РезультатРаспределения .ТенговаяСумма*ЗнакСуммы;
			Иначе
				Проводка["ВалютнаяСумма" + СуфиксКоррСчета] = РезультатРаспределения .ВалютнаяСумма*ЗнакСуммы;
			КонецЕсли;
		КонецЕсли;

		Если Проводка["Счет" + СуфиксСчетаРасчетов].Валютный Тогда
			Проводка["Валюта" + СуфиксСчетаРасчетов]        = РезультатРаспределения.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + СуфиксСчетаРасчетов] = РезультатРаспределения.СуммаВзаиморасчетов*ЗнакСуммы;
		КонецЕсли;
		
		//для операциий с счетом 1022, необходимо устанавливать свою сатью ДДС, указанную в шапке.
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидОперации", ДокументОбъект.Метаданные()) Тогда
			Если ТипЗнч(ДокументОбъект.ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийПоступлениеБезналичныхДенежныхСредств") И
				(ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты
				ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты) Тогда				
				Если Проводка.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Типовой.ДенежныеСредства) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", ДокументОбъект.СтатьяДвиженияДенежныхСредств);
				КонецЕсли;  	
			КонецЕсли;
		КонецЕсли; 	
				
	КонецЦикла;

КонецПроцедуры

Процедура СформироватьПроводкиПоДвижениюДенегНУ(ДокументОбъект, СтруктураШапкиДокумента, РеестрПроводок, ОпределятьСостояниеРасчетов = Ложь, НомерЖурнала = "",БазовоеСодержаниеПроводки = "", ПереворачиватьОтрицательныеПроводки = Ложь) экспорт
	
	Если Не СтруктураШапкиДокумента.Свойство("КоррСчетНУ") Тогда
		Возврат;
	КонецЕсли;
	
	ПроводкиНУ = ДокументОбъект.Движения.Налоговый;
	
	Организация         = СтруктураШапкиДокумента.Организация;
	ДатаДока            = СтруктураШапкиДокумента.Дата;
	
	Если СтруктураШапкиДокумента.ВидДокумента = "КорректировкаДолга" Тогда
		НаправлениеДвижения = ?(СтруктураШапкиДокумента.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, "Поступление", "Выбытие");
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "ОплатаОтПокупателяПлатежнойКартой" Тогда
		НаправлениеДвижения = ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтруктураШапкиДокумента.ВидДокумента, СтруктураШапкиДокумента.ВидОперации).Направление;	
	Иначе	
		НаправлениеДвижения = ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтруктураШапкиДокумента.ВидДокумента).Направление;
	КонецЕсли; 
	
	ЭтоВозврат						= СтруктураШапкиДокумента.ЭтоВозврат;
	
	
	БазовыйСуфиксСчетаРасчетов = ?(НаправлениеДвижения = "Поступление", "Кт", "Дт");
	БазовыйСуфиксКоррСчета     = ?(НаправлениеДвижения = "Поступление", "Дт", "Кт");

	//Проводки по результатам распределения
	Для каждого РезультатРаспределения Из РеестрПроводок Цикл

		Если РезультатРаспределения.ТенговаяСумма = 0
		   И РезультатРаспределения.СуммаВзаиморасчетов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПереворачиватьОтрицательныеПроводки Тогда
			СуфиксСчетаРасчетов = ?(РезультатРаспределения.ТенговаяСумма>0,БазовыйСуфиксСчетаРасчетов,БазовыйСуфиксКоррСчета);
			СуфиксКоррСчета     = ?(РезультатРаспределения.ТенговаяСумма>0,БазовыйСуфиксКоррСчета,БазовыйСуфиксСчетаРасчетов);
		Иначе
			СуфиксСчетаРасчетов = БазовыйСуфиксСчетаРасчетов;
			СуфиксКоррСчета     = БазовыйСуфиксКоррСчета;
		КонецЕсли; 

		Если НЕ (РеестрПроводок.Колонки.Найти("СодержаниеПроводки") = Неопределено)
			И ЗначениеЗаполнено(РезультатРаспределения.СодержаниеПроводки) Тогда
			СодержаниеПроводки = РезультатРаспределения.СодержаниеПроводки;
		ИначеЕсли ЗначениеЗаполнено(БазовоеСодержаниеПроводки) Тогда
			СодержаниеПроводки = БазовоеСодержаниеПроводки;
		Иначе
			СодержаниеПроводки  = ?(ЭтоВозврат, "Возврат", "Оплата (аванс)");
		КонецЕсли;   	

		СчетРасчетов = РезультатРаспределения.СчетОплатыНУ;
		
		Проводка				= ПроводкиНУ.Добавить();
		
		Проводка.Период			= ДатаДока;
		Проводка.Организация	= Организация;
		Проводка.Содержание		= СодержаниеПроводки;
		Проводка.НомерЖурнала	= НомерЖурнала;

		Проводка["Счет" + СуфиксСчетаРасчетов] = СчетРасчетов;

		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет"+СуфиксСчетаРасчетов],Проводка["Субконто"+СуфиксСчетаРасчетов],"Контрагенты",РезультатРаспределения.Контрагент);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет"+СуфиксСчетаРасчетов],Проводка["Субконто"+СуфиксСчетаРасчетов],"Договоры",РезультатРаспределения.ДоговорКонтрагента);
					
		// если корсчет - счет учета денег
		// его аналитика - аналогичная корресп. счету.
		// Ситуация проявляется при поступлении ДС отпродажи валюты в банковских документах
		Если Проводка["Счет"+СуфиксСчетаРасчетов].ПринадлежитЭлементу(ПланыСчетов.Налоговый.ДенежныеСредства) Тогда
			Для НомерСубконто = 1 по СчетРасчетов.ВидыСубконто.Количество() Цикл
				Если СчетРасчетов.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДенежныеСредства Тогда
					Если СтруктураШапкиДокумента.Свойство("СчетОрганизации") Тогда
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(	Проводка["Счет" + СуфиксСчетаРасчетов], 
																	Проводка["Субконто" + СуфиксСчетаРасчетов],
																	НомерСубконто, 
																	СтруктураШапкиДокумента.СчетОрганизации);	
					КонецЕсли;				
				Иначе						
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + СуфиксСчетаРасчетов], 
																	Проводка["Субконто" + СуфиксСчетаРасчетов],
																	НомерСубконто, 
																	РезультатРаспределения["КоррСубконто" + НомерСубконто]);
				КонецЕсли;					
			КонецЦикла;
		КонецЕсли;
		
		
		Проводка["Счет" + СуфиксКоррСчета] = РезультатРаспределения.КоррСчетНУ;

		Для НомерСубконто = 1 по 3 Цикл
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(	Проводка["Счет" + СуфиксКоррСчета],
								Проводка["Субконто" + СуфиксКоррСчета],
								НомерСубконто,
								РезультатРаспределения["КоррСубконтоНУ" + НомерСубконто]);
		КонецЦикла;
		
        ЗнакСуммы = ?(ПереворачиватьОтрицательныеПроводки И РезультатРаспределения.ТенговаяСумма < 0, -1, 1);
		
		Проводка.Сумма = РезультатРаспределения.ТенговаяСумма * ЗнакСуммы;

		//для операциий с счетом 1022, необходимо устанавливать свою сатью ДДС, указанную в шапке.
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидОперации", ДокументОбъект.Метаданные()) Тогда
			Если ТипЗнч(ДокументОбъект.ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийПоступлениеБезналичныхДенежныхСредств") И
				(ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты
				ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты) Тогда				
				Если Проводка.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Налоговый.ДенежныеСредства) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", ДокументОбъект.СтатьяДвиженияДенежныхСредств);
				КонецЕсли;  	
			КонецЕсли;
		КонецЕсли;
		
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, СтруктураШапкиДокумента.ВидУчетаНУ);
					
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДИАЛОГОВ РАСЧЕТНЫХ ДОКУМЕНТОВ

//Функция ОграничитьТипыДокументовДляДокументовОплаты
//
Функция ОграничитьТипыДокументовДляДокументовОплаты(Элемент, БазовоеОписаниеТипа, ЭтоВозврат = Ложь) Экспорт

	УдаляемыеТипыДокументовПоВидуОперации = Новый СписокЗначений();
	СписокТиповКУдалению                  = Новый Массив;
	БазовыеТипыДокументов                 = БазовоеОписаниеТипа.Типы();

	Если ЭтоВозврат Тогда
		//Удалить документы приобретения, реализации
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПередачаОС"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПоступлениеНМА"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПередачаНМА"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
	Иначе
		//Удалить документы оплаты и возвратов
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
	КонецЕсли;

	Размерность = БазовыеТипыДокументов.Количество();
	Для НомерЭлемента = 1 по Размерность Цикл
		РезультатПоиска = УдаляемыеТипыДокументовПоВидуОперации.НайтиПоЗначению(БазовыеТипыДокументов[Размерность-НомерЭлемента]);
		Если Не РезультатПоиска = Неопределено Тогда
			СписокТиповКУдалению.Добавить(РезультатПоиска.Значение);
		КонецЕсли;
	КонецЦикла;

	//Установка ограничения типов для поля "РасчетныйДокумент"
	ОграниченныйТип			= Новый ОписаниеТипов(БазовоеОписаниеТипа,,СписокТиповКУдалению);
	Элемент.ОграничениеТипа	= ОграниченныйТип;

	Возврат СписокТиповКУдалению;

КонецФункции // ОграничитьТипыДокументовДляДокументовОплаты()

Функция ФИФОПоРасчетам(	ТаблицаИтогов, ТаблицаКРаспределению, ТаблицаОстатков, СтруктураШапкиДокумента,
						КолонкаСчетаФильтра, ТаблицаСуммовыхРазниц = Неопределено,
						Заголовок, РазрешитьСторнирующиеПроводки = Истина) Экспорт

	// Разделение каждой строки на оплату задолженности и аванс
	Для каждого ТекущийПлатеж Из ТаблицаКРаспределению Цикл

		СчетФильтра  = ТекущийПлатеж[КолонкаСчетаФильтра];

		НомерСубконтоРасчетныеДокументы = 0;
		Если НЕ СчетФильтра.ВидыСубконто.Найти(	ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами, "ВидСубконто") = Неопределено Тогда
			НомерСубконтоРасчетныеДокументы = СчетФильтра.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами, "ВидСубконто").НомерСтроки;
		КонецЕсли;

		СчетОстатков		= ТекущийПлатеж[?(КолонкаСчетаФильтра = "СчетОплатыБУ", "СчетАванса", "СчетОплатыБУ")];
		Контрагент			= ТекущийПлатеж.Контрагент;
		ДоговорКонтрагента	= ТекущийПлатеж.ДоговорКонтрагента;

		КлючЗадолженности = Новый Структура();
		КлючЗадолженности.Вставить("Контрагент"         ,ТекущийПлатеж.Контрагент);
		КлючЗадолженности.Вставить("ДоговорКонтрагента" ,ТекущийПлатеж.ДоговорКонтрагента);
		КлючЗадолженности.Вставить(КолонкаСчетаФильтра  ,СчетФильтра);
		
		Если ТекущийПлатеж.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам тогда
			КлючЗадолженности.Вставить("Сделка", ТекущийПлатеж.Сделка);
		КонецЕсли;

		СуммаКРаспределению = ТекущийПлатеж.СуммаВзаиморасчетов;
		
		Если СуммаКРаспределению < 0 Тогда
			
			Если ТаблицаИтогов.Колонки.Найти("НомерПоПорядку") = Неопределено Тогда
				ТаблицаИтогов.Колонки.Добавить("НомерПоПорядку");
			КонецЕсли; 
			
			Для НПП = 1 по ТаблицаИтогов.Количество() Цикл
				ТаблицаИтогов[НПП-1].НомерПоПорядку = НПП;
			КонецЦикла; 
			
			Построитель = новый ПостроительЗапроса();
			ОписаниеИсточника = новый ОписаниеИсточникаДанных(ТаблицаИтогов.Скопировать());
			
			Построитель.ИсточникДанных = ОписаниеИсточника;
			Построитель.Порядок.Добавить("НомерПоПорядку",,,НаправлениеСортировки.Убыв);
			
			ОтборПостроитель = Построитель.Отбор;
			Для каждого КлючОтбора Из КлючЗадолженности Цикл
				ОтборПостроитель.Добавить(КлючОтбора.Ключ);
				ОтборПостроитель[КлючОтбора.Ключ].Значение		= КлючОтбора.Значение;
				ОтборПостроитель[КлючОтбора.Ключ].Использование	= Истина;
			КонецЦикла; 
			
			Построитель.Выполнить();

			ЗадолженностьПоСтрокеПлатежа = Построитель.Результат.Выгрузить();
			ЗадолженностьПоСтрокеПлатежа.Колонки.Удалить(ЗадолженностьПоСтрокеПлатежа.Колонки["СуммаОстаток"]);
			ЗадолженностьПоСтрокеПлатежа.Колонки.Удалить(ЗадолженностьПоСтрокеПлатежа.Колонки["ВалютнаяСуммаОстаток"]);
			ЗадолженностьПоСтрокеПлатежа.Колонки.ТенговаяСумма.Имя = "СуммаОстаток";
			ЗадолженностьПоСтрокеПлатежа.Колонки.ВалютнаяСумма.Имя = "ВалютнаяСуммаОстаток";
			РаспределениеОтрицательнойСтроки = Истина;
		Иначе 	
			ЗадолженностьПоСтрокеПлатежа = ТаблицаОстатков.НайтиСтроки(КлючЗадолженности);
			РаспределениеОтрицательнойСтроки = Ложь;
		КонецЕсли; 

		ОстаткиВВалюте = НЕ (ТекущийПлатеж.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета) 
			              И СчетФильтра.Валютный;

		// Учет закрытия задолженности
		Для каждого ЗадолженностьСтрока из ЗадолженностьПоСтрокеПлатежа Цикл
			
			СуммоваяРазница = 0;
			
			Задолженность = ЗадолженностьСтрока[?(ОстаткиВВалюте, "ВалютнаяСуммаОстаток", "СуммаОстаток")];
			
			Если НЕ РаспределениеОтрицательнойСтроки Тогда
				Если СуммаКРаспределению >= Задолженность Тогда
					НужноЗаплатить = Задолженность;
				Иначе
					НужноЗаплатить = СуммаКРаспределению;
				КонецЕсли;
			Иначе
				Если -СуммаКРаспределению >= Задолженность Тогда
					НужноЗаплатить = Задолженность;
				Иначе
					НужноЗаплатить = -СуммаКРаспределению;
				КонецЕсли;
			КонецЕсли; 
			
			Если НужноЗаплатить = 0 тогда 
				Продолжить;
			КонецЕсли;
			
			Если ОстаткиВВалюте тогда
				СуммоваяРазница = -Окр(НужноЗаплатить*ЗадолженностьСтрока.СуммаОстаток/ЗадолженностьСтрока.ВалютнаяСуммаОстаток,2);
				ЗадолженностьСтрока.СуммаОстаток = ЗадолженностьСтрока.СуммаОстаток - Окр(НужноЗаплатить*ЗадолженностьСтрока.СуммаОстаток/ЗадолженностьСтрока.ВалютнаяСуммаОстаток,2);
				ЗадолженностьСтрока.ВалютнаяСуммаОстаток = ЗадолженностьСтрока.ВалютнаяСуммаОстаток - НужноЗаплатить;
			Иначе
				ЗадолженностьСтрока.СуммаОстаток = ЗадолженностьСтрока.СуммаОстаток - НужноЗаплатить;
			КонецЕсли;
			
			СтрокаТаблицыИтогов = ТаблицаИтогов.Добавить();
			
			//Заполнить строчку по текущим данным
			Для каждого Колонка из ТаблицаИтогов.Колонки Цикл
				
				Если Колонка.Имя = "ТенговаяСумма"
				 ИЛИ Колонка.Имя = "ВалютнаяСумма"
				 ИЛИ Колонка.Имя = "СуммаВзаиморасчетов" Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не(ТаблицаОстатков.Колонки.Найти(Колонка.Имя) = Неопределено) Тогда
					СтрокаТаблицыИтогов[Колонка.Имя] = ЗадолженностьСтрока[Колонка.Имя];
				ИначеЕсли Не(ТаблицаКРаспределению.Колонки.Найти(Колонка.Имя) = Неопределено) Тогда
					 СтрокаТаблицыИтогов[Колонка.Имя] = ТекущийПлатеж[Колонка.Имя];                                      
				КонецЕсли;
				 
			КонецЦикла;

			СтрокаТаблицыИтогов.СуммаВзаиморасчетов	= НужноЗаплатить*?(РаспределениеОтрицательнойСтроки,-1,1);
			СтрокаТаблицыИтогов.ВалютнаяСумма		= Окр(НужноЗаплатить * (ТекущийПлатеж.ВалютнаяСумма/ТекущийПлатеж.СуммаВзаиморасчетов),2)*?(РаспределениеОтрицательнойСтроки,-1,1);
			СтрокаТаблицыИтогов.ТенговаяСумма		= Окр(НужноЗаплатить * (Окр(ТекущийПлатеж.ТенговаяСумма/ТекущийПлатеж.СуммаВзаиморасчетов,4)),2)*?(РаспределениеОтрицательнойСтроки,-1,1);
			
			Если РаспределениеОтрицательнойСтроки Тогда
				СтрокаТаблицыИтогов.РезультатРаспределения = ЗадолженностьСтрока.РезультатРаспределения;
			иначе
				СтрокаТаблицыИтогов.РезультатРаспределения = Истина;	
			КонецЕсли; 
			
			Если Не(НомерСубконтоРасчетныеДокументы = 0) тогда
				СтрокаТаблицыИтогов.Сделка = СтрокаТаблицыИтогов["Субконто"+НомерСубконтоРасчетныеДокументы];
			КонецЕсли;
			
			СуммаКРаспределению = СуммаКРаспределению - НужноЗаплатить*?(РаспределениеОтрицательнойСтроки,-1,1);
			
			ТекущийПлатеж.ТенговаяСумма			= ТекущийПлатеж.ТенговаяСумма - СтрокаТаблицыИтогов.ТенговаяСумма;
			ТекущийПлатеж.ВалютнаяСумма			= ТекущийПлатеж.ВалютнаяСумма - СтрокаТаблицыИтогов.ВалютнаяСумма;
			ТекущийПлатеж.СуммаВзаиморасчетов	= ТекущийПлатеж.СуммаВзаиморасчетов - СтрокаТаблицыИтогов.СуммаВзаиморасчетов;
			
			Если РаспределениеОтрицательнойСтроки Тогда
				СуммоваяРазница = 0;
			ИначеЕсли ОстаткиВВалюте Тогда
				СуммоваяРазница = СуммоваяРазница + СтрокаТаблицыИтогов.ТенговаяСумма;
			КонецЕсли;
			
			Если СуммаКРаспределению = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТекущийПлатеж.СуммаВзаиморасчетов = 0 тогда
			//Распределили полностью!
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыИтогов = ТаблицаИтогов.Добавить();
		
		//Заполнить строчку по текущим данным
		Для каждого Колонка Из ТаблицаИтогов.Колонки Цикл
			Если НЕ (ТаблицаКРаспределению.Колонки.Найти(Колонка.Имя) = Неопределено) Тогда
				 СтрокаТаблицыИтогов[Колонка.Имя] = ТекущийПлатеж[Колонка.Имя];                                      
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;

КонецФункции // ФИФОПоРасчетам()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ИНТЕРФЕЙСОМ

// Возвращает Основную кассу организации или структурного подразделения
Функция ПолучитьОсновнуюКассуДокумента(ДокументОбъект, МетаданныеДокумента) Экспорт
	
	КассаПоУмолчанию = Справочники.Кассы.ПустаяСсылка();
	
	Если МетаданныеДокумента.Имя = "ПлатежноеПоручениеВходящее" 
		ИЛИ МетаданныеДокумента.Имя = "ПлатежныйОрдерПоступлениеДенежныхСредств"
		ИЛИ МетаданныеДокумента.Имя = "ПриходныйКассовыйОрдер" Тогда
		
		ИмяРеквизитаСП = "СтруктурноеПодразделениеПолучатель";
	ИначеЕсли МетаданныеДокумента.Имя = "ПлатежноеПоручениеИсходящее"
		ИЛИ МетаданныеДокумента.Имя = "ПлатежныйОрдерСписаниеДенежныхСредств"
		ИЛИ МетаданныеДокумента.Имя = "РасходныйКассовыйОрдер" Тогда
				
		ИмяРеквизитаСП = "СтруктурноеПодразделениеОтправитель";
	Иначе 
		ИмяРеквизитаСП = "СтруктурноеПодразделение";
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента(ИмяРеквизитаСП, МетаданныеДокумента) Тогда
		
		Если ЗначениеЗаполнено(ДокументОбъект[ИмяРеквизитаСП]) Тогда
			// Касса структурного подразделения
			КассаПоУмолчанию = ДокументОбъект[ИмяРеквизитаСП].ОсновнаяКасса;
		Иначе
			// Касса структурного организации
			КассаПоУмолчанию = ДокументОбъект.Организация.ОсновнаяКасса;
		КонецЕсли;
	КонецЕсли;	

	// При использовании RLS у пользователя может не быть прав на полученную кассу.
	// Отсутствие прав на кассу приведет к модульной ошибке при обращении к ее реквизитам.
	// Поэтому код ниже проверяет, что у пользователя есть права на данную кассу. 	
	Если НЕ КассаПоУмолчанию.Пустая() Тогда
		Попытка
			КассаПоУмолчанию.ПолучитьОбъект();
		Исключение
			КассаПоУмолчанию = Справочники.Кассы.ПустаяСсылка();
		КонецПопытки;
	КонецЕсли;
	
	Возврат КассаПоУмолчанию; 
		
КонецФункции // ПолучитьОсновнуюКассуОбъекта

Функция ПолучитьОсновнойБанковскийСчетДокумента(ДокументОбъект, МетаданныеДокумента) Экспорт
	
	БанковскийСчетПоУмолчанию = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Если МетаданныеДокумента.Имя = "ПлатежноеПоручениеВходящее" 
		ИЛИ МетаданныеДокумента.Имя = "ПлатежныйОрдерПоступлениеДенежныхСредств"
		ИЛИ МетаданныеДокумента.Имя = "ПриходныйКассовыйОрдер" Тогда
		
		ИмяРеквизитаСП = "СтруктурноеПодразделениеПолучатель";
	ИначеЕсли МетаданныеДокумента.Имя = "ПлатежноеПоручениеИсходящее"
		ИЛИ МетаданныеДокумента.Имя = "ПлатежныйОрдерСписаниеДенежныхСредств"
		ИЛИ МетаданныеДокумента.Имя = "РасходныйКассовыйОрдер" Тогда
		
		ИмяРеквизитаСП = "СтруктурноеПодразделениеОтправитель";
	Иначе 
		ИмяРеквизитаСП = "СтруктурноеПодразделение";
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента(ИмяРеквизитаСП, МетаданныеДокумента) Тогда
		
		Если ЗначениеЗаполнено(ДокументОбъект[ИмяРеквизитаСП]) Тогда
			// Касса структурного подразделения
			БанковскийСчетПоУмолчанию = ДокументОбъект[ИмяРеквизитаСП].ОсновнойБанковскийСчет;
		Иначе
			// Касса структурного организации
			БанковскийСчетПоУмолчанию = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
	КонецЕсли;	

	Возврат БанковскийСчетПоУмолчанию; 
		
КонецФункции // ПолучитьОсновнойБанковскийСчетДокумента


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ИНТЕРФЕЙСОМ

// Заполняет реквизиты расчетного документа значениями по умолчанию
//
Процедура ЗаполнитьРеквизитыРасчетногоДокумента(ДокументОбъект, ТекПользователь, 
												ВалютаРегламентированногоУчета = Неопределено, 
												РасшифровкаПлатежа, ТипОперации = "") Экспорт

	Перем ТипЦен; // локальная

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаПлатеж = РасшифровкаПлатежа.Добавить()
	Иначе
		СтрокаПлатеж = РасшифровкаПлатежа[0];
	КонецЕсли;

	// Заполним флаги принадлежности к учету исходя из значений по умолчанию.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокумента) Тогда
		
		ДокументОбъект.ОтражатьВУправленческомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВУправленческомУчете");
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокумента) Тогда
		ФлагОтражатьВБухгалтерскомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВБухгалтерскомУчете");
		ДокументОбъект.ОтражатьВБухгалтерскомУчете  = ФлагОтражатьВБухгалтерскомУчете;

		//Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", МетаданныеДокумента) Тогда
		//	Если ФлагОтражатьВБухгалтерскомУчете Тогда
		//		ДокументОбъект.ОтражатьВНалоговомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВНалоговомУчете");
		//	Иначе
		//		ДокументОбъект.ОтражатьВНалоговомУчете = ФлагОтражатьВБухгалтерскомУчете;
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("ОтраженоВОперУчете") <> Неопределено Тогда
		ДокументОбъект.ОтраженоВОперУчете = Истина
	КонецЕсли;
	
	Если МетаданныеДокумента.Имя="ПриходныйКассовыйОрдер" ИЛИ МетаданныеДокумента.Имя="РасходныйКассовыйОрдер" Тогда
		ДокументОбъект.Оплачено=Истина
	КонецЕсли;
	
	// Устанавливаем булево переменные. Заполняем их только в том случае, 
	// если не указан вид операции (новый объект)
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента) И НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации) Тогда

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("АвтоРезервирование", МетаданныеДокумента) Тогда
			ДокументОбъект.АвтоРезервирование = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "АвтоРезервирование");
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("АвтоРазмещение", МетаданныеДокумента) Тогда
			ДокументОбъект.АвтоРазмещение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "АвтоРазмещение");
		КонецЕсли;

	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
		ДокументОбъект.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяОрганизация");
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Подразделение)) Тогда
		ДокументОбъект.Подразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеПодразделение");
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ЦФО", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ЦФО)) Тогда
		ДокументОбъект.ЦФО = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеПодразделение");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СтруктурноеПодразделение", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурноеПодразделение))
	   	И мОтображатьСтруктурныеПодразделения Тогда
	   	СтруктурноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеСтруктурноеПодразделениеОрганизации");
		Если СтруктурноеПодразделение = Неопределено Тогда
			ДокументОбъект.СтруктурноеПодразделение = ДокументОбъект.Организация;
		ИначеЕсли ТипЗнч(СтруктурноеПодразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ДокументОбъект.СтруктурноеПодразделение = СтруктурноеПодразделение;
		Иначе
			ДокументОбъект.СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();							
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СтруктурноеПодразделениеОтправитель", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурноеПодразделениеОтправитель))
	   	И мОтображатьСтруктурныеПодразделения Тогда
	   	СтруктурноеПодразделениеОтправитель = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеСтруктурноеПодразделениеОрганизации");
		Если СтруктурноеПодразделениеОтправитель = Неопределено Тогда
			ДокументОбъект.СтруктурноеПодразделениеОтправитель = ДокументОбъект.Организация;
		ИначеЕсли ТипЗнч(СтруктурноеПодразделениеОтправитель) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ДокументОбъект.СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделениеОтправитель;
		Иначе
			ДокументОбъект.СтруктурноеПодразделениеОтправитель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();							
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СтруктурноеПодразделениеПолучатель", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурноеПодразделениеПолучатель))
	   	И мОтображатьСтруктурныеПодразделения Тогда
	   	СтруктурноеПодразделениеПолучатель = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеСтруктурноеПодразделениеОрганизации");
		Если СтруктурноеПодразделениеПолучатель = Неопределено Тогда
			ДокументОбъект.СтруктурноеПодразделениеПолучатель = ДокументОбъект.Организация;
		ИначеЕсли ТипЗнч(СтруктурноеПодразделениеПолучатель) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ДокументОбъект.СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделениеПолучатель;
		Иначе
			ДокументОбъект.СтруктурноеПодразделениеПолучатель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();							
		КонецЕсли;
	КонецЕсли;
                       	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьКПН", МетаданныеДокумента) Тогда
		
		ТекЗначениеПлательщикаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ДокументОбъект.Организация, ДокументОбъект.Дата);
		
		ДокументОбъект.УчитыватьКПН = ТекЗначениеПлательщикаНаПрибыль;
				
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидУчетаНУ", МетаданныеДокумента) И ДокументОбъект.УчитыватьКПН Тогда								
			ОтражатьДокументыВНалоговомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВНалоговомУчете"); 
			ДокументОбъект.ВидУчетаНУ  = ?(ОтражатьДокументыВНалоговомУчете, Справочники.ВидыУчетаНУ.НУ, Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ);					
		КонецЕсли; 
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Ответственный)) Тогда
		ДокументОбъект.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойОтветственный");
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Автор", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Автор)) Тогда
		ДокументОбъект.Автор = ТекПользователь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации)) Тогда
		ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][0];
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ФормаОплаты", МетаданныеДокумента)
		И (НЕ ЗначениеЗаполнено(ДокументОбъект.ФормаОплаты)) Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("БанковскийСчетКасса", МетаданныеДокумента)
			И НЕ ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетКасса)
			И (ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
			ДокументОбъект.БанковскийСчетКасса = УправлениеДенежнымиСредствами.ПолучитьОсновнойБанковскийСчетДокумента(ДокументОбъект, МетаданныеДокумента);
			ДокументОбъект.ВалютаДокумента = ДокументОбъект.БанковскийСчетКасса.ВалютаДенежныхСредств;
			ДокументОбъект.ФормаОплаты = Перечисления["ден_ВидыДенежныхСредств"].Безналичные;
		Иначе	
			ДокументОбъект.ФормаОплаты = Перечисления["ден_ВидыДенежныхСредств"].Наличные;
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("Касса", МетаданныеДокумента)
			И ЗначениеЗаполнено(ДокументОбъект.Организация)
		    И НЕ ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда			
			
			КассаПоУмолчанию  = ПолучитьОсновнуюКассуДокумента(ДокументОбъект, МетаданныеДокумента);
					
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда	
				ДокументОбъект.Касса 			= КассаПоУмолчанию;
				ДокументОбъект.ВалютаДокумента	= КассаПоУмолчанию.ВалютаДенежныхСредств;			
			ИначеЕсли КассаПоУмолчанию.ВалютаДенежныхСредств = ДокументОбъект.ВалютаДокумента Тогда
				ДокументОбъект.Касса = КассаПоУмолчанию;
			КонецЕсли;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("КассаККМ", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.КассаККМ)) Тогда
		ДокументОбъект.КассаККМ = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяКассаККМ");
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, "РасшифровкаПлатежа") 
	   И (НЕ ЗначениеЗаполнено(СтрокаПлатеж.СтавкаНДС)) Тогда
		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяСтавкаНДС");
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации)
	   И (ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
	   
	   	СчетПоУмолчанию  = ПолучитьОсновнойБанковскийСчетДокумента(ДокументОбъект, МетаданныеДокумента);						
			
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента)
		 ИЛИ СчетПоУмолчанию.ВалютаДенежныхСредств = ДокументОбъект.ВалютаДокумента Тогда
		   	ДокументОбъект.СчетОрганизации = СчетПоУмолчанию;
			ДокументОбъект.ВалютаДокумента = СчетПоУмолчанию.ВалютаДенежныхСредств;
		КонецЕсли;
		// БУФ - начало
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("СтатьяДвиженияДенежныхСредств", МетаданныеДокумента)
			И НЕ ЗначениеЗаполнено(ДокументОбъект.СтатьяДвиженияДенежныхСредств)
			И (МетаданныеДокумента.Имя="ПлатежноеПоручениеИсходящее" ИЛИ МетаданныеДокумента.Имя="ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
			ДокументОбъект.СтатьяДвиженияДенежныхСредств = ДокументОбъект.СчетОрганизации.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		// БУФ - конец
	КонецЕсли;

	ЕстьРасчетыСКонтрагентами					= ЕстьРасчетыСКонтрагентами(ДокументОбъект.ВидОперации);
	ЕстьРасчетыПоКредитам						= ЕстьРасчетыПоКредитам(ДокументОбъект.ВидОперации);
	ДокументОбъект.ЕстьРасчетыСКонтрагентами	= ЕстьРасчетыСКонтрагентами;
	ДокументОбъект.ЕстьРасчетыПоКредитам		= ЕстьРасчетыПоКредитам;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("СчетКонтрагента", МетаданныеДокумента)
		   И НЕ ЗначениеЗаполнено(ДокументОбъект.СчетКонтрагента)
		   И ЗначениеЗаполнено(ДокументОбъект.Контрагент.ОсновнойБанковскийСчет) 
		   И ДокументОбъект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств Тогда

			ДокументОбъект.СчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;

		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)
		   И ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда 

			ДоступныйОсновнойДоговорКонтрагента = ОбщегоНазначения.ДоступныйДоговорКонтрагента(ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента);
			Если НЕ УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ДокументОбъект.ВидОперации).НайтиПоЗначению(ДоступныйОсновнойДоговорКонтрагента.ВидДоговора) = Неопределено Тогда

				Если ДокументОбъект.Организация.Пустая() Тогда
					СтрокаПлатеж.ДоговорКонтрагента	= ДоступныйОсновнойДоговорКонтрагента;
					Организация						= ДоступныйОсновнойДоговорКонтрагента.Организация;
				ИначеЕсли ДоступныйОсновнойДоговорКонтрагента.Организация.Пустая()
					  ИЛИ ДоступныйОсновнойДоговорКонтрагента.Организация = ДокументОбъект.Организация Тогда
					СтрокаПлатеж.ДоговорКонтрагента	= ДоступныйОсновнойДоговорКонтрагента;
				КонецЕсли;

			КонецЕсли;

			СтруктураКурсаВзаиморасчетов = ОбщегоНазначения.ПолучитьКурсВалюты(	СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
																ТекущаяДата());
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

			Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
			   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента)) Тогда

				ДокументОбъект.ВалютаДокумента = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

			КонецЕсли;

		КонецЕсли; // Договор

	КонецЕсли; // Контрагент

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.КурсДокумента) Тогда

		СтруктураКурсаДокумента				= ОбщегоНазначения.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);

		ДокументОбъект.КурсДокумента		= СтруктураКурсаДокумента.Курс;
		ДокументОбъект.КратностьДокумента	= СтруктураКурсаДокумента.Кратность;	

	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаРасхода", МетаданныеДокумента) Тогда
		ДокументОбъект.ДатаРасхода = ОбщегоНазначения.ПолучитьРабочуюДату();
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаПоступления", МетаданныеДокумента) Тогда
		ДокументОбъект.ДатаПоступления = ОбщегоНазначения.ПолучитьРабочуюДату();
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Состояние", МетаданныеДокумента) Тогда
		ДокументОбъект.Состояние = Перечисления["СостоянияОбъектов"].Подготовлен;
	КонецЕсли;
 
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Проект", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Проект)) Тогда
		ДокументОбъект.Проект = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойПроект");
	КонецЕсли;    
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Проект", МетаданныеДокумента.ТабличныеЧасти.РасшифровкаПлатежа)
	   И ДокументОбъект.РасшифровкаПлатежа.Количество()<>0 И (НЕ ЗначениеЗаполнено(ДокументОбъект.РасшифровкаПлатежа[0].Проект)) И ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ДокументПланированияПлатежа", МетаданныеДокумента.ТабличныеЧасти.РасшифровкаПлатежа),НЕ ЗначениеЗаполнено(ДокументОбъект.РасшифровкаПлатежа[0].ДокументПланированияПлатежа),Истина) Тогда
		ДокументОбъект.РасшифровкаПлатежа[0].Проект = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойПроект");
	КонецЕсли;    
	

КонецПроцедуры // ЗаполнитьРеквизитыРасчетногоДокумента()

Функция ВидыОперацийРасчетыСКонтрагентами() Экспорт
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРКО.ОплатаСтруктурномуПодразделению);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю);
		
		
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПКО.ОплатаСтруктурногоПодразделения);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком);
		
		
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
		
	СписокЗначений.Добавить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийППИсходящее.ОплатаСтруктурномуПодразделению);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами);
		
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаСтруктурногоПодразделения);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты); 
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты);
		
	СписокЗначений.Добавить(Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику);
	СписокЗначений.Добавить(Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю);
	СписокЗначений.Добавить(Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами);
	СписокЗначений.Добавить(Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ОплатаСтруктурномуПодразделению);
	СписокЗначений.Добавить(Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами);
		
	СписокЗначений.Добавить(Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя);
	СписокЗначений.Добавить(Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком);
	СписокЗначений.Добавить(Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами);
	Возврат СписокЗначений;
КонецФункции



// Эта функция пересчитывает сумму из валюты ВалютаНач по курсу ПоКурсуНач 
// в валюту ВалютаКон по курсу ПоКурсуКон
//
// Параметры:      
//	Сумма          - сумма, которую следует пересчитать;
//	ВалютаНач      - ссылка на элемент справочника Валют;
//                   определяет валюты из которой надо пересчитвать;
//	ВалютаКон      - ссылка на элемент справочника Валют;
//                   определяет валюты в которую надо пересчитвать;
// 	ПоКурсуНач     - курс из которого надо пересчитать;
// 	ПоКурсуКон     - курс в который надо пересчитать;
// 	ПоКратностьНач - кратность из которого надо пересчитать (по умолчанию = 1);
// 	ПоКратностьКон - кратность в который надо пересчитать  (по умолчанию = 1);
//
// Возвращаемое значение: 
//  Сумма, пересчитанная в другую валюту
//
Функция ПересчитатьИзВалютыВВалюту(Сумма, ВалютаНач, ВалютаКон, ПоКурсуНач, ПоКурсуКон, 
								   ПоКратностьНач = 1, ПоКратностьКон = 1 ) Экспорт

	Если (ВалютаНач = ВалютаКон) И (ПоКурсуНач     = ПоКурсуКон) 
	   И (ПоКратностьНач = ПоКратностьКон) Тогда

		// ну, тут и считать нечего...
		Возврат Сумма;

	КонецЕсли;
	
	// Проверка установки значений
	ПризнакОшибки = Ложь;
	Если ПоКурсуНач     = 0  Тогда
		ОбщегоНазначения.СообщитьОбОшибке("При пересчете валютных сумм обнаружен нулевой курс валюты: " + СокрЛП(ВалютаНач));
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если ПоКурсуКон     = 0  Тогда
		ОбщегоНазначения.СообщитьОбОшибке("При пересчете валютных сумм обнаружен нулевой курс валюты: " + СокрЛП(ВалютаКон));
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если ПоКратностьНач = 0  Тогда
		ОбщегоНазначения.СообщитьОбОшибке("При пересчете валютных сумм обнаружена нулевая кратность валюты: " + СокрЛП(ВалютаНач));
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если ПоКратностьКон = 0  Тогда
		ОбщегоНазначения.СообщитьОбОшибке("При пересчете валютных сумм обнаружена нулевая кратность валюты: " + СокрЛП(ВалютаКон));
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если ПризнакОшибки Тогда
		Возврат 0;          
	КонецЕсли;

	Возврат Окр((Сумма * ПоКурсуНач * ПоКратностьКон) / (ПоКурсуКон * ПоКратностьНач), 2);

КонецФункции // ПересчитатьИзВалютыВВалюту()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДСИСТЕМЫ УПРАВЛЕНИЕ ДЕНЕЖНЫМИ СРЕДСТВАМИ

//Функция ПолучитьКурсыДляГруппыВалют
//
Функция ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,ДатаКурса) Экспорт
	
	Запрос=Новый Запрос;
	СписокВалют=Новый СписокЗначений;
	
	Для каждого Валюта Из СтруктураГруппаВалют Цикл
		
		СписокВалют.Добавить(Валюта.Значение);
		
	КонецЦикла; 
	
	Запрос.Текст="ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность,
	|	КурсыВалютСрезПоследних.Валюта.Код КАК КодВалюты,
	|	КурсыВалютСрезПоследних.Валюта.Ссылка КАК Валюта
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, Валюта.Код В (&СписокВалют)) КАК КурсыВалютСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаКурса",ДатаКурса);
	Запрос.УстановитьПараметр("СписокВалют",СписокВалют);
	
	СтруктураКурсыВалют=Новый Структура;
	
	Результат=Запрос.Выполнить().Выгрузить();
	
	Для каждого Валюта Из СтруктураГруппаВалют Цикл
		
		СтрокаВалюта=Результат.Найти(Валюта.Значение,"КодВалюты");
		
		Если НЕ СтрокаВалюта=Неопределено Тогда
			СтруктураКурсыВалют.Вставить(Валюта.Ключ+"Курс",СтрокаВалюта.Курс);
			СтруктураКурсыВалют.Вставить(Валюта.Ключ+"Кратность",СтрокаВалюта.Кратность);
			СтруктураКурсыВалют.Вставить(Валюта.Ключ,СтрокаВалюта.Валюта);
		Иначе
			СтруктураКурсыВалют.Вставить(Валюта.Ключ+"Курс",0);
			СтруктураКурсыВалют.Вставить(Валюта.Ключ+"Кратность",0);
			СтруктураКурсыВалют.Вставить(Валюта.Ключ,Новый(Тип("СправочникСсылка.Валюты")));
		КонецЕсли;
		
	КонецЦикла; 		
	
	Возврат СтруктураКурсыВалют;
	
КонецФункции // ПолучитьКурсыДляГруппыВалют()

//Функция ПолучитьТаблицуПлатежейУпр
//
Функция ПолучитьТаблицуПлатежейУпр(ДатаДокумента,ВалютаДокумента,Документ, ВидПлатежногоДокумента, ЕстьКомиссияБанка = Ложь) Экспорт
	
	Запрос=Новый Запрос;
	
	ИсточникДляСДДС					=	"РасшифровкаПлатежаДок.СтатьяДвиженияДенежныхСредств";
	ИсточникДляСуммыПлатежа			=	"РасшифровкаПлатежаДок.СуммаПлатежа";
	ИсточникДляСуммыВзаиморасчетов	=	"РасшифровкаПлатежаДок.СуммаВзаиморасчетов";
	ИсточникДанных					= 	"Документ."+ВидПлатежногоДокумента+".РасшифровкаПлатежа КАК РасшифровкаПлатежаДок";
	
	Если ВидПлатежногоДокумента="ПриходныйКассовыйОрдер" Тогда
		Если Документ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
			ИсточникДляСДДС					=	"ВыдачаВПодотчет.СтатьяДвиженияДенежныхСредств";
			ИсточникДляСуммыПлатежа			=	"ВыдачаВПодотчет.СуммаПлатежа";
			ИсточникДляСуммыВзаиморасчетов	=	"ВыдачаВПодотчет.СуммаПлатежа";
			ИсточникДанных					= 	"Документ."+ВидПлатежногоДокумента+".ВыдачаВПодотчет КАК ВыдачаВПодотчет
												|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ИсточникДанных+"
												|		ПО ВыдачаВПодотчет.Ссылка = РасшифровкаПлатежаДок.Ссылка";
		ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником 
			ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками
			ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
			ИсточникДляСДДС					=	"РасшифровкаПлатежаДок.Ссылка.СтатьяДвиженияДенежныхСредств";
		КонецЕсли;
	ИначеЕсли ВидПлатежногоДокумента="ПлатежноеПоручениеВходящее" Тогда
		Если Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств
			ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратСоциальныхОтчислений
			ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаработнойПлаты
			ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПенсионныхВзносов Тогда
			ИсточникДляСДДС					=	"РасшифровкаПлатежаДок.Ссылка.СтатьяДвиженияДенежныхСредств";
			ИсточникДляСуммыПлатежа			=	"РасшифровкаПлатежаДок.Ссылка.СуммаДокумента";
			ИсточникДляСуммыВзаиморасчетов	=	"РасшифровкаПлатежаДок.Ссылка.СуммаДокумента";
		КонецЕсли;
	ИначеЕсли ВидПлатежногоДокумента="ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
		Если Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств
			ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств Тогда
			ИсточникДляСДДС					=	"РасшифровкаПлатежаДок.Ссылка.СтатьяДвиженияДенежныхСредств";
		КонецЕсли;
	ИначеЕсли ВидПлатежногоДокумента="ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
		Если Документ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств
			ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗаработнойПлаты Тогда
			ИсточникДляСДДС					=	"РасшифровкаПлатежаДок.Ссылка.СтатьяДвиженияДенежныхСредств";
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст="ВЫБРАТЬ
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	ВЫБОР КОГДА НЕ РасшифровкаПлатежаДок.ДоговорКонтрагента=&ПустойДоговор 
	|		ТОГДА ВЫБОР КОГДА РасшифровкаПлатежаДок.ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам)
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ВестиПоДокументамРасчетовСКонтрагентом,
	|	РасшифровкаПлатежаДок.Сделка КАК Сделка,
	|	РасшифровкаПлатежаДок.Подразделение КАК Подразделение,
	|	"+ИсточникДляСуммыПлатежа+" КАК СуммаПлатежа,
	|	"+ИсточникДляСуммыВзаиморасчетов+" КАК СуммаВзаиморасчетов,
	|	"+ИсточникДляСДДС+" КАК СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежаДок.ДокументПланированияПлатежа КАК ДокументПланированияПлатежа,
	|	РасшифровкаПлатежаДок.Проект КАК Проект,
	|	РасшифровкаПлатежаДок.СуммаПлатежаПлан КАК СуммаПлатежаПлан,
	|	ВЫРАЗИТЬ 
	|	(ВЫБОР 
	|		КОГДА &ВалютаДокумента=&ВалютаУпрУчета ТОГДА "+ИсточникДляСуммыПлатежа+"
	|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
	|		КОГДА &ВалютаДокумента<>&ВалютаУпрУчета И КурсыДокумента.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
	|			"+ИсточникДляСуммыПлатежа+"*КурсыДокумента.Курс * КурсыУпрУчета.Кратность 
	|			/ (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ 
	|	(ВЫБОР 
	|		КОГДА &ВалютаДокумента=&ВалютаРеглУчета ТОГДА "+ИсточникДляСуммыПлатежа+"
	|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
	|		КОГДА &ВалютаДокумента<>&ВалютаРеглУчета И КурсыДокумента.Курс <>0 ТОГДА
	|			"+ИсточникДляСуммыПлатежа+"*КурсыДокумента.Курс
	|			/ КурсыДокумента.Кратность
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА КурсыДокумента.Курс ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыДокумента.Курс КОНЕЦ Как КурсДокумента,
	|	ВЫБОР
	|		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыДокумента.Кратность КОНЕЦ Как КратностьДокумента,
	|	ВЫБОР
	|		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыУпрУчета.Курс КОНЕЦ Как КурсУпрУчета,
	|	ВЫБОР
	|		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыУпрУчета.Кратность КОНЕЦ Как КратностьУпрУчета
	|ИЗ
	|	"+ИсточникДанных+"
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаУпрУчета) КАК КурсыУпрУчета
	|	ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаДокумента) КАК КурсыДокумента
	|	ПО ИСТИНА
	|ГДЕ
	|	РасшифровкаПлатежаДок.Ссылка = &Ссылка";
	
	Если ЕстьКомиссияБанка Тогда
		Запрос.Текст=Запрос.Текст+" 
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ 
		|	Док.СчетОрганизации.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО КАК ВидДоговора,
		|	Неопределено КАК ВалютаВзаиморасчетов,
		|	Неопределено КАК ВедениеВзаиморасчетов,
		|	ЛОЖЬ  КАК ВестиПоДокументамРасчетовСКонтрагентом,	
		|	Неопределено,
		|	Док.Подразделение КАК Подразделение,
		|	Док.СуммаКомиссии КАК СуммаПлатежа,
		|	Док.СуммаКомиссии КАК СуммаВзаиморасчетов,
		|	ВЫБОР 
		|		КОГДА Док.СтатьяДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
		|			ТОГДА Док.СчетОрганизации.СтатьяДвиженияДенежныхСредств
		|		ИНАЧЕ Док.СтатьяДвиженияДенежныхСредств
		|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
		|	&ДокументПланированияПлатежа,
		|	&Проект,  
		|	Док.СуммаКомиссии КАК СуммаПлатежаПлан,
		|	ВЫРАЗИТЬ 
		|	(ВЫБОР 
		|		КОГДА &ВалютаДокумента=&ВалютаУпрУчета ТОГДА Док.СуммаКомиссии
		|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
		|		КОГДА &ВалютаДокумента<>&ВалютаУпрУчета И КурсыДокумента.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
		|			Док.СуммаКомиссии*КурсыДокумента.Курс * КурсыУпрУчета.Кратность 
		|			/ (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаУпр,
		|	ВЫРАЗИТЬ 
		|	(ВЫБОР 
		|		КОГДА &ВалютаДокумента=&ВалютаРеглУчета ТОГДА Док.СуммаКомиссии
		|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
		|		КОГДА &ВалютаДокумента<>&ВалютаРеглУчета И КурсыДокумента.Курс <>0 ТОГДА
		|			Док.СуммаКомиссии*КурсыДокумента.Курс
		|			/ КурсыДокумента.Кратность
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаРегл,
		|	ВЫБОР
		|		КОГДА КурсыДокумента.Курс ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ КурсыДокумента.Курс КОНЕЦ Как КурсДокумента,
		|	ВЫБОР
		|		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ КурсыДокумента.Кратность КОНЕЦ Как КратностьДокумента,
		|	ВЫБОР
		|		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ КурсыУпрУчета.Курс КОНЕЦ Как КурсУпрУчета,
		|	ВЫБОР
		|		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ КурсыУпрУчета.Кратность КОНЕЦ Как КратностьУпрУчета
	//	|  0 КАК СуммаВзаиморасчетовОстаток,
	//	| 0 КАК СуммаУпрОстаток,
	//	| Истина КАК ЭтоКомиссия
		|ИЗ
		|	Документ."+ВидПлатежногоДокумента+" КАК Док
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаУпрУчета) КАК КурсыУпрУчета
		|	ПО ИСТИНА
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаДокумента) КАК КурсыДокумента
		|	ПО ИСТИНА
		|	ГДЕ
		|	Док.Ссылка = &Ссылка"; 
		Запрос.УстановитьПараметр("ДокументПланированияПлатежа" , Документ.РасшифровкаПлатежа[0].ДокументПланированияПлатежа);
		Запрос.УстановитьПараметр("ВключатьВПлатежныйКалендарь" , Документ.РасшифровкаПлатежа[0].ДокументПланированияПлатежа.ВключатьВПлатежныйКалендарь);
		Запрос.УстановитьПараметр("Проект" , Документ.РасшифровкаПлатежа[0].Проект);
		
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаДокумента",ДатаДокумента);
	Запрос.УстановитьПараметр("ВалютаДокумента",ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУпрУчета",глЗначениеПеременной("ВалютаУправленческогоУчета"));
	Запрос.УстановитьПараметр("ВалютаРеглУчета",Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("Ссылка",Документ);
	Запрос.УстановитьПараметр("ПустойДоговор",Справочники.ДоговорыКонтрагентов.ПустаяСсылка());	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуПлатежей()

// Возвращает свободный остаток денежных средств (текущий остаток за вычетом сумм, уже предназначенных
// к списанию, и зарезервированных).
//
// Параметры
//  БанковскийСчетКасса			:Банковский счет, касса - место списания денежных средств
//  Дата						:Дата –дата, на которую формируются остатки
//
// Возвращаемое значение:
//   Свободный остаток			:число - свободный остаток на дату по выбранному счету (кассе)
//
Функция ПолучитьСвободныйОстатокДС(БанковскийСчетКасса,Дата, МассивЗаявки=Неопределено,СтруктурноеПодразделение = Неопределено) Экспорт
	
	Если МассивЗаявки=Неопределено Тогда
		МассивЗаявки = Новый Массив;
	КонецЕсли;
	УсловиеСП = "";
	Если СтруктурноеПодразделение<>Неопределено Тогда
		УсловиеСП = " И СтруктурноеПодразделение = &СтруктурноеПодразделение";
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваОстатки.СуммаОстаток 
	|		- ВЫБОР КОГДА НЕ((ДенежныеСредстваВРезервеОстатки.СуммаОстаток) ЕСТЬ NULL ) 
	|				ТОГДА ДенежныеСредстваВРезервеОстатки.СуммаОстаток 
	|				ИНАЧЕ 0 КОНЕЦ 
	|		- ВЫБОР КОГДА НЕ((ДенежныеСредстваКСписаниюОстатки.СуммаОстаток) ЕСТЬ NULL ) 
	|				ТОГДА ДенежныеСредстваКСписаниюОстатки.СуммаОстаток 
	|				ИНАЧЕ 0 КОНЕЦ 
	|		+ ВЫБОР КОГДА НЕ((ДенежныеСредстваКПолучениюОстатки.СуммаОстаток) ЕСТЬ NULL ) 
	|				ТОГДА ДенежныеСредстваКПолучениюОстатки.СуммаОстаток 
	|				ИНАЧЕ 0 КОНЕЦ КАК СвободныйОстаток
	|ИЗ
	|	РегистрНакопления.ден_ДенежныеСредства.Остатки(&Дата, БанковскийСчетКасса = &БанковскийСчетКасса "+УсловиеСП+") КАК ДенежныеСредстваОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ден_ДенежныеСредстваВРезерве.Остатки(&Дата, БанковскийСчетКасса = &БанковскийСчетКасса "+УсловиеСП+" И (НЕ ДокументРезервирования В (&МассивЗаявки))) КАК ДенежныеСредстваВРезервеОстатки
	|		ПО ДенежныеСредстваОстатки.БанковскийСчетКасса = ДенежныеСредстваВРезервеОстатки.БанковскийСчетКасса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ден_ДенежныеСредстваКСписанию.Остатки(&Дата, БанковскийСчетКасса = &БанковскийСчетКасса "+УсловиеСП+") КАК ДенежныеСредстваКСписаниюОстатки
	|		ПО ДенежныеСредстваОстатки.БанковскийСчетКасса = ДенежныеСредстваКСписаниюОстатки.БанковскийСчетКасса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ден_ДенежныеСредстваКПолучению.Остатки(&Дата, БанковскийСчетКасса = &БанковскийСчетКасса "+УсловиеСП+") КАК ДенежныеСредстваКПолучениюОстатки
	|		ПО ДенежныеСредстваОстатки.БанковскийСчетКасса = ДенежныеСредстваКПолучениюОстатки.БанковскийСчетКасса";
	
	
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("БанковскийСчетКасса",БанковскийСчетКасса);
	Запрос.УстановитьПараметр("Дата",КонецДня(Дата));
	Запрос.УстановитьПараметр("МассивЗаявки",МассивЗаявки);
	
	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() И (НЕ РезультатЗапроса.СвободныйОстаток=NULL) Тогда
		Возврат РезультатЗапроса.СвободныйОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьСвободныйОстатокДС() 

// Возвращает остаток денежных средств в планируемых поступлениях, еще не размещенных по другим заявкам
// к списанию, и зарезервированных).
//
// Параметры
//  ДокументПланирования			:Документ планируемого поступления денежных средств
//  Дата						:Дата –дата, на которую формируются остатки
//
// Возвращаемое значение:
//   Свободный остаток			:число - свободный остаток на дату выбранному документу
//
Функция ПолучитьНеразмещенныйОстаток(ДокументПланирования,Дата, ЗаявкаНаРасходованиеСредств,СтруктурноеПодразделение) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланируемыеПоступленияДенежныхСредствОстатки.СуммаОстаток - ВЫБОР КОГДА НЕ((РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток) ЕСТЬ NULL ) ТОГДА РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток ИНАЧЕ 0 КОНЕЦ КАК СвободныйОстаток
	|ИЗ
	|	РегистрНакопления.ден_ПланируемыеПоступленияДенежныхСредств.Остатки(&Дата, ДокументПланирования = &ДокументПланирования И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ПланируемыеПоступленияДенежныхСредствОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ден_РазмещениеЗаявокНаРасходованиеСредств.Остатки(, НЕ(ДокументРезервирования = &ТекущаяЗаявка)) КАК РазмещениеЗаявокНаРасходованиеСредствОстатки
	|		ПО ПланируемыеПоступленияДенежныхСредствОстатки.ДокументПланирования = РазмещениеЗаявокНаРасходованиеСредствОстатки.ДокументПланирования";
	
	
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("ДокументПланирования",ДокументПланирования);
	Запрос.УстановитьПараметр("Дата",КонецДня(Дата));
	Запрос.УстановитьПараметр("ТекущаяЗаявка",ЗаявкаНаРасходованиеСредств);
	
	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() И (НЕ РезультатЗапроса.СвободныйОстаток=NULL) Тогда
		Возврат РезультатЗапроса.СвободныйОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьНеразмещенныйОстаток()

// Проверяет остатки по регистрам "ЗаявкиНаРасходованиеСредств" и "ДенежныеСредстваВРезерве"
// по переданной в параметре заявке и управляет значением отказа в проведении платежного документа
//
// Параметры
//  ЗаявкаНаРасходованиеСредств	:Документ.ЗаявкаНаРасходованиеСредств  – заявка, для которой формируются остатки
//  Дата						:Дата –дата, на которую формируются остатки
//  Отказ						:Булево –отказ в проведении документа
//  Заголовок					:Строка –представление документа при проведении
//  БанковскийСчетКасса			:Банковский счет, касса - место списания денежных средств
//  СуммаДокумента				:Число - сумма денежных средств к списанию
//  СуммаВзаиморасчетов			:Число - сумма взаиморасчетов по документу
//
Процедура ПроверитьОстаткиПоЗаявке(Дата,Отказ,Заголовок,
	БанковскийСчетКасса,СуммаДокумента,ТаблицаПлатежейУпр, ЕстьРазрешение) Экспорт
	
	ТабДоговорыЗаявки=ТаблицаПлатежейУпр.Скопировать();
	ТабДоговорыЗаявки.Свернуть("ДоговорКонтрагента,ДокументПланированияПлатежа","СуммаВзаиморасчетов");
	
	// Проверяем соответствие суммы взаиморасчетов документа сумме взаиморасчетов в ТЧ заявки
	
	Для Каждого Платеж Из ТабДоговорыЗаявки Цикл
		
		Если Не ЗначениеЗаполнено(Платеж.ДокументПланированияПлатежа) Тогда
			
			Если НЕ ЕстьРазрешение Тогда
				
				ТекстСообщения=Заголовок;
				
				Если ЗначениеЗаполнено(Платеж.ДоговорКонтрагента) Тогда
					ТекстСообщения=ТекстСообщения+" Договор "+Платеж.ДоговорКонтрагента;
				КонецЕсли;
				
				ТекстСообщения=ТекстСообщения+": не указана заявка.";
				
				Сообщить(ТекстСообщения);
				Отказ = Истина;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ Платеж.ДокументПланированияПлатежа.Проведен Тогда
			
			Если НЕ ЕстьРазрешение Тогда
				
				Сообщить(Заголовок+Строка(Платеж.ДокументПланированияПлатежа)+" не проведена.");
				Отказ = Истина;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		ТекстУсловия="ЗаявкаНаРасходование = &ДокументЗаявка";
		
		Если ЗначениеЗаполнено(Платеж.ДоговорКонтрагента) Тогда
			ТекстУсловия=ТекстУсловия+"
			|И ДоговорКонтрагента = &ДоговорКонтрагента";
			Запрос.УстановитьПараметр("ДоговорКонтрагента",Платеж.ДоговорКонтрагента);
		КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗаявкиНаРасходованиеСредствОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток
		|	
		|ИЗ
		|	РегистрНакопления.ден_ЗаявкиНаРасходованиеСредств.Остатки(, "+ТекстУсловия+" ) КАК ЗаявкиНаРасходованиеСредствОстатки";
		
		Запрос.УстановитьПараметр("ДокументЗаявка",Платеж.ДокументПланированияПлатежа);
		
		РезультатЗапроса=Запрос.Выполнить();
		ВыбраннаяЗаявка=РезультатЗапроса.Выбрать();
		
		Если НЕ ВыбраннаяЗаявка.Следующий() Тогда
			ОстатокПоЗаявке=0;
		Иначе
			ОстатокПоЗаявке=?(ВыбраннаяЗаявка.СуммаВзаиморасчетовОстаток=NULL,0,ВыбраннаяЗаявка.СуммаВзаиморасчетовОстаток);
		КонецЕсли;
		
		Если ОстатокПоЗаявке<Платеж.СуммаВзаиморасчетов Тогда
			
			Если Платеж.ДоговорКонтрагента=Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				
				ВалютаПлатежа=Платеж.ДокументПланированияПлатежа.ВалютаДокумента;
				
				ТекстОшибки="Сумма платежа превышает остаток по заявке.
				|Текущий остаток = "+Формат(ОстатокПоЗаявке,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаПлатежа+"
				|Сумма платежа = "+Формат(Платеж.СуммаВзаиморасчетов,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаПлатежа;
				
			Иначе
				
				ВалютаРасчетовЗаявки=Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				
				ТекстОшибки="Договор "+Платеж.ДоговорКонтрагента+"
				|Сумма взаиморасчетов превышает остаток по заявке.
				|Текущий остаток = "+Формат(ОстатокПоЗаявке,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаРасчетовЗаявки+"
				|Сумма взаиморасчетов = "+Формат(Платеж.СуммаВзаиморасчетов,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаРасчетовЗаявки;
				
			КонецЕсли;	
			
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки,Отказ,Заголовок);	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьОстаткиПоЗаявке()

// Функция возвращает возможность проведения платежного документа, сумма которого превышает
// текущий остаток свободных денежных средств.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если можно проводить, иначе Ложь.
//
Функция ЕстьРазрешениеПревышатьСвободныйОстатокДС() Экспорт
	
	СписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПревышениеСвободногоОстаткаДС, Истина);
	
	Если (СписокФильтров.Количество() = 0)
		ИЛИ (СписокФильтров.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат СписокФильтров[0].Значение;
	КонецЕсли;
	
КонецФункции // ЕстьРазрешениеПроводитьБезЗаявки()

//Функция ОпределитьВидОперацииПлан
//
Функция ОпределитьВидОперацииПлан(ВидОперацииДокумент) Экспорт;
	
	Если ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		
		ВидОперацииПлан=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами Тогда
		
		ВидОперацииПлан=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		
		ВидОперацииПлан=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПереводНаДругойСчет;
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
//		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами Тогда
		
		ВидОперацииПлан=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
		
		ВидОперацииПлан=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику или
		ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		
		ВидОперацииПлан=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога Тогда
		
		ВидОперацииПлан=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		
		ВидОперацииПлан=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		ВидОперацииПлан=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее ИЛИ 
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда	 
		
		ВидОперацииПлан=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов  Тогда
		ВидОперацииПлан=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПенсионныхВзносов;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты  Тогда
		ВидОперацииПлан=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеНДССИзмененнымСрокомУплаты;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений  Тогда
		ВидОперацииПлан=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеСоциальныхОтчислений;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам 
		ИЛИ ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ВыплатаПоИсполнительнымЛистам  Тогда
		ВидОперацииПлан=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПоИсполнительнымЛистам;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
		
		ВидОперацииПлан=Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		
		ВидОперацииПлан=Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		//ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами Тогда
		
		ВидОперацииПлан=Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами;
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		
		ВидОперацииПлан=Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.РасчетыПоКредитамИЗаймам;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
		
		ВидОперацииПлан=Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ПрочееПоступлениеДенежныхСредств;
		
	Иначе
		
		ВидОперацииПлан=Неопределено;
		
	КонецЕсли;
	
	Возврат ВидОперацииПлан;
	
КонецФункции // ОпределитьВидОперацииПлан()

// Определяет вид операции расчетного документа по виду операции заявки на расходование средств
// или планируемого поступления денежных средств
//
Процедура ОпределитьОперациюПоОснованиюУпр(ВидОперации,ВидОперацииОснование) Экспорт
	
	Если ВидОперацииОснование.Метаданные().Имя="ден_ВидыОперацийЗаявкиНаРасходование" Тогда
		
		Если  ВидОперации.Метаданные().Имя="ВидыОперацийСписаниеБезналичныхДенежныхСредств" Тогда
			
			Если ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю Тогда
				ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику Тогда
				ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
				ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога Тогда
				ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП Тогда
				ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗаработнойПлаты;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами Тогда
				ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
			Иначе
				ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств;
			КонецЕсли;
			
		ИначеЕсли ВидОперации.Метаданные().Имя="ВидыОперацийППИсходящее" Тогда
			
			Если ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеНДССИзмененнымСрокомУплаты Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПенсионныхВзносов Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеСоциальныхОтчислений Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПоИсполнительнымЛистам Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику;	
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ОплатаСтруктурномуПодразделению Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ОплатаСтруктурномуПодразделению;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПереводНаДругойСчет Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет;					
			Иначе
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств;
			КонецЕсли;
			
		ИначеЕсли ВидОперации.Метаданные().Имя="ВидыОперацийРКО" Тогда
			
			Если ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю Тогда
				ВидОперации=Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику Тогда
				ВидОперации=Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
				ВидОперации=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
				ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами Тогда
				ВидОперации=Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами;
			//ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами Тогда
			//	ВидОперации=Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП Тогда
				ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПоИсполнительнымЛистам Тогда
				ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаПоИсполнительнымЛистам;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ОплатаСтруктурномуПодразделению Тогда
				ВидОперации=Перечисления.ВидыОперацийРКО.ОплатаСтруктурномуПодразделению;
			Иначе
				ВидОперации=Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВидОперацииОснование.Метаданные().Имя="ден_ВидыОперацийПланируемоеПоступлениеДС" Тогда
		
		Если  ВидОперации.Метаданные().Имя="ВидыОперацийПоступлениеБезналичныхДенежныхСредств" Тогда
			
			Если ВидОперацииОснование=Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком Тогда
				ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя Тогда
				ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.РасчетыПоКредитамИЗаймам Тогда
				ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами Тогда
				ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ОплатаСтруктурногоПодразделения Тогда
				ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаСтруктурногоПодразделения;
			Иначе
				ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств
			КонецЕсли;
			
		ИначеЕсли  ВидОперации.Метаданные().Имя="ВидыОперацийПКО" Тогда
			
			Если ВидОперацииОснование=Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком Тогда
				ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя Тогда
				ВидОперации=Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
			//ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами Тогда
			//	ВидОперации=Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.РасчетыПоКредитамИЗаймам Тогда
				ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами;
			ИначеЕсли ВидОперацииОснование=Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ОплатаСтруктурногоПодразделения Тогда
				ВидОперации=Перечисления.ВидыОперацийПКО.ОплатаСтруктурногоПодразделения;
			Иначе
				ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;			
	
КонецПроцедуры // ОпределитьОперациюПоОснованиюУпр()

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт
	
	ЗначениеСтавкиНДС 	  = УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
	
КонецПроцедуры // ПересчитатьСуммуНДС()

// Заполняет сумму документа и сумму взаиморасчетов на основании остатка
// по планируемому поступлению в регистре "ПланируемыеПоступленияДенежныхСредств"
//
Процедура ЗаполнитьПоПланируемомуПоступлениюУпр(РасшифровкаПлатежа,ДокументОснование,СтавкаНДС,ВалютаДокумента,КурсДокумента,КратностьДокумента,ВидОперации,Подразделение=Неопределено) Экспорт
	
	// Проверяем соответствие суммы взаиморасчетов документа сумме взаиморасчетов заявки
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланируемоеПоступлениеОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	ПланируемоеПоступлениеОстатки.СуммаОстаток КАК СуммаПлатежа,
	|	ПланируемоеПоступлениеОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПланируемоеПоступлениеОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ПланируемоеПоступлениеОстатки.Сделка КАК Сделка,
	|	ПланируемоеПоступлениеОстатки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ПланируемоеПоступлениеОстатки.Проект КАК Проект,
	|	ПланируемоеПоступлениеОстатки.ДокументПланирования.Ссылка КАК ДокументПланирования
	|ИЗ
	|	РегистрНакопления.ден_ПланируемыеПоступленияДенежныхСредств.Остатки(, ДокументПланирования = &ДокументПланирования) КАК ПланируемоеПоступлениеОстатки";
	
	Запрос.УстановитьПараметр("ДокументПланирования",ДокументОснование);
	РасшифровкаПлатежа.Очистить();
	
	РезультатЗапроса=Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств
			ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
			
			СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов = Выборка.СуммаПлатежа;
			СтрокаПлатеж.КурсВзаиморасчетовПлан=КурсДокумента;
			СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
			
		Иначе
			
			СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаВзаиморасчетов;
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			
			Если ВалютаДокумента = Выборка.ВалютаВзаиморасчетов Тогда
				СтрокаПлатеж.КурсВзаиморасчетов      = КурсДокумента;
				СтрокаПлатеж.КратностьВзаиморасчетов = КратностьДокумента;
			Иначе
				
				СтруктураКурсВзаиморасчетов=ОбщегоНазначения.ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетов,);
				СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсВзаиморасчетов.Кратность;
				
				Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
					СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
					/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаПлатеж.КурсВзаиморасчетовПлан=СтрокаПлатеж.КурсВзаиморасчетов;
			СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
			
		КонецЕсли;
		
		СтрокаПлатеж.СтавкаНДС = СтавкаНДС;
		СтрокаПлатеж.Сделка = Выборка.Сделка;
		СтрокаПлатеж.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДвиженияДенежныхСредств;
		СтрокаПлатеж.Проект = Выборка.Проект;
		СтрокаПлатеж.ДокументПланированияПлатежа = Выборка.ДокументПланирования;
		СтрокаПлатеж.Подразделение = Подразделение;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		
	КонецЦикла;
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ДокументПланированияПлатежа=ДокументОснование;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаявкеУпр()

// Функция возвращает возможность проведения платежного документа без указания ссылки
// на заявку.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если можно проводить, иначе Ложь.
//
Функция ЕстьРазрешениеПроводитьБезЗаявки() Экспорт
	
	СписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПроведениеПлатежаБезЗаявки, Истина);
	
	Если (СписокФильтров.Количество() = 0)
		ИЛИ (СписокФильтров.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат СписокФильтров[0].Значение;
	КонецЕсли;
	
КонецФункции // ЕстьРазрешениеПроводитьБезЗаявки()

// Функция возвращает возможность проведения платежного документа без указания ссылки
// на заявку.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если можно проводить, иначе Ложь.
//
Функция ЕстьРазрешениеПроводитьБезОперУчета() Экспорт
	
	СписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПроведениеРасчетныхДокументовБезОтраженияВОперативномУчете, Истина);
	
	Если (СписокФильтров.Количество() = 0)
		ИЛИ (СписокФильтров.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат СписокФильтров[0].Значение;
	КонецЕсли;
	
КонецФункции // ЕстьРазрешениеПроводитьБезЗаявки()

#Если Клиент Тогда
	
	//Процедура ПодборДокументовПланирования
	//
Процедура ПодборДокументовПланирования(СтруктураПараметров) Экспорт
		
	Если Не ЗначениеЗаполнено(СтруктураПараметров.ФормаОплаты) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана форма оплаты.");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураПараметров.ВалютаДокумента) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана валюта документа.");
		Возврат;
	КонецЕсли;
	
	// Открываем форму подбора.
	
	ФормаВладелец = СтруктураПараметров.ФормаДокумента;
	СтруктураПараметров.Удалить("ФормаДокумента");
	
	Если СтруктураПараметров.Свойство("РасшифровкаПлатежаДок") Тогда
		СтруктураПараметров.Вставить("РасшифровкаПлатежаАдрес",ПоместитьВоВременноеХранилище(СтруктураПараметров.РасшифровкаПлатежаДок.Выгрузить(),ФормаВладелец.Документ.Ссылка.УникальныйИдентификатор()));
		СтруктураПараметров.Удалить("РасшифровкаПлатежаДок");
	КонецЕсли;
	
	ОткрытьФормуМодально("Обработка.ден_ПодборПараметровРасшифровкиПлатежа.Форма",СтруктураПараметров,ФормаВладелец);
	
КонецПроцедуры

Функция ПрименятьКонтрольЗаполненияЗаявокДляОплаченныхДокументов(Дата) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетнаяПолитика.ПрименятьКонтрольЗаполненияЗаявокНаРасходДляОплаченныхДокументов
		|ИЗ
		|	РегистрСведений.фин_УчетнаяПолитикаПоБюджетированию.СрезПоследних(&Дата, ) КАК УчетнаяПолитика";

	Запрос.УстановитьПараметр("Дата", Дата);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ПрименятьКонтрольЗаполненияЗаявокНаРасходДляОплаченныхДокументов;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция КонтрольОтраженияПлатежныхДокументовВОперативномУчете(Дата) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетнаяПолитика.КонтрольОтраженияПлатежныхДокументовВОперативномУчете
		|ИЗ
		|	РегистрСведений.фин_УчетнаяПолитикаПоБюджетированию.СрезПоследних(&Дата, ) КАК УчетнаяПолитика";

	Запрос.УстановитьПараметр("Дата", Дата);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.КонтрольОтраженияПлатежныхДокументовВОперативномУчете;
	КонецЦикла;
	Возврат Ложь;
КонецФункции
	
#КонецЕсли

// ISO 20022
Функция ИспользоватьПечатныеФормыПП2024() Экспорт
	Возврат Ложь;
КонецФункции //ISO 20022

// ISO 20022
Функция ИспользоватьФорматMX() Экспорт
	Возврат Ложь;
КонецФункции //ISO 20022

