////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ ДОКУМЕНТОВ
 
// Заполняет реквизит "КраткийСоставДокумента" документа по его табличным частям.
//
// Параметры
//  ТЧДокумента					– табличная часть документа по которой происходит заполнение реквизита
//  ДополнительнаяТЧДокумента	- табличная часть документа, как правило это ТЧ с дополнительными начислениями
//
// Возвращаемое значение:
//   строка, значение реквизита "КраткийСоставДокумента".
//
Функция ЗаполнитьКраткийСоставДокумента(ТЧДокумента, ИмяРеквизита = "Сотрудник") Экспорт

	КраткийСоставДокумента = "";
	
	КоличествоТЧ = 1;
	КраткийСоставДокументаЗаполнен = Ложь;
	Для каждого ТабличнаяЧастьДокумента Из ТЧДокумента Цикл
		
		Если НЕ КраткийСоставДокументаЗаполнен Тогда
			
			Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
				
				ФИОФизЛица = ОбщегоНазначения.ФамилияИнициалыФизЛица(СтрокаТЧ[ИмяРеквизита]);
				Если Найти(КраткийСоставДокумента, ФИОФизЛица) = 0 Тогда
					
					Если СтрДлина(КраткийСоставДокумента) < 100 Тогда
						КраткийСоставДокумента = КраткийСоставДокумента + ", " + ФИОФизЛица;
					Иначе
						
						Если КоличествоТЧ = 1 Тогда
							КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
						Иначе
							
							Если Лев(КраткийСоставДокумента,2) = ", " Тогда
								КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
							Иначе
								КраткийСоставДокумента = Лев(КраткийСоставДокумента,97) + "...";
							КонецЕсли;
							
						КонецЕсли; 
						
						КраткийСоставДокументаЗаполнен = Истина;
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЦикла;
			
			КоличествоТЧ = КоличествоТЧ + 1;
			
		КонецЕсли; 
		
		Если КраткийСоставДокументаЗаполнен Тогда
			Прервать
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если Лев(КраткийСоставДокумента,2) = ", " Тогда
		ДлинаСтроки = СтрДлина(КраткийСоставДокумента);
		Если ДлинаСтроки < 100 Тогда
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3)
		Иначе
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат КраткийСоставДокумента;
	
КонецФункции // ЗаполнитьКраткийСоставДокумента()

// Заполняет реквизит "КраткийСоставВидовРасчетаДокумента" документа по его табличным частям.
//
// Параметры
//  ТЧДокумента					– табличная часть документа по которой происходит заполнение реквизита
//  ДополнительнаяТЧДокумента	- табличная часть документа, как правило это ТЧ с дополнительными начислениями
//
// Возвращаемое значение:
//   строка, значение реквизита "КраткийСоставВидовРасчетаДокумента".
//
Функция ЗаполнитьКраткийСоставВидовРасчетаДокумента(ТЧДокумента, ДополнительнаяТЧДокумента = Неопределено) Экспорт

	КраткийСоставВидовРасчетаДокумента = "";
	
	Для каждого СтрокаТЧ Из ТЧДокумента Цикл
			
		Если Найти(КраткийСоставВидовРасчетаДокумента, СтрокаТЧ.ВидРасчета) = 0 Тогда
			
			Если СтрДлина(КраткийСоставВидовРасчетаДокумента) < 100 Тогда
				КраткийСоставВидовРасчетаДокумента = КраткийСоставВидовРасчетаДокумента + ", " + СтрокаТЧ.ВидРасчета;
			Иначе
				КраткийСоставВидовРасчетаДокумента = Сред(КраткийСоставВидовРасчетаДокумента,3,95) + "...";
				Прервать;
			КонецЕсли;
			
		КонецЕсли; 
	
	КонецЦикла;
	
	Если ДополнительнаяТЧДокумента <> Неопределено И СтрДлина(КраткийСоставВидовРасчетаДокумента) < 100 Тогда
	
		Для каждого СтрокаТЧ Из ДополнительнаяТЧДокумента Цикл
			
			Если Найти(КраткийСоставВидовРасчетаДокумента, СтрокаТЧ.ВидРасчета) = 0 Тогда
				
				Если СтрДлина(КраткийСоставВидовРасчетаДокумента) < 100 Тогда
					КраткийСоставВидовРасчетаДокумента = КраткийСоставВидовРасчетаДокумента + ", " + СтрокаТЧ.ВидРасчета;
				Иначе
					Если Лев(КраткийСоставВидовРасчетаДокумента,2) = ", " Тогда
						КраткийСоставВидовРасчетаДокумента = Сред(КраткийСоставВидовРасчетаДокумента,3,95) + "...";
					Иначе
						КраткийСоставВидовРасчетаДокумента = Лев(КраткийСоставВидовРасчетаДокумента,97) + "...";
					КонецЕсли;
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	 
	КонецЕсли;
	
	Если Лев(КраткийСоставВидовРасчетаДокумента,2) = ", " Тогда
		ДлинаСтроки = СтрДлина(КраткийСоставВидовРасчетаДокумента);
		Если ДлинаСтроки < 100 Тогда
			КраткийСоставВидовРасчетаДокумента = Сред(КраткийСоставВидовРасчетаДокумента,3)
		Иначе
			КраткийСоставВидовРасчетаДокумента = Сред(КраткийСоставВидовРасчетаДокумента,3,95) + "...";
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат КраткийСоставВидовРасчетаДокумента;
	
КонецФункции // ЗаполнитьКраткийСоставВидовРасчетаДокумента()

// Определяет размер часовой тарифной ставки на основании дневной тарифной ставки
Функция ПолучитьЧасовуюТарифнуюСтавкуНаОсновеДневнойСтавки(ДневнаяСтавка, ПродолжительностьРабочейНедели, ВидГрафика) Экспорт
	
	Если ВидГрафика = Перечисления.ВидыРабочихГрафиков.Шестидневка Тогда	
		ПродолжительностьРабочегоДня = ПродолжительностьРабочейНедели / 6;
	Иначе	
		// для пятидневки и сменного графика
		ПродолжительностьРабочегоДня = ПродолжительностьРабочейНедели / 5;
	КонецЕсли;
	
	// расчет часовой ставки
	Возврат ?(ПродолжительностьРабочегоДня = 0, 0, ДневнаяСтавка / ПродолжительностьРабочегоДня);
	
КонецФункции	

// Выполняет расчет часовой тарифной ставки работника
// Возвращает результат с учетом курса валюты тарифной ставки
Функция ЧасоваяТарифнаяСтавкаРаботникаОрг(Знач Сотрудник, Знач ГоловнаяОрганизация, Знач ДатаАктуальности, Знач ДатаВалютногоУчета, ВалютаРегламентированногоУчета) Экспорт
	
	Ставка = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("ДатаВалютногоУчета", НачалоМесяца(ДатаВалютногоУчета));
	Запрос.УстановитьПараметр("РегламентВалюта" , ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ПустаяВалюта", Справочники.Валюты.ПустаяСсылка());
	Запрос.УстановитьПараметр("НачальнаяДата", '00010101');
	Запрос.УстановитьПараметр("ТипПоказателяТарифныйРазряд", Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ПоказателиОсновногоНачисления.ВидРасчета,
		|	ПоказателиОсновногоНачисления.Показатель1ТипПоказателя
		|ПОМЕСТИТЬ ВТ_Показатели
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОсновноеНачисление.ВидРасчета КАК ВидРасчета,
		|		Показатели1.Показатель.ТипПоказателя КАК Показатель1ТипПоказателя
		|	ИЗ
		|		РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
		|				&ДатаАктуальности,
		|				Сотрудник = &Сотрудник
		|					И Организация = &ГоловнаяОрганизация
		|					И ВидРасчетаИзмерение.Код ЕСТЬ NULL ) КАК ОсновноеНачисление
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели1
		|			ПО ОсновноеНачисление.ВидРасчета = Показатели1.Ссылка
		|				И (Показатели1.НомерСтроки = 1)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ОсновноеНачисление.ВидРасчетаЗавершения,
		|		Показатели1.Показатель.ТипПоказателя
		|	ИЗ
		|		РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
		|				&ДатаАктуальности,
		|				Сотрудник = &Сотрудник
		|					И Организация = &ГоловнаяОрганизация
		|					И ВидРасчетаИзмерение.Код ЕСТЬ NULL ) КАК ОсновноеНачисление
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели1
		|			ПО (Показатели1.НомерСтроки = 1)
		|				И ОсновноеНачисление.ВидРасчетаЗавершения = Показатели1.Ссылка) КАК ПоказателиОсновногоНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизацииСрезПоследних.ЗанимаемыхСтавок,
		|	ВЫБОР
		|		КОГДА ОсновноеНачисление.ПериодЗавершения < &ДатаАктуальности
		|				И ОсновноеНачисление.ПериодЗавершения <> &НачальнаяДата
		|			ТОГДА ВЫБОР
		|					КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
		|							ИЛИ ПоказателиОсновногоНачисленияЗавершения.Показатель1ТипПоказателя = &ТипПоказателяТарифныйРазряд
		|						ТОГДА ЕСТЬNULL(РазмерТарифныхСтавок.Размер, 0)
		|					ИНАЧЕ ОсновноеНачисление.Показатель1Завершения
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
		|						ИЛИ ПоказателиОсновногоНачисления.Показатель1ТипПоказателя = &ТипПоказателяТарифныйРазряд
		|					ТОГДА ЕСТЬNULL(РазмерТарифныхСтавок.Размер, 0)
		|				ИНАЧЕ ОсновноеНачисление.Показатель1
		|			КОНЕЦ
		|	КОНЕЦ * ВЫБОР
		|		КОГДА ВЫБОР
		|				КОГДА ОсновноеНачисление.ПериодЗавершения < &ДатаАктуальности
		|						И ОсновноеНачисление.ПериодЗавершения <> &НачальнаяДата
		|					ТОГДА ВЫБОР
		|							КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
		|									ИЛИ ПоказателиОсновногоНачисленияЗавершения.Показатель1ТипПоказателя = &ТипПоказателяТарифныйРазряд
		|								ТОГДА ЕСТЬNULL(РазмерТарифныхСтавок.Валюта, &РегламентВалюта)
		|							ИНАЧЕ ОсновноеНачисление.Валюта1Завершения
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
		|								ИЛИ ПоказателиОсновногоНачисления.Показатель1ТипПоказателя = &ТипПоказателяТарифныйРазряд
		|							ТОГДА ЕСТЬNULL(РазмерТарифныхСтавок.Валюта, &РегламентВалюта)
		|						ИНАЧЕ ОсновноеНачисление.Валюта1
		|					КОНЕЦ
		|			КОНЕЦ В (&РегламентВалюта, &ПустаяВалюта)
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(Валюты.Курс / Валюты.Кратность, 0)
		|	КОНЕЦ КАК ОкладТариф,
		|	РаботникиОрганизацииСрезПоследних.ГрафикРаботы,
		|	РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ДлительностьРабочейНедели КАК ДлительностьРабочейНедели,
		|	ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ИспользуетсяСовместноСПланГрафиком, ЛОЖЬ) КАК ИспользуетсяСовместноСПланГрафиком,
		|	РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ВидГрафика КАК ВидГрафика,
		|	ВЫБОР
		|		КОГДА ОсновноеНачисление.ПериодЗавершения < &ДатаАктуальности
		|				И ОсновноеНачисление.ПериодЗавершения <> &НачальнаяДата
		|			ТОГДА ОсновноеНачисление.ВидРасчетаЗавершения.СпособРасчета
		|		ИНАЧЕ ОсновноеНачисление.ВидРасчета.СпособРасчета
		|	КОНЕЦ КАК СпособРасчета,
		|	ЕСТЬNULL(РегламентированныеРасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&ДатаАктуальности,
		|			Сотрудник = &Сотрудник
		|				И Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизацииСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
		|				&ДатаАктуальности,
		|				Сотрудник = &Сотрудник
		|					И Организация = &ГоловнаяОрганизация
		|					И ВидРасчетаИзмерение.Код ЕСТЬ NULL ) КАК ОсновноеНачисление
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Показатели КАК ПоказателиОсновногоНачисления
		|		ПО (ОсновноеНачисление.ВидРасчета = ПоказателиОсновногоНачисления.ВидРасчета)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Показатели КАК ПоказателиОсновногоНачисленияЗавершения
		|		ПО (ОсновноеНачисление.ВидРасчетаЗавершения = ПоказателиОсновногоНачисленияЗавершения.ВидРасчета)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ДатаВалютногоУчета, ) КАК РазмерТарифныхСтавок
		|		ПО (ВЫБОР
		|				КОГДА ОсновноеНачисление.ПериодЗавершения < &ДатаАктуальности
		|						И ОсновноеНачисление.ПериодЗавершения <> &НачальнаяДата
		|					ТОГДА ОсновноеНачисление.ТарифныйРазряд1Завершения
		|				ИНАЧЕ ОсновноеНачисление.ТарифныйРазряд1
		|			КОНЕЦ = РазмерТарифныхСтавок.ТарифныйРазряд)
		|			И РаботникиОрганизацииСрезПоследних.Должность = РазмерТарифныхСтавок.Должность
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты
		|		ПО (Валюты.Валюта = ВЫБОР
		|				КОГДА ОсновноеНачисление.ПериодЗавершения < &ДатаАктуальности
		|						И ОсновноеНачисление.ПериодЗавершения <> &НачальнаяДата
		|					ТОГДА ВЫБОР
		|							КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
		|									ИЛИ ПоказателиОсновногоНачисленияЗавершения.Показатель1ТипПоказателя = &ТипПоказателяТарифныйРазряд
		|								ТОГДА РазмерТарифныхСтавок.Валюта
		|							ИНАЧЕ ОсновноеНачисление.Валюта1Завершения
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
		|								ИЛИ ПоказателиОсновногоНачисления.Показатель1ТипПоказателя = &ТипПоказателяТарифныйРазряд
		|							ТОГДА РазмерТарифныхСтавок.Валюта
		|						ИНАЧЕ ОсновноеНачисление.Валюта1
		|					КОНЕЦ
		|			КОНЕЦ)
		|			И (Валюты.Период = &ДатаВалютногоУчета)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&ДатаАктуальности, ) КАК РегламентированныеРасчетныеПоказатели
		|		ПО (ИСТИНА)";
	
	Запрос.Текст = ТекстЗапроса;				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		
		ПродолжительностьРабочейНедели = ?(Выборка.ДлительностьРабочейНедели = NULL, 0, Выборка.ДлительностьРабочейНедели);
		
		Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням
			ИЛИ Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам
			ИЛИ Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням
			ИЛИ Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам тогда
			
			// Пересчет месячной тарифной ставки в часовую
			
			ВремяПоТабелюТекст = 
			"ВЫБРАТЬ
			|	СУММА(ВЫБОР
			|			КОГДА ОтработанноеВремя.ВидИспользованияРабочегоВремени.ВидВремени В (&ОтработанноеВПределахНормы, &ЦелодневноеНеотработанное, &ЧасовоеНеотработанное)
			|				ТОГДА ОтработанноеВремя.ЧасовПоНормеОборот
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК НормаЧасовПоТабелюЗаМесяц,
			|	СУММА(ВЫБОР
			|			КОГДА ОтработанноеВремя.ВидИспользованияРабочегоВремени.ВидВремени = &ЧасовоеНеотработанное
			|				ТОГДА ОтработанноеВремя.ЧасовПоНормеОборот
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ЧасовПоТабелюЗаМесяцОтклонение,
			|	ЛОЖЬ КАК ОшибкаВводаОтработанногоВремени
			|ИЗ
			|	РегистрНакопления.РабочееВремяРаботниковОрганизаций.Обороты(
			|					&парамНачало, 
			|					&парамКонец,
			|					,
			|					Организация =  &ГоловнаяОрганизация
			|					И Сотрудник = &Сотрудник) КАК ОтработанноеВремя
			|";
			
			Если Выборка.ИспользуетсяСовместноСПланГрафиком Тогда
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	&парамПоЧасам КАК ВидУчетаВремени,
				|	БалансРабочегоВремени.НормаЧасов КАК ОсновноеЗначениеНормаПериодДействия,
				|	ВремяПоТабелю.НормаЧасовПоТабелюЗаМесяц,
				|	ВремяПоТабелю.ЧасовПоТабелюЗаМесяцОтклонение,
				|	ВремяПоТабелю.ОшибкаВводаОтработанногоВремени
				|ИЗ
				|	РегистрСведений.БалансРабочегоВремени КАК БалансРабочегоВремени
				|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ВремяПоТабелюТекст + ") КАК ВремяПоТабелю
				|		ПО ИСТИНА
				|
				|ГДЕ
				|	БалансРабочегоВремени.ГрафикРаботы = &парамГрафикРаботы И 
				|	БалансРабочегоВремени.ДатаМесяца = &парамНачало
				|";
				
			Иначе
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	&парамПоЧасам КАК ВидУчетаВремени,
				|	СУММА(ГрафикиПоВидамВремени.ОсновноеЗначениеНорма) КАК ОсновноеЗначениеНормаПериодДействия,
				|	МАКСИМУМ(ВремяПоТабелю.НормаЧасовПоТабелюЗаМесяц) КАК НормаЧасовПоТабелюЗаМесяц,
				|	МАКСИМУМ(ВремяПоТабелю.ЧасовПоТабелюЗаМесяцОтклонение) КАК ЧасовПоТабелюЗаМесяцОтклонение,
				|	МАКСИМУМ(ВремяПоТабелю.ОшибкаВводаОтработанногоВремени) КАК ОшибкаВводаОтработанногоВремени
				|ИЗ
				|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиПоВидамВремени
				|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ВремяПоТабелюТекст + ") КАК ВремяПоТабелю
				|		ПО ИСТИНА
				|
				|ГДЕ
				|	ГрафикиПоВидамВремени.ВидУчетаВремени = &парамПоЧасам И
				|	ГрафикиПоВидамВремени.Дата МЕЖДУ &парамНачало И &парамКонец И
				|	ГрафикиПоВидамВремени.ГрафикРаботы = &парамГрафикРаботы
				|";
				
			КонецЕсли;

			Запрос.УстановитьПараметр("ОтработанноеВПределахНормы", Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
			Запрос.УстановитьПараметр("ЦелодневноеНеотработанное", Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
			Запрос.УстановитьПараметр("ЧасовоеНеотработанное", Перечисления.ВидыВремени.ЧасовоеНеотработанное);
			Запрос.УстановитьПараметр("парамНачало", НачалоМесяца(ДатаАктуальности));
			Запрос.УстановитьПараметр("парамКонец", КонецМесяца(ДатаАктуальности));
			Запрос.УстановитьПараметр("парамПоЧасам", Перечисления.ВидыУчетаВремени.ПоЧасам);
			Запрос.УстановитьПараметр("парамГрафикРаботы", Выборка.ГрафикРаботы);

			ВыборкаНормаВремени = Запрос.Выполнить().Выбрать();
			Если ВыборкаНормаВремени.Следующий() Тогда
				НормаВремени = ПроведениеРасчетов.НормаВремениЗаМесяц(ВыборкаНормаВремени, Перечисления.ВидыУчетаВремени.ПоЧасам);
				
				Если ПроведениеРасчетов.ЭтоРасчетПоМинимальнойЗаработнойПлате(Выборка.СпособРасчета) Тогда
					ОкладТариф = Выборка.ОкладТариф * Выборка.РазмерМЗП;
				Иначе
					ОкладТариф = Выборка.ОкладТариф;
				КонецЕсли;
				
				Ставка = ?(НормаВремени > 0, ОкладТариф / НормаВремени, 0);
			КонецЕсли;
			
		ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке тогда	
			
			// Пересчет дневной ставки в часовую
			Ставка = ПолучитьЧасовуюТарифнуюСтавкуНаОсновеДневнойСтавки(Выборка.ОкладТариф, ПродолжительностьРабочейНедели, Выборка.ВидГрафика);
			
		Иначе
		
			Ставка = Выборка.ОкладТариф;
			
		КонецЕсли; 
		
	КонецЕсли;				   
				   
	Возврат Ставка;
КонецФункции  // ЧасоваяТарифнаяСтавкаРаботникаОрг

// Проверяет, заполнен ли регламентированный производственный календарь за переданный период 
//
// Параметры
//  ДатаНач, ДатаКон - дата, определяют проверяемый период
//  ВыводитьСообщения - булево - признак вывода сообщений в окно сообщений, по умолчанию - ложь
//
// Возвращаемое значение:
//   Булево  - если колендарь заполнен за весь период
//
Функция РегламентированныйКалендарьЗаполнен(ДатаНач, ДатаКон, ВыводитьСообщения = Ложь) Экспорт 

	ТекстЛет = "ВЫБРАТЬ " + Символы.ПС + Символы.Таб + Формат(ДатаНач,"ДФ=yyyy") + " КАК Год";
	ТекущийГод = Год(ДатаНач) + 1;
	Пока ТекущийГод <= Год(ДатаКон) Цикл
	    ТекстЛет = ТекстЛет + Символы.ПС + Символы.Таб + "Объединить" + Символы.ПС + "ВЫБРАТЬ " + Символы.ПС + Символы.Таб + Формат(ТекущийГод,"ЧГ=0");
		ТекущийГод = ТекущийГод + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ГодыПериода.Год,
		|	ДатыКалендаря.КоличествоДней
		|ИЗ
		|	(" + ТекстЛет + ") КАК ГодыПериода
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК КоличествоДней,
		|			РегламентированныйПроизводственныйКалендарь.Год КАК Год
		|		ИЗ
		|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|		
		|		ГДЕ
		|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаС И &ДатаПо
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РегламентированныйПроизводственныйКалендарь.Год) КАК ДатыКалендаря
		|		ПО ГодыПериода.Год = ДатыКалендаря.Год";
		
	Запрос.Текст = ТекстЗапроса;					   
	Запрос.УстановитьПараметр("ДатаПо", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("ДатаС", ДатаНач);
	Выборка = Запрос.Выполнить().Выбрать();
	КалендарьЗаполнен = Истина;
	Сообщение = "Перед формированием отчета заполните ""Регламентированный производственный календарь"" за ";
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоДней = Null Тогда
			Сообщение = Сообщение + ?(КалендарьЗаполнен,"",", ") + Формат(Выборка.Год,"ЧГ=0");
			КалендарьЗаполнен = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если Не КалендарьЗаполнен и ВыводитьСообщения Тогда
		Сообщить(Сообщение + ?(Найти(Сообщение,",")=0," год!"," годы!"));
	КонецЕсли;
	
    Возврат КалендарьЗаполнен
	
КонецФункции // РегламентированныйКалендарьЗаполнен()

// Процедура записывает в регистр сведений новые фамилию, имя и отчество
//
Процедура ЗаписатьДанныеФИОВРегистр(Ссылка, Фамилия, Имя, Отчество) Экспорт
	
	ФИОСрез		= РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(,Новый Структура("ФизЛицо",Ссылка));
	СтрокаСреза	= ФИОСрез.Фамилия + ФИОСрез.Имя + ФИОСрез.Отчество;
	
	Если СтрокаСреза <> (Фамилия + Имя + Отчество) Тогда
		
		МенеджерЗаписи = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.ФизЛицо = Ссылка;
		Если ПустаяСтрока(СтрокаСреза) Тогда
			МенеджерЗаписи.Период = Макс(НастройкаПравДоступа.ПолучитьПервуюДатуДоступногоПериода(), '19000101');
		Иначе
			МенеджерЗаписи.Период = ОбщегоНазначения.ПолучитьРабочуюДату();
		КонецЕсли;
		
		МенеджерЗаписи.Фамилия	= Фамилия;
		МенеджерЗаписи.Имя		= Имя;
		МенеджерЗаписи.Отчество	= Отчество;
		
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьДанныеФИОВРегистр()

// Функция возвращает совокупность данных о физическом лице в виде структуры, 
// В совокупность данных входит ФИО, должность в заданной организации, 
// паспортные данные и др.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой
//                 определяется должность и подразделение работника
//  ФизЛицо      - СправочникСсылка.ФизическиеЛица - физическое лицо,
//                 по которому возвращается совокупность данных
//  ДатаСреза    - Дата - дата, на которую считываются данные
//
// Возвращаемое значение:
//  Структура    - Структура с совокупностью данных о физическом лице:
//                 - Фамилия
//                 - Имя
//                 - Отчетсво
//                 - Представление (Фамилия И.О.)
//                 - Подразделение
//                 - ДокументВид
//                 - ДокументСерия
//                 - ДокументНомер
//                 - ДокументДатаВыдачи
//                 - ДокументКемВыдан
//                 - ДокументКодПодразделения
//
Функция ДанныеФизЛица(Организация, ФизЛицо, ДатаСреза) Экспорт
	
	Результат = Новый Структура("Фамилия, Имя, Отчество, Представление, 
								|ТабельныйНомер, Должность, ПодразделениеОрганизации, 
								|ДокументВид, ДокументСерия, ДокументНомер,  
								|ДокументДатаВыдачи, ДокументКемВыдан,НеСклонятьФамилию");

	ЗапросПоЛицам = Новый Запрос();
	ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
	ЗапросПоЛицам.УстановитьПараметр("Организация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	ЗапросПоЛицам.УстановитьПараметр("ФизЛицо", ФизЛицо);
	ЗапросПоЛицам.УстановитьПараметр("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	ЗапросПоЛицам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	ФИОФизЛицСрезПоследних.НеСклонятьФамилию,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Код КАК ТабельныйНомер,
	|	РаботникиОрганизацийСрезПоследних.Должность,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
	|	ВЫРАЗИТЬ(ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК СТРОКА(1000)) КАК ДокументКемВыдан
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&ДатаСреза, 
	|				ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(
	|				&ДатаСреза, 
	|				ФизЛицо = &ФизЛицо) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&ДатаСреза, 
	|				Сотрудник.ФизЛицо = &ФизЛицо 
	|				И Организация = &Организация
	|				И Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство) КАК РаботникиОрганизацийСрезПоследних
	|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	РаботникиОрганизацийСрезПоследних.Период УБЫВ
	|";
	
	Данные = ЗапросПоЛицам.Выполнить().Выбрать();
	Если Данные.Следующий() Тогда
		Результат.Фамилия       			= Данные.Фамилия;
		Результат.Имя      					= Данные.Имя;
		Результат.Отчество      			= Данные.Отчество;
		Результат.Представление 			= ОбщегоНазначения.ПолучитьФамилиюИмяОтчество(Данные.Фамилия, Данные.Имя, Данные.Отчество);
		Результат.НеСклонятьФамилию      	= Данные.НеСклонятьФамилию;
		
		Результат.ТабельныйНомер  			= Данные.ТабельныйНомер;
		Результат.Должность      			= Данные.Должность;
		Результат.ПодразделениеОрганизации  = Данные.ПодразделениеОрганизации;
		
		Результат.ДокументВид        		= Данные.ДокументВид;
		Результат.ДокументСерия      		= Данные.ДокументСерия;
		Результат.ДокументНомер      		= Данные.ДокументНомер;
		Результат.ДокументДатаВыдачи 		= Данные.ДокументДатаВыдачи;
		Результат.ДокументКемВыдан      	= Данные.ДокументКемВыдан;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ДанныеФизЛица()

Функция ДанныеДолжности(Организация, ФизЛицо, ДатаСреза) Экспорт
	
	//+++ Oleg SmartT. 2021-04-08	
	Результат = Новый Структура("СтруктурнаяЕдиница, 
								|Должность, 
								|ОтветственноеЛицо");

	ЗапросПоЛицам = Новый Запрос();
	ЗапросПоЛицам.УстановитьПараметр("ФизическоеЛицо", ФизЛицо);
	ЗапросПоЛицам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаОрганизаций.Должность,
	|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо,
	|	ОтветственныеЛицаОрганизаций.ОтветственноеЛицо,
	|	ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
	|ГДЕ
	|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо = &ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтветственныеЛицаОрганизаций.Период УБЫВ";
	
	Данные = ЗапросПоЛицам.Выполнить().Выбрать();
	Если Данные.Следующий() Тогда
		Результат.ОтветственноеЛицо	 = Данные.ОтветственноеЛицо;
		Результат.Должность      	 = Данные.Должность;
		Результат.СтруктурнаяЕдиница = Данные.СтруктурнаяЕдиница;
	КонецЕсли;
	
	Возврат Результат;
	//--- Oleg SmartT. 2021-04-08	
	
КонецФункции // ДанныеФизЛица()

Функция ПользовательНаЭтапеМаршрута(ТочкаЭтапа) Экспорт
	//+++ Oleg SmartT. 2021-05-04	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Бит_АдресацияУведомленийПоКомандировкам.Адресат,
	|	Бит_АдресацияУведомленийПоКомандировкам.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.Бит_АдресацияУведомленийПоКомандировкам КАК Бит_АдресацияУведомленийПоКомандировкам
	|ГДЕ
	|	Бит_АдресацияУведомленийПоКомандировкам.ЭтапМаршрута = &ЭтапМаршрута
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователь УБЫВ";
	
	Запрос.УстановитьПараметр("ЭтапМаршрута", ТочкаЭтапа);
	
	Результат = Запрос.Выполнить();
	Выборка = результат.Выбрать();
	Если Выборка.Следующий() тогда
		Возврат Выборка.Адресат;
	КонецЕсли;
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
	//+++ Oleg SmartT. 2021-05-04	
КонецФункции

// Функция возвращает совокупность данных о физических лицах в виде таблицы
// значений. В совокупность данных входит ФИО, должность в заданной 
// организации, паспортные данные и др.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой
//                 определяется должность и подразделение работника(ов)
//  ФизЛицо      - СправочникСсылка.ФизическиеЛица или Массив - физическое лицо
//                 или список физ. лиц, по которым возвращается совокупность 
//                 данных
//  ДатаСреза    - Дата - дата, на которую считываются данные
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с совокупностью данных о физическом лице. 
//                  Колонки: возвращаемой таблицы:
//                  - Фамилия
//                  - Имя
//                  - Отчетсво
//                  - Представление (Фамилия И.О.)
//                  - Подразделение
//                  - ДокументВид
//                  - ДокументСерия
//                  - ДокументНомер
//                  - ДокументДатаВыдачи
//                  - ДокументКемВыдан
//                  - ДокументКодПодразделения
//
Функция ДанныеФизЛиц(Организация, ФизЛицо, ДатаСреза) Экспорт

	ТабРезультат = Новый ТаблицаЗначений();
	ТабРезультат.Колонки.Добавить("Фамилия");
	ТабРезультат.Колонки.Добавить("Имя");
	ТабРезультат.Колонки.Добавить("Отчество");
	ТабРезультат.Колонки.Добавить("Представление");
	ТабРезультат.Колонки.Добавить("ТабельныйНомер");
	ТабРезультат.Колонки.Добавить("Должность");
	ТабРезультат.Колонки.Добавить("ПодразделениеОрганизации");
	ТабРезультат.Колонки.Добавить("ДокументВид");
	ТабРезультат.Колонки.Добавить("ДокументСерия");
	ТабРезультат.Колонки.Добавить("ДокументНомер");
	ТабРезультат.Колонки.Добавить("ДокументДатаВыдачи");
	ТабРезультат.Колонки.Добавить("ДокументКемВыдан");
	ТабРезультат.Колонки.Добавить("НеСклонятьФамилию");
	
	
	ЗапросПоЛицам = Новый Запрос();
									
	ТекстУпорядочивания = "";
	Если ТипЗнч(ФизЛицо) = Тип("СписокЗначений") 
			Или ТипЗнч(ФизЛицо) = Тип("Массив") Тогда
		
		НомерПП = 0;
		
		Для Каждого ЭлементСписка Из ФизЛицо Цикл
			
			НомерПП = НомерПП + 1;
		
			Если НЕ ПустаяСтрока(ТекстУпорядочивания) Тогда
				ТекстУпорядочивания = ТекстУпорядочивания + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;
			
			ТекстУпорядочивания = ТекстУпорядочивания + "
			|ВЫБРАТЬ
			|	&парамФизЛицо" + Формат(НомерПП, "ЧГ=") + " КАК ФизЛицо,
			|	" + Формат(НомерПП, "ЧГ=") + " КАК НомерСтроки
			|";
			
			
			Если ТипЗнч(ФизЛицо) = Тип("СписокЗначений") Тогда
				ЗапросПоЛицам.УстановитьПараметр("парамФизЛицо" + Формат(НомерПП, "ЧГ="), ЭлементСписка.Значение);
			Иначе
				ЗапросПоЛицам.УстановитьПараметр("парамФизЛицо" + Формат(НомерПП, "ЧГ="), ЭлементСписка);
			КонецЕсли;
			
		КонецЦикла;
	
	ИначеЕсли ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
	
		ТекстУпорядочивания = "
		|ВЫБРАТЬ
		|	&ФизЛицо КАК ФизЛицо,
		|	1 КАК НомерСтроки
		|";
		
	КонецЕсли;
	
	Если ТекстУпорядочивания = "" Тогда

		ТекстУпорядочивания = "
		|ВЫБРАТЬ
		|	NULL КАК ФизЛицо,
		|	1 КАК НомерСтроки
		|";
		
	КонецЕсли;
	
	ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
	ЗапросПоЛицам.УстановитьПараметр("Организация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	ЗапросПоЛицам.УстановитьПараметр("ФизЛицо", ФизЛицо);
	ЗапросПоЛицам.УстановитьПараметр("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	ЗапросПоЛицам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НомераСтрок.ФизЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	ФИОФизЛицСрезПоследних.НеСклонятьФамилию,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Код КАК ТабельныйНомер,
	|	РаботникиОрганизацийСрезПоследних.Должность,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
	|	ВЫРАЗИТЬ(ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК СТРОКА(1000)) КАК ДокументКемВыдан
	|ИЗ
	|	(" + ТекстУпорядочивания + ") КАК НомераСтрок
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&ДатаСреза, 
	|				ФизЛицо В(&ФизЛицо)) КАК ФИОФизЛицСрезПоследних
	|		ПО НомераСтрок.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(
	|				&ДатаСреза, 
	|				ФизЛицо В(&ФизЛицо)) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&ДатаСреза, 
	|				Сотрудник.ФизЛицо В(&ФизЛицо) 
	|				И Организация = &Организация
	|				И Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство) КАК РаботникиОрганизацийСрезПоследних
	|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомераСтрок.НомерСтроки,
	|	РаботникиОрганизацийСрезПоследних.Период УБЫВ
	|";
	
	Данные = ЗапросПоЛицам.Выполнить().Выбрать();
	СоответствиеФизЛиц = Новый Соответствие;
	
	Пока Данные.Следующий() Цикл
		
		//чтобы избежать задвоения при повторных приемах работника в одну и туже организацию
		Если СоответствиеФизЛиц.Получить(Данные.ФизЛицо) = Неопределено Тогда 
			СоответствиеФизЛиц.Вставить(Данные.ФизЛицо, Истина);
			Результат = ТабРезультат.Добавить();

			Результат.Фамилия       			= Данные.Фамилия;
			Результат.Имя      					= Данные.Имя;
			Результат.Отчество      			= Данные.Отчество;
			Результат.НеСклонятьФамилию      	= Данные.НеСклонятьФамилию;
			Результат.Представление 			= ОбщегоНазначения.ПолучитьФамилиюИмяОтчество(Данные.Фамилия, Данные.Имя, Данные.Отчество);
			
			Результат.ТабельныйНомер  			= Данные.ТабельныйНомер;
			Результат.Должность      			= Данные.Должность;
			Результат.ПодразделениеОрганизации  = Данные.ПодразделениеОрганизации;
			
			Результат.ДокументВид        		= Данные.ДокументВид;
			Результат.ДокументСерия      		= Данные.ДокументСерия;
			Результат.ДокументНомер      		= Данные.ДокументНомер;
			Результат.ДокументДатаВыдачи 		= Данные.ДокументДатаВыдачи;
			Результат.ДокументКемВыдан      	= Данные.ДокументКемВыдан;
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТабРезультат;
	
КонецФункции // ДанныеФизЛиц()

// Процедура инициирует диалог выбора времени.
//
// Параметры
//  Форма - Форма, в которой производится выбор
//  ДатаВремен - дата для выбора времени
//  ТекЭлемент - элемент формы
//  ПолныйГод - булево, показывать год 4-мя цифрами или 2-мя
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ВыбратьВремяДня(Форма, ДатаВремен, ТекЭлемент, Пользователь, ПоГрафику = Истина, ПолныйГод = Истина) Экспорт

	ДлинаЧаса = 3600;
	
	Если ПоГрафику Тогда
		СтруктураРабочегоВремени = ОпределитьНачалоИОкончаниеРабочегоДняПользователя(Пользователь, ДатаВремен);
		
		НачалоРабочегоДняКонстанта    = СтруктураРабочегоВремени.ДатаНачала;
		ОкончаниеРабочегоДняКонстанта = СтруктураРабочегоВремени.ДатаОкончания;
	Иначе
		НачалоРабочегоДняКонстанта      = '00010101000000';
		ОкончаниеРабочегоДняКонстанта   = '00010101235959';
	КонецЕсли;
		
	СписокВремен = Новый СписокЗначений;
	НачалоРабочегоДня = НачалоЧаса(НачалоДня(ДатаВремен) + Час(НачалоРабочегоДняКонстанта) * ДлинаЧаса + Минута(НачалоРабочегоДняКонстанта)*60);
	ОкончаниеРабочегоДня = КонецЧаса(НачалоДня(ДатаВремен) + Час(ОкончаниеРабочегоДняКонстанта) * ДлинаЧаса + Минута(ОкончаниеРабочегоДняКонстанта)*60) - ДлинаЧаса;

	а = 0;
	ВремяСписка = НачалоРабочегоДня; 
	Пока НачалоЧаса(ВремяСписка) <= НачалоЧаса(ОкончаниеРабочегоДня) Цикл
		ВремяСписка = НачалоРабочегоДня + а * ДлинаЧаса / 2; // по полчаса
		СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гг" + ?(ПолныйГод,"гг","") + " ЧЧ:мм'"));
		а = а + 1;
	КонецЦикла; 

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(ДатаВремен);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = Форма.ВыбратьИзСписка(СписокВремен, ТекЭлемент);
	Иначе
		ВыбранноеВремя = Форма.ВыбратьИзСписка(СписокВремен, ТекЭлемент, НачальноеЗначение);
	КонецЕсли; 

	Если ВыбранноеВремя <> Неопределено Тогда
		ДатаВремен = ВыбранноеВремя.Значение;
	КонецЕсли; 
	
КонецПроцедуры // ВыбратьВремя()

// Функция определяет начало и окончание рабочего дня пользователя, по его графику работы
//
// Параметры
//  Пользователь - СправочникСсылка.Пользователи, пользователь по которому определяются
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ОпределитьНачалоИОкончаниеРабочегоДняПользователя(Пользователь, РабочаяДата) Экспорт

	ДатаНачала      = '00010101000000';
	ДатаОкончания   = '00010101235959';
	НайденныйГрафик = Неопределено;
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
	
		Если НЕ Пользователь.ФизЛицо.Пустая() Тогда
		
			НайденныйГрафик = РегистрыСведений.Работники.ПолучитьПоследнее(РабочаяДата, Новый Структура("ФизЛицо", Пользователь.ФизЛицо)).ГрафикРаботы;
			
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(НайденныйГрафик) Тогда
		
			НайденныйГрафик = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь, "ГрафикРаботы");
		
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ТипЗнч(НайденныйГрафик) = Тип("СправочникСсылка.ГрафикиРаботы") И ЗначениеЗаполнено(НайденныйГрафик) Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ГрафикРаботы", НайденныйГрафик);
		Запрос.УстановитьПараметр("Дата", НачалоДня(РабочаяДата));
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МИНИМУМ(ВремяРаботы.ВремяНачала) КАК ВремяНачала,
			|	МАКСИМУМ(ВремяРаботы.ВремяОкончания) КАК ВремяОкончания
			|ИЗ
			|	(ВЫБРАТЬ
			|		ГрафикиРаботыПериодыСмены.ВремяНачала КАК ВремяНачала,
			|		ГрафикиРаботыПериодыСмены.ВремяОкончания КАК ВремяОкончания
			|	ИЗ
			|		Справочник.ГрафикиРаботы.ПериодыСмены КАК ГрафикиРаботыПериодыСмены
			|	ГДЕ
			|		ГрафикиРаботыПериодыСмены.Ссылка = &ГрафикРаботы
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		СменыПериодыСмены.ВремяНачала,
			|		СменыПериодыСмены.ВремяОкончания
			|	ИЗ
			|		Справочник.ГрафикиРаботы.Смены КАК ГрафикиРаботыСмены
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Смены.ПериодыСмены КАК СменыПериодыСмены
			|			ПО ГрафикиРаботыСмены.Смена = СменыПериодыСмены.Ссылка
			|	ГДЕ
			|		ГрафикиРаботыСмены.Ссылка = &ГрафикРаботы) КАК ВремяРаботы";
		
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДатаНачала = Выборка.ВремяНачала;
			Если ЗначениеЗаполнено(Выборка.ВремяОкончания) Тогда
				ДатаОкончания = Выборка.ВремяОкончания;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	СтруктураВозврата = Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания);
	
	Возврат СтруктураВозврата;
	
КонецФункции // ОпределитьНачалоИОкончаниеРабочегоДняПользователя()

#Если Клиент Тогда

// Процедура ищет единственное физлицо среди работников предприятия или организаций по
//  началу его наименования
//
// Параметры
//  Режим 		- строка - определяет, среди кандидатов, работников предприятия или организаций производится поиск
//  Текст 		- строка - начало ФИО
//  Организация - СправочникСсылка.Организации - организация, 
//					среди работников которой производится поиск, необязательна,
//					если не указана - поиск ведется по всем организациям
//
// Возвращаемое значение
//  строка - наименование найденного кандидата, работника (предприятия или организаций), если он единственный
//
Функция ПодобратьФИОРаботникаКандидата(Режим, Знач Текст, Организация = "", ВозвращатьФизлицо = Ложь, ТолькоАктуальные = Истина,СтруктурноеПодразделение = Неопределено) Экспорт
	
	ТекстАвтоПодбора = "";
	Запрос = Новый Запрос;
	
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = Текст+"%";
	
	Запрос.УстановитьПараметр("Текст", Текст);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Если Режим = "Работники" Тогда
		
		Запрос.УстановитьПараметр("ДатаАктуальности", ОбщегоНазначения.ПолучитьРабочуюДату());
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ТекстУсловияНаАктуальность = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальность = " И СотрудникиОрганизаций.Актуальность";
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Работники.ФизЛицо,
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.ВидДоговора,
		|	ВЫБОР
		|		КОГДА СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоТрудовойДоговор
		|ПОМЕСТИТЬ ВТ_ФизическиеЛица
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|		Работники.ФизЛицо КАК ФизЛицо
		|	ИЗ
		|		РегистрСведений.Работники КАК Работники
		|	ГДЕ
		|		Работники.ФизЛицо.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~"") КАК Работники
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО Работники.ФизЛицо = СотрудникиОрганизаций.Физлицо
		|ГДЕ
		|	СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|	И СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)" + ТекстУсловияНаАктуальность +"
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЭтоТрудовойДоговор";
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РаботникиОсновноеМесто.Сотрудник,
		|	РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
		|	ВЫБОР
		|		КОГДА РаботникиОсновноеМесто.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоОсновноеМестоРаботы
		|ПОМЕСТИТЬ ВТ_Сотрудники_ТрудовойДоговор
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&ДатаАктуальности,
		|			Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ ВТ_ФизическиеЛица ГДЕ ЭтоТрудовойДоговор)) КАК РаботникиОсновноеМесто
		|ГДЕ
		|	РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЭтоОсновноеМестоРаботы,
		|	Физлицо";
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	СписокСотрудников.Сотрудник.Наименование КАК Наименование,
		|	СписокСотрудников.Физлицо.Наименование КАК ФизлицоНаименование
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
		|		РаботникиОсновноеМесто.Физлицо КАК Физлицо,
		|		1 КАК Приоритет
		|	ИЗ
		|		ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиОсновноеМесто
		|	
		|	ГДЕ
		|		РаботникиОсновноеМесто.ЭтоОсновноеМестоРаботы
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиОсновноеМесто.Физлицо
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		МАКСИМУМ(РаботникиСовместительство.Сотрудник),
		|		РаботникиСовместительство.Физлицо,
		|		2
		|	ИЗ
		|		ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиСовместительство
		|			
		|	ГДЕ
		|		НЕ РаботникиСовместительство.ЭтоОсновноеМестоРаботы
		|		
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиСовместительство.Физлицо
		|		
		|	ОБЪЕДИНИТЬ
		|		
		|	ВЫБРАТЬ
		|		МАКСИМУМ(СотрудникиДУ.Сотрудник),
		|		СотрудникиДУ.Физлицо,
		|		ВЫБОР
		|			КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|				ТОГДА 3
		|			КОГДА СотрудникиДУ.ЭтоТрудовойДоговор
		|				ТОГДА 4
		|			ИНАЧЕ 5
		|		КОНЕЦ
		|	ИЗ
		|		ВТ_ФизическиеЛица КАК СотрудникиДУ
		|			
		|	СГРУППИРОВАТЬ ПО
		|		СотрудникиДУ.Физлицо,
		|		ВЫБОР
		|			КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|				ТОГДА 3
		|			КОГДА СотрудникиДУ.ЭтоТрудовойДоговор
		|				ТОГДА 4
		|			ИНАЧЕ 5
		|		КОНЕЦ) КАК СписокСотрудников
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					СписокФизическихЛиц.Физлицо КАК Физлицо,
		|					МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
		|				ИЗ
		|					(ВЫБРАТЬ
		|						РаботникиОсновноеМесто.Физлицо КАК Физлицо,
		|						1 КАК Приоритет
		|					ИЗ
		|						ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиОсновноеМесто
		|			
		|					ГДЕ
		|			  			РаботникиОсновноеМесто.ЭтоОсновноеМестоРаботы
		|					
		|					ОБЪЕДИНИТЬ
		|					
		|					ВЫБРАТЬ
		|						РаботникиСовместительство.Физлицо,
		|						2
		|					ИЗ
		|						ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиСовместительство
		|			
		|					ГДЕ
		|						НЕ РаботникиСовместительство.ЭтоОсновноеМестоРаботы
		|					
		|					ОБЪЕДИНИТЬ
		|					
		|					ВЫБРАТЬ
		|						СотрудникиДУ.Физлицо,
		|						ВЫБОР
		|							КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|								ТОГДА 3
		|							КОГДА СотрудникиДУ.ЭтоТрудовойДоговор
		|								ТОГДА 4
		|							ИНАЧЕ 5
		|						КОНЕЦ
		|					ИЗ
		|						ВТ_ФизическиеЛица КАК СотрудникиДУ) КАК СписокФизическихЛиц
		|				
		|				СГРУППИРОВАТЬ ПО
		|					СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
		|	ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
		|		И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет";

		
	ИначеЕсли Режим = "Кандидаты" Тогда
				
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2 РАЗРЕШЕННЫЕ
			   |	Кандидаты.ФизЛицо.Наименование КАК ФизЛицоНаименование
			   |ИЗ
			   |	РегистрСведений.КандидатыНаРаботу.СрезПоследних(, Физлицо.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~"") КАК Кандидаты";

		
	ИначеЕсли Режим = "РаботникиИДоговорники" Тогда
		
		ДоговорыГПХ = Новый Массив;
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		Запрос.УстановитьПараметр("ДоговорыГПХ", ДоговорыГПХ);

		ТекстУсловияОрганизации = "";
		Если ЗначениеЗаполнено(Организация) Тогда
			ТекстУсловияОрганизации = " И Организация = &парамГоловнаяОрганизация";
			Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			Запрос.УстановитьПараметр("парамОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		КонецЕсли;
		
		ТекстУсловияНаАктуальность = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальностьРаботники = " И РаботникиОрганизации.Сотрудник.Актуальность";
			ТекстУсловияНаАктуальностьДоговорники = " И ДоговорникиОрганизаций.Актуальность";
		КонецЕсли;
		
		// - КУФИБ - начало
		ТекстВТСтруктурные = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		                     |	УчетВзаиморасчетов.Сотрудник,
		                     |	УчетВзаиморасчетов.СтруктурноеПодразделение
		                     |ПОМЕСТИТЬ ВТ_ФизЛицаВыбранногоСтруктурногоПодразделения
		                     |ИЗ
		                     |	РегистрСведений.общ_РеглУчетВзаиморасчетовССотрудникамиОрганизаций КАК УчетВзаиморасчетов
		                     |ГДЕ
		                     |	УчетВзаиморасчетов.Организация = &парамГоловнаяОрганизация
		                     |	И УчетВзаиморасчетов.ОбособленноеПодразделение = &парамОрганизация
		                     |	И УчетВзаиморасчетов.СтруктурноеПодразделение = &СтруктурноеПодразделение
		                     |;
		                     |
		                     |////////////////////////////////////////////////////////////////////////////////
		                     |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                     |	РеглУчетВзаиморасчетовССотрудникамиОрганизаций.Сотрудник,
		                     |	МАКСИМУМ(РеглУчетВзаиморасчетовССотрудникамиОрганизаций.СтруктурноеПодразделение) КАК СтруктурноеПодразделение
		                     |ПОМЕСТИТЬ ВТ_ФильтрПоСП
		                     |ИЗ
		                     |	РегистрСведений.общ_РеглУчетВзаиморасчетовССотрудникамиОрганизаций КАК РеглУчетВзаиморасчетовССотрудникамиОрганизаций
		                     |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФизЛицаВыбранногоСтруктурногоПодразделения КАК ВТ_ФизЛицаВыбранногоСтруктурногоПодразделения
		                     |		ПО РеглУчетВзаиморасчетовССотрудникамиОрганизаций.Сотрудник = ВТ_ФизЛицаВыбранногоСтруктурногоПодразделения.Сотрудник
		                     |ГДЕ
		                     |	РеглУчетВзаиморасчетовССотрудникамиОрганизаций.Организация = &парамГоловнаяОрганизация
		                     |	И РеглУчетВзаиморасчетовССотрудникамиОрганизаций.ОбособленноеПодразделение = &парамОрганизация
		                     |	И ВТ_ФизЛицаВыбранногоСтруктурногоПодразделения.Сотрудник ЕСТЬ NULL 
		                     |
		                     |СГРУППИРОВАТЬ ПО
		                     |	РеглУчетВзаиморасчетовССотрудникамиОрганизаций.Сотрудник
		                     |
		                     |ОБЪЕДИНИТЬ ВСЕ
		                     |
		                     |ВЫБРАТЬ
		                     |	ВТ_ФизЛицаВыбранногоСтруктурногоПодразделения.Сотрудник,
		                     |	ВТ_ФизЛицаВыбранногоСтруктурногоПодразделения.СтруктурноеПодразделение
		                     |ИЗ
		                     |	ВТ_ФизЛицаВыбранногоСтруктурногоПодразделения КАК ВТ_ФизЛицаВыбранногоСтруктурногоПодразделения
							 |;
							 |";
		ТекстСоединения1 = "";
		ТекстСоединения2 = "";
		Если СтруктурноеПодразделение <>Неопределено Тогда
			Запрос.УстановитьПараметр("СтруктурноеПодразделение",СтруктурноеПодразделение);
            ТекстУсловияОрганизации = ТекстУсловияОрганизации + " И ЕСТЬNULL(ФильтрСтруктурные.СтруктурноеПодразделение,ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))=&СтруктурноеПодразделение ";
			ТекстСоединения1 = "
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФильтрПоСП КАК ФильтрСтруктурные
			|		ПО РаботникиОрганизации.Сотрудник = ФильтрСтруктурные.Сотрудник";
			ТекстСоединения2 = "
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФильтрПоСП КАК ФильтрСтруктурные
			|		ПО ДоговорникиОрганизаций.Ссылка = ФильтрСтруктурные.Сотрудник";
		КонецЕсли;
		// - КУФИБ - конец
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2 РАЗРЕШЕННЫЕ
		               |	РаботникиИДоговорники.Наименование КАК Наименование,
					   |	РаботникиИДоговорники.ФизЛицоНаименование КАК ФизЛицоНаименование
		               |ИЗ
		               |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
					   |		РаботникиОрганизации.Сотрудник.Наименование КАК Наименование,
		               |		РаботникиОрганизации.Сотрудник.Физлицо.Наименование КАК ФизЛицоНаименование
		               |	ИЗ
		               |		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации "+ТекстСоединения1+"
		               |	
		               |	ГДЕ
		               |		РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальностьРаботники + "
		               |	
		               |	ОБЪЕДИНИТЬ
		               |	
		               |	ВЫБРАТЬ РАЗЛИЧНЫЕ
					   |		ДоговорникиОрганизаций.Наименование КАК Наименование,
		               |		ДоговорникиОрганизаций.Физлицо.Наименование КАК ФизЛицоНаименование
		               |	ИЗ
		               |		Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций "+ТекстСоединения2+"
		               |	
		               |	ГДЕ
		               |		ДоговорникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~"" 
					   |		И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ) " + ТекстУсловияОрганизации + ТекстУсловияНаАктуальностьДоговорники + ") КАК РаботникиИДоговорники";
					   
		// - КУФИБ - начало
		Если СтруктурноеПодразделение <>Неопределено И общ_ЗащитаКлиентСервер.ПроверитьЛицензию() Тогда
			Запрос.Текст = ТекстВТСтруктурные + Запрос.Текст;
		КонецЕсли;
		// - КУФИБ - конец
					   
	ИначеЕсли Режим = "РаботникиОрганизации" Тогда
		
		ТекстУсловияОрганизации = "";
		Если ЗначениеЗаполнено(Организация) Тогда
			ТекстУсловияОрганизации = " И Организация = &парамГоловнаяОрганизация";
			Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		КонецЕсли;
		
		ТекстУсловияНаАктуальность = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальность = " И РаботникиОрганизации.Сотрудник.Актуальность";
		КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2 РАЗРЕШЕННЫЕ
				|	РаботникиОрганизации.Сотрудник.Наименование КАК Наименование,
				|	РаботникиОрганизации.Сотрудник.ФизЛицо.Наименование КАК ФизЛицоНаименование
				|ИЗ
				|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
				|
				|ГДЕ РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальность;
				
	ИначеЕсли Режим = "Договорники" Тогда		
				
		СписокДоговоров = Новый Массив;
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Лицензионный);
		Запрос.УстановитьПараметр("СписокДоговоров", СписокДоговоров);
		Запрос.УстановитьПараметр("НеУчитыватьАктуальность", Истина);
		Запрос.УстановитьПараметр("НеОтбиратьПоОрганизации", ?(Организация = "", Ложь, Истина));
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	Договорники.Код КАК Код,
		|	Договорники.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Договорники.Актуальность
		|			ТОГДА Договорники.Наименование
		|		ИНАЧЕ ""(не актуален) "" + Договорники.Наименование
		|	КОНЕЦ КАК Наименование,
		|	ИСТИНА КАК НайденоПоНаименованию
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК Договорники
		|ГДЕ
		|	Договорники.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|	И (&НеОтбиратьПоОрганизации
		|			ИЛИ Договорники.Организация = &ГоловнаяОрганизация)
		|	И (&НеУчитыватьАктуальность
		|			ИЛИ Договорники.Актуальность)
		|	И Договорники.ВидДоговора В(&СписокДоговоров)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|	Договорники.Код КАК Код,
		|	Договорники.Ссылка,
		|	ВЫБОР
		|		КОГДА Договорники.Актуальность
		|			ТОГДА Договорники.Наименование
		|		ИНАЧЕ ""(не актуален) "" + Договорники.Наименование
		|	КОНЕЦ,
		|	ЛОЖЬ
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК Договорники
		|ГДЕ
		|	Договорники.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|	И (&НеОтбиратьПоОрганизации
		|			ИЛИ Договорники.Организация = &ГоловнаяОрганизация)
		|	И (&НеУчитыватьАктуальность
		|			ИЛИ Договорники.Актуальность)
		|	И Договорники.ВидДоговора В(&СписокДоговоров)";
		
		
	ИначеЕсли Режим = "СотрудникиСправочник" Тогда
		
		Если ВозвращатьФизлицо Тогда
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
			|	СотрудникиОрганизаций.Физлицо.Наименование КАК ФизлицоНаименование
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|	И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
			|	И СотрудникиОрганизаций.Актуальность";
			
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
			|	СотрудникиОрганизаций.Наименование КАК Наименование
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|	И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
			|	И СотрудникиОрганизаций.Актуальность";
			
		КонецЕсли;
		
	ИначеЕсли Режим = "СотрудникиДоговорникиСправочник" Тогда
		
		СписокДоговоров = Новый Массив;
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Лицензионный);

		Запрос.УстановитьПараметр("СписокДоговоров", СписокДоговоров);
		Запрос.УстановитьПараметр("НеУчитыватьАктуальность", Истина);
		Запрос.УстановитьПараметр("НеОтбиратьПоОрганизации", ?(Организация = "", Ложь, Истина));
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	        |   Сотрудники.Наименование КАК Наименование
	        |ИЗ
	        |   Справочник.СотрудникиОрганизаций КАК Сотрудники
	        |ГДЕ
	        |   Сотрудники.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
	        |   И (&НеОтбиратьПоОрганизации
	        |           ИЛИ Сотрудники.Организация = &ГоловнаяОрганизация)
	        |   И (&НеУчитыватьАктуальность
	        |           ИЛИ Сотрудники.Актуальность)
	        |   И Сотрудники.ВидДоговора В(&СписокДоговоров)";
		
	ИначеЕсли Режим = "СотрудникиОрганизацииСправочник" Тогда
		
		Запрос.УстановитьПараметр("НеУчитыватьАктуальность", Истина);
		Запрос.УстановитьПараметр("НеОтбиратьПоОрганизации", ?(Организация = "", Ложь, Истина));
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		Запрос.УстановитьПараметр("СписокДоговоров", Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	        |   Сотрудники.Наименование КАК Наименование
	        |ИЗ
	        |   Справочник.СотрудникиОрганизаций КАК Сотрудники
	        |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	        |       ПО Сотрудники.Ссылка = Работники.Сотрудник
	        |ГДЕ
	        |   Сотрудники.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
	        |   И (&НеОтбиратьПоОрганизации
	        |           ИЛИ Сотрудники.Организация = &ГоловнаяОрганизация)
	        |   И (&НеУчитыватьАктуальность
	        |           ИЛИ Сотрудники.Актуальность)
	        |   И Работники.Сотрудник ЕСТЬ NULL 
	        |   И Сотрудники.ВидДоговора В(&СписокДоговоров)";

	Иначе
		Возврат ТекстАвтоПодбора;			
	КонецЕсли;
	            
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Если ВозвращатьФизлицо ИЛИ Режим = "Кандидаты" Тогда
			ТекстАвтоПодбора = Выборка.ФизЛицоНаименование;
		Иначе 
			ТекстАвтоПодбора = Выборка.Наименование;
		КонецЕсли;
	КонецЕсли;

	Возврат ТекстАвтоПодбора
	
КонецФункции // ПодобратьФИОРаботникаКандидата()

// Процедура ищет физлиц среди работников предприятия или организаций по
//  началу его наименования или табельному номеру
//
// Параметры
//  Режим 		- строка - определяет, среди кандидатов, работников предприятия или организаций производится поиск
//  Текст 		- строка - начало ФИО или табельный номер
//  НачальноеЗначение	- СправочникСсылка.ФизическиеЛица - значение по умолчанию
//  Организация - СправочникСсылка.Организации - организация, 
//					среди работников которой производится поиск, необязательна,
//					если не указана - поиск ведется по всем организациям
//
// Возвращаемое значение
//  СправочникСсылка.ФизическиеЛица - возвращается значение по умолчанию, если 
//									не найдено ни одного подходящего кандидата, работника (предприятия или организаций)
//  СписокЗначений - список подходящих физлиц, если их найдено не более 50
//  Неопределено - если найдено более 50 подходящих физлиц
//
Функция ПодобратьСписокРаботниковКандидатов(Режим, Знач Текст, НачальноеЗначение, Организация = "", ВозвращатьФизлицо = Ложь, ТолькоАктуальные = Истина,СтруктурноеПодразделение = Неопределено) Экспорт
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = Текст + "%";
	
	Запрос.УстановитьПараметр("Текст", Текст);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	Если Режим = "Работники" Тогда
		
		Запрос.УстановитьПараметр("ДатаАктуальности", ОбщегоНазначения.ПолучитьРабочуюДату());
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ТекстУсловияНаАктуальность = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальность = " И СотрудникиОрганизаций.Актуальность";
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|	ФизическиеЛица.ФизЛицо,
		|	ФизическиеЛица.Сотрудник,
		|	ФизическиеЛица.ВидДоговора,
		|	ФизическиеЛица.ЭтоТрудовойДоговор КАК ЭтоТрудовойДоговор,
		|	ФизическиеЛица.НайденоПоНаименованию
		|ПОМЕСТИТЬ ВТ_ФизическиеЛица
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Работники.ФизЛицо КАК ФизЛицо,
		|		СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|		СотрудникиОрганизаций.ВидДоговора КАК ВидДоговора,
		|		ВЫБОР
		|			КОГДА СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ЭтоТрудовойДоговор,
		|		ИСТИНА КАК НайденоПоНаименованию
		|	ИЗ
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|			Работники.ФизЛицо КАК ФизЛицо
		|		ИЗ РегистрСведений.Работники КАК Работники
		|		ГДЕ
		|			Работники.ФизЛицо.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~"") КАК Работники
		|
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|			ПО Работники.ФизЛицо = СотрудникиОрганизаций.Физлицо
		|	ГДЕ
		|		СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)" + ТекстУсловияНаАктуальность + "
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Работники.ФизЛицо,
		|		СотрудникиОрганизаций.Ссылка,
		|		СотрудникиОрганизаций.ВидДоговора,
		|		ВЫБОР
		|			КОГДА СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ЛОЖЬ
		|	ИЗ
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|			СотрудникиОрганизаций.Ссылка КАК Ссылка,
		|			СотрудникиОрганизаций.ВидДоговора КАК ВидДоговора,
		|			СотрудникиОрганизаций.Физлицо КАК Физлицо
		|		ИЗ
		|			Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ГДЕ
		|			СотрудникиОрганизаций.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияНаАктуальность + "
		|			И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК СотрудникиОрганизаций
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
		|		ПО (Работники.ФизЛицо = СотрудникиОрганизаций.Физлицо)) КАК ФизическиеЛица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЭтоТрудовойДоговор";
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РаботникиОсновноеМесто.Сотрудник,
		|	РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
		|	ВЫБОР
		|		КОГДА РаботникиОсновноеМесто.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоОсновноеМестоРаботы,
		|	ВТ_ФизическиеЛица.НайденоПоНаименованию
		|ПОМЕСТИТЬ ВТ_Сотрудники_ТрудовойДоговор
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&ДатаАктуальности,
		|			Сотрудник В
		|				(ВЫБРАТЬ
		|					ВТ_ФизическиеЛица.Сотрудник
		|				ИЗ
		|					ВТ_ФизическиеЛица
		|				ГДЕ
		|					ВТ_ФизическиеЛица.ЭтоТрудовойДоговор)) КАК РаботникиОсновноеМесто
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФизическиеЛица КАК ВТ_ФизическиеЛица
		|		ПО РаботникиОсновноеМесто.Сотрудник = ВТ_ФизическиеЛица.Сотрудник
		|ГДЕ
		|	РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЭтоОсновноеМестоРаботы,
		|	Физлицо";
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|	СписокСотрудников.Сотрудник КАК Ссылка,
		|	СписокСотрудников.Сотрудник.Наименование КАК Наименование,
		|	СписокСотрудников.Сотрудник.Код КАК Код,
		|	СписокСотрудников.Физлицо КАК Физлицо,
		|	СписокСотрудников.Физлицо.Наименование КАК ФизлицоНаименование,
		|	СписокСотрудников.НайденоПоНаименованию КАК НайденоПоНаименованию
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
		|		РаботникиОсновноеМесто.Физлицо КАК Физлицо,
		|		1 КАК Приоритет,
		|		МАКСИМУМ(РаботникиОсновноеМесто.НайденоПоНаименованию) КАК НайденоПоНаименованию
		|	ИЗ
		|		ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиОсновноеМесто
		|	ГДЕ
		|		РаботникиОсновноеМесто.ЭтоОсновноеМестоРаботы
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиОсновноеМесто.Физлицо
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		МАКСИМУМ(РаботникиСовместительство.Сотрудник),
		|		РаботникиСовместительство.Физлицо,
		|		2,
		|		МАКСИМУМ(РаботникиСовместительство.НайденоПоНаименованию)
		|	ИЗ
		|		ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиСовместительство
		|	ГДЕ
		|		(НЕ РаботникиСовместительство.ЭтоОсновноеМестоРаботы)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиСовместительство.Физлицо
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		МАКСИМУМ(СотрудникиДУ.Сотрудник),
		|		СотрудникиДУ.ФизЛицо,
		|		ВЫБОР
		|			КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|				ТОГДА 3
		|			КОГДА СотрудникиДУ.ЭтоТрудовойДоговор
		|				ТОГДА 4
		|		КОНЕЦ,
		|		МАКСИМУМ(СотрудникиДУ.НайденоПоНаименованию)
		|	ИЗ
		|		ВТ_ФизическиеЛица КАК СотрудникиДУ
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СотрудникиДУ.ФизЛицо,
		|		ВЫБОР
		|			КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|				ТОГДА 3
		|			КОГДА СотрудникиДУ.ЭтоТрудовойДоговор
		|				ТОГДА 4
		|		КОНЕЦ) КАК СписокСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СписокФизическихЛиц.Сотрудник КАК Сотрудник,
		|			СписокФизическихЛиц.Физлицо КАК Физлицо,
		|			МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет,
		|			СписокФизическихЛиц.НайденоПоНаименованию КАК НайденоПоНаименованию
		|		ИЗ
		|			(ВЫБРАТЬ
		|				РаботникиОсновноеМесто.Сотрудник КАК Сотрудник,
		|				РаботникиОсновноеМесто.Физлицо КАК Физлицо,
		|				1 КАК Приоритет,
		|				РаботникиОсновноеМесто.НайденоПоНаименованию КАК НайденоПоНаименованию
		|			ИЗ
		|				ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиОсновноеМесто
		|			ГДЕ
		|				РаботникиОсновноеМесто.ЭтоОсновноеМестоРаботы
		|			
		|			ОБЪЕДИНИТЬ
		|			
		|			ВЫБРАТЬ
		|				РаботникиСовместительство.Сотрудник,
		|				РаботникиСовместительство.Физлицо,
		|				2,
		|				РаботникиСовместительство.НайденоПоНаименованию
		|			ИЗ
		|				ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиСовместительство
		|			ГДЕ
		|				(НЕ РаботникиСовместительство.ЭтоОсновноеМестоРаботы)
		|			
		|			ОБЪЕДИНИТЬ
		|			
		|			ВЫБРАТЬ
		|				СотрудникиДУ.Сотрудник,
		|				СотрудникиДУ.ФизЛицо,
		|				ВЫБОР
		|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|						ТОГДА 3
		|					КОГДА СотрудникиДУ.ЭтоТрудовойДоговор
		|						ТОГДА 4
		|				КОНЕЦ,
		|				СотрудникиДУ.НайденоПоНаименованию
		|			ИЗ
		|				ВТ_ФизическиеЛица КАК СотрудникиДУ) КАК СписокФизическихЛиц
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СписокФизическихЛиц.Физлицо,
		|			СписокФизическихЛиц.НайденоПоНаименованию,
		|			СписокФизическихЛиц.Сотрудник) КАК СписокФизическихЛиц
		|		ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
		|			И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет";

	ИначеЕсли Режим = "Кандидаты" Тогда
				
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ ПЕРВЫЕ 51
		   |	Кандидаты.ФизЛицо КАК ФизЛицо,
		   |	Кандидаты.ФизЛицо.Наименование КАК ФизЛицоНаименование,
		   |	NULL КАК Код,
		   |	ИСТИНА КАК НайденоПоНаименованию
		   |ИЗ
		   |	РегистрСведений.КандидатыНаРаботу.СрезПоследних(, Физлицо.Наименование ПОДОБНО &Текст + ""%"" СПЕЦСИМВОЛ ""~"") КАК Кандидаты";

		
	ИначеЕсли Режим = "РаботникиИДоговорники" Тогда
		
		ДоговорыГПХ = Новый Массив;
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		Запрос.УстановитьПараметр("ДоговорыГПХ", ДоговорыГПХ);
		
		ТекстУсловияОрганизации = "";
		Если ЗначениеЗаполнено(Организация) и ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияОрганизации = " И Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		
		ТекстУсловияНаАктуальность = "";
		ТекстУсловияНаАктуальностьДоговорники = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальность = " И РаботникиОрганизации.Сотрудник.Актуальность";
			ТекстУсловияНаАктуальностьДоговорники = " И ДоговорникиОрганизаций.Актуальность";
		КонецЕсли;
		
		// - КУФИБ - начало
		ТекстВТСтруктурные = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		                     |	УчетВзаиморасчетов.Сотрудник,
		                     |	УчетВзаиморасчетов.СтруктурноеПодразделение
		                     |ПОМЕСТИТЬ ВТ_ФизЛицаВыбранногоСтруктурногоПодразделения
		                     |ИЗ
		                     |	РегистрСведений.общ_РеглУчетВзаиморасчетовССотрудникамиОрганизаций КАК УчетВзаиморасчетов
		                     |ГДЕ
		                     |	УчетВзаиморасчетов.Организация = &ГоловнаяОрганизация
		                     |	И УчетВзаиморасчетов.ОбособленноеПодразделение = &Организация
		                     |	И УчетВзаиморасчетов.СтруктурноеПодразделение = &СтруктурноеПодразделение
		                     |;
		                     |
		                     |////////////////////////////////////////////////////////////////////////////////
		                     |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                     |	РеглУчетВзаиморасчетовССотрудникамиОрганизаций.Сотрудник,
		                     |	МАКСИМУМ(РеглУчетВзаиморасчетовССотрудникамиОрганизаций.СтруктурноеПодразделение) КАК СтруктурноеПодразделение
		                     |ПОМЕСТИТЬ ВТ_ФильтрПоСП
		                     |ИЗ
		                     |	РегистрСведений.общ_РеглУчетВзаиморасчетовССотрудникамиОрганизаций КАК РеглУчетВзаиморасчетовССотрудникамиОрганизаций
		                     |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФизЛицаВыбранногоСтруктурногоПодразделения КАК ВТ_ФизЛицаВыбранногоСтруктурногоПодразделения
		                     |		ПО РеглУчетВзаиморасчетовССотрудникамиОрганизаций.Сотрудник = ВТ_ФизЛицаВыбранногоСтруктурногоПодразделения.Сотрудник
		                     |ГДЕ
		                     |	РеглУчетВзаиморасчетовССотрудникамиОрганизаций.Организация = &ГоловнаяОрганизация
		                     |	И РеглУчетВзаиморасчетовССотрудникамиОрганизаций.ОбособленноеПодразделение = &Организация
		                     |	И ВТ_ФизЛицаВыбранногоСтруктурногоПодразделения.Сотрудник ЕСТЬ NULL 
		                     |
		                     |СГРУППИРОВАТЬ ПО
		                     |	РеглУчетВзаиморасчетовССотрудникамиОрганизаций.Сотрудник
		                     |
		                     |ОБЪЕДИНИТЬ ВСЕ
		                     |
		                     |ВЫБРАТЬ
		                     |	ВТ_ФизЛицаВыбранногоСтруктурногоПодразделения.Сотрудник,
		                     |	ВТ_ФизЛицаВыбранногоСтруктурногоПодразделения.СтруктурноеПодразделение
		                     |ИЗ
		                     |	ВТ_ФизЛицаВыбранногоСтруктурногоПодразделения КАК ВТ_ФизЛицаВыбранногоСтруктурногоПодразделения
							 |;
							 |";
		ТекстСоединения1 = "";
		ТекстСоединения2 = "";
		Если СтруктурноеПодразделение <>Неопределено Тогда
			Запрос.УстановитьПараметр("СтруктурноеПодразделение",СтруктурноеПодразделение);
            ТекстУсловияОрганизации = ТекстУсловияОрганизации + " И ЕСТЬNULL(ФильтрСтруктурные.СтруктурноеПодразделение,ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))=&СтруктурноеПодразделение ";
			ТекстСоединения1 = "
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФильтрПоСП КАК ФильтрСтруктурные
			|		ПО РаботникиОрганизации.Сотрудник = ФильтрСтруктурные.Сотрудник";
			ТекстСоединения2 = "
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФильтрПоСП КАК ФильтрСтруктурные
			|		ПО ДоговорникиОрганизаций.Ссылка = ФильтрСтруктурные.Сотрудник";
		КонецЕсли;
		// - КУФИБ - конец
		
		Если ВозвращатьФизлицо Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	СписокСотрудников.Физлицо,
			|	СписокСотрудников.ФизлицоНаименование,
			|	ВЫБОР
			|		КОГДА СписокСотрудников.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			ТОГДА NULL
			|		ИНАЧЕ СписокСотрудников.Код
			|	КОНЕЦ КАК Код,
			|	ВЫБОР
			|		КОГДА СписокСотрудников.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НайденоПоНаименованию
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		РаботникиИДоговорники.Физлицо КАК Физлицо,
			|		РаботникиИДоговорники.ФизлицоНаименование КАК ФизлицоНаименование,
			|		РаботникиИДоговорники.Код КАК Код,
			|		РаботникиИДоговорники.Наименование КАК Наименование
			|	ИЗ
			|		(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|			РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
			|			РаботникиОрганизации.Сотрудник.Физлицо.Наименование КАК ФизлицоНаименование,
			|			РаботникиОрганизации.Сотрудник.Код КАК Код,
			|			РаботникиОрганизации.Сотрудник.Наименование КАК Наименование
			|		ИЗ
			|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации "+ТекстСоединения1+"
			|		ГДЕ
			|			РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~"""+ ТекстУсловияОрганизации + ТекстУсловияНаАктуальность +"
			|		
			|		ОБЪЕДИНИТЬ
			|		
			|		ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|			ДоговорникиОрганизаций.Физлицо,
			|			ДоговорникиОрганизаций.Физлицо.Наименование,
			|			ДоговорникиОрганизаций.Код,
			|			ДоговорникиОрганизаций.Наименование
			|		ИЗ
			|			Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций "+ТекстСоединения2+"
			|		ГДЕ
			|			ДоговорникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)"+ ТекстУсловияОрганизации + ТекстУсловияНаАктуальностьДоговорники +"
			|		
			|		ОБЪЕДИНИТЬ
			|		
			|		ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|			РаботникиОрганизации.Сотрудник.Физлицо,
			|			РаботникиОрганизации.Сотрудник.Физлицо.Наименование,
			|			РаботникиОрганизации.Сотрудник.Код,
			|			РаботникиОрганизации.Сотрудник.Наименование
			|		ИЗ
			|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации "+ТекстСоединения1+"
			|		ГДЕ
			|			РаботникиОрганизации.Сотрудник.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~"""+ ТекстУсловияОрганизации + ТекстУсловияНаАктуальность +"
			|		
			|		ОБЪЕДИНИТЬ
			|		
			|		ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|			ДоговорникиОрганизаций.Физлицо,
			|			ДоговорникиОрганизаций.Физлицо.Наименование,
			|			ДоговорникиОрганизаций.Код,
			|			ДоговорникиОрганизаций.Наименование
			|		ИЗ
			|			Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций "+ТекстСоединения2+"
			|		ГДЕ
			|			ДоговорникиОрганизаций.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)"+ ТекстУсловияОрганизации + ТекстУсловияНаАктуальностьДоговорники +") КАК РаботникиИДоговорники) КАК СписокСотрудников";
			
			// - КУФИБ - начало
			Если СтруктурноеПодразделение <>Неопределено И общ_ЗащитаКлиентСервер.ПроверитьЛицензию() Тогда
				Запрос.Текст = ТекстВТСтруктурные + Запрос.Текст;
			КонецЕсли;
			// - КУФИБ - конец
		Иначе
			
			Запрос.УстановитьПараметр("ДатаАктуальности", ОбщегоНазначения.ПолучитьРабочуюДату());
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	СписокСотрудников.Сотрудник,
			|	ВЫБОР
			|		КОГДА СписокСотрудников.СотрудникНаименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НайденоПоНаименованию
			|ПОМЕСТИТЬ ВТ_СписокРаботников
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		РаботникиОрганизации.Сотрудник КАК Сотрудник,
			|		РаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации "+ТекстСоединения1+"
			|	ГДЕ
			|		РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальность + "
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		РаботникиОрганизации.Сотрудник,
			|		РаботникиОрганизации.Сотрудник.Наименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации  "+ТекстСоединения1+"
			|	ГДЕ
			|		РаботникиОрганизации.Сотрудник.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальность + ") КАК СписокСотрудников";
			// - КУФИБ - начало
			Если СтруктурноеПодразделение <>Неопределено И общ_ЗащитаКлиентСервер.ПроверитьЛицензию() Тогда
				Запрос.Текст = ТекстВТСтруктурные + Запрос.Текст;
			КонецЕсли;
			// - КУФИБ - конец
			Запрос.Выполнить();
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	СписокРаботников.Ссылка,
			|	СписокРаботников.Наименование КАК Наименование,
			|	СписокРаботников.Код КАК Код,
			|	СписокРаботников.НайденоПоНаименованию
			|ИЗ
			|	(ВЫБРАТЬ
			|		РаботникиСрезПоследних.Сотрудник КАК Ссылка,
			|		ВЫБОР
			|			КОГДА РаботникиСрезПоследних.Сотрудник.Актуальность ТОГДА
			|				ВЫБОР
			|					КОГДА РаботникиСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|						ТОГДА ""(ув.) "" + РаботникиСрезПоследних.Сотрудник.Наименование
			|					ИНАЧЕ РаботникиСрезПоследних.Сотрудник.Наименование
			|				КОНЕЦ
			|			ИНАЧЕ ""(не актуален) "" + РаботникиСрезПоследних.Сотрудник.Наименование
			|		КОНЕЦ КАК Наименование,
			|		РаботникиСрезПоследних.Сотрудник.Код КАК Код,
			|		ВТ_СписокРаботников.НайденоПоНаименованию КАК НайденоПоНаименованию
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|				&ДатаАктуальности,
			|				Сотрудник В
			|					(ВЫБРАТЬ
			|						ВТ_СписокРаботников.Сотрудник
			|					ИЗ
			|						ВТ_СписокРаботников)) КАК РаботникиСрезПоследних
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокРаботников КАК ВТ_СписокРаботников
			|			ПО РаботникиСрезПоследних.Сотрудник = ВТ_СписокРаботников.Сотрудник
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		Договорники.Ссылка,
			|		Договорники.Наименование,
			|		Договорники.Код,
			|		Договорники.НайденоПоНаименованию
			|	ИЗ
			|		(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|			ДоговорникиОрганизаций.Ссылка КАК Ссылка,
			|			ВЫБОР
			|				КОГДА ДоговорникиОрганизаций.Актуальность
			|					ТОГДА ДоговорникиОрганизаций.Наименование
			|				ИНАЧЕ ""(не актуален) "" + ДоговорникиОрганизаций.Наименование
			|			КОНЕЦ КАК Наименование,
			|			ДоговорникиОрганизаций.Код КАК Код,
			|			Истина КАК НайденоПоНаименованию
			|		ИЗ
			|			Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций  "+ТекстСоединения2+"
			|		ГДЕ
			|			ДоговорникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальностьДоговорники + "
			|		
			|		ОБЪЕДИНИТЬ
			|		
			|		ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|			ДоговорникиОрганизаций.Ссылка,
			|			ВЫБОР
			|				КОГДА ДоговорникиОрганизаций.Актуальность
			|					ТОГДА ДоговорникиОрганизаций.Наименование
			|				ИНАЧЕ ""(не актуален) "" + ДоговорникиОрганизаций.Наименование
			|			КОНЕЦ,
			|			ДоговорникиОрганизаций.Код,
			|			Ложь
			|		ИЗ
			|			Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций "+ТекстСоединения2+"
			|		ГДЕ
			|			ДоговорникиОрганизаций.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальностьДоговорники + ") КАК Договорники) КАК СписокРаботников
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование УБЫВ";

		КонецЕсли;
			   
	ИначеЕсли Режим = "РаботникиОрганизации" Тогда
		
		ТекстУсловияОрганизации = "";
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ТекстУсловияОрганизации = " И Организация = &ГоловнаяОрганизация";
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		КонецЕсли;
		
		ТекстУсловияНаАктуальность = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальность = " И РаботникиОрганизации.Сотрудник.Актуальность";
		КонецЕсли;
				
		Если ВозвращатьФизлицо Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	СписокСотрудников.Физлицо,
			|	СписокСотрудников.ФизлицоНаименование,
			|	ВЫБОР
			|		КОГДА СписокСотрудников.СотрудникНаименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			ТОГДА NULL
			|		ИНАЧЕ СписокСотрудников.СотрудникКод
			|	КОНЕЦ КАК Код,
			|	ВЫБОР
			|		КОГДА СписокСотрудников.СотрудникНаименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НайденоПоНаименованию
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
			|		РаботникиОрганизации.Сотрудник.Физлицо.Наименование КАК ФизлицоНаименование,
			|		РаботникиОрганизации.Сотрудник.Код КАК СотрудникКод,
			|		РаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|	ГДЕ
			|		РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальность + "
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		РаботникиОрганизации.Сотрудник.Физлицо,
			|		РаботникиОрганизации.Сотрудник.Физлицо.Наименование,
			|		РаботникиОрганизации.Сотрудник.Код,
			|		РаботникиОрганизации.Сотрудник.Наименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|	ГДЕ
			|		РаботникиОрганизации.Сотрудник.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальность + ") КАК СписокСотрудников";
			
			
		Иначе
			
			Запрос.УстановитьПараметр("ДатаАктуальности", ОбщегоНазначения.ПолучитьРабочуюДату());
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	СписокРаботников.Сотрудник,
			|	ВЫБОР
			|		КОГДА СписокРаботников.СотрудникНаименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НайденоПоНаименованию
			|ПОМЕСТИТЬ ВТ_СписокРаботников
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		РаботникиОрганизации.Сотрудник КАК Сотрудник,
			|		РаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|	ГДЕ
			|		РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальность + "
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		РаботникиОрганизации.Сотрудник,
			|		РаботникиОрганизации.Сотрудник.Наименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|	ГДЕ
			|		РаботникиОрганизации.Сотрудник.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальность + ") КАК СписокРаботников";
			Запрос.Выполнить();
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	РаботникиСрезПоследних.Сотрудник КАК Ссылка,
			|	ВЫБОР
			|		КОГДА РаботникиСрезПоследних.Сотрудник.Актуальность
			|			ТОГДА ВЫБОР
			|				КОГДА РаботникиСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|					ТОГДА ""(ув.) "" + РаботникиСрезПоследних.Сотрудник.Наименование
			|				ИНАЧЕ РаботникиСрезПоследних.Сотрудник.Наименование
			|			КОНЕЦ
			|		ИНАЧЕ ""(не актуален) "" + РаботникиСрезПоследних.Сотрудник.Наименование
			|	КОНЕЦ КАК Наименование,
			|	РаботникиСрезПоследних.Сотрудник.Код КАК Код,
			|	ВТ_СписокРаботников.НайденоПоНаименованию
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|			&ДатаАктуальности,
			|			Сотрудник В
			|				(ВЫБРАТЬ
			|					ВТ_СписокРаботников.Сотрудник
			|				ИЗ
			|					ВТ_СписокРаботников)) КАК РаботникиСрезПоследних
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокРаботников КАК ВТ_СписокРаботников
			|		ПО РаботникиСрезПоследних.Сотрудник = ВТ_СписокРаботников.Сотрудник
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование УБЫВ";
			
		КонецЕсли;
		
	ИначеЕсли Режим = "СотрудникиСправочник" Тогда
		
		Если ВозвращатьФизлицо Тогда
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	СписокСотрудников.Физлицо,
			|	СписокСотрудников.ФизлицоНаименование,
			|	СписокСотрудников.Код,
			|	ВЫБОР
			|		КОГДА СписокСотрудников.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НайденоПоНаименованию
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		СотрудникиОрганизаций.Физлицо КАК Физлицо,
			|		СотрудникиОрганизаций.Физлицо.Наименование КАК ФизлицоНаименование,
			|		СотрудникиОрганизаций.Код КАК Код,
			|		СотрудникиОрганизаций.Наименование КАК Наименование
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|	ГДЕ
			|		СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
			|		И СотрудникиОрганизаций.Актуальность
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		СотрудникиОрганизаций.Физлицо,
			|		СотрудникиОрганизаций.Физлицо.Наименование,
			|		СотрудникиОрганизаций.Код,
			|		СотрудникиОрганизаций.Наименование
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|	ГДЕ
			|		СотрудникиОрганизаций.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
			|		И СотрудникиОрганизаций.Актуальность) КАК СписокСотрудников";
			
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	СписокСотрудников.Ссылка,
			|	СписокСотрудников.Наименование,
			|	СписокСотрудников.Код,
			|	ВЫБОР
			|		КОГДА СписокСотрудников.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НайденоПоНаименованию
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		СотрудникиОрганизаций.Ссылка КАК Ссылка,
			|		СотрудникиОрганизаций.Наименование КАК Наименование,
			|		СотрудникиОрганизаций.Код КАК Код
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|	ГДЕ
			|		СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
			|		И СотрудникиОрганизаций.Актуальность
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		СотрудникиОрганизаций.Ссылка,
			|		СотрудникиОрганизаций.Наименование,
			|		СотрудникиОрганизаций.Код
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|	ГДЕ
			|		СотрудникиОрганизаций.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
			|		И СотрудникиОрганизаций.Актуальность) КАК СписокСотрудников";
			
		КонецЕсли;

	ИначеЕсли Режим = "СотрудникиОрганизацииСправочник" Тогда		
		
		Запрос.УстановитьПараметр("СписокДоговоров", Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		Запрос.УстановитьПараметр("НеУчитыватьАктуальность", Истина);
		Запрос.УстановитьПараметр("НеОтбиратьПоОрганизации", ?(Организация = "", Ложь, Истина));
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		               |	Сотрудники.Код КАК Код,
		               |	ВЫБОР
		               |		КОГДА Сотрудники.Актуальность
		               |			ТОГДА Сотрудники.Наименование
		               |		ИНАЧЕ ""(не актуалент) "" + Сотрудники.Наименование
		               |	КОНЕЦ КАК Наименование,
		               |	Сотрудники.Ссылка КАК Ссылка,
		               |	ИСТИНА КАК НайденоПоНаименованию
		               |ИЗ
		               |	Справочник.СотрудникиОрганизаций КАК Сотрудники
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		               |		ПО Сотрудники.Ссылка = Работники.Сотрудник
		               |ГДЕ
		               |	Сотрудники.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		               |	И Работники.Сотрудник ЕСТЬ NULL 
		               |	И (&НеОтбиратьПоОрганизации
		               |			ИЛИ Сотрудники.Организация = &ГоловнаяОрганизация)
		               |	И (&НеУчитыватьАктуальность
		               |			ИЛИ Сотрудники.Актуальность)
		               |	И Сотрудники.ВидДоговора В(&СписокДоговоров)
		               |
		               |ОБЪЕДИНИТЬ
		               |
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		               |	Сотрудники.Код,
		               |	ВЫБОР
		               |		КОГДА Сотрудники.Актуальность
		               |			ТОГДА Сотрудники.Наименование
		               |		ИНАЧЕ ""(не актуалент) "" + Сотрудники.Наименование
		               |	КОНЕЦ,
		               |	Сотрудники.Ссылка,
		               |	ЛОЖЬ
		               |ИЗ
		               |	Справочник.СотрудникиОрганизаций КАК Сотрудники
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		               |		ПО Сотрудники.Ссылка = Работники.Сотрудник
		               |ГДЕ
		               |	Сотрудники.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		               |	И Работники.Сотрудник ЕСТЬ NULL 
		               |	И (&НеОтбиратьПоОрганизации
		               |			ИЛИ Сотрудники.Организация = &ГоловнаяОрганизация)
		               |	И (&НеУчитыватьАктуальность
		               |			ИЛИ Сотрудники.Актуальность)
		               |	И Сотрудники.ВидДоговора В(&СписокДоговоров)";
					   
	ИначеЕсли Режим = "СотрудникиДоговорникиСправочник" Тогда		
		
		СписокДоговоров = Новый Массив;
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Лицензионный);

		Запрос.УстановитьПараметр("СписокДоговоров", СписокДоговоров);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		Запрос.УстановитьПараметр("НеОтбиратьПоОрганизации", ?(Организация = "", Ложь, Истина));
		Запрос.УстановитьПараметр("НеУчитыватьАктуальность", Истина);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	Договорники.Код КАК Код,
		|	Договорники.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Договорники.Актуальность
		|			ТОГДА Договорники.Наименование
		|		ИНАЧЕ ""(не актуалент) "" + Договорники.Наименование
		|	КОНЕЦ КАК Наименование,
		|	ИСТИНА КАК НайденоПоНаименованию
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК Договорники
		|ГДЕ
		|	Договорники.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|	И (&НеОтбиратьПоОрганизации
		|			ИЛИ Договорники.Организация = &ГоловнаяОрганизация)
		|	И (&НеУчитыватьАктуальность
		|			ИЛИ Договорники.Актуальность)
		|	И Договорники.ВидДоговора В(&СписокДоговоров)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|	Договорники.Код КАК Код,
		|	Договорники.Ссылка,
		|	ВЫБОР
		|		КОГДА Договорники.Актуальность
		|			ТОГДА Договорники.Наименование
		|		ИНАЧЕ ""(не актуалент) "" + Договорники.Наименование
		|	КОНЕЦ,
		|	ЛОЖЬ
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК Договорники
		|ГДЕ
		|	Договорники.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|	И (&НеОтбиратьПоОрганизации
		|			ИЛИ Договорники.Организация = &ГоловнаяОрганизация)
		|	И (&НеУчитыватьАктуальность
		|			ИЛИ Договорники.Актуальность)
		|	И Договорники.ВидДоговора В(&СписокДоговоров)";
	Иначе
		Возврат Новый СписокЗначений;
	КонецЕсли;
	                      
	Выборка = Запрос.Выполнить().Выбрать();
	
	Количество = Выборка.Количество();
	
	Если Количество = 0 Тогда
		Предупреждение("В поле ввода неверно задано значение поиска сотрудника!");
		Возврат НачальноеЗначение;
	ИначеЕсли Количество < 51 Тогда
		Значение = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Если ВозвращатьФизлицо ИЛИ Режим = "Кандидаты" Тогда
				Значение.Добавить(Выборка.Физлицо, ?(Выборка.НайденоПоНаименованию,Выборка.ФизлицоНаименование, Выборка.Код + " (" + Выборка.ФизлицоНаименование + ")"));
			Иначе
				Значение.Добавить(Выборка.Ссылка, ?(Выборка.НайденоПоНаименованию,Выборка.Наименование, Выборка.Код + " (" + Выборка.Наименование + ")"));
			КонецЕсли;
		КонецЦикла;
		Возврат Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПодобратьСписокРаботниковКандидатов()

// Открывает форму обработки для подготовки списка работников, отобранного по указанным пользователем критериям
//
// Владелец - форма, для которой требуется вызвать обработку
// ДатаАктуальности - дата, по состоянию на которую осматривается список работников
// ИмяРегистра - строка, возможны 2 значения - "РаботникиОрганизаций" или "Работники" - определяет
//               какие работники будут отбираться - по регл. или по упр. учету
// Организация - ссылка на организацию (может быть в том числе обособленным подразделением), если передана пустая ссылка, выбираются 
//					работники всех организаций
// Подразделение - ссылка на подразделение, если передана пустая ссылка, выбираются 
//					работники всех подразделений
// 
Процедура ОткрытьФормуОтбораСпискаРаботников(Владелец, ЭлементФормы, ДатаАктуальности, ИмяРегистра = "РаботникиОрганизаций", Организация = Неопределено, Подразделение = Неопределено, ИсполнятьЗапрос = Истина, ВыбиратьМестоРаботы = Истина, ВключатьДоговорников = Ложь, Уникальность = Ложь, МетаданныеОбъекта = Неопределено, ВыбиратьСотрудника = Истина,СтруктурноеПодразделение=Неопределено) Экспорт
	
	Если ИмяРегистра = "РаботникиОрганизаций" И НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Не указана организация, отобрать список работников невозможно!");
		Возврат;
	КонецЕсли;
		
	ФормированиеСпискаРаботников = Обработки.ФормированиеСпискаРаботников.Создать();
	ФормированиеСпискаРаботников.ИмяРегистра = ИмяРегистра;
	ФормированиеСпискаРаботников.ДатаАктуальности = КонецМесяца(ДатаАктуальности);
	ФормированиеСпискаРаботников.ДатаУволенных = НачалоДня(НачалоМесяца(ДатаАктуальности) - 1);
	ФормированиеСпискаРаботников.ИсполнятьЗапрос = ИсполнятьЗапрос;
	ФормированиеСпискаРаботников.ВыбиратьМестоРаботы = ВыбиратьМестоРаботы;
	ФормированиеСпискаРаботников.ВключатьДоговорников = ВключатьДоговорников;
	ФормированиеСпискаРаботников.ВыбиратьСотрудника = ВыбиратьСотрудника; 
	ФормированиеСпискаРаботников.Уникальность = Уникальность;
	// - КУФИБ - начало
	Если СтруктурноеПодразделение <> Неопределено Тогда
		ФормированиеСпискаРаботников.куфиб_ВыбиратьСтруктурноеПодразделение = Истина;
	КонецЕсли;
	// - КУФИБ - конец
	
	// подготовим Построитель отчета к работе
	ФормированиеСпискаРаботников.ЗаполнитьНачальныеНастройки();
	
	СтруктураНедоступныхОтборов = Новый Структура;
	Если ИмяРегистра = "РаботникиОрганизаций" Тогда
		Если ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Количество() = 0 Тогда 
			ФормированиеСпискаРаботников.ЗаполнитьНачальныеНастройки();	
		КонецЕсли;
		// Переданную организацию пропишем независимо от сохраненных ранее настроек отбора
		Если ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Найти("ОбособленноеПодразделение") = Неопределено Тогда
			ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Добавить("ОбособленноеПодразделение")
		КонецЕсли;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.ОбособленноеПодразделение.Установить(Организация,);
		// - КУФИБ - начало
		Если СтруктурноеПодразделение <> Неопределено Тогда
			Если ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Найти("СтруктурноеПодразделениеСотрудника") = Неопределено Тогда
				ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Добавить("СтруктурноеПодразделение")
			КонецЕсли;
			ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.СтруктурноеПодразделениеСотрудника.Значение = СтруктурноеПодразделение;
			ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.СтруктурноеПодразделениеСотрудника.Использование = Истина;
			ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.СтруктурноеПодразделениеСотрудника.ВидСравнения = ВидСравнения.Равно;
		КонецЕсли;
		СтруктураНедоступныхОтборов.Вставить("СтруктурноеПодразделение");
		// - КУФИБ - конец
		ФормированиеСпискаРаботников.ПостроительОтчета.Параметры.Вставить("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		СтруктураНедоступныхОтборов.Вставить("ОбособленноеПодразделение");
	КонецЕсли;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Если ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Найти("Подразделение") = Неопределено Тогда
			ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Добавить("Подразделение")
		КонецЕсли;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Подразделение.Значение = Подразделение;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Подразделение.Использование = Истина;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Подразделение.ВидСравнения = ВидСравнения.ВИерархии;
		СтруктураНедоступныхОтборов.Вставить("Подразделение");
	КонецЕсли;
	
	// Заполним список реквизитов табличной части для установки значений по-умолчанию
	Если ТипЗнч(ЭлементФормы) = Тип("ТабличноеПоле") Тогда
		Если МетаданныеОбъекта = Неопределено Тогда
			МетаданныеОбъекта = Владелец.ДокументОбъект.Метаданные();
		КонецЕсли;
		ТЗСвойстваОбъекта = Новый ТаблицаЗначений;
		ТЗСвойстваОбъекта.Колонки.Добавить("ИмяРеквизита");
		ТЗСвойстваОбъекта.Колонки.Добавить("ОписаниеТипаРеквизита");
		
		ТЗСвойстваОбъекта.Индексы.Добавить("ИмяРеквизита");
		
		Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда // передан документ
			МетаданныеТабличнойЧасти = МетаданныеОбъекта.ТабличныеЧасти.Найти(ЭлементФормы.Данные);
			Если МетаданныеТабличнойЧасти <> Неопределено Тогда
				Для Каждого Поле Из МетаданныеТабличнойЧасти.Реквизиты Цикл
					НоваяСтрока = ТЗСвойстваОбъекта.Добавить();
					НоваяСтрока.ИмяРеквизита = Поле.Имя;
					НоваяСтрока.ОписаниеТипаРеквизита = Поле.Тип;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда // передан регистр сведений
			МассивКоллекцийМетаданных = Новый Массив();
			МассивКоллекцийМетаданных.Добавить(МетаданныеОбъекта.Измерения);
			МассивКоллекцийМетаданных.Добавить(МетаданныеОбъекта.Ресурсы);
			МассивКоллекцийМетаданных.Добавить(МетаданныеОбъекта.Реквизиты);
			Для Каждого ТекущаяКоллекцияМетаданных Из МассивКоллекцийМетаданных Цикл
				Для Каждого Поле Из ТекущаяКоллекцияМетаданных Цикл
					НоваяСтрока = ТЗСвойстваОбъекта.Добавить();
					НоваяСтрока.ИмяРеквизита = Поле.Имя;
					НоваяСтрока.ОписаниеТипаРеквизита = Поле.Тип;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если ТЗСвойстваОбъекта.Количество() <> 0 Тогда
			ФормированиеСпискаРаботников.РеквизитыТабличнойЧасти.Очистить();
			
			Для Каждого Колонка Из ЭлементФормы.Колонки Цикл
				Если (НРег(Колонка.Имя) = "физлицо") 
					ИЛИ (НРег(Колонка.Имя) = "сотрудник") 
					ИЛИ (НРег(Колонка.Имя) = "номерстроки")
					ИЛИ (НРег(Колонка.Имя) = "авторасчет")
					ИЛИ (Колонка.Видимость = Ложь) Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяРеквизита = ?(НЕ ЗначениеЗаполнено(Колонка.Данные), Колонка.ДанныеФлажка, Колонка.Данные);
				НайденнаяСтрокаТаблицыСвойствОбъекта = ТЗСвойстваОбъекта.Найти(ИмяРеквизита, "ИмяРеквизита");
				Если НайденнаяСтрокаТаблицыСвойствОбъекта = Неопределено Тогда
					Продолжить;
				КонецЕсли;
					
				СтрокаТабличнойЧасти = ФормированиеСпискаРаботников.РеквизитыТабличнойЧасти.Добавить();
				СтрокаТабличнойЧасти.Имя = ИмяРеквизита;
				СтрокаТабличнойЧасти.Представление = Колонка.ТекстШапки;
				ОписаниеТипаРеквизита = НайденнаяСтрокаТаблицыСвойствОбъекта.ОписаниеТипаРеквизита;
				СтрокаТабличнойЧасти.Значение = ОписаниеТипаРеквизита.ПривестиЗначение();
				
				// подстановка значений по умолчанию
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Значение) Тогда
					Если ОписаниеТипаРеквизита.СодержитТип(Тип("Дата")) Тогда
					
						Если НРег(ИмяРеквизита) = "датаначала" Тогда
							СтрокаТабличнойЧасти.Значение = НачалоМесяца(ДатаАктуальности);
						ИначеЕсли НРег(ИмяРеквизита) = "датаокончания" Тогда
							СтрокаТабличнойЧасти.Значение = КонецМесяца(ДатаАктуальности);
						КонецЕсли;
					
					ИначеЕсли ЗначениеЗаполнено(Подразделение) И 
								ОписаниеТипаРеквизита.СодержитТип(Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда
						
						СтрокаТабличнойЧасти.Значение = Подразделение;
					
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
	КонецЕсли;
	
	// Теперь откроем подготовленную форму
	Форма = ФормированиеСпискаРаботников.ПолучитьФорму("ФормаНастройки",Владелец);
	Форма.мСтруктураНедоступныхОтборов = СтруктураНедоступныхОтборов;	
	Форма.ОткрытьМодально();
	
КонецПроцедуры  // ОткрытьФормуОтбораСпискаРаботников()

// Открывает для выбора список доков ЗарплатаКВыплатеОрганизаций конкретной организации
//
// Параметры
//  Элемент - поле ввода, в котором выбирается платежная ведомость 
//  СтандартнаяОбработка - булево, признак стандартной обработки события
//  Организация - СправочникСсылка.Организации, организация ведости которой надо выбрать
//  СпособыВыплатыЗарплаты - ПеречислениеСсылка.СпособыВыплатыЗарплаты - дополнительное ограничение на список ведомостей
//
Процедура ОткрытьФормуВыбораПлатежныхВедомостейОрганизации(Элемент, СтандартнаяОбработка, мОтображатьСтруктурныеПодразделения, Организация, СтруктурноеПодразделение, СпособыВыплатыЗарплаты, ИгнорироватьНеВыплаченнуюЗарплату = Истина) Экспорт

	СтандартнаяОбработка  = Ложь;
	
	ФормаВыбора = Документы["ЗарплатаКВыплатеОрганизаций"].ПолучитьФормуВыбора(,Элемент,);
	
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;	

	//Выбираем ведомости, относящиеся к выбранной в документе организации, со способом выплаты
	//"Через кассу" и не имеющие в ТЧ строки с реквизитом "Не выплачено"

	Запрос=Новый Запрос;
	
	Если мОтображатьСтруктурныеПодразделения Тогда
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
		УсловиеСтруктурноеПодразделение = " И ЗарплатаКВыплатеОрганизаций.СтруктурноеПодразделение = &СтруктурноеПодразделение";
	Иначе
		УсловиеСтруктурноеПодразделение = "";		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплатеОрганизаций.Ссылка
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизаций.Организация = &Организация
	|	И ЗарплатаКВыплатеОрганизаций.СпособВыплаты = &СпособВыплаты " + УсловиеСтруктурноеПодразделение;
	
	Если ИгнорироватьНеВыплаченнуюЗарплату Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И (НЕ(ЗарплатаКВыплатеОрганизаций.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|													ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка 
		|											  ИЗ 
		|													Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата 
		|											  ГДЕ 	
		|													ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &НеВыплачено 
		|											  )))
		|";
	КонецЕсли;

	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("СпособВыплаты",Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу);
	Запрос.УстановитьПараметр("НеВыплачено",Перечисления.ВыплаченностьЗарплаты.НеВыплачено);

	СписокОтбора=Новый СписокЗначений;
	СписокОтбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));

	ФормаВыбора.Отбор.Ссылка.ВидСравнения=ВидСравнения.ВСписке;
	ФормаВыбора.Отбор.Ссылка.Значение      = СписокОтбора;
	ФормаВыбора.Отбор.Ссылка.Использование = Истина;
	
	ФормаВыбора.Открыть();

КонецПроцедуры // ОткрытьФормуВыбораКассовыхПлатежныхВедомостейОрганизации()

// Процедура выполняет запись новой строки в истории ввода
//
Процедура ДополнитьИсторию(ИмяОбъектаМетаданных, Отбор)

	СписокДляИстории = Новый СписокЗначений();
	СписокДляИстории.Добавить(Отбор.ДокументыПоРаботникуОрганизации.Значение);
	
	РаботаСДиалогами.ДополнитьСписокИсторииВвода(ИмяОбъектаМетаданных + "." + "ФизЛицо", СписокДляИстории);

КонецПроцедуры

Процедура ОтборПоФизЛицуПриИзменении(Элемент, Отбор, ИмяОбъектаМетаданных) Экспорт

	ДополнитьИсторию(ИмяОбъектаМетаданных, Отбор);
	Отбор.ДокументыПоРаботникуОрганизации.Использование = ЗначениеЗаполнено(Элемент.Значение);
	
КонецПроцедуры

Процедура ОтборПоФизЛицуНачалоВыбораИзСписка(Элемент, Отбор, НовоеЗначение, ИмяОбъектаМетаданных) Экспорт

	Если НовоеЗначение <> Неопределено Тогда
		Если ТипЗнч(НовоеЗначение.Значение) = Тип("СписокЗначений") Тогда
			Элемент.Значение = НовоеЗначение.Значение.Получить(0).Значение;
		КонецЕсли;
		
		// При изменении
		ОтборПоФизЛицуПриИзменении(Элемент, Отбор, ИмяОбъектаМетаданных)
	КонецЕсли; 	
	
КонецПроцедуры

// проставляет в строку табличной части или реквизит формы полученные данные по физлицу
Процедура ПроставитьДанныеСтроки(Сотрудник, ДатаСобытия, ЭлементФормы) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("парамДатаСобытия", ДатаСобытия);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	РаботникиОрганизации.Должность КАК Должность
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамДатаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизации";
	
	Запрос.Текст = ТекстЗапроса;
	НаборыДанных = Запрос.Выполнить().Выгрузить();
	
	Если НаборыДанных.Количество() = 0 Тогда
		// Если не нашли данных - ничего не делаем
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементФормы) = Тип("ТабличноеПоле") Тогда
		
		// поле ПодразделениеОрганизации есть не во всех табличных частях
		Если ЭлементФормы.Колонки.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
			ЭлементФормы.ТекущаяСтрока.ПодразделениеОрганизации = НаборыДанных[0].ПодразделениеОрганизации;
		КонецЕсли;
		
		// поле Должность есть не во всех табличных частях
		Если ЭлементФормы.Колонки.Найти("Должность") <> Неопределено Тогда
			ЭлементФормы.ТекущаяСтрока.Должность = НаборыДанных[0].Должность;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПроставитьДанныеСтроки

// Открывает форму выбора работника для подбора его в табличную часть
//
// Владелец - табличное поле с табличной частью документа
//            в такой табличной части документа подбирается физлицо из числа работников компании
//
// СтандартнаяОбработка - флаг стандартной обработки события НачалоВыбора
//
// Ключ - ключ уникальности открываемой формы
//
// Подразделение - ссылка на подразделение, если передана пустая ссылка, выбираются 
//					работники всех подразделений
// 
Процедура ОткрытьФормуВыбораКандидата(Владелец, СтандартнаяОбработка, Ключ, Статус) Экспорт
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораКандидата", Владелец, Ключ);
	Форма.РежимВыбора = Истина;
	Форма.СтатусКандидатов = Статус;
	Форма.ПараметрФизлицо = Владелец.ТекущаяСтрока.Физлицо;
	
	Форма.Открыть();
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры  // ОткрытьФормуВыбораФизлица

// процедура устанавливает текущую строку в табличных полях формы 
// объекта, связанных с табличными частями объекта
// предположения:
// все табличные части и соответсвующие им табличные поля - одноименны
// все "синхронизируемые" табличные части имеют колонку с одинаковым 
// именем по которой ведется синхронизация
// 
// Параметры:
// 	Форма - форма объекта
//  Объект - объект данных
//  Элемент - элемнт формы в котором возникла активизация строки
//  СинхронизируемыеТабличныеЧасти - соответствие с 
//  			элементами, соответствующими синхронизируемым табличным полям
//  ИмяКолонки - имя колнки синхронизации
Процедура СинхронизироватьСтроки(Форма, Объект, Элемент, СинхронизируемыеТабличныеЧасти, ИмяКолонки) Экспорт

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Имя = Элемент.Имя;
	Если СинхронизируемыеТабличныеЧасти[Имя] Тогда
		СинхронизируемыеТабличныеЧасти[Имя] = Ложь;
		Возврат;
	КонецЕсли;

	Для Каждого ЭлементСоответствия Из СинхронизируемыеТабличныеЧасти Цикл

		Если ЭлементСоответствия.Ключ = Имя Тогда 
			Продолжить;
		КонецЕсли;

		Попытка
			СтрокаТЧ = Объект[ЭлементСоответствия.Ключ].Найти(Элемент.ТекущиеДанные[ИмяКолонки], ИмяКолонки);
		Исключение
			СтрокаТЧ = Форма[ЭлементСоответствия.Ключ].Найти(Элемент.ТекущиеДанные[ИмяКолонки], ИмяКолонки);
		КонецПопытки;

		Если СтрокаТЧ <> Неопределено Тогда

			СинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ]    = Истина;
			Форма.ЭлементыФормы[ЭлементСоответствия.Ключ].ТекущаяСтрока = СтрокаТЧ;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // СинхронизироватьСтроки()

// Процедура строит список должностей, подразделений и тарифный разряд по штатному расписанию организации.
//  
// Параметры: 
//  Режим - строка, может принимать значения: "Должность" или "ПодразделениеОрганизации" или "ТарифныйРазряд"
//			определяет, что именно будет выбирать пользователь
//	Организация - организация (обособленное подразделение), по которой отбирать
// 	ПодразделениеОрганизации - СправочникСсылка.ПодразделенияОрганизаций, по которому отбирать
//  Должность - СправочникСсылка.ДолжностиОрганизаций, по которой отбирать
//  ТарифныйРазряд - СправочникСсылка.ТарифныеРазряды, по которому отбирать
//
// Возвращаемое значение
//  нет
//
Функция ВыбратьИзШтатногоРасписанияОрганизации(Режим, Организация, ПодразделениеОрганизации, Должность, ТарифныйРазряд) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) 
			И НЕ ЗначениеЗаполнено(Должность)
			И НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Возврат Новый СписокЗначений 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец",Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации",ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Должность",Должность);
	Запрос.УстановитьПараметр("ТарифныйРазряд",ТарифныйРазряд);
	
	Если Режим = "ПодразделениеОрганизации" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации КАК Элемент,
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации.Наименование КАК ЭлементНаименование
		|ИЗ
		|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(, ПодразделениеОрганизации.Владелец = &Владелец) КАК ШтатноеРасписаниеОрганизацийСрезПоследних
		|ГДЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок > 0";
		Если ЗначениеЗаполнено(Должность) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ШтатноеРасписаниеОрганизацийСрезПоследних.Должность = &Должность";
		КонецЕсли;
		Если ЗначениеЗаполнено(ТарифныйРазряд) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ШтатноеРасписаниеОрганизацийСрезПоследних.ТарифныйРазряд = &ТарифныйРазряд";
		КонецЕсли;
		
	ИначеЕсли Режим = "Должность" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.Должность КАК Элемент,
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.Должность.Наименование КАК ЭлементНаименование
		|ИЗ
		|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(, ПодразделениеОрганизации.Владелец = &Владелец) КАК ШтатноеРасписаниеОрганизацийСрезПоследних
		|ГДЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок > 0";
		Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации = &ПодразделениеОрганизации";
		КонецЕсли;
		Если ЗначениеЗаполнено(ТарифныйРазряд) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ШтатноеРасписаниеОрганизацийСрезПоследних.ТарифныйРазряд = &ТарифныйРазряд";
		КонецЕсли;

	ИначеЕсли Режим = "ТарифныйРазряд" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.ТарифныйРазряд КАК Элемент,
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.ТарифныйРазряд.Наименование КАК ЭлементНаименование
		|ИЗ
		|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(, ПодразделениеОрганизации.Владелец = &Владелец) КАК ШтатноеРасписаниеОрганизацийСрезПоследних
		|ГДЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок > 0";
		Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации = &ПодразделениеОрганизации";
		КонецЕсли;
		Если ЗначениеЗаполнено(Должность) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ШтатноеРасписаниеОрганизацийСрезПоследних.Должность = &Должность";
		КонецЕсли;
		
	Иначе
		Возврат Новый СписокЗначений
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	ЭлементНаименование";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый СписокЗначений
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	СписокВыбора = Новый СписокЗначений();
	
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Элемент, Выборка.ЭлементНаименование);	
	КонецЦикла;
	
    Возврат СписокВыбора
	
КонецФункции // ВыбратьИзШтатногоРасписанияОрганизации

// Возвращает структуру с данными по выбранному работнику 
// Парамтеры:
//  Физлицо - ссылка на справочник физлиц
//	ВыбираемыеДанные - строка, признак того, что нужно выбирать данные из регистров Работники и/или УчетЗаработкаРаботников
//
// Возвращаемое значение:
//  Структура с элементами
//		всегда присуствует 
//			Физлицо
//		если ВыбираемыеДанные содержит строку "Работники"
//			Подразделение
//			Должность
//			ГрафикРаботы
//			ТабельныйНомер
//			ЗанимаемыхСтавок
//		если ВыбираемыеДанные содержит строку "УчетЗаработкаРаботников"
//          СпособОтраженияВУпрУчете
//          УчетНачисленийПоОрганизации
//
Функция СведенияПоВыбранномуРаботнику(Физлицо, ВыбираемыеДанные) Экспорт
	
	// Получим данные из среза последних
	ВыбиратьРаботники = Найти(ВыбираемыеДанные, "Работники") > 0;
	ВыбиратьУчетЗаработкаРаботников = Найти(ВыбираемыеДанные, "УчетЗаработкаРаботников") > 0;
	
	Запрос = Новый Запрос;
	Если ВыбиратьРаботники Тогда
		Если не ВыбиратьУчетЗаработкаРаботников Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Работники.Подразделение,
			|	Работники.Должность,
			|	Работники.ГрафикРаботы,
			|	Работники.ЗанимаемыхСтавок
			|ИЗ
			|	РегистрСведений.Работники.СрезПоследних(, Физлицо = &Физлицо) КАК Работники";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Работники.Подразделение,
			|	Работники.Должность,
			|	Работники.ГрафикРаботы,
			|	Работники.ЗанимаемыхСтавок,
			|	УчетЗаработкаРаботников.СпособОтраженияВУпрУчете,
			|	УчетЗаработкаРаботников.УчетНачисленийПоОрганизации
			|ИЗ
			|	РегистрСведений.Работники.СрезПоследних(, Физлицо = &Физлицо) КАК Работники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников.СрезПоследних(, Физлицо = &Физлицо) КАК УчетЗаработкаРаботников
			|		ПО (ИСТИНА)";
		КонецЕсли;
	ИначеЕсли ВыбиратьУчетЗаработкаРаботников Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетЗаработкаРаботников.СпособОтраженияВУпрУчете,
		|	УчетЗаработкаРаботников.УчетНачисленийПоОрганизации
		|ИЗ
		|	РегистрСведений.УчетЗаработкаРаботников.СрезПоследних(, Физлицо = &Физлицо) КАК УчетЗаработкаРаботников";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
			|	Работники.Физлицо
			|ИЗ
			|	РегистрСведений.Работники.СрезПоследних(, Физлицо = &Физлицо) КАК Работники";
			
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат НеОпределено;
	Иначе
		Если ВыбиратьРаботники Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ВыбранныйНаборДанных = Новый Структура("Физлицо, Подразделение, Должность, ГрафикРаботы, ЗанимаемыхСтавок");				
			
			ВыбранныйНаборДанных.Физлицо 		  = Физлицо;
			ВыбранныйНаборДанных.Подразделение    = Выборка.Подразделение;
			ВыбранныйНаборДанных.Должность 		  = Выборка.Должность;
			ВыбранныйНаборДанных.ГрафикРаботы     = Выборка.ГрафикРаботы;
			ВыбранныйНаборДанных.ЗанимаемыхСтавок = Выборка.ЗанимаемыхСтавок;
			Если ВыбиратьУчетЗаработкаРаботников Тогда
				ВыбранныйНаборДанных.Вставить("СпособОтраженияВУпрУчете", Выборка.СпособОтраженияВУпрУчете);
				ВыбранныйНаборДанных.Вставить("УчетНачисленийПоОрганизации", Выборка.УчетНачисленийПоОрганизации);
			КонецЕсли;
		ИначеЕсли ВыбиратьУчетЗаработкаРаботников Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ВыбранныйНаборДанных = Новый Структура("Физлицо, СпособОтраженияВУпрУчете, УчетНачисленийПоОрганизации");
			ВыбранныйНаборДанных.Физлицо = Физлицо;
			ВыбранныйНаборДанных.СпособОтраженияВУпрУчете = Выборка.СпособОтраженияВУпрУчете;
			ВыбранныйНаборДанных.УчетНачисленийПоОрганизации = Выборка.УчетНачисленийПоОрганизации;
		Иначе
			ВыбранныйНаборДанных = Новый Структура("Физлицо");
			ВыбранныйНаборДанных.Физлицо = Физлицо;
		КонецЕсли;	
		Возврат ВыбранныйНаборДанных;
	КонецЕсли;
	
КонецФункции // СведенияПоВыбранномуРаботнику	

// Процедура открывает форму анализа неявок на основании указанного кадрового документа
// 
// Параметры:
//	КадровыйДокумент - документ-объект или документ-ссылка - кадровый документ, по которому надо открыть анализ неявок
//	Форма - форма, из которой вызывается обработка
//
Процедура ОткрытьФормуАнализаНеявокПоКадровомуДокументу(КадровыйДокумент, Форма) Экспорт

	Если Не ПравоДоступа("Просмотр", Метаданные.Обработки.АнализНеявок) Тогда
		Предупреждение("Недостаточно прав для выполнения операции!");
		Возврат;
	КонецЕсли;

	Если НЕ КадровыйДокумент.Проведен Тогда
		Предупреждение("Ввести документы-начисления можно только после проведения документа!");
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(КадровыйДокумент) <> ТипЗнч(КадровыйДокумент.Ссылка) Тогда // передан документ-объект из формы документа, проверим модифицированность
		Если КадровыйДокумент.Модифицированность() Тогда
			
			Ответ = Вопрос("Документ изменен. Для ввода документов-начислений его необходимо записать и провести.
							|Записать и провести?",
							РежимДиалогаВопрос.ОКОтмена, , 
							КодВозвратаДиалога.Отмена,
							"Документ изменен");
			
			Если Ответ = КодВозвратаДиалога.ОК Тогда
				
				Попытка
					Форма.ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
				Исключение
					Предупреждение("Операция не выполнена!");
					Возврат 
				КонецПопытки;
				
			Иначе
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	Обработка = Обработки.АнализНеявок.Создать();
	Обработка.ОтбиратьСобытияПоДокументу = Истина;
	Обработка.КадровыйДокумент = КадровыйДокумент.Ссылка;
	Обработка.ПолучитьФорму(, Форма).Открыть();

КонецПроцедуры // ОткрытьФормуАнализаНеявокПоКадровомуДокументу()

//Функция раскладывает строку с данными о месте рождения на элементы структуры
//
Функция РазложитьМестоРождения(Знач СтрокаМестоРождения, ВерхнийРегистр = Истина) Экспорт

	НаселенныйПункт		= "";
	Район				= "";
	Область				= "";
	Страна				= "";
	МассивМестоРождения	= ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(?(ВерхнийРегистр, Врег(СтрокаМестоРождения), СтрокаМестоРождения));
	ЭлементовВМассиве	= МассивМестоРождения.Количество();   
	
	Если ЭлементовВМассиве	>	0	тогда
		НаселенныйПункт	=	СокрЛП(МассивМестоРождения[0]);
	КонецЕсли;
	
	Если ЭлементовВМассиве	>	1	тогда
		Район	=	СокрЛП(МассивМестоРождения[1]);
	КонецЕсли;
	
	Если ЭлементовВМассиве	>	2	тогда
		Область	=	СокрЛП(МассивМестоРождения[2]);
	КонецЕсли;
	
	Если ЭлементовВМассиве	>	3	тогда
		Страна	=	СокрЛП(МассивМестоРождения[3]);
	КонецЕсли;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Область",Область);
	СтруктураВозврата.Вставить("Страна",Страна);
	
	Возврат СтруктураВозврата;
	
КонецФункции // РазложитьМестоРождения()

//Возвращает строковое представление места рождения
//
Функция ПредставлениеМестаРождения(Знач СтрокаМестоРождения) Экспорт

	СтруктураМестоРождения = РазложитьМестоРождения(СтрокаМестоРождения, Ложь);
	
	Представление	= "" + ?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт),		"",	"Населенный пункт: " + СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
	+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	", район:  " + СокрЛП(СтруктураМестоРождения.Район))
	+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	", область: "	+	СокрЛП(СтруктураМестоРождения.Область))
	+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	", страна: "	+	СокрЛП(СтруктураМестоРождения.Страна));
	
	Если Лев(Представление, 1) = ","  Тогда
		Представление = Сред(Представление, 2)
	КонецЕсли;

	Возврат Представление;
	
КонецФункции // ПредставлениеМестаРождения()

// Возвращает строковое представление места рождения без описания административных единиц
//
Функция ПредставлениеМестаРожденияКраткое(Знач СтрокаМестоРождения) Экспорт

	СтруктураМестоРождения = РазложитьМестоРождения(СтрокаМестоРождения, Ложь);
	
	Представление	= "" + ?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт), "", СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
	+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	", " + СокрЛП(СтруктураМестоРождения.Район))
	+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	", "	+	СокрЛП(СтруктураМестоРождения.Область))
	+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	", "	+	СокрЛП(СтруктураМестоРождения.Страна));
	
	Если Лев(Представление, 1) = ","  Тогда
		Представление = Сред(Представление, 2)
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции // ПредставлениеМестаРожденияКраткое()

// Проверяет работает ли сотрудник по договору ГПХ
Функция ДоговорСотрудникаГПХ(Сотрудник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	               |	ВЫБОР
	               |		КОГДА СотрудникиОрганизаций.ВидДоговора В (	ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда), 
				   |													ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Авторский), 
				   |													ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Лицензионный))
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ДоговорГПХ
	               |ИЗ
	               |	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	               |ГДЕ
	               |	СотрудникиОрганизаций.Ссылка = &Сотрудник";
				   
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ДоговорГПХ = Ложь;
	Если Выборка.Следующий() Тогда
		ДоговорГПХ = Выборка.ДоговорГПХ;
	КонецЕсли;
	
	Возврат ДоговорГПХ;		
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДГОТОВКИ ИНФОРМАЦИИ В ФОРМЕ

// Процедура предназначена для управления видимостью элементов формы,
// вызывается в обработчиках событий "ПриОткрытии" форм, при изменении реквизита Организация
//
// Параметры:
//  ЭлементыФормы  - коллекция ЭУ формы
//  УчетнаяПолитикаПоПерсоналу - структура, содержит данные учетной политики    
//    предприятия или конкретной организации
//
Процедура УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(ЭлементыФормы, УчетнаяПолитикаПоПерсоналу) Экспорт
	
	ИспользуютсяНачисленияВВалюте = Ложь;
	УчетнаяПолитикаПоПерсоналу.Свойство("ИспользуютсяНачисленияВВалюте", ИспользуютсяНачисленияВВалюте);
	
	Если ИспользуютсяНачисленияВВалюте = Неопределено Тогда
		ИспользуютсяНачисленияВВалюте = Ложь;	
	КонецЕсли;
	
	Для Каждого Элемент Из ЭлементыФормы Цикл
		Если ТипЗнч(Элемент) = Тип("ТабличноеПоле") Тогда
			Колонки	= Элемент.Колонки;
			Для Каждого Колонка Из Колонки Цикл
				Если Лев(Колонка.Имя, 6) = "Валюта" Тогда
					Колонка.Видимость			= ИспользуютсяНачисленияВВалюте;
					Колонка.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;		
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеВвода") И Элемент.Имя = "ВалютаДокумента" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = Тип("Надпись") И Элемент.Имя = "НадписьВалютаДокумента" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеВвода") И (Элемент.Имя = "ВалютаТарифнойСтавки" ИЛИ Элемент.Имя = "ВалютаТарифнойСтавки1") Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = Тип("Надпись") И (Элемент.Имя = "НадписьВалютаТарифнойСтавки" ИЛИ Элемент.Имя = "НадписьВалютаТарифнойСтавки1") Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") И (Элемент.Имя = "Валюта" Или Элемент.Имя = "ТекущаяВалюта") Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") И (Элемент.Имя = "Валюта1" Или Элемент.Имя = "ТекущаяВалюта1") Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") И (Элемент.Имя = "Валюта2" Или Элемент.Имя = "ТекущаяВалюта2")Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") И (Элемент.Имя = "Валюта3" Или Элемент.Имя = "ТекущаяВалюта3")Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;	
		ИначеЕсли ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") И (Элемент.Имя = "Валюта4" Или Элемент.Имя = "ТекущаяВалюта4")Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") И (Элемент.Имя = "Валюта5" Или Элемент.Имя = "ТекущаяВалюта5")Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") И (Элемент.Имя = "Валюта6" Или Элемент.Имя = "ТекущаяВалюта6")Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") и Элемент.Имя = "ВалютаЗавершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") и Элемент.Имя = "Валюта1Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") и Элемент.Имя = "Валюта2Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") и Элемент.Имя = "Валюта3Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;	
		ИначеЕсли ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") и Элемент.Имя = "Валюта4Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") и Элемент.Имя = "Валюта5Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") и Элемент.Имя = "Валюта6Завершения" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу()

// Процедура заполняет вычисляемую колонку ТЧ документа "ТабельныйНомерСтрока"
//
// Параметры
//  ТЧДокумента  	– Табличное поле
//  ОформленияСтрок – Коллекция значений типа ОформлениеСтроки табличного поля ТЧДокумента
//	ТабельныеНомера - соответствие, хранящие табельные номера для физлиц
//  ИмяРегистра 	– строка - имя регистра, из которого получать табельный номер
//
Процедура УстановитьЗначенияКолонкиТабельныйНомерСтрока(ТЧДокумента, ОформленияСтрок) Экспорт
	
	Если ТЧДокумента.Колонки.Найти("ТабельныйНомерСтрока") = Неопределено 
		ИЛИ НЕ ТЧДокумента.Колонки.ТабельныйНомерСтрока.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	МассивСотрудников = Новый Массив;
	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
		МассивСотрудников.Добавить(СтрокаТабличнойЧасти.ДанныеСтроки.Сотрудник);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Сотрудники.Код КАК ТабельныйНомер,
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&парамМассивСотрудников)";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("парамМассивСотрудников", МассивСотрудников);
	
	ТабельныеНомера = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТабельныеНомера[Выборка.Сотрудник] = Выборка.ТабельныйНомер;
	КонецЦикла; 
	
	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
		СтрокаТабличнойЧасти.Ячейки.ТабельныйНомерСтрока.УстановитьТекст(ТабельныеНомера[СтрокаТабличнойЧасти.Ячейки.Сотрудник.Значение]);
	КонецЦикла;

КонецПроцедуры // УстановитьЗначенияКолонкиТабельныйНомерСтрока()

// Устанавливает видимость панели представления формул расчета
//
Процедура ОтобразитьПоляПоказателейСхемМотивации(Форма) Экспорт
	
	СпособРасчета = Форма.СпособРасчета;
	
	СворачиватьПанельФормулы = НЕ ЗначениеЗаполнено(СпособРасчета);
	Форма.ЭлементыФормы.ПанельПредставлениеФормулы.Свертка = ?(СворачиватьПанельФормулы, РежимСверткиЭлементаУправления.Верх, РежимСверткиЭлементаУправления.Нет);
	
КонецПроцедуры // ОтобразитьПоляПоказателейСхемМотивации()

// Функция Определяет индекс картинки
//
// Параметры
//  ВидСобытия - ПеречислениеСсылка.ВидыСобытий
//
// Возвращаемое значение:
//  Индекс - число
//
Функция ОпределитьИндексКартинкиВидаСобытия(Объект,ТипСобытия = Неопределено) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.Событие") Тогда
		ВидСобытия = Объект.ВидСобытия;
		ТипСобытия = Объект.ТипСобытия;
	Иначе
		ВидСобытия = Объект;
	КонецЕсли;
	
	Если ТипЗнч(ВидСобытия) = Тип("ПеречислениеСсылка.ВидыСобытий") Тогда
		
		Если ВидСобытия = Перечисления.ВидыСобытий.ТелефонныйЗвонок Тогда
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 14;
			Иначе
				Возврат 9;
			КонецЕсли;
		ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча Тогда
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 15;
			Иначе
				Возврат 10;
			КонецЕсли;
		ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо Тогда
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 16;
			Иначе
				Возврат 11;
			КонецЕсли;
		ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ПочтовоеПисьмо Тогда
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 17;
			Иначе
				Возврат 12;
			КонецЕсли;
		Иначе
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 13;
			Иначе
				Возврат 8;
			КонецЕсли;
		КонецЕсли;
			
	Иначе
		Возврат 21;
	КонецЕсли;

КонецФункции // ОпределитьИндексКартинкиВидаСобытия()

// Функция Определяет картинку для напоминания
	//
	// Параметры
	//  Напоминание - Произвольный, объект напоминания
	//  ТипСобытия  - тип события, если не указан - определяется по напоминанию
	//
	// Возвращаемое значение:
	//  Картинка - Картинка
	//
Функция ПолучитьКартинкуНапоминания(Напоминание,ТипСобытия = Неопределено) Экспорт
	
	ИндексВозврата = ОпределитьИндексКартинкиВидаСобытия(Напоминание,ТипСобытия);
	
	Если ИндексВозврата = 15 Тогда
		Возврат БиблиотекаКартинок.ЛичнаяВстречаИсходящяя;
		
	ИначеЕсли ИндексВозврата = 10 Тогда
		Возврат БиблиотекаКартинок.ЛичнаяВстречаВходящяя;
		
	ИначеЕсли ИндексВозврата = 17 Тогда
		Возврат БиблиотекаКартинок.ПочтовоеПисьмоИсходящее;
		
	ИначеЕсли ИндексВозврата = 12 Тогда
		Возврат БиблиотекаКартинок.ПочтовоеПисьмоВходящее;
		
	ИначеЕсли ИндексВозврата = 13 Тогда
		Возврат БиблиотекаКартинок.ПрочееСобытиеИсходящее;
		
	ИначеЕсли ИндексВозврата = 8 Тогда
		Возврат БиблиотекаКартинок.ПрочееСобытиеВходящее;
		
	ИначеЕсли ИндексВозврата = 14 Тогда
		Возврат БиблиотекаКартинок.ТелефонныйЗвонокИсходящий;
		
	ИначеЕсли ИндексВозврата = 9 Тогда
		Возврат БиблиотекаКартинок.ТелефонныйЗвонокВходящий;
		
	ИначеЕсли ИндексВозврата = 16 Тогда
		Возврат БиблиотекаКартинок.ЭлектронноеПисьмоИсходящее;
		
	ИначеЕсли ИндексВозврата = 11 Тогда
		Возврат БиблиотекаКартинок.ЭлектронноеПисьмоВходящее;
		
	ИначеЕсли ИндексВозврата = 21 Тогда
		Возврат Новый Картинка;
		
	Иначе
		Возврат БиблиотекаКартинок.Важно;
		
	КонецЕсли; 
	
КонецФункции //ПолучитьКартинкуНапоминания()

/////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАНИЯ МЕХАНИЗМА НАСТРОЙКИ ПРАВ ДОСТУПА

// Проверка доступности роли расчетчика
// это или РасчетчикРегламентированнойЗарплаты или полные права
// Применяется для проверки прав на доступ к расчетным регистрам, например, 
// в формах и при выводе на печать
// Возвращаемое значение:
//	булево - истина если есть доступ к "расчетным" данным
Функция ДоступнаРольРасчетчикаРегл() Экспорт
	
	Возврат РольДоступна("РасчетчикРегламентированнойЗарплаты") ИЛИ
			РольДоступна("ПолныеПрава");
	
КонецФункции  //ДоступнаРольРасчетчика

// Проверка доступности роли "управленческого" кадровика
// это или КадровикУправленческихДанных или полные права
// Применяется для проверки прав на доступ к кадровым даннам, например, 
// в формах или при выводе на печать
// Возвращаемое значение:
//	булево - истина если есть доступ к "кадровым" данным
Функция ДоступнаРольКадровикаУпр() Экспорт
	
	Возврат РольДоступна("КадровикУправленческихДанных") ИЛИ 
			РольДоступна("ПолныеПрава");
	
КонецФункции  //ДоступнаРольРасчетчика

// Проверка доступности роли менеджера по набору персонала 
// это или МенеджерПоНаборуПерсонала или полные права
// Применяется для проверки прав на доступ к соотв. даннам
// Возвращаемое значение:
//	булево - истина если есть доступ
Функция ДоступнаРольМенеджераПоНабору() Экспорт
	
	Возврат РольДоступна("МенеджерПоНаборуПерсонала") ИЛИ 
			РольДоступна("ПолныеПрава");
	
КонецФункции // ДоступнаРольМенеджераПоНабору

// Проверка доступности роли кадровика
// это или КадровикРегламентированныхДанных или полные права
// Применяется для проверки прав на доступ к расчетным регистрам, например, 
// в формах и при выводе на печать
// Возвращаемое значение:
//	булево - истина если есть доступ к "расчетным" данным
Функция ДоступнаРольКадровикаРегл() Экспорт
	
	Возврат РольДоступна("КадровикРегламентированныхДанных")
//			ИЛИ РольДоступна("УдалитьКадровикРегламентированныхДанныхБезОграниченияПрав")
			ИЛИ РольДоступна("ПолныеПрава");
	
КонецФункции  //ДоступнаРольКадровикаРегл

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СПИСКОВ ЗНАЧЕНИЙ ПЕРЕЧИСЛЕНИЙ

// Возвращает список отпусков
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления 
//
Функция ПолучитьСписокОтпусковОрганизации() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный);
	СписокСпособов.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускПоБеременностиИРодам);
	СписокСпособов.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускПоУходуЗаРебенком);	
	СписокСпособов.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебный);
	СписокСпособов.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебныйНеоплачиваемый);	
	СписокСпособов.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускБезСохраненияЗарплаты);
	СписокСпособов.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускДляПрохожденияСкрининговыхИсследований);
	СписокСпособов.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускНаПостановкуНаМедицинскийУчетПоБеременностиДоДвенадцатиНедель);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокОтпусковОрганизации()

// Возвращает список отпусков
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления 
//
Функция ПолучитьСписокСостоянийОтпусковОрганизации() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	// здесь все отпуска
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускЕжегодный);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком);	
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускУчебный);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускУчебныйНеоплачиваемый);	
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокОтпусковОрганизации()

Функция ПолучитьСписокПрочихСостоянийРаботника() Экспорт

	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Заболевание);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Работает);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Простой);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине);	
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ВынужденныйПрогул);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ГосударственныеОбязанности);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Прогулы);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокПрочихСостоянийРаботника()

// Возвращает список состояний работников организации, которые исключаются при подсчете фактической численности
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления 
//
Функция ПолучитьСписокСостоянийИсключаемыхИзФактическойЧисленности() Экспорт

	// Список состояний, исключаемых из фактической численности 
	// п.22 Инструкции по заполнению статистической отчетности по труду, утвержденной 
	// Приказом Председателя Агентства Республики Казахстан по статистике от 12 июля 2002 года N 38-Г 

	СписокИсключаемыхСостояний = Новый СписокЗначений;
	СписокИсключаемыхСостояний.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам);
	СписокИсключаемыхСостояний.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком);
	СписокИсключаемыхСостояний.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускУчебный);
	СписокИсключаемыхСостояний.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускУчебныйНеоплачиваемый);
	СписокИсключаемыхСостояний.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты);
	
	Возврат СписокИсключаемыхСостояний;

КонецФункции // ПолучитьСписокСостоянийРаботникаИсключаемыхИзФактическойЧисленности

// Возвращает список состояний работников организации, которые исключаются при подсчете фактической численности
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления 
//
Функция ПолучитьСписокСостоянийИсключаемыхИзФактическойЧисленности2ТПРОФ() Экспорт

	// Список состояний, исключаемых из фактической численности 
	// в соответствии с инструкйией к отчету "2Т ПРОФ" форма 2010 года
	СписокИсключаемыхСостояний = Новый СписокЗначений;
	СписокИсключаемыхСостояний.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты);
	СписокИсключаемыхСостояний.Добавить(Перечисления.СостоянияРаботникаОрганизации.Простой);		
	СписокИсключаемыхСостояний.Добавить(Перечисления.СостоянияРаботникаОрганизации.Заболевание);
	СписокИсключаемыхСостояний.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам);
	СписокИсключаемыхСостояний.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком);
	СписокИсключаемыхСостояний.Добавить(Перечисления.СостоянияРаботникаОрганизации.Прогулы);
	СписокИсключаемыхСостояний.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине);	
	СписокИсключаемыхСостояний.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускУчебный);
	СписокИсключаемыхСостояний.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускУчебныйНеоплачиваемый);
	СписокИсключаемыхСостояний.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускЕжегодный); 

	Возврат СписокИсключаемыхСостояний;

КонецФункции // ПолучитьСписокСостоянийРаботникаИсключаемыхИзФактическойЧисленности

// имитация кадрового нумератора для поддержки учетной политики по персоналу с 
// кадровым нумераторм документов
Процедура ПриУстановкеНовогоНомераКадровогоДокумента(СтандартнаяОбработка, УчетнаяПолитикаПоПерсоналу, Организация, Номер, Префикс, Дата) Экспорт
	// проверка учетной политики
	Если УчетнаяПолитикаПоПерсоналу[Организация].ЕдиныйНумераторКадровыхДокументов Тогда
		СписокДокументов = Новый Массив;
		СписокДокументов.Добавить("КадровоеПеремещениеОрганизаций");
		СписокДокументов.Добавить("ПриемНаРаботуВОрганизацию");
		СписокДокументов.Добавить("УвольнениеИзОрганизаций");
		
		НовыйНомер = ПолучитьНовыйНомерПоДокументам(СписокДокументов, Префикс, Дата);
		
		Если НовыйНомер <> "" Тогда
			СтандартнаяОбработка = Ложь;
			Номер = НовыйНомер;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры		

// Получает новый номер документа по переданному списку документов и префиксу
// Фактически, имитирует работу нумератора докумнетов
// Если в информационной базе еще нет документов вернет пустую стоку
//
// Только для документов со строковым номером!
//
// Параметры:
//	СписокДокументов - массив строк с именами документов
//  Префикс - строка, префикс номера
//  Дата - дата документа
// Возвращаемое значение:
//  строка
//
Функция ПолучитьНовыйНомерПоДокументам(СписокДокументов, Префикс, Дата)
	
	Запрос = Новый Запрос;
	
	Результат = Новый СписокЗначений;
	
	Для Каждого Документ из СписокДокументов Цикл
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номер
		|ИЗ
		|	Документ."+Документ+"
		|ГДЕ Номер Подобно """ + Префикс + "%""
		|  И Дата>=&НачалоГода
		|  И Дата<=&КонецГода
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номер УБЫВ";
		
        // поддерживается "годовая" кадровая нумерация
        Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Дата));
    	Запрос.УстановитьПараметр("КонецГода", КонецГода(Дата));
        
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат.Добавить(Выборка.Номер);
		КонецЕсли;
	КонецЦикла;
	
	Если Результат.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		// выберем наибольший
		Результат.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		// получим новый номер
		НовыйНомер = ПолучитьСледующийНомер(СокрП(Результат[0].Значение));
	Иначе
		НовыйНомер = "";
	КонецЕсли;
	Возврат НовыйНомер;
	
КонецФункции		

// Увеличивает номер в переданной строке на 1
//
// Параметры
//  ПоследнийНомер - строка - представляет собой номер (документа, табельный и т.п.)
//
// Возвращаемое значение:
//  строка  - следующий по порядку номер
//
Функция ПолучитьСледующийНомер(ПоследнийНомер) Экспорт 

	ДлинаНомера = СтрДлина(ПоследнийНомер);
	
	Если ДлинаНомера = 0 Тогда
		Возврат "1"
	КонецЕсли;
	
	СчетчикСимв = ДлинаНомера;
	
	Пока СчетчикСимв > 0 Цикл
		Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Сред(ПоследнийНомер, СчетчикСимв, 1)) Тогда
			СчетчикСимв = СчетчикСимв - 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СчетчикСимв = ДлинаНомера Тогда
		НомерЧисловой = 1
	Иначе
		НомерЧисловой = Число(Сред(ПоследнийНомер, СчетчикСимв + 1));
	КонецЕсли;
	
	Если НомерЧисловой < Pow(10, ДлинаНомера - СчетчикСимв) - 1 Тогда
		СледующийНомер = НомерЧисловой + 1;
	Иначе
		СледующийНомер = НомерЧисловой;
	КонецЕсли;
	
	НовыйНомер = Лев(ПоследнийНомер,  СчетчикСимв) + Формат(СледующийНомер,"ЧЦ=" + (ДлинаНомера - СчетчикСимв) + "; ЧВН=; ЧГ=0");
	
	Возврат НовыйНомер
	
КонецФункции // ПолучитьСледующийНомер()

// проверяет уникальность кадрового номера
// если не уникален - возвращает Ложь
// Параметры:
//  УчетнаяПолитикаПоПерсоналу - массив со сведениями по учетной политике
//  Организация
//  Номер - проверяемый номер
//  Дата - дата проверяемого документа
//  Ссылка - ссылка на документ, для которого выпорлняется проверка
//
// Вызывает исключение! 
// Должна использоваться, например, при записи документа.
//
Функция ПроверкаУникальностиНомераКадровогоДокумента(УчетнаяПолитикаПоПерсоналу, Организация, Номер, Дата, Ссылка) Экспорт
	// проверка учетной политики
	Если УчетнаяПолитикаПоПерсоналу[Организация].ЕдиныйНумераторКадровыхДокументов Тогда
		СписокДокументов = Новый Массив;
		СписокДокументов.Добавить("КадровоеПеремещениеОрганизаций");
		СписокДокументов.Добавить("ПриемНаРаботуВОрганизацию");
		СписокДокументов.Добавить("УвольнениеИзОрганизаций");
		
		Если Не ПроверкаУникальностиНомераПоДокументам(СписокДокументов, Номер, Дата, Ссылка) Тогда
            ВызватьИсключение "Неуникальный номер кадрового документа! (" + Номер + ")";
        КонецЕсли;
	КонецЕсли;
КонецФункции

// используется в ПроверкаУникальностиНомераКадровогоДокумента
Функция ПроверкаУникальностиНомераПоДокументам(СписокДокументов, Номер, Дата, Ссылка)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Номер", Номер);
    // поддерживается "годовая" кадровая нумерация
    Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Дата));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(Дата));
	
	Для Каждого Документ из СписокДокументов Цикл
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номер
		|ИЗ
		|	Документ." + Документ+"
		|ГДЕ Ссылка <> &Ссылка 
        |   И Номер = &Номер 
        |   И Дата>=&НачалоГода 
        |   И Дата<=&КонецГода";
		
		Если Не Запрос.Выполнить().Пустой() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

// Функция возвращает массив видов времени, 
// по идексам этого массива происходит упорядочивание видов времени в сводном табеле
//
Функция ПолучитьМассивУпорядоченныхВидовИспользованияРабочегоВремени() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлассификаторИспользованияРабочегоВремени.Ссылка
	|ИЗ
	|	Справочник.КлассификаторИспользованияРабочегоВремени КАК КлассификаторИспользованияРабочегоВремени
	|ГДЕ
	|	(НЕ КлассификаторИспользованияРабочегоВремени.ПометкаУдаления)
	|	И КлассификаторИспользованияРабочегоВремени.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
	|			ТОГДА 1
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
	|			ТОГДА 2
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам)
	|			ТОГДА 3
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск)
	|			ТОГДА 4
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка)
	|			ТОГДА 5
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные)
	|			ТОГДА 6
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Праздники)
	|			ТОГДА 7
	|		ИНАЧЕ 100
	|	КОНЕЦ,
	|	КлассификаторИспользованияРабочегоВремени.Наименование";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции // ПолучитьМассивУпорядоченныхВидовИспользованияРабочегоВремени()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ПРОВЕРЯЮЩИЕ ВОЗМОЖНОСТЬ ОТКЛЮЧЕНИЯ ВЕДЕНИЯ УЧЕТА В ВАЛЮТЕ

// Функция проверяет можно ли отключать поддержку учета в валюте
//
// Параметры: 
//	нет
//
// Возвращаемое значение:
//  Истина - можно отключать, Ложь - нельзя отключать, есть начисления (удержания) в валюте
//
// Описание:
//  Проверяет, есть действующие начисления (удержания) в валюте 
//
Функция МожноОтключатьУчетВВалюте(Организация) Экспорт
	
	ПарамТенге = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ПарамТенге.Пустая() Тогда
		ПарамТенге = Справочники.Валюты.НайтиПоКоду("398")
	КонецЕсли;
	
	ТекстЗапроса = 
	 "ВЫБРАТЬ ПЕРВЫЕ 1
	 |	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник.ФизЛицо КАК ФизЛицо
	 |ИЗ
	 |	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	 |ГДЕ
	 |	ПлановыеНачисленияРаботниковОрганизаций.Валюта1 <> &ПарамТенге
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Валюта2 <> &ПарамТенге
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Валюта3 <> &ПарамТенге
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Валюта4 <> &ПарамТенге
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Валюта5 <> &ПарамТенге
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Валюта6 <> &ПарамТенге
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Валюта1 <> &ПарамПустаяВалюта
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Валюта2 <> &ПарамПустаяВалюта
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Валюта3 <> &ПарамПустаяВалюта
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Валюта4 <> &ПарамПустаяВалюта
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Валюта5 <> &ПарамПустаяВалюта
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Валюта6 <> &ПарамПустаяВалюта
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Действие <> &ПарамПрекратить
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Организация = &парамОрганизация
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ ПЕРВЫЕ 1
	 |	ПлановыеУдержанияРаботниковОрганизаций.ФизЛицо
	 |ИЗ
	 |	РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК ПлановыеУдержанияРаботниковОрганизаций
	 |ГДЕ
	 |	ПлановыеУдержанияРаботниковОрганизаций.Валюта1 <> &ПарамТенге
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Валюта2 <> &ПарамТенге
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Валюта3 <> &ПарамТенге
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Валюта4 <> &ПарамТенге
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Валюта5 <> &ПарамТенге
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Валюта6 <> &ПарамТенге
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Валюта1 <> &ПарамПустаяВалюта
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Валюта2 <> &ПарамПустаяВалюта
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Валюта3 <> &ПарамПустаяВалюта
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Валюта4 <> &ПарамПустаяВалюта
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Валюта5 <> &ПарамПустаяВалюта
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Валюта6 <> &ПарамПустаяВалюта
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Действие <> &ПарамПрекратить
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Организация = &парамОрганизация";
	 
	 	 
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ПарамОрганизация", Организация);
	Запрос.УстановитьПараметр("ПарамТенге", ПарамТенге);
	Запрос.УстановитьПараметр("ПарамПустаяВалюта", Справочники.Валюты.ПустаяСсылка());	
	Запрос.УстановитьПараметр("ПарамПрекратить", Перечисления.ВидыДействияСНачислением.Прекратить);
		
 	Возврат Запрос.Выполнить().Пустой();
	 
КонецФункции //МожноОтключатьУчетВВалюте

////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОТЧЕТОВ НА ПОСТРОИТЕЛЕ ОТЧЕТОВ

// В текст запроса построителя вносит изменения с целью выборки всей информации о физлице
// Параметры:
// 	ТекстЗапроса 				- модифицируемый текст запроса построителя,
// 	СтруктураПредставлениеПолей - структура, в которую ложится представление добавленных полей физлица,
// 	СтруктураФорматаПолей 		- структура, в которую ложится формат добавленных полей физлица,
// 	ИмяОсновнойВыборки 			- имя таблицы запроса, к которой присоединяется информация о физлице
// 	ИмяПоляФизЛицо 				- имя реквизита основной выборки, имеющего тип "СправочникСсылка.ФизическиеЛица"
Процедура ДобавитьВТекстПостроителяДанныеОФизлице(ТекстЗапроса, СтруктураПредставлениеПолей, СтруктураФорматаПолей, ИмяОсновнойВыборки, ИмяПоляФизЛицо = "Сотрудник.ФизЛицо") Экспорт
	
	ПолноеИмяПоляФизЛицо = ИмяОсновнойВыборки + "." + ИмяПоляФизЛицо;
                                                   
	// данные реквизитов физлица
	МетаданныеФизЛица = Метаданные.Справочники.ФизическиеЛица;
	ТипФизическиеЛица = Тип("СправочникСсылка.ФизическиеЛица");
	ТипДата 		  = Тип("Дата");
	
	ТекстОписаниеПолей = "";
	Для Каждого РеквизитФизЛица Из МетаданныеФизЛица.Реквизиты Цикл
		ОписаниеТипаРеквизита 	= РеквизитФизЛица.Тип;
		ИмяРеквизита 			= РеквизитФизЛица.Имя;
		ТекстОписаниеПолей = ТекстОписаниеПолей + ",
		|	" + ПолноеИмяПоляФизЛицо+"."+ИмяРеквизита+?(НЕ ОбщегоНазначения.СодержитТолькоПримитивныеТипы(ОписаниеТипаРеквизита), ".*", "")+" КАК "+ИмяРеквизита;
		СтруктураПредставлениеПолей.Вставить(ИмяРеквизита, РеквизитФизЛица.Синоним);
		
		Если ОписаниеТипаРеквизита.СодержитТип(ТипДата) Тогда
			Если ОписаниеТипаРеквизита.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
				СтруктураФорматаПолей.Вставить(ИмяРеквизита, "ДФ=dd.MM.yyyy");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// данные о физлице
	ТекстОписаниеПолей = ТекстОписаниеПолей + ",
	|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, " + ПолноеИмяПоляФизЛицо + ".Наименование) КАК ФиоПолное,
	|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ, " + ПолноеИмяПоляФизЛицо +".Наименование) КАК ФиоКраткое,
	|	ЕСТЬNULL(ФИОФизЛицПриПрисвоенииСИК.Фамилия + "" "" + ФИОФизЛицПриПрисвоенииСИК.Имя + "" "" + ФИОФизЛицПриПрисвоенииСИК.Отчество, """") КАК ФиоПриПрисвоенииСИК,
	|	ВЫБОР КОГДА ГОД(" + ПолноеИмяПоляФизЛицо +".ДатаРождения) = 1 ТОГДА 0 ИНАЧЕ &ДатаАктуальности_Год - ГОД(" + ПолноеИмяПоляФизЛицо +".ДатаРождения) + ВЫБОР КОГДА (Месяц(" + ПолноеИмяПоляФизЛицо +".ДатаРождения)*100+День(" + ПолноеИмяПоляФизЛицо +".ДатаРождения)) > (&ДатаАктуальности_Месяц*100+&ДатаАктуальности_День) ТОГДА -1 ИНАЧЕ 0 КОНЕЦ КОНЕЦ КАК Возраст,
	|	ВЫБОР КОГДА ГОД(" + ПолноеИмяПоляФизЛицо +".ДатаРождения) = 1 ТОГДА 0 ИНАЧЕ &ДатаАктуальности_Год - ГОД(" + ПолноеИмяПоляФизЛицо +".ДатаРождения) КОНЕЦ КАК ВозрастНаКонецГода,	
	|	ВЫБОР КОГДА ГОД(" + ПолноеИмяПоляФизЛицо +".ДатаРождения) <> 1 ТОГДА ГОД(" + ПолноеИмяПоляФизЛицо +".ДатаРождения) ИНАЧЕ 0 КОНЕЦ КАК ГодРождения,
	|	ВЫБОР КОГДА ГОД(" + ПолноеИмяПоляФизЛицо +".ДатаРождения) <> 1 ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаАктуальности, ГОД), МЕСЯЦ, МЕСЯЦ(" + ПолноеИмяПоляФизЛицо +".ДатаРождения) - 1) ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1) КОНЕЦ КАК МесяцРождения,";
	
	ТекстСоединения = "
	|		// ФИО физлиц
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаАктуальности) КАК ФИОФизЛиц
	|		ПО " + ПолноеИмяПоляФизЛицо + " = ФИОФизЛиц.ФизЛицо}
	|
	|		// ФИО при присвоении СИК
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛицПриПрисвоенииСИК КАК ФИОФизЛицПриПрисвоенииСИК
	|		ПО " + ПолноеИмяПоляФизЛицо + " = ФИОФизЛицПриПрисвоенииСИК.ФизЛицо}
	|";
	
	// данные из табличных частей физлица
	Для Каждого ОписаниеТЧФизЛица Из МетаданныеФизЛица.ТабличныеЧасти Цикл
		ИмяТЧ 		= ОписаниеТЧФизЛица.Имя;
		
		Если ИмяТЧ = "Стажи" Тогда
			// Стажи обрабатываем отдельно
			Продолжить;
		КонецЕсли;
		
		СинонимТЧ   = ОписаниеТЧФизЛица.Синоним;
		Для каждого ОписаниеРеквизита Из ОписаниеТЧФизЛица.Реквизиты Цикл
			
			ОписаниеТипаРеквизита 	= ОписаниеРеквизита.Тип;
			ИмяРеквизита 			= ОписаниеРеквизита.Имя;
			ТекстОписаниеПолей = ТекстОписаниеПолей + "
			|	" + ИмяТЧ + "ФизЛица." + ИмяРеквизита + ?(НЕ ОбщегоНазначения.СодержитТолькоПримитивныеТипы(ОписаниеТипаРеквизита), ".*", "") + " КАК " + ИмяТЧ + ИмяРеквизита + ",";
			СтруктураПредставлениеПолей.Вставить(ИмяТЧ + ИмяРеквизита, СинонимТЧ + ": " + ОписаниеРеквизита.Синоним);
			
			Если ОписаниеТипаРеквизита.СодержитТип(ТипДата) Тогда
				Если ОписаниеТипаРеквизита.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
					СтруктураФорматаПолей.Вставить(ИмяТЧ + ИмяРеквизита, "ДФ=dd.MM.yyyy");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ТекстСоединения = ТекстСоединения + "
		|		{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица." + ИмяТЧ + " КАК " + ИмяТЧ + "ФизЛица
		|		ПО " + ПолноеИмяПоляФизЛицо + " = " + ИмяТЧ + "ФизЛица.Ссылка}";
	КонецЦикла; 
	
	// данные из регистров сведений о физлице
	СтруктураРегистров = Новый Структура;
	СтруктураРегистров.Вставить("ГражданствоФизЛиц", "ФизЛицо");
	СтруктураРегистров.Вставить("ИПННалоговыеВычетыФизлиц", "ФизЛицо");
	СтруктураРегистров.Вставить("ИПНПлановыеНалоговыеВычетыФизлиц", "ФизЛицо");
	СтруктураРегистров.Вставить("ИПНПрименениеВычетов", "ФизЛицо");
	СтруктураРегистров.Вставить("КартСчетаФизЛиц", "ФизЛицо");
	СтруктураРегистров.Вставить("ПаспортныеДанныеФизЛиц", "ФизЛицо");	
	СтруктураРегистров.Вставить("СведенияОбИнвалидностиФизлиц", "ФизЛицо");
	СтруктураРегистров.Вставить("СведенияОПенсионномОбеспеченииФизЛиц", "ФизЛицо");
	СтруктураРегистров.Вставить("СведенияОФизлицахУчастникахВОВ", "ФизЛицо");
	СтруктураРегистров.Вставить("ВоинскийУчет", "ФизЛицо");
	СтруктураРегистров.Вставить("СемейноеПоложениеФизЛиц", "ФизЛицо");	
	СтруктураРегистров.Вставить("Заметки", "Объект");	
	
	Для каждого КлючИЗначение Из СтруктураРегистров Цикл
	
		ИмяРегистра = КлючИЗначение.Ключ;
		ИмяПоляФизЛицо = КлючИЗначение.Значение;
	
		МетаданныеРегистра = Метаданные.РегистрыСведений.Найти(ИмяРегистра);
		Если МетаданныеРегистра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПравоДоступа("Чтение", МетаданныеРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		СинонимРегистра = МетаданныеРегистра.Синоним;
		
		// Измерения
		Для каждого ОписаниеИзмерения Из МетаданныеРегистра.Измерения Цикл
			Если НЕ ОписаниеИзмерения.Тип.СодержитТип(ТипФизическиеЛица) Тогда
				ОписаниеТипаИзмерения 	= ОписаниеИзмерения.Тип;
				ИмяИзмерения 			= ОписаниеИзмерения.Имя;
				ТекстОписаниеПолей = ТекстОписаниеПолей + "
				|	" + ИмяРегистра + "." + ИмяИзмерения + ?(НЕ ОбщегоНазначения.СодержитТолькоПримитивныеТипы(ОписаниеТипаИзмерения), ".*", "") + " КАК " + ИмяРегистра + ИмяИзмерения + ",";
				СтруктураПредставлениеПолей.Вставить(ИмяРегистра + ИмяИзмерения, СинонимРегистра + ": " + ОписаниеИзмерения.Синоним);
				
				Если ОписаниеТипаИзмерения.СодержитТип(ТипДата) Тогда
					Если ОписаниеТипаИзмерения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
						СтруктураФорматаПолей.Вставить(ИмяРегистра + ИмяИзмерения, "ДФ=dd.MM.yyyy");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Ресурсы
		Для Каждого ОписаниеРесурса Из МетаданныеРегистра.Ресурсы Цикл
			ОписаниеТипаРесурса 	= ОписаниеРесурса.Тип;
			ИмяРесурса 				= ОписаниеРесурса.Имя;
			ТекстОписаниеПолей = ТекстОписаниеПолей + "
			|	" + ИмяРегистра + "." + ИмяРесурса + ?(НЕ ОбщегоНазначения.СодержитТолькоПримитивныеТипы(ОписаниеТипаРесурса), ".*", "") + " КАК " + ИмяРегистра + ИмяРесурса + ",";
			СтруктураПредставлениеПолей.Вставить(ИмяРегистра + ИмяРесурса, СинонимРегистра + ": " + ОписаниеРесурса.Синоним);
			
			Если ОписаниеТипаРесурса.СодержитТип(ТипДата) Тогда
				Если ОписаниеТипаРесурса.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
					СтруктураФорматаПолей.Вставить(ИмяРегистра + ИмяРесурса, "ДФ=dd.MM.yyyy");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТекстСоединения = ТекстСоединения + "
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистра + ?(МетаданныеРегистра.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический,"",".СрезПоследних(&ДатаАктуальности)") + " КАК " + ИмяРегистра + "
		|		ПО " + ПолноеИмяПоляФизЛицо + " = " + ИмяРегистра + "." + ИмяПоляФизЛицо + "}";
		
	КонецЦикла;

	// Прочие источники данных
	ТекстОписаниеПолей = ТекстОписаниеПолей + "
	|	// Стажи
	|	Стажи.ВидСтажа.* КАК СтажиВидСтажа,
	|	Стажи.ДатаОтсчета КАК СтажиДатаОтсчета,
	|	" + ПроведениеРасчетов.СформироватьТекстЗапросаОСтаже("Стажи", "&ДатаАктуальности", "ДатаОтсчета", "РазмерМесяцев", "РазмерДней", "Стажи") + ",";
	
	ТекстСоединения = ТекстСоединения + "
	|		// стажи
	|		{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.Стажи КАК Стажи
	|		ПО " + ПолноеИмяПоляФизЛицо + " = Стажи.Ссылка}
	|";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДАННЫЕ О ФИЗЛИЦЕ: ПОЛЯ", Лев(ТекстОписаниеПолей,СтрДлина(ТекстОписаниеПолей)-1));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДАННЫЕ О ФИЗЛИЦЕ: СОЕДИНЕНИЯ", ТекстСоединения);
	
	// ПРЕДСТАВЛЕНИЕ ПОЛЕЙ
	
	//данные физлица
	СтруктураПредставлениеПолей.Вставить("ФиоПолное", "ФИО (полностью)");
	СтруктураПредставлениеПолей.Вставить("ФиоКраткое", "Фамилия И. О. ");
	СтруктураПредставлениеПолей.Вставить("ФиоПриПрисвоенииСИК", "ФИО при присвоении СИК");
	СтруктураПредставлениеПолей.Вставить("ВозрастНаКонецГода", "Возраст на конец года");
	СтруктураПредставлениеПолей.Вставить("ГодРождения", "Год рождения");
	СтруктураПредставлениеПолей.Вставить("МесяцРождения", "Месяц рождения");
	// Стажи
	СтруктураПредставлениеПолей.Вставить("СтажиВидСтажа", "Стажи: вид стажа");
	СтруктураПредставлениеПолей.Вставить("СтажиДатаОтсчета", "Стажи: дата отсчета");
	СтруктураПредставлениеПолей.Вставить("СтажиРазмерЛет", "Стажи: лет стажа");
	СтруктураПредставлениеПолей.Вставить("СтажиРазмерМесяцев", "Стажи: месяцев стажа");
	СтруктураПредставлениеПолей.Вставить("СтажиРазмерДней", "Стажи: дней стажа");
	
	// ФОРМАТ ПОЛЕЙ
	СтруктураФорматаПолей.Вставить("СтажиДатаОтсчета", "ДФ=dd.MM.yyyy");
	СтруктураФорматаПолей.Вставить("ГодРождения", "ЧГ=0");
	СтруктураФорматаПолей.Вставить("МесяцРождения", "ДФ=ММММ");
	
КонецПроцедуры // ДобавитьВТекстПостроителяДанныеОФизлице()

Функция ПолучитьПсевдонимыПолей(Знач ТекстПоляСвойств, ИсточникЗапроса="") 
	
	ТекстПоляСвойств=ТекстПоляСвойств+",";
	ТекстПсевдонимыСвойств = "";
	
	Пока Найти(ТекстПоляСвойств, "КАК")>0 Цикл
		
		// Псевдоним поля свойства находится между КАК и ,
		ПсевдонимПоляСвойства = Сред(ТекстПоляСвойств, Найти(ТекстПоляСвойств, "КАК")+4);
		
		ПсевдонимПоляСвойства = Лев(ПсевдонимПоляСвойства, Найти(ПсевдонимПоляСвойства, ",")-1);
		
		ТекстПсевдонимыСвойств = ТекстПсевдонимыСвойств + ", " + ?(Не ПустаяСтрока(ИсточникЗапроса), ИсточникЗапроса + ".", "") + ПсевдонимПоляСвойства;
		
		ТекстПоляСвойств = Сред(ТекстПоляСвойств, Найти(ТекстПоляСвойств, "КАК") + СтрДлина(ПсевдонимПоляСвойства)+2)
		
	КонецЦикла;
	
	Возврат ТекстПсевдонимыСвойств;
	
КонецФункции // ПолучитьПсевдонимыПолей()

// форматируем числа интервалов для формирования строк запроса
//
// Параметры:
//	Значение       - форматируемое число
//
// Возвращаемое значение:
//	строка - отформатированная число
//
Функция ЗнчВТекстЗапроса(Значение) 
	
	Если ТипЗнч(Значение)=Тип("Число") Тогда
		Результат = Формат(Значение,"ЧГ=0;ЧРД=.;ЧН=");
	ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
		Результат = """"+Значение+"""";
	ИначеЕсли ТипЗнч(Значение)=Тип("Дата") Тогда
		Результат = "ДатаВремя("
		+ЗнчВТекстЗапроса(Год(Значение))+","
		+ЗнчВТекстЗапроса(Месяц(Значение))+","
		+ЗнчВТекстЗапроса(День(Значение))+","
		+ЗнчВТекстЗапроса(Час(Значение))+","
		+ЗнчВТекстЗапроса(Минута(Значение))+","
		+ЗнчВТекстЗапроса(Секунда(Значение))+")";
	Иначе
		Результат="0";
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // ЗнчВТекстЗапроса()	 

Функция ПолеСИнтервалами(ТаблицаИнтервалов, СтруктураПараметры, СоответствиеТиповИнтервальныхПолей, ПолеИнтервала, ИсходноеПоле, ТипИсходногоПоля, СтрокаФорматирования="") Экспорт 
	
	ТекстПоляВыбора = "ВЫБОР ";
	Если ТипИсходногоПоля=Тип("Строка") Тогда
		ПрежняяГраница = Символ(0);
	ИначеЕсли ТипИсходногоПоля=Тип("Дата") Тогда
		ПрежняяГраница = '00010101000000';
	Иначе 
		ПрежняяГраница = 0;
	КонецЕсли;
	
	Для Каждого СтрокаИнтервал Из ТаблицаИнтервалов Цикл
		
		Если СтрокаИнтервал.ИнтервальноеПоле=ПолеИнтервала Тогда
			
			ТекстПоляВыбора = ТекстПоляВыбора + Символы.ПС+" КОГДА "+ ИсходноеПоле + ">="+ ЗнчВТекстЗапроса(ПрежняяГраница) + " И "+ ИсходноеПоле + "<="+ ЗнчВТекстЗапроса(СтрокаИнтервал.ВГраница) + " ТОГДА &Интервал"+ПолеИнтервала+ЗнчВТекстЗапроса(СтрокаИнтервал.НомерСтроки);
			
			СтруктураПараметры.Вставить("Интервал"+ПолеИнтервала+ЗнчВТекстЗапроса(СтрокаИнтервал.НомерСтроки), Нстр("ru="""+СтрокаИнтервал.Название+""""));
			ПрежняяГраница = СтрокаИнтервал.ВГраница;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если Найти(ТекстПоляВыбора, "КОГДА")>0 Тогда
		ТекстПоляВыбора = ТекстПоляВыбора + Символы.ПС+" ИНАЧЕ &Интервал"+ПолеИнтервала+"Прочие";
		ТекстПоляВыбора = ТекстПоляВыбора + Символы.ПС+" КОНЕЦ КАК "+ПолеИнтервала;
	Иначе
		ТекстПоляВыбора = " &Интервал"+ПолеИнтервала+"Прочие КАК "+ПолеИнтервала;
	КонецЕсли;
	
	СтруктураПараметры.Вставить("Интервал"+ПолеИнтервала+"Прочие", Нстр("ru=Остальные"));
	
	СоответствиеТиповИнтервальныхПолей.Вставить(ПолеИнтервала, ТипИсходногоПоля);
	
	Возврат ТекстПоляВыбора;
	
КонецФункции // ПолеСИнтервалами()

Процедура ДобавитьВТекстПостроителяИнтервальныеГруппировкиФизлиц(ТекстЗапроса, ТаблицаИнтервалов, СтруктураПараметры, СоответствиеТиповИнтервальныхПолей,СтруктураПредставлениеПолей,
											ИмяПоляФизЛицо = "Работники.ФизЛицо",  
	                                        ЗаменятьПоля = "//ДОПОЛНИТЕЛЬНЫЕ ПОЛЯ", 
	                                        ЗаменятьПсевдонимы = "//ДОПОЛНИТЕЛЬНЫЕ ПСЕВДОНИМЫ ПОЛЕЙ") Экспорт 

	ПолеВозраст = "(ВЫБОР КОГДА ГОД(" + ИмяПоляФизЛицо + ".ДатаРождения) = 1 ТОГДА 0 ИНАЧЕ &ДатаАктуальности_Год - ГОД(" + ИмяПоляФизЛицо + ".ДатаРождения) + ВЫБОР КОГДА (Месяц(" + ИмяПоляФизЛицо + ".ДатаРождения)*100+День(" + ИмяПоляФизЛицо + ".ДатаРождения)) > (&ДатаАктуальности_Месяц*100+&ДатаАктуальности_День) ТОГДА -1 ИНАЧЕ 0 КОНЕЦ КОНЕЦ)";
	СтруктураПредставлениеПолей.Вставить("ВозрастИН", "Возраст (интервалы)");
	
	// Начало ФИО
	ПолеФИО="(ВЫБОР КОГДА (ФИОФизЛиц.Фамилия) ЕСТЬ NULL  ТОГДА " + ИмяПоляФизЛицо + ".Наименование ИНАЧЕ ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество КОНЕЦ)";
	СтруктураПредставлениеПолей.Вставить("ФиоПолноеИН", "Начало ФИО (интервалы)");
	
	ТекстПолеСИнтервалами =	  "," + ПолеСИнтервалами(ТаблицаИнтервалов,СтруктураПараметры, СоответствиеТиповИнтервальныхПолей,"ВозрастИН", ПолеВозраст, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3,0)) + Символы.ПС + Символы.Таб
							+ "," + ПолеСИнтервалами(ТаблицаИнтервалов,СтруктураПараметры, СоответствиеТиповИнтервальныхПолей,"ФиоПолноеИН", ПолеФИО, ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3)) + Символы.ПС;
	
	// Добавляем в текст запроса
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса, ЗаменятьПоля, ТекстПолеСИнтервалами);
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса, ЗаменятьПсевдонимы, ПолучитьПсевдонимыПолей(ТекстПолеСИнтервалами) + Символы.ПС);
	
КонецПроцедуры // ДобавитьВТекстПостроителяИнтервальныеГруппировкиФизлиц()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ОТПУСКАМИ ОРГАНИЗАЦИЙ

// Возвращает даты начала и окончания рабочего года для работника
// Параметры:
//	Организация - СправочникСсылка.Организация
//	ФизЛицо - СправочникСсылка.ФизическиеЛица
//	Приказ - ДокументСсылка.ПриемНаРаботуВОрганизацию
//	РабочийГодС - на входе исходная дата, от для которой получить рабочий год, на выходе - начало соответствующего рабочего года
//	РабочийГодПо - на выходе дата окончания рабочего года 
//
Процедура ПолучитьДатыРабочегоГода(Организация, Сотрудник, РабочийГодС, РабочийГодПо) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ДатаАктуальности", ?(ЗначениеЗаполнено(РабочийГодС), РабочийГодС, ?(ЗначениеЗаполнено(РабочийГодПо), РабочийГодПо, ОбщегоНазначения.ПолучитьРабочуюДату())));
	Запрос.УстановитьПараметр("Прием", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Период
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				КОНЕЦПЕРИОДА(&ДатаАктуальности, ГОД),
	|				Организация = &ГоловнаяОрганизация
	|				И Сотрудник = &Сотрудник
	|				И ПричинаИзмененияСостояния = &Прием) КАК РаботникиОрганизации
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаПриема = Выборка.Период;
		ДеньПриема = День(ДатаПриема);
		МесяцПриема = Месяц(ДатаПриема);
		
		мДлинаСуток = 86400;
		
		РабочийГодС = ДобавитьМесяц(НачалоГода(РабочийГодС), МесяцПриема - 1) + мДлинаСуток * (ДеньПриема - 1);
		
		Если МесяцПриема = 2 И День(РабочийГодС) = 29 Тогда // обработаем 28/29 дней февраля
			РабочийГодПо = НачалоДня(КонецМесяца(Дата(Год(РабочийГодС) + 1, 2, 1)));
		Иначе
			РабочийГодПо = ДобавитьМесяц(РабочийГодС, 12) - 86400;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПолучитьДатыРабочегоГода()

// Возвращает текст на языке запросов для получения конца рабочего года 
// используется для корректного учета 28/29 дней февраля
//
// Параметры:
//	ТекстНачалоРабочегоГода - строка с выражением, возвращающим начала рабочего года, для которого найти конец
//
Функция СформироватьТекстЗапросаКонецРабочегоГода(ТекстНачалоРабочегоГода) Экспорт

	ПолеКонецРабочегоГода = "ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(" + ТекстНачалоРабочегоГода + ", МЕСЯЦ, 12), ДЕНЬ, -1)";

	Возврат "ВЫБОР
			|	КОГДА МЕСЯЦ(" + ТекстНачалоРабочегоГода + ") = 2 И ДЕНЬ(" + ТекстНачалоРабочегоГода + ") = 29
			|		ТОГДА НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(" + ТекстНачалоРабочегоГода + ", МЕСЯЦ), МЕСЯЦ, 12), МЕСЯЦ), ДЕНЬ)
			//|	КОГДА МЕСЯЦ(" + ПолеКонецРабочегоГода + ") = 2 И ДЕНЬ(" + ПолеКонецРабочегоГода + ") = 29 
			//|		ТОГДА ДОБАВИТЬКДАТЕ(" + ПолеКонецРабочегоГода + ", ДЕНЬ, -1)
			|	ИНАЧЕ " + ПолеКонецРабочегоГода + "
			|КОНЕЦ";

КонецФункции // СформироватьТекстЗапросаКонецРабочегоГода

// Функция возвращает текст пакетного запроса, которая формирует временную таблицу "ВТ_ПредоставляемыеОтпуска". 
// При использовании данной функции следует применять имя возвращаемой временной таблицы "ВТ_ПредоставляемыеОтпуска".
//
// Параметры:
//	ДанныеРасчетаТекст - строка, содержащая текст пакетного запроса с временной таблицей "ВТ_ДанныеРасчета" для определения работников, для которых осуществляется расчет
//						Поля запроса:
//                      	Организация 		- головная организация, где работает сотрудник
//							Сотрудник			- сотрудник организации
//							Приказ 				- приказ о приеме на работу
//							ДатаРасчета		 	- дата, по состоянию на которую производится расчет
//						В выборке должны быть только РАЗЛИЧНЫЕ строки.
//
//	ПараметрыЗапроса - структура, содержащая параметры запроса, после завершения процедуры будет дозаполнена 
//						параметрами, используемые в сгенерированном тексте запроса
//
// Возвращаемое значение:
//	строка - текст на языке запросов, содержащий поля:
//		Организация 		- головная организация
//		ФизЛицо 			- работник
//		Сотрудник			- сотрудник организации
//		ДатаРасчета			- дата, по состоянию на которую осуществляет расчет
//		ДатаПриема			- дата приема на работу, соответствующая Приказу
//		ДатаУвольнения		- дата увольнения, соответствующая Приказу, если на ДатуРасчета не уволен, то пустая дата
//		ДатаГраницыРасчета  = Мин(ДатаРасчета, РабочийГодПо, ДатаУвольнения)
//		ВидТрудовогоОтпуска - вид трудового отпуска из справочника ВидыТрудовыхОтпусков
//		РабочийГодС			- дата начала рабочего года, за который предоставляется отпуск (день и месяц соответствует дню и месяцу приема)
//		РабочийГодПо		- дата оконания рабочего года, за который предоставляется отпуск (на день меньше, чем день приема)
//		ПериодДействияНачало - дата начала действия периода предоставления отпуска в рабочем году (РабочийГодС - РабочийГодПо)
//		ПериодДействияКонец - дата окончания действия периода предоставления отпуска в рабочем году (РабочийГодС - РабочийГодПо)
//		РазмерОтпуска 		- число предоставляемых дней отпуска за полный рабочий год (исходный размер)
//		ДнейВРабочемГоду	- число календарных дней в рабочем году (РабочийГодС - РабочийГодПо) по регл. производственному календарю
//		ДнейВПериодеДействияОтпуска - число календарных дней в периоде действия отпуска в рабочем году (ПериодДействияНачало - ПериодДействияКонец)
//		ДнейИсключаемыхИзСтажа - число календарных дней в периоде действия отпуска в рабочем году, которые не входят в стаж для отпуска
//		Результат			 - число дней отпуска, которые надо предоставить (с дробной часть), если надо целое число дней
//							 	по надо сгруппировать по рабочему году и округлять суммированный результат до целых
//							
//
Функция СформироватьТекстЗапросаПредоставляемыеОтпуска(Знач ДанныеРасчетаТекст, ПараметрыЗапроса) Экспорт

	Запрос = Новый Запрос;
	
	// дополнительные параметры
	Если ТипЗнч(ПараметрыЗапроса) <> Тип("Структура") Тогда
		ПараметрыЗапроса = Новый Структура;
	КонецЕсли;

	ПараметрыЗапроса.Вставить("парамПрием", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	ПараметрыЗапроса.Вставить("парамУвольнение", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	ПараметрыЗапроса.Вставить("парамПустаяДата", '00010101');
	ПараметрыЗапроса.Вставить("парамМаксДата", '29991231');
	ПараметрыЗапроса.Вставить("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	ПараметрыЗапроса.Вставить("парамПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	ПараметрыЗапроса.Вставить("парамПустаяДолжность", Справочники.ДолжностиОрганизаций.ПустаяСсылка());
	ПараметрыЗапроса.Вставить("парамПустоеФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	ПараметрыЗапроса.Вставить("парамПрекратить", Перечисления.ВидыДействияСНачислением.Прекратить);
	ПараметрыЗапроса.Вставить("парамПустойВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.ПустаяСсылка());
	ПараметрыЗапроса.Вставить("парамВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	ПараметрыЗапроса.Вставить("парамПраздник", Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);

	// установим параметры запроса
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;

	// Список различных физлиц
	СписокФизЛицТекст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СписокФизЛицПриказов.Сотрудник
	|ПОМЕСТИТЬ ВТ_СписокФизЛиц
	|ИЗ
	|	ВТ_ДанныеРасчета КАК СписокФизЛицПриказов
	|";
	
	// Список организаций и подразделений, в которых работали переданные сотрудники
	Запрос.Текст = "
	|" + ДанныеРасчетаТекст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.ПодразделениеОрганизации
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеРасчета КАК ДанныеРасчета
	|		ПО РаботникиОрганизации.Сотрудник = ДанныеРасчета.Сотрудник
	|			И РаботникиОрганизации.Организация = ДанныеРасчета.Организация
	|			И РаботникиОрганизации.Период <= ДанныеРасчета.ДатаРасчета
	|
	|ИТОГИ ПО РаботникиОрганизации.Организация
	|";
	     
	МассивОрганизаций = Новый Массив();
	МассивПодразделений = Новый Массив();
	
	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизаций.Следующий() Цикл
		МассивОрганизаций.Добавить(ВыборкаОрганизаций.Организация);
		ВыборкаПодразделений = ВыборкаОрганизаций.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока ВыборкаПодразделений.Следующий() Цикл
			МассивПодразделений.Добавить(ВыборкаПодразделений.ПодразделениеОрганизации);
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыЗапроса.Вставить("парамСписокОрганизаций", МассивОрганизаций);
	
	Если МассивПодразделений.Количество() < 10 Тогда
		УсловиеПоПодразделениям = "&парамСписокПодразделений";
		ПараметрыЗапроса.Вставить("парамСписокПодразделений", МассивПодразделений);
	Иначе
		УсловиеПоПодразделениям = "ВЫБРАТЬ РАЗЛИЧНЫЕ 
									|	РаботникиОрганизации.ПодразделениеОрганизации
									|ИЗ
									|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
									|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеРасчета КАК ДанныеРасчета
									|		ПО РаботникиОрганизации.Сотрудник = ДанныеРасчета.Сотрудник
									|			И РаботникиОрганизации.Организация = ДанныеРасчета.Организация
									|			И РаботникиОрганизации.Период <= ДанныеРасчета.ДатаРасчета";
	КонецЕсли;
	
	// Периоды работы сотрудников в организации	
	ПериодыРаботыТекст = "
	|" + ДанныеРасчетаТекст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеРасчета.Организация,
	|	ДанныеРасчета.Сотрудник,
	|	ДанныеРасчета.ДатаРасчета,
	|	РаботникиОрганизации.Сотрудник.ВидЗанятости,
	|	МАКСИМУМ(ВЫБОР 
	|				КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамПрием 
	|					ТОГДА РаботникиОрганизации.Период
	|				ИНАЧЕ &парамПустаяДата
	|			КОНЕЦ) КАК ДатаПриема,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ВЫБОР
	|						КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУвольнение 
	|							ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
	|						ИНАЧЕ &парамПустаяДата
	|					   КОНЕЦ) > МАКСИМУМ(ВЫБОР 
	|											КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамПрием 
	|												ТОГДА РаботникиОрганизации.Период
	|											ИНАЧЕ &парамПустаяДата
	|										КОНЕЦ)
	|			ТОГДА МАКСИМУМ(ВЫБОР
	|							КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУвольнение 
	|								ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
	|							ИНАЧЕ &парамПустаяДата
	|					   	   КОНЕЦ)
	|			ИНАЧЕ &парамМаксДата
	|		КОНЕЦ КАК ДатаУвольнения
	|ПОМЕСТИТЬ ВТ_ПериодыРаботы
	|ИЗ
	|	ВТ_ДанныеРасчета КАК ДанныеРасчета
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО ДанныеРасчета.Сотрудник = РаботникиОрганизации.Сотрудник
	|			И ДанныеРасчета.Организация = РаботникиОрганизации.Организация
	|			И (РаботникиОрганизации.ПричинаИзмененияСостояния В (&парамПрием, &парамУвольнение))
	|
	|ГДЕ
	|	РаботникиОрганизации.Период <= ДанныеРасчета.ДатаРасчета
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРасчета.Организация,
	|	ДанныеРасчета.Сотрудник,
	|	ДанныеРасчета.ДатаРасчета,
	|	РаботникиОрганизации.Сотрудник.ВидЗанятости
	|";
	
	// Самая ранняя дата приема и самая поздняя дата расчета среди физлиц по списку
	// при этом берем не раньше, чем первая дата предоставляемого отпуска.
	Запрос.Текст = "
	|" + ПериодыРаботыТекст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА МИНИМУМ(НАЧАЛОПЕРИОДА(ПериодыРаботы.ДатаПриема, ГОД)) < МИНИМУМ(ДатаНачалаПредоставленияОтпусков.Период)
	|			ТОГДА МИНИМУМ(ДатаНачалаПредоставленияОтпусков.Период)
	|		ИНАЧЕ МИНИМУМ(НАЧАЛОПЕРИОДА(ПериодыРаботы.ДатаПриема, ГОД))
	|	КОНЕЦ КАК ПерваяДата,
	|	МАКСИМУМ(КОНЕЦПЕРИОДА(ПериодыРаботы.ДатаРасчета, ГОД)) КАК ПоследняяДата
	|
	|ИЗ
	|	ВТ_ПериодыРаботы КАК ПериодыРаботы
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							МИНИМУМ(НАЧАЛОПЕРИОДА(ПредоставляемыеОтпуска.Период, ГОД)) КАК Период
	|						ИЗ
	|							РегистрСведений.ПредоставляемыеОтпускаОрганизаций КАК ПредоставляемыеОтпуска) КАК ДатаНачалаПредоставленияОтпусков
	|		ПО ИСТИНА
	|";
	
	// составим текст запроса для получения всех интересуемых анализируемых календарных годов
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПериодыТекст = "";
	
	Если Выборка.Следующий() 
			И ЗначениеЗаполнено(Выборка.ПерваяДата)
			И ЗначениеЗаполнено(Выборка.ПоследняяДата) Тогда
		ДатаНач = НачалоГода(Выборка.ПерваяДата-1);
		ДатаКон = КонецГода(Выборка.ПоследняяДата);
	Иначе
		ДатаНач = НачалоГода(ОбщегоНазначения.ПолучитьРабочуюДату());
		ДатаКон = КонецГода(ОбщегоНазначения.ПолучитьРабочуюДату());
	КонецЕсли;

	ПараметрыЗапроса.Вставить("парамНачалоРасчета", ДатаНач);
	ПараметрыЗапроса.Вставить("парамКонецРасчета", ДатаКон);
		
	Пока ДатаНач <= ДатаКон Цикл
			
		Если ПериодыТекст <> "" Тогда
			ПериодыТекст = ПериодыТекст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		ПериодыТекст = ПериодыТекст + "
		|ВЫБРАТЬ "+?(ПустаяСтрока(ПериодыТекст), "РАЗРЕШЕННЫЕ", "")+"
		|	ДАТАВРЕМЯ(" + Формат(ДатаНач, "ДФ='гггг,ММ,дд'") + ") КАК Период,
		|	ДАТАВРЕМЯ(" + Формат(КонецГода(ДатаНач), "ДФ='гггг,ММ,дд'") + ") КАК КонПериода
		|"+?(ПустаяСтрока(ПериодыТекст), "ПОМЕСТИТЬ ВТ_Периоды", "")+"
		|";
			
		ДатаНач = ДобавитьМесяц(ДатаНач, 12);
			
	КонецЦикла;

	// для каждого работника определим все прошедшие с даты приема до даты увольнения рабочие года
	ПолеРабочийГодС = "ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Периоды.Период, МЕСЯЦ, МЕСЯЦ(Работники.ДатаПриема) - 1), ДЕНЬ, ДЕНЬ(Работники.ДатаПриема) - 1)";
	
	ПолеРабочийГодПо = ПроцедурыУправленияПерсоналом.СформироватьТекстЗапросаКонецРабочегоГода(ПолеРабочийГодС);
	
	ПериодыРаботыТекст = "
	|" + ПериодыРаботыТекст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|" + ПериодыТекст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Работники.Организация,
	|	Работники.Сотрудник,
	|	Работники.ДатаРасчета,
	|	Работники.Сотрудник.ВидЗанятости,
	|	Работники.ДатаПриема,
	|	Работники.ДатаУвольнения,
	|	" + ПолеРабочийГодС + " КАК РабочийГодС,
	|	" + ПолеРабочийГодПо + " КАК РабочийГодПо,
	|	ВЫБОР 
	|		КОГДА Работники.ДатаРасчета < Работники.ДатаУвольнения
	|			ТОГДА ВЫБОР
	|					КОГДА Работники.ДатаРасчета < " + ПолеРабочийГодПо + " 
	|						ТОГДА Работники.ДатаРасчета
	|					ИНАЧЕ " + ПолеРабочийГодПо + "
	|				  КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Работники.ДатаУвольнения < " + ПолеРабочийГодПо + "
	|					ТОГДА Работники.ДатаУвольнения
	|				ИНАЧЕ " + ПолеРабочийГодПо + "
	|			  КОНЕЦ
	|	КОНЕЦ КАК ДатаГраницыРасчета
	|ПОМЕСТИТЬ ВТ_ПериодыРаботы_1
	|ИЗ
	|	ВТ_ПериодыРаботы КАК Работники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Периоды КАК Периоды
	|		ПО Работники.ДатаПриема <= Периоды.КонПериода 
	|			И Работники.ДатаУвольнения >= Периоды.Период
	|			И Работники.ДатаУвольнения >= " + ПолеРабочийГодС + "
	|			И " + ПолеРабочийГодС + " <= Работники.ДатаРасчета
	|";
	
	// определим предоставляемые отпуска
	ПредоставляемыеОтпускаТекст = "
	|" + СписокФизЛицТекст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&парамНачалоРасчета КАК Период,
	|	ПредоставляемыеОтпуска.Организация,
	|	ПредоставляемыеОтпуска.ПодразделениеОрганизации,
	|	ПредоставляемыеОтпуска.Должность,
	|	ПредоставляемыеОтпуска.ФизЛицо,
	|	ПредоставляемыеОтпуска.ВидТрудовогоОтпуска,
	|	ПредоставляемыеОтпуска.РазмерОтпуска,
	|	ПредоставляемыеОтпуска.Действие
	|ПОМЕСТИТЬ ВТ_ПредоставляемыеОтпуска_1
	|ИЗ
	|	РегистрСведений.ПредоставляемыеОтпускаОрганизаций.СрезПоследних(&парамНачалоРасчета,
	|				(Организация = &парамПустаяОрганизация ИЛИ Организация В (&парамСписокОрганизаций))
	|				И (ПодразделениеОрганизации = &парамПустоеПодразделение ИЛИ ПодразделениеОрганизации В (" + УсловиеПоПодразделениям + "))
	|				И (ФизЛицо = &парамПустоеФизЛицо ИЛИ ФизЛицо В (ВЫБРАТЬ СписокФизЛиц.Сотрудник.ФизЛицо ИЗ ВТ_СписокФизЛиц КАК СписокФизЛиц))) КАК ПредоставляемыеОтпуска
	|ГДЕ
	|	ПредоставляемыеОтпуска.Действие <> &парамПрекратить
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПредоставляемыеОтпуска.Период КАК Период,
	|	ПредоставляемыеОтпуска.Организация,
	|	ПредоставляемыеОтпуска.ПодразделениеОрганизации,
	|	ПредоставляемыеОтпуска.Должность,
	|	ПредоставляемыеОтпуска.ФизЛицо,
	|	ПредоставляемыеОтпуска.ВидТрудовогоОтпуска,
	|	ПредоставляемыеОтпуска.РазмерОтпуска,
	|	ПредоставляемыеОтпуска.Действие
	|ИЗ
	|	РегистрСведений.ПредоставляемыеОтпускаОрганизаций КАК ПредоставляемыеОтпуска
	|ГДЕ
	|	ПредоставляемыеОтпуска.Период > &парамНачалоРасчета
	|	И ПредоставляемыеОтпуска.Период <= &парамКонецРасчета
	|	И ((Организация = &парамПустаяОрганизация ИЛИ Организация В (&парамСписокОрганизаций))
	|			И (ПодразделениеОрганизации = &парамПустоеПодразделение ИЛИ ПодразделениеОрганизации В (" + УсловиеПоПодразделениям + "))
	|			И (ФизЛицо = &парамПустоеФизЛицо ИЛИ ФизЛицо В (ВЫБРАТЬ СписокФизЛиц.Сотрудник.ФизЛицо ИЗ ВТ_СписокФизЛиц КАК СписокФизЛиц)))
	|";                                                           

	// периоды действия предоставляемых отпусков
	ПериодыДействияПредоставляемыхОтпусковТекст = "
	|" + ПредоставляемыеОтпускаТекст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПредоставляемыеОтпуска.Период КАК ПериодДействияНачало,
	|	МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ПредоставляемыеОтпуска2.Период, ДЕНЬ, -1), &парамМаксДата)) КАК ПериодДействияКонец,
	|	ПредоставляемыеОтпуска.Организация,
	|	ПредоставляемыеОтпуска.ПодразделениеОрганизации,
	|	ПредоставляемыеОтпуска.Должность,
	|	ПредоставляемыеОтпуска.ФизЛицо,
	|	ПредоставляемыеОтпуска.ВидТрудовогоОтпуска,
	|	ПредоставляемыеОтпуска.РазмерОтпуска
	|ПОМЕСТИТЬ ВТ_ПериодыДействияПредоставляемыхОтпусков
	|ИЗ
	|	ВТ_ПредоставляемыеОтпуска_1 КАК ПредоставляемыеОтпуска
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредоставляемыеОтпускаОрганизаций КАК ПредоставляемыеОтпуска2
	|		ПО ПредоставляемыеОтпуска.Организация = ПредоставляемыеОтпуска2.Организация
	|			И ПредоставляемыеОтпуска.ПодразделениеОрганизации = ПредоставляемыеОтпуска2.ПодразделениеОрганизации
	|			И ПредоставляемыеОтпуска.Должность = ПредоставляемыеОтпуска2.Должность
	|			И ПредоставляемыеОтпуска.ФизЛицо = ПредоставляемыеОтпуска2.ФизЛицо
	|			И ПредоставляемыеОтпуска.ВидТрудовогоОтпуска = ПредоставляемыеОтпуска2.ВидТрудовогоОтпуска
	|			И ПредоставляемыеОтпуска.Период < ПредоставляемыеОтпуска2.Период
	|			И ПредоставляемыеОтпуска2.Период <= &парамКонецРасчета
	|ГДЕ
	|	ПредоставляемыеОтпуска.Действие <> &парамПрекратить
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредоставляемыеОтпуска.Период,
	|	ПредоставляемыеОтпуска.Организация,
	|	ПредоставляемыеОтпуска.ПодразделениеОрганизации,
	|	ПредоставляемыеОтпуска.Должность,
	|	ПредоставляемыеОтпуска.ФизЛицо,
	|	ПредоставляемыеОтпуска.ВидТрудовогоОтпуска,
	|	ПредоставляемыеОтпуска.РазмерОтпуска
	|";

	// определим движение работников за период, чтобы учесть отпуска по штат. единицам
	РаботникиОрганизацииТекст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&парамНачалоРасчета КАК Период,
	|	РаботникиОрганизации.Сотрудник,
	|	РаботникиОрганизации.ПодразделениеОрганизации,
	|	РаботникиОрганизации.Должность,
	|	РаботникиОрганизации.ПричинаИзмененияСостояния
	|ПОМЕСТИТЬ ВТ_РаботникиОрганизации
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&парамНачалоРасчета,
	|				Организация В (&парамСписокОрганизаций)
	|				И Сотрудник В (ВЫБРАТЬ СписокФизЛиц.Сотрудник ИЗ ВТ_СписокФизЛиц КАК СписокФизЛиц)) КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУвольнение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Период,
	|	РаботникиОрганизации.Сотрудник,
	|	РаботникиОрганизации.ПодразделениеОрганизации,
	|	РаботникиОрганизации.Должность,
	|	РаботникиОрганизации.ПричинаИзмененияСостояния
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокФизЛиц КАК СписокФизЛиц
	|		ПО РаботникиОрганизации.Сотрудник = СписокФизЛиц.Сотрудник
	|ГДЕ
	|	РаботникиОрганизации.Период > &парамНачалоРасчета
	|	И РаботникиОрганизации.Период <= &парамКонецРасчета
	|	И РаботникиОрганизации.Организация В (&парамСписокОрганизаций)
	|";
	
	// Учитываем только те движения, при которых меняются подразделение и/или должность,
	// чтобы не создавать лишние строки, из-за которых период будет сильно раздроблен
	// и потом будет большая погрешность при округлении, т.к. расчет производится в пределах одной записи запроса
	ПериодыНазначенияТекст = "
	|" + РаботникиОрганизацииТекст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МИНИМУМ(РаботникиОрганизации.ДатаНачала) КАК ДатаНачала,
	|	РаботникиОрганизации.ДатаОкончания,
	|	РаботникиОрганизации.Сотрудник,
	|	РаботникиОрганизации.ПодразделениеОрганизации,
	|	РаботникиОрганизации.Должность
	|ПОМЕСТИТЬ ВТ_ПериодыНазначения
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаботникиОрганизации.Период КАК ДатаНачала,
	|		МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(РаботникиОрганизации2.Период, ДЕНЬ, -1), &парамМаксДата)) КАК ДатаОкончания,
	|		РаботникиОрганизации.Сотрудник,
	|		РаботникиОрганизации.ПодразделениеОрганизации,
	|		РаботникиОрганизации.Должность
	|	ИЗ
	|		ВТ_РаботникиОрганизации КАК РаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации2
	|			ПО РаботникиОрганизации.Сотрудник = РаботникиОрганизации2.Сотрудник
	|				И РаботникиОрганизации.Период < РаботникиОрганизации2.Период
	|				И (РаботникиОрганизации.ПодразделениеОрганизации <> РаботникиОрганизации2.ПодразделениеОрганизации
	|					ИЛИ РаботникиОрганизации.Должность <> РаботникиОрганизации2.Должность
	|					ИЛИ РаботникиОрганизации2.ПричинаИзмененияСостояния = &парамУвольнение)
	|				И РаботникиОрганизации2.Период <= &парамКонецРасчета
	|	ГДЕ
	|		РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУвольнение
	|
	|	СГРУППИРОВАТЬ ПО
	|		РаботникиОрганизации.Период,
	|		РаботникиОрганизации.Сотрудник,
	|		РаботникиОрганизации.ПодразделениеОрганизации,
	|		РаботникиОрганизации.Должность) КАК РаботникиОрганизации
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизации.ДатаОкончания,
	|	РаботникиОрганизации.Сотрудник,
	|	РаботникиОрганизации.ПодразделениеОрганизации,
	|	РаботникиОрганизации.Должность
	|";

    // Добавим список физлиц, которым предоставляются отпуска как штат. единице
    ПериодыДействияПредоставляемыхОтпусковТекст = "
	|" + ПериодыДействияПредоставляемыхОтпусковТекст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|" + ПериодыНазначенияТекст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	ВЫБОР
    |		КОГДА ПериодыНазначения.Сотрудник ЕСТЬ NULL
    |			ТОГДА ПредоставляемыеОтпуска.ПериодДействияНачало
    |		КОГДА ПредоставляемыеОтпуска.ПериодДействияНачало < ПериодыНазначения.ДатаНачала
    |	    	ТОГДА ПериодыНазначения.ДатаНачала
    |		ИНАЧЕ ПредоставляемыеОтпуска.ПериодДействияНачало
    |	КОНЕЦ КАК ПериодДействияНачало,
    |	ВЫБОР
    |		КОГДА ПериодыНазначения.Сотрудник ЕСТЬ NULL
    |			ТОГДА ПредоставляемыеОтпуска.ПериодДействияКонец
    |		КОГДА ПредоставляемыеОтпуска.ПериодДействияКонец > ПериодыНазначения.ДатаОкончания
    |			ТОГДА ПериодыНазначения.ДатаОкончания
    |		ИНАЧЕ ПредоставляемыеОтпуска.ПериодДействияКонец
    |	КОНЕЦ КАК ПериодДействияКонец,
    |	ПредоставляемыеОтпуска.Организация,
	|	ПредоставляемыеОтпуска.ПодразделениеОрганизации,
	|	ПредоставляемыеОтпуска.Должность,
    |	ПериодыНазначения.Сотрудник КАК ШтЕдСотрудник,
	|	ПредоставляемыеОтпуска.ФизЛицо,
	|	ПредоставляемыеОтпуска.ВидТрудовогоОтпуска,
	|	ПредоставляемыеОтпуска.РазмерОтпуска КАК РазмерОтпуска
	|ПОМЕСТИТЬ ВТ_ПериодыДействияПредоставляемыхОтпусков_1
    |ИЗ
    |	ВТ_ПериодыДействияПредоставляемыхОтпусков КАК ПредоставляемыеОтпуска
    |	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыНазначения КАК ПериодыНазначения
    |		ПО ПредоставляемыеОтпуска.ПодразделениеОрганизации = ПериодыНазначения.ПодразделениеОрганизации
    |			И ПредоставляемыеОтпуска.Должность = ПериодыНазначения.Должность
    |			И ПредоставляемыеОтпуска.ПериодДействияНачало <= ПериодыНазначения.ДатаОкончания
    |			И ПредоставляемыеОтпуска.ПериодДействияКонец >= ПериодыНазначения.ДатаНачала
    |";

    ПолеПериодДействияНачало = "
    |ВЫБОР
    |	КОГДА Работники.РабочийГодС < ПредоставляемыеОтпуска.ПериодДействияНачало
    |		ТОГДА ПредоставляемыеОтпуска.ПериодДействияНачало
    |	ИНАЧЕ Работники.РабочийГодС
    |КОНЕЦ";
    
    ПолеПериодДействияКонец = "
    |ВЫБОР
    |	КОГДА Работники.ДатаГраницыРасчета > ПредоставляемыеОтпуска.ПериодДействияКонец
    |		ТОГДА ПредоставляемыеОтпуска.ПериодДействияКонец
    |	ИНАЧЕ Работники.ДатаГраницыРасчета
    |КОНЕЦ";
    
    // За каждый рабочий год определим действовавшие в нем отпуска 
    ОтпускаРаботниковТекст = "
	|" + ПериодыРаботыТекст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|" + ПериодыДействияПредоставляемыхОтпусковТекст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	Работники.Организация,
    |	Работники.Сотрудник,
    |	Работники.ДатаРасчета,
    |	Работники.ДатаПриема,
    |	Работники.ДатаУвольнения,
    |	Работники.РабочийГодС,
    |	Работники.РабочийГодПо,
    |	Работники.ДатаГраницыРасчета,
    |	" + ПолеПериодДействияНачало + " КАК ПериодДействияНачало,
    |	" + ПолеПериодДействияКонец + " КАК ПериодДействияКонец,
    |	ПредоставляемыеОтпуска.ВидТрудовогоОтпуска,
    |	СУММА(ПредоставляемыеОтпуска.РазмерОтпуска) КАК РазмерОтпуска
   	|ПОМЕСТИТЬ ВТ_ОтпускаРаботников						
    |ИЗ
    |	ВТ_ПериодыРаботы_1 КАК Работники
    |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыДействияПредоставляемыхОтпусков_1 КАК ПредоставляемыеОтпуска
    |		ПО Работники.ДатаГраницыРасчета >= ПредоставляемыеОтпуска.ПериодДействияНачало
    |			И Работники.РабочийГодС <= ПредоставляемыеОтпуска.ПериодДействияКонец
    |
    |			И ((ПредоставляемыеОтпуска.Организация = Работники.Организация
    |					И ПредоставляемыеОтпуска.ПодразделениеОрганизации = &парамПустоеПодразделение
    |					И ПредоставляемыеОтпуска.Должность = &парамПустаяДолжность
    |					И ПредоставляемыеОтпуска.ФизЛицо = &парамПустоеФизЛицо) // назначено в целом организации
    |
    |				ИЛИ 
    |				
    |				(ПредоставляемыеОтпуска.Организация = Работники.Организация
    |					И ПредоставляемыеОтпуска.ПодразделениеОрганизации = &парамПустоеПодразделение
    |					И ПредоставляемыеОтпуска.Должность = &парамПустаяДолжность
    |					И ЕСТЬNULL(Работники.Сотрудник.ВидЗанятости, &парамПустойВидЗанятости) <> &парамВнутреннееСовместительство
	|					И ПредоставляемыеОтпуска.ФизЛицо = Работники.Сотрудник.ФизЛицо) // назначено конкретному работнику в данной организации
	|
	|				ИЛИ 
	|	
    |				(ПредоставляемыеОтпуска.Организация = &парамПустаяОрганизация
    |					И ПредоставляемыеОтпуска.ШтЕдСотрудник = Работники.Сотрудник
    |					И ПредоставляемыеОтпуска.ФизЛицо = &парамПустоеФизЛицо)) // назначено работнику как занимающему штат. единицу в организации
    |
    |СГРУППИРОВАТЬ ПО
    |	Работники.Организация,
    |	Работники.Сотрудник,
    |	Работники.ДатаРасчета,
    |	Работники.ДатаПриема,
    |	Работники.ДатаУвольнения,
    |	Работники.РабочийГодС,
    |	Работники.РабочийГодПо,
    |	Работники.ДатаГраницыРасчета,
    |	" + ПолеПериодДействияНачало + ",
    |	" + ПолеПериодДействияКонец + ",
    |	ПредоставляемыеОтпуска.ВидТрудовогоОтпуска
    |
    |ИМЕЮЩИЕ СУММА(ПредоставляемыеОтпуска.РазмерОтпуска) <> 0
    |";
	
    // Определим периоды действия состояний, который исключаются из стажа для расчета отпуска
    СостояниеРаботниковТекст = "
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	&парамНачалоРасчета КАК Период,
    |	СостояниеРаботников.Организация,
    |	СостояниеРаботников.Сотрудник,
    |	ВЫБОР
    |		КОГДА СостояниеРаботников.ПериодЗавершения <> &парамПустаяДата
    |				И СостояниеРаботников.ПериодЗавершения <= &парамНачалоРасчета
    |			ТОГДА СостояниеРаботников.СостояниеЗавершения
    |		ИНАЧЕ СостояниеРаботников.Состояние
    |	КОНЕЦ КАК Состояние
	|ПОМЕСТИТЬ ВТ_СостояниеРаботников
    |ИЗ
    |	РегистрСведений.СостояниеРаботниковОрганизаций.СрезПоследних(
    |			&парамНачалоРасчета,
    |			Организация В (&парамСписокОрганизаций)
    |			И Сотрудник В (ВЫБРАТЬ СписокФизЛиц.Сотрудник ИЗ ВТ_СписокФизЛиц КАК СписокФизЛиц)) КАК СостояниеРаботников
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	СостояниеРаботников.Период,
    |	СостояниеРаботников.Организация,
    |	СостояниеРаботников.Сотрудник,
    |	СостояниеРаботников.Состояние
    |ИЗ
    |	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
    |ГДЕ
    |	СостояниеРаботников.Организация В (&парамСписокОрганизаций)
    |	И СостояниеРаботников.Период > &парамНачалоРасчета
    |	И СостояниеРаботников.Период <= &парамКонецРасчета
    |	И Сотрудник В (ВЫБРАТЬ СписокФизЛиц.Сотрудник ИЗ ВТ_СписокФизЛиц КАК СписокФизЛиц)
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
   	|ВЫБРАТЬ
   	|	СостояниеРаботников.ПериодЗавершения КАК Период,
   	|	СостояниеРаботников.Организация,
    |	СостояниеРаботников.Сотрудник,
    |	СостояниеРаботников.СостояниеЗавершения
   	|ИЗ
   	|	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
   	|ГДЕ
   	|	СостояниеРаботников.Организация В (&парамСписокОрганизаций)
   	|	И СостояниеРаботников.ПериодЗавершения МЕЖДУ &парамНачалоРасчета И &парамКонецРасчета
   	|	И СостояниеРаботников.Сотрудник В (ВЫБРАТЬ СписокФизЛиц.Сотрудник ИЗ ВТ_СписокФизЛиц КАК СписокФизЛиц)
    |";
    
    // Определим периоды действия состояний и виды отпусков, при расчете которых эти состояния исключаются из стажа
    ИсключаемыеИзСтажаПериодыТекст = "
	|" + СостояниеРаботниковТекст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	ИсключаемыеИзСтажаСостояния.Ссылка КАК ВидТрудовогоОтпуска,
    |	СостояниеРаботников.Организация,
    |	СостояниеРаботников.Сотрудник,
    |	СостояниеРаботников.Состояние,
    |	СостояниеРаботников.Период КАК ДатаНачала,
    |	МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледСостояниеРаботников.Период, ДЕНЬ, -1), &парамКонецРасчета)) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТ_ИсключаемыеИзСтажаПериоды
    |ИЗ
    |	Справочник.ВидыТрудовыхОтпусков.ИсключаемыеИзСтажаСостояния КАК ИсключаемыеИзСтажаСостояния
    |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СостояниеРаботников КАК СостояниеРаботников
    |		ПО ИсключаемыеИзСтажаСостояния.Состояние = СостояниеРаботников.Состояние
    |
    |	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СостояниеРаботников КАК СледСостояниеРаботников
    |		ПО СостояниеРаботников.Организация = СледСостояниеРаботников.Организация
    |			И СостояниеРаботников.Сотрудник = СледСостояниеРаботников.Сотрудник
    |			И СледСостояниеРаботников.Период > СостояниеРаботников.Период
    |
    |СГРУППИРОВАТЬ ПО
    |	ИсключаемыеИзСтажаСостояния.Ссылка,
    |	СостояниеРаботников.Организация,
    |	СостояниеРаботников.Сотрудник,
    |	СостояниеРаботников.Состояние,
    |	СостояниеРаботников.Период
    |";
    
    ПолеФактическийИсключаемыйПериодНачало = "
	|ВЫБОР
   	|	КОГДА ИсключаемыеИзСтажаПериоды.ДатаНачала < Отпуска.ПериодДействияНачало
   	|		ТОГДА Отпуска.ПериодДействияНачало
   	|	ИНАЧЕ ИсключаемыеИзСтажаПериоды.ДатаНачала
   	|КОНЕЦ";
   	
   	ПолеФактическийИсключаемыйПериодКонец = "
   	|ВЫБОР
   	|	КОГДА ИсключаемыеИзСтажаПериоды.ДатаОкончания > Отпуска.ПериодДействияКонец
   	|		ТОГДА Отпуска.ПериодДействияКонец
	|	ИНАЧЕ ИсключаемыеИзСтажаПериоды.ДатаОкончания
	|КОНЕЦ";

	// Подсчитаем число дней, исключаемых из стажа для предоставляения отпуска
    ОтпускаРаботниковТекст = "
	|" + ОтпускаРаботниковТекст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|" + ИсключаемыеИзСтажаПериодыТекст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	Отпуска.Организация,
    |	Отпуска.Сотрудник,
    |	Отпуска.ДатаРасчета,
    |	Отпуска.ДатаПриема,
    |	Отпуска.ДатаУвольнения,
    |	Отпуска.РабочийГодС,
    |	Отпуска.РабочийГодПо,
    |	Отпуска.ДатаГраницыРасчета,
    |	Отпуска.ПериодДействияНачало КАК ПериодДействияНачало,
    |	Отпуска.ПериодДействияКонец КАК ПериодДействияКонец,
    |	" + ПолеФактическийИсключаемыйПериодНачало + " КАК ФактическийИсключаемыйПериодНачало,
    |	" + ПолеФактическийИсключаемыйПериодКонец + " КАК ФактическийИсключаемыйПериодКонец,
    |	Отпуска.ВидТрудовогоОтпуска,
    |	Отпуска.РазмерОтпуска КАК РазмерОтпуска,
   	|	ВЫБОР
   	|		КОГДА ИсключаемыеИзСтажаПериоды.ДатаНачала ЕСТЬ NULL
   	|			ТОГДА 0
   	|		ИНАЧЕ РАЗНОСТЬДАТ(" + ПолеФактическийИсключаемыйПериодНачало + "," + ПолеФактическийИсключаемыйПериодКонец + ", ДЕНЬ) + 1 - КОЛИЧЕСТВО(ПраздничныеДни.ДатаКалендаря) 
   	|	КОНЕЦ КАК ДнейИсключаемыхИзСтажа
   	|ПОМЕСТИТЬ ВТ_ОтпускаРаботников_1						
    |ИЗ
    |	ВТ_ОтпускаРаботников КАК Отпуска
    |
    |	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсключаемыеИзСтажаПериоды КАК ИсключаемыеИзСтажаПериоды
    |		ПО Отпуска.Сотрудник = ИсключаемыеИзСтажаПериоды.Сотрудник
    |			И Отпуска.Организация = ИсключаемыеИзСтажаПериоды.Организация
    |			И Отпуска.ВидТрудовогоОтпуска = ИсключаемыеИзСтажаПериоды.ВидТрудовогоОтпуска
    |			И ИсключаемыеИзСтажаПериоды.ДатаНачала МЕЖДУ Отпуска.ДатаПриема И Отпуска.ДатаУвольнения
    |			И ИсключаемыеИзСтажаПериоды.ДатаОкончания >= Отпуска.ПериодДействияНачало
    |			И ИсключаемыеИзСтажаПериоды.ДатаНачала <= Отпуска.ПериодДействияКонец
    |
    |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПраздничныеДни
    |		ПО ПраздничныеДни.ДатаКалендаря МЕЖДУ " + ПолеФактическийИсключаемыйПериодНачало + " И " + ПолеФактическийИсключаемыйПериодКонец + "
    |			И ПраздничныеДни.ВидДня = &парамПраздник
    |
    |СГРУППИРОВАТЬ ПО
    |	Отпуска.Организация,
    |	Отпуска.Сотрудник,
    |	Отпуска.ДатаРасчета,
    |	Отпуска.ДатаПриема,
    |	Отпуска.ДатаУвольнения,
    |	Отпуска.РабочийГодС,
    |	Отпуска.РабочийГодПо,
    |	Отпуска.ДатаГраницыРасчета,
    |	Отпуска.ПериодДействияНачало,
    |	Отпуска.ПериодДействияКонец,
    |	ИсключаемыеИзСтажаПериоды.ДатаНачала,
    |	ИсключаемыеИзСтажаПериоды.ДатаОкончания,
    |	Отпуска.ВидТрудовогоОтпуска,
    |	Отпуска.РазмерОтпуска
    |";
    
    // определим количество календарных дней за каждый рабочий год и за период действия отпуска
    // и вычислим положенные дни отпуска
    ОтпускаРаботниковТекст = "
	|" + ОтпускаРаботниковТекст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
    |	Отпуска.Организация,
    |	Отпуска.Сотрудник,
    |	Отпуска.ДатаРасчета,
    |	Отпуска.ДатаПриема,
    |	Отпуска.ДатаУвольнения,
    |	Отпуска.РабочийГодС,
    |	Отпуска.РабочийГодПо,
    |	Отпуска.ДатаГраницыРасчета,
    |	Отпуска.ПериодДействияНачало,
    |	Отпуска.ПериодДействияКонец,
    |	Отпуска.ВидТрудовогоОтпуска,
    |	МАКСИМУМ(Отпуска.РазмерОтпуска) КАК РазмерОтпуска,
    |	СУММА(Отпуска.ДнейИсключаемыхИзСтажа) КАК ДнейИсключаемыхИзСтажа
	|ПОМЕСТИТЬ ВТ_Отпуска_1
	|ИЗ
    |	ВТ_ОтпускаРаботников_1 КАК Отпуска
    |
    |СГРУППИРОВАТЬ ПО
    |	Отпуска.Организация,
    |	Отпуска.Сотрудник,
    |	Отпуска.ДатаРасчета,
    |	Отпуска.ДатаПриема,
    |	Отпуска.ДатаУвольнения,
    |	Отпуска.РабочийГодС,
    |	Отпуска.РабочийГодПо,
    |	Отпуска.ДатаГраницыРасчета,
    |	Отпуска.ПериодДействияНачало,    
    |	Отпуска.ПериодДействияКонец,
    |	Отпуска.ВидТрудовогоОтпуска
	|;
	|////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	Отпуска.Организация,
    |	Отпуска.Сотрудник,
	|	Отпуска.Сотрудник.ФизЛицо КАК ФизЛицо,
    |	Отпуска.ДатаРасчета,
    |	Отпуска.ДатаПриема,
    |	ВЫБОР
    |		КОГДА Отпуска.ДатаУвольнения < &парамМаксДата
    |			ТОГДА Отпуска.ДатаУвольнения
    |		ИНАЧЕ &парамПустаяДата
    |	КОНЕЦ КАК ДатаУвольнения,
    |	Отпуска.ДатаГраницыРасчета,
    |	Отпуска.ВидТрудовогоОтпуска,
    |	Отпуска.РабочийГодС,
    |	Отпуска.РабочийГодПо,
    |	Отпуска.ПериодДействияНачало,
    |	Отпуска.ПериодДействияКонец,
    |	Отпуска.РазмерОтпуска,
    |	РАЗНОСТЬДАТ(Отпуска.РабочийГодС, Отпуска.РабочийГодПо, ДЕНЬ) + 1 - 
    |			СУММА(ВЫБОР 
    |					КОГДА ПраздничныеДни.ДатаКалендаря МЕЖДУ Отпуска.РабочийГодС И Отпуска.РабочийГодПо 
    |						ТОГДА 1
    |					ИНАЧЕ 0
    |		 		  КОНЕЦ) КАК ДнейВРабочемГоду,
    |	РАЗНОСТЬДАТ(Отпуска.ПериодДействияНачало, Отпуска.ПериодДействияКонец, ДЕНЬ) + 1 - 
    |			СУММА(ВЫБОР 
    |					КОГДА ПраздничныеДни.ДатаКалендаря МЕЖДУ Отпуска.ПериодДействияНачало И Отпуска.ПериодДействияКонец
    |						ТОГДА 1
    |					ИНАЧЕ 0
    |		 		  КОНЕЦ) КАК ДнейВПериодеДействияОтпуска,
    |	Отпуска.ДнейИсключаемыхИзСтажа,
    |	ВЫРАЗИТЬ(Отпуска.РазмерОтпуска * (РАЗНОСТЬДАТ(Отпуска.ПериодДействияНачало, Отпуска.ПериодДействияКонец, ДЕНЬ) + 1 - 
    |											СУММА(ВЫБОР 
    |													КОГДА ПраздничныеДни.ДатаКалендаря МЕЖДУ Отпуска.ПериодДействияНачало И Отпуска.ПериодДействияКонец 
    |														ТОГДА 1
    |													ИНАЧЕ 0
    |		 		  								  КОНЕЦ) - Отпуска.ДнейИсключаемыхИзСтажа) / 
    |									(РАЗНОСТЬДАТ(Отпуска.РабочийГодС, Отпуска.РабочийГодПо, ДЕНЬ) + 1 - 
    |											СУММА(ВЫБОР 
    |													КОГДА ПраздничныеДни.ДатаКалендаря МЕЖДУ Отпуска.РабочийГодС И Отпуска.РабочийГодПо
    |														ТОГДА 1
    |													ИНАЧЕ 0
    |		 		  								  КОНЕЦ)) КАК ЧИСЛО(6, 3)) КАК Результат
	|ПОМЕСТИТЬ ВТ_ПредоставляемыеОтпуска
    |ИЗ
    |	ВТ_Отпуска_1 КАК Отпуска
    |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПраздничныеДни
    |		ПО ПраздничныеДни.ДатаКалендаря МЕЖДУ Отпуска.РабочийГодС И Отпуска.РабочийГодПо
    |			И ПраздничныеДни.ВидДня = &парамПраздник
    |
    |СГРУППИРОВАТЬ ПО
    |	Отпуска.Организация,
    |	Отпуска.Сотрудник,
	|	Отпуска.Сотрудник.ФизЛицо,
    |	Отпуска.ДатаРасчета,
    |	Отпуска.ДатаПриема,
    |	Отпуска.ДатаУвольнения,
    |	Отпуска.РабочийГодС,
    |	Отпуска.РабочийГодПо,
    |	Отпуска.ДатаГраницыРасчета,
    |	Отпуска.ВидТрудовогоОтпуска,
    |	Отпуска.ПериодДействияНачало,
    |	Отпуска.ПериодДействияКонец,
    |	Отпуска.РазмерОтпуска,
    |	Отпуска.ДнейИсключаемыхИзСтажа
    |";
                                        
    Возврат СокрЛП(ОтпускаРаботниковТекст);
	
КонецФункции // СформироватьТекстЗапросаПредоставляемыеОтпуска()

// Функция возвращает текст пакетного запроса, которая формирует временную таблицу "ВТ_НеиспользованныеОтпуска",
//  содержащий расчет числа неиспользованных дней отпуска. 
// При использовании данной функции следует применять имя возвращаемой временной таблицы "ВТ_НеиспользованныеОтпуска".
//
// Параметры:
//	ДанныеРасчетаТекст - строка, текст запроса (см. функцию СформироватьТекстЗапросаПредоставляемыеОтпуска())
//	ПараметрыЗапроса - структура, содержащая параметры запроса
//	ЭтоДокументИсправление - булево, истина - не учитывать движения исправляемого документа 
//
// Возвращаемое значение:
//	Строка - текст запроса с числом недоиспользованных (+)/переиспользованных (-) дней отпуска
//			 Поля запроса:
//				Организация
//				ФизЛицо
//				Сотрудник
//				ВидТрудовогоОтпуска
//				РабочийГодС
//				РабочийГодПо
//              Результат - целое число
//
Функция СформироватьТекстЗапросаНеиспользованныеОтпуска(Знач ДанныеРасчетаТекст, ПараметрыЗапроса, ЭтоДокументИсправление = Ложь) Экспорт

	ПредоставляемыеОтпускаТекст = СформироватьТекстЗапросаПредоставляемыеОтпуска(ДанныеРасчетаТекст, ПараметрыЗапроса);
	
	ПараметрыЗапроса.Вставить("парамПрием", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	
	Если ЭтоДокументИсправление Тогда
		УсловиеДокументИсправление = " И ИспользованныеОтпуска.Регистратор <> &ИсправлемыйДокумент ";
	Иначе 
		УсловиеДокументИсправление = "";	
	КонецЕсли;
	
	// определим даты приемов по указанным приказам
	ДанныеРасчетаТекст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеРасчета.Организация,
	|	ДанныеРасчета.Сотрудник,
	|	ДанныеРасчета.ДатаРасчета,
	|	МАКСИМУМ(РаботникиОрганизации.Период) КАК ДатаПриема
	|ПОМЕСТИТЬ ВТ_ДанныеРасчета_1
	|ИЗ
	|	ВТ_ДанныеРасчета КАК ДанныеРасчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО ДанныеРасчета.Организация = РаботникиОрганизации.Организация
	|			И ДанныеРасчета.Сотрудник = РаботникиОрганизации.Сотрудник
	|			И РаботникиОрганизации.Период <= ДанныеРасчета.ДатаРасчета
	|			И РаботникиОрганизации.ПричинаИзмененияСостояния = &парамПрием
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРасчета.Организация,
	|	ДанныеРасчета.Сотрудник,
	|	ДанныеРасчета.ДатаРасчета
	|";
	
	ТекстЗапроса = "
	|" + ПредоставляемыеОтпускаТекст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|" + ДанныеРасчетаТекст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПредоставляемыеОтпуска.Организация,
	|	ПредоставляемыеОтпуска.Сотрудник,
	|	ПредоставляемыеОтпуска.ДатаРасчета,
	|	ПредоставляемыеОтпуска.ВидТрудовогоОтпуска,
	|	ПредоставляемыеОтпуска.РабочийГодС,
	|	ПредоставляемыеОтпуска.РабочийГодПо,
	|	ВЫРАЗИТЬ(СУММА(ПредоставляемыеОтпуска.Результат) КАК ЧИСЛО(5, 0)) КАК Результат
	|ПОМЕСТИТЬ ВТ_РасчетОтпуска
	|ИЗ
	|	ВТ_ПредоставляемыеОтпуска КАК ПредоставляемыеОтпуска
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредоставляемыеОтпуска.Организация,
	|	ПредоставляемыеОтпуска.Сотрудник,
	|	ПредоставляемыеОтпуска.ДатаРасчета,
	|	ПредоставляемыеОтпуска.ВидТрудовогоОтпуска,
	|	ПредоставляемыеОтпуска.РабочийГодС,
	|	ПредоставляемыеОтпуска.РабочийГодПо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИспользованныеОтпуска.Организация,
	|	ИспользованныеОтпуска.Сотрудник,
	|	ДанныеРасчета.ДатаРасчета,
	|	ИспользованныеОтпуска.ВидТрудовогоОтпуска,
	|	ИспользованныеОтпуска.РабочийГодС,
	|	ИспользованныеОтпуска.РабочийГодПо,
	|	- ИспользованныеОтпуска.ИспользованоДней
	|ИЗ
	|	РегистрНакопления.ИспользованиеОтпусковРаботникамиОрганизаций КАК ИспользованныеОтпуска
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеРасчета_1 КАК ДанныеРасчета
	|		ПО ИспользованныеОтпуска.Организация = ДанныеРасчета.Организация
	|			И ИспользованныеОтпуска.Сотрудник = ДанныеРасчета.Сотрудник
	|			И ИспользованныеОтпуска.Период МЕЖДУ ДанныеРасчета.ДатаПриема И КОНЕЦПЕРИОДА(ДанныеРасчета.ДатаРасчета, ДЕНЬ)"
	+ УсловиеДокументИсправление + 
	";
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетОтпуска.Организация,
	|	РасчетОтпуска.Сотрудник,
	|	РасчетОтпуска.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	РасчетОтпуска.ДатаРасчета,
	|	РасчетОтпуска.ВидТрудовогоОтпуска,
	|	РасчетОтпуска.РабочийГодС,
	|	РасчетОтпуска.РабочийГодПо,
	|	СУММА(РасчетОтпуска.Результат) КАК Результат
	|ПОМЕСТИТЬ ВТ_НеиспользованныеОтпуска
	|ИЗ
	|	ВТ_РасчетОтпуска КАК РасчетОтпуска
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетОтпуска.Организация,
	|	РасчетОтпуска.Сотрудник,
	|	РасчетОтпуска.ДатаРасчета,
	|	РасчетОтпуска.ВидТрудовогоОтпуска,
	|	РасчетОтпуска.РабочийГодС,
	|	РасчетОтпуска.РабочийГодПо
	|
	|ИМЕЮЩИЕ 
	|	СУММА(Результат) <> 0
	|";

	Возврат СокрЛП(ТекстЗапроса);

КонецФункции // СформироватьТекстЗапросаНеиспользованныеОтпуска()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧЕНИЯ РАБОТЫ СО СПРАВОЧНИКОМ "Сотрудники организаций"

Процедура СформироватьПодменюВвестиДокумент(МассивКнопокПодменю, СтруктураСоответствияДействий, ДанныеСотрудника) Экспорт
	
	ИспользоватьУправленческийУчетЗарплаты = глЗначениеПеременной("глИспользоватьУправленческийУчет");
	
	#Если Клиент Тогда
	
	Если ДанныеСотрудника <> Неопределено Тогда
		ПеремВидДоговора		= ДанныеСотрудника.ВидДоговора;
		ПеремДатаПриема			= ДанныеСотрудника.ДатаПриемаНаРаботу;
		ПеремДатаУвольнения		= ДанныеСотрудника.ДатаУвольнения;
		
		Если ИспользоватьУправленческийУчетЗарплаты Тогда
			ДатаПриемаВКомпанию	= ДанныеСотрудника.ДатаПриемаНаРаботуВПредприятие;
		Иначе
			ДатаПриемаВКомпанию	= Дата(1,1,1);
		КонецЕсли;
	Иначе
		ПеремВидДоговора			= Неопределено;
		ПеремДатаПриема			= Дата(1,1,1);
		ПеремДатаУвольнения		= Дата(1,1,1);
		
		ДатаПриемаВКомпанию	= Дата(1,1,1);
	КонецЕсли;
	
	Для Каждого КнопкаПодменю Из МассивКнопокПодменю Цикл
		КнопкаПодменю.Кнопки.Очистить();
	КонецЦикла;
	
	Если ПеремВидДоговора = Неопределено Тогда
		Для Каждого КнопкаПодменю Из МассивКнопокПодменю Цикл
			КнопкаПодменю.Доступность = Ложь;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Принят			= (ПеремДатаПриема <> Дата(1,1,1));
	Уволен			= (ПеремДатаУвольнения <> Дата(1,1,1));
	
	ПринятВКомпанию	= (ДатаПриемаВКомпанию <> Дата(1,1,1));
	
	Если Уволен Тогда
		Для Каждого КнопкаПодменю Из МассивКнопокПодменю Цикл
			КнопкаПодменю.Доступность = Ложь;
		КонецЦикла;
		Возврат;
	Иначе
		Для Каждого КнопкаПодменю Из МассивКнопокПодменю Цикл
			КнопкаПодменю.Доступность = Истина;
		КонецЦикла;
	КонецЕсли;
	
	// Проверка прав доступа на выполнение действий будет осуществляться непосредственно при выборе действий
	Если ПеремВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		
		Если НЕ Принят Тогда
			ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "ПриемНаРаботуВОрганизацию", ТипКнопкиКоманднойПанели.Действие, "Прием на работу в организацию", СтруктураСоответствияДействий.ДействиеВводНаОснованииПриемНаРаботуВОрганизацию);
			ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель1", ТипКнопкиКоманднойПанели.Разделитель);
		КонецЕсли;
		
		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "КадровоеПеремещениеОрганизаций", ТипКнопкиКоманднойПанели.Действие, "Кадровое перемещение организаций", СтруктураСоответствияДействий.ДействиеВводНаОснованииКадровоеПеремещениеОрганизаций);
		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "УвольнениеИзОрганизаций", ТипКнопкиКоманднойПанели.Действие, "Увольнение из организаций", СтруктураСоответствияДействий.ДействиеВводНаОснованииУвольнениеИзОрганизаций);
		
		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель3", ТипКнопкиКоманднойПанели.Разделитель);
		
		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Отпуск", ТипКнопкиКоманднойПанели.Действие, "Отпуск", СтруктураСоответствияДействий.ДействиеОтпуск);
		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "БольничныйЛист", ТипКнопкиКоманднойПанели.Действие, "Больничный лист", СтруктураСоответствияДействий.ДействиеБольничныйЛист);
		
		Если ИспользоватьУправленческийУчетЗарплаты Тогда
			
			ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель4", ТипКнопкиКоманднойПанели.Разделитель);
			
			Если НЕ ПринятВКомпанию Тогда
				ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "ПриемНаРаботу", ТипКнопкиКоманднойПанели.Действие, "Прием на работу", СтруктураСоответствияДействий.ДействиеВводНаОснованииПриемНаРаботу);
				ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель5", ТипКнопкиКоманднойПанели.Разделитель);
			КонецЕсли;
			
			ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "КадровоеПеремещение", ТипКнопкиКоманднойПанели.Действие, "Кадровое перемещение", СтруктураСоответствияДействий.ДействиеВводНаОснованииКадровоеПеремещение);
			ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Увольнение", ТипКнопкиКоманднойПанели.Действие, "Увольнение", СтруктураСоответствияДействий.ДействиеВводНаОснованииУвольнение);
			
			ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель6", ТипКнопкиКоманднойПанели.Разделитель);
			
		КонецЕсли;
		
	ИначеЕсли ПеремВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
		
		Если НЕ ПринятВКомпанию Тогда
			ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель4", ТипКнопкиКоманднойПанели.Разделитель);
			ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "ПриемНаРаботу", ТипКнопкиКоманднойПанели.Действие, "Прием на работу", СтруктураСоответствияДействий.ДействиеВводНаОснованииПриемНаРаботу);
			ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель5", ТипКнопкиКоманднойПанели.Разделитель);
		КонецЕсли;
		
		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "КадровоеПеремещение", ТипКнопкиКоманднойПанели.Действие, "Кадровое перемещение", СтруктураСоответствияДействий.ДействиеВводНаОснованииКадровоеПеремещение);
		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Увольнение", ТипКнопкиКоманднойПанели.Действие, "Увольнение", СтруктураСоответствияДействий.ДействиеВводНаОснованииУвольнение);
		
		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель6", ТипКнопкиКоманднойПанели.Разделитель);
		
	ИначеЕсли ПеремВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский
				ИЛИ ПеремВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда 
				ИЛИ ПеремВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Лицензионный Тогда
		
		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "ДоговорНаВыполнениеРабот", ТипКнопкиКоманднойПанели.Действие, "Договор на выполнение работ", СтруктураСоответствияДействий.ДействиеВводНаОснованииДоговорНаВыполнениеРаботСФизЛицом);
		
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

Процедура ДобавитьКнопкуВПодменю(МассивКнопок, ИмяКнопки, ТипКнопки, ТекстКнопки = "", Действие = Неопределено)
	
	Для Каждого КнопкаПодменю Из МассивКнопок Цикл
		КнопкаПодменю.Кнопки.Добавить(ИмяКнопки, ТипКнопки, ТекстКнопки, Действие);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСтруктуруСоответствияДействий(СтруктураСоответствияДействий, ДополнительныеДействия) Экспорт
	
	СтруктураСоответствияДействий.Вставить("ДействиеВводНаОснованииПриемНаРаботу"						, ДополнительныеДействия);
	СтруктураСоответствияДействий.Вставить("ДействиеВводНаОснованииКадровоеПеремещение"					, ДополнительныеДействия);
	СтруктураСоответствияДействий.Вставить("ДействиеВводНаОснованииУвольнение"							, ДополнительныеДействия);

КонецПроцедуры

#Если Клиент Тогда

Процедура ДействиеВводНаОснованииПриемНаРаботу(Кнопка, ИсточникЗаполнения) Экспорт
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ПриемНаРаботу) Тогда
		Предупреждение("Нарушение прав доступа!");
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = Документы.ПриемНаРаботу.СоздатьДокумент();
	Если ТипЗнч(ИсточникЗаполнения) = Тип("ВыделенныеСтрокиТабличногоПоля") Тогда
		Для Каждого ВыделеннаяСтрока Из ИсточникЗаполнения Цикл
			ДокументОбъект.Заполнить(ВыделеннаяСтрока);
		КонецЦикла;
	Иначе
		ДокументОбъект.Заполнить(ИсточникЗаполнения);
	КонецЕсли;
	
	ФормаДокумента = ДокументОбъект.ПолучитьФорму();
	ФормаДокумента.Открыть();
	
КонецПроцедуры

Процедура ДействиеВводНаОснованииКадровоеПеремещение(Кнопка, ИсточникЗаполнения) Экспорт
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.КадровоеПеремещение) Тогда
		Предупреждение("Нарушение прав доступа!");
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = Документы.КадровоеПеремещение.СоздатьДокумент();
	Если ТипЗнч(ИсточникЗаполнения) = Тип("ВыделенныеСтрокиТабличногоПоля") Тогда
		Для Каждого ВыделеннаяСтрока Из ИсточникЗаполнения Цикл
			ДокументОбъект.Заполнить(ВыделеннаяСтрока);
		КонецЦикла;
	Иначе
		ДокументОбъект.Заполнить(ИсточникЗаполнения);
	КонецЕсли;
	
	ФормаДокумента = ДокументОбъект.ПолучитьФорму();
	ФормаДокумента.Открыть();
	
КонецПроцедуры

Процедура ДействиеВводНаОснованииУвольнение(Кнопка, ИсточникЗаполнения) Экспорт
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.Увольнение) Тогда
		Предупреждение("Нарушение прав доступа!");
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = Документы.Увольнение.СоздатьДокумент();
	Если ТипЗнч(ИсточникЗаполнения) = Тип("ВыделенныеСтрокиТабличногоПоля") Тогда
		Для Каждого ВыделеннаяСтрока Из ИсточникЗаполнения Цикл
			ДокументОбъект.Заполнить(ВыделеннаяСтрока);
		КонецЦикла;
	Иначе
		ДокументОбъект.Заполнить(ИсточникЗаполнения);
	КонецЕсли;
	
	ФормаДокумента = ДокументОбъект.ПолучитьФорму();
	ФормаДокумента.Открыть();
	
КонецПроцедуры
	
#КонецЕсли

// Процедура очищает отбор по режиму отображения списка
//
Процедура ОчиститьОтборыПоРежимуОтображенияСпискаПредприятия(ЭтаФорма, РежимОтображенияСписка = "") Экспорт
	
	Отборы = ЭтаФорма.СправочникСписок.Отбор;
	
	Если РежимОтображенияСписка <> "ПоСтруктуреПредприятия" И Отборы.ТекущееПодразделениеПредприятия.Использование Тогда
		Отборы.ТекущееПодразделениеПредприятия.Использование	= Ложь;
	КонецЕсли;
		
	Если РежимОтображенияСписка = "ПоСтруктуреПредприятия" Тогда
		Если Отборы.Организация.Использование Тогда
			Отборы.Организация.Использование	= Ложь;
		КонецЕсли;
		Если Отборы.ТекущаяСтруктурнаяЕдиница.Использование Тогда
			Отборы.ТекущаяСтруктурнаяЕдиница.Использование	= Ложь;
		КонецЕсли;
		
		ОтборПоОрганизации = ЭтаФорма.ЭлементыФормы.ОтборПоОрганизации;
		
		ОтборПоОрганизации.Значение = ОтборПоОрганизации.СписокВыбора.Получить(0).Значение;
	КонецЕсли;
	
КонецПроцедуры

#Если Клиент Тогда
	
Процедура ВыполнитьДополнительныеДействия(Кнопка, ИсточникЗаполнения) Экспорт
	
	Если Кнопка.Имя = "ПриемНаРаботу" Тогда
		ДействиеВводНаОснованииПриемНаРаботу(Кнопка, ИсточникЗаполнения);
	ИначеЕсли Кнопка.Имя = "КадровоеПеремещение" Тогда
		ДействиеВводНаОснованииКадровоеПеремещение(Кнопка, ИсточникЗаполнения);
	ИначеЕсли Кнопка.Имя = "Увольнение" Тогда	
		ДействиеВводНаОснованииУвольнение(Кнопка, ИсточникЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ ФОРМЫ ЭЛЕМЕНТА

// Функция проверяется прием на работу сотрудника или наличие начислений
 //
 // Параметры  Нет
 //
 // Возвращаемое значение:
 //   Булево
 //
Функция ЕстьНачисленияИлиПриемНаРаботу(ВидДоговора, Ссылка) Экспорт
	
	ВидыДоговоров = Новый Массив;
	
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский 
		ИЛИ ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда
		ИЛИ ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Лицензионный Тогда
		
		//договор ГПХ, проверим регистрацию договоров документом
		 Запрос = Новый Запрос;
		 ТекстЗапроса = 
		 "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		 |	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник
		 |ИЗ
		 |	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
		 |ГДЕ
		 |	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник = &парамСотрудник
		 |	И ДоговорНаВыполнениеРаботСФизЛицом.Проведен";
		 
		 Запрос.УстановитьПараметр("ПарамСотрудник", Ссылка);
		 Запрос.Текст = ТекстЗапроса;
		 Выборка = Запрос.Выполнить().Выбрать();
		 Если Выборка.Следующий() Тогда
			 Возврат Истина;	
		 КонецЕсли;
		
	ИначеЕсли ВидыДоговоров.Найти(ВидДоговора) <> Неопределено  Тогда	
		
		//проверим по наличию записей в регистре РаботникиОрганизаций
		 Запрос = Новый Запрос;
		 ТекстЗапроса = 
		 "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		 |	РаботникиОрганизаций.Сотрудник
		 |ИЗ
		 |	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		 |ГДЕ
		 |	РаботникиОрганизаций.Сотрудник = &ПарамСотрудник";
		 
		 Запрос.УстановитьПараметр("ПарамСотрудник", Ссылка);
		 Запрос.Текст = ТекстЗапроса;
		 Выборка = Запрос.Выполнить().Выбрать();
		 Если Выборка.Следующий() Тогда
			 Возврат Истина;	
		 КонецЕсли;
		
	КонецЕсли;
 
	Возврат Ложь;
	
КонецФункции // ЕстьНачисленияИлиПриемНаРаботу()

// Заменяет одни термины, которые используются в коде, другими - уместными в интерфейсе.
// Позволяет иметь один тот же код при разных названиях объектов.
//
// Параметры
//  СтрокаИзИнтерфейса - строка - заголовок колонки, надпись и т.п.
//
// Возвращаемое значение:
//  Строка - новый заголовок колонки, надпись и т.п. 
//
Функция ПреобразоватьСтрокуИнтерфейса(СтрокаИзИнтерфейса) Экспорт 

	КоллекцияЗначенийЗаголовков = Новый Соответствие;//глЗначениеПеременной("глКоллекцияЗначенийЗаголовков");
	
	НоваяСтрока = КоллекцияЗначенийЗаголовков[СтрокаИзИнтерфейса];

	Возврат ?(НоваяСтрока = Неопределено, СтрокаИзИнтерфейса, НоваяСтрока);
КонецФункции

// Процедура заполняет вычисляемые колонки формы списка справочника СотрудникиОрганизаций
//
// Параметры
//  ТабличноеПоле   – Табличное поле
//  ОформленияСтрок – Коллекция значений типа ОформлениеСтроки табличного поля ТЧДокумента
//  ДатаСреза	 	- тип дата, дата на которую получаем данные работников организации
//
Процедура ЗаполнитьДанныеПоРаботникамОрганизации(ТабличноеПоле, ОформленияСтрок, ИспользоватьКешПриПолученииДанных, КешПриПолученииДанных)Экспорт

	КолонкиТабличногоПоля = ТабличноеПоле.Колонки;
	
	ПоказыватьАванс			= КолонкиТабличногоПоля.Аванс.Видимость;
	ПоказыватьКартСчета	= КолонкиТабличногоПоля.НомерКартСчета.Видимость ИЛИ КолонкиТабличногоПоля.Банк.Видимость;
	
	Если НЕ (ПоказыватьАванс ИЛИ ПоказыватьКартСчета) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КешПриПолученииДанных.Свойство("ДанныеСотрудников") Тогда
		ДанныеСотрудников = Неопределено;
	Иначе
		ДанныеСотрудников = КешПриПолученииДанных.ДанныеСотрудников;
	КонецЕсли;
	
	МассивСотрудников = Новый Массив;
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Если ИспользоватьКешПриПолученииДанных И ДанныеСотрудников <> Неопределено Тогда
			Если ДанныеСотрудников.Найти(ОформлениеСтроки.ДанныеСтроки.Ссылка, "Сотрудник") = Неопределено Тогда
				МассивСотрудников.Добавить(ОформлениеСтроки.ДанныеСтроки.Ссылка);
			КонецЕсли;
			
		Иначе
			МассивСотрудников.Добавить(ОформлениеСтроки.ДанныеСтроки.Ссылка);
			
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСотрудников.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ";
		
		Если ПоказыватьАванс Тогда
			Запрос.Текст = Запрос.Текст + "
			|	ЕСТЬNULL(АвансыРаботникамОрганизаций.Размер, 0) КАК СуммаАванса,";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|	0 КАК СуммаАванса,";
		КонецЕсли;
		
		Если ПоказыватьКартСчета Тогда
			Запрос.Текст = Запрос.Текст + "
			|	ЕСТЬNULL(КартСчетаФизЛицРаботниковОрганизации.НомерКартСчета, """") КАК НомерКартСчета,
			|	ЕСТЬNULL(КартСчетаФизЛицРаботниковОрганизации.Банк, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Банк,";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|	"""" КАК НомерКартСчета,
			|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Банк,";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|	Сотрудники.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК Сотрудники";
		
		Если ПоказыватьАванс Тогда
			Запрос.Текст = Запрос.Текст + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АвансыРаботникамОрганизаций КАК АвансыРаботникамОрганизаций
			|		ПО Сотрудники.Физлицо = АвансыРаботникамОрганизаций.Физлицо
			|			И Сотрудники.ТекущаяСтруктурнаяЕдиница = АвансыРаботникамОрганизаций.Организация";
		КонецЕсли;
		
		Если ПоказыватьКартСчета Тогда
			Запрос.Текст = Запрос.Текст + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КартСчетаФизЛиц КАК КартСчетаФизЛицРаботниковОрганизации
			|		ПО Сотрудники.Физлицо = КартСчетаФизЛицРаботниковОрганизации.Физлицо";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивСотрудников)";
		               
		Таблица = Запрос.Выполнить().Выгрузить();
		Если ДанныеСотрудников = Неопределено Тогда
			ДанныеСотрудников = Новый ТаблицаЗначений;
			ДанныеСотрудников.Колонки.Добавить("Сотрудник");
			ДанныеСотрудников.Колонки.Добавить("СуммаАванса");
			ДанныеСотрудников.Колонки.Добавить("НомерКартСчета");
			ДанныеСотрудников.Колонки.Добавить("Банк");
			
			ДанныеСотрудников.Индексы.Добавить("Сотрудник");
		КонецЕсли;
			
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			Строка = ДанныеСотрудников.Найти(СтрокаТаблицы.Сотрудник, "Сотрудник");
			Если Строка = Неопределено Тогда
				Строка = ДанныеСотрудников.Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Строка, СтрокаТаблицы);
		КонецЦикла;
		
		КешПриПолученииДанных.Вставить("ДанныеСотрудников",	ДанныеСотрудников);
	КонецЕсли;
	
	Авансы = КешПриПолученииДанных.Авансы;
	Для Каждого СтрокаТабличногоПоля Из ОформленияСтрок Цикл
		
		ДанныеСтроки = СтрокаТабличногоПоля.ДанныеСтроки;
		Если ДанныеСтроки.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ДанныеСотрудников.Найти(ДанныеСтроки.Ссылка, "Сотрудник");
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПоказыватьАванс Тогда
			СтрокаТабличногоПоля.Ячейки.Аванс.УстановитьТекст(Формат(СтрокаТаблицы.СуммаАванса, "ЧЦ=15; ЧДЦ=2"));
			Авансы.Вставить(ДанныеСтроки.Ссылка, СтрокаТаблицы.СуммаАванса);
		КонецЕсли;
		
		Если ПоказыватьКартСчета Тогда
			СтрокаТабличногоПоля.Ячейки.НомерКартСчета.УстановитьТекст(СтрокаТаблицы.НомерКартСчета);
			СтрокаТабличногоПоля.Ячейки.Банк.УстановитьТекст(СтрокаТаблицы.Банк);
		КонецЕсли;
		
	КонецЦикла;
	КешПриПолученииДанных.Вставить("Авансы", Авансы);
	
КонецПроцедуры

Процедура ОткрытьФормуОстатковОтпусков() Экспорт
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ИспользованиеОтпусковРаботникамиОрганизаций) Тогда
		Форма = Справочники.СотрудникиОрганизаций.ПолучитьФормуСписка(,, "ФормаОстатковОтпусков");
		Форма.мРежимРаботыФормы = "ФормаОстатковОтпусков";
		Форма.Открыть();
		
	Иначе
		#Если Клиент Тогда
		Предупреждение("Нарушение прав доступа!");
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Процедура открывает форму выбора сотрудников организации
// Параметры:
//	Владелец 			- владелец формы
//	Ключ 				- ключ, ссылка на документ из которого открывается форма
//	ЗакрыватьПриВыборе 	- Булево
//	ДатаСреза 			- дата, передается в форму для получения доп. данных по сотруднику на эту дату
//	ГоловнаяОрганизация - головная организация
//	Режим 				- строка
//	СтандартнаяОбработка- Булево
//	ТекущееЗначение 	- ссылка на элемент, на котором необходимо спозиционироваться при открытии формы, либо массив уже подобранных сотров
//	НеВыбиратьГруппы	- булево, признак выбора в списке групп и элементов
//
Процедура ОткрытьФормуВыбораСотрудникаОрганизации(Владелец, Ключ, ЗакрыватьПриВыборе, ДатаСреза, ГоловнаяОрганизация = Неопределено, Режим = "СотрудникиОрганизацийДоговорники", СтандартнаяОбработка = Неопределено, ТекущееЗначение = Неопределено, НеВыбиратьГруппы = Истина, ВыборФизлица = Ложь, ПараметрыПодбора = Неопределено,СтруктурноеПодразделение=Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Форма = Справочники.СотрудникиОрганизаций.ПолучитьФормуВыбора(, Владелец, Ключ);
	
	Форма.ДатаСреза 					= ДатаСреза;
	Если НеВыбиратьГруппы Тогда
		Форма.ПараметрВыборГруппИЭлементов	= ИспользованиеГруппИЭлементов.Элементы;
	Иначе
		Форма.ПараметрВыборГруппИЭлементов	= ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
	КонецЕсли;	
	Форма.РежимВыбора					= Истина;
	Форма.ЗакрыватьПриВыборе			= ЗакрыватьПриВыборе;
	Форма.ВыборФизлица					= ВыборФизлица;
	Форма.мПараметрыПодбора				= ПараметрыПодбора;
	
	Если ТекущееЗначение <> Неопределено Тогда
		Если ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
			Форма.ПараметрТекущаяСтрока		= ТекущееЗначение;
			
		ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Физлицо",				ТекущееЗначение);
			Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ГоловнаяОрганизация);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СотрудникиОрганизаций.Ссылка,
			|	ВЫБОР
			|		КОГДА (НЕ СотрудникиОрганизаций.Актуальность)
			|			ТОГДА 3
			|		КОГДА СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК Порядок
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	(СотрудникиОрганизаций.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
			|			ИЛИ СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
			|	И СотрудникиОрганизаций.Физлицо = &Физлицо
			|	И СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Форма.ПараметрТекущаяСтрока	= Выборка.Ссылка;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("Массив") Тогда
			Форма.мМассивВыбранныхЗначений = ТекущееЗначение;
			
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Неверный тип параметра: " + ТипЗнч(ТекущееЗначение));
			
		КонецЕсли;
	КонецЕсли;
	
	//установим отборы
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Форма.Отбор.Организация.Установить(ГоловнаяОрганизация);
		Форма.Отбор.Организация.Использование = ЗначениеЗаполнено(ГоловнаяОрганизация);
	КонецЕсли;
	
	// -КУФИБ - начало
	Если СтруктурноеПодразделение<>Неопределено Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
			|	СотрудникиОрганизаций.Ссылка КАК Сотрудник
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.общ_РеглУчетВзаиморасчетовССотрудникамиОрганизаций.СрезПоследних(&ДатаСреза, Организация = &ГоловнаяОрганизация) КАК УчетВзаиморасчетов
			|		ПО СотрудникиОрганизаций.Ссылка = УчетВзаиморасчетов.Сотрудник
			|ГДЕ
			|	СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация
			|	И ЕСТЬNULL(УчетВзаиморасчетов.ОбособленноеПодразделение, &Организация)= &Организация
			|	И ЕСТЬNULL(УчетВзаиморасчетов.СтруктурноеПодразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) = &СтруктурноеПодразделение";

		Организация = ?(ТипЗнч(СтруктурноеПодразделение)=Тип("СправочникСсылка.Организации"),СтруктурноеПодразделение,СтруктурноеПодразделение.Владелец);
		мСтруктурноеПодразделение = ?(ТипЗнч(СтруктурноеПодразделение)=Тип("СправочникСсылка.Организации"),Справочники.ПодразделенияОрганизаций.ПустаяСсылка(),СтруктурноеПодразделение);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
		Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", мСтруктурноеПодразделение);
		Запрос.УстановитьПараметр("Организация", 				Организация);

		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
		СписокОтбора = Новый СписокЗначений;
		СписокОтбора.ЗагрузитьЗначения(Результат);
 		Форма.Отбор.Ссылка.ВидСравнения	= ВидСравнения.ВСписке;
		Форма.Отбор.Ссылка.Использование 	= Истина;
		Форма.Отбор.Ссылка.Значение = СписокОтбора;

	КонецЕсли;
	// - КУФИБ - конец
	
	
	СписокДоговоров = Новый СписокЗначений;
	Если Режим = "СотрудникиОрганизацийДоговорники" Тогда
		
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Лицензионный);
		
	ИначеЕсли Режим = "СотрудникиОрганизаций" Тогда
		
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
		
	ИначеЕсли Режим = "СотрудникиДоговорники" Тогда
		
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Лицензионный);
		
	Иначе // для остальных режимов ничего не показываем
	КонецЕсли;
	
	Форма.Отбор.ВидДоговора.ВидСравнения	= ВидСравнения.ВСписке;
	Форма.Отбор.ВидДоговора.Использование	= Истина;
	Форма.Отбор.ВидДоговора.Значение		= СписокДоговоров;
	
	Форма.Открыть();
	
КонецПроцедуры // ОткрытьФормуВыбораСотрудникаОрганизации()


// Процедура открывает форму выбора сотрудников
//
Процедура ОткрытьФормуВыбораСотрудника(Владелец, Ключ, ЗакрыватьПриВыборе, ДатаСреза, СтандартнаяОбработка = Неопределено, ТекущееЗначение = Неопределено, ВыборФизлица = Ложь, ПараметрыПодбора = Неопределено, Подразделение = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Форма = Справочники.СотрудникиОрганизаций.ПолучитьФормуВыбора(, Владелец, Ключ);
	
	Форма.ДатаСреза 					= ДатаСреза;
	Форма.ПараметрВыборГруппИЭлементов	= ИспользованиеГруппИЭлементов.Элементы;
	Форма.РежимВыбора					= Истина;
	Форма.ЗакрыватьПриВыборе			= ЗакрыватьПриВыборе;
	Форма.ВыборФизлица					= ВыборФизлица;
	Форма.мПараметрыПодбора				= ПараметрыПодбора;
	
	Если ТекущееЗначение <> Неопределено Тогда
		Если ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
			Форма.ПараметрТекущаяСтрока	= ТекущееЗначение;
			
		ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Физлицо",	ТекущееЗначение);
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СотрудникиОрганизаций.Ссылка,
			|	ВЫБОР
			|		КОГДА СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
			|			ТОГДА ВЫБОР
			|					КОГДА СотрудникиОрганизаций.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
			|						ТОГДА 1
			|					ИНАЧЕ 2
			|				КОНЕЦ
			|		ИНАЧЕ 3
			|	КОНЕЦ КАК Порядок
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	((НЕ СотрудникиОрганизаций.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)))
			|			ИЛИ СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
			|	И СотрудникиОрганизаций.Физлицо = &Физлицо
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Форма.ПараметрТекущаяСтрока	= Выборка.Ссылка;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("Массив") Тогда
			Форма.мМассивВыбранныхЗначений = ТекущееЗначение;
			
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Неверный тип параметра: " + ТипЗнч(ТекущееЗначение));
			
		КонецЕсли;
	КонецЕсли;
	
	СписокДоговоров = Новый СписокЗначений;
	СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий);
	
	Форма.Отбор.ВидЗанятости.ВидСравнения = ВидСравнения.НеРавно;
	Форма.Отбор.ВидЗанятости.Использование = Истина;
	Форма.Отбор.ВидЗанятости.Значение = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство;
	Форма.Отбор.ВидДоговора.ВидСравнения = ВидСравнения.ВСписке;
	Форма.Отбор.ВидДоговора.Использование = Истина;
	Форма.Отбор.ВидДоговора.Значение = СписокДоговоров;
	
	Если Подразделение <> Неопределено Тогда
		Форма.Отбор.ТекущееПодразделениеПредприятия.ВидСравнения	= ВидСравнения.ВСписке;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Спр.Ссылка
		|ИЗ
		|	Справочник.Подразделения КАК Спр
		|ГДЕ
		|	Спр.Родитель В (&Ссылка)";
		
		Ссылка = ?(Подразделение = Неопределено ИЛИ Подразделение.Пустая(), Неопределено, Подразделение);
		СписокПодразделений = Новый СписокЗначений;
		СписокПодразделений.Добавить(Ссылка);
		Пока Ссылка <> Неопределено  Цикл
			Запрос.УстановитьПараметр("Ссылка",	Ссылка);
			СписокСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			Если СписокСсылок.Количество() > 0 Тогда
				Для Каждого Ссылка Из СписокСсылок Цикл
					СписокПодразделений.Добавить(Ссылка);
				КонецЦикла;
				Ссылка = СписокСсылок;
			Иначе
				Ссылка = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		Форма.Отбор.ТекущееПодразделениеПредприятия.Значение		= СписокПодразделений;
		Форма.Отбор.ТекущееПодразделениеПредприятия.Использование	= Истина;
	КонецЕсли;
	
	Форма.Открыть();
	
КонецПроцедуры // ОткрытьФормуВыбораСотрудника()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ ПОДПИСКА НА СОБЫТИЕ "ПередЗаписьюДокументаЗаполнитьФизлицоВТабличнойЧасти", "ПередЗаписьюДокументаЗаполнитьФизлицоВШапке"

Процедура ПередЗаписьюДокументаЗаполнитьФизЛицоВТабличнойЧасти(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеСотрудникФизлицо = Новый Соответствие;
	ПустоеФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	ПустойСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	Для Каждого ТабличнаяЧасть Из Источник.Метаданные().ТабличныеЧасти Цикл
		Если ТабличнаяЧасть.Реквизиты.Найти("Сотрудник") = Неопределено ИЛИ ТабличнаяЧасть.Реквизиты.Найти("Физлицо") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаТабличнойЧасти Из Источник[ТабличнаяЧасть.Имя] Цикл
			Если СтрокаТабличнойЧасти.Сотрудник <> ПустойСотрудник Тогда
				СоответствиеСотрудникФизлицо.Вставить(СтрокаТабличнойЧасти.Сотрудник);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	МассивСотрудников = Новый Массив;
	Для Каждого ЭлементСоответствия Из СоответствиеСотрудникФизлицо Цикл
		МассивСотрудников.Добавить(ЭлементСоответствия.Ключ);
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСотрудников", МассивСотрудников);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизаций.Физлицо,
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка В(&СписокСотрудников)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеСотрудникФизлицо.Вставить(Выборка.Сотрудник, Выборка.Физлицо);
	КонецЦикла;

	Для Каждого ТабличнаяЧасть Из Источник.Метаданные().ТабличныеЧасти Цикл
		Если ТабличнаяЧасть.Реквизиты.Найти("Сотрудник") = Неопределено ИЛИ ТабличнаяЧасть.Реквизиты.Найти("Физлицо") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаписыватьТабличнуюЧасть = Ложь;
		Для Каждого СтрокаТабличнойЧасти Из Источник[ТабличнаяЧасть.Имя] Цикл
			Если СтрокаТабличнойЧасти.Сотрудник <> ПустойСотрудник И СтрокаТабличнойЧасти.Физлицо <> СоответствиеСотрудникФизлицо.Получить(СтрокаТабличнойЧасти.Сотрудник) Тогда
				СтрокаТабличнойЧасти.Физлицо = СоответствиеСотрудникФизлицо.Получить(СтрокаТабличнойЧасти.Сотрудник);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПередЗаписьюДокументаЗаполнитьФизЛицоВТабличнойЧасти()

Процедура ПолучитьФизлицИзДополнительныхТабличныхЧастей(Источник, Отказ, РежимЗаписи, РежимПроведения, СоответствиеФизлица) Экспорт

	
	Если Источник.Метаданные().ТабличныеЧасти.Найти("ОтражениеВУчете") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Источник.ОтражениеВУчете Цикл
		Для СчетчикВидовСубконто = 1 По 4 Цикл
			ДтКт = ?(СчетчикВидовСубконто = 1, "Дт", ?(СчетчикВидовСубконто = 2,"Кт", ?(СчетчикВидовСубконто = 3, "ДтНУ", "КтНУ")));
			Для СчетчикСубконто = 1 По 3 Цикл
				ЗначениеСубконто = Строка["Субконто"+ДтКт+СчетчикСубконто];
				Если ЗначениеСубконто <> Неопределено и ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
					СоответствиеФизлица.Вставить(ЗначениеСубконто, "");
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;

КонецПроцедуры

// Процедура заполняет реквизит Физлицо в документе. Значение реквизита получается из Сотрудника.
//
Процедура ПередЗаписьюДокументаЗаполнитьФизЛицоВШапке(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиОрганизаций.Физлицо
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
	Запрос.УстановитьПараметр("Сотрудник",	Источник.Сотрудник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Источник.Физлицо = Выборка.Физлицо;
	КонецЕсли;
	
КонецПроцедуры
