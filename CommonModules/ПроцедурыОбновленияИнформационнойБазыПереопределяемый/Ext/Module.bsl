
// Процедура выполняет первоначальное заполнение информационной базы 
//
// Параметры:
//  ДокументОписаниеОбновлений - табличный документ, в который выводится описание обновлений.
//  МакетОписаниеОбновлений    - макет "ОписаниеОбновлений" с заполненными параметрами.
//
Процедура ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт

	// Обязательное начальное заполнение информационной базы.

	// Заполнение справочника Валюты.
	ВалютаРегламентированногоУчета = 
	ПроцедурыОбновленияИнформационнойБазы.НайтиСоздатьВалюту("398", "KZT", "Тенге"	 , "тенге, тенге, тенге, м, тиын, тиын, тиын, ж, 2");
	ВалютаУправленческогоУчета = 
	ПроцедурыОбновленияИнформационнойБазы.НайтиСоздатьВалюту("840", "USD", "Доллар США", "доллар, доллара, долларов, м, цент, цента, центов, м, 2");
	ПроцедурыОбновленияИнформационнойБазы.НайтиСоздатьВалюту("978", "EUR", "Евро"      , "евро, евро, евро, м, цент, цента, центов, м, 2");

	// Заполнение сведений бухгалтерского учета.
//    УстановитьПараметрыСчетовБУ("Типовой");
	ЗаполнитьСпособыОтраженияЗарплатыВРеглУчете();
//	ЗаполнитьСправочникСубконто("ВидыСубконтоТиповые");
	
	// Заполнение сведений о налогах, сборах и отчислениях
//	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьНалогиСборыОтчисления();
//	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьКоэффициентыСтавкиРефинансированияНБДляРасчетаПени();
//	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьСрокиПеречисленияНалоговСборовОтчислений();
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьВидыДоходов();
	
	// Заполнение сведений по заработной плате и учету персонала
	ЗаполнитьКлассификаторИспользованияРабочегоВремени();
	ЗаполнитьПланыВидовРасчетаОрганизации();
	ЗаполнитьСхемыМотивации(ВалютаРегламентированногоУчета);
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьСведенияОСтавкахИПНиСН();
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьСведенияОРегламентированныхРасчетныхПоказателях();
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьСведенияОСтавкеРефинансированияНБ();
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьСправочникВоинскихЗваний();
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьОснованияУвольнения();
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьСведенияОВычетахПоДоходам();
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьСписокРегламентированныхОтчетов(Ложь);
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьФормыОбучения();
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьВидыТрудовыхОтпусков();
	
	// Заполнение справочников "Шкалы оценок компетенций"
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьСправочникШкалОценок();

	// Заполнение свойств
	НайтиСоздатьПВХ("0001","Помещение",Новый ОписаниеТипов("СправочникСсылка.Помещения"));
	
	// Заполнение данных для механизма контактной информации
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию();
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьСправочникВидыКонтактнойИнформации();

	//Заполнение справочника "Графики работы"
	Пятидневка40 = Справочники.ГрафикиРаботы.НайтиПоНаименованию("Пятидневка 40");
	Если Пятидневка40 = Справочники.ГрафикиРаботы.ПустаяСсылка() Тогда 
		Пятидневка40 = Справочники.ГрафикиРаботы.СоздатьЭлемент();
		Пятидневка40.Наименование = "Пятидневка 40";
		Пятидневка40.ВидГрафика = Перечисления.ВидыРабочихГрафиков.Пятидневка;
		Пятидневка40.УчитыватьПраздники = Истина;
		Пятидневка40.ДлительностьРабочейНедели = 40;
		Пятидневка40.ШаблонЗаполнения = Перечисления.ШаблонЗаполненияГрафикаРаботы.Пятидневка40;
		Пятидневка40.НачалоДневныхЧасов = Дата(1,1,1,6,0,0);
		Пятидневка40.НачалоНочныхЧасов = Дата(1,1,1,22,0,0);
		Пятидневка40.ПервыйВыходной = Перечисления.ДниНедели.Суббота;
		Пятидневка40.ВторойВыходной = Перечисления.ДниНедели.Воскресенье;
        Пятидневка40.ПериодыСмены.Очистить();
		Для ИндексДня = 0 По 4 Цикл
			Смена = Пятидневка40.ПериодыСмены.Добавить();
			Смена.ВремяНачала = Дата(1,1,1,8,0,0);
			Смена.ВремяОкончания = Дата(1,1,1,16,0,0);
			Смена.ДеньНедели = Перечисления.ДниНедели[ИндексДня];
		КонецЦикла;
		Пятидневка40.Записать();
	КонецЕсли;
	Пятидневка40 = Пятидневка40.Ссылка;

	//Заполнить реквизиты предопределенных смен
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьПредопределенныеСмены();

	// Заполнение констант.
//	ПроцедурыОбновленияИнформационнойБазы.УстановитьКонстанту("ВалютаРегламентированногоУчета"          , ВалютаРегламентированногоУчета);
//	ПроцедурыОбновленияИнформационнойБазы.УстановитьКонстанту("ВалютаУправленческогоУчета"              , ВалютаУправленческогоУчета);
//	ПроцедурыОбновленияИнформационнойБазы.УстановитьКонстанту("ИспользованиеВстроенногоПочтовогоКлиента", Истина);
	ПроцедурыОбновленияИнформационнойБазы.УстановитьКонстанту("ОсновнойГрафикРаботыПредприятия"		  , Пятидневка40);
	ПроцедурыОбновленияИнформационнойБазы.УстановитьКонстанту("ИспользоватьУправленческийУчет"		  , Истина);
//	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьПараметрыКонстантыОбращенияВОтделТехническойПоддержки();

	// Заполнение справочника "Организации"
	Организация = Справочники.Организации.НайтиПоНаименованию("Укажите наименование Вашей организации");
	Если Организация = Справочники.Организации.ПустаяСсылка() Тогда
		Организация = Справочники.Организации.СоздатьЭлемент();
		Организация.Наименование		= "Укажите наименование Вашей организации";
		Организация.Записать();
	КонецЕсли;
	ОрганизацияПервоначальногоЗаполнения = Организация.Ссылка;

	//Заполняем сведения по УчетнаяПолитикаНалоговыйУчет Организации 
	//ЗаполнитьРегистрыУчетнойПолитикиПоУмолчанию(Организация.Ссылка);
	
	// Заполняем сведения о предоставляемых отпусках
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьСведенияОПредостаавляемыхОтпусках(Организация.Ссылка);

	// Заполнение справочника "Классификатор стран мира"
//	ПроцедурыОбновленияИнформационнойБазы.НачальноеЗаполнениеСправочникаКлассификаторСтранМира();
	
	// Заполнение данных о коэффициентах сверхнормативных работ
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьСведенияОКоэффициентахОплатыСверхнормативныхРабот();

	// Заполнение полного наименования предопределенным элементам справочника "Виды деятельности"
	ПроцедурыОбновленияИнформационнойБазы.УстановитьПолноеНаименованиеВидыДеятельности();
	
	// Обработка предопределенных элементов справочника "Сохраненные настройки";
	ПроцедурыОбновленияИнформационнойБазы.ЗагрузитьНастройкиОтчетов();
	
	// Заполнение реквизита "ВидОбработки" предопределенного элемента "ОбработкаФормированияSWIFTФайла" справочника "Внешние обработки"
	ОбработкаФормированияSWIFTФайла = Справочники.ВнешниеОбработки.ОбработкаФормированияSWIFTФайла.ПолучитьОбъект();
	ОбработкаФормированияSWIFTФайла.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
	ОбработкаФормированияSWIFTФайла.ВнешнийОбъектИспользовать = Ложь;
	Попытка
		ОбработкаФормированияSWIFTФайла.ОбменДанными.Загрузка = Истина;
		ОбработкаФормированияSWIFTФайла.Записать();
	Исключение
		Сообщить(" при записи элемента справочника Внешние обработки произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;

	//#Если ТолстыйКлиентОбычноеПриложение Тогда
	//	// Вывод строк описания обновлений.	
	//	ДокументОписаниеОбновлений.НачатьГруппуСтрок("Заполнение пустой ИБ");
	//	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("ЗаполнениеПустойИБ"));
	//	ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
	//	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
	//#КонецЕсли
	
	СправочникОбъект = Справочники.ВычетыИПН.СтраховыеПремииПоДоговорамНакопительногоСтрахования.ПолучитьОбъект();
	СправочникОбъект.НеИспользуется = Истина;
	Попытка
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		СправочникОбъект.Записать();
	Исключение
		Сообщить("При записи элемента ""Страховые премии, вносимые в свою пользу физическим лицом по договорам накопительного страхования""
			|справочника ""Вычеты ИПН"" произошли ошибки:" + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;

	
	ПроцедурыОбновленияИнформационнойБазыДополнительный.ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений);

КонецПроцедуры // ЗаполнитьПустуюИБ()

Процедура ВыполнитьОбновление(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений = "", МакетОписаниеОбновлений = "") Экспорт
	
	ПроцедурыОбновленияИнформационнойБазыДополнительный.ВыполнитьОбновлениеСПредыдущихРелизов(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.4.9";
	
	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.3"
			ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.4")И ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Истина;
		
		//////////////////////////////////////////////////////////////////
		// НАЧАЛО 2.0.4

		// Механизм списания задолженности по заработной плате
		
		Сообщить("-----------------------");
		Сообщить("Учетная политика(налоговый учет) - заполнение нового ресурса ""Порядок списания задолженности по заработной плате""");

		Запрос = Новый Запрос;          
		Запрос.Текст = "
		|ВЫБРАТЬ 
		|     УчетнаяПолитикаНУ.Период,
		|     УчетнаяПолитикаНУ.Организация 
		|ИЗ
		|     РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНУ
		|";

		Выборка = Запрос.Выполнить().Выбрать();

		МенеджерЗаписи = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СоздатьМенеджерЗаписи();

		Пока Выборка.Следующий() Цикл
		   МенеджерЗаписи.Период = Выборка.Период;
		   МенеджерЗаписи.Организация = Выборка.Организация;               
		   МенеджерЗаписи.Прочитать();
		   
		   МенеджерЗаписи.ПорядокСписанияЗадолженностиПоЗарплате = Перечисления.ПорядокСписанияЗадолженностиПоЗарплате.ПоСпособуЗаполненияДокумента;                              
		   
		   Попытка
				МенеджерЗаписи.Записать();
		   Исключение
				Сообщить("  Учетная политика(налоговый учет) - при заполнении нового ресурса ""Порядок списания задолженности по заработной плате"" произошла ошибка" + ОписаниеОшибки());
		   КонецПопытки;                       
		КонецЦикла;                     

		Сообщить("Учетная политика(налоговый учет) - заполнение нового ресурса ""Порядок списания задолженности по заработной плате"" закончено");
		
		// Установка значений ставки рефенансирования
		
		// с 14 февраля 2012 ставка рефинансирования НБ = 7%, с 10 августа - 7,5%
		Сообщить("-----------------------");
		Сообщить("Установка значений ставки рефинансирования НацБанка Казахстана: с 14 февраля 2012 - 7%, с 02 апреля 2012 - 6,5%, с 04 июня 2012 - 6%");
		
		НаборЗаписей = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
		
		ТЗНабор = НаборЗаписей.ВыгрузитьКолонки();
		
		НоваяСтрока = ТЗНабор.Добавить();
		НоваяСтрока.Период = '2012-02-14';
		НоваяСтрока.Размер = 7;
		
		НоваяСтрока = ТЗНабор.Добавить();
		НоваяСтрока.Период = '2012-04-02';
		НоваяСтрока.Размер = 6.5;
		
		НоваяСтрока = ТЗНабор.Добавить();
		НоваяСтрока.Период = '2012-06-04';
		НоваяСтрока.Размер = 6;
		
		Для Каждого СтрокаТЗ Из ТЗНабор Цикл
		
			НаборЗаписей.Очистить();
			НаборЗаписей.Отбор.Период.Установить(СтрокаТЗ.Период);
			
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, СтрокаТЗ);
			ЗаписьНабора.Активность = Истина;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Сообщить("   при установке ставки на дату " +СтрокаТЗ.Период+ " произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
		
		КонецЦикла;
		
		Сообщить("Установка значений ставки рефинансирования НацБанка Казахстана завершена");
		
		Сообщить("-----------------------");
		Сообщить("Обработка предопределенных элементов справочника ""Сохраненные настройки""");

		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("СписокПервоначальнойПостановкиНаВоинскийУчет",    "СпискиРаботниковОрганизаций");
		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("СписокГражданПодлежащихПостановкеНаВоинскийУчет", "СпискиРаботниковОрганизаций");
		
		Сообщить("Обработка предопределенных элементов справочника ""Сохраненные настройки"" завершена.");
		
		// КОНЕЦ 2.0.4
		//////////////////////////////////////////////////////////////////
	
		ПроцедурыОбновленияИнформационнойБазыДополнительный.ВыполнитьОбновлениеНаРелиз_2_0_4_9(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("204", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
				
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;

	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.5.6";
	
	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.4"
			ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.5")И ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//////////////////////////////////////////////////////////////////
		// НАЧАЛО 2.0.5
		
		// Установка нового праздника 7 мая - День защитника Отечества
		Сообщить("-----------------------");
		Сообщить("Изменение производственного календаря: установка нового праздника 7 мая - День защитника Отечества");
		Сообщить("Изменение производственного календаря: установка 15 октября - первого дня Курбан-айта");
		
		НаборЗаписей = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьНаборЗаписей();
		НаборЗаписейГрафики = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
		
		ТЗКалендаря = НаборЗаписей.ВыгрузитьКолонки();
		
		// День защитника Отечества - 07.05.2013
		НоваяСтрока = ТЗКалендаря.Добавить();
		НоваяСтрока.ДатаКалендаря = Дата(2013, 05, 07);
		НоваяСтрока.Год = 2013;
		НоваяСтрока.Пятидневка = 0;
		НоваяСтрока.Шестидневка = 0;
		НоваяСтрока.КалендарныеДни = 0;
		НоваяСтрока.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник;

		// Первый день Курбан-айт - 15.10.2013
		НоваяСтрока = ТЗКалендаря.Добавить();
		НоваяСтрока.ДатаКалендаря = Дата(2013, 10, 15);
		НоваяСтрока.Год = 2013;
		НоваяСтрока.Пятидневка = 0;
		НоваяСтрока.Шестидневка = 0;
		НоваяСтрока.КалендарныеДни = 1;
		НоваяСтрока.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.ДополнительныйВыходной;
		
		Для Каждого СтрокаКалендаря Из ТЗКалендаря Цикл
			
			НаборЗаписей.Отбор.ДатаКалендаря.Установить(СтрокаКалендаря.ДатаКалендаря, Истина);
			
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда
				// переносим ресурсы
				ЗаписьНабора = НаборЗаписей[0];
				
				ЗаписьНабора.Пятидневка 	= СтрокаКалендаря.Пятидневка;
				ЗаписьНабора.Шестидневка 	= СтрокаКалендаря.Шестидневка;
				ЗаписьНабора.КалендарныеДни = СтрокаКалендаря.КалендарныеДни;
				ЗаписьНабора.ВидДня 		= СтрокаКалендаря.ВидДня;
				
				Попытка 
					НаборЗаписей.ОбменДанными.Загрузка = Истина;
					НаборЗаписей.Записать();
				Исключение
					Сообщить("  при записи календаря за " + СтрокаКалендаря.ДатаКалендаря + " произошла ошибка: " + ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
		
			// теперь графики работы
			НаборЗаписейГрафики.Отбор.Дата.Установить(СтрокаКалендаря.ДатаКалендаря, Истина);
			НаборЗаписейГрафики.Прочитать();
			
			Для Каждого ЗаписьНабора Из НаборЗаписейГрафики Цикл
				
				ЗаписьНабора.ПроизводственныйКалендарьПятидневка 		= СтрокаКалендаря.Пятидневка;
				ЗаписьНабора.ПроизводственныйКалендарьШестидневка 		= СтрокаКалендаря.Шестидневка;
				ЗаписьНабора.ПроизводственныйКалендарьКалендарныеДни 	= СтрокаКалендаря.КалендарныеДни;
			
			КонецЦикла;
			
			Попытка
				Если НаборЗаписейГрафики.Модифицированность() Тогда
					НаборЗаписейГрафики.ОбменДанными.Загрузка = Истина;
					НаборЗаписейГрафики.Записать();
				КонецЕсли;
			Исключение
				Сообщить("  при записи графиков работы за " + СтрокаКалендаря.ДатаКалендаря + " произошла ошибка: " + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;
		
	    // с 6 августа 2012 г. ставка рефинансирования НБ = 5.5%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 6 августа 2012 - 5.5%.");

		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20120806', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20120806';
	 	СтрокаНабора.Размер = 5.5;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;

		
		// Удаление отчета РегламентированныйОтчетФорма1ТКвартальная и РегламентированныйОтчетФорма1ТМесячнаяПриложение1	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РегламентированныеОтчеты.Ссылка,
		               |	РегламентированныеОтчеты.ИсточникОтчета
		               |ИЗ
		               |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		               |ГДЕ
		               |	РегламентированныеОтчеты.ИсточникОтчета В(&СписокИсточниковОтчета)";
					   
		СписокИсточников =  Новый СписокЗначений;
		СписокИсточников.Добавить("РегламентированныйОтчетФорма1ТКвартальная");
		СписокИсточников.Добавить("РегламентированныйОтчетФорма1ТМесячнаяПриложение1");
					   
		Запрос.УстановитьПараметр("СписокИсточниковОтчета", СписокИсточников);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		МассивСсылок = Новый Массив(1);
		
		Пока Выборка.Следующий() Цикл
			
			МассивСсылок[0] = Выборка.Ссылка;
			ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
			Если ТаблицаСсылок.Количество() = 0 Тогда
				ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Попытка					
					ОтчетОбъект.Удалить();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			Иначе
				Сообщить("Регламентированный отчет " +  Выборка.Ссылка.Код + " " + """" + Выборка.Ссылка.Наименование + """" + " - не может быть удален, т.к. имеются ссылки в информационной базе" );
			КонецЕсли;	
			
		КонецЦикла;
		
		// Обновление справочника "Регламентированные отчеты"
		ПроцедурыОбновленияИнформационнойБазы.ОбновитьРегламентированныеОтчеты();
		
		// Переименовываем ссылки удаленных отчетов "1-Т Квартальная" и "1-Т Месячная. Приложение 1"
		// в документах "Регламентированный отчет" на вновь добавленные,
		// используемые до 2013 года.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РегламентированныйОтчет.Ссылка,
		               |	РегламентированныйОтчет.ИсточникОтчета
		               |ИЗ
		               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
		               |ГДЕ
		               |	РегламентированныйОтчет.ИсточникОтчета В(&СписокИсточниковОтчета)";
					   
		СписокИсточников =  Новый СписокЗначений;
		СписокИсточников.Добавить("РегламентированныйОтчетФорма1ТКвартальная");
		СписокИсточников.Добавить("РегламентированныйОтчетФорма1ТМесячнаяПриложение1");
					   
		Запрос.УстановитьПараметр("СписокИсточниковОтчета", СписокИсточников);
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Источник = Выборка.ИсточникОтчета;
			ОтчетОбъект.ИсточникОтчета = Источник + "До2013";
			Попытка
				ОтчетОбъект.ОбменДанными.Загрузка = Истина;
				ОтчетОбъект.Записать();
			Исключение				
				Сообщить("  при записи документа ""Регламентированный отчет"" """ + Выборка.Ссылка.Номер + """" + Выборка.Ссылка.НаименованиеОтчета + """" + " произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЦикла;

		// Установка размеров регламентированных показателей с 1 января 2013 года
		Сообщить("-----------------------");
		Сообщить("Установка размеров регламентированных показателей с 1 января 2013г.");
		
		ДатаСведений = '2013-01-01';
		
		НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ДатаСведений, Истина);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, ДатаСведений, 18660, 1731, 55*18660, 55*18660, 18660, 1731);
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи в регистр сведений ""Регламентированные расчетные показатели"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// Установка вычетов по доходам
		Сообщить("-----------------------");
		Сообщить("Обновление сведений о вычетах по частично облагаемым доходам");
		
		НаборЗаписей = РегистрыСведений.ВычетыПоДоходам.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Период.Установить(Дата("20130101"), Истина);
		
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20130101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 18660, 0);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20130101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 8*18660);
		
        Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи в регистр сведений ""Вычеты по доходам"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;

		
		// КОНЕЦ 2.0.5
		//////////////////////////////////////////////////////////////////
		
		ПроцедурыОбновленияИнформационнойБазыДополнительный.ВыполнитьОбновлениеНаРелиз_2_0_5(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("205", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
				
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;


	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.6.4";
	
	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.5"
			ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.6")И ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//////////////////////////////////////////////////////////////////
		// НАЧАЛО 2.0.6
		
		// Заполнение краткого состава документов для документов управленческой подсистемы
		Сообщить("-----------------------");
		Сообщить("Заполнение реквизита ""Краткий состав документа"" для документов управленческого учета");

        ВыполнитьЗаполнениеКраткогоСоставаУпрДокументов();
		
		// Заполнение реквизита "Валюты" для денежных показателей
		Сообщить("-----------------------");
		Сообщить("Заполнение реквизита ""Валюты"" для элементов справочника ""Показатели схем мотиваций"" с типом показателей ""Денежный""");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
		Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПоказателиСхемМотивации.Ссылка,
			|	ВЫБОР
			|		КОГДА НЕ РегламентированныеПоказатели.Показатель ЕСТЬ NULL 
			|			ТОГДА &ВалютаРеглУчета
			|		КОГДА НЕ УправленческиеПоказатели.Показатель ЕСТЬ NULL 
			|			ТОГДА &ВалютаУпрУчета
			|		ИНАЧЕ &ВалютаРеглУчета
			|	КОНЕЦ КАК ВалютаЗаполнения
			|ИЗ
			|	Справочник.ПоказателиСхемМотивации КАК ПоказателиСхемМотивации
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			|			СписокПоказателей.Показатель КАК Показатель
			|		ИЗ
			|			(ВЫБРАТЬ
			|				ОсновныеНачисленияОрганизацийПоказатели.Показатель КАК Показатель
			|			ИЗ
			|				ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ОсновныеНачисленияОрганизацийПоказатели
			|			
			|			ОБЪЕДИНИТЬ ВСЕ
			|			
			|			ВЫБРАТЬ
			|				ДополнительныеНачисленияОрганизацийПоказатели.Показатель
			|			ИЗ
			|				ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК ДополнительныеНачисленияОрганизацийПоказатели
			|			
			|			ОБЪЕДИНИТЬ ВСЕ
			|			
			|			ВЫБРАТЬ РАЗЛИЧНЫЕ
			|				УдержанияОрганизацийПоказатели.Показатель
			|			ИЗ
			|				ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК УдержанияОрганизацийПоказатели) КАК СписокПоказателей) КАК РегламентированныеПоказатели
			|		ПО ПоказателиСхемМотивации.Ссылка = РегламентированныеПоказатели.Показатель
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			|			СписокПоказателей.Показатель КАК Показатель
			|		ИЗ
			|			(ВЫБРАТЬ
			|				УправленческиеНачисленияПоказатели.Показатель КАК Показатель
			|			ИЗ
			|				ПланВидовРасчета.УправленческиеНачисления.Показатели КАК УправленческиеНачисленияПоказатели
			|			
			|			ОБЪЕДИНИТЬ ВСЕ
			|			
			|			ВЫБРАТЬ
			|				УправленческиеУдержанияПоказатели.Показатель
			|			ИЗ
			|				ПланВидовРасчета.УправленческиеУдержания.Показатели КАК УправленческиеУдержанияПоказатели) КАК СписокПоказателей) КАК УправленческиеПоказатели
			|		ПО ПоказателиСхемМотивации.Ссылка = УправленческиеПоказатели.Показатель
			|ГДЕ
			|	ПоказателиСхемМотивации.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Денежный)
			|	И ПоказателиСхемМотивации.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)";
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ПоказательОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПоказательОбъект.Валюта = Выборка.ВалютаЗаполнения;
			
			Попытка
				ПоказательОбъект.ОбменДанными.Загрузка = Истина;
				ПоказательОбъект.Записать();
			Исключение
				Сообщить("При попытке записать объект " + ПоказательОбъект + " произошла ошибка: " + ОписаниеОшибки());
			КонецПопытки;
						
		КонецЦикла;
		
		
		// КОНЕЦ 2.0.6
		//////////////////////////////////////////////////////////////////
		
		ПроцедурыОбновленияИнформационнойБазыДополнительный.ВыполнитьОбновлениеНаРелиз_2_0_6(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("206", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
				
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;

	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.7.15";
	
	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.6"
			ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.7")И ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//////////////////////////////////////////////////////////////////
		// НАЧАЛО 2.0.7
		
		ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Истина;
		
		// Заполним новый справочник "Виды доходов" и значения в регистре "Учет налогообложения по видам доходов"
		ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьВидыДоходов();
		
		// Заполним виды доходов для существующих начислений
		Сообщить("-----------------------");
		Сообщить("Заполнение видов доходов начислений в планах видов расчета ""Основные начисления организаций"" и ""Дополнительные начисления организаций""."); 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОсновныеНачисленияОрганизаций.Ссылка
			|ИЗ
			|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
			|ГДЕ
			|	ОсновныеНачисленияОрганизаций.ВидДохода = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДополнительныеНачисленияОрганизаций.Ссылка
			|ИЗ
			|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
			|ГДЕ
			|	ДополнительныеНачисленияОрганизаций.ВидДохода = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ПустаяСсылка)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ДоходыОтРаботодателя = Справочники.ВидыДоходов.ДоходыОтРаботодателя;
		Пока Выборка.Следующий() Цикл 
			ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ВидРасчетаОбъект.ВидДохода = ДоходыОтРаботодателя;
			Попытка
				ВидРасчетаОбъект.ОбменДанными.Загрузка = Истина;
				ВидРасчетаОбъект.Записать();
			Исключение
				Сообщить("При записи вида расчета """ + ВидРасчетаОбъект.Наименование + """ произошли ошибки: " + Символы.ПС + 
							ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;

		
		// Удаляем ставки ИПН из РС "Сведения о ставках налогов, сборов, отчислений"
		// и заполняем новые в РС "Сведения о ставках ИПН" в рарезе видов доходов
		Сообщить("-----------------------");
		Сообщить("Заполнение сведений о ставках ИПН по видам доходов"); 
		
		// Заполним ставки ИПН с 2009 года
		НаборЗаписейСведенияОСтавкахИПН = РегистрыСведений.СведенияОСтавкахИПН.СоздатьНаборЗаписей();
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		ВидыДоходов = Справочники.ВидыДоходов;
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейСведенияОСтавкахИПН, '20090101', ПустаяОрганизация, ВидыДоходов.ДоходыОтРаботодателя, 10, 15);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейСведенияОСтавкахИПН, '20110101', ПустаяОрганизация, ВидыДоходов.ДоходыОтРаботодателя, 10, 20);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейСведенияОСтавкахИПН, '20120101', ПустаяОрганизация, ВидыДоходов.ДоходыОтРаботодателя, 10, 10);
	 	ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейСведенияОСтавкахИПН, '20090101', ПустаяОрганизация, ВидыДоходов.Дивиденды, 			  5,  15);
	   	ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейСведенияОСтавкахИПН, '20090101', ПустаяОрганизация, ВидыДоходов.Выигрыши, 			  10, 15);
	 	ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейСведенияОСтавкахИПН, '20110101', ПустаяОрганизация, ВидыДоходов.Выигрыши, 			  10, 20);
	  	ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейСведенияОСтавкахИПН, '20090101', ПустаяОрганизация, ВидыДоходов.Вознаграждения, 	  10, 15);
	   	ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейСведенияОСтавкахИПН, '20090101', ПустаяОрганизация, ВидыДоходов.ПрочиеДоходы, 		  10, 15);
	 	ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейСведенияОСтавкахИПН, '20110101', ПустаяОрганизация, ВидыДоходов.ПрочиеДоходы, 		  10, 20);

		Попытка
			НаборЗаписейСведенияОСтавкахИПН.ОбменДанными.Загрузка = Истина;
			НаборЗаписейСведенияОСтавкахИПН.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Сведения о ставках ИПН"" произошли ошибки: " + Символы.ПС + 
						ОписаниеОшибки());
		КонецПопытки;
		
		// Заполняем новый регистр по заданным ставкам для налогоплательщиков
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СведенияОСтавкахНалоговСборовОтчислений.Период КАК Период,
			|	СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик КАК Налогоплательщик,
			|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка,
			|	МАКСИМУМ(ЕСТЬNULL(СведенияОСтавкахИПН.Период, СведенияОСтавкахНалоговСборовОтчислений.Период)) КАК ПериодИПН
			|ПОМЕСТИТЬ ВТ_ПериодыИПН
			|ИЗ
			|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахИПН КАК СведенияОСтавкахИПН
			|		ПО СведенияОСтавкахНалоговСборовОтчислений.Период >= СведенияОСтавкахИПН.Период
			|			И (СведенияОСтавкахИПН.ВидДохода = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя))
			|			И (СведенияОСтавкахИПН.Налогоплательщик = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
			|ГДЕ
			|	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог)
			|	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	СведенияОСтавкахНалоговСборовОтчислений.Период,
			|	СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик,
			|	СведенияОСтавкахНалоговСборовОтчислений.Ставка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПериодыСтавокИПН.Период КАК Период,
			|	ПериодыСтавокИПН.Налогоплательщик КАК Налогоплательщик,
			|	ПериодыСтавокИПН.Ставка,
			|	ЕСТЬNULL(СведенияОСтавкахИПН.СтавкаНерезиденты,0) КАК СтавкаНерезиденты
			|ИЗ
			|	ВТ_ПериодыИПН КАК ПериодыСтавокИПН
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахИПН КАК СведенияОСтавкахИПН
			|		ПО ПериодыСтавокИПН.ПериодИПН = СведенияОСтавкахИПН.Период
			|			И (СведенияОСтавкахИПН.Налогоплательщик = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
			|			И (СведенияОСтавкахИПН.ВидДохода = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя))
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ПериодыСтавокИПН.ПериодИПН,
			|	ПериодыСтавокИПН.Налогоплательщик,
			|	ПериодыСтавокИПН.Ставка,
			|	ЕСТЬNULL(СведенияОСтавкахИПН.СтавкаНерезиденты,0)
			|ИЗ
			|	ВТ_ПериодыИПН КАК ПериодыСтавокИПН
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахИПН КАК СведенияОСтавкахИПН
			|		ПО ПериодыСтавокИПН.ПериодИПН = СведенияОСтавкахИПН.Период
			|			И (СведенияОСтавкахИПН.Налогоплательщик = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
			|			И (СведенияОСтавкахИПН.ВидДохода = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя))
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период,
			|	Налогоплательщик";
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаНабора = НаборЗаписейСведенияОСтавкахИПН.Добавить();
		    СтрокаНабора.Период = Выборка.Период;
		    СтрокаНабора.ВидДохода = Справочники.ВидыДоходов.ДоходыОтРаботодателя;
		    СтрокаНабора.Налогоплательщик = Выборка.Налогоплательщик;
		    СтрокаНабора.Ставка = Выборка.Ставка;
		    СтрокаНабора.СтавкаНерезиденты = Выборка.СтавкаНерезиденты;
		КонецЦикла;
		
		Попытка
			НаборЗаписейСведенияОСтавкахИПН.ОбменДанными.Загрузка = Истина;
			НаборЗаписейСведенияОСтавкахИПН.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Сведения о ставках ИПН"" произошли ошибки: " + Символы.ПС + 
						ОписаниеОшибки());
		КонецПопытки;
		
		
		// Удаляем старые ставки
		НаборЗаписейСведенияОСтавках = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
		НаборЗаписейСведенияОСтавках.Отбор.ВидНалога.Установить(Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, Истина);
        НаборЗаписейСведенияОСтавках.Очистить();
		
		Попытка
			НаборЗаписейСведенияОСтавках.ОбменДанными.Загрузка = Истина;
			НаборЗаписейСведенияОСтавках.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Сведения о ставках налогов, сборов, отчслений"" произошли ошибки: " + Символы.ПС + 
						ОписаниеОшибки());
		КонецПопытки;
		
		// Заполним размеры вычетов для нового способа налогообложения "Облагается частично согласно пп. 9 п. 1 ст. 156 (выигрыши по лотерее)"
		// (заполнение производим только с 2009 года, поскольку ранее выигрыши не рассчитывались)
		
		НаборЗаписейВычеты = РегистрыСведений.ВычетыПоДоходам.СоздатьНаборЗаписей();
		НаборЗаписейВычеты.Отбор.СпособНалогообложения.Установить(Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписейВычеты, Дата("20090101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 0.5*13471, 0);
	    ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписейВычеты, Дата("20100101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 0.5*14952, 0);
	    ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписейВычеты, Дата("20110101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 0.5*15999, );
	    ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписейВычеты, Дата("20120101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 0.5*17439, 0);
	    ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписейВычеты, Дата("20130101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 0.5*18660, 0);
		
		Попытка
			НаборЗаписейВычеты.Записать(Истина);
		Исключение
			Сообщить("При записи данных регистра сведений ""Вычеты к доходам"" произошли ошибки: " + Символы.ПС + 
						ОписаниеОшибки());
		КонецПопытки;	
		
		
		//Обновляет коды элементов справочника "Смены" в случае, если код предопределенного и 
		//пользовательского элемента совпадают		
		Сообщить("-----------------------");
		Сообщить("Перенумерация элементов справочника ""Смены"""); 
		ПроцедурыОбновленияИнформационнойБазы.УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("Смены");
		
		// Заполняет время для предопределенного элемента "Смена 24 часа" в справочнике "Смены"
		Сообщить("-----------------------");
		Сообщить("Заполнение периодов смены для предопределенной смены ""Смена 24 часа"" в справочнике ""Смены""");		
		ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьПредопределенныеСмены();
		
		// Приводит время начала и время окончания смены к целому значению, если секунды = 59
		Сообщить("-----------------------");
		Сообщить("Обновление времени в периодах смен справочника ""Смены"" - приведение к целому значению в случае, если секунды у времени = 59, за исключением времени 23:59:59");
		ОбновитьВремяВСправочникеСмены();
		
		// обработка справочника "Графики работы"
		Сообщить("-----------------------");
		Сообщить("Заполнение реквизитов ""Учитывать праздники"" и ""Учитывать ночные часы"" в справочнике ""Графики работы""");
			
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ночные", 	Перечисления.ВидыУчетаВремени.ПоНочнымЧасам);
		
		Запрос.Текст = "ВЫБРАТЬ
						|	ГрафикиРаботы.Ссылка КАК ГрафикРаботы,
						|	ГрафикиРаботы.ВидГрафика,
						|	СУММА(ЕСТЬNULL(ГрафикиРаботыПоВидамВремениНочные.ОсновноеЗначение,0)) КАК НочныеЧасы
						|ИЗ
						|	Справочник.ГрафикиРаботы КАК ГрафикиРаботы
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремениНочные
						|		ПО ГрафикиРаботы.Ссылка = ГрафикиРаботыПоВидамВремениНочные.ГрафикРаботы
						|			И (ГрафикиРаботыПоВидамВремениНочные.ВидУчетаВремени = &Ночные)
						|			И (ГрафикиРаботыПоВидамВремениНочные.ОсновноеЗначение <> 0)
						|
						|СГРУППИРОВАТЬ ПО
						|	ГрафикиРаботы.Ссылка,
						|	ГрафикиРаботы.ВидГрафика";
						
		Выборка = Запрос.Выполнить().Выбрать();
			
		Пока Выборка.Следующий() Цикл
				
			ГрафикРаботыОбъект = Выборка.ГрафикРаботы.ПолучитьОбъект();
			
			Если Выборка.ВидГрафика = Перечисления.ВидыРабочихГрафиков.Пятидневка 
				ИЛИ Выборка.ВидГрафика = Перечисления.ВидыРабочихГрафиков.Шестидневка Тогда
				ГрафикРаботыОбъект.УчитыватьПраздники = Истина;			
				ГрафикРаботыОбъект.УчитыватьНочныеЧасы = Истина;
			Иначе
				ГрафикРаботыОбъект.УчитыватьПраздники = Ложь;
				Если Выборка.НочныеЧасы > 0 Тогда
					ГрафикРаботыОбъект.УчитыватьНочныеЧасы = Истина;
				Иначе
					ГрафикРаботыОбъект.УчитыватьНочныеЧасы = Ложь;
				КонецЕсли;                                         			
			КонецЕсли;				
		
			Попытка
				ГрафикРаботыОбъект.ОбменДанными.Загрузка = Истина;
				ГрафикРаботыОбъект.Записать();
			Исключение
				Сообщить("При попытке записать объект " + ГрафикРаботыОбъект + " произошла ошибка: " + ОписаниеОшибки());
			КонецПопытки;
							
		КонецЦикла;                   
		
		// обработка справочника "Графики работы"
		Сообщить("-----------------------");
		Сообщить("Дозаполнение отсутствующих дней недели в справочнике ""Графики работы"" для видов графиков ""Пятидневка"" и ""Шестидневка""");
				
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сменный", 	Перечисления.ВидыРабочихГрафиков.Сменный);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ГрафикиРаботыПериодыСмены.Ссылка,
		               |	ГрафикиРаботыПериодыСмены.ДеньНедели,
		               |	ИСТИНА КАК ЕстьЗначение
		               |ПОМЕСТИТЬ ВТ_Графики
		               |ИЗ
		               |	Справочник.ГрафикиРаботы.ПериодыСмены КАК ГрафикиРаботыПериодыСмены
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ДниНедели КАК ДниНедели
		               |		ПО ГрафикиРаботыПериодыСмены.ДеньНедели = ДниНедели.Ссылка
		               |ГДЕ
		               |	ГрафикиРаботыПериодыСмены.Ссылка.ВидГрафика <> &Сменный
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ГрафикиРаботы.Ссылка,
		               |	ДниНедели.Ссылка,
		               |	ЛОЖЬ
		               |ИЗ
		               |	Справочник.ГрафикиРаботы КАК ГрафикиРаботы
		               |		ПОЛНОЕ СОЕДИНЕНИЕ Перечисление.ДниНедели КАК ДниНедели
		               |		ПО (ИСТИНА)
		               |ГДЕ
		               |	ГрафикиРаботы.ВидГрафика <> &Сменный
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ГрафикиСОтсутствующимиДнямиНедели.Ссылка КАК ГрафикРаботы,
		               |	ГрафикиСОтсутствующимиДнямиНедели.ДеньНедели КАК ДеньНедели,
		               |	МАКСИМУМ(ГрафикиСОтсутствующимиДнямиНедели.ЕстьЗначение) КАК ЕстьЗначение
		               |ИЗ
		               |	ВТ_Графики КАК ГрафикиСОтсутствующимиДнямиНедели
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ГрафикиСОтсутствующимиДнямиНедели.Ссылка,
		               |	ГрафикиСОтсутствующимиДнямиНедели.ДеньНедели
		               |
		               |ИМЕЮЩИЕ
		               |	МАКСИМУМ(ГрафикиСОтсутствующимиДнямиНедели.ЕстьЗначение) = ЛОЖЬ
		               |ИТОГИ ПО
		               |	ГрафикРаботы";
						
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
		Пока Выборка.Следующий() Цикл
				
			ГрафикРаботыОбъект = Выборка.ГрафикРаботы.ПолучитьОбъект();
			
			ПериодыСмены = ГрафикРаботыОбъект.ПериодыСмены;
			
			ВыборкаПоДнямНедели = Выборка.Выбрать();
			
			Пока ВыборкаПоДнямНедели.Следующий() Цикл
				
				НоваяСтрока = ПериодыСмены.Добавить();
				НоваяСтрока.ДеньНедели = ВыборкаПоДнямНедели.ДеньНедели;
				НоваяСтрока.ВремяНачала = '00010101000000';
				НоваяСтрока.ВремяОкончания = '00010101000000';
				
			КонецЦикла;
						
			Попытка
				ГрафикРаботыОбъект.ОбменДанными.Загрузка = Истина;
				ГрафикРаботыОбъект.Записать();
			Исключение
				Сообщить("При попытке записать объект " + ГрафикРаботыОбъект + " произошла ошибка: " + ОписаниеОшибки());
			КонецПопытки;
							
		КонецЦикла;

		// Заполнение в банковских счетах организаций процента комиссии из банка
	    Сообщить("-----------------------");
		Сообщить("Перенос процента банковской комиссии в справочник ""Банковские счета""");
			
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	БанковскиеСчета.Ссылка,
		|	БанковскиеСчета.Наименование,
		|	ЕСТЬNULL(БанковскиеСчета.Банк.ПроцентКомиссии, 0) КАК ПроцентКомиссии
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.ПроцентКомиссии = 0
		|	И ЕСТЬNULL(БанковскиеСчета.Банк.ПроцентКомиссии, 0) <> 0
		|	И БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации
		|";

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
				
			#Если Клиент Тогда
			Состояние("Обрабатывается " + Выборка.Наименование);
			#КонецЕсли
				
			Попытка
				СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
				СпрОбъект.ПроцентКомиссии = Выборка.ПроцентКомиссии;
					
				СпрОбъект.ОбменДанными.Загрузка = Истина;
				СпрОбъект.Записать();
					
			Исключение
				Сообщить("  при записи " + Выборка.Наименование + " произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЦикла;      
		
		// Добавление в документ "Платежное поручение исходящее" суммы комиссии в виде отдельного реквизита		
		Сообщить("-----------------------");
		Сообщить("Заполнение нового реквизита ""Сумма комиссии"" и ""Процент комиссии"" в платежных поручениях исходящих на перечисление зарплаты");
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПлатежноеПоручение.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ПлатежноеПоручение.Ссылка) КАК ПредставлениеДок,
		|	ПлатежноеПоручение.Дата,
		|	ЕСТЬNULL(ПлатежноеПоручение.СчетКонтрагента.Банк.ПроцентКомиссии, 0) КАК ПроцентКомиссии,
		|	ЕСТЬNULL(ИтогиЗП.СуммаКВыплате, 0) КАК СуммаПлатежа
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручение
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							ПеречислениеЗП.Ссылка,
		|							СУММА(ПеречислениеЗП.СуммаКВыплате) КАК СуммаКВыплате
		|						ИЗ
		|							Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПеречислениеЗП
		|						ГДЕ
		|							ПеречислениеЗП.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты)
		|						СГРУППИРОВАТЬ ПО
		|							ПеречислениеЗП.Ссылка) КАК ИтогиЗП
		|		ПО ПлатежноеПоручение.Ссылка = ИтогиЗП.Ссылка
		|
		|ГДЕ
		|	ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты)
		|	И ПлатежноеПоручение.ВключатьКомиссиюБанка = ИСТИНА
		|	И ПлатежноеПоручение.СуммаКомиссии = 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПлатежноеПоручение.Дата
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		КоличествоСтрок = Выборка.Количество();
		НомерПП = 0;
		
		Пока Выборка.Следующий() Цикл
		
			НомерПП = НомерПП + 1;
		
			#Если Клиент Тогда
			Состояние("" + НомерПП + " из " + КоличествоСтрок + ": " + Выборка.ПредставлениеДок);
			#КонецЕсли
			
			Попытка
				ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокОбъект.СуммаКомиссии = ДокОбъект.СуммаДокумента - Выборка.СуммаПлатежа;
				ДокОбъект.ПроцентКомиссии = Выборка.ПроцентКомиссии;
				
				// ранее комиссия была включена в сумму документа, теперь это разные поля
				ДокОбъект.СуммаДокумента = ДокОбъект.СуммаДокумента - ДокОбъект.СуммаКомиссии;
				
				ДокОбъект.ОбменДанными.Загрузка = Истина;
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			Исключение
				Сообщить("  при записи документа " + Выборка.ПредставлениеДок + " произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
		
		КонецЦикла;

		Сообщить("-----------------------");
		Сообщить("Обработка предопределенных элементов справочника ""Сохраненные настройки""");

		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РасчетныеЛисткиОрганизаций",    "РасчетныеЛисткиОрганизаций");
		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РасчетнаяВедомостьОрганизации", "РасчетныеВедомостиОрганизаций");
		

		
		// КОНЕЦ 2.0.7
		//////////////////////////////////////////////////////////////////
		
		ПроцедурыОбновленияИнформационнойБазыДополнительный.ВыполнитьОбновлениеНаРелиз_2_0_7(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("207", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
				
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.8.8";
	
	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.7"
			ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.8")И ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//////////////////////////////////////////////////////////////////
		// НАЧАЛО 2.0.8
		
		ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Истина;
		
		// Установка размеров регламентированных показателей с 1 января 2014 года
		Сообщить("-----------------------");
		Сообщить("Установка размеров регламентированных показателей с 1 января 2014г.");
		
		ДатаСведений = '2014-01-01';
		
		НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ДатаСведений, Истина);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, ДатаСведений, 19966, 1852, 55*19966, 55*19966, 19966, 1852);
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи в регистр сведений ""Регламентированные расчетные показатели"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// Установка вычетов по доходам
		Сообщить("-----------------------");
		Сообщить("Обновление сведений о вычетах по частично облагаемым доходам");
		
		НаборЗаписей = РегистрыСведений.ВычетыПоДоходам.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Период.Установить(Дата("20140101"), Истина);
		
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20140101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 19966, 0);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20140101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 8*19966);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20140101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 0.5*19966, 0);
		
        Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Вычеты по доходам"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;

		//--------------------------------------------------------------------------------
		// Обработка данных для механизма исчисления и учета ОППВ
		//--------------------------------------------------------------------------------
		
		// Заполним предопределенное значение ОППВ
		СправочникОбъект = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы.ПолучитьОбъект();
		СправочникОбъект.КодБК 							= "";
		СправочникОбъект.КодНазначенияПлатежа 			= "015";
		СправочникОбъект.НазначениеПлатежа 				= "Обязательные профессиональные пенсионные взносы за ";
		СправочникОбъект.Записать();

		// Дозаполнени регистра "Учет налогообложения по видам доходов"
		
		Сообщить("-----------------------");
		Сообщить("Заполнени регистра ""Учет налогообложения по видам доходов"" данными ОППВ");
		НаборЗаписейУчетНалогообложения = РегистрыСведений.УчетНалогообложенияПоВидамДоходов.СоздатьНаборЗаписей();
		НаборЗаписейУчетНалогообложения.Прочитать();
		
		// Значение учета ОППВ устанавливаем равным учету ОПВ
		Для Каждого ЗаписьНабора Из НаборЗаписейУчетНалогообложения Цикл
			ЗаписьНабора.УчитыватьОППВ = ЗаписьНабора.УчитыватьОПВ;
		КонецЦикла;
		
        Попытка
			НаборЗаписейУчетНалогообложения.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Учет налогообложения по видам доходов"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// Заполнение рекизита "Облагается ОППВ" в ПВР
		
		Сообщить("-----------------------");
		Сообщить("Заполнение новых реквизитов планов видов расчета.");
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОсновныеНачисленияОрганизаций.Ссылка
			|ИЗ
			|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
			|ГДЕ
			|	ОсновныеНачисленияОрганизаций.ОблагаетсяОППВ = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДополнительныеНачисленияОрганизаций.Ссылка
			|ИЗ
			|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
			|ГДЕ
			|	ДополнительныеНачисленияОрганизаций.ОблагаетсяОППВ = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)
			|";
			
		Выборка = Запрос.Выполнить().Выбрать();
		НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
		Пока Выборка.Следующий() Цикл
			ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ВидРасчетаОбъект.ОблагаетсяОППВ = НеОблагаетсяЦеликом;			
			Попытка
				ВидРасчетаОбъект.Записать();
			Исключение
				Сообщить("При записи вида расчета """ + ВидРасчетаОбъект.Наименование + """ произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЦикла;
		
		// Установим ставку ОППВ 5%
		Сообщить("-----------------------");
		Сообщить("Установка ставки ОППВ 5%.");
		
		НаборЗаписей = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидНалога.Установить(Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы, Истина);
		НаборЗаписей.Прочитать();
	    ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20140101', ПустаяОрганизация, Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы, 5);
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Сообщить("При записи данных регистра сведений ""Сведения о ставках налогов, сборов, отчслений"" произошли ошибки: " + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
		// Установим размер коэффициента ставки рефенансирования для расчета пени ОППВ
		Сообщить("-----------------------");
		Сообщить("Установка размера коэффициента ставки рефинансирования для ОППВ.");
		
		НаборЗаписей = РегистрыСведений.КоэффициентыСтавкиРефинансированияНБДляРасчетаПени.СоздатьНаборЗаписей();
	
		НаборЗаписей.Отбор.Организация.Использование	= Истина;
		НаборЗаписей.Отбор.Организация.ВидСравнения	 	= ВидСравнения.Равно;
		НаборЗаписей.Отбор.Организация.Значение	 		= Справочники.Организации.ПустаяСсылка();
		
		НаборЗаписей.Отбор.ВидНалога.Использование 	 = Истина;
		НаборЗаписей.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
		НаборЗаписей.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;

		Движение 				= НаборЗаписей.Добавить();
		// Свойства
		Движение.Период 		= '20140101'; // 01.01.2014 Закон "О пенсионном обеспечении в РК"
		// Измерения
		Движение.Организация	= Справочники.Организации.ПустаяСсылка();
		Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;
		// Ресурсы
		Движение.Коэффициент	= 2.5;
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Коэффициенты ставки рефинансирования НБ для расчета пени"" произошли ошибки:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
	
		// Заполним виды операций ведомостей на перечисление и возврат ОПВ
		
		Сообщить("-----------------------");
		Сообщить("Заполнение видов операций ведомостей на перечисление и возврат ОПВ.");
		
		// ОПВ перечисление в фонды
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОПВПеречислениеВФонды.Ссылка,
			|	ОПВПеречислениеВФонды.Представление
			|ИЗ
			|	Документ.ОПВПеречислениеВФонды КАК ОПВПеречислениеВФонды
			|ГДЕ
			|	ОПВПеречислениеВФонды.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПустаяСсылка)";
			
		Выборка = Запрос.Выполнить().Выбрать();
		ОперацияПеречислениеОПВ = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов;
		
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ВидОперации = ОперацияПеречислениеОПВ;
			Попытка
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Сообщить("При записи документа """ + Выборка.Представление + """ произошли ошибки: " + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
		
		// ОПВ возврат взносов
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОПВВозвратВзносов.Ссылка,
			|	ОПВВозвратВзносов.Представление
			|ИЗ
			|	Документ.ОПВВозвратВзносов КАК ОПВВозвратВзносов
			|ГДЕ
			|	ОПВВозвратВзносов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВВозвратВзносов.ПустаяСсылка)";
			
		Выборка = Запрос.Выполнить().Выбрать();
		ОперацияВозвратОПВ = Перечисления.ВидыОперацийОПВВозвратВзносов.ВозвратОбязательныхПенсионныхВзносов;
		
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ВидОперации = ОперацияВозвратОПВ;
			Попытка
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Сообщить("При записи документа """ + Выборка.Представление + """ произошли ошибки: " + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
		
		// Перенумеруем справочники из-за добавления предопределенных элеметов
		
		ПроцедурыОбновленияИнформационнойБазы.УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("НалогиСборыОтчисления");
		ПроцедурыОбновленияИнформационнойБазы.УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("СтатьиЗатрат");
		
		
		//--------------------------------------------------------------------------------
		// Конец обработки данных для механизма исчисления и учета ОППВ
		//--------------------------------------------------------------------------------
		
		// Скорректируем записи, необлагаемые СО
		НаборСОСведенияОДоходах = РегистрыНакопления.СОСведенияОДоходах.СоздатьНаборЗаписей();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("парамНачалоПериодаМодификации", Дата(2013, 1, 1));
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СОСведенияОДоходах.Регистратор КАК Регистратор,
			|	СОСведенияОДоходах.Регистратор.Представление КАК Представление
			|ИЗ
			|	РегистрНакопления.СОСведенияОДоходах КАК СОСведенияОДоходах
			|ГДЕ
			|	СОСведенияОДоходах.СпособНалогообложения <> СОСведенияОДоходах.ВидРасчета.ОблагаетсяСО
			|	И СОСведенияОДоходах.ВидРасчета <> НЕОПРЕДЕЛЕНО
			|	И СОСведенияОДоходах.ВидРасчета.ОблагаетсяСО = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
			|	И СОСведенияОДоходах.ПериодРегистрации >= &парамНачалоПериодаМодификации";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДокументСсылка = Выборка.Регистратор;
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			НаборСОСведенияОДоходах.Очистить();
			НаборСОСведенияОДоходах.Отбор.Регистратор.Установить(ДокументСсылка); 
			НаборСОСведенияОДоходах.Прочитать();
			
			Для Каждого ЗаписьНабора Из НаборСОСведенияОДоходах Цикл
				Если ЗначениеЗаполнено(ЗаписьНабора.ВидРасчета)
					И ЗаписьНабора.СпособНалогообложения <> ЗаписьНабора.ВидРасчета.ОблагаетсяСО 
					И ЗаписьНабора.ВидРасчета.ОблагаетсяСО = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом Тогда
					ЗаписьНабора.СпособНалогообложения = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
				КонецЕсли;
				
			КонецЦикла;
			
			Попытка
				НаборСОСведенияОДоходах.Записать();
			Исключение
				Сообщить("При корректировке движений документа """ + Выборка.Представление + """ произошли ошибки: " + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;
		
		// КОНЕЦ 2.0.8
		//////////////////////////////////////////////////////////////////
		
		ПроцедурыОбновленияИнформационнойБазыДополнительный.ВыполнитьОбновлениеНаРелиз_2_0_8(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("208", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
				
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.9.5";
	
	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.8"
			ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.9")И ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//////////////////////////////////////////////////////////////////
		// НАЧАЛО 2.0.9
		
		ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Истина;

		// Заполнение предопределенных вариантов отчетов.
		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("СтруктураЗадолженностиОрганизацийПоОППВ",    "СтруктураЗадолженностиОрганизацийПоОППВ");
		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РасчетныеЛисткиОрганизаций",    				"РасчетныеЛисткиОрганизаций");
		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("СводНачисленнойЗарплатыОрганизаций",    		"СводНачисленнойЗарплатыОрганизаций");
 		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РасчетнаяВедомостьОрганизации",    			"РасчетныеВедомостиОрганизаций");

		// КОНЕЦ 2.0.9
		//////////////////////////////////////////////////////////////////
		
		ПроцедурыОбновленияИнформационнойБазыДополнительный.ВыполнитьОбновлениеНаРелиз_2_0_9(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("209", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
				
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.10.7";
	
	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.9"
			ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.10")И ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//////////////////////////////////////////////////////////////////
		// НАЧАЛО 2.0.10
		
		Сообщить("-----------------------");
		Сообщить("Обработка предопределенных элементов справочника ""Сохраненные настройки""");
        		
		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РасчетнаяВедомостьОрганизацииТ1", "РасчетнаяВедомостьОрганизацийТ1");
        ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РасчетнаяВедомостьОрганизации",	 "РасчетныеВедомостиОрганизаций");
		
		// КОНЕЦ 2.0.10
		//////////////////////////////////////////////////////////////////
		
		ПроцедурыОбновленияИнформационнойБазыДополнительный.ВыполнитьОбновлениеНаРелиз_2_0_10(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("2010", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
				
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;

    ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.11.5";
	
	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.10"
			ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.11")И ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//////////////////////////////////////////////////////////////////
		// НАЧАЛО 2.0.11
		
		// Удаление отчета РегламентированныйОтчетФорма1ТМесячная	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РегламентированныеОтчеты.Ссылка,
		               |	РегламентированныеОтчеты.ИсточникОтчета
		               |ИЗ
		               |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		               |ГДЕ
		               |	РегламентированныеОтчеты.ИсточникОтчета = &ИсточникОтчета";
					   
		Запрос.УстановитьПараметр("ИсточникОтчета", "РегламентированныйОтчетФорма1ТМесячная");
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		МассивСсылок = Новый Массив(1);
		
		Пока Выборка.Следующий() Цикл
			
			МассивСсылок[0] = Выборка.Ссылка;
			ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
			Если ТаблицаСсылок.Количество() = 0 Тогда
				ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Попытка					
					ОтчетОбъект.Удалить();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			Иначе
				Сообщить("Регламентированный отчет " +  Выборка.Ссылка.Код + " " + """" + Выборка.Ссылка.Наименование + """" + " - не может быть удален, т.к. имеются ссылки в информационной базе" );
			КонецЕсли;	
			
		КонецЦикла;
		
		// Обновление справочника "Регламентированные отчеты"
		ПроцедурыОбновленияИнформационнойБазы.ОбновитьРегламентированныеОтчеты();
		
		// Переименовываем ссылки удаленных отчетов "1-Т Месячная"
		// в документах "Регламентированный отчет" на вновь добавленный,
		// используемый до 2015 года.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РегламентированныйОтчет.Ссылка,
		               |	РегламентированныйОтчет.ИсточникОтчета
		               |ИЗ
		               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
		               |ГДЕ
		               |	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета";
					   
		Запрос.УстановитьПараметр("ИсточникОтчета", "РегламентированныйОтчетФорма1ТМесячная");
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Источник = Выборка.ИсточникОтчета;
			ОтчетОбъект.ИсточникОтчета = Источник + "До2015";
			Попытка
				ОтчетОбъект.ОбменДанными.Загрузка = Истина;
				ОтчетОбъект.Записать();
			Исключение				
				Сообщить("  при записи документа ""Регламентированный отчет"" """ + Выборка.Ссылка.Номер + """" + Выборка.Ссылка.НаименованиеОтчета + """" + " произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЦикла;
		
		// Установка размеров регламентированных показателей с 1 января 2015 года
		Сообщить("-----------------------");
		Сообщить("Установка размеров регламентированных показателей с 1 января 2015г.");
		
		ДатаСведений = '2015-01-01';
		
		НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ДатаСведений, Истина);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, ДатаСведений, 21364, 1982, 55*21364, 55*21364, 21364, 1982);
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи в регистр сведений ""Регламентированные расчетные показатели"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;

		// Установка вычетов по доходам
		Сообщить("-----------------------");
		Сообщить("Обновление сведений о вычетах по частично облагаемым доходам");
		
		НаборЗаписей = РегистрыСведений.ВычетыПоДоходам.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Период.Установить(Дата("20150101"), Истина);
		
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20150101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 21364, 0);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20150101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 8*21364);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20150101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 0.5*21364, 0);
		
        Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Вычеты по доходам"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
	
		// КОНЕЦ 2.0.11
		//////////////////////////////////////////////////////////////////
		
		ПроцедурыОбновленияИнформационнойБазыДополнительный.ВыполнитьОбновлениеНаРелиз_2_0_11(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("2011", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
				
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.12.5";
	
	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.11"
			ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.12")И ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//////////////////////////////////////////////////////////////////
		// НАЧАЛО 2.0.12
		
		//Заполняем новые предопределенные элементы
		СпособУчетаИЛ = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка();
		СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
		Категории  = Перечисления.КатегорииРасчетов;
		УстановитьРеквизитыУдержанияОрганизации(ПланыВидовРасчета.УдержанияОрганизаций.ИЛКоэффициентомПоМРП			 , СпРасчета.ПоМесячномуРасчетномуПоказателю, Категории.Первичное, СпособУчетаИЛ);
		УстановитьРеквизитыУдержанияОрганизации(ПланыВидовРасчета.УдержанияОрганизаций.ИЛКоэффициентомПоМРПДоПредела , СпРасчета.ПоМесячномуРасчетномуПоказателю, Категории.Первичное, СпособУчетаИЛ);
		
		// КОНЕЦ 2.0.12
		//////////////////////////////////////////////////////////////////
		
		ПроцедурыОбновленияИнформационнойБазыДополнительный.ВыполнитьОбновлениеНаРелиз_2_0_12(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("2012", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
				
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.13.7";
	
	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.12"
			ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.13")И ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//////////////////////////////////////////////////////////////////
		// НАЧАЛО 2.0.13
		
		// Установка размеров регламентированных показателей с 1 января 2016 года
		Сообщить("-----------------------");
		Сообщить("Установка размеров регламентированных показателей с 1 января 2016г.");
		
		ДатаСведений = '2016-01-01';
		
		НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ДатаСведений, Истина);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, ДатаСведений, 22859, 2121, 55*22859, 55*22859, 22859, 2121);
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи в регистр сведений ""Регламентированные расчетные показатели"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// Установка вычетов по доходам
		Сообщить("-----------------------");
		Сообщить("Обновление сведений о вычетах по частично облагаемым доходам");
		
		НаборЗаписей = РегистрыСведений.ВычетыПоДоходам.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Период.Установить(Дата("20160101"), Истина);
		
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20160101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 22859, 0);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20160101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 8*22859);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20160101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 0.5*22859, 0);
		
        Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Вычеты по доходам"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// КОНЕЦ 2.0.13
		//////////////////////////////////////////////////////////////////
		
		ПроцедурыОбновленияИнформационнойБазыДополнительный.ВыполнитьОбновлениеНаРелиз_2_0_13(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("2013", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
				
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.14.4";
	
	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.13"
			ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.14")И ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//////////////////////////////////////////////////////////////////
		// НАЧАЛО 2.0.14
		
		
		// КОНЕЦ 2.0.14
		//////////////////////////////////////////////////////////////////
		
		ПроцедурыОбновленияИнформационнойБазыДополнительный.ВыполнитьОбновлениеНаРелиз_2_0_14(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("2014", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
				
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
			
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.15.12";
	
	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.14"
			ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.15")И ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//////////////////////////////////////////////////////////////////
		// НАЧАЛО 2.0.15
		
		// Установка размеров регламентированных показателей с 1 января 2017 года
		
		Сообщить("-----------------------");
		Сообщить("Установка размеров регламентированных показателей с 1 января 2017г.");
		
		ДатаСведений = '2017-01-01';
		
		НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ДатаСведений, Истина);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, ДатаСведений, 24459, 2269, 75*24459, 75*24459, 24459, 2269);
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи в регистр сведений ""Регламентированные расчетные показатели"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// Установка вычетов по доходам
		Сообщить("-----------------------");
		Сообщить("Обновление сведений о вычетах по частично облагаемым доходам");
		
		НаборЗаписей = РегистрыСведений.ВычетыПоДоходам.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Период.Установить(Дата("20170101"), Истина);
		
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20170101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 24459, 0);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20170101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 8*24459);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20170101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 0.5*24459, 0);
		
        Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Вычеты по доходам"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
	
		
		// КОНЕЦ 2.0.15
		//////////////////////////////////////////////////////////////////
		
		ПроцедурыОбновленияИнформационнойБазыДополнительный.ВыполнитьОбновлениеНаРелиз_2_0_15(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("201512", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			ВывестиОписаниеИзменений("201505", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
				
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.16.9";
	
	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.15"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.16")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//////////////////////////////////////////////////////////////////
		// НАЧАЛО 2.0.16
		
		//--------------------------------------------------------------------------------
		// Обработка данных для механизма исчисления и учета o	ООСМС и ВОСМС 
		//--------------------------------------------------------------------------------
		
		Сообщить("-----------------------");
		Сообщить("Заполнение новых реквизитов справочника ""Налоги, сборы и отчисления"".");

		СправочникОбъект = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование.ПолучитьОбъект();
		СправочникОбъект.КодБК 							= "";
		СправочникОбъект.КодНазначенияПлатежа 			= "122";
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС;
		СправочникОбъект.НазначениеПлатежа 				= "Взносы на обязательное социальное медицинское страхование ";
		СправочникОбъект.Записать();
		
		СправочникОбъект = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.ПолучитьОбъект();
		СправочникОбъект.КодБК 							= "";
		СправочникОбъект.КодНазначенияПлатежа 			= "121";
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.ОбязательстваПоОтчислениямОСМС;
		СправочникОбъект.НазначениеПлатежа 				= "Отчисления на обязательное социальное медицинское страхование ";
		СправочникОбъект.Записать();
		
		//--------------------------------------------------------------------------------
		// Обработка данных для механизма исчисления и учета o	ООСМС и ВОСМС 
		//--------------------------------------------------------------------------------
		
		Сообщить("-----------------------");
		Сообщить("Заполнение регистра сведений ""Учет налогообложения по видам доходов"".");

		ДоходыОтНалоговогоАгента = Справочники.ВидыДоходов.ДоходыОтНалоговогоАгента.ПолучитьОбъект();
		ДоходыОтНалоговогоАгента.Описание = "Доходы от налогового агента";
		ДоходыОтНалоговогоАгента.Записать();
		
		// Регистр сведений "Учет налогообложения по видавм доходов"
		НаборЗаписей = РегистрыСведений.УчетНалогообложенияПоВидамДоходов.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();

		ПроцедурыОбновленияИнформационнойБазы.ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, "19000101", ДоходыОтНалоговогоАгента.Ссылка, Истина);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, "20170701", ПредопределенноеЗначение("Справочник.ВидыДоходов.ДоходыОтРаботодателя"), Истина, Истина, Истина, Истина, Истина,Истина);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, "20170701", ДоходыОтНалоговогоАгента.Ссылка, Истина,,,,,,Истина);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, "20190101", ПредопределенноеЗначение("Справочник.ВидыДоходов.ДоходыОтРаботодателя"), Истина, Истина, Истина, Истина, Истина,Истина,Истина);
		
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Учет налогообложения по видам доходов"" произошли ошибки: " + Символы.ПС + 
						ОписаниеОшибки());
		КонецПопытки;
		
		//--------------------------------------------------------------------------------
		// Заполнение ставок ИПН для ООСМС и ВОСМС 
		//--------------------------------------------------------------------------------

		Сообщить("-----------------------");
		Сообщить("Заполнение сведений о ставках ИПН по видам доходов"); 
		
		НаборЗаписейСведенияОСтавкахИПН = РегистрыСведений.СведенияОСтавкахИПН.СоздатьНаборЗаписей();
		НаборЗаписейСведенияОСтавкахИПН.Прочитать();
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		ВидыДоходов = Справочники.ВидыДоходов;
	   	ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейСведенияОСтавкахИПН, '20090101', ПустаяОрганизация, ВидыДоходов.ДоходыОтНалоговогоАгента, 		  10, 15);
	 	ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейСведенияОСтавкахИПН, '20110101', ПустаяОрганизация, ВидыДоходов.ДоходыОтНалоговогоАгента, 		  10, 20);

		Попытка
			НаборЗаписейСведенияОСтавкахИПН.ОбменДанными.Загрузка = Истина;
			НаборЗаписейСведенияОСтавкахИПН.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Сведения о ставках ИПН"" произошли ошибки: " + Символы.ПС + 
						ОписаниеОшибки());
		КонецПопытки;

		// Заполнение рекизитов "Облагается ООСМС", "Облагается ВОСМС" в ПВР
		
		Сообщить("-----------------------");
		Сообщить("Заполнение новых реквизитов планов видов расчета.");
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОсновныеНачисленияОрганизаций.Ссылка,
			|	ОсновныеНачисленияОрганизаций.ВидДохода,
			|	ОсновныеНачисленияОрганизаций.СпособРасчета
			|ИЗ
			|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
			|ГДЕ
			|	(ОсновныеНачисленияОрганизаций.ОблагаетсяВОСМС = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)
			|			ИЛИ ОсновныеНачисленияОрганизаций.ОблагаетсяВОСМС = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДополнительныеНачисленияОрганизаций.Ссылка,
			|	ДополнительныеНачисленияОрганизаций.ВидДохода,
			|	ДополнительныеНачисленияОрганизаций.СпособРасчета
			|ИЗ
			|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
			|ГДЕ
			|	(ДополнительныеНачисленияОрганизаций.ОблагаетсяООСМС = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)
			|			ИЛИ ДополнительныеНачисленияОрганизаций.ОблагаетсяВОСМС = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка))";
			
		Выборка = Запрос.Выполнить().Выбрать();
		НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
		ОблагаетсяЦеликом	= Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом;
		Пока Выборка.Следующий() Цикл
			ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой Тогда
				
				ВидРасчетаОбъект.ОблагаетсяВОСМС = ОблагаетсяЦеликом;			
				ВидРасчетаОбъект.ОблагаетсяООСМС = НеОблагаетсяЦеликом;
				ВидРасчетаОбъект.ВидДохода = Справочники.ВидыДоходов.ДоходыОтНалоговогоАгента;
				
			ИначеЕсли Выборка.ВидДохода = Справочники.ВидыДоходов.ДоходыОтРаботодателя
				И Выборка.Ссылка = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ВыходноеПособие Тогда 
				
				ВидРасчетаОбъект.ОблагаетсяВОСМС = НеОблагаетсяЦеликом;			
				ВидРасчетаОбъект.ОблагаетсяООСМС = НеОблагаетсяЦеликом;
				
			ИначеЕсли Выборка.ВидДохода = Справочники.ВидыДоходов.ДоходыОтРаботодателя
				И НЕ (Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма
					ИЛИ Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения) Тогда
				
				ВидРасчетаОбъект.ОблагаетсяВОСМС = ОблагаетсяЦеликом;			
				ВидРасчетаОбъект.ОблагаетсяООСМС = ОблагаетсяЦеликом;
			Иначе
				ВидРасчетаОбъект.ОблагаетсяВОСМС = НеОблагаетсяЦеликом;			
				ВидРасчетаОбъект.ОблагаетсяООСМС = НеОблагаетсяЦеликом;
			КонецЕсли; 
			
			Попытка
				ВидРасчетаОбъект.Записать();
			Исключение
				Сообщить("При записи вида расчета """ + ВидРасчетаОбъект.Наименование + """ произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЦикла;
		
		// Установим ставки ОСМС
		Сообщить("-----------------------");
		Сообщить("Установка ставок ОСМС.");
		
		//ОСМС с 2017 года
		// ДоходыОтРаботодателя
		НаборЗаписей = РегистрыСведений.СведенияОСтавкахОСМС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидДохода.Установить(Справочники.ВидыДоходов.ДоходыОтРаботодателя, Истина);
		НаборЗаписей.Прочитать();
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьСведенияОСтавкахОСМС(НаборЗаписей, '20170701', Справочники.ВидыДоходов.ДоходыОтРаботодателя,     0, 1);
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьСведенияОСтавкахОСМС(НаборЗаписей, '20180101', Справочники.ВидыДоходов.ДоходыОтРаботодателя,     0, 1.5);
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьСведенияОСтавкахОСМС(НаборЗаписей, '20190101', Справочники.ВидыДоходов.ДоходыОтРаботодателя,     1, 1.5);
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьСведенияОСтавкахОСМС(НаборЗаписей, '20200101', Справочники.ВидыДоходов.ДоходыОтРаботодателя,     2, 2);
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьСведенияОСтавкахОСМС(НаборЗаписей, '20220101', Справочники.ВидыДоходов.ДоходыОтРаботодателя,     2, 3);
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Сообщить("При записи данных регистра сведений ""Сведения о ставках ОСМС"" произошли ошибки: " + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
		НаборЗаписей.Отбор.ВидДохода.Установить(Справочники.ВидыДоходов.ДоходыОтНалоговогоАгента, Истина);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			// ДоходыОтНалоговогоАгента
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьСведенияОСтавкахОСМС(НаборЗаписей, '20170701', Справочники.ВидыДоходов.ДоходыОтНалоговогоАгента, 5, 0);
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Сообщить("При записи данных регистра сведений ""Сведения о ставках ОСМС"" произошли ошибки: " + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;

		//Заполнение видом операции ПеречислениеОбязательныхСоциальныхОтчислений для документов СОПеречислениеВФонды
		
		Сообщить("-----------------------");
		Сообщить("Заполнение видов операций ведомостей на перечисление и возврат социального страхования.");
		
		// СО перечисление в фонды
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СОПеречислениеВФонды.Ссылка,
			|	СОПеречислениеВФонды.Представление
			|ИЗ
			|	Документ.СОПеречислениеВФонды КАК СОПеречислениеВФонды
			|ГДЕ
			|	СОПеречислениеВФонды.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПустаяСсылка)";
			
		Выборка = Запрос.Выполнить().Выбрать();
		ОперацияПеречислениеСО = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений;
		
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ВидОперации = ОперацияПеречислениеСО;
			Попытка
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Сообщить("При записи документа """ + Выборка.Представление + """ произошли ошибки: " + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
		
		// СО возврат взносов
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СОВозвратОтчислений.Ссылка,
			|	СОВозвратОтчислений.Представление
			|ИЗ
			|	Документ.СОВозвратОтчислений КАК СОВозвратОтчислений
			|ГДЕ
			|	СОВозвратОтчислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОВозвратОтчислений.ПустаяСсылка)";
			
		Выборка = Запрос.Выполнить().Выбрать();
		ОперацияВозвратСО = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратОбязательныхСоциальныхОтчислений;
		
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ВидОперации = ОперацияВозвратСО;
			Попытка
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Сообщить("При записи документа """ + Выборка.Представление + """ произошли ошибки: " + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
		
				
		// Установим размер коэффициента ставки рефенансирования для расчета пени ОСМС
		Сообщить("-----------------------");
		Сообщить("Установка размера коэффициента ставки рефинансирования для ОСМС.");
		
		НаборЗаписей = РегистрыСведений.КоэффициентыСтавкиРефинансированияНБДляРасчетаПени.СоздатьНаборЗаписей();
	
		НаборЗаписей.Отбор.Организация.Использование	= Истина;
		НаборЗаписей.Отбор.Организация.ВидСравнения	 	= ВидСравнения.Равно;
		НаборЗаписей.Отбор.Организация.Значение	 		= Справочники.Организации.ПустаяСсылка();
		
		НаборЗаписей.Отбор.ВидНалога.Использование 	 = Истина;
		НаборЗаписей.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
		НаборЗаписей.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;

		Движение 				= НаборЗаписей.Добавить();
		// Свойства
		Движение.Период 		= '20170701'; // 01.07.2017 Закон "Об обязательном медицинском страховании в РК"
		// Измерения
		Движение.Организация	= Справочники.Организации.ПустаяСсылка();
		Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
		// Ресурсы
		Движение.Коэффициент	= 2.5;
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Коэффициенты ставки рефинансирования НБ для расчета пени"" произошли ошибки:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		НаборЗаписей = РегистрыСведений.КоэффициентыСтавкиРефинансированияНБДляРасчетаПени.СоздатьНаборЗаписей();

		НаборЗаписей.Отбор.Организация.Использование	= Истина;
		НаборЗаписей.Отбор.Организация.ВидСравнения	 	= ВидСравнения.Равно;
		НаборЗаписей.Отбор.Организация.Значение	 		= Справочники.Организации.ПустаяСсылка();
		
		НаборЗаписей.Отбор.ВидНалога.Использование 	 = Истина;
		НаборЗаписей.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
		НаборЗаписей.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;

		Движение 				= НаборЗаписей.Добавить();
		// Свойства
		Движение.Период 		= '20170701'; // 01.07.2017 Закон "Об обязательном медицинском страховании в РК"
		// Измерения
		Движение.Организация	= Справочники.Организации.ПустаяСсылка();
		Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
		// Ресурсы
		Движение.Коэффициент	= 2.5;
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Коэффициенты ставки рефинансирования НБ для расчета пени"" произошли ошибки:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		Сообщить("-----------------------");
		Сообщить("Установка запрета использования счета 3210.");
		
		СчетГруппа = ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию_.ПолучитьОбъект();
		СчетГруппа.ЗапретитьИспользоватьВПроводках = Истина;
		
		Попытка
			СчетГруппа.Записать();
		Исключение
			Сообщить("Операция не выполнена, произошли ошибки:" + Символы.ПС + ОписаниеОшибки());
			ТекстСообщения = НСтр("ru='Операция не выполнена'");
		КонецПопытки;

		// Установка значений ставки рефенансирования
		
		// с 1 апреля 2017 ставка рефинансирования НБ = 11%, с 6 июня - 10,5%
		Сообщить("-----------------------");
		Сообщить("Установка значений ставки рефинансирования НацБанка Казахстана: с 1 апреля 2017 - 11%, с 6 июня 2017 - 10,5%");
		
		НаборЗаписей = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
		
		ТЗНабор = НаборЗаписей.ВыгрузитьКолонки();
		
		НоваяСтрока = ТЗНабор.Добавить();
		НоваяСтрока.Период = '2017-04-01';
		НоваяСтрока.Размер = 11;
		
		НоваяСтрока = ТЗНабор.Добавить();
		НоваяСтрока.Период = '2017-06-06';
		НоваяСтрока.Размер = 10.5;
		
		Для Каждого СтрокаТЗ Из ТЗНабор Цикл
		
			НаборЗаписей.Очистить();
			НаборЗаписей.Отбор.Период.Установить(СтрокаТЗ.Период);
			
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, СтрокаТЗ);
			ЗаписьНабора.Активность = Истина;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Сообщить("При установке ставки на дату " +СтрокаТЗ.Период+ " произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
		
		КонецЦикла;

		// Удаление отчета РегламентированныйОтчетФорма210	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РегламентированныеОтчеты.Ссылка,
		               |	РегламентированныеОтчеты.ИсточникОтчета
		               |ИЗ
		               |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		               |ГДЕ
		               |	РегламентированныеОтчеты.ИсточникОтчета В(&СписокИсточниковОтчета)";
					   
		СписокИсточников =  Новый СписокЗначений;
		СписокИсточников.Добавить("РегламентированныйОтчет210Форма");
					   
		Запрос.УстановитьПараметр("СписокИсточниковОтчета", СписокИсточников);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		МассивСсылок = Новый Массив(1);
		
		Пока Выборка.Следующий() Цикл
			
			МассивСсылок[0] = Выборка.Ссылка;
			ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
			Если ТаблицаСсылок.Количество() = 0 Тогда
				ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Попытка					
					ОтчетОбъект.Удалить();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			Иначе
				Сообщить("Регламентированный отчет " +  Выборка.Ссылка.Код + " " + """" + Выборка.Ссылка.Наименование + """" + " - не может быть удален, т.к. имеются ссылки в информационной базе" );
			КонецЕсли;	
			
		КонецЦикла;
		
		// Обновление справочника "Регламентированные отчеты"
		ПроцедурыОбновленияИнформационнойБазы.ОбновитьРегламентированныеОтчеты();
		
		// Переименовываем ссылку удаленного отчета "210" 
		// в документах "Регламентированный отчет" на вновь добавленные,
		// используемые до 2017 года.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РегламентированныйОтчет.Ссылка,
		               |	РегламентированныйОтчет.ИсточникОтчета
		               |ИЗ
		               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
		               |ГДЕ
		               |	РегламентированныйОтчет.ИсточникОтчета В(&СписокИсточниковОтчета)";
					   
		СписокИсточников =  Новый СписокЗначений;
		СписокИсточников.Добавить("РегламентированныйОтчет210Форма");
					   
		Запрос.УстановитьПараметр("СписокИсточниковОтчета", СписокИсточников);
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Источник = Выборка.ИсточникОтчета;
			ОтчетОбъект.ИсточникОтчета = Источник + "До2017";
			Попытка
				ОтчетОбъект.ОбменДанными.Загрузка = Истина;
				ОтчетОбъект.Записать();
			Исключение				
				Сообщить(" При записи документа ""Регламентированный отчет"" """ + Выборка.Ссылка.Номер + """" + Выборка.Ссылка.НаименованиеОтчета + """" + " произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЦикла;
		
		Сообщить("-----------------------");
		Сообщить("Установка сроков пречисления взносов и отчислений ОСМС.");

		НаборЗаписей = РегистрыСведений.СрокиПеречисленияНалоговСборовОтчислений.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Организация.Использование	= Истина;
		НаборЗаписей.Отбор.Организация.ВидСравнения	 	= ВидСравнения.Равно;
		НаборЗаписей.Отбор.Организация.Значение	 		= Справочники.Организации.ПустаяСсылка();
		
		НаборЗаписей.Отбор.ВидНалога.Использование 	 = Истина;
		НаборЗаписей.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
		НаборЗаписей.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
		
		ДлинаСуток = 86400;
		ТекМесяц = '20170701';	
		ДатаОкончания = НачалоМесяца(КонецГода(ОбщегоНазначения.ПолучитьРабочуюДату()));
		
		Пока ТекМесяц <= ДатаОкончания Цикл
			
			// до 25 числа месяца, следующего за месяцем исчисления
			Движение = НаборЗаписей.Добавить();
			// Измерения
			Движение.Месяц 			= ТекМесяц;
			Движение.Организация 	= Справочники.Организации.ПустаяСсылка();
			Движение.ВидНалога	 	= Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
			// Ресурсы
			Движение.ПорядокОпределенияСрокаПеречисления	= Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуНалоговогоПериода;
			Движение.СрокПеречисления						= ДобавитьМесяц(ТекМесяц, 1) + (25-1) * ДлинаСуток;
			//Иначе - до июля 2017 ВОСМС вообще не исчислялись
				
			ТекМесяц = ДобавитьМесяц(ТекМесяц, 1);
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение				
			Сообщить("При записи данных регистра сведений ""Сроки перечисления налогов, взносов и отчислений"" произошли ошибки:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		НаборЗаписей = РегистрыСведений.СрокиПеречисленияНалоговСборовОтчислений.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Организация.Использование	= Истина;
		НаборЗаписей.Отбор.Организация.ВидСравнения	 	= ВидСравнения.Равно;
		НаборЗаписей.Отбор.Организация.Значение	 		= Справочники.Организации.ПустаяСсылка();
		
		НаборЗаписей.Отбор.ВидНалога.Использование 	 = Истина;
		НаборЗаписей.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
		НаборЗаписей.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
		
		ДлинаСуток = 86400;
		ТекМесяц = '20170701';	
		ДатаОкончания = НачалоМесяца(КонецГода(ОбщегоНазначения.ПолучитьРабочуюДату()));
		
		Пока ТекМесяц <= ДатаОкончания Цикл
			
			// до 25 числа месяца, следующего за месяцем исчисления
			Движение = НаборЗаписей.Добавить();
			// Измерения
			Движение.Месяц 			= ТекМесяц;
			Движение.Организация 	= Справочники.Организации.ПустаяСсылка();
			Движение.ВидНалога	 	= Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
			// Ресурсы
			Движение.ПорядокОпределенияСрокаПеречисления	= Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуНалоговогоПериода;
			Движение.СрокПеречисления						= ДобавитьМесяц(ТекМесяц, 1) + (25-1) * ДлинаСуток;
			//Иначе - до июля 2017 ООСМС вообще не исчислялись
			
			ТекМесяц = ДобавитьМесяц(ТекМесяц, 1);
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение				
			Сообщить("При записи данных регистра сведений ""Сроки перечисления налогов, взносов и отчислений"" произошли ошибки:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;

		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РасчетныеЛисткиОрганизаций",        "РасчетныеЛисткиОрганизаций");
		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("СтруктураЗадолженностиОрганизацийПоВОСМС",    "СтруктураЗадолженностиОрганизацийПоВОСМС");
		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("СтруктураЗадолженностиОрганизацийПоООСМС",    "СтруктураЗадолженностиОрганизацийПоООСМС");

		Сообщить("-----------------------");
		Сообщить("Перенумерация элементов справочника ""Статьи затрат"""); 
		ПроцедурыОбновленияИнформационнойБазы.УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("СтатьиЗатрат");

		Сообщить("-----------------------");
		Сообщить("Перенумерация элементов справочника ""Налоги, сборы и отчисления"""); 
		ПроцедурыОбновленияИнформационнойБазы.УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("НалогиСборыОтчисления");
		
		Сообщить("-----------------------");
		Сообщить("Перенумерация элементов справочника ""Виды доходов"""); 
		ПроцедурыОбновленияИнформационнойБазы.УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("ВидыДоходов");
		
		

		// КОНЕЦ 2.0.16
		//////////////////////////////////////////////////////////////////
		
		ПроцедурыОбновленияИнформационнойБазыДополнительный.ВыполнитьОбновлениеНаРелиз_2_0_16(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("201609", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
		
	КонецЕсли;

	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.16.11";
	
	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.15"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.16")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//////////////////////////////////////////////////////////////////
		// НАЧАЛО 2.0.16
		
		// Замена обработки МТ-102 на встроенную
		
		ОбработкаФормированияSWIFTФайла = Справочники.ВнешниеОбработки.ОбработкаФормированияSWIFTФайла.ПолучитьОбъект();
		ОбработкаФормированияSWIFTФайла.ВнешнийОбъектИспользовать = Ложь;
		Попытка
			ОбработкаФормированияSWIFTФайла.ОбменДанными.Загрузка = Истина;
			ОбработкаФормированияSWIFTФайла.Записать();
		Исключение
			Сообщить("При записи объекта ""Обработка формирования SWIFT файла"" справочника ""Внешние обработки"" произошли ошибки:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		
		
		// КОНЕЦ 2.0.16
		//////////////////////////////////////////////////////////////////
		
		ПроцедурыОбновленияИнформационнойБазыДополнительный.ВыполнитьОбновлениеНаРелиз_2_0_16(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("201611", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.16.12";
	
	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.15"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.16")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//////////////////////////////////////////////////////////////////
		// НАЧАЛО 2.0.16
		
		Сообщить("-----------------------");
		Сообщить("Перенумерация элементов справочника ""Статьи затрат"""); 
		ПроцедурыОбновленияИнформационнойБазы.УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("СтатьиЗатрат");
		
		// КОНЕЦ 2.0.16
		//////////////////////////////////////////////////////////////////
		
		ПроцедурыОбновленияИнформационнойБазыДополнительный.ВыполнитьОбновлениеНаРелиз_2_0_16(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("201612", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.17.3";

	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.16"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.17")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//////////////////////////////////////////////////////////////////
		// НАЧАЛО 2.0.17
		
		// Установка размеров регламентированных показателей с 1 января 2018 года
		
		Сообщить("-----------------------");
		Сообщить("Установка размеров регламентированных показателей с 1 января 2018г.");
		
		ДатаСведений = '2018-01-01';
		
		НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ДатаСведений, Истина);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, ДатаСведений, 28284, 2405, 75*28284, 75*28284, 28284, 2405);
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи в регистр сведений ""Регламентированные расчетные показатели"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;

		// Установка вычетов по доходам
		Сообщить("-----------------------");
		Сообщить("Обновление сведений о вычетах по частично облагаемым доходам");
		
		НаборЗаписей = РегистрыСведений.ВычетыПоДоходам.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Период.Установить(Дата("20180101"), Истина);
		
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20180101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 28284, 0);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20180101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 8*28284);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20180101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 0.5*28284, 0);
		
        Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Вычеты по доходам"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// Установим ставки ОСМС
		Сообщить("-----------------------");
		Сообщить("Установка ставок ОСМС.");
		
		//ОСМС с 2017 года
		НаборЗаписей = РегистрыСведений.СведенияОСтавкахОСМС.СоздатьНаборЗаписей();
		
		// ДоходыОтРаботодателя
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьСведенияОСтавкахОСМС(НаборЗаписей, '20170701', Справочники.ВидыДоходов.ДоходыОтРаботодателя,     0, 1);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьСведенияОСтавкахОСМС(НаборЗаписей, '20180101', Справочники.ВидыДоходов.ДоходыОтРаботодателя,     0, 1.5);
		
		// ДоходыОтНалоговогоАгента
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьСведенияОСтавкахОСМС(НаборЗаписей, '20170701', Справочники.ВидыДоходов.ДоходыОтНалоговогоАгента, 5, 0);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьСведенияОСтавкахОСМС(НаборЗаписей, '20180101', Справочники.ВидыДоходов.ДоходыОтНалоговогоАгента, 0, 0);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Сведения о ставках ОСМС"" произошли ошибки: " + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		// Регистр сведений "Учет налогообложения по видам доходов"
		// Взносы ОСМС отложены до 2020 года
		НаборЗаписей = РегистрыСведений.УчетНалогообложенияПоВидамДоходов.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();

		ПроцедурыОбновленияИнформационнойБазы.ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, "20180801", ПредопределенноеЗначение("Справочник.ВидыДоходов.ДоходыОтНалоговогоАгента"));
		
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Учет налогообложения по видам доходов"" произошли ошибки: " + Символы.ПС + 
						ОписаниеОшибки());
		КонецПопытки;
		
		// Установим ставку СО с 2018 года – 3,5%
		Сообщить("-----------------------");
		Сообщить("Установка ставки СО с 1 января 2018 - 3.5%.");
		
		НаборЗаписей = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидНалога.Установить(Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, Истина);
		НаборЗаписей.Отбор.Период.Установить('20180101', Истина);
		НаборЗаписей.Прочитать();
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20180101', ПустаяОрганизация, Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, 3.5);
			Попытка
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
			Исключение
				Сообщить("При записи данных регистра сведений ""Сведения о ставках налогов, сборов, отчслений"" произошли ошибки: " + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
		// с 16 января 2018 г. ставка рефинансирования НБ = 9.5%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 16 января 2018 - 9.75%.");

		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20180116', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20180116';
	 	СтрокаНабора.Размер = 9.75;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;

		
		// Установим размеры коэффициентов ставок рефенансирования для расчета пени СО, ОПВ, ОППВ, ООСМС, ВОСМС 
		Сообщить("-----------------------");
		Сообщить("Установка размера коэффициента ставок рефинансирования НБ для расчета пени СО, ОПВ, ОППВ, ООСМС, ВОСМС.");
		ДобавитьСведенияОКоэффициентеСтавкиРефинансированияНБДляРасчетаПени('20180101', Справочники.Организации.ПустаяСсылка(), Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, 1.25);
		ДобавитьСведенияОКоэффициентеСтавкиРефинансированияНБДляРасчетаПени('20180101', Справочники.Организации.ПустаяСсылка(), Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, 1.25);
		ДобавитьСведенияОКоэффициентеСтавкиРефинансированияНБДляРасчетаПени('20180101', Справочники.Организации.ПустаяСсылка(), Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы, 1.25);
		ДобавитьСведенияОКоэффициентеСтавкиРефинансированияНБДляРасчетаПени('20180101', Справочники.Организации.ПустаяСсылка(), Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование, 1.25);
		ДобавитьСведенияОКоэффициентеСтавкиРефинансированияНБДляРасчетаПени('20180101', Справочники.Организации.ПустаяСсылка(), Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование, 1.25);
		
		// Установим ставку СН – 9,5%
		Сообщить("-----------------------");
		Сообщить("Установка ставки СН с 1 января 2018 - 9.5%.");
		
		НаборЗаписей = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидНалога.Установить(Справочники.НалогиСборыОтчисления.СоциальныйНалог, Истина);
		НаборЗаписей.Отбор.Период.Установить('20180101', Истина);
		НаборЗаписей.Прочитать();
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20180101', ПустаяОрганизация, Справочники.НалогиСборыОтчисления.СоциальныйНалог, 9.5);
			Попытка
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
			Исключение
				Сообщить("При записи данных регистра сведений ""Сведения о ставках налогов, сборов, отчслений"" произошли ошибки: " + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
		//Обновление справочника ВычетыИПН
		Сообщить("-----------------------");
		Сообщить("Обновление элементов справочника ""Вычеты ИПН"".");
		СправочникОбъект = Справочники.ВычетыИПН.СтраховыеПремииПоДоговорамНакопительногоСтрахования.ПолучитьОбъект();
		СправочникОбъект.НеИспользуется = Истина;
		Попытка
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();
		Исключение
			Сообщить("При записи элемента ""Страховые премии, вносимые в свою пользу физическим лицом по договорам накопительного страхования""
				|справочника ""Вычеты ИПН"" произошли ошибки:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВычетыИПН.Ссылка
		|ИЗ
		|	Справочник.ВычетыИПН КАК ВычетыИПН
		|ГДЕ
		|	ВычетыИПН.Предопределенный = ЛОЖЬ
		|	И ВычетыИПН.НеИспользуется = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СправочникОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			СправочникОбъект.НеИспользуется = Истина;
			Попытка
				СправочникОбъект.ОбменДанными.Загрузка = Истина;
				СправочникОбъект.Записать();;
			Исключение
				Сообщить("При записи элемента """ + ВыборкаДетальныеЗаписи.Ссылка + """ справочника ""Вычеты ИПН"" произошли ошибки:" + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;
		
		Сообщить("-----------------------");
		Сообщить("Перенумерация элементов справочника ""Вычеты ИПН"""); 
		ПроцедурыОбновленияИнформационнойБазы.УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("ВычетыИПН");
		
		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РасчетнаяВедомостьОрганизации",	 "РасчетныеВедомостиОрганизаций");
		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РасчетныеЛисткиОрганизаций",	 "РасчетныеЛисткиОрганизаций");
		
		// Обновление ПВР ДополнительныеНачисления
		Сообщить("-----------------------");
		Сообщить("Обновление плана видов расчета ""Дополнительные начисления""");
		
		СпособыНалогообложения = Справочники.СпособыНалогообложенияДоходов;
		
		// Выходное пособие
		УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ВыходноеПособие2018,						
																Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку, 			
																Перечисления.КатегорииРасчетов.Первичное, 
																Перечисления.ВидыПремии.НеПремия,		
																12, 
																СпособыНалогообложения.ОблагаетсяЦеликом, 
																СпособыНалогообложения.НеОблагаетсяЦеликом, 
																СпособыНалогообложения.ОблагаетсяЦеликом,   
																СпособыНалогообложения.НеОблагаетсяЦеликом, 
																СпособыНалогообложения.НеОблагаетсяЦеликом, 
																СпособыНалогообложения.НеОблагаетсяЦеликом, 
																СпособыНалогообложения.НеОблагаетсяЦеликом,
																СпособыНалогообложения.НеОблагаетсяЦеликом,,
																Справочники.ВидыДоходов.ДоходыОтРаботодателя);
		
		// Компенсация отпуска при увольнении
		УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпуска2018,						
																Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска, 
																Перечисления.КатегорииРасчетов.Первичное, 
																Перечисления.ВидыПремии.НеПремия,	 	
																12, 
																СпособыНалогообложения.ОблагаетсяЦеликом, 
																СпособыНалогообложения.НеОблагаетсяЦеликом, 
																СпособыНалогообложения.ОблагаетсяЦеликом,   
																СпособыНалогообложения.НеОблагаетсяЦеликом, 
																СпособыНалогообложения.НеОблагаетсяЦеликом,
																СпособыНалогообложения.ОблагаетсяЦеликом, 
																СпособыНалогообложения.ОблагаетсяЦеликом,
																СпособыНалогообложения.НеОблагаетсяЦеликом,,
																Справочники.ВидыДоходов.ДоходыОтРаботодателя);
		// Компенсация отпуска без увольнения
		УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения2018,	
																Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска, 
																Перечисления.КатегорииРасчетов.Первичное, 
																Перечисления.ВидыПремии.НеПремия,	 	
																12, 
																СпособыНалогообложения.ОблагаетсяЦеликом, 
																СпособыНалогообложения.НеОблагаетсяЦеликом, 
																СпособыНалогообложения.ОблагаетсяЦеликом,   
																СпособыНалогообложения.НеОблагаетсяЦеликом, 
																СпособыНалогообложения.НеОблагаетсяЦеликом,
																СпособыНалогообложения.ОблагаетсяЦеликом, 
																СпособыНалогообложения.ОблагаетсяЦеликом,
																СпособыНалогообложения.НеОблагаетсяЦеликом,,
																Справочники.ВидыДоходов.ДоходыОтРаботодателя);

		// КОНЕЦ 2.0.17
		//////////////////////////////////////////////////////////////////
		
		ПроцедурыОбновленияИнформационнойБазыДополнительный.ВыполнитьОбновлениеНаРелиз_2_0_17(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("20173", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.17.4";

	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.16"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.17")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//////////////////////////////////////////////////////////////////
		// НАЧАЛО 2.0.17.4

		
		// КОНЕЦ 2.0.17.4
		//////////////////////////////////////////////////////////////////
		
		ПроцедурыОбновленияИнформационнойБазыДополнительный.ВыполнитьОбновлениеНаРелиз_2_0_17(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("20174", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.17.5";

	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.16"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.17")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//////////////////////////////////////////////////////////////////
		// НАЧАЛО 2.0.17.5
		
		
		// с 6 марта 2018 г. ставка рефинансирования НБ = 9.5%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 6 марта 2018 - 9.5%.");

		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20180306', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20180306';
	 	СтрокаНабора.Размер = 9.5;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РегистрНалоговогоУчетаПоИПНиСН",	 "РегистрНалоговогоУчетаПоИПНиСН");
		
		// КОНЕЦ 2.0.17.5
		//////////////////////////////////////////////////////////////////
		
		ПроцедурыОбновленияИнформационнойБазыДополнительный.ВыполнитьОбновлениеНаРелиз_2_0_17(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("20175", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
		
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.17.6";

	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.16"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.17")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//////////////////////////////////////////////////////////////////
		// НАЧАЛО 2.0.17.6
		
		// с 17 апреля 2018 г. ставка рефинансирования НБ = 9.25%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 17 апреля 2018 - 9.25%.");

		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20180417', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20180417';
	 	СтрокаНабора.Размер = 9.25;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// с 5 июня 2018 г. ставка рефинансирования НБ = 9.00%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 5 июня 2018 - 9.00%.");

		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20180605', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20180605';
	 	СтрокаНабора.Размер = 9.00;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		
		// КОНЕЦ 2.0.17.6
		//////////////////////////////////////////////////////////////////
		
		ПроцедурыОбновленияИнформационнойБазыДополнительный.ВыполнитьОбновлениеНаРелиз_2_0_17(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("20176", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.17.7";

	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.16"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.17")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//////////////////////////////////////////////////////////////////
		// НАЧАЛО 2.0.17.7
		
		ЗаполнитьРеквизитНеактуальныйСправочникаКлассификаторЗанятий();		
		// КОНЕЦ 2.0.17.7
		//////////////////////////////////////////////////////////////////
		
		ПроцедурыОбновленияИнформационнойБазыДополнительный.ВыполнитьОбновлениеНаРелиз_2_0_17(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("20177", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.17.8";

	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.16"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.17")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//////////////////////////////////////////////////////////////////
		// НАЧАЛО 2.0.17.8
		
			// Удаление отчета РегламентированныйОтчетФорма1ТЗП	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РегламентированныеОтчеты.Ссылка,
		               |	РегламентированныеОтчеты.ИсточникОтчета
		               |ИЗ
		               |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		               |ГДЕ
		               |	РегламентированныеОтчеты.ИсточникОтчета В(&СписокИсточниковОтчета)";
					   
		СписокИсточников =  Новый СписокЗначений;
		СписокИсточников.Добавить("РегламентированныйОтчетФорма1ТЗП");
					   
		Запрос.УстановитьПараметр("СписокИсточниковОтчета", СписокИсточников);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		МассивСсылок = Новый Массив(1);
		
		Пока Выборка.Следующий() Цикл
			
			МассивСсылок[0] = Выборка.Ссылка;
			ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
			Если ТаблицаСсылок.Количество() = 0 Тогда
				ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Попытка					
					ОтчетОбъект.Удалить();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			Иначе
				Сообщить("Регламентированный отчет " +  Выборка.Ссылка.Код + " " + """" + Выборка.Ссылка.Наименование + """" + " - не может быть удален, т.к. имеются ссылки в информационной базе" );
			КонецЕсли;	
			
		КонецЦикла;
		
		// Обновление справочника "Регламентированные отчеты"
		ПроцедурыОбновленияИнформационнойБазы.ОбновитьРегламентированныеОтчеты();
		
		// Переименовываем ссылку удаленного отчета "1ТЗП" 
		// в документах "Регламентированный отчет" на вновь добавленные,
		// используемые до 2018 года.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РегламентированныйОтчет.Ссылка,
		               |	РегламентированныйОтчет.ИсточникОтчета
		               |ИЗ
		               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
		               |ГДЕ
		               |	РегламентированныйОтчет.ИсточникОтчета В(&СписокИсточниковОтчета)";
					   
		СписокИсточников =  Новый СписокЗначений;
		СписокИсточников.Добавить("РегламентированныйОтчетФорма1ТЗП");
					   
		Запрос.УстановитьПараметр("СписокИсточниковОтчета", СписокИсточников);
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Источник = Выборка.ИсточникОтчета;
			ОтчетОбъект.ИсточникОтчета = Источник + "До2018";
			Попытка
				ОтчетОбъект.ОбменДанными.Загрузка = Истина;
				ОтчетОбъект.Записать();
			Исключение				
				Сообщить(" При записи документа ""Регламентированный отчет"" """ + Выборка.Ссылка.Номер + """" + Выборка.Ссылка.НаименованиеОтчета + """" + " произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЦикла;
		
		//Сообщить("-----------------------");
		//Сообщить("Установка размеров регламентированных показателей с 1 января 2019г.");
		//
		//ДатаСведений = '2019-01-01';
		//
		//НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
		//НаборЗаписей.Отбор.Период.Установить(ДатаСведений, Истина);
		//ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, ДатаСведений, 42500, 2525, 882*2525, 882*2525, 42500, 2525);
		//Попытка
		//	НаборЗаписей.Записать();
		//Исключение
		//	Сообщить("При записи в регистр сведений ""Регламентированные расчетные показатели"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		//КонецПопытки;

		// Установка вычетов по доходам
		Сообщить("-----------------------");
		Сообщить("Обновление сведений о вычетах по частично облагаемым доходам");
		
		НаборЗаписей = РегистрыСведений.ВычетыПоДоходам.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Период.Установить(Дата("20190101"), Истина);
		
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20190101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 12*2525, 0);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20190101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 94*2525);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20190101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 6*2525, 0);
		
        Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Вычеты по доходам"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;

		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РасчетнаяВедомостьОрганизации",	 "РасчетныеВедомостиОрганизаций");
		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РасчетныеЛисткиОрганизаций",	 "РасчетныеЛисткиОрганизаций");
		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РегистрНалоговогоУчетаПоИПНиСН",	 "РегистрНалоговогоУчетаПоИПНиСН");

		//////////////////////////////////////////////////////////////////////////////////
		//// Обновление плана счетов 2019 года 
		//Сообщить("-----------------------");
		//Сообщить("Заполнение настроек новых счетов в плане счетов бухгалтерского учета 2019 года"".");
		//
		//Сообщить("    - Установка запрета использования в проводках для удаленных счетов");
		//
		//Запрос 			= Новый Запрос;
		//Запрос.Текст 	= "
		//|ВЫБРАТЬ
		//|	Типовой.Ссылка КАК Счет,
		//|	Типовой.Представление КАК Представление
		//|ИЗ
		//|	ПланСчетов.Типовой КАК Типовой
		//|ГДЕ
		//|	НЕ Типовой.ЗапретитьИспользоватьВПроводках
		//|	И ПОДСТРОКА(Типовой.Код, 1, 1) = ""Я""
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	Типовой.Ссылка,
		//|	Типовой.Представление
		//|ИЗ
		//|	ПланСчетов.Типовой КАК Типовой
		//|ГДЕ
		//|	Типовой.Ссылка В (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДополнительноОплаченныйКапитал), ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочныеБиологическиеАктивы))
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	Типовой.Ссылка,
		//|	Типовой.Представление
		//|ИЗ
		//|	ПланСчетов.Типовой КАК Типовой
		//|ГДЕ
		//|	НЕ Типовой.Код = Типовой.Порядок";
		//
		//Результат = Запрос.Выполнить();
		//
		//Выборка = Результат.Выбрать();
		//Пока Выборка.Следующий() Цикл
		//	
		//	ОбъектСчет = Выборка.Счет.ПолучитьОбъект();
		//	Если ОбъектСчет = Неопределено Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	
		//	ОбъектИзменен = Ложь;
		//	
		//	Если Лев(ОбъектСчет.Код, 1) = "Я" Тогда
		//		ОбъектСчет.ЗапретитьИспользоватьВПроводках = Истина;
		//		ОбъектИзменен = Истина;
		//	КонецЕсли;
		//	
		//	Если Выборка.Счет = ПланыСчетов.Типовой.КраткосрочныеБиологическиеАктивы
		//		ИЛИ Выборка.Счет = ПланыСчетов.Типовой.ДополнительноОплаченныйКапитал Тогда
		//		ОбъектСчет.ЗапретитьИспользоватьВПроводках = Истина;
		//		ОбъектИзменен = Истина;
		//	КонецЕсли;
		//	
		//	Если НЕ ОбъектСчет.Порядок = ОбъектСчет.ПолучитьПорядокКода() Тогда
		//		ОбъектСчет.Порядок = ОбъектСчет.ПолучитьПорядокКода();
		//		ОбъектИзменен = Истина;                           
		//	КонецЕсли;
		//	
		//	Если НЕ ОбъектИзменен Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	
		//	Попытка
		//		ОбъектСчет.Записать();
		//	Исключение
		//		ТекстСообщения = НСтр("ru='Операция не выполнена'");
		//		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		//	КонецПопытки;	    
		//КонецЦикла; 
		//
		//Сообщить("    - Обновление кода и наименования на предопределенные значения для измененных счетов");
		//ОбновитьНаименованиеИзмененныхСчетов("Типовой");
		//
		//Сообщить("Обновление плана счетов бухгалтерского учета завершено.");
		//Сообщить("-----------------------");
		
		// Перенос субботы с 4 мая на 10		
		НаборЗаписей = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Год.Установить(Год("20190101"));
		НаборЗаписей.Прочитать();

		Если НаборЗаписей.Количество() > 0 Тогда
			
			Сообщить("-----------------------");
			Сообщить("Корректировка регламентированного производственного календаря: перенос субботы с 4 мая на 10");
			
			ЗаписьПроизводственногоКалендаря = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьМенеджерЗаписи();
			
			// Установим 4 мая рабочим
			ЗаписьПроизводственногоКалендаря.ДатаКалендаря = Дата("20190504");
			ЗаписьПроизводственногоКалендаря.Год 		   = 2019;
			ЗаписьПроизводственногоКалендаря.Прочитать();
			
			Если ЗаписьПроизводственногоКалендаря.Выбран() 
				И ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота Тогда
				ЗаписьПроизводственногоКалендаря.ВидДня 	= Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий;
				ЗаписьПроизводственногоКалендаря.Пятидневка	= 1;
				ЗаписьПроизводственногоКалендаря.Записать(Истина);
			КонецЕсли;
			
			// Установим 10 мая дополнительным выходным
			ЗаписьПроизводственногоКалендаря.ДатаКалендаря = Дата("20190510");
			ЗаписьПроизводственногоКалендаря.Год 		   = 2019;
			ЗаписьПроизводственногоКалендаря.Прочитать();
			
			Если ЗаписьПроизводственногоКалендаря.Выбран() 
				И ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Тогда
				ЗаписьПроизводственногоКалендаря.ВидДня		= Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота;
				ЗаписьПроизводственногоКалендаря.Пятидневка	= 0;
				ЗаписьПроизводственногоКалендаря.Записать(Истина);
			КонецЕсли;
			
			Сообщить("Корректировка регламентированного производственного календаря выполнена успешно.");
		КонецЕсли;

		// с 16 октября 2018 г. ставка рефинансирования НБ = 9.00%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 16 октября 2018 - 9.25%.");

		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20181016', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20181016';
	 	СтрокаНабора.Размер = 9.25;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// КОНЕЦ 2.0.17.8
		//////////////////////////////////////////////////////////////////
		
		ПроцедурыОбновленияИнформационнойБазыДополнительный.ВыполнитьОбновлениеНаРелиз_2_0_17(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("20178", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	
		
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.18.1";

	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.17"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.18")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("20181", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.18.3";

	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.17"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.18")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РегистрНалоговогоУчетаПоИПНиСН",	 "РегистрНалоговогоУчетаПоИПНиСН");
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("20183", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.18.5";

	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.17"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.18")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		// Скорректируем записи, Учет налогообложения по видам доходов
		НаборУчетНалогообложенияПоВидамДоходов = РегистрыСведений.УчетНалогообложенияПоВидамДоходов.СоздатьНаборЗаписей();
		
		НаборУчетНалогообложенияПоВидамДоходов.Отбор.Период.Установить(Дата(2019, 1, 1));
		НаборУчетНалогообложенияПоВидамДоходов.Отбор.ВидДохода.Установить(ПредопределенноеЗначение("Справочник.ВидыДоходов.ДоходыОтРаботодателя"));
		НаборУчетНалогообложенияПоВидамДоходов.Прочитать();
		
		Для Каждого ЗаписьНабора Из НаборУчетНалогообложенияПоВидамДоходов Цикл
			Если ЗаписьНабора.УчитыватьВОСМС Тогда
				ЗаписьНабора.УчитыватьВОСМС = Ложь;
			КонецЕсли;		
		КонецЦикла;
		
		Попытка
			НаборУчетНалогообложенияПоВидамДоходов.Записать();
		Исключение
			Сообщить("При корректировке записи регистра сведений ""Учет налогообложения по видам доходов"" произошли ошибки: " + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		// Удаление отчета РегламентированныйОтчетФорма2ТПРОФ	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РегламентированныеОтчеты.Ссылка,
		               |	РегламентированныеОтчеты.ИсточникОтчета
		               |ИЗ
		               |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		               |ГДЕ
		               |	РегламентированныеОтчеты.ИсточникОтчета В(&СписокИсточниковОтчета)";
					   
		СписокИсточников =  Новый СписокЗначений;
		СписокИсточников.Добавить("РегламентированныйОтчетФорма2ТПРОФ");
					   
		Запрос.УстановитьПараметр("СписокИсточниковОтчета", СписокИсточников);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		МассивСсылок = Новый Массив(1);
		
		Пока Выборка.Следующий() Цикл
			
			МассивСсылок[0] = Выборка.Ссылка;
			ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
			Если ТаблицаСсылок.Количество() = 0 Тогда
				ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Попытка					
					ОтчетОбъект.Удалить();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			Иначе
				Сообщить("Регламентированный отчет " +  Выборка.Ссылка.Код + " " + """" + Выборка.Ссылка.Наименование + """" + " - не может быть удален, т.к. имеются ссылки в информационной базе" );
			КонецЕсли;	
			
		КонецЦикла;
		
		// Обновление справочника "Регламентированные отчеты"
		ПроцедурыОбновленияИнформационнойБазы.ОбновитьРегламентированныеОтчеты();
		
		// Переименовываем ссылку удаленного отчета "2ТПРОФ" 
		// в документах "Регламентированный отчет" на вновь добавленные,
		// используемые до 2019 года.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РегламентированныйОтчет.Ссылка,
		               |	РегламентированныйОтчет.ИсточникОтчета
		               |ИЗ
		               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
		               |ГДЕ
		               |	РегламентированныйОтчет.ИсточникОтчета В(&СписокИсточниковОтчета)";
					   
		СписокИсточников =  Новый СписокЗначений;
		СписокИсточников.Добавить("РегламентированныйОтчетФорма2ТПРОФ");
					   
		Запрос.УстановитьПараметр("СписокИсточниковОтчета", СписокИсточников);
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Источник = Выборка.ИсточникОтчета;
			ОтчетОбъект.ИсточникОтчета = Источник + "До2019";
			Попытка
				ОтчетОбъект.ОбменДанными.Загрузка = Истина;
				ОтчетОбъект.Записать();
			Исключение				
				Сообщить(" При записи документа ""Регламентированный отчет"" """ + Выборка.Ссылка.Номер + """" + Выборка.Ссылка.НаименованиеОтчета + """" + " произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЦикла;
		
		// с 16 апреля 2019 г. ставка рефинансирования НБ = 9.00%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 16 апреля 2019 - 9.00%.");

		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20190416', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20190416';
	 	СтрокаНабора.Размер = 9.00;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("20185", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.19.1";

	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.18"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.19")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		// Установка вычетов по доходам
		Сообщить("-----------------------");
		Сообщить("Обновление сведений о вычетах по частично облагаемым доходам");
		
		НаборЗаписей = РегистрыСведений.ВычетыПоДоходам.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Период.Установить(Дата("20190101"), Истина);
		
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20190101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 12*2525, 0);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20190101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 94*2525);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20190101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 6*2525, 0);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20190101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341Погребение, 0, 94*2525);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20190101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341РождениеРебенка, 0, 94*2525);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи в регистр сведений ""Вычеты к доходам"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;

		Сообщить("-----------------------");
		Сообщить("Установка ставок ОСМС.");
		
		//ОСМС с 2020 года
		НаборЗаписей = РегистрыСведений.СведенияОСтавкахОСМС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить('20200101', Истина);
		
		// ДоходыОтРаботодателя
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьСведенияОСтавкахОСМС(НаборЗаписей, '20200101', Справочники.ВидыДоходов.ДоходыОтРаботодателя,     1, 2);
		
		// ДоходыОтНалоговогоАгента
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьСведенияОСтавкахОСМС(НаборЗаписей, '20200101', Справочники.ВидыДоходов.ДоходыОтНалоговогоАгента, 1, 0);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("  при записи в регистр сведений ""Вычеты по доходам"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;

		НаборЗаписей = РегистрыСведений.УчетНалогообложенияПоВидамДоходов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Дата("20200101"));

		ПроцедурыОбновленияИнформационнойБазы.ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, "20200101", ПредопределенноеЗначение("Справочник.ВидыДоходов.ДоходыОтРаботодателя"), Истина, Истина, Истина, Истина, Истина, Истина, Истина);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, "20200101", ПредопределенноеЗначение("Справочник.ВидыДоходов.ДоходыОтНалоговогоАгента"), Истина, Истина, Истина, Истина, Истина, Истина, Истина);
		
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Учет налогообложения по видам доходов"" произошли ошибки: " + Символы.ПС + 
						ОписаниеОшибки());
		КонецПопытки;
		
		Сообщить("-----------------------");
		Сообщить("Установка размеров регламентированных показателей с 1 января 2020г.");
		
		ДатаСведений = '2020-01-01';
		
		НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ДатаСведений, Истина);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, ДатаСведений, 42500, 2651, 882*2651, 882*2651, 42500, 2651);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи в регистр сведений ""Регламентированные расчетные показатели"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;

		// Установка вычетов по доходам
		Сообщить("-----------------------");
		Сообщить("Обновление сведений о вычетах по частично облагаемым доходам");
		
		НаборЗаписей = РегистрыСведений.ВычетыПоДоходам.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Период.Установить(Дата("20200101"), Истина);
		
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20200101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 12*2651, 0);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20200101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 94*2651);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20200101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 6*2651, 0);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20200101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341Погребение, 0, 94*2651);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20200101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341РождениеРебенка, 0, 94*2651);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи в регистр сведений ""Вычеты к доходам"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		////////////////////////////////////////////////////////////////////////////////
		// Заполнение ресурсов регистра Учетная политика (налоговый учет) для ИП на  2020 год
		Сообщить("-----------------------");
		Сообщить("Заполнение ресурсов регистра ""Учетная политика (налоговый учет)"" для ИП на 2020 год");
		Сообщить("-----------------------");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.УпрощенныйУчетИПНиОПВ,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОтражениеПоПериодуРегистрации КАК ОтражениеПоПериодуРегистрации,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОрганизацияЯвляетсяПлательщикомСН,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПорядокСписанияЗадолженностиПоЗарплате,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.РаспределятьНалогиПоСтруктурнымЕдиницам,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.РаспределятьНалогиПоПодразделениямОрганизаций,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОрганизацияЯвляетсяВкладчикомОППВ,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПрименятьОграничениеНаМинимальныйОбъектОСМС,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.НеПрименятьКорректировкуПрочихНалоговВзносовОтчислений,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПрименятьВычетВОСМСДляФизическихЛицИГПХ,
		|	5 КАК СтавкаВОСМСДляИП,
		|	ДАТАВРЕМЯ(2020, 1, 1) КАК Период
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(ДАТАВРЕМЯ(2020, 1, 1), Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Значение   = ВыборкаДетальныеЗаписи.Организация;
			НаборЗаписей.Отбор.Организация.Использование = Истина;
			НаборЗаписей.Отбор.Период.Значение    = ВыборкаДетальныеЗаписи.Период;
			НаборЗаписей.Отбор.Период.Использование   = Истина;
			
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);
			
			Попытка
				НаборЗаписей.Записать();
				Сообщить("Заполнение ресурсов регистра ""Учетная политика (налоговый учет)"" для организации " + ВыборкаДетальныеЗаписи.Организация + " на 2020 год завершено.");
			Исключение
				Сообщить("При записи в регистр сведений ""Учетная политика (налоговый учет)"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЦикла;
		
		// с 10 сентября 2019 ставка рефинансирования НБ = 9.25%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 10 сентября 2019 - 9.25%");

		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('2019-09-10', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '2019-09-10';
	 	СтрокаНабора.Размер = 9.25;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("20191", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.19.3";

	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.18"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.19")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
		
		// очистим порядок округления ПорядокОкругленияРезультатовРасчетаЗарплаты
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			|	ПорядокОкругленияРезультатовРасчетаЗарплаты.Период КАК Период,
			|	ПорядокОкругленияРезультатовРасчетаЗарплаты.ВидРасчета КАК ВидРасчета
			|ИЗ
			|	РегистрСведений.ПорядокОкругленияРезультатовРасчетаЗарплаты КАК ПорядокОкругленияРезультатовРасчетаЗарплаты
			|ГДЕ
			|	ПорядокОкругленияРезультатовРасчетаЗарплаты.Период >= ДАТАВРЕМЯ(2020, 1, 1)
			|	И ПорядокОкругленияРезультатовРасчетаЗарплаты.ВидРасчета = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование)";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ПорядокОкругленияРезультатовРасчетаЗарплаты = РегистрыСведений.ПорядокОкругленияРезультатовРасчетаЗарплаты.СоздатьНаборЗаписей();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ПорядокОкругленияРезультатовРасчетаЗарплаты.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
			ПорядокОкругленияРезультатовРасчетаЗарплаты.Отбор.ВидРасчета.Установить(ВыборкаДетальныеЗаписи.ВидРасчета);
			
			ПорядокОкругленияРезультатовРасчетаЗарплаты.Прочитать();
			ПорядокОкругленияРезультатовРасчетаЗарплаты.Очистить();
			
			Попытка
				
				ПорядокОкругленияРезультатовРасчетаЗарплаты.ОбменДанными.Загрузка = Истина;
				ПорядокОкругленияРезультатовРасчетаЗарплаты.Записать();
				
			Исключение
				
				ТекстСообщения = НСтр(
				"ru = 'при записи набора данных ""Порядок округления результатов расчета налогов, сборов, отчислений"" произошла ошибка: 
				|%1");
				
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодробноеПредставлениеОшибки);
				
				ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Не удалось обновить ""Регистр сведений  ""Порядок округления результатов расчета налогов, сборов, отчислений"""".'"), 
				УровеньЖурналаРегистрации.Ошибка, , , Комментарий);					
				
			КонецПопытки;
			
		КонецЦикла;
		
		// с 10 марта 2020 ставка рефинансирования НБ = 12%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 10 марта 2020 - 12%");

		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('2020-03-10', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '2020-03-10';
	 	СтрокаНабора.Размер = 12;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		Сообщить("-----------------------");
		Сообщить("Установка размеров регламентированных показателей с 1 апреля 2020г.");
		
		ДатаСведений = '2020-04-01';
		
		НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ДатаСведений, Истина);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, ДатаСведений, 42500, 2778, 882*2651, 882*2651, 42500, 2651);
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи в регистр сведений ""Регламентированные расчетные показатели"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// Установка вычетов по доходам
		Сообщить("-----------------------");
		Сообщить("Обновление сведений о вычетах по частично облагаемым доходам");
		
		НаборЗаписей = РегистрыСведений.ВычетыПоДоходам.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Период.Установить(Дата("20200401"), Истина);
		
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20200401"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 12*2778, 0);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20200401"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 6*2778, 0);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи в регистр сведений ""Вычеты к доходам"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("20193", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.19.4";

	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.18"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.19")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
		
		////////////////////////////////////////////////////////////////////////////////
		// Заполнение ресурсов регистра Учетная политика (налоговый учет) для ИП на  2020 год
		Сообщить("-----------------------");
		Сообщить("Заполнение ресурсов регистра ""Учетная политика (налоговый учет)"" для ИП на 2020 год");
		Сообщить("-----------------------");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.УпрощенныйУчетИПНиОПВ,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОтражениеПоПериодуРегистрации КАК ОтражениеПоПериодуРегистрации,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОрганизацияЯвляетсяПлательщикомСН,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПорядокСписанияЗадолженностиПоЗарплате,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.РаспределятьНалогиПоСтруктурнымЕдиницам,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.РаспределятьНалогиПоПодразделениямОрганизаций,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОрганизацияЯвляетсяВкладчикомОППВ,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПрименятьОграничениеНаМинимальныйОбъектОСМС,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.НеПрименятьКорректировкуПрочихНалоговВзносовОтчислений,
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПрименятьВычетВОСМСДляФизическихЛицИГПХ,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчетСрезПоследних.СтавкаВОСМСДляИП, 5) КАК СтавкаВОСМСДляИП,
		|	10 КАК СтавкаОПВдляИП,
		|	3.5 КАК СтавкаСОДляИП,
		|	ДАТАВРЕМЯ(2020, 1, 1) КАК Период
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(ДАТАВРЕМЯ(2020, 1, 1), Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Значение   = ВыборкаДетальныеЗаписи.Организация;
			НаборЗаписей.Отбор.Организация.Использование = Истина;
			НаборЗаписей.Отбор.Период.Значение    = ВыборкаДетальныеЗаписи.Период;
			НаборЗаписей.Отбор.Период.Использование   = Истина;
			
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);
			
			Попытка
				НаборЗаписей.Записать();
				Сообщить("Заполнение ресурсов регистра ""Учетная политика (налоговый учет)"" для организации " + ВыборкаДетальныеЗаписи.Организация + " на 2020 год завершено.");
			Исключение
				Сообщить("При записи в регистр сведений ""Учетная политика (налоговый учет)"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЦикла;

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("20194", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.19.6";

	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.18"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.19")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
		
		// Установим ставку ОПВ для дохода НА – 5%
		Сообщить("-----------------------");
		Сообщить("Установка ставки ОПВ для дохода от налогового агента с 1 июня 2020 - 5%.");
		
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		
		НаборЗаписей = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидНалога.Установить(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, Истина);
		НаборЗаписей.Отбор.ВидДохода.Установить(Справочники.ВидыДоходов.ДоходыОтНалоговогоАгента, Истина);
		НаборЗаписей.Отбор.Налогоплательщик.Установить(ПустаяОрганизация, Истина);
		НаборЗаписей.Отбор.Период.Установить('20200601', Истина);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20200601', ПустаяОрганизация, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, 5, Справочники.ВидыДоходов.ДоходыОтНалоговогоАгента);
			Попытка
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
			Исключение
				Сообщить("При записи данных регистра сведений ""Сведения о ставках налогов, сборов, отчслений"" произошли ошибки: " + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
		// с 6 апреля 2020 ставка рефинансирования НБ = 9.5%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 6 апреля 2020 - 9.5%");

		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('2020-04-06', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '2020-04-06';
	 	СтрокаНабора.Размер = 9.5;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// Обновление справочника "Регламентированные отчеты"
		ПроцедурыОбновленияИнформационнойБазы.ОбновитьРегламентированныеОтчеты();
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("20196", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;

	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.20.1";

	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.18"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.19")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
				
		// Обновление справочника "Регламентированные отчеты"
		ПроцедурыОбновленияИнформационнойБазы.ОбновитьРегламентированныеОтчеты();
		
		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РегистрНалоговогоУчетаПоИПНиСН",	 "РегистрНалоговогоУчетаПоИПНиСН");
		
		Сообщить("-----------------------");
		Сообщить("Установка размеров регламентированных показателей с 1 января 2021г.");
		
		ДатаСведений = '2021-01-01';
		
		НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ДатаСведений, Истина);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, ДатаСведений, 42500, 2917, 882*2917, 882*2917, 42500, 2917);
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи в регистр сведений ""Регламентированные расчетные показатели"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		Сообщить("-----------------------");
		Сообщить("Установка ставок ОСМС.");
		
		//ОСМС с 2021 года
		НаборЗаписей = РегистрыСведений.СведенияОСтавкахОСМС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить('20210101', Истина);
		
		// ДоходыОтРаботодателя
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьСведенияОСтавкахОСМС(НаборЗаписей, '20210101', Справочники.ВидыДоходов.ДоходыОтРаботодателя,     2, 2);
		
		// ДоходыОтНалоговогоАгента
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьСведенияОСтавкахОСМС(НаборЗаписей, '20210101', Справочники.ВидыДоходов.ДоходыОтНалоговогоАгента, 2, 0);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("  при записи в регистр сведений ""Сведения о ставках ОСМС"" произошли ошибки:"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
        КонецПопытки;
        
        // Установим размеры коэффициентов ставок рефенансирования для расчета компенсации за задержку зарплаты 
		Сообщить("-----------------------");
		Сообщить("Установка размера коэффициента ставок рефинансирования НБ для расчета компенсации за задержку зарплаты.");
		
		ДобавитьСведенияОКоэффициентеСтавкиРефинансированияНБДляРасчетаПени('20100101', Справочники.Организации.ПустаяСсылка(), Справочники.НалогиСборыОтчисления.ПустаяСсылка(), 1);
		ДобавитьСведенияОКоэффициентеСтавкиРефинансированияНБДляРасчетаПени('20200501', Справочники.Организации.ПустаяСсылка(), Справочники.НалогиСборыОтчисления.ПустаяСсылка(), 1.25);
		
		Сообщить("-----------------------");
        
        Сообщить("Обработка предопределенных элементов справочника ""Сохраненные настройки""");

		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РасчетныеЛисткиОрганизаций",    "РасчетныеЛисткиОрганизаций");
		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РасчетнаяВедомостьОрганизации", "РасчетныеВедомостиОрганизаций");
   		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РегистрНалоговогоУчетаПоИПНиСН",	 "РегистрНалоговогоУчетаПоИПНиСН");

        Сообщить("-----------------------");

        // Установим ставку ОПВ  – 10%
		Сообщить("-----------------------");
		Сообщить("Установка ставки ОПВ для всех видов дохода с 1 января 2021 года - 10%.");
		
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		
		НаборЗаписей = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидНалога.Установить(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, Истина);
		НаборЗаписей.Отбор.Налогоплательщик.Установить(ПустаяОрганизация, Истина);
		НаборЗаписей.Отбор.Период.Установить('20210101', Истина);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20210101', ПустаяОрганизация, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, 10);
			Попытка
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
			Исключение
				Сообщить("При записи данных регистра сведений ""Сведения о ставках налогов, сборов, отчслений"" произошли ошибки: " + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;

		//Перенос дня отдыха с субботы 3 июля 2021 года на понедельник 5 июля 2021 года.		
		НаборЗаписей = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Год.Установить(Год("20210101"));
		НаборЗаписей.Прочитать();

		Если НаборЗаписей.Количество() > 0 Тогда
			
			Сообщить("-----------------------");
			Сообщить("Корректировка регламентированного производственного календаря: перенос субботы 3 июля 2021 года на понедельник 5 июля 2021 года");      
			
			ЗаписьПроизводственногоКалендаря = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьМенеджерЗаписи();
			
			// Установим 3 июля рабочим
			ЗаписьПроизводственногоКалендаря.ДатаКалендаря = Дата("20210703");
			ЗаписьПроизводственногоКалендаря.Год 		   = 2021;
			ЗаписьПроизводственногоКалендаря.Прочитать();
			
			Если ЗаписьПроизводственногоКалендаря.Выбран() 
				И ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота Тогда
				ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий;
				ЗаписьПроизводственногоКалендаря.Пятидневка		= 1;
				ЗаписьПроизводственногоКалендаря.Записать(Истина);
			КонецЕсли;
			
			// Установим 5 июля дополнительным выходным
			ЗаписьПроизводственногоКалендаря.ДатаКалендаря = Дата("20210705");
			ЗаписьПроизводственногоКалендаря.Год 		   = 2021;
			ЗаписьПроизводственногоКалендаря.Прочитать();
			
			Если ЗаписьПроизводственногоКалендаря.Выбран() 
				И ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Тогда
				ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота;
				ЗаписьПроизводственногоКалендаря.Пятидневка		= 0;
				ЗаписьПроизводственногоКалендаря.Записать(Истина);
			КонецЕсли;
			
			Сообщить("Корректировка регламентированного производственного календаря выполнена успешно.");
		КонецЕсли;

		// с 21 июля 2020 ставка рефинансирования НБ = 9%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 21 июля 2020 - 9%");
		
		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20200721', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20200721';
	 	СтрокаНабора.Размер = 9;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("20201", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
				
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;

	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.20.2";

	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.19"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.20")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
				
		// Обновление справочника "Регламентированные отчеты"
		ПроцедурыОбновленияИнформационнойБазы.ОбновитьРегламентированныеОтчеты();

        Сообщить("-----------------------");
        
        Сообщить("Обработка предопределенных элементов справочника ""Сохраненные настройки""");

   		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РегистрНалоговогоУчетаПоИПНиСН",	 "РегистрНалоговогоУчетаПоИПНиСН");

        Сообщить("-----------------------");

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("20202", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
				
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.20.3";

	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.19"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.20")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
				
		// Обновление справочника "Регламентированные отчеты"
		ПроцедурыОбновленияИнформационнойБазы.ОбновитьРегламентированныеОтчеты();

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("20203", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка вычетов по доходам
		Сообщить("-----------------------");
		Сообщить("Обновление сведений о вычетах по частично облагаемым доходам");
		
		НаборЗаписей = РегистрыСведений.ВычетыПоДоходам.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Период.Установить(Дата("20210101"), Истина);
		
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20210101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 12*2917, 0);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20210101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 94*2917);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20210101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 6*2917, 0);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20210101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341Погребение, 0, 94*2917);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20210101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341РождениеРебенка, 0, 94*2917);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи в регистр сведений ""Вычеты к доходам"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// с 27 июля 2021 ставка рефинансирования НБ = 9.25%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 27 июля 2021 - 9.25%");
		
		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20210727', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20210727';
	 	СтрокаНабора.Размер = 9.25;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// с 13 сентября 2021 ставка рефинансирования НБ = 9.5%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 14 сентября 2021 - 9.5%");
		
		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20210914', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20210914';
	 	СтрокаНабора.Размер = 9.5;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
        
        Сообщить("-----------------------");
        Сообщить("Создание вида задолженности подотчетных лиц.");
        
        СписокСубконто = Новый СписокЗначений;
        
        // из БП перечисления ВидыЗадолженностиПодотчетныхЛиц и ВидыИзмененийВСобственномКапитале
        
        ПВХ = ПланыВидовХарактеристик.ВидыСубконтоТиповые;
        
        // ВидыЗадолженностиПодотчетныхЛиц
        СписокСубконто.Добавить(ПВХ.ВидыЗадолженностиПодотчетныхЛиц, "СуточныеСверхНормы");
        
        СпрСубконто = Справочники.Субконто;
        
        Для Каждого ЭлементСписка Из СписокСубконто Цикл
            ИскомыйЭлемент = СпрСубконто.НайтиПоНаименованию(ЭлементСписка.Представление, Истина, , ЭлементСписка.Значение);
            Если ИскомыйЭлемент.Пустая() Тогда
                НовыйЭлемент = СпрСубконто.СоздатьЭлемент();
                
                НовыйЭлемент.Наименование = ЭлементСписка.Представление;
                НовыйЭлемент.Владелец = ЭлементСписка.Значение;
                НовыйЭлемент.УстановитьНовыйКод();
                Попытка
                    НовыйЭлемент.Записать();
                    
                    Сообщить("Создание вида задолженности подотчетных лиц завершена.");
                Исключение
                    Сообщить("  при записи в справочнике ""Субконто"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
                КонецПопытки;
                
            КонецЕсли;
        КонецЦикла;
        
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
				
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
		
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.21.1";

	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.19"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.20")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
				
		// с 25 октября 2021 ставка рефинансирования НБ = 9.75%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 25 октября 2021 - 9.75%");
		
		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20211025', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20211025';
	 	СтрокаНабора.Размер = 9.75;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
				
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
		// Обновление справочника "Регламентированные отчеты"
		ПроцедурыОбновленияИнформационнойБазы.ОбновитьРегламентированныеОтчеты();
		
		Сообщить("-----------------------");
		Сообщить("Установка размеров регламентированных показателей с 1 января 2022 г.");
		
		ДатаСведений = '2022-01-01';
		
		НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ДатаСведений, Истина);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, ДатаСведений, 60000, 3063, 882*3063, 882*3063, 60000, 3063);
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи в регистр сведений ""Регламентированные расчетные показатели"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		Сообщить("-----------------------");
		Сообщить("Установка ставок ОСМС.");
		
		// ОСМС с 2022 года
		НаборЗаписей = РегистрыСведений.СведенияОСтавкахОСМС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить('20220101', Истина);
		
		// ДоходыОтРаботодателя
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьСведенияОСтавкахОСМС(НаборЗаписей, '20220101', Справочники.ВидыДоходов.ДоходыОтРаботодателя,     2, 3);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("  при записи в регистр сведений ""Сведения о ставках ОСМС"" произошли ошибки:"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
        КонецПопытки;
        
		//Перенос дня отдыха с субботы 5 марта 2022 года на понедельник 7 марта 2022 года.		
		НаборЗаписей = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Год.Установить(Год("20220101"));
		НаборЗаписей.Прочитать();

		Если НаборЗаписей.Количество() > 0 Тогда
			
			Сообщить("-----------------------");
			Сообщить("Корректировка регламентированного производственного календаря: перенос субботы 3 марта 2022 года на понедельник 7 марта 2022 года");      
			
			ЗаписьПроизводственногоКалендаря = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьМенеджерЗаписи();
			
			// Установим 5 марта рабочим
			ЗаписьПроизводственногоКалендаря.ДатаКалендаря = Дата("20220305");
			ЗаписьПроизводственногоКалендаря.Год 		   = 2022;
			ЗаписьПроизводственногоКалендаря.Прочитать();
			
			Если ЗаписьПроизводственногоКалендаря.Выбран() 
				И ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота Тогда
				ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий;
				ЗаписьПроизводственногоКалендаря.Пятидневка		= 1;
				ЗаписьПроизводственногоКалендаря.Записать(Истина);
			КонецЕсли;
			
			// Установим 7 июля рабочим
			ЗаписьПроизводственногоКалендаря.ДатаКалендаря = Дата("20220707");
			ЗаписьПроизводственногоКалендаря.Год 		   = 2022;
			ЗаписьПроизводственногоКалендаря.Прочитать();
			
			Если ЗаписьПроизводственногоКалендаря.Выбран() 
				И НЕ ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Тогда
				ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий;
				ЗаписьПроизводственногоКалендаря.Пятидневка = 1;
				ЗаписьПроизводственногоКалендаря.Записать(Истина);
			КонецЕсли;
			
			ЗаписьПроизводственногоКалендаря.ДатаКалендаря = Дата("20220709");
			ЗаписьПроизводственногоКалендаря.Год 		   = 2022;
			ЗаписьПроизводственногоКалендаря.Прочитать();
			
			Если ЗаписьПроизводственногоКалендаря.Выбран() 
				И НЕ ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.ДополнительныйВыходной Тогда
				ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.ДополнительныйВыходной;
				ЗаписьПроизводственногоКалендаря.Пятидневка = 1;
				ЗаписьПроизводственногоКалендаря.Записать(Истина);
			КонецЕсли;
			
			Сообщить("-----------------------");
			Сообщить("Корректировка регламентированного производственного календаря: перенос субботы 27 августа 2022 года на понедельник 29 августа 2022 года");      
			
			ЗаписьПроизводственногоКалендаря = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьМенеджерЗаписи();
			
			// Установим 27 августа рабочим
			ЗаписьПроизводственногоКалендаря.ДатаКалендаря = Дата("20220827");
			ЗаписьПроизводственногоКалендаря.Год 		   = 2022;
			ЗаписьПроизводственногоКалендаря.Прочитать();
			
			Если ЗаписьПроизводственногоКалендаря.Выбран() 
				И ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота Тогда
				ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий;
				ЗаписьПроизводственногоКалендаря.Пятидневка		= 1;
				ЗаписьПроизводственногоКалендаря.Записать(Истина);
			КонецЕсли;
			
			// Установим 29 августа дополнительным выходным
			ЗаписьПроизводственногоКалендаря.ДатаКалендаря = Дата("20220829");
			ЗаписьПроизводственногоКалендаря.Год 		   = 2022;
			ЗаписьПроизводственногоКалендаря.Прочитать();
			
			Если ЗаписьПроизводственногоКалендаря.Выбран() 
				И ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Тогда
				ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота;
				ЗаписьПроизводственногоКалендаря.Пятидневка		= 0;
				ЗаписьПроизводственногоКалендаря.Записать(Истина);
			КонецЕсли;
			
			Сообщить("Корректировка регламентированного производственного календаря выполнена успешно.");
			
		КонецЕсли;

		// Изменение статуса Инвалид ВОВ на Участник ВОВ
		Сообщить("Изменение записей регистра сведений ""Сведения о физлицах участниках ВОВ и приравненных к ним"" 
                   |со статусом ""Инвалид ВОВ"" на статус ""Ветераны ВОВ, в том числе инвалиды ВОВ"".");
		
        НаборЗаписей = РегистрыСведений.СведенияОФизлицахУчастникахВОВ.СоздатьНаборЗаписей();
        
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ
        |   ДАТАВРЕМЯ(2022, 1, 1) КАК Период,
        |   ДАТАВРЕМЯ(2022, 1, 1) КАК ДатаРегистрацииИзменений,
        |   СведенияОФизлицахУчастникахВОВ.Физлицо КАК Физлицо,
        |   ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.УчастникВОВ) КАК Статус,
        |   СведенияОФизлицахУчастникахВОВ.СерияУдостоверения КАК СерияУдостоверения,
        |   СведенияОФизлицахУчастникахВОВ.НомерУдостоверения КАК НомерУдостоверения,
        |   СведенияОФизлицахУчастникахВОВ.ДатаВыдачи КАК ДатаВыдачи
        |ИЗ
        |   РегистрСведений.СведенияОФизлицахУчастникахВОВ.СрезПоследних(ДАТАВРЕМЯ(2022, 1, 1), ) КАК СведенияОФизлицахУчастникахВОВ
        |ГДЕ
        |   СведенияОФизлицахУчастникахВОВ.Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ИнвалидВОВ)
        |   И НЕ СведенияОФизлицахУчастникахВОВ.Период = ДАТАВРЕМЯ(2022, 1, 1)";
        
        РезультатЗапроса = Запрос.Выполнить();
        
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
            
            НаборЗаписей.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
            НаборЗаписей.Отбор.Физлицо.Установить(ВыборкаДетальныеЗаписи.Физлицо);
            
            СтрокаНабора = НаборЗаписей.Добавить();
            ЗаполнитьЗначенияСвойств(СтрокаНабора, ВыборкаДетальныеЗаписи);
            
            Попытка
                НаборЗаписей.Записать();
                Сообщить("Изменение записей регистра сведений ""Сведения о физлицах участниках ВОВ и приравненных к ним"" 
                            |со статусом ""Инвалид ВОВ"" на статус ""Ветераны ВОВ, в том числе инвалиды ВОВ"" завершено.");
		        Сообщить("-----------------------");
            Исключение
                Сообщить("При записи набора данных ""Сведения о физ. лицах участниках ВОВ и приравненных к ним"" произошла ошибка: " + Символы.ПС + ОписаниеОшибки());	
            КонецПопытки;
            
        КонецЦикла; 

		// Установка вычетов по доходам
		Сообщить("-----------------------");
		Сообщить("Обновление сведений о вычетах по частично облагаемым доходам");
		
		НаборЗаписей = РегистрыСведений.ВычетыПоДоходам.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Период.Установить(Дата("20220101"), Истина);
		
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20220101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 12*3063, 0);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20220101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 94*3063);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20220101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 6*3063, 0);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20220101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341Погребение, 0, 94*3063);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20220101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341РождениеРебенка, 0, 94*3063);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи в регистр сведений ""Вычеты к доходам"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("20211", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
				
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.21.2";

	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.20"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.21")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
		
		// Обновление справочника "Регламентированные отчеты"
		ПроцедурыОбновленияИнформационнойБазы.ОбновитьРегламентированныеОтчеты();
		
		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20211025', Истина);
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20211026', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20211026';
	 	СтрокаНабора.Размер = 9.75;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// с 25 января 2022 ставка рефинансирования НБ = 10.25%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 25 января 2022 - 10.25%");
		
		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20220125', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20220125';
	 	СтрокаНабора.Размер = 10.25;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// с 24 февраля 2022 ставка рефинансирования НБ = 13.5%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 24 февраля 2022 - 13.5%");
		
		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20220224', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20220224';
	 	СтрокаНабора.Размер = 13.5;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// с 26 апреля 2022 ставка рефинансирования НБ = 14%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 26 апреля 2022 - 14%");
		
		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20220426', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20220426';
	 	СтрокаНабора.Размер = 14;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		////////////////////////////////////////////////////////////////////////////////
		// Установка новых значений ставок и регламентированных расчетных показателей с апреля 2022 год
		Сообщить("-----------------------");
		Сообщить("Установка новых значений регламентированных расчетных показателей с апреля 2022 год");
		Сообщить("-----------------------");
				
		НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить('20220401', Истина);		
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20220401"), 60000, 3063, 882*3063, 882*3063, 60000, 3063, 3180);	
		Попытка
			НаборЗаписей.Записать();
			Сообщить("Установка новых значений регламентированных расчетных показателей с апреля 2022 год завершена.");
		Исключение
			Сообщить("При записи в регистр сведений ""Регламентированные расчетные показатели"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("20212", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
				
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.21.3";

	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.20"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.21")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
		
		// Обновление справочника "Регламентированные отчеты"
		ПроцедурыОбновленияИнформационнойБазы.ОбновитьРегламентированныеОтчеты();
        
        // с 26 июля 2022 ставка рефинансирования НБ = 14%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 26 июля 2022 - 14,5%");
		
		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20220726', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20220726';
	 	СтрокаНабора.Размер = 14.5;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
        // с 27 октября 2022 ставка рефинансирования НБ = 16%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 27 октября 2022 - 16%");
		
		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20221027', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20221027';
	 	СтрокаНабора.Размер = 16;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("20213", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
				
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.21.4";

	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.20"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.21")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
		
		// Обновление справочника "Регламентированные отчеты"
		ПроцедурыОбновленияИнформационнойБазы.ОбновитьРегламентированныеОтчеты();
        
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("20214", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
				
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.21.5";

	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.20"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.21")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
        
      	// Удаление отчетов РегламентированныйОтчетСправкаОСуммахДоходаИОсуществленныхПенсионныхВзносов и РегламентированныйОтчетСправкаСМестаРаботыПередНаступлениемСоциальногоРиска	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РегламентированныеОтчеты.Ссылка,
		               |	РегламентированныеОтчеты.ИсточникОтчета
		               |ИЗ
		               |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		               |ГДЕ
		               |	РегламентированныеОтчеты.ИсточникОтчета В (&СписокИсточниковОтчета)";
        
        СписокИсточников =  Новый СписокЗначений;
		СписокИсточников.Добавить("РегламентированныйОтчетСправкаОСуммахДоходаИОсуществленныхПенсионныхВзносов");
		СписокИсточников.Добавить("РегламентированныйОтчетСправкаСМестаРаботыПередНаступлениемСоциальногоРиска");
					   
		Запрос.УстановитьПараметр("СписокИсточниковОтчета", СписокИсточников);

		Выборка = Запрос.Выполнить().Выбрать();
		
		МассивСсылок = Новый Массив(1);
		
		Пока Выборка.Следующий() Цикл
			
			МассивСсылок[0] = Выборка.Ссылка;
			ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
			Если ТаблицаСсылок.Количество() = 0 Тогда
				ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Попытка					
					ОтчетОбъект.Удалить();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			Иначе
				Сообщить("Регламентированный отчет " +  Выборка.Ссылка.Код + " " + """" + Выборка.Ссылка.Наименование + """" + " - не может быть удален, т.к. имеются ссылки в информационной базе" );
			КонецЕсли;	
			
		КонецЦикла;

		// Обновление справочника "Регламентированные отчеты"
		ПроцедурыОбновленияИнформационнойБазы.ОбновитьРегламентированныеОтчеты();
        
        // с 6 дкабря 2022 ставка рефинансирования НБ = 16,75%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 6 декабря 2022 - 16.75%");
		
		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20221206', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20221206';
	 	СтрокаНабора.Размер = 16.75;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;

      	Сообщить("-----------------------");
		Сообщить("Установка размеров регламентированных показателей с 1 января 2023 г.");
		
		ДатаСведений = '2023-01-01';
		
		НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ДатаСведений, Истина);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, ДатаСведений, 70000, 3450, 882*3450, 882*3450, 70000, 3450, 3450);
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи в регистр сведений ""Регламентированные расчетные показатели"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;

        //Перенос дня отдыха с субботы 1 июля 2023 года на пятницу 7 июля 2023 года.		
		НаборЗаписей = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Год.Установить(Год("20230101"));
		НаборЗаписей.Прочитать();

		Если НаборЗаписей.Количество() > 0 Тогда
			
			Сообщить("-----------------------");
			Сообщить("Корректировка регламентированного производственного календаря: перенос субботы 1 июля 2023 года на пятницу 7 июля 2023 года");      
			
			ЗаписьПроизводственногоКалендаря = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьМенеджерЗаписи();
			
			// Установим 1 июля рабочим
			ЗаписьПроизводственногоКалендаря.ДатаКалендаря = Дата("20230701");
			ЗаписьПроизводственногоКалендаря.Год 		   = 2023;
			ЗаписьПроизводственногоКалендаря.Прочитать();
			
			Если ЗаписьПроизводственногоКалендаря.Выбран() 
				И ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота Тогда
				ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий;
				ЗаписьПроизводственногоКалендаря.Пятидневка		= 1;
				ЗаписьПроизводственногоКалендаря.Записать(Истина);
			КонецЕсли;
            
            // Установим 7 июля субботой
			ЗаписьПроизводственногоКалендаря.ДатаКалендаря = Дата("20230707");
			ЗаписьПроизводственногоКалендаря.Год 		   = 2023;
			ЗаписьПроизводственногоКалендаря.Прочитать();
			
			Если ЗаписьПроизводственногоКалендаря.Выбран() 
				И ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Тогда
				ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота;
				ЗаписьПроизводственногоКалендаря.Пятидневка		= 1;
				ЗаписьПроизводственногоКалендаря.Записать(Истина);
			КонецЕсли;

			Сообщить("Корректировка регламентированного производственного календаря выполнена успешно.");
			
		КонецЕсли;

        Сообщить("-----------------------");
		Сообщить("Заполнение сведений о ставках ИПН по видам доходов"); 
		
		НаборЗаписейСведенияОСтавкахИПН = РегистрыСведений.СведенияОСтавкахИПН.СоздатьНаборЗаписей();

		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		ВидыДоходов = Справочники.ВидыДоходов;		
		
		НаборЗаписейСведенияОСтавкахИПН.Отбор.Период.Установить('2023-01-01');
        НаборЗаписейСведенияОСтавкахИПН.Отбор.Налогоплательщик.Установить(ПустаяОрганизация);
        НаборЗаписейСведенияОСтавкахИПН.Отбор.ВидДохода.Установить(ВидыДоходов.Дивиденды);
        
        ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейСведенияОСтавкахИПН, '20230101', ПустаяОрганизация, ВидыДоходов.Дивиденды, 10, 15);

		Попытка
			НаборЗаписейСведенияОСтавкахИПН.ОбменДанными.Загрузка = Истина;
			НаборЗаписейСведенияОСтавкахИПН.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Сведения о ставках ИПН"" произошли ошибки: " + Символы.ПС + 
						ОписаниеОшибки());
		КонецПопытки;

        // Установка вычетов по доходам
		Сообщить("-----------------------");
		Сообщить("Обновление сведений о вычетах по частично облагаемым доходам");
		
		НаборЗаписей = РегистрыСведений.ВычетыПоДоходам.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Период.Установить(Дата("20230101"), Истина);
		
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20230101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 12*3450, 0);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20230101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 94*3450);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20230101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 6*3450, 0);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20230101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341Погребение, 0, 94*3450);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20230101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341РождениеРебенка, 0, 94*3450);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20230101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст341Дивиденды, 0, 30000*3450);
	
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи в регистр сведений ""Вычеты к доходам"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;

        // Заполнение ПВР с видом дохода "Дивиденды"
		
		Сообщить("-----------------------");
		Сообщить("Заполнение плана видов расчета ""Дополнительные начисления организаций"" с видом дохода ""Дивиденды"".");
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДополнительныеНачисленияОрганизаций.Ссылка,
			|	ДополнительныеНачисленияОрганизаций.ВидДохода,
			|	ДополнительныеНачисленияОрганизаций.СпособРасчета
			|ИЗ
			|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
			|ГДЕ
			|	ДополнительныеНачисленияОрганизаций.ВидДохода = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.Дивиденды)";
			
		Выборка = Запрос.Выполнить().Выбрать();
		НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
		ОблагаетсяЦеликом	= Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом;
        Пока Выборка.Следующий() Цикл
            ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
            
            ВидРасчетаОбъект.ОблагаетсяИПН = Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст341Дивиденды;	
            
            Попытка
                ВидРасчетаОбъект.Записать();
            Исключение
                Сообщить("При записи вида расчета """ + ВидРасчетаОбъект.Наименование + """ произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
            КонецПопытки;
            
        КонецЦикла;

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("20215", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
				
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.21.6";

	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.20"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.21")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("20216", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
				
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.22.1";

	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.21"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.22")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
		
		// с 28 августа 2023 ставка рефинансирования НБ = 16.5%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 28 августа 2023 - 16,5%");
		
		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20230828', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20230828';
	 	СтрокаНабора.Размер = 16.5;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
        
        // с 9 октября 2023 ставка рефинансирования НБ = 16%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 9 октября 2023 - 16%");
		
		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20231009', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20231009';
	 	СтрокаНабора.Размер = 16;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// с 27 ноября 2023 ставка рефинансирования НБ = 15,75%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 27 ноября 2023 - 15,75%");
		
		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
		СтавкаНБ.Отбор.Период.Установить('20231127', Истина);
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20231127';
		СтрокаНабора.Размер = 15.75;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
			СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// с 22 января 2024 ставка рефинансирования НБ = 15,25%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 22 января 2024 - 15,25%");
		
		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
		СтавкаНБ.Отбор.Период.Установить('20240122', Истина);
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20240122';
		СтрокаНабора.Размер = 15.25;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
			СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;

        Сообщить("-----------------------");
		Сообщить("Установка размеров регламентированных показателей с 1 января 2024 г.");
		
		ДатаСведений = '2024-01-01';
		
		НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ДатаСведений, Истина);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, ДатаСведений, 85000, 3692, 882*3692, 882*3692, 85000, 3692, 3692);
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи в регистр сведений ""Регламентированные расчетные показатели"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
        
        // Установка вычетов по доходам
		Сообщить("-----------------------");
		Сообщить("Обновление сведений о вычетах по частично облагаемым доходам");
		
		НаборЗаписей = РегистрыСведений.ВычетыПоДоходам.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Период.Установить(Дата("20240101"), Истина);
		
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20240101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 12*3692, 0);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20240101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 94*3692);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20240101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 6*3692, 0);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20240101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341Погребение, 0, 94*3692);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20240101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341РождениеРебенка, 0, 94*3692);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20240101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст341Дивиденды, 0, 30000*3692);
	
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи в регистр сведений ""Вычеты к доходам"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		//--------------------------------------------------------------------------------
		// Обработка данных для механизма исчисления и учета ОПВР
		//--------------------------------------------------------------------------------
		
		// Заполним предопределенное значение ОПВР
		СправочникОбъект = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя.ПолучитьОбъект();
		СправочникОбъект.КодБК 							= "";
		СправочникОбъект.КодНазначенияПлатежа 			= "089";
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям;
		СправочникОбъект.НазначениеПлатежа 				= "Обязательные пенсионные взносы работодателя за ";
		СправочникОбъект.Записать();
		
		// Установим ставку ОПВР – 1.5%
		Сообщить("-----------------------");
		Сообщить("Установка ставки ОПВР для всех видов дохода с 1 января 2024 года - 1.5%.");
		
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		
		НаборЗаписей = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидНалога.Установить(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя, Истина);
		НаборЗаписей.Отбор.Налогоплательщик.Установить(ПустаяОрганизация, Истина);
		НаборЗаписей.Отбор.Период.Установить('20240101', Истина);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20240101', ПустаяОрганизация, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя, 1.5);
			Попытка
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
			Исключение
				Сообщить("При записи данных регистра сведений ""Сведения о ставках налогов, сборов, отчслений"" произошли ошибки: " + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
		// Установим размер коэффициента ставки рефенансирования для расчета пени ОПВР
		Сообщить("-----------------------");
		Сообщить("Установка размера коэффициента ставки рефинансирования для ОПВР.");
		
		НаборЗаписей = РегистрыСведений.КоэффициентыСтавкиРефинансированияНБДляРасчетаПени.СоздатьНаборЗаписей();
	
		НаборЗаписей.Отбор.Организация.Использование	= Истина;
		НаборЗаписей.Отбор.Организация.ВидСравнения	 	= ВидСравнения.Равно;
		НаборЗаписей.Отбор.Организация.Значение	 		= Справочники.Организации.ПустаяСсылка();
		
		НаборЗаписей.Отбор.ВидНалога.Использование 	 = Истина;
		НаборЗаписей.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
		НаборЗаписей.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;

		Движение 				= НаборЗаписей.Добавить();
		// Свойства
		Движение.Период 		= '20240101'; // 01.01.2024
		// Измерения
		Движение.Организация	= Справочники.Организации.ПустаяСсылка();
		Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;
		// Ресурсы
		Движение.Коэффициент	= 1.25;
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Коэффициенты ставки рефинансирования НБ для расчета пени"" произошли ошибки:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		НаборЗаписей = РегистрыСведений.УчетНалогообложенияПоВидамДоходов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Дата("20240101"));

		ПроцедурыОбновленияИнформационнойБазы.ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, "20240101", ПредопределенноеЗначение("Справочник.ВидыДоходов.ДоходыОтРаботодателя"), Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина);
		
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Учет налогообложения по видам доходов"" произошли ошибки: " + Символы.ПС + 
						ОписаниеОшибки());
		КонецПопытки;
		
		// Заполнение рекизита "Облагается ОПВР" в ПВР
		
		Сообщить("-----------------------");
		Сообщить("Заполнение новых реквизитов планов видов расчета.");
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОсновныеНачисленияОрганизаций.Ссылка,
			|	ОсновныеНачисленияОрганизаций.ВидДохода
			|ИЗ
			|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
			|ГДЕ
			|	ОсновныеНачисленияОрганизаций.ОблагаетсяОПВР = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДополнительныеНачисленияОрганизаций.Ссылка,
			|	ДополнительныеНачисленияОрганизаций.ВидДохода
			|ИЗ
			|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
			|ГДЕ
			|	ДополнительныеНачисленияОрганизаций.ОблагаетсяОПВР = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)
			|";
			
		Выборка = Запрос.Выполнить().Выбрать();
		ОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом;
		НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
		Пока Выборка.Следующий() Цикл
			ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ВидРасчетаОбъект.ОбменДанными.Загрузка = Истина;
			Если Выборка.ВидДохода = Справочники.ВидыДоходов.ДоходыОтРаботодателя Тогда
				ВидРасчетаОбъект.ОблагаетсяОПВР = ОблагаетсяЦеликом;
			Иначе
				ВидРасчетаОбъект.ОблагаетсяОПВР = НеОблагаетсяЦеликом;
			КонецЕсли;
			Попытка
				ВидРасчетаОбъект.Записать();
			Исключение
				Сообщить("При записи вида расчета """ + ВидРасчетаОбъект.Наименование + """ произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЦикла;
		
		Сообщить("-----------------------");
		Сообщить("Перенумерация элементов справочника ""Статьи затрат"""); 
		ПроцедурыОбновленияИнформационнойБазы.УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("СтатьиЗатрат");
		
		Сообщить("-----------------------");
		Сообщить("Перенумерация элементов справочника ""Налоги, сборы и отчисления"""); 
		ПроцедурыОбновленияИнформационнойБазы.УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("НалогиСборыОтчисления");
		
		Сообщить("-----------------------");
		
		Сообщить("Обработка предопределенных элементов справочника ""Сохраненные настройки""");

		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("СтруктураЗадолженностиОрганизацийПоОПВР", "СтруктураЗадолженностиОрганизацийПоОПВР");
		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РегистрНалоговогоУчетаПоИПНиСН",			 "РегистрНалоговогоУчетаПоИПНиСН");
		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РасчетныеЛисткиОрганизаций",				 "РасчетныеЛисткиОрганизаций");

		Сообщить("-----------------------");
		
		//--------------------------------------------------------------------------------
		// Конец обработки данных для механизма исчисления и учета ОПВР
		//--------------------------------------------------------------------------------

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВывестиОписаниеИзменений("20221", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
				
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура выводит описания изменений в указанном релизе
//
// Параметры
//  НомерРелиза  – Строка - номер релиза, для которого выводится описание
//
Процедура ВывестиОписаниеИзменений(НомерРелиза, ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт

	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Шапка" + НомерРелиза));
	ДокументОписаниеОбновлений.НачатьГруппуСтрок("Версия" + НомерРелиза);
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Версия" + НомерРелиза));
	ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));

КонецПроцедуры // ВывестиОписаниеИзменений()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// Отражение в БУ

// Устанавливает флаг "Запретить использовать в проводках"
// хозрасчетным счетам 
//
Процедура УстановитьПараметрыСчетовБУ(ИмяПланаСчетов) Экспорт

	НачатьТранзакцию();

	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Состояние("Установка запрета использования в проводках групп счетов...");
	#КонецЕсли

	ВыборкаСчетов = ПланыСчетов[ИмяПланаСчетов].ВыбратьИерархически();
	Пока ВыборкаСчетов.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСчетов.Ссылка.Родитель) Тогда
			Продолжить;
		КонецЕсли;

		Объект = ВыборкаСчетов.Ссылка.Родитель.ПолучитьОбъект();
		Если Объект.ЗапретитьИспользоватьВПроводках Тогда
			Продолжить;
		КонецЕсли;

		Объект.ЗапретитьИспользоватьВПроводках = Истина;
		Объект.Записать();

	КонецЦикла;

	ЗафиксироватьТранзакцию();

КонецПроцедуры

// Заполняет справочник СпособыОтраженияЗарплатыВРеглУчете 
//
Процедура ЗаполнитьСпособыОтраженияЗарплатыВРеглУчете() Экспорт

	// Перенесем в группу элементы и назначим типы данных
	ЭлементОбъект = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(ЭлементОбъект.СчетДт) Тогда
		ЭлементОбъект.СчетДт = ПланыСчетов.Типовой.ПустаяСсылка();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЭлементОбъект.СчетКт) Тогда
		ЭлементОбъект.СчетКт = ПланыСчетов.Типовой.ПустаяСсылка();
	КонецЕсли;	
	ЭлементОбъект.Записать();

КонецПроцедуры

// заполняем справочник Субконто значениями из перечислений 
// Параметры:
//	ИмяПВХ - строка - имя плана видов характеристик ВидыСубконтоТиповые, для которого заполнять субконто
Процедура ЗаполнитьСправочникСубконто(ИмяПВХ) Экспорт

	СписокСубконто = Новый СписокЗначений;

	Если ИмяПВХ = "ВидыСубконтоТиповые" Тогда

		// из БП перечисления ВидыЗадолженностиПодотчетныхЛиц и ВидыИзмененийВСобственномКапитале
		
		ПВХ = ПланыВидовХарактеристик.ВидыСубконтоТиповые;

		// ВидыЗадолженностиПодотчетныхЛиц
		СписокСубконто.Добавить(ПВХ.ВидыЗадолженностиПодотчетныхЛиц, "ПриобретениеАктивов");
		СписокСубконто.Добавить(ПВХ.ВидыЗадолженностиПодотчетныхЛиц, "ОплатаПоставщикам");
		СписокСубконто.Добавить(ПВХ.ВидыЗадолженностиПодотчетныхЛиц, "Суточные");
		СписокСубконто.Добавить(ПВХ.ВидыЗадолженностиПодотчетныхЛиц, "РасходыНаПроезд");
		СписокСубконто.Добавить(ПВХ.ВидыЗадолженностиПодотчетныхЛиц, "РасходыПоНаймуЖилья");
		СписокСубконто.Добавить(ПВХ.ВидыЗадолженностиПодотчетныхЛиц, "Прочие");
		СписокСубконто.Добавить(ПВХ.ВидыЗадолженностиПодотчетныхЛиц, "СуточныеСверхНормы");
        
	КонецЕсли;

	СпрСубконто = Справочники.Субконто;

	Для Каждого ЭлементСписка Из СписокСубконто Цикл
		ИскомыйЭлемент = СпрСубконто.НайтиПоНаименованию(ЭлементСписка.Представление, Истина, , ЭлементСписка.Значение);
		Если ИскомыйЭлемент.Пустая() Тогда
			НовыйЭлемент = СпрСубконто.СоздатьЭлемент();
			
			НовыйЭлемент.Наименование = ЭлементСписка.Представление;
			НовыйЭлемент.Владелец = ЭлементСписка.Значение;
			НовыйЭлемент.УстановитьНовыйКод();
			
			НовыйЭлемент.Записать();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Классификатор рабочего времени

// Добавляет в справочник "КлассификаторИспользованияРабочегоВремени" новый элемент
//
Процедура ОписатьКодИспользованияРабочегоВремени(КодИспользованияРабочегоВремени, Знач БуквенныйКод, Знач  ЦифровойКод, Знач  Наименование = Неопределено, Знач  ПолноеНаименование, ВидВремени) Экспорт

	КодИспользованияРабочегоВремени.БуквенныйКод = СокрЛП(БуквенныйКод);
	КодИспользованияРабочегоВремени.ЦифровойКод  = СокрЛП(ЦифровойКод);
	КодИспользованияРабочегоВремени.ПолноеНаименование = СокрЛП(ПолноеНаименование);
	КодИспользованияРабочегоВремени.Наименование = СокрЛП(?(Наименование = Неопределено,ПолноеНаименование,Наименование));
	КодИспользованияРабочегоВремени.ВидВремени = ВидВремени;
	Если ВидВремени = Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы
	 ИЛИ ВидВремени = Перечисления.ВидыВремени.ОтработанноеВПределахНормы
	 ИЛИ ВидВремени = Перечисления.ВидыВремени.ОтработанноеСверхНормы Тогда
	 	КодИспользованияРабочегоВремени.РабочееВремя = Истина;
	Иначе
		КодИспользованияРабочегоВремени.РабочееВремя = Ложь;
	КонецЕсли;
	КодИспользованияРабочегоВремени.Записать();

КонецПроцедуры

// Добавляет в справочник "КлассификаторИспользованияРабочегоВремени" новый элемент
//
Процедура ДобавитьКодИспользованияРабочегоВремени(Знач БуквенныйКод, Знач  ЦифровойКод, Знач  Наименование = Неопределено, Знач  ПолноеНаименование, ВидВремени)

	ЦифровойКод    = СокрЛП(ЦифровойКод);
	СсылкаНаЭлемент = Справочники.КлассификаторИспользованияРабочегоВремени.НайтиПоРеквизиту("ЦифровойКод", ЦифровойКод);

	Если  СсылкаНаЭлемент.Пустая() Тогда
		Элемент              = Справочники.КлассификаторИспользованияРабочегоВремени.СоздатьЭлемент();
	 	Элемент.ЦифровойКод  = СокрЛП(ЦифровойКод);
	Иначе
		Элемент = СсылкаНаЭлемент.ПолучитьОбъект();
	КонецЕсли;

	Элемент.БуквенныйКод = СокрЛП(БуквенныйКод);
	Элемент.ПолноеНаименование = СокрЛП(ПолноеНаименование);
	Элемент.Наименование = СокрЛП(?(Наименование = Неопределено,ПолноеНаименование,Наименование));
	Элемент.ВидВремени = ВидВремени;
	Если ВидВремени = Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы
	 ИЛИ ВидВремени = Перечисления.ВидыВремени.ОтработанноеВПределахНормы
	 ИЛИ ВидВремени = Перечисления.ВидыВремени.ОтработанноеСверхНормы Тогда
	 	Элемент.РабочееВремя = Истина;
	Иначе
		Элемент.РабочееВремя = Ложь;
	КонецЕсли;
	Элемент.Записать();

КонецПроцедуры

// Выполняет заполнение справочника "КлассификаторИспользованияРабочегоВремени" 
//
Процедура ЗаполнитьКлассификаторИспользованияРабочегоВремени() Экспорт 

	// Установка реквизитов предопределенных элементов
	ВремяОтработанноеВПределахНормы = Перечисления.ВидыВремени.ОтработанноеВПределахНормы;
	ВремяДополнительноОплачиваемоеВПределахНормы = Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы;
	ВремяОтработанноеСверхНормы = Перечисления.ВидыВремени.ОтработанноеСверхНормы;
	ВремяЦелодневноеНеотработанное = Перечисления.ВидыВремени.ЦелодневноеНеотработанное;
	ВремяЧасовоеНеотработанное = Перечисления.ВидыВремени.ЧасовоеНеотработанное;
	
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни.ПолучитьОбъект(),									"В","26", ,"Выходные дни и  нерабочие праздничные дни",Перечисления.ВидыВремени.ПустаяСсылка());
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Работа.ПолучитьОбъект(),										"Я", "01", "Явка", "Продолжительность работы в дневное время",ВремяОтработанноеВПределахНормы);
	
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Командировка.ПолучитьОбъект(),									"К", "06", "Командировка", "Служебная командировка",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.КомандировкаПочасовая.ПолучитьОбъект(),						"К", "06", "Командировка", "Служебная командировка",ВремяЧасовоеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификации.ПолучитьОбъект(),						"ПК","07", "Повышение квалификации", "Повышение квалификации с отрывом от работы",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификацииПочасовое.ПолучитьОбъект(),				"ПК","07", "Повышение квалификации", "Повышение квалификации с отрывом от работы",ВремяЧасовоеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификацииВДругойМестности.ПолучитьОбъект(),		"ПМ","08", "Повышение квалификации в другой местности", "Повышение квалификации с отрывом от работы в другой местности",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск.ПолучитьОбъект(),								"ОТ","09", "Отпуск", "Ежегодный основной оплачиваемый отпуск",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск.ПолучитьОбъект(),							"ОД","10", "Дополнительный отпуск", "Ежегодный дополнительный оплачиваемый отпуск",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение.ПолучитьОбъект(),								"У", "11", "Отпуск дополнительный (оплачиваемый учебный)", "Дополнительный отпуск в связи с обучением с сохранением средного заработка работникам, совмещающим работу с обучением",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый.ПолучитьОбъект(),				"УД","13", "Отпуск дополнительный (неоплачиваемый учебный)", "Дополнительный отпуск в связи с обучением без сохранения заработной платы",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам.ПолучитьОбъект(),					"Р", "14", "Отпуск по беременности и родам", "Отпуск по беременности и родам (отпуск в связи с усыновлением новорожденного ребенка)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком.ПолучитьОбъект(),						"ОЖ","15", , "Отпуск по уходу за ребенком до достижения им возраста трех лет",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпуск.ПолучитьОбъект(),							"ДО","16", , "Отпуск без сохранения заработной платы",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйДополнительныйОтпуск.ПолучитьОбъект(),			"ДБ","18", , "Ежегодный дополнительный отпуск без сохранения заработной платы",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь.ПолучитьОбъект(),										"Б ","19", "Больничный", "Временная нетрудоспособность с назначением пособия согласно законодательству",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.БолезньБезОплаты.ПолучитьОбъект(),								"Т", "20", "Больничный неоплачиваемый", "Временная нетрудоспособность без назначения пособия в случаях, предусмотренных законодательством",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ВынужденныйПрогул.ПолучитьОбъект(),							"ПВ","22", , "Время вынужденного прогула в случае признания увольнения, перевода на другую работу или отстранения от работы незаконными с восстановлением на прежней работе",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ГосударственныеОбязанности.ПолучитьОбъект(),					"Г", "23", , "Невыходы на время исполнения государственных или общественных обязанностей согласно законодательству",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ГосударственныеОбязанностиПочасовые.ПолучитьОбъект(),			"Г", "23", , "Невыходы на время исполнения государственных или общественных обязанностей согласно законодательству",ВремяЧасовоеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Прогулы.ПолучитьОбъект(),										"ПР","24", "Прогул", "Прогулы (отсутствие на рабочем месте без уважительных причин в течение времени, установленного законодательством)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ПрогулыПочасовые.ПолучитьОбъект(),								"ПР","24", "Прогул", "Прогулы (отсутствие на рабочем месте без уважительных причин в течение времени, установленного законодательством)",ВремяЧасовоеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныеВыходныеДниОплачиваемые.ПолучитьОбъект(),		"ОВ","27", , "Дополнительные выходные дни (оплачиваемые)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныеВыходныеДниНеОплачиваемые.ПолучитьОбъект(),		"НВ","28", , "Дополнительные выходные дни (без сохранения заработной платы)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Забастовка.ПолучитьОбъект(),									"ЗБ","29", "Забастовка", "Забастовка (при условиях и в порядке, предусмотренных законом)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ЗабастовкаПочасовая.ПолучитьОбъект(),							"ЗБ","29", "Забастовка", "Забастовка (при условиях и в порядке, предусмотренных законом)",ВремяЧасовоеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам.ПолучитьОбъект(),					"НН","30", , "Неявки по невыясненным причинам (до выяснения обстоятельств)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинамПочасовые.ПолучитьОбъект(),		"НН","30", , "Неявки по невыясненным причинам (до выяснения обстоятельств)",ВремяЧасовоеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботодателя.ПолучитьОбъект(),					"РП","31", , "Время простоя по вине работодателя",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботодателяПочасовой.ПолучитьОбъект(),			"РП","31", , "Время простоя по вине работодателя",ВремяЧасовоеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Простой.ПолучитьОбъект(),										"ВП","32", , "Время простоя по причинам, не зависящим от работодателя и работника",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ПростойПочасовой.ПолучитьОбъект(),								"НП","32", , "Время простоя по причинам, не зависящим от работодателя и работника",ВремяЧасовоеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботника.ПолучитьОбъект(),						"ВП","33", "Простой", "Простои по вине работника",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботникаПочасовой.ПолучитьОбъект(),				"ВП","33", "Простой", "Простои по вине работника",ВремяЧасовоеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыСОплатой.ПолучитьОбъект(),					"НО","34", , "Отстранение от работы (недопущение к работе) с оплатой (пособием) в соответствии с законодательством",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыСОплатойПочасовое.ПолучитьОбъект(),			"НО","34", , "Отстранение от работы (недопущение к работе) с оплатой (пособием) в соответствии с законодательством",ВремяЧасовоеНеотработанное);	
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыБезОплаты.ПолучитьОбъект(),					"НБ","35", , "Отстранение от работы (недопущение к работе) по причинам, предусмотренным законодательством, без начисления заработной платы",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыБезОплатыПочасовое.ПолучитьОбъект(),		"НБ","35", , "Отстранение от работы (недопущение к работе) по причинам, предусмотренным законодательством, без начисления заработной платы",ВремяЧасовоеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ЗадержкаВыплатыЗаработнойПлаты.ПолучитьОбъект(),				"НЗ","36", ,"Время приостановки работы в случае задержки выплаты заработной платы",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы.ПолучитьОбъект(),								"Н", "02", "Ночные часы","Продолжительность работы в ночное время",ВремяДополнительноОплачиваемоеВПределахНормы);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Праздники.ПолучитьОбъект(),									"П", "03", "Праздники","Продолжительность работы в праздничные дни",ВремяОтработанноеСверхНормы);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.Сверхурочные.ПолучитьОбъект(),									"С", "04", "Сверхурочно","Продолжительность сверхурочной работы",ВремяОтработанноеСверхНормы);
	ОписатьКодИспользованияРабочегоВремени(Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеРабочиеДни.ПолучитьОбъект(),							"РВ","17", "Выходные рабочие дни","Продолжительность работы в выходные и нерабочие дни",ВремяОтработанноеСверхНормы);
		
	// Создание остальных элементов классификатора
	ДобавитьКодИспользованияРабочегоВремени("ВМ","05", "Вахта", "Продолжительность работы вахтовым методом",ВремяОтработанноеВПределахНормы);
	ДобавитьКодИспользованияРабочегоВремени("УВ","12", ,"Сокращенная продолжительность рабочего для обучающихся без отрыва от производства с частичным сохранением заработной платы",ВремяОтработанноеВПределахНормы);
	ДобавитьКодИспользованияРабочегоВремени("ЛЧ","21", ,"Сокращенная продолжительность рабочего времени против нормальной продолжительности рабочего дня в случаях, предусмотренных законодательством",ВремяОтработанноеВПределахНормы);
	ДобавитьКодИспользованияРабочегоВремени("НС","25", ,"Продолжительность работы в режиме неполного рабочего времени по инициативе работодателя в случаях, предусмотренных законодательством",ВремяОтработанноеВПределахНормы);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Планы видов расчета и Схемы мотивации

// Создает новый вид расчета
//
// Параметры
//  ПВР  – менеджер плана видов расчетов
//  Код  – код создаваемого вида расчета
//  Наименование  – наименование создаваемого вида расчета
//  БазовыеВидыРасчетов - список базовых видов расчетов
//
// Возвращаемое значение:
//   ссылка на созданный вид расчета
//
Функция СоздатьВидРасчета(ПВР, Код, Наименование, БазовыеВидыРасчетов = Неопределено)

	ВР = ПВР.НайтиПоКоду(Код);
	Если ВР.Пустая() Тогда
		ВР = ПВР.СоздатьВидРасчета();
	Иначе
		ВР = ВР.ПолучитьОбъект();
		ВР.БазовыеВидыРасчета.Очистить();
	КонецЕсли;

	ВР.Код          = Код;
	ВР.Наименование = Наименование;

	Если БазовыеВидыРасчетов<>Неопределено Тогда
		Для каждого Элемент Из БазовыеВидыРасчетов Цикл
			НоваяСтрока            = ВР.БазовыеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;

	ВР.Записать();

	Возврат ВР.Ссылка;

КонецФункции

// Устанавливает реквизиты элемента плана видов расчета "ОсновныеНачисленияОрганизаций" 
//
Процедура УстановитьРеквизитыОсновногоНачисленияОрганизации(ВидРасчета, 
															СпособРасчета, 
															КатегорияРасчета, 
															ОбозначениеВТабелеУчетаРабочегоВремени, 
															ЗачетОтработанногоВремени, 
															ЗачетНормыВремени, 
															ЗачетОтработанногоВремениДляВычета, 
															УчетОтработанногоВремени, 
															ОблагаетсяИПН = Неопределено, 
															ОблагаетсяОПВ = Неопределено, 
															ОблагаетсяСН = Неопределено, 
															ОблагаетсяСО = Неопределено, 
															ОблагаетсяОППВ = Неопределено, 
															ОблагаетсяВОСМС = Неопределено, 
															ОблагаетсяООСМС = Неопределено,
															ОблагаетсяОПВР = Неопределено,
															СпособОтраженияВБухучете = Неопределено, 
															ПериодРасчетаСреднегоЗаработка = 0, 
															ПериодДействияБазовый = Ложь, 
															ОтОбратного = Ложь,
															ВидДохода) Экспорт

	Если ТипЗнч(ОбозначениеВТабелеУчетаРабочегоВремени) = Тип("Строка") Тогда
		КодУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.НайтиПоРеквизиту("БуквенныйКод", СокрЛП(ОбозначениеВТабелеУчетаРабочегоВремени));
	Иначе
		КодУчетаРабочегоВремени = ОбозначениеВТабелеУчетаРабочегоВремени
	КонецЕсли;

	ОбъектВР = ВидРасчета.ПолучитьОбъект();

	ОбъектВР.СпособРасчета                          = СпособРасчета;
	ОбъектВР.КатегорияРасчета                       = КатегорияРасчета;
	ОбъектВР.ОтОбратного							= ОтОбратного;
	ОбъектВР.ОбозначениеВТабелеУчетаРабочегоВремени = КодУчетаРабочегоВремени;
	ОбъектВР.ЗачетОтработанногоВремени              = ЗачетОтработанногоВремени;
	ОбъектВР.ЗачетНормыВремени                      = ЗачетНормыВремени;
	ОбъектВР.ЗачетОтработанногоВремениДляВычета		= ЗачетОтработанногоВремениДляВычета;
	ОбъектВР.УчетОтработанногоВремени				= УчетОтработанногоВремени;
	ОбъектВР.ОблагаетсяИПН                          = ОблагаетсяИПН;
	ОбъектВР.ОблагаетсяОПВ                          = ОблагаетсяОПВ;
	ОбъектВР.ОблагаетсяСН                           = ОблагаетсяСН;
	ОбъектВР.ОблагаетсяСО                           = ОблагаетсяСО;
	ОбъектВР.ОблагаетсяОППВ                         = ОблагаетсяОППВ;
	ОбъектВР.ОблагаетсяВОСМС                        = ОблагаетсяВОСМС;
	ОбъектВР.ОблагаетсяООСМС                        = ОблагаетсяООСМС;
	ОбъектВР.ОблагаетсяОПВР                         = ОблагаетсяОПВР;
	ОбъектВР.СпособОтраженияВБухучете               = СпособОтраженияВБухучете;
	ОбъектВР.ПериодРасчетаСреднегоЗаработка         = ПериодРасчетаСреднегоЗаработка;
	ОбъектВР.ВидДохода				  				= ВидДохода;


	Если НЕ ОбъектВР.Предопределенный Тогда
		ОбъектВР.ПериодДействияБазовый = ПериодДействияБазовый;
	КонецЕсли;

	ОбъектВР.Записать();

КонецПроцедуры // УстановитьРеквизитыОсновногоНачисленияОрганизации()

// Устанавливает реквизиты элемента плана видов расчета "УправленческиеНачисления" 
//
Процедура УстановитьРеквизитыУправленческогоНачисления(	ВидРасчета, 
														СпособРасчета, 
														КатегорияРасчета, 
														ЗачетОтработанногоВремени = Ложь, 
														ВытесняющиеРасчеты = Неопределено, 
														ПериодДействияБазовый = Ложь,														
														Показатель1 = Неопределено,
														Показатель2 = Неопределено,
														Показатель3 = Неопределено,
														ФормулаРасчета = "",
														ЗапрашиватьПриКадровыхПеремещениях1 = Ложь,
														ЗапрашиватьПриКадровыхПеремещениях2 = Ложь,
														ЗапрашиватьПриКадровыхПеремещениях3 = Ложь)

	ОбъектВР = ВидРасчета.ПолучитьОбъект();
	ОбъектВР.ПроизвольнаяФормулаРасчета	= Истина;
	ОбъектВР.ФормулаРасчета				= ФормулаРасчета;
	ОбъектВР.ФормулаРасчетаПредставление= ФормулаРасчета;

	ОбъектВР.СпособРасчета             = СпособРасчета;
	ОбъектВР.КатегорияРасчета      	   = КатегорияРасчета;
	ОбъектВР.ЗачетОтработанногоВремени = ЗачетОтработанногоВремени;

	Если НЕ ОбъектВР.Предопределенный Тогда
		ОбъектВР.ПериодДействияБазовый = ПериодДействияБазовый;
	КонецЕсли;

	// обходим с последней строки табличной части и удаляем не предопределенные строки
	Индекс = ОбъектВР.ВытесняющиеВидыРасчета.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		Если ОбъектВР.ВытесняющиеВидыРасчета[Индекс].Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		ОбъектВР.ВытесняющиеВидыРасчета.Удалить(Индекс);
	КонецЦикла;
	Если ВытесняющиеРасчеты <> Неопределено Тогда
		Для каждого Элемент Из ВытесняющиеРасчеты Цикл
			НоваяСтрока            = ОбъектВР.ВытесняющиеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Показатель1) Тогда
		Показатели = ОбъектВР.Показатели.Добавить();
		Показатели.Показатель = Показатель1;
		Показатели.ЗапрашиватьПриКадровыхПеремещениях = ЗапрашиватьПриКадровыхПеремещениях1;
		Если ЗначениеЗаполнено(Показатель2) Тогда
			Показатели = ОбъектВР.Показатели.Добавить();
			Показатели.Показатель = Показатель2;
			Показатели.ЗапрашиватьПриКадровыхПеремещениях = ЗапрашиватьПриКадровыхПеремещениях2;
			Если ЗначениеЗаполнено(Показатель3) Тогда
				Показатели = ОбъектВР.Показатели.Добавить();
				Показатели.Показатель = Показатель3;
				Показатели.ЗапрашиватьПриКадровыхПеремещениях = ЗапрашиватьПриКадровыхПеремещениях3;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбъектВР.Записать();

КонецПроцедуры // УстановитьРеквизитыУправленческогоНачисления()

// Устанавливает реквизиты элемента плана видов расчета "ДополнительныеНачисленияОрганизаций" 
//
Процедура УстановитьРеквизитыДополнительногоНачисленияОрганизации(ВидРасчета, СпособРасчета, КатегорияРасчета, ВидПремии, ЧислоМесяцев, ОблагаетсяИПН, ОблагаетсяОПВ, ОблагаетсяСН, ОблагаетсяСО, ОблагаетсяОППВ, ОблагаетсяВОСМС, ОблагаетсяООСМС, ОблагаетсяОПВР, СпособОтраженияВБухучете, ВидДохода)

	ОбъектВР = ВидРасчета.ПолучитьОбъект();

	ОбъектВР.СпособРасчета            = СпособРасчета;
	ОбъектВР.КатегорияРасчета      	  = КатегорияРасчета;
	ОбъектВР.ВидПремии                = ВидПремии;
	ОбъектВР.ЧислоМесяцев             = ЧислоМесяцев;
	ОбъектВР.ОблагаетсяИПН            = ОблагаетсяИПН;
	ОбъектВР.ОблагаетсяОПВ            = ОблагаетсяОПВ;
	ОбъектВР.ОблагаетсяСН         	  = ОблагаетсяСН;
	ОбъектВР.ОблагаетсяСО   		  = ОблагаетсяСО;
	ОбъектВР.ОблагаетсяОППВ   		  = ОблагаетсяОППВ;
	ОбъектВР.ОблагаетсяВОСМС          = ОблагаетсяВОСМС;
	ОбъектВР.ОблагаетсяООСМС          = ОблагаетсяООСМС;
	ОбъектВР.ОблагаетсяОПВР 		  = ОблагаетсяОПВР;
	ОбъектВР.СпособОтраженияВБухучете = СпособОтраженияВБухучете;
	ОбъектВР.ВидДохода				  = ВидДохода;

	ОбъектВР.Записать();

КонецПроцедуры // УстановитьРеквизитыДополнительногоНачисленияОрганизации()

// Выполняет заполнение реквизитов планов видов расчета регламентированного учета
//
Процедура ЗаполнитьПланыВидовРасчетаОрганизации() 
	
	СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	Категории  = Перечисления.КатегорииРасчетов;
	СпособыНалогообложения = Справочники.СпособыНалогообложенияДоходов;
	Облагается			   = СпособыНалогообложения.ОблагаетсяЦеликом;
	НеОблагается		   = СпособыНалогообложения.НеОблагаетсяЦеликом;
	
	НеОтражатьВБухУчете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете;  
	
	// Основные начисления организации 
	
	ПВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций;
	УчетВремени = Справочники.КлассификаторИспользованияРабочегоВремени;
    ВидДохода = Справочники.ВидыДоходов.ДоходыОтРаботодателя;
	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОкладПоДням, 					СпРасчета.ПоМесячнойТарифнойСтавкеПоДням, 	Категории.Первичное, 	УчетВремени.Работа, 								Истина, Истина, Истина, Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,,,,,ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОкладПоЧасам, 				СпРасчета.ПоМесячнойТарифнойСтавкеПоЧасам,	Категории.Первичное, 	УчетВремени.Работа, 								Истина, Истина, Истина, Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,,,,,ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОкладОтОбратного, 			СпРасчета.ФиксированнойСуммой,				Категории.Первичное, 	УчетВремени.Работа, 								Истина, Истина, Истина, Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,,,, 	Истина, ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОкладОтОбратногоПоДням, 		СпРасчета.ПоМесячнойТарифнойСтавкеПоДням,	Категории.Первичное, 	УчетВремени.Работа, 								Истина, Истина, Истина, Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,,,,	Истина, ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОкладОтОбратногоПоЧасам, 		СпРасчета.ПоМесячнойТарифнойСтавкеПоЧасам,	Категории.Первичное, 	УчетВремени.Работа, 								Истина, Истина, Истина, Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,,,,	Истина, ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ТарифЧасовой, 				СпРасчета.ПоЧасовойТарифнойСтавке, 			Категории.Первичное, 	УчетВремени.Работа, 								Истина, Истина, Истина, Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,,,,,ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ТарифЧасовойОтОбратного,		СпРасчета.ПоЧасовойТарифнойСтавке, 			Категории.Первичное, 	УчетВремени.Работа, 								Истина, Истина, Истина, Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,,,,	Истина, ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ТарифДневной, 				СпРасчета.ПоДневнойТарифнойСтавке, 			Категории.Первичное, 	УчетВремени.Работа, 								Истина, Истина, Истина, Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,,,,,ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.СдельнаяОплата, 				СпРасчета.СдельныйЗаработок, 				Категории.Первичное, 	УчетВремени.Работа, 								Истина, Истина, Истина, Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,,,,,ВидДохода);
	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаПоСреднему,   			СпРасчета.ПоСреднемуЗаработку, 				Категории.Первичное, 		"  ", 											Ложь,   Истина, Ложь,   Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,, 12,,, ВидДохода);
	
	// отпуск
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаПоСреднемуОтп,			СпРасчета.ПоСреднемуЗаработкуДляОтпуска, 	Категории.ЗависимоеТретьегоУровня, 	УчетВремени.ОсновнойОтпуск, 			Ложь,   Истина, Истина,   Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,, 12,,,ВидДохода);

	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПростойОкладПоДням,			СпРасчета.ПоМесячнойТарифнойСтавкеПоДням, 	Категории.Первичное, 	УчетВремени.Простой, 								Ложь,   Истина, Истина,   Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,,,,,ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПростойОкладПоЧасам,			СпРасчета.ПоМесячнойТарифнойСтавкеПоЧасам, 	Категории.Первичное, 	УчетВремени.Простой, 								Ложь,   Истина, Истина,   Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,,,,,ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПочасовойПростойОкладПоЧасам,	СпРасчета.ПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения, 	Категории.Первичное, 	УчетВремени.ПростойПочасовой, 	Ложь,   Истина, Истина,   Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,,,,,ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПростойТарифДневной,			СпРасчета.ПоДневнойТарифнойСтавке, 			Категории.Первичное, 	УчетВремени.Простой, 								Ложь,   Истина, Истина,   Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,,,,,ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПростойТарифЧасовой,			СпРасчета.ПоЧасовойТарифнойСтавке, 			Категории.Первичное, 	УчетВремени.Простой, 								Ложь,   Истина, Истина,   Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,,,,,ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПочасовойПростойТарифЧасовой,	СпРасчета.ПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения, 			Категории.Первичное, 	УчетВремени.ПростойПочасовой, 	Ложь,   Истина, Истина,   Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,,,,,ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПростойПоВинеРаботодателя,	СпРасчета.ПоСреднемуЗаработку, 				Категории.Первичное,	УчетВремени.ПростойПоВинеРаботодателя, 				Ложь,   Истина, Истина,   Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,, 12,,, ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПочасовойПростойПоВинеРаботодателя,	СпРасчета.ПоСреднемуЗаработкуДляПочасовогоОтклонения, Категории.Первичное,	УчетВремени.ПростойПоВинеРаботодателяПочасовой, Ложь,   Истина, Истина,   Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается, Облагается,, 12,,, ВидДохода);

	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаПраздничныхИВыходных,	СпРасчета.ПроцентомПоЧасовойТарифнойСтавке, Категории.Первичное, 	УчетВремени.ВыходныеРабочиеДни,						Истина, Ложь,   Ложь,   Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,,,,,ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ДоплатаЗаПраздничныеИВыходные,СпРасчета.ПроцентомПоЧасовойТарифнойСтавке, Категории.Первичное,	УчетВремени.ВыходныеРабочиеДни,						Ложь,   Ложь,   Ложь,   Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,,,,,ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаСверхурочных,			СпРасчета.ПроцентомПоЧасовойТарифнойСтавке, Категории.Первичное,	УчетВремени.Сверхурочные,							Истина, Ложь,   Ложь,   Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,,,,,ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ДоплатаЗаСверхурочныеЧасы,	СпРасчета.ПроцентомПоЧасовойТарифнойСтавке, Категории.Первичное,	УчетВремени.Сверхурочные,							Ложь, 	Ложь,   Ложь,   Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,,,,,ВидДохода);
	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ДоплатаЗаНочныеЧасы, 			СпРасчета.ДоплатаЗаНочныеЧасы, 				Категории.Первичное, 		"Н ", 											Ложь,   Ложь,   Ложь,   Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,,,,,ВидДохода);

	// начисления по больничному листу	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаПоСреднемуБЛ, 			  СпРасчета.ПоСреднемуЗаработкуДляБольничных, Категории.Первичное, 	УчетВремени.Болезнь, 								Ложь,   Истина, Ложь,   Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,, 12,,, ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаБЛПоТравмеНаПроизводстве, СпРасчета.ПоСреднемуЗаработкуДляБольничных, Категории.Первичное, 	УчетВремени.Болезнь, 								Ложь,   Истина, Ложь,   Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается,, 12,,, ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтпускПоБеременностиИРодам, 	  СпРасчета.ПоСреднемуЗаработкуДляБольничных, Категории.ЗависимоеТретьегоУровня, 	УчетВремени.ОтпускПоБеременностиИРодам, 	Ложь,   Истина, Ложь,   Истина, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, Облагается,, 12,,, ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаБЛПоТравмеВБыту,		  СпРасчета.НулеваяСумма, 					  Категории.Первичное,	УчетВремени.БолезньБезОплаты,						Ложь,   Истина, Ложь,   Истина, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, Облагается,,,,,ВидДохода);
	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтпускПоУходуЗаРебенкомДо3ЛетБезОплаты, СпРасчета.НулеваяСумма, 			  Категории.Первичное,	УчетВремени.ОтпускПоУходуЗаРебенком, 				Ложь,   Истина, Ложь,   Истина, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается,НеОблагается, НеОблагается, Облагается,,,,,ВидДохода);
	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.Невыход,							СпРасчета.НулеваяСумма, 				Категории.Первичное, 	УчетВремени.НеявкиПоНевыясненнымПричинам, 			Ложь,   Истина, Ложь,   Истина, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, Облагается,,,,,ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтпускБезОплаты,					СпРасчета.НулеваяСумма, 				Категории.Первичное, 	УчетВремени.НеоплачиваемыйОтпуск,				 	Ложь,   Истина, Ложь,   Истина, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, Облагается,,,,,ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОтпускБезОплатыУчебный,			СпРасчета.НулеваяСумма, 				Категории.Первичное, 	УчетВремени.ОтпускНаОбучениеНеоплачиваемый, 		Ложь,   Истина, Ложь,   Истина, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, Облагается,,,,,ВидДохода);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.Прогул,							СпРасчета.НулеваяСумма, 				Категории.Первичное, 	УчетВремени.Прогулы, 								Ложь,   Истина, Ложь,   Истина, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, Облагается,,,,,ВидДохода);

	// Непредопределенные виды расчетов

	// доплата до среднего заработка
	ВидРасчетаДоплатаДоСреднегоЗаработка = СоздатьВидРасчета(ПВР, "00032", "Доплата до среднего заработка");
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ВидРасчетаДоплатаДоСреднегоЗаработка, СпРасчета.ДоплатаДоСреднегоЗаработка,  Категории.ЗависимоеТретьегоУровня, 	 "" , 									Ложь, 	Ложь,   Ложь,	Ложь,	Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается,, 12, Истина, ,ВидДохода);
	
	// Дополнительные начисления организации
	
	ПВР = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций;
	ВидыПремии = Перечисления.ВидыПремии;
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.Годовая, 									СпРасчета.Процентом, 					Категории.ЗависимоеПервогоУровня, ВидыПремии.ГодоваяПремия, 	12, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается, Облагается,Облагается,,ВидДохода);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.Квартальная, 								СпРасчета.Процентом, 					Категории.ЗависимоеПервогоУровня, ВидыПремии.Премия, 		 3, Облагается, Облагается, Облагается, Облагается, Облагается,Облагается, Облагается,Облагается,,ВидДохода);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.Месячная, 									СпРасчета.Процентом, 					Категории.ЗависимоеПервогоУровня, ВидыПремии.Премия, 	   	 1, Облагается, Облагается, Облагается,	Облагается, Облагается,Облагается, Облагается,Облагается,,ВидДохода);
	
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ВыходноеПособие,							СпРасчета.ПоСреднемуЗаработку, 			Категории.Первичное 			, ВидыПремии.НеПремия,		12, Облагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, Облагается,,ВидДохода);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ВыходноеПособие2018,						СпРасчета.ПоСреднемуЗаработку, 			Категории.Первичное 			, ВидыПремии.НеПремия,		12, Облагается, НеОблагается, Облагается,   НеОблагается, НеОблагается, НеОблагается, НеОблагается, Облагается,,ВидДохода);
	
	// компенсация отпуска при увольнении
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.КомпенсацияОтпуска,							СпРасчета.ПоСреднемуЗаработкуДляОтпуска, Категории.Первичное			, ВидыПремии.НеПремия,		12, Облагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается,Облагается, Облагается,Облагается,,ВидДохода);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.КомпенсацияОтпуска2018,						СпРасчета.ПоСреднемуЗаработкуДляОтпуска, Категории.Первичное			, ВидыПремии.НеПремия,		12, Облагается, НеОблагается, Облагается,  НеОблагается, НеОблагается,Облагается, Облагается, Облагается,,ВидДохода);
	// компенсация отпуска (без увольнения)
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.КомпенсацияОтпускаБезУвольнения,			СпРасчета.ПоСреднемуЗаработкуДляОтпуска, Категории.Первичное			, ВидыПремии.НеПремия,	 	12, Облагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается,Облагается, Облагается, Облагается,,ВидДохода);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.КомпенсацияОтпускаБезУвольнения2018,		СпРасчета.ПоСреднемуЗаработкуДляОтпуска, Категории.Первичное			, ВидыПремии.НеПремия,	 	12, Облагается, НеОблагается, Облагается,   НеОблагается, НеОблагается,Облагается, Облагается, Облагается,,ВидДохода);
	
	// договора ГПХ
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ДоговорПодряда, 							СпРасчета.ПоДоговоруФиксированнойСуммой, 			Категории.Первичное				, ВидыПремии.НеПремия,		 0, Облагается,	НеОблагается, НеОблагается, НеОблагается, НеОблагается, Облагается, НеОблагается, НеОблагается,,Справочники.ВидыДоходов.ДоходыОтНалоговогоАгента);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.АвторскийДоговор, 							СпРасчета.ПоДоговоруФиксированнойСуммой, 			Категории.Первичное				, ВидыПремии.НеПремия,		 0, Облагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, Облагается, НеОблагается, НеОблагается,,Справочники.ВидыДоходов.ДоходыОтНалоговогоАгента);
	УстановитьРеквизитыДополнительногоНачисленияОрганизации(ПВР.ЛицензионныйДоговор, 						СпРасчета.ПоДоговоруФиксированнойСуммой, 			Категории.Первичное				, ВидыПремии.НеПремия,		 0, Облагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, Облагается, НеОблагается, НеОблагается,,Справочники.ВидыДоходов.ДоходыОтНалоговогоАгента);

	// Удержания организаций 
	
	ПВР = ПланыВидовРасчета.УдержанияОрганизаций;
	СпособУчетаИЛ = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка();	
	
	УстановитьРеквизитыУдержанияОрганизации(ПВР.ИЛПроцентом					  , СпРасчета.ИсполнительныйЛистПроцентом			, Категории.Первичное, СпособУчетаИЛ);
	УстановитьРеквизитыУдержанияОрганизации(ПВР.ИЛПроцентомДоПредела		  , СпРасчета.ИсполнительныйЛистПроцентомДоПредела	, Категории.Первичное, СпособУчетаИЛ);
	УстановитьРеквизитыУдержанияОрганизации(ПВР.ИЛФиксированнойСуммой		  , СпРасчета.УдержаниеФиксированнойСуммой			, Категории.Первичное, СпособУчетаИЛ);
	УстановитьРеквизитыУдержанияОрганизации(ПВР.ИЛФиксированнойСуммойДоПредела, СпРасчета.ИсполнительныйЛистФиксСуммойДоПредела	, Категории.Первичное, СпособУчетаИЛ);
	УстановитьРеквизитыУдержанияОрганизации(ПВР.ИЛКоэффициентомПоМРП		  , СпРасчета.ПоМесячномуРасчетномуПоказателю		, Категории.Первичное, СпособУчетаИЛ);
	УстановитьРеквизитыУдержанияОрганизации(ПВР.ИЛКоэффициентомПоМРПДоПредела , СпРасчета.ПоМесячномуРасчетномуПоказателю		, Категории.Первичное, СпособУчетаИЛ);
	УстановитьРеквизитыУдержанияОрганизации(ПВР.ПочтовыйСборПоИЛ, 				СпРасчета.ПочтовыйСбор							, Категории.ЗависимоеПервогоУровня, СпособУчетаИЛ);
	
	УстановитьРеквизитыУдержанияОрганизации(ПВР.УдержаниеЗаНеотработанныйОтпуск, СпРасчета.ПоСреднемуЗаработкуДляОтпуска		, Категории.Первичное,	Неопределено, Неопределено, 12);
	
	// ----------------------------------------------------------------------------------------------------
	// Установка базовых видов расчетов
	
	ПВРОсн  = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций;
	ПВРДоп  = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций;
	ПВРУд   = ПланыВидовРасчета.УдержанияОрганизаций;
	ПВРСред = ПланыВидовРасчета.СреднийЗаработок;
	
	СпНачисленийЗаОтработанноеВремя = Новый СписокЗначений;
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ОкладПоДням);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ОкладПоЧасам);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ОкладОтОбратного);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ОкладОтОбратногоПоДням);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ОкладОтОбратногоПоЧасам);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ТарифДневной);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ТарифЧасовой);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ТарифЧасовойОтОбратного);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ДоплатаЗаПраздничныеИВыходные);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ОплатаПраздничныхИВыходных);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ОплатаСверхурочных);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ДоплатаЗаСверхурочныеЧасы);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.СдельнаяОплата);
	
	// База основных начислений организации
	
	// доплата до среднего заработка имеет базу
	УстановитьБазовыеИВедущиеРасчеты(ВидРасчетаДоплатаДоСреднегоЗаработка, СпНачисленийЗаОтработанноеВремя, СпНачисленийЗаОтработанноеВремя);
	
	// База дополнительных начислений организации
	
	// все виды премий
	СпБазовыхРасчетов = СпНачисленийЗаОтработанноеВремя.Скопировать();
	УстановитьБазовыеИВедущиеРасчеты(ПВРДоп.Годовая, СпБазовыхРасчетов, СпБазовыхРасчетов);
	УстановитьБазовыеИВедущиеРасчеты(ПВРДоп.Квартальная, СпБазовыхРасчетов, СпБазовыхРасчетов);
	УстановитьБазовыеИВедущиеРасчеты(ПВРДоп.Месячная, СпБазовыхРасчетов, СпБазовыхРасчетов);
	
	// Базы видов расчета плана "средний заработок" (ведущие расчеты не устанавливаем)
	
	// месячные и квартальные премии
	СпБазовыхРасчетов = Новый СписокЗначений;
	СпБазовыхРасчетов.Добавить(ПВРДоп.Месячная);
	СпБазовыхРасчетов.Добавить(ПВРДоп.Квартальная);
	СпБазовыхРасчетов.Добавить(ПВРДоп.Годовая);
	СпВедущихРасчетов = СпНачисленийЗаОтработанноеВремя.Скопировать(); // т.е. изменение оклада должно вызвать перерасчет не только премии, но и среднего заработка	
	СпВедущихРасчетов.Добавить(ПВРДоп.Месячная);
	СпВедущихРасчетов.Добавить(ПВРДоп.Квартальная);
	СпВедущихРасчетов.Добавить(ПВРДоп.Годовая);
	УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоПремиям, СпБазовыхРасчетов, СпВедущихРасчетов);
	
	// основной заработок
	СпБазовыхРасчетов = СпНачисленийЗаОтработанноеВремя.Скопировать();
	УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоЗаработкуБЛ, СпБазовыхРасчетов, СпБазовыхРасчетов);
	УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоЗаработкуОтпуск, СпБазовыхРасчетов, СпБазовыхРасчетов);
	УстановитьБазовыеИВедущиеРасчеты(ПВРСред.ПоЗаработку, СпБазовыхРасчетов, СпБазовыхРасчетов);
	
	// База удержаний организации
	
	// исполнительные листы
	СпБазовыхРасчетов = СпНачисленийЗаОтработанноеВремя.Скопировать();
	СпБазовыхРасчетов.Добавить(ПВРОсн.ОплатаПоСреднему);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ОплатаПоСреднемуОтп);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ОплатаПоСреднемуБЛ);
	СпБазовыхРасчетов.Добавить(ВидРасчетаДоплатаДоСреднегоЗаработка);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ПростойОкладПоДням);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ПростойОкладПоЧасам);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ПростойПоВинеРаботодателя);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ПростойТарифДневной);
	СпБазовыхРасчетов.Добавить(ПВРОсн.ПростойТарифЧасовой);
	СпБазовыхРасчетов.Добавить(ПВРДоп.Годовая);
	СпБазовыхРасчетов.Добавить(ПВРДоп.Квартальная);
	СпБазовыхРасчетов.Добавить(ПВРДоп.Месячная);
	
	УстановитьБазовыеИВедущиеРасчеты(ПВРУд.ИЛПроцентом, СпБазовыхРасчетов, Неопределено);
	УстановитьБазовыеИВедущиеРасчеты(ПВРУд.ИЛПроцентомДоПредела, СпБазовыхРасчетов, Неопределено);

	// установка признака вычитания из облагаемой базы для исп. листов ОПВ и ИПН
	МассивВидовУдержанийИЛ = Новый Массив();
	МассивВидовУдержанийИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентом);
	МассивВидовУдержанийИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомДоПредела);
		
	Для Каждого ВРСсылка Из МассивВидовУдержанийИЛ Цикл
		ВРОбъект = ВРСсылка.ПолучитьОбъект();
		ВРОбъект.ВычитатьИзБазыИПН = Истина;
		ВРОбъект.ВычитатьИзБазыОПВ = Истина;
			
		Попытка
			ВРОбъект.Записать();
		Исключение
			Сообщить(" при записи вида расчета " + ВРСсылка.Наименование + " возникла ошибка: " + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	// Включаемые в расчет от обратного виды начислений и компенсируемые виды удержаний
	СписокКомпенсируемыхУдержаний = Новый СписокЗначений;
	СписокКомпенсируемыхУдержаний.Добавить(Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог);
	СписокКомпенсируемыхУдержаний.Добавить(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы);

	УстановитьВключаемыеИКомпенсируемыеРасчеты(ПВРОсн.ОкладОтОбратного, Неопределено, СписокКомпенсируемыхУдержаний);
	УстановитьВключаемыеИКомпенсируемыеРасчеты(ПВРОсн.ОкладОтОбратногоПоДням, Неопределено, СписокКомпенсируемыхУдержаний);
	УстановитьВключаемыеИКомпенсируемыеРасчеты(ПВРОсн.ОкладОтОбратногоПоЧасам, Неопределено, СписокКомпенсируемыхУдержаний);
	УстановитьВключаемыеИКомпенсируемыеРасчеты(ПВРОсн.ТарифЧасовойОтОбратного, Неопределено, СписокКомпенсируемыхУдержаний);
	
КонецПроцедуры

// Устанавливает список базовых расчетов для элемента плана видов расчета
//
// Параметры
//  ВидРасчета  – вид расчетов (ссылка)
//  БазовыеВидыРасчетов - список базовых видов расчетов
Процедура УстановитьБазовыеИВедущиеРасчеты(ВидРасчета, БазовыеВидыРасчетов, ВедущиеВидыРасчета)

	ВР = ВидРасчета.ПолучитьОбъект();

	// обходим с последней строки табличной части и удаляем не предопределенные строки
	Индекс = ВР.БазовыеВидыРасчета.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		Если ВР.БазовыеВидыРасчета[Индекс].Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		ВР.БазовыеВидыРасчета.Удалить(Индекс);
	КонецЦикла;
	Если БазовыеВидыРасчетов <> Неопределено Тогда
		Для каждого Элемент Из БазовыеВидыРасчетов Цикл
			НоваяСтрока            = ВР.БазовыеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;

	// обходим с последней строки табличной части и удаляем не предопределенные строки
	Индекс = ВР.ВедущиеВидыРасчета.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		Если ВР.ВедущиеВидыРасчета[Индекс].Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		ВР.ВедущиеВидыРасчета.Удалить(Индекс);
	КонецЦикла;
	Если ВедущиеВидыРасчета <> Неопределено Тогда
		Для каждого Элемент Из ВедущиеВидыРасчета Цикл
			НоваяСтрока            = ВР.ВедущиеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;

	ВР.Записать();

КонецПроцедуры

// Устанавливает реквизиты элемента плана видов расчета "УдержанияОрганизаций" 
//
Процедура УстановитьРеквизитыУдержанияОрганизации(ВидРасчета, СпособРасчета, КатегорияРасчета, СпособОтраженияВБухучете, БазовыеВидыРасчетов = Неопределено, ПериодРасчетаСреднегоЗаработка = 0) Экспорт

	ОбъектВР = ВидРасчета.ПолучитьОбъект();

	ОбъектВР.СпособРасчета            = СпособРасчета;
	ОбъектВР.КатегорияРасчета         = КатегорияРасчета;
	ОбъектВР.СпособОтраженияВБухучете = СпособОтраженияВБухучете;
	ОбъектВР.ПериодРасчетаСреднегоЗаработка = ПериодРасчетаСреднегоЗаработка;

	Если БазовыеВидыРасчетов <> Неопределено Тогда
		ОбъектВР.БазовыеВидыРасчета.Очистить();
		Для Каждого Элемент Из БазовыеВидыРасчетов Цикл
			НоваяСтрока            = ОбъектВР.БазовыеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;

	ОбъектВР.Записать();

КонецПроцедуры

// Устанавливает список включаемых в расчет от обратного начислений и компенсируемых удержаний
//
// Параметры
//  ВидРасчета  – вид расчетов (ссылка)
//  ВключаемыеВидыНачислений - список включаемых видов начислений
//  КомпенсируемыеВидыУдержаний - список компенсируемых видов удержаний
Процедура УстановитьВключаемыеИКомпенсируемыеРасчеты(ВидРасчета, ВключаемыеВидыНачислений, КомпенсируемыеВидыУдержаний) Экспорт

	ВР = ВидРасчета.ПолучитьОбъект();

	Если ВключаемыеВидыНачислений <> Неопределено Тогда
		Для каждого Элемент Из ВключаемыеВидыНачислений Цикл
			Если ВР.ВключаемыеВРасчетОтОбратногоВидыНачислений.Найти(Элемент.Значение,"ВидРасчета") = Неопределено Тогда
				НоваяСтрока            = ВР.ВключаемыеВРасчетОтОбратногоВидыНачислений.Добавить();
				НоваяСтрока.ВидРасчета = Элемент.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// обходим с последней строки табличной части и удаляем не предопределенные строки
	Если КомпенсируемыеВидыУдержаний <> Неопределено Тогда
		Для каждого Элемент Из КомпенсируемыеВидыУдержаний Цикл
			Если ВР.КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.Найти(Элемент.Значение, "ВидРасчета") = Неопределено Тогда
				НоваяСтрока            = ВР.КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.Добавить();
				НоваяСтрока.ВидРасчета = Элемент.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ВР.Записать();

КонецПроцедуры

// Выполняет заполнение реквизитов управленческих планов видов расчета
//
Процедура ЗаполнитьСхемыМотивации(ВалютаРегламентированногоУчета) 
	

	Числовой = Перечисления.ТипыПоказателейСхемМотивации.Числовой;
	Денежный = Перечисления.ТипыПоказателейСхемМотивации.Денежный;
	Процентный = Перечисления.ТипыПоказателейСхемМотивации.Процентный;
	ВводитсяПриРасчете = Перечисления.ИзменениеПоказателейСхемМотивации.ВводитсяПриРасчете;
	ИзменяетсяПриРасчете = Перечисления.ИзменениеПоказателейСхемМотивации.ИзменяетсяПриРасчете;
	НеИзменяется = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется;	
	ВозможностьИзмененияНеУказана = Перечисления.ИзменениеПоказателейСхемМотивации.ПустаяСсылка();
	
	ПоказателиСхемМотивации = Справочники.ПоказателиСхемМотивации;
	
    // пустой вид показателя
    УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ВремяВДнях.ПолучитьОбъект(),				Числовой, 	ВозможностьИзмененияНеУказана,,,	"ВремяВДнях",, 						ВалютаРегламентированногоУчета);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ВремяВЧасах.ПолучитьОбъект(),			Числовой, 	ВозможностьИзмененияНеУказана,,,	"ВремяВЧасах",, 					ВалютаРегламентированногоУчета);	
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.НормаВремениВДнях.ПолучитьОбъект(),		Числовой, 	ВозможностьИзмененияНеУказана,,,	"НормеВремениВДнях",, 				ВалютаРегламентированногоУчета);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.НормаВремениВЧасах.ПолучитьОбъект(),		Числовой, 	ВозможностьИзмененияНеУказана,,,	"НормаВремениВЧасах",, 				ВалютаРегламентированногоУчета);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.РасчетнаяБаза.ПолучитьОбъект(),			Числовой, 	ВозможностьИзмененияНеУказана,,,	"РасчетнаяБаза",, 					ВалютаРегламентированногоУчета);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.СдельнаяВыработка.ПолучитьОбъект(),		Числовой, 	ВозможностьИзмененияНеУказана,,,	"СдельнаяВыработка",, 				ВалютаРегламентированногоУчета);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.Стаж.ПолучитьОбъект(),					Числовой, 	ВозможностьИзмененияНеУказана,,,	"Стаж",, 							ВалютаРегламентированногоУчета);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ТарифнаяСтавкаДневная.ПолучитьОбъект(),	Денежный, 	НеИзменяется,,,						"ТарифнаяСтавкаДневная",	Истина, ВалютаРегламентированногоУчета);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная.ПолучитьОбъект(),	Денежный, 	НеИзменяется,,,						"ТарифнаяСтавкаМесячная", 	Истина, ВалютаРегламентированногоУчета);
	УстановитьРеквизитыПоказателяСхемМотивации(ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.ПолучитьОбъект(),	Денежный, 	НеИзменяется,,,						"ТарифнаяСтавкаЧасовая", 	Истина, ВалютаРегламентированногоУчета);

	ОкладПоДням = УстановитьРеквизитыПоказателяСхемМотивации(,													Денежный,	НеИзменяется, "Оклад по дням",,		"ОкладПоДням",				Истина, ВалютаРегламентированногоУчета);
	ОкладПоЧасам = УстановитьРеквизитыПоказателяСхемМотивации(,													Денежный,	НеИзменяется, "Оклад по часам",,	"ОкладПоЧасам",				Истина, ВалютаРегламентированногоУчета);
	КомиссионнаяВыручка = УстановитьРеквизитыПоказателяСхемМотивации(,											Денежный,	ВводитсяПриРасчете, "Комиссионная выручка",, "КомиссионнаяВыручка",,	ВалютаРегламентированногоУчета);
	Процент = УстановитьРеквизитыПоказателяСхемМотивации(,														Процентный,	НеИзменяется, "Процент",, 			"Процент",,							ВалютаРегламентированногоУчета);
	ПроцентПлана = УстановитьРеквизитыПоказателяСхемМотивации(,													Процентный,	ИзменяетсяПриРасчете,"Процент плана",,"ПроцентПлана",,					ВалютаРегламентированногоУчета);
	РазмерПремии = УстановитьРеквизитыПоказателяСхемМотивации(,													Денежный,	ИзменяетсяПриРасчете,"Размер премии",,"РазмерПремии",,					ВалютаРегламентированногоУчета);
	ФиксированнаяСумма = УстановитьРеквизитыПоказателяСхемМотивации(,											Денежный,	НеИзменяется, "Фиксированная сумма",,"ФиксированнаяСуммма",,			ВалютаРегламентированногоУчета);

	СпРасчета  = Перечисления.СпособыРасчетаОплатыТруда;
	Категории  = Перечисления.КатегорииРасчетов;
    СпРасчетов = Новый СписокЗначений;
	
	// Управленческие начисления
	ПВР = ПланыВидовРасчета.УправленческиеНачисления;
	УстановитьРеквизитыУправленческогоНачисления(ПВР.НачисленоПоБухгалтерии,		СпРасчета.ФиксированнойСуммой, Категории.Первичное);
	УстановитьРеквизитыУправленческогоНачисления(ПВР.НачисленоПоБухгалтерииСдельно,	СпРасчета.ФиксированнойСуммой, Категории.Первичное);
	
	Оклад = СоздатьВидРасчета(ПВР, "00003", "Оклад");
	Невыход = СоздатьВидРасчета(ПВР, "00023", "Отсутствие по невыясненной причине");
	Отпуск = СоздатьВидРасчета(ПВР, "00021", "Отпуск");
	Больничный = СоздатьВидРасчета(ПВР, "00022", "Больничный");
	
	КомиссионнаяОплата = СоздатьВидРасчета(ПВР, "00024", "Комиссионная оплата");
	СдельнаяОплата = СоздатьВидРасчета(ПВР, "00025", "Сдельная оплата");
	ПочасоваяОплата = СоздатьВидРасчета(ПВР, "00026", "Почасовая оплата");

	СпРасчетов.Добавить(Невыход);
	СпРасчетов.Добавить(Отпуск);
	СпРасчетов.Добавить(Больничный);
	
		
	УстановитьРеквизитыУправленческогоНачисления(Невыход, 				СпРасчета.ПроизвольнаяФормула,	Категории.Первичное,,,,					ФиксированнаяСумма,,, 														"ИсходныеДанные.Показатель1", Истина);
	УстановитьРеквизитыУправленческогоНачисления(Отпуск,				СпРасчета.ПроизвольнаяФормула,	Категории.Первичное,,,,					ОкладПоДням,ПоказателиСхемМотивации.ВремяВДнях,ПоказателиСхемМотивации.НормаВремениВДнях, 	"ИсходныеДанные.Показатель1*ИсходныеДанные.Показатель2/ИсходныеДанные.Показатель3");
	УстановитьРеквизитыУправленческогоНачисления(Больничный,			СпРасчета.ПроизвольнаяФормула,	Категории.Первичное,,,,					ФиксированнаяСумма,,,														"ИсходныеДанные.Показатель1");
	УстановитьРеквизитыУправленческогоНачисления(Оклад, 				СпРасчета.ПроизвольнаяФормула,	Категории.Первичное, Истина, СпРасчетов,,ОкладПоДням,ПоказателиСхемМотивации.ВремяВДнях,ПоказателиСхемМотивации.НормаВремениВДнях,	"ИсходныеДанные.Показатель1*ИсходныеДанные.Показатель2/ИсходныеДанные.Показатель3", Истина);
	
	УстановитьРеквизитыУправленческогоНачисления(КомиссионнаяОплата,	СпРасчета.ПроизвольнаяФормула, 	Категории.Первичное, Истина, СпРасчетов,,КомиссионнаяВыручка, Процент,,												"ИсходныеДанные.Показатель1*ИсходныеДанные.Показатель2",, Истина);
	УстановитьРеквизитыУправленческогоНачисления(СдельнаяОплата, 		СпРасчета.ПроизвольнаяФормула, 	Категории.Первичное, Истина, СпРасчетов,,ПоказателиСхемМотивации.СдельнаяВыработка,,,								"ИсходныеДанные.Показатель1");
	УстановитьРеквизитыУправленческогоНачисления(ПочасоваяОплата, 		СпРасчета.ПроизвольнаяФормула, 	Категории.Первичное, Истина, СпРасчетов,,ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая,ПоказателиСхемМотивации.ВремяВЧасах,,		"ИсходныеДанные.Показатель1*ИсходныеДанные.Показатель2", Истина);

	// Управленческие удержания
	Попытка
		ВРОбъект = ПланыВидовРасчета.УправленческиеУдержания.УдержаноПоБухгалтерии.ПолучитьОбъект();
		ВРОбъект.КатегорияРасчета = Перечисления.КатегорииРасчетов.Первичное;
		ВРОбъект.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой;
		
		ВРОбъект.Записать();
	Исключение
		Сообщить(" при записи вид расчета " + ПланыВидовРасчета.УправленческиеУдержания.УдержаноПоБухгалтерии.Наименование + " произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;
	

КонецПроцедуры

Функция УстановитьРеквизитыПоказателяСхемМотивации(	Показатель = Неопределено, 
													ТипПоказателя, 
													ВозможностьИзменения, 
													Наименование = "", 
													ВидПоказателя = Неопределено,  
													Идентификатор = "", 
													ТарифнаяСтавка = Ложь, 
													ВалютаРегламентированногоУчета=Неопределено) Экспорт
		
	Если Наименование <> "" Тогда 
		Ссылка = Справочники.ПоказателиСхемМотивации.НайтиПоНаименованию(Наименование);
		Если Ссылка.Пустая() Тогда
			ПоказательОбъект = Справочники.ПоказателиСхемМотивации.СоздатьЭлемент();
			ПоказательОбъект.Наименование = Наименование;	
		Иначе                      
			ПоказательОбъект = Ссылка.ПолучитьОбъект();
		КонецЕсли;
	Иначе
		ПоказательОбъект = Показатель;
	КонецЕсли;
	
	// Вид показателя по умолчанию показатель "индивидуальный"
	Если ВидПоказателя = Неопределено Тогда
		ПоказательОбъект.ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Индивидуальный;
	Иначе
		ПоказательОбъект.ВидПоказателя = ВидПоказателя;
	КонецЕсли;
	
	Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный Тогда
		ПоказательОбъект.Валюта = ВалютаРегламентированногоУчета;
	КонецЕсли;

	ПоказательОбъект.ТипПоказателя = ТипПоказателя;
    ПоказательОбъект.ВозможностьИзменения = ВозможностьИзменения;
	ПоказательОбъект.Идентификатор = Идентификатор;
	ПоказательОбъект.ТарифнаяСтавка = ТарифнаяСтавка;

	ПоказательОбъект.Записать();

	Возврат ПоказательОбъект.Ссылка
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// 

// Функция создает элемент план видов харакетристик, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита
//  Наименование              - значение соответствующего реквизита
//  ТипЗначения		          - значение соответствующего реквизита
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьПВХ(Код, Наименование, ТипЗначения) Экспорт

	Ссылка = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		ПВХ = ПланыВидовХарактеристик.СвойстваОбъектов.СоздатьЭлемент();
		Ссылка = ПВХ.Ссылка;
	Иначе 
		ПВХ = Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	ПВХ.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица;
	ПВХ.Наименование = Наименование;
	ПВХ.Код = Код;
	ПВХ.ТипЗначения = ТипЗначения;
	ПВХ.Записать();

	Возврат Ссылка;

КонецФункции // НайтиСоздатьПВХ()

// Заполняет регистры учетной политики для переданной организации значениями по умолчанию
//
Процедура ЗаполнитьРегистрыУчетнойПолитикиПоУмолчанию(Организация)

	//Заполняем сведения по УчетнаяПолитикаНалоговыйУчет Организации 
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Значение		 = Организация;
	НаборЗаписей.Отбор.Организация.Использование = Истина;
	НаборЗаписей.Записать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = '19800101'; 
	Запись.Организация =  Организация;
	Запись.УпрощенныйУчетИПНиОПВ   		 = Ложь;
	Запись.ОтражениеПоПериодуРегистрации = Истина;
	Запись.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ = Истина;
	Запись.ОрганизацияЯвляетсяПлательщикомСН = Истина;
	Запись.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога = Истина;
	Запись.ПорядокСписанияЗадолженностиПоЗарплате = Перечисления.ПорядокСписанияЗадолженностиПоЗарплате.ПоСпособуЗаполненияДокумента;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры // ЗаполнитьРегистрыУчетнойПолитикиПоУмолчанию


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБНОВЛЕНИЯ НА ВЕРСИЮ 2.0.6

// Заполняет реквизит КраткийСоставДокумента для документов подсистемы управленческого учета
//
Процедура ВыполнитьЗаполнениеКраткогоСоставаУпрДокументов()
	
	Запрос = Новый Запрос;
	
	//ВводСведенийОПлановыхНачисленияхУдержанияхРаботников
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводСведенийОПлановыхНачисленияхУдержанияхРаботников.Ссылка,
		|	ВводСведенийОПлановыхНачисленияхУдержанияхРаботников.Начисления.(
		|		Физлицо
		|	),
		|	ВводСведенийОПлановыхНачисленияхУдержанияхРаботников.Удержания.(
		|		Физлицо
		|	)
		|ИЗ
		|	Документ.ВводСведенийОПлановыхНачисленияхУдержанияхРаботников КАК ВводСведенийОПлановыхНачисленияхУдержанияхРаботников";
		
	ВыполнитьЗаполнениеКраткогоСоставаДокумента(Запрос.Выполнить().Выбрать(), Метаданные.Документы.ВводСведенийОПлановыхНачисленияхУдержанияхРаботников, Истина);	
	
	//ВозвратНаРаботу
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратНаРаботу.Ссылка,
		|	ВозвратНаРаботу.Работники.(
		|		Сотрудник,
		|		ФизЛицо
		|	)
		|ИЗ
		|	Документ.ВозвратНаРаботу КАК ВозвратНаРаботу";
	ВыполнитьЗаполнениеКраткогоСоставаДокумента(Запрос.Выполнить().Выбрать(), Метаданные.Документы.ВозвратНаРаботу);	
		
	//ЗарплатаКВыплате
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗарплатаКВыплате.Ссылка,
		|	ЗарплатаКВыплате.Зарплата.(
		|		Физлицо
		|	)
		|ИЗ
		|	Документ.ЗарплатаКВыплате КАК ЗарплатаКВыплате";
	ВыполнитьЗаполнениеКраткогоСоставаДокумента(Запрос.Выполнить().Выбрать(), Метаданные.Документы.ЗарплатаКВыплате, Истина);	
		
	//ЗаявкаНаОбучение
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаОбучение.Ссылка,
		|	ЗаявкаНаОбучение.ОбучающиесяРаботники.(
		|		Сотрудник,
		|		ФизЛицо
		|	)
		|ИЗ
		|	Документ.ЗаявкаНаОбучение КАК ЗаявкаНаОбучение";
	ВыполнитьЗаполнениеКраткогоСоставаДокумента(Запрос.Выполнить().Выбрать(), Метаданные.Документы.ЗаявкаНаОбучение);	
		
	//КадровоеПеремещение
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадровоеПеремещение.Ссылка,
		|	КадровоеПеремещение.Работники.(
		|		Сотрудник,
		|		ФизЛицо
		|	)
		|ИЗ
		|	Документ.КадровоеПеремещение КАК КадровоеПеремещение";
	ВыполнитьЗаполнениеКраткогоСоставаДокумента(Запрос.Выполнить().Выбрать(), Метаданные.Документы.КадровоеПеремещение);	
	
	//НачислениеЗарплатыРаботникам
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачислениеЗарплатыРаботникам.Ссылка,
		|	НачислениеЗарплатыРаботникам.Начисления.(
		|		Сотрудник,
		|		Физлицо
		|	),
		|	НачислениеЗарплатыРаботникам.Удержания.(
		|		Физлицо
		|	),
		|	НачислениеЗарплатыРаботникам.ПогашениеЗаймов.(
		|		ФизЛицо
		|	)
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникам КАК НачислениеЗарплатыРаботникам";
	ВыполнитьЗаполнениеКраткогоСоставаДокумента(Запрос.Выполнить().Выбрать(), Метаданные.Документы.НачислениеЗарплатыРаботникам, Истина);	
		
	//ОтсутствиеНаРаботе
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтсутствиеНаРаботе.Ссылка,
		|	ОтсутствиеНаРаботе.Работники.(
		|		Сотрудник,
		|		ФизЛицо
		|	)
		|ИЗ
		|	Документ.ОтсутствиеНаРаботе КАК ОтсутствиеНаРаботе";
	ВыполнитьЗаполнениеКраткогоСоставаДокумента(Запрос.Выполнить().Выбрать(), Метаданные.Документы.ОтсутствиеНаРаботе);	
	
	//ОценкаИспытательногоСрока
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОценкаИспытательногоСрока.Ссылка,
		|	ОценкаИспытательногоСрока.Работники.(
		|		Сотрудник,
		|		ФизЛицо
		|	)
		|ИЗ
		|	Документ.ОценкаИспытательногоСрока КАК ОценкаИспытательногоСрока";
	ВыполнитьЗаполнениеКраткогоСоставаДокумента(Запрос.Выполнить().Выбрать(), Метаданные.Документы.ОценкаИспытательногоСрока);	
		
	//ОценкаКандидата
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОценкаКандидата.Ссылка,
		|	ОценкаКандидата.Кандидаты.(
		|		ФизЛицо
		|	)
		|ИЗ
		|	Документ.ОценкаКандидата КАК ОценкаКандидата";
	ВыполнитьЗаполнениеКраткогоСоставаДокумента(Запрос.Выполнить().Выбрать(), Метаданные.Документы.ОценкаКандидата, Истина);	
		
	//ПланированиеОтпуска
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланированиеОтпуска.Ссылка,
		|	ПланированиеОтпуска.Работники.(
		|		Сотрудник,
		|		ФизЛицо
		|	)
		|ИЗ
		|	Документ.ПланированиеОтпуска КАК ПланированиеОтпуска";
	ВыполнитьЗаполнениеКраткогоСоставаДокумента(Запрос.Выполнить().Выбрать(), Метаданные.Документы.ПланированиеОтпуска);	
		
	//ПриемНаРаботу
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриемНаРаботу.Ссылка,
		|	ПриемНаРаботу.Работники.(
		|		Сотрудник,
		|		ФизЛицо
		|	)
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу";
	ВыполнитьЗаполнениеКраткогоСоставаДокумента(Запрос.Выполнить().Выбрать(), Метаданные.Документы.ПриемНаРаботу);	
		
	//ПрохождениеКурсаОбучения
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрохождениеКурсаОбучения.Ссылка,
		|	ПрохождениеКурсаОбучения.ОбучающиесяРаботники.(
		|		Сотрудник,
		|		ФизЛицо
		|	)
		|ИЗ
		|	Документ.ПрохождениеКурсаОбучения КАК ПрохождениеКурсаОбучения";
	ВыполнитьЗаполнениеКраткогоСоставаДокумента(Запрос.Выполнить().Выбрать(), Метаданные.Документы.ПрохождениеКурсаОбучения);	
		
	//РегистрацияКандидатов
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрацияКандидатов.Ссылка,
		|	РегистрацияКандидатов.Кандидаты.(
		|		ФизЛицо
		|	)
		|ИЗ
		|	Документ.РегистрацияКандидатов КАК РегистрацияКандидатов";
	ВыполнитьЗаполнениеКраткогоСоставаДокумента(Запрос.Выполнить().Выбрать(), Метаданные.Документы.РегистрацияКандидатов, Истина);	
		
	//Увольнение
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Работники.(
		|		Сотрудник,
		|		ФизЛицо
		|	)
		|ИЗ
		|	Документ.Увольнение КАК Увольнение";
	ВыполнитьЗаполнениеКраткогоСоставаДокумента(Запрос.Выполнить().Выбрать(), Метаданные.Документы.Увольнение);	
		
	//УчастиеВМероприятиях
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчастиеВМероприятиях.Ссылка,
		|	УчастиеВМероприятиях.Работники.(
		|		Сотрудник,
		|		ФизЛицо
		|	)
		|ИЗ
		|	Документ.УчастиеВМероприятиях КАК УчастиеВМероприятиях";
	ВыполнитьЗаполнениеКраткогоСоставаДокумента(Запрос.Выполнить().Выбрать(), Метаданные.Документы.УчастиеВМероприятиях);	
		
	//УчетЗаработкаРаботников
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетЗаработкаРаботников.Ссылка,
		|	УчетЗаработкаРаботников.Работники.(
		|		Сотрудник,
		|		ФизЛицо
		|	)
		|ИЗ
		|	Документ.УчетЗаработкаРаботников КАК УчетЗаработкаРаботников";
	ВыполнитьЗаполнениеКраткогоСоставаДокумента(Запрос.Выполнить().Выбрать(), Метаданные.Документы.УчетЗаработкаРаботников);	
		
КонецПроцедуры

Процедура ВыполнитьЗаполнениеКраткогоСоставаДокумента(ВыборкаЗапроса, МетаданныеДокумента, ЗаполнитьПоФизЛицу = Ложь)
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		МассивТЧ = Новый Массив;
		Если МетаданныеДокумента.Имя <> "ПриемНаРаботу" И МетаданныеДокумента.Имя <> "КадровоеПеремещение" Тогда
			Для Каждого ТабличнаяЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
				МассивТЧ.Добавить(ВыборкаЗапроса[ТабличнаяЧасть.Имя].Выгрузить());
			КонецЦикла;
		Иначе 
			МассивТЧ.Добавить(ВыборкаЗапроса["Работники"].Выгрузить());
		КонецЕсли;
		
		ДокументОбъект = ВыборкаЗапроса.Ссылка.ПолучитьОбъект();
		ДокументОбъект.КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, ?(ЗаполнитьПоФизЛицу, "ФизЛицо", "Сотрудник"));
		
		Попытка
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Сообщить("При попытке записать данные документа " + ДокументОбъект + " произошла ошибка: " + ОписаниеОшибки());
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБНОВЛЕНИЯ НА ВЕРСИЮ 2.0.7

// Приводит время начала и время окончания смены к целому значению, если секунды = 59
//		
Процедура ОбновитьВремяВСправочникеСмены() Экспорт
		
	ВыборкаПоСправочнику = Справочники.Смены.Выбрать();
	
	Пока ВыборкаПоСправочнику.Следующий() Цикл
		
		ДанныеИзменены = Ложь;
		
		Смена = ВыборкаПоСправочнику.ПолучитьОбъект();
		
		ПериодыСмены = Смена.ПериодыСмены;
		
		Для Каждого СтрокаСмены из ПериодыСмены Цикл
			
			//обработка ВремяНачала
			ПривестиЗначениеВремениВСменах(СтрокаСмены.ВремяНачала, ДанныеИзменены);
			
			//обработка ВремяОкончания
			ПривестиЗначениеВремениВСменах(СтрокаСмены.ВремяОкончания, ДанныеИзменены);			
			
		КонецЦикла;
		
		Если ДанныеИзменены Тогда
			Попытка
				Смена.Записать();
			Исключение
				Сообщить("При попытке записать данные смены " + Смена + " произошла ошибка: " + ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПривестиЗначениеВремениВСменах(ТекущееВремя, ДанныеИзменены)
	
	Если ЗначениеЗаполнено(ТекущееВремя) Тогда
		Часов = Час(ТекущееВремя);
		Минут = Минута(ТекущееВремя);
		Секунд = Секунда(ТекущееВремя);				
		Если Часов = 23 И Минут = 59 Тогда
			Если Секунд <> 59 Тогда
				Секунд = 59;
				ТекущееВремя = Дата(1,1,1, Часов, Минут, Секунд);  
				ДанныеИзменены = Истина;
			КонецЕсли;
		ИначеЕсли Секунд = 59 Тогда // добавляем одну секунду к дате
			ТекущееВремя = ТекущееВремя + 1;
			ДанныеИзменены = Истина;
		ИначеЕсли Секунд <> 0 Тогда		
			Секунд = 0;
			ТекущееВремя = Дата(1,1,1, Часов, Минут, Секунд);  
			ДанныеИзменены = Истина;
		КонецЕсли;                  		
	КонецЕсли;      	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//
Процедура ДобавитьСведенияОКоэффициентеСтавкиРефинансированияНБДляРасчетаПени(Период, Организация, ВидНалога, Коэффициент)
	
	НаборЗаписей = РегистрыСведений.КоэффициентыСтавкиРефинансированияНБДляРасчетаПени.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ВидНалога.Установить(ВидНалога, Истина);
	НаборЗаписей.Отбор.Организация.Установить(Организация, Истина);
	НаборЗаписей.Отбор.Период.Установить(Период, Истина);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Движение     = НаборЗаписей.Добавить();
		// Свойства
		Движение.Период   = Период;
		// Измерения
		Движение.Организация = Организация;
		Движение.ВидНалога  = ВидНалога;
		// Ресурсы
		Движение.Коэффициент = Коэффициент;
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Коэффициенты ставки рефинансирования НБ для расчета пени"" произошли ошибки:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизит Неактуальный для справочника КлассификаторЗанятий
//
Процедура ЗаполнитьРеквизитНеактуальныйСправочникаКлассификаторЗанятий() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КлассификаторЗанятий.Ссылка
	|ИЗ
	|	Справочник.КлассификаторЗанятий КАК КлассификаторЗанятий
	|ГДЕ
	|	КлассификаторЗанятий.Неактуальный = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();		
		СправочникОбъект.Неактуальный = Истина;	
		
		Попытка
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();		
		Исключение
			Сообщить("Не удалось записать элемент справочника ""Классификатор занятий""" + ОписаниеОшибки());
		КонецПопытки;   		
	КонецЦикла;
	
КонецПроцедуры

