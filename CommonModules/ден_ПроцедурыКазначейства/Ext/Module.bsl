////////////////////////////////////////////////////////////////////////////////
// ден_ПроцедурыКазначейства: 
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ППИ_ЗаполнитьПоЗаявкеНаРасходованиеСредствУпр(Источник, Основание, мВалютаРегламентированногоУчета)  Экспорт
	
	куфиб_ЗащитаПроцедурыУправленческогоУчета.ППИ_ЗаполнитьПоЗаявкеНаРасходованиеСредствУпр(Источник, Основание, мВалютаРегламентированногоУчета);
	
КонецПроцедуры

// Заполняет сумму документа и сумму взаиморасчетов на основании остатка
// по заявке в регистре "ЗаявкиНаРасходованиеСредств"
//
Процедура ПОСДС_ЗаполнитьПоЗаявкеУпр(ДокументОбъект,ДокументОснование) Экспорт
	
	куфиб_ЗащитаПроцедурыУправленческогоУчета.ПОСДС_ЗаполнитьПоЗаявкеУпр(ДокументОбъект,ДокументОснование);
	
КонецПроцедуры // ЗаполнитьПоЗаявкеУпр()

Процедура РКО_ЗаполнитьПоЗаявкеНаРасходованиеСредствУпр(Источник, Основание, мВалютаРегламентированногоУчета) Экспорт
	
	куфиб_ЗащитаПроцедурыУправленческогоУчета.РКО_ЗаполнитьПоЗаявкеНаРасходованиеСредствУпр(Источник, Основание, мВалютаРегламентированногоУчета);
	
КонецПроцедуры

// Возвращает таблицу значений, содержащую движения ДС. ТЗ формируется с учетом строки настройки отборов 
// из табличной части справочника "ден_НастройкиЗаполненияПланаДвиженияДенежныхСредств"
//
Функция ПолучитьДвиженияДенежныхСредствПоНастройкеОтбора(ТекстЗапроса, НастройкаОтбора, ПараметрыДанных) Экспорт

	СхемаКомпоновки = Новый СхемаКомпоновкиДанных();

	Источник                    = СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя                = "Источник1";
	Источник.СтрокаСоединения   = "";
	Источник.ТипИсточникаДанных = "local";

	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));

	НаборДанных.Имя            = "Запрос";
	НаборДанных.Запрос         = ТекстЗапроса;
	НаборДанных.ИсточникДанных = "Источник1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;

	НастройкиКомпоновки = СкомпоноватьНастройки(СхемаКомпоновки);
	
	Если ЗначениеЗаполнено(НастройкаОтбора) Тогда
		Отбор = ЗначениеИзСтрокиВнутр(НастройкаОтбора);
		Если ТипЗнч(Отбор)=Тип("ОтборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(НастройкиКомпоновки.Отбор, Отбор);
		КонецЕсли;
	КонецЕсли;	
	Для Каждого ПараметрДанных Из ПараметрыДанных Цикл     
		РезультатПоиска = НастройкиКомпоновки.ПараметрыДанных.ДоступныеПараметры.Элементы.Найти(ПараметрДанных.Ключ);
		Если РезультатПоиска <> Неопределено Тогда
			НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра(ПараметрДанных.Ключ, ПараметрДанных.Значение);
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ТаблицаДвиженийДС = Новый ТаблицаЗначений;

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаДвиженийДС);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 	
	
	Возврат ТаблицаДвиженийДС;
	//РезультатМассив = Новый Массив;
	//
	//Для Каждого ДвижениеДС Из ТаблицаДвиженийДС Цикл
	//	
	//	СтруктураСтрока = Новый Структура;
	//    Для Каждого Колонка Из ТаблицаДвиженийДС.Колонки Цикл
	//        СтруктураСтрока.Вставить(Колонка.Имя, ДвижениеДС[Колонка.Имя]);
	//	КонецЦикла;
	//	
	//	РезультатМассив.Добавить(СтруктураСтрока);
	//	
	//КонецЦикла;
	//
	//Возврат РезультатМассив;
		
КонецФункции 

///////////////////////////////////////////////////////////////////////////////
// ПРОВЕДЕНИЕ ДОКУМЕНТОВ

// ден_ПланДвиженияДенежныхСредств

Процедура СформироватьДвиженияПланДвиженияДенежныхСредств(Реквизиты, Таблица, Движения, Отказ) Экспорт

	ВалютаДокумента 	= Реквизиты.ВалютаДокумента;
	ВалютаУпрУчета 		= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	ПериодПланирования 	= Реквизиты.ПериодПланирования;
	Организация			= Реквизиты.Организация;
	Сценарий 			= Реквизиты.Сценарий;	
	Ссылка 				= Реквизиты.Ссылка;
	
	// Получим коэффициент пересчета сумм документа в валюту упр. учета.
	Если ВалютаДокумента = ВалютаУпрУчета Тогда
		КоэффициентПересчетаУпр = 1;
	Иначе
		Если Сценарий.ИспользоватьКурсыСценария Тогда
			РегистрКурсов = РегистрыСведений.КурсыВалютПоСценариям;
			
			ОтборПоВалютеУпр = Новый Структура;
			ОтборПоВалютеУпр.Вставить("Валюта",ВалютаУпрУчета);
			ОтборПоВалютеУпр.Вставить("Сценарий",Сценарий);
			
			ОтборПоВалютеДок = Новый Структура;
			ОтборПоВалютеДок.Вставить("Валюта",ВалютаДокумента);
			ОтборПоВалютеДок.Вставить("Сценарий",Сценарий);
		Иначе
			РегистрКурсов = РегистрыСведений.КурсыВалют;
			
			ОтборПоВалютеУпр = Новый Структура;
			ОтборПоВалютеУпр.Вставить("Валюта",ВалютаУпрУчета);
			
			ОтборПоВалютеДок = Новый Структура;
			ОтборПоВалютеДок.Вставить("Валюта",ВалютаДокумента);
		КонецЕсли;
		
		СтруктураКурсовУпр 	= РегистрКурсов.ПолучитьПоследнее(ПериодПланирования,ОтборПоВалютеУпр);
		КурсУпрУчета 		= СтруктураКурсовУпр.Курс;
		КратностьУпрУчета 	= СтруктураКурсовУпр.Кратность;
		
		СтруктураКурсовДок 	= РегистрКурсов.ПолучитьПоследнее(ПериодПланирования,ОтборПоВалютеДок);
		КурсДок 			= СтруктураКурсовДок.Курс;
		КратностьДок 		= СтруктураКурсовДок.Кратность;
		
		Если КурсДок = 0 
			Или КратностьДок = 0 
			Или КурсУпрУчета = 0 
			Или КратностьУпрУчета = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'При пересчете в валюту упр. учета обнаружен нулевой курс.'"), Отказ);
			Возврат;
		Иначе	
			КоэффициентПересчетаУпр = (КурсДок * КратностьУпрУчета) / (КурсУпрУчета * КратностьДок)
		КонецЕсли;
		
	КонецЕсли;
	
	Движения.ден_ПланыДвиженияДенежныхСредств.Записывать = Истина;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;

		Движение = Движения.ден_ПланыДвиженияДенежныхСредств.Добавить();
		Движение.Период = ?(СтрокаТаблицы.ПериодПланирования = '00010101', ПериодПланирования, СтрокаТаблицы.ПериодПланирования);
		Движение.Сценарий 						= Сценарий;
		Движение.ВидДенежныхСредств 			= СтрокаТаблицы.ВидДенежныхСредств;
		Движение.ПриходРасход 					= СтрокаТаблицы.ПриходРасход;
		Движение.ВалютаДенежныхСредств 			= ВалютаДокумента;
		Движение.СтатьяДвиженияДенежныхСредств 	= СтрокаТаблицы.СтатьяДвиженияДенежныхСредств;
		Движение.Проект 						= СтрокаТаблицы.Проект;
		Движение.Контрагент 					= СтрокаТаблицы.Контрагент;
		Движение.ДоговорКонтрагента 			= СтрокаТаблицы.ДоговорКонтрагента;
		Движение.ДокументПланирования 			= Ссылка;
		Движение.Организация 					= Организация;
		Движение.Подразделение 					= СтрокаТаблицы.Подразделение;
		Движение.ВидОперации 					= СтрокаТаблицы.ВидОперации;
		
		Движение.Сумма = СтрокаТаблицы.Сумма;
		Движение.СуммаУпр = СтрокаТаблицы.Сумма * КоэффициентПересчетаУпр;
		
	КонецЦикла;
	
КонецПроцедуры

// ден_ПланируемоеПоступлениеДенежныхСредств

Процедура СформироватьДвиженияПланируемоеПоступлениеДенежныхСредств(Реквизиты, Таблица, Движения, Отказ) Экспорт

	Дата 						= Реквизиты.Дата;
	ДатаПоступления 			= Реквизиты.ДатаПоступления;
	ВидОперации 				= Реквизиты.ВидОперации;
	ВалютаДокумента 			= Реквизиты.ВалютаДокумента;
	ВалютаВзаиморасчетов 		= ВалютаДокумента;
	Ссылка						= Реквизиты.Ссылка;
	Контрагент					= Реквизиты.Контрагент;
	Организация					= Реквизиты.Организация;
	СтруктурноеПодразделение 	= Реквизиты.СтруктурноеПодразделение;
	
	ЕстьРасчетыПоКредитам 		= ЕстьРасчетыПоКредитам(ВидОперации);
	ЕстьРасчетыСКонтрагентами 	= ЕстьРасчетыСКонтрагентами(ВидОперации);

	СтруктураКурсыВалют = СформироватьСтруктуруКурсыВалютУпр(ВалютаДокумента, Дата, ДатаПоступления);

	Движения.ден_ПланируемыеПоступленияДенежныхСредств.Записывать = Истина;
	Период = ?(ДатаПоступления = '00010101', Дата, ДатаПоступления);
	
	Для каждого СтрокаТаблицы Из Таблица Цикл
				
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			ВалютаВзаиморасчетов = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		Иначе
			ВалютаВзаиморасчетов = ВалютаДокумента;
		КонецЕсли;
		
		СтруктураКурсВзаиморасчетов = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Период);
		
		СуммаУпр = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, 
																			 ВалютаВзаиморасчетов,, 
																			 СтруктураКурсВзаиморасчетов.Курс,
																			 СтруктураКурсыВалют.ВалютаУпрУчетаКурс, 
																			 СтруктураКурсВзаиморасчетов.Кратность,
																			 СтруктураКурсыВалют.ВалютаУпрУчетаКратность);

		Если СуммаУпр = 0 И СтрокаТаблицы.СуммаПлатежа = 0 И СтрокаТаблицы.СуммаВзаиморасчетов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.ден_ПланируемыеПоступленияДенежныхСредств.ДобавитьПриход();
		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		
		Движение.Период 					= Период;
		Движение.СуммаУпр					= СуммаУпр;
		Движение.Сумма						= СтрокаТаблицы.СуммаПлатежа;
		Движение.ДокументПланирования		= Ссылка;
		Движение.Контрагент					= Контрагент;
		Движение.Организация				= Организация;
		Движение.СтруктурноеПодразделение	= СтруктурноеПодразделение;

	КонецЦикла; 

КонецПроцедуры

// Возвращает признак расчетов с контрагентами по кредитам
//
Функция ЕстьРасчетыПоКредитам(ВидОперации = Неопределено) Экспорт
	            
	Если ВидОперации = Неопределено Тогда 
		
		ЕстьРасчеты  = Ложь;
		
	Иначе
		
		ЕстьРасчеты = (ВидОперации = Перечисления["ден_ВидыОперацийЗаявкиНаРасходование"].РасчетыПоКредитамИЗаймамСКонтрагентами
						ИЛИ ВидОперации = Перечисления["ден_ВидыОперацийПланируемоеПоступлениеДС"].РасчетыПоКредитамИЗаймам);

	КонецЕсли;
	
	Возврат ЕстьРасчеты;
	
КонецФункции 

					   
// Возвращает признак расчетов с контрагентами
//
Функция ЕстьРасчетыСКонтрагентами(ВидОперации = Неопределено) Экспорт

	Если ВидОперации = Неопределено Тогда 
		
		ЕстьРасчеты  = Ложь;
		
	Иначе

		ЕстьРасчеты = ВидыОперацийРасчетыСКонтрагентами().НайтиПоЗначению(ВидОперации) <> Неопределено;
		
	КонецЕсли;

	Возврат ЕстьРасчеты;

КонецФункции

Функция ВидыОперацийРасчетыСКонтрагентами() Экспорт
	
	СписокЗначений = Новый СписокЗначений;
	
	//СписокЗначений.Добавить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику);
	//СписокЗначений.Добавить(Перечисления.ВидыОперацийРКО.ОплатаСтруктурномуПодразделению);
	//СписокЗначений.Добавить(Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами);
	//СписокЗначений.Добавить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю);
	//	
	//	
	//СписокЗначений.Добавить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
	//СписокЗначений.Добавить(Перечисления.ВидыОперацийПКО.ОплатаСтруктурногоПодразделения);
	//СписокЗначений.Добавить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком);
	//	
	//	
	//СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику);
	//СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю);
	//СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	//	
	//СписокЗначений.Добавить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику);
	//СписокЗначений.Добавить(Перечисления.ВидыОперацийППИсходящее.ОплатаСтруктурномуПодразделению);
	//СписокЗначений.Добавить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю);
	//СписокЗначений.Добавить(Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами);
	//СписокЗначений.Добавить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами);
	//	
	//СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя);
	//СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаСтруктурногоПодразделения);
	//СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком);
	//СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	//СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты); 
	//СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты);
	//
	
	СписокЗначений.Добавить(Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику);
	СписокЗначений.Добавить(Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю);
	СписокЗначений.Добавить(Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами);
	СписокЗначений.Добавить(Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ОплатаСтруктурномуПодразделению);
	СписокЗначений.Добавить(Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами);
		
	СписокЗначений.Добавить(Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя);
	СписокЗначений.Добавить(Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком);
	СписокЗначений.Добавить(Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами);
	
	Возврат СписокЗначений;
	
КонецФункции


// ден_ЗаявкаНаРасходованиеСредств

Процедура СформироватьДвиженияЗаявкаНаРасходованиеСредствРазмещениеЗаявок(Реквизиты, РазмещениеЗаявки, Движения, Отказ) Экспорт
	
	Если РазмещениеЗаявки.Количество() = 0 Или Отказ Тогда
		Возврат;	
	КонецЕсли;

	Ссылка 		= Реквизиты.Ссылка;
	Дата		= Реквизиты.Дата;
	ДатаРасхода = Реквизиты.ДатаРасхода;
	ВалютаДокумента = Реквизиты.ВалютаДокумента;
	СтруктурноеПодразделение = Реквизиты.СтруктурноеПодразделение;
		
	РазмещениеЗаявокНаРасходованиеСредств = Движения.ден_РазмещениеЗаявокНаРасходованиеСредств;
	
	РазмещениеЗаявокНаРасходованиеСредств.Записывать = Истина;

	Для Каждого ТекСтрока Из РазмещениеЗаявки Цикл
		Если ТекСтрока.МестоРазмещения = Неопределено Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(ТекСтрока.МестоРазмещения) = Тип("ДокументСсылка.ден_ПланируемоеПоступлениеДенежныхСредств") Тогда
			ОстатокКРазмещению = ПолучитьНеразмещенныйОстаток(ТекСтрока.МестоРазмещения,КонецДня(ДатаРасхода),Ссылка,СтруктурноеПодразделение);
			Если ОстатокКРазмещению < ТекСтрока.СуммаПлатежа Тогда
				ТекстСообщения = 
					"Размещаемая сумма превышает неразмещенный остаток
					|по " + ТекСтрока.МестоРазмещения + ".
					|Возможный к использованию остаток: " + Формат(ОстатокКРазмещению,"ЧЦ=15; ЧДЦ=2") + " " + ВалютаДокумента + "
					|Резервируемая сумма = " + Формат(ТекСтрока.СуммаПлатежа,"ЧЦ=15; ЧДЦ=2") + " " + ВалютаДокумента;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка,,,Отказ);
				Возврат;
			КонецЕсли;
			Движение = РазмещениеЗаявокНаРасходованиеСредств.ДобавитьПриход();
			Движение.Период = КонецДня(Дата);
			Движение.ДокументПланирования = ТекСтрока.МестоРазмещения;
			Движение.ДокументРезервирования = Ссылка;
			Движение.Сумма = ТекСтрока.СуммаПлатежа;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// Возвращает свободный остаток денежных средств (текущий остаток за вычетом сумм, уже предназначенных
// к списанию, и зарезервированных).
//
// Параметры
//  БанковскийСчетКасса			:Банковский счет, касса - место списания денежных средств
//  Дата						:Дата –дата, на которую формируются остатки
//
// Возвращаемое значение:
//   Свободный остаток			:число - свободный остаток на дату по выбранному счету (кассе)
//
Функция ПолучитьСвободныйОстатокДС(БанковскийСчетКасса, Дата, МассивЗаявки = Неопределено, СтруктурноеПодразделение = Неопределено) Экспорт
	
	Если МассивЗаявки = Неопределено Тогда
		МассивЗаявки = Новый Массив;
	КонецЕсли;
	УсловиеСП = "";
	Если СтруктурноеПодразделение <> Неопределено Тогда
		УсловиеСП = " И СтруктурноеПодразделение = &СтруктурноеПодразделение";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваОстатки.СуммаОстаток 
	|		- ВЫБОР КОГДА НЕ((ДенежныеСредстваВРезервеОстатки.СуммаОстаток) ЕСТЬ NULL ) 
	|				ТОГДА ДенежныеСредстваВРезервеОстатки.СуммаОстаток 
	|				ИНАЧЕ 0 КОНЕЦ 
	|		- ВЫБОР КОГДА НЕ((ДенежныеСредстваКСписаниюОстатки.СуммаОстаток) ЕСТЬ NULL ) 
	|				ТОГДА ДенежныеСредстваКСписаниюОстатки.СуммаОстаток 
	|				ИНАЧЕ 0 КОНЕЦ 
	|		+ ВЫБОР КОГДА НЕ((ДенежныеСредстваКПолучениюОстатки.СуммаОстаток) ЕСТЬ NULL ) 
	|				ТОГДА ДенежныеСредстваКПолучениюОстатки.СуммаОстаток 
	|				ИНАЧЕ 0 КОНЕЦ КАК СвободныйОстаток
	|ИЗ
	|	РегистрНакопления.ден_ДенежныеСредства.Остатки(&Дата, БанковскийСчетКасса = &БанковскийСчетКасса "+УсловиеСП+") КАК ДенежныеСредстваОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ден_ДенежныеСредстваВРезерве.Остатки(&Дата, БанковскийСчетКасса = &БанковскийСчетКасса "+УсловиеСП+" И (НЕ ДокументРезервирования В (&МассивЗаявки))) КАК ДенежныеСредстваВРезервеОстатки
	|		ПО ДенежныеСредстваОстатки.БанковскийСчетКасса = ДенежныеСредстваВРезервеОстатки.БанковскийСчетКасса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ден_ДенежныеСредстваКСписанию.Остатки(&Дата, БанковскийСчетКасса = &БанковскийСчетКасса "+УсловиеСП+") КАК ДенежныеСредстваКСписаниюОстатки
	|		ПО ДенежныеСредстваОстатки.БанковскийСчетКасса = ДенежныеСредстваКСписаниюОстатки.БанковскийСчетКасса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ден_ДенежныеСредстваКПолучению.Остатки(&Дата, БанковскийСчетКасса = &БанковскийСчетКасса "+УсловиеСП+") КАК ДенежныеСредстваКПолучениюОстатки
	|		ПО ДенежныеСредстваОстатки.БанковскийСчетКасса = ДенежныеСредстваКПолучениюОстатки.БанковскийСчетКасса";
	
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("БанковскийСчетКасса", БанковскийСчетКасса);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("МассивЗаявки", МассивЗаявки);
	
	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() И (НЕ РезультатЗапроса.СвободныйОстаток = NULL) Тогда
		Возврат РезультатЗапроса.СвободныйОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьСвободныйОстатокДС() 

// Возвращает остаток денежных средств в планируемых поступлениях, еще не размещенных по другим заявкам
// к списанию, и зарезервированных).
//
// Параметры
//  ДокументПланирования			:Документ планируемого поступления денежных средств
//  Дата						:Дата –дата, на которую формируются остатки
//
// Возвращаемое значение:
//   Свободный остаток			:число - свободный остаток на дату выбранному документу
//
Функция ПолучитьНеразмещенныйОстаток(ДокументПланирования, Дата, ЗаявкаНаРасходованиеСредств, СтруктурноеПодразделение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланируемыеПоступленияДенежныхСредствОстатки.СуммаОстаток - ВЫБОР КОГДА НЕ((РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток) ЕСТЬ NULL ) ТОГДА РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток ИНАЧЕ 0 КОНЕЦ КАК СвободныйОстаток
	|ИЗ
	|	РегистрНакопления.ден_ПланируемыеПоступленияДенежныхСредств.Остатки(&Дата, ДокументПланирования = &ДокументПланирования И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ПланируемыеПоступленияДенежныхСредствОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ден_РазмещениеЗаявокНаРасходованиеСредств.Остатки(, НЕ(ДокументРезервирования = &ТекущаяЗаявка)) КАК РазмещениеЗаявокНаРасходованиеСредствОстатки
	|		ПО ПланируемыеПоступленияДенежныхСредствОстатки.ДокументПланирования = РазмещениеЗаявокНаРасходованиеСредствОстатки.ДокументПланирования";
	
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("ДокументПланирования", ДокументПланирования);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ТекущаяЗаявка", ЗаявкаНаРасходованиеСредств);
	
	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() И (НЕ РезультатЗапроса.СвободныйОстаток = NULL) Тогда
		Возврат РезультатЗапроса.СвободныйОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьНеразмещенныйОстаток()


Процедура СформироватьДвиженияЗаявкаНаРасходованиеСредствДенежныеСредстваВРезерве(Реквизиты, РазмещениеЗаявки, Движения, Отказ) Экспорт
	
	Если РазмещениеЗаявки.Количество() = 0 Или Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	Ссылка 		= Реквизиты.Ссылка;
	Дата		= Реквизиты.Дата;
	ДатаРасхода = Реквизиты.ДатаРасхода;
	ФормаОплаты = Реквизиты.ФормаОплаты;
	Организация = Реквизиты.Организация;
	ВалютаДокумента = Реквизиты.ВалютаДокумента;
	СтруктурноеПодразделение = Реквизиты.СтруктурноеПодразделение;
		
	ДенежныеСредстваВРезерве = Движения.ден_ДенежныеСредстваВРезерве;
	
	ДенежныеСредстваВРезерве.Записывать = Истина;
	
	Для Каждого ТекСтрока Из РазмещениеЗаявки Цикл
		Если ТекСтрока.МестоРазмещения = Неопределено Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(ТекСтрока.МестоРазмещения) <> Тип("ДокументСсылка.ден_ПланируемоеПоступлениеДенежныхСредств") Тогда
			// Проверяем остаток доступных денежных средств
			СвободныйОстаток = ПолучитьСвободныйОстатокДС(ТекСтрока.МестоРазмещения,КонецДня(ДатаРасхода),Ссылка,СтруктурноеПодразделение);
			Если СвободныйОстаток < ТекСтрока.СуммаПлатежа Тогда
				ТекстСообщения =
					"Резервируемая сумма превышает возможный к использованию остаток денежных средств
					|по " + ТекСтрока.МестоРазмещения.Наименование + ".
					|Возможный к использованию остаток: " + Формат(СвободныйОстаток,"ЧЦ=15; ЧДЦ=2") + " " + ВалютаДокумента + "
					|Резервируемая сумма = " + Формат(ТекСтрока.СуммаПлатежа,"ЧЦ=15; ЧДЦ=2") + " " + ВалютаДокумента;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка);
				Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЕстьДополнительноеПравоПользователя("РазрешитьПревышениеСвободногоОстаткаДС") Тогда
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			Движение = ДенежныеСредстваВРезерве.ДобавитьПриход();
			Движение.Период = Дата;
			Движение.БанковскийСчетКасса = ТекСтрока.МестоРазмещения;
			Движение.Организация = Организация;
			Движение.ДокументРезервирования = Ссылка;
			Движение.ВидДенежныхСредств = ФормаОплаты;
			Движение.Сумма = ТекСтрока.СуммаПлатежа;
			Движение.СтруктурноеПодразделение = СтруктурноеПодразделение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияЗаявкаНаРасходованиеСредствЗаявкиНаРасходование(Реквизиты, ПараметрыПроведения, Движения, Отказ) Экспорт
	
	РасшифровкаПлатежа = ПараметрыПроведения.ТаблицаРасшифровкаПлатежа;

	Если РасшифровкаПлатежа.Количество() = 0 Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Дата				= Реквизиты.Дата;
	Ссылка 				= Реквизиты.Ссылка;
	ВидОперации 		= Реквизиты.ВидОперации;
	ДатаРасхода			= Реквизиты.ДатаРасхода;
	Организация 		= Реквизиты.Организация;
	
	Контрагент			= Реквизиты.Контрагент;
	ВалютаДокумента 	= Реквизиты.ВалютаДокумента;
	УказыватьВедомости	= Реквизиты.УказыватьВедомости;
	
	СтруктурноеПодразделение = Реквизиты.СтруктурноеПодразделение;
	ВалютаУправленческогоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	ВалютаВзаиморасчетовПодотчетника = Реквизиты.ВалютаВзаиморасчетовПодотчетника;
	
	СтруктураГруппаВалют = Новый Структура;
	СтруктураГруппаВалют.Вставить("ВалютаУпрУчета", фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВалютаУправленческогоУчета, "Код"));
	СтруктураГруппаВалют.Вставить("ВалютаДокумента", фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВалютаДокумента, "Код"));
	
	СтруктураКурсыВалют = фин_ОбщегоНазначенияСервер.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,?(ДатаРасхода='00010101',Дата,КонецДня(ДатаРасхода)));
	
	ЕстьРасчетыСКонтрагентами 	= ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам 		= ЕстьРасчетыПоКредитам(ВидОперации);
	
	Движения.ден_ЗаявкиНаРасходованиеСредств.Записывать = Истина;
	ДвиженияЗаявки = Движения.ден_ЗаявкиНаРасходованиеСредств;

	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		// определение валюты взаиморасчетов
		Если ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
			ВалютаВзаиморасчетов = ВалютаВзаиморасчетовПодотчетника;
		ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			ВалютаВзаиморасчетов = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Платеж.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		Иначе
			ВалютаВзаиморасчетов = ВалютаДокумента;
		КонецЕсли;
		
		// отражение операции
		ДатаКурса = ?(ДатаРасхода = '00010101', Дата, КонецДня(ДатаРасхода));
		СтруктураКурсВзаиморасчетов = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДатаКурса);
		
		Если ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
			ДополнительнаяТаблицаПлатежа = ПараметрыПроведения.ТаблицаПеречислениеВПодотчет;
			Если ДополнительнаяТаблицаПлатежа = Неопределено Тогда
				Продолжить;	
			КонецЕсли;
			ДополнительнаяТаблицаПлатежа.Свернуть("СтатьяДвиженияДенежныхСредств,Проект", "СуммаПлатежа");
			ДобавитьДвиженияИзРасшифровки(Реквизиты, ДополнительнаяТаблицаПлатежа, Платеж, ДвиженияЗаявки, СтруктураКурсыВалют,ВалютаВзаиморасчетов);
			Прервать;
		ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП И УказыватьВедомости Тогда
			ДополнительнаяТаблицаПлатежа = ПараметрыПроведения.ТаблицаПеречислениеЗаработнойПлаты;
			Если ДополнительнаяТаблицаПлатежа = Неопределено Тогда
				Продолжить;	
			КонецЕсли;
			ДополнительнаяТаблицаПлатежа.Колонки.СуммаКВыплате.Имя = "СуммаПлатежа";
			ДополнительнаяТаблицаПлатежа.Колонки.Подразделение.Имя = "ЦФО";
			ДополнительнаяТаблицаПлатежа.Свернуть("СтатьяДвиженияДенежныхСредств,Проект,ЦФО","СуммаПлатежа");
			ДобавитьДвиженияИзРасшифровки(Реквизиты, ДополнительнаяТаблицаПлатежа, Платеж, ДвиженияЗаявки, СтруктураКурсыВалют,ВалютаВзаиморасчетов);
			Прервать;
		ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПоИсполнительнымЛистам И УказыватьВедомости Тогда
			ДополнительнаяТаблицаПлатежа = ПараметрыПроведения.ТаблицаПеречислениеПоИсполнительнымЛистам;
			Если ДополнительнаяТаблицаПлатежа = Неопределено Тогда
				Продолжить;	
			КонецЕсли;
			ДополнительнаяТаблицаПлатежа.Колонки.Подразделение.Имя = "ЦФО";
			ДополнительнаяТаблицаПлатежа.Свернуть("ЦФО", "СуммаПлатежа");
			ДобавитьДвиженияИзРасшифровки(Реквизиты, ДополнительнаяТаблицаПлатежа, Платеж, ДвиженияЗаявки, СтруктураКурсыВалют,ВалютаВзаиморасчетов);
			Прервать;
		ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПенсионныхВзносов И УказыватьВедомости Тогда
			ДополнительнаяТаблицаПлатежа = ПараметрыПроведения.ТаблицаПеречислениеПенсионныхВзносов;
			Если ДополнительнаяТаблицаПлатежа = Неопределено Тогда
				Продолжить;	
			КонецЕсли;
			ДополнительнаяТаблицаПлатежа.Колонки.СуммаКПеречислению.Имя = "СуммаПлатежа";
			ДополнительнаяТаблицаПлатежа.Колонки.Подразделение.Имя = "ЦФО";
			ДополнительнаяТаблицаПлатежа.Свернуть("ЦФО", "СуммаПлатежа");
			ДобавитьДвиженияИзРасшифровки(Реквизиты, ДополнительнаяТаблицаПлатежа,Платеж,ДвиженияЗаявки,СтруктураКурсыВалют,ВалютаВзаиморасчетов);
			Прервать;
		ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеСоциальныхОтчислений И УказыватьВедомости Тогда
			ДополнительнаяТаблицаПлатежа = ПараметрыПроведения.ТаблицаПеречислениеСоциальныхОтчислений;
			Если ДополнительнаяТаблицаПлатежа = Неопределено Тогда
				Продолжить;	
			КонецЕсли;
			ДополнительнаяТаблицаПлатежа.Колонки.СуммаКПеречислению.Имя = "СуммаПлатежа";
			ДополнительнаяТаблицаПлатежа.Колонки.Подразделение.Имя = "ЦФО";
			ДополнительнаяТаблицаПлатежа.Свернуть("ЦФО", "СуммаПлатежа");
			ДобавитьДвиженияИзРасшифровки(Реквизиты, ДополнительнаяТаблицаПлатежа, Платеж, ДвиженияЗаявки, СтруктураКурсыВалют,ВалютаВзаиморасчетов);
			Прервать;
		Иначе
			СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Платеж.СуммаВзаиморасчетов,
																   ВалютаВзаиморасчетов,, 
																   СтруктураКурсВзаиморасчетов.Курс,
																   СтруктураКурсыВалют.ВалютаУпрУчетаКурс, 
																   СтруктураКурсВзаиморасчетов.Кратность,
																   СтруктураКурсыВалют.ВалютаУпрУчетаКратность);

			Движение = ДвиженияЗаявки.ДобавитьПриход();
			
			ЗаполнитьЗначенияСвойств(Движение, Платеж);
			
			Движение.Период 				= ?(ДатаРасхода = '00010101', Дата, ДатаРасхода);
			Движение.СуммаУпр				= СуммаУпр;
			Движение.Сумма					= Платеж.СуммаПлатежа;
			Движение.ЗаявкаНаРасходование	= Ссылка;
			Движение.Организация			= Организация;
			Движение.Контрагент				= Контрагент;
			Движение.СтруктурноеПодразделение=СтруктурноеПодразделение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// ден_ВнутреннееПеремещениеНаличныхДенежныхСредств

Процедура СформироватьДвиженияВнутреннееПеремещениеНаличныхДенежныхСредств(Реквизиты, Движения, Отказ) Экспорт
	
	Дата 			= Реквизиты.Дата;
	Ссылка			= Реквизиты.Ссылка; 
	Касса 			= Реквизиты.Касса;
	КассаПолучатель = Реквизиты.КассаПолучатель;
	СуммаДокумента 	= Реквизиты.СуммаДокумента;
	ВалютаДокумента	= Реквизиты.ВалютаДокумента;
	
	СтатьяДвиженияДенежныхСредствПолучатель 	= Реквизиты.СтатьяДвиженияДенежныхСредствПолучатель;
	СтатьяДвиженияДенежныхСредствОтправитель 	= Реквизиты.СтатьяДвиженияДенежныхСредствОтправитель;
	СтруктурноеПодразделениеПолучатель 			= Реквизиты.СтруктурноеПодразделениеПолучатель;
	СтруктурноеПодразделениеОтправитель 		= Реквизиты.СтруктурноеПодразделениеОтправитель;
	
	// Движения по регистру "Типовой"
	Если Реквизиты.ОтражатьВБухгалтерскомУчете Тогда
		ПроводкиБУ = Движения.Типовой;
		ПроводкиБУ.Записывать = Истина;
		
		ВалютаРег          	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
		ДанныеОВалюте      	= фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ВалютаРег, Дата);
		КурсДокумента      	= КурсДокумента(Реквизиты, ВалютаРег);
		КратностьДокумента 	= КратностьДокумента(Реквизиты, ВалютаРег);
		
		СчетДт = Реквизиты.СчетКассаПолучатель;
		СчетКт = Реквизиты.СчетКассаОтправитель;
		
		Проводка = ПроводкиБУ.Добавить();			
		Проводка.Период      = Дата;
		Проводка.Организация = Реквизиты.ОрганизацияПолучатель;
		
		Проводка.СчетДт      = СчетДт;
		Проводка.СубконтоДт.ДенежныеСредства = КассаПолучатель;
		Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредствПолучатель;
		
		Проводка.СчетКт     = СчетКт;
		Проводка.СубконтоКт.ДенежныеСредства = Касса;
		Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредствОтправитель;
		Проводка.Содержание = "Внутреннее перемещение ДС";
		Проводка.Сумма = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента, 
			ВалютаРег, КурсДокумента, ДанныеОВалюте.Курс, КратностьДокумента, ДанныеОВалюте.Кратность);
		Если СчетДт.Валютный Тогда
			Проводка.ВалютаДт        = ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СуммаДокумента;
		КонецЕсли;			
		
		Если СчетКт.Валютный Тогда
			Проводка.ВалютаКт        = ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СуммаДокумента;
		КонецЕсли;
		
		Проводка.СтруктурноеПодразделениеДт = СтруктурноеПодразделениеПолучатель;
		Проводка.СтруктурноеПодразделениеКт = СтруктурноеПодразделениеОтправитель;
		
	КонецЕсли;
	
	Если Реквизиты.ОтражатьВУправленческомУчете Тогда // отражать в управленческом учете
		
		СтруктураГруппаВалют = Новый Структура;
		СтруктураГруппаВалют.Вставить("ВалютаУпрУчета", фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета").Код);
		СтруктураГруппаВалют.Вставить("ВалютаДокумента", фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВалютаДокумента, "Код"));
		СтруктураКурсыВалют = фин_ОбщегоНазначенияСервер.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют, Дата);
		
		СуммаУпр = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СуммаДокумента, 
			СтруктураКурсыВалют.ВалютаДокумента, СтруктураКурсыВалют.ВалютаУпрУчета, 
			СтруктураКурсыВалют.ВалютаДокументаКурс, СтруктураКурсыВалют.ВалютаУпрУчетаКурс, 
			СтруктураКурсыВалют.ВалютаДокументаКратность, СтруктураКурсыВалют.ВалютаУпрУчетаКратность);

		// По регистру "Денежные средства к получению"
		ДенежныеСредстваКПолучению = Движения.ден_ДенежныеСредстваКПолучению;
		ДенежныеСредстваКПолучению.Записывать = Истина;

		Движение = ДенежныеСредстваКПолучению.ДобавитьПриход();
		Движение.Период          	 = Дата;
		Движение.БанковскийСчетКасса = КассаПолучатель;
		Движение.Организация 		 = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(КассаПолучатель, "Владелец");
		Движение.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Наличные;
		Движение.Сумма               = СуммаДокумента;
		Движение.СуммаУпр            = СуммаУпр;
		Движение.ДокументПолучения   = Ссылка;
		Движение.СтруктурноеПодразделение = СтруктурноеПодразделениеПолучатель;
		Движение.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредствПолучатель;
		
		// По регистру "Денежные средства к списанию"
		ДенежныеСредстваКСписанию = Движения.ден_ДенежныеСредстваКСписанию;
		ДенежныеСредстваКСписанию.Записывать = Истина;

		Движение = ДенежныеСредстваКСписанию.ДобавитьПриход();
		Движение.Период          	= Дата;
		Движение.БанковскийСчетКасса = Касса;
		Движение.Организация 		 = Касса.Владелец;
		Движение.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Наличные;
		Движение.Сумма               = СуммаДокумента;
		Движение.СуммаУпр            = СуммаУпр;
		Движение.ДокументСписания    = Ссылка;
		Движение.СтруктурноеПодразделение = СтруктурноеПодразделениеОтправитель;
		Движение.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредствОтправитель;
		
		Если Реквизиты.Оплачено Тогда
			
			// По регистру "Денежные средства"
			ДенежныеСредства = Движения.ден_ДенежныеСредства;
			ДенежныеСредства.Записывать = Истина;

			Движение = ДенежныеСредства.Добавить();
			Движение.ВидДвижения         	= ВидДвиженияНакопления.Расход;
			Движение.Период              	= Дата;
			Движение.БанковскийСчетКасса 	= Касса;
			Движение.Организация 			= Касса.Владелец;
			Движение.ВидДенежныхСредств  	= Перечисления.ден_ВидыДенежныхСредств.Наличные;
			Движение.Сумма               	= СуммаДокумента;
			Движение.СуммаУпр    		 	= СуммаУпр;
			Движение.Активность		   	 	= Истина;
			Движение.СтруктурноеПодразделение = СтруктурноеПодразделениеОтправитель;
			
			Движение = ДенежныеСредства.Добавить();
			Движение.ВидДвижения         	= ВидДвиженияНакопления.Приход;
			Движение.Период              	= Дата;
			Движение.БанковскийСчетКасса 	= КассаПолучатель;
			Движение.Организация 		 	= КассаПолучатель.Владелец;
			Движение.ВидДенежныхСредств  	= Перечисления.ден_ВидыДенежныхСредств.Наличные;
			Движение.Сумма               	= СуммаДокумента;
			Движение.СуммаУпр    		 	= СуммаУпр;
			Движение.Активность 			= Истина;
			Движение.СтруктурноеПодразделение = СтруктурноеПодразделениеПолучатель;

			// По регистру "Денежные средства к получению"
			ДенежныеСредстваКПолучению = Движения.ден_ДенежныеСредстваКПолучению;
			ДенежныеСредстваКПолучению.Записывать = Истина;

			Движение = ДенежныеСредстваКПолучению.ДобавитьРасход();
			Движение.Период          		= Дата;
			Движение.БанковскийСчетКасса 	= КассаПолучатель;
			Движение.Организация 		   	= КассаПолучатель.Владелец;
			Движение.ВидДенежныхСредств  	= Перечисления.ден_ВидыДенежныхСредств.Наличные;
			Движение.Сумма               	= СуммаДокумента;
			Движение.СуммаУпр            	= СуммаУпр;
			Движение.ДокументПолучения   	= Ссылка;
			Движение.СтруктурноеПодразделение = СтруктурноеПодразделениеПолучатель;
			Движение.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредствПолучатель;
			
			// По регистру "Денежные средства к списанию"
			ДенежныеСредстваКСписанию = Движения.ден_ДенежныеСредстваКСписанию;
			ДенежныеСредстваКСписанию.Записывать = Истина;

			Движение = ДенежныеСредстваКСписанию.ДобавитьРасход();
			Движение.Период          		= Дата;
			Движение.БанковскийСчетКасса 	= Касса;
			Движение.Организация 		   	= Касса.Владелец;
			Движение.ВидДенежныхСредств  	= Перечисления.ден_ВидыДенежныхСредств.Наличные;
			Движение.Сумма               	= СуммаДокумента;
			Движение.СуммаУпр            	= СуммаУпр;
			Движение.ДокументСписания    	= Ссылка;
			Движение.СтруктурноеПодразделение = СтруктурноеПодразделениеОтправитель;
			Движение.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредствОтправитель;
			
			// По регистру "Движения денежных средств"
			ДвиженияДенежныхСредств = Движения.ден_ДвиженияДенежныхСредств;
			ДвиженияДенежныхСредств.Записывать = Истина;
			
			Движение = ДвиженияДенежныхСредств.Добавить();
			Движение.Период            		= КонецДня(Дата);
			Движение.ВидДенежныхСредств 	= Перечисления.ден_ВидыДенежныхСредств.Наличные;
			Движение.ПриходРасход 			= Перечисления.ден_ВидыДвиженийПриходРасход.Расход;
			Движение.БанковскийСчетКасса 	= Касса;
			Движение.Организация 			= Касса.Владелец;
			Движение.ДокументДвижения 		= Ссылка;
			Движение.Сумма 					= СуммаДокумента;
			Движение.СуммаУпр 				= СуммаУпр;
			Движение.Подразделение 			= Реквизиты.ЦФООтправитель;
			Движение.СтруктурноеПодразделение = СтруктурноеПодразделениеОтправитель;
			Движение.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредствОтправитель;
			
			Движение = ДвиженияДенежныхСредств.Добавить();
			Движение.Период            		= КонецДня(Дата);
			Движение.ВидДенежныхСредств		= Перечисления.ден_ВидыДенежныхСредств.Наличные;
			Движение.ПриходРасход			= Перечисления.ден_ВидыДвиженийПриходРасход.Приход;
			Движение.БанковскийСчетКасса	= КассаПолучатель;
			Движение.Организация 			= КассаПолучатель.Владелец;
			Движение.ДокументДвижения		= Ссылка;
			Движение.Сумма					= СуммаДокумента;
			Движение.СуммаУпр				= СуммаУпр;
			Движение.Подразделение 			= Реквизиты.ЦФОПолучатель;
			Движение.СтруктурноеПодразделение = СтруктурноеПодразделениеПолучатель;
			Движение.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредствПолучатель;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Определяет курс документа, который равен либо курсу документа (если в документе он существует),
// либо курсу взаиморасчетов, либо 1.
//
// Параметры: 
//  ДокументОбъект                 - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - курс документа.
//
Функция КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();

	// Если валюта документа совпадает с валютой регл. учета, то курс 1.
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
		
		Если ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		
			// Если есть реквизит КурсДокумента - его и вернем
			Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КурсДокумента;
			КонецЕсли;

			// Если нет КурсДокумента и валюта документа не совпадает с валютой регл. учета, 
			// то такой документ может быть выписан только в валюте взаиморасчетов,
			// если есть реквизит КурсВзаиморасчетов - его и вернем.
			Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КурсВзаиморасчетов;
			КонецЕсли;

			// Если нет КурсВзаиморасчетов и валюта документа не совпадает с валютой регл. учета, 
			// то КурсВзаиморасчетов долежн быть в табличной части документа или может вообще отсутсвовать.
			// Тогда возьмем курс из справочника на дату документа.
			Возврат фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,ДокументОбъект.Дата).Курс;

		КонецЕсли;
		
	КонецЕсли;

	Возврат 1;

КонецФункции // КурсДокумента()

// Определяет кратность документа, которая равен либо кратности документа (если в документе она существует),
// либо кратности взаиморасчетов, либо 1.
//
// Параметры: 
//  ДокументОбъект - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - кратность валюты в документе.
//
Функция КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда

		// Если валюта документа совпадает с валютой регл. учета, то кратность 1.
		Если ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда

			// Если есть реквизит КратностьДокумента - его и вернем
			Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КратностьДокумента;
			КонецЕсли;

			// Если нет КратностьДокумента и валюта документа не совпадает с валютой регл. учета, 
			// то такой документ может быть выписан только в валюте взаиморасчетов,
			// если есть реквизит КратностьВзаиморасчетов - его и вернем.
			Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КратностьВзаиморасчетов;
			КонецЕсли;

			// Если нет КратностьВзаиморасчетов и валюта документа не совпадает с валютой регл. учета, 
			// то КратностьВзаиморасчетов должна быть в табличной части документа или может вообще отсутсвовать.
			// Тогда возьмем Кратность из справочника на дату документа.
			Возврат фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,ДокументОбъект.Дата).Кратность;

		КонецЕсли;
	
	КонецЕсли;

	Возврат 1;

КонецФункции // КратностьДокумента()

// ден_ДенежныйЧек

Процедура СформироватьДвиженияДенежныйЧек(Реквизиты, Движения, Отказ) Экспорт

	ВалютаУправленческогоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	ВалютаДокумента = Реквизиты.ВалютаДокумента;
	
	Ссылка 			= Реквизиты.Ссылка;
	Дата 			= Реквизиты.Дата;
	ДатаОплаты 		= Реквизиты.ДатаОплаты;
	Оплачено 		= Реквизиты.Оплачено;	
	СуммаДокумента 	= Реквизиты.СуммаДокумента;
	Организация 	= Реквизиты.Организация;
	СчетОрганизации = Реквизиты.СчетОрганизации;
	
	СтруктурноеПодразделениеОтправитель = Реквизиты.СтруктурноеПодразделениеОтправитель;
	СтатьяДвиженияДенежныхСредствОтправитель = Реквизиты.СтатьяДвиженияДенежныхСредствОтправитель;
	
	СтруктураГруппаВалют = Новый Структура;
	СтруктураГруппаВалют.Вставить("ВалютаУпрУчета", фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВалютаУправленческогоУчета, "Код"));
	СтруктураГруппаВалют.Вставить("ВалютаДокумента", фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВалютаДокумента, "Код"));
	
	ДатаДвижений = ?(Оплачено И ЗначениеЗаполнено(ДатаОплаты), КонецДня(ДатаОплаты), Дата);
	СтруктураКурсыВалют  = фин_ОбщегоНазначенияСервер.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют, ДатаДвижений);
	
	СуммаУпр = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СуммаДокумента, 
																		 СтруктураКурсыВалют.ВалютаДокумента,
																		 СтруктураКурсыВалют.ВалютаУпрУчета, 
																		 СтруктураКурсыВалют.ВалютаДокументаКурс,
																		 СтруктураКурсыВалют.ВалютаУпрУчетаКурс, 
																		 СтруктураКурсыВалют.ВалютаДокументаКратность,
																		 СтруктураКурсыВалют.ВалютаУпрУчетаКратность);
																		 
	Если Оплачено Тогда
		// По регистру "Денежные средства"
		ДенежныеСредства = Движения.ден_ДенежныеСредства;	
		ДенежныеСредства.Записывать = Истина;
		
		Движение = ДенежныеСредства.ДобавитьРасход();
		Движение.Период           				= ДатаДвижений; 
		Движение.БанковскийСчетКасса			= СчетОрганизации;
		Движение.Организация 		   			= Организация;
		Движение.ВидДенежныхСредств 			= Перечисления.ден_ВидыДенежныхСредств.Безналичные;
		Движение.Сумма                			= СуммаДокумента;
		Движение.СуммаУпр						= СуммаУпр;
		Движение.СтруктурноеПодразделение 		= СтруктурноеПодразделениеОтправитель;
				
		// По регистру "Денежные средства к списанию"
		ДенежныеСредстваКСписанию = Движения.ден_ДенежныеСредстваКСписанию;
		ДенежныеСредстваКСписанию.Записывать = Истина;

		Движение = ДенежныеСредстваКСписанию.ДобавитьРасход();
		Движение.Период            				= ДатаДвижений;
		Движение.БанковскийСчетКасса           	= СчетОрганизации;
		Движение.Организация 		   			= Организация;
		Движение.ВидДенежныхСредств 			= Перечисления.ден_ВидыДенежныхСредств.Безналичные;
		Движение.Сумма                			= СуммаДокумента;
		Движение.СуммаУпр                		= СуммаУпр;
		Движение.ДокументСписания               = Ссылка;
		Движение.СтатьяДвиженияДенежныхСредств	= СтатьяДвиженияДенежныхСредствОтправитель;
		Движение.СтруктурноеПодразделение		= СтруктурноеПодразделениеОтправитель;
		
		// По регистру "Движения денежных средств"
		ДвиженияДенежныхСредств = Движения.ден_ДвиженияДенежныхСредств;
		ДвиженияДенежныхСредств.Записывать = Истина;
		
		Движение = ДвиженияДенежныхСредств.Добавить();
		Движение.Период            				= ДатаДвижений;
		Движение.ВидДенежныхСредств				= Перечисления.ден_ВидыДенежныхСредств.Безналичные;
		Движение.ПриходРасход					= Перечисления.ден_ВидыДвиженийПриходРасход.Расход;
		Движение.БанковскийСчетКасса			= СчетОрганизации;
		Движение.Организация					= Организация;
		Движение.ДокументДвижения				= Ссылка;
		Движение.СтатьяДвиженияДенежныхСредств 	= СтатьяДвиженияДенежныхСредствОтправитель;
		Движение.Подразделение 					= Реквизиты.ЦФО;
		Движение.СтруктурноеПодразделение		= СтруктурноеПодразделениеОтправитель;
		Движение.Сумма							= СуммаДокумента;
		Движение.СуммаУпр						= СуммаУпр;
	КонецЕсли;	
	
	// По регистру "Денежные средства к списанию"
	ДенежныеСредстваКСписанию = Движения.ден_ДенежныеСредстваКСписанию;
	ДенежныеСредстваКСписанию.Записывать = Истина;
	
	Движение = ДенежныеСредстваКСписанию.ДобавитьПриход();
	Движение.Период            				= ?(Оплачено, Мин(ДатаДвижений,Дата), Дата);
	Движение.БанковскийСчетКасса           	= СчетОрганизации;
	Движение.Организация 		   			= Организация;
	Движение.ВидДенежныхСредств 			= Перечисления.ден_ВидыДенежныхСредств.Безналичные;
	Движение.Сумма                			= СуммаДокумента;
	Движение.СуммаУпр                		= СуммаУпр;
	Движение.ДокументСписания               = Ссылка;
	Движение.СтатьяДвиженияДенежныхСредств	= СтатьяДвиженияДенежныхСредствОтправитель;
	Движение.СтруктурноеПодразделение		= СтруктурноеПодразделениеОтправитель;
	
	// По регистру "Денежные средства к получению"
	ДенежныеСредстваКПолучению = Движения.ден_ДенежныеСредстваКПолучению;
	ДенежныеСредстваКПолучению.Записывать = Истина;
	
	Движение = ДенежныеСредстваКПолучению.ДобавитьПриход();
	Движение.Период            				= Дата;
	Движение.БанковскийСчетКасса           	= Реквизиты.Касса;
	Движение.Организация 		   			= Организация;
	Движение.ВидДенежныхСредств 			= Перечисления.ден_ВидыДенежныхСредств.Наличные;
	Движение.Сумма                			= СуммаДокумента;
	Движение.СуммаУпр    					= СуммаУпр;
	Движение.ДокументПолучения	            = Ссылка;
	Движение.СтатьяДвиженияДенежныхСредств	= Реквизиты.СтатьяДвиженияДенежныхСредствПолучатель;
	Движение.СтруктурноеПодразделение		= Реквизиты.СтруктурноеПодразделениеПолучатель;

КонецПроцедуры

// ден_ОбъявлениеНаВзносНаличными

Процедура СформироватьДвиженияОбъявлениеНаВзносНаличными(Реквизиты, Движения, Отказ) Экспорт

	ВалютаУправленческогоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	ВалютаДокумента = Реквизиты.ВалютаДокумента;
	
	Ссылка 			= Реквизиты.Ссылка;
	Дата 			= Реквизиты.Дата;
	ДатаОплаты 		= Реквизиты.ДатаОплаты;
	Оплачено 		= Реквизиты.Оплачено;	
	СуммаДокумента 	= Реквизиты.СуммаДокумента;
	Организация 	= Реквизиты.Организация;
	СчетОрганизации = Реквизиты.СчетОрганизации;
	
	СтруктурноеПодразделениеПолучатель = Реквизиты.СтруктурноеПодразделениеПолучатель;
	СтатьяДвиженияДенежныхСредствПолучатель = Реквизиты.СтатьяДвиженияДенежныхСредствПолучатель;
	
	СтруктураГруппаВалют = Новый Структура;
	СтруктураГруппаВалют.Вставить("ВалютаУпрУчета", фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВалютаУправленческогоУчета, "Код"));
	СтруктураГруппаВалют.Вставить("ВалютаДокумента", фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВалютаДокумента, "Код"));
	
	ДатаДвижений = ?(Оплачено И ЗначениеЗаполнено(ДатаОплаты), КонецДня(ДатаОплаты), Дата);
	СтруктураКурсыВалют  = фин_ОбщегоНазначенияСервер.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют, ДатаДвижений);
	
	СуммаУпр = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СуммаДокумента, 
																		 СтруктураКурсыВалют.ВалютаДокумента,
																		 СтруктураКурсыВалют.ВалютаУпрУчета, 
																		 СтруктураКурсыВалют.ВалютаДокументаКурс,
																		 СтруктураКурсыВалют.ВалютаУпрУчетаКурс, 
																		 СтруктураКурсыВалют.ВалютаДокументаКратность,
																		 СтруктураКурсыВалют.ВалютаУпрУчетаКратность);
	
	Если Оплачено Тогда
		
		// По регистру "Денежные средства"
		ДенежныеСредства = Движения.ден_ДенежныеСредства;
		ДенежныеСредства.Записывать = Истина;

		Движение = ДенежныеСредства.ДобавитьПриход();
		Движение.Период            			= ДатаДвижений;
		Движение.БанковскийСчетКасса        = СчетОрганизации;
		Движение.Организация           		= Организация;
		Движение.ВидДенежныхСредств 		= Перечисления.ден_ВидыДенежныхСредств.Безналичные;
		Движение.Сумма                		= СуммаДокумента;
		Движение.СуммаУпр    				= СуммаУпр;
		Движение.СтруктурноеПодразделение	= Реквизиты.СтруктурноеПодразделениеПолучатель;
		
		// По регистру "Денежные средства к получению"
		ДенежныеСредстваКПолучению = Движения.ден_ДенежныеСредстваКПолучению;
		ДенежныеСредстваКПолучению.Записывать = Истина;

		Движение = ДенежныеСредстваКПолучению.ДобавитьРасход();
		Движение.Период            				= ДатаДвижений;
		Движение.БанковскийСчетКасса           	= СчетОрганизации;
		Движение.Организация           			= Организация;
		Движение.ВидДенежныхСредств 			= Перечисления.ден_ВидыДенежныхСредств.Безналичные;
		Движение.Сумма                			= СуммаДокумента;
		Движение.СуммаУпр    					= СуммаУпр;
		Движение.СтруктурноеПодразделение		= СтруктурноеПодразделениеПолучатель;
		Движение.СтатьяДвиженияДенежныхСредств	= СтатьяДвиженияДенежныхСредствПолучатель;
		Движение.ДокументПолучения              = Ссылка;
		
		// По регистру "Движения денежных средств"
		ДвиженияДенежныхСредств = Движения.ден_ДвиженияДенежныхСредств;
		ДвиженияДенежныхСредств.Записывать = Истина;
		
		Движение = ДвиженияДенежныхСредств.Добавить();
		Движение.Период            				= ДатаДвижений; 
		Движение.ВидДенежныхСредств 			= Перечисления.ден_ВидыДенежныхСредств.Безналичные;
		Движение.ПриходРасход 					= Перечисления.ден_ВидыДвиженийПриходРасход.Приход;
		Движение.БанковскийСчетКасса 			= СчетОрганизации;
		Движение.Организация 					= Организация;
		Движение.ДокументДвижения 				= Ссылка;
		Движение.СтатьяДвиженияДенежныхСредств 	= СтатьяДвиженияДенежныхСредствПолучатель;
		Движение.Подразделение 					= Реквизиты.ЦФО;
		Движение.СтруктурноеПодразделение		= СтруктурноеПодразделениеПолучатель;
		Движение.Сумма							= СуммаДокумента;
		Движение.СуммаУпр						= СуммаУпр;
		
	КонецЕсли;	
	
	// По регистру "Денежные средства к списанию"
	ДенежныеСредстваКСписанию = Движения.ден_ДенежныеСредстваКСписанию;
	ДенежныеСредстваКСписанию.Записывать = Истина;
	
	Движение = ДенежныеСредстваКСписанию.ДобавитьПриход();
	Движение.Период            				= Дата;
	Движение.БанковскийСчетКасса           	= Реквизиты.Касса;
	Движение.Организация           			= Организация;
	Движение.ВидДенежныхСредств 			= Перечисления.ден_ВидыДенежныхСредств.Наличные;
	Движение.Сумма                			= СуммаДокумента;
	Движение.СуммаУпр                		= СуммаУпр;
	Движение.ДокументСписания               = Ссылка;
	Движение.СтатьяДвиженияДенежныхСредств	= Реквизиты.СтатьяДвиженияДенежныхСредствОтправитель;
	Движение.СтруктурноеПодразделение		= Реквизиты.СтруктурноеПодразделениеОтправитель;
	
	// По регистру "Денежные средства к получению"
	ДенежныеСредстваКПолучению = Движения.ден_ДенежныеСредстваКПолучению;
	ДенежныеСредстваКПолучению.Записывать = Истина;
	
	Движение = ДенежныеСредстваКПолучению.ДобавитьПриход();
	Движение.Период            				= ?(Оплачено, Мин(ДатаДвижений,Дата), Дата);
	Движение.БанковскийСчетКасса           	= СчетОрганизации;
	Движение.Организация           			= Организация;
	Движение.ВидДенежныхСредств 			= Перечисления.ден_ВидыДенежныхСредств.Безналичные;
	Движение.Сумма                			= СуммаДокумента;
	Движение.СуммаУпр    					= СуммаУпр;
	Движение.СтруктурноеПодразделение		= СтруктурноеПодразделениеПолучатель;
	Движение.ДокументПолучения	            = Ссылка;
	Движение.СтатьяДвиженияДенежныхСредств	= СтатьяДвиженияДенежныхСредствПолучатель;

КонецПроцедуры

// ден_ПереоценкаВалютныхСредств

Процедура СформироватьДвиженияПереоценкаВалютныхСредствДенежныеСредства(Реквизиты, ТаблицаДенежныеСредства, Движения, Отказ) Экспорт
	
	ДенежныеСредства = Движения.ден_ДенежныеСредства;
	ДенежныеСредства.Записывать = Истина;
	
	ПериодРегистрации = КонецМесяца(Реквизиты.ПериодРегистрации);

	Для каждого СтрокаТаблицы Из ТаблицаДенежныеСредства Цикл
		Движение = ДенежныеСредства.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		Движение.Период = ПериодРегистрации;
	КонецЦикла; 
	
КонецПроцедуры

Процедура СформироватьДвиженияПереоценкаВалютныхСредствДенежныеСредстваКПолучению(Реквизиты, ТаблицаДенежныеСредстваКПолучению, Движения, Отказ) Экспорт

	ДенежныеСредстваКПолучению = Движения.ден_ДенежныеСредстваКПолучению;
	ДенежныеСредстваКПолучению.Записывать = Истина;
	
	ПериодРегистрации = КонецМесяца(Реквизиты.ПериодРегистрации);
	
	Для каждого СтрокаТаблицы Из ТаблицаДенежныеСредстваКПолучению Цикл
		Движение = ДенежныеСредстваКПолучению.ДобавитьПриход();	
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
	    Движение.Период = ПериодРегистрации;
	КонецЦикла; 
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура получает структур курсов валюты документа и валюты управленческого учета
// на дату документа.
//
Функция СформироватьСтруктуруКурсыВалютУпр(Знач ВалютаДокумента, Знач Дата, Знач ДатаПоступления)

	СтруктураГруппаВалют = Новый Структура;                      
	СтруктураГруппаВалют.Вставить("ВалютаУпрУчета",  фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета").Код);
	СтруктураГруппаВалют.Вставить("ВалютаДокумента", фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВалютаДокумента, "Код"));

	ДатаКурса = ?(ДатаПоступления = '00010101', Дата, ДатаПоступления);
	СтруктураКурсыВалют = фин_ОбщегоНазначенияСервер.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют, ДатаКурса);

	Возврат СтруктураКурсыВалют;

КонецФункции

Функция СкомпоноватьНастройки(СхемаКомпоновки)

	ИсточникНастроек    = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	// Добавим выбранные поля
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		
		Если НЕ Элемент.Папка Тогда
			ВыбранноеПоле               = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле          = Элемент.Поле;
			ВыбранноеПоле.Использование = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавим группировку
	ГруппировкаНастроек = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Поле                = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	Возврат КомпоновщикНастроек.Настройки;

КонецФункции

Процедура СкопироватьЭлементы(ПриемникЗначения, ИсточникЗначения, ПроверятьДоступность = Ложь, ОчищатьПриемник = Истина)
	
	Если ТипЗнч(ИсточникЗначения) = Тип("УсловноеОформлениеКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ОформляемыеПоляКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ЗначенияПараметровДанныхКомпоновкиДанных") Тогда
		СоздаватьПоТипу = Ложь;
	Иначе
		СоздаватьПоТипу = Истина;
	КонецЕсли;
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	Если ОчищатьПриемник Тогда
		ПриемникЭлементов.Очистить();
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		Если ТипЗнч(ЭлементИсточник) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			// Элементы порядка добавляем в начало
			Индекс = ИсточникЭлементов.Индекс(ЭлементИсточник);
			ЭлементПриемник = ПриемникЭлементов.Вставить(Индекс, ТипЗнч(ЭлементИсточник));
		Иначе
			Если СоздаватьПоТипу Тогда
				ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
			Иначе
				ЭлементПриемник = ПриемникЭлементов.Добавить();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		// В некоторых коллекциях необходимо заполнить другие коллекции
		Если ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Поля, ЭлементИсточник.Поля);
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
			ЗаполнитьЭлементы(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление); 
		ИначеЕсли ТипЗнч(ИсточникЭлементов)	= Тип("КоллекцияВариантовПользовательскогоПоляВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
		КонецЕсли;
		
		// В некоторых элементах коллекции необходимо заполнить другие коллекции
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
			ЭлементПриемник.УстановитьВыражениеДетальныхЗаписей (ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей());
			ЭлементПриемник.УстановитьВыражениеИтоговыхЗаписей(ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
			ЭлементПриемник.УстановитьПредставлениеВыраженияДетальныхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей ());
			ЭлементПриемник.УстановитьПредставлениеВыраженияИтоговыхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей ());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЭлементы(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено)
	
	Если ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		КоллекцияЗначений = ИсточникЗначения;
	Иначе
		КоллекцияЗначений = ИсточникЗначения.Элементы;
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
		Если ПервыйУровень = Неопределено Тогда
			ЭлементПриемник = ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		Иначе
			ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		КонецЕсли;
		Если ЭлементПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
			Если ЭлементИсточник.ЗначенияВложенныхПараметров.Количество() <> 0 Тогда
				ЗаполнитьЭлементы(ЭлементПриемник.ЗначенияВложенныхПараметров, ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДвиженияИзРасшифровки(Реквизиты, ТаблицаРасшифровки, СтрокаОсновнойРасшифровки, ДвиженияЗаявки, СтруктураКурсыВалют,ВалютаВзаиморасчетов)
	ВалютаУпр = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	КурсВзаиморасчетов = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ВалютаВзаиморасчетов,Реквизиты.Дата);
	Для Каждого СтрокаРасшифровка Из ТаблицаРасшифровки Цикл
		СуммаУпр = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СтрокаРасшифровка.СуммаПлатежа,
																			 Реквизиты.ВалютаДокумента,ВалютаУпр, 
																			 Реквизиты.КурсДокумента,
																			 СтруктураКурсыВалют.ВалютаУпрУчетаКурс, 
																			 Реквизиты.КратностьДокумента,
																			 СтруктураКурсыВалют.ВалютаУпрУчетаКратность);

		Движение = ДвиженияЗаявки.Добавить();

		ЗаполнитьЗначенияСвойств(Движение, СтрокаОсновнойРасшифровки);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаРасшифровка);

		Движение.Период 					= ?(Реквизиты.ДатаРасхода='00010101', Реквизиты.Дата, Реквизиты.ДатаРасхода);
		Движение.СуммаУпр					= СуммаУпр;
		Движение.Сумма						= СтрокаРасшифровка.СуммаПлатежа;
		Если Реквизиты.ВалютаДокумента =  ВалютаВзаиморасчетов Тогда
			Движение.СуммаВзаиморасчетов =  Движение.Сумма;
		Иначе
			Движение.СуммаВзаиморасчетов  = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СтрокаРасшифровка.СуммаПлатежа,
																			 Реквизиты.ВалютаДокумента,ВалютаВзаиморасчетов, 
																			 Реквизиты.КурсДокумента,
																			 КурсВзаиморасчетов.Курс, 
																			 Реквизиты.КратностьДокумента,
																			 КурсВзаиморасчетов.Кратность);
		КонецЕсли;
		Движение.ЗаявкаНаРасходование		= Реквизиты.Ссылка;
		Движение.Организация				= Реквизиты.Организация;
		Движение.Контрагент					= Реквизиты.Контрагент;
		Движение.СтруктурноеПодразделение	= Реквизиты.СтруктурноеПодразделение;
	КонецЦикла;
		
КонецПроцедуры

Процедура ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, ДатаДокумента, 
	                                        СуммаДокумента, ВалютаДенежныхСредств, ПересчитатьСуммаДокумента = Ложь) Экспорт

	// Поменяем валюту до вопроса о пересчете, чтобы было видно, что она действительно поменялась.
	СтараяВалюта    = ВалютаДокумента; 
	СтарыйКурс      = КурсДокумента;
	СтараяКратность = КратностьДокумента;
	ВалютаДокумента = ВалютаДенежныхСредств; // должны строго совпадать

	СтруктураКурсаВалютаДокумента = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;

	Если ВалютаДокумента <> СтараяВалюта
	   И СуммаДокумента > 0 И ПересчитатьСуммаДокумента Тогда

		// Надо предложить пересчитать сумму.
		СуммаДокумента = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтараяВалюта, ВалютаДокумента, СтарыйКурс,
								    КурсДокумента,СтараяКратность,КратностьДокумента);

	КонецЕсли;

КонецПроцедуры

// Заполняет реквизиты расчетного документа значениями по умолчанию
//
Процедура ЗаполнитьРеквизитыРасчетногоДокумента(ДокументОбъект, РасшифровкаПлатежа) Экспорт

	Перем ТипЦен;

	ТекПользователь = Пользователи.ТекущийПользователь();
	ВалютаРегламентированногоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	мОтображатьСтруктурныеПодразделения = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаПлатеж = РасшифровкаПлатежа[0];
	КонецЕсли;

	//заполнение даты
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
	  	ДокументОбъект.Дата = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	// Устанавливаем булевы переменные. Заполнеям их только в том случае, 
	// если не указан вид операции (новый объект)
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента) И НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации) Тогда

		Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("АвтоРезервирование", МетаданныеДокумента) Тогда
			ДокументОбъект.АвтоРезервирование = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "АвтоРезервирование");
		КонецЕсли;

		Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("АвтоРазмещение", МетаданныеДокумента) Тогда
			ДокументОбъект.АвтоРазмещение = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "АвтоРазмещение");
		КонецЕсли;

	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
		ДокументОбъект.Организация = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяОрганизация");
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Подразделение)) Тогда
		ДокументОбъект.Подразделение = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеПодразделение");
	КонецЕсли;
	
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СтруктурноеПодразделение", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурноеПодразделение))
	   	И мОтображатьСтруктурныеПодразделения Тогда
	   	СтруктурноеПодразделение = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеСтруктурноеПодразделениеОрганизации");
		Если СтруктурноеПодразделение = Неопределено Тогда
			ДокументОбъект.СтруктурноеПодразделение = ДокументОбъект.Организация;
		ИначеЕсли ТипЗнч(СтруктурноеПодразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ДокументОбъект.СтруктурноеПодразделение = СтруктурноеПодразделение;
		Иначе
			ДокументОбъект.СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();							
		КонецЕсли;
	КонецЕсли;
	
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СтруктурноеПодразделениеОтправитель", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурноеПодразделениеОтправитель))
	   	И мОтображатьСтруктурныеПодразделения Тогда
	   	СтруктурноеПодразделениеОтправитель = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеСтруктурноеПодразделениеОрганизации");
		Если СтруктурноеПодразделениеОтправитель = Неопределено Тогда
			ДокументОбъект.СтруктурноеПодразделениеОтправитель = ДокументОбъект.Организация;
		ИначеЕсли ТипЗнч(СтруктурноеПодразделениеОтправитель) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ДокументОбъект.СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделениеОтправитель;
		Иначе
			ДокументОбъект.СтруктурноеПодразделениеОтправитель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();							
		КонецЕсли;
	КонецЕсли;
	
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СтруктурноеПодразделениеПолучатель", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурноеПодразделениеПолучатель))
	   	И мОтображатьСтруктурныеПодразделения Тогда
	   	СтруктурноеПодразделениеПолучатель = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеСтруктурноеПодразделениеОрганизации");
		Если СтруктурноеПодразделениеПолучатель = Неопределено Тогда
			ДокументОбъект.СтруктурноеПодразделениеПолучатель = ДокументОбъект.Организация;
		ИначеЕсли ТипЗнч(СтруктурноеПодразделениеПолучатель) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ДокументОбъект.СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделениеПолучатель;
		Иначе
			ДокументОбъект.СтруктурноеПодразделениеПолучатель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();							
		КонецЕсли;
	КонецЕсли;
					   	
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Ответственный)) Тогда
		ДокументОбъект.Ответственный = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойОтветственный");
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Автор", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Автор)) Тогда
		ДокументОбъект.Автор = ТекПользователь;
	КонецЕсли;
	
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации)) Тогда
		ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][0];
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ФормаОплаты", МетаданныеДокумента)
		И (НЕ ЗначениеЗаполнено(ДокументОбъект.ФормаОплаты)) Тогда
		
		Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("БанковскийСчетКасса", МетаданныеДокумента)
			И НЕ ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетКасса)
			И (ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
			Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")<>Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0
				И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")<>Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный Тогда
				ДокументОбъект.БанковскийСчетКасса = Вычислить("УправлениеДенежнымиСредствами.ПолучитьОсновнойБанковскийСчетДокумента(ДокументОбъект, МетаданныеДокумента)");
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.БанковскийСчетКасса.ВалютаДенежныхСредств;
			КонецЕсли;
			ДокументОбъект.ФормаОплаты = Перечисления["ден_ВидыДенежныхСредств"].Безналичные;
		Иначе
			ДокументОбъект.ФормаОплаты = Перечисления["ден_ВидыДенежныхСредств"].Наличные;	
		КонецЕсли;
	КонецЕсли;

	ЕстьРасчетыСКонтрагентами					= ЕстьРасчетыСКонтрагентами(ДокументОбъект.ВидОперации);
	ЕстьРасчетыПоКредитам						= ЕстьРасчетыПоКредитам(ДокументОбъект.ВидОперации);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СчетКонтрагента", МетаданныеДокумента)
		   И НЕ ЗначениеЗаполнено(ДокументОбъект.СчетКонтрагента)
		   И ЗначениеЗаполнено(ДокументОбъект.Контрагент.ОсновнойБанковскийСчет) 
		   И ДокументОбъект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств Тогда

			ДокументОбъект.СчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;

		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)
		   И ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда 

			//ДоступныйОсновнойДоговорКонтрагента = дог_УправлениеДоговорами.ДоступныйДоговорКонтрагента(ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента);
			//Если НЕ ден_ПроцедурыКазначейства.ОпределитьВидДоговораСКонтрагентом(ДокументОбъект.ВидОперации).НайтиПоЗначению(ДоступныйОсновнойДоговорКонтрагента.ВидДоговора) = Неопределено Тогда

			//	Если ДокументОбъект.Организация.Пустая() Тогда
			//		СтрокаПлатеж.ДоговорКонтрагента	= ДоступныйОсновнойДоговорКонтрагента;
			//		Организация						= ДоступныйОсновнойДоговорКонтрагента.Организация;
			//	ИначеЕсли ДоступныйОсновнойДоговорКонтрагента.Организация.Пустая()
			//		  ИЛИ ДоступныйОсновнойДоговорКонтрагента.Организация = ДокументОбъект.Организация Тогда
			//		СтрокаПлатеж.ДоговорКонтрагента	= ДоступныйОсновнойДоговорКонтрагента;
			//	КонецЕсли;

			//КонецЕсли;

			СтруктураКурсаВзаиморасчетов = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(	СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
																ТекущаяДата());
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

			Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
			   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента)) Тогда

				ДокументОбъект.ВалютаДокумента = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

			КонецЕсли;

		КонецЕсли; // Договор

	КонецЕсли; // Контрагент

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ДатаРасхода", МетаданныеДокумента) Тогда
		ДокументОбъект.ДатаРасхода = ТекущаяДата();
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ДатаПоступления", МетаданныеДокумента) Тогда
		ДокументОбъект.ДатаПоступления = ТекущаяДата();
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Состояние", МетаданныеДокумента) Тогда
		ДокументОбъект.Состояние = Перечисления["СостоянияОбъектов"].Подготовлен;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьРеквизитыРасчетногоДокумента()

// Возаращает вид договора с контрагентом по виду операции
//
Функция ОпределитьВидДоговораСКонтрагентом(ВидОперации = Неопределено) Экспорт
	
	СПоставщиком = Новый СписокЗначений;
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	СПокупателем = Новый СписокЗначений;
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Прочее 		 = Новый СписокЗначений;
	Прочее.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Если ЗначениеЗаполнено(ВидОперации) Тогда

		//Определение вида операции  
		ВидДоговораПоВидуОпераций = Новый Соответствие(); 
		Если Метаданные.Перечисления.Найти("ден_ВидыОперацийЗаявкиНаРасходование") <> Неопределено Тогда
			// в УТ поддерживается механизм заявок
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ден_ВидыОперацийЗаявкиНаРасходование"].ОплатаПоставщику,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ден_ВидыОперацийЗаявкиНаРасходование"].ОплатаСтруктурномуПодразделению,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ден_ВидыОперацийЗаявкиНаРасходование"].РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ден_ВидыОперацийЗаявкиНаРасходование"].РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ден_ВидыОперацийЗаявкиНаРасходование"].ПрочиеРасчетыСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ден_ВидыОперацийЗаявкиНаРасходование"].ВозвратДенежныхСредствПокупателю,СПокупателем);
		КонецЕсли;
		
		Если Метаданные.Перечисления.Найти("ден_ВидыОперацийПланируемоеПоступлениеДС") <> Неопределено Тогда
			// в УТ поддерживается плановые поступления денежных средств
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ден_ВидыОперацийПланируемоеПоступлениеДС"].ОплатаПокупателя,СПокупателем);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ден_ВидыОперацийПланируемоеПоступлениеДС"].ОплатаСтруктурногоПодразделения,СПокупателем);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ден_ВидыОперацийПланируемоеПоступлениеДС"].РасчетыПоКредитамИЗаймам,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ден_ВидыОперацийПланируемоеПоступлениеДС"].ПрочиеРасчетыСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ден_ВидыОперацийПланируемоеПоступлениеДС"].ВозвратДенежныхСредствПоставщиком,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ден_ВидыОперацийПланируемоеПоступлениеДС"].ПрочееПоступлениеДенежныхСредств,Прочее);
		КонецЕсли;
				
		ВидДоговора = ВидДоговораПоВидуОпераций[ВидОперации];
		
		Если НЕ ВидДоговора = Неопределено Тогда
			
			Возврат ВидДоговора;
			
		Иначе
			
			Возврат Новый СписокЗначений;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Новый СписокЗначений;
		
	Конецесли;
	
КонецФункции

// Процедуры казначейства

Функция СписокСчетовУчетаДенежныхСредств() Экспорт
	
	МассивОтбора 		= Новый Массив;
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредства);
	СписокВыбораСчетов 	= ПроцедурыБухгалтерскогоУчета.ЗаполнитьСписокВыбораСчетов(МассивОтбора);
	
	Возврат СписокВыбораСчетов;
	
КонецФункции

Функция СоздатьТаблицуПереоценок() Экспорт
	
	ТаблицаПереоценокОУ 	= Новый ТаблицаЗначений;
	ТаблицаПереоценокОУ.Колонки.Добавить("БанковскийСчетКасса");
	ТаблицаПереоценокОУ.Колонки.Добавить("СтруктурноеПодразделение");
	ТаблицаПереоценокОУ.Колонки.Добавить("ПриходРасход");
	ТаблицаПереоценокОУ.Колонки.Добавить("СтатьяДвиженияДенежныхСредств");
	ТаблицаПереоценокОУ.Колонки.Добавить("СуммаРегл");
	ТаблицаПереоценокОУ.Колонки.Добавить("СуммаУпр");
	
	Возврат ТаблицаПереоценокОУ;
	
КонецФункции

Процедура СформироватьДвиженияПоПереоценкам(Движения,ТаблицаПереоценокОУ,ВалютаРегламентированногоУчета,СтруктураШапкиДокумента) Экспорт
	
	ВалютаУпрУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	Если ВалютаУпрУчета <> ВалютаРегламентированногоУчета Тогда
		КурсРегл 	= ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета,	СтруктураШапкиДокумента.Дата);	
		КурсУпр 	= ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаУпрУчета,					СтруктураШапкиДокумента.Дата);	
	КонецЕсли;
	Для Каждого СтрокаПереоценка Из ТаблицаПереоценокОУ Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаПереоценка.БанковскийСчетКасса) ИЛИ НЕ ЗначениеЗаполнено(СтрокаПереоценка.СуммаРегл) Тогда
			Продолжить;
		КонецЕсли;
		Если ВалютаРегламентированногоУчета = ВалютаУпрУчета Тогда
			СтрокаПереоценка.СуммаУпр = СтрокаПереоценка.СуммаРегл;
		Иначе
			СтрокаПереоценка.СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПереоценка.СуммаРегл,ВалютаРегламентированногоУчета,ВалютаУпрУчета,КурсРегл.Курс,КурсУпр.Курс,КурсРегл.Кратность,КурсУпр.Кратность);
		КонецЕсли;
		Движение 							= Движения.ден_ДенежныеСредства.Добавить();	
		Движение.ВидДвижения				= ?(СтрокаПереоценка.ПриходРасход = Перечисления.ден_ВидыДвиженийПриходРасход.Расход,ВидДвиженияНакопления.Расход,ВидДвиженияНакопления.Приход);
		Движение.Период 					= СтруктураШапкиДокумента.Дата;
		Движение.Организация 				= СтруктураШапкиДокумента.Организация;
		Движение.СтруктурноеПодразделение 	= СтруктураШапкиДокумента.СтруктурноеПодразделение;
		Движение.БанковскийСчетКасса 		= СтрокаПереоценка.БанковскийСчетКасса;
		Движение.ВидДенежныхСредств 		= ?(ТипЗнч(СтрокаПереоценка.БанковскийСчетКасса)=Тип("СправочникСсылка.БанковскиеСчета"),Перечисления.ден_ВидыДенежныхСредств.Безналичные,Перечисления.ден_ВидыДенежныхСредств.Наличные);
		Движение.СуммаУпр 					= СтрокаПереоценка.СуммаУпр;
		
		Движение 							= Движения.ден_ДвиженияДенежныхСредств.Добавить();	
		Движение.ПриходРасход				= СтрокаПереоценка.ПриходРасход;
		Движение.Период 					= СтруктураШапкиДокумента.Дата;
		Движение.Организация 				= СтруктураШапкиДокумента.Организация;
		Движение.СтруктурноеПодразделение 	= СтруктураШапкиДокумента.СтруктурноеПодразделение;
		Движение.БанковскийСчетКасса 		= СтрокаПереоценка.БанковскийСчетКасса;
		Движение.СтатьяДвиженияДенежныхСредств	= СтрокаПереоценка.СтатьяДвиженияДенежныхСредств;
		Движение.ВидДенежныхСредств 		= ?(ТипЗнч(СтрокаПереоценка.БанковскийСчетКасса)=Тип("СправочникСсылка.БанковскиеСчета"),Перечисления.ден_ВидыДенежныхСредств.Безналичные,Перечисления.ден_ВидыДенежныхСредств.Наличные);
		Движение.ДокументДвижения			= СтруктураШапкиДокумента.Ссылка;
		Движение.СуммаУпр 					= СтрокаПереоценка.СуммаУпр;		
	КонецЦикла;
	
КонецПроцедуры

Функция НеобходимостьРасчетаОперативныхПереоценок(СписокВыбораСчетов,Счет,ТаблицаПереоценокОУ)  Экспорт
	
	Возврат ?(СписокВыбораСчетов = Неопределено ИЛИ СписокВыбораСчетов.НайтиПоЗначению(Счет) = Неопределено, Неопределено, ТаблицаПереоценокОУ);
	
КонецФункции

Функция ТребуетсяАвтоматическаяПереоценкаОперативныхОстатковДенежныхСредств(Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетнаяПолитика.ПорядокПереоценкиОперативныхОстатковДенежныхСредств
		|ИЗ
		|	РегистрСведений.фин_УчетнаяПолитикаПоБюджетированию.СрезПоследних(&Дата, ) КАК УчетнаяПолитика";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ?(ВыборкаДетальныеЗаписи.ПорядокПереоценкиОперативныхОстатковДенежныхСредств = Перечисления.ден_ПорядокПереоценкиОперативныхОстатковДенежныхСредств.ПриВыполненииБухгалтерскихПереоценок,Истина,Ложь);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
