///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ СВЕДЕНИЙ ОБ ОРГАНИЗАЦИИ

// Возвращает головную организацию для заданной организации
// Если для организации реквизит ГоловнаяОрганизация не заполнен 
// это значит, что сама организация является головной
//
// Параметры
//  Организация – СправочникСсылка.Организации
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   СправочникСсылка.Организации
//
Функция ГоловнаяОрганизация(Организация) Экспорт
	
	ГоловнаяОрганизация = ЦС_ОбщийПереопределяемый.ГоловнаяОрганизация(Организация);
	Если Не ЗначениеЗаполнено(Организация) ИЛИ Не ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Возврат Организация;
	Иначе
		Возврат ГоловнаяОрганизация; 
	КонецЕсли;
	
КонецФункции 

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
	Возврат Результат[ИмяРеквизита];
	
КонецФункции 

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка    - Ссылка на объект - элемент справочника, документ, ...
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
// 
Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		СтруктураРеквизитов = Новый Структура(Реквизиты);
		
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Структура")
	      ИЛИ ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		
		СтруктураРеквизитов = Реквизиты;
		
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив")
	      ИЛИ ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		
		СтруктураРеквизитов = Новый Структура;
		Для каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение ЦС_ОбщийКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"),
			Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитыДляНадписиОГарантии(Знач ОснованиеГр) Экспорт

	Возврат ЦС_ОбщийПереопределяемый.РеквизитыДляНадписиОГарантии(ОснованиеГр);
	
КонецФункции 

Функция ПолучитьСвойстваСчета(Знач Счет) Экспорт

	Если ТипЗнч(Счет) <> Тип("ПланСчетовСсылка.Типовой") Тогда
		Счет = ПланыСчетов.Типовой.ПустаяСсылка();
	КонецЕсли;
	
	ДанныеСчета = Новый Структура;
	ДанныеСчета.Вставить("Ссылка"                         , Счет.Ссылка);
	ДанныеСчета.Вставить("Наименование"                   , Счет.Наименование);
	ДанныеСчета.Вставить("Код"                            , Счет.Код);
	ДанныеСчета.Вставить("Родитель"                       , Счет.Родитель);
	ДанныеСчета.Вставить("Наименование"                   , Счет.Наименование);
	ДанныеСчета.Вставить("Вид"                            , Счет.Вид);
	ДанныеСчета.Вставить("Забалансовый"                   , Счет.Забалансовый);
	ДанныеСчета.Вставить("ЗапретитьИспользоватьВПроводках", Счет.ЗапретитьИспользоватьВПроводках);
	ДанныеСчета.Вставить("Валютный"                       , Счет.Валютный);
	ДанныеСчета.Вставить("Количественный"                 , Счет.Количественный);
	//ДанныеСчета.Вставить("УчетПоПодразделениям"           , Счет.УчетПоПодразделениям);
	ДанныеСчета.Вставить("СчетНУ"                         , Счет.СчетНУ);

	ДанныеСчета.Вставить("КоличествоСубконто"             , Счет.ВидыСубконто.Количество());

	МаксКоличествоСубконто = ПолучитьМаксКоличествоСубконто();
	Для Индекс = 1 По МаксКоличествоСубконто Цикл
		Если Индекс <= Счет.ВидыСубконто.Количество() Тогда
			ДанныеСчета.Вставить("ВидСубконто" + Индекс,                   Счет.ВидыСубконто[Индекс - 1].ВидСубконто);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Наименование",  Строка(Счет.ВидыСубконто[Индекс - 1].ВидСубконто));
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТипЗначения",   Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Суммовой",      Счет.ВидыСубконто[Индекс - 1].Суммовой);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТолькоОбороты", Счет.ВидыСубконто[Индекс - 1].ТолькоОбороты);
		Иначе
			ДанныеСчета.Вставить("ВидСубконто" + Индекс,                   Неопределено);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Наименование",  Неопределено);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТипЗначения",   Неопределено);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Суммовой",      Ложь);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТолькоОбороты", Ложь);
		КонецЕсли;
	КонецЦикла;
	
	//Если УчетПоПодразделениямОтключенПользователем(Счет) тогда
	//	ДанныеСчета.УчетПоПодразделениям = ложь;	
	//КонецЕсли;

	Возврат ДанныеСчета;

КонецФункции

Функция ПолучитьМаксКоличествоСубконто() Экспорт

	Возврат Метаданные.ПланыСчетов.Типовой.МаксКоличествоСубконто;

КонецФункции

