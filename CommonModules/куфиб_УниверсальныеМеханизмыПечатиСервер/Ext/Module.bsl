// Процедура формирует дерево кнопок для подменю "Печать"
//
Функция ПолучитьДеревоМакетовПечати(СсылкаОбъекта, ВнутренниеПечатныеФормы, Действие = Неопределено, 
									ДействиеУстановитьПечатьПоУмолчанию = Неопределено) Экспорт
	ДеревоКнопок = ИнициализироватьДеревоДополнительныхКнопок();						// Сформировать структуру дерева
	ДобавитьВДеревоМакетовДополнительныеФормы(ДеревоКнопок, СсылкаОбъекта, Действие);	// Добавить в дерево дополнительные печатные формы из Справочник.ВнешниеОбработки
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(ДеревоКнопок);			// Получить имя макета печати по умолчанию
	Если ДеревоКнопок.Строки.Количество() > 0 Тогда 									// Добавит печать по умолчанию
		ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, Строка(Новый УникальныйИдентификатор), );
	КонецЕсли; 
	Возврат ДеревоКнопок;
КонецФункции // ПолучитьДеревоМакетовПечати()

// Функция возвращает из дерева кнопок строку с описанием кнопки для макета по умолчанию
//
Функция ПолучитьСтрокуДереваМакетовПоУмолчанию(ДеревоКнопок) Экспорт
	Если ДеревоКнопок.Строки.Количество() = 0 Тогда
		СтрокаПоУмолчанию = Неопределено;
	Иначе
		СтрокаПоУмолчанию = ДеревоКнопок.Строки.Найти(Ложь,"Текст");
		Если СтрокаПоУмолчанию = Неопределено Тогда
			СтрокаПоУмолчанию = ДеревоКнопок.Строки[0];
		КонецЕсли;
	КонецЕсли;
	Возврат СтрокаПоУмолчанию;
КонецФункции // ПолучитьСтрокуДереваМакетовПоУмолчанию()

// Функция инициализирует дерево дополнительных кнопок
//	Параметры:
//		Нет
// Возвращаемое значение:
//		Тип: ДереваЗначений.
Функция ИнициализироватьДеревоДополнительныхКнопок() Экспорт
	ДеревоКнопок = Новый ДеревоЗначений;
	ДеревоКнопок.Колонки.Добавить("Имя");
	ДеревоКнопок.Колонки.Добавить("ТипКнопки");
	ДеревоКнопок.Колонки.Добавить("Текст");
	ДеревоКнопок.Колонки.Добавить("Подсказка");
	ДеревоКнопок.Колонки.Добавить("Картинка");
	ДеревоКнопок.Колонки.Добавить("Действие");
	ДеревоКнопок.Колонки.Добавить("Пометка");
	//Остальные свойства кнопки
	ДеревоКнопок.Колонки.Добавить("Расшифровка");
	Возврат ДеревоКнопок;
КонецФункции // ИнициализироватьДеревоДополнительныхКнопок()

// Функция заполняет начальные параметры построителю отчета, который
//  используется для настройки отбора в мезанизме подключения внешних печатных форм.
//
// Параметры
//  ИмяТаблицы     - Строка, имя таблицы БД к которой необходимо определить запрос
//  СинонимТаблицы - Строка, синоним таблицы БД к которой необходимо определить запрос
//
// Возвращаемое значение:
//   ПостроительОтчета
//
Функция ИнициализироватьПостроительДопПечатныхФорм(ИмяТаблицы, СинонимТаблицы) Экспорт
	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	" + ИмяТаблицы + " КАК Объект
	|ГДЕ
	|	Объект.Ссылка = &Ссылка
	|{ГДЕ
	|	Объект.Ссылка.*}
	|";
	ПолеОбъекта = ПостроительОтчета.ДоступныеПоля.Найти("Ссылка");
	ПолеОбъекта.Представление = ?(НЕ ЗначениеЗаполнено(СинонимТаблицы), ИмяТаблицы, СинонимТаблицы);
	Возврат ПостроительОтчета;
КонецФункции // ИнициализироватьПостроительДопПечатныхФорм()

// Функция добавляет новую строку в дерево кнопок
//
Функция ДобавитьСтрокуВДеревоКнопок(СтрокаПодменю, Имя, Знач ТипКнопки = Неопределено ,Текст = "", Действие = Неопределено, Расшифровка = Неопределено, Пометка = Ложь, Подсказка = "", Картинка = Неопределено, Позиция = Неопределено) Экспорт
	Если Позиция = Неопределено Тогда
		СтрокаКнопки         = СтрокаПодменю.Строки.Добавить();
	Иначе
		СтрокаКнопки         = СтрокаПодменю.Строки.Вставить(Позиция);
	КонецЕсли; 
	СтрокаКнопки.Имя         = Имя;
	СтрокаКнопки.ТипКнопки   = ТипКнопки;
	СтрокаКнопки.Текст       = Текст;
	СтрокаКнопки.Действие    = Действие;
	СтрокаКнопки.Картинка    = Картинка;
	СтрокаКнопки.Подсказка   = Подсказка;
	СтрокаКнопки.Пометка     = Пометка;
	СтрокаКнопки.Расшифровка = Расшифровка;
	Возврат СтрокаКнопки;
КонецФункции // ДобавитьСтрокуВДеревоКнопок()

// Функция получает ТабличныйДокумент для печати из внешней печатной формы.
//
// Параметры
//  Ссылка         - Ссылка, для которой необходимо напечатать документ
//  ИсточникМакета - ИсточникМакета, структура, содержащая внешнюю обработку для печати
//
// Возвращаемое значение:
//   ТабличныйДокумент
//
Функция НапечататьВнешнююФорму(Ссылка, ИсточникМакета) Экспорт
	Перем ДополнительныеПараметры;
	ДвоичныеДанные = ИсточникМакета.СсылкаНаВнешнююОбработку.Принадлежность[ИсточникМакета.НомерСтроки - 1].ХранилищеВнешнейОбработки.Получить();
	// Получить дополнительные параметры внешней обработки
	ИсточникМакета.Свойство("ДополнительныеПараметрыОбработки", ДополнительныеПараметры);
	Если ДвоичныеДанные = Неопределено Тогда
		ДвоичныеДанные = ИсточникМакета.СсылкаНаВнешнююОбработку.ХранилищеВнешнейОбработки.Получить();
	КонецЕсли;
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ТабДокумент = Неопределено;
	ИмяФайла = ПолучитьИмяВременногоФайла("epf");
	Попытка
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		// Передать внешней обработке дополнительные параметры
		Если ДополнительныеПараметры <> Неопределено Тогда
			// Если у внешней обработки есть реквизит для дополнительных параметров, присвоить ему значение
			Если НЕ Обработка.Метаданные().Реквизиты.Найти("ДополнительныеПараметры") = Неопределено Тогда
				Обработка.ДополнительныеПараметры = ДополнительныеПараметры;
			КонецЕсли;
		КонецЕсли;
		ТабДокумент = Обработка.Печать();
		УдалитьФайлы(ИмяФайла);
	Исключение
		куфиб_ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось сформировать внешнюю печатную форму!");
	КонецПопытки;
	Возврат ПоместитьВоВременноеХранилище(ТабДокумент,Ссылка.УникальныйИдентификатор());
КонецФункции // НапечататьВнешнююФорму()

// Функция возвращает расшифровку строки кнопок
Функция ПолучитСтрокиДереваМакетов(Ссылка, СтруктураВнутреннихПечатныхФорм,ТекстКнопки) Экспорт
	ДеревоМакетовПечати = куфиб_УниверсальныеМеханизмыПечатиСервер.ПолучитьДеревоМакетовПечати(Ссылка, СтруктураВнутреннихПечатныхФорм);
	СтрокаКнопки = ДеревоМакетовПечати.Строки.Найти(ТекстКнопки,"Текст");
	Если СтрокаКнопки = Неопределено Тогда
		куфиб_ОбщегоНазначения.СообщитьПользователю("Печать не доступна. Изменился набор реквизитов!");
		Возврат неопределено;
	КонецЕсли; 
	Возврат СтрокаКнопки.Расшифровка
КонецФункции

// Процедура дополняет таблицу печатных форма (ТаблицаМакетов) объекта
// из справочника "Дополнительные печатные формы"
Процедура ДобавитьВДеревоМакетовДополнительныеФормы(ДеревоМакетов, СсылкаОбъекта, Действие) Экспорт
	Если Метаданные.Справочники.Найти("ВнешниеОбработки")=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Метаданные.Перечисления.Найти("ВидыДополнительныхВнешнихОбработок")=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Метаданные.Справочники.Найти("ВнешниеОбработки").Реквизиты.Найти("ХранилищеВнешнейОбработки") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Метаданные.Справочники.Найти("ВнешниеОбработки").Реквизиты.Найти("ВидОбработки") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Метаданные.Справочники.Найти("ВнешниеОбработки").ТабличныеЧасти.Найти("Принадлежность") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокиДерева = ДеревоМакетов.Строки;
	
	Если ТипЗнч(СсылкаОбъекта) = Тип("ОбъектМетаданных") Тогда
		Возврат;
	КонецЕсли; 
	
	МетаданныеОбъекта = СсылкаОбъекта.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработкиПринадлежность.Ссылка КАК Ссылка,
	|	ВнешниеОбработкиПринадлежность.ДополнительныеПараметрыОбработки КАК ДополнительныеПараметрыОбработки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВнешниеОбработкиПринадлежность.ПредставлениеКнопки, """") <> """" ТОГДА ВнешниеОбработкиПринадлежность.ПредставлениеКнопки
	|		ИНАЧЕ ВнешниеОбработкиПринадлежность.Ссылка.Наименование
	|	КОНЕЦ КАК Наименование,	
	|	ВнешниеОбработкиПринадлежность.Ссылка.ХранилищеВнешнейОбработки КАК СсылкаХранилищеВнешнейОбработки,
	|	ВнешниеОбработкиПринадлежность.НастройкиПостроителяДляОтбора КАК НастройкиПостроителяДляОтбора,
	|	ВнешниеОбработкиПринадлежность.ХранилищеВнешнейОбработки КАК ХранилищеВнешнейОбработки,
	|	ВнешниеОбработкиПринадлежность.ЗаменяемаяПечатнаяФорма КАК ЗаменяемаяПечатнаяФорма,
	|	ВнешниеОбработкиПринадлежность.НомерСтроки
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки
	|ИТОГИ ПО
	|	Ссылка";
	
	ИмяТаблицыОбъекта = "";
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма);
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
		ИмяТаблицыОбъекта = "Документ." + МетаданныеОбъекта.Имя;
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка());
		ИмяТаблицыОбъекта = "Справочник." + МетаданныеОбъекта.Имя;
	Иначе
		Возврат;
	КонецЕсли;
	БылРазделитель	= СтрокиДерева.Количество() = 0 ;
	ВыборкаСсылок	= Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСсылок.Следующий() Цикл
		ПорядковыйНомер	= 0;
		Выборка			= ВыборкаСсылок.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяОбработка	= Неопределено;
			ОбработкаСтроки	= Выборка.ХранилищеВнешнейОбработки.Получить();
			Если ТипЗнч(ОбработкаСтроки) = Тип("ДвоичныеДанные") Тогда
				НоваяОбработка = ОбработкаСтроки;
			Иначе
				ОбработкаЭлемента = Выборка.СсылкаХранилищеВнешнейОбработки.Получить();
				Если ТипЗнч(ОбработкаЭлемента) = Тип("ДвоичныеДанные") Тогда
					НоваяОбработка = ОбработкаЭлемента;
				КонецЕсли; 
			КонецЕсли; 
			Если НоваяОбработка = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			СтруктураРасшифровки = Новый Структура("СсылкаНаВнешнююОбработку, НомерСтроки, ДополнительныеПараметрыОбработки", ВыборкаСсылок.Ссылка, Выборка.НомерСтроки, Выборка.ДополнительныеПараметрыОбработки.Получить());
			// Проверим, удовлетворяет ли подключаемый отчет указанным в нем условиям
			НастройкиПостроителя = Выборка.НастройкиПостроителяДляОтбора.Получить();
			Если ТипЗнч(НастройкиПостроителя) = Тип("НастройкиПостроителяОтчета") Тогда
				ПостроительОтчета = ИнициализироватьПостроительДопПечатныхФорм(ИмяТаблицыОбъекта, МетаданныеОбъекта.Синоним);
				ПостроительОтчета.Параметры.Вставить("Ссылка", СсылкаОбъекта);
				ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя, Истина, Ложь, Ложь, Ложь, Ложь);
				ПостроительОтчета.Выполнить();
				Если ПостроительОтчета.Результат.Пустой() Тогда
					Продолжить;
				КонецЕсли;
				Подсказка = "Отбор";
			Иначе
				Подсказка = "";
			КонецЕсли;
			// Теперь проверим, надо ли заменять существующую печ.форму или нужно добавить новую
			Если ЗначениеЗаполнено(Выборка.ЗаменяемаяПечатнаяФорма) Тогда
				Подсказка = "Печатная форма заменена подключаемой" + Подсказка;
				СтрокаДерева = СтрокиДерева.Найти(Выборка.ЗаменяемаяПечатнаяФорма, "Имя");
				Если СтрокаДерева = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				//ПодменятьВстроеннуюФорму = Ложь;
				СтрокаДерева.Расшифровка = СтруктураРасшифровки;
				СтрокаДерева.Подсказка = Подсказка;
				СтрокаДерева.Текст = Выборка.Наименование;
				Продолжить;
			Иначе
				Подсказка = "Подключаемая печатная форма" + Подсказка;
			КонецЕсли;
			// Только тут будем добавлять новую печ. форму в дополнение списка
			Если Не БылРазделитель Тогда
				//ДобавитьСтрокуВДеревоКнопок(ДеревоМакетов, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Разделитель);
				ДобавитьСтрокуВДеревоКнопок(ДеревоМакетов, Строка(Новый УникальныйИдентификатор), );
				БылРазделитель = Истина;
			КонецЕсли;
			Суффикс = ?(ПорядковыйНомер = 0 ,"" , "("+ПорядковыйНомер+")");
			//ДобавитьСтрокуВДеревоКнопок(ДеревоМакетов, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Действие, Выборка.Наименование + Суффикс, Действие ,СтруктураРасшифровки, , Подсказка, , );
			ДобавитьСтрокуВДеревоКнопок(ДеревоМакетов, Строка(Новый УникальныйИдентификатор), , Выборка.Наименование + Суффикс, Действие ,СтруктураРасшифровки, , Подсказка, , );
		КонецЦикла;
	КонецЦикла; 
КонецПроцедуры // ДобавитьВДеревоМакетовДополнительныеФормы()

// Процедура Устанавливает кнопку "Печать по умолчанию"
//
Процедура УстановитьПечатьПоУмолчанию(ЭтаФорма, ПечатьПоУмолчанию, КоманднаяПанель, ДеревоМакетов,ДействиеПечатьПоУмолчанию) Экспорт
	СтрокаПоУмолчанию = куфиб_УниверсальныеМеханизмыПечатиСервер.ПолучитьСтрокуДереваМакетовПоУмолчанию(ДеревоМакетов);
	Если Не СтрокаПоУмолчанию = Неопределено Тогда
		Если ПечатьПоУмолчанию = Неопределено Тогда
			ИмяКнопки = "КнопкаПечатьПоУмолчанию";
			ПечатьПоУмолчанию = ЭтаФорма.Элементы.Добавить(ИмяКнопки, тип("КнопкаФормы"),КоманднаяПанель);
			Если ЭтаФорма.Команды.Найти("Команда"+ДействиеПечатьПоУмолчанию)=Неопределено  Тогда
				Команда = ЭтаФорма.Команды.Добавить("Команда"+ДействиеПечатьПоУмолчанию);
				Команда.Действие = ДействиеПечатьПоУмолчанию;
				Команда.Подсказка = "Печать по умолчанию";
				Команда.Картинка = БиблиотекаКартинок.Печать;
			КонецЕсли;
			ПечатьПоУмолчанию.ИмяКоманды ="Команда"+ДействиеПечатьПоУмолчанию;
		КонецЕсли;
		ПечатьПоУмолчанию.Заголовок       = СтрокаПоУмолчанию.Текст;
		ПечатьПоУмолчанию.Доступность = Истина;
		ПечатьПоУмолчанию.Отображение = ОтображениеКнопки.КартинкаИТекст;
	ИначеЕсли Не ПечатьПоУмолчанию = Неопределено Тогда
		ПечатьПоУмолчанию.Заголовок       = "Печать по умолчанию не назначена";
		ПечатьПоУмолчанию.Доступность = Ложь; 
	КонецЕсли; 
КонецПроцедуры // УстановитьПечатьПоУмолчанию()

// Процедура формирует подменю по дереву значений
// Параметры:
//	< СтрокаПодменю > (обязательный)
//		Тип: Дерево или элемент дерева значений, по данным которого необходимо построить подменю.
//	< Подменю> (обязательный)
//		Тип: Элемент командной панели «Кнопка» типа «Подменю». На которой необходимо сформировать новое подменю.
//	< Очищать> (по умолчанию «Ложь»)
//		Тип: булево. Определяет: следует ли очищать переданное подменю.
//	< ДобавлятьРазделительВНачало > (по умолчанию «Ложь»)
//		Тип: булево. Определяет: следует ли добавить в начало подменю разделитель.
Процедура СформироватьПодменю(ЭтаФорма,СтрокаПодменю, Подменю, Очищать = Ложь, ДобавлятьРазделительВНачало = Ложь, КнопкиПодменюИзменяютДанные = Ложь) Экспорт
	Строки = СтрокаПодменю.Строки;
	Кнопки = Подменю.ПодчиненныеЭлементы;
	к=0;
	Для каждого СтрокаКнопки Из Строки Цикл
		Если не СтрокаКнопки.Действие=неопределено Тогда
			Кнопка = ЭтаФорма.Элементы.Добавить("КнопкаПечати"+к, тип("КнопкаФормы"),подменю);
			Кнопка.Заголовок = СтрокаКнопки.Текст;
			//Если ЭтаФорма.Команды.Найти("Команда"+СтрокаКнопки.Действие)=Неопределено  Тогда
			//	Команда = ЭтаФорма.Команды.Добавить("Команда"+СтрокаКнопки.Действие);
			Если ЭтаФорма.Команды.Найти("Команда"+Кнопка.Имя) = Неопределено Тогда
				Команда = ЭтаФорма.Команды.Добавить("Команда"+Кнопка.Имя);
				Команда.Действие = СтрокаКнопки.Действие;
				Команда.Подсказка = СтрокаКнопки.Подсказка;
				Команда.Заголовок = СтрокаКнопки.Текст;
				//Команда.Картинка = БиблиотекаКартинок.Печать;
				Команда.ИзменяетСохраняемыеДанные = КнопкиПодменюИзменяютДанные;
			КонецЕсли;
			Кнопка.ИмяКоманды = "Команда"+Кнопка.Имя;
			Если СтрокаКнопки.Строки.Количество() > 0 Тогда
				СформироватьПодменю(СтрокаКнопки, Подменю, Ложь, Ложь)
			КонецЕсли; 
			Если Не СтрокаКнопки.Картинка = Неопределено Тогда
				Кнопка.Картинка  = СтрокаКнопки.Картинка;
			КонецЕсли; 
			//Кнопка.Пометка = СтрокаКнопки.Пометка;
			к=к+1;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры // СформироватьПодменю()

// Процедура устанавливает Подменю "Печать" 
// Параметры:
//    Форма       : Форма, вызвавшая процедуру
//    ДополнительныеКнопки : Структура дополнительных кнопок
Процедура УстановитьПодменюПечати(ЭтаФорма, ПодменюПечати, КоманднаяПанель, СоздаватьПриНеобходимости) Экспорт
	Если НЕ ПодменюПечати = Неопределено ИЛИ НЕ СоздаватьПриНеобходимости Тогда
		Возврат;
	КонецЕсли; 
	ИмяПодменю = "ГруппаПечати";
	ПодменюПечати = ЭтаФорма.Элементы.Добавить(ИмяПодменю,Тип("ГруппаФормы"),КоманднаяПанель );
	ПодменюПечати.Заголовок = "Печать";
	ПодменюПечати.Подсказка = "Меню выбора печатных форм";
	ПодменюПечати.Картинка = БиблиотекаКартинок.Печать;
	ПодменюПечати.Отображение = ОтображениеКнопки.КартинкаИТекст
КонецПроцедуры // УстановитьПодменюПечати()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати(ЭтаФорма) Экспорт
	СтруктураПечатныхФорм 	= Неопределено;
	ПанельПечатиФормы 		= ЭтаФорма.Элементы.ФормаКоманднаяПанель;
	мДеревоМакетов 			= ПолучитьДеревоМакетовПечати(ЭтаФорма.Объект.Ссылка,СтруктураПечатныхФорм,"Подключаемый_ВыполнитьКомандуПечати", "ОсновныеДействияФормыУстановитьПечатьПоУмолчанию");
	мПодменюПечати 			= Неопределено;
	мПечатьПоУмолчанию 		= Неопределено;
	
	//УстановитьПечатьПоУмолчанию(ЭтаФорма,мПечатьПоУмолчанию,ПанельПечатиФормы,мДеревоМакетов,"ОсновныеДействияФормыПечатьПоУмолчанию");
	УстановитьПодменюПечати(ЭтаФорма,мПодменюПечати, ПанельПечатиФормы, мДеревоМакетов.Строки.Количество() > 0);
	Если Не мПодменюПечати = Неопределено Тогда
		СформироватьПодменю(ЭтаФорма, мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
КонецПроцедуры // УстановитьКнопкиПечати()

