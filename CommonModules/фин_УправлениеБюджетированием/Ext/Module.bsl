
// Функция формирует список элементов перечисления, пропуская исключаемые
//
// Параметры
//  ИмяПеречисления - имя перечисления, как оно задано в конфигураторе
//  СтруктураИсключение - структура, содержащая имена перечислений, которые не должны попадать в список.
//
// Возвращаемое значение:
//   СписокЗначений - список элементов перечисления
//
Функция ПолучитьСписокЭлементовПеречисленияОтбор(ИмяПеречисления, СтруктураИсключение) Экспорт

	СписокЭлементовПеречисления = Новый СписокЗначений;
	
	Попытка
		КоллекцияЭлементовПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления;
	Исключение
		Возврат СписокЭлементовПеречисления;
	КонецПопытки;
	
	Для Каждого ЭлементПеречисления Из КоллекцияЭлементовПеречисления Цикл
		
		Если НЕ СтруктураИсключение.Свойство(ЭлементПеречисления.Имя) Тогда		
			СписокЭлементовПеречисления.Добавить(Перечисления[ИмяПеречисления][ЭлементПеречисления.Имя], ЭлементПеречисления.Синоним);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокЭлементовПеречисления;

КонецФункции // ОбщегоНазначения.ПолучитьСписокЭлементовПеречисления()

// Возвращает текст фрагмента запроса с выборками по стандартным периодам
//
// Параметры
//  Периодичность(строка):  – периодичность выборки данных запроса
//  Период(строка): имя измерения, в котором хранится период данных
//
// Возвращаемое значение:
//   ТекстЗапросаПоПериодам   – текст фрагмента запроса
//
Функция СформироватьТекстЗапросаПоПериодам(Периодичность,Период) Экспорт
	
	СписокПериодов=Новый СписокЗначений;
	СписокПериодов.Добавить("День");
	СписокПериодов.Добавить("Неделя");
	СписокПериодов.Добавить("Декада");
	СписокПериодов.Добавить("Месяц");
	СписокПериодов.Добавить("Квартал");
	СписокПериодов.Добавить("Полугодие");
	СписокПериодов.Добавить("Год");
	
	ТекстЗапросаПоПериодам="";
	
	НачальныйИндекс=СписокПериодов.Индекс(СписокПериодов.НайтиПоЗначению(?(Периодичность="","День",Периодичность)));
	
	Для Сч=НачальныйИндекс По СписокПериодов.Количество()-1 Цикл
		
		ТекущаяПериодичность=СписокПериодов.Получить(Сч).Значение;
		ТекстЗапросаПоПериодам=ТекстЗапросаПоПериодам+"
		|НачалоПериода("+Период+", "+ТекущаяПериодичность+") КАК Период"+ТекущаяПериодичность+",";
	
	КонецЦикла;
	
	Возврат ТекстЗапросаПоПериодам;

КонецФункции // СформироватьТекстЗапросаПоПериодам()

// Возвращает число дней в переданном периоде
//
// Параметры
//  Периодичность – Перечисление.фин_Периодичность элемент перечисления, 
//		для которого вычисляется количество дней
//
// Возвращаемое значение:
//   ЧислоДнейВПериоде (число)  – число дней в переданном периоде
//
Функция ЧислоДнейВПериоде(Периодичность) Экспорт
		
	Если Периодичность=Перечисления.фин_Периодичность.День Тогда
		ЧислоДнейВПериоде=1;
	ИначеЕсли Периодичность=Перечисления.фин_Периодичность.Неделя Тогда
		ЧислоДнейВПериоде=7;
	ИначеЕсли Периодичность=Перечисления.фин_Периодичность.Месяц Тогда
		ЧислоДнейВПериоде=30;
	ИначеЕсли Периодичность=Перечисления.фин_Периодичность.Квартал Тогда
		ЧислоДнейВПериоде=90;
	ИначеЕсли Периодичность=Перечисления.фин_Периодичность.Год Тогда
		ЧислоДнейВПериоде=365;
	Иначе
		ЧислоДнейВПериоде=0;
	КонецЕсли;
	
	Возврат ЧислоДнейВПериоде;	

КонецФункции // ЧислоДнейВПериоде()

// Проверяет наличие в системе курсов валют, необходимых для проведения документа
//
Процедура ПроверкаКурсовВалютСценария(ТаблицаВалют,Отказ,Заголовок) Экспорт
	
	ВалютаУпрУчета=фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	ВалютаРеглУчета=фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	ТекстОшибки="";
	
	Для Каждого СтрокаВалюта ИЗ ТаблицаВалют Цикл
		
		// Проверяем наличие курсов для валют операций
		
		Если СтрокаВалюта.Валюта <> ВалютаРеглУчета Тогда
			Если СтрокаВалюта.ИспользоватьКурсыСценария Тогда
				
				СтруктураОтбор=Новый Структура;
				СтруктураОтбор.Вставить("Валюта",СтрокаВалюта.Валюта);
				СтруктураОтбор.Вставить("Сценарий",СтрокаВалюта.Сценарий);
				СтруктураКурсов=РегистрыСведений[фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"КурсыВалютПоСценариям"].ПолучитьПоследнее(СтрокаВалюта.ДатаКурса,СтруктураОтбор);
				
			Иначе
				
				СтруктураОтбор=Новый Структура;
				СтруктураОтбор.Вставить("Валюта",СтрокаВалюта.Валюта);
				СтруктураКурсов=РегистрыСведений.КурсыВалют.ПолучитьПоследнее(СтрокаВалюта.ДатаКурса,СтруктураОтбор);
				
			КонецЕсли;
		
			Если СтруктураКурсов.Курс=NULL ИЛИ СтруктураКурсов.Курс=0 Тогда
				ТекстОшибки=ТекстОшибки+?(СтрДлина(ТекстОшибки)>0,Символы.ПС,"")+"Не указан курс валюты "+?(СтрокаВалюта.ИспользоватьКурсыСценария,"сценария ","")+Строка(СтрокаВалюта.Валюта)+" на дату "+СтрокаВалюта.ДатаКурса;
			ИначеЕсли СтруктураКурсов.Кратность=NULL ИЛИ СтруктураКурсов.Кратность=0 Тогда
				ТекстОшибки=ТекстОшибки+?(СтрДлина(ТекстОшибки)>0,Символы.ПС,"")+"Не указана кратность валюты "+?(СтрокаВалюта.ИспользоватьКурсыСценария,"сценария ","")+Строка(СтрокаВалюта.Валюта)+" на дату "+СтрокаВалюта.ДатаКурса;
			КонецЕсли;
		КонецЕсли;
		
		// Проверяем наличие курсов для валюты сценария
		
		Если НЕ (СтрокаВалюта.Валюта=СтрокаВалюта.ВалютаСценария ИЛИ ВалютаРеглУчета=СтрокаВалюта.ВалютаСценария) Тогда
			
			Если СтрокаВалюта.ИспользоватьКурсыСценария Тогда
				
				СтруктураОтбор=Новый Структура;
				СтруктураОтбор.Вставить("Валюта",СтрокаВалюта.ВалютаСценария);
				СтруктураОтбор.Вставить("Сценарий",СтрокаВалюта.Сценарий);
				СтруктураКурсов=РегистрыСведений[фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"КурсыВалютПоСценариям"].ПолучитьПоследнее(СтрокаВалюта.ДатаКурса,СтруктураОтбор);
				
			Иначе
				
				СтруктураОтбор=Новый Структура;
				СтруктураОтбор.Вставить("Валюта",СтрокаВалюта.ВалютаСценария);
				СтруктураКурсов=РегистрыСведений.КурсыВалют.ПолучитьПоследнее(СтрокаВалюта.ДатаКурса,СтруктураОтбор);
				
			КонецЕсли;
			
			Если СтруктураКурсов.Курс=NULL ИЛИ СтруктураКурсов.Курс=0 Тогда
				ТекстОшибки=ТекстОшибки+?(СтрДлина(ТекстОшибки)>0,Символы.ПС,"")+"Не указан курс валюты "+?(СтрокаВалюта.ИспользоватьКурсыСценария,"сценария ","")+Строка(СтрокаВалюта.ВалютаСценария)+" на дату "+СтрокаВалюта.ДатаКурса;
			ИначеЕсли СтруктураКурсов.Кратность=NULL ИЛИ СтруктураКурсов.Кратность=0 Тогда
				ТекстОшибки=ТекстОшибки+?(СтрДлина(ТекстОшибки)>0,Символы.ПС,"")+"Не указана кратность валюты "+?(СтрокаВалюта.ИспользоватьКурсыСценария,"сценария ","")+Строка(СтрокаВалюта.ВалютаСценария)+" на дату "+СтрокаВалюта.ДатаКурса;
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверяем наличие курсов для валюты упр. учета
		
		Если НЕ (СтрокаВалюта.Валюта=ВалютаУпрУчета ИЛИ ВалютаРеглУчета = ВалютаУпрУчета) Тогда
			
			Если СтрокаВалюта.ИспользоватьКурсыСценария Тогда
				
				СтруктураОтбор=Новый Структура;
				СтруктураОтбор.Вставить("Валюта",ВалютаУпрУчета);
				СтруктураОтбор.Вставить("Сценарий",СтрокаВалюта.Сценарий);
				СтруктураКурсов=РегистрыСведений[фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"КурсыВалютПоСценариям"].ПолучитьПоследнее(СтрокаВалюта.ДатаКурса,СтруктураОтбор);
				
			Иначе
				
				СтруктураОтбор=Новый Структура;
				СтруктураОтбор.Вставить("Валюта",ВалютаУпрУчета);
				СтруктураКурсов=РегистрыСведений.КурсыВалют.ПолучитьПоследнее(СтрокаВалюта.ДатаКурса,СтруктураОтбор);
				
			КонецЕсли;
			
			Если СтруктураКурсов.Курс=NULL ИЛИ СтруктураКурсов.Курс=0 Тогда
				ТекстОшибки=ТекстОшибки+?(СтрДлина(ТекстОшибки)>0,Символы.ПС,"")+"Не указан курс валюты "+?(СтрокаВалюта.ИспользоватьКурсыСценария,"сценария ","")+Строка(ВалютаУпрУчета)+" на дату "+СтрокаВалюта.ДатаКурса;
			ИначеЕсли СтруктураКурсов.Кратность=NULL ИЛИ СтруктураКурсов.Кратность=0 Тогда
				ТекстОшибки=ТекстОшибки+?(СтрДлина(ТекстОшибки)>0,Символы.ПС,"")+"Не указана кратность валюты "+?(СтрокаВалюта.ИспользоватьКурсыСценария,"сценария ","")+Строка(ВалютаУпрУчета)+" на дату "+СтрокаВалюта.ДатаКурса;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если СтрДлина(ТекстОшибки)>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Заголовок + Символы.ПС+ ТекстОшибки,,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверкаКурсовВалют()

// Возвращает курс валюты по сценарию на дату
//
//
// Параметры:
//  Валюта    - Валюта (элемент справочника "Валюты")
//  ДатаКурса - Дата, на которую следует получить курс
//  Сценарий (элемент справочника "Сценарии") - сценарий планирования
//
// Возвращаемое значение: 
//  Курс, с учетом кратности
//
Функция КурсВалютыПоСценарию(Валюта, ДатаКурса, Сценарий) Экспорт

	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("Валюта", Валюта);
	
	Если Сценарий.ИспользоватьКурсыСценария Тогда
		СтруктураОтбора.Вставить("Сценарий", Сценарий);
        Структура = РегистрыСведений[фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"КурсыВалютПоСценариям"].ПолучитьПоследнее(ДатаКурса, СтруктураОтбора);
	Иначе
		Структура = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, СтруктураОтбора);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции // КурсВалютыПоСценарию()

// Функция формирует список для отбора источников данных, у которых в составе
// ТЧ "ИзмеренияДляРаспределения" есть выбранное измерение бюджетирования.
//
Функция СписокИсточниковДляИзмерения(ИзмерениеБюджетирования) Экспорт

	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиДанныхДляРасчетовБюджетирования.Ссылка
	|ИЗ
	|	Справочник.фин_ИсточникиДанныхДляРасчетовБюджетирования КАК ИсточникиДанныхДляРасчетовБюджетирования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ИсточникиДанныхДляРасчетовБюджетирования.ИзмеренияИсточника КАК ИсточникиДанныхДляРасчетовБюджетированияИзмеренияИсточника
	|		ПО ИсточникиДанныхДляРасчетовБюджетирования.Ссылка = ИсточникиДанныхДляРасчетовБюджетированияИзмеренияИсточника.Ссылка
	|
	|ГДЕ
	|	ИсточникиДанныхДляРасчетовБюджетированияИзмеренияИсточника.ИзмерениеБюджетирования = &ИзмерениеБюджетирования";

	Запрос.УстановитьПараметр("ИзмерениеБюджетирования",ИзмерениеБюджетирования);

	СписокОтбора=Новый СписокЗначений;
    СписокОтбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокОтбора;

КонецФункции // СписокИсточниковДляИзмерения()

// Возвращает структуру с курсами и кратностями для валют, переданных в качестве параметра
//
// Параметры
//  СтруктураГруппаВалют: Структура - Структура, содержащее валюты, для которых необходимо получить курсы
//	ДатаКурса: Дата - дата, на которую необходимо получить курсы.
//
// Возвращаемое значение:
//   СтруктураКурсыВалют: структура - структура, содержащая курсы для указанных валют.
//
Функция ПолучитьКурсыСценарияДляГруппыВалют(СтруктураГруппаВалют,ДатаКурса,Сценарий) Экспорт
	
	Запрос=Новый Запрос;
	СписокВалют=Новый СписокЗначений;
	
	Для каждого Валюта Из СтруктураГруппаВалют Цикл
	
		СписокВалют.Добавить(Валюта.Значение);
	
	КонецЦикла;
	
	ТекстЗапроса="ВЫБРАТЬ
	             |	КурсыВалютСрезПоследних.Курс КАК Курс,
	             |	КурсыВалютСрезПоследних.Кратность КАК Кратность,
	             |	КурсыВалютСрезПоследних.Валюта.Код КАК КодВалюты,
	             |	КурсыВалютСрезПоследних.Валюта.Ссылка КАК Валюта";
				 
	Если Сценарий.ИспользоватьКурсыСценария Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|ИЗ
	    |	РегистрСведений."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"КурсыВалютПоСценариям.СрезПоследних(&ДатаКурса, (Валюта.Код В (&СписокВалют)) И (Сценарий=&Сценарий)) КАК КурсыВалютСрезПоследних";
	Иначе
		ТекстЗапроса=ТекстЗапроса+"
		|ИЗ
	    |	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, Валюта.Код В (&СписокВалют)) КАК КурсыВалютСрезПоследних";
	КонецЕсли;
	
	Запрос.Текст=ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДатаКурса",ДатаКурса);
	Запрос.УстановитьПараметр("СписокВалют",СписокВалют);
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	
	СтруктураКурсыВалют=Новый Структура;

	Результат=Запрос.Выполнить().Выгрузить();;
		
	Для каждого Валюта Из СтруктураГруппаВалют Цикл
		
		СтрокаВалюта=Результат.Найти(Валюта.Значение,"КодВалюты");
		
		Если НЕ СтрокаВалюта=Неопределено Тогда
		   	СтруктураКурсыВалют.Вставить(Валюта.Ключ+"Курс",СтрокаВалюта.Курс);
			СтруктураКурсыВалют.Вставить(Валюта.Ключ+"Кратность",СтрокаВалюта.Кратность);
			СтруктураКурсыВалют.Вставить(Валюта.Ключ,СтрокаВалюта.Валюта);
		Иначе
			СтруктураКурсыВалют.Вставить(Валюта.Ключ+"Курс",0);
			СтруктураКурсыВалют.Вставить(Валюта.Ключ+"Кратность",0);
			СтруктураКурсыВалют.Вставить(Валюта.Ключ,Новый(Тип("СправочникСсылка.Валюты")));
		КонецЕсли;
		
	КонецЦикла; 		
	
	Возврат СтруктураКурсыВалют;

КонецФункции // УправлениеДенежнымиСредствами.ПолучитьКурсыДляГруппыВалют()

// Возвращает количество периодов между указанными датами
//
// Параметры
//  ДатаНачала, ДатаКонца: Дата  – границы интервала
//  Периодичность (Перечисления.фин_Периодичность): периодичность планирования
//
// Возвращаемое значение:
//   КоличествоПериодов   – количество периодов в переданном интервале
//
Функция РассчитатьКоличествоПериодов(ДатаНачала,ДатаКонца,Периодичность) Экспорт
	
	Если ДатаНачала<ДатаКонца Тогда
		
		ИсходнаяДата=ДатаНачала;
		КонечнаяДата=ДатаКонца;
		Коэффициент=1;
		
	ИначеЕсли  ДатаНачала>ДатаКонца Тогда
		
		ИсходнаяДата=ДатаКонца;
		КонечнаяДата=ДатаНачала;
		Коэффициент=-1;
		
	ИначеЕсли ДатаНачала=ДатаКонца Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	
	КоличествоПериодов=0;
	ТекущаяДата=ИсходнаяДата;
	
	Пока фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ТекущаяДата,Периодичность)<=КонецДня(КонечнаяДата) Цикл
		
		КоличествоПериодов=КоличествоПериодов+1;
		ТекущаяДата=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(ТекущаяДата,Периодичность,1);
		
	КонецЦикла;
	
	Возврат КоличествоПериодов*Коэффициент;
	
КонецФункции // РассчитатьКоличествоПериодов()

// возвращает список вариантов периода, имеющих меньшую периодичность 
//
Функция ПолучитьСписокВариантовПериодаСМеньшейПериодичностью(Сценарий) Экспорт
	 СписокСценариев = Новый СписокЗначений;
	 СписокСценариев.Добавить(Перечисления.фин_Периодичность.Год);
	 СписокСценариев.Добавить(Перечисления.фин_Периодичность.Полугодие);
	 СписокСценариев.Добавить(Перечисления.фин_Периодичность.Квартал);
	 СписокСценариев.Добавить(Перечисления.фин_Периодичность.Месяц);
	 СписокСценариев.Добавить(Перечисления.фин_Периодичность.Декада);
	 СписокСценариев.Добавить(Перечисления.фин_Периодичность.Неделя);
	 СписокСценариев.Добавить(Перечисления.фин_Периодичность.День);
	 Если ?(ТипЗнч(Сценарий)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования(),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),Сценарий) = Перечисления.фин_Периодичность.ПустаяСсылка() Тогда
	 	Возврат СписокСценариев;
	 КонецЕсли;
	 Индекс = СписокСценариев.Индекс(СписокСценариев.НайтиПоЗначению(?(ТипЗнч(Сценарий)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования(),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),Сценарий)));
	 СписокВозврат = Новый СписокЗначений;
	 Для Инд = Индекс По СписокСценариев.Количество()-1 Цикл
		 СписокВозврат.Добавить(СписокСценариев.Получить(Инд).Значение);
	 КонецЦикла;
	 Возврат СписокВозврат;
КонецФункции //ПолучитьСписокВариантовПериодаСМеньшейПериодичностью

Функция ПериодичностьСценария(Сценарий) Экспорт
	Возврат Сценарий[фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолеПериодичность()];	
КонецФункции

Функция ПродолжительностьЦиклаСценария(Сценарий) Экспорт
	Возврат Сценарий.ПродолжительностьЦикла;	
КонецФункции

Функция СписокВидовДокументовРегистрируемыхПоФакту(СписокВидов=Неопределено) Экспорт
	Если СписокВидов = Неопределено Тогда
	 	СписокВидов = Новый СписокЗначений;
	КонецЕсли;
	 Для Каждого Документ Из Метаданные.Документы Цикл
		УчастиеВОтраженииФакта = Ложь;
		Подписка = Метаданные.ПодпискиНаСобытия.фин_БюджетированиеФормированиеПроводокПриПроведенииПервичныхДокументов;
		УчастиеВОтраженииФакта = Подписка.Источник.СодержитТип(Тип("ДокументОбъект."+Документ.Имя));
		Если Не УчастиеВОтраженииФакта Тогда
			Подписка = Метаданные.ПодпискиНаСобытия.фин_БюджетированиеФормированиеПроводокПриЗаписиПервичныхДокументов;
			УчастиеВОтраженииФакта = Подписка.Источник.СодержитТип(Тип("ДокументОбъект."+Документ.Имя));
		КонецЕсли;
		//Если (Не УчастиеВОтраженииФакта) И УчитыватьДокументооборот Тогда
		//	Подписка = Метаданные.ПодпискиНаСобытия.усд_ПередЗаписьюДокументаРегистрацияВСистемеСогласования;
		//	УчастиеВОтраженииФакта = Подписка.Источник.СодержитТип(Тип("ДокументОбъект."+Документ.Имя));
		//КонецЕсли;
		Если УчастиеВОтраженииФакта Тогда
			СписокВидов.Добавить(Документ.Имя);
		КонецЕсли;
	КонецЦикла;
	Возврат СписокВидов;
КонецФункции

Функция СписокРегистровРегистрируемыхПоФакту(СписокВидов=Неопределено) Экспорт
	Если СписокВидов = Неопределено Тогда
	 	СписокВидов = Новый СписокЗначений;
	КонецЕсли;
	 ВидыРегистров = Новый Массив;
	 ВидыРегистров.Добавить("РегистрыНакопления");
	 ВидыРегистров.Добавить("РегистрыБухгалтерии");
	 ВидыРегистров.Добавить("РегистрыРасчета");
	 ВидыРегистров.Добавить("РегистрыСведений");
	 Для Каждого ВидРегистров Из ВидыРегистров Цикл
		 Для Каждого Регистр Из Метаданные[ВидРегистров] Цикл
			УчастиеВОтраженииФакта = Ложь;
			Подписка = Метаданные.ПодпискиНаСобытия["фин_БюджетированиеФормированиеПроводок"+ВидРегистров];
			УчастиеВОтраженииФакта = Подписка.Источник.СодержитТип(Тип(СтрЗаменить(ВидРегистров,"Регистры","Регистр")+"НаборЗаписей."+Регистр.Имя));
			Если УчастиеВОтраженииФакта Тогда
				СписокВидов.Добавить(Регистр.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат СписокВидов;
КонецФункции

Процедура ЗарегистрироватьДвиженияПоСформированнымБюджетам(ТаблицаРеквизиты, Движения, Отказ) Экспорт
	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.ВидОперации <> Перечисления.фин_ВидыОперацийБюджет.Корректировка И Реквизиты.ВидОперации <> Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
		ДвижениеПоБюджетам 									= Движения.фин_СформированныеБюджеты.Добавить();
		ДвижениеПоБюджетам.Организация 						= Реквизиты.Организация;
		ДвижениеПоБюджетам.Бюджет 							= Реквизиты.ФормируемыйБюджет;
		ДвижениеПоБюджетам.ВидОперации 						= Реквизиты.ВидОперации;
		ДвижениеПоБюджетам.Сценарий 						= Реквизиты.Сценарий;
		ДвижениеПоБюджетам.УправленческоеПодразделение 		= Реквизиты.УправленческоеПодразделение;
		ДвижениеПоБюджетам.Проект 							= Реквизиты.Проект;
		ДвижениеПоБюджетам.ПериодПланирования 				= Реквизиты.ПериодПланирования;
		ДвижениеПоБюджетам.ПредставлениеПериодаПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(Реквизиты.ПериодПланирования,Строка(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Реквизиты.Сценарий)));
		ДвижениеПоБюджетам.ЗадаватьКурсыВалютВДокументе 	= Реквизиты.ЗадаватьКурсыВалютВДокументе;
		ДвижениеПоБюджетам.УровеньДетализацииБюджета		= Реквизиты.УровеньДетализацииБюджета;
		ДвижениеПоБюджетам.ЕдинаяВалюта 					= Реквизиты.ЕдинаяВалюта;
		ДвижениеПоБюджетам.ВалютаДокумента 					= Реквизиты.ВалютаДокумента;
		Движения.фин_СформированныеБюджеты.Записывать = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПодготовитьТаблицуДанныхДокументаБюджет(ТаблицаДанныхДокумента,Документ) Экспорт
	Если ТаблицаДанныхДокумента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям") Тогда
		ТаблицаДанныхДокумента.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаДанныхДокумента.ЗаполнитьЗначения(Документ.Организация,"Организация");
	КонецЕсли;
	ТаблицаДанныхДокумента.Колонки.Добавить("Период",Новый ОписаниеТипов("Дата"));
	ТаблицаДанныхДокумента.ЗаполнитьЗначения(Документ.Дата,"Период");
	ТаблицаДанныхДокумента.Колонки.Добавить("ДокументПланирования",Новый ОписаниеТипов("ДокументСсылка.фин_Бюджет"));
	ТаблицаДанныхДокумента.ЗаполнитьЗначения(Документ.Ссылка,"ДокументПланирования");
	Возврат ТаблицаДанныхДокумента;
КонецФункции

Процедура ЗарегистрироватьДвиженияПоРегиструОборотыБюджетов(Реквизиты, ТаблицаДвижений, Движения, Отказ) Экспорт
	ПропускатьНеутвержденные = Реквизиты.БюджетыСНеУтвержденнымиСтроками = Перечисления.фин_СпособыРаботыСНеУтвержденнымиСтрокамиБюджета.НеОтражатьНеУтвержденныеСтрокиВУчете;
	Для Каждого СтрокаДанных Из ТаблицаДвижений Цикл
		Если ПропускатьНеутвержденные И СтрокаДанных.Состояние <> фин_ОбщегоНазначенияВызовСервераПовтИсп.СостояниеОбъектаУтвержден() Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Движения.фин_ОборотыБюджетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДанных);
	КонецЦикла;
	Движения.фин_ОборотыБюджетов.Записывать = Истина;
КонецПроцедуры

Процедура ЗарегистрироватьДвиженияПоРегиструКорректировок(Реквизиты, ТаблицаДвижений, Движения, Отказ) Экспорт
	ПропускатьНеутвержденные = Реквизиты.БюджетыСНеУтвержденнымиСтроками = Перечисления.фин_СпособыРаботыСНеУтвержденнымиСтрокамиБюджета.НеОтражатьНеУтвержденныеСтрокиВУчете;
	Для Каждого СтрокаДанных Из ТаблицаДвижений Цикл
		Если ПропускатьНеутвержденные И СтрокаДанных.Состояние <> фин_ОбщегоНазначенияВызовСервераПовтИсп.СостояниеОбъектаУтвержден() Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Движения.фин_МониторингКорректировок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДанных);
	КонецЦикла;
	Движения.фин_МониторингКорректировок.Записывать = Истина;
КонецПроцедуры

Процедура ЗарегистрироватьДвиженияПоРегиструОтклонений(Реквизиты, ТаблицаДвижений, Движения, Отказ) Экспорт
	ПропускатьНеутвержденные = Реквизиты.БюджетыСНеУтвержденнымиСтроками = Перечисления.фин_СпособыРаботыСНеУтвержденнымиСтрокамиБюджета.НеОтражатьНеУтвержденныеСтрокиВУчете;
	Для Каждого СтрокаДанных Из ТаблицаДвижений Цикл
		Если СтрокаДанных.Состояние = фин_ОбщегоНазначенияВызовСервераПовтИсп.СостояниеОбъектаУтвержден() Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Движения.фин_МониторингНепринятияСтрокБюджетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДанных);
		НоваяСтрока.ВидОперации = Реквизиты.ВидОперации;
	КонецЦикла;
	Если Движения.фин_МониторингНепринятияСтрокБюджетов.Количество()>0 Тогда
		Движения.фин_МониторингНепринятияСтрокБюджетов.Записывать = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ЗарегистрироватьДвиженияПоРегиструКонтролируемыхОборотов(Реквизиты, ТаблицаДвижений, Движения, Отказ) Экспорт
	Перем РазрезыСвертки;
	ТаблицаДляРегистрацииКонтролируемых = ПодготовитьТаблицуКонтролируемых(ТаблицаДвижений,Реквизиты,Отказ,РазрезыСвертки);
	Если ТаблицаДляРегистрацииКонтролируемых = Неопределено Тогда
		Возврат;
	КонецЕсли;
	БюджетированиеПоОрганизациям 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДляРегистрацииКонтролируемых Цикл
		Движение = Движения.фин_КонтролируемыеФинансовыеПоказатели.Добавить();
		ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
		Движение.Сценарий 								= Реквизиты.Сценарий;
		Движение.ИспользованиеКонтролируемогоЗначения 	= Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриПланировании;
		Если БюджетированиеПоОрганизациям Тогда
			Движение.Организация 						= Реквизиты.Организация;
		КонецЕсли;
		
	КонецЦикла;
	Движения.фин_КонтролируемыеФинансовыеПоказатели.Записывать = ТаблицаДляРегистрацииКонтролируемых.Количество()>0;	
КонецПроцедуры


// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Функция ПодготовитьТаблицуКонтролируемых(ТаблицаДвижений,Реквизиты,Отказ,РазрезыСвертки)
	
	ТаблицаОборотовДокументаДляКонтроля = ТаблицаДвижений.Скопировать();
	ПродолжительностьЦикла 			= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Реквизиты.Сценарий,Реквизиты.ПериодПланирования);
	БюджетированиеПоОрганизациям 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
	
	ТабКонтролируемыхДвижений = РегистрыНакопления.фин_КонтролируемыеФинансовыеПоказатели.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ТабКонтролируемыхДвижений.Колонки.Удалить("Активность");
	
	РазрезыСвертки 					= "";
	РазрезыСверткиКонтролируемых 	= "";
	МассивИменРазрезов = Новый Массив;
	Для Каждого РазрезЭлемент Из фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйМассивРазрезов") Цикл
		ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент);
		МассивИменРазрезов.Добавить(ИмяРазреза);
		РазрезыСвертки=РазрезыСвертки+","+ИмяРазреза;
		Если Найти(ИмяРазреза,"Разрез") <> 0 Тогда
			ТаблицаОборотовДокументаДляКонтроля.Колонки.Добавить(ИмяРазреза);
			Для Каждого СтрокаТаблицы Из ТаблицаОборотовДокументаДляКонтроля Цикл
				СтрокаТаблицы[ИмяРазреза] = СтрокаТаблицы.ДополнительныеРазрезы[ИмяРазреза];
			КонецЦикла;
		Иначе
			РазрезыСверткиКонтролируемых=РазрезыСверткиКонтролируемых+","+ИмяРазреза;
		КонецЕсли;
	КонецЦикла;
	
	//таблица соответствия статей бюджета фин. показателям
	СтрокиОсновные 	= Неопределено; //ТаблицаДвижений.Скопировать();
	//СтрокиОсновные.Свернуть("ФинансовыйПоказатель");
	
	ТаблицаОборотовДокументаДляКонтроля.Свернуть("Период,ПериодПланирования,ФинансовыйПоказатель"+РазрезыСвертки,"СуммаСценария");
	КЭШ_РазрезыФинансовыхПоказателей 	= Новый Соответствие;
	КЭШ_ТаблицаОграничений 				= Новый Соответствие;
	
	ПериодыПланирования = Новый Массив;
	ПериодыПланирования.Добавить(Реквизиты.ПериодПланирования);
	ПродолжительностьЦикла 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Реквизиты.Сценарий,Реквизиты.ПериодПланирования);
	Если ПродолжительностьЦикла > 1 Тогда
		Для Инд = 2 По ПродолжительностьЦикла Цикл
			ПериодыПланирования.Добавить(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(Реквизиты.ПериодПланирования,Реквизиты.Сценарий,Инд-1));
		КонецЦикла;
	КонецЕсли;
	ИмеющиесяПунктыКонтроля = фин_УправлениеЗависимостямиСтатейБюджетов.ПолучитьСписокПодконтрольныхПоказателей(Реквизиты.ФормируемыйБюджет,Реквизиты.Сценарий,БюджетированиеПоОрганизациям,Реквизиты.Организация,ПериодыПланирования,Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриПланировании);
	Если ИмеющиесяПунктыКонтроля.Количество()>0 Тогда
		Для Каждого СтрокаОборотовДляКонтроля Из ТаблицаОборотовДокументаДляКонтроля Цикл
			Если ИмеющиесяПунктыКонтроля.НайтиСтроки(Новый Структура("ФинансовыйПоказатель,Период",СтрокаОборотовДляКонтроля.ФинансовыйПоказатель,СтрокаОборотовДляКонтроля.ПериодПланирования)).Количество()=0 Тогда
				Продолжить;
			КонецЕсли;
			ТабКонтролируемыхЗначений = фин_УправлениеЗависимостямиСтатейБюджетов.ПроверкаКонтролируемыхЗначений(Реквизиты, ТаблицаОборотовДокументаДляКонтроля.Индекс(СтрокаОборотовДляКонтроля),ТаблицаОборотовДокументаДляКонтроля,Реквизиты.Сценарий,БюджетированиеПоОрганизациям,Реквизиты.Организация,СтрокиОсновные,КЭШ_РазрезыФинансовыхПоказателей,КЭШ_ТаблицаОграничений);
			Если ТипЗнч(ТабКонтролируемыхЗначений)=Тип("Булево") И НЕ ТабКонтролируемыхЗначений Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Превышение контролируемого значения. Проведение отменено!",Реквизиты.Ссылка,,,Отказ);
				Возврат Неопределено;
			Иначе
				Если ТабКонтролируемыхЗначений.Количество()>0 Тогда
					Если ТабКонтролируемыхЗначений.Колонки.Найти("ДополнительныеРазрезы")=Неопределено Тогда
						ТабКонтролируемыхЗначений.Колонки.Добавить("ДополнительныеРазрезы");
					КонецЕсли;
					Если ТабКонтролируемыхЗначений.Колонки.Найти("ПериодПланирования")=Неопределено Тогда
						ТабКонтролируемыхЗначений.Колонки.Добавить("ПериодПланирования");
					КонецЕсли;
					Для Каждого СтрокаТаблицы Из ТабКонтролируемыхЗначений Цикл
						СтрокаТаблицы.ПериодПланирования = СтрокаТаблицы.Период;
						СтруктураПолей = Новый Структура;
						Для Каждого ИмяРазреза Из МассивИменРазрезов Цикл
							Если ТабКонтролируемыхЗначений.Колонки.Найти(ИмяРазреза)<>Неопределено Тогда
								СтруктураПолей.Вставить(ИмяРазреза,СтрокаТаблицы[ИмяРазреза]);
							КонецЕсли;
						КонецЦикла;
						СтрокаТаблицы.ДополнительныеРазрезы = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОпределитьПозициюКлассификатораПоСтруктуре(СтруктураПолей);
					КонецЦикла;
					фин_ОбщегоНазначенияСервер.ЗагрузитьВТаблицуЗначений(ТабКонтролируемыхЗначений,ТабКонтролируемыхДвижений);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ТабКонтролируемыхДвижений.Количество()>0 Тогда
		Возврат ТабКонтролируемыхДвижений;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // ДвиженияПоРегистрам()

Процедура ЗарегистрироватьДвиженияПоАвтоматическиРегистрируемымЛимитам(ТаблицаРеквизиты,ТаблицаДанныхДокумента,ТаблицаНастройкиРегулярногоКонтроляПоказателей,ТаблицаУстановкаОграниченийПоБюджетам, Движения, Отказ) Экспорт
	Если ТаблицаНастройкиРегулярногоКонтроляПоказателей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	ДобавитьДанныеПоКонтролируемымЗначениям(Движения,ТаблицаДанныхДокумента,ТаблицаНастройкиРегулярногоКонтроляПоказателей,ТаблицаУстановкаОграниченийПоБюджетам,Реквизиты);
	
КонецПроцедуры

Процедура ДобавитьДанныеПоКонтролируемымЗначениям(Движения,мТаблицаДанныхДокумента,ТаблицаНастройкиРегулярногоКонтроляПоказателей,ТаблицаУстановкаОграниченийПоБюджетам,Реквизиты)
	БюджетированиеПоОрганизациям 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
	ФинансовыеПоказатели 	= мТаблицаДанныхДокумента.ВыгрузитьКолонку("ФинансовыйПоказатель");
    СписокФП 				= Новый СписокЗначений;
	СписокФП.ЗагрузитьЗначения(ФинансовыеПоказатели);
	ТаблицаДанныхДокумента = мТаблицаДанныхДокумента.Скопировать();
	РазрезыСвертки 					= "";
	РазрезыСверткиКонтролируемых 	= "";
	МассивИменРазрезов = Новый Массив;
	ПолныйМассивИспользуемыхРазрезов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйМассивРазрезов");
	Для Каждого РазрезЭлемент Из ПолныйМассивИспользуемыхРазрезов Цикл
		ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент);
		МассивИменРазрезов.Добавить(ИмяРазреза);
		РазрезыСвертки=РазрезыСвертки+","+ИмяРазреза;
		Если Найти(ИмяРазреза,"Разрез") <> 0 Тогда
			ТаблицаДанныхДокумента.Колонки.Добавить(ИмяРазреза);
			Для Каждого СтрокаТаблицы Из ТаблицаДанныхДокумента Цикл
				СтрокаТаблицы[ИмяРазреза] = СтрокаТаблицы.ДополнительныеРазрезы[ИмяРазреза];
			КонецЦикла;
		Иначе
			РазрезыСверткиКонтролируемых=РазрезыСверткиКонтролируемых+","+ИмяРазреза;
		КонецЕсли;
	КонецЦикла;
	
    ФинансовыеПоказатели.Очистить();
	ТаблицаОборотыКонтролируемые = Новый ТаблицаЗначений;
	Для Каждого Колонка Из ТаблицаДанныхДокумента.Колонки Цикл
		Если Метаданные.Документы.фин_Бюджет.ТабличныеЧасти.ОборотыПоСтатьям.Реквизиты.Найти(Колонка.Имя)<>Неопределено Тогда
			ТипЗначения = Метаданные.Документы.фин_Бюджет.ТабличныеЧасти.ОборотыПоСтатьям.Реквизиты.Найти(Колонка.Имя).Тип;
		Иначе
			ТипЗначения = Колонка.ТипЗначения;
		КонецЕсли;
		ТаблицаОборотыКонтролируемые.Колонки.Добавить(Колонка.Имя,ТипЗначения);
	КонецЦикла;
	СписокВсехРазрезов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ВсеРазрезы();
	Для Каждого Выборка Из ТаблицаНастройкиРегулярногоКонтроляПоказателей Цикл
		Если ФинансовыеПоказатели.Найти(Выборка.ФинансовыйПоказатель)=Неопределено Тогда
			ФинансовыеПоказатели.Добавить(Выборка.ФинансовыйПоказатель);
		КонецЕсли;
		СтрокаСвойстваИсключаемые = "";
		СтруктураПоискаРазрезов = Новый Структура;
		Для Каждого Разрез Из СписокВсехРазрезов Цикл
			Если НЕ Выборка[Разрез] Тогда
				Если ПолныйМассивИспользуемыхРазрезов.Найти(Перечисления.фин_ФактическиеПоказателиБюджетирования[Разрез])<>Неопределено Тогда//Найти(Разрез,"Разрез")=0 Тогда
					СтрокаСвойстваИсключаемые=СтрокаСвойстваИсключаемые+?(СтрокаСвойстваИсключаемые="","",",")+Разрез;
				КонецЕсли;
			ИначеЕсли Найти(Разрез,"Разрез")<>0 Тогда
				СтруктураПоискаРазрезов.Вставить(Разрез);
			КонецЕсли;
		КонецЦикла;
		СтрокиПоПоказателю = ТаблицаДанныхДокумента.НайтиСтроки(Новый Структура("ФинансовыйПоказатель",Выборка.ФинансовыйПоказатель)); 
		Для Каждого СтрокаПоказателя Из СтрокиПоПоказателю Цикл
			Если СтрокаПоказателя.СуммаСценария = 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока =  ТаблицаОборотыКонтролируемые.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПоказателя,,СтрокаСвойстваИсключаемые);
			ЗаполнитьЗначенияСвойств(СтруктураПоискаРазрезов,НоваяСтрока);
			НоваяСтрока.ДополнительныеРазрезы = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОпределитьПозициюКлассификатораПоСтруктуре(СтруктураПоискаРазрезов);
		КонецЦикла;
	КонецЦикла;
	ТаблицаОборотыКонтролируемые.Свернуть("ПериодПланирования,ФинансовыйПоказатель,Сценарий,ДополнительныеРазрезы"+РазрезыСвертки,"СуммаСценария");
    ТаблицаОборотыКонтролируемые.Колонки.Сценарий.Имя = "КонтролирующийСценарий";
    ТаблицаОборотыКонтролируемые.Колонки.СуммаСценария.Имя = "СуммаСценарияКонтроль";
	ТаблицаОборотыКонтролируемые.Колонки.Добавить("Период");
	ТаблицаОборотыКонтролируемые.Колонки.Добавить("Организация");
	ТаблицаОборотыКонтролируемые.Колонки.Добавить("Активность");
	ТаблицаОборотыКонтролируемые.Колонки.Добавить("ИспользованиеКонтролируемогоЗначения");
	ТаблицаОборотыКонтролируемые.Колонки.Добавить("ВидКонтролируемогоЗначения");
	ТаблицаОборотыКонтролируемые.ЗаполнитьЗначения(Истина,"Активность");
	ТаблицаОборотыКонтролируемые.ЗаполнитьЗначения(Реквизиты.Дата,"Период");
	Если БюджетированиеПоОрганизациям Тогда
		ТаблицаОборотыКонтролируемые.ЗаполнитьЗначения(Реквизиты.Организация,"Организация");
	КонецЕсли;
	ТаблицаОборотыКонтролируемые.ЗаполнитьЗначения(Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении,"ИспользованиеКонтролируемогоЗначения");
	//СтруктураПоискаДополнительныхРазрезов = Новый Структура;
	//Для Каждого ИмяРазреза Из фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокИменРазрезов") Цикл
	//	Если ТаблицаОборотыКонтролируемые.Колонки.Найти(ИмяРазреза)<>Неопределено Тогда
	//		СтруктураПоискаДополнительныхРазрезов.Вставить(ИмяРазреза);
	//	КонецЕсли;
	//КонецЦикла;
	Для Каждого Выборка Из ТаблицаНастройкиРегулярногоКонтроляПоказателей Цикл
		СтрокиПоПоказателю = ТаблицаОборотыКонтролируемые.НайтиСтроки(Новый Структура("ФинансовыйПоказатель",Выборка.ФинансовыйПоказатель)); 
		Для Каждого СтрокаПоказателя Из СтрокиПоПоказателю Цикл
			Если Выборка.ВидОтклоненияКонтролируемыхЗначений = Перечисления.фин_ВидыОтклоненийКонтролируемыхЗначенийБюджетов.Относительное Тогда
				СтрокаПоказателя.СуммаСценарияКонтроль = СтрокаПоказателя.СуммаСценарияКонтроль + СтрокаПоказателя.СуммаСценарияКонтроль * Выборка.Отклонение/100;
			ИначеЕсли Реквизиты.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Бюджет Тогда
				СтрокаПоказателя.СуммаСценарияКонтроль = СтрокаПоказателя.СуммаСценарияКонтроль + Выборка.Отклонение;
			КонецЕсли;
			СтрокаПоказателя.ВидКонтролируемогоЗначения = Выборка.ВидКонтроля;
			//ЗаполнитьЗначенияСвойств(СтруктураПоискаДополнительныхРазрезов,СтрокаПоказателя);
//			СтрокаПоказателя.ДополнительныеРазрезы = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОпределитьПозициюКлассификатораПоСтруктуре(СтруктураПоискаДополнительныхРазрезов);
			Если Выборка.Видконтроля = Перечисления.фин_ВидыКонтролируемогоЗначенияБюджета.Ограничивающее Тогда
				НоваяСтрока =  Движения.фин_КонтролируемыеФинансовыеПоказатели.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПоказателя);
			Иначе
				НоваяСтрока = Движения.фин_ЦелевыеЗначенияПоБюджетам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПоказателя);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	СтрокаСвертки = "";
	Для Каждого Колонка Из ТаблицаОборотыКонтролируемые.Колонки Цикл
		Если Колонка.Имя="СуммаСценарияКонтроль" Тогда
			Продолжить;
		КонецЕсли;
		СтрокаСвертки = СтрокаСвертки + ?(СтрокаСвертки="","",",") + Колонка.Имя;
	КонецЦикла;
	ТаблицаОборотыКонтролируемые.Свернуть(СтрокаСвертки,"СуммаСценарияКонтроль");
	// движения по наличию контроля

	//СтрокиУдалить = Новый Массив;
	//СтруктураПоиска = Новый Структура("ФинансовыйПоказатель,ВидКонтролируемогоЗначения,ПериодПланирования,ДополнительныеРазрезы"+РазрезыСвертки);
	//Для Каждого ВыборкаДетальныеЗаписи Из ТаблицаУстановкаОграниченийПоБюджетам Цикл
	//    ЗаполнитьЗначенияСвойств(СтруктураПоиска,ВыборкаДетальныеЗаписи);
	//	СтруктураПоиска.ПериодПланирования 	= ВыборкаДетальныеЗаписи.ПериодПланирования;
	//	СтрокиНайдено 						= ТаблицаОборотыКонтролируемые.НайтиСтроки(СтруктураПоиска);
	//	Для Каждого СтрокаНайдено Из СтрокиНайдено Цикл
	//		СтрокиУдалить.Добавить(СтрокаНайдено);
	//	КонецЦикла;
	//КонецЦикла;
	//Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
	//	ТаблицаОборотыКонтролируемые.Удалить(СтрокаУдалить);
	//КонецЦикла;
	Для Каждого СтрокаКонтроль Из ТаблицаОборотыКонтролируемые Цикл
		Если ФинансовыеПоказатели.Найти(СтрокаКонтроль.ФинансовыйПоказатель)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяЗапись = Движения.фин_УстановкаОграниченийПоБюджетам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись,СтрокаКонтроль);
		НоваяЗапись.ИспользованиеКонтролируемогоЗначения	= Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении;
		НоваяЗапись.ПериодПланирования 						= СтрокаКонтроль.ПериодПланирования;
	КонецЦикла;
	Движения.фин_УстановкаОграниченийПоБюджетам.Записывать = Движения.фин_УстановкаОграниченийПоБюджетам.Количество()>0;
	Движения.фин_ЦелевыеЗначенияПоБюджетам.Записывать = Движения.фин_УстановкаОграниченийПоБюджетам.Количество()>0;
	Движения.фин_КонтролируемыеФинансовыеПоказатели.Записывать = Движения.фин_УстановкаОграниченийПоБюджетам.Количество()>0;
КонецПроцедуры

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   Таблица значений - обороты по контролирующему сценарию, соответствующие выбранным
//	 аналитическим измерениям табличной части документа
//
Функция ПодготовитьТаблицуОборотовКонтролирующегоСценария(ТаблицаОборотов) Экспорт
	
	Если ТаблицаОборотов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабКонтролирующихОборотов = ТаблицаОборотов.Скопировать();
	СписокИзмерений = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйМассивРазрезов");
	
	ТабКонтролирующихОборотов.Колонки.Добавить("ДополнительныеРазрезы",Новый ОписаниеТипов("СправочникСсылка.фин_КлассификаторНаборовДополнительныхРазрезов"));
	Для Каждого СтрокаОборот Из ТабКонтролирующихОборотов Цикл
		СтруктураПараметров = Новый Структура;
		Для Каждого ЭлементСписка Из СписокИзмерений Цикл
			ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ЭлементСписка);
			Если ТабКонтролирующихОборотов.Колонки.Найти(ИмяРазреза)<>Неопределено Тогда
				СтруктураПараметров.Вставить(ИмяРазреза,СтрокаОборот[ИмяРазреза]);
			КонецЕсли;
		КонецЦикла;
		СтрокаОборот.ДополнительныеРазрезы = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОпределитьПозициюКлассификатораПоСтруктуре(СтруктураПараметров);
	КонецЦикла;
	
	Возврат ТабКонтролирующихОборотов;	
	
КонецФункции // ПолучитьОборотыКонтролирующегоСценария()

Функция ПодготовитьТаблицуИсправленийКЛимитам(ТаблицаОборотов,СуществующиеДвижения,Реквизиты) Экспорт
	ТабЗначенийОборотов = ТаблицаОборотов.Скопировать();
	мМассивИзмерений 	= Новый Массив;
	СписокИзмерений 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов");
	БюджетированиеПоОрганизациям = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
	Для Каждого ЭлементСписка Из СписокИзмерений Цикл
		ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ЭлементСписка.Значение);
		Если Найти(ИмяРазреза,"Разрез")<>0 Тогда
			Продолжить;
		КонецЕсли;
		мМассивИзмерений.Добавить(ИмяРазреза);
	КонецЦикла;
	мМассивИзмерений.Добавить("Сценарий");
	мМассивИзмерений.Добавить("ФинансовыйПоказатель");
	мМассивИзмерений.Добавить("ИспользованиеКонтролируемогоЗначения");
	Если БюджетированиеПоОрганизациям Тогда
		мМассивИзмерений.Добавить("Организация");
	Иначе
		ТабЗначенийОборотов.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	мМассивИзмерений.Добавить("ДополнительныеРазрезы");
	Если Реквизиты.ВидОграниченияОборотов<>Перечисления.фин_ВидыОграниченийОборотовБюджета.ПредварительныйБюджет Тогда
		мМассивИзмерений.Добавить("КонтролирующийСценарий");
	Иначе
		ТабЗначенийОборотов.Колонки.Добавить("КонтролирующийСценарий",Новый ОписаниеТипов("СправочникСсылка."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования"));
		ТабЗначенийОборотов.ЗаполнитьЗначения(Реквизиты.КонтролирующийСценарий,"КонтролирующийСценарий");
	КонецЕсли;
	//мМассивИзмерений.Добавить("ИспользованиеКонтролируемогоЗначения");
	мМассивИзмерений.Добавить("ПериодПланирования");
	мМассивРесурсов		= Новый Массив;
	мМассивРесурсов.Добавить("СуммаСценарияКонтроль");
	ТаблицаДополнения = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьДополнениеКТаблице(СуществующиеДвижения,ТабЗначенийОборотов,мМассивИзмерений,мМассивРесурсов);
	ТаблицаДополнения.Колонки.Добавить("Период");
	МассивПериодов=ТаблицаДополнения.ВыгрузитьКолонку("ПериодПланирования");
	ТаблицаДополнения.ЗагрузитьКолонку(МассивПериодов,"Период");
	Возврат ТабЗначенийОборотов;
КонецФункции

Функция ПодготовитьТаблицуИзмененныхОграниченийПриКорректировке(ТаблицаОборотов,ИсправляемыйДокумент) Экспорт
	
	МассивИсправляемых 		= Новый Массив;
	МассивИсправляемых.Добавить(ИсправляемыйДокумент);
	ПредыдущийИсправляемый 	= ИсправляемыйДокумент.ИсправляемыйДокумент;
	Пока ЗначениеЗаполнено(ПредыдущийИсправляемый) Цикл
		МассивИсправляемых.Добавить(ПредыдущийИсправляемый);
		ПредыдущийИсправляемый = ПредыдущийИсправляемый.ИсправляемыйДокумент;
	КонецЦикла;
	
	ТабЗначенийОборотов = ТаблицаОборотов.Скопировать();
	Запрос = Новый Запрос;
	Если ТабЗначенийОборотов.Колонки.Найти("Проект")=Неопределено Тогда
		ТабЗначенийОборотов.Колонки.Добавить("Проект",Новый ОписаниеТипов("СправочникСсылка."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПроектов()));
	КонецЕсли;
	Если ТабЗначенийОборотов.Колонки.Найти("Контрагент")=Неопределено Тогда
		ТабЗначенийОборотов.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	КонецЕсли;
	Если ТабЗначенийОборотов.Колонки.Найти("Номенклатура")=Неопределено Тогда
		ТабЗначенийОборотов.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КонецЕсли;
	Если ТабЗначенийОборотов.Колонки.Найти("УправленческоеПодразделение")=Неопределено Тогда
		ТабЗначенийОборотов.Колонки.Добавить("УправленческоеПодразделение",фин_ОбщегоНазначенияВызовСервераПовтИсп.ОписаниеТиповУправленческоеПодразделение());
	КонецЕсли;
	Запрос.УстановитьПараметр("ВТ",ТабЗначенийОборотов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	фин_УстановкаОграниченийПоБюджетам.Сценарий,
	|	фин_УстановкаОграниченийПоБюджетам.ФинансовыйПоказатель,
	|	фин_УстановкаОграниченийПоБюджетам.ВидКонтролируемогоЗначения,
	|	фин_УстановкаОграниченийПоБюджетам.ИспользованиеКонтролируемогоЗначения,
	|	фин_УстановкаОграниченийПоБюджетам.УправленческоеПодразделение,
	|	фин_УстановкаОграниченийПоБюджетам.Проект,
	|	фин_УстановкаОграниченийПоБюджетам.Контрагент,
	|	фин_УстановкаОграниченийПоБюджетам.Номенклатура,
	|	фин_УстановкаОграниченийПоБюджетам.КонтролирующийСценарий,
	|	фин_УстановкаОграниченийПоБюджетам.ПериодПланирования,
	|	фин_УстановкаОграниченийПоБюджетам.Организация,
	|	фин_УстановкаОграниченийПоБюджетам.ДополнительныеРазрезы
	|ПОМЕСТИТЬ ВТ_Новые
	|ИЗ
	|	&ВТ КАК фин_УстановкаОграниченийПоБюджетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Новые.Сценарий,
	|	ВТ_Новые.ФинансовыйПоказатель,
	|	ВТ_Новые.ВидКонтролируемогоЗначения,
	|	ВТ_Новые.ИспользованиеКонтролируемогоЗначения,
	|	ВТ_Новые.УправленческоеПодразделение,
	|	ВТ_Новые.Проект,
	|	ВТ_Новые.Контрагент,
	|	ВТ_Новые.Номенклатура,
	|	ВТ_Новые.КонтролирующийСценарий,
	|	ВТ_Новые.ПериодПланирования,
	|	ВТ_Новые.Организация,
	|	ВТ_Новые.ДополнительныеРазрезы
	|ПОМЕСТИТЬ ВТ_НовыеСгруппированные
	|ИЗ
	|	ВТ_Новые КАК ВТ_Новые
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Новые.Организация,
	|	ВТ_Новые.ИспользованиеКонтролируемогоЗначения,
	|	ВТ_Новые.ДополнительныеРазрезы,
	|	ВТ_Новые.Контрагент,
	|	ВТ_Новые.ФинансовыйПоказатель,
	|	ВТ_Новые.КонтролирующийСценарий,
	|	ВТ_Новые.Номенклатура,
	|	ВТ_Новые.ПериодПланирования,
	|	ВТ_Новые.ВидКонтролируемогоЗначения,
	|	ВТ_Новые.УправленческоеПодразделение,
	|	ВТ_Новые.Сценарий,
	|	ВТ_Новые.Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	фин_УстановкаОграниченийПоБюджетам.Сценарий,
	|	фин_УстановкаОграниченийПоБюджетам.ФинансовыйПоказатель,
	|	фин_УстановкаОграниченийПоБюджетам.ВидКонтролируемогоЗначения,
	|	фин_УстановкаОграниченийПоБюджетам.ИспользованиеКонтролируемогоЗначения,
	|	фин_УстановкаОграниченийПоБюджетам.УправленческоеПодразделение,
	|	фин_УстановкаОграниченийПоБюджетам.Проект,
	|	фин_УстановкаОграниченийПоБюджетам.Контрагент,
	|	фин_УстановкаОграниченийПоБюджетам.Номенклатура,
	|	фин_УстановкаОграниченийПоБюджетам.КонтролирующийСценарий,
	|	фин_УстановкаОграниченийПоБюджетам.ПериодПланирования,
	|	фин_УстановкаОграниченийПоБюджетам.Организация,
	|	фин_УстановкаОграниченийПоБюджетам.ДополнительныеРазрезы
	|ПОМЕСТИТЬ ВТ_Корректируемые
	|ИЗ
	|	РегистрСведений.фин_УстановкаОграниченийПоБюджетам КАК фин_УстановкаОграниченийПоБюджетам
	|ГДЕ
	|	фин_УстановкаОграниченийПоБюджетам.Регистратор В(&ИсправляемыеДокументы)
	|
	|СГРУППИРОВАТЬ ПО
	|	фин_УстановкаОграниченийПоБюджетам.ПериодПланирования,
	|	фин_УстановкаОграниченийПоБюджетам.УправленческоеПодразделение,
	|	фин_УстановкаОграниченийПоБюджетам.Номенклатура,
	|	фин_УстановкаОграниченийПоБюджетам.Сценарий,
	|	фин_УстановкаОграниченийПоБюджетам.ВидКонтролируемогоЗначения,
	|	фин_УстановкаОграниченийПоБюджетам.Проект,
	|	фин_УстановкаОграниченийПоБюджетам.ИспользованиеКонтролируемогоЗначения,
	|	фин_УстановкаОграниченийПоБюджетам.ФинансовыйПоказатель,
	|	фин_УстановкаОграниченийПоБюджетам.Организация,
	|	фин_УстановкаОграниченийПоБюджетам.ДополнительныеРазрезы,
	|	фин_УстановкаОграниченийПоБюджетам.Контрагент,
	|	фин_УстановкаОграниченийПоБюджетам.КонтролирующийСценарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НовыеСгруппированные.Сценарий,
	|	ВТ_НовыеСгруппированные.ФинансовыйПоказатель,
	|	ВТ_НовыеСгруппированные.ВидКонтролируемогоЗначения,
	|	ВТ_НовыеСгруппированные.ИспользованиеКонтролируемогоЗначения,
	|	ВТ_НовыеСгруппированные.УправленческоеПодразделение,
	|	ВТ_НовыеСгруппированные.Проект,
	|	ВТ_НовыеСгруппированные.Контрагент,
	|	ВТ_НовыеСгруппированные.Номенклатура,
	|	ВТ_НовыеСгруппированные.КонтролирующийСценарий,
	|	ВТ_НовыеСгруппированные.ПериодПланирования,
	|	ВТ_НовыеСгруппированные.ПериодПланирования КАК Период,
	|	ВТ_НовыеСгруппированные.Организация,
	|	ВТ_НовыеСгруппированные.ДополнительныеРазрезы
	|ИЗ
	|	ВТ_НовыеСгруппированные КАК ВТ_НовыеСгруппированные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Корректируемые КАК ВТ_Корректируемые
	|		ПО ВТ_НовыеСгруппированные.Сценарий = ВТ_Корректируемые.Сценарий
	|			И ВТ_НовыеСгруппированные.ФинансовыйПоказатель = ВТ_Корректируемые.ФинансовыйПоказатель
	|			И ВТ_НовыеСгруппированные.ВидКонтролируемогоЗначения = ВТ_Корректируемые.ВидКонтролируемогоЗначения
	|			И ВТ_НовыеСгруппированные.ИспользованиеКонтролируемогоЗначения = ВТ_Корректируемые.ИспользованиеКонтролируемогоЗначения
	|			И ВТ_НовыеСгруппированные.УправленческоеПодразделение = ВТ_Корректируемые.УправленческоеПодразделение
	|			И ВТ_НовыеСгруппированные.Проект = ВТ_Корректируемые.Проект
	|			И ВТ_НовыеСгруппированные.Контрагент = ВТ_Корректируемые.Контрагент
	|			И ВТ_НовыеСгруппированные.Номенклатура = ВТ_Корректируемые.Номенклатура
	|			И ВТ_НовыеСгруппированные.КонтролирующийСценарий = ВТ_Корректируемые.КонтролирующийСценарий
	|			И ВТ_НовыеСгруппированные.ПериодПланирования = ВТ_Корректируемые.ПериодПланирования
	|			И ВТ_НовыеСгруппированные.Организация = ВТ_Корректируемые.Организация
	|			И ВТ_НовыеСгруппированные.ДополнительныеРазрезы = ВТ_Корректируемые.ДополнительныеРазрезы
	|ГДЕ
	|	ВТ_Корректируемые.Сценарий ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("ИсправляемыеДокументы", МассивИсправляемых);
	
	ТаблицаОборотов = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаОборотов;	
КонецФункции

Функция ЭтоРазрез(ИмяКолонки) Экспорт
	СписокРазрезов = Новый СписокЗначений;
	СписокРазрезов.Добавить("УправленческоеПодразделение","Подразделение (упр.)");
	СписокРазрезов.Добавить("Проект","Проект");
	СписокРазрезов.Добавить("Контрагент","Контрагент");
	СписокРазрезов.Добавить("Номенклатура","Номенклатура");
	Для Каждого Реквизит Из Метаданные.Справочники.фин_КлассификаторНаборовДополнительныхРазрезов.Реквизиты Цикл
		СписокРазрезов.Добавить(Реквизит.Имя);
	КонецЦикла;
	Возврат СписокРазрезов.НайтиПоЗначению(ИмяКолонки)<>Неопределено;
КонецФункции

Процедура ЗаполнитьТаблицуАналитикиНастройкиЗависимостей(ТаблицаНаборовЗначений,СтруктураОтбораИсходныхЗначений,ТаблицаОбластьДействияЗависимости,ТаблицаСпискиПараметровОтбора) Экспорт
	ТаблицаНаборовЗначений 			= Новый ТаблицаЗначений;
	ТаблицаНаборовЗначений.Добавить();
	СтруктураОтбораИсходныхЗначений	= Новый Структура;
	Для Каждого ЭлементРазрез Из фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйМассивРазрезов") Цикл
		Измерение = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ЭлементРазрез);
		СтрокиИзмерение = ТаблицаОбластьДействияЗависимости.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования[Измерение]));
		Если СтрокиИзмерение.Количество()>0 Тогда
			СтруктураОтбораИсходныхЗначений.Вставить(Измерение,?(Измерение="Номенклатура" И НЕ ЗначениеЗаполнено(СтрокиИзмерение[0].УсловиеНаЗначение),Неопределено,СтрокиИзмерение[0].УсловиеНаЗначение));
			СтруктураОтбораИсходныхЗначений.Вставить("Отбор"+Измерение,Истина);
			ТипыКолонки = СтрокиИзмерение[0].Разрез.ТипЗначения.Типы();
			ТипыКолонки.Добавить(Тип("ПеречислениеСсылка.фин_СпособыРасчетаРазрезовПоЗависимостям"));
			ТаблицаНаборовЗначений.Колонки.Добавить(Измерение,Новый ОписаниеТипов(ТипыКолонки));
			Если СтрокиИзмерение[0].ВидОграниченияОбластиДействия = Перечисления.фин_ВидыОграниченийОбластиДействияЗависимости.ФиксированноеЗначение Тогда
				ТаблицаНаборовЗначений.ЗаполнитьЗначения(?(Измерение	= "Номенклатура" И НЕ ЗначениеЗаполнено(СтрокиИзмерение[0].УсловиеНаЗначение),Неопределено,СтрокиИзмерение[0].УсловиеНаЗначение),Измерение);
			ИначеЕсли СтрокиИзмерение[0].ВидОграниченияОбластиДействия = Перечисления.фин_ВидыОграниченийОбластиДействияЗависимости.ПриНаличииСоответствияПоЗначению Тогда
				ТаблицаНаборовЗначений.ЗаполнитьЗначения(Перечисления.фин_СпособыРасчетаРазрезовПоЗависимостям.ПоНастройке,Измерение);
			ИначеЕсли СтрокиИзмерение[0].ВидОграниченияОбластиДействия = Перечисления.фин_ВидыОграниченийОбластиДействияЗависимости.СписокЗначений Тогда
				мТаблица = ТаблицаНаборовЗначений.СкопироватьКолонки();
				СтрокиСписка = ТаблицаСпискиПараметровОтбора.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования[Измерение]));
				Для Каждого СтрокаСписка Из СтрокиСписка Цикл
					Для Каждого СтрокаИсходная Из ТаблицаНаборовЗначений Цикл
						НоваяСтрока 			= мТаблица.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаИсходная);
						НоваяСтрока[Измерение] 	= СтрокаСписка.УсловиеНаЗначение;
					КонецЦикла;
				КонецЦикла;
				ТаблицаНаборовЗначений = мТаблица.Скопировать();
			КонецЕсли;
			ТаблицаНаборовЗначений.Колонки.Добавить("Отбор"+Измерение,Новый ОписаниеТипов("Булево"));
			ТаблицаНаборовЗначений.ЗаполнитьЗначения(Истина,"Отбор"+Измерение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьДвиженияПоЗависимостям(Движения,Реквизиты,ТаблицаЗависимостиОборотовПоСтатьям,ТаблицаОбластьДействияЗависимости,ТаблицаСпискиПараметровОтбора,ТаблицаСоставАгрегатов)  Экспорт
	
	БюджетированиеПоОрганизациям = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
	
	УправленческоеПодразделение	= Неопределено;
 	Проект 						= Неопределено;
	Контрагент 					= Неопределено;
	Номенклатура 				= Неопределено;
	СписокРазрезов 				= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйМассивРазрезов");
	МассивИзмерений 			= Новый Массив;
	Для Каждого ЭлементРазрез Из СписокРазрезов Цикл
		 ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ЭлементРазрез);
		 МассивИзмерений.Добавить(ИмяРазреза);
	КонецЦикла;
	
	ТаблицаНаборовЗначений 			= Новый ТаблицаЗначений;
	СтруктураОтбораИсходныхЗначений	= Новый Структура;
	Если ТаблицаОбластьДействияЗависимости<>Неопределено Тогда
		ЗаполнитьТаблицуАналитикиНастройкиЗависимостей(ТаблицаНаборовЗначений,СтруктураОтбораИсходныхЗначений,ТаблицаОбластьДействияЗависимости,ТаблицаСпискиПараметровОтбора);
	Иначе
		ТаблицаНаборовЗначений.Добавить();
	КонецЕсли;
	
	Групповая = (Реквизиты.ВидОперации = Перечисления.фин_ВидыОперацийНастройкаЗависимостей.ГрупповаяУстановкаЗависимостей);
	//Проверяем заполненность агрегатов
	Если Групповая Тогда
		СтрокиАгрегата = ТаблицаСоставАгрегатов.Скопировать();
		СтрокиАгрегата.Свернуть("Группа");
		СтрокиАгрегата.Сортировать("Группа УБЫВ");
		Если СтрокиАгрегата.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		МаксимальнаяГруппа = СтрокиАгрегата[0].Группа;
	Иначе
		МаксимальнаяГруппа = 1;
	КонецЕсли;
	
	Для Инд=1 По МаксимальнаяГруппа Цикл
		СоответствиеСтатей = СоответствиеСтатей(Реквизиты,ТаблицаЗависимостиОборотовПоСтатьям,ТаблицаСоставАгрегатов,Инд);
		Для Каждого ТекСтрокаЗависимостиОборотовПоСтатьям Из ТаблицаЗависимостиОборотовПоСтатьям Цикл
			Для Каждого СтрокаНаборовИзмерений Из ТаблицаНаборовЗначений Цикл
				ЗаполнитьЗначенияСвойств(СтруктураОтбораИсходныхЗначений,СтрокаНаборовИзмерений);
				ЭлементОтбораВлияющихОборотов = фин_УправлениеЗависимостямиСтатейБюджетов.ОпределитьПозициюНабораПоЗависимостям(Истина,СтруктураОтбораИсходныхЗначений);
				Движение 						= Движения.фин_ЗависимостиФинансовыхПоказателей.Добавить();
				Движение.Период 				= Реквизиты.Дата;
				Движение.ИсхФинансовыйПоказатель= СоответствиеСтатей.Получить(Реквизиты.ФинансовыйПоказательВлияющая);
				Движение.ИсходныйНаборРазрезов 	= ЭлементОтбораВлияющихОборотов;
				
				Движение.ЗависимаяФинансовыйПоказатель = СоответствиеСтатей.Получить(ТекСтрокаЗависимостиОборотовПоСтатьям.ЗависимаяФинансовыйПоказатель);
				
				СтруктураОтбораРезультирующихЗначений = Новый Структура;
				Для Каждого Измерение Из МассивИзмерений Цикл
					ЗначениеИзмерение = ТекСтрокаЗависимостиОборотовПоСтатьям[Измерение];
					Если ЗначениеЗаполнено(ЗначениеИзмерение) Тогда
						СтруктураОтбораРезультирующихЗначений.Вставить(Измерение,ЗначениеИзмерение);
						СтруктураОтбораРезультирующихЗначений.Вставить("Отбор"+Измерение,Истина);
					КонецЕсли;
				КонецЦикла;
				
				ЭлементОтбораЗависимыхОборотов 						= фин_УправлениеЗависимостямиСтатейБюджетов.ОпределитьПозициюНабораПоЗависимостям(Ложь,СтруктураОтбораРезультирующихЗначений);
				Движение.ЗависимыйНаборРазрезов 					= ЭлементОтбораЗависимыхОборотов;
				Движение.РеквизитВлияющейСтатьиДляРасчетаСуммы 		= ТекСтрокаЗависимостиОборотовПоСтатьям.РеквизитВлияющейСтатьиДляРасчетаСуммы;
				Движение.КоэффициентДляРасчетаСуммы 				= ТекСтрокаЗависимостиОборотовПоСтатьям.КоэффициентДляРасчетаСуммы;
				Движение.РеквизитВлияющейСтатьиДляРасчетаКоличества = ТекСтрокаЗависимостиОборотовПоСтатьям.РеквизитВлияющейСтатьиДляРасчетаКоличества;
				Движение.КоэффициентДляРасчетаКоличества 			= ТекСтрокаЗависимостиОборотовПоСтатьям.КоэффициентДляРасчетаКоличества;
				Движение.ЗначениеИзмененияПоПериодам 				= ТекСтрокаЗависимостиОборотовПоСтатьям.ЗначениеИзмененияПоПериодам;
				Если ЗначениеЗаполнено(Реквизиты.НастройкаРасчета) Тогда
					Движение.ДополнительныйКоэффициентСуммы 		= ТекСтрокаЗависимостиОборотовПоСтатьям.ДополнительныйКоэффициентСуммы;
					Движение.ДополнительныйКоэффициентКоличества 	= ТекСтрокаЗависимостиОборотовПоСтатьям.ДополнительныйКоэффициентКоличества;
				КонецЕсли;
				
				Движение.ДатаЗавершения 							= Реквизиты.СрокДействия;
				Движение.ИспользованиеЗависимости	= Реквизиты.ИспользованиеЗависимостей;
				Движение.ИсхСценарий 				= Реквизиты.Сценарий;
				Движение.НастройкаРасчета 			= Реквизиты.НастройкаРасчета;
				Если БюджетированиеПоОрганизациям Тогда
					Движение.Организация = Реквизиты.Организация;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Движения.фин_ЗависимостиФинансовыхПоказателей.Записывать=Истина;
	
КонецПроцедуры

Функция СоответствиеСтатей(Реквизиты,ЗависимостиОборотовПоСтатьям,СоставАгрегатов,НомерАгрегата=Неопределено) Экспорт
	СоответствиеСтатей = Новый Соответствие;
	Если Реквизиты.ВидОперации = Перечисления.фин_ВидыОперацийНастройкаЗависимостей.ГрупповаяУстановкаЗависимостей Тогда
		СтрокиГруппы = СоставАгрегатов.НайтиСтроки(Новый Структура("Группа",НомерАгрегата));
		Для Каждого СтрокаГруппы Из СтрокиГруппы Цикл
			СоответствиеСтатей.Вставить(СтрокаГруппы.Агрегат,СтрокаГруппы.ФинансовыйПоказатель);
		КонецЦикла;
	Иначе
		СоответствиеСтатей.Вставить(Реквизиты.ФинансовыйПоказательВлияющая,Реквизиты.ФинансовыйПоказательВлияющая);
		Для Каждого Зависимость Из ЗависимостиОборотовПоСтатьям Цикл
			СоответствиеСтатей.Вставить(Зависимость.ЗависимаяФинансовыйПоказатель,Зависимость.ЗависимаяФинансовыйПоказатель);
		КонецЦикла;
	КонецЕсли;
	Возврат СоответствиеСтатей;
КонецФункции

Функция ПолучитьСписокСтатейБюджетаРассчитываемыхПоФормуле(Формула,Бюджет=Неопределено,Сценарий=Неопределено,ПериодПланирования=Неопределено,ФинансовыеПоказатели = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_СтатьиБюджета.Ссылка,
		|	фин_СтатьиБюджета.ФинансовыйПоказатель
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|		ПО фин_СтатьиБюджета.ФинансовыйПоказатель = фин_ФинансовыеПоказатели.Ссылка
		|ГДЕ
		|	(фин_СтатьиБюджета.Формула = &Формула
		|			ИЛИ фин_СтатьиБюджета.ФормулаКоличество = &Формула
		|			ИЛИ фин_ФинансовыеПоказатели.Формула = &Формула
		|			ИЛИ фин_ФинансовыеПоказатели.ФормулаКоличество = &Формула)
		|	И ВЫБОР
		|			КОГДА &Бюджет = ЗНАЧЕНИЕ(Справочник.фин_Бюджеты.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ фин_СтатьиБюджета.Владелец = &Бюджет
		|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Бюджет", ?(Бюджет=Неопределено,Справочники.фин_Бюджеты.ПустаяСсылка(),Бюджет));
	Запрос.УстановитьПараметр("Формула", Формула);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку(?(ФинансовыеПоказатели,"ФинансовыйПоказатель","Ссылка"));
	
КонецФункции

Функция ПолучитьСоответствиеРазрезуБюджетирования(ИсходноеЗначение,Разрез,Период=Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_НастройкаСоответствийДляИзмеренийБюджетированияСрезПоследних.Соответствие
		|ИЗ
		|	РегистрСведений.фин_НастройкаСоответствийДляИзмеренийБюджетирования.СрезПоследних(
		|			&Период,
		|			Разрез = &Разрез
		|				И ИсходноеЗначение = &ИсходноеЗначение) КАК фин_НастройкаСоответствийДляИзмеренийБюджетированияСрезПоследних";
	
	Запрос.УстановитьПараметр("ИсходноеЗначение", ИсходноеЗначение);
	Запрос.УстановитьПараметр("Период", ?(Период=Неопределено,ТекущаяДата(),Период));
	Запрос.УстановитьПараметр("Разрез", Разрез);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Соответствие;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция Новый_ТаблицаФормулыРасчетаСтатей() Экспорт	
	ТаблицаФормулыРасчетаСтатей 			= Новый ТаблицаЗначений;
	ТаблицаФормулыРасчетаСтатей.Колонки.Добавить("СтатьяБюджета",Новый ОписаниеТипов("СправочникСсылка.фин_СтатьиБюджета"));
	ТаблицаФормулыРасчетаСтатей.Колонки.Добавить("ФинансовыйПоказатель",Новый ОписаниеТипов("СправочникСсылка.фин_ФинансовыеПоказатели"));
	ТаблицаФормулыРасчетаСтатей.Колонки.Добавить("Формула",Новый ОписаниеТипов("СправочникСсылка.фин_ФормулыРасчетаФинансовыхПоказателей"));
	ТаблицаФормулыРасчетаСтатей.Колонки.Добавить("Вид",Новый ОписаниеТипов("ПеречислениеСсылка.фин_ВидыФормулРасчета"));
	ТаблицаФормулыРасчетаСтатей.Колонки.Добавить("ПризнакПеретекающегоОстатка",Новый ОписаниеТипов("ПеречислениеСсылка.фин_ПризнакиПеретекающихОстатковМеждуПериодами"));
	ТаблицаФормулыРасчетаСтатей.Колонки.Добавить("ТекстФормулы",Новый ОписаниеТипов("Строка"));
	ТаблицаФормулыРасчетаСтатей.Колонки.Добавить("Поле",Новый ОписаниеТипов("Строка"));
	ТаблицаФормулыРасчетаСтатей.Колонки.Добавить("ЧастотаВыполненияРасчетовПоФормулам",Новый ОписаниеТипов("ПеречислениеСсылка.фин_ЧастотаВыполненияРасчетов"));
	ТаблицаФормулыРасчетаСтатей.Колонки.Добавить("ПериодичностьВыполненияРасчетов",Новый ОписаниеТипов("ПеречислениеСсылка.фин_Периодичность"));
	Возврат ТаблицаФормулыРасчетаСтатей;
КонецФункции

Функция Новый_ТаблицаСоставФормулРасчетаСтатей() Экспорт	
	ТаблицаСоставФормулРасчетаСтатей 	= Новый ТаблицаЗначений;
	ТаблицаСоставФормулРасчетаСтатей.Колонки.Добавить("Формула",Новый ОписаниеТипов("СправочникСсылка.фин_ФормулыРасчетаФинансовыхПоказателей"));
	ТаблицаСоставФормулРасчетаСтатей.Колонки.Добавить("ВидПоказателя",Новый ОписаниеТипов("ПеречислениеСсылка.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей"));
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.фин_ФинансовыеПоказатели"));
	МассивТипов.Добавить(Тип("СправочникСсылка.фин_РасчетныеПоказатели"));
	МассивТипов.Добавить(Тип("СправочникСсылка.фин_СтатьиБюджета"));
	МассивТипов.Добавить(Тип("СправочникСсылка.фин_Бюджеты"));
	МассивТипов.Добавить(Тип("СправочникСсылка.фин_ФормулыРасчетаФинансовыхПоказателей"));
	ТаблицаСоставФормулРасчетаСтатей.Колонки.Добавить("Показатель",Новый ОписаниеТипов(МассивТипов));
	ТаблицаСоставФормулРасчетаСтатей.Колонки.Добавить("ПериодСбораДанных",Новый ОписаниеТипов("ПеречислениеСсылка.ден_СпособыОпределенияПериодов"));
	ТаблицаСоставФормулРасчетаСтатей.Колонки.Добавить("ПредставлениеПоказателя",Новый ОписаниеТипов("Строка"));
 	ТаблицаСоставФормулРасчетаСтатей.Колонки.Добавить("Данные",Новый ОписаниеТипов("ПеречислениеСсылка.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета"));
 	ТаблицаСоставФормулРасчетаСтатей.Колонки.Добавить("ВидВлияния",Новый ОписаниеТипов("ПеречислениеСсылка.ден_ВидыДвиженийПриходРасход"));
 	ТаблицаСоставФормулРасчетаСтатей.Колонки.Добавить("Периодичность",Новый ОписаниеТипов("ПеречислениеСсылка.фин_Периодичность"));
	ТаблицаСоставФормулРасчетаСтатей.Колонки.Добавить("НачалоПериода",Новый ОписаниеТипов("Дата"));
	ТаблицаСоставФормулРасчетаСтатей.Колонки.Добавить("КонецПериода",Новый ОписаниеТипов("Дата"));
	ТаблицаСоставФормулРасчетаСтатей.Колонки.Добавить("Лаг",Новый ОписаниеТипов("Число"));
	Возврат ТаблицаСоставФормулРасчетаСтатей;
КонецФункции

Функция Новый_ТаблицаРассчитанныеПоказателиФормул() Экспорт	
	ТаблицаРассчитанныеПоказателиФормул 	= Новый ТаблицаЗначений;
	Для Каждого Колонка из Метаданные.Документы.фин_Бюджет.ТабличныеЧасти.ОборотыПоСтатьям.Реквизиты Цикл
		Если Найти(Колонка.Имя,"Разрез")<>0 И Колонка.Имя<>"ДополнительныеРазрезы" Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаРассчитанныеПоказателиФормул.Колонки.Добавить(Колонка.Имя,Колонка.Тип);
	КонецЦикла;
	ТаблицаРассчитанныеПоказателиФормул.Колонки.Добавить("ВалютнаяСумма",Новый ОписаниеТипов("Число"));
	ТаблицаРассчитанныеПоказателиФормул.Колонки.Добавить("ТекущийРасчет",Новый ОписаниеТипов("Булево"));
	ТаблицаРассчитанныеПоказателиФормул.Колонки.Добавить("ВидПоказателя",Новый ОписаниеТипов("ПеречислениеСсылка.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей"));
	ТаблицаРассчитанныеПоказателиФормул.Колонки.Удалить("СтатьяБюджета");
	ТаблицаРассчитанныеПоказателиФормул.Колонки.Добавить("ПериодСбораДанных",Новый ОписаниеТипов("ПеречислениеСсылка.ден_СпособыОпределенияПериодов"));
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.фин_ФинансовыеПоказатели"));
	МассивТипов.Добавить(Тип("СправочникСсылка.фин_РасчетныеПоказатели"));
	МассивТипов.Добавить(Тип("СправочникСсылка.фин_СтатьиБюджета"));
	МассивТипов.Добавить(Тип("СправочникСсылка.фин_Бюджеты"));
	МассивТипов.Добавить(Тип("СправочникСсылка.фин_ФормулыРасчетаФинансовыхПоказателей"));
	ТаблицаРассчитанныеПоказателиФормул.Колонки.Добавить("Показатель",Новый ОписаниеТипов(МассивТипов));
	Для Каждого Разрез Из фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьСписокИменДополнительныхРазрезов") Цикл
		ТаблицаРассчитанныеПоказателиФормул.Колонки.Добавить(Разрез.Значение,фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Перечисления.фин_ФактическиеПоказателиБюджетирования[Разрез.Значение]).ТипЗначения);
	КонецЦикла;
	Возврат ТаблицаРассчитанныеПоказателиФормул;
КонецФункции

Процедура РассчитатьДокументАктуализации(Объект,АктуализируемыйПериод,УчетПрогноза=Ложь) Экспорт
	Объект.ОборотыПоСтатьям.Очистить();
	Бюджет = Объект.ФормируемыйБюджет;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_СтатьиБюджета.Ссылка КАК Статья,
		|	фин_СтатьиБюджета.ФинансовыйПоказатель
		|ПОМЕСТИТЬ ВТ_Статьи
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
		|ГДЕ
		|	фин_СтатьиБюджета.Ссылка В(&Статьи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Статьи.Статья КАК СтатьяБюджета,
		|	ВТ_Статьи.ФинансовыйПоказатель,
		|	ЕСТЬNULL(фин_ПорядокАктуализацииСтатейБюджетов.АктуализацияДефицита, ЗНАЧЕНИЕ(Перечисление.фин_ПорядокАктуализацииСтатейБюджетов.ПеренестиНаСледующийПериод)) КАК АктуализацияДефицита,
		|	ЕСТЬNULL(фин_ПорядокАктуализацииСтатейБюджетов.АктуализацияПрофицита, ЗНАЧЕНИЕ(Перечисление.фин_ПорядокАктуализацииСтатейБюджетов.ПеренестиНаСледующийПериод)) КАК АктуализацияПрофицита,
		|	фин_ПорядокАктуализацииСтатейБюджетов.СтатьяДляПереносаДефицита,
		|	фин_ПорядокАктуализацииСтатейБюджетов.СтатьяДляПереносаПрофицита,
		|	ЕСТЬNULL(фин_ПорядокАктуализацииСтатейБюджетов.АктуализацияДефицитаТолькоПриНаличииИсполнения,ЛОЖЬ) КАК АктуализацияДефицитаТолькоПриНаличииИсполнения,
		|	ЕСТЬNULL(фин_ПорядокАктуализацииСтатейБюджетов.АктуализацияПрофицитаТолькоПриНаличииИсполнения,ЛОЖЬ) КАК АктуализацияПрофицитаТолькоПриНаличииИсполнения
		|ИЗ
		|	ВТ_Статьи КАК ВТ_Статьи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_ПорядокАктуализацииСтатейБюджетов КАК фин_ПорядокАктуализацииСтатейБюджетов
		|		ПО ВТ_Статьи.Статья = фин_ПорядокАктуализацииСтатейБюджетов.СтатьяБюджета
		|			И (фин_ПорядокАктуализацииСтатейБюджетов.ФормируемыйСценарий = &Сценарий)
		|ГДЕ
		|	(фин_ПорядокАктуализацииСтатейБюджетов.АктуализацияДефицита ЕСТЬ NULL 
		|			ИЛИ НЕ(фин_ПорядокАктуализацииСтатейБюджетов.АктуализацияДефицита = ЗНАЧЕНИЕ(Перечисление.фин_ПорядокАктуализацииСтатейБюджетов.НеАктуализировать)
		|					И фин_ПорядокАктуализацииСтатейБюджетов.АктуализацияПрофицита = ЗНАЧЕНИЕ(Перечисление.фин_ПорядокАктуализацииСтатейБюджетов.НеАктуализировать)))";
	
	Запрос.УстановитьПараметр("Статьи", ПервичныеСтатьиБюджета(Бюджет,Объект.ПериодПланирования));
	Запрос.УстановитьПараметр("Сценарий", Объект.Сценарий);
	
	Периодичность = Строка(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПравил = РезультатЗапроса.Выгрузить();
	
	Показатели = ТаблицаПравил.ВыгрузитьКолонку("ФинансовыйПоказатель");	
	МассивРегистров = фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрыФактическихДанных();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	фин_ОборотыБюджетовОбороты.ПериодПланирования,
	|	фин_ОборотыБюджетовОбороты.ФинансовыйПоказатель,
	|	фин_ОборотыБюджетовОбороты.УправленческоеПодразделение,
	|	фин_ОборотыБюджетовОбороты.Проект,
	|	фин_ОборотыБюджетовОбороты.Номенклатура,
	|	фин_ОборотыБюджетовОбороты.Контрагент,
	|	СУММА(фин_ОборотыБюджетовОбороты.КоличествоОборот) КАК Количество,
	|	СУММА(фин_ОборотыБюджетовОбороты.КоличествоОборот) КАК КоличествоПлан,
	|	СУММА(0) КАК КоличествоФакт,
	|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез1,
	|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез2,
	|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез3,
	|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез4,
	|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез5,
	|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез6,
	|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез7,
	|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез8,
	|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез9,
	|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез10,
	//			|	фин_ОборотыБюджетовОбороты.Валюта КАК ВалютаОперации,
	|	СУММА(фин_ОборотыБюджетовОбороты.СуммаУпрОборот) КАК Сумма,
	|	СУММА(фин_ОборотыБюджетовОбороты.СуммаУпрОборот) КАК СуммаПлан,
	|	СУММА(0) КАК СуммаФакт
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	РегистрНакопления.фин_ОборотыБюджетов.Обороты(
	|			,
	|			,
	|			,
	|			"+?(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям"),"Организация = &Организация И ","")+"
	|				Сценарий = &Сценарий
	|				И ФинансовыйПоказатель В (&Показатели)
	|				И ПериодПланирования >= &НачалоПериода
	|				И ПериодПланирования <= &КонецПериода"+?(Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта," И Проект = &Проект","")+?(Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения,?(Объект.ФормируемыйБюджет.ВключаяПодчиненныеПодразделения," И УправленческоеПодразделение В ИЕРАРХИИ (&УправленческоеПодразделение)"," И УправленческоеПодразделение = &УправленческоеПодразделение"),"")+") КАК фин_ОборотыБюджетовОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_КлассификаторНаборовДополнительныхРазрезов КАК фин_КлассификаторНаборовДополнительныхРазрезов
	|		ПО фин_ОборотыБюджетовОбороты.ДополнительныеРазрезы = фин_КлассификаторНаборовДополнительныхРазрезов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез9,
	|	фин_ОборотыБюджетовОбороты.Контрагент,
	|	фин_ОборотыБюджетовОбороты.УправленческоеПодразделение,
	|	фин_ОборотыБюджетовОбороты.Номенклатура,
	|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез8,
	|	фин_ОборотыБюджетовОбороты.Проект,
	|	фин_ОборотыБюджетовОбороты.ФинансовыйПоказатель,
	//			|	фин_ОборотыБюджетовОбороты.Валюта,
	|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез2,
	|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез6,
	|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез10,
	|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез1,
	|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез3,
	|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез4,
	|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез5,
	|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез7,
	|	фин_ОборотыБюджетовОбороты.ПериодПланирования";
	Для Каждого ИмяРегистра Из МассивРегистров Цикл
		Запрос.Текст=Запрос.Текст+"
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(фин_ОборотыБюджетовОбороты.ПериодПланирования,"+Периодичность+"),
		|	фин_ОборотыБюджетовОбороты.ФинансовыйПоказатель,
		|	фин_ОборотыБюджетовОбороты.УправленческоеПодразделение,
		|	фин_ОборотыБюджетовОбороты.Проект,
		|	фин_ОборотыБюджетовОбороты.Номенклатура,
		|	фин_ОборотыБюджетовОбороты.Контрагент,
		|	СУММА(-фин_ОборотыБюджетовОбороты.КоличествоОборот) КАК Количество,
		|	СУММА(0) КАК КоличествоПлан,
		|	СУММА(фин_ОборотыБюджетовОбороты.КоличествоОборот) КАК КоличествоФакт,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез1,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез2,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез3,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез4,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез5,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез6,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез7,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез8,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез9,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез10,
		//		|	фин_ОборотыБюджетовОбороты.Валюта КАК ВалютаОперации,
		|	СУММА(-фин_ОборотыБюджетовОбороты.СуммаУпрОборот) КАК Сумма,
		|	СУММА(0) КАК СуммаПлан,
		|	СУММА(фин_ОборотыБюджетовОбороты.СуммаУпрОборот) КАК СуммаФакт
		|ИЗ
		|	РегистрНакопления."+ИмяРегистра+".Обороты(
		|			,
		|			,
		|			,
		|			"+?(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям"),"Организация = &Организация И ","")+"
		|				Сценарий = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка)
		|				И ФинансовыйПоказатель В (&Показатели)
		|				И ПериодПланирования >= &НачалоПериода
		|				И ПериодПланирования <= &КонецПериода"+?(Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта," И Проект = &Проект","")+?(Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения,?(Объект.ФормируемыйБюджет.ВключаяПодчиненныеПодразделения," И УправленческоеПодразделение В ИЕРАРХИИ (&УправленческоеПодразделение)"," И УправленческоеПодразделение = &УправленческоеПодразделение"),"")+") КАК фин_ОборотыБюджетовОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_КлассификаторНаборовДополнительныхРазрезов КАК фин_КлассификаторНаборовДополнительныхРазрезов
		|		ПО фин_ОборотыБюджетовОбороты.ДополнительныеРазрезы = фин_КлассификаторНаборовДополнительныхРазрезов.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез9,
		|	фин_ОборотыБюджетовОбороты.Контрагент,
		|	фин_ОборотыБюджетовОбороты.УправленческоеПодразделение,
		|	фин_ОборотыБюджетовОбороты.Номенклатура,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез8,
		|	фин_ОборотыБюджетовОбороты.Проект,
		|	фин_ОборотыБюджетовОбороты.ФинансовыйПоказатель,
		//			|	фин_ОборотыБюджетовОбороты.Валюта,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез2,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез6,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез10,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез1,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез3,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез4,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез5,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез7,
		|	НАЧАЛОПЕРИОДА(фин_ОборотыБюджетовОбороты.ПериодПланирования,"+Периодичность+")";
	КонецЦикла;
	Если УчетПрогноза Тогда
	Запрос.Текст=Запрос.Текст+"
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(фин_ОборотыБюджетовОбороты.ПериодПланирования,"+Периодичность+"),
		|	фин_ОборотыБюджетовОбороты.ФинансовыйПоказатель,
		|	фин_ОборотыБюджетовОбороты.УправленческоеПодразделение,
		|	фин_ОборотыБюджетовОбороты.Проект,
		|	фин_ОборотыБюджетовОбороты.Номенклатура,
		|	фин_ОборотыБюджетовОбороты.Контрагент,
		|	СУММА(-фин_ОборотыБюджетовОбороты.КоличествоОборот) КАК Количество,
		|	СУММА(0) КАК КоличествоПлан,
		|	СУММА(фин_ОборотыБюджетовОбороты.КоличествоОборот) КАК КоличествоФакт,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез1,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез2,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез3,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез4,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез5,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез6,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез7,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез8,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез9,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез10,
		//		|	фин_ОборотыБюджетовОбороты.Валюта КАК ВалютаОперации,
		|	СУММА(-фин_ОборотыБюджетовОбороты.СуммаУпрОборот) КАК Сумма,
		|	СУММА(0) КАК СуммаПлан,
		|	СУММА(фин_ОборотыБюджетовОбороты.СуммаУпрОборот) КАК СуммаФакт
		|ИЗ
		|	РегистрНакопления.фин_ПрогнозИсполненияБюджетов.Обороты(
		|			,
		|			,
		|			,
		|			"+?(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям"),"Организация = &Организация И ","")+"
		|				Сценарий = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка)
		|				И ФинансовыйПоказатель В (&Показатели)
		|				И ПериодПланирования >= &НачалоПериода И ПериодПланирования>=&КонецДня
		|				И ПериодПланирования <= &КонецПериода"+?(Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта," И Проект = &Проект","")+?(Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения,?(Объект.ФормируемыйБюджет.ВключаяПодчиненныеПодразделения," И УправленческоеПодразделение В ИЕРАРХИИ (&УправленческоеПодразделение)"," И УправленческоеПодразделение = &УправленческоеПодразделение"),"")+") КАК фин_ОборотыБюджетовОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_КлассификаторНаборовДополнительныхРазрезов КАК фин_КлассификаторНаборовДополнительныхРазрезов
		|		ПО фин_ОборотыБюджетовОбороты.ДополнительныеРазрезы = фин_КлассификаторНаборовДополнительныхРазрезов.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез9,
		|	фин_ОборотыБюджетовОбороты.Контрагент,
		|	фин_ОборотыБюджетовОбороты.УправленческоеПодразделение,
		|	фин_ОборотыБюджетовОбороты.Номенклатура,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез8,
		|	фин_ОборотыБюджетовОбороты.Проект,
		|	фин_ОборотыБюджетовОбороты.ФинансовыйПоказатель,
		//			|	фин_ОборотыБюджетовОбороты.Валюта,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез2,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез6,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез10,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез1,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез3,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез4,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез5,
		|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез7,
		|	НАЧАЛОПЕРИОДА(фин_ОборотыБюджетовОбороты.ПериодПланирования,"+Периодичность+")";
	КонецЕсли;
	Запрос.Текст=Запрос.Текст+"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.ПериодПланирования,
	|	ВТ_Данные.ФинансовыйПоказатель,
	|	ВТ_Данные.УправленческоеПодразделение,
	|	ВТ_Данные.Проект,
	|	ВТ_Данные.Номенклатура,
	|	ВТ_Данные.Контрагент,
	|	СУММА(ВТ_Данные.Количество) КАК Количество,
	|	СУММА(ВТ_Данные.КоличествоПлан) КАК КоличествоПлан,
	|	СУММА(ВТ_Данные.КоличествоФакт) КАК КоличествоФакт,
	|	ВТ_Данные.Разрез1,
	|	ВТ_Данные.Разрез2,
	|	ВТ_Данные.Разрез3,
	|	ВТ_Данные.Разрез4,
	|	ВТ_Данные.Разрез5,
	|	ВТ_Данные.Разрез6,
	|	ВТ_Данные.Разрез7,
	|	ВТ_Данные.Разрез8,
	|	ВТ_Данные.Разрез9,
	|	ВТ_Данные.Разрез10,
	//			|	ВТ_Данные.ВалютаОперации,
	|	СУММА(ВТ_Данные.Сумма) КАК Сумма,
	|	СУММА(ВТ_Данные.СуммаПлан) КАК СуммаПлан,
	|	СУММА(ВТ_Данные.СуммаФакт) КАК СуммаФакт
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Данные.Разрез9,
	|	ВТ_Данные.Контрагент,
	|	ВТ_Данные.УправленческоеПодразделение,
	|	ВТ_Данные.Номенклатура,
	|	ВТ_Данные.Разрез8,
	|	ВТ_Данные.Проект,
	|	ВТ_Данные.ФинансовыйПоказатель,
	//			|	фин_ОборотыБюджетовОбороты.Валюта,
	|	ВТ_Данные.Разрез2,
	|	ВТ_Данные.Разрез6,
	|	ВТ_Данные.Разрез10,
	|	ВТ_Данные.Разрез1,
	|	ВТ_Данные.Разрез3,
	|	ВТ_Данные.Разрез4,
	|	ВТ_Данные.Разрез5,
	|	ВТ_Данные.Разрез7,
	|	ВТ_Данные.ПериодПланирования
	|ИМЕЮЩИЕ СУММА(ВТ_Данные.Количество)<>0 ИЛИ СУММА(ВТ_Данные.Сумма)<>0";
	
	
	Запрос.УстановитьПараметр("КонецПериода", 	фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(АктуализируемыйПериод,Объект.Сценарий));
	Запрос.УстановитьПараметр("НачалоПериода", 	Объект.ПериодПланирования);
	Запрос.УстановитьПараметр("Организация", 	Объект.Организация);
	Запрос.УстановитьПараметр("УправленческоеПодразделение", 	Объект.УправленческоеПодразделение);
	Запрос.УстановитьПараметр("Проект", 	Объект.Проект);
	Запрос.УстановитьПараметр("Показатели", 	Показатели);
	Запрос.УстановитьПараметр("Сценарий", 		Объект.Сценарий);
	Запрос.УстановитьПараметр("КонецДня", 		КонецДня(ТекущаяДата()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СледующийПериод = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СледующийПериодПланирования(АктуализируемыйПериод,Объект.Сценарий);
	
	МассивПоследующихПериодов = Новый Массив;
	МассивКоэффициентов = Новый Массив;
	ГоризонтПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(Объект.ПериодПланирования,Объект.Сценарий);
	мПериод = СледующийПериод;
	Пока мПериод <=ГоризонтПланирования Цикл
		МассивПоследующихПериодов.Добавить(мПериод);
		МассивКоэффициентов.Добавить(1);
		мПериод = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СледующийПериодПланирования(мПериод,Объект.Сценарий);
	КонецЦикла;
	ВалютаУпр = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	ТочностьКоличественныхПоказателей = Объект.ФормируемыйБюджет.ТочностьКоличественныхПоказателей;
	Точность = Новый Структура("Количество,Сумма",?(ТочностьКоличественныхПоказателей=0,3,ТочностьКоличественныхПоказателей),2);
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокиПравил = ТаблицаПравил.НайтиСтроки(Новый Структура("ФинансовыйПоказатель",ВыборкаДетальныеЗаписи.ФинансовыйПоказатель));
		СтрокаПравил = СтрокиПравил[0];
		СтатьяБюджета = СтрокаПравил.СтатьяБюджета;
		АктуализироватьПоле("Количество",СтрокаПравил,ВыборкаДетальныеЗаписи,Объект,ВалютаУпр,СтатьяБюджета,МассивПоследующихПериодов,МассивКоэффициентов,ГоризонтПланирования,СледующийПериод,Точность);
		АктуализироватьПоле("Сумма",СтрокаПравил,ВыборкаДетальныеЗаписи,Объект,ВалютаУпр,СтатьяБюджета,МассивПоследующихПериодов,МассивКоэффициентов,ГоризонтПланирования,СледующийПериод,Точность);
	КонецЦикла;
	
	Документы.фин_Бюджет.СвернутьОбороты(Объект);
КонецПроцедуры

Процедура АктуализироватьПоле(Поле,СтрокаПравил,ВыборкаДетальныеЗаписи,Объект,ВалютаУпр,СтатьяБюджета,МассивПоследующихПериодов,МассивКоэффициентов,ГоризонтПланирования,СледующийПериод,Точность)
	Если ВыборкаДетальныеЗаписи[Поле]<>0 Тогда
		ВидПереноса 		= ?(ВыборкаДетальныеЗаписи[Поле]<0,"Дефицит","Профицит");
		Правило 			= СтрокаПравил["Актуализация"+ВидПереноса+"а"];
		СтатьяДляПереноса 	= СтрокаПравил["СтатьяДляПереноса"+ВидПереноса+"а"];
		ТолькоПриНаличииИсполнения 	= СтрокаПравил["Актуализация"+ВидПереноса+"аТолькоПриНаличииИсполнения"];
		Если Правило = Перечисления.фин_ПорядокАктуализацииСтатейБюджетов.НеАктуализировать ИЛИ Правило = Перечисления.фин_ПорядокАктуализацииСтатейБюджетов.ПустаяСсылка() Тогда
			Возврат;
		КонецЕсли;
		Если ТолькоПриНаличииИсполнения И ВыборкаДетальныеЗаписи[Поле+"Факт"]=0 Тогда
			Возврат;
		КонецЕсли;
		ДобавитьАктуализируемуюСтроку(Объект,ВыборкаДетальныеЗаписи,СтатьяБюджета,ВалютаУпр,,Поле,-1);
		Если Правило = Перечисления.фин_ПорядокАктуализацииСтатейБюджетов.ПеренестиНаСледующийПериод Тогда
			Если СледующийПериод<=ГоризонтПланирования Тогда
				ДобавитьАктуализируемуюСтроку(Объект,ВыборкаДетальныеЗаписи,СтатьяБюджета,ВалютаУпр,СледующийПериод,Поле);
			КонецЕсли;
		ИначеЕсли Правило = Перечисления.фин_ПорядокАктуализацииСтатейБюджетов.ТолькоПривестиКФактическимЗначениям Тогда
			//ДобавитьАктуализируемуюСтроку(Объект,ВыборкаДетальныеЗаписи,СтатьяБюджета,ВалютаУпр,,Поле,-1);
		ИначеЕсли Правило = Перечисления.фин_ПорядокАктуализацииСтатейБюджетов.РаспределитьНаСледующиеПериоды Тогда
			Если МассивКоэффициентов.Количество()>0 Тогда
				РезультатРаспределения = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.РаспределитьПропорционально(ВыборкаДетальныеЗаписи[Поле],МассивКоэффициентов,Точность[Поле]);
				Для Инд = 1 По РезультатРаспределения.Количество() Цикл 
					ДобавитьАктуализируемуюСтроку(Объект,ВыборкаДетальныеЗаписи,СтатьяБюджета,ВалютаУпр,МассивПоследующихПериодов[Инд-1],Поле,,РезультатРаспределения[Инд-1]);
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли Правило = Перечисления.фин_ПорядокАктуализацииСтатейБюджетов.ПеренестиНаДругуюСтатью Тогда
			Если ЗначениеЗаполнено(СтатьяДляПереноса) Тогда
				ДобавитьАктуализируемуюСтроку(Объект,ВыборкаДетальныеЗаписи,СтатьяДляПереноса,ВалютаУпр,,Поле,,,Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьАктуализируемуюСтроку(Объект,ВыборкаДетальныеЗаписи,СтатьяБюджета,ВалютаУпр,ПериодПланирования=Неопределено,Поле,Коэффициент=1,Значение=Неопределено,ЭтоПереносАналитики=Ложь)
	НоваяСтрока = Объект.ОборотыПоСтатьям.Добавить();
	СтрокаИсключения = "";
	Если ЭтоПереносАналитики Тогда
		НовыйФП = СтатьяБюджета.ФинансовыйПоказатель;
		РазрезыНового = фин_ОбщегоНазначенияВызовСервераПовтИсп.СтруктураРазрезовФинансовогоПоказателя(НовыйФП,Объект.ФормируемыйБюджет);
		РазрезыСтарого = фин_ОбщегоНазначенияВызовСервераПовтИсп.СтруктураРазрезовФинансовогоПоказателя(НоваяСтрока.ФинансовыйПоказатель,Объект.ФормируемыйБюджет);
		Для Каждого ЭлементРазрез Из РазрезыСтарого Цикл
			Если НЕ РазрезыНового.Свойство(ЭлементРазрез.Ключ) Тогда
				СтрокаИсключения = СтрокаИсключения + ?(СтрокаИсключения="","",",")+ЭлементРазрез.Ключ;
			КонецЕсли;
		КонецЦикла;
		НоваяСтрока.ФинансовыйПоказатель = НовыйФП;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи,,СтрокаИсключения + ?(СтрокаИсключения="","",",")+?(Поле="Сумма","Количество","Сумма"));
	НоваяСтрока[Поле] = ?(Значение=Неопределено,ВыборкаДетальныеЗаписи[Поле]*Коэффициент,Значение);
	НоваяСтрока.Состояние = Объект.Состояние;
	НоваяСтрока.СтатьяБюджета = СтатьяБюджета;
	Если ПериодПланирования<>Неопределено Тогда
		НоваяСтрока.ПериодПланирования = ПериодПланирования;
	КонецЕсли;
	НоваяСтрока.ВалютаОперации = Объект.ВалютаДокумента;
	Если ВалютаУпр <> Объект.ВалютаДокумента Тогда
		Если НоваяСтрока.Сумма<>0 Тогда
			КурсИсходный = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ВалютаУпр,ВыборкаДетальныеЗаписи.ПериодПланирования);
			КурсРезультирующий = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(Объект.ВалютаДокумента,НоваяСтрока.ПериодПланирования);
			НоваяСтрока.Сумма = фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Сумма,ВалютаУпр,Объект.ВалютаДокумента,КурсИсходный.Курс,КурсРезультирующий.Курс,КурсИсходный.Кратность,КурсРезультирующий.Кратность);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПервичныеСтатьиБюджета(Бюджет,ПериодПланирования=Неопределено,ФинансовыеПоказатели = Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_РегламентФормированияБюджетов.Бюджет
		|ПОМЕСТИТЬ ВТ_ПредшествующиеБюджеты
		|ИЗ
		|	РегистрСведений.фин_РегламентФормированияБюджетов.СрезПоследних(, Бюджет = &Бюджет) КАК фин_РегламентФормированияБюджетовСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.фин_РегламентФормированияБюджетов КАК фин_РегламентФормированияБюджетов
		|		ПО фин_РегламентФормированияБюджетовСрезПоследних.Регистратор = фин_РегламентФормированияБюджетов.Регламент
		|			И фин_РегламентФормированияБюджетовСрезПоследних.Ранг > фин_РегламентФормированияБюджетов.Ранг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	фин_СтатьиБюджета.ФинансовыйПоказатель
		|ПОМЕСТИТЬ ВТ_ВключениеВТекущийБюджет
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
		|ГДЕ
		|	фин_СтатьиБюджета.Владелец = &Бюджет
		|	И НЕ фин_СтатьиБюджета.ЭтоГруппа
		|	И НЕ фин_СтатьиБюджета.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	фин_СтатьиБюджета.ФинансовыйПоказатель
		|ПОМЕСТИТЬ ВТ_Наследуемые
		|ИЗ
		|	ВТ_ПредшествующиеБюджеты КАК ВТ_ПредшествующиеБюджеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
		|		ПО ВТ_ПредшествующиеБюджеты.Бюджет = фин_СтатьиБюджета.Владелец
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВключениеВТекущийБюджет КАК ВТ_ВключениеВТекущийБюджет
		|		ПО (фин_СтатьиБюджета.ФинансовыйПоказатель = ВТ_ВключениеВТекущийБюджет.ФинансовыйПоказатель)
		|ГДЕ
		|	НЕ фин_СтатьиБюджета.ПометкаУдаления
		|	И НЕ ВТ_ВключениеВТекущийБюджет.ФинансовыйПоказатель ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	фин_ЗависимостиФинансовыхПоказателей.ЗависимаяФинансовыйПоказатель
		|ПОМЕСТИТЬ ВТ_Зависимости
		|ИЗ
		|	РегистрСведений.фин_ЗависимостиФинансовыхПоказателей КАК фин_ЗависимостиФинансовыхПоказателей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	фин_РегламентныеРасчетыПоМоделям.ФинансовыйПоказатель,
		|	0 КАК РасчетВоВнешнихБюджетах
		|ПОМЕСТИТЬ ВТ_ВсеРасчетыПоМоделям
		|ИЗ
		|	РегистрСведений.фин_РегламентныеРасчетыПоМоделям КАК фин_РегламентныеРасчетыПоМоделям
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МоделиРаспределения.ФинансовыйПоказатель,
		|	ВЫБОР
		|		КОГДА ВТ_ВключениеВТекущийБюджет.ФинансовыйПоказатель ЕСТЬ NULL 
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.фин_РасчетМоделейРаспределения КАК фин_РасчетМоделейРаспределения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_МоделиРаспределенияБюджетныхДанных.ОтражениеРезультатов КАК МоделиРаспределения
		|		ПО фин_РасчетМоделейРаспределения.Модель = МоделиРаспределения.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВключениеВТекущийБюджет КАК ВТ_ВключениеВТекущийБюджет
		|		ПО фин_РасчетМоделейРаспределения.РаспределяемыйПоказатель = ВТ_ВключениеВТекущийБюджет.ФинансовыйПоказатель
		|ГДЕ
		|	фин_РасчетМоделейРаспределения.ПрименятьМодель
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПроизводственныеМодели.ФинансовыйПоказатель = ЗНАЧЕНИЕ(Перечисление.фин_ИсточникиЗаполненияПолейПроизводственнойМодели.ФиксированноеЗначение)
		|			ТОГДА ПроизводственныеМодели.ЗначениеФинансовыйПоказатель
		|		КОГДА ПроизводственныеМодели.ФинансовыйПоказатель = ЗНАЧЕНИЕ(Перечисление.фин_ИсточникиЗаполненияПолейПроизводственнойМодели.ПоПроизводимойПозиции)
		|			ТОГДА фин_РасчетПроизводственныхМоделей.ПоказательПланированияПроизводстваПродукции
		|		КОГДА ПроизводственныеМодели.ФинансовыйПоказатель = ЗНАЧЕНИЕ(Перечисление.фин_ИсточникиЗаполненияПолейПроизводственнойМодели.ПараметрыПланированияПроизводства)
		|			ТОГДА фин_ПараметрыПланированияПроизводства.ФинансовыйПоказатель
		|		ИНАЧЕ NULL
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВТ_ВключениеВТекущийБюджет.ФинансовыйПоказатель ЕСТЬ NULL 
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.фин_РасчетПроизводственныхМоделей КАК фин_РасчетПроизводственныхМоделей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ПроизводственныеМодели.ОтражениеРезультатов КАК ПроизводственныеМодели
		|		ПО фин_РасчетПроизводственныхМоделей.Модель = ПроизводственныеМодели.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_ПараметрыПланированияПроизводства КАК фин_ПараметрыПланированияПроизводства
		|		ПО (ПроизводственныеМодели.ФинансовыйПоказатель = ЗНАЧЕНИЕ(Перечисление.фин_ИсточникиЗаполненияПолейПроизводственнойМодели.ПараметрыПланированияПроизводства))
		|			И (фин_ПараметрыПланированияПроизводства.ФинансовыйПоказатель <> ЗНАЧЕНИЕ(Справочник.фин_ФинансовыеПоказатели.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВключениеВТекущийБюджет КАК ВТ_ВключениеВТекущийБюджет
		|		ПО фин_РасчетПроизводственныхМоделей.ПоказательПланированияПроизводстваПродукции = ВТ_ВключениеВТекущийБюджет.ФинансовыйПоказатель
		|ГДЕ
		|	фин_РасчетПроизводственныхМоделей.ПрименятьМодель
		|	И (ПроизводственныеМодели.ФинансовыйПоказатель = ЗНАЧЕНИЕ(Перечисление.фин_ИсточникиЗаполненияПолейПроизводственнойМодели.ФиксированноеЗначение)
		|			ИЛИ ПроизводственныеМодели.ФинансовыйПоказатель = ЗНАЧЕНИЕ(Перечисление.фин_ИсточникиЗаполненияПолейПроизводственнойМодели.ПараметрыПланированияПроизводства)
		|			ИЛИ ПроизводственныеМодели.ФинансовыйПоказатель = ЗНАЧЕНИЕ(Перечисление.фин_ИсточникиЗаполненияПолейПроизводственнойМодели.ПоПроизводимойПозиции))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	фин_ПроизводственныеМоделиДополнительныеЗатратыНаВыпуск.ФинансовыйПоказатель,
		|	ВЫБОР
		|		КОГДА ВТ_ВключениеВТекущийБюджет.ФинансовыйПоказатель ЕСТЬ NULL 
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.фин_РасчетПроизводственныхМоделей КАК фин_РасчетПроизводственныхМоделей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ПроизводственныеМодели.ДополнительныеЗатратыНаВыпуск КАК фин_ПроизводственныеМоделиДополнительныеЗатратыНаВыпуск
		|		ПО фин_РасчетПроизводственныхМоделей.Модель = фин_ПроизводственныеМоделиДополнительныеЗатратыНаВыпуск.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВключениеВТекущийБюджет КАК ВТ_ВключениеВТекущийБюджет
		|		ПО фин_РасчетПроизводственныхМоделей.ПоказательПланированияПроизводстваПродукции = ВТ_ВключениеВТекущийБюджет.ФинансовыйПоказатель
		|ГДЕ
		|	фин_РасчетПроизводственныхМоделей.ПрименятьМодель
		|	И (фин_ПроизводственныеМоделиДополнительныеЗатратыНаВыпуск.ФинансовыйПоказатель = ЗНАЧЕНИЕ(Перечисление.фин_ИсточникиЗаполненияПолейПроизводственнойМодели.ФиксированноеЗначение)
		|			ИЛИ фин_ПроизводственныеМоделиДополнительныеЗатратыНаВыпуск.ФинансовыйПоказатель = ЗНАЧЕНИЕ(Перечисление.фин_ИсточникиЗаполненияПолейПроизводственнойМодели.ПараметрыПланированияПроизводства)
		|			ИЛИ фин_ПроизводственныеМоделиДополнительныеЗатратыНаВыпуск.ФинансовыйПоказатель = ЗНАЧЕНИЕ(Перечисление.фин_ИсточникиЗаполненияПолейПроизводственнойМодели.ПоПроизводимойПозиции))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	фин_ПроизводственныеМодели.ФинансовыйПоказательДляОтраженияТрудовыхЗатрат,
		|	ВЫБОР
		|		КОГДА ВТ_ВключениеВТекущийБюджет.ФинансовыйПоказатель ЕСТЬ NULL 
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.фин_РасчетПроизводственныхМоделей КАК фин_РасчетПроизводственныхМоделей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ПроизводственныеМодели КАК фин_ПроизводственныеМодели
		|		ПО фин_РасчетПроизводственныхМоделей.Модель = фин_ПроизводственныеМодели.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВключениеВТекущийБюджет КАК ВТ_ВключениеВТекущийБюджет
		|		ПО фин_РасчетПроизводственныхМоделей.ПоказательПланированияПроизводстваПродукции = ВТ_ВключениеВТекущийБюджет.ФинансовыйПоказатель
		|ГДЕ
		|	фин_РасчетПроизводственныхМоделей.ПрименятьМодель
		|	И фин_ПроизводственныеМодели.РассчитыватьПрямыеТрудовыеЗатраты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсеРасчетыПоМоделям.ФинансовыйПоказатель,
		|	СУММА(ВТ_ВсеРасчетыПоМоделям.РасчетВоВнешнихБюджетах) КАК РасчетВоВнешнихБюджетах
		|ПОМЕСТИТЬ ВТ_ИтогоРасчетыПоМоделям
		|ИЗ
		|	ВТ_ВсеРасчетыПоМоделям КАК ВТ_ВсеРасчетыПоМоделям
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВсеРасчетыПоМоделям.ФинансовыйПоказатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	фин_СтатьиБюджета.Ссылка КАК Статья,
		|	фин_СтатьиБюджета.ФинансовыйПоказатель
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|		ПО фин_СтатьиБюджета.ФинансовыйПоказатель = фин_ФинансовыеПоказатели.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Зависимости КАК ВТ_Зависимости
		|		ПО фин_СтатьиБюджета.ФинансовыйПоказатель = ВТ_Зависимости.ЗависимаяФинансовыйПоказатель
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИтогоРасчетыПоМоделям КАК ВТ_ИтогоРасчетыПоМоделям
		|		ПО фин_СтатьиБюджета.ФинансовыйПоказатель = ВТ_ИтогоРасчетыПоМоделям.ФинансовыйПоказатель
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Наследуемые КАК ВТ_Наследуемые
		|		ПО фин_СтатьиБюджета.ФинансовыйПоказатель = ВТ_Наследуемые.ФинансовыйПоказатель
		|ГДЕ
		|	фин_СтатьиБюджета.Владелец = &Бюджет
		|	И НЕ фин_СтатьиБюджета.ЭтоГруппа
		|	И ВЫБОР
		|			КОГДА НЕ ВТ_Наследуемые.ФинансовыйПоказатель ЕСТЬ NULL 
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.фин_ВидыСтрокБюджета.Наследуемая)
		|			КОГДА фин_ФинансовыеПоказатели.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.фин_ВидыФинансовыхПоказателей.Рассчитываемый)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.фин_ВидыСтрокБюджета.РассчитываемаяПоФормуле)
		|			КОГДА НЕ ВТ_Зависимости.ЗависимаяФинансовыйПоказатель ЕСТЬ NULL 
		|					И НЕ ВТ_ИтогоРасчетыПоМоделям.ФинансовыйПоказатель ЕСТЬ NULL 
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.фин_ВидыСтрокБюджета.РассчитываемаяПоНесколькимИсточникамРасчета)
		|			КОГДА НЕ ВТ_Зависимости.ЗависимаяФинансовыйПоказатель ЕСТЬ NULL 
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.фин_ВидыСтрокБюджета.РассчитываемаяПоЗависимости)
		|			КОГДА НЕ ВТ_ИтогоРасчетыПоМоделям.ФинансовыйПоказатель ЕСТЬ NULL 
		|				ТОГДА ВЫБОР
		|						КОГДА ВТ_ИтогоРасчетыПоМоделям.РасчетВоВнешнихБюджетах > 0
		|							ТОГДА ЗНАЧЕНИЕ(Перечисление.фин_ВидыСтрокБюджета.РассчитываемаяПоМоделиВПредшествующихБюджетах)
		|						ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.фин_ВидыСтрокБюджета.РассчитываемаяПоМодели)
		|					КОНЕЦ
		|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.фин_ВидыСтрокБюджета.Первичная)
		|		КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.фин_ВидыСтрокБюджета.Первичная)
		|	И фин_СтатьиБюджета.Версия В(&Версии)";
		
	Версия = фин_ПроцедурыМеханизмовБюджетирования.ВерсияБюджета(Бюджет,ПериодПланирования);
	Версии = Новый Массив;
	Версии.Добавить(Версия);
	Версии.Добавить(Справочники.фин_ВерсииБюджетов.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("Бюджет", Бюджет);
	Запрос.УстановитьПараметр("Версии", Версии);
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат.ВыгрузитьКолонку(?(ФинансовыеПоказатели,"ФинансовыйПоказатель","Статья"));
КонецФункции

Функция ПроверитьЛимитыПоДокументуИсполнения(ДокументСсылка,Граница,БюджетныеОперации,Организация,Сценарий=Неопределено,ТаблицаРезультат=Неопределено) Экспорт
	Если Сценарий = Неопределено Тогда
		Сценарий = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ОсновнойСценарийПланирования");
	КонецЕсли;
	Если ТаблицаРезультат = Неопределено Тогда
		ТаблицаРезультат = ?(ТипЗнч(БюджетныеОперации)=Тип("ТаблицаЗначений"),БюджетныеОперации.СкопироватьКолонки(),БюджетныеОперации.ВыгрузитьКолонки());
		ТаблицаРезультат.Колонки.Добавить("ПланПоАналитике", 					Новый ОписаниеТипов("Число"));
		ТаблицаРезультат.Колонки.Добавить("ПланПоСтатье", 						Новый ОписаниеТипов("Число"));
		ТаблицаРезультат.Колонки.Добавить("ФактПоАналитике", 					Новый ОписаниеТипов("Число"));
		ТаблицаРезультат.Колонки.Добавить("ФактПоСтатье", 						Новый ОписаниеТипов("Число"));
		ТаблицаРезультат.Колонки.Добавить("ПрогнозПоАналитике", 				Новый ОписаниеТипов("Число"));
		ТаблицаРезультат.Колонки.Добавить("ПрогнозПоСтатье", 					Новый ОписаниеТипов("Число"));
		ТаблицаРезультат.Колонки.Добавить("ОстатокПоАналитике", 				Новый ОписаниеТипов("Число"));
		ТаблицаРезультат.Колонки.Добавить("ОстатокПоСтатье", 					Новый ОписаниеТипов("Число"));
		ТаблицаРезультат.Колонки.Добавить("ОстатокСУчетомПрогнозаПоАналитике", 	Новый ОписаниеТипов("Число"));
		ТаблицаРезультат.Колонки.Добавить("ОстатокСУчетомПрогнозаПоСтатье", 	Новый ОписаниеТипов("Число"));
		ТаблицаРезультат.Колонки.Добавить("ОстатокСУчетомОперацииПоСтатье", 	Новый ОписаниеТипов("Число"));
		ТаблицаРезультат.Колонки.Добавить("ОстатокСУчетомОперацииПоАналитике", 	Новый ОписаниеТипов("Число"));
		ТаблицаРезультат.Колонки.Добавить("Лимит", 								Новый ОписаниеТипов("Число"));
		ТаблицаРезультат.Колонки.Добавить("ФактПоЛимиту", 						Новый ОписаниеТипов("Число"));
		ТаблицаРезультат.Колонки.Добавить("ОстатокПоЛимиту", 					Новый ОписаниеТипов("Число"));
		ТаблицаРезультат.Колонки.Добавить("ОстатокСУчетомПрогнозаПоЛимиту", 	Новый ОписаниеТипов("Число"));
		ТаблицаРезультат.Колонки.Добавить("ОстатокСУчетомОперацииПоЛимиту", 	Новый ОписаниеТипов("Число"));
	КонецЕсли;
	ПолныйМассивИмен = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйМассивИменРазрезов");
	БюджетированиеПоОрганизациям = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям");
	МассивРегистров = фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрыФактическихДанных();
	Для Каждого СтрокаТаблицы Из БюджетныеОперации Цикл
		
		СтрокаРезультат = ТаблицаРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРезультат,СтрокаТаблицы);
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Граница", 				Граница);
		Запрос.УстановитьПараметр("КонецПериода", 			фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(СтрокаТаблицы.Период,Сценарий));
		Запрос.УстановитьПараметр("НачалоПериода", 			фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаТаблицы.Период,Сценарий));
		Запрос.УстановитьПараметр("Организация", 			Организация);
		Запрос.УстановитьПараметр("Сценарий", 				Сценарий);
		Запрос.УстановитьПараметр("ФинансовыйПоказатель", 	СтрокаТаблицы.ФинансовыйПоказатель);
		СтруктураРазрезов = фин_ОбщегоНазначенияВызовСервераПовтИсп.СтруктураРазрезовФинансовогоПоказателя(СтрокаТаблицы.ФинансовыйПоказатель);
		ЗаполнитьЗначенияСвойств(СтруктураРазрезов,СтрокаТаблицы);
		Для Каждого ЭлементРазрез Из СтруктураРазрезов Цикл
			ИмяРазреза = ЭлементРазрез.Ключ;
			ТекстОтбора = ТекстОтбора + " И "+ИмяРазреза+"=&"+ИмяРазреза;
			Запрос.УстановитьПараметр(ИмяРазреза,СтрокаТаблицы[ИмяРазреза]);
		КонецЦикла;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_ОборотыБюджетовОбороты.СуммаУпрОборот
			|ИЗ
			|	РегистрНакопления.фин_ОборотыБюджетов.Обороты(
			|			,
			|			&Граница,
			|			,
			|			"+?(БюджетированиеПоОрганизациям,"Организация = &Организация
			|				И ","")+"Сценарий = &Сценарий
			|				И ФинансовыйПоказатель = &ФинансовыйПоказатель
			|				И ПериодПланирования >= &НачалоПериода
			|				И ПериодПланирования <= &КонецПериода) КАК фин_ОборотыБюджетовОбороты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	фин_ОборотыБюджетовОбороты.СуммаУпрОборот
			|ИЗ
			|	РегистрНакопления.фин_ОборотыБюджетов.Обороты(
			|			,
			|			&Граница,
			|			,
			|			"+?(БюджетированиеПоОрганизациям,"Организация = &Организация
			|				И ","")+"Сценарий = &Сценарий
			|				И ФинансовыйПоказатель = &ФинансовыйПоказатель
			|				И ПериодПланирования >= &НачалоПериода
			|				И ПериодПланирования <= &КонецПериода"+ТекстОтбора+") КАК фин_ОборотыБюджетовОбороты
			|;
			|";
			Для Каждого ИмяРегистра Из МассивРегистров Цикл
				Запрос.Текст=Запрос.Текст+?(МассивРегистров.Найти(ИмяРегистра)=0,"","
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|") +"
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	фин_ОборотыБюджетовОбороты.СуммаУпрОборот
				|ИЗ
				|	РегистрНакопления."+ИмяРегистра+".Обороты(
				|			,
				|			&Граница,
				|			,
				|			"+?(БюджетированиеПоОрганизациям,"Организация = &Организация
				|				И ","")+"Сценарий = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка)
				|				И ФинансовыйПоказатель = &ФинансовыйПоказатель
				|				И ПериодПланирования >= &НачалоПериода
				|				И ПериодПланирования <= &КонецПериода) КАК фин_ОборотыБюджетовОбороты
				|";
			КонецЦикла;
			Запрос.Текст=Запрос.Текст+"
			|;
			|";
			Для Каждого ИмяРегистра Из МассивРегистров Цикл
				Запрос.Текст=Запрос.Текст+?(МассивРегистров.Найти(ИмяРегистра)=0,"","
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|") +"
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	фин_ОборотыБюджетовОбороты.СуммаУпрОборот
				|ИЗ
				|	РегистрНакопления."+ИмяРегистра+".Обороты(
				|			,
				|			&Граница,
				|			,
				|			"+?(БюджетированиеПоОрганизациям,"Организация = &Организация
				|				И ","")+"Сценарий = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка)
				|				И ФинансовыйПоказатель = &ФинансовыйПоказатель
				|				И ПериодПланирования >= &НачалоПериода
				|				И ПериодПланирования <= &КонецПериода"+ТекстОтбора+") КАК фин_ОборотыБюджетовОбороты
				|";
			КонецЦикла;
			Запрос.Текст=Запрос.Текст+"
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	фин_ОборотыБюджетовОбороты.СуммаУпрОборот
			|ИЗ
			|	РегистрНакопления.фин_ПрогнозИсполненияБюджетов.Обороты(
			|			,
			|			&Граница,
			|			,
			|			"+?(БюджетированиеПоОрганизациям,"Организация = &Организация
			|				И ","")+" Сценарий = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка)
			|				И ФинансовыйПоказатель = &ФинансовыйПоказатель
			|				И ПериодПланирования >= &НачалоПериода
			|				И ПериодПланирования >= &Граница
			|				И ПериодПланирования <= &КонецПериода) КАК фин_ОборотыБюджетовОбороты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	фин_ОборотыБюджетовОбороты.СуммаУпрОборот
			|ИЗ
			|	РегистрНакопления.фин_ПрогнозИсполненияБюджетов.Обороты(
			|			,
			|			&Граница,
			|			,
			|			"+?(БюджетированиеПоОрганизациям,"Организация = &Организация
			|				И ","")+"Сценарий = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка)
			|				И ФинансовыйПоказатель = &ФинансовыйПоказатель
			|				И ПериодПланирования >= &НачалоПериода
			|				И ПериодПланирования >= &Граница
			|				И ПериодПланирования <= &КонецПериода"+ТекстОтбора+") КАК фин_ОборотыБюджетовОбороты";
		
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса[0].Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			СтрокаРезультат.ПланПоСтатье =  ВыборкаДетальныеЗаписи.СуммаУпрОборот;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			СтрокаРезультат.ПланПоАналитике =  ВыборкаДетальныеЗаписи.СуммаУпрОборот;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса[2].Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			СтрокаРезультат.ФактПоСтатье =  ВыборкаДетальныеЗаписи.СуммаУпрОборот;
		КонецЕсли;

		СтрокаРезультат.ОстатокПоСтатье = СтрокаРезультат.ПланПоСтатье - СтрокаРезультат.ФактПоСтатье;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса[3].Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			СтрокаРезультат.ФактПоАналитике =  ВыборкаДетальныеЗаписи.СуммаУпрОборот;
		КонецЕсли;

		СтрокаРезультат.ОстатокПоАналитике = СтрокаРезультат.ПланПоАналитике - СтрокаРезультат.ФактПоАналитике;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса[2].Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			СтрокаРезультат.ПрогнозПоСтатье =  ВыборкаДетальныеЗаписи.СуммаУпрОборот;
		КонецЕсли;
		
		СтрокаРезультат.ОстатокСУчетомПрогнозаПоСтатье = СтрокаРезультат.ОстатокПоСтатье - СтрокаРезультат.ПрогнозПоСтатье;
		СтрокаРезультат.ОстатокСУчетомОперацииПоСтатье = СтрокаРезультат.ОстатокСУчетомПрогнозаПоСтатье - СтрокаРезультат.СуммаУпр;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса[3].Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			СтрокаРезультат.ПрогнозПоАналитике =  ВыборкаДетальныеЗаписи.СуммаУпрОборот;
		КонецЕсли;
		
		СтрокаРезультат.ОстатокСУчетомПрогнозаПоАналитике = СтрокаРезультат.ОстатокПоАналитике - СтрокаРезультат.ПрогнозПоАналитике;
		СтрокаРезультат.ОстатокСУчетомОперацииПоАналитике = СтрокаРезультат.ОстатокСУчетомПрогнозаПоАналитике - СтрокаРезультат.СуммаУпр;
	    			
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Период",СтрокаТаблицы.Период);
		Для Каждого ИмяРазреза Из ПолныйМассивИмен Цикл
			СтруктураДанных.Вставить(ИмяРазреза,СтрокаТаблицы[ИмяРазреза]);	
		КонецЦикла;
		
		СтруктураРазрезов.Вставить("Период",СтрокаТаблицы.Период);
		СписокЛимитов = фин_УправлениеЗависимостямиСтатейБюджетов.ПолучитьТаблицуКонтролирующихПравил(СтрокаТаблицы.ФинансовыйПоказатель,Сценарий,БюджетированиеПоОрганизациям,Организация,СтруктураРазрезов,Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении,Истина);
		
		МассивУдаляемых = Новый Массив;
		Для Каждого СтрокаЛимит Из СписокЛимитов Цикл
			Если фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаЛимит.Период,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СтрокаЛимит.КонтролирующийСценарий)) <> фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаТаблицы.Период,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СтрокаЛимит.КонтролирующийСценарий)) Тогда
				МассивУдаляемых.Добавить(СтрокаЛимит);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаЛимит Из МассивУдаляемых Цикл
			СписокЛимитов.Удалить(СтрокаЛимит);
		КонецЦикла;
		
		ПроверкаПройдена = Истина;
		ТабКонтролируемыхЗначений=фин_РегистрацияФактическихДанныхПоБюджетированию.ПроверкаКонтролируемыхЗначений(ДокументСсылка,СписокЛимитов,СтрокаТаблицы,СтрокаТаблицы,БюджетированиеПоОрганизациям,ПолныйМассивИмен,ПроверкаПройдена,Истина,Истина);
		
		СтрокаРезультат.Лимит = ТабКонтролируемыхЗначений.Итог("СуммаСценарияКонтроль");	
		
		СтрокаРезультат.ФактПоЛимиту = ТабКонтролируемыхЗначений.Итог("СуммаСценарияКонтрольИтого");	
		
		СтрокаРезультат.ОстатокПоЛимиту = СтрокаРезультат.Лимит - СтрокаРезультат.ФактПоЛимиту;	
		
		СтрокаРезультат.ОстатокСУчетомПрогнозаПоЛимиту = СтрокаРезультат.ОстатокПоЛимиту;	
		
		
		Если СтрокаРезультат.Лимит>0 Тогда
			СтрокаРезультат.ОстатокСУчетомОперацииПоЛимиту = СтрокаРезультат.ОстатокСУчетомПрогнозаПоЛимиту - СтрокаРезультат.СуммаУпр;	
		КонецЕсли;
		

	КонецЦикла;
	
КонецФункции