////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫПОЛНЕНИЯ РАСЧЕТОВ

// Производит расчет записей набора записей регистра расчета
// параметры:
//  ИсходныеДанные - результат запроса к исходным данным
//  НаборЗаписейРегистра - набор записей
//  ГоловнаяОрганизация - ссылка на организацию
//  ОбособленноеПодразделение - ссылка на обособленное подразделение
//	ТабличнаяЧастьДокумента - табличная часть документа, заполняется по результатам расчета
//	ТаблицаСтавокИПН - таблица значений со ставками ИПН за период, соответствующий текущему рассчитываемому периоду регистрации
//						используется для расчета "от обратного"
//
// возвращаемое значение:
//	нет
//
Процедура РассчитатьЗаписиНабора(ИсходныеДанные, 
									НаборЗаписейРегистра, 
									ГоловнаяОрганизация, 
									ОбособленноеПодразделение, 
									ТабличнаяЧастьДокумента, 
									ТаблицаСтавокИПН = Неопределено,
									МассивИндексыСтрокТабличнойЧасти = Неопределено,
									КомментироватьРасчет = Ложь, ФормаКомментариев = НеОпределено,
									СтруктураЦелевыхРазмеровДляРасчетовОтОбратного) Экспорт
	
	СтруктураПоиска = Новый Структура("НомерСтроки");
	ПустойКодДохода = Справочники.СпособыНалогообложенияДоходов.ПустаяСсылка();
	
	// признаки расчета набора записей определенного регистра
	ОсновныеНачисленияОрганизаций = Ложь;
	ДополнительныеНачисленияОрганизаций = Ложь;
	УправленческиеРасчеты = Ложь;
	УправленческиеНачисления = Ложь;
	РегламентированныеУдержания = Ложь;
    РегламентированныеНачисления = Ложь;
	Если ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") Тогда
		ОсновныеНачисленияОрганизаций = Истина;
        РегламентированныеНачисления = Истина;
    ИначеЕсли ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") Тогда
        ДополнительныеНачисленияОрганизаций = Истина;
        РегламентированныеНачисления = Истина;
	ИначеЕсли ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.УправленческиеНачисления") Тогда
		УправленческиеРасчеты = Истина;
		УправленческиеНачисления = Истина;
	ИначеЕсли ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.УправленческиеУдержания") Тогда
		УправленческиеРасчеты = Истина;
	ИначеЕсли ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.УдержанияРаботниковОрганизаций") Тогда
		РегламентированныеУдержания = Истина;
	КонецЕсли;
	
	ИсходныеДанные.Сбросить();
	
	Для Каждого СтрокаДвижений Из НаборЗаписейРегистра Цикл
		СтруктураПоиска.НомерСтроки = СтрокаДвижений.НомерСтроки;
		Если ИсходныеДанные.НайтиСледующий(СтруктураПоиска) Тогда
			
			Если ТабличнаяЧастьДокумента = НеОпределено Тогда
				СтрокаТабличнойЧасти = НеОпределено;
			Иначе
				Если МассивИндексыСтрокТабличнойЧасти = Неопределено Тогда
					СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(НаборЗаписейРегистра.Индекс(СтрокаДвижений));
				Иначе
					СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(МассивИндексыСтрокТабличнойЧасти.Получить(НаборЗаписейРегистра.Индекс(СтрокаДвижений)));
				КонецЕсли;
			КонецЕсли;
			
			РассчитатьЗаписьРегистраРасчета(СтрокаДвижений, ИсходныеДанные, УправленческиеРасчеты, РегламентированныеНачисления, РегламентированныеУдержания, ОсновныеНачисленияОрганизаций, ДополнительныеНачисленияОрганизаций, ТаблицаСтавокИПН, КомментироватьРасчет, ФормаКомментариев, СтруктураЦелевыхРазмеровДляРасчетовОтОбратного);
			Если СтрокаТабличнойЧасти <> НеОпределено Тогда
				СтрокаТабличнойЧасти.Результат = СтрокаДвижений.Результат;
				
				// дополнительные данные, определяемые в момент расчета и требующиеся для дальнейших расчетов
				Если ОсновныеНачисленияОрганизаций ИЛИ ДополнительныеНачисленияОрганизаций Тогда
					СтрокаТабличнойЧасти.ДополнительныеДанные = СтрокаДвижений.ДополнительныеДанные;
				КонецЕсли;
				
			КонецЕсли;
			
			// если это данные по виду расчета, период действия которого является отработанным временем
			// или учитывается как норма времени, то сохраним данные о времени
			Если (ОсновныеНачисленияОрганизаций ИЛИ УправленческиеНачисления) И СтрокаДвижений.Авторасчет Тогда
				
				СпособРасчета = ИсходныеДанные.СпособРасчета;
				
				БылоСообщениеОРабочемВремени = 
					(СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням или 
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратного или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеОтОбратного или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке или
                    СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням или 
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы или
                    СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения или 
                    СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения); 
				
				БылоСообщениеОВидеВремени = Ложь;
				
				Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
					Если (ИсходныеДанные.ОтработаноВремениОсновное = NULL ИЛИ ИсходныеДанные.ОтработаноВремениОсновное = 0) 
							И ?(НЕ УправленческиеНачисления, ИсходныеДанные.ЕстьОтработаноЧасовПоТабелю = 0, Истина) Тогда
						Если Не БылоСообщениеОРабочемВремени Тогда
							Сообщить(""+СтрокаДвижений.Физлицо + "; " + СтрокаДвижений.ВидРасчета + ": Нет рабочих дней в заданном периоде", СтатусСообщения.Важное);
							БылоСообщениеОРабочемВремени = Истина;
						КонецЕсли; 
						// обнуляем ресурсы по отработанному времени
						СтрокаДвижений.ОтработаноДней = 0;
						СтрокаДвижений.ОтработаноЧасов = 0;
						Если ОсновныеНачисленияОрганизаций Тогда
							СтрокаДвижений.ОтработаноДнейПоПятидневке = 0 ;
						КонецЕсли; 						
					Иначе
						Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням Тогда
							СтрокаДвижений.ОтработаноДней = ОплачиваемыеДни(УправленческиеНачисления, ИсходныеДанные) * ?(СтрокаДвижений.Сторно,-1,1);
							СтрокаДвижений.ОтработаноЧасов = ОплачиваемыеЧасы(УправленческиеНачисления, ИсходныеДанные) * ?(СтрокаДвижений.Сторно,-1,1);
						ИначеЕсли СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
							СтрокаДвижений.ОтработаноЧасов = ОплачиваемыеЧасы(УправленческиеНачисления, ИсходныеДанные) * ?(СтрокаДвижений.Сторно,-1,1);
							СтрокаДвижений.ОтработаноДней = ОплачиваемыеДни(УправленческиеНачисления, ИсходныеДанные) * ?(СтрокаДвижений.Сторно,-1,1);
						Иначе
							Сообщить(""+СтрокаДвижений.Физлицо + "; " + СтрокаДвижений.ВидРасчета + ": Не задан вид учета времени", СтатусСообщения.Важное);
							БылоСообщениеОВидеВремени = Истина;
							// обнуляем ресурсы по отработанному времени
							СтрокаДвижений.ОтработаноДней = 0;
							СтрокаДвижений.ОтработаноЧасов = 0;
							Если ОсновныеНачисленияОрганизаций Тогда
								СтрокаДвижений.ОтработаноДнейПоПятидневке = 0 ;
							КонецЕсли; 						
						КонецЕсли;
						Если ОсновныеНачисленияОрганизаций Тогда
							СтрокаДвижений.ОтработаноДнейПоПятидневке = ?(ИсходныеДанные.ОтработаноВремениПроизводственныйГрафик <> Null, ИсходныеДанные.ОтработаноВремениПроизводственныйГрафик,0)  * ?(СтрокаДвижений.Сторно,-1,1) ;
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли; 
				
				Если ОсновныеНачисленияОрганизаций И ИсходныеДанные.ЗачетНормыВремени Тогда
					Если ИсходныеДанные.ОсновноеЗначениеНормаФактическийПериодДействия = NULL Тогда
						Если Не БылоСообщениеОРабочемВремени Тогда
							Сообщить(""+СтрокаДвижений.Физлицо + "; " + СтрокаДвижений.ВидРасчета + ": Нет рабочих дней в заданном периоде", СтатусСообщения.Важное);
						КонецЕсли; 
						// обнуляем ресурсы по отработанному времени
						СтрокаДвижений.НормаДней = 0;
						СтрокаДвижений.НормаЧасов = 0;
						СтрокаДвижений.НормаДнейПоПятидневке = 0 ;
					Иначе
						Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням Тогда
							СтрокаДвижений.НормаДней = НормаОплачиваемыхДней(ИсходныеДанные) * ?(СтрокаДвижений.Сторно,-1,1);
							СтрокаДвижений.НормаЧасов = НормаОплачиваемыхЧасов(ИсходныеДанные) * ?(СтрокаДвижений.Сторно,-1,1);
						ИначеЕсли ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
							СтрокаДвижений.НормаЧасов = НормаОплачиваемыхЧасов(ИсходныеДанные) * ?(СтрокаДвижений.Сторно,-1,1);
							Если Не ИсходныеДанные.ВидРасчетаЯвляетсяПочасовымОтклонением Тогда
								СтрокаДвижений.НормаДней = НормаОплачиваемыхДней(ИсходныеДанные) * ?(СтрокаДвижений.Сторно,-1,1);
							КонецЕсли;
						Иначе
							Если Не БылоСообщениеОВидеВремени Тогда
								Сообщить(""+СтрокаДвижений.Физлицо + "; " + СтрокаДвижений.ВидРасчета + ": Не задан вид учета времени", СтатусСообщения.Важное);
							КонецЕсли;
							// обнуляем ресурсы по отработанному времени
							СтрокаДвижений.НормаДней = 0;
							СтрокаДвижений.НормаЧасов = 0;
							СтрокаДвижений.НормаДнейПоПятидневке = 0 ;
						КонецЕсли;
						Если Не ИсходныеДанные.ВидРасчетаЯвляетсяПочасовымОтклонением Тогда
							СтрокаДвижений.НормаДнейПоПятидневке = ?(ИсходныеДанные.ПроизводственныйКалендарьПятидневкаФактическийПериодДействия = NULL, 0, ИсходныеДанные.ПроизводственныйКалендарьПятидневкаФактическийПериодДействия) * ?(СтрокаДвижений.Сторно,-1,1);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли; 
				
				// Перепишем данные из регистра в табличную часть документа
				Если СтрокаТабличнойЧасти <> НеОпределено тогда
					Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
						СтрокаТабличнойЧасти.ОтработаноДней = СтрокаДвижений.ОтработаноДней;
						СтрокаТабличнойЧасти.ОтработаноЧасов = СтрокаДвижений.ОтработаноЧасов;
						Если ОсновныеНачисленияОрганизаций Тогда
							СтрокаТабличнойЧасти.ОтработаноДнейПоПятидневке = СтрокаДвижений.ОтработаноДнейПоПятидневке;
						КонецЕсли;
					ИначеЕсли ИсходныеДанные.УчетОтработанногоВремени Тогда
						СтрокаТабличнойЧасти.ОтработаноДней = СтрокаДвижений.УчитываемыеДни;
						СтрокаТабличнойЧасти.ОтработаноЧасов = СтрокаДвижений.УчитываемыеЧасы;
                        Если ОсновныеНачисленияОрганизаций Тогда
                            СтрокаТабличнойЧасти.ОтработаноДнейПоПятидневке = 0;
                        КонецЕсли;
                    Иначе
                        СтрокаТабличнойЧасти.ОтработаноДней = 0;
                        СтрокаТабличнойЧасти.ОтработаноЧасов = 0;
                        Если ОсновныеНачисленияОрганизаций Тогда
                            СтрокаТабличнойЧасти.ОтработаноДнейПоПятидневке = 0;
                        КонецЕсли;
					КонецЕсли;
					
					Если ОсновныеНачисленияОрганизаций Тогда
					 	Если ИсходныеДанные.ЗачетНормыВремени Тогда
							СтрокаТабличнойЧасти.НормаДней = СтрокаДвижений.НормаДней;
							СтрокаТабличнойЧасти.НормаЧасов = СтрокаДвижений.НормаЧасов;
							СтрокаТабличнойЧасти.НормаДнейПоПятидневке = СтрокаДвижений.НормаДнейПоПятидневке;
						Иначе
                            СтрокаТабличнойЧасти.НормаДней = 0;
                            СтрокаТабличнойЧасти.НормаЧасов = 0;
                            СтрокаТабличнойЧасти.НормаДнейПоПятидневке = 0;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли; 					
			КонецЕсли;	
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // РассчитатьЗаписиНабора

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  ТаблицаСтавокИПН - таблица значений со ставками ИПН за текущий рассчитываемый период регистрации для расчета "от обратного"
//
// Возвращаемое значение:
//  Нет.
//
Процедура РассчитатьЗаписьРегистраРасчета(СтрокаДвижений, 
											ИсходныеДанные, 
											УправленческиеРасчеты, 
											РегламентированныеНачисления, 
											РегламентированныеУдержания, 
											ОсновныеНачисленияОрганизаций, 
											ДополнительныеНачисленияОрганизаций, 
											ТаблицаСтавокИПН = Неопределено,
											КомментироватьРасчет, ФормаКомментариев, 
											СтруктураЦелевыхРазмеровДляРасчетовОтОбратного)
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	СпособРасчета = ИсходныеДанные.СпособРасчета;
	Результат = 0;
	СпособРасчетаОтПоказателей = Ложь;
	
	РезультатПолучен = Истина;
	
	ПоказательРазмер = "Показатель1";
	
	// расчет будем проводить только для авторассчитываемой записи
	Если СтрокаДвижений.Авторасчет Тогда
	
		Если КомментироватьРасчет Тогда
			КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>%%</B>", ,ИсходныеДанные.ВидРасчетаНаименование, СтрокаДвижений.ВидРасчета);
			РаботаССообщениями.КомментарийРасчета("Способ расчета: " + ИсходныеДанные.СпособРасчета, КомментарийВидаРасчета);
			РаботаССообщениями.КомментарийРасчета("Порядок расчета: " + ВизуализироватьФормулуРасчета(СтрокаДвижений.ВидРасчета, , ИсходныеДанные.ВычитатьИзБазыИПН, ИсходныеДанные.ВычитатьИзБазыОПВ), КомментарийВидаРасчета);
		КонецЕсли;
	
		// вычислим значения расчетных показателей мотивации
		Если Найти(Строка(ИсходныеДанные.СпособРасчета), "П1") <> 0 Тогда
			
			СпособРасчетаОтПоказателей = Истина;
		
			МассивЗначенийПоказателей = Новый Массив(5);
			МассивЗначенийПоказателей[0] = NULL;
			МассивЗначенийПоказателей[1] = NULL;
			МассивЗначенийПоказателей[2] = NULL;
			МассивЗначенийПоказателей[3] = NULL;
			МассивЗначенийПоказателей[4] = NULL;
			
			ПоказательВремяВДнях 	= Справочники.ПоказателиСхемМотивации.ВремяВДнях;
			ПоказательВремяВЧасах 	= Справочники.ПоказателиСхемМотивации.ВремяВЧасах;
			ПоказательНормаВремениВДнях = Справочники.ПоказателиСхемМотивации.НормаВремениВДнях;
			ПоказательНормаВремениВЧасах = Справочники.ПоказателиСхемМотивации.НормаВремениВЧасах;
			
			Для СчПоказателей = 1 По 5 Цикл
				
				Если УправленческиеРасчеты Тогда
					ЗначениеПоказателя = ИсходныеДанные["Показатель" + СчПоказателей];
				Иначе
					ЗначениеПоказателя 	= NULL;
					ПоказательМотивации = ИсходныеДанные["ПоказательМотивации" + СчПоказателей];
				
					Если ПоказательМотивации = ПоказательВремяВДнях Тогда
						ЗначениеПоказателя = ОплачиваемыеДни(Ложь, ИсходныеДанные);
						
						Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
							РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
						КонецЕсли;
					
					ИначеЕсли ПоказательМотивации = ПоказательВремяВЧасах Тогда
						ЗначениеПоказателя = ОплачиваемыеЧасы(Ложь, ИсходныеДанные);
						
						Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
							РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
						КонецЕсли;
						
					ИначеЕсли ПоказательМотивации = ПоказательНормаВремениВДнях Тогда
						ЗначениеПоказателя = НормаВремениЗаМесяц(ИсходныеДанные, Перечисления.ВидыУчетаВремени.ПоДням);
						
						Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
							РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
						КонецЕсли;
						
					ИначеЕсли ПоказательМотивации = ПоказательНормаВремениВЧасах Тогда
						
						ЗначениеПоказателя = НормаВремениЗаМесяц(ИсходныеДанные, Перечисления.ВидыУчетаВремени.ПоЧасам);
						
						Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
							РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
						КонецЕсли;
						
					ИначеЕсли ЗначениеЗаполнено(ПоказательМотивации) Тогда
						ЗначениеПоказателя = ИсходныеДанные["Показатель" + СчПоказателей];
					
					КонецЕсли;
				КонецЕсли;
				
				МассивЗначенийПоказателей[СчПоказателей - 1] = ЗначениеПоказателя;
				
			КонецЦикла;			

			Показатель1 = МассивЗначенийПоказателей[0];
			Показатель2 = МассивЗначенийПоказателей[1];
			Показатель3 = МассивЗначенийПоказателей[2];
			Показатель4 = МассивЗначенийПоказателей[3];
			Показатель5 = МассивЗначенийПоказателей[4];
		КонецЕсли;
	
	    // этот Если... нужно расширять при появлении новых способов расчета или видов расчета,
		// которые не укладываются в тот или иной способ
		
		// Процентом
		//	
		Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
			// Размер - процент доплаты
			Если ИсходныеДанные.РезультатБаза = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисления ");
			Иначе
				РезультатБаза = ИсходныеДанные.РезультатБаза;

				Если КомментироватьРасчет Тогда
					КомментарийБазы = РаботаССообщениями.КомментарийРасчета("Базовые начисления составили всего: " + РезультатБаза, КомментарийВидаРасчета,,,, Ложь);
				КонецЕсли;
				
				Если РегламентированныеУдержания Тогда
					
					Если ИсходныеДанные.ВычитатьИзБазыИПН И ИсходныеДанные.ИсчисленныйНалог <> NULL Тогда
						РезультатБаза = РезультатБаза - ИсходныеДанные.ИсчисленныйНалог;
						Если КомментироватьРасчет Тогда
							РаботаССообщениями.КомментарийРасчета("Исчислен ИПН за текущий период: " + ИсходныеДанные.ИсчисленныйНалог, КомментарийВидаРасчета); 
						КонецЕсли;
					КонецЕсли;
					
					Если ИсходныеДанные.ВычитатьИзБазыОПВ И ИсходныеДанные.ИсчисленныйВзнос <> NULL Тогда
						РезультатБаза = РезультатБаза - ИсходныеДанные.ИсчисленныйВзнос;
						Если КомментироватьРасчет Тогда
							РаботаССообщениями.КомментарийРасчета("Исчислены ОПВ за текущий период: " + ИсходныеДанные.ИсчисленныйВзнос, КомментарийВидаРасчета); 
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				Результат = РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100;
				
				Если КомментироватьРасчет Тогда
					Если РегламентированныеУдержания Тогда
						РаботаССообщениями.КомментарийРасчета("Процент удержания: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета); 
					Иначе
						РаботаССообщениями.КомментарийРасчета("Процент оплаты: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета); 
					КонецЕсли;
				КонецЕсли;
				
				Если РегламентированныеУдержания Тогда
					Результат = Макс(Результат, 0);
				КонецЕсли;
			КонецЕсли;
			
		// ПоМесячномуРасчетномуПоказателю
		//	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю Тогда
			// Размер - коэффициент МРП
			РасшифровкаМРП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			Если ИсходныеДанные.РазмерМесячногоРасчетногоПоказателя = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": ", "Не определен размер месячного расчетного показателя", РасшифровкаМРП);
			Иначе
				Результат = ИсходныеДанные.РазмерМесячногоРасчетногоПоказателя * СтрокаДвижений[ПоказательРазмер];
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Коэффициент МРП: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета); 
					РаботаССообщениями.КомментарийРасчета("Месячный расчетный показатель: ", КомментарийВидаРасчета, "" + ИсходныеДанные.РазмерМесячногоРасчетногоПоказателя, РасшифровкаМРП); 
				КонецЕсли;
			КонецЕсли;
			
		// ПоМесячномуРасчетномуПоказателюПоДням
		// ПоМесячномуРасчетномуПоказателюПоЧасам
		//
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням или 
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам Тогда
			
			РасшифровкаМРП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");		
			Если ИсходныеДанные.РазмерМесячногоРасчетногоПоказателя = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": ", "Не определен размер месячного расчетного показателя", РасшифровкаМРП);
				СтрокаДвижений.Результат = 0;
				Возврат;
			КонецЕсли;
					
			НормаВремени = НормаВремениЗаМесяц(ИсходныеДанные, ИсходныеДанные.ВидУчетаВремени);
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные);
			Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
			ИначеЕсли НормаВремени = 0 или ОтработаноВремениОсновное = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
			Иначе
				Результат = ИсходныеДанные.РазмерМесячногоРасчетногоПоказателя * СтрокаДвижений[ПоказательРазмер] * ОтработаноВремениОсновное / НормаВремени;
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Коэффициент МРП: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Месячный расчетный показатель: ", КомментарийВидаРасчета, "" + ИсходныеДанные.РазмерМесячногоРасчетногоПоказателя, РасшифровкаМРП);
					РаботаССообщениями.КомментарийРасчета("Норма времени за месяц: " + НормаВремени, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Оплачиваемое время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Вид учета времени: " + СтрокаДвижений.ВидУчетаВремени, КомментарийВидаРасчета);
				КонецЕсли;
				
				// чтобы за счет переработки не увеличить сумму регламентированных начислений (например, экологической доплаты)
				Если Не СтрокаДвижений.Сторно Тогда
					Если Результат + ИсходныеДанные.УжеНачисленоВТекущемПериоде > ИсходныеДанные.РазмерМесячногоРасчетногоПоказателя * СтрокаДвижений[ПоказательРазмер] Тогда
						Результат = ИсходныеДанные.РазмерМесячногоРасчетногоПоказателя * СтрокаДвижений[ПоказательРазмер] - ИсходныеДанные.УжеНачисленоВТекущемПериоде;
						
						Если КомментироватьРасчет Тогда
							РаботаССообщениями.КомментарийРасчета("Ранее начислено в текущем периоде: " + ИсходныеДанные.УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					// сторнируем не больше, чем начислили
					Если Результат > ИсходныеДанные.УжеНачисленоВТекущемПериоде Тогда
						Результат = ИсходныеДанные.УжеНачисленоВТекущемПериоде;

						Если КомментироватьРасчет Тогда
							РаботаССообщениями.КомментарийРасчета("Ранее начислено в текущем периоде: " + ИсходныеДанные.УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// фиксируем отработанное время
			Если (НЕ ИсходныеДанные.ЗачетОтработанногоВремени) И (ИсходныеДанные.УчетОтработанногоВремени) Тогда
				СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
			Иначе
				СтрокаДвижений.УчитываемыеДни  = 0;
				СтрокаДвижений.УчитываемыеЧасы = 0;
			КонецЕсли;

		// ПоМинимальнойЗаработнойПлате
		//	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате Тогда
			// Размер - коэффициент МЗП
			РасшифровкаМЗП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			Если ИсходныеДанные.РазмерМинимальнойЗаработнойПлаты = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": ", "Не определен размер минимальной заработной платы", РасшифровкаМЗП);
			Иначе
				Результат = ИсходныеДанные.РазмерМинимальнойЗаработнойПлаты * СтрокаДвижений[ПоказательРазмер];
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Коэффициент МЗП: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Минимальная заработная плата: ", КомментарийВидаРасчета, "" + ИсходныеДанные.РазмерМинимальнойЗаработнойПлаты, РасшифровкаМЗП);
				КонецЕсли;
				
			КонецЕсли;
			
		// ПоМинимальнойЗаработнойПлатеПоДням
		// ПоМинимальнойЗаработнойПлатеПоЧасам
		//
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням или 
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам Тогда

			// Размер - коэффициент МЗП
			РасшифровкаМЗП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			Если ИсходныеДанные.РазмерМинимальнойЗаработнойПлаты = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": ", "Не определен размер минимальной заработной платы", РасшифровкаМЗП);
				СтрокаДвижений.Результат = 0;
				Возврат;
			КонецЕсли;
					
			НормаВремени = НормаВремениЗаМесяц(ИсходныеДанные, ИсходныеДанные.ВидУчетаВремени);
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные);
			Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
			ИначеЕсли НормаВремени = 0 или ОтработаноВремениОсновное = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
			Иначе
				Результат = ИсходныеДанные.РазмерМинимальнойЗаработнойПлаты * СтрокаДвижений[ПоказательРазмер] * ОтработаноВремениОсновное / НормаВремени;

				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Коэффициент МЗП: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Минимальная заработная плата: ", КомментарийВидаРасчета, "" + ИсходныеДанные.РазмерМинимальнойЗаработнойПлаты, РасшифровкаМЗП);
					РаботаССообщениями.КомментарийРасчета("Норма времени за месяц: " + НормаВремени, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Оплачиваемое время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Вид учета времени: " + СтрокаДвижений.ВидУчетаВремени, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
			
			// фиксируем отработанное время
			Если (НЕ ИсходныеДанные.ЗачетОтработанногоВремени) И (ИсходныеДанные.УчетОтработанногоВремени) Тогда
				СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
			Иначе
				СтрокаДвижений.УчитываемыеДни  = 0;
				СтрокаДвижений.УчитываемыеЧасы = 0;
			КонецЕсли;
			
		// ИсполнительныйЛистПроцентом
		//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Тогда
			
			// Размер - процент удержания
			Если ИсходныеДанные.РезультатБаза = NULL Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисления ");
			Иначе
				
				РезультатБаза = ИсходныеДанные.РезультатБаза;
				
				Если КомментироватьРасчет Тогда
					КомментарийБазы = РаботаССообщениями.КомментарийРасчета("Базовые начисления составили всего: " + РезультатБаза, КомментарийВидаРасчета,,,, Ложь);
				КонецЕсли;
				
				Если ИсходныеДанные.ВычитатьИзБазыИПН Тогда
					ИсчисленныйНалог 	= ?(ИсходныеДанные.ИсчисленныйНалог = Null, 0, ИсходныеДанные.ИсчисленныйНалог);
					РезультатБаза 		= РезультатБаза - ИсчисленныйНалог;

					Если КомментироватьРасчет Тогда
						РаботаССообщениями.КомментарийРасчета("Исчислен ИПН за текущий период: " + ИсчисленныйНалог, КомментарийВидаРасчета); 
					КонецЕсли;
					
				КонецЕсли;
				
				Если ИсходныеДанные.ВычитатьИзБазыОПВ Тогда
					ИсчисленныйВзнос	= ?(ИсходныеДанные.ИсчисленныйВзнос = Null, 0, ИсходныеДанные.ИсчисленныйВзнос);
					РезультатБаза 		= РезультатБаза - ИсчисленныйВзнос;
					
					Если КомментироватьРасчет Тогда
						РаботаССообщениями.КомментарийРасчета("Исчислены ОПВ за текущий период: " + ИсходныеДанные.ИсчисленныйВзнос, КомментарийВидаРасчета); 
					КонецЕсли;
					
				КонецЕсли;
				
				УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
				
				Результат = Макс((РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100) - УжеНачисленоВТекущемПериоде, 0);
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Процент удержания: ", КомментарийВидаРасчета, СтрокаДвижений[ПоказательРазмер], СтрокаДвижений.ДокументОснование);
					Если УжеНачисленоВТекущемПериоде <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Ранее удержано в текущем периоде: " + УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			
		// ИсполнительныйЛистПроцентомДоПредела
		//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Тогда
			
			// Размер - процент удержания
			Если ИсходныеДанные.РезультатБаза = NULL Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисления ");
			Иначе
				
				РезультатБаза = ИсходныеДанные.РезультатБаза;

				Если КомментироватьРасчет Тогда
					КомментарийБазы = РаботаССообщениями.КомментарийРасчета("Базовые начисления составили всего: " + РезультатБаза, КомментарийВидаРасчета,,,, Ложь);
				КонецЕсли;
				
				Если ИсходныеДанные.ВычитатьИзБазыИПН Тогда
					ИсчисленныйНалог 	= ?(ИсходныеДанные.ИсчисленныйНалог = Null, 0, ИсходныеДанные.ИсчисленныйНалог);
					РезультатБаза 		= РезультатБаза - ИсчисленныйНалог;

					Если КомментироватьРасчет Тогда
						РаботаССообщениями.КомментарийРасчета("Исчислен ИПН за текущий период: " + ИсчисленныйНалог, КомментарийВидаРасчета); 
					КонецЕсли;
					
				КонецЕсли;

				Если ИсходныеДанные.ВычитатьИзБазыОПВ Тогда
					ИсчисленныйВзнос	= ?(ИсходныеДанные.ИсчисленныйВзнос = Null, 0, ИсходныеДанные.ИсчисленныйВзнос);
					РезультатБаза 		= РезультатБаза - ИсчисленныйВзнос;
					
					Если КомментироватьРасчет Тогда
						РаботаССообщениями.КомментарийРасчета("Исчислены ОПВ за текущий период: " + ИсходныеДанные.ИсчисленныйВзнос, КомментарийВидаРасчета); 
					КонецЕсли;
					
				КонецЕсли;

				УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
				ПределПоДокументуОснованию  = ?(ИсходныеДанные.ПределПоДокументуОснованию = Null, 0 ,ИсходныеДанные.ПределПоДокументуОснованию);
				УжеНачисленоЗаВсюИсторию 	= ?(ИсходныеДанные.УжеНачисленоЗаВсюИсторию = Null, 0, ИсходныеДанные.УжеНачисленоЗаВсюИсторию);
				
				Результат = Макс((РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100) - УжеНачисленоВТекущемПериоде, 0);
				// Ограничим результат расчета в случае достижения предела удержания
				Результат = Мин(Результат, ПределПоДокументуОснованию  - УжеНачисленоЗаВсюИсторию);
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Процент удержания: ", КомментарийВидаРасчета, СтрокаДвижений[ПоказательРазмер], СтрокаДвижений.ДокументОснование);
					Если УжеНачисленоВТекущемПериоде <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Ранее удержано в текущем периоде: " + УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
					КонецЕсли;
					Если УжеНачисленоЗаВсюИсторию <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Ранее удержано с момента действия исп. листа: " + УжеНачисленоЗаВсюИсторию, КомментарийВидаРасчета);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("Удержание производится до выплаты: ", КомментарийВидаРасчета, ПределПоДокументуОснованию, СтрокаДвижений.ДокументОснование);
				КонецЕсли;
				
			КонецЕсли;
			
			
		// ИсполнительныйЛистФиксСуммойДоПредела
		//		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда
			
			ПределПоДокументуОснованию  = ?(ИсходныеДанные.ПределПоДокументуОснованию = Null, 0 ,ИсходныеДанные.ПределПоДокументуОснованию);
			УжеНачисленоЗаВсюИсторию 	= ?(ИсходныеДанные.УжеНачисленоЗаВсюИсторию = Null, 0, ИсходныеДанные.УжеНачисленоЗаВсюИсторию);
			
			// Ограничим результат расчета в случае достижения предела удержания
			Результат = Мин(СтрокаДвижений[ПоказательРазмер], ПределПоДокументуОснованию  - УжеНачисленоЗаВсюИсторию);
			
			Если КомментироватьРасчет Тогда
				РаботаССообщениями.КомментарийРасчета("Сумма удержания: ", КомментарийВидаРасчета, СтрокаДвижений[ПоказательРазмер], СтрокаДвижений.ДокументОснование);
				Если УжеНачисленоЗаВсюИсторию <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Ранее удержано с момента действия исп. листа: " + УжеНачисленоЗаВсюИсторию, КомментарийВидаРасчета);
				КонецЕсли;
				РаботаССообщениями.КомментарийРасчета("Удержание производится до выплаты: ", КомментарийВидаРасчета, ПределПоДокументуОснованию, СтрокаДвижений.ДокументОснование);
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
			
			Если ИсходныеДанные.РазмерПочтовогоПеревода <> 0 Тогда
				Результат = Макс(ИсходныеДанные.ВеличинаСтавкиПочтовогоСбора / 100 * ИсходныеДанные.РазмерПочтовогоПеревода, ИсходныеДанные.МинСуммаПочтовогоСбора);
			КонецЕсли;
			
			Если КомментироватьРасчет Тогда
				РаботаССообщениями.КомментарийРасчета("Сумма удержания по исп. листу: " + ИсходныеДанные.РазмерПочтовогоПеревода, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Процент сбора: " + ИсходныеДанные.ВеличинаСтавкиПочтовогоСбора, КомментарийВидаРасчета);
				Если ИсходныеДанные.МинСуммаПочтовогоСбора <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Мин сумма сбора: " + ИсходныеДанные.МинСуммаПочтовогоСбора, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			
		// УдержаниеФиксированнойСуммой
		//		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой Тогда
			
			УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
			// Размер - сумма удержания 
			// за месяц должно удержаться ровно столько, сколько указано в документе
			Результат = СтрокаДвижений[ПоказательРазмер] - УжеНачисленоВТекущемПериоде;
			
			Если КомментироватьРасчет Тогда
				РаботаССообщениями.КомментарийРасчета("Сумма удержания по исп. листу: ", КомментарийВидаРасчета, СтрокаДвижений[ПоказательРазмер], СтрокаДвижений.ДокументОснование);
				Если УжеНачисленоВТекущемПериоде <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Ранее удержано в текущем периоде: " + УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			
		// ФиксированнойСуммой
		// ПоДоговоруФиксированнойСуммой
		//		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой
				  Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммойДляПочасовогоОтклонения
				  Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой Тогда
			// Размер - сумма доплаты
			Результат = СтрокаДвижений[ПоказательРазмер];

			Если КомментироватьРасчет Тогда
				Если РегламентированныеУдержания Тогда
					РаботаССообщениями.КомментарийРасчета("Сумма удержания: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				Иначе
					РаботаССообщениями.КомментарийРасчета("Сумма оплаты: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			// фиксируем отработанное время
			Если ОсновныеНачисленияОрганизаций Тогда
				Если (НЕ ИсходныеДанные.ЗачетОтработанногоВремени) И (ИсходныеДанные.УчетОтработанногоВремени) Тогда
					СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
					СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				Иначе
					СтрокаДвижений.УчитываемыеДни  = 0;
					СтрокаДвижений.УчитываемыеЧасы = 0;
				КонецЕсли;
			КонецЕсли;
			
			
		// НулеваяСумма
		//		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма
					Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения Тогда
			// Ничего не считаем, только фиксируем время при необходимости 
			Если ИсходныеДанные.УчетОтработанногоВремени Тогда
				Если Не ЭтоРасчетПочасовогоОтклонения(СпособРасчета) Тогда
					СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				Иначе
					СтрокаДвижений.УчитываемыеДни = 0;
				КонецЕсли;
				СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
			Иначе
				СтрокаДвижений.УчитываемыеДни 	= 0;
				СтрокаДвижений.УчитываемыеЧасы 	= 0;
			КонецЕсли;
			
			
		// ПоМесячнойТарифнойСтавкеПоДням
		// ПоМесячнойТарифнойСтавкеПоЧасам
		//
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням или 
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам или
			        СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням или 
			        СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам или
			        СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения или
					СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням Тогда
					
			НормаВремени = НормаВремениЗаМесяц(ИсходныеДанные, ИсходныеДанные.ВидУчетаВремени);
	        ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные);
			Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
			ИначеЕсли НормаВремени = 0 или ОтработаноВремениОсновное = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
			Иначе
				Результат = СтрокаДвижений[ПоказательРазмер] * ОтработаноВремениОсновное / НормаВремени;

				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Тарифная ставка: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Норма времени за месяц: " + НормаВремени, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Оплачиваемое время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Вид учета времени: " + СтрокаДвижений.ВидУчетаВремени, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
			
			// фиксируем отработанное время
			Если (НЕ ИсходныеДанные.ЗачетОтработанногоВремени) И (ИсходныеДанные.УчетОтработанногоВремени) Тогда
				Если Не ЭтоРасчетПочасовогоОтклонения(СпособРасчета) Тогда
					СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				Иначе	
					СтрокаДвижений.УчитываемыеДни  = 0;
				КонецЕсли;
				СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
			Иначе
				СтрокаДвижений.УчитываемыеДни  = 0;
				СтрокаДвижений.УчитываемыеЧасы = 0;
			КонецЕсли;

		// ПоМесячнойТарифнойСтавкеОтОбратногоПоДням
		// ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам Тогда

			НормаВремени = НормаВремениЗаМесяц(ИсходныеДанные, ИсходныеДанные.ВидУчетаВремени);
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные);
			Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
			ИначеЕсли НормаВремени = 0 или ОтработаноВремениОсновное = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
			Иначе
				Результат = РассчитатьЗаписьРегистраРасчетаОтОбратного(СтрокаДвижений, ИсходныеДанные, ТаблицаСтавокИПН, НачалоМесяца(СтрокаДвижений.ПериодРегистрации), КомментироватьРасчет, КомментарийВидаРасчета, СтруктураЦелевыхРазмеровДляРасчетовОтОбратного);
			КонецЕсли;

			// фиксируем отработанное время
			Если (НЕ ИсходныеДанные.ЗачетОтработанногоВремени) И (ИсходныеДанные.УчетОтработанногоВремени) Тогда
				СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
			Иначе
				СтрокаДвижений.УчитываемыеДни  = 0;
				СтрокаДвижений.УчитываемыеЧасы = 0;
			КонецЕсли;

		// ПоМесячнойТарифнойСтавкеОтОбратного
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратного Тогда

			Результат = РассчитатьЗаписьРегистраРасчетаОтОбратного(СтрокаДвижений, ИсходныеДанные, ТаблицаСтавокИПН, НачалоМесяца(СтрокаДвижений.ПериодРегистрации), КомментироватьРасчет, КомментарийВидаРасчета, СтруктураЦелевыхРазмеровДляРасчетовОтОбратного);

			Если ОсновныеНачисленияОрганизаций Тогда
				// фиксируем отработанное время
				Если (НЕ ИсходныеДанные.ЗачетОтработанногоВремени) И (ИсходныеДанные.УчетОтработанногоВремени) Тогда
					СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
					СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				Иначе
					СтрокаДвижений.УчитываемыеДни  = 0;
					СтрокаДвижений.УчитываемыеЧасы = 0;
				КонецЕсли;
			КонецЕсли;
		
		// ПоДоговоруОтОбратного
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруОтОбратного Тогда
		
			Результат = РассчитатьЗаписьРегистраРасчетаОтОбратного(СтрокаДвижений, ИсходныеДанные, ТаблицаСтавокИПН, НачалоМесяца(СтрокаДвижений.ПериодРегистрации), КомментироватьРасчет, КомментарийВидаРасчета, СтруктураЦелевыхРазмеровДляРасчетовОтОбратного);		
			
		// ПоЧасовойТарифнойСтавкеОтОбратного
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеОтОбратного Тогда
		
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные);
			Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
			ИначеЕсли ОтработаноВремениОсновное = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
			Иначе
				Результат = РассчитатьЗаписьРегистраРасчетаОтОбратного(СтрокаДвижений, ИсходныеДанные, ТаблицаСтавокИПН, НачалоМесяца(СтрокаДвижений.ПериодРегистрации), КомментироватьРасчет, КомментарийВидаРасчета, СтруктураЦелевыхРазмеровДляРасчетовОтОбратного);
			КонецЕсли;
			
			// фиксируем отработанное время
			Если (НЕ ИсходныеДанные.ЗачетОтработанногоВремени) И (ИсходныеДанные.УчетОтработанногоВремени) Тогда
				СтрокаДвижений.УчитываемыеДни  = 0;
				СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
			Иначе
				СтрокаДвижений.УчитываемыеДни  = 0;
			    СтрокаДвижений.УчитываемыеЧасы = 0;
			КонецЕсли;
			
		// ПоЧасовойТарифнойСтавке
		// ПоДневнойТарифнойСтавке
		//
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке или
			        СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке или
			        СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке или
					СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовой или
					СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифДневной или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения Тогда
			
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные);
			Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
			ИначеЕсли ОтработаноВремениОсновное = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
			Иначе
				Результат = СтрокаДвижений[ПоказательРазмер] * ОтработаноВремениОсновное;
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Тарифная ставка: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Оплачиваемое время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Вид учета времени: " + СтрокаДвижений.ВидУчетаВремени, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
			
			// фиксируем отработанное время
			Если (НЕ ИсходныеДанные.ЗачетОтработанногоВремени) И (ИсходныеДанные.УчетОтработанногоВремени) Тогда
				Если Не ЭтоРасчетПочасовогоОтклонения(СпособРасчета) Тогда
					СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				Иначе
					СтрокаДвижений.УчитываемыеДни  = 0;
				КонецЕсли;
				СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
			Иначе
				СтрокаДвижений.УчитываемыеДни  = 0;
			    СтрокаДвижений.УчитываемыеЧасы = 0;
			КонецЕсли;
			
		// ВыходноеПособие	и  СохраняемыйЗаработокНаВремяТрудоустройства
		ИначеЕсли ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ВыходноеПособие Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда 
				Если 
					ИсходныеДанные.СреднийЗаработок = Null
					ИЛИ ИсходныеДанные.СуммированныйУчетРабочегоВремени = Null
					ИЛИ (ИсходныеДанные.СуммированныйУчетРабочегоВремени и (ИсходныеДанные.ОтработаноЧасов = 0 ИЛИ ИсходныеДанные.ОтработаноЧасов = Null))
					ИЛИ (Не ИсходныеДанные.СуммированныйУчетРабочегоВремени и (ИсходныеДанные.ОтработаноДней = 0 ИЛИ ИсходныеДанные.ОтработаноДней = Null)) Тогда
					РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка ");
					СтрокаДвижений.Результат = 0;
					Возврат;
				КонецЕсли;	
			КонецЕсли;	
			
			ПроцентОплаты = 100;
			ОплачиваемоеВремя = СтрокаДвижений[ПоказательРазмер];
			КоэффициентИндексации = СтрокаДвижений.КоэффициентИндексации;
			
			// Расчитаем заработок за день (или за час для суммированного учета времени)
			Если ИсходныеДанные.СуммированныйУчетРабочегоВремени Тогда
				ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноЧасов, 2);
			Иначе
				ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноДней, 2);
			КонецЕсли;	
			
			Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты/100 * КоэффициентИндексации;
			
			Если КомментироватьРасчет Тогда
				РаботаССообщениями.КомментарийРасчета("Оплачиваемое время: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Коэффициент индексации: " + КоэффициентИндексации, КомментарийВидаРасчета);
				Если ИсходныеДанные.СуммированныйУчетРабочегоВремени Тогда
					РаботаССообщениями.КомментарийРасчета("Среднечасовой заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				Иначе
					РаботаССообщениями.КомментарийРасчета("Среднедневной заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
		// ОплатаПоСреднему
		//
		ИначеЕсли СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднему ИЛИ 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку ИЛИ 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда 
				Если ИсходныеДанные.СреднийЗаработок = Null 
					ИЛИ ((СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам) и (ИсходныеДанные.ОтработаноЧасов = 0 ИЛИ ИсходныеДанные.ОтработаноЧасов = Null))
					ИЛИ ((СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням) и (ИсходныеДанные.ОтработаноДней = 0 ИЛИ ИсходныеДанные.ОтработаноДней = Null)) Тогда
					РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка ");
					СтрокаДвижений.Результат = 0;
					Возврат;
				КонецЕсли;	
			КонецЕсли;	
			
			Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
			КонецЕсли;
			
			ПроцентОплаты = ?(СтрокаДвижений[ПоказательРазмер] = 0, 100, СтрокаДвижений[ПоказательРазмер]);
			ОплачиваемоеВремя = ОплачиваемоеВремя(ИсходныеДанные);
			КоэффициентИндексации = СтрокаДвижений.КоэффициентИндексации;
			
			// Расчитаем заработок за день (или за час для суммированного учета времени)
			// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
			Если НЕ СтрокаДвижений.Сторно Тогда
				
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноЧасов, 2);
				Иначе
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноДней, 2);
				КонецЕсли;	
				
				// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
				СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
				
			Иначе
				ЗаработокЗаЕдиницуВремени = Окр(СтрокаДвижений.ДополнительныеДанные, 2);
			КонецЕсли; 
			
			Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты/100 * КоэффициентИндексации;
			
			Если КомментироватьРасчет Тогда
				РаботаССообщениями.КомментарийРасчета("Процент оплаты: " + ПроцентОплаты, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Оплачиваемое время: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Коэффициент индексации: " + КоэффициентИндексации, КомментарийВидаРасчета);
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					РаботаССообщениями.КомментарийРасчета("Среднечасовой заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				Иначе
					РаботаССообщениями.КомментарийРасчета("Среднедневной заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				КонецЕсли;				
			КонецЕсли;
			
			// фиксируем отработанное время
			Если (ИсходныеДанные.УчетОтработанногоВремени) Тогда
				Если Не ЭтоРасчетПочасовогоОтклонения(СпособРасчета) Тогда
					СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				Иначе
					СтрокаДвижений.УчитываемыеДни  = 0;
				КонецЕсли;
				СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
			Иначе
			    СтрокаДвижений.УчитываемыеДни  = 0;
			    СтрокаДвижений.УчитываемыеЧасы = 0;
			КонецЕсли;
			
			
		// ДоплатаДоСреднегоЗаработка
		//
		//ИначеЕсли СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаДоСреднегоЗаработка ИЛИ 
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда 
				Если ИсходныеДанные.СреднийЗаработок = Null 
					ИЛИ ((СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам) и (ИсходныеДанные.ОтработаноЧасов = 0 ИЛИ ИсходныеДанные.ОтработаноЧасов = Null))
					ИЛИ ((СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням) и (ИсходныеДанные.ОтработаноДней = 0 ИЛИ ИсходныеДанные.ОтработаноДней = Null)) Тогда
					РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка ");
					СтрокаДвижений.Результат = 0;
					Возврат;
				КонецЕсли;	
			КонецЕсли;	
			
			Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
			КонецЕсли;
			
			ПроцентОплаты = ?(СтрокаДвижений[ПоказательРазмер] = 0, 100, СтрокаДвижений[ПоказательРазмер]);
			ОплачиваемоеВремя = ОплачиваемоеВремя(ИсходныеДанные);
			КоэффициентИндексации = СтрокаДвижений.КоэффициентИндексации;
			
			// Расчитаем заработок за день (или за час для суммированного учета времени)
			// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
			Если НЕ СтрокаДвижений.Сторно Тогда
				
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноЧасов, 2);
				Иначе
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноДней, 2);
				КонецЕсли;	
				
				// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
				СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
				
			Иначе
				ЗаработокЗаЕдиницуВремени = Окр(СтрокаДвижений.ДополнительныеДанные, 2);
			КонецЕсли; 
			
			СреднийЗаработок = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты/100 * КоэффициентИндексации;
			
			// Вычтем из среднего заработка начисленные суммы
			РезультатБаза = ?(ИсходныеДанные.РезультатБаза = Null, 0, ИсходныеДанные.РезультатБаза);
			Результат = Макс(СреднийЗаработок - РезультатБаза, 0);
			
			Если КомментироватьРасчет Тогда
				РаботаССообщениями.КомментарийРасчета("Процент оплаты: " + ПроцентОплаты, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Оплачиваемое время: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Коэффициент индексации: " + КоэффициентИндексации, КомментарийВидаРасчета);
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					РаботаССообщениями.КомментарийРасчета("Среднечасовой заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				Иначе
					РаботаССообщениями.КомментарийРасчета("Среднедневной заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				КонецЕсли;
				РаботаССообщениями.КомментарийРасчета("Оплата по среднему заработку: " + СреднийЗаработок, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Ранее начислено в текущем периоде: " + РезультатБаза, КомментарийВидаРасчета);				
			КонецЕсли;
			
			// фиксируем отработанное время
			Если (ИсходныеДанные.УчетОтработанногоВремени) Тогда
				СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
			Иначе
				СтрокаДвижений.УчитываемыеДни  = 0;
				СтрокаДвижений.УчитываемыеЧасы = 0;
			КонецЕсли;
			
			
		// ПоСреднемуЗаработкуДляБольничных
		//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда
				Если ИсходныеДанные.СреднийЗаработок = Null 
					ИЛИ ((СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам) и (ИсходныеДанные.ОтработаноЧасов = 0 ИЛИ ИсходныеДанные.ОтработаноЧасов = Null))
					ИЛИ ((СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням) и (ИсходныеДанные.ОтработаноДней = 0 ИЛИ ИсходныеДанные.ОтработаноДней = Null)) Тогда
					РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка ");
					СтрокаДвижений.Результат = 0;
					Возврат;
				КонецЕсли;	
			КонецЕсли;	
			
			Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
			КонецЕсли;
			
			ПроцентОплаты = СтрокаДвижений[ПоказательРазмер];
			ОплачиваемоеВремя = ОплачиваемоеВремя(ИсходныеДанные);
			КоэффициентИндексации = СтрокаДвижений.КоэффициентИндексации;
			
			// Расчитаем заработок за день (или за час для суммированного учета времени)
			// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
			Если НЕ СтрокаДвижений.Сторно Тогда
				
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноЧасов, 2);
				Иначе
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноДней, 2);
				КонецЕсли;	
				
				// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
				СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
				
			Иначе
				ЗаработокЗаЕдиницуВремени = Окр(СтрокаДвижений.ДополнительныеДанные, 2);
			КонецЕсли;
			
			Если КомментироватьРасчет Тогда
				РаботаССообщениями.КомментарийРасчета("Процент оплаты: " + ПроцентОплаты, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Оплачиваемое время: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Коэффициент индексации: " + КоэффициентИндексации, КомментарийВидаРасчета);
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					РаботаССообщениями.КомментарийРасчета("Среднечасовой заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				Иначе
					РаботаССообщениями.КомментарийРасчета("Среднедневной заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ИсходныеДанные.ПроверятьОграничениеПособия Тогда
				Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100 * КоэффициентИндексации;
			Иначе
				РазмерКомпенсации = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100 * КоэффициентИндексации;
				Результат = Мин(РазмерКомпенсации, ИсходныеДанные.РазмерОграничения);
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Оплата по среднему заработку: " + РазмерКомпенсации, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Размер ограничения пособия: " + ИсходныеДанные.РазмерОграниченияБЛЗаМесяц, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Ранее начислено пособия за текущий месяц: " + ИсходныеДанные.УжеНачисленоВТекущемПериодеБЛ, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
			
			// фиксируем отработанное время
			Если (ИсходныеДанные.УчетОтработанногоВремени) Тогда
				СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
			Иначе
				СтрокаДвижений.УчитываемыеДни  = 0;
				СтрокаДвижений.УчитываемыеЧасы = 0;
			КонецЕсли;
			
		// Компенсация отпуска и Удержание за неотработанный отпуск	
		ИначеЕсли ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпуска ИЛИ 
			ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения ИЛИ 
			ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпуск Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда
				Если ИсходныеДанные.СреднийЗаработок = Null 
					ИЛИ ИсходныеДанные.СуммированныйУчетРабочегоВремени = Null
					ИЛИ (ИсходныеДанные.СуммированныйУчетРабочегоВремени и (ИсходныеДанные.ОтработаноЧасов = 0 ИЛИ ИсходныеДанные.ОтработаноЧасов = Null))
					ИЛИ (Не ИсходныеДанные.СуммированныйУчетРабочегоВремени и (ИсходныеДанные.ОтработаноДней = 0 ИЛИ ИсходныеДанные.ОтработаноДней = Null)) Тогда
					РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка ");
					СтрокаДвижений.Результат = 0;
					Возврат;
				КонецЕсли;		
			КонецЕсли; 
			
			ОплачиваемоеВремя = 0;
			ОтработаноДней = ИсходныеДанные.ОтработаноДней;
			ОтработаноЧасов = ИсходныеДанные.Отработаночасов;
			КоэффициентИндексации = СтрокаДвижений.КоэффициентИндексации;
			ОплачиваемыйВидВремени = "";
			ВидСреднегоЗаработка = "";

			Если СтрокаДвижений.ДатаНачалаСобытия < ПолучитьДатуНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням() Тогда
				// до расчета по единым правилам, утвержденным Постановлением Правительства РК № 1394 от 29.12.2007
				ОплачиваемыйВидВремени = "дни";
				ВидСреднегоЗаработка = "Среднедневной";
				ОплачиваемоеВремя = СтрокаДвижений.Показатель1; // количество календарных дней
				
				// Определим количество фактически отработанных календарных дней 		
				Если ИсходныеДанные.СуммированныйУчетРабочегоВремени Тогда
					// Определим коэффициент фактического использования рабочего времени как отношение
					// фактически отработанных часов в расчетном периоде к норме рабочего времени
					КалендарныхДней = ?(ИсходныеДанные.КалендарныхДней = NULL, 0, ИсходныеДанные.КалендарныхДней);
					КоэффициентИспользованияРабочегоВремени = ?(ЗначениеЗаполнено(ИсходныеДанные.НормаЧасов), Окр(ИсходныеДанные.ОтработаноЧасов / ИсходныеДанные.НормаЧасов, 4), 0);
					КоэффициентИспользованияРабочегоВремени = Мин(КоэффициентИспользованияРабочегоВремени, 1);
					ОтработаноДней = Окр(КалендарныхДней * КоэффициентИспользованияРабочегоВремени, 2);
				КонецЕсли; 
				
				ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ОтработаноДней, 2);
				
			Иначе
				ОплачиваемоеВремя = СтрокаДвижений.Показатель2; // количество рабочих дней (часов)
				
				Если ИсходныеДанные.СуммированныйУчетРабочегоВремени Тогда
					// от часов
					ОплачиваемыйВидВремени = "часы";
					ВидСреднегоЗаработка = "Среднечасовой";
					
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ОтработаноЧасов, 2);
				Иначе
					// от дней
					ОплачиваемыйВидВремени = "дни";
					ВидСреднегоЗаработка = "Среднедневной";
					
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ОтработаноДней, 2);
				КонецЕсли;
			КонецЕсли;
			
			Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * КоэффициентИндексации;
			
			Если КомментироватьРасчет Тогда
				РаботаССообщениями.КомментарийРасчета("Оплачиваемые " + ОплачиваемыйВидВремени + ": " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Коэффициент индексации: " + КоэффициентИндексации, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета(ВидСреднегоЗаработка + " заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
			КонецЕсли;
			
		// ОплатаПоСреднемуОтпКалендарныеДни 
		ИначеЕсли СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтп ИЛИ 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда
				Если ИсходныеДанные.СреднийЗаработок = NULL 
					ИЛИ ((СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам) и (ИсходныеДанные.ОтработаноЧасов = 0 ИЛИ ИсходныеДанные.ОтработаноЧасов = Null))
					ИЛИ ((СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням) и (ИсходныеДанные.ОтработаноДней = 0 ИЛИ ИсходныеДанные.ОтработаноДней = Null)) Тогда
					РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка ");
					СтрокаДвижений.Результат = 0;
					Возврат;
				КонецЕсли;		
			КонецЕсли; 
			
			ДатаНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням = ПолучитьДатуНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням();
			ОплачиваемыйВидВремени = "";
			ВидСреднегоЗаработка = "";
			ОплачиваемоеВремя = 0;
			ОплачиваемыеДни = 0;
			ОплачиваемыеЧасы = 0;
			
			ПроцентОплаты = ?(СтрокаДвижений[ПоказательРазмер] = 0, 100, СтрокаДвижений[ПоказательРазмер]);
			
			Если СтрокаДвижений.ДатаНачалаСобытия < ДатаНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.ПроизводственныйКалендарьКалендарныеДниФактическийПериодДействия = Null, 0, ИсходныеДанные.ПроизводственныйКалендарьКалендарныеДниФактическийПериодДействия);
				ОплачиваемыйВидВремени = "календарные дни";
				ОплачиваемыйВидВремени = "Среднедневной";
				ОплачиваемыеДни = ОплачиваемоеВремя;
			Иначе
				
				Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
					РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
				КонецЕсли;
				
				ОплачиваемыеДни = ОплачиваемыеДни(Ложь, ИсходныеДанные);
				ОплачиваемыеЧасы = ОплачиваемыеЧасы(Ложь, ИсходныеДанные);
				
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням Тогда
					ОплачиваемоеВремя = ОплачиваемыеДни;
					ОплачиваемыйВидВремени = "рабочие дни";
					ВидСреднегоЗаработка = "Среднедневной";
				Иначе
					ОплачиваемоеВремя = ОплачиваемыеЧасы;
					ОплачиваемыйВидВремени = "рабочие часы";
					ВидСреднегоЗаработка = "Среднечасовой";
				КонецЕсли;
			КонецЕсли;
			
			ОтработаноДней = ИсходныеДанные.ОтработаноДней;
			ОтработаноЧасов = ИсходныеДанные.ОтработаноЧасов;
			ОтработанноеВремя = 0;
			КоэффициентИндексации = СтрокаДвижений.КоэффициентИндексации;
			
			Если СтрокаДвижений.ДатаНачалаСобытия < ДатаНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням Тогда
				
				// расчет до инструкции № 1394 от 29.12.2007 - по календарным дням
				ОтработанноеВремя = ОтработаноДней;
			
				// Определим количество фактически отработанных календарных дней 
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					// Определим коэффициент фактического использования рабочего времени как отношение
					// фактически отработанных часов в расчетном периоде к норме рабочего времени
					КалендарныхДней = ?(ИсходныеДанные.КалендарныхДней = NULL, 0, ИсходныеДанные.КалендарныхДней);
					КоэффициентИспользованияРабочегоВремени = ?(ЗначениеЗаполнено(ИсходныеДанные.НормаЧасов), Окр(ИсходныеДанные.ОтработаноЧасов / ИсходныеДанные.НормаЧасов, 4), 0);
					КоэффициентИспользованияРабочегоВремени = Мин(КоэффициентИспользованияРабочегоВремени, 1);
					ОтработанноеВремя = Окр(КалендарныхДней * КоэффициентИспользованияРабочегоВремени, 2);
				КонецЕсли; 
				
			Иначе
			
				// расчет по инструкции № 1394 от 29.12.2007 - по рабочим дням (часам)
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням Тогда
					ОтработанноеВремя = ОтработаноДней;
				Иначе
					ОтработанноеВремя = ОтработаноЧасов;
				КонецЕсли;
			
			КонецЕсли;
				
			
			// Расчитаем заработок за день для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" 
			// записи начислений
			Если НЕ СтрокаДвижений.Сторно Тогда
				
				ЗаработокЗаЕдиницуВремени = ?(ОтработанноеВремя <> 0, Окр(ИсходныеДанные.СреднийЗаработок / ОтработанноеВремя, 2), 0);
				
				// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
				СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
				
			Иначе
				ЗаработокЗаЕдиницуВремени = Окр(СтрокаДвижений.ДополнительныеДанные, 2);
			КонецЕсли; 

			Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100 * КоэффициентИндексации;
			
			Если КомментироватьРасчет Тогда
				РаботаССообщениями.КомментарийРасчета("Процент оплаты: " + ПроцентОплаты, КомментарийВидаРасчета);			
				РаботаССообщениями.КомментарийРасчета("Оплачиваемые " + ОплачиваемыйВидВремени + ": " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Коэффициент индексации: " + КоэффициентИндексации, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета(ВидСреднегоЗаработка + " заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
			КонецЕсли;
			
			// фиксируем отработанное время
			Если (ИсходныеДанные.УчетОтработанногоВремени) Тогда
				СтрокаДвижений.КалендарныхДней	= ?(ИсходныеДанные.ПроизводственныйКалендарьКалендарныеДниФактическийПериодДействия = Null, 0, ИсходныеДанные.ПроизводственныйКалендарьКалендарныеДниФактическийПериодДействия) * ?(СтрокаДвижений.Сторно, -1, 1);
				СтрокаДвижений.УчитываемыеДни  	= ОплачиваемыеДни * ?(СтрокаДвижений.Сторно, -1, 1);
				СтрокаДвижений.УчитываемыеЧасы  = ОплачиваемыеЧасы * ?(СтрокаДвижений.Сторно, -1, 1);
			Иначе
				СтрокаДвижений.КалендарныхДней	= 0;
				СтрокаДвижений.УчитываемыеДни  	= 0;
				СтрокаДвижений.УчитываемыеЧасы  = 0;
			КонецЕсли;
			
			
		// СдельныйЗаработок
		//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
			
			Если ИсходныеДанные.РазмерСдельногоЗаработка = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": нет данных о фактической выработке");
			Иначе	
				Результат = ИсходныеДанные.РазмерСдельногоЗаработка;
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Размер сдельного заработка: " + ИсходныеДанные.РазмерСдельногоЗаработка, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли; 

			// фиксируем отработанное время
			Если РегламентированныеНачисления Тогда
				Если (ИсходныеДанные.УчетОтработанногоВремени) Тогда
					СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
					СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				Иначе
					СтрокаДвижений.УчитываемыеДни  = 0;
					СтрокаДвижений.УчитываемыеЧасы = 0;
				КонецЕсли;
			КонецЕсли;

	    // начисление от стажа процентом
	    ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом Тогда
			
			Если ИсходныеДанные.РезультатБаза = NULL Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисления ");
			Иначе
				Результат = ИсходныеДанные.РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100;
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Базовые начисления составили всего: " + ИсходныеДанные.РезультатБаза, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Процент оплаты: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1 Тогда
			
			Если Показатель1 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель1Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;			
			Если РезультатПолучен Тогда
				Результат = Показатель1;

				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель1Наименование + """ равен " + Показатель1, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2 Тогда
			
			Если Показатель1 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель1Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;			
			Если Показатель2 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель2Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;			
			Если РезультатПолучен Тогда
				Результат = Показатель1 * Показатель2;

				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель1Наименование + """ равен " + Показатель1, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель2Наименование + """ равен " + Показатель2, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2УП3 Тогда
			
			Если Показатель1 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель1Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;			
			Если Показатель2 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель2Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;			
			Если Показатель3 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель3Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;			
			Если РезультатПолучен Тогда
				Результат = Показатель1 * Показатель2  * Показатель3;
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель1Наименование + """ равен " + Показатель1, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель2Наименование + """ равен " + Показатель2, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель3Наименование + """ равен " + Показатель3, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2ДП3 Тогда
			
			Если Показатель1 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель1Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;			
			Если Показатель2 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель2Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;			
			Если Показатель3 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель3Наименование + """");
				РезультатПолучен = Ложь;
			ИначеЕсли Показатель3 = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Показатель """ + ИсходныеДанные.Показатель3Наименование + """ не должен быть равен нулю!");
				РезультатПолучен = Ложь;
			КонецЕсли;			
			Если РезультатПолучен Тогда
				Результат = Показатель1 * Показатель2  / Показатель3;
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель1Наименование + """ равен " + Показатель1, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель2Наименование + """ равен " + Показатель2, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель3Наименование + """ равен " + Показатель3, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ДП2УП3 Тогда
			
			Если Показатель1 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель1Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;			
			Если Показатель2 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель2Наименование + """");
				РезультатПолучен = Ложь;
			ИначеЕсли Показатель2 = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Показатель """ + ИсходныеДанные.Показатель2Наименование + """ не должен быть равен нулю!");
				РезультатПолучен = Ложь;
			КонецЕсли;			
			Если Показатель3 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель3Наименование + """");
				РезультатПолучен = Ложь;
			ИначеЕсли Показатель3 = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Показатель """ + ИсходныеДанные.Показатель3Наименование + """ не должен быть равен нулю!");
				РезультатПолучен = Ложь;
			КонецЕсли;			
			Если РезультатПолучен Тогда
				Результат = Показатель1 / (Показатель2  * Показатель3);

				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель1Наименование + """ равен " + Показатель1, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель2Наименование + """ равен " + Показатель2, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель3Наименование + """ равен " + Показатель3, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ОП2 Тогда
			
			Если Показатель2 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не выполнена оценка по шкале ""%%""",  ИсходныеДанные.Показатель2Наименование, ИсходныеДанные.ПоказательМотивации2);
				РезультатПолучен = Ложь;
			КонецЕсли;			
			Если РезультатПолучен Тогда
				Результат = Показатель2 ;
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель1Наименование + """ равен " + Показатель1, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель2Наименование + """ равен ", КомментарийВидаРасчета, Показатель2, ИсходныеДанные.ПоказательМотивации2);
				КонецЕсли;
				
			КонецЕсли;
	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ОП2УП3 Тогда
			
			Если Показатель2 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не выполнена оценка по шкале ""%%""", ИсходныеДанные.Показатель2Наименование, ИсходныеДанные.ПоказательМотивации2);
				РезультатПолучен = Ложь;
			КонецЕсли;			
			Если Показатель3 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель3Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;			
			Если РезультатПолучен Тогда
				Результат = Показатель2  * Показатель3;

				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель1Наименование + """ равен " + Показатель1, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель2Наименование + """ равен ", КомментарийВидаРасчета, Показатель2, ИсходныеДанные.ПоказательМотивации2);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель3Наименование + """ равен " + Показатель3, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ОП2ДП3 Тогда
			
			Если Показатель2 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не выполнена оценка по шкале ""%%""", ИсходныеДанные.Показатель2Наименование, ИсходныеДанные.ПоказательМотивации2);
				РезультатПолучен = Ложь;
			КонецЕсли;			
			Если Показатель3 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель3Наименование + """");
				РезультатПолучен = Ложь;
			ИначеЕсли Показатель3 = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Показатель """ + ИсходныеДанные.Показатель3Наименование + """ не должен быть равен нулю!");
				РезультатПолучен = Ложь;
			КонецЕсли;			
			Если РезультатПолучен Тогда
				Результат = Показатель2  / Показатель3;

				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель1Наименование + """ равен " + Показатель1, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель2Наименование + """ равен ", КомментарийВидаРасчета, Показатель2, ИсходныеДанные.ПоказательМотивации2);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель3Наименование + """ равен " + Показатель3, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П3ДП1ОП2 Тогда
			
			Если Показатель2 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не выполнена оценка по шкале ""%%""", ИсходныеДанные.Показатель2Наименование, ИсходныеДанные.ПоказательМотивации2);
				РезультатПолучен = Ложь;
			ИначеЕсли Показатель2 = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Показатель ""%%"" не должен быть равен нулю!", ИсходныеДанные.Показатель2Наименование, ИсходныеДанные.ПоказательМотивации2);
				РезультатПолучен = Ложь;
			КонецЕсли;			
			Если Показатель3 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель3Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;			
			Если РезультатПолучен Тогда
				Результат = Показатель3 / Показатель2 ;
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель1Наименование + """ равен " + Показатель1, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель2Наименование + """ равен ", КомментарийВидаРасчета, Показатель2, ИсходныеДанные.ПоказательМотивации2);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель3Наименование + """ равен " + Показатель3, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2ОП3 или 
			      СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ДП2ОП3 Тогда
			      
			Если Показатель3 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не выполнена оценка по шкале ""%%""", ИсходныеДанные.Показатель3Наименование, ИсходныеДанные.ПоказательМотивации3);
				РезультатПолучен = Ложь;
			КонецЕсли;			
			Если РезультатПолучен Тогда
				Результат = Показатель3;
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель1Наименование + """ равен " + Показатель1, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель2Наименование + """ равен " + Показатель2, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель3Наименование + """ равен ", КомментарийВидаРасчета, Показатель3, ИсходныеДанные.ПоказательМотивации3);
				КонецЕсли;
				
			КонецЕсли;
	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2УП3ДП4 Тогда 
			
			Если Показатель1 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель1Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель2 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель2Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель3 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель3Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель4 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель4Наименование + """");
				РезультатПолучен = Ложь;
			ИначеЕсли Показатель4 = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Показатель """ + ИсходныеДанные.Показатель4Наименование + """ не должен быть равен нулю!");
				РезультатПолучен = Ложь;
			КонецЕсли;
			
			Если РезультатПолучен Тогда
				Результат = Показатель1 * Показатель2  * Показатель3 / Показатель4;

				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель1Наименование + """ равен " + Показатель1, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель2Наименование + """ равен " + Показатель2, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель3Наименование + """ равен " + Показатель3, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель4Наименование + """ равен " + Показатель4, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3 Тогда 
			
			Если Показатель1 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель1Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель2 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель2Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель3 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель3Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			
			Если РезультатПолучен Тогда
				Результат = Макс(Показатель1, Показатель2 * Показатель3);

				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель1Наименование + """ равен " + Показатель1, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель2Наименование + """ равен " + Показатель2, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель3Наименование + """ равен " + Показатель3, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МинП1_П2УП3 Тогда 
			
			Если Показатель1 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель1Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель2 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель2Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель3 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель3Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			
			Если РезультатПолучен Тогда
				Результат = Мин(Показатель1, Показатель2 * Показатель3);

				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель1Наименование + """ равен " + Показатель1, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель2Наименование + """ равен " + Показатель2, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель3Наименование + """ равен " + Показатель3, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3ОП4 Тогда
			
			Если Показатель4 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не выполнена оценка по шкале ""%%""", ИсходныеДанные.Показатель4Наименование, ИсходныеДанные.ПоказательМотивации4);
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель1 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель1Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель2 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель2Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если РезультатПолучен Тогда
				Результат = Макс(Показатель1, Показатель2  * Показатель4);
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель1Наименование + """ равен " + Показатель1, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель2Наименование + """ равен " + Показатель2, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель3Наименование + """ равен " + Показатель3, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель4Наименование + """ равен ", КомментарийВидаРасчета, Показатель4, ИсходныеДанные.ПоказательМотивации4);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МинП1_П2УП3ОП4 Тогда
			
			Если Показатель4 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не выполнена оценка по шкале ""%%""", ИсходныеДанные.Показатель4Наименование, ИсходныеДанные.ПоказательМотивации4);
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель1 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель1Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель2 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель2Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если РезультатПолучен Тогда
				Результат = Мин(Показатель1, Показатель2 * Показатель4);
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель1Наименование + """ равен " + Показатель1, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель2Наименование + """ равен " + Показатель2, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель3Наименование + """ равен " + Показатель3, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель4Наименование + """ равен ", КомментарийВидаРасчета, Показатель4, ИсходныеДанные.ПоказательМотивации4);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1ВП2_0 Тогда
			
			Если Показатель1 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель1Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель2 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель2Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			
			Если РезультатПолучен Тогда
				Результат = Макс(Показатель1 - Показатель2, 0);
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель1Наименование + """ равен " + Показатель1, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель2Наименование + """ равен " + Показатель2, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2_П5ДП3УП4 Тогда 
			
			Если Показатель1 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель1Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель2 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель2Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель3 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель3Наименование + """");
				РезультатПолучен = Ложь;
			ИначеЕсли Показатель3 = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Показатель """ + ИсходныеДанные.Показатель3Наименование + """"+ " не должен быть равен нулю!");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель4 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель4Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель5 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель5Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			
			Если РезультатПолучен Тогда
				Результат = Макс(Показатель1 * Показатель2,  Показатель5 / Показатель3 * Показатель4);
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель1Наименование + """ равен " + Показатель1, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель2Наименование + """ равен " + Показатель2, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель3Наименование + """ равен " + Показатель3, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель4Наименование + """ равен " + Показатель4, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель5Наименование + """ равен " + Показатель5, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2ДП3ВП4_0 Тогда 
			
			Если Показатель1 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель1Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель2 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель2Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель3 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель3Наименование + """");
				РезультатПолучен = Ложь;
			ИначеЕсли Показатель3 = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Показатель """ + ИсходныеДанные.Показатель3Наименование+ """" + " не должен быть равен нулю!");
				РезультатПолучен = Ложь;					
			КонецЕсли;
			Если Показатель4 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель4Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			
			Если РезультатПолучен Тогда
				Результат = Макс(Показатель1 * Показатель2 / Показатель3 - Показатель4, 0);

				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель1Наименование + """ равен " + Показатель1, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель2Наименование + """ равен " + Показатель2, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель3Наименование + """ равен " + Показатель3, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель4Наименование + """ равен " + Показатель4, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2_П3УП4ДП5 Тогда 
			
			Если Показатель1 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель1Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель2 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель2Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель3 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель3Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель4 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель4Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель5 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель5Наименование + """");
				РезультатПолучен = Ложь;
			ИначеЕсли Показатель5 = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Показатель """ + ИсходныеДанные.Показатель5Наименование+ """" + " не должен быть равен нулю!");
				РезультатПолучен = Ложь;
			КонецЕсли;
			
			Если РезультатПолучен Тогда
				Результат = Макс(Показатель1 * Показатель2, Показатель3 * Показатель4 / Показатель5);

				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель1Наименование + """ равен " + Показатель1, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель2Наименование + """ равен " + Показатель2, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель3Наименование + """ равен " + Показатель3, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель4Наименование + """ равен " + Показатель4, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель5Наименование + """ равен " + Показатель5, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3УП4ДП5 Тогда 
			
			Если Показатель1 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель1Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель2 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель2Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель3 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель3Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель4 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель4Наименование + """");
				РезультатПолучен = Ложь;
			КонецЕсли;
			Если Показатель5 = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные.Показатель5Наименование + """");
				РезультатПолучен = Ложь;
			ИначеЕсли Показатель5 = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Показатель """ + ИсходныеДанные.Показатель5Наименование+ """" + " не должен быть равен нулю!");
				РезультатПолучен = Ложь;
			КонецЕсли;
			
			Если РезультатПолучен Тогда
				Результат = Макс(Показатель1, Показатель2 * Показатель3) * Показатель4 / Показатель5;

				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель1Наименование + """ равен " + Показатель1, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель2Наименование + """ равен " + Показатель2, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель3Наименование + """ равен " + Показатель3, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель4Наименование + """ равен " + Показатель4, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Показатель для расчета """ + ИсходныеДанные.Показатель5Наименование + """ равен " + Показатель5, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
			
		// Не найден способ расчета
		Иначе
			РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.ФизлицоНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": вид расчета не предусмотрен");
		КонецЕсли;
		
		// фиксируем отработанное время
		Если ОсновныеНачисленияОрганизаций И СпособРасчетаОтПоказателей Тогда
			Если (НЕ ИсходныеДанные.ЗачетОтработанногоВремени) И (ИсходныеДанные.УчетОтработанногоВремени) Тогда
				СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
			Иначе
				СтрокаДвижений.УчитываемыеДни  = 0;
				СтрокаДвижений.УчитываемыеЧасы = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат <> 0 Тогда
			Результат = ОбщегоНазначения.ОкруглитьЧисло(Результат, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		КонецЕсли;
		
		СтрокаДвижений.Результат = Результат * ?(СтрокаДвижений.Сторно,-1,1);
		Если КомментироватьРасчет Тогда
			Если СтрокаДвижений.Сторно Тогда
				РаботаССообщениями.КомментарийРасчета("Расчет сторно", КомментарийВидаРасчета, , , Перечисления.ВидыСообщений.ВажнаяИнформация);
			КонецЕсли;
			РаботаССообщениями.КомментарийРасчета("Результат расчета: " + СтрокаДвижений.Результат, КомментарийВидаРасчета);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры  // РассчитатьЗаписьРегистраРасчета

// Функция предназначена для получения структуры НеобходимыеДанные с элементами:
//			База
//			НормаВремени
//			ОтработаноВремени
// каждый из которых - булево и означает необходимость получения соотв. исходных данных для 
// расчета записей регистра расчета
// Параметр:
//	МассивСпособовРасчета - массив элементов типа СпособРасчетаСсылка или ПланВидовРасчетаСсылка
Функция ПолучитьСтруктуруНеобходимыхДанных(МассивСпособовРасчета, МассивПоказателей)
	
	НеобходимыеДанные = Новый Структура;
	НеобходимыеДанные.Вставить("База", Ложь);
	НеобходимыеДанные.Вставить("НормаВремени", Ложь);
	НеобходимыеДанные.Вставить("НормаВремениЗаМесяц", Ложь);
	НеобходимыеДанные.Вставить("ОтработаноВремени", Ложь);
	НеобходимыеДанные.Вставить("СдельныйЗаработок", Ложь);
	НеобходимыеДанные.Вставить("СреднийЗаработок", Ложь);
	НеобходимыеДанные.Вставить("ИсчисленныйИПН", Ложь);
	НеобходимыеДанные.Вставить("ИсчисленныйОПВ", Ложь);
	НеобходимыеДанные.Вставить("ПределПоДокументуОснованию", Ложь);
	НеобходимыеДанные.Вставить("НакопленныеДанныеПоДокументуОснованию", Ложь);
	НеобходимыеДанные.Вставить("ПочтовыеПереводы", Ложь);
	НеобходимыеДанные.Вставить("РазмерОграниченияПособия", Ложь);
	НеобходимыеДанные.Вставить("РазмерРегламентированныхРасчетныхПоказателей", Ложь);
	НеобходимыеДанные.Вставить("НакопленныеДанныеПоВидуРасчета", Ложь);
	НеобходимыеДанные.Вставить("РасчетОтОбратного", Ложь);
	НеобходимыеДанные.Вставить("ОтОбратногоКомпенсироватьИПН", Ложь);
	НеобходимыеДанные.Вставить("ОтОбратногоКомпенсироватьОПВ", Ложь); 
	НеобходимыеДанные.Вставить("ОтОбратногоУчитыватьОПВ", Ложь); 
	НеобходимыеДанные.Вставить("ОтОбратногоКомпенсироватьУдержания", Ложь);
	НеобходимыеДанные.Вставить("ПоказателиСхемМотивации", Ложь);
	НеобходимыеДанные.Вставить("П1ПоП2", Ложь);
	НеобходимыеДанные.Вставить("П1ДП2ПоП3", Ложь);
	НеобходимыеДанные.Вставить("П1УП2ПоП3", Ложь);
	НеобходимыеДанные.Вставить("МаксП1_П2УП3ОП4", Ложь);
	НеобходимыеДанные.Вставить("МинП1_П2УП3ОП4", Ложь);
	НеобходимыеДанные.Вставить("Стаж", Ложь);
	
	// данный Если... необходимо пополнять при появлении новых способ расчета или
	// видов расчета, которые не укладываются ни в один из способов
	Для Каждого СпособРасчета Из МассивСпособовРасчета Цикл
		Если 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам ИЛИ 
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням ИЛИ 
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратного ИЛИ 
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням ИЛИ 
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам ИЛИ 
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения ИЛИ
	            СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам ИЛИ 
	            СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням ИЛИ
			 	СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням Тогда
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.НормаВремениЗаМесяц = Истина;
			
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратного ИЛИ
				 СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням ИЛИ
				 СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам Тогда
				НеобходимыеДанные.РасчетОтОбратного = Истина;
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке ИЛИ
				  СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифДневной ИЛИ
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке ИЛИ
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеОтОбратного ИЛИ
				  СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовой или
	              СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке или
    	          СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке или
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы или
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения Тогда
			НеобходимыеДанные.ОтработаноВремени = Истина;
			
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеОтОбратного Тогда
				НеобходимыеДанные.РасчетОтОбратного = Истина;
			КонецЕсли;

			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
			НеобходимыеДанные.База = Истина;
			// исчисленные ИПН и ОПВ берем всегда, присоединяться будут только к запросу по регистру расчета УдержанияРаботниковОрганизаций
			// и только для тех людей, у которых есть виды расчета с признаками ВычитатьИзБазыИПН и/или ВычитатьИзБазыОПВ
			НеобходимыеДанные.ИсчисленныйИПН = Истина;
			НеобходимыеДанные.ИсчисленныйОПВ = Истина;
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.ИсчисленныйИПН = Истина;
			НеобходимыеДанные.ИсчисленныйОПВ = Истина;
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.ИсчисленныйИПН = Истина;
			НеобходимыеДанные.ИсчисленныйОПВ = Истина;
			НеобходимыеДанные.ПределПоДокументуОснованию = Истина;
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда
			НеобходимыеДанные.ПределПоДокументуОснованию = Истина;
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
		ИначеЕсли   СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднему ИЛИ 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных ИЛИ
			СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ ИЛИ 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку ИЛИ
			СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтп ИЛИ 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска ИЛИ
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения Тогда
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.СреднийЗаработок = Истина;
			Если СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтп ИЛИ 
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда 
				НеобходимыеДанные.НормаВремениЗаМесяц = Истина;
			КонецЕсли;
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных Тогда
				НеобходимыеДанные.РазмерОграниченияПособия = Истина;
			КонецЕсли;
		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.СреднийЗаработок = Истина;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой ИЛИ
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммойДляПочасовогоОтклонения или 
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой Тогда
			// ничего...
		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруОтОбратного Тогда
			НеобходимыеДанные.РасчетОтОбратного = Истина;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой Тогда
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
			НеобходимыеДанные.СдельныйЗаработок = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю или 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате или 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням или 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам Тогда
			НеобходимыеДанные.РазмерРегламентированныхРасчетныхПоказателей = Истина;
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням или
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам или 
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням или 
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам Тогда
				НеобходимыеДанные.ОтработаноВремени = Истина;
				НеобходимыеДанные.НормаВремениЗаМесяц = Истина;
			КонецЕсли;
			
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням или
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам Тогда
				НеобходимыеДанные.НакопленныеДанныеПоВидуРасчета = Истина;
			КонецЕсли;
		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ОП2 или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П3ДП1ОП2 или  
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ОП2ДП3 или  
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ОП2УП3 Тогда
			НеобходимыеДанные.П1ПоП2 = Истина;
			НеобходимыеДанные.ПоказателиСхемМотивации = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2ОП3 Тогда
			НеобходимыеДанные.П1УП2ПоП3 = Истина;
			НеобходимыеДанные.ПоказателиСхемМотивации = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ДП2ОП3 Тогда
			НеобходимыеДанные.П1ДП2ПоП3 = Истина;
			НеобходимыеДанные.ПоказателиСхемМотивации = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3ОП4 Тогда
			НеобходимыеДанные.МаксП1_П2УП3ОП4 = Истина;
			НеобходимыеДанные.ПоказателиСхемМотивации = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МинП1_П2УП3ОП4 Тогда
			НеобходимыеДанные.МинП1_П2УП3ОП4 = Истина;			
			НеобходимыеДанные.ПоказателиСхемМотивации = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3 или
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МинП1_П2УП3 или
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1 или
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ДП2УП3 или
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2 или
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2ДП3 или
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2УП3 или
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2УП3ДП4 или
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1ВП2_0 или
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2_П5ДП3УП4 или
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2ДП3ВП4_0 или
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2_П3УП4ДП5 или
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3УП4ДП5 Тогда
			НеобходимыеДанные.ПоказателиСхемМотивации = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
			НеобходимыеДанные.ПочтовыеПереводы = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения Тогда
			// для возможного учета времени простоя, прогула и т.д.
			НеобходимыеДанные.ОтработаноВремени = Истина;
        ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом Тогда
			НеобходимыеДанные.База = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Показатель Из МассивПоказателей Цикл
		НеобходимыеДанные.СдельныйЗаработок = НеобходимыеДанные.СдельныйЗаработок 
													Или Показатель = Справочники.ПоказателиСхемМотивации.СдельнаяВыработка;
													
		НеобходимыеДанные.ОтработаноВремени = НеобходимыеДанные.ОтработаноВремени 
													Или Показатель = Справочники.ПоказателиСхемМотивации.ВремяВДнях 
													Или Показатель = Справочники.ПоказателиСхемМотивации.ВремяВЧасах;
													
		НеобходимыеДанные.НормаВремениЗаМесяц = НеобходимыеДанные.НормаВремениЗаМесяц 
													Или Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВДнях 
													Или Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВЧасах;
													
		НеобходимыеДанные.База = НеобходимыеДанные.База 
									Или Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза;

		НеобходимыеДанные.Стаж = НеобходимыеДанные.Стаж 
									Или Показатель = Справочники.ПоказателиСхемМотивации.Стаж;
	КонецЦикла;
	
	Возврат НеобходимыеДанные;
КонецФункции

// Функция предназначена для получения оплачиваемого времени по результату запроса при расчете:
//
// Параметры:
//	ИсходныеДанные - строка выборки из результат запроса, по которой вернуть время
//
// Возвращаемое значение:
//	Число - размер оплачиваемого времени в днях/часах
//
Функция ОплачиваемоеВремя(ИсходныеДанные) Экспорт
	
	ОтработаноВремениОсновное = ?(ИсходныеДанные.ОтработаноВремениОсновное = NULL, 0, ИсходныеДанные.ОтработаноВремениОсновное);

	Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
		Возврат 0;
    ИначеЕсли ИсходныеДанные.ЕстьОтработаноДнейПоТабелю = 0 Тогда
    	Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням Тогда
        	Возврат ОтработаноВремениОсновное;
        Иначе
        	Возврат ОтработаноВремениОсновное - ?(ИсходныеДанные.ЕстьОтработаноЧасовПоТабелюОтклонение <> 0, ИсходныеДанные.ОтработаноЧасовПоТабелюОтклонение, 0);
        КонецЕсли;
    Иначе
        Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням Тогда
			Возврат ИсходныеДанные.ОтработаноДнейПоТабелю;
			//Если ИсходныеДанные.ОтработаноДнейПоТабелю = 0 Тогда
			//	Возврат ОтработаноВремениОсновное;
			//Иначе
			//	Возврат ИсходныеДанные.ОтработаноДнейПоТабелю;
			//КонецЕсли;
        Иначе
        	Возврат ИсходныеДанные.ОтработаноЧасовПоТабелю;
			//Если ИсходныеДанные.ОтработаноЧасовПоТабелю = 0 Тогда
			//	Возврат ОтработаноВремениОсновное - ИсходныеДанные.ОтработаноЧасовПоТабелюОтклонение;
			//Иначе
			//	Возврат ИсходныеДанные.ОтработаноЧасовПоТабелю;
			//КонецЕсли;
        КонецЕсли;
    КонецЕсли;
КонецФункции // ОплачиваемоеВремя()

// Функция предназначена для получения оплачиваемых часов по результату запроса при расчете:
//
// Параметры:
//	ИсходныеДанные - строка выборки из результат запроса, по которой вернуть часы
//
// Возвращаемое значение:
//	Число - размер оплачиваемого времени в часах
//
Функция ОплачиваемыеЧасы(УправленческиеНачисления, ИсходныеДанные) Экспорт

	Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням Тогда
		ОтработаноЧасовПоГрафику = ?(ИсходныеДанные.ОтработаноВремениДополнительное = NULL, 0, ИсходныеДанные.ОтработаноВремениДополнительное);    	
	Иначе
		ОтработаноЧасовПоГрафику = ?(ИсходныеДанные.ОтработаноВремениОсновное = NULL, 0, ИсходныеДанные.ОтработаноВремениОсновное);    	
	КонецЕсли;
	
    Если УправленческиеНачисления Тогда
       	Возврат ОтработаноЧасовПоГрафику;    	
	ИначеЕсли ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
		Возврат 0;
    ИначеЕсли ИсходныеДанные.ЕстьОтработаноЧасовПоТабелю = 0 Тогда
    	Возврат ОтработаноЧасовПоГрафику - ?(ИсходныеДанные.ЕстьОтработаноЧасовПоТабелюОтклонение <> 0, ИсходныеДанные.ОтработаноЧасовПоТабелюОтклонение, 0);
    Иначе
		//Если ИсходныеДанные.ОтработаноЧасовПоТабелю = 0 Тогда
		//	Возврат ОтработаноЧасовПоГрафику - ИсходныеДанные.ОтработаноЧасовПоТабелюОтклонение;
		//Иначе
			Возврат ИсходныеДанные.ОтработаноЧасовПоТабелю;
		//КонецЕсли;
    КонецЕсли;
КонецФункции // ОплачиваемыеЧасы()

// Функция предназначена для получения оплачиваемых дней по результату запроса при расчете:
//
// Параметры:
//	ИсходныеДанные - строка выборки из результат запроса, по которой вернуть дни
//
// Возвращаемое значение:
//	Число - размер оплачиваемого времени в днях
//
Функция ОплачиваемыеДни(УправленческиеНачисления, ИсходныеДанные) Экспорт

	Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням Тогда
		ОтработаноДнейПоГрафику = ?(ИсходныеДанные.ОтработаноВремениОсновное = NULL, 0, ИсходныеДанные.ОтработаноВремениОсновное);    	
	Иначе
		ОтработаноДнейПоГрафику = ?(ИсходныеДанные.ОтработаноВремениДополнительное = NULL, 0, ИсходныеДанные.ОтработаноВремениДополнительное);    	
	КонецЕсли;
	
    Если УправленческиеНачисления Или ИсходныеДанные.ЕстьОтработаноДнейПоТабелю = 0 Тогда
       	Возврат ОтработаноДнейПоГрафику;    	
	ИначеЕсли ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
		Возврат 0;
    Иначе
		//Если ИсходныеДанные.ОтработаноДнейПоТабелю = 0 Тогда
		//	Возврат ОтработаноДнейПоГрафику;
		//Иначе
			Возврат ИсходныеДанные.ОтработаноДнейПоТабелю;
		//КонецЕсли;
    КонецЕсли;
КонецФункции // ОплачиваемыеДни()

// Функция предназначена для получения нормы оплачиваемых часов по результату запроса при расчете:
//
// Параметры:
//	ИсходныеДанные - строка выборки из результата запроса, по которой вернуть часы
//
// Возвращаемое значение:
//	Число - размер оплачиваемого времени в часах
//
Функция НормаОплачиваемыхЧасов(ИсходныеДанные) Экспорт

	Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням Тогда
		НормаЧасовПоГрафику = ?(ИсходныеДанные.ДополнительноеЗначениеНормаФактическийПериодДействия = NULL, 0, ИсходныеДанные.ДополнительноеЗначениеНормаФактическийПериодДействия);    	
	Иначе
		НормаЧасовПоГрафику = ?(ИсходныеДанные.ОсновноеЗначениеНормаФактическийПериодДействия = NULL, 0, ИсходныеДанные.ОсновноеЗначениеНормаФактическийПериодДействия);    	
	КонецЕсли;
	
    Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
		Возврат 0;
	ИначеЕсли ИсходныеДанные.НормаЧасовПоТабелюПоСтрокеРасчета = NULL Тогда
       	Возврат НормаЧасовПоГрафику;    	
    Иначе
		Если ИсходныеДанные.НормаЧасовПоТабелюПоСтрокеРасчета = 0 Тогда
			Возврат НормаЧасовПоГрафику - ИсходныеДанные.НормаЧасовПоТабелюПоСтрокеРасчетаОтклонение;
		Иначе
			Возврат ИсходныеДанные.НормаЧасовПоТабелюПоСтрокеРасчета;
		КонецЕсли;
    КонецЕсли;
КонецФункции // НормаОплачиваемыхЧасов()

// Функция предназначена для получения нормы оплачиваемых дней по результату запроса при расчете:
//
// Параметры:
//	ИсходныеДанные - строка выборки из результат запроса, по которой вернуть дни
//
// Возвращаемое значение:
//	Число - размер оплачиваемого времени в днях
//
Функция НормаОплачиваемыхДней(ИсходныеДанные) Экспорт

	Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням Тогда
		НормаДнейПоГрафику = ?(ИсходныеДанные.ОсновноеЗначениеНормаФактическийПериодДействия = NULL, 0, ИсходныеДанные.ОсновноеЗначениеНормаФактическийПериодДействия);    	
	Иначе
		НормаДнейПоГрафику = ?(ИсходныеДанные.ДополнительноеЗначениеНормаФактическийПериодДействия = NULL, 0, ИсходныеДанные.ДополнительноеЗначениеНормаФактическийПериодДействия);    	
	КонецЕсли;
	     	
	Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
		Возврат 0;
	ИначеЕсли ИсходныеДанные.НормаДнейПоТабелюПоСтрокеРасчета = NULL Тогда
       	Возврат НормаДнейПоГрафику;    	
    Иначе
		Если ИсходныеДанные.НормаДнейПоТабелюПоСтрокеРасчета = 0 Тогда
			Возврат НормаДнейПоГрафику;
		Иначе
			Возврат ИсходныеДанные.НормаДнейПоТабелюПоСтрокеРасчета;
		КонецЕсли;
    КонецЕсли;
КонецФункции // НормаОплачиваемыхДней()

// Функция предназначена для получения нормы дней по результату запроса при расчете:
//
// Параметры:
//	ИсходныеДанные - строка выборки из результата запроса, по которой вернуть дни
//
// Возвращаемое значение:
//	Число - размер нормы времени в днях
//
Функция НормаВремениЗаМесяц(ИсходныеДанные, ВидУчетаВремени) Экспорт

	Если ИсходныеДанные.ВидУчетаВремени = ВидУчетаВремени Тогда
		НормаВремениПоГрафику = ?(ИсходныеДанные.ОсновноеЗначениеНормаПериодДействия = NULL, 0, ИсходныеДанные.ОсновноеЗначениеНормаПериодДействия);
	Иначе
		НормаВремениПоГрафику = ?(ИсходныеДанные.ДополнительноеЗначениеНормаПериодДействия = NULL, 0, ИсходныеДанные.ДополнительноеЗначениеНормаПериодДействия);
	КонецЕсли;

	Если ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням Тогда
		НормаВремениПоТабелю = ИсходныеДанные.НормаДнейПоТабелюЗаМесяц;
		ВремяПочасовыхОтклонений = 0;
	Иначе
		НормаВремениПоТабелю = ИсходныеДанные.НормаЧасовПоТабелюЗаМесяц;
		ВремяПочасовыхОтклонений = ИсходныеДанные.ЧасовПоТабелюЗаМесяцОтклонение;
	КонецЕсли;
	
	Если НормаВремениПоТабелю = NULL Тогда
		Возврат НормаВремениПоГрафику;    	
	ИначеЕсли ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
		Возврат 0;
	Иначе
		Если НормаВремениПоТабелю = ВремяПочасовыхОтклонений Тогда
			Возврат НормаВремениПоГрафику;
		Иначе
			Возврат НормаВремениПоТабелю;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // НормаВремениЗаМесяц()

// Создает строку в движениях  РасчетСреднегоЗаработка, заполняет по данным выборки 
// из запроса и возвращает ее
// Используется в СформироватьИЗаписатьДанныеРасчетаСреднего
// Параметры:
// 	Выборка - спозиционированная выборка результата запроса
//  НаборЗаписей - набор записей РасчетСреднегоЗаработка
//  Регистратор - документ
//  ВидРасчета - вид расчета среднего заработка
//
// Возвращаемое значение:
// Запись регистра расчета РасчетСреднегоЗаработка
//
Функция СоздатьСтрокуРасчетаСреднего(Выборка, НаборЗаписей, Регистратор, ВидРасчета)
	Строка = НаборЗаписей.Добавить();
    // предопределенные поля
	Строка.ПериодРегистрации = Регистратор.ПериодРегистрации;
	Строка.ВидРасчета = ВидРасчета;

	// измерения
	Строка.Физлицо = Выборка.Физлицо;
	Строка.Организация = Выборка.Организация;
	Строка.Приказ = Выборка.Приказ;

    // реквизиты
	Строка.СпособРасчета = Выборка.СпособРасчета;
	Строка.ДатаНачалаРасчетногоПериода = Выборка.НачалоБП;
	Строка.ДатаОкончанияРасчетногоПериода = Выборка.КонецБП;
	Строка.ПериодРасчетаСреднегоЗаработка = Выборка.ПериодРасчетаСреднегоЗаработка;
	
	Возврат Строка;
КонецФункции // СоздатьСтрокуРасчетаСреднего

// выполняет формирование и запись набора записей регистра РасчетСреднегоЗаработка
// на основании данных набора записей регистра ОсновныеНачисленияРаботниковОрганизации
// Параметры:
//  ИмяРегистра - имя регистра расчетов 
//  Регистратор - регистратор набора записей регистра ОсновныеНачисленияРаботниковОрганизации
//  НаборЗаписей
//  УчетнаяПолитикаПоПерсоналу
// 
// Возвращаемое значение:
//  нет
//
Процедура СформироватьИЗаписатьДанныеРасчетаСреднего(ИмяРегистра, Регистратор, НаборЗаписей, УчетнаяПолитика) Экспорт;
	               	
	ПоддержкаВнутреннегоСовместительства 						= УчетнаяПолитика.ПоддержкаВнутреннегоСовместительства;
	ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка 		= УчетнаяПолитика.ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка;
	УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка 	= УчетнаяПолитика.УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка;
	
	// Вычислим наименьшую и наибольшую дату расчета среднего
	ДатаНачалаРасчетаСреднего = Дата('00010101');
	ДатаОкончанияРасчетаСреднего = Дата('00010101');
	
	// Выберем данные о коэффициентах индексации за расчетные периоды (в общем случае может быть несколько 
	// различных расчетных периодов, так как записей начислений в документе оплаты может быть несколько и мы позволяем 
	// пользователю редактировать расчетный период)

	Запрос = Новый Запрос; 
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СпособыРасчетаПоСреднему = Новый Массив(5);
	СпособыРасчетаПоСреднему[0] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку;
	СпособыРасчетаПоСреднему[1] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных;
	СпособыРасчетаПоСреднему[2] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска;
	СпособыРасчетаПоСреднему[3] = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка;
	СпособыРасчетаПоСреднему[4] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения;
	
	Запрос.УстановитьПараметр("парамСпособыРасчета", СпособыРасчетаПоСреднему);
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
	Запрос.УстановитьПараметр("ДатаНачалаРасчетаСУчетомИндексации", ПолучитьДатуНачалаРасчетаСреднегоЗаработкаСУчетомИндексации());
	
	КоличествоПеремещений = 0;
	
 	Если УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка Тогда
		
		ТекущееПодразделение = "";
		ТекущаяДолжность = "";
		
		КадровыеПерестановкиФизЛицТекст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РаботникиОрганизаций.Сотрудник.Физлицо,
			|	РаботникиОрганизаций.Организация,
			|	РаботникиОрганизаций.Приказ,
			|	РаботникиОрганизаций.Период,
			|	РаботникиОрганизаций.ПодразделениеОрганизации,
			|	РаботникиОрганизаций.Должность
			|ПОМЕСТИТЬ ВТ_КадровыеПерестановкиФизЛиц
			|ИЗ
			|	РегистрРасчета." + ИмяРегистра + " КАК Основной
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|		ПО Основной.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
			|			И Основной.Организация = РаботникиОрганизаций.Организация
			|			И Основной.Приказ = РаботникиОрганизаций.Приказ
			|			И (Основной.Регистратор = &парамРегистратор)";
			
		Запрос.Текст = КадровыеПерестановкиФизЛицТекст;
		Запрос.Выполнить();
		КадровыеПерестановкиФизЛицТекст = "ВТ_КадровыеПерестановкиФизЛиц";
			
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	РаботникиОрганизаций.Сотрудник.Физлицо,
		               |	РаботникиОрганизаций.Организация,
		               |	РаботникиОрганизаций.Приказ,
		               |	РаботникиОрганизаций.Период,
		               |	РаботникиОрганизаций.ПодразделениеОрганизации,
		               |	РаботникиОрганизаций.Должность
		               |ИЗ
		               |	" + КадровыеПерестановкиФизЛицТекст + " КАК РаботникиОрганизаций
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо,
		               |			РаботникиОрганизаций.Организация КАК Организация,
		               |			РаботникиОрганизаций.Приказ КАК Приказ,
		               |			МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
		               |		ИЗ
		               |			РегистрРасчета." + ИмяРегистра + " КАК Основной
		               |				ЛЕВОЕ СОЕДИНЕНИЕ " + КадровыеПерестановкиФизЛицТекст + " КАК РаботникиОрганизаций
		               |				ПО Основной.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
		               |					И Основной.Организация = РаботникиОрганизаций.Организация
		               |					И Основной.Приказ = РаботникиОрганизаций.Приказ
		               |					И Основной.ПериодРасчетаСреднегоЗаработкаНачало >= РаботникиОрганизаций.Период
					   |					И (Основной.Регистратор = &парамРегистратор)
		               |		
		               |		СГРУППИРОВАТЬ ПО
		               |			РаботникиОрганизаций.Сотрудник.Физлицо,
		               |			РаботникиОрганизаций.Организация,
		               |			РаботникиОрганизаций.Приказ) КАК КадровыеДанныеДоРасчетаСреднегоЗаработка
		               |		ПО РаботникиОрганизаций.Период = КадровыеДанныеДоРасчетаСреднегоЗаработка.Период
		               |			И РаботникиОрганизаций.Сотрудник.Физлицо = КадровыеДанныеДоРасчетаСреднегоЗаработка.Физлицо
		               |			И РаботникиОрганизаций.Организация = КадровыеДанныеДоРасчетаСреднегоЗаработка.Организация
		               |			И РаботникиОрганизаций.Приказ = КадровыеДанныеДоРасчетаСреднегоЗаработка.Приказ";
					   
		ТекущееМестоРаботы = Запрос.Выполнить().Выбрать();
		Если ТекущееМестоРаботы.Следующий() Тогда
			ТекущееПодразделение = ТекущееМестоРаботы.ПодразделениеОрганизации;
			ТекущаяДолжность	 = ТекущееМестоРаботы.Должность;
		КонецЕсли;
		
		ПериодыПеремещенийТекст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо,
			|	РаботникиОрганизаций.Организация КАК Организация,
			|	РаботникиОрганизаций.Приказ КАК Приказ,
			|	РаботникиОрганизаций.Период КАК Период,
			|	РаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
			|	РаботникиОрганизаций.Должность КАК Должность
			|ИЗ
			|	РегистрРасчета." + ИмяРегистра + " КАК Основной
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + КадровыеПерестановкиФизЛицТекст + " КАК РаботникиОрганизаций
			|		ПО РаботникиОрганизаций.Сотрудник.Физлицо = Основной.ФизЛицо
			|			И РаботникиОрганизаций.Организация = Основной.Организация
			|			И РаботникиОрганизаций.Приказ = Основной.Приказ
			|			И РаботникиОрганизаций.Период < Основной.ДатаНачалаСобытия
			|			И РаботникиОрганизаций.Период >= Основной.ПериодРасчетаСреднегоЗаработкаНачало
			|			И (Основной.Регистратор = &парамРегистратор)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период
			|";

		Запрос.Текст = ПериодыПеремещенийТекст;
		ПеремещенияСотрудника = Запрос.Выполнить().Выбрать();
		
		// Определим последнюю дату смены места работы
		ПериодПоследнегоПеремещения = Дата('00010101000000');
		КоличествоПеремещений = 0;
		Пока ПеремещенияСотрудника.Следующий() Цикл
			Если ТекущееПодразделение <>  ПеремещенияСотрудника.ПодразделениеОрганизации
				Или ТекущаяДолжность <> ПеремещенияСотрудника.Должность Тогда
				
				Если ТекущееПодразделение <> "" И ТекущаяДолжность <> "" Тогда
					КоличествоПеремещений = КоличествоПеремещений + 1;
				КонецЕсли;
				
				ТекущееПодразделение 		= ПеремещенияСотрудника.ПодразделениеОрганизации;
			    ТекущаяДолжность			= ПеремещенияСотрудника.Должность;
				ПериодПоследнегоПеремещения	= ПеремещенияСотрудника.Период;
				
			КонецЕсли;			
			
		КонецЦикла;
				
	КонецЕсли;
	
	КоэффициентыИндексацииЗаработкаТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(КоэффициентыИндексацииЗаработка.Период) КАК Период,
	|	КоэффициентыИндексацииЗаработка.Физлицо КАК Физлицо,
	|	КоэффициентыИндексацииЗаработка.Организация КАК Организация,
	|	КоэффициентыИндексацииЗаработка.Приказ КАК Приказ
	|ПОМЕСТИТЬ ВТ_ВыборПериода
	|ИЗ
	|	РегистрРасчета." + ИмяРегистра + " КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентыИндексацииЗаработка КАК КоэффициентыИндексацииЗаработка
	|		ПО Основной.ФизЛицо = КоэффициентыИндексацииЗаработка.Физлицо
	|			И Основной.Организация = КоэффициентыИндексацииЗаработка.Организация
	|			И Основной.Приказ = КоэффициентыИндексацииЗаработка.Приказ
	|			И Основной.ПериодРасчетаСреднегоЗаработкаНачало < КоэффициентыИндексацииЗаработка.Период
	|			И Основной.ДатаНачалаСобытия > КоэффициентыИндексацииЗаработка.Период
	|			И Основной.Регистратор = &парамРегистратор
	|ГДЕ
	|	КоэффициентыИндексацииЗаработка.Коэффициент > 1
	|
	|СГРУППИРОВАТЬ ПО
	|	КоэффициентыИндексацииЗаработка.Физлицо,
	|	КоэффициентыИндексацииЗаработка.Организация,
	|	КоэффициентыИндексацииЗаработка.Приказ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КоэффициентыИндексацииЗаработка.Физлицо КАК Физлицо,
	|	КоэффициентыИндексацииЗаработка.Организация КАК Организация,
	|	КоэффициентыИндексацииЗаработка.Приказ КАК Приказ,
	|	КоэффициентыИндексацииЗаработка.ДатаИндексации КАК ДатаИндексации,
	|	ВЫБОР
	|		КОГДА КоэффициентыИндексацииЗаработка.КоэффициентИндексации < 1
	|			ТОГДА 1
	|		ИНАЧЕ КоэффициентыИндексацииЗаработка.КоэффициентИндексации
	|	КОНЕЦ КАК КоэффициентИндексации
	|Поместить ВТ_КоэффициентыИндексацииЗаработка
	|ИЗ
	|	РегистрСведений.КоэффициентыИндексацииЗаработка КАК КоэффициентыИндексацииЗаработка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВыборПериода КАК ВыборПериода
	|		ПО КоэффициентыИндексацииЗаработка.Физлицо = ВыборПериода.Физлицо
	|			И КоэффициентыИндексацииЗаработка.Организация = ВыборПериода.Организация
	|			И КоэффициентыИндексацииЗаработка.Приказ = ВыборПериода.Приказ
	|			И КоэффициентыИндексацииЗаработка.Период = ВыборПериода.Период";
	Если УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка  И КоличествоПеремещений > 0 Тогда
		Запрос.УстановитьПараметр("ПериодПоследнегоПеремещения", ПериодПоследнегоПеремещения);
		КоэффициентыИндексацииЗаработкаТекст = КоэффициентыИндексацииЗаработкаТекст + "
		|ГДЕ КоэффициентыИндексацииЗаработка.ДатаИндексации > &ПериодПоследнегоПеремещения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Основной.ФизЛицо,
		|	Основной.Организация,
		|	Основной.Приказ,
		|	&ПериодПоследнегоПеремещения,
		|	1
		|ИЗ
		|	РегистрРасчета." + ИмяРегистра + " КАК Основной
		|ГДЕ Основной.Регистратор = &парамРегистратор
		|";
	КонецЕсли;
	
	Запрос.Текст = КоэффициентыИндексацииЗаработкаТекст;
    Запрос.Выполнить();
	КоэффициентыИндексацииЗаработкаТекст = "ВТ_КоэффициентыИндексацииЗаработка";
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Основной.ФизЛицо КАК ФизЛицо,
	|	Основной.Организация КАК Организация,
	|	Основной.Приказ КАК Приказ,
	|	Основной.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ГОД(Основной.ПериодРасчетаСреднегоЗаработкаОкончание) * 12 + МЕСЯЦ(Основной.ПериодРасчетаСреднегоЗаработкаОкончание) - ГОД(Основной.ПериодРасчетаСреднегоЗаработкаНачало) * 12 - МЕСЯЦ(Основной.ПериодРасчетаСреднегоЗаработкаНачало) + 1 КАК ПериодРасчетаСреднегоЗаработка,
	|	Основной.ПериодРасчетаСреднегоЗаработкаНачало КАК НачалоБП,
	|	КОНЕЦПЕРИОДА(Основной.ПериодРасчетаСреднегоЗаработкаОкончание, ДЕНЬ) КАК КонецБП,
	|	Основной.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	КоэффициентыИндексацииЗаработка.КоэффициентИндексации,
	|	КоэффициентыИндексацииЗаработка.ДатаИндексации КАК Период
	|ИЗ
	|	РегистрРасчета." + ИмяРегистра+ " КАК Основной
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + КоэффициентыИндексацииЗаработкаТекст + " КАК КоэффициентыИндексацииЗаработка
	|		ПО (КоэффициентыИндексацииЗаработка.Физлицо = Основной.ФизЛицо)
	|			И (КоэффициентыИндексацииЗаработка.Организация = Основной.Организация)
	|			И (КоэффициентыИндексацииЗаработка.Приказ = Основной.Приказ)
	|			И (Основной.ДатаНачалаСобытия >= &ДатаНачалаРасчетаСУчетомИндексации)
	|			И Основной.ДатаНачалаСобытия >= КоэффициентыИндексацииЗаработка.ДатаИндексации
	|			И Основной.ПериодРасчетаСреднегоЗаработкаНачало < КоэффициентыИндексацииЗаработка.ДатаИндексации
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.ВидРасчета.СпособРасчета В(&парамСпособыРасчета)
	|	И (НЕ Основной.Сторно)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	Приказ,
	|	СпособРасчета,
	|	НачалоБП,
	|	КонецБП,
	|	Период УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();

	МассивПредыдущаяСтрока = Новый Массив;
	МассивСтрока = Новый Массив();
	ПредыдущаяСтрокаЗаработок = НеОпределено;
    
    ТекущееФизлицо = НеОпределено;
    ТекущаяОрганизация = НеОпределено;
    ТекущийПриказ = НеОпределено;
    ТекущийСпособ = НеОпределено;
    ТекущийНачалоБП = НеОпределено;
    ТекущийКонецБП = НеОпределено;
    ТекущийКоэффициент = 1;

	ДатаНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням = ПолучитьДатуНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням();
	НеобходимРасчетПоКалендарнымДням = Ложь; 

    // предопределенные виды расчета среднего заработка (строки по заработку (БЛ, отпуск) создаются всегда, остальные - только при наличии базовых видов)
	ПоЗаработку = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
	ПоЗаработкуБезИндексации = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБезИндексации;
	ИспользоватьПоЗаработкуБезИндексации = ПоЗаработкуБезИндексации.БазовыеВидыРасчета.Количество() > 0;
	
	ПоЗаработкуБЛ = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ;
	ПоЗаработкуБЛБезИндексации = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛБезИндексации;
	ИспользоватьПоЗаработкуБЛБезИндексации = ПоЗаработкуБЛБезИндексации.БазовыеВидыРасчета.Количество() > 0;
	
	ПоЗаработкуОтпуск = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск;
	ПоЗаработкуОтпускБезИндексации = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпускБезИндексации;
	ИспользоватьПоЗаработкуОтпускБезИндексации = ПоЗаработкуОтпускБезИндексации.БазовыеВидыРасчета.Количество() > 0;

	МассивВидыРасчетаПремии = Новый Массив();
    
    ПоПремиям = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
    ИспользоватьПоПремиям = ПоПремиям.БазовыеВидыРасчета.Количество() > 0;
    Если ИспользоватьПоПремиям Тогда
    	МассивВидыРасчетаПремии.Добавить(ПоПремиям);
    КонецЕсли;
    ПоПремиямБезИндексации = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБезИндексации;
    ИспользоватьПоПремиямБезИндексации = ПоПремиямБезИндексации.БазовыеВидыРасчета.Количество() > 0;
    Если ИспользоватьПоПремиямБезИндексации Тогда
    	МассивВидыРасчетаПремии.Добавить(ПоПремиямБезИндексации);
    КонецЕсли;
	
	ПоФиксПремиям = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
	ИспользоватьПоФиксПремиям = ПоФиксПремиям.БазовыеВидыРасчета.Количество() > 0;
	Если ИспользоватьПоФиксПремиям Тогда
		МассивВидыРасчетаПремии.Добавить(ПоФиксПремиям);
	КонецЕсли;
	ПоФиксПремиямБезИндексации = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБезИндексации;
	ИспользоватьПоФиксПремиямБезИндексации = ПоФиксПремиямБезИндексации.БазовыеВидыРасчета.Количество() > 0;
	Если ИспользоватьПоФиксПремиямБезИндексации Тогда
		МассивВидыРасчетаПремии.Добавить(ПоФиксПремиямБезИндексации);
	КонецЕсли;

	// Скопируем структуру набора записей
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	
	// Выборку обходим в порядке убывания дат случаев индексации
	Пока Выборка.Следующий() Цикл
		
		// узнаем необходимость расчета в календарных днях для среднего заработка
		Если Выборка.ДатаНачалаСобытия < ДатаНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням Тогда
			НеобходимРасчетПоКалендарнымДням = Истина;
		КонецЕсли;
	
		// Проверим, не сменился ли работник
		Если ТекущееФизлицо <> Выборка.Физлицо ИЛИ ТекущаяОрганизация <> Выборка.Организация ИЛИ ТекущийПриказ <> Выборка.Приказ ИЛИ ТекущийСпособ <> Выборка.СпособРасчета 
			ИЛИ ТекущийНачалоБП <> Выборка.НачалоБП ИЛИ ТекущийКонецБП <> Выборка.КонецБП Тогда
			
			// Закроем строки по предыдущему работнику
			Если ПредыдущаяСтрокаЗаработок <> Неопределено Тогда
			
				ТекущийМесяц = НачалоМесяца(ПредыдущаяСтрокаЗаработок.БазовыйПериодКонец);
				МесяцБазовыйПериодНачало = НачалоМесяца(ТекущийНачалоБП);

				СтрокаЗаработок = ПредыдущаяСтрокаЗаработок;
				Для Н = 0 По МассивСтрока.ВГраница() Цикл
					МассивСтрока[Н] = МассивПредыдущаяСтрока[Н];
				КонецЦикла;
				
				Пока ТекущийМесяц > МесяцБазовыйПериодНачало Цикл
					
					// дозаполним строки по работнику
					Для Н = 0 По МассивСтрока.ВГраница() Цикл
						МассивСтрока[Н].БазовыйПериодНачало = ТекущийМесяц;
					КонецЦикла;
					
					// Создадим по первой строке по работнику для заработка и премии
					МассивСтрока.Очистить();

					Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных Тогда
						
						СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛ);
						МассивСтрока.Добавить(СтрокаЗаработок);
						Если ИспользоватьПоЗаработкуБЛБезИндексации Тогда
							МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛБезИндексации));
						КонецЕсли;
						
					ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда
					
						СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпуск);
						МассивСтрока.Добавить(СтрокаЗаработок);
						Если ИспользоватьПоЗаработкуОтпускБезИндексации Тогда
							МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпускБезИндексации));
						КонецЕсли;
					
					Иначе
					
						СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработку);
						МассивСтрока.Добавить(СтрокаЗаработок);
						Если ИспользоватьПоЗаработкуБезИндексации Тогда
							МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБезИндексации));
						КонецЕсли;
					
					КонецЕсли;

					Для Н = 0 По МассивСтрока.ВГраница() Цикл
						ЗаполнитьЗначенияСвойств(МассивСтрока[Н], МассивПредыдущаяСтрока[Н]);
						МассивСтрока[Н].БазовыйПериодКонец = ТекущийМесяц - 1;
						МассивСтрока[Н].КоэффициентИндексации = ТекущийКоэффициент;
					КонецЦикла;
					
					ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, -1);
					
				КонецЦикла;
				
				// закроем последнюю строку по предыдущему работнику
				ПредыдущаяСтрокаЗаработок = Неопределено;
				Для Н = 0 По МассивСтрока.ВГраница() Цикл
					МассивСтрока[Н].БазовыйПериодНачало = ТекущийНачалоБП;
				КонецЦикла;
			КонецЕсли;

			// Запомним новый набор идентификаторов начисления
			ТекущееФизлицо = Выборка.Физлицо;
			ТекущаяОрганизация = Выборка.Организация;
			ТекущийПриказ = Выборка.Приказ;
			ТекущийСпособ = Выборка.СпособРасчета;
			ТекущийНачалоБП = Выборка.НачалоБП;
			ТекущийКонецБП = Выборка.КонецБП;
			
			// Инициализируем данные для нового работника
			ТекущийКоэффициент = 1;
			
			МассивСтрока.Очистить();
			МассивПредыдущаяСтрока.Очистить();
			
			// Создадим по первой строке по работнику для заработка и премии
			Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных Тогда
						
				СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛ);
				МассивСтрока.Добавить(СтрокаЗаработок);
				Если ИспользоватьПоЗаработкуБЛБезИндексации Тогда
					МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛБезИндексации));
				КонецЕсли;
						
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда
					
				СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпуск);
				МассивСтрока.Добавить(СтрокаЗаработок);
				Если ИспользоватьПоЗаработкуОтпускБезИндексации Тогда
					МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпускБезИндексации));
				КонецЕсли;
					
			Иначе
					
				СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработку);
				МассивСтрока.Добавить(СтрокаЗаработок);
				Если ИспользоватьПоЗаработкуБезИндексации Тогда
					МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБезИндексации));
				КонецЕсли;
					
			КонецЕсли;
			
			Для Н = 0 По МассивСтрока.ВГраница() Цикл
				МассивСтрока[Н].КоэффициентИндексации = 1;
				МассивСтрока[Н].БазовыйПериодКонец = Выборка.КонецБП;
			КонецЦикла;
			
			Если Выборка.Период <> NULL и Выборка.Период <= Выборка.КонецБП Тогда

				ТекущийМесяц = НачалоМесяца(СтрокаЗаработок.БазовыйПериодКонец);
				МесяцБазовыйПериодНачало = НачалоМесяца(Выборка.Период);
				Пока ТекущийМесяц > МесяцБазовыйПериодНачало Цикл
				
					// дозаполним строки по работнику
					Для Н = 0 По МассивСтрока.ВГраница() Цикл
						МассивСтрока[Н].БазовыйПериодНачало = ТекущийМесяц;					
					КонецЦикла;
					
					// Создадим по первой строке по работнику для заработка и премии
					МассивСтрока.Очистить();
					
					Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных Тогда
								
						СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛ);
						МассивСтрока.Добавить(СтрокаЗаработок);
						Если ИспользоватьПоЗаработкуБЛБезИндексации Тогда
							МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛБезИндексации));
						КонецЕсли;
								
					ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда
							
						СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпуск);
						МассивСтрока.Добавить(СтрокаЗаработок);
						Если ИспользоватьПоЗаработкуОтпускБезИндексации Тогда
							МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпускБезИндексации));
						КонецЕсли;
							
					Иначе
							
						СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработку);
						МассивСтрока.Добавить(СтрокаЗаработок);
						Если ИспользоватьПоЗаработкуБезИндексации Тогда
							МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБезИндексации));
						КонецЕсли;
							
					КонецЕсли;
							
					Для Н = 0 По МассивСтрока.ВГраница() Цикл
						МассивСтрока[Н].БазовыйПериодКонец = ТекущийМесяц - 1;
						МассивСтрока[Н].КоэффициентИндексации = ТекущийКоэффициент;
					КонецЦикла;
					
					ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, -1);
					
				КонецЦикла;
				
				// дозаполним первые строки по работнику
				Для Н = 0 По МассивСтрока.ВГраница() Цикл
					МассивСтрока[Н].БазовыйПериодНачало = Выборка.Период;
				КонецЦикла;
				
				// и создадим еще по одной строке
				МассивСтрока.Очистить();
				
				Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных Тогда
								
					СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛ);
					МассивСтрока.Добавить(СтрокаЗаработок);
					Если ИспользоватьПоЗаработкуБЛБезИндексации Тогда
						МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛБезИндексации));
					КонецЕсли;
								
				ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда
							
					СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпуск);
					МассивСтрока.Добавить(СтрокаЗаработок);
					Если ИспользоватьПоЗаработкуОтпускБезИндексации Тогда
						МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпускБезИндексации));
					КонецЕсли;
							
				Иначе
							
					СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработку);
					МассивСтрока.Добавить(СтрокаЗаработок);
					Если ИспользоватьПоЗаработкуБезИндексации Тогда
						МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБезИндексации));
					КонецЕсли;
							
				КонецЕсли;
							
				// дозаполним - знаем все кроме БазовыйПериодНачало
				ТекущийКоэффициент = Выборка.КоэффициентИндексации;
				
				Для Н = 0 По МассивСтрока.ВГраница() Цикл
					МассивСтрока[Н].БазовыйПериодКонец = Выборка.Период-1;
				КонецЦикла;
				
			ИначеЕсли Выборка.Период <> NULL Тогда
				// здесь запомним только КоэффициентИндексации
				ТекущийКоэффициент = Выборка.КоэффициентИндексации;
			КонецЕсли;
			
			Для Н = 0 По МассивСтрока.ВГраница() Цикл
				МассивСтрока[Н].КоэффициентИндексации = ТекущийКоэффициент;
			КонецЦикла;
			
		Иначе	
			
			Если Выборка.Период = NULL или Выборка.Период <= Выборка.КонецБП Тогда	
				
				ТекущийМесяц = НачалоМесяца(ПредыдущаяСтрокаЗаработок.БазовыйПериодКонец);
				МесяцБазовыйПериодНачало = НачалоМесяца(Выборка.Период);
				Пока ТекущийМесяц > МесяцБазовыйПериодНачало Цикл
				
					// дозаполним строки по работнику
					Для Н = 0 По МассивПредыдущаяСтрока.ВГраница() Цикл
						МассивПредыдущаяСтрока[Н].БазовыйПериодНачало = ТекущийМесяц;
					КонецЦикла;
					
					// Создадим по первой строке по работнику для заработка и премии
					МассивПредыдущаяСтрока.Очистить();
					
					Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных Тогда
								
						ПредыдущаяСтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛ);
						МассивПредыдущаяСтрока.Добавить(ПредыдущаяСтрокаЗаработок);
						Если ИспользоватьПоЗаработкуБЛБезИндексации Тогда
							МассивПредыдущаяСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛБезИндексации));
						КонецЕсли;
								
					ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда
							
						ПредыдущаяСтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпуск);
						МассивПредыдущаяСтрока.Добавить(ПредыдущаяСтрокаЗаработок);
						Если ИспользоватьПоЗаработкуОтпускБезИндексации Тогда
							МассивПредыдущаяСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпускБезИндексации));
						КонецЕсли;
							
					Иначе
							
						ПредыдущаяСтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработку);
						МассивПредыдущаяСтрока.Добавить(ПредыдущаяСтрокаЗаработок);
						Если ИспользоватьПоЗаработкуБезИндексации Тогда
							МассивПредыдущаяСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБезИндексации));
						КонецЕсли;
							
					КонецЕсли;
							
					Для Н = 0 По МассивПредыдущаяСтрока.ВГраница() Цикл
						МассивПредыдущаяСтрока[Н].БазовыйПериодКонец = ТекущийМесяц - 1;
						МассивПредыдущаяСтрока[Н].КоэффициентИндексации = ТекущийКоэффициент;
					КонецЦикла;
					
					ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, -1);
					
				КонецЦикла;
		
				// закроем предыдущую строку
				Для Н = 0 По МассивПредыдущаяСтрока.ВГраница() Цикл
					МассивПредыдущаяСтрока[Н].БазовыйПериодНачало = Выборка.Период;
				КонецЦикла;
				
				// Создадим очередные строки
				МассивСтрока.Очистить();
				
				Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных Тогда
							
					СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛ);
					МассивСтрока.Добавить(СтрокаЗаработок);
					Если ИспользоватьПоЗаработкуБЛБезИндексации Тогда
						МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛБезИндексации));
					КонецЕсли;
							
				ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда
						
					СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпуск);
					МассивСтрока.Добавить(СтрокаЗаработок);
					Если ИспользоватьПоЗаработкуОтпускБезИндексации Тогда
						МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпускБезИндексации));
					КонецЕсли;
						
				Иначе
						
					СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработку);
					МассивСтрока.Добавить(СтрокаЗаработок);
					Если ИспользоватьПоЗаработкуБезИндексации Тогда
						МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБезИндексации));
					КонецЕсли;
						
				КонецЕсли;
						
				// дозаполним - знаем все кроме БазовыйПериодНачало
				ТекущийКоэффициент = Выборка.КоэффициентИндексации;

				Для Н = 0 По МассивСтрока.ВГраница() Цикл
					МассивСтрока[Н].БазовыйПериодКонец = Выборка.Период-1;
					МассивСтрока[Н].КоэффициентИндексации = ТекущийКоэффициент;
				КонецЦикла;
				
			Иначе
				// здесь запомним только КоэффициентИндексации
				ТекущийКоэффициент = Выборка.КоэффициентИндексации;
			КонецЕсли;
		КонецЕсли;
		
		// Сохраним для следующей итерации
		ПредыдущаяСтрокаЗаработок = СтрокаЗаработок;
		МассивПредыдущаяСтрока.Очистить();
		Для Н = 0 По МассивСтрока.ВГраница() Цикл
			МассивПредыдущаяСтрока.Добавить(МассивСтрока[Н]);
		КонецЦикла;
		
		// Расчет минимальной и максимальной из дат начала и окончания расчетных периодов 
		//(эти данные нужны для процедуры ПолучитьДанныеДляРасчета
        Если ДатаНачалаРасчетаСреднего = Дата('00010101') Тогда
			ДатаНачалаРасчетаСреднего = Выборка.НачалоБП;
		Иначе
			ДатаНачалаРасчетаСреднего = Мин(ДатаНачалаРасчетаСреднего, Выборка.НачалоБП);
		КонецЕсли;
        Если ДатаОкончанияРасчетаСреднего = Дата('00010101') Тогда
			ДатаОкончанияРасчетаСреднего = Выборка.КонецБП;
		Иначе
			ДатаОкончанияРасчетаСреднего = Макс(ДатаОкончанияРасчетаСреднего, Выборка.КонецБП);
		КонецЕсли;
		
	КонецЦикла;
	
	// Закроем строки по последнему работнику
	Если ПредыдущаяСтрокаЗаработок <> Неопределено Тогда
	
		ТекущийМесяц = НачалоМесяца(ПредыдущаяСтрокаЗаработок.БазовыйПериодКонец);
		МесяцБазовыйПериодНачало = НачалоМесяца(ТекущийНачалоБП);
		
		СтрокаЗаработок = ПредыдущаяСтрокаЗаработок;
		МассивСтрока.Очистить();
		Для Н = 0 По МассивПредыдущаяСтрока.ВГраница() Цикл
			МассивСтрока.Добавить(МассивПредыдущаяСтрока[Н]);
		КонецЦикла;
		
		Пока ТекущийМесяц > МесяцБазовыйПериодНачало Цикл
			
			// дозаполним строки по работнику
			Для Н = 0 По МассивСтрока.ВГраница() Цикл
				МассивСтрока[Н].БазовыйПериодНачало = ТекущийМесяц;
			КонецЦикла;
			
			// Создадим по первой строке по работнику для заработка и премии
			МассивСтрока.Очистить();
				
			Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных Тогда
							
				СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛ);
				МассивСтрока.Добавить(СтрокаЗаработок);
				Если ИспользоватьПоЗаработкуБЛБезИндексации Тогда
					МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛБезИндексации));
				КонецЕсли;
							
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда
						
				СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпуск);
				МассивСтрока.Добавить(СтрокаЗаработок);
				Если ИспользоватьПоЗаработкуОтпускБезИндексации Тогда
					МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпускБезИндексации));
				КонецЕсли;
						
			Иначе
						
				СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработку);
				МассивСтрока.Добавить(СтрокаЗаработок);
				Если ИспользоватьПоЗаработкуБезИндексации Тогда
					МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБезИндексации));
				КонецЕсли;
						
			КонецЕсли;
						
			Для Н = 0 По МассивСтрока.ВГраница() Цикл
				ЗаполнитьЗначенияСвойств(МассивСтрока[Н],МассивПредыдущаяСтрока[Н]);
				МассивСтрока[Н].БазовыйПериодКонец = ТекущийМесяц - 1;
				МассивСтрока[Н].КоэффициентИндексации = ТекущийКоэффициент;
			КонецЦикла;
			
			ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, -1);
			
		КонецЦикла;
		
		// закроем последнюю строку по предыдущему работнику
		Для Н = 0 По МассивСтрока.ВГраница() Цикл
			МассивСтрока[Н].БазовыйПериодНачало = ТекущийНачалоБП;
		КонецЦикла;
		
	КонецЕсли;
	
	// Добавим строки с премиями
	Выборка.Сбросить();
	Выборка.Следующий();
	ТекущийМесяц = НачалоМесяца(ДатаОкончанияРасчетаСреднего);
	Пока ТекущийМесяц >= ДатаНачалаРасчетаСреднего Цикл	
		Для Н = 0 По МассивВидыРасчетаПремии.ВГраница() Цикл
			Строка = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, МассивВидыРасчетаПремии[Н]);
			Строка.БазовыйПериодНачало = ТекущийМесяц;
			Строка.БазовыйПериодКонец = КонецМесяца(ТекущийМесяц);
			Строка.КоэффициентИндексации = 1;
			МассивСтрока.Добавить(Строка);
		КонецЦикла;
    	ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, -1);
	КонецЦикла;
		
	
	// Загрузим полученные периоды в набор записей
	ТаблицаЗаписей.Сортировать("ФизЛицо, Приказ, СпособРасчета, ДатаНачалаРасчетногоПериода, ДатаОкончанияРасчетногоПериода, БазовыйПериодНачало");
	НаборЗаписей.Загрузить(ТаблицаЗаписей);
	
	// Зафиксируем нарезанные записи
	НаборЗаписей.Записать();

	////////////////////////////////////////////////////////////////////////////////
	// Базовые данные для расчета ресурсов
	
	Если ПоддержкаВнутреннегоСовместительства Тогда
		БазаОсновныеТекст = "РегистрРасчета.РасчетСреднегоЗаработка.БазаОсновныеНачисленияРаботниковОрганизаций(&парамИзмерения, &парамИзмерения, &парамРазрезы, Регистратор = &парамРегистратор И НЕ ВидРасчета В(&парамПоПремии))";
		БазаДополнительныеТекст = "РегистрРасчета.РасчетСреднегоЗаработка.БазаДополнительныеНачисленияРаботниковОрганизаций(&парамИзмерения, &парамИзмерения, &парамРазрезыДоп, Регистратор = &парамРегистратор И НЕ ВидРасчета В(&парамПоПремии))";
		
	Иначе
		БазаОсновныеТекст = 
		"(ВЫБРАТЬ
		|	База.ПериодРасчетаСреднегоЗаработка,
		|	База.РезультатБаза,
		|	База.Регистратор,
		|	База.НомерСтроки
		|ИЗ
		|	РегистрРасчета.РасчетСреднегоЗаработка.БазаОсновныеНачисленияРаботниковОрганизаций(
		|		&парамИзмерения, 
		|		&парамИзмерения, 
		|		&парамРазрезы, 
		|		Регистратор = &парамРегистратор 
		|			И (НЕ ВидРасчета В (&парамПоПремии))) КАК База
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Основной.ФизЛицо КАК ФизЛицо,
		|			Основной.Организация КАК Организация,
		|			НАЧАЛОПЕРИОДА(МАКСИМУМ(Работники.Период), МЕСЯЦ) КАК ДатаПриема
		|		ИЗ
		|			РегистрРасчета.РасчетСреднегоЗаработка КАК Основной
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|				ПО Основной.ФизЛицо = Работники.ФизЛицо
		|					И Основной.Организация = Работники.Организация
		|					И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|					И Основной.ДатаОкончанияРасчетногоПериода >= Работники.Период
		|		
		|		ГДЕ
		|			Основной.Регистратор = &парамРегистратор
		|			И (НЕ Основной.ВидРасчета В (&парамПоПремии))
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Основной.ФизЛицо,
		|			Основной.Организация) КАК ДатыПриема
		|		ПО База.ФизЛицо = ДатыПриема.ФизЛицо 
		|			И База.Организация = ДатыПриема.Организация
		|
		|ГДЕ
		|	(База.ПериодРегистрацииРазрез >= ДатыПриема.ДатаПриема))";
		
		БазаДополнительныеТекст = 
		"(ВЫБРАТЬ
		|	База.ПериодРасчетаСреднегоЗаработка,
		|	База.РезультатБаза,
		|	База.ЧислоМесяцевРазрез,
		|	База.Регистратор,
		|	База.НомерСтроки
		|ИЗ
		|	РегистрРасчета.РасчетСреднегоЗаработка.БазаДополнительныеНачисленияРаботниковОрганизаций(
		|		&парамИзмерения, 
		|		&парамИзмерения, 
		|		&парамРазрезыДоп, 
		|		Регистратор = &парамРегистратор 
		|			И (НЕ ВидРасчета В (&парамПоПремии))) КАК База
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Основной.ФизЛицо КАК ФизЛицо,
		|			Основной.Организация КАК Организация,
		|			НАЧАЛОПЕРИОДА(МАКСИМУМ(Работники.Период), МЕСЯЦ) КАК ДатаПриема
		|		ИЗ
		|			РегистрРасчета.РасчетСреднегоЗаработка КАК Основной
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|				ПО Основной.ФизЛицо = Работники.ФизЛицо
		|					И Основной.Организация = Работники.Организация
		|					И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|					И Основной.ДатаОкончанияРасчетногоПериода >= Работники.Период
		|		
		|		ГДЕ
		|			Основной.Регистратор = &парамРегистратор
		|			И (НЕ Основной.ВидРасчета В (&парамПоПремии))
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Основной.ФизЛицо,
		|			Основной.Организация) КАК ДатыПриема
		|		ПО База.ФизЛицо = ДатыПриема.ФизЛицо 
		|			И База.Организация = ДатыПриема.Организация
		|
		|ГДЕ
		|	(База.ПериодРегистрацииРазрез >= ДатыПриема.ДатаПриема))";
		
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(База.РезультатБаза) КАК РезультатБаза,
	|	База.ДатаНачалаПериодаПремии,
	|	База.ДатаОкончанияПериодаПремии,
	|	База.ЧислоМесяцев,
	|	База.ПериодРасчетаСреднегоЗаработка,
	|	База.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		БазаОсновныеНачисления.РезультатБаза КАК РезультатБаза,
	|		&ПустаяДата КАК ДатаНачалаПериодаПремии,
	|		&ПустаяДата КАК ДатаОкончанияПериодаПремии,
	|		1 КАК ЧислоМесяцев,
	|		БазаОсновныеНачисления.ПериодРасчетаСреднегоЗаработка КАК ПериодРасчетаСреднегоЗаработка,
	|		БазаОсновныеНачисления.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		" + БазаОсновныеТекст + " КАК БазаОсновныеНачисления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		БазаДополнительныеНачисления.РезультатБаза,
	|		&ПустаяДата КАК ДатаНачалаПериодаПремии,
	|		&ПустаяДата КАК ДатаОкончанияПериодаПремии,
	|		ВЫБОР КОГДА БазаДополнительныеНачисления.ЧислоМесяцевРазрез = 0 ТОГДА 1 ИНАЧЕ БазаДополнительныеНачисления.ЧислоМесяцевРазрез КОНЕЦ,
	|		БазаДополнительныеНачисления.ПериодРасчетаСреднегоЗаработка,
	|		БазаДополнительныеНачисления.НомерСтроки
	|	ИЗ
	|		" + БазаДополнительныеТекст + " КАК БазаДополнительныеНачисления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Дополнительные.Результат,
	|		НАЧАЛОПЕРИОДА(Дополнительные.БазовыйПериодНачало, МЕСЯЦ) КАК ДатаНачалаПериодаПремии,
	|		КОНЕЦПЕРИОДА(Дополнительные.БазовыйПериодКонец, МЕСЯЦ) КАК ДатаОкончанияПериодаПремии,
	|		Дополнительные.ЧислоМесяцев,
	|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
	|		РасчетСреднегоЗаработка.НомерСтроки
	|	ИЗ
	|		РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК СреднийЗаработокБазовыеВидыРасчета
	|			ПО РасчетСреднегоЗаработка.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Дополнительные
	|			ПО Дополнительные.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.ВидРасчета
	|				И Дополнительные.ФизЛицо = РасчетСреднегоЗаработка.ФизЛицо 
	|				И Дополнительные.Организация = РасчетСреднегоЗаработка.Организация 
	|				И Дополнительные.Приказ = РасчетСреднегоЗаработка.Приказ 
	|				И (Дополнительные.ПериодРегистрации МЕЖДУ РасчетСреднегоЗаработка.БазовыйПериодНачало И РасчетСреднегоЗаработка.БазовыйПериодКонец
	|					ИЛИ Дополнительные.ПериодРегистрации > РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода // учтем премии, которые регистрировались позже расчетного периода, но относятся к нему
	|							И Дополнительные.ПериодРегистрации <= КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.ПериодРегистрации, МЕСЯЦ)
	|							И КОНЕЦПЕРИОДА(Дополнительные.БазовыйПериодКонец, МЕСЯЦ) = РасчетСреднегоЗаработка.БазовыйПериодКонец)
	|	
	|	ГДЕ
	|		РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
	|		И РасчетСреднегоЗаработка.ВидРасчета В(&парамПоПремии)) КАК База
	|
	|СГРУППИРОВАТЬ ПО
	|	База.ДатаНачалаПериодаПремии,
	|	База.ДатаОкончанияПериодаПремии,
	|	База.ЧислоМесяцев,
	|	База.ПериодРасчетаСреднегоЗаработка,
	|	База.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	База.НомерСтроки";

	Измерения = Новый Массив(3);
	Измерения[0] = "Физлицо";
	Измерения[1] = "Организация";
	Измерения[2] = "Приказ";

	Разрезы = Новый Массив(1);
	Разрезы[0] = "ПериодРегистрации";
	
	РазрезыДоп = Новый Массив(2);
	РазрезыДоп[0] = "ПериодРегистрации";
	РазрезыДоп[1] = "ЧислоМесяцев";
	
	Запрос.УстановитьПараметр("парамИзмерения", Измерения);
	Запрос.УстановитьПараметр("парамРазрезы", Разрезы);
	Запрос.УстановитьПараметр("парамРазрезыДоп", РазрезыДоп);
	ПоПремии = Новый Массив;
	ПоПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
	ПоПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБезИндексации);
	ПоПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
	ПоПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБезИндексации);
	Запрос.УстановитьПараметр("парамПоПремии", ПоПремии);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	ВыборкаБазы = Запрос.Выполнить().Выбрать();
	
	// ЗаписиДанныхДляСреднего
	// Данные для расчета среднего заработка
	// Поля:
	//		НомерСтроки - ключевое поле в пределах регистратора,
	// 		ДатаНачалаРасчетногоПериода, ДатаОкончанияРасчетногоПериода - определяют расчетный период,
	// 		БазовыйПериодНачало, БазовыйПериодКонец - определяют часть расчетного периода,
    //      ФизЛицо, Организация, Приказ - измерения регистра - для идентификации записи
    //      ВидРасчета - вид заработка для расчета среднего 
    //      СпособРасчета - способ расчета среднего заработка
    //
	// Описание:
	//      выбираем из регистра расчета среднего заработка все записи по регистратору по
	//      видам расчета: основной заработок (оба вида) и фиксированные премии
	//
	ЗаписиДанныхДляСреднего =
	"ВЫБРАТЬ
	|	ЗаписиРасчетаСреднего.НомерСтроки КАК НомерСтроки,
	|	ЗаписиРасчетаСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	ЗаписиРасчетаСреднего.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|	ЗаписиРасчетаСреднего.ФизЛицо КАК ФизЛицо,
	|	ЗаписиРасчетаСреднего.Организация КАК Организация,
	|	ЗаписиРасчетаСреднего.Приказ КАК Приказ,
	|	ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода КАК ДатаНачалаРасчетногоПериода,
	|	ЗаписиРасчетаСреднего.ДатаОкончанияРасчетногоПериода КАК ДатаОкончанияРасчетногоПериода,
	|	ЗаписиРасчетаСреднего.ВидРасчета КАК ВидРасчета,
	|	ЗаписиРасчетаСреднего.СпособРасчета КАК СпособРасчета
	|ИЗ
	|	РегистрРасчета.РасчетСреднегоЗаработка КАК ЗаписиРасчетаСреднего
	|ГДЕ
	|	ЗаписиРасчетаСреднего.Регистратор = &парамРегистратор
	|	И ЗаписиРасчетаСреднего.ВидРасчета В(&Заработок)";
	
	// НормаПоПроизвКалендарю
	// Данные о норме дней по шестидневке
	// Поля:
	//		МесяцПериода,
	// 		ДнейПоПятидневке
    //
	// Описание:
	//      выбираем из производсвенного календаря с сумированием ресурса Шестидневка
	//      условие - с начала периода расчета среднего заработка по конец периода
	//      группируем по номеру месяца
	//
	НормаПоПроизвКалендарюТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК МесяцПериода,
	|	СУММА(ПроизводственныйКалендарь.Пятидневка) КАК ДнейПоПятидневке
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ГДЕ
	|	ПроизводственныйКалендарь.ДатаКалендаря >= &парамДатаС
	|	И ПроизводственныйКалендарь.ДатаКалендаря <= &парамДатаПо
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ)";
	
	Если НеобходимРасчетПоКалендарнымДням Тогда
		
		// расчет до введения единой инструкции по расчету среднего заработка № 1394 от 29.12.2007
	
		ФактическийПериодДействияТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФПД.Организация,
		|	ФПД.ФизЛицо,
		|	ФПД.Приказ,
		|	ФПД.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
		|	ФПД.Сторно,
		|	ФПД.ПериодДействия,
		|	ФПД.ПериодРегистрации,
		|	ПроизводственныйКалендарь.ДатаКалендаря
		|ИЗ
		|	РегистрРасчета.РасчетСреднегоЗаработка КАК ЗаписиРасчетаСреднего
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|								ВидРасчета.ЗачетНормыВремени
		|								И Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|														Организация 
		|													ИЗ 
		|														РегистрРасчета.РасчетСреднегоЗаработка 
		|													ГДЕ 
		|														Регистратор = &парамРегистратор)
		|								И ФизЛицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|														ФизЛицо 
		|													ИЗ 
		|														РегистрРасчета.РасчетСреднегоЗаработка 
		|													ГДЕ 
		|														Регистратор = &парамРегистратор)) КАК ФПД
		|		ПО ЗаписиРасчетаСреднего.ФизЛицо = ФПД.ФизЛицо
		|			И ЗаписиРасчетаСреднего.Приказ = ФПД.Приказ
		|			И ЗаписиРасчетаСреднего.Организация = ФПД.Организация
		|			И ФПД.ПериодДействия МЕЖДУ ЗаписиРасчетаСреднего.БазовыйПериодНачало И ЗаписиРасчетаСреднего.БазовыйПериодКонец
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарь
		|		ПО ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ФПД.ПериодДействияНачало И ФПД.ПериодДействияКонец
		|ГДЕ
		|	ЗаписиРасчетаСреднего.Регистратор = &парамРегистратор
		|	И ЗаписиРасчетаСреднего.ВидРасчета = &ПоЗаработкуОтпуск
		|";
		
		// КалендарныеДниПоГрафику
		// Данные о количестве календарных дней приходящихся на отработанное время по графику
		// Поля:
		//		ФизЛицо,
		// 		Приказ
		// 		ПериодДействия,
		//		ОтработаноКалендарныхДней
	    //
		// Описание:
		//      выбираем из графика работника календарные дни, приходящиеся на отработанное время
		//      условие - с начала периода расчета среднего заработка по конец периода
		//      группируем по периоду действия
		//
		КалендарныеДниПоГрафикуТекст = 
		"ВЫБРАТЬ
		|	ФактическийПериодДействия.ФизЛицо,
		|	ФактическийПериодДействия.Организация,
		|	ФактическийПериодДействия.Приказ,
		|	ФактическийПериодДействия.ПериодДействия,
		|	СУММА(ВЫБОР 
		|			КОГДА НЕ ФактическийПериодДействия.ЗачетОтработанногоВремени 
		|				ТОГДА 0
		|			ИНАЧЕ ВЫБОР КОГДА ФактическийПериодДействия.Сторно ТОГДА -1 ИНАЧЕ 1 КОНЕЦ * ПроизводственныйКалендарь.КалендарныеДни
		|		  КОНЕЦ) КАК ОтработаноКалендарныхДней,
		|	СУММА(ВЫБОР КОГДА ФактическийПериодДействия.Сторно ТОГДА -1 ИНАЧЕ 1 КОНЕЦ * ПроизводственныйКалендарь.КалендарныеДни) КАК НормаКалендарныхДней
		|ИЗ
		|	(" + ФактическийПериодДействияТекст + ") КАК ФактическийПериодДействия
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарь
		|		ПО ФактическийПериодДействия.ДатаКалендаря = ПроизводственныйКалендарь.ДатаКалендаря
		|
		|СГРУППИРОВАТЬ ПО
		|	ФактическийПериодДействия.ФизЛицо,
		|	ФактическийПериодДействия.Организация,
		|	ФактическийПериодДействия.Приказ,
		|	ФактическийПериодДействия.ПериодДействия";
		
		////////////////////////////////////////////////////////////////////////////////
		// данные о продолжительности расчетного периода (ОтработаноДней и ОтработаноЧасов), а также
		// об отработанном времени и норме времени за расчетный период  -
		// 	нужны для включения премий, начисленных в фиксированных суммах, пропорционально отработанному времени)
		
		// к каждой записи из данных для расчета среднего выбираем записи основного регистра по правилу:
		// - если это запись по премиям в фикс. суммах - все записи основного регистра, попадающие в расчетный период
		// - если это запись по заработку и начинает расчетный период - записи основного регистра за все "затронутые" месяцы расчетного периода
		// - если же это одна из последующих записей по заработку - записи основного регистра за "затронутые" месяцы расчетного периода, кроме первого
		// для записей расчета среднего по премиям в фикс. суммах собираем отработанное время и норму по пятидневке за весь расчетный период
		// для записей по заработку собираем продолжительность её части расчетного периода
	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтработанноеВремя.НомерСтроки КАК НомерСтроки,
		|	СУММА(ОтработанноеВремя.ОтработаноДнейПоПятидневке) КАК ОтработаноДнейПоПятидневке,
		|	СУММА(ОтработанноеВремя.НормаДнейПоПятидневкеПроизвКалендарь) КАК НормаДнейПоПятидневкеПроизвКалендарь,
		|	СУММА(ОтработанноеВремя.ОтработаноДней) КАК ОтработаноДней,
		|	СУММА(ОтработанноеВремя.ОтработаноЧасов) КАК ОтработаноЧасов,
		|	СУММА(ОтработанноеВремя.НормаЧасов) КАК НормаЧасов,
		|	СУММА(ОтработанноеВремя.КалендарныхДней) КАК КалендарныхДней
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаписиРасчетаСреднего.НомерСтроки КАК НомерСтроки,
		|		СУММА(ОтработанноеВремя.ОтработаноДнейПоПятидневке) КАК ОтработаноДнейПоПятидневке,
		|		НормаПоПроизвКалендарю.ДнейПоПятидневке КАК НормаДнейПоПятидневкеПроизвКалендарь,
		|		КалендарныеДниПоГрафику.НормаКалендарныхДней КАК КалендарныхДней,
		|		ВЫБОР 
		|			КОГДА ЗаписиРасчетаСреднего.СпособРасчета В (&парамНеОтпуск) 
		|				ТОГДА СУММА(ОтработанноеВремя.ОтработаноДней)
		|			ИНАЧЕ КалендарныеДниПоГрафику.ОтработаноКалендарныхДней
		|		КОНЕЦ КАК ОтработаноДней,
		|		СУММА(ОтработанноеВремя.ОтработаноЧасов) КАК ОтработаноЧасов,
		|		ВЫБОР
		|			КОГДА СУММА(ОтработанноеВремя.НормаЧасов) > БалансРабочегоВремени.НормаЧасов
		|				ТОГДА БалансРабочегоВремени.НормаЧасов
		|			ИНАЧЕ СУММА(ОтработанноеВремя.НормаЧасов)
		|		КОНЕЦ КАК НормаЧасов
		|	ИЗ
		|		(" + ЗаписиДанныхДляСреднего + ") КАК ЗаписиРасчетаСреднего
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОтработанноеВремя
		|		ПО ЗаписиРасчетаСреднего.ФизЛицо = ОтработанноеВремя.ФизЛицо
		|			И ЗаписиРасчетаСреднего.Организация = ОтработанноеВремя.Организация
		|			И ЗаписиРасчетаСреднего.Приказ = ОтработанноеВремя.Приказ
		|			И ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода <= ОтработанноеВремя.ПериодДействияКонец
		|			И ЗаписиРасчетаСреднего.ДатаОкончанияРасчетногоПериода >= ОтработанноеВремя.ПериодДействияНачало
		|			И ((ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода = ЗаписиРасчетаСреднего.БазовыйПериодНачало
		|						И НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ) <= ОтработанноеВремя.ПериодДействия
		|					ИЛИ ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода < ЗаписиРасчетаСреднего.БазовыйПериодНачало
		|						И ЗаписиРасчетаСреднего.БазовыйПериодНачало <= ОтработанноеВремя.ПериодДействия)
		|					И НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодКонец, МЕСЯЦ) >= ОтработанноеВремя.ПериодДействия
		|				ИЛИ ЗаписиРасчетаСреднего.ВидРасчета В (&ФиксПремии))
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + НормаПоПроизвКалендарюТекст + ") КАК НормаПоПроизвКалендарю
		|		ПО (НормаПоПроизвКалендарю.МесяцПериода = НАЧАЛОПЕРИОДА(ОтработанноеВремя.ПериодДействия, ДЕНЬ))
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + КалендарныеДниПоГрафикуТекст + ") КАК КалендарныеДниПоГрафику
		|		ПО КалендарныеДниПоГрафику.ФизЛицо = ОтработанноеВремя.ФизЛицо
		|			И КалендарныеДниПоГрафику.Организация = ОтработанноеВремя.Организация
		|			И КалендарныеДниПоГрафику.Приказ = ОтработанноеВремя.Приказ
		|			И КалендарныеДниПоГрафику.ПериодДействия = ОтработанноеВремя.ПериодДействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|								ЗаписиРасчетаСреднего.ФизЛицо,
		|								ЗаписиРасчетаСреднего.Приказ,
		|								ЗаписиРасчетаСреднего.Организация,
		|								НАЧАЛОПЕРИОДА(БалансРабочегоВремени.ДатаМесяца, МЕСЯЦ) КАК ПериодДействия,
		|								МАКСИМУМ(БалансРабочегоВремени.НормаЧасов) КАК НормаЧасов
		|							ИЗ
		|								(" + ЗаписиДанныхДляСреднего + ") КАК ЗаписиРасчетаСреднего
		|								ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОтработанноеВремя
		|									ПО ЗаписиРасчетаСреднего.ФизЛицо = ОтработанноеВремя.ФизЛицо
		|										И ЗаписиРасчетаСреднего.Организация = ОтработанноеВремя.Организация
		|										И ЗаписиРасчетаСреднего.Приказ = ОтработанноеВремя.Приказ
		|										И ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода <= ОтработанноеВремя.ПериодДействияКонец
		|										И ЗаписиРасчетаСреднего.ДатаОкончанияРасчетногоПериода >= ОтработанноеВремя.ПериодДействияНачало
		|										И ОтработанноеВремя.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботыФизЛиц
		|								ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БалансРабочегоВремени КАК БалансРабочегоВремени
		|									ПО ОтработанноеВремя.ГрафикРаботы.ГрафикРаботы = БалансРабочегоВремени.ГрафикРаботы
		|							СГРУППИРОВАТЬ ПО
		|								ЗаписиРасчетаСреднего.ФизЛицо,
		|								ЗаписиРасчетаСреднего.Приказ,
		|								ЗаписиРасчетаСреднего.Организация,
		|								НАЧАЛОПЕРИОДА(БалансРабочегоВремени.ДатаМесяца, МЕСЯЦ)) КАК БалансРабочегоВремени
		|		ПО ОтработанноеВремя.ФизЛицо = БалансРабочегоВремени.ФизЛицо
		|			И ОтработанноеВремя.Приказ = БалансРабочегоВремени.Приказ
		|			И ОтработанноеВремя.Организация = БалансРабочегоВремени.Организация
		|			И ОтработанноеВремя.ПериодДействия = БалансРабочегоВремени.ПериодДействия
		|
		|	СГРУППИРОВАТЬ ПО
		|		ЗаписиРасчетаСреднего.СпособРасчета,
		|		ЗаписиРасчетаСреднего.НомерСтроки,
		|		НАЧАЛОПЕРИОДА(ОтработанноеВремя.ПериодДействия, ДЕНЬ),
		|		НормаПоПроизвКалендарю.ДнейПоПятидневке,
		|		КалендарныеДниПоГрафику.ОтработаноКалендарныхДней,
		|		КалендарныеДниПоГрафику.НормаКалендарныхДней,
		|		БалансРабочегоВремени.НормаЧасов) КАК ОтработанноеВремя
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтработанноеВремя.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Иначе
		// расчет после введения единой инструкции по расчету среднего заработка № 1394 от 29.12.2007
		
		Если ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка = Перечисления.ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка.ПоФактическиОтработанномуВремени Тогда
			// расчет при учете времени работника для рассчета среднего заработка по фактически отработанному времени
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОтработанноеВремя.НомерСтроки КАК НомерСтроки,
			|	СУММА(ОтработанноеВремя.ОтработаноДнейПоПятидневке) КАК ОтработаноДнейПоПятидневке,
			|	СУММА(ОтработанноеВремя.НормаДнейПоПятидневкеПроизвКалендарь) КАК НормаДнейПоПятидневкеПроизвКалендарь,
			|	СУММА(ОтработанноеВремя.ОтработаноДней) КАК ОтработаноДней,
			|	СУММА(ОтработанноеВремя.ОтработаноЧасов) КАК ОтработаноЧасов
			|ИЗ
			|	(ВЫБРАТЬ
			|		ЗаписиРасчетаСреднего.НомерСтроки КАК НомерСтроки,
			|		СУММА(ОтработанноеВремя.ОтработаноДнейПоПятидневке) КАК ОтработаноДнейПоПятидневке,
			|		НормаПоПроизвКалендарю.ДнейПоПятидневке КАК НормаДнейПоПятидневкеПроизвКалендарь,
			|		СУММА(ВЫБОР КОГДА НЕ(БазовыеВидыРасчета.ВидРасчета ЕСТЬ NULL) ТОГДА ОтработанноеВремя.ОтработаноДней ИНАЧЕ 0 КОНЕЦ) КАК ОтработаноДней,
			|		СУММА(ВЫБОР КОГДА НЕ(БазовыеВидыРасчета.ВидРасчета ЕСТЬ NULL) ТОГДА ОтработанноеВремя.ОтработаноЧасов ИНАЧЕ 0 КОНЕЦ) КАК ОтработаноЧасов
			|	ИЗ
			|		(" + ЗаписиДанныхДляСреднего + ") КАК ЗаписиРасчетаСреднего
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОтработанноеВремя
			|		ПО ЗаписиРасчетаСреднего.ФизЛицо = ОтработанноеВремя.ФизЛицо
			|			И ЗаписиРасчетаСреднего.Организация = ОтработанноеВремя.Организация
			|			И ЗаписиРасчетаСреднего.Приказ = ОтработанноеВремя.Приказ
			|			И ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода <= ОтработанноеВремя.ПериодДействияКонец
			|			И ЗаписиРасчетаСреднего.ДатаОкончанияРасчетногоПериода >= ОтработанноеВремя.ПериодДействияНачало
			|			И ((ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода = ЗаписиРасчетаСреднего.БазовыйПериодНачало
			|						И НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ) <= ОтработанноеВремя.ПериодДействия
			|					ИЛИ ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода < ЗаписиРасчетаСреднего.БазовыйПериодНачало
			|						И ЗаписиРасчетаСреднего.БазовыйПериодНачало <= ОтработанноеВремя.ПериодДействия)
			|					И НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодКонец, МЕСЯЦ) >= ОтработанноеВремя.ПериодДействия
			|				ИЛИ ЗаписиРасчетаСреднего.ВидРасчета В (&ФиксПремии))
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ (" + НормаПоПроизвКалендарюТекст + ") КАК НормаПоПроизвКалендарю
			|		ПО (НормаПоПроизвКалендарю.МесяцПериода = ОтработанноеВремя.ПериодДействия)
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК БазовыеВидыРасчета
			|			ПО ЗаписиРасчетаСреднего.ВидРасчета = БазовыеВидыРасчета.Ссылка
			|				И ОтработанноеВремя.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
			|
			|	СГРУППИРОВАТЬ ПО
			|		ЗаписиРасчетаСреднего.СпособРасчета,
			|		ЗаписиРасчетаСреднего.НомерСтроки,
			|		НАЧАЛОПЕРИОДА(ОтработанноеВремя.ПериодДействия, ДЕНЬ),
			|		НормаПоПроизвКалендарю.ДнейПоПятидневке) КАК ОтработанноеВремя
			|
			|СГРУППИРОВАТЬ ПО
			|	ОтработанноеВремя.НомерСтроки
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		
		Иначе
			// расчет при учете времени работника для рассчета среднего заработка по основному графику предприятия
			
			Запрос.УстановитьПараметр("ОсновнойГрафикРаботыПредприятия",Константы.ОсновнойГрафикРаботыПредприятия.Получить());
			Запрос.УстановитьПараметр("ПоЧасам", Перечисления.ВидыУчетаВремени.ПоЧасам);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОтработанноеВремя.НомерСтроки КАК НомерСтроки,
			|	СУММА(ОтработанноеВремя.ОтработаноДнейПоПятидневке) КАК ОтработаноДнейПоПятидневке,
			|	ОтработанноеВремя.НормаДнейПоПятидневкеПроизвКалендарь КАК НормаДнейПоПятидневкеПроизвКалендарь,
			|	СУММА(ОтработанноеВремя.ОтработаноДней) КАК ОтработаноДней,
			|	СУММА(ОтработанноеВремя.ОтработаноЧасов) КАК ОтработаноЧасов
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ЗаписиРасчетаСреднего.НомерСтроки КАК НомерСтроки,
			|		ВЫБОР
			|			КОГДА (НЕ БазовыеВидыРасчета.ВидРасчета ЕСТЬ NULL )
			|				ТОГДА ВЫБОР
			|						КОГДА ФактическийПериод.Сторно
			|							ТОГДА ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ПроизводственныйКалендарьПятидневка, 0) * -1
			|						ИНАЧЕ ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ПроизводственныйКалендарьПятидневка, 0)
			|					КОНЕЦ
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК ОтработаноДнейПоПятидневке,
			|		НормаПоПроизвКалендарю.ДнейПоПятидневке КАК НормаДнейПоПятидневкеПроизвКалендарь,
			|		ВЫБОР
			|			КОГДА (НЕ БазовыеВидыРасчета.ВидРасчета ЕСТЬ NULL )
			|				ТОГДА ВЫБОР
			|						КОГДА ФактическийПериод.Сторно
			|							ТОГДА ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0) * -1
			|						ИНАЧЕ ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0)
			|					КОНЕЦ
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК ОтработаноДней,
			|		ВЫБОР
			|			КОГДА (НЕ БазовыеВидыРасчета.ВидРасчета ЕСТЬ NULL )
			|				ТОГДА ВЫБОР
			|						КОГДА ФактическийПериод.Сторно
			|							ТОГДА ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение, 0) * -1
			|						ИНАЧЕ ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение, 0)
			|					КОНЕЦ
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК ОтработаноЧасов,
			|		ГрафикиРаботыПоВидамВремени.Дата КАК Дата
			|	ИЗ
			|		(" + ЗаписиДанныхДляСреднего + ") КАК ЗаписиРасчетаСреднего
			|
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
			|									ВидРасчета.ЗачетОтработанногоВремени
			|									И (ФизЛицо, Организация) В (ВЫБРАТЬ
			|																		РасчетСреднегоЗаработка.ФизЛицо,
			|																		РасчетСреднегоЗаработка.Организация
			|																	ИЗ
			|																		РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|																	ГДЕ
			|																		РасчетСреднегоЗаработка.Регистратор = &парамРегистратор)) КАК ФактическийПериод
			|			ПО ЗаписиРасчетаСреднего.ФизЛицо = ФактическийПериод.ФизЛицо
			|				И ЗаписиРасчетаСреднего.Приказ = ФактическийПериод.Приказ
			|				И ЗаписиРасчетаСреднего.Организация = ФактическийПериод.Организация
			|				И ((ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода = ЗаписиРасчетаСреднего.БазовыйПериодНачало
			|							И НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ) <= ФактическийПериод.ПериодДействия
			|						ИЛИ ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода < ЗаписиРасчетаСреднего.БазовыйПериодНачало
			|							И ЗаписиРасчетаСреднего.БазовыйПериодНачало <= ФактическийПериод.ПериодДействия)
			|						И НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодКонец, МЕСЯЦ) >= ФактическийПериод.ПериодДействия
			|					ИЛИ ЗаписиРасчетаСреднего.ВидРасчета В (&ФиксПремии))
			|				И ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода <= ФактическийПериод.ПериодДействияКонец
			|				И ЗаписиРасчетаСреднего.ДатаОкончанияРасчетногоПериода >= ФактическийПериод.ПериодДействияНачало
			|
			|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК БазовыеВидыРасчета
			|			ПО ЗаписиРасчетаСреднего.ВидРасчета = БазовыеВидыРасчета.Ссылка
			|				И (ФактическийПериод.ВидРасчета = БазовыеВидыРасчета.ВидРасчета)
			|
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
			|			ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ОсновнойГрафикРаботыПредприятия)
			|				И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ ФактическийПериод.ПериодДействияНачало И ФактическийПериод.ПериодДействияКонец)
			|				И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &ПоЧасам)
			|
			|			ЛЕВОЕ СОЕДИНЕНИЕ (" + НормаПоПроизвКалендарюТекст + ") КАК НормаПоПроизвКалендарю
			|			ПО (НормаПоПроизвКалендарю.МесяцПериода = ФактическийПериод.ПериодДействия)) КАК ОтработанноеВремя
			|
			|СГРУППИРОВАТЬ ПО
			|	ОтработанноеВремя.НомерСтроки,
			|	ОтработанноеВремя.НормаДнейПоПятидневкеПроизвКалендарь
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки
			|";			
			
		КонецЕсли; // Если ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка = 
			
	КонецЕсли; // Если НеобходимРасчетПоКалендарнымДням Тогда
	
	Заработок = Новый Массив();
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБезИндексации);
	Запрос.УстановитьПараметр("Заработок", Заработок);
	
	ПоФиксПремиям = Новый Массив();
	ПоФиксПремиям.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
	ПоФиксПремиям.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБезИндексации);
	
	СписокСпособов = Новый Массив();
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения);
	Запрос.УстановитьПараметр("парамНеОтпуск", СписокСпособов);
	
	Запрос.УстановитьПараметр("ПоЗаработкуОтпуск", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск);
	Запрос.УстановитьПараметр("ФиксПремии", ПоФиксПремиям);
	Запрос.УстановитьПараметр("парамДатаС", НачалоМесяца(ДатаНачалаРасчетаСреднего));
	Запрос.УстановитьПараметр("парамДатаПо", КонецМесяца(ДатаОкончанияРасчетаСреднего));
	Запрос.УстановитьПараметр("парамПоКалендарным", Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	Запрос.УстановитьПараметр("парамПоДням", Перечисления.ВидыУчетаВремени.ПоДням);
	
	СоответствиеФиксПремий = Новый Соответствие;
	СоответствиеФиксПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям, Истина);
	СоответствиеФиксПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБезИндексации, Истина);
	
	ВыборкаОтработанноеВремя = Запрос.Выполнить().Выбрать();
	
	// заполним результаты в наборе записей	
	СтруктураПоиска = Новый Структура("НомерСтроки");
	ВГраница = НаборЗаписей.Количество() - 1;
	ЕстьПремии = Ложь;
	Для Индекс = 0 По ВГраница Цикл
		СтрокаДвижений = НаборЗаписей[Индекс];
		
		СтруктураПоиска.НомерСтроки = СтрокаДвижений.НомерСтроки;
		
		ПерваяЗапись = Истина;
		Пока ВыборкаБазы.НайтиСледующий(СтруктураПоиска) Цикл
			Если НЕ ПерваяЗапись Тогда
				// вводим новые строки набора записей
				ДопСтрокаДвижений = НаборЗаписей.Добавить();
				
				ДопСтрокаДвижений.ПериодРегистрации = СтрокаДвижений.ПериодРегистрации;
				ДопСтрокаДвижений.ВидРасчета 		= СтрокаДвижений.ВидРасчета;
				ДопСтрокаДвижений.Регистратор 		= СтрокаДвижений.Регистратор;
				ДопСтрокаДвижений.Активность 		= Ложь;
				
				// измерения
				ДопСтрокаДвижений.Физлицо 		= СтрокаДвижений.Физлицо;
				ДопСтрокаДвижений.Организация	= СтрокаДвижений.Организация;
				ДопСтрокаДвижений.Приказ 		= СтрокаДвижений.Приказ;
				
				// свойства
				ДопСтрокаДвижений.БазовыйПериодНачало 		 	 = СтрокаДвижений.БазовыйПериодНачало;
				ДопСтрокаДвижений.БазовыйПериодКонец 		 	 = СтрокаДвижений.БазовыйПериодКонец;
				
				// реквизиты
				ДопСтрокаДвижений.КоэффициентИндексации 		 = СтрокаДвижений.КоэффициентИндексации;
				ДопСтрокаДвижений.ДатаНачалаРасчетногоПериода 	 = СтрокаДвижений.ДатаНачалаРасчетногоПериода;
				ДопСтрокаДвижений.ДатаОкончанияРасчетногоПериода = СтрокаДвижений.ДатаОкончанияРасчетногоПериода;
				ДопСтрокаДвижений.СпособРасчета 				 = СтрокаДвижений.СпособРасчета;
				ДопСтрокаДвижений.ПериодРасчетаСреднегоЗаработка = СтрокаДвижений.ПериодРасчетаСреднегоЗаработка;
				
				СтрокаДвижений = ДопСтрокаДвижений;
				
			КонецЕсли;
			
			СтрокаДвижений.Результат						= ВыборкаБазы.РезультатБаза;
			СтрокаДвижений.Размер							= ВыборкаБазы.РезультатБаза;
			СтрокаДвижений.ЧислоМесяцев 					= ВыборкаБазы.ЧислоМесяцев;
			СтрокаДвижений.ПериодРасчетаСреднегоЗаработка 	= ВыборкаБазы.ПериодРасчетаСреднегоЗаработка;
			СтрокаДвижений.ДатаНачалаПериодаПремии		 	= ВыборкаБазы.ДатаНачалаПериодаПремии;
			СтрокаДвижений.ДатаОкончанияПериодаПремии		= ВыборкаБазы.ДатаОкончанияПериодаПремии;
				
			Если ВыборкаОтработанноеВремя.НайтиСледующий(СтруктураПоиска) Или Не ПерваяЗапись Тогда
				Если СоответствиеФиксПремий[СтрокаДвижений.ВидРасчета] <> Неопределено Тогда
					// для "премий фиксированной суммой" надо учитывать отработанное время
					СтрокаДвижений.ОтработаноПоПятидневке 		= ВыборкаОтработанноеВремя.ОтработаноДнейПоПятидневке;
					СтрокаДвижений.НормаПоПятидневке 			= ВыборкаОтработанноеВремя.НормаДнейПоПятидневкеПроизвКалендарь;
					
				Иначе
					СтрокаДвижений.ОтработаноДней 				= ВыборкаОтработанноеВремя.ОтработаноДней;
					СтрокаДвижений.ОтработаноЧасов 				= ВыборкаОтработанноеВремя.ОтработаноЧасов;
					
					Если НеобходимРасчетПоКалендарнымДням Тогда
						СтрокаДвижений.НормаЧасов	 				= ВыборкаОтработанноеВремя.НормаЧасов;
						СтрокаДвижений.КалендарныхДней 				= ВыборкаОтработанноеВремя.КалендарныхДней;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			// разделим суммы премий по месяцам, за которые начислены премии
			Если ЗначениеЗаполнено(СтрокаДвижений.ДатаНачалаПериодаПремии)
					И ЗначениеЗаполнено(СтрокаДвижений.ДатаОкончанияПериодаПремии) Тогда
				ЕстьПремии = Истина;
				Если НачалоМесяца(СтрокаДвижений.ДатаНачалаПериодаПремии) <> НачалоМесяца(СтрокаДвижений.ДатаОкончанияПериодаПремии) Тогда
				
					ПериодПремииВМесяцах = Месяц(СтрокаДвижений.ДатаОкончанияПериодаПремии) + 12 * Год(СтрокаДвижений.ДатаОкончанияПериодаПремии) - 
											Месяц(СтрокаДвижений.ДатаНачалаПериодаПремии) - 12 * Год(СтрокаДвижений.ДатаНачалаПериодаПремии) + 1;
					
					ПервыйМесяцПремииВРасчетномПериоде	 = Макс(СтрокаДвижений.ДатаНачалаПериодаПремии, СтрокаДвижений.ДатаНачалаРасчетногоПериода);
					ПоследнийМесяцПремииВРасчетномПериоде= Мин(СтрокаДвижений.ДатаОкончанияПериодаПремии, СтрокаДвижений.ДатаОкончанияРасчетногоПериода);
											
					МесяцевПериодаПремииВРасчетномПериоде = Месяц(ПоследнийМесяцПремииВРасчетномПериоде) + 12 * Год(ПоследнийМесяцПремииВРасчетномПериоде) - 
																Месяц(ПервыйМесяцПремииВРасчетномПериоде) - 12 * Год(ПервыйМесяцПремииВРасчетномПериоде) + 1;
											
					ТекущийМесяц = СтрокаДвижений.ДатаНачалаПериодаПремии;
					ДатаОкончанияПериодаПремии = СтрокаДвижений.ДатаОкончанияПериодаПремии;
					РезультатКРаспределению = СтрокаДвижений.Результат * МесяцевПериодаПремииВРасчетномПериоде / ПериодПремииВМесяцах;
					РезультатРаспределено = 0;
					ПоследняяСтрокаДвижения = Неопределено;
						
					Пока ТекущийМесяц < ДатаОкончанияПериодаПремии Цикл
						
						Если ТекущийМесяц = СтрокаДвижений.ДатаНачалаПериодаПремии Тогда
							// корректируем результат в самой первой строке движения
							ДопСтрокаДвижений = СтрокаДвижений;
						Иначе
							// добавляем новую строку
							ДопСтрокаДвижений = НаборЗаписей.Добавить();
							ЗаполнитьЗначенияСвойств(ДопСтрокаДвижений, СтрокаДвижений);
						КонецЕсли;
						
						Если ТекущийМесяц >= ПервыйМесяцПремииВРасчетномПериоде И ТекущийМесяц <= ПоследнийМесяцПремииВРасчетномПериоде Тогда
							ДопСтрокаДвижений.Результат = РезультатКРаспределению / МесяцевПериодаПремииВРасчетномПериоде;
							ПоследняяСтрокаДвижений = ДопСтрокаДвижений;
						Иначе
							// этот месяц из периода премии не попадает в расчетный период
							ДопСтрокаДвижений.Результат = 0;
						КонецЕсли;
						ДопСтрокаДвижений.ДатаНачалаПериодаПремии = ТекущийМесяц;
						ДопСтрокаДвижений.ДатаОкончанияПериодаПремии = КонецМесяца(ТекущийМесяц);
						
						РезультатРаспределено = РезультатРаспределено + ДопСтрокаДвижений.Результат;
					
						ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
						
					КонецЦикла;
					
					// ошибки округления на последнюю запись
					Если ПоследняяСтрокаДвижения <> Неопределено Тогда
						ПоследняяСтрокаДвижения.Результат = ПоследняяСтрокаДвижения.Результат + РезультатКРаспределению - РезультатРаспределено;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;	
			
			ПерваяЗапись = Ложь;			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЕстьПремии Тогда
	
		//Запишем результат
		НаборЗаписей.Записать();
	
		// для премий определим периоды индексации заработка по каждому месяцу, за который начислена премия
		Если ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка = Перечисления.ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка.ПоФактическиОтработанномуВремени Тогда
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	РасчетСреднегоЗаработка.ФизЛицо КАК ФизЛицо,
			|	РасчетСреднегоЗаработка.Организация КАК Организация,
			|	РасчетСреднегоЗаработка.Приказ КАК Приказ,
			|	МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период,
			|	РасчетСреднегоЗаработка.БазовыйПериодНачало КАК БазовыйПериодНачало,
			|	РасчетСреднегоЗаработка.БазовыйПериодКонец КАК БазовыйПериодКонец
			|ПОМЕСТИТЬ ВТ_ПериодыГрафиковРаботы
			|ИЗ
			|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|		ПО РасчетСреднегоЗаработка.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
			|			И РасчетСреднегоЗаработка.Организация = РаботникиОрганизаций.Организация
			|			И РасчетСреднегоЗаработка.Приказ = РаботникиОрганизаций.Приказ
			|			И РасчетСреднегоЗаработка.БазовыйПериодКонец >= РаботникиОрганизаций.Период
			|ГДЕ
			|	РасчетСреднегоЗаработка.ДатаНачалаПериодаПремии <> &ПустаяДата
			|	И РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
			|СГРУППИРОВАТЬ ПО
			|	РасчетСреднегоЗаработка.ФизЛицо,
			|	РасчетСреднегоЗаработка.Организация,
			|	РасчетСреднегоЗаработка.Приказ,
			|	РасчетСреднегоЗаработка.БазовыйПериодНачало,
			|	РасчетСреднегоЗаработка.БазовыйПериодКонец
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПериодыГрафиковРаботы.ФизЛицо КАК ФизЛицо,
			|	ПериодыГрафиковРаботы.Организация КАК Организация,
			|	ПериодыГрафиковРаботы.Приказ КАК Приказ,
			|	ПериодыГрафиковРаботы.Период КАК Период,
			|	РаботникиОрганизаций.ГрафикРаботы КАК ГрафикРаботы,
			|	ПериодыГрафиковРаботы.БазовыйПериодНачало КАК БазовыйПериодНачало,
			|	ПериодыГрафиковРаботы.БазовыйПериодКонец КАК БазовыйПериодКонец
			|ПОМЕСТИТЬ ВТ_ГрафикиРаботы
			|ИЗ
			|	ВТ_ПериодыГрафиковРаботы КАК ПериодыГрафиковРаботы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|		ПО ПериодыГрафиковРаботы.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
			|			И ПериодыГрафиковРаботы.Организация = РаботникиОрганизаций.Организация
			|			И ПериодыГрафиковРаботы.Приказ = РаботникиОрганизаций.Приказ
			|			И ПериодыГрафиковРаботы.Период = РаботникиОрганизаций.Период
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ГрафикиРаботы.ФизЛицо КАК ФизЛицо,
			|	ГрафикиРаботы.Организация КАК Организация,
			|	ГрафикиРаботы.Приказ КАК Приказ,
			|	ГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы,
			|	РасчетСреднегоЗаработка.НомерСтроки КАК НомерСтроки,
			|	РасчетСреднегоЗаработка.ДатаНачалаПериодаПремии КАК ДатаНачалаПериодаПремии,
			|	РасчетСреднегоЗаработка.ДатаОкончанияПериодаПремии КАК ДатаОкончанияПериодаПремии
			|ПОМЕСТИТЬ ВТ_ГрафикиРаботПоПериодамПремий
			|ИЗ
			|	ВТ_ГрафикиРаботы КАК ГрафикиРаботы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|		ПО ГрафикиРаботы.ФизЛицо = РасчетСреднегоЗаработка.ФизЛицо
			|			И ГрафикиРаботы.Организация = РасчетСреднегоЗаработка.Организация
			|			И ГрафикиРаботы.Приказ = РасчетСреднегоЗаработка.Приказ
			|			И ГрафикиРаботы.БазовыйПериодНачало = РасчетСреднегоЗаработка.БазовыйПериодНачало
			|			И ГрафикиРаботы.БазовыйПериодКонец = РасчетСреднегоЗаработка.БазовыйПериодКонец
			|ГДЕ
			|	РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
			|	И РасчетСреднегоЗаработка.ДатаНачалаПериодаПремии <> &ПустаяДата
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КоэффициентыИндексации.Физлицо КАК Физлицо,
			|	КоэффициентыИндексации.Организация КАК Организация,
			|	КоэффициентыИндексации.Приказ КАК Приказ,
			|	КоэффициентыИндексации.ДатаИндексации КАК ДатаИндексации,
			|	КоэффициентыИндексации.КоэффициентИндексации КАК КоэффициентИндексации,
			|	ГрафикиРаботПоПериодамПремий.ГрафикРаботы КАК ГрафикРаботы
			|ПОМЕСТИТЬ ВТ_ПериодыИндексацииЗаработка
			|ИЗ
			|	" + КоэффициентыИндексацииЗаработкаТекст + " КАК КоэффициентыИндексации
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГрафикиРаботПоПериодамПремий КАК ГрафикиРаботПоПериодамПремий
			|	ПО КоэффициентыИндексации.Физлицо = ГрафикиРаботПоПериодамПремий.ФизЛицо
			|		И КоэффициентыИндексации.Организация = ГрафикиРаботПоПериодамПремий.Организация
			|		И КоэффициентыИндексации.Приказ = ГрафикиРаботПоПериодамПремий.Приказ
			|		И (КоэффициентыИндексации.ДатаИндексации МЕЖДУ ГрафикиРаботПоПериодамПремий.ДатаНачалаПериодаПремии И ГрафикиРаботПоПериодамПремий.ДатаОкончанияПериодаПремии)
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПериодыИндексацииЗаработка.Физлицо,
			|	ПериодыИндексацииЗаработка.Организация,
			|	ПериодыИндексацииЗаработка.Приказ,
			|	ПериодыИндексацииЗаработка.ДатаИндексации,
			|	ПериодыИндексацииЗаработка.КоэффициентИндексации,
			|	ПериодыИндексацииЗаработка.ГрафикРаботы,
			|	СУММА(ВЫБОР
			|			КОГДА ГрафикиРаботы.ВидУчетаВремени = &ПоДням
			|					И ГрафикиРаботы.Дата >= ПериодыИндексацииЗаработка.ДатаИндексации
			|				ТОГДА ГрафикиРаботы.ОсновноеЗначение
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ДнейПослеИндексации,
			|	СУММА(ВЫБОР
			|			КОГДА ГрафикиРаботы.ВидУчетаВремени = &ПоДням
			|					И ГрафикиРаботы.Дата < ПериодыИндексацииЗаработка.ДатаИндексации
			|				ТОГДА ГрафикиРаботы.ОсновноеЗначение
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ДнейДоИндексации,
			|	СУММА(ВЫБОР
			|			КОГДА ГрафикиРаботы.ВидУчетаВремени = &ПоДням
			|				ТОГДА ГрафикиРаботы.ОсновноеЗначение
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК НормаДней
			|ИЗ
			|	ВТ_ПериодыИндексацииЗаработка КАК ПериодыИндексацииЗаработка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
			|		ПО ПериодыИндексацииЗаработка.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы
			|			И (НАЧАЛОПЕРИОДА(ПериодыИндексацииЗаработка.ДатаИндексации, МЕСЯЦ) = ГрафикиРаботы.Месяц)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПериодыИндексацииЗаработка.Физлицо,
			|	ПериодыИндексацииЗаработка.Организация,
			|	ПериодыИндексацииЗаработка.Приказ,
			|	ПериодыИндексацииЗаработка.ДатаИндексации,
			|	ПериодыИндексацииЗаработка.КоэффициентИндексации,
			|	ПериодыИндексацииЗаработка.ГрафикРаботы
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаИндексации УБЫВ
	       	|";
		Иначе // По основному графику предприятия
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	КоэффициентыИндексацииЗаработка.Физлицо,
			|	КоэффициентыИндексацииЗаработка.Организация,
			|	КоэффициентыИндексацииЗаработка.Приказ,
			|	КоэффициентыИндексацииЗаработка.ДатаИндексации КАК ДатаИндексации,
			|	КоэффициентыИндексацииЗаработка.КоэффициентИндексации,
			|	СУММА(ВЫБОР
			|			КОГДА ГрафикиРаботы.ВидУчетаВремени = &ПоДням
			|					И ГрафикиРаботы.Дата >= КоэффициентыИндексацииЗаработка.ДатаИндексации
			|				ТОГДА ГрафикиРаботы.ОсновноеЗначение
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ДнейПослеИндексации,
			|	СУММА(ВЫБОР
			|			КОГДА ГрафикиРаботы.ВидУчетаВремени = &ПоДням
			|					И ГрафикиРаботы.Дата < КоэффициентыИндексацииЗаработка.ДатаИндексации
			|				ТОГДА ГрафикиРаботы.ОсновноеЗначение
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ДнейДоИндексации,
			|	СУММА(ВЫБОР
			|			КОГДА ГрафикиРаботы.ВидУчетаВремени = &ПоДням
			|				ТОГДА ГрафикиРаботы.ОсновноеЗначение
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК НормаДней
			|ИЗ
			|	ВТ_КоэффициентыИндексацииЗаработка КАК КоэффициентыИндексацииЗаработка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
			|		ПО (НАЧАЛОПЕРИОДА(КоэффициентыИндексацииЗаработка.ДатаИндексации, МЕСЯЦ) = ГрафикиРаботы.Месяц)
			|ГДЕ
			|	ГрафикиРаботы.ГрафикРаботы = &ОсновнойГрафикРаботыПредприятия
			|
			|СГРУППИРОВАТЬ ПО
			|	КоэффициентыИндексацииЗаработка.Физлицо,
			|	КоэффициентыИндексацииЗаработка.Организация,
			|	КоэффициентыИндексацииЗаработка.Приказ,
			|	КоэффициентыИндексацииЗаработка.ДатаИндексации,
			|	КоэффициентыИндексацииЗаработка.КоэффициентИндексации
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаИндексации УБЫВ";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ПоДням", Перечисления.ВидыУчетаВремени.ПоДням);
	
		МассивИндексируемыхПремий = Новый Массив();
		МассивИндексируемыхПремий.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
		МассивИндексируемыхПремий.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
		
		ВыборкаКоэффициентовИндексацииПремий = Запрос.Выполнить().Выбрать();
		
		// Разделим премии по периодам индексации и расставим коэффициенты		
		Пока ВыборкаКоэффициентовИндексацииПремий.Следующий() Цикл
			СтрокаВыборки = ВыборкаКоэффициентовИндексацииПремий;
			ВГраница = НаборЗаписей.Количество() - 1;
			Для Индекс = 0 По ВГраница Цикл
				СтрокаДвижений = НаборЗаписей[Индекс];
				Если МассивИндексируемыхПремий.Найти(СтрокаДвижений.ВидРасчета) <> Неопределено 
					И ЗначениеЗаполнено(СтрокаДвижений.ДатаНачалаПериодаПремии) И ЗначениеЗаполнено(СтрокаДвижений.ДатаОкончанияПериодаПремии) Тогда
					Если СтрокаВыборки.ДатаИндексации > СтрокаДвижений.ДатаНачалаПериодаПремии И
						СтрокаВыборки.ДатаИндексации < СтрокаДвижений.ДатаОкончанияПериодаПремии Тогда
						
						ДопСтрокаДвижений = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ДопСтрокаДвижений, СтрокаДвижений);
						СтрокаДвижений.КоэффициентИндексации = СтрокаВыборки.КоэффициентИндексации;
						СтрокаДвижений.ДатаОкончанияПериодаПремии = СтрокаВыборки.ДатаИндексации - 86400;
						ДопСтрокаДвижений.ДатаНачалаПериодаПремии = СтрокаВыборки.ДатаИндексации;
						
						Если СтрокаВыборки.ДнейДоИндексации <> 0 или СтрокаВыборки.НормаДней <> 0 Тогда
							СуммаКРаспределению = СтрокаДвижений.Результат;
							СтрокаДвижений.Результат = СуммаКРаспределению * СтрокаВыборки.ДнейДоИндексации / СтрокаВыборки.НормаДней;
							ДопСтрокаДвижений.Результат = СуммаКРаспределению - СтрокаДвижений.Результат;
						Иначе
							ДопСтрокаДвижений.Результат = 0;
						КонецЕсли;
								
					ИначеЕсли СтрокаВыборки.ДатаИндексации > СтрокаДвижений.ДатаНачалаПериодаПремии И
						СтрокаВыборки.ДатаИндексации > СтрокаДвижений.ДатаОкончанияПериодаПремии Тогда
						СтрокаДвижений.КоэффициентИндексации = СтрокаВыборки.КоэффициентИндексации;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
				
	КонецЕсли;
	
	// отсортируем по периодам
	ТЗСреднийЗаработок = НаборЗаписей.Выгрузить();	
	ТЗСреднийЗаработок.Сортировать("Организация, ФизЛицо, Приказ, БазовыйПериодКонец, ВидРасчета, ЧислоМесяцев, ДатаНачалаПериодаПремии");
	
	// для видов расчета среднего заработка БезИндексации установим коэффициент индексации = 1
	Если ИспользоватьПоЗаработкуБезИндексации
			Или ИспользоватьПоЗаработкуБЛБезИндексации
			Или ИспользоватьПоЗаработкуОтпускБезИндексации
			Или ИспользоватьПоПремиямБезИндексации
			Или ИспользоватьПоФиксПремиямБезИндексации Тогда
			
		Для Каждого СтрокаТЗ Из ТЗСреднийЗаработок Цикл
			Если СтрокаТЗ.ВидРасчета = ПоЗаработкуБезИндексации
					Или СтрокаТЗ.ВидРасчета = ПоЗаработкуБЛБезИндексации
					Или СтрокаТЗ.ВидРасчета = ПоЗаработкуОтпускБезИндексации
					Или СтрокаТЗ.ВидРасчета = ПоПремиямБезИндексации
					Или СтрокаТЗ.ВидРасчета = ПоФиксПремиямБезИндексации Тогда
				СтрокаТЗ.КоэффициентИндексации = 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	НаборЗаписей.Загрузить(ТЗСреднийЗаработок);
	
	//Запишем результат
	НаборЗаписей.Записать();

КонецПроцедуры

// Возвращает дату вступления в Постановлением Правительства РК от 11.07.2006 г. № 657  
// "О  внесении дополнения в постановление Правительства РК от 29.12.2000 г. № 1942 
//	«Об утверждении Инструкции о порядке исчисления средней заработной платы работников»"
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ПолучитьДатуНачалаРасчетаСреднегоЗаработкаСУчетомИндексации() Экспорт

	Возврат	'20060725';              

КонецФункции // ПолучитьДатуНачалаРасчетаСреднегоЗаработкаСУчетомИндексации()

// Возвращает дату вступления в силу Постановления Правительства РК от 29.12.2007 № 1394
// Об утверждении Единых правил исчисления средней заработной платы
//
Функция ПолучитьДатуНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням() Экспорт

	Возврат '20071229';

КонецФункции // ПолучитьДатуНачалаРасчетаТолькоПоРабочимДням()

// Рассчитывает записи из переданного набора записей
//
// Параметры: 
//  ИмяРегистра			 - имя регистра, чьи записи будут рассчитаны
//  НаборЗаписейРегистра - набор записей, которые надо рассчитать
//	НаборЗаписейРасчетСреднего
//	ГоловнаяОрганизация
//	ОбособленноеПодразделение
//	ТабличнаяЧастьДокумента
//  ОднократныйРасчетСреднего - будево. Если Истина, то при расчете выполняется 
//  					однократный расчет среднего в не зависимости от количесвта различных 
//						категорий видов расчета в наборе записей
//
// Возвращаемое значение:
//  Нет.
//
Процедура РассчитатьЗаписиРегистраРасчета(		ИмяРегистра, 
												НаборЗаписейРегистра, 
												НаборЗаписейРасчетСреднего = НеОпределено,
												ГоловнаяОрганизация = НеОпределено,
												УчетнаяПолитикаПоПерсоналу = НеОпределено,
												ОбособленноеПодразделение = НеОпределено,
												ТабличнаяЧастьДокумента = НеОпределено,
												ОднократныйРасчетСреднего = Ложь,
												Налогоплательщик = Неопределено,
												МассивИндексыСтрокТабличнойЧасти = Неопределено,
												КомментироватьРасчет = Ложь, ФормаКомментариев = НеОпределено) Экспорт

	Если НаборЗаписейРегистра.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	// здесь предполагаем, что в наборе записей не может быть записей с разными периодами регистрации
	ПериодРегистрации = НаборЗаписейРегистра[0].ПериодРегистрации;
	ТаблицаСтавокИПН  = Неопределено; // первый вызванный расчет "от обратного" сам заполнит себе ставки
	
	Регистратор = НаборЗаписейРегистра.Отбор.Регистратор.Значение;
	ИмяПВР = Метаданные.РегистрыРасчета[ИмяРегистра].ПланВидовРасчета.Имя;
	
	СчитатьСреднийЗаработок = Истина;

	Если 	ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" или 
			ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций" или
			ИмяРегистра = "УправленческиеНачисления" или 
			ИмяРегистра = "УдержанияРаботниковОрганизаций" или
			ИмяРегистра = "УправленческиеУдержания"	Тогда
		
		// получим массив видов расчета из набора записей
		ТаблицаВидовРасчета = НаборЗаписейРегистра.Выгрузить();
		ТаблицаВидовРасчета.Свернуть("ВидРасчета");
		ВидыРасчетов = ТаблицаВидовРасчета.ВыгрузитьКолонку("ВидРасчета");

		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КатегорияРасчета,
		|	ВЫБОР КОГДА СпособРасчета = &парамПустойСпособРасчета ТОГДА Ссылка ИНАЧЕ СпособРасчета КОНЕЦ Как СпособРасчета,
		|	ВЫБОР
		|		КОГДА Показатель1.Предопределенный
		|			ТОГДА Показатель1
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК Показатель1,
		|	ВЫБОР
		|		КОГДА Показатель2.Предопределенный
		|			ТОГДА Показатель2
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК Показатель2,
		|	ВЫБОР
		|		КОГДА Показатель3.Предопределенный
		|			ТОГДА Показатель3
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК Показатель3,
		|	ВЫБОР
		|		КОГДА Показатель4.Предопределенный
		|			ТОГДА Показатель4
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК Показатель4,
		|	Показатель5"
		+ ?(ИмяПВР = "УправленческиеНачисления",
		",
		|	ЗачетОтработанногоВремени","")		
		+ ?(ИмяПВР = "ОсновныеНачисленияОрганизаций", 
		",
		|	ЗачетНормыВремени,
		|	ЗачетОтработанногоВремени,
		|	УчетОтработанногоВремени", "") 		
		+ ?(ИмяПВР = "ОсновныеНачисленияОрганизаций" ИЛИ ИмяПВР = "ДополнительныеНачисленияОрганизаций",
		",
		|	ЕСТЬNULL(КомпенсируемыеВидыУдержаний.КомпенсироватьИПН, ЛОЖЬ) КАК ОтОбратногоКомпенсироватьИПН,
		|	ЕСТЬNULL(КомпенсируемыеВидыУдержаний.КомпенсироватьОПВ, ЛОЖЬ) КАК ОтОбратногоКомпенсироватьОПВ,
		|	ЕСТЬNULL(КомпенсируемыеВидыУдержаний.КомпенсироватьУдержания, ЛОЖЬ) КАК ОтОбратногоКомпенсироватьУдержания","") + "
		|ИЗ
		|	ПланВидовРасчета."+ИмяПВР+" КАК " + ИмяПВР 
		+ ?(ИмяПВР = "ОсновныеНачисленияОрганизаций" ИЛИ ИмяПВР = "ДополнительныеНачисленияОрганизаций",
		"	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							КомпенсируемыеВидыУдержаний.Ссылка КАК ВидРасчета,
		|							ВЫБОР
		|								КОГДА СУММА(ВЫБОР
		|												КОГДА КомпенсируемыеВидыУдержаний.ВидРасчета = &парамНалогиСборыОтчисленияИПН ТОГДА 1
		|												ИНАЧЕ 0 
		|								  			КОНЕЦ) <> 0 ТОГДА ИСТИНА
		|								ИНАЧЕ ЛОЖЬ
		|							КОНЕЦ КАК КомпенсироватьИПН,
		|							ВЫБОР
		|								КОГДА СУММА(ВЫБОР		
		|												КОГДА КомпенсируемыеВидыУдержаний.ВидРасчета = &парамНалогиСборыОтчисленияОПВ ТОГДА 1
		|												ИНАЧЕ 0 
		|								  			КОНЕЦ) <> 0 ТОГДА ИСТИНА
		|								ИНАЧЕ ЛОЖЬ
		|							КОНЕЦ КАК КомпенсироватьОПВ,
		|							ВЫБОР
		|								КОГДА СУММА(ВЫБОР
		|												КОГДА КомпенсируемыеВидыУдержаний.ВидРасчета <> &парамНалогиСборыОтчисленияИПН
		|										  				И КомпенсируемыеВидыУдержаний.ВидРасчета <> &парамНалогиСборыОтчисленияОПВ ТОГДА 1
		|												ИНАЧЕ 0 
		|								  			КОНЕЦ) <> 0 ТОГДА ИСТИНА
		|								ИНАЧЕ ЛОЖЬ
		|							КОНЕЦ КАК КомпенсироватьУдержания
		|					 ИЗ
		|							ПланВидовРасчета."+ИмяПВР+".КомпенсируемыеРасчетомОтОбратногоВидыУдержаний КАК КомпенсируемыеВидыУдержаний
		|					 СГРУППИРОВАТЬ ПО
		|		                     КомпенсируемыеВидыУдержаний.Ссылка) КАК КомпенсируемыеВидыУдержаний
		|		ПО "+ИмяПВР+".Ссылка = КомпенсируемыеВидыУдержаний.ВидРасчета","") + "
		|
		|ГДЕ 
		|	Ссылка В(&парамВидыРасчетов)
		|УПОРЯДОЧИТЬ ПО
		|	" + ИмяПВР + ".КатегорияРасчета.Порядок
		|
		|ИТОГИ ПО КатегорияРасчета");

		Запрос.УстановитьПараметр("парамВидыРасчетов", ВидыРасчетов);
		Запрос.УстановитьПараметр("парамПустойСпособРасчета", Перечисления.СпособыРасчетаОплатыТруда.ПустаяСсылка());
		Запрос.УстановитьПараметр("парамНалогиСборыОтчисленияИПН", Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог);
		Запрос.УстановитьПараметр("парамНалогиСборыОтчисленияОПВ", Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы);

		// получаем список категороий и способов расчета
		ВыборкаКатегорий = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

        // первая запись набора делается с пересчетом Фактического периода действия
		ТолькоЗапись = Ложь;
		
		Пока ВыборкаКатегорий.Следующий() Цикл
			
			// Получим структуру необходимых данных для расчетов текущей категории
			МассивСпособовРасчета = Новый Массив;// Массив способов расчета текущий категории
			МассивПоказателей = Новый Массив;// Массив видов показателей схем мотивации
			НормаВремени = Ложь;// Признак необходимости получения нормы времени для видов расчета
			ОтработаноВремени = Ложь;// Признак необходимости получения отработанного времени для видов расчета
			КомпенсироватьИПН = Ложь; // Признак необходимости выбора данных для расчета компенсируемого расчетом от обратного ИПН
			КомпенсироватьОПВ = Ложь; // Признак необходимости выбора данных для расчета погашаемых расчетом от обратного ОПВ
			КомпенсироватьУдержания = Ложь; // Признак необходимости выбора данных для расчета погашаемых расчетом от обратного прочих удержаний
			
			ВложеннаяВыборка = ВыборкаКатегорий.Выбрать();
			Пока ВложеннаяВыборка.Следующий() Цикл
				МассивСпособовРасчета.Добавить(ВложеннаяВыборка.СпособРасчета);

				Если ВложеннаяВыборка.Показатель1 <> Null Тогда
					МассивПоказателей.Добавить(ВложеннаяВыборка.Показатель1);
				КонецЕсли;
				Если ВложеннаяВыборка.Показатель2 <> Null Тогда
					МассивПоказателей.Добавить(ВложеннаяВыборка.Показатель2);
				КонецЕсли;
				Если ВложеннаяВыборка.Показатель3 <> Null Тогда
					МассивПоказателей.Добавить(ВложеннаяВыборка.Показатель3);
				КонецЕсли;
				Если ВложеннаяВыборка.Показатель4 <> Null Тогда
					МассивПоказателей.Добавить(ВложеннаяВыборка.Показатель4);
				КонецЕсли;
				Если ВложеннаяВыборка.Показатель5 <> Null Тогда
					МассивПоказателей.Добавить(ВложеннаяВыборка.Показатель5);
				КонецЕсли;

				Если ИмяПВР = "ОсновныеНачисленияОрганизаций" Тогда
					НормаВремени = НормаВремени ИЛИ ВложеннаяВыборка.ЗачетНормыВремени;
					ОтработаноВремени = ОтработаноВремени ИЛИ ВложеннаяВыборка.ЗачетОтработанногоВремени ИЛИ ВложеннаяВыборка.УчетОтработанногоВремени;
				КонецЕсли; 
				
				Если ИмяПВР = "ОсновныеНачисленияОрганизаций"
					 Или ИмяПВР = "ДополнительныеНачисленияОрганизаций" Тогда
					 
					КомпенсироватьИПН = КомпенсироватьИПН ИЛИ ВложеннаяВыборка.ОтОбратногоКомпенсироватьИПН;
					КомпенсироватьОПВ = КомпенсироватьОПВ ИЛИ ВложеннаяВыборка.ОтОбратногоКомпенсироватьОПВ;
					КомпенсироватьУдержания = КомпенсироватьУдержания ИЛИ ВложеннаяВыборка.ОтОбратногоКомпенсироватьУдержания;
				КонецЕсли;
				
				Если ИмяПВР = "УправленческиеНачисления" Тогда
					ОтработаноВремени = ОтработаноВремени ИЛИ ВложеннаяВыборка.ЗачетОтработанногоВремени;
				КонецЕсли;
				
			КонецЦикла;
			
			НеобходимыеДанные = ПолучитьСтруктуруНеобходимыхДанных(МассивСпособовРасчета, МассивПоказателей);
			НеобходимыеДанные.НормаВремени = НеобходимыеДанные.НормаВремени ИЛИ НормаВремени;
			НеобходимыеДанные.ОтработаноВремени = НеобходимыеДанные.ОтработаноВремени ИЛИ ОтработаноВремени;
			
			НеобходимыеДанные.ОтОбратногоКомпенсироватьИПН = НеобходимыеДанные.ОтОбратногоКомпенсироватьИПН ИЛИ КомпенсироватьИПН;
			НеобходимыеДанные.ОтОбратногоКомпенсироватьОПВ = НеобходимыеДанные.ОтОбратногоКомпенсироватьОПВ ИЛИ КомпенсироватьОПВ;
			НеобходимыеДанные.ОтОбратногоУчитыватьОПВ = КомпенсироватьИПН ИЛИ КомпенсироватьОПВ;
			НеобходимыеДанные.ОтОбратногоКомпенсироватьУдержания = НеобходимыеДанные.ОтОбратногоКомпенсироватьУдержания ИЛИ КомпенсироватьУдержания;
			
			// записываем набор перед расчетом каждой категории начислений
			НаборЗаписейРегистра.Записать(Истина, ТолькоЗапись);
			ТолькоЗапись = Истина;
	
            // если нужны данные для расчета среднего заработка
			Если СчитатьСреднийЗаработок И НеобходимыеДанные.СреднийЗаработок И (НаборЗаписейРасчетСреднего <> Неопределено) Тогда
				УчетнаяПолитика = УчетнаяПолитикаПоПерсоналу[ГоловнаяОрганизация];
				СформироватьИЗаписатьДанныеРасчетаСреднего(ИмяРегистра, Регистратор, НаборЗаписейРасчетСреднего, УчетнаяПолитика);
				Если ОднократныйРасчетСреднего Тогда
					СчитатьСреднийЗаработок = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ИсходныеДанные = ПроведениеРасчетовПолныеПрава.ПолучитьДанныеДляРасчета(ИмяРегистра, ВыборкаКатегорий.КатегорияРасчета, НеобходимыеДанные, Регистратор, ГоловнаяОрганизация, ОбособленноеПодразделение, УчетнаяПолитикаПоПерсоналу, ПериодРегистрации, , , Налогоплательщик, КомментироватьРасчет).Выбрать();
			ТаблицаИтоговыхЦелевыхРазмеровДляРасчетовОтОбратного =  Новый ТаблицаЗначений;
			Если ПериодРегистрации >= '20100101' Тогда
				Если НеобходимыеДанные.РасчетОтОбратного Тогда
					СтруктураЦелевыхРазмеровДляРасчетовОтОбратного = ПолучитьСтруктуруТаблицЦелевыхРазмеровРасчетовОтОбратного(ИсходныеДанные, НаборЗаписейРегистра.Выгрузить());
				КонецЕсли;
			КонецЕсли;
  			РассчитатьЗаписиНабора(ИсходныеДанные, НаборЗаписейРегистра, ГоловнаяОрганизация, ОбособленноеПодразделение, ТабличнаяЧастьДокумента, ТаблицаСтавокИПН, МассивИндексыСтрокТабличнойЧасти, КомментироватьРасчет, ФормаКомментариев, СтруктураЦелевыхРазмеровДляРасчетовОтОбратного);
			  
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // РассчитатьЗаписиРегистраРасчета

// Перерассчитывает записи из переданного набора записей
//
// Параметры: 
//  ИмяРегистра			 - имя регистра, чьи записи будут рассчитаны
//  НаборЗаписейРегистра - набор записей, которые надо рассчитать
//	Физлица - массив физлиц для перерасчета
//	НаборЗаписейРасчетСреднего - набор записей расчета среднего заработка
//	Организация - организацция
//	ТабличнаяЧастьДокумента - табличная часть документа по которой ведется перерасчет
//
// Возвращаемое значение:
//  Нет.
//
Процедура ПереРассчитатьЗаписиРегистраРасчета(	ИмяРегистра, 
												НаборЗаписейРегистра, 
												Физлица = НеОпределено, 
												НаборЗаписейРасчетСреднего = НеОпределено,
												ГоловнаяОрганизация = НеОпределено,
												УчетнаяПолитикаПоПерсоналу = НеОпределено,
												ОбособленноеПодразделение = НеОпределено,
												ТабличнаяЧастьДокумента = НеОпределено,
												ОднократныйРасчетСреднего = Ложь,
												Налогоплательщик = Неопределено) Экспорт

	Если	НаборЗаписейРегистра.Количество()	=	0	тогда
		Возврат;
	КонецЕсли;
	// здесь предполагаем, что в наборе записей не может быть записей с разными периодами регистрации
	ПериодРегистрации = НаборЗаписейРегистра[0].ПериодРегистрации;
	ТаблицаСтавокИПН  = Неопределено; // первый вызванный расчет "от обратного" сам заполнит себе ставки
	
	Регистратор = НаборЗаписейРегистра.Отбор.Регистратор.Значение;
	ИмяПВР = Метаданные.РегистрыРасчета[ИмяРегистра].ПланВидовРасчета.Имя;

	СчитатьСреднийЗаработок = Истина;
	
	// таблица ФизлицаДляПерерасчета
	// Список физлиц по которым необходимо выполнить перерасчет
	// Поля:
	//		ФизЛицо
	// Описание:
	// Получает список неповторяющихся физлиц по которым есть записи
	// перерасчета в одной из таблиц перерасчета - по основным или дополнительным начислениям
	//
	ФизлицаДляПерерасчетаТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Перерасчет.ФизЛицо
	|ИЗ
	|	(ВЫБРАТЬ
	|		Перерасчет.ФизЛицо КАК ФизЛицо
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
	|	
	|	ГДЕ
	|		Перерасчет.ОбъектПерерасчета = &парамРегистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Перерасчет.ФизЛицо
	|	ИЗ
	|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
	|	
	|	ГДЕ
	|		Перерасчет.ОбъектПерерасчета = &парамРегистратор) КАК Перерасчет";
	
	Если 	ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" или 
			ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций" или
			ИмяРегистра = "УправленческиеНачисления" или 
			ИмяРегистра = "УдержанияРаботниковОрганизаций" или
			ИмяРегистра = "УправленческиеУдержания"	Тогда
		
        // соответствие категории начисления и массива сособов расчета
		// для записей, которые будут перерассчитываться
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|   "+ИмяРегистра+".ВидРасчета.КатегорияРасчета Как КатегорияРасчета, 
		|	ВЫБОР КОГДА "+ИмяРегистра+".ВидРасчета.СпособРасчета = &парамПустойСпособРасчета ТОГДА "+ИмяРегистра+".ВидРасчета ИНАЧЕ "+ИмяРегистра+".ВидРасчета.СпособРасчета КОНЕЦ Как СпособРасчета,
		|	ВЫБОР
		|		КОГДА "+ИмяРегистра+".ВидРасчета.Показатель1.Предопределенный
		|			ТОГДА "+ИмяРегистра+".ВидРасчета.Показатель1
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК Показатель1,
		|	ВЫБОР
		|		КОГДА "+ИмяРегистра+".ВидРасчета.Показатель2.Предопределенный
		|			ТОГДА "+ИмяРегистра+".ВидРасчета.Показатель2
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК Показатель2,
		|	ВЫБОР
		|		КОГДА "+ИмяРегистра+".ВидРасчета.Показатель3.Предопределенный
		|			ТОГДА "+ИмяРегистра+".ВидРасчета.Показатель3
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК Показатель3,
		|	ВЫБОР
		|		КОГДА "+ИмяРегистра+".ВидРасчета.Показатель4.Предопределенный
		|			ТОГДА "+ИмяРегистра+".ВидРасчета.Показатель4
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК Показатель4,
		|	"+ИмяРегистра+".ВидРасчета.Показатель5 КАК Показатель5"
		+ ?(ИмяПВР = "УправленческиеНачисления",
		",
		|	"+ИмяРегистра+".ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени","")		
		+ ?(ИмяПВР = "ОсновныеНачисленияОрганизаций", 
		",
		|	"+ИмяРегистра+".ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
		|	"+ИмяРегистра+".ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
		|	"+ИмяРегистра+".ВидРасчета.УчетОтработанногоВремени КАК УчетОтработанногоВремени", "") 		
		+ ?(ИмяПВР = "ОсновныеНачисленияОрганизаций" ИЛИ ИмяПВР = "ДополнительныеНачисленияОрганизаций",
		",
		|	ЕСТЬNULL(КомпенсируемыеВидыУдержаний.КомпенсироватьИПН, ЛОЖЬ) КАК ОтОбратногоКомпенсироватьИПН,
		|	ЕСТЬNULL(КомпенсируемыеВидыУдержаний.КомпенсироватьОПВ, ЛОЖЬ) КАК ОтОбратногоКомпенсироватьОПВ,
		|	ЕСТЬNULL(КомпенсируемыеВидыУдержаний.КомпенсироватьУдержания, ЛОЖЬ) КАК ОтОбратногоКомпенсироватьУдержания","") + "
		|ИЗ
		|	РегистрРасчета."+ИмяРегистра+" КАК "+ИмяРегистра+"
		|
		|	" + ?(ФизЛица = Неопределено, "
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+ФизлицаДляПерерасчетаТекст+") Как ФизлицаДляПерерасчета
		|		ПО ФизлицаДляПерерасчета.ФизЛицо = "+ИмяРегистра+".ФизЛицо", "") + "
		|"
		+ ?(ИмяПВР = "ОсновныеНачисленияОрганизаций" ИЛИ ИмяПВР = "ДополнительныеНачисленияОрганизаций",
		"	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							КомпенсируемыеВидыУдержаний.Ссылка КАК ВидРасчета,
		|							ВЫБОР
		|								КОГДА СУММА(ВЫБОР
		|												КОГДА КомпенсируемыеВидыУдержаний.ВидРасчета = &парамНалогиСборыОтчисленияИПН ТОГДА 1
		|												ИНАЧЕ 0 
		|								  			КОНЕЦ) <> 0 ТОГДА ИСТИНА
		|								ИНАЧЕ ЛОЖЬ
		|							КОНЕЦ КАК КомпенсироватьИПН,
		|							ВЫБОР
		|								КОГДА СУММА(ВЫБОР		
		|												КОГДА КомпенсируемыеВидыУдержаний.ВидРасчета = &парамНалогиСборыОтчисленияОПВ ТОГДА 1
		|												ИНАЧЕ 0 
		|								  			КОНЕЦ) <> 0 ТОГДА ИСТИНА
		|								ИНАЧЕ ЛОЖЬ
		|							КОНЕЦ КАК КомпенсироватьОПВ,
		|							ВЫБОР
		|								КОГДА СУММА(ВЫБОР
		|												КОГДА КомпенсируемыеВидыУдержаний.ВидРасчета <> &парамНалогиСборыОтчисленияИПН
		|										  				И КомпенсируемыеВидыУдержаний.ВидРасчета <> &парамНалогиСборыОтчисленияОПВ ТОГДА 1
		|												ИНАЧЕ 0 
		|								  			КОНЕЦ) <> 0 ТОГДА ИСТИНА
		|								ИНАЧЕ ЛОЖЬ
		|							КОНЕЦ КАК КомпенсироватьУдержания
		|					 ИЗ
		|							ПланВидовРасчета."+ИмяПВР+".КомпенсируемыеРасчетомОтОбратногоВидыУдержаний КАК КомпенсируемыеВидыУдержаний
		|					 СГРУППИРОВАТЬ ПО
		|		                     КомпенсируемыеВидыУдержаний.Ссылка) КАК КомпенсируемыеВидыУдержаний
		|		ПО "+ИмяРегистра+".ВидРасчета = КомпенсируемыеВидыУдержаний.ВидРасчета","") + "
		|
		|ГДЕ 
		|	" + ИмяРегистра + ".Регистратор = &парамРегистратор
		|	" + ?(Физлица <> НеОпределено, "И " + ИмяРегистра + ".Физлицо В(&парамФизлица)", "") + "
		|
		|ИТОГИ ПО 
		|	"+ИмяРегистра+".ВидРасчета.КатегорияРасчета";
		Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
		Запрос.УстановитьПараметр("парамФизлица", Физлица);
    	Запрос.УстановитьПараметр("парамПустойСпособРасчета", Перечисления.СпособыРасчетаОплатыТруда.ПустаяСсылка());
		Запрос.УстановитьПараметр("парамНалогиСборыОтчисленияИПН", Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог);
		Запрос.УстановитьПараметр("парамНалогиСборыОтчисленияОПВ", Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы);
		
		ВыборкаКатегорий = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ВыборкаКатегорий.Следующий() Цикл
			
			// Получим структуру необходимых данных для расчетов текущей категории
			МассивСпособовРасчета = Новый Массив;// Массив способов расчета текущий категории
			МассивПоказателей = Новый Массив;// Массив видов показателей схем мотивации
			НормаВремени = Ложь;// Признак необходимости получения нормы времени для видов расчета
			ОтработаноВремени = Ложь;// Признак необходимости получения отработанного времени для видов расчета
			КомпенсироватьИПН = Ложь; // Признак необходимости выбора данных для расчета компенсируемого расчетом от обратного ИПН
			КомпенсироватьОПВ = Ложь; // Признак необходимости выбора данных для расчета погашаемых расчетом от обратного ОПВ
			КомпенсироватьУдержания = Ложь; // Признак необходимости выбора данных для расчета погашаемых расчетом от обратного прочих удержаний
			
			ВложеннаяВыборка = ВыборкаКатегорий.Выбрать();
			Пока ВложеннаяВыборка.Следующий() Цикл
				МассивСпособовРасчета.Добавить(ВложеннаяВыборка.СпособРасчета);

				Если ВложеннаяВыборка.Показатель1 <> Null Тогда
					МассивПоказателей.Добавить(ВложеннаяВыборка.Показатель1);
				КонецЕсли;
				Если ВложеннаяВыборка.Показатель2 <> Null Тогда
					МассивПоказателей.Добавить(ВложеннаяВыборка.Показатель2);
				КонецЕсли;
				Если ВложеннаяВыборка.Показатель3 <> Null Тогда
					МассивПоказателей.Добавить(ВложеннаяВыборка.Показатель3);
				КонецЕсли;
				Если ВложеннаяВыборка.Показатель4 <> Null Тогда
					МассивПоказателей.Добавить(ВложеннаяВыборка.Показатель4);
				КонецЕсли;
				Если ВложеннаяВыборка.Показатель5 <> Null Тогда
					МассивПоказателей.Добавить(ВложеннаяВыборка.Показатель5);
				КонецЕсли;

				Если ИмяПВР = "ОсновныеНачисленияОрганизаций" Тогда
					НормаВремени = НормаВремени ИЛИ ВложеннаяВыборка.ЗачетНормыВремени;
					ОтработаноВремени = ОтработаноВремени ИЛИ ВложеннаяВыборка.ЗачетОтработанногоВремени ИЛИ ВложеннаяВыборка.УчетОтработанногоВремени;
				КонецЕсли; 
				
				Если ИмяПВР = "ОсновныеНачисленияОрганизаций"
					 Или ИмяПВР = "ДополнительныеНачисленияОрганизаций" Тогда
					 
					КомпенсироватьИПН = КомпенсироватьИПН ИЛИ ВложеннаяВыборка.ОтОбратногоКомпенсироватьИПН;
					КомпенсироватьОПВ = КомпенсироватьОПВ ИЛИ ВложеннаяВыборка.ОтОбратногоКомпенсироватьОПВ;
					КомпенсироватьУдержания = КомпенсироватьУдержания ИЛИ ВложеннаяВыборка.ОтОбратногоКомпенсироватьУдержания;
				КонецЕсли;
				
				Если ИмяПВР = "УправленческиеНачисления" Тогда
					ОтработаноВремени = ОтработаноВремени ИЛИ ВложеннаяВыборка.ЗачетОтработанногоВремени;
				КонецЕсли;
				
			КонецЦикла;
			
			НеобходимыеДанные = ПолучитьСтруктуруНеобходимыхДанных(МассивСпособовРасчета, МассивПоказателей);
			НеобходимыеДанные.НормаВремени = НеобходимыеДанные.НормаВремени ИЛИ НормаВремени;
			НеобходимыеДанные.ОтработаноВремени = НеобходимыеДанные.ОтработаноВремени ИЛИ ОтработаноВремени;
			
			НеобходимыеДанные.ОтОбратногоКомпенсироватьИПН = НеобходимыеДанные.ОтОбратногоКомпенсироватьИПН ИЛИ КомпенсироватьИПН;
			НеобходимыеДанные.ОтОбратногоКомпенсироватьОПВ = НеобходимыеДанные.ОтОбратногоКомпенсироватьОПВ ИЛИ КомпенсироватьОПВ;
			НеобходимыеДанные.ОтОбратногоУчитыватьОПВ = КомпенсироватьИПН ИЛИ КомпенсироватьОПВ;
			НеобходимыеДанные.ОтОбратногоКомпенсироватьУдержания = НеобходимыеДанные.ОтОбратногоКомпенсироватьУдержания ИЛИ КомпенсироватьУдержания;
			
            // если нужны данные для расчета среднего заработка
			Если СчитатьСреднийЗаработок И НеобходимыеДанные.СреднийЗаработок И (НаборЗаписейРасчетСреднего <> Неопределено) Тогда
				УчетнаяПолитика = УчетнаяПолитикаПоПерсоналу[ГоловнаяОрганизация];
				СформироватьИЗаписатьДанныеРасчетаСреднего(ИмяРегистра, Регистратор, НаборЗаписейРасчетСреднего, УчетнаяПолитика);
				Если ОднократныйРасчетСреднего Тогда
					СчитатьСреднийЗаработок = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ИсходныеДанные = ПроведениеРасчетовПолныеПрава.ПолучитьДанныеДляРасчета(ИмяРегистра, ВыборкаКатегорий.КатегорияРасчета, НеобходимыеДанные, Регистратор, ГоловнаяОрганизация, ОбособленноеПодразделение, УчетнаяПолитикаПоПерсоналу, ПериодРегистрации, Истина, Физлица, Налогоплательщик).Выбрать();
			
			ТаблицаИтоговыхЦелевыхРазмеровДляРасчетовОтОбратного =  Новый ТаблицаЗначений;
			Если ПериодРегистрации >= '20100101' Тогда
				Если НеобходимыеДанные.РасчетОтОбратного Тогда
					ТаблицаИтоговыхЦелевыхРазмеровДляРасчетовОтОбратного = ПолучитьСтруктуруТаблицЦелевыхРазмеровРасчетовОтОбратного(ИсходныеДанные, НаборЗаписейРегистра.Выгрузить());
				КонецЕсли;
			КонецЕсли;
			
			// Курс результата передаем равным 1, т.к. считаем, что перерасчет доступен только для реглучета
			РассчитатьЗаписиНабора(ИсходныеДанные, НаборЗаписейРегистра, ГоловнаяОрганизация, ОбособленноеПодразделение, ТабличнаяЧастьДокумента, ТаблицаСтавокИПН, , , ,ТаблицаИтоговыхЦелевыхРазмеровДляРасчетовОтОбратного);

			// записываем набор после расчета каждой очередной категории
			НаборЗаписейРегистра.Записать(Истина, Истина);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ПерерассчитатьЗаписиРегистраРасчета() 

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным для способа расчета "от обратного"
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  ТаблицаСтавокИПН - таблица значений со ставками ИПН за текущий рассчитываемый период регистрации для расчета "от обратного"
//
// Возвращаемое значение:
//  Число - результат расчета.
//
Функция РассчитатьЗаписьРегистраРасчетаОтОбратного(СтрокаДвижений, ИсходныеДанные, ТаблицаСтавокИПН, ПериодРегистрации, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, СтруктураЦелевыхРазмеровДляРасчетовОтОбратного)

	Если ПериодРегистрации >= '20100101' Тогда
		// после 2010 - расширены возможности расчтов от обратного
		Возврат РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2010(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет, КомментарийВидаРасчета, СтруктураЦелевыхРазмеровДляРасчетовОтОбратного)
	ИначеЕсли ПериодРегистрации >= '20090101' Тогда
		// после 2009 - по фиксированной ставке хранится льготируемый доход и разрешенный вычет в регистре
		Возврат РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2009(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет, КомментарийВидаРасчета);
	ИначеЕсли ПериодРегистрации >= '20070101' Тогда
		// после 2007 - по фиксированной ставке
		Возврат РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2007(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет, КомментарийВидаРасчета);
	Иначе
		// до 2007 - по шкале
		Возврат РассчитатьЗаписьРегистраРасчетаОтОбратногоДо2007(СтрокаДвижений, ИсходныеДанные, ТаблицаСтавокИПН, ПериодРегистрации, КомментироватьРасчет, КомментарийВидаРасчета);
	КонецЕсли;

КонецФункции // РассчитатьЗаписьРегистраРасчетаОтОбратного

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным для способа расчета "от обратного"
// по правилам, действующим до 2006 года (шкала ставок ИПН)
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  ТаблицаСтавокИПН - таблица значений со ставками ИПН за текущий рассчитываемый период регистрации для расчета "от обратного"
//
// Возвращаемое значение:
//  Число - результат расчета.
//
// Расчет "от обратного" производится на основе решения уравнения:
// 
// 		Х - Кн * ИПН - Кв * ОПВ - Ку * Уд = Р,
// где
//                          ((Х + Бн - ОПВ - Льгот) * Ка - НижПред) * %Н + Фс
//		ИПН = К1н * ( К0н * -------------------------------------------------- - Н)
//                                             Ка 
//
//		Льгот = Кл * ЛБ + Кл * Х - Кл * ОПВ + (1 - Кл) * ГЛ
//
//      ОПВ = ((1- К1в)*(Х + Бв) * %В + К1в * МаксОПВ -РанееИсчислВзносы) * К2в
//      
//      Уд  = Х * %Упр + Фу + (Х - ОПВ) * %Ув + (Х - ИПН) * %Ун + (Х - ОПВ - ИПН) * %Унв
//
// Относительно Х:
//
//      ОПВ(Х) = Х * %ПФ + Фв
//
//				%ПФ = %В * К2в * (1 - К1в)
//           
//				Фв  = Бв * %В * (1 - К1в) * К2в + К1в * МаксОПВ * К2в - К2в * РанееИсчислВзносы
//
//		Льгот(Х) = Х * %Л + Фл
//
//				%Л  = Кл * (1 - %ПФ)
//
//				Фл  = Кл * (ЛБ - Фв) + (1 - Кл) * ГЛ
//
//		ИПН(Х) = Х * %НВ + Фн
//
//				%НВ = К1н * К0н * (1 - %ПФ) * (1 - Кл) * %Н
//
//                                                       К1н * К0н                     К1н * К0н 
//				Фн  = К1н * К0н * (Бн - Фв - Фл) * %Н - ------------ * НижПред * %Н + ----------- * Фс - К1н * Н
//                                                           Ка                            Ка
//
// Решение уравнения:
//               Р + К'н * Фн + К'в * Фв + Ку * Фу
//		Х	  = -----------------------------------
//               1 - К'н * %НВ - К'в * %ПФ - Ку * %У'
//
// где
//		К'н   = Кн - Ку * %Ун - Ку * %Унв
//		К'в   = Кв - Ку * %Ув - Ку * %Унв
//		%У'   = %Упр + %Ув + %Ун + %Унв
//
//
// Обозначения:
// |В формуле	|	Переменная в программе					| Комментарий
// ---------------------------------------------------------------------------------------------------------------
// |   Х		|	ИскомаяСуммаНачислений					| Сумма, которую хотят получить на руки (за минусом включаемых начислений)
// |   Кн		|	КомпенсироватьИПН						| 1, если компенсируется ИПН, 0 иначе
// |   Кв		|	КомпенсироватьОПВ						| 1, если компенсируются ОПВ, 0 иначе
// |   Ку		|	КомпенсироватьУдержания					| 1, если компенсируются удержания, 0 иначе
// |   К1н		|	ПризнакИсчисленияИПН					| 1, если с работника удерживается ИПН, 0 иначе (льготник)
// |   К0н		|	ПризнакРасчетИПНБезВозврата	 			| 1, если ИПН рассчитывается по таблице, иначе 0 - возврат ранее исчисленного налога
// |   Бн		|   БазаДляИсчисленияИПН					| Сумма облагаемого ИПН дохода (уже отняты вычеты и ОПВ)
// |   Ка		|	КоэффициентПересчета					| Коэффицент авансового удержания ИПН (в зависимости от месяца налогового периода)
// |   НижПред	|	НижнийПределШкалыИПН					| Нижний (левый) предел строки таблицы ставок ИПН
// |   %Н		|	ПроцентИПН								| Процент ИПН по текущей строке таблицы ставок ИПН
// |   Фс		| СуммаНалогаПредыдущегоПредела				| Сумма налога с предыдущей строки таблицы ставок ИПН
// |   Н		|	РанееНалогИсчисленный					| Сумма ИПН, исчисленного за предыдущие месяца налогового года
// |   К1в		| ПризнакПрименятьОграничениеПоДоходамОПВ 	| 0, если расчет ОПВ от базы (когда база < 75 МЗП), 1 если ОПВ с 75 МЗП
// |   Бв		|	БазаДляИсчисленияОПВ					| Сумма облагаемого ОПВ дохода за месяц (за счет прочих начислений, не относящихся в Х)
// |   %В		|	ПроцентОПВ								| Процент обязательных пенсионных взносов
// |   МаксОПВ	| 	МаксСуммаОПВ 							| Сумма ОПВ с 75 МЗП
// |   К2в		|	ПризнакИсчисленияОПВ					| 1, если по работнику исчисляются ОПВ, иначе 0 (пенсионер, инвалид 1, 2 гр. и т.д.)
// |   %Упр		|	ПроцентПрочихКомпенсируемыхУдержаний	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых не вычитается ОПВ и ИПН)
// |   %Ун		|	ПроцентКомпенсируемыхУдержанийБезИПН	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН)
// |   %Ув		|	ПроцентКомпенсируемыхУдержанийБезОПВ	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ОПВ)
// |   %Унв		|	ПроцентКомпенсируемыхУдержанийБезИПНиОПВ| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН и ОПВ)
// |   Фу		|	СуммаКомпенсируемыхУдержаний			| Компенсируемые удержания фиксированной суммой
// |   %ПФ		|	РезультирующийПроцентОПВ				|
// |   Фв		|	ФиксЧастьОПВ							|
// |   %НВ		|	РезультирующийПроцентИПНиОПВ			|
// |   Фн		|	ФиксЧастьИПН							|
// |   Кл		|	ПризнакПримененияЛьготы					| 1, если льгота в пределах льготируемого дохода, иначе 0 - в пределах годовой льготы ГЛ
// |   %Л		|	РезультирующийПроцентЛьготы				|
// |   Фл		|	ФиксЧастьЛьготы							|
// |   ЛБ		|	ЛьготируемаяБазаДляИсчисленияИПН		| База исчисления ИПН, к которой применяется льгота
// |   ГЛ		|	ПрименяемаяЛьготаЗаГод					| Годовой размер льготы
// 
Функция РассчитатьЗаписьРегистраРасчетаОтОбратногоДо2007(СтрокаДвижений, ИсходныеДанные, ТаблицаСтавокИПН, ПериодРегистрации, КомментироватьРасчет, КомментарийВидаРасчета)
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	СпособРасчета = ИсходныеДанные.СпособРасчета;
	Результат = 0;
	ЦелевойРазмер = 0;
	
	РезультатПолучен = Ложь;
	
	ЭтоПВРОсновныеНачисления = (ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	
	// Если это расчет "от обратного" для основного начисления, то не учитываем прочие суммы доходов, т.к.
	// налоги/взносы будут компенсироваться только для самого основного начисления и включаемых в него видов расчета.
	// Если идет расчет "от обратного" для прочих доплат, то их считаем таким образом, чтобы компенсировать только 
	// ту часть налога/взноса, которая начислена на сумму доплаты.
	Если ЭтоПВРОсновныеНачисления Тогда
		Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
			ОсновноеНачисление = Истина;
		Иначе
			ОсновноеНачисление = Ложь;
		КонецЕсли;
	Иначе
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// Если до этого никаких вообще начислений не было, то в любом случае считаем как "основное начисление"
	Если ИсходныеДанные.ОбщаяСуммаНачислений = 0 Тогда
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// определим целевой размер
	ЦелевойРазмер = ПолучитьЦелевойРазмерНачисленияОтОбратного(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета);

	// запомним целевой размер текущей строки расчета
	Если ЭтоПВРОсновныеНачисления Тогда
	
		СтрокаДвижений.ДополнительныеДанные = ЦелевойРазмер;
		
		Если ОсновноеНачисление Тогда
			// Увеличим целевой размер на размеры всех других расчетов "от обратного", введенных в текущем месяце,
			// их фактические результаты потом будут вычтены в конец расчета.
			ЦелевойРазмер = ЦелевойРазмер + ИсходныеДанные.РасчетОтОбратногоДополнительныеДанные;
		КонецЕсли;
			
	КонецЕсли;
	
	Если ТаблицаСтавокИПН = Неопределено Тогда
		
		// это первый вызов расчета от обратного - выберем сведения о ставках ИПН для периода регистрации
		// и вернем таблицу ставок в вызывающую процедуру через параметр, чтобы в следующий раз не выбирать
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("парамВидСтавокИПНиСН", Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН);
		Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	&парамПериодРегистрации КАК Период,
		|	ШкалаСтавокИПН.НомерСтрокиСтавок,
		|	ШкалаСтавокИПН.СуммаДоходаС,
		|	ШкалаСтавокИПН.СуммаДоходаПо,
		|	ШкалаСтавокИПН.Ставка,
		|	ШкалаСтавокИПН.СуммаНалогаПредыдущегоПредела
		|ИЗ
		|	РегистрСведений.СведенияОСтавкахИПНиСН.СрезПоследних(
		|			&парамПериодРегистрации,
		|			ВидСтавокИПНиСН = &парамВидСтавокИПНиСН) КАК ШкалаСтавокИПН
		|УПОРЯДОЧИТЬ ПО
		|	ШкалаСтавокИПН.СуммаДоходаС
		|";
		
		ТаблицаСтавокИПН = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Если ТаблицаСтавокИПН.Количество() = 0 Тогда
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Не определена таблица ставок ИПН ", СтатусСообщения.Важное);
		Возврат 0;
	КонецЕсли;
	
	// Признаки компенсирования расчетом "от обратного" различных удержаний
	КомпенсироватьИПН 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, 1, 0);
	КомпенсироватьОПВ 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ, 1, 0);
	КомпенсироватьУдержания 	= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания, 1, 0);
	
	Если КомпенсироватьИПН <> 0 Или КомпенсироватьОПВ <> 0 Тогда
		Если Не ИсходныеДанные.ОтражениеПоПериодуРегистрации Тогда
			Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": расчет невозможен, т.к. в учетной политике по налоговому учету не установлен признак отражения налогов и взносов по периоду регистрации! ", СтатусСообщения.Важное);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Данные для расчета ИПН 
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		ПризнакПримененияЛьготы				= ?(ИсходныеДанные.ПризнакПримененияЛьготы > 0, 1, 0);
		ПризнакИсчисленияИПН 				= 1 - ПризнакПримененияЛьготы;
		БазаДляИсчисленияИПН 				= ИсходныеДанные.ОблагаемыйДоходЗаГод - ИсходныеДанные.НалоговыйВычетЗаГод - ИсходныеДанные.ИсчисленныеВзносыЗаГод;
		ЛьготируемаяБазаДляИсчисленияИПН	= ИсходныеДанные.ЛьготируемаяБазаДляИсчисленияИПН;
		ОблагаемыйИПНДоходЗаМесяц			= ИсходныеДанные.ОблагаемыйДоходЗаМесяц;
		РанееНалогИсчисленный 				= ИсходныеДанные.РанееНалогИсчисленный;
		ПрименяемаяЛьготаЗаГод 				= ИсходныеДанные.ПрименяемаяЛьготаЗаГод;
		КоэффициентПересчета 				= ИсходныеДанные.КоэффициентПересчета;
		СреднемесячныйРазмерМЗПЗаКвартал 	= ИсходныеДанные.СреднемесячныйРазмерМЗПЗаКвартал;
		ПолученныйДоходЗаКвартал 			= ИсходныеДанные.ПолученныйДоходЗаКвартал;
		РегистрировалсяДоходЗаКвартал 		= Мин(ИсходныеДанные.РегистрировалсяДоходЗаКвартал + 1, Месяц(ПериодРегистрации) - Месяц(НачалоКвартала(ПериодРегистрации)) + 1); // учтем еще и сам месяц начисления "от обратного"
		ПроверятьНаНулевуюСтавку			= ИсходныеДанные.ПрименятьНулевуюСтавку;
		
		Если Месяц(ПериодРегистрации) > 3 Тогда
			// если за предыдущие кварталы среднемесячный доход превышал МЗП, то на нулевую ставку уже не проверяем
			НомерПредыдущегоКвартала = (Месяц(НачалоКвартала(ПериодРегистрации)) - 1) / 3;
			Для НомерКвартала = 1 По НомерПредыдущегоКвартала Цикл
				Если ИсходныеДанные["ПрименятьНулевуюСтавкуКв" + Строка(НомерКвартала)] = 0 Тогда
					ПроверятьНаНулевуюСтавку = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;		
	Иначе
		// Если компенсация ИПН не нужна, то все по нулям
		ПризнакИсчисленияИПН 				= 0;
		ПризнакПримененияЛьготы				= 0;
		БазаДляИсчисленияИПН 				= 0;
		ЛьготируемаяБазаДляИсчисленияИПН	= 0;
		ОблагаемыйИПНДоходЗаМесяц			= 0;
		РанееНалогИсчисленный 				= 0;
		ПрименяемаяЛьготаЗаГод 				= 0;
		КоэффициентПересчета 				= 1;
		СреднемесячныйРазмерМЗПЗаКвартал 	= 0;
		ПолученныйДоходЗаКвартал 			= 0;
		РегистрировалсяДоходЗаКвартал		= 1;
		ПроверятьНаНулевуюСтавку			= Ложь;
	КонецЕсли;
	
	// Данные для расчета ОПВ
	Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
		ПризнакИсчисленияОПВ 				= ?(ИсходныеДанные.ПризнакИсчисленияОПВ, 1, 0);
		БазаДляИсчисленияОПВ 				= ИсходныеДанные.БазаДляИсчисленияОПВ;
		РазмерОграниченияПоДоходамОПВ 		= ИсходныеДанные.РазмерОграниченияПоДоходамОПВ;
		РанееВзносыИсчисленные 				= ИсходныеДанные.РанееВзносыИсчисленные;
	Иначе
		// Если учет ОПВ не нужен, то все по нулям
		ПризнакИсчисленияОПВ 				= 0;
		БазаДляИсчисленияОПВ 				= 0;
		РазмерОграниченияПоДоходамОПВ 		= 0;
		РанееВзносыИсчисленные 				= 0;
	КонецЕсли;
	
	// Данные по прочим погашаемым удержаниям
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		СуммаКомпенсируемыхУдержаний			= ИсходныеДанные.СуммаКомпенсируемыхУдержаний;
		ПроцентКомпенсируемыхУдержанийБезИПН	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПН / 100;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезОПВ / 100;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ / 100;
		ПроцентПрочихКомпенсируемыхУдержаний		= ИсходныеДанные.ПроцентПрочихКомпенсируемыхУдержаний / 100;
	Иначе
		// Если удержания не компенсируются, то все по нулям
		СуммаКомпенсируемыхУдержаний			= 0;
		ПроцентКомпенсируемыхУдержанийБезИПН	= 0;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= 0;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= 0;
		ПроцентПрочихКомпенсируемыхУдержаний		= 0;
	КонецЕсли;
	
	// Сумма, которую надо начислить, чтобы с учетом включаемых начислений получить нужную сумму на руки
	ИскомаяСуммаНачислений = ЦелевойРазмер - ИсходныеДанные.СуммаВключаемыхНачислений;
	
	// округлим искомую сумму
	ИскомаяСуммаНачислений = ОбщегоНазначения.ОкруглитьЧисло(ИскомаяСуммаНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
	
	Если (ПризнакИсчисленияИПН * КомпенсироватьИПН = 0)
		  И (ПризнакИсчисленияОПВ * КомпенсироватьОПВ = 0)
		  И КомпенсироватьУдержания = 0 Тогда
		 
		// Считать нечего, т.к. либо ничего не компенсируем (что ошибка) либо не положено ничего считать 
		Если КомпенсироватьИПН = 0 И КомпенсироватьОПВ = 0 И КомпенсироватьУдержания = 0 Тогда
			Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Не определены компенсируемые удержания ", СтатусСообщения.Важное);
		КонецЕсли;
		
		Возврат ИскомаяСуммаНачислений;		
		
	КонецЕсли;
	
	ПроцентОПВ = ИсходныеДанные.ПроцентОПВ; // ставка ОПВ
	ПризнакРасчетИПНБезВозврата = 1; // если 0, то нужно вернуть РанееНалогИсчисленный
	МаксСуммаОПВ = ПроцентОПВ * РазмерОграниченияПоДоходамОПВ; // ОПВ с макс суммы облагаемого дохода
	ПризнакПрименятьОграничениеПоДоходамОПВ = 0; // если 1, то применяется ограничение по доходам, облагаемым ОПВ
	НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
	
	// Если это расчет "от обратного" для доплат, то определяем сумму налога/взноса с уже начисленных доходов
	Если Не ОсновноеНачисление Тогда
	
		// Расчет ОПВ
		ИсчисленныеОПВ = 0;
		Если ПризнакИсчисленияОПВ <> 0 Тогда
			ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ) - РанееВзносыИсчисленные;
		КонецЕсли;
		
		ИсчисленныеОПВ = ОбщегоНазначения.ОкруглитьЧисло(ИсчисленныеОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Расчет ИПН 
		ИсчисленныйИПН = 0;		
		ОблагаемаяИПНСумма = КоэффициентПересчета * (БазаДляИсчисленияИПН - ИсчисленныеОПВ - Мин(Макс(ЛьготируемаяБазаДляИсчисленияИПН - ПризнакПримененияЛьготы * ИсчисленныеОПВ, 0), ПрименяемаяЛьготаЗаГод));
		Если ОблагаемаяИПНСумма > 0 Тогда
			Если ОблагаемаяИПНСумма <= 12 * СреднемесячныйРазмерМЗПЗаКвартал
				 И ОблагаемаяИПНСумма / РегистрировалсяДоходЗаКвартал  <= СреднемесячныйРазмерМЗПЗаКвартал
				 И ПроверятьНаНулевуюСтавку Тогда
				
				// Возврат ранее исчисленного налога
				ИсчисленныйИПН = - РанееНалогИсчисленный;
				 
			Иначе
				Для ИндексСтавки = 0 По ТаблицаСтавокИПН.Количество() - 1 Цикл
					Если ОблагаемаяИПНСумма >= ТаблицаСтавокИПН[ИндексСтавки].СуммаДоходаС 
						 И ОблагаемаяИПНСумма <= ТаблицаСтавокИПН[ИндексСтавки].СуммаДоходаПо Тогда
						 
						СтрокаСтавок = ТаблицаСтавокИПН[ИндексСтавки];
						
						ИсчисленныйИПН = (ОблагаемаяИПНСумма - СтрокаСтавок.СуммаДоходаС) * СтрокаСтавок.Ставка / 100 + СтрокаСтавок.СуммаНалогаПредыдущегоПредела;
						ИсчисленныйИПН = Окр(ИсчисленныйИПН / КоэффициентПересчета, 2) - РанееНалогИсчисленный;
						 
						Прервать;
					КонецЕсли;
				КонецЦикла;		
			КонецЕсли;
		КонецЕсли;
		
		ИсчисленныйИПН = ОбщегоНазначения.ОкруглитьЧисло(ИсчисленныйИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// При расчете "от обратного" для доплат ищем такую сумму, чтобы после удержания налога/взноса получил на руки 
		// такую же сумму, какую получил бы без доплаты, + чистый размер самой доплаты		
		СуммаНаРукиСПрочихНачислений = (ИсходныеДанные.ОбщаяСуммаНачислений - ИсходныеДанные.СуммаВключаемыхНачислений) - ИсчисленныеОПВ - ИсчисленныйИПН;
		ИскомаяСуммаНачислений = ИскомаяСуммаНачислений + СуммаНаРукиСПрочихНачислений;
		БазаДляИсчисленияОПВ = - ИсходныеДанные.НеОблагаемыйОПВДоходЗаМесяц + ИсходныеДанные.ПрочиеДоходыДляОПВ;
		БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц - ИсходныеДанные.НеОблагаемыйИПНДоходЗаМесяц; // т.к. доход за месяц полностью будет входить в результат решения уравнения
		Если ПризнакПримененияЛьготы = 1 Тогда
			ЛьготируемаяБазаДляИсчисленияИПН = ЛьготируемаяБазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц;
		КонецЕсли;
	
		// чтобы из-за того, если для доплаты не стоит компенсация ОПВ, не удержалось ОПВ с основных начислений
		// или из-за того, что рассчитываемый вид сам по себе не облагается ОПВ,
		// включим его дополнительно как компенсируемые удержания суммой
		Если (КомпенсироватьОПВ = 0 ИЛИ ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом) И ИсчисленныеОПВ <> 0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
			КомпенсироватьУдержания = 1;
			Если ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
				ПризнакИсчисленияОПВ = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если КомпенсироватьИПН = 0 И ИсчисленныйИПН <>0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныйИПН;
			КомпенсироватьУдержания = 1;
		КонецЕсли;
		
	Иначе
		// если основное начисление (за отработанное время)
		БазаДляИсчисленияОПВ = ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений + ИсходныеДанные.ПрочиеДоходыДляОПВ;
		БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц + ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений;
		
		Если ПризнакИсчисленияОПВ = 1 Тогда
			// если данный вид ОПВ не облагается, но база для исчисления с других видов есть
			ПризнакИсчисленияОПВ = ?(ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом, 1, 0);
			ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ) - РанееВзносыИсчисленные;
			Если ПризнакИсчисленияОПВ = 0 И ИсчисленныеОПВ <> 0 Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
				СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
				КомпенсироватьУдержания = 1;
			КонецЕсли;			
		КонецЕсли;
		
		Если ПризнакПримененияЛьготы = 1 Тогда
			ЛьготируемаяБазаДляИсчисленияИПН = ЛьготируемаяБазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц + ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений;
		КонецЕсли;
	КонецЕсли;
	
	// Определим первоначально строку ставок ИПН 
	ПроцентИПН = ТаблицаСтавокИПН.Итог("Ставка") / ТаблицаСтавокИПН.Количество() / 100; // усредненный процент ИПН для первого приближения
	ОблагаемаяИПНСумма = Макс(ПризнакИсчисленияИПН * (1 + ПроцентИПН - ПризнакИсчисленияОПВ * ПроцентОПВ) * (БазаДляИсчисленияИПН + ИскомаяСуммаНачислений - Макс(ЛьготируемаяБазаДляИсчисленияИПН, 0)) * КоэффициентПересчета, 0);
	
	ИндексСтавки = 0;
	Для ИндексСтавки = 0 По ТаблицаСтавокИПН.Количество() - 1 Цикл
		Если ОблагаемаяИПНСумма >= ТаблицаСтавокИПН[ИндексСтавки].СуммаДоходаС 
			 И ОблагаемаяИПНСумма <= ТаблицаСтавокИПН[ИндексСтавки].СуммаДоходаПо Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ШагИтерации = 0;	
	МаксимальноеЧислоШагов = 100;
	
	Пока Не РезультатПолучен И (ШагИтерации < МаксимальноеЧислоШагов) Цикл
		
		ШагИтерации = ШагИтерации + 1;
		РезультатПолучен = Истина;		
		
		// Вычисляем вспомогательные переменные
		ПроцентИПН 				 = ТаблицаСтавокИПН[ИндексСтавки].Ставка / 100;
		НижнийПределШкалыИПН	 = ТаблицаСтавокИПН[ИндексСтавки].СуммаДоходаС;
		СуммаНалогаПредыдущегоПредела = ТаблицаСтавокИПН[ИндексСтавки].СуммаНалогаПредыдущегоПредела;
		
		РезультирующийПроцентОПВ = ПроцентОПВ * ПризнакИсчисленияОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ);
		
		ФиксЧастьОПВ			 = ПризнакИсчисленияОПВ * (БазаДляИсчисленияОПВ * ПроцентОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ) + 
														   ПризнакПрименятьОграничениеПоДоходамОПВ * МаксСуммаОПВ - РанееВзносыИсчисленные);
		
														   
		РезультирующийПроцентЛьготы = ПризнакПримененияЛьготы * (1 - РезультирующийПроцентОПВ);
		
		ФиксЧастьЛьготы				= ПризнакПримененияЛьготы * (ЛьготируемаяБазаДляИсчисленияИПН - ФиксЧастьОПВ) + 
										(1 - ПризнакПримененияЛьготы) * ПрименяемаяЛьготаЗаГод;
														   
										
		РезультирующийПроцентИПНиОПВ = ПризнакИсчисленияИПН * ПризнакРасчетИПНБезВозврата * (1 - РезультирующийПроцентОПВ) * 
											(1 - ПризнакПримененияЛьготы) * ПроцентИПН;
											
		ФиксЧастьИПН			= ПризнакИсчисленияИПН * ПризнакРасчетИПНБезВозврата *
								  		( (БазаДляИсчисленияИПН - ФиксЧастьОПВ - ФиксЧастьЛьготы) * ПроцентИПН -
								  		   НижнийПределШкалыИПН * ПроцентИПН / КоэффициентПересчета +
								  		   СуммаНалогаПредыдущегоПредела / КоэффициентПересчета
								  		) -  ПризнакИсчисленияИПН * РанееНалогИсчисленный;
		
		КоэффициентИПН = КомпенсироватьИПН - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		КоэффициентОПВ = КомпенсироватьОПВ - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		ПроцентКомпенсируемыхУдержаний = ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ + 
											ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + ПроцентПрочихКомпенсируемыхУдержаний;
								  		
		Числитель = (ИскомаяСуммаНачислений + 
					КоэффициентИПН * ФиксЧастьИПН +
					КоэффициентОПВ * ФиксЧастьОПВ + 
					КомпенсироватьУдержания * СуммаКомпенсируемыхУдержаний);
					
		Знаменатель = (1 - 
	     				КоэффициентИПН * РезультирующийПроцентИПНиОПВ -
					   	КоэффициентОПВ * РезультирующийПроцентОПВ - 
						КомпенсироватьУдержания * ПроцентКомпенсируемыхУдержаний);
								  		
		Результат = ?(Знаменатель <> 0, Числитель / Знаменатель, 0);
		Результат = ОбщегоНазначения.ОкруглитьЧисло(Результат, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Проверим граничные условия, при которых делали расчет
		РезультатОПВ = ПризнакИсчисленияОПВ * ПроцентОПВ * (БазаДляИсчисленияОПВ + Результат);

		Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
			// Наличие облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияОПВ И ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ОПВ исчисляются
					
					Если БазаДляИсчисленияОПВ + Результат > 0 Тогда
						Если ПризнакИсчисленияОПВ <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 1;
					Иначе
						Если ПризнакИсчисленияОПВ <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если РезультатОПВ > МаксСуммаОПВ Тогда
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 1;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		РезультатОПВ = РезультатОПВ - РанееВзносыИсчисленные;
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда 
			// Учтем граничные условия, возникающие при расчете ИПН
			
			// Льготы по ИПН
			ОблагаемаяИПНСумма = 0;
			Если РезультатПолучен Тогда
				НоваяЛьготируемаяБазаДляИсчисленияИПН = Макс(Результат * РезультирующийПроцентЛьготы + ФиксЧастьЛьготы, 0);
				ОблагаемаяИПНСумма = (БазаДляИсчисленияИПН + Результат - РезультатОПВ - НоваяЛьготируемаяБазаДляИсчисленияИПН) * КоэффициентПересчета;
				Если ОблагаемаяИПНСумма > 0 Тогда
					Если ПризнакИсчисленияИПН <> 1 Тогда
						// Ранее налог не рассчитывался, теперь же появилась облагаемая база - нужен еще один шаг цикла
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакИсчисленияИПН = 1;
				Иначе
					Если ПризнакИсчисленияИПН <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакИсчисленияИПН = 0;
				КонецЕсли;
				
				// Размер применяемой льготы
				Если (НоваяЛьготируемаяБазаДляИсчисленияИПН <> 0 ИЛИ ПрименяемаяЛьготаЗаГод <> 0)
						И НоваяЛьготируемаяБазаДляИсчисленияИПН <> ПрименяемаяЛьготаЗаГод Тогда
					Если НоваяЛьготируемаяБазаДляИсчисленияИПН > ПрименяемаяЛьготаЗаГод Тогда
						// необходимо применять льготу в пределах льготируемого дохода
						Если ПризнакПримененияЛьготы <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакПримененияЛьготы = 0;
					Иначе
						// ранее льгота применялась в размере годовой, надо в пределах льготируемого дохода
						Если ПризнакПримененияЛьготы <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакПримененияЛьготы = 1;
					КонецЕсли;
				КонецЕсли;
				
				ОблагаемаяИПНСумма = Макс(ОблагаемаяИПНСумма, 0);
			КонецЕсли;
				
			// Соответствие примененной шкале
			Если РезультатПолучен Тогда
				ВремИндекс = 0;
				Для ВремИндекс = 0 По ТаблицаСтавокИПН.Количество() - 1 Цикл
					Если ОблагаемаяИПНСумма >= ТаблицаСтавокИПН[ВремИндекс].СуммаДоходаС
						 И ОблагаемаяИПНСумма <= ТаблицаСтавокИПН[ВремИндекс].СуммаДоходаПо Тогда
						
						Если ВремИндекс <> ИндексСтавки Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ИндексСтавки = ВремИндекс;
						
						Прервать;
						
					КонецЕсли;
				КонецЦикла;			
			КонецЕсли;

			// Проверка на применение нулевой ставки
			Если РезультатПолучен И ПроверятьНаНулевуюСтавку Тогда
				Если ОблагаемаяИПНСумма <= 12 * СреднемесячныйРазмерМЗПЗаКвартал
					 И (ПолученныйДоходЗаКвартал + Результат) / РегистрировалсяДоходЗаКвартал  <= СреднемесячныйРазмерМЗПЗаКвартал Тогда
					
					Если ПризнакРасчетИПНБезВозврата <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетИПНБезВозврата = 0;
					
				Иначе				
					Если ПризнакРасчетИПНБезВозврата <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетИПНБезВозврата = 1;
					
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не РезультатПолучен Тогда
		// вышли из цикла по превышению макс допустимого числа шагов
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Превышено допустимо число шагов итерации ", СтатусСообщения.Важное);
	Иначе
		// Из-за округления могут получиться лишние тиынки
		ИсчисленныйИПН = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентИПНиОПВ + ФиксЧастьИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеОПВ = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентОПВ + ФиксЧастьОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеУдержания = ОбщегоНазначения.ОкруглитьЧисло(КомпенсироватьУдержания * (Результат * ПроцентПрочихКомпенсируемыхУдержаний + 
												(Результат - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезОПВ +
												(Результат - ИсчисленныйИПН) * ПроцентКомпенсируемыхУдержанийБезИПН +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + 
												СуммаКомпенсируемыхУдержаний), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		ОбщаяСуммаКомпенсируемыхУдержаний = ИсчисленныйИПН + ИсчисленныеОПВ + ИсчисленныеУдержания;
		Разность = ИскомаяСуммаНачислений - (Результат - ОбщаяСуммаКомпенсируемыхУдержаний);
		
		Если Разность > -1 И Разность < 1 Тогда
			Результат = Результат + Разность;
		КонецЕсли;
		
		Если Не ОсновноеНачисление Тогда
			Результат = Результат - ИсходныеДанные.ОбщаяСуммаНачислений; 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ?(РезультатПолучен, Результат, 0);
	
КонецФункции  // РассчитатьЗаписьРегистраРасчетаОтОбратногоДо2007

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным для способа расчета "от обратного"
// по правилам, действующим с 2007 года (фикс. ставка ИПН)
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  ТаблицаСтавокИПН - таблица значений со ставками ИПН за текущий рассчитываемый период регистрации для расчета "от обратного"
//
// Возвращаемое значение:
//  Число - результат расчета.
//
// Расчет "от обратного" производится на основе решения уравнения:
// 
// 		Х - Кн * ИПН - Кв * ОПВ - Ку * Уд = Р,
// где
//                    
//		ИПН = К1н * (К0н * (Х + Бн - ОПВ - Льгот) * %Н - Н)
//
//		Льгот = Кл * ЛБ + Кл * Х - Кл * ОПВ + (1 - Кл) * ГЛ - РанееПримЛьгота
//
//      ОПВ = ((1- К1в)*(Х + Бв) * %В + К1в * МаксОПВ -РанееИсчислВзносы) * К2в
//      
//      Уд  = Х * %Упр + Фу + (Х - ОПВ) * %Ув + (Х - ИПН) * %Ун + (Х - ОПВ - ИПН) * %Унв
//
// Относительно Х:
//
//      ОПВ(Х) = Х * %ПФ + Фв
//
//				%ПФ = %В * К2в * (1 - К1в)
//           
//				Фв  = Бв * %В * (1 - К1в) * К2в + К1в * МаксОПВ * К2в - К2в * РанееИсчислВзносы
//
//		Льгот(Х) = Х * %Л + Фл
//
//				%Л  = Кл * (1 - %ПФ)
//
//				Фл  = Кл * (ЛБ - Фв) + (1 - Кл) * ГЛ - РанееПримЛьгота
//
//		ИПН(Х) = Х * %НВ + Фн
//
//				%НВ = К1н * К0н * %Н * (1 - %ПФ - %Л)
//
//				Фн  = К1н * К0н * %Н * (Бн - Фв - Фл) - К1н * Н
//
// Решение уравнения:
//               Р + К'н * Фн + К'в * Фв + Ку * Фу
//		Х	  = -----------------------------------
//               1 - К'н * %НВ - К'в * %ПФ - Ку * %У'
//
// где
//		К'н   = Кн - Ку * %Ун - Ку * %Унв
//		К'в   = Кв - Ку * %Ув - Ку * %Унв
//		%У'   = %Упр + %Ув + %Ун + %Унв
//
//
// Обозначения:
// |В формуле	|	Переменная в программе					| Комментарий
// ---------------------------------------------------------------------------------------------------------------
// |   Х		|	ИскомаяСуммаНачислений					| Сумма, которую хотят получить на руки (за минусом включаемых начислений)
// |   Кн		|	КомпенсироватьИПН						| 1, если компенсируется ИПН, 0 иначе
// |   Кв		|	КомпенсироватьОПВ						| 1, если компенсируются ОПВ, 0 иначе
// |   Ку		|	КомпенсироватьУдержания					| 1, если компенсируются удержания, 0 иначе
// |   К1н		|	ПризнакИсчисленияИПН					| 1, если с работника удерживается ИПН, 0 иначе (льготник)
// |   К0н		|	ПризнакРасчетаИПН			 			| 1, если ИПН рассчитывается, иначе 0 - налог = 0 (обл база за месяц < 0)
// |   Бн		|   БазаДляИсчисленияИПН					| Сумма облагаемого ИПН дохода за месяц (уже отняты вычеты и ОПВ)
// |   %Н		|	ПроцентИПН								| Процент ИПН
// |   Н		|	РанееНалогИсчисленный					| Сумма ИПН, исчисленного за текущий месяц др. документами (пока по выборке получается, что всегда = 0!!!)
// |   К1в		| ПризнакПрименятьОграничениеПоДоходамОПВ 	| 0, если расчет ОПВ от базы (когда база < 75 МЗП), 1 если ОПВ с 75 МЗП
// |   Бв		|	БазаДляИсчисленияОПВ					| Сумма облагаемого ОПВ дохода за месяц (за счет прочих начислений, не относящихся в Х)
// |   %В		|	ПроцентОПВ								| Процент обязательных пенсионных взносов
// |   МаксОПВ	| 	МаксСуммаОПВ 							| Сумма ОПВ с 75 МЗП
// |   К2в		|	ПризнакИсчисленияОПВ					| 1, если по работнику исчисляются ОПВ, иначе 0 (пенсионер, инвалид 1, 2 гр. и т.д.)
// |   %Упр		|	ПроцентПрочихКомпенсируемыхУдержаний	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых не вычитается ОПВ и ИПН)
// |   %Ун		|	ПроцентКомпенсируемыхУдержанийБезИПН	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН)
// |   %Ув		|	ПроцентКомпенсируемыхУдержанийБезОПВ	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ОПВ)
// |   %Унв		|	ПроцентКомпенсируемыхУдержанийБезИПНиОПВ| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН и ОПВ)
// |   Фу		|	СуммаКомпенсируемыхУдержаний			| Компенсируемые удержания фиксированной суммой
// |   %ПФ		|	РезультирующийПроцентОПВ				|
// |   Фв		|	ФиксЧастьОПВ							|
// |   %НВ		|	РезультирующийПроцентИПНиОПВ			|
// |   Фн		|	ФиксЧастьИПН							|
// |   Кл		|	ПризнакПримененияЛьготы					| 1, если льгота в пределах льготируемого дохода, иначе 0 - в пределах годовой льготы ГЛ
// |   %Л		|	РезультирующийПроцентЛьготы				|
// |   Фл		|	ФиксЧастьЛьготы							|
// |   ЛБ		|	ЛьготируемаяБазаДляИсчисленияИПН		| База исчисления ИПН, к которой применяется льгота
// |   ГЛ		|	ПрименяемаяЛьготаЗаГод					| Годовой размер льготы
// 
Функция РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2007(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет, КомментарийВидаРасчета)
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	СпособРасчета = ИсходныеДанные.СпособРасчета;
	Результат = 0;
	ЦелевойРазмер = 0;
	
	РезультатПолучен = Ложь;
	
	ЭтоПВРОсновныеНачисления = (ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	
	// Если это расчет "от обратного" для основного начисления, то не учитываем прочие суммы доходов, т.к.
	// налоги/взносы будут компенсироваться только для самого основного начисления и включаемых в него видов расчета.
	// Если идет расчет "от обратного" для прочих доплат, то их считаем таким образом, чтобы компенсировать только 
	// ту часть налога/взноса, которая начислена на сумму доплаты.
	Если ЭтоПВРОсновныеНачисления Тогда
		Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
			ОсновноеНачисление = Истина;
		Иначе
			ОсновноеНачисление = Ложь;
		КонецЕсли;
	Иначе
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// Если до этого никаких вообще начислений не было, то в любом случае считаем как "основное начисление"
	Если ИсходныеДанные.ОбщаяСуммаНачислений = 0 Тогда
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// определим целевой размер
	ЦелевойРазмер = ПолучитьЦелевойРазмерНачисленияОтОбратного(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета);
	
	// запомним целевой размер текущей строки расчета
	Если ЭтоПВРОсновныеНачисления Тогда
		
		СтрокаДвижений.ДополнительныеДанные = ЦелевойРазмер;
		
		Если ОсновноеНачисление Тогда
			// Увеличим целевой размер на размеры всех других расчетов "от обратного", введенных в текущем месяце,
			// их фактические результаты потом будут вычтены в конец расчета.
			ЦелевойРазмер = ЦелевойРазмер + ИсходныеДанные.РасчетОтОбратногоДополнительныеДанные;
		КонецЕсли;
		
	КонецЕсли;
	
	// Признаки компенсирования расчетом "от обратного" различных удержаний
	КомпенсироватьИПН 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, 1, 0);
	КомпенсироватьОПВ 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ, 1, 0);
	КомпенсироватьУдержания 	= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания, 1, 0);
	
	Если КомпенсироватьИПН <> 0 Или КомпенсироватьОПВ <> 0 Тогда
		Если Не ИсходныеДанные.ОтражениеПоПериодуРегистрации Тогда
			Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": расчет невозможен, т.к. в учетной политике по налоговому учету не установлен признак отражения налогов и взносов по периоду регистрации! ", СтатусСообщения.Важное);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Данные для расчета ИПН 
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		ПризнакПримененияЛьготы				= ?(ИсходныеДанные.ПризнакПримененияЛьготы > 0, 1, 0);
		ПризнакИсчисленияИПН 				= 1 - ПризнакПримененияЛьготы;
		БазаДляИсчисленияИПНЗаГод			= ИсходныеДанные.ОблагаемыйДоходЗаГод - ИсходныеДанные.НалоговыйВычетЗаГод - ИсходныеДанные.ИсчисленныеВзносыЗаГод;
		ЛьготируемаяБазаДляИсчисленияИПН	= ИсходныеДанные.ЛьготируемаяБазаДляИсчисленияИПН;
		ОблагаемыйИПНДоходЗаМесяц			= ИсходныеДанные.ОблагаемыйДоходЗаМесяц;
		БазаДляИсчисленияИПН				= ИсходныеДанные.ОблагаемыйДоход - ИсходныеДанные.НалоговыйВычетЗаМесяц - ИсходныеДанные.ИсчисленныеВзносыЗаМесяц;
		РанееНалогИсчисленный 				= ИсходныеДанные.РанееНалогИсчисленный;
		РанееПримененнаяЛьгота 				= ИсходныеДанные.РанееПримененнаяЛьгота;
		ПрименяемаяЛьготаЗаГод 				= ИсходныеДанные.ПрименяемаяЛьготаЗаГод;
		ПроцентИПН							= ИсходныеДанные.ПроцентИПН / 100;
		
		Если ПроцентИПН = 0 Тогда
			Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Не определена ставка ИПН", СтатусСообщения.Важное);
			Возврат 0;
		КонецЕсли;
	Иначе
		// Если компенсация ИПН не нужна, то все по нулям
		ПризнакИсчисленияИПН 				= 0;
		ПризнакПримененияЛьготы				= 0;
		БазаДляИсчисленияИПНЗаГод			= 0;
		ЛьготируемаяБазаДляИсчисленияИПН	= 0;
		ОблагаемыйИПНДоходЗаМесяц			= 0;
		БазаДляИсчисленияИПН				= 0;
		РанееНалогИсчисленный 				= 0;
		РанееПримененнаяЛьгота				= 0;
		ПрименяемаяЛьготаЗаГод 				= 0;
		ПроцентИПН							= 0;
	КонецЕсли;
	
	// Данные для расчета ОПВ
	Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
		ПризнакИсчисленияОПВ 				= ?(ИсходныеДанные.ПризнакИсчисленияОПВ, 1, 0);
		БазаДляИсчисленияОПВ 				= ИсходныеДанные.БазаДляИсчисленияОПВ;
		РазмерОграниченияПоДоходамОПВ 		= ИсходныеДанные.РазмерОграниченияПоДоходамОПВ;
		РанееВзносыИсчисленные 				= ИсходныеДанные.РанееВзносыИсчисленные;
		ПроцентОПВ 							= ИсходныеДанные.ПроцентОПВ; // ставка ОПВ
		МаксСуммаОПВ					 	= ПроцентОПВ * РазмерОграниченияПоДоходамОПВ; // ОПВ с макс суммы облагаемого дохода
		ПрочиеДоходыДляОПВ					= ИсходныеДанные.ПрочиеДоходыДляОПВ;
	Иначе
		// Если учет ОПВ не нужен, то все по нулям
		ПризнакИсчисленияОПВ 				= 0;
		БазаДляИсчисленияОПВ 				= 0;
		РазмерОграниченияПоДоходамОПВ 		= 0;
		РанееВзносыИсчисленные 				= 0;
		ПроцентОПВ 							= 0; // ставка ОПВ
		МаксСуммаОПВ					 	= 0; // ОПВ с макс суммы облагаемого дохода
		ПрочиеДоходыДляОПВ					= 0;
	КонецЕсли;
	
	// Данные по прочим погашаемым удержаниям
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		СуммаКомпенсируемыхУдержаний			= ИсходныеДанные.СуммаКомпенсируемыхУдержаний;
		ПроцентКомпенсируемыхУдержанийБезИПН	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПН / 100;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезОПВ / 100;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ / 100;
		ПроцентПрочихКомпенсируемыхУдержаний		= ИсходныеДанные.ПроцентПрочихКомпенсируемыхУдержаний / 100;
	Иначе
		// Если удержания не компенсируются, то все по нулям
		СуммаКомпенсируемыхУдержаний			= 0;
		ПроцентКомпенсируемыхУдержанийБезИПН	= 0;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= 0;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= 0;
		ПроцентПрочихКомпенсируемыхУдержаний		= 0;
	КонецЕсли;
	
	// Сумма, которую надо начислить, чтобы с учетом включаемых начислений получить нужную сумму на руки
	ИскомаяСуммаНачислений = ЦелевойРазмер - ИсходныеДанные.СуммаВключаемыхНачислений;
	
	// округлим искомую сумму
	ИскомаяСуммаНачислений = ОбщегоНазначения.ОкруглитьЧисло(ИскомаяСуммаНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
	
	Если НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		 
		// Считать нечего, т.к. либо ничего не компенсируем (что ошибка) либо не положено ничего считать 
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Не определены компенсируемые удержания ", СтатусСообщения.Важное);
		
		Возврат ИскомаяСуммаНачислений;		
		
	КонецЕсли;
		
	ПризнакПрименятьОграничениеПоДоходамОПВ = 0; // если 1, то применяется ограничение по доходам, облагаемым ОПВ
	НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
	ПризнакРасчетаИПН = 1; // если 1, то считаем ИПН, если 0, то налог=0 (нет обл. доходов за месяц)
	
	// Если это расчет "от обратного" для доплат, то определяем сумму налога/взноса с уже начисленных доходов
	Если Не ОсновноеНачисление Тогда
	
		// Скорректируем льготу
		Если ПризнакПримененияЛьготы = 0 Тогда
			// льготу вообще не считаем
			ПрименяемаяЛьготаЗаГод = 0;
			ЛьготируемаяБазаДляИсчисленияИПН = 0;
			РанееПримененнаяЛьгота = 0;
		КонецЕсли;
	
		// Расчет ОПВ
		ИсчисленныеОПВ = 0;
		Если ПризнакИсчисленияОПВ <> 0 Тогда
			ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ) - РанееВзносыИсчисленные;
		КонецЕсли;
		
		ИсчисленныеОПВ = ОбщегоНазначения.ОкруглитьЧисло(ИсчисленныеОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Расчет ИПН 
		ИсчисленныйИПН = 0;		
		Если ПрименяемаяЛьготаЗаГод = 0 Тогда
			// вообще без льготы
			ОблагаемаяИПНСумма = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
		ИначеЕсли ПрименяемаяЛьготаЗаГод > ЛьготируемаяБазаДляИсчисленияИПН - ПризнакПримененияЛьготы * ИсчисленныеОПВ Тогда
			// еще всю льготу не выбрал
			ОблагаемаяИПНСумма = 0;
		Иначе
			 ОблагаемаяИПНСумма = Мин(БазаДляИсчисленияИПН - ИсчисленныеОПВ, ЛьготируемаяБазаДляИсчисленияИПН - ПризнакПримененияЛьготы * ИсчисленныеОПВ - ПрименяемаяЛьготаЗаГод);
		КонецЕсли;
		Если ОблагаемаяИПНСумма > 0 Тогда
			ИсчисленныйИПН = ОблагаемаяИПНСумма * ПроцентИПН;
			ИсчисленныйИПН = Окр(ИсчисленныйИПН, 2) - РанееНалогИсчисленный;
		КонецЕсли;
		
		ИсчисленныйИПН = ОбщегоНазначения.ОкруглитьЧисло(ИсчисленныйИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// При расчете "от обратного" для доплат ищем такую сумму, чтобы после удержания налога/взноса получил на руки 
		// такую же сумму, какую получил бы без доплаты, + чистый размер самой доплаты		
		СуммаНаРукиСПрочихНачислений = (ИсходныеДанные.ОбщаяСуммаНачислений - ИсходныеДанные.СуммаВключаемыхНачислений) - ИсчисленныеОПВ - ИсчисленныйИПН;
		ИскомаяСуммаНачислений = ИскомаяСуммаНачислений + СуммаНаРукиСПрочихНачислений;
		БазаДляИсчисленияОПВ = - ИсходныеДанные.НеОблагаемыйОПВДоходЗаМесяц + ПрочиеДоходыДляОПВ;
		БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц - ИсходныеДанные.НеОблагаемыйИПНДоходЗаМесяц; // т.к. доход за месяц полностью будет входить в результат решения уравнения
		БазаДляИсчисленияИПНЗаГод = БазаДляИсчисленияИПНЗаГод - ОблагаемыйИПНДоходЗаМесяц - ИсходныеДанные.НеОблагаемыйИПНДоходЗаМесяц;
		Если ПризнакПримененияЛьготы = 1 Тогда
			ЛьготируемаяБазаДляИсчисленияИПН = ЛьготируемаяБазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц;
		КонецЕсли;
	
		// чтобы из-за того, если для доплаты не стоит компенсация ОПВ, не удержалось ОПВ с основных начислений
		// или из-за того, что рассчитываемый вид сам по себе не облагается ОПВ,
		// включим его дополнительно как компенсируемые удержания суммой
		Если (КомпенсироватьОПВ = 0 ИЛИ ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом) И ИсчисленныеОПВ <> 0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
			КомпенсироватьУдержания = 1;
			Если ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
				БазаДляИсчисленияИПНЗаГод = БазаДляИсчисленияИПНЗаГод - ИсчисленныеОПВ;
				ПризнакИсчисленияОПВ = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если КомпенсироватьИПН = 0 И ИсчисленныйИПН <>0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныйИПН;
			КомпенсироватьУдержания = 1;
		КонецЕсли;
		
	Иначе
		// если основное начисление (за отработанное время)
		БазаДляИсчисленияОПВ = ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений + ПрочиеДоходыДляОПВ;
		БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц + ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений;
		БазаДляИсчисленияИПНЗаГод = БазаДляИсчисленияИПНЗаГод - ОблагаемыйИПНДоходЗаМесяц + ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений;
		
		Если ПризнакИсчисленияОПВ = 1 Тогда
			// если данный вид ОПВ не облагается, но база для исчисления с других видов есть
			ПризнакИсчисленияОПВ = ?(ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом, 1, 0);
			ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ) - РанееВзносыИсчисленные;
			Если ПризнакИсчисленияОПВ = 0 И ИсчисленныеОПВ <> 0 Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
				БазаДляИсчисленияИПНЗаГод = БазаДляИсчисленияИПНЗаГод - ИсчисленныеОПВ;
				СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
				КомпенсироватьУдержания = 1;
			КонецЕсли;			
		КонецЕсли;
		
		Если ПризнакПримененияЛьготы = 1 Тогда
			ЛьготируемаяБазаДляИсчисленияИПН = ЛьготируемаяБазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц + ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений;
		Иначе
			// льготу не считаем
			ПрименяемаяЛьготаЗаГод = 0;
			ЛьготируемаяБазаДляИсчисленияИПН = 0;
			РанееПримененнаяЛьгота = 0;
		КонецЕсли;
	КонецЕсли;
	
	ШагИтерации = 0;	
	МаксимальноеЧислоШагов = 100;
	
	Пока Не РезультатПолучен И (ШагИтерации < МаксимальноеЧислоШагов) Цикл
		
		ШагИтерации = ШагИтерации + 1;
		РезультатПолучен = Истина;		
		
		// Вычисляем вспомогательные переменные
		РезультирующийПроцентОПВ = ПроцентОПВ * ПризнакИсчисленияОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ);
		
		ФиксЧастьОПВ			 = ПризнакИсчисленияОПВ * (БазаДляИсчисленияОПВ * ПроцентОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ) + 
														   ПризнакПрименятьОграничениеПоДоходамОПВ * МаксСуммаОПВ - РанееВзносыИсчисленные);
		
														   
		РезультирующийПроцентЛьготы = ПризнакПримененияЛьготы * (1 - РезультирующийПроцентОПВ);
		
		ФиксЧастьЛьготы				= ПризнакПримененияЛьготы * (ЛьготируемаяБазаДляИсчисленияИПН - ФиксЧастьОПВ) + 
										(1 - ПризнакПримененияЛьготы) * ПрименяемаяЛьготаЗаГод - РанееПримененнаяЛьгота;
														   
										
		РезультирующийПроцентИПНиОПВ = ПризнакИсчисленияИПН * ПризнакРасчетаИПН * ПроцентИПН * 
											(1 - РезультирующийПроцентОПВ - РезультирующийПроцентЛьготы);
											
		ФиксЧастьИПН			= ПризнакИсчисленияИПН * ПризнакРасчетаИПН * ПроцентИПН * (БазаДляИсчисленияИПН - ФиксЧастьОПВ - ФиксЧастьЛьготы) -
									ПризнакИсчисленияИПН * РанееНалогИсчисленный;
		
		КоэффициентИПН = КомпенсироватьИПН - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		КоэффициентОПВ = КомпенсироватьОПВ - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		ПроцентКомпенсируемыхУдержаний = ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ + 
											ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + ПроцентПрочихКомпенсируемыхУдержаний;
								  		
		Числитель = (ИскомаяСуммаНачислений + 
					КоэффициентИПН * ФиксЧастьИПН +
					КоэффициентОПВ * ФиксЧастьОПВ + 
					КомпенсироватьУдержания * СуммаКомпенсируемыхУдержаний);
					
		Знаменатель = (1 - 
	     				КоэффициентИПН * РезультирующийПроцентИПНиОПВ -
					   	КоэффициентОПВ * РезультирующийПроцентОПВ - 
						КомпенсироватьУдержания * ПроцентКомпенсируемыхУдержаний);
								  		
		Результат = ?(Знаменатель <> 0, Числитель / Знаменатель, 0);
		Результат = ОбщегоНазначения.ОкруглитьЧисло(Результат, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Проверим граничные условия, при которых делали расчет
		РезультатОПВ = ПризнакИсчисленияОПВ * ПроцентОПВ * (БазаДляИсчисленияОПВ + Результат);

		Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
			// Наличие облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияОПВ И ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ОПВ исчисляются
					
					Если БазаДляИсчисленияОПВ + Результат > 0 Тогда
						Если ПризнакИсчисленияОПВ <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 1;
					Иначе
						Если ПризнакИсчисленияОПВ <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если РезультатОПВ > МаксСуммаОПВ Тогда
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 1;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		РезультатОПВ = РезультатОПВ - РанееВзносыИсчисленные;
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда 
			// Учтем граничные условия, возникающие при расчете ИПН
			
			// Льготы по ИПН
			ОблагаемаяИПНСумма = 0;
			Если РезультатПолучен Тогда
				НоваяЛьготируемаяБазаДляИсчисленияИПН = Макс(Результат * РезультирующийПроцентЛьготы + ФиксЧастьЛьготы + РанееПримененнаяЛьгота, 0);
				ОблагаемаяИПНСумма = БазаДляИсчисленияИПНЗаГод + Результат - РезультатОПВ - НоваяЛьготируемаяБазаДляИсчисленияИПН;
				Если ОблагаемаяИПНСумма > 0 Или ПрименяемаяЛьготаЗаГод = 0 Тогда
					Если ПризнакИсчисленияИПН <> 1 Тогда
						// Ранее налог не рассчитывался, теперь же появилась облагаемая база - нужен еще один шаг цикла
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакИсчисленияИПН = 1;
				Иначе
					Если ПризнакИсчисленияИПН <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакИсчисленияИПН = 0;
				КонецЕсли;
				
				Если (НоваяЛьготируемаяБазаДляИсчисленияИПН <> 0 ИЛИ ПрименяемаяЛьготаЗаГод <> 0)
						И НоваяЛьготируемаяБазаДляИсчисленияИПН <> ПрименяемаяЛьготаЗаГод Тогда
						
					// Размер применяемой льготы
					Если НоваяЛьготируемаяБазаДляИсчисленияИПН > ПрименяемаяЛьготаЗаГод Тогда
						// необходимо применять льготу в пределах льготируемого дохода
						Если ПризнакПримененияЛьготы <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакПримененияЛьготы = 0;
					Иначе
						// ранее льгота применялась в размере годовой, надо в пределах льготируемого дохода
						Если ПризнакПримененияЛьготы <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакПримененияЛьготы = 1;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			// проверка на то, чтобы ИПН не был отрицательным, если обл. доходы за месяц < 0
			Если РезультатПолучен Тогда
				ОблагаемаяИПНСумма = БазаДляИсчисленияИПН + Результат - РезультатОПВ;
				Если ПризнакПримененияЛьготы <> 0 Тогда
					ОблагаемаяИПНСумма = ОблагаемаяИПНСумма - (ПрименяемаяЛьготаЗаГод - РанееПримененнаяЛьгота);
				КонецЕсли;

				Если ОблагаемаяИПНСумма < 0 Тогда
					// ранее налог считался, но облагаемая сумма за месяц < 0 - на следующем шаге не считаем
					Если ПризнакРасчетаИПН <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 0;
				Иначе
					// ранее налог не считался, но теперь облагаемая сумма > 0 и налог есть с чего считать
					Если ПризнакРасчетаИПН <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не РезультатПолучен Тогда
		// вышли из цикла по превышению макс допустимого числа шагов
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Превышено допустимо число шагов итерации ", СтатусСообщения.Важное);
	Иначе
		// Из-за округления могут получиться лишние тиынки
		ИсчисленныйИПН = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентИПНиОПВ + ФиксЧастьИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеОПВ = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентОПВ + ФиксЧастьОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеУдержания = ОбщегоНазначения.ОкруглитьЧисло(КомпенсироватьУдержания * (Результат * ПроцентПрочихКомпенсируемыхУдержаний + 
												(Результат - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезОПВ +
												(Результат - ИсчисленныйИПН) * ПроцентКомпенсируемыхУдержанийБезИПН +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + 
												СуммаКомпенсируемыхУдержаний), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		ОбщаяСуммаКомпенсируемыхУдержаний = ИсчисленныйИПН + ИсчисленныеОПВ + ИсчисленныеУдержания;
		Разность = ИскомаяСуммаНачислений - (Результат - ОбщаяСуммаКомпенсируемыхУдержаний);
		
		Если Разность > -1 И Разность < 1 Тогда
			Результат = Результат + Разность;
		КонецЕсли;
		
		Если Не ОсновноеНачисление Тогда
			Результат = Результат - ИсходныеДанные.ОбщаяСуммаНачислений; 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ?(РезультатПолучен, Результат, 0);
	
КонецФункции  // РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2007

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным для способа расчета "от обратного"
// по правилам, действующим с 2009 года (фикс. ставка ИПН)
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  ТаблицаСтавокИПН - таблица значений со ставками ИПН за текущий рассчитываемый период регистрации для расчета "от обратного"
//
// Возвращаемое значение:
//  Число - результат расчета.
//
// Расчет "от обратного" производится на основе решения уравнения:
// 
// 		Х - Кн * ИПН - Кв * ОПВ - Ку * Уд = Р,
// где
//                    
//		ИПН = К0н * (Х + Бн - Льгот - ОПВ - Вычет) * %Н
//
//      ОПВ = ((1- К1в)*(Х + Бв) * %В + К1в * МаксОПВ) * К2в
//      
//      Уд  = Х * %Упр + Фу + (Х - ОПВ) * %Ув + (Х - ИПН) * %Ун + (Х - ОПВ - ИПН) * %Унв
//
// Относительно Х:
//
//      ОПВ(Х) = Х * %ПФ + Фв
//
//				%ПФ = %В * К2в * (1 - К1в)
//           
//				Фв  = Бв * %В * (1 - К1в) * К2в + К1в * МаксОПВ * К2в
//
//		ИПН(Х) = Х * %НВ + Фн
//
//				%НВ = К0н * %Н * (1 - %ПФ)
//
//				Фн  = К0н * %Н * (Бн - Льгот - Фв - Вычет)
//
// Решение уравнения:
//               Р + К'н * Фн + К'в * Фв + Ку * Фу
//		Х	  = -----------------------------------
//               1 - К'н * %НВ - К'в * %ПФ - Ку * %У'
//
// где
//		К'н   = Кн - Ку * %Ун - Ку * %Унв
//		К'в   = Кв - Ку * %Ув - Ку * %Унв
//		%У'   = %Упр + %Ув + %Ун + %Унв
//
//
// Обозначения:
// |В формуле	|	Переменная в программе					| Комментарий
// ---------------------------------------------------------------------------------------------------------------
// |   Х		|	ИскомаяСуммаНачислений					| Сумма, которую хотят получить на руки (за минусом включаемых начислений)
// |   Кн		|	КомпенсироватьИПН						| 1, если компенсируется ИПН, 0 иначе
// |   Кв		|	КомпенсироватьОПВ						| 1, если компенсируются ОПВ, 0 иначе
// |   Ку		|	КомпенсироватьУдержания					| 1, если компенсируются удержания, 0 иначе
// |   К0н		|	ПризнакРасчетаИПН			 			| 1, если ИПН рассчитывается, иначе 0 - налог = 0 (обл база за месяц < 0)
// |   Бн		|   БазаДляИсчисленияИПН					| Сумма облагаемого ИПН дохода за месяц (уже отняты вычеты и ОПВ)
// |   %Н		|	ПроцентИПН								| Процент ИПН
// |   К1в		| ПризнакПрименятьОграничениеПоДоходамОПВ 	| 0, если расчет ОПВ от базы (когда база < 75 МЗП), 1 если ОПВ с 75 МЗП
// |   Бв		|	БазаДляИсчисленияОПВ					| Сумма облагаемого ОПВ дохода за месяц (за счет прочих начислений, не относящихся в Х)
// |   %В		|	ПроцентОПВ								| Процент обязательных пенсионных взносов
// |   МаксОПВ	| 	МаксСуммаОПВ 							| Сумма ОПВ с 75 МЗП
// |   К2в		|	ПризнакИсчисленияОПВ					| 1, если по работнику исчисляются ОПВ, иначе 0 (пенсионер, инвалид 1, 2 гр. и т.д.)
// |   %Упр		|	ПроцентПрочихКомпенсируемыхУдержаний	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых не вычитается ОПВ и ИПН)
// |   %Ун		|	ПроцентКомпенсируемыхУдержанийБезИПН	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН)
// |   %Ув		|	ПроцентКомпенсируемыхУдержанийБезОПВ	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ОПВ)
// |   %Унв		|	ПроцентКомпенсируемыхУдержанийБезИПНиОПВ| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН и ОПВ)
// |   Фу		|	СуммаКомпенсируемыхУдержаний			| Компенсируемые удержания фиксированной суммой
// |   %ПФ		|	РезультирующийПроцентОПВ				|
// |   Фв		|	ФиксЧастьОПВ							|
// |   %НВ		|	РезультирующийПроцентИПНиОПВ			|
// |   Фн		|	ФиксЧастьИПН							|
// |   Льгот	|	ОстатокЛьготы							| Неиспользованная часть льготы, доступна в текущем месяца
// |   Вычет	|	ОстатокВычета							| Неиспользованный вычет с учетом переносимых с начала года, доступный в текущем месяце
// 
Функция РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2009(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет, КомментарийВидаРасчета)
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	СпособРасчета = ИсходныеДанные.СпособРасчета;
	Результат = 0;
	ЦелевойРазмер = 0;
	
	РезультатПолучен = Ложь;
	
	ЭтоПВРОсновныеНачисления = (ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	
	// Если это расчет "от обратного" для основного начисления, то не учитываем прочие суммы доходов, т.к.
	// налоги/взносы будут компенсироваться только для самого основного начисления и включаемых в него видов расчета.
	// Если идет расчет "от обратного" для прочих доплат, то их считаем таким образом, чтобы компенсировать только 
	// ту часть налога/взноса, которая начислена на сумму доплаты.
	Если ЭтоПВРОсновныеНачисления Тогда
		Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
			ОсновноеНачисление = Истина;
		Иначе
			ОсновноеНачисление = Ложь;
		КонецЕсли;
	Иначе
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// Если до этого никаких вообще начислений не было, то в любом случае считаем как "основное начисление"
	Если ИсходныеДанные.ОбщаяСуммаНачислений = 0 Тогда
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// определим целевой размер
	ЦелевойРазмер = ПолучитьЦелевойРазмерНачисленияОтОбратного(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета);
		
	// запомним целевой размер текущей строки расчета
	Если ЭтоПВРОсновныеНачисления Тогда
		
		СтрокаДвижений.ДополнительныеДанные = ЦелевойРазмер;
		
		Если ОсновноеНачисление Тогда
			// Увеличим целевой размер на размеры всех других расчетов "от обратного", введенных в текущем месяце,
			// их фактические результаты потом будут вычтены в конец расчета.
			ЦелевойРазмер = ЦелевойРазмер + ИсходныеДанные.РасчетОтОбратногоДополнительныеДанные;
		КонецЕсли;
		
	КонецЕсли;
	
	// Признаки компенсирования расчетом "от обратного" различных удержаний
	КомпенсироватьИПН 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, 1, 0);
	КомпенсироватьОПВ 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ, 1, 0);
	КомпенсироватьУдержания 	= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания, 1, 0);
	
	Если КомпенсироватьИПН <> 0 Или КомпенсироватьОПВ <> 0 Тогда
		Если Не ИсходныеДанные.ОтражениеПоПериодуРегистрации Тогда
			МассивПараметров = Новый Массив;
			Если НЕ ИсходныеДанные.Регистратор.Пустая() Тогда
				МассивПараметров.Добавить(ИсходныеДанные.Регистратор.Организация);
			КонецЕсли;
			РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметров);
			
			РаботаССообщениями.ОшибкаРасчета("", "Для " + ИсходныеДанные.ФизЛицоНаименование + " расчет """ + ИсходныеДанные.ВидРасчетаНаименование 
													+ """ не возможен, т.к. в учетной политике по налоговому учету не установлен признак отражения 
													|налогов и взносов по периоду регистрации", РасшифровкаУчетнойПолитики);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Данные для расчета ИПН 
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		БазаДляИсчисленияИПН						= ИсходныеДанные.ОблагаемыйДоход;

		ОстатокЛьготы								= Макс(ИсходныеДанные.ЛьготаПоДоходу - ИсходныеДанные.ПримененнаяЛьготаЗаГод - ИсходныеДанные.ПримененнаяЛьготаНаПредыдущемМестеРаботы, 0);
		ОстатокВычета								= Макс(ИсходныеДанные.РазрешенныйВычетЗаГод + ИсходныеДанные.НалоговыйВычетЛичный - ИсходныеДанные.ПримененныйВычетЗаГод, 0);
		ПроцентИПН									= ИсходныеДанные.ПроцентИПН;
		ПрочиеДоходыДляИПН							= ИсходныеДанные.ПрочиеДоходыДляИПН;
		                   		
		Если ПроцентИПН = 0 Тогда
			РасшифровкаСтавкиИПН = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не заполнено значение ставки индивидуального подоходного налога", РасшифровкаСтавкиИПН);
			Возврат 0;
		КонецЕсли;
	Иначе
		// Если компенсация ИПН не нужна, то все по нулям
		БазаДляИсчисленияИПН						= 0;

		ОстатокЛьготы								= 0;
		ОстатокВычета								= 0;
		ПроцентИПН									= 0;
		ПрочиеДоходыДляИПН							= 0;
	КонецЕсли;
	
	// Данные для расчета ОПВ
	Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
		ПризнакИсчисленияОПВ 				= ?(ИсходныеДанные.ПризнакИсчисленияОПВ, 1, 0);
		БазаДляИсчисленияОПВ 				= ИсходныеДанные.БазаДляИсчисленияОПВ;
		РазмерОграниченияПоДоходамОПВ 		= ИсходныеДанные.РазмерОграниченияПоДоходамОПВ;
		ПроцентОПВ 							= ИсходныеДанные.ПроцентОПВ; // ставка ОПВ
		МаксСуммаОПВ 						= ПроцентОПВ * РазмерОграниченияПоДоходамОПВ; // ОПВ с макс суммы облагаемого дохода
		ПрочиеДоходыДляОПВ					= ИсходныеДанные.ПрочиеДоходыДляОПВ;
	Иначе
		// Если учет ОПВ не нужен, то все по нулям
		ПризнакИсчисленияОПВ 				= 0;
		БазаДляИсчисленияОПВ 				= 0;
		РазмерОграниченияПоДоходамОПВ 		= 0;
		ПроцентОПВ 							= 0; // ставка ОПВ
		МаксСуммаОПВ 						= 0; // ОПВ с макс суммы облагаемого дохода
		ПрочиеДоходыДляОПВ					= 0;
	КонецЕсли;
	
	// Данные по прочим погашаемым удержаниям
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		СуммаКомпенсируемыхУдержаний			= ИсходныеДанные.СуммаКомпенсируемыхУдержаний;
		ПроцентКомпенсируемыхУдержанийБезИПН	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПН / 100;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезОПВ / 100;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ / 100;
		ПроцентПрочихКомпенсируемыхУдержаний		= ИсходныеДанные.ПроцентПрочихКомпенсируемыхУдержаний / 100;
	Иначе
		// Если удержания не компенсируются, то все по нулям
		СуммаКомпенсируемыхУдержаний			= 0;
		ПроцентКомпенсируемыхУдержанийБезИПН	= 0;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= 0;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= 0;
		ПроцентПрочихКомпенсируемыхУдержаний		= 0;
	КонецЕсли;
	
	// Сумма, которую надо начислить, чтобы с учетом включаемых начислений получить нужную сумму на руки
	ИскомаяСуммаНачислений = ЦелевойРазмер - ИсходныеДанные.СуммаВключаемыхНачислений;
	
	// округлим искомую сумму
	ИскомаяСуммаНачислений = ОбщегоНазначения.ОкруглитьЧисло(ИскомаяСуммаНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
	
	Если НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		 
		// Считать нечего, т.к. либо ничего не компенсируем 
		РаботаССообщениями.ОшибкаРасчета(ИсходныеДанные.ВидРасчетаНаименование, ": Не определены компенсируемые удержания", ВидРасчета);
		
		Возврат ИскомаяСуммаНачислений;		
		
	КонецЕсли;
	
	ПризнакПрименятьОграничениеПоДоходамОПВ = 0; // если 1, то применяется ограничение по доходам, облагаемым ОПВ
	НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
	ПризнакРасчетаИПН = 1; // если 1, то считаем ИПН, если 0, то налог=0 (нет обл. доходов за месяц)
	
	// Если это расчет "от обратного" для доплат, то определяем сумму налога/взноса с уже начисленных доходов
	Если Не ОсновноеНачисление Тогда
	
		// Расчет ОПВ
		ИсчисленныеОПВ = 0;
		Если ПризнакИсчисленияОПВ <> 0 Тогда
			ИсчисленныеОПВ = Мин(ПроцентОПВ * (БазаДляИсчисленияОПВ - ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений), МаксСуммаОПВ);
		КонецЕсли;
		
		ИсчисленныеОПВ = ОбщегоНазначения.ОкруглитьЧисло(ИсчисленныеОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Расчет ИПН 
		ИсчисленныйИПН = 0;		
		ОблагаемаяИПНСумма = (БазаДляИсчисленияИПН - ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений) - ОстатокЛьготы - ИсчисленныеОПВ - ОстатокВычета;
		Если ОблагаемаяИПНСумма > 0 Тогда
			ИсчисленныйИПН = ОблагаемаяИПНСумма * ПроцентИПН;
			ИсчисленныйИПН = Окр(ИсчисленныйИПН, 2);
		КонецЕсли;
		
		ИсчисленныйИПН = ОбщегоНазначения.ОкруглитьЧисло(ИсчисленныйИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// При расчете "от обратного" для доплат ищем такую сумму, чтобы после удержания налога/взноса получил на руки 
		// такую же сумму, какую получил бы без доплаты, + чистый размер самой доплаты		
		// ИсходныеДанные.ОбщаяСуммаНачислений - уже включает ИсходныеДанные.СуммаВключаемыхНачислений
		СуммаНаРукиСПрочихНачислений = (ИсходныеДанные.ОбщаяСуммаНачислений) - ИсчисленныеОПВ - ИсчисленныйИПН;
		ИскомаяСуммаНачислений = ИскомаяСуммаНачислений + СуммаНаРукиСПрочихНачислений;
		БазаДляИсчисленияОПВ = - ИсходныеДанные.НеОблагаемыйОПВДоходЗаМесяц + ПрочиеДоходыДляОПВ;
		БазаДляИсчисленияИПН = - ИсходныеДанные.НеОблагаемыйИПНДоходЗаМесяц; // т.к. доход за месяц полностью будет входить в результат решения уравнения
	
		// чтобы из-за того, если для доплаты не стоит компенсация ОПВ, не удержалось ОПВ с основных начислений
		// или из-за того, что рассчитываемый вид сам по себе не облагается ОПВ,
		// включим его дополнительно как компенсируемые удержания суммой
		Если (КомпенсироватьОПВ = 0 ИЛИ ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом) И ИсчисленныеОПВ <> 0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
			КомпенсироватьУдержания = 1;
			Если ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
				ПризнакИсчисленияОПВ = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если КомпенсироватьИПН = 0 И ИсчисленныйИПН <>0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныйИПН;
			КомпенсироватьУдержания = 1;
		КонецЕсли;
		
	Иначе
		// если основное начисление (за отработанное время)
		БазаДляИсчисленияОПВ = ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений + ПрочиеДоходыДляОПВ;
		БазаДляИсчисленияИПН = БазаДляИсчисленияИПН; //ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений + ПрочиеДоходыДляИПН; для включения сумм доп.вычетов.
		
		Если ПризнакИсчисленияОПВ = 1 Тогда
			// если данный вид ОПВ не облагается, но база для исчисления с других видов есть
			ПризнакИсчисленияОПВ = ?(ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом, 1, 0);
			ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ);
			Если ПризнакИсчисленияОПВ = 0 И ИсчисленныеОПВ <> 0 Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
				СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
				КомпенсироватьУдержания = 1;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	ШагИтерации = 0;	
	МаксимальноеЧислоШагов = 100;
	
	Пока Не РезультатПолучен И (ШагИтерации < МаксимальноеЧислоШагов) Цикл
		
		ШагИтерации = ШагИтерации + 1;
		РезультатПолучен = Истина;		
		
		// Вычисляем вспомогательные переменные
		РезультирующийПроцентОПВ = ПроцентОПВ * ПризнакИсчисленияОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ);
		
		ФиксЧастьОПВ			 = ПризнакИсчисленияОПВ * (БазаДляИсчисленияОПВ * ПроцентОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ) + 
														   ПризнакПрименятьОграничениеПоДоходамОПВ * МаксСуммаОПВ);
		
		РезультирующийПроцентИПНиОПВ = ПризнакРасчетаИПН * ПроцентИПН * (1 - РезультирующийПроцентОПВ);
											
		ФиксЧастьИПН			= ПризнакРасчетаИПН * ПроцентИПН * (БазаДляИсчисленияИПН - ОстатокЛьготы - ФиксЧастьОПВ - ОстатокВычета);
		
		КоэффициентИПН = КомпенсироватьИПН - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		КоэффициентОПВ = КомпенсироватьОПВ - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		ПроцентКомпенсируемыхУдержаний = ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ + 
											ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + ПроцентПрочихКомпенсируемыхУдержаний;
								  		
		Числитель = (ИскомаяСуммаНачислений + 
					КоэффициентИПН * ФиксЧастьИПН +
					КоэффициентОПВ * ФиксЧастьОПВ + 
					КомпенсироватьУдержания * СуммаКомпенсируемыхУдержаний);
					
		Знаменатель = (1 - 
	     				КоэффициентИПН * РезультирующийПроцентИПНиОПВ -
					   	КоэффициентОПВ * РезультирующийПроцентОПВ - 
						КомпенсироватьУдержания * ПроцентКомпенсируемыхУдержаний);
								  		
		Результат = ?(Знаменатель <> 0, Числитель / Знаменатель, 0);
		Результат = ОбщегоНазначения.ОкруглитьЧисло(Результат, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Проверим граничные условия, при которых делали расчет
		РезультатОПВ = ПризнакИсчисленияОПВ * ПроцентОПВ * (БазаДляИсчисленияОПВ + Результат);

		Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
			// Наличие облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияОПВ И ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ОПВ исчисляются
					
					Если БазаДляИсчисленияОПВ + Результат > 0 Тогда
						Если ПризнакИсчисленияОПВ <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 1;
					Иначе
						Если ПризнакИсчисленияОПВ <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если РезультатОПВ > МаксСуммаОПВ Тогда
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 1;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда 
			// Учтем граничные условия, возникающие при расчете ИПН
			
			// проверка на то, чтобы ИПН не был отрицательным, если обл. доходы за месяц < 0
			Если РезультатПолучен Тогда
				ОблагаемаяИПНСумма = БазаДляИсчисленияИПН + Результат - РезультатОПВ - ОстатокЛьготы - ОстатокВычета;

				Если ОблагаемаяИПНСумма < 0 Тогда
					// ранее налог считался, но облагаемая сумма за месяц < 0 - на следующем шаге не считаем
					Если ПризнакРасчетаИПН <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 0;
				Иначе
					// ранее налог не считался, но теперь облагаемая сумма > 0 и налог есть с чего считать
					Если ПризнакРасчетаИПН <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не РезультатПолучен Тогда
		// вышли из цикла по превышению макс допустимого числа шагов
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Превышено допустимо число шагов итерации ", СтатусСообщения.Важное);
	Иначе
		// Из-за округления могут получиться лишние тиынки
		ИсчисленныйИПН = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентИПНиОПВ + ФиксЧастьИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеОПВ = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентОПВ + ФиксЧастьОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеУдержания = ОбщегоНазначения.ОкруглитьЧисло(КомпенсироватьУдержания * (Результат * ПроцентПрочихКомпенсируемыхУдержаний + 
												(Результат - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезОПВ +
												(Результат - ИсчисленныйИПН) * ПроцентКомпенсируемыхУдержанийБезИПН +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + 
												СуммаКомпенсируемыхУдержаний), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		ОбщаяСуммаКомпенсируемыхУдержаний = ИсчисленныйИПН + ИсчисленныеОПВ + ИсчисленныеУдержания;
		Разность = ИскомаяСуммаНачислений - (Результат - ОбщаяСуммаКомпенсируемыхУдержаний);
		
		Если Разность > -1 И Разность < 1 Тогда
			Результат = Результат + Разность;
		КонецЕсли;
		
		Если Не ОсновноеНачисление Тогда
			Результат = Результат - ИсходныеДанные.ОбщаяСуммаНачислений; 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ?(РезультатПолучен, Результат, 0);
	
КонецФункции  // РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2009()

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным для способа расчета "от обратного"
// по правилам, действующим с 2009 года (фикс. ставка ИПН)
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  ТаблицаСтавокИПН - таблица значений со ставками ИПН за текущий рассчитываемый период регистрации для расчета "от обратного"
//
// Возвращаемое значение:
//  Число - результат расчета.
//
// Расчет "от обратного" производится на основе решения уравнения:
// 
// 		Х - Кн * ИПН - Кв * ОПВ - Ку * Уд = Р,
// где
//                    
//		ИПН = К0н * (Х + Бн - Льгот - ОПВ - Вычет) * %Н
//
//      ОПВ = ((1- К1в)*(Х + Бв) * %В + К1в * МаксОПВ) * К2в
//      
//      Уд  = Х * %Упр + Фу + (Х - ОПВ) * %Ув + (Х - ИПН) * %Ун + (Х - ОПВ - ИПН) * %Унв
//
// Относительно Х:
//
//      ОПВ(Х) = Х * %ПФ + Фв
//
//				%ПФ = %В * К2в * (1 - К1в)
//           
//				Фв  = Бв * %В * (1 - К1в) * К2в + К1в * МаксОПВ * К2в
//
//		ИПН(Х) = Х * %НВ + Фн
//
//				%НВ = К0н * %Н * (1 - %ПФ)
//
//				Фн  = К0н * %Н * (Бн - Льгот - Фв - Вычет)
//
// Решение уравнения:
//               Р + К'н * Фн + К'в * Фв + Ку * Фу
//		Х	  = -----------------------------------
//               1 - К'н * %НВ - К'в * %ПФ - Ку * %У'
//
// где
//		К'н   = Кн - Ку * %Ун - Ку * %Унв
//		К'в   = Кв - Ку * %Ув - Ку * %Унв
//		%У'   = %Упр + %Ув + %Ун + %Унв
//
//
// Обозначения:
// |В формуле	|	Переменная в программе					| Комментарий
// ---------------------------------------------------------------------------------------------------------------
// |   Х		|	ИскомаяСуммаНачислений					| Сумма, которую хотят получить на руки (за минусом включаемых начислений)
// |   Кн		|	КомпенсироватьИПН						| 1, если компенсируется ИПН, 0 иначе
// |   Кв		|	КомпенсироватьОПВ						| 1, если компенсируются ОПВ, 0 иначе
// |   Ку		|	КомпенсироватьУдержания					| 1, если компенсируются удержания, 0 иначе
// |   К0н		|	ПризнакРасчетаИПН			 			| 1, если ИПН рассчитывается, иначе 0 - налог = 0 (обл база за месяц < 0)
// |   Бн		|   БазаДляИсчисленияИПН					| Сумма облагаемого ИПН дохода за месяц (уже отняты вычеты и ОПВ)
// |   %Н		|	ПроцентИПН								| Процент ИПН
// |   К1в		| ПризнакПрименятьОграничениеПоДоходамОПВ 	| 0, если расчет ОПВ от базы (когда база < 75 МЗП), 1 если ОПВ с 75 МЗП
// |   Бв		|	БазаДляИсчисленияОПВ					| Сумма облагаемого ОПВ дохода за месяц (за счет прочих начислений, не относящихся в Х)
// |   %В		|	ПроцентОПВ								| Процент обязательных пенсионных взносов
// |   МаксОПВ	| 	МаксСуммаОПВ 							| Сумма ОПВ с 75 МЗП
// |   К2в		|	ПризнакИсчисленияОПВ					| 1, если по работнику исчисляются ОПВ, иначе 0 (пенсионер, инвалид 1, 2 гр. и т.д.)
// |   %Упр		|	ПроцентПрочихКомпенсируемыхУдержаний	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых не вычитается ОПВ и ИПН)
// |   %Ун		|	ПроцентКомпенсируемыхУдержанийБезИПН	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН)
// |   %Ув		|	ПроцентКомпенсируемыхУдержанийБезОПВ	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ОПВ)
// |   %Унв		|	ПроцентКомпенсируемыхУдержанийБезИПНиОПВ| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН и ОПВ)
// |   Фу		|	СуммаКомпенсируемыхУдержаний			| Компенсируемые удержания фиксированной суммой
// |   %ПФ		|	РезультирующийПроцентОПВ				|
// |   Фв		|	ФиксЧастьОПВ							|
// |   %НВ		|	РезультирующийПроцентИПНиОПВ			|
// |   Фн		|	ФиксЧастьИПН							|
// |   Льгот	|	ОстатокЛьготы							| Неиспользованная часть льготы, доступна в текущем месяца
// |   Вычет	|	ОстатокВычета							| Неиспользованный вычет с учетом переносимых с начала года, доступный в текущем месяце
// 
Функция РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2010(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет, КомментарийВидаРасчета, СтруктураЦелевыхРазмеров)
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	СпособРасчета = ИсходныеДанные.СпособРасчета;
	Результат = 0;
	ЦелевойРазмер = 0;
	
	// Получем целевые размеры всех расчтов от обратного в сумме 
	// для вычисления коэффициента распределения
 	ТаблицаЦелевыхРазмеров = СтруктураЦелевыхРазмеров.ТаблицаЦелевыхРазмеров;
	ТаблицаЦелевыхРазмеровПоВидуРасчета = СтруктураЦелевыхРазмеров.ТаблицаЦелевыхРазмеровПоВидуРасчета;
	
	ЦелевойРазмерВсего = 0;
	ЦелевойРазмерВсегоПоВидуРасчета = 0;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Регистратор", ИсходныеДанные.Регистратор);
	СтруктураПоиска.Вставить("ФизЛицо", ИсходныеДанные.ФизЛицо);
	
	// Для распределения вычетов и льгот
	ЦелевойРазмерВсего = ТаблицаЦелевыхРазмеров.НайтиСтроки(СтруктураПоиска)[0].ЦелевойРазмер;

	СтруктураПоиска.Вставить("ВидРасчетаНаименование", ИсходныеДанные.ВидРасчетаНаименование);
	
	// Для распределения включаемых начислений
	ЦелевойРазмерВсегоПоВидуРасчета = ТаблицаЦелевыхРазмеровПоВидуРасчета.НайтиСтроки(СтруктураПоиска)[0].ЦелевойРазмер;
	
	РезультатПолучен = Ложь;
	
	ЭтоПВРОсновныеНачисления = (ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	
	// определим целевой размер
	ЦелевойРазмер = ПолучитьЦелевойРазмерНачисленияОтОбратного(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета);
	
	// Для вычетов и льгот
	КоэффициентРаспределения = ?(ЦелевойРазмерВсего <= 0, 1, ЦелевойРазмер / ЦелевойРазмерВсего);
	
	// Для включаемых начислений
	КоэффициентРаспределенияВключаемыхНачислений = ?(ЦелевойРазмерВсегоПоВидуРасчета <= 0, 1, ЦелевойРазмер / ЦелевойРазмерВсегоПоВидуРасчета);
	
	// запомним целевой размер текущей строки расчета
	СтрокаДвижений.ДополнительныеДанные = ЦелевойРазмер;
		
	// Увеличим целевой размер на размеры всех других расчетов "от обратного", введенных в текущем месяце,
	// их фактические результаты потом будут вычтены в конец расчета.
	ЦелевойРазмер = ЦелевойРазмер + ИсходныеДанные.РасчетОтОбратногоДополнительныеДанные * КоэффициентРаспределения;
	
	// Признаки компенсирования расчетом "от обратного" различных удержаний
	КомпенсироватьИПН 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, 1, 0);
	КомпенсироватьОПВ 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ, 1, 0);
	КомпенсироватьУдержания 	= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания, 1, 0);
	
	Если КомпенсироватьИПН <> 0 Или КомпенсироватьОПВ <> 0 Тогда
		Если Не ИсходныеДанные.ОтражениеПоПериодуРегистрации Тогда
			МассивПараметров = Новый Массив;
			Если НЕ ИсходныеДанные.Регистратор.Пустая() Тогда
				МассивПараметров.Добавить(ИсходныеДанные.Регистратор.Организация);
			КонецЕсли;
			РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметров);
			
			РаботаССообщениями.ОшибкаРасчета("", "Для " + ИсходныеДанные.ФизЛицоНаименование + " расчет """ + ИсходныеДанные.ВидРасчетаНаименование 
													+ """ не возможен, т.к. в учетной политике по налоговому учету не установлен признак отражения 
													|налогов и взносов по периоду регистрации", РасшифровкаУчетнойПолитики);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Данные для расчета ИПН 
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		БазаДляИсчисленияИПН						= ИсходныеДанные.ОблагаемыйДоход;
		ОстатокЛьготы								= Макс(ИсходныеДанные.ЛьготаПоДоходу - ИсходныеДанные.ПримененнаяЛьготаЗаГод - ИсходныеДанные.ПримененнаяЛьготаНаПредыдущемМестеРаботы, 0);
		ОстатокВычета								= Макс(ИсходныеДанные.РазрешенныйВычетЗаГод + ИсходныеДанные.НалоговыйВычетЛичный - ИсходныеДанные.ПримененныйВычетЗаГод, 0);
		ПлановыйВычет								= ИсходныеДанные.НалоговыйВычетПлановый;
		ПроцентИПН									= ИсходныеДанные.ПроцентИПН;
		ПрочиеДоходыДляИПН							= ИсходныеДанные.ПрочиеДоходыДляИПН;
		                   		
		Если ПроцентИПН = 0 Тогда
			РасшифровкаСтавкиИПН = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не заполнено значение ставки индивидуального подоходного налога", РасшифровкаСтавкиИПН);
			Возврат 0;
		КонецЕсли;
	Иначе
		// Если компенсация ИПН не нужна, то все по нулям
		БазаДляИсчисленияИПН						= 0;
		ОстатокЛьготы								= 0;
		ОстатокВычета								= 0;
		ПлановыйВычет								= 0;
		ПроцентИПН									= 0;
		ПрочиеДоходыДляИПН							= 0;
	КонецЕсли;
	
	// Данные для расчета ОПВ
	Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
		ПризнакИсчисленияОПВ 				= ?(ИсходныеДанные.ПризнакИсчисленияОПВ, 1, 0);
		РазмерОграниченияПоДоходамОПВ 		= ИсходныеДанные.РазмерОграниченияПоДоходамОПВ;
		ПроцентОПВ 							= ИсходныеДанные.ПроцентОПВ; // ставка ОПВ
		Если ИсходныеДанные.РасчетОтОбратногоУчитыватьПрямыеНачисления Тогда
			МаксСуммаОПВ 					= Макс(ПроцентОПВ * (РазмерОграниченияПоДоходамОПВ - ИсходныеДанные.ОблагаемыйОПВДоходПрямыхНачислений) * КоэффициентРаспределения,0); // ОПВ с макс суммы облагаемого дохода
		Иначе
			МаксСуммаОПВ 					= ПроцентОПВ * РазмерОграниченияПоДоходамОПВ * КоэффициентРаспределения; // ОПВ с макс суммы облагаемого дохода
		КонецЕсли;
		ПрочиеДоходыДляОПВ					= ИсходныеДанные.ПрочиеДоходыДляОПВ;
	Иначе
		// Если учет ОПВ не нужен, то все по нулям
		ПризнакИсчисленияОПВ 				= 0;
		РазмерОграниченияПоДоходамОПВ 		= 0;
		ПроцентОПВ 							= 0; // ставка ОПВ
		МаксСуммаОПВ 						= 0; // ОПВ с макс суммы облагаемого дохода
		ПрочиеДоходыДляОПВ					= 0;
	КонецЕсли;
	
	// Данные по прочим погашаемым удержаниям
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		СуммаКомпенсируемыхУдержаний			= ИсходныеДанные.СуммаКомпенсируемыхУдержаний;
		ПроцентКомпенсируемыхУдержанийБезИПН	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПН / 100;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезОПВ / 100;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ / 100;
		ПроцентПрочихКомпенсируемыхУдержаний		= ИсходныеДанные.ПроцентПрочихКомпенсируемыхУдержаний / 100;
	Иначе
		// Если удержания не компенсируются, то все по нулям
		СуммаКомпенсируемыхУдержаний			= 0;
		ПроцентКомпенсируемыхУдержанийБезИПН	= 0;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= 0;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= 0;
		ПроцентПрочихКомпенсируемыхУдержаний		= 0;
	КонецЕсли;
	
	// Сумма, которую надо начислить, чтобы с учетом включаемых начислений получить нужную сумму на руки
	ИскомаяСуммаНачислений = ЦелевойРазмер - ИсходныеДанные.СуммаВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений;
	
	// округлим искомую сумму
	ИскомаяСуммаНачислений = ОбщегоНазначения.ОкруглитьЧисло(ИскомаяСуммаНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
	
	Если НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		 
		// Считать нечего, т.к. либо ничего не компенсируем 
		РаботаССообщениями.ОшибкаРасчета(ИсходныеДанные.ВидРасчетаНаименование, ": Не определены компенсируемые удержания", ВидРасчета);
		Возврат ИскомаяСуммаНачислений;		
	КонецЕсли;
	
	ПризнакПрименятьОграничениеПоДоходамОПВ = 0; // если 1, то применяется ограничение по доходам, облагаемым ОПВ
	НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
	ПризнакРасчетаИПН = 1; // если 1, то считаем ИПН, если 0, то налог=0 (нет обл. доходов за месяц)
	
	ОстатокЛьготы = ОстатокЛьготы * КоэффициентРаспределения;
	ОстатокВычета = ОстатокВычета * КоэффициентРаспределения;
	ПлановыйВычет = ПлановыйВычет * КоэффициентРаспределения;
    ПрочиеДоходыДляИПН = ПрочиеДоходыДляИПН * КоэффициентРаспределения;
	ПрочиеДоходыДляОПВ = ПрочиеДоходыДляОПВ * КоэффициентРаспределения;
	СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний * КоэффициентРаспределения;
	
	БазаДляИсчисленияОПВ = ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений + ПрочиеДоходыДляОПВ * КоэффициентРаспределения;
	БазаДляИсчисленияИПН = БазаДляИсчисленияИПН * КоэффициентРаспределения + ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений; // для включения сумм доп.вычетов.
		
	Если ПризнакИсчисленияОПВ = 1 Тогда
		// если данный вид ОПВ не облагается, но база для исчисления с других видов есть
		ПризнакИсчисленияОПВ = ?(ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом, 1, 0);
		ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ);
		Если ПризнакИсчисленияОПВ = 0 И ИсчисленныеОПВ <> 0 Тогда
			// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
			БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
			КомпенсироватьУдержания = 1;
		КонецЕсли;			
	КонецЕсли;
	
	ШагИтерации = 0;	
	МаксимальноеЧислоШагов = 100;
	
	Если ИсходныеДанные.РасчетОтОбратногоУчитыватьПрямыеНачисления Тогда
		ЛьготыВычеты = БазаДляИсчисленияИПН + Мин(ИсходныеДанные.ОблагаемыйИПНДоходПрямыхНачислений * КоэффициентРаспределения - ОстатокЛьготы - ОстатокВычета - ПлановыйВычет, 0);
	Иначе 
		ЛьготыВычеты = БазаДляИсчисленияИПН - ОстатокЛьготы - ОстатокВычета - ПлановыйВычет;
	КонецЕсли;
		
	Пока Не РезультатПолучен И (ШагИтерации < МаксимальноеЧислоШагов) Цикл
		
		ШагИтерации = ШагИтерации + 1;
		РезультатПолучен = Истина;		
		
		// Вычисляем вспомогательные переменные
		РезультирующийПроцентОПВ = ПроцентОПВ * ПризнакИсчисленияОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ);
		
		ФиксЧастьОПВ			 = ПризнакИсчисленияОПВ * (БазаДляИсчисленияОПВ * ПроцентОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ) + 
														   ПризнакПрименятьОграничениеПоДоходамОПВ * МаксСуммаОПВ);
		
		РезультирующийПроцентИПНиОПВ = ПризнакРасчетаИПН * ПроцентИПН * (1 - РезультирующийПроцентОПВ);
											
		ФиксЧастьИПН			= ПризнакРасчетаИПН * ПроцентИПН * (ЛьготыВычеты - ФиксЧастьОПВ);
		
		КоэффициентИПН = КомпенсироватьИПН - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		КоэффициентОПВ = КомпенсироватьОПВ - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		ПроцентКомпенсируемыхУдержаний = ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ + 
											ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + ПроцентПрочихКомпенсируемыхУдержаний;
								  		
		Числитель = (ИскомаяСуммаНачислений + 
					КоэффициентИПН * ФиксЧастьИПН +
					КоэффициентОПВ * ФиксЧастьОПВ + 
					КомпенсироватьУдержания * СуммаКомпенсируемыхУдержаний);
					
		Знаменатель = (1 - 
	     				КоэффициентИПН * РезультирующийПроцентИПНиОПВ -
					   	КоэффициентОПВ * РезультирующийПроцентОПВ - 
						КомпенсироватьУдержания * ПроцентКомпенсируемыхУдержаний);
								  		
		Результат = ?(Знаменатель <> 0, Числитель / Знаменатель, 0);
		Результат = ОбщегоНазначения.ОкруглитьЧисло(Результат, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Проверим граничные условия, при которых делали расчет
		РезультатОПВ = ПризнакИсчисленияОПВ * ПроцентОПВ * (БазаДляИсчисленияОПВ + Результат);

		Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
			// Наличие облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияОПВ И ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ОПВ исчисляются
					
					Если БазаДляИсчисленияОПВ + Результат > 0 Тогда
						Если ПризнакИсчисленияОПВ <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 1;
					Иначе
						Если ПризнакИсчисленияОПВ <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если РезультатОПВ > МаксСуммаОПВ Тогда
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 1;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда 
			// Учтем граничные условия, возникающие при расчете ИПН
			
			// проверка на то, чтобы ИПН не был отрицательным, если обл. доходы за месяц < 0
			Если РезультатПолучен Тогда
				ОблагаемаяИПНСумма = ЛьготыВычеты + Результат - РезультатОПВ;

				Если ОблагаемаяИПНСумма < 0 Тогда
					// ранее налог считался, но облагаемая сумма за месяц < 0 - на следующем шаге не считаем
					Если ПризнакРасчетаИПН <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 0;
				Иначе
					// ранее налог не считался, но теперь облагаемая сумма > 0 и налог есть с чего считать
					Если ПризнакРасчетаИПН <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не РезультатПолучен Тогда
		// вышли из цикла по превышению макс допустимого числа шагов
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Превышено допустимо число шагов итерации ", СтатусСообщения.Важное);
	Иначе
		// Из-за округления могут получиться лишние тиынки
		ИсчисленныйИПН = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентИПНиОПВ + ФиксЧастьИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеОПВ = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентОПВ + ФиксЧастьОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеУдержания = ОбщегоНазначения.ОкруглитьЧисло(КомпенсироватьУдержания * (Результат * ПроцентПрочихКомпенсируемыхУдержаний + 
												(Результат - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезОПВ +
												(Результат - ИсчисленныйИПН) * ПроцентКомпенсируемыхУдержанийБезИПН +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + 
												СуммаКомпенсируемыхУдержаний), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		ОбщаяСуммаКомпенсируемыхУдержаний = ИсчисленныйИПН + ИсчисленныеОПВ + ИсчисленныеУдержания;
		Разность = ИскомаяСуммаНачислений - (Результат - ОбщаяСуммаКомпенсируемыхУдержаний);
		
		Если Разность > -1 И Разность < 1 Тогда
			Результат = Результат + Разность;
		КонецЕсли;
		
		Результат = Результат - ИсходныеДанные.ОбщаяСуммаНачислений * КоэффициентРаспределения;
		
	КонецЕсли;
	
	Возврат ?(РезультатПолучен, Результат, 0);
	
КонецФункции  // РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2010()

//Возвращает таблицу целевых размеров с общей суммой "на руки"
//
Функция ПолучитьСтруктуруТаблицЦелевыхРазмеровРасчетовОтОбратного(ИсходныеДанные, ТаблицаЗаписейРегистра)
	
	ТаблицаЦелевыхРазмеров = Новый ТаблицаЗначений;
	ТаблицаЦелевыхРазмеров.Колонки.Добавить("Регистратор");
	ТаблицаЦелевыхРазмеров.Колонки.Добавить("ФизЛицо");
	ТаблицаЦелевыхРазмеров.Колонки.Добавить("ЦелевойРазмер");
	
	ТаблицаЦелевыхРазмеровПоВидуРасчета = Новый ТаблицаЗначений;
	ТаблицаЦелевыхРазмеровПоВидуРасчета.Колонки.Добавить("Регистратор");
	ТаблицаЦелевыхРазмеровПоВидуРасчета.Колонки.Добавить("ФизЛицо");
	ТаблицаЦелевыхРазмеровПоВидуРасчета.Колонки.Добавить("ВидРасчетаНаименование");
	ТаблицаЦелевыхРазмеровПоВидуРасчета.Колонки.Добавить("ЦелевойРазмер");
	
	СписокСпособовРасчетовОтОбратного = ПроведениеРасчетов.ПолучитьСписокСпособовРасчетовОтОбратного();
	
	СтрокаИсходныхДанных = ИсходныеДанные;
	Пока СтрокаИсходныхДанных.Следующий() Цикл
		Если СписокСпособовРасчетовОтОбратного.НайтиПоЗначению(СтрокаИсходныхДанных.СпособРасчета) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНабораЗаписей = ТаблицаЗаписейРегистра.Найти(СтрокаИсходныхДанных.НомерСтроки, "НомерСтроки");
		ЦелевойРазмер = ПолучитьЦелевойРазмерНачисленияОтОбратного(СтрокаИсходныхДанных, СтрокаНабораЗаписей);
		
		НоваяСтрока 				= ТаблицаЦелевыхРазмеров.Добавить();
		НоваяСтрока.Регистратор 	= СтрокаИсходныхДанных.Регистратор;
		НоваяСтрока.ФизЛицо			= СтрокаИсходныхДанных.ФизЛицо;
		НоваяСтрока.ЦелевойРазмер	= ЦелевойРазмер;
		
		НоваяСтрока 						= ТаблицаЦелевыхРазмеровПоВидуРасчета.Добавить();
		НоваяСтрока.Регистратор 			= СтрокаИсходныхДанных.Регистратор;
		НоваяСтрока.ФизЛицо					= СтрокаИсходныхДанных.ФизЛицо;
		НоваяСтрока.ВидРасчетаНаименование 	= СтрокаИсходныхДанных.ВидРасчетаНаименование;
		НоваяСтрока.ЦелевойРазмер			= ЦелевойРазмер;		
		
	КонецЦикла;
	
	ТаблицаЦелевыхРазмеров.Свернуть("Регистратор, ФизЛицо", "ЦелевойРазмер");
	ТаблицаЦелевыхРазмеровПоВидуРасчета.Свернуть("Регистратор, ФизЛицо, ВидРасчетаНаименование", "ЦелевойРазмер");

	СтруктураЦелевыхРазмеров = Новый Структура;
	СтруктураЦелевыхРазмеров.Вставить("ТаблицаЦелевыхРазмеров", ТаблицаЦелевыхРазмеров);
	СтруктураЦелевыхРазмеров.Вставить("ТаблицаЦелевыхРазмеровПоВидуРасчета", ТаблицаЦелевыхРазмеровПоВидуРасчета);
	
	Возврат СтруктураЦелевыхРазмеров;
	
КонецФункции

//Возвращает целевой размер начисления "от обратного"
//
Функция ПолучитьЦелевойРазмерНачисленияОтОбратного(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = "")
	
	Если ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням	
			Или ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам Тогда
		
		НормаВремени = НормаВремениЗаМесяц(ИсходныеДанные, ИсходныеДанные.ВидУчетаВремени);
		ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные);
			
		ЦелевойРазмер = ?(НормаВремени = 0, 0, СтрокаДвижений.Показатель1 * ОтработаноВремениОсновное / НормаВремени);
		
		Если КомментироватьРасчет Тогда
			РаботаССообщениями.КомментарийРасчета("Тарифная ставка: " + СтрокаДвижений.Показатель1, КомментарийВидаРасчета);
			РаботаССообщениями.КомментарийРасчета("Норма времени за месяц: " + НормаВремени, КомментарийВидаРасчета);
			РаботаССообщениями.КомментарийРасчета("Оплачиваемое время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
			РаботаССообщениями.КомментарийРасчета("Вид учета времени: " + СтрокаДвижений.ВидУчетаВремени, КомментарийВидаРасчета);
			РаботаССообщениями.КомментарийРасчета("Сумма к выплате на руки: " + Окр(ЦелевойРазмер, 2), КомментарийВидаРасчета);
		КонецЕсли;
        		
	ИначеЕсли ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеОтОбратного Тогда
		
		ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные);
			
		ЦелевойРазмер = СтрокаДвижений.Показатель1 * ОтработаноВремениОсновное;
		
		Если КомментироватьРасчет Тогда
			РаботаССообщениями.КомментарийРасчета("Тарифная ставка: " + СтрокаДвижений.Показатель1, КомментарийВидаРасчета);
			РаботаССообщениями.КомментарийРасчета("Оплачиваемое время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
			РаботаССообщениями.КомментарийРасчета("Вид учета времени: " + СтрокаДвижений.ВидУчетаВремени, КомментарийВидаРасчета);
			РаботаССообщениями.КомментарийРасчета("Сумма к выплате на руки: " + ЦелевойРазмер, КомментарийВидаРасчета);
		КонецЕсли;
		
	Иначе
		
		ЦелевойРазмер = СтрокаДвижений.Показатель1;
		
		Если КомментироватьРасчет Тогда
			РаботаССообщениями.КомментарийРасчета("Сумма к выплате на руки: " + ЦелевойРазмер, КомментарийВидаРасчета);
		КонецЕсли;
		
	КонецЕсли;

	Возврат ЦелевойРазмер;
	
КонецФункции

// Проверяет необходимость выполнения перерасчета документа
// если в таблицах перерасчета по документу ссылка на который передана 
// есть хоть одна запись - возращает Истина
// Параметры:
//  Регистратор - ссылка на документ
// Возвращаемое значение:
//  булево
//
Функция НеобходимостьПерерасчета(Регистратор) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Перерасчет.ФизЛицо
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		Перерасчет.ФизЛицо КАК ФизЛицо
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
	|	
	|	ГДЕ
	|		Перерасчет.ОбъектПерерасчета = &парамРегистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		Перерасчет.ФизЛицо
	|	ИЗ
	|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
	|	
	|	ГДЕ
	|		Перерасчет.ОбъектПерерасчета = &парамРегистратор) КАК Перерасчет");
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
	Если Запрос.Выполнить().Пустой() Тогда 
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции  // НеобходимостьПерерасчета

// Проверяет правильность заполнения реквизитов вида расчета 
// для некуоторых случаев выдает сообщение об ошибке
// для некоторых - возвращает текст сообщения
// 	Параметры:
//		ВидРасчета - объект Вид расчета
//		Отказ - признак отказа (проверка не прошла)
//	Возвращаемое значение:
//		ТекстСообщения - текст сообщения о результате проверки
Функция ПроверитьНастройкуВидаРасчета(ВидРасчета, Отказ, ПроверятьСоответствиеБазовыхИВедущихРасчетов = Истина) Экспорт

    МетаданныеВидаРасчета = ВидРасчета.Метаданные();
	
	Если НЕ ЗначениеЗаполнено(ВидРасчета.Наименование) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо задать имя расчета!", Отказ);
	КонецЕсли; 
    
	ЕстьРеквизитСпособРасчета = МетаданныеВидаРасчета.Реквизиты.Найти("СпособРасчета") <> НеОпределено;
	Если ЕстьРеквизитСпособРасчета Тогда
		СпособРасчета = ВидРасчета.СпособРасчета;
		Если НЕ ЗначениеЗаполнено(СпособРасчета) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Необходимо задать способ расчета!", Отказ);
		КонецЕсли; 
	КонецЕсли;

    ЕстьРеквизитКатегорияНачисления = МетаданныеВидаРасчета.Реквизиты.Найти("КатегорияРасчета") <> НеОпределено;
	Если ЕстьРеквизитКатегорияНачисления И НЕ ЗначениеЗаполнено(ВидРасчета.КатегорияРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо задать категорию начислений!", Отказ);
	КонецЕсли; 

	// Вид расчета не может входить в собственную базу
    ВидРасчетаСсылка = ВидРасчета.Ссылка;

	// расчитываем на то, что данная функция вызывается для видов расчета с поддержкой базового периода
	Если ВидРасчета.БазовыеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  НеОпределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Вид расчета не может быть включен в состав собственной расчетной базы!", Отказ);
	КонецЕсли;

	Если ВидРасчета.ВедущиеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  НеОпределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Вид расчета не может быть включен в состав собственной таблицы ведущих видов расчета!", Отказ);
	КонецЕсли;
	
	// если поддерживается период действия
	Если МетаданныеВидаРасчета.ИспользованиеПериодаДействия Тогда
		Если ВидРасчета.ВытесняющиеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  НеОпределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Вид расчета не может быть включен в состав собственной таблицы вытесняющих видов расчета!", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если МетаданныеВидаРасчета.Реквизиты.Найти("ОблагаетсяИПН") <> Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ВидРасчета.ОблагаетсяИПН) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан способ обложения ИПН!", Отказ);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВидРасчета.ОблагаетсяОПВ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан способ обложения ОПВ!", Отказ);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВидРасчета.ОблагаетсяСН) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан способ обложения СН!", Отказ);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВидРасчета.ОблагаетсяСО) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан способ обложения СО!", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоРасчетОтОбратного(СпособРасчета) Тогда
		// Проверим на вхождение данного начисления в список включаемых расчтов от обратного
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВключаемыеВидыНачислений.Ссылка КАК Ссылка,
		|	ВключаемыеВидыНачислений.ВидРасчета КАК ВидРасчета
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВключаемыеВРасчетОтОбратногоВидыНачислений КАК ВключаемыеВидыНачислений
		|ГДЕ
		|	ВключаемыеВидыНачислений.ВидРасчета = &ВидРасчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВключаемыеВидыНачислений.Ссылка,
		|	ВключаемыеВидыНачислений.ВидРасчета
		|ИЗ
		|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ВключаемыеВРасчетОтОбратногоВидыНачислений КАК ВключаемыеВидыНачислений
		|ГДЕ
		|	ВключаемыеВидыНачислений.ВидРасчета = &ВидРасчета";
		
		Запрос.УстановитьПараметр("ВидРасчета", ВидРасчетаСсылка);
		ВыборкаПоВидамНачислений = Запрос.Выполнить().Выбрать();
		ТекстСообщения = "";
		Пока ВыборкаПоВидамНачислений.Следующий() Цикл 
			ТекстСообщения = 	ТекстСообщения + ?(НЕ ЗначениеЗаполнено(ТекстСообщения), "Данное начисление используется в качестве включаемого в начисления со способом расчета ""от обратного"": ", ", ") 
								+ """" + ВыборкаПоВидамНачислений.Ссылка + """";
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ТекстСообщения = ТекстСообщения + ". Установка формулы расчета ""от обратного"" невозможна!";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
		КонецЕсли;
				
	КонецЕсли;
	
    Если Отказ Тогда
	    Возврат "";
	КонецЕсли; 
	
	ТекстСообщения = "";
	// Проверим значение реквизита "Категория начисления"
	// Для ПВР "Удержания организаций" проверку пропустим.
	Если ЕстьРеквизитКатегорияНачисления и МетаданныеВидаРасчета <> Метаданные.ПланыВидовРасчета.УдержанияОрганизаций Тогда
		
		Если ЭтоРасчетОтОбратного(СпособРасчета) Тогда
			// список включаемых начислений проверяем только для расчета "от обратного"
			ИмяТЧ = "ВключаемыеВРасчетОтОбратногоВидыНачислений";
		Иначе
			ИмяТЧ = "БазовыеВидыРасчета"; // список базовых видов расчета проверяем всегда
		КонецЕсли;
	
		Запрос = Новый Запрос;
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыРасчета.ВидРасчета.КатегорияРасчета КАК КатегорияРасчета,
		|	ВидыРасчета.ВидРасчета.Наименование КАК Наименование";
		// Для дополнительных начислений организации добавим еще одно поле
		Если МетаданныеВидаРасчета = Метаданные.ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ВЫБОР
			|		КОГДА ВидыРасчета.ВидРасчета.ВидПремии ЕСТЬ NULL 
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК БазовыйВидаРасчетаДополнительный";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	ПланВидовРасчета."+МетаданныеВидаРасчета.Имя+"." + ИмяТЧ + " КАК ВидыРасчета
		|
		|ГДЕ
		|	ВидыРасчета.Ссылка = &парамТекущийВидРасчета";

		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("парамТекущийВидРасчета", ВидРасчетаСсылка);
		Категории = Запрос.Выполнить().Выгрузить();
			
		// Определение максимальной категории среди видов расчета, входящих в базу
		МаксимальныйИндексКатегории = -1;
		Если МетаданныеВидаРасчета = Метаданные.ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций Тогда
			
			БазовыеВРСоответствие = Новый Структура("ОсновныеВР,ДополнительныеВР", Ложь, Ложь);
			МаксимальныйИндексКатегории = ?(Категории.Количество() = 0, -1, 0);
				
			Для Каждого БазовыйРасчет Из Категории Цикл
				
				Если БазовыйРасчет.БазовыйВидаРасчетаДополнительный Тогда
					
					Если БазовыйРасчет.Наименование = Null Тогда
						Продолжить;
					КонецЕсли; 
					Если БазовыйРасчет.КатегорияРасчета = Перечисления.КатегорииРасчетов.ПустаяСсылка() Тогда
						Продолжить;
					КонецЕсли;
					ИндексКатегории = Перечисления.КатегорииРасчетов.Индекс(БазовыйРасчет.КатегорияРасчета);
					МаксимальныйИндексКатегории = Макс(МаксимальныйИндексКатегории, ИндексКатегории);
					БазовыеВРСоответствие.ДополнительныеВР = Истина;
				Иначе
					БазовыеВРСоответствие.ОсновныеВР = Истина;
					Продолжить
				КонецЕсли; 
				
			КонецЦикла;
			
		Иначе
			
			Для Каждого БазовыйРасчет Из Категории Цикл
				Если БазовыйРасчет.Наименование = Null Тогда
					Продолжить;
				КонецЕсли; 
				Если БазовыйРасчет.КатегорияРасчета = Перечисления.КатегорииРасчетов.ПустаяСсылка() Тогда
					Продолжить;
				КонецЕсли;
				ИндексКатегории = Перечисления.КатегорииРасчетов.Индекс(БазовыйРасчет.КатегорияРасчета);
				МаксимальныйИндексКатегории = Макс(МаксимальныйИндексКатегории, ИндексКатегории);
				
			КонецЦикла;
			
		КонецЕсли;

		Если МаксимальныйИндексКатегории = Перечисления.КатегорииРасчетов.Количество()-1 Тогда

			// В базе расчетов есть расчеты с максимальной категорией
			Если ИмяТЧ = "БазовыеВидыРасчета" Тогда
				ТекстСообщения = "Откорректируйте состав базовых видов расчетов. В базу расчетов не должны входить расчеты с категорией начислений ""Зависимое третьего уровня""!.";
			ИначеЕсли ИмяТЧ = "ВключаемыеВРасчетОтОбратногоВидыНачислений" Тогда
				ТекстСообщения = "Откорректируйте состав включаемых в расчет ""от обратного"" видов начислений. В него не должны входить расчеты с категорией начислений ""Зависимое третьего уровня""!.";
			КонецЕсли;

		Иначе
			// Категория начислений вида расчета должна быть на уровень выше любого из видов расчетов, составляющих базу расчета
			Если МаксимальныйИндексКатегории = -1 Тогда
				МаксимальнаяКатегорияБазы = Перечисления.КатегорииРасчетов.ПустаяСсылка();
			Иначе
				МаксимальнаяКатегорияБазы = Перечисления.КатегорииРасчетов.Получить(МаксимальныйИндексКатегории);
			КонецЕсли;
			Если МетаданныеВидаРасчета = Метаданные.ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций Тогда
				Если БазовыеВРСоответствие.ДополнительныеВР Тогда
					ИндексВыбраннойКатегории = Перечисления.КатегорииРасчетов.Индекс(ВидРасчета.КатегорияРасчета);
				ИначеЕсли БазовыеВРСоответствие.ОсновныеВР Тогда
					ИндексВыбраннойКатегории = МаксимальныйИндексКатегории +1;
				Иначе
					ИндексВыбраннойКатегории = Перечисления.КатегорииРасчетов.Индекс(ВидРасчета.КатегорияРасчета);
				КонецЕсли;
			Иначе
				ИндексВыбраннойКатегории = Перечисления.КатегорииРасчетов.Индекс(ВидРасчета.КатегорияРасчета);
			КонецЕсли;
			ОжидаемаяКатегория = Перечисления.КатегорииРасчетов.Получить(МаксимальныйИндексКатегории +1);
		 		
			Если ИндексВыбраннойКатегории <= МаксимальныйИндексКатегории Тогда
				// Пользователь установил категорию меньше чем самая максимальная категория базы расчетов
				Если ИмяТЧ = "БазовыеВидыРасчета" Тогда
					ТекстСообщения = "Неверно установлена категория начислений. В базу расчетов входят расчеты с категорией """ + МаксимальнаяКатегорияБазы + """. Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """!";
				ИначеЕсли ИмяТЧ = "ВключаемыеВРасчетОтОбратногоВидыНачислений" Тогда
					ТекстСообщения = "Неверно установлена категория начислений. В список включаемых в расчет ""от обратного"" видов начислений входят расчеты с категорией """ + МаксимальнаяКатегорияБазы + """. Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """!";
				КонецЕсли;
			ИначеЕсли ИндексВыбраннойКатегории > МаксимальныйИндексКатегории +1 тогда
				// Категория слишком большая - предупредим
				Если МаксимальныйИндексКатегории = -1 Тогда  // нет в базе ничего
					Если ЕстьРеквизитСпособРасчета Тогда
						Если СпособРасчетаТребуетБазовыйПериод(СпособРасчета,
																ВидРасчета.Показатель1,
																ВидРасчета.Показатель2,
																ВидРасчета.Показатель3,
																ВидРасчета.Показатель4,
																ВидРасчета.Показатель5) Тогда
							ТекстСообщения = "Рекомендуется заполнить базовые начисления!";
						Иначе
							Если ИмяТЧ = "БазовыеВидыРасчета" Тогда
								ТекстСообщения = "Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """, т.к. для вида расчета не заданы базовые начисления или для базовых начислений не заданы категории начисления!";
							ИначеЕсли ИмяТЧ = "ВключаемыеВРасчетОтОбратногоВидыНачислений" Тогда
								ТекстСообщения = "Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """, т.к. для вида расчета не заданы включаемые в расчет ""от обратного"" начисления или для них не заданы категории начисления!";
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если ИмяТЧ = "БазовыеВидыРасчета" Тогда
						ТекстСообщения = "Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """, т.к. максимальной категорией среди базовых расчетов является категория """ + МаксимальнаяКатегорияБазы + """!";
					ИначеЕсли ИмяТЧ = "ВключаемыеВРасчетОтОбратногоВидыНачислений" Тогда
						ТекстСообщения = "Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """, т.к. максимальной категорией среди включаемых в расчет ""от обратного"" начислений является категория """ + МаксимальнаяКатегорияБазы + """!";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
 				
	КонецЕсли; 
	
	// Проверим соответствие списков базовых и ведущих расчетов
	Если ПроверятьСоответствиеБазовыхИВедущихРасчетов Тогда
		Для Каждого СтрокаБазовыйРасчет из ВидРасчета.БазовыеВидыРасчета Цикл
			
			Если СтрокаБазовыйРасчет.ВидРасчета = Неопределено Тогда
				ТекстСообщения = ТекстСообщения + ?(НЕ ЗначениеЗаполнено(ТекстСообщения),"",Символы.ПС) + "В строке " + СтрокаБазовыйРасчет.НомерСтроки + " базовых видов расчета не указан вид расчета!";
				Продолжить
			КонецЕсли;
		   
			Если СтрокаБазовыйРасчет.ВидРасчета.Ссылка = Неопределено Тогда
			   ТекстСообщения = ТекстСообщения + ?(НЕ ЗначениеЗаполнено(ТекстСообщения),"",Символы.ПС) + "В строке " + СтрокаБазовыйРасчет.НомерСтроки + " базовых видов расчета не указан вид расчета!"
			Иначе
			
				Если ВидРасчета.ВедущиеВидыРасчета.Найти(СтрокаБазовыйРасчет.ВидРасчета,"ВидРасчета") = Неопределено Тогда
					ТекстСообщения = ТекстСообщения + ?(НЕ ЗначениеЗаполнено(ТекстСообщения),"",Символы.ПС) + "Список ведущих видов расчета отличается от списка базовых расчетов. Рекомендуется синхронизировать указанные списки!";
					Прервать;
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЦикла; 
	КонецЕсли; 
	
	ИспользуетсяСхемаМотивации = МетаданныеВидаРасчета.Реквизиты.Найти("Показатель1") <> НеОпределено;
	Если ИспользуетсяСхемаМотивации Тогда
		
		Показатель1 = ВидРасчета.Показатель1;
		Показатель2 = ВидРасчета.Показатель2;
		Показатель3 = ВидРасчета.Показатель3;
		Показатель4 = ВидРасчета.Показатель4;
		
		СписокСпособов = ПолучитьСписокВариантовУпрНачислений();
		Если СписокСпособов.НайтиПоЗначению(СпособРасчета) <> Неопределено Тогда
			// Первый показатель
			Если НЕ ЗначениеЗаполнено(Показатель1) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не заполнен реквизит ""Показатель 1""!",Отказ);
			ИначеЕсли (Показатель1.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная)
				Или (Показатель1.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая) Тогда			
				ОбщегоНазначения.СообщитьОбОшибке("Первый показатель не может быть шкалой!",Отказ);
			КонецЕсли;
			Если СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.П1 Тогда
				// Второй показатель
				Если НЕ ЗначениеЗаполнено(Показатель2) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не заполнен реквизит ""Показатель 2""!",Отказ);
					Отказ = Истина;
				ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ОП2 
						Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П3ДП1ОП2 
						Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ОП2ДП3 
						Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ОП2УП3 Тогда 
					Если (Показатель2.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная)
					И (Показатель2.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая) Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Показатель 2 должен быть шкалой!",Отказ);
					КонецЕсли;
				Иначе
					Если (Показатель2.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная)
					Или (Показатель2.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая) Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Показатель 2 не может быть шкалой!",Отказ);
					КонецЕсли;
				КонецЕсли;
				Если СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.П1  
					И СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.П1ОП2 
					И СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.МаксП1ВП2_0 
					И СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.П1УП2 Тогда
					//Третий показатель
					Если НЕ ЗначениеЗаполнено(Показатель3) Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Не заполнен реквизит ""Показатель 3""!",Отказ);
					ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ДП2ОП3 
						Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2ОП3 Тогда 
						Если (Показатель3.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная)
						И (Показатель3.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая) Тогда
							ОбщегоНазначения.СообщитьОбОшибке("Показатель 3 должен быть шкалой!",Отказ);
						КонецЕсли;
					Иначе
						Если (Показатель3.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная)
						Или (Показатель3.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая) Тогда
							ОбщегоНазначения.СообщитьОбОшибке("Показатель 3 не может быть шкалой!",Отказ);
						КонецЕсли;
					КонецЕсли;
					Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2УП3ДП4 Тогда
						Если НЕ ЗначениеЗаполнено(Показатель4) Тогда
							ОбщегоНазначения.СообщитьОбОшибке("Не заполнен реквизит ""Показатель 4""!",Отказ);
							Отказ = Истина;
						КонецЕсли;
					ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2_П5ДП3УП4 
						Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2ДП3ВП4_0 Тогда
						Если НЕ ЗначениеЗаполнено(Показатель3) Тогда
							ОбщегоНазначения.СообщитьОбОшибке("Не заполнен реквизит ""Показатель 3""!",Отказ);
							Отказ = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3ОП4
				 Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МинП1_П2УП3ОП4 Тогда 						
					Если (Показатель4.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная)
					   И (Показатель4.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая) Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Показатель 4 должен быть шкалой!",Отказ);
					КонецЕсли;
				Иначе
					Если (Показатель4.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная)
					 Или (Показатель4.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая) Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Показатель 4 не может быть шкалой!",Отказ);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Если ВР связан со средним заработком, проверим, что бы был заполнен реквизит "ПериодРасчетаСреднегоЗаработка"
	ЕстьРеквизитПериодРасчетаСреднегоЗаработка = МетаданныеВидаРасчета.Реквизиты.Найти("ПериодРасчетаСреднегоЗаработка") <> НеОпределено;
	Если ЕстьРеквизитСпособРасчета и ЕстьРеквизитПериодРасчетаСреднегоЗаработка Тогда
	
		Если ПолучитьСписокНачисленийПоСреднемуЗаработку().НайтиПоЗначению(СпособРасчета) <> НеОпределено Тогда
			Если НЕ ЗначениеЗаполнено(ВидРасчета.ПериодРасчетаСреднегоЗаработка) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Необходимо задать количество месяцев для расчета среднего заработка!", Отказ);
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат ТекстСообщения;

КонецФункции

// Возвращает список категорий начислений, доступных для способа расчета
Функция ПолучитьСписокКатегорийНачисленийСпособаРасчета(СпособРасчета) Экспорт

	СписокКатегорий = Новый СписокЗначений;	
	Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом  Тогда
		СписокКатегорий.Добавить(Перечисления.КатегорииРасчетов.ЗависимоеПервогоУровня);
		СписокКатегорий.Добавить(Перечисления.КатегорииРасчетов.ЗависимоеВторогоУровня);
		СписокКатегорий.Добавить(Перечисления.КатегорииРасчетов.ЗависимоеТретьегоУровня);
	Иначе//СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой
		СписокКатегорий.Добавить(Перечисления.КатегорииРасчетов.Первичное);
	КонецЕсли; 

	Возврат СписокКатегорий;

КонецФункции // рзСписокКатегорийНачисленийСпособаРасчета()

// Возвращает вид учета времени в зависимости от вида расчета и вида графика 
Функция ПолучитьВидУчетаВремени(СпособРасчета, СуммированныйУчетРабочегоВремени) Экспорт
	
	// вид учета времени определяется по способу расчета
	
	Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеОтОбратного
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммойДляПочасовогоОтклонения 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения Тогда
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда	
		
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоНочнымЧасам;
		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения тогда
		
		Если СуммированныйУчетРабочегоВремени = Истина 
				Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения Тогда
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
		Иначе	
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням
		КонецЕсли; 
		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке
			  или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням
			  или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням
			  или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням 
			  или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням 
			  или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням 
			  или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке Тогда
		
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
		
	Иначе
		Если СуммированныйУчетРабочегоВремени = Истина Тогда
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
		Иначе
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидУчетаВремени;
КонецФункции

// рассчитываем сумму за работу в документах сдельной выработки
//
// Параметры
//  ТекущиеДанные - данные строки т.ч. Выработка
//  РассчитыватьСуммуЗаРаботуВВалютеРасценки - булево, флажок пересчета суммы в валюте расценки
//
Процедура РассчитатьСуммуЗаРаботу(ТекущиеДанные, Дата, ВалютаРегламентированногоУчета, ВалютаУпрУчета, КурсВалютыУпрУчета, КратностьВалютыУпрУчета, РассчитыватьСуммуЗаРаботуВВалютеРасценки = Истина) Экспорт

	Если РассчитыватьСуммуЗаРаботуВВалютеРасценки Тогда
		ТекущиеДанные.СуммаЗаРаботуВВалютеРасценки = ТекущиеДанные.Расценка * ТекущиеДанные.Количество;
	КонецЕсли;
	
	Если ТекущиеДанные.Валюта = ВалютаРегламентированногоУчета Тогда
		КурсВылютыРасценки = 1;
		КратностьВылютыРасценки = 1;
	ИначеЕсли ТекущиеДанные.Валюта = ВалютаУпрУчета Тогда	
		КурсВылютыРасценки = КурсВалютыУпрУчета;
		КратностьВылютыРасценки = КратностьВалютыУпрУчета;
	Иначе	
		Структура = РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ТекущиеДанные.Валюта));
		КурсВылютыРасценки = Структура.Курс;
		КратностьВылютыРасценки = Структура.Кратность;
	КонецЕсли; 
	
	ТекущиеДанные.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ТекущиеДанные.СуммаЗаРаботуВВалютеРасценки,ТекущиеДанные.Валюта,ВалютаУпрУчета,
							КурсВылютыРасценки, КурсВалютыУпрУчета, КратностьВылютыРасценки, КратностьВалютыУпрУчета);
	ТекущиеДанные.СуммаРегл = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ТекущиеДанные.СуммаЗаРаботуВВалютеРасценки,ТекущиеДанные.Валюта,ВалютаРегламентированногоУчета,
							КурсВылютыРасценки, 1, КратностьВылютыРасценки, 1);
	
КонецПроцедуры // РассчитатьСуммуЗаРаботу()

// Функция возвращет структуру с правилами округления результата указанного вида расчета
//
// Параметры:
//	ВидРасчета - вид расчета начисления/удержания/налог/сбор/отчисление
//	ПериодРегистрации - дата месяца, в котором производится расчет
//
// Возвращаемое значение:
//	Структура с двумя ключами:
//		ПорядокОкругления - значение перечисления ПорядкиОкругления
//		МетодОкругления - значение перечисления МетодыОкругления
//
Функция ПолучитьПравилоОкругленияВидаРасчета(ВидРасчета, ПериодРегистрации) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидРасчета", ВидРасчета);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	ПорядокОкругленияВР.ПорядокОкругления,
	|	ПорядокОкругленияВР.МетодОкругления
	|ИЗ
	|	РегистрСведений.ПорядокОкругленияРезультатовРасчетаЗарплаты.СрезПоследних(
	|		&ПериодРегистрации, 
	|		ВидРасчета = &ВидРасчета) КАК ПорядокОкругленияВР
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	ПорядокОкругленияОбщ.ПорядокОкругления,
	|	ПорядокОкругленияОбщ.МетодОкругления
	|ИЗ
	|	РегистрСведений.ПорядокОкругленияРезультатовРасчетаЗарплаты.СрезПоследних(
	|		&ПериодРегистрации, 
	|		ВидРасчета = НЕОПРЕДЕЛЕНО) КАК ПорядокОкругленияОбщ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет
	|";

	СтруктураПравила = Новый Структура();
	СтруктураПравила.Вставить("ПорядокОкругления", Перечисления.ПорядкиОкругления.Окр0_01);
	СтруктураПравила.Вставить("МетодОкругления", Перечисления.МетодыОкругления.ПоАрифметическимПравилам);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураПравила.ПорядокОкругления 	= Выборка.ПорядокОкругления;
		СтруктураПравила.МетодОкругления 	= Выборка.МетодОкругления;
		Прервать;
	КонецЦикла;

	Возврат СтруктураПравила;

КонецФункции // ПолучитьПравилоОкругленияВидаРасчета()

// Фукнция рассчитывается число рабочих дней или часов для оплаты компенсации за неиспользованный отпуск
// по заданному числу календарных дней и дате отсчета
//
// Параметры:
// 	ФизЛицо, Приказ, Организация - данные о работнике
//	ДатаКомпенсации - дата предоставления компенсации, от которой отсчитывается период
//	ЧислоКалендарныхДней - число календарных дней компенсации
//
Функция РассчитатьЧислоРабочихДнейЧасовКомпенсацииОтпуска(ФизЛицо, Приказ, Организация, ДатаКомпенсации, ЧислоКалендарныхДней) Экспорт

	Результат = 0;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("Приказ", Приказ);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаКомпенсации", ДатаКомпенсации);
	
	// определим график работы на момент предоставления компенсации
	ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка;
	Если ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка = Перечисления.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка.ФактическийГрафикРаботыСотрудника Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГрафикиРаботыФизЛиц.Ссылка КАК ПерсональныйГрафик, 
		|	РаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы,
		|	ЕСТЬNULL(РаботникиОрганизации.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаКомпенсации,
		|			ФизЛицо = &ФизЛицо
		|			И Приказ = &Приказ
		|			И Организация = &Организация) КАК РаботникиОрганизации
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыФизЛиц КАК ГрафикиРаботыФизЛиц
		|		ПО РаботникиОрганизации.ГрафикРаботы = ГрафикиРаботыФизЛиц.ГрафикРаботы
		|			И ГрафикиРаботыФизЛиц.ФизЛицо = &ФизЛицо
		|			И ГрафикиРаботыФизЛиц.Приказ = &Приказ
		|			И ГрафикиРаботыФизЛиц.Организация = &Организация
		|			И ЕСТЬNULL(РаботникиОрганизации.ГрафикРаботы.ИспользуетсяСовместноСПланГрафиком, ЛОЖЬ)
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		ГрафикРаботы = Неопределено;
		ПерсональныйГрафик = Неопределено;
		СуммированныйУчетРабочегоВремени = Ложь;
		Если Выборка.Следующий() Тогда
			ГрафикРаботы = Выборка.ГрафикРаботы;
			ПерсональныйГрафик = Выборка.ПерсональныйГрафик;
			СуммированныйУчетРабочегоВремени = Выборка.СуммированныйУчетРабочегоВремени;
		КонецЕсли;
	Иначе
		// рассчитываем по основному графику работы предприятия
		ГрафикРаботы = Константы.ОсновнойГрафикРаботыПредприятия.Получить();
		ПерсональныйГрафик = Неопределено;
		СуммированныйУчетРабочегоВремени = ГрафикРаботы.СуммированныйУчетРабочегоВремени;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	Запрос.УстановитьПараметр("ПерсональныйГрафик", ПерсональныйГрафик);
	
	// найдем первый рабочий день от даты компенсации, с которого будем осуществлять отсчет
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГрафикиРаботыПоВидамВремени.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ГрафикРаботы
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|	И ГрафикиРаботыПоВидамВремени.Дата >= &ДатаКомпенсации
	|	И ГрафикиРаботыПоВидамВремени.ОсновноеЗначение <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГрафикиРаботыПоВидамВремени.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ПерсональныйГрафик
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|	И ГрафикиРаботыПоВидамВремени.Дата >= &ДатаКомпенсации
	|	И ГрафикиРаботыПоВидамВремени.ОсновноеЗначение <> 0
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаНачала = Выборка.Дата;
	Иначе
		ДатаНачала = ДатаКомпенсации;
	КонецЕсли;
	
	// определим дата окончания периода по числу календарных дней
	ДатаОкончания = ПолучитьДатуОкончанияПоЧислуДнейПериода(ДатаНачала, ЧислоКалендарныхДней);
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ПроизводственныйКалендарьКалендарныеДни) КАК КалендарныхДней,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) КАК ЧислоДней,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ЧислоЧасов
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ГрафикРаботы
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|	И ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ПроизводственныйКалендарьКалендарныеДни) КАК КалендарныхДней,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) КАК ЧислоДней,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ЧислоЧасов
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ПерсональныйГрафик
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|	И ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// из-за того, что план-график может быть заполнен только за текущий месяц, а дней компенсации - много,
		// то ведем подсчет по тому графику (основному либо план-графику), где представлен весь период 
		Если Выборка.КалендарныхДней = ЧислоКалендарныхДней Тогда
			Если СуммированныйУчетРабочегоВремени Тогда
				Результат = Выборка.ЧислоЧасов;
			Иначе
				Результат = Выборка.ЧислоДней;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции // РассчитатьЧислоРабочихДнейЧасовКомпенсацииОтпуска()

/////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ ДЛЯ РАБОТЫ С НАЛОГАМИ, ВЗНОСАМИ И ОТЧИСЛЕНИЯМ С ЗАРПЛАТЫ

// Заполняет набор записей по переданным данным расчета ИПН
//
// Параметры: 
//  НаборЗаписей - набор записей регистра ИПНРасчетыСБюджетом
//	ТаблицаДанныеИПН - таблица значений - данные расчета ИПН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымИПН(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено) Экспорт

	Если ПериодРегистрации >= '20090101' Тогда
		ЗаполнитьНаборЗаписейПоДаннымИПНПосле2009(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, КомментарийВидаРасчета, ФизЛицо);
	Иначе
		ЗаполнитьНаборЗаписейПоДаннымИПНДо2009(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, КомментарийВидаРасчета, ФизЛицо);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымИПН()

// Заполняет набор записей по переданным данным расчета ИПН
//
// Параметры: 
//  НаборЗаписей - набор записей регистра ИПНРасчетыСБюджетом
//	ТаблицаДанныеИПН - таблица значений - данные расчета ИПН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымИПНДо2009(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено)
	
	// правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;

	УжеИсчислили = 0;
	УжеПрименилиВычет = 0;
	УжеПрименилиЛьготу = 0;
	ТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	ТекущийГод = 0;
	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ИПН
	РаботникиДляРасчетаИПН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения	
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ПримененныйВычет, ПримененнаяЛьгота, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
				СтруктураСтроки.ПримененныйВычет = 0;
				СтруктураСтроки.ПримененнаяЛьгота = 0;
			КонецЕсли;
			РаботникиДляРасчетаИПН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;
	Иначе
		// при расчете всех строк - сохраняем только список физлиц (без сумм)
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			РаботникиДляРасчетаИПН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета ИПН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;
	Если КомментироватьРасчет Тогда
		// комментарий для расчет ИПН реализован только начиная с 2007 года - начало комментария формируется в документе РасчетУдержанийРаботниковОрганизаций
		ЕстьПодробныйКомментарий = ТаблицаДанныеИПН.Колонки.Найти("СуммаДоходаВсего") <> Неопределено;
	КонецЕсли;
	
	Для Каждого ДанныеИПН Из ТаблицаДанныеИПН Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеИПН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ДанныеИПН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеИПН.Период, ПравилоОкругления);
		КонецЕсли;
	
		// проверим заполненность необходимых реквизитов
		Если ДанныеИПН.Период >= '20070101' Тогда
			// комментарии и проверки реализованы только в расчете после 2007 года
			Если ДанныеИПН.ПроцентСтавки = 0 Тогда
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахИПНиСН.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не заполнено значение ставки индивидуального подоходного налога", РасшифровкаСтавки, -99);  // т.к. порядок сообщения для комментария ИПН=-100, то сообщения сразу выводим за ним
				БылаОшибка = Истина;
			КонецЕсли;
			
			Если ДанныеИПН.РазмерМЗП = 0 Тогда
				РасшифровкаМЗП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не определен размер минимальной заработной платы", РасшифровкаМЗП, -98);
				БылаОшибка = Истина;
			КонецЕсли;
			
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизлицо <> ДанныеИПН.ФизЛицо ИЛИ ТекущийГод <> Год(ДанныеИПН.Период) Тогда
			УжеИсчислили = 0;
			УжеПрименилиВычет = 0;
			УжеПрименилиЛьготу = 0;
			ТекущееФизлицо = ДанныеИПН.ФизЛицо;
			ТекущийГод = Год(ДанныеИПН.Период);
		КонецЕсли;
		
		РанееНалогИсчисленный = ?(ДанныеИПН.РанееНалогИсчисленный = null, 0, ДанныеИПН.РанееНалогИсчисленный);
		Если ДанныеИПН.Период >= '20070101' Тогда
			НалогИсчисленный = ?(ДанныеИПН.НалогИсчисленный = null, 0, ДанныеИПН.НалогИсчисленный);
			ВычетПримененный = ДанныеИПН.ПримененныйВычет;
		Иначе
			НалогИсчисленный = ?(ДанныеИПН.НалогИсчисленный = null, 0, ДанныеИПН.НалогИсчисленный) - УжеИсчислили;
			ВычетПримененный = ДанныеИПН.ПримененныйВычет - УжеПрименилиВычет;
		КонецЕсли;
		ЛьготаПримененная = ДанныеИПН.ПримененнаяЛьгота - УжеПрименилиЛьготу;
		
		// Округлим результат
		НалогИсчисленный 	= ОбщегоНазначения.ОкруглитьЧисло(НалогИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		ВычетПримененный 	= ОбщегоНазначения.ОкруглитьЧисло(ВычетПримененный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		ЛьготаПримененная 	= ОбщегоНазначения.ОкруглитьЧисло(ЛьготаПримененная, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		НалогИсчисленный = НалогИсчисленный - РанееНалогИсчисленный;
		
		Если КомментироватьРасчет Тогда
		   
		   	Если ДанныеИПН.Период = ПериодРегистрации ИЛИ НалогИсчисленный <> 0 Тогда
		   	
		   		Если ЕстьПодробныйКомментарий Тогда
		   		
					РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеИПН.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"000"); // "000" - первая строка с месяцем
				
					МассивПараметровРасшифровки = Новый Массив;
					МассивПараметровРасшифровки.Добавить(ДанныеИПН.ФизЛицо);
					
					РаботаССообщениями.КомментарийРасчета("Начислено доходов: " + ДанныеИПН.СуммаДоходаВсего, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"010");
					Если ДанныеИПН.СуммаНеоблагаемогоДохода <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Доходы, не подлежащие налогообложению: " + ДанныеИПН.СуммаНеоблагаемогоДохода, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"020");
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("ОПВ за месяц: " + ДанныеИПН.ОПВЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"030");
					
					РасшифровкаВычета = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьНалогиФизЛица", МассивПараметровРасшифровки);
					Если ДанныеИПН.ПримененныйВычетЗаМесяц <> 0 Тогда
						Если ДанныеИПН.РанееПримененныйНалоговыйВычет <> 0 Тогда
							КомментарийВычета = РаботаССообщениями.КомментарийРасчета("Предоставлен вычет: " + ВычетПримененный, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"040");
							РаботаССообщениями.КомментарийРасчета("Вычет за месяц: ", КомментарийВычета, ДанныеИПН.ПримененныйВычетЗаМесяц, РасшифровкаВычета);
							РаботаССообщениями.КомментарийРасчета("Ранее предоставлен вычет за месяц: " + ДанныеИПН.РанееПримененныйНалоговыйВычет, КомментарийВычета);
						Иначе
							РаботаССообщениями.КомментарийРасчета("Предоставлен вычет: ", КомментарийВидаРасчета, ВычетПримененный, РасшифровкаВычета, , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"040");
						КонецЕсли;
					Иначе
						КомментарийВычета = РаботаССообщениями.КомментарийРасчета("Вычет за месяц не предоставлен:", КомментарийВидаРасчета, , , Перечисления.ВидыСообщений.ВажнаяИнформация, , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"040");	
						Если ДанныеИПН.ПризнакПрименениеВычета = 0 Тогда
							РаботаССообщениями.КомментарийРасчета("", КомментарийВычета, "Заявление на вычет не зарегистрировано", РасшифровкаВычета);
						КонецЕсли;
						Если ДанныеИПН.ПризнакФизЛицоНеРезидент <> 0 Тогда
							РасшифровкаГражданства = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьГражданствоФизЛица", МассивПараметровРасшифровки);
							РаботаССообщениями.КомментарийРасчета("", КомментарийВычета, "Лицо не является налоговым резидентом РК", РасшифровкаГражданства);
						КонецЕсли;
						Если ДанныеИПН.НормаДнейПоПятидневке < ДанныеИПН.НормаДнейПоПроизводственномуКалендарю / 2 Тогда
							КомментарийВычета = РаботаССообщениями.КомментарийРасчета("Отработано менее половины месяца по пятидневке:", КомментарийВычета);
							РаботаССообщениями.КомментарийРасчета("Рабочих дней: " + ДанныеИПН.НормаДнейПоПроизводственномуКалендарю, КомментарийВычета);
							РаботаССообщениями.КомментарийРасчета("Учитывается для вычета: " + ДанныеИПН.НормаДнейПоПятидневке, КомментарийВычета);
						КонецЕсли;
					КонецЕсли;

					// т.к в комментарий могут еще попасть сообщения о плановых налоговых вычетах (страховых, жилищных),
					// которые рассчитываются в документе "РасчетУдержанийРаботниковОрганизаций", то ниже следующим
					// комментариям назначаем порядок сообщения больший, чем "100" ("100" - это порядок сообщения для плановых вычетов)
					
					Если ДанныеИПН.ЛьготаЗаГод <> 0 Тогда
						
						КомментарийЛьготы = РаботаССообщениями.КомментарийРасчета("Предоставлена льгота: " + ЛьготаПримененная, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"200");
					
						Если ДанныеИПН.ПризнакЛьготаУчастникаВОВ <> 0 Тогда
							Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбУчастникеВОВФизЛица", МассивПараметровРасшифровки);
							РаботаССообщениями.КомментарийРасчета("", КомментарийЛьготы, "Является лицом, приравненным к участникам ВОВ", Расшифровка);
						КонецЕсли;
						Если ДанныеИПН.ПризнакЛьготаПоИнвалидности <> 0 Тогда
							Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбИнвалидностиФизЛица", МассивПараметровРасшифровки);
							Если ДанныеИПН.ЛьготаЗаГод > 90000000 Тогда
			 					РаботаССообщениями.КомментарийРасчета("", КомментарийЛьготы, "Является инвалидом I или II группы, льгота без ограничения дохода", Расшифровка);
			 				Иначе
			 					РаботаССообщениями.КомментарийРасчета("", КомментарийЛьготы, "Является инвалидом III группы, льгота до 27 МЗП: " + ДанныеИПН.ЛьготаЗаГод, Расшифровка);
			 					Если ДанныеИПН.РанееПримененнаяЛьгота <> 0 Тогда
			 						РаботаССообщениями.КомментарийРасчета("Ранее уже предоставлена льгота " + ДанныеИПН.РанееПримененнаяЛьгота, КомментарийЛьготы);
			 					КонецЕсли;
			 				КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					РаботаССообщениями.КомментарийРасчета("Облагаемый доход: " + ДанныеИПН.ОблагаемаяСумма, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"300");
					РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахИПНиСН.ПолучитьФормуСписка().Открыть();");
					РаботаССообщениями.КомментарийРасчета("Процент ИПН: ", КомментарийВидаРасчета, ДанныеИПН.ПроцентСтавки, РасшифровкаСтавки, , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"400");
					Если ДанныеИПН.РанееНалогИсчисленный <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("ИПН за месяц: " + ДанныеИПН.ИПНЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"500");
						РаботаССообщениями.КомментарийРасчета("Ранее исчисленный ИПН: " + ДанныеИПН.РанееНалогИсчисленный, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"600");
					КонецЕсли;
					
				КонецЕсли;
				
				РаботаССообщениями.КомментарийРасчета("Исчисленный ИПН: " + НалогИсчисленный, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"700");
			
			КонецЕсли;
			
		КонецЕсли;
		
		Если 	НалогИсчисленный = 0 и 
				ВычетПримененный = 0 и 
				ЛьготаПримененная = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.ФизЛицо                		= ДанныеИПН.ФизЛицо;
			Движение.СтруктурнаяЕдиница				= Организация;
			Движение.МесяцНалоговогоПериода    		= ДанныеИПН.Период;
			Движение.Организация            		= Организация;
			Движение.Налогоплательщик          		= Налогоплательщик;

			// Ресурсы
			Движение.Налог						= НалогИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
			Движение.ПримененныйВычет			= ВычетПримененный;
			Движение.ПримененнаяЛьгота			= ЛьготаПримененная;
		КонецЕсли;
		
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеИПН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеИПН.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаИПН.Удалить(ДанныеИПН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеИПН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ПримененныйВычет				= ВычетПримененный;
		Строка.ПримененнаяЛьгота			= ЛьготаПримененная;
		Строка.МесяцНалоговогоПериода 		= ДанныеИПН.Период;
		
		// Запомним суммы для следующей итерации
		УжеИсчислили = УжеИсчислили + НалогИсчисленный;
		УжеПрименилиВычет = УжеПрименилиВычет + ВычетПримененный;
		УжеПрименилиЛьготу = УжеПрименилиЛьготу + ЛьготаПримененная;

	КонецЦикла;
	
	// заполним ИсчисленныйИПН
	Для Каждого Элемент Из РаботникиДляРасчетаИПН Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйИПН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйИПН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйИПН.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Налог, ПримененныйВычет, ПримененнаяЛьгота");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйИПН);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
			
			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Налог, ПримененныйВычет, ПримененнаяЛьгота"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Налог, ПримененныйВычет, ПримененнаяЛьгота");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымИПНДо2009()

// Заполняет набор записей по переданным данным расчета ИПН
//
// Параметры: 
//  НаборЗаписей - набор записей регистра ИПНРасчетыСБюджетом
//	ТаблицаДанныеИПН - таблица значений - данные расчета ИПН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымИПНПосле2009(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено)
	
	// правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	СоответствиеСтавкиИПН = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ИПН
	РаботникиДляРасчетаИПН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения	
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ПримененныйВычет, ПримененнаяЛьгота, МесяцНалоговогоПериода, РазрешенныйВычет");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
				СтруктураСтроки.ПримененныйВычет = 0;
				СтруктураСтроки.ПримененнаяЛьгота = 0;
				СтруктураСтроки.РазрешенныйВычет = 0;
			КонецЕсли;
			РаботникиДляРасчетаИПН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;
	Иначе
		// при расчете всех строк - сохраняем только список физлиц (без сумм)
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			РаботникиДляРасчетаИПН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета ИПН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	
	Для Каждого ДанныеИПН Из ТаблицаДанныеИПН Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеИПН.Период);
	
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеИПН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ДанныеИПН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеИПН.Период, ПравилоОкругления);
		КонецЕсли;
	
		// получим ставку ИПН
		ПроцентСтавки = СоответствиеСтавкиИПН[ДанныеИПН.Период];
		Если ПроцентСтавки = Неопределено Тогда
			ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ДанныеИПН.Период);
			СоответствиеСтавкиИПН.Вставить(ДанныеИПН.Период, ПроцентСтавки);			
		КонецЕсли;
		
		// проверим заполненность необходимых реквизитов
		Если НЕ ЗначениеЗаполнено(ПроцентСтавки) Тогда
			РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не заполнено значение ставки индивидуального подоходного налога", РасшифровкаСтавки, -99);  // т.к. порядок сообщения для комментария ИПН=-100, то сообщения сразу выводим за ним
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если ДанныеИПН.РазмерМЗП = 0 Тогда
			РасшифровкаМЗП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не определен размер минимальной заработной платы", РасшифровкаМЗП, -98);
			БылаОшибка = Истина;
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		// расчет результата
		ОблагаемыйДоход = ДанныеИПН.ОблагаемыйДоход;
		
		// сумма невыбранной льготы
		
		// т.к. одно физлицо может присутствовать в нескольких документах расчета за один месяц, 
		// то определим "чистую" сумму льготы, приходящейся на прошлые месяцы
		ПримененнаяЛьготаЗаПрошлыеМесяцы = ДанныеИПН.ПримененнаяЛьготаЗаГод - ДанныеИПН.ПримененнаяЛьготаЗаМесяц;
		МаксимальноДопустимаяЛьгота = Макс(ДанныеИПН.ЛьготаПоДоходу - ДанныеИПН.ПримененнаяЛьготаНаПредыдущемМестеРаботы, 0);
		ОстатокЛьготы = Макс(МаксимальноДопустимаяЛьгота - ПримененнаяЛьготаЗаПрошлыеМесяцы, 0);
		
		Если ОстатокЛьготы > 0 И ОблагаемыйДоход > 0 Тогда
			ЛьготаПримененная = Мин(ОблагаемыйДоход, ОстатокЛьготы) - ДанныеИПН.ПримененнаяЛьготаЗаМесяц;
		Иначе
			ЛьготаПримененная = 0;
		КонецЕсли;
		
		// облагаемая часть дохода после применения льготы и вычета ОПВ
		ОблагаемаяСумма = ОблагаемыйДоход - ОстатокЛьготы - ДанныеИПН.ИсчисленныеВзносы;
		
		РазрешенныйВычетЗаПрошлыеМесяцы = ДанныеИПН.РазрешенныйВычетЗаГод - ДанныеИПН.РазрешенныйВычетЗаМесяц;
		РазрешенныйВычетЗаТекущийМесяц = ДанныеИПН.НалоговыйВычетЛичный;
		РазрешенныйВычет = ДанныеИПН.НалоговыйВычетЛичный - ДанныеИПН.РазрешенныйВычетЗаМесяц;
		ПрименныйВычетЗаТекущийМесяц = РазрешенныйВычетЗаПрошлыеМесяцы + РазрешенныйВычетЗаТекущийМесяц - (ДанныеИПН.ПримененныйВычетЗаГод - ДанныеИПН.ПримененныйВычетЗаМесяц);		
		ВычетПримененный = ПрименныйВычетЗаТекущийМесяц;
		
		Если ОблагаемаяСумма >= 0 Тогда
			ВычетПримененный = Мин(ВычетПримененный, ОблагаемаяСумма);
		Иначе
			ВычетПримененный = 0;
		КонецЕсли;
		
		// если было несколько документов по расчету налога, то определяем остаток вычета для текущего документа
		ВычетПримененный = ВычетПримененный - ДанныеИПН.ПримененныйВычетЗаМесяц;
		
		ОблагаемаяСумма = ОблагаемаяСумма - ПрименныйВычетЗаТекущийМесяц;
		НалогИсчисленныйЗаМесяц = Макс(ОблагаемаяСумма * ПроцентСтавки / 100, 0);
		
		// Округлим результат
		НалогИсчисленный 	= ОбщегоНазначения.ОкруглитьЧисло(НалогИсчисленныйЗаМесяц, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		ВычетПримененный 	= ОбщегоНазначения.ОкруглитьЧисло(ВычетПримененный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		ЛьготаПримененная 	= ОбщегоНазначения.ОкруглитьЧисло(ЛьготаПримененная, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);

		НалогИсчисленный = НалогИсчисленный - ДанныеИПН.РанееИсчисленныйНалог;
		
		Если КомментироватьРасчет Тогда
		   
		   	Если ДанныеИПН.Период = ПериодРегистрации ИЛИ НалогИсчисленный <> 0 Тогда
		   	
				РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеИПН.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"000"); // "000" - первая строка с месяцем
			
				МассивПараметровРасшифровки = Новый Массив;
				МассивПараметровРасшифровки.Добавить(ДанныеИПН.ФизЛицо);
				
				РаботаССообщениями.КомментарийРасчета("Начислено доходов: " + ДанныеИПН.СуммаДоходаВсего, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"010");
				Если ДанныеИПН.СуммаНеоблагаемогоДохода <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Доходы, не подлежащие налогообложению: " + ДанныеИПН.СуммаНеоблагаемогоДохода, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"020");
				КонецЕсли;

				Если ДанныеИПН.ЛьготаПоДоходу <> 0 Тогда
					
					КомментарийЛьготы = РаботаССообщениями.КомментарийРасчета("Предоставлена льгота: " + ЛьготаПримененная, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"025");
				
					Если ДанныеИПН.ПрименяетсяЛьготаУчастникаВОВ Тогда
						Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбУчастникеВОВФизЛица", МассивПараметровРасшифровки);
						Если ПериодРегистрации >= '20100101' Тогда
							РаботаССообщениями.КомментарийРасчета("", КомментарийЛьготы, "Является лицом, приравненным к участникам ВОВ, льгота до 55 МЗП: " + ДанныеИПН.ЛьготаПоДоходу, Расшифровка);
						Иначе
							РаботаССообщениями.КомментарийРасчета("", КомментарийЛьготы, "Является лицом, приравненным к участникам ВОВ, льгота до 45 МЗП: " + ДанныеИПН.ЛьготаПоДоходу, Расшифровка);
						КонецЕсли;
					КонецЕсли;
					Если ДанныеИПН.ПрименяетсяЛьготаПоИнвалидности Тогда
						Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбИнвалидностиФизЛица", МассивПараметровРасшифровки);
						Если ПериодРегистрации >= '20100101' Тогда
							 РаботаССообщениями.КомментарийРасчета("", КомментарийЛьготы, "Является инвалидом I, II, III гр. (родителем инвалида, участником ВОВ), льгота до 55 МЗП: " + ДанныеИПН.ЛьготаПоДоходу, Расшифровка);
						Иначе
							Если НЕ (ДанныеИПН.ОтношениеКИнвалидности = Перечисления.ОтношениеКИнвалидности.Инвалид 
										И ДанныеИПН.ГруппаИнвалидности = "III") Тогда
								 РаботаССообщениями.КомментарийРасчета("", КомментарийЛьготы, "Является инвалидом I, II гр. (родителем инвалида, участником ВОВ), льгота до 45 МЗП: " + ДанныеИПН.ЛьготаПоДоходу, Расшифровка);
							Иначе
								 РаботаССообщениями.КомментарийРасчета("", КомментарийЛьготы, "Является инвалидом III гр., льгота до 27 МЗП: " + ДанныеИПН.ЛьготаПоДоходу, Расшифровка);
							КонецЕсли;			 				
						КонецЕсли;
					КонецЕсли;
					Если ДанныеИПН.ПримененнаяЛьготаЗаГод + ДанныеИПН.ПримененнаяЛьготаНаПредыдущемМестеРаботы <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("С нач. года ранее предоставленная льгота " + (ДанныеИПН.ПримененнаяЛьготаЗаГод + ДанныеИПН.ПримененнаяЛьготаНаПредыдущемМестеРаботы), КомментарийЛьготы);
					КонецЕсли;
				КонецЕсли;
				
				РаботаССообщениями.КомментарийРасчета("ОПВ за месяц: " + ДанныеИПН.ИсчисленныеВзносы, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"030");
				
				РасшифровкаВычета = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьНалогиФизЛица", МассивПараметровРасшифровки);
				Если ДанныеИПН.НалоговыйВычетЛичный <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Разрешенный вычет: ", КомментарийВидаРасчета, ДанныеИПН.НалоговыйВычетЛичный, РасшифровкаВычета, , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"040");
					РаботаССообщениями.КомментарийРасчета("Предоставленный вычет: " + ВычетПримененный, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"041");
					Если ДанныеИПН.ПримененныйВычетЗаМесяц <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Ранее предоставленный вычет: " + ДанныеИПН.ПримененныйВычетЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"042");
					КонецЕсли;
				Иначе
					КомментарийВычета = РаботаССообщениями.КомментарийРасчета("Вычет за месяц не предоставлен:", КомментарийВидаРасчета, , , Перечисления.ВидыСообщений.ВажнаяИнформация, , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"040");	
					Если ДанныеИПН.ПризнакПрименениеВычета = 0 Тогда
						РаботаССообщениями.КомментарийРасчета("", КомментарийВычета, "Заявление на вычет не зарегистрировано", РасшифровкаВычета);
					КонецЕсли;
					Если ДанныеИПН.ПризнакФизЛицоНеРезидент <> 0 Тогда
						РасшифровкаГражданства = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьГражданствоФизЛица", МассивПараметровРасшифровки);
						РаботаССообщениями.КомментарийРасчета("", КомментарийВычета, "Лицо не является налоговым резидентом РК", РасшифровкаГражданства);
					КонецЕсли;
					Если ДанныеИПН.КалендарныхДнейРаботы < 16 Тогда
						КомментарийВычета = РаботаССообщениями.КомментарийРасчета("Является работником менее 16 календарных дней: " + ДанныеИПН.КалендарныхДнейРаботы, КомментарийВычета);
					КонецЕсли;
				КонецЕсли;

				// т.к в комментарий могут еще попасть сообщения о плановых налоговых вычетах (страховых, жилищных),
				// которые рассчитываются в документе "РасчетУдержанийРаботниковОрганизаций", то нижеследующим
				// комментариям назначаем порядок сообщения больший, чем "100" ("100" - это порядок сообщения для плановых вычетов)				
				
				РаботаССообщениями.КомментарийРасчета("Облагаемый доход: " + ОблагаемаяСумма, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"300");
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.КомментарийРасчета("Процент ИПН: ", КомментарийВидаРасчета, ПроцентСтавки, РасшифровкаСтавки, , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"400");
				Если ДанныеИПН.РанееИсчисленныйНалог <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("ИПН за месяц: " + НалогИсчисленныйЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"500");
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный ИПН: " + ДанныеИПН.РанееИсчисленныйНалог, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"600");
				КонецЕсли;
					
				РаботаССообщениями.КомментарийРасчета("Исчисленный ИПН: " + НалогИсчисленный, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"700");

			КонецЕсли;
				
		КонецЕсли;
		
		Если	НалогИсчисленный = 0 И
				ВычетПримененный = 0 И 
				ЛьготаПримененная = 0 И
				РазрешенныйВычет = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.ФизЛицо                		= ДанныеИПН.ФизЛицо;
			Движение.СтруктурнаяЕдиница				= Организация;
			Движение.МесяцНалоговогоПериода    		= ДанныеИПН.Период;
			Движение.Организация            		= Организация;
			Движение.Налогоплательщик          		= Налогоплательщик;

			// Ресурсы
			Движение.Налог						= НалогИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
			Движение.ПримененныйВычет			= ВычетПримененный;
			Движение.ПримененнаяЛьгота			= ЛьготаПримененная;
			Движение.РазрешенныйВычет 			= РазрешенныйВычет;
		КонецЕсли;
		
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеИПН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеИПН.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаИПН.Удалить(ДанныеИПН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеИПН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ПримененныйВычет				= ВычетПримененный;
		Строка.ПримененнаяЛьгота			= ЛьготаПримененная;
		Строка.РазрешенныйВычет				= РазрешенныйВычет;
		Строка.МесяцНалоговогоПериода 		= ДанныеИПН.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныйИПН
	Для Каждого Элемент Из РаботникиДляРасчетаИПН Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйИПН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйИПН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйИПН.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Налог, ПримененныйВычет, ПримененнаяЛьгота, РазрешенныйВычет");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйИПН);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
			
			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Налог, ПримененныйВычет, ПримененнаяЛьгота, РазрешенныйВычет"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Налог, ПримененныйВычет, ПримененнаяЛьгота, РазрешенныйВычет");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымИПНПосле2009()

// Заполняет набор записей по переданным данным расчета ОПВ для документов по расчету ОПВ
//
// Параметры: 
//	ТабличнаяЧасть - ссылка на табличную часть документа, с которой работать
//	ПериодРегистрации - первое число месяца, в котором производиться расчет
//  НаборЗаписей - набор записей регистра ОПВРасчетыСФондами 
//	РезультатОПВ - данные расчета ОПВ (полученный функцией ПроведениеРасчетовПолныеПрава.ПолучитьДанныеДляРасчетаОПВ())
//	Налогоплательщик - ссылка на элемент справочника Организации, соответствующий организации-налогоплательщику
//	Организация - ссылка на элемент справочника Организации из шапки документа
//	ОтражениеПоПериодуРегистрации - булевский признак отражения расчетов по налогам ПериодомРегистрации
//	Перерасчет - булевский признак выполнения перерасчета
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымОПВ(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатОПВ, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено) Экспорт
	
	СоответствиеПравилаОкругления = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ОПВ
	РаботникиДляРасчетаОПВ = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Взнос, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				РаботникиДляРасчетаОПВ.Вставить(Строка.Физлицо, СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета ОПВ, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Обязательные пенсионные взносы</B>", , , , , , -200); // -200 - ОПВ идет самым первым комментарием
	КонецЕсли;
	
	ДанныеОПВ = РезультатОПВ.Выбрать();
	БылаОшибка = Ложь;
	
	Пока ДанныеОПВ.Следующий() Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеОПВ.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, ДанныеОПВ.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеОПВ.Период, ПравилоОкругления);
		КонецЕсли;
	
		// проверим заполненность необходимых реквизитов
		Если ДанныеОПВ.ПроцентСтавки = 0 Тогда
			РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет ОПВ: ", "Не заполнено значение ставки обязательных пенсионных взносов", РасшифровкаСтавки, -199);  // -199 ошибка относятся непосредственно к ОПВ
			БылаОшибка = Истина;
		КонецЕсли;
	
		Если ДанныеОПВ.РазмерОграниченияПоДоходам = 0 Тогда
			РасшифровкаОграничения = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет ОПВ: ", "Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам", РасшифровкаОграничения, -198);  // -198 ошибка относятся непосредственно к ОПВ
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		ВзносИсчисленный = ДанныеОПВ.ВзносИсчисленный;
		
		// Округлим результат
		ВзносИсчисленный = ОбщегоНазначения.ОкруглитьЧисло(ВзносИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		Если КомментироватьРасчет Тогда
			РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеОПВ.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета);
			
			ОПВДолжныБытьРассчитаны = Истина;
			МассивПараметровРасшифровки = Новый Массив;
			МассивПараметровРасшифровки.Добавить(ДанныеОПВ.ФизЛицо);
			
			Если ДанныеОПВ.ПризнакФизЛицаБезПраваНаПенсию <> 0 Тогда                                                             
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьГражданствоФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Не имеет права на пенсию", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ОПВДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			Если ДанныеОПВ.ПризнакФизЛицаПенсионера <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьПенсионноеОбеспечениеФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является пенсионером", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ОПВДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			Если ДанныеОПВ.ПризнакФизЛицаИнвалида <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбИнвалидностиФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является инвалидом I или II группы, у которого инвалидность установлена бессрочно", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ОПВДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ОПВДолжныБытьРассчитаны Тогда
				РаботаССообщениями.КомментарийРасчета("Ежемесячный доход, принимаемый для исчисления ОПВ: " + ДанныеОПВ.ОблагаемыйДоход, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Ограничение по доходу в пределах 75 МЗП: " + ДанныеОПВ.РазмерОграниченияПоДоходам, КомментарийВидаРасчета);
				
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.КомментарийРасчета("Процент ОПВ: ", КомментарийВидаРасчета, ДанныеОПВ.ПроцентСтавки, РасшифровкаСтавки);
				Если ДанныеОПВ.РанееИсчисленныйВзнос <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("ОПВ за месяц: " + ДанныеОПВ.ВзносЗаПериод, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленные ОПВ: " + ДанныеОПВ.РанееИсчисленныйВзнос, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			РаботаССообщениями.КомментарийРасчета("Исчисленные ОПВ: " + ВзносИсчисленный, КомментарийВидаРасчета);
		КонецЕсли;
		
		Если ВзносИсчисленный = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеОПВ.ФизЛицо;
			Движение.СтруктурнаяЕдиница        	= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеОПВ.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Взнос						= ВзносИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеОПВ.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеОПВ.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаОПВ.Удалить(ДанныеОПВ.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеОПВ.ФизЛицо;
		Строка.Взнос  						= ВзносИсчисленный;
		Строка.МесяцНалоговогоПериода 		= ДанныеОПВ.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеОПВ
	Для Каждого Элемент Из РаботникиДляРасчетаОПВ Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйОПВ = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйОПВ.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйОПВ.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Взнос");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйОПВ);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Взнос"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Взнос");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымОПВ

// Заполняет набор записей по переданным данным расчета СО
//
// Параметры: 
//  НаборЗаписей - набор записей регистра СОРасчетыСФондами
//	РезультатСО - таблица значений - данные расчета СО
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымСО(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатСО, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено) Экспорт
	
    // правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СО
	РаботникиДляРасчетаСО = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Отчисление, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				РаботникиДляРасчетаСО.Вставить(Строка.Физлицо, СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета СО, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Социальные отчисления</B>");
	КонецЕсли;
	
	ДанныеСО = РезультатСО.Выбрать();
	БылаОшибка = Ложь;
	
	// узнаем работает ли организация по урощенке
	ОрганизацияЯвляетсяПлательщикомСН = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаСоциальногоНалога(Организация, ПериодРегистрации);
	
	Пока ДанныеСО.Следующий() Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСО.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, ДанныеСО.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеСО.Период, ПравилоОкругления);
		КонецЕсли;
	
		// проверим заполненность необходимых реквизитов
		Если ДанныеСО.ПроцентСтавки = 0 Тогда
			РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет СО: ", "Не заполнено значение ставки обязательных социальных отчислений", РасшифровкаСтавки);
			БылаОшибка = Истина;
		КонецЕсли;
	
		Если ДанныеСО.РазмерОграниченияПоДоходах = 0 Тогда
			РасшифровкаОграничения = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет СО: ", "Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам", РасшифровкаОграничения);
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
	
		ОтчислениеИсчисленное = ДанныеСО.ОтчислениеИсчисленное;
		СОЗаМесяц 			  = ДанныеСО.СОЗаМесяц;
		
		// для самостоятельно занятых лиц, работающих на упрощенном режиме сумма СО не должна быть менее 4% от МЗП
		Если НЕ ОрганизацияЯвляетсяПлательщикомСН И Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда			
			Если ЗначениеЗаполнено(ДанныеСО.ФизЛицо) И ДанныеСО.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда
				МинОграничение = ДанныеСО.МинОграничениеСОпоИП;
				Если СОЗаМесяц <> 0 И СОЗаМесяц < МинОграничение Тогда
					СОЗаМесяц = МинОграничение;
					// пересчитаем исчисленное отлисление за вычетом ранее исчисленных сумм
					ОтчислениеИсчисленное = СОЗаМесяц - ДанныеСО.РанееОтчисленияИсчисленные;
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
		
		// Округлим результат
		ОтчислениеИсчисленное = ОбщегоНазначения.ОкруглитьЧисло(ОтчислениеИсчисленное, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		Если КомментироватьРасчет Тогда
			РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеСО.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета);
			
			СОДолжныБытьРассчитаны = Истина;
			МассивПараметровРасшифровки = Новый Массив;
			МассивПараметровРасшифровки.Добавить(ДанныеСО.ФизЛицо);
			
			Если ДанныеСО.ПризнакФизЛицаБезСоциальногоСтрахования <> 0 Тогда                                                             
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьГражданствоФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Не подлежит социальному страхованию", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				СОДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			Если ДанныеСО.ПризнакФизЛицаПенсионера <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьПенсионноеОбеспечениеФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является пенсионером", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				СОДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если СОДолжныБытьРассчитаны Тогда
				РаботаССообщениями.КомментарийРасчета("Ежемесячный доход, принимаемый для исчисления СО: " + ДанныеСО.ОблагаемыйДоход, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("ОПВ за месяц: " + ДанныеСО.ОПВЗаМесяц, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Ограничение по доходу в пределах 10 МЗП: " + ДанныеСО.РазмерОграниченияПоДоходах, КомментарийВидаРасчета);
				
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.КомментарийРасчета("Процент СО: ", КомментарийВидаРасчета, ДанныеСО.ПроцентСтавки, РасшифровкаСтавки);
				Если ДанныеСО.РанееОтчисленияИсчисленные <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("СО за месяц: " + СОЗаМесяц, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленные СО: " + ДанныеСО.РанееОтчисленияИсчисленные, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			РаботаССообщениями.КомментарийРасчета("Исчисленные СО: " + ОтчислениеИсчисленное, КомментарийВидаРасчета);
		КонецЕсли;
		
		Если ОтчислениеИсчисленное = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру

			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеСО.ФизЛицо;
			Движение.СтруктурнаяЕдиница			= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеСО.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Отчисление					= ОтчислениеИсчисленное;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСО.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСО.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСО.Удалить(ДанныеСО.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСО.ФизЛицо;
		Строка.Отчисление					= ОтчислениеИсчисленное;
		Строка.МесяцНалоговогоПериода 		= ДанныеСО.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеСО
	Для Каждого Элемент Из РаботникиДляРасчетаСО Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеСО = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеСО.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеСО.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Отчисление");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеСО);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Отчисление"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Отчисление");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымСО

// Заполняет табличную часть ИсчисленныйСН по переданным данным расчета СН
//
// Параметры: 
//	РезультатСН - таблица значений - данные расчета СН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьТабличнуюЧастьПоДаннымСН(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено) Экспорт

	Если ПериодРегистрации >= '20090101' Тогда
		ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2009(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо);
	Иначе
		ЗаполнитьТабличнуюЧастьПоДаннымСНДо2009(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоДаннымСН()

// Заполняет табличную часть ИсчисленныйСН по переданным данным расчета СН
//
// Параметры: 
//	РезультатСН - таблица значений - данные расчета СН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьТабличнуюЧастьПоДаннымСНДо2009(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено)

	// Правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;

	УжеИсчислили = 0;
	ТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	ТекущийГод = 0;
	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СН
	РаботникиДляРасчетаСН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения	
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
			КонецЕсли;
			РаботникиДляРасчетаСН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;
	Иначе
		// при расчете всех строк - сохраняем только список физлиц (без сумм)
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			РаботникиДляРасчетаСН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета СН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Социальный налог</B>");
	КонецЕсли;

	Если РезультатСН.Колонки.Найти("ПризнакИндивидуальногоПредпринимателя") <> Неопределено Тогда
		НалогоплательщикЯвляетсяИП = Истина;
	Иначе
		НалогоплательщикЯвляетсяИП = Ложь;
	КонецЕсли;
	
	ДанныеСН = РезультатСН.Выбрать();
	
	Пока ДанныеСН.Следующий() Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеСН.Период, ПравилоОкругления);
		КонецЕсли;
	
		// проверим заполненность необходимых реквизитов
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			
			Если ДанныеСН.ПроцентСтавки = 0 И ДанныеСН.СуммаНалогаПредыдущегоПредела = 0 И ДанныеСН.ОблагаемаяСумма <> 0 Тогда
				МассивПараметровСтавки = Новый Массив();
				МассивПараметровСтавки.Добавить(ДанныеСН.ШкалаСтавокСН);
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОСтавкахИПНиСН", МассивПараметровСтавки);
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не заполнено значение ставки " + НРег(Лев(ДанныеСН.ШкалаСтавокСН, 1)) + Сред(ДанныеСН.ШкалаСтавокСН, 2), РасшифровкаСтавки);
				БылаОшибка = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ДанныеСН.РазмерМРП = 0 Тогда
				РасшифровкаМРП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не определен размер месячного расчетного показателя", РасшифровкаМРП);
				БылаОшибка = Истина;
			КонецЕсли;
			
			МассивПараметровУчетнаяПолитика = Новый Массив;
			МассивПараметровУчетнаяПолитика.Добавить(ДанныеСН.Налогоплательщик);
			РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметровУчетнаяПолитика);
			
			Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не указан коэффициент МРП за индивидуального предпринимателя", РасшифровкаУчетнойПолитики);
				БылаОшибка = Истина;
			КонецЕсли;
			Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не указан коэффициент МРП за наемного работника", РасшифровкаУчетнойПолитики);
				БылаОшибка = Истина;
			КонецЕсли;
		
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизлицо <> ДанныеСН.ФизЛицо ИЛИ ТекущийГод <> Год(ДанныеСН.Период) Тогда
			УжеИсчислили = 0;
			ТекущееФизлицо = ДанныеСН.ФизЛицо;
			ТекущийГод = Год(ДанныеСН.Период);
		КонецЕсли;
		
		НалогИсчисленный = ?(ДанныеСН.НалогИсчисленный = null, 0, ДанныеСН.НалогИсчисленный) - УжеИсчислили;
		
		// Округлить результат
		НалогИсчисленный = ОбщегоНазначения.ОкруглитьЧисло(НалогИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		Если КомментироватьРасчет Тогда
			
			Если ДанныеСН.Период = ПериодРегистрации ИЛИ НалогИсчисленный <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеСН.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета);
				
				Если НЕ НалогоплательщикЯвляетсяИП Тогда
				
					МассивПараметровРасшифровки = Новый Массив;
					МассивПараметровРасшифровки.Добавить(ДанныеСН.ФизЛицо);

					РаботаССообщениями.КомментарийРасчета("Начислено доходов с нач. года: " + ДанныеСН.СуммаДоходаВсего, КомментарийВидаРасчета);				
					Если ДанныеСН.СуммаНеоблагаемогоДохода <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Доходы, не подлежащие налогообложению: " + ДанныеСН.СуммаНеоблагаемогоДохода, КомментарийВидаРасчета);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("ОПВ с нач. года: " + ДанныеСН.ОПВЗаГод, КомментарийВидаРасчета);
					Если ДанныеСН.МесяцНачалаНалоговогоГода = NULL Тогда
						РаботаССообщениями.КомментарийРасчета("Не является постоянным работником, коэффициент перерасчета " + ДанныеСН.КоэффициентПересчета, КомментарийВидаРасчета);
					ИначеЕсли Год(ДанныеСН.МесяцНачалаНалоговогоГода) < Год(ДанныеСН.Период) Тогда
						РаботаССообщениями.КомментарийРасчета("Работает с начала года, коэффициент перерасчета " + ДанныеСН.КоэффициентПересчета, КомментарийВидаРасчета);
					Иначе
						РаботаССообщениями.КомментарийРасчета("Начало налогового года с " + Формат(ДанныеСН.МесяцНачалаНалоговогоГода, "ДФ='дд.ММ.гг'") + ", коэффициент перерасчета " + ДанныеСН.КоэффициентПересчета, КомментарийВидаРасчета);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("Расчетная сумма дохода, облагаемая СН: " + ДанныеСН.ОблагаемаяСумма, КомментарийВидаРасчета);
					
					МассивПараметровСтавки = Новый Массив();
					МассивПараметровСтавки.Добавить(ДанныеСН.ШкалаСтавокСН);
					РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОСтавкахИПНиСН", МассивПараметровСтавки);
					
					РасшифровкаГражданства = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьГражданствоФизЛица", МассивПараметровРасшифровки);
					
					Если ДанныеСН.ПризнакИностранногоСпециалиста = 0 Тогда
						РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Не является иностранным специалистом", РасшифровкаГражданства);
					Иначе
						РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является иностранным специалистом", РасшифровкаГражданства);
					КонецЕсли;
					
					КомментарийСтавки = РаботаССообщениями.КомментарийРасчета("Применяется шкала ставок ", КомментарийВидаРасчета, НРег(Лев(ДанныеСН.ШкалаСтавокСН, 1)) + Сред(ДанныеСН.ШкалаСтавокСН, 2), РасшифровкаСтавки);
					РаботаССообщениями.КомментарийРасчета("Сумма дохода с: " + ДанныеСН.СуммаДоходаС, КомментарийСтавки);
					РаботаССообщениями.КомментарийРасчета("Сумма дохода по: " + ДанныеСН.СуммаДоходаПо, КомментарийСтавки);
					РаботаССообщениями.КомментарийРасчета("Процент СН: " + ДанныеСН.ПроцентСтавки, КомментарийСтавки);
					РаботаССообщениями.КомментарийРасчета("Фикс. сумма налога: " + ДанныеСН.СуммаНалогаПредыдущегоПредела, КомментарийСтавки);
					
					РаботаССообщениями.КомментарийРасчета("СН с расчетной суммы дохода: " + ДанныеСН.СНЗаГод, КомментарийВидаРасчета);
					Если ДанныеСН.СОЗаГод <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("СО с нач. года: " + ДанныеСН.СОЗаГод, КомментарийВидаРасчета);
					КонецЕсли;
					Если ДанныеСН.РанееНалогИсчисленный <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Ранее исчислен СН с нач. года: " + ДанныеСН.РанееНалогИсчисленный, КомментарийВидаРасчета);
					КонецЕсли;
					
				Иначе
				
					МассивПараметровРасшифровки = Новый Массив;
					МассивПараметровРасшифровки.Добавить(ДанныеСН.Налогоплательщик);
				
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РасшифровкаОрганизации = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьФормуОрганизации", МассивПараметровРасшифровки);
						РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является индивидуальным предпринимателем", РасшифровкаОрганизации);
					Иначе
						РаботаССообщениями.КомментарийРасчета("Является наемным работником", КомментарийВидаРасчета);
					КонецЕсли;
					
					РасшифровкаМРП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
					РаботаССообщениями.КомментарийРасчета("Размер МРП: ", КомментарийВидаРасчета, ДанныеСН.РазмерМРП, РасшифровкаМРП);
					
					РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметровРасшифровки);
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Коэффициент МРП: ", КомментарийВидаРасчета, ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя, РасшифровкаУчетнойПолитики);
					Иначе
						РаботаССообщениями.КомментарийРасчета("Коэффициент МРП: ", КомментарийВидаРасчета, ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника, РасшифровкаУчетнойПолитики);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("СО за месяц: " + ДанныеСН.СОЗаМесяц, КомментарийВидаРасчета);
					Если ДанныеСН.РанееНалогИсчисленный <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("СН за месяц: " + ДанныеСН.СНЗаМесяц, КомментарийВидаРасчета);
						РаботаССообщениями.КомментарийРасчета("Ранее исчислен СН за месяц: " + ДанныеСН.РанееНалогИсчисленный, КомментарийВидаРасчета);
					КонецЕсли;
					
				КонецЕсли;
					
				РаботаССообщениями.КомментарийРасчета("Исчисленный СН: " + НалогИсчисленный, КомментарийВидаРасчета);
				
			КонецЕсли;
		
		КонецЕсли;
		
		Если НалогИсчисленный = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСН.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСН.Удалить(ДанныеСН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.МесяцНалоговогоПериода 		= ДанныеСН.Период;
		
		// Запомним суммы для следующей итерации
		УжеИсчислили = УжеИсчислили + НалогИсчисленный;

	КонецЦикла;
	
	// заполним ИсчисленныйСН
	Для Каждого Элемент Из РаботникиДляРасчетаСН Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйСН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйСН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйСН.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Налог");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйСН);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоДаннымСНДо2009()

// Заполняет табличную часть ИсчисленныйСН по переданным данным расчета СН
//
// Параметры: 
//	РезультатСН - таблица значений - данные расчета СН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2009(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено)

	// Правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	СоответствиеСтавкиСН = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СН
	РаботникиДляРасчетаСН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения	
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
			КонецЕсли;
			РаботникиДляРасчетаСН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;
	Иначе
		// при расчете всех строк - сохраняем только список физлиц (без сумм)
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			РаботникиДляРасчетаСН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета СН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Социальный налог</B>");
	КонецЕсли;

	Если РезультатСН.Колонки.Найти("ПризнакИндивидуальногоПредпринимателя") <> Неопределено Тогда
		НалогоплательщикЯвляетсяИП = Истина;
	Иначе
		НалогоплательщикЯвляетсяИП = Ложь;
	КонецЕсли;
	
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	ДанныеСН = РезультатСН.Выбрать();
	
	Пока ДанныеСН.Следующий() Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеСН.Период);
	
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеСН.Период, ПравилоОкругления);
		КонецЕсли;
		
		// проверим заполненность необходимых реквизитов
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			
			// получим ставку СН
			ПроцентСтавки = СоответствиеСтавкиСН[ДанныеСН.Период];
			Если ПроцентСтавки = Неопределено Тогда
				ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
				СоответствиеСтавкиСН.Вставить(ДанныеСН.Период, ПроцентСтавки);			
			КонецЕсли;
		
			Если НЕ ЗначениеЗаполнено(ПроцентСтавки) Тогда
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не заполнено значение ставки социального налога", РасшифровкаСтавки);
				БылаОшибка = Истина;
			КонецЕсли;
			
			Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога И ДанныеСН.РазмерМЗП = 0 Тогда
				РасшифровкаМЗП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не определен размер минимальной заработной платы", РасшифровкаМЗП);
				БылаОшибка = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ДанныеСН.РазмерМРП = 0 Тогда
				РасшифровкаМРП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не определен размер месячного расчетного показателя", РасшифровкаМРП);
				БылаОшибка = Истина;
			КонецЕсли;
			
			МассивПараметровУчетнаяПолитика = Новый Массив;
			МассивПараметровУчетнаяПолитика.Добавить(ДанныеСН.Налогоплательщик);
			РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметровУчетнаяПолитика);
			
			Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не указан коэффициент МРП за индивидуального предпринимателя", РасшифровкаУчетнойПолитики);
				БылаОшибка = Истина;
			КонецЕсли;
			Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не указан коэффициент МРП за наемного работника", РасшифровкаУчетнойПолитики);
				БылаОшибка = Истина;
			КонецЕсли;
		
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			// Расчет налога для юр.лица
			ОблагаемаяСумма = Макс(ДанныеСН.ОблагаемыйДоход - ДанныеСН.ИсчисленныеВзносы, 0);
			
			Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога И ОблагаемаяСумма > 0 Тогда
				// включено ограничение на нижний предел - не менее минимальной заработной платы
				Если ОблагаемаяСумма < ДанныеСН.РазмерМЗП Тогда
					ОблагаемаяСумма = ДанныеСН.РазмерМЗП;
				КонецЕсли;
			КонецЕсли;
			
			СуммаНалогаДоВычетаСО = Окр(ОблагаемаяСумма * ПроцентСтавки / 100, 2);
			
			// окончательная сумма налога
			НалогИсчисленный = Макс(СуммаНалогаДоВычетаСО - ДанныеСН.ИсчисленныеОтчисления, 0) - ДанныеСН.РанееИсчисленныйНалог;
			
		Иначе
			// расчет налога для ИП произведен уже в запросе
			НалогИсчисленный = ?(ДанныеСН.НалогИсчисленный = null, 0, ДанныеСН.НалогИсчисленный);
		КонецЕсли;
		
		// Округлить результат
		НалогИсчисленный = ОбщегоНазначения.ОкруглитьЧисло(НалогИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		Если КомментироватьРасчет Тогда
			
			Если ДанныеСН.Период = ПериодРегистрации ИЛИ НалогИсчисленный <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеСН.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета);
				
				Если НЕ НалогоплательщикЯвляетсяИП Тогда
				
					МассивПараметровРасшифровки = Новый Массив;
					МассивПараметровРасшифровки.Добавить(ДанныеСН.ФизЛицо);

					РаботаССообщениями.КомментарийРасчета("Начислено доходов: " + ДанныеСН.СуммаДоходаВсего, КомментарийВидаРасчета);				
					Если ДанныеСН.СуммаНеоблагаемогоДохода <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Доходы, не подлежащие налогообложению: " + ДанныеСН.СуммаНеоблагаемогоДохода, КомментарийВидаРасчета);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("ОПВ за месяц: " + ДанныеСН.ИсчисленныеВзносы, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Расчетная сумма дохода, облагаемая СН: " + ОблагаемаяСумма, КомментарийВидаРасчета);
					
					Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога Тогда
						МассивПараметровУчетнаяПолитика = Новый Массив;
						МассивПараметровУчетнаяПолитика.Добавить(Налогоплательщик);
						РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметровУчетнаяПолитика);
						
						РаботаССообщениями.КомментарийРасчета("Применяется ограничение на минимальную сумму облагаемого дохода - не менее МЗП ", КомментарийВидаРасчета, ДанныеСН.РазмерМЗП, РасшифровкаУчетнойПолитики);
					КонецЕсли;
					
					// ставка
					РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
					РаботаССообщениями.КомментарийРасчета("Процент СН: ", КомментарийВидаРасчета, ПроцентСтавки, РасшифровкаСтавки);
					
					РаботаССообщениями.КомментарийРасчета("СН с расчетной суммы дохода: " + СуммаНалогаДоВычетаСО, КомментарийВидаРасчета);
					Если ДанныеСН.ИсчисленныеОтчисления <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("СО за месяц: " + ДанныеСН.ИсчисленныеОтчисления, КомментарийВидаРасчета);
					КонецЕсли;
					Если ДанныеСН.РанееИсчисленныйНалог <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Ранее исчислен СН за месяц: " + ДанныеСН.РанееИсчисленныйНалог, КомментарийВидаРасчета);
					КонецЕсли;
					
				Иначе
				
					МассивПараметровРасшифровки = Новый Массив;
					МассивПараметровРасшифровки.Добавить(ДанныеСН.Налогоплательщик);
				
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РасшифровкаОрганизации = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьФормуОрганизации", МассивПараметровРасшифровки);
						РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является индивидуальным предпринимателем", РасшифровкаОрганизации);
					Иначе
						РаботаССообщениями.КомментарийРасчета("Является наемным работником", КомментарийВидаРасчета);
					КонецЕсли;
					
					РасшифровкаМРП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
					РаботаССообщениями.КомментарийРасчета("Размер МРП: ", КомментарийВидаРасчета, ДанныеСН.РазмерМРП, РасшифровкаМРП);
					
					РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметровРасшифровки);
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Коэффициент МРП: ", КомментарийВидаРасчета, ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя, РасшифровкаУчетнойПолитики);
					Иначе
						РаботаССообщениями.КомментарийРасчета("Коэффициент МРП: ", КомментарийВидаРасчета, ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника, РасшифровкаУчетнойПолитики);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("СО за месяц: " + ДанныеСН.СОЗаМесяц, КомментарийВидаРасчета);
					Если ДанныеСН.РанееНалогИсчисленный <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("СН за месяц: " + ДанныеСН.СНЗаМесяц, КомментарийВидаРасчета);
						РаботаССообщениями.КомментарийРасчета("Ранее исчислен СН за месяц: " + ДанныеСН.РанееНалогИсчисленный, КомментарийВидаРасчета);
					КонецЕсли;
					
				КонецЕсли;
					
				РаботаССообщениями.КомментарийРасчета("Исчисленный СН: " + НалогИсчисленный, КомментарийВидаРасчета);
				
			КонецЕсли;
		
		КонецЕсли;
		
		Если НалогИсчисленный = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСН.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСН.Удалить(ДанныеСН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.МесяцНалоговогоПериода 		= ДанныеСН.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныйСН
	Для Каждого Элемент Из РаботникиДляРасчетаСН Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйСН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйСН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйСН.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Налог");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйСН);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2009()

// Заполняет табличную часть ИсчисленныйСН по переданным данным расчета СН
//
// Параметры: 
//	ВидОперации - вид операции расчета пени
//	ПериодРегистрации - месяц, в котором производится расчет пени
//	ТабличнаяЧасть - табличная часть документа РасчетПениОПВиСО
//	РезультатРасчетаПени - данные расчета СН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьТабличнуюЧастьПоДаннымРасчетаПениОПВиСО(ВидОперации, ПериодРегистрации, ТабличнаяЧасть, РезультатРасчетаПени) Экспорт
	
	// правило округления
	Если ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ Тогда
		ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, ПериодРегистрации);
	Иначе
		ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, ПериодРегистрации);
	КонецЕсли;

	ТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по которым считается пени
	РаботникиДляРасчетаПени = Новый Соответствие;
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		РаботникиДляРасчетаПени.Вставить(Строка.Физлицо, Новый Структура("СтруктурнаяЕдиница, МесяцНалоговогоПериода, ДатаНачала, ДатаОкончания", 
																			Строка.СтруктурнаяЕдиница,
																			Строка.МесяцНалоговогоПериода,
																			Строка.ДатаНачала,
																			Строка.ДатаОкончания));
	КонецЦикла;
	
	// очистим результаты расчета пени, которые находятся в табличной части документа
	ТабличнаяЧасть.Очистить(); 
	
	ТекущееФизЛицо = Неопределено;
	ТекущаяСтруктурнаяЕдиница = Неопределено;
	ТекущийМесяцНалоговогоПериода = Неопределено;
	ТекущаяСтрокаТЧ = Неопределено;
	ТекущаяСуммаЗадолженности = Неопределено;
	ТекущаяСтавкаРефинансирования = Неопределено;
	ТекущийКоэффициент = Неопределено;
	ТекущееЧислоДнейВГоду = Неопределено;
	
	ДанныеРасчетаПени = РезультатРасчетаПени.Выбрать();
	
	Пока ДанныеРасчетаПени.Следующий() Цикл
		
		БылоСообщениеОбОшибке = Ложь;
		Если ДанныеРасчетаПени.СрокПеречисления = NULL Тогда
			
			БылоСообщениеОбОшибке = Истина;
			Сообщить(" " + ДанныеРасчетаПени.ФизЛицо + " за месяц налогового периода " + 
						Формат(ДанныеРасчетаПени.МесяцНалоговогоПериода, "ДФ='ММММ гггг'") +  
						?(ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ, " (месяц выплаты доходов " + Формат(ДанныеРасчетаПени.МесяцВыплатыДоходов, "ДФ='ММММ гггг'") + ")", "") + 
						" не указан срок перечисления!", СтатусСообщения.ОченьВажное);
		КонецЕсли;
		
		Если ДанныеРасчетаПени.СтавкаРефинансирования = NULL Или ДанныеРасчетаПени.СтавкаРефинансирования = 0 Тогда
			БылоСообщениеОбОшибке = Истина;
			Сообщить("Не определено значение ставки рефинансирования на " + Формат(ДанныеРасчетаПени.ДатаНачала, "ДФ=dd.MM.yyyy") + "!", СтатусСообщения.ОченьВажное);
		КонецЕсли;

		Если ДанныеРасчетаПени.Коэффициент = NULL Или ДанныеРасчетаПени.Коэффициент = 0 Тогда
			БылоСообщениеОбОшибке = Истина;
			Сообщить("Не определено значение коэффициента ставки рефинансирования на " + Формат(ДанныеРасчетаПени.ДатаНачала, "ДФ=dd.MM.yyyy") + ", используемого для расчета пени!", СтатусСообщения.ОченьВажное);
		КонецЕсли;
		
		Если БылоСообщениеОбОшибке Тогда
			Продолжить;
		КонецЕсли;
	
		Если ДанныеРасчетаПени.ФизЛицо <> ТекущееФизЛицо
				Или ДанныеРасчетаПени.СтруктурнаяЕдиница <> ТекущаяСтруктурнаяЕдиница
				Или ДанныеРасчетаПени.МесяцНалоговогоПериода <> ТекущийМесяцНалоговогоПериода
				Или ДанныеРасчетаПени.СуммаЗадолженности <> ТекущаяСуммаЗадолженности
				Или ДанныеРасчетаПени.СтавкаРефинансирования <> ТекущаяСтавкаРефинансирования 
				Или ДанныеРасчетаПени.Коэффициент <> ТекущийКоэффициент 
				Или ДанныеРасчетаПени.ДнейВГоду <> ТекущееЧислоДнейВГоду Тогда
			
			// сменилось физлицо или месяц налогового периода - создаем новую строку
			ТекущееФизЛицо = ДанныеРасчетаПени.ФизЛицо;
			ТекущаяСтруктурнаяЕдиница = ДанныеРасчетаПени.СтруктурнаяЕдиница;
			ТекущийМесяцНалоговогоПериода = ДанныеРасчетаПени.МесяцНалоговогоПериода;
			ТекущаяСуммаЗадолженности = ДанныеРасчетаПени.СуммаЗадолженности;
			ТекущаяСтавкаРефинансирования = ДанныеРасчетаПени.СтавкаРефинансирования;
			ТекущийКоэффициент = ДанныеРасчетаПени.Коэффициент;
			ТекущееЧислоДнейВГоду = ДанныеРасчетаПени.ДнейВГоду;
			
			ТекущаяСтрокаТЧ = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаПени.Удалить(ДанныеРасчетаПени.ФизЛицо);
			
			// заполняем новую строку
			ЗаполнитьЗначенияСвойств(ТекущаяСтрокаТЧ, ДанныеРасчетаПени);
		Иначе
			Если ЗначениеЗаполнено(ТекущаяСтрокаТЧ) 
					И КонецДня(ТекущаяСтрокаТЧ.ДатаОкончания) + 1 = НачалоДня(ДанныеРасчетаПени.ДатаНачала) Тогда
				// новую строку не создаем, передвигаем дату окончания в текущей строке в будущее и складываем суммы
				ТекущаяСтрокаТЧ.ДатаОкончания = ДанныеРасчетаПени.ДатаОкончания;
				ТекущаяСтрокаТЧ.Сумма = ТекущаяСтрокаТЧ.Сумма + ДанныеРасчетаПени.Сумма;
			Иначе
				// создаем новую строку
				ТекущаяСтрокаТЧ = ТабличнаяЧасть.Добавить();
				РаботникиДляРасчетаПени.Удалить(ДанныеРасчетаПени.ФизЛицо);
				ЗаполнитьЗначенияСвойств(ТекущаяСтрокаТЧ, ДанныеРасчетаПени);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	// заполним ИсчислениеПени
	Для Каждого Элемент Из РаботникиДляРасчетаПени Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.ФизЛицо = Элемент.Ключ;
		НоваяСтрока.МесяцНалоговогоПериода = Элемент.Значение.МесяцНалоговогоПериода;
		НоваяСтрока.ДатаНачала = Элемент.Значение.ДатаНачала;
		НоваяСтрока.ДатаОкончания = Элемент.Значение.ДатаОкончания;
	КонецЦикла;
	
	// свернем строки с одинаковыми реквизитам
	ТабличнаяЧасть.Свернуть("ФизЛицо, СтруктурнаяЕдиница, МесяцНалоговогоПериода, ДатаНачала, ДатаОкончания", "Сумма");
	
	// округлим результат расчета - если расчеты производятся не до тиынок
	Если ПравилоОкругления.ПорядокОкругления <> Перечисления.ПорядкиОкругления.Окр0_01 Тогда
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			СтрокаТЧ.Сумма = ОбщегоНазначения.ОкруглитьЧисло(СтрокаТЧ.Сумма, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоДаннымРасчетаПениОПВиСО()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫПОЛНЕНИЯ ДВИЖЕНИЙ ПО РЕГИСТРАМ

// Выполняет движения по регистрам накопления ВзаиморасчетыСРаботникамиОрганизаций и
// ВзаиморасчетыСДепонентамиОрганизаций при выплате заработной платы
//
// Параметры:
//  ДокументОбъект   - документ-объект РасходныйКассовыйОрдер или ПлатежноеПоручениеИсходящее,
//  				   по данным которого надо выполнить движение
//	ТекстЗапросаПоВзаиморасчетам - строка с текстом запроса по выплачиваемым суммам 
//									(Поля: ФизЛицо, ПериодНачисленияЗарплаты, ПериодНачисленияДепонированнойЗарплаты, СпособРасчетаСуммКВыплате,
//											Сумма, ДепонированнаяСумма)
//	СтруктураПараметровЗапроса - структура с параметрами, используемыми в ТекстЗапросаПоВзаиморасчета
//	СпособВыплаты - ПеречислениеСсылка.СпособыВыплатыЗарплаты 
//	глИсчислениеНалоговСтруктурныхЕдиниц - значение глобальной переменной
//
Процедура ВыполнитьДвиженияПоРегистрамПоВыплатеЗарплаты(ДокументОбъект, 
														ТекстЗапросаПоВзаиморасчетам, 
														СтруктураПараметровЗапроса, 
														СпособВыплаты,
														глИсчислениеНалоговСтруктурныхЕдиниц) Экспорт

	ПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
	ДатаДокумента 	= ДокументОбъект.Дата;
	Движения		= ДокументОбъект.Движения;
	Организация 	= ДокументОбъект.Организация;

	Запрос = Новый Запрос();
    МестоРаботыТекст="";
	// внесем список переданных параметров
	Для Каждого ПараметрЗапроса Из СтруктураПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	// прочие параметры
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("Организация", Организация);

	ТаблЗначенийВыплаченныеСуммыПоПериодам = Новый ТаблицаЗначений;
	ТаблЗначенийВыплаченныеСуммыПоПериодам.Колонки.Добавить("ПериодВзаиморасчетов");
	ТаблЗначенийВыплаченныеСуммыПоПериодам.Колонки.Добавить("СтруктурнаяЕдиница");
	ТаблЗначенийВыплаченныеСуммыПоПериодам.Колонки.Добавить("Налогоплательщик");
	ТаблЗначенийВыплаченныеСуммыПоПериодам.Колонки.Добавить("ВыплаченнаяСумма");
	
	ТаблЗначенийВыплаченныеСуммыПоПериодам.Индексы.Добавить("ПериодВзаиморасчетов, СтруктурнаяЕдиница, Налогоплательщик");
	СтруктураПоиска = Новый Структура("ПериодВзаиморасчетов, СтруктурнаяЕдиница, Налогоплательщик");
	
	// для поддержки работы со структурными подразделениями определим подразделение работы 
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПериодыФизлицаТекст = "
		|ВЫБРАТЬ
		|	ФизЛицо,
		|	ПериодНачисленияЗарплаты КАК Период
		|ИЗ
		|	(" + ТекстЗапросаПоВзаиморасчетам + ") КАК ВзаиморасчетыСРаботниками
		|
		|ОБЪЕДИНИТЬ // берем различающиеся строки
		|
		|ВЫБРАТЬ
		|	ФизЛицо,
		|	ПериодНачисленияДепонированнойЗарплаты КАК Период
		|ИЗ
		|	(" + ТекстЗапросаПоВзаиморасчетам + ") КАК ВзаиморасчетыСДепонентами
		|";
	    ПериодыФизЛицаТекст = 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ * ПОМЕСТИТЬ ПериодыФизЛицаВТ ИЗ ("+ПериодыФизЛицаТекст+") КАК ЗапросПоПериодамДляВТ;" ;
		ПериодыФизЛицаТекстВТ = "ВЫБРАТЬ * ИЗ ПериодыФизЛицаВТ КАК ВложенныйЗапросПериодыФизЛицаИзВТ";
		
		МестоРаботыТекст = СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекстВТ, Организация, Запрос);
		МестоРаботыТекст = ПериодыФизЛицаТекст +"ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
		
	КонецЕсли;
	
	// Проводим списание по регистрам накопления
	// Сначала списываем по депонированным суммам, затем по текущим взаиморасчетам
	Для Инд = 1 По 2 Цикл

		Запрос.Текст =МестоРаботыТекст+ "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеДокумента.ФизЛицо КАК ФизЛицо,
		|	ДанныеДокумента." + ?(Инд = 1, "Депонированная", "") + "Сумма КАК Сумма,
		|	ДанныеДокумента.ПериодНачисления" + ?(Инд = 1, "Депонированной", "") + "Зарплаты КАК ПериодНачисления,	
		|	ДанныеДокумента.СпособРасчетаСуммКВыплате КАК СпособРасчетаСуммКВыплате,
		|	ЕСТЬNULL(ОстаткиКВыплате.СуммаВзаиморасчетовОстаток, 0) КАК Остаток,
		|	ЕСТЬNULL(ОстаткиКВыплате.ПериодВзаиморасчетов, &ПустаяДата) КАК ПериодВзаиморасчетов";
		
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Запрос.Текст = Запрос.Текст + ",
			|	ВЫБОР
			|		КОГДА НЕ (ОстаткиКВыплате.СтруктурнаяЕдиница ЕСТЬ NULL)
			|			ТОГДА ОстаткиКВыплате.СтруктурнаяЕдиница
			|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
			|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
			|		ИНАЧЕ &Организация
			|	КОНЕЦ КАК СтруктурнаяЕдиница,
			|	ВЫБОР
			|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
			|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
			|		ИНАЧЕ &Организация
			|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
			|	ОстаткиКВыплате.Налогоплательщик";
		Иначе
			Запрос.Текст = Запрос.Текст + ",
			|	данныедокумента.Организация КАК СтруктурнаяЕдиница,
			|	данныедокумента.Организация  КАК СтруктурнаяЕдиницаПоМестуРаботы,
			|	данныедокумента.Организация  КАК Налогоплательщик";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	(" + ТекстЗапросаПоВзаиморасчетам + ") КАК ДанныеДокумента 
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыС" + ?(Инд=1, "Депонентами", "Работниками") + "Организаций.Остатки(
		|										&ДатаДокумента, 
		|										
		|										ФизЛицо В (ВЫБРАТЬ
		|														ВЫРАЗИТЬ(ФизЛицо КАК Справочник.ФизическиеЛица)
		|													ИЗ
		|														(" + ТекстЗапросаПоВзаиморасчетам + ") КАК Док)) КАК ОстаткиКВыплате
		|	ПО ДанныеДокумента.ФизЛицо = ОстаткиКВыплате.ФизЛицо и данныедокумента.организация = остаткиквыплате.организация";
		
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Запрос.Текст = Запрос.Текст + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
			|		ПО ДанныеДокумента.ФизЛицо = МестоРаботы.ФизЛицо
			|			И ДанныеДокумента.ПериодНачисления" + ?(Инд=1, "Депонированной", "") + "Зарплаты = МестоРаботы.Период";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "		
		|
		|ГДЕ 
		|	ДанныеДокумента." + ?(Инд = 1, "Депонированная", "") + "Сумма <> 0 
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеДокумента.ФизЛицо,
		|	ОстаткиКВыплате.ПериодВзаиморасчетов
		|
		|ИТОГИ МАКСИМУМ(Сумма), СУММА(Остаток), МАКСИМУМ(СтруктурнаяЕдиницаПоМестуРаботы) ПО
		|	СтруктурнаяЕдиница,ФизЛицо,
		|	СпособРасчетаСуммКВыплате,
		|	ПериодНачисления
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
			        ВыборкаСтрЕд = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					пока ВыборкаСтрЕд.Следующий() Цикл
		ВыборкаПоФизЛицо = ВыборкаСтрЕд.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоФизЛицо.Следующий() Цикл
			
			ВыборкаПоСпособуРасчета = ВыборкаПоФизЛицо.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			// Очищаем при смене сотрудника
			ТаблЗначенийВыплаченныеСуммыПоПериодам.Очистить();				
			
			Пока ВыборкаПоСпособуРасчета.Следующий() Цикл					
				
				Если ВыборкаПоСпособуРасчета.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.АвансЗаМесяц
				 ИЛИ ВыборкаПоСпособуРасчета.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.АвансЗаПервуюПоловинуМесяца Тогда
					ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс;
				Иначе
					ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
				КонецЕсли;
			
				ВыборкаПоПериодуНачисления = ВыборкаПоСпособуРасчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоПериодуНачисления.Следующий() Цикл
					
					СуммаКВыплате = ВыборкаПоПериодуНачисления.Сумма;
					
					если ДокументОбъект.ВалютаДокумента <> ДокументОбъект.мВалютаРегламентированногоУчета Тогда
						ВалютаРег       = ДокументОбъект.мВалютаРегламентированногоУчета;
						ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаРег, ДокументОбъект.Дата);
						
						СуммаКВыплате  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаКВыплате, ДокументОбъект.ВалютаДокумента, ВалютаРег,
																	ДокументОбъект.КурсДокумента, ДанныеОВалюте.Курс, 
																	ДокументОбъект.КратностьДокумента, ДанныеОВалюте.Кратность);			
					КонецЕсли;
					
					
					Выборка = ВыборкаПоПериодуНачисления.Выбрать();						
					
					Пока Выборка.Следующий() И (СуммаКВыплате <> 0) Цикл
						
						МожноВыплачиватьЗаПериод = Ложь;
						// В зависимости от вида выплачиваемой суммы отражаем факт выплаты.
						Если Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц Тогда

							Если Выборка.ПериодВзаиморасчетов = Выборка.ПериодНачисления Тогда
								МожноВыплачиватьЗаПериод = Истина;
							КонецЕсли;
						
						ИначеЕсли Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ОстаткиПоЗарплатеНаКонецМесяца Тогда
							
							Если Выборка.ПериодВзаиморасчетов <= Выборка.ПериодНачисления Тогда
								МожноВыплачиватьЗаПериод = Истина;
							КонецЕсли;
						
						ИначеЕсли Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ДепонированнаяЗарплатаЗаМесяц Тогда

							Если Выборка.ПериодВзаиморасчетов = Выборка.ПериодНачисления Тогда
								МожноВыплачиватьЗаПериод = Истина;
							КонецЕсли;
							
						ИначеЕсли Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ОстаткиПоДепонированнойЗарплатеНаКонецМесяца Тогда

							Если Выборка.ПериодВзаиморасчетов <= Выборка.ПериодНачисления Тогда
								МожноВыплачиватьЗаПериод = Истина;
							КонецЕсли;

						ИначеЕсли Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаИДепонированнаяЗарплата Тогда

							Если Выборка.ПериодВзаиморасчетов = Выборка.ПериодНачисления Тогда
								МожноВыплачиватьЗаПериод = Истина;
							КонецЕсли;

						ИначеЕсли Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаИОстаткиПоДепонированнойЗарплате Тогда

							// Депонированные суммы выплачиваем вплоть до указанного периода, а 
							// заработную плату - только за текущий месяц
							Если Инд = 1 И Выборка.ПериодВзаиморасчетов <= Выборка.ПериодНачисления Тогда
								МожноВыплачиватьЗаПериод = Истина;
							ИначеЕсли Выборка.ПериодВзаиморасчетов = Выборка.ПериодНачисления Тогда
								МожноВыплачиватьЗаПериод = Истина;
							КонецЕсли;

						ИначеЕсли Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ВсяСуммаЗадолженности Тогда

							Если Выборка.ПериодВзаиморасчетов <= Выборка.ПериодНачисления Тогда
								МожноВыплачиватьЗаПериод = Истина;
							КонецЕсли;
						
						ИначеЕсли Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ПоВидуРасчета Тогда
							
							Если Выборка.ПериодВзаиморасчетов = Выборка.ПериодНачисления Тогда
								МожноВыплачиватьЗаПериод = Истина;
							КонецЕсли;
						
						ИначеЕсли Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.АвансЗаМесяц
							  ИЛИ Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.АвансЗаПервуюПоловинуМесяца Тогда

							Если Выборка.ПериодВзаиморасчетов = Выборка.ПериодНачисления Тогда
								МожноВыплачиватьЗаПериод = Истина;
							КонецЕсли;
							
						Иначе
							
							МожноВыплачиватьЗаПериод = Истина;
							
						КонецЕсли;
						
						Если МожноВыплачиватьЗаПериод Тогда

							ПериодВзаиморасчетовКВыплате = ?(Выборка.ПериодВзаиморасчетов <> '00010101', Выборка.ПериодВзаиморасчетов, НачалоМесяца(ДатаДокумента));
							
							ОстатокКВыплате = Выборка.Остаток; 
							
							// Учтем уже ранее выплаченные суммы в цикле, чтобы потом не получить 
							// в регистре с депонированной зарплатой перебор имеющейся задолженности,
							// если будут оставаться остатки, то заносим их в регистр с текущими взаиморасчетами
							СтруктураПоиска.ПериодВзаиморасчетов = ПериодВзаиморасчетовКВыплате;
							СтруктураПоиска.СтруктурнаяЕдиница	 = Выборка.СтруктурнаяЕдиница;
							СтруктураПоиска.Налогоплательщик	 = Выборка.Налогоплательщик;
							
							НайденныеСтроки = ТаблЗначенийВыплаченныеСуммыПоПериодам.НайтиСтроки(СтруктураПоиска);
							Если НайденныеСтроки.Количество() <> 0 Тогда
								ОстатокКВыплате = ОстатокКВыплате - НайденныеСтроки[0].ВыплаченнаяСумма;
							КонецЕсли;

							ВыплачиваемаяСумма = Мин(СуммаКВыплате, ОстатокКВыплате);
							
							Если ВыплачиваемаяСумма <> 0 Тогда
							
								Если Выборка.Налогоплательщик = NULL Тогда
									// получаем налогоплательщика по структурной единице по месту работы
									СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
									Налогоплательщик 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Выборка.СтруктурнаяЕдиницаПоМестуРаботы,
																										Организация,
																										глИсчислениеНалоговСтруктурныхЕдиниц,
																										Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
								Иначе
									СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
									Налогоплательщик 	= Выборка.Налогоплательщик;
								КонецЕсли;
							
								/////////////////////////////////////////////////////////////////////////////
								// ВзаиморасчетыСРаботникамиОрганизаций или ВзаиморасчетыСДепонентамиОрганизаций
								//
							
								Если Инд = 1 Тогда
									Движение = Движения.ВзаиморасчетыСДепонентамиОрганизаций.ДобавитьРасход();
								Иначе
									Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.ДобавитьРасход();
								КонецЕсли;
								
								// Свойства
								Движение.Период 				= ДатаДокумента;
								
								// Измерения
								Движение.ФизЛицо 				= Выборка.ФизЛицо;
								Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
									Движение.СтруктурнаяЕдиница	= ВыборкаСтрЕд.СтруктурнаяЕдиница;
									Движение.Налогоплательщик	= ВыборкаСтрЕд.СтруктурнаяЕдиница;
								Иначе
									Движение.СтруктурнаяЕдиница	= ВыборкаСтрЕд.СтруктурнаяЕдиница;
									Движение.Налогоплательщик	= ВыборкаСтрЕд.СтруктурнаяЕдиница;
								КонецЕсли;
								Движение.ПериодВзаиморасчетов 	= ПериодВзаиморасчетовКВыплате;
								Движение.Организация			= ВыборкаСтрЕд.СтруктурнаяЕдиница;
								
								// Ресурсы
								Движение.СуммаВзаиморасчетов 	= ВыплачиваемаяСумма;
								
								// Реквизиты
								Движение.ХарактерВыплаты		= ХарактерВыплаты;
								Движение.СпособВыплаты			= СпособВыплаты;
								Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
								
								/////////////////////////////////////////////////////////////////////////////
								// ВыплаченныеДоходыРаботникамОрганизацийНУ
								//

								Движение = Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.Добавить();
								
								// Свойства
								Движение.Период 				= ДатаДокумента;
								
								// Измерения
								Движение.Физлицо				= Выборка.ФизЛицо;
								Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
									Движение.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
									Движение.Налогоплательщик	= Налогоплательщик;
								Иначе
									Движение.СтруктурнаяЕдиница = ВыборкаСтрЕд.СтруктурнаяЕдиница;
									Движение.Налогоплательщик	= ВыборкаСтрЕд.СтруктурнаяЕдиница;
								КонецЕсли;
								Движение.МесяцНалоговогоПериода = ПериодВзаиморасчетовКВыплате;
								Движение.Организация			= ВыборкаСтрЕд.СтруктурнаяЕдиница;
								
								// Ресурсы
								Движение.СуммаДохода			= ВыплачиваемаяСумма;
								
								СуммаКВыплате = СуммаКВыплате - ВыплачиваемаяСумма;
								
								// Запомним, сколько уже выплатили
								Если НайденныеСтроки.Количество() = 0 Тогда
									СтрокаТЗ = ТаблЗначенийВыплаченныеСуммыПоПериодам.Добавить();
									СтрокаТЗ.ПериодВзаиморасчетов = ПериодВзаиморасчетовКВыплате;
									СтрокаТЗ.СтруктурнаяЕдиница	  = Выборка.СтруктурнаяЕдиница; // всегда ищем по полям запроса!
									СтрокаТЗ.Налогоплательщик	  = Выборка.Налогоплательщик;
									СтрокаТЗ.ВыплаченнаяСумма 	  = ВыплачиваемаяСумма;
								Иначе
									НайденныеСтроки[0].ВыплаченнаяСумма = НайденныеСтроки[0].ВыплаченнаяСумма + ВыплачиваемаяСумма;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;										
					
					Если СуммаКВыплате <> 0 Тогда
						// Нераспределенный остаток ставим как выплату в месяце по дате документа
						
						/////////////////////////////////////////////////////////////////////////////
						// ВзаиморасчетыСРаботникамиОрганизаций 
						//
						Если Инд = 1 Тогда
							Движение = Движения.ВзаиморасчетыСДепонентамиОрганизаций.ДобавитьРасход();
						Иначе
							Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.ДобавитьРасход();
						КонецЕсли;
						
						// Свойства
						Движение.Период 				= ДатаДокумента;
						
						// Измерения
						Движение.ФизЛицо 				= ВыборкаПоПериодуНачисления.ФизЛицо;
						Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
							Налогоплательщик 			= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоПериодуНачисления.СтруктурнаяЕдиницаПоМестуРаботы,
																										Организация,
																										глИсчислениеНалоговСтруктурныхЕдиниц,
																										Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
							Движение.СтруктурнаяЕдиница	= ВыборкаПоПериодуНачисления.СтруктурнаяЕдиницаПоМестуРаботы;
							Движение.Налогоплательщик	= Налогоплательщик;
						Иначе
							Движение.СтруктурнаяЕдиница = ВыборкаСтрЕд.СтруктурнаяЕдиница;
							Движение.Налогоплательщик	= ВыборкаСтрЕд.СтруктурнаяЕдиница;
						КонецЕсли;							
						Движение.ПериодВзаиморасчетов   = НачалоМесяца(ДатаДокумента);
						Движение.Организация 			= ВыборкаСтрЕд.СтруктурнаяЕдиница;
						
						// Ресурсы
						Движение.СуммаВзаиморасчетов	= СуммаКВыплате;
						
						// Реквизиты
						Движение.ХарактерВыплаты		= ХарактерВыплаты;
						Движение.СпособВыплаты			= СпособВыплаты;
						Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
						
						/////////////////////////////////////////////////////////////////////////////
						// ВыплаченныеДоходыРаботникамОрганизацийНУ
						//

						Движение = Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.Добавить();
								
						// Свойства
						Движение.Период 				= ДатаДокумента;
								
						// Измерения
						Движение.Физлицо				= ВыборкаПоПериодуНачисления.ФизЛицо;
						Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
							Движение.СтруктурнаяЕдиница = ВыборкаСтрЕд.СтруктурнаяЕдиница;
							Движение.Налогоплательщик	= ВыборкаСтрЕд.СтруктурнаяЕдиница;
						Иначе
							Движение.СтруктурнаяЕдиница = ВыборкаСтрЕд.СтруктурнаяЕдиница;
							Движение.Налогоплательщик	= ВыборкаСтрЕд.СтруктурнаяЕдиница;
						КонецЕсли;
						Движение.МесяцНалоговогоПериода = НачалоМесяца(ДатаДокумента);
						Движение.Организация			= ВыборкаСтрЕд.СтруктурнаяЕдиница;
								
						// Ресурсы
						Движение.СуммаДохода			= СуммаКВыплате;
								
					КонецЕсли;
				
				КонецЦикла; // Пока ВыборкаПоПериодуНачисления.Следующий() Цикл
				
			КонецЦикла; // Пока ВыборкаПоСпособуРасчета.Следующий() Цикл

		КонецЦикла; // Пока ВыборкаПоФизЛицо.Следующий() Цикл
	    КонецЦикла; // Пока ВыборкаПоСтрЕд.Следующий() Цикл
	КонецЦикла; // Для Инд = 1 По 2 Цикл
	
КонецПроцедуры // ВыполнитьДвиженияПоРегистрамПоВыплатеЗарплаты()

// Выполняет движения по регистру накопления ВзаиморасчетыОрганизацийСПолучателямиИЛ по погашению задолженности
// 
// Параметры:
//	ДокументОбъект - документ, являющийся регистратором
//	ТекстЗапросаПоВзаиморасчетам - строка с текстом запроса по выплачиваемым суммам 
//									(Поля: Получатель, ДокументОснование, ПериодВзаиморасчетов, СуммаВзаиморасчетов, СуммаСборов)
//	СтруктураПараметровЗапроса - структура с параметрами, используемыми в ТекстЗапросаПоВзаиморасчета
//	глИсчислениеНалоговСтруктурныхЕдиниц - значение глобальной переменной
//
Процедура ВыполнитьДвиженияПоРегистрамПоПеречислениюИЛ(ДокументОбъект,
														ТекстЗапросаПоВзаиморасчетам,
														СтруктураПараметровЗапроса,
														глИсчислениеНалоговСтруктурныхЕдиниц) Экспорт

	Организация 	= ДокументОбъект.Организация;
	ДатаДокумента 	= ДокументОбъект.Дата;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
	
	Запрос = Новый Запрос;
	МестоРаботыТекст="";
	// установим переданные параметры
	Для Каждого ПараметрЗапроса Из СтруктураПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументОснование.ФизЛицо КАК ФизЛицо,
		|	ПериодВзаиморасчетов КАК Период
		|ИЗ
		|	(" + ТекстЗапросаПоВзаиморасчетам + ") КАК Док";
	    ПериодыФизЛицаТекст = 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ * ПОМЕСТИТЬ ПериодыФизЛицаВТ ИЗ ("+ПериодыФизЛицаТекст+") КАК ЗапросПоПериодамДляВТ;" ;
		ПериодыФизЛицаТекстВТ = "ВЫБРАТЬ * ИЗ ПериодыФизЛицаВТ КАК ВложенныйЗапросПериодыФизЛицаИзВТ";
	
		МестоРаботыТекст = СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекстВТ, Организация, Запрос);
		МестоРаботыТекст = ПериодыФизЛицаТекст + "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
		
	КонецЕсли;
	
	Запрос.Текст = МестоРаботыТекст+"
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДокумента.Получатель,
	|	ДанныеДокумента.ДокументОснование,
	|	ДанныеДокумента.ПериодВзаиморасчетов,
	|	ДанныеДокумента.СуммаВзаиморасчетов,
	|	ДанныеДокумента.СуммаСборов,
	|	ЕСТЬNULL(ВзаиморасчетыОстатки.СуммаВзаиморасчетовОстаток, 0) КАК СуммаВзаиморасчетовОстаток,
	|	ЕСТЬNULL(ВзаиморасчетыОстатки.СуммаСборовОстаток, 0) КАК СуммаСборовОстаток";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (ВзаиморасчетыОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ВзаиморасчетыОстатки.СтруктурнаяЕдиница
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &Организация
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &Организация
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВзаиморасчетыОстатки.Налогоплательщик 
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&Организация КАК СтруктурнаяЕдиница,
		|	&Организация КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&Организация КАК Налогоплательщик
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	(" + ТекстЗапросаПоВзаиморасчетам + ") КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Остатки(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|			И Получатель В (ВЫБРАТЬ
	|								Получатель
	|							ИЗ
	|								(" + ТекстЗапросаПоВзаиморасчетам + ") КАК Док)) КАК ВзаиморасчетыОстатки
	|		ПО ДанныеДокумента.Получатель = ВзаиморасчетыОстатки.Получатель
	|			И ДанныеДокумента.ПериодВзаиморасчетов = ВзаиморасчетыОстатки.ПериодВзаиморасчетов";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
		|		ПО ДанныеДокумента.ДокументОснование.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ДанныеДокумента.ПериодВзаиморасчетов = МестоРаботы.Период
		|";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Получатель,
	|	ДанныеДокумента.ДокументОснование,
	|	ДанныеДокумента.ПериодВзаиморасчетов
	|";

    Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.СледующийПоЗначениюПоля("Получатель") Цикл
		
		Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
			
			Пока Выборка.СледующийПоЗначениюПоля("ПериодВзаиморасчетов") Цикл
			
				ОстатокВзаиморасчетовКСписанию 	= Выборка.СуммаВзаиморасчетов;
				ОстатокСборовКСписанию 			= Выборка.СуммаСборов;
				
				ТекущийПолучатель 			= Выборка.Получатель;
				ТекущийДокументОснование 	= Выборка.ДокументОснование;
				ТекущийПериодВзаиморасчетов = Выборка.ПериодВзаиморасчетов;
				
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				
				Пока Выборка.Следующий()
						И Выборка.Получатель = ТекущийПолучатель
						И Выборка.ДокументОснование = ТекущийДокументОснование
						И Выборка.ПериодВзаиморасчетов = ТекущийПериодВзаиморасчетов
						И Выборка.Налогоплательщик <> NULL Цикл
				
					СуммаВзаиморасчетовКВыплате = Мин(ОстатокВзаиморасчетовКСписанию, Выборка.СуммаВзаиморасчетовОстаток);
					СуммаСборовКВыплате 		= Мин(ОстатокСборовКСписанию, Выборка.СуммаСборовОстаток);
					
					Если СуммаВзаиморасчетовКВыплате = 0 И СуммаСборовКВыплате = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ОстатокВзаиморасчетовКСписанию 	= ОстатокВзаиморасчетовКСписанию - СуммаВзаиморасчетовКВыплате;
					ОстатокСборовКСписанию			= ОстатокСборовКСписанию - СуммаСборовКВыплате;
					
					//////////////////////////////////////////////////////
					// ВзаиморасчетыОрганизацийСПолучателямиИЛ
					
					Движение = ДокументОбъект.Движения.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Добавить();
					
					// Свойства
					Движение.Период			= ДатаДокумента;
					Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
					
					// Измерения
					Движение.Получатель 	= Выборка.Получатель;
					Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Движение.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница = Организация;
						Движение.Налогоплательщик	= Организация;
					КонецЕсли;					
					Движение.ДокументОснование		= Выборка.ДокументОснование;
					Движение.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
					Движение.Организация			= Организация;
					
					// Ресурсы
					Движение.СуммаВзаиморасчетов	= СуммаВзаиморасчетовКВыплате;
					Движение.СуммаСборов			= СуммаСборовКВыплате;
						
				КонецЦикла;
			
				// остаток кидаем на структурную единицу по месту работы сотрудника-алименщика
				Если ОстатокВзаиморасчетовКСписанию <> 0 Или ОстатокСборовКСписанию <> 0 Тогда
				
					//////////////////////////////////////////////////////
					// ВзаиморасчетыОрганизацийСПолучателямиИЛ

					Движение = ДокументОбъект.Движения.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Добавить();
					
					// Свойства
					Движение.Период			= ДатаДокумента;
					Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
					
					// Измерения
					Движение.Получатель 	= ТекущийПолучатель;
					Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																						Организация,
																						глИсчислениеНалоговСтруктурныхЕдиниц,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница = СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик 	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница = Организация;
						Движение.Налогоплательщик 	= Организация;
					КонецЕсли;
					Движение.ДокументОснование		= ТекущийДокументОснование;
					Движение.ПериодВзаиморасчетов	= ТекущийПериодВзаиморасчетов;
					Движение.Организация			= Организация;
				
					// Ресурсы
					Движение.СуммаВзаиморасчетов 	= ОстатокВзаиморасчетовКСписанию;
					Движение.СуммаСборов			= ОстатокСборовКСписанию;
					
				КонецЕсли;				
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ПериодВзаиморасчетов") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("Получатель") Цикл

КонецПроцедуры // ВыполнитьДвиженияПоРегистрамПоПеречислениюИЛ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА ДОКУМЕНТОВ

// Процедура рассчитывает начисления по среднему и заполняет реквизит Результат таблицы начислений
// Параметры:
//  	РассчитываемыеТаблицы  - структура из элементов, соответствующих табличным частям документа. 
//				Значение Истина для каждого из элементов структуры означает необходимость расчета 
//				соответствующей табличной части документа
// 		РежимПерерасчета - булево - признак вызов расчета при перерасчете документа
Функция РассчитатьДокументСреднегоЗаработка(Документ, РассчитываемыеТаблицы, ВыборкаПоШапкеДокумента, РежимПерерасчета = Ложь, УчетнаяПолитикаПоПерсоналу, Налогоплательщик = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	Ссылка = Документ.Ссылка;
	
	// Создадим наборы записей используемых регистров 
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	НаборОсновныеНачисления.мВыполнятьВспомогательныеРасчеты = Ложь;
	
	НаборРасчетСреднего = РегистрыРасчета.РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборРасчетСреднего.Отбор.Регистратор.Значение = Ссылка;
	
	Если НЕ РассчитываемыеТаблицы.РасчетСреднего Тогда

		// получим реквизиты табличной части РасчетСреднего 
		
		Запрос = Новый Запрос;
		
		// Установим параметры запроса
		Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
		Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
		Запрос.УстановитьПараметр("ПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());

		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					   |	СтрокаРасчетСреднего.НомерСтроки,
					   |	СтрокаРасчетСреднего.Ссылка.Физлицо,
					   |	ВЫБОР
					   |		КОГДА СтрокаРасчетСреднего.Ссылка.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
					   |			ТОГДА СтрокаРасчетСреднего.Ссылка.Организация
					   |		ИНАЧЕ СтрокаРасчетСреднего.Ссылка.Организация.ГоловнаяОрганизация
					   |	КОНЕЦ КАК Организация,
					   |	СтрокаРасчетСреднего.Ссылка.Приказ,
					   |	СтрокаРасчетСреднего.ВидРасчета,
					   |	СтрокаРасчетСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
					   |	ВЫБОР КОГДА СтрокаРасчетСреднего.БазовыйПериодКонец <> &ПустаяДата ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднего.БазовыйПериодКонец, ДЕНЬ) ИНАЧЕ &ПустаяДата КОНЕЦ КАК БазовыйПериодКонец,
					   |	СтрокаРасчетСреднего.ОтработаноПоПятидневке,
					   |	СтрокаРасчетСреднего.НормаПоПятидневке,
					   |	СтрокаРасчетСреднего.ОтработаноДней,
					   |	СтрокаРасчетСреднего.ОтработаноЧасов,
					   |	СтрокаРасчетСреднего.КоэффициентИндексации,
					   |	СтрокаРасчетСреднего.ЧислоМесяцев,
					   |	СтрокаРасчетСреднего.Размер,
					   |	СтрокаРасчетСреднего.Результат,
					   |	СтрокаРасчетСреднего.ДатаНачалаПериодаПремии,
					   |	СтрокаРасчетСреднего.ДатаОкончанияПериодаПремии
					   |ИЗ
					   |	Документ." + Документ.Метаданные().Имя + ".РасчетСреднего КАК СтрокаРасчетСреднего
					   |
					   |ГДЕ
					   |	СтрокаРасчетСреднего.Ссылка = &ДокументСсылка";

		РезультатЗапросаПоРасчетСреднего = Запрос.Выполнить();
		
		ВыборкаПоРасчетСреднего = РезультатЗапросаПоРасчетСреднего.Выбрать();
		Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
			
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоРасчетСреднего.НомерСтроки) +
			""" табл. части ""Расчет среднего"": ";
			
			// Вид расчета
			Если НЕ ЗначениеЗаполнено(ВыборкаПоРасчетСреднего.ВидРасчета) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ);
			КонецЕсли;
			
			// Дата начала базового периода
			Если НЕ ЗначениеЗаполнено(ВыборкаПоРасчетСреднего.БазовыйПериодНачало) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ);
				// Дата окончания базового периода
			ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоРасчетСреднего.БазовыйПериодКонец) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода!", Отказ);
			ИначеЕсли ВыборкаПоРасчетСреднего.БазовыйПериодКонец < ВыборкаПоРасчетСреднего.БазовыйПериодНачало Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата начала базового периода не может быть больше даты окончания базового периода!", Отказ);
			КонецЕсли; 
			
			Если НЕ Отказ Тогда
				// Заполним записи в наборах записей регистров
				Движение = НаборРасчетСреднего.Добавить();
				
				// Свойства
				Движение.ПериодРегистрации          	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
				Движение.БазовыйПериодНачало        	= ВыборкаПоРасчетСреднего.БазовыйПериодНачало;
				Движение.БазовыйПериодКонец     		= ВыборкаПоРасчетСреднего.БазовыйПериодКонец;
				Движение.ВидРасчета				    	= ВыборкаПоРасчетСреднего.ВидРасчета;
				
				// Измерения
				Движение.ФизЛицо                    	= ВыборкаПоРасчетСреднего.ФизЛицо;
				Движение.Организация					= ВыборкаПоРасчетСреднего.Организация;
				Движение.Приказ							= ВыборкаПоРасчетСреднего.Приказ;
				
				// Ресурсы
				Движение.Результат						= ВыборкаПоРасчетСреднего.Результат;
				Движение.ОтработаноПоПятидневке			= ВыборкаПоРасчетСреднего.ОтработаноПоПятидневке;
				Движение.НормаПоПятидневке				= ВыборкаПоРасчетСреднего.НормаПоПятидневке;
				Движение.ОтработаноДней					= ВыборкаПоРасчетСреднего.ОтработаноДней;
				Движение.ОтработаноЧасов				= ВыборкаПоРасчетСреднего.ОтработаноЧасов;
				
				// Реквизиты
				Движение.Размер							= ВыборкаПоРасчетСреднего.Размер;
				Движение.КоэффициентИндексации			= ВыборкаПоРасчетСреднего.КоэффициентИндексации;
				Движение.ЧислоМесяцев 					= ВыборкаПоРасчетСреднего.ЧислоМесяцев;
				Движение.ПериодРасчетаСреднегоЗаработка	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработка;
				Движение.СпособРасчета					= ВыборкаПоШапкеДокумента.СпособРасчета;
				Движение.ДатаНачалаРасчетногоПериода	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
				Движение.ДатаОкончанияРасчетногоПериода	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
				Движение.ДатаНачалаПериодаПремии		= ВыборкаПоРасчетСреднего.ДатаНачалаПериодаПремии;
				Движение.ДатаОкончанияПериодаПремии		= ВыборкаПоРасчетСреднего.ДатаОкончанияПериодаПремии;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ Отказ Тогда
			НаборРасчетСреднего.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Отказ;
	КонецЕсли; 
	
	Документ.СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборОсновныеНачисления);
	
	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия
	ТаблицаСторноЗаписей = НаборОсновныеНачисления.ПолучитьДополнение();
	Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		// Заполним записи в наборе записей регистра
		// и в табличной части
		
		// новая запись движений
		Движение = НаборОсновныеНачисления.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно);

		// прочие свойства и реквизиты
		Движение.ПериодРегистрации          	= СтрокаСторно.ПериодРегистрацииСторно;
		Движение.ПериодДействияНачало       	= СтрокаСторно.ПериодДействияНачалоСторно;
		Движение.ПериодДействияКонец  		  	= СтрокаСторно.ПериодДействияКонецСторно;
		Движение.Сторно							= Истина;
		Движение.Авторасчет						= Истина;

	КонецЦикла;
	
	// Очистим начисления
	Документ.Начисления.Очистить();
	
	// рассчитываем записи начислений и если надо, записи расчета среднего заработка
	Если РассчитываемыеТаблицы.Начисления Тогда
		
		Если РассчитываемыеТаблицы.РасчетСреднего Тогда
			РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, УчетнаяПолитикаПоПерсоналу, ВыборкаПоШапкеДокумента.Организация,,Истина, Налогоплательщик);
		Иначе
			РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, УчетнаяПолитикаПоПерсоналу, ВыборкаПоШапкеДокумента.Организация, , , Налогоплательщик);
		КонецЕсли;
		
		// перепишем записи начислений в документ
		Для Каждого СтрокаНачислений Из НаборОсновныеНачисления Цикл
			
			НоваяСтрока = Документ.Начисления.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
			
			// прочие реквизиты
			НоваяСтрока.ДатаНачала 					= СтрокаНачислений.ПериодДействияНачало;
			НоваяСтрока.ДатаОкончания 				= СтрокаНачислений.ПериодДействияКонец;
			НоваяСтрока.ОтработаноДней 				= ?(СтрокаНачислений.ОтработаноДней <> 0, СтрокаНачислений.ОтработаноДней, СтрокаНачислений.УчитываемыеДни);
			НоваяСтрока.ОтработаноЧасов 			= ?(СтрокаНачислений.ОтработаноЧасов <> 0, СтрокаНачислений.ОтработаноЧасов, СтрокаНачислений.УчитываемыеЧасы);
			
		КонецЦикла; 
		
	ИначеЕсли РассчитываемыеТаблицы.РасчетСреднего Тогда
		НаборОсновныеНачисления.Записать();
		УчетнаяПолитика = УчетнаяПолитикаПоПерсоналу[ВыборкаПоШапкеДокумента.ГоловнаяОрганизация];
		СформироватьИЗаписатьДанныеРасчетаСреднего("ОсновныеНачисленияРаботниковОрганизаций", Ссылка, НаборРасчетСреднего, УчетнаяПолитика);
	КонецЕсли;

	Если РассчитываемыеТаблицы.РасчетСреднего Тогда
		// перепишем записи расчета среднего заработка в документ
		Документ.РасчетСреднего.Загрузить(НаборРасчетСреднего.Выгрузить());
	КонецЕсли;
	
	Если РежимПерерасчета тогда
		// Для режима перерасчета запишем движения (набор записей расчета среднего уже записан)
		НаборОсновныеНачисления.Записать();
	Иначе	
		// Удаляем движения для режима интерактивного расчета 
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		НаборРасчетСреднего.Очистить();
		НаборРасчетСреднего.Записать();
	КонецЕсли;	
		
	Возврат Не Отказ;
		
КонецФункции  // РассчитатьДокументСреднегоЗаработка

// Процедура разделяет записи в указанном наборе или таблице записей основных начислений
// с учетом периодов действия коэффициентов индексации заработка. Предполагается, что 
// набор записей содержит данные по одному работнику одной организации
//
// Параметры:
//	Организация - головная организация
//	ФизЛицо - работник
//	Приказ - приказ о приеме
//	НаборЗаписей - набор записей или таблица значений со структурой регистра расчета ОсновныеНачисленияРаботниковОрганизаций
//	ДатаНачала - дата, начиная с которой определяется коэффициенты индексации, если Неопределено, то берется
//					с начала первого месяца начисления из набора по последний день
//	ДатаОкончания - дата, по которую выбирать коэффициенты индексации
//	
// Возвращаемого значения нет, изменяет переданный набор
//
Процедура РазделитьЗаписиНабораПоПериодамИндексацииЗаработка(Организация, ФизЛицо, Приказ, НаборЗаписей, ДатаНачала = Неопределено, ДатаОкончания = Неопределено) Экспорт

	// определим даты выбора сведений о коэффициентах индексации
	Если НЕ ЗначениеЗаполнено(ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаНачала = '29991231';
		ДатаОкончания = '00010101';
		
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			ДатаНачала 		= Мин(ДатаНачала, ЗаписьНабора.ПериодДействияНачало);
			ДатаОкончания 	= Макс(ДатаОкончания, ЗаписьНабора.ПериодДействияКонец);
		КонецЦикла;
		
	КонецЕсли; 

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Физлицо", ФизЛицо);
	Запрос.УстановитьПараметр("Приказ", Приказ);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КоэффициентыИндексацииЗаработка.Период,
	|	КоэффициентыИндексацииЗаработка.Коэффициент
	|ИЗ
	|	РегистрСведений.КоэффициентыИндексацииЗаработка КАК КоэффициентыИндексацииЗаработка
	|ГДЕ
	|	КоэффициентыИндексацииЗаработка.Организация = &Организация
	|	И КоэффициентыИндексацииЗаработка.ФизЛицо = &ФизЛицо
	|	И КоэффициентыИндексацииЗаработка.Приказ = &Приказ
	|	И КоэффициентыИндексацииЗаработка.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоэффициентыИндексацииЗаработка.Период
	|";
	
	ВыборкаКоэффициентовИндексации = Запрос.Выполнить().Выбрать();

	// учтем возможность повышения заработка в течение оплачиваемого периода
	Пока ВыборкаКоэффициентовИндексации.Следующий() Цикл
		Инд = 0;
		Пока Инд < НаборЗаписей.Количество() Цикл
			ЗаписьНабора = НаборЗаписей[Инд];
				
			Если ЗаписьНабора.ПериодДействияНачало >= ВыборкаКоэффициентовИндексации.Период Тогда
				// нужно применить коэффициент индексации к строке
				ЗаписьНабора.КоэффициентИндексации = ЗаписьНабора.КоэффициентИндексации * ВыборкаКоэффициентовИндексации.Коэффициент;
				
			ИначеЕсли ЗаписьНабора.ПериодДействияНачало < ВыборкаКоэффициентовИндексации.Период
					И ВыборкаКоэффициентовИндексации.Период <= ЗаписьНабора.ПериодДействияКонец Тогда
					
				// нужно разделить строку на две - до и после индексации
				НоваяЗаписьНабора = НаборЗаписей.Вставить(НаборЗаписей.Индекс(ЗаписьНабора)+1);
				ЗаполнитьЗначенияСвойств(НоваяЗаписьНабора, ЗаписьНабора);
					
				ЗаписьНабора.ПериодДействияКонец 		= НачалоДня(ВыборкаКоэффициентовИндексации.Период) - 1;
				НоваяЗаписьНабора.ПериодДействияНачало 	= НачалоДня(ВыборкаКоэффициентовИндексации.Период);
				НоваяЗаписьНабора.КоэффициентИндексации = ЗаписьНабора.КоэффициентИндексации * ВыборкаКоэффициентовИндексации.Коэффициент;
						
				Инд = Инд + 1; // пропускаем добавленную запись
				
			КонецЕсли;
				
			Инд = Инд + 1;
		КонецЦикла;
			
	КонецЦикла;
	
	// Исключим коэффициенты < 1 и удалим лишние записи
	Инд = 0;
	Пока Инд < НаборЗаписей.Количество() Цикл
		ЗаписьНабора = НаборЗаписей[Инд];
		Если ЗаписьНабора.КоэффициентИндексации < 1 Тогда
			Если Инд > 0 Тогда
				СтараяЗаписьНабора = НаборЗаписей[Инд-1];
				СтараяЗаписьНабора.ПериодДействияКонец = ЗаписьНабора.ПериодДействияКонец;
				НаборЗаписей.Удалить(ЗаписьНабора);
				Инд = Инд - 1;
			Иначе 
				ЗаписьНабора.КоэффициентИндексации = 1;
			КонецЕсли;
		КонецЕсли;
		Инд = Инд + 1;
	КонецЦикла;
	
КонецПроцедуры // РазделитьЗаписиНачисленийПоПериодамИндексацииЗаработка

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОПИСЫВАЮТ СВЯЗИ ПРЕДОПРЕДЕЛЕННЫХ ВИДОВ РАСЧЕТА И СПОСОБОВ ИХ РАСЧЕТА

// Возвращает способ расчета для указанного вида расчета
//
// Параметры
//  ВидРасчета  – ПланыВыидовРасчета.ОсновныеНачисленияОрганизаций.Ссылка – вид расчета
// Возвращаемое значение:
//   Перечисления.СпособыРасчетаОплатыТруда.Ссылка   – <описание возвращаемого значения>
Функция ПолучитьСпособРасчетаОтВидаРасчета(ВидРасчета) Экспорт
	
	// ОРГАНИЗАЦИОННЫЕ НАЧИСЛЕНИЯ
	Если ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням Тогда
		Возврат  Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням; 
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоЧасам Тогда
		Возврат  Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам; 
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладОтОбратного Тогда
		Возврат Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратного;
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладОтОбратногоПоДням Тогда
		Возврат Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням;
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладОтОбратногоПоЧасам Тогда
		Возврат Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам;
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовойОтОбратного Тогда
		Возврат Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеОтОбратного;
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифДневной Тогда
		Возврат  Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке; 
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовой Тогда
		Возврат  Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке; 
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяОплата Тогда
		Возврат Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок; 
	Иначе
		Возврат Перечисления.СпособыРасчетаОплатыТруда.ПустаяСсылка();
	КонецЕсли; 
	
КонецФункции 

//Возвращает вид расчета по организции для указанного способа расчета
//
// Параметры
//   СпособРасчета - Перечисления.СпособыРасчетаОплатыТруда.Ссылка   – <описание возвращаемого значения>
// Возвращаемое значение:
//  ПланыВыидовРасчета.ОсновныеНачисленияОрганизаций.Ссылка – вид расчета
Функция ПолучитьВидРасчетаОрганизацииОтСпособаРасчета(СпособРасчета) Экспорт
	
	Если ЗначениеЗаполнено(СпособРасчета) Тогда
		
		Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням  Тогда
			Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам Тогда
			Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоЧасам
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратного Тогда
			Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладОтОбратного
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням Тогда
			Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладОтОбратногоПоДням
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам Тогда
			Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладОтОбратногоПоЧасам
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеОтОбратного Тогда
			Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовойОтОбратного
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке Тогда
			Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифДневной
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке Тогда
			Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовой
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
			Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяОплата
		Иначе
			Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции 
 
//Возвращает вид расчета для указанного способа расчета
//
// Параметры
//   СпособРасчета - Перечисления.СпособыРасчетаОплатыТруда.Ссылка   – <описание возвращаемого значения>
// Возвращаемое значение:
//  ПланыВыидовРасчета.ОсновныеНачисленияОрганизаций.Ссылка – вид расчета
Функция ПолучитьВидРасчетаОтСпособаРасчета(СпособРасчета) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	УправленческиеНачисления.Ссылка
	                      |ИЗ
	                      |	ПланВидовРасчета.УправленческиеНачисления КАК УправленческиеНачисления
	                      |
	                      |ГДЕ
	                      |	УправленческиеНачисления.СпособРасчета = &СпособРасчета");

	Запрос.УстановитьПараметр("СпособРасчета",СпособРасчета);						  

	Выборка = Запрос.Выполнить().Выбрать(); 

	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка
	Иначе
		Возврат ПланыВидовРасчета.УправленческиеНачисления.ПустаяСсылка();
	КонецЕсли;
		
КонецФункции 
 
// Процедура получает курс валюты упр учета для целей расчетов с персоналом 
// и валюту упручета
// Параметры:
//		ДатаКурса
//		ВалютаУпрУчета - в парамтер будет передана ссылка на валюту
//		КурсВалютыУпрУчета - в параметр будет передан курс
//		ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ПолучитьКурсВалютыУпрУчета(ДатаКурса, ВалютаУпрУчета, КурсВалютыУпрУчета, ВалютаРегламентированногоУчета) Экспорт
	ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Если ВалютаРегламентированногоУчета = ВалютаУпрУчета Тогда
		КурсВалютыУпрУчета = 1;
	Иначе
		Отбор = Новый Структура("Валюта", ВалютаУпрУчета);
		СведенияОКурсе = РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом.Получить(НачалоМесяца(ДатаКурса), Отбор);
		КурсВалютыУпрУчета = ?(СведенияОКурсе.Кратность = 0, 0 , СведенияОКурсе.Курс / СведенияОКурсе.Кратность);
	КонецЕсли;
КонецПроцедуры	

// Разбивает строку таблицы начислений на помесячные записи (длиной не более месяца)
// Параметры:
//		СтрокаНачислений - строка таблицы начислений, которую следует разбить
//		ТаблицаНачислений - таблица начислений, имеющая 2 обязательные колонки: КолонкаДатаНачала и  КолонкаДатаОкончания
//		КоллекцияКолонокТаблицы - коллекция колонок таблицы
//		КолонкаДатаНачала - имя колонки, содержащей дату начала периода записи
//		КолонкаДатаОкончания - имя колонки, содержащей дату окончания периода записи
Процедура РазбитьСтрокуНачисленийНаПомесячныеЗаписи(СтрокаНачислений, ТаблицаНачислений, КоллекцияКолонокТаблицы, КолонкаДатаНачала = "ДатаНачала", КолонкаДатаОкончания = "ДатаОкончания") Экспорт
	
	НачалоПериода = СтрокаНачислений[КолонкаДатаНачала];
	КонецПериода = СтрокаНачислений[КолонкаДатаОкончания];
	
	Если НачалоМесяца(НачалоПериода) = НачалоМесяца(КонецПериода) ИЛИ КонецПериода < НачалоПериода Тогда
		Возврат;// разбивать не надо
	КонецЕсли; 
	
	РазницаВМесяцах = (Год(КонецПериода)*12 + Месяц(КонецПериода)) - (Год(НачалоПериода)*12 + Месяц(НачалоПериода));
	
	// У первоначальной строки дату конца установим в конец первого месяца
	СтрокаНачислений[КолонкаДатаОкончания] = КонецМесяца(НачалоПериода);	
	
	ОчередноеНачалоМесяца = НачалоМесяца(НачалоПериода);
	Для Счетчик = 1 По РазницаВМесяцах Цикл
		
		НоваяСтрока = ТаблицаНачислений.Добавить();
		
		// Скопируем строку
		Для Каждого Колонка из КоллекцияКолонокТаблицы Цикл
			Если Колонка.Имя = "НомерСтроки" Тогда
				Продолжить;
			КонецЕсли; 
			НоваяСтрока[Колонка.Имя] = СтрокаНачислений[Колонка.Имя];
		КонецЦикла; 
		
		// Установим период
		ОчередноеНачалоМесяца = ДобавитьМесяц(ОчередноеНачалоМесяца, 1);
		НоваяСтрока[КолонкаДатаНачала] = ОчередноеНачалоМесяца;	
		НоваяСтрока[КолонкаДатаОкончания] = КонецМесяца(ОчередноеНачалоМесяца);	
		
	КонецЦикла;
	
	// Для  последней строки установим конец периода в конец разбиваемого периода
	НоваяСтрока[КолонкаДатаОкончания]	 = КонецПериода;
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СПИСКОВ СПОСОБОВ РАСЧЕТА

// Возвращает список регламентированных алгоритмов начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокОсновныхВариантовНачисленийОрганизации() Экспорт

	 СписокСпособов = Новый СписокЗначений;
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратного);	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеОтОбратного);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате);
	 
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);

     // почасовые отклонения
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммойДляПочасовогоОтклонения);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения);
	 
     // произвольные формулы расчета
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2УП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2ДП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ДП2УП3);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МинП1_П2УП3);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ОП2);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ОП2ДП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ОП2УП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П3ДП1ОП2);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2ОП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ДП2ОП3);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2УП3ДП4);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3ОП4);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МинП1_П2УП3ОП4);

	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1ВП2_0);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2ДП3ВП4_0);	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2_П5ДП3УП4);	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2_П3УП4ДП5);	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3УП4ДП5);	 
     
	 Возврат СписокСпособов

КонецФункции // ПолучитьСписокОсновныхВариантовНачисленийОрганизации()

// Возвращает список регламентированных алгоритмов начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокДополнительныхВариантовНачислений() Экспорт

	 СписокСпособов = Новый СписокЗначений;
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруОтОбратного);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратного);

     // произвольные формулы расчета
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2УП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2ДП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ДП2УП3);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МинП1_П2УП3);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ОП2);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ОП2ДП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ОП2УП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П3ДП1ОП2);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2ОП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ДП2ОП3);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2УП3ДП4);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3ОП4);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МинП1_П2УП3ОП4);

	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1ВП2_0);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2ДП3ВП4_0);	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2_П5ДП3УП4);	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2_П3УП4ДП5);	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3УП4ДП5);	 

	 Возврат СписокСпособов

КонецФункции // ПолучитьСписокДополнительныхВариантовНачислений()

// Возвращает список алгоритмов начислений, являющихся почасовыми отклонениями
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокНачисленийПочасовыхОтклонений() Экспорт

	СписокСпособов = Новый СписокЗначений;
	 
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммойДляПочасовогоОтклонения);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения);

	Возврат СписокСпособов

КонецФункции // ПолучитьСписокДополнительныхВариантовНачислений()

// Возвращает список алгоритмов начислений, зависящих от среднего заработка
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокНачисленийПоСреднемуЗаработку() Экспорт

	 СписокСпособов = Новый СписокЗначений;
	 
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения);

	 Возврат СписокСпособов

КонецФункции // ПолучитьСписокНачисленийПоСреднемуЗаработку()

// Возвращает список регламентированных алгоритмов начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокВариантовУдержанийОрганизации() Экспорт

	 СписокСпособов = Новый СписокЗначений;
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор);
	 
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2УП3);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2ДП3);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ДП2УП3);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МинП1_П2УП3);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ОП2);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ОП2ДП3);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ОП2УП3);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П3ДП1ОП2);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2ОП3);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ДП2ОП3);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2УП3ДП4);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3ОП4);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МинП1_П2УП3ОП4);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1ВП2_0);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2ДП3ВП4_0);	 
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2_П5ДП3УП4);	 
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2_П3УП4ДП5);	 
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3УП4ДП5);
	 
	 Возврат СписокСпособов

КонецФункции // ПолучитьСписокВариантовУдержанийОрганизации()

// Возвращает список регламентированных алгоритмов начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокВариантовУпрНачислений() Экспорт

	 СписокСпособов = Новый СписокЗначений;
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2УП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2ДП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ДП2УП3);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МинП1_П2УП3);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ОП2);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ОП2ДП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ОП2УП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П3ДП1ОП2);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2ОП3);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ДП2ОП3);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2УП3ДП4);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3ОП4);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МинП1_П2УП3ОП4);
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1ВП2_0);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2ДП3ВП4_0);	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2_П5ДП3УП4);	 	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2_П3УП4ДП5);	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3УП4ДП5);	 
	 
	 Возврат СписокСпособов

КонецФункции // ПолучитьСписокВариантовУпрНачислений()

// Возвращает список алгоритмов начислений надбавок
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокВариантовНадбавок() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратного);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеОтОбратного);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам);

	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2УП3);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2ДП3);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ДП2УП3);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МинП1_П2УП3);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ОП2);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ОП2ДП3);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ОП2УП3);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П3ДП1ОП2);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2ОП3);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1ДП2ОП3);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.П1УП2УП3ДП4);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3ОП4);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МинП1_П2УП3ОП4);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1ВП2_0);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2ДП3ВП4_0);	 
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2_П5ДП3УП4);	 
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2_П3УП4ДП5);	 
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3УП4ДП5);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокВариантовНадбавок()

// Возвращает список алгоритмов начислений, не требующих указания валюты начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокСпособовРасчетаНеТребующихУказанияВалюты() Экспорт
	
	СписокСпособов = Новый СписокЗначений;

	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);
	
	Возврат СписокСпособов;
	
КонецФункции 

// Возвращает алгоритмы начислений, не требующих указания валюты начислений, в виде соответствия
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Соответствие, содержащая подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСоответствиеСпособовРасчетаТребующихВалюту() Экспорт
	
	Список = ПолучитьСписокСпособовРасчетаНеТребующихУказанияВалюты();
	СоответствиеСпособов = Новый Соответствие;
	Для Сч = 0 По Перечисления.СпособыРасчетаОплатыТруда.Количество() - 1 Цикл
		Значение = Перечисления.СпособыРасчетаОплатыТруда.Получить(Сч);
		СоответствиеСпособов.Вставить(Значение, Список.НайтиПоЗначению(Значение) = Неопределено);
	КонецЦикла;  
	
    Возврат СоответствиеСпособов
	
КонецФункции // Получить()

#Если Клиент Тогда

// По плану видов расчета выполняет поиск элементов по первым символам имени с применением шаблона
// Параметры:
//     	СтрокаПервыеСимволы - Строка - первые символы имени расчета
// 	   	ИмяПланаВидовРасчета - Строка - имя плана видов расчета
//	   	СтрокаДопУсловие - Строка - дополнительное условие для отбора видов расчетов
//		СписокДопПараметры - Структура - параметры запроса, необходимые для вычисления доп. условия
// Возвращает:
//		Удовлетворяющий шаблону имени и условиям отбора вид расчета, если таких несколько - то список значений
Функция ПолучитьСписокВидовРасчетаПоПервымСимволамИмениРасчета(	СтрокаПервыеСимволы, ИмяПланаВидовРасчета, 
																СтрокаДопУсловие, СтруктураДопПараметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 51
	               |	ОсновныеНачисленияОрганизаций.Ссылка КАК Ссылка,
	               |	ОсновныеНачисленияОрганизаций.Наименование + "" ("" + ОсновныеНачисленияОрганизаций.Код + "")"" КАК СтрокаПредставления
	               |ИЗ
	               |	ПланВидовРасчета." + ИмяПланаВидовРасчета + " КАК ОсновныеНачисленияОрганизаций
	               |
	               |ГДЕ
	               |	ОсновныеНачисленияОрганизаций.Наименование ПОДОБНО &парамШаблонИмени
				   | " + ?(НЕ ЗначениеЗаполнено(СтрокаДопУсловие), "", " И " + СтрокаДопУсловие);
				   
	Если СтруктураДопПараметры <> Неопределено Тогда
		// Параметры, требуемые для вычисления дополнительного условия
		Для Каждого Элемент ИЗ СтруктураДопПараметры  Цикл
			Запрос.УстановитьПараметр(Элемент.Ключ , Элемент.Значение);
		КонецЦикла; 
	КонецЕсли;
	
	// заменим спецсимволы
	СтрокаПервыеСимволы = СтрЗаменить(СтрокаПервыеСимволы, "~", "~~");
	СтрокаПервыеСимволы = СтрЗаменить(СтрокаПервыеСимволы, "%", "~%");
	СтрокаПервыеСимволы = СтрЗаменить(СтрокаПервыеСимволы, "_", "~_");
	СтрокаПервыеСимволы = СтрЗаменить(СтрокаПервыеСимволы, "[", "~[");
	СтрокаПервыеСимволы = СтрЗаменить(СтрокаПервыеСимволы, "-", "~-");
	
	Запрос.УстановитьПараметр("парамШаблонИмени", СтрокаПервыеСимволы + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Значение = Неопределено;
	
	Если Выборка.Количество() = 51 Тогда
		Предупреждение("Найдено более 50-ти значений, удовлетворяющих условиям выбора. Задайте более длинную строку или воспользуйтесь командой выбора (F4).");
	ИначеЕсли Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Значение = Выборка.Ссылка;
	ИначеЕсли Выборка.Количество() = 0 Тогда
		Предупреждение("В элемент управления введены данные не удовлетворяющие условиям выбора.");
	Иначе
		Значение = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Значение.Добавить(Выборка.Ссылка, Выборка.СтрокаПредставления);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции // ПолучитьСписокВидовРасчетаПоПервымСимволамИмениРасчета()

// Процедура производит настройки для колонок при выводе плановых начислений
// в зависимости от параметров вида расчета.
//
Процедура ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ДанныеСтроки, СведенияОВидахРасчета, ИспользуютсяТарифныеРазряды = Истина) Экспорт
		
	
	Если ОформлениеСтроки.Ячейки.Найти("Надбавка") = Неопределено Тогда
		СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ДанныеСтроки.ВидРасчета);
	Иначе
		СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ДанныеСтроки.Надбавка);
	КонецЕсли; 
	
	ЕстьПоказатели = Ложь;
	Для СчПоказателей = 1 По 4 Цикл
		Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] Тогда
			ЕстьПоказатели = Истина;
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Истина;
			Если ИспользуютсяТарифныеРазряды Тогда
				ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["ТарифныйРазряд" + СчПоказателей].Видимость = Ложь;
			КонецЕсли;
		ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] И ИспользуютсяТарифныеРазряды Тогда
			ЕстьПоказатели = Истина;
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
			ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
			ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь;
			Если ИспользуютсяТарифныеРазряды Тогда
				ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"]);
				ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Истина;
				ОформлениеСтроки.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость = Истина;
			КонецЕсли;
			
		Иначе
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
			Если ИспользуютсяТарифныеРазряды Тогда
				ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["ТарифныйРазряд" + СчПоказателей].Видимость = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
		ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей].Видимость = СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
		ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей].ТолькоПросмотр = (НЕ СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"]);
		ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр = (НЕ СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"]);
	КонецЦикла;
	
	Если не ЕстьПоказатели Тогда
		ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.УстановитьТекст("<ввод при расчете>");
		ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.Видимость = Истина;
		ОформлениеСтроки.Ячейки["Показатель1"].ТолькоПросмотр = Истина;
		Если ИспользуютсяТарифныеРазряды Тогда
			ОформлениеСтроки.Ячейки["НаименованиеПоказательТР1"].Видимость = Ложь;
			ОформлениеСтроки.Ячейки["ТарифныйРазряд1"].Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;

КонецПроцедуры // ПриВыводеСтрокиПлановыхНачислений()

// Процедура производит настройки для колонок при выводе начислений/удержаний
// в зависимости от параметров вида расчета.
//
Процедура ПриВыводеСтрокиРасчета(ОформлениеСтроки, ДанныеСтроки, СведенияОВидахРасчета, ИспользуютсяТарифныеРазряды = Истина) Экспорт
		
	ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;

	СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ДанныеСтроки.ВидРасчета, "ПриРасчете");
	Для СчПоказателей = 1 По 4 Цикл
		
		ВидимостьПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
		ВидимостьНаименованияПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"];
		
		// настроим видимость ячеек
		ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
		ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = ВидимостьНаименованияПоказателя;
		
		// размеры показателя будут доступны только для видимых и изменяемых показателей
		ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр = Не ВидимостьПоказателя Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется
		Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.ВиденНоНеРедактируетсяПриРасчете;
		
		// если отображается наименование - пропишем текст
		Если ВидимостьНаименованияПоказателя Тогда		
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
		ИначеЕсли ИспользуютсяТарифныеРазряды Тогда
			Если СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] Тогда			
				ВидимостьПоказателя = СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Видимость"];
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр = Не ВидимостьПоказателя Или СведенияОВидеРасчета["ПоказательТР" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"];			
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"]);
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;

КонецПроцедуры // ПриВыводеСтрокиРасчета()

// Вызывается при изменении показателя схемы мотивации в строке табличной части документов
//
// Параметры:
//	ЭлементТабличноеПоле - элемент формы табличное поле, в котором 
//	Значение - измененное значение показателя 
//	Показатель - СправочникСсылка.ПоказателиСхемМотивации - вид показателя
//	СведенияОВидахРасчета - соответствие, в котором хранится информация о видах расчета, 
//							полученное с помощью функции ПолучитьСведенияОВидеРасчета()
//	ДокументОбъект - объект, представляющий документ, в котором произошло изменение
//	ИмяТабличнойЧасти - строка с именем табличной части, в которой произошло изменение
//	УчетнаяПолитикаПоПерсоналуОрганизации - структура с учетной политикой по персоналу организации (только для регл. учета)
//
Процедура ПриИзмененииЗначенияПоказателяМотивации(ЭлементТабличноеПоле, 
													Значение, 
													Показатель, 
													СведенияОВидахРасчета, 
													ДокументОбъект, 
													ИмяТабличнойЧасти, 
													УчетнаяПолитикаПоПерсоналуОрганизации = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Показатель) Тогда
		Возврат;
	КонецЕсли;

	Если Показатель.ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий Тогда		
		
		Для каждого СтрокаНачисления Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
		
			СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчета(СведенияОВидахРасчета, СтрокаНачисления.ВидРасчета);
		
			Если СведенияОВидеРасчета.Показатель1 = Показатель Тогда
				СтрокаНачисления.Показатель1 = Значение;
			ИначеЕсли СведенияОВидеРасчета.Показатель2 = Показатель Тогда
				СтрокаНачисления.Показатель2 = Значение;
			ИначеЕсли СведенияОВидеРасчета.Показатель3 = Показатель Тогда
				СтрокаНачисления.Показатель3 = Значение;
			ИначеЕсли СведенияОВидеРасчета.Показатель4 = Показатель Тогда
				СтрокаНачисления.Показатель4 = Значение;				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
	
		СтруктураПоиска = Новый Структура();
	
		ДанныеСтроки = ЭлементТабличноеПоле.ТекущиеДанные;
		
		Если Показатель.ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ПоПодразделению Тогда
			
			Если ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
				СтруктураПоиска.Вставить("ПодразделениеОрганизации", ДанныеСтроки.ПодразделениеОрганизации);
			ИначеЕсли ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("Подразделение") <> Неопределено Тогда
				СтруктураПоиска.Вставить("Подразделение", ДанныеСтроки.Подразделение);
			Иначе
				Возврат; // нет подразделения - нечего и менять
			КонецЕсли;
			
		Иначе
			
			СтруктураПоиска.Вставить("ФизЛицо", ДанныеСтроки.ФизЛицо);
			Если ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("Приказ") <> Неопределено Тогда
				Если УчетнаяПолитикаПоПерсоналуОрганизации.ПоддержкаВнутреннегоСовместительства Тогда
					СтруктураПоиска.Вставить("Приказ", ДанныеСтроки.Приказ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		НайденныеСтроки = ДокументОбъект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаНачисления Из НайденныеСтроки Цикл
			
				СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчета(СведенияОВидахРасчета, СтрокаНачисления.ВидРасчета);
			
				Если СведенияОВидеРасчета.Показатель1 = Показатель Тогда
					СтрокаНачисления.Показатель1 = Значение;
				ИначеЕсли СведенияОВидеРасчета.Показатель2 = Показатель Тогда
					СтрокаНачисления.Показатель2 = Значение;
				ИначеЕсли СведенияОВидеРасчета.Показатель3 = Показатель Тогда
					СтрокаНачисления.Показатель3 = Значение;
				ИначеЕсли СведенияОВидеРасчета.Показатель4 = Показатель Тогда
					СтрокаНачисления.Показатель4 = Значение;				
				КонецЕсли;
				
		КонецЦикла;		
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииЗначенияПоказателяМотивации()


#КонецЕсли
 
// Возвращает список алгоритмов основных начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокВариантовОсновныхНачислений() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	                                   
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратного);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеОтОбратного);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокВариантовНадбавок()

// Возвращает список способов расчетов фиксированной суммой
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокСпособовРасчетовФиксированнойСуммой() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	                                   
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокСпособовРасчетовФиксированнойСуммой()

// Возвращает список способов расчетов "от обратного"
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокСпособовРасчетовОтОбратного() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	                                   
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратного);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеОтОбратного);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруОтОбратного);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокСпособовРасчетовОтОбратного()

// Возвращает список способов расчетов по договорам ГПХ
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокСпособовРасчетовПоДоговору() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	                                   
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруОтОбратного);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокСпособовРасчетовПоДоговору()

// Возвращает список способов расчетов по среднему заработку
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокСпособовРасчетовПоСреднемуЗаработку() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	                                   
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокСпособовРасчетовПоСреднемуЗаработку()

// Возвращает список способов расчетов по шкале ставок
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокСпособовРасчетовПоШкалеСтавок() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	                                   
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокСпособовРасчетовПоДоговору()

// Возвращает список способов расчетов по минимальной заработной плате
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокСпособовРасчетовПоМинимальнойЗаработнойПлате() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	                                   
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокСпособовРасчетовПоМинимальнойЗаработнойПлате()

// Возвращает список предопределенных начислений
Функция ПредопределенныеНачисленияОрганизации() Экспорт

	СписокПредопределенныхВР = Новый СписокЗначений;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОсновныеНачисленияОрганизаций.Ссылка,
	                      |	ОсновныеНачисленияОрганизаций.Наименование
	                      |ИЗ
	                      |	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	                      |
	                      |ГДЕ
	                      |	(ОсновныеНачисленияОрганизаций.Предопределенный)");

	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
	    СписокПредопределенныхВР.Добавить(Результат.Ссылка,Результат.Наименование);
	КонецЦикла;
	
    Возврат СписокПредопределенныхВР
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ВИДАМИ РАСЧЕТА

// Эта функция возвращает информацию о виде расчета из переданного соответствия
// Если в соответствии не найдена информация о виде расчета - она подготавливается и 
// помещается в соответствие
// Применяется для работы с формами, в которых активно требуется получать 
// информащцию о видах расчета, например, при выводе строки табличного поля
//
// Параметры:      
//	СведенияОВидахРасчета - соответствие, у котрого в качестве ключа - ПланВидовРасчетаСсылка, а 
//  				  в качестве значения - структура из элементов
//					  РазмерТребуется - булево - если да, то при вводе такого 
//										вида расчета требуется проставлять значение "размер" 
//										(суммы, проценты и проч. показатели, используемые при расчете)
//
//	ВидРасчета - ПланВидовРасчетаСсылка
//
// Возвращаемое значение:
//  Описанная выше структура
//
Функция ПолучитьСведенияОВидеРасчета(СведенияОВидахРасчета, ВидРасчета) Экспорт
	
	СведенияОВидеРасчета = СведенияОВидахРасчета[ВидРасчета];
	Если СведенияОВидеРасчета = Неопределено Тогда
		
		ИзменениеПоказателяНеУказано = Перечисления.ИзменениеПоказателейСхемМотивации.ПустаяСсылка();
	
		СведенияОВидеРасчета = Новый Структура("
		|СпособРасчета,
		|ЗачетОтработанногоВремени,
		|ЗачетНормыВремени,
		|УчетОтработанногоВремени,
		|ПериодРасчетаСреднегоЗаработка,
		|РазмерТребуется, 
		|НеТребуетВалюты,
		|ТребуетВводаТарифногоРазряда,
		|Показатель1,
		|Показатель2,
		|Показатель3,
		|Показатель4,
		|Показатель5",
		Неопределено, 		// СпособРасчета
		Ложь,			    // ЗачетОтработанногоВремени
		Ложь,				// ЗачетНормыВремени
		Ложь,				// УчетОтработанногоВремени
		0,					// ПериодРасчетаСреднегоЗаработка
		Ложь,               // РазмерТребуется
		Ложь,               // НеТребуетВалюты	
		Ложь,				// ТребуетВводаТарифногоРазряда
		Неопределено,		// Показатель1
		Неопределено,		// Показатель2
		Неопределено,		// Показатель3
		Неопределено,		// Показатель4
		Неопределено);		// Показатель5
		
		СпособРасчета = ВидРасчета.СпособРасчета;
		ТипВР = ТипЗнч(ВидРасчета);
		// размер требует способ расчета
		СведенияОВидеРасчета.СпособРасчета = СпособРасчета;
		СведенияОВидеРасчета.РазмерТребуется = СпособРасчетаТребуетРазмер(СпособРасчета);
		СведенияОВидеРасчета.НеТребуетВалюты = СпособРасчетаНеТребуетВалюты(СпособРасчета);
		// размер требует вид расчета
		Если ТипВР = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
			ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета,ВидРасчета,"ЗачетОтработанногоВремени,
																	 |ЗачетНормыВремени,
																	 |УчетОтработанногоВремени,
																	 |ТребуетВводаТарифногоРазряда,
																	 |ПериодРасчетаСреднегоЗаработка,
																	 |Показатель1,
																	 |Показатель2,
																	 |Показатель3,
																	 |Показатель4,
																	 |Показатель5");
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
				СведенияОВидеРасчета.РазмерТребуется = Истина;
			КонецЕсли;	
			Если СведенияОВидеРасчета.ТребуетВводаТарифногоРазряда Тогда
				СведенияОВидеРасчета.НеТребуетВалюты = Истина
			КонецЕсли;
		КонецЕсли;
		Если ТипВР = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций")  Тогда
			ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета,ВидРасчета,"ТребуетВводаТарифногоРазряда,
																	 |Показатель1,
																	 |Показатель2,
																	 |Показатель3,
																	 |Показатель4,
																	 |Показатель5");
			Если СведенияОВидеРасчета.ТребуетВводаТарифногоРазряда Тогда
				СведенияОВидеРасчета.НеТребуетВалюты = Истина
			КонецЕсли;
			Если ПолучитьСписокНачисленийПоСреднемуЗаработку().НайтиПоЗначению(СпособРасчета) <> Неопределено Тогда
				СведенияОВидеРасчета.ПериодРасчетаСреднегоЗаработка = ВидРасчета.ЧислоМесяцев;
			КонецЕсли;
		КонецЕсли;
		Если ТипВР = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций") Тогда
			ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета,ВидРасчета,"Показатель1,
																	 |Показатель2,
																	 |Показатель3,
																	 |Показатель4,
																	 |Показатель5");
			Если ПолучитьСписокНачисленийПоСреднемуЗаработку().НайтиПоЗначению(СпособРасчета) <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета,ВидРасчета,"ПериодРасчетаСреднегоЗаработка");
			КонецЕсли;
		КонецЕсли;
		Если ТипВР = Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления") Тогда
			ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета,ВидРасчета,"ЗачетОтработанногоВремени,
																	 |Показатель1,
																	 |Показатель2,
																	 |Показатель3,
																	 |Показатель4,
																	 |Показатель5");
		КонецЕсли;
		Если ТипВР = Тип("ПланВидовРасчетаСсылка.УправленческиеУдержания") Тогда
			ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета,ВидРасчета,"Показатель1,
																	 |Показатель2,
																	 |Показатель3,
																	 |Показатель4,
																	 |Показатель5");
		КонецЕсли;
		
		СведенияОВидахРасчета[ВидРасчета] = СведенияОВидеРасчета;
	КонецЕсли;
	
	Возврат СведенияОВидеРасчета;
	
КонецФункции  // ПолучитьСведенияОВидеРасчета()

// Эта функция возвращает информацию о виде расчета из переданного соответствия
// Если в соответствии не найдена информация о виде расчета - она подготавливается и 
// помещается в соответствие
// Применяется для работы с формами, в которых активно требуется получать 
// информащцию о видах расчета, например, при выводе строки табличного поля
//
// Параметры:      
//	СведенияОВидахРасчета - соответствие, у котрого в качестве ключа - ПланВидовРасчетаСсылка, а 
//  				  в качестве значения - структура из элементов
//					  РазмерТребуется - булево - если да, то при вводе такого 
//										вида расчета требуется проставлять значение "размер" 
//										(суммы, проценты и проч. показатели, используемые при расчете)
//
//	ВидРасчета - ПланВидовРасчетаСсылка
//
// Возвращаемое значение:
//  Описанная выше структура
//
Функция ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидРасчета, Режим = "ПлановыеНачисления") Экспорт
	
	СведенияОВидеРасчета = СведенияОВидахРасчета[ВидРасчета];
	
	Если СведенияОВидеРасчета = Неопределено Тогда
		ТипВидРасчета = ТипЗнч(ВидРасчета);
		ИзменениеПоказателяНеУказано = Перечисления.ИзменениеПоказателейСхемМотивации.ПустаяСсылка();
		СведенияОВидеРасчета = Новый Структура("Показатель1Наименование,
												|Показатель1НаименованиеВидимость,
												|Показатель1Видимость,
												|Показатель1ВозможностьИзменения,
                                                |Валюта1Видимость,
												|ПоказательТР1Наименование,
												|ПоказательТР1НаименованиеВидимость,
												|ПоказательТР1Видимость,
												|ПоказательТР1ВозможностьИзменения,
												|Показатель2Наименование,
												|Показатель2НаименованиеВидимость,
												|Показатель2Видимость,
												|Показатель2ВозможностьИзменения,
												|Валюта2Видимость,
												|ПоказательТР2Наименование,
												|ПоказательТР2Видимость,
												|ПоказательТР2НаименованиеВидимость,
												|ПоказательТР2ВозможностьИзменения,												
												|Показатель3Наименование,
												|Показатель3НаименованиеВидимость,
												|Показатель3Видимость,
												|Показатель3ВозможностьИзменения,
												|Валюта3Видимость,
												|ПоказательТР3Наименование,
												|ПоказательТР3НаименованиеВидимость,
												|ПоказательТР3Видимость,
												|ПоказательТР3ВозможностьИзменения,												
												|Показатель4Наименование,
												|Показатель4НаименованиеВидимость,
												|Показатель4Видимость,
												|Показатель4ВозможностьИзменения,
												|Валюта4Видимость,
												|ПоказательТР4Наименование,
												|ПоказательТР4НаименованиеВидимость,
												|ПоказательТР4Видимость,
												|ПоказательТР4ВозможностьИзменения,
												|РазмерТребуется,
												|НеТребуетВалюты,
												|ТребуетВводаТарифногоРазряда",												
												
												"",            						// Показатель1Наименование
												Истина,                             // Показатель1НаименованиеВидимость
												Истина,                             // Показатель1Видимость
                                                ИзменениеПоказателяНеУказано,       // Показатель1ВозможностьИзменения
												Ложь,                               // Валюта1Видимость
												
												"",                                 // ПоказательТР1Наименование
												Истина,								// ПоказательТР1НаименованиеВидимость
												Истина,								// ПоказательТР1Видимость
												ИзменениеПоказателяНеУказано,       // ПоказательТР1ВозможностьИзменения
												
												"",                                 // Показатель2Наименование
												Ложь,                               // Показатель2НаименованиеВидимость
												Ложь,                               // Показатель2Видимость
                                                ИзменениеПоказателяНеУказано,		// Показатель2ВозможностьИзменения
												Ложь,                               // Валюта2Видимость
												
												"",									// ПоказательТР2Наименование
												Ложь,   	                        // ПоказательТР2Видимость
												Ложь,	                            // ПоказательТР2НаименованиеВидимость
												ИзменениеПоказателяНеУказано,		// ПоказательТР2ВозможностьИзменения
												
												"", 								// Показатель3Наименование
												Ложь,                               // Показатель3НаименованиеВидимость
												Ложь,                               // Показатель3Видимость
                                                ИзменениеПоказателяНеУказано,       // Показатель3ВозможностьИзменения
												Ложь,								// Валюта3Видимость 
												
												"",									// ПоказательТР3Наименование
												Ложь,                             	// ПоказательТР3НаименованиеВидимость
												Ложь,								// ПоказательТР3Видимость
												ИзменениеПоказателяНеУказано,		// ПоказательТР3ВозможностьИзменения
												
												"",                                 // Показатель4Наименование
												Ложь,                               // Показатель4НаименованиеВидимость
												Ложь,                               // Показатель4Видимость
                                                ИзменениеПоказателяНеУказано,       // Показатель4ВозможностьИзменения
												Ложь,                               // Валюта4Видимость 
												
												"",									// ПоказательТР4Наименование
												Ложь,								// ПоказательТР4НаименованиеВидимость
												Ложь,                             	// ПоказательТР4Видимость
												ИзменениеПоказателяНеУказано,       // ПоказательТР4ВозможностьИзменения
												
												Ложь,								// РазмерТребуется
												Ложь,                               // НеТребуетВалюты
												Ложь);                              // ТребуетВводаТарифногоРазряда
												
		Запрос = Новый Запрос;
		
		 Запрос.Текст = 
		"ВЫБРАТЬ
		|	Расчеты.СпособРасчета,
		|	Расчеты.Показатель1,
		|	Расчеты.Показатель1.Предопределенный,
		|	Расчеты.Показатель1.Наименование,
		|	Расчеты.Показатель1.ТипПоказателя,
		|	ЕСТЬNULL(Расчеты.Показатель1.ВозможностьИзменения, ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка)) КАК Показатель1ВозможностьИзменения,
		|	Расчеты.Показатель2,
		|	Расчеты.Показатель2.Предопределенный,
		|	Расчеты.Показатель2.Наименование,
		|	Расчеты.Показатель2.ТипПоказателя,
		|	ЕСТЬNULL(Расчеты.Показатель2.ВозможностьИзменения, ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка)) КАК Показатель2ВозможностьИзменения,
		|	Расчеты.Показатель3,
		|	Расчеты.Показатель3.Предопределенный,
		|	Расчеты.Показатель3.Наименование,
		|	Расчеты.Показатель3.ТипПоказателя,
		|	ЕСТЬNULL(Расчеты.Показатель3.ВозможностьИзменения, ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка)) КАК Показатель3ВозможностьИзменения,
		|	Расчеты.Показатель4,
		|	Расчеты.Показатель4.Предопределенный,
		|	Расчеты.Показатель4.Наименование,
		|	Расчеты.Показатель4.ТипПоказателя,
		|	ЕСТЬNULL(Расчеты.Показатель4.ВозможностьИзменения, ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка)) КАК Показатель4ВозможностьИзменения
		|ИЗ
		|	ПланВидовРасчета." + Метаданные.НайтиПоТипу(ТипВидРасчета).Имя + " КАК Расчеты
		|ГДЕ
		|	Расчеты.Ссылка = &Ссылка";
	
		Запрос.УстановитьПараметр("Ссылка",ВидРасчета);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			СтрокаТаблицыСведений = РезультатЗапроса.Выбрать();
			СтрокаТаблицыСведений.Следующий();
			Для СчПоказателей = 1 По 4 Цикл
				ТипПоказателя = СтрокаТаблицыСведений["Показатель" + СчПоказателей + "ТипПоказателя"];				
				СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = СтрокаТаблицыСведений["Показатель" + СчПоказателей + "ВозможностьИзменения"];
				СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"] = СтрокаТаблицыСведений["Показатель" + СчПоказателей + "Наименование"];
				Если СтрокаТаблицыСведений["Показатель" + СчПоказателей].Пустая() Тогда
					СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] = Ложь;
					СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] = Ложь;
					СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] = Ложь;
					СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] = Ложь;
					СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Видимость"] = Ложь;															
				ИначеЕсли СтрокаТаблицыСведений["Показатель" + СчПоказателей + "Предопределенный"] Тогда
					СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] = Ложь;
					СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] = Ложь;
					СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] = Ложь;
					СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] = Ложь;
					СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Видимость"] = Ложь;					
				ИначеЕсли Режим = "ПлановыеНачисления" и (СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.ВводитсяПриРасчете
						Или СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.ВиденНоНеРедактируетсяПриРасчете) Тогда
					СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] = Ложь;
					СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] = Ложь;
					СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] = Ложь;
					СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] = Ложь;
					СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Видимость"] = Ложь;					
				Иначе
					СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] = Истина;					
					Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
						СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] = Истина;
						СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Видимость"] = Истина;
						СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"] = СтрокаТаблицыСведений["Показатель" + СчПоказателей + "Наименование"];
						
						СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] = Ложь;
						СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] = Ложь;
						СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] = Ложь;							
					ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Числовой Тогда
						СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] = Ложь;
						СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Видимость"] = Ложь;							
						
						СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] = Истина;
						СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] = Ложь;
					ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный Тогда
						СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] = Ложь;
						СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Видимость"] = Ложь;							
						
						СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] = Истина;
						СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] = Истина;
					ИначеЕсли (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
						Или (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная) Тогда
						СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] = Ложь;
						СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Видимость"] = Ложь;							
						
						СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] = Ложь;
						СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] = Ложь;
						СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] = Ложь;
					Иначе
						СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] = Ложь;
						СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Видимость"] = Ложь;							
						
						СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] = Истина;
						СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
        // заполним для регламентированных способов оплаты труда
		Если ЗначениеЗаполнено(ВидРасчета) И (ТипВидРасчета = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций")
				Или ТипВидРасчета = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций"))
				Или ТипВидРасчета = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций") Тогда
			СтруктураВидаРасчета = Новый Структура("СпособРасчета,ТребуетВводаТарифногоРазряда,ОбозначениеВТабелеУчетаРабочегоВремени");	
			ЗаполнитьЗначенияСвойств(СтруктураВидаРасчета,ВидРасчета);
			Если ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПраздничныхИВыходных
				Или ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаСверхурочных
				Или ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаПраздничныеИВыходные
				Или ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаСверхурочныеЧасы Тогда
				СведенияОВидеРасчета["Показатель1Наименование"] = "Сумма";
				СведенияОВидеРасчета["Показатель1Видимость"] = Истина;
				СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Истина;			
				СведенияОВидеРасчета["Валюта1Видимость"] = Ложь;
				СведенияОВидеРасчета["Показатель2Наименование"] = "Тарифная ставка";
				СведенияОВидеРасчета["Показатель2Видимость"] = Истина;
				СведенияОВидеРасчета["Показатель2НаименованиеВидимость"] = Истина;			
				СведенияОВидеРасчета["Валюта2Видимость"] = Ложь;
				СведенияОВидеРасчета["Показатель3Наименование"] = "Коэффициент оплаты";
				СведенияОВидеРасчета["Показатель3Видимость"] = Истина;
				СведенияОВидеРасчета["Показатель3НаименованиеВидимость"] = Истина;			
				СведенияОВидеРасчета["Валюта3Видимость"] = Ложь;
			ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням 
				Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам
				Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения
				Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратного
				Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням
				Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам Тогда
				СведенияОВидеРасчета["РазмерТребуется"] = Истина;
				Если СтруктураВидаРасчета.ТребуетВводаТарифногоРазряда Тогда
					СведенияОВидеРасчета["ПоказательТР1НаименованиеВидимость"] = Истина;
					СведенияОВидеРасчета["ПоказательТР1Видимость"] = Истина;
					СведенияОВидеРасчета["ПоказательТР1Наименование"] = ?(Режим = "ПлановыеНачисления","Тарифный разряд","Тарифная ставка");					
					СведенияОВидеРасчета["Валюта1Видимость"] = Ложь;
				Иначе
					СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Истина;							
					СведенияОВидеРасчета["Показатель1Наименование"] = "Тарифная ставка";
					СведенияОВидеРасчета["Показатель1Видимость"] = Истина;
					СведенияОВидеРасчета["Валюта1Видимость"] = Истина;
				КонецЕсли;
			ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке 
				Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке
				Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеОтОбратного
				Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения Тогда
				СведенияОВидеРасчета["РазмерТребуется"] = Истина;
				Если СтруктураВидаРасчета.ТребуетВводаТарифногоРазряда Тогда
					СведенияОВидеРасчета["ПоказательТР1НаименованиеВидимость"] = Истина;
					СведенияОВидеРасчета["ПоказательТР1Видимость"] = Истина;
					СведенияОВидеРасчета["ПоказательТР1Наименование"] = ?(Режим = "ПлановыеНачисления","Тарифный разряд","Тарифная ставка");					
					СведенияОВидеРасчета["Валюта1Видимость"] = Ложь;
				Иначе				
					СведенияОВидеРасчета["Показатель1Наименование"] = "Тарифная ставка";
					СведенияОВидеРасчета["Показатель1Видимость"] = Истина;
					СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Истина;			
					СведенияОВидеРасчета["Валюта1Видимость"] = Истина;
				КонецЕсли;
				// для отображения начисления доплаты за ночные часы в ведомости начислений
				Если СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке
				   И СтруктураВидаРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы Тогда
				    СведенияОВидеРасчета["Показатель2Наименование"] = "Тарифная ставка";
					СведенияОВидеРасчета["Показатель2Видимость"] = Истина;
					СведенияОВидеРасчета["Показатель2НаименованиеВидимость"] = Истина;			
					СведенияОВидеРасчета["Валюта2Видимость"] = Ложь;
					СведенияОВидеРасчета["Показатель3Наименование"] = "Коэффициент оплаты";
					СведенияОВидеРасчета["Показатель3Видимость"] = Истина;
					СведенияОВидеРасчета["Показатель3НаименованиеВидимость"] = Истина;			
					СведенияОВидеРасчета["Валюта3Видимость"] = Ложь;
				КонецЕсли;
			ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом
				Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Тогда
				СведенияОВидеРасчета["Показатель1Наименование"] = "Процент " + ?(ТипВидРасчета = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций"), "удержания", "оплаты");
				СведенияОВидеРасчета["Показатель1Видимость"] = Истина;
				СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Истина;
				СведенияОВидеРасчета["Валюта1Видимость"] = Ложь;
			ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Тогда
				СведенияОВидеРасчета["Показатель1Наименование"] = "Процент удержания";
				СведенияОВидеРасчета["Показатель1Видимость"] = Истина;
				СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Истина;
				СведенияОВидеРасчета["Валюта1Видимость"] = Ложь;
			ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
				СведенияОВидеРасчета["Показатель1Наименование"] = "<определяется по шкале>";
				СведенияОВидеРасчета["Показатель1Видимость"] = Ложь;
				СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Истина;
				СведенияОВидеРасчета["Валюта1Видимость"] = Ложь;
			ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
				Если Режим = "ПлановыеНачисления" Тогда
					СведенияОВидеРасчета["Показатель1Наименование"] = "Процент доплаты";
					СведенияОВидеРасчета["Показатель1Видимость"] = Истина;
					СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Истина;				
					СведенияОВидеРасчета["Валюта1Видимость"] = Ложь;
				Иначе // для отображения в ведомости начислений
					СведенияОВидеРасчета["Показатель1Наименование"] = "Тарифная ставка (расч.)";
					СведенияОВидеРасчета["Показатель1Видимость"] = Истина;
					СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Истина;				
					СведенияОВидеРасчета["Валюта1Видимость"] = Ложь;
					СведенияОВидеРасчета["Показатель2Наименование"] = "Тарифная ставка (час)";
					СведенияОВидеРасчета["Показатель2Видимость"] = Истина;
					СведенияОВидеРасчета["Показатель2НаименованиеВидимость"] = Истина;			
					СведенияОВидеРасчета["Валюта2Видимость"] = Ложь;
					СведенияОВидеРасчета["Показатель3Наименование"] = "Коэффициент оплаты";
					СведенияОВидеРасчета["Показатель3Видимость"] = Истина;
					СведенияОВидеРасчета["Показатель3НаименованиеВидимость"] = Истина;			
					СведенияОВидеРасчета["Валюта3Видимость"] = Ложь;
				КонецЕсли;
			ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке
				Или  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням
				Или  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам
				Или  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке Тогда
				Если СтруктураВидаРасчета.ТребуетВводаТарифногоРазряда Тогда
					СведенияОВидеРасчета["ПоказательТР1НаименованиеВидимость"] = Истина;
					СведенияОВидеРасчета["ПоказательТР1Видимость"] = Истина;
					СведенияОВидеРасчета["ПоказательТР1Наименование"] = ?(Режим = "ПлановыеНачисления","Тарифный разряд","Тарифная ставка");					
					СведенияОВидеРасчета["Валюта1Видимость"] = Ложь;
				Иначе
					СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Истина;							
					СведенияОВидеРасчета["Показатель1Наименование"] = "Тарифная ставка";
					СведенияОВидеРасчета["Показатель1Видимость"] = Истина;
					СведенияОВидеРасчета["Валюта1Видимость"] = Истина;
				КонецЕсли;
			ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом Тогда
				СведенияОВидеРасчета["Показатель1Наименование"] = "Процент оплаты";
				СведенияОВидеРасчета["Показатель1Видимость"] = Истина;
				СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Истина;			
				СведенияОВидеРасчета["Валюта1Видимость"] = Ложь;
			ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска
				Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку
				Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных
				Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения
				Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
				СведенияОВидеРасчета["Показатель1Наименование"] = "Процент";
				СведенияОВидеРасчета["Показатель1Видимость"] = Истина;
				СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Истина;			
				СведенияОВидеРасчета["Валюта1Видимость"] = Ложь;												
			ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
				Если СтруктураВидаРасчета.ТребуетВводаТарифногоРазряда Тогда
					СведенияОВидеРасчета["ПоказательТР1НаименованиеВидимость"] = Истина;
					СведенияОВидеРасчета["ПоказательТР1Видимость"] = Истина;
					СведенияОВидеРасчета["ПоказательТР1Наименование"] = ?(Режим = "ПлановыеНачисления","Тарифный разряд","Тарифная ставка");					
					СведенияОВидеРасчета["Валюта1Видимость"] = Ложь;
				Иначе
					СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Истина;							
					СведенияОВидеРасчета["Показатель1Наименование"] = "Тарифная ставка";
					СведенияОВидеРасчета["Показатель1Видимость"] = Истина;
					СведенияОВидеРасчета["Валюта1Видимость"] = Истина;
				КонецЕсли;
			ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой
				Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммойДляПочасовогоОтклонения
				Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой
				Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела
				Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой
				Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруОтОбратного Тогда
				СведенияОВидеРасчета["Показатель1Наименование"] = "Сумма";
				СведенияОВидеРасчета["Показатель1Видимость"] = Истина;
				СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Истина;			
				СведенияОВидеРасчета["Валюта1Видимость"] = Истина;				
			ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю
				Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням
				Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам Тогда
				СведенияОВидеРасчета["Показатель1Наименование"] = "Коэффициент МРП";
				СведенияОВидеРасчета["Показатель1Видимость"] = Истина;
				СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Истина;			
				СведенияОВидеРасчета["Валюта1Видимость"] = Ложь;				
			ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате
				Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням
				Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам Тогда
				СведенияОВидеРасчета["Показатель1Наименование"] = "Коэффициент МЗП";
				СведенияОВидеРасчета["Показатель1Видимость"] = Истина;
				СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Истина;			
				СведенияОВидеРасчета["Валюта1Видимость"] = Ложь;				
			ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма
				Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения Тогда
				СведенияОВидеРасчета["Показатель1Наименование"] = "без оплаты";
				СведенияОВидеРасчета["Показатель1Видимость"] = Ложь;
				СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Истина;
				СведенияОВидеРасчета["Валюта1Видимость"] = Ложь;
			ИначеЕсли СпособРасчетаТребуетРазмер(СтруктураВидаРасчета.СпособРасчета) Тогда
				СведенияОВидеРасчета.РазмерТребуется = Истина;
				СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Истина;
				СведенияОВидеРасчета["Показатель1Видимость"] = Истина;				
				Если НЕ СпособРасчетаНеТребуетВалюты(СтруктураВидаРасчета.СпособРасчета) И Найти(Строка(СтруктураВидаРасчета.СпособРасчета), "П1") = 0 Тогда
					СведенияОВидеРасчета["Валюта1Видимость"] = Истина;
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
		
		СведенияОВидахРасчета[ВидРасчета] = СведенияОВидеРасчета;				
	КонецЕсли;
	
	Возврат СведенияОВидеРасчета;
	
КонецФункции  // ПолучитьСведенияОВидеРасчетаСхемыМотивации

// Получает список предопределенных показателей схем мотивации 
//
Функция ПолучитьСписокПредопределенныхПоказателей() Экспорт 
	
	СписокПредопределенныхПоказателей = Новый СписокЗначений;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПоказателиСхемМотивации.Ссылка КАК Ссылка,
	|	ПоказателиСхемМотивации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ПоказателиСхемМотивации КАК ПоказателиСхемМотивации
	|ГДЕ
	|	ПоказателиСхемМотивации.Предопределенный";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокПредопределенныхПоказателей.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокПредопределенныхПоказателей;
	
КонецФункции // ПолучитьСписокПредопределенныхПоказателей()

// проверка того, что показатель схемы мотивации является предопределенным показателем 
// не требующим ввода (т.е. рассчитываемым автоматически)
Функция ЭтоПоказательСАвторасчетом(Показатель) Экспорт
    Возврат     Показатель = Справочники.ПоказателиСхемМотивации.ВремяВДнях 
            или Показатель = Справочники.ПоказателиСхемМотивации.ВремяВЧасах
            или Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВДнях
            или Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВЧасах
            или Показатель = Справочники.ПоказателиСхемМотивации.СдельнаяВыработка
            или Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза			
            или Показатель = Справочники.ПоказателиСхемМотивации.Стаж			
			или Показатель = Справочники.ПоказателиСхемМотивации.Нуль;

КонецФункции // ЭтоПоказательСАвторасчетом()

// Читает и сохраняет для последующего использования реквизиты показателей схем мотивации
//
// Параметры
//  СведенияОПоказателях  - соответствие с данными о показателях
//  Показатель - ссылка на эл-т спр-ка ПоказателиСхемМотивации
//
// Возвращаемое значение:
//   Структура  - содержит реквизиты эл-та спр-ка ПоказателиСхемМотивации
//
Функция ПолучитьСведенияОПоказателе(СведенияОПоказателях,Показатель) Экспорт

	СведенияОПоказателе = СведенияОПоказателях[Показатель];
	Если СведенияОПоказателе = Неопределено Тогда
		СведенияОПоказателе = Новый Структура("ВидПоказателя,
												|ТипПоказателя,
												|ВозможностьИзменения",
												Перечисления.ВидыПоказателейСхемМотивации.ПустаяСсылка(),
												Перечисления.ТипыПоказателейСхемМотивации.ПустаяСсылка(),
												Перечисления.ИзменениеПоказателейСхемМотивации.ПустаяСсылка());
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидПоказателя,
		|	ТипПоказателя,
		|	ВозможностьИзменения
		|ИЗ
		|	Справочник.ПоказателиСхемМотивации КАК ПоказателиСхемМотивации
		|ГДЕ
		|	ПоказателиСхемМотивации.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка",Показатель);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СведенияОПоказателе,Выборка);
		КонецЕсли;
		СведенияОПоказателях[Показатель] = СведенияОПоказателе	
	КонецЕсли;
	
	Возврат СведенияОПоказателе

КонецФункции // ПолучитьСведенияОПоказателе()

// Возвращает список типов показателей схем мотивации, для которых не требуется валюта и валютные пересчеты
//
Функция ПолучитьСписокТиповПоказателейСхемМотивацииНеТребующихУказанияВалюты() Экспорт

	СписокТиповПоказателей = Новый СписокЗначений;
	
	СписокТиповПоказателей.Добавить(Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная);
	СписокТиповПоказателей.Добавить(Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая);
	СписокТиповПоказателей.Добавить(Перечисления.ТипыПоказателейСхемМотивации.Процентный);
	СписокТиповПоказателей.Добавить(Перечисления.ТипыПоказателейСхемМотивации.Числовой);

	Возврат СписокТиповПоказателей;
	
КонецФункции // ПолучитьСписокТиповПоказателейСхемМотивацииНеТребующихУказанияВалюты()

// функция проверяет необходимость задавать размер для расчета по заданному способу
// Парамерты:
//	СпособРасчета
//
// Возвращаемое значение:
//	булево - признак того, нужен ли размер для расчета таким способом
//
Функция СпособРасчетаТребуетРазмер(СпособРасчета) Экспорт
	Возврат НЕ (
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом
		или	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ДП2ОП3
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ДП2УП3
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ОП2
 	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ОП2ДП3
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ОП2УП3
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2ДП3
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2ОП3
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2УП3
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2УП3ДП4
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П3ДП1ОП2
 	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3
 	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3ОП4
 	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3УП4ДП5
 	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1ВП2_0
 	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2_П3УП4ДП5
 	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2_П5ДП3УП4
 	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2ДП3ВП4_0
 	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МинП1_П2УП3
 	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МинП1_П2УП3ОП4
 	    );
КонецФункции

Функция СпособРасчетаНеТребуетВалюты(СпособРасчета) Экспорт
	
	Возврат (
	
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом
	
    );
	
КонецФункции

// Функция проверяет необходимость задавать базовый период для расчета по заданному способу
//
Функция СпособРасчетаТребуетБазовыйПериод(СпособРасчета, 
											Показатель1 = Неопределено, 
											Показатель2 = Неопределено, 
											Показатель3 = Неопределено, 
											Показатель4 = Неопределено, 
											Показатель5 = Неопределено) Экспорт
	
	ПоказательРасчетнаяБаза = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза;
											
	Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом
	 ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом
	 ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом
	 ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Тогда
		
		Возврат Истина;
		
	ИначеЕсли Показатель1 = ПоказательРасчетнаяБаза
		  ИЛИ Показатель2 = ПоказательРасчетнаяБаза
		  ИЛИ Показатель3 = ПоказательРасчетнаяБаза
		  ИЛИ Показатель4 = ПоказательРасчетнаяБаза
		  ИЛИ Показатель5 = ПоказательРасчетнаяБаза Тогда
		  
		Возврат Истина;
		
	Иначе
	
		Возврат Ложь;
	
	КонецЕсли;
											
КонецФункции // СпособРасчетаТребуетБазовыйПериод()

// проверка того, что способ расчета относится к договорам
Функция ЭтоДоговор(СпособРасчета) Экспорт
    Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой или
    		СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруОтОбратного; 
КонецФункции

// проверка того, что способ расчета относится к расчетам "от обратного"
Функция ЭтоРасчетОтОбратного(СпособРасчета) Экспорт
	Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратного или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеОтОбратного или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруОтОбратного;
КонецФункции

// проверка того, что способ расчета относится к расчетам фиксированной суммой
Функция ЭтоРасчетФиксированнойСуммой(СпособРасчета) Экспорт
	Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю или 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате или 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой;
КонецФункции

// проверка того, что способ расчета относится к расчетам по шкале ставок
Функция ЭтоРасчетПоШкалеСтавок(СпособРасчета) Экспорт
	Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор;
КонецФункции

// проверка того, что способ расчета относится к расчетам почасовых отклонений
Функция ЭтоРасчетПочасовогоОтклонения(СпособРасчета) Экспорт
	Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммойДляПочасовогоОтклонения или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения;
КонецФункции

// Проверка того, что способ расчета относится к расчетам от МРП
//
Функция ЭтоРасчетПоМесячномуРасчетномуПоказателю(СпособРасчета) Экспорт
	Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам;
КонецФункции // ЭтоРасчетПоМесячномуРасчетномуПоказателю()

// Проверка того, что способ расчета относится к расчетам от минимальной зарплаты
//
Функция ЭтоРасчетПоМинимальнойЗаработнойПлате(СпособРасчета) Экспорт
	Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам;
КонецФункции // ЭтоРасчетПоМинимальнойЗаработнойПлате()

// Возвращает Истина, если оба переданных способа расчета описывают эквивалентные по времени
// виды тарифных ставок (все месячные тарифные ставки, все дневные, все часовые)
//
Функция СпособыРасчетаОписываютОдинаковыеВидыТарифныхСтавок(СпособРасчета1, СпособРасчета2) Экспорт

	СпособыРасчета = Перечисления.СпособыРасчетаОплатыТруда;

	СтруктураТарифныеСтавки = Новый Структура("Месячные, Дневные, Часовые");
	
	СтруктураТарифныеСтавки.Месячные = Новый Соответствие();
	СтруктураТарифныеСтавки.Месячные.Вставить(СпособыРасчета.ПоМесячнойТарифнойСтавкеПоДням, Истина);
	СтруктураТарифныеСтавки.Месячные.Вставить(СпособыРасчета.ПоМесячнойТарифнойСтавкеПоЧасам, Истина);
	СтруктураТарифныеСтавки.Месячные.Вставить(СпособыРасчета.ПоМесячнойТарифнойСтавкеОтОбратного, Истина);
	СтруктураТарифныеСтавки.Месячные.Вставить(СпособыРасчета.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням, Истина);
	СтруктураТарифныеСтавки.Месячные.Вставить(СпособыРасчета.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам, Истина);
	СтруктураТарифныеСтавки.Месячные.Вставить(СпособыРасчета.ПоМинимальнойЗаработнойПлатеПоДням, Истина);
	СтруктураТарифныеСтавки.Месячные.Вставить(СпособыРасчета.ПоМинимальнойЗаработнойПлатеПоЧасам, Истина);
	
	СтруктураТарифныеСтавки.Дневные = Новый Соответствие();
	СтруктураТарифныеСтавки.Дневные.Вставить(СпособыРасчета.ПоДневнойТарифнойСтавке, Истина);
	
	СтруктураТарифныеСтавки.Часовые = Новый Соответствие();
	СтруктураТарифныеСтавки.Часовые.Вставить(СпособыРасчета.ПоЧасовойТарифнойСтавке, Истина);
	СтруктураТарифныеСтавки.Часовые.Вставить(СпособыРасчета.ПоЧасовойТарифнойСтавкеОтОбратного, Истина);
	СтруктураТарифныеСтавки.Часовые.Вставить(СпособыРасчета.СдельныйЗаработок, Истина);

	Для Каждого ВидСтавки Из СтруктураТарифныеСтавки Цикл
		Если ВидСтавки.Значение[СпособРасчета1] <> Неопределено
				И ВидСтавки.Значение[СпособРасчета2] <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;

КонецФункции // СпособыРасчетаОписываютОдинаковыеВидыТарифныхСтавок

// Функция возвращает число календарных дней, содержащихся в заданном периоде
// Параметры:
//  ДатаНачала - дата начала периода
//
//	ДатаОкончания - дата окончания периода
//
// Возвращаемое значение:
//	число - число календарных дней в периоде
//
Функция РассчитатьЧислоКалендарныхДней(ДатаНачала, ДатаОкончания) Экспорт
	ЧислоКалендарныхДней = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		| СУММА(КалендарныеДни) КАК ЧислоДней 
		|ИЗ 
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь
		|ГДЕ ДатаКалендаря МЕЖДУ &ДатаНачала И &ДатаОкончания
		|";
		
	Запрос.УстановитьПараметр("ДатаНачала",НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(ДатаОкончания));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		ЧислоКалендарныхДней = Результат[0].ЧислоДней;
	КонецЕсли;
	
	Возврат ЧислоКалендарныхДней;
КонецФункции

// Функция возвращает дату, отстоящую от заданной на указанное число календарных дней
// Параметры:
//	ДатаНачала - дата, от которой отсчитывать
//	ДнейПериода - число календарных дней период, дату окончания которого вернуть
//
// Возвращаемое значение:
//	Дата - дата окончания периода
//
Функция ПолучитьДатуОкончанияПоЧислуДнейПериода(ДатаНачала, ДнейПериода) Экспорт

	ДатаОкончания = '00010101';
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДнейПериода", ДнейПериода);
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СледДаты.ДатаКалендаря КАК ДатаКалендаря,
	               |	СУММА(ДниПериода.КалендарныеДни) КАК КалендарныеДни
	               |ИЗ
	               |	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК СледДаты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ДниПериода
	               |		ПО (ДниПериода.ДатаКалендаря МЕЖДУ &ДатаНачала И СледДаты.ДатаКалендаря)
	               |ГДЕ
	               |	// считаем, что в пределах тройного периода обязательно будет нужная дата
	               |	СледДаты.ДатаКалендаря МЕЖДУ &ДатаНачала И ДОБАВИТЬКДАТЕ(&ДатаНачала, ДЕНЬ, 3 * &ДнейПериода)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СледДаты.ДатаКалендаря
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(ДниПериода.КалендарныеДни) = &ДнейПериода
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаКалендаря";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаОкончания = Выборка.ДатаКалендаря;
	КонецЕсли;

	Возврат ДатаОкончания;

КонецФункции // ПолучитьДатуОкончанияПоЧислуДнейПериода

// Функция возвращает коэффициент оплаты для заданного вида работ
// Параметры:
//  Организация - СправочникСсылка.Организации - организация для которой нужно получить коэффициент
//  Дата - дата на которую нужно получить коэффициент
//	ВидРасчета - ПланВидовРасчетаСсылка - задаёт вид сверхнормативных работ (ночные, праздничные и 
//  			 выходные, сверхурочные)
//
// Возвращаемое значение:
//	число - коэффициент, если коэффициент не задан - нижний предел по законодательству
//
Функция ПолучитьКоэффициентОплатыСверхнормативныхРабот(Организация, Дата, ВидРасчета) Экспорт
	
	Коэффициент = 0;

	Если ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаСверхурочных ИЛИ
		ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаСверхурочныеЧасы Тогда
		КоэффициентТекст = "ВЫБРАТЬ ВЫБОР КОГДА КоэффициентСверхурочные ЕСТЬ NULL ТОГДА 1.5 ИНАЧЕ КоэффициентСверхурочные КОНЕЦ КАК Коэффициент";
		Коэффициент = 1.5;
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПраздничныхИВыходных ИЛИ
				ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаПраздничныеИВыходные Тогда
		КоэффициентТекст = "ВЫБРАТЬ ВЫБОР КОГДА КоэффициентПраздничныеИВыходные ЕСТЬ NULL ТОГДА 2 ИНАЧЕ КоэффициентПраздничныеИВыходные КОНЕЦ КАК Коэффициент";
		Коэффициент = 2;
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы Тогда
		КоэффициентТекст = "ВЫБРАТЬ ВЫБОР КОГДА КоэффициентНочные ЕСТЬ NULL ТОГДА 1.5 ИНАЧЕ КоэффициентНочные КОНЕЦ КАК Коэффициент";
		Коэффициент = 1.5;
	Иначе
		КоэффициентТекст = "ВЫБРАТЬ 0 КАК Коэффициент";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = КоэффициентТекст + "
		|ИЗ 
		|	РегистрСведений.КоэффициентыОплатыСверхнормативныхРабот.СрезПоследних(&Дата, Организация = &Организация)
		|";
		
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Коэффициент = ?(Результат[0].Коэффициент = Null, 0, Результат[0].Коэффициент);
	КонецЕсли;

	Если Найти(ВидРасчета, "Доплата") > 0 Тогда
		Коэффициент = Макс(0, Коэффициент - 1);
	КонецЕсли;
	
	Возврат Коэффициент;
	
КонецФункции

// Функция возвращает список видов расчета, которые надо добавить в ВедущиеВидыРасчета
// при добавлении списка видов расчета, переданных во входном параметре
//
// Параметры:
//	ВидРасчета - вид расчета или список значений видов расчета, для которых определить ведущие
//
//
Функция ПолучитьСписокВедущихВидовРасчета(ВидРасчета) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидРасчета", ВидРасчета);
	
	ТекстЗапроса = "";
	
	Для Каждого МетаданныеПВР Из Метаданные.ПланыВидовРасчета Цикл
	
	    Если НЕ ПравоДоступа("Чтение", МетаданныеПВР) Тогда
	    	Продолжить;
	    КонецЕсли;
	
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ
			|";
		КонецЕсли;
	
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПВР.ВидРасчета
		|ИЗ
		|	ПланВидовРасчета." + МетаданныеПВР.Имя + ".ВедущиеВидыРасчета КАК ПВР
		|ГДЕ
		|	ПВР.Ссылка В (&ВидРасчета)";
	
	КонецЦикла;

	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокВедущихВР = Новый СписокЗначений;

	Пока Выборка.Следующий() Цикл
		СписокВедущихВР.Добавить(Выборка.ВидРасчета);
	КонецЦикла;

	Возврат СписокВедущихВР;

КонецФункции // ПолучитьСписокВедущихВидовРасчета()

// Возвращает список начислений при формировании списка включаемых начислений в расчет от обратного
Функция ПолучитьСписокДоступныхНачисленийДляВключенияВРасчетОтОбратного(ИмяПВР, Текст) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачисленияОрганизаций.Ссылка КАК ВидРасчета
	               |ИЗ
	               |	ПланВидовРасчета." + ИмяПВР + " КАК НачисленияОрганизаций
	               |ГДЕ
	               |	(НЕ НачисленияОрганизаций.СпособРасчета В (&парамСпособыРасчетаОтОбратного))
	               |	И НачисленияОрганизаций.Наименование ПОДОБНО &парамТекст + ""%"" СПЕЦСИМВОЛ ""~""";
				   
	Запрос.УстановитьПараметр("парамСпособыРасчетаОтОбратного", ПроведениеРасчетов.ПолучитьСписокСпособовРасчетовОтОбратного());
	
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");  
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Запрос.УстановитьПараметр("парамТекст", Текст);
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"));
	СписокВыбора.СортироватьПоЗначению();

	Возврат СписокВыбора;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СТАЖЕМ
// 

// проверка того, что способ расчета относится к расчетам от стажа по тарифным ставкам
Функция ЭтоРасчетОтСтажаПоТарифу(СпособРасчета) Экспорт
    Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке 
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке;
КонецФункции

// проверка того, что способ расчета относится к расчетам от стажа
Функция ЭтоРасчетОтСтажа(СпособРасчета) Экспорт
    Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке 
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом;
КонецФункции

// Функция выбирает стажи по физлицу из ТЧ "Стажи" справочника "Физические лица"
//
// Параметры
//  Физлицо		– СправочникСсылка.ФизическиеЛица – работник, которому вычисляется стаж
//  ДопУсловие	– Строка – строка дополнительного условия в запрос
//  ВидСтажа	– СправочникСсылка.ВидыСтажа - значение параметра для дополнительного условия
//
// Возвращаемое значение:
//   ВыборкаИзРезультатаЗапроса   – выборка со стажами работника
//
Функция ВыбратьСтажиРаботника(Физлицо, ДопУсловие = Неопределено, ВидСтажа = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 4
	|	ФизическиеЛицаСтажи.ВидСтажа,
	|	ФизическиеЛицаСтажи.ВидСтажа.Наименование КАК Наименование,
	|	ФизическиеЛицаСтажи.ДатаОтсчета,
	|	ФизическиеЛицаСтажи.РазмерМесяцев,
	|	ФизическиеЛицаСтажи.РазмерДней
	|ИЗ
	|	Справочник.ФизическиеЛица.Стажи КАК ФизическиеЛицаСтажи
	|ГДЕ
	|	ФизическиеЛицаСтажи.Ссылка = &Физлицо";
	
	Если ДопУсловие <> Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса + " " + ДопУсловие;
		
		Если ВидСтажа <> Неопределено Тогда
			
			Запрос.УстановитьПараметр("ВидСтажа", ВидСтажа);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	
	Возврат Запрос.Выполнить().Выбрать()
	
КонецФункции // ВыбратьСтажиРаботника()

// определяет начало непрерывного стажа физлица
//
// Параметры
//  ДатаНачала - Дата, дата на которую формируется стаж
//  Физлицо - Справочник.ФизическиеЛица, физ. лицо для которого определяется стаж
//  Организация - Справочник.Организации, организация, где работает физлицо.
//
// Возвращаемое значение:
//  дата - дата начала непрерывного стажа
//
Функция ПолучитьНачалоНепрерывногоСтажа(ДатаНачала, Физлицо, Организация) Экспорт

	ВыборкаПоСтажу = ВыбратьСтажиРаботника(Физлицо, "И ФизическиеЛицаСтажи.ВидСтажа = &ВидСтажа", Справочники.ВидыСтажа.НепрерывныйСтаж);
	Если ВыборкаПоСтажу.Следующий() Тогда
	
		ДатаНепрерывногоСтажа = ДобавитьМесяц(ВыборкаПоСтажу.ДатаОтсчета, - ВыборкаПоСтажу.РазмерМесяцев) - ВыборкаПоСтажу.РазмерДней*86400;
		
	Иначе // Непрерывный стаж не введен, для определения непрерывного стажа будем брать дату последнего приема на работу.
		
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РаботникиОрганизацийСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|		&ДатаАктуальности,
		|		Физлицо = &Физлицо
		|			И Организация = &ГоловнаяОрганизация
		|			И (Приказ.ВидЗанятости <> &ВнутреннееСовместительство
		|				ИЛИ Приказ.ВидЗанятости ЕСТЬ NULL )
		|			И ПричинаИзмененияСостояния = &Прием) КАК РаботникиОрганизацийСрезПоследних";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ДатаАктуальности",			ДатаНачала);
		Запрос.УстановитьПараметр("Физлицо",					Физлицо);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		Запрос.УстановитьПараметр("Прием",						Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
		Запрос.УстановитьПараметр("ВнутреннееСовместительство",	Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаНепрерывногоСтажа = Выборка.Период
		Иначе 
			ДатаНепрерывногоСтажа = Дата(1,1,1)
		КонецЕсли; 
		
	КонецЕсли; 
	
    Возврат ДатаНепрерывногоСтажа
	
КонецФункции // ПолучитьНепрерывныйСтаж()

// Формирует текст запроса для вычисления стажа физического лица в годах, месяцах и днях
// Параметры:
//  ИмяИсточника - строка, имя источника в запросе, откуда выбираем данные
//	ИмяПоляДатаАктуальности - строка, полное имя поля в запросе или имя параметра с датой, на которую считаем стаж
//	ИмяПоляДатаОтсчета - строка, имя поля в источнике соответствующее "Справочник.ФизическиеЛица.Стажи.ДатаОтсчета"
//	ИмяПоляРазмерМесяцев - строка, имя поля в источнике соответствующее "Справочник.ФизическиеЛица.Стажи.РазмерМесяцев"
//	ИмяПоляРазмерДней - строка, имя поля в источнике соответствующее "Справочник.ФизическиеЛица.Стажи.РазмерДней"
//	ПрефиксИмениПолей - строка - префикс, который добавлять к имени выходных полей
// 
// Возвращаемое значение:
//  Строка на языке запросов для расчета стажа с полями РазмерЛет, РазмерМесяцев, РазмерДней с указанным префиксом
//
Функция СформироватьТекстЗапросаОСтаже(ИмяИсточника, 
									   ИмяПоляДатаАктуальности,
									   Знач ИмяПоляДатаОтсчета = "ДатаОтсчета", 
									   ИмяПоляРазмерМесяцев = "РазмерМесяцев", 
									   ИмяПоляРазмерДней = "РазмерДней",
									   ПрефиксИмениПолей = "") Экспорт
	
	// Отступим назад от фактической даты отсчета на соответствующее число месяцев и дней.
	ИмяПоляДатаОтсчета = "ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(" + ИмяИсточника + "." + ИмяПоляДатаОтсчета + ", МЕСЯЦ, - " + ИмяИсточника + "." + ИмяПоляРазмерМесяцев + "), ДЕНЬ, - " + ИмяИсточника + "." + ИмяПоляРазмерДней + ")";
	
	// Поле с количеством лет стажа
	Текст = "
	|	ВЫБОР КОГДА " + ИмяПоляДатаОтсчета + " < " + ИмяПоляДатаАктуальности + " ТОГДА 
	|			ВЫБОР КОГДА МЕСЯЦ(" + ИмяПоляДатаОтсчета + ") * 100 + ДЕНЬ(" + ИмяПоляДатаОтсчета + ") > 
	|						МЕСЯЦ(" + ИмяПоляДатаАктуальности + ") * 100 + ДЕНЬ(" + ИмяПоляДатаАктуальности + ") ТОГДА
	|				  ГОД(" + ИмяПоляДатаАктуальности + ") - ГОД(" + ИмяПоляДатаОтсчета + ") - 1 
	|
	|				  ИНАЧЕ ГОД(" + ИмяПоляДатаАктуальности + ") - ГОД(" + ИмяПоляДатаОтсчета + ") 
	|			КОНЕЦ 
	|
	|		 ИНАЧЕ 0 
	|	КОНЕЦ ";
	
	Текст = Текст + " КАК " + ПрефиксИмениПолей + "РазмерЛет, ";
	
	// Выбор поля с количеством месяцев стажа
	Текст = Текст + "
	|	ВЫБОР КОГДА " + ИмяПоляДатаОтсчета + "< " + ИмяПоляДатаАктуальности + " ТОГДА 
	|			ВЫБОР КОГДА МЕСЯЦ(" + ИмяПоляДатаОтсчета + ") * 100 + ДЕНЬ(" + ИмяПоляДатаОтсчета + ") > 
	|						МЕСЯЦ(" + ИмяПоляДатаАктуальности + ") * 100 + ДЕНЬ(" + ИмяПоляДатаАктуальности +") ТОГДА
	|				  12 - (МЕСЯЦ(" + ИмяПоляДатаОтсчета + ") - МЕСЯЦ(" + ИмяПоляДатаАктуальности + ")) 
	|					
	|				  ИНАЧЕ МЕСЯЦ(" + ИмяПоляДатаАктуальности + ") - МЕСЯЦ(" + ИмяПоляДатаОтсчета + ") 
	|			КОНЕЦ 
	|
	|		  ИНАЧЕ 0 
	|	КОНЕЦ 
	| 
	|	- 
	|
	|  	ВЫБОР КОГДА ДЕНЬ(" + ИмяПоляДатаОтсчета + ") > ДЕНЬ(" + ИмяПоляДатаАктуальности + ") ТОГДА 1 
	|		  
	|		  ИНАЧЕ 0 
	|	КОНЕЦ";
	
	Текст = Текст + " КАК " + ПрефиксИмениПолей + "РазмерМесяцев, ";
	
	// Выбор поля с количеством дней стажа
	Текст = Текст + "
	|	ВЫБОР КОГДА " + ИмяПоляДатаОтсчета + " <= " + ИмяПоляДатаАктуальности + " ТОГДА 
	|			ВЫБОР КОГДА ДЕНЬ(" + ИмяПоляДатаОтсчета + ") > ДЕНЬ(" + ИмяПоляДатаАктуальности + ") ТОГДА 
	|					ВЫБОР КОГДА ДЕНЬ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(" + ИмяПоляДатаАктуальности + ", МЕСЯЦ), МЕСЯЦ, -1), МЕСЯЦ)) > ДЕНЬ(" + ИмяПоляДатаОтсчета + ") ТОГДА
	|				  		  ДЕНЬ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(" + ИмяПоляДатаАктуальности + ", МЕСЯЦ), МЕСЯЦ, -1), МЕСЯЦ)) 
	|		 		  		  - ДЕНЬ(" + ИмяПоляДатаОтсчета + ") + ДЕНЬ(" + ИмяПоляДатаАктуальности + ") + 1  
	|
	|						  ИНАЧЕ ДЕНЬ(" + ИмяПоляДатаАктуальности + ")
	|							
	|					КОНЕЦ
	|
	|				  ИНАЧЕ ДЕНЬ(" + ИмяПоляДатаАктуальности + ") - ДЕНЬ(" + ИмяПоляДатаОтсчета + ") + 1 
	|			КОНЕЦ 
	|		  
	|		  ИНАЧЕ 0 
	|	КОНЕЦ";

	Текст = Текст + " КАК " + ПрефиксИмениПолей + "РазмерДней ";
	
	Возврат Текст;
	
КонецФункции // СформироватьТекстЗапросаОСтаже()

// Функция строит текст запроса для определения структурной единиц, в котором числился работник по 
// основному месту работу на начало каждого указанного месяца либо на момент приема в середине месяца
// 
// Параметры:
//	ПериодыФизЛицаТекст - строка с подзапросом для выбора списка физлиц (должен содержать уникальные комбинации Период, ФизЛицо)
//	Организация - организация из шапки документа, для которой строить запрос
//	Запрос - объект Запрос, который будет использован для выборки (в него устаналиваются необходимые параметры)
//
// Возвращаемое значение:
//	Строка - текст запроса
//
Функция СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекст, Организация, Запрос) Экспорт

	Запрос.УстановитьПараметр("прм_ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("прм_ОбособленноеПодразделение", Организация);

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Работники.ФизЛицо,
	               |	Работники.Период,
	               |	ВЫБОР
	               |		// физлицо не является работником и никогда им не был, проверим как договорника
	               |		КОГДА Работники.ДатаНазначения = ДАТАВРЕМЯ(1, 1, 1) 
	               |				И Работники.ДатаПоследнегоПриема = ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ЕСТЬNULL(ДоговорникиОрганизации.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
	               |						ТОГДА ДоговорникиОрганизации.ПодразделениеОрганизации
	               |					ИНАЧЕ &прм_ОбособленноеПодразделение
	               |				  КОНЕЦ
	               |
	               |		// уволили и как работника и как договорника до начала месяца, смотрим, в роли кого дольше работал
	               |		КОГДА Работники.ДатаПоследнегоУвольнения <> ДАТАВРЕМЯ(1, 1, 1) 
	               |				И Работники.ДатаПоследнегоПриема = ДАТАВРЕМЯ(2999, 12, 31)
	               |				И ДоговорникиОрганизации.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	               |				И Работники.ДатаПоследнегоУвольнения <= НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)
	               |			ТОГДА ВЫБОР
	               |					КОГДА Работники.ДатаПоследнегоУвольнения < ДоговорникиОрганизации.ДатаОкончания // дольше числился как договорник
	               |						ТОГДА ВЫБОР
	               |								КОГДА ЕСТЬNULL(ДоговорникиОрганизации.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
	               |									ТОГДА ДоговорникиОрганизации.ПодразделениеОрганизации
	               |								ИНАЧЕ &прм_ОбособленноеПодразделение
	               |				  			  КОНЕЦ
	               |					КОГДА ЕСТЬNULL(МестаРаботыНаНачалоМесяца.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
	               |						ТОГДА МестаРаботыНаНачалоМесяца.ПодразделениеОрганизации
	               |					ИНАЧЕ &прм_ОбособленноеПодразделение
	               |				КОНЕЦ
	               |
	               |		// сначала был договорником, а потом стал работником в текущем месяце - берем как договорника
	               |		КОГДА Работники.ДатаПоследнегоПриема <> ДАТАВРЕМЯ(1, 1, 1) 
	               |				И Работники.ДатаНазначения = ДАТАВРЕМЯ(1, 1, 1)
	               |				И ДоговорникиОрганизации.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
	               |				И ДоговорникиОрганизации.ДатаНачала < Работники.ДатаПоследнегоПриема 
	               |				И ДоговорникиОрганизации.ДатаОкончания > НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ЕСТЬNULL(ДоговорникиОрганизации.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
	               |						ТОГДА ДоговорникиОрганизации.ПодразделениеОрганизации
	               |					ИНАЧЕ &прм_ОбособленноеПодразделение
	               |				  КОНЕЦ
	               |
	               |		// и договорником и работником стал в текущем месяце - смотрим, кем стал раньше
	               |		КОГДА ДоговорникиОрганизации.ДатаНачала >= НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)
	               |				И Работники.ДатаПоследнегоПриема >= НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)
	               |				И Работники.ДатаПоследнегоУвольнения < НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ДоговорникиОрганизации.ДатаНачала < Работники.ДатаПоследнегоПриема
	               |						ТОГДА ВЫБОР
	               |								КОГДА ЕСТЬNULL(ДоговорникиОрганизации.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
	               |									ТОГДА ДоговорникиОрганизации.ПодразделениеОрганизации
	               |								ИНАЧЕ &прм_ОбособленноеПодразделение
	               |							КОНЕЦ
	               |					ИНАЧЕ ВЫБОР
	               |							КОГДА ЕСТЬNULL(МестаРаботыНаНачалоМесяца.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
	               |								ТОГДА МестаРаботыНаНачалоМесяца.ПодразделениеОрганизации
	               |							ИНАЧЕ &прм_ОбособленноеПодразделение
	               |						КОНЕЦ
	               |				КОНЕЦ
	               |
	               |		// Принят как работник в середине месяца и либо вообще не уволен, 
	               |		// либо уволен был до даты повторного приема и сейчас проводится документ именно по новому месту работы
	               |		КОГДА Работники.ДатаПоследнегоПриема <> ДАТАВРЕМЯ(2999, 12, 31) // был прием в середине месяца
	               |				И (Работники.ДатаПоследнегоУвольнения = ДАТАВРЕМЯ(1, 1, 1) // увольнения вообще не было 
	               |					ИЛИ (Работники.ДатаПоследнегоУвольнения <> ДАТАВРЕМЯ(1, 1, 1) // было увольнение до даты повторного приема или в текущем месяце 
	               |							И МестаРаботыПослеПриема.ОбособленноеПодразделение =  &прм_ОбособленноеПодразделение)) // и сейчас проводится документ именно по новому месту работы
	               |			ТОГДА ВЫБОР
	               |					КОГДА ЕСТЬNULL(МестаРаботыПослеПриема.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
	               |						ТОГДА МестаРаботыПослеПриема.ПодразделениеОрганизации
	               |					ИНАЧЕ МестаРаботыПослеПриема.ОбособленноеПодразделение
	               |				  КОНЕЦ
	               |
	               |		// Ничего не происходило увольнения-приема в середине месяца не было - определяем структурную единицу на начало месяца
	               |		// место работы работника имеет приоритет перед место работы договорника
	               |		КОГДА ЕСТЬNULL(МестаРаботыНаНачалоМесяца.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
	               |			ТОГДА МестаРаботыНаНачалоМесяца.ПодразделениеОрганизации
	               |
	               |		ИНАЧЕ МестаРаботыНаНачалоМесяца.ОбособленноеПодразделение
	               |	КОНЕЦ КАК СтруктурнаяЕдиница
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ПериодыФизЛица.ФизЛицо КАК ФизЛицо,
	               |		ПериодыФизЛица.Период КАК Период,
	               |		МАКСИМУМ(ВЫБОР
	               |				КОГДА РаботникиОрганизации.Период <= НАЧАЛОПЕРИОДА(ПериодыФизЛица.Период, МЕСЯЦ)
	               |					ТОГДА ВЫБОР
	               |							КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	               |								ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
	               |							ИНАЧЕ РаботникиОрганизации.Период
	               |						КОНЕЦ
	               |				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	               |			КОНЕЦ) КАК ДатаНазначения,
	               |		МАКСИМУМ(ВЫБОР
	               |				КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	               |					ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
	               |				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	               |			КОНЕЦ) КАК ДатаПоследнегоУвольнения,
	               |		МИНИМУМ(ВЫБОР
	               |				КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	               |						И НАЧАЛОПЕРИОДА(РаботникиОрганизации.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ПериодыФизЛица.Период, МЕСЯЦ)
	               |					ТОГДА РаботникиОрганизации.Период
	               |				ИНАЧЕ ДАТАВРЕМЯ(2999, 12, 31)
	               |			КОНЕЦ) КАК ДатаПоследнегоПриема
	               |	ИЗ
	               |		(" + ПериодыФизЛицаТекст + ") КАК ПериодыФизЛица
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	               |			ПО ПериодыФизЛица.ФизЛицо = РаботникиОрганизации.Физлицо
	               |				И (РаботникиОрганизации.Период <= КОНЕЦПЕРИОДА(ПериодыФизЛица.Период, МЕСЯЦ))
	               |				И (РаботникиОрганизации.Организация = &прм_ГоловнаяОрганизация)
	               |				И (РаботникиОрганизации.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ПериодыФизЛица.ФизЛицо,
	               |		ПериодыФизЛица.Период) КАК Работники
	               |
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК МестаРаботыНаНачалоМесяца
	               |		ПО Работники.ФизЛицо = МестаРаботыНаНачалоМесяца.Физлицо
	               |			И МестаРаботыНаНачалоМесяца.Организация = &прм_ГоловнаяОрганизация
	               |			И Работники.ДатаНазначения = ВЫБОР
	               |											КОГДА МестаРаботыНаНачалоМесяца.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	               |												ТОГДА ДОБАВИТЬКДАТЕ(МестаРаботыНаНачалоМесяца.Период, ДЕНЬ, -1)
	               |											ИНАЧЕ МестаРаботыНаНачалоМесяца.Период
	               |										 КОНЕЦ
	               |			И МестаРаботыНаНачалоМесяца.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	               |
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК МестаРаботыПослеПриема
	               |			ПО Работники.ФизЛицо = МестаРаботыПослеПриема.ФизЛицо
	               |				И МестаРаботыПослеПриема.Организация = &прм_ГоловнаяОрганизация
	               |				И Работники.ДатаПоследнегоПриема = МестаРаботыПослеПриема.Период
	               |				И МестаРаботыПослеПриема.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	               |				И МестаРаботыПослеПриема.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	               |
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |								ДатыПоследнихДоговоров.ФизЛицо,
	               |								ДатыПоследнихДоговоров.Период,
	               |								ВЫБОР
	               |									КОГДА ДатыПоследнихДоговоров.ДатаНачалаНаНачалоМесяца <> ДАТАВРЕМЯ(1, 1, 1)
	               |										ТОГДА ДатыПоследнихДоговоров.ДатаНачалаНаНачалоМесяца
	               |									ИНАЧЕ ДатыПоследнихДоговоров.ПоследняяДатаНачала
	               |								КОНЕЦ КАК ДатаНачала,
	               |								МАКСИМУМ(ВЫБОР
	               |											КОГДА ДатыПоследнихДоговоров.ДатаНачалаНаНачалоМесяца <> ДАТАВРЕМЯ(1, 1, 1)
	               |												ТОГДА ДоговорникиОрганизацииНаНачалоМесяца.ПодразделениеОрганизации
	               |											ИНАЧЕ АктуальныеДоговорникиОрганизации.ПодразделениеОрганизации
	               |										КОНЕЦ) КАК ПодразделениеОрганизации,
	               |								МАКСИМУМ(ВЫБОР
	               |											КОГДА ДатыПоследнихДоговоров.ДатаНачалаНаНачалоМесяца <> ДАТАВРЕМЯ(1, 1, 1)
	               |												ТОГДА ДоговорникиОрганизацииНаНачалоМесяца.ДатаОкончания
	               |											ИНАЧЕ АктуальныеДоговорникиОрганизации.ДатаОкончания
	               |										КОНЕЦ) КАК ДатаОкончания
	               |							ИЗ
	               |								(ВЫБРАТЬ
	               |									ПериодыФизЛица.ФизЛицо,
	               |									ПериодыФизЛица.Период,
	               |									МАКСИМУМ(ВЫБОР
	               |												КОГДА ДоговорникиОрганизации.ДатаНачала <= НАЧАЛОПЕРИОДА(ПериодыФизЛица.Период, МЕСЯЦ)
	               |													ТОГДА ДоговорникиОрганизации.ДатаНачала
	               |												ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	               |											КОНЕЦ) КАК ДатаНачалаНаНачалоМесяца,
	               |									МАКСИМУМ(ДоговорникиОрганизации.ДатаНачала) КАК ПоследняяДатаНачала
	               |								ИЗ
	               |									(" + ПериодыФизЛицаТекст + ") КАК ПериодыФизЛица
	               |									ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоговорникиОрганизаций КАК ДоговорникиОрганизации
	               |										ПО ПериодыФизЛица.ФизЛицо = ДоговорникиОрганизации.ФизЛицо
	               |											И ДоговорникиОрганизации.Организация = &прм_ОбособленноеПодразделение
	               |											И ДоговорникиОрганизации.ДатаНачала <= КОНЕЦПЕРИОДА(ПериодыФизЛица.Период, МЕСЯЦ)
	               |								СГРУППИРОВАТЬ ПО
	               |									ПериодыФизЛица.ФизЛицо,
	               |									ПериодыФизЛица.Период) КАК ДатыПоследнихДоговоров
	               |
	               |								ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоговорникиОрганизаций КАК ДоговорникиОрганизацииНаНачалоМесяца
	               |									ПО ДатыПоследнихДоговоров.ФизЛицо = ДоговорникиОрганизацииНаНачалоМесяца.ФизЛицо
	               |										И ДатыПоследнихДоговоров.ДатаНачалаНаНачалоМесяца = ДоговорникиОрганизацииНаНачалоМесяца.ДатаНачала
	               |										И ДоговорникиОрганизацииНаНачалоМесяца.Организация = &прм_ОбособленноеПодразделение
	               |
	               |								ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоговорникиОрганизаций КАК АктуальныеДоговорникиОрганизации
	               |									ПО ДатыПоследнихДоговоров.ФизЛицо = АктуальныеДоговорникиОрганизации.ФизЛицо
	               |										И ДатыПоследнихДоговоров.ПоследняяДатаНачала = АктуальныеДоговорникиОрганизации.ДатаНачала
	               |										И АктуальныеДоговорникиОрганизации.Организация = &прм_ОбособленноеПодразделение
	               |
	               |							СГРУППИРОВАТЬ ПО
	               |								ДатыПоследнихДоговоров.ФизЛицо,
	               |								ДатыПоследнихДоговоров.Период,
	               |								ВЫБОР
	               |									КОГДА ДатыПоследнихДоговоров.ДатаНачалаНаНачалоМесяца <> ДАТАВРЕМЯ(1, 1, 1)
	               |										ТОГДА ДатыПоследнихДоговоров.ДатаНачалаНаНачалоМесяца
	               |									ИНАЧЕ ДатыПоследнихДоговоров.ПоследняяДатаНачала
	               |								КОНЕЦ) КАК ДоговорникиОрганизации
	               |			ПО Работники.ФизЛицо = ДоговорникиОрганизации.ФизЛицо
	               |				И Работники.Период = ДоговорникиОрганизации.Период
	               |";

	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаСтруктурныеЕдиницы()

////////////////////////////////////////////////////////////////////////////////
// КОММЕНТАРИИ РАСЧЕТОВ

// Формирует текстовую интерпретацию формулы по способу расчета и показателям для отображения
// на экране.
//
// Параметры
//  Объект - ПланВидовРасчетаОбъект для ПВР УправленческиеНачисления или УправленческиеУдержания
//	Режим - "Текст" - форумал выводится в виде текста, "HTML" - в виде HTML кода, по умолчанию = "Текст"
// Возвращаемое значение:
//   Строка   – содержит текстовую интерпретацию формулы расчета.
//
Функция ВизуализироватьФормулуРасчета(Объект, Режим = "Текст", ВычитатьИзБазыИПН = Ложь, ВычитатьИзБазыОПВ = Ложь) Экспорт

	СпособРасчета = Объект.СпособРасчета;
	
	Если Режим = "HTML" Тогда
		СтрокаФормулы = "<HTML><BODY vLink=#000000 link=#000000 scroll=auto rightMargin=0><FONT face=""MS Sans Serif"">";
		СписокУпрСпособов = ПолучитьСписокВариантовУпрНачислений();
		СтрокаФормулы = СтрокаФормулы +"<FONT face=""MS Sans Serif"" size=2>";
		Если СписокУпрСпособов.НайтиПоЗначению(СпособРасчета) = Неопределено Тогда
			СтрокаФормулы = СтрокаФормулы + "
			|Описание формулы расчета";				
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|Описание формулы расчета (щелкните подчеркнутый показатель для изменения)";
		КонецЕсли;
		СтрокаФормулы = СтрокаФормулы + "
		|</FONT>
		|<HR>";
		Если Объект.Показатель1.Пустая() Тогда
			Показатель1 = "<a href=./0><FONT id=""Indicator0"" color=#0000ff><Показатель 1></FONT></a>&nbsp";
		Иначе
			Показатель1 = "<a href=./0> <FONT id=""Indicator0"" color=#993366>" + Строка(Объект.Показатель1)+"</FONT></a>&nbsp";
		КонецЕсли;
		Если Объект.Показатель2.Пустая() Тогда
			Показатель2 = "<a href=./1><FONT id=""Indicator1"" color=#0000ff><Показатель 2></FONT></a>&nbsp";
		Иначе		
			Показатель2 = "<a href=./1> <FONT id=""Indicator1"" color=#993366>" + Строка(Объект.Показатель2)+"</FONT></a>&nbsp";
		КонецЕсли;
		Если Объект.Показатель3.Пустая() Тогда
			Показатель3 = "<a href=./2><FONT id=""Indicator2"" color=#0000ff><Показатель 3></FONT></a>&nbsp";			
		Иначе
			Показатель3 = "<a href=./2> <FONT id=""Indicator2"" color=#993366>" + Строка(Объект.Показатель3)+"</FONT></a>&nbsp";
		КонецЕсли;
		Если Объект.Показатель4.Пустая() Тогда
			Показатель4 = "<a href=./3><FONT id=""Indicator3"" color=#0000ff><Показатель 4></FONT></a>";						
		Иначе	
			Показатель4 = "<a href=./3> <FONT id=""Indicator3"" color=#993366>" + Строка(Объект.Показатель4)+"</FONT></a>";
		КонецЕсли;	
		Если Объект.Показатель5.Пустая() Тогда
			Показатель5 = "<a href=./4><FONT id=""Indicator4"" color=#0000ff><Показатель 5></FONT></a>&nbsp";						
		Иначе
			Показатель5 = "<a href=./4> <FONT id=""Indicator4"" color=#993366>" + Строка(Объект.Показатель5)+"</FONT></a>&nbsp";
		КонецЕсли;	
	КонецЕсли;
    
	Если  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой
	  Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой
	  Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммойДляПочасовогоОтклонения Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Фиксированная сумма></FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Фиксированная сумма></FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруОтОбратного Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма от обратного>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Фиксированная сумма от обратного></FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>, до удержания указанной в документе суммы";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Фиксированная сумма>, до удержания указанной в документе суммы</FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Сдельная выработка>";		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Сдельная выработка></FONT>"			
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма
		Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<0>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><0></FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратного Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<От обратного>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><От обратного></FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка (оклад)> (от обратного) / <Норма времени за месяц в днях> * <Отработанное время в днях>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Тарифная ставка (оклад)></FONT> (от обратного) поделить на <FONT color=#993366><Норма времени за месяц в днях></FONT> умножить на <FONT color=#993366><Отработанное время в днях></FONT>"			
		КонецЕсли;			
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка (оклад)> (от обратного) / <Норма времени за месяц в часах> * <Отработанное время в часах>"								
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Тарифная ставка (оклад)></FONT> (от обратного) поделить на <FONT color=#993366><Норма времени за месяц в часах></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеОтОбратного Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка> (от обратного) * <Отработанное время в часах>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Тарифная ставка></FONT> (от обратного) умножить на <FONT color=#993366><Отработанное время в часах></FONT>"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка> * <Отработанное время в днях>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Тарифная ставка></FONT> умножить на <FONT color=#993366><Отработанное время в днях></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка> * <Отработанное время в часах>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Тарифная ставка></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT>"						
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка> * <Время в часах>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Тарифная ставка></FONT> умножить на <FONT color=#993366><Время в часах></FONT>"						
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент оплаты> * <Расчетная база>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Процент оплаты></FONT> умножить на <FONT color=#993366><Расчетная база></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент сбора> * <Сумма по исполнительному листу>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Процент сбора></FONT> умножить на <FONT color=#993366><Сумма по исполнительному листу></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Тогда
		Если Режим = "Текст" Тогда
			Если Не ВычитатьИзБазыИПН И Не ВычитатьИзБазыОПВ Тогда
				СтрокаФормулы = "<Процент удержаний> * <Расчетная база>"		
			Иначе
				СтрокаФормулы = "<Процент удержаний> * (<Расчетная база>";
				Если ВычитатьИзБазыИПН Тогда
					СтрокаФормулы = СтрокаФормулы + " - <Исчисленный ИПН>";
				КонецЕсли;
				Если ВычитатьИзБазыОПВ Тогда
					СтрокаФормулы = СтрокаФормулы + " - <Исчисленные ОПВ>";
				КонецЕсли;
				СтрокаФормулы = СтрокаФормулы + ")";
			КонецЕсли;
		Иначе
			Если Не ВычитатьИзБазыИПН И Не ВычитатьИзБазыОПВ Тогда
				СтрокаФормулы = СтрокаФормулы + "
								|Результат = <FONT color=#993366><Процент удержаний></FONT> умножить на <FONT color=#993366><Расчетная база></FONT>"			
			Иначе
				СтрокаФормулы = СтрокаФормулы + "
								|Результат = <FONT color=#993366><Процент удержаний></FONT> умножить на <FONT color=#993366>(<Расчетная база>";
				Если ВычитатьИзБазыИПН Тогда
					СтрокаФормулы = СтрокаФормулы + " за вычетом <Исчисленный ИПН>";
				КонецЕсли;
				Если ВычитатьИзБазыОПВ Тогда
					СтрокаФормулы = СтрокаФормулы + " за вычетом <Исчисленные ОПВ>";
				КонецЕсли;
				СтрокаФормулы = СтрокаФормулы + ")</FONT>"			
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Тогда  
		Если Режим = "Текст" Тогда
			Если Не ВычитатьИзБазыИПН И Не ВычитатьИзБазыОПВ Тогда
				СтрокаФормулы = "<Процент удержаний> * <Расчетная база>"		
			Иначе
				СтрокаФормулы = "<Процент удержаний> * (<Расчетная база>";
				Если ВычитатьИзБазыИПН Тогда
					СтрокаФормулы = СтрокаФормулы + " - <Исчисленный ИПН>";
				КонецЕсли;
				Если ВычитатьИзБазыОПВ Тогда
					СтрокаФормулы = СтрокаФормулы + " - <Исчисленные ОПВ>";
				КонецЕсли;
				СтрокаФормулы = СтрокаФормулы + ")";
			КонецЕсли;
			СтрокаФормулы = СтрокаФормулы + ", до удержания указанной в документе суммы";
		Иначе
			Если Не ВычитатьИзБазыИПН И Не ВычитатьИзБазыОПВ Тогда
				СтрокаФормулы = СтрокаФормулы + "
								|Результат = <FONT color=#993366><Процент удержаний></FONT> умножить на <FONT color=#993366><Расчетная база></FONT>, до удержания указанной в документе суммы"			
			Иначе
				СтрокаФормулы = СтрокаФормулы + "
								|Результат = <FONT color=#993366><Процент удержаний></FONT> умножить на <FONT color=#993366>(<Расчетная база>";
				Если ВычитатьИзБазыИПН Тогда
					СтрокаФормулы = СтрокаФормулы + " за вычетом <Исчисленный ИПН>";
				КонецЕсли;
				Если ВычитатьИзБазыОПВ Тогда
					СтрокаФормулы = СтрокаФормулы + " за вычетом <Исчисленные ОПВ>";
				КонецЕсли;
				СтрокаФормулы = СтрокаФормулы + ")</FONT>, до удержания указанной в документе суммы"			
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Часовая тарифная ставка> * <Процент доплаты> * <Ночное время в часах>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Часовая тарифная ставка></FONT> умножить на <FONT color=#993366><Процент доплаты></FONT> умножить на <FONT color=#993366><Ночное время в часах></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку 
		Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных Тогда		
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Средний дневной (часовой) заработок> * <Время в днях (часах)>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Средний дневной (часовой) заработок></FONT> умножить на <FONT color=#993366><Время в днях (часах)></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда		
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Средний дневной заработок> * <Время в рабочих днях>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Средний дневной заработок></FONT> умножить на <FONT color=#993366><Время в рабочих днях></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения Тогда		
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Средний часовой заработок> * <Время в часах>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Средний часовой заработок></FONT> умножить на <FONT color=#993366><Время в часах></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка (оклад)> / <Норма времени за месяц в днях> * <Отработанное время в днях>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Тарифная ставка (оклад)></FONT> поделить на <FONT color=#993366><Норма времени за месяц в днях></FONT> умножить на <FONT color=#993366><Отработанное время в днях></FONT>"			
		КонецЕсли;			
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка (оклад)> / <Норма времени за месяц в часах> * <Отработанное время в часах>"								
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Тарифная ставка (оклад)></FONT> поделить на <FONT color=#993366><Норма времени за месяц в часах></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка (оклад)> / <Норма времени за месяц в часах> * <Время в часах>"								
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Тарифная ставка (оклад)></FONT> поделить на <FONT color=#993366><Норма времени за месяц в часах></FONT> умножить на <FONT color=#993366><Время в часах></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Коэффициент> * <Месячный расчетный показатель>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Коэффициент></FONT> умножить на <FONT color=#993366><Месячный расчетный показатель></FONT>"			
		КонецЕсли;			
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Коэффициент> * <Месячный расчетный показатель> / <Норма времени за месяц в днях> * <Отработанное время в днях>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Коэффициент></FONT> умножить на <FONT color=#993366><Месячный расчетный показатель></FONT> поделить на <FONT color=#993366><Норма времени за месяц в днях></FONT> умножить на <FONT color=#993366><Отработанное время в днях></FONT>"			
		КонецЕсли;			
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Коэффициент> * <Месячный расчетный показатель> / <Норма времени за месяц в часах> * <Отработанное время в часах>"								
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Коэффициент></FONT> умножить на <FONT color=#993366><Месячный расчетный показатель></FONT> поделить на <FONT color=#993366><Норма времени за месяц в часах></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Коэффициент> * <Минимальная заработная плата>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Коэффициент></FONT> умножить на <FONT color=#993366><Минимальная заработная плата></FONT>"			
		КонецЕсли;			
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Коэффициент> * <Минимальная заработная плата> / <Норма времени за месяц в днях> * <Отработанное время в днях>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Коэффициент></FONT> умножить на <FONT color=#993366><Минимальная заработная плата></FONT> поделить на <FONT color=#993366><Норма времени за месяц в днях></FONT> умножить на <FONT color=#993366><Отработанное время в днях></FONT>"			
		КонецЕсли;			
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Коэффициент> * <Минимальная заработная плата> / <Норма времени за месяц в часах> * <Отработанное время в часах>"								
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Коэффициент></FONT> умножить на <FONT color=#993366><Минимальная заработная плата></FONT> поделить на <FONT color=#993366><Норма времени за месяц в часах></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT>"			
		КонецЕсли;		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала дневной тарифной ставки> умножить на <Отработанное время в днях>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Стаж></FONT> оценить по <FONT color=#993366><Шкала дневной тарифной ставки></FONT> умножить на <FONT color=#993366><Отработанное время в днях></FONT>"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала месячной тарифной ставки>  / <Норма времени за месяц в днях> умножить на <Отработанное время в днях>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Стаж></FONT> оценить по <FONT color=#993366><Шкала месячной тарифной ставки></FONT> поделить на <FONT color=#993366><Норма времени за месяц в днях></FONT> умножить на <FONT color=#993366><Отработанное время в днях></FONT>"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала часовой тарифной ставки> * <Отработанное время в часах>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Стаж></FONT> оценить по <FONT color=#993366><Шкала часовой тарифной ставки></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала месячной тарифной ставки>  / <Норма времени за месяц в часах> * <Отработанное время в часах>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Стаж></FONT> оценить по <FONT color=#993366><Шкала месячной тарифной ставки></FONT> поделить на <FONT color=#993366><Норма времени за месяц в часах></FONT> умножить на <FONT color=#993366><Отработанное время в часах></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала процентов оплаты> * <Расчетная база>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Стаж></FONT> оценить по <FONT color=#993366><Шкала процентов оплаты></FONT> умножить на <FONT color=#993366><Расчетная база></FONT>"			
		КонецЕсли;						
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "Максимум(<Средний заработок> - <Начислено>, <0>)";		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = Максимум(<FONT color=#993366><Средний заработок></FONT> вычесть <FONT color=#993366><Начислено></FONT> , <FONT color=#993366><0>)</FONT>"		
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1 Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<" + Строка(Объект.Показатель1)+ ">";				
		Иначе
			СтрокаФормулы = СтрокаФормулы + " 
							|Результат = " + Показатель1;
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ОП2 Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<" + Строка(Объект.Показатель1) + "> Оценить по шкале <" + Строка(Объект.Показатель2)+ ">";				
		Иначе		
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = " + Показатель1+" Оценить по шкале "+ Показатель2
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2 Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<" + Строка(Объект.Показатель1) + "> * <" + Строка(Объект.Показатель2)+ ">";				
		Иначе						
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = " + Показатель1+" умножить на "+ Показатель2		
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ДП2ОП3 Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "(<" + Строка(Объект.Показатель1) + "> / <" + Строка(Объект.Показатель2) + ">) Оценить по шкале <" + Строка(Объект.Показатель3) + ">"				
		Иначе							
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = (" + Показатель1+" поделить на "+ Показатель2+") Оценить по шкале " + Показатель3
		КонецЕсли;						
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ДП2УП3 Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<" + Строка(Объект.Показатель1) + "> / (<" + Строка(Объект.Показатель2) + "> * <" + Строка(Объект.Показатель3) + ">)"				
		Иначе							
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = " + Показатель1+" поделить на ("+ Показатель2+" умножить на " + Показатель3 + ")"
		КонецЕсли;						
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ОП2ДП3 Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "(<" + Строка(Объект.Показатель1) + "> Оценить по шкале <" + Строка(Объект.Показатель2) + ">) / <" + Строка(Объект.Показатель3) + ">"				
		Иначе							
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = (" + Показатель1+" Оценить по шкале "+ Показатель2+") поделить на " + Показатель3
		КонецЕсли;						
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1ОП2УП3 Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "(<" + Строка(Объект.Показатель1) + "> Оценить по шкале <" + Строка(Объект.Показатель2) + ">) * <" + Строка(Объект.Показатель3) + ">"				
		Иначе							
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = (" + Показатель1+" Оценить по шкале "+ Показатель2+") умножить на " + Показатель3
		КонецЕсли;						
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2ДП3 Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "(<" + Строка(Объект.Показатель1) + "> * <" + Строка(Объект.Показатель2) + ">) / <" + Строка(Объект.Показатель3) + ">"						
		Иначе						
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = " + Показатель1+" умножить на "+ Показатель2+" поделить на " + Показатель3 
		КонецЕсли;						
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2ОП3 Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "(<" + Строка(Объект.Показатель1) + "> * <" + Строка(Объект.Показатель2) + ">) Оценить по шкале <" + Строка(Объект.Показатель3) + ">"				
		Иначе							
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = (" + Показатель1+" умножить на "+ Показатель2+") Оценить по шкале " + Показатель3
		КонецЕсли;						
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2УП3 Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<" + Строка(Объект.Показатель1) + "> * <" + Строка(Объект.Показатель2) + "> * <" + Строка(Объект.Показатель3) + ">"				
		Иначе							
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = " + Показатель1+" умножить на "+ Показатель2+" умножить на " + Показатель3
		КонецЕсли;						
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П3ДП1ОП2 Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<" + Строка(Объект.Показатель3) + "> / (<" + Строка(Объект.Показатель1) + "> Оценить по шкале <" + Строка(Объект.Показатель2) + ">)"				
		Иначе							
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = " + Показатель3+" поделить на ( "+ Показатель1+" Оценить по шкале " + Показатель2 + " )"
		КонецЕсли;						
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3 Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "Максимум (<" + Строка(Объект.Показатель1) + ">, (< " + Строка(Объект.Показатель2) + "> * <" + Строка(Объект.Показатель3) + ">))"
		Иначе							
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = Максимум(" + Показатель1+", ( "+ Показатель2+" умножить на " + Показатель3 + "))"
		КонецЕсли;						
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МинП1_П2УП3 Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "Минимум (<" + Строка(Объект.Показатель1) + ">, (< " + Строка(Объект.Показатель2) + "> * <" + Строка(Объект.Показатель3) + ">))"				
		Иначе							
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = Минимум(" + Показатель1+", ( "+ Показатель2+" умножить на " + Показатель3 + "))"
		КонецЕсли;						
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.П1УП2УП3ДП4 Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<" + Строка(Объект.Показатель1) + "> * <" + Строка(Объект.Показатель2) + "> * <" + Строка(Объект.Показатель3)+ "> / <" + Строка(Объект.Показатель4) + ">"								
		Иначе							
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = " + Показатель1+" умножить на "+ Показатель2+" умножить на " + Показатель3 + " поделить на " + Показатель4
		КонецЕсли;						
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3ОП4 Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "Максимум (<" + Строка(Объект.Показатель1) + ">, < " + Строка(Объект.Показатель2) + "> * (<" + Строка(Объект.Показатель3) + "> Оценить по шкале <" + Строка(Объект.Показатель4) + ">))"
		Иначе							
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = Максимум (" + Показатель1+", ("+ Показатель2+" умножить на (" + Показатель3 + " Оценить по шкале " + Показатель4 + "))"		
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МинП1_П2УП3ОП4 Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "Минимум (<" + Строка(Объект.Показатель1) + ">, (< " + Строка(Объект.Показатель2) + "> * (<" + Строка(Объект.Показатель3) + "> Оценить по шкале <" + Строка(Объект.Показатель4) + ">))"
		Иначе							
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = Минимум (" + Показатель1+", ("+ Показатель2+" умножить на (" + Показатель3 + " Оценить по шкале " + Показатель4 + "))"
		КонецЕсли;						
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1ВП2_0 Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "Максимум (<" + Строка(Объект.Показатель1) + "> - <" + Строка(Объект.Показатель2) + ">, <0>)";			
		Иначе							
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = Максимум (" + Показатель1+" - "+ Показатель2+", <0>)"							
		КонецЕсли;						
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2_П5ДП3УП4 Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "Максимум (<" + Строка(Объект.Показатель1)+ "> * <" + Строка(Объект.Показатель2) + ">, < " + Строка(Объект.Показатель5) + "> / <" + Строка(Объект.Показатель3) + "> * <" + Строка(Объект.Показатель4)+ ">)";			
		Иначе							
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = Максимум (" + Показатель1+" умножить на "+ Показатель2+", " + Показатель5 + " поделить на " + Показатель3 + " умножить на " + Показатель4 + ")"	
		КонецЕсли;						
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2ДП3ВП4_0 Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "Максимум (<" + Строка(Объект.Показатель1)+ "> * <" + Строка(Объект.Показатель2) + "> / <" + Строка(Объект.Показатель3) + "> - <"  + Строка(Объект.Показатель4) + "> , <0>)";		
		Иначе							
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = Максимум (" + Показатель1+" умножить на "+ Показатель2+" поделить на " + Показатель3 + " - " + Показатель4 +  ", <0>)"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1УП2_П3УП4ДП5 Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "Максимум (<" + Строка(Объект.Показатель1)+ "> * <" + Строка(Объект.Показатель2) + "> , <" + Строка(Объект.Показатель3) + "> * <"  + Строка(Объект.Показатель4) + "> / <" + Строка(Объект.Показатель5) + ">)";		
		Иначе							
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = Максимум (" + Показатель1 + " умножить на " + Показатель2 + ", " + Показатель3 + " умножить на "  + Показатель4 + " поделить на " + Показатель5 + ")";
		КонецЕсли;
						
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.МаксП1_П2УП3УП4ДП5 Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "Максимум (<" + Строка(Объект.Показатель1)+ "> , <" + Строка(Объект.Показатель2) + "> * <" + Строка(Объект.Показатель3) + ">) * <"  + Строка(Объект.Показатель4) + "> / <" + Строка(Объект.Показатель5) + ">";		
		Иначе							
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = Максимум (" + Показатель1 + " , " + Показатель2 + " умножить на " + Показатель3 + ") умножить на "  + Показатель4 + " поделить на " + Показатель5;
		КонецЕсли;													
	Иначе
		СтрокаФормулы = ""	
	КонецЕсли;
	
	Если Режим = "HTML" Тогда
		СтрокаФормулы = СтрокаФормулы + "
		|</font></html>"
	КонецЕсли;

	
    Возврат СтрокаФормулы;
	
КонецФункции // ВизуализироватьФормулуРасчета()

////////////////////////////////////////////////////////////////////////////////
// ОБСЛУЖИВАНИЕ ПЕРЕРАСЧЕТОВ
// 

// процедура выполняет дописывание наборов записей перерасчетов основных начислений по 
// переданной выборке
// выборка должна содержать уникальные комбинации Физлицо+Регистратор (т.е. ОбъектПерерасчета)
// которых еще нет в таблице перерасчета
Процедура ДописатьПерерасчетыОсновныхНачислений(Выборка) Экспорт
	Наборы = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Набор = Наборы[Выборка.Регистратор];
		Если Набор = Неопределено Тогда
			Набор = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
			Набор.Отбор.ОбъектПерерасчета.Значение = Выборка.Регистратор;
			Набор.Отбор.ОбъектПерерасчета.Использование = Истина;
			Наборы.Вставить(Выборка.Регистратор, Набор);
		КонецЕсли;
		НоваяСтрока = Набор.Добавить();
		НоваяСтрока.ОбъектПерерасчета	= Выборка.Регистратор;
		НоваяСтрока.ФизЛицо				= Выборка.Физлицо;
		НоваяСтрока.Организация			= Выборка.Организация;
	КонецЦикла;
	Для Каждого ЭлементСтруктуры Из Наборы Цикл
		// дописываем набор записей по данному объекту перерасчета
		ЭлементСтруктуры.Значение.Записать(Ложь);
	КонецЦикла;
КонецПроцедуры // ДописатьПерерасчетыОсновныхНачислений()

// Процедура выполняет дописывание наборов записей перерасчетов в
// регистр сведений ЗаполнениеПлановыхНачислений
//
Процедура ДописатьПерерасчетыВЗаполнениеПлановыхНачислений(Выборка) Экспорт
	
	Наборы = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Набор = Наборы[Выборка.ОбъектЗаполнения];
		Если Набор = Неопределено Тогда
			Набор = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
			Набор.Отбор.ОбъектЗаполнения.Значение = Выборка.ОбъектЗаполнения;
			Набор.Отбор.ОбъектЗаполнения.Использование = Истина;
			Наборы.Вставить(Выборка.ОбъектЗаполнения, Набор);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Набор.Добавить(),Выборка);
	КонецЦикла;
		
	Для Каждого ЭлементыСтруктуры Из Наборы Цикл
		ЭлементыСтруктуры.Значение.Записать(Ложь);
	КонецЦикла;
	
КонецПроцедуры // ДописатьПерерасчетыВЗаполнениеПлановыхНачислений()

// Функция строит текст запроса для проверки отражения зарплаты в регламентированном учете
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция СформироватьТекстЗапросаДляПроверкиОтраженияЗарплатыВРеглУчете() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Начисления.ОбособленноеПодразделение КАК Организация,
	|	Начисления.ПериодРегистрации КАК ПериодРегистрации,
	|	Начисления.ФизЛицо,
	|
	|	Начисления.Результат КАК Начислено,
	|	0 КАК НачисленоБух,
	|	Начисления.Результат КАК РазностьНачислено,
	|
	|	0 КАК ИПН,
	|	0 КАК ИПНБух,
	|	0 КАК РазностьИПН,
	|
	|	0 КАК ОПВ,
	|	0 КАК ОПВБух,
	|	0 КАК РазностьОПВ,
	|
	|	0 КАК Удержано,
	|	0 КАК УдержаноБух,
	|	0 КАК РазностьУдержано,
	|
	|	0 КАК СоциальныеОтчисления,
	|	0 КАК СоциальныеОтчисленияБух,
	|	0 КАК РазностьСоциальныеОтчисления,
	|
	|	0 КАК СоциальныйНалог,
	|	0 КАК СоциальныйНалогБух,
	|	0 КАК РазностьСоциальныйНалог,
	|
	|	0 КАК ПениОПВ,
	|	0 КАК ПениОПВБух,
	|	0 КАК РазностьПениОПВ,
	|
	|	0 КАК ПениСО,
	|	0 КАК ПениСОБух,
	|	0 КАК РазностьПениСО
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|ГДЕ
	|	Начисления.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	|	И Начисления.Результат <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.ОбособленноеПодразделение КАК Организация,
	|	НАЧАЛОПЕРИОДА(Начисления.ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации,
	|	Начисления.ФизЛицо,
	|
	|	Начисления.Результат КАК Начислено,
	|	0 КАК НачисленоБух,
	|	Начисления.Результат КАК РазностьНачислено,
	|
	|	0 КАК ИПН,
	|	0 КАК ИПНБух,
	|	0 КАК РазностьИПН,
	|
	|	0 КАК ОПВ,
	|	0 КАК ОПВБух,
	|	0 КАК РазностьОПВ,
	|
	|	0 КАК Удержано,
	|	0 КАК УдержаноБух,
	|	0 КАК РазностьУдержано,
	|
	|	0 КАК СоциальныеОтчисления,
	|	0 КАК СоциальныеОтчисленияБух,
	|	0 КАК РазностьСоциальныеОтчисления,
	|
	|	0 КАК СоциальныйНалог,
	|	0 КАК СоциальныйНалогБух,
	|	0 КАК РазностьСоциальныйНалог,
	|
	|	0 КАК ПениОПВ,
	|	0 КАК ПениОПВБух,
	|	0 КАК РазностьПениОПВ,
	|
	|	0 КАК ПениСО,
	|	0 КАК ПениСОБух,
	|	0 КАК РазностьПениСО
	|ИЗ
	|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Начисления
	|ГДЕ
	|	Начисления.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	|	И Начисления.Результат <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Удержания.ОбособленноеПодразделение КАК Организация,
	|	Удержания.ПериодРегистрации КАК ПериодРегистрации,
	|	Удержания.ФизЛицо,
	|
	|	0 КАК Начислено,
	|	0 КАК НачисленоБух,
	|	0 КАК РазностьНачислено,
	|
	|	0 КАК ИПН,
	|	0 КАК ИПНБух,
	|	0 КАК РазностьИПН,
	|
	|	0 КАК ОПВ,
	|	0 КАК ОПВБух,
	|	0 КАК РазностьОПВ,
	|
	|	Удержания.Результат КАК Удержано,
	|	0 КАК УдержаноБух,
	|	Удержания.Результат КАК РазностьУдержано,
	|
	|	0 КАК СоциальныеОтчисления,
	|	0 КАК СоциальныеОтчисленияБух,
	|	0 КАК РазностьСоциальныеОтчисления,
	|
	|	0 КАК СоциальныйНалог,
	|	0 КАК СоциальныйНалогБух,
	|	0 КАК РазностьСоциальныйНалог,
	|
	|	0 КАК ПениОПВ,
	|	0 КАК ПениОПВБух,
	|	0 КАК РазностьПениОПВ,
	|
	|	0 КАК ПениСО,
	|	0 КАК ПениСОБух,
	|	0 КАК РазностьПениСО
	|ИЗ
	|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК Удержания
	|ГДЕ
	|	Удержания.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	|	И Удержания.Результат <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПогашениеЗаймов.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ПогашениеЗаймов.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	ПогашениеЗаймов.ФизЛицо,
	|
	|	0 КАК Начислено,
	|	0 КАК НачисленоБух,
	|	0 КАК РазностьНачислено,
	|
	|	0 КАК ИПН,
	|	0 КАК ИПНБух,
	|	0 КАК РазностьИПН,
	|
	|	0 КАК ОПВ,
	|	0 КАК ОПВБух,
	|	0 КАК РазностьОПВ,
	|
	|	ПогашениеЗаймов.ОсновнойДолг КАК Удержано,
	|	0 КАК УдержаноБух,
	|	ПогашениеЗаймов.ОсновнойДолг КАК РазностьУдержано,
	|
	|	0 КАК СоциальныеОтчисления,
	|	0 КАК СоциальныеОтчисленияБух,
	|	0 КАК РазностьСоциальныеОтчисления,
	|
	|	0 КАК СоциальныйНалог,
	|	0 КАК СоциальныйНалогБух,
	|	0 КАК РазностьСоциальныйНалог,
	|
	|	0 КАК ПениОПВ,
	|	0 КАК ПениОПВБух,
	|	0 КАК РазностьПениОПВ,
	|
	|	0 КАК ПениСО,
	|	0 КАК ПениСОБух,
	|	0 КАК РазностьПениСО
	|ИЗ
	|	РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций КАК ПогашениеЗаймов
	|ГДЕ
	|	ПогашениеЗаймов.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПогашениеЗаймов.УдержаноИзЗарплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИПНРасчетыСБюджетом.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	ИПНРасчетыСБюджетом.ФизЛицо,
	|
	|	0 КАК Начислено,
	|	0 КАК НачисленоБух,
	|	0 КАК РазностьНачислено,
	|
	|	ИПНРасчетыСБюджетом.Налог КАК ИПН,
	|	0 КАК ИПНБух,
	|	ИПНРасчетыСБюджетом.Налог КАК РазностьИПН,
	|
	|	0 КАК ОПВ,
	|	0 КАК ОПВБух,
	|	0 КАК РазностьОПВ,
	|
	|	0 КАК Удержано,
	|	0 КАК УдержаноБух,
	|	0 КАК РазностьУдержано,
	|
	|	0 КАК СоциальныеОтчисления,
	|	0 КАК СоциальныеОтчисленияБух,
	|	0 КАК РазностьСоциальныеОтчисления,
	|
	|	0 КАК СоциальныйНалог,
	|	0 КАК СоциальныйНалогБух,
	|	0 КАК РазностьСоциальныйНалог,
	|
	|	0 КАК ПениОПВ,
	|	0 КАК ПениОПВБух,
	|	0 КАК РазностьПениОПВ,
	|
	|	0 КАК ПениСО,
	|	0 КАК ПениСОБух,
	|	0 КАК РазностьПениСО
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|ГДЕ
	|	ИПНРасчетыСБюджетом.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ИПНРасчетыСБюджетом.ВидДвижения = &Приход
	|	И ИПНРасчетыСБюджетом.ВидСтроки = &Исчисление
	|	И НЕ ИПНРасчетыСБюджетом.НеОтражатьВРеглУчете
	|	И ИПНРасчетыСБюджетом.Налог <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОПВРасчетыСФондами.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	ОПВРасчетыСФондами.ФизЛицо,
	|
	|	0 КАК Начислено,
	|	0 КАК НачисленоБух,
	|	0 КАК РазностьНачислено,
	|
	|	0 КАК ИПН,
	|	0 КАК ИПНБух,
	|	0 КАК РазностьИПН,
	|
	|	ВЫБОР
	|		КОГДА ОПВРасчетыСФондами.ВидПлатежа = &НалогВзнос
	|			ТОГДА ОПВРасчетыСФондами.Взнос 
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОПВ,
	|	0 КАК ОПВБух,
	|	ВЫБОР
	|		КОГДА ОПВРасчетыСФондами.ВидПлатежа = &НалогВзнос
	|			ТОГДА ОПВРасчетыСФондами.Взнос 
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьОПВ,
	|
	|	0 КАК Удержано,
	|	0 КАК УдержаноБух,
	|	0 КАК РазностьУдержано,
	|
	|	0 КАК СоциальныеОтчисления,
	|	0 КАК СоциальныеОтчисленияБух,
	|	0 КАК РазностьСоциальныеОтчисления,
	|
	|	0 КАК СоциальныйНалог,
	|	0 КАК СоциальныйНалогБух,
	|	0 КАК РазностьСоциальныйНалог,
	|
	|	ВЫБОР
	|		КОГДА ОПВРасчетыСФондами.ВидПлатежа <> &НалогВзнос
	|			ТОГДА ОПВРасчетыСФондами.Взнос 
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПениОПВ,
	|	0 КАК ПениОПВБух,
	|	ВЫБОР
	|		КОГДА ОПВРасчетыСФондами.ВидПлатежа <> &НалогВзнос
	|			ТОГДА ОПВРасчетыСФондами.Взнос 
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьПениОПВ,
	|
	|	0 КАК ПениСО,
	|	0 КАК ПениСОБух,
	|	0 КАК РазностьПениСО
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|ГДЕ
	|	ОПВРасчетыСФондами.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ОПВРасчетыСФондами.ВидДвижения = &Приход
	|	И ОПВРасчетыСФондами.ВидСтроки = &Исчисление
	|	И ОПВРасчетыСФондами.Взнос <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СОРасчетыСФондами.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	СОРасчетыСФондами.ФизЛицо,
	|
	|	0 КАК Начислено,
	|	0 КАК НачисленоБух,
	|	0 КАК РазностьНачислено,
	|
	|	0 КАК ИПН,
	|	0 КАК ИПНБух,
	|	0 КАК РазностьИПН,
	|
	|	0 КАК ОПВ,
	|	0 КАК ОПВБух,
	|	0 КАК РазностьОПВ,
	|
	|	0 КАК Удержано,
	|	0 КАК УдержаноБух,
	|	0 КАК РазностьУдержано,
	|
	|	ВЫБОР
	|		КОГДА СОРасчетыСФондами.ВидПлатежа = &НалогВзнос
	|			ТОГДА СОРасчетыСФондами.Отчисление
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СоциальныеОтчисления,
	|	0 КАК СоциальныеОтчисленияБух,
	|	ВЫБОР
	|		КОГДА СОРасчетыСФондами.ВидПлатежа = &НалогВзнос
	|			ТОГДА СОРасчетыСФондами.Отчисление
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьСоциальныеОтчисления,
	|
	|	0 КАК СоциальныйНалог,
	|	0 КАК СоциальныйНалогБух,
	|	0 КАК РазностьСоциальныйНалог,
	|
	|	0 КАК ПениОПВ,
	|	0 КАК ПениОПВБух,
	|	0 КАК РазностьПениОПВ,
	|
	|	ВЫБОР
	|		КОГДА СОРасчетыСФондами.ВидПлатежа <> &НалогВзнос
	|			ТОГДА СОРасчетыСФондами.Отчисление
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПениСО,
	|	0 КАК ПениСОБух,
	|	ВЫБОР
	|		КОГДА СОРасчетыСФондами.ВидПлатежа <> &НалогВзнос
	|			ТОГДА СОРасчетыСФондами.Отчисление
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьПениСО
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|ГДЕ
	|	СОРасчетыСФондами.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И СОРасчетыСФондами.ВидДвижения = &Приход
	|	И СОРасчетыСФондами.ВидСтроки = &Исчисление
	|	И СОРасчетыСФондами.Отчисление <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СНИсчисленный.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(СНИсчисленный.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	&ПустоеФизЛицо,
	|
	|	0 КАК Начислено,
	|	0 КАК НачисленоБух,
	|	0 КАК РазностьНачислено,
	|
	|	0 КАК ИПН,
	|	0 КАК ИПНБух,
	|	0 КАК РазностьИПН,
	|
	|	0 КАК ОПВ,
	|	0 КАК ОПВБух,
	|	0 КАК РазностьОПВ,
	|
	|	0 КАК Удержано,
	|	0 КАК УдержаноБух,
	|	0 КАК РазностьУдержано,
	|
	|	0 КАК СоциальныеОтчисления,
	|	0 КАК СоциальныеОтчисленияБух,
	|	0 КАК РазностьСоциальныеОтчисления,
	|
	|	СНИсчисленный.Налог КАК СоциальныйНалог,
	|	0 КАК СоциальныйНалогБух,
	|	СНИсчисленный.Налог КАК РазностьСоциальныйНалог,
	|
	|	0 КАК ПениОПВ,
	|	0 КАК ПениОПВБух,
	|	0 КАК РазностьПениОПВ,
	|
	|	0 КАК ПениСО,
	|	0 КАК ПениСОБух,
	|	0 КАК РазностьПениСО
	|ИЗ
	|	РегистрНакопления.СНИсчисленный КАК СНИсчисленный
	|ГДЕ
	|	СНИсчисленный.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И НЕ СНИсчисленный.НеОтражатьВРеглУчете
	|	И СНИсчисленный.Налог <> 0
	|		
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Типовой.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(Типовой.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА Типовой.СчетДт = &СчетСН ИЛИ Типовой.СчетКт = &СчетСН 
	|			ТОГДА &ПустоеФизЛицо // СН идет общей суммой по организации, т.к. 3150 не имеет субконто Работники,
	|								 // чтобы из-за возможных резервов не нарушать общую картинку всегда проводку с СН относим на пустое физлицо
	|
	|		КОГДА Типовой.СубконтоДт1 ССЫЛКА Справочник.ФизическиеЛица
	|				И Типовой.СубконтоДт1 <> Неопределено
	|				И Типовой.СубконтоДт1 <> &ПустоеФизЛицо
	|			ТОГДА ВЫРАЗИТЬ(Типовой.СубконтоДт1 КАК Справочник.ФизическиеЛица)
	|
	|		КОГДА Типовой.СубконтоДт2 ССЫЛКА Справочник.ФизическиеЛица
	|				И Типовой.СубконтоДт2 <> Неопределено
	|				И Типовой.СубконтоДт2 <> &ПустоеФизЛицо
	|			ТОГДА ВЫРАЗИТЬ(Типовой.СубконтоДт2 КАК Справочник.ФизическиеЛица)
	|
	|		КОГДА Типовой.СубконтоДт3 ССЫЛКА Справочник.ФизическиеЛица
	|				И Типовой.СубконтоДт3 <> Неопределено
	|				И Типовой.СубконтоДт3 <> &ПустоеФизЛицо
	|			ТОГДА ВЫРАЗИТЬ(Типовой.СубконтоДт3 КАК Справочник.ФизическиеЛица)
	|
	|		КОГДА Типовой.СубконтоКт1 ССЫЛКА Справочник.ФизическиеЛица
	|				И Типовой.СубконтоКт1 <> Неопределено
	|				И Типовой.СубконтоКт1 <> &ПустоеФизЛицо
	|			ТОГДА ВЫРАЗИТЬ(Типовой.СубконтоКт1 КАК Справочник.ФизическиеЛица)
	|
	|		КОГДА Типовой.СубконтоКт2 ССЫЛКА Справочник.ФизическиеЛица
	|				И Типовой.СубконтоКт2 <> Неопределено
	|				И Типовой.СубконтоКт2 <> &ПустоеФизЛицо
	|			ТОГДА ВЫРАЗИТЬ(Типовой.СубконтоКт2 КАК Справочник.ФизическиеЛица)
	|
	|		КОГДА Типовой.СубконтоКт3 ССЫЛКА Справочник.ФизическиеЛица
	|				И Типовой.СубконтоКт3 <> Неопределено
	|				И Типовой.СубконтоКт3 <> &ПустоеФизЛицо
	|			ТОГДА ВЫРАЗИТЬ(Типовой.СубконтоКт3 КАК Справочник.ФизическиеЛица)
	|
	|		ИНАЧЕ &ПустоеФизЛицо
	|	КОНЕЦ КАК ФизЛицо,
	|
	|	0 КАК Начислено,
	|	ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетОплатаТруда
	|			ТОГДА Типовой.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачисленоБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетОплатаТруда
	|			ТОГДА Типовой.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьНачислено,
	|
	|	0 КАК ИПН,
	|	ВЫБОР
	|		КОГДА Типовой.СчетДт = &СчетОплатаТруда И Типовой.СчетКт = &СчетИПН
	|			ТОГДА Типовой.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ ИПНБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетДт = &СчетОплатаТруда И Типовой.СчетКт = &СчетИПН
	|			ТОГДА Типовой.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьИПН,
	|
	|	0 КАК ОПВ,
	|	ВЫБОР
	|		КОГДА Типовой.СчетДт = &СчетОплатаТруда И Типовой.СчетКт = &СчетОПВ И Типовой.СубконтоКт2 = &НалогВзнос
	|			ТОГДА Типовой.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОПВБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетДт = &СчетОплатаТруда И Типовой.СчетКт = &СчетОПВ И Типовой.СубконтоКт2 = &НалогВзнос
	|			ТОГДА Типовой.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьОПВ,
	|
	|	0 КАК Удержано,
	|	ВЫБОР
	|		КОГДА Типовой.СчетДт = &СчетОплатаТруда И Типовой.СчетКт <> &СчетОПВ И Типовой.СчетКт <> &СчетИПН
	|			ТОГДА Типовой.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УдержаноБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетДт = &СчетОплатаТруда И Типовой.СчетКт <> &СчетОПВ И Типовой.СчетКт <> &СчетИПН
	|			ТОГДА Типовой.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьУдержано,
	|
	|	0 КАК СоциальныеОтчисления,
	|	ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетСО И Типовой.СубконтоКт2 = &НалогВзнос
	|			ТОГДА Типовой.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СоциальныеОтчисленияБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетСО И Типовой.СубконтоКт2 = &НалогВзнос 
	|			ТОГДА Типовой.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьСоциальныеОтчисления,
	|
	|	0 КАК СоциальныйНалог,
	|	ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетСН
	|			ТОГДА Типовой.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СоциальныйНалогБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетСН
	|			ТОГДА Типовой.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьСоциальныйНалог,
	|
	|	0 КАК ПениОПВ,
	|	ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетОПВ И Типовой.СубконтоКт2 <> &НалогВзнос
	|			ТОГДА Типовой.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПениОПВБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетОПВ И Типовой.СубконтоКт2 <> &НалогВзнос
	|			ТОГДА Типовой.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьПениОПВ,
	|
	|	0 КАК ПениСО,
	|	ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетСО И Типовой.СубконтоКт2 <> &НалогВзнос
	|			ТОГДА Типовой.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПениСОБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетСО И Типовой.СубконтоКт2 <> &НалогВзнос
	|			ТОГДА Типовой.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьПениСО
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ОборотыДтКт(&ДатаНач, &ДатаКон, РЕГИСТРАТОР) КАК Типовой
	|ГДЕ
	|	Типовой.Регистратор ССЫЛКА Документ.ОтражениеЗарплатыВРеглУчете
	|	И (Типовой.СчетДт = &СчетОплатаТруда
	|		ИЛИ Типовой.СчетКт В (&СчетОплатаТруда, &СчетОПВ, &СчетСО, &СчетСН))
	|";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Данные.Начислено,
	|	Данные.НачисленоБух,
	|	Данные.РазностьНачислено,
	|
	|	Данные.ИПН,
	|	Данные.ИПНБух,
	|	Данные.РазностьИПН,
	|
	|	Данные.ОПВ,
	|	Данные.ОПВБух,
	|	Данные.РазностьОПВ,
	|
	|	Данные.Удержано,
	|	Данные.УдержаноБух,
	|	Данные.РазностьУдержано,
	|
	|	Данные.СоциальныеОтчисления,
	|	Данные.СоциальныеОтчисленияБух,
	|	Данные.РазностьСоциальныеОтчисления,
	|
	|	Данные.СоциальныйНалог,
	|	Данные.СоциальныйНалогБух,
	|	Данные.РазностьСоциальныйНалог,
	|	
	|	Данные.ПениОПВ,
	|	Данные.ПениОПВБух,
	|	Данные.РазностьПениОПВ,
	|
	|	Данные.ПениСО,
	|	Данные.ПениСОБух,
	|	Данные.РазностьПениСО
	|
	|{ВЫБРАТЬ
	|	Данные.Организация.* КАК Организация,
	|	Данные.ПериодРегистрации КАК ПериодРегистрации,
	|	Данные.ФизЛицо.* КАК ФизЛицо
	|	//СВОЙСТВА
	|}
	|ИЗ
	|	(" + ТекстЗапроса + ") КАК Данные
	| //СОЕДИНЕНИЯ
	|{ГДЕ
	|	Данные.Организация.* КАК Организация,
	|	Данные.ПериодРегистрации КАК ПериодРегистрации,
	|	Данные.ФизЛицо.* КАК ФизЛицо
	|	//СВОЙСТВА
	|	//КАТЕГОРИИ
	|}
	|{УПОРЯДОЧИТЬ ПО
	|	Данные.Организация.* КАК Организация,
	|	Данные.ПериодРегистрации КАК ПериодРегистрации,
	|	Данные.ФизЛицо.* КАК ФизЛицо
	|	//СВОЙСТВА
	|}
	|ИТОГИ 
	|	СУММА(Начислено),
	|	СУММА(НачисленоБух),
	|	СУММА(РазностьНачислено),
	|
	|	СУММА(ИПН),
	|	СУММА(ИПНБух),
	|	СУММА(РазностьИПН),
	|
	|	СУММА(ОПВ),
	|	СУММА(ОПВБух),
	|	СУММА(РазностьОПВ),
	|
	|	СУММА(Удержано),
	|	СУММА(УдержаноБух),
	|	СУММА(РазностьУдержано),
	|
	|	СУММА(СоциальныеОтчисления),
	|	СУММА(СоциальныеОтчисленияБух),
	|	СУММА(РазностьСоциальныеОтчисления),
	|
	|	СУММА(СоциальныйНалог),
	|	СУММА(СоциальныйНалогБух),
	|	СУММА(РазностьСоциальныйНалог),
	|
	|	СУММА(ПениОПВ),
	|	СУММА(ПениОПВБух),
	|	СУММА(РазностьПениОПВ),
	|
	|	СУММА(ПениСО),
	|	СУММА(ПениСОБух),
	|	СУММА(РазностьПениСО)
	|ПО ОБЩИЕ
	|
	|{ИТОГИ ПО
	|	Организация.* КАК Организация,
	|	ПериодРегистрации КАК ПериодРегистрации,
	|	ФизЛицо.* КАК ФизЛицо
	|	//СВОЙСТВА
	|}
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаДляПроверкиОтраженияЗарплатыВРеглУчете()

// устанавливает аналитику на управляемых счетах по отражению заработной платы
//
Процедура УстановитьАналитикуНаУправляемыхСчетах(Источник, Отказ, РежимЗаписи) Экспорт
	Если ОбщегоНазначения.ПолучитьЗначениеПеременной("СводноеОтражениеЗарплаты") = Ложь ИЛИ НЕ Источник.ДополнительныеСвойства.Свойство("Проведение") Тогда
		Возврат;
	КонецЕсли;
	СписокСчетовСУправляемымОтражением = ОбщегоНазначения.ПолучитьЗначениеПеременной("СчетаСоСводнымОтражением");
	Перечень = СписокСчетовСУправляемымОтражением.ВыгрузитьКолонку("Счет");
	СтруктураПоиска = Новый Структура("Счет");
	СтороныПроводки = Новый Массив;
	СтороныПроводки.Добавить("Кт");
	СтороныПроводки.Добавить("Дт");
	Для Каждого СтрокаНабора Из Источник Цикл
		Для Каждого СторонаПроводки Из СтороныПроводки Цикл
			Если Перечень.Найти(СтрокаНабора["Счет"+СторонаПроводки]) <> Неопределено Тогда
				Если СтрокаНабора["Счет"+СторонаПроводки].ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций) <> Неопределено 
					И ЗначениеЗаполнено(СтрокаНабора["Субконто"+СторонаПроводки][ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций]) Тогда
					 СтрокаНабора["Субконто"+СторонаПроводки][ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций] = Справочники.ФизическиеЛица.ВсеФизическиеЛица;
				КонецЕсли;
				СтруктураПоиска.Счет = СтрокаНабора["Счет"+СторонаПроводки];
				СтрокиКомментарий = СписокСчетовСУправляемымОтражением.НайтиСтроки(СтруктураПоиска);
				Если СтрокиКомментарий.Количество() >0 Тогда
					Если СтрокиКомментарий[0].ОчищатьКомментарий Тогда
						СтрокаНабора.Содержание = "";
					КонецЕсли;
				 КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры //ПриЗаписиПроводокПоЗарплатеНаУправляемыхСчетахПередЗаписью

// возвращает список используемых счетов с управляемым отражением
//
Функция СписокСчетовСоСводнымОтражением() Экспорт
	 Запрос = Новый Запрос;
	 Запрос.Текст="ВЫБРАТЬ
	              |	СчетаСУправляемымОтражениемЗарплаты.Счет,
	              |	СчетаСУправляемымОтражениемЗарплаты.ОчищатьКомментарий
	              |ИЗ
	              |	РегистрСведений.СчетаСоСводнымОтражениемЗарплаты КАК СчетаСУправляемымОтражениемЗарплаты";
	 Возврат Запрос.Выполнить().Выгрузить();
КонецФункции //СписокСчетовСУправляемымОтражением

// устанваливает сулжебное дополнительное свойство в набор записей по регистру бухгалтерии
//
Процедура ПриПроведенииДокументовСлужебныеОперацииПриЗаписи(Источник, Отказ) Экспорт
	Если Источник.Движения.Найти("Типовой")<> Неопределено Тогда
		Источник.Движения.Найти("Типовой").ДополнительныеСвойства.Вставить("Проведение",Истина);
	КонецЕсли;
	Если Источник.Движения.Найти("Налоговый")<> Неопределено Тогда
		Источник.Движения.Найти("Налоговый").ДополнительныеСвойства.Вставить("Проведение",Истина);
	КонецЕсли;
КонецПроцедуры //ПриПроведенииДокументовСлужебныеОперацииПриЗаписи


Процедура ЦС_НачислениеОтпускныхОбработкаПроведенияОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	ДатаНачала = Дата("20150101000000");
	
	Если источник.периодрегистрации < ДатаНачала тогда
		Возврат;
	КонецЕсли;
	
	ОсновныеНачисления = Неопределено;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.НачислениеОтпускаРаботникамОрганизаций") тогда
		
		ОсновныеНачисления = Источник.Движения.ОсновныеНачисленияРаботниковОрганизаций.Выгрузить();
		ЦС_Отпуска = Источник.Движения.ЦС_ОтпускаОрганизаций;  
		ЦС_Отпуска.Очистить();
		ЦС_Резервы = Источник.Движения.ЦС_РезервыОтпусков;  
		ЦС_Резервы.Очистить();

		КоличествоДнейОтпуска = ОсновныеНачисления.Итог("КалендарныхДней")+Источник.КалендарныхДнейЧасовКомпенсацииОтпуска;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.НачислениеОтпускаРаботникамОрганизаций") тогда 		
		
		Набор = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(Источник);
		Набор.Прочитать();
		ОсновныеНачисления = Набор.Выгрузить();             		
		ЦС_Отпуска = РегистрыНакопления.ЦС_ОтпускаОрганизаций.СоздатьНаборЗаписей();
		ЦС_Отпуска.Отбор.Регистратор.Установить(Источник); 
		ЦС_Резервы = РегистрыНакопления.ЦС_РезервыОтпусков.СоздатьНаборЗаписей();
		ЦС_Резервы.Отбор.Регистратор.Установить(Источник);

		КоличествоДнейОтпуска = ОсновныеНачисления.Итог("КалендарныхДней")+Источник.КалендарныхДнейЧасовКомпенсацииОтпуска;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.РасчетПриУвольненииРаботникаОрганизаций") тогда
		
		ЦС_Отпуска = РегистрыНакопления.ЦС_ОтпускаОрганизаций.СоздатьНаборЗаписей();
		ЦС_Отпуска.Отбор.Регистратор.Установить(Источник); 	
		ЦС_Резервы = РегистрыНакопления.ЦС_РезервыОтпусков.СоздатьНаборЗаписей();
		ЦС_Резервы.Отбор.Регистратор.Установить(Источник);

		КоличествоДнейОтпуска = Источник.КалендарныхДнейЧасовКомпенсацииУдержанияОтпуска;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.РасчетПриУвольненииРаботникаОрганизаций") тогда
		
		ЦС_Отпуска = Источник.Движения.ЦС_ОтпускаОрганизаций;  
		ЦС_Отпуска.Очистить();		
		ЦС_Резервы = Источник.Движения.ЦС_РезервыОтпусков;  
		ЦС_Резервы.Очистить();

		КоличествоДнейОтпуска = Источник.КалендарныхДнейЧасовКомпенсацииУдержанияОтпуска;
		
	КонецЕсли;
	
	ЦС_Отпуска.Записывать = Истина;
	
	Если ОсновныеНачисления <> Неопределено тогда
		
		Для Каждого СтрокаТЧ Из ОсновныеНачисления Цикл
			
			Движение 					= ЦС_Отпуска.Добавить();	
			ЗаполнитьЗначенияСвойств(Движение,СтрокаТЧ);
			Движение.Период 			= источник.Дата;
			Движение.ПериодРегистрации 	= НачалоГода(СтрокаТЧ.ПериодРегистрации);
			Движение.ВидСтроки 			= Перечисления.ВидыДвиженийПриходРасход.Приход;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(Источник.Ссылка) = тип("ДокументСсылка.РасчетПриУвольненииРаботникаОрганизаций") тогда
		
		Если Источник.КалендарныхДнейЧасовКомпенсацииУдержанияОтпуска <> 0 Тогда 
			
			Движение 					= ЦС_Отпуска.Добавить();  
			ЗаполнитьЗначенияСвойств(Движение,Источник);
			Движение.ПериодРегистрации = НачалоГода(Источник.ПериодРегистрации);  
			Движение.КалендарныхДней	= Источник.КалендарныхДнейЧасовКомпенсацииУдержанияОтпуска;
			Движение.Период 			= источник.Дата;
			Движение.ВидСтроки 			= Перечисления.ВидыДвиженийПриходРасход.Приход; 
			
		КонецЕсли;
		
	Иначе
		
		Если Источник.КалендарныхДнейЧасовКомпенсацииОтпуска <> 0 Тогда 
			
			Движение 					= ЦС_Отпуска.Добавить();  
			ЗаполнитьЗначенияСвойств(Движение,Источник);
			Движение.ПериодРегистрации = НачалоГода(Источник.ПериодРегистрации);  
			Движение.КалендарныхДней	= Источник.КалендарныхДнейЧасовКомпенсацииОтпуска;
			Движение.Период 			= источник.Дата;
			Движение.ВидСтроки 			= Перечисления.ВидыДвиженийПриходРасход.Приход; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	      	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Организация,
		|	ВложенныйЗапрос.ФизЛицо,
		|	ВложенныйЗапрос.ПериодРегистрации,
		|	ВложенныйЗапрос.Приказ,
		|	СУММА(ВложенныйЗапрос.ОстатокРезерва) КАК ОстатокРезерва
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	(ВЫБРАТЬ
		|		Приход.Организация КАК Организация,
		|		Приход.ФизЛицо КАК ФизЛицо,
		|		Приход.ПериодРегистрации КАК ПериодРегистрации,
		|		Приход.Приказ КАК Приказ,
		|		Приход.КалендарныхДнейОборот КАК ОстатокРезерва
		|	ИЗ
		|		РегистрНакопления.ЦС_РезервыОтпусков.Обороты(
		|				,
		|				,
		|				Период,
		|				ПериодРегистрации < &НачалоПериода
		|					И Приказ = &Приказ
		|					И ФизЛицо = &ФизЛицо
		|					И ВидСтроки = &ВидСтрокиПриход) КАК Приход
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Расход.Организация,
		|		Расход.ФизЛицо,
		|		Расход.ПериодРегистрации,
		|		Расход.Приказ,
		|		-Расход.КалендарныхДнейОборот
		|	ИЗ
		|		РегистрНакопления.ЦС_РезервыОтпусков.Обороты(
		|				,
		|				,
		|				Период,
		|				ПериодРегистрации < &НачалоПериода
		|					И Приказ = &Приказ
		|					И ФизЛицо = &ФизЛицо
		|					И ВидСтроки = &ВидСтрокиРасход) КАК Расход) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Организация,
		|	ВложенныйЗапрос.ФизЛицо,
		|	ВложенныйЗапрос.Приказ,
		|	ВложенныйЗапрос.ПериодРегистрации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Организация,
		|	ВТ.ФизЛицо,
		|	ВТ.ПериодРегистрации,
		|	ВТ.Приказ,
		|	ВТ.ОстатокРезерва
		|ИЗ
		|	ВТ КАК ВТ
		|ГДЕ
		|	ВТ.ОстатокРезерва > 0";

	Запрос.УстановитьПараметр("ВидСтрокиПриход", Перечисления.ВидыДвиженийПриходРасход.Приход);
	Запрос.УстановитьПараметр("ВидСтрокиРасход", Перечисления.ВидыДвиженийПриходРасход.Расход);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(Источник.Дата));
	Запрос.УстановитьПараметр("Приказ", Источник.УдалитьПриказ);
	Запрос.УстановитьПараметр("ФизЛицо", Источник.ФизЛицо);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Движение = ЦС_Резервы.добавить();
		ЗаполнитьЗначенияСвойств(Движение,ВыборкаДетальныеЗаписи);
		Движение.ВидСтроки = Перечисления.ВидыДвиженийПриходРасход.Расход;
		Движение.Период = источник.дата;
		Движение.КалендарныхДней = мин(КоличествоДнейОтпуска,ВыборкаДетальныеЗаписи.Остатокрезерва);
		Движение.МесяцЗачета = Источник.ПериодРегистрации;
		КоличествоДнейОтпуска = КоличествоДнейОтпуска - Движение.КалендарныхДней;
		
		Если КоличествоДнейОтпуска = 0 тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
     ЦС_Резервы.записывать = истина;
	 
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.НачислениеОтпускаРаботникамОрганизаций")
		Или ТипЗнч(Источник) = Тип("ДокументСсылка.РасчетПриУвольненииРаботникаОрганизаций") тогда		
		ЦС_Отпуска.Записать();	
		ЦС_Резервы.Записать();
	КонецЕсли;
	
КонецПроцедуры

