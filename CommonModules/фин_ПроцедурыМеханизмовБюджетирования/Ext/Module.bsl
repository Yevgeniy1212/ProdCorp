#Если НЕ (ТонкийКлиент ИЛИ ВебКлиент) Тогда

// возвращает таблицу значений  разностью строк между двумя таблицами
//
Функция ПолучитьДополнениеКТаблице(ИсходнаяТаблица,ВтораяТаблица,МассивИзмерений,МассивРесурсов) Экспорт
	 РезультирующаяТаблица 	= ИсходнаяТаблица.СкопироватьКолонки();
	 ТаблицаБазовая 		= ИсходнаяТаблица.Скопировать();
	 ТаблицаИтоговая 		= ВтораяТаблица.Скопировать();
	 СтрокаИзмерения		= "";
	 Для Каждого Измерение 	Из МассивИзмерений Цикл
		  СтрокаИзмерения 	= СтрокаИзмерения + ?(СтрокаИзмерения="","",",") +Измерение;
	 КонецЦикла;
	 СтрокаРесурсы			= "";
	 Для Каждого Ресурс 	Из МассивРесурсов Цикл
		  СтрокаРесурсы 	= СтрокаРесурсы + ?(СтрокаРесурсы="","",",") +Ресурс;
	 КонецЦикла;
	 Попытка 
	 	ТаблицаБазовая.Свернуть(СтрокаИзмерения,СтрокаРесурсы); 
	 Исключение
		Сообщить("Неверно указан перечень колонок таблицы!");
		ВызватьИсключение "Неверный перечень колонок!
		|	"+ОписаниеОшибки();
		Возврат РезультирующаяТаблица;
	 КонецПопытки;
	 Попытка 
	 	ТаблицаИтоговая.Свернуть(СтрокаИзмерения,СтрокаРесурсы); 
	 Исключение
		Сообщить("Неверно указан перечень колонок таблицы!");
		ВызватьИсключение "Неверный перечень колонок!";
		Возврат РезультирующаяТаблица;
	КонецПопытки;
	СтруктураПоиска = Новый Структура(СтрокаИзмерения);
	Для Каждого СтрокаИтоговая Из ТаблицаИтоговая Цикл
		 ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаИтоговая);
		 СтрокаБазовая = ТаблицаБазовая.НайтиСтроки(СтруктураПоиска);
		 Если СтрокаБазовая.Количество()=0 Тогда
			  РавенствоСоблюдено = Истина;
			  Для Каждого Ресурс Из МассивРесурсов Цикл
				  Если СтрокаИтоговая[Ресурс] <>0 Тогда
					  РавенствоСоблюдено = Ложь;
				  КонецЕсли;
			  КонецЦикла;
			  Если РавенствоСоблюдено Тогда
				  Продолжить;
			  КонецЕсли;
			  НоваяСтрока = РезультирующаяТаблица.Добавить();
			  ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаИтоговая);
		  Иначе
			  РавенствоСоблюдено = Истина;
			  Для Каждого Ресурс Из МассивРесурсов Цикл
				  Если СтрокаИтоговая[Ресурс] <> СтрокаБазовая[0][Ресурс] Тогда
					  РавенствоСоблюдено = Ложь;
				  КонецЕсли;
			  КонецЦикла;
			  Если РавенствоСоблюдено Тогда
				  Продолжить;
			  КонецЕсли;
			  НоваяСтрока = РезультирующаяТаблица.Добавить();
			  ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаИтоговая);
			  Для Каждого Ресурс Из МассивРесурсов Цикл
			  		НоваяСтрока[Ресурс] = НоваяСтрока[Ресурс] - СтрокаБазовая[0][Ресурс];
			  КонецЦикла;
		 КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаИтоговая Из ТаблицаБазовая Цикл
		 ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаИтоговая);
		 СтрокаБазовая = ТаблицаИтоговая.НайтиСтроки(СтруктураПоиска);
		 Если СтрокаБазовая.Количество()=0 Тогда
			  РавенствоСоблюдено = Истина;
			  Для Каждого Ресурс Из МассивРесурсов Цикл
				  Если СтрокаИтоговая[Ресурс] <>0 Тогда
					  РавенствоСоблюдено = Ложь;
				  КонецЕсли;
			  КонецЦикла;
			  Если РавенствоСоблюдено Тогда
				  Продолжить;
			  КонецЕсли;
			  НоваяСтрока = РезультирующаяТаблица.Добавить();
			  ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаИтоговая);
			  Для Каждого Ресурс Из МассивРесурсов Цикл
			  		НоваяСтрока[Ресурс] = - НоваяСтрока[Ресурс];
			  КонецЦикла;
		 КонецЕсли;
	КонецЦикла;
	Возврат РезультирующаяТаблица; 
КонецФункции //ПолучитьДополнениеКТаблице
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПЕРЕЧИСЛЕНИЕМ ПЕРИОДИЧНОСТЬ (ДЕНЬ, НЕДЕЛЯ, МЕСЯЦ, КВАРТАЛ, ГОД)

// Процедура ФорматПериода
// 
Функция ФорматПериода(ПериодичностьСценария) Экспорт
	Если ТипЗнч(ПериодичностьСценария) = фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования() Тогда 
		Периодичность = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(ПериодичностьСценария);
	Иначе
		Периодичность = ПериодичностьСценария;
	КонецЕсли;
	
	Если Периодичность = Перечисления.фин_Периодичность.Год Тогда
		ФорматПериод = "ДФ = ""гггг """"г.""""""";
	ИначеЕсли Периодичность = Перечисления.фин_Периодичность.Квартал Тогда
		ФорматПериод = "ДФ = ""к"""" квартал"""" гггг """"г.""""""";
	ИначеЕсли Периодичность = Перечисления.фин_Периодичность.Месяц Тогда
		ФорматПериод = "ДФ = ""ММММ гггг """"г.""""""";
	ИначеЕсли Периодичность = Перечисления.фин_Периодичность.Неделя Тогда
		ФорматПериод = "ДФ = """"""Неделя с"""" дд.ММ.гггг """"""";
	ИначеЕсли Периодичность = Перечисления.фин_Периодичность.День Тогда
		ФорматПериод = "ДФ = ""дд.ММ.гггг """"г.""""""";
	Иначе
		ФорматПериод = "";
	КонецЕсли;
	
	Возврат ФорматПериод;
КонецФункции

// возвращает горизонт планирования в виде даты/текста
//
Функция ПолучитьГоризонтПланированияСПересчетом(ДатаВПериодеПланирования,СценарийИсходный,Сценарий,Текст=Ложь) Экспорт
	КратностьИсходногоСценария = 1;
	КратностьКонечногоСценария = 1;
	ПериодичностьИсходногоСценария = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СценарийИсходный);
	Если ПериодичностьИсходногоСценария = Перечисления.фин_Периодичность.Год Тогда
		 КратностьИсходногоСценария 	= 12;
	ИначеЕсли ПериодичностьИсходногоСценария = Перечисления.фин_Периодичность.Полугодие Тогда
		 КратностьИсходногоСценария 	= 6;
	ИначеЕсли ПериодичностьИсходногоСценария = Перечисления.фин_Периодичность.Квартал Тогда
		 КратностьИсходногоСценария 	= 3;
	ИначеЕсли ПериодичностьИсходногоСценария = Перечисления.фин_Периодичность.Месяц Тогда
		 КратностьИсходногоСценария 	= 1;
	ИначеЕсли ПериодичностьИсходногоСценария = Перечисления.фин_Периодичность.Декада Тогда
		 КратностьИсходногоСценария 	= 1/3;
	ИначеЕсли ПериодичностьИсходногоСценария = Перечисления.фин_Периодичность.Неделя Тогда
		 КратностьИсходногоСценария 	= 1/4;
	КонецЕсли;
	ПериодичностьСценария = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий);
	Если ПериодичностьСценария = Перечисления.фин_Периодичность.Год Тогда
		 КратностьКонечногоСценария 	= 12;
	ИначеЕсли ПериодичностьСценария = Перечисления.фин_Периодичность.Полугодие Тогда
		 КратностьКонечногоСценария 	= 6;
	ИначеЕсли ПериодичностьСценария = Перечисления.фин_Периодичность.Квартал Тогда
		 КратностьКонечногоСценария 	= 3;
	ИначеЕсли ПериодичностьСценария = Перечисления.фин_Периодичность.Месяц Тогда
		 КратностьКонечногоСценария 	= 1;
	ИначеЕсли ПериодичностьСценария = Перечисления.фин_Периодичность.Декада Тогда
		 КратностьКонечногоСценария 	= 1/3;
	ИначеЕсли ПериодичностьСценария = Перечисления.фин_Периодичность.Неделя Тогда
		 КратностьКонечногоСценария 	= 1/4;
	КонецЕсли;
	РазмахГоризонта 	=  ?(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Сценарий,ДатаВПериодеПланирования)<1,1,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Сценарий,ДатаВПериодеПланирования));
	РазницаКратностей  	= (КратностьКонечногоСценария *РазмахГоризонта/КратностьИсходногоСценария)-1;
	ПериодПланирования 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ДатаВПериодеПланирования,ПериодичностьИсходногоСценария);
	Дата = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,ПериодичностьИсходногоСценария),ПериодичностьИсходногоСценария,РазницаКратностей);
	Если Текст Тогда
		Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПредставлениеПериодаСтрокой(Дата,СценарийИсходный);
	Иначе
		Возврат Дата;
	КонецЕсли;
КонецФункции //ПолучитьГоризонтПланированияСПересчетом

// возвращает дату, лежащую в периоде
//
Функция ПолучитьДатуПланированияВПериоде(НачалоПериода,КонецПериода,Сценарий,ВерхняяГраница=Ложь,БезУчетаТочекПланирования=Ложь) Экспорт
	Если ТипЗнч(Сценарий) <> фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования() ИЛИ (БезУчетаТочекПланирования=Истина ИЛИ НЕ Сценарий.ИспользоватьТочкиПланирования)  Тогда
		Если ВерхняяГраница = Ложь Тогда
			Если НачалоПериода ='00010101' Тогда
				Возврат '00010101';
			КонецЕсли;
			ДатаВПериоде = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(НачалоПериода,Сценарий);
			Если ДатаВПериоде < НачалоПериода Тогда
				Пока ДатаВПериоде < НачалоПериода Цикл
					ДатаВПериоде = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(ДатаВПериоде,Сценарий,1);
				КонецЦикла;
				Если ДатаВПериоде  > КонецПериода Тогда
					Сообщить("Дата не может быть приведена в соответствие со сценарием/периодичностью "+Сценарий);
					Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(НачалоПериода,Сценарий);
				Иначе
					Возврат ДатаВПериоде;
				КонецЕсли;
			ИначеЕсли ДатаВПериоде > КонецПериода Тогда
				Сообщить("Дата не может быть приведена в соответствие со сценарием/периодичностью "+Сценарий);
				Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(НачалоПериода,Сценарий);
			Иначе
				Возврат ДатаВПериоде;
			КонецЕсли;
		Иначе
			Если КонецПериода ='00010101' Тогда
				Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(НачалоПериода,Сценарий);
			КонецЕсли;
			ДатаВПериоде = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(НачалоПериода,Сценарий);
			Если ДатаВПериоде > КонецПериода И НЕ ДатаВПределахПериода(НачалоПериода,ДатаВПериоде,Сценарий) Тогда
				Пока ДатаВПериоде > КонецПериода Цикл
					ДатаВПериоде = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(ДатаВПериоде,Сценарий,-1);
				КонецЦикла;
				Если ДатаВПериоде  < НачалоПериода Тогда
					Сообщить("Дата не может быть приведена в соответствие со сценарием/периодичностью "+Сценарий);
					Возврат '00010101';
				Иначе
					Возврат ДатаВПериоде;
				КонецЕсли;
			ИначеЕсли ДатаВПериоде < НачалоПериода Тогда
				Сообщить("Дата не может быть приведена в соответствие со сценарием/периодичностью "+Сценарий);
				Возврат '00010101';
			Иначе
				Возврат ДатаВПериоде;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ВерхняяГраница = Ложь Тогда
			Если НачалоПериода ='00010101' Тогда
				Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(НачалоПериода,Сценарий);
			КонецЕсли;
			ДатаВПериоде = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(НачалоПериода,Сценарий);
			Если ДатаВПериоде < НачалоПериода Тогда
				Пока ДатаВПериоде < НачалоПериода Цикл
					ДатаВПериоде = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СледующийПериодПланирования(ДатаВПериоде,Сценарий);
				КонецЦикла;
				Если ДатаВПериоде  > КонецПериода Тогда
					Сообщить("Дата не может быть приведена в соответствие со сценарием/периодичностью "+Сценарий);
					Возврат '00010101';
				Иначе
					Возврат ДатаВПериоде;
				КонецЕсли;
			ИначеЕсли ДатаВПериоде > КонецПериода Тогда
				Сообщить("Дата не может быть приведена в соответствие со сценарием/периодичностью "+Сценарий);
				Возврат '00010101';
			Иначе
				Возврат ДатаВПериоде;
			КонецЕсли;
		Иначе
			Если КонецПериода ='00010101' Тогда
				Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(НачалоПериода,Сценарий);
			КонецЕсли;
			ДатаВПериоде = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(НачалоПериода,Сценарий);
			Если ДатаВПериоде > КонецПериода Тогда
				Пока ДатаВПериоде > КонецПериода Цикл
					ДатаВПериоде = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СледующийПериодПланирования(ДатаВПериоде,Сценарий,Ложь);
				КонецЦикла;
				Если ДатаВПериоде  < НачалоПериода Тогда
					Сообщить("Дата не может быть приведена в соответствие со сценарием/периодичностью "+Сценарий);
					Возврат '00010101';
				Иначе
					Возврат ДатаВПериоде;
				КонецЕсли;
			ИначеЕсли ДатаВПериоде < НачалоПериода Тогда
				Сообщить("Дата не может быть приведена в соответствие со сценарием/периодичностью "+Сценарий);
				Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(НачалоПериода,Сценарий);
			Иначе
				Возврат ДатаВПериоде;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции //ПолучитьДатуПланированияВПериоде

// определяет, лежит ли дата окончания в одном периоде с датой начала
//
Функция ДатаВПределахПериода(НачалоПланирования,ОкончаниеПланирования,Сценарий) Экспорт
	Если ТипЗнч(Сценарий) <> фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования() Тогда
		Периодичность = Сценарий;
	Иначе
		Периодичность = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий);
	КонецЕсли;
	НачалоПериода 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(НачалоПланирования,	Периодичность);
	КонецПериода 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(НачалоПланирования,	Периодичность);
	Если КонецДня(КонецПериода) = КонецДня(ОкончаниеПланирования) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции //ДатаВПределахПериода

Функция ВерсияБюджета(Бюджет,ПериодПланирования) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатьиБюджета.Версия,
		|	ВерсииБюджетов.ПериодАктуальности КАК ПериодАктуальности
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ВерсииБюджетов КАК ВерсииБюджетов
		|		ПО СтатьиБюджета.Версия = ВерсииБюджетов.Ссылка
		|ГДЕ
		|	СтатьиБюджета.Владелец = &Бюджет
		|	И ВерсииБюджетов.ПериодАктуальности <= &ПериодПланирования
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодАктуальности УБЫВ";

	Запрос.УстановитьПараметр("Бюджет", Бюджет);
	Запрос.УстановитьПараметр("ПериодПланирования", ПериодПланирования);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Версия;
	Иначе
		Возврат Справочники.фин_ВерсииБюджетов.ПустаяСсылка();
	КонецЕсли;

КонецФункции

Функция ВерсииБюджетаЗаПериод(Бюджет,НачалоПериода,КонецПериода) Экспорт
    СписокВерсий = Новый Массив;
	СписокВерсий.Добавить(Справочники.фин_ВерсииБюджетов.ПустаяСсылка());
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиБюджета.Версия,
		|	ВерсииБюджетов.ПериодАктуальности КАК ПериодАктуальности
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ВерсииБюджетов КАК ВерсииБюджетов
		|		ПО СтатьиБюджета.Версия = ВерсииБюджетов.Ссылка
		|ГДЕ
		|	СтатьиБюджета.Владелец = &Бюджет
		|	И ВерсииБюджетов.ПериодАктуальности <= &ПериодПланирования
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодАктуальности УБЫВ";

	Запрос.УстановитьПараметр("Бюджет", Бюджет);
	Запрос.УстановитьПараметр("ПериодПланирования", НачалоПериода);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СписокВерсий.Добавить(ВыборкаДетальныеЗаписи.Версия);
	КонецЕсли;
 	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиБюджета.Версия,
		|	ВерсииБюджетов.ПериодАктуальности КАК ПериодАктуальности
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ВерсииБюджетов КАК ВерсииБюджетов
		|		ПО СтатьиБюджета.Версия = ВерсииБюджетов.Ссылка
		|ГДЕ
		|	СтатьиБюджета.Владелец = &Бюджет
		|	И ВерсииБюджетов.ПериодАктуальности > &Начало
		|	И ВерсииБюджетов.ПериодАктуальности <= &Конец
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодАктуальности УБЫВ";

	Запрос.УстановитьПараметр("Бюджет", Бюджет);
	Запрос.УстановитьПараметр("Начало", НачалоПериода);
	Запрос.УстановитьПараметр("Конец", 	КонецПериода);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокВерсий.Добавить(ВыборкаДетальныеЗаписи.Версия);
	КонецЦикла;
    Возврат СписокВерсий;

КонецФункции

//заполняет список статей аналитического баланса
//
Процедура ЗаполнитьСтатьиБаланса(ПараметрОтборПоВладельцу) Экспорт

	СправСтатьиБаланса= Справочники.фин_СтатьиАналитическогоБаланса;
	
	МакетСтатьи=СправСтатьиБаланса.ПолучитьМакет("СтруктураБаланса");
	ОбластьСтатьи = МакетСтатьи.ПолучитьОбласть("Список");
	ОбластьСтатьиВысота = ОбластьСтатьи.ВысотаТаблицы;
	
	НачатьТранзакцию();
	
	Для НСтр = 1 По ОбластьСтатьиВысота Цикл
		
		Код = СокрЛП(ОбластьСтатьи.Область(НСтр, 3).Текст);
		
		Если СокрЛП(ОбластьСтатьи.Область(НСтр, 2).Текст)="1" Тогда
			НовыйОбъект=СправСтатьиБаланса.СоздатьГруппу();
		Иначе
			НовыйОбъект=СправСтатьиБаланса.СоздатьЭлемент();
			НовыйОбъект.ОбластьОтчета=СокрЛП(ОбластьСтатьи.Область(НСтр, 5).Текст);
		КонецЕсли;
		
		НовыйОбъект.Владелец=ПараметрОтборПоВладельцу;
		
		Если СокрЛП(ОбластьСтатьи.Область(НСтр, 4).Текст)<>"" Тогда
			Родитель=СправСтатьиБаланса.НайтиПоКоду(СокрЛП(ОбластьСтатьи.Область(НСтр, 4).Текст),,,ПараметрОтборПоВладельцу);
			НовыйОбъект.Родитель=Родитель;
		КонецЕсли;	
		
		НовыйОбъект.Код=Код;
		НовыйОбъект.Наименование=СокрЛП(ОбластьСтатьи.Область(НСтр, 1).Текст);
		НовыйОбъект.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	
КонецПроцедуры // ЗаполнитьСтатьиБаланса()

// заполняет статьи отчета о прибылях и убытках 
//
Процедура ЗаполнитьСтатьиОтчетаОПрибыляхИУбытках(ПараметрОтборПоВладельцу) Экспорт

	СправСтатьиОтчета= Справочники.фин_СтатьиОтчетаОПрибыляхИУбытках;
	
	МакетСтатьи=СправСтатьиОтчета.ПолучитьМакет("ПрибылиИУбытки");
	ОбластьСтатьи = МакетСтатьи.ПолучитьОбласть("Список");
	ОбластьСтатьиВысота = ОбластьСтатьи.ВысотаТаблицы;
	
	НачатьТранзакцию();
	
	Для НСтр = 1 По ОбластьСтатьиВысота Цикл
		
		НовыйОбъект=СправСтатьиОтчета.СоздатьЭлемент();
        НовыйОбъект.Владелец=ПараметрОтборПоВладельцу;
		НовыйОбъект.Код = СокрЛП(ОбластьСтатьи.Область(НСтр, 2).Текст);
		НовыйОбъект.Наименование=СокрЛП(ОбластьСтатьи.Область(НСтр, 1).Текст);
		НовыйОбъект.ОбластьОтчета=СокрЛП(ОбластьСтатьи.Область(НСтр, 3).Текст);
		НовыйОбъект.НаименованиеДляОтчета=СокрЛП(ОбластьСтатьи.Область(НСтр, 4).Текст);
		НовыйОбъект.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	
КонецПроцедуры // ЗаполнитьСтатьиОтчетаОПрибыляхИУбытках()


// процедура проверяет состояние документов перед их проведением
//
Процедура ЗапретПроведенияНеУтвержденныхДокументовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если Источник.ОбменДанными.Загрузка ИЛИ Источник.ДополнительныеСвойства.Свойство("ВнешняяОбработка") Тогда
		Возврат;
	КонецЕсли;
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И Источник.Состояние <> фин_ОбщегоНазначенияВызовСервераПовтИсп.СостояниеОбъектаУтвержден() Тогда
		 РежимЗаписи = РежимЗаписиДокумента.Запись;
		 ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ "+Источник.Ссылка+" записан, но не проведен,
		 |так как документ не утвержден!");
	КонецЕсли;
КонецПроцедуры //ЗапретПроведенияНеУтвержденныхДокументовПередЗаписью

// Формирует сообщение при ошибках проведения документов.
//
// Параметры: 
//  ТекстСообщения - Исходный текст, выводимого сообщения,
//  Отказ          - Флаг отказа в проведении документа,
//  Заголовок      - Заголовок начала серии сообщений об ошибках проведения (не обязательный)
//
Процедура ОшибкаПриПроведении(ТекстСообщения, Отказ, Заголовок="") Экспорт

	СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);

КонецПроцедуры // ОшибкаПриПроведении()

// Формирует строку представления документа для сообщений при проведении.
//
// Параметры
//  Документ - ссылка на проводимый документ.
//
// Возвращаемое значение
//  Строка с представлением документа.
//
Функция ПредставлениеДокументаПриПроведении(Документ) Экспорт

	МетаданныеДокумента = Документ.Метаданные();

	ВидОперацииСтр = "";

	Если ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента) Тогда
		ВидОперацииСтр = " (" + Документ.ВидОперации + ")";
	КонецЕсли;

	Возврат "Проведение документа: " + СокрЛП(Документ) + ВидОперацииСтр;

КонецФункции // ПредставлениеДокументаПриПроведении()

 // Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Булево: Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

// Выводит сообщение об ошибке и выставляет параметр Отказ в "Истина". 
//  В случае работы на клиенте или на сервере выводит в окно сообщений,
//  в случае внешнего соединения вызывает исключение.
// Параметры:
//  ТекстСообщения - строка, текст сообщения.
//  Отказ          - булево, признак отказа (необязательный)
Процедура СообщитьОбОшибке(ТекстСообщения, Отказ = Ложь, Заголовок = "",Статус = Неопределено) Экспорт

	ОкончаниеСлужебногоСообщения = Найти(ТекстСообщения, "}:");

	Если ОкончаниеСлужебногоСообщения > 0 И Лев(ТекстСообщения, 1) = "{" Тогда
		ТекстСообщения = СокрЛП(Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2)));
	КонецЕсли;

	Отказ = Истина;

	#Если ВнешнееСоединение Тогда

		Если ЗначениеЗаполнено(Заголовок) Тогда
			ТекстСообщения = Заголовок + Символы.ПС + ТекстСообщения;
			Заголовок = "";
		КонецЕсли;

		ВызватьИсключение (ТекстСообщения);

	#Иначе

		Если ЗначениеЗаполнено(Заголовок) Тогда
			Сообщить(Заголовок);
			Заголовок = "";
		КонецЕсли;

		Если Статус = Неопределено Тогда
			Статус = СтатусСообщения.Важное;
		КонецЕсли;
		Сообщить(ТекстСообщения, Статус);

	#КонецЕсли

КонецПроцедуры // СообщитьОбОшибке()

//Процедура БюджетированиеФормированиеПроводокПриПроведенииПервичныхДокументовОбработкаПроведения
//
Процедура БюджетированиеФормированиеПроводокПриПроведенииПервичныхДокументовОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ОтложенныйРежимФормированияПроводокПоБюджетированию") Тогда
		Возврат;
	КонецЕсли;
	Если Отказ ИЛИ Источник.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	МетаданныеДокумента = Источник.Метаданные();
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.СплошнаяРегистрацияДокументовВБюджетировании() Тогда
		ПараметрыХраненияФакта = фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрФактическихДанныхДляДокумента(МетаданныеДокумента.Имя);
		Если (ПараметрыХраненияФакта.Проведение = ИСТИНА И РежимПроведения=Неопределено) ИЛИ НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ДокументРегистрируетсяПоБюджетированию(МетаданныеДокумента.Имя) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДатаАктуальности = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ДатаАктуальностиФактическихДанных");
	Если ДатаАктуальности<>'00010101' И ДатаАктуальности<Источник.Дата Тогда
		Возврат;
	КонецЕсли;
	ИмяДокумента = МетаданныеДокумента.Имя;
	РегистрацияПрогнозныхДанных = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмеютсяПравилаРегистрацииПрогнозныхДанных() И МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыНакопления.фин_ПрогнозИсполненияБюджетов);
	РегистрацияЛимитов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмеютсяЛимитыНаИсполнение() И МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыНакопления.фин_КонтролируемыеФинансовыеПоказатели);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПрограммныйИдентификатор",	ИмяДокумента);
	Запрос.Текст="ВЫБРАТЬ
	             |	ВидыДокументов.Ссылка КАК ВидДокументов,
	             |	ВидыДокументов.ИспользоватьДополнительныеРеквизиты
	             |ИЗ
	             |	Справочник.фин_ВидыДокументов КАК ВидыДокументов
	             |ГДЕ
	             |	ВидыДокументов.ПрограммныйИдентификатор = &ПрограммныйИдентификатор
	             |	И ВидыДокументов.РегистрироватьПервичныеДанныеПоБюджетированию";
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВидДокументов = Выборка.ВидДокументов;
		Если Выборка.ИспользоватьДополнительныеРеквизиты Тогда
			ПроверитьЗаполнениеОбязательныхДополнительныхРеквизитов(Источник, Отказ,ВидДокументов,ИмяДокумента);
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	СтруктураТаблиц = Новый Структура;
	ЗаполнитьПередаваемыеДвижения(Источник,СтруктураТаблиц,ВидДокументов,ИмяДокумента);
	фин_РегистрацияФактическихДанныхПоБюджетированию.ФормироватьПроводкиПоБюджетированию(Источник.Ссылка, Отказ, РежимПроведения,СтруктураТаблиц,,ВидДокументов,ИмяДокумента,РегистрацияПрогнозныхДанных,РегистрацияЛимитов);
КонецПроцедуры

// передает в структуру наборы движений, которые могут понадобиться при расчете движений
//
Процедура ЗаполнитьПередаваемыеДвижения(Источник,СтруктураТаблиц,ВидДокументов,ИмяДокумента) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПрограммныйИдентификатор",	ИмяДокумента);
	Запрос.УстановитьПараметр("ВидДокументов",				ВидДокументов);
	Запрос.УстановитьПараметр("ДатаДокумента",				Источник.Дата);
	Запрос.УстановитьПараметр("ВидДанных",					Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах);
	Запрос.Текст="ВЫБРАТЬ
	             |	НазначенияШаблонов.Схема КАК НаборШаблонов
	             |ПОМЕСТИТЬ ВТ_Шаблоны
	             |ИЗ
	             |	РегистрСведений.фин_ПрименениеСхемОтраженияФактическихДанных.СрезПоследних(&ДатаДокумента, ОбъектИнформационнойБазы = &ВидДокументов) КАК НазначенияШаблонов
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	НаборШаблонов
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	ВложенныйЗапрос.ИмяИсточника
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		НазначенияШаблонов.НаборШаблонов КАК НаборШаблонов,
	             |		ШаблоныОтражения.ИмяИсточника КАК ИмяИсточника
	             |	ИЗ
	             |		ВТ_Шаблоны КАК НазначенияШаблонов
	             |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_НаборыШаблоновОтраженияПервичныхДанныхВБюджетах.НаборШаблонов КАК НаборыШаблонов
	             |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ПравилаОтраженияФактическихДанных КАК ШаблоныОтражения
	             |				ПО НаборыШаблонов.Схема = ШаблоныОтражения.Владелец ИЛИ НаборыШаблонов.Схема = ШаблоныОтражения.Владелец.Владелец
	             |			ПО НазначенияШаблонов.НаборШаблонов = НаборыШаблонов.Ссылка
	             |	ГДЕ
	             |		ШаблоныОтражения.ВидДанных = &ВидДанных
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		НазначенияШаблонов.НаборШаблонов,
	             |		ШаблоныОтражения.ИмяИсточника
	             |	ИЗ
	             |		ВТ_Шаблоны КАК НазначенияШаблонов
	             |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ПравилаОтраженияФактическихДанных КАК ШаблоныОтражения
	             |			ПО НазначенияШаблонов.НаборШаблонов = ШаблоныОтражения.Владелец ИЛИ НазначенияШаблонов.НаборШаблонов = ШаблоныОтражения.Владелец.Владелец
	             |	ГДЕ
	             |		ШаблоныОтражения.ВидДанных = &ВидДанных
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		НазначенияШаблонов.НаборШаблонов,
	             |		ВЫБОР
	             |			КОГДА &ПрограммныйИдентификатор = ""ПлатежноеПоручениеИсходящее""
	             |					ИЛИ &ПрограммныйИдентификатор = ""ПлатежныйОрдерСписаниеДенежныхСредств""
	             |					ИЛИ &ПрограммныйИдентификатор = ""РасходныйКассовыйОрдер""
	             |				ТОГДА ""ден_РезервыПоБюджетамПодВыполнениеЗаявок""
	             |			ИНАЧЕ ""ден_ПредполагаемыеПоступленияПоБюджетам""
	             |		КОНЕЦ
	             |	ИЗ
	             |		ВТ_Шаблоны КАК НазначенияШаблонов
	             |	ГДЕ
	             |		НазначенияШаблонов.НаборШаблонов = ЗНАЧЕНИЕ(Перечисление.фин_АльтернативныеСпособыОтраженияФактическихДанных.ПоДокументамПланированияДвиженийДенежныхСредств)) КАК ВложенныйЗапрос";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			Имя = Сред(Выборка.ИмяИсточника,Найти(Выборка.ИмяИсточника,".")+1);
			ПолучаемыеИзЗаписанныхНаборов = Новый СписокЗначений;
			ПолучаемыеИзЗаписанныхНаборов.Добавить("ден_ПредполагаемыеПоступленияПоБюджетам","РегистрыНакопления.ден_ПредполагаемыеПоступленияПоБюджетам");
			ПолучаемыеИзЗаписанныхНаборов.Добавить("ден_РезервыПоБюджетамПодВыполнениеЗаявок","РегистрыНакопления.ден_РезервыПоБюджетамПодВыполнениеЗаявок");
			Если ПолучаемыеИзЗаписанныхНаборов.НайтиПоЗначению(Имя)=Неопределено Тогда
				ТаблицаДвижений = Источник.Движения[Имя].Выгрузить();
			ИначеЕсли Имя = "ден_ПредполагаемыеПоступленияПоБюджетам" Тогда
				НЗ = РегистрыНакопления[Имя].СоздатьНаборЗаписей();
				ТаблицаДвижений = НЗ.ВыгрузитьКолонки();
				ЗаполнитьПредполагаемыеПоступления(Источник.Движения.ден_ПланируемыеПоступленияДенежныхСредств.Выгрузить(),ТаблицаДвижений);
			ИначеЕсли Имя = "ден_РезервыПоБюджетамПодВыполнениеЗаявок" Тогда
				НЗ = РегистрыНакопления[Имя].СоздатьНаборЗаписей();
				ТаблицаДвижений = НЗ.ВыгрузитьКолонки();
				ИмяРегистра = ?(Метаданные.РегистрыНакопления.Найти("ден_ЗаявкиНаРасходованиеСредств")<>Неопределено,"ден_ЗаявкиНаРасходованиеСредств","ЗаявкиНаРасходованиеСредств");
				ЗаполнитьПланируемыеРасходы(Источник.Движения[ИмяРегистра].Выгрузить(),ТаблицаДвижений);
			КонецЕсли;
			СтруктураТаблиц.Вставить(Имя,ТаблицаДвижений);
		Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Проведение документа "+Источник.Ссылка+":
				|	не обнаружен набор движений """+Выборка.ИмяИсточника+""", используемый в отражении фактических данных по бюджетам!");
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры //ЗаполнитьПередаваемыеДвижения

// передает в структуру наборы движений, которые могут понадобиться при расчете движений
//
Процедура ЗаполнитьПередаваемыеДвиженияВсемиНаборами(Источник,СтруктураТаблиц) Экспорт
	ИмяДокумента = Источник.Метаданные().Имя;
	Для Каждого Набор Из Источник.Движения Цикл
		Набор.Прочитать();
		Имя = Набор.Метаданные().Имя;
		ТаблицаДвижений = Набор.Выгрузить();
		СтруктураТаблиц.Вставить(Имя,ТаблицаДвижений);
	КонецЦикла;
КонецПроцедуры //ЗаполнитьПередаваемыеДвижения

// процедура проверяет заполнение обязательных дополнительных реквизитов
//
Процедура ПроверитьЗаполнениеОбязательныхДополнительныхРеквизитов(Источник, Отказ,ВидДокументов,ИмяДокумента)
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ОтложенныйРежимФормированияПроводокПоБюджетированию") Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ",		Источник.Ссылка);
	Запрос.УстановитьПараметр("ВидДокументов",	ВидДокументов);
	Если Источник.Метаданные().ТабличныеЧасти.Найти("фин_ЗначенияДополнительныхРеквизитовБюджетирования")=Неопределено Тогда
		Запрос.Текст="ВЫБРАТЬ
		|	ДополнительныеРеквизитыДокументовДляБюджетирования.РеквизитДокумента КАК Реквизит,
		|	ДополнительныеРеквизитыДокументовДляБюджетирования.ОбязателенКЗаполнению КАК Обязательный,
		|	Значения.Значение
		|ИЗ
		|	РегистрСведений.фин_ДополнительныеРеквизитыДокументовДляБюджетирования КАК ДополнительныеРеквизитыДокументовДляБюджетирования
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЗначенияДополнительныхРеквизитовБюджетирования.РеквизитБюджетирования КАК Реквизит,
		|			ЗначенияДополнительныхРеквизитовБюджетирования.ЗначениеРеквизита КАК Значение
		|		ИЗ
		|			РегистрСведений.фин_ЗначенияДополнительныхРеквизитовБюджетирования КАК ЗначенияДополнительныхРеквизитовБюджетирования
		|		ГДЕ
		|			ЗначенияДополнительныхРеквизитовБюджетирования.Документ = &Документ) КАК Значения
		|		ПО ДополнительныеРеквизитыДокументовДляБюджетирования.РеквизитДокумента = Значения.Реквизит
		|ГДЕ
		|	ДополнительныеРеквизитыДокументовДляБюджетирования.ВидДокументов = &ВидДокументов";
	Иначе
		Запрос.Текст="ВЫБРАТЬ
		|	ДополнительныеРеквизитыДокументовДляБюджетирования.РеквизитДокумента КАК Реквизит,
		|	ДополнительныеРеквизитыДокументовДляБюджетирования.ОбязателенКЗаполнению КАК Обязательный,
		|	Значения.Значение
		|ИЗ
		|	РегистрСведений.фин_ДополнительныеРеквизитыДокументовДляБюджетирования КАК ДополнительныеРеквизитыДокументовДляБюджетирования
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЗначенияДополнительныхРеквизитовБюджетирования.ЗначениеРеквизита КАК Значение,
		|			ЗначенияДополнительныхРеквизитовБюджетирования.РеквизитБюджетирования КАК Реквизит
		|		ИЗ
		|			Документ."+ИмяДокумента+".фин_ЗначенияДополнительныхРеквизитовБюджетирования КАК ЗначенияДополнительныхРеквизитовБюджетирования
		|		ГДЕ
		|			ЗначенияДополнительныхРеквизитовБюджетирования.Ссылка = &Документ) КАК Значения
		|		ПО ДополнительныеРеквизитыДокументовДляБюджетирования.РеквизитДокумента = Значения.Реквизит
		|ГДЕ
		|	ДополнительныеРеквизитыДокументовДляБюджетирования.ВидДокументов = &ВидДокументов";
	КонецЕсли;	
	ЗначенияДополнительныхРеквизитов = Запрос.Выполнить().Выбрать();
	Пока ЗначенияДополнительныхРеквизитов.Следующий() Цикл
		Если ЗначенияДополнительныхРеквизитов.Обязательный И
			(ЗначенияДополнительныхРеквизитов.Значение = NULL 
			ИЛИ НЕ ЗначениеЗаполнено(ЗначенияДополнительныхРеквизитов.Значение)) Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Проведение документа "+Источник.Ссылка+" не возможно:
			|	дополнительный реквизит бюджетирования """+?(ЗначенияДополнительныхРеквизитов.Реквизит.ПредставлениеДополнительногоРеквизита="",ЗначенияДополнительныхРеквизитов.Реквизит,ЗначенияДополнительныхРеквизитов.Реквизит.ПредставлениеДополнительногоРеквизита)+""" не заполнен!");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ПроверитьЗаполнениеОбязательныхДополнительныхРеквизитов

//Функция ПолучитьСписокРеквизитовБюджетирования
//
Функция ПолучитьСписокРеквизитовБюджетирования(ТолькоИзмерения=Ложь) Экспорт
	СписокРазрезов = Новый СписокЗначений;
	СписокРазрезов.Добавить("ФинансовыйПоказатель","Финансовый показатель");
	СписокРазрезов.Добавить("УправленческоеПодразделение","Управленческое подразделение");
	СписокРазрезов.Добавить("Проект","Проект");
	СписокРазрезов.Добавить("Контрагент","Контрагент");
	СписокРазрезов.Добавить("Номенклатура","Номенклатура");
	Если Не ТолькоИзмерения Тогда
		СписокРазрезов.Добавить("Количество");
		СписокРазрезов.Добавить("Сумма");
	КонецЕсли;
	Возврат СписокРазрезов;
КонецФункции //ПолучитьСписокРеквизитовБюджетирования

//Процедура ЗаполнитьСписокРеквизитовБюджетирования
//
Процедура ЗаполнитьСписокРеквизитовБюджетирования(ТекущийСписок,ТолькоИзмерения = Ложь) Экспорт
	СписокРазрезов = ПолучитьСписокРеквизитовБюджетирования(ТолькоИзмерения);
	Для Каждого Разрез Из СписокРазрезов Цикл
		Если ТекущийСписок.НайтиПоЗначению(Разрез.Значение)=Неопределено Тогда
			ТекущийСписок.Добавить(Разрез.Значение,Разрез.Представление);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ЗаполнитьСписокРеквизитовБюджетирования

//Функция УстановитьНадлежащийТип
//
Функция ПолучитьПростойТипРазреза(Разрез,НоменклатурныйПеречень,КЭШ_Разрезы = Неопределено)  Экспорт
	Если Разрез = "ФинансовыйПоказатель" ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.ФинансовыйПоказатель Тогда
		Возврат Тип("СправочникСсылка.фин_ФинансовыеПоказатели");
	ИначеЕсли Разрез = "Проект" ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект Тогда
		Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникаПроектов();
	ИначеЕсли Разрез = "ЦФО" ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение Тогда
		Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникУправленческихПодразделений();
	ИначеЕсли Разрез = "Контрагент" ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Контрагент Тогда
		Возврат Тип("СправочникСсылка.Контрагенты");
	ИначеЕсли Разрез = "Номенклатура" ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Номенклатура Тогда
		Возврат Тип("СправочникСсылка."+?(НоменклатурныйПеречень=Перечисления.узп_ИспользуемыеНоменклатурныеПеречни.ПлановаяНоменклатура,"фин_Плановая","")+"Номенклатура");
	ИначеЕсли Разрез = "ВалютаОперации"  ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта Тогда
		Возврат Тип("СправочникСсылка.Валюты");
	ИначеЕсли Разрез = "Организация" ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Организация Тогда
		Возврат Тип("СправочникСсылка.Организации");
	ИначеЕсли Разрез = "Сценарий" Тогда //ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Сценарий Тогда
		Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования();
	ИначеЕсли Найти(Разрез,"Разрез")<>0 Тогда //ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Сценарий Тогда
		Возврат фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(?(ТипЗнч(Разрез)=Тип("Строка"),Перечисления.фин_ФактическиеПоказателиБюджетирования[Разрез],Разрез),КЭШ_Разрезы).ТипЗначения.Типы()[0];
	Иначе
		Возврат Тип("Число");
	КонецЕсли;
КонецФункции //УстановитьНадлежащийТип

//Процедура УстановитьНадлежащийТип
//
Процедура УстановитьНадлежащийТип(Разрез,ИмяСправочника=Неопределено,НадлежащийТип,ДляОтчетности=Ложь)  Экспорт
	НадлежащийТип = Новый Массив;
	НадлежащийТип.Добавить(Тип("Число"));
	ИмяСправочника = Новый Массив;
	Если Разрез="" Тогда
		Возврат;
	КонецЕсли;
	Если Разрез = "ФинансовыйПоказатель" ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.ФинансовыйПоказатель Тогда
		НадлежащийТип = Новый Массив;
		ИмяСправочника.Добавить("фин_ФинансовыеПоказатели");
		НадлежащийТип.Добавить(Тип("СправочникСсылка.фин_ФинансовыеПоказатели"));
	ИначеЕсли Разрез = "Сумма" ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Сумма Тогда
		НадлежащийТип = Новый Массив;
		НадлежащийТип.Добавить(Тип("Число"));
	ИначеЕсли Разрез = "Количество" ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Количество Тогда
		НадлежащийТип = Новый Массив;
		НадлежащийТип.Добавить(Тип("Число"));
	ИначеЕсли Разрез = "Проект" ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект Тогда
		НадлежащийТип = Новый Массив;
		ИмяСправочника.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПроектов());
		ИмяСправочника.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"ВидыРаспределенияПоПроектам");
		НадлежащийТип.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникаПроектов());
		НадлежащийТип.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникВидыРаспределенияПоПроектам());
	ИначеЕсли Разрез = "ЦФО" ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение Тогда
		НадлежащийТип = Новый Массив;
		ИмяСправочника.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений());
		НадлежащийТип.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникУправленческихПодразделений());
	ИначеЕсли Разрез = "Контрагент" ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Контрагент Тогда
		НадлежащийТип = Новый Массив;
		ИмяСправочника.Добавить("Контрагенты");
		НадлежащийТип.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ИначеЕсли Разрез = "Номенклатура" ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Номенклатура Тогда
		НадлежащийТип = Новый Массив;
		ИмяСправочника.Добавить("Номенклатура");
		НадлежащийТип.Добавить(Тип("СправочникСсылка.Номенклатура"));
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВестиУчетПоПлановойНоменклатуре") Тогда
			ИмяСправочника.Добавить("фин_ПлановаяНоменклатура");
			НадлежащийТип.Добавить(Тип("СправочникСсылка.фин_ПлановаяНоменклатура"));
		КонецЕсли;
		Если ДляОтчетности И НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЭтоУТ3() Тогда
			ИмяСправочника.Добавить("НоменклатурныеГруппы");
			НадлежащийТип.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипНоменклатурныеГруппыСсылка());
		КонецЕсли;
	ИначеЕсли Разрез = "ВалютаОперации" ИЛИ Разрез = "Валюта" ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта Тогда
		НадлежащийТип = Новый Массив;
		ИмяСправочника.Добавить("Валюты");
		НадлежащийТип.Добавить(Тип("СправочникСсылка.Валюты"));
	ИначеЕсли Разрез = "Организация" ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Организация Тогда
		НадлежащийТип = Новый Массив;
		ИмяСправочника.Добавить("Организации");
		НадлежащийТип.Добавить(Тип("СправочникСсылка.Организации"));
	ИначеЕсли Разрез = "Сценарий" Тогда //ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Сценарий Тогда
		НадлежащийТип = Новый Массив;
		ИмяСправочника.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования");
		НадлежащийТип.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования());
	ИначеЕсли Разрез = "КонтролирующийСценарий" Тогда //ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Сценарий Тогда
		НадлежащийТип = Новый Массив;
		ИмяСправочника.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования");
		НадлежащийТип.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования());
	ИначеЕсли Разрез = "Период" Тогда //ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Период Тогда
		НадлежащийТип = Новый Массив;
		НадлежащийТип.Добавить(Тип("Дата"));
	ИначеЕсли Разрез = "ПричинаКорректировки" Тогда
		НадлежащийТип = Новый Массив;
		НадлежащийТип.Добавить(Тип("СправочникСсылка.фин_ОснованияКорректировокБюджетов"));
	ИначеЕсли Разрез = "ВидОперации" Тогда
		НадлежащийТип = Новый Массив;
		НадлежащийТип.Добавить(Тип("ПеречислениеСсылка.фин_ВидыОперацийБюджет"));
	ИначеЕсли Разрез = "ПричинаОтклонения" Тогда
		НадлежащийТип = Новый Массив;
		НадлежащийТип.Добавить(Тип("СправочникСсылка.фин_ПричиныНепринятияСтрокБюджетов"));
	ИначеЕсли Разрез = "СпособКорректировки" Тогда
		НадлежащийТип = Новый Массив;
		НадлежащийТип.Добавить(Тип("ПеречислениеСсылка.фин_СпособыВводаКорректировок"));
	ИначеЕсли Разрез = "ДокументРассмотрения" Тогда
		НадлежащийТип = Новый Массив;
		НадлежащийТип.Добавить(Тип("ДокументСсылка.фин_РассмотрениеОтклоненийФактическихДанных"));
	ИначеЕсли Разрез = "СпособКорректировки" Тогда
		НадлежащийТип = Новый Массив;
		НадлежащийТип.Добавить(Тип("ПеречислениеСсылка.фин_СпособыВводаКорректировок"));
	ИначеЕсли Разрез = "ОтветственноеЛицо" Тогда
		НадлежащийТип = Метаданные.ОпределяемыеТипы.фин_ОтветственныеБюджетногоПроцесса.Тип.Типы();
	ИначеЕсли Разрез = "ВидВлиянияНаФинансовыйРезультат" Тогда
		НадлежащийТип = Новый Массив;
		НадлежащийТип.Добавить(Тип("ПеречислениеСсылка.фин_ВидыВлиянияОтклонений"));
	ИначеЕсли Разрез = "ВидСтруктурногоОтклонения" Тогда
		НадлежащийТип = Новый Массив;
		НадлежащийТип.Добавить(Тип("ПеречислениеСсылка.фин_ВидыСтруктурныхОтклонений"));
	ИначеЕсли Разрез = "СтруктурноеОтклонение" Тогда
		НадлежащийТип = Новый Массив;
		НадлежащийТип.Добавить(Тип("Булево"));
	ИначеЕсли Разрез = "ВидОтклонения" Тогда
		НадлежащийТип = Новый Массив;
		НадлежащийТип.Добавить(Тип("СправочникСсылка.фин_ВидыОтклоненийФактическихДанных"));
	ИначеЕсли Разрез = "ПричинаОтклоненияФактическихДанных" Тогда
		НадлежащийТип = Новый Массив;
		НадлежащийТип.Добавить(Тип("СправочникСсылка.фин_ПричиныОтклоненийФактическихДанных"));
	Иначе
		ПВХ = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(?(ТипЗнч(Разрез)=Тип("Строка"),Перечисления.фин_ФактическиеПоказателиБюджетирования[Разрез],Разрез));
		НадлежащийТип= ?(ПВХ=Неопределено,Новый ОписаниеТипов("Неопределено"),ПВХ.ТипЗначения.Типы());
	КонецЕсли;
КонецПроцедуры //УстановитьНадлежащийТип

//Функция ПолучитьОписаниеТиповДляРазрезаБюджетирования
//
Функция ПолучитьОписаниеТиповДляРазрезаБюджетирования(Разрез,ДляОтчетности=Ложь)  Экспорт
	НадлежащийТип = Новый Массив;
    УстановитьНадлежащийТип(Разрез,,НадлежащийТип,ДляОтчетности);
	Если Разрез = "Количество" ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Количество Тогда
		Квалификатор = Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Любой);
		мОписание = Новый ОписаниеТипов(НадлежащийТип,Квалификатор);
	ИначеЕсли Разрез = "Сумма" ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Сумма Тогда
		Квалификатор = Новый КвалификаторыЧисла(15,2,ДопустимыйЗнак.Любой);
		мОписание = Новый ОписаниеТипов(НадлежащийТип,Квалификатор);
	Иначе
		мОписание = Новый ОписаниеТипов(НадлежащийТип);
	КонецЕсли;
	Возврат мОписание;
КонецФункции //ПолучитьОписаниеТиповДляРазрезаБюджетирования


//Функция ПолучитьСтруктуруАвтовыбора
//
Функция ПолучитьСтруктуруИсточникаПоля(ИмяПоля) Экспорт
	СтруктураПоля = Новый Структура("Поле,Источник,Автовыбор","","",Ложь);
	ТекущееИмя = ИмяПоля;
	Если Найти(ИмяПоля,"АвтовыборПоТипу:")<>0 Тогда
		СтруктураПоля.Автовыбор = Истина;
		ТекущееИмя = Лев(ИмяПоля,Найти(ИмяПоля,"АвтовыборПоТипу:")-1)+Сред(ИмяПоля,Найти(ИмяПоля,"АвтовыборПоТипу:")+СтрДлина("АвтовыборПоТипу:"));
		Если Найти(ТекущееИмя,"{")<>0 Тогда
			ТекстТипа = Сред(ТекущееИмя,Найти(ТекущееИмя,"{")+1,Найти(ТекущееИмя,"}")-Найти(ТекущееИмя,"{")-1);
			СтруктураПоля.Вставить("ТипАвтовыбора",Новый ОписаниеТипов(ТекстТипа));
			ТекущееИмя = Лев(ТекущееИмя,Найти(ТекущееИмя,"{")-1);
		КонецЕсли;
	КонецЕсли;
	Если Найти(ТекущееИмя,":")<>0 Тогда
		СтруктураПоля.Источник = Лев(ТекущееИмя,Найти(ТекущееИмя,":")-1);
		ТекущееИмя = Сред(ТекущееИмя,Найти(ТекущееИмя,":")+1);
	КонецЕсли;
	СтруктураПоля.Поле = ТекущееИмя;
	Возврат СтруктураПоля;
КонецФункции //ПолучитьСтруктуруАвтовыбора

//Функция ПолучитьЗначениеПоПолю
//
Функция ПолучитьЗначениеПоПолю(ИмяПоля,Источник,Знач ОписаниеТипаИсточника=Неопределено,ПодчиненныйИсточник=Неопределено,РежимДвухИсточников=Ложь,Документ=Неопределено) Экспорт
	СтруктураИсточника = ПолучитьСтруктуруИсточникаПоля(ИмяПоля);
	Если СтруктураИсточника.Свойство("ТипАвтовыбора") Тогда
		ОписаниеТипаИсточника = СтруктураИсточника.ТипАвтовыбора;
	КонецЕсли;
	ИсточникТекущихЗначений = Источник;
	Если РежимДвухИсточников И СтруктураИсточника.Источник <>"" Тогда
		ИсточникТекущихЗначений = ПодчиненныйИсточник;
	ИначеЕсли СтруктураИсточника.Источник="" И Документ<>Неопределено Тогда
		ИсточникТекущихЗначений = Документ;
	КонецЕсли;
	Результат = Неопределено;
	Если НЕ СтруктураИсточника.Автовыбор Тогда
		Если НРег(СтруктураИсточника.Поле) = НРег("РассчитатьСуммуСНДС") Тогда
			Результат = ?(Документ=Неопределено,0,?(Документ.СуммаВключаетНДС,Источник.Сумма,Источник.Сумма+Источник.СуммаНДС));
		ИначеЕсли НРег(СтруктураИсточника.Поле) = НРег("РассчитатьСуммуБезНДС") Тогда
			Результат = ?(Документ=Неопределено,0,?(Документ.СуммаВключаетНДС,Источник.Сумма-Источник.СуммаНДС,Источник.Сумма));
		ИначеЕсли НРег(СтруктураИсточника.Поле) = НРег("РассчитатьКоличествоБазовое") Тогда
			Результат = ?(Источник.Коэффициент=0,Источник.Количество,Источник.Количество*Источник.Коэффициент);
		Иначе
			Результат = усд_ПроцедурыСогласованияДокументов.ПолучитьИсходноеЗначение(ИсточникТекущихЗначений,СтруктураИсточника.Поле); 
		КонецЕсли;
	ИначеЕсли ОписаниеТипаИсточника=Неопределено Тогда 
		Возврат Неопределено;
	Иначе
		ПолеИсточникаОсновное = СтруктураИсточника.Поле;
		Если Найти(ПолеИсточникаОсновное,".")<>0 Тогда
			ПолеИсточникаОсновное = Лев(СтруктураИсточника.Поле,Найти(СтруктураИсточника.Поле,".")-1);
		КонецЕсли;
		Для Инд = 1 По 3 Цикл
			Если ОписаниеТипаИсточника.ПривестиЗначение(ИсточникТекущихЗначений[ПолеИсточникаОсновное+Строка(Инд)])=ИсточникТекущихЗначений[ПолеИсточникаОсновное+Строка(Инд)] Тогда
				Результат = усд_ПроцедурыСогласованияДокументов.ПолучитьИсходноеЗначение(ИсточникТекущихЗначений,СтруктураИсточника.Поле,Строка(Инд)); 
				Прервать;
			ИначеЕсли ОписаниеТипаИсточника.ПривестиЗначение(ИсточникТекущихЗначений[ПолеИсточникаОсновное+Строка(Инд)])=фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустоеЗначениеРазреза("УправленческоеПодразделение") И ТипЗнч(ИсточникТекущихЗначений[ПолеИсточникаОсновное+Строка(Инд)])=Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
				Результат = усд_ПроцедурыСогласованияДокументов.ПолучитьИсходноеЗначение(ИсточникТекущихЗначений,СтруктураИсточника.Поле,Строка(Инд)); 
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ПодразделенияОрганизаций") И ОписаниеТипаИсточника<>Неопределено И ОписаниеТипаИсточника.ПривестиЗначение(Результат)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустоеЗначениеРазреза("УправленческоеПодразделение") Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение
			|ИЗ
			|	РегистрСведений."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
			|ГДЕ
			|	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации = &ПодразделениеОрганизации";
		
		Запрос.УстановитьПараметр("ПодразделениеОрганизации", Результат);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Результат = ВыборкаДетальныеЗаписи.Подразделение;
		Иначе
			Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустоеЗначениеРазреза("УправленческоеПодразделение");
		КонецЕсли;
	
	КонецЕсли;
	Возврат Результат;
КонецФункции //ПолучитьЗначениеПоПолю

//Функция СоздатьОписаниеТипаПоказателя
//
Функция СоздатьОписаниеТипаПоказателя(СтрокаНастройки) Экспорт
	ТипПоказателя 	=  СтрокаНастройки.ТипПоказателя;
	ИмяОбъекта 		=  СтрокаНастройки.Справочник;
	Если СтрокаНастройки.Трансформация И (НЕ СтрокаНастройки.ВариантДляТрансформации.Пустая()) И СтрокаНастройки.ВариантДляТрансформации.ВходящиеПоказатели.Количество()>0 Тогда
		ПерваяСтрока 	= СтрокаНастройки.ВариантДляТрансформации.ВходящиеПоказатели[0];
		ТипПоказателя 	=  ПерваяСтрока.ТипПоказателя;
		ИмяОбъекта 		=  ПерваяСтрока.Справочник;
	КонецЕсли;
	Если ТипПоказателя = Перечисления.фин_ТипыВходящихПоказателейБюджетирования.Числовой Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли ТипПоказателя = Перечисления.фин_ТипыВходящихПоказателейБюджетирования.Дата Тогда
		Возврат Новый ОписаниеТипов("Дата");
	ИначеЕсли ТипПоказателя = Перечисления.фин_ТипыВходящихПоказателейБюджетирования.Булево Тогда
		Возврат Новый ОписаниеТипов("Булево");
	ИначеЕсли ИмяОбъекта<>"" И ЗначениеЗаполнено(ТипПоказателя) Тогда
		Возврат Новый ОписаниеТипов(?(ТипПоказателя = Перечисления.фин_ТипыВходящихПоказателейБюджетирования.Справочник,"Справочник",?(ТипПоказателя = Перечисления.фин_ТипыВходящихПоказателейБюджетирования.ПланВидовРасчета,"ПланВидовРасчета",?(ТипПоказателя = Перечисления.фин_ТипыВходящихПоказателейБюджетирования.ПланСчетов,"ПланСчетов","Перечисление")))+"Ссылка."+ИмяОбъекта);
	Иначе
		Возврат Новый ОписаниеТипов("Неопределено");
	КонецЕсли;
КонецФункции

//Функция ПолучитьТаблицуПроводокПоПлануСчетовБюджетирования
//
Функция ПолучитьТаблицуПроводокПоПлануСчетовБюджетирования(Ссылка,ТекстБюджетнаяОперация,ПараметрыВременныхТаблиц=Неопределено,ТекстДляКурсовОперации=Неопределено,ТекстДляКурсовУпрУчета=Неопределено,РегистрКурсовВалют="КурсыВалют",ИспользоватьКурсыСценария=Ложь,ФактическиеДанные=Ложь,ВалютаДокумента=Неопределено,Сценарий=Неопределено,СценарийВалюта = Неопределено,РучнойУчетФактическихДанных=Ложь) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ВидСубконто_УправленческоеПодразделение",ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.ЦФО);
	Запрос.УстановитьПараметр("ВидСубконто_Проект",						ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Проекты);
	Запрос.УстановитьПараметр("ВидСубконто_Контрагент",					ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Контрагенты);
	Запрос.УстановитьПараметр("ВидСубконто_Номенклатура",				ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Номенклатура);
	Запрос.УстановитьПараметр("ВидСубконто_СтатьиОборотов",				ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.СтатьиОборотов);
	Запрос.УстановитьПараметр("ВалютаДокумента",						ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУпрУчета",							фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета"));
	Запрос.УстановитьПараметр("ВалютаРеглУчета",						фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета"));
	Запрос.УстановитьПараметр("ВалютаСценария",							СценарийВалюта);
	Запрос.УстановитьПараметр("Ссылка",									Ссылка);
	Запрос.УстановитьПараметр("Сценарий",								Сценарий);
	ТекстГруппировки = "";
	ТекстВременныхТаблиц = "";
	Если ПараметрыВременныхТаблиц<>Неопределено Тогда
		ТекстВременныхТаблиц = ПараметрыВременныхТаблиц.ТекстВременныхТаблиц;
		Запрос.УстановитьПараметр("ВТ",ПараметрыВременныхТаблиц.ТаблицаЗначений);
	КонецЕсли;
	ИспользоватьКурсыДокумента = (НЕ ФактическиеДанные) И ТипЗнч(Ссылка)=Тип("ДокументСсылка.фин_Бюджет") И Ссылка.ЗадаватьКурсыВалютВДокументе=Истина;
	СписокРазрезов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйМассивИменРазрезов");
	МаксимальноеКоличествоСубконто = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("МаксимальноеКоличествоСубконто");
	ТекстДляКурсовУпрУчета_ВТ = ТекстДляВременнойТаблицы(ТекстДляКурсовУпрУчета,"ТекстДляКурсовУпрУчета_ВТ","Дата");
	БюджетнаяОперация_ВТ = ТекстДляВременнойТаблицы(ТекстБюджетнаяОперация,"БюджетнаяОперация_ВТ","ФинансовыйПоказатель");
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =ТекстВременныхТаблиц+?(ТекстВременныхТаблиц="","","
	|;
	|")+БюджетнаяОперация_ВТ+?(ИспользоватьКурсыДокумента,"
	|;
	|ВЫБРАТЬ 
	|  &Сценарий КАК Сценарий,
	|  КурсыВалютДокумента.ПериодПланирования КАК Период,
	|  КурсыВалютДокумента.Валюта КАК Валюта,
	|  КурсыВалютДокумента.Курс КАК Курс,
	|  КурсыВалютДокумента.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВТ_КурсыБюджета
	|ИЗ Документ.фин_Бюджет.КурсыВалютДокумента КАК КурсыВалютДокумента
	|ГДЕ КурсыВалютДокумента.Ссылка = &Ссылка
	|","")+"
	|;
	|ВЫБРАТЬ
	|	Операции.Период КАК Период,
	|	Операции.ВалютаОперации КАК ВалютаОперации,
	|	Операции.Сумма КАК Сумма,"+?(ФактическиеДанные=Истина И РучнойУчетФактическихДанных=Ложь,"
	|	Операции.СуммаУпр КАК СуммаУпр,","")+"
	|	Операции.Количество КАК Количество,
	|	Операции.ДополнительныеРазрезы КАК ДополнительныеРазрезы,
	|	Операции.ФинансовыйПоказатель КАК ФинансовыйПоказатель,";
	Для Каждого Разрез Из СписокРазрезов Цикл
		Если Найти(Разрез,"Разрез")<>0 Тогда
			Продолжить;
		КонецЕсли;
		Запрос.Текст=Запрос.Текст+"
		|	Операции."+Разрез+" КАК "+Разрез+",";
	КонецЦикла;
	Запрос.Текст=Запрос.Текст+"
	|	ВЫБОР КОГДА Операции.ШаблонПроводок = ЗНАЧЕНИЕ(Справочник.фин_ШаблоныПроводокПоСчетамБюджетирования.ПустаяСсылка) ТОГДА НастройкаПроводок.ШаблонПроводок ИНАЧЕ Операции.ШаблонПроводок КОНЕЦ КАК ШаблонПроводок
	|ПОМЕСТИТЬ ВТ_ПредварительныйРеестрОпераций
	|ИЗ БюджетнаяОперация_ВТ КАК Операции
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_НастройкаПроводокДляФинансовыхПоказателей КАК НастройкаПроводок
	|		ПО Операции.ФинансовыйПоказатель = НастройкаПроводок.ФинансовыйПоказатель
	|			И Операции.ШаблонПроводок = ЗНАЧЕНИЕ(Справочник.фин_ШаблоныПроводокПоСчетамБюджетирования.ПустаяСсылка)
	|ГДЕ Операции.ШаблонПроводок <> ЗНАЧЕНИЕ(Справочник.фин_ШаблоныПроводокПоСчетамБюджетирования.ПустаяСсылка) ИЛИ НЕ НастройкаПроводок.ШаблонПроводок ЕСТЬ NULL
   |;	
   |ВЫБРАТЬ
	|	Операции.Период КАК Период,
	|	Операции.ВалютаОперации КАК ВалютаОперации,
	|	Операции.Сумма КАК Сумма,"+?(ФактическиеДанные=Истина И РучнойУчетФактическихДанных=Ложь,"
	|	Операции.СуммаУпр КАК СуммаУпр,","")+"
	|	Операции.Количество КАК Количество,
	|	Операции.ДополнительныеРазрезы КАК ДополнительныеРазрезы,
	|	Операции.ФинансовыйПоказатель КАК ФинансовыйПоказатель,";
	Для Каждого Разрез Из СписокРазрезов Цикл
		Если Найти(Разрез,"Разрез")<>0 Тогда
			Продолжить;
		КонецЕсли;
		Запрос.Текст=Запрос.Текст+"
		|	Операции."+Разрез+" КАК "+Разрез+",";
	КонецЦикла;
	Запрос.Текст=Запрос.Текст+"
	|	ТаблицаПроводок.СубконтоДт1 КАК ФиксированноеСубконтоДт1,
	|	ТаблицаПроводок.СубконтоДт2 КАК ФиксированноеСубконтоДт2,
	|	ТаблицаПроводок.СубконтоДт3 КАК ФиксированноеСубконтоДт3,
	|	ТаблицаПроводок.СубконтоДт4 КАК ФиксированноеСубконтоДт4,
	|	ТаблицаПроводок.СубконтоДт5 КАК ФиксированноеСубконтоДт5,
	|	ТаблицаПроводок.СубконтоКт1 КАК ФиксированноеСубконтоКт1,
	|	ТаблицаПроводок.СубконтоКт2 КАК ФиксированноеСубконтоКт2,
	|	ТаблицаПроводок.СубконтоКт3 КАК ФиксированноеСубконтоКт3,
	|	ТаблицаПроводок.СубконтоКт4 КАК ФиксированноеСубконтоКт4,
	|	ТаблицаПроводок.СубконтоКт5 КАК ФиксированноеСубконтоКт5,
	|	ТаблицаПроводок.КоэффициентДляСуммы КАК КоэффициентДляСуммы,
	|	ТаблицаПроводок.КоэффициентДляКоличества КАК КоэффициентДляКоличества,
	|	ТаблицаПроводок.СчетДт КАК СчетДт,
	|	ТаблицаПроводок.СчетКт КАК СчетКт
	|ПОМЕСТИТЬ ВТ_РеестрОпераций
	|ИЗ ВТ_ПредварительныйРеестрОпераций КАК Операции
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ШаблоныПроводокПоСчетамБюджетирования.ШаблоныПроводок КАК ТаблицаПроводок
	|		ПО Операции.ШаблонПроводок = ТаблицаПроводок.Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетДт,
	|	СчетКт";
	Если ФактическиеДанные<>Истина ИЛИ РучнойУчетФактическихДанных=Истина Тогда
	   Запрос.Текст = Запрос.Текст+",
	   |	Период,
	   |	ВалютаОперации";
   КонецЕсли;
   Запрос.Текст=Запрос.Текст+"
   |;
   |УНИЧТОЖИТЬ БюджетнаяОперация_ВТ
   |;
   |ВЫБРАТЬ ПЕРВЫЕ 1
   | * 
   |ИЗ ВТ_РеестрОпераций";
   Результат = Запрос.Выполнить();
   Если Результат.Пустой() Тогда
	   	ТЗ = Результат.Выгрузить();
		ТЗ.Колонки.Добавить("ВалютнаяСуммаДт");
		ТЗ.Колонки.Добавить("ВалютнаяСуммаКт");
		ТЗ.Колонки.Добавить("КоличествоДт");
		ТЗ.Колонки.Добавить("КоличествоКт");
		Если НЕ (ФактическиеДанные=Истина И РучнойУчетФактическихДанных=Ложь) Тогда
			ТЗ.Колонки.Добавить("СуммаУпр");
		КонецЕсли;
		Если НЕ ФактическиеДанные Тогда
			ТЗ.Колонки.Добавить("СуммаСценария");
		КонецЕсли;
	    Возврат ТЗ;
   КонецЕсли;
   
	ТекстЗапроса="ВЫБРАТЬ
	|			Бюджетирование.Ссылка КАК Счет,
	|			Бюджетирование.Валютный КАК Валютный,
	|			Бюджетирование.Количественный КАК Количественный,
	|			БюджетированиеВидыСубконто1.ВидСубконто КАК ВидСубконто1,
	|			БюджетированиеВидыСубконто2.ВидСубконто КАК ВидСубконто2,
	|			БюджетированиеВидыСубконто3.ВидСубконто КАК ВидСубконто3,
	|			БюджетированиеВидыСубконто4.ВидСубконто КАК ВидСубконто4,
	|			БюджетированиеВидыСубконто5.ВидСубконто КАК ВидСубконто5,
	|			ДопРазрезы1.Измерение КАК Измерение1,
	|			ДопРазрезы2.Измерение КАК Измерение2,
	|			ДопРазрезы3.Измерение КАК Измерение3,
	|			ДопРазрезы4.Измерение КАК Измерение4,
	|			ДопРазрезы5.Измерение КАК Измерение5,
	|			БюджетированиеВидыСубконто1.ВидСубконто.Наименование КАК НаименованиеСубконто1,
	|			БюджетированиеВидыСубконто2.ВидСубконто.Наименование КАК НаименованиеСубконто2,
	|			БюджетированиеВидыСубконто3.ВидСубконто.Наименование КАК НаименованиеСубконто3,
	|			БюджетированиеВидыСубконто4.ВидСубконто.Наименование КАК НаименованиеСубконто4,
	|			БюджетированиеВидыСубконто5.ВидСубконто.Наименование КАК НаименованиеСубконто5
	|ПОМЕСТИТЬ ВТ_ДанныеСчет
	|		ИЗ
	|			ПланСчетов.фин_Бюджетирование КАК Бюджетирование
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто1
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто1.Ссылка И (БюджетированиеВидыСубконто1.НомерСтроки = 1)
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК ДопРазрезы1
	|					ПО БюджетированиеВидыСубконто1.ВидСубконто = ДопРазрезы1.Разрез
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто2
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто2.Ссылка И (БюджетированиеВидыСубконто2.НомерСтроки = 2)
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК ДопРазрезы2
	|					ПО БюджетированиеВидыСубконто2.ВидСубконто = ДопРазрезы2.Разрез
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто3
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто3.Ссылка И (БюджетированиеВидыСубконто3.НомерСтроки = 3)
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК ДопРазрезы3
	|					ПО БюджетированиеВидыСубконто3.ВидСубконто = ДопРазрезы3.Разрез
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто4
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто4.Ссылка И (БюджетированиеВидыСубконто4.НомерСтроки = 4)
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК ДопРазрезы4
	|					ПО БюджетированиеВидыСубконто4.ВидСубконто = ДопРазрезы4.Разрез
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто5
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто5.Ссылка И (БюджетированиеВидыСубконто5.НомерСтроки = 5)
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК ДопРазрезы5
	|					ПО БюджетированиеВидыСубконто5.ВидСубконто = ДопРазрезы5.Разрез
	|ИНДЕКСИРОВАТЬ ПО Счет
	|;
	|"+?(ФактическиеДанные<>Истина ИЛИ РучнойУчетФактическихДанных=Истина,ТекстДляКурсовУпрУчета_ВТ+"
	| ;
	| ВЫБРАТЬ
	|	Максимум(ВЫБОР КОГДА КурсыВнутр.Валюта = &ВалютаСценария ТОГДА КурсыВнутр.Период ИНАЧЕ ДАТАВРЕМЯ(1,1,1) КОНЕЦ) КАК ПериодСценария,
	|	Максимум(ВЫБОР КОГДА КурсыВнутр.Валюта = &ВалютаУпрУчета ТОГДА КурсыВнутр.Период ИНАЧЕ ДАТАВРЕМЯ(1,1,1) КОНЕЦ) КАК ПериодУпр,
	|	Обороты.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборота
	|	ИЗ "+?(ИспользоватьКурсыДокумента,"ВТ_КурсыБюджета","РегистрСведений."+РегистрКурсовВалют)+" КАК КурсыВнутр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекстДляКурсовУпрУчета_ВТ КАК Обороты
	|			ПО Обороты.Дата >= КурсыВнутр.Период
	|				И (КурсыВнутр.Валюта = &ВалютаСценария ИЛИ КурсыВнутр.Валюта = &ВалютаУпрУчета)
	|			"+?(ИспользоватьКурсыСценария,"
	|				И (КурсыВнутр.Сценарий=&Сценарий)","")+"
	|СГРУППИРОВАТЬ ПО Обороты.Дата
	|ИНДЕКСИРОВАТЬ ПО ПериодУпр,ПериодСценария
	|;
	|","")+?(ФактическиеДанные<>Истина ИЛИ РучнойУчетФактическихДанных=Истина,"
	|
	|ВЫБРАТЬ 
	|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
	|	КурсыВалют.Курс КАК Курс, 
	|	КурсыВалют.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВТ_КурсыСценария
	|ИЗ "+?(ИспользоватьКурсыДокумента,"ВТ_КурсыБюджета","РегистрСведений."+РегистрКурсовВалют)+" КАК КурсыВалют
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборота КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
	|	ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.ПериодСценария
	|ГДЕ КурсыВалют.Валюта = &ВалютаСценария
	|"+?(ИспользоватьКурсыСценария,"
	|	И КурсыВалют.Сценарий=&Сценарий",
	"")  //ФактическиеДанные=Ложь 
	+"
	|ИНДЕКСИРОВАТЬ ПО Дата
	|;
	|ВЫБРАТЬ
	|	Максимум(КурсыВнутр.Период) КАК Период,
	|	Обороты.Дата КАК Дата,
	|	КурсыВнутр.Валюта КАК Валюта
	|ПОМЕСТИТЬ ВТ_ПериодПоследнейЗаписиКурсаВалют
	|ИЗ "+?(ИспользоватьКурсыДокумента,"ВТ_КурсыБюджета","РегистрСведений."+РегистрКурсовВалют)+" КАК КурсыВнутр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+ТекстДляКурсовОперации+") КАК Обороты
	|			ПО Обороты.Дата >= КурсыВнутр.Период
	|				И КурсыВнутр.Валюта = Обороты.ВалютаДок
	|			"+?(ИспользоватьКурсыСценария,"
	|				И (КурсыВнутр.Сценарий=&Сценарий)","")+"
	|СГРУППИРОВАТЬ ПО Обороты.Дата, КурсыВнутр.Валюта
	|ИНДЕКСИРОВАТЬ ПО Валюта,Период
	|;
	|ВЫБРАТЬ 
	|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
	|	КурсыВалют.Курс КАК Курс, 
	|	КурсыВалют.Кратность КАК Кратность,
	|	КурсыВалют.Валюта КАК Валюта
	|ПОМЕСТИТЬ ВТ_КурсыОперации
	|ИЗ "+?(ИспользоватьКурсыДокумента,"ВТ_КурсыБюджета","РегистрСведений."+РегистрКурсовВалют)+" КАК КурсыВалют
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодПоследнейЗаписиКурсаВалют КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
	|	ПО КурсыВалют.Валюта = ПериодПоследнейЗаписиКурсаНаДатуОборота.Валюта И
	|		КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период 
	|"+?(ИспользоватьКурсыСценария,"
	|	ГДЕ КурсыВалют.Сценарий=&Сценарий","")+?(ИспользоватьКурсыДокумента,"
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Обороты.Дата,
	|   МАКСИМУМ(1),
	|   МАКСИМУМ(1),
	|   МАКСИМУМ(&ВалютаРеглУчета)
	|ИЗ ("+ТекстДляКурсовОперации+") КАК Обороты
	|СГРУППИРОВАТЬ ПО Дата
	|","")+"
	|ИНДЕКСИРОВАТЬ ПО Дата,Валюта
	|;
	|ВЫБРАТЬ 
	|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
	|	КурсыВалют.Курс КАК Курс, 
	|	КурсыВалют.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВТ_КурсыУпрУчета
	|ИЗ "+?(ИспользоватьКурсыДокумента,"ВТ_КурсыБюджета","РегистрСведений."+РегистрКурсовВалют)+" КАК КурсыВалют
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборота КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
	|	ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.ПериодУпр
	|ГДЕ КурсыВалют.Валюта = &ВалютаУпрУчета
	|"+?(ИспользоватьКурсыСценария,"
	|	И КурсыВалют.Сценарий=&Сценарий","")+"
	|ИНДЕКСИРОВАТЬ ПО Дата
	|;", // ФактическиеДанные<>Истина ИЛИ РучнойУчетФактическихДанных=Истина
	"")+"
	|ВЫБРАТЬ
	|БюджетнаяОперация.Период КАК Период,
	|БюджетнаяОперация.ФиксированноеСубконтоДт1 КАК ФиксированноеСубконтоДт1,
	|БюджетнаяОперация.ФиксированноеСубконтоДт2 КАК ФиксированноеСубконтоДт2,
	|БюджетнаяОперация.ФиксированноеСубконтоДт3 КАК ФиксированноеСубконтоДт3,
	|БюджетнаяОперация.ФиксированноеСубконтоДт4 КАК ФиксированноеСубконтоДт4,
	|БюджетнаяОперация.ФиксированноеСубконтоДт5 КАК ФиксированноеСубконтоДт5,
	|БюджетнаяОперация.ФиксированноеСубконтоКт1 КАК ФиксированноеСубконтоКт1,
	|БюджетнаяОперация.ФиксированноеСубконтоКт2 КАК ФиксированноеСубконтоКт2,
	|БюджетнаяОперация.ФиксированноеСубконтоКт3 КАК ФиксированноеСубконтоКт3,
	|БюджетнаяОперация.ФиксированноеСубконтоКт4 КАК ФиксированноеСубконтоКт4,
	|БюджетнаяОперация.ФиксированноеСубконтоКт5 КАК ФиксированноеСубконтоКт5,
	|ДанныеСчетДт.Счет КАК СчетДт,";
	Для Инд = 1 По МаксимальноеКоличествоСубконто Цикл
		ТекстДт="
		|ВЫБОР 
		|	КОГДА ДанныеСчетДт.ВидСубконто1 = &ВидСубконто_СтатьиОборотов ТОГДА БюджетнаяОперация.ФинансовыйПоказатель";
		ТекстКт = "
		|ВЫБОР 
		|	КОГДА ДанныеСчетКт.ВидСубконто1 = &ВидСубконто_СтатьиОборотов ТОГДА БюджетнаяОперация.ФинансовыйПоказатель";
		Для Каждого Разрез Из СписокРазрезов Цикл
			Имя = Разрез;
			Если Найти(Имя,"Разрез")=0 Тогда
				ТекстДт=ТекстДт+"
				|  КОГДА ДанныеСчетДт.ВидСубконто"+Строка(Инд)+" = &ВидСубконто_"+Имя+" ТОГДА БюджетнаяОперация."+Имя;
				ТекстКт=ТекстКт+"
				|  КОГДА ДанныеСчетКт.ВидСубконто"+Строка(Инд)+" = &ВидСубконто_"+Имя+" ТОГДА БюджетнаяОперация."+Имя;
			Иначе
				ТекстДт=ТекстДт+"
				|  КОГДА ДанныеСчетДт.Измерение"+Строка(Инд)+" = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования."+Имя+") ТОГДА КлассификаторРазрезов."+Имя;
				ТекстКт=ТекстКт+"
				|  КОГДА ДанныеСчетКт.Измерение"+Строка(Инд)+" = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования."+Имя+") ТОГДА КлассификаторРазрезов."+Имя;
			КонецЕсли;
		КонецЦикла;
		ТекстДт=ТекстДт+"
		|	ИНАЧЕ NULL КОНЕЦ";
		ТекстКт=ТекстКт+"
		|	ИНАЧЕ NULL КОНЕЦ";
		ТекстЗапроса=ТекстЗапроса+"
		|"+ТекстДт+" КАК СубконтоДт"+Строка(Инд)+",
		|"+ТекстКт+" КАК СубконтоКт"+Строка(Инд)+",";
		ТекстГруппировки = ТекстГруппировки+"
		|"+ТекстДт+",
		|"+ТекстКт+",";
	КонецЦикла;
    ТекстЗапроса = ТекстЗапроса+"
	|ДанныеСчетКт.Счет КАК СчетКт,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.Валютный ТОГДА БюджетнаяОперация.ВалютаОперации 
	|	ИНАЧЕ NULL КОНЕЦ КАК ВалютаДт,
	|СУММА(ВЫБОР 
	|	КОГДА ДанныеСчетДт.Валютный ТОГДА БюджетнаяОперация.Сумма * БюджетнаяОперация.КоэффициентДляСуммы 
	|	ИНАЧЕ NULL КОНЕЦ) КАК ВалютнаяСуммаДт,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.Валютный ТОГДА БюджетнаяОперация.ВалютаОперации 
	|	ИНАЧЕ NULL КОНЕЦ КАК ВалютаКт,
	|СУММА(ВЫБОР 
	|	КОГДА ДанныеСчетКт.Валютный ТОГДА БюджетнаяОперация.Сумма * БюджетнаяОперация.КоэффициентДляСуммы 
	|	ИНАЧЕ NULL КОНЕЦ) КАК ВалютнаяСуммаКт,
	|БюджетнаяОперация.ФинансовыйПоказатель КАК ФинансовыйПоказатель,
	|СУММА(ВЫБОР 
	|	КОГДА ДанныеСчетДт.Количественный ТОГДА БюджетнаяОперация.Количество * БюджетнаяОперация.КоэффициентДляКоличества 
	|	ИНАЧЕ NULL КОНЕЦ) КАК КоличествоДт,
	|СУММА(ВЫБОР 
	|	КОГДА ДанныеСчетКт.Количественный ТОГДА БюджетнаяОперация.Количество * БюджетнаяОперация.КоэффициентДляКоличества 
	|	ИНАЧЕ NULL КОНЕЦ) КАК КоличествоКт,";
	ТекстЗапроса=ТекстЗапроса+?(ФактическиеДанные=Истина И РучнойУчетФактическихДанных=Ложь,"СУММА(БюджетнаяОперация.СуммаУпр*БюджетнаяОперация.КоэффициентДляСуммы) КАК СуммаУпр","
	|СУММА(ВЫРАЗИТЬ(ВЫБОР 
	|	КОГДА ВалютаОперации = &ВалютаУпрУчета ТОГДА БюджетнаяОперация.Сумма * БюджетнаяОперация.КоэффициентДляСуммы 
	|	КОГДА ВалютаОперации <> &ВалютаУпрУчета И КурсыОперации.Курс <> 0 И КурсыУпрУчета.Курс <> 0 
	|		ТОГДА БюджетнаяОперация.Сумма * БюджетнаяОперация.КоэффициентДляСуммы * КурсыОперации.Курс 
	|			* КурсыУпрУчета.Кратность / (КурсыУпрУчета.Курс * КурсыОперации.Кратность) 
	|	ИНАЧЕ 0 КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаУпр")+?(ФактическиеДанные=Истина,"",",
	|СУММА(ВЫРАЗИТЬ(ВЫБОР 
	|	КОГДА ВалютаОперации = &ВалютаСценария ТОГДА БюджетнаяОперация.Сумма * БюджетнаяОперация.КоэффициентДляСуммы 
	|	КОГДА ВалютаОперации <> &ВалютаСценария И КурсыОперации.Курс <> 0 И КурсыСценария.Курс <> 0 
	|		ТОГДА БюджетнаяОперация.Сумма * БюджетнаяОперация.КоэффициентДляСуммы * КурсыОперации.Курс 
	|			* КурсыСценария.Кратность / (КурсыСценария.Курс * КурсыОперации.Кратность) 
	|	ИНАЧЕ 0 КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаСценария");
	ТекстЗапроса=ТекстЗапроса+"
	|ИЗ ВТ_РеестрОпераций КАК БюджетнаяОперация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеСчет КАК ДанныеСчетДт
	|		ПО БюджетнаяОперация.СчетДт = ДанныеСчетДт.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеСчет КАК ДанныеСчетКт
	|		ПО БюджетнаяОперация.СчетКт = ДанныеСчетКт.Счет";
	Если ФактическиеДанные<>Истина ИЛИ РучнойУчетФактическихДанных=Истина Тогда
		
		Если ФактическиеДанные=Ложь Тогда
			ТекстЗапроса = ТекстЗапроса+"
			//  Курсы валюты сценария планирования	
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыСценария КАК КурсыСценария
			|	ПО КурсыСценария.Дата = БюджетнаяОперация.Период";
		КонецЕсли;
		// Курсы документа 
		ТекстЗапроса = ТекстЗапроса+"
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыОперации КАК КурсыОперации
		|	ПО КурсыОперации.Дата = БюджетнаяОперация.Период И
		|   	КурсыОперации.Валюта = БюджетнаяОперация.ВалютаОперации
		// Курсы валюты управленческого учета
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыУпрУчета КАК КурсыУпрУчета
		|	ПО КурсыУпрУчета.Дата = БюджетнаяОперация.Период";
	КонецЕсли;
	ТекстЗапроса=ТекстЗапроса+"
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_КлассификаторНаборовДополнительныхРазрезов КАК КлассификаторРазрезов
	|		ПО БюджетнаяОперация.ДополнительныеРазрезы = КлассификаторРазрезов.Ссылка
	|СГРУППИРОВАТЬ ПО
	|БюджетнаяОперация.Период,"+ТекстГруппировки+"
	|ДанныеСчетДт.Счет,
	|ДанныеСчетКт.Счет,
	|БюджетнаяОперация.ФиксированноеСубконтоДт1,
	|БюджетнаяОперация.ФиксированноеСубконтоДт2,
	|БюджетнаяОперация.ФиксированноеСубконтоДт3,
	|БюджетнаяОперация.ФиксированноеСубконтоДт4,
	|БюджетнаяОперация.ФиксированноеСубконтоДт5,
	|БюджетнаяОперация.ФиксированноеСубконтоКт1,
	|БюджетнаяОперация.ФиксированноеСубконтоКт2,
	|БюджетнаяОперация.ФиксированноеСубконтоКт3,
	|БюджетнаяОперация.ФиксированноеСубконтоКт4,
	|БюджетнаяОперация.ФиксированноеСубконтоКт5,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.Валютный ТОГДА БюджетнаяОперация.ВалютаОперации 
	|	ИНАЧЕ NULL КОНЕЦ,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.Валютный ТОГДА БюджетнаяОперация.ВалютаОперации 
	|	ИНАЧЕ NULL КОНЕЦ,
	|БюджетнаяОперация.ФинансовыйПоказатель
	|УПОРЯДОЧИТЬ ПО Период,ФинансовыйПоказатель";
	
	Запрос.Текст=ТекстЗапроса;
	
	
	ТабПроводокДокумента=Запрос.Выполнить().Выгрузить();
	МассивСторон = Новый Массив;
	МассивСторон.Добавить("Дт");
	МассивСторон.Добавить("Кт");
	Для Каждого СтрокаПроводок Из ТабПроводокДокумента Цикл
		Для Каждого Сторона Из МассивСторон Цикл
			Для Инд = 1 По МаксимальноеКоличествоСубконто Цикл
				Если ЗначениеЗаполнено(СтрокаПроводок["ФиксированноеСубконто"+Сторона+Строка(Инд)]) Тогда
					СтрокаПроводок["Субконто"+Сторона+Строка(Инд)] = СтрокаПроводок["ФиксированноеСубконто"+Сторона+Строка(Инд)];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТабПроводокДокумента;
КонецФункции //ПолучитьТаблицуПроводокПоПлануСчетовБюджетирования

//Функция ПолучитьТаблицуДополнительныхПроводокПоПлануСчетовБюджетирования
//
Функция ПолучитьТаблицуДополнительныхПроводокПоПлануСчетовБюджетирования(Ссылка,ТекстБюджетнаяОперация,ТекстДляКурсовОперации=Неопределено,ТекстДляКурсовУпрУчета=Неопределено,РегистрКурсовВалют="КурсыВалют",ИспользоватьКурсыСценария=Ложь,ФактическиеДанные=Ложь,ВалютаДокумента=Неопределено,Сценарий=Неопределено,СценарийВалюта = Неопределено,РучнойУчетФактическихДанных=Ложь) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ВидСубконто_ЦФО",			ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.ЦФО);
	Запрос.УстановитьПараметр("ВидСубконто_Проекты",		ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Проекты);
	Запрос.УстановитьПараметр("ВидСубконто_Контрагенты",	ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Контрагенты);
	Запрос.УстановитьПараметр("ВидСубконто_Номенклатура",	ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Номенклатура);
	Запрос.УстановитьПараметр("ВидСубконто_СтатьиОборотов",	ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.СтатьиОборотов);
		ТекстБюджетнаяОперация="
		             |ВЫБРАТЬ
		             |	ВТ_ДанныеДокумента.Сценарий,
		             |	ВТ_ДанныеДокумента.Период,
		             |	ВТ_ДанныеДокумента.ВалютаОперации,
		             |	ВТ_ДанныеДокумента.ФинансовыйПоказатель,
		             |	ВТ_ДанныеДокумента.ВалютаДокумента,
		             |	ВТ_ДанныеДокумента.Количество,
		             |	ВТ_ДанныеДокумента.Сумма,
		             |	ВТ_ДанныеДокумента.СчетДт,
		             |	ВТ_ДанныеДокумента.СчетКт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Кт)
		             |			ТОГДА ВТ_ДанныеДокумента.УправленческоеПодразделение
		             |		КОГДА НаборыРазрезов.ОтборУправленческоеПодразделение = ИСТИНА
		             |			ТОГДА НаборыРазрезов.УправленческоеПодразделение
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК УправленческоеПодразделениеДт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Дт)
		             |			ТОГДА ВТ_ДанныеДокумента.УправленческоеПодразделение
		             |		КОГДА НаборыРазрезов.ОтборУправленческоеПодразделение = ИСТИНА
		             |			ТОГДА НаборыРазрезов.УправленческоеПодразделение
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК УправленческоеПодразделениеКт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Кт)
		             |			ТОГДА ВТ_ДанныеДокумента.Проект
		             |		КОГДА НаборыРазрезов.ОтборПроект = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Проект
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК ПроектДт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Дт)
		             |			ТОГДА ВТ_ДанныеДокумента.Проект
		             |		КОГДА НаборыРазрезов.ОтборПроект = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Проект
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК ПроектКт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Кт)
		             |			ТОГДА ВТ_ДанныеДокумента.Контрагент
		             |		КОГДА НаборыРазрезов.ОтборКонтрагент = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Контрагент
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК КонтрагентДт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Дт)
		             |			ТОГДА ВТ_ДанныеДокумента.Контрагент
		             |		КОГДА НаборыРазрезов.ОтборКонтрагент = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Контрагент
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК КонтрагентКт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Кт)
		             |			ТОГДА ВТ_ДанныеДокумента.Номенклатура
		             |		КОГДА НаборыРазрезов.ОтборНоменклатура = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Номенклатура
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК НоменклатураДт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Дт)
		             |			ТОГДА ВТ_ДанныеДокумента.Номенклатура
		             |		КОГДА НаборыРазрезов.ОтборНоменклатура = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Номенклатура
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК НоменклатураКт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Кт)
		             |			ТОГДА КлассификаторРазрезов.Разрез1
		             |		КОГДА НаборыРазрезов.ОтборРазрез1 = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Разрез1
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК Разрез1Дт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Дт)
		             |			ТОГДА КлассификаторРазрезов.Разрез1
		             |		КОГДА НаборыРазрезов.ОтборРазрез1 = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Разрез1
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК Разрез1Кт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Кт)
		             |			ТОГДА КлассификаторРазрезов.Разрез2
		             |		КОГДА НаборыРазрезов.ОтборРазрез2 = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Разрез2
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК Разрез2Дт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Дт)
		             |			ТОГДА КлассификаторРазрезов.Разрез2
		             |		КОГДА НаборыРазрезов.ОтборРазрез2 = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Разрез2
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК Разрез2Кт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Кт)
		             |			ТОГДА КлассификаторРазрезов.Разрез3
		             |		КОГДА НаборыРазрезов.ОтборРазрез3 = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Разрез3
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК Разрез3Дт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Дт)
		             |			ТОГДА КлассификаторРазрезов.Разрез3
		             |		КОГДА НаборыРазрезов.ОтборРазрез3 = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Разрез3
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК Разрез3Кт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Кт)
		             |			ТОГДА КлассификаторРазрезов.Разрез4
		             |		КОГДА НаборыРазрезов.ОтборРазрез4 = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Разрез4
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК Разрез4Дт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Дт)
		             |			ТОГДА КлассификаторРазрезов.Разрез4
		             |		КОГДА НаборыРазрезов.ОтборРазрез4 = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Разрез4
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК Разрез4Кт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Кт)
		             |			ТОГДА КлассификаторРазрезов.Разрез5
		             |		КОГДА НаборыРазрезов.ОтборРазрез5 = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Разрез5
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК Разрез5Дт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Дт)
		             |			ТОГДА КлассификаторРазрезов.Разрез5
		             |		КОГДА НаборыРазрезов.ОтборРазрез5 = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Разрез5
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК Разрез5Кт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Кт)
		             |			ТОГДА КлассификаторРазрезов.Разрез6
		             |		КОГДА НаборыРазрезов.ОтборРазрез6 = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Разрез6
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК Разрез6Дт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Дт)
		             |			ТОГДА КлассификаторРазрезов.Разрез6
		             |		КОГДА НаборыРазрезов.ОтборРазрез6 = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Разрез6
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК Разрез6Кт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Кт)
		             |			ТОГДА КлассификаторРазрезов.Разрез7
		             |		КОГДА НаборыРазрезов.ОтборРазрез7 = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Разрез7
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК Разрез7Дт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Дт)
		             |			ТОГДА КлассификаторРазрезов.Разрез7
		             |		КОГДА НаборыРазрезов.ОтборРазрез7 = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Разрез7
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК Разрез7Кт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Кт)
		             |			ТОГДА КлассификаторРазрезов.Разрез8
		             |		КОГДА НаборыРазрезов.ОтборРазрез8 = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Разрез8
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК Разрез8Дт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Дт)
		             |			ТОГДА КлассификаторРазрезов.Разрез8
		             |		КОГДА НаборыРазрезов.ОтборРазрез8 = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Разрез8
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК Разрез8Кт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Кт)
		             |			ТОГДА КлассификаторРазрезов.Разрез9
		             |		КОГДА НаборыРазрезов.ОтборРазрез9 = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Разрез9
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК Разрез9Дт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Дт)
		             |			ТОГДА КлассификаторРазрезов.Разрез9
		             |		КОГДА НаборыРазрезов.ОтборРазрез9 = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Разрез9
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК Разрез9Кт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Кт)
		             |			ТОГДА КлассификаторРазрезов.Разрез10
		             |		КОГДА НаборыРазрезов.ОтборРазрез10 = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Разрез10
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК Разрез10Дт,
		             |	ВЫБОР
		             |		КОГДА ВТ_ДанныеДокумента.СторонаПроводкиКор = ЗНАЧЕНИЕ(Перечисление.фин_СтороныПроводки.Дт)
		             |			ТОГДА КлассификаторРазрезов.Разрез10
		             |		КОГДА НаборыРазрезов.ОтборРазрез10 = ИСТИНА
		             |			ТОГДА НаборыРазрезов.Разрез10
		             |		ИНАЧЕ NULL
		             |	КОНЕЦ КАК Разрез10Кт
		             |ИЗ
		             |	("+ТекстБюджетнаяОперация+") КАК ВТ_ДанныеДокумента
					 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_НаборыРазрезовПоЗависимостям КАК НаборыРазрезов
					 |		ПО ВТ_ДанныеДокумента.АналитикаКор = НаборыРазрезов.Ссылка
					 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_КлассификаторНаборовДополнительныхРазрезов КАК КлассификаторРазрезов
					 |		ПО ВТ_ДанныеДокумента.ДополнительныеРазрезы = КлассификаторРазрезов.Ссылка";
	ТекстЗапроса="
	|ВЫБРАТЬ
	|БюджетнаяОперация.Период КАК Период,
	|ДанныеСчетДт.Счет КАК СчетДт,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.ВидСубконто1 = &ВидСубконто_ЦФО ТОГДА БюджетнаяОперация.УправленческоеПодразделениеДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто1 = &ВидСубконто_Проекты ТОГДА БюджетнаяОперация.ПроектДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто1 = &ВидСубконто_Контрагенты ТОГДА БюджетнаяОперация.КонтрагентДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто1 = &ВидСубконто_Номенклатура ТОГДА БюджетнаяОперация.НоменклатураДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто1 = &ВидСубконто_СтатьиОборотов ТОГДА БюджетнаяОперация.ФинансовыйПоказатель 
	|	КОГДА ДанныеСчетДт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез1) ТОГДА БюджетнаяОперация.Разрез1Дт
	|	КОГДА ДанныеСчетДт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез2) ТОГДА БюджетнаяОперация.Разрез2Дт
	|	КОГДА ДанныеСчетДт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез3) ТОГДА БюджетнаяОперация.Разрез3Дт
	|	КОГДА ДанныеСчетДт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез4) ТОГДА БюджетнаяОперация.Разрез4Дт
	|	КОГДА ДанныеСчетДт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез5) ТОГДА БюджетнаяОперация.Разрез5Дт
	|	КОГДА ДанныеСчетДт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез6) ТОГДА БюджетнаяОперация.Разрез6Дт
	|	КОГДА ДанныеСчетДт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез7) ТОГДА БюджетнаяОперация.Разрез7Дт
	|	КОГДА ДанныеСчетДт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез8) ТОГДА БюджетнаяОперация.Разрез8Дт
	|	КОГДА ДанныеСчетДт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез9) ТОГДА БюджетнаяОперация.Разрез9Дт
	|	КОГДА ДанныеСчетДт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез10) ТОГДА БюджетнаяОперация.Разрез10Дт
	|	ИНАЧЕ NULL КОНЕЦ КАК СубконтоДт1,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.ВидСубконто2 = &ВидСубконто_ЦФО ТОГДА БюджетнаяОперация.УправленческоеПодразделениеДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто2 = &ВидСубконто_Проекты ТОГДА БюджетнаяОперация.ПроектДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто2 = &ВидСубконто_Контрагенты ТОГДА БюджетнаяОперация.КонтрагентДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто2 = &ВидСубконто_Номенклатура ТОГДА БюджетнаяОперация.НоменклатураДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто2 = &ВидСубконто_СтатьиОборотов ТОГДА БюджетнаяОперация.ФинансовыйПоказатель 
	|	КОГДА ДанныеСчетДт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез1) ТОГДА БюджетнаяОперация.Разрез1Дт
	|	КОГДА ДанныеСчетДт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез2) ТОГДА БюджетнаяОперация.Разрез2Дт
	|	КОГДА ДанныеСчетДт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез3) ТОГДА БюджетнаяОперация.Разрез3Дт
	|	КОГДА ДанныеСчетДт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез4) ТОГДА БюджетнаяОперация.Разрез4Дт
	|	КОГДА ДанныеСчетДт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез5) ТОГДА БюджетнаяОперация.Разрез5Дт
	|	КОГДА ДанныеСчетДт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез6) ТОГДА БюджетнаяОперация.Разрез6Дт
	|	КОГДА ДанныеСчетДт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез7) ТОГДА БюджетнаяОперация.Разрез7Дт
	|	КОГДА ДанныеСчетДт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез8) ТОГДА БюджетнаяОперация.Разрез8Дт
	|	КОГДА ДанныеСчетДт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез9) ТОГДА БюджетнаяОперация.Разрез9Дт
	|	КОГДА ДанныеСчетДт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез10) ТОГДА БюджетнаяОперация.Разрез10Дт
	|	ИНАЧЕ NULL КОНЕЦ КАК СубконтоДт2,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.ВидСубконто3 = &ВидСубконто_ЦФО ТОГДА БюджетнаяОперация.УправленческоеПодразделениеДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто3 = &ВидСубконто_Проекты ТОГДА БюджетнаяОперация.ПроектДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто3 = &ВидСубконто_Контрагенты ТОГДА БюджетнаяОперация.КонтрагентДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто3 = &ВидСубконто_Номенклатура ТОГДА БюджетнаяОперация.НоменклатураДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто3 = &ВидСубконто_СтатьиОборотов ТОГДА БюджетнаяОперация.ФинансовыйПоказатель 
	|	КОГДА ДанныеСчетДт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез1) ТОГДА БюджетнаяОперация.Разрез1Дт
	|	КОГДА ДанныеСчетДт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез2) ТОГДА БюджетнаяОперация.Разрез2Дт
	|	КОГДА ДанныеСчетДт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез3) ТОГДА БюджетнаяОперация.Разрез3Дт
	|	КОГДА ДанныеСчетДт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез4) ТОГДА БюджетнаяОперация.Разрез4Дт
	|	КОГДА ДанныеСчетДт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез5) ТОГДА БюджетнаяОперация.Разрез5Дт
	|	КОГДА ДанныеСчетДт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез6) ТОГДА БюджетнаяОперация.Разрез6Дт
	|	КОГДА ДанныеСчетДт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез7) ТОГДА БюджетнаяОперация.Разрез7Дт
	|	КОГДА ДанныеСчетДт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез8) ТОГДА БюджетнаяОперация.Разрез8Дт
	|	КОГДА ДанныеСчетДт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез9) ТОГДА БюджетнаяОперация.Разрез9Дт
	|	КОГДА ДанныеСчетДт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез10) ТОГДА БюджетнаяОперация.Разрез10Дт
	|	ИНАЧЕ NULL КОНЕЦ КАК СубконтоДт3,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.ВидСубконто4 = &ВидСубконто_ЦФО ТОГДА БюджетнаяОперация.УправленческоеПодразделениеДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто4 = &ВидСубконто_Проекты ТОГДА БюджетнаяОперация.ПроектДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто4 = &ВидСубконто_Контрагенты ТОГДА БюджетнаяОперация.КонтрагентДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто4 = &ВидСубконто_Номенклатура ТОГДА БюджетнаяОперация.НоменклатураДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто4 = &ВидСубконто_СтатьиОборотов ТОГДА БюджетнаяОперация.ФинансовыйПоказатель 
	|	КОГДА ДанныеСчетДт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез1) ТОГДА БюджетнаяОперация.Разрез1Дт
	|	КОГДА ДанныеСчетДт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез2) ТОГДА БюджетнаяОперация.Разрез2Дт
	|	КОГДА ДанныеСчетДт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез3) ТОГДА БюджетнаяОперация.Разрез3Дт
	|	КОГДА ДанныеСчетДт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез4) ТОГДА БюджетнаяОперация.Разрез4Дт
	|	КОГДА ДанныеСчетДт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез5) ТОГДА БюджетнаяОперация.Разрез5Дт
	|	КОГДА ДанныеСчетДт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез6) ТОГДА БюджетнаяОперация.Разрез6Дт
	|	КОГДА ДанныеСчетДт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез7) ТОГДА БюджетнаяОперация.Разрез7Дт
	|	КОГДА ДанныеСчетДт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез8) ТОГДА БюджетнаяОперация.Разрез8Дт
	|	КОГДА ДанныеСчетДт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез9) ТОГДА БюджетнаяОперация.Разрез9Дт
	|	КОГДА ДанныеСчетДт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез10) ТОГДА БюджетнаяОперация.Разрез10Дт
	|	ИНАЧЕ NULL КОНЕЦ КАК СубконтоДт4,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.ВидСубконто5 = &ВидСубконто_ЦФО ТОГДА БюджетнаяОперация.УправленческоеПодразделениеДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто5 = &ВидСубконто_Проекты ТОГДА БюджетнаяОперация.ПроектДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто5 = &ВидСубконто_Контрагенты ТОГДА БюджетнаяОперация.КонтрагентДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто5 = &ВидСубконто_Номенклатура ТОГДА БюджетнаяОперация.НоменклатураДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто5 = &ВидСубконто_СтатьиОборотов ТОГДА БюджетнаяОперация.ФинансовыйПоказатель 
	|	КОГДА ДанныеСчетДт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез1) ТОГДА БюджетнаяОперация.Разрез1Дт
	|	КОГДА ДанныеСчетДт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез2) ТОГДА БюджетнаяОперация.Разрез2Дт
	|	КОГДА ДанныеСчетДт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез3) ТОГДА БюджетнаяОперация.Разрез3Дт
	|	КОГДА ДанныеСчетДт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез4) ТОГДА БюджетнаяОперация.Разрез4Дт
	|	КОГДА ДанныеСчетДт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез5) ТОГДА БюджетнаяОперация.Разрез5Дт
	|	КОГДА ДанныеСчетДт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез6) ТОГДА БюджетнаяОперация.Разрез6Дт
	|	КОГДА ДанныеСчетДт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез7) ТОГДА БюджетнаяОперация.Разрез7Дт
	|	КОГДА ДанныеСчетДт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез8) ТОГДА БюджетнаяОперация.Разрез8Дт
	|	КОГДА ДанныеСчетДт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез9) ТОГДА БюджетнаяОперация.Разрез9Дт
	|	КОГДА ДанныеСчетДт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез10) ТОГДА БюджетнаяОперация.Разрез10Дт
	|	ИНАЧЕ NULL КОНЕЦ КАК СубконтоДт5,
	|ДанныеСчетКт.Счет КАК СчетКт,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.ВидСубконто1 = &ВидСубконто_ЦФО ТОГДА БюджетнаяОперация.УправленческоеПодразделениеКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто1 = &ВидСубконто_Проекты ТОГДА БюджетнаяОперация.ПроектКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто1 = &ВидСубконто_Контрагенты ТОГДА БюджетнаяОперация.КонтрагентКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто1 = &ВидСубконто_Номенклатура ТОГДА БюджетнаяОперация.НоменклатураКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто1 = &ВидСубконто_СтатьиОборотов ТОГДА БюджетнаяОперация.ФинансовыйПоказатель 
	|	КОГДА ДанныеСчетКт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез1) ТОГДА БюджетнаяОперация.Разрез1Кт
	|	КОГДА ДанныеСчетКт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез2) ТОГДА БюджетнаяОперация.Разрез2Кт
	|	КОГДА ДанныеСчетКт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез3) ТОГДА БюджетнаяОперация.Разрез3Кт
	|	КОГДА ДанныеСчетКт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез4) ТОГДА БюджетнаяОперация.Разрез4Кт
	|	КОГДА ДанныеСчетКт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез5) ТОГДА БюджетнаяОперация.Разрез5Кт
	|	КОГДА ДанныеСчетКт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез6) ТОГДА БюджетнаяОперация.Разрез6Кт
	|	КОГДА ДанныеСчетКт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез7) ТОГДА БюджетнаяОперация.Разрез7Кт
	|	КОГДА ДанныеСчетКт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез8) ТОГДА БюджетнаяОперация.Разрез8Кт
	|	КОГДА ДанныеСчетКт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез9) ТОГДА БюджетнаяОперация.Разрез9Кт
	|	КОГДА ДанныеСчетКт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез10) ТОГДА БюджетнаяОперация.Разрез10Кт
	|	ИНАЧЕ NULL КОНЕЦ КАК СубконтоКт1,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.ВидСубконто2 = &ВидСубконто_ЦФО ТОГДА БюджетнаяОперация.УправленческоеПодразделениеКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто2 = &ВидСубконто_Проекты ТОГДА БюджетнаяОперация.ПроектКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто2 = &ВидСубконто_Контрагенты ТОГДА БюджетнаяОперация.КонтрагентКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто2 = &ВидСубконто_Номенклатура ТОГДА БюджетнаяОперация.НоменклатураКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто2 = &ВидСубконто_СтатьиОборотов ТОГДА БюджетнаяОперация.ФинансовыйПоказатель 
	|	КОГДА ДанныеСчетКт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез1) ТОГДА БюджетнаяОперация.Разрез1Кт
	|	КОГДА ДанныеСчетКт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез2) ТОГДА БюджетнаяОперация.Разрез2Кт
	|	КОГДА ДанныеСчетКт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез3) ТОГДА БюджетнаяОперация.Разрез3Кт
	|	КОГДА ДанныеСчетКт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез4) ТОГДА БюджетнаяОперация.Разрез4Кт
	|	КОГДА ДанныеСчетКт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез5) ТОГДА БюджетнаяОперация.Разрез5Кт
	|	КОГДА ДанныеСчетКт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез6) ТОГДА БюджетнаяОперация.Разрез6Кт
	|	КОГДА ДанныеСчетКт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез7) ТОГДА БюджетнаяОперация.Разрез7Кт
	|	КОГДА ДанныеСчетКт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез8) ТОГДА БюджетнаяОперация.Разрез8Кт
	|	КОГДА ДанныеСчетКт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез9) ТОГДА БюджетнаяОперация.Разрез9Кт
	|	КОГДА ДанныеСчетКт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез10) ТОГДА БюджетнаяОперация.Разрез10Кт
	|	ИНАЧЕ NULL КОНЕЦ КАК СубконтоКт2,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.ВидСубконто3 = &ВидСубконто_ЦФО ТОГДА БюджетнаяОперация.УправленческоеПодразделениеКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто3 = &ВидСубконто_Проекты ТОГДА БюджетнаяОперация.ПроектКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто3 = &ВидСубконто_Контрагенты ТОГДА БюджетнаяОперация.КонтрагентКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто3 = &ВидСубконто_Номенклатура ТОГДА БюджетнаяОперация.НоменклатураКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто3 = &ВидСубконто_СтатьиОборотов ТОГДА БюджетнаяОперация.ФинансовыйПоказатель 
	|	КОГДА ДанныеСчетКт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез1) ТОГДА БюджетнаяОперация.Разрез1Кт
	|	КОГДА ДанныеСчетКт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез2) ТОГДА БюджетнаяОперация.Разрез2Кт
	|	КОГДА ДанныеСчетКт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез3) ТОГДА БюджетнаяОперация.Разрез3Кт
	|	КОГДА ДанныеСчетКт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез4) ТОГДА БюджетнаяОперация.Разрез4Кт
	|	КОГДА ДанныеСчетКт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез5) ТОГДА БюджетнаяОперация.Разрез5Кт
	|	КОГДА ДанныеСчетКт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез6) ТОГДА БюджетнаяОперация.Разрез6Кт
	|	КОГДА ДанныеСчетКт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез7) ТОГДА БюджетнаяОперация.Разрез7Кт
	|	КОГДА ДанныеСчетКт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез8) ТОГДА БюджетнаяОперация.Разрез8Кт
	|	КОГДА ДанныеСчетКт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез9) ТОГДА БюджетнаяОперация.Разрез9Кт
	|	КОГДА ДанныеСчетКт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез10) ТОГДА БюджетнаяОперация.Разрез10Кт
	|	ИНАЧЕ NULL КОНЕЦ КАК СубконтоКт3,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.ВидСубконто4 = &ВидСубконто_ЦФО ТОГДА БюджетнаяОперация.УправленческоеПодразделениеКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто4 = &ВидСубконто_Проекты ТОГДА БюджетнаяОперация.ПроектКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто4 = &ВидСубконто_Контрагенты ТОГДА БюджетнаяОперация.КонтрагентКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто4 = &ВидСубконто_Номенклатура ТОГДА БюджетнаяОперация.НоменклатураКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто4 = &ВидСубконто_СтатьиОборотов ТОГДА БюджетнаяОперация.ФинансовыйПоказатель 
	|	КОГДА ДанныеСчетКт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез1) ТОГДА БюджетнаяОперация.Разрез1Кт
	|	КОГДА ДанныеСчетКт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез2) ТОГДА БюджетнаяОперация.Разрез2Кт
	|	КОГДА ДанныеСчетКт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез3) ТОГДА БюджетнаяОперация.Разрез3Кт
	|	КОГДА ДанныеСчетКт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез4) ТОГДА БюджетнаяОперация.Разрез4Кт
	|	КОГДА ДанныеСчетКт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез5) ТОГДА БюджетнаяОперация.Разрез5Кт
	|	КОГДА ДанныеСчетКт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез6) ТОГДА БюджетнаяОперация.Разрез6Кт
	|	КОГДА ДанныеСчетКт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез7) ТОГДА БюджетнаяОперация.Разрез7Кт
	|	КОГДА ДанныеСчетКт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез8) ТОГДА БюджетнаяОперация.Разрез8Кт
	|	КОГДА ДанныеСчетКт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез9) ТОГДА БюджетнаяОперация.Разрез9Кт
	|	КОГДА ДанныеСчетКт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез10) ТОГДА БюджетнаяОперация.Разрез10Кт
	|	ИНАЧЕ NULL КОНЕЦ КАК СубконтоКт4,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.ВидСубконто5 = &ВидСубконто_ЦФО ТОГДА БюджетнаяОперация.УправленческоеПодразделениеКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто5 = &ВидСубконто_Проекты ТОГДА БюджетнаяОперация.ПроектКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто5 = &ВидСубконто_Контрагенты ТОГДА БюджетнаяОперация.КонтрагентКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто5 = &ВидСубконто_Номенклатура ТОГДА БюджетнаяОперация.НоменклатураКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто5 = &ВидСубконто_СтатьиОборотов ТОГДА БюджетнаяОперация.ФинансовыйПоказатель 
	|	КОГДА ДанныеСчетКт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез1) ТОГДА БюджетнаяОперация.Разрез1Кт
	|	КОГДА ДанныеСчетКт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез2) ТОГДА БюджетнаяОперация.Разрез2Кт
	|	КОГДА ДанныеСчетКт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез3) ТОГДА БюджетнаяОперация.Разрез3Кт
	|	КОГДА ДанныеСчетКт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез4) ТОГДА БюджетнаяОперация.Разрез4Кт
	|	КОГДА ДанныеСчетКт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез5) ТОГДА БюджетнаяОперация.Разрез5Кт
	|	КОГДА ДанныеСчетКт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез6) ТОГДА БюджетнаяОперация.Разрез6Кт
	|	КОГДА ДанныеСчетКт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез7) ТОГДА БюджетнаяОперация.Разрез7Кт
	|	КОГДА ДанныеСчетКт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез8) ТОГДА БюджетнаяОперация.Разрез8Кт
	|	КОГДА ДанныеСчетКт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез9) ТОГДА БюджетнаяОперация.Разрез9Кт
	|	КОГДА ДанныеСчетКт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез10) ТОГДА БюджетнаяОперация.Разрез10Кт
	|	ИНАЧЕ NULL КОНЕЦ КАК СубконтоКт5,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.Валютный ТОГДА БюджетнаяОперация.ВалютаОперации 
	|	ИНАЧЕ NULL КОНЕЦ КАК ВалютаДт,
	|СУММА(ВЫБОР 
	|	КОГДА ДанныеСчетДт.Валютный ТОГДА БюджетнаяОперация.Сумма 
	|	ИНАЧЕ NULL КОНЕЦ) КАК ВалютнаяСуммаДт,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.Валютный ТОГДА БюджетнаяОперация.ВалютаОперации 
	|	ИНАЧЕ NULL КОНЕЦ КАК ВалютаКт,
	|СУММА(ВЫБОР 
	|	КОГДА ДанныеСчетКт.Валютный ТОГДА БюджетнаяОперация.Сумма 
	|	ИНАЧЕ NULL КОНЕЦ) КАК ВалютнаяСуммаКт,
	|БюджетнаяОперация.ФинансовыйПоказатель КАК ФинансовыйПоказатель,
	|СУММА(ВЫБОР 
	|	КОГДА ДанныеСчетДт.Количественный ТОГДА БюджетнаяОперация.Количество 
	|	ИНАЧЕ NULL КОНЕЦ) КАК КоличествоДт,
	|СУММА(ВЫБОР 
	|	КОГДА ДанныеСчетКт.Количественный ТОГДА БюджетнаяОперация.Количество 
	|	ИНАЧЕ NULL КОНЕЦ) КАК КоличествоКт,";
	ТекстЗапроса=ТекстЗапроса+?(ФактическиеДанные=Истина И РучнойУчетФактическихДанных=Ложь,"СУММА(БюджетнаяОперация.СуммаУпр) КАК СуммаУпр","
	|СУММА(ВЫРАЗИТЬ(ВЫБОР 
	|	КОГДА ВалютаОперации = &ВалютаУпрУчета ТОГДА БюджетнаяОперация.Сумма 
	|	КОГДА ВалютаОперации <> &ВалютаУпрУчета И КурсыОперации.Курс <> 0 И КурсыУпрУчета.Курс <> 0 
	|		ТОГДА БюджетнаяОперация.Сумма * КурсыОперации.Курс 
	|			* КурсыУпрУчета.Кратность / (КурсыУпрУчета.Курс * КурсыОперации.Кратность) 
	|	ИНАЧЕ 0 КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаУпр")+?(ФактическиеДанные=Истина,"",",
	|СУММА(ВЫРАЗИТЬ(ВЫБОР 
	|	КОГДА ВалютаОперации = &ВалютаСценария ТОГДА БюджетнаяОперация.Сумма 
	|	КОГДА ВалютаОперации <> &ВалютаСценария И КурсыОперации.Курс <> 0 И КурсыСценария.Курс <> 0 
	|		ТОГДА БюджетнаяОперация.Сумма *  КурсыОперации.Курс 
	|			* КурсыСценария.Кратность / (КурсыСценария.Курс * КурсыОперации.Кратность) 
	|	ИНАЧЕ 0 КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаСценария");
	ТекстЗапроса=ТекстЗапроса+"
	|ИЗ
	|("+ТекстБюджетнаяОперация+") КАК БюджетнаяОперация
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Бюджетирование.Ссылка КАК Счет,
	|			Бюджетирование.Валютный КАК Валютный,
	|			Бюджетирование.Количественный КАК Количественный,
	|			БюджетированиеВидыСубконто1.ВидСубконто КАК ВидСубконто1,
	|			БюджетированиеВидыСубконто2.ВидСубконто КАК ВидСубконто2,
	|			БюджетированиеВидыСубконто3.ВидСубконто КАК ВидСубконто3,
	|			БюджетированиеВидыСубконто4.ВидСубконто КАК ВидСубконто4,
	|			БюджетированиеВидыСубконто5.ВидСубконто КАК ВидСубконто5,
	|			ДопРазрезы1.Измерение КАК Измерение1,
	|			ДопРазрезы2.Измерение КАК Измерение2,
	|			ДопРазрезы3.Измерение КАК Измерение3,
	|			ДопРазрезы4.Измерение КАК Измерение4,
	|			ДопРазрезы5.Измерение КАК Измерение5,
	|			БюджетированиеВидыСубконто1.ВидСубконто.Наименование КАК НаименованиеСубконто1,
	|			БюджетированиеВидыСубконто2.ВидСубконто.Наименование КАК НаименованиеСубконто2,
	|			БюджетированиеВидыСубконто3.ВидСубконто.Наименование КАК НаименованиеСубконто3,
	|			БюджетированиеВидыСубконто4.ВидСубконто.Наименование КАК НаименованиеСубконто4,
	|			БюджетированиеВидыСубконто5.ВидСубконто.Наименование КАК НаименованиеСубконто5
	|		ИЗ
	|			ПланСчетов.фин_Бюджетирование КАК Бюджетирование
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто1
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто1.Ссылка И (БюджетированиеВидыСубконто1.НомерСтроки = 1)
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК ДопРазрезы1
	|					ПО БюджетированиеВидыСубконто1.ВидСубконто = ДопРазрезы1.Разрез
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто2
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто2.Ссылка И (БюджетированиеВидыСубконто2.НомерСтроки = 2)
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК ДопРазрезы2
	|					ПО БюджетированиеВидыСубконто2.ВидСубконто = ДопРазрезы2.Разрез
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто3
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто3.Ссылка И (БюджетированиеВидыСубконто3.НомерСтроки = 3)
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК ДопРазрезы3
	|					ПО БюджетированиеВидыСубконто3.ВидСубконто = ДопРазрезы3.Разрез
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто4
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто4.Ссылка И (БюджетированиеВидыСубконто4.НомерСтроки = 4)
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК ДопРазрезы4
	|					ПО БюджетированиеВидыСубконто4.ВидСубконто = ДопРазрезы4.Разрез
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто5
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто5.Ссылка И (БюджетированиеВидыСубконто5.НомерСтроки = 5)
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК ДопРазрезы5
	|					ПО БюджетированиеВидыСубконто5.ВидСубконто = ДопРазрезы5.Разрез) КАК ДанныеСчетДт
	|		ПО БюджетнаяОперация.СчетДт = ДанныеСчетДт.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Бюджетирование.Ссылка КАК Счет,
	|			Бюджетирование.Валютный КАК Валютный,
	|			Бюджетирование.Количественный КАК Количественный,
	|			БюджетированиеВидыСубконто1.ВидСубконто КАК ВидСубконто1,
	|			БюджетированиеВидыСубконто2.ВидСубконто КАК ВидСубконто2,
	|			БюджетированиеВидыСубконто3.ВидСубконто КАК ВидСубконто3,
	|			БюджетированиеВидыСубконто4.ВидСубконто КАК ВидСубконто4,
	|			БюджетированиеВидыСубконто5.ВидСубконто КАК ВидСубконто5,
	|			ДопРазрезы1.Измерение КАК Измерение1,
	|			ДопРазрезы2.Измерение КАК Измерение2,
	|			ДопРазрезы3.Измерение КАК Измерение3,
	|			ДопРазрезы4.Измерение КАК Измерение4,
	|			ДопРазрезы5.Измерение КАК Измерение5,
	|			БюджетированиеВидыСубконто1.ВидСубконто.Наименование КАК НаименованиеСубконто1,
	|			БюджетированиеВидыСубконто2.ВидСубконто.Наименование КАК НаименованиеСубконто2,
	|			БюджетированиеВидыСубконто3.ВидСубконто.Наименование КАК НаименованиеСубконто3,
	|			БюджетированиеВидыСубконто4.ВидСубконто.Наименование КАК НаименованиеСубконто4,
	|			БюджетированиеВидыСубконто5.ВидСубконто.Наименование КАК НаименованиеСубконто5
	|		ИЗ
	|			ПланСчетов.фин_Бюджетирование КАК Бюджетирование
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто1
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто1.Ссылка И (БюджетированиеВидыСубконто1.НомерСтроки = 1)
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК ДопРазрезы1
	|					ПО БюджетированиеВидыСубконто1.ВидСубконто = ДопРазрезы1.Разрез
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто2
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто2.Ссылка И (БюджетированиеВидыСубконто2.НомерСтроки = 2)
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК ДопРазрезы2
	|					ПО БюджетированиеВидыСубконто2.ВидСубконто = ДопРазрезы2.Разрез
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто3
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто3.Ссылка И (БюджетированиеВидыСубконто3.НомерСтроки = 3)
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК ДопРазрезы3
	|					ПО БюджетированиеВидыСубконто3.ВидСубконто = ДопРазрезы3.Разрез
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто4
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто4.Ссылка И (БюджетированиеВидыСубконто4.НомерСтроки = 4)
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК ДопРазрезы4
	|					ПО БюджетированиеВидыСубконто4.ВидСубконто = ДопРазрезы4.Разрез
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто5
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто5.Ссылка И (БюджетированиеВидыСубконто5.НомерСтроки = 5)
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК ДопРазрезы5
	|					ПО БюджетированиеВидыСубконто5.ВидСубконто = ДопРазрезы5.Разрез) КАК ДанныеСчетКт
	|		ПО БюджетнаяОперация.СчетКт = ДанныеСчетКт.Счет";
	Если ФактическиеДанные<>Истина ИЛИ РучнойУчетФактическихДанных=Истина Тогда
		
	Если ФактическиеДанные=Ложь Тогда
	ТекстЗапроса = ТекстЗапроса+"
	//  Курсы валюты сценария планирования	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(ВЫБРАТЬ 
	|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
	|	КурсыВалют.Курс КАК Курс, 
	|	КурсыВалют.Кратность КАК Кратность
	|ИЗ РегистрСведений."+РегистрКурсовВалют+" КАК КурсыВалют
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		Максимум(КурсыВнутр.Период) КАК Период,
	|		Обороты.Дата КАК Дата
	|	ИЗ РегистрСведений."+РегистрКурсовВалют+" КАК КурсыВнутр
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+ТекстДляКурсовУпрУчета+") КАК Обороты
	|ПО Обороты.Дата >= КурсыВнутр.Период
	|	И (КурсыВнутр.Валюта = &ВалютаСценария)";
	Если ИспользоватьКурсыСценария Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|	И (КурсыВнутр.Сценарий=&Сценарий)";
	КонецЕсли;
	ТекстЗапроса=ТекстЗапроса+"
	|	СГРУППИРОВАТЬ ПО Обороты.Дата) КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
	|	ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период
	|ГДЕ КурсыВалют.Валюта = &ВалютаСценария";
	Если ИспользоватьКурсыСценария Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|	И КурсыВалют.Сценарий=&Сценарий";
	КонецЕсли;
	ТекстЗапроса=ТекстЗапроса+" ) КАК КурсыСценария
	|ПО КурсыСценария.Дата = БюджетнаяОперация.Период";
	КонецЕсли;
	// Курсы документа 
	ТекстЗапроса = ТекстЗапроса+"
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(ВЫБРАТЬ 
	|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
	|	КурсыВалют.Курс КАК Курс, 
	|	КурсыВалют.Кратность КАК Кратность,
	|	КурсыВалют.Валюта КАК Валюта
	|ИЗ РегистрСведений."+РегистрКурсовВалют+" КАК КурсыВалют
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		Максимум(КурсыВнутр.Период) КАК Период,
	|		Обороты.Дата КАК Дата,
	|		КурсыВнутр.Валюта КАК Валюта
	|	ИЗ РегистрСведений."+РегистрКурсовВалют+" КАК КурсыВнутр
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+ТекстДляКурсовОперации+") КАК Обороты
	|ПО Обороты.Дата >= КурсыВнутр.Период
	|	И КурсыВнутр.Валюта = Обороты.ВалютаДок";
	Если ИспользоватьКурсыСценария Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|	И (КурсыВнутр.Сценарий=&Сценарий)";
	КонецЕсли;
	ТекстЗапроса=ТекстЗапроса+"
	|	СГРУППИРОВАТЬ ПО Обороты.Дата, КурсыВнутр.Валюта) КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
	|	ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период И 
	|      КурсыВалют.Валюта = ПериодПоследнейЗаписиКурсаНаДатуОборота.Валюта";
	Если ИспользоватьКурсыСценария Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|	ГДЕ КурсыВалют.Сценарий=&Сценарий";
	КонецЕсли;
	ТекстЗапроса=ТекстЗапроса+" ) КАК КурсыОперации
	|ПО КурсыОперации.Дата = БюджетнаяОперация.Период И
	|   КурсыОперации.Валюта = БюджетнаяОперация.ВалютаОперации
	// Курсы валюты управленческого учета
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(ВЫБРАТЬ 
	|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
	|	КурсыВалют.Курс КАК Курс, 
	|	КурсыВалют.Кратность КАК Кратность
	|ИЗ РегистрСведений."+РегистрКурсовВалют+" КАК КурсыВалют
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		МАКСИМУМ(КурсыВнутр.Период) КАК Период,
	|		Обороты.Дата КАК Дата
	|	ИЗ РегистрСведений."+РегистрКурсовВалют+" КАК КурсыВнутр
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+ТекстДляКурсовУпрУчета+") КАК Обороты
	|ПО Обороты.Дата >= КурсыВнутр.Период
	|	И (КурсыВнутр.Валюта = &ВалютаУпрУчета)";
	Если ИспользоватьКурсыСценария Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|	И (КурсыВнутр.Сценарий=&Сценарий)";
	КонецЕсли;
	ТекстЗапроса=ТекстЗапроса+"
	|	СГРУППИРОВАТЬ ПО Обороты.Дата) КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
	|	ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период
	|ГДЕ КурсыВалют.Валюта = &ВалютаУпрУчета";
	Если ИспользоватьКурсыСценария Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|	И КурсыВалют.Сценарий=&Сценарий";
	КонецЕсли;
	ТекстЗапроса=ТекстЗапроса+" ) КАК КурсыУпрУчета
	|ПО КурсыУпрУчета.Дата = БюджетнаяОперация.Период";
	КонецЕсли;
	ТекстЗапроса=ТекстЗапроса+"
	|СГРУППИРОВАТЬ ПО
	|БюджетнаяОперация.Период,
	|ДанныеСчетДт.Счет,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.ВидСубконто1 = &ВидСубконто_ЦФО ТОГДА БюджетнаяОперация.УправленческоеПодразделениеДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто1 = &ВидСубконто_Проекты ТОГДА БюджетнаяОперация.ПроектДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто1 = &ВидСубконто_Контрагенты ТОГДА БюджетнаяОперация.КонтрагентДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто1 = &ВидСубконто_Номенклатура ТОГДА БюджетнаяОперация.НоменклатураДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто1 = &ВидСубконто_СтатьиОборотов ТОГДА БюджетнаяОперация.ФинансовыйПоказатель 
	|	КОГДА ДанныеСчетДт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез1) ТОГДА БюджетнаяОперация.Разрез1Дт
	|	КОГДА ДанныеСчетДт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез2) ТОГДА БюджетнаяОперация.Разрез2Дт
	|	КОГДА ДанныеСчетДт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез3) ТОГДА БюджетнаяОперация.Разрез3Дт
	|	КОГДА ДанныеСчетДт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез4) ТОГДА БюджетнаяОперация.Разрез4Дт
	|	КОГДА ДанныеСчетДт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез5) ТОГДА БюджетнаяОперация.Разрез5Дт
	|	КОГДА ДанныеСчетДт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез6) ТОГДА БюджетнаяОперация.Разрез6Дт
	|	КОГДА ДанныеСчетДт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез7) ТОГДА БюджетнаяОперация.Разрез7Дт
	|	КОГДА ДанныеСчетДт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез8) ТОГДА БюджетнаяОперация.Разрез8Дт
	|	КОГДА ДанныеСчетДт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез9) ТОГДА БюджетнаяОперация.Разрез9Дт
	|	КОГДА ДанныеСчетДт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез10) ТОГДА БюджетнаяОперация.Разрез10Дт
	|	ИНАЧЕ NULL КОНЕЦ,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.ВидСубконто2 = &ВидСубконто_ЦФО ТОГДА БюджетнаяОперация.УправленческоеПодразделениеДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто2 = &ВидСубконто_Проекты ТОГДА БюджетнаяОперация.ПроектДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто2 = &ВидСубконто_Контрагенты ТОГДА БюджетнаяОперация.КонтрагентДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто2 = &ВидСубконто_Номенклатура ТОГДА БюджетнаяОперация.НоменклатураДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто2 = &ВидСубконто_СтатьиОборотов ТОГДА БюджетнаяОперация.ФинансовыйПоказатель 
	|	КОГДА ДанныеСчетДт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез1) ТОГДА БюджетнаяОперация.Разрез1Дт
	|	КОГДА ДанныеСчетДт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез2) ТОГДА БюджетнаяОперация.Разрез2Дт
	|	КОГДА ДанныеСчетДт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез3) ТОГДА БюджетнаяОперация.Разрез3Дт
	|	КОГДА ДанныеСчетДт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез4) ТОГДА БюджетнаяОперация.Разрез4Дт
	|	КОГДА ДанныеСчетДт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез5) ТОГДА БюджетнаяОперация.Разрез5Дт
	|	КОГДА ДанныеСчетДт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез6) ТОГДА БюджетнаяОперация.Разрез6Дт
	|	КОГДА ДанныеСчетДт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез7) ТОГДА БюджетнаяОперация.Разрез7Дт
	|	КОГДА ДанныеСчетДт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез8) ТОГДА БюджетнаяОперация.Разрез8Дт
	|	КОГДА ДанныеСчетДт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез9) ТОГДА БюджетнаяОперация.Разрез9Дт
	|	КОГДА ДанныеСчетДт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез10) ТОГДА БюджетнаяОперация.Разрез10Дт
	|	ИНАЧЕ NULL КОНЕЦ,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.ВидСубконто3 = &ВидСубконто_ЦФО ТОГДА БюджетнаяОперация.УправленческоеПодразделениеДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто3 = &ВидСубконто_Проекты ТОГДА БюджетнаяОперация.ПроектДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто3 = &ВидСубконто_Контрагенты ТОГДА БюджетнаяОперация.КонтрагентДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто3 = &ВидСубконто_Номенклатура ТОГДА БюджетнаяОперация.НоменклатураДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто3 = &ВидСубконто_СтатьиОборотов ТОГДА БюджетнаяОперация.ФинансовыйПоказатель 
	|	КОГДА ДанныеСчетДт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез1) ТОГДА БюджетнаяОперация.Разрез1Дт
	|	КОГДА ДанныеСчетДт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез2) ТОГДА БюджетнаяОперация.Разрез2Дт
	|	КОГДА ДанныеСчетДт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез3) ТОГДА БюджетнаяОперация.Разрез3Дт
	|	КОГДА ДанныеСчетДт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез4) ТОГДА БюджетнаяОперация.Разрез4Дт
	|	КОГДА ДанныеСчетДт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез5) ТОГДА БюджетнаяОперация.Разрез5Дт
	|	КОГДА ДанныеСчетДт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез6) ТОГДА БюджетнаяОперация.Разрез6Дт
	|	КОГДА ДанныеСчетДт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез7) ТОГДА БюджетнаяОперация.Разрез7Дт
	|	КОГДА ДанныеСчетДт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез8) ТОГДА БюджетнаяОперация.Разрез8Дт
	|	КОГДА ДанныеСчетДт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез9) ТОГДА БюджетнаяОперация.Разрез9Дт
	|	КОГДА ДанныеСчетДт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез10) ТОГДА БюджетнаяОперация.Разрез10Дт
	|	ИНАЧЕ NULL КОНЕЦ,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.ВидСубконто4 = &ВидСубконто_ЦФО ТОГДА БюджетнаяОперация.УправленческоеПодразделениеДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто4 = &ВидСубконто_Проекты ТОГДА БюджетнаяОперация.ПроектДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто4 = &ВидСубконто_Контрагенты ТОГДА БюджетнаяОперация.КонтрагентДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто4 = &ВидСубконто_Номенклатура ТОГДА БюджетнаяОперация.НоменклатураДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто4 = &ВидСубконто_СтатьиОборотов ТОГДА БюджетнаяОперация.ФинансовыйПоказатель 
	|	КОГДА ДанныеСчетДт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез1) ТОГДА БюджетнаяОперация.Разрез1Дт
	|	КОГДА ДанныеСчетДт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез2) ТОГДА БюджетнаяОперация.Разрез2Дт
	|	КОГДА ДанныеСчетДт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез3) ТОГДА БюджетнаяОперация.Разрез3Дт
	|	КОГДА ДанныеСчетДт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез4) ТОГДА БюджетнаяОперация.Разрез4Дт
	|	КОГДА ДанныеСчетДт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез5) ТОГДА БюджетнаяОперация.Разрез5Дт
	|	КОГДА ДанныеСчетДт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез6) ТОГДА БюджетнаяОперация.Разрез6Дт
	|	КОГДА ДанныеСчетДт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез7) ТОГДА БюджетнаяОперация.Разрез7Дт
	|	КОГДА ДанныеСчетДт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез8) ТОГДА БюджетнаяОперация.Разрез8Дт
	|	КОГДА ДанныеСчетДт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез9) ТОГДА БюджетнаяОперация.Разрез9Дт
	|	КОГДА ДанныеСчетДт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез10) ТОГДА БюджетнаяОперация.Разрез10Дт
	|	ИНАЧЕ NULL КОНЕЦ,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.ВидСубконто5 = &ВидСубконто_ЦФО ТОГДА БюджетнаяОперация.УправленческоеПодразделениеДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто5 = &ВидСубконто_Проекты ТОГДА БюджетнаяОперация.ПроектДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто5 = &ВидСубконто_Контрагенты ТОГДА БюджетнаяОперация.КонтрагентДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто5 = &ВидСубконто_Номенклатура ТОГДА БюджетнаяОперация.НоменклатураДт 
	|	КОГДА ДанныеСчетДт.ВидСубконто5 = &ВидСубконто_СтатьиОборотов ТОГДА БюджетнаяОперация.ФинансовыйПоказатель 
	|	КОГДА ДанныеСчетДт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез1) ТОГДА БюджетнаяОперация.Разрез1Дт
	|	КОГДА ДанныеСчетДт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез2) ТОГДА БюджетнаяОперация.Разрез2Дт
	|	КОГДА ДанныеСчетДт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез3) ТОГДА БюджетнаяОперация.Разрез3Дт
	|	КОГДА ДанныеСчетДт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез4) ТОГДА БюджетнаяОперация.Разрез4Дт
	|	КОГДА ДанныеСчетДт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез5) ТОГДА БюджетнаяОперация.Разрез5Дт
	|	КОГДА ДанныеСчетДт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез6) ТОГДА БюджетнаяОперация.Разрез6Дт
	|	КОГДА ДанныеСчетДт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез7) ТОГДА БюджетнаяОперация.Разрез7Дт
	|	КОГДА ДанныеСчетДт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез8) ТОГДА БюджетнаяОперация.Разрез8Дт
	|	КОГДА ДанныеСчетДт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез9) ТОГДА БюджетнаяОперация.Разрез9Дт
	|	КОГДА ДанныеСчетДт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез10) ТОГДА БюджетнаяОперация.Разрез10Дт
	|	ИНАЧЕ NULL КОНЕЦ,
	|ДанныеСчетКт.Счет,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.ВидСубконто1 = &ВидСубконто_ЦФО ТОГДА БюджетнаяОперация.УправленческоеПодразделениеКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто1 = &ВидСубконто_Проекты ТОГДА БюджетнаяОперация.ПроектКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто1 = &ВидСубконто_Контрагенты ТОГДА БюджетнаяОперация.КонтрагентКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто1 = &ВидСубконто_Номенклатура ТОГДА БюджетнаяОперация.НоменклатураКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто1 = &ВидСубконто_СтатьиОборотов ТОГДА БюджетнаяОперация.ФинансовыйПоказатель 
	|	КОГДА ДанныеСчетКт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез1) ТОГДА БюджетнаяОперация.Разрез1Кт
	|	КОГДА ДанныеСчетКт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез2) ТОГДА БюджетнаяОперация.Разрез2Кт
	|	КОГДА ДанныеСчетКт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез3) ТОГДА БюджетнаяОперация.Разрез3Кт
	|	КОГДА ДанныеСчетКт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез4) ТОГДА БюджетнаяОперация.Разрез4Кт
	|	КОГДА ДанныеСчетКт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез5) ТОГДА БюджетнаяОперация.Разрез5Кт
	|	КОГДА ДанныеСчетКт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез6) ТОГДА БюджетнаяОперация.Разрез6Кт
	|	КОГДА ДанныеСчетКт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез7) ТОГДА БюджетнаяОперация.Разрез7Кт
	|	КОГДА ДанныеСчетКт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез8) ТОГДА БюджетнаяОперация.Разрез8Кт
	|	КОГДА ДанныеСчетКт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез9) ТОГДА БюджетнаяОперация.Разрез9Кт
	|	КОГДА ДанныеСчетКт.Измерение1 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез10) ТОГДА БюджетнаяОперация.Разрез10Кт
	|	ИНАЧЕ NULL КОНЕЦ,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.ВидСубконто2 = &ВидСубконто_ЦФО ТОГДА БюджетнаяОперация.УправленческоеПодразделениеКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто2 = &ВидСубконто_Проекты ТОГДА БюджетнаяОперация.ПроектКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто2 = &ВидСубконто_Контрагенты ТОГДА БюджетнаяОперация.КонтрагентКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто2 = &ВидСубконто_Номенклатура ТОГДА БюджетнаяОперация.НоменклатураКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто2 = &ВидСубконто_СтатьиОборотов ТОГДА БюджетнаяОперация.ФинансовыйПоказатель 
	|	КОГДА ДанныеСчетКт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез1) ТОГДА БюджетнаяОперация.Разрез1Кт
	|	КОГДА ДанныеСчетКт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез2) ТОГДА БюджетнаяОперация.Разрез2Кт
	|	КОГДА ДанныеСчетКт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез3) ТОГДА БюджетнаяОперация.Разрез3Кт
	|	КОГДА ДанныеСчетКт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез4) ТОГДА БюджетнаяОперация.Разрез4Кт
	|	КОГДА ДанныеСчетКт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез5) ТОГДА БюджетнаяОперация.Разрез5Кт
	|	КОГДА ДанныеСчетКт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез6) ТОГДА БюджетнаяОперация.Разрез6Кт
	|	КОГДА ДанныеСчетКт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез7) ТОГДА БюджетнаяОперация.Разрез7Кт
	|	КОГДА ДанныеСчетКт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез8) ТОГДА БюджетнаяОперация.Разрез8Кт
	|	КОГДА ДанныеСчетКт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез9) ТОГДА БюджетнаяОперация.Разрез9Кт
	|	КОГДА ДанныеСчетКт.Измерение2 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез10) ТОГДА БюджетнаяОперация.Разрез10Кт
	|	ИНАЧЕ NULL КОНЕЦ,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.ВидСубконто3 = &ВидСубконто_ЦФО ТОГДА БюджетнаяОперация.УправленческоеПодразделениеКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто3 = &ВидСубконто_Проекты ТОГДА БюджетнаяОперация.ПроектКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто3 = &ВидСубконто_Контрагенты ТОГДА БюджетнаяОперация.КонтрагентКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто3 = &ВидСубконто_Номенклатура ТОГДА БюджетнаяОперация.НоменклатураКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто3 = &ВидСубконто_СтатьиОборотов ТОГДА БюджетнаяОперация.ФинансовыйПоказатель 
	|	КОГДА ДанныеСчетКт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез1) ТОГДА БюджетнаяОперация.Разрез1Кт
	|	КОГДА ДанныеСчетКт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез2) ТОГДА БюджетнаяОперация.Разрез2Кт
	|	КОГДА ДанныеСчетКт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез3) ТОГДА БюджетнаяОперация.Разрез3Кт
	|	КОГДА ДанныеСчетКт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез4) ТОГДА БюджетнаяОперация.Разрез4Кт
	|	КОГДА ДанныеСчетКт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез5) ТОГДА БюджетнаяОперация.Разрез5Кт
	|	КОГДА ДанныеСчетКт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез6) ТОГДА БюджетнаяОперация.Разрез6Кт
	|	КОГДА ДанныеСчетКт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез7) ТОГДА БюджетнаяОперация.Разрез7Кт
	|	КОГДА ДанныеСчетКт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез8) ТОГДА БюджетнаяОперация.Разрез8Кт
	|	КОГДА ДанныеСчетКт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез9) ТОГДА БюджетнаяОперация.Разрез9Кт
	|	КОГДА ДанныеСчетКт.Измерение3 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез10) ТОГДА БюджетнаяОперация.Разрез10Кт
	|	ИНАЧЕ NULL КОНЕЦ,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.ВидСубконто4 = &ВидСубконто_ЦФО ТОГДА БюджетнаяОперация.УправленческоеПодразделениеКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто4 = &ВидСубконто_Проекты ТОГДА БюджетнаяОперация.ПроектКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто4 = &ВидСубконто_Контрагенты ТОГДА БюджетнаяОперация.КонтрагентКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто4 = &ВидСубконто_Номенклатура ТОГДА БюджетнаяОперация.НоменклатураКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто4 = &ВидСубконто_СтатьиОборотов ТОГДА БюджетнаяОперация.ФинансовыйПоказатель 
	|	КОГДА ДанныеСчетКт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез1) ТОГДА БюджетнаяОперация.Разрез1Кт
	|	КОГДА ДанныеСчетКт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез2) ТОГДА БюджетнаяОперация.Разрез2Кт
	|	КОГДА ДанныеСчетКт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез3) ТОГДА БюджетнаяОперация.Разрез3Кт
	|	КОГДА ДанныеСчетКт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез4) ТОГДА БюджетнаяОперация.Разрез4Кт
	|	КОГДА ДанныеСчетКт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез5) ТОГДА БюджетнаяОперация.Разрез5Кт
	|	КОГДА ДанныеСчетКт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез6) ТОГДА БюджетнаяОперация.Разрез6Кт
	|	КОГДА ДанныеСчетКт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез7) ТОГДА БюджетнаяОперация.Разрез7Кт
	|	КОГДА ДанныеСчетКт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез8) ТОГДА БюджетнаяОперация.Разрез8Кт
	|	КОГДА ДанныеСчетКт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез9) ТОГДА БюджетнаяОперация.Разрез9Кт
	|	КОГДА ДанныеСчетКт.Измерение4 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез10) ТОГДА БюджетнаяОперация.Разрез10Кт
	|	ИНАЧЕ NULL КОНЕЦ,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.ВидСубконто5 = &ВидСубконто_ЦФО ТОГДА БюджетнаяОперация.УправленческоеПодразделениеКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто5 = &ВидСубконто_Проекты ТОГДА БюджетнаяОперация.ПроектКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто5 = &ВидСубконто_Контрагенты ТОГДА БюджетнаяОперация.КонтрагентКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто5 = &ВидСубконто_Номенклатура ТОГДА БюджетнаяОперация.НоменклатураКт 
	|	КОГДА ДанныеСчетКт.ВидСубконто5 = &ВидСубконто_СтатьиОборотов ТОГДА БюджетнаяОперация.ФинансовыйПоказатель 
	|	КОГДА ДанныеСчетКт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез1) ТОГДА БюджетнаяОперация.Разрез1Кт
	|	КОГДА ДанныеСчетКт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез2) ТОГДА БюджетнаяОперация.Разрез2Кт
	|	КОГДА ДанныеСчетКт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез3) ТОГДА БюджетнаяОперация.Разрез3Кт
	|	КОГДА ДанныеСчетКт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез4) ТОГДА БюджетнаяОперация.Разрез4Кт
	|	КОГДА ДанныеСчетКт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез5) ТОГДА БюджетнаяОперация.Разрез5Кт
	|	КОГДА ДанныеСчетКт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез6) ТОГДА БюджетнаяОперация.Разрез6Кт
	|	КОГДА ДанныеСчетКт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез7) ТОГДА БюджетнаяОперация.Разрез7Кт
	|	КОГДА ДанныеСчетКт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез8) ТОГДА БюджетнаяОперация.Разрез8Кт
	|	КОГДА ДанныеСчетКт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез9) ТОГДА БюджетнаяОперация.Разрез9Кт
	|	КОГДА ДанныеСчетКт.Измерение5 = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Разрез10) ТОГДА БюджетнаяОперация.Разрез10Кт
	|	ИНАЧЕ NULL КОНЕЦ,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.Валютный ТОГДА БюджетнаяОперация.ВалютаОперации 
	|	ИНАЧЕ NULL КОНЕЦ,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.Валютный ТОГДА БюджетнаяОперация.ВалютаОперации 
	|	ИНАЧЕ NULL КОНЕЦ,
	|БюджетнаяОперация.ФинансовыйПоказатель";
	
	Запрос.Текст=ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ВалютаДокумента",ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУпрУчета",фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета"));
	Запрос.УстановитьПараметр("ВалютаСценария",СценарийВалюта);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	
	ТабПроводокДокумента=Запрос.Выполнить().Выгрузить();
	Возврат ТабПроводокДокумента;
КонецФункции //ПолучитьТаблицуПроводокПоПлануСчетовБюджетирования

//////////////////////////////////////
// работа с разрезами бюджетирования

// получает имя разреза
//
Функция ИмяРазреза(Разрез) Экспорт
	Для Каждого Значение Из Метаданные.Перечисления.фин_ФактическиеПоказателиБюджетирования.ЗначенияПеречисления Цикл
		Если Перечисления.фин_ФактическиеПоказателиБюджетирования[Значение.Имя]=Разрез Тогда
			Возврат Значение.Имя;
		КонецЕсли;
	КонецЦикла;
КонецФункции


Процедура БюджетированиеФормированиеПроводокРегистрыНакопленияПриЗаписи(Источник, Отказ, Замещение) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ОтложенныйРежимФормированияПроводокПоБюджетированию") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("УчитыватьФактическиеДанныеПоДвижениямРегистров") Тогда
		Возврат;
	КонецЕсли;
	Регистратор = Источник.Отбор.Регистратор.Значение;
	ИмяРегистра = Источник.Метаданные().Имя;
	Если Найти(ИмяРегистра,"фин_")<>0 Тогда
		Возврат;
	КонецЕсли;
	НаборШаблоновДляОтражения = Неопределено;
	НаборШаблоновДляОтражения = Неопределено;
	Если НЕ ПредусмотренаРегистрацияФактическихДанныхРегистром("РегистрыНакопления",ИмяРегистра,Регистратор,НаборШаблоновДляОтражения) Тогда
		Возврат;
	КонецЕсли;
	ДатаАктуальности = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ДатаАктуальностиФактическихДанных");
	Если ДатаАктуальности<>'00010101' И ДатаАктуальности<Регистратор.Дата Тогда
		Возврат;
	КонецЕсли;
	ДанныеИсточника = Источник.Выгрузить();
	МетаданныеРегистратора = Регистратор.Метаданные();
	РегистрацияПрогнозныхДанных = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмеютсяПравилаРегистрацииПрогнозныхДанных() И МетаданныеРегистратора.Движения.Содержит(Метаданные.РегистрыНакопления.фин_ПрогнозИсполненияБюджетов);
	РегистрацияЛимитов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмеютсяЛимитыНаИсполнение() И МетаданныеРегистратора.Движения.Содержит(Метаданные.РегистрыНакопления.фин_КонтролируемыеФинансовыеПоказатели);
	фин_РегистрацияФактическихДанныхПоБюджетированию.ФормироватьПроводкиПоБюджетированиюПоРегистрам(Регистратор,ДанныеИсточника,"РегистрыНакопления",ИмяРегистра,Отказ,Замещение,НаборШаблоновДляОтражения,РегистрацияПрогнозныхДанных,РегистрацияЛимитов);
КонецПроцедуры


Процедура БюджетированиеФормированиеПроводокРегистрыБухгалтерииПриЗаписи(Источник, Отказ, Замещение) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ОтложенныйРежимФормированияПроводокПоБюджетированию") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("УчитыватьФактическиеДанныеПоДвижениямРегистров") Тогда
		Возврат;
	КонецЕсли;
	Если Источник.Метаданные().Имя="фин_Бюджетирование" Тогда
		Возврат;
	КонецЕсли;
	Регистратор = Источник.Отбор.Регистратор.Значение;
	ИмяРегистра = Источник.Метаданные().Имя;
	Если Найти(ИмяРегистра,"фин_")<>0 Тогда
		Возврат;
	КонецЕсли;
	НаборШаблоновДляОтражения = Неопределено;
	Если НЕ ПредусмотренаРегистрацияФактическихДанныхРегистром("РегистрыБухгалтерии",ИмяРегистра,Регистратор,НаборШаблоновДляОтражения) Тогда
		Возврат;
	КонецЕсли;
	ДатаАктуальности = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ДатаАктуальностиФактическихДанных");
	Если ДатаАктуальности<>'00010101' И ДатаАктуальности<Регистратор.Дата Тогда
		Возврат;
	КонецЕсли;
	ДанныеИсточника = Источник.Выгрузить();
	МетаданныеРегистратора = Регистратор.Метаданные();
	РегистрацияПрогнозныхДанных = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмеютсяПравилаРегистрацииПрогнозныхДанных() И МетаданныеРегистратора.Движения.Содержит(Метаданные.РегистрыНакопления.фин_ПрогнозИсполненияБюджетов);
	РегистрацияЛимитов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмеютсяЛимитыНаИсполнение() И МетаданныеРегистратора.Движения.Содержит(Метаданные.РегистрыНакопления.фин_КонтролируемыеФинансовыеПоказатели);
	фин_РегистрацияФактическихДанныхПоБюджетированию.ФормироватьПроводкиПоБюджетированиюПоРегистрам(Регистратор,ДанныеИсточника,"РегистрыБухгалтерии",ИмяРегистра,Отказ,Замещение,НаборШаблоновДляОтражения,РегистрацияПрогнозныхДанных,РегистрацияЛимитов);
КонецПроцедуры


Процедура БюджетированиеФормированиеПроводокРегистрыРасчетаПриЗаписи(Источник, Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ОтложенныйРежимФормированияПроводокПоБюджетированию") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("УчитыватьФактическиеДанныеПоДвижениямРегистров") Тогда
		Возврат;
	КонецЕсли;
	Регистратор = Источник.Отбор.Регистратор.Значение;
	ИмяРегистра = Источник.Метаданные().Имя;
	Если Найти(ИмяРегистра,"фин_")<>0 Тогда
		Возврат;
	КонецЕсли;
	НаборШаблоновДляОтражения = Неопределено;
	НаборШаблоновДляОтражения = Неопределено;
	Если НЕ ПредусмотренаРегистрацияФактическихДанныхРегистром("РегистрыРасчета",ИмяРегистра,Регистратор,НаборШаблоновДляОтражения) Тогда
		Возврат;
	КонецЕсли;
	ДатаАктуальности = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ДатаАктуальностиФактическихДанных");
	Если ДатаАктуальности<>'00010101' И ДатаАктуальности<Регистратор.Дата Тогда
		Возврат;
	КонецЕсли;
	ДанныеИсточника = Источник.Выгрузить();
	МетаданныеРегистратора = Регистратор.Метаданные();
	РегистрацияПрогнозныхДанных = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмеютсяПравилаРегистрацииПрогнозныхДанных() И МетаданныеРегистратора.Движения.Содержит(Метаданные.РегистрыНакопления.фин_ПрогнозИсполненияБюджетов);
	РегистрацияЛимитов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмеютсяЛимитыНаИсполнение() И МетаданныеРегистратора.Движения.Содержит(Метаданные.РегистрыНакопления.фин_КонтролируемыеФинансовыеПоказатели);
	фин_РегистрацияФактическихДанныхПоБюджетированию.ФормироватьПроводкиПоБюджетированиюПоРегистрам(Регистратор,ДанныеИсточника,"РегистрыРасчета",ИмяРегистра,Отказ,Замещение,НаборШаблоновДляОтражения,РегистрацияПрогнозныхДанных,РегистрацияЛимитов);
КонецПроцедуры

Процедура БюджетированиеФормированиеПроводокРегистрыСведенийПриЗаписи(Источник, Отказ, Замещение) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	Если Строка(Источник.Метаданные().РежимЗаписи)="Независимый" Тогда
		Возврат;
	КонецЕсли;
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ОтложенныйРежимФормированияПроводокПоБюджетированию") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("УчитыватьФактическиеДанныеПоДвижениямРегистров") Тогда
		Возврат;
	КонецЕсли;
	Регистратор = Источник.Отбор.Регистратор.Значение;
	ИмяРегистра = Источник.Метаданные().Имя;
	Если Найти(ИмяРегистра,"фин_")<>0 Тогда
		Возврат;
	КонецЕсли;
	НаборШаблоновДляОтражения = Неопределено;
	НаборШаблоновДляОтражения = Неопределено;
	Если НЕ ПредусмотренаРегистрацияФактическихДанныхРегистром("РегистрыСведений",ИмяРегистра,Регистратор,НаборШаблоновДляОтражения) Тогда
		Возврат;
	КонецЕсли;
	ДатаАктуальности = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ДатаАктуальностиФактическихДанных");
	Если ДатаАктуальности<>'00010101' И ДатаАктуальности<Регистратор.Дата Тогда
		Возврат;
	КонецЕсли;
	ДанныеИсточника = Источник.Выгрузить();
	МетаданныеРегистратора = Регистратор.Метаданные();
	РегистрацияПрогнозныхДанных = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмеютсяПравилаРегистрацииПрогнозныхДанных() И МетаданныеРегистратора.Движения.Содержит(Метаданные.РегистрыНакопления.фин_ПрогнозИсполненияБюджетов);
	РегистрацияЛимитов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмеютсяЛимитыНаИсполнение() И МетаданныеРегистратора.Движения.Содержит(Метаданные.РегистрыНакопления.фин_КонтролируемыеФинансовыеПоказатели);
	фин_РегистрацияФактическихДанныхПоБюджетированию.ФормироватьПроводкиПоБюджетированиюПоРегистрам(Регистратор,ДанныеИсточника,"РегистрыСведений",ИмяРегистра,Отказ,Замещение,НаборШаблоновДляОтражения,РегистрацияПрогнозныхДанных,РегистрацияЛимитов);
КонецПроцедуры

Функция ПредусмотренаРегистрацияФактическихДанныхРегистром(ВидРегистра,ИмяРегистра,Регистратор,НаборШаблоновДляОтражения=Неопределено)  Экспорт
	Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмеютсяНастройкиДляРегистра(ВидРегистра,ИмяРегистра) Тогда
		Возврат Ложь;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	МетаданныеРегистратор = Регистратор.Метаданные();
	ИмяДокумента = МетаданныеРегистратор.Имя;
	Если ИмяДокумента = "Сторнирование" ИЛИ Найти(ИмяДокумента,"фин_")<>0 Тогда
		Возврат Ложь;
	КонецЕсли;
	ДатаДокумента = Регистратор.Дата;
	ПараметрыХраненияФакта = фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрФактическихДанныхДляДокумента(ИмяДокумента);
	Если ПараметрыХраненияФакта.РегистрацияРучнойОперацией=ЛОЖЬ И НЕ МетаданныеРегистратор.Движения.Содержит(Метаданные.РегистрыНакопления[ПараметрыХраненияФакта.ИмяРегистра]) Тогда
		Возврат Ложь;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НазначенияШаблонов.Схема КАК НаборШаблонов
	|ИЗ
	|	РегистрСведений.фин_ПрименениеСхемОтраженияФактическихДанных.СрезПоследних(&Дата, ) КАК НазначенияШаблонов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_КлассификаторРегистров КАК КлассификаторРегистров
	|		ПО НазначенияШаблонов.ОбъектИнформационнойБазы = КлассификаторРегистров.Ссылка
	|ГДЕ
	|	КлассификаторРегистров.ВидРегистра = &ВидРегистра
	|	И КлассификаторРегистров.ПрограммныйИдентификатор = &ПрограммныйИдентификатор
	|	И КлассификаторРегистров.ПометкаУдаления = ЛОЖЬ
	|	И КлассификаторРегистров.РегистрироватьПервичныеДанныеПоБюджетированию = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НазначенияШаблонов.Правило
	|ИЗ
	|	РегистрСведений.фин_ПериодыПримененияПравилПоФинансовымПоказателям КАК НазначенияШаблонов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_КлассификаторРегистров КАК КлассификаторРегистров
	|		ПО НазначенияШаблонов.Правило.Владелец = КлассификаторРегистров.Ссылка
	|ГДЕ
	|	КлассификаторРегистров.ВидРегистра = &ВидРегистра
	|	И КлассификаторРегистров.ПрограммныйИдентификатор = &ПрограммныйИдентификатор
	|	И КлассификаторРегистров.ПометкаУдаления = ЛОЖЬ
	|	И КлассификаторРегистров.РегистрироватьПервичныеДанныеПоБюджетированию = ИСТИНА";
	
	СоответствиеРегистров= Новый Соответствие;
	СоответствиеРегистров.Вставить("РегистрыСведений",		Перечисления.фин_ВидыРегистровСистемы.РегистрыСведений);
	СоответствиеРегистров.Вставить("РегистрыБухгалтерии",	Перечисления.фин_ВидыРегистровСистемы.РегистрыБухгалтерии);
	СоответствиеРегистров.Вставить("РегистрыНакопления",	Перечисления.фин_ВидыРегистровСистемы.РегистрыНакопления);
	СоответствиеРегистров.Вставить("РегистрыРасчета",		Перечисления.фин_ВидыРегистровСистемы.РегистрыРасчета);
	Запрос.УстановитьПараметр("ВидРегистра", СоответствиеРегистров.Получить(ВидРегистра));
	Запрос.УстановитьПараметр("Дата", ДатаДокумента);
	Запрос.УстановитьПараметр("ПрограммныйИдентификатор", ИмяРегистра);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	НаборШаблоновДляОтражения = Выборка.НаборШаблонов;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПрограммныйИдентификатор",	ИмяДокумента);
	Запрос.УстановитьПараметр("ДатаДокумента",				ДатаДокумента);
	Запрос.Текст="ВЫБРАТЬ
	             |	ВидыДокументов.Ссылка КАК ВидДокументов,
	             |	ПрименениеСхемОтраженияФактическихДанных.Схема КАК НаборШаблонов,
	             |	ВидыДокументов.РегистрироватьПервичныеДанныеПоБюджетированию,
	             |	ПрименениеСхемОтраженияФактическихДанных.ИспользоватьСовместноСШаблонамиРегистров
	             |ИЗ
	             |	РегистрСведений.фин_ПрименениеСхемОтраженияФактическихДанных.СрезПоследних(&ДатаДокумента, ) КАК ПрименениеСхемОтраженияФактическихДанных
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ВидыДокументов КАК ВидыДокументов
	             |		ПО ПрименениеСхемОтраженияФактическихДанных.ОбъектИнформационнойБазы = ВидыДокументов.Ссылка
	             |ГДЕ
	             |	ВидыДокументов.ПрограммныйИдентификатор = &ПрограммныйИдентификатор
	             |	И ВидыДокументов.РегистрироватьПервичныеДанныеПоБюджетированию";
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.НаборШаблонов <> Перечисления.фин_АльтернативныеСпособыОтраженияФактическихДанных.ПоНастройкамДляРегистров И Выборка.ИспользоватьСовместноСШаблонамиРегистров = Ложь Тогда
            Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;	
КонецФункции

// Возвращает строку, описывающую период, определяемый переданными
// датой и периодичностью.
//
// Параметры
//  ДатаВПериоде:Дата - дата из периода
//  Периодичность: Строка - строка, определяющая периодичность
//
// Возвращаемое значение:
//   СтрокаПериод: строка   – представление периода для вывода в отчетах
//
Функция ПолучитьФормат(ПериодичностьДаты) Экспорт
	
	Если ТипЗнч(ПериодичностьДаты) <> Тип("Строка") Тогда
		Если ТипЗнч(ПериодичностьДаты)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования() Тогда
			Периодичность = Строка(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(ПериодичностьДаты));
		Иначе
			Периодичность = Строка(ПериодичностьДаты);
		КонецЕсли;
	Иначе
		Периодичность = ПериодичностьДаты;
	КонецЕсли;

	Если Периодичность = "Год" Тогда
		ФорматДаты = "ДФ='гггг ""г.""'";
		
	ИначеЕсли Периодичность = "Квартал" Тогда
		ФорматДаты = "ДФ='к"" квартал"" гггг ""г.""'";
		
	ИначеЕсли Периодичность = "Месяц" Тогда
		ФорматДаты = "ДФ='ММММ гггг ""г.""'";
		
	ИначеЕсли Периодичность = "Неделя" Тогда
		ФорматДаты = "ДФ='""Неделя (""дд.ММ.гггг'";
		
	ИначеЕсли Периодичность = "День" Тогда
		ФорматДаты = "ДФ='дд.ММ.гггг ""г.""'";
		
	ИначеЕсли Периодичность = "Полугодие" Тогда
		ФорматДаты = "ДФ='гггг"" г.""'";
		Возврат ФорматДаты;
		
	ИначеЕсли Периодичность = "Декада" Тогда
		ФорматДаты = "ДФ='"" декада ""ММММ гг"" г.""'";
		Возврат ФорматДаты;
	Иначе
		ФорматДаты = "";
	КонецЕсли;
	
	Возврат ФорматДаты;
	
КонецФункции // фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой()

//Функция ПолучитьКурсВалюты(Валюта,Дата,Сценарий)
//
Функция ПолучитьКурсВалюты(Валюта,Дата,Сценарий=Неопределено) Экспорт
	Если (НЕ ЗначениеЗаполнено(Сценарий)) ИЛИ (НЕ Сценарий.ИспользоватьКурсыСценария) Тогда
		Возврат фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(Валюта,Дата);	
	Иначе
		Структура = РегистрыСведений[фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"КурсыВалютПоСценариям"].ПолучитьПоследнее(Дата, Новый Структура("Валюта,Сценарий", Валюта,Сценарий));
		Возврат Структура;
	КонецЕсли;
КонецФункции //ПолучитьКурсВалюты

Функция ПересчитатьПоКурсу(Сумма,ПериодПланирования,Сценарий,ВалютаИсходная,Валюта) Экспорт
	КурсИсходный 	= ПолучитьКурсВалюты(ВалютаИсходная,ПериодПланирования,Сценарий);	
	Курс 			= ПолучитьКурсВалюты(Валюта,ПериодПланирования,Сценарий);
	Возврат фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(Сумма, ВалютаИсходная, Валюта, КурсИсходный.Курс, Курс.Курс, 
								   КурсИсходный.Кратность, Курс.Кратность);
КонецФункции

Процедура РасчетРезервовПоБюджетамПодВыполнениеЗаявокПриЗаписи(Источник, Отказ, Замещение) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	Регистратор = Источник.Отбор.Регистратор.Значение;
	Если ТипЗнч(Регистратор)=Тип("ДокументСсылка.Сторнирование") ИЛИ ТипЗнч(Регистратор)=Тип("ДокументСсылка.КорректировкаЗаписейРегистров") Тогда
		Возврат;
	КонецЕсли;
	НаборЗаписей = РегистрыНакопления.ден_РезервыПоБюджетамПодВыполнениеЗаявок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписей.Очистить();
	Если Источник.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьПланируемыеРасходы(Источник.Выгрузить(),НаборЗаписей);
	НаборЗаписей.Записать();
КонецПроцедуры

Процедура ЗаполнитьПланируемыеРасходы(мИсточник,НаборЗаписей) Экспорт
	ТЗ_Заявки = мИсточник.Скопировать(,"ЗаявкаНаРасходование");
	ТЗ_Заявки.Свернуть("ЗаявкаНаРасходование");
	МассивЗаявок = ТЗ_Заявки.ВыгрузитьКолонку("ЗаявкаНаРасходование");
	ИмяДокумента = ?(Метаданные.Документы.Найти("ден_ЗаявкаНаРасходованиеСредств")<>Неопределено,"ден_ЗаявкаНаРасходованиеСредств","ЗаявкаНаРасходованиеСредств");
	ИмяПоляФинансовыйПоказатель = ?(Метаданные.Документы[ИмяДокумента].Реквизиты.Найти("ФинансовыйПоказатель")<>Неопределено,"ФинансовыйПоказатель","СтатьяОборотов");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаРасходованиеСредств."+ИмяПоляФинансовыйПоказатель+" КАК ФинансовыйПоказатель,
	|	ЗаявкаНаРасходованиеСредств.Сценарий,
	|	ЗаявкаНаРасходованиеСредств.Ссылка,
	|	ЗаявкаНаРасходованиеСредств.ВалютаДокумента,
	|	ВЫБОР КОГДА РазрезыУчета.НомерСтроки ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ПоПроектам
	|ИЗ
	|	Документ."+ИмяДокумента+" КАК ЗаявкаНаРасходованиеСредств
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели.РазрезыУчета КАК РазрезыУчета
	|		ПО ЗаявкаНаРасходованиеСредств."+ИмяПоляФинансовыйПоказатель+" = РазрезыУчета.Ссылка 
	|			И РазрезыУчета.Измерение = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Проект)
	|ГДЕ
	|	ЗаявкаНаРасходованиеСредств.Ссылка В(&МассивЗаявок)";
	Запрос.УстановитьПараметр("МассивЗаявок",МассивЗаявок);
	ТаблицаСценариев = Запрос.Выполнить().Выгрузить();
	
	ПоБюджетнымПараметрам = Метаданные.Документы[ИмяДокумента].ТабличныеЧасти.Найти("БюджетныеПараметры")<>Неопределено;
	
	Если ПоБюджетнымПараметрам Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БюджетныеПараметры.Ссылка,
		|	БюджетныеПараметры.СпособУказанияЗначения,
		|	БюджетныеПараметры.Измерение,
		|	БюджетныеПараметры.Значение
		|ИЗ
		|	Документ."+ИмяДокумента+".БюджетныеПараметры КАК БюджетныеПараметры
		|ГДЕ
		|	БюджетныеПараметры.Ссылка В(&МассивЗаявок)";
		Запрос.УстановитьПараметр("МассивЗаявок",МассивЗаявок);
		ТаблицаРазрезов = Запрос.Выполнить().Выгрузить();
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаявкаНаРасходованиеСредств.Ссылка,
			|	ЗаявкаНаРасходованиеСредств.Контрагент,
			|	ЗаявкаНаРасходованиеСредств.Номенклатура,
			|	ЗаявкаНаРасходованиеСредств.ЦФО
			|ПОМЕСТИТЬ ВТ_Заявки
			|ИЗ
			|	Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
			|ГДЕ
			|	ЗаявкаНаРасходованиеСредств.Ссылка В(&МассивЗаявок)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Заявки.Ссылка,
			|	ВТ_Заявки.Контрагент КАК Значение,
			|	ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Контрагент) КАК Измерение
			|ИЗ
			|	ВТ_Заявки КАК ВТ_Заявки
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВТ_Заявки.Ссылка,
			|	ВТ_Заявки.Номенклатура,
			|	ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Номенклатура)
			|ИЗ
			|	ВТ_Заявки КАК ВТ_Заявки
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВТ_Заявки.Ссылка,
			|	ВТ_Заявки.ЦФО,
			|	ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение)
			|ИЗ
			|	ВТ_Заявки КАК ВТ_Заявки";
 		Запрос.УстановитьПараметр("МассивЗаявок",МассивЗаявок);
		ТаблицаРазрезов = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Для Каждого СтрокаИсточника Из мИсточник Цикл
		СтрокиЗаявка = ТаблицаСценариев.НайтиСтроки(Новый Структура("Ссылка",СтрокаИсточника.ЗаявкаНаРасходование));
		Если СтрокиЗаявка.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ СтрокиЗаявка[0].ПоПроектам Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИсточника.Проект) И ТипЗнч(СтрокаИсточника.Проект)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникВидыРаспределенияПоПроектам() Тогда
			фин_УправлениеПроектами.РаспределитьДвиженияДСПоПроектам(мИсточник,СтрокаИсточника,СтрокаИсточника.Проект,КонецМесяца(СтрокаИсточника.Период));
		КонецЕсли;
	КонецЦикла;
	КЭШ_Разрезы = Новый Соответствие;
	СоответствиеРазрезов = Новый Соответствие;
	СоответствиеДопРазрезов = Новый Соответствие;
	СписокНеобрабатываемых = Новый Массив;
	Для Каждого СтрокаДвижений Из мИсточник Цикл
		Заявка = СтрокаДвижений.ЗаявкаНаРасходование;
		Если СписокНеобрабатываемых.Найти(Заявка)<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
        СтрокиСценария = ТаблицаСценариев.НайтиСтроки(Новый Структура("Ссылка",Заявка));
		Сценарий 				= СтрокиСценария[0].Сценарий;
		ФинансовыйПоказатель 	= СтрокиСценария[0].ФинансовыйПоказатель;
		Валюта 					= СтрокиСценария[0].ВалютаДокумента;
		Если НЕ ЗначениеЗаполнено(ФинансовыйПоказатель) Тогда
			СписокНеобрабатываемых.Добавить(Заявка);
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = СтрокаДвижений.Период;
		НоваяЗапись.ВидДвижения = СтрокаДвижений.ВидДвижения;
		// основное
		НоваяЗапись.Организация = СтрокаДвижений.Организация;
		НоваяЗапись.ЗаявкаНаРасходование = Заявка;
		НоваяЗапись.Сценарий = Сценарий;
		НоваяЗапись.ФинансовыйПоказатель = ФинансовыйПоказатель;
		// разрезы
		ЗаполнениеРазрезов = СоответствиеРазрезов.Получить(Заявка);
		ЗаполнениеДопРазрезов = СоответствиеДопРазрезов.Получить(Заявка);
		ЗаполнениеРазрезовИзДокумента = Новый Структура;
		Если ЗаполнениеРазрезов=Неопределено Тогда
			ЗаполнениеРазрезов = Новый Структура;
			РазрезыУчетаПоСтатье = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокРазрезовСтатьи(ФинансовыйПоказатель);
			СтруктураДопРазрезов = Новый Структура;
			ЕстьСДДС = Ложь;
			Для Каждого Разрез Из РазрезыУчетаПоСтатье Цикл
				СтрокиРазрез = ТаблицаРазрезов.НайтиСтроки(Новый Структура("Ссылка,Измерение",Заявка,Разрез.Значение));
				Если СтрокиРазрез.Количество()>0 Тогда
					Значение = СтрокиРазрез[0].Значение;
					Если ТипЗнч(Значение)=Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") И ((НЕ ПоБюджетнымПараметрам) ИЛИ СтрокиРазрез[0].СпособУказанияЗначения = Перечисления.ден_СпособУказанияЗначенияБюджетногоПараметра.ПоДаннымДокумента) Тогда
						ЕстьСДДС = Истина;
					КонецЕсли;
				Иначе
					Если Не ПоБюджетнымПараметрам Тогда
						ЭПВХ = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Разрез.Значение,КЭШ_Разрезы);
						ТипСДДС = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств");
						Если ЭПВХ.ТипЗначения.СодержитТип(ТипСДДС) Тогда
							Значение = СтрокаДвижений.СтатьяДвиженияДенежныхСредств;
						ИначеЕсли Разрез.Значение = Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект Тогда
							Значение = СтрокаДвижений.Проект;
						Иначе
							Значение = ЭПВХ.ТипЗначения.ПривестиЗначение(Неопределено);
						КонецЕсли;
					Иначе
						ЭПВХ = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Разрез.Значение,КЭШ_Разрезы);
						Значение = ЭПВХ.ТипЗначения.ПривестиЗначение(Неопределено);
					КонецЕсли;
				КонецЕсли;
				ИмяРазреза = ИмяРазреза(Разрез.Значение);
				Если Найти(ИмяРазреза,"Разрез")=0 Тогда
					ЗаполнениеРазрезов.Вставить(ИмяРазреза,Значение);
				Иначе
					СтруктураДопРазрезов.Вставить(ИмяРазреза,Значение);
				КонецЕсли;
			КонецЦикла;
			ЗаполнениеРазрезов.Вставить("ДополнительныеРазрезы",фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОпределитьПозициюКлассификатораПоСтруктуре(СтруктураДопРазрезов));
			СоответствиеРазрезов.Вставить(Заявка,ЗаполнениеРазрезов);
			ЗаполнениеДопРазрезов = Новый Структура("Набор,ЕстьСДДС,ИмяРазрезаСДДС",СтруктураДопРазрезов,ЕстьСДДС,ИмяРазреза);
			СоответствиеДопРазрезов.Вставить(Заявка,ЗаполнениеДопРазрезов);
		КонецЕсли;
		Для Каждого РазрезЗаполняемый Из ЗаполнениеРазрезов Цикл
			Если РазрезЗаполняемый.Ключ = "ДополнительныеРазрезы" Тогда
				Если ЗаполнениеДопРазрезов.ЕстьСДДС Тогда
					ДопРазрезы = ЗаполнениеДопРазрезов.Набор;
					ДопРазрезы.Вставить(ЗаполнениеДопРазрезов.ИмяРазрезаСДДС,СтрокаДвижений.СтатьяДвиженияДенежныхСредств);
					ЗаполнениеРазрезов.Вставить("ДополнительныеРазрезы",фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОпределитьПозициюКлассификатораПоСтруктуре(ДопРазрезы));
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			СтрокиРазрез = ТаблицаРазрезов.НайтиСтроки(Новый Структура("Ссылка,Измерение",Заявка,Перечисления.фин_ФактическиеПоказателиБюджетирования[РазрезЗаполняемый.Ключ]));
			Если СтрокиРазрез.Количество()>0 Тогда
				Если ПоБюджетнымПараметрам И СтрокиРазрез[0].СпособУказанияЗначения = Перечисления.ден_СпособУказанияЗначенияБюджетногоПараметра.ПоДаннымДокумента Тогда
					ЗаполнениеРазрезов.Вставить(РазрезЗаполняемый.Ключ,СтрокаДвижений[?(РазрезЗаполняемый.Ключ="УправленческоеПодразделение","ЦФО",РазрезЗаполняемый.Ключ)]);
				КонецЕсли;
			ИначеЕсли (ПоБюджетнымПараметрам) И РазрезЗаполняемый.Ключ = "Проект" Тогда
				ЗаполнениеРазрезов.Вставить(РазрезЗаполняемый.Ключ,СтрокаДвижений.Проект);
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(НоваяЗапись,ЗаполнениеРазрезов);
		НоваяЗапись.Валюта = Валюта;
		// ресурсы
		НоваяЗапись.ВалютнаяСумма = СтрокаДвижений.Сумма;
		НоваяЗапись.СуммаУпр = СтрокаДвижений.СуммаУпр;
		
	КонецЦикла;
КонецПроцедуры

Процедура РасчетПредполагаемыхПоступленийПоБюджетамПриПланированииПоступленийДСПриЗаписи(Источник, Отказ, Замещение) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	
	Регистратор = Источник.Отбор.Регистратор.Значение;
	Если ТипЗнч(Регистратор)=Тип("ДокументСсылка.Сторнирование") ИЛИ ТипЗнч(Регистратор)=Тип("ДокументСсылка.КорректировкаЗаписейРегистров") Тогда
		Возврат;
	КонецЕсли;
	НаборЗаписей = РегистрыНакопления.ден_ПредполагаемыеПоступленияПоБюджетам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписей.Очистить();
	Если Источник.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
    ЗаполнитьПредполагаемыеПоступления(Источник.Выгрузить(),НаборЗаписей);
	НаборЗаписей.Записать();

КонецПроцедуры

Процедура ЗаполнитьПредполагаемыеПоступления(мИсточник,НаборЗаписей) Экспорт
	ТЗ_Заявки = мИсточник.Скопировать(,"ДокументПланирования");
	ТЗ_Заявки.Свернуть("ДокументПланирования");
	МассивЗаявок = ТЗ_Заявки.ВыгрузитьКолонку("ДокументПланирования");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланируемоеПоступлениеДенежныхСредств.ФинансовыйПоказатель,
	|	ПланируемоеПоступлениеДенежныхСредств.Сценарий,
	|	ПланируемоеПоступлениеДенежныхСредств.Ссылка,
	|	ПланируемоеПоступлениеДенежныхСредств.ВалютаДокумента
	|ИЗ
	|	Документ.ден_ПланируемоеПоступлениеДенежныхСредств КАК ПланируемоеПоступлениеДенежныхСредств
	|ГДЕ
	|	ПланируемоеПоступлениеДенежныхСредств.Ссылка В(&МассивЗаявок)";
	Запрос.УстановитьПараметр("МассивЗаявок",МассивЗаявок);
	ТаблицаСценариев = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БюджетныеПараметры.Ссылка,
	|	БюджетныеПараметры.Измерение,
	|	БюджетныеПараметры.Значение
	|ИЗ
	|	Документ.ден_ПланируемоеПоступлениеДенежныхСредств.БюджетныеПараметры КАК БюджетныеПараметры
	|ГДЕ
	|	БюджетныеПараметры.Ссылка В(&МассивЗаявок)";
	Запрос.УстановитьПараметр("МассивЗаявок",МассивЗаявок);
	ТаблицаРазрезов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаИсточника Из мИсточник Цикл
		Если ЗначениеЗаполнено(СтрокаИсточника.Проект) И ТипЗнч(СтрокаИсточника.Проект)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникВидыРаспределенияПоПроектам() Тогда
			фин_УправлениеПроектами.РаспределитьДвиженияДСПоПроектам(мИсточник,СтрокаИсточника,СтрокаИсточника.Проект,КонецМесяца(СтрокаИсточника.Период));
		КонецЕсли;
	КонецЦикла;
	КЭШ_Разрезы = Новый Соответствие;
	СоответствиеРазрезов = Новый Соответствие;
	СписокНеобрабатываемых = Новый Массив;
	Для Каждого СтрокаДвижений Из мИсточник Цикл
		Заявка = СтрокаДвижений.ДокументПланирования;
		Если СписокНеобрабатываемых.Найти(Заявка)<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
        СтрокиСценария = ТаблицаСценариев.НайтиСтроки(Новый Структура("Ссылка",Заявка));
		Сценарий 				= СтрокиСценария[0].Сценарий;
		ФинансовыйПоказатель 	= СтрокиСценария[0].ФинансовыйПоказатель;
		Валюта 					= СтрокиСценария[0].ВалютаДокумента;
		Если НЕ ЗначениеЗаполнено(ФинансовыйПоказатель) Тогда
			СписокНеобрабатываемых.Добавить(Заявка);
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = СтрокаДвижений.Период;
		НоваяЗапись.ВидДвижения = СтрокаДвижений.ВидДвижения;
		// основное
		НоваяЗапись.Организация = СтрокаДвижений.Организация;
		НоваяЗапись.ДокументПланирования = Заявка;
		НоваяЗапись.Сценарий = Сценарий;
		НоваяЗапись.ФинансовыйПоказатель = ФинансовыйПоказатель;
		// разрезы
		ЗаполнениеРазрезов = СоответствиеРазрезов.Получить(Заявка);
		Если ЗаполнениеРазрезов=Неопределено Тогда
			ЗаполнениеРазрезов = Новый Структура;
			РазрезыУчетаПоСтатье = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокРазрезовСтатьи(ФинансовыйПоказатель);
			СтруктураДопРазрезов = Новый Структура;
			Для Каждого Разрез Из РазрезыУчетаПоСтатье Цикл
				СтрокиРазрез = ТаблицаРазрезов.НайтиСтроки(Новый Структура("Ссылка,Измерение",Заявка,Разрез.Значение));
				Если СтрокиРазрез.Количество()>0 Тогда
					Значение = СтрокиРазрез[0].Значение;
				Иначе
					ЭПВХ = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Разрез.Значение,КЭШ_Разрезы);
					Значение = ЭПВХ.ТипЗначения.ПривестиЗначение(Неопределено);
				КонецЕсли;
				ИмяРазреза = ИмяРазреза(Разрез.Значение);
				Если Найти(ИмяРазреза,"Разрез")=0 Тогда
					ЗаполнениеРазрезов.Вставить(ИмяРазреза,Значение);
				Иначе
					СтруктураДопРазрезов.Вставить(ИмяРазреза,Значение);
				КонецЕсли;
			КонецЦикла;
			ЗаполнениеРазрезов.Вставить("ДополнительныеРазрезы",фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОпределитьПозициюКлассификатораПоСтруктуре(СтруктураДопРазрезов));
			СоответствиеРазрезов.Вставить(Заявка,ЗаполнениеРазрезов);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяЗапись,ЗаполнениеРазрезов);
		НоваяЗапись.Проект = СтрокаДвижений.Проект;
		НоваяЗапись.Валюта = Валюта;
		// ресурсы
		НоваяЗапись.ВалютнаяСумма = СтрокаДвижений.Сумма;
		НоваяЗапись.СуммаУпр = СтрокаДвижений.СуммаУпр;
		
	КонецЦикла;
КонецПроцедуры


Процедура ПереносПериодовПланированияВТабличнойЧасти(ОборотыПоСтатьям,Сценарий,ПериодПланирования,мПериод,ГоризонтПланирования) Экспорт
	мПериод = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(мПериод,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий));
	Для Каждого СтрокаОборотов Из ОборотыПоСтатьям Цикл
		Если СтрокаОборотов.ПериодПланирования ='00010101' Тогда
			СтрокаОборотов.ПериодПланирования = ПериодПланирования + (СтрокаОборотов.ПериодПланирования-мПериод);
			СтрокаОборотов.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаОборотов.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий));
		Иначе
			СмещениеПериода = 0;
			Если СтрокаОборотов.ПериодПланирования <> мПериод Тогда
				Флаг =1;
				Если СтрокаОборотов.ПериодПланирования < мПериод Тогда
					Флаг =-1;
				КонецЕсли;
				ТребуемыйПериод 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаОборотов.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий));
				РассчитанныйПериод 	= мПериод;
				Пока РассчитанныйПериод <> ТребуемыйПериод И (СмещениеПериода*Флаг)<10000 Цикл
					СмещениеПериода 	= СмещениеПериода + Флаг;
					РассчитанныйПериод  = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(РассчитанныйПериод,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),Флаг);
				КонецЦикла;
				СтрокаОборотов.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),СмещениеПериода);
			Иначе
				СтрокаОборотов.ПериодПланирования = ПериодПланирования;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаОборотов.ПериодПланирования <ПериодПланирования Тогда
			СтрокаОборотов.ПериодПланирования =ПериодПланирования;
		ИначеЕсли СтрокаОборотов.ПериодПланирования >ГоризонтПланирования Тогда
			СтрокаОборотов.ПериодПланирования =фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ГоризонтПланирования,Сценарий);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


Функция ТекстДляВременнойТаблицы(ИсходныйТекст,ИмяВТ,ПоляИндекса="")
	ПозицияИз1 = Найти(НРег(ИсходныйТекст),НРег(" ИЗ "));	
	ПозицияИз2 = Найти(НРег(ИсходныйТекст),НРег(Символы.ПС+"ИЗ "));
	ПозицияИз3 = Найти(НРег(ИсходныйТекст),НРег(Символы.ПС+"ИЗ"+Символы.ПС));
	Если ПозицияИз1 =0 Тогда
		ПозицияИз1 = СтрДлина(ИсходныйТекст);
	КонецЕсли;
	Если ПозицияИз2=0 Тогда
		ПозицияИз2 = СтрДлина(ИсходныйТекст);
	КонецЕсли;
	Если ПозицияИз3=0 Тогда
		ПозицияИз3 = СтрДлина(ИсходныйТекст);
	КонецЕсли;
	Позиция = Мин(ПозицияИз1,ПозицияИз2,ПозицияИз3);
	НовыйТекст = Лев(ИсходныйТекст,Позиция)+"
	|ПОМЕСТИТЬ "+ИмяВТ+"
	| "+Сред(ИсходныйТекст,Позиция);
	Если ПоляИндекса<>"" Тогда
		НовыйТекст=НовыйТекст+"
		|ИНДЕКСИРОВАТЬ ПО
		|	"+ПоляИндекса;
	КонецЕсли;
	Возврат НовыйТекст;
КонецФункции

Функция РазложитьТекстНаСлова(Текст) Экспорт
    МассивНедопустимыхСимволов = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьНедопустимыеСимволы();
	СлужебныеСлова = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьСлужебныеСловаЗапроса();
	МассивСлов = Новый Массив;
	ТекСлово = "";
	Для Инд = 1 По СтрДлина(Текст) Цикл
		Символ = Сред(Текст,Инд,1);
		Если МассивНедопустимыхСимволов.Найти(Символ)=Неопределено Тогда
			ТекСлово = ТекСлово + Символ;
		ИначеЕсли ТекСлово<>"" Тогда
			Если СлужебныеСлова.Найти(ВРег(ТекСлово))=Неопределено И НЕ фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ЧисловоеВыражение(ТекСлово) И МассивСлов.Найти(ТекСлово)=Неопределено Тогда
				МассивСлов.Добавить(ТекСлово);
			КонецЕсли;
			ТекСлово = "";
		КонецЕсли;
	КонецЦикла;
	Если ТекСлово<>"" Тогда
		Если СлужебныеСлова.Найти(ВРег(ТекСлово))=Неопределено И НЕ фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ЧисловоеВыражение(ТекСлово) И МассивСлов.Найти(ТекСлово)=Неопределено Тогда
			МассивСлов.Добавить(ТекСлово);
		КонецЕсли;
	КонецЕсли; 
	ТаблицаСлов = Новый ТаблицаЗначений;
	ТаблицаСлов.Колонки.Добавить("Слово");
	ТаблицаСлов.Колонки.Добавить("Длина");
	Для Каждого Слово Из МассивСлов Цикл
		НС = ТаблицаСлов.Добавить();
		НС.Слово = Слово;
		НС.Длина = СтрДлина(Слово);
	КонецЦикла;
	ТаблицаСлов.Сортировать("Длина УБЫВ");
	МассивСлов.Очистить();
	МассивСлов = ТаблицаСлов.ВыгрузитьКолонку("Слово");
	Возврат МассивСлов;
КонецФункции

Функция РассчитатьОтрезокФормулы(ТекстФормулы,ТаблицаЗначенийПоказателей,Заголовок="",ДатаРасчета) Экспорт
	Возврат фин_ЗащитаПривилегированныеПроцедуры.РассчитатьОтрезокФормулы(ТекстФормулы,ТаблицаЗначенийПоказателей,Заголовок,ДатаРасчета);;
КонецФункции

Функция ПолучитьРасчетПоФормуламБюджета(Бюджет,ВерсииБюджета,Организация,СписокИсключаемыхТиповВнутригрупповыхОборотов=Неопределено,НачалоПланирования,КонецПланирования,
		Граница,Периодичность,ТекстОтбораОбороты="",ТекстФильтраОбороты="",ПараметрыОтбора=Неопределено,ВРазрезеВалют=Ложь,ВидДанных=Неопределено,ГраницаФактическихИПрогнозных=Неопределено,Формула=Неопределено,ПолеФормулы="",ПеретекающийОстаток=Ложь,ПоказательПеретекающегоОстатка=Неопределено,ТаблицаПромежуточныеРасчеты=Неопределено,СценарийРасчета=Неопределено,РазрезыРасчетаФормул=Неопределено) Экспорт
	//ПараметрыОтбора.Вставить("ВидДанных",ВидДанных);	
	//ПараметрыОтбора.Вставить("ГраницаФактическихИПрогнозных",ГраницаФактическихИПрогнозных);	
	Возврат фин_ЗащитаПривилегированныеПроцедуры.ПолучитьРасчетПоФормуламБюджета(Бюджет,ВерсииБюджета,Организация,СписокИсключаемыхТиповВнутригрупповыхОборотов,НачалоПланирования,КонецПланирования,
		Граница,Периодичность,ТекстОтбораОбороты,ТекстФильтраОбороты,ПараметрыОтбора,ВРазрезеВалют,ВидДанных,ГраницаФактическихИПрогнозных,Формула,ПолеФормулы,ПеретекающийОстаток,ПоказательПеретекающегоОстатка,ТаблицаПромежуточныеРасчеты,СценарийРасчета,РазрезыРасчетаФормул);	
КонецФункции

Функция ПолучитьРасчетПоФормуле(Формула,ПолеРасчета,Сценарий,Организация,НачалоПланирования,КонецПланирования,
		Граница,Периодичность,ТекстОтбораОбороты="",ТекстФильтраОбороты="",ПараметрыОтбора=Неопределено,СтруктураРасчета="") Экспорт
	Возврат фин_ЗащитаПривилегированныеПроцедуры.ПолучитьРасчетПоФормуле(Формула,ПолеРасчета,Сценарий,Организация,НачалоПланирования,КонецПланирования,
		Граница,Периодичность,ТекстОтбораОбороты,ТекстФильтраОбороты,ПараметрыОтбора,СтруктураРасчета);	
КонецФункции

Функция ПредыдущийПериод(НачалоПериода,КонецПериода) Экспорт
	Если НачалоПериода = КонецПериода Тогда  //без разрыва
		Возврат НачалоПериода;
	ИначеЕсли КонецГода(НачалоПериода)=КонецПериода И НачалоГода(КонецПериода)=НачалоПериода Тогда //календарный год
		Возврат НачалоГода(НачалоПериода-1);
	ИначеЕсли (НачалоПериода=НачалоМесяца(НачалоПериода) И КонецПериода = КонецМесяца(КонецПериода) И КонецПериода = КонецМесяца(ДобавитьМесяц(НачалоПериода,12))) Тогда // произвольный квартал
		Возврат НачалоМесяца(ДобавитьМесяц(НачалоПериода,-12));
	ИначеЕсли КонецКвартала(НачалоПериода)=КонецПериода И НачалоКвартала(КонецПериода)=НачалоПериода Тогда //календарный квартал
		Возврат НачалоКвартала(НачалоПериода-1);
	ИначеЕсли (НачалоПериода=НачалоМесяца(НачалоПериода) И КонецПериода = КонецМесяца(КонецПериода) И КонецПериода = КонецМесяца(ДобавитьМесяц(НачалоПериода,3))) Тогда // произвольный квартал
		Возврат НачалоМесяца(ДобавитьМесяц(НачалоПериода,-3));
	ИначеЕсли КонецМесяца(НачалоПериода)=КонецПериода И НачалоМесяца(КонецПериода)=НачалоПериода Тогда //календарный месяц
		Возврат ДобавитьМесяц(НачалоПериода,-1);
	ИначеЕсли (НачалоПериода=НачалоДня(НачалоПериода) И КонецПериода = КонецДня(КонецПериода) И КонецПериода = КонецДня(ДобавитьМесяц(НачалоПериода,1))) Тогда // произвольный месяц
		Возврат НачалоДня(ДобавитьМесяц(НачалоПериода,-1));
	ИначеЕсли фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(НачалоПериода,Перечисления.фин_Периодичность.Декада)=КонецПериода И фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(КонецПериода,Перечисления.фин_Периодичность.Декада)=НачалоПериода Тогда //декада
		Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(НачалоПериода,Перечисления.фин_Периодичность.Декада,-1);
	ИначеЕсли КонецНедели(НачалоПериода)=КонецПериода И НачалоНедели(КонецПериода)=НачалоПериода Тогда //неделя
		Возврат НачалоНедели(НачалоПериода-1);
	ИначеЕсли КонецДня(НачалоПериода)=КонецПериода И НачалоДня(КонецПериода)=НачалоПериода Тогда  //день
		Возврат НачалоДня(НачалоПериода-24*60*60);
	Иначе // произвольный период
		Возврат НачалоДня(НачалоПериода - (НачалоДня(КонецПериода+1)-НачалоПериода));
	КонецЕсли;
КонецФункции

Функция СтатьяПоПоказателю(Показатель,Бюджет,Версия,КЭШ) Экспорт
	Если ТипЗнч(КЭШ)=Тип("Соответствие") Тогда
		ИзКЭШа = КЭШ.Получить(Показатель);
		Если ИзКЭШа<>Неопределено Тогда
			Возврат ИзКЭШа;
		КонецЕсли;
	Иначе
		ИзКЭШа = КЭШ.НайтиСтроки(Новый Структура("Показатель",Показатель));
		Если ИзКЭШа.Количество()>0 Тогда
			Возврат ИзКЭШа[0].Статья;
		КонецЕсли;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиБюджета.Ссылка КАК Статья,
		|	СтатьиБюджета.ФинансовыйПоказатель
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
		|ГДЕ
		|	НЕ СтатьиБюджета.ПометкаУдаления
		|	И НЕ СтатьиБюджета.ЭтоГруппа
		|	И СтатьиБюджета.Версия В(&Версия)
		|	И СтатьиБюджета.Владелец = &Владелец";
	Если ТипЗнч(Версия)=Тип("Массив") Тогда 
	    Версии = Новый СписокЗначений;
		Версии.Добавить(Версия);
		Версии.Добавить(Справочники.фин_ВерсииБюджетов.ПустаяСсылка());
	Иначе
		Версии = Версия;
	КонецЕсли;
	Запрос.УстановитьПараметр("Версия", Версии);
	Запрос.УстановитьПараметр("Владелец", Бюджет);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(КЭШ)=Тип("Соответствие") Тогда
			КЭШ.Вставить(Выборка.ФинансовыйПоказатель,Выборка.Статья);
		Иначе
			НС = КЭШ.Добавить();
			НС.Показатель = Выборка.ФинансовыйПоказатель;
			НС.Статья = Выборка.Статья;
		КонецЕсли;
	КонецЦикла;
	Если ТипЗнч(КЭШ)=Тип("Соответствие") Тогда
		ИзКЭШа = КЭШ.Получить(Показатель);
		Если ИзКЭШа=Неопределено Тогда
			КЭШ.Вставить(Показатель,Справочники.фин_СтатьиБюджета.ПустаяСсылка());
		КонецЕсли;
		Возврат Справочники.фин_СтатьиБюджета.ПустаяСсылка();
	Иначе
	 	ИзКЭШа = КЭШ.НайтиСтроки(Новый Структура("Показатель",Показатель));
		Если ИзКЭШа.Количество()=0 Тогда
			НС = КЭШ.Добавить();
			НС.Показатель = Показатель;
			НС.Статья = Справочники.фин_СтатьиБюджета.ПустаяСсылка();
			Возврат Справочники.фин_СтатьиБюджета.ПустаяСсылка();
		КонецЕсли;
		Возврат ИзКЭШа[0].Статья;
	КонецЕсли;
КонецФункции

Функция ВычислитьДляЗапроса(Выражение) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	"+Выражение+" КАК Результат";
	Результат = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = ?(Выборка.Результат=Null,0,Выборка.Результат);
	КонецЕсли;
	Возврат Результат;	
КонецФункции

#Если Клиент Тогда
	
// Процедура проверяет Напоминания из регистра.
// 
//  Параметры
//   ТаблицаНапоминаний - ТаблицаЗначений, с Напоминаниями
//
Процедура ПроверитьНапоминанияПользователя(ВыбПользователь) Экспорт
	Если НЕ фин_ОбщегоНазначенияСервер.ДоступКЗадачам("фин_ЗадачиБюджетногоПроцесса") Тогда
		Возврат;
	КонецЕсли;
	КоличествоЗадач = фин_ОбщегоНазначенияСервер.ПроверитьНапоминанияПользователяБюджетирование(ВыбПользователь);
	
	ФормаОповещения = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ФормаОповещенияОЗадачах");
	
	Если КоличествоЗадач>0 Тогда
		
		ФормаОповещения.Открыть();
		
		ФормаОповещения.АктивизироватьФорму(КоличествоЗадач);
		
	Иначе
		
		Если ФормаОповещения.Открыта() Тогда
			ФормаОповещения.Закрыть();
		КонецЕсли;
		
	КонецЕсли;


КонецПроцедуры // ПроверитьНапоминанияПользователя()

#КонецЕсли

Процедура Бюджетирование_ВводРасчетныхДокументовПремированияОбработкаЗаполнения(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	Если ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.фин_РасчетПоПлануМотивацииОтветственныхБюджетногоПроцесса") Тогда
		// Заполним реквизиты из стандартного набора.
		Попытка
			Выполнить("фин_ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Источник, ДанныеЗаполнения)");
		Исключение
		КонецПопытки;
		Если Метаданные.Документы.Найти("РегистрацияРазовыхНачисленийРаботниковОрганизаций")<>Неопределено И ТипЗнч(Источник)=Тип("ДокументОбъект.РегистрацияРазовыхНачисленийРаботниковОрганизаций") Тогда
			Источник.ДокументОснование = ДанныеЗаполнения.Ссылка;
			Источник.ПериодРегистрации = НачалоМесяца(ДанныеЗаполнения.Дата);
			Для Каждого СтрокаПремия Из ДанныеЗаполнения.Премии Цикл
				НоваяСтрока = Источник.ДополнительныеНачисления.Добавить();
				НоваяСтрока.ВидРасчета = СтрокаПремия.ВидРасчета;
				НоваяСтрока.Показатель1	= СтрокаПремия.Размер;
				НоваяСтрока.Результат = СтрокаПремия.Размер;
				НоваяСтрока.Авторасчет = Истина;
				НоваяСтрока.ДатаНачала = ДанныеЗаполнения.ДатаНачала;
				НоваяСтрока.ДатаОкончания = ДанныеЗаполнения.ДатаОкончания;

				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
					|	СотрудникиОрганизаций.ПодразделениеОрганизации
					|ИЗ
					|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
					|ГДЕ
					|	СотрудникиОрганизаций.Физлицо = &Физлицо
					|	И СотрудникиОрганизаций.ВидЗанятости <> &ВидЗанятости";

				Запрос.УстановитьПараметр("ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
				Запрос.УстановитьПараметр("Физлицо",СтрокаПремия.ФизическоеЛицо);

				Результат = Запрос.Выполнить();

				ВыборкаДетальныеЗаписи = Результат.Выбрать();

				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					НоваяСтрока.Сотрудник = ВыборкаДетальныеЗаписи.Сотрудник;
					НоваяСтрока.ПодразделениеОрганизации = ВыборкаДетальныеЗаписи.ПодразделениеОрганизации;
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли Метаданные.Документы.Найти("НачислениеЗарплатыРаботникамОрганизаций")<>Неопределено И ТипЗнч(Источник)=Тип("ДокументОбъект.НачислениеЗарплатыРаботникамОрганизаций") Тогда
			Источник.ПериодРегистрации = НачалоМесяца(ДанныеЗаполнения.Дата);
			Для Каждого СтрокаПремия Из ДанныеЗаполнения.Премии Цикл
				НоваяСтрока = Источник.Начисления.Добавить();
				НоваяСтрока.ФизЛицо = СтрокаПремия.ФизическоеЛицо;
				НоваяСтрока.ВидРасчета = СтрокаПремия.ВидРасчета;
				НоваяСтрока.Размер	= СтрокаПремия.Размер;
				НоваяСтрока.Результат = СтрокаПремия.Размер;
				НоваяСтрока.ДатаНачала = ДанныеЗаполнения.ДатаНачала;
				НоваяСтрока.ДатаОкончания = ДанныеЗаполнения.ДатаОкончания;

				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	"+?(Метаданные.РегистрыСведений.РаботникиОрганизаций.Измерения.Найти("Сотрудник")<>Неопределено,"СотрудникиОрганизаций.Сотрудник КАК Сотрудник","СотрудникиОрганизаций.Приказ КАК Приказ")+",
					|	СотрудникиОрганизаций.ПодразделениеОрганизации
					|ИЗ
					|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(,"+?(Метаданные.РегистрыСведений.РаботникиОрганизаций.Измерения.Найти("Сотрудник")<>Неопределено,"Сотрудник.","")+"Физлицо = &Физлицо) КАК СотрудникиОрганизаций
					|ГДЕ
					|	СотрудникиОрганизаций"+?(Метаданные.РегистрыСведений.РаботникиОрганизаций.Измерения.Найти("Сотрудник")<>Неопределено,".Сотрудник","")+".ВидЗанятости <> &ВидЗанятости";

				Запрос.УстановитьПараметр("ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
				Запрос.УстановитьПараметр("Физлицо",СтрокаПремия.ФизическоеЛицо);

				Результат = Запрос.Выполнить();

				ВыборкаДетальныеЗаписи = Результат.Выбрать();

				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если Метаданные.РегистрыСведений.РаботникиОрганизаций.Измерения.Найти("Сотрудник")<>Неопределено Тогда
						НоваяСтрока.Сотрудник = ВыборкаДетальныеЗаписи.Сотрудник;
					Иначе
						НоваяСтрока.Приказ = ВыборкаДетальныеЗаписи.Приказ;
					КонецЕсли;
					НоваяСтрока.ПодразделениеОрганизации = ВыборкаДетальныеЗаписи.ПодразделениеОрганизации;
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли Метаданные.Документы.Найти("РегистрацияРазовыхУдержанийРаботниковОрганизаций")<>Неопределено И ТипЗнч(Источник)=Тип("ДокументОбъект.РегистрацияРазовыхУдержанийРаботниковОрганизаций") Тогда
			Если Метаданные.Документы.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Реквизиты.Найти("ДокументОснование")<>Неопределено Тогда
				Источник.ДокументОснование = ДанныеЗаполнения.Ссылка;
			КонецЕсли;
			Источник.ПериодРегистрации = НачалоМесяца(ДанныеЗаполнения.Дата);
			Для Каждого СтрокаПремия Из ДанныеЗаполнения.Удержания Цикл
				НоваяСтрока = Источник.Удержания.Добавить();
 				НоваяСтрока.Физлицо = СтрокаПремия.ФизическоеЛицо;
				НоваяСтрока.ВидРасчета = СтрокаПремия.ВидРасчета;
				НоваяСтрока.Результат = СтрокаПремия.Размер;
				Если Метаданные.Документы.РегистрацияРазовыхУдержанийРаботниковОрганизаций.ТабличныеЧасти.Удержания.Реквизиты.Найти("Показатель1")<>Неопределено Тогда
					НоваяСтрока.Показатель1	= СтрокаПремия.Размер;
				ИначеЕсли Метаданные.Документы.РегистрацияРазовыхУдержанийРаботниковОрганизаций.ТабличныеЧасти.Удержания.Реквизиты.Найти("Размер")<>Неопределено Тогда
					НоваяСтрока.Размер	= СтрокаПремия.Размер;
				КонецЕсли;
				Если Метаданные.Документы.РегистрацияРазовыхУдержанийРаботниковОрганизаций.ТабличныеЧасти.Удержания.Реквизиты.Найти("Авторасчет")<>Неопределено Тогда
					НоваяСтрока.Авторасчет = Истина;
					НоваяСтрока.ДатаНачала = ДанныеЗаполнения.ДатаНачала;
					НоваяСтрока.ДатаОкончания = ДанныеЗаполнения.ДатаОкончания;
                КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


//Функция ОпределитьОписаниеТиповПоПутиРеквизита
//
Функция ОпределитьОписаниеТиповПоПутиРеквизита(ОбъектБазы,ПутьКРеквизиту,ВидДанных=Неопределено,ИмяИсточника=Неопределено,ОписаниеТиповАвтовыбора = Неопределено,УсловиеНаВложенноеПоле=Ложь,ВложенноеПоле=Неопределено) Экспорт
	ОписаниеТипов = Неопределено;
	Если ПутьКРеквизиту="Дата" Тогда
		Массив=Новый Массив;
		Массив.Добавить(Тип("Дата"));
		ОписаниеТипов = Новый ОписаниеТипов(Массив);
	ИначеЕсли ПутьКРеквизиту="Проведен" Тогда
		Массив=Новый Массив;
		Массив.Добавить(Тип("Булево"));
		ОписаниеТипов = Новый ОписаниеТипов(Массив);
	ИначеЕсли ПутьКРеквизиту="Номер" Тогда
		Массив=Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТипов = Новый ОписаниеТипов(Массив);
	ИначеЕсли ПутьКРеквизиту="Ссылка" Тогда
		Массив=Новый Массив;
		Массив.Добавить(Тип("ДокументСсылка."+ОбъектБазы.Имя));
		ОписаниеТипов = Новый ОписаниеТипов(Массив);
	ИначеЕсли Найти(ПутьКРеквизиту,":")=0 Тогда 
		ОписаниеТипов = ОпределитьОписаниеТиповПоРеквизитуИлиПолюРеквизита(ОбъектБазы.Реквизиты,ПутьКРеквизиту);
	Иначе
		Если ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти Тогда
			мРеквизит = ПутьКРеквизиту;
			Если Найти(мРеквизит,"АвтовыборПоТипу:")=0 Тогда
				мРеквизит = Сред(мРеквизит,Найти(мРеквизит,":")+1);
                ОписаниеТипов = ОпределитьОписаниеТиповПоРеквизитуИлиПолюРеквизита(ОбъектБазы.ТабличныеЧасти.Найти(ИмяИсточника).Реквизиты,мРеквизит);
			Иначе
				Если УсловиеНаВложенноеПоле=Ложь ИЛИ (НЕ ЗначениеЗаполнено(ВложенноеПоле)) ИЛИ ОписаниеТиповАвтовыбора=Неопределено Тогда
					МассивТипов = Новый Массив;
					МассивТипов.Добавить(ТипЗнч(ОписаниеТиповАвтовыбора));
					ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
				Иначе
					Прототип 	= Новый(ТипЗнч(ОписаниеТиповАвтовыбора));
					МассивТипов = Новый Массив;
					МассивТипов.Добавить(ТипЗнч(Прототип[ВложенноеПоле]));
					ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
				КонецЕсли;
			КонецЕсли;
		Иначе
			мРеквизит = ПутьКРеквизиту;
			мРеквизит = Сред(мРеквизит,Найти(мРеквизит,":")+1);
			ИмяРегистра = Сред(ИмяИсточника,Найти(ИмяИсточника,".")+1);
			ОбъектПоиска = Метаданные["Регистры"+?(Найти(ИмяИсточника,"Сведений.")<>0,"Сведений",?(Найти(ИмяИсточника,"Накопления.")<>0,"Накопления",?(Найти(ИмяИсточника,"Бухгалтерии.")<>0,"Бухгалтерии","Расчета")))].Найти(ИмяРегистра);
			Если Найти(ИмяИсточника,"Бухгалтерии.")<>0 Тогда
				Если Прав(мРеквизит,2)="Дт" ИЛИ Прав(мРеквизит,2)="Кт" Тогда
					мРеквизит = Лев(мРеквизит,СтрДлина(мРеквизит)-2);
				КонецЕсли;
				Если мРеквизит="Счет" Тогда
					ОписаниеТипов = Новый ОписаниеТипов("ПланСчетовСсылка."+ОбъектПоиска.ПланСчетов.Имя);
				Иначе
					ОписаниеТипов = ОпределитьОписаниеТиповПоРеквизитуИлиПолюРеквизита(ОбъектПоиска.Измерения,мРеквизит);
					Если ОписаниеТипов = Неопределено  Тогда
						ОписаниеТипов = ОпределитьОписаниеТиповПоРеквизитуИлиПолюРеквизита(ОбъектПоиска.Ресурсы,мРеквизит);
						Если ОписаниеТипов = Неопределено  Тогда
							ОписаниеТипов = ОпределитьОписаниеТиповПоРеквизитуИлиПолюРеквизита(ОбъектПоиска.Реквизиты,мРеквизит);
							Если ОписаниеТипов = Неопределено  Тогда
								Если мРеквизит="Счет" Тогда 
									ОписаниеТипов = Новый ОписаниеТипов("ПланСчетовСсылка."+ОбъектПоиска.ПланСчетов.Имя);
								ИначеЕсли Найти(мРеквизит,"ВидСубконто") Тогда
									ОписаниеТипов = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые");
								ИначеЕсли Найти(мРеквизит,"АвтовыборПоТипу") И ОписаниеТиповАвтовыбора <> Неопределено Тогда
									Если УсловиеНаВложенноеПоле=Ложь ИЛИ (НЕ ЗначениеЗаполнено(ВложенноеПоле)) ИЛИ ОписаниеТиповАвтовыбора=Неопределено Тогда
										МассивТипов = Новый Массив;
										МассивТипов.Добавить(ТипЗнч(ОписаниеТиповАвтовыбора));
										ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
									Иначе
										Прототип 	= Новый(ТипЗнч(ОписаниеТиповАвтовыбора));
										МассивТипов = Новый Массив;
										МассивТипов.Добавить(ТипЗнч(Прототип[ВложенноеПоле]));
										ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если Найти(ИмяИсточника,"Расчета.")<>0 И мРеквизит="ВидРасчета" Тогда
					ОписаниеТипов = Новый ОписаниеТипов("ПланВидовРасчетаСсылка."+ОбъектПоиска.ПланВидовРасчета.Имя);
				Иначе
					ОписаниеТипов = ОпределитьОписаниеТиповПоРеквизитуИлиПолюРеквизита(ОбъектПоиска.Измерения,мРеквизит);
					Если ОписаниеТипов = Неопределено  Тогда
						ОписаниеТипов = ОпределитьОписаниеТиповПоРеквизитуИлиПолюРеквизита(ОбъектПоиска.Ресурсы,мРеквизит);
						Если ОписаниеТипов = Неопределено  Тогда
							ОписаниеТипов = ОпределитьОписаниеТиповПоРеквизитуИлиПолюРеквизита(ОбъектПоиска.Реквизиты,мРеквизит);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ОписаниеТипов;
КонецФункции

//Функция ОпределитьОписаниеТиповПоРеквизитуИлиПолюРеквизита
//
Функция ОпределитьОписаниеТиповПоРеквизитуИлиПолюРеквизита(РеквизитыОбъектаБазы,ПутьКРеквизиту)
	Если Найти(СокрЛП(ПутьКРеквизиту),".")=0 Тогда
		Реквизит = РеквизитыОбъектаБазы.Найти(СокрЛП(ПутьКРеквизиту));
	Иначе
		мИмя = СокрЛП(ПутьКРеквизиту);
		Реквизит = РеквизитыОбъектаБазы.Найти(Лев(мИмя,Найти(мИмя,".")-1));
		Если Реквизит=Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если Реквизит.Тип.Типы().Количество()=1 Тогда
			//Если Найти(Строка(Реквизит.Тип.Типы()[0]),"Справочник ссылка:")<>0 Тогда
				Для Каждого СправочникМетаданных Из Метаданные.Справочники Цикл
					Если Реквизит.Тип.Типы()[0]=Тип("СправочникСсылка."+СправочникМетаданных.Имя) Тогда
						Реквизит = СправочникМетаданных.Реквизиты.Найти(Сред(мИмя,Найти(мИмя,".")+1));
						Прервать;
					КонецЕсли;
				КонецЦикла;
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Реквизит=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ОписаниеТипов = Реквизит.Тип;
	Возврат ОписаниеТипов;
КонецФункции

//Процедура ЗаполнитьДеревоРеквизитовДокумента
//
Процедура ЗаполнитьДеревоРеквизитовДокумента(ДеревоРеквизитов,ОбъектПоиска,ВидДанных=Неопределено,ИмяИсточника=Неопределено,ТребуетсяАвтовыборПоСубконто=Ложь,ТребуемыйТип=Неопределено,БезРеквизитовШапки=Ложь,ВсеПоля = Ложь) Экспорт
	Если ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента ИЛИ (НЕ БезРеквизитовШапки) Тогда
		Для Каждого Реквизит Из ОбъектПоиска.Реквизиты Цикл
			Если ТребуемыйТип=Неопределено И Реквизит.Тип.Типы().Количество()=1 Тогда
				Если Реквизит.Тип.Типы()[0]=Тип("Строка") Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			СтрокаДерева 				= ДеревоРеквизитов.Строки.Добавить();
			СтрокаДерева.Имя 			= Реквизит.Имя;
			СтрокаДерева.Представление 	= Реквизит.Синоним;
			ДополнитьСписокПолямиРеквизита(Реквизит,СтрокаДерева,ТребуемыйТип,ВсеПоля);
			Если ТребуемыйТип <> Неопределено И (НЕ ИмеетсяСоответствиеТипов(Реквизит.Тип,ТребуемыйТип)) И СтрокаДерева.Строки.Количество()=0 Тогда
				ДеревоРеквизитов.Строки.Удалить(СтрокаДерева);
			КонецЕсли;
		КонецЦикла;
		Если ТребуемыйТип = Неопределено ИЛИ (ТребуемыйТип <> Неопределено И ТребуемыйТип=Тип("Дата")) Тогда
			СтрокаДерева 				= ДеревоРеквизитов.Строки.Добавить();
			СтрокаДерева.Имя 			= "Дата";
			СтрокаДерева.Представление 	= "Дата";
		КонецЕсли;
		Если ТребуемыйТип = Неопределено ИЛИ (ТребуемыйТип <> Неопределено И ТребуемыйТип=Тип("Строка")) Тогда
			СтрокаДерева 				= ДеревоРеквизитов.Строки.Добавить();
			СтрокаДерева.Имя 			= "Номер";
			СтрокаДерева.Представление 	= "Номер";
		КонецЕсли;
		Если ТребуемыйТип = Неопределено ИЛИ (ТребуемыйТип <> Неопределено И ТребуемыйТип=Тип("ДокументСсылка."+ОбъектПоиска.Имя)) Тогда
			СтрокаДерева 				= ДеревоРеквизитов.Строки.Добавить();
			СтрокаДерева.Имя 			= "Ссылка";
			СтрокаДерева.Представление 	= "Ссылка";
		КонецЕсли;
		Если ТребуемыйТип = Неопределено ИЛИ (ТребуемыйТип <> Неопределено И ТребуемыйТип=Тип("Булево")) Тогда
			Если Строка(ОбъектПоиска.Проведение)="Разрешить" Тогда
				СтрокаДерева 				= ДеревоРеквизитов.Строки.Добавить();
				СтрокаДерева.Имя 			= "Проведен";
				СтрокаДерева.Представление 	= "Проведен";
			КонецЕсли;
		КонецЕсли;
		Если ТребуетсяАвтовыборПоСубконто Тогда
			ДобавитьВДеревоАвтовыборПоСубконто(ОбъектПоиска.Реквизиты,ДеревоРеквизитов.Строки,,ТребуемыйТип);
		КонецЕсли;
	КонецЕсли;
	Если ВидДанных=Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти Тогда
		ОбъектПоискаПодчиненный = ОбъектПоиска.ТабличныеЧасти.Найти(ИмяИсточника);
		СтрокаТЧ 					= ДеревоРеквизитов.Строки.Добавить();
		СтрокаТЧ.Имя 				= ИмяИсточника;
		СтрокаТЧ.Представление 		= "ТАБЛИЧНАЯ ЧАСТЬ: "+ОбъектПоискаПодчиненный.Синоним;
		СтрокаТЧ.ПодчиненныйОбъект	= Истина;
		Для Каждого Реквизит Из ОбъектПоискаПодчиненный.Реквизиты Цикл
			Если Реквизит.Тип.Типы().Количество()=1 Тогда
				Если Реквизит.Тип.Типы()[0]=Тип("Строка") Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			СтрокаРеквизитТЧ 					= СтрокаТЧ.Строки.Добавить();
			СтрокаРеквизитТЧ.Имя 				= Реквизит.Имя;
			СтрокаРеквизитТЧ.Представление 		= Реквизит.Синоним;
			ДополнитьСписокПолямиРеквизита(Реквизит,СтрокаРеквизитТЧ,ТребуемыйТип,ВсеПоля);
			Если ТребуемыйТип <> Неопределено И (НЕ ИмеетсяСоответствиеТипов(Реквизит.Тип,ТребуемыйТип)) И СтрокаРеквизитТЧ.Строки.Количество()=0 Тогда
				СтрокаТЧ.Строки.Удалить(СтрокаРеквизитТЧ);
			КонецЕсли;
		КонецЦикла;
		ДобавитьВДеревоАвтовыборПоСубконто(ОбъектПоискаПодчиненный.Реквизиты,СтрокаТЧ.Строки,ИмяИсточника,ТребуемыйТип);
		Если ИмеетсяСоответствиеТипов(ТребуемыйТип,Тип("Число")) Тогда //ТребуемыйТип=Тип("Число") Тогда
			Если ОбъектПоиска.Реквизиты.Найти("УчитыватьНДС")<>Неопределено
				И ОбъектПоиска.Реквизиты.Найти("СуммаВключаетНДС")<>Неопределено Тогда
				Если ОбъектПоискаПодчиненный.Реквизиты.Найти("Сумма")<>Неопределено
					И ОбъектПоискаПодчиненный.Реквизиты.Найти("СуммаНДС")<>Неопределено Тогда
					СтрокаРеквизитТЧ 					= СтрокаТЧ.Строки.Добавить();
					СтрокаРеквизитТЧ.Имя 				= "РассчитатьСуммуБезНДС";
					СтрокаРеквизитТЧ.Представление 		= "Рассчитать сумму без НДС";
					СтрокаРеквизитТЧ 					= СтрокаТЧ.Строки.Добавить();
					СтрокаРеквизитТЧ.Имя 				= "РассчитатьСуммуСНДС";
					СтрокаРеквизитТЧ.Представление 		= "Рассчитать сумму с НДС";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ТребуемыйТип <> Неопределено И СтрокаТЧ.Строки.Количество()=0 Тогда
			ДеревоРеквизитов.Строки.Удалить(СтрокаТЧ);
		КонецЕсли;
	ИначеЕсли ВидДанных=Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах Тогда
		Если ИмяИсточника = Неопределено ИЛИ ИмяИсточника="" Тогда
			ИмяИсточника = ОбъектПоиска.ПолноеИмя();	
		КонецЕсли;
		ИмяРегистра = Сред(ИмяИсточника,Найти(ИмяИсточника,".")+1);
		ОбъектПоискаПодчиненный = Метаданные["Регистры"+?(Найти(ИмяИсточника,"Сведений.")<>0,"Сведений",?(Найти(ИмяИсточника,"Накопления.")<>0,"Накопления",?(Найти(ИмяИсточника,"Бухгалтерии.")<>0,"Бухгалтерии","Расчета")))].Найти(ИмяРегистра);
		СтрокаТЧ 					= ДеревоРеквизитов.Строки.Добавить();
		СтрокаТЧ.Имя 				= ИмяИсточника;
		СтрокаТЧ.Представление 		= "НАБОР ДВИЖЕНИЙ: "+ОбъектПоискаПодчиненный.Синоним;
		СтрокаТЧ.ПодчиненныйОбъект	= Истина;
		СписокСвойств = Новый ТаблицаЗначений;
		СписокСвойств.Колонки.Добавить("Имя");
		СписокСвойств.Колонки.Добавить("Синоним");
		СписокСвойств.Колонки.Добавить("Тип");
		СписокСвойств.Колонки.Добавить("Балансовый");
		НовоеСвойство = СписокСвойств.Добавить();
		НовоеСвойство.Имя 			= "Период";
		НовоеСвойство.Синоним 		= "Период";
		НовоеСвойство.Тип 			= Новый ОписаниеТипов("Дата");
		НовоеСвойство.Балансовый 	= Истина;
		ВидРегистраТекущий = "РегистрБухгалтерии";
		Если Найти(ИмяИсточника,ВидРегистраТекущий)<>0 Тогда
			НовоеСвойство = СписокСвойств.Добавить();
			НовоеСвойство.Имя 			= "Счет";
			НовоеСвойство.Синоним 		= "Счет";
			НовоеСвойство.Тип 			= Новый ОписаниеТипов("ПланСчетовСсылка."+Метаданные.РегистрыБухгалтерии[Сред(ИмяИсточника,СтрДлина(ВидРегистраТекущий)+2)].ПланСчетов.Имя);
			НовоеСвойство.Балансовый 	= Ложь;
		КонецЕсли;
		ВидРегистраТекущий = "РегистрыБухгалтерии";
		Если Найти(ИмяИсточника,ВидРегистраТекущий)<>0 Тогда
			НовоеСвойство = СписокСвойств.Добавить();
			НовоеСвойство.Имя 			= "Счет";
			НовоеСвойство.Синоним 		= "Счет";
			НовоеСвойство.Тип 			= Новый ОписаниеТипов("ПланСчетовСсылка."+Метаданные.РегистрыБухгалтерии[Сред(ИмяИсточника,СтрДлина(ВидРегистраТекущий)+2)].ПланСчетов.Имя);
			НовоеСвойство.Балансовый 	= Ложь;
		КонецЕсли;
		ВидРегистраТекущий = "РегистрРасчета";
		Если Найти(ИмяИсточника,ВидРегистраТекущий)<>0  Тогда
			НовоеСвойство = СписокСвойств.Добавить();
			НовоеСвойство.Имя 			= "ВидРасчета";
			НовоеСвойство.Синоним 		= "Вид расчета";
			НовоеСвойство.Тип 			= Новый ОписаниеТипов("ПланВидовРасчетаСсылка."+Метаданные.РегистрыРасчета[Сред(ИмяИсточника,СтрДлина(ВидРегистраТекущий)+2)].ПланВидовРасчета.Имя);
			НовоеСвойство.Балансовый 	= Истина;
		КонецЕсли;
		ВидРегистраТекущий = "РегистрыРасчета";
		Если Найти(ИмяИсточника,ВидРегистраТекущий)<>0  Тогда
			НовоеСвойство = СписокСвойств.Добавить();
			НовоеСвойство.Имя 			= "ВидРасчета";
			НовоеСвойство.Синоним 		= "Вид расчета";
			НовоеСвойство.Тип 			= Новый ОписаниеТипов("ПланВидовРасчетаСсылка."+Метаданные.РегистрыРасчета[Сред(ИмяИсточника,СтрДлина(ВидРегистраТекущий)+2)].ПланВидовРасчета.Имя);
			НовоеСвойство.Балансовый 	= Истина;
		КонецЕсли;
		Если Найти(ИмяИсточника,"Бухгалтерии.")<>0 Тогда
			Для Каждого Реквизит Из ОбъектПоискаПодчиненный.Измерения Цикл
				Если Реквизит.Балансовый Тогда
					СтрокаРеквизитТЧ 					= СтрокаТЧ.Строки.Добавить();
					СтрокаРеквизитТЧ.Имя 				= Реквизит.Имя;
					СтрокаРеквизитТЧ.Представление 		= Реквизит.Синоним;
					ДополнитьСписокПолямиРеквизита(Реквизит,СтрокаРеквизитТЧ,ТребуемыйТип,ВсеПоля);
				Иначе
					СтрокаРеквизитТЧ 					= СтрокаТЧ.Строки.Добавить();
					СтрокаРеквизитТЧ.Имя 				= Реквизит.Имя+"Дт";
					СтрокаРеквизитТЧ.Представление 		= Реквизит.Синоним+" (Дт)";
					ДополнитьСписокПолямиРеквизита(Реквизит,СтрокаРеквизитТЧ,ТребуемыйТип,ВсеПоля);
					Если ТребуемыйТип <> Неопределено И (НЕ ИмеетсяСоответствиеТипов(Реквизит.Тип,ТребуемыйТип)) И СтрокаРеквизитТЧ.Строки.Количество()=0 Тогда
						СтрокаТЧ.Строки.Удалить(СтрокаРеквизитТЧ);
					КонецЕсли;
					СтрокаРеквизитТЧ 					= СтрокаТЧ.Строки.Добавить();
					СтрокаРеквизитТЧ.Имя 				= Реквизит.Имя+"Кт";
					СтрокаРеквизитТЧ.Представление 		= Реквизит.Синоним+" (Кт)";
					ДополнитьСписокПолямиРеквизита(Реквизит,СтрокаРеквизитТЧ,ТребуемыйТип,ВсеПоля);
				КонецЕсли;
				Если ТребуемыйТип <> Неопределено И (НЕ ИмеетсяСоответствиеТипов(Реквизит.Тип,ТребуемыйТип)) И СтрокаРеквизитТЧ.Строки.Количество()=0 Тогда
					СтрокаТЧ.Строки.Удалить(СтрокаРеквизитТЧ);
				КонецЕсли;
			КонецЦикла;
			Для Каждого Реквизит Из ОбъектПоискаПодчиненный.Ресурсы Цикл
				Если Реквизит.Балансовый Тогда
					СтрокаРеквизитТЧ 					= СтрокаТЧ.Строки.Добавить();
					СтрокаРеквизитТЧ.Имя 				= Реквизит.Имя;
					СтрокаРеквизитТЧ.Представление 		= Реквизит.Синоним;
				Иначе
					СтрокаРеквизитТЧ 					= СтрокаТЧ.Строки.Добавить();
					СтрокаРеквизитТЧ.Имя 				= Реквизит.Имя+"Дт";
					СтрокаРеквизитТЧ.Представление 		= Реквизит.Синоним+" (Дт)";
					Если ТребуемыйТип <> Неопределено И (НЕ ИмеетсяСоответствиеТипов(Реквизит.Тип,ТребуемыйТип)) И СтрокаРеквизитТЧ.Строки.Количество()=0 Тогда
						СтрокаТЧ.Строки.Удалить(СтрокаРеквизитТЧ);
					КонецЕсли;
					СтрокаРеквизитТЧ 					= СтрокаТЧ.Строки.Добавить();
					СтрокаРеквизитТЧ.Имя 				= Реквизит.Имя+"Кт";
					СтрокаРеквизитТЧ.Представление 		= Реквизит.Синоним+" (Кт)";
				КонецЕсли;
				Если ТребуемыйТип <> Неопределено И (НЕ ИмеетсяСоответствиеТипов(Реквизит.Тип,ТребуемыйТип)) И СтрокаРеквизитТЧ.Строки.Количество()=0 Тогда
					СтрокаТЧ.Строки.Удалить(СтрокаРеквизитТЧ);
				КонецЕсли;
			КонецЦикла;
			Для Каждого Реквизит Из ОбъектПоискаПодчиненный.Реквизиты Цикл
				Если Реквизит.Тип.Типы().Количество()=1 Тогда
					Если Реквизит.Тип.Типы()[0]=Тип("Строка") Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				СтрокаРеквизитТЧ 					= СтрокаТЧ.Строки.Добавить();
				СтрокаРеквизитТЧ.Имя 				= Реквизит.Имя;
				СтрокаРеквизитТЧ.Представление 		= Реквизит.Синоним;
				ДополнитьСписокПолямиРеквизита(Реквизит,СтрокаРеквизитТЧ,ТребуемыйТип,ВсеПоля);
				Если ТребуемыйТип <> Неопределено И (НЕ ИмеетсяСоответствиеТипов(Реквизит.Тип,ТребуемыйТип)) И СтрокаРеквизитТЧ.Строки.Количество()=0 Тогда
					СтрокаТЧ.Строки.Удалить(СтрокаРеквизитТЧ);
				КонецЕсли;
			КонецЦикла;
			Для Каждого Реквизит Из СписокСвойств Цикл
				Если Реквизит.Балансовый Тогда
					СтрокаРеквизитТЧ 					= СтрокаТЧ.Строки.Добавить();
					СтрокаРеквизитТЧ.Имя 				= Реквизит.Имя;
					СтрокаРеквизитТЧ.Представление 		= Реквизит.Синоним;
					ДополнитьСписокПолямиРеквизита(Реквизит,СтрокаРеквизитТЧ,ТребуемыйТип,ВсеПоля);
				Иначе
					СтрокаРеквизитТЧ 					= СтрокаТЧ.Строки.Добавить();
					СтрокаРеквизитТЧ.Имя 				= Реквизит.Имя+"Дт";
					СтрокаРеквизитТЧ.Представление 		= Реквизит.Синоним+" (Дт)";
					ДополнитьСписокПолямиРеквизита(Реквизит,СтрокаРеквизитТЧ,ТребуемыйТип,ВсеПоля);
					Если ТребуемыйТип <> Неопределено И (НЕ ИмеетсяСоответствиеТипов(Реквизит.Тип,ТребуемыйТип)) И СтрокаРеквизитТЧ.Строки.Количество()=0 Тогда
						СтрокаТЧ.Строки.Удалить(СтрокаРеквизитТЧ);
					КонецЕсли;
					СтрокаРеквизитТЧ 					= СтрокаТЧ.Строки.Добавить();
					СтрокаРеквизитТЧ.Имя 				= Реквизит.Имя+"Кт";
					СтрокаРеквизитТЧ.Представление 		= Реквизит.Синоним+" (Кт)";
					ДополнитьСписокПолямиРеквизита(Реквизит,СтрокаРеквизитТЧ,ТребуемыйТип,ВсеПоля);
				КонецЕсли;
				Если ТребуемыйТип <> Неопределено И (НЕ ИмеетсяСоответствиеТипов(Реквизит.Тип,ТребуемыйТип)) И СтрокаРеквизитТЧ.Строки.Количество()=0 Тогда
					СтрокаТЧ.Строки.Удалить(СтрокаРеквизитТЧ);
				КонецЕсли;
			КонецЦикла;
			СписокПолейСубконто = Новый СписокЗначений;
			Если ТребуемыйТип <> Неопределено Тогда
				Если ТипЗнч(ТребуемыйТип)=Тип("ОписаниеТипов") Тогда
					Для Каждого ВложенныйТип Из ТребуемыйТип.Типы() Цикл
						Если Найти(Строка(ВложенныйТип),"Справочник ссылка:")<>0 Тогда
							Для Каждого мСправочник Из Метаданные.Справочники Цикл
								Если ВложенныйТип = Тип("СправочникСсылка."+мСправочник.Имя) Тогда
									Для Каждого мРеквизит Из мСправочник.Реквизиты Цикл
										Если мРеквизит.Тип.СодержитТип(ВложенныйТип) Тогда
											СписокПолейСубконто.Добавить(мРеквизит.Имя,мРеквизит.Синоним);
										КонецЕсли;
									КонецЦикла;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Если Найти(Строка(ТребуемыйТип),"Справочник ссылка:")<>0 Тогда
						Для Каждого мСправочник Из Метаданные.Справочники Цикл
							Если ТребуемыйТип = Тип("СправочникСсылка."+мСправочник.Имя) Тогда
								Для Каждого мРеквизит Из мСправочник.Реквизиты Цикл
									Если мРеквизит.Тип.СодержитТип(ТребуемыйТип) Тогда
										СписокПолейСубконто.Добавить(мРеквизит.Имя,мРеквизит.Синоним);
									КонецЕсли;
								КонецЦикла;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			СписокСвойств = Новый СписокЗначений;
			Если  ТребуемыйТип <> Неопределено Тогда
				Если ТребуетсяАвтовыборПоСубконто Тогда
					СписокСвойств.Добавить("АвтовыборПоТипу:СубконтоКт","Автовыбор по типу: Субконто Кт");
					СписокСвойств.Добавить("АвтовыборПоТипу:СубконтоДт","Автовыбор по типу: Субконто Дт");
				КонецЕсли;
			Иначе
				СписокСвойств.Добавить("СчетДт","Счет Дт");
				СписокСвойств.Добавить("СчетКт","Счет Кт");
				Если ТребуетсяАвтовыборПоСубконто Тогда
					СписокСвойств.Добавить("АвтовыборПоТипу:СубконтоКт","Автовыбор по типу: Субконто Кт");
					СписокСвойств.Добавить("АвтовыборПоТипу:СубконтоДт","Автовыбор по типу: Субконто Дт");
				КонецЕсли;
				СписокСвойств.Добавить("СубконтоДт1","Субконто Дт (1)");
				СписокСвойств.Добавить("СубконтоДт2","Субконто Дт (2)");
				СписокСвойств.Добавить("СубконтоДт3","Субконто Дт (3)");
				СписокСвойств.Добавить("СубконтоКт1","Субконто Кт (1)");
				СписокСвойств.Добавить("СубконтоКт2","Субконто Кт (2)");
				СписокСвойств.Добавить("СубконтоКт3","Субконто Кт (3)");
				СписокСвойств.Добавить("ВидСубконтоДт1","Вид Субконто Дт (1)");
				СписокСвойств.Добавить("ВидСубконтоДт2","Вид Субконто Дт (2)");
				СписокСвойств.Добавить("ВидСубконтоДт3","Вид Субконто Дт (3)");
				СписокСвойств.Добавить("ВидСубконтоКт1","Вид Субконто Кт (1)");
				СписокСвойств.Добавить("ВидСубконтоКт2","Вид Субконто Кт (2)");
				СписокСвойств.Добавить("ВидСубконтоКт3","Вид Субконто Кт (3)");
			КонецЕсли;
			Для Каждого Реквизит Из СписокСвойств Цикл
				СтрокаРеквизитТЧ 					= СтрокаТЧ.Строки.Добавить();
				СтрокаРеквизитТЧ.Имя 				= Реквизит.Значение;
				СтрокаРеквизитТЧ.Представление 		= Реквизит.Представление;
				Если Найти(Реквизит.Значение,"АвтовыборПоТипу:Субконто")<>0 Тогда
					Для Каждого ПолеСубконто Из СписокПолейСубконто Цикл
						СтрокаРеквизитПоляТЧ 					= СтрокаРеквизитТЧ.Строки.Добавить();
						СтрокаРеквизитПоляТЧ.Имя 				= ПолеСубконто.Значение;
						СтрокаРеквизитПоляТЧ.Представление 		= ПолеСубконто.Представление;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого Реквизит Из ОбъектПоискаПодчиненный.Измерения Цикл
				СтрокаРеквизитТЧ 					= СтрокаТЧ.Строки.Добавить();
				СтрокаРеквизитТЧ.Имя 				= Реквизит.Имя;
				СтрокаРеквизитТЧ.Представление 		= Реквизит.Синоним;
				ДополнитьСписокПолямиРеквизита(Реквизит,СтрокаРеквизитТЧ,ТребуемыйТип,ВсеПоля);
				Если ТребуемыйТип <> Неопределено И (НЕ ИмеетсяСоответствиеТипов(Реквизит.Тип,ТребуемыйТип)) И СтрокаРеквизитТЧ.Строки.Количество()=0 Тогда
					СтрокаТЧ.Строки.Удалить(СтрокаРеквизитТЧ);
				КонецЕсли;
			КонецЦикла;
			Для Каждого Реквизит Из ОбъектПоискаПодчиненный.Ресурсы Цикл
				СтрокаРеквизитТЧ 					= СтрокаТЧ.Строки.Добавить();
				СтрокаРеквизитТЧ.Имя 				= Реквизит.Имя;
				СтрокаРеквизитТЧ.Представление 		= Реквизит.Синоним;
				ДополнитьСписокПолямиРеквизита(Реквизит,СтрокаРеквизитТЧ,ТребуемыйТип,ВсеПоля);
				Если ТребуемыйТип <> Неопределено И (НЕ ИмеетсяСоответствиеТипов(Реквизит.Тип,ТребуемыйТип)) И СтрокаРеквизитТЧ.Строки.Количество()=0 Тогда
					СтрокаТЧ.Строки.Удалить(СтрокаРеквизитТЧ);
				КонецЕсли;
			КонецЦикла;
			Для Каждого Реквизит Из ОбъектПоискаПодчиненный.Реквизиты Цикл
				Если Реквизит.Тип.Типы().Количество()=1 Тогда
					Если Реквизит.Тип.Типы()[0]=Тип("Строка") Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				СтрокаРеквизитТЧ 					= СтрокаТЧ.Строки.Добавить();
				СтрокаРеквизитТЧ.Имя 				= Реквизит.Имя;
				СтрокаРеквизитТЧ.Представление 		= Реквизит.Синоним;
				ДополнитьСписокПолямиРеквизита(Реквизит,СтрокаРеквизитТЧ,ТребуемыйТип,ВсеПоля);
				Если ТребуемыйТип <> Неопределено И (НЕ ИмеетсяСоответствиеТипов(Реквизит.Тип,ТребуемыйТип)) И СтрокаРеквизитТЧ.Строки.Количество()=0 Тогда
					СтрокаТЧ.Строки.Удалить(СтрокаРеквизитТЧ);
				КонецЕсли;
			КонецЦикла;
			Для Каждого Реквизит Из СписокСвойств Цикл
				СтрокаРеквизитТЧ 					= СтрокаТЧ.Строки.Добавить();
				СтрокаРеквизитТЧ.Имя 				= Реквизит.Имя;
				СтрокаРеквизитТЧ.Представление 		= Реквизит.Синоним;
				ДополнитьСписокПолямиРеквизита(Реквизит,СтрокаРеквизитТЧ,ТребуемыйТип,ВсеПоля);
				Если ТребуемыйТип <> Неопределено И (НЕ ИмеетсяСоответствиеТипов(Реквизит.Тип,ТребуемыйТип)) И СтрокаРеквизитТЧ.Строки.Количество()=0 Тогда
					СтрокаТЧ.Строки.Удалить(СтрокаРеквизитТЧ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ТребуемыйТип <> Неопределено И СтрокаТЧ.Строки.Количество()=0 Тогда
			ДеревоРеквизитов.Строки.Удалить(СтрокаТЧ);
		КонецЕсли;
	КонецЕсли;
	ДеревоРеквизитов.Строки.Сортировать("Представление",Истина);
КонецПроцедуры

//Процедура ЗаполнитьДеревоРеквизитовДокумента
//
Процедура ЗаполнитьДеревоРеквизитовОбъекта(ДеревоРеквизитов,ОбъектПоиска) Экспорт
	ПолноеИмя = ОбъектПоиска.ПолноеИмя();
	Для Каждого Реквизит Из ОбъектПоиска.Реквизиты Цикл
		Если Реквизит.Тип.Типы().Количество()=1 Тогда
			Если Реквизит.Тип.Типы()[0]=Тип("Строка") Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СтрокаДерева 				= ДеревоРеквизитов.Строки.Добавить();
		СтрокаДерева.Имя 			= Реквизит.Имя;
		СтрокаДерева.Представление 	= Реквизит.Синоним;
		ДополнитьСписокПолямиРеквизита(Реквизит,СтрокаДерева,Неопределено);
	КонецЦикла;
	Если Найти(ПолноеИмя,"Документ")<>0 Тогда
		СтрокаДерева 				= ДеревоРеквизитов.Строки.Добавить();
		СтрокаДерева.Имя 			= "Дата";
		СтрокаДерева.Представление 	= "Дата";
		СтрокаДерева 				= ДеревоРеквизитов.Строки.Добавить();
		СтрокаДерева.Имя 			= "Номер";
		СтрокаДерева.Представление 	= "Номер";
		Если Строка(ОбъектПоиска.Проведение)="Разрешить" Тогда
			СтрокаДерева 				= ДеревоРеквизитов.Строки.Добавить();
			СтрокаДерева.Имя 			= "Проведен";
			СтрокаДерева.Представление 	= "Проведен";
		КонецЕсли;
	КонецЕсли;	
	Если Найти(ПолноеИмя,"Справочник")<>0 ИЛИ Найти(ПолноеИмя,"ПланСчетов")<>0 ИЛИ Найти(ПолноеИмя,"ПланвидовРасчета")<>0 Тогда
		СтрокаДерева 				= ДеревоРеквизитов.Строки.Добавить();
		СтрокаДерева.Имя 			= "Код";
		СтрокаДерева.Представление 	= "Код";
		СтрокаДерева 				= ДеревоРеквизитов.Строки.Добавить();
		СтрокаДерева.Имя 			= "Наименование";
		СтрокаДерева.Представление 	= "Наименование";
	КонецЕсли;	
	СтрокаДерева 				= ДеревоРеквизитов.Строки.Добавить();
	СтрокаДерева.Имя 			= "Ссылка";
	СтрокаДерева.Представление 	= "Ссылка";
	ДеревоРеквизитов.Строки.Сортировать("Представление",Истина);
КонецПроцедуры

Функция ИмеетсяСоответствиеТипов(Тип1,Тип2)
	Если Тип1=Неопределено ИЛИ Тип2=Неопределено Тогда
		Возврат Ложь
	ИначеЕсли ТипЗнч(Тип1)=Тип("Тип") И ТипЗнч(Тип2)=Тип("Тип") Тогда
		Возврат Тип1 = Тип2;
	ИначеЕсли ТипЗнч(Тип1)=Тип("Тип") Тогда
	    Возврат Тип2.СодержитТип(Тип1);
	ИначеЕсли ТипЗнч(Тип2)=Тип("Тип") Тогда
	    Возврат Тип1.СодержитТип(Тип2);
	Иначе
		ИмеютсяПересечения = Ложь;
		Для Каждого ВложенныйТип1 Из Тип1.Типы() Цикл
			Для Каждого ВложенныйТип2 Из Тип2.Типы() Цикл
				Если ВложенныйТип1 = ВложенныйТип2 Тогда
					ИмеютсяПересечения = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Возврат ИмеютсяПересечения;
	КонецЕсли;
КонецФункции

//Процедура ДополнитьСписокПолямиРеквизита
//
Процедура ДополнитьСписокПолямиРеквизита(Реквизит,СтрокаРеквизитТЧ,ТребуемыйТип,ВсеПоля=Ложь)
		Если ВсеПоля ИЛИ Реквизит.Тип.Типы().Количество()=1 Тогда
			Если ВсеПоля ИЛИ (ТребуемыйТип <>Неопределено И ИмеетсяСоответствиеТипов(Реквизит.Тип,ТребуемыйТип)) Тогда	
				СтрокаРеквизитТЧ.ЕдиныйТип				= Истина;
			КонецЕсли;
			//Если Найти(Строка(Реквизит.Тип.Типы()[0]),"Справочник ссылка:")<>0 Тогда
				Для Каждого СправочникМетаданных Из Метаданные.Справочники Цикл
					Если Реквизит.Тип.Типы()[0]=Тип("СправочникСсылка."+СправочникМетаданных.Имя) Тогда
						Для Каждого РеквизитПодчиненный Из СправочникМетаданных.Реквизиты Цикл
							Если РеквизитПодчиненный.Тип.Типы().Количество()=1 Тогда
								Если РеквизитПодчиненный.Тип.Типы()[0]=Тип("Строка") Тогда
									Продолжить;
								КонецЕсли;
							КонецЕсли;
							Если (НЕ ВсеПоля) И (ТребуемыйТип <>Неопределено И (НЕ ИмеетсяСоответствиеТипов(РеквизитПодчиненный.Тип,ТребуемыйТип))) Тогда
								Продолжить;
							КонецЕсли;
							СтрокаПоляРеквизитаТЧ 					= СтрокаРеквизитТЧ.Строки.Добавить();
							СтрокаПоляРеквизитаТЧ.Имя 				= РеквизитПодчиненный.Имя;
							СтрокаПоляРеквизитаТЧ.Представление 	= РеквизитПодчиненный.Синоним;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				Для Каждого СправочникМетаданных Из Метаданные.Документы Цикл
					Если Реквизит.Тип.Типы()[0]=Тип("ДокументСсылка."+СправочникМетаданных.Имя) Тогда
						Для Каждого РеквизитПодчиненный Из СправочникМетаданных.Реквизиты Цикл
							Если РеквизитПодчиненный.Тип.Типы().Количество()=1 Тогда
								Если РеквизитПодчиненный.Тип.Типы()[0]=Тип("Строка") Тогда
									Продолжить;
								КонецЕсли;
							КонецЕсли;
							Если (НЕ ВсеПоля) И (ТребуемыйТип <>Неопределено И (НЕ ИмеетсяСоответствиеТипов(РеквизитПодчиненный.Тип,ТребуемыйТип))) Тогда
								Продолжить;
							КонецЕсли;
							СтрокаПоляРеквизитаТЧ 					= СтрокаРеквизитТЧ.Строки.Добавить();
							СтрокаПоляРеквизитаТЧ.Имя 				= РеквизитПодчиненный.Имя;
							СтрокаПоляРеквизитаТЧ.Представление 	= РеквизитПодчиненный.Синоним;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			//КонецЕсли;
		КонецЕсли;
КонецПроцедуры


//Процедура ДобавитьВДеревоАвтовыборПоСубконто
//
Процедура ДобавитьВДеревоАвтовыборПоСубконто(НаборРеквизитов,СтрокиДерева,Префикс=Неопределено,ТребуемыйТип) Экспорт
	СписокПолейСубконто = Новый СписокЗначений;
	Если ТребуемыйТип <> Неопределено Тогда
		Если ТипЗнч(ТребуемыйТип)=Тип("ОписаниеТипов") Тогда
			Для Каждого ВложенныйТип Из ТребуемыйТип.Типы() Цикл
				Если Найти(Строка(ВложенныйТип),"Справочник ссылка:")<>0 Тогда
					Для Каждого мСправочник Из Метаданные.Справочники Цикл
						Если ВложенныйТип = Тип("СправочникСсылка."+мСправочник.Имя) Тогда
							Для Каждого мРеквизит Из мСправочник.Реквизиты Цикл
								Если мРеквизит.Тип.СодержитТип(ВложенныйТип) Тогда
									СписокПолейСубконто.Добавить(мРеквизит.Имя,мРеквизит.Синоним);
								КонецЕсли;
							КонецЦикла;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если Найти(Строка(ТребуемыйТип),"Справочник ссылка:")<>0 Тогда
				Для Каждого мСправочник Из Метаданные.Справочники Цикл
					Если ТребуемыйТип = Тип("СправочникСсылка."+мСправочник.Имя) Тогда
						Для Каждого мРеквизит Из мСправочник.Реквизиты Цикл
							Если мРеквизит.Тип.СодержитТип(ТребуемыйТип) Тогда
								СписокПолейСубконто.Добавить(мРеквизит.Имя,мРеквизит.Синоним);
							КонецЕсли;
						КонецЦикла;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Реквизит Из НаборРеквизитов Цикл
		Если Найти(Реквизит.Имя,"Субконто")<>0 И Прав(Реквизит.Имя,1)="1" Тогда
			Имя = Лев(Реквизит.Имя,СтрДлина(Реквизит.Имя)-1);
			Если НаборРеквизитов.Найти(Имя+"2")<> Неопределено И НаборРеквизитов.Найти(Имя+"3")<> Неопределено Тогда
				СтрокаДерева = СтрокиДерева.Добавить();
				СтрокаДерева.Имя 			= "АвтовыборПоТипу:"+Имя;
				СтрокаДерева.Представление 	= "Автовыбор по типу из: "+Имя;
				Для Каждого ПолеСубконто Из СписокПолейСубконто Цикл
					СтрокаРеквизитПоляТЧ 					= СтрокаДерева.Строки.Добавить();
					СтрокаРеквизитПоляТЧ.Имя 				= ПолеСубконто.Значение;
					СтрокаРеквизитПоляТЧ.Представление 		= ПолеСубконто.Представление;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ДобавитьВДеревоАвтовыборПоСубконто

Функция ПередатьДанныеАнализаСтруктуры(Показатель,УникальныйИдентификатор,ВсеУровни=Ложь) Экспорт
	ТаблицаЭлементов = Новый ТаблицаЗначений;
	ТаблицаЭлементов.Колонки.Добавить("Текст");
	ТаблицаЭлементов.Колонки.Добавить("Объект");
	ТаблицаЭлементов.Колонки.Добавить("Основание");
	ТаблицаЭлементов.Колонки.Добавить("КартинкаОснование");
	ТаблицаЭлементов.Колонки.Добавить("R");
	ТаблицаЭлементов.Колонки.Добавить("G");
	ТаблицаЭлементов.Колонки.Добавить("B");
	ТаблицаСвязей = Новый ТаблицаЗначений;
	ТаблицаСвязей.Колонки.Добавить("НомерИсходного");
	ТаблицаСвязей.Колонки.Добавить("НомерРезультирующего");
	ТаблицаСвязей.Колонки.Добавить("Основание");
	ТаблицаСвязей.Колонки.Добавить("КартинкаОснование");
	ТаблицаСвязей.Колонки.Добавить("Раунд");
	НС = ТаблицаЭлементов.Добавить();
	НС.Текст = Показатель.Наименование;
	НС.Объект = Показатель.Ссылка;
	НС.R = 152;
	НС.G = 251;
	НС.B = 152;
	ДобавитьВлияющие(ТаблицаЭлементов,ТаблицаСвязей,Показатель.Ссылка,ТаблицаЭлементов.Индекс(НС)+1,ВсеУровни,Показатель,-1);
	ДобавитьЗависимые(ТаблицаЭлементов,ТаблицаСвязей,Показатель.Ссылка,ТаблицаЭлементов.Индекс(НС)+1,ВсеУровни,Показатель,1);
	Для Каждого НС Из ТаблицаСвязей Цикл
		Если ЗначениеЗаполнено(НС.Основание) Тогда
			Тип = ТипЗнч(НС.Основание);
			Если Тип = Тип("СправочникСсылка.фин_ФормулыРасчетаФинансовыхПоказателей") Тогда
				НС.КартинкаОснование = "фин_Расчеты";
			ИначеЕсли Тип = Тип("СправочникСсылка.фин_ПроизводственныеМодели") Тогда
				НС.КартинкаОснование = "фин_ПроизводственныеМодели";
			ИначеЕсли Тип = Тип("ДокументСсылка.фин_РасчетнаяМодельБюджетирования") Тогда
				НС.КартинкаОснование = "фин_РассчитатьБюджет";
			ИначеЕсли Тип = Тип("СправочникСсылка.фин_МоделиРаспределенияБюджетныхДанных") Тогда
				НС.КартинкаОснование = "фин_РаспределениеПоПериодам";
			ИначеЕсли Тип = Тип("ДокументСсылка.фин_НастройкаЗависимостейМеждуФинансовымиПоказателями") Тогда
				НС.КартинкаОснование = "фин_Зависимости";
			Иначе
				НС.КартинкаОснование = "фин_Остатки";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат ПоместитьВоВременноеХранилище(Новый Структура("ЭлементыСвязи,Связи",ТаблицаЭлементов,ТаблицаСвязей),УникальныйИдентификатор)	
КонецФункции

Процедура ДобавитьВлияющие(ТаблицаЭлементов,ТаблицаСвязей,Показатель,НомерСтроки,ВсеУровни=Истина,АнализируемыйОбъект = Неопределено,Раунд=-1)
	Влияющие = ПолучитьВлияющие(Показатель);
	Для Каждого Влияющий Из Влияющие Цикл
		Если Влияющий.Объект = ТаблицаЭлементов[НомерСтроки-1].Объект Тогда
			Продолжить;
		КонецЕсли;
		Если ИмеетсяВПоследующих(ТаблицаЭлементов,ТаблицаСвязей,НомерСтроки,Влияющий.Объект,АнализируемыйОбъект) Тогда
			Продолжить;
		КонецЕсли;
		СтрокиНайдены = ТаблицаЭлементов.НайтиСтроки(Новый Структура("Объект",Влияющий.Объект));
		Если СтрокиНайдены.Количество()>0 Тогда
			Для Каждого СуществующаяСтрока Из СтрокиНайдены Цикл
				Связь = ТаблицаСвязей.Добавить();
				Связь.НомерРезультирующего  = НомерСтроки;	
				Связь.НомерИсходного 		= ТаблицаЭлементов.Индекс(СуществующаяСтрока)+1;
				Связь.Основание 			= Влияющий.Основание;
				Связь.Раунд 				= Раунд;
			КонецЦикла;
		Иначе
			СтрокаВлияющего = ТаблицаЭлементов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВлияющего,Влияющий);
			СтрокаВлияющего.R = 255;
			СтрокаВлияющего.G = 215;
			СтрокаВлияющего.B = 0;
			Связь = ТаблицаСвязей.Добавить();
			Связь.НомерРезультирующего 	= НомерСтроки;	
			Связь.НомерИсходного 		= ТаблицаЭлементов.Индекс(СтрокаВлияющего)+1;
			Связь.Основание 			= Влияющий.Основание;
			Связь.Раунд 				= Раунд;
			Если ВсеУровни И ТаблицаЭлементов.НайтиСтроки(Новый Структура("Объект",СтрокаВлияющего.Объект)).Количество()<=1 Тогда
				ДобавитьВлияющие(ТаблицаЭлементов,ТаблицаСвязей,СтрокаВлияющего.Объект,ТаблицаЭлементов.Индекс(СтрокаВлияющего)+1,,АнализируемыйОбъект,Раунд-1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьЗависимые(ТаблицаЭлементов,ТаблицаСвязей,Показатель,НомерСтроки,ВсеУровни=Истина,АнализируемыйОбъект = Неопределено,Раунд=1)
	Влияющие = ПолучитьЗависимые(Показатель);
	Для Каждого Влияющий Из Влияющие Цикл
		Если Влияющий.Объект = ТаблицаЭлементов[НомерСтроки-1].Объект Тогда
			Продолжить;
		КонецЕсли;
		Если ИмеетсяВПредшественниках(ТаблицаЭлементов,ТаблицаСвязей,НомерСтроки,Влияющий.Объект,АнализируемыйОбъект) Тогда
			Продолжить;
		КонецЕсли;
		СтрокиНайдены = ТаблицаЭлементов.НайтиСтроки(Новый Структура("Объект",Влияющий.Объект));
		Если СтрокиНайдены.Количество()>0 Тогда
			Для Каждого СуществующаяСтрока Из СтрокиНайдены Цикл
				Связь = ТаблицаСвязей.Добавить();
				Связь.НомерИсходного  		= НомерСтроки;	
				Связь.НомерРезультирующего 	= ТаблицаЭлементов.Индекс(СуществующаяСтрока)+1;
				Связь.Основание 			= Влияющий.Основание;
				Связь.Раунд 				= Раунд;
			КонецЦикла;
		Иначе
			СтрокаВлияющего = ТаблицаЭлементов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВлияющего,Влияющий);
			СтрокаВлияющего.R = 0;
			СтрокаВлияющего.G = 191;
			СтрокаВлияющего.B = 255;
			Связь = ТаблицаСвязей.Добавить();
			Связь.НомерИсходного  		= НомерСтроки;	
			Связь.НомерРезультирующего 	= ТаблицаЭлементов.Индекс(СтрокаВлияющего)+1;
			Связь.Основание 			= Влияющий.Основание;
			Связь.Раунд 				= Раунд;
			Если ВсеУровни И ТаблицаЭлементов.НайтиСтроки(Новый Структура("Объект",СтрокаВлияющего.Объект)).Количество()<=1 Тогда
				ДобавитьЗависимые(ТаблицаЭлементов,ТаблицаСвязей,СтрокаВлияющего.Объект,ТаблицаЭлементов.Индекс(СтрокаВлияющего)+1,,АнализируемыйОбъект,Раунд+1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ИмеетсяВПредшественниках(ТаблицаЭлементов,ТаблицаСвязей,НомерСтроки,ВлияющийОбъект,АнализируемыйОбъект = Неопределено)
	Если ТаблицаЭлементов[НомерСтроки-1].Объект=АнализируемыйОбъект Тогда
		Возврат Ложь;
	КонецЕсли;
    ВходяшиеСтроки = ТаблицаСвязей.НайтиСтроки(Новый Структура("НомерРезультирующего",НомерСтроки));
	Для Каждого СтрокаВходящая Из ВходяшиеСтроки Цикл
		СтрокаОбъекта = ТаблицаЭлементов[СтрокаВходящая.НомерИсходного-1];
		Если СтрокаОбъекта.Объект = ВлияющийОбъект Тогда
			Возврат Истина;
		ИначеЕсли ИмеетсяВПредшественниках(ТаблицаЭлементов,ТаблицаСвязей,СтрокаВходящая.НомерИсходного,ВлияющийОбъект,АнализируемыйОбъект) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ИмеетсяВПоследующих(ТаблицаЭлементов,ТаблицаСвязей,НомерСтроки,ВлияющийОбъект,АнализируемыйОбъект = Неопределено)
	Если ТаблицаЭлементов[НомерСтроки-1].Объект=АнализируемыйОбъект Тогда
		Возврат Ложь;
	КонецЕсли;
    ВходяшиеСтроки = ТаблицаСвязей.НайтиСтроки(Новый Структура("НомерИсходного",НомерСтроки));
	Для Каждого СтрокаВходящая Из ВходяшиеСтроки Цикл
		СтрокаОбъекта = ТаблицаЭлементов[СтрокаВходящая.НомерРезультирующего-1];
		Если СтрокаОбъекта.Объект = ВлияющийОбъект Тогда
			Возврат Истина;
		ИначеЕсли СтрокаОбъекта.Объект<>АнализируемыйОбъект И ИмеетсяВПоследующих(ТаблицаЭлементов,ТаблицаСвязей,СтрокаВходящая.НомерРезультирующего,ВлияющийОбъект,АнализируемыйОбъект) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ПолучитьЗависимые(Показатель) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ЗависимостиФинансовыхПоказателейСрезПоследних.Регистратор КАК Основание,
		|	фин_ЗависимостиФинансовыхПоказателейСрезПоследних.ЗависимаяФинансовыйПоказатель КАК Объект,
		|	фин_ФинансовыеПоказатели.Наименование КАК Текст,
		|	NULL КАК ВидПоказателя,
		|	NULL КАК ПредставлениеПоказателя,
		|	NULL КАК Формула,
		|	NULL КАК Показатель
		|ИЗ
		|	РегистрСведений.фин_ЗависимостиФинансовыхПоказателей.СрезПоследних(, ИсхФинансовыйПоказатель = &Показатель) КАК фин_ЗависимостиФинансовыхПоказателейСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|		ПО фин_ЗависимостиФинансовыхПоказателейСрезПоследних.ЗависимаяФинансовыйПоказатель = фин_ФинансовыеПоказатели.Ссылка
		|ГДЕ
		|	(фин_ЗависимостиФинансовыхПоказателейСрезПоследних.ДатаЗавершения > &Дата
		|			ИЛИ фин_ЗависимостиФинансовыхПоказателейСрезПоследних.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	фин_ФормулыРасчетаФинансовыхПоказателейВходящиеПоказатели.Ссылка,
		|	ФормулыРасчета.Ссылка,
		|	фин_ФинансовыеПоказатели.Наименование,
		|	фин_ФормулыРасчетаФинансовыхПоказателейВходящиеПоказатели.ВидПоказателя,
		|	фин_ФормулыРасчетаФинансовыхПоказателейВходящиеПоказатели.ПредставлениеПоказателя,
		|	ФормулыРасчета.Формула,
		|	фин_ФормулыРасчетаФинансовыхПоказателейВходящиеПоказатели.Показатель
		|ИЗ
		|	(ВЫБРАТЬ
		|		фин_ФинансовыеПоказатели.Ссылка КАК Ссылка,
		|		фин_ФинансовыеПоказатели.Формула КАК Формула
		|	ИЗ
		|		Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|	ГДЕ
		|		фин_ФинансовыеПоказатели.Ссылка <> &Показатель
		|		И фин_ФинансовыеПоказатели.ВидПоказателя = &ВидПоказателяРассчитываемый
		|		И фин_ФинансовыеПоказатели.УчетПоСумме
		|		И фин_ФинансовыеПоказатели.Формула <> ЗНАЧЕНИЕ(Справочник.фин_формулыРасчетаФинансовыхПоказателей.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		фин_ФинансовыеПоказатели.Ссылка,
		|		фин_ФинансовыеПоказатели.ФормулаКоличество
		|	ИЗ
		|		Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|	ГДЕ
		|		фин_ФинансовыеПоказатели.Ссылка <> &Показатель
		|		И фин_ФинансовыеПоказатели.ВидПоказателя = &ВидПоказателяРассчитываемый
		|		И фин_ФинансовыеПоказатели.УчетПоКоличеству
		|		И фин_ФинансовыеПоказатели.ФормулаКоличество <> ЗНАЧЕНИЕ(Справочник.фин_формулыРасчетаФинансовыхПоказателей.ПустаяСсылка)) КАК ФормулыРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ФормулыРасчетаФинансовыхПоказателей.ВходящиеПоказатели КАК фин_ФормулыРасчетаФинансовыхПоказателейВходящиеПоказатели
		|		ПО ФормулыРасчета.Формула = фин_ФормулыРасчетаФинансовыхПоказателейВходящиеПоказатели.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|		ПО ФормулыРасчета.Ссылка = фин_ФинансовыеПоказатели.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА фин_ФормулыРасчетаФинансовыхПоказателейВходящиеПоказатели.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.ФинансовыйПоказатель)
		|				ТОГДА фин_ФормулыРасчетаФинансовыхПоказателейВходящиеПоказатели.Показатель = &Показатель
		|			ИНАЧЕ фин_ФормулыРасчетаФинансовыхПоказателейВходящиеПоказатели.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.ГруппаСтатейБюджета)
		|					ИЛИ фин_ФормулыРасчетаФинансовыхПоказателейВходящиеПоказатели.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.СтатьиБюджета)
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.Модель,
		|	ВложенныйЗапрос.Показатель,
		|	ВложенныйЗапрос.Наименование,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ОтражениеРезультатов.ЗначениеФинансовыйПоказатель КАК Показатель,
		|		фин_РасчетПроизводственныхМоделейСрезПоследних.Модель КАК Модель,
		|		фин_ФинансовыеПоказатели.Наименование КАК Наименование
		|	ИЗ
		|		РегистрСведений.фин_РасчетПроизводственныхМоделей.СрезПоследних КАК фин_РасчетПроизводственныхМоделейСрезПоследних
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ПроизводственныеМодели.ОтражениеРезультатов КАК ОтражениеРезультатов
		|			ПО фин_РасчетПроизводственныхМоделейСрезПоследних.Модель = ОтражениеРезультатов.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|			ПО (ОтражениеРезультатов.ЗначениеФинансовыйПоказатель = фин_ФинансовыеПоказатели.Ссылка)
		|	ГДЕ
		|		фин_РасчетПроизводственныхМоделейСрезПоследних.ПрименятьМодель
		|		И фин_РасчетПроизводственныхМоделейСрезПоследних.ПоказательПланированияПроизводстваПродукции = &Показатель
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПроизводственныеМодели.ФинансовыйПоказательДляОтраженияТрудовыхЗатрат,
		|		фин_РасчетПроизводственныхМоделейСрезПоследних.Модель,
		|		фин_ФинансовыеПоказатели.Наименование
		|	ИЗ
		|		РегистрСведений.фин_РасчетПроизводственныхМоделей.СрезПоследних КАК фин_РасчетПроизводственныхМоделейСрезПоследних
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ПроизводственныеМодели КАК ПроизводственныеМодели
		|			ПО фин_РасчетПроизводственныхМоделейСрезПоследних.Модель = ПроизводственныеМодели.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|			ПО (ПроизводственныеМодели.ФинансовыйПоказательДляОтраженияТрудовыхЗатрат = фин_ФинансовыеПоказатели.Ссылка)
		|	ГДЕ
		|		фин_РасчетПроизводственныхМоделейСрезПоследних.ПрименятьМодель
		|		И ПроизводственныеМодели.РассчитыватьПрямыеТрудовыеЗатраты
		|		И фин_РасчетПроизводственныхМоделейСрезПоследних.ПоказательПланированияПроизводстваПродукции = &Показатель
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ОтражениеРезультатов.ФинансовыйПоказатель,
		|		фин_РасчетПроизводственныхМоделейСрезПоследних.Модель,
		|		фин_ФинансовыеПоказатели.Наименование
		|	ИЗ
		|		РегистрСведений.фин_РасчетПроизводственныхМоделей.СрезПоследних КАК фин_РасчетПроизводственныхМоделейСрезПоследних
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ПроизводственныеМодели.ДополнительныеЗатратыНаВыпуск КАК ОтражениеРезультатов
		|			ПО фин_РасчетПроизводственныхМоделейСрезПоследних.Модель = ОтражениеРезультатов.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|			ПО (ОтражениеРезультатов.ФинансовыйПоказатель = фин_ФинансовыеПоказатели.Ссылка)
		|	ГДЕ
		|		фин_РасчетПроизводственныхМоделейСрезПоследних.ПрименятьМодель
		|		И фин_РасчетПроизводственныхМоделейСрезПоследних.ПоказательПланированияПроизводстваПродукции = &Показатель) КАК ВложенныйЗапрос
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.Модель,
		|	ВложенныйЗапрос.Показатель,
		|	ВложенныйЗапрос.Наименование,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ОтражениеРезультатов.ФинансовыйПоказатель КАК Показатель,
		|		фин_РасчетМоделейРаспределения.Модель КАК Модель,
		|		фин_ФинансовыеПоказатели.Наименование КАК Наименование
		|	ИЗ
		|		РегистрСведений.фин_РасчетМоделейРаспределения.СрезПоследних КАК фин_РасчетМоделейРаспределения
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_МоделиРаспределенияБюджетныхДанных.ОтражениеРезультатов КАК ОтражениеРезультатов
		|			ПО фин_РасчетМоделейРаспределения.Модель = ОтражениеРезультатов.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|			ПО (ОтражениеРезультатов.ФинансовыйПоказатель = фин_ФинансовыеПоказатели.Ссылка)
		|	ГДЕ
		|		фин_РасчетМоделейРаспределения.ПрименятьМодель
		|		И фин_РасчетМоделейРаспределения.РаспределяемыйПоказатель = &Показатель) КАК ВложенныйЗапрос";

	Запрос.УстановитьПараметр("Показатель", Показатель);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
  	Запрос.УстановитьПараметр("ВидПоказателяРассчитываемый", Перечисления.фин_ВидыФинансовыхПоказателей.Рассчитываемый);
   

	Результат = Запрос.Выполнить();
    ТаблицаРезультат = Результат.Выгрузить();
	//ТаблицаРезультат.Колонки.Объект.Имя = "Показатель";
	фин_ЗащитаПривилегированныеПроцедуры.ЗаменитьГруппыСтатейВФормулах(Неопределено,ТаблицаРезультат);
	//ТаблицаРезультат.Колонки.Показатель.Имя = "Объект";
	СтрокиУдалить = Новый Массив;
	Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл
		Если ТипЗнч(СтрокаРезультат.Основание)=Тип("СправочникСсылка.фин_ФормулыРасчетаФинансовыхПоказателей") И СтрокаРезультат.Показатель <> Показатель Тогда
			СтрокиУдалить.Добавить(СтрокаРезультат);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаРезультат Из СтрокиУдалить Цикл
		ТаблицаРезультат.Удалить(СтрокаРезультат);
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ПолучитьВлияющие(Показатель) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ЗависимостиФинансовыхПоказателейСрезПоследних.Регистратор КАК Основание,
		|	фин_ЗависимостиФинансовыхПоказателейСрезПоследних.ИсхФинансовыйПоказатель КАК Объект,
		|	фин_ФинансовыеПоказатели.Наименование КАК Текст,
		|	NULL КАК ВидПоказателя,
		|	NULL КАК ПредставлениеПоказателя,
		|	NULL КАК Формула
		|ИЗ
		|	РегистрСведений.фин_ЗависимостиФинансовыхПоказателей.СрезПоследних(, ЗависимаяФинансовыйПоказатель = &Показатель) КАК фин_ЗависимостиФинансовыхПоказателейСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|		ПО фин_ЗависимостиФинансовыхПоказателейСрезПоследних.ИсхФинансовыйПоказатель = фин_ФинансовыеПоказатели.Ссылка
		|ГДЕ
		|	(фин_ЗависимостиФинансовыхПоказателейСрезПоследних.ДатаЗавершения > &Дата
		|			ИЛИ фин_ЗависимостиФинансовыхПоказателейСрезПоследних.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	фин_РегламентныеРасчетыПоМоделямСрезПоследних.Расчет,
		|	фин_РегламентныеРасчетыПоМоделямСрезПоследних.Расчет,
		|	фин_РегламентныеРасчетыПоМоделямСрезПоследних.Расчет.НаименованиеМодели,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	РегистрСведений.фин_РегламентныеРасчетыПоМоделям.СрезПоследних(, ФинансовыйПоказатель = &Показатель) КАК фин_РегламентныеРасчетыПоМоделямСрезПоследних
		|ГДЕ
		|	фин_РегламентныеРасчетыПоМоделямСрезПоследних.КонецИспользования > &Дата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	фин_ФормулыРасчетаФинансовыхПоказателейВходящиеПоказатели.Ссылка,
		|	фин_ФормулыРасчетаФинансовыхПоказателейВходящиеПоказатели.Показатель,
		|	фин_ФинансовыеПоказатели.Наименование,
		|	фин_ФормулыРасчетаФинансовыхПоказателейВходящиеПоказатели.ВидПоказателя,
		|	фин_ФормулыРасчетаФинансовыхПоказателейВходящиеПоказатели.ПредставлениеПоказателя,
		|	ФормулыРасчета.Формула
		|ИЗ
		|	(ВЫБРАТЬ
		|		фин_ФинансовыеПоказатели.Формула КАК Формула
		|	ИЗ
		|		Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|	ГДЕ
		|		фин_ФинансовыеПоказатели.Ссылка = &Показатель
		|		И фин_ФинансовыеПоказатели.УчетПоСумме
		|		И фин_ФинансовыеПоказатели.ВидПоказателя = &ВидПоказателяРассчитываемый
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		фин_ФинансовыеПоказатели.ФормулаКоличество
		|	ИЗ
		|		Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|	ГДЕ
		|		фин_ФинансовыеПоказатели.Ссылка = &Показатель
		|		И фин_ФинансовыеПоказатели.УчетПоКоличеству
		|		И фин_ФинансовыеПоказатели.ВидПоказателя = &ВидПоказателяРассчитываемый) КАК ФормулыРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ФормулыРасчетаФинансовыхПоказателей.ВходящиеПоказатели КАК фин_ФормулыРасчетаФинансовыхПоказателейВходящиеПоказатели
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|			ПО фин_ФормулыРасчетаФинансовыхПоказателейВходящиеПоказатели.Показатель = фин_ФинансовыеПоказатели.Ссылка
		|		ПО ФормулыРасчета.Формула = фин_ФормулыРасчетаФинансовыхПоказателейВходящиеПоказатели.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.Модель,
		|	ВложенныйЗапрос.Показатель,
		|	ВложенныйЗапрос.Наименование,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		фин_РасчетПроизводственныхМоделейСрезПоследних.ПоказательПланированияПроизводстваПродукции КАК Показатель,
		|		фин_РасчетПроизводственныхМоделейСрезПоследних.Модель КАК Модель,
		|		фин_ФинансовыеПоказатели.Наименование КАК Наименование
		|	ИЗ
		|		РегистрСведений.фин_РасчетПроизводственныхМоделей.СрезПоследних КАК фин_РасчетПроизводственныхМоделейСрезПоследних
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ПроизводственныеМодели.ОтражениеРезультатов КАК ОтражениеРезультатов
		|			ПО фин_РасчетПроизводственныхМоделейСрезПоследних.Модель = ОтражениеРезультатов.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|			ПО фин_РасчетПроизводственныхМоделейСрезПоследних.ПоказательПланированияПроизводстваПродукции = фин_ФинансовыеПоказатели.Ссылка
		|	ГДЕ
		|		фин_РасчетПроизводственныхМоделейСрезПоследних.ПрименятьМодель
		|		И ОтражениеРезультатов.ЗначениеФинансовыйПоказатель = &Показатель
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		фин_РасчетПроизводственныхМоделейСрезПоследних.ПоказательПланированияПроизводстваПродукции,
		|		фин_РасчетПроизводственныхМоделейСрезПоследних.Модель,
		|		фин_ФинансовыеПоказатели.Наименование
		|	ИЗ
		|		РегистрСведений.фин_РасчетПроизводственныхМоделей.СрезПоследних КАК фин_РасчетПроизводственныхМоделейСрезПоследних
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ПроизводственныеМодели КАК ПроизводственныеМодели
		|			ПО фин_РасчетПроизводственныхМоделейСрезПоследних.Модель = ПроизводственныеМодели.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|			ПО фин_РасчетПроизводственныхМоделейСрезПоследних.ПоказательПланированияПроизводстваПродукции = фин_ФинансовыеПоказатели.Ссылка
		|	ГДЕ
		|		фин_РасчетПроизводственныхМоделейСрезПоследних.ПрименятьМодель
		|		И ПроизводственныеМодели.РассчитыватьПрямыеТрудовыеЗатраты
		|		И ПроизводственныеМодели.ФинансовыйПоказательДляОтраженияТрудовыхЗатрат = &Показатель
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		фин_РасчетПроизводственныхМоделейСрезПоследних.ПоказательПланированияПроизводстваПродукции,
		|		фин_РасчетПроизводственныхМоделейСрезПоследних.Модель,
		|		фин_ФинансовыеПоказатели.Наименование
		|	ИЗ
		|		РегистрСведений.фин_РасчетПроизводственныхМоделей.СрезПоследних КАК фин_РасчетПроизводственныхМоделейСрезПоследних
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ПроизводственныеМодели.ДополнительныеЗатратыНаВыпуск КАК ОтражениеРезультатов
		|			ПО фин_РасчетПроизводственныхМоделейСрезПоследних.Модель = ОтражениеРезультатов.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|			ПО фин_РасчетПроизводственныхМоделейСрезПоследних.ПоказательПланированияПроизводстваПродукции = фин_ФинансовыеПоказатели.Ссылка
		|	ГДЕ
		|		фин_РасчетПроизводственныхМоделейСрезПоследних.ПрименятьМодель
		|		И ОтражениеРезультатов.ФинансовыйПоказатель = &Показатель) КАК ВложенныйЗапрос
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.Модель,
		|	ВложенныйЗапрос.Показатель,
		|	ВложенныйЗапрос.Наименование,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		фин_РасчетМоделейРаспределения.РаспределяемыйПоказатель КАК Показатель,
		|		фин_РасчетМоделейРаспределения.Модель КАК Модель,
		|		фин_ФинансовыеПоказатели.Наименование КАК Наименование
		|	ИЗ
		|		РегистрСведений.фин_РасчетМоделейРаспределения.СрезПоследних КАК фин_РасчетМоделейРаспределения
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_МоделиРаспределенияБюджетныхДанных.ОтражениеРезультатов КАК ОтражениеРезультатов
		|			ПО фин_РасчетМоделейРаспределения.Модель = ОтражениеРезультатов.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|			ПО фин_РасчетМоделейРаспределения.РаспределяемыйПоказатель = фин_ФинансовыеПоказатели.Ссылка
		|	ГДЕ
		|		фин_РасчетМоделейРаспределения.ПрименятьМодель
		|		И ОтражениеРезультатов.ФинансовыйПоказатель = &Показатель) КАК ВложенныйЗапрос";

	Запрос.УстановитьПараметр("Показатель", Показатель);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
  	Запрос.УстановитьПараметр("ВидПоказателяРассчитываемый", Перечисления.фин_ВидыФинансовыхПоказателей.Рассчитываемый);

	Результат = Запрос.Выполнить();
    ТаблицаРезультат = Результат.Выгрузить();
	ТаблицаРезультат.Колонки.Объект.Имя = "Показатель";
	фин_ЗащитаПривилегированныеПроцедуры.ЗаменитьГруппыСтатейВФормулах(Неопределено,ТаблицаРезультат);
	ТаблицаРезультат.Колонки.Показатель.Имя = "Объект";
	
	Возврат ТаблицаРезультат;
КонецФункции

Функция ПолучитьДанныеУчетнойПолитики(Дата) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	УчетнаяПолитикаПоБюджетированиюСрезПоследних.БюджетыСНеУтвержденнымиСтроками,
			|	УчетнаяПолитикаПоБюджетированиюСрезПоследних.УчитыватьПричиныКорректировок,
			|	УчетнаяПолитикаПоБюджетированиюСрезПоследних.УчитыватьНепринятыеСтрокиБюджетов
			|ИЗ
			|	РегистрСведений.фин_УчетнаяПолитикаПоБюджетированию.СрезПоследних(&Дата, ) КАК УчетнаяПолитикаПоБюджетированиюСрезПоследних";

	Запрос.УстановитьПараметр("Дата", Дата);
			
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	мУчетнаяПолитикаБюджетирование = Новый Структура("УчитыватьПричиныКорректировок,БюджетыСНеУтвержденнымиСтроками,УчитыватьНепринятыеСтрокиБюджетов",Ложь,Перечисления.фин_СпособыРаботыСНеУтвержденнымиСтрокамиБюджета.ОтражатьВУчете,Ложь);

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мУчетнаяПолитикаБюджетирование,ВыборкаДетальныеЗаписи);
	КонецЕсли;
	
	Возврат мУчетнаяПолитикаБюджетирование;
	
КонецФункции

Функция ФинансовыеПоказателиГруппыСтатейБюджета(ГруппаСтатей,ВерсииБюджета = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_СтатьиБюджета.ФинансовыйПоказатель
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
		|ГДЕ
		|	фин_СтатьиБюджета.Ссылка В ИЕРАРХИИ(&ГруппаСтатей)
		|	И фин_СтатьиБюджета.ЭтоГруппа = ЛОЖЬ
		|	И фин_СтатьиБюджета.ПометкаУдаления = ЛОЖЬ"+?(ВерсииБюджета=Неопределено,"","
		|	И фин_СтатьиБюджета.Версия В(&Версии)");
	
	Запрос.УстановитьПараметр("Версии", ВерсииБюджета);
	Запрос.УстановитьПараметр("ГруппаСтатей", ГруппаСтатей);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ФинансовыйПоказатель");
КонецФункции

Процедура ДобавитьПоляИсточника(Колонка,КоллекцияМетаданных,ТаблицаПолей,НазваниеКолонки="",НазваниеКолонкиЗначений="",ВыводитьКолонкуНазваний=Истина,ЭтоРегистрБухгалтерии=Ложь,ВидПоля="")
	НомерСтроки = 1;
	Для Каждого ЭлементКоллекции Из КоллекцияМетаданных Цикл
		ИмяРеквизита = ЭлементКоллекции.Имя;
		Если ЭтоРегистрБухгалтерии Тогда
			Если ВидПоля = "" И НЕ ЭлементКоллекции.Балансовый Тогда
				Продолжить;
			КонецЕсли;
			Если ВидПоля <> "" И ЭлементКоллекции.Балансовый Тогда
				Продолжить;
			КонецЕсли;
			Если ВидПоля <> "" Тогда
				ИмяРеквизита = ИмяРеквизита+ВидПоля;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПорядокГруппы 	= Колонка;
		НоваяСтрока.ПорядокПоля 	= НомерСтроки;
		НоваяСтрока.ГруппаПолей 	= НазваниеКолонкиЗначений;
		НоваяСтрока.Поле 			= ИмяРеквизита;
		НоваяСтрока.ЗаголовокПоля 	= ЭлементКоллекции.Синоним+?(ЭтоРегистрБухгалтерии И ВидПоля <> ""," "+ВидПоля,"");
	КонецЦикла;
	Колонка = Колонка + 1;
КонецПроцедуры

Функция СписокПолейИсточникаДанных(ВидДанных,ПрограммныйИдентификаторОбъекта,ИмяИсточникаОбъекта="",ВидРегистра=Неопределено,ВыводитьЗаголовкиПолей=Ложь,ДляОтчета = Ложь) Экспорт
	
	ЭтоРегистрБухгалтерии = ВидРегистра = Перечисления.фин_ВидыРегистровСистемы.РегистрыБухгалтерии;
	ТаблицаПолей = Новый ТаблицаЗначений;
	ТаблицаПолей.Колонки.Добавить("ПорядокГруппы",		Новый ОписаниеТипов("Число"));
	ТаблицаПолей.Колонки.Добавить("ПорядокПоля",		Новый ОписаниеТипов("Число"));
	ТаблицаПолей.Колонки.Добавить("ГруппаПолей",		Новый ОписаниеТипов("Строка"));
	ТаблицаПолей.Колонки.Добавить("Поле",				Новый ОписаниеТипов("Строка"));
	ТаблицаПолей.Колонки.Добавить("ЗаголовокПоля",		Новый ОписаниеТипов("Строка"));
	ТаблицаПолей.Колонки.Добавить("Горизонтально",		Новый ОписаниеТипов("Булево"));
	ТаблицаПолей.Колонки.Добавить("Ширина",				Новый ОписаниеТипов("Число"));
	Если ДляОтчета Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_ШаблоныРасшифровкиДанныхИсточниковРегистрацииФакта.Ссылка
			|ИЗ
			|	Справочник.фин_ШаблоныРасшифровкиДанныхИсточниковРегистрацииФакта КАК фин_ШаблоныРасшифровкиДанныхИсточниковРегистрацииФакта
			|ГДЕ
			|	фин_ШаблоныРасшифровкиДанныхИсточниковРегистрацииФакта.Владелец.ПрограммныйИдентификатор = &ПрограммныйИдентификатор
			|	И фин_ШаблоныРасшифровкиДанныхИсточниковРегистрацииФакта.ВидДанных = &ВидДанных
			|	И ВЫБОР
			|			КОГДА &ВидДанных = ЗНАЧЕНИЕ(Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти)
			|				ТОГДА фин_ШаблоныРасшифровкиДанныхИсточниковРегистрацииФакта.ТабличнаяЧасть = &ТабличнаяЧасть
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|	И ВЫБОР
			|			КОГДА &ВидДанных = ЗНАЧЕНИЕ(Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах)
			|				ТОГДА фин_ШаблоныРасшифровкиДанныхИсточниковРегистрацииФакта.Владелец.ВидРегистра = &ВидРегистра
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|	И НЕ фин_ШаблоныРасшифровкиДанныхИсточниковРегистрацииФакта.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ВидДанных", ВидДанных);
		Запрос.УстановитьПараметр("ВидРегистра", ВидРегистра);
		Запрос.УстановитьПараметр("ПрограммныйИдентификатор", ПрограммныйИдентификаторОбъекта);
		Запрос.УстановитьПараметр("ТабличнаяЧасть", ИмяИсточникаОбъекта);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ГруппыКолонок 	= ВыборкаДетальныеЗаписи.Ссылка.ГруппыКолонок.Выгрузить();
			Колонки 		= ВыборкаДетальныеЗаписи.Ссылка.Колонки.Выгрузить();
			Для Каждого СтрокаГруппы Из ГруппыКолонок Цикл
				НомерСтроки = 1;
				Для Каждого СтрокаКолонки Из Колонки.НайтиСтроки(Новый Структура("Идентификатор",СтрокаГруппы.Идентификатор)) Цикл
					НоваяСтрока = ТаблицаПолей.Добавить();
					НоваяСтрока.ПорядокГруппы 	= СтрокаГруппы.НомерСтроки;
					НоваяСтрока.ПорядокПоля 	= НомерСтроки;
					НоваяСтрока.ГруппаПолей 	= СтрокаГруппы.Заголовок;
					НоваяСтрока.Горизонтально 	= СтрокаГруппы.Горизонтально;
					НоваяСтрока.Поле 			= СтрокаКолонки.Поле;
					НоваяСтрока.ЗаголовокПоля 	= СтрокаКолонки.ЗаголовокПоля;
					НоваяСтрока.Ширина			= СтрокаГруппы.Ширина;
					НомерСтроки = НомерСтроки + 1;
				КонецЦикла;
			КонецЦикла;
			Возврат ТаблицаПолей;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти Тогда
		МетаданныеОбъекта 	= Метаданные.Документы[ПрограммныйИдентификаторОбъекта].ТабличныеЧасти[ИмяИсточникаОбъекта];
		ДобавитьПоляИсточника(0,МетаданныеОбъекта.Реквизиты,ТаблицаПолей,"Реквизиты","Значения реквизитов",ВыводитьЗаголовкиПолей);
		ТаблицаПолей.ЗаполнитьЗначения(Истина,"Горизонтально");
	ИначеЕсли ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента Тогда
		МетаданныеОбъекта 	= Метаданные.Документы[ПрограммныйИдентификаторОбъекта];
		ДобавитьПоляИсточника(0,МетаданныеОбъекта.Реквизиты,ТаблицаПолей,"Реквизиты","Значения реквизитов",ВыводитьЗаголовкиПолей);
		ТаблицаПолей.ЗаполнитьЗначения(Истина,"Горизонтально");
	Иначе
		Колонка = 0;
		ИмяВидаРегистров 	= фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВидРегистра);
		МетаданныеОбъекта 	= Метаданные[ИмяВидаРегистров][ПрограммныйИдентификаторОбъекта];
		Свойства = Новый Массив;
		Если ЭтоРегистрБухгалтерии Тогда
			Свойства.Добавить(Новый Структура("Синоним,Имя,Балансовый","Счет","Счет",Ложь));
		КонецЕсли;
		Если ВидРегистра = Перечисления.фин_ВидыРегистровСистемы.РегистрыРасчета Тогда
			Свойства.Добавить(Новый Структура("Синоним,Имя","Вид расчета","ВидРасчета"));
			//	Свойства.Добавить(Новый Структура("Синоним,Имя","Период расчета","ПериодРасчета"));
		ИначеЕсли ВидРегистра = Перечисления.фин_ВидыРегистровСистемы.РегистрыНакопления Тогда
			Свойства.Добавить(Новый Структура("Синоним,Имя","Вид движения","ВидДвижения"));
		КонецЕсли;
		Если Свойства.Количество()>0 И НЕ ЭтоРегистрБухгалтерии Тогда
			ДобавитьПоляИсточника(Колонка,Свойства,ТаблицаПолей,"Свойства","Значения свойств",ВыводитьЗаголовкиПолей,ЭтоРегистрБухгалтерии);
		КонецЕсли;
		ДобавитьПоляИсточника(Колонка,МетаданныеОбъекта.Измерения,ТаблицаПолей,"Измерения","Значения измерений",ВыводитьЗаголовкиПолей,ЭтоРегистрБухгалтерии);
		Если ЭтоРегистрБухгалтерии Тогда
			ДобавитьПоляИсточника(Колонка,Свойства,ТаблицаПолей,"Свйоства Дт","Дт",ВыводитьЗаголовкиПолей,ЭтоРегистрБухгалтерии,"Дт");
			ДобавитьПоляИсточника(Колонка,МетаданныеОбъекта.Измерения,ТаблицаПолей,"Измерения Дт","Значения измерений Дт",ВыводитьЗаголовкиПолей,ЭтоРегистрБухгалтерии,"Дт");
			ВидыСубконто = Новый Массив;
			Для Инд = 1 По МетаданныеОбъекта.ПланСчетов.МаксКоличествоСубконто Цикл
				ВидыСубконто.Добавить(Новый Структура("Синоним,Имя,Балансовый","Вид субконто Дт "+Строка(Инд),"ВидСубконтоДт"+Строка(Инд),Истина));
			КонецЦикла;
			ДобавитьПоляИсточника(Колонка,ВидыСубконто,ТаблицаПолей,,"Вид субконто Дт",Ложь,ЭтоРегистрБухгалтерии);
			Субконто = Новый Массив;
			Для Инд = 1 По МетаданныеОбъекта.ПланСчетов.МаксКоличествоСубконто Цикл
				Субконто.Добавить(Новый Структура("Синоним,Имя,Балансовый","Субконто Дт "+Строка(Инд),"СубконтоДт"+Строка(Инд),Истина));
			КонецЦикла;
			ДобавитьПоляИсточника(Колонка,Субконто,ТаблицаПолей,,"Субконто Дт",Ложь,ЭтоРегистрБухгалтерии);
			ДобавитьПоляИсточника(Колонка,МетаданныеОбъекта.Ресурсы,ТаблицаПолей,"Ресурсы Дт","Значения ресурсов Дт",ВыводитьЗаголовкиПолей,ЭтоРегистрБухгалтерии,"Дт");
			
			ДобавитьПоляИсточника(Колонка,Свойства,ТаблицаПолей,"Свйоства Кт","Кт",ВыводитьЗаголовкиПолей,ЭтоРегистрБухгалтерии,"Кт");
			ДобавитьПоляИсточника(Колонка,МетаданныеОбъекта.Измерения,ТаблицаПолей,"Измерения Кт","Значения измерений Кт",ВыводитьЗаголовкиПолей,ЭтоРегистрБухгалтерии,"Кт");
			ВидыСубконто = Новый Массив;
			Для Инд = 1 По МетаданныеОбъекта.ПланСчетов.МаксКоличествоСубконто Цикл
				ВидыСубконто.Добавить(Новый Структура("Синоним,Имя,Балансовый","Вид субконто Кт "+Строка(Инд),"ВидСубконтоКт"+Строка(Инд),Истина));
			КонецЦикла;
			ДобавитьПоляИсточника(Колонка,ВидыСубконто,ТаблицаПолей,,"Вид субконто Кт",Ложь,ЭтоРегистрБухгалтерии);
			Субконто = Новый Массив;
			Для Инд = 1 По МетаданныеОбъекта.ПланСчетов.МаксКоличествоСубконто Цикл
				Субконто.Добавить(Новый Структура("Синоним,Имя,Балансовый","Субконто Кт "+Строка(Инд),"СубконтоКт"+Строка(Инд),Истина));
			КонецЦикла;
			ДобавитьПоляИсточника(Колонка,Субконто,ТаблицаПолей,,"Субконто Кт",Ложь,ЭтоРегистрБухгалтерии);
			ДобавитьПоляИсточника(Колонка,МетаданныеОбъекта.Ресурсы,ТаблицаПолей,"Ресурсы Кт","Значения ресурсов Кт",ВыводитьЗаголовкиПолей,ЭтоРегистрБухгалтерии,"Кт");
		КонецЕсли;
		ДобавитьПоляИсточника(Колонка,МетаданныеОбъекта.Ресурсы,ТаблицаПолей,"Ресурсы","Значения ресурсов",ВыводитьЗаголовкиПолей,ЭтоРегистрБухгалтерии);
		ДобавитьПоляИсточника(Колонка,МетаданныеОбъекта.Реквизиты,ТаблицаПолей,"Реквизиты","Значения реквизитов",ВыводитьЗаголовкиПолей);
	КонецЕсли;
	Возврат ТаблицаПолей;
КонецФункции

Функция ИмеютсяРекурсивныеЗависимостиФормулы(Формула,ФинансовыйПоказатель = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Формула) Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВходящиеПоказатели.ВидПоказателя,
		|	ВходящиеПоказатели.Показатель
		|ПОМЕСТИТЬ ВТ_Показатели
		|ИЗ
		|	Справочник.фин_ФормулыРасчетаФинансовыхПоказателей.ВходящиеПоказатели КАК ВходящиеПоказатели
		|ГДЕ
		|	ВходящиеПоказатели.Ссылка = &Формула
		|	И ВходящиеПоказатели.ВидПоказателя <> &Расчетный
		//|	И ВходящиеПоказатели.ПериодСбораДанных <> ЗНАЧЕНИЕ(Перечисление.ден_СпособыОпределенияПериодов.ПредшествующийПериод)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	фин_ФинансовыеПоказатели.Формула,
		|	фин_ФинансовыеПоказатели.ФормулаКоличество,
		|	ВТ_Показатели.ВидПоказателя КАК ВидПоказателя,
		|	ВТ_Показатели.Показатель КАК Показатель
		|ИЗ
		|	ВТ_Показатели КАК ВТ_Показатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|		ПО ВТ_Показатели.Показатель = фин_ФинансовыеПоказатели.Ссылка
		|ГДЕ
		|	фин_ФинансовыеПоказатели.ВидПоказателя = &ВидПоказателя
		|	И ВТ_Показатели.ВидПоказателя = &ФинПоказатель
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	NULL,
		|	ВТ_Показатели.ВидПоказателя,
		|	ВТ_Показатели.Показатель
		|ИЗ
		|	ВТ_Показатели КАК ВТ_Показатели
		|ГДЕ
		|	ВТ_Показатели.ВидПоказателя = &ГруппаСтатей
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	фин_ФинансовыеПоказатели.Формула,
		|	фин_ФинансовыеПоказатели.ФормулаКоличество,
		|	ВТ_Показатели.ВидПоказателя,
		|	фин_ФинансовыеПоказатели.Ссылка
		|ИЗ
		|	ВТ_Показатели КАК ВТ_Показатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
		|		ПО ВТ_Показатели.Показатель = фин_СтатьиБюджета.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|		ПО фин_СтатьиБюджета.ФинансовыйПоказатель = фин_ФинансовыеПоказатели.Ссылка
		|ГДЕ
		|	фин_ФинансовыеПоказатели.ВидПоказателя = &ВидПоказателя
		|	И НЕ фин_СтатьиБюджета.ПометкаУдаления
		|	И ВТ_Показатели.ВидПоказателя = &СтатьиБюджета";
	
	Запрос.УстановитьПараметр("ВидПоказателя", Перечисления.фин_ВидыФинансовыхПоказателей.Рассчитываемый);
	Запрос.УстановитьПараметр("ГруппаСтатей", Перечисления.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.ГруппаСтатейБюджета);
	Запрос.УстановитьПараметр("Расчетный", Перечисления.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.РасчетныйПоказатель);
	Запрос.УстановитьПараметр("СтатьиБюджета", Перечисления.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.СтатьиБюджета);
	Запрос.УстановитьПараметр("ФинПоказатель", Перечисления.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.ФинансовыйПоказатель);
	Запрос.УстановитьПараметр("Формула", Формула);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТаблицаФормулИПоказателей = Новый ТаблицаЗначений;
	ТаблицаФормулИПоказателей.Колонки.Добавить("Показатель",Новый ОписаниеТипов("СправочникСсылка.фин_ФинансовыеПоказатели"));
	ТаблицаФормулИПоказателей.Колонки.Добавить("Формула",	Новый ОписаниеТипов("СправочникСсылка.фин_ФормулыРасчетаФинансовыхПоказателей"));
	
	СписокГруппСтатей = Новый СписокЗначений;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ВидПоказателя = Перечисления.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.ГруппаСтатейБюджета Тогда
			СписокГруппСтатей.Добавить(ВыборкаДетальныеЗаписи.Показатель);
		Иначе
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Формула) Тогда
				НС = ТаблицаФормулИПоказателей.Добавить();
				НС.Показатель 	= ВыборкаДетальныеЗаписи.Показатель;
				НС.Формула 		= ВыборкаДетальныеЗаписи.Формула;
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ФормулаКоличество) Тогда
				НС = ТаблицаФормулИПоказателей.Добавить();
				НС.Показатель 	= ВыборкаДетальныеЗаписи.Показатель;
				НС.Формула 		= ВыборкаДетальныеЗаписи.ФормулаКоличество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СписокГруппСтатей.Количество()>0 Тогда
		Запрос.УстановитьПараметр("Список", СписокГруппСтатей);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_ФинансовыеПоказатели.Ссылка КАК Показатель,
			|	фин_ФинансовыеПоказатели.Формула,
			|	фин_ФинансовыеПоказатели.ФормулаКоличество
			|ИЗ
			|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
			|		ПО фин_СтатьиБюджета.ФинансовыйПоказатель = фин_ФинансовыеПоказатели.Ссылка
			|ГДЕ
			|	НЕ фин_СтатьиБюджета.ПометкаУдаления
			|	И фин_СтатьиБюджета.Ссылка В ИЕРАРХИИ (&Список)
			|	И фин_ФинансовыеПоказатели.ВидПоказателя = &ВидПоказателя";
			
		РезультатЗапроса = Запрос.Выполнить();
	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Формула) Тогда
				НС = ТаблицаФормулИПоказателей.Добавить();
				НС.Показатель 	= ВыборкаДетальныеЗаписи.Показатель;
				НС.Формула 		= ВыборкаДетальныеЗаписи.Формула;
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ФормулаКоличество) Тогда
				НС = ТаблицаФормулИПоказателей.Добавить();
				НС.Показатель 	= ВыборкаДетальныеЗаписи.Показатель;
				НС.Формула 		= ВыборкаДетальныеЗаписи.ФормулаКоличество;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ФинансовыйПоказатель<>Неопределено И ТаблицаФормулИПоказателей.НайтиСтроки(Новый Структура("Показатель",ФинансовыйПоказатель)).Количество() > 0 Тогда
		Возврат "Финансовый показатель """+Строка(ФинансовыйПоказатель)+""" используется рекурсивно в формуле """+Строка(Формула)+"""";
	КонецЕсли;
	
	Для Каждого СтрокаПоказатель Из ТаблицаФормулИПоказателей Цикл
		ФП = ?(ФинансовыйПоказатель <> Неопределено,ФинансовыйПоказатель,СтрокаПоказатель.Показатель);
		Если ЭтоФормулаПоказателя(СтрокаПоказатель.Формула,ФП) Тогда
			Результат = "Финансовый показатель """+Строка(ФП)+""" используется рекурсивно в формуле """+Строка(Формула)+"""";
		Иначе
			Результат = ИмеютсяРекурсивныеЗависимостиФормулы(СтрокаПоказатель.Формула,ФП);
		КонецЕсли;
		Если Результат <>"" Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
КонецФункции

Функция ЭтоФормулаПоказателя(Формула,ФинансовыйПоказатель)
	Возврат ФинансовыйПоказатель.Формула = Формула ИЛИ ФинансовыйПоказатель.ФормулаКоличество = Формула;	
КонецФункции

Функция ОпределитьСтатьюБюджетаПоПоказателю(ФинансовыйПоказатель,Бюджет = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	фин_СтатьиБюджета.Ссылка
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
		|ГДЕ
		|	фин_СтатьиБюджета.ПометкаУдаления = ЛОЖЬ
		|	И фин_СтатьиБюджета.ЭтоГруппа = ЛОЖЬ
		|	И фин_СтатьиБюджета.ФинансовыйПоказатель = &ФинансовыйПоказатель";
	Если Бюджет<>Неопределено Тогда
	Запрос.Текст = Запрос.Текст+"
		|	И фин_СтатьиБюджета.Владелец = &Владелец";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Владелец", Бюджет);
	Запрос.УстановитьПараметр("ФинансовыйПоказатель", ФинансовыйПоказатель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Справочники.фин_СтатьиБюджета.ПустаяСсылка();
	
КонецФункции

Процедура ЗаполнитьДокументРегистрацииФактаПоОстаткамОтчета(Объект, ДокументОснование) Экспорт
	
	Если ТипЗнч(ДокументОснование) = Тип("Структура") Тогда
	
		// выплата заработной платы всегда в валюте регл. учета
		Объект.Состояние			= фин_БюджетированиеОбщегоНазначения.СостояниеОбъектаПоУмолчанию();
		ЗаполнитьЗначенияСвойств(Объект,ДокументОснование);
		Объект.Дата = ТекущаяДата();
		Сценарий = ?(ДокументОснование.Свойство("Сценарий"),ДокументОснование.Сценарий,фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ОсновнойСценарийПланирования"));
		Если ДокументОснование.Свойство("ОтборДляРасшифровки") Тогда
			ТаблицаОтборов 		= ЗначениеИзСтрокиВнутр(ДокументОснование.ОтборДляРасшифровки);
			СтруктураОтборов 	= Новый Структура;
			ПериодОтбора 		= Неопределено;
			Для Каждого СтрокаТаблицы Из ТаблицаОтборов Цикл
				Если СтрокаТаблицы.ВидСравнения <> "Равно" Тогда
					Если СтрокаТаблицы.Поле = "Период" Тогда
						ПериодОтбора =  СтрокаТаблицы.Значение;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				Если СтрокаТаблицы.Поле = "ФинансовыйПоказатель" ИЛИ СтрокаТаблицы.Поле = "СтатьяБюджета" Тогда
					ФинансовыйПоказатель = ?(ТипЗнч(СтрокаТаблицы.Значение)=Тип("СправочникСсылка.фин_СтатьиБюджета") И НЕ СтрокаТаблицы.Значение.ЭтоГруппа,СтрокаТаблицы.Значение.ФинансовыйПоказатель,СтрокаТаблицы.Значение);
					СтруктураОтборов.Вставить("ФинансовыйПоказатель",ФинансовыйПоказатель);
				ИначеЕсли СтрокаТаблицы.Поле = "ПериодПланирования" Тогда
					СтруктураОтборов.Вставить("ПериодПланирования",СтрокаТаблицы.Значение);
				ИначеЕсли СтрокаТаблицы.Поле = "Организация" Тогда
					Объект.Организация = СтрокаТаблицы.Значение;
				ИначеЕсли СтрокаТаблицы.Поле = "ВалютаОперации" Тогда
					СтруктураОтборов.Вставить("Валюта",СтрокаТаблицы.Значение);
				ИначеЕсли СтрокаТаблицы.Поле <> "Период" Тогда
					Попытка
						СтруктураОтборов.Вставить(СтрокаТаблицы.Поле,СтрокаТаблицы.Значение);
					Исключение
						
					КонецПопытки;
				Иначе
					ПериодОтбора =  СтрокаТаблицы.Значение;
				КонецЕсли;
			КонецЦикла;
			Остатки = ПолучитьОстатки(Сценарий,Объект.Организация,СтруктураОтборов,ПериодОтбора);
			Остатки.Колонки.Добавить("Валюта");
			Остатки.Колонки.Добавить("Период");
			Остатки.ЗаполнитьЗначения(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета"),"Валюта");
			Остатки.ЗаполнитьЗначения(ТекущаяДата(),"Период");
			Для Каждого СтрокаОстатки Из Остатки Цикл
				Если СтрокаОстатки.Количество<0 Тогда
					СтрокаОстатки.Количество = 0;
				КонецЕсли;
				Если СтрокаОстатки.Сумма<0 Тогда
					СтрокаОстатки.Сумма = 0;
				КонецЕсли;
			КонецЦикла;
			Объект.БюджетныеОперации.Загрузить(Остатки);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОстатки(Сценарий,Организация,Структура,Граница = Неопределено) Экспорт
	Если Граница = Неопределено Тогда
		Граница = ТекущаяДата();
	КонецЕсли;
	
	Отбор = "";
	Запрос = Новый Запрос;
	Для Каждого ЭлементСтруктуры Из Структура Цикл
		Если ЭлементСтруктуры.Ключ = "ПериодПланирования" Тогда
			Запрос.УстановитьПараметр("НачалоПериода",фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ЭлементСтруктуры.Значение,Сценарий));
			Запрос.УстановитьПараметр("КонецПериода",фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ЭлементСтруктуры.Значение,Сценарий));
			Отбор = Отбор + "
			|	И ПериодПланирования>=&НачалоПериода И ПериодПланирования<=&КонецПериода";
		Иначе
			Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ,ЭлементСтруктуры.Значение);
			Отбор = Отбор + "
			|	И "+?(Найти(ЭлементСтруктуры.Ключ,"Разрез")=0,"","ДополнительныеРазрезы.")+ЭлементСтруктуры.Ключ+"=&"+ЭлементСтруктуры.Ключ;
		КонецЕсли;
	КонецЦикла;
	МассивРегистров = фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрыФактическихДанных();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	План.ФинансовыйПоказатель КАК ФинансовыйПоказатель,
		|	План.УправленческоеПодразделение КАК УправленческоеПодразделение,
		|	План.Проект КАК Проект,
		|	План.Номенклатура КАК Номенклатура,
		|	План.Контрагент КАК Контрагент,
		|	НаборРазрезов.Разрез1 КАК Разрез1,
		|	НаборРазрезов.Разрез2 КАК Разрез2,
		|	НаборРазрезов.Разрез3 КАК Разрез3,
		|	НаборРазрезов.Разрез4 КАК Разрез4,
		|	НаборРазрезов.Разрез5 КАК Разрез5,
		|	НаборРазрезов.Разрез6 КАК Разрез6,
		|	НаборРазрезов.Разрез7 КАК Разрез7,
		|	НаборРазрезов.Разрез8 КАК Разрез8,
		|	НаборРазрезов.Разрез9 КАК Разрез9,
		|	НаборРазрезов.Разрез10 КАК Разрез10,
		|	СУММА(План.КоличествоОборот) КАК Количество,
		|	СУММА(План.СуммаУпрОборот) КАК Сумма
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	РегистрНакопления.фин_ОборотыБюджетов.Обороты(
		|			,
		|			&Граница,
		|			,
		|			Организация = &Организация
		|				И Сценарий = &Сценарий"+Отбор+") КАК План
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_КлассификаторНаборовДополнительныхРазрезов КАК НаборРазрезов
		|		ПО План.ДополнительныеРазрезы = НаборРазрезов.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	План.ФинансовыйПоказатель,
		|	План.УправленческоеПодразделение,
		|	План.Проект,
		|	План.Номенклатура,
		|	План.Контрагент,
		|	НаборРазрезов.Разрез1,
		|	НаборРазрезов.Разрез2,
		|	НаборРазрезов.Разрез3,
		|	НаборРазрезов.Разрез4,
		|	НаборРазрезов.Разрез5,
		|	НаборРазрезов.Разрез6,
		|	НаборРазрезов.Разрез7,
		|	НаборРазрезов.Разрез8,
		|	НаборРазрезов.Разрез9,
		|	НаборРазрезов.Разрез10
		|";
		Для Каждого ИмяРегистра Из МассивРегистров Цикл
			Запрос.Текст=Запрос.Текст+"
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Факт.ФинансовыйПоказатель,
			|	Факт.УправленческоеПодразделение,
			|	Факт.Проект,
			|	Факт.Номенклатура,
			|	Факт.Контрагент,
			|	НаборРазрезов.Разрез1,
			|	НаборРазрезов.Разрез2,
			|	НаборРазрезов.Разрез3,
			|	НаборРазрезов.Разрез4,
			|	НаборРазрезов.Разрез5,
			|	НаборРазрезов.Разрез6,
			|	НаборРазрезов.Разрез7,
			|	НаборРазрезов.Разрез8,
			|	НаборРазрезов.Разрез9,
			|	НаборРазрезов.Разрез10,
			|	СУММА(-Факт.КоличествоОборот),
			|	СУММА(-Факт.СуммаУпрОборот)
			|ИЗ
			|	РегистрНакопления."+ИмяРегистра+".Обороты(
			|			,
			|			&Граница,
			|			,
			|			Организация = &Организация
			|				И Сценарий = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка)"+Отбор+") КАК Факт
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_КлассификаторНаборовДополнительныхРазрезов КАК НаборРазрезов
			|		ПО Факт.ДополнительныеРазрезы = НаборРазрезов.Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	Факт.ФинансовыйПоказатель,
			|	Факт.УправленческоеПодразделение,
			|	Факт.Проект,
			|	Факт.Номенклатура,
			|	Факт.Контрагент,
			|	НаборРазрезов.Разрез1,
			|	НаборРазрезов.Разрез2,
			|	НаборРазрезов.Разрез3,
			|	НаборРазрезов.Разрез4,
			|	НаборРазрезов.Разрез5,
			|	НаборРазрезов.Разрез6,
			|	НаборРазрезов.Разрез7,
			|	НаборРазрезов.Разрез8,
			|	НаборРазрезов.Разрез9,
			|	НаборРазрезов.Разрез10";
		КонецЦикла;
		Запрос.Текст=Запрос.Текст+"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВТ.Количество) КАК Количество,
		|	СУММА(ВТ.Сумма) КАК Сумма,
		|	ВТ.ФинансовыйПоказатель,
		|	ВТ.УправленческоеПодразделение,
		|	ВТ.Проект,
		|	ВТ.Номенклатура,
		|	ВТ.Контрагент,
		|	ВТ.Разрез1,
		|	ВТ.Разрез2,
		|	ВТ.Разрез3,
		|	ВТ.Разрез4,
		|	ВТ.Разрез5,
		|	ВТ.Разрез6,
		|	ВТ.Разрез7,
		|	ВТ.Разрез8,
		|	ВТ.Разрез9,
		|	ВТ.Разрез10
		|ИЗ
		|	ВТ КАК ВТ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ.Проект,
		|	ВТ.Номенклатура,
		|	ВТ.ФинансовыйПоказатель,
		|	ВТ.УправленческоеПодразделение,
		|	ВТ.Контрагент,
		|	ВТ.Разрез1,
		|	ВТ.Разрез2,
		|	ВТ.Разрез3,
		|	ВТ.Разрез4,
		|	ВТ.Разрез5,
		|	ВТ.Разрез6,
		|	ВТ.Разрез7,
		|	ВТ.Разрез8,
		|	ВТ.Разрез9,
		|	ВТ.Разрез10
		|ИМЕЮЩИЕ СУММА(ВТ.Сумма)>0 ИЛИ СУММА(ВТ.Количество)>0";
	
	Запрос.УстановитьПараметр("Организация", 	?(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям"),Организация,Справочники.Организации.ПустаяСсылка()));
	Запрос.УстановитьПараметр("Сценарий", 	Сценарий);
	Запрос.УстановитьПараметр("Граница", 	Граница);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	                        
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

Процедура фин_ПриЗаписиДокументовОтменаПроведенияПриЗаписи(Источник, Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	РежимХранения =  фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимХраненияФактическихДанных");
	
	Если РежимХранения <> Перечисления.фин_РежимыХраненияФактическихДанных.НастраиваемыйРежим Тогда
		Возврат;
	КонецЕсли;
	
	РежимХраненияДляДокумента = фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрФактическихДанныхДляДокумента(Источник.Метаданные().Имя);
	
	Если РежимХраненияДляДокумента.РегистрацияРучнойОперацией = Истина Тогда
		Если Источник.ДополнительныеСвойства.Свойство("ЭтоОтменаПроведения") Тогда
			УстановитьПривилегированныйРежим(Истина);
			ДокументРегистрации = фин_ОбщегоНазначенияВызовСервераПовтИсп.ДокументРегистрацииФактическихДанных(Источник.Ссылка);
			НаборЗаписей = РегистрыНакопления[РежимХраненияДляДокумента.ИмяРегистра].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументРегистрации);
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось очистить проводки по бюджетированию для документа "+Строка(Источник.Ссылка)+", сформированные операцией "+Строка(ДокументРегистрации)+"
					|	"+ОписаниеОшибки());
			КонецПопытки;
			РегистрацияПрогнозныхДанных = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмеютсяПравилаРегистрацииПрогнозныхДанных();
			РегистрацияЛимитов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмеютсяЛимитыНаИсполнение();
			Если РегистрацияЛимитов Тогда
				НаборДвижений = РегистрыНакопления.фин_КонтролируемыеФинансовыеПоказатели.СоздатьНаборЗаписей();
				НаборДвижений.Отбор.Регистратор.Установить(ДокументРегистрации);
				НаборДвижений.Очистить();
				Попытка
					НаборДвижений.Записать();
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось очистить проводки по лимитам бюджетов для документа "+Строка(Источник.Ссылка)+", сформированные операцией "+Строка(ДокументРегистрации)+"
						|	"+ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
			Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ВестиУчетПоПлануСчетовБюджетирования") Тогда
				НаборДвижений = РегистрыБухгалтерии.фин_Бюджетирование.СоздатьНаборЗаписей();
				НаборДвижений.Отбор.Регистратор.Установить(ДокументРегистрации);
				НаборДвижений.Очистить();
				Попытка
					НаборДвижений.Записать();
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось очистить проводки по плану счетов бюджетирования для документа "+Строка(Источник.Ссылка)+", сформированные операцией "+Строка(ДокументРегистрации)+"
						|	"+ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
			Если РегистрацияПрогнозныхДанных = Истина Тогда
				НаборДвиженийПрогноз = РегистрыНакопления.фин_ПрогнозИсполненияБюджетов.СоздатьНаборЗаписей();
				НаборДвиженийПрогноз.Отбор.Регистратор.Установить(ДокументРегистрации);
				НаборДвиженийПрогноз.Очистить();
				Попытка
					НаборДвиженийПрогноз.Записать();
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось очистить проводки по прогнозным данным бюджетов для документа "+Строка(Источник.Ссылка)+", сформированные операцией "+Строка(ДокументРегистрации)+"
						|	"+ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
			Если Источник.ПометкаУдаления <> ДокументРегистрации.ПометкаУдаления Тогда
				ДокументОбъект = ДокументРегистрации.ПолучитьОбъект();
				Попытка
					ДокументОбъект.УстановитьПометкуУдаления(Источник.ПометкаУдаления);
				Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось "+?(Источник.ПометкаУдаления,"установить","снять")+" пометку на удаление документа "+Строка(ДокументРегистрации)+"
					|	"+ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли  Источник.ДополнительныеСвойства.Свойство("ИзменениеПометкиУдаления") Тогда 
			УстановитьПривилегированныйРежим(Истина);
			ДокументРегистрации = фин_ОбщегоНазначенияВызовСервераПовтИсп.ДокументРегистрацииФактическихДанных(Источник.Ссылка);
			Если Источник.ПометкаУдаления <> ДокументРегистрации.ПометкаУдаления Тогда
				ДокументОбъект = ДокументРегистрации.ПолучитьОбъект();
				Попытка
					ДокументОбъект.УстановитьПометкуУдаления(Источник.ПометкаУдаления);
				Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось "+?(Источник.ПометкаУдаления,"установить","снять")+" пометку на удаление документа "+Строка(ДокументРегистрации)+"
					|	"+ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура фин_ПередЗаписьюДокументовПроверкаНаОтменуПроведенияПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	РежимХранения =  фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимХраненияФактическихДанных");
	
	Если РежимХранения <> Перечисления.фин_РежимыХраненияФактическихДанных.НастраиваемыйРежим Тогда
		Возврат;
	КонецЕсли;
	
	РежимХраненияДляДокумента = фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрФактическихДанныхДляДокумента(Источник.Метаданные().Имя);
	
	Если РежимХраненияДляДокумента.РегистрацияРучнойОперацией <> Истина Тогда
		
		Возврат;
		
	КонецЕсли;
		
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Источник.ДополнительныеСвойства.Вставить("ЭтоОтменаПроведения");
	ИначеЕсли Источник.ПометкаУдаления <> Источник.Ссылка.ПометкаУдаления Тогда
		Источник.ДополнительныеСвойства.Вставить("ИзменениеПометкиУдаления");
	КонецЕсли;
КонецПроцедуры

// возвращает следующий период планирования
//
Функция СледующийПериодПланирования(ДатаВПериодеПланирования,Сценарий,Добавить = Истина) Экспорт
	ПериодПланирования = ДатаВПериодеПланирования;
	Если ПериодПланирования = '00010101' Тогда
		ПериодПланирования = ТекущаяДата();
	КонецЕсли;
	Если ТипЗнч(Сценарий)= Тип("ПеречислениеСсылка.Периодичность") Тогда
		НачалоПериода = ДатаНачалаПериода(ДатаВПериодеПланирования,Сценарий);
		ПериодПланирования = ДобавитьИнтервал(НачалоПериода,Сценарий,?(Добавить,1,-1));
		Возврат ПериодПланирования;
	КонецЕсли;
	ПериодПланирования = ДатаНачалаПериода(ДатаВПериодеПланирования,Сценарий.Периодичность);
	Если ТипЗнч(Сценарий) = Тип("СправочникОбъект.СценарииПланирования") ИЛИ НЕ Сценарий.ИспользоватьТочкиПланирования Тогда
		ПериодПланирования = ДобавитьИнтервал(ПериодПланирования,Сценарий.Периодичность,?(Добавить,1,-1));
	Иначе
		Точки = Сценарий.ТочкиПланирования.Выгрузить();
		Точки.Сортировать("ПериодПланирования");
		Если Точки.Количество() = 1 Тогда
			Сообщить("Для сценария """+Сценарий+""" задана единственная точка планирования!");
			Возврат Точки[0].ПериодПланирования;
		ИначеЕсли Точки.Количество() = 0 Тогда
			Сообщить("Для сценария """+Сценарий+""" не задан список точек планирования!");
			Возврат ПериодПланирования;
		Иначе
			СтрокиПериода = Точки.НайтиСтроки(Новый Структура("ПериодПланирования",ПериодПланирования));
			СтрокаПериода = Неопределено;
			Если СтрокиПериода.Количество() > 0 Тогда
				СтрокаПериода = СтрокиПериода[0];
			Иначе
				Для Каждого Строка Из Точки Цикл
					Если Строка.ПериодПланирования > ПериодПланирования Тогда
						СтрокаПериода = Строка;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если СтрокаПериода = Неопределено Тогда
					Сообщить("Для сценария """+Сценарий+""" не найдена "+?(Добавить,"следующая","предыдущая")+" точка планирования!");
					Возврат ПериодПланирования;
				КонецЕсли;
			КонецЕсли;
			Индекс = Точки.Индекс(СтрокаПериода);
			Если Добавить Тогда
				Если Индекс = Точки.Количество()-1 Тогда
					Сообщить("Для сценария """+Сценарий+""" не найдена "+?(Добавить,"следующая","предыдущая")+" точка планирования!");
					Возврат ПериодПланирования;
				КонецЕсли;
			Иначе
				Если Индекс = 0 Тогда
					Сообщить("Для сценария """+Сценарий+""" не найдена "+?(Добавить,"следующая","предыдущая")+" точка планирования!");
					Возврат ПериодПланирования;
				КонецЕсли;
			КонецЕсли;
			Индекс = Индекс +1*?(Добавить,1,-1);
			Возврат Точки.Получить(Индекс).ПериодПланирования;
		КонецЕсли;
	КонецЕсли;
	Возврат ПериодПланирования;
КонецФункции //СледующийПериодПланирования 

// возвращает горизонт планирования в виде даты/текста
//
Функция ПолучитьГоризонтПланирования(ДатаВПериодеПланирования,Сценарий,Текст=Ложь) Экспорт
	ПериодПланирования = ДатаНачалаПериода(ДатаВПериодеПланирования,Сценарий.Периодичность);
	Дата = ?(Сценарий.ПродолжительностьЦикла1<2,ДатаКонцаПериода(ПериодПланирования,Сценарий.Периодичность),ДобавитьИнтервал(ДатаКонцаПериода(ПериодПланирования,Сценарий.Периодичность),Сценарий.Периодичность,Сценарий.ПродолжительностьЦикла1-1));
	Если Текст Тогда
		Возврат ПредставлениеПериодаСтрокой(Дата,Сценарий);
	Иначе
		Возврат Дата;
	КонецЕсли;
КонецФункции //ПолучитьГоризонтПланирования

// Функция возвращает ближайшую дату начала периода планирования
//
// Параметры
//	Периодичность (Перечисления.Периодичность)	- периодичность планирования по сценарию.
//	ДатаВПериоде (Дата)							- произвольная дата
//
// Возвращаемое значение:
//	ДатаНачалаПериода		– ближайшая дата начала периода планирования
//
Функция ДатаНачалаПериода(ДатаВПериоде,ПериодичностьПланирования) Экспорт
	
	Если ТипЗнч(ПериодичностьПланирования) = Тип("СправочникСсылка.СценарииПланирования") Тогда
		Периодичность = ПериодичностьПланирования.Периодичность;
	Иначе
		Периодичность = ПериодичностьПланирования;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ДатаВПериоде)=Тип("Дата") Тогда
		Возврат '00010101';
	КонецЕсли;
	
	Если ДатаВПериоде = '00010101' Тогда 
		ДатаВПериоде = ТекущаяДата();
	КонецЕсли;
	
	Если Периодичность=Перечисления.Периодичность.День Тогда
		Возврат НачалоДня(ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Неделя Тогда
		Возврат НачалоНедели (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Месяц Тогда
		Возврат НачалоМесяца (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Квартал Тогда
		Возврат НачалоКвартала (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Год Тогда
		Возврат НачалоГода (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Декада Тогда
		День = Цел(День(ДатаВПериоде)/10)*10;
		Если День = 30 Тогда
			День =20;
		КонецЕсли;
		Возврат Дата(Год(ДатаВПериоде),Месяц(ДатаВПериоде),?(День=0,1,День))+?(День=0,0,24*60*60);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Полугодие Тогда
		НоваяДатаПериода	=НачалоМесяца(ДатаВПериоде);
		НовыйМесяц = 1;
		Если Месяц(НоваяДатаПериода) >6 Тогда
			НовыйМесяц = 7;
		КонецЕсли;
		НоваяДатаПериода = Дата(Год(НоваяДатаПериода),НовыйМесяц,1);
		Возврат НоваяДатаПериода;
	Иначе
		Возврат НачалоДня(ДатаВПериоде);
	КонецЕсли;
	
КонецФункции // ДатаНачалаПериода()

// Функция возвращает ближайшую дату окончания периода планирования
//
// Параметры
//	Периодичность (Перечисления.Периодичность)	- периодичность планирования по сценарию.
//	ДатаВПериоде (Дата)							- произвольная дата
//
// Возвращаемое значение:
//	ДатаКонцаПериода	– ближайшая дата окончания периода планирования
//
Функция ДатаКонцаПериода(ДатаВПериоде,ПериодичностьПланирования) Экспорт
	
	Если ТипЗнч(ПериодичностьПланирования) = Тип("СправочникСсылка.СценарииПланирования") Тогда
		Периодичность = ПериодичностьПланирования.Периодичность;
	Иначе
		Периодичность = ПериодичностьПланирования;
	КонецЕсли;
	
	Если ДатаВПериоде = '00010101' Тогда 
		ДатаВПериоде = ТекущаяДата();
	КонецЕсли;
	
	Если Периодичность=Перечисления.Периодичность.День Тогда
		Возврат КонецДня(ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Неделя Тогда
		Возврат КонецНедели (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Месяц Тогда
		Возврат КонецМесяца (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Квартал Тогда
		Возврат КонецКвартала (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Год Тогда
		Возврат КонецГода (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Декада Тогда
		День = Цел((День(ДатаВПериоде)-1)/10)*10;
		Если День < 0 Тогда
			День = 0;
		КонецЕсли;
		Если День = 30 Тогда
			День =20;
		КонецЕсли;
		День=День+10;
		Если День=30 Тогда
			Попытка
				Возврат КонецМесяца(Дата(Год(ДатаВПериоде),Месяц(ДатаВПериоде),?(День=0,1,День)));
			Исключение
				День = День -5;
				Возврат КонецМесяца(Дата(Год(ДатаВПериоде),Месяц(ДатаВПериоде),?(День=0,1,День)));
			КонецПопытки;
		Иначе
			Возврат КонецДня(Дата(Год(ДатаВПериоде),Месяц(ДатаВПериоде),?(День=0,1,День)));
		КонецЕсли;
	ИначеЕсли Периодичность=Перечисления.Периодичность.Полугодие Тогда
		НоваяДатаПериода	=НачалоМесяца(ДатаВПериоде);
		НовыйМесяц = 6;
		Если Месяц(НоваяДатаПериода) >6 Тогда
			НовыйМесяц = 12;
		КонецЕсли;
		НоваяДатаПериода = КонецМесяца(Дата(Год(НоваяДатаПериода),НовыйМесяц,1));
		Возврат НоваяДатаПериода;
	Иначе
		Возврат КонецДня(ДатаВПериоде);
	КонецЕсли;
	
КонецФункции // ДатаКонцаПериода()

// Функция добавляет интервал к дате
//
// Параметры:
//	Периодичность (Перечисления.Периодичность)	- периодичность 
//	ДатаВПериоде (Дата)							- произвольная дата
//	Смещение (число)							- определяет направление и количество периодов, в котором сдвигается дата
//
// Возвращаемое значение:
//	Дата, отстоящая от исходной на заданное количество периодов 
//
Функция ДобавитьИнтервал(ДатаПериода,ПериодичностьПланирования,Смещение) Экспорт
	
	Если ТипЗнч(ДатаПериода)<>Тип("Дата") Тогда
		ДатаПериода =ПолучитьДатуИзПоляКомпоновки(ДатаПериода);
	КонецЕсли;
 	
	Если ТипЗнч(ПериодичностьПланирования) = Тип("СправочникСсылка.СценарииПланирования") Тогда
		Периодичность = ПериодичностьПланирования.Периодичность;
	Иначе
		Периодичность = ПериодичностьПланирования;
	КонецЕсли;
	
	Если ДатаПериода = '00010101' Тогда 
		ДатаПериода = ТекущаяДата();
	КонецЕсли;
	

	Если Смещение=0 Тогда
		НоваяДатаПериода=ДатаПериода;	
	ИначеЕсли Периодичность=Перечисления.Периодичность.День Тогда
		НоваяДатаПериода=НачалоДня(ДатаПериода+Смещение*24*3600);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Неделя Тогда
		НоваяДатаПериода=НачалоНедели(ДатаПериода+Смещение*7*24*3600);

	ИначеЕсли Периодичность=Перечисления.Периодичность.Месяц Тогда
		НоваяДатаПериода=ДобавитьМесяц(ДатаПериода,Смещение);

	ИначеЕсли Периодичность=Перечисления.Периодичность.Квартал Тогда
		НоваяДатаПериода=ДобавитьМесяц(ДатаПериода,Смещение*3);

	ИначеЕсли Периодичность=Перечисления.Периодичность.Год Тогда
		НоваяДатаПериода=ДобавитьМесяц(ДатаПериода,Смещение*12);

	ИначеЕсли Периодичность=Перечисления.Периодичность.Декада Тогда
		НоваяДатаПериода=НачалоДня(ДатаПериода+Смещение*10*24*3600);
		
		Если День(НоваяДатаПериода) > 29 Тогда 
			НоваяДатаПериода=НачалоМесяца(ДобавитьМесяц(НоваяДатаПериода,1));
		КонецЕсли;
		
		НоваяДатаПериода = ДатаНачалаПериода(НоваяДатаПериода,Периодичность)
		
	ИначеЕсли Периодичность=Перечисления.Периодичность.Полугодие Тогда
		НоваяДатаПериода	=ДобавитьМесяц(ДатаПериода,Смещение*6);
		НоваяДатаПериода 	= ДатаНачалаПериода(НоваяДатаПериода,Периодичность)

	Иначе
		НоваяДатаПериода=НачалоДня(ДатаПериода+Смещение*24*3600);

	КонецЕсли;

	Возврат НоваяДатаПериода;

КонецФункции

// возвращает текстовое представление периода
//
Функция ПредставлениеПериодаСтрокой(Дата,Сценарий) Экспорт
	ДатаПериода =  ПолучитьДатуИзПоляКомпоновки(Дата);
	Если ТипЗнч(Сценарий)=Тип("СправочникСсылка.СценарииПланирования") ИЛИ ТипЗнч(Сценарий)=Тип("СправочникОбъект.СценарииПланирования") Тогда
		Периодичность = Сценарий.Периодичность;
	Иначе
		Периодичность = Сценарий;
	КонецЕсли;
	Возврат ПолучитьПериодСтрокой(ДатаПериода,Строка(Периодичность));
КонецФункции //ПредставлениеПериодаСтрокой

// возвращает дату из стандартного поля компоновки данных
//
Функция ПолучитьДатуИзПоляКомпоновки(Дата) Экспорт
	 Возврат ?(ТипЗнч(Дата)=Тип("Дата"),Дата,Дата.Дата);
 КонецФункции //ПолучитьДатуИзПоляКомпоновки
 
 // Возвращает строку, описывающую период, определяемый переданными
// датой и периодичностью.
//
// Параметры
//  ДатаВПериоде:Дата - дата из периода
//  Периодичность: Строка - строка, определяющая периодичность
//
// Возвращаемое значение:
//   СтрокаПериод: строка   – представление периода для вывода в отчетах
//
Функция ПолучитьПериодСтрокой(ДатаВПериоде, ПериодичностьДаты) Экспорт
	
	Если ТипЗнч(ПериодичностьДаты) <> Тип("Строка") Тогда
		Если ТипЗнч(ПериодичностьДаты)=Тип("СправочникСсылка.СценарииПланирования") Тогда
			Периодичность = Строка(ПериодичностьДаты.Периодичность);
		Иначе
			Периодичность = Строка(ПериодичностьДаты);
		КонецЕсли;
	Иначе
		Периодичность = ПериодичностьДаты;
	КонецЕсли;

	Если Периодичность = "Год" Тогда
		ФорматДаты = "ДФ='гггг ""г.""'";
		
	ИначеЕсли Периодичность = "Квартал" Тогда
		ФорматДаты = "ДФ='к"" квартал"" гггг ""г.""'";
		
	ИначеЕсли Периодичность = "Месяц" Тогда
		ФорматДаты = "ДФ='ММММ гггг ""г.""'";
		
	ИначеЕсли Периодичность = "Неделя" Тогда
		ФорматДаты = "ДФ='""Неделя (""дд.ММ.гггг'";
		
	ИначеЕсли Периодичность = "День" Тогда
		ФорматДаты = "ДФ='дд.ММ.гггг ""г.""'";
		
	ИначеЕсли Периодичность = "Полугодие" Тогда
		ФорматДаты = "ДФ='гггг"" г.""'";
		СтрокаПериод = "" + Формат(ДатаВПериоде, ФорматДаты);
		Если Месяц(ДатаВПериоде) >=6 Тогда
			Полугодие = "2 полугодие ";
		Иначе
			Полугодие = "1 полугодие ";
		КонецЕсли;
		Возврат Полугодие+СтрокаПериод;
		
	ИначеЕсли Периодичность = "Декада" Тогда
		ФорматДаты = "ДФ='"" декада ""ММММ гг"" г.""'";
		СтрокаПериод = "" + Формат(ДатаВПериоде, ФорматДаты);
		Если День(ДатаВПериоде) <=10 Тогда
			Декада = "1";
		ИначеЕсли День(ДатаВПериоде) <=20 Тогда
			Декада = "2";
		Иначе
			Декада = "3";
		КонецЕсли;
		Возврат Декада+СтрокаПериод;
	Иначе
		ФорматДаты = "";
	КонецЕсли;
	
	СтрокаПериод = "" + Формат(ДатаВПериоде, ФорматДаты);
	Если Периодичность = "Неделя" И ТипЗнч(ДатаВПериоде) = Тип("Дата") Тогда
		СтрокаПериод = "" + НеделяГода(ДатаВПериоде) + " " + СтрокаПериод + Формат(КонецНедели(ДатаВПериоде), "ДФ='"" - ""дд.ММ.гггг)'");
	КонецЕсли;
	
	Возврат СтрокаПериод;
	
КонецФункции // ПолучитьПериодСтрокой()

#КонецЕсли

