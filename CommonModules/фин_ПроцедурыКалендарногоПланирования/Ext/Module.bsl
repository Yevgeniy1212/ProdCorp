Функция НачалоСобытия(СтрокаГрафика,Сценарий,Форма = Неопределено,ПроверятьКонечныеСроки=Ложь,СУчетомГрафика = Ложь) Экспорт
	Если ПроверятьКонечныеСроки Тогда
		Возврат СтрокаГрафика.ДатаНачала;
	КонецЕсли;
	ТочкаОтсчета 		= КонецСобытия(СтрокаГрафика,Сценарий,Форма,ПроверятьКонечныеСроки,СУчетомГрафика);
	ЕдиницаИзмерения 	= СтрокаГрафика.ЕдиницаИзмеренияВремениИсполнения;
	ШагОтсчета 			= ?(ЕдиницаИзмерения=Перечисления.усд_ЕдиницыИзмеренияВремениИсполненияЗадачСогласования.Дней ИЛИ ЕдиницаИзмерения=Перечисления.усд_ЕдиницыИзмеренияВремениИсполненияЗадачСогласования.РабочихДней,24*60,?(ЕдиницаИзмерения=Перечисления.усд_ЕдиницыИзмеренияВремениИсполненияЗадачСогласования.Часов ИЛИ ЕдиницаИзмерения=Перечисления.усд_ЕдиницыИзмеренияВремениИсполненияЗадачСогласования.РабочихЧасов,60,1));
	НаправлениеОтсчета 	= -1;
	РезультатРасчета 	= ТочкаОтсчета + НаправлениеОтсчета * ШагОтсчета * СтрокаГрафика.СрокИсполнения;
	Возврат РезультатРасчета;
КонецФункции

Функция КонецСобытия(СтрокаГрафика,Сценарий,Форма = Неопределено,ПроверятьКонечныеСроки=Ложь,СУчетомГрафика = Ложь) Экспорт
	Если ПроверятьКонечныеСроки Тогда
		Возврат СтрокаГрафика.ДатаЗавершения;
	КонецЕсли;
	ТочкаОтсчета 		= ?(СтрокаГрафика.ДатаОтсчета=Перечисления.фин_ГраницыБюджетногоПериода.НачалоБюджетногоПериода,0,ДлительностьСценария(Сценарий,Форма));
	ЕдиницаИзмерения 	= СтрокаГрафика.ЕдиницаИзмеренияВремениОтсчета;
	ШагОтсчета 			= ?(ЕдиницаИзмерения=Перечисления.усд_ЕдиницыИзмеренияВремениИсполненияЗадачСогласования.Дней ИЛИ ЕдиницаИзмерения=Перечисления.усд_ЕдиницыИзмеренияВремениИсполненияЗадачСогласования.РабочихДней,24*60,?(ЕдиницаИзмерения=Перечисления.усд_ЕдиницыИзмеренияВремениИсполненияЗадачСогласования.Часов ИЛИ ЕдиницаИзмерения=Перечисления.усд_ЕдиницыИзмеренияВремениИсполненияЗадачСогласования.РабочихЧасов,60,1));
	НаправлениеОтсчета 	= ?(СтрокаГрафика.ВидОтсчета=Перечисления.фин_ВидыОтсчетовСроковИсполнения.До,-1,1);
	РезультатРасчета 	= ТочкаОтсчета + НаправлениеОтсчета * ШагОтсчета * СтрокаГрафика.ДнейОтсчета;
	Возврат РезультатРасчета;
КонецФункции

Функция КалендарноеНачалоСобытия(СтрокаГрафика,Сценарий,КалендарноеОкончаниеСобытия,График) Экспорт
	ТочкаОтсчета 		= КалендарноеОкончаниеСобытия;
	ЕдиницаИзмерения 	= СтрокаГрафика.ЕдиницаИзмеренияВремениИсполнения;
	НаправлениеОтсчета 	= -1;
	Сдвиг 				= НаправлениеОтсчета * СтрокаГрафика.СрокИсполнения;
	РезультатРасчета 	= фин_ЗащитаПривилегированныеПроцедуры.РасчетДатыЗавершенияИсполнения(График,ЕдиницаИзмерения,ТочкаОтсчета,Сдвиг,,Истина);
	Возврат РезультатРасчета;
КонецФункции

Функция КалендарныйКонецСобытия(СтрокаГрафика,Сценарий,НачалоБюджетногоПериода,КонецБюджетногоПериода,График,Форма=Неопределено) Экспорт
	ТочкаОтсчета 		= ?(СтрокаГрафика.ДатаОтсчета=Перечисления.фин_ГраницыБюджетногоПериода.НачалоБюджетногоПериода,НачалоБюджетногоПериода,КонецБюджетногоПериода);
	ЕдиницаИзмерения 	= СтрокаГрафика.ЕдиницаИзмеренияВремениОтсчета;
	НаправлениеОтсчета 	= ?(СтрокаГрафика.ВидОтсчета=Перечисления.фин_ВидыОтсчетовСроковИсполнения.До,-1,1);
	Сдвиг 				= НаправлениеОтсчета * СтрокаГрафика.ДнейОтсчета;
	РезультатРасчета 	= фин_ЗащитаПривилегированныеПроцедуры.РасчетДатыЗавершенияИсполнения(График,ЕдиницаИзмерения,ТочкаОтсчета,Сдвиг);
	Возврат РезультатРасчета;
КонецФункции

Функция ДлительностьСценария(Сценарий,Форма = Неопределено) Экспорт
	Если Форма<>Неопределено Тогда
		СтрокиСценарий = Форма.ДлительностьСценариев.НайтиСтроки(Новый Структура("Сценарий",Сценарий));
		Если СтрокиСценарий.Количество()>0 Тогда
			Возврат СтрокиСценарий[0].Длительность;	
		КонецЕсли;
	КонецЕсли;
	Длительность	= 0;
	Если ЗначениеЗаполнено(Сценарий) Тогда
		Если ТипЗнч(Сценарий.ПродолжительностьЦикла)=Тип("ПеречислениеСсылка.фин_Периодичность") Тогда
			Длительность = ДлительностьПериода(Сценарий.ПродолжительностьЦикла);
		Иначе
			Длительность = ДлительностьПериода(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)) * Сценарий.ПродолжительностьЦикла;
		КонецЕсли;
	Иначе
		ВыборкаСценарии = Справочники[фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования"].Выбрать();
		Пока ВыборкаСценарии.Следующий() Цикл
			Если ВыборкаСценарии.ЭтоГруппа ИЛИ ВыборкаСценарии.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(ВыборкаСценарии.ПродолжительностьЦикла)=Тип("ПеречислениеСсылка.фин_Периодичность") Тогда
				мДлительность = ДлительностьПериода(ВыборкаСценарии.ПродолжительностьЦикла);
			Иначе
				мДлительность = ДлительностьПериода(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(ВыборкаСценарии.Ссылка)) * ВыборкаСценарии.ПродолжительностьЦикла;
			КонецЕсли;
			Длительность = Макс(Длительность,мДлительность);
		КонецЦикла;
	КонецЕсли;
	
	Если Форма<>Неопределено Тогда
		НоваяСтрока = Форма.ДлительностьСценариев.Добавить();
		НоваяСтрока.Сценарий 		= Сценарий;
		НоваяСтрока.Длительность 	= Длительность;
	КонецЕсли;
	Возврат Длительность;
КонецФункции

Функция ДлительностьПериода(Периодичность) Экспорт // в минутах
	Если Периодичность = Перечисления.фин_Периодичность.Год Тогда
		Возврат 360 * 24 * 60;
	ИначеЕсли Периодичность = Перечисления.фин_Периодичность.Полугодие Тогда
		Возврат 180 * 24 * 60;
	ИначеЕсли Периодичность = Перечисления.фин_Периодичность.Квартал Тогда
		Возврат 3*30 * 24 * 60;
	ИначеЕсли Периодичность = Перечисления.фин_Периодичность.Месяц Тогда
		Возврат 30 * 24 * 60;
	ИначеЕсли Периодичность = Перечисления.фин_Периодичность.Декада Тогда
		Возврат 10 * 24 * 60;
	ИначеЕсли Периодичность = Перечисления.фин_Периодичность.Неделя Тогда
		Возврат 7 * 24 * 60;
	Иначе
		Возврат 24 * 60;
	КонецЕсли;
КонецФункции

Функция ПолучитьСписокЗадачПоНастройкамРегламента(Регламент,Сценарий,Организация,АктивныйРегламент = Неопределено,ОтборПоДетализации=Ложь,Детализация = Неопределено,ОтборПоПользователю = Ложь,Пользователь = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регламент",				Регламент);
	Запрос.УстановитьПараметр("АктивныйРегламент",		?(АктивныйРегламент=Неопределено,Регламент,АктивныйРегламент));
	Запрос.УстановитьПараметр("СценарийПланирования",	Сценарий);
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("ОтборПоДетализации",		ОтборПоДетализации);
	Запрос.УстановитьПараметр("Детализация",			Детализация);
	Запрос.УстановитьПараметр("ОтборПоПользователю",	ОтборПоПользователю);
	Запрос.УстановитьПараметр("Пользователь",			Пользователь);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	фин_КалендарноеПланированиеБюджетногоПроцесса.ВидЗадачи,
	|	фин_КалендарноеПланированиеБюджетногоПроцесса.Бюджет,
	|	фин_КалендарноеПланированиеБюджетногоПроцесса.Организация,
	|	фин_КалендарноеПланированиеБюджетногоПроцесса.ЭтапБюджетногоПроцесса,
	|	фин_КалендарноеПланированиеБюджетногоПроцесса.Проект,
	|	фин_КалендарноеПланированиеБюджетногоПроцесса.УправленческоеПодразделение,
	|	фин_КалендарноеПланированиеБюджетногоПроцесса.СценарийПланирования,
	|	фин_КалендарноеПланированиеБюджетногоПроцесса.Регламент,
	|	фин_КалендарноеПланированиеБюджетногоПроцесса.ДатаОтсчета,
	|	фин_КалендарноеПланированиеБюджетногоПроцесса.ДнейОтсчета,
	|	фин_КалендарноеПланированиеБюджетногоПроцесса.ЕдиницаИзмеренияВремениОтсчета,
	|	фин_КалендарноеПланированиеБюджетногоПроцесса.ВидОтсчета,
	|	фин_КалендарноеПланированиеБюджетногоПроцесса.СрокИсполнения,
	|	фин_КалендарноеПланированиеБюджетногоПроцесса.ЕдиницаИзмеренияВремениИсполнения,
	|	фин_ИсполнителиЗадачБюджетногоПроцесса.Исполнитель
	|ПОМЕСТИТЬ ВТ_СписокЗадач
	|ИЗ
	|	РегистрСведений.фин_КалендарноеПланированиеБюджетногоПроцесса КАК фин_КалендарноеПланированиеБюджетногоПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_ИсполнителиЗадачБюджетногоПроцесса КАК фин_ИсполнителиЗадачБюджетногоПроцесса
	|		ПО фин_КалендарноеПланированиеБюджетногоПроцесса.ВидЗадачи = фин_ИсполнителиЗадачБюджетногоПроцесса.ВидЗадачи
	|			И фин_КалендарноеПланированиеБюджетногоПроцесса.Бюджет = фин_ИсполнителиЗадачБюджетногоПроцесса.Бюджет
	|			И фин_КалендарноеПланированиеБюджетногоПроцесса.Организация = фин_ИсполнителиЗадачБюджетногоПроцесса.Организация
	|			И фин_КалендарноеПланированиеБюджетногоПроцесса.ЭтапБюджетногоПроцесса = фин_ИсполнителиЗадачБюджетногоПроцесса.ЭтапБюджетногоПроцесса
	|			И фин_КалендарноеПланированиеБюджетногоПроцесса.Проект = фин_ИсполнителиЗадачБюджетногоПроцесса.Проект
	|			И фин_КалендарноеПланированиеБюджетногоПроцесса.УправленческоеПодразделение = фин_ИсполнителиЗадачБюджетногоПроцесса.УправленческоеПодразделение
	|			И фин_КалендарноеПланированиеБюджетногоПроцесса.Регламент = фин_ИсполнителиЗадачБюджетногоПроцесса.Регламент
	|			И фин_КалендарноеПланированиеБюджетногоПроцесса.СценарийПланирования = фин_ИсполнителиЗадачБюджетногоПроцесса.СценарийПланирования
	|ГДЕ
	|	фин_КалендарноеПланированиеБюджетногоПроцесса.Регламент = &Регламент
	|	И фин_КалендарноеПланированиеБюджетногоПроцесса.СценарийПланирования = &СценарийПланирования
	|	И фин_КалендарноеПланированиеБюджетногоПроцесса.Организация = &Организация
	|	И ВЫБОР
	|			КОГДА &ОтборПоДетализации
	|				ТОГДА фин_КалендарноеПланированиеБюджетногоПроцесса.Проект = &Детализация
	|						ИЛИ фин_КалендарноеПланированиеБюджетногоПроцесса.УправленческоеПодразделение = &Детализация
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписокСИсполнителями.ВидЗадачи,
	|	ВТ_СписокСИсполнителями.Бюджет,
	|	ВТ_СписокСИсполнителями.Организация,
	|	ВТ_СписокСИсполнителями.ЭтапБюджетногоПроцесса,
	|	ВТ_СписокСИсполнителями.Проект,
	|	ВТ_СписокСИсполнителями.УправленческоеПодразделение,
	|	ВТ_СписокСИсполнителями.СценарийПланирования КАК Сценарий,
	|	ВТ_СписокСИсполнителями.ДатаОтсчета,
	|	ВТ_СписокСИсполнителями.ДнейОтсчета,
	|	ВТ_СписокСИсполнителями.ЕдиницаИзмеренияВремениОтсчета,
	|	ВТ_СписокСИсполнителями.ВидОтсчета,
	|	ВТ_СписокСИсполнителями.СрокИсполнения,
	|	ВТ_СписокСИсполнителями.ЕдиницаИзмеренияВремениИсполнения,
	|	фин_РегламентФормированияБюджетов.Ранг КАК Ранг,
	|	ВТ_СписокСИсполнителями.Исполнитель
	|ИЗ
	|	ВТ_СписокЗадач КАК ВТ_СписокСИсполнителями
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_РегламентФормированияБюджетов КАК фин_РегламентФормированияБюджетов
	|		ПО ВТ_СписокСИсполнителями.Бюджет = фин_РегламентФормированияБюджетов.Бюджет
	|			И (фин_РегламентФормированияБюджетов.Регламент = &АктивныйРегламент)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ранг,
	|	ВТ_СписокСИсполнителями.ВидЗадачи.Порядок";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗадач = РезультатЗапроса.Выгрузить();
	ТаблицаЗадачРезультат = ТаблицаЗадач.СкопироватьКолонки();
	ТаблицаЗадачРезультат.Колонки.Добавить("Пользователь");
	
	ТаблицаИсполнителей = ТаблицаИсполнителей(ТаблицаЗадач.ВыгрузитьКолонку("Исполнитель"));
	Для Каждого СтрокаЗадач Из ТаблицаЗадач Цикл
		СтрокиИсполнителей = ТаблицаИсполнителей.НайтиСтроки(Новый Структура("Исполнитель",СтрокаЗадач.Исполнитель));
		Если СтрокиИсполнителей.Количество()=0 И НЕ ОтборПоПользователю Тогда
			НоваяСтрока = ТаблицаЗадачРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаЗадач);
		Иначе
			Для Каждого СтрокаИсполнителей Из СтрокиИсполнителей Цикл
				Если ОтборПоПользователю И СтрокаИсполнителей.Пользователь<>Пользователь Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока = ТаблицаЗадачРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаЗадач);
				НоваяСтрока.Пользователь = СтрокаИсполнителей.Пользователь;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЗадачРезультат;	
КонецФункции

Процедура ЗаполнитьПереченьВидовЗадач(ПереченьВидовЗадач) Экспорт
	ПереченьВидовЗадач.Добавить("ПодачаЗаявок","Подача заявок");
	ПереченьВидовЗадач.Добавить("СогласованиеЗаявок","Согласование заявок");
	ПереченьВидовЗадач.Добавить("ФормированиеБюджета","Формирование бюджета");
	ПереченьВидовЗадач.Добавить("СогласованиеБюджета","Согласование бюджета");
	ПереченьВидовЗадач.Добавить("КорректировкаБюджета","Корректировка бюджета");
	ПереченьВидовЗадач.Добавить("АнализИсполненияБюджета","Анализ исполнения бюджета");
КонецПроцедуры

Функция ИмеющиесяРасхожденияСРегламентом(БюджетныйРегламент,ГрафикПроцесса,СценарийПланирования,Форма = Неопределено,ПроверятьКонечныеСроки = Ложь, СоставРегламента = Неопределено,СоставВзаимосвязей = Неопределено) Экспорт
	
	ПереченьВидовЗадач = Новый СписокЗначений;
	ЗаполнитьПереченьВидовЗадач(ПереченьВидовЗадач);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_РегламентФормированияБюджетов.Бюджет,
		|	фин_РегламентФормированияБюджетов.Ранг КАК Ранг
		|ИЗ
		|	РегистрСведений.фин_РегламентФормированияБюджетов КАК фин_РегламентФормированияБюджетов
		|ГДЕ
		|	фин_РегламентФормированияБюджетов.Регламент = &Регламент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ранг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	фин_ВзаимосвязиБюджетовПоРегламенту.Бюджет,
		|	фин_ВзаимосвязиБюджетовПоРегламенту.Предшественник,
		|	фин_ВзаимосвязиБюджетовПоРегламенту.Обязательный
		|ИЗ
		|	РегистрСведений.фин_ВзаимосвязиБюджетовПоРегламенту КАК фин_ВзаимосвязиБюджетовПоРегламенту
		|ГДЕ
		|	фин_ВзаимосвязиБюджетовПоРегламенту.Регламент = &Регламент";
	
	Запрос.УстановитьПараметр("Регламент", БюджетныйРегламент);
	
	РасширенныйРегламент = БюджетныйРегламент.РасширенныйРежим;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Порядок 		= РезультатЗапроса[0].Выгрузить();
	ВзаимосвязиИБ	= РезультатЗапроса[1].Выгрузить();
	Взаимосвязи 	= ?(СоставВзаимосвязей=Неопределено,ВзаимосвязиИБ,СоставВзаимосвязей);
	Ошибки = "";
	
	КолонкиДетализации = ?(ГрафикПроцесса.Колонки.Найти("УровеньДетализации")=Неопределено,"Проект,УправленческоеПодразделение,","УровеньДетализации,");
	
	ТаблицаБюджетов = ?(СоставРегламента=Неопределено,Порядок,СоставРегламента);
	
	Для Каждого СтрокаБюджеты Из ТаблицаБюджетов Цикл
		
		СтрокиГрафика = ГрафикПроцесса.Скопировать(Новый Структура("Бюджет",СтрокаБюджеты.Бюджет),КолонкиДетализации+"ЭтапБюджетногоПроцесса");
		СтрокиГрафика.Свернуть(КолонкиДетализации+"ЭтапБюджетногоПроцесса");
		
		Для Каждого СтрокаГрафика Из СтрокиГрафика Цикл
			ОшибкиПоСтроке = "";
			ОтборДанныхГрафика 	= ?(ГрафикПроцесса.Колонки.Найти("УровеньДетализации")=Неопределено,Новый Структура("Бюджет,Проект,УправленческоеПодразделение,ЭтапБюджетногоПроцесса",СтрокаБюджеты.Бюджет,СтрокаГрафика.Проект,СтрокаГрафика.УправленческоеПодразделение,СтрокаГрафика.ЭтапБюджетногоПроцесса),Новый Структура("Бюджет,УровеньДетализации,ЭтапБюджетногоПроцесса",СтрокаБюджеты.Бюджет,СтрокаГрафика.УровеньДетализации,СтрокаГрафика.ЭтапБюджетногоПроцесса));
			// проверка последовательности выполнения задач в переделах строки графика
			СписокЗадачПоСтроке	= Новый СписокЗначений;
			Для Каждого ВидЗадачиЭлемент Из ПереченьВидовЗадач Цикл
				СтрокаВида = ПолучитьСтрокуПоВидуЗадачи(ГрафикПроцесса,ВидЗадачиЭлемент.Значение,ОтборДанныхГрафика);
				Если СтрокаВида<>Неопределено Тогда
					СписокЗадачПоСтроке.Добавить(СтрокаВида,ВидЗадачиЭлемент.Представление);
				КонецЕсли;
			КонецЦикла;
			Для Инд = 1 По СписокЗадачПоСтроке.Количество()-1 Цикл
				ПервоеСобытие = СписокЗадачПоСтроке.Получить(Инд-1);
				ВтороеСобытие = СписокЗадачПоСтроке.Получить(Инд);
				Если КонецСобытия(ПервоеСобытие.Значение,СценарийПланирования,Форма,ПроверятьКонечныеСроки)>НачалоСобытия(ВтороеСобытие.Значение,СценарийПланирования,Форма,ПроверятьКонечныеСроки) Тогда
					ОшибкиПоСтроке = ОшибкиПоСтроке+"
					|			- событие """+ПервоеСобытие.Представление+""" заканчивается позже начала события """+ВтороеСобытие.Представление+"""";
				КонецЕсли;
				Если КонецСобытия(ПервоеСобытие.Значение,СценарийПланирования,Форма,ПроверятьКонечныеСроки)>КонецСобытия(ВтороеСобытие.Значение,СценарийПланирования,Форма,ПроверятьКонечныеСроки) Тогда
					ОшибкиПоСтроке = ОшибкиПоСтроке+"
					|			- событие """+ПервоеСобытие.Представление+""" заканчивается позже окончания события """+ВтороеСобытие.Представление+"""";
				КонецЕсли;
			КонецЦикла;
			Если ОшибкиПоСтроке<>"" Тогда
				Ошибки = Ошибки + "
				|	- бюджет: "+ СтрокаБюджеты.Бюджет + ?(ГрафикПроцесса.Колонки.Найти("УровеньДетализации")=Неопределено,?(ЗначениеЗаполнено(СтрокаГрафика.УправленческоеПодразделение),"/"+СтрокаГрафика.УправленческоеПодразделение,"") + ?(ЗначениеЗаполнено(СтрокаГрафика.Проект),"/"+СтрокаГрафика.Проект,""),?(ЗначениеЗаполнено(СтрокаГрафика.УровеньДетализации),"/"+СтрокаГрафика.УровеньДетализации,"")) + ?(ЗначениеЗаполнено(СтрокаГрафика.ЭтапБюджетногоПроцесса),"/"+СтрокаГрафика.ЭтапБюджетногоПроцесса,"") + ОшибкиПоСтроке;
			КонецЕсли;
		КонецЦикла;
		
		НачалоФормированияБюджета = ?(ПроверятьКонечныеСроки,Дата(3000,1,1),1000000);
		
		ОтборПланирование 	= ОтборПоВидуЗадачи("ФормированиеБюджета");
		мСтрокиГрафика 		= ГрафикПроцесса.Скопировать(Новый Структура("Бюджет",СтрокаБюджеты.Бюджет));
		СтрокиПланирование 	= мСтрокиГрафика.НайтиСтроки(ОтборПланирование);
		Если СтрокиПланирование.Количество()=0 Тогда
			Ошибки = Ошибки + "
			|	- не запланировано формирование бюджета """+СтрокаБюджеты.Бюджет+"""";
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаПланирование Из СтрокиПланирование Цикл
			Начало = НачалоСобытия(СтрокаПланирование,СценарийПланирования,Форма,ПроверятьКонечныеСроки);
			НачалоФормированияБюджета = Мин(НачалоФормированияБюджета,Начало);
		КонецЦикла;
		
		ОшибкиПоСтроке = "";
		
		Если РасширенныйРегламент Тогда
			ПредшествующиеБюджеты = Взаимосвязи.Скопировать(Новый Структура("Бюджет,Обязательный",СтрокаБюджеты.Бюджет,Истина)).ВыгрузитьКолонку("Предшественник");
		Иначе
			ПредшествующиеБюджеты = Новый Массив;
			СтрокиРегламент = ТаблицаБюджетов.НайтиСтроки(Новый Структура("Бюджет",СтрокаБюджеты.Бюджет));
			Если СтрокиРегламент.Количество()>0 Тогда
				РангТекущего = СтрокиРегламент[0].Ранг;
				Для Каждого СтрокаРегламент Из ТаблицаБюджетов Цикл
					Если СтрокаРегламент.Ранг < РангТекущего Тогда
						ПредшествующиеБюджеты.Добавить(СтрокаРегламент.Бюджет);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Для Каждого ПредшествующийБюджет Из ПредшествующиеБюджеты Цикл
			СтрокиГрафикаПредшественник					= ГрафикПроцесса.Скопировать(Новый Структура("Бюджет",ПредшествующийБюджет));
			СтрокиГрафикаПредшественник_Планирование 	= СтрокиГрафикаПредшественник.НайтиСтроки(ОтборПланирование);
			СтрокиГрафикаПредшественник_Согласование 	= СтрокиГрафикаПредшественник.НайтиСтроки(ОтборПоВидуЗадачи("СогласованиеБюджета"));
			Если СтрокиГрафикаПредшественник_Планирование.Количество()=0 Тогда
				ОшибкиПоСтроке = ОшибкиПоСтроке+"
				|	- для формирования бюджета """+СтрокаБюджеты.Бюджет+""" требуется наличие бюджета """+ПредшествующийБюджет+"""";
			Иначе
				Если СтрокиГрафикаПредшественник_Согласование.Количество()>0 Тогда
					ОкончаниеСогласованияПредыдущегоБюджета = ?(ПроверятьКонечныеСроки,'00010101',-1000000);
					Для Каждого СтрокаПланирование Из СтрокиГрафикаПредшественник_Согласование Цикл
						Конец = КонецСобытия(СтрокаПланирование,СценарийПланирования,Форма,ПроверятьКонечныеСроки);
						ОкончаниеСогласованияПредыдущегоБюджета = Макс(ОкончаниеСогласованияПредыдущегоБюджета,Конец);
					КонецЦикла;
					Если ОкончаниеСогласованияПредыдущегоБюджета>НачалоФормированияБюджета Тогда
						ОшибкиПоСтроке = ОшибкиПоСтроке+"
						|	- бюджет """+СтрокаБюджеты.Бюджет+""" не должен формироваться раньше, чем закончится согласование бюджета """+ПредшествующийБюджет+"""";
					КонецЕсли;
				Иначе
					ОкончаниеФормированияПредыдущегоБюджета = ?(ПроверятьКонечныеСроки,'00010101',-1000000);
					Для Каждого СтрокаПланирование Из СтрокиГрафикаПредшественник_Планирование Цикл
						Конец = КонецСобытия(СтрокаПланирование,СценарийПланирования,Форма,ПроверятьКонечныеСроки);
						ОкончаниеФормированияПредыдущегоБюджета = Макс(ОкончаниеФормированияПредыдущегоБюджета,Конец);
					КонецЦикла;
					Если ОкончаниеФормированияПредыдущегоБюджета>НачалоФормированияБюджета Тогда
						ОшибкиПоСтроке = ОшибкиПоСтроке+"
						|	- бюджет """+СтрокаБюджеты.Бюджет+""" не должен формироваться раньше, чем закончится согласование бюджета """+ПредшествующийБюджет+"""";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Ошибки = Ошибки + ОшибкиПоСтроке;
	КонецЦикла;
	Возврат Ошибки;
КонецФункции

Функция ОтборПоВидуЗадачи(ВидЗадачи)
	Если ВидЗадачи = "ПодачаЗаявок" Тогда
		СтруктураОтбор = Новый Структура("ВидЗадачи",ПредопределенноеЗначение("Перечисление.фин_ВидыЗадачПоБюджетам.ПодачаЗаявок"));
	ИначеЕсли ВидЗадачи = "СогласованиеЗаявок" Тогда
		СтруктураОтбор = Новый Структура("ВидЗадачи",ПредопределенноеЗначение("Перечисление.фин_ВидыЗадачПоБюджетам.СогласованиеЗаявок"));
	ИначеЕсли ВидЗадачи = "ФормированиеБюджета" Тогда
		СтруктураОтбор = Новый Структура("ВидЗадачи",ПредопределенноеЗначение("Перечисление.фин_ВидыЗадачПоБюджетам.ФормированиеБюджета"));
	ИначеЕсли ВидЗадачи = "СогласованиеБюджета" Тогда
		СтруктураОтбор = Новый Структура("ВидЗадачи",ПредопределенноеЗначение("Перечисление.фин_ВидыЗадачПоБюджетам.СогласованиеБюджета"));
	ИначеЕсли ВидЗадачи = "КорректировкаБюджета" Тогда
		СтруктураОтбор = Новый Структура("ВидЗадачи",ПредопределенноеЗначение("Перечисление.фин_ВидыЗадачПоБюджетам.КорректировкаБюджета"));
	ИначеЕсли ВидЗадачи = "АнализИсполненияБюджета" Тогда
		СтруктураОтбор = Новый Структура("ВидЗадачи",ПредопределенноеЗначение("Перечисление.фин_ВидыЗадачПоБюджетам.АнализИсполненияБюджета"));
	КонецЕсли;
	Возврат СтруктураОтбор;
КонецФункции

Функция ПолучитьСтрокуПоВидуЗадачи(ГрафикПроцесса,ВидЗадачи,ОтборДанныхГрафика)
	СтрокиСОтбором = ГрафикПроцесса.Скопировать(ОтборДанныхГрафика);
	СтрокиПоВиду = СтрокиСОтбором.Скопировать(ОтборПоВидуЗадачи(ВидЗадачи));
	Если СтрокиПоВиду.Количество()>0 Тогда
		Возврат СтрокиПоВиду[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ТаблицаИсполнителей(Исполнители) Экспорт 
	ТаблицаИсполнители = Новый ТаблицаЗначений;
	ТаблицаИсполнители.Колонки.Добавить("Исполнитель",Метаданные.ОпределяемыеТипы.фин_ОтветственныеБюджетногоПроцесса.Тип);
	ТаблицаИсполнители.Колонки.Добавить("Пользователь",Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Если ТипЗнч(Исполнители)=Тип("Массив") Тогда
		МассивИсполнители = Исполнители;
	ИначеЕсли ТипЗнч(Исполнители)=Тип("СписокЗначений") Тогда
		МассивИсполнители = Исполнители.ВыгрузитьЗначения();
	Иначе
		МассивИсполнители = Новый Массив;
		МассивИсполнители.Добавить(Исполнители);
	КонецЕсли;
	Для Каждого ТипЗначения Из Метаданные.ОпределяемыеТипы.фин_ОтветственныеБюджетногоПроцесса.Тип.Типы() Цикл
		ОбъектТипа = Новый(ТипЗначения);
		ИмяОбъекта = ОбъектТипа.Метаданные().Имя;
		ОбъектыТипа = Новый Массив;
		Для Каждого Исполнитель Из МассивИсполнители Цикл
			Если ТипЗнч(Исполнитель)=ТипЗначения Тогда
				ОбъектыТипа.Добавить(Исполнитель);
			КонецЕсли;
		КонецЦикла;
		Если ОбъектыТипа.Количество()>0 Тогда
			Попытка
				Выполнить("ДополнитьТаблицуИсполнителей_"+ИмяОбъекта+"(ТаблицаИсполнители,ОбъектыТипа)");
			Исключение
				
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблицаИсполнители;
КонецФункции

Процедура ДополнитьТаблицуИсполнителей_Пользователи(ТаблицаИсполнители,ОбъектыТипа)
	Для Каждого Значение Из ОбъектыТипа Цикл
		Если ТаблицаИсполнители.НайтиСтроки(Новый Структура("Исполнитель",Значение)).Количество()>0 Тогда
			Продолжить;
		КонецЕсли;
		НС = ТаблицаИсполнители.Добавить();
		НС.Исполнитель 	= Значение;
		НС.Пользователь = Значение;
	КонецЦикла;
КонецПроцедуры

Процедура ДополнитьТаблицуИсполнителей_усд_ГруппыСогласованияДокументов(ТаблицаИсполнители,ОбъектыТипа)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	усд_СоставГруппСогласованияДокументов.ГруппаСогласования КАК Исполнитель,
	|	усд_СоставГруппСогласованияДокументов.Пользователь
	|ИЗ
	|	РегистрСведений.усд_СоставГруппСогласованияДокументов КАК усд_СоставГруппСогласованияДокументов
	|ГДЕ
	|	усд_СоставГруппСогласованияДокументов.ГруппаСогласования В(&ГруппаСогласования)";
	
	Запрос.УстановитьПараметр("ГруппаСогласования", ОбъектыТипа);
	
	РезультатЗапроса 	= Запрос.Выполнить();
	ТаблицаСоставГрупп	= РезультатЗапроса.Выгрузить();
	Для Каждого СтрокаТаблица Из ТаблицаСоставГрупп Цикл
		НС = ТаблицаИсполнители.Добавить();
		ЗаполнитьЗначенияСвойств(НС,СтрокаТаблица);
	КонецЦикла;
КонецПроцедуры

Процедура ДополнитьТаблицуИсполнителей_СотрудникиОрганизаций(ТаблицаИсполнители,ОбъектыТипа)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка КАК Исполнитель,
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО СотрудникиОрганизаций.Физлицо = Пользователи.ФизЛицо
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка В(&Сотрудники)";
	
	Запрос.УстановитьПараметр("Сотрудники", ОбъектыТипа);
	
	РезультатЗапроса 	= Запрос.Выполнить();
	ТаблицаСоставГрупп	= РезультатЗапроса.Выгрузить();
	Для Каждого СтрокаТаблица Из ТаблицаСоставГрупп Цикл
		НС = ТаблицаИсполнители.Добавить();
		ЗаполнитьЗначенияСвойств(НС,СтрокаТаблица);
	КонецЦикла;
КонецПроцедуры

Процедура ДополнитьТаблицуИсполнителей_ФизическиеЛица(ТаблицаИсполнители,ОбъектыТипа)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Исполнитель,
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ФизическиеЛица.Ссылка = Пользователи.ФизЛицо
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&ФизическиеЛица)";
	
	Запрос.УстановитьПараметр("ФизическиеЛица", ОбъектыТипа);
	
	РезультатЗапроса 	= Запрос.Выполнить();
	ТаблицаСоставГрупп	= РезультатЗапроса.Выгрузить();
	Для Каждого СтрокаТаблица Из ТаблицаСоставГрупп Цикл
		НС = ТаблицаИсполнители.Добавить();
		ЗаполнитьЗначенияСвойств(НС,СтрокаТаблица);
	КонецЦикла;
КонецПроцедуры

Процедура ДополнитьТаблицуИсполнителей_Подразделения(ТаблицаИсполнители,ОбъектыТипа)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	фин_ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница КАК Исполнитель,
	|	фин_ОтветственныеЛицаСрезПоследних.ФизическоеЛицо,
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	РегистрСведений.фин_ОтветственныеЛица.СрезПоследних(, СтруктурнаяЕдиница В (&Подразделения)) КАК фин_ОтветственныеЛицаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО фин_ОтветственныеЛицаСрезПоследних.ФизическоеЛицо = Пользователи.ФизЛицо";
	
	Запрос.УстановитьПараметр("Подразделения", ОбъектыТипа);
	
	РезультатЗапроса 	= Запрос.Выполнить();
	ТаблицаСоставГрупп	= РезультатЗапроса.Выгрузить();
	Для Каждого СтрокаТаблица Из ТаблицаСоставГрупп Цикл
		НС = ТаблицаИсполнители.Добавить();
		ЗаполнитьЗначенияСвойств(НС,СтрокаТаблица);
	КонецЦикла;
КонецПроцедуры