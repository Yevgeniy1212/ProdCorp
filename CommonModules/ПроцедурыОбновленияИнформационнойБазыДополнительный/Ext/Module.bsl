
// Функция выполняет проверку на необходимость перехода на версию КОРП
//
Функция УстановленНомерВерсииПРОФ() Экспорт
	
	// В данной конфигурации дополнительные проверки не выполняются
	Возврат Истина;
	
КонецФункции

// Процедура выполняет первоначальное заполнение информационной базы
//
// Параметры:
//  ДокументОписаниеОбновлений - табличный документ, в который выводится описание обновлений.
//  МакетОписаниеОбновлений    - макет "ОписаниеОбновлений" с заполненными параметрами.
//
Процедура ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений = "", МакетОписаниеОбновлений = "") Экспорт
	
	// Заполнение объектов для подсистемы Анкетирование
	ЗаполнитьРеквизитыВопросов();
	
КонецПроцедуры

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
//
Процедура ВыполнитьОбновлениеСПредыдущихРелизов(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений = "", МакетОписаниеОбновлений = "") Экспорт
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.1.27";
	
	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "1.1.15"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.1") И ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//////////////////////////////////////////////////////////////////
		// Редакция 2.0 - НАЧАЛО
		
		ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Истина;
				
		Константы.ИспользоватьУправленческийУчет.Установить(Истина);
		глЗначениеПеременнойУстановить("глИспользоватьУправленческийУчет", Истина);
		
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		// Заполним новые предопределенные показатели схем мотиваций
		ПроцедурыОбновленияИнформационнойБазыПереопределяемый.УстановитьРеквизитыПоказателяСхемМотивации(Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная.ПолучитьОбъект(),	Перечисления.ТипыПоказателейСхемМотивации.Денежный, Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется,,, "ТарифнаяСтавкаДневная",	Истина, ВалютаРегламентированногоУчета);
		ПроцедурыОбновленияИнформационнойБазыПереопределяемый.УстановитьРеквизитыПоказателяСхемМотивации(Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная.ПолучитьОбъект(),	Перечисления.ТипыПоказателейСхемМотивации.Денежный, Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется,,, "ТарифнаяСтавкаМесячная", 	Истина, ВалютаРегламентированногоУчета);
		ПроцедурыОбновленияИнформационнойБазыПереопределяемый.УстановитьРеквизитыПоказателяСхемМотивации(Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.ПолучитьОбъект(),	Перечисления.ТипыПоказателейСхемМотивации.Денежный, Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется,,, "ТарифнаяСтавкаЧасовая", 	Истина, ВалютаРегламентированногоУчета);
		
		// Заменим старые формулы расчета по показателям тип П1*П2 на формульные расчеты
		ПеревестиНаПроизвольныеФормулыРасчета();

		// Заменим формулы от обратного на прямые и установим признак "Рассчитывать методом от обратного"
		ПеревестиНаПризнакОтОбратного();
		
		// с 9 марта 2011 г. ставка рефинансирования НБ = 7.5%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 9 марта 2011 - 7.5%.");

		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20110309', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20110309';
	 	СтрокаНабора.Размер = 7.5;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// Обработка записей регистра сведений "Карт-счета физлиц"
		
		Сообщить("-----------------------");
		Сообщить("Обработка записей регистра сведений ""Карт-счета физических лиц"".");
		
		НаборЗаписейКартСчетаФизЛиц = РегистрыСведений.КартСчетаФизЛиц.СоздатьНаборЗаписей();
		НаборЗаписейКартСчетаФизЛиц.Прочитать();
		ВГраница = НаборЗаписейКартСчетаФизЛиц.Количество() - 1;
		Для Индекс = 0 По ВГраница Цикл
			Запись = НаборЗаписейКартСчетаФизЛиц.Получить(Индекс);
			Запись.АктивностьСчета = Истина;
		КонецЦикла;
		
		Попытка
			НаборЗаписейКартСчетаФизЛиц.ОбменДанными.Загрузка = Истина;
			НаборЗаписейКартСчетаФизЛиц.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Карт-счета физических лиц"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		Сообщить("Обработка записей регистра сведений ""Карт-счета физических лиц"" завершена.");
		
		// Обработка предопределенных элементов справочника "Сохраненные настройки"
		
		Сообщить("-----------------------");
		Сообщить("Обработка предопределенных элементов справочника ""Сохраненные настройки""");
		
		ПроцедурыОбновленияИнформационнойБазы.ЗагрузитьНастройкиОтчетов();
		
		Сообщить("Обработка предопределенных элементов справочника ""Сохраненные настройки"" завершена.");
		
		// Заполнение регистра сведений "Сведения о выплатах работникам организаций по платежным ведомостям"
		
		Сообщить("-----------------------");
		Сообщить("Заполнение регистра сведений ""Сведения о выплатах работникам организаций по платежным ведомостям"".");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыборкаПоВедомостям.Дата,
		|	ВыборкаПоВедомостям.Ведомость КАК Ведомость,
		|	ВыборкаПоВедомостям.Физлицо,
		|	ВыборкаПоВедомостям.Регистратор КАК Регистратор
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДепонированиеЗаработнойПлатыДепонированнаяЗаработнаяПлата.Ссылка.Дата КАК Дата,
		|		ДепонированиеЗаработнойПлатыДепонированнаяЗаработнаяПлата.Ведомость КАК Ведомость,
		|		ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК Физлицо,
		|		ДепонированиеЗаработнойПлатыДепонированнаяЗаработнаяПлата.Ссылка КАК Регистратор
		|	ИЗ
		|		Документ.ДепонированиеЗаработнойПлаты.ДепонированнаяЗаработнаяПлата КАК ДепонированиеЗаработнойПлатыДепонированнаяЗаработнаяПлата
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|			ПО ДепонированиеЗаработнойПлатыДепонированнаяЗаработнаяПлата.Ведомость = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
		|				И (ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано))
		|				И (ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Дата,
		|		ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость,
		|		ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
		|		ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка
		|	ИЗ
		|		Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|			ПО ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
		|				И (ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Дата,
		|		РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость,
		|		ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
		|		РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка
		|	ИЗ
		|		Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|			ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
		|				И (ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РасходныйКассовыйОрдер.Дата,
		|		РасходныйКассовыйОрдер.ПлатежнаяВедомость,
		|		ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
		|		РасходныйКассовыйОрдер.Ссылка
		|	ИЗ
		|		Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|			ПО РасходныйКассовыйОрдер.ПлатежнаяВедомость = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
		|				И РасходныйКассовыйОрдер.Контрагент = ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо
		|				И (ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу))) КАК ВыборкаПоВедомостям
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВыборкаПоВедомостям.Дата,
		|	Регистратор,
		|	Ведомость";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборСведенияОВыплатах = РегистрыСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.СоздатьНаборЗаписей();
		
		ТекущийРегистратор = "";
		ТаблицаКонфликтныхВедомостей = Новый ТаблицаЗначений;
		ТаблицаКонфликтныхВедомостей.Колонки.Добавить("Регистратор");
		Пока Выборка.Следующий() Цикл
			
			Если ТекущийРегистратор <> Выборка.Регистратор Тогда
				
				Если ТекущийРегистратор <> "" Тогда
					Попытка
						НаборСведенияОВыплатах.ОбменДанными.Загрузка = Истина;
						НаборСведенияОВыплатах.Записать();
					Исключение
						КонфликнаяСтрока = ТаблицаКонфликтныхВедомостей.Добавить();
						КонфликнаяСтрока.Регистратор = ТекущийРегистратор;
					КонецПопытки;
				КонецЕсли;
				
				ТекущийРегистратор = Выборка.Регистратор;
				НаборСведенияОВыплатах.Отбор.Регистратор.Установить(ТекущийРегистратор);
				НаборСведенияОВыплатах.Прочитать();
				НаборСведенияОВыплатах.Очистить();
				
			КонецЕсли;
					
			Запись = НаборСведенияОВыплатах.Добавить();
			Запись.Ведомость = Выборка.Ведомость;
			Запись.ФизЛицо = Выборка.ФизЛицо;
		КонецЦикла;
		
		Попытка
			НаборСведенияОВыплатах.ОбменДанными.Загрузка = Истина;
			НаборСведенияОВыплатах.Записать();
		Исключение
			КонфликнаяСтрока = ТаблицаКонфликтныхВедомостей.Добавить();
			КонфликнаяСтрока.Регистратор = ТекущийРегистратор;
		КонецПопытки;

		Если ТаблицаКонфликтныхВедомостей.Количество() > 0 Тогда
			ТаблицаКонфликтныхВедомостей.Свернуть("Регистратор");
			Сообщить("Внимание!!! Для следующего списка докуметов не удалось создать записи:", СтатусСообщения.ОченьВажное);
			Для Каждого СтрокаКонфликта Из ТаблицаКонфликтныхВедомостей Цикл
				Сообщить("	- " + СтрокаКонфликта.Регистратор, СтатусСообщения.ОченьВажное);
			КонецЦикла;
			Сообщить("Возможно, что в этих документах содержатся повторно используемые ведомости на зарплату!", СтатусСообщения.ОченьВажное);
		КонецЕсли;
				
		Сообщить("Заполнение регистра сведений ""Сведения о выплатах работникам организаций по платежным ведомостям"" завершено.");
		
		// Заполнение предопределенных видов расчета
		
		СписокПредопределенныхВидовРасчета = Новый Массив;
		СписокПредопределенныхВидовРасчета.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПраздничныхИВыходных);
		СписокПредопределенныхВидовРасчета.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаПраздничныеИВыходные);
		СписокПредопределенныхВидовРасчета.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаСверхурочных);
		СписокПредопределенныхВидовРасчета.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаСверхурочныеЧасы);
		
		Для Каждого ПланВидовРасчета Из СписокПредопределенныхВидовРасчета Цикл
			ВидРасчета = ПланВидовРасчета.ПолучитьОбъект(); 
			Если ПланВидовРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаПраздничныеИВыходные
				ИЛИ ПланВидовРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПраздничныхИВыходных Тогда
				ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеРабочиеДни; 		
			ИначеЕсли ПланВидовРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаСверхурочныеЧасы 
				ИЛИ ПланВидовРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаСверхурочных Тогда
				ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Сверхурочные;
			КонецЕсли;
			ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке; 
			ВидРасчета.Записать();
		КонецЦикла;

		// Редакция 2.0 - КОНЕЦ
		//////////////////////////////////////////////////////////////////
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ВывестиОписаниеИзменений("201", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
				
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;

	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.2.8";
	
	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.1"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.2") И ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//////////////////////////////////////////////////////////////////
		// НАЧАЛО
		
		// Установка значения настройки пользователя "ТекущаяСтраницаПанелиФункций"
		
		Сообщить("-----------------------");
		Сообщить("Обработка записей регистра сведений ""Настройки пользователей"".");
	
		РегистрНастройкиПользователей = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
		РегистрНастройкиПользователей.Отбор.Настройка.Установить(ПланыВидовХарактеристик.НастройкиПользователей.ТекущаяСтраницаПанелиФункций);
		РегистрНастройкиПользователей.Прочитать();
		
		Для Каждого ЗаписьРегистра Из РегистрНастройкиПользователей Цикл
			ЗаписьРегистра.Значение = "Главная";
		КонецЦикла;
		
		Попытка
			РегистрНастройкиПользователей.ОбменДанными.Загрузка = Истина;
			РегистрНастройкиПользователей.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Настройки пользователей"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		Сообщить("Обработка записей регистра сведений ""Настройки пользователей"" завершена.");
		
		// Обработка записей регистра сведений "Учетная политика по персоналу организаций"
		
		Сообщить("-----------------------");
		Сообщить("Обработка записей регистра сведений ""Учетная политика по персоналу организаций"".");

		НаборЗаписейУчетнаяПолитикаПоПерсоналуОрганизаций = РегистрыСведений.УчетнаяПолитикаПоПерсоналуОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписейУчетнаяПолитикаПоПерсоналуОрганизаций.Прочитать();
		ВГраница = НаборЗаписейУчетнаяПолитикаПоПерсоналуОрганизаций.Количество() - 1;
		Для Индекс = 0 По ВГраница Цикл
			Запись = НаборЗаписейУчетнаяПолитикаПоПерсоналуОрганизаций.Получить(Индекс);
			Если Запись.УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка Тогда
				 Запись.ВариантУчетаКадровыхПерестановок = Перечисления.ВариантыУчетаКадровыхПерестановок.ПодразделениеИлиДолжность;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			НаборЗаписейУчетнаяПолитикаПоПерсоналуОрганизаций.ОбменДанными.Загрузка = Истина;
			НаборЗаписейУчетнаяПолитикаПоПерсоналуОрганизаций.Записать();
		Исключение
			Сообщить("При записи данных регистра сведений ""Учетная политика по персоналу организаций"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		Сообщить("Обработка записей регистра сведений ""Учетная политика по персоналу организаций"" завершена.");

		
		Сообщить("-----------------------");		                                  		
		Сообщить("Установка константы ""Дата начала вывода ИИН/БИН в первичных документах"".");
	
		Константы.ДатаНачалаВыводаБИН_ИИНВПервичныхДокументах.Установить("20120101");

		// КОНЕЦ
		//////////////////////////////////////////////////////////////////
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ВывестиОписаниеИзменений("202", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
				
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;

	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.3.7";
	
	Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.2"
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.3") И ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		//////////////////////////////////////////////////////////////////
		// НАЧАЛО
		
		// Если ранее были заполнены данные за 2012 год:
		// Устанавливаем 25 октября - доп.выходной "Курбан-айт", .
		// Устанавливаем 1 декабря - выходным "День Первого Президента Республики Казахстан".
	
		Сообщить("-----------------------");
		Сообщить("Изменение производственного календаря на 2012 год - установка 25 октября - первого дня Курбан-айта; установка нового праздника 1 декабря - День Первого Президента Республики Казахстан");
			
		ТаблицаИзменяемыхДат = Новый ТаблицаЗначений;
		ТаблицаИзменяемыхДат.Колонки.Добавить("ДатаКалендаря");
		ТаблицаИзменяемыхДат.Колонки.Добавить("ВидДня");
		ТаблицаИзменяемыхДат.Колонки.Добавить("Пятидневка");
		ТаблицаИзменяемыхДат.Колонки.Добавить("Шестидневка");
		ТаблицаИзменяемыхДат.Колонки.Добавить("КалендарныеДни");
		
		НоваяСтрока = ТаблицаИзменяемыхДат.Добавить();
		НоваяСтрока.ДатаКалендаря = '2012-10-25';
		НоваяСтрока.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.ДополнительныйВыходной;
		НоваяСтрока.Пятидневка = 0;
		НоваяСтрока.Шестидневка = 0;
		НоваяСтрока.КалендарныеДни = 1;
		
		НоваяСтрока = ТаблицаИзменяемыхДат.Добавить();
		НоваяСтрока.ДатаКалендаря = '2012-12-01';
		НоваяСтрока.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник;
		НоваяСтрока.Пятидневка = 0;
		НоваяСтрока.Шестидневка = 0;
		НоваяСтрока.КалендарныеДни = 0;

		НоваяСтрока = ТаблицаИзменяемыхДат.Добавить();
		НоваяСтрока.ДатаКалендаря = '2012-12-03';
		НоваяСтрока.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота;
		НоваяСтрока.Пятидневка = 0;
		НоваяСтрока.Шестидневка = 1;
		НоваяСтрока.КалендарныеДни = 1;
		
		Для Каждого СтрокаТЗ Из ТаблицаИзменяемыхДат Цикл
			
			// сначала в производственном календаре
			НаборЗаписей = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьНаборЗаписей();
				
			НаборЗаписей.Отбор.ДатаКалендаря.Установить(СтрокаТЗ.ДатаКалендаря, Истина);
			НаборЗаписей.Прочитать();
				
			Если НаборЗаписей.Количество() = 1 Тогда
				НаборЗаписей[0].ВидДня = СтрокаТЗ.ВидДня;
				НаборЗаписей[0].Пятидневка = СтрокаТЗ.Пятидневка;
				НаборЗаписей[0].Шестидневка = СтрокаТЗ.Шестидневка;
				НаборЗаписей[0].КалендарныеДни = СтрокаТЗ.КалендарныеДни;
					
				Попытка
					НаборЗаписей.Записать();
				Исключение
					Сообщить("  при обновлении " + Формат(СтрокаТЗ.ДатаКалендаря, "ДФ='дд.ММ.гггг'") + " в календаре произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
				КонецПопытки;
					
			КонецЕсли;
				
			// теперь в графиках работы
			НаборЗаписей = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Дата.Установить(СтрокаТЗ.ДатаКалендаря, Истина);
			НаборЗаписей.Прочитать();
			
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				
				Если ЗаписьНабора.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням
					ИЛИ ЗаписьНабора.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда				
					ЗаписьНабора.ПроизводственныйКалендарьКалендарныеДни = СтрокаТЗ.КалендарныеДни;
					ЗаписьНабора.ПроизводственныйКалендарьШестидневка = СтрокаТЗ.Шестидневка;
					ЗаписьНабора.ПроизводственныйКалендарьПятидневка = СтрокаТЗ.Пятидневка;
					ЗаписьНабора.ОсновноеЗначение = 0;
					ЗаписьНабора.ДополнительноеЗначение = 0;
					ЗаписьНабора.ОсновноеЗначениеНорма = 0;
					ЗаписьНабора.ДополнительноеЗначениеНорма = 0;
				КонецЕсли;
			
			КонецЦикла;
		
			Если НаборЗаписей.Модифицированность() Тогда
				Попытка
					НаборЗаписей.ОбменДанными.Загрузка = Истина;
					НаборЗаписей.Записать();
				Исключение
					Сообщить("  при обновлении " + Формат(СтрокаТЗ.ДатаКалендаря, "ДФ='дд.ММ.гггг'") + " в графиках работы произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.ПеренесенныеРабочиеДни.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Год.Использование 		  = Истина;
		НаборЗаписей.Отбор.Год.Значение				  = 2012;
		НаборЗаписей.Отбор.ВыходнойДень.Использование = Истина;
		НаборЗаписей.Отбор.ВыходнойДень.Значение	  = Дата("20121201");
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.Год			 = 2012;
			НоваяСтрока.РабочийДень  = Дата("20121203");
			НоваяСтрока.ВыходнойДень = Дата("20121201");
		КонецЕсли;
		
		Если НаборЗаписей.Модифицированность() Тогда
			Попытка
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
			Исключение
				Сообщить("  при обновлении " + Формат(СтрокаТЗ.ДатаКалендаря, "ДФ='дд.ММ.гггг'") + " в переносе рабочих дней ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
		КонецЕсли;

		// Установка размеров регламентированных показателей с 1 января 2012 года
		Сообщить("-----------------------");
		Сообщить("Установка размеров регламентированных показателей с 1 января 2012г.");
		
		ДатаСведений = '2012-01-01';
		
		НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ДатаСведений, Истина);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, ДатаСведений, 17439, 1618, 55*17439, 55*17439, 17439, 1618);
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("  при записи в регистр сведений ""Регламентированные расчетные показатели"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// Установка вычетов по доходам
		Сообщить("-----------------------");
		Сообщить("Обновление сведений о вычетах по частично облагаемым доходам");
		
		НаборЗаписей = РегистрыСведений.ВычетыПоДоходам.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Период.Установить(Дата("20120101"), Истина);
		
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20120101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 17439, 0);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20120101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 8*17439);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("  при записи в регистр сведений ""Вычеты по доходам"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;

		// Обработка предопределенных элементов справочника "Сохраненные настройки"
		
		Сообщить("-----------------------");
		Сообщить("Обработка предопределенных элементов справочника ""Сохраненные настройки""");
		
		ПроцедурыОбновленияИнформационнойБазы.ЗагрузитьНастройкиОтчетов();
		
		Сообщить("Обработка предопределенных элементов справочника ""Сохраненные настройки"" завершена.");
		
		ДозаполнитьДанныеПоСотрудникам();
		
		// Заполнение реквизита "ВидОбработки" предопределенного элемента "ОбработкаФормированияSWIFTФайла" справочника "Внешние обработки"
		Сообщить("-----------------------");
		Сообщить("Обработка элементов справочника ""Внешние обработки""");

		ОбработкаФормированияSWIFTФайла = Справочники.ВнешниеОбработки.ОбработкаФормированияSWIFTФайла.ПолучитьОбъект();
		Если ОбработкаФормированияSWIFTФайла.ВидОбработки <> Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка Тогда
			ОбработкаФормированияSWIFTФайла.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
			ОбработкаФормированияSWIFTФайла.ВнешнийОбъектИспользовать = Ложь;
			Попытка
				ОбработкаФормированияSWIFTФайла.ОбменДанными.Загрузка = Истина;
				ОбработкаФормированияSWIFTФайла.Записать();
			Исключение
				Сообщить(" при записи элемента справочника Внешние обработки произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
		КонецЕсли;
		
		Сообщить("Обработка элементов справочника ""Внешние обработки"" завершена.");
				
		// КОНЕЦ
		//////////////////////////////////////////////////////////////////
		
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ВывестиОписаниеИзменений("203", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		#КонецЕсли
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		Сообщить("-----------------------");

		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		"Выполнено " + СтрСообщения);
				
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Записываем реквизиты предопределенных вопросов
//
// Параметры
//  нет
//
Процедура ЗаполнитьРеквизитыВопросов()

	Менеджер      	= ПланыВидовХарактеристик.ВопросыДляАнкетирования;
	ВВидеСтроки 	= Перечисления.ТипВопросаАнкеты.Строка;
	ТабличныйВопрос = Перечисления.ТипВопросаАнкеты.Табличный;

	УстановитьРеквизитыВопроса(Менеджер.Имя,            "Имя",			  ВВидеСтроки, Истина);
	УстановитьРеквизитыВопроса(Менеджер.Отчество,       "Отчество",		  ВВидеСтроки, Истина);
	УстановитьРеквизитыВопроса(Менеджер.Фамилия,        "Фамилия",		  ВВидеСтроки, Истина);
	УстановитьРеквизитыВопроса(Менеджер.Пол,            "Пол", 			  ВВидеСтроки, Истина);
	УстановитьРеквизитыВопроса(Менеджер.ДатаРождения,   "Дата рождения",  ВВидеСтроки, Истина);
	УстановитьРеквизитыВопроса(Менеджер.Национальность, "Национальность", ВВидеСтроки);

	УстановитьРеквизитыВопроса(Менеджер.СИК,           	     "СИК",					   ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.РНН,                 "РНН",					   ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.Гражданство,         "Гражданство",			   ВВидеСтроки);

	УстановитьРеквизитыВопроса(Менеджер.ВидДокументаУдостоверяющегоЛичность,"Вид документа",	ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.НомерДокумента,                     "Номер",			ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.СерияДокумента,                     "Серия",			ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.ДатаВыдачиДокумента,                "Дата выдачи",		ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.КемВыданДокумент,                   "Кем выдан",		ВВидеСтроки);

	УстановитьРеквизитыВопроса(Менеджер.ВидОбразования,    "Образование",		ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.УчебноеЗаведение,  "Учебное заведение", ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.ГодОкончания,      "Год окончания",		ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.Специальность,     "Специальность",		ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.СтепеньЗнанияЯзыка,"Знание языка",		ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.Язык,              "Язык",				ВВидеСтроки);

	УстановитьРеквизитыВопроса(Менеджер.СоставСемьиГодРождения,   "Год рождения родственника",	ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.СоставСемьиРодственник,   "Имя родственника",			ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.СоставСемьиСтепеньРодства,"Степень родства",			ВВидеСтроки);

	УстановитьРеквизитыВопроса(Менеджер.ТрудоваяДеятельностьОрганизация,    "Наименование организации", ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.ТрудоваяДеятельностьДолжность,      "Должность",				ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.ТрудоваяДеятельностьНачалоРаботы,   "Начало работы",			ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.ТрудоваяДеятельностьОкончаниеРаботы,"Окончание работы",			ВВидеСтроки);

	УстановитьРеквизитыВопроса(Менеджер.ОтношениеКВоинскойОбязанности,"Воинская обязанность",	ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.ОтношениеКВоинскомуУчету,     "Воинский учет",			ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.Военкомат,                    "Наименование военкомата",ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.Звание,                       "Звание",					ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.ВУС,                          "ВУС",					ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.Годность,                     "Годность",				ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.НаличиеМобпредписания,        "Есть ли мобпредписание",	ВВидеСтроки);

	// табличные вопросы
	УстановитьРеквизитыВопроса(Менеджер.ТЗнаниеЯзыков, 		   "Знание языков", 		ТабличныйВопрос);
	УстановитьРеквизитыВопроса(Менеджер.ТОбразование, 		   "Образование", 			ТабличныйВопрос);
	УстановитьРеквизитыВопроса(Менеджер.ТСоставСемьи, 		   "Состав семьи", 			ТабличныйВопрос);
	УстановитьРеквизитыВопроса(Менеджер.ТТрудоваяДеятельность, "Трудовая деятельность", ТабличныйВопрос);
	
	// табличный вопрос образование
	ОбъектПВХВопросыДляАнкетирования = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТОбразование.ПолучитьОбъект();
	НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
	НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ВидОбразования;
	НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
	НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.УчебноеЗаведение;
	НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
	НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Специальность;
	НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
	НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ДипломСерияНомер;
	НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
	НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ГодОкончания;
	НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
	НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Квалификация;
	ОбъектПВХВопросыДляАнкетирования.КоличествоСтрокТаблицы = 4;
	ОбъектПВХВопросыДляАнкетирования.Записать();
	
	// табличный вопрос знание языков
	ОбъектПВХВопросыДляАнкетирования = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТЗнаниеЯзыков.ПолучитьОбъект();
	НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
	НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Язык;
	НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
	НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СтепеньЗнанияЯзыка;
	ОбъектПВХВопросыДляАнкетирования.КоличествоСтрокТаблицы = 4;
	ОбъектПВХВопросыДляАнкетирования.Записать();
	
	// табличный вопрос состав семьи
	ОбъектПВХВопросыДляАнкетирования = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТСоставСемьи.ПолучитьОбъект();
	НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
	НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СоставСемьиСтепеньРодства;
	НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
	НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СоставСемьиРодственник;
	НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
	НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СоставСемьиГодРождения;
	ОбъектПВХВопросыДляАнкетирования.КоличествоСтрокТаблицы = 4;
	ОбъектПВХВопросыДляАнкетирования.Записать();
	
	// табличный вопрос трудовая деятельность
	ОбъектПВХВопросыДляАнкетирования = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТТрудоваяДеятельность.ПолучитьОбъект();
	НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
	НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТрудоваяДеятельностьОрганизация;
	НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
	НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТрудоваяДеятельностьНачалоРаботы;
	НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
	НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТрудоваяДеятельностьОкончаниеРаботы;
	НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
	НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТрудоваяДеятельностьДолжность;
	ОбъектПВХВопросыДляАнкетирования.КоличествоСтрокТаблицы = 4;
	ОбъектПВХВопросыДляАнкетирования.Записать();
	
КонецПроцедуры // ЗаполнитьРеквизитыВопросов()

// Устанавливает реквизиты элемента ПВХ "ВопросыДляАнкетирования"
//
Процедура УстановитьРеквизитыВопроса(Вопрос,ПолнаяФормулировка,ТипВопросаАнкеты,ОбязателенДляЗаполнения = Ложь,БолееОдногоОтвета = Ложь, КоличествоСтрок = 0)

	Объект = Вопрос.ПолучитьОбъект();

	Объект.ПолнаяФормулировка      = ПолнаяФормулировка;
	Объект.ОбязателенДляЗаполнения = ОбязателенДляЗаполнения;
	Объект.ТипВопроса              = ТипВопросаАнкеты;
	Объект.КоличествоСтрокТаблицы  = КоличествоСтрок;

	Объект.Записать();

КонецПроцедуры

///////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБНОВЛЕНИЯ НА ВЕРСИЮ 2.0.1

// Заменяет шкалу оценки на конструкцию условия ?(,,)
//
Функция ЗаменитьШкалуНаУсловие(НачальныйТекст, КонечныйТекст, ОцениваемоеВыражение, Показатель)
	
	ФормулаРасчета = НачальныйТекст;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Показатель",Показатель);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоставШкалОценкиПоказателейРасчета.НомерСтрокиШкалы КАК НомерСтрокиШкалы,
	|	ЕСТЬNULL(СоставШкалОценкиПоказателейРасчета.ЗначениеС,0) КАК ЗначениеС,
	|	ЕСТЬNULL(СоставШкалОценкиПоказателейРасчета.ЗначениеПо,0) КАК ЗначениеПо,
	|	ЕСТЬNULL(СоставШкалОценкиПоказателейРасчета.Размер,0) КАК Размер
	|ИЗ
	|	РегистрСведений.СоставШкалОценкиПоказателейРасчета КАК СоставШкалОценкиПоказателейРасчета
	|ГДЕ
	|	СоставШкалОценкиПоказателейРасчета.ШкалаОценкиПоказателя = &Показатель
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиШкалы";
	Выборка = Запрос.Выполнить().Выбрать();
	ВсегоСтрокШкалы = Выборка.Количество();
	
	ПроцентнаяШкала = (Показатель.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная);
	
	Если ВсегоСтрокШкалы > 0 Тогда
		Пока Выборка.Следующий() Цикл
			
			ЗначениеС	= СтрЗаменить(Формат(Выборка.ЗначениеС,"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0")," ","");
			ЗначениеС	= ?(ЗначениеЗаполнено(ЗначениеС),ЗначениеС,"0");
			ЗначениеПо	= СтрЗаменить(Формат(Выборка.ЗначениеПо,"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0")," ","");
			ЗначениеПо	= ?(ЗначениеЗаполнено(ЗначениеПо), ЗначениеПо, "0");
			Размер		= СтрЗаменить(Формат(?(ЗначениеЗаполнено(Выборка.Размер), Выборка.Размер, 0)/ ?(ПроцентнаяШкала, 100, 1),"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0")," ","");
			Размер		= ?(ЗначениеЗаполнено(Размер),Размер,"0");
			
			ФормулаРасчета = ФормулаРасчета + "?(" + ОцениваемоеВыражение +">" + ЗначениеС + " И " + ОцениваемоеВыражение + "<= " + ЗначениеПо + "," + Размер + ",";
			
		КонецЦикла;
		ФормулаРасчета = ФормулаРасчета + "0";
		Для Сч = 1 По ВсегоСтрокШкалы Цикл
			ФормулаРасчета = ФормулаРасчета + ")";
		КонецЦикла;
	КонецЕсли;
	
	ФормулаРасчета = ФормулаРасчета + КонечныйТекст;
	
	Возврат ФормулаРасчета;
	
КонецФункции //ЗаменитьШкалуНаУсловие

// Заменяет в формуле нулевой показатель на 0
//
Процедура ЗаменитьНулевойПоказатель(Выборка, ВР, НомерПоказателя)
	
	Если Выборка.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1УП2ДП3ВП4_0 
		Или Выборка.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1ВП2_0 Тогда
		
		ВР.ФормулаРасчета = СтрЗаменить(ВР.ФормулаРасчета, "ИсходныеДанные.Показатель" + НомерПоказателя, "0");
		Для Сч = НомерПоказателя По 5 Цикл
			ВР.ФормулаРасчета = СтрЗаменить(ВР.ФормулаРасчета, "ИсходныеДанные.Показатель" + Строка(Сч), "ИсходныеДанные.Показатель" + Строка(Сч - 1));
		КонецЦикла;
		
		ВР["УдалитьПоказатель" + НомерПоказателя] = Справочники.ПоказателиСхемМотивации.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

// Переносит реквизит в табличную часть
//
Процедура ДобавитьПоказатель(ВР, Выборка, НомерПоказателя)
	
	НоваяСтрокаПоказателей = ВР.Показатели.Добавить();
	
	НоваяСтрокаПоказателей.Показатель							= Выборка["УдалитьПоказатель" + НомерПоказателя];
	Если Выборка["УдалитьПоказатель" + НомерПоказателя].ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная И
		 Выборка["УдалитьПоказатель" + НомерПоказателя].ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая И
		Выборка["УдалитьПоказатель" + НомерПоказателя].ВозможностьИзменения <> Перечисления.ИзменениеПоказателейСхемМотивации.ВводитсяПриРасчете И
		Выборка["УдалитьПоказатель" + НомерПоказателя].ВозможностьИзменения <> Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно Тогда
			НоваяСтрокаПоказателей.ЗапрашиватьПриКадровыхПеремещениях	= Истина;
	КонецЕсли;
	ВР["УдалитьПоказатель" + НомерПоказателя]					= Справочники.ПоказателиСхемМотивации.ПустаяСсылка();
	
КонецПроцедуры				

// Процедура заменяет перечисления типа П1*П2 на формулы расчета и заполняет таблицу показателей 
//
Процедура ПеревестиНаПроизвольныеФормулыРасчета() Экспорт
	
	Сообщить("-----------------------");
	Сообщить("Замена способов расчета типа ""П1*П2"" на произвольные формулы и заполнение таблицы показателей");

	// заполним идентификаторы у показателей СМ
	
	МассивРазделителей = Новый Массив;
	
	МассивРазделителей.Добавить(" ");
	МассивРазделителей.Добавить(Символы.ВК);
	МассивРазделителей.Добавить(Символы.ВТаб);
	МассивРазделителей.Добавить(Символы.НПП);
	МассивРазделителей.Добавить(Символы.ПС);
	МассивРазделителей.Добавить(Символы.ПФ);
	МассивРазделителей.Добавить(Символы.Таб);
	
	ОператорыИФункцииОднойСтрокой	=  ".,+,-,/,*,?,=,<,>,(,)"""",@,!,#,$,%,^,&";
	
	СпрПоказатели = Справочники.ПоказателиСхемМотивации.Выбрать();
	Пока СпрПоказатели.Следующий() Цикл
		Показатель = СпрПоказатели.ПолучитьОбъект();
		Идентификатор = "";
		БылПробел = Ложь;
		Наименование = Показатель.Наименование;
		Для НомСимвола = 1 По СтрДлина(Наименование) Цикл
			Символ = Сред(Наименование,НомСимвола,1);		

			Если МассивРазделителей.Найти(Символ) <> Неопределено  Тогда
				БылПробел = Истина;
			ИначеЕсли БылПробел И (Найти(ОператорыИФункцииОднойСтрокой, Символ) = 0) Тогда
				БылПробел = Ложь;
				Идентификатор = Идентификатор + ВРег(Символ);
			ИначеЕсли Найти(ОператорыИФункцииОднойСтрокой, Символ) = 0 Тогда
				БылПробел = Ложь;
				Идентификатор = Идентификатор + Символ;		
			КонецЕсли;
		КонецЦикла;
		Показатель.Идентификатор = Идентификатор;
		Показатель.Записать();
	КонецЦикла;

	
	МассивФормульныхСпособовРасчета = Новый Массив;
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ДП2ОП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ДП2УП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2ДП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2УП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2ДП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2ОП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2УП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП3ДП1ОП2);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2УП3ДП4);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1_П2УП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМинП1_П2УП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1_П2УП3ОП4);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМинП1_П2УП3ОП4);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1УП2_П5ДП3УП4);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1УП2ДП3ВП4_0);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1ВП2_0);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1_П2УП3УП4ДП5);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1УП2_П3УП4ДП5);
	
	
	ФормульныеСпособыРасчета = Новый Соответствие;
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1,						"ИсходныеДанные.Показатель1");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ДП2УП3,				"ИсходныеДанные.Показатель1 / (ИсходныеДанные.Показатель2 * ИсходныеДанные.Показатель3)");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2,					"ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель2");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2ДП3,				"ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель2 / ИсходныеДанные.Показатель3");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2УП3,				"ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель2 * ИсходныеДанные.Показатель3");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2УП3ДП4,			"ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель2 * ИсходныеДанные.Показатель3 / ИсходныеДанные.Показатель4");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1_П2УП3,			"Макс(ИсходныеДанные.Показатель1,  ИсходныеДанные.Показатель2 * ИсходныеДанные.Показатель3)");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМинП1_П2УП3,			"Мин(ИсходныеДанные.Показатель1,  ИсходныеДанные.Показатель2 * ИсходныеДанные.Показатель3)");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1УП2_П5ДП3УП4,		"Макс(ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель2, ИсходныеДанные.Показатель5 / ИсходныеДанные.Показатель3 * ИсходныеДанные.Показатель4)");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1УП2ДП3ВП4_0,		"Макс(ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель2 / ИсходныеДанные.Показатель3 - ИсходныеДанные.Показатель4, 0)");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1ВП2_0,			"Макс(ИсходныеДанные.Показатель1 - ИсходныеДанные.Показатель2, 0)");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1_П2УП3УП4ДП5,		"Макс(ИсходныеДанные.Показатель1, ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель3) * ИсходныеДанные.Показатель4 / ИсходныеДанные.Показатель5");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1УП2_П3УП4ДП5,		"Макс(ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель2, ИсходныеДанные.Показатель3 *  ИсходныеДанные.Показатель4 / ИсходныеДанные.Показатель5)");
	
	МассивФормульныеСпособыРасчетаСоШкалой = Новый Массив;
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ДП2ОП3);
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2);
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2ДП3);
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2УП3);
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2ОП3);	
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП3ДП1ОП2);	
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1_П2УП3ОП4);
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМинП1_П2УП3ОП4);	


	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель1,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель2,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель3,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель4,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель5,
	|	ОсновныеНачисленияОрганизаций.СпособРасчета,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисленияОрганизаций.СпособРасчета В (&ШкальныеСпособыРасчета)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоШкала,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель1.ТипПоказателя КАК ТипПоказателя1,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель2.ТипПоказателя КАК ТипПоказателя2,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель3.ТипПоказателя КАК ТипПоказателя3,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель4.ТипПоказателя КАК ТипПоказателя4,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель5.ТипПоказателя КАК ТипПоказателя5
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.СпособРасчета В(&СпособРасчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеНачисленияОрганизаций.Ссылка,
	|	ДополнительныеНачисленияОрганизаций.УдалитьПоказатель1,
	|	ДополнительныеНачисленияОрганизаций.УдалитьПоказатель2,
	|	ДополнительныеНачисленияОрганизаций.УдалитьПоказатель3,
	|	ДополнительныеНачисленияОрганизаций.УдалитьПоказатель4,
	|	ДополнительныеНачисленияОрганизаций.УдалитьПоказатель5,
	|	ДополнительныеНачисленияОрганизаций.СпособРасчета,
	|	ВЫБОР
	|		КОГДА ДополнительныеНачисленияОрганизаций.СпособРасчета В (&ШкальныеСпособыРасчета)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДополнительныеНачисленияОрганизаций.УдалитьПоказатель1.ТипПоказателя,
	|	ДополнительныеНачисленияОрганизаций.УдалитьПоказатель2.ТипПоказателя,
	|	ДополнительныеНачисленияОрганизаций.УдалитьПоказатель3.ТипПоказателя,
	|	ДополнительныеНачисленияОрганизаций.УдалитьПоказатель4.ТипПоказателя,
	|	ДополнительныеНачисленияОрганизаций.УдалитьПоказатель5.ТипПоказателя
	|ИЗ
	|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
	|ГДЕ
	|	ДополнительныеНачисленияОрганизаций.СпособРасчета В(&СпособРасчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдержанияОрганизаций.Ссылка,
	|	УдержанияОрганизаций.УдалитьПоказатель1,
	|	УдержанияОрганизаций.УдалитьПоказатель2,
	|	УдержанияОрганизаций.УдалитьПоказатель3,
	|	УдержанияОрганизаций.УдалитьПоказатель4,
	|	УдержанияОрганизаций.УдалитьПоказатель5,
	|	УдержанияОрганизаций.СпособРасчета,
	|	ВЫБОР
	|		КОГДА УдержанияОрганизаций.СпособРасчета В (&ШкальныеСпособыРасчета)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	УдержанияОрганизаций.УдалитьПоказатель1.ТипПоказателя,
	|	УдержанияОрганизаций.УдалитьПоказатель2.ТипПоказателя,
	|	УдержанияОрганизаций.УдалитьПоказатель3.ТипПоказателя,
	|	УдержанияОрганизаций.УдалитьПоказатель4.ТипПоказателя,
	|	УдержанияОрганизаций.УдалитьПоказатель5.ТипПоказателя
	|ИЗ
	|	ПланВидовРасчета.УдержанияОрганизаций КАК УдержанияОрганизаций
	|ГДЕ
	|	УдержанияОрганизаций.СпособРасчета В(&СпособРасчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УправленческиеНачисления.Ссылка,
	|	УправленческиеНачисления.УдалитьПоказатель1,
	|	УправленческиеНачисления.УдалитьПоказатель2,
	|	УправленческиеНачисления.УдалитьПоказатель3,
	|	УправленческиеНачисления.УдалитьПоказатель4,
	|	УправленческиеНачисления.УдалитьПоказатель5,
	|	УправленческиеНачисления.СпособРасчета,
	|	ВЫБОР
	|		КОГДА УправленческиеНачисления.СпособРасчета В (&ШкальныеСпособыРасчета)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	УправленческиеНачисления.УдалитьПоказатель1.ТипПоказателя,
	|	УправленческиеНачисления.УдалитьПоказатель2.ТипПоказателя,
	|	УправленческиеНачисления.УдалитьПоказатель3.ТипПоказателя,
	|	УправленческиеНачисления.УдалитьПоказатель4.ТипПоказателя,
	|	УправленческиеНачисления.УдалитьПоказатель5.ТипПоказателя
	|ИЗ
	|	ПланВидовРасчета.УправленческиеНачисления КАК УправленческиеНачисления
	|ГДЕ
	|	УправленческиеНачисления.СпособРасчета В(&СпособРасчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УправленческиеУдержания.Ссылка,
	|	УправленческиеУдержания.УдалитьПоказатель1,
	|	УправленческиеУдержания.УдалитьПоказатель2,
	|	УправленческиеУдержания.УдалитьПоказатель3,
	|	УправленческиеУдержания.УдалитьПоказатель4,
	|	УправленческиеУдержания.УдалитьПоказатель5,
	|	УправленческиеУдержания.СпособРасчета,
	|	ВЫБОР
	|		КОГДА УправленческиеУдержания.СпособРасчета В (&ШкальныеСпособыРасчета)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	УправленческиеУдержания.УдалитьПоказатель1.ТипПоказателя,
	|	УправленческиеУдержания.УдалитьПоказатель2.ТипПоказателя,
	|	УправленческиеУдержания.УдалитьПоказатель3.ТипПоказателя,
	|	УправленческиеУдержания.УдалитьПоказатель4.ТипПоказателя,
	|	УправленческиеУдержания.УдалитьПоказатель5.ТипПоказателя
	|ИЗ
	|	ПланВидовРасчета.УправленческиеУдержания КАК УправленческиеУдержания
	|ГДЕ
	|	УправленческиеУдержания.СпособРасчета В(&СпособРасчета)";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СпособРасчета",МассивФормульныхСпособовРасчета);
	Запрос.УстановитьПараметр("ШкальныеСпособыРасчета",МассивФормульныеСпособыРасчетаСоШкалой);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВР = Выборка.Ссылка.ПолучитьОбъект();
		
		ВР.ПроизвольнаяФормулаРасчета	= Истина;
		ВР.СпособРасчета 				= Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула;
				
		// заполним формулу расчета
		Если Выборка.ЭтоШкала Тогда
			Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ДП2ОП3 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("", "", "ИсходныеДанные.Показатель1 / ИсходныеДанные.Показатель2", Выборка.УдалитьПоказатель3);
				ВР.ФормулаРасчетаПредставление = "ОценитьПо(ИсходныеДанные.Показатель1 / ИсходныеДанные.Показатель2, ИсходныеДанные.Показатель3)";
				
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("", "", "ИсходныеДанные.Показатель1", Выборка.УдалитьПоказатель2);
				ВР.ФормулаРасчетаПредставление = "ОценитьПо(ИсходныеДанные.Показатель1, ИсходныеДанные.Показатель2)";
				
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2ДП3 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("", " / ИсходныеДанные.Показатель3", "ИсходныеДанные.Показатель1", Выборка.УдалитьПоказатель2);
				ВР.ФормулаРасчетаПредставление = "ОценитьПо(ИсходныеДанные.Показатель1, ИсходныеДанные.Показатель2) / ИсходныеДанные.Показатель3";
				
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2УП3 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("", " * ИсходныеДанные.Показатель3", "ИсходныеДанные.Показатель1", Выборка.УдалитьПоказатель2);
				ВР.ФормулаРасчетаПредставление = "ОценитьПо(ИсходныеДанные.Показатель1, ИсходныеДанные.Показатель2) * ИсходныеДанные.Показатель3";
				
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2ОП3 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("","", "ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель2", Выборка.УдалитьПоказатель3);
				ВР.ФормулаРасчетаПредставление = "ОценитьПо(ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель2, ИсходныеДанные.Показатель3)";
		
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП3ДП1ОП2 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("ИсходныеДанные.Показатель3 / ","", "ИсходныеДанные.Показатель1", Выборка.УдалитьПоказатель2);
				ВР.ФормулаРасчетаПредставление = "ИсходныеДанные.Показатель3 / ОценитьПо(ИсходныеДанные.Показатель1, ИсходныеДанные.Показатель2)";
				
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1_П2УП3ОП4 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("Макс(ИсходныеДанные.Показатель1, ИсходныеДанные.Показатель2 * (","))", "ИсходныеДанные.Показатель3", Выборка.УдалитьПоказатель4);
				ВР.ФормулаРасчетаПредставление = "Макс(ИсходныеДанные.Показатель1, ИсходныеДанные.Показатель2 * ОценитьПо(ИсходныеДанные.Показатель3, ИсходныеДанные.Показатель4))";
			
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьМинП1_П2УП3ОП4 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("Мин(ИсходныеДанные.Показатель1, ИсходныеДанные.Показатель2 * (","))", "ИсходныеДанные.Показатель3", Выборка.УдалитьПоказатель4);
				ВР.ФормулаРасчетаПредставление = "Мин(ИсходныеДанные.Показатель1, ИсходныеДанные.Показатель2 * ОценитьПо(ИсходныеДанные.Показатель3, ИсходныеДанные.Показатель4))";
				
			КонецЕсли;
		Иначе
			ВР.ФормулаРасчета = ФормульныеСпособыРасчета[Выборка.СпособРасчета];
			ВР.ФормулаРасчетаПредставление = ВР.ФормулаРасчета;		
		КонецЕсли;
		// Заполним таблицу показателей и нулевые показатели заменем 0
		Для НомПоказателя = 1 По 5 Цикл
			
			Если ЗначениеЗаполнено(Выборка["УдалитьПоказатель" + НомПоказателя]) Тогда
				Если Выборка["УдалитьПоказатель" + НомПоказателя] = Справочники.ПоказателиСхемМотивации.УдалитьНуль Тогда
					ЗаменитьНулевойПоказатель(Выборка, ВР, НомПоказателя);
				Иначе
					ДобавитьПоказатель(ВР, Выборка, НомПоказателя);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ВР.Записать();
	КонецЦикла;
	
	Сообщить("Замена способов расчета типа ""П1*П2"" на произвольные формулы и заполнение таблицы показателей завершены");
	Сообщить("-----------------------");
	
КонецПроцедуры //ПеревестиНаПроизвольныеФормулыРасчета

// Процедура заменяет способы расчета от обратного на аналогичные прямые формулы и устанавливает признак
//
Процедура ПеревестиНаПризнакОтОбратного() Экспорт
	
	Сообщить("-----------------------");
	Сообщить("Замена способов расчета ""от обратного"" на признак расчета.");

	СпособыРасчетаОплатыТруда = Перечисления.СпособыРасчетаОплатыТруда;
	
	СпособыРасчетаОтОбратного = Новый Соответствие;
	СпособыРасчетаОтОбратного.Вставить(СпособыРасчетаОплатыТруда.УдалитьПоДоговоруОтОбратного, 						СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой);
	СпособыРасчетаОтОбратного.Вставить(СпособыРасчетаОплатыТруда.УдалитьПоМесячнойТарифнойСтавкеОтОбратного,			СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	СпособыРасчетаОтОбратного.Вставить(СпособыРасчетаОплатыТруда.УдалитьПоМесячнойТарифнойСтавкеОтОбратногоПоДням, 	СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	СпособыРасчетаОтОбратного.Вставить(СпособыРасчетаОплатыТруда.УдалитьПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам, 	СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);	
	СпособыРасчетаОтОбратного.Вставить(СпособыРасчетаОплатыТруда.УдалитьПоЧасовойТарифнойСтавкеОтОбратного, 			СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);	

	МассивСпособовРасчетаОтОбратного = Новый Массив;
	МассивСпособовРасчетаОтОбратного.Добавить(СпособыРасчетаОплатыТруда.УдалитьПоДоговоруОтОбратного);
	МассивСпособовРасчетаОтОбратного.Добавить(СпособыРасчетаОплатыТруда.УдалитьПоМесячнойТарифнойСтавкеОтОбратного);
	МассивСпособовРасчетаОтОбратного.Добавить(СпособыРасчетаОплатыТруда.УдалитьПоМесячнойТарифнойСтавкеОтОбратногоПоДням);
	МассивСпособовРасчетаОтОбратного.Добавить(СпособыРасчетаОплатыТруда.УдалитьПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам);
	МассивСпособовРасчетаОтОбратного.Добавить(СпособыРасчетаОплатыТруда.УдалитьПоЧасовойТарифнойСтавкеОтОбратного);
	
  	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка,
	|	ОсновныеНачисленияОрганизаций.СпособРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.СпособРасчета В(&СпособРасчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеНачисленияОрганизаций.Ссылка,
	|	ДополнительныеНачисленияОрганизаций.СпособРасчета
	|ИЗ
	|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
	|ГДЕ
	|	ДополнительныеНачисленияОрганизаций.СпособРасчета В(&СпособРасчета)";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СпособРасчета",МассивСпособовРасчетаОтОбратного);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВР = Выборка.Ссылка.ПолучитьОбъект();
		
		ВР.ОтОбратного		= Истина;
		ВР.СпособРасчета 	= СпособыРасчетаОтОбратного[Выборка.СпособРасчета];

		ВР.Записать();
	КонецЦикла;
	
	Сообщить("Замена способов расчета ""от обратного"" на признак расчета завершена.");
	Сообщить("-----------------------");
	
КонецПроцедуры //ПеревестиНаПризнакОтОбратного

///////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБНОВЛЕНИЯ НА ВЕРСИЮ 2.0.3

// Процедура дозаполняет регистры "РаботникиОрганизаций", "ЗанятыеШтатныеЕдиницыОрганизаций" данными
// документа "ПриемНаРаботуВОрганизацию" по сотрудникам, в строках которых установлен флажок в колонке 
// "Произошедшее событие"
Процедура ДозаполнитьДанныеПоСотрудникам()
	
	Запрос = Новый Запрос;
	
	// дозаполним регистр сведений "РаботникиОрганизаций" по сотрудникам с меткой "ПроизошедшееСобытие"
	Запрос.Текст = "ВЫБРАТЬ
       |	ДОБАВИТЬКДАТЕ(ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаУвольнения, ДЕНЬ, 1) КАК Период,
       |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка КАК Регистратор,
       |	ВЫБОР
       |		КОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
       |			ТОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация
       |		ИНАЧЕ ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация.ГоловнаяОрганизация
       |	КОНЕЦ КАК Организация,
       |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация КАК ОбособленноеПодразделение,
       |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник,
       |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ПодразделениеОрганизации,
       |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Должность,
       |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ТарифныйРазряд,
       |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ЗанимаемыхСтавок,
       |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ИспытательныйСрок,
       |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.СпособРасчета,
       |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ГрафикРаботы,
       |	ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение) КАК ПричинаИзмененияСостояния
       |ИЗ
       |	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
       |		ПО ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = РаботникиОрганизаций.Регистратор
       |			И ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник = РаботникиОрганизаций.Сотрудник
       |			И ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация.ГоловнаяОрганизация = РаботникиОрганизаций.Организация
       |			И (РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
       |			И (ДОБАВИТЬКДАТЕ(ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаУвольнения, ДЕНЬ, 1) = РаботникиОрганизаций.Период)
       |ГДЕ
       |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Проведен
       |	И ПриемНаРаботуВОрганизациюРаботникиОрганизации.ПроизошедшееСобытие = ИСТИНА
       |	И ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
       |	И (НЕ ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сторно)
       |	И РаботникиОрганизаций.Сотрудник ЕСТЬ NULL 
       |ИТОГИ ПО
       |	Регистратор";
	   
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Сообщить("-----------------------");
	Сообщить("Дозаполнение регистра ""Кадровая история сотрудников (по организациям)""");

	Пока ВыборкаПоДокументам.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.РаботникиОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение = ВыборкаПоДокументам.Регистратор;
		НаборЗаписей.Отбор.Регистратор.Использование = Истина;
		НаборЗаписей.Прочитать();
		ВыборкаПоСтрокамДокумента = ВыборкаПоДокументам.Выбрать();
		Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
			НоваяСтрока = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоСтрокамДокумента);
		КонецЦикла;
		
		Попытка 
			НаборЗаписей.Записать();	
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	Сообщить("Дозаполнение регистра ""Кадровая история сотрудников (по организациям)"" завершено.");
	
	Сообщить("-----------------------");
	Сообщить("Дозаполнение регистра ""Занятые штатные единицы организаций""");

	// дозаполним регистр накопления "ЗанятыеШтатныеЕдиницы" по сотрудникам документе "ПриемНаРаботуВОрганизацию с меткой "ПроизошедшееСобытие"
	Запрос.Текст = "ВЫБРАТЬ
       |	ДОБАВИТЬКДАТЕ(ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаУвольнения, ДЕНЬ, 1) КАК Период,
       |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
       |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка КАК Регистратор,
       |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник,
       |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ПодразделениеОрганизации,
       |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Должность,
       |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ТарифныйРазряд,
       |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ЗанимаемыхСтавок КАК КоличествоСтавок
       |ИЗ
       |	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗанятыеШтатныеЕдиницыОрганизаций КАК ЗанятыеШтатныеЕдиницыОрганизаций
       |		ПО ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = ЗанятыеШтатныеЕдиницыОрганизаций.Регистратор
       |			И ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник = ЗанятыеШтатныеЕдиницыОрганизаций.Сотрудник
       |			И ПриемНаРаботуВОрганизациюРаботникиОрганизации.ПодразделениеОрганизации = ЗанятыеШтатныеЕдиницыОрганизаций.ПодразделениеОрганизации
       |			И ПриемНаРаботуВОрганизациюРаботникиОрганизации.Должность = ЗанятыеШтатныеЕдиницыОрганизаций.Должность
       |			И ПриемНаРаботуВОрганизациюРаботникиОрганизации.ТарифныйРазряд = ЗанятыеШтатныеЕдиницыОрганизаций.ТарифныйРазряд
       |			И (ДОБАВИТЬКДАТЕ(ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаУвольнения, ДЕНЬ, 1) = ЗанятыеШтатныеЕдиницыОрганизаций.Период)
       |			И (ЗанятыеШтатныеЕдиницыОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
       |ГДЕ
       |	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Проведен
       |	И ПриемНаРаботуВОрганизациюРаботникиОрганизации.ПроизошедшееСобытие
       |	И ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
       |	И (НЕ ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сторно)
       |	И ЗанятыеШтатныеЕдиницыОрганизаций.Сотрудник ЕСТЬ NULL 
       |ИТОГИ ПО
       |	Регистратор";

	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.ЗанятыеШтатныеЕдиницыОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение = ВыборкаПоДокументам.Регистратор;
		НаборЗаписей.Отбор.Регистратор.Использование = Истина;
		НаборЗаписей.Прочитать();
		ВыборкаПоСтрокамДокумента = ВыборкаПоДокументам.Выбрать();
		Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
			НоваяСтрока = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоСтрокамДокумента);
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение	
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	Сообщить("Дозаполнение регистра ""Занятые штатные единицы организаций"" завершено.");

КонецПроцедуры


//////////////////////////////////////////////////////////////////////
// ДОПОЛНИТЕЛЬНЫЕ ДЕЙСТВИЯ ОБНОВЛЕНИЯ

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
Процедура ВыполнитьОбновлениеНаРелиз_2_0_4_9(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт
	
	// В данной конфигурации дополнительных действий не требуется
	
КонецПроцедуры

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
Процедура ВыполнитьОбновлениеНаРелиз_2_0_5(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт
	
	// заполнение реквизита порядок справочников "Подразделения", "Подразделения организаций"
	ЗаполнитьРеквизитПорядокУСправочника("Подразделения");
	ЗаполнитьРеквизитПорядокУСправочника("ПодразделенияОрганизаций", Истина);
	
	// заполнение регистра сведений "Сведения о займах"
	ЗаполнитьСведенияОЗаймах();
	
КонецПроцедуры

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
Процедура ВыполнитьОбновлениеНаРелиз_2_0_6(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт
	
	// В данной конфигурации дополнительных действий не требуется
	
КонецПроцедуры

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
Процедура ВыполнитьОбновлениеНаРелиз_2_0_7(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт
	
	// В данной конфигурации дополнительных действий не требуется
	
КонецПроцедуры

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
Процедура ВыполнитьОбновлениеНаРелиз_2_0_8(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт
	
	// В данной конфигурации дополнительных действий не требуется
	
КонецПроцедуры

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
Процедура ВыполнитьОбновлениеНаРелиз_2_0_9(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт
	
	// В данной конфигурации дополнительных действий не требуется
	
КонецПроцедуры

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
Процедура ВыполнитьОбновлениеНаРелиз_2_0_10(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт
	
	// В данной конфигурации дополнительных действий не требуется
	
КонецПроцедуры

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
Процедура ВыполнитьОбновлениеНаРелиз_2_0_11(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт
	
	// В данной конфигурации дополнительных действий не требуется
	
КонецПроцедуры

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
Процедура ВыполнитьОбновлениеНаРелиз_2_0_12(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт
	
	// В данной конфигурации дополнительных действий не требуется
	
КонецПроцедуры

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
Процедура ВыполнитьОбновлениеНаРелиз_2_0_13(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт
	
	// В данной конфигурации дополнительных действий не требуется
	
КонецПроцедуры

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
Процедура ВыполнитьОбновлениеНаРелиз_2_0_14(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт
	
	// В данной конфигурации дополнительных действий не требуется
	
КонецПроцедуры

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
Процедура ВыполнитьОбновлениеНаРелиз_2_0_15(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт
	
	// В данной конфигурации дополнительных действий не требуется
	
КонецПроцедуры

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
Процедура ВыполнитьОбновлениеНаРелиз_2_0_16(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт
	
	// В данной конфигурации дополнительных действий не требуется
	
КонецПроцедуры

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
Процедура ВыполнитьОбновлениеНаРелиз_2_0_17(ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации, ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт
	
	// В данной конфигурации дополнительных действий не требуется
	
КонецПроцедуры

// Процедура заполняет реквизит "Порядок" у существующих элементов справочника
// "Объкет" - название справочника
// "ПоВладельцу" - обход справочнкиа по владельцу
//
Процедура ЗаполнитьРеквизитПорядокУСправочника(Объект, ПоВладельцу = Ложь)
	
	Если Объект = Неопределено ИЛИ НЕ Тип("Строка") = ТипЗнч(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъект = Метаданные.Справочники.Найти(Объект);
	
	Если МетаданныеОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сообщить("-----------------------");
	Сообщить("Обработка элементов справочника """ + МетаданныеОбъект.Синоним + """");

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Справочник.Ссылка
	                      |ИЗ
	                      |	Справочник." + Объект + " КАК Справочник
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Справочник.Наименование " + ?(ПоВладельцу, "
	                      |ИТОГИ ПО
	                      |	Справочник.Владелец", ""));

	Если ПоВладельцу Тогда 
    	ВыборкаПоОбъектам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВыборкаПоОбъектам = Запрос.Выполнить().Выбрать();
	КонецЕсли;
	
	Счетчик = 0;
	
	Пока ВыборкаПоОбъектам.Следующий() Цикл
		
		Если ПоВладельцу Тогда
			Счетчик = 0;
			ВыборкаПоГруппировке = ВыборкаПоОбъектам.Выбрать();	
			Пока ВыборкаПоГруппировке.Следующий() Цикл
				ОбъектСправочника = ВыборкаПоГруппировке.Ссылка.ПолучитьОбъект();
				ОбъектСправочника.ОбменДанными.Загрузка = Истина;
				ОбъектСправочника.Порядок = Счетчик;
				
				Попытка 
					ОбъектСправочника.Записать();
				Исключение
					Сообщить("Не установлено значение порядка элемента справочника """ + МетаданныеОбъект.Синоним + """");
					Сообщить("по причине: " + ОписаниеОшибки());
				КонецПопытки;
				
				Счетчик = Счетчик + 1;
			КонецЦикла;
		Иначе
			ОбъектСправочника = ВыборкаПоОбъектам.Ссылка.ПолучитьОбъект();
			ОбъектСправочника.ОбменДанными.Загрузка = Истина;
			ОбъектСправочника.Порядок = Счетчик;
			
			Попытка 
				ОбъектСправочника.Записать();
			Исключение
				Сообщить("Не установлено значение порядка элемента справочника """ + МетаданныеОбъект.Синоним + """");
				Сообщить("по причине: " + ОписаниеОшибки());
			КонецПопытки;
			Счетчик = Счетчик + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Сообщить("Обработка элементов справочника """ + МетаданныеОбъект.Синоним + """ завершена.");
	
КонецПроцедуры

// Перезаполняет наборы записей регистраторов исправленными данными и записывает их.
//
// Параметры: 
//  НаборЗаписей - Регистр<Сведений,...>НаборЗаписей.<Имя> - переписываемый набор записей
//  Запрос - исполняемый запрос, в котором обязательно присутствует поле Регистратор
//			 остальные поля должны соответствовать полям записи заполняемого регистра;
//			 кроме того, результат запроса должен быть упорядочен, 
//			 первое поле упорядочивания - Регистратор
//  ТекстЗаголовка - строка, начало сообщения, выводимого в строке состояния
//
// Возвращаемое значение:
//  Нет
//
Процедура ПереписатьНаборыЗаписейПоРегистраторам(НаборЗаписей, Запрос, ТекстЗаголовка) Экспорт

	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ТекстСообщения = ТекстЗаголовка;
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ВсегоДоков = ВыборкаРегистраторов.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	Пока ВыборкаРегистраторов.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		Пока ВыборкаРегистраторов.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),ВыборкаРегистраторов);
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Если Номер % 30 = 0 Тогда
					Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
				КонецЕсли;
				Номер = Номер + 1;
			#КонецЕсли
		КонецЦикла;
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
КонецПроцедуры

// Процедура заполненяет регистра сведений "Сведения о займах"
Процедура ЗаполнитьСведенияОЗаймах()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыЗаймаСРаботниками.Регистратор КАК Регистратор,
	|	ДоговорЗаймаСРаботником.Ссылка КАК ДоговорЗайма,
	|	ДоговорЗаймаСРаботником.ФизЛицо,
	|	ДоговорЗаймаСРаботником.Организация,
	|	ДоговорЗаймаСРаботником.НачалоПогашения,
	|	ДоговорЗаймаСРаботником.СрокПогашения,
	|	ДоговорЗаймаСРаботником.ПорядокПогашенияЗайма,
	|	ДоговорЗаймаСРаботником.СуммаЗайма,
	|	ДоговорЗаймаСРаботником.КурсДокумента,
	|	ДоговорЗаймаСРаботником.КратностьДокумента,
	|	ДоговорЗаймаСРаботником.ВалютаДокумента,
	|	ДоговорЗаймаСРаботником.Номер КАК НомерДокумента,
	|	ДоговорЗаймаСРаботником.Дата КАК ДатаДокумента,
	|	ДоговорЗаймаСРаботником.ОтражатьВБухгалтерскомУчете,
	|	ДоговорЗаймаСРаботником.ОтражатьВУправленческомУчете
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПогашениеЗаймовРаботниками.ДоговорЗайма КАК Регистратор
	|	ИЗ
	|		РегистрНакопления.ПогашениеЗаймовРаботниками КАК ПогашениеЗаймовРаботниками
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПогашениеЗаймовРаботникамиОрганизаций.ДоговорЗайма
	|	ИЗ
	|		РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций КАК ПогашениеЗаймовРаботникамиОрганизаций) КАК ДоговорыЗаймаСРаботниками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорЗаймаСРаботником КАК ДоговорЗаймаСРаботником
	|		ПО ДоговорыЗаймаСРаботниками.Регистратор = ДоговорЗаймаСРаботником.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОЗаймах КАК СведенияОЗаймах
	|		ПО ДоговорыЗаймаСРаботниками.Регистратор = СведенияОЗаймах.ДоговорЗайма
	|ГДЕ
	|	СведенияОЗаймах.Регистратор ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	ПереписатьНаборыЗаписейПоРегистраторам(РегистрыСведений.СведенияОЗаймах.СоздатьНаборЗаписей(), Запрос, "Обновление записей сведений о займах сотрудников");
	
КонецПроцедуры // ЗаполнитьСведенияОЗаймах
