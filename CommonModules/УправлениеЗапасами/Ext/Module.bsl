// По переданной структуре полей формирует запрос по табличной части документа.
//
// Параметры: 
//  ДокументОбъект        - объект проводимого документа, 
//  ИмяТабличнойЧасти     - строка, имя табличной части,
//  СтруктураПолей        - структура, ключ структуры содержит псевдоним поля запроса, значение - строку запроса,
//  СтруктураСложныхПолей - структура, ключ структуры содержит псевдоним поля запроса, значение - строку запроса,
//                          необязательный параметр, служит для передачи конструкций типа "ВЫБОР" и т.д.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, СтруктураПолей,
                                           СтруктураСложныхПолей = Неопределено) Экспорт

	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	ДокументМетаданные = ДокументОбъект.Метаданные();

	Для Каждого Реквизит Из СтруктураПолей Цикл

		ТекстЗапроса  = ТекстЗапроса + ",
		|	Док." + Реквизит.Значение + 
		?(НЕ ЗначениеЗаполнено(Реквизит.Ключ), "", " КАК " + СокрЛП(Реквизит.Ключ));

	КонецЦикла;
	
	ТекстСоединение="";
	
	Если ТипЗнч(СтруктураСложныхПолей) = Тип("Структура") Тогда // Добавим к запросу конструкции.
		
		Для Каждого Элемент Из СтруктураСложныхПолей Цикл
			
			ТекстЗапроса  = ТекстЗапроса + ",
			| " + Элемент.Значение + 
			?(НЕ ЗначениеЗаполнено(Элемент.Ключ), "", " КАК " + СокрЛП(Элемент.Ключ));
			
		КонецЦикла;
		
		Если СтруктураСложныхПолей.Свойство("Проект") Тогда
			
			Если ИмяТабличнойЧасти = "ОС" Тогда
				ТекстСоединение="
				|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УстановкаПроектовДляНоменклатуры.СрезПоследних(&ДатаДок, НоменклатураПроекта В (ВЫБРАТЬ ОсновноеСредство ИЗ Документ." + ДокументМетаданные.Имя + "."+ СокрЛП(ИмяТабличнойЧасти) + " ГДЕ Ссылка = &ДокументСсылка)) КАК ПроектыНоменклатуры
				|ПО Док.ОсновноеСредство=ПроектыНоменклатуры.НоменклатураПроекта";
				
			ИначеЕсли ИмяТабличнойЧасти = "НМА" Тогда
				ТекстСоединение="
				|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УстановкаПроектовДляНоменклатуры.СрезПоследних(&ДатаДок, НоменклатураПроекта В (ВЫБРАТЬ НематериальныйАктив ИЗ Документ." + ДокументМетаданные.Имя + "."+ СокрЛП(ИмяТабличнойЧасти) + " ГДЕ Ссылка = &ДокументСсылка)) КАК ПроектыНоменклатуры
				|ПО Док.НематериальныйАктив=ПроектыНоменклатуры.НоменклатураПроекта";
				
			Иначе
				
				ТекстСоединение="
				|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УстановкаПроектовДляНоменклатуры.СрезПоследних(&ДатаДок, НоменклатураПроекта В (ВЫБРАТЬ Номенклатура ИЗ Документ." + ДокументМетаданные.Имя + "."+ СокрЛП(ИмяТабличнойЧасти) + " ГДЕ Ссылка = &ДокументСсылка)) КАК ПроектыНоменклатуры
				|ПО Док.Номенклатура=ПроектыНоменклатуры.НоменклатураПроекта";
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ДатаДок",ДокументОбъект.Дата);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.НомерСтроки " + ТекстЗапроса + "
	|
	|ИЗ 
	|   Документ." + ДокументМетаданные.Имя + "."+ СокрЛП(ИмяТабличнойЧасти) + 
	" КАК Док"+ТекстСоединение+" 
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка";
	

	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументОбъект.Ссылка);
	
	Если ДокументОбъект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ Док.Ссылка = &ДокументСсылка", "ГДЕ ЛОЖЬ");
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоТабличнойЧасти()

// Формирует запрос на дополнительные параметры, нужные при проведении документа.
//
// Параметры: 
//  ДокументОбъект                 - объект проводимого документа, 
//  ДеревоПолейЗапросаПоШапке      - дерево значений, содержащего имена полей, 
//                                   которые нужно заполнить в запросе по шапке документа.
//  СтруктураШапкиДокумента        - структура, содержащая значения реквизитов, относящихся к шапке документа,
//                                   необходимых для его проведения.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Дополненная по результату запроса структура СтруктураШапкиДокумента.
//
Функция СформироватьЗапросПоДеревуПолей(ДокументОбъект, ДеревоПолейЗапросаПоШапке, 
										СтруктураШапкиДокумента, ВалютаРегламентированногоУчета) Экспорт

	Если ДеревоПолейЗапросаПоШапке.Строки.Количество() = 0 Тогда
		Возврат СтруктураШапкиДокумента;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ";

	СтрокиЗапроса           = "";
	ТаблицыЗапроса          = "";
	НуженКурсВалютыУпрУчета = Ложь;
	ЕстьУчетнаяПолитика     = Ложь;
	
	ДокументОбъектМетаданные = ДокументОбъект.Метаданные();

	// Реквизиты договора взаиморасчетов.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДоговорыКонтрагентов", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
							Символы.Таб + "Док.ДоговорКонтрагента." + СокрЛП(СтрокаПоля.Поле) +
							?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Реквизиты договора взаиморасчетов регл.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДоговорыКонтрагентовРегл", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
							Символы.Таб + "Док.ДоговорКонтрагентаРегл." + СокрЛП(СтрокаПоля.Поле) +
							?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты организации.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Организации", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
							Символы.Таб + "Док.Организация." + СокрЛП(СтрокаПоля.Поле) +
							?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Реквизиты сделки.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Сделка", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		Если ЗначениеЗаполнено(ДокументОбъект.Сделка) Тогда
			СделкаМетаданные = ДокументОбъект.Сделка.Метаданные();
		Иначе
			СделкаМетаданные = Неопределено;
		КонецЕсли;
		
		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + ?(СделкаМетаданные = Неопределено ИЛИ СделкаМетаданные.Реквизиты.Найти(СокрЛП(СтрокаПоля.Поле)) = Неопределено,
								"NULL",
								"ВЫРАЗИТЬ(Док.Сделка КАК Документ." + СделкаМетаданные.Имя + ")." + СокрЛП(СтрокаПоля.Поле)) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты расчетного документа.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("РасчетныйДокумент", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		Если ЗначениеЗаполнено(ДокументОбъект.РасчетныйДокумент) Тогда
			СделкаМетаданные = ДокументОбъект.РасчетныйДокумент.Метаданные();
		Иначе
			СделкаМетаданные = Неопределено;
		КонецЕсли;
		
		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + ?(СделкаМетаданные = Неопределено, "NULL", "ВЫРАЗИТЬ(Док.РасчетныйДокумент КАК Документ." + СделкаМетаданные.Имя + ")." + СокрЛП(СтрокаПоля.Поле)) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Реквизиты склада.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Склад", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
							Символы.Таб + "Док.Склад." + СокрЛП(СтрокаПоля.Поле) +
							?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-группы.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("СкладГруппа", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
							Символы.Таб + "Док.СкладГруппа." + СокрЛП(СтрокаПоля.Поле) +
							?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Реквизиты склада-отправителя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("СкладОтправитель", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
							Символы.Таб + "Док.СкладОтправитель." + СокрЛП(СтрокаПоля.Поле) +
							?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-отправителя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДокументПеремещения", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
							Символы.Таб + "Док.ДокументПеремещения." + СокрЛП(СтрокаПоля.Поле) +
							?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-отправителя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДокументПередачи", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
							Символы.Таб + "Док.ДокументПередачи." + СокрЛП(СтрокаПоля.Поле) +
							?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Реквизиты склада-получателя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("СкладПолучатель", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
							Символы.Таб + "Док.СкладПолучатель." + СокрЛП(СтрокаПоля.Поле) +
							?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-ордера
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("СкладОрдер", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.СкладОрдер." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Заказ", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.Заказ." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ВнутреннийЗаказ", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ВнутреннийЗаказ." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты заказа покупателя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ЗаказПокупателя", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ЗаказПокупателя." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты заказа поставщику
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ЗаказПоставщику", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ЗаказПоставщику." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Реквизиты номенклатуры
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Номенклатура", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
							Символы.Таб + "Док.Номенклатура." + СокрЛП(СтрокаПоля.Поле) +
							?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Реквизиты состояния ОС
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Состояние", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
							Символы.Таб + "Док.Состояние." + СокрЛП(СтрокаПоля.Поле) +
							?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты документа основания
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДокументОснование", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДокументОснование." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Пустые реквизиты.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("NULL", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "NULL" +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Константы
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Константы", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда
		ТаблицыЗапроса = ТаблицыЗапроса + ", Константы";

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
							Символы.Таб + "Константы." + СокрЛП(СтрокаПоля.Поле) +
							?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ " + Сред(СтрокиЗапроса, 2) + "
	                | ИЗ 
	                |      Документ." + ДокументОбъект.Метаданные().Имя + " КАК Док "+ ТаблицыЗапроса +"
	                |     ГДЕ Док.Ссылка = &ДокументСсылка";

	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ДокументСсылка",	ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента",	ДокументОбъект.Дата);

	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();

	Для каждого Колонка из ТаблицаЗапроса.Колонки Цикл
		СтруктураШапкиДокумента.Вставить(Колонка.Имя, ТаблицаЗапроса[0][Колонка.Имя]);
	КонецЦикла;

	Возврат СтруктураШапкиДокумента;

КонецФункции // СформироватьЗапросПоДеревуПолей()

// Проверяет, что в табличной части нет услуг
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетУслуг(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений = Неопределено, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	Если (НЕ ТаблицаЗначений = Неопределено) И (ТаблицаЗначений.Количество() > 0) Тогда
		// Цикл по строкам таблицы значений.
		Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
			   И  СтрокаТаблицы.Услуга Тогда

					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится услуга. " +
					                   "Услуг здесь быть не должно!", Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;
	Иначе
		// Цикл по строкам табличной части документа.
		Для каждого СтрокаТаблицы Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
			   И  СтрокаТаблицы.Номенклатура.Услуга Тогда

					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится услуга. " +
					                   "Услуг здесь быть не должно!", Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПроверитьЧтоНетУслуг()

// Проверяет, что в табличной части нет товаров
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак товара
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетТоваров(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений = Неопределено, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	Если (НЕ ТаблицаЗначений = Неопределено) И (ТаблицаЗначений.Количество() > 0) Тогда
		// Цикл по строкам таблицы значений.
		Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
			   И  Не СтрокаТаблицы.Услуга Тогда

					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится номенклатура, не являющаяся услугой. " +
					                   "Здесь могут быть только услуги!", Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;
	Иначе
		// Цикл по строкам табличной части документа.
		Для каждого СтрокаТаблицы Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
			   И  Не СтрокаТаблицы.Номенклатура.Услуга Тогда

					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится номенклатура, не являющаяся услугой. " +
					                   "Здесь могут быть только услуги!", Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПроверитьЧтоНетТоваров()

// Определяется ведется или нет партионный учет для конкретного счета
//
// Параметры
//  Счет, Дата
//
// Возвращаемое значение:
//   Булево - истина - партионный учет ведется,
//			  ложь   - партионный учет не ведтся.
//
Функция ВедетсяПартионныйУчетДляСчета(Счет) Экспорт
	
	ВедетсяПартионныйУчет = Ложь;
	
	ЗапросКСчетам = Новый Запрос();
	
	// самый высокий приоритет, когда заполнена и организация и счет
	ЗапросКСчетам.Текст = "ВЫБРАТЬ
    |	СпособОценкиЗапасовБУ.СпособОценки
    |ИЗ
    |	РегистрСведений.СпособОценкиЗапасовБУ КАК СпособОценкиЗапасовБУ
    |ГДЕ
    |	СпособОценкиЗапасовБУ.СчетЗапасов = &СчетЗапасов";
	
	ЗапросКСчетам.УстановитьПараметр("СчетЗапасов", Счет);
	
	Выборка = ЗапросКСчетам.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если ЗначениеЗаполнено(Выборка.СпособОценки) Тогда
		
			Если Выборка.СпособОценки = Перечисления.СпособыОценки.ЛИФО 
			 ИЛИ Выборка.СпособОценки = Перечисления.СпособыОценки.ФИФО Тогда
				ВедетсяПартионныйУчет = Истина;
			КонецЕсли;
			
			Прервать;
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат ВедетсяПартионныйУчет;
	
КонецФункции // ВедетсяПартионныйУчетДляСчета()

// Определяется стратегию списания для счета
//
// Параметры
//  Счет
//
// Возвращаемое значение:
//   (ЛИФО, ФИФО, ПоСредней)
//
Функция ПолучитьСтратегиюСписанияСчета(Счет) Экспорт
		
	ЗапросКСчетам = Новый Запрос();
	ЗапросКСчетам.Текст = "ВЫБРАТЬ
    |	СпособОценкиЗапасовБУ.СпособОценки
    |ИЗ
    |	РегистрСведений.СпособОценкиЗапасовБУ КАК СпособОценкиЗапасовБУ
    |ГДЕ
    |	СпособОценкиЗапасовБУ.СчетЗапасов = &СчетЗапасов";
	
	ЗапросКСчетам.УстановитьПараметр("СчетЗапасов",Счет);
	
	Выборка = ЗапросКСчетам.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	    Возврат Выборка.СпособОценки;
	КонецЕсли; 
	
	Возврат Перечисления.СпособыОценки.ПоСредней;
	
КонецФункции // ПолучитьСтратегиюСписанияСчета()
                         

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБСЛУЖИВАНИЯ КОМПЛЕКТУЮЩИХ


// Функция формирует значение нового ключа строки табличной части.
//
// Параметры:
//  ДокументОбъект – объект редактируемого документа,
//  ИмяТЧ          – имя табличной части объекта.
//
Функция ПолучитьНовыйКлючСтроки(ДокументОбъект, ИмяТЧ = "Товары") Экспорт

	Если ДокументОбъект[ИмяТЧ].Количество() = 0 Тогда
		МаксКлюч = 1;
	Иначе
		// Если в табл. части уже присутствуют строки, то новое «свободное» значение ключа
		// рассчитывается от максимального существующего значения.
		СписокКлючей = Новый СписокЗначений;
		СписокКлючей.ЗагрузитьЗначения(ДокументОбъект[ИмяТЧ].ВыгрузитьКолонку("КлючСтроки"));
		СписокКлючей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		МаксКлюч = СписокКлючей[0].Значение + 1;
	КонецЕсли;

	Возврат МаксКлюч;

КонецФункции // УчетСерийныхНомеров.ПолучитьНовыйКлючСвязи()

// Очистить состав набора в документе
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура ОчиститьСоставНабора(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ТабличнаяЧасть = ДокументОбъект.СоставНабора;

	Если ТабличнаяЧасть.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСтроки", СтрокаТабличнойЧасти.КлючСтроки);

	МассивЭлементов = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
	КолвоЭлементов  = МассивЭлементов.Количество();
	
	СерНомераНабора = ДокументОбъект.Метаданные().ТабличныеЧасти.Найти("СерийныеНомераСоставНабора");
	Если СерНомераНабора <> Неопределено Тогда
		Для Каждого Элемент Из МассивЭлементов Цикл
			Если Элемент.КлючСвязи <> 0 Тогда
				СтруктураПоиска = Новый Структура();
				СтруктураПоиска.Вставить("КлючСвязи", Элемент.КлючСвязи);
				СерийныеНомера = ДокументОбъект.СерийныеНомераСоставНабора.НайтиСтроки(СтруктураПоиска);
				Для Каждого СерийныйНомер Из СерийныеНомера Цикл
					ДокументОбъект.СерийныеНомераСоставНабора.Удалить(СерийныйНомер);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
		ТабличнаяЧасть.Удалить(МассивЭлементов[КолвоЭлементов - ОбратныйИндекс]);
	КонецЦикла;

КонецПроцедуры // ОчиститьСоставНабора()

// Функция получает таблицу значений с "комплектующими".
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа
//
// Возвращаемое значение:
//  Таблица значений.
//
Функция ПолучитьТаблицуКомплектующих(СтрокаТабличнойЧасти, ДатаДокумента = Неопределено)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПарНоменклатура", СтрокаТабличнойЧасти.Номенклатура);
	Запрос.УстановитьПараметр("ПарХарактеристика", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("ПарКлючСтроки"  , СтрокаТабличнойЧасти.КлючСтроки);

	Если ДатаДокумента <> Неопределено Тогда
		Запрос.УстановитьПараметр("Дата", ДатаДокумента);

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	СпецПредложения.Комплектующая КАК Номенклатура,
		|	СпецПредложения.ХарактеристикаКомплектующей КАК ХарактеристикаНоменклатуры,
		|	СпецПредложения.Количество КАК Количество,
		|	СпецПредложения.Комплектующая.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	&ПарКлючСтроки КАК КлючСтроки,
		|	0 КАК Цена
		|ИЗ
		|	(ВЫБРАТЬ
		|		СкидкиНатуральные.СпецПредложение КАК СпецПредложение,
		|		СкидкиНатуральные.ХарактеристикаСпецПредложения КАК ХарактеристикаСпецПредложения,
		|		МАКСИМУМ(СкидкиНатуральные.Регистратор) КАК Регистратор
		|	ИЗ
		|		РегистрСведений.СкидкиНоменклатурыНатуральные.СрезПоследних(&Дата) КАК СкидкиНатуральные
		|	ГДЕ
		|		СкидкиНатуральные.СпецПредложение = &ПарНоменклатура
		|	  И СкидкиНатуральные.ХарактеристикаСпецПредложения = &ПарХарактеристика
		|	СГРУППИРОВАТЬ ПО
		|		СпецПредложение,
		|		ХарактеристикаСпецПредложения
		|	) КАК СкидкиНатуральные
		|СОЕДИНЕНИЕ
		|	РегистрСведений.СпецПредложения КАК СпецПредложения
		|	ПО СкидкиНатуральные.Регистратор = СпецПредложения.Регистратор
		|	И СкидкиНатуральные.СпецПредложение = СпецПредложения.Номенклатура
		|	И СкидкиНатуральные.ХарактеристикаСпецПредложения = СпецПредложения.ХарактеристикаНоменклатуры
		|";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегКомплектующие.Комплектующая               КАК Номенклатура,
		|	РегКомплектующие.ХарактеристикаКомплектующей КАК ХарактеристикаНоменклатуры,
		|	РегКомплектующие.Количество                  КАК Количество,
		|	РегКомплектующие.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,
		|	&ПарКлючСтроки                               КАК КлючСтроки
		|ИЗ
		|	РегистрСведений.КомплектующиеНоменклатуры КАК РегКомплектующие
		|ГДЕ
		|	РегКомплектующие.Номенклатура = &ПарНоменклатура
		| И РегКомплектующие.ХарактеристикаНоменклатуры = &ПарХарактеристика
		|УПОРЯДОЧИТЬ ПО
		|	РегКомплектующие.Комплектующая,
		|	РегКомплектующие.ХарактеристикаКомплектующей
		|";
	КонецЕсли;

	РезультатЗапроса     = Запрос.Выполнить();
	ТаблицаКомплектующих = РезультатЗапроса.Выгрузить();

	Возврат ТаблицаКомплектующих;

КонецФункции // ПолучитьТаблицуКомплектующих()

// Добавить состав набора в документ
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура ДобавитьСоставНабора(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	// в Бухгалтерии не используется, необходима для совместимости с УТ

КонецПроцедуры // ДобавитьСоставНабора()