
#Область ПроцедурыПодготовкиФорм

Процедура СписокПриСозданииНаСервере(ФормаДокумента) Экспорт
	РежимИнтеграции = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0
		ИЛИ РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 
		ИЛИ РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный Тогда 
		
		Попытка
			// СтандартныеПодсистемы.Печать
			Выполнить("УправлениеПечатью.ПриСозданииНаСервере(ФормаДокумента)");
			// Конец СтандартныеПодсистемы.Печать
		Исключение
			
		КонецПопытки;
		
		Попытка
			// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
			Выполнить("ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ФормаДокумента)");
			// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
		Исключение
			
		КонецПопытки;
		
	ИначеЕсли РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана Тогда 
		
		Попытка
			// СтандартныеПодсистемы.Печать
			Выполнить("УправлениеПечатью.ПриСозданииНаСервере(ФормаДокумента)");
			// Конец СтандартныеПодсистемы.Печать
		Исключение
			
		КонецПопытки;
		
		
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СправочникПриСозданииНаСервере(ФормаДокумента) Экспорт
	РежимИнтеграции = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	
	Если РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0
		ИЛИ РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 
		ИЛИ РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный Тогда 
		
		Попытка
		// СтандартныеПодсистемы.Печать
		Выполнить("УправлениеПечатью.ПриСозданииНаСервере(ФормаДокумента)");
		// Конец СтандартныеПодсистемы.Печать
		Исключение
			
		КонецПопытки;
		
		Попытка
		// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
		Выполнить("ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ФормаДокумента)");
		// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
		Исключение
			
		КонецПопытки;
		
		Попытка
		// СтандартныеПодсистемы.ВерсионированиеОбъектов
		Выполнить("ВерсионированиеОбъектов.ПриСозданииНаСервере(ФормаДокумента)");
		// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
		Исключение
			
		КонецПопытки;
	ИначеЕсли РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана Тогда 
		
		Попытка
		// СтандартныеПодсистемы.Печать
		Выполнить("УправлениеПечатью.ПриСозданииНаСервере(ФормаДокумента)");
		// Конец СтандартныеПодсистемы.Печать
		Исключение
			
		КонецПопытки;
		
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументПриСозданииНаСервере(ФормаДокумента) Экспорт
	РежимИнтеграции = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0
		ИЛИ РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 
		ИЛИ РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный Тогда 
		
		// СтандартныеПодсистемы.Печать
		Выполнить("УправлениеПечатью.ПриСозданииНаСервере(ФормаДокумента)");
		// Конец СтандартныеПодсистемы.Печать
		
		// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
		Выполнить("ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ФормаДокумента)");
		// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
		
		// СтандартныеПодсистемы.ВерсионированиеОбъектов
		Выполнить("ВерсионированиеОбъектов.ПриСозданииНаСервере(ФормаДокумента)");
		// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
		
	ИначеЕсли РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана Тогда
		
		// СтандартныеПодсистемы.Печать
		Выполнить("УправлениеПечатью.ПриСозданииНаСервере(ФормаДокумента)");
		// Конец СтандартныеПодсистемы.Печать
		
		
		// дополнительные печатные формы
		Выполнить("куфиб_УниверсальныеМеханизмыПечатиСервер.УстановитьКнопкиПечати(ФормаДокумента)");
		
	Иначе

	КонецЕсли;
КонецПроцедуры

Процедура ДокументПриЧтенииНаСервере(ФормаДокумента,Объект) Экспорт
	РежимИнтеграции = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	
	Если РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0
		ИЛИ РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 
		ИЛИ РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный Тогда 
		
		
		// СтандартныеПодсистемы.ДатыЗапретаИзменения
		Выполнить("ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ФормаДокумента, Объект)");
		// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
		
		Если РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0	Тогда //ИЛИ РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 Тогда
			// РедактированиеДокументовПользователей
			Выполнить("ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ФормаДокумента, Объект)");
			// Конец РедактированиеДокументовПользователей
		КонецЕсли;	
	ИначеЕсли РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана Тогда
		
		Выполнить("НастройкаПравДоступа.УстановитьДоступностьФормыДляРедактирования(Объект,ФормаДокумента)");
		
		
	ИначеЕсли РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана Тогда
		
		Выполнить("куфиб_ОбщегоНазначенияСервер.УстановитьДоступностьФормыДляРедактирования(Объект,ФормаДокумента)");
		
	КонецЕсли;
КонецПроцедуры

// Формирует и устанавливает текст заголовка формы документа
//
// Параметры:
//  СтрокаВидаОперации - строка вида операции документа, 
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура УстановитьЗаголовокФормыДокумента(СтрокаВидаОперации = "", ДокументСсылка, ФормаДокумента) Экспорт

	ФормаДокумента.АвтоЗаголовок = Ложь; // заголовок будем писать сами
	
	Если ПустаяСтрока(СтрокаВидаОперации) Тогда
		Заголовок = ДокументСсылка.Метаданные().Синоним + ": ";
	Иначе
		Заголовок = ДокументСсылка.Метаданные().Синоним + ": " + СтрокаВидаОперации + ". ";
	КонецЕсли;
		
	Если ДокументСсылка.Пустая() Тогда  
		Заголовок = Заголовок + "Новый";
	Иначе
		Если ДокументСсылка.Проведен Тогда
			Заголовок = Заголовок + "Проведен";
		ИначеЕсли ДокументСсылка.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Заголовок = Заголовок + "Не проведен";
		Иначе
			Заголовок = Заголовок + "Записан";
		КонецЕсли;
		//Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("РучнаяКорректировка", ДокументСсылка.Метаданные()) Тогда
		//	Если ДокументСсылка.РучнаяКорректировка Тогда
		//		Заголовок = Заголовок + ": (Ручная корректировка)";
		//	КонецЕсли;
		//КонецЕсли;
		
	КонецЕсли;
	
	ФормаДокумента.Заголовок = Заголовок;

КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

#КонецОбласти

#Область ПроцедурыПроверкиДатыЗапретаИзменения

// Проверка возможности изменения записей регистров (дата запрета изменения данных)
//
Процедура ПередЗаписьюРегистраНакопленийПроверкаДоступностиПериода(Источник, Отказ, Замещение) Экспорт

	РежимИнтеграцииСУчетнойСистемой = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 Тогда
		Выполнить("ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписей(Источник, Отказ, Замещение)");
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой <> Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный И РежимИнтеграцииСУчетнойСистемой <> Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3  Тогда
		Выполнить("НастройкаПравДоступа.ПередЗаписьюРегистраНакопленийПроверкаДоступностиПериода(Источник, Отказ, Замещение)");
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюРегистраНакопленийПроверкаДоступностиПериода

// Проверка возможности изменения записей регистров бухгалтерии (дата запрета изменения данных)
//
Процедура ПередЗаписьюРегистраБухгалтерииПроверкаДоступностиПериода(Источник, Отказ, Замещение) Экспорт

	РежимИнтеграцииСУчетнойСистемой = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 Тогда
		Выполнить("ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписей(Источник, Отказ, Замещение)");
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой <> Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный И РежимИнтеграцииСУчетнойСистемой <> Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3  Тогда
		Выполнить("НастройкаПравДоступа.ПередЗаписьюРегистраБухгалтерииПроверкаДоступностиПериода(Источник, Отказ, Замещение)");
	КонецЕсли;
	
	
	
КонецПроцедуры // ПередЗаписьюРегистраБухгалтерииПроверкаДоступностиПериода

// Проверка возможности изменения записей регистров сведений (дата запрета изменения данных)
//
Процедура ПередЗаписьюРегистраСведенийПроверкаДоступностиПериода(Источник, Отказ, Замещение) Экспорт

	РежимИнтеграцииСУчетнойСистемой = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 Тогда
		Выполнить("ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписей(Источник, Отказ, Замещение)");
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой <> Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный И РежимИнтеграцииСУчетнойСистемой <> Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3  Тогда
		Выполнить("НастройкаПравДоступа.ПередЗаписьюРегистраСведенийПроверкаДоступностиПериода(Источник, Отказ, Замещение)");
	КонецЕсли;
	
	
КонецПроцедуры // ПередЗаписьюРегистраБухгалтерииПроверкаДоступностиПериода

// Проверка возможности записи данных документа с учетом даты запрета изменения данных (даты запрета редактирования)
//
Процедура ПередЗаписьюДокументовПроверкаДоступностиПериода(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	РежимИнтеграцииСУчетнойСистемой = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 ИЛИ РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 Тогда
		Выполнить("ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения)");
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой <> Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный Тогда
		Выполнить("НастройкаПравДоступа.ПередЗаписьюДокументовПроверкаДоступностиПериода(Источник, Отказ, РежимЗаписи, РежимПроведения)");
	КонецЕсли;
	
КонецПроцедуры	// ПередЗаписьюДокументовПроверкаДоступностиПериода

#КонецОбласти

#Область ПроцедурыНумерацииОбъектов

// Процедура обрабатывает событие ПередЗаписью документа
// Перднозначена для очистки реквизита РучнаяКорректировка в случае отмены проведения документа
//
Процедура ПередЗаписьюДокументаОчисткаРеквизитаРучнаяКорректировка(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если (Источник.РучнаяКорректировка) И (РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) Тогда 
		Источник.РучнаяКорректировка = Ложь
	КонецЕсли;	
	
КонецПроцедуры

// процедура формирования номера документа
//
Процедура ПриУстановкеНовогоНомераДляДокументов(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	РежимИнтеграцииСУчетнойСистемой = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный Тогда
		Возврат;
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана Тогда
		Выполнить("куфиб_ОбщегоНазначения.ПриУстановкеНовогоНомераДляДокументов(Источник, СтандартнаяОбработка, Префикс)");
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 Тогда
		Выполнить("ПрефиксацияОбъектовБКСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации(Источник, СтандартнаяОбработка, Префикс)");
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 Тогда
		Если Источник.Метаданные().Реквизиты.Найти("Организация")<>Неопределено Тогда
			Выполнить("ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации(Источник, СтандартнаяОбработка, Префикс)");
		КонецЕсли;
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана Тогда
		Выполнить("ОбщегоНазначения.ПриУстановкеНовогоНомераДляДокументов(Источник, СтандартнаяОбработка, Префикс)");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриУстановкеНовогоКода для подписки на событие
//
Процедура ПриУстановкеКодаПВХПриУстановкеНовогоКода(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	РежимИнтеграцииСУчетнойСистемой = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный Тогда
		Возврат;
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана Тогда
		Выполнить("куфиб_ОбщегоНазначения.ПриУстановкеКодаПВХПриУстановкеНовогоКода(Источник, СтандартнаяОбработка, Префикс)");
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 Тогда
		Выполнить("ПрефиксацияОбъектовБКСобытия.УстановитьПрефиксИнформационнойБазы(Источник, СтандартнаяОбработка, Префикс)");
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 Тогда
		Выполнить("ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазы(Источник, СтандартнаяОбработка, Префикс)");
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана Тогда
		Выполнить("ОбщегоНазначения.ПриУстановкеКодаПВХПриУстановкеНовогоКода(Источник, СтандартнаяОбработка, Префикс)");
	КонецЕсли;
КонецПроцедуры // ПриУстановкеКодаПВХПриУстановкеНовогоКода()

// Процедура обрабатывает событие ПриУстановкеНовогоКода справочника
//
Процедура ПриУстановкеНовогоКодаСправочника(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	
	РежимИнтеграцииСУчетнойСистемой = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный Тогда
		Возврат;
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана Тогда
		Выполнить("куфиб_ОбщегоНазначения.ПриУстановкеНовогоКодаСправочника(Источник, СтандартнаяОбработка, Префикс)");
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 Тогда
		Выполнить("ПрефиксацияОбъектовБКСобытия.УстановитьПрефиксИнформационнойБазы(Источник, СтандартнаяОбработка, Префикс)");
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 Тогда
		Выполнить("ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазы(Источник, СтандартнаяОбработка, Префикс)");
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана Тогда
		Выполнить("ОбщегоНазначения.ПриУстановкеНовогоКодаСправочника(Источник, СтандартнаяОбработка, Префикс)");
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает событие ПриУстановкеНовогоКода справочника
//
Процедура ПриУстановкеНовогоКодаСправочникаОбщегоСТиповымРешением(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	
	Если Найти(Источник.Метаданные().Имя,"общ_")=0 Тогда
		Возврат;
	Иначе
		ПриУстановкеНовогоКодаСправочника(Источник, СтандартнаяОбработка, Префикс);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбменаПолный

Процедура фин_ОбменДаннымиПолныйЗарегистрироватьИзменениеПередЗаписью(Источник, Отказ) Экспорт
	РежимИнтеграцииСУчетнойСистемой = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный Тогда
		Возврат;
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана Тогда
		Возврат;
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана Тогда
		Возврат;
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 Тогда
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрацияВПланеОбменаПолный(Источник.Метаданные().ПолноеИмя()) Тогда
			Выполнить("ОбменДаннымиРИБСобытия.ПолныйЗарегистрироватьИзменениеПередЗаписью(Источник, Отказ)");
		КонецЕсли;
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 Тогда
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрацияВПланеОбменаПолный(Источник.Метаданные().ПолноеИмя()) Тогда
			Выполнить("ОбменДаннымиСобытияУТУП.ОбменДаннымиПолныйПередЗаписью(Источник, Отказ)");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура фин_ОбменДаннымиПолныйЗарегистрироватьУдалениеПередУдалением(Источник, Отказ) Экспорт
	РежимИнтеграцииСУчетнойСистемой = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 Тогда
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрацияВПланеОбменаПолный(Источник.Метаданные().ПолноеИмя()) Тогда
			Выполнить("ОбменДаннымиРИБСобытия.ПолныйЗарегистрироватьУдалениеПередУдалением(Источник, Отказ)");
		КонецЕсли;
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 Тогда
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрацияВПланеОбменаПолный(Источник.Метаданные().ПолноеИмя()) Тогда
			Выполнить("ОбменДаннымиСобытияУТУП.ОбменДаннымиПолныйПередУдалением(Источник, Отказ)");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура фин_ОбменДаннымиПолныйЗарегистрироватьИзменениеДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	РежимИнтеграцииСУчетнойСистемой = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 Тогда
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрацияВПланеОбменаПолный(Источник.Метаданные().ПолноеИмя()) Тогда
			Выполнить("ОбменДаннымиРИБСобытия.ПолныйЗарегистрироватьИзменениеДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения)");
		КонецЕсли;
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 Тогда
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрацияВПланеОбменаПолный(Источник.Метаданные().ПолноеИмя()) Тогда
			Выполнить("ОбменДаннымиСобытияУТУП.ОбменДаннымиПолныйПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения)");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура фин_ОбменДаннымиПолныйЗарегистрироватьИзменениеНабораЗаписейПередЗаписью(Источник, Отказ, Замещение) Экспорт
	РежимИнтеграцииСУчетнойСистемой = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 Тогда
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрацияВПланеОбменаПолный(Источник.Метаданные().ПолноеИмя()) Тогда
			Выполнить("ОбменДаннымиРИБСобытия.ПолныйЗарегистрироватьИзменениеНабораЗаписейПередЗаписью(Источник, Отказ,Замещение)");
		КонецЕсли;
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 Тогда
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрацияВПланеОбменаПолный(Источник.Метаданные().ПолноеИмя()) Тогда
			Выполнить("ОбменДаннымиСобытияУТУП.ОбменДаннымиПолныйПередЗаписьюРегистра(Источник, Отказ,Замещение)");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбменаПоОрганизации

Процедура фин_ОбменДаннымиПоОрганизацииЗарегистрироватьИзменениеПередЗаписью(Источник, Отказ) Экспорт
	РежимИнтеграцииСУчетнойСистемой = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 Тогда
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрацияВПланеОбменаПоОрганизации(Источник.Метаданные().ПолноеИмя()) Тогда
			Выполнить("ОбменДаннымиРИБСобытия.ПоОрганизацииЗарегистрироватьИзменениеПередЗаписью(Источник, Отказ)");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура фин_ОбменДаннымиПоОрганизацииЗарегистрироватьУдаление(Источник, Отказ) Экспорт
	РежимИнтеграцииСУчетнойСистемой = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 Тогда
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрацияВПланеОбменаПоОрганизации(Источник.Метаданные().ПолноеИмя()) Тогда
			Выполнить("ОбменДаннымиРИБСобытия.ПоОрганизацииЗарегистрироватьУдалениеПередУдалением(Источник, Отказ)");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписьюДокументаДляОбменаПоОрганизацииПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	РежимИнтеграцииСУчетнойСистемой = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный Тогда
		Возврат;
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 Тогда
		Возврат;
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана Тогда
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ОтложеннаяРегистрацияВПланеОбменаПоОрганизации(Источник.Метаданные().ПолноеИмя()) Тогда
			Выполнить("куфиб_ПроцедурыОбменаДаннымиПоОрганизации.ПередЗаписьюДокументаДляОбменаПоОрганизацииПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения)");
		КонецЕсли;
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 Тогда
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрацияВПланеОбменаПоОрганизации(Источник.Метаданные().ПолноеИмя()) Тогда
			Выполнить("ОбменДаннымиРИБСобытия.ПоОрганизацииЗарегистрироватьИзменениеДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения)");
		КонецЕсли;
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана Тогда
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ОтложеннаяРегистрацияВПланеОбменаПоОрганизации(Источник.Метаданные().ПолноеИмя()) Тогда
			Выполнить("ПроцедурыОбменаДаннымиПоОрганизации.ПередЗаписьюДокументаДляОбменаПоОрганизацииПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения)");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалениемДокументаДляОбменаПоОрганизацииПередУдалением(Источник, Отказ) Экспорт
	
	РежимИнтеграцииСУчетнойСистемой = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный Тогда
		Возврат;
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 Тогда
		Возврат;
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана Тогда
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрацияВПланеОбменаПоОрганизации(Источник.Метаданные().ПолноеИмя()) Тогда
			Выполнить("куфиб_ПроцедурыОбменаДаннымиПоОрганизации.ПередУдалениемДокументаДляОбменаПоОрганизацииПередУдалением(Источник, Отказ)");
		КонецЕсли;
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 Тогда
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрацияВПланеОбменаПоОрганизации(Источник.Метаданные().ПолноеИмя()) Тогда
			Выполнить("ОбменДаннымиРИБСобытия.ПоОрганизацииЗарегистрироватьУдалениеПередУдалением(Источник, Отказ)");
		КонецЕсли;
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана Тогда
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрацияВПланеОбменаПоОрганизации(Источник.Метаданные().ПолноеИмя()) Тогда
			Выполнить("ПроцедурыОбменаДаннымиПоОрганизации.ПередУдалениемДокументаДляОбменаПоОрганизацииПередУдалением(Источник, Отказ)");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура фин_ОбменДаннымиПоОрганизацииЗарегистрироватьИзменениеНабораЗаписейПередЗаписью(Источник, Отказ, Замещение) Экспорт
	РежимИнтеграцииСУчетнойСистемой = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 Тогда
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрацияВПланеОбменаПоОрганизации(Источник.Метаданные().ПолноеИмя()) Тогда
			Выполнить("ОбменДаннымиРИБСобытия.ПоОрганизацииЗарегистрироватьИзменениеНабораЗаписейПередЗаписью(Источник, Отказ,Замещение)");
		КонецЕсли;
	ИначеЕсли РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана
		ИЛИ РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана Тогда
		ПолноеИмя = Источник.Метаданные().ПолноеИмя();
		ИмяМодуля = ?(РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана,"куфиб_ПроцедурыОбменаДаннымиПоОрганизации","ПроцедурыОбменаДаннымиПоОрганизации");
		ИмяПроцедуры = ?(Найти(ПолноеИмя,"РегистрСведений.")<>0,"ПередЗаписьРегистраСведенийДляОбменаПоОрганизацииПередЗаписью",?(Найти(ПолноеИмя,"РегистрБухгалтерии.")<>0,"ПередЗаписьюРегистраБухгалтерииДляОбменаПоОрганизацииПередЗаписью","ПередЗаписьюРегистраНакопленийДляОбменаПоОрганизацииПередЗаписью"));
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ОтложеннаяРегистрацияВПланеОбменаПоОрганизации(ПолноеИмя) Тогда
			Выполнить(ИмяМодуля+"."+ИмяПроцедуры+"(Источник, Отказ, Замещение)");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Процедура обрабатывает событие ПриКопирование документа
// Перднозначена для очистки общих реквизитов при копировании документа
Процедура ПриКопированиеДокументаОчисткаОбщихРеквизитов(Источник, ОбъектКопирования) Экспорт
	
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокументаСсылка("Автор",Источник) Тогда 
		Источник.Автор = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка")
	КонецЕсли;
	
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокументаСсылка("РучнаяКорректировка",Источник) Тогда 
		Источник.РучнаяКорректировка = Ложь
	КонецЕсли;
	
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокументаСсылка("ДокументОснование",Источник) Тогда 
		Источник.ДокументОснование = Неопределено
	КонецЕсли;
	
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокументаСсылка("СтруктурноеПодразделение",Источник) Тогда 
		Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПоддержкаРаботыСоСтруктурнымиПодразделениями") Тогда 
			Источник.СтруктурноеПодразделение = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура предназначена для заполнения общих реквизитов документов
//	вызывается в обработчиках событий "ПередЗаписью" документов.
Процедура ПередЗаписьюДокументаУстановкаАвтораПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Источник.Автор = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь");
	КонецЕсли;
	
	//Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Ответственный", Источник.Метаданные())
	//   И (НЕ ЗначениеЗаполнено(Источник.Ответственный)) Тогда
	//	Источник.Ответственный = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь");
	//КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюДокументаУстановкаАвтораПередЗаписью

//Функция НеобходимоОбновлениеИнформационнойБазы() Экспорт
//	ВерсияМетаданных 	= фин_ОбщегоНазначенияСервер.ВерсияМетаданных();
//	ВерсияДанных 		= ВерсияИБ("БюджетированиеПредприятия");
//		
//	Если ВерсияМетаданных=ВерсияДанных Тогда
//		Возврат "НеТребуется";
//	КонецЕсли;
//	
//	// Проверка наличия прав для обновления информационной базы.
//	Если НЕ ОбновлениеИнформационнойБазыСлужебный.ЕстьПраваНаОбновлениеИнформационнойБазы() ИЛИ НЕ РольДоступна("фин_АдминистраторПодсистемыБюджетированиеИСогласование") Тогда
//		Возврат "НетПрав";
//	КонецЕсли;
//	
//	Возврат "Требуется";
//КонецФункции

Функция ВерсияИБ(ИмяКонфигурации="") Экспорт
	РежимИнтеграции = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если НЕ ЗначениеЗаполнено(РежимИнтеграции) Тогда
		Возврат "0.0.0.0";
	ИначеЕсли РежимИнтеграции = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный Тогда 
		Возврат Вычислить("ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(Метаданные.Имя)");
	ИначеЕсли РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 ИЛИ РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 Тогда 
		Возврат Вычислить("ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(""БюджетированиеПредприятия"")");
	Иначе
		Возврат Константы["НомерВерсииКонфигурации"].Получить();	
	КонецЕсли;
	
КонецФункции

Процедура ВыполнитьНазначаемуюКомандуНаСервере(Объект, ИмяЭлемента, РезультатВыполнения) Экспорт
	РежимИнтеграции = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0
		ИЛИ РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 
		ИЛИ РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный Тогда 
		
		Выполнить("ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(Объект, ИмяЭлемента, РезультатВыполнения)");
		
	КонецЕсли;
КонецПроцедуры

// Позволяет определить есть ли среди реквизитов табличной части документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//  ИмяТабЧасти  - строковое имя табличной части документа, среди реквизитов которого производится поиск
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабЧасти) Экспорт


	ТабЧасть = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти);

	Если ТабЧасть = Неопределено Тогда // Нет такой таб. части в документе
		Возврат Ложь;

	Иначе
		Возврат НЕ (ТабЧасть.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

	КонецЕсли;


КонецФункции // ЕстьРеквизитТабЧастиДокумента()

#КонецОбласти
