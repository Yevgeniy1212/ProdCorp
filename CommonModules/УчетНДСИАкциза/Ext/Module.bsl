// Функция возвращает ставку Акциза
//
// Параметры:
//  СтавкаАкциза - СправочникСсылка.СтавкиАкциза, элемент справочника, для которого необходимо получить
//  			числовое значение ставки
//
// Возвращаемое значение:
//	Числовое значение ставки Акциза.
//
Функция ПолучитьСтавкуАкциза(СтавкаАкциза) Экспорт
	
	ЗначениеСтавки = 0;	
	Если ТипЗнч(СтавкаАкциза) = Тип("СправочникСсылка.СтавкиАкциза") Тогда		
		ЗначениеСтавки = СтавкаАкциза.Ставка;
	КонецЕсли;
	
	Возврат ЗначениеСтавки;
	
КонецФункции // ПолучитьСтавкуНДС()

// Функция возвращает ставку НДС
//
// Параметры:
//  СтавкаНДС - СправочникСсылка.СтавкиНДС, элемент справочника, для которого необходимо получить
//  			числовое значение ставки
//
// Возвращаемое значение:
//	Числовое значение ставки НДС.
//
Функция ПолучитьСтавкуНДС(СтавкаНДС) Экспорт
	
	ЗначениеСтавки = 0;	
	Если ТипЗнч(СтавкаНДС) = Тип("СправочникСсылка.СтавкиНДС") Тогда		
		ЗначениеСтавки = СтавкаНДС.Ставка;
	КонецЕсли;
	
	Возврат ЗначениеСтавки;
	
КонецФункции // ПолучитьСтавкуНДС()

// Функция возвращает Вид НДС номенклатуры в операциях импорта
//
// Параметры:
//  Нмоенклатура - СправочникСсылка.Номенклатура, элемент справочника, для которого необходимо получить
//  			Вид НДС
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ВидыНДС
//                            
Функция ПолучитьВидНДСПриИмпорте(Номенклатура) Экспорт
	
	ЗначениеПоУмолчанию = Перечисления.ВидыНДС.НДС;
	
	Если ТипЗнч(Номенклатура)= Тип("СправочникСсылка.Номенклатура") и ЗначениеЗаполнено(Номенклатура.ВидНДСПриИмпорте) Тогда
		ЗначениеПоУмолчанию = Номенклатура.ВидНДСПриИмпорте;
	КонецЕсли;
	
	Возврат	ЗначениеПоУмолчанию;
КонецФункции //ПолучитьВидНДСПриИмпорте

// Функция производит поиск счета-фактуры (полученного или выданного), у которого в качестве документа-основания указана
// переданная ссылка.
//
// Параметры:
//  ДокументСсылка  - ссылка на документ, для которого надо найти подчиненный документ,
//  ВидСчетаФактуры - строка, вид документа, по умолчанию "СчетФактураВыданный"
//  Отбор 			- структура с именами и значениями реквизитов СФ для дополнительного отбора
//	
// Возвращаемое значение:
//  Если нашли, то возвращаем ссылку, не нашли - Неопределено
//
Функция НайтиПодчиненныйСчетФактуру(Знач ДокументСсылка, ВидДокумента = "СчетФактураВыданный", Отбор = Неопределено, МетаданныеОснования = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено;
	Иначе
		Если МетаданныеОснования = Неопределено Тогда
			МетаданныеОснования = ДокументСсылка.Метаданные();
		КонецЕсли; 		
		
	КонецЕсли;
	
	НайденныйДокумент = Неопределено;

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СФ.Ссылка,
	|	СФ.Ссылка.МоментВремени КАК МоментВремениСчетаФактуры,
	|	СФ.Ссылка.ПометкаУдаления КАК ПометкаУдаленияСчетаФактуры,
	|	ВЫБОР КОГДА СФ.Ссылка.ВидСчетаФактуры = Значение(Перечисление.ВидыСчетовФактур.Исправленный) Тогда 1 Иначе 0 Конец КАК ПриоритетВидаСчетаФактуры
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СФ
	|ГДЕ
	|	СФ.ДокументОснование = &ДокументСсылка";
	
	Если не ВидДокумента = "СчетФактураВыданный" Тогда
		Запрос.Текст = СтрЗаменитЬ(Запрос.Текст,"СчетФактураВыданный",ВидДокумента);
	КонецЕсли; 
		
	Если не Отбор = Неопределено Тогда
		Для каждого ЭлементОтбора Из Отбор Цикл
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Булево") Тогда
			
				Запрос.Текст = Запрос.Текст + "
					|	И "+?(ЭлементОтбора.Значение," "," НЕ ")+" Ссылка."+ЭлементОтбора.Ключ;
			Иначе
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Запрос.Текст = Запрос.Текст + "
					|	И Ссылка."+ЭлементОтбора.Ключ+" = &"+ЭлементОтбора.Ключ;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	СФ.Ссылка.ПометкаУдаления,
	|	СФ.Ссылка.Проведен УБЫВ,
	|	СФ.Ссылка.Дата";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаЗапроса
	
КонецФункции // НайтиПодчиненныйСчетФактуру

// Выполняет общие для всех документов действия связанные с пометкой на удаление
// счета-фактуры при удалении документа, являющегося основание данного счета-фактуры.
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура СинхронизацияПометкиНаУдалениеУСчетаФактуры(ДокументОбъект, ВидСчетаФактуры = "СчетФактураВыданный") Экспорт
	
	Если ДокументОбъект.ПометкаУдаления <> ДокументОбъект.Ссылка.ПометкаУдаления Тогда
		
		// Произошло изменение пометки на удаление
		// Попытаемся найти счет-фактуру
		СтруктураОтбора = Новый Структура("ПометкаУдаления", не ДокументОбъект.ПометкаУдаления);
		СписокСчетФактур = НайтиПодчиненныйСчетФактуру(ДокументОбъект.Ссылка, ВидСчетаФактуры, СтруктураОтбора, ДокументОбъект.Ссылка);
		Если СписокСчетФактур = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Изменения пометки удаления необходимо соблюдать порядок удаления/отмены удаления документов
		Если ДокументОбъект.ПометкаУдаления Тогда
			// устанавливать пометку удаления нужно начиная с последнего объекта в цепочке. В противном случае сработают процедуры контроля при удалении объекта.
			СписокСчетФактур.Сортировать("ПриоритетВидаСчетаФактуры УБЫВ, МоментВремениСчетаФактуры УБЫВ"); // СФ обычно регистрируются датой начала дня, поэтому добавляем в параметры сортировки момент времени
		Иначе
			// отменять пометку  - начиная с первого объекта в цепочке
			СписокСчетФактур.Сортировать("ПриоритетВидаСчетаФактуры ВОЗР, МоментВремениСчетаФактуры ВОЗР");
		КонецЕсли;		

		НеобходимВыводСообщения = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ВыводитьСообщенияДляСчетовФактур");
		
		Отказ = Ложь;
		Для Каждого Счет Из СписокСчетФактур  Цикл
			
			СчетФактура = Счет.Ссылка;
			
			//Если потерпели неудачу, то необходимо ввести новый документ 
			Если ЗначениеЗаполнено(СчетФактура) Тогда
				Попытка
					// Есть счет-фактура, нужно установить для него пометку удаления
					СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
					Если ДокументОбъект.ПометкаУдаления Тогда
						// Если в счете-фаткуре несколько оснований, счет-фактура не помечается на удаление,
						// а очищается ссылка на текущее основание.
						МетаданныеДокумента = СчетФактураОбъект.Метаданные();
						
						Если НЕ МетаданныеДокумента.ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено  
							И СчетФактураОбъект.ДокументыОснования.Количество() > СчетФактураОбъект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование",ДокументОбъект.Ссылка)).Количество() Тогда
							
							СтрокиКУдалению = СчетФактураОбъект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование",ДокументОбъект.Ссылка));
							Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
								СчетФактураОбъект.ДокументыОснования.Удалить(СтрокаКУдалению);
							КонецЦикла;
							СчетФактураОбъект.ДокументОснование = СчетФактураОбъект.ДокументыОснования[0].ДокументОснование;
							//Если счет-фактура подтверждена документами основания, тогда нужно перезаполнить документ
							Если СчетФактураОбъект.ПодтвержденДокументамиОтгрузки Тогда
								//очитсим все табличные части
								ОчиститьТабЧасти(СчетФактураОбъект);
								Для Каждого ДокОснование Из СчетФактураОбъект.ДокументыОснования Цикл
									ЗаполнитьТабличныеЧастиИзДокументаОснования(СчетФактураОбъект, ДокОснование.ДокументОснование);
								КонецЦикла;
								СчетФактураОбъект.СвернутьТабличныеЧасти();
							КонецЕсли;
							
							СчетФактураОбъект.Записать();
							Если НеобходимВыводСообщения Тогда
								# Если Клиент Тогда
									Сообщить("Из документа «" + СчетФактура + "» удалена ссылка на «"+ДокументОбъект+"».");
								# КонецЕсли
							КонецЕсли;
							
							Продолжить;
						КонецЕсли; 
					КонецЕсли; 
					
					СчетФактураОбъект.УстановитьПометкуУдаления(ДокументОбъект.ПометкаУдаления);
					Если НеобходимВыводСообщения Тогда
						# Если Клиент Тогда
							Если ДокументОбъект.ПометкаУдаления Тогда
								Сообщить("Документ «" + СчетФактура + "» помечен на удаление.")
							Иначе
								Сообщить("У документа «" + СчетФактура + "» снята пометка на удаление.")
							КонецЕсли;
						# КонецЕсли
					КонецЕсли;
					
				Исключение
					Если НеобходимВыводСообщения Тогда
						
						# Если Клиент Тогда
							Если ДокументОбъект.ПометкаУдаления Тогда
								Сообщить("Не удалось установить пометку удаления документа «" + СчетФактура + "».")
							Иначе
								Сообщить("Не удалось снять пометку удаления документа «" + СчетФактура + "».")
							КонецЕсли;
						# КонецЕсли
					КонецЕсли;
					Отказ = Истина;
				КонецПопытки;
				
				Если Отказ Тогда
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла; 	
	КонецЕсли;
		
КонецПроцедуры // СинхронизацияПометкиНаУдалениеУСчетаФактуры()

// Выполняет общие для всех документов действия связанные с пометкой проведения
// счета-фактуры при проведении/отмене проведения документа, являющегося основание данного счета-фактуры.
//
// Параметры:
//  ДокументСсылка  - объект документа, 
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура СинхронизацияПризнакаПроведенияУСчетаФактуры(ДокументСсылка, Отказ, Провести  = Истина, ВидСчетаФактуры = "СчетФактураВыданный") Экспорт
	
	// Произошло изменение признака проведения
	// Попытаемся найти счет-фактуру
	НеобходимВыводСообщения = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ВыводитьСообщенияДляСчетовФактур");
	
	// выбираем документы для перепроведения
	СписокСчетФактур = НайтиПодчиненныйСчетФактуру(ДокументСсылка, ВидСчетаФактуры, , ДокументСсылка);	
	
	// Для изменения признака проведения необходимо соблюдать следования документов
	Если НЕ Провести Тогда
		// отменять проведение нужно начиная с последнего объекта в цепочке. В противном случае сработают процедуры контроля при отмене проведения объекта.
		СписокСчетФактур.Сортировать("ПриоритетВидаСчетаФактуры УБЫВ, МоментВремениСчетаФактуры УБЫВ"); // СФ обычно регистрируются датой начала дня, поэтому добавляем в параметры сортировки момент времени
	Иначе
		// проводить  - начиная с первого объекта в цепочке
		СписокСчетФактур.Сортировать("ПриоритетВидаСчетаФактуры ВОЗР, МоментВремениСчетаФактуры ВОЗР");
	КонецЕсли;		
	
	Для Каждого ДокументСчетФактура Из СписокСчетФактур  Цикл			
		Если ЗначениеЗаполнено(ДокументСчетФактура.Ссылка) Тогда
			// Нельзя провести документ, помеченный на удаление
			Если Провести И ДокументСчетФактура.Ссылка.ПометкаУдаления Тогда
				Если НеобходимВыводСообщения Тогда
				# Если Клиент Тогда
					Сообщить("Подчиненный документ " + СокрЛП(ДокументСчетФактура.Ссылка) + " помечен на удаление. Его обработка не производится ...");
				# КонецЕсли
				КонецЕсли;
				Продолжить;
			КонецЕсли;	
			
			// Пытаемся синхронизировать режимы проведения
			ОбъектСчетФактура = ДокументСчетФактура.Ссылка.ПолучитьОбъект();
			РежимПроведения = ?(Провести, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.ОтменаПроведения);
			Попытка
				ОбъектСчетФактура.Записать(РежимПроведения);
				Если НеобходимВыводСообщения Тогда
					# Если Клиент Тогда
						Сообщить(?(Провести,"Проведен подчиненный документ ","Отменено проведение подчиненного документа ") + СокрЛП(ОбъектСчетФактура));
					# КонецЕсли
				КонецЕсли;
				
			Исключение
				
				Если НеобходимВыводСообщения Тогда
					# Если Клиент Тогда
						Сообщить("Документ " + СокрЛП(ДокументСсылка) + "." + Символы.ПС + "При " + ?(Провести, "проведении", "отмене проведения") + " подчиненного документа " + СокрЛП(ОбъектСчетФактура) + " возникли ошибки. Документ не может быть записан ....");
					# КонецЕсли
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),Отказ);
			КонецПопытки;				
			
			Если Отказ Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;			 	
КонецПроцедуры	// СинхронизацияПризнакаПроведенияУСчетаФактуры

// Функция возвращает метод отнесения НДС в зачет для выбранной организации
//
// Параметры:
//  Организация - СправочникСсылка.Организации, элемент справочника, для которого необходимо получить
//  			метод отнесения НДС в зачет
//
// Возвращаемое значение:
//	ПеречислениеСсылка.МетодыОтнесенияНДСВЗачет.Пропорциональный (в том числе, если метод не 
//																  определен в учетной политике)
//  ПеречислениеСсылка.МетодыОтнесенияНДСВЗачет.Раздельный
Функция ПолучитьМетодОтнесенияНДСВЗачет(Организация, Дата) Экспорт
	
	УчетнаяПолитикаНеЗадана	= Ложь;
	
	// Если значение не задано
	// по умолчанию присваиваем значение Истина
	МетодОтнесенияНДСВЗачет	= Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный;
	мУчетнаяПолитикаНУ		= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация, "Нал");	
	
	Если мУчетнаяПолитикаНУ.Свойство("НДСМетодОтнесенияВЗачет")
	   И ЗначениеЗаполнено(мУчетнаяПолитикаНУ.НДСМетодОтнесенияВЗачет) Тогда
		МетодОтнесенияНДСВЗачет = мУчетнаяПолитикаНУ.НДСМетодОтнесенияВЗачет;
	КонецЕсли;		
	
	Возврат МетодОтнесенияНДСВЗачет;
	
КонецФункции // ПолучитьМетодОтнесенияНДСВЗачет()

// Функция возвращает периодичность отнесения НДС в зачет для выбранной организации
//
// Параметры:
//  Организация - СправочникСсылка.Организации, элемент справочника, для которого необходимо получить
//  			метод отнесения НДС в зачет
//
Функция ПолучитьПериодОтнесенияНДСВЗачет(Организация, Дата) экспорт
	
	УчетнаяПолитикаНеЗадана		= Ложь;
	
	// Если значение не задано
	// по умолчанию присваиваем значение Истина
	ПериодОтнесенияНДСВЗачет	= Перечисления.Периодичность.Месяц;
	мУчетнаяПолитикаНУ			= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация, "Нал");	
	
	Если мУчетнаяПолитикаНУ.Свойство("НДСНалоговыйПериод")
	   И ЗначениеЗаполнено(мУчетнаяПолитикаНУ.НДСНалоговыйПериод) Тогда
		ПериодОтнесенияНДСВЗачет = мУчетнаяПолитикаНУ.НДСНалоговыйПериод;
	КонецЕсли;		
	
	Возврат ПериодОтнесенияНДСВЗачет;
	
КонецФункции // ПолучитьПериодОтнесенияНДСВЗачет()
 
// Рассчитываем сумму документа со всеми налогами в разрезе ставок НДС
//
// Параметры: 
//  ДокументОбъект    - ссылка документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//
// Возвращаемое значение:
//  ТаблицаЗначений 
//		Колонки:
//			Сумма		- Сумма документа со всеми налогами
//			СтавкаНДС	- ПеречислениеСсылка.СтавкиНДС
//			СуммаНДС	- Сумма НДС по ставке
//
Функция ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(ДокументОбъект, ИмяТабличнойЧасти = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	СуммаДокументаПоСтавкам = Новый ТаблицаЗначений();
	СуммаДокументаПоСтавкам.Колонки.Добавить("Сумма",     ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	СуммаДокументаПоСтавкам.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	СуммаДокументаПоСтавкам.Колонки.Добавить("СуммаНДС",  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	Если НЕ (ИмяТабличнойЧасти = Неопределено) Тогда

		Для каждого СтрокаДокумента Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				СуммаДокумента = СтрокаДокумента.Сумма;
			Иначе
				СуммаДокумента = 0;
			КонецЕсли; 

			СуммаНДС  = 0;
			СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();

			Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
			   И ДокументОбъект.УчитыватьНДС Тогда

				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
					СуммаНДС = СтрокаДокумента.СуммаНДС;
				КонецЕсли;

				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
					СтавкаНДС = СтрокаДокумента.СтавкаНДС;
				КонецЕсли;

			КонецЕсли;

			Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
			   И Не ДокументОбъект.СуммаВключаетНДС Тогда

				СуммаДокумента = СуммаДокумента + СуммаНДС;

			КонецЕсли;

			СтрокаТаблицыИтогов = СуммаДокументаПоСтавкам.Найти(СтавкаНДС, "СтавкаНДС");

			Если СтрокаТаблицыИтогов = Неопределено тогда
				СтрокаТаблицыИтогов = СуммаДокументаПоСтавкам.Добавить();
				СтрокаТаблицыИтогов.СтавкаНДС = СтавкаНДС;
			КонецЕсли;

			СтрокаТаблицыИтогов.Сумма    = СтрокаТаблицыИтогов.Сумма    + СуммаДокумента;
			СтрокаТаблицыИтогов.СуммаНДС = СтрокаТаблицыИтогов.СуммаНДС + СуммаНДС;

		КонецЦикла;

	Иначе

		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл

			ИмяТабличнойЧасти = ТЧОбъекта.Имя;

			Для каждого СтрокаДокумента  Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
					СуммаДокумента = СтрокаДокумента.Сумма;
				Иначе
					СуммаДокумента = 0;
				КонецЕсли;

				СуммаНДС  = 0;
				СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();

				Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
				   И ДокументОбъект.УчитыватьНДС Тогда

					Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) тогда
						СуммаНДС = СтрокаДокумента.СуммаНДС;
					КонецЕсли;

					Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) тогда
						СтавкаНДС = СтрокаДокумента.СтавкаНДС;
					КонецЕсли;

				КонецЕсли;

				Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
				   И НЕ ДокументОбъект.СуммаВключаетНДС Тогда
					СуммаДокумента = СуммаДокумента+СуммаНДС;
				КонецЕсли;

				СтрокаТаблицыИтогов = СуммаДокументаПоСтавкам.Найти(СтавкаНДС,"СтавкаНДС");

				Если СтрокаТаблицыИтогов = Неопределено Тогда
					СтрокаТаблицыИтогов = СуммаДокументаПоСтавкам.Добавить();
					СтрокаТаблицыИтогов.СтавкаНДС = СтавкаНДС;
				КонецЕсли;

				СтрокаТаблицыИтогов.Сумма    = СтрокаТаблицыИтогов.Сумма    + СуммаДокумента;
				СтрокаТаблицыИтогов.СуммаНДС = СтрокаТаблицыИтогов.СуммаНДС + СуммаНДС;

			КонецЦикла;                                                                
		КонецЦикла;                                                                    
	КонецЕсли;

	СтрокиКУдалению = Новый Массив;

	Для каждого СтрокаТаблицы Из СуммаДокументаПоСтавкам Цикл
	    Если СтрокаТаблицы.Сумма = 0 и СтрокаТаблицы.СуммаНДС = 0  Тогда
			СтрокиКУдалению.Добавить( СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;

	Для НомерСтроки = 1 По СтрокиКУдалению.Количество() Цикл
		СуммаДокументаПоСтавкам.Удалить(СтрокиКУдалению[НомерСтроки-1]);
	КонецЦикла; 

	Возврат СуммаДокументаПоСтавкам;

КонецФункции // УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС()

//////////////////////////////////////////////////////////////////////////
//  ОПЕРАТИВНЫЕ ДВИЖЕНИЯ РЕГИСТРОВ ПОДСИСТЕМЫ НДС
              
Функция ОпределениеНаправленияДвиженияДляДокументаКорректировкиНДС(ВидДокумента, ВидОперации = Неопределено) Экспорт

	НаправлениеДвиженияНДСРасчет	= Перечисления.РасчетыВозврат.Расчеты;
	НаправлениеДвиженияНДСВозврат	= Перечисления.РасчетыВозврат.Возврат;

	ВидыДокументовНДС				= Новый Структура();

	ВидыДокументовНДС.Вставить("ВозвратТоваровОтПокупателя",НаправлениеДвиженияНДСВозврат);	
	ВидыДокументовНДС.Вставить("ВозвратТоваровПоставщику", 	НаправлениеДвиженияНДСВозврат);
	ВидыДокументовНДС.Вставить("ВозвратТоваровПоставщикуИзНТТ", 	НаправлениеДвиженияНДСВозврат);
	ВидыДокументовНДС.Вставить("СписаниеТоваров",			НаправлениеДвиженияНДСВозврат);	
	ВидыДокументовНДС.Вставить("СписаниеОС", 				НаправлениеДвиженияНДСВозврат);
	
	НаправлениеДвиженияНДС			= НаправлениеДвиженияНДСРасчет;	

	Если ВидыДокументовНДС.Свойство(ВидДокумента) Тогда
		НаправлениеДвиженияНДС		= ВидыДокументовНДС[ВидДокумента];		
	КонецЕсли;		
	
	Возврат НаправлениеДвиженияНДС;

КонецФункции // ОпределениеНаправленияДвиженияДляДокументаКорректировкиНДС()
        
Процедура СформироватьДвиженияПоРегиструНДСМетодомЗачета(СтруктураШапкиДокумента, СтрокаДок, Движения, Отказ, ВидРегистра = "НДС") Экспорт
	Если ВидРегистра = "НДС" Тогда
		// формируем движения по отражению начисленного НДС
		СтрокаДвижения = Движения.НДС.Добавить();
		СтрокаДвижения.Период				= СтруктураШапкиДокумента.Дата;
		
		СтрокаДвижения.Налогоплательщик		= СтруктураШапкиДокумента.ПлательщикНДС;
		СтрокаДвижения.Организация			= СтруктураШапкиДокумента.Организация;		
		СтрокаДвижения.СтруктурнаяЕдиница   = СтруктураШапкиДокумента.Организация;		
		
		СтрокаДвижения.ВидОперацииРеализации= Справочники.ВидыРеализации.ИмпортТМЗМетодомЗачета;
		СтрокаДвижения.ВидНалогаНДС			= Перечисления.ВидыНДС.НДСМетодомЗачета;
		СтрокаДвижения.СтавкаНДС 			= СтрокаДок.СтавкаНДС;		
		СтрокаДвижения.Контрагент 			= СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижения.ТМЗ		 			= СтрокаДок.Номенклатура;
		
		Если СтруктураШапкиДокумента.Свойство("НомерГТД")
			И ТипЗнч(СтруктураШапкиДокумента.НомерГТД) = Тип("СправочникСсылка.НомераГТД") Тогда
			
			// Старое поведение, которое было до переноса номеров ГТД
			// в табличные части Товары и ОС в документе ГТДИмпорт.		
			СтрокаДвижения.ГТД = СтруктураШапкиДокумента.НомерГТД;
			
		Иначе
			
			// Новое поведение, необходимое для того, чтобы обеспечить проведение документа ГТДИмпорт,
			// т.к. в документе ГТДИмпорт ссылка на номер ГТД указывается в табличной части.
			СтрокаДвижения.ГТД = СтрокаДок.НомерГТД;
			
		КонецЕсли;
		
		// Отражение включения НДС в стоимость 
		Если СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость")
			И СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
			СтрокаДвижения.СуммаБезНДС 	= СтрокаДок.СуммаБезНДС;
			СтрокаДвижения.СуммаНДС     = 0;	
		Иначе	
			СтрокаДвижения.СуммаБезНДС 	= СтрокаДок.Сумма;
			СтрокаДвижения.СуммаНДС    	= СтрокаДок.НДС;	
		КонецЕсли;	
		СтрокаДвижения.ОборотПоРеализации	= СтрокаДвижения.СуммаБезНДС;	
	КонецЕсли;
	
	Если ВидРегистра = "НДСКВозмещению" Тогда
		// формируем движения по отражению зачетного НДС
		СтрокаДвижения = Движения.НДСКВозмещению.Добавить();
		СтрокаДвижения.Период				= СтруктураШапкиДокумента.Дата;  		
		СтрокаДвижения.Налогоплательщик		= СтруктураШапкиДокумента.ПлательщикНДС;
		СтрокаДвижения.Организация			= СтруктураШапкиДокумента.Организация;		
		СтрокаДвижения.СтруктурнаяЕдиница   = СтруктураШапкиДокумента.Организация;		
		СтрокаДвижения.ВидНалогаНДС			= Перечисления.ВидыНДС.НДСМетодомЗачета;
				
		Если СтруктураШапкиДокумента.Свойство("НомерВходящегоДокумента") Тогда
			СтрокаДвижения.НомерВходящегоДокумента	= СтруктураШапкиДокумента.НомерВходящегоДокумента;
		КонецЕсли;	
		Если СтруктураШапкиДокумента.Свойство("ДатаВходящегоДокумента") Тогда
			СтрокаДвижения.ДатаВходящегоДокумента	= СтруктураШапкиДокумента.ДатаВходящегоДокумента;		
		КонецЕсли;		
		Если СтруктураШапкиДокумента.Свойство("ВидВходящегоДокумента") Тогда
			СтрокаДвижения.ВидВходящегоДокумента   	= СтруктураШапкиДокумента.ВидВходящегоДокумента;
		КонецЕсли;
		
		СтрокаДвижения.ВидОборота				= СтрокаДок.НДСВидОборота;
		СтрокаДвижения.ВидОперацииПоступления	= Справочники.ВидыПоступления.ИмпортТМЗМетодомЗачета;		
		СтрокаДвижения.СтавкаНДС				= СтрокаДок.СтавкаНДС;			
		СтрокаДвижения.Контрагент 				= СтруктураШапкиДокумента.Контрагент;		
		СтрокаДвижения.ТМЗ 						= СтрокаДок.Номенклатура;
		
		// Отражение включения НДС в стоимость 
		Если СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость")
		   И СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
			СтрокаДвижения.СуммаБезНДС 	= СтрокаДок.СуммаБезНДС;
			СтрокаДвижения.СуммаНДС     = 0;	
		Иначе	
			СтрокаДвижения.СуммаБезНДС 	= СтрокаДок.Сумма;
			СтрокаДвижения.СуммаНДС    	= СтрокаДок.НДС;	
		КонецЕсли;
		
		СтрокаДвижения.УплаченныйНДС	= СтрокаДок.НДС;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструНДССИзмененнымСрокомУплаты(СтруктураШапкиДокумента, СтрокаДок, Движения, Отказ) Экспорт
	
	// формируем движения по отражению НДС, с измененным сроком уплаты в специализированном регистре
	СтрокаДвижения = Движения.НДССИзмененнымСрокомУплаты.Добавить();
	СтрокаДвижения.Период 					= СтруктураШапкиДокумента.Дата;
	
	СтрокаДвижения.Налогоплательщик		= СтруктураШапкиДокумента.ПлательщикНДС;
	СтрокаДвижения.Организация			= СтруктураШапкиДокумента.Организация;		
	СтрокаДвижения.СтруктурнаяЕдиница   = СтруктураШапкиДокумента.Организация;		
		
	СтрокаДвижения.ВидОперацииПоступления 	= СтрокаДок.НДСВидПоступления;	
	СтрокаДвижения.ВидНалогаНДС				= Перечисления.ВидыНДС.НДССИзменениемСрокаУплаты;
	
	Если СтруктураШапкиДокумента.Свойство("НомерГТД")
		И ТипЗнч(СтруктураШапкиДокумента.НомерГТД) = Тип("СправочникСсылка.НомераГТД") Тогда
		
		// Старое поведение, которое было до переноса номеров ГТД
		// в табличные части Товары и ОС в документе ГТДИмпорт.		
		СтрокаДвижения.ГТД = СтруктураШапкиДокумента.НомерГТД;
		
	Иначе
		
		// Новое поведение, необходимое для того, чтобы обеспечить проведение документа ГТДИмпорт,
		// т.к. в документе ГТДИмпорт ссылка на номер ГТД указывается в табличной части.
		СтрокаДвижения.ГТД = СтрокаДок.НомерГТД;
		
	КонецЕсли;
	
	СтрокаДвижения.СрокПлатежа				= СтрокаДок.НДССрокПлатежа;	
	СтрокаДвижения.Контрагент 				= СтруктурашапкиДокумента.Контрагент;
	СтрокаДвижения.Договор 					= СтрокаДок.ДоговорКонтрагента;
	СтрокаДвижения.СчетУчетаНДС				= СтрокаДок.СчетУчетаНДС;
	СтрокаДвижения.СуммаНДС					= СтрокаДок.НДС;
	
	СтрокаДвижения.СчетУчетаРасчетовСКонтрагентом 	= СтрокаДок.СчетУчетаРасчетовСКонтрагентом;		
	
КонецПроцедуры

// Процедура вызывается из модулей документов прихода.
//  Основная задача - отразить поступление ТМЗ или затрат в подсистеме учета НДС,
//  а именно в регистре: "НДСКВозмещению"
Процедура СформироватьДвиженияПоРегиструНДСКВозмещению(	СтруктураШапкиДокумента, ТаблицаПредъявленногоНДС, Движения, Отказ, ТаблицаПоУчастникамСовместнойДеятельности = Неопределено) Экспорт

	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(	СтруктураШапкиДокумента.Дата, Отказ, 
															СтруктураШапкиДокумента.Организация, "Нал");
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УчитыватьНДСКВозмещению = Истина;

	Если СтруктураШапкиДокумента.Свойство("УчитыватьНДС") Тогда
		УчитыватьНДСКВозмещению = СтруктураШапкиДокумента.УчитыватьНДС;
	КонецЕсли;

	Если НЕ УчитыватьНДСКВозмещению Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьВидНДС 			= НЕ  (ТаблицаПредъявленногоНДС.Колонки.Найти("ВидНДС") = Неопределено);
	ЕстьСчетФактура  	= НЕ  (ТаблицаПредъявленногоНДС.Колонки.Найти("СчетФактура") = Неопределено);
	
	ТаблицаДвижений_НДСКВозмещению	= Движения.НДСКВозмещению.Выгрузить();
	ТаблицаДвижений_НДСКВозмещению.Очистить();
	
	Если ТаблицаПоУчастникамСовместнойДеятельности <> Неопределено Тогда 
		ТаблицаПредъявленногоНДС = СформироватьТаблицуНДСПоУчастникамСовместнойДеятельности(СтруктураШапкиДокумента, ТаблицаПредъявленногоНДС, ТаблицаПоУчастникамСовместнойДеятельности, Ложь, Ложь); 	
	КонецЕсли;
	
	ЕстьУчастникСовместнойДеятельности = Не(ТаблицаПредъявленногоНДС.Колонки.Найти("УчастникСовместнойДеятельности") = Неопределено); 
	
	Для Каждого СтрокаДок Из ТаблицаПредъявленногоНДС Цикл
		ВидНДС = ?(ЕстьВидНДС, СтрокаДок.ВидНДС, Перечисления.ВидыНДС.НДС);
		// НДС с измененным сроком уплаты
		Если ВидНДС = Перечисления.ВидыНДС.НДССИзменениемСрокаУплаты Тогда
			СформироватьДвиженияПоРегиструНДССИзмененнымСрокомУплаты(СтруктураШапкиДокумента, СтрокаДок, Движения, Отказ);
			Продолжить;
		КонецЕсли;	
		
		Если (ТипЗнч(СтрокаДок.СчетУчетаЦенности) = Тип("ПланСчетовСсылка.Типовой"))
		   И СтрокаДок.СчетУчетаЦенности.Забалансовый Тогда
			// Пропускаем забалансовые поступления
			Продолжить;
		КонецЕсли;

		СтрокаДвижения							= ТаблицаДвижений_НДСКВозмещению.Добавить();		     		
		
		СтрокаДвижения.Налогоплательщик			= СтруктураШапкиДокумента.ПлательщикНДС;
		СтрокаДвижения.Организация				= СтруктураШапкиДокумента.Организация;		
		СтрокаДвижения.СтруктурнаяЕдиница   	= СтруктураШапкиДокумента.Организация;
		
		Если СтруктураШапкиДокумента.Свойство("НомерВходящегоДокумента") Тогда
			СтрокаДвижения.НомерВходящегоДокумента	= СтруктураШапкиДокумента.НомерВходящегоДокумента;
		КонецЕсли;	
		Если СтруктураШапкиДокумента.Свойство("ДатаВходящегоДокумента") Тогда
			СтрокаДвижения.ДатаВходящегоДокумента	= СтруктураШапкиДокумента.ДатаВходящегоДокумента;		
		КонецЕсли;		
		Если СтруктураШапкиДокумента.Свойство("ВидВходящегоДокумента") Тогда
			СтрокаДвижения.ВидВходящегоДокумента   	= СтруктураШапкиДокумента.ВидВходящегоДокумента;
		КонецЕсли;
				
		СтрокаДвижения.ВидОборота				= СтрокаДок.НДСВидОборота;
		СтрокаДвижения.ВидОперацииПоступления	= СтрокаДок.НДСВидПоступления;
		СтрокаДвижения.ВидНалогаНДС				= ВидНДС;
		СтрокаДвижения.СтавкаНДС				= СтрокаДок.СтавкаНДС;		
		
		Если (СтруктураШапкиДокумента.ВидДокумента = "АвансовыйОтчет") Тогда
			СтрокаДвижения.Контрагент			= СтрокаДок.Контрагент;      			
			Если ЕстьСчетФактура Тогда
				СтрокаДвижения.СчетФактура		= СтрокаДок.СчетФактура;
			КонецЕсли;
			СтрокаДвижения.НомерВходящегоДокумента	= СтрокаДок.НомерВходящегоДокумента;
			СтрокаДвижения.ДатаВходящегоДокумента	= СтрокаДок.ДатаВходящегоДокумента;		
			СтрокаДвижения.ВидВходящегоДокумента   	= СтрокаДок.ВидВходящегоДокумента;
		ИначеЕсли ЕстьУчастникСовместнойДеятельности Тогда 
			СтрокаДвижения.Контрагент = СтрокаДок.УчастникСовместнойДеятельности;
		Иначе			
			СтрокаДвижения.Контрагент = СтруктураШапкиДокумента.Контрагент;
		КонецЕсли;
		
		СтрокаДвижения.ТМЗ 						= СтрокаДок.Номенклатура;
		
		// Отражение включения НДС в стоимость 
		Если СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость")
		   И СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
			СтрокаДвижения.СуммаБезНДС 	= СтрокаДок.СуммаБезНДС;
			СтрокаДвижения.СуммаНДС     = 0;	
		Иначе	
			СтрокаДвижения.СуммаБезНДС 	= СтрокаДок.Сумма;
			СтрокаДвижения.СуммаНДС    	= СтрокаДок.НДС;	
		КонецЕсли;
		
		СтрокаДвижения.УплаченныйНДС	= СтрокаДок.НДС;
		///////////////////////////////////////////////////////////////////////////////////////////
		// Сложные случаи учета НДС
		
		// Метод зачета
		Если СтрокаДвижения.ВидНалогаНДС = Перечисления.ВидыНДС.НДСМетодомЗачета Тогда
			СформироватьДвиженияПоРегиструНДСМетодомЗачета(СтруктураШапкиДокумента, СтрокаДок, Движения, Отказ, "НДС");
		КонецЕсли;	
						
		//// НДС за нерезидента
		//Если СтрокаДвижения.ВидНалогаНДС = Перечисления.ВидыНДС.НДСЗаНерезидента Тогда
		//	
		//КонецЕсли;			
		
	КонецЦикла;	
	
	Если ТаблицаДвижений_НДСКВозмещению.Количество() > 0 Тогда
		Движения.НДСКВозмещению.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСКВозмещению.мТаблицаДвижений = ТаблицаДвижений_НДСКВозмещению;
		Движения.НДСКВозмещению.ДобавитьДвижение();		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНДСКВозмещению()

// Процедура вызывается из модулей документов по реализации.
//  Основная задача - отразить реализацию товаров, работ, услуг в подсистеме учета НДС,
//  а именно в регистре: "НДС"
Процедура СформироватьДвиженияПоРегиструНДС(СтруктураШапкиДокумента, ТаблицаНДС, ИдТабЧасти, Движения, Отказ, ТаблицаПоУчастникамСовместнойДеятельности = Неопределено) Экспорт

	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(	СтруктураШапкиДокумента.Дата, Отказ, 
															СтруктураШапкиДокумента.Организация, "Нал");
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УчитыватьНДС = Истина;

	Если СтруктураШапкиДокумента.Свойство("УчитыватьНДС") Тогда
		УчитыватьНДС = СтруктураШапкиДокумента.УчитыватьНДС;
	КонецЕсли;

	Если НЕ УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьГТД 	= СтруктураШапкиДокумента.Свойство("НомерГТД");
	ЕстьВидНДС 	= Не(ТаблицаНДС.Колонки.Найти("ВидНДС") = Неопределено);
	ЕстьАкциз  	= Не(ТаблицаНДС.Колонки.Найти("Акциз") = Неопределено);
	ЕстьКонтрагент 			= СтруктураШапкиДокумента.Свойство("Контрагент"); // в УТ есть документы без контрагента в шапке
	ЕстьОборотПоРеализации 	= Не(ТаблицаНДС.Колонки.Найти("ОборотПоРеализации") = Неопределено);
    
	ТаблицаДвижений_НДС	= Движения.НДС.Выгрузить();
	ТаблицаДвижений_НДС.Очистить();
	
	Если ТаблицаПоУчастникамСовместнойДеятельности <> Неопределено Тогда 
		ТаблицаНДС = СформироватьТаблицуНДСПоУчастникамСовместнойДеятельности(СтруктураШапкиДокумента, ТаблицаНДС, ТаблицаПоУчастникамСовместнойДеятельности, ЕстьОборотПоРеализации, ЕстьАкциз); 
	КонецЕсли;
	
	ЕстьУчастникСовместнойДеятельности = Не(ТаблицаНДС.Колонки.Найти("УчастникСовместнойДеятельности") = Неопределено); 
	
	Для Каждого СтрокаДок Из ТаблицаНДС Цикл
		
		Если (ТипЗнч(СтрокаДок.СчетУчетаЦенности) = Тип("ПланСчетовСсылка.Типовой"))
		   И СтрокаДок.СчетУчетаЦенности.Забалансовый Тогда
			// Пропускаем забалансовые поступления
			Продолжить;
		КонецЕсли;

		СтрокаДвижения						= ТаблицаДвижений_НДС.Добавить();		     		
		
		СтрокаДвижения.Налогоплательщик		= СтруктураШапкиДокумента.ПлательщикНДС;
		СтрокаДвижения.Организация			= СтруктураШапкиДокумента.Организация;		
		СтрокаДвижения.СтруктурнаяЕдиница   = СтруктураШапкиДокумента.Организация;		
		
		СтрокаДвижения.ВидОперацииРеализации= СтрокаДок.НДСВидОперацииРеализации;		
		
		Если ЕстьВидНДС Тогда
			СтрокаДвижения.ВидНалогаНДС		= СтрокаДок.ВидНДС;
		Иначе
			СтрокаДвижения.ВидНалогаНДС		= Перечисления.ВидыНДС.НДС;
		КонецЕсли;
		
		СтрокаДвижения.СтавкаНДС 			= СтрокаДок.СтавкаНДС;		
		
		Если ЕстьУчастникСовместнойДеятельности Тогда 
			СтрокаДвижения.Контрагент = СтрокаДок.УчастникСовместнойДеятельности;
		ИначеЕсли ЕстьКонтрагент Тогда
			СтрокаДвижения.Контрагент = СтруктураШапкиДокумента.Контрагент;
		КонецЕсли;
		
		СтрокаДвижения.ТМЗ		 			= СтрокаДок.Номенклатура;
		
		Если ЕстьГТД  Тогда			
			СтрокаДвижения.ГТД	 			= СтрокаДок.НомерГТД;			
		КонецЕсли;
		
		// Включаем акциз в сумму, так как акциз входит в базу обложения НДС.
		СуммаБезНДС = СтрокаДок.СуммаБезНДС + ?(ЕстьАкциз, СтрокаДок.Акциз, 0);		
		
		Если ЕстьОборотПоРеализации Тогда
			СуммаОборотаПоРеализации 			= СтрокаДок.ОборотПоРеализации;
		Иначе	
			СуммаОборотаПоРеализации 			= СуммаБезНДС;
		КонецЕсли;
		
		СтрокаДвижения.СуммаБезНДС 			= СуммаБезНДС;
		СтрокаДвижения.СуммаНДС    			= СтрокаДок.НДС;			
		СтрокаДвижения.ОборотПоРеализации	= СуммаОборотаПоРеализации;
		
		// Метод зачета
		Если СтрокаДвижения.ВидНалогаНДС = Перечисления.ВидыНДС.НДСМетодомЗачета Тогда
			СформироватьДвиженияПоРегиструНДСМетодомЗачета(СтруктураШапкиДокумента, СтрокаДок, Движения, Отказ, "НДСКВозмещению");
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если ТаблицаДвижений_НДС.Количество() > 0 Тогда
		Движения.НДС.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДС.мТаблицаДвижений = ТаблицаДвижений_НДС;
		Движения.НДС.ДобавитьДвижение();		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНДС()

// Процедура вызывается из модулей документов корректировки поступления ТМЗ.
//  Основная задача - отразить возврат ТМЗ и прочие корректировки в подсистеме учета НДС,
//  а именно в регистре: "КорректировкаНДСКВозмещению"
Процедура СформироватьДвиженияПоРегиструКорректировкиНДСКВозмещению(СтруктураШапкиДокумента, 
																	ТаблицаПредъявленногоНДС, ИдТабЧасти, 
																	Движения, Отказ, ТаблицаПоУчастникамСовместнойДеятельности = Неопределено) Экспорт

	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(	СтруктураШапкиДокумента.Дата, Отказ, 
															СтруктураШапкиДокумента.Организация, "Нал");
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	УчитыватьНДСКВозмещению = Истина;

	Если СтруктураШапкиДокумента.Свойство("УчитыватьНДС") Тогда
		УчитыватьНДСКВозмещению = СтруктураШапкиДокумента.УчитыватьНДС;
	КонецЕсли;

	Если НЕ УчитыватьНДСКВозмещению Тогда
		Возврат;
	КонецЕсли;
	
	ВидДокумента = СтруктураШапкиДокумента.ВидДокумента;
	НаправлениеДвиженияКорректировки = ОпределениеНаправленияДвиженияДляДокументаКорректировкиНДС(ВидДокумента);
	
	ТаблицаДвижений_КорректировкаНДСКВозмещению	= Движения.КорректировкаНДСКВозмещению.Выгрузить();
	ТаблицаДвижений_КорректировкаНДСКВозмещению.Очистить();
	
	Если ТаблицаПоУчастникамСовместнойДеятельности <> Неопределено Тогда 
		ТаблицаПредъявленногоНДС = СформироватьТаблицуНДСПоУчастникамСовместнойДеятельности(СтруктураШапкиДокумента, ТаблицаПредъявленногоНДС, ТаблицаПоУчастникамСовместнойДеятельности, Ложь, Ложь); 
	КонецЕсли;
	
	ЕстьУчастникСовместнойДеятельности = Не(ТаблицаПредъявленногоНДС.Колонки.Найти("УчастникСовместнойДеятельности") = Неопределено); 
	
	Для Каждого СтрокаДок Из ТаблицаПредъявленногоНДС Цикл
		
		
		Если (ТипЗнч(СтрокаДок.СчетУчетаЦенности) = Тип("ПланСчетовСсылка.Типовой"))
		   И СтрокаДок.СчетУчетаЦенности.Забалансовый Тогда
			// Пропускаем забалансовые поступления
			Продолжить;
		КонецЕсли;

		СтрокаДвижения							= ТаблицаДвижений_КорректировкаНДСКВозмещению.Добавить();		     		
		СтрокаДвижения.Налогоплательщик			= СтруктураШапкиДокумента.ПлательщикНДС;
		СтрокаДвижения.Организация				= СтруктураШапкиДокумента.Организация;		
		СтрокаДвижения.СтруктурнаяЕдиница   	= СтруктураШапкиДокумента.Организация;
		
		Если СтруктураШапкиДокумента.Свойство("НомерВходящегоДокумента") Тогда
			СтрокаДвижения.НомерВходящегоДокумента	= СтруктураШапкиДокумента.НомерВходящегоДокумента;
		КонецЕсли;	
		Если СтруктураШапкиДокумента.Свойство("ДатаВходящегоДокумента") Тогда
			СтрокаДвижения.ДатаВходящегоДокумента	= СтруктураШапкиДокумента.ДатаВходящегоДокумента;		
		КонецЕсли;		
		Если СтруктураШапкиДокумента.Свойство("ВидВходящегоДокумента") Тогда
			СтрокаДвижения.ВидВходящегоДокумента   	= СтруктураШапкиДокумента.ВидВходящегоДокумента;
		КонецЕсли;

	
		СтрокаДвижения.ВидОперацииКорректировки	= СтрокаДок.НДСВидПоступления;
		СтрокаДвижения.ВидНалогаНДС				= Перечисления.ВидыНДС.НДС;		
		СтрокаДвижения.ВидОборота				= СтрокаДок.НДСВидОборота;		
		
		Если ЕстьУчастникСовместнойДеятельности Тогда 
			СтрокаДвижения.Контрагент = СтрокаДок.УчастникСовместнойДеятельности;
		ИначеЕсли СтруктураШапкиДокумента.Свойство("Контрагент") Тогда
			СтрокаДвижения.Контрагент = СтруктураШапкиДокумента.Контрагент;
		КонецЕсли;
		СтрокаДвижения.ТМЗ						= СтрокаДок.Номенклатура;
		
		СтрокаДвижения.СтавкаНДС				= СтрокаДок.СтавкаНДС;
		
		// Отражение включения НДС в стоимость 
		СтрокаДвижения.УплаченныйНДС = ?(НаправлениеДвиженияКорректировки = Перечисления.РасчетыВозврат.Возврат, -СтрокаДок.НДС,СтрокаДок.НДС);	
		СтрокаДвижения.СуммаКорректировкиОборота = ?(НаправлениеДвиженияКорректировки = Перечисления.РасчетыВозврат.Возврат, -СтрокаДок.СуммаБезНДС,СтрокаДок.СуммаБезНДС);
		
		// не нужно отражать корректировки не оказавшие влияния на НДС
		Если СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость")
		   И СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
			СтрокаДвижения.СуммаНДС = 0;
		Иначе
			СтрокаДвижения.СуммаНДС = ?(НаправлениеДвиженияКорректировки = Перечисления.РасчетыВозврат.Возврат, -СтрокаДок.НДС,СтрокаДок.НДС);
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ТаблицаДвижений_КорректировкаНДСКВозмещению.Количество() > 0 Тогда
		Движения.КорректировкаНДСКВозмещению.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.КорректировкаНДСКВозмещению.мТаблицаДвижений = ТаблицаДвижений_КорректировкаНДСКВозмещению;
		Движения.КорректировкаНДСКВозмещению.ДобавитьДвижение();		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструКорректировкиНДСКВозмещению()

// Процедура вызывается из модулей документов корректировки облагаемого оборота по НДС.
//  Основная задача - отразить возврат ТМЗ и прочие корректировки в подсистеме учета НДС,
//  а именно в регистре: "КорректировкаНДС"
Процедура СформироватьДвиженияПоРегиструКорректировкиНДС(	СтруктураШапкиДокумента, ТаблицаНДС, ИдТабЧасти, 
															Движения, Отказ, ТаблицаПоУчастникамСовместнойДеятельности = Неопределено) Экспорт

	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(	СтруктураШапкиДокумента.Дата, Отказ, 
															СтруктураШапкиДокумента.Организация, "Нал");
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	УчитыватьНДС = Истина;

	Если СтруктураШапкиДокумента.Свойство("УчитыватьНДС") Тогда
		УчитыватьНДС = СтруктураШапкиДокумента.УчитыватьНДС;
	КонецЕсли;

	Если НЕ УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	ВидДокумента = СтруктураШапкиДокумента.ВидДокумента;
	ЕстьАкциз  = Не(ТаблицаНДС.Колонки.Найти("Акциз") = Неопределено);
	НаправлениеДвиженияКорректировки = ОпределениеНаправленияДвиженияДляДокументаКорректировкиНДС(ВидДокумента);
	
	
	ТаблицаДвижений_КорректировкаНДС = Движения.КорректировкаНДС.Выгрузить();
	ТаблицаДвижений_КорректировкаНДС.Очистить();
	
	Если ТаблицаПоУчастникамСовместнойДеятельности <> Неопределено Тогда 
		ТаблицаНДС = СформироватьТаблицуНДСПоУчастникамСовместнойДеятельности(СтруктураШапкиДокумента, ТаблицаНДС, ТаблицаПоУчастникамСовместнойДеятельности, Ложь, ЕстьАкциз); 
	КонецЕсли;
	
	ЕстьУчастникСовместнойДеятельности = Не(ТаблицаНДС.Колонки.Найти("УчастникСовместнойДеятельности") = Неопределено); 
	
	Для Каждого СтрокаДок из ТаблицаНДС Цикл
		
		// не нужно отражать корректировки не оказавшие влияния на НДС
		Если СтрокаДок.НДС = 0 И СтрокаДок.СуммаБезНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если (ТипЗнч(СтрокаДок.СчетУчетаЦенности) = Тип("ПланСчетовСсылка.Типовой"))
		   И СтрокаДок.СчетУчетаЦенности.Забалансовый Тогда
			// Пропускаем забалансовые поступления
			Продолжить;
		КонецЕсли;

		СтрокаДвижения							= ТаблицаДвижений_КорректировкаНДС.Добавить();		     		
		
		СтрокаДвижения.Налогоплательщик			= СтруктураШапкиДокумента.ПлательщикНДС;
		СтрокаДвижения.Организация				= СтруктураШапкиДокумента.Организация;		
		СтрокаДвижения.СтруктурнаяЕдиница   	= СтруктураШапкиДокумента.Организация;		
		
		СтрокаДвижения.ВидОперацииКорректировки = СтрокаДок.НДСВидОперацииРеализации;
		
		СтрокаДвижения.ВидНалогаНДС				= Перечисления.ВидыНДС.НДС;		
		
		Если ЕстьУчастникСовместнойДеятельности Тогда 
			СтрокаДвижения.Контрагент = СтрокаДок.УчастникСовместнойДеятельности;
		Иначе 
			СтрокаДвижения.Контрагент = СтруктураШапкиДокумента.Контрагент;
		КонецЕсли;
		
		СтрокаДвижения.ТМЗ 						= СтрокаДок.Номенклатура;
		СтрокаДвижения.СтавкаНДС				= СтрокаДок.СтавкаНДС;
		
		СуммаАкциза 							= ?(ЕстьАкциз,СтрокаДок.Акциз,0);
		
		// Включаем акциз в сумму, так как акциз входит в базу обложения НДС.		
		Если НаправлениеДвиженияКорректировки = Перечисления.РасчетыВозврат.Возврат Тогда
			СуммаКорректировкиОборота = -СтрокаДок.СуммаБезНДС - СуммаАкциза;	
		Иначе
			СуммаКорректировкиОборота = СтрокаДок.СуммаБезНДС + СуммаАкциза;	
		КонецЕсли;
		
		СтрокаДвижения.СуммаКорректировкиОборота= СуммаКорректировкиОборота;
		СтрокаДвижения.СуммаНДС    				= ?(НаправлениеДвиженияКорректировки = Перечисления.РасчетыВозврат.Возврат, -СтрокаДок.НДС,СтрокаДок.НДС);	
				
	КонецЦикла;
	
	Если ТаблицаДвижений_КорректировкаНДС.Количество() > 0 Тогда
		Движения.КорректировкаНДС.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.КорректировкаНДС.мТаблицаДвижений = ТаблицаДвижений_КорректировкаНДС;
		Движения.КорректировкаНДС.ДобавитьДвижение();		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструКорректировкиНДС()

//////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ОТЧЕТНОСТИ ПОДСИСТЕМЫ УЧЕТА НДС

// Функция формирует исходный запрос для очетности подсистемы НДС
// Возвращаемое значение - результат запроса
Функция ПроверитьСоответствиеСуммСчетовФактурВыданныхИДокументовОтгрузки( НачПериода=Неопределено, КонПериода = Неопределено, Организации, Контрагент = Неопределено, ВключатьИтоги = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата", 		НачПериода);
	Запрос.УстановитьПараметр("КонДата", 		КонПериода);
	Запрос.УстановитьПараметр("Организация", 	Организации);
	Запрос.УстановитьПараметр("Контрагент", 	Контрагент);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СписокСчетовФактурТекст = "ВЫБРАТЬ
	                          |	СчетФактураВыданный.Ссылка,
							  |	СчетФактураВыданный.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
							  |	СчетФактураВыданный.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
	                          |ПОМЕСТИТЬ СчетФактураВыданный
	                          |ИЗ
	                          |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	                          |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаФактурыПрекратившиеДействие КАК СчетаФактурыПрекратившиеДействие
	                          |	ПО (СчетаФактурыПрекратившиеДействие.СчетФактура = СчетФактураВыданный.Ссылка)
	                          |	ЛЕВОЕ СОЕДИНЕНИЕ Документ.Сторнирование КАК Сторнирование
	                          |	ПО СчетФактураВыданный.Ссылка = Сторнирование.ДокументОснование
	                          |		И (НЕ Сторнирование.ПометкаУдаления)
	                          |ГДЕ
	                          |	СчетФактураВыданный.Дата МЕЖДУ &НачДата И &КонДата
	                          |	И СчетФактураВыданный.Проведен
	                          |	И СчетаФактурыПрекратившиеДействие.СчетФактура ЕСТЬ NULL
							  |	И Сторнирование.Ссылка ЕСТЬ NULL
	                          |	И СчетФактураВыданный.Организация В(&Организация)
	                          |	И СчетФактураВыданный.ПодтвержденДокументамиОтгрузки " + ?(НЕ Контрагент = Неопределено, "И (СчетФактураВыданный.Контрагент = &Контрагент ИЛИ СчетФактураВыданный.Покупатель = &Контрагент)", "") ;
							  
	Запрос.Текст = СписокСчетовФактурТекст;
	Запрос.Выполнить();
	
	СписокСчетовФактурТекст = "СчетФактураВыданный";
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеСчетовФактур.Ссылка КАК Ссылка,
	               |	ЕСТЬNULL(ДанныеРегистраторов.Регистратор, ""<Отсутствует>"") КАК Регистратор,
	               |	ДанныеСчетовФактур.СуммаНДС КАК СуммаНДС,
	               |	ДанныеСчетовФактур.СуммаБезНДС КАК СуммаБезНДС,
	               |	ЕСТЬNULL(ДанныеРегистраторов.СуммаНДС, 0) КАК СуммаНДСОтгрузки,
	               |	ЕСТЬNULL(ДанныеРегистраторов.СуммаБезНДС, 0) КАК СуммаБезНДСОтгрузки
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ДанныеСчетовФактур.Ссылка КАК Ссылка,
	               |		ВЫРАЗИТЬ(СУММА(ДанныеСчетовФактур.СуммаНДС) * ДанныеСчетовФактур.КурсВзаиморасчетов / ВЫБОР
	               |				КОГДА ДанныеСчетовФактур.КратностьВзаиморасчетов = 0
	               |					ТОГДА 1
	               |				ИНАЧЕ ДанныеСчетовФактур.КратностьВзаиморасчетов
	               |			КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	               |		ВЫРАЗИТЬ(СУММА(ДанныеСчетовФактур.СуммаБезНДС) * ДанныеСчетовФактур.КурсВзаиморасчетов / ВЫБОР
	               |				КОГДА ДанныеСчетовФактур.КратностьВзаиморасчетов = 0
	               |					ТОГДА 1
	               |				ИНАЧЕ ДанныеСчетовФактур.КратностьВзаиморасчетов
	               |			КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаБезНДС
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			СчетФактураВыданный.Ссылка КАК Ссылка,
	               |			СчетФактураВыданный.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	               |			СчетФактураВыданный.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	               |			ЕСТЬNULL(ДанныеСчетовФактур.СуммаАкциза, 0) КАК СуммаАкциза,
	               |			ЕСТЬNULL(ДанныеСчетовФактур.СуммаНДС, 0) КАК СуммаНДС,
	               |			ЕСТЬNULL(ДанныеСчетовФактур.СуммаБезНалогов, 0) КАК СуммаБезНДС
	               |		ИЗ
	               |			СчетФактураВыданный КАК СчетФактураВыданный
	               |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |					СчетФактураТовары.Ссылка КАК Ссылка,
	               |					СчетФактураТовары.СуммаАкциза КАК СуммаАкциза,
	               |					СчетФактураТовары.СуммаНДС КАК СуммаНДС,
	               |					СчетФактураТовары.Сумма - ВЫБОР
	               |						КОГДА СчетФактураТовары.Ссылка.СуммаВключаетНДС
	               |							ТОГДА СчетФактураТовары.СуммаНДС
	               |						ИНАЧЕ 0
	               |					КОНЕЦ + ВЫБОР
	               |						КОГДА (НЕ СчетФактураТовары.Ссылка.СуммаВключаетАкциз)
	               |							ТОГДА СчетФактураТовары.СуммаАкциза
	               |						ИНАЧЕ 0
	               |					КОНЕЦ КАК СуммаБезНалогов
	               |				ИЗ
	               |					Документ.СчетФактураВыданный.Товары КАК СчетФактураТовары
	               |				ГДЕ
	               |					СчетФактураТовары.Ссылка В
	               |							(ВЫБРАТЬ
	               |								СчетФактураВыданный.Ссылка
	               |							ИЗ
	               |								СчетФактураВыданный)
	               |				
	               |				ОБЪЕДИНИТЬ ВСЕ
	               |				
	               |				ВЫБРАТЬ
	               |					СчетФактураУслуги.Ссылка,
	               |					0,
	               |					СчетФактураУслуги.СуммаНДС,
	               |					СчетФактураУслуги.Сумма - ВЫБОР
	               |						КОГДА СчетФактураУслуги.Ссылка.СуммаВключаетНДС
	               |							ТОГДА СчетФактураУслуги.СуммаНДС
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |				ИЗ
	               |					Документ.СчетФактураВыданный.Услуги КАК СчетФактураУслуги
	               |				ГДЕ
	               |					СчетФактураУслуги.Ссылка В
	               |							(ВЫБРАТЬ
	               |								СчетФактураВыданный.Ссылка
	               |							ИЗ
	               |								СчетФактураВыданный)
	               |				
	               |				ОБЪЕДИНИТЬ ВСЕ
	               |				
	               |				ВЫБРАТЬ
	               |					СчетФактураОС.Ссылка,
	               |					0,
	               |					СчетФактураОС.СуммаНДС,
	               |					СчетФактураОС.Сумма - ВЫБОР
	               |						КОГДА СчетФактураОС.Ссылка.СуммаВключаетНДС
	               |							ТОГДА СчетФактураОС.СуммаНДС
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |				ИЗ
	               |					Документ.СчетФактураВыданный.ОС КАК СчетФактураОС
	               |				ГДЕ
	               |					СчетФактураОС.Ссылка В
	               |							(ВЫБРАТЬ
	               |								СчетФактураВыданный.Ссылка
	               |							ИЗ
	               |								СчетФактураВыданный)
	               |				
	               |				ОБЪЕДИНИТЬ ВСЕ
	               |				
	               |				ВЫБРАТЬ
	               |					СчетФактураНМА.Ссылка,
	               |					0,
	               |					СчетФактураНМА.СуммаНДС,
	               |					СчетФактураНМА.Сумма - ВЫБОР
	               |						КОГДА СчетФактураНМА.Ссылка.СуммаВключаетНДС
	               |							ТОГДА СчетФактураНМА.СуммаНДС
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |				ИЗ
	               |					Документ.СчетФактураВыданный.НМА КАК СчетФактураНМА
	               |				ГДЕ
	               |					СчетФактураНМА.Ссылка В
	               |							(ВЫБРАТЬ
	               |								СчетФактураВыданный.Ссылка
	               |							ИЗ
	               |								СчетФактураВыданный)) КАК ДанныеСчетовФактур
	               |				ПО СчетФактураВыданный.Ссылка = ДанныеСчетовФактур.Ссылка) КАК ДанныеСчетовФактур
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ДанныеСчетовФактур.Ссылка,
	               |		ДанныеСчетовФактур.КурсВзаиморасчетов,
	               |		ДанныеСчетовФактур.КратностьВзаиморасчетов) КАК ДанныеСчетовФактур
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ДанныеРегистраторов.Регистратор КАК Регистратор,
	               |			ДанныеРегистраторов.СуммаБезНДС КАК СуммаБезНДС,
	               |			ДанныеРегистраторов.ОборотПоРеализации КАК ОборотПоРеализации,
	               |			ДанныеРегистраторов.СуммаНДС КАК СуммаНДС,
	               |			СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактура,
	               |			СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументРегистратор
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
	               |				СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
	               |			ИЗ
	               |				Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	               |			ГДЕ
	               |				СчетФактураВыданныйДокументыОснования.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	               |				И СчетФактураВыданныйДокументыОснования.Ссылка.Организация В(&Организация)
	               |				И СчетФактураВыданныйДокументыОснования.Ссылка.ПодтвержденДокументамиОтгрузки) КАК СчетФактураВыданныйДокументыОснования
	               |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |					НДС.Регистратор КАК Регистратор,
	               |					СУММА(НДС.СуммаБезНДС) КАК СуммаБезНДС,
	               |					СУММА(НДС.ОборотПоРеализации) КАК ОборотПоРеализации,
	               |					СУММА(НДС.СуммаНДС) КАК СуммаНДС
	               |				ИЗ
	               |					РегистрНакопления.НДС КАК НДС
	               |				ГДЕ
	               |					НДС.Период >= &НачДата
	               |					И НДС.Организация В(&Организация)
	               |				
	               |				СГРУППИРОВАТЬ ПО
	               |					НДС.Регистратор
	               |				
	               |				ОБЪЕДИНИТЬ ВСЕ
	               |				
	               |				ВЫБРАТЬ
	               |					КорректировкаНДС.Регистратор,
	               |					СУММА(КорректировкаНДС.СуммаКорректировкиОборота),
	               |					СУММА(КорректировкаНДС.СуммаКорректировкиОборота),
	               |					СУММА(КорректировкаНДС.СуммаНДС)
	               |				ИЗ
	               |					РегистрНакопления.КорректировкаНДС КАК КорректировкаНДС
	               |				ГДЕ
	               |					КорректировкаНДС.Период >= &НачДата
	               |					И КорректировкаНДС.Организация В(&Организация)
	               |				
	               |				СГРУППИРОВАТЬ ПО
	               |					КорректировкаНДС.Регистратор) КАК ДанныеРегистраторов
	               |				ПО (ДанныеРегистраторов.Регистратор = СчетФактураВыданныйДокументыОснования.ДокументОснование)) КАК ДанныеРегистраторов
	               |		ПО (ДанныеРегистраторов.СчетФактура = ДанныеСчетовФактур.Ссылка)
	               |ГДЕ
	               |	(ЕСТЬNULL(ДанныеРегистраторов.СуммаБезНДС, 0) <> ДанныеСчетовФактур.СуммаБезНДС
	               |			ИЛИ ЕСТЬNULL(ДанныеРегистраторов.СуммаНДС, 0) <> ДанныеСчетовФактур.СуммаНДС) ";
				   
				   Если ВключатьИтоги Тогда
					   Запрос.Текст = Запрос.Текст + "
					   |	ИТОГИ
					   |	МАКСИМУМ(СуммаБезНДС),
					   |	МАКСИМУМ(СуммаНДС),
					   |	СУММА(СуммаБезНДСОтгрузки),
					   |	СУММА(СуммаНДСОтгрузки)
					   | ПО	Ссылка  ";
				   КонецЕсли;

	Результат = Запрос.Выполнить();	
	
	Возврат Результат;	
КонецФункции

// Функция формирует исходный запрос для очетности подсистемы НДС
// Возвращаемое значение - результат запроса
Функция ПроверитьСоответствиеСуммСчетовФактурПолученныхИДокументовОтгрузки( НачПериода=Неопределено, КонПериода = Неопределено, Организации, Контрагент = Неопределено, ВключатьИтоги = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата", 		НачПериода);
	Запрос.УстановитьПараметр("КонДата", 		КонПериода);
	Запрос.УстановитьПараметр("Организация", 	Организации);
	Запрос.УстановитьПараметр("Контрагент", 	Контрагент);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СписокСчетовФактурТекст = "ВЫБРАТЬ
	                          |	СчетФактураПолученный.Ссылка,
							  |	СчетФактураПолученный.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
							  |	СчетФактураПолученный.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
	                          |ПОМЕСТИТЬ СчетФактураПолученный
	                          |ИЗ
	                          |	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	                          |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаФактурыПрекратившиеДействие КАК СчетаФактурыПрекратившиеДействие
	                          |	ПО (СчетаФактурыПрекратившиеДействие.СчетФактура = СчетФактураПолученный.Ссылка)
	                          |	ЛЕВОЕ СОЕДИНЕНИЕ Документ.Сторнирование КАК Сторнирование
	                          |	ПО СчетФактураПолученный.Ссылка = Сторнирование.ДокументОснование
	                          |		И (НЕ Сторнирование.ПометкаУдаления)
	                          |ГДЕ
	                          |	СчетФактураПолученный.Дата МЕЖДУ &НачДата И &КонДата
							  |	И СчетФактураПолученный.Проведен
							  |	И СчетаФактурыПрекратившиеДействие.СчетФактура ЕСТЬ NULL
							  |	И Сторнирование.Ссылка ЕСТЬ NULL
	                          |	И СчетФактураПолученный.Организация В(&Организация)
	                          |	И СчетФактураПолученный.ПодтвержденДокументамиОтгрузки " + ?(НЕ Контрагент = Неопределено, "И (СчетФактураПолученный.Контрагент = &Контрагент ИЛИ СчетФактураПолученный.Поставщик = &Контрагент)", "") ;
							  
	Запрос.Текст = СписокСчетовФактурТекст;
	Запрос.Выполнить();
	
	СписокСчетовФактурТекст = "СчетФактураПолученный";
	
	Запрос.Текст = "
	               |ВЫБРАТЬ
	               |	ДанныеСчетовФактур.Ссылка КАК Ссылка,
	               |	ЕСТЬNULL(ДанныеРегистраторов.Регистратор, ""<Отсутствует>"") КАК Регистратор,
	               |	ДанныеСчетовФактур.СуммаНДС КАК СуммаНДС,
	               |	ДанныеСчетовФактур.СуммаБезНДС КАК СуммаБезНДС,
	               |	ЕСТЬNULL(ДанныеРегистраторов.СуммаНДС,0) КАК СуммаНДСОтгрузки,
	               |	ЕСТЬNULL(ДанныеРегистраторов.СуммаБезНДС,0) КАК СуммаБезНДСОтгрузки
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ДанныеСчетовФактур.Ссылка КАК Ссылка,
	               |		ВЫРАЗИТЬ(СУММА(ДанныеСчетовФактур.СуммаНДС) * ДанныеСчетовФактур.КурсВзаиморасчетов / ВЫБОР
	               |				КОГДА ДанныеСчетовФактур.КратностьВзаиморасчетов = 0
	               |					ТОГДА 1
	               |				ИНАЧЕ ДанныеСчетовФактур.КратностьВзаиморасчетов
	               |			КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	               |		ВЫРАЗИТЬ(СУММА(ДанныеСчетовФактур.СуммаБезНДС) * ДанныеСчетовФактур.КурсВзаиморасчетов / ВЫБОР
	               |				КОГДА ДанныеСчетовФактур.КратностьВзаиморасчетов = 0
	               |					ТОГДА 1
	               |				ИНАЧЕ ДанныеСчетовФактур.КратностьВзаиморасчетов
	               |			КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаБезНДС
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ДанныеСчетовФактур.Ссылка КАК Ссылка,
	               |			ДанныеСчетовФактур.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	               |			ДанныеСчетовФактур.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	               |			ЕСТЬNULL(ДанныеСчетовФактур.СуммаНДС, 0) КАК СуммаНДС,
	               |			ЕСТЬNULL(ДанныеСчетовФактур.СуммаБезНДС, 0) КАК СуммаБезНДС
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				СчетФактураПолученный.Ссылка КАК Ссылка,
	               |				СчетФактураПолученный.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	               |				СчетФактураПолученный.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	               |				ДанныеСчетовФактур.СуммаНДС КАК СуммаНДС,
	               |				ДанныеСчетовФактур.СуммаБезНалогов КАК СуммаБезНДС
	               |			ИЗ
	               |				СчетФактураПолученный КАК СчетФактураПолученный
	               |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |						СчетФактураТовары.Ссылка КАК Ссылка,
	               |						СчетФактураТовары.СуммаНДС КАК СуммаНДС,
	               |						СчетФактураТовары.Сумма - ВЫБОР
	               |							КОГДА СчетФактураТовары.Ссылка.СуммаВключаетНДС
	               |								ТОГДА СчетФактураТовары.СуммаНДС
	               |							ИНАЧЕ 0
	               |						КОНЕЦ КАК СуммаБезНалогов
	               |					ИЗ
	               |						Документ.СчетФактураПолученный.Товары КАК СчетФактураТовары
	               |					ГДЕ
	               |						СчетФактураТовары.Ссылка В
	               |								(ВЫБРАТЬ
	               |									СчетФактураПолученный.Ссылка
	               |								ИЗ
	               |									СчетФактураПолученный)
	               |					
	               |					ОБЪЕДИНИТЬ ВСЕ
	               |					
	               |					ВЫБРАТЬ
	               |						СчетФактураУслуги.Ссылка,
	               |						СчетФактураУслуги.СуммаНДС,
	               |						СчетФактураУслуги.Сумма - ВЫБОР
	               |							КОГДА СчетФактураУслуги.Ссылка.СуммаВключаетНДС
	               |								ТОГДА СчетФактураУслуги.СуммаНДС
	               |							ИНАЧЕ 0
	               |						КОНЕЦ
	               |					ИЗ
	               |						Документ.СчетФактураПолученный.Услуги КАК СчетФактураУслуги
	               |					ГДЕ
	               |						СчетФактураУслуги.Ссылка В
	               |								(ВЫБРАТЬ
	               |									СчетФактураПолученный.Ссылка
	               |								ИЗ
	               |									СчетФактураПолученный)
	               |					
	               |					ОБЪЕДИНИТЬ ВСЕ
	               |					
	               |					ВЫБРАТЬ
	               |						СчетФактураОС.Ссылка,
	               |						СчетФактураОС.СуммаНДС,
	               |						СчетФактураОС.Сумма - ВЫБОР
	               |							КОГДА СчетФактураОС.Ссылка.СуммаВключаетНДС
	               |								ТОГДА СчетФактураОС.СуммаНДС
	               |							ИНАЧЕ 0
	               |						КОНЕЦ
	               |					ИЗ
	               |						Документ.СчетФактураПолученный.ОС КАК СчетФактураОС
	               |					ГДЕ
	               |						СчетФактураОС.Ссылка В
	               |								(ВЫБРАТЬ
	               |									СчетФактураПолученный.Ссылка
	               |								ИЗ
	               |									СчетФактураПолученный)
	               |					
	               |					ОБЪЕДИНИТЬ ВСЕ
	               |					
	               |					ВЫБРАТЬ
	               |						СчетФактураНМА.Ссылка,
	               |						СчетФактураНМА.СуммаНДС,
	               |						СчетФактураНМА.Сумма - ВЫБОР
	               |							КОГДА СчетФактураНМА.Ссылка.СуммаВключаетНДС
	               |								ТОГДА СчетФактураНМА.СуммаНДС
	               |							ИНАЧЕ 0
	               |						КОНЕЦ
	               |					ИЗ
	               |						Документ.СчетФактураПолученный.НМА КАК СчетФактураНМА
	               |					ГДЕ
	               |						СчетФактураНМА.Ссылка В
	               |								(ВЫБРАТЬ
	               |									СчетФактураПолученный.Ссылка
	               |								ИЗ
	               |									СчетФактураПолученный)) КАК ДанныеСчетовФактур
	               |					ПО (ДанныеСчетовФактур.Ссылка = СчетФактураПолученный.Ссылка)) КАК ДанныеСчетовФактур) КАК ДанныеСчетовФактур
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ДанныеСчетовФактур.Ссылка,
	               |		ДанныеСчетовФактур.КурсВзаиморасчетов,
	               |		ДанныеСчетовФактур.КратностьВзаиморасчетов) КАК ДанныеСчетовФактур
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ДанныеРегистраторов.Регистратор КАК Регистратор,
	               |			ДанныеРегистраторов.СуммаБезНДС КАК СуммаБезНДС,
	               |			ДанныеРегистраторов.СуммаНДС КАК СуммаНДС,
	               |			СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактура,
	               |			СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументРегистратор
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
	               |				СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
	               |			ИЗ
	               |				Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	               |			ГДЕ
	               |				СчетФактураВыданныйДокументыОснования.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	               |				И СчетФактураВыданныйДокументыОснования.Ссылка.Организация В(&Организация)
	               |				И СчетФактураВыданныйДокументыОснования.Ссылка.ПодтвержденДокументамиОтгрузки) КАК СчетФактураВыданныйДокументыОснования
	               |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |					НДС.Регистратор КАК Регистратор,
	               |					НДС.СчетФактура КАК СчетФактураСтроки,
	               |					СУММА(НДС.СуммаБезНДС) КАК СуммаБезНДС,
	               |					СУММА(НДС.УплаченныйНДС) КАК СуммаНДС
	               |				ИЗ
	               |					РегистрНакопления.НДСКВозмещению КАК НДС
	               |				ГДЕ
	               |					НДС.Период >= &НачДата
	               |					И НДС.Организация В(&Организация)
	               |				
	               |				СГРУППИРОВАТЬ ПО
	               |					НДС.Регистратор,
	               |					НДС.СчетФактура
	               |				
	               |				ОБЪЕДИНИТЬ ВСЕ
	               |				
	               |				ВЫБРАТЬ
	               |					КорректировкаНДС.Регистратор,
	               |					NULL,
	               |					СУММА(КорректировкаНДС.СуммаКорректировкиОборота),
	               |					СУММА(КорректировкаНДС.УплаченныйНДС)
	               |				ИЗ
	               |					РегистрНакопления.КорректировкаНДСКВозмещению КАК КорректировкаНДС
	               |				ГДЕ
	               |					КорректировкаНДС.Период >= &НачДата
	               |					И КорректировкаНДС.Организация В(&Организация)
	               |				
	               |				СГРУППИРОВАТЬ ПО
	               |					КорректировкаНДС.Регистратор) КАК ДанныеРегистраторов
	               |				ПО (ДанныеРегистраторов.Регистратор = СчетФактураВыданныйДокументыОснования.ДокументОснование)
	               |					И ((НЕ ДанныеРегистраторов.Регистратор ССЫЛКА Документ.АвансовыйОтчет)
	               |						ИЛИ ДанныеРегистраторов.СчетФактураСтроки = СчетФактураВыданныйДокументыОснования.Ссылка)) КАК ДанныеРегистраторов
	               |		ПО (ДанныеРегистраторов.СчетФактура = ДанныеСчетовФактур.Ссылка)
	               |ГДЕ
	               |	(ЕСТЬNULL(ДанныеРегистраторов.СуммаБезНДС, 0) <> ДанныеСчетовФактур.СуммаБезНДС
	               |			ИЛИ ЕСТЬNULL(ДанныеРегистраторов.СуммаНДС, 0) <> ДанныеСчетовФактур.СуммаНДС)";
				   
				   Если ВключатьИтоги Тогда
					   Запрос.Текст = Запрос.Текст + "
	               |	ИТОГИ
	               |	МАКСИМУМ(СуммаБезНДС),
				   |	МАКСИМУМ(СуммаНДС),
				   |	СУММА(СуммаБезНДСОтгрузки),
				   |	СУММА(СуммаНДСОтгрузки)
				   | ПО	Ссылка  ";
				   КонецЕсли;
	
	Результат = Запрос.Выполнить();	
	
	Возврат Результат;	
КонецФункции

Функция СформироватьУсловиеОграниченияПоПериоду(ИмяПоля, ПараметрДатаНач, ПараметрДатаКон, ИмяПараметраДатаНач = "НачПериода", ИмяПараметраДатаКон = "КонПериода") Экспорт
	СтрокаУсловия = "";
	// Дополняем условие запроса отбором по периоду
	Если (ЗначениеЗаполнено(ПараметрДатаНач)) И (ЗначениеЗаполнено(ПараметрДатаКон)) Тогда
		СтрокаУсловия = " И " + ИмяПоля + " МЕЖДУ &" + ИмяПараметраДатаНач + " И &" + ИмяПараметраДатаКон + "
		|";
		
	ИначеЕсли (ЗначениеЗаполнено(ПараметрДатаНач)) И (НЕ ЗначениеЗаполнено(ПараметрДатаКон)) Тогда
		СтрокаУсловия = " И " + ИмяПоля + " >= &" + ИмяПараметраДатаНач + "
		|";
		
	ИначеЕсли (НЕ ЗначениеЗаполнено(ПараметрДатаНач)) И (ЗначениеЗаполнено(ПараметрДатаКон)) Тогда
		СтрокаУсловия = " И " + ИмяПоля + " <= &" + ИмяПараметраДатаКон + "
		|";	
	КонецЕсли;
	
	Возврат СтрокаУсловия;
КонецФункции

// Функция определеяет наличие счетов-фактур, полученных по документам,
// которые могут являться основаниями для ввода счетов-фактур полученных.
//
// Применяется для контроля за наличием в ИБ информации о наличии счетов-
// фактур.
// 
// Параметры:
//  НачПериода       - Дата - Начальная дата выборки (включительно, с 00:00:00)
//  КонПериода       - Дата - Конечная дата выборки (включительно, по 23:59:59)
//  Организация      - Справочник.Ссылка - Организация, по которой
//                     осуществляется отбор. Необязательный параметр. Если не
//                     задан, отбор осуществляется по всем организациям.
//  Фильтр           - Документ.Ссылка, Массив - Документ или список документов, 
//                     по которым осуществляется отбор. Необязательный параметр. 
//                     Если не задан, отбор осуществляется по всем документам, 
//                     которые могут являться основаниями для ввода счетов-фактур 
//                     полученных.
//  ВсеКромеФильтра  - Булево - Признак отбора документов, не входящих в Фильтр. 
//                     Необязательный параметр. Значение по умолчаню - Ложь.
//                     Если не задан, отбираются документы, заданные в Фильтре.
//  НаличиеСчетаФактуры - Булево - Признак отбора документов:
//                        Истина - Отбирать документы, по которым существуют
//                        счета-фактуры.
//                        Ложь - Отбирать документы, по которым счета-фактуры
//                        отсутствуют.
//                        Необязательный параметр. Если не задан, осуществляется
//                        отбор всех документов.
// СчетФактураПроведен - Булево - Признак отбора счетов-фактур:
//                        Истина - Отбирать проведенные счета-фактуры
//                        Ложь - Отбирать непроведенные счета-фактуры
//                        Необязательный параметр. Если не задан, осуществляется
//                        отбор всех счетов-фактур.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений - Состав колонок:
//                    Документ - Документ.Ссылка - Документ, по которому
//                               производился поиск счета-фактуры полученного
//                    СчетФактура - Документ.Ссылка - Ссылка на счет-
//                                  фактуру полученный, либо Неопределено
//
Функция ОпределитьНаличиеСчетовФактур(НачПериода=Неопределено, КонПериода= Неопределено,Организация, Фильтр = Неопределено,ВсеКромеФильтра = Ложь, НаличиеСчетаФактуры = Неопределено, ИмяСчетФактуры = "СчетФактураПолученный") Экспорт
	  

		Запрос = Новый Запрос();
		
		Запрос.УстановитьПараметр("НачПериода",  НачПериода);
		Запрос.УстановитьПараметр("КонПериода",  ?(НЕ ЗначениеЗаполнено(КонПериода),'00010101',КонецДня(КонПериода)));
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Фильтр",      Фильтр);
				
		// Дополняем условие запроса отбором по признаку наличия/отсутствия счета-фактуры
		УсловиеЗапроса = ?(НаличиеСчетаФактуры = Неопределено, "", " ГДЕ " + ?(НаличиеСчетаФактуры, "НЕ СчетФактура.Ссылка ЕСТЬ NULL", "СчетФактура.Ссылка ЕСТЬ NULL"));
		
		//добавим фильтр по типу регистратору, т.к. из регистров выбирается данные по документам,
		//которые не регситрируется счет-фактурой.
		СписокТиповДокументов = Новый СписокЗначений;
		МетаданныеДокумента = Документы[ИмяСчетФактуры].ПустаяСсылка().Метаданные();
		Для Каждого Документ Из МетаданныеДокумента.ТабличныеЧасти["ДокументыОснования"].Реквизиты["ДокументОснование"].Тип.Типы() Цикл
			ТипДокумента = Метаданные.НайтиПоТипу(Документ);
			СписокТиповДокументов.Добавить(ТипДокумента.Имя);
		КонецЦикла;		
		
		//признак добавление в условие соединительного "ИЛИ"
		НужноДобавлятьСоединение = Ложь;
		
		//Признак закртыия скобки после перечисления всех типов регистраторов
		НуженКонецСкобки        = Ложь;
		
		Если УсловиеЗапроса = "" Тогда 
			Если СписокТиповДокументов.Количество() > 0 Тогда
				УсловиеЗапроса = " ГДЕ ";				
			КонецЕсли;			
		Иначе
			УсловиеЗапроса = УсловиеЗапроса + "  И (";      			
			НуженКонецСкобки = Истина;
		КонецЕсли;
		
		Для Каждого ТипДок Из СписокТиповДокументов Цикл 			
			УсловиеЗапроса = УсловиеЗапроса + ?(НужноДобавлятьСоединение , " ИЛИ", "") + "  ЗапросПоДокументам.ДокументОснование ССЫЛКА Документ." + ТипДок.Значение;
			НужноДобавлятьСоединение = Истина;
		КонецЦикла;

		Если НуженКонецСкобки Тогда
			УсловиеЗапроса = УсловиеЗапроса + ")";
		КонецЕсли;
		
		 		
		ЗапросПоДокументам = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		                     |	НДС.Регистратор КАК ДокументОснование,
							 |	НДС.Период КАК ДатаДокументаОснования
		                     |ИЗ
		                     |	РегистрНакопления.<<ИмяРегистраНДС>> КАК НДС
		                     |ГДЕ
		                     |	НДС.Активность
		                     |	" + СформироватьУсловиеОграниченияПоПериоду("НДС.Период", НачПериода, КонПериода)
							 + ?(НЕ ЗначениеЗаполнено(Организация), "",  " И НДС.Организация В (&Организация) ") + 
							 // Дополняем условие запроса отбором по документу-основанию или списку документов-оснований
							?(НЕ ЗначениеЗаполнено(Фильтр), "", " И НДС.Регистратор " + ?(ВсеКромеФильтра, " НЕ ", "") + " В (&Фильтр) ") +
							"
							 |ОБЪЕДИНИТЬ ВСЕ
		                     |
		                     |ВЫБРАТЬ РАЗЛИЧНЫЕ
		                     |	КорректировкаНДС.Регистратор КАК ДокументОснование,
							 |	КорректировкаНДС.Период КАК ДатаДокументаОснования
		                     |ИЗ
		                     |	РегистрНакопления.<<ИмяРегистраКорректировкаНДС>> КАК КорректировкаНДС
		                     |ГДЕ
		                     |	КорректировкаНДС.Активность 
							 |	" + СформироватьУсловиеОграниченияПоПериоду("КорректировкаНДС.Период", НачПериода, КонПериода)
							 + ?(НЕ ЗначениеЗаполнено(Организация), "",  " И КорректировкаНДС.Организация В (&Организация) ") + 
							  // Дополняем условие запроса отбором по документу-основанию или списку документов-оснований
							?(НЕ ЗначениеЗаполнено(Фильтр), "", " И КорректировкаНДС.Регистратор " + ?(ВсеКромеФильтра, " НЕ ", "") + " В (&Фильтр) ") ;
						
							
							
		// В зависимости от параметра ИмяСчетФактуры = "СчетФактураПолученный" заменяем имена базовых регистов
		ЗапросПоДокументам = СтрЗаменить(ЗапросПоДокументам, "<<ИмяРегистраНДС>>", ?(ИмяСчетФактуры = "СчетФактураПолученный", "НДСКВозмещению", "НДС"));
		ЗапросПоДокументам = СтрЗаменить(ЗапросПоДокументам, "<<ИмяРегистраКорректировкаНДС>>", ?(ИмяСчетФактуры = "СчетФактураПолученный", "КорректировкаНДСКВозмещению", "КорректировкаНДС"));
		
		Запрос.Текст = Запрос.Текст +
		"Выбрать РАЗРЕШЕННЫЕ
		|	ЗапросПоДокументам.ДокументОснование КАК ДокументОснование,
		|	ЗапросПоДокументам.ДатаДокументаОснования КАК ДатаДокументаОснования,
		|	ЕСТЬNULL(СчетФактура.Ссылка,Неопределено) КАК СчетФактура,
		|	ЕСТЬNULL(СчетФактура.Ссылка.Проведен, ЛОЖЬ) КАК СчетФактураПроведен
		|ИЗ(" + ЗапросПоДокументам +")КАК ЗапросПоДокументам					
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СчетФактура.Ссылка КАК Ссылка,
		|			СчетФактура.ДокументОснование КАК ДокументОснование
		|		ИЗ
		|			Документ."+ ИмяСчетФактуры + ".ДокументыОснования КАК СчетФактура) КАК СчетФактура
		|		ПО ЗапросПоДокументам.ДокументОснование = СчетФактура.ДокументОснование  
		| " + УсловиеЗапроса + "
		| УПОРЯДОЧИТЬ ПО ЗапросПоДокументам.ДатаДокументаОснования ";
				
		Запрос.Текст =  Запрос.Текст;
				
		ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
		
		Возврат ТаблицаДокументов;	    	
КонецФункции // ОпределитьНаличиеСчетовФактур()


//////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ПОДСИСТЕМЫ УЧЕТА НДС

// Формирует текст про счет-фактуру для показа в форме документа
//
// Параметры: 
//  СчетФактура - ссылка на документ, определяет счет-фактуру, про который надо получить текстовую строку .
//  ФлагВыделения - значение типа булево.  В случае если счет-фактура не проведен или помечен на удаление возвращает значение Истина.
// Возвращаемое значение:
//  Текстовая строка про счет-фактуру.
//
Функция ПолучитьТекстСчетаФактуры(СчетФактура, ФлагВыделения = Ложь) Экспорт

	Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
		Возврат "Ввести счет-фактуру";
	Иначе
		ДополнительныйТекст = "";	
		
		Если СчетФактура.ПометкаУдаления Тогда
			ДополнительныйТекст = " (помечен на удаление)";
			ФлагВыделения = Истина;
		Иначе
			Если НЕ СчетФактура.Проведен Тогда
				ДополнительныйТекст = " (не проведен)";
				ФлагВыделения = Истина;
			КонецЕсли;	
		КонецЕсли;				
		
		Возврат Строка(СчетФактура) + ДополнительныйТекст;
	КонецЕсли; 

КонецФункции // ПолучитьТекстСчетаФактуры()

Функция ПересчитатьСуммуПриИзмененииФлаговНалогов(Сумма, СуммаНДС, СуммаАкциза, СуммаВключаетНДС, СуммаВключаетАкциз, НовыйСуммаВключаетНДС, НовыйСуммаВключаетАкциз) Экспорт
	
	// Инициализация переменных
	НадоВключитьНДС  = Ложь;
	НадоИсключитьНДС = Ложь;
	
	НадоВключитьАкциз  = Ложь;
	НадоИсключитьАкциз = Ложь;
	
	НоваяСумма = Сумма;
	// НДС
	Если НовыйСуммаВключаетНДС И (НЕ СуммаВключаетНДС) Тогда
		// Надо добавлять НДС       
		НадоВключитьНДС = Истина;
	ИначеЕсли НЕ НовыйСуммаВключаетНДС И СуммаВключаетНДС Тогда
		// Надо исключать НДС       
		НадоИсключитьНДС = Истина;
	КонецЕсли;
	
	// Акциз
	Если НовыйСуммаВключаетАкциз И (НЕ СуммаВключаетАкциз) Тогда
		// Надо добавлять акциз       
		НадоВключитьАкциз = Истина;
	ИначеЕсли НЕ НовыйСуммаВключаетАкциз И СуммаВключаетАкциз Тогда
		// Надо исключать акциз       
		НадоИсключитьАкциз = Истина;
	КонецЕсли;
		
	//НДС накручивается сверху, поэтому при любом раскладе первым исключаем его
	Если НадоИсключитьНДС Тогда
		НоваяСумма = НоваяСумма - СуммаНДС;
	КонецЕсли;
	
	// Исключаем акциз
	Если НадоИсключитьАкциз Тогда
		НоваяСумма =  НоваяСумма - СуммаАкциза;
	КонецЕсли;	
	
	//включаем его при необходимости 
	Если НадоВключитьАкциз Тогда
		НоваяСумма = НоваяСумма + СуммаАкциза;
	КонецЕсли;	
	
	
	Если НадоВключитьНДС Тогда
		НоваяСумма = НоваяСумма + СуммаНДС;
	КонецЕсли;

	Возврат НоваяСумма;
КонецФункции

//заполняет табличные части счетов-фактур из документов основания
//
Процедура ЗаполнитьТабличныеЧастиИзДокументаОснования(Объект, Основание) Экспорт
	
	Если Основание = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	ВводИзСФ = Ложь;
	ЕстьАкциз = Ложь;
	ВозвратТоваров 	= Ложь;
	
	НеобходимостьПересчетаПоФлагамНалогов = Ложь;
	
	ОснованиеСуммаВключаетНДС 			  = Ложь;
	ОснованиеСуммаВключаетАкциз 		  = Ложь;
	ОбъектСуммаВключаетНДС 			 	  = Ложь;
	ОбъектСуммаВключаетАкциз 		      = Ложь;

	ВидДокументаОснования  = Основание.Метаданные().Имя;
	МетаданныеДокумента	   = Объект.Метаданные();
	ВидОбъекта			   = МетаданныеДокумента.Имя;
	
	// При вводе документов отгрузки на основании счетов-фактур
	// необходимо заполнять данные только по недоотгруженным ТМЗ
	Если ВидДокументаОснования = "СчетФактураПолученный" ИЛИ
		 ВидДокументаОснования = "СчетФактураВыданный" Тогда
		
		Если  ТипЗНЧ(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ЕстьАкциз = Истина;
		КонецЕсли;
		
		СтруктураОстатков = ПолучитьСписокТоваровПодтвержденныхОтгрузками(Основание, ЕстьАкциз);
		ВводИзСФ = Истина;
	КонецЕсли;
	
	// Для операций возврата отличается знак количественно-суммовых показателей
	Если ВидДокументаОснования		= "ВозвратТоваровОтПокупателя"
		ИЛИ  ВидДокументаОснования	= "ВозвратТоваровПоставщику"
		ИЛИ  ВидДокументаОснования	= "ур_ВозвратЗернаОтПокупателя"
		ИЛИ  ВидДокументаОснования	= "ВозвратТоваровПоставщикуИзНТТ"
		ИЛИ  ВидОбъекта			 	= "ВозвратТоваровОтПокупателя"
		ИЛИ  ВидОбъекта 			= "ВозвратТоваровПоставщику"
		ИЛИ  ВидОбъекта				= "ВозвратТоваровПоставщикуИзНТТ"
		ИЛИ  (ВидДокументаОснования = "Сторнирование"
			  И НЕ (ТипЗнч(Основание.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
			  ИЛИ   ТипЗнч(Основание.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"))) Тогда
		ВозвратТоваров = Истина;
	КонецЕсли;

	// При вводе на основании сторнирования базовым является документ - основание сторно
	Если ВидДокументаОснования     = "Сторнирование" Тогда
		ДокОснование = Основание.ДокументОснование;		
		Если НЕ ЗначениеЗаполнено(ДокОснование) Тогда
			Возврат;
		КонецЕсли;	
	Иначе
		ДокОснование = Основание;		
	КонецЕсли;
	
	МетаданныеДокументаОснования = ДокОснование.Метаданные();		
	ВидДокументаОснования		 = МетаданныеДокументаОснования.Имя;	
	
	//сумма включает НДС
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокументаОснования) Тогда
		ОснованиеСуммаВключаетНДС = ДокОснование.СуммаВключаетНДС;		
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) Тогда
		ОбъектСуммаВключаетНДС = Объект.СуммаВключаетНДС;		
	КонецЕсли;
	
		
	// Сумма включает акциз
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокументаОснования) Тогда
		ОснованиеСуммаВключаетАкциз  = ДокОснование.СуммаВключаетАкциз;	
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента) Тогда
		ОбъектСуммаВключаетАкциз  = Объект.СуммаВключаетАкциз;	
	КонецЕсли;
	
	// Флаги включения налогов в сумму в обрабатываемых документах не совпадают
	Если (НЕ ОбъектСуммаВключаетНДС = ОснованиеСуммаВключаетНДС) ИЛИ (НЕ ОбъектСуммаВключаетАкциз  = ОснованиеСуммаВключаетАкциз) Тогда
		НеобходимостьПересчетаПоФлагамНалогов = Истина;
	КонецЕсли;	

	Если ВидДокументаОснования = "ПередачаНМА" Тогда
		НоваяСтрока = Объект.НМА.Добавить();
		НоваяСтрока.НематериальныйАктив = Основание.НематериальныйАктив;
		НоваяСтрока.СтавкаНДС           = Основание.СтавкаНДС;		
		НоваяСтрока.СуммаНДС            = Основание.СуммаНДС;
		Если НеобходимостьПересчетаПоФлагамНалогов Тогда
			НоваяСтрока.Сумма = ПересчитатьСуммуПриИзмененииФлаговНалогов(Основание.Сумма, НоваяСтрока.СуммаНДС, 0,
																		  ОснованиеСуммаВключаетНДС, ОснованиеСуммаВключаетАкциз,
																		  ОбъектСуммаВключаетНДС, ОбъектСуммаВключаетАкциз);
			
		Иначе	
			НоваяСтрока.Сумма  = Основание.Сумма;
		КонецЕсли;
		
		РассчитатьОборотПоРеализацииТабЧасти(НоваяСтрока, Объект);
		
		Возврат;
	КонецЕсли;

	//только когда ввод данных из Авансового отчета в Счет-фактуру,
	Если ВидДокументаОснования = "АвансовыйОтчет" Тогда
		ТабЧастьТовары = Основание.Товары;
		ТабЧастьУслуги = Основание.Прочее;
		
		СтруктураОтбора  = Новый Структура("СчетФактура",Объект.Ссылка);		
		
		СтрокиТовары =  ТабЧастьТовары.НайтиСтроки(СтруктураОтбора);
		Если СтрокиТовары.Количество() <> 0 Тогда
			Для Каждого СтрокаТабличнойЧастиОснования Из СтрокиТовары Цикл
				НоваяСтрока = Объект.Товары.Добавить();
				// Заполняем по документу-основания
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧастиОснования);
				Если НоваяСтрока.Количество = 0 Тогда
					НоваяСтрока.Количество = 1;
				КонецЕсли;	
				
				// При несовпадении флагов расчета налогов - пересчитываем показатели
				Если НеобходимостьПересчетаПоФлагамНалогов Тогда
					НоваяСтрока.Сумма = ПересчитатьСуммуПриИзмененииФлаговНалогов(СтрокаТабличнойЧастиОснования.Сумма, НоваяСтрока.СуммаНДС, 0,
																		  ОснованиеСуммаВключаетНДС, ОснованиеСуммаВключаетАкциз,
																		  ОбъектСуммаВключаетНДС, ОбъектСуммаВключаетАкциз);					
																					
					НоваяСтрока.Цена = НоваяСтрока.Сумма/НоваяСтрока.Количество;
				КонецЕсли;
				// Заполняем реквизит счета-фактуры "Оборот по реализации"
				РассчитатьОборотПоРеализацииТабЧасти(НоваяСтрока, Объект);																
			КонецЦикла;
		КонецЕсли;
		
		СтрокиУслуги =  ТабЧастьУслуги.НайтиСтроки(СтруктураОтбора);
		Если СтрокиУслуги.Количество() <> 0 Тогда
			Для Каждого СтрокаТабличнойЧастиОснования Из СтрокиУслуги Цикл
				НоваяСтрока = Объект.Услуги.Добавить();
				// Заполняем по документу-основания
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧастиОснования);
				Если НоваяСтрока.Количество = 0 Тогда
					НоваяСтрока.Количество = 1;
				КонецЕсли;	
				
				// При несовпадении флагов расчета налогов - пересчитываем показатели
				Если НеобходимостьПересчетаПоФлагамНалогов Тогда
					НоваяСтрока.Сумма = ПересчитатьСуммуПриИзмененииФлаговНалогов(СтрокаТабличнойЧастиОснования.Сумма, НоваяСтрока.СуммаНДС, 0,
																		  ОснованиеСуммаВключаетНДС, ОснованиеСуммаВключаетАкциз,
																		  ОбъектСуммаВключаетНДС, ОбъектСуммаВключаетАкциз);	
																						
																					
					
				КонецЕсли;
				// На закладке "Прочее" авансового отчета нет цены. Необходимо рассчитать цену
				НоваяСтрока.Цена = НоваяСтрока.Сумма/НоваяСтрока.Количество;			
				
				РассчитатьОборотПоРеализацииТабЧасти(НоваяСтрока, Объект);
				
			КонецЦикла;
		КонецЕсли;   		
		Возврат;
	КонецЕсли;
		
	//в случае когда СФ вводится на основании поступления доп.расходов, то
	//сумма расхода должна попасть в табличную часть "Услуги"
	Если ВидДокументаОснования = "ПоступлениеДопРасходов" Тогда
		НоваяСтрока = Объект.Услуги.Добавить();
		НоваяСтрока.Содержание = Основание.Содержание;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.СтавкаНДС  = Основание.СтавкаНДС;
		НоваяСтрока.СуммаНДС   = Основание.СуммаНДС;
		НоваяСтрока.Сумма      = Основание.Сумма;		
		// При несовпадении флагов расчета налогов - пересчитываем показатели
		Если НеобходимостьПересчетаПоФлагамНалогов Тогда
			НоваяСтрока.Сумма = ПересчитатьСуммуПриИзмененииФлаговНалогов(НоваяСтрока.Сумма, НоваяСтрока.СуммаНДС, 0,
																		  ОснованиеСуммаВключаетНДС, ОснованиеСуммаВключаетАкциз,
																		  ОбъектСуммаВключаетНДС, ОбъектСуммаВключаетАкциз);				
			
			НоваяСтрока.Цена = НоваяСтрока.Сумма;
		Иначе
			НоваяСтрока.Цена       = Основание.Сумма;
			НоваяСтрока.Сумма      = Основание.Сумма;
		КонецЕсли;				
		
		РассчитатьОборотПоРеализацииТабЧасти(НоваяСтрока, Объект);
		
	КонецЕсли;

	
	//в случае когда СФ вводится на основании документа "Отчет комиссионера о продажах", то
	//сумма вознаграждения по ТЧ "Товары" должна попасть одной строкой в табличную часть "Услуги"
	Если (ВидДокументаОснования = "ОтчетКомиссионераОПродажах" И ВидОбъекта = "СчетФактураПолученный")
		 ИЛИ (ВидДокументаОснования = "ОтчетКомитентуОПродажах" И ВидОбъекта = "СчетФактураВыданный")
		И Основание.Товары.Итог("СуммаВознаграждения") <>  0 Тогда
		НоваяСтрока = Объект.Услуги.Добавить();
		НоваяСтрока.Содержание = "Сумма вознаграждения";
		НоваяСтрока.Номенклатура = Основание.УслугаПоВознаграждению;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.СтавкаНДС  = Основание.СтавкаНДСВознаграждения;
		НоваяСтрока.СуммаНДС   = Основание.Товары.Итог("СуммаНДСВознаграждения");
		НоваяСтрока.Сумма      = Основание.Товары.Итог("СуммаВознаграждения");
		
		// При несовпадении флагов расчета налогов - пересчитываем показатели
		Если НеобходимостьПересчетаПоФлагамНалогов Тогда
			НоваяСтрока.Сумма = ПересчитатьСуммуПриИзмененииФлаговНалогов(НоваяСтрока.Сумма, НоваяСтрока.СуммаНДС, 0,
																		  ОснованиеСуммаВключаетНДС, ОснованиеСуммаВключаетАкциз,
																		  ОбъектСуммаВключаетНДС, ОбъектСуммаВключаетАкциз);				
			
			НоваяСтрока.Цена = НоваяСтрока.Сумма;
		Иначе
			НоваяСтрока.Цена       = Основание.Товары.Итог("СуммаВознаграждения");
			НоваяСтрока.Сумма      = Основание.Товары.Итог("СуммаВознаграждения");
		КонецЕсли;				
		
		РассчитатьОборотПоРеализацииТабЧасти(НоваяСтрока, Объект);
		
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Общая обработка табличных частей  	

	Для Каждого ТабЧасть Из МетаданныеДокументаОснования.ТабличныеЧасти Цикл
		
		Если ВидДокументаОснования = "РеализацияУслугПоПереработке" И ТабЧасть.Имя = "Услуги" Тогда
			ИмяТабЧастиОснование = ТабЧасть.Имя;
			ИмяТабЧастиОбъекта   = "Товары";
		ИначеЕсли ВидОбъекта = "РеализацияУслугПоПереработке" И ТабЧасть.Имя = "Товары" Тогда
			ИмяТабЧастиОснование = ТабЧасть.Имя;
			ИмяТабЧастиОбъекта   = "Услуги";
		ИначеЕсли ТабЧасть.Имя = "УчастникиСовместнойДеятельности" Тогда 	
			Если МетаданныеДокумента.ТабличныеЧасти.Найти(ТабЧасть.Имя) <> Неопределено Тогда 
				Объект.УчастникиСовместнойДеятельности.Загрузить(ДокОснование.УчастникиСовместнойДеятельности.Выгрузить());
			КонецЕсли;
			Продолжить;
		Иначе
			ИмяТабЧастиОснование = ТабЧасть.Имя;
			ИмяТабЧастиОбъекта   = ИмяТабЧастиОснование;
		КонецЕсли;	
				
		ТабличнаяЧасть = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧастиОбъекта); 

		Если ТабличнаяЧасть <> Неопределено Тогда	
			
			Если ИмяТабЧастиОбъекта = "НомераГТД" Тогда				
				Продолжить;
			КонецЕсли;
			
			ЕстьНомераГТДОснования = МетаданныеДокументаОснования.ТабличныеЧасти.Найти("НомераГТД") <> Неопределено;
			ЕстьНомераГТД	       = МетаданныеДокумента.ТабличныеЧасти.Найти("НомераГТД") <> Неопределено;

			ЕстьКоличество  	= ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабЧастиОбъекта);
			ЕстьЦена			= ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Цена", МетаданныеДокумента, ИмяТабЧастиОбъекта);
			ВОснованииЕстьАкциз = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаАкциза", МетаданныеДокументаОснования, ИмяТабЧастиОбъекта) И
								  ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокументаОснования) И ДокОснование.УчитыватьАкциз;
								  
			ВДокументеЕстьАкциз = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаАкциза", МетаданныеДокумента, ИмяТабЧастиОбъекта) И
								  ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента) И Объект.УчитыватьАкциз;
								  
			ЕстьСкидкаНаценкаОбъект = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", МетаданныеДокумента, ИмяТабЧастиОбъекта) И
			                          ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", МетаданныеДокумента, ИмяТабЧастиОбъекта);
									  
			ЕстьСкидкаНаценкаОснов  = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", Основание.Метаданные(), ИмяТабЧастиОбъекта) И
								  	  ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", Основание.Метаданные(), ИмяТабЧастиОбъекта);								  
			
			Если ВводИзСФ Тогда
				СвернутаяТабЧастьСФ = ДокОснование[ИмяТабЧастиОснование].Выгрузить();
				СвернутьТабличныеЧастиСФ(СвернутаяТабЧастьСФ, ИмяТабЧастиОснование, ВидДокументаОснования);
			Иначе
				СвернутаяТабЧастьСФ = Неопределено;
			КонецЕсли;
								  
			Для Каждого СтрокаОснования Из ДокОснование[ИмяТабЧастиОснование] Цикл
				//если ввод на основании счет-фактуры, надо следить за количеством
				//и если ИмяТабЧасти = "Услуги" тогда за суммой
				Если ВводИзСФ Тогда 
					СтруктураОст = ПолучитьОстатокИзСФ(СтрокаОснования, ИмяТабЧастиОснование,СтруктураОстатков,ВозвратТоваров,ЕстьАкциз,, СвернутаяТабЧастьСФ);
					Количество   = СтруктураОст.Количество;
					Сумма        = СтруктураОст.Сумма;
					
					//для услуг контроль идет по сумме
					Если (ИмяТабЧастиОснование = "Услуги" ИЛИ ИмяТабЧастиОснование = "ОС") И Количество = 0 Тогда
						Количество = 1;						
					КонецЕсли; 											
					
					// Если позиция отгружена ранее ее не заполняем
					Если ЕстьКоличество И Количество = 0 Тогда
						Продолжить;
					ИначеЕсли Сумма = 0 Тогда
						Продолжить;
					КонецЕсли;			
				КонецЕсли;        				
				
				//если заполняем счет-фактуру на основании документа "Поступление доп.расходов"
				//то необходимо вычислить цену для СФ
				Если ВидДокументаОснования = "ПоступлениеДопРасходов" Тогда
					//если доп.расходов нет, то и заполнять данную строчку не стоит
					Если СтрокаОснования.Сумма = 0 Тогда
						Продолжить;
					КонецЕсли;  					
					
					НоваяСтрока = Объект[ИмяТабЧастиОбъекта].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОснования);					
					НоваяСтрока.СтавкаНДС = Основание.СтавкаНДС;
					// При несовпадении флагов расчета налогов - пересчитываем показатели
					Если НеобходимостьПересчетаПоФлагамНалогов Тогда
						НоваяСтрока.Сумма = ПересчитатьСуммуПриИзмененииФлаговНалогов(НоваяСтрока.Сумма, НоваяСтрока.СуммаНДС, 0,
																		  ОснованиеСуммаВключаетНДС, ОснованиеСуммаВключаетАкциз,
																		  ОбъектСуммаВключаетНДС, ОбъектСуммаВключаетАкциз);																						  
						
																
					КонецЕсли;
															
					Если  ЕстьКоличество Тогда
						Если НоваяСтрока.Количество = 0 Тогда
							НоваяСтрока.Количество = 1;
						КонецЕсли;
																	
						НоваяСтрока.Цена = НоваяСтрока.Сумма/НоваяСтрока.Количество;
					КонецЕсли;
					
				Иначе 	//общий случай
					
					НоваяСтрока = Объект[ИмяТабЧастиОбъекта].Добавить();								
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОснования);
					
					Если ИмяТабЧастиОбъекта = "Товары" Тогда
						
						Если ЕстьНомераГТД Тогда
							
							НоваяСтрока.КлючСвязи = ОбщегоНазначенияКлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Объект[ИмяТабЧастиОбъекта]);
							
							Если ЕстьНомераГТДОснования Тогда
								ПараметрыОтбора = Новый Структура;
								ПараметрыОтбора.Вставить("КлючСвязи", СтрокаОснования.КлючСвязи);
								МассивНайденныхСтрок = ДокОснование.НомераГТД.НайтиСтроки(ПараметрыОтбора);
								
								Для Каждого НайденнаяСтрока Из МассивНайденныхСтрок Цикл
									
									НоваяСтрокаНомерГТД = Объект.НомераГТД.Добавить();
									ЗаполнитьЗначенияСвойств(НоваяСтрокаНомерГТД, НайденнаяСтрока);
									
									Если МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровОтПокупателя
										ИЛИ МетаданныеДокумента = Метаданные.Документы.ВозвратТоваровОтПокупателя Тогда
										НоваяСтрокаНомерГТД.Количество = (-1) * НайденнаяСтрока.Количество;
									КонецЕсли;
									
									НоваяСтрокаНомерГТД.КлючСвязи = НоваяСтрока.КлючСвязи;
									
								КонецЦикла;
							КонецЕсли;  					
							
						КонецЕсли;
						
					КонецЕсли;
					
					//В случае если у докумената основания в табличной части назначена скидка на номенклатуру
					//а в документе объекте в табличной части нет скидок то установим цену для номенклатуры с 
					//учетом скидок.
					Если ЕстьСкидкаНаценкаОснов И (Не ЕстьСкидкаНаценкаОбъект) Тогда 
						Если (СтрокаОснования.ПроцентАвтоматическихСкидок + СтрокаОснования.ПроцентСкидкиНаценки) > 0 Тогда 
							Если ЕстьКоличество И ЕстьЦена Тогда 
								НоваяСтрока.Цена = СтрокаОснования.Сумма / СтрокаОснования.Количество;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;					
					
					// При вводе документа отгрузки из счета-фактуры
					// устанавливаем только "оставшееся" количество и сумму отгрузки
					Если ВводИзСФ Тогда
						// Для возврата меняем знак количества, суммы и сумм налогов						
						Если ЕстьКоличество Тогда
							//для услуг контроль осуществляться будет по сумме
							//цена будет рассчитыватся также от суммы				
							НоваяСтрока.Количество = ?(ВозвратТоваров, -Количество, Количество); 						
							НоваяСтрока.Цена       = Сумма/Количество;
							НоваяСтрока.Сумма      = ?(ВозвратТоваров,-Сумма,Сумма);		
						Иначе //значит проверка идет для суммы
							НоваяСтрока.Сумма 	   = ?(ВозвратТоваров,-Сумма, Сумма);	
						КонецЕсли;							
						
						// Пересчет табличных частей, в случае ввода на основании документа сч.фактура						
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Объект);
						Если ЕстьАкциз Тогда
							ОбработкаТабличныхЧастей.РассчитатьСуммуАкцизаТабЧасти(НоваяСтрока, Объект);
						КонецЕсли;	
					КонецЕсли;
						
					// При несовпадении флагов расчета налогов между новым документов и документом основанием - пересчитываем показатели
					Если НеобходимостьПересчетаПоФлагамНалогов Тогда
						НоваяСтрока.Сумма = ПересчитатьСуммуПриИзмененииФлаговНалогов(НоваяСтрока.Сумма, НоваяСтрока.СуммаНДС, ?(ВОснованииЕстьАкциз, СтрокаОснования.СуммаАкциза,0),
																		  ОснованиеСуммаВключаетНДС, ОснованиеСуммаВключаетАкциз,
																		  ОбъектСуммаВключаетНДС, ОбъектСуммаВключаетАкциз);																						  
				
					  	Если ЕстьКоличество Тогда												  
						  //	Если есть цена, ее так же необходимо пересчитать
						  Если НоваяСтрока.Количество = 0 Тогда
							  НоваяСтрока.Количество = 1;
						  КонецЕсли;	
						  НоваяСтрока.Цена = НоваяСтрока.Сумма/НоваяСтрока.Количество;
						КонецЕсли;	
					КонецЕсли;					
					
					// Для возврата меняем знак количества, суммы и сумм налогов						
					Если ВозвратТоваров И НЕ ВводИзСФ Тогда
						НоваяСтрока.Сумма 		= -НоваяСтрока.Сумма;
						НоваяСтрока.СуммаНДС	= -НоваяСтрока.СуммаНДС;						
						Если ЕстьКоличество Тогда
							НоваяСтрока.Количество = -НоваяСтрока.Количество;								
						КонецЕсли;
						
						Если ВДокументеЕстьАкциз Тогда
							НоваяСтрока.СуммаАкциза	= -НоваяСтрока.СуммаАкциза;
						КонецЕсли;						
					КонецЕсли;	
				КонецЕсли;
				
				Если ВидДокументаОснования = "ур_РеализацияЗерна" Тогда
						Содержание = СокрЛП(СтрокаОснования.Номенклатура.НаименованиеПолное)+" "+СокрЛП(СтрокаОснования.ЗерноваяРасписка.СерияНомерМСХ);
						НоваяСтрока.Содержание = Содержание;
					//КонецЕсли;					
				КонецЕсли; 
				
				Если ВидОбъекта = "СчетФактураВыданный" И ВидДокументаОснования = "РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС"
					И НоваяСтрока.ОборотПоРеализации <> 0 Тогда
					Продолжить;
				КонецЕсли;
			
				РассчитатьОборотПоРеализацииТабЧасти(НоваяСтрока, Объект);
			КонецЦикла; 
		КонецЕсли;    
		
		Если ВидДокументаОснования = "СчетФактураВыданный"
			И ОбщегоНазначения.ЕстьТабЧастьДокумента("СоставНабора", Объект.Метаданные())
			И ИмяТабЧастиОбъекта = "Товары" И Объект.Товары.Количество() > 0 Тогда
			
			НоваяСтрока.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(Объект);
			НоваяСтрока.КлючСвязи  = 0;                              			
			
			УправлениеЗапасами.ДобавитьСоставНабора(НоваяСтрока, Объект);
		КонецЕсли;
		
	КонецЦикла;		
	
	Если ВидДокументаОснования = "ур_РеализацияЗерна" Тогда
		Для Каждого СтрокаОснования Из Основание.ПроцентыВозврата Цикл
			Содержание = "Вознагрождение "+ СокрЛП(Основание.ПроцентВозврата)+" %";
			НоваяСтрока = Объект["Товары"].Добавить();								
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОснования);
			НоваяСтрока.Содержание = Содержание;
			РассчитатьОборотПоРеализацииТабЧасти(НоваяСтрока, Объект);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличныеЧастиИзДокументаОснования()

// Для документа счет-фактура с установленным признаком УчитыватьНДС процедура проверяет
// заполнение реквизита СтавкаНДС в строках табличных частей и заполняет незаполненные.
// Параметры:
//    УчитыватьНДСОснования - Булево - признак УчитыватьНДС документа-основания.
// Приоритет определения значений ставки НДС, если УчитыватьНДСОснования=Истина:
//    1. Значение реквизита СтавкаНДС из справочника Номенклатура (для таб. частей Товары и Услуги)
//    2. ОсновнаяСтавкаНДС из настроек текущего пользователя
//    3. Ставка "Без НДС"
// Если УчитыватьНДСОснования=Ложь, тогда СтавкаНДС во всех строках заполняется значением "Без НДС"
//
Процедура ПроверитьСтавкиНДСВТабличныхЧастях(Объект, УчитыватьНДСОснования) Экспорт
	
	СтавкаБезНДС = Справочники.СтавкиНДС.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтавкиНДС.Ссылка КАК СтавкаНДС
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.ДляОсвобожденногоОборота = ИСТИНА
	|	И СтавкиНДС.Ставка = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтавкиНДС.МестоРеализацииНеРК
	|";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		СтавкаБезНДС = ВыборкаЗапроса.СтавкаНДС;
	КонецЕсли;
	
	Если НЕ УчитыватьНДСОснования Тогда
		СтавкаНДС = СтавкаБезНДС;
	Иначе
		СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяСтавкаНДС");
		Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
			СтавкаНДС = СтавкаБезНДС;
		КонецЕсли;
	КонецЕсли;
	
	ЗапросНоменклатураСтавкаНДС = Новый Запрос;
	ЗапросНоменклатураСтавкаНДС.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СсылкиСправочникНоменклатура)";
	
	СвойстваНоменклатуры = Новый Соответствие;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("СтавкаНДС", Справочники.СтавкиНДС.ПустаяСсылка());
	
	Если Объект.Товары.Количество() > 0 Тогда
		Если УчитыватьНДСОснования Тогда
			НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				// Определим ставки НДС из справочника Номенклатура
				СписокНоменклатуры = Новый Массив;
				Для Каждого НезаполненнаяСтрока Из НайденныеСтроки Цикл
					СписокНоменклатуры.Добавить(НезаполненнаяСтрока.Номенклатура);
				КонецЦикла;

				СвойстваНоменклатуры.Очистить();
				ЗапросНоменклатураСтавкаНДС.УстановитьПараметр("СсылкиСправочникНоменклатура", СписокНоменклатуры);
				Выборка = ЗапросНоменклатураСтавкаНДС.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат = Новый Структура("СтавкаНДС", Выборка.СтавкаНДС);
					СвойстваНоменклатуры[Выборка.Ссылка] = Результат;
				КонецЦикла;

				Для Каждого НезаполненнаяСтрока Из НайденныеСтроки Цикл
					СтавкаНДСНоменклатуры = СвойстваНоменклатуры[НезаполненнаяСтрока.Номенклатура].СтавкаНДС;
					Если ЗначениеЗаполнено(СтавкаНДСНоменклатуры) Тогда
						НезаполненнаяСтрока.СтавкаНДС = СтавкаНДСНоменклатуры;
					Иначе
						НезаполненнаяСтрока.СтавкаНДС = СтавкаНДС;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			// в документе-основании не установлен признак УчитыватьНДС
			Для Каждого СтрокаТабЧасти Из Объект.Товары Цикл
				СтрокаТабЧасти.СтавкаНДС = СтавкаБезНДС;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Услуги.Количество() > 0 Тогда
		Если УчитыватьНДСОснования Тогда
			НайденныеСтроки = Объект.Услуги.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				// Определим ставки НДС из справочника Номенклатура
				СписокНоменклатуры = Новый Массив;
				Для Каждого НезаполненнаяСтрока Из НайденныеСтроки Цикл
					СписокНоменклатуры.Добавить(НезаполненнаяСтрока.Номенклатура);
				КонецЦикла;

				СвойстваНоменклатуры.Очистить();
				ЗапросНоменклатураСтавкаНДС.УстановитьПараметр("СсылкиСправочникНоменклатура", СписокНоменклатуры);
				Выборка = ЗапросНоменклатураСтавкаНДС.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат = Новый Структура("СтавкаНДС", Выборка.СтавкаНДС);
					СвойстваНоменклатуры[Выборка.Ссылка] = Результат;
				КонецЦикла;

				Для Каждого НезаполненнаяСтрока Из НайденныеСтроки Цикл
					СтавкаНДСНоменклатуры = СвойстваНоменклатуры[НезаполненнаяСтрока.Номенклатура].СтавкаНДС;
					Если ЗначениеЗаполнено(СтавкаНДСНоменклатуры) Тогда
						НезаполненнаяСтрока.СтавкаНДС = СтавкаНДСНоменклатуры;
					Иначе
						НезаполненнаяСтрока.СтавкаНДС = СтавкаНДС;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			// в документе-основании не установлен признак УчитыватьНДС
			Для Каждого СтрокаТабЧасти Из Объект.Услуги Цикл
				СтрокаТабЧасти.СтавкаНДС = СтавкаБезНДС;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если Объект.ОС.Количество() > 0 И ЗначениеЗаполнено(СтавкаНДС) Тогда
		Если УчитыватьНДСОснования Тогда
			НайденныеСтроки = Объект.ОС.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для Каждого НезаполненнаяСтрока Из НайденныеСтроки Цикл
					НезаполненнаяСтрока.СтавкаНДС = СтавкаНДС;
				КонецЦикла;
			КонецЕсли;
		Иначе
			// в документе-основании не установлен признак УчитыватьНДС
			Для Каждого СтрокаТабЧасти Из Объект.ОС Цикл
				СтрокаТабЧасти.СтавкаНДС = СтавкаБезНДС;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если Объект.НМА.Количество() > 1 И ЗначениеЗаполнено(СтавкаНДС) Тогда
		Если УчитыватьНДСОснования Тогда
			НайденныеСтроки = Объект.НМА.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для Каждого НезаполненнаяСтрока Из НайденныеСтроки Цикл
					НезаполненнаяСтрока.СтавкаНДС = СтавкаНДС;
				КонецЦикла;
			КонецЕсли;
		Иначе
			// в документе-основании не установлен признак УчитыватьНДС
			Для Каждого СтрокаТабЧасти Из Объект.НМА Цикл
				СтрокаТабЧасти.СтавкаНДС = СтавкаБезНДС;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;   

КонецПроцедуры

//Функция получает остаток количества(суммы) для указания их в новом документе-основания
//Данные берутся из уже заведенных документов-оснований.
//
Функция ПолучитьОстатокИзСФ(Строка, ИмяТабЧасти, СтруктураОстатков,ВозвратТоваров,ЕстьАкциз, ПоступлениеДопРасходов = Ложь, СвернутаяТаблицаСФ = Неопределено) Экспорт
	
	Перем ТабЧасть;
	
	Отбор = Новый Структура;
	ЕстьКоличество = Истина;	
	
	Если ИмяТабЧасти = "Товары" Тогда
		Отбор.Вставить("Номенклатура",Строка.Номенклатура);		
		Отбор.Вставить("СтавкаНДС",Строка.СтавкаНДС);
		Отбор.Вставить("Цена",Строка.Цена);
		Если ЕстьАкциз Тогда
			Отбор.Вставить("СтавкаАкциза",Строка.СтавкаАкциза);
		КонецЕсли;
		
		Отбор.Вставить("ЕдиницаИзмерения",Строка.ЕдиницаИзмерения);		
			
	ИначеЕсли ИмяТабЧасти = "ОС" Тогда
		Отбор.Вставить("ОсновноеСредство",Строка.ОсновноеСредство);
		Отбор.Вставить("СтавкаНДС",Строка.СтавкаНДС);
		
		ЕстьКоличество = Ложь;
		
	ИначеЕсли ИмяТабЧасти = "НМА" Тогда
		Отбор.Вставить("НематериальныйАктив",Строка.НематериальныйАктив);
		Отбор.Вставить("СтавкаНДС",Строка.СтавкаНДС);
			
		ЕстьКоличество = Ложь;
		
	ИначеЕсли ИмяТабЧасти = "Услуги" Тогда
		Если Не ПоступлениеДопРасходов Тогда
			Отбор.Вставить("Номенклатура",Строка.Номенклатура);
			Отбор.Вставить("Содержание"  ,Строка.Содержание);		
		КонецЕсли;
		
		Отбор.Вставить("СтавкаНДС",Строка.СтавкаНДС);
		Отбор.Вставить("Цена",Строка.Цена);
	КонецЕсли;
	
	//найдем строке в структуре остатков
	Если Не СтруктураОстатков.Свойство(ИмяТабЧасти, ТабЧасть) Тогда
		Возврат 0;
	КонецЕсли;
	
	СтруктураОст = Новый Структура;
	СтруктураОст.Вставить("Количество",0);
	СтруктураОст.Вставить("Сумма",0);
	
	Строки = ТабЧасть.НайтиСтроки(Отбор);
	
	Если СвернутаяТаблицаСФ <> Неопределено Тогда
		СтрокиСФ = СвернутаяТаблицаСФ.НайтиСтроки(Отбор);
	Иначе
		СтрокиСФ = Новый Массив;
	КонецЕсли;
		
	Если Строки.Количество() = 0 Тогда

		Если ЕстьКоличество Тогда			
			СтруктураОст.Количество = Строка.Количество;			
		КонецЕсли;
		СтруктураОст.Сумма = Строка.Сумма;
		
		Возврат СтруктураОст;
		
	КонецЕсли;
	
	Если ЕстьКоличество И СтрокиСФ[0].Количество = 0 Тогда
		 Возврат СтруктураОст;			
	КонецЕсли;
	
	Если ЕстьКоличество  Тогда
		
		Если СтрокиСФ.Количество() > 0 Тогда
			Количество = ?(ВозвратТоваров, СтрокиСФ[0].Количество * (-1), СтрокиСФ[0].Количество);
			Сумма      = ?(ВозвратТоваров, СтрокиСФ[0].Сумма * (-1), СтрокиСФ[0].Сумма);
		Иначе
			Количество = ?(ВозвратТоваров, Строка.Количество * (-1), Строка.Количество);
			Сумма      = ?(ВозвратТоваров, Строка.Сумма * (-1), Строка.Сумма);
		КонецЕсли;
		
		КоличествоВДокумент = Количество - Строки[0].Количество;
		Если КоличествоВДокумент < 0 Тогда
			КоличествоВДокумент = 0;
		КонецЕсли;
		СтруктураОст.Количество = ?(ВозвратТоваров, КоличествоВДокумент * (-1),КоличествоВДокумент);
		
		СуммаВДокумент = Сумма - Строки[0].Сумма;
		Если СуммаВДокумент < 0 Тогда
			СуммаВДокумент = 0;
		КонецЕсли;
		СтруктураОст.Сумма = ?(ВозвратТоваров, СуммаВДокумент * (-1),СуммаВДокумент);
		
		
		Если  ИмяТабЧасти = "Услуги" Тогда
			Сумма  = СуммаВДокумент;
			Если Сумма < 0 Тогда
				Сумма = 0;
			КонецЕсли;	
			СтруктураОст.Сумма = Сумма;
		КонецЕсли;
		
		Если СтрокиСФ.Количество() > 0 Тогда
			СтрокиСФ[0].Количество = СтрокиСФ[0].Количество - КоличествоВДокумент - Строки[0].Количество;
			СтрокиСФ[0].Сумма      = СтрокиСФ[0].Сумма      - СуммаВДокумент      - Строки[0].Сумма;
		КонецЕсли;
				
	Иначе
		СуммаВДокумент  = Строка.Сумма - Строки[0].Сумма;
		Если СуммаВДокумент < 0 Тогда
			СуммаВДокумент = 0;
		КонецЕсли;	
		СтруктураОст.Сумма = СуммаВДокумент;
	КонецЕсли;
	
	Возврат СтруктураОст;	
КонецФункции 
  
//Функиця создает структуры таблицы значений для хранения остатков товаров по счет-фактуре
//
Функция ИнициализацияТаблицыЗначений(ИмяКолонкиТовара = "Номенклатура",ТипКолонки ,ЕстьАкциз = Ложь,ИмяТЧ = "") Экспорт

	ТаблицаСтрок = Новый ТаблицаЗначений;
	ТаблицаСтрок.Колонки.Добавить(ИмяКолонкиТовара, ТипКолонки);
	ТаблицаСтрок.Колонки.Добавить("Сумма");
	ТаблицаСтрок.Колонки.Добавить("СуммаНДС");
	
	Если ИмяКолонкиТовара = "Номенклатура"  Тогда
		ТаблицаСтрок.Колонки.Добавить("Количество");		
		Если ИмяТЧ = "Товары" ИЛИ ИмяТЧ = "Услуги" Тогда
			ТаблицаСтрок.Колонки.Добавить("Цена");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТЧ = "Товары" Тогда
		Если Метаданные.Справочники.Найти("ЕдиницыИзмерения") <> Неопределено Тогда
			ТаблицаСтрок.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
		Иначе
			ТаблицаСтрок.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТЧ = "Услуги" Тогда
		ТаблицаСтрок.Колонки.Добавить("Содержание");
	КонецЕсли;

	ТаблицаСтрок.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));      
	
	Если ЕстьАкциз Тогда
		ТаблицаСтрок.Колонки.Добавить("СтавкаАкциза", Новый ОписаниеТипов("СправочникСсылка.СтавкиАкциза"));		
		ТаблицаСтрок.Колонки.Добавить("СуммаАкциза");      
	КонецЕсли;
	
	
	Возврат ТаблицаСтрок;
	
КонецФункции // ИнициализацияТаблицыСтрок()

//Функция получает список товаров из счет-фактуры, которые уже введены в документе отгрузки.
//
Функция ПолучитьСписокТоваровПодтвержденныхОтгрузками(СчетФактура, ЕстьАкциз)Экспорт
	
	СтруктураОстатков = Новый Структура;
	
	Товары = ИнициализацияТаблицыЗначений(,Новый ОписаниеТипов("СправочникСсылка.Номенклатура"), ЕстьАкциз, "Товары");
	Услуги = ИнициализацияТаблицыЗначений(,Новый ОписаниеТипов("СправочникСсылка.Номенклатура"),,"Услуги");
	ОС     = ИнициализацияТаблицыЗначений("ОсновноеСредство",Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	НМА    = Неопределено;
	Если Метаданные.Справочники.Найти("НематериальныеАктивы") <> Неопределено Тогда
		НМА    = ИнициализацияТаблицыЗначений("НематериальныйАктив", Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));
	КонецЕсли;
	СтруктураОстатков.Вставить("Товары", Товары);
	СтруктураОстатков.Вставить("Услуги", Услуги);
	СтруктураОстатков.Вставить("ОС"    , ОС);
	Если НМА <> Неопределено Тогда
		СтруктураОстатков.Вставить("НМА"   , НМА);
	КонецЕсли;
	
	Для Каждого СтрЗначение ИЗ  СтруктураОстатков Цикл
		Для Каждого Основание ИЗ СчетФактура.ДокументыОснования Цикл
		
			Если НЕ ЗначениеЗаполнено(Основание.ДокументОснование) Тогда
				Продолжить;
			КонецЕсли;
			МетаданныеОснования 	= Основание.ДокументОснование.Метаданные();
			ИмяДокументаОснования 	= МетаданныеОснования.Имя;
		
			Если СтрЗначение.Ключ = "Услуги" И ИмяДокументаОснования = "ПоступлениеДопРасходов"	Тогда
				НоваяСтрока = СтруктураОстатков.Услуги.Добавить();				
				НоваяСтрока.Содержание  = Основание.ДокументОснование.Содержание;
				НоваяСтрока.СтавкаНДС   = Основание.ДокументОснование.СтавкаНДС;
				НоваяСтрока.Сумма       = Основание.ДокументОснование.Сумма;									
				НоваяСтрока.СуммаНДС    = Основание.ДокументОснование.СуммаНДС;									
				НоваяСтрока.Количество  = 0;				
			ИначеЕсли СтрЗначение.Ключ = "НМА" И ИмяДокументаОснования = "ПередачаНМА" Тогда
				НоваяСтрока = СтруктураОстатков.НМА.Добавить();
				НоваяСтрока.НематериальныйАктив  = Основание.ДокументОснование.НематериальныйАктив;
				НоваяСтрока.СтавкаНДС 	= Основание.ДокументОснование.СтавкаНДС;
				НоваяСтрока.СуммаНДС    = Основание.ДокументОснование.СуммаНДС;									
				НоваяСтрока.Сумма     	= Основание.ДокументОснование.Сумма;			
			ИначеЕсли  ИмяДокументаОснования = "РеализацияУслугПоПереработке" И СтрЗначение.Ключ = "Товары" Тогда
				Для Каждого  Строка Из Основание.ДокументОснование["Услуги"] Цикл
					НоваяСтрока = СтрЗначение.Значение.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				КонецЦикла;   				
			ИначеЕсли ОбщегоНазначения.ЕстьТабЧастьДокумента(СтрЗначение.Ключ, МетаданныеОснования) Тогда
				Для Каждого  Строка Из Основание.ДокументОснование[СтрЗначение.Ключ] Цикл
					НоваяСтрока = СтрЗначение.Значение.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

					Если  СтрЗначение.Ключ = "Товары" И ИмяДокументаОснования = "ОтчетКомиссионераОПродажах" Тогда
						НоваяСтрока.СтавкаНДС = Строка.СтавкаНДСВознаграждения;
						НоваяСтрока.Сумма     = Строка.СуммаВознаграждения;			
						НоваяСтрока.СуммаНДС  = Строка.СуммаНДСВознаграждения;
					КонецЕсли; 					
					
				КонецЦикла; 				
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;
	
	//далее необходимо свернуть по измерениям
	Если СтруктураОстатков.Товары.Количество() > 1  И ЕстьАкциз Тогда
		СтруктураОстатков.Товары.Свернуть("Номенклатура,Цена,СтавкаНДС,СтавкаАкциза, ЕдиницаИзмерения", "Количество,Сумма");
		
	ИначеЕсли СтруктураОстатков.Товары.Количество() > 1  И Не ЕстьАкциз Тогда
		СтруктураОстатков.Товары.Свернуть("Номенклатура,Цена,СтавкаНДС, ЕдиницаИзмерения", "Количество, Сумма");	
	КонецЕсли;
			
	Если СтруктураОстатков.Услуги.Количество() > 1 Тогда
		СтруктураОстатков.Услуги.Свернуть("Номенклатура,Цена,Содержание,СтавкаНДС", "Количество, Сумма");
	КонецЕсли;
	
	Если СтруктураОстатков.ОС.Количество() > 1 Тогда
		СтруктураОстатков.ОС.Свернуть("ОсновноеСредство,СтавкаНДС", "Сумма");
	КонецЕсли;
	
	Если НМА <> Неопределено Тогда
		Если СтруктураОстатков.НМА.Количество() > 1 Тогда
			СтруктураОстатков.НМА.Свернуть("НематериальныйАктив,СтавкаНДС", "Сумма");
		КонецЕсли;
	КонецЕсли;
        	
	Возврат СтруктураОстатков;
КонецФункции

//Процедура добавлят документ-основание в указанную счет-фактуру
//вызывается в документах-основания в процедуре ПослеЗаписи()
//
Процедура ЗаполнитьДокументОснованиеВСФ(ДокументОбъект, Основание) Экспорт
	
	//документ документ основания
	Основание.ДокументОснование = ДокументОбъект.Ссылка;
	НоваяСтрока = Основание.ДокументыОснования.Добавить();
	НоваяСтрока.ДокументОснование = ДокументОбъект.Ссылка;
	Попытка
		Основание.Записать();
		#Если Клиент Тогда 
			Сообщить("Для счет-фактуры: """ + Основание.Ссылка + """ добавлен документ основание, соответствующий текущему документу");
		#КонецЕсли
		
	Исключение
		#Если Клиент Тогда 
			Сообщить("Не удалось записать счет-фактуру");
		#КонецЕсли
		
	КонецПопытки 
	
КонецПроцедуры

//Процедура очищает данные табличных частей из документов
//счетов фактур.
//
Процедура ОчиститьТабЧасти(ДокументОбъект) Экспорт
	//сначала очистим все табличнеы части документа
	
	Если ДокументОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТабЧасть Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
		Если ТабЧасть.Имя = "ДокументыОснования" Тогда
			Продолжить;
		КонецЕсли;
		ДокументОбъект[ТабЧасть.имя].Очистить();
	КонецЦикла;

КонецПроцедуры

Функция ПроверитьСоответствиеРеквизитовСчетаФактурыИДокументовОснований(ДокументСчетФактура, ДокументОснование, Отказ)
	
	
	// Если счет-фактура выписывался на аванс и является более первичным
	// приходные документы не котролируем, так как они не будут синхронизироваться
	// с счетом-фактурой при проведении
	
	Если НЕ ДокументСчетФактура.ПодтвержденДокументамиОтгрузки Тогда
		Возврат Истина;
	КонецЕсли;
	
	
	РезультатПроверки   = Истина;	
	Заголовок 			= СокрЛП(ДокументСчетФактура);
	
	// Проверка ключевых реквизитов
	
	МетаданныеДокументаОснования = ДокументОснование.Метаданные();
		
	ЕстьРеквизитОрганизация 	 		 = ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", 		МетаданныеДокументаОснования);
	ЕстьРеквизитСтруктурноеПодразделение = ОбщегоНазначения.ЕстьРеквизитДокумента("СтруктурноеПодразделение", МетаданныеДокументаОснования);
	ЕстьРеквизитКонтрагент 		 		 = ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", 		МетаданныеДокументаОснования);
	ЕстьРеквизитДоговор 		 		 = ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокументаОснования);
	ЕстьРеквизитВалютаДокумента  		 = ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", 	МетаданныеДокументаОснования);
	
	Если ЕстьРеквизитОрганизация И НЕ ДокументСчетФактура.Организация = ДокументОснование.Организация Тогда
		ТекстСообщения = "Значение организации: """ + СокрЛП(ДокументОснование.Организация) +  """ не соответствует значению, установленному в счете-фактуре - " + СокрЛП(ДокументСчетФактура.Организация);
		ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщения, Отказ, Заголовок);
		
		РезультатПроверки = Ложь;
	КонецЕсли;	
	
	Если ЕстьРеквизитСтруктурноеПодразделение И НЕ ДокументСчетФактура.СтруктурноеПодразделение = ДокументОснование.СтруктурноеПодразделение Тогда
		ТекстСообщения = "Значение структурноого подразделения: """ + СокрЛП(?(ЗначениеЗаполнено(ДокументОснование.СтруктурноеПодразделение), ДокументОснование.СтруктурноеПодразделение, "головное подразделение")) +  """ не соответствует значению, установленному в счете-фактуре - " + СокрЛП(?(ЗначениеЗаполнено(ДокументСчетФактура.СтруктурноеПодразделение), ДокументСчетФактура.СтруктурноеПодразделение, "головное подразделение"));
		ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщения, Отказ, Заголовок);
		
		РезультатПроверки = Ложь;
	КонецЕсли;	
	
	Если ЕстьРеквизитКонтрагент И НЕ ДокументСчетФактура.Контрагент = ДокументОснование.Контрагент Тогда
		ТекстСообщения = "Значение контрагента: """ + СокрЛП(ДокументОснование.Контрагент) + """ не соответствует значению, установленному в счете-фактуре - " + СокрЛП(ДокументСчетФактура.Контрагент);
		ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщения, Отказ, Заголовок);
		
		РезультатПроверки = Ложь;
	КонецЕсли;	
	
	Если ЕстьРеквизитДоговор И НЕ ДокументСчетФактура.ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента Тогда
		ТекстСообщения = "Значение договора контрагента: """ + СокрЛП(ДокументОснование.ДоговорКонтрагента ) + """ не соответствует значению, установленному в счете-фактуре - " + СокрЛП(ДокументСчетФактура.ДоговорКонтрагента);
		ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщения, Отказ, Заголовок);
		
		РезультатПроверки = Ложь;
	КонецЕсли;	
	
	Если ЕстьРеквизитВалютаДокумента И НЕ ДокументСчетФактура.ВалютаДокумента = ДокументОснование.ВалютаДокумента Тогда
		ТекстСообщения = "Значение валюты документа: """ + СокрЛП(ДокументОснование.ВалютаДокумента) + """ не соответствует значению, установленному в счете-фактуре - " + СокрЛП(ДокументСчетФактура.ВалютаДокумента);
		ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщения, Отказ, Заголовок);
		
		РезультатПроверки = Ложь;
	КонецЕсли;			
		
	Возврат РезультатПроверки;
КонецФункции

Функция ЗаполнитьРеквизитыШапкиСчетаФактуры(ОбъектСчетаФактуры, ДокументОснования, ВидСчетаФактуры, Отказ = Неопределено)
	РезультатПроверки = Истина;			
	
	Если ДокументОснования = Неопределено Тогда
		Возврат РезультатПроверки;
	Конецесли;	
	

	// Реквизиты шапки документа могут обновляться только в случае, если 
	// для счета-фактуры зарегистрирован единственный документ-основание.
	// В остальных случаях - просто контроллируется совпадение ключевых реквизитов при проведении счета-фактуры
	Если ОбъектСчетаФактуры.ДокументыОснования.Количество() < 2 Тогда
		// заполнение реквизитов шапки
		    МетаданныеДокумента = ДокументОснования.Метаданные();
			// Организация.
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда				
				ОбъектСчетаФактуры.Организация = ДокументОснования.Организация;
			КонецЕсли;
			
			// СтруктурноеПодразделение.
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("СтруктурноеПодразделение", МетаданныеДокумента) Тогда				
				ОбъектСчетаФактуры.СтруктурноеПодразделение = ДокументОснования.СтруктурноеПодразделение;
			КонецЕсли;
			
			// Контрагент.
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента) Тогда				
				ОбъектСчетаФактуры.Контрагент = ДокументОснования.Контрагент;
				// Поставщик и покупатель, с учетом возможности указания головного предприятия
				Если ВидСчетаФактуры = "СчетФактураВыданный" Тогда
					ИмяРеквизитаПокупатель = "Контрагент";
					ИмяРеквизитаПоставщик  = "Организация";
				Иначе	
					ИмяРеквизитаПокупатель = "Организация";
					ИмяРеквизитаПоставщик  = "Контрагент";
				КонецЕсли;				
				
				Если НЕ ОбъектСчетаФактуры.Покупатель = ДокументОснования[ИмяРеквизитаПокупатель] Тогда
					// проверим на указание головного предприятия. если не соответствует ни тому, ни другому - перезапишем
					Покупатель  = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(ДокументОснования[ИмяРеквизитаПокупатель]);
					Если НЕ ОбъектСчетаФактуры.Покупатель = Покупатель Тогда
						ОбъектСчетаФактуры.Покупатель = Покупатель;						
					КонецЕсли; 					
				КонецЕсли; 
				Если НЕ ОбъектСчетаФактуры.Поставщик = ДокументОснования[ИмяРеквизитаПоставщик] Тогда
					// проверим на указание головного предприятия. если не соответствует ни тому, ни другому - перезапишем
					Поставщик  = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(ДокументОснования[ИмяРеквизитаПоставщик]);
					Если НЕ ОбъектСчетаФактуры.Поставщик = Поставщик Тогда
						ОбъектСчетаФактуры.Поставщик = Поставщик;						
					КонецЕсли; 					
				КонецЕсли;
				
				Если ВидСчетаФактуры = "СчетФактураВыданный" Тогда
					Если Не ЗначениеЗаполнено(ОбъектСчетаФактуры.СчетКонтрагента) 
						ИЛИ  ОбъектСчетаФактуры.СчетКонтрагента.Владелец <> ДокументОснования.Контрагент Тогда
						ОбъектСчетаФактуры.СчетКонтрагента = ДокументОснования.Контрагент.ОсновнойБанковскийСчет;
					КонецЕсли;	
				КонецЕсли;
				
			КонецЕсли;
			
			// ДоговорКонтрагента.
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента) Тогда
				ДоговорКонтрагента = ДокументОснования.ДоговорКонтрагента;
				ОбъектСчетаФактуры.ДоговорКонтрагента = ДоговорКонтрагента;
			КонецЕсли;
			
			// Валюта
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда				
				ОбъектСчетаФактуры.ВалютаДокумента = ДокументОснования.ВалютаДокумента;
			КонецЕсли;
			
			// КурсВзаиморасчетов.
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
				ОбъектСчетаФактуры.КурсВзаиморасчетов = ДокументОснования.КурсВзаиморасчетов;
			КонецЕсли;
			
			// КратностьВзаиморасчетов.
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				ОбъектСчетаФактуры.КратностьВзаиморасчетов = ДокументОснования.КратностьВзаиморасчетов;
			КонецЕсли;			
			
			// Флаги налогов
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) Тогда				
				ОбъектСчетаФактуры.СуммаВключаетНДС = ДокументОснования.СуммаВключаетНДС;
			КонецЕсли;
			
			Если ВидСчетаФактуры = "СчетФактураВыданный" Тогда
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента) Тогда				
					ОбъектСчетаФактуры.УчитыватьАкциз = ДокументОснования.УчитыватьАкциз;
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента) Тогда				
					ОбъектСчетаФактуры.СуммаВключаетАкциз = ДокументОснования.СуммаВключаетАкциз;
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоверенностьНомер", МетаданныеДокумента) Тогда				
					ОбъектСчетаФактуры.ДоверенностьНомер = ДокументОснования.ДоверенностьНомер;
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоверенностьДата", МетаданныеДокумента) Тогда				
					ОбъектСчетаФактуры.ДоверенностьДата = ДокументОснования.ДоверенностьДата;
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоверенностьВыдана", МетаданныеДокумента) Тогда				
					ОбъектСчетаФактуры.ДоверенностьВыдана = ДокументОснования.ДоверенностьВыдана;
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоверенностьЛицо", МетаданныеДокумента) Тогда				
					ОбъектСчетаФактуры.ДоверенностьЛицо = ДокументОснования.ДоверенностьЛицо;
				КонецЕсли; 
				
			КонецЕсли;
		Иначе
			РезультатПроверки = ПроверитьСоответствиеРеквизитовСчетаФактурыИДокументовОснований(ОбъектСчетаФактуры, ДокументОснования, Отказ);			
		КонецЕсли; // Если СчетФактура.ДокументыОснования.Количество() < 2 Тогда	
		
	Возврат РезультатПроверки;	
КонецФункции // ЗаполнитьРеквизитыШапкиСчетаФактуры

Процедура ПерезаполнитьСчетФактуру(ОбъектСчетаФактуры, ДокументОтгрузки, ВидСчетаФактуры, Отказ)Экспорт
	
	
	Если ДокументОтгрузки = Неопределено Тогда
		РезультатПроверки = Истина;
		// С учетом всех документов оснований
		Для Каждого Основание Из ОбъектСчетаФактуры.ДокументыОснования Цикл
			РезультатПроверки = РезультатПроверки И ЗаполнитьРеквизитыШапкиСчетаФактуры(ОбъектСчетаФактуры, Основание.ДокументОснование, ВидСчетаФактуры,Отказ);
		КонецЦикла;	
	Иначе
		// заполнение из указанного первичного документа
		РезультатПроверки = ЗаполнитьРеквизитыШапкиСчетаФактуры(ОбъектСчетаФактуры, ДокументОтгрузки, ВидСчетаФактуры, Отказ)
	КонецЕсли;
	
	// Обнаружены нарушения в реквизитах шапки
	Если РезультатПроверки = ЛОЖЬ Тогда
		Возврат;
	КонецЕсли;
	
	// Табличная часть перезаполняется в любом случае.	
	//очистим таб.части
	ОчиститьТабЧасти(ОбъектСчетаФактуры);
	
	Для Каждого Основание Из ОбъектСчетаФактуры.ДокументыОснования Цикл
		ЗаполнитьТабличныеЧастиИзДокументаОснования(ОбъектСчетаФактуры, Основание.ДокументОснование);
		ПроверитьСтавкиНДСВТабличныхЧастях(ОбъектСчетаФактуры, Основание.ДокументОснование.УчитыватьНДС);
	КонецЦикла;
	
	ОбъектСчетаФактуры.СвернутьТабличныеЧасти();
	
	Попытка
		Если ОбъектСчетаФактуры.Проведен Тогда 
			ОбъектСчетаФактуры.Записать(РежимЗаписиДокумента.Проведение);
		Иначе 
			ОбъектСчетаФактуры.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	Исключение
		#Если Клиент Тогда
			Сообщить("Счет-фактура не записан!");
			Отказ = Истина;
		#КонецЕсли
	КонецПопытки		
КонецПроцедуры

//Процедура синхронизирует данные документа отгрузки и подчинненой ему счет-фактуры
//
Процедура СинхронизироватьДанныеДокументаИСчетаФактуры(ДокументОбъект, Отказ, ВидСчетаФактуры = "СчетФактураВыданный") Экспорт
	
	//Если документ основания удален, то нет необходимости синхронизировать
	Если ДокументОбъект.ПометкаУдаления Тогда 
		Возврат;
	КонецЕсли;
		
	//Попытаемся найти счет-фактуру
	СчетФактура = ОбщегоНазначения.НайтиПодчиненныйДокумент(ДокументОбъект.Ссылка, ВидСчетаФактуры);
	
	Если СчетФактура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактура) И СчетФактура.ПодтвержденДокументамиОтгрузки Тогда
		
		НеобходимВыводСообщения = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ВыводитьСообщенияДляСчетовФактур");
		Если НеобходимВыводСообщения Тогда
			Если ВидСчетаФактуры = "СчетФактураВыданный" Тогда 
				#Если Клиент Тогда	
					Сообщить("Для документа отгрузки зарегистрирован счет-фактура: " + """" + СчетФактура + """, данные счета-фактуры перезаполнены данными документа-основания");
				Иначе 		
					Сообщить("Для документа поступления зарегистрирован счет-фактура: " + """" + СчетФактура + """, данные счета-фактуры перезаполнены данными документа-основания");
				#КонецЕсли 
			КонецЕсли;			
		КонецЕсли;
		
		ОбъектСчетаФактуры = СчетФактура.ПолучитьОбъект();
		
		ПерезаполнитьСчетФактуру(ОбъектСчетаФактуры, ДокументОбъект, ВидСчетаФактуры, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры    //СинхронизироватьДанныеДокументаИСчетаФактуры() 

// Возвращает значение плательщика НДС для Счета0фактуры, в зависимости
// от настройки "Указывать реквизиты головной организации в счете-фактуре"
// конкретного контрагента или организации
//
Функция ПолучитьПлательщикаНДСВСчетеФактуре(ОрганизацияКонтрагент) Экспорт
	ПлательщикНДС = ОрганизацияКонтрагент;
	// если для Организации/контрагента установлен признак  "Указывать реквизиты головной организации в счете-фактуре"
	// то возвращаем значение головной организации/головного контрагента
	Если ТипЗнч(ОрганизацияКонтрагент) = Тип("СправочникСсылка.Контрагенты")  Тогда
		Если ОрганизацияКонтрагент.УказыватьРеквизитыГоловнойОрганизацииВСчетеФактуре Тогда
			ПлательщикНДС = ОрганизацияКонтрагент.ГоловнойКонтрагент;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОрганизацияКонтрагент) = Тип("СправочникСсылка.Организации")  Тогда
		Если ОрганизацияКонтрагент.УказыватьРеквизитыГоловнойОрганизацииВСчетеФактуре Тогда
			ПлательщикНДС = ОрганизацияКонтрагент.ГоловнаяОрганизация;
		КонецЕсли;	
	КонецЕсли; 
	
    Возврат ПлательщикНДС
КонецФункции // ПолучитьПлательщикаНДСВСчетеФактуре(ОрганизацияКонтрагент)

// Возвращает таблицу по участникам совместной деятельности 
// 
//
Функция СформироватьТаблицуНДСПоУчастникамСовместнойДеятельности(СтруктураШапкиДокумента, ТаблицаНДС, ТаблицаПоУчастникамСовместнойДеятельности, ЕстьОборотПоРеализации, ЕстьАкциз) Экспорт
	
	Таблица = ТаблицаНДС.СкопироватьКолонки();
	Таблица.Колонки.Добавить("УчастникСовместнойДеятельности");
	Для Каждого СтрокаДок Из ТаблицаНДС Цикл
		// запоминаем суммы подлежащие распределению		
		НДС         	      = СтрокаДок.НДС;
		НДСВал                = СтрокаДок.НДСВал;
		Сумма    	          = СтрокаДок.Сумма;		
		СуммаВал              = СтрокаДок.СуммаВал;		
		
		Если ЕстьАкциз Тогда 
			Акциз 		= СтрокаДок.Акциз;
			АкцизВал 	= СтрокаДок.АкцизВал;
		Иначе
			Акциз = 0;
			АкцизВал = 0;
		КонецЕсли;
		
		СуммаБезНДС 	= СтрокаДок.СуммаБезНДС;
		СуммаБезНДСВал 	= СтрокаДок.СуммаБезНДСВал;

		Если ЕстьОборотПоРеализации Тогда 
			ОборотПоРеализации = СтрокаДок.ОборотПоРеализации;
			ОборотПоРеализацииВал = СтрокаДок.ОборотПоРеализацииВал;
		Иначе	
			ОборотПоРеализации = 0;
			ОборотПоРеализацииВал = 0;
		КонецЕсли;

		Количество = ТаблицаПоУчастникамСовместнойДеятельности.Количество();

		Для Каждого СтрокаДокУчастников Из ТаблицаПоУчастникамСовместнойДеятельности Цикл 
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДок); 
			
			Количество = Количество - 1;
							
			Если Количество = 0 Тогда 
				// если участников СД нет или это последняя строка, то списываем всю сумму
				НоваяСтрока.СуммаБезНДС 	= СуммаБезНДС;
				НоваяСтрока.СуммаБезНДСВал 	= СуммаБезНДСВал;
				
				Если ЕстьАкциз Тогда 
					НоваяСтрока.Акциз 		= Акциз;
					НоваяСтрока.АкцизВал 	= АкцизВал;
				КонецЕсли;
			    				
				НоваяСтрока.НДС 	= НДС;			
				НоваяСтрока.НДСВал 	= НДСВал;			
				
				НоваяСтрока.Сумма 		= Сумма;
				НоваяСтрока.СуммаВал 	= СуммаВал;
				
				Если ЕстьОборотПоРеализации Тогда
					НоваяСтрока.ОборотПоРеализации = ОборотПоРеализации;
					НоваяСтрока.ОборотПоРеализацииВал = ОборотПоРеализацииВал;
				КонецЕсли;
				
			Иначе 
				КоэффициентУчастия = ?(СтрокаДокУчастников.СуммаДолейУчастия = 0, 0 ,СтрокаДокУчастников.ДоляУчастия/СтрокаДокУчастников.СуммаДолейУчастия);
				
				НоваяСтрока.СуммаБезНДС 	= Окр((СтрокаДок.СуммаБезНДС) *КоэффициентУчастия,2);
				НоваяСтрока.СуммаБезНДСВал 	= Окр((СтрокаДок.СуммаБезНДСВал) *КоэффициентУчастия,2);
			
				Если ЕстьАкциз Тогда 
					НоваяСтрока.Акциз 		= Окр(СтрокаДок.Акциз*КоэффициентУчастия,2);				
					НоваяСтрока.АкцизВал 	= Окр(СтрокаДок.АкцизВал*КоэффициентУчастия,2);				
				КонецЕсли;
				
				НоваяСтрока.Сумма 		= Окр(СтрокаДок.Сумма *КоэффициентУчастия,2);
				НоваяСтрока.СуммаВал 	= Окр(СтрокаДок.СуммаВал *КоэффициентУчастия,2);
								
				НоваяСтрока.НДС = Окр(СтрокаДок.НДС *КоэффициентУчастия, 2);			
				НоваяСтрока.НДСВал = Окр(СтрокаДок.НДСВал *КоэффициентУчастия, 2);			
								
				Если ЕстьОборотПоРеализации Тогда
					НоваяСтрока.ОборотПоРеализации = Окр(СтрокаДок.ОборотПоРеализации * КоэффициентУчастия, 2);
					НоваяСтрока.ОборотПоРеализацииВал = Окр(СтрокаДок.ОборотПоРеализацииВал * КоэффициентУчастия, 2);
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяСтрока.УчастникСовместнойДеятельности = СтрокаДокУчастников.УчастникСовместнойДеятельности;
			
			// для обработки ошибок округления
			Сумма 		= Сумма - НоваяСтрока.Сумма;
			СуммаВал	= СуммаВал - НоваяСтрока.СуммаВал;
			
			СуммаБезНДС 	= СуммаБезНДС - НоваяСтрока.СуммаБезНДС;
			СуммаБезНДСВал 	= СуммаБезНДСВал - НоваяСтрока.СуммаБезНДСВал;
			
			НДС 		= НДС - НоваяСтрока.НДС;
			НДСВал 		= НДСВал - НоваяСтрока.НДСВал;
			
			Если ЕстьАкциз Тогда 
				Акциз 		= Акциз - НоваяСтрока.Акциз;
				АкцизВал 	= АкцизВал - НоваяСтрока.АкцизВал;
			КонецЕсли;
			
			Если ЕстьОборотПоРеализации Тогда
				ОборотПоРеализации = ОборотПоРеализации - НоваяСтрока.ОборотПоРеализации;
				ОборотПоРеализацииВал = ОборотПоРеализацииВал - НоваяСтрока.ОборотПоРеализацииВал;
			КонецЕсли;					
		КонецЦикла;		
	КонецЦикла;
	
	Возврат Таблица	
	
КонецФункции

#Если Клиент Тогда

// Выполняет общие для всех документов действия при нажатии на гиперссылку на Счет-фактуру
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ФормаДокумента  - форма документа.
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура ВвестиСчетФактуру(ДокументОбъект, ФормаДокумента, ВидСчетаФактуры = "СчетФактураВыданный") Экспорт

	Если (НЕ ДокументОбъект.Проведен) и (НЕ ДокументОбъект.ПометкаУдаления) Тогда

		Ответ = Вопрос("Счет-фактуру нельзя вводить на основании не проведенного документа! Провести документ?", РежимДиалогаВопрос.ДаНет);

		Если Ответ = КодВозвратаДиалога.Да Тогда

			Попытка
				// выполняем проведение документа, через режим записи в форме. Так как необходима отработка событий формы.
				ФормаДокумента.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
			Исключение
				Возврат;
			КонецПопытки;

		Иначе
			Возврат;
		КонецЕсли;

	КонецЕсли;

	//Попытаемся найти счет-фактуру
	СчетФактура = ОбщегоНазначения.НайтиПодчиненныйДокумент(ДокументОбъект.Ссылка, ВидСчетаФактуры);

	ОбъектСчетаФактуры = Неопределено;

	//Если потерпели неудачу, то необходимо ввести новый документ 
	Если (НЕ ЗначениеЗаполнено(СчетФактура))
	   И (НЕ ДокументОбъект.ПометкаУдаления) Тогда
	   
	   //Вводим новый документ на основании нашего
		Если ДокументОбъект.Модифицированность() Тогда
			Предупреждение("Документ был изменен! Сначала следует записать документ!");
			Возврат;
		КонецЕсли;
		
		//выведем пользователю список вариантов, для ввода СФ
		СписокДействийВводСФ = Новый СписокЗначений();
		СписокДействийВводСФ.Добавить("ВвестиНовыйСчетФактуру", "Ввести новый счет-фактуру");
		СписокДействийВводСФ.Добавить("ДополнитьСуществующийСчетФактуру", "Дополнить существующий счет-фактуру");
		
		ВыбранныйВариантВводаСФ = ФормаДокумента.ВыбратьИзМеню(СписокДействийВводСФ,ФормаДокумента.ТекущийЭлемент);
		Если ВыбранныйВариантВводаСФ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ВыбранныйВариантВводаСФ.Значение = "ВвестиНовыйСчетФактуру" Тогда
			ОбъектСчетаФактуры = Документы[ВидСчетаФактуры].СоздатьДокумент();
			ОбъектСчетаФактуры.Заполнить(ДокументОбъект); 
		Иначе //ДополнитьСуществующийСФ
			МетаданныеДокумента = ДокументОбъект.Метаданные();
			ФормаВыбора = Документы[ВидСчетаФактуры].ПолучитьФормуВыбора(, ,);
			ФормаВыбора.РежимВыбора = Истина;
			
			Если ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
				ФормаВыбора.Отбор.Организация.Значение      = ДокументОбъект.Организация;
				ФормаВыбора.Отбор.Организация.Использование = Истина;		
			КонецЕсли;	
			
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента)  Тогда
				ФормаВыбора.Отбор.Контрагент.Значение      = ДокументОбъект.Контрагент;
				ФормаВыбора.Отбор.Контрагент.Использование = Истина;		
			КонецЕсли;	
			
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента)  Тогда
				ФормаВыбора.Отбор.ДоговорКонтрагента.Значение      = ДокументОбъект.ДоговорКонтрагента;
				ФормаВыбора.Отбор.ДоговорКонтрагента.Использование = Истина;		
			КонецЕсли;
			ДокументСсылка = ФормаВыбора.ОткрытьМодально();
			
			Если Не ДокументСсылка = Неопределено Тогда
				ОбъектСчетаФактуры = ДокументСсылка.ПолучитьОбъект();
				//добавим документ основания
				НовСтрокаОснований = ОбъектСчетаФактуры.ДокументыОснования.Добавить();
				НовСтрокаОснований.ДокументОснование = ДокументОбъект.Ссылка;
				//добавить данные из текущего документа
				УчетНДСиАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(ОбъектСчетаФактуры, ДокументОбъект.Ссылка);		
				ОбъектСчетаФактуры.СвернутьТабличныеЧасти();
			КонецЕсли;		
		КонецЕсли		
		
	ИначеЕсли ЗначениеЗаполнено(СчетФактура) Тогда
		СписокДействийВводСФ = Новый СписокЗначений();
		СписокДействийВводСФ.Добавить("ОткрытьСуществующийДокумент", 	 "Открыть документ");
		СписокДействийВводСФ.Добавить("ВыписатьИсправленныйСчетФактуру", "Выписать исправленный счет-фактуру");
			
		ВыбранныйВариантВводаСФ = ФормаДокумента.ВыбратьИзМеню(СписокДействийВводСФ,ФормаДокумента.ТекущийЭлемент);
		Если ВыбранныйВариантВводаСФ = Неопределено Тогда
			Возврат;
		КонецЕсли;		                                  			
			
		Если ВыбранныйВариантВводаСФ.Значение = "ОткрытьСуществующийДокумент" Тогда
			ОбъектСчетаФактуры = СчетФактура.ПолучитьОбъект();
		Иначе
			ОбъектСчетаФактуры = Документы[ВидСчетаФактуры].СоздатьДокумент();
			ОбъектСчетаФактуры.Заполнить(ДокументОбъект.Ссылка);
			ОбъектСчетаФактуры.ВидСчетаФактуры 		= Перечисления.ВидыСчетовФактур.Исправленный;
			ОбъектСчетаФактуры.ОсновнойСчетФактура 	= СчетФактура;
		КонецЕсли;		
	Иначе
		Предупреждение("На основании документов, помеченных на удаление, ввод счетов-фактур не предусмотрен.");
	КонецЕсли;

	Если ОбъектСчетаФактуры <> Неопределено Тогда
		// Откроем форму для редактирования счета-фактуры
		ФормаОбъекта = ОбъектСчетаФактуры.ПолучитьФорму( , ФормаДокумента, Строка(ДокументОбъект));
		ФормаОбъекта.Открыть();
		Если ОбъектСчетаФактуры.Модифицированность() Тогда
			ФормаОбъекта.Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ВвестиСчетФактуру()

#КонецЕсли

Процедура СвернутьТабличныеЧастиСФ(ТабличнаяЧастьСФ, ИмяТабличнойЧасти, ВидСчетаФактуры) Экспорт
	
	Если ТабличнаяЧастьСФ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		ТабличнаяЧастьСФ.Свернуть("Номенклатура, Цена, СтавкаНДС, ЕдиницаИзмерения, Коэффициент" + ?(ВидСчетаФактуры = "СчетФактураВыданный", ", СтавкаАкциза", ""),
		                          "Количество, Сумма, СуммаНДС, ОборотПоРеализации" + ?(ВидСчетаФактуры = "СчетФактураВыданный", ", СуммаАкциза", ""));
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Услуги" Тогда
		ТабличнаяЧастьСФ.Свернуть("Номенклатура, Содержание, Цена, СтавкаНДС", "Количество, Сумма, СуммаНДС, ОборотПоРеализации");
	КонецЕсли;

	Если ИмяТабличнойЧасти = "ОС" Тогда
		ТабличнаяЧастьСФ.Свернуть("ОсновноеСредство, СтавкаНДС", "Сумма, СуммаНДС, ОборотПоРеализации");
	КонецЕсли;

	Если ИмяТабличнойЧасти = "НМА" Тогда
		ТабличнаяЧастьСФ.Свернуть("НематериальныйАктив, СтавкаНДС", "Сумма, СуммаНДС, ОборотПоРеализации");
	КонецЕсли;   

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СТАВКАМИ НАЛОГОВ И ВЗНОСОВ

// Рассчитываем сумму документа со всеми налогами
//
// Параметры: 
//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//  НеУчитыватьТару   - булево, если Истина и ИмяТабличнойЧасти неопределено, то в расчете сумм тару не учитываем
//
// Возвращаемое значение:
//  Сумма документа со всеми налогами.
//
Функция ПолучитьСуммуДокументаСНДС(ДокументОбъект, ИмяТабличнойЧасти = Неопределено, НеУчитыватьТару = Истина) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	СуммаДокумента = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("Сумма");
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
		   И ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
		   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти)
		   И ДокументОбъект.УчитыватьНДС
		   И Не ДокументОбъект.СуммаВключаетНДС Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
		КонецЕсли; 
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента)
			И ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента)
			И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаАкциза", МетаданныеДокумента, ИмяТабличнойЧасти)
			И ДокументОбъект.УчитыватьАкциз
			И Не ДокументОбъект.СуммаВключаетАкциз Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаАкциза");
		КонецЕсли; 
		
	Иначе
		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если НеУчитыватьТару и ТЧОбъекта.Имя = "ВозвратнаяТара" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ДенежныеСредства" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ПродажиПоДисконтнымКартам" Тогда
				Продолжить;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ТЧОбъекта.Имя) Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("Сумма");
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
					И ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
					И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТЧОбъекта.Имя)
					И ДокументОбъект.УчитыватьНДС
					И Не ДокументОбъект.СуммаВключаетНДС Тогда
					СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
				КонецЕсли; 
				
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента)
					И ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента)
					И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаАкциза", МетаданныеДокумента, ТЧОбъекта.Имя)
					И ДокументОбъект.УчитыватьАкциз
					И Не ДокументОбъект.СуммаВключаетАкциз Тогда
					СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаАкциза");
				КонецЕсли; 
			КонецЕсли; 			
		КонецЦикла;
	КонецЕсли;
	
	Возврат СуммаДокумента;


КонецФункции // ПолучитьСуммуДокументаСНДС()

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения
//
// Параметры: 
//  Сумма            - число, сумма от которой надо рассчитывать налоги, 
//  УчитыватьНДС     - булево, признак учета НДС в сумме, 
//  СуммаВключаетНДС - булево, признак включения НДС в сумму ("внутри" или "сверху"),
//  СтавкаНДС        - число , процентная ставка НДС,
//
// Возвращаемое значение:
//  Число, полученная сумма НДС
//
Функция РассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС, СуммаАкциза = 0, СуммаВключаетАкциз = Ложь) Экспорт
    //к расчетной базе прибавляем сумму Акциза, исходим из того, что ситуация когда сумма включает НДС и не включает Акциз исключена 
	Если НЕ СуммаВключаетАкциз Тогда
		СуммаДляРасчетаНДС = Сумма + СуммаАкциза;
	Иначе
		СуммаДляРасчетаНДС = Сумма;  
	КонецЕсли;
	
	Если (УчитыватьНДС) И (СуммаВключаетНДС) Тогда
		СуммаБезНДС = 100 * СуммаДляРасчетаНДС / (100 + СтавкаНДС);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = СуммаДляРасчетаНДС;
	КонецЕсли;

	Если УчитыватьНДС Тогда 
		Если НЕ СуммаВключаетНДС Тогда
			СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
		КонецЕсли;
	Иначе
		СуммаНДС = 0;
	КонецЕсли;

	Возврат СуммаНДС;

КонецФункции // РассчитатьСуммуНДС()

// Рассчитывает оборот по реализации в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект     - объект редактируемого документа.
//
Процедура РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	МетаданныеДокумента 	= ДокументОбъект.Метаданные();
	ИмяТабличнойЧасти 		= ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	ЕстьОборотПоРеализации 	= ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ОборотПоРеализации", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьКурсДокумента		= ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) И МетаданныеДокумента.Имя <> "ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов";
	ЕстьАкциз 				= ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаАкциза", МетаданныеДокумента, ИмяТабличнойЧасти);
	
	СуммаОборотаПоРеализации = 0;
	ЭтоЗаявлениеОВвозеТоваров = МетаданныеДокумента.Имя = "ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов";
	ОборотПоРеализацииВВалюте = НЕ ЭтоЗаявлениеОВвозеТоваров И ДокументОбъект.Дата>=Дата(2014,7,1); // В электронных счетах-фактурах с 01.01.2014 разрешена выписка в валюте
	
	// До переработки счетов-фактур необходима проверка на наличие данного реквизита
	Если ЕстьОборотПоРеализации Тогда
		СуммаВключаетНДС = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента),ДокументОбъект.СуммаВключаетНДС,Ложь);
		СуммаВключаетАкциз = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента), ДокументОбъект.СуммаВключаетАкциз,Ложь);
		Если СуммаВключаетНДС Тогда
			СуммаНДС = Окр(УчетНДСИАкциза.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
						?(ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента),ДокументОбъект.УчитыватьНДС,Истина), 
						СуммаВключаетНДС,
						УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),
						?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаАкциза", МетаданныеДокумента, ИмяТабличнойЧасти), СтрокаТабличнойЧасти.СуммаАкциза,0),
						СуммаВключаетАкциз), 2);
			
			СуммаОборотаПоРеализации = СтрокаТабличнойЧасти.Сумма - СуммаНДС;
		Иначе
			СуммаОборотаПоРеализации = СтрокаТабличнойЧасти.Сумма
		КонецЕсли;
		
		Если ЕстьАкциз И Не СуммаВключаетАкциз Тогда
			СуммаОборотаПоРеализации = СуммаОборотаПоРеализации + СтрокаТабличнойЧасти.СуммаАкциза;
		КонецЕсли;	
		
		// валютный пересчет
		Если (ЕстьКурсДокумента И НЕ ОборотПоРеализацииВВалюте) ИЛИ ЭтоЗаявлениеОВвозеТоваров Тогда
			мВалютаРегламентированногоУчета  = ДокументОбъект.мВалютаРегламентированногоУчета;
			Если ЭтоЗаявлениеОВвозеТоваров Тогда
				СуммаОборотаПоРеализации = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма,СтрокаТабличнойЧасти.Валюта,мВалютаРегламентированногоУчета,СтрокаТабличнойЧасти.КурсВалюты,1) + СтрокаТабличнойЧасти.СуммаДополнительныхРасходов;      
			Иначе
				// для уменьшения погрешности рассчитываем так же как в процедуре ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации
				// в виде разницы тенговых сумм документа.
				Если СуммаВключаетНДС Тогда
					СуммаНДСВВалютеРеглУчета = 	ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Окр(СуммаНДС, 2), ДокументОбъект.ВалютаДокумента,мВалютаРегламентированногоУчета,
												ДокументОбъект.КурсВзаиморасчетов,1, ДокументОбъект.КратностьВзаиморасчетов,1); 			
												
					СуммаВВалютеРеглУчета 	 = 	ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, ДокументОбъект.ВалютаДокумента,мВалютаРегламентированногоУчета,
												ДокументОбъект.КурсВзаиморасчетов,1, ДокументОбъект.КратностьВзаиморасчетов,1); 									
												
					СуммаОборотаПоРеализации = СуммаВВалютеРеглУчета - 	СуммаНДСВВалютеРеглУчета;
				Иначе	
					СуммаОборотаПоРеализации = 	ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, ДокументОбъект.ВалютаДокумента,мВалютаРегламентированногоУчета,
												ДокументОбъект.КурсВзаиморасчетов,1, ДокументОбъект.КратностьВзаиморасчетов,1); 			
				КонецЕсли;						
											
				Если ЕстьАкциз И Не СуммаВключаетАкциз Тогда
					СуммаОборотаПоРеализации = СуммаОборотаПоРеализации + ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаАкциза, ДокументОбъект.ВалютаДокумента,мВалютаРегламентированногоУчета,
																			ДокументОбъект.КурсВзаиморасчетов,1, ДокументОбъект.КратностьВзаиморасчетов,1); 			
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЕсли;	
									
		СтрокаТабличнойЧасти.ОборотПоРеализации = СуммаОборотаПоРеализации;
	КонецЕсли;
КонецПроцедуры // РассчитатьСуммуТабЧасти()

// Рассчитывает сумму Акциза исходя из  количества и коэффициента пересчета
//
// Параметры: 
//  Количество  - число, сумма от которой надо рассчитывать налоги, 
//  Коэффициент - булево, признак учета НДС в сумме, 
//  СтавкаАкциза   - число , ставка акциза,
//  Валюта   	- СправочникСсылка.Валюты, валюта документа
//  Курс   		- число , Курс взаиморасчетов документа,
//  Кратность   - число , Кратность взаиморасчетов документа
//
// Возвращаемое значение:
//  Число, полученная сумма Акциза
//
Функция РассчитатьСуммуАкциза(Количество, Коэффициент, СтавкаАкциза, Валюта, Курс, Кратность) Экспорт

	СуммаАкциза = (Количество * СтавкаАкциза / ?(Коэффициент = 0, 1, Коэффициент ));
	
	//пересчитываем сумму акциза в валюту документа, т.к. ставки акциза идут в тенге, а документ может быть выписан в валюте
	мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СуммаАкциза = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаАкциза, мВалютаРегламентированногоУчета, Валюта,
														  1, Курс,
														  1, Кратность);
	
	Возврат СуммаАкциза;

КонецФункции // РассчитатьСуммуНДС()
