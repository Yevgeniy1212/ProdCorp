////////////////////////////////////////////////////////////////////////////////
// Подсистема "Взаимодействия"
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
//  Основные процедуры и функции поиска контактов

// Получает представление и всю контактную информацию контакта.
//
// Параметры
//  Контакт       - Ссылка - контакт для которого получается информация
//  Представление - Строка - в данный параметр будет помещено полученное представление
//  СтрокаКИ      - Строка - в данный параметр будет помещено полученная контактная информация
//
Процедура ПолучитьПредставлениеИВсюКонтактнуюИнформациюКонтакта(Контакт, Представление, СтрокаКИ,ТипКонтакнойИнформации = Неопределено) Экспорт
	
	Представление = "";
	СтрокаКИ = "";
	Если Не ЗначениеЗаполнено(Контакт) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = Контакт.Метаданные().Имя;
	ИмяПоляДляНаименованияВладельца = Взаимодействия.ПолучитьИмяПоляДляНаименованияВладельца(ИмяТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект КАК Наименование,
	|	" + ИмяПоляДляНаименованияВладельца + " КАК НаименованиеВладельца,
	|	КонтактнаяИнформация.Тип,
	|	КонтактнаяИнформация.Вид,
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.Поле1,
	|	КонтактнаяИнформация.Поле2,
	|	КонтактнаяИнформация.Поле3,
	|	КонтактнаяИнформация.Поле4,
	|	КонтактнаяИнформация.Поле5,
	|	КонтактнаяИнформация.Поле6,
	|	КонтактнаяИнформация.Поле7,
	|	КонтактнаяИнформация.Поле8,
	|	КонтактнаяИнформация.Поле9,
	|	КонтактнаяИнформация.Поле10,
	|	КонтактнаяИнформация.Комментарий,
	|	КонтактнаяИнформация.ЗначениеПоУмолчанию,
	|	КонтактнаяИнформация.ПользовательЛичногоКонтакта
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Контакт" + ?(ТипКонтакнойИнформации = Неопределено,""," И КонтактнаяИнформация.Тип = &ТипКонтактнойИнформации");
	
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Запрос.УстановитьПараметр("ТипКонтактнойИнформации", ТипКонтакнойИнформации);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Представление = Выборка.Наименование;
	
	Если Не ПустаяСтрока(Выборка.НаименованиеВладельца) Тогда
		Представление = Представление + " (" + Выборка.НаименованиеВладельца + ")";
	КонецЕсли;
	
	Выборка.Сбросить();
	
	Пока Выборка.Следующий() Цикл 
	//Для Каждого СтрокаТаблицы Из Выборка.КонтактнаяИнформация.Выгрузить() Цикл
		Если Выборка.Тип <> Перечисления.ТипыКонтактнойИнформации.Другое Тогда
			СтрокаКИ = СтрокаКИ + ?(ПустаяСтрока(СтрокаКИ), "", ", ") + Выборка.Представление;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Получает наименование и адреса электронной почты контакта
//
//Параметры
//  Контакт - Ссылка - контакт, для которого получаются данные
//
//Возвращаемое значение:
//  Структура - содержит наименование контакта и список значений электронной почты контакта
//
Функция ПолучитьНаименованиеИАдресаЭлектроннойПочтыКонтакта(Контакт) Экспорт
	
	Если Не ЗначениеЗаполнено(Контакт) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Контакт.Метаданные().Иерархический Тогда
		Если Контакт.ЭтоГруппа Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяТаблицы = Контакт.Метаданные().ПолноеИмя();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Объект КАК Наименование,
	|	КонтактнаяИнформация.Представление КАК АдресЭП
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Контакт
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И КонтактнаяИнформация.ЗначениеПоУмолчанию = ИСТИНА";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Адреса = Новый Структура("Наименование,Адреса", Выборка.Наименование, Новый СписокЗначений);
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		Адреса.Адреса.Добавить(Выборка.АдресЭП);
	КонецЦикла;
	
	Возврат Адреса;
	
КонецФункции

//Получает адреса электронной почты контакта
//
//Параметры
//  Контакт - Ссылка - контакт, для которого получаются данные
//
//Возвращаемое значение:
//  Массив - массив структур содержащих адреса, виды и представления адресов
//
Функция ПолучитьАдресаЭлектроннойПочтыКонтакта(Контакт, ВключатьНезаполненныеВиды = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Контакт) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИмяМетаданныхКонтакта = Контакт.Метаданные().Имя;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Объект КАК Наименование,
		|	КонтактнаяИнформация.Представление КАК АдресЭП,
		|	КонтактнаяИнформация.Вид.Наименование КАК ВидНаименование,
		|	КонтактнаяИнформация.Вид
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Контакт И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
		
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Результат = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Адрес = Новый Структура;
		Адрес.Вставить("АдресЭП",         Выборка.АдресЭП);
		Адрес.Вставить("Вид",             Выборка.Вид);
		Адрес.Вставить("Представление",   Выборка.Представление);
		Адрес.Вставить("ВидНаименование", Выборка.ВидНаименование);
		Результат.Добавить(Адрес);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//Выполняет отправку писем пользователя и 
//  получение электронной почты по доступным для пользователя учетным записям.
//
//Параметры
//  Получено               - Число - в данный параметр будет возвращено количество полученных писем
//  ДоступноУчетныхЗаписей - Число - в данный параметр будет возвращено количество доступных пользователю учетных записей
//  масОшибок              - Массив - в данных массив будут помещены ошибки, если таковые возникнут.
//
Процедура ОтправитьЗагрузитьПочтуПользователя(ПолученоПисем, ДоступноУчетныхЗаписей, ЕстьОшибки) Экспорт
	
	УправлениеЭлектроннойПочтой.ОтправитьПочтуПользователя();
	УправлениеЭлектроннойПочтой.ЗагрузитьПочтуПользователя(ПолученоПисем, ДоступноУчетныхЗаписей, ЕстьОшибки)
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//  Прочее

//Заменяет предмет в цепочке взаимодействий.
//
//Параметры
//  Цепочка   - Ссылка - предмет взаимодействий который будет заменен.
//  Предмет	  - Ссылка - предмет, на который будет выполнена замена.
//  Исключать - Ссылка - взаимодействие, в котором операция замены выполнена не будет.
//
Процедура ЗаменитьПредметВЦепочкеВзаимодействий(Цепочка, Предмет, Исключать = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивВзаимодействий = Взаимодействия.ПолучитьВзаимодействияИзЦепочки(Цепочка, Исключать);
	
	УстановитьПредметДляМассиваВзаимодействий(МассивВзаимодействий, Предмет);
	
КонецПроцедуры

//Устанавливает предмет для массива взаимодействий.
//
//Параметры
//  МассивВзаимодействий - Массив - массив взаимодействий для которорых будет установлен предмет.
//  Предмет  - Ссылка - предмет, на который будет выполнена замена.
//  ПроверятьНаличиеДругихЦепочек - Булево - если Истина, то будет выполнена замена предмета и для взаимодействий, которые входят в 
//                                           цепоцки взаимодействий первым взаимодействием которых является взаимодействие входящее в массив
//
Процедура УстановитьПредметДляМассиваВзаимодействий(МассивВзаимодействий, Предмет, ПроверятьНаличиеДругихЦепочек = Ложь) Экспорт

	Если ПроверятьНаличиеДругихЦепочек Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПредметыВзаимодействий.Взаимодействие КАК Ссылка
		|ИЗ
		|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыВзаимодействий
		|ГДЕ
		|	(ПредметыВзаимодействий.Предмет В (&МассивВзаимодействий)
		|			ИЛИ ПредметыВзаимодействий.Взаимодействие В (&МассивВзаимодействий))";
		
		Запрос.УстановитьПараметр("МассивВзаимодействий", МассивВзаимодействий);
		МассивВзаимодействий = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	Для Каждого Взаимодействие Из МассивВзаимодействий Цикл
		Взаимодействия.УстановитьПредмет(Взаимодействие, Предмет);
	КонецЦикла;
	
КонецПроцедуры

//// Обновляет индекс полнотекстового поиска если это доступно.
////
//// Параметры
//// ИнформацияОбАктуальностиИндексаППД  - Строка - в данный параметр помещается строковая информация о актуальности индекса
////
//// Возвращаемое значение:
////   Строка	   - информации о ошибке при выполнении обновления
////
//Функция ОбновитьИндексППД(ИнформацияОбАктуальностиИндексаППД, ППДВключен, ИндексАктуален) Экспорт
//	
//	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Запретить Тогда
//		Возврат НСтр("ru = 'Использование индекса полнотекстового поиска данных запрещено!'");
//	КонецЕсли;
//	
//	//Если Не ПолнотекстовыйПоискСервер.ИндексПоискаАктуален() Тогда
//	//	ПолнотекстовыйПоиск.ОбновитьИндекс();
//	//КонецЕсли;
//	//Взаимодействия.ОбновитьИнформациюОбАктуальностиИндексаППД(ИнформацияОбАктуальностиИндексаППД, ППДВключен, ИндексАктуален);
//	
//	Возврат "";
//	
//КонецФункции

//Устанавливает папку электронного письма
//Параметры:
//  Ссылка  - ссылка на письмо,
//  Папка - устанавливаемая папка электроннного письма
//
Процедура УстановитьПапкуЭлектронногоПисьма(Ссылка, Папка) Экспорт
	
	Взаимодействия.УстановитьПредметПапкуВзаимодействия(Ссылка, Папка);
	
КонецПроцедуры

