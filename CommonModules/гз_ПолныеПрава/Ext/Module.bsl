///////////////////////////////////////////////////////////////////////////////////
//ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция определяет наличие движения по регистрам для документа
//
// Параметры:
//  ДокументСсылка - документ, для которого определяются наличия движений
//
// Возвращаемое значение:
//  Таблица движений документа
//
Функция ОпределитьНаличиеДвиженийПоРегистратору(ДокументСсылка) Экспорт
	ТекстЗапроса = "";	
	// для исключения падения для документов, проводящимся более чем по 256 таблицам
	счетчик_таблиц = 0;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		// имя регистра приводим к Строка(200), см. ниже
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор";
		
		// если в запрос попадает более 256 таблиц – разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным)
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// при выгрузке для колонки «Имя» тип устанавливается по самой длинной строке из запроса
	// при втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// приводится к строка(200)
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Индексы.Добавить("Имя");	
	
	// если количество таблиц не превысило 256 – возвращаем таблицу
	Если счетчик_таблиц = МетаданныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;			
	КонецЕсли;
	
	// таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";	
		
		
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции //ОпределитьНаличиеДвиженийПоРегистратору()

// Функция создает пользователя, если нет пользователей информационной базы
//
// Параметры:
//  ИмяПользователя - имя создаваемого пользователя
//
// Возвращаемое значение:
//  Ложь, если создан пользователь, иначе истина
//
Функция мПроверитьПользователей(ИмяПользователя) Экспорт 
	
	КоличествоПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей().Количество();
	
	Если КоличествоПользователей = 0 Тогда 
		
		НовыйПользователь = ПользователиИнформационнойБазы.СоздатьПользователя();
		НовыйПользователь.АутентификацияОС = Ложь;
		НовыйПользователь.АутентификацияСтандартная = Истина;
		НовыйПользователь.Имя = ИмяПользователя;
		НовыйПользователь.ПолноеИмя = ИмяПользователя;
		НовыйПользователь.ОсновнойИнтерфейс = Метаданные.Интерфейсы.Общий;
		НовыйПользователь.Язык = Метаданные.Языки.Русский;
		НовыйПользователь.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
		НовыйПользователь.Записать();
				
		СтарыйПользователь = Ложь;
	Иначе 
		СтарыйПользователь = Истина;
	КонецЕсли;

	Возврат СтарыйПользователь;
	
КонецФункции //мПроверитьПользователей()

// Функция инициализирует глобальную переменную глТекущийПользователь.
// Переменная содержит ссылку на элемент справочника "Пользователи", 
// соответствующий текущему пользователю информационной базы.
//
// Параметры:
//  Нет.
//
Функция мОпределитьТекущегоПользователя() Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();        
	Иначе
		ИмяПользователя           = ИмяПользователя();
		
		Если ПустаяСтрока(ПолноеИмяПользователя()) Тогда
			ПолноеИмяПользователя = ИмяПользователя;
		Иначе
			ПолноеИмяПользователя = ПолноеИмяПользователя();
		КонецЕсли;
	КонецЕсли;
	
	ДлинаКодаПользователя = Метаданные.Справочники.Пользователи.ДлинаКода;
	
	Если СтрДлина(ИмяПользователя) > ДлинаКодаПользователя Тогда
		ИмяПользователя = Лев(ИмяПользователя, ДлинаКодаПользователя);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	(НЕ Пользователи.ЭтоГруппа)
	|	И Пользователи.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", ИмяПользователя);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ОбъектПользователь = Справочники.Пользователи.СоздатьЭлемент();
		ОбъектПользователь.Код          = ИмяПользователя;
		ОбъектПользователь.Наименование = ПолноеИмяПользователя;
        
		Попытка
			ОбъектПользователь.Записать();
        Исключение
            #Если Клиент Тогда
			Предупреждение("Пользователь : " + ИмяПользователя + " не был найден в справочнике пользователей. Возникла ошибка при добавлении пользователя в справочник.
				|" + ОписаниеОшибки());
			ЗавершитьРаботуСистемы(Ложь);
            #КонецЕсли
        
			Возврат Справочники.Пользователи.ПустаяСсылка();
			
		КонецПопытки;
        
		ТекущийПользователь = ОбъектПользователь.Ссылка;

    Иначе
        Выборка = Результат.Выбрать();
		Выборка.Следующий();
        
        ТекущийПользователь = Выборка.Ссылка;
		
		Возврат ТекущийПользователь;
		
	КонецЕсли; 
  		
		#Если Клиент Тогда
			Если НЕ Константы.гз_НомерВерсииКонфигурации.Получить() = "" Тогда
				Сообщить("Пользователь зарегистрирован в справочнике пользователей.");
			КонецЕсли;
		#КонецЕсли
	    						
	Возврат ТекущийПользователь;
	
КонецФункции // мОпределитьТекущегоПользователя()

// Процедура устанавливает параметр сеанса ТекущийПользователь
//
Процедура мУстановитьПараметрСеансаТекущийПользователь(ТекущийПользователь) Экспорт
	Если ТекущийПользователь = Неопределено Тогда
		ИмяПользователя = ИмяПользователя();	
        Если ПустаяСтрока(ИмяПользователя) Тогда
		    // пользователь не авторизовался
		    ИмяПользователя = "НеАвторизован";		
        КонецЕсли;
        
		ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
		
		Если НЕ ПустаяСтрока(ИмяПользователя) Тогда
			ТекущийПользователь = Справочники.Пользователи.НайтиПоКоду(ИмяПользователя);
		КонецЕсли;	
	КонецЕсли;	
	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;
КонецПроцедуры //мУстановитьПараметрСеансаТекущийПользователь()	

// Функция возвращает соответствие налогоплательщиков для всех возможных структурных единиц
//
// Возвращаемое значение:
//	Соответствие со следующей структурой
//		Ключ - СправочникСсылка.Организации/ПодразделенияОрганизации - все возможные структурные единицы
//		Значение - Структура 
//						Ключ - строка с название вида налога (как имена значения перечисления РазделыНалоговогоУчета)
//						Значение - Структура с такими же полями, как и ресурсы в регистре сведений ИсчислениеНалоговСтруктурныхЕдиниц
//
// Пример обращения к результату:
//		Результат[Справочники.Организации.НайтиПоИмени("ТОО ОГО-ГО")].НалогиСЗаработнойПлаты.Налогоплательщик
// 
Функция мЗаполнитьИсчислениеНалоговСтруктурныхЕдиниц() Экспорт

	Если НЕ Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить() Тогда
		// если в базе не поддерживается работа со структурными единица - ничего не делаем
		Возврат Неопределено;
	КонецЕсли;

	Результат = Новый Соответствие();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК СтруктурнаяЕдиница,
	|	РазделыНалоговогоУчета.Ссылка КАК РазделНалоговогоУчета,
	|	ЕСТЬNULL(ИсчислениеНалогов.Налогоплательщик, Организации.Ссылка) КАК Налогоплательщик,
	|	ВЫБОР
	|		КОГДА НЕ(ИсчислениеНалогов.НалоговыйКомитет ЕСТЬ NULL) 
	|			ТОГДА ВЫБОР
	|					КОГДА ИсчислениеНалогов.НалоговыйКомитет = &ПустойКонтрагент
	|						ТОГДА Организации.НалоговыйКомитет
	|					ИНАЧЕ ИсчислениеНалогов.НалоговыйКомитет
	|				  КОНЕЦ
	|		ИНАЧЕ Организации.НалоговыйКомитет
	|	КОНЕЦ КАК НалоговыйКомитет
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.РазделыНалоговогоУчета КАК РазделыНалоговогоУчета
	|		ПО ИСТИНА
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов
	|		ПО Организации.Ссылка = ИсчислениеНалогов.СтруктурнаяЕдиница
	|			И РазделыНалоговогоУчета.Ссылка = ИсчислениеНалогов.РазделНалоговогоУчета
	|";
	
	Если Метаданные.Справочники.Найти("ПодразделенияОрганизаций") <> Неопределено Тогда
		// если есть этот справочник, значит это бухгалтерия
		// дополним запрос
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка КАК СтруктурнаяЕдиница,
		|	РазделыНалоговогоУчета.Ссылка КАК РазделНалоговогоУчета,
		|	ВЫБОР
		|		КОГДА ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением
		|			ТОГДА ЕСТЬNULL(ИсчислениеНалогов_Подр.Налогоплательщик, ЕСТЬNULL(ИсчислениеНалогов_Орг.Налогоплательщик, ПодразделенияОрганизаций.Владелец)) 
		|		ИНАЧЕ ЕСТЬNULL(ИсчислениеНалогов_Орг.Налогоплательщик, ПодразделенияОрганизаций.Владелец)
		|	КОНЕЦ КАК Налогоплательщик,
		|	ВЫБОР
		|		КОГДА ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением
		|			ТОГДА ВЫБОР
		|					КОГДА НЕ(ИсчислениеНалогов_Подр.НалоговыйКомитет ЕСТЬ NULL)
		|							И ИсчислениеНалогов_Подр.НалоговыйКомитет <> &ПустойКонтрагент
		|						ТОГДА ИсчислениеНалогов_Подр.НалоговыйКомитет
		|					КОГДА НЕ(ИсчислениеНалогов_Орг.НалоговыйКомитет ЕСТЬ NULL)
		|							И ИсчислениеНалогов_Орг.НалоговыйКомитет <> &ПустойКонтрагент
		|						ТОГДА ИсчислениеНалогов_Орг.НалоговыйКомитет
		|					ИНАЧЕ ПодразделенияОрганизаций.Владелец.НалоговыйКомитет
		|				  КОНЕЦ
		|		КОГДА НЕ(ИсчислениеНалогов_Орг.НалоговыйКомитет ЕСТЬ NULL)
		|				И ИсчислениеНалогов_Орг.НалоговыйКомитет <> &ПустойКонтрагент
		|			ТОГДА ИсчислениеНалогов_Орг.НалоговыйКомитет
		|		ИНАЧЕ ПодразделенияОрганизаций.Владелец.НалоговыйКомитет
		|	КОНЕЦ КАК НалоговыйКомитет
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.РазделыНалоговогоУчета КАК РазделыНалоговогоУчета
		|		ПО ИСТИНА
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов_Подр
		|		ПО ПодразделенияОрганизаций.Ссылка = ИсчислениеНалогов_Подр.СтруктурнаяЕдиница
		|			И ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением
		|			И РазделыНалоговогоУчета.Ссылка = ИсчислениеНалогов_Подр.РазделНалоговогоУчета
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов_Орг
		|		ПО ПодразделенияОрганизаций.Владелец = ИсчислениеНалогов_Орг.СтруктурнаяЕдиница
		|			И РазделыНалоговогоУчета.Ссылка = ИсчислениеНалогов_Орг.РазделНалоговогоУчета
		|";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// соответствие, в котором храним строковые имена разделов налогового учета
	СоответствиеРазделовНУ = Новый Соответствие();
	Для Каждого РазделНУ Из Метаданные.Перечисления.РазделыНалоговогоУчета.ЗначенияПеречисления Цикл
		ИмяРазделаНУ = РазделНУ.Имя;
		СоответствиеРазделовНУ.Вставить(Перечисления.РазделыНалоговогоУчета[ИмяРазделаНУ], ИмяРазделаНУ);
	КонецЦикла;	
	
	Пока Выборка.Следующий() Цикл
		
		ИмяРазделаНУ = СоответствиеРазделовНУ[Выборка.РазделНалоговогоУчета];
		
		ЭлементСоответствияДляСтруктурнойЕдиницы = Результат[Выборка.СтруктурнаяЕдиница];
		Если ЭлементСоответствияДляСтруктурнойЕдиницы = Неопределено Тогда
			Результат.Вставить(Выборка.СтруктурнаяЕдиница, Новый Структура());
			ЭлементСоответствияДляСтруктурнойЕдиницы = Результат[Выборка.СтруктурнаяЕдиница];
		КонецЕсли;
		
		СтруктураИсчислениеНалогов = Новый Структура();
		СтруктураИсчислениеНалогов.Вставить("Налогоплательщик", Выборка.Налогоплательщик);
		СтруктураИсчислениеНалогов.Вставить("НалоговыйКомитет", Выборка.НалоговыйКомитет);
		
		// записываем в формируемое соответствие
		ЭлементСоответствияДляСтруктурнойЕдиницы.Вставить(ИмяРазделаНУ, СтруктураИсчислениеНалогов);
	
	КонецЦикла;

	Возврат Результат;

КонецФункции // мЗаполнитьИсчислениеНалоговСтруктурныхЕдиниц()





