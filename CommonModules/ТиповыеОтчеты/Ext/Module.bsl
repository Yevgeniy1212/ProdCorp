
// Формирует типовой отчет в строку XML, табличный документ или поле табличного документа	
Функция СформироватьТиповойОтчет(ОтчетОбъект, Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено, ОбщийПараметрЗУП_БК = Неопределено) Экспорт
	
	// - начало
	
	ВыводитьШапкуОтчетаНаВсехСтраницах = истина	;
	СвойМакетОформления = Неопределено;	
	Если ОбщийПараметрЗУП_БК<>Неопределено Тогда
		Если ТипЗнч(ОбщийПараметрЗУП_БК)=Тип("Булево") Тогда
			ВыводитьШапкуОтчетаНаВсехСтраницах = ОбщийПараметрЗУП_БК;
		Иначе
			СвойМакетОформления = ОбщийПараметрЗУП_БК;
		КонецЕсли;
	КонецЕсли;
	ОтчетЗУП = ОтчетПодсистемыЗУП(ОтчетОбъект);
	// - конец
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		// - ЗУП- начало
		ПараметрыИсполненияОтчета = Неопределено;
		ПараметрыИсполненияОтчета = ?(ОтчетЗУП,ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета(),Неопределено);
		// - ЗУП  - конец
		ДанныеРасшифровки = Неопределено;
		// Вывод отчета в XML
		Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
			СохранениеНастроек = Новый Структура;
		Иначе
			СохранениеНастроек.ЗаполнитьНастройкиПриОткрытииОтчета(ОтчетОбъект);
		КонецЕсли;
		ОтчетОбъект.ДоработатьКомпоновщикПередВыводом();
		// Сгенерируем макет компоновки данных при помощи компоновщика макета
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		Если СвойМакетОформления = Неопределено Тогда
			МакетКомпоновки = КомпоновщикМакета.Выполнить(ОтчетОбъект.СхемаКомпоновкиДанных, ОтчетОбъект.КомпоновщикНастроек.Настройки, ДанныеРасшифровки);
		Иначе
			МакетКомпоновки = КомпоновщикМакета.Выполнить(ОтчетОбъект.СхемаКомпоновкиДанных, ОтчетОбъект.КомпоновщикНастроек.Настройки, ДанныеРасшифровки, СвойМакетОформления);
		КонецЕсли;
		// Создадим и инициализируем процессор компоновки
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		// - ЗУП- начало
		Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ИспользоватьСобытияПриФормированииОтчета") И ПараметрыИсполненияОтчета.ИспользоватьСобытияПриФормированииОтчета тогда
			ОтчетОбъект.ПередВыводомОтчета(МакетКомпоновки, ПроцессорКомпоновки);
		КонецЕсли;
		// - ЗУП  - конец
		Если ВнешниеНаборыДанных = Неопределено Тогда
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
		Иначе
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
		КонецЕсли;
		ЗаписьXML = Новый ЗаписьXML();
		ЗаписьXML.УстановитьСтроку();
		ЗаписьXML.ЗаписатьНачалоЭлемента("result");
		Пока Истина Цикл
			ЭлементРезультата = ПроцессорКомпоновки.Следующий();
			Если ЭлементРезультата = Неопределено Тогда
				Прервать;
			КонецЕсли;
			// - ЗУП- начало
			Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ИспользоватьСобытияПриФормированииОтчета") И ПараметрыИсполненияОтчета.ИспользоватьСобытияПриФормированииОтчета тогда
				ОтчетОбъект.ПередВыводомЭлементРезультата(МакетКомпоновки, ПроцессорКомпоновки, ЭлементРезультата);
			КонецЕсли;
			// - ЗУП  - конец
			СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ЭлементРезультата, "item", "http://v8.1c.ru/8.1/data-composition-system/result");
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Результат = ЗаписьXML.Закрыть();
		
		ЗаписьXML = Новый ЗаписьXML();
		ЗаписьXML.УстановитьСтроку();
		ЗаписьXML.ЗаписатьНачалоЭлемента("details");
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ДанныеРасшифровки, "item", "http://v8.1c.ru/8.1/data-composition-system/details");
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ДанныеРасшифровки = ЗаписьXML.Закрыть();		
		
	ИначеЕсли ВыводВФормуОтчета Тогда
	#Если Клиент Тогда
		// Вывод отчета в форму отчета                           
		Результат.Очистить();
		Настройки = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();
		ДоработатьТиповойОтчетПередВыводом(ОтчетОбъект);
		
		// - ЗУП - начало
		ПараметрыИсполненияОтчета = Неопределено;
		ПараметрыИсполненияОтчета = ?(ОтчетЗУП,ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета(),Неопределено);
		// - ЗУП - конец
	
		ВыводЗаголовкаТиповогоОтчета(ОтчетОбъект, Результат, ВыводВФормуОтчета,ПараметрыИсполненияОтчета);
		ОтчетОбъект.ДоработатьКомпоновщикПередВыводом();
		ВывестиТиповойОтчет(ОтчетОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, ОбщийПараметрЗУП_БК,ПараметрыИсполненияОтчета);
		ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		УправлениеОтображениемЗаголовкаТиповогоОтчета(ОтчетОбъект, Результат);
	Иначе
		// Вывод отчета в табличный документ
		Настройки = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();
		ДоработатьТиповойОтчетПередВыводом(ОтчетОбъект);
			
		// - ЗУП - начало
		ПараметрыИсполненияОтчета = Неопределено;
		ПараметрыИсполненияОтчета = ?(ОтчетЗУП,ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета(),Неопределено);
		// - ЗУП - конец
	
		ВыводЗаголовкаТиповогоОтчета(ОтчетОбъект, Результат, ВыводВФормуОтчета, ПараметрыИсполненияОтчета);
		ОтчетОбъект.ДоработатьКомпоновщикПередВыводом();
		ВывестиТиповойОтчет(ОтчетОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных,?(ОтчетЗУП,Неопределено,СвойМакетОформления),ПараметрыИсполненияОтчета);
		ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	#КонецЕсли
	КонецЕсли;
	
КонецФункции

Функция ЭтоПроизвольныйОтчет(ОтчетОбъект = Неопределено) Экспорт
	
	Если ОтчетОбъект <> Неопределено Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ОтчетОбъект));
		Если ТипЗнч(ОтчетОбъект) = Тип("Структура") 
		 ИЛИ МетаданныеОбъекта <> Неопределено 
		   И Метаданные.Справочники.Найти(Метаданные.НайтиПоТипу(ТипЗнч(ОтчетОбъект)).Имя) <> Неопределено Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат (Найти(Метаданные.Имя, "Консолидация") > 0);
	КонецЕсли;
	
КонецФункции

// По структуре параметров восстанавливает состояние отчета
Процедура ПрименитьСтруктуруПараметровОтчета(ОтчетОбъект, СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ОтчетОбъект, СтруктураПараметров);
	ОтчетОбъект.ИнициализацияОтчета();
	Если СтруктураПараметров.Свойство("НастройкиКомпоновщика") Тогда
		ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураПараметров.НастройкиКомпоновщика);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализацияТиповогоОтчета(ОтчетОбъект) Экспорт
	
КонецПроцедуры

Функция РабочаяВерсияНастройкиОтчетов() Экспорт
	
	Возврат "1.0";
	
КонецФункции 


// Возвращает структуру параметров отчета для сохранения
Функция ПолучитьСтруктуруПараметровТиповогоОтчета(ОтчетОбъект) Экспорт
	
	СтруктураПараметров = Новый Структура;
	Для Каждого Реквизит Из ОтчетОбъект.Метаданные().Реквизиты Цикл
		Если Реквизит.Имя = "СхемаКомпоновкиДанных" 
		 ИЛИ Реквизит.Имя = "ДатаВерсииИсточникаДанных"
		 ИЛИ Реквизит.Имя = "ИсточникДанныхОтчета"
		 ИЛИ Реквизит.Имя = "Описание"
		 ИЛИ Реквизит.Имя = "ПодлежитПередачеВПодчиненныеУзлыПриОбменеПоОрганизации" Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПараметров.Вставить(Реквизит.Имя, ОтчетОбъект[Реквизит.Имя])
	КонецЦикла;
	
	попытка
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) И ОтчетОбъект.Ссылка = ОтчетОбъект Тогда
		СтруктураПараметров.Вставить("НастройкиКомпоновщика", ОтчетОбъект.СхемаКомпоновкиДанных.Получить().НастройкиПоУмолчанию);
	Иначе
		СтруктураПараметров.Вставить("НастройкиКомпоновщика", ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки());
	КонецЕсли;
	Исключение
		СтруктураПараметров.Вставить("НастройкиКомпоновщика", ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки());
	КонецПопытки;
	
	Если СтруктураПараметров.Свойство("Версия") тогда
		СтруктураПараметров.Версия = РабочаяВерсияНастройкиОтчетов();
	Иначе
		СтруктураПараметров.Вставить("Версия", РабочаяВерсияНастройкиОтчетов());
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПолучитьСхемуКомпоновкиОбъекта(ОтчетОбъект) Экспорт
	
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		Возврат ОтчетОбъект.СхемаКомпоновкиДанных.Получить();
	Иначе
		Возврат ОтчетОбъект.СхемаКомпоновкиДанных;
	КонецЕсли;
	
КонецФункции

#Если Клиент Тогда

Функция ДобавитьРодителей(ЭлементРасшифровки, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы = Ложь) Экспорт
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Поле.Поле), ТекущийОтчет);
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ВключатьРесурсы И ДоступноеПоле.Ресурс Тогда
				Продолжить;
			КонецЕсли;
			МассивПолейРасшифровки.Добавить(Поле);
		КонецЦикла;
	КонецЕсли;
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителей(Родитель, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	КонецЦикла;
	
КонецФункции

// Возвращает массив, по которому следует расшифровать отчет
Функция ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, ТекущийОтчет = Неопределено, ВключатьРесурсы = Ложь) Экспорт
	
	МассивПолейРасшифровки = Новый Массив;
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
	   И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		Возврат МассивПолейРасшифровки;
	КонецЕсли;
	
	Если ТекущийОтчет = Неопределено Тогда
		ТекущийОтчет = ДанныеРасшифровки;
	КонецЕсли;
	
	// Добавим поля родительских группировок
	ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	
	Количество = МассивПолейРасшифровки.Количество();
	Для Индекс = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Индекс;
		Для ИндексВнутри = 0 По ОбратныйИндекс - 1 Цикл
			Если МассивПолейРасшифровки[ОбратныйИндекс].Поле = МассивПолейРасшифровки[ИндексВнутри].Поле Тогда
				МассивПолейРасшифровки.Удалить(ОбратныйИндекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Добавим отбор, установленный в отчете
	Для каждого ЭлементОтбора Из ТекущийОтчет.Настройки.Отбор.Элементы Цикл
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		МассивПолейРасшифровки.Добавить(ЭлементОтбора);
	КонецЦикла;
	
	
	Возврат МассивПолейРасшифровки;
	
КонецФункции

// Компирует элементы из одной коллекции в другую
Процедура СкопироватьЭлементы(ПриемникЗначения, ИсточникЗначения, ПроверятьДоступность = Ложь, ОчищатьПриемник = Истина) Экспорт
	
	Если ТипЗнч(ИсточникЗначения) = Тип("УсловноеОформлениеКомпоновкиДанных")
	 ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
	 ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ОформляемыеПоляКомпоновкиДанных") Тогда
		СоздаватьПоТипу = Ложь;
	Иначе
		СоздаватьПоТипу = Истина;
	КонецЕсли;
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	Если ОчищатьПриемник Тогда
		ПриемникЭлементов.Очистить();
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		Если ТипЗнч(ЭлементИсточник) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			// Элементы порядка добавляем в начало
			Индекс = ИсточникЭлементов.Индекс(ЭлементИсточник);
			ЭлементПриемник = ПриемникЭлементов.Вставить(Индекс, ТипЗнч(ЭлементИсточник));
		Иначе
			Если СоздаватьПоТипу Тогда
				ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
			Иначе
				ЭлементПриемник = ПриемникЭлементов.Добавить();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		// В некоторых коллекциях необходимо заполнить другие коллекции
		Если ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Поля, ЭлементИсточник.Поля);
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
			ЗаполнитьЭлементы(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление); 
		ИначеЕсли ТипЗнч(ИсточникЭлементов)	= Тип("КоллекцияВариантовПользовательскогоПоляВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
		КонецЕсли;
		
		// В некоторых элементах коллекции необходимо заполнить другие коллекции
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
			ЭлементПриемник.УстановитьВыражениеДетальныхЗаписей (ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей());
			ЭлементПриемник.УстановитьВыражениеИтоговыхЗаписей(ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
			ЭлементПриемник.УстановитьПредставлениеВыраженияДетальныхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей ());
			ЭлементПриемник.УстановитьПредставлениеВыраженияИтоговыхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей ());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет одну коллекцию элементов на основании другой
Процедура ЗаполнитьЭлементы(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено) Экспорт
	
	Если ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		КоллекцияЗначений = ИсточникЗначения;
	Иначе
		КоллекцияЗначений = ИсточникЗначения.Элементы;
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
		Если ПервыйУровень = Неопределено Тогда
			ЭлементПриемник = ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		Иначе
			ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		КонецЕсли;
		Если ЭлементПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
			Если ЭлементИсточник.ЗначенияВложенныхПараметров.Количество() <> 0 Тогда
				ЗаполнитьЭлементы(ЭлементПриемник.ЗначенияВложенныхПараметров, ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Копирует настройки компоновки данных из одного компоновщика настроек в другой
Процедура СкопироватьНастройкиКомпоновкиДанных(НастройкиПриемник, НастройкиИсточник) Экспорт
	
	Если НастройкиИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НастройкиПриемник) = Тип("НастройкиКомпоновкиДанных") Тогда
		Для каждого Параметр Из НастройкиИсточник.ПараметрыДанных.Элементы Цикл
			ЗначениеПараметра = НастройкиПриемник.ПараметрыДанных.НайтиЗначениеПараметра(Параметр.Параметр);
			Если ЗначениеПараметра <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ЗначениеПараметра, Параметр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		ЗаполнитьЗначенияСвойств(НастройкиПриемник, НастройкиИсточник);
		СкопироватьНастройкиКомпоновкиДанных(НастройкиПриемник.Настройки, НастройкиИсточник.Настройки);
		Возврат;
	КонецЕсли;
	
	// Копирование настроек
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиКомпоновкиДанных") Тогда
		
		ЗаполнитьЭлементы(НастройкиПриемник.ПараметрыДанных, НастройкиИсточник.ПараметрыДанных);
		СкопироватьЭлементы(НастройкиПриемник.ПользовательскиеПоля, НастройкиИсточник.ПользовательскиеПоля);
		СкопироватьЭлементы(НастройкиПриемник.Отбор,         НастройкиИсточник.Отбор);
		СкопироватьЭлементы(НастройкиПриемник.Порядок,       НастройкиИсточник.Порядок);
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаКомпоновкиДанных")
	 ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
	 ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		СкопироватьЭлементы(НастройкиПриемник.ПоляГруппировки, НастройкиИсточник.ПоляГруппировки);
		СкопироватьЭлементы(НастройкиПриемник.Отбор,           НастройкиИсточник.Отбор);
		СкопироватьЭлементы(НастройкиПриемник.Порядок,         НастройкиИсточник.Порядок);
		ЗаполнитьЗначенияСвойств(НастройкиПриемник, НастройкиИсточник);
		
	КонецЕсли;
	
	СкопироватьЭлементы(НастройкиПриемник.Выбор,              НастройкиИсточник.Выбор);
	СкопироватьЭлементы(НастройкиПриемник.УсловноеОформление, НастройкиИсточник.УсловноеОформление);
	ЗаполнитьЭлементы(НастройкиПриемник.ПараметрыВывода,      НастройкиИсточник.ПараметрыВывода);
	
	// Копирование структуры
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиКомпоновкиДанных")
	 ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаКомпоновкиДанных") Тогда
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Структура Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Структура.Добавить(ТипЗнч(ЭлементСтруктурыИсточник));
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
	 ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Структура Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Структура.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Строки Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Строки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Колонки Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Колонки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Серии Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Серии.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Точки Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Точки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заменяет цвета в диаграмме
Процедура ЗаменитьЦветаВДиаграмме(Диаграмма, ТаблицаЦветовСерий) Экспорт
	
	Серии = Диаграмма.Серии;
	
	Для каждого Серия Из Серии Цикл
		
		СтруктураПоиска = Новый Структура("Текст", Серия.Текст);
		МассивЦветовСерий = ТаблицаЦветовСерий.НайтиСтроки(СтруктураПоиска);
		
		Если МассивЦветовСерий.Количество() > 0 Тогда
			Серия.Цвет = МассивЦветовСерий[0].Цвет;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает картинку представления элемента отчета
Функция ПолучитьКартинкуПредставленияЭлементаОтчета(ПредставлениеЭлементаОтчета) Экспорт
	
	Если ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Таблица Тогда
		Возврат  БиблиотекаКартинок.Таблица;
	ИначеЕсли ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.КроссТаблица Тогда
		Возврат  БиблиотекаКартинок.КроссТаблица;
	ИначеЕсли ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Диаграмма Тогда
		Возврат БиблиотекаКартинок.Диаграмма;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Удаляет недоступные элементы отбора из компоновщика
Процедура УдалитьНедоступныеПоляИзОтбора(КомпоновщикНастроек) Экспорт
	
	Количество = КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество();
	Для Индекс = 1 По Количество Цикл
		ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы[Количество - Индекс];
		ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Если КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает компоновщик настроек по схеме компоновки и настройкам компоновщика
Функция ПолучитьКомопновщикПоСхемеИНастройкам(Схема, Настройки = Неопределено) Экспорт
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	Если Настройки <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	КонецЕсли;
	Возврат КомпоновщикНастроек;
	
КонецФункции

// Добавляет в группировку автовыбранное поле
Функция ДобавитьАвтоВыбранноеПоле(Структура) Экспорт
	
	ВыбранноеПоле = Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Возврат ВыбранноеПоле;
	
КонецФункции

// Добавляет в группировку автоэлемент порядка
Процедура ДобавитьАвтоЭлементПорядка(Строка) Экспорт
	
	ПолеПолеПорядок = Строка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
КонецПроцедуры

// Возвращает представление по типу элемента структуры
Функция ПолучитьПредставлениеПоЭлементуСтруктуры(ЭлементСтруктуры) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
		Возврат Перечисления.ПредставленияЭлементовОтчетов.Таблица;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
		Возврат Перечисления.ПредставленияЭлементовОтчетов.КроссТаблица;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		Возврат Перечисления.ПредставленияЭлементовОтчетов.Диаграмма;
	КонецЕсли;
	
КонецФункции

// Возвращает тип элемента структуры по представлению
Функция ПолучитьТипЭлементаПоПредставлению(Представление) Экспорт
	
	Если Представление = Перечисления.ПредставленияЭлементовОтчетов.Таблица Тогда
		Возврат Тип("ГруппировкаКомпоновкиДанных")
	ИначеЕсли Представление = Перечисления.ПредставленияЭлементовОтчетов.КроссТаблица Тогда
		Возврат Тип("ТаблицаКомпоновкиДанных")
	ИначеЕсли Представление = Перечисления.ПредставленияЭлементовОтчетов.Диаграмма Тогда
		Возврат Тип("ДиаграммаКомпоновкиДанных")
	КонецЕсли;
	
КонецФункции

//Процедура назначает форме уникальный ключ идентификации для возможности открытия нескольких одинаковых форм
Процедура НазначитьФормеУникальныйКлючИдентификации(Форма) Экспорт
	
	Если Форма.КлючУникальности = Неопределено Тогда
		Форма.КлючУникальности = Новый УникальныйИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ОбЩИЕ ПРОЦЕДУРЫ ОТЧЕТОВ

// Открывает форму настройки типового очтета для редактирования
Функция РедактироватьНастройкиТиповогоОтчета(ОтчетОбъект, ФормаОтчета, ПараметрыФормы = Неопределено) Экспорт
	
	// Сохраним настройки на случай отмены редактирования
	СохраненныеНастройки = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();
	
	// Откроем форму настройки
	ФормаНастройки = ПолучитьОбщуюФорму("ФормаНастройкиСтруктурыОтчета", ФормаОтчета);
	ФормаНастройки.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	ФормаНастройки.ОтчетОбъект = ОтчетОбъект;
	ФормаНастройки.ОтрицательноеКрасным = ОтчетОбъект.ОтрицательноеКрасным;
	ФормаНастройки.НастройкаПериода = ОтчетОбъект.НастройкаПериода;
	ФормаНастройки.ПараметрыФормы = ПараметрыФормы;
	ФормаНастройки.РасширеннаяНастройка = ОтчетОбъект.РасширеннаяНастройка;
	ФормаНастройки.ОсновнаяНастройка = Истина;
	РезультатОткрытия = ФормаНастройки.ОткрытьМодально();
	
	// Проверим результат открытия
	Если РезультатОткрытия <> Неопределено Тогда 
		// Обновим форму типового отчета
		Если Не ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
			ОбновитьФормуТиповогоОтчетаПоКомпоновщику(ОтчетОбъект, ФормаОтчета);
			УправлениеОтображениемЗаголовкаТиповогоОтчета(ОтчетОбъект, ФормаОтчета.ЭлементыФормы.Результат);
		КонецЕсли;
		// Перерисуем форму отчета
		ОтчетОбъект.РасширеннаяНастройка = ФормаНастройки.РасширеннаяНастройка;
		Возврат РезультатОткрытия;
	Иначе
		ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(СохраненныеНастройки);
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Скрывает или отображает быстрый отбор на форме
Процедура УправлениеОтображениемЭлементовФормыТиповогоОтчета(ОтчетОбъект, ФормаОтчета) Экспорт
	
		Если ЭтоСтараяВерсияОтчета(ОтчетОбъект) Тогда
			
			ФормаОтчета.ЭлементыФормы.ДействияФормы.Кнопки.Отбор.Пометка = ОтчетОбъект.ПоказыватьБыстрыйОтбор;
			Если ФормаОтчета.ЭлементыФормы.ДействияФормы.Кнопки.Найти("Заголовок") <> Неопределено И ФормаОтчета.ЭлементыФормы.ДействияФормы.Кнопки.Заголовок.Пометка Тогда
				Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить;
			Иначе
				Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
			КонецЕсли;
			
			ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TitleOutput")).Значение = Значение;
			
			Если ОтчетОбъект.ПоказыватьБыстрыйОтбор Тогда
				// Нужно показывать отбор
				ФормаОтчета.ЭлементыФормы.Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
				ФормаОтчета.ЭлементыФормы.ПанельОтбора.Свертка = РежимСверткиЭлементаУправления.Нет;
				ФормаОтчета.ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ФормаОтчета.Панель, ГраницаЭлементаУправления.Верх, ФормаОтчета.Панель, ГраницаЭлементаУправления.Низ);
				ФормаОтчета.ЭлементыФормы.ПанельОтбора.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ФормаОтчета.ЭлементыФормы.Разделитель, ГраницаЭлементаУправления.Верх);
				
			Иначе
				// Не нужно показывать отбор
				ФормаОтчета.ЭлементыФормы.ПанельОтбора.УстановитьПривязку(ГраницаЭлементаУправления.Низ);
				ФормаОтчета.ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ФормаОтчета.ЭлементыФормы.ПанельОтбора, ГраницаЭлементаУправления.Низ);
				ФормаОтчета.ЭлементыФормы.ПанельОтбора.Свертка = РежимСверткиЭлементаУправления.Верх;
				ФормаОтчета.ЭлементыФормы.Разделитель.Свертка = РежимСверткиЭлементаУправления.Верх;
			КонецЕсли;
			
		Иначе
			
			ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект, ФормаОтчета);
			Если ФормаОтчета.ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Найти("Заголовок") <> Неопределено тогда 
				ЗначенияНастроек["ВыводитьЗаголовокОтчета"] = ФормаОтчета.ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Заголовок.Пометка;
			КонецЕсли;
			ОтчетОбъект.ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(ЗначенияНастроек);
			
			Возврат;
		КонецЕсли;
	
КонецПроцедуры

// Скрывает и показывает заголовок типового отчета
Процедура УправлениеОтображениемЗаголовкаТиповогоОтчета(ОтчетОбъект, Результат) Экспорт
	
	ПараметрыИсполненияОтчета = ?(ОтчетПодсистемыЗУП(ОтчетОбъект),ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета(),Неопределено);
	
	
	Если ((НЕ ОтчетПодсистемыЗУП(ОтчетОбъект)) И (ЭтоПроизвольныйОтчет(ОтчетОбъект) 
	 ИЛИ ОтчетОбъект.РасширеннаяНастройка)) 
	 ИЛИ Результат.ВысотаТаблицы = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьЗаголовок = Результат.Области.Найти("Заголовок");
	Если ОбластьЗаголовок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоСтараяВерсияОтчета(ОтчетОбъект) Тогда
		ПоказыватьЗаголовок = (ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TitleOutput")).Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить);
	Иначе
		ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект);
		Если ЗначенияНастроек <> Неопределено Тогда
			ПоказыватьЗаголовок = ЗначенияНастроек["ВыводитьЗаголовокОтчета"];
		Иначе
			ПоказыватьЗаголовок = истина;
		КонецЕсли;
	КонецЕсли;
	
	ОбластьЗаголовок.Видимость = ПоказыватьЗаголовок;
	
КонецПроцедуры

// Открывает копию отчета в новом окне
Процедура ОткрытьВНовомОкнеТиповойОтчет(ОтчетОбъект, ФормаОтчета) Экспорт
	
	Если Строка(ОтчетОбъект) = "ВнешнийОтчетОбъект." + ОтчетОбъект.Метаданные().Имя Тогда
		Предупреждение("Данный отчет является внешним." + Символы.ПС + "Открытие нового отчета возможно только для объектов конфигурации.");
		Возврат;
	Иначе
		НовыйОтчет = Отчеты[ОтчетОбъект.Метаданные().Имя].Создать();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйОтчет, ОтчетОбъект,, "СохраненнаяНастройка");
	НовыйОтчет.КомпоновщикНастроек.ЗагрузитьНастройки(ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки());
	ФормаНовогоОтчета = НовыйОтчет.ПолучитьФорму();
	НазначитьФормеУникальныйКлючИдентификации(ФормаНовогоОтчета);
	ФормаНовогоОтчета.ЭтоОтработкаРасшифровки = Истина;
	ФормаНовогоОтчета.Открыть();
	СформироватьТиповойОтчет(НовыйОтчет, ФормаНовогоОтчета.ЭлементыФормы.Результат, ФормаНовогоОтчета.ДанныеРасшифровки);
	ФормаНовогоОтчета.ЭтоОтработкаРасшифровки = Ложь;
	
КонецПроцедуры

// Выводит заголовок типового отчета в табличный документ
Процедура ВыводЗаголовкаТиповогоОтчета(ОтчетОбъект, Результат, ВыводВФормуОтчета = Истина, ПараметрыИсполненияОтчета = Неопределено)
	
	куфиб_ЗащитаОтчеты.ВыводЗаголовкаТиповогоОтчета(ОтчетОбъект, Результат, ВыводВФормуОтчета, ПараметрыИсполненияОтчета);
	
КонецПроцедуры

Функция ПолучитьОписаниеНастроекОтчета(КомпоновщикНастроек) Экспорт
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Период
	ЗначениеПараметраПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ЗначениеПараметраКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	
	ОписаниеПериода = "";
	Если ЗначениеПараметраНачалоПериода <> Неопределено 
	   И ЗначениеПараметраКонецПериода <> Неопределено Тогда
		НачалоПериода = ?(ТипЗнч(ЗначениеПараметраНачалоПериода.Значение) = Тип("СтандартнаяДатаНачала") ИЛИ ТипЗнч(ЗначениеПараметраНачалоПериода.Значение) = Тип("Дата"), Дата(ЗначениеПараметраНачалоПериода.Значение), '00010101');
		КонецПериода  = ?(ТипЗнч(ЗначениеПараметраКонецПериода.Значение) = Тип("СтандартнаяДатаНачала") ИЛИ ТипЗнч(ЗначениеПараметраКонецПериода.Значение) = Тип("Дата"), Дата(ЗначениеПараметраКонецПериода.Значение), '00010101');
		Если ТипЗнч(НачалоПериода) = Тип("СтандартнаяДатаНачала") Тогда
			НачалоПериода = НачалоПериода.Дата;
		КонецЕсли;
		Если ТипЗнч(КонецПериода) = Тип("СтандартнаяДатаНачала") Тогда
			КонецПериода = КонецПериода.Дата;
		КонецЕсли;
		Если НачалоПериода = '00010101' И КонецПериода = '00010101' Тогда
			ОписаниеПериода = НСтр("ru='Период не установлен'");
		ИначеЕсли НачалоПериода = '00010101' ИЛИ КонецПериода = '00010101' Тогда
			ОписаниеПериода = Формат(НачалоПериода, "ДФ = дд.ММ.гггг; ДП = ...") + " - " + Формат(КонецПериода, "ДФ = дд.ММ.гггг; ДП = ...");
		ИначеЕсли НачалоПериода <= КонецПериода Тогда
			ОписаниеПериода = ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП = Истина");
		Иначе
			ОписаниеПериода = НСтр("ru='Неправильно задан период!'");
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеПараметраПериод <> Неопределено И ОписаниеПериода = "" Тогда
		Период = ЗначениеПараметраПериод.Значение;
		Если Период = '00010101' Тогда
			ОписаниеПериода = НСтр("ru='на '") + Формат(ТекущаяДата(), "ДП = ...");
		Иначе
			ОписаниеПериода = НСтр("ru='на конец дня '") + Формат(Период, "ДФ = дд.ММ.гггг; ДП = ...");
		КонецЕсли;
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(ОПисаниеПериода) Тогда
		ОписаниеПериода = "Период: " + ОписаниеПериода + Символы.ПС;
	КонецЕсли;
	
	ЭлементОтчета = КомпоновщикНастроек.Настройки.Структура[0];
	ПредставлениеЭлементаОтчета = ПолучитьПредставлениеПоЭлементуСтруктуры(ЭлементОтчета);
	Если ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Таблица Тогда
		Строки = ПолучитьМассивГруппировок(ЭлементОтчета, КомпоновщикНастроек);
		ТипСтрок = "Группировки строк";
	ИначеЕсли ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.КроссТаблица Тогда
		Если ЭлементОтчета.Строки.Количество() > 0 Тогда
			Строки = ПолучитьМассивГруппировок(ЭлементОтчета.Строки[0], КомпоновщикНастроек);
		Иначе
			Строки = Новый Массив;
		КонецЕсли;
		ТипСтрок = "Группировки строк";
		Если ЭлементОтчета.Колонки.Количество() > 0 Тогда
			Колонки = ПолучитьМассивГруппировок(ЭлементОтчета.Колонки[0], КомпоновщикНастроек); 
		Иначе
			Колонки = Новый Массив;
		КонецЕсли;
		ТипКолонок = "Группировки колонок";
	ИначеЕсли ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Диаграмма Тогда
		Если ЭлементОтчета.Серии.Количество() > 0 Тогда
			Строки = ПолучитьМассивГруппировок(ЭлементОтчета.Серии[0], КомпоновщикНастроек);
		Иначе
			Строки = Новый Массив;
		КонецЕсли;
		ТипСтрок = "Группировки серий";
		Если ЭлементОтчета.Точки.Количество() > 0 Тогда
			Колонки = ПолучитьМассивГруппировок(ЭлементОтчета.Точки[0], КомпоновщикНастроек); 
		Иначе
			Колонки = Новый Массив;
		КонецЕсли;
		ТипКолонок = "Группировки точек";
	КонецЕсли;
	
	Показатели = ПолучитьПоказатели(КомпоновщикНастроек);
	ДополнительныеПоля = ПолучитьДополнительныеПоля(КомпоновщикНастроек);
	
	СтрокаОтбор = Строка(КомпоновщикНастроек.Настройки.Отбор);
	ОписаниеНастроекОтчета = 
	ОписаниеПериода +
	СформироватьСтрокуПолей(ТипСтрок, Строки) + 
	СформироватьСтрокуПолей(ТипКолонок, Колонки) + 
	СформироватьСтрокуПолей("Дополнительные поля", ДополнительныеПоля) +
	СформироватьСтрокуПолей("Показатели", Показатели) +
	?(ПустаяСтрока(СтрокаОтбор) , "", "Отбор: " + СтрокаОтбор);
	
	Возврат ОписаниеНастроекОтчета;		
	
КонецФункции

Функция СформироватьСтрокуПолей(ТипПолей, МассивПолей)
	
	Если МассивПолей = Неопределено ИЛИ МассивПолей.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаПолей = ТипПолей + ": ";
	Для каждого Поле Из МассивПолей Цикл
		СтрокаПолей = СтрокаПолей + Поле + "; ";
	КонецЦикла;
	
	СтрокаПолей = СтрокаПолей + Символы.ПС;     	
	
	Возврат СтрокаПолей;
	
КонецФункции

Функция ПолучитьПоказатели(КомпоновщикНастроек)
	
	Элементы = Новый Массив;
	ВыбранныеПоля = ПолучитьВыбранныеПоля(КомпоновщикНастроек);
	
	Для каждого ВыбранноеПоле Из ВыбранныеПоля Цикл
		ДоступноеПоле = ПолучитьДоступноеПоле(ВыбранноеПоле.Поле, КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора);
		Если ДоступноеПоле <> Неопределено и ДоступноеПоле.Ресурс Тогда
			Элементы.Добавить(ДоступноеПоле.Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Элементы;
	
КонецФункции

Функция ПолучитьДополнительныеПоля(КомпоновщикНастроек)
	
	Элементы = Новый Массив;
	ВыбранныеПоля = ПолучитьВыбранныеПоля(КомпоновщикНастроек);
	
	Для каждого ВыбранноеПоле Из ВыбранныеПоля Цикл
		ДоступноеПоле = ПолучитьДоступноеПоле(ВыбранноеПоле.Поле, КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора);
		Если ДоступноеПоле <> Неопределено И Не ДоступноеПоле.Ресурс Тогда
			Элементы.Добавить(ДоступноеПоле.Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Элементы;
	
КонецФункции

Функция ПолучитьДоступноеПоле(Знач Поле, ОбластьПоиска) Экспорт
	
	Возврат ОбластьПоиска.НайтиПоле(Поле);
	
КонецФункции

// Возвращает массив группировок компоновщика настроек
Функция ПолучитьМассивГруппировок(ЭлементСтруктуры, КомпоновщикНастроек, МассивГруппировок = Неопределено) Экспорт
	
	Если МассивГруппировок = Неопределено Тогда
		МассивГруппировок = Новый Массив;
	КонецЕсли;
	
	Для каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
		Если Не ПолеГруппировки.Использование Тогда
			Продолжить;
		КонецЕсли;
		ДоступноеПоле = ПолучитьДоступноеПоле(ПолеГруппировки.Поле, КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок);
		Если ДоступноеПоле = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивГруппировок.Добавить(ДоступноеПоле.Заголовок);
	КонецЦикла;
	
	Если ЭлементСтруктуры.Структура.Количество() = 0 Тогда
		Возврат МассивГруппировок;
	Иначе
		Возврат ПолучитьМассивГруппировок(ЭлементСтруктуры.Структура[0], КомпоновщикНастроек, МассивГруппировок);
	КонецЕсли;
	
КонецФункции

// Выводит типовой отчет в табличный документ
Процедура ВывестиТиповойОтчет(ОтчетОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено, ОбщийПараметрЗУП_БК = Неопределено, ПараметрыИсполненияОтчетаЗУП = Неопределено) Экспорт
	
	куфиб_ЗащитаОтчеты.ВывестиТиповойОтчет(ОтчетОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, ОбщийПараметрЗУП_БК, ПараметрыИсполненияОтчетаЗУП);
	
КонецПроцедуры

Процедура УниверсальныйМеханизмФормированияОтчета(ОтчетОбъект, Схема, ПараметрыИсполненияОтчета, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, ВыводитьШапкуОтчетаНаВсехСтраницах,СвойМакетОформления=Неопределено) Экспорт
	
	//Сгенерируем макет компоновки данных при помощи компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ТипРезультата = ТипЗнч(Результат);
	Если ТипРезультата = Тип("ТабличныйДокумент") 
		ИЛИ ТипРезультата = Тип("ПолеТабличногоДокумента") Тогда
		
		ВыводВТабличныйДокумент = Истина;
		
	Иначе
		ВыводВТабличныйДокумент = Ложь;
	КонецЕсли; 
	
	//В качестве схемы компоновки будет выступать схема самого отчета
	//В качестве настроек отчета - текущие настройки отчета
	//Данные расшифровки будем помещать в ДанныеРасшифровки
	Если ВыводВФормуОтчета Тогда
		Если СвойМакетОформления<>Неопределено Тогда
			МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, ОтчетОбъект.КомпоновщикНастроек.Настройки, ДанныеРасшифровки, СвойМакетОформления);
		Иначе
			МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, ОтчетОбъект.КомпоновщикНастроек.Настройки, ДанныеРасшифровки);
		КонецЕсли;
		ДополнитьМакетыМакетаКомпоновкиРасшифровкойРесурсов(МакетКомпоновки, ОтчетОбъект.КомпоновщикНастроек);
		
		//Создадим и инициализируем процессор компоновки
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ИспользоватьСобытияПриФормированииОтчета") И ПараметрыИсполненияОтчета.ИспользоватьСобытияПриФормированииОтчета тогда
			ОтчетОбъект.ПередВыводомОтчета(МакетКомпоновки, ПроцессорКомпоновки);
		КонецЕсли;
		Если ВнешниеНаборыДанных = Неопределено Тогда
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		Иначе
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
		КонецЕсли;
	Иначе
		Если ВыводВТабличныйДокумент Тогда
			Если СвойМакетОформления<>Неопределено Тогда
				МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, ОтчетОбъект.КомпоновщикНастроек.Настройки, , СвойМакетОформления);
			Иначе
				МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, ОтчетОбъект.КомпоновщикНастроек.Настройки);
			КонецЕсли;
		Иначе
			МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, ОтчетОбъект.КомпоновщикНастроек.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		КонецЕсли; 
		
		//Создадим и инициализируем процессор компоновки
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ИспользоватьСобытияПриФормированииОтчета") И ПараметрыИсполненияОтчета.ИспользоватьСобытияПриФормированииОтчета тогда
			ОтчетОбъект.ПередВыводомОтчета(МакетКомпоновки, ПроцессорКомпоновки);
		КонецЕсли;
		Если ВнешниеНаборыДанных = Неопределено Тогда
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
		Иначе
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, , Истина);
		КонецЕсли;
	КонецЕсли;
	
	//Создадим и инициализируем процессор вывода результата
	Если ВыводВТабличныйДокумент Тогда
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
	Иначе
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(Результат);
	КонецЕсли; 
	
	//Обозначим начало вывода
	ПроцессорВывода.НачатьВывод();
	#Если Клиент тогда
		Состояние(НСТР("ru='Если Вы хотите прервать вывод отчета, нажмите Ctrl+Break'"));
	#КонецЕсли
	
	ТаблицаЗафиксирована = Не ВыводВФормуОтчета;
	
	Если ВыводВТабличныйДокумент Тогда
		Результат.ФиксацияСверху = 0;
	КонецЕсли; 
	
	//определим нужна ли фиксация в отчете. Если элементов структуры больше 2-х
	
	КолВоВключеныхЭлементов = 0;
	Для каждого ЭлементСтруктуры из ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура Цикл
		Если ЭлементСтруктуры.Использование тогда 
			КолВоВключеныхЭлементов = КолВоВключеныхЭлементов + 1;
		КонецЕсли;
		
		Если КолВоВключеныхЭлементов > 1 тогда
			ТаблицаЗафиксирована = истина;
		КонецЕсли;
	КонецЦикла;
	
	//Основной цикл вывода отчета
	Пока Истина Цикл
		
		#Если Клиент тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		//Получим следующий элемент результата компоновки
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
		
		Если ЭлементРезультата = Неопределено Тогда
			//Следующий элемент не получен - заканчиваем цикл вывода
			Прервать;
			
		Иначе
			
			Если ВыводВТабличныйДокумент Тогда
				// Зафиксируем шапку
				Если Не (ОтчетОбъект.РасширеннаяНастройка И ПараметрыИсполненияОтчета <> Неопределено 
					И ПараметрыИсполненияОтчета.Свойство("ПриВыводеЗаголовкаОтчета") 
					И Не ПараметрыИсполненияОтчета.ПриВыводеЗаголовкаОтчета)  
					И Не ТаблицаЗафиксирована 
					И ЭлементРезультата.ЗначенияПараметров.Количество() > 0 
					И ТипЗнч(ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура[0]) <> Тип("ДиаграммаКомпоновкиДанных") Тогда
					
					ТаблицаЗафиксирована = Истина;
					Результат.ФиксацияСверху = Результат.ВысотаТаблицы;
					Если ВыводитьШапкуОтчетаНаВсехСтраницах тогда
						ОбластьШапки = Результат.Область(3, ,Результат.ВысотаТаблицы, );
						Результат.ПовторятьПриПечатиСтроки = ОбластьШапки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ИспользоватьСобытияПриФормированииОтчета") И ПараметрыИсполненияОтчета.ИспользоватьСобытияПриФормированииОтчета тогда
				ОтчетОбъект.ПередВыводомЭлементРезультата(МакетКомпоновки, ПроцессорКомпоновки, ЭлементРезультата);
			КонецЕсли;
			
			//Элемент получен - выведем его при помощи процессора вывода
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Обозначем завершение вывода
	ПроцессорВывода.ЗакончитьВывод();
	
КонецПроцедуры

Функция ПолучитьОписаниеРодительскойПричиныИнформацииОбОшибке(ИнформацияОбОшибке) Экспорт
	
	Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
		ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
	КонецЦикла;
	Возврат ИнформацияОбОшибке.Описание;

КонецФункции

// Дорабатывает отчет перед выводом
Процедура ДоработатьТиповойОтчетПередВыводом(ОтчетОбъект, КомпоновщикНастроек = Неопределено) Экспорт
	
	Если КомпоновщикНастроек = Неопределено Тогда
		КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	КонецЕсли;
	
	// Отработка "Отрицательное красным"
	Если ОтчетОбъект.ОтрицательноеКрасным И Не ОтчетОбъект.РасширеннаяНастройка Тогда
	
		Для каждого Ресурс Из ПолучитьВыбранныеПоля(КомпоновщикНастроек) Цикл
			Если Не КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Ресурс.Поле).Ресурс Тогда
				Продолжить;
			КонецЕсли;
			НовыйЭлемент = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
			// Настройка отбора
			ЭлементОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Ресурс.Поле;
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
			ЭлементОтбора.ПравоеЗначение = 0;
			// Настройка оформления
			ЗначениеПараметра = НовыйЭлемент.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("MarkNegatives"));
			ЗначениеПараметра.Использование = Истина;
			ЗначениеПараметра.Значение = Истина;
			// Настройка полей
			Поле = НовыйЭлемент.Поля.Элементы.Добавить();
			Поле.Поле = Ресурс.Поле;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЭтоПроизвольныйОтчет(ОтчетОбъект) И Не ОтчетОбъект.РасширеннаяНастройка Тогда
		// Убрать вывод заголовка, т.к. он выводится нестандартно
		УстановитьПараметрВывода(КомпоновщикНастроек, "TitleOutput", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	КонецЕсли;

	Если ЭтоСтараяВерсияОтчета(ОтчетОбъект) ИЛИ ОтчетПодсистемыЗУП(ОтчетОбъект.Метаданные().Имя) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПанели  = ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);
	ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект);
	Если ПараметрыПанели = Неопределено
	 ИЛИ ЗначенияНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Установка Настроек компоновки на панели настроек
	Для каждого ВидимостьСтраницы Из ЗначенияНастроек.ВидимостьСтраниц Цикл
		Если Не ВидимостьСтраницы.Значение Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			Если ВидимостьСтраницы.Ключ = "Параметры" Тогда
				ЗаполнитьЭлементы(КомпоновщикНастроек.Настройки.ПараметрыДанных, ЗначенияНастроек.НастройкиКомпоновщика.ПараметрыДанных);
			Иначе
				СкопироватьЭлементы(КомпоновщикНастроек.Настройки[ВидимостьСтраницы.Ключ], ЗначенияНастроек.НастройкиКомпоновщика[ВидимостьСтраницы.Ключ], , Ложь);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Попытка
		// Установим у всех параметров использование
		Для каждого ЗначениеПараметра Из ЗначенияНастроек.НастройкиКомпоновщика.ПараметрыДанных.Элементы Цикл
			ЗначениеПараметра.Использование = Истина;
		КонецЦикла;
	Исключение
	КонецПопытки;
 
	Если ПараметрыПанели.ДеревоНастроекСтандартныхСтраниц.Строки.Найти("Период").Использование Тогда
		// Установка Стандартного периода
		ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
		ЗначениеПараметраКонецПериода  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
		Если ЗначениеПараметраНачалоПериода <> Неопределено И ЗначениеПараметраКонецПериода <> Неопределено Тогда
			
			СтандартныйПериод = Неопределено;
			ЗначенияНастроек.Свойство("СтандартныйПериод", СтандартныйПериод);
			Если СтандартныйПериод <> Неопределено Тогда
				Если СтандартныйПериод.ДатаНачала <> '00010101' Тогда
					ЗначениеПараметраНачалоПериода.Использование = Истина;
					ЗначениеПараметраНачалоПериода.Значение = СтандартныйПериод.ДатаНачала;
				КонецЕсли;
				Если СтандартныйПериод.ДатаОкончания <> '00010101' Тогда
					ЗначениеПараметраКонецПериода.Использование = Истина;
					ЗначениеПараметраКонецПериода.Значение = СтандартныйПериод.ДатаОкончания;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Установка Стандартной даты начала
		ЗначениеПараметраПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		Если ЗначениеПараметраПериод <> Неопределено Тогда
			
			СтандартнаяДатаНачала = Неопределено;
			ЗначенияНастроек.Свойство("СтандартнаяДатаНачала", СтандартнаяДатаНачала);
			Если СтандартнаяДатаНачала <> Неопределено Тогда
				Если СтандартнаяДатаНачала.Дата <> '00010101' Тогда
					ЗначениеПараметраПериод.Использование = Истина;
					ЗначениеПараметраПериод.Значение = СтандартнаяДатаНачала.Дата;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	// Установка Динамических отборов
	Для каждого СтрокаОтбора Из ПараметрыПанели.Отборы Цикл
		ЗначениеОтбора = ЗначенияНастроек.ДинамическиеОтборы[СтрокаОтбора.Поле];
		Если ЗначениеОтбора = Неопределено ИЛИ Не ЗначениеОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаОтбора.ВидОтбора = "Список" ИЛИ СтрокаОтбора.ВидОтбора = "ДлинныйСписок" Тогда
			Если ЗначениеОтбора.ВидСравнения = "" Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеОтбора.ВидСравнения = "Исключая" Тогда
				ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных["Не" + СтрокаОтбора.ВидСравнения];
			Иначе
				ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных[СтрокаОтбора.ВидСравнения];
			КонецЕсли;
		Иначе
			ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных[СтрокаОтбора.ВидСравнения];
		КонецЕсли;
		
		ДобавитьОтбор(КомпоновщикНастроек, ЗначениеОтбора.Поле, ЗначениеОтбора.Значение, ВидСравненияКомпоновки);
	КонецЦикла;
	УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

// Обновляет заголовок типового отчета
Процедура ОбновитьЗаголовокТиповогоОтчета(ОтчетОбъект, ФормаОтчета) Экспорт
	
	ФормаОтчета.Заголовок = ПолучитьЗаголовокОтчета(ОтчетОбъект, ФормаОтчета);
		
КонецПроцедуры

Функция ПолучитьЗаголовокОтчета(ОтчетОбъект, ФормаОтчета = Неопределено) Экспорт
	
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		Если ФормаОтчета.РежимРедактированияНастройки Тогда
			Заголовок = "Отчет: " + ОтчетОбъект.Наименование + ": " + ФормаОтчета.ПредставлениеНастройки;
		ИначеЕсли ОтчетОбъект.СохраненнаяНастройка.Пустая() ИЛИ ОтчетОбъект.СохраненнаяНастройка.ХранилищеНастроек.Получить() = Неопределено Тогда
			//Заголовок = "Отчет: " + ОтчетОбъект.Наименование + " [" + "<Основной вариант отчета>" + "]";
			
			Заголовок = "Отчет: " + ОтчетОбъект.Наименование;
		Иначе
			Заголовок = "Отчет: " + ОтчетОбъект.Наименование + " [" + ОтчетОбъект.СохраненнаяНастройка + "]";
		КонецЕсли;
	Иначе
		Если ЭтоСтараяВерсияОтчета(ОтчетОбъект) Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.СохраненнаяНастройка) Тогда
				ТекстСохраненнаяНастройка = " (" + ОтчетОбъект.СохраненнаяНастройка + ")";
			Иначе
				ТекстСохраненнаяНастройка = "";
			КонецЕсли;
			ЗаголовокОтчета = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title")).Значение;
			Заголовок = ЗаголовокОтчета + ТекстСохраненнаяНастройка;
		Иначе
			Если ОтчетОбъект.СохраненнаяНастройка.Пустая() Тогда
				ТекстСохраненнаяНастройка = "";
			Иначе
				ТекстСохраненнаяНастройка = " [" + ОтчетОбъект.СохраненнаяНастройка + "]";
			КонецЕсли;
			ЗаголовокОтчета = ОтчетОбъект.Метаданные().Синоним;
			Заголовок = ЗаголовокОтчета + ТекстСохраненнаяНастройка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

// Открывает форму настройки периода
Функция НастроитьПериод(НастройкаПериода, НачалоПериода, КонецПериода) Экспорт
	
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачалоПериода, ?(КонецПериода='0001-01-01', КонецПериода, КонецДня(КонецПериода)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	Если НастройкаПериода.Редактировать() Тогда 
		
		Если НастройкаПериода.ПолучитьДатуНачала() < ПараметрыСеанса.ДатаНачалаЗапретаДляАудиторов И РольДоступна("Аудитор") Тогда
			НачалоПериода = ПараметрыСеанса.ДатаНачалаЗапретаДляАудиторов;
		ИначеЕсли НастройкаПериода.ПолучитьДатуНачала() < ПараметрыСеанса.ДатаОкончанияЗапретаДляАудиторов И РольДоступна("Аудитор") Тогда
			НачалоПериода = ПараметрыСеанса.ДатаОкончанияЗапретаДляАудиторов;
		Иначе
			НачалоПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонецЕсли;
		
		Если НастройкаПериода.ПолучитьДатуОкончания() < ПараметрыСеанса.ДатаОкончанияЗапретаДляАудиторов И РольДоступна("Аудитор") Тогда
			КонецПериода = ПараметрыСеанса.ДатаОкончанияЗапретаДляАудиторов;
		ИначеЕсли НастройкаПериода.ПолучитьДатуОкончания() < ПараметрыСеанса.ДатаНачалаЗапретаДляАудиторов И РольДоступна("Аудитор") Тогда
			НачалоПериода = ПараметрыСеанса.ДатаНачалаЗапретаДляАудиторов;
		Иначе
			КонецПериода = НастройкаПериода.ПолучитьДатуОкончания();
		КонецЕсли;
	
		Возврат НастройкаПериода;
	КонецЕсли;
	
КонецФункции

// Обновляет параметры периода в компоновщике настроек по данным формы
Процедура ОбновитьПараметрыПериодаПоФорме(КомпоновщикНастроек, Форма) Экспорт
	
	ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ЗначениеПараметраКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	ЗначениеПараметраПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	Если ЗначениеПараметраНачалоПериода <> Неопределено Тогда
		ЗначениеПараметраНачалоПериода.Значение = Форма.НачалоПериода;
		ЗначениеПараметраНачалоПериода.Использование = Истина;
		ЗначениеПараметраНачалоПериода.Значение = УправлениеОтчетами.ПроверкаПериода(ЗначениеПараметраНачалоПериода.Значение);
		Форма.НачалоПериода = УправлениеОтчетами.ПроверкаПериода(Форма.НачалоПериода); 
	КонецЕсли;
	
	Если ЗначениеПараметраКонецПериода <> Неопределено Тогда
		ЗначениеПараметраКонецПериода.Значение = ?(Форма.КонецПериода = '0001-01-01', Форма.КонецПериода, КонецДня(Форма.КонецПериода));
		ЗначениеПараметраКонецПериода.Использование = Истина;
		ЗначениеПараметраКонецПериода.Значение = УправлениеОтчетами.ПроверкаПериода(ЗначениеПараметраКонецПериода.Значение);
		Форма.КонецПериода = УправлениеОтчетами.ПроверкаПериода(Форма.КонецПериода);
	КонецЕсли;
	
	Если ЗначениеПараметраПериод <> Неопределено Тогда
		ЗначениеПараметраПериод.Значение = ?(Форма.Период = '0001-01-01', Форма.Период, КонецДня(Форма.Период));
		ЗначениеПараметраПериод.Использование = Истина;
		ЗначениеПараметраПериод.Значение = УправлениеОтчетами.ПроверкаПериода(ЗначениеПараметраПериод.Значение);
		Форма.Период = УправлениеОтчетами.ПроверкаПериода(Форма.Период);
	КонецЕсли;
	
КонецПроцедуры

//Обновляет элементы формы типового отчета по компоновщику настроек
Процедура ОбновитьФормуТиповогоОтчетаПоКомпоновщику(ОтчетОбъект, ФормаОтчета) Экспорт
   куфиб_ЗащитаОтчеты.ОбновитьФормуТиповогоОтчетаПоКомпоновщику(ОтчетОбъект, ФормаОтчета);
КонецПроцедуры

Функция ЭтоДетальнаяЗапись(ДанныеРасшифровки, Расшифровка)
	
	ЭтоДетальнаяЗапись = Ложь;
	Элемент = ДанныеРасшифровки.Элементы[Расшифровка];
	Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Элементы = Элемент.ПолучитьРодителей();
		Если Элементы.Количество() > 0 Тогда
			Элемент = Элементы[0];
			Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
				ЭтоДетальнаяЗапись = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ЭтоДетальнаяЗапись;
	
КонецФункции
	
Функция ЭтоВнешнийОбъект(ОтчетОбъект)
	
	Если Строка(ОтчетОбъект) = "ВнешнийОтчетОбъект." + ОтчетОбъект.Метаданные().Имя Тогда
		ЭтоВнешнийОтчет = Истина;
	Иначе 
		ЭтоВнешнийОтчет = Ложь;
	КонецЕсли;
	Возврат ЭтоВнешнийОтчет;

КонецФункции

// Процедура РезультатОбработкаРасшифровки
// Действие, выполняемое при вызове расшифровки пользователем
Процедура СтандартнаяОбработкаРасшифровкиТиповогоОтчета(ОтчетОбъект, ФормаОтчета, Расшифровка, СтандартнаяОбработка) Экспорт

	Перем ВыполненноеДействие;

	// Запретим стандартную обработку расшифровки
	СтандартнаяОбработка = Ложь;

	// Создадим и инициализируем обработчик расшифровки
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ФормаОтчета.ДанныеРасшифровки, 
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПолучитьСхемуКомпоновкиОбъекта(ОтчетОбъект)));

	// Осуществим выбор действия расшифровки пользователем
	Настройки = ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие);

	Если Настройки <> Неопределено Тогда
		// Пользователь выбрал действие, для которого нужно менять настройки

		Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Упорядочить Тогда
			// Если требется упорядочить - упорядочим в текущем отчете
			ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
			ФормаОтчета.ОбновитьОтчет();

		Иначе
			
			НовыйОтчет = Отчеты[ОтчетОбъект.Метаданные().Имя].Создать();
			ЗаполнитьЗначенияСвойств(НовыйОтчет, ОтчетОбъект, , "СохраненнаяНастройка");
			НовыйОтчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
			
			ФормаНовогоОтчета = НовыйОтчет.ПолучитьФорму();
			НазначитьФормеУникальныйКлючИдентификации(ФормаНовогоОтчета);
			ФормаНовогоОтчета.ЭтоОтработкаРасшифровки = Истина;
			Если Не ЭтоСтараяВерсияОтчета(ОтчетОбъект) Тогда
				ФормаНовогоОтчета.РежимРедактированияНастройки = Истина;
				ФормаНовогоОтчета.ПредставлениеНастройки = "Расшифровка " + Символы.ПС + ОтчетОбъект.СохраненнаяНастройка;
			КонецЕсли;
			ФормаНовогоОтчета.Открыть();
			ФормаНовогоОтчета.ОбновитьОтчет();
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ОбработкаРасшифровкиТиповогоОтчета(Расшифровка, СтандартнаяОбработка, ОтчетОбъект, ФормаОтчета, ДополнительныеРасшифровки = Неопределено) Экспорт
	Если ОтчетПодсистемыЗУП(ОтчетОбъект) Тогда
		ОбработкаРасшифровкиТиповогоОтчетаЗУП(Расшифровка, СтандартнаяОбработка, ОтчетОбъект, ФормаОтчета, ДополнительныеРасшифровки);
	Иначе
		ОбработкаРасшифровкиТиповогоОтчетаБК(Расшифровка, СтандартнаяОбработка, ОтчетОбъект, ФормаОтчета);
		Возврат Неопределено;
	КонецЕсли;
КонецФункции	

// На основании отбора настраивает расшифровываемый отчет
Процедура НастроитьТиповойОтчет(ОтчетОбъект, Отбор, КомпоновщикОсновногоОтчета = Неопределено) Экспорт
	
	Если ТипЗнч(Отбор) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если ОтчетОбъект.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Настройка параметров
	Если КомпоновщикОсновногоОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Для каждого ПараметрОсновногоОтчета Из КомпоновщикОсновногоОтчета.Настройки.ПараметрыДанных.Элементы Цикл
		ЗначениеПараметра = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрОсновногоОтчета.Параметр);
		Если ЗначениеПараметра <> Неопределено Тогда
			ЗначениеПараметра.Значение = ПараметрОсновногоОтчета.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выводит на печать без предварительного просмотра табличный документ
Процедура ПечатьТиповогоОтчета(Результат) Экспорт
	
	Результат.Напечатать();
	
КонецПроцедуры

// Открывает форму редактирования пользовательского поля
Процедура РедактироватьПользовательскиеПоля(КомпоновщикНастроек, ОтчетОбъект) Экспорт
	
	КонструкторПользовательскихПолей = Обработки.КонструкторПользовательскихПолей.Создать();
	Форма = КонструкторПользовательскихПолей.ПолучитьФорму("Форма", );
	Форма.ОтчетОбъект = ОтчетОбъект;	
	Форма.КомпоновщикНастроек = КомпоновщикНастроек;
	Форма.ОткрытьМодально();
	
КонецПроцедуры

// Возвращает имя формы, с помощью которого следует редактировать пользовательское поле
Функция ПолучитьИмяФормыРедактированияПользовательскогоПоля(ПользовательскоеПоле) Экспорт
	
	Если ТипЗнч(ПользовательскоеПоле) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
		Если ПолучитьВыражениеАгрегатаИтоговыхЗаписей(ПользовательскоеПоле) <> Неопределено Тогда
			ИмяФормы = "Форма" + "Формула";
			Возврат ИмяФормы;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ПользовательскоеПоле.Варианты.Элементы.Количество() > 0
	   И ПолучитьПараметрИзСтроки(ПользовательскоеПоле.Варианты.Элементы[0].Значение) = "ДоработкаТаблицы" Тогда
		ИмяФормы = "Форма" + ПолучитьПараметрИзСтроки(ПользовательскоеПоле.Варианты.Элементы[0].Значение, 2);
	КонецЕсли;
	Если ПользовательскоеПоле.Варианты.Элементы.Количество() > 2
	   И (ПользовательскоеПоле.Варианты.Элементы[0].Значение = "1Тренд"
	 ИЛИ ПользовательскоеПоле.Варианты.Элементы[0].Значение = "1Состояние") Тогда
		ИмяФормы = "ФормаИнтервал";
	ИначеЕсли ПользовательскоеПоле.Варианты.Элементы.Количество() > 1
			И ПользовательскоеПоле.Варианты.Элементы[0].Значение = "0ИГ" Тогда
		ИмяФормы = "ФормаИнтервалы";
	КонецЕсли;
	Возврат ИмяФормы;
	
КонецФункции

Функция ПолучитьВыражениеАгрегатаИтоговыхЗаписей(ПользовательскоеПоле) Экспорт
	
	ВыражениеДетальныхЗаписей = ПользовательскоеПоле.ПолучитьПредставлениеВыраженияДетальныхЗаписей();
	ВыражениеИтоговыхЗаписей = ПользовательскоеПоле.ПолучитьПредставлениеВыраженияИтоговыхЗаписей();
	ВыражениеАгрегата = СтрЗаменить(ВыражениеИтоговыхЗаписей, ВыражениеДетальныхЗаписей, "");
	ВыражениеАгрегата = СтрЗаменить(ВыражениеАгрегата, ")", "");
	Если ВыражениеАгрегата = "Сумма("
	 ИЛИ ВыражениеАгрегата = "Количество(Различные "
	 ИЛИ ВыражениеАгрегата = "Количество("
	 ИЛИ ВыражениеАгрегата = "Максимум("
	 ИЛИ ВыражениеАгрегата = "Минимум("
	 ИЛИ ВыражениеАгрегата = "Среднее(" Тогда
		Возврат ВыражениеАгрегата;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПараметрИзСтроки(Знач Строка, НомерПараметра = 1) Экспорт
	
	Для Индекс = 1 По НомерПараметра Цикл
		ПоложениеЗапятой = Найти(Строка, ",");
		Если ПоложениеЗапятой = 0 Тогда
			ПодСтрока = Строка;
			Возврат Подстрока;
		Иначе
			ПодСтрока = Лев(Строка, ПоложениеЗапятой - 1);
		КонецЕсли;
		Строка = Сред(Строка, ПоложениеЗапятой + 1);
	КонецЦикла;
	
	Возврат ПодСтрока;
	
КонецФункции

// Возвращает список доступных для выбора ресурсов
Функция ПолучитьСписокДоступныхРесурсов(КомпоновщикНастроек, ВключаяПользовательскиеПоляВыражение = Истина, ВключаяПользовательскиеПоляВыбор = Истина) Экспорт
	
	СписокРесурсов = Новый СписокЗначений;
	ДобавитьРесурсы(СписокРесурсов, КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора, КомпоновщикНастроек, ВключаяПользовательскиеПоляВыражение, ВключаяПользовательскиеПоляВыбор);
	Возврат СписокРесурсов;
	
КонецФункции

Функция ДобавитьРесурсы(СписокРесурсов, КоллекцияПолей, КомпоновщикНастроек, ВключаяПользовательскиеПоляВыражение, ВключаяПользовательскиеПоляВыбор)
	
	Для каждого ДоступноеПоле Из КоллекцияПолей.Элементы Цикл
		Если ДоступноеПоле.Ресурс Тогда
			ПользовательскоеПоле = НайтиПользовательскоеПоле(КомпоновщикНастроек, ДоступноеПоле.Поле);
			Если ПользовательскоеПоле <> Неопределено Тогда
				Если Не (ТипЗнч(ПользовательскоеПоле) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") И ВключаяПользовательскиеПоляВыражение
					ИЛИ ТипЗнч(ПользовательскоеПоле) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") И ВключаяПользовательскиеПоляВыбор) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			СписокРесурсов.Добавить(ДоступноеПоле.Поле, ДоступноеПоле.Заголовок);
		КонецЕсли;
		Если ДоступноеПоле.Папка Тогда
			ДобавитьРесурсы(СписокРесурсов, ДоступноеПоле, КомпоновщикНастроек, ВключаяПользовательскиеПоляВыражение, ВключаяПользовательскиеПоляВыбор);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Возвращает доступное поле по полю компоновки
Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, ОбластьПоиска) Экспорт
	
	Если ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка") Тогда
		ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПолеКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
	 ИЛИ ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
	 ИЛИ ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПоле(ПолеПоиска);
	КонецЕсли;
	
КонецФункции

// Заполняет отбор построителя по отбору компоновщика
Процедура ЗаполнитьОтборПоОтборуКомпоновщика(Отбор, ОтборКомпоновщика) Экспорт
	
	ЗаполнитьЗначенияСвойств(Отбор, ОтборКомпоновщика, "Использование, Представление");
	
	Если ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
		Отбор.ВидСравнения = ВидСравнения.Больше;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		Отбор.ВидСравнения = ВидСравнения.БольшеИлиРавно;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		Отбор.ВидСравнения = ВидСравнения.ВИерархии;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		Отбор.ВидСравнения = ВидСравнения.ВСписке;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		Отбор.ВидСравнения = ВидСравнения.ВСпискеПоИерархии;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
		Отбор.ВидСравнения = ВидСравнения.Меньше;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		Отбор.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		Отбор.ВидСравнения = ВидСравнения.НеВИерархии;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Отбор.ВидСравнения = ВидСравнения.НеВСписке;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		Отбор.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		Отбор.ВидСравнения = ВидСравнения.НеРавно;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		Отбор.ВидСравнения = ВидСравнения.НеСодержит;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
		Отбор.ВидСравнения = ВидСравнения.Равно;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
		Отбор.ВидСравнения = ВидСравнения.Содержит;
	Иначе
		// Не нашли соответствие - не применяем отбор
		Отбор.Использование = Ложь;
		Возврат;
	КонецЕсли;
	
	Отбор.Значение = ОтборКомпоновщика.ПравоеЗначение;
	
КонецПроцедуры

// Возвращает список всех группировок компоновщика настроек
Функция ПолучитьГруппировки(КомпоновщикНастроек) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	ДобавитьГруппировки(Структура, СписокПолей);
	Возврат СписокПолей;
	
КонецФункции

Процедура ДобавитьГруппировки(Структура, СписокПолей)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьГруппировки(ЭлементСтруктуры.Строки, СписокПолей);
			ДобавитьГруппировки(ЭлементСтруктуры.Колонки, СписокПолей);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ДобавитьГруппировки(ЭлементСтруктуры.Серии, СписокПолей);
			ДобавитьГруппировки(ЭлементСтруктуры.Точки, СписокПолей);
		Иначе
			СписокПолей.Добавить(ЭлементСтруктуры);
			ДобавитьГруппировки(ЭлементСтруктуры.Структура, СписокПолей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив полей группировок всех группировок компоновщика настроек
Функция ПолучитьМассивПолейГруппировки(КомпоновщикНастроек, БезПользовательскихПолей = Ложь) Экспорт
	
	МассивПолей = Новый Массив;
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	ДобавитьПоляГруппировкиВМассив(Структура, МассивПолей, БезПользовательскихПолей);
	Возврат МассивПолей;
	
КонецФункции

Процедура ДобавитьПоляГруппировкиВМассив(Структура, МассивПолей, БезПользовательскихПолей)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировкиВМассив(ЭлементСтруктуры.Строки, МассивПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировкиВМассив(ЭлементСтруктуры.Колонки, МассивПолей, БезПользовательскихПолей);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировкиВМассив(ЭлементСтруктуры.Серии, МассивПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировкиВМассив(ЭлементСтруктуры.Точки, МассивПолей, БезПользовательскихПолей);
		Иначе
			Для каждого ТекущееПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				ДоступноеПоле = ЭлементСтруктуры.Выбор.ДоступныеПоляВыбора.НайтиПоле(ТекущееПолеГруппировки.Поле);
				Если ДоступноеПоле <> Неопределено 
				  И (ДоступноеПоле.Родитель = Неопределено ИЛИ Не БезПользовательскихПолей ИЛИ ДоступноеПоле.Родитель.Поле <> Новый ПолеКомпоновкиДанных("UserFields")) Тогда
                	МассивПолей.Добавить(ТекущееПолеГруппировки);
				КонецЕсли;
			КонецЦикла;
			ДобавитьПоляГруппировкиВМассив(ЭлементСтруктуры.Структура, МассивПолей, БезПользовательскихПолей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список полей группировок всех группировок компоновщика настроек
Функция ПолучитьПоляГруппировок(КомпоновщикНастроек, БезПользовательскихПолей = Ложь) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	ДобавитьПоляГруппировки(Структура, СписокПолей, БезПользовательскихПолей);
	Возврат СписокПолей;
	
КонецФункции

Процедура ДобавитьПоляГруппировки(Структура, СписокПолей, БезПользовательскихПолей)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Строки, СписокПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Колонки, СписокПолей, БезПользовательскихПолей);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Серии, СписокПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Точки, СписокПолей, БезПользовательскихПолей);
		Иначе
			Для каждого ТекущееПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				ДоступноеПоле = ЭлементСтруктуры.Выбор.ДоступныеПоляВыбора.НайтиПоле(ТекущееПолеГруппировки.Поле);
				Если ДоступноеПоле <> Неопределено 
				  И (ДоступноеПоле.Родитель = Неопределено ИЛИ Не БезПользовательскихПолей ИЛИ ДоступноеПоле.Родитель.Поле <> Новый ПолеКомпоновкиДанных("UserFields")) Тогда
					СписокПолей.Добавить(Строка(ДоступноеПоле.Поле), ДоступноеПоле.Заголовок);
				КонецЕсли;
			КонецЦикла;
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Структура, СписокПолей, БезПользовательскихПолей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает группировку по полю группировки
Функция ПолучитьЭлементСтруктурыПоПолюГруппировки(ПолеГруппировки, КомпоновщикНастроек) Экспорт
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	Возврат НайтиЭлементСтруктурыПоПолюГруппировки(Структура, ПолеГруппировки);
	
КонецФункции

Функция НайтиЭлементСтруктурыПоПолюГруппировки(Структура, ПолеГруппировки)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ЭлементСтруктуры = НайтиЭлементСтруктурыПоПолюГруппировки(ЭлементСтруктуры.Строки, ПолеГруппировки);
			Если ЭлементСтруктуры = Неопределено Тогда
				Возврат НайтиЭлементСтруктурыПоПолюГруппировки(ЭлементСтруктуры.Колонки, ПолеГруппировки);
			Иначе
				Возврат ЭлементСтруктуры;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			НайденныйЭлементСтруктуры = НайтиЭлементСтруктурыПоПолюГруппировки(ЭлементСтруктуры.Серии, ПолеГруппировки);
			Если НайденныйЭлементСтруктуры = Неопределено Тогда
				Возврат НайтиЭлементСтруктурыПоПолюГруппировки(ЭлементСтруктуры.Точки, ПолеГруппировки);
			Иначе
				Возврат ЭлементСтруктуры;
			КонецЕсли;
		Иначе
			Для каждого ТекущееПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				Если ПолеГруппировки = ТекущееПолеГруппировки.Поле Тогда
					Возврат ЭлементСтруктуры;
				КонецЕсли;
			КонецЦикла;
			Возврат НайтиЭлементСтруктурыПоПолюГруппировки(ЭлементСтруктуры.Структура, ПолеГруппировки);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Возвращает пользовательское поле по полю компоновки данных
Функция НайтиПользовательскоеПоле(КомпоновщикНастроек, ПолеКомпоновкиДанных) Экспорт
	
	Для каждого ПользовательскоеПоле Из КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы Цикл
		Если ПользовательскоеПоле.ПутьКДанным = Строка(ПолеКомпоновкиДанных) Тогда
			Возврат ПользовательскоеПоле;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Возвращает массив наборов данных - запрос в схеме компоновки данных
Функция ПолучитьНаборыДанныхЗапрос(СхемаКомпоновкиДанных, НаборыДанных = Неопределено, МассивНаборовДанных = Неопределено) Экспорт
	
	Если МассивНаборовДанных = Неопределено Тогда
		МассивНаборовДанных = Новый Массив;
	КонецЕсли;
	Если НаборыДанных = Неопределено Тогда
		НаборыДанных = СхемаКомпоновкиДанных.НаборыДанных;
	КонецЕсли;
	
	Для каждого НаборДанных Из НаборыДанных Цикл
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			МассивНаборовДанных.Добавить(НаборДанных);
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			ПолучитьНаборыДанныхЗапрос(СхемаКомпоновкиДанных, НаборДанных.Элементы, МассивНаборовДанных)
		КонецЕсли;
	КонецЦикла;
	Возврат МассивНаборовДанных;
	
КонецФункции

// Возвращает группировку - детальные записи компоновщика настроек
Функция ПолучитьЭлементСтруктурыДетальныеЗаписи(КомпоновщикНастроек) Экспорт
	
	ПоследнийЭлементСтруктуры = ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Истина);
	Если ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
	 ИЛИ ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
	 ИЛИ ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		Если ПоследнийЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() = 0 Тогда
			Возврат ПоследнийЭлементСтруктуры;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает последний элемент структуры - группировку
Функция ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Строки = Истина) Экспорт
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	Если Структура.Количество() = 0 Тогда
		Возврат КомпоновщикНастроек.Настройки;
	КонецЕсли;
	
	Если Строки Тогда
		ИмяСтруктурыТаблицы = "Строки";
		ИмяСтруктурыДиаграммы = "Серии";
	Иначе
		ИмяСтруктурыТаблицы = "Колонки";
		ИмяСтруктурыДиаграммы = "Точки";
	КонецЕсли;
	
	Пока Истина Цикл
		ЭлементСтруктуры = Структура[0];
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыТаблицы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыДиаграммы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Если ЭлементСтруктуры.Структура.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры.Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыТаблицы];
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных")	Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
		Иначе
			Возврат ЭлементСтруктуры;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Структура[0];
	
КонецФункции

// Расчет суммы выделенных ячеек
//
Процедура РасчетСуммыВыделенныхЯчеекТабличногоПоля(ФормаОтчета, Элемент) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	ОбщаяСумма = 0;
	Для Каждого Область Из Элемент.ВыделенныеОбласти Цикл
		Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Для ИндексСтрока = Область.Верх По Область.Низ Цикл
				Для ИндексКолонка = Область.Лево По Область.Право Цикл
					Попытка
						ОбщаяСумма = ОбщаяСумма + Число(СтрЗаменить(Элемент.Область("R" + Формат(ИндексСтрока, "ЧГ=0") + "C" + Формат(ИндексКолонка, "ЧГ=0")) .Текст, " ", ""));
					Исключение
					КонецПопытки;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ЭлементыФормы.ПолеСумма.Значение = ОбщаяСумма;
	
КонецПроцедуры // РезультатПриАктивизацииОбласти

Функция ПолучитьТекстЗаголовка(ОбъектОтчета, ЗаголовокТекст = "", ОрганизацияВНачале = Истина) Экспорт
	
	ТекстОрганизации = "";
	
	Если ЗначениеЗаполнено(ОбъектОтчета.мСписокСтруктурныхЕдиниц) Тогда
		ТекстОрганизации = РаботаСДиалогами.ВыгрузитьСписокВСтроку(ОбъектОтчета.мСписокСтруктурныхЕдиниц,,,Истина);//Организация.НаименованиеПолное;
		
		//ТекстОрганизации = СокрЛП(ОбъектОтчета.Организация.НаименованиеПолное);
		//Если ПустаяСтрока(ТекстОрганизации) Тогда
		//	ТекстОрганизации = СокрЛП(ОбъектОтчета.Организация.Наименование);
		//КонецЕсли;
	КонецЕсли;
	
	Если ОбъектОтчета.Метаданные().Реквизиты.Найти("Период") = Неопределено Тогда
		Попытка
			ТекстПериод = " за " + ПредставлениеПериода(НачалоДня(ОбъектОтчета.НачалоПериода), КонецДня(ОбъектОтчета.КонецПериода), "ФП");
		Исключение
			ТекстПериод = "";
		КонецПопытки;
	Иначе
		Если ЗначениеЗаполнено(ОбъектОтчета.Период) Тогда 
			ТекстПериод = " на " + Формат(ОбъектОтчета.Период, "ДФ=dd.MM.yyyy");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовокОтчета = "" + ЗаголовокТекст;
	
	Если ЗначениеЗаполнено(ТекстПериод) Тогда
		ЗаголовокОтчета = ЗаголовокОтчета + ТекстПериод;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОрганизации) Тогда
		Если ОрганизацияВНачале Тогда
			ЗаголовокОтчета = ТекстОрганизации + Символы.ПС + ЗаголовокОтчета;
		Иначе
			ЗаголовокОтчета = ЗаголовокОтчета + " " + ТекстОрганизации;
		КонецЕсли;
	КонецЕсли;
		
	Возврат ЗаголовокОтчета;
	
КонецФункции

Процедура ОбработкаРезультатаОтчета(ОбъектОтчета, Результат) Экспорт
	
	// Выводим надписи вертикально, если количество точек диаграмм больше 9
	Для Каждого Рисунок Из Результат.Рисунки Цикл
		Если ТипЗнч(Рисунок.Объект) = Тип("Диаграмма") Тогда
		    Рисунок.Объект.ОбластьПостроения.ВертикальныеМетки  = (Рисунок.Объект.Точки.Количество() > 9);
			Рисунок.Объект.ОбластьПостроения.ФорматШкалыЗначений = "ЧГ=3,0";
			Рисунок.Объект.ОбластьЛегенды.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ ПРОГРАММНОЙ НАСТРОЙКИ КОМПОНОВЩИКА НАСТРОЕК

// Устанавливает параметр данных компоновщика настроек
Функция УстановитьПараметр(КомпоновщикНастроекКоллекцияЗначений, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	Если ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	ИначеЕсли ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.Найти(ИмяПараметра);
	ИначеЕсли ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("ОформлениеКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		ЗначениеПараметра.Использование = Использование;
		ЗначениеПараметра.Значение      = Значение;
		Возврат ЗначениеПараметра;
	КонецЕсли;

КонецФункции

// Устанавливает параметр вывода компоновщика настроек
Функция УстановитьПараметрВывода(КомпоновщикНастроек, ИмяПараметра, Значение) Экспорт
	
	Если ТипЗнч(КомпоновщикНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Иначе
		ЗначениеПараметра = КомпоновщикНастроек.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		ЗначениеПараметра.Использование = Истина;
		ЗначениеПараметра.Значение = Значение;
		Возврат ЗначениеПараметра;
	КонецЕсли;
	
КонецФункции

// Заменяет правое значение отбора компоновщика в случае совпадения вида сравнения и левого значения
Функция ЗаменитьПравоеЗначениеСуществующегоОтбора(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено, Использование = Истина) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
			ЭлементОтбора.Использование = Использование;
			ЭлементОтбора.ВидСравнения = ВидСравнения;
			ЭлементОтбора.ПравоеЗначение = Значение;
			Возврат Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Добавляет отбор в набор отборов компоновщика или группы отборов
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено, Использование = Истина, Применение = Неопределено) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
		
	НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.Использование  = Использование;
	НовыйЭлемент.ЛевоеЗначение 	= Поле;
	НовыйЭлемент.ВидСравнения 	= ВидСравнения;
	НовыйЭлемент.ПравоеЗначение = Значение;
	          	
	Если Применение <> Неопределено Тогда
		НовыйЭлемент.Применение = Применение;
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Удаляет отбор из компоновщика настроек, если поле не указано, очищает отбор
Функция УдалитьОтбор(КомпоновщикНастроек, Знач Поле = Неопределено) Экспорт
	
	Если Поле = Неопределено Тогда
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
		Возврат Истина;
	КонецЕсли;
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	ПолеУдалено = Ложь;
	Элементы = ПолучитьЭлементыОтбора(КомпоновщикНастроек);
	Для каждого Элемент Из Элементы Цикл
		Если Элемент.Использование И Элемент.ЛевоеЗначение = Поле Тогда
			Элемент.Использование = Ложь;
			ПолеУдалено = Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат ПолеУдалено;
	
КонецФункции

// Удаляет указанное выбранное поле из компоновщика настроек, если поле не указано - очищает все поля
Функция УдалитьВыбранноеПоле(ЭлементСтруктуры, Знач Поле = Неопределено) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Если Поле = Неопределено Тогда
		ВыбранныеПоля.Элементы.Очистить();
		Возврат Истина;
	КонецЕсли;
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	ПолеУдалено = Ложь;
	Элементы = ПолучитьВыбранныеПоля(ВыбранныеПоля);
	Для каждого Элемент Из Элементы Цикл
		Если Элемент.Использование И Элемент.Поле = Поле Тогда
			Элемент.Использование = Ложь;
			ПолеУдалено = Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат ПолеУдалено;
	
КонецФункции

// Добавляет группировку в компоновщик настроек в самый нижний уровень структуры, если поле не укзано - детальные поля
Функция ДобавитьГруппировку(КомпоновщикНастроек, Знач Поле = Неопределено, Строки = Истина) Экспорт
	
	ЭлементСтруктуры = Неопределено;
	
	Если ТипЗнч(КомпоновщикНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") тогда
		ЭлементСтруктуры = ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Строки);
		Если ЭлементСтруктуры = Неопределено 
			ИЛИ ПолучитьЭлементСтруктурыДетальныеЗаписи(КомпоновщикНастроек) <> Неопределено 
			И Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли ТипЗнч(КомпоновщикНастроек) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ГруппировкаКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ТаблицаКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ДиаграммаКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") 
		тогда
		Если ТипЗнч(КомпоновщикНастроек) = Тип("ТаблицаКомпоновкиДанных") тогда 
			Если Строки тогда 
				ЭлементСтруктуры = КомпоновщикНастроек.Строки; 
			Иначе
				ЭлементСтруктуры = КомпоновщикНастроек.Колонки; 
			КонецЕсли;
		ИначеЕсли ТипЗнч(КомпоновщикНастроек) = Тип("ДиаграммаКомпоновкиДанных") тогда
			Если Строки тогда 
				ЭлементСтруктуры = КомпоновщикНастроек.Серии; 
			Иначе
				ЭлементСтруктуры = КомпоновщикНастроек.Точки; 
			КонецЕсли;
		Иначе
			ЭлементСтруктуры = КомпоновщикНастроек; 
		КонецЕсли; 
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
	 ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить();
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
			ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		НоваяГруппировка = ЭлементСтруктуры.Добавить();
	Иначе
		НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	КонецЕсли;
	
	НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	Если Поле <> Неопределено Тогда
		ПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Поле;
	КонецЕсли;
	Возврат НоваяГруппировка;
	
КонецФункции

// Функция удаляет из компоновщика настроек указанную в параметре группировку, если параметр не указан, удаляет все группировки
Функция УдалитьГруппировку(КомпоновщикНастроек, Знач Поле = Неопределено, Строки = Истина) Экспорт
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Элемент = КомпоновщикНастроек.Настройки.Структура[0];
	Если ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
		Если Строки И Элемент.Строки.Количество() > 0 Тогда
			Элемент = Элемент.Строки[0];
		ИначеЕсли Не Строки И Элемент.Колонки.Количество() > 0 Тогда
			Элемент = Элемент.Колонки[0];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Элемент) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		Если Строки И Элемент.Серии.Количество() > 0 Тогда
			Элемент = Элемент.Серии[0];
		ИначеЕсли Не Строки И Элемент.Точки.Количество() > 0 Тогда
			Элемент = Элемент.Точки[0];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	Если Поле = Неопределено Тогда
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		Возврат Неопределено;
	КонецЕсли;
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	Пока Истина Цикл
		Если Элемент.ПоляГруппировки.Элементы.Количество() > 0 
		   И Элемент.ПоляГруппировки.Элементы[0].Поле = Поле Тогда
			Элемент.Родитель.Структура.Очистить();
			Прервать;
			Возврат Истина;
		ИначеЕсли Элемент.Структура.Количество() > 0 Тогда
			Элемент = Элемент.Структура[0];
		Иначе 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Возвращает массив элементов отбора или групп элементов отбора
Функция ПолучитьЭлементыОтбора(КомпоновщикНастроек, ТолькоГруппы = Ложь) Экспорт
	
	МассивПолей = Новый Массив;
	ДобавитьЭлементыОтбораВМассив(КомпоновщикНастроек.Настройки.Отбор.Элементы, МассивПолей, ТолькоГруппы);
	Возврат МассивПолей;
	
КонецФункции

Процедура ДобавитьЭлементыОтбораВМассив(Элементы, МассивПолей, ТолькоГруппы = Ложь)
	
	Для каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
			ДобавитьЭлементыОтбораВМассив(Элемент.Элементы, МассивПолей, ТолькоГруппы);
		Иначе
			Если Не ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив выбранных полей или групп выбранных полей
Функция ПолучитьВыбранныеПоля(ЭлементСтруктуры, ТолькоГруппы = Ложь) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") 
	 ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных")  Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	МассивПолей = Новый Массив;
	ДобавитьВыбранныеПоляВМассив(ВыбранныеПоля.Элементы, МассивПолей, ТолькоГруппы);
	Возврат МассивПолей;
	
КонецФункции

Процедура ДобавитьВыбранныеПоляВМассив(ЭлементСтруктуры, МассивПолей, ТолькоГруппы = Ложь)
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Для каждого Элемент Из ЭлементСтруктуры Цикл
		Если ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			Если ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
			ДобавитьВыбранныеПоляВМассив(Элемент.Элементы, МассивПолей, ТолькоГруппы);
		Иначе
			Если Не ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет, могут ли в отчете выводиться детальные поля
Функция ВСтруктуреМогутБытьДетальныеПоля(КомпоновщикНастроек) Экспорт
	
	ПоляГруппировки = ПолучитьМассивПолейГруппировки(КомпоновщикНастроек);
	ВыбранныеПоля = ПолучитьВыбранныеПоля(КомпоновщикНастроек);
	МогутБытьДетальныеПоля = Ложь;
	Для каждого ВыбранноеПоле Из ВыбранныеПоля Цикл
		ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ВыбранноеПоле.Поле, КомпоновщикНастроек);
		Если ДоступноеПоле = Неопределено ИЛИ ДоступноеПоле.Ресурс Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ВыбранноеПоле.Использование Тогда
			Продолжить;
		КонецЕсли;
		ЕстьРодитель = Ложь;
		Для каждого ПолеГруппировки Из ПоляГруппировки Цикл
			Если Не ПолеГруппировки.Использование ИЛИ ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("") Тогда
				Продолжить;
			КонецЕсли;
			Если ПолеЯвляетсяРодителемДругого(КомпоновщикНастроек, ПолеГруппировки.Поле, ВыбранноеПоле.Поле) Тогда
				ЕстьРодитель = Истина;
			КонецЕсли;
		КонецЦикла;
		Если Не ЕстьРодитель Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
		
КонецФункции

Функция ПолеЯвляетсяРодителемДругого(КомпоновщикНастроек, Поле1, Поле2)
	
	ДоступноеПоле1 = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Поле1, КомпоновщикНастроек);
	ДоступноеПоле2 = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Поле2, КомпоновщикНастроек);
	Если ДоступноеПоле1 = ДоступноеПоле2 Тогда
		Возврат Истина;
	КонецЕсли;
	Пока ДоступноеПоле2.Родитель <> Неопределено Цикл
		ДоступноеПоле2 = ДоступноеПоле2.Родитель;
		Если ДоступноеПоле1 = ДоступноеПоле2 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

// Добавляет в набор данных поле набора данных
Функция ДобавитьПолеНабораДанных(НаборДанных, Поле, Заголовок, ПутьКДанным = Неопределено) Экспорт
	
	Если ПутьКДанным = Неопределено Тогда
		ПутьКДанным = Поле;
	КонецЕсли;
	
	ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораДанных.Поле        = Поле;
	ПолеНабораДанных.Заголовок   = Заголовок;
	ПолеНабораДанных.ПутьКДанным = ПутьКДанным;
	Возврат ПолеНабораДанных;
	
КонецФункции

// Добавляет в набор данных поля периода Период секунда, минута, час ....
Функция ДобавитьПоляПериодаВНаборДанных(НаборДанных) Экспорт
	
	СписокПериодов = Новый СписокЗначений;
	СписокПериодов.Добавить("ПериодСекунда",   "Период секунда");
	СписокПериодов.Добавить("ПериодМинута",    "Период минута");
	СписокПериодов.Добавить("ПериодЧас",       "Период час");
	СписокПериодов.Добавить("ПериодДень",      "Период день");
	СписокПериодов.Добавить("ПериодНеделя",    "Период неделя");
	СписокПериодов.Добавить("ПериодДекада",    "Период декада");
	СписокПериодов.Добавить("ПериодМесяц",     "Период месяц");
	СписокПериодов.Добавить("ПериодКвартал",   "Период квартал");
	СписокПериодов.Добавить("ПериодПолугодие", "Период полугодие");
	СписокПериодов.Добавить("ПериодГод",       "Период год");
	
	ИмяПапки = "Периоды";
	СписокПолейНабораДанных = Новый СписокЗначений;
	ПапкаПолейНабораДанных = НаборДанных.Поля.Добавить(Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных"));
	ПапкаПолейНабораДанных.Заголовок   = ИмяПапки;
	ПапкаПолейНабораДанных.ПутьКДанным = ИмяПапки;
	
	Для каждого Период Из СписокПериодов Цикл
		ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Поле        = Период.Значение;
		ПолеНабораДанных.Заголовок   = Период.Представление;
		ПолеНабораДанных.ПутьКДанным = ИмяПапки + "." + Период.Значение;
		СписокПолейНабораДанных.Добавить(ПолеНабораДанных);
	КонецЦикла;
	
	Возврат СписокПолейНабораДанных;
	
КонецФункции

// Функция добавляет поле итога в схему компоновки данных. Если параметр Выражение не указан, используется Сумма(ПутьКДанным)
Функция ДобавитьПолеИтога(СхемаКомпоновкиДанных, ПутьКДанным, Выражение = Неопределено) Экспорт
	
	Если Выражение = Неопределено Тогда
		Выражение = "Сумма(" + ПутьКДанным + ")";
	КонецЕсли;
	
	ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = ПутьКДанным;
	ПолеИтога.Выражение = Выражение;
	Возврат ПолеИтога;
	
КонецФункции

// Функция добавляет выбранное поле в набор выбранных полей
Функция ДобавитьВыбранноеПоле(ЭлементСтруктуры, Знач Поле, Заголовок = Неопределено) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	ВыбранноеПоле = ВыбранныеПоля.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Поле;
	Если Заголовок <> Неопределено Тогда
		ВыбранноеПоле.Заголовок = Заголовок;
	КонецЕсли;
	Возврат ВыбранноеПоле;
	
КонецФункции

// Функция добавляет в схему компоновки источник данных с типом "Local"
Функция ДобавитьЛокальныйИсточникДанных(СхемаКомпоновкиДанных) Экспорт
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	Возврат ИсточникДанных;
	
КонецФункции

// Функция добавляет набор данных - запрос в указанную в параметре коллекцию наборов данных
Функция ДобавитьНаборДанныхЗапрос(НаборыДанных, ИсточникДанных, ИмяНабораДанных = "НаборДанных1") Экспорт
	
	НаборДанных = НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = ИмяНабораДанных;
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
	Возврат НаборДанных;
	
КонецФункции

// Функция добавляет набор данных - объединение в указанную в параметре коллекцию наборов данных
Функция ДобавитьНаборДанныхОбъединение(НаборыДанных, ИсточникДанных, ИмяНабораДанных = "НаборДанных1") Экспорт
	
	НаборДанных = НаборыДанных.Добавить(Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных"));
	НаборДанных.Имя = ИмяНабораДанных;
	Возврат НаборДанных;
	
КонецФункции

Процедура ЗаполнитьПолеНабораДанныхОстаток(ПолеНабораДанных, ГруппаОстатка) Экспорт
	
	ПутьКДанным = ПолеНабораДанных.ПутьКДанным;
	
	Если Найти(ПутьКДанным, "НачальныйОстаток") > 0 ИЛИ Найти(ПутьКДанным, "КонечныйОстаток") > 0 Тогда
		ПолеНабораДанных.Роль.Остаток = Истина;
		ПолеНабораДанных.Роль.ГруппаОстатка = ГруппаОстатка;
		Если ВРег(Прав(ПутьКДанным, 2)) = "ДТ" Тогда
			ПолеНабораДанных.Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Дебет
		ИначеЕсли ВРег(Прав(ПутьКДанным, 2)) = "КТ" Тогда
			ПолеНабораДанных.Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Кредит
		Иначе
			ПолеНабораДанных.Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Нет
		КонецЕсли;
		Если Найти(ПутьКДанным, "НачальныйОстаток") > 0 Тогда
			ПолеНабораДанных.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.НачальныйОстаток;
		ИначеЕсли Найти(ПутьКДанным, "КонечныйОстаток") > 0 Тогда
			ПолеНабораДанных.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.КонечныйОстаток;
		Иначе
			ПолеНабораДанных.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.Нет;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Функция ПоказатьСхему(СхемаКомпоновкиДанных, КомпоновщикНастроек, Форма) Экспорт
	
	СкопироватьНастройкиКомпоновкиДанных(СхемаКомпоновкиДанных.НастройкиПоУмолчанию, КомпоновщикНастроек.ПолучитьНастройки());
	Конструктор = Новый КонструкторСхемыКомпоновкиДанных(СхемаКомпоновкиДанных);
	Конструктор.Редактировать(Форма);
	
	Возврат Истина;
	
КонецФункции

// Добавляет в макеты макета компоновки расшифровку для ресурсов
Процедура ДополнитьМакетыМакетаКомпоновкиРасшифровкойРесурсов(МакетКомпоновки, КомпоновщикНастроек) Экспорт
	
	Для каждого Макет Из МакетКомпоновки.Макеты Цикл
		// Получим массив параметров расшифровки
		МассивВыраженийПолей = Новый Массив;
		Для каждого Параметр Из Макет.Параметры Цикл
			Если ТипЗнч(Параметр) <> Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			Для каждого ВыражениеПоля Из Параметр.ВыраженияПолей Цикл
				Если Не ЭтоВыражениеПоляПараметраРасшифровкиРесурс(ВыражениеПоля, КомпоновщикНастроек) Тогда
					МассивВыраженийПолей.Добавить(ВыражениеПоля);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		// Установим параметры расшифровки у ресурсов
		Для каждого Параметр Из Макет.Параметры Цикл
			Если ТипЗнч(Параметр) <> Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			Ресурс = Ложь;
			Для каждого ВыражениеПоля Из Параметр.ВыраженияПолей Цикл
				Если ЭтоВыражениеПоляПараметраРасшифровкиРесурс(ВыражениеПоля, КомпоновщикНастроек) Тогда
					Ресурс = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не Ресурс Тогда
				Продолжить;
			КонецЕсли;
			Для каждого ВыражениеПоля Из МассивВыраженийПолей Цикл
				Если Параметр.ВыраженияПолей.Найти(ВыражениеПоля.Поле) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НовоеВыражениеПоля = Параметр.ВыраженияПолей.Добавить();
				ЗаполнитьЗначенияСвойств(НовоеВыражениеПоля, ВыражениеПоля);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоВыражениеПоляПараметраРасшифровкиРесурс(ВыражениеПоля, КомпоновщикНастроек)
	
	ДоступныеРесурсы = ПолучитьСписокДоступныхРесурсов(КомпоновщикНастроек);
	ДостуныйРесурс = ДоступныеРесурсы.НайтиПоЗначению(Новый ПолеКомпоновкиДанных(ВыражениеПоля.Поле));
	Возврат ДостуныйРесурс <> Неопределено;
	
КонецФункции

Процедура ОбработкаИзмененияТиповогоОтчетаНаФормеОтчета(ОтчетОбъект, ФормаОтчета) Экспорт
	
	Если ОтчетОбъект.СохраненнаяНастройка <> Неопределено 
	   И ОтчетОбъект.СохраненнаяНастройка.СохранятьАвтоматически Тогда
		ФормаОтчета.СохранитьНастройку();
	КонецЕсли;
	
КонецПроцедуры

Функция СериализоватьОбъект(Объект) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Объект);
	СтрокаXML = ЗаписьXML.Закрыть();
	Возврат СтрокаXML;
	
КонецФункции

// Копирует упорядочивания из элемента структуры настройки СКД в отчет
//
// Параметры:
//  Настройка - настройки схемы компоновки данных
//
Процедура ПеренестиПорядокВОтчет(Настройки) Экспорт
	
	Если Настройки.Структура.Количество() <> 0 тогда
		
		Если ТипЗнч(Настройки.Структура[0]) = Тип("ТаблицаКомпоновкиДанных") тогда
			
			Если Настройки.Структура[0].Строки.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Строки[0]);
				
			КонецЕсли;
			
			Если Настройки.Структура[0].Колонки.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Колонки[0]);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Настройки.Структура[0]) = Тип("ГруппировкаТаблицыКомпоновкиДанных") тогда
			
			ПеренестиПорядок(Настройки, Настройки.Структура[0].Строки[0]);
			
		ИначеЕсли ТипЗнч(Настройки.Структура[0]) = Тип("ДиаграммаКомпоновкиДанных") тогда
			
			Если Настройки.Структура[0].Серии.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Серии[0]);
				
			КонецЕсли;
			
			Если Настройки.Структура[0].Точки.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Точки[0]);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ПеренестиВсеУпорядочиванияВОтчет()

// Копирует упорядочивания из группировки объекта в отчет
//
// Параметры:
//  Настройка - настройки схемы компоновки данных
//  Структура - структура настройки компоновки данных
//
Процедура ПеренестиПорядок(Настройки, Структура) Экспорт
	
	СкопироватьЭлементы(Настройки.Порядок, Структура.Порядок);
	
	Структура.Порядок.Элементы.Очистить();
	
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	Если Структура.Структура.Количество() <> 0 тогда
		
		ПеренестиПорядок(Настройки, Структура.Структура[0]);
		
	КонецЕсли;
	
КонецПроцедуры //ПеренестиУпорядочивание()

Процедура УдалитьДублиОтбора(КомпоновщикНастроек) Экспорт
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор.Элементы;
		
	Количество = Отбор.Количество();
	Для Индекс = 1 По Количество Цикл
		ЭлементСКонца = Отбор[Количество - Индекс];
		Для ИндексВнутр = 0 По Количество - Индекс - 1 Цикл
			ЭлементВнутр = Отбор[ИндексВнутр];
			Если ТипЗнч(ЭлементВнутр) = Тип("ЭлементОтбораКомпоновкиДанных")
			   И ТипЗнч(ЭлементСКонца) = Тип("ЭлементОтбораКомпоновкиДанных")
			   И ЭлементВнутр.ЛевоеЗначение = ЭлементСКонца.ЛевоеЗначение
			   И ЭлементВнутр.ВидСравнения = ЭлементСКонца.ВидСравнения
			   И ЭлементВнутр.Использование = ЭлементСКонца.Использование
			   И ПравыеЗначенияОтборовСовпадают(ЭлементВнутр.ПравоеЗначение, ЭлементСКонца.ПравоеЗначение)
		       И ЭлементВнутр.Применение = ЭлементСКонца.Применение Тогда
				Отбор.Удалить(ЭлементСКонца);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	      	
КонецПроцедуры

Функция ПравыеЗначенияОтборовСовпадают(Значение1, Значение2)
	
	Если ТипЗнч(Значение1) <> ТипЗнч(Значение2) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Значение1) <> Тип("СписокЗначений") Тогда
		Возврат Значение1 = Значение2;
 	ИначеЕсли ТипЗнч(Значение1) = Тип("СписокЗначений") Тогда
		Если Значение1.Количество() <> Значение2.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;
		Совпадают = Истина;
		Для каждого Элемент1 Из Значение1 Цикл
			Если Значение2.НайтиПоЗначению(Элемент1.Значение) = Неопределено Тогда
				Совпадают = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Для каждого Элемент2 Из Значение2 Цикл
			Если Значение1.НайтиПоЗначению(Элемент2.Значение) = Неопределено Тогда
				Совпадают = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Возврат Совпадают;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////
// ДИНАМИЧЕСКИЕ ОТБОРЫ

Процедура НарисоватьСтандартныйПериод(ОтчетОбъект, ФормаОтчета, ЗначенияНастроек, Параметры, Лево, ЕстьПериодНаГорПанели)
	
		Если НЕ Параметры.ДеревоНастроекСтандартныхСтраниц.Строки.Найти("Период").Использование Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыИсполненияОтчета = Неопределено;
		ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
		
		Если ПараметрыИсполненияОтчета <> Неопределено и ПараметрыИсполненияОтчета.Свойство("МинимальныйПериодОтчета") тогда
			НарисоватьПериодПолемВыбора(ОтчетОбъект, ФормаОтчета, ЗначенияНастроек, Параметры, Лево, ЕстьПериодНаГорПанели);
			Возврат;
		КонецЕсли;
		
		ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
		КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
		
		ЦветФонаКнопки = ЦветаСтиля.ЦветФонаКнопки;
		// Закладка Стандартный Период
		ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
		ЗначениеПараметраКонецПериода  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
		ЗначениеПараметраПериод        = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		Лево = 0;
		
		// Стандартный период
		Если ЗначениеПараметраНачалоПериода <> Неопределено
			И ЗначениеПараметраКонецПериода <> Неопределено Тогда
			
			//	   	Панель = Неопределено;
			ЭлементыФормы.ПанельПользователяГоризонтальная.ТекущаяСтраница = ЭлементыФормы.ПанельПользователяГоризонтальная.Страницы.ГоризонтальныеОтборы;
			Панель = ЭлементыФормы.ПанельПользователяГоризонтальная;
			
			Верх = 6;
			
			НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборСтандартныйПериод",, Панель);
			НовыйЭлемент.Данные = "СтандартныйПериод";
			НовыйЭлемент.Видимость = Ложь;
			
			// Поле выбора Стандартный период
			НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВыбора"), "ДинамическийОтборСтандартныйПериодПользователя",, Панель);
			НовыйЭлемент.Верх = Верх;
			НовыйЭлемент.Лево = Лево;
			НовыйЭлемент.Ширина = 200;
			НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Строка");
			НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
			СписокВыбора = ПолучитьСписокВыбораСтандартногоПериодаПользователя(Параметры);;
			НовыйЭлемент.СписокВыбора = СписокВыбора;
			Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиСтандартныйПериодПользователяПриИзменении;
			НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
			
			УстановитьДопустимоеЗначениеСпискаВыбора(НовыйЭлемент, ФормаОтчета.СтандартныйПериод);
		
			// Восстанавливаем значение
			Если ЗначенияНастроек.Свойство("СтандартныйПериод") Тогда
				СтандартныйПериод = ЗначенияНастроек.СтандартныйПериод;
				Если СписокВыбора.НайтиПоЗначению(СтандартныйПериод.Вариант) <> Неопределено Тогда
					НовыйЭлемент.Значение = СтандартныйПериод.Вариант;
					ФормаОтчета.СтандартныйПериод = СтандартныйПериод;
				КонецЕсли;
			КонецЕсли;
			
			Лево = Лево + НовыйЭлемент.Ширина + 6;
			
			// Надпись с
			НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтборНадписьС",, Панель);
			НовыйЭлемент.Верх = Верх+2;
			НовыйЭлемент.Лево = Лево;
			НовыйЭлемент.Ширина = 6;
			НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			НовыйЭлемент.Заголовок = "с:";
			
			Лево = Лево + НовыйЭлемент.Ширина + 6;
			
			// Дата с
			НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборДатаНачала",, Панель);
			НовыйЭлемент.Верх = Верх;
			НовыйЭлемент.Лево = Лево;
			НовыйЭлемент.Ширина = 80;
			НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
			НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
			НовыйЭлемент.Данные = "СтандартныйПериод.ДатаНачала";
			НовыйЭлемент.Доступность = СписокВыбора.НайтиПоЗначению(ВариантСтандартногоПериода.ПроизвольныйПериод) <> Неопределено;
			Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДатаСтандартногоПериодаПриИзменении;
			НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
			Лево = Лево + НовыйЭлемент.Ширина + 6;
			
			
			// Надпись по
			НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтборНадписьПо",, Панель);
			НовыйЭлемент.Верх = Верх+2;
			НовыйЭлемент.Лево = Лево;
			НовыйЭлемент.Ширина = 6;
			НовыйЭлемент.Заголовок = "по:";
			НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			Лево = Лево + НовыйЭлемент.Ширина + 6;
			
			// Дата по
			НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборДатаОкончания",, Панель);
			НовыйЭлемент.Верх = Верх;
			НовыйЭлемент.Лево = Лево;
			НовыйЭлемент.Ширина = 80;
			НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
			НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
			НовыйЭлемент.Данные = "СтандартныйПериод.ДатаОкончания";
			НовыйЭлемент.Доступность = СписокВыбора.НайтиПоЗначению(ВариантСтандартногоПериода.ПроизвольныйПериод) <> Неопределено;
			Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДатаСтандартногоПериодаПриИзменении;
			НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
			Лево = Лево + НовыйЭлемент.Ширина + 6;
			ЕстьПериодНаГорПанели = Истина;
			
			НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Кнопка"), "ДинамическийОтборПериодаВыборПериода",, Панель);
			НовыйЭлемент.Заголовок = "...";
			НовыйЭлемент.Верх = Верх;
			НовыйЭлемент.Лево = Лево;
			НовыйЭлемент.Ширина = 15;
			НовыйЭлемент.Высота = 19
			;
			Лево = Лево + НовыйЭлемент.Ширина + 6;
			
			Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиИзменениеЗначенияДинамическогоОтбора;
			НовыйЭлемент.УстановитьДействие("Нажатие", Действие);
		
		КонецЕсли;
		
		// Стандартная дата начала
		Если ЗначениеПараметраПериод <> Неопределено Тогда
			
			ЭлементыФормы.ПанельПользователяГоризонтальная.ТекущаяСтраница = ЭлементыФормы.ПанельПользователяГоризонтальная.Страницы.ГоризонтальныеОтборы;
			
			Верх = 6;
			
			НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборСтандартнаяДатаНачала",, ЭлементыФормы.ПанельПользователяГоризонтальная);
			НовыйЭлемент.Данные = "СтандартнаяДатаНачала";
			НовыйЭлемент.Видимость = Ложь;
			
			// Поле выбора Стандартная дата начала
			НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВыбора"), "ДинамическийОтборСтандартнаяДатаНачалаПользователя",, ЭлементыФормы.ПанельПользователяГоризонтальная);
			НовыйЭлемент.Верх = Верх;
			НовыйЭлемент.Лево = Лево;
			НовыйЭлемент.Ширина = 200;
			НовыйЭлемент.Высота = 19;
			НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Строка");
			НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
			СписокВыбора = ПолучитьСписокВыбораСтандартнойДатыНачалаПользователя(Параметры);
			НовыйЭлемент.СписокВыбора = СписокВыбора;
			Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиСтандартнаяДатаНачалаПользователяПриИзменении;
			НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
			
			УстановитьДопустимоеЗначениеСпискаВыбора(НовыйЭлемент, ФормаОтчета.СтандартнаяДатаНачала);		
			
			// Восстанавливаем значение варианта стандартной даты начала
			Если ЗначенияНастроек.Свойство("СтандартнаяДатаНачала") Тогда
				СтандартнаяДатаНачала = ЗначенияНастроек.СтандартнаяДатаНачала;
				Если СписокВыбора.НайтиПоЗначению(СтандартнаяДатаНачала.Вариант) <> Неопределено Тогда
					НовыйЭлемент.Значение = СтандартнаяДатаНачала.Вариант;
					ФормаОтчета.СтандартнаяДатаНачала = СтандартнаяДатаНачала;
				КонецЕсли;
			КонецЕсли;
			
			Лево = Лево + НовыйЭлемент.Ширина + 6;
			
			// Надпись дата
			НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтборНадписьДата",, ЭлементыФормы.ПанельПользователяГоризонтальная);
			НовыйЭлемент.Верх = Верх+2;
			НовыйЭлемент.Лево = Лево;
			НовыйЭлемент.Ширина = 26;
			НовыйЭлемент.Заголовок = "дата:";
			Лево = Лево + НовыйЭлемент.Ширина + 6;
			
			
			// Поле ввода даты
			НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборДата",, ЭлементыФормы.ПанельПользователяГоризонтальная);
			НовыйЭлемент.Верх = Верх;
			НовыйЭлемент.Лево = Лево;
			НовыйЭлемент.Ширина = 80;
			НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
			НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
			НовыйЭлемент.Данные = "СтандартнаяДатаНачала.Дата";
			НовыйЭлемент.Доступность = СписокВыбора.НайтиПоЗначению(ВариантСтандартнойДатыНачала.ПроизвольнаяДата) <> Неопределено;
			Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДатаСтандартнойДатыНачалаПриИзменении;
			НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
			Лево = Лево + НовыйЭлемент.Ширина + 6;
			
			ЕстьПериодНаГорПанели = Истина;
			
		КонецЕсли;
		
		Если ЗначениеПараметраПериод <> Неопределено ИЛИ (ЗначениеПараметраНачалоПериода <> Неопределено 
			И ЗначениеПараметраКонецПериода <> Неопределено) Тогда
			Лево = Лево + 16;
		КонецЕсли;
	
КонецПроцедуры


Процедура УстановитьДопустимоеЗначениеСпискаВыбора(Элемент, Значение = Неопределено)
	
	Если Значение = Неопределено Тогда
		Значение = Элемент.Значение;
	КонецЕсли;
	
	НайденноеЗначение = Элемент.СписокВыбора.НайтиПоЗначению(Значение);
	Если НайденноеЗначение = Неопределено И Элемент.СписокВыбора.Количество() > 0 Тогда
		Значение.Вариант = Элемент.СписокВыбора[0].Значение;
		Элемент.Значение = Элемент.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НарисоватьДинамическийОтборФлажокЗначение(ФормаОтчета, Индекс, Верх, ЦветФонаКнопки, СтрокаОтбора, ЭлементДинамическогоОтбора, ДоступноеПоле, ПараметрыИсполненияОтчета = Неопределено)
	
	Если ДоступноеПоле = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлементовУправления = Новый Структура("
	|СтрокаОтбора, 
	|СтраницаПанели, 
	|ДинамическийОтборФлажок, 
	|ДинамическийОтборНадпись,
	|ДинамическийОтборПолеВвода");
	
	
	СтруктураЭлементовУправления.СтрокаОтбора = СтрокаОтбора;
	ЭлементыФормы        = ФормаОтчета.ЭлементыФормы;
	ШиринаПанелиЗакладки = ЭлементыФормы.ПанельЗакладок.Ширина-15;
	СтруктураЭлементовУправления.СтраницаПанели = ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница;
	
	Если СтрокаОтбора.ВидОтбора = "Флажок" ИЛИ СтрокаОтбора.ВидОтбора = "ФлажокЗначение" Тогда
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Флажок"), "ДинамическийОтбор" + Индекс + "Флажок", Истина, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = 6;
		НовыйЭлемент.Ширина = 143 * ?(СтрокаОтбора.ВидОтбора = "ФлажокЗначение", 1, 2);
		НовыйЭлемент.Заголовок = СтрокаОтбора.Представление;
		НовыйЭлемент.Значение = СтрокаОтбора.Использование;
		//Получить из значений
		Если ЭлементДинамическогоОтбора <> Неопределено 
			И ТипЗнч(ЭлементДинамическогоОтбора.Использование) = Тип("Булево") Тогда
			// Восстановим значение
			НовыйЭлемент.Значение = ЭлементДинамическогоОтбора.Использование;
 		Иначе
			// Установим значение по умолчанию                                                     
			НовыйЭлемент.Значение = СтрокаОтбора.Использование;                                    
		КонецЕсли;
		Если СтрокаОтбора.ВидОтбора = "Флажок" Тогда
			УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
		КонецЕсли;
		СтруктураЭлементовУправления.ДинамическийОтборФлажок = НовыйЭлемент;
	КонецЕсли;
	
	Если СтрокаОтбора.ВидОтбора = "Значение" Тогда
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтбор" + Индекс + "Надпись", Истина, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = 6;
		НовыйЭлемент.Ширина = ШиринаПанелиЗакладки - 19;
		НовыйЭлемент.Заголовок = СтрокаОтбора.Представление;
		СтруктураЭлементовУправления.ДинамическийОтборНадпись = НовыйЭлемент;
	КонецЕсли;
	
	Если СтрокаОтбора.ВидОтбора = "Значение" ИЛИ СтрокаОтбора.ВидОтбора = "ФлажокЗначение" Тогда
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтбор" + Индекс + "ПолеВвода", Истина, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = 153;
		НовыйЭлемент.Ширина = ШиринаПанелиЗакладки - 153 - 9;
		НовыйЭлемент.ТипЗначения = ДоступноеПоле.Тип;
		НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиИзменениеЗначенияДинамическогоОтбора);
		Если ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиНачалоВыбораЗначенияДинамическогоОтбора") тогда
			НовыйЭлемент.УстановитьДействие("НачалоВыбора", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиНачалоВыбораЗначенияДинамическогоОтбора);
		КонецЕсли;
		УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
		//Получить из значений
		Если ЭлементДинамическогоОтбора <> Неопределено  Тогда
			Если ТипЗнч(НовыйЭлемент.Значение) = Тип("СписокЗначений") Тогда
				НовыйЭлемент.ВыбиратьТип = Истина;	
			Иначе
				// Восстановим значение
				НовыйЭлемент.Значение = ЭлементДинамическогоОтбора.Значение;
			КонецЕсли;

		Иначе
			// Установим значение по умолчанию
			Если ТипЗнч(СтрокаОтбора.Значение) = Тип("СписокЗначений") Тогда
				НовыйЭлемент.ВыбиратьТип = Истина;	
			Иначе
				НовыйЭлемент.Значение = СтрокаОтбора.Значение;	
			КонецЕсли;
		КонецЕсли;
		СтруктураЭлементовУправления.ДинамическийОтборПолеВвода = НовыйЭлемент;
	КонецЕсли;
	
	Верх = Верх + 19 + 6;
	
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаОтбора") И ПараметрыИсполненияОтчета.ПослеВыводаОтбора тогда
		ФормаОтчета.ПослеВыводаОтбора(СтруктураЭлементовУправления);
	КонецЕсли;
		
КонецПроцедуры

Процедура НарисоватьДинамическийОтборСписок(ФормаОтчета, Индекс, Верх, ЦветФонаКнопки, СтрокаОтбора, ЭлементДинамическогоОтбора, ДоступноеПоле, ПараметрыИсполненияОтчета = Неопределено)
	
	Если ДоступноеПоле = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлементовУправления = Новый Структура("
	|СтрокаОтбора, 
	|СтраницаПанели, 
	|ДинамическийОтборВидСравнения, 
	|ДинамическийОтборСохранитьСписок,
	|ДинамическийОтборЗагрузитьСписок,
	|ДинамическийОтборКнопкаПодбор,
	|ДинамическийОтборТабличноеПоле");
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	СтруктураЭлементовУправления.СтраницаПанели = ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница;
	ШиринаПанелиЗакладки = ЭлементыФормы.ПанельЗакладок.Ширина-15;
	СтруктураЭлементовУправления.СтрокаОтбора = СтрокаОтбора;
	
	// Добавление Поля выбора вида сравнения
	ЭлементВидСравнения        = ЭлементыФормы.Добавить(Тип("ПолеВыбора"), "ДинамическийОтбор" + Индекс + "ВидСравнения", Истина, ЭлементыФормы.ПанельЗакладок);
	//ЭлементВидСравнения.ИзменяетДанные = Истина;
	ЭлементВидСравнения.Лево   = 6;
	ЭлементВидСравнения.Верх   = Верх;
	ЭлементВидСравнения.Ширина = (ШиринаПанелиЗакладки - 139);//125;
	ЭлементВидСравнения.Высота = 19;
	ЭлементВидСравнения.ЦветФонаКнопки = ЦветФонаКнопки;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("", "Не отбирать");
	СписокВыбора.Добавить("Выбранные", "Только выбранные");
	
	Если СтрокаОтбора.ДоступенВариантИсключить Тогда
		СписокВыбора.Добавить("Исключая", "Кроме выбранных");
	КонецЕсли;
	
	ЭлементВидСравнения.СписокВыбора = СписокВыбора;

	Если ЭлементДинамическогоОтбора <> Неопределено Тогда
		Если ТипЗнч(ЭлементДинамическогоОтбора.Значение) = Тип("СписокЗначений") Тогда 
			Если ЭлементДинамическогоОтбора.Значение.Количество() > 0 Тогда
				Если ЭлементДинамическогоОтбора.ВидСравнения = "Исключая" И СтрокаОтбора.ДоступенВариантИсключить И ЭлементДинамическогоОтбора.Использование Тогда
					ЭлементВидСравнения.Значение = СписокВыбора[2].Значение;
				ИначеЕсли ЭлементДинамическогоОтбора.ВидСравнения = "Выбранные" И ЭлементДинамическогоОтбора.Использование Тогда
					ЭлементВидСравнения.Значение = СписокВыбора[1].Значение;
				Иначе
					ЭлементВидСравнения.Значение = СписокВыбора[0].Значение;
				КонецЕсли;
			Иначе
				ЭлементВидСравнения.Значение = СписокВыбора[0].Значение;
			КонецЕсли;
		Иначе 
			Если ЗначениеЗаполнено(ЭлементДинамическогоОтбора.Значение) Тогда
				ЭлементВидСравнения.Значение = СписокВыбора[1].Значение;
			Иначе
				ЭлементВидСравнения.Значение = СписокВыбора[0].Значение;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЭлементВидСравнения.Значение = СписокВыбора[0].Значение;
	КонецЕсли;
	
	Если ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиВидСравненияПриИзменении") тогда
		ЭлементВидСравнения.УстановитьДействие("ПриИзменении", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиВидСравненияПриИзменении);
	КонецЕсли;

	ЭлементВидСравнения.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Право);
	ЭлементВидСравнения.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Лево);
	
	СтруктураЭлементовУправления.ДинамическийОтборВидСравнения = ЭлементВидСравнения;
	
	Если СтрокаОтбора.СохранятьСписок Тогда
		// Добавление надписи Сохранить список
		ЭлементНадпись        = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтбор" + Индекс + "СохранитьСписок", Истина, ЭлементыФормы.ПанельЗакладок);
		ЭлементНадпись.Лево   = ШиринаПанелиЗакладки - 125;
		ЭлементНадпись.Верх   = Верх - 5;
		ЭлементНадпись.Ширина = 30;
		ЭлементНадпись.Высота = 30;
		ЭлементНадпись.Заголовок  = "";
		ЭлементНадпись.Картинка   = БиблиотекаКартинок.СохранитьСписок;
		ЭлементНадпись.ГиперСсылка = Истина;
		ЭлементНадпись.Подсказка = "Сохранить этот список";
		ЭлементНадпись.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
		ЭлементНадпись.УстановитьДействие("Нажатие", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиСохранитьСписок);
		ЭлементНадпись.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Право);
		ЭлементНадпись.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Право);
		СтруктураЭлементовУправления.ДинамическийОтборСохранитьСписок = ЭлементНадпись;
		
		// Добавление надписи Загрузить список
		ЭлементНадпись        = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтбор" + Индекс + "ЗагрузитьСписок", Истина, ЭлементыФормы.ПанельЗакладок);
		ЭлементНадпись.Лево   = ШиринаПанелиЗакладки - 105;
		ЭлементНадпись.Верх   = Верх - 5;
		ЭлементНадпись.Ширина = 30;
		ЭлементНадпись.Высота = 30;
		ЭлементНадпись.Заголовок   = "";
		ЭлементНадпись.Картинка    = БиблиотекаКартинок.ЗагрузитьСписок;
		ЭлементНадпись.Подсказка   = "Загрузить сохраненный список";
		ЭлементНадпись.ГиперСсылка = Истина;
		ЭлементНадпись.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
		ЭлементНадпись.УстановитьДействие("Нажатие", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиЗагрузитьСписок);
		ЭлементНадпись.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Право);
		ЭлементНадпись.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Право);
		
		СтруктураЭлементовУправления.ДинамическийОтборЗагрузитьСписок = ЭлементНадпись;
	КонецЕсли;
	
	// Сохранить загрузить список
	// Добавление Кнопки Подбор
	КнопкаПодбор = ЭлементыФормы.Добавить(Тип("Кнопка"), "ДинамическийОтбор" + Индекс + "КнопкаПодбор", Истина, ЭлементыФормы.ПанельЗакладок);
	КнопкаПодбор.Лево   = ШиринаПанелиЗакладки - 85;
	КнопкаПодбор.Верх   = Верх;
	КнопкаПодбор.Ширина = 75;
	КнопкаПодбор.Высота = 19;
	КнопкаПодбор.ЦветФонаКнопки = ЦветФонаКнопки;
	Верх = Верх + 19 + 6;
	
	Если ДоступноеПоле <> Неопределено И ДоступноеПоле.Тип.Типы().Количество() > 1 Тогда
		КнопкаПодбор.Заголовок = "Подбор...";
	Иначе
		КнопкаПодбор.Заголовок = "Подбор";
	КонецЕсли;
	
	Если ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиКнопкаПодборНажатие") тогда
		КнопкаПодбор.УстановитьДействие("Нажатие", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиКнопкаПодборНажатие);
	КонецЕсли;
	
	КнопкаПодбор.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Право);
	КнопкаПодбор.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Право);
	//УстановитьПравуюПривязкуПолностью(КнопкаПодбор, ЭлементыФормы.ПанельЗакладок);
	СтруктураЭлементовУправления.ДинамическийОтборКнопкаПодбор = КнопкаПодбор;
	
	// Добавление Табличного поля для списка
	ЭлементТабличноеПоле = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), "ДинамическийОтбор" + Индекс + "ТабличноеПоле", Истина, ЭлементыФормы.ПанельЗакладок);
	ЭлементТабличноеПоле.Лево           = 6;
	ЭлементТабличноеПоле.Верх           = Верх;
	ЭлементТабличноеПоле.Ширина         = ШиринаПанелиЗакладки - 15;
	ЭлементТабличноеПоле.Высота         = 79 * ?(СтрокаОтбора.ВидОтбора = "Список", 1, 2);
	Верх = Верх + ЭлементТабличноеПоле.Высота + 6;
	ЭлементТабличноеПоле.ТолькоПросмотр = Ложь;
	ЭлементТабличноеПоле.Шапка          = Ложь;
	ЭлементТабличноеПоле.Значение       = Новый ТаблицаЗначений;
	УстановитьПравуюПривязку(ЭлементТабличноеПоле, ЭлементыФормы.ПанельЗакладок);
	СтруктураЭлементовУправления.ДинамическийОтборТабличноеПоле = ЭлементТабличноеПоле;
	
	ЭлементТабличноеПоле.Значение.Колонки.Добавить("Значение", ДоступноеПоле.Тип);
	НоваяКолонка                             = ЭлементТабличноеПоле.Колонки.Добавить("Значение", "");
	НоваяКолонка.Данные                      = "Значение";
	ЭлементТабличноеПоле.ГоризонтальныеЛинии = Ложь;
	
	//Получить из значений
	Если ЭлементДинамическогоОтбора <> Неопределено 
		И ТипЗнч(ЭлементДинамическогоОтбора.Значение) = Тип("СписокЗначений") Тогда
		// Восстановим значение списка отбора
		Для Каждого ЭлементСписка Из ЭлементДинамическогоОтбора.Значение Цикл
			НоваяСтрока = ЭлементТабличноеПоле.Значение.Добавить();
			НоваяСтрока.Значение = ЭлементСписка.Значение;
		КонецЦикла;
	Иначе
		// Проверим есть ли значение по умолчанию
		Если СтрокаОтбора.Значение.Количество() > 0 Тогда
			Для Каждого ЭлементСписка Из СтрокаОтбора.Значение Цикл
				НоваяСтрока = ЭлементТабличноеПоле.Значение.Добавить();
				НоваяСтрока.Значение = ЭлементСписка.Значение;
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Значение) Тогда
					ЭлементТабличноеПоле.Значение.Удалить(НоваяСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементТабличноеПоле.УстановитьДействие("ПриОкончанииРедактирования", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиОкончаниеРедактированиеТабличногоПоля);
	ЭлементТабличноеПоле.УстановитьДействие("ПослеУдаления", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиУдалениеСтрокиТабличногоПоля);
	
	Если ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиНачалоВыбораЗначенияТабличногоПоля") Тогда
		ЭлементТабличноеПоле.Колонки.Значение.ЭлементУправления.УстановитьДействие("НачалоВыбора", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиНачалоВыбораЗначенияТабличногоПоля);
	КонецЕсли;
	
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаОтбора") И ПараметрыИсполненияОтчета.ПослеВыводаОтбора Тогда
		ФормаОтчета.ПослеВыводаОтбора(СтруктураЭлементовУправления);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПравуюПривязку(Элемент, Панель) Экспорт
	
	Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
	
КонецПроцедуры

Процедура УстановитьПравуюПривязкуПолностью(Элемент, Панель)
	
	Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
	Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Право);
	
КонецПроцедуры


// Заполняет отбор компоновщика по отбору построителя
Функция ПолучитьТаблицуДоступныхВариантов(НастраиваемыйОбъект, Пользователь = Неопределено, СПомеченнымиНаУдаление = Ложь, ТипНастройки = Неопределено, СписокДоступныхНастроек = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	
	Если ТипНастройки = Неопределено тогда
		ТипНастройки = Перечисления.ТипыНастроек.ПроизвольныеНастройки;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СохраненныеНастройкиПользователи.Ссылка,
	|	СохраненныеНастройкиПользователи.Ссылка.Наименование КАК Наименование,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СохраненныеНастройкиПользователи.ПравоИзменения
	|					ИЛИ &ПолныеПрава
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ПравоИзменения,
	|	СохраненныеНастройкиПользователи.Ссылка.Описание
	|ИЗ
	|	Справочник.СохраненныеНастройки.Пользователи КАК СохраненныеНастройкиПользователи
	|ГДЕ
	|	СохраненныеНастройкиПользователи.Ссылка.НастраиваемыйОбъект = &НастраиваемыйОбъект
	|	И (СохраненныеНастройкиПользователи.Пользователь.Ссылка = &Пользователь
	|			ИЛИ СохраненныеНастройкиПользователи.Пользователь.Ссылка В
	|				(ВЫБРАТЬ
	|					ГруппыПользователейПользователиГруппы.Ссылка
	|				ИЗ
	|					Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователейПользователиГруппы
	|				ГДЕ
	|					ГруппыПользователейПользователиГруппы.Пользователь.Ссылка = &Пользователь)
	|			ИЛИ СохраненныеНастройкиПользователи.Пользователь.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	|				И СохраненныеНастройкиПользователи.Ссылка В (&СписокДоступныхНастроек)
	|				И СохраненныеНастройкиПользователи.Ссылка.Предопределенный
	|			ИЛИ СохраненныеНастройкиПользователи.Пользователь.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	|				И &СписокДоступныхНастроекНеопределен
	|				И СохраненныеНастройкиПользователи.Ссылка.Предопределенный
	|			ИЛИ СохраненныеНастройкиПользователи.Пользователь.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	|				И (НЕ СохраненныеНастройкиПользователи.Ссылка.Предопределенный))
	|	И (&СПомеченнымиНаУдаление
	|			ИЛИ (НЕ СохраненныеНастройкиПользователи.Ссылка.ПометкаУдаления))
	|	И СохраненныеНастройкиПользователи.Ссылка.ТипНастройки = &ТипНастройки
	|
	|СГРУППИРОВАТЬ ПО
	|	СохраненныеНастройкиПользователи.Ссылка,
	|	СохраненныеНастройкиПользователи.Ссылка.Наименование,
	|	СохраненныеНастройкиПользователи.Ссылка.Описание
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Пользователь",                       Пользователь);
	Запрос.УстановитьПараметр("НастраиваемыйОбъект",                НастраиваемыйОбъект);
	Запрос.УстановитьПараметр("СписокДоступныхНастроек",            СписокДоступныхНастроек);
	Запрос.УстановитьПараметр("СписокДоступныхНастроекНеопределен", СписокДоступныхНастроек = Неопределено);
	Если Найти(НастраиваемыйОбъект, "ОтчетОбъект") > 0 Тогда									
		Запрос.УстановитьПараметр("ТипНастройки", Перечисления.ТипыНастроек.НастройкиОтчета);
	Иначе
		Запрос.УстановитьПараметр("ТипНастройки", ТипНастройки);
	КонецЕсли;
	Запрос.УстановитьПараметр("ПолныеПрава", РольДоступна("ПолныеПрава"));
	Запрос.УстановитьПараметр("СПомеченнымиНаУдаление", СПомеченнымиНаУдаление);
	
	Попытка
		Возврат Запрос.Выполнить().Выгрузить();
	Исключение
		Возврат неопределено;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСписокДоступныхВариантов(НастраиваемыйОбъект, Пользователь = Неопределено, СПомеченнымиНаУдаление = Ложь) Экспорт
	
	СписокНастроек = Новый СписокЗначений;
	
	ТаблицаДоступныхНастроек = ПолучитьТаблицуДоступныхВариантов(НастраиваемыйОбъект, Пользователь, СПомеченнымиНаУдаление);
	Для каждого Строка Из ТаблицаДоступныхНастроек Цикл
		СписокНастроек.Добавить(Строка.Ссылка, Строка.Наименование, Строка.ПравоИзменения);
	КонецЦикла;
	
	Возврат СписокНастроек;
	
КонецФункции
	
Функция НастройкиКомпоновщикаПростые(КомпоновщикНастроек) Экспорт
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() = 1 Тогда
		Если ТипЗнч(КомпоновщикНастроек.Настройки.Структура[0]) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			Возврат ЭтоПростаяСтруктура(КомпоновщикНастроек.Настройки.Структура[0]);
		ИначеЕсли ТипЗнч(КомпоновщикНастроек.Настройки.Структура[0]) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Возврат ЭтоПростаяСтруктура(КомпоновщикНастроек.Настройки.Структура[0].Строки)
			      И ЭтоПростаяСтруктура(КомпоновщикНастроек.Настройки.Структура[0].Колонки)
				  И ЭтоПростаяСтруктура(КомпоновщикНастроек.Настройки.Структура[0]);
		ИначеЕсли ТипЗнч(КомпоновщикНастроек.Настройки.Структура[0]) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			Возврат ЭтоПростаяСтруктура(КомпоновщикНастроек.Настройки.Структура[0].Серии)
			      И ЭтоПростаяСтруктура(КомпоновщикНастроек.Настройки.Структура[0].Точки)
				  И ЭтоПростаяСтруктура(КомпоновщикНастроек.Настройки.Структура[0]);
		КонецЕсли;
	ИначеЕсли КомпоновщикНастроек.Настройки.Структура.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
				
	Возврат Ложь;
	
КонецФункции

Функция ЭтоПростаяСтруктура(Структура)
	
	// Количество структур везде должно быть 1
	// Таблица и Диаграмма могут быть только на верхнем уровне
	НастройкиПростые = Истина;
	Если ТипЗнч(Структура) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
	 ИЛИ ТипЗнч(Структура) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		Если Структура.Количество() > 1
		ИЛИ (Структура.Количество() = 1 И Не ЭтоПростаяСтруктура(Структура[0])) Тогда
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Структура) = Тип("ГруппировкаКомпоновкиДанных") 
		  ИЛИ ТипЗнч(Структура) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		  ИЛИ ТипЗнч(Структура) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		Если Структура.Структура.Количество() > 1
		   ИЛИ (Структура.Структура.Количество() = 1 И Не ЭтоПростаяСтруктура(Структура.Структура[0])) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если Структура.Выбор.Элементы.Количество() <> 1 ИЛИ ТипЗнч(Структура.Выбор.Элементы[0]) <> Тип("АвтоВыбранноеПолеКомпоновкиДанных")
		 ИЛИ Структура.Порядок.Элементы.Количество() <> 1 ИЛИ ТипЗнч(Структура.Порядок.Элементы[0]) <> Тип("АвтоЭлементПорядкаКомпоновкиДанных")
		 ИЛИ Структура.Отбор.Элементы.Количество() > 0
		 ИЛИ Структура.УсловноеОформление.Элементы.Количество() > 0
		 ИЛИ Структура.ПоляГруппировки.Элементы.Количество() > 1 Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат ЭтоПростаяСтруктура(Структура.ПараметрыВывода);
	ИначеЕсли ТипЗнч(Структура) = Тип("ТаблицаКомпоновкиДанных") Тогда
		Если Структура.Выбор.Элементы.Количество() <> 0
		 ИЛИ Структура.УсловноеОформление.Элементы.Количество() > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат ЭтоПростаяСтруктура(Структура.ПараметрыВывода);
	ИначеЕсли ТипЗнч(Структура) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		Если Структура.Выбор.Элементы.Количество() <> 1 ИЛИ ТипЗнч(Структура.Выбор.Элементы[0]) <> Тип("АвтоВыбранноеПолеКомпоновкиДанных")
		 ИЛИ Структура.УсловноеОформление.Элементы.Количество() > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат ЭтоПростаяСтруктура(Структура.ПараметрыВывода);
	ИначеЕсли ТипЗнч(Структура) = Тип("ЗначенияПараметровВыводаГруппировкиКомпоновкиДанных")
		  ИЛИ ТипЗнч(Структура) = Тип("ЗначенияПараметровВыводаГруппировкиТаблицыКомпоновкиДанных")
		  ИЛИ ТипЗнч(Структура) = Тип("ЗначенияПараметровВыводаГруппировкиДиаграммыКомпоновкиДанных")
		  ИЛИ ТипЗнч(Структура) = Тип("ЗначенияПараметровВыводаКомпоновкиДанных")
		  ИЛИ ТипЗнч(Структура) = Тип("ЗначенияПараметровВыводаТаблицыКомпоновкиДанных")
		  ИЛИ ТипЗнч(Структура) = Тип("ЗначенияПараметровВыводаДиаграммыКомпоновкиДанных") Тогда
		  
		Для каждого Элемент Из Структура.Элементы Цикл
			Если Элемент.Использование Тогда
				Возврат Ложь;
			КонецЕсли;
			НастройкиПростые = ЭтоПростаяСтруктура(Элемент.ЗначенияВложенныхПараметров);
			Если Не НастройкиПростые Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Структура) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		Для каждого Элемент Из Структура Цикл
			Если Элемент.Использование Тогда
				Возврат Ложь;
			КонецЕсли;
			НастройкиПростые = ЭтоПростаяСтруктура(Элемент.ЗначенияВложенныхПараметров);
			Если Не НастройкиПростые Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	Возврат Истина;

КонецФункции

Функция ПолучитьТаблицуСтандартныхПериодов()

	ТаблицаСтандартныхПериодов = Новый ТаблицаЗначений;
	ТаблицаСтандартныхПериодов.Колонки.Добавить("Периодичность");
	ТаблицаСтандартныхПериодов.Колонки.Добавить("Время");
	ТаблицаСтандартныхПериодов.Колонки.Добавить("СтандартныйПериод");
	ТаблицаСтандартныхПериодов.Колонки.Добавить("Представление");
	
	// Произвольный
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "", "ПроизвольныйПериод", ВариантСтандартногоПериода.ПроизвольныйПериод, "Произвольный период");
	// День
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "День", "Предыдущий",    ВариантСтандартногоПериода.Вчера, "Вчера");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "День", "Текущий",       ВариантСтандартногоПериода.Сегодня, " Сегодня");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "День", "Следующий",     ВариантСтандартногоПериода.Завтра, "  Завтра");
	// Неделя
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Неделя", "Предыдущий",  ВариантСтандартногоПериода.ПрошлаяНеделя, "Предыдущая неделя");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Неделя", "Текущий",     ВариантСтандартногоПериода.ЭтаНеделя, " Эта неделя");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Неделя", "Следующий",   ВариантСтандартногоПериода.СледующаяНеделя, " Следующая неделя");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Неделя", "СНачала",     ВариантСтандартногоПериода.СНачалаЭтойНедели, "С начала этой недели");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Неделя", "ДоКонца",     ВариантСтандартногоПериода.ДоКонцаЭтойНедели, "До конца этой недели");
	// Декада
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Декада", "Предыдущий",  ВариантСтандартногоПериода.ПрошлаяДекада, "Предыдущая декада");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Декада", "Текущий",     ВариантСтандартногоПериода.ЭтаДекада, " Эта декада");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Декада", "Следующий",   ВариантСтандартногоПериода.СледующаяДекада, "  Следующая декада");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Декада", "СНачала",     ВариантСтандартногоПериода.СНачалаЭтойДекады, "С начала этой декады");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Декада", "ДоКонца",     ВариантСтандартногоПериода.ДоКонцаЭтойДекады, "До конца этой декады");
	// Месяц
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Месяц", "Предыдущий",   ВариантСтандартногоПериода.ПрошлыйМесяц, "Предыдущий месяц");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Месяц", "Текущий",      ВариантСтандартногоПериода.ЭтотМесяц, " Этот месяц");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Месяц", "Следующий",    ВариантСтандартногоПериода.СледующийМесяц, "  Следующий месяц");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Месяц", "СНачала",      ВариантСтандартногоПериода.СНачалаЭтогоМесяца, "С начала этого месяца");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Месяц", "ДоКонца",      ВариантСтандартногоПериода.ДоКонцаЭтогоМесяца, "До конца этого месяца");
	// Квартал
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Квартал", "Предыдущий", ВариантСтандартногоПериода.ПрошлыйКвартал, "Предыдущий квартал");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Квартал", "Текущий",    ВариантСтандартногоПериода.ЭтотКвартал, " Этот квартал");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Квартал", "Следующий",  ВариантСтандартногоПериода.СледующийКвартал, "  Следующий квартал");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Квартал", "СНачала",    ВариантСтандартногоПериода.СНачалаЭтогоКвартала, "С начала этого квартала");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Квартал", "ДоКонца",    ВариантСтандартногоПериода.ДоКонцаЭтогоКвартала, "До конца этого квартала");
	// Полугодие
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Полугодие", "Предыдущий", ВариантСтандартногоПериода.ПрошлоеПолугодие, "Предыдущее полугодие");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Полугодие", "Текущий",    ВариантСтандартногоПериода.ЭтоПолугодие, " Это полугодие");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Полугодие", "Следующий",  ВариантСтандартногоПериода.СледующееПолугодие, "  Следующее полугодие");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Полугодие", "СНачала",    ВариантСтандартногоПериода.СНачалаЭтогоПолугодия, "С начала этого полугодия");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Полугодие", "ДоКонца",    ВариантСтандартногоПериода.ДоКонцаЭтогоПолугодия, "До конца этого полугодия");
	// Год
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Год", "Предыдущий",     ВариантСтандартногоПериода.ПрошлыйГод, "Предыдущий год");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Год", "Текущий",        ВариантСтандартногоПериода.ЭтотГод, " Этот год");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Год", "Следующий",      ВариантСтандартногоПериода.СледующийГод, "  Следующий год");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Год", "СНачала",        ВариантСтандартногоПериода.СНачалаЭтогоГода, "С начала этого года");
	ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Год", "ДоКонца",        ВариантСтандартногоПериода.ДоКонцаЭтогоГода, "До конца этого года");
	Возврат ТаблицаСтандартныхПериодов;
	
КонецФункции


Функция ПолучитьТаблицуСтандартныхДатНачала()

	ТаблицаСтандартныхПериодов = Новый ТаблицаЗначений;
	ТаблицаСтандартныхПериодов.Колонки.Добавить("Периодичность");
	ТаблицаСтандартныхПериодов.Колонки.Добавить("Время");
	ТаблицаСтандартныхПериодов.Колонки.Добавить("СтандартнаяДатаНачала");
	ТаблицаСтандартныхПериодов.Колонки.Добавить("Представление");
	
	// Произвольная
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "", "ПроизвольнаяДата",  ВариантСтандартнойДатыНачала.ПроизвольнаяДата, "Произвольная дата");
	// День
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "День", "Предыдущий",    ВариантСтандартнойДатыНачала.НачалоПрошлогоДня, "Начало вчерашнего дня");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "День", "Текущий",       ВариантСтандартнойДатыНачала.НачалоЭтогоДня, " Начало сегодняшнего дня");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "День", "Следующий",     ВариантСтандартнойДатыНачала.НачалоСледующегоДня, "  Начало завтрашнего дня");
	// Неделя
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Неделя", "Предыдущий",  ВариантСтандартнойДатыНачала.НачалоПрошлойНедели, "Начало предыдущей недели");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Неделя", "Текущий",     ВариантСтандартнойДатыНачала.НачалоЭтойНедели, " Начало этой недели");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Неделя", "Следующий",   ВариантСтандартнойДатыНачала.НачалоСледующейНедели, "  Начало следующей недели");
	// Декада
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Декада", "Предыдущий",  ВариантСтандартнойДатыНачала.НачалоПрошлойДекады, "Начало предыдущей декады");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Декада", "Текущий",     ВариантСтандартнойДатыНачала.НачалоЭтогоМесяца, " Начало этой декады");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Декада", "Следующий",   ВариантСтандартнойДатыНачала.НачалоСледующейДекады, "  Начало следующей декады");
	// Месяц
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Месяц", "Предыдущий",   ВариантСтандартнойДатыНачала.НачалоПрошлогоМесяца, "Начало предыдущего месяца");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Месяц", "Текущий",      ВариантСтандартнойДатыНачала.НачалоЭтогоМесяца, " Начало этого месяца");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Месяц", "Следующий",    ВариантСтандартнойДатыНачала.НачалоСледующегоМесяца, "  Начало следующего месяца");
	// Квартал
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Квартал", "Предыдущий", ВариантСтандартнойДатыНачала.НачалоПрошлогоКвартала, "Начало предыдущего квартала");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Квартал", "Текущий",    ВариантСтандартнойДатыНачала.НачалоЭтогоКвартала, " Начало этого квартала");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Квартал", "Следующий",  ВариантСтандартнойДатыНачала.НачалоСледующегоКвартала, "  Начало следующего квартала");
	// Полугодие
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Полугодие", "Предыдущий", ВариантСтандартнойДатыНачала.НачалоПрошлогоПолугодия, "Начало предыдущего полугодия");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Полугодие", "Текущий",    ВариантСтандартнойДатыНачала.НачалоЭтогоПолугодия, " Начало этого полугодия");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Полугодие", "Следующий",  ВариантСтандартнойДатыНачала.НачалоСледующегоПолугодия, "  Начало следующего полугодия");
	// Год
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Год", "Предыдущий",     ВариантСтандартнойДатыНачала.НачалоПрошлогоГода, "Начало предыдущего года");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Год", "Текущий",        ВариантСтандартнойДатыНачала.НачалоЭтогоГода, " Начало этого года");
	ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Год", "Следующий",      ВариантСтандартнойДатыНачала.НачалоСледующегоГода, "  Начало следующего года");
	Возврат ТаблицаСтандартныхПериодов;
	
КонецФункции

// Получает параметр данных компоновщика настроек
Функция ПолучитьПараметр(КомпоновщикНастроекКоллекцияЗначений, ИмяПараметра) Экспорт
	
	Если ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("КомпоновщикНастроекКомпоновкиДанных")
	 ИЛИ ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	ИначеЕсли ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.Найти(ИмяПараметра);
	ИначеЕсли ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("ОформлениеКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	
	Возврат ЗначениеПараметра;

КонецФункции

Процедура ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, Периодичность, Время, СтандартныйПериод, Представление)

	НоваяСтрока = ТаблицаСтандартныхПериодов.Добавить();
	НоваяСтрока.Периодичность = Периодичность;
	НоваяСтрока.Время = Время;
	НоваяСтрока.СтандартныйПериод = СтандартныйПериод;
	НоваяСтрока.Представление = Представление;
	
КонецПроцедуры

Процедура ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, Периодичность, Время, СтандартнаяДатаНачала, Представление)

	НоваяСтрока = ТаблицаСтандартныхПериодов.Добавить();
	НоваяСтрока.Периодичность = Периодичность;
	НоваяСтрока.Время = Время;
	НоваяСтрока.СтандартнаяДатаНачала = СтандартнаяДатаНачала;
	НоваяСтрока.Представление = Представление;
	
КонецПроцедуры

Функция ПолучитьСписокВыбораСтандартногоПериодаПользователя(Параметры)
	
	ТаблицаСтандартныхПериодов = ПолучитьТаблицуСтандартныхПериодов();
	ВспомогательныйПериод = Новый СтандартныйПериод;
	СписокВыбораПериодовПользователя = Новый СписокЗначений;
	
	Если Параметры.ПроизвольныйПериод Тогда
		СписокВыбораПериодовПользователя.Вставить(0, ВариантСтандартногоПериода.ПроизвольныйПериод, "Произвольный период");
	КонецЕсли;
	
	Для каждого ОтносительноеВремя Из Параметры.СписокДоступныхОтносительныхПериодов Цикл
		Если Не ОтносительноеВремя.Пометка Тогда
			Продолжить;
		КонецЕсли;
		Для каждого Периодичность Из Параметры.ДоступныеПериодичности Цикл
			Если Не Периодичность.Использование Тогда
				Продолжить;
			КонецЕсли;
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Время", ОтносительноеВремя.Значение);
			СтруктураПоиска.Вставить("Периодичность", Периодичность.Периодичность);
			НайденныеСтроки = ТаблицаСтандартныхПериодов.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 1 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
				Если  Периодичность.Периодичность = "Декада" 
				 ИЛИ Периодичность.Периодичность = "Неделя" 
				 ИЛИ ОтносительноеВремя.Значение = "СНачала" 
				 ИЛИ ОтносительноеВремя.Значение = "ДоКонца" Тогда
					Представление = ""
				Иначе
					ВспомогательныйПериод.Вариант = НайденнаяСтрока.СтандартныйПериод;
					Представление = " (" + ПредставлениеПериода(ВспомогательныйПериод.ДатаНачала, ВспомогательныйПериод.ДатаОкончания) + ")";
				КонецЕсли;
				СписокВыбораПериодовПользователя.Добавить(НайденнаяСтрока.СтандартныйПериод, НайденнаяСтрока.Представление + Представление);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокВыбораПериодовПользователя;
	
КонецФункции

Функция ПолучитьСписокВыбораСтандартнойДатыНачалаПользователя(Параметры)
	
	ТаблицаСтандартныхДатНачала = ПолучитьТаблицуСтандартныхДатНачала();
	ВспомогательныйПериод = Новый СтандартнаяДатаНачала;
	СписокВыбораПериодовПользователя = Новый СписокЗначений;
	
	Если Параметры.ПроизвольныйПериод Тогда
		СписокВыбораПериодовПользователя.Вставить(0, ВариантСтандартнойДатыНачала.ПроизвольнаяДата, "Произвольная дата");
	КонецЕсли;
	
	Для каждого ОтносительноеВремя Из Параметры.СписокДоступныхОтносительныхПериодов Цикл
		Если Не ОтносительноеВремя.Пометка Тогда
			Продолжить;
		КонецЕсли;
		Для каждого Периодичность Из Параметры.ДоступныеПериодичности Цикл
			Если Не Периодичность.Использование Тогда
				Продолжить;
			КонецЕсли;
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Время", ОтносительноеВремя.Значение);
			СтруктураПоиска.Вставить("Периодичность", Периодичность.Периодичность);
			НайденныеСтроки = ТаблицаСтандартныхДатНачала.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 1 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
				
				ВспомогательныйПериод.Вариант = НайденнаяСтрока.СтандартнаяДатаНачала;
				Представление = " (" + Формат(ВспомогательныйПериод.Дата, "ДФ=dd.MM.yyyy") + ")";
			
				СписокВыбораПериодовПользователя.Добавить(НайденнаяСтрока.СтандартнаяДатаНачала, НайденнаяСтрока.Представление + Представление);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокВыбораПериодовПользователя;
	
КонецФункции

Функция ПолучитьНастройкуПользователяНастройкиОтчета(НастраиваемыйОбъект, Пользователь = Неопределено)
	
	Если Пользователь = Неопределено Тогда
		Пользователь = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ Разрешенные
	|	СохраненныеНастройкиПользователи.Ссылка
	|ИЗ
	|	Справочник.СохраненныеНастройки.Пользователи КАК СохраненныеНастройкиПользователи
	|ГДЕ
	|	СохраненныеНастройкиПользователи.Пользователь = &Пользователь
	|	И СохраненныеНастройкиПользователи.Ссылка.ТипНастройки = &ТипНастройки
	|	И СохраненныеНастройкиПользователи.Ссылка.НастраиваемыйОбъект = &НастраиваемыйОбъект";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ТипНастройки", Перечисления.ТипыНастроек.НастройкиПользователяНастройкиОтчета);
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", НастраиваемыйОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьВСхемуНастройкиКомпоновщика(Схема, Настройки) Экспорт
	
	НастройкиXDTO = СериализаторXDTO.ЗаписатьXDTO(Настройки);
	СхемаXDTO = СериализаторXDTO.ЗаписатьXDTO(Схема);
	Если НастройкиXDTO <> Неопределено Тогда
		
		СхемаXDTO.defaultSettings = НастройкиXDTO;
		
	КонецЕсли;
	Схема = СериализаторXDTO.ПрочитатьXDTO(СхемаXDTO);
	
КонецПроцедуры


Функция ПолучитьПараметрыПанелиПользователяПоУмолчанию(ОтчетОбъект, ФормаОтчета = Неопределено) Экспорт
	
	ДеревоНастроекСтандартныхСтраниц  = Новый ДеревоЗначений;
	ДеревоНастроекСтандартныхСтраниц.Колонки.Добавить("Использование");
	ДеревоНастроекСтандартныхСтраниц.Колонки.Добавить("Имя");
	ДеревоНастроекСтандартныхСтраниц.Колонки.Добавить("Представление");
	
	АналитическиеОтборы = ДобавитьИЗаполнитьСтроку(ДеревоНастроекСтандартныхСтраниц, Истина, "Период", "Период");
	
	Параметры  = Ложь;
	Показатели = Ложь;
	Отбор      = Истина;
	Порядок    = Ложь;
	
	Если ФормаОтчета <> Неопределено тогда
		Если ФормаОтчета.ЭлементыФормы.Найти("ПанельЗакладок") <> Неопределено тогда
			Страницы = ФормаОтчета.ЭлементыФормы.ПанельЗакладок.Страницы;
			Параметры  = ?(Страницы.Найти("Параметры") <> Неопределено И Страницы.Параметры.Видимость, Страницы.Параметры.Видимость, Параметры);
			Показатели = ?(Страницы.Найти("Показатели") <> Неопределено И Страницы.Показатели.Видимость, Страницы.Показатели.Видимость, Показатели);
			Отбор      = ?(Страницы.Найти("Отбор") <> Неопределено И Страницы.Отбор.Видимость, Страницы.Отбор.Видимость, Отбор);
			Порядок    = ?(Страницы.Найти("Порядок") <> Неопределено И Страницы.Порядок.Видимость, Страницы.Порядок.Видимость, Порядок);
		КонецЕсли;
	КонецЕсли;

	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		АналитическиеОтборы = ДобавитьИЗаполнитьСтроку(ДеревоНастроекСтандартныхСтраниц, Истина, "Прогноз", "Прогноз");
		АналитическиеОтборы = ДобавитьИЗаполнитьСтроку(ДеревоНастроекСтандартныхСтраниц, Истина, "АналитическиеОтборы", "Аналитические отборы");
		ДобавитьИЗаполнитьСтроку(АналитическиеОтборы, Истина, "КоличествоЗаписей", "Ограничение на количество записей");
		ДобавитьИЗаполнитьСтроку(АналитическиеОтборы, Истина, "Порог", "Порог существенности");
		ДобавитьИЗаполнитьСтроку(АналитическиеОтборы, Истина, "Индикаторы", "Индикаторы (тренд, состояние)");
		ДобавитьИЗаполнитьСтроку(АналитическиеОтборы, Истина, "ABCКлассификация", "ABC - Классификация");
		ДобавитьИЗаполнитьСтроку(АналитическиеОтборы, Истина, "СкрытьНулевые", "Скрытие нулевых строк и колонок");
	КонецЕсли;
	ДобавитьИЗаполнитьСтроку(ДеревоНастроекСтандартныхСтраниц, Истина, "Параметры", "Параметры");
	ДобавитьИЗаполнитьСтроку(ДеревоНастроекСтандартныхСтраниц, Истина, "Отбор", "Отбор");
	ДобавитьИЗаполнитьСтроку(ДеревоНастроекСтандартныхСтраниц, Ложь, "Порядок", "Сортировка");
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДеревоНастроекСтандартныхСтраниц", ДеревоНастроекСтандартныхСтраниц);
	Параметры.Вставить("Отборы", Новый ТаблицаЗначений);
	
	СписокДоступныхОтносительныхПериодов = Новый СписокЗначений;
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		СписокДоступныхОтносительныхПериодов.Добавить("Предыдущий", "Предыдущий", Истина);
		СписокДоступныхОтносительныхПериодов.Добавить("Текущий", "Текущий", 	  Истина);
		СписокДоступныхОтносительныхПериодов.Добавить("Следующий", "Следующий",   Истина);
	Иначе
		СписокДоступныхОтносительныхПериодов.Добавить("Предыдущий", "Предыдущий", 	  Истина);
		СписокДоступныхОтносительныхПериодов.Добавить("СНачала", "С начала текущего", Истина);
		СписокДоступныхОтносительныхПериодов.Добавить("Текущий", "Текущий", 		  Истина);
		СписокДоступныхОтносительныхПериодов.Добавить("ДоКонца", "До конца текущего", Истина);
		СписокДоступныхОтносительныхПериодов.Добавить("Следующий", "Следующий", 	  Истина);
	КонецЕсли;
	Параметры.Вставить("СписокДоступныхОтносительныхПериодов", СписокДоступныхОтносительныхПериодов);
	
	Параметры.Вставить("ПроизвольныйПериод", Истина);
	
	ДоступныеПериодичности = Новый ТаблицаЗначений;
	ДоступныеПериодичности.Колонки.Добавить("Периодичность");
	ДоступныеПериодичности.Колонки.Добавить("РассчитыватьЧерез");
	ДоступныеПериодичности.Колонки.Добавить("Использование");
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ Разрешенные
			|	Периодичность.Ссылка
			|ИЗ
			|	Перечисление.Периодичность КАК Периодичность";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ДоступныеПериодичности.Добавить();
			НоваяСтрока.Периодичность = Выборка.Ссылка;
			НоваяСтрока.РассчитыватьЧерез = Выборка.Ссылка;
			НоваяСтрока.Использование = Истина;
		КонецЦикла;
	Иначе
		ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Год",       Истина);
		ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Полугодие", Истина);
		ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Квартал",   Истина);
		ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Месяц",     Истина);
		ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Декада",    Истина);
		ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Неделя",    Истина);
		ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "День",      Истина);
	КонецЕсли;
	
	Параметры.Вставить("ДоступныеПериодичности", ДоступныеПериодичности);
	
	Возврат Параметры;
			
КонецФункции

Функция УстановитьВариантПоУмолчанию(ОтчетОбъект, ФормаОтчета) Экспорт
	
	Если ФормаОтчета = Неопределено 
		ИЛИ НЕ ФормаОтчета.ЭтоОтработкаРасшифровки Тогда
		
		Вариант = ПолучитьПоследнийИспользуемыйВариант(ПолучитьИдентификаторОбъекта(ОтчетОбъект));
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Ссылка", Вариант);
		Попытка
			НайденныеСтроки = ОтчетОбъект.ТаблицаВариантовОтчета.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ОтчетОбъект.СохраненнаяНастройка = НайденныеСтроки[0].Ссылка;
			Иначе 
				Если ОтчетОбъект.ТаблицаВариантовОтчета.Количество() > 0 Тогда
					ОтчетОбъект.СохраненнаяНастройка = ОтчетОбъект.ТаблицаВариантовОтчета[0].Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			Если ФормаОтчета <> Неопределено Тогда
				ОбновитьЗаголовокТиповогоОтчета(ОтчетОбъект, ФормаОтчета);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПоследнийИспользуемыйВариант(Ссылка)
	
	Значение = ВосстановитьЗначение("ПоследниеИспользованныеНастройкиПользователя");
	Если Значение = Неопределено ИЛИ Значение[Ссылка] = Неопределено Тогда
		Возврат Справочники.СохраненныеНастройки.ПустаяСсылка();
	Иначе
		Возврат Значение[Ссылка];
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьТаблицуДоступныхНастроекПользователю(ОтчетОбъект) Экспорт
	
	СписокДоступныхНастроек = куфиб_ЗащитаОтчеты.СписокДоступныхНастроек(ОтчетОбъект);
	
	ОтчетОбъект.ТаблицаВариантовОтчета = ПолучитьТаблицуДоступныхВариантов(ПолучитьИдентификаторОбъекта(ОтчетОбъект), глЗначениеПеременной("глТекущийПользователь"),,, СписокДоступныхНастроек);

КонецПроцедуры

Процедура ОбновитьКнопкиВыбораНастроек(ФормаОтчета, ОтчетОбъект, ПредставлениеНастройки, РежимРедактированияНастройки) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	Если НЕ ОтчетПодсистемыЗУП(ОтчетОбъект) Тогда
	Если РежимРедактированияНастройки Тогда
		// Добавим одну некликабельную кнопку
	
		ПолеКартинки = ЭлементыФормы.Добавить(Тип("ПолеКартинки"), "ПолеКартинкиВыбораВарианта" + "НастройкаЭлементаПанели", Истина, ЭлементыФормы.ПанельВыбораВариантов);
		ПолеКартинки.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.ПолеКартинкиОсновнойВариант, ГраницаЭлементаУправления.Низ);
		ПолеКартинки.Лево = 0;
		ПолеКартинки.Верх = 0;
		ПолеКартинки.Ширина = 150;
		ПолеКартинки.Высота = ЭлементыФормы.ПолеКартинкиОсновнойВариант.Высота;
		ПолеКартинки.ТекстНевыбраннойКартинки = ПредставлениеНастройки;
		ПолеКартинки.АвтоКонтекстноеМеню = Ложь;
		ПолеКартинки.Подсказка = "Расшифровка";
		ПолеКартинки.Шрифт = Новый Шрифт(ПолеКартинки.Шрифт, "Verdana");
		ПолеКартинки.ЦветФона = Новый Цвет(255, 248, 220);
		ПолеКартинки.ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
		Действие = ФормаОтчета.ДействияЭлементовФормы.ОбработкаНажатияКнопкиСохраненнойНастройки;
		ПолеКартинки.УстановитьДействие("Нажатие", Действие);
	
		Возврат;
	КонецЕсли;
	
	//Добавление основной настройки
	Попытка
		НоваяСтрока = ОтчетОбъект.ТаблицаВариантовОтчета.Вставить(0);
	
	НоваяСтрока.Ссылка = Справочники.СохраненныеНастройки.ПустаяСсылка();
	
	//НоваяСтрока.Наименование = "<Основной вариант отчета>";
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		НоваяСтрока.Наименование = ОтчетОбъект.Наименование;
	Иначе
		НоваяСтрока.Наименование = ОтчетОбъект.Метаданные().Синоним;
	КонецЕсли;
	
	НоваяСтрока.Описание = "Основной вариант отчета, отображаемый всем пользователям";
	НоваяСтрока.ПравоИзменения = Ложь;
	Исключение
	КонецПопытки;

	КонецЕсли;
	// Удалим старые кнопки
	Количество = ЭлементыФормы.Количество();
	Для Индекс = 1 По Количество Цикл
		ЭлементФормы = ЭлементыФормы[Количество - Индекс];
		Если Лев(ЭлементФормы.Имя, 26) = "ПолеКартинкиВыбораВарианта" ИЛИ Лев(ЭлементФормы.Имя, 19) = "РамкаВыбораВарианта" Тогда
			ЭлементыФормы.Удалить(ЭлементФормы);
		КонецЕсли;
	КонецЦикла;
	
	Если ОтчетПодсистемыЗУП(ОтчетОбъект) И ЭлементыФормы.Найти("НадписьПредупреждение") <> Неопределено Тогда
		Если ОтчетОбъект.ТаблицаВариантовОтчета.Количество() = 0 Тогда
			ЭлементыФормы.НадписьПредупреждение.Видимость = Истина;
		Иначе
			ЭлементыФормы.НадписьПредупреждение.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		// Добавим кнопки выбора вариантов
		Для Индекс = 0 По ОтчетОбъект.ТаблицаВариантовОтчета.Количество() - 1 Цикл
			Строка = ОтчетОбъект.ТаблицаВариантовОтчета.Получить(Индекс);
			ДобавитьКнопкуВыбораВариантаОтчета(ФормаОтчета, Индекс, Строка.Наименование, Строка.Ссылка = ОтчетОбъект.СохраненнаяНастройка, Строка.ПравоИзменения, Строка.Описание);
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ЭлементыФормы.РазделительПанелиВыбораВариантов.Верх = ЭлементыФормы.РазделительПанелиВыбораВариантов.Верх + 1;
	ЭлементыФормы.РазделительПанелиВыбораВариантов.Верх = ЭлементыФормы.РазделительПанелиВыбораВариантов.Верх - 1;
	
КонецПроцедуры


Процедура ДобавитьКнопкуВыбораВариантаОтчета(ФормаОтчета, Индекс, Заголовок, Пометка, ПравоИзменения, Описание)
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	Если ЭлементыФормы.Найти("НадписьВариантыОтчета") = Неопределено Тогда 
		Элемент = ЭлементыФормы.ПолеКартинкиОсновнойВариант;
		Смещение = 0;
	Иначе
		Элемент = ЭлементыФормы.НадписьВариантыОтчета;
		Смещение = ЭлементыФормы.НадписьВариантыОтчета.Лево + ЭлементыФормы.НадписьВариантыОтчета.Ширина + 2;
	КонецЕсли;
	
	ПолеКартинки = ЭлементыФормы.Добавить(Тип("ПолеКартинки"), "ПолеКартинкиВыбораВарианта" + Индекс, Истина, ЭлементыФормы.ПанельВыбораВариантов);
	ПолеКартинки.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Элемент, ГраницаЭлементаУправления.Низ);
	ПолеКартинки.Лево = (Индекс) * 103 + 0 + Смещение;
	ПолеКартинки.Верх = 0;
	ПолеКартинки.Ширина = 102;
	ПолеКартинки.Высота = Элемент.Высота;
	ПолеКартинки.ГиперСсылка = Истина;
	ПолеКартинки.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
	ПолеКартинки.ЦветТекста = WebЦвета.ТемноСиний;
	ПолеКартинки.ТекстНевыбраннойКартинки = Заголовок;
	ПолеКартинки.АвтоКонтекстноеМеню = Ложь;
	
	ПолеКартинки.Подсказка = Описание;
	ПолеКартинки.Шрифт = Новый Шрифт(ПолеКартинки.Шрифт, "Verdana");
	Если Пометка Тогда
		ПолеКартинки.КонтекстноеМеню = ЭлементыФормы.КонтекстноеМенюКартинкиВыбораСохраненнойНастройки;
	КонецЕсли;
	Если Пометка Тогда
		ПолеКартинки.ЦветФона = Новый Цвет(255, 248, 220);
		ПолеКартинки.ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
		ПолеКартинки.ГиперСсылка = ложь;
	Иначе
		ПолеКартинки.ГиперСсылка = истина;
	КонецЕсли;
	Действие = ФормаОтчета.ДействияЭлементовФормы.ОбработкаНажатияКнопкиСохраненнойНастройки;
	ПолеКартинки.УстановитьДействие("Нажатие", Действие);
	
	Рамка = ЭлементыФормы.Добавить(Тип("РамкаГруппы"), "РамкаВыбораВарианта" + Индекс, Истина, ЭлементыФормы.ПанельВыбораВариантов);
	Рамка.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Элемент, ГраницаЭлементаУправления.Низ);
	Рамка.Лево = (Индекс + 1) * 103 - 2  + Смещение;
	Рамка.Верх = 0;
	Рамка.Ширина = 1;
	Рамка.Высота = Элемент.Высота;
	Рамка.ЦветРамки = ЦветаСтиля.ЦветРамки;
	Рамка.ЦветТекста = WebЦвета.ТемноСиний;
	
КонецПроцедуры

Процедура ГруппировкаПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Если ОформлениеСтроки.ДанныеСтроки.ПредставлениеИерархии = "" Тогда
			ОформлениеСтроки.Ячейки.ПредставлениеИерархии.Видимость = Ложь;
			ОформлениеСтроки.Ячейки.ИспользованиеИерархии.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
Конецпроцедуры

Функция ДобавитьИЗаполнитьСтроку(Родитель, Использование, Имя, Представление)

	НоваяСтрока = Родитель.Строки.Добавить();
	НоваяСтрока.Использование = Использование;
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.Представление = Представление;
	Возврат НоваяСтрока;
	
КонецФункции

Функция ДобавитьСтрокуПериодичности(Таблица, Периодичность, Использование)
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Периодичность = Периодичность;
	НоваяСтрока.Использование = Использование;
	Возврат НоваяСтрока;
	
КонецФункции

Процедура ПроверитьЗначенияПараметров(ЗначенияНастроек, ПараметрыПанели, Отказ) Экспорт
	
	Отказ = Ложь;
	Если ЗначенияНастроек.Свойство("ДинамическиеПараметры") И ПараметрыПанели.Свойство("Параметры") Тогда
		Если ПараметрыПанели.Параметры.Колонки.Найти("Заполнено") <> Неопределено Тогда
			СтрокиПарамтеровДляПроверки = ПараметрыПанели.Параметры.НайтиСтроки(Новый Структура("Заполнено", Истина));
			Если СтрокиПарамтеровДляПроверки.Количество() > 0 Тогда
				СтрокаПредупреждения = "Не заполнен(а)";
				Для Каждого СтрокаПараметра Из СтрокиПарамтеровДляПроверки Цикл
					ЗначениеПараметра = ЗначенияНастроек.ДинамическиеПараметры[СтрокаПараметра.Параметр];
					Если ЗначениеПараметра = Неопределено ИЛИ (НЕ ЗначениеЗаполнено(ЗначениеПараметра.Значение) И ЗначениеПараметра.Значение <> 0) ИЛИ НЕ ЗначениеПараметра.Использование Тогда
						СтрокаПредупреждения = СтрокаПредупреждения + " " + СтрокаПараметра.ПараметрНазвание;
						Отказ = Истина;
					КонецЕсли;
				КонецЦикла;
				Если Отказ Тогда
					СтрокаПредупреждения = СтрокаПредупреждения + "!";
					Предупреждение(СтрокаПредупреждения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьПоследнююИспользуемуюНастройку(ОтчетОбъект) Экспорт
	
	Значение = ВосстановитьЗначение("ПоследниеИспользованныеНастройкиПользователя");
	Если Значение = Неопределено ИЛИ ТипЗнч(Значение) <> Тип("Соответствие") Тогда
		Значение = Новый Соответствие;
	КонецЕсли;
	
	Значение[ПолучитьИдентификаторОбъекта(ОтчетОбъект)] = ОтчетОбъект.СохраненнаяНастройка;
	СохранитьЗначение("ПоследниеИспользованныеНастройкиПользователя", Значение);
	
КонецПроцедуры

Процедура ОбновитьЦветаДиаграммы(Результат, ТаблицаЦветовСерий) Экспорт
	
	Если ТаблицаЦветовСерий = Неопределено 
	 ИЛИ ТаблицаЦветовСерий.Колонки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Рисунки = Результат.Рисунки;
	Для каждого Рисунок Из Рисунки Цикл
		Если ТипЗнч(Рисунок.Объект) <> Тип("Диаграмма") Тогда
			Продолжить;
		КонецЕсли;
		Серии = Рисунок.Объект.Серии;
		Для каждого Серия Из Серии Цикл
			СтруктураПоиска = Новый Структура("Текст", Серия.Текст);
			МассивЦветовСерий = ТаблицаЦветовСерий.НайтиСтроки(СтруктураПоиска);
			Если МассивЦветовСерий.Количество() > 0 Тогда
				Серия.Цвет = МассивЦветовСерий[0].Цвет;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗначениеВЭлементеПоСтруктуре(Структура, Ключ, ЭлементФормы) Экспорт

	Значение = ПолучитьЗначенияЭлементаСтруктуры(Структура, Ключ);
	Если Значение <> Неопределено Тогда
		ЭлементФормы.Значение = Значение;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьЗначенияЭлементаСтруктуры(Структура, Ключ) Экспорт
	
	Если Структура = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Значение = Неопределено;
	Структура.Свойство(Ключ, Значение);
	Возврат Значение;
	
КонецФункции

Процедура УстановитьДопустимоеЗначениеВПолеВыбора(Элемент, Значение, УстанавливатьПервоеЗначение = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Значение <> Неопределено И Элемент.СписокВыбора.НайтиПоЗначению(Значение) <> Неопределено Тогда
		Элемент.Значение = Значение;
	КонецЕсли;
	
	Если Элемент.Значение = Неопределено И УстанавливатьПервоеЗначение И Элемент.СписокВыбора.Количество() > 1 Тогда
		Элемент.Значение = Элемент.СписокВыбора[1].Значение;
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьСтруктуруДинамическихОтборов(Параметры, ЭлементыФормы, ТаблицаОтборов = Неопределено) Экспорт
	
	Соответствие = Новый Соответствие;
	Если Параметры = Неопределено Тогда
		Возврат Соответствие;
	КонецЕсли;
	
	Для Каждого СтрокаОтбора Из Параметры.Отборы Цикл
		
		Индекс = Параметры.Отборы.Индекс(СтрокаОтбора);
		
		Если ТаблицаОтборов <> Неопределено Тогда
			СтрокаТаблицаОтборов = ТаблицаОтборов.Найти(Новый ПолеКомпоновкиДанных(СтрокаОтбора.Поле));
		КонецЕсли;

		ЕстьСписок = (СтрокаОтбора.ВидОтбора = "Список" ИЛИ СтрокаОтбора.ВидОтбора = "ДлинныйСписок") 
						И СтрокаОтбора.Расположение <> "ГоризонтальнаяПанель";
		ЕстьЗначение = СтрокаОтбора.ВидОтбора = "ФлажокЗначение" ИЛИ СтрокаОтбора.ВидОтбора = "Значение" ИЛИ ((СтрокаОтбора.ВидОтбора = "Список" ИЛИ СтрокаОтбора.ВидОтбора = "ДлинныйСписок") 
						И СтрокаОтбора.Расположение = "ГоризонтальнаяПанель");
		ЕстьФлажок = СтрокаОтбора.ВидОтбора = "Флажок" ИЛИ СтрокаОтбора.ВидОтбора = "ФлажокЗначение";
		
		Использование = Истина;
		Значение = Неопределено;
		ВыбранныйВидСравнения = Неопределено;
		
		Если ЕстьСписок Тогда
			Если ЭлементыФормы.Найти("ДинамическийОтбор" + Индекс + "ТабличноеПоле") <> Неопределено Тогда
				Список = Новый СписокЗначений;
				Если СтрокаТаблицаОтборов = Неопределено Тогда
					Список.ЗагрузитьЗначения(ЭлементыФормы["ДинамическийОтбор" + Индекс + "ТабличноеПоле"].Значение.ВыгрузитьКолонку("Значение"));
				Иначе
					Если ТипЗнч(СтрокаТаблицаОтборов.ПравоеЗначение) = Тип("СписокЗначений") Тогда
						Список = СтрокаТаблицаОтборов.ПравоеЗначение;
						Если НЕ СтрокаТаблицаОтборов.Использование Тогда 
							ВыбранныйВидСравнения = "";
						ИначеЕсли СтрокаТаблицаОтборов.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии ИЛИ СтрокаТаблицаОтборов.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
							ВыбранныйВидСравнения = "Выбранные";
						ИначеЕсли СтрокаТаблицаОтборов.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии ИЛИ СтрокаТаблицаОтборов.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
							ВыбранныйВидСравнения = "Исключая";
						КонецЕсли
					Иначе
						Список.Добавить(СтрокаТаблицаОтборов.ПравоеЗначение);
					КонецЕсли;
				КонецЕсли;
				Значение = Список;
				Если ВыбранныйВидСравнения = Неопределено Тогда
					ВыбранныйВидСравнения = ЭлементыФормы["ДинамическийОтбор" + Индекс + "ВидСравнения"].Значение;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЕстьЗначение Тогда
			Если СтрокаТаблицаОтборов = Неопределено Тогда
				Значение = ЭлементыФормы["ДинамическийОтбор" + Индекс + "ПолеВвода"].Значение
			Иначе
				Если ТипЗнч(СтрокаТаблицаОтборов.ПравоеЗначение) = Тип("СписокЗначений") Тогда
					Если СтрокаТаблицаОтборов.ПравоеЗначение.Количество() >= 1 Тогда
						Значение = СтрокаТаблицаОтборов.ПравоеЗначение[0].Значение;
					Иначе
						Значение = СтрокаТаблицаОтборов.ПравоеЗначение;
					КонецЕсли;
				Иначе
					Значение = СтрокаТаблицаОтборов.ПравоеЗначение;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Значение = ?(СтрокаТаблицаОтборов = Неопределено, СтрокаОтбора.Значение, ТаблицаОтборов.ПравоеЗначение);
		КонецЕсли;
		Если ЕстьФлажок Тогда
			Если ЭлементыФормы.Найти("ДинамическийОтбор" + Индекс + "Флажок") <> Неопределено Тогда
				Использование = ?(СтрокаТаблицаОтборов = Неопределено, ЭлементыФормы["ДинамическийОтбор" + Индекс + "Флажок"].Значение, СтрокаТаблицаОтборов.Использование);
			КонецЕсли;
		КонецЕсли;
		
		Если (СтрокаОтбора.Расположение = "ГоризонтальнаяПанель" ИЛИ СтрокаОтбора.ВидОтбора = "Значение") И НЕ ЗначениеЗаполнено(Значение) Тогда
			Использование = Ложь;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Использование", Использование);
		СтруктураОтбора.Вставить("Поле", 		  СтрокаОтбора.Поле);
		СтруктураОтбора.Вставить("ВидСравнения",  ВыбранныйВидСравнения);
		СтруктураОтбора.Вставить("Значение", 	  Значение);
		Соответствие[СтрокаОтбора.Поле] = СтруктураОтбора;
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции


Процедура ПрименитьНастройкуПользователяНастройкиОтчета(ОтчетОбъект) Экспорт
	
	СсылкаНаОбъект = ПолучитьИдентификаторОбъекта(ОтчетОбъект); 
	НастраиваемыйОбъект = ?(ОтчетОбъект.СохраненнаяНастройка.Пустая(), СсылкаНаОбъект, ОтчетОбъект.СохраненнаяНастройка);
	Настройка = ПолучитьНастройкуПользователяНастройкиОтчета(НастраиваемыйОбъект);
	
	Если Настройка <> Неопределено Тогда
		Настройка = Настройка.ПолучитьОбъект();
		Значение = Настройка.ХранилищеНастроек.Получить();
		ОтчетОбъект.ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(Значение["ЗначенияНастроекПанелиПользователя"]);
	ИначеЕсли ОтчетПодсистемыЗУП(ОтчетОбъект) Тогда
		ПараметрыИсполненияОтчета = Неопределено;
		ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
		
		Если ПараметрыИсполненияОтчета <> Неопределено 
			И ПараметрыИсполненияОтчета.Свойство("ЗаполнитьОтборыПоУмолчанию") 
			И ПараметрыИсполненияОтчета.ЗаполнитьОтборыПоУмолчанию 
			И ПараметрыИсполненияОтчета.Свойство("СписокПолейПодстановкиОтборовПоУмолчанию") 
			И ПараметрыИсполненияОтчета.СписокПолейПодстановкиОтборовПоУмолчанию <> Неопределено тогда
			ЗаполнитьОтборыПоУмолчанию(ОтчетОбъект, ПараметрыИсполненияОтчета.СписокПолейПодстановкиОтборовПоУмолчанию);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОтборыПоУмолчанию(ОтчетОбъект, СписокПолейПодстановки)
	
	Для Каждого СписокПолей Из СписокПолейПодстановки Цикл
		
		ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
		Значение        = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, СписокПолей.Значение);
		ПодставитьОтборПоПолюВПанель(ОтчетОбъект, СписокПолей.Ключ, Значение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодставитьОтборПоПолюВПанель(ОтчетОбъект, Поле, Значение) Экспорт
	
	ЗначениеНастройкиПанели = ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект);
	
	Если ЗначениеНастройкиПанели = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = ЗначениеНастройкиПанели.ДинамическиеОтборы.Получить(Поле);	
	
	Если СтруктураОтбора <> Неопределено тогда
		Если ТипЗНч(СтруктураОтбора.Значение) = ТипЗнч(Значение) Тогда
			СтруктураОтбора.Значение = Значение;
		ИначеЕсли ТипЗнч(СтруктураОтбора.Значение) = Тип("СписокЗначений") И СтруктураОтбора.Значение.Количество() = 0 Тогда
			СтруктураОтбора.Значение.Добавить(Значение);
		КонецЕсли;
		СтруктураОтбора.Использование = Истина;
	КонецЕсли;
	
	Если ЗначениеНастройкиПанели.Свойство("ДинамическиеПараметры") Тогда
		СтруктураПараметра = ЗначениеНастройкиПанели.ДинамическиеПараметры.Получить(Поле);
		Если СтруктураПараметра <> Неопределено Тогда
			Если ТипЗнч(СтруктураПараметра.Значение) = ТипЗнч(Значение) Тогда
				СтруктураПараметра.Значение = Значение;
			ИначеЕсли ТипЗнч(СтруктураПараметра.Значение) = Тип("СписокЗначений") И СтруктураПараметра.Значение.Количество() = 0 Тогда
				СтруктураПараметра.Значение.Добавить(Значение);
			КонецЕсли;
			СтруктураПараметра.Использование = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОтчетОбъект.ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(ЗначениеНастройкиПанели);
	
КонецПроцедуры

Процедура ПоказатьКопиюРезультата(Результат) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Вывести(Результат);
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.СохранятьСвойстваОтображения = Истина;
	ТабДок.Показать();

КонецПроцедуры

Процедура ЗаполнитьНастройкиПоКомпановщику(ОтчетОбъект, КомпоновщикНастроек, ЗначенияНастроек) Экспорт
	
	Если ЗначенияНастроек = Неопределено тогда
		ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователяПоУмолчанию(ОтчетОбъект);
	КонецЕсли;
	
	Если ЭтоСтараяВерсияОтчета(ОтчетОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПанели  = ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);
	Если ПараметрыПанели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Установка Настроек компоновки на панели настроек
	Для каждого ВидимостьСтраницы Из ЗначенияНастроек.ВидимостьСтраниц Цикл
		Если Не ВидимостьСтраницы.Значение Тогда
			Продолжить;
		КонецЕсли;
		Если ВидимостьСтраницы.Ключ = "Параметры" Тогда
			ЗаполнитьЭлементы(ЗначенияНастроек.НастройкиКомпоновщика.ПараметрыДанных, КомпоновщикНастроек.Настройки.ПараметрыДанных);
		Иначе
			Если ВидимостьСтраницы.Ключ = "Выбор" тогда
				КомпоновщикНастроек.Настройки[ВидимостьСтраницы.Ключ].Элементы.Очистить();
			КонецЕсли;
			СкопироватьЭлементы(ЗначенияНастроек.НастройкиКомпоновщика[ВидимостьСтраницы.Ключ], КомпоновщикНастроек.Настройки[ВидимостьСтраницы.Ключ], , Ложь);
		КонецЕсли;
	КонецЦикла;
	
	// Установим у всех параметров использование
	Для каждого ЗначениеПараметра Из ЗначенияНастроек.НастройкиКомпоновщика.ПараметрыДанных.Элементы Цикл
		ЗначениеПараметра.Использование = Истина;
	КонецЦикла;
	
	Если ПараметрыПанели.ДеревоНастроекСтандартныхСтраниц.Строки.Найти("Период").Использование Тогда
		// Установка Стандартного периода
		ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
		ЗначениеПараметраКонецПериода  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
		Если ЗначениеПараметраНачалоПериода <> Неопределено И ЗначениеПараметраКонецПериода <> Неопределено Тогда
			СтандартныйПериод = Неопределено;
			ЗначенияНастроек.Свойство("СтандартныйПериод", СтандартныйПериод);
			Если СтандартныйПериод <> Неопределено Тогда
				Если ЗначениеПараметраНачалоПериода.Использование Тогда
					ЗначенияНастроек.СтандартныйПериод.ДатаНачала = ЗначениеПараметраНачалоПериода.Значение;
				КонецЕсли;
				Если ЗначениеПараметраКонецПериода.Использование Тогда
					ЗначенияНастроек.СтандартныйПериод.ДатаОкончания = ЗначениеПараметраКонецПериода.Значение;
				КонецЕсли;
				ЗначенияНастроек.СтандартныйПериод = СтандартныйПериод;
			КонецЕсли;
		КонецЕсли;
		
		// Установка Стандартной даты начала
		ЗначениеПараметраПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		Если ЗначениеПараметраПериод <> Неопределено Тогда
			СтандартнаяДатаНачала = Неопределено;
			ЗначенияНастроек.Свойство("СтандартнаяДатаНачала", СтандартнаяДатаНачала);
			Если СтандартнаяДатаНачала <> Неопределено Тогда
				Если ЗначениеПараметраПериод.Использование Тогда
					ЗначенияНастроек.СтандартнаяДатаНачала.Дата = ЗначениеПараметраПериод.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Установка Динамических отборов
	Если ЗначенияНастроек.Свойство("ДинамическиеПараметры") И ПараметрыПанели.Свойство("Параметры") тогда
		Для каждого СтрокаПараметра Из ПараметрыПанели.Параметры Цикл
			ЗначениеПараметра = ЗначенияНастроек.ДинамическиеПараметры[СтрокаПараметра.Параметр];
			Если ЗначениеПараметра = Неопределено ИЛИ Не ЗначениеПараметра.Использование Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеПараметраКомпоновщика = ПолучитьПараметр(КомпоновщикНастроек, ЗначениеПараметра.Параметр);
			ЗначениеПараметра.Значение = ЗначениеПараметраКомпоновщика.Значение;
		КонецЦикла;
	КонецЕсли;
	
	
	// Установка Динамических отборов
	Для каждого СтрокаОтбора Из ПараметрыПанели.Отборы Цикл
		ЗначениеОтбора = ЗначенияНастроек.ДинамическиеОтборы[СтрокаОтбора.Поле];
		Если ЗначениеОтбора = Неопределено ИЛИ Не ЗначениеОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		Для каждого ЭлементОтбора из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если ЭлементОтбора.Использование и ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЗначениеОтбора.Поле) тогда
				ЗначениеОтбора.Значение = ЭлементОтбора.ПравоеЗначение;
				Прервать;
			КонецЕсли;
		КонецЦИкла;
	КонецЦикла;
	//
	Если ЗначенияНастроек.Свойство("ДинамическиеГруппировки") И ПараметрыПанели.Свойство("Группировки") тогда
		Группировки =  ПолучитьГруппировки(КомпоновщикНастроек);
		Для каждого ЗначениДинГруппировки из ЗначенияНастроек.ДинамическиеГруппировки Цикл
			Если ЗначениДинГруппировки.Значение.СписокГруппировки <> Неопределено тогда
				ЗначениДинГруппировки.Значение.СписокГруппировки.Очистить();
				Для каждого Группировка из Группировки Цикл
					Если  Группировка.Значение.Имя = ЗначениДинГруппировки.Значение.ИмяГруппировки тогда
						ДобавитьГрупипровкуВЗначениеНастроек(КомпоновщикНастроек, Группировка.Значение, ЗначениДинГруппировки.Значение.СписокГруппировки);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ЗначениДинГруппировки.Значение.СписокГруппировкиСтрок <> Неопределено И ЗначениДинГруппировки.Значение.СписокГруппировкиКолонок <> Неопределено тогда
				ЗначениДинГруппировки.Значение.СписокГруппировкиСтрок.Очистить();
				Для каждого Группировка из Группировки Цикл
					Если  Группировка.Значение.Имя = ЗначениДинГруппировки.Значение.ИмяГруппировки тогда
						Если ТипЗнч(Группировка) = Тип("ТаблицаКомпоновкиДанных") или ТипЗнч(Группировка) = Тип("ДиаграммаКомпоновкиДанных") тогда
							Строки = Неопределено;
							Колонки = Неопределено;
							Если ТипЗнч(Группировка) = Тип("ТаблицаКомпоновкиДанных") тогда
								Строки  = Группировка.Строки;
								Колонки = Группировка.Колонки;
							Иначе
								Строки  = Группировка.Серии;
								Колонки = Группировка.Точки;
							КонецЕсли;
							ГруппировкиСтрок = ПолучитьГруппировки(Строки);
							ГруппировкиКолонок = ПолучитьГруппировки(Колонки);
							Для каждого ГруппировкаСтрок из ГруппировкиСтрок Цикл
								ДобавитьГрупипровкуВЗначениеНастроек(КомпоновщикНастроек, ГруппировкаСтрок["Значение"], ЗначениДинГруппировки.Значение.СписокГруппировкиСтрок);
							КонецЦикла;
							Для каждого ГруппировкаКолонок из ГруппировкиКолонок Цикл
								ДобавитьГрупипровкуВЗначениеНастроек(КомпоновщикНастроек, ГруппировкаКолонок["Значение"], ЗначениДинГруппировки.Значение.СписокГруппировкиКолонок);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьГрупипровкуВЗначениеНастроек(КомпоновщикНастроек, Группировка, ЭлементТабличноеПоле)
	СтрокаГруппировки = ЭлементТабличноеПоле.Добавить();
	Представление = "";
	Для каждого ПолеГруппировки из Группировка.ПоляГруппировки.Элементы Цикл
		СтрокаГруппировки.Значение.Добавить(Строка(ПолеГруппировки.Поле));
		ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеГруппировки.Поле, КомпоновщикНастроек);
		Представление = Представление + ?(Представление = "", "", ", ") + ДоступноеПоле.Заголовок;
	КонецЦикла;
	СтрокаГруппировки.Представление = Представление;
	СтрокаГруппировки.Использование = Группировка.Использование;
КонецПроцедуры

Процедура ОчиститьКомпоновщикНастроек(КомпоновщикНастроек)
	
	Если ТипЗнч(КомпоновщикНастроек) <> Тип("КомпоновщикНастроекКомпоновкиДанных") тогда
		Возврат;
	КонецЕсли;
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы.Очистить();
	КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Очистить();
	
	//очистим параметры
	
	Для каждого Параметр из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Если Параметр.Значение <> Неопределено тогда
			Параметр.Значение = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Параметр из КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы Цикл
		Параметр.Использование = истина;
	КонецЦикла;
	
КонецПроцедуры

Функция ИнициализироватьКомпоновщикНастроек(ОтчетОбъект, Схема = Неопределено, ЗагружатьНастройкиПоУмолчанию = Ложь, ТолькоПолучитьСКД = Ложь) Экспорт
	
	Если Не ТиповыеОтчеты.ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		Схема = ОтчетОбъект.СхемаКомпоновкиДанных;
	КонецЕсли;
	
	Если Схема = Неопределено Тогда
		Схема = ОтчетОбъект.СхемаКомпоновкиДанных.Получить();
	КонецЕсли;
	Если Схема = Неопределено Тогда
		// Если схема компоновки еще не редактировалась, создадим новую
		ОтчетОбъект.СхемаКомпоновкиДанных = Новый ХранилищеЗначения(Новый СхемаКомпоновкиДанных);
	КонецЕсли;
	
	Если Не ТолькоПолучитьСКД тогда
		ОтчетОбъект.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	КонецЕсли;
	
	Если ЗагружатьНастройкиПоУмолчанию Тогда
		// Загрузим настройки по умолчанию
		ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;
	
	Возврат Схема;
	
КонецФункции

Функция ПолучитьЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета, ЗначенияКомпоновщика = Ложь) Экспорт
	
	Возврат ?(ОтчетПодсистемыЗУП(ОтчетОбъект),ПолучитьЗначенияНастроекПанелиПользователяЗУП(ОтчетОбъект, ФормаОтчета,ЗначенияКомпоновщика),ПолучитьЗначенияНастроекПанелиПользователяБК(ОтчетОбъект, ФормаОтчета));
	
КонецФункции


Функция ПолучитьСтруктуруПоказателей(ЭлементыФормы) Экспорт
	
	ИспользованиеПоказателей = Новый Соответствие;
	
	Для Каждого СтрокаПоказателя Из ЭлементыФормы.Показатели.Значение Цикл
		ИспользованиеПоказателей.Вставить(СтрокаПоказателя.Поле, СтрокаПоказателя.Использование);
	КонецЦикла;
	
	Возврат ИспользованиеПоказателей;
	
КонецФункции 

Функция ПолучитьСтруктуруДинамическихГруппировок(Параметры, ЭлементыФормы) Экспорт
	
	Соответствие = Новый Соответствие;
	
	Если Параметры = Неопределено ИЛИ НЕ Параметры.Свойство("Группировки") Тогда
		Возврат Соответствие;
	КонецЕсли;
	
	Для Каждого СтрокаГруппировки Из Параметры.Группировки Цикл
		Индекс = Параметры.Группировки.Индекс(СтрокаГруппировки);
		Значение = Неопределено;
		ЗначениеСтрок = Неопределено;
		ЗначениеКолонок = Неопределено;
		ЭлемУпрЗначение = ЭлементыФормы.Найти("ДинамическаяГруппировка" + Индекс + "ТабличноеПоле");
		ЭлемУпрЗначениеСтрок = ЭлементыФормы.Найти("ДинамическаяГруппировка" + Индекс + "ТабличноеПолеСтрок");
		ЭлемУпрЗначениеКолонок = ЭлементыФормы.Найти("ДинамическаяГруппировка" + Индекс + "ТабличноеПолеКолонок");
		
		СтруктураГруппировки = Новый Структура("Использование, 
		|ИмяГруппировки, 
		|СписокГруппировки, 
		|СписокГруппировкиСтрок, 
		|СписокГруппировкиКолонок", 
		СтрокаГруппировки.Использование,
		СтрокаГруппировки.Группировка,
		?(ЭлемУпрЗначение <> Неопределено, ЭлемУпрЗначение.Значение, Неопределено),
		?(ЭлемУпрЗначениеСтрок <> Неопределено, ЭлемУпрЗначениеСтрок.Значение, Неопределено),
		?(ЭлемУпрЗначениеКолонок <> Неопределено, ЭлемУпрЗначениеКолонок.Значение, Неопределено));
		
		Соответствие[СтрокаГруппировки.Группировка] = СтруктураГруппировки;
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

Функция ПолучитьСтруктуруДинамическихПараметров(Параметры, ЭлементыФормы, ТаблицаПараметров = Неопределено) Экспорт
	
	Соответствие = Новый Соответствие;
	
	Если Параметры = Неопределено ИЛИ НЕ Параметры.Свойство("Параметры") Тогда
		Возврат Соответствие;
	КонецЕсли;
	
	Для Каждого СтрокаПараметра Из Параметры.Параметры Цикл
		
		Индекс = Параметры.Параметры.Индекс(СтрокаПараметра);
		
		Если ТаблицаПараметров <> Неопределено Тогда
			СтрокаТаблицаПараметров = ТаблицаПараметров.Найти(СтрокаПараметра.Параметр);
		КонецЕсли;

		ЕстьСписок = СтрокаПараметра.ОтображатьКак = "СписокЗначение";
		ЕстьЗначение = СтрокаПараметра.ОтображатьКак = "Переключатель" ИЛИ СтрокаПараметра.ОтображатьКак = "ПолеВвода";
		
		Если НЕ ЕстьЗначение И НЕ ЕстьСписок Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтрокаПараметра.ОтображатьКак = "СписокЗначение" И СтрокаПараметра.ВыводитьНа = "ПраваяПанель" Тогда
			ЭлементУправления = "ТабличноеПоле";
		ИначеЕсли СтрокаПараметра.ОтображатьКак = "СписокЗначение" И СтрокаПараметра.ВыводитьНа = "ГоризонтальнаяПанель" Тогда
			ЭлементУправления = "ПолеВвода";
		Иначе
			ЭлементУправления = СтрокаПараметра.ОтображатьКак;
		КонецЕсли;
		
		Если СтрокаПараметра.ОтображатьКак = "Переключатель" тогда
			НазваниеЭлементаУправления = "ДинамическийПараметр" + Индекс + 0 + ЭлементУправления;
		Иначе
			НазваниеЭлементаУправления = "ДинамическийПараметр" + Индекс + ЭлементУправления;
		КонецЕсли;
		
		Использование = Истина;
		Значение = Неопределено;
		
		Если ЭлементыФормы.Найти(НазваниеЭлементаУправления) <> Неопределено Тогда
			Если ЕстьСписок Тогда
				Список = Новый СписокЗначений;
				
				Если СтрокаТаблицаПараметров = Неопределено Тогда
					Если ЭлементУправления = "ПолеВвода" Тогда
						Список = ЭлементыФормы[НазваниеЭлементаУправления].Значение;
					Иначе
						Список.ЗагрузитьЗначения(ЭлементыФормы[НазваниеЭлементаУправления].Значение.ВыгрузитьКолонку("Значение"));
					КонецЕсли;
				Иначе
					Если ТипЗнч(СтрокаТаблицаПараметров.Значение) = Тип("СписокЗначений") Тогда
						Список = СтрокаТаблицаПараметров.Значение;
					Иначе
						Список = Новый СписокЗначений;
						Список.Добавить(СтрокаТаблицаПараметров.Значение);
					КонецЕсли;
				КонецЕсли;

				Значение = Список;
			Иначе 
				Если СтрокаТаблицаПараметров = Неопределено Тогда
					Значение = ЭлементыФормы[НазваниеЭлементаУправления].Значение;
				Иначе
					Если ТипЗнч(СтрокаТаблицаПараметров.Значение) = Тип("СписокЗначений") Тогда
						Если СтрокаТаблицаПараметров.Значение.Количество() >= 1 Тогда
							Значение = СтрокаТаблицаПараметров.Значение[0].Значение;
						Иначе
							Значение = СтрокаТаблицаПараметров.Значение;
						КонецЕсли;
					Иначе
						Значение = СтрокаТаблицаПараметров.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Сообщить("Не найден параметр " + СтрокаПараметра.Параметр);
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Использование", Использование);
		СтруктураОтбора.Вставить("Параметр", СтрокаПараметра.Параметр);
		СтруктураОтбора.Вставить("Значение", Значение);
		Соответствие[СтрокаПараметра.Параметр] = СтруктураОтбора;
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

Процедура ЗагрузитьВРеквизитЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета) Экспорт

	ОтчетОбъект.ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(ПолучитьЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета));
	
КонецПроцедуры


Процедура СохранитьРезультатВНастройке(ОтчетОбъект, ФормаОтчета) Экспорт 
	
	Если НЕ ФормаОтчета.ЭтоОтработкаРасшифровки И НЕ ФормаОтчета.РежимРедактированияНастройки Тогда
		СохранитьНастройкуПользователяНастройкиОтчета(ОтчетОбъект, ФормаОтчета);
	КонецЕсли;
	
	СсылкаНаОбъект = ПолучитьИдентификаторОбъекта(ОтчетОбъект); 
	НастраиваемыйОбъект = ?(ОтчетОбъект.СохраненнаяНастройка.Пустая(), СсылкаНаОбъект, ОтчетОбъект.СохраненнаяНастройка);
	Настройка = ПолучитьНастройкуПользователяНастройкиОтчета(НастраиваемыйОбъект);
	
	Если Настройка <> Неопределено Тогда
		Настройка = Настройка.ПолучитьОбъект();
		Значение = Настройка.ХранилищеНастроек.Получить();
	Иначе
		Настройка = Справочники.СохраненныеНастройки.СоздатьЭлемент();
		Настройка.НастраиваемыйОбъект = НастраиваемыйОбъект;
		Настройка.ТипНастройки = Перечисления.ТипыНастроек.НастройкиПользователяНастройкиОтчета;
		Настройка.Наименование = "НастройкиПользователяНастройкиОтчета";
		НовыйПользователь = Настройка.Пользователи.Добавить();
		НовыйПользователь.Пользователь = глЗначениеПеременной("глТекущийПользователь");
		Значение = Новый Соответствие;
	КонецЕсли;
	
	ТД = Новый ТабличныйДокумент;
	ТД.Вывести(ФормаОтчета.ЭлементыФормы.Результат);
	Значение["Результат"] = ТД;
	Настройка.ХранилищеНастроек = Новый ХранилищеЗначения(Значение);
	Настройка.Записать();

КонецПроцедуры

Процедура СохранитьРезультатССохраненным(ОтчетОбъект, ФормаОтчета) Экспорт
	
	СсылкаНаОбъект = ПолучитьИдентификаторОбъекта(ОтчетОбъект); 
	НастраиваемыйОбъект = ?(ОтчетОбъект.СохраненнаяНастройка.Пустая(), СсылкаНаОбъект, ОтчетОбъект.СохраненнаяНастройка);
	Настройка = ПолучитьНастройкуПользователяНастройкиОтчета(НастраиваемыйОбъект);
	Если Настройка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Значение = Настройка.ХранилищеНастроек.Получить();
	ТД = Значение["Результат"];
	Если ТД = Неопределено Тогда
		Вопрос("Отсутствует сохраненный результат", РежимДиалогаВопрос.ОК);
		Возврат;
	ИначеЕсли ТД.ВысотаТаблицы = 0 Тогда
		Вопрос("Сохраненный результат пустой", РежимДиалогаВопрос.ОК);
		Возврат;
	ИначеЕсли ФормаОтчета.ЭлементыФормы.Результат.ВысотаТаблицы = 0 Тогда
		Вопрос("Текущий результат пустой", РежимДиалогаВопрос.ОК);
		Возврат;
	КонецЕсли;
	
	ТД2 = Новый ТабличныйДокумент;
	ТД2.Вывести(ФормаОтчета.ЭлементыФормы.Результат);
	
	Файл1 = ПолучитьИмяВременногоФайла("ФайлСравнения1.mxl");
	Файл2 = ПолучитьИмяВременногоФайла("ФайлСравнения2.mxl");
	ТД2.Записать(Файл1);
	ТД.Записать(Файл2);
	СравнениеФайлов = Новый СравнениеФайлов;
	СравнениеФайлов.ПервыйФайл = Файл1;
	СравнениеФайлов.ВторойФайл = Файл2;
	СравнениеФайлов.СпособСравнения = СпособСравненияФайлов.ТабличныйДокумент;
	
	Если СравнениеФайлов.Сравнить() Тогда
		Вопрос("Результаты совпадают", РежимДиалогаВопрос.ОК);
	Иначе
		СравнениеФайлов.ПоказатьРазличия();
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьТекущуюНастройку(ОтчетОбъект, ФормаОтчета) Экспорт
	
	Если Не ОтчетОбъект.СохраненнаяНастройка.Пустая() И ОтчетОбъект.СохраненнаяНастройка.ПолучитьОбъект() = Неопределено Тогда
		// Вариант отчета удален. Сбрасываем вариант отчета на основной и предлагаем сохранить как
		ОтчетОбъект.СохраненнаяНастройка = Справочники.СохраненныеНастройки.ПустаяСсылка();
		ТиповыеОтчеты.СохранитьТекущуюНастройкуКак(ОтчетОбъект, ФормаОтчета);
		ОбновитьЗаголовокТиповогоОтчета(ОтчетОбъект, ФормаОтчета);
		Возврат;
	КонецЕсли;
	
	Если Не ТиповыеОтчеты.ЗаписьОтчетаДоступна(ОтчетОбъект) Тогда
		ТиповыеОтчеты.СохранитьТекущуюНастройкуКак(ОтчетОбъект, ФормаОтчета);
		Возврат;
	КонецЕсли;
	
	ЗагрузитьВРеквизитЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета);
	Если ОтчетОбъект.СохраненнаяНастройка.Пустая() Тогда
		Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
			Настройки = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();
			Схема = ПолучитьСхемуКомпоновкиОбъекта(ОтчетОбъект);
			ЗагрузитьВСхемуНастройкиКомпоновщика(Схема, Настройки);
			ОтчетОбъект.СхемаКомпоновкиДанных = Новый ХранилищеЗначения(Схема);
		КонецЕсли;
		ФормаОтчета.ЗаписатьВФорме();
	Иначе
		ОтчетОбъект.СохранитьНастройку();
	КонецЕсли;
	ФормаОтчета.Модифицированность = Ложь;
	ОбновитьЗаголовокТиповогоОтчета(ОтчетОбъект, ФормаОтчета);
	ФормаОтчета.Модифицированность = Ложь;
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		ФормаОтчета.ЭлементыФормы.СохранитьИЗакрыть.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьТекущуюНастройкуКак(ОтчетОбъект, ФормаОтчета) Экспорт

	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		Если ОтчетОбъект.Ссылка.Пустая() Тогда
			Предупреждение("Отчет еще не записан!", , "Сохранение настройки пользователя");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СохраненнаяСохраненнаяНастройка = ОтчетОбъект.СохраненнаяНастройка;
	СохранениеНастроек.ВыбратьНастройкуФормы(ОтчетОбъект.СохраненнаяНастройка, ФормаОтчета, ПолучитьИдентификаторОбъекта(ОтчетОбъект), Истина);
	
	Если Не ФормаОтчета.РежимРедактированияНастройки Тогда
		ОбновитьТаблицуДоступныхНастроекПользователю(ОтчетОбъект);
		ОбновитьКнопкиВыбораНастроек(ФормаОтчета, ОтчетОбъект, ФормаОтчета.ПредставлениеНастройки, ФормаОтчета.РежимРедактированияНастройки);
	Иначе
		// Сохранили настройки отчета в СохраненнуюНастройку
		ОтчетОбъект.СохраненнаяНастройка = СохраненнаяСохраненнаяНастройка;
	КонецЕсли;
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		ФормаОтчета.ЭлементыФормы.СохранитьИЗакрыть.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ОткрытьФормуСохраненнойНастройки(ОтчетОбъект, ФормаОтчета) Экспорт
	
	Если Не ОтчетОбъект.СохраненнаяНастройка.Пустая() Тогда
		
		Если ОтчетОбъект.СохраненнаяНастройка.ПолучитьОбъект() = Неопределено Тогда
			ОтчетОбъект.СохраненнаяНастройка = Справочники.СохраненныеНастройки.ПустаяСсылка();
			Вопрос("Текущий вариант отчета удален.", РежимДиалогаВопрос.ОК);
			ТиповыеОтчеты.ОбновитьТаблицуДоступныхНастроекПользователю(ОтчетОбъект);
			ТиповыеОтчеты.ОбновитьКнопкиВыбораНастроек(ФормаОтчета, ОтчетОбъект, ФормаОтчета.ПредставлениеНастройки, ФормаОтчета.РежимРедактированияНастройки);
			ОбновитьЗаголовокТиповогоОтчета(ОтчетОбъект, ФормаОтчета);
			Возврат;
		КонецЕсли;

		ФормаЭлемента = ОтчетОбъект.СохраненнаяНастройка.ПолучитьФорму(?(ОтчетПодсистемыЗУП(ОтчетОбъект),"ФормаЭлементаЗУП","ФормаЭлемента"), ФормаОтчета);
		ФормаЭлемента.ОткрытьМодально();
		ОбновитьТаблицуДоступныхНастроекПользователю(ОтчетОбъект);
		ОбновитьКнопкиВыбораНастроек(ФормаОтчета, ОтчетОбъект, ФормаОтчета.ПредставлениеНастройки, ФормаОтчета.РежимРедактированияНастройки);
	Иначе
		Вопрос("Основной вариант не содержит описания и виден всем пользователям", РежимДиалогаВопрос.ОК);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗакрытияНастройкиОтчета(ОтчетОбъект, ФормаОтчета, Отказ = Ложь, СтандартнаяОбработка = Истина) Экспорт
	
	Если Не ОтчетОбъект.СохраненнаяНастройка.Пустая() И ОтчетОбъект.СохраненнаяНастройка.ПолучитьОбъект() = Неопределено Тогда
		// Вариант отчета удален
		Возврат;
	КонецЕсли;
	
	Если Не ФормаОтчета.ЭтоОтработкаРасшифровки И Не ФормаОтчета.РежимРедактированияНастройки Тогда
		СохранитьНастройкуПользователяНастройкиОтчета(ОтчетОбъект, ФормаОтчета);
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗаписьОтчетаДоступна(ОтчетОбъект) ИЛИ Не ФормаОтчета.Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтчетОбъект.СохраненнаяНастройка.Пустая() Тогда
		// Сохраним сам отчет
		РезультатВопроса = Вопрос(НСТР("ru='Сохранить изменения в основном варианте отчета?'"), РежимДиалогаВопрос.ДаНетОтмена);
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			СохранитьТекущуюНастройку(ОтчетОбъект, ФормаОтчета);
		ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Иначе
			Отказ = Истина;
		КонецЕсли;
	Иначе
		// Сохраним настройку
		РезультатВопроса = Вопрос("Сохранить изменения в варианте отчета " 
			  + """" + ОтчетОбъект.СохраненнаяНастройка.Наименование + """?", РежимДиалогаВопрос.ДаНетОтмена);
		Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Да Тогда
			СохранитьТекущуюНастройку(ОтчетОбъект, ФормаОтчета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьНастройкуПользователяНастройкиОтчета(ОтчетОбъект, ФормаОтчета)
	
	СсылкаНаОбъект = ПолучитьИдентификаторОбъекта(ОтчетОбъект); 
	НастраиваемыйОбъект = ?(ОтчетОбъект.СохраненнаяНастройка.Пустая(), СсылкаНаОбъект, ОтчетОбъект.СохраненнаяНастройка);
	
	Настройка = ПолучитьНастройкуПользователяНастройкиОтчета(НастраиваемыйОбъект);
	Если Настройка <> Неопределено Тогда
		Настройка = Настройка.ПолучитьОбъект();
		Значение = Настройка.ХранилищеНастроек.Получить();
	Иначе
		Настройка = Справочники.СохраненныеНастройки.СоздатьЭлемент();
		Настройка.НастраиваемыйОбъект = НастраиваемыйОбъект;
		Настройка.ТипНастройки = Перечисления.ТипыНастроек.НастройкиПользователяНастройкиОтчета;
		Настройка.Наименование = "НастройкиПользователяНастройкиОтчета";
		НовыйПользователь = Настройка.Пользователи.Добавить();
		НовыйПользователь.Пользователь = глЗначениеПеременной("глТекущийПользователь");
		Значение = Новый Соответствие;
	КонецЕсли;
	Значение["ЗначенияНастроекПанелиПользователя"] = ПолучитьЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета);
	Настройка.ХранилищеНастроек = Новый ХранилищеЗначения(Значение);
	Настройка.Записать();
	
КонецПроцедуры

Процедура ОбновитьИзмененияТабличногоПоля(ЭлементыФормы, Элемент) Экспорт
	
	Если ТипЗнч(Элемент) = Тип("Число") Тогда
		Индекс = Элемент;
	Иначе
		Индекс = Число(Сред(Элемент.Имя, 18, 1));
	КонецЕсли;
	 
	ЭлементТабличноеПоле = ЭлементыФормы["ДинамическийОтбор" + Индекс + "ТабличноеПоле"];
	ЭлементВидСравнения = ЭлементыФормы["ДинамическийОтбор" + Индекс + "ВидСравнения"];
	
	// При очистке списка можно смело выставлять вид сравнения в "Не отбирать"
	Если ЭлементТабличноеПоле.Значение.Количество() = 0 И ЭлементВидСравнения.Значение <> "" Тогда
		ЭлементВидСравнения.Значение = "";
	КонецЕсли;
	
	// Если список не пуст, а вид сравнения "Не отбирать", установим вид сравнения в "Только выбранные"
	Если ЭлементТабличноеПоле.Значение.Количество() > 0 И ЭлементВидСравнения.Значение = "" Тогда
		ЭлементВидСравнения.Значение = "Выбранные";
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаНажатияКнопкиПодбор(ОтчетОбъект, ФормаОтчета, Элемент, Владелец = Неопределено, НазваниеРеквизита = "", СписокТипов = Неопределено) Экспорт
	Если ОтчетПодсистемыЗУП(ОтчетОбъект) Тогда
		ОбработкаНажатияКнопкиПодборЗУП(ОтчетОбъект, ФормаОтчета, Элемент, Владелец, НазваниеРеквизита, СписокТипов);
	Иначе
		ОбработкаНажатияКнопкиПодборБК(ОтчетОбъект, ФормаОтчета, Элемент);
	КонецЕсли;
КонецПроцедуры	

Процедура ОбработкаИзмененияЗначенияДинамическогоОтбора(ЭлементыФормы, Элемент, ФормаОтчета = Неопределено) Экспорт
	
	Если ТипЗнч(Элемент) = Тип("Кнопка") Тогда
		НастройкаПериода = Новый НастройкаПериода;
		
		Если ЭлементыФормы.Найти("ДинамическийОтборПериодВыбор") <> Неопределено И ФормаОтчета <> Неопределено тогда
			НачалоПериода = ФормаОтчета.СтандартныйПериод.ДатаНачала;
			КонецПериода  = КонецДня(ФормаОтчета.СтандартныйПериод.ДатаОкончания);
		Иначе	
			НачалоПериода = ЭлементыФормы.ДинамическийОтборДатаНачала.Значение;
			КонецПериода  = КонецДня(ЭлементыФормы.ДинамическийОтборДатаОкончания.Значение);
		КонецЕсли;
		
		НастроитьПериод(НастройкаПериода, НачалоПериода, КонецПериода);
		
		ЭлементыФормы.ДинамическийОтборСтандартныйПериодПользователя.Значение = ВариантСтандартногоПериода.ПроизвольныйПериод;
		
		Если ЭлементыФормы.Найти("ДинамическийОтборПериодВыбор") <> Неопределено И ФормаОтчета <> Неопределено тогда
			ФормаОтчета.СтандартныйПериод.ДатаНачала            = НачалоПериода;
			ФормаОтчета.СтандартныйПериод.ДатаОкончания         = КонецПериода;
			ПараметрыИсполненияОтчета                           = ФормаОтчета.ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
			ЭлементыФормы.ДинамическийОтборПериодВыбор.Значение = ПолучитьПредставлениеПериода(НачалоПериода, КонецПериода, ПараметрыИсполненияОтчета.МинимальныйПериодОтчета); 
		Иначе	
			ЭлементыФормы.ДинамическийОтборДатаНачала.Значение    = НачалоПериода;
			ЭлементыФормы.ДинамическийОтборДатаОкончания.Значение = КонецПериода;
		КонецЕсли;
		
	Иначе
		Индекс = Число(Сред(Элемент.Имя, 18, 1));
		ЭлементФлажок = ЭлементыФормы.Найти("ДинамическийОтбор" + Индекс + "Флажок");
		Если ЭлементФлажок <> Неопределено И ТипЗнч(Элемент) = Тип("ПолеВвода") Тогда
			Если ТипЗнч(Элемент.Значение) <> Тип("СписокЗначений") тогда
				ЭлементФлажок.Значение = ЗначениеЗаполнено(Элемент.Значение);
			Иначе
				ЭлементФлажок.Значение = Элемент.Значение.Количество() <> 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьСписокВТабличноеПоле(ОтчетОбъект, ЭлементыФормы, Элемент) Экспорт
	
	Параметры = ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);
	Индекс = Число(Сред(Элемент.Имя, 18, 1));
	СтрокаОтбора = Параметры.Отборы[Индекс];
	ЭлементТабличноеПоле = ЭлементыФормы["ДинамическийОтбор" + Индекс + "ТабличноеПоле"];
	
	Отказ = Ложь;
	Значение = ВосстановитьЗначение("ДинамическиеОтборы_СохраненныеСписки");
	Если Значение = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Вопрос("Сохраненные списки отсутствуют", РежимДиалогаВопрос.ОК, , , "Загрузка списка");
		Возврат;
	КонецЕсли;
	Список = Значение[СтрокаОтбора.Поле];
	Если Список = Неопределено ИЛИ Список.Количество() = 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ФормаРаботыСоСпискомЗначений = ПолучитьОбщуюФорму("ФормаРаботыСоСпискомЗначений");
	ФормаРаботыСоСпискомЗначений.СписокЗначений = Список;
	ЭлементСписка = ФормаРаботыСоСпискомЗначений.ОткрытьМодально();
	Если ЭлементСписка <> Неопределено Тогда
		ЭлементТабличноеПоле.Значение.Очистить();
		Для каждого ЭлементСпискаСписка Из ЭлементСписка.Значение Цикл
			НоваяСтрока = ЭлементТабличноеПоле.Значение.Добавить();
			НоваяСтрока.Значение = ЭлементСпискаСписка.Значение;
		КонецЦикла;
	КонецЕсли;
	Список = ФормаРаботыСоСпискомЗначений.СписокЗначений;
	Значение[СтрокаОтбора.Поле] = Список;
	СохранитьЗначение("ДинамическиеОтборы_СохраненныеСписки", Значение);
	ОбновитьИзмененияТабличногоПоля(ЭлементыФормы, Элемент);

КонецПроцедуры

Процедура СохранитьСписокВТабличномПоле(ОтчетОбъект, ЭлементыФормы, Элемент) Экспорт
	
	Параметры = ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);
	Индекс = Число(Сред(Элемент.Имя, 18, 1));
	СтрокаОтбора = Параметры.Отборы[Индекс];
	ЭлементТабличноеПоле = ЭлементыФормы["ДинамическийОтбор" + Индекс + "ТабличноеПоле"];
	Если ЭлементТабличноеПоле.Значение.Количество() = 0 Тогда
		Вопрос("Список пуст", РежимДиалогаВопрос.ОК);
		Возврат;
	КонецЕсли;
	
	ЗначениеСписка = Новый СписокЗначений;
	ЗначениеСписка.ЗагрузитьЗначения(ЭлементТабличноеПоле.Значение.ВыгрузитьКолонку("Значение"));
	
	НазваниеСписка = Строка(ЗначениеСписка);
	Результат = ВвестиЗначение(НазваниеСписка, "Введите название сохраняемого списка");
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Значение = ВосстановитьЗначение("ДинамическиеОтборы_СохраненныеСписки");
	Если Значение = Неопределено Тогда
		Значение = Новый Соответствие;
	КонецЕсли;
	НовыйСписок = Значение[СтрокаОтбора.Поле];
	Если НовыйСписок = Неопределено Тогда
		НовыйСписок = Новый СписокЗначений;
	КонецЕсли;
	НовыйСписок.Добавить(ЗначениеСписка, НазваниеСписка);
	Значение[СтрокаОтбора.Поле] = НовыйСписок;
	СохранитьЗначение("ДинамическиеОтборы_СохраненныеСписки", Значение);
		
КонецПроцедуры

Функция ПолучитьИдентификаторОбъекта(ОтчетОбъект) Экспорт
	
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		СсылкаНаОбъект = ?(ОтчетОбъект.ЭтоНовый(), ОтчетОбъект.ПолучитьСсылкуНового(), ОтчетОбъект.Ссылка); 
		Возврат СсылкаНаОбъект;
	Иначе
		Возврат "ОтчетОбъект." + ОтчетОбъект.Метаданные().Имя;
	КонецЕсли;
	
КонецФункции


Функция ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект, ФормаОтчета = Неопределено) Экспорт
	
	Если ОтчетОбъект.ЗначенияНастроекПанелиПользователя = Неопределено Тогда
		#Если Клиент Тогда
			Если ФормаОтчета <> Неопределено Тогда
				Возврат ПолучитьЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета);
			КонецЕсли;
		#КонецЕсли
		Возврат Неопределено;
	Иначе
		Возврат ОтчетОбъект.ЗначенияНастроекПанелиПользователя.Получить();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект) Экспорт
	
	Если ОтчетОбъект.ПараметрыПанелиПользователя = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОтчетОбъект.ПараметрыПанелиПользователя.Получить();
	КонецЕсли;
	
КонецФункции

Функция ЭтоСтараяВерсияОтчета(ОтчетОбъект) Экспорт
	
	Возврат Не ЭтоПроизвольныйОтчет(ОтчетОбъект) И (ОтчетОбъект.Метаданные().Реквизиты.Найти("НастройкаПериода") <> Неопределено);
	
КонецФункции

Функция ЗаписьОтчетаДоступна(ОтчетОбъект, ПроверяемаяСохраненнаяНастройка = Неопределено) Экспорт
	
	Если ПроверяемаяСохраненнаяНастройка = Неопределено Тогда
		ПроверяемаяСохраненнаяНастройка = ОтчетОбъект.СохраненнаяНастройка;
	КонецЕсли;
		
	СписокДоступныхНастроек = ТиповыеОтчеты.ПолучитьСписокДоступныхВариантов(ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект), глЗначениеПеременной("глТекущийПользователь"));
	Элемент = СписокДоступныхНастроек.НайтиПоЗначению(ПроверяемаяСохраненнаяНастройка);
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		Возврат ОтчетОбъект.ЭтоНовый()
			ИЛИ ПроверяемаяСохраненнаяНастройка.Пустая() И ОтчетОбъект.Ссылка.Владелец = глЗначениеПеременной("глТекущийПользователь")
			ИЛИ Элемент <> Неопределено И Элемент.Пометка
			ИЛИ РольДоступна("ПолныеПрава");
	Иначе
		Если ПроверяемаяСохраненнаяНастройка.Пустая() Тогда
			// Основную настройку типового отчета сохранять нельзя
			Возврат Ложь;
		Иначе
			Возврат Элемент <> Неопределено И Элемент.Пометка 
		        ИЛИ РольДоступна("ПолныеПрава");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура СохранитьКопиюРезультатаОтчета(ОбъектОтчета, РезультатОтчета) Экспорт
	
	ИндексФильтраСохраненный = ВосстановитьЗначение("ИндексФильтраТипаФайлаТабличногоДокументаДляСохранения");
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок = "Save as";
	ПолноеИмяФайла = ОбъектОтчета.Метаданные().Синоним;
	ПолноеИмяФайла = УниверсальныеМеханизмы.УдалитьЗапрещенныеСимволыИмени(ПолноеИмяФайла);
	Диалог.ПолноеИмяФайла = ПолноеИмяФайла;
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.Фильтр = "Табличный документ (*.mxl)|*.mxl|"
	      		  + "Документ Microsoft Excel (*.xls)|*.xls|"
				  + "Документ Microsoft Excel 2007 (*.xlsx)|*.xlsx|";
	Если ИндексФильтраСохраненный = Неопределено ИЛИ ТипЗнч(ИндексФильтраСохраненный) <> Тип("Число") Тогда 
		ИндексФильтраСохраненный = 0;
	КонецЕсли;
	Диалог.ИндексФильтра = ИндексФильтраСохраненный;
	Если Диалог.Выбрать() Тогда
		ИмяФайла = Диалог.ПолноеИмяФайла;
		Если (Прав(ИмяФайла,3) = "xls") 
			 И   ((РезультатОтчета.ВысотаТаблицы > 65536)
			 ИЛИ (РезультатОтчета.ШиринаТаблицы > 256))  Тогда
			Предупреждение("Таблица содержит слишком большое количество строк или столбцов.
							|Файл не может быть сохранен в формате Excel (*.xls).
							|Попробуйте сохранить файл в формате Excel 2007 (*.xlsx).");
			Возврат;
		КонецЕсли;
		Если (Прав(ИмяФайла,4) = "xlsx") 
			 И   ((РезультатОтчета.ВысотаТаблицы > 1048576)
			 ИЛИ (РезультатОтчета.ШиринаТаблицы > 16384))  Тогда
			Предупреждение("Таблица содержит слишком большое количество строк или столбцов.
							|Файл не может быть сохранен в формате Excel 2007 (*.xlsx).");
			Возврат;
		КонецЕсли;
		
		Если Прав(ИмяФайла,3) = "xls" Тогда
		    ТипФайлаТабДокумента = ТипФайлаТабличногоДокумента.XLS;
		ИначеЕсли Прав(ИмяФайла,4) = "xlsx" Тогда	
		    ТипФайлаТабДокумента = ТипФайлаТабличногоДокумента.XLSX;
		Иначе
		    ТипФайлаТабДокумента = ТипФайлаТабличногоДокумента.MXL;
		КонецЕсли;
		
		Попытка
			РезультатОтчета.Записать(ИмяФайла, ТипФайлаТабДокумента);
		Исключение
			Предупреждение("Ошибка при записи. Файл не записан.");
		КонецПопытки;	
		
		СохранитьЗначение("ИндексФильтраТипаФайлаТабличногоДокументаДляСохранения", Диалог.ИндексФильтра);
	КонецЕсли;

КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С СКД

#Если Клиент Тогда

Функция РедактироватьСтруктуруОтчета(ОтчетОбъект, ФормаОтчета, ПараметрыФормы = Неопределено) Экспорт
	
	СохраненнаяМодифицированность = ФормаОтчета.Модифицированность;
	// Подготовим отчет к открытию формы настройки
	ЗагрузитьВРеквизитЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета);
	
	// Сохраним настройки на случай отмены редактирования
	СохраненныеНастройки = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();
	
	// Откроем форму настройки
	ФормаНастройки = ПолучитьОбщуюФорму("ФормаНастройкиСтруктурыОтчета", ФормаОтчета);
	ФормаНастройки.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	ФормаНастройки.ОтчетОбъект = ОтчетОбъект;
	ФормаНастройки.ОтрицательноеКрасным = ОтчетОбъект.ОтрицательноеКрасным;
	
	ПолучитьПримененуюНастройку(ОтчетОбъект, ФормаНастройки.КомпоновщикНастроек);

	Если ЭтоСтараяВерсияОтчета(ОтчетОбъект) Тогда
		ФормаНастройки.НастройкаПериода = ОтчетОбъект.НастройкаПериода;
	КонецЕсли;
	
	ФормаНастройки.ПараметрыФормы = ПараметрыФормы;
	ФормаНастройки.РасширеннаяНастройка = ОтчетОбъект.РасширеннаяНастройка;
	ФормаНастройки.ОсновнаяНастройка = ОтчетОбъект.СохраненнаяНастройка.Пустая();
	РезультатОткрытия = ФормаНастройки.ОткрытьМодально();
	РасширеннаяНастройка = ФормаНастройки.РасширеннаяНастройка;
	
	// Проверим результат открытия
	Если РезультатОткрытия <> Неопределено Тогда 
		
		// Обновим форму типового отчета
		ОбновитьФормуТиповогоОтчетаПоКомпоновщику(ОтчетОбъект, ФормаОтчета);
		ОтчетОбъект.ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(ПолучитьЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета, Истина));
		УправлениеОтображениемЗаголовкаТиповогоОтчета(ОтчетОбъект, ФормаОтчета.ЭлементыФормы.Результат);
		// Перерисуем форму отчета
		ПерерисоватьПанельНастроек(ОтчетОбъект, ФормаОтчета,,);
		ОтчетОбъект.РасширеннаяНастройка = ФормаНастройки.РасширеннаяНастройка;
		ФормаОтчета.Модифицированность = Истина;
		
		Возврат РезультатОткрытия;
		
	Иначе
		
		ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(СохраненныеНастройки);
		ФормаОтчета.Модифицированность = СохраненнаяМодифицированность;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Процедура УстановитьЛевуюПривязку(Элемент, Панель) Экспорт
	
	Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Лево);
	
КонецПроцедуры

Процедура УстановитьПривязкуКЛевойГранице(Элемент, ПривязатьК, Панель = Неопределено) Экспорт
	
	Если Панель <> Неопределено Тогда
		Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПривязатьК, ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Право);
	Иначе
		Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПривязатьК, ГраницаЭлементаУправления.Лево);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПривязкуКПравойГранице(Элемент, ПривязатьК, Панель = Неопределено) Экспорт
	
	Если Панель <> Неопределено Тогда
		Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ПривязатьК, ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
	Иначе
		Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ПривязатьК, ГраницаЭлементаУправления.Право);
	КонецЕсли;
	
КонецПроцедуры

Процедура НарисоватьФлажокДопНастроек(ФормаОтчета, ВерхДопСтр, ИмяФлажка, НазваниеФлажка, ЗначениеПоУмолчанию, ПараметрыИсполненияОтчета = Неопределено)
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	ШиринаПанелиЗакладки = ЭлементыФормы.ПанельЗакладок.Ширина-15;
	НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Флажок"), ИмяФлажка, Истина, ЭлементыФормы.ПанельЗакладок);
	НовыйЭлемент.Верх      = ВерхДопСтр;
	НовыйЭлемент.Лево      = 6;
	НовыйЭлемент.Ширина    = ШиринаПанелиЗакладки - 15;
	НовыйЭлемент.Заголовок = НазваниеФлажка;
	НовыйЭлемент.Значение  = ЗначениеПоУмолчанию;
	УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
	
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ДействияПанелиИзменениеФлажкаДопНастроек") И ПараметрыИсполненияОтчета.ДействияПанелиИзменениеФлажкаДопНастроек тогда
		Если ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиИзменениеФлажкаДопНастроек") тогда
			НовыйЭлемент.УстановитьДействие("ПриИзменении", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиИзменениеФлажкаДопНастроек);
		КонецЕсли;
	КонецЕсли;
	
	ВерхДопСтр = ВерхДопСтр + НовыйЭлемент.Высота + 6;
	
КонецПроцедуры

Процедура НарисоватьДинамическийОтборГоризонтальнойПанели(ФормаОтчета, Индекс, Лево, ЦветФонаКнопки, СтрокаОтбора, ЭлементДинамическогоОтбора, ДоступноеПоле, ПоследнийЭлемент = ложь, Список = истина, ПараметрыИсполненияОтчета = Неопределено, ПредыдущийЭлемент, СреднийРазмерЭлементаУправления)
	
	Если ДоступноеПоле = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлементовУправления = Новый Структура("
	|СтрокаОтбора, 
	|СтраницаПанели, 
	|ДинамическийОтборНадпись, 
	|ДинамическийОтборПолеВвода");
	
	СтруктураЭлементовУправления.СтрокаОтбора = СтрокаОтбора;
	ЭлементыФормы        = ФормаОтчета.ЭлементыФормы;
	ШиринаПанелиЗакладки = ЭлементыФормы.ПанельПользователяГоризонтальная.Ширина;
	СтруктураЭлементовУправления.СтраницаПанели = ЭлементыФормы.ПанельПользователяГоризонтальная.ТекущаяСтраница;
	
	НовыйЭлементНадпись = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтбор" + Индекс + "Надпись", Истина, ЭлементыФормы.ПанельПользователяГоризонтальная);
	НовыйЭлементНадпись.Верх = 6;
	НовыйЭлементНадпись.Лево = Лево;
	СреднийРазмерЭлементаУправления = ?(СреднийРазмерЭлементаУправления = Неопределено, СтрДлина(СтрокаОтбора.Представление)*7, СреднийРазмерЭлементаУправления);
	НовыйЭлементНадпись.Ширина = ?(СреднийРазмерЭлементаУправления > СтрДлина(СтрокаОтбора.Представление)*7, СтрДлина(СтрокаОтбора.Представление)*7, СреднийРазмерЭлементаУправления);
	НовыйЭлементНадпись.Заголовок = СтрокаОтбора.Представление+":";
	НовыйЭлементНадпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	Лево = Лево + НовыйЭлементНадпись.Ширина + 6;
	//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
	СтруктураЭлементовУправления.ДинамическийОтборНадпись = НовыйЭлементНадпись;
	
	Если ПредыдущийЭлемент = Неопределено Тогда
		УстановитьЛевуюПривязку(НовыйЭлементНадпись, ЭлементыФормы.ПанельПользователяГоризонтальная)
	Иначе
		УстановитьПривязкуКПравойГранице(НовыйЭлементНадпись, ПредыдущийЭлемент, ЭлементыФормы.ПанельПользователяГоризонтальная);
	КонецЕсли;
	
	УстановитьПривязкуКЛевойГранице(НовыйЭлементНадпись, НовыйЭлементНадпись, ЭлементыФормы.ПанельПользователяГоризонтальная);
	
	НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтбор" + Индекс + "ПолеВвода", Истина, ЭлементыФормы.ПанельПользователяГоризонтальная);
	НовыйЭлемент.Верх = 6;
	НовыйЭлемент.Лево = Лево;
	
	Если Найти(Строка(ДоступноеПоле.Тип),"ПланСчетов") <> 0 Тогда
		НовыйЭлемент.Ширина = СреднийРазмерЭлементаУправления/2.5; 
	Иначе
		НовыйЭлемент.Ширина = ?(ПоследнийЭлемент, ШиринаПанелиЗакладки - Лево, СреднийРазмерЭлементаУправления); 
	КонецЕсли;
	
	НовыйЭлемент.ТипЗначения	   = ДоступноеПоле.Тип;
	
	Если Список тогда
		НовыйЭлемент.Значение          = Новый СписокЗначений;
		НовыйЭлемент.ТипЗначения       = Новый ОписаниеТипов("СписокЗначений");
		НовыйЭлемент.ТипЗначенияСписка = ДоступноеПоле.Тип;
	КонецЕсли;
	
	НовыйЭлемент.ЦветФонаКнопки    = ЦветФонаКнопки;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиИзменениеЗначенияДинамическогоОтбора);
	
	Если ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиНачалоВыбораЗначенияДинамическогоОтбора") тогда
		НовыйЭлемент.УстановитьДействие("НачалоВыбора", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиНачалоВыбораЗначенияДинамическогоОтбора);
	КонецЕсли;
	
	Если ПоследнийЭлемент тогда
		УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельПользователяГоризонтальная);
		НовыйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево, НовыйЭлементНадпись, ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельПользователяГоризонтальная, ГраницаЭлементаУправления.Право)
	Иначе				
		УстановитьПривязкуКПравойГранице(НовыйЭлемент, НовыйЭлементНадпись, ЭлементыФормы.ПанельПользователяГоризонтальная);
		УстановитьПривязкуКЛевойГранице(НовыйЭлемент, НовыйЭлемент, ЭлементыФормы.ПанельПользователяГоризонтальная);
	КонецЕсли;
	
	//Получить из значений
	Если ЭлементДинамическогоОтбора <> Неопределено  Тогда
		// Восстановим значение
		НовыйЭлемент.Значение = ЭлементДинамическогоОтбора.Значение;
	Иначе
		// Установим значение по умолчанию
		НовыйЭлемент.Значение = СтрокаОтбора.Значение;
	КонецЕсли;
	
	Лево = ?(ПоследнийЭлемент, Лево, Лево + НовыйЭлемент.Ширина + 6);
	СтруктураЭлементовУправления.ДинамическийОтборПолеВвода = НовыйЭлемент;
	
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаОтбора") И ПараметрыИсполненияОтчета.ПослеВыводаОтбора тогда
		ФормаОтчета.ПослеВыводаОтбора(СтруктураЭлементовУправления);
	КонецЕсли;
	
КонецПроцедуры

Процедура НарисоватьГруппировкуОтчета(ФормаОтчета, ОтчетОбъект, Индекс, СтрокаГруппировки, ЦветФонаКнопки, Группировки, ЭлементДинамическойГруппировки, ПараметрыИсполненияОтчета = Неопределено)
	
	ВидыГруппировок = Новый Соответствие;
	
	//опредлим вид группировки
	ПерваяГруппировка = Неопределено;
	
	Если Группировки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Группировки.Количество() > 0 Тогда
		ПерваяГруппировка = Группировки[0].Значение;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ПерваяГруппировка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПерваяГруппировка) = Тип("ГруппировкаКомпоновкиДанных") 
		ИЛИ ТипЗнч(ПерваяГруппировка) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		ИЛИ ТипЗнч(ПерваяГруппировка) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда  //рисуем элемент группировки
		НарисоватьЭлементУправленияГруппировокой(ФормаОтчета,  ОтчетОбъект, Индекс, СтрокаГруппировки, ЦветФонаКнопки, Группировки, ЭлементДинамическойГруппировки, ПараметрыИсполненияОтчета);
	ИначеЕсли ТипЗнч(ПерваяГруппировка) = Тип("ТаблицаКомпоновкиДанных") Тогда
		НарисоватьЭлементУправленияТаблицейДиаграммой(ФормаОтчета,  ОтчетОбъект, Индекс, СтрокаГруппировки, ЦветФонаКнопки, Группировки, ЭлементДинамическойГруппировки, ПараметрыИсполненияОтчета);
	ИначеЕсли ТипЗнч(ПерваяГруппировка) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		НарисоватьЭлементУправленияТаблицейДиаграммой(ФормаОтчета,  ОтчетОбъект, Индекс, СтрокаГруппировки, ЦветФонаКнопки, Группировки, ЭлементДинамическойГруппировки, ПараметрыИсполненияОтчета);
	КонецЕсли;
	
КонецПроцедуры

Процедура НарисоватьПараметрОтчета(ФормаОтчета, Индекс, СтрокаПараметра,  Лево, ЦветФонаКнопки, Параметр, ДоступныйПараметр, ЭлементДинамическогоПараметра, ПараметрыИсполненияОтчета = Неопределено, ПоследнийЭлемент = ложь, ПредыдущийЭлемент = Неопределено, СреднийРазмерЭлементаУправления = Неопределено)
	
	СтруктураЭлементовУправления = Новый Структура("
	|СтрокаПараметра,
	|СтраницаПанели, 
	|ДинамическийПараметрНадпись, 
	|ДинамическийПараметрПолеВвода,
	|ДинамическийПараметрТабличноеПоле,
	|ДинамическийПараметрПереключатель");
	
	СтруктураЭлементовУправления.СтрокаПараметра = СтрокаПараметра;
	
	Если СтрокаПараметра.ВыводитьНа = "ГоризонтальнаяПанель" И ФормаОтчета.ЭлементыФормы.Найти("ПанельПользователяГоризонтальная") <> Неопределено тогда
		
		Если СтрокаПараметра.ОтображатьКак = "ПолеВвода" ИЛИ СтрокаПараметра.ОтображатьКак = "СписокЗначение" Тогда
			
			ЭлементыФормы        = ФормаОтчета.ЭлементыФормы;
			
			СтруктураЭлементовУправления.СтраницаПанели = ЭлементыФормы.ПанельПользователяГоризонтальная;
			
			НовыйЭлементНадпись = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийПараметр" + Индекс + "Надпись", Истина, ЭлементыФормы.ПанельПользователяГоризонтальная);
			НовыйЭлементНадпись.Верх = 6;
			НовыйЭлементНадпись.Лево = Лево;
			НовыйЭлементНадпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			СреднийРазмерЭлементаУправления = ?(СреднийРазмерЭлементаУправления = Неопределено, СтрДлина(ДоступныйПараметр.Заголовок)*7, СреднийРазмерЭлементаУправления);
			НовыйЭлементНадпись.Ширина = ?(СреднийРазмерЭлементаУправления > СтрДлина(ДоступныйПараметр.Заголовок)*7, СтрДлина(ДоступныйПараметр.Заголовок)*7, СреднийРазмерЭлементаУправления);
			НовыйЭлементНадпись.Высота = 19;
			НовыйЭлементНадпись.Заголовок = ДоступныйПараметр.Заголовок+":";
			Лево = Лево + НовыйЭлементНадпись.Ширина + 6;
			//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельПользователяГоризонтальная);
			СтруктураЭлементовУправления.ДинамическийПараметрНадпись = НовыйЭлементНадпись;
			
			Если ПредыдущийЭлемент = Неопределено тогда
				УстановитьЛевуюПривязку(НовыйЭлементНадпись, ЭлементыФормы.ПанельПользователяГоризонтальная)
			Иначе
				УстановитьПривязкуКПравойГранице(НовыйЭлементНадпись, ПредыдущийЭлемент, ЭлементыФормы.ПанельПользователяГоризонтальная);
			КонецЕсли;
			
			УстановитьПривязкуКЛевойГранице(НовыйЭлементНадпись, НовыйЭлементНадпись, ЭлементыФормы.ПанельПользователяГоризонтальная);
			//УстановитьПривязкуКПравойГранице(НовыйЭлемент, НовыйЭлементНадпись, ЭлементыФормы.ПанельПользователяГоризонтальная);

			Если СтрокаПараметра.ОтображатьКак <> "СписокЗначение" И ДоступныйПараметр.ДоступныеЗначения <> Неопределено тогда
				НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВыбора"), "ДинамическийПараметр" + Индекс + "ПолеВвода", Истина, ЭлементыФормы.ПанельПользователяГоризонтальная);
			Иначе
				НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийПараметр" + Индекс + "ПолеВвода", Истина, ЭлементыФормы.ПанельПользователяГоризонтальная);
			КонецЕсли;
			
			НовыйЭлемент.Верх = 6;
			НовыйЭлемент.Лево = Лево;
			
			Если СтрокаПараметра.Владелец().Колонки.Найти("МаленкийЭлементУпавления") <> Неопределено  и СтрокаПараметра.МаленкийЭлементУпавления тогда
				НовыйЭлемент.Ширина = СреднийРазмерЭлементаУправления/2.5; 
			Иначе
				НовыйЭлемент.Ширина = СреднийРазмерЭлементаУправления; 
			КонецЕсли;
			
			НовыйЭлемент.АвтоОтметкаНезаполненного = СтрокаПараметра.Заполнено;
			//КонецЕсли;
			НовыйЭлемент.ТипЗначения = ДоступныйПараметр.Тип;
			
			Если ДоступныйПараметр.ДоступныеЗначения <> Неопределено Тогда
				НовыйЭлемент.СписокВыбора = ДоступныйПараметр.ДоступныеЗначения;
				//НовыйЭлемент.КнопкаВыбора = ложь;
				//НовыйЭлемент.КнопкаСпискаВыбора = истина;
			КонецЕсли;
			
			Если СтрокаПараметра.ОтображатьКак = "СписокЗначение" Тогда
				НовыйЭлемент.Значение          = Новый СписокЗначений;
				НовыйЭлемент.ТипЗначения       = Новый ОписаниеТипов("СписокЗначений");
				НовыйЭлемент.ТипЗначенияСписка = ДоступныйПараметр.Тип;
			КонецЕсли;
			
			НовыйЭлемент.ЦветФонаКнопки    = ЦветФонаКнопки;
			
			Если ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиИзменениеЗначенияДинамическогоПараметра") тогда
				НовыйЭлемент.УстановитьДействие("ПриИзменении", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиИзменениеЗначенияДинамическогоПараметра);
			КонецЕсли;
			
			Если ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиНачалоВыбораЗначенияДинамическогоПараметра") тогда
				НовыйЭлемент.УстановитьДействие("НачалоВыбора", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиНачалоВыбораЗначенияДинамическогоПараметра);
			КонецЕсли;
			
			//Получить из значений
			Если ЭлементДинамическогоПараметра <> Неопределено Тогда
				// Восстановим значение
				НовыйЭлемент.Значение = ЭлементДинамическогоПараметра.Значение;
			Иначе
				// Установим значение по умолчанию
				НовыйЭлемент.Значение = Параметр.Значение;
			КонецЕсли;
			
			СтруктураЭлементовУправления.ДинамическийПараметрПолеВвода = НовыйЭлемент;
			
			Если ПоследнийЭлемент Тогда
				УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельПользователяГоризонтальная);
				НовыйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево, НовыйЭлементНадпись, ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельПользователяГоризонтальная, ГраницаЭлементаУправления.Право)
			Иначе				
				УстановитьПривязкуКПравойГранице(НовыйЭлемент, НовыйЭлементНадпись, ЭлементыФормы.ПанельПользователяГоризонтальная);
				УстановитьПривязкуКЛевойГранице(НовыйЭлемент, НовыйЭлемент, ЭлементыФормы.ПанельПользователяГоризонтальная);
			КонецЕсли;
			
			Лево = Лево + НовыйЭлемент.Ширина + 6;
			
			ПредыдущийЭлемент = НовыйЭлемент;
			
		КонецЕсли;
		
	ИначеЕсли СтрокаПараметра.ВыводитьНа = "ПраваяПанель" ИЛИ (ФормаОтчета.ЭлементыФормы.Найти("ПанельПользователяГоризонтальная") = Неопределено) И СтрокаПараметра.ВыводитьНа <> "" тогда
		
		Верх = 6;
		ЭлементыФормы        = ФормаОтчета.ЭлементыФормы;
		ШиринаПанелиЗакладки = ЭлементыФормы.ПанельЗакладок.Ширина - 15;
		НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Добавить("ДинамическийПараметр"+ Индекс + "Страница", ДоступныйПараметр.Заголовок, СтрокаПараметра.Параметр);
		ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = НоваяСтраница;
		СтруктураЭлементовУправления.СтраницаПанели = НоваяСтраница;
		
		Если СтрокаПараметра.ОтображатьКак = "ПолеВвода" Тогда
			
		Если ДоступныйПараметр.ДоступныеЗначения <> Неопределено Тогда
				НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВыбора"), "ДинамическийПараметр" + Индекс + "ПолеВвода", Истина, ЭлементыФормы.ПанельЗакладок);
			Иначе
				НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийПараметр" + Индекс + "ПолеВвода", Истина, ЭлементыФормы.ПанельЗакладок);
			КонецЕсли;
			
			НовыйЭлемент.Верх = Верх;
			НовыйЭлемент.Лево = 6;
			НовыйЭлемент.Ширина = ШиринаПанелиЗакладки - 15;
			НовыйЭлемент.АвтоОтметкаНезаполненного  = СтрокаПараметра.Заполнено;
			НовыйЭлемент.ТипЗначения = ДоступныйПараметр.Тип;
			
			Если ДоступныйПараметр.ДоступныеЗначения <> Неопределено Тогда
				НовыйЭлемент.СписокВыбора = ДоступныйПараметр.ДоступныеЗначения;
			КонецЕсли;
			
			НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
			
			Если ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиИзменениеЗначенияДинамическогоПараметра") тогда
				НовыйЭлемент.УстановитьДействие("ПриИзменении", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиИзменениеЗначенияДинамическогоПараметра);
			КонецЕсли;
			
			УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
			
			Если ЭлементДинамическогоПараметра <> Неопределено  Тогда
				// Восстановим значение
				НовыйЭлемент.Значение = ЭлементДинамическогоПараметра.Значение;
			Иначе
				// Установим значение по умолчанию
				НовыйЭлемент.Значение = Параметр.Значение;
			КонецЕсли;
			СтруктураЭлементовУправления.ДинамическийПараметрПолеВвода = НовыйЭлемент;
			
		ИначеЕсли СтрокаПараметра.ОтображатьКак = "СписокЗначение" Тогда
			
			// Добавление Табличного поля для списка
			ЭлементТабличноеПоле = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), "ДинамическийПараметр" + Индекс + "ТабличноеПоле", Истина, ЭлементыФормы.ПанельЗакладок);
			ЭлементТабличноеПоле.Лево           = 6;
			ЭлементТабличноеПоле.Верх           = Верх;
			ЭлементТабличноеПоле.Ширина         = ШиринаПанелиЗакладки - 15;
			ЭлементТабличноеПоле.Высота         = 79;
			Верх = Верх + ЭлементТабличноеПоле.Высота + 6;
			ЭлементТабличноеПоле.ТолькоПросмотр = Ложь;
			ЭлементТабличноеПоле.Шапка          = Ложь;
			ЭлементТабличноеПоле.Значение       = Новый ТаблицаЗначений;
			УстановитьПравуюПривязку(ЭлементТабличноеПоле, ЭлементыФормы.ПанельЗакладок);
			
			ЭлементТабличноеПоле.Значение.Колонки.Добавить("Значение", ДоступныйПараметр.Тип);
			НоваяКолонка                             = ЭлементТабличноеПоле.Колонки.Добавить("Значение", "");
			НоваяКолонка.Данные                      = "Значение";
			ЭлементТабличноеПоле.ГоризонтальныеЛинии = Ложь;
			
			//Получить из значений
			Если ЭлементДинамическогоПараметра <> Неопределено 
				И ТипЗнч(ЭлементДинамическогоПараметра.Значение) = Тип("СписокЗначений") Тогда
				
				// Восстановим значение списка отбора
				Для каждого ЭлементСписка Из ЭлементДинамическогоПараметра.Значение Цикл
					НоваяСтрока = ЭлементТабличноеПоле.Значение.Добавить();
					НоваяСтрока.Значение = ЭлементСписка.Значение;
				КонецЦикла;
				
			Иначе
				
				// Проверим есть ли значение по умолчанию
				Если Параметр <> Неопределено 
					И ТипЗнч(Параметр.Значение) = Тип("СписокЗначений") Тогда
					// Восстановим значение списка отбора
					Для Каждого ЭлементСписка Из Параметр.Значение Цикл
						НоваяСтрока = ЭлементТабличноеПоле.Значение.Добавить();
						НоваяСтрока.Значение = ЭлементСписка.Значение;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			СтруктураЭлементовУправления.ДинамическийПараметрТабличноеПоле = НовыйЭлемент;
			
		ИначеЕсли СтрокаПараметра.ОтображатьКак = "Переключатель" Тогда
			
			Если ДоступныйПараметр.ДоступныеЗначения <> Неопределено Тогда			
				
				ПервыйВГруппе = Истина;
				Массив = Новый Массив;
				Сч = 0;
				Для Каждого ЭлементСписка Из ДоступныйПараметр.ДоступныеЗначения Цикл
					НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Переключатель"), "ДинамическийПараметр" + Индекс + Сч + "Переключатель", Истина, ЭлементыФормы.ПанельЗакладок);
					НовыйЭлемент.Заголовок     = ?(СтрДлина(ЭлементСписка.Представление) = 0 ,Строка(ЭлементСписка.Значение), ЭлементСписка.Представление);
					НовыйЭлемент.Подсказка     = ?(СтрДлина(ЭлементСписка.Представление) = 0 ,Строка(ЭлементСписка.Значение), ЭлементСписка.Представление);
					НовыйЭлемент.ПервыйВГруппе = ПервыйВГруппе;
					//НовыйЭлемент.Данные        = СтрокаПараметра.Параметр;
					НовыйЭлемент.ТипЗначения   = ДоступныйПараметр.Тип;
					Если ПервыйВГруппе тогда
						ПервыйВГруппеЭлемент = НовыйЭлемент;
					КонецЕсли;
					ПервыйВГруппе              = Ложь;
					НовыйЭлемент.ВыбираемоеЗначение = ЭлементСписка.Значение;
					НовыйЭлемент.Лево           = 6;
					НовыйЭлемент.Ширина         = ШиринаПанелиЗакладки - 12;
					НовыйЭлемент.Верх           = Верх;
					НовыйЭлемент.Высота         = 15;
					Верх = Верх + 15 + 6;
					Сч = Сч + 1;
					Массив.Добавить(НовыйЭлемент);
					УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
				КонецЦикла;
				
				Если ЭлементДинамическогоПараметра <> Неопределено  Тогда
					// Восстановим значение
					ПервыйВГруппеЭлемент.Значение = ЭлементДинамическогоПараметра.Значение;
				Иначе
					// Установим значение по умолчанию
					ПервыйВГруппеЭлемент.Значение = Параметр.Значение;
				КонецЕсли;
				
				СтруктураЭлементовУправления.ДинамическийПараметрПереключатель = Массив;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаПараметра") И ПараметрыИсполненияОтчета.ПослеВыводаПараметра тогда
		ФормаОтчета.ПослеВыводаПараметра(СтруктураЭлементовУправления);
	КонецЕсли;
	
КонецПроцедуры

Процедура НарисоватьСтандартныйПериодНаПравойПанели(ОтчетОбъект, ФормаОтчета, ЗначенияНастроек, Параметры, ПараметрыИсполненияОтчета = Неопределено)
	
	Если НЕ Параметры.ДеревоНастроекСтандартныхСтраниц.Строки.Найти("Период").Использование Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлементовУправления = Новый Структура("
	|СтраницаПанели, 
	|ДинамическийОтборСтандартныйПериод, 
	|ДинамическийОтборСтандартныйПериодПользователя,
	|ДинамическийОтборСтандартнаяДатаНачала,
	|ДинамическийОтборСтандартнаяДатаНачалаПользователя,
	|ДинамическийОтборНадписьС,
	|ДинамическийОтборДатаНачала,
	|ДинамическийОтборНадписьПо,
	|ДинамическийОтборДатаОкончания,
	|ДинамическийОтборНадписьДата,
	|ДинамическийОтборДата");
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	
	ЦветФонаКнопки = ЦветаСтиля.ЦветФонаКнопки;
	// Закладка Стандартный Период
	ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ЗначениеПараметраКонецПериода  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	ЗначениеПараметраПериод        = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	// Стандартный период
	Если ЗначениеПараметраНачалоПериода <> Неопределено
		И ЗначениеПараметраКонецПериода <> Неопределено Тогда
		
		//НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Вставить(0, "ДинамическийОтборСтандартныйПериод", "Период");
		НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Добавить("ДинамическийОтборСтандартныйПериод", "Период");
		Количество = ЭлементыФормы.ПанельЗакладок.Страницы.Количество();
		ЭлементыФормы.ПанельЗакладок.Страницы.Сдвинуть(НоваяСтраница, -(Количество-1));
		НоваяСтраница.Раскрыта = Истина;
		СтруктураЭлементовУправления.СтраницаПанели = НоваяСтраница;
		
		ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = НоваяСтраница;
		Верх = 6;
		
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборСтандартныйПериод",, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Данные = "СтандартныйПериод";
		НовыйЭлемент.Видимость = Ложь;
		СтруктураЭлементовУправления.ДинамическийОтборСтандартныйПериод = НовыйЭлемент;
		
		// Поле выбора Стандартный период
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВыбора"), "ДинамическийОтборСтандартныйПериодПользователя",, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = 6;
		НовыйЭлемент.Ширина = 292;
		НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Строка");
		НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
		СписокВыбора = ПолучитьСписокВыбораСтандартногоПериодаПользователя(Параметры);;
		НовыйЭлемент.СписокВыбора = СписокВыбора;
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиСтандартныйПериодПользователяПриИзменении;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
		УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
		СтруктураЭлементовУправления.ДинамическийОтборСтандартныйПериодПользователя = НовыйЭлемент;
		
		// Восстанавливаем значение
		Если ЗначенияНастроек.Свойство("СтандартныйПериод") Тогда
			
			СтандартныйПериод = ЗначенияНастроек.СтандартныйПериод;
			Если СписокВыбора.НайтиПоЗначению(СтандартныйПериод.Вариант) <> Неопределено Тогда
				НовыйЭлемент.Значение = СтандартныйПериод.Вариант;
				ФормаОтчета.СтандартныйПериод = СтандартныйПериод;
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьДопустимоеЗначениеСпискаВыбора(НовыйЭлемент, ФормаОтчета.СтандартныйПериод);
		
		Верх = Верх + НовыйЭлемент.Высота + 6;
		
		// Надпись с
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтборНадписьС",, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = 6;
		НовыйЭлемент.Ширина = 6;
		НовыйЭлемент.Заголовок = "с:";
		СтруктураЭлементовУправления.ДинамическийОтборНадписьС = НовыйЭлемент;
		
		// Дата с
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборДатаНачала",, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = 20;
		НовыйЭлемент.Ширина = 80;
		НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
		НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
		НовыйЭлемент.Данные = "СтандартныйПериод.ДатаНачала";
		НовыйЭлемент.Доступность = СписокВыбора.НайтиПоЗначению(ВариантСтандартногоПериода.ПроизвольныйПериод) <> Неопределено;
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДатаСтандартногоПериодаПриИзменении;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
		СтруктураЭлементовУправления.ДинамическийОтборНадписьС = НовыйЭлемент;
		
		// Надпись по
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтборНадписьПо",, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = 110;
		НовыйЭлемент.Ширина = 6;
		НовыйЭлемент.Заголовок = "по:";
		СтруктураЭлементовУправления.ДинамическийОтборНадписьПо = НовыйЭлемент;
		
		// Дата по
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборДатаОкончания",, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = 128;
		НовыйЭлемент.Ширина = 80;
		НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
		НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
		НовыйЭлемент.Данные = "СтандартныйПериод.ДатаОкончания";
		НовыйЭлемент.Доступность = СписокВыбора.НайтиПоЗначению(ВариантСтандартногоПериода.ПроизвольныйПериод) <> Неопределено;
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДатаСтандартногоПериодаПриИзменении;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
		СтруктураЭлементовУправления.ДинамическийОтборДатаОкончания = НовыйЭлемент;
		
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Кнопка"), "ДинамическийОтборПериодаВыборПериода",, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Заголовок = "...";
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = 214;
		НовыйЭлемент.Ширина = 20;
		Действие = Новый Действие("ДействияПанелиИзменениеЗначенияДинамическогоОтбора");
		НовыйЭлемент.УстановитьДействие("Нажатие", Действие);
		
	КонецЕсли;
	
	// Стандартная дата начала
	Если ЗначениеПараметраПериод <> Неопределено Тогда
		
		//НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Вставить(0, "ДинамическийОтборСтандартнаяДатаНачала", "Период");
		НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Добавить("ДинамическийОтборСтандартнаяДатаНачала", "Период");
		Количество = ЭлементыФормы.ПанельЗакладок.Страницы.Количество();
		ЭлементыФормы.ПанельЗакладок.Страницы.Сдвинуть(НоваяСтраница, -(Количество-1));
		НоваяСтраница.Раскрыта = Истина;
		
		ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = НоваяСтраница;
		СтруктураЭлементовУправления.СтраницаПанели = НоваяСтраница;
		
		Верх = 6;
		
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборСтандартнаяДатаНачала",, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Данные = "СтандартнаяДатаНачала";
		НовыйЭлемент.Видимость = Ложь;
		СтруктураЭлементовУправления.ДинамическийОтборСтандартнаяДатаНачала = НовыйЭлемент;
		
		// Поле выбора Стандартная дата начала
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВыбора"), "ДинамическийОтборСтандартнаяДатаНачалаПользователя",, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = 6;
		НовыйЭлемент.Ширина = 292;
		НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Строка");
		НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
		СписокВыбора = ПолучитьСписокВыбораСтандартнойДатыНачалаПользователя(Параметры);
		НовыйЭлемент.СписокВыбора = СписокВыбора;
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиСтандартнаяДатаНачалаПользователяПриИзменении;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
		УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
		СтруктураЭлементовУправления.ДинамическийОтборСтандартнаяДатаНачалаПользователя = НовыйЭлемент;
		
		// Восстанавливаем значение варианта стандартной даты начала
		Если ЗначенияНастроек.Свойство("СтандартнаяДатаНачала") Тогда
			СтандартнаяДатаНачала = ЗначенияНастроек.СтандартнаяДатаНачала;
			Если СписокВыбора.НайтиПоЗначению(СтандартнаяДатаНачала.Вариант) <> Неопределено Тогда
				НовыйЭлемент.Значение = СтандартнаяДатаНачала.Вариант;
				ФормаОтчета.СтандартнаяДатаНачала = СтандартнаяДатаНачала;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьДопустимоеЗначениеСпискаВыбора(НовыйЭлемент, ФормаОтчета.СтандартнаяДатаНачала);
		
		Верх = Верх + 19 + 6;
		
		// Надпись дата
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтборНадписьДата",, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Верх = Верх + 3;
		НовыйЭлемент.Лево = 6;
		НовыйЭлемент.Ширина = 26;
		НовыйЭлемент.Заголовок = "дата:";
		СтруктураЭлементовУправления.ДинамическийОтборНадписьДата = НовыйЭлемент;
		
		// Поле ввода даты
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборДата",, ЭлементыФормы.ПанельЗакладок);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = 40;
		НовыйЭлемент.Ширина = 80;
		НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
		НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
		НовыйЭлемент.Данные = "СтандартнаяДатаНачала.Дата";
		НовыйЭлемент.Доступность = СписокВыбора.НайтиПоЗначению(ВариантСтандартнойДатыНачала.ПроизвольнаяДата) <> Неопределено;
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДатаСтандартнойДатыНачалаПриИзменении;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
		СтруктураЭлементовУправления.ДинамическийОтборДата = НовыйЭлемент;
		
		// Восстанавливаем значение
		Если ЗначенияНастроек.Свойство("СтандартнаяДатаНачала") Тогда
			СтандартнаяДатаНачала = ЗначенияНастроек.СтандартнаяДатаНачала;
			НовыйЭлемент.Значение = СтандартнаяДатаНачала.Дата;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаПериода") И ПараметрыИсполненияОтчета.ПослеВыводаПериода тогда
		ФормаОтчета.ПослеВыводаПериода(СтруктураЭлементовУправления);
	КонецЕсли;
	
КонецПроцедуры

Процедура НарисоватьЭлементУправленияТаблицейДиаграммой(ФормаОтчета, ОтчетОбъект, Индекс, СтрокаГруппировки, ЦветФонаКнопки, Группировки, ЭлементДинамическойГруппировки, ПараметрыИсполненияОтчета)
	
	СтруктураЭлементовУправления = Новый Структура("
	|СтрокаГруппировки,
	|СтраницаПанели, 
	|ДинамическаяГруппировкаНадписьСтрок, 
	|ДинамическаяГруппировкаНадписьКолонок, 
	
	|ДинамическийПараметрТабличноеПоле,
	|ДинамическийПараметрКаманднаяПанель,
	
	|ДинамическийПараметрТабличноеПолеСтрок,
	|ДинамическийПараметрКаманднаяПанельСтрок,
	
	|ДинамическийПараметрТабличноеПолеКолонок,
	|ДинамическийПараметрКаманднаяПанельКолонок");
	
	СтруктураЭлементовУправления.СтрокаГруппировки = СтрокаГруппировки;
	
	Верх = 6;
	ЭлементыФормы        = ФормаОтчета.ЭлементыФормы;
	ШиринаПанелиЗакладки = ЭлементыФормы.ПанельЗакладок.Ширина;
	НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Добавить("ДинамическаяГруппировка"+ Индекс + "Страница", СтрокаГруппировки.Представление);
	ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = НоваяСтраница;
	
	СтруктураЭлементовУправления.СтраницаПанели = НоваяСтраница;
	
	НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическаяГруппировка" + Индекс + "Надпись", Истина, ЭлементыФормы.ПанельЗакладок);
	НовыйЭлемент.Верх = Верх;
	НовыйЭлемент.Лево = 6;
	НовыйЭлемент.Ширина = ШиринаПанелиЗакладки - 15;
	НовыйЭлемент.Заголовок = СтрокаГруппировки.ПредставлениеСтрок + ":";
	Верх = Верх + НовыйЭлемент.Высота + 6;
	УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельПользователяГоризонтальная);
	//СтруктураЭлементовУправления.ДинамическийПараметрНадпись = НовыйЭлемент;
	
	// нарисовать таблицу группировки
	НовыйЭлемент                      = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), "ДинамическаяГруппировка" + Индекс + "ТабличноеПолеСтрок", Истина, ЭлементыФормы.ПанельЗакладок);
	НовыйЭлемент.Лево                 = 6;
	НовыйЭлемент.Верх                 = Верх;
	НовыйЭлемент.Ширина               = ШиринаПанелиЗакладки - 15-24-9;
	НовыйЭлемент.Высота               = 79;
	Верх                              = Верх + НовыйЭлемент.Высота + 6;
	НовыйЭлемент.ТолькоПросмотр       = Ложь;
	НовыйЭлемент.Шапка                = Ложь;
	НовыйЭлемент.Значение             = Новый ТаблицаЗначений;
	НовыйЭлемент.ГоризонтальныеЛинии  = Ложь;
	НовыйЭлемент.ВертикальныеЛинии    = Ложь;
	//НовыйЭлемент.ИзменятьСоставСтрок  = ложь;
	НовыйЭлемент.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
	НовыйЭлемент.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 0);
	НовыйЭлемент.УстановитьДействие("ПриПолученииДанных", ФормаОтчета.ДействияЭлементовФормы.ГруппировкиПриПолученииДанных);
	СтруктураЭлементовУправления.ДинамическийПараметрТабличноеПолеСтрок = НовыйЭлемент;
	УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
	
	НовыйЭлемент.Значение.Колонки.Добавить("Использование", Новый ОписаниеТипов("Булево"));
	НовыйЭлемент.Значение.Колонки.Добавить("Значение", Новый ОписаниеТипов("СписокЗначений"));
	НовыйЭлемент.Значение.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	НовыйЭлемент.Значение.Колонки.Добавить("ИспользованиеИерархии", Новый ОписаниеТипов("Булево"));
	НовыйЭлемент.Значение.Колонки.Добавить("ЗначениеИерархии", Новый ОписаниеТипов("СписокЗначений"));
	НовыйЭлемент.Значение.Колонки.Добавить("ПредставлениеИерархии", Новый ОписаниеТипов("Строка"));
	
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("ИспользованиеИерархии", "");
	НоваяКолонка.ДанныеФлажка        = "ИспользованиеИерархии";
	НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	НоваяКолонка.Ширина              = 1;
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("Использование", "");
	НоваяКолонка.ДанныеФлажка        = "Использование";
	НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	НоваяКолонка.Ширина              = 1;
	НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;
	
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("ЗначениеИерархии", "");
	НоваяКолонка.Данные              = "ЗначениеИерархии";
	НоваяКолонка.Видимость           = ложь;
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("Значение", "");
	НоваяКолонка.Данные              = "Значение";
	НоваяКолонка.Видимость           = ложь;
	НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;
	
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("ПредставлениеИерархии", "");
	НоваяКолонка.Данные              = "ПредставлениеИерархии";
	НоваяКолонка.ТолькоПросмотр      = истина;
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("Представление", "");
	НоваяКолонка.Данные              = "Представление";
	НоваяКолонка.ТолькоПросмотр      = истина;
	НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;
	
	ЭлементКоманднаяПанель          = ЭлементыФормы.Добавить(Тип("КоманднаяПанель"), "ДинамическаяГруппировка" + Индекс + "КоманднаяПанельСтрок", Истина, ЭлементыФормы.ПанельЗакладок); 
	ЭлементКоманднаяПанель.Верх     = НовыйЭлемент.Верх + 11;
	ЭлементКоманднаяПанель.Высота   = 47;
	ЭлементКоманднаяПанель.Лево     = ШиринаПанелиЗакладки - 15 - 24 + 12;
	ЭлементКоманднаяПанель.Ширина   = 24;
	ЭлементКоманднаяПанель.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
	ЭлементКоманднаяПанель.ИсточникДействий = НовыйЭлемент;
	СтруктураЭлементовУправления.ДинамическийПараметрКаманднаяПанельСтрок = ЭлементКоманднаяПанель;
	УстановитьПравуюПривязкуПолностью(ЭлементКоманднаяПанель, ЭлементыФормы.ПанельЗакладок);
	
	КнопкаВверх                   = ЭлементКоманднаяПанель.Кнопки.Добавить("ДинамическаяГруппировка" + Индекс + "КнопкаВверхСтрок", ТипКнопкиКоманднойПанели.Действие, , ФормаОтчета.ДействияЭлементовФормы.ПриНажатииНаКнопкуВверх);
	КнопкаВверх.Картинка          = БиблиотекаКартинок.мПереместитьВверх;
	КнопкаВверх.Отображение       = ОтображениеКнопкиКоманднойПанели.Картинка;
	КнопкаВниз                    = ЭлементКоманднаяПанель.Кнопки.Добавить("ДинамическаяГруппировка" + Индекс + "КнопкаВнизСтрок", ТипКнопкиКоманднойПанели.Действие, , ФормаОтчета.ДействияЭлементовФормы.ПриНажатииНаКнопкуВниз);
	КнопкаВниз.Картинка           = БиблиотекаКартинок.мПереместитьВниз;
	КнопкаВниз.Отображение        = ОтображениеКнопкиКоманднойПанели.Картинка;
	
	//Добавить строки группировки
	Если ТипЗнч(Группировки[0].Значение) = Тип("ТаблицаКомпоновкиДанных") тогда
		СтрокиГруппировки = ПолучитьЭлементыСтруктуры(Группировки[0].Значение.Строки);
	Иначе
		СтрокиГруппировки = ПолучитьЭлементыСтруктуры(Группировки[0].Значение.Точки);
	КонецЕсли;
	
	Для Каждого Группировка Из СтрокиГруппировки Цикл
		СтрокаГруп = НовыйЭлемент.Значение.Добавить();
		Представление = "";
		ИспользоватьИерархию = Ложь;
		Для каждого ПолеГруппировки Из Группировка.Значение.ПоляГруппировки.Элементы Цикл
			СтрокаГруп.Значение.Добавить(Строка(ПолеГруппировки.Поле));
			СтрокаГруп.ЗначениеИерархии.Добавить(ПолеГруппировки.ТипГруппировки);
			ИспользоватьИерархию = Ложь;
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеГруппировки.Поле, ОтчетОбъект.КомпоновщикНастроек);
			ТипыПоля = ДоступноеПоле.Тип.Типы();
			Для каждого ТипПоля из ТипыПоля Цикл
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипПоля);
				Если ОбъектМетаданных <> Неопределено И Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
					ИспользоватьИерархию = ОбъектМетаданных.Иерархический;
				КонецЕсли;
			КонецЦикла;
			Представление = Представление + ?(Представление = "", "", ", ") + ДоступноеПоле.Заголовок;
		КонецЦикла;
		СтрокаГруп.Представление         = Представление;
		Если СтрокаГруппировки["НастраиватьИерархию"] И ИспользоватьИерархию Тогда
			СтрокаГруп.ПредставлениеИерархии = "" + Представление + " (по группам)";
		КонецЕсли;
		СтрокаГруп.Использование         = Группировка.Значение.Использование;
		СтрокаГруп.ИспользованиеИерархии = ИспользоватьИерархию;
	КонецЦикла;
	
	Если ЭлементДинамическойГруппировки <> Неопределено Тогда
		ПрименитьНастройкуПользователя(НовыйЭлемент.Значение, ЭлементДинамическойГруппировки.СписокГруппировкиСтрок);
	КонецЕсли;
	
	
	// колонки
	НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическаяГруппировка" + Индекс + "НадписьКолонок", Истина, ЭлементыФормы.ПанельЗакладок);
	НовыйЭлемент.Верх = Верх;
	НовыйЭлемент.Лево = 6;
	НовыйЭлемент.Ширина = ШиринаПанелиЗакладки - 15;
	НовыйЭлемент.Заголовок = СтрокаГруппировки.ПредставлениеКолонок + ":";
	Верх = Верх + НовыйЭлемент.Высота + 6;
	УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельПользователяГоризонтальная);
	
	// нарисовать таблицу группировки
	НовыйЭлемент                      = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), "ДинамическаяГруппировка" + Индекс + "ТабличноеПолеКолонок", Истина, ЭлементыФормы.ПанельЗакладок);
	НовыйЭлемент.Лево                 = 6;
	НовыйЭлемент.Верх                 = Верх;
	НовыйЭлемент.Ширина               = ШиринаПанелиЗакладки - 15-24-9;
	НовыйЭлемент.Высота               = 79;
	Верх                              = Верх + НовыйЭлемент.Высота + 6;
	НовыйЭлемент.ТолькоПросмотр       = Ложь;
	НовыйЭлемент.Шапка                = Ложь;
	НовыйЭлемент.Значение             = Новый ТаблицаЗначений;
	НовыйЭлемент.ГоризонтальныеЛинии  = Ложь;
	НовыйЭлемент.ВертикальныеЛинии    = ложь;
	НовыйЭлемент.ИзменятьСоставСтрок  = ложь;
	НовыйЭлемент.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
	НовыйЭлемент.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 0);
	СтруктураЭлементовУправления.ДинамическийПараметрТабличноеПолеКолонок = НовыйЭлемент;
	НовыйЭлемент.УстановитьДействие("ПриПолученииДанных", ФормаОтчета.ДействияЭлементовФормы.ГруппировкиПриПолученииДанных);
	УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
	
	
	
	НовыйЭлемент.Значение.Колонки.Добавить("Использование", Новый ОписаниеТипов("Булево"));
	НовыйЭлемент.Значение.Колонки.Добавить("Значение", Новый ОписаниеТипов("СписокЗначений"));
	НовыйЭлемент.Значение.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	НовыйЭлемент.Значение.Колонки.Добавить("ИспользованиеИерархии", Новый ОписаниеТипов("Булево"));
	НовыйЭлемент.Значение.Колонки.Добавить("ЗначениеИерархии", Новый ОписаниеТипов("СписокЗначений"));
	НовыйЭлемент.Значение.Колонки.Добавить("ПредставлениеИерархии", Новый ОписаниеТипов("Строка"));
	
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("ИспользованиеИерархии", "");
	НоваяКолонка.ДанныеФлажка        = "ИспользованиеИерархии";
	НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	НоваяКолонка.Ширина              = 1;
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("Использование", "");
	НоваяКолонка.ДанныеФлажка        = "Использование";
	НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	НоваяКолонка.Ширина              = 1;
	НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;
	
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("ЗначениеИерархии", "");
	НоваяКолонка.Данные              = "ЗначениеИерархии";
	НоваяКолонка.Видимость           = Ложь;
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("Значение", "");
	НоваяКолонка.Данные              = "Значение";
	НоваяКолонка.Видимость           = Ложь;
	НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;
	
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("ПредставлениеИерархии", "");
	НоваяКолонка.Данные              = "ПредставлениеИерархии";
	НоваяКолонка.ТолькоПросмотр      = Истина;
	НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("Представление", "");
	НоваяКолонка.Данные              = "Представление";
	НоваяКолонка.ТолькоПросмотр      = Истина;
	НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;
	
	ЭлементКоманднаяПанель          = ЭлементыФормы.Добавить(Тип("КоманднаяПанель"), "ДинамическаяГруппировка" + Индекс + "КоманднаяПанельКолонок", Истина, ЭлементыФормы.ПанельЗакладок); 
	ЭлементКоманднаяПанель.Верх     = НовыйЭлемент.Верх + 11;
	ЭлементКоманднаяПанель.Высота   = 47;
	ЭлементКоманднаяПанель.Лево     = ШиринаПанелиЗакладки - 15 - 24 + 12;
	ЭлементКоманднаяПанель.Ширина   = 24;
	ЭлементКоманднаяПанель.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
	ЭлементКоманднаяПанель.ИсточникДействий = НовыйЭлемент;
	УстановитьПравуюПривязкуПолностью(ЭлементКоманднаяПанель, ЭлементыФормы.ПанельЗакладок);
	СтруктураЭлементовУправления.ДинамическийПараметрКаманднаяПанельКолонок = ЭлементКоманднаяПанель;
	
	КнопкаВверх                   = ЭлементКоманднаяПанель.Кнопки.Добавить("ДинамическаяГруппировка" + Индекс + "КнопкаВверхКолонок", ТипКнопкиКоманднойПанели.Действие, , ФормаОтчета.ДействияЭлементовФормы.ПриНажатииНаКнопкуВверх);
	КнопкаВверх.Картинка          = БиблиотекаКартинок.мПереместитьВверх;
	КнопкаВверх.Отображение       = ОтображениеКнопкиКоманднойПанели.Картинка;
	КнопкаВниз                    = ЭлементКоманднаяПанель.Кнопки.Добавить("ДинамическаяГруппировка" + Индекс + "КнопкаВнизКолонок", ТипКнопкиКоманднойПанели.Действие, , ФормаОтчета.ДействияЭлементовФормы.ПриНажатииНаКнопкуВниз);
	КнопкаВниз.Картинка           = БиблиотекаКартинок.мПереместитьВниз;
	КнопкаВниз.Отображение        = ОтображениеКнопкиКоманднойПанели.Картинка;
	
	//Добавить строки группировки
	Если ТипЗнч(Группировки[0].Значение) = Тип("ТаблицаКомпоновкиДанных") тогда
		СтрокиГруппировки = ПолучитьЭлементыСтруктуры(Группировки[0].Значение.Колонки);
	Иначе
		СтрокиГруппировки = ПолучитьЭлементыСтруктуры(Группировки[0].Значение.Серии);
	КонецЕсли;
	Для Каждого Группировка Из СтрокиГруппировки Цикл
		СтрокаГруп = НовыйЭлемент.Значение.Добавить();
		Представление = "";
		ИспользоватьИерархию = Ложь;
		Для Каждого ПолеГруппировки Из Группировка.Значение.ПоляГруппировки.Элементы Цикл
			СтрокаГруп.Значение.Добавить(Строка(ПолеГруппировки.Поле));
			СтрокаГруп.ЗначениеИерархии.Добавить(ПолеГруппировки.ТипГруппировки);
			ИспользоватьИерархию = Ложь;
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеГруппировки.Поле, ОтчетОбъект.КомпоновщикНастроек);
			ТипыПоля = ДоступноеПоле.Тип.Типы();
			Для Каждого ТипПоля Из ТипыПоля Цикл
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипПоля);
				Если ОбъектМетаданных <> Неопределено И Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
					ИспользоватьИерархию = ОбъектМетаданных.Иерархический;
				КонецЕсли;
			КонецЦикла;
			Представление = Представление + ?(Представление = "", "", ", ") + ДоступноеПоле.Заголовок;
		КонецЦикла;
		СтрокаГруп.Представление         = Представление;
		Если СтрокаГруппировки["НастраиватьИерархию"] И ИспользоватьИерархию Тогда
			СтрокаГруп.ПредставлениеИерархии = "" + Представление + " (по группам)";
		КонецЕсли;
		СтрокаГруп.Использование         = Группировка.Значение.Использование;
		СтрокаГруп.ИспользованиеИерархии = ИспользоватьИерархию;
	КонецЦикла;
	
	Если ЭлементДинамическойГруппировки <> Неопределено Тогда
		ПрименитьНастройкуПользователя(НовыйЭлемент.Значение, ЭлементДинамическойГруппировки.СписокГруппировкиКолонок);
	КонецЕсли;
	
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаГруппировки") И ПараметрыИсполненияОтчета.ПослеВыводаГруппировки Тогда
		ФормаОтчета.ПослеВыводаГруппировки(СтруктураЭлементовУправления);
	КонецЕсли;
	
КонецПроцедуры

Процедура НарисоватьЭлементУправленияГруппировокой(ФормаОтчета, ОтчетОбъект, Индекс, СтрокаГруппировки, ЦветФонаКнопки, Группировки, ЭлементДинамическойГруппировки, ПараметрыИсполненияОтчета)
	
	СтруктураЭлементовУправления = Новый Структура("
	|СтрокаГруппировки,
	|СтраницаПанели, 
	|ДинамическаяГруппировкаНадписьСтрок, 
	|ДинамическаяГруппировкаНадписьКолонок, 
	
	|ДинамическийПараметрТабличноеПоле,
	|ДинамическийПараметрКаманднаяПанель,
	
	|ДинамическийПараметрТабличноеПолеСтрок,
	|ДинамическийПараметрКаманднаяПанельСтрок,
	
	|ДинамическийПараметрТабличноеПолеКолонок,
	|ДинамическийПараметрКаманднаяПанельКолонок");
	
	СтруктураЭлементовУправления.СтрокаГруппировки = СтрокаГруппировки;
	
	Верх = 6;
	ЭлементыФормы        = ФормаОтчета.ЭлементыФормы;
	ШиринаПанелиЗакладки = ЭлементыФормы.ПанельЗакладок.Ширина-15;
	НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Добавить("ДинамическаяГруппировка"+ Индекс + "Страница", СтрокаГруппировки.Представление);
	ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = НоваяСтраница;
	СтруктураЭлементовУправления.СтраницаПанели = НоваяСтраница;
	
	// нарисовать таблицу группировки
	ЭлементТабличноеПоле                = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), "ДинамическаяГруппировка" + Индекс + "ТабличноеПоле", Истина, ЭлементыФормы.ПанельЗакладок);
	ЭлементТабличноеПоле.Лево           = 6;
	ЭлементТабличноеПоле.Верх           = Верх;
	ЭлементТабличноеПоле.Ширина         = ШиринаПанелиЗакладки - 18 -24 ;
	ЭлементТабличноеПоле.Высота         = 79;
	Верх                                = Верх + ЭлементТабличноеПоле.Высота + 6;
	ЭлементТабличноеПоле.ТолькоПросмотр = Ложь;
	ЭлементТабличноеПоле.Шапка          = Ложь;
	ЭлементТабличноеПоле.Значение       = Новый ТаблицаЗначений;
	ЭлементТабличноеПоле.ГоризонтальныеЛинии = Ложь;
	ЭлементТабличноеПоле.ВертикальныеЛинии   = ложь;
	ЭлементТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
	ЭлементТабличноеПоле.ИзменятьСоставСтрок  = ложь;
	ЭлементТабличноеПоле.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 0);
	СтруктураЭлементовУправления.ДинамическийПараметрТабличноеПоле = ЭлементТабличноеПоле;
	ЭлементТабличноеПоле.УстановитьДействие("ПриПолученииДанных", ФормаОтчета.ДействияЭлементовФормы.ГруппировкиПриПолученииДанных);
	
	УстановитьПравуюПривязку(ЭлементТабличноеПоле, ЭлементыФормы.ПанельЗакладок);
	
	ЭлементТабличноеПоле.Значение.Колонки.Добавить("Использование", Новый ОписаниеТипов("Булево"));
	ЭлементТабличноеПоле.Значение.Колонки.Добавить("Значение", Новый ОписаниеТипов("СписокЗначений"));
	ЭлементТабличноеПоле.Значение.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ЭлементТабличноеПоле.Значение.Колонки.Добавить("ИспользованиеИерархии", Новый ОписаниеТипов("Булево"));
	ЭлементТабличноеПоле.Значение.Колонки.Добавить("ЗначениеИерархии", Новый ОписаниеТипов("СписокЗначений"));
	ЭлементТабличноеПоле.Значение.Колонки.Добавить("ПредставлениеИерархии", Новый ОписаниеТипов("Строка"));
	
	НоваяКолонка                     = ЭлементТабличноеПоле.Колонки.Добавить("ИспользованиеИерархии", "");
	НоваяКолонка.ДанныеФлажка        = "ИспользованиеИерархии";
	НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	НоваяКолонка.Ширина              = 1;
	НоваяКолонка                     = ЭлементТабличноеПоле.Колонки.Добавить("Использование", "");
	НоваяКолонка.ДанныеФлажка        = "Использование";
	НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	НоваяКолонка.Ширина              = 1;
	НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;
	
	НоваяКолонка                     = ЭлементТабличноеПоле.Колонки.Добавить("ЗначениеИерархии", "");
	НоваяКолонка.Данные              = "ЗначениеИерархии";
	НоваяКолонка.Видимость           = Ложь;
	НоваяКолонка                     = ЭлементТабличноеПоле.Колонки.Добавить("Значение", "");
	НоваяКолонка.Данные              = "Значение";
	НоваяКолонка.Видимость           = Ложь;
	НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;
	
	НоваяКолонка                     = ЭлементТабличноеПоле.Колонки.Добавить("ПредставлениеИерархии", "");
	НоваяКолонка.Данные              = "ПредставлениеИерархии";
	НоваяКолонка.ТолькоПросмотр      = Истина;
	НоваяКолонка                     = ЭлементТабличноеПоле.Колонки.Добавить("Представление", "");
	НоваяКолонка.Данные              = "Представление";
	НоваяКолонка.ТолькоПросмотр      = Истина;
	НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;
	
	//	НоваяКолонка.ЭлементУправления.УстановитьДействие("НачалоВыбора", ФормаОтчета.ДействияЭлементовФормы.ПриВыбореПоляГруппировки);
	
	ЭлементКоманднаяПанель          = ЭлементыФормы.Добавить(Тип("КоманднаяПанель"), "ДинамическаяГруппировка" + Индекс + "КоманднаяПанель", Истина, ЭлементыФормы.ПанельЗакладок); 
	ЭлементКоманднаяПанель.Верх     = 19;
	ЭлементКоманднаяПанель.Высота   = 47;
	ЭлементКоманднаяПанель.Лево     = ШиринаПанелиЗакладки - 30;
	ЭлементКоманднаяПанель.Ширина   = 24;
	ЭлементКоманднаяПанель.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
	ЭлементКоманднаяПанель.ИсточникДействий = ЭлементТабличноеПоле;
	УстановитьПравуюПривязкуПолностью(ЭлементКоманднаяПанель, ЭлементыФормы.ПанельЗакладок);
	СтруктураЭлементовУправления.ДинамическийПараметрКаманднаяПанель = ЭлементКоманднаяПанель;
	
	КнопкаВверх                   = ЭлементКоманднаяПанель.Кнопки.Добавить("ДинамическаяГруппировка" + Индекс + "КнопкаВверх", ТипКнопкиКоманднойПанели.Действие, , ФормаОтчета.ДействияЭлементовФормы.ПриНажатииНаКнопкуВверх);
	КнопкаВверх.Картинка          = БиблиотекаКартинок.мПереместитьВверх;
	КнопкаВверх.Отображение       = ОтображениеКнопкиКоманднойПанели.Картинка;
	КнопкаВниз                    = ЭлементКоманднаяПанель.Кнопки.Добавить("ДинамическаяГруппировка" + Индекс + "КнопкаВниз", ТипКнопкиКоманднойПанели.Действие, , ФормаОтчета.ДействияЭлементовФормы.ПриНажатииНаКнопкуВниз);
	КнопкаВниз.Картинка           = БиблиотекаКартинок.мПереместитьВниз;
	КнопкаВниз.Отображение        = ОтображениеКнопкиКоманднойПанели.Картинка;
	
	//СтруктураЭлементовУправления.ДинамическийПараметрТабличноеПоле = НовыйЭлемент;
	
	//Добавить строки группировки
	Для Каждого Группировка Из Группировки Цикл
		СтрокаГруп = ЭлементТабличноеПоле.Значение.Добавить();
		Представление = "";
		ИспользоватьИерархию = Ложь;
		Для Каждого ПолеГруппировки Из Группировка.Значение.ПоляГруппировки.Элементы Цикл
			СтрокаГруп.Значение.Добавить(Строка(ПолеГруппировки.Поле));
			СтрокаГруп.ЗначениеИерархии.Добавить(ПолеГруппировки.ТипГруппировки);
			ИспользоватьИерархию = Ложь;
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеГруппировки.Поле, ОтчетОбъект.КомпоновщикНастроек);
			ТипыПоля = ДоступноеПоле.Тип.Типы();
			Для Каждого ТипПоля Из ТипыПоля Цикл
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипПоля);
				Если ОбъектМетаданных <> Неопределено И Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
					ИспользоватьИерархию = ОбъектМетаданных.Иерархический;
				КонецЕсли;
			КонецЦикла;
			Представление = Представление + ?(Представление = "", "", ", ") + ДоступноеПоле.Заголовок;
		КонецЦикла;
		СтрокаГруп.Представление         = Представление;
		Если СтрокаГруппировки["НастраиватьИерархию"] И ИспользоватьИерархию Тогда
			СтрокаГруп.ПредставлениеИерархии = "" + Представление + " (по группам)";
		КонецЕсли;
		СтрокаГруп.Использование         = Группировка.Значение.Использование;
		СтрокаГруп.ИспользованиеИерархии = Группировка.Значение.Использование И ИспользоватьИерархию;
	КонецЦикла;
	
	Если ЭлементДинамическойГруппировки <> Неопределено Тогда
		ПрименитьНастройкуПользователя(ЭлементТабличноеПоле.Значение, ЭлементДинамическойГруппировки.СписокГруппировки);
	КонецЕсли;
	
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаГруппировки") И ПараметрыИсполненияОтчета.ПослеВыводаГруппировки Тогда
		ФормаОтчета.ПослеВыводаГруппировки(СтруктураЭлементовУправления);
	КонецЕсли;
	
КонецПроцедуры

Процедура НарисоватьПериодПолемВыбора(ОтчетОбъект, ФормаОтчета, ЗначенияНастроек, Параметры, Лево, ЕстьПериодНаГорПанели)
	
	Если НЕ Параметры.ДеревоНастроекСтандартныхСтраниц.Строки.Найти("Период").Использование Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИсполненияОтчета = Неопределено;
	ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
	
	Если ПараметрыИсполненияОтчета = Неопределено ИЛИ НЕ ПараметрыИсполненияОтчета.Свойство("МинимальныйПериодОтчета") тогда
		Возврат;
	КонецЕсли;
	
	МинимальныйПериодОтчета = ПараметрыИсполненияОтчета.МинимальныйПериодОтчета;
	
	ЭлементыФормы 		= ФормаОтчета.ЭлементыФормы;
	КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	
	ЦветФонаКнопки = ЦветаСтиля.ЦветФонаКнопки;
	
	// Закладка Стандартный Период
	ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ЗначениеПараметраКонецПериода  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Лево = 0;
	
	// Стандартный период
	Если ЗначениеПараметраНачалоПериода <> Неопределено
		И ЗначениеПараметраКонецПериода <> Неопределено Тогда
		
		//	   	Панель = Неопределено;
		ЭлементыФормы.ПанельПользователяГоризонтальная.ТекущаяСтраница = ЭлементыФормы.ПанельПользователяГоризонтальная.Страницы.ГоризонтальныеОтборы;
		Панель = ЭлементыФормы.ПанельПользователяГоризонтальная;
		
		Верх = 6;
		
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборСтандартныйПериод",, Панель);
		НовыйЭлемент.Данные = "СтандартныйПериод";
		НовыйЭлемент.Видимость = Ложь;
		
		// Поле выбора Стандартный период
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВыбора"), "ДинамическийОтборСтандартныйПериодПользователя",, Панель);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = Лево;
		НовыйЭлемент.Ширина = 200;
		НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Строка");
		НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
		//НовыйЭлемент.РедактированиеТекста = ложь;
		СписокВыбора = ПолучитьСписокВыбораСтандартногоПериодаПользователя(Параметры);;
		НовыйЭлемент.СписокВыбора = СписокВыбора;
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиСтандартныйПериодПользователяПриИзменении;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
		//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
		
		// Восстанавливаем значение
		Если ЗначенияНастроек.Свойство("СтандартныйПериод") Тогда
			СтандартныйПериод = ЗначенияНастроек.СтандартныйПериод;
			Если СписокВыбора.НайтиПоЗначению(СтандартныйПериод.Вариант) <> Неопределено Тогда
				НовыйЭлемент.Значение = СтандартныйПериод.Вариант;
				ФормаОтчета.СтандартныйПериод = СтандартныйПериод;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьДопустимоеЗначениеСпискаВыбора(НовыйЭлемент, ФормаОтчета.СтандартныйПериод);
		
		//Верх = Верх + НовыйЭлемент.Высота + 6;
		Лево = Лево + НовыйЭлемент.Ширина + 6;
		
		// Надпись с
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтборНадписьС",, Панель);
		НовыйЭлемент.Верх = Верх+2;
		НовыйЭлемент.Лево = Лево;
		НовыйЭлемент.Ширина = 40;
		НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
		НовыйЭлемент.Заголовок = "период:";
		//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
		
		Лево = Лево + НовыйЭлемент.Ширина + 6;
		
		// Дата с
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборПериодВыбор",, Панель);
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = Лево;
		НовыйЭлемент.КнопкаВыбора = Ложь;
		НовыйЭлемент.Ширина = 130;
		НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Строка");
		НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;
		НовыйЭлемент.Данные = "";
		НовыйЭлемент.КнопкаСпискаВыбора = Истина;
		
		НовыйЭлемент.Значение = ПолучитьПредставлениеПериода(ФормаОтчета.СтандартныйПериод.ДатаНачала, ФормаОтчета.СтандартныйПериод.ДатаОкончания, МинимальныйПериодОтчета); 
		
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДинамическийОтборПериодВыборПриИзменении;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);
		
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДинамическийОтборПериодВыборПриНачалеВыбораИзСписка;
		НовыйЭлемент.УстановитьДействие("НачалоВыбораИзСписка", Действие);
		
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДинамическийОтборПериодВыборАвтоПодборТекста;
		НовыйЭлемент.УстановитьДействие("АвтоПодборТекста", Действие);
		
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДинамическийОтборПериодВыборОчистка;
		НовыйЭлемент.УстановитьДействие("Очистка", Действие);
		
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДинамическийОтборПериодВыборОкончаниеВводаТекста;
		НовыйЭлемент.УстановитьДействие("ОкончаниеВводаТекста", Действие);
		
		Лево = Лево + НовыйЭлемент.Ширина + 6;
		ЕстьПериодНаГорПанели = Истина;
		
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Кнопка"), "ДинамическийОтборПериодаВыборПериода",, Панель);
		НовыйЭлемент.Заголовок = "...";
		НовыйЭлемент.Верх = Верх;
		НовыйЭлемент.Лево = Лево;
		НовыйЭлемент.Ширина = 15;
		НовыйЭлемент.Высота = 19;
		НовыйЭлемент.Подсказка = "Выбор произвольного периода";
		Лево = Лево + НовыйЭлемент.Ширина + 6;
		
		Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиИзменениеЗначенияДинамическогоОтбора;
		НовыйЭлемент.УстановитьДействие("Нажатие", Действие);
	
	КонецЕсли;
	
	Если ЗначениеПараметраНачалоПериода <> Неопределено	И ЗначениеПараметраКонецПериода <> Неопределено Тогда
		Лево = Лево + 16;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКонецПериода(ДатаНачала, МинимальныйПериод)
	
	Если ВРег(МинимальныйПериод) = "МЕСЯЦ" Тогда
		Возврат КонецМесяца(ДатаНачала);
	ИначеЕсли ВРег(МинимальныйПериод) = "КВАРТАЛ" Тогда
		Возврат КонецКвартала(ДатаНачала);
	ИначеЕсли ВРег(МинимальныйПериод) = "ГОД" Тогда
		Возврат КонецГода(ДатаНачала);
	КонецЕсли;
	
КонецФункции

Функция СписокМесяцевПоСтроке(Текст)
	
	СписокМесяцев = Новый СписокЗначений;
	Месяцы = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции

Функция СписокКварталовПоСтроке(Текст)
	
	СписокМесяцев = Новый СписокЗначений;
	Кварталы = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	Для Счетчик = 1 По 4 Цикл
		Представление = "" + Счетчик + "квартал";
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = "" + Счетчик + "кв";
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Кварталы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Кварталы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции

Функция ДатаКакПериодПодобратьДатуПоТексту(Текст, ДатаПоТексту = Неопределено, МинимальныйПериод) Экспорт
	
	СписокВозврата = Новый СписокЗначений;
	ТекущийГод = Год(ТекущаяДата());
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат СписокВозврата;
	КонецЕсли;
	Если Найти(Текст, ".") <> 0 Тогда
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, ".");
	ИначеЕсли Найти(Текст, ",") <> 0 Тогда
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, ",");
	ИначеЕсли Найти(Текст, "-") <> 0 Тогда
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "-");
	ИначеЕсли Найти(Текст, "/") <> 0 Тогда
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "/");
	ИначеЕсли Найти(Текст, "\") <> 0 Тогда
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "\");
	Иначе
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, " ");
	КонецЕсли;
	
	Если Подстроки.Количество() = 1 Тогда
		
		Если ВРег(МинимальныйПериод) = "МЕСЯЦ" тогда
			// единственное слово - пытаемся получить месяц
			Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Текст) Тогда
				МесяцЧислом = Число(Текст);
				Если МесяцЧислом >= 1 и МесяцЧислом <=12 Тогда
					ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
					Если СтрДлина(Текст) = 1 Тогда
						СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
					Иначе
						СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
					КонецЕсли;
				Иначе
					Возврат СписокВозврата;
				КонецЕсли;                
			Иначе
				СписокМесяцев = СписокМесяцевПоСтроке(Текст);
				Для Каждого Месяц Из СписокМесяцев Цикл
					ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гг'"));
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ВРег(МинимальныйПериод) = "КВАРТАЛ" Тогда
			Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Текст) Тогда
				КварталЧислом = Число(Текст);
				Если КварталЧислом >= 1 и КварталЧислом <= 4 Тогда
					ДатаПоТексту = Дата(ТекущийГод, (КварталЧислом-1)*3 + 1, 1);
					СписокВозврата.Добавить("" + КварталЧислом + " квартал " + Формат(ТекущийГод, "ЧГ=0"));
				Иначе
					Возврат СписокВозврата;
				КонецЕсли;                
			Иначе
				СписокКварталов = СписокКварталовПоСтроке(Текст);
				Для Каждого Квартал Из СписокКварталов Цикл
					ДатаПоТексту = Дата(ТекущийГод, Квартал*3 - 2, 1);
					СписокВозврата.Добавить("" + Квартал + " квартал " + Формат(ТекущийГод, "ЧГ=0"));
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ВРег(МинимальныйПериод) = "ГОД" Тогда
			Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Текст) Тогда
				ГодЧислом = Число(Текст);
				ГодБезСтолетия = ТекущийГод - Цел(ТекущийГод/100)*100;
				Если ГодЧислом >= 0 и ГодЧислом <=9 Тогда
					Если ГодЧислом <= ГодБезСтолетия  Тогда
						Год = Цел(ТекущийГод/100)*100 + ГодЧислом;
					Иначе
						Год = Цел(ТекущийГод/10)*10 + ГодЧислом;
					КонецЕсли;
					ДатаПоТексту = Дата(Год, 1, 1);
					СписокВозврата.Добавить(Формат(ТекущийГод, "ЧГ=0"));
				ИначеЕсли ГодЧислом >= 10 и ГодЧислом <=99 Тогда
					Если ГодЧислом >= ГодБезСтолетия-10 И ГодЧислом <= ГодБезСтолетия + 15 Тогда
						Год = Цел(ТекущийГод/100)*100 + ГодЧислом;
					Иначе
						Год = (Цел(ТекущийГод/100)-1)*100 + ГодЧислом;
					КонецЕсли;
					ДатаПоТексту = Дата(Год, 1, 1);
					СписокВозврата.Добавить(Формат(ТекущийГод, "ЧГ=0"));
				Иначе
					Возврат СписокВозврата;
				КонецЕсли;                
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Подстроки.Количество() = 2 Тогда
		Если ВРег(МинимальныйПериод) = "МЕСЯЦ" Тогда
			// два слова - первое считаем месяцем, второе - годом
			Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
				Если ПустаяСтрока(Подстроки[1]) Тогда
					ГодЧислом = 0;
					Подстроки[1] = "0";
					ТекстВозврата = Текст + "0";
				Иначе
					ГодЧислом = Число(Подстроки[1]);
					ТекстВозврата = "";
				КонецЕсли;
				Если ГодЧислом > 3000 Тогда
					Возврат СписокВозврата;
				КонецЕсли;
				Если СтрДлина(Подстроки[1]) <= 1 Тогда
					ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
					СтрокаФорматированияГода = "г";
				ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
					ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
					СтрокаФорматированияГода = "гг";
				ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
					ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
					СтрокаФорматированияГода = "гггг";
				КонецЕсли;                    
			Иначе
				// второе слово может быть только годом
				Возврат СписокВозврата;
			КонецЕсли;                
			Если ЗначениеЗаполнено(Подстроки[0]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
				МесяцЧислом = Число(Подстроки[0]);
				Если МесяцЧислом >= 1 и МесяцЧислом <= 12 Тогда
					// если "правильный" месяц и год
					ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
					СписокВозврата.Добавить(ТекстВозврата);
				Иначе
					Возврат СписокВозврата;
				КонецЕсли;                
			Иначе
				СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
				Если СписокМесяцев.Количество() = 1 Тогда
					ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
					СписокВозврата.Добавить("");
				Иначе
					Для Каждого Месяц Из СписокМесяцев Цикл
						ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
						СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гг'"));
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(МинимальныйПериод) = "КВАРТАЛ" Тогда
			// два слова - первое считаем месяцем, второе - годом
			Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
				Если ПустаяСтрока(Подстроки[1]) Тогда
					ГодЧислом = 0;
					Подстроки[1] = "0";
					ТекстВозврата = Текст + "0";
				Иначе
					ГодЧислом = Число(Подстроки[1]);
					ТекстВозврата = "";
				КонецЕсли;
				Если ГодЧислом > 3000 Тогда
					Возврат СписокВозврата;
				КонецЕсли;
				Если СтрДлина(Подстроки[1]) <= 1 Тогда
					ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
					СтрокаФорматированияГода = "г";
				ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
					ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
					СтрокаФорматированияГода = "гг";
				ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
					ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
					СтрокаФорматированияГода = "гггг";
				КонецЕсли;                    
			Иначе
				// Если второе не не содержит первой буквы к и строка то ввели что-то непонятное
				Если Найти(ВРЕГ(Подстроки[1]),"К") <> 1 Тогда
					Возврат СписокВозврата;
				КонецЕсли;
			КонецЕсли;                
			Если ЗначениеЗаполнено(Подстроки[0]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
				КварталЧислом = Число(Подстроки[0]);
				Если КварталЧислом >= 1 и КварталЧислом <= 4 Тогда
					// если "правильный" месяц и год
					ДатаПоТексту = Дата(ГодЧислом, КварталЧислом*3 - 2, 1);
					СписокВозврата.Добавить(ТекстВозврата);
				Иначе
					Возврат СписокВозврата;
				КонецЕсли;                
			Иначе
				СписокКварталов = СписокКварталовПоСтроке(Подстроки[0]);
				Если СписокКварталов.Количество() = 1 Тогда
					ДатаПоТексту = Дата(ГодЧислом, СписокКварталов[0], 1);
					СписокВозврата.Добавить("");
				Иначе
					Для Каждого Квартал Из СписокКварталов Цикл
						ДатаПоТексту = Дата(ГодЧислом, Квартал*3-2, 1);
						СписокВозврата.Добавить("" + Квартал + " квартал " + Формат(ГодЧислом, "ЧГ=0"));
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Подстроки.Количество() = 3 Тогда
		Если ВРЕГ(МинимальныйПериод) = "КВАРТАЛ" Тогда
			// три слова - первое считаем квартал, второе - "квартал", третье - годом
			Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[2]) Тогда
				Если ПустаяСтрока(Подстроки[2]) Тогда
					ГодЧислом = 0;
					Подстроки[2] = "0";
					ТекстВозврата = Текст + "0";
				Иначе
					ГодЧислом = Число(Подстроки[2]);
					ТекстВозврата = "";
				КонецЕсли;
				Если ГодЧислом > 3000 Тогда
					Возврат СписокВозврата;
				КонецЕсли;
				Если СтрДлина(Подстроки[2]) <= 1 Тогда
					ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[2]);
					СтрокаФорматированияГода = "г";
				ИначеЕсли СтрДлина(Подстроки[2]) = 2 Тогда
					ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[2]);
					СтрокаФорматированияГода = "гг";
				ИначеЕсли СтрДлина(Подстроки[2]) = 3 Тогда
					ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[2]);
					СтрокаФорматированияГода = "гггг";
				КонецЕсли;                    
			Иначе
				Возврат СписокВозврата;
			КонецЕсли; 
			
			Если Найти(ВРЕГ(Подстроки[1]),"К") <> 1 Тогда
				Возврат СписокВозврата;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Подстроки[0]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
				КварталЧислом = Число(Подстроки[0]);
				Если КварталЧислом >= 1 И КварталЧислом <= 4 Тогда
					// если "правильный" месяц и год
					ДатаПоТексту = Дата(ГодЧислом, КварталЧислом*3 - 2, 1);
					СписокВозврата.Добавить(ТекстВозврата);
				Иначе
					Возврат СписокВозврата;
				КонецЕсли;                
			Иначе
				СписокКварталов = СписокКварталовПоСтроке(Подстроки[0]);
				Если СписокКварталов.Количество() = 1 Тогда
					ДатаПоТексту = Дата(ГодЧислом, СписокКварталов[0], 1);
					СписокВозврата.Добавить("");
				Иначе
					Для Каждого Квартал Из СписокКварталов Цикл
						ДатаПоТексту = Дата(ГодЧислом, Квартал*3 - 2, 1);
						СписокВозврата.Добавить("" + Квартал + " квартал " + Формат(ГодЧислом, "ЧГ=0"));
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

Процедура ДатаКакПериодАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка, МинимальныйПериодОтчета)
	
	Список = ДатаКакПериодПодобратьДатуПоТексту(Текст, , МинимальныйПериодОтчета);
	Если Список.Количество() = 1 Тогда
		ТекстАвтоПодбора = Список[0].Значение;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ДатаКакПериодОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка, МинимальныйПериодОтчета)
	
	Список = ДатаКакПериодПодобратьДатуПоТексту(Текст, , МинимальныйПериодОтчета);
	Если Список.Количество() = 1 Тогда
		Значение = Текст;
	Иначе
		Значение = Список;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура НачалоВыбораИзСпискаПредставленияПериода(Элемент, СтандартнаяОбработка, Период, ЭтаФорма, МинимальныйПериод, НачальноеЗначение = Неопределено)
	
	СтандартнаяОбработка = Ложь;
	
	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = Период;
	КонецЕсли; 
	
	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	Если ВРЕГ(МинимальныйПериод) = "ГОД" тогда
		НачалоПрошлогоГода = НачалоГода(ДобавитьМесяц(НачалоТекущегоГода, -36))-1;
		СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода-1, "ДФ='yyyy'") + "..."));
	Иначе	
		НачалоПрошлогоГода = КонецГода(НачалоТекущегоГода - 1);
		СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	КонецЕсли;
		
	НачалоМесяцаЗаполнения = НачалоПрошлогоГода+1;
	ЭлементПоУмолчанию = Неопределено;
	
	Если ВРЕГ(МинимальныйПериод) = "МЕСЯЦ" Тогда
		Для а = 1 По 12 Цикл
			ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоМесяцаЗаполнения, ПолучитьПредставлениеПериода(НачалоМесяцаЗаполнения, , МинимальныйПериод));
			Если НачальноеЗначение = НачалоМесяцаЗаполнения Тогда
				ЭлементПоУмолчанию = ДобавленныйЭлемент;
			КонецЕсли; 
			НачалоМесяцаЗаполнения = ДобавитьМесяц(НачалоМесяцаЗаполнения, 1);
		КонецЦикла;
		НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	ИначеЕсли ВРЕГ(МинимальныйПериод) = "КВАРТАЛ" Тогда
		Для а = 1 По 4 Цикл
			ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоМесяцаЗаполнения, ПолучитьПредставлениеПериода(НачалоМесяцаЗаполнения, , МинимальныйПериод));
			Если НачальноеЗначение = НачалоМесяцаЗаполнения Тогда
				ЭлементПоУмолчанию = ДобавленныйЭлемент;
			КонецЕсли; 
			НачалоМесяцаЗаполнения = ДобавитьМесяц(НачалоМесяцаЗаполнения, 3);
		КонецЦикла;
		НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	ИначеЕсли ВРЕГ(МинимальныйПериод) = "ГОД" Тогда
		Для а = 1 По 6 Цикл
			ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоМесяцаЗаполнения, ПолучитьПредставлениеПериода(НачалоМесяцаЗаполнения, , МинимальныйПериод));
			Если НачальноеЗначение = НачалоМесяцаЗаполнения Тогда
				ЭлементПоУмолчанию = ДобавленныйЭлемент;
			КонецЕсли; 
			НачалоМесяцаЗаполнения = ДобавитьМесяц(НачалоМесяцаЗаполнения, 12);
		КонецЦикла;
		НачалоСледующегоГода = КонецГода(ДобавитьМесяц(НачалоМесяцаЗаполнения, -12)) + 1;
	КонецЕсли;
	
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));
	
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент, ЭлементПоУмолчанию);
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли ВРЕГ(МинимальныйПериод) = "ГОД" Тогда
		Если  Год(ВыбранныйЭлемент.Значение) = Год(НачалоПрошлогоГода) Тогда
			НачалоВыбораИзСпискаПредставленияПериода(Элемент, СтандартнаяОбработка, Период, ЭтаФорма, МинимальныйПериод, ДобавитьМесяц(ВыбранныйЭлемент.Значение, -24));
			Возврат;
		ИначеЕсли Год(ВыбранныйЭлемент.Значение) = Год(НачалоСледующегоГода) Тогда
			НачалоВыбораИзСпискаПредставленияПериода(Элемент, СтандартнаяОбработка, Период, ЭтаФорма, МинимальныйПериод, ДобавитьМесяц(ВыбранныйЭлемент.Значение, +36));
			Возврат;
		КонецЕсли;
	Иначе
		Если Год(ВыбранныйЭлемент.Значение) <> Год(НачальноеЗначение) Тогда
			НачалоВыбораИзСпискаПредставленияПериода(Элемент, СтандартнаяОбработка, Период, ЭтаФорма, МинимальныйПериод, ВыбранныйЭлемент.Значение);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Период           = ВыбранныйЭлемент.Значение;
	Элемент.Значение = ПолучитьПредставлениеПериода(Период, , МинимальныйПериод);
	
КонецПроцедуры

Процедура ДействияПанелиДинамическийОтборПериодВыборПриИзменении(ФормаОтчета, Элемент) Экспорт
	
	ПараметрыИсполненияОтчета = Неопределено;
	ПараметрыИсполненияОтчета = ФормаОтчета.ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
	
	ДатаКакПериодПодобратьДатуПоТексту(Элемент.Значение, ФормаОтчета.СтандартныйПериод.ДатаНачала, ПараметрыИсполненияОтчета.МинимальныйПериодОтчета);
	ФормаОтчета.СтандартныйПериод.ДатаОкончания = ПолучитьКонецПериода(ФормаОтчета.СтандартныйПериод.ДатаНачала, ПараметрыИсполненияОтчета.МинимальныйПериодОтчета);
	ФормаОтчета.ЭлементыФормы.ДинамическийОтборСтандартныйПериодПользователя.Значение = ФормаОтчета.СтандартныйПериод.Вариант; 
	Элемент.Значение = ПолучитьПредставлениеПериода(ФормаОтчета.СтандартныйПериод.ДатаНачала, ФормаОтчета.СтандартныйПериод.ДатаОкончания, ПараметрыИсполненияОтчета.МинимальныйПериодОтчета);
	
КонецПроцедуры

Процедура ДействияПанелиДинамическийОтборПериодВыборПриНачалеВыбораИзСписка(ФормаОтчета, Элемент, СтандартнаяОбработка) Экспорт
	
	ПараметрыИсполненияОтчета = Неопределено;
	ПараметрыИсполненияОтчета = ФормаОтчета.ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
	
	НачалоВыбораИзСпискаПредставленияПериода(Элемент, СтандартнаяОбработка, ФормаОтчета.СтандартныйПериод.ДатаНачала, ФормаОтчета, ПараметрыИсполненияОтчета.МинимальныйПериодОтчета);	
	ФормаОтчета.СтандартныйПериод.ДатаОкончания = ПолучитьКонецПериода(ФормаОтчета.СтандартныйПериод.ДатаНачала, ПараметрыИсполненияОтчета.МинимальныйПериодОтчета);
	ФормаОтчета.ЭлементыФормы.ДинамическийОтборСтандартныйПериодПользователя.Значение = ФормаОтчета.СтандартныйПериод.Вариант; 
	
КонецПроцедуры

Процедура ДействияПанелиДинамическийОтборПериодВыборАвтоПодборТекста(ФормаОтчета, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка) Экспорт
	
	ПараметрыИсполненияОтчета = Неопределено;
	ПараметрыИсполненияОтчета = ФормаОтчета.ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
	
	ДатаКакПериодАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПараметрыИсполненияОтчета.МинимальныйПериодОтчета);
	
КонецПроцедуры

Процедура ДействияПанелиДинамическийОтборПериодВыборОчистка(ФормаОтчета, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ДействияПанелиДинамическийОтборПериодВыборОкончаниеВводаТекстаОкончаниеВводаТекста(ФормаОтчета, Элемент, Текст, Значение, СтандартнаяОбработка) Экспорт
	
	ПараметрыИсполненияОтчета = Неопределено;
	ПараметрыИсполненияОтчета = ФормаОтчета.ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
	
	ДатаКакПериодОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка, ПараметрыИсполненияОтчета.МинимальныйПериодОтчета );
	
КонецПроцедуры   

Процедура ДействияПанелиДинамическийОтборВидСравненияПриИзменении(ОтчетОбъект, ЭтаФорма, Элемент) Экспорт
	
	Отбор = ПолучитьОтборИзФормы(ОтчетОбъект, ЭтаФорма, Элемент);
	ОтборыОтчета = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	ПолеОтбора = Новый ПолеКомпоновкиДанных(Отбор.СтрокаОтбора.Поле);
	
	Для Каждого СтрокаОтбора Из ОтборыОтчета Цикл
		
		Если СтрокаОтбора.ЛевоеЗначение = ПолеОтбора И СтрокаОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных["ВСпискеПоИерархии"] ИЛИ СтрокаОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных["НеВСпискеПоИерархии"] Тогда
			СтрокаОтбора.ВидСравнения = ?(ТипЗнч(Отбор.ВидСравнения) = Тип("Строка"), ВидСравненияКомпоновкиДанных[Отбор.ВидСравнения], Отбор.ВидСравнения); 		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПредставлениеПериода(ДатаНачала, ДатаОкончания, МинимальныйПериод)
	
	НачалоПериода = ДатаНачала;
	
	Если ВРег(МинимальныйПериод) = "МЕСЯЦ" Тогда
		НачалоПериода = НачалоМесяца(ДатаНачала);
	ИначеЕсли ВРег(МинимальныйПериод) = "КВАРТАЛ" Тогда
		НачалоПериода = НачалоКвартала(ДатаНачала);
	ИначеЕсли ВРег(МинимальныйПериод) = "ГОД" Тогда
		НачалоПериода = НачалоГода(ДатаНачала);
	КонецЕсли;

	Если ДатаОкончания <> Неопределено И (ПолучитьКонецПериода(ДатаНачала, МинимальныйПериод) <> КонецДня(ДатаОкончания) ИЛИ ДатаНачала <> НачалоПериода) Тогда
		Возврат Формат(ДатаНачала, "ДФ=dd.MM.yy") + " - " + Формат(ДатаОкончания, "ДФ=dd.MM.yy")
	Иначе
		Если ВРег(МинимальныйПериод) = "МЕСЯЦ" Тогда
			Возврат Формат(ДатаНачала, "ДФ='MMMM yyyy'");
		ИначеЕсли ВРег(МинимальныйПериод) = "КВАРТАЛ" Тогда
			Квартал = Цел((Месяц(ДатаНачала)-1)/3) + 1;
			Возврат "" + Квартал + " квартал " + Формат(ДатаНачала, "ДФ=yyyy");
		ИначеЕсли ВРег(МинимальныйПериод) = "ГОД" Тогда
			Возврат Формат(ДатаНачала, "ДФ='yyyy'");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЭлементыСтруктуры(ЭлементСтруктуры) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") тогда
		Структура = ЭлементСтруктуры.Настройки.Структура;
	Иначе
		Структура = ЭлементСтруктуры;
	КонецЕсли;
	
	ДобавитьЭлементСтруктуры(Структура, СписокПолей);
	Возврат СписокПолей;
	
КонецФункции

Процедура ДобавитьЭлементСтруктуры(Структура, СписокПолей)
	
	Для Каждого ЭлементСтруктуры Из Структура Цикл
		
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			СписокПолей.Добавить(ЭлементСтруктуры);
			ДобавитьЭлементСтруктуры(ЭлементСтруктуры.Строки, СписокПолей);
			ДобавитьЭлементСтруктуры(ЭлементСтруктуры.Колонки, СписокПолей);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			СписокПолей.Добавить(ЭлементСтруктуры);
			ДобавитьЭлементСтруктуры(ЭлементСтруктуры.Точки, СписокПолей);
			ДобавитьЭлементСтруктуры(ЭлементСтруктуры.Серии, СписокПолей);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			СписокПолей.Добавить(ЭлементСтруктуры);
			ДобавитьЭлементСтруктуры(ЭлементСтруктуры.Структура, СписокПолей);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьНастройкуПользователя(ЗначениеГруппировки, СписокГруппировки)
	
	Если Типзнч(СписокГруппировки) = Тип("ТаблицаЗначений") Тогда
		
		Для Каждого СтрокаЗначения Из СписокГруппировки Цикл
			
			СоотСтрока = Неопределено;
			
			Для Каждого СтрокаГруппировки Из ЗначениеГруппировки Цикл
				
				ТребуемаяСтрока = Истина;
				
				Для Каждого Поле Из СтрокаЗначения.Значение Цикл
					
					Если СтрокаГруппировки.Значение.НайтиПоЗначению(Поле.Значение) = Неопределено тогда
						ТребуемаяСтрока = Ложь;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ТребуемаяСтрока Тогда
					СоотСтрока = СтрокаГруппировки;
				КонецЕсли;
			КонецЦикла;
			
			Если СоотСтрока <> Неопределено Тогда
				
				ИндексСтрокиЗначения    = СписокГруппировки.Индекс(СтрокаЗначения);
				ИндексСтрокиГруппировки = ЗначениеГруппировки.Индекс(СоотСтрока);
				
				Если ИндексСтрокиГруппировки <> ИндексСтрокиЗначения И ИндексСтрокиЗначения >= 0 И ИндексСтрокиЗначения < ЗначениеГруппировки.Количество() Тогда
					ЗначениеГруппировки.Сдвинуть(СоотСтрока, ИндексСтрокиЗначения - ИндексСтрокиГруппировки);
				КонецЕсли;
				
				СоотСтрока.Использование = СтрокаЗначения.Использование;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДоступныйПараметрПоПараметруКомпоновкиДанных(ПарамтерКомпоновкиДанных, ОбластьПоиска) Экспорт
	
	Если ТипЗнч(ПарамтерКомпоновкиДанных) = Тип("Строка") Тогда
		ПолеПоиска = Новый ПараметрКомпоновкиДанных(ПарамтерКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПарамтерКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
		ИЛИ ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
		ИЛИ ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляПараметровДанных.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПараметр(ПолеПоиска);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначенияНастроекПанелиПользователяПоУмолчанию(ОтчетОбъект, ФормаОтчета = Неопределено) Экспорт
	
	ЗначенияНастроек = Новый Структура;
	
	ЗначенияНастроек.Вставить("ВыводитьЗаголовокОтчета", Истина);
	ЗначенияНастроек.Вставить("ФормироватьПриОткрытии", Ложь);
	
	//ДинамическиеОтборы
	ЗначенияНастроек.Вставить("ДинамическиеОтборы", Новый Соответствие);
	ЗначенияНастроек.Вставить("ДинамическиеПараметры", Новый Соответствие);
	ЗначенияНастроек.Вставить("ДинамическиеГруппировки", Новый Соответствие);
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	СхемаОбъекта = ПолучитьСхемуКомпоновкиОбъекта(ОтчетОбъект);
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаОбъекта));
	ЗаполнитьЭлементы(Компоновщик.Настройки["ПараметрыДанных"], СхемаОбъекта.НастройкиПоУмолчанию["ПараметрыДанных"]);
	
	ЗначенияНастроек.Вставить("НастройкиКомпоновщика", Компоновщик.ПолучитьНастройки());
	
	
	// Запомним видимость страниц компоновки чтобы при загрузке значений знать,
	// брать из значений по умолчанию или из запомненных значений
	ВидимостьСтраниц = Новый Соответствие;
	ВидимостьСтраниц.Вставить("Параметры", Ложь);
	ВидимостьСтраниц.Вставить("Отбор", Ложь);
	ВидимостьСтраниц.Вставить("Порядок", Ложь);
	ВидимостьСтраниц.Вставить("Показатели", Ложь);
	ЗначенияНастроек.Вставить("ВидимостьСтраниц", ВидимостьСтраниц);
	ЗначенияНастроек.Вставить("Показатели", Новый Соответствие);
	
	// Стандартный период
	ЗначенияНастроек.Вставить("СтандартныйПериод", Новый СтандартныйПериод);
	
	// Стандартная дата начала
	ЗначенияНастроек.Вставить("СтандартнаяДатаНачала", Новый СтандартнаяДатаНачала);
	
	Возврат ЗначенияНастроек;
	
КонецФункции

Процедура ПерерисоватьПанельНастроек(ОтчетОбъект, ФормаОтчета, ЗначенияНастроек = Неопределено, ПереноситьПараметры = истина) Экспорт
	
	ПараметрыИсполненияОтчета = Неопределено;
	ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
	
	ЕстьЭлементыНаПанели = Ложь;
	
	ЦветФонаКнопки = ЦветаСтиля.ЦветФонаКнопки;
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	ЭлементыФормы.ПанельЗакладок.Видимость = Ложь;
	ЭлементыФормы.ПанельЗакладок.Видимость = Ложь;
	
	Если ЭлементыФормы.Найти("ПанельПользователяГоризонтальная") <> Неопределено Тогда
		ЭлементыФормы.ПанельПользователяГоризонтальная.Видимость = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.ПанельЗакладок.РежимПрокручиваемыхСтраниц = Ложь;
	ШиринаФормы = ФормаОтчета.Ширина;
	ШиринаПанели = ЭлементыФормы.ПанельПользователя.Ширина;
	ЕстьРазделитель = ЭлементыФормы.Найти("Разделитель") <> Неопределено;
	
	Если ЕстьРазделитель Тогда
		Если ШиринаПанели < 306 Тогда
			ЭлементыФормы.Разделитель.Лево = ШиринаФормы - 295;
		КонецЕсли;
	КонецЕсли;
	
	// Инициализация ЗначенияНастроек
	Если ЗначенияНастроек = Неопределено Тогда
		ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект);
	КонецЕсли;
	Если ЗначенияНастроек = Неопределено Тогда
		ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователяПоУмолчанию(ОтчетОбъект);
	КонецЕсли;
	
	// Инициализация Параметры
	Параметры = ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);
	Если Параметры = Неопределено Тогда
		Параметры = ПолучитьПараметрыПанелиПользователяПоУмолчанию(ОтчетОбъект, ФормаОтчета);
		СохраненнаяМодифицированность = ФормаОтчета.Модифицированность;
		ОтчетОбъект.ПараметрыПанелиПользователя = Новый ХранилищеЗначения(Параметры);
		ФормаОтчета.Модифицированность = СохраненнаяМодифицированность;
	КонецЕсли;
	
	// Управление видимостью стандартных страниц
	ДеревоНастроекСтандартныхСтраниц = Параметры.ДеревоНастроекСтандартныхСтраниц;
	
	Для Каждого НастройкаСтраницы Из ДеревоНастроекСтандартныхСтраниц.Строки Цикл
		Если НастройкаСтраницы.Имя = "Период" Тогда
			Продолжить;
		КонецЕсли;
		Страница = ЭлементыФормы.ПанельЗакладок.Страницы.Найти(НастройкаСтраницы.Имя);
		Если Страница <> Неопределено Тогда
			Страница.Видимость = НастройкаСтраницы.Использование;
			Если Страница.Видимость Тогда
				ЕстьЭлементыНаПанели = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Если ПереноситьПараметры Тогда
			Для Каждого ВидимостьСтраницы Из ЗначенияНастроек.ВидимостьСтраниц Цикл
				Страница = ЭлементыФормы.ПанельЗакладок.Страницы.Найти(ВидимостьСтраницы.Ключ);
				Если Страница = Неопределено ИЛИ ВидимостьСтраницы.Ключ = "Показатели" Тогда
					Продолжить;
				КонецЕсли;
				// Восстанавливаем значение
				Попытка
					ТекущиеНастройкиКомпоновщика = ЗначенияНастроек.НастройкиКомпоновщика;
				Исключение
				КонецПопытки;
				
				Если ВидимостьСтраницы.Ключ = "Параметры" Тогда
					ЗаполнитьЭлементы(ОтчетОбъект.КомпоновщикНастроек.Настройки["ПараметрыДанных"], ТекущиеНастройкиКомпоновщика["ПараметрыДанных"]);
				Иначе
					СкопироватьЭлементы(ОтчетОбъект.КомпоновщикНастроек.Настройки[ВидимостьСтраницы.Ключ], ТекущиеНастройкиКомпоновщика[ВидимостьСтраницы.Ключ]);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
	КонецПопытки;

	
	ФормаОтчета.ЭлементыФормы.Сортировка.Верх      = 6;
	ФормаОтчета.ЭлементыФормы.Отбор.Верх           = 6;
	ФормаОтчета.ЭлементыФормы.ПараметрыДанных.Верх = 6;
	
	// Установка высоты табличного поля параметры
	Если ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры <> Неопределено Тогда
		
		КоличествоПараметров = 0;
		
		Для Каждого Параметр Из ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы Цикл
			Если Параметр.Видимость Тогда
				КоличествоПараметров = КоличествоПараметров + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоПараметров = 0 Тогда
			// Спрячем закладку Параметры, если параметров нет
			ЭлементыФормы.ПанельЗакладок.Страницы.Параметры.Видимость = Ложь;
			ЕстьЭлементыНаПанели = Истина;
		Иначе
			// Сделаем высоту списка параметров впритык всем параметрам
			ЭлементыФормы.ПараметрыДанных.Высота = 17 * (1 + КоличествоПараметров);
		КонецЕсли;
		
	КонецЕсли;
	
	// Удаление старых закладок с динамическими отборами
	Количество = ЭлементыФормы.ПанельЗакладок.Страницы.Количество();
	
	Для Индекс = 1 По Количество Цикл
		Страница = ЭлементыФормы.ПанельЗакладок.Страницы[Количество - Индекс];
		Если Лев(Страница.Имя, 17) = "ДинамическийОтбор" 
			ИЛИ Лев(Страница.Имя, 20) = "ДинамическийПараметр" 
			ИЛИ Лев(Страница.Имя, 23) = "ДинамическаяГруппировка" Тогда
			ЭлементыФормы.ПанельЗакладок.Страницы.Удалить(Количество - Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Надпись = ЭлементыФормы.Найти("НадписьНеЗаполненаПанель");
	
	Если Надпись <> Неопределено Тогда
		ЭлементыФормы.Удалить(Надпись);
	КонецЕсли;
	
	// Удалим старые элементы с динамическими отборами
	Количество = ЭлементыФормы.Количество();
	
	Для Индекс = 1 По Количество Цикл
		Элемент = ЭлементыФормы[Количество - Индекс];
		Если Лев(Элемент.Имя, 17) = "ДинамическийОтбор" ИЛИ Лев(Элемент.Имя, 20) = "ДинамическийПараметр" ИЛИ Лев(Страница.Имя, 23) = "ДинамическаяГруппировка" Тогда
			ЭлементыФормы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	ЛевоГорПанели = 0;
	ЕстьПериодНаГорПанели = Ложь;
	
	Если ФормаОтчета.ЭлементыФормы.Найти("ПанельПользователяГоризонтальная") = Неопределено Тогда
		НарисоватьСтандартныйПериодНаПравойПанели(ОтчетОбъект, ФормаОтчета, ЗначенияНастроек, Параметры, ПараметрыИсполненияОтчета);
	Иначе
		НарисоватьСтандартныйПериод(ОтчетОбъект, ФормаОтчета, ЗначенияНастроек, Параметры, ЛевоГорПанели, ЕстьПериодНаГорПанели);
	КонецЕсли;
	
	Отборы = Параметры.Отборы;
	ЕстьОтборыВГоризонтальнойПанели     = Отборы.Колонки.Найти("Расположение") <> Неопределено И Отборы.НайтиСтроки(Новый Структура("Расположение", "ГоризонтальнаяПанель")).Количество() > 0;
	ЕстьПараметрыНаГоризонтальнойПанели = Параметры.Свойство("Параметры") И Параметры.Параметры.Колонки.Найти("ВыводитьНа") <> Неопределено 
	И Параметры.Параметры.НайтиСтроки(Новый Структура("ВыводитьНа", "ГоризонтальнаяПанель")).Количество() > 0 ИЛИ ЕстьПериодНаГорПанели;
	
	Если ЭлементыФормы.Найти("ПанельПользователяГоризонтальная") <> Неопределено Тогда
		Если ЕстьОтборыВГоризонтальнойПанели ИЛИ ЕстьПараметрыНаГоризонтальнойПанели Тогда
			ЭлементыФормы.ПанельПользователяГоризонтальная.Свертка = РежимСверткиЭлементаУправления.Нет;
		Иначе
			ЭлементыФормы.ПанельПользователяГоризонтальная.Свертка = РежимСверткиЭлементаУправления.Верх;
		КонецЕсли;
	КонецЕсли;
	
	ПредыдущийЭлемент = Неопределено;
	
	Если  ЭлементыФормы.Найти("ПанельПользователяГоризонтальная") <> Неопределено Тогда
		ШиринаПанели   = ЭлементыФормы.ПанельПользователяГоризонтальная.Ширина - ЛевоГорПанели - 6;
		КолВоЭлементов = 0;
		КолВоЭлементов = КолВоЭлементов + ?(Параметры.Свойство("Параметры") И Параметры.Параметры.Колонки.Найти("ВыводитьНа") <> Неопределено, Параметры.Параметры.НайтиСтроки(Новый Структура("ВыводитьНа", "ГоризонтальнаяПанель")).Количество() * 2, 0) 
		+ ?(Отборы <> Неопределено И Отборы.Колонки.Найти("Расположение") <> Неопределено, Отборы.НайтиСтроки(Новый Структура("Расположение", "ГоризонтальнаяПанель")).Количество() * 2, 0);
		СреднийРазмер  = ?(КолВоЭлементов <> 0, ШиринаПанели/КолВоЭлементов, 0);
	Иначе
		СреднийРазмер  = 0;
	КонецЕсли;
	
	Если ФормаОтчета.ЭлементыФормы.Найти("Отбор") <> Неопределено Тогда
		ШиринаПанели = ФормаОтчета.ЭлементыФормы.ПанельПользователя.Ширина;
		Если ФормаОтчета.ЭлементыФормы.Отбор.Ширина <> ШиринаПанели-31 Тогда
			ФормаОтчета.ЭлементыФормы.Отбор.Ширина = ШиринаПанели-31;
		КонецЕсли;
	КонецЕсли;
	
	Если ФормаОтчета.ЭлементыФормы.Найти("Сортировка") <> Неопределено Тогда
		
		ШиринаПанели = ФормаОтчета.ЭлементыФормы.ПанельПользователя.Ширина;
		
		Если ФормаОтчета.ЭлементыФормы.Сортировка.Ширина <> ШиринаПанели-70 Тогда
			ФормаОтчета.ЭлементыФормы.Сортировка.Ширина  = ШиринаПанели-70;
		КонецЕсли;
		
	КонецЕсли;
	//нарисуем на панели настройку параметров
	Если Параметры.Свойство("Параметры") Тогда
		
		ШиринаПанели = ФормаОтчета.ЭлементыФормы.ПанельПользователя.Ширина;
		Если ФормаОтчета.ЭлементыФормы.ПараметрыДанных.Ширина <> ШиринаПанели-31 Тогда
			ФормаОтчета.ЭлементыФормы.ПараметрыДанных.Ширина = ШиринаПанели-31;
		КонецЕсли;
		ПоследнийЭлемент = Ложь;
		
		Для Каждого СтрокаПараметров Из Параметры.Параметры Цикл
			ДоступноеПолеПараметра = ПолучитьДоступныйПараметрПоПараметруКомпоновкиДанных(СтрокаПараметров.Параметр, ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры);
			ЗначениеПараметра = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(СтрокаПараметров.Параметр));
			
			Если ЗначениеПараметра = Неопределено И ДоступноеПолеПараметра = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначенияНастроек.Свойство("ДинамическиеПараметры") Тогда
				ЭлементДинамическогоОтбора = ЗначенияНастроек.ДинамическиеПараметры[СтрокаПараметров.Параметр];
			КонецЕсли;
			
			Если НЕ ЕстьОтборыВГоризонтальнойПанели Тогда
				ПоследнийЭлемент = Параметры.Параметры.Индекс(СтрокаПараметров) = (Параметры.Параметры.Индекс(СтрокаПараметров) - 1);
			КонецЕсли;
			
			НарисоватьПараметрОтчета(ФормаОтчета, Параметры.Параметры.Индекс(СтрокаПараметров), СтрокаПараметров, ЛевоГорПанели, ЦветФонаКнопки, ЗначениеПараметра, ДоступноеПолеПараметра, ЭлементДинамическогоОтбора, ПараметрыИсполненияОтчета, ПоследнийЭлемент, ПредыдущийЭлемент, СреднийРазмер);
			
			Если СтрокаПараметров.ВыводитьНа <> "ГоризонтальнаяПанель" И СтрокаПараметров.ВыводитьНа <> "" И СтрокаПараметров.ВыводитьНа <> Неопределено Тогда
				ЕстьЭлементыНаПанели = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("Группировки") Тогда
		
		МассивПомеченныхГруппировок = Новый Соответствие;
		ВсеГруппировки = ПолучитьЭлементыСтруктуры(ОтчетОбъект.КомпоновщикНастроек);
		Для Каждого Группировка Из ВсеГруппировки Цикл
			
			Имя = Группировка.Значение.Имя;
			Если Имя <> "" Тогда
				МассивГруппировок = МассивПомеченныхГруппировок.Получить(Группировка.Значение.Имя);
				Если МассивГруппировок = Неопределено Тогда
					МассивГруппировок = Новый Массив;
				КонецЕсли;
				МассивГруппировок.Добавить(Группировка);
				МассивПомеченныхГруппировок.Вставить(Группировка.Значение.Имя, МассивГруппировок);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаГруппировки Из Параметры.Группировки Цикл
			
			Если НЕ СтрокаГруппировки.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначенияНастроек.Свойство("ДинамическиеГруппировки") Тогда
				ЭлементДинамическойГруппировки = ЗначенияНастроек.ДинамическиеГруппировки[СтрокаГруппировки.Группировка];
			КонецЕсли;
			
			Группировки = МассивПомеченныхГруппировок.Получить(СтрокаГруппировки.Группировка);
			Индекс = Параметры.Группировки.Индекс(СтрокаГруппировки);
			НарисоватьГруппировкуОтчета(ФормаОтчета, ОтчетОбъект, Индекс, СтрокаГруппировки, ЦветФонаКнопки, Группировки, ЭлементДинамическойгруппировки, ПараметрыИсполненияОтчета);
			ЕстьЭлементыНаПанели = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Добавим закладки динамических отборов
	ЕстьДополнительнаяСтраница = Ложь;
	
	ВерхДопСтраница = 6;
	ИндексПоследСтроки = -1;
	
	Для Каждого СтрокаОтбора Из Отборы Цикл
		Если СтрокаОтбора.Расположение = "ГоризонтальнаяПанель" Тогда
			ИндексПоследСтроки = Отборы.Индекс(СтрокаОтбора);
		КонецЕсли;
	КонецЦикла;
	
	ЕстьДополнительнаяСтраница = Ложь;
	
	Для Каждого СтрокаОтбора Из Отборы Цикл
		
		Индекс = Отборы.Индекс(СтрокаОтбора);
		ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(СтрокаОтбора.Поле, ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора);
		ЭлементДинамическогоОтбора = Неопределено;
		
		Если ЗначенияНастроек.Свойство("ДинамическиеОтборы") Тогда
			ЭлементДинамическогоОтбора = ЗначенияНастроек.ДинамическиеОтборы[СтрокаОтбора.Поле];
		КонецЕсли;
		
		Если СтрокаОтбора.Расположение <> "ГоризонтальнаяПанель" ИЛИ ФормаОтчета.ЭлементыФормы.Найти("ПанельПользователяГоризонтальная") = Неопределено Тогда
			
			Если СтрокаОтбора.Расположение = "НоваяСтраница" ИЛИ СтрокаОтбора.Расположение = "ГоризонтальнаяПанель" Тогда
				НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Добавить("ДинамическийОтбор" + Индекс, СтрокаОтбора.Представление, СтрокаОтбора.Поле);
				НоваяСтраница.Раскрыта = Истина;
				Верх = 6;
			ИначеЕсли СтрокаОтбора.Расположение = "ДополнительнаяСтраница" Тогда
				Если НЕ ЕстьДополнительнаяСтраница Тогда
					ЕстьДополнительнаяСтраница = Истина;
					НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Добавить("ДинамическийОтбор" + "ДополнительнаяСтраница", "Отборы", СтрокаОтбора.Поле);
				КонецЕсли;
				НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы["ДинамическийОтбор" + "ДополнительнаяСтраница"];
				Верх = ВерхДопСтраница;
			Иначе
			КонецЕсли;
			
			ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = НоваяСтраница;
			
			Если СтрокаОтбора.ВидОтбора = "Список" ИЛИ СтрокаОтбора.ВидОтбора = "ДлинныйСписок" Тогда
				НарисоватьДинамическийОтборСписок(ФормаОтчета, Индекс, Верх, ЦветФонаКнопки, СтрокаОтбора, ЭлементДинамическогоОтбора, ДоступноеПоле, ПараметрыИсполненияОтчета);
				ЕстьЭлементыНаПанели = Истина;
			ИначеЕсли СтрокаОтбора.ВидОтбора = "Флажок" ИЛИ СтрокаОтбора.ВидОтбора = "ФлажокЗначение" ИЛИ СтрокаОтбора.ВидОтбора = "Значение" Тогда
				НарисоватьДинамическийОтборФлажокЗначение(ФормаОтчета, Индекс, Верх, ЦветФонаКнопки, СтрокаОтбора, ЭлементДинамическогоОтбора, ДоступноеПоле, ПараметрыИсполненияОтчета);
				ЕстьЭлементыНаПанели = Истина;
			КонецЕсли;
			
			Если ЕстьДополнительнаяСтраница И НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы["ДинамическийОтбор" + "ДополнительнаяСтраница"] Тогда
				ВерхДопСтраница = Верх;
			КонецЕсли;
		Иначе
			НарисоватьДинамическийОтборГоризонтальнойПанели(ФормаОтчета, Индекс, ЛевоГорПанели, ЦветФонаКнопки, СтрокаОтбора, ЭлементДинамическогоОтбора, ДоступноеПоле, ИндексПоследСтроки = Индекс, СтрокаОтбора.ВидОтбора = "Список", ПараметрыИсполненияОтчета, ПредыдущийЭлемент, СреднийРазмер);
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеНастройкиОтчета = Новый Массив;
	ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
	
	Если ПараметрыИсполненияОтчета.Свойство("ДополнительныеНастройкиОтчета") И ПараметрыИсполненияОтчета.ДополнительныеНастройкиОтчета Тогда
		ДополнительныеНастройкиОтчета = ОтчетОбъект.ПолучитьДополнительныеНастройкиОтчета();
	КонецЕсли;
	
	Для Каждого ДопНастройка Из ДополнительныеНастройкиОтчета Цикл
		
		Если НЕ ЕстьДополнительнаяСтраница Тогда
			НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Добавить("ДинамическийОтбор" + "ДополнительнаяСтраница", "Дополнительные настройки", "ДиаграммаГанта");
			ЕстьДополнительнаяСтраница = Истина;
		КонецЕсли;
		ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы["ДинамическийОтбор" + "ДополнительнаяСтраница"];
		НарисоватьФлажокДопНастроек(ФормаОтчета, ВерхДопСтраница, ДопНастройка.Имя, ДопНастройка.Заголовок, ДопНастройка.ЗначениеПоУмолчанию);
		ЕстьЭлементыНаПанели = Истина;
		
	КонецЦикла;
	
	//Заполнить таблицу показателей
	Страница = ЭлементыФормы.ПанельЗакладок.Страницы.Найти("Показатели");
	
	Если Страница <> Неопределено И Страница.Видимость Тогда
		
		Показатели = ФормаОтчета.ЭлементыФормы.Показатели.Значение;
		Показатели.Очистить();
		ПоляВыбора = ПолучитьВыбранныеПоля(ОтчетОбъект.КомпоновщикНастроек);
		
		Для Каждого ВыбранноеПоле Из ПоляВыбора Цикл
			ДоступноеПоле = ПолучитьДоступноеПоле(ВыбранноеПоле.Поле, ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора);
			Если ДоступноеПоле <> Неопределено И ДоступноеПоле.Ресурс Тогда
				СтрокаПоказателя = Показатели.Добавить();
				СтрокаПоказателя.Использование = ВыбранноеПоле.Использование;
				СтрокаПоказателя.Поле          = ВыбранноеПоле.Поле;
				СтрокаПоказателя.Представление = ДоступноеПоле.Заголовок;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначенияНастроек.Свойство("Показатели")  Тогда
			ШиринаПанели = ФормаОтчета.ЭлементыФормы.ПанельПользователя.Ширина;
			
			Если ФормаОтчета.ЭлементыФормы.Показатели.Ширина <> ШиринаПанели - 31 Тогда
				ФормаОтчета.ЭлементыФормы.Показатели.Ширина = ШиринаПанели - 31;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Сдвинем страницу Сортировка в самый конец
	Количество = ЭлементыФормы.ПанельЗакладок.Страницы.Количество();
	Если ЭлементыФормы.ПанельЗакладок.Страницы.Найти("Показатели") <> Неопределено Тогда
		Индекс = ЭлементыФормы.ПанельЗакладок.Страницы.Индекс(ЭлементыФормы.ПанельЗакладок.Страницы.Показатели);
		ЭлементыФормы.ПанельЗакладок.Страницы.Сдвинуть(ЭлементыФормы.ПанельЗакладок.Страницы.Показатели, Количество - 1 - Индекс);
	КонецЕсли;
	Индекс = ЭлементыФормы.ПанельЗакладок.Страницы.Индекс(ЭлементыФормы.ПанельЗакладок.Страницы.Порядок);
	ЭлементыФормы.ПанельЗакладок.Страницы.Сдвинуть(ЭлементыФормы.ПанельЗакладок.Страницы.Порядок, Количество - 1 - Индекс);
	
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаПанелиПользователя") И ПараметрыИсполненияОтчета.ПослеВыводаПанелиПользователя тогда
		ФормаОтчета.ПослеВыводаПанелиПользователя(ЗначенияНастроек);
	КонецЕсли;
	
	ЭлементыФормы.ПанельЗакладок.РежимПрокручиваемыхСтраниц = Истина;
	
	ЭлементыФормы.ПанельЗакладок.Видимость = Истина;
	Если ЭлементыФормы.Найти("ПанельПользователяГоризонтальная") <> Неопределено Тогда
		ЭлементыФормы.ПанельПользователяГоризонтальная.Видимость = Истина;
	КонецЕсли;
	
	Если НЕ ЕстьЭлементыНаПанели Тогда 
		НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "НадписьНеЗаполненаПанель", Истина, ЭлементыФормы.ПанельПользователя);
		НовыйЭлемент.Верх      = 1;
		НовыйЭлемент.Лево      = 1;
		НовыйЭлемент.Ширина    = ?(ЭлементыФормы.ПанельПользователя.Ширина < 215, 215, ЭлементыФормы.ПанельПользователя.Ширина-1);
		НовыйЭлемент.Высота    = ЭлементыФормы.ПанельПользователя.Высота-35;
		НовыйЭлемент.Заголовок = "         Панель пользователя не заполнена.";
		НовыйЭлемент.ЦветТекста = ЦветаСтиля.ЦветРамки;
		НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		УстановитьПравуюПривязкуПолностью(НовыйЭлемент, ЭлементыФормы.ПанельПользователя);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьПараметрыТабличногоДокумента(Результат, ВариантОтчета) Экспорт
	
	Структура = Новый Структура("АвтоМасштаб, ПолеСверху, ПолеСлева, ПолеСнизу, ПолеСправа, МасштабПечати, ИмяПараметровПечати, ИмяПринтера, ОриентацияСтраницы ");
	Структура.АвтоМасштаб         = Результат.АвтоМасштаб;
	Структура.ПолеСверху          = Результат.ПолеСверху;
	Структура.ПолеСлева           = Результат.ПолеСлева;
	Структура.ПолеСнизу           = Результат.ПолеСнизу;
	Структура.ПолеСправа          = Результат.ПолеСправа;
	Структура.МасштабПечати       = Результат.МасштабПечати;
	Структура.ИмяПараметровПечати = Результат.ИмяПараметровПечати;
	Структура.ИмяПринтера         = Результат.ИмяПринтера;
	Структура.ОриентацияСтраницы  = Результат.ОриентацияСтраницы;
	
	СохранитьЗначение("УниверсальныйОтчет_НастройкиВариантаОтчета_" + ВариантОтчета.НастраиваемыйОбъект + "/" + ВариантОтчета, Структура);
КонецПроцедуры

Процедура ВосстановитьПараметрыТабличногоДокумента(Результат, ВариантОтчета) Экспорт
	
	ПараметрыТабличногоДокумента = ВосстановитьЗначение("УнивесальныйОтчет_НастройкиВариантаОтчета_" + ВариантОтчета.НастраиваемыйОбъект + "/" + ВариантОтчета);
	Если ТипЗНЧ(ПараметрыТабличногоДокумента) = Тип("Структура") тогда
		Результат.АвтоМасштаб         = ПараметрыТабличногоДокумента.АвтоМасштаб;
		Результат.ПолеСверху          = ПараметрыТабличногоДокумента.ПолеСверху;
		Результат.ПолеСлева           = ПараметрыТабличногоДокумента.ПолеСлева;
		Результат.ПолеСнизу           = ПараметрыТабличногоДокумента.ПолеСнизу;
		Результат.ПолеСправа          = ПараметрыТабличногоДокумента.ПолеСправа;
		Результат.МасштабПечати       = ПараметрыТабличногоДокумента.МасштабПечати;
		Результат.ИмяПараметровПечати = ПараметрыТабличногоДокумента.ИмяПараметровПечати;
		Результат.ИмяПринтера      	  = ПараметрыТабличногоДокумента.ИмяПринтера;
		Результат.ОриентацияСтраницы  = ПараметрыТабличногоДокумента.ОриентацияСтраницы;
		
	КонецЕсли;
КонецПроцедуры

Процедура ВыборВариантаОтчетаНаПанелиВариантов(ОтчетОбъект, ФормаОтчета, Элемент = Неопределено, СохраненаяНастройка = Неопределено) Экспорт
	
	Если СохраненаяНастройка = Неопределено Тогда
		Индекс = Число(Сред(Элемент.Имя, 27));
		Если НЕ ФормаОтчета.ЭтоОтработкаРасшифровки И НЕ ФормаОтчета.РежимРедактированияНастройки Тогда
			СохранитьНастройкуПользователяНастройкиОтчета(ОтчетОбъект, ФормаОтчета);
		КонецЕсли;
	Иначе
		СтрокаТаблицы = ОтчетОбъект.ТаблицаВариантовОтчета.Найти(СохраненаяНастройка, "Ссылка");
		Если СтрокаТаблицы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Индекс = ОтчетОбъект.ТаблицаВариантовОтчета.Индекс(СтрокаТаблицы);
		Элемент = ФормаОтчета.ЭлементыФормы["ПолеКартинкиВыбораВарианта" + Индекс];
	КонецЕсли;
	ВыбраннаяСохраненнаяНастройка = ОтчетОбъект.ТаблицаВариантовОтчета[Индекс].Ссылка;
	
	Если НЕ ВыбраннаяСохраненнаяНастройка.Пустая() И ВыбраннаяСохраненнаяНастройка.ПолучитьОбъект() = Неопределено Тогда
		Вопрос("Операция невозможна. Вариант отчета """ + Элемент.ТекстНевыбраннойКартинки + """ удален.", РежимДиалогаВопрос.ОК);
		ОбновитьТаблицуДоступныхНастроекПользователю(ОтчетОбъект);
		ОбновитьКнопкиВыбораНастроек(ФормаОтчета, ОтчетОбъект, ФормаОтчета.ПредставлениеНастройки, ФормаОтчета.РежимРедактированияНастройки);
		Возврат;
	КонецЕсли;
	
	// Затерем значения настроек панели чтобы они не перешли на другой вариант отчета
	ОтчетОбъект.ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(Неопределено);
	ОтчетОбъект.ПараметрыПанелиПользователя = Новый ХранилищеЗначения(ПолучитьПараметрыПанелиПользователяПоУмолчанию(ОтчетОбъект, ФормаОтчета));
	
	// Сохраним результат
	Если ФормаОтчета.СоответствиеНастройкаРезультат[ОтчетОбъект.СохраненнаяНастройка] <> Неопределено Тогда
		ФормаОтчета.ЭлементыФормы.Удалить(ФормаОтчета.СоответствиеНастройкаРезультат[ОтчетОбъект.СохраненнаяНастройка].Результат);
	КонецЕсли;
	Результат = ФормаОтчета.ЭлементыФормы.Добавить(Тип("ПолеТабличногоДокумента"), , Ложь);
	Результат.Вывести(ФормаОтчета.ЭлементыФормы.Результат);
	Структура = Новый Структура;
	Структура.Вставить("Результат", Результат);
	Структура.Вставить("ФиксацияСверху",    ФормаОтчета.ЭлементыФормы.Результат.ФиксацияСверху);
	Структура.Вставить("ДанныеРасшифровки", ФормаОтчета.ДанныеРасшифровки);
	ФормаОтчета.СоответствиеНастройкаРезультат[ОтчетОбъект.СохраненнаяНастройка] = Структура;
	
	//запомним настройки табличного документа
	
	СохранитьПараметрыТабличногоДокумента(ФормаОтчета.ЭлементыФормы.Результат, ОтчетОбъект.СохраненнаяНастройка);
	
	// Обновим кнопки выбора настройки
	Для Каждого ЭлементСписка Из ОтчетОбъект.ТаблицаВариантовОтчета Цикл
		Кнопка = ФормаОтчета.ЭлементыФормы["ПолеКартинкиВыбораВарианта" + ОтчетОбъект.ТаблицаВариантовОтчета.Индекс(ЭлементСписка)];
		Кнопка.ЦветФона        = ЦветаСтиля.ЦветФонаКнопки;;
		Кнопка.ЦветТекста      = WebЦвета.ТемноСиний;
		Кнопка.КонтекстноеМеню = Неопределено;
		Кнопка.ГиперСсылка     = истина;
	КонецЦикла;
	Элемент.ЦветФона    = Новый Цвет(255, 248, 220);
	Элемент.ЦветТекста  = ЦветаСтиля.ЦветТекстаКнопки;
	Элемент.ГиперСсылка = Ложь;
	
	// Установим настройку
	ОтчетОбъект.СохраненнаяНастройка = ОтчетОбъект.ТаблицаВариантовОтчета[Индекс].Ссылка;
	
	Элемент.КонтекстноеМеню = ФормаОтчета.ЭлементыФормы.КонтекстноеМенюКартинкиВыбораСохраненнойНастройки;
	
	// Загрузим результат, если есть сохраненный
	ФормаОтчета.ЭлементыФормы.Результат.Очистить();
	ФормаОтчета.ЭлементыФормы.Результат.ФиксацияСверху = 0;
	Структура = ФормаОтчета.СоответствиеНастройкаРезультат[ОтчетОбъект.СохраненнаяНастройка];
	Если Структура <> Неопределено Тогда
		ФормаОтчета.ЭлементыФормы.Результат.Вывести(Структура.Результат);
		ФормаОтчета.ДанныеРасшифровки = Структура.ДанныеРасшифровки;
		ФормаОтчета.ЭлементыФормы.Результат.ФиксацияСверху = Структура.ФиксацияСверху;
		ФормаОтчета.Обновить();
	КонецЕсли;
	
	ВосстановитьПараметрыТабличногоДокумента(ФормаОтчета.ЭлементыФормы.Результат, ОтчетОбъект.СохраненнаяНастройка);
	
	// Загрузим саму настройку
	Если ОтчетОбъект.СохраненнаяНастройка.Пустая() Тогда
		
		ПрименитьНастройкуПользователяНастройкиОтчета(ОтчетОбъект);
		ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(ПолучитьСхемуКомпоновкиОбъекта(ОтчетОбъект).НастройкиПоУмолчанию);
		
	Иначе
		
		ОтчетОбъект.ПрименитьНастройку();
		ПрименитьНастройкуПользователяНастройкиОтчета(ОтчетОбъект);
		
	КонецЕсли;
	
	ОбработкаФормыПослеПримененияНастройки(ОтчетОбъект, ФормаОтчета);
	
КонецПроцедуры

Процедура ОбработкаФормыПослеПримененияНастройки(ОтчетОбъект, ФормаОтчета, ИспользоватьЗначенияНастроекНаФорме = Ложь) Экспорт
	
	Если ИспользоватьЗначенияНастроекНаФорме Тогда
		ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета);
	КонецЕсли;
	ПерерисоватьПанельНастроек(ОтчетОбъект, ФормаОтчета, ЗначенияНастроек);
	ОбновитьФормуТиповогоОтчетаПоКомпоновщику(ОтчетОбъект, ФормаОтчета);
	ОбновитьЗаголовокТиповогоОтчета(ОтчетОбъект, ФормаОтчета);
	
	ФормаОтчета.Модифицированность = Ложь;
	
	ЕстьЭлементыУправленияНаПравойПанели = Истина;
	
	Если ФормаОтчета.ОтчетОбъект.ПараметрыПанелиПользователя <> Неопределено Тогда
		ПараметрыПанели = ФормаОтчета.ОтчетОбъект.ПараметрыПанелиПользователя.Получить();
		
		ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
		Кнопка = Неопределено;
		
		Если ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Найти("ПанельПользователя") <> Неопределено Тогда
			Кнопка = ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.ПанельПользователя;
		ИначеЕсли ЭлементыФормы.СервиснаяПанель.Кнопки.Найти("ПанельПользователя") <> Неопределено Тогда
			Кнопка = ЭлементыФормы.СервиснаяПанель.Кнопки.ПанельПользователя;
		КонецЕсли;
		
		ЕстьЭлементыУправленияНаПравойПанели = ложь;
		
		Если ПараметрыПанели.Свойство("Отборы") и ПараметрыПанели.Отборы <> Неопределено Тогда
			Для Каждого СтрокаОтбора Из ПараметрыПанели.Отборы Цикл
				Если СтрокаОтбора.Расположение <> "ГоризонтальнаяПанель" Тогда
					ЕстьЭлементыУправленияНаПравойПанели = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ЕстьЭлементыУправленияНаПравойПанели И ПараметрыПанели.Свойство("Параметры") И ПараметрыПанели.Параметры <> Неопределено Тогда
			Для Каждого СтрокаОтбора Из ПараметрыПанели.Параметры Цикл
				Если СтрокаОтбора.ВыводитьНа <> "ГоризонтальнаяПанель" И СтрокаОтбора.ВыводитьНа <> "" И СтрокаОтбора.ВыводитьНа <> Неопределено Тогда
					ЕстьЭлементыУправленияНаПравойПанели = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ЕстьЭлементыУправленияНаПравойПанели И ПараметрыПанели.Свойство("ДеревоНастроекСтандартныхСтраниц") и ПараметрыПанели.ДеревоНастроекСтандартныхСтраниц <> Неопределено тогда
			Для Каждого СтрокаОтбора Из ПараметрыПанели.ДеревоНастроекСтандартныхСтраниц.Строки Цикл
				Если СтрокаОтбора.Использование И СтрокаОтбора.Имя <> "Период" Тогда
					ЕстьЭлементыУправленияНаПравойПанели = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЕстьЭлементыУправленияНаПравойПанели и Кнопка.Пометка Тогда 
		Кнопка.Пометка = Ложь;
	КонецЕсли;
	
	УправлениеОтображениемПанелиПользователя(ФормаОтчета);
	
КонецПроцедуры

Процедура УстановитьВидимостьПанелиВариантовПоУмолчанию(ЭтотОбъект, ЭтаФорма) Экспорт
	
	ЭлементыФормы = ЭтаФорма.ЭлементыФормы;
	
	Если ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Найти("ПанельВариантов") <> Неопределено Тогда
		
		Если ЭтотОбъект.ТаблицаВариантовОтчета.Количество() < 2 Тогда
			ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.ПанельВариантов.Пометка = Ложь;
		КонецЕсли;
		
		Если ЭтаФорма.ЭтоОтработкаРасшифровки Тогда
			ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.ПанельВариантов.Пометка = Ложь;
		КонецЕсли;
		
	ИначеЕсли ЭлементыФормы.Найти("СервиснаяПанель") <> Неопределено 
		И ЭлементыФормы.СервиснаяПанель.Кнопки.Найти("ПанельВариантов") <> Неопределено Тогда 
		
		Попытка
			Если ЭтотОбъект.ТаблицаВариантовОтчета.Количество() < 2 Тогда
				ЭлементыФормы.СервиснаяПанель.Кнопки.ПанельВариантов.Пометка = Ложь;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если ЭтаФорма.ЭтоОтработкаРасшифровки Тогда
			ЭлементыФормы.СервиснаяПанель.Кнопки.ПанельВариантов.Пометка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьПанелиПользователяПоУмолчанию(ЭтотОбъект, ЭтаФорма) Экспорт
	
	ЭлементыФормы = ЭтаФорма.ЭлементыФормы;
	
	Попытка
		Если ЭтотОбъект.ТаблицаВариантовОтчета.Количество() = 0 Тогда
			
			Если ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Найти("ПанельПользователя") <> Неопределено тогда
				ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.ПанельПользователя.Пометка = Ложь;
			ИначеЕсли ЭлементыФормы.Найти("СервиснаяПанель") <> Неопределено 
				И ЭлементыФормы.СервиснаяПанель.Кнопки.Найти("ПанельПользователя") <> Неопределено Тогда
				ЭлементыФормы.СервиснаяПанель.Кнопки.ПанельПользователя.Пометка = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ПриНажатииКнопкиВверхВниз(ФормаОтчета, ОтчетОбъект, Кнопка) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	Индекс = Число(Сред(Кнопка.Имя, 24, 1));
	Направление = ?(Найти(Кнопка.Имя,"Вверх") <> 0, -1, 1);
	Если Найти(Кнопка.Имя,"Строк") <> 0 Тогда
		ТабличноеПоле = ЭлементыФормы.Найти("ДинамическаяГруппировка" + Индекс + "ТабличноеПолеСтрок");
	ИначеЕсли Найти(Кнопка.Имя,"Колонок") <> 0 Тогда
		ТабличноеПоле = ЭлементыФормы.Найти("ДинамическаяГруппировка" + Индекс + "ТабличноеПолеКолонок");
	Иначе
		ТабличноеПоле = ЭлементыФормы.Найти("ДинамическаяГруппировка" + Индекс + "ТабличноеПоле");
	КонецЕсли;
	
	Если ТабличноеПоле <> Неопределено И ТабличноеПоле.ТекущаяСтрока <> Неопределено Тогда
		ТаблицаЗначений = ТабличноеПоле.Значение;
		Если Направление + ТаблицаЗначений.Индекс(ТабличноеПоле.ТекущаяСтрока) < ТаблицаЗначений.Количество()
			И Направление + ТаблицаЗначений.Индекс(ТабличноеПоле.ТекущаяСтрока) >= 0 Тогда
			ТаблицаЗначений.Сдвинуть(ТабличноеПоле.ТекущаяСтрока, Направление);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьНастройкиФормыОтчета(ОтчетОбъект, ЭтаФорма) Экспорт
	
	НастройкиФормыОтчета = Новый Структура("ПанельПользователя, ПанельВариантов");
	
	Если ЭтаФорма.ЭлементыФормы.Найти("СервиснаяПанель") <> Неопределено Тогда
		СервиснаяПанель                         = ЭтаФорма.ЭлементыФормы.СервиснаяПанель;
		НастройкиФормыОтчета.ПанельПользователя = СервиснаяПанель.Кнопки.Найти("ПанельПользователя") <> Неопределено И СервиснаяПанель.Кнопки.ПанельПользователя.Пометка;
		НастройкиФормыОтчета.ПанельВариантов    = СервиснаяПанель.Кнопки.Найти("ПанельВариантов") <> Неопределено И СервиснаяПанель.Кнопки.ПанельВариантов.Пометка;
	КонецЕсли;
	
	НастраиваемыйОбъект = ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	Пользователь = глЗначениеПеременной("глТекущийПользователь");
	Если Найти(НастраиваемыйОбъект, "Отчет") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТЗ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СохраненныеНастройки.Ссылка
		|ИЗ
		|	Справочник.СохраненныеНастройки.Пользователи КАК СохраненныеНастройкиПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СохраненныеНастройки КАК СохраненныеНастройки
		|		ПО СохраненныеНастройкиПользователи.Ссылка = СохраненныеНастройки.Ссылка
		|ГДЕ
		|	СохраненныеНастройки.ТипНастройки = &ТипНастройки
		|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект
		|	И СохраненныеНастройкиПользователи.Пользователь = &Пользователь";
		
	Запрос = Новый Запрос(ТЗ);
	Запрос.УстановитьПараметр("ТипНастройки", 		 Перечисления.ТипыНастроек.ОбщиеНастройкиОтчетов);
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", НастраиваемыйОбъект);
	Запрос.УстановитьПараметр("Пользователь", 		 Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НастройкиФормы = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		НовыйЭлемент                     = Справочники.СохраненныеНастройки.СоздатьЭлемент();
		НовыйЭлемент.Наименование        = "Настройки формы отчета";
		НовыйЭлемент.НастраиваемыйОбъект = НастраиваемыйОбъект;
		НовыйЭлемент.ТипНастройки        = Перечисления.ТипыНастроек.ОбщиеНастройкиОтчетов;
		//НовыйЭлемент.Владелец            = Пользователь;
		НовыйПользователь                = НовыйЭлемент.Пользователи.Добавить();
		НовыйПользователь.Пользователь   = глЗначениеПеременной("глТекущийПользователь");
		НовыйПользователь.ПравоИзменения = Истина;
		НовыйЭлемент.Записать();
		НастройкиФормы = НовыйЭлемент;
	КонецЕсли;
	
	НастройкиФормы.ХранилищеНастроек = Новый ХранилищеЗначения(НастройкиФормыОтчета);
	НастройкиФормы.Записать();
	
	СохранитьПараметрыТабличногоДокумента(ЭтаФорма.ЭлементыФормы.Результат, ОтчетОбъект.СохраненнаяНастройка);
	
КонецПроцедуры

Процедура ВосстановитьНастройкиФормыОтчета(ЭтотОбъект, ЭтаФорма) Экспорт
	
	НастраиваемыйОбъект = ПолучитьИдентификаторОбъекта(ЭтотОбъект);
	Пользователь 		= глЗначениеПеременной("глТекущийПользователь");
	
	Если Найти(НастраиваемыйОбъект, "Отчет") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.ЭтоОтработкаРасшифровки Тогда
		возврат;
	КонецЕсли;
	
	ТЗ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СохраненныеНастройки.Ссылка
		|ИЗ
		|	Справочник.СохраненныеНастройки.Пользователи КАК СохраненныеНастройкиПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СохраненныеНастройки КАК СохраненныеНастройки
		|		ПО СохраненныеНастройкиПользователи.Ссылка = СохраненныеНастройки.Ссылка
		|ГДЕ
		|	СохраненныеНастройки.ТипНастройки = &ТипНастройки
		|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект
		|	И СохраненныеНастройкиПользователи.Пользователь = &Пользователь";
		
	Запрос = Новый Запрос(ТЗ);
	Запрос.УстановитьПараметр("ТипНастройки",		 Перечисления.ТипыНастроек.ОбщиеНастройкиОтчетов);
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", НастраиваемыйОбъект);
	Запрос.УстановитьПараметр("Пользователь",		 Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		НастройкиФормы 		 = Выборка.Ссылка.ПолучитьОбъект();
		НастройкиФормыОтчета = НастройкиФормы.ХранилищеНастроек.Получить();
		
		Если НастройкиФормыОтчета <> Неопределено Тогда
			Если ЭтаФорма.ЭлементыФормы.Найти("СервиснаяПанель") <> Неопределено Тогда
				
				СервиснаяПанель = ЭтаФорма.ЭлементыФормы.СервиснаяПанель;
				
				Если СервиснаяПанель.Кнопки.Найти("ПанельПользователя") <> Неопределено Тогда
					СервиснаяПанель.Кнопки.ПанельПользователя.Пометка = НастройкиФормыОтчета.ПанельПользователя;
				КонецЕсли;
				
				Если СервиснаяПанель.Кнопки.Найти("ПанельВариантов") <> Неопределено Тогда
					СервиснаяПанель.Кнопки.ПанельВариантов.Пометка = НастройкиФормыОтчета.ПанельВариантов
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Процедура УправлениеОтображениемПанелиВариантов(ФормаОтчета) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	Кнопка = Неопределено;
	
	Если ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Найти("ПанельВариантов") <> Неопределено Тогда
		Кнопка = ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.ПанельВариантов;
	Иначе
		Если ЭлементыФормы.СервиснаяПанель.Кнопки.Найти("ПанельВариантов") <> Неопределено И ЭлементыФормы.Найти("СервиснаяПанель") <> Неопределено Тогда
			Кнопка = ЭлементыФормы.СервиснаяПанель.Кнопки.ПанельВариантов;
		КонецЕсли;
	КонецЕсли;
	
	Если Кнопка <> Неопределено И Кнопка.Пометка Тогда
		ЭлементыФормы.РазделительПанелиВыбораВариантов.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельВыбораВариантов.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.РазделительПанелиВыбораВариантов.УстановитьПривязку(ГраницаЭлементаУправления.Верх);
		ЭлементыФормы.ПанельВыбораВариантов.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.РазделительПанелиВыбораВариантов, ГраницаЭлементаУправления.Верх);
		ЭлементыФормы.Сформировать.Высота = ЭлементыФормы.Сформировать.Высота - 2;
	Иначе
		ЭлементыФормы.ПанельВыбораВариантов.УстановитьПривязку(ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.РазделительПанелиВыбораВариантов.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.ПанельВыбораВариантов, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.ПанельВыбораВариантов.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.РазделительПанелиВыбораВариантов.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.Сформировать.Высота = ЭлементыФормы.Сформировать.Высота + 2;
	КонецЕсли;
	
КонецПроцедуры


Процедура УправлениеОтображениемПанелиПользователя(ФормаОтчета) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	Кнопка = Неопределено;
	
	Если ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Найти("ПанельПользователя") <> Неопределено Тогда
		Кнопка = ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.ПанельПользователя;
	ИначеЕсли ЭлементыФормы.СервиснаяПанель.Кнопки.Найти("ПанельПользователя") <> Неопределено Тогда
		Кнопка = ЭлементыФормы.СервиснаяПанель.Кнопки.ПанельПользователя;
	КонецЕсли;
	
	ЕстьРазделитель = ЭлементыФормы.Найти("Разделитель") <> Неопределено;
	
	Если ЕстьРазделитель Тогда
		
		Если Кнопка = Неопределено ИЛИ НЕ Кнопка.Пометка Тогда
			ЭлементыФормы.ПанельПользователя.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
			ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельПользователя, ГраницаЭлементаУправления.Лево);
			ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Право;
			ЭлементыФормы.Разделитель.Свертка        = РежимСверткиЭлементаУправления.Право;
		Иначе
			ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Нет;
			ЭлементыФормы.Разделитель.Свертка        = РежимСверткиЭлементаУправления.Нет;
			ШиринаПанели = ЭлементыФормы.ПанельПользователя.Ширина;
			
			Если ШиринаПанели / ФормаОтчета.Ширина > 0.5 Тогда
				ШиринаПанели = Окр(ФормаОтчета.Ширина * 0.3);
				ЭлементыФормы.ПанельПользователя.Ширина = ШиринаПанели;
				ЭлементыФормы.ПанельПользователя.Лево   = ФормаОтчета.Ширина - ШиринаПанели -6;
			КонецЕсли;
			
			ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельВыбораВариантов, ГраницаЭлементаУправления.Право);
			ЭлементыФормы.ПанельПользователя.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.Разделитель, ГраницаЭлементаУправления.Право);
			ЭлементыФормы.Разделитель.Лево            = ФормаОтчета.Ширина - ШиринаПанели - 7 - 8; // 330 - 323   513
			ЭлементыФормы.Результат.Ширина            = ФормаОтчета.Ширина - 16 - 7 - ШиринаПанели;
			//вычислим ширнину панели если 
		КонецЕсли;
		
	Иначе	
		
		Если НЕ Кнопка.Пометка Тогда
			ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Право;
		Иначе
			ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Нет;
			ШиринаПанели = ЭлементыФормы.ПанельПользователя.Ширина;
			Если ШиринаПанели / ФормаОтчета.Ширина > 0.5 Тогда
				ШиринаПанели = Окр(ФормаОтчета.Ширина * 0.3);
				ЭлементыФормы.ПанельПользователя.Ширина = ШиринаПанели;
				ЭлементыФормы.ПанельПользователя.Лево 	= ФормаОтчета.Ширина - ШиринаПанели -6;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РедактироватьПанельПользователя(ОтчетОбъект, ФормаОтчета) Экспорт
	
	ФормаНастройки = ПолучитьОбщуюФорму("ФормаНастройкиПараметровПанелиПользователя", ФормаОтчета);
	ФормаНастройки.ОтчетОбъект = ОтчетОбъект;
	
	ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета);
	Если ФормаНастройки.ОткрытьМодально() = Истина Тогда
		ПерерисоватьПанельНастроек(ОтчетОбъект, ФормаОтчета, ЗначенияНастроек);
		ФормаОтчета.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияПанелиСтандартныйПериодПользователяПриИзменении(ФормаОтчета, Элемент) Экспорт
	
	ПараметрыИсполненияОтчета = Неопределено;
	ПараметрыИсполненияОтчета = ФормаОтчета.ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
	
	ФормаОтчета.СтандартныйПериод.Вариант = ?(Элемент.Значение = Неопределено, ВариантСтандартногоПериода.ПроизвольныйПериод, Элемент.Значение);
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("МинимальныйПериодОтчета") Тогда
		ФормаОтчета.ЭлементыФормы.ДинамическийОтборПериодВыбор.Значение = ПолучитьПредставлениеПериода(ФормаОтчета.СтандартныйПериод.ДатаНачала, ФормаОтчета.СтандартныйПериод.ДатаОкончания, ПараметрыИсполненияОтчета.МинимальныйПериодОтчета);
	КонецЕсли;

КонецПроцедуры 

Функция ПолучитьСписокПериодов(ПериодСохраненный, Параметры)
	
	СписокПериодов = Новый СписокЗначений;
	Периодичность = ПериодСохраненный.Периодичность;	
	Строка = Параметры.ДоступныеПериодичности.НайтиСтроки(Новый Структура("Периодичность", Периодичность))[0];
	РассчитыватьЧерез = Строка.РассчитыватьЧерез;
	Если Периодичность = РассчитыватьЧерез Тогда
		СписокПериодов.Добавить(ПериодСохраненный);
	КонецЕсли;
	Возврат СписокПериодов;
	
КонецФункции

Функция ПоследниеЭлементыСтруктуры(ПервыйЭлементСтруктуры)
	
	ЭлементСтруктурыНовый = ПервыйЭлементСтруктуры;
	Имя = ПервыйЭлементСтруктуры.Имя;
	
	Пока Имя = ЭлементСтруктурыНовый.Имя Цикл
		
		Если ТипЗнч(ЭлементСтруктурыНовый) = Тип("ТаблицаКомпоновкиДанных") 
			ИЛИ ТипЗнч(ЭлементСтруктурыНовый) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			Прервать;
		КонецЕсли;
		
		Если ЭлементСтруктурыНовый.Структура.Количество() = 0 Тогда
			ЭлементСтруктурыНовый = Неопределено;
			Прервать;
		КонецЕсли;
		
		ЭлементСтруктурыНовый = ЭлементСтруктурыНовый.Структура[0];
		
	КонецЦикла;
	
	Возврат ЭлементСтруктурыНовый;
	
КонецФункции

Процедура НайтиПервыеЭлементыСтруктуры(Имя, Структура, МассивГруппировок) Экспорт
	
	Для Каждого ЭлементСтруктуры Из Структура Цикл
		
		Если ЭлементСтруктуры.Имя = Имя Тогда
			СтруктураЭлемента = Новый Структура("Элемент, Индекс", ЭлементСтруктуры, Структура.Индекс(ЭлементСтруктуры));
			МассивГруппировок.Добавить(СтруктураЭлемента);
		Иначе
			Если (ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
				ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
				ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных")) 
				И ЭлементСтруктуры.Структура.Количество() > 0 Тогда
				НайтиПервыеЭлементыСтруктуры(Имя, ЭлементСтруктуры.Структура, МассивГруппировок);
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
				НайтиПервыеЭлементыСтруктуры(Имя, ЭлементСтруктуры.Строки, МассивГруппировок);
				НайтиПервыеЭлементыСтруктуры(Имя, ЭлементСтруктуры.Колонки, МассивГруппировок);
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
				НайтиПервыеЭлементыСтруктуры(Имя, ЭлементСтруктуры.Серии, МассивГруппировок);
				НайтиПервыеЭлементыСтруктуры(Имя, ЭлементСтруктуры.Точки, МассивГруппировок);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьГруппировкиПользователя(Структура, СписокГруппировки, Строки, МассивСохраненныхЭлементов = Неопределено)
	
	Элемент = Неопределено;
	
	Если ТипЗнч(Структура) = Тип("ТаблицаКомпоновкиДанных") ИЛИ ТипЗнч(Структура) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		
		ТипГруппировки = Тип("ГруппировкаТаблицыКомпоновкиДанных");
		Если Строки Тогда
			Элемент = Структура.Строки;
		Иначе
			Элемент = Структура.Колонки;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Структура) = Тип("ДиаграммаКомпоновкиДанных") ИЛИ ТипЗнч(Структура) = Тип("ГруппировкаДиаграммыКомпоновкиДанных")  Тогда
		
		ТипГруппировки = Тип("ГруппировкаДиаграммыКомпоновкиДанных");
		Если Строки Тогда
			Элемент = Структура.Точки;
		Иначе
			Элемент = Структура.Серии;
		КонецЕсли;
		
	Иначе
		ТипГруппировки = Тип("ГруппировкаКомпоновкиДанных");
		Элемент = Структура.Структура;
	КонецЕсли;
	
	Для Каждого СтрокаГруппировки Из СписокГруппировки Цикл
		
		Если НЕ СтрокаГруппировки.Использование И НЕ СтрокаГруппировки.ИспользованиеИерархии Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипГруппировки = Тип("ГруппировкаКомпоновкиДанных") Тогда
			Группировка = Элемент.Добавить(ТипГруппировки);
		Иначе
			Группировка = Элемент.Добавить();
		КонецЕсли;
		
		Для Каждого Поле Из СтрокаГруппировки.Значение Цикл
			ИндексПоля = СтрокаГруппировки.Значение.Индекс(Поле);
			ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(Поле.Значение);
			ПолеГруппировки.Использование = Истина;
			ТипГруппировкиПоля = СтрокаГруппировки.ЗначениеИерархии.Получить(ИндексПоля);
			Если СтрокаГруппировки.ПредставлениеИерархии <> "" Тогда
				Если СтрокаГруппировки.Использование И СтрокаГруппировки.ИспользованиеИерархии Тогда
					ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
				ИначеЕсли СтрокаГруппировки.Использование И НЕ СтрокаГруппировки.ИспользованиеИерархии Тогда
					ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
				ИначеЕсли НЕ СтрокаГруппировки.Использование И СтрокаГруппировки.ИспользованиеИерархии Тогда
					ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
				КонецЕсли;
			Иначе	
				Если ТипГруппировкиПоля <> Неопределено Тогда
					ПолеГруппировки.ТипГруппировки = ТипГруппировкиПоля.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ВыбраноеПоле = Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ВыбраноеПоле.Использование = Истина;
		Элемент = Группировка.Структура;
		
	КонецЦикла;
	
	Если МассивСохраненныхЭлементов <> Неопределено Тогда
		Для Каждого ПоследнийЭлемент Из МассивСохраненныхЭлементов Цикл
			ТипГруппировки = ТипЗнч(ПоследнийЭлемент);
			Если ТипГруппировки <> Тип("ГруппировкаТаблицыКомпоновкиДанных") И ТипГруппировки <> Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
				Группировка = Элемент.Добавить(ТипГруппировки);
			Иначе
				Группировка = Элемент.Добавить();
			КонецЕсли;
			СкопироватьНастройкиКомпоновкиДанных(Группировка, ПоследнийЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьГруппировку(КомпоновщикНастроек, ЗначенияНастроек)
	
	МассивПервыхЭлементовСтруктуры = Новый Массив;
	НайтиПервыеЭлементыСтруктуры(ЗначенияНастроек.Значение.ИмяГруппировки, КомпоновщикНастроек.Настройки.Структура, МассивПервыхЭлементовСтруктуры);
	
	Для Каждого ПервыйЭлементСтруктуры Из МассивПервыхЭлементовСтруктуры Цикл
		
		Если ТипЗнч(ПервыйЭлементСтруктуры.Элемент) <> Тип("ТаблицаКомпоновкиДанных") И ТипЗнч(ПервыйЭлементСтруктуры.Элемент) <> Тип("ДиаграммаКомпоновкиДанных") тогда
			
			ПоследнийЭлемент = ПоследниеЭлементыСтруктуры(ПервыйЭлементСтруктуры.Элемент);
			МассивСохраненныхЭлементов = Новый Массив;
			
			Если ПоследнийЭлемент <> Неопределено Тогда
				Для Каждого ЭлементСтруктуры Из ПоследнийЭлемент.Родитель.Структура Цикл
					МассивСохраненныхЭлементов.Добавить(ЭлементСтруктуры);
				КонецЦикла;
			КонецЕсли;
			
			Родитель = ПервыйЭлементСтруктуры.Элемент.Родитель;
			Строки = истина;
			
			Если ТипЗнч(Родитель) = Тип("ТаблицаКомпоновкиДанных") Тогда
				Строки =  ?(Родитель.Строки.Индекс(ПервыйЭлементСтруктуры.Элемент) >= 0, Истина, Ложь);
				Если Строки Тогда
					Родитель.Строки.Удалить(ПервыйЭлементСтруктуры.Элемент);
				Иначе
					Родитель.Строки.Удалить(ПервыйЭлементСтруктуры.Элемент);
				КонецЕсли;
			ИначеЕсли ТипЗнч(Родитель) = Тип("ДиаграммаКомпоновкиДанных") Тогда
				Строки =  ?(Родитель.Точки.Индекс(ПервыйЭлементСтруктуры.Элемент) >= 0, Истина, Ложь);
				Если Строки Тогда
					Родитель.Точки.Удалить(ПервыйЭлементСтруктуры.Элемент);
				Иначе
					Родитель.Серии.Удалить(ПервыйЭлементСтруктуры.Элемент);
				КонецЕсли;
			Иначе
				Родитель.Структура.Удалить(ПервыйЭлементСтруктуры.Элемент);
			КонецЕсли;
			
			ДобавитьГруппировкиПользователя(Родитель, ЗначенияНастроек.Значение.СписокГруппировки, Строки, МассивСохраненныхЭлементов);
			
		ИначеЕсли ТипЗнч(ПервыйЭлементСтруктуры.Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ПоследнийЭлемент = ПервыйЭлементСтруктуры;
			ПоследнийЭлемент.Элемент.Строки.Очистить();
			ПоследнийЭлемент.Элемент.Колонки.Очистить();
			ДобавитьГруппировкиПользователя(ПоследнийЭлемент.Элемент, ЗначенияНастроек.Значение.СписокГруппировкиСтрок, истина);
			ДобавитьГруппировкиПользователя(ПоследнийЭлемент.Элемент, ЗначенияНастроек.Значение.СписокГруппировкиКолонок, ложь);
			
		ИначеЕсли ТипЗнч(ПервыйЭлементСтруктуры.Элемент) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ПоследнийЭлемент = ПервыйЭлементСтруктуры;
			ПоследнийЭлемент.Элемент.Точки.Очистить();
			ПоследнийЭлемент.Элемент.Серии.Очистить();
			ДобавитьГруппировкиПользователя(ПоследнийЭлемент.Элемент, ЗначенияНастроек.Значение.СписокГруппировкиСтрок, истина);
			ДобавитьГруппировкиПользователя(ПоследнийЭлемент.Элемент, ЗначенияНастроек.Значение.СписокГруппировкиКолонок, ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьПримененуюНастройку(ОтчетОбъект, КомпоновщикНастроек = Неопределено) Экспорт
	
	Если КомпоновщикНастроек = Неопределено Тогда
		КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	КонецЕсли;
	
	Если ЭтоСтараяВерсияОтчета(ОтчетОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПанели  = ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);
	ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект);
	Если ПараметрыПанели = Неопределено
		ИЛИ ЗначенияНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Установка Настроек компоновки на панели настроек
	Для Каждого ВидимостьСтраницы Из ЗначенияНастроек.ВидимостьСтраниц Цикл
		Если НЕ ВидимостьСтраницы.Значение ИЛИ ВидимостьСтраницы.Ключ = "Показатели" Тогда
			Продолжить;
		КонецЕсли;
		Если ВидимостьСтраницы.Ключ = "Параметры" Тогда
			Попытка
				ЗаполнитьЭлементы(КомпоновщикНастроек.Настройки.ПараметрыДанных, ЗначенияНастроек.НастройкиКомпоновщика.ПараметрыДанных);
			Исключение
			КонецПопытки;
		Иначе
			Попытка
				СкопироватьЭлементы(КомпоновщикНастроек.Настройки[ВидимостьСтраницы.Ключ], ЗначенияНастроек.НастройкиКомпоновщика[ВидимостьСтраницы.Ключ], , Истина);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначенияНастроек.Свойство("Показатели") Тогда
		ПоляВыбора = ПолучитьВыбранныеПоля(ОтчетОбъект.КомпоновщикНастроек);
		Для Каждого ПолеВыбора Из ПоляВыбора Цикл
			Если ЗначенияНастроек.Показатели.Получить(Строка(ПолеВыбора.Поле)) <> Неопределено тогда
				ПолеВыбора.Использование = ЗначенияНастроек.Показатели.Получить(Строка(ПолеВыбора.Поле));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Установим у всех параметров использование
	Попытка
		Для Каждого ЗначениеПараметра Из ЗначенияНастроек.НастройкиКомпоновщика.ПараметрыДанных.Элементы Цикл
			ЗначениеПараметра.Использование = Истина;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	// Установка параметра ПериодОтчета
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчета"));
	ЕстьПериод = ПараметрыПанели.ДеревоНастроекСтандартныхСтраниц.Строки.НайтиСтроки(Новый Структура("Имя", "Период"))[0].Использование;
	Если ЕстьПериод И ЗначениеПараметра <> Неопределено Тогда
		Периоды = ПолучитьСписокПериодов(ЗначенияНастроек.НастройкаПериода.Период, ПараметрыПанели);
		ЗначениеПараметра.Использование = Периоды.Количество() <> 0;
		Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("СписокЗначений") Тогда
			ЗначениеПараметра.Значение = Периоды;
		Иначе
			ЗначениеПараметра.Значение = Периоды[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПанели.ДеревоНастроекСтандартныхСтраниц.Строки.Найти("Период").Использование Тогда
		// Установка Стандартного периода
		ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
		ЗначениеПараметраКонецПериода  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
		Если ЗначениеПараметраНачалоПериода <> Неопределено И ЗначениеПараметраКонецПериода <> Неопределено Тогда
			
			СтандартныйПериод = Неопределено;
			ЗначенияНастроек.Свойство("СтандартныйПериод", СтандартныйПериод);
			Если СтандартныйПериод <> Неопределено Тогда
				Если СтандартныйПериод.ДатаНачала <> '00010101' Тогда
					ЗначениеПараметраНачалоПериода.Использование = Истина;
					ЗначениеПараметраНачалоПериода.Значение = СтандартныйПериод.ДатаНачала;
				КонецЕсли;
				Если СтандартныйПериод.ДатаОкончания <> '00010101' Тогда
					ЗначениеПараметраКонецПериода.Использование = Истина;
					ЗначениеПараметраКонецПериода.Значение = СтандартныйПериод.ДатаОкончания;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Установка Стандартной даты начала
		ЗначениеПараметраПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		Если ЗначениеПараметраПериод <> Неопределено Тогда
			СтандартнаяДатаНачала = Неопределено;
			ЗначенияНастроек.Свойство("СтандартнаяДатаНачала", СтандартнаяДатаНачала);
			Если СтандартнаяДатаНачала <> Неопределено Тогда
				Если СтандартнаяДатаНачала.Дата <> '00010101' Тогда
					ЗначениеПараметраПериод.Использование = Истина;
					ЗначениеПараметраПериод.Значение = СтандартнаяДатаНачала.Дата;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Установка Динамических параметров
	Если ЗначенияНастроек.Свойство("ДинамическиеПараметры") И ПараметрыПанели.Свойство("Параметры") Тогда
		Для Каждого СтрокаПараметра Из ПараметрыПанели.Параметры Цикл
			ЗначениеПараметра = ЗначенияНастроек.ДинамическиеПараметры[СтрокаПараметра.Параметр];
			Если ЗначениеПараметра = Неопределено ИЛИ НЕ ЗначениеПараметра.Использование Тогда
				Продолжить;
			КонецЕсли;
			УстановитьПараметр(КомпоновщикНастроек, ЗначениеПараметра.Параметр, ЗначениеПараметра.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Установка Динамических отборов
	Для Каждого СтрокаОтбора Из ПараметрыПанели.Отборы Цикл
		ЗначениеОтбора = ЗначенияНастроек.ДинамическиеОтборы[СтрокаОтбора.Поле];

		Если ЗначениеОтбора = Неопределено Тогда
			Продолжить;
		КонецЕсли;                                                                                        
		Если СтрокаОтбора.ВидОтбора = "Список" ИЛИ СтрокаОтбора.ВидОтбора = "ДлинныйСписок" Тогда

			Если ЗначениеОтбора.ВидСравнения = "" Тогда
				ЗначениеОтбора.Использование = Ложь;	
			КонецЕсли;
			
			Если ЗначениеОтбора.ВидСравнения = "Исключая" Тогда
				ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных["Не" + СтрокаОтбора.ВидСравнения];
			Иначе
				ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных[СтрокаОтбора.ВидСравнения];
			КонецЕсли;
			
		Иначе
			ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных[СтрокаОтбора.ВидСравнения];
		КонецЕсли;
		
		ОтборНайден = ЗаменитьПравоеЗначениеСуществующегоОтбора(КомпоновщикНастроек, ЗначениеОтбора.Поле, ЗначениеОтбора.Значение, ВидСравненияКомпоновки, ЗначениеОтбора.Использование);
		
		Если НЕ ОтборНайден Тогда
			ДобавитьОтбор(КомпоновщикНастроек, ЗначениеОтбора.Поле, ЗначениеОтбора.Значение, ВидСравненияКомпоновки, ЗначениеОтбора.Использование);
		КонецЕсли;
	КонецЦикла;
	
	УдалитьДублиОтбора(КомпоновщикНастроек);
	
	Если ЗначенияНастроек.Свойство("ДинамическиеГруппировки") И ПараметрыПанели.Свойство("Группировки") Тогда
		
		Для Каждого ЗначениДинГруппировки Из ЗначенияНастроек.ДинамическиеГруппировки Цикл
			УстановитьГруппировку(КомпоновщикНастроек, ЗначениДинГруппировки);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьИспользованныеПоляРасшифровки(СписокПолейРасшифровки, МассивПолейРасшифровки)
	
	Для Каждого ПолеРасшифровки Из МассивПолейРасшифровки Цикл
		
		Поле = Неопределено;
		
		Если ТипЗНч(ПолеРасшифровки) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
			Поле = ПолеРасшифровки.Поле
		ИначеЕсли ТипЗнч(ПолеРасшифровки) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Поле = ПолеРасшифровки.ЛевоеЗначение;
		КонецЕсли;
		
		ПолеСписка = СписокПолейРасшифровки.НайтиПоЗначению(Строка(Поле));
		
		Если ПолеСписка <> Неопределено Тогда
			СписокПолейРасшифровки.Удалить(ПолеСписка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоля(Элементы, СписокПолей, СписокПолейИсключений)   
	
	Для Каждого ДоступноеПоле Из Элементы Цикл
		
		Если СписокПолейИсключений.НайтиПоЗначению(Строка(ДоступноеПоле.Поле)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДоступноеПоле.Папка Тогда
			ДобавитьПоля(ДоступноеПоле.Элементы, СписокПолей, СписокПолейИсключений);
		Иначе
			СписокПолей.Добавить(Строка(ДоступноеПоле.Поле));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСписокПолейКомпоновщикаНастроек(ОтчетОбъект, КомпоновщикНастроек) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	
	СписокПолейИсключений = Новый СписокЗначений;
	Если ЗначениеЗаполнено(ОтчетОбъект.СохраненнаяНастройка) Тогда
		Если ТипЗнч(ОтчетОбъект.ПараметрыПанелиПользователя) = Тип("ХранилищеЗначения") Тогда
			НастройкиПанели = ОтчетОбъект.ПараметрыПанелиПользователя.Получить();
			Если НастройкиПанели.Свойство("СписокИсключаемыхПолейРасшифровки") Тогда
				СписокПолейИсключений = НастройкиПанели.СписокИсключаемыхПолейРасшифровки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьПоля(КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы, СписокПолей, СписокПолейИсключений);
	
	Возврат СписокПолей;
	
КонецФункции

Функция ПолучитьОтчетДляРасшифровкиПереопределяемая(ОтчетОбъект) Экспорт

	Если ЭтоВнешнийОбъект(ОтчетОбъект) Тогда
		НовыйОтчет = ВнешниеОтчеты.Создать(ОтчетОбъект.ИспользуемоеИмяФайла);
	Иначе
		НовыйОтчет = Отчеты[ОтчетОбъект.Метаданные().Имя].Создать();
	КонецЕсли;
	
	НовыйОтчет.СохраненнаяНастройка = ОтчетОбъект.СохраненнаяНастройка;
	НовыйОтчет.ПрименитьНастройку();
	
	Если НовыйОтчет.Метаданные().Реквизиты.Найти("ЗначенияНастроекПанелиПользователя") <> Неопределено тогда
		НовыйОтчет.ЗначенияНастроекПанелиПользователя = Неопределено;
	КонецЕсли;
	
	Возврат НовыйОтчет;
	
КонецФункции //

Процедура ОбработкаВыбораФормыОтчета(ОтчетОбъект, ФормаОтчета, ЗначениеВыбора, Источник) Экспорт
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("СхемаКомпоновкиДанных") Тогда
		
		Если НЕ ЗаписьОтчетаДоступна(ОтчетОбъект) Тогда
			Предупреждение("Право на изменение отчета имеет только владелец");
			Возврат;
		КонецЕсли;
		
		// Запишем схему компоновки в реквизит
		ОтчетОбъект.СхемаКомпоновкиДанных = Новый ХранилищеЗначения(ЗначениеВыбора);
		
		ИнициализироватьКомпоновщикНастроек(ОтчетОбъект, ЗначениеВыбора);
		ОтчетОбъект.ПрименитьНастройку();
		ОбработкаФормыПослеПримененияНастройки(ОтчетОбъект, ФормаОтчета, Истина);
		ФормаОтчета.Модифицированность = Истина;
		
	ИначеЕсли Найти(Источник.КлючУникальности, "ОтборПо") <> 0 Тогда
		
		Индекс = Число(Прав(Источник.КлючУникальности, СтрДлина(Источник.КлючУникальности)-7));
		СтрокаТаблицыЗначений = ФормаОтчета.ЭлементыФормы["ДинамическийОтбор" + Индекс + "ТабличноеПоле"].Значение.Добавить();
		СтрокаТаблицыЗначений.Значение = ЗначениеВыбора;
		ОбновитьИзмененияТабличногоПоля(ФормаОтчета.ЭлементыФормы, Индекс);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПоляВНастройкеПользователя(ВыбранныеПоляПользователя, ВыбранныеПоля) Экспорт
	Если ВыбранныеПоляПользователя.Элементы.Количество() = 0 тогда
		СкопироватьЭлементы(ВыбранныеПоляПользователя, ВыбранныеПоля);
		Возврат;
	КонецЕсли;
КонецПроцедуры

#КонецЕсли

Функция ЗагрузитьНастройкуПредопределенногоЭлемента(НазваниеМакета, ОтчетНазвание = Неопределено, ТекстовыйДокумент = Неопределено, Перезаписать = ложь) Экспорт
	
	БылиИзменения = Ложь;
	
	Настройка = Неопределено;
	
	Если ОтчетНазвание = Неопределено И ТекстовыйДокумент = Неопределено Тогда
		Возврат БылиИзменения;
	ИначеЕсли ТекстовыйДокумент <> Неопределено тогда
		Настройка = ПолучитьНастройкуОтчета(ТекстовыйДокумент.ПолучитьТекст());
	ИначеЕсли ОтчетНазвание <> Неопределено Тогда
		ОбъектМетаданных = Метаданные.Отчеты.Найти(ОтчетНазвание);
		Если ОбъектМетаданных <> Неопределено И ОбъектМетаданных.Макеты.Найти(НазваниеМакета) <> Неопределено Тогда
			ДвоичныеДанные = Отчеты[ОтчетНазвание].ПолучитьМакет(НазваниеМакета);
			ИмяВременогоФайла = ПолучитьИмяВременногоФайла();
			ДвоичныеДанные.Записать(ИмяВременогоФайла);
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(ИмяВременогоФайла);
			Настройка = ПолучитьНастройкуОтчета(ТекстовыйДокумент.ПолучитьТекст());
		КонецЕсли;
	КонецЕсли;
	
	Если Настройка = Неопределено Тогда
		Возврат БылиИзменения;
	КонецЕсли;
	СохраненаяНастройка = Неопределено;
	Выполнить("СохраненаяНастройка = Справочники.СохраненныеНастройки." + НазваниеМакета);
	
	Если ЗначениеЗаполнено(СохраненаяНастройка) Тогда
		ОбъектСохраненаяНастройка = СохраненаяНастройка.ПолучитьОбъект();
		
		Если СохраненаяНастройка.НастраиваемыйОбъект <> Настройка.НастраиваемыйОбъект Тогда
			ОбъектСохраненаяНастройка.НастраиваемыйОбъект = Настройка.НастраиваемыйОбъект;
			БылиИзменения = Истина;
		КонецЕсли;
		
		Если СохраненаяНастройка.ТипНастройки <> Перечисления.ТипыНастроек.НастройкиОтчета Тогда
			ОбъектСохраненаяНастройка.ТипНастройки = Перечисления.ТипыНастроек.НастройкиОтчета;
			БылиИзменения = Истина;
		КонецЕсли;
		
		Если СохраненаяНастройка.Наименование = "" Тогда
			ОбъектСохраненаяНастройка.Наименование = Настройка.Наименование;
			БылиИзменения = Истина;
		КонецЕсли;
		
		Если СохраненаяНастройка.Описание <> Настройка.Описание Тогда
			ОбъектСохраненаяНастройка.Описание = Настройка.Описание;
			БылиИзменения = Истина;
		КонецЕсли;
		
		Если СохраненаяНастройка.Пользователи.Количество() = 0 Тогда
			НоваяСтрока = ОбъектСохраненаяНастройка.Пользователи.Добавить();
			НоваяСтрока.Пользователь = Справочники.ГруппыПользователей.ВсеПользователи;
			НоваяСтрока.ПравоИзменения = Истина;
			БылиИзменения = Истина;
		КонецЕсли;
		
		НастройкаТекущая = СохраненаяНастройка.ХранилищеНастроек.Получить();
		ИзмениласьНастройка = НастройкаТекущая <> Неопределено И НастройкаТекущая.Свойство("Изменялась") И НастройкаТекущая.Изменялась;
		Если НастройкаТекущая = Неопределено ИЛИ НЕ ИзмениласьНастройка ИЛИ Перезаписать Тогда
			ОбъектСохраненаяНастройка.ХранилищеНастроек = Новый ХранилищеЗначения(Настройка.ХранилищеНастроек.Получить());
			БылиИзменения = Истина;
		КонецЕсли;
	КонецЕсли;
	Если БылиИзменения Тогда
		ОбъектСохраненаяНастройка.Записать();
		УдалитьПользовательскиеНастройки(ОбъектСохраненаяНастройка.Ссылка);
	КонецЕсли;
	
	Возврат БылиИзменения;
	
КонецФункции

Процедура УдалитьПользовательскиеНастройки(Ссылка)
	
	ТЗ = "ВЫБРАТЬ
		|	СохраненныеНастройки.Ссылка
		|ИЗ
		|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
		|ГДЕ
		|	СохраненныеНастройки.ТипНастройки = &ТипНастройки
		|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект";
		 
	Запрос = Новый Запрос(ТЗ);
	Запрос.УстановитьПараметр("ТипНастройки",  Перечисления.ТипыНастроек.НастройкиПользователяНастройкиОтчета);
	Запрос.УстановитьПараметр("НастраиваемыйОбъект",  Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Удалить();
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьНастройкуОтчета(ТекстФайлаНастройки) Экспорт
	
	СтруктураНастроек = Новый Структура("Версия, Наименование, НастраиваемыйОбъект, Описание, ХранилищеНастроек");
	
	НачалоВерсии = Найти(ТекстФайлаНастройки, "<ВЕРСИЯ>");
	КонецВерсии  = Найти(ТекстФайлаНастройки, "</ВЕРСИЯ>");
	СтруктураНастроек.Версия = Сред(ТекстФайлаНастройки, НачалоВерсии + 8, КонецВерсии - НачалоВерсии - 8); 
	НачалоНаименования = Найти(ТекстФайлаНастройки, "<НАИМЕНОВАНИЕ>");
	КонецНаименования  = Найти(ТекстФайлаНастройки, "</НАИМЕНОВАНИЕ>");
	СтруктураНастроек.Наименование = Сред(ТекстФайлаНастройки, НачалоНаименования + 14, КонецНаименования - НачалоНаименования - 14); 
	НачалоОбъект = Найти(ТекстФайлаНастройки, "<ОБЪЕКТ>");
	КонецОбъект  = Найти(ТекстФайлаНастройки, "</ОБЪЕКТ>");
	СтруктураНастроек.НастраиваемыйОбъект = Сред(ТекстФайлаНастройки, НачалоОбъект + 8, КонецОбъект - НачалоОбъект - 8 ); 
	НачалоОписание = Найти(ТекстФайлаНастройки, "<ОПИСАНИЕ>");
	КонецОписание  = Найти(ТекстФайлаНастройки, "</ОПИСАНИЕ>");
	СтруктураНастроек.Описание = Сред(ТекстФайлаНастройки, НачалоОписание + 10,  КонецОписание - НачалоОписание - 10 ); 
	НачалоНастройки = Найти(ТекстФайлаНастройки, "<НАСТРОЙКА>");
	КонецНастройки  = Найти(ТекстФайлаНастройки, "</НАСТРОЙКА>");
	СтрокаXML = Сред(ТекстФайлаНастройки, НачалоНастройки + 11, КонецНастройки - НачалоНастройки - 11);
	Попытка                   
		СтруктураНастроек.ХранилищеНастроек = ПрочитатьОбъект(СтрокаXML); 
	Исключение
		СтруктураНастроек = Неопределено; 
	КонецПопытки;
	
	Возврат СтруктураНастроек;
	
КонецФункции

Функция ПрочитатьОбъект(СтрокаXML) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	Объект = ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	Возврат Объект;
	
КонецФункции

Функция ПолучитьИмяОтчета(НазваниеМакета) Экспорт
	
	СписокНастроек = ПолучитьТаблицуПредопределенныхНастроек();
	СтрокиСписка = СписокНастроек.НайтиСтроки(Новый Структура("Макет", НазваниеМакета));
	ОтчетНазваниеОтчета = "";
	Если СтрокиСписка.Количество() = 1 тогда
		НазваниеОтчета = СтрокиСписка[0].Отчет;
	КонецЕсли;
	
	Возврат НазваниеОтчета;
	
КонецФункции

Функция ПолучитьТаблицуПредопределенныхНастроек() Экспорт
	
	СписокНастроек = Новый ТаблицаЗначений;
	СписокНастроек.Колонки.Добавить("Макет");
	СписокНастроек.Колонки.Добавить("Представление");
	СписокНастроек.Колонки.Добавить("Отчет");
	СписокНастроек.Колонки.Добавить("ОтчетПредставление");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
		|	СохраненныеНастройки.Ссылка
		|ИЗ
		|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
		|ГДЕ
		|	СохраненныеНастройки.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокПредопределенныхМакетов = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СписокПредопределенныхМакетов.Добавить(Справочники.СохраненныеНастройки.ПолучитьИмяПредопределенного(Выборка.Ссылка));
	КонецЦикла;
	
	Для Каждого МетаДанныеОтчета Из Метаданные.Отчеты Цикл
		Для Каждого Макет Из МетаДанныеОтчета.Макеты Цикл
			Если Строка(Макет.ТипМакета) <> "ДвоичныеДанные" ИЛИ СписокПредопределенныхМакетов.НайтиПоЗначению(Макет.Имя) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаб                    = СписокНастроек.Добавить();
			СтрокаТаб.Макет              = Макет.Имя;
			СтрокаТаб.Отчет              = МетаДанныеОтчета.Имя;
			СтрокаТаб.ОтчетПредставление = МетаДанныеОтчета.Синоним;
			СтрокаТаб.Представление      = Макет.Синоним;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокНастроек;
	
КонецФункции

Процедура ОбновитьПредопределенныеВариантыОтчетов(СписокВариантов = Неопределено, Перезаписать = Ложь) Экспорт
	
	СписокНастроек = Новый СписокЗначений;
	СоответсвиеИмяОтчета = Новый Соответствие;
	
	ТаблицаНастроек = ПолучитьТаблицуПредопределенныхНастроек();
	
	Если СписокВариантов = Неопределено Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаНастроек Цикл
			СписокНастроек.Добавить(СтрокаТаблицы.Макет,  "Отчет: " + СтрокаТаблицы.ОтчетПредставление + " - " +  СтрокаТаблицы.Представление);
			СоответсвиеИмяОтчета.Вставить(СтрокаТаблицы.Макет, СтрокаТаблицы.Отчет);
		КонецЦикла;
		СписокНастроек.ОтметитьЭлементы("Выберите варианты отчетов, которые требуется обновить:");
		Кол = СписокНастроек.Количество();
		КолУдаленных = 0;
		Для Сч = 0 По Кол - 1 Цикл
			Если НЕ СписокНастроек.Получить(Сч - КолУдаленных).Пометка Тогда
				СписокНастроек.Удалить(Сч - КолУдаленных);
			КонецЕсли;
		КонецЦикла
	Иначе
		Для Каждого Вариант Из СписокВариантов Цикл
			СтрокаТаблицы = ТаблицаНастроек.Найти(Вариант.Значение, "Макет");
			Если СтрокаТаблицы <> Неопределено Тогда
				СписокНастроек.Добавить(СтрокаТаблицы.Макет,  "Отчет: " + СтрокаТаблицы.ОтчетПредставление + " - " +  СтрокаТаблицы.Представление);
				СоответсвиеИмяОтчета.Вставить(СтрокаТаблицы.Макет, СтрокаТаблицы.Отчет);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗагрузитьНастройкиОтчетов(СписокНастроек, СоответсвиеИмяОтчета, Перезаписать)
	
КонецПроцедуры

Процедура ЗагрузитьНастройкиОтчетов(СписокНастроек, СоответсвиеИмяОтчета = Неопределено, Перезаписать = Ложь) Экспорт
	
	Для Каждого ЭлементСпискаНастроек Из СписокНастроек Цикл
		
		Если СоответсвиеИмяОтчета = Неопределено Тогда 
			ИмяОтчета = ПолучитьИмяОтчета(ЭлементСпискаНастроек.Значение)
		Иначе
			ИмяОтчета = СоответсвиеИмяОтчета.Получить(ЭлементСпискаНастроек.Значение);
		КонецЕсли;
		ЗагрузитьНастройкуПредопределенногоЭлемента(ЭлементСпискаНастроек.Значение, ИмяОтчета,,Перезаписать );
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗагрузитьНастройкуОтчета(СохраненаяНастройка, Настройка, ОбновлятьЭлемент = Ложь, ЗаписыватьЭлемент = Истина) Экспорт
	
	БылиИзменения = Ложь;
	
	Если СохраненаяНастройка <> Неопределено И СохраненаяНастройка <> Справочники.СохраненныеНастройки.ПустаяСсылка() Тогда
		ОбъектСохраненаяНастройка = СохраненаяНастройка.ПолучитьОбъект();
		
		Если СохраненаяНастройка.НастраиваемыйОбъект <> Настройка.НастраиваемыйОбъект Тогда
			ОбъектСохраненаяНастройка.НастраиваемыйОбъект = Настройка.НастраиваемыйОбъект;
			БылиИзменения = Истина;
		КонецЕсли;
		
		Если СохраненаяНастройка.ТипНастройки <> Перечисления.ТипыНастроек.НастройкиОтчета Тогда
			ОбъектСохраненаяНастройка.ТипНастройки = Перечисления.ТипыНастроек.НастройкиОтчета;
			БылиИзменения = Истина;
		КонецЕсли;
		
		Если СохраненаяНастройка.Наименование = "" Тогда
			ОбъектСохраненаяНастройка.Наименование = Настройка.Наименование;
			БылиИзменения = Истина;
		КонецЕсли;
		
		Если СохраненаяНастройка.Описание <> Настройка.Описание Тогда
			ОбъектСохраненаяНастройка.Описание = Настройка.Описание;
			БылиИзменения = Истина;
		КонецЕсли;
		
		Если СохраненаяНастройка.Пользователи.Количество() = 0 Тогда
			НоваяСтрока = ОбъектСохраненаяНастройка.Пользователи.Добавить();
			НоваяСтрока.Пользователь = Справочники.ГруппыПользователей.ВсеПользователи;
			НоваяСтрока.ПравоИзменения = Истина;
			БылиИзменения = Истина;
		КонецЕсли;
		
		НастройкаТекущая = СохраненаяНастройка.ХранилищеНастроек.Получить();
		Если НастройкаТекущая = Неопределено ИЛИ НЕ НастройкаТекущая.Свойство("Изменялась", Истина) ИЛИ ОбновлятьЭлемент Тогда
			ОбъектСохраненаяНастройка.ХранилищеНастроек = Новый ХранилищеЗначения(Настройка.ХранилищеНастроек.Получить());
			БылиИзменения = Истина;
		КонецЕсли;
	КонецЕсли;
	Если БылиИзменения и ЗаписыватьЭлемент тогда
		ОбъектСохраненаяНастройка.Записать();
	КонецЕсли;
	
	Возврат БылиИзменения;
	
КонецФункции

Функция ПолучитьИмяФайлаДляНастройки(Знач ИмяФайла, Ссылка) Экспорт
	
	ИмяФайла = СокрЛП(ИмяФайла);
	ИмяФайла = СтрЗаменить(ИмяФайла, "\", "");
	ИмяФайла = СтрЗаменить(ИмяФайла, ":", "");
	ИмяФайла = СтрЗаменить(ИмяФайла, "?", "");
	ИмяФайла = СтрЗаменить(ИмяФайла, "*", "");
	ИмяФайла = СтрЗаменить(ИмяФайла, "/", "");
	ИмяФайла = СтрЗаменить(ИмяФайла, "&", "");
	ИмяФайла = СтрЗаменить(ИмяФайла, """", "");
	ИмяФайла = СтрЗаменить(ИмяФайла, "<", "");
	ИмяФайла = СтрЗаменить(ИмяФайла, ">", "");
	ИмяФайла = СтрЗаменить(ИмяФайла, "|", "");
	
	НазваниеОтчета = Ссылка.НастраиваемыйОбъект;
	НазваниеОтчета = СтрЗаменить(НазваниеОтчета, "ОтчетОбъект.", "");
	ИмяФайла = НазваниеОтчета + "_" + ИмяФайла;
	
	Возврат ИмяФайла;
	
КонецФункции

Процедура ПолучитьФайлСНастройкойОтчета(НастройкаОтчета, ТекстовыйДокумент) Экспорт
	
	Настройка = НастройкаОтчета.ХранилищеНастроек.Получить();
	
	Если Настройка <> Неопределено И Настройка.Свойство("Изменялась") Тогда 
		Настройка.Удалить("Изменялась");
	КонецЕсли;
	
	ТекстовыйДокумент.ДобавитьСтроку("<НАСТРОЙКА_ВАРИАНТА_ОТЧЕТА>");
	
	Если Настройка <> Неопределено И Настройка.Свойство("Версия") Тогда
		ТекстовыйДокумент.ДобавитьСтроку("<ВЕРСИЯ>" + Настройка.Версия + "</ВЕРСИЯ>");
	КонецЕсли;
	ТекстовыйДокумент.ДобавитьСтроку("<НАИМЕНОВАНИЕ>" + НастройкаОтчета.Наименование + "</НАИМЕНОВАНИЕ>");
	ТекстовыйДокумент.ДобавитьСтроку("<ОБЪЕКТ>" + НастройкаОтчета.НастраиваемыйОбъект + "</ОБЪЕКТ>");
	ТекстовыйДокумент.ДобавитьСтроку("<ОПИСАНИЕ>" + НастройкаОтчета.Описание + "</ОПИСАНИЕ>");
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	ЗаписатьXML(ЗаписьXML, Новый ХранилищеЗначения(Настройка));
	СтрокаXML = ЗаписьXML.Закрыть();
	ТекстовыйДокумент.ДобавитьСтроку("<НАСТРОЙКА>" + СтрокаXML + "</НАСТРОЙКА>");
	ТекстовыйДокумент.ДобавитьСтроку("</НАСТРОЙКА_ВАРИАНТА_ОТЧЕТА>");
	
КонецПроцедуры

#Если Клиент Тогда

Функция НайтиВладельцаПоФорме(ОтчетОбъект, ЭтаФорма, Элемент, ПолеОтбора, ПолеЗначения) Экспорт
	
	ЗначениеВладельца = Неопределено;
	Отбор = ПолучитьОтборИзФормы(ОтчетОбъект, ЭтаФорма, Элемент);
	Если Отбор.СтрокаОтбора.Поле = ПолеОтбора ИЛИ ПолеОтбора.НайтиПоЗначению(Отбор.СтрокаОтбора.Поле) <> Неопределено Тогда
		Отбор = ТиповыеОтчеты.ПолучитьОтборИзФормы(ОтчетОбъект, ЭтаФорма, ПолеЗначения);
		Если Отбор <> Неопределено Тогда
			ЗначениеВладельца = Отбор.Значение;
		КонецЕсли;
		Параметр = ПолучитьПараметрИзФормы(ОтчетОбъект, ЭтаФорма, ПолеЗначения);
		Если ЗначениеВладельца = Неопределено И Параметр <> Неопределено Тогда
			ЗначениеВладельца = Параметр.Значение;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеВладельца) = Тип("СписокЗначений") Тогда
			Если ЗначениеВладельца.Количество() > 0 Тогда
				ЗначениеВладельца = ЗначениеВладельца.Получить(0).Значение;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЗначениеВладельца) = Тип("ТаблицаЗначений") Тогда
			Если ЗначениеВладельца.Количество() > 0 Тогда
				ЗначениеВладельца = ЗначениеВладельца.Получить(0).Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ЗначениеВладельца;
	
КонецФункции

Функция ПолучитьОтборИзФормы(ОтчетОбъект, ФормаОтчета, Элемент) Экспорт
	
	Параметры = ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	Если ТипЗнч(Элемент) <> Тип("Строка") И ТипЗнч(Элемент) <> Тип("ПолеКомпоновкиДанных") Тогда
		Если Лев(Элемент.Имя, 17) <> "ДинамическийОтбор" Тогда
			Возврат Неопределено;
		КонецЕсли;
		Индекс = Число(Сред(Элемент.Имя, 18, 1));
		СтрокаОтбора = Параметры.Отборы[Индекс];
	Иначе
		Поле         = Строка(Элемент);
		СтрокаОтбора = Параметры.Отборы.Найти(Поле, "Поле");
		Если СтрокаОтбора <> Неопределено Тогда
			Индекс = Параметры.Отборы.Индекс(СтрокаОтбора);
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаОтбора = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значение = Неопределено;
	ВидСравненияОтбора = Неопределено;
	Использование = Неопределено;
	
	Если СтрокаОтбора.Расположение = "ГоризонтальнаяПанель" Тогда
		ЭлементУпраления = ЭлементыФормы["ДинамическийОтбор" + Индекс + "ПолеВвода"];
		Значение         = ЭлементУпраления.Значение;
		Использование    = ЗначениеЗаполнено(ЭлементУпраления.Значение);
		ВидСравненияОтбора = СтрокаОтбора.ВидСравнения;
	Иначе
		Если СтрокаОтбора.ВидОтбора = "Список" ИЛИ СтрокаОтбора.ВидОтбора = "ДлинныйСписок" Тогда
			ЭлементУпраления = ЭлементыФормы["ДинамическийОтбор" + Индекс + "ТабличноеПоле"];
			Значение         = ЭлементУпраления.Значение;
			ВидСравненияОтбора     = ЭлементыФормы["ДинамическийОтбор" + Индекс + "ВидСравнения"].Значение;     
			Использование    = Истина;
			Если ВидСравненияОтбора = "Выбранные" Тогда
				ВидСравненияОтбора = СтрокаОтбора.ВидСравнения;
			ИначеЕсли ВидСравненияОтбора = "Исключая" Тогда
				ВидСравненияОтбора = ВидСравненияКомпоновкиДанных["Не" + СтрокаОтбора.ВидСравнения];
			Иначе
				ВидСравненияОтбора = СтрокаОтбора.ВидСравнения;
				Использование = Ложь;
			КонецЕсли;
		ИначеЕсли СтрокаОтбора.ВидОтбора = "ФлажокЗначение" ИЛИ СтрокаОтбора.ВидОтбора = "Значение" Тогда
			ЭлементУпраления = ЭлементыФормы["ДинамическийОтбор" + Индекс + "ПолеВвода"];
			Значение         = ЭлементУпраления.Значение;
			Если СтрокаОтбора.ВидОтбора = "ФлажокЗначение" Тогда
				Использование = ЭлементыФормы["ДинамическийОтбор" + Индекс + "Флажок"].Значение;
			Иначе
				Использование = ЗначениеЗаполнено(ЭлементУпраления.Значение);
			КонецЕсли;
			ВидСравненияОтбора = СтрокаОтбора.ВидСравнения;
		ИначеЕсли СтрокаОтбора.ВидОтбора = "Флажок" Тогда
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("СтрокаОтбора, Индекс, Значение, ВидСравнения, Использование",СтрокаОтбора, Индекс, Значение, ВидСравненияОтбора);
	
КонецФункции

Функция ПолучитьПараметрИзФормы(ОтчетОбъект, ФормаОтчета, Элемент) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	Параметры = ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);
	СтрокаПараметра = Неопределено;
	Индекс = Неопределено;
	
	Если НЕ Параметры.Свойство("Параметры") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Элемент) <> Тип("Строка") И ТипЗнч(Элемент) <> Тип("ПараметрКомпоновкиДанных") Тогда
		Если Лев(Элемент.Имя, 20) <> "ДинамическийПараметр" Тогда
			Возврат Неопределено;
		КонецЕсли;
		Индекс = Число(Сред(Элемент.Имя, 21, 1));
		СтрокаПараметра = Параметры.Параметры[Индекс];
	Иначе
		Параметр  = Строка(Элемент);
		СтрокаПараметра = Параметры.Параметры.Найти(Параметр, "Параметр");
		Если СтрокаПараметра <> Неопределено Тогда
			Индекс          = Параметры.Параметры.Индекс(СтрокаПараметра);
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаПараметра = Неопределено ИЛИ Индекс = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значение = Неопределено;
	Использование = Неопределено;
	
	Если СтрокаПараметра.ОтображатьКак = "ПолеВвода" Тогда
		Значение = ЭлементыФормы["ДинамическийПараметр" + Индекс + "ПолеВвода"].Значение;
	Иначе
		Если СтрокаПараметра.ВыводитьНа = "ГоризонтальнаяПанель" И СтрокаПараметра.ОтображатьКак = "СписокЗначение" тогда
			Значение = ЭлементыФормы["ДинамическийПараметр" + Индекс + "ПолеВвода"].Значение;
			Значение = Значение.Выгрузить("Значение");
		ИначеЕсли СтрокаПараметра.ОтображатьКак = "Переключатель" Тогда
			Значение = ЭлементыФормы["ДинамическийПараметр" + Индекс + 0 + "Переключатель"].Значение;
		КонецЕсли;
	КонецЕсли;
	Использование = ЗначениеЗаполнено(Значение);
	
	Возврат Новый Структура("СтрокаПараметра, Индекс, Значение, Использование", СтрокаПараметра, Индекс, Значение, Использование);
	
КонецФункции

//#КонецЕсли

//Функция возвращает информацию об ответственных лицах организации и их должностях 
// Параметр принимает значение: 
	// , 
	//РуководительФИзЛицо,
	//РуководительДолжность, 
	//РуководительДолжностьСсылка,
	//ГлавныйБухгалтер, 
	//ГлавныйБухгалтерФИзЛицо,
	//ГлавныйБухгалтерДолжность, 
	//ГлавныйБухгалтерДолжностьСсылка,
	//ГлавныйБухгалтерДляПодписиБанковскихДокументов,
	//ГлавныйБухгалтерДляПодписиБанковскихДокументовДолжность,
	//УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтера,
	//УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтераДолжность,
	//УполномоченныйПодписыватьСчетаФактурыЗаРуководителя,
	//УполномоченныйПодписыватьСчетаФактурыЗаРуководителяДолжность,
	//Кассир, 
	//КассирФИзЛицо,								
	//КассирДолжность, 
	//КассирДолжностьСсылка,
	//Исполнитель, 
	//ИсполнительДолжность, 
	//ОтветственныйЗаРегистры,
	//ОтветственныйЗаРегистрыДолжность,
	//РуководительКадровойСлужбы,
	//РуководительКадровойСлужбыДолжность,
	//РуководительКадровойСлужбыДолжностьСсылка,
	//РуководительКадровойСлужбыФизЛицо
Функция ОтветственноеЛицоОрганизацииСКД(Организация, ДатаСреза, Параметр) Экспорт

	Результат = "";
	Если Параметр = "Исполнитель" ИЛИ Параметр = "ИсполнительДолжность" Тогда
		ОтветственныеЛица = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(Организация, ДатаСреза, глЗначениеПеременной("глТекущийПользователь").ФизЛицо);
	Иначе
		ОтветственныеЛица = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(Организация, ДатаСреза);
	КонецЕсли;
	
	Результат = ОтветственныеЛица[Параметр];
	
	Если Результат = Неопределено Тогда
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ОтветственныеЛицаОрганизации()

//Обновляет элементы формы типового отчета по компоновщику настроек
Процедура ОбновитьФормуТиповогоОтчетаПоКомпоновщикуБК(ОтчетОбъект, ФормаОтчета) Экспорт
	
	Если ЭтоСтараяВерсияОтчета(ОтчетОбъект) Тогда
		// Параметры периода
		ЗначениеПараметраНачалоПериода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
		ЗначениеПараметраКонецПериода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
		ЗначениеПараметраПериод = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		
		Попытка
			Если ЗначениеПараметраНачалоПериода <> Неопределено 
				И ЗначениеПараметраКонецПериода <> Неопределено Тогда
				Если НЕ ЗначениеЗаполнено(ФормаОтчета.НачалоПериода) Тогда
					ФормаОтчета.НачалоПериода = ЗначениеПараметраНачалоПериода.Значение;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ФормаОтчета.КонецПериода) Тогда
					ФормаОтчета.КонецПериода = ЗначениеПараметраКонецПериода.Значение;
				КонецЕсли;
				ФормаОтчета.ЭлементыФормы.ПанельПериод.ТекущаяСтраница = ФормаОтчета.ЭлементыФормы.ПанельПериод.Страницы.Интервал;
			ИначеЕсли ЗначениеПараметраПериод <> Неопределено Тогда
				Если НЕ ЗначениеЗаполнено(ФормаОтчета.Период) Тогда
					ФормаОтчета.Период = ЗначениеПараметраПериод.Значение;
				КонецЕсли;
				ФормаОтчета.ЭлементыФормы.ПанельПериод.ТекущаяСтраница = ФормаОтчета.ЭлементыФормы.ПанельПериод.Страницы.Период;
			Иначе
				ФормаОтчета.ЭлементыФормы.ПанельПериод.ТекущаяСтраница = ФормаОтчета.ЭлементыФормы.ПанельПериод.Страницы.Пустой;
			КонецЕсли;
			
			// Вывод заголовка отменяется
			Значение = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TitleOutput")).Значение;
			Пометка = (Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить);
			Если ФормаОтчета.ЭлементыФормы.ДействияФормы.Кнопки.Найти("Заголовок") <> Неопределено тогда
				ФормаОтчета.ЭлементыФормы.ДействияФормы.Кнопки.Заголовок.Пометка = Пометка;
			КонецЕсли;
		Исключение
		КонецПопытки;
	Иначе
		
		ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект);
		ВыводитьЗаголовокОтчета = Истина;
		Если ЗначенияНастроек = Неопределено
			ИЛИ Не ЗначенияНастроек.Свойство("ВыводитьЗаголовокОтчета", ВыводитьЗаголовокОтчета) Тогда
			ВыводитьЗаголовок = Истина;	
		Иначе
			ВыводитьЗаголовок = ВыводитьЗаголовокОтчета;
		КонецЕсли;
		Если ФормаОтчета.ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Найти("Заголовок") <> Неопределено тогда 
			ФормаОтчета.ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Заголовок.Пометка = ВыводитьЗаголовок;
		КонецЕсли;
		
		ДополнительныеНастройкиОтчета = Новый Массив;
		Попытка 
			ДополнительныеНастройкиОтчета = ОтчетОбъект.ПолучитьДополнительныеНастройкиОтчета();
		Исключение
		КонецПопытки;
		Для каждого ДопНастройка из ДополнительныеНастройкиОтчета Цикл
			ЗначениеФлажка = ДопНастройка.ЗначениеПоУмолчанию;
			Если ЗначенияНастроек = Неопределено
				ИЛИ Не ЗначенияНастроек.Свойство(ДопНастройка.Имя, ЗначениеФлажка) Тогда
				Флажок = ложь;	
			Иначе
				Флажок = ЗначениеФлажка;
			КонецЕсли;
			Если ФормаОтчета.ЭлементыФормы.Найти(ДопНастройка.Имя) <> Неопределено тогда
				ФормаОтчета.ЭлементыФормы[ДопНастройка.Имя].Значение = Флажок;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначенияНастроек = Неопределено тогда
			СкопироватьЭлементы(ФормаОтчета.КомпоновщикНастроекПользователя.Настройки.Выбор, ФормаОтчета.КомпоновщикНастроек.Настройки.Выбор);
		Иначе
			ВыбранныеПоляПользователя = ФормаОтчета.КомпоновщикНастроекПользователя.Настройки.Выбор;
			ВыбранныеПоля = ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор;
			ОбновитьПоляВНастройкеПользователя(ВыбранныеПоляПользователя, ВыбранныеПоля);
		КонецЕсли;
		ВосстановитьПараметрыТабличногоДокумента(ФормаОтчета.ЭлементыФормы.Результат, ОтчетОбъект.СохраненнаяНастройка);	
		
	КонецЕсли;
	
КонецПроцедуры

//Обновляет элементы формы типового отчета по компоновщику настроек
Процедура ОбновитьФормуТиповогоОтчетаПоКомпоновщикуЗУП(ОтчетОбъект, ФормаОтчета) Экспорт
	
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоСтараяВерсияОтчета(ОтчетОбъект) Тогда
		// Параметры периода
		ЗначениеПараметраНачалоПериода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
		ЗначениеПараметраКонецПериода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
		ЗначениеПараметраПериод = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		
		Если ЗначениеПараметраНачалоПериода <> Неопределено 
		   И ЗначениеПараметраКонецПериода <> Неопределено Тогда
			ФормаОтчета.НачалоПериода = ЗначениеПараметраНачалоПериода.Значение;
			ФормаОтчета.КонецПериода = ЗначениеПараметраКонецПериода.Значение;
			ФормаОтчета.ЭлементыФормы.ПанельПериод.ТекущаяСтраница = ФормаОтчета.ЭлементыФормы.ПанельПериод.Страницы.Интервал;
		ИначеЕсли ЗначениеПараметраПериод <> Неопределено Тогда
			ФормаОтчета.Период = ЗначениеПараметраПериод.Значение;
			ФормаОтчета.ЭлементыФормы.ПанельПериод.ТекущаяСтраница = ФормаОтчета.ЭлементыФормы.ПанельПериод.Страницы.Период;
		Иначе
			ФормаОтчета.ЭлементыФормы.ПанельПериод.ТекущаяСтраница = ФормаОтчета.ЭлементыФормы.ПанельПериод.Страницы.Пустой;
		КонецЕсли;
		
		// Вывод заголовка отменяется
		Значение = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TitleOutput")).Значение;
		Пометка = (Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить);
		ФормаОтчета.ЭлементыФормы.ДействияФормы.Кнопки.Заголовок.Пометка = Пометка;
		
	Иначе
		
		ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект);
		ВыводитьЗаголовокОтчета = Истина;
		Если ЗначенияНастроек = Неопределено
			ИЛИ НЕ ЗначенияНастроек.Свойство("ВыводитьЗаголовокОтчета", ВыводитьЗаголовокОтчета) Тогда
			ВыводитьЗаголовок = Истина;	
		Иначе
			ВыводитьЗаголовок = ВыводитьЗаголовокОтчета;
		КонецЕсли;
		Если ФормаОтчета.ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Найти("Заголовок") <> Неопределено тогда 
			ФормаОтчета.ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Заголовок.Пометка = ВыводитьЗаголовок;
		КонецЕсли;
		
		ДополнительныеНастройкиОтчета = Новый Массив;
		ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
		
		Если ПараметрыИсполненияОтчета.Свойство("ДополнительныеНастройкиОтчета") И ПараметрыИсполненияОтчета.ДополнительныеНастройкиОтчета тогда
			ДополнительныеНастройкиОтчета = ОтчетОбъект.ПолучитьДополнительныеНастройкиОтчета();
		КонецЕсли;
		
		Для Каждого ДопНастройка Из ДополнительныеНастройкиОтчета Цикл
			ЗначениеФлажка = ДопНастройка.ЗначениеПоУмолчанию;
			Если ЗначенияНастроек = Неопределено
				ИЛИ НЕ ЗначенияНастроек.Свойство(ДопНастройка.Имя, ЗначениеФлажка) Тогда
				Флажок = Ложь;	
			Иначе
				Флажок = ЗначениеФлажка;
			КонецЕсли;
			Если ФормаОтчета.ЭлементыФормы.Найти(ДопНастройка.Имя) <> Неопределено Тогда
				ФормаОтчета.ЭлементыФормы[ДопНастройка.Имя].Значение = Флажок;
			КонецЕсли;
		КонецЦикла;
		
		ВосстановитьПараметрыТабличногоДокумента(ФормаОтчета.ЭлементыФормы.Результат, ОтчетОбъект.СохраненнаяНастройка);	
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначенияНастроекПанелиПользователяБК(ОтчетОбъект, ФормаОтчета) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	ЗначенияНастроек = Новый Структура;
	
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		
		//АналитическиеОтборы
		ЗначенияАналитическихОтборов = Новый Структура;
		ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыКоличествоТоп");
		ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыПроцентТоп");
		ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыПолеТоп");
		
		ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыПроцентПорог");
		ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыРесурсПорог");
		ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыПолеПорог");
		
		ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыПолеОтборТренд");
		ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыЗначениеОтборТренд");
		ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыПолеОтборСостояние");
		ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыЗначениеОтборСостояние");
		ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыПолеОтборABCКлассификация");
		ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыЗначениеОтборABCКлассификация");
		ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыСкрытьНулевые");
		ЗначенияНастроек.Вставить("АналитическиеОтборы", ЗначенияАналитическихОтборов);
		
		//НастройкиПрогноза
		ЗначенияНастроекПрогноза = Новый Структура;
		ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияНастроекПрогноза, "НастройкиПрогнозаПрогноз");
		ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияНастроекПрогноза, "НастройкиПрогнозаДатаОтсчета");
		ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияНастроекПрогноза, "НастройкиПрогнозаКоличествоАнализ");
		ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияНастроекПрогноза, "НастройкиПрогнозаКоличествоПрогноз");
		ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияНастроекПрогноза, "НастройкиПрогнозаПоказательПрогноза");
		ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияНастроекПрогноза, "НастройкиПрогнозаПолеПрогноза");
		ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияНастроекПрогноза, "НастройкиПрогнозаПериодичность");
		ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияНастроекПрогноза, "НастройкиПрогнозаКратность");
		ЗначенияНастроек.Вставить("НастройкиПрогноза", ЗначенияНастроекПрогноза);
		
		// НастройкаПериода
		НП = Новый Структура;
		НП.Вставить("Период", ФормаОтчета.Период);
		НП.Вставить("ТекущаяДата", ТекущаяДата());
		ЗначенияНастроек.Вставить("НастройкаПериода", НП);
		
	Иначе
		ЗначенияНастроек.Вставить("ВыводитьЗаголовокОтчета", ФормаОтчета.ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Заголовок.Пометка);
		ЗначенияНастроек.Вставить("ФормироватьПриОткрытии", Ложь);
	КонецЕсли;
	
	//ДинамическиеОтборы
	ЗначенияНастроек.Вставить("ДинамическиеОтборы", ПолучитьСтруктуруДинамическихОтборов(ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект), ЭлементыФормы));
	
	Попытка
		ЗначенияНастроек.Вставить("НастройкиКомпоновщика", ФормаОтчета.КомпоновщикНастроекПользователя.ПолучитьНастройки());
		
	Исключение
	КонецПопытки;
	
	// Запомним видимость страниц компоновки чтобы при загрузке значений знать,
	// брать из значений по умолчанию или из запомненных значений
	ВидимостьСтраниц = Новый Соответствие;
	ВидимостьСтраниц.Вставить("Параметры", ЭлементыФормы.ПанельЗакладок.Страницы.Параметры.Видимость);
	ВидимостьСтраниц.Вставить("Отбор", ЭлементыФормы.ПанельЗакладок.Страницы.Отбор.Видимость);
	ВидимостьСтраниц.Вставить("Порядок", ЭлементыФормы.ПанельЗакладок.Страницы.Порядок.Видимость);
	ЗначенияНастроек.Вставить("ВидимостьСтраниц", ВидимостьСтраниц);
	
	// Стандартный период
	ЗначенияНастроек.Вставить("СтандартныйПериод", ФормаОтчета.СтандартныйПериод);
	
	// Стандартная дата начала
	ЗначенияНастроек.Вставить("СтандартнаяДатаНачала", ФормаОтчета.СтандартнаяДатаНачала);
	
	Возврат ЗначенияНастроек;
	
КонецФункции


Функция ПолучитьЗначенияНастроекПанелиПользователяЗУП(ОтчетОбъект, ФормаОтчета, ЗначенияКомпоновщика = Ложь) Экспорт
	
	ПараметрыИсполненияОтчета = Неопределено;
	ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	ЗначенияНастроек = Новый Структура;
	
	Если ФормаОтчета.ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Найти("Заголовок") <> Неопределено Тогда
		Пометка = ФормаОтчета.ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Заголовок.Пометка;
	Иначе
		Пометка = Ложь;
	КонецЕсли;
	ЗначенияНастроек.Вставить("ВыводитьЗаголовокОтчета", Пометка);
	ЗначенияНастроек.Вставить("ФормироватьПриОткрытии", Ложь);
	
	НастройкиКомпоновщика = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();
	
	Если ЗначенияКомпоновщика Тогда
		
		ТаблицаОтборов 	  = Новый ТаблицаЗначений;                             
		ТаблицаОтборов.Колонки.Добавить("ВидСравнения");
		ТаблицаОтборов.Колонки.Добавить("ЛевоеЗначение");
		ТаблицаОтборов.Колонки.Добавить("ПравоеЗначение");
		ТаблицаОтборов.Колонки.Добавить("Использование");
		
		ТаблицаПараметров = Новый ТаблицаЗначений;
		ТаблицаПараметров.Колонки.Добавить("Значение");
		ТаблицаПараметров.Колонки.Добавить("Параметр");
		
		Для Каждого СтрокаОтбора Из НастройкиКомпоновщика.Отбор.Элементы Цикл
			СтрокаТаблицаОтборов = ТаблицаОтборов.Добавить();
			СтрокаТаблицаОтборов.ВидСравнения = СтрокаОтбора.ВидСравнения;
			СтрокаТаблицаОтборов.ЛевоеЗначение = СтрокаОтбора.ЛевоеЗначение;
			СтрокаТаблицаОтборов.ПравоеЗначение = СтрокаОтбора.ПравоеЗначение;
			СтрокаТаблицаОтборов.Использование  = СтрокаОтбора.Использование;
		КонецЦикла;
		
		Для Каждого СтрокаПараметра Из НастройкиКомпоновщика.ПараметрыДанных.Элементы Цикл
			СтрокаТаблицаПараметров = ТаблицаПараметров.Добавить();
			СтрокаТаблицаПараметров.Значение = СтрокаПараметра.Значение;
			СтрокаТаблицаПараметров.Параметр = Строка(СтрокаПараметра.Параметр);
		КонецЦикла;
		
	КонецЕсли;

	//ДинамическиеОтборы
	ЗначенияНастроек.Вставить("ДинамическиеОтборы", 	 ПолучитьСтруктуруДинамическихОтборов(ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект), ЭлементыФормы, ?(ЗначенияКомпоновщика, ТаблицаОтборов, Неопределено)));
	ЗначенияНастроек.Вставить("ДинамическиеПараметры",   ПолучитьСтруктуруДинамическихПараметров(ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект), ЭлементыФормы, ?(ЗначенияКомпоновщика, ТаблицаПараметров, Неопределено)));
	ЗначенияНастроек.Вставить("ДинамическиеГруппировки", ПолучитьСтруктуруДинамическихГруппировок(ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект), ЭлементыФормы));
	
	ЗначенияНастроек.Вставить("НастройкиКомпоновщика", ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки());
	
	ДополнительныеНастройкиОтчета = Новый Массив;
	ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
	Если ПараметрыИсполненияОтчета.Свойство("ДополнительныеНастройкиОтчета") И ПараметрыИсполненияОтчета.ДополнительныеНастройкиОтчета Тогда
		ДополнительныеНастройкиОтчета = ОтчетОбъект.ПолучитьДополнительныеНастройкиОтчета();
	КонецЕсли;
	
	Для Каждого ДопНастройка Из ДополнительныеНастройкиОтчета Цикл
		Если ЭлементыФормы.Найти(ДопНастройка.Имя) <> Неопределено Тогда
			ЗначенияНастроек.Вставить(ДопНастройка.Имя, ЭлементыФормы[ДопНастройка.Имя].Значение);
		Иначе
			ЗначенияНастроек.Вставить(ДопНастройка.Имя, Ложь);
		КонецЕсли;
	КонецЦИкла;
	
	// Запомним видимость страниц компоновки чтобы при загрузке значений знать,
	// брать из значений по умолчанию или из запомненных значений
	ВидимостьСтраниц = Новый Соответствие;
	ВидимостьСтраниц.Вставить("Параметры", ЭлементыФормы.ПанельЗакладок.Страницы.Параметры.Видимость);
	ВидимостьСтраниц.Вставить("Отбор", 	   ЭлементыФормы.ПанельЗакладок.Страницы.Отбор.Видимость);
	ВидимостьСтраниц.Вставить("Порядок",   ЭлементыФормы.ПанельЗакладок.Страницы.Порядок.Видимость);
	Если ЭлементыФормы.ПанельЗакладок.Страницы.Найти("Показатели") <> Неопределено Тогда
		ВидимостьСтраниц.Вставить("Показатели", ЭлементыФормы.ПанельЗакладок.Страницы.Показатели.Видимость);
		ЗначенияНастроек.Вставить("Показатели", ПолучитьСтруктуруПоказателей(ЭлементыФормы));
	КонецЕсли;
	
	ЗначенияНастроек.Вставить("ВидимостьСтраниц", ВидимостьСтраниц);
	
	СтандартныйПериод     = ФормаОтчета.СтандартныйПериод;           
	СтандартнаяДатаНачала = ФормаОтчета.СтандартнаяДатаНачала;

	Если ЗначенияКомпоновщика Тогда
		
		НачалоПериода = ?(ТаблицаПараметров.Найти("НачалоПериода") = Неопределено, Дата("00010101"), ?(ТипЗнч(ТаблицаПараметров.Найти("НачалоПериода").Значение) = Тип("Дата"), ТаблицаПараметров.Найти("НачалоПериода").Значение, Дата("00010101")));	
		КонецПериода  = ?(ТаблицаПараметров.Найти("КонецПериода") = Неопределено, Дата("00010101"), ?(ТипЗнч(ТаблицаПараметров.Найти("КонецПериода").Значение) = Тип("Дата"), ТаблицаПараметров.Найти("КонецПериода").Значение, Дата("00010101")));
		Период		  = ?(ТаблицаПараметров.Найти("Период") = Неопределено, Дата("00010101"), ?(ТипЗнч(ТаблицаПараметров.Найти("Период").Значение) = Тип("Дата"), ТаблицаПараметров.Найти("Период").Значение, Дата("00010101")));
		
		Если (СтандартныйПериод.ДатаНачала <> НачалоПериода ИЛИ СтандартныйПериод.ДатаОкончания <> КонецПериода) Тогда
			СтандартныйПериод.ДатаНачала	= НачалоПериода;
			СтандартныйПериод.ДатаОкончания = КонецПериода;
			Если СтандартныйПериод.Вариант <> ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
				СтандартныйПериод.Вариант	= ВариантСтандартногоПериода.ПроизвольныйПериод;
			КонецЕсли;				
		КонецЕсли;
		
		Если СтандартнаяДатаНачала.Дата <> Период Тогда
			СтандартнаяДатаНачала.Дата = Период;
			Если СтандартнаяДатаНачала.Вариант <> ВариантСтандартнойДатыНачала.ПроизвольнаяДата Тогда
				СтандартнаяДатаНачала.Вариант = ВариантСтандартнойДатыНачала.ПроизвольнаяДата;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	// Стандартный период
	ЗначенияНастроек.Вставить("СтандартныйПериод", СтандартныйПериод);
	
	// Стандартная дата начала
	ЗначенияНастроек.Вставить("СтандартнаяДатаНачала", СтандартнаяДатаНачала);
	
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПриПолучениеНастроекПользователя") И ПараметрыИсполненияОтчета.ПриПолучениеНастроекПользователя тогда
		ФормаОтчета.ПриПолучениеНастроекПользователя(ЗначенияНастроек);
	КонецЕсли;
	
	Возврат ЗначенияНастроек;
	
КонецФункции
	
Процедура ОбработкаНажатияКнопкиПодборБК(ОтчетОбъект, ФормаОтчета, Элемент) Экспорт
	
	Параметры = ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);
	Индекс = Число(Сред(Элемент.Имя, 18, 1));
	СтрокаОтбора = Параметры.Отборы[Индекс];
	ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(СтрокаОтбора.Поле, ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора);
	МассивТипов = ДоступноеПоле.Тип.Типы();
	
	Если МассивТипов.Количество() > 1 Тогда
		СписокТипов = Новый СписокЗначений;
		СписокТипов.ЗагрузитьЗначения(МассивТипов);
		ВыбранныйТип = ФормаОтчета.ВыбратьИзМеню(СписокТипов);
		Если ВыбранныйТип = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ТипПоля = ВыбранныйТип.Значение;
	ИначеЕсли МассивТипов.Количество() = 1 Тогда
		ТипПоля = МассивТипов[0];
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипПоля);
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаВыбора = Справочники[ОбъектМетаданных.Имя].ПолучитьФормуВыбора(, ФормаОтчета, "ОтборПо" + Индекс);
	ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ОбработкаНажатияКнопкиПодборЗУП(ОтчетОбъект, ФормаОтчета, Элемент, Владелец = Неопределено, НазваниеРеквизита = "", СписокТипов = Неопределено) Экспорт
	
		Параметры = ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);
		Индекс = Число(Сред(Элемент.Имя, 18, 1));
		СтрокаОтбора = Параметры.Отборы[Индекс];
		МассивТипов = Новый Массив;
		Если СписокТипов = Неопределено тогда
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(СтрокаОтбора.Поле, ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора);
			СписокТипов = ДоступноеПоле.Тип.Типы();
			
			МассивТипов = Новый Массив;
			Для Каждого ТипЗнач Из СписокТипов Цикл
				Если ТипЗнач <> Тип("Строка") и ТипЗнач <> Тип("Число") и ТипЗнач <> Тип("Дата") и ТипЗнач <> Тип("NULL")
					и ТипЗнач <> Тип("ВидДвиженияНакопления") и ТипЗнач <> Тип("Булево") и ТипЗнач <> Тип("ХранилищеЗначения") 
					тогда
					МассивТипов.Добавить(ТипЗнач);
				КонецЕсли;
			КонецЦикла;
		Иначе
			МассивТипов = СписокТипов;
		КонецЕсли;
		
		Если МассивТипов.Количество() > 1 Тогда
			СписокТипов = Новый СписокЗначений;
			СписокТипов.ЗагрузитьЗначения(МассивТипов);
			ВыбранныйТип = ФормаОтчета.ВыбратьИзМеню(СписокТипов);
			Если ВыбранныйТип = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ТипПоля = ВыбранныйТип.Значение;
		ИначеЕсли МассивТипов.Количество() = 1 Тогда
			ТипПоля = МассивТипов[0];
		Иначе
			Возврат;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипПоля);
		Если ОбъектМетаданных = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЭлементСписок = ФормаОтчета.ЭлементыФормы.Найти("ДинамическийОтбор"+Индекс+"ТабличноеПоле");
		
		Если Метаданные.Справочники.Найти(ОбъектМетаданных.Имя) <> Неопределено тогда
			ФормаВыбора = Справочники[ОбъектМетаданных.Имя].ПолучитьФормуВыбора(, ФормаОтчета, "ОтборПо" + Индекс);
			
			ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
			Если Владелец <> Неопределено тогда
				ФормаВыбора.ПараметрОтборПоВладельцу = Владелец;
				ФормаВыбора.ПараметрВыборПоВладельцу = Владелец;
				Если НазваниеРеквизита <> "" тогда
					ОтборПоРеквизиту =  ФормаВыбора.Отбор.Найти(НазваниеРеквизита); 
					Если ОтборПоРеквизиту <> Неопределено тогда
						Если ТипЗнч(Владелец) = Тип("ТаблицаЗначений") тогда
							Если Владелец.Количество() > 0 тогда
								ОтборПоРеквизиту.Значение = Владелец[0].Значение;
							КонецЕсли;
						ИначеЕсли ТипЗнч(Владелец) = Тип("СписокЗначений") тогда
							Если Владелец.Количество() > 0 тогда
								ОтборПоРеквизиту.Значение = Владелец[0].Значение;
							КонецЕсли;
						Иначе
							ОтборПоРеквизиту.Значение = Владелец;
						КонецЕсли;
						ОтборПоРеквизиту.Использование = ?(ЗначениеЗаполнено(Владелец), Истина, Ложь);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Метаданные.Документы.Найти(ОбъектМетаданных.Имя) <> Неопределено тогда
			ФормаВыбора = Документы[ОбъектМетаданных.Имя].ПолучитьФормуВыбора(, ФормаОтчета, "ОтборПо" + Индекс);
			ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
		КонецЕсли;
		
		Если Метаданные.Перечисления.Найти(ОбъектМетаданных.Имя) <> Неопределено тогда
			ФормаВыбора = Перечисления[ОбъектМетаданных.Имя].ПолучитьФормуВыбора(, ФормаОтчета, "ОтборПо" + Индекс);
			ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
		КонецЕсли;
		
		Если Метаданные.ПланыВидовРасчета.Найти(ОбъектМетаданных.Имя) <> Неопределено тогда
			ФормаВыбора = ПланыВидовРасчета[ОбъектМетаданных.Имя].ПолучитьФормуВыбора(, ФормаОтчета, "ОтборПо" + Индекс);
			ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
		КонецЕсли;
		
		Если Метаданные.ПланыВидовХарактеристик.Найти(ОбъектМетаданных.Имя) <> Неопределено тогда
			ФормаВыбора = ПланыВидовХарактеристик[ОбъектМетаданных.Имя].ПолучитьФормуВыбора(, ФормаОтчета, "ОтборПо" + Индекс);
			ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
		КонецЕсли;
		
		Если Метаданные.ПланыСчетов.Найти(ОбъектМетаданных.Имя) <> Неопределено тогда
			ФормаВыбора = ПланыВидовХарактеристик[ОбъектМетаданных.Имя].ПолучитьФормуВыбора(, ФормаОтчета, "ОтборПо" + Индекс);
			ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
		КонецЕсли;
		
		Если Метаданные.Задачи.Найти(ОбъектМетаданных.Имя) <> Неопределено тогда
			ФормаВыбора = Задачи[ОбъектМетаданных.Имя].ПолучитьФормуВыбора(, ФормаОтчета, "ОтборПо" + Индекс);
			ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
		КонецЕсли;
		
		ФормаВыбора.КлючУникальности = "ОтборПо" + Индекс;
		ФормаВыбора.Открыть();
	
КонецПроцедуры

// Отрабатывает расшифровки типового отчета
Процедура ОбработкаРасшифровкиТиповогоОтчетаБК(Расшифровка, СтандартнаяОбработка, ОтчетОбъект, ФормаОтчета) Экспорт
	
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		ФормаОтчета.ОбработкаРасшифровкиАналитическогоОтчета(Расшифровка, СтандартнаяОбработка);
		Возврат;
	КонецЕсли;
		
	Если ОтчетОбъект.РасширеннаяНастройка Тогда
		СтандартнаяОбработкаРасшифровкиТиповогоОтчета(ОтчетОбъект, ФормаОтчета, Расшифровка, СтандартнаяОбработка);
		Возврат;
	КонецЕсли;
	
	ЭтоВнешнийОтчет = ЭтоВнешнийОбъект(ОтчетОбъект);
	
	СтандартнаяОбработка = Ложь;
	
	ЭтоДетальнаяЗапись = ЭтоДетальнаяЗапись(ФормаОтчета.ДанныеРасшифровки, Расшифровка);
	МассивПолейРасшифровки = ПолучитьМассивПолейРасшифровки(Расшифровка, ФормаОтчета.ДанныеРасшифровки);
	МассивПолейРасшифровкиСРесурсами = ПолучитьМассивПолейРасшифровки(Расшифровка, ФормаОтчета.ДанныеРасшифровки, , Истина);
	
	// Получим имена полей расшифровываемой ячейки
	МассивПолей = Новый Массив; 
	Для каждого ПолеРасшифровки Из МассивПолейРасшифровкиСРесурсами Цикл
		Если ТипЗнч(ПолеРасшифровки) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда 
			МассивПолей.Добавить(ПолеРасшифровки.Поле);
		КонецЕсли;
	КонецЦикла;
	
	СписокДоступныхРасшифровок = Новый СписокЗначений;
	
	// Добавим в список выбора расшифровки другие отчеты
	Если ОтчетОбъект.Расшифровки <> Неопределено И ТипЗнч(ОтчетОбъект.Расшифровки) <> Тип("СписокЗначений") Тогда
		Расшифровки = ОтчетОбъект.Расшифровки.Получить();
		Для каждого ОтчетРасшифровки Из Расшифровки Цикл
			
			ПолеНайдено = ОтчетРасшифровки.Поля.Количество() = 0;
			Для каждого Поле Из МассивПолей Цикл
				Если ОтчетРасшифровки.Поля.НайтиПоЗначению(Поле) <> Неопределено Тогда
					ПолеНайдено = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ПолеНайдено Тогда
				Продолжить;
			КонецЕсли;
			СписокДоступныхРасшифровок.Добавить(ОтчетРасшифровки, ОтчетРасшифровки.Представление,, );
			
		КонецЦикла;
	КонецЕсли;
	
	// Добавим в список выбора расшифровки Открыть значение
	Индекс = 0;
	Для каждого ПолеРасшифровки Из МассивПолейРасшифровки Цикл
		Если ТипЗнч(ПолеРасшифровки) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных")
		   И ПолеРасшифровки.Значение <> Null Тогда
			СписокДоступныхРасшифровок.Добавить("ОткрытьЗначение" + Формат(Индекс, "ЧЦ=2; ЧН=; ЧВН="), "Открыть: " + ПолеРасшифровки.Поле + " = """ +  ПолеРасшифровки.Значение + """",,БиблиотекаКартинок.Лупа);
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если Не ЭтоДетальнаяЗапись И Не ЭтоВнешнийОтчет Тогда
		СписокДоступныхРасшифровок.Добавить("Расшифровать", "Расшифровать...",,);
	КонецЕсли;
	
	Если СписокДоступныхРасшифровок.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли СписокДоступныхРасшифровок.Количество() = 1 Тогда
		ВыбранноеЗначение = СписокДоступныхРасшифровок[0];
	Иначе
		ВыбранноеЗначение = ФормаОтчета.ВыбратьИзМеню(СписокДоступныхРасшифровок);
	КонецЕсли;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	ИначеЕсли ВыбранноеЗначение.Значение = "СтандартнаяРасшифровка" Тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	ИначеЕсли Лев(ВыбранноеЗначение.Значение, 15) = "ОткрытьЗначение" Тогда
		// Открыть значение
		ОткрытьЗначение(МассивПолейРасшифровки[Число(Прав(ВыбранноеЗначение.Значение,2))].Значение);
	ИначеЕсли ВыбранноеЗначение.Значение = "Расшифровать" Тогда
		// Расшифровать собственным отчетом
		ФормаВыбораПоля = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
		ФормаВыбораПоля.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
		РодителиПоля = Новый Массив;
		ДобавитьРодителей(ФормаОтчета.ДанныеРасшифровки.Элементы[Расшифровка], ФормаОтчета.ДанныеРасшифровки, РодителиПоля);
		ФормаВыбораПоля.РодителиПоля = РодителиПоля;
		Результат = ФормаВыбораПоля.ОткрытьМодально();
		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ФормаОтчета.ДанныеРасшифровки, 
		  Новый ИсточникДоступныхНастроекКомпоновкиДанных(ОтчетОбъект.СхемаКомпоновкиДанных));
		
		НастройкиКомпоновки = ОбработкаРасшифровки.Расшифровать(Расшифровка, Результат.Поле);
		
		НовыйОтчет = Отчеты[ОтчетОбъект.Метаданные().Имя].Создать();
		ЗаполнитьЗначенияСвойств(НовыйОтчет, ОтчетОбъект, , "СохраненнаяНастройка");
		НовыйОтчет.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновки);

		Группировка = ПолучитьПоследнийЭлементСтруктуры(НовыйОтчет.КомпоновщикНастроек);
		Если Группировка.Порядок.Элементы.Количество() = 0 Тогда
			ДобавитьАвтоЭлементПорядка(Группировка);
		КонецЕсли;
		
		ФормаНовогоОтчета = НовыйОтчет.ПолучитьФорму();
		НазначитьФормеУникальныйКлючИдентификации(ФормаНовогоОтчета);
		ФормаНовогоОтчета.ЭтоОтработкаРасшифровки = Истина;
		Если Не ЭтоСтараяВерсияОтчета(ОтчетОбъект) Тогда
			ФормаНовогоОтчета.РежимРедактированияНастройки = Истина;
			ФормаНовогоОтчета.ПредставлениеНастройки = "Расшифровка " + Символы.ПС + ОтчетОбъект.СохраненнаяНастройка;
		КонецЕсли;
		ФормаНовогоОтчета.Открыть();
		ФормаНовогоОтчета.ОбновитьОтчет();
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение.Значение) = Тип("СтрокаТаблицыЗначений") Тогда
		// Расшифровать другим отчетом
		НовыйОтчет = Отчеты[ВыбранноеЗначение.Значение.Отчет].Создать();
		НовыйОтчет.СохраненнаяНастройка = ВыбранноеЗначение.Значение.СохраненнаяНастройка;
		НовыйОтчет.ПрименитьНастройку();
		НовыйОтчет.Настроить(МассивПолейРасшифровки);
		ФормаНовогоОтчета = НовыйОтчет.ПолучитьФорму();
		НазначитьФормеУникальныйКлючИдентификации(ФормаНовогоОтчета);
		ФормаНовогоОтчета.ЭтоОтработкаРасшифровки = Истина;
		ФормаНовогоОтчета.РежимРедактированияНастройки = Истина;
		ФормаНовогоОтчета.ПредставлениеНастройки = "Расшифровка " + Символы.ПС + ОтчетОбъект.СохраненнаяНастройка;
		ФормаНовогоОтчета.Открыть();
		ФормаНовогоОтчета.ОбновитьОтчет()
	КонецЕсли;
	
КонецПроцедуры

// Отрабатывает расшифровки типового отчета
Функция ОбработкаРасшифровкиТиповогоОтчетаЗУП(Расшифровка, СтандартнаяОбработка, ОтчетОбъект, ФормаОтчета, ДополнительныеРасшифровки = Неопределено) Экспорт
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
		И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ЭтоДетальнаяЗапись = ЭтоДетальнаяЗапись(ФормаОтчета.ДанныеРасшифровки, Расшифровка);
	МассивПолейРасшифровки = ПолучитьМассивПолейРасшифровки(Расшифровка, ФормаОтчета.ДанныеРасшифровки);
	МассивПолейРасшифровкиСРесурсами = ПолучитьМассивПолейРасшифровки(Расшифровка, ФормаОтчета.ДанныеРасшифровки, , Истина);
	
	ДотупноеПоле = Неопределено;
	Если МассивПолейРасшифровкиСРесурсами.Количество() > 0 Тогда
		ДотупноеПоле = ПолучитьДоступноеПоле(Новый ПолеКомпоновкиДанных(МассивПолейРасшифровкиСРесурсами[0].Поле), ОтчетОбъект.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Команда = Неопределено;
	
	Если ЭтоДетальнаяЗапись Тогда
		Команда = "ОткрытьЗначение";
	КонецЕсли;
	
	Значение = МассивПолейРасшифровкиСРесурсами[0].Значение;
	ПолеРасшифровки = ДотупноеПоле.Поле;
	ЭтоЧисловойРесурс = ДотупноеПоле <> Неопределено И ДотупноеПоле.Ресурс И (ДотупноеПоле.Тип.СодержитТип(Тип("Число")) или ТипЗнч(Значение) = Тип("Число") или Значение = NULL);
	
	Если ЭтоЧисловойРесурс И НЕ ЭтоДетальнаяЗапись тогда
		Команда = "РасшифроватьПоле";
	Иначе
		Команда = "ОткрытьЗначение";
	КонецЕсли;
	
	Если Команда = "ОткрытьЗначение" Тогда
		Если МассивПолейРасшифровкиСРесурсами[0].Значение <> NULL тогда
			ОткрытьЗначение(МассивПолейРасшифровкиСРесурсами[0].Значение);
		КонецЕсли;
	ИначеЕсли Команда = "РасшифроватьПоле" Тогда
		
		СписокПолейРасшифровки = ПолучитьСписокПолейКомпоновщикаНастроек(ОтчетОбъект, ОтчетОбъект.КомпоновщикНастроек);
		
		УдалитьИспользованныеПоляРасшифровки(СписокПолейРасшифровки, МассивПолейРасшифровки);
		
		СписокДоступныхРасшифровок = Новый СписокЗначений;
		
		Для Каждого ПолеСпискаРасшифровки Из СписокПолейРасшифровки Цикл
			ДостпноеПоле = ПолучитьДоступноеПоле(Новый ПолеКомпоновкиДанных(ПолеСпискаРасшифровки.Значение), ОтчетОбъект.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок);
			СписокДоступныхРасшифровок.Добавить(ПолеСпискаРасшифровки.Значение, ДостпноеПоле.Заголовок);
		КонецЦикла;
		
		Если ДополнительныеРасшифровки <> Неопределено тогда
			Для Каждого ЭлементСписка Из ДополнительныеРасшифровки Цикл
				СписокДоступныхРасшифровок.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
			КонецЦИкла;
		КонецЕсли;
		
		СписокДоступныхРасшифровок.Добавить("Полный список полей для расшифровки...");
		Если СписокДоступныхРасшифровок.Количество() > 1 тогда
			Поле = ФормаОтчета.ВыбратьИзМеню(СписокДоступныхРасшифровок);
			Если Поле <> Неопределено тогда
				Поле = Поле.Значение;
			Иначе 
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			Поле = "Полный список полей для расшифровки...";
		КонецЕсли;
		
		Если Поле = "Полный список полей для расшифровки..." тогда
			// Расшифровать собственным отчетом
			ФормаВыбораПоля = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
			ФормаВыбораПоля.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
			РодителиПоля = Новый Массив;
			ДобавитьРодителей(ФормаОтчета.ДанныеРасшифровки.Элементы[Расшифровка], ФормаОтчета.ДанныеРасшифровки, РодителиПоля);
			ФормаВыбораПоля.РодителиПоля = РодителиПоля;
			Поле = ФормаВыбораПоля.ОткрытьМодально();
			Если Поле = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			Поле = Строка(Поле.Поле);
		ИначеЕсли ДополнительныеРасшифровки <> Неопределено И ДополнительныеРасшифровки.НайтиПоЗначению(Поле) <> Неопределено тогда
			// Расшифровать собственным отчетом
			Возврат Поле;
			
		КонецЕсли;
		
		Если ДополнительныеРасшифровки <> Неопределено тогда
			МассивДляУдаления = Новый Массив;
			Для Каждого ЭлементСписка Из СписокДоступныхРасшифровок Цикл
				Если ДополнительныеРасшифровки.НайтиПоЗначению(ЭлементСписка.Значение) <> Неопределено тогда
					МассивДляУдаления.Добавить(ЭлементСписка);
				КонецЕсли;
			КонецЦикла;
			Для Каждого ЭлементСписка Из МассивДляУдаления Цикл
				СписокДоступныхРасшифровок.Удалить(ЭлементСписка);
			КонецЦИкла;
		КонецЕсли;
		
		ФормаРасшифровки = ПолучитьОбщуюФорму("ФормаРасшифровкиАналитическихОтчетов", , ФормаОтчета);
		
		СписокДоступныхРасшифровок.Удалить(СписокДоступныхРасшифровок.Количество()-1);
		
		НовыйОтчет = ПолучитьОтчетДляРасшифровкиПереопределяемая(ОтчетОбъект);
        
		Если ТипЗнч(НовыйОтчет) = Тип("ОтчетОбъект.УниверсальныйРегистрНалоговогоУчета") Тогда
			
			Если ТипЗнч(НовыйОтчет) = Тип("ОтчетОбъект.УниверсальныйРегистрНалоговогоУчета") Тогда
				ЗаполнитьЗначенияСвойств(НовыйОтчет, ОтчетОбъект);
			КонецЕсли;
			
			КонструкторСхемы = Новый КонструкторСхемыКомпоновкиДанных(ОтчетОбъект.СхемаКомпоновкиДанных);
			НовыйОтчет.СхемаКомпоновкиДанных = КонструкторСхемы.ПолучитьСхему();
			НовыйОтчет.КомпоновщикНастроек.ЗагрузитьНастройки(ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки());
			
		КонецЕсли;
		
		ФормаРасшифровки.ОтчетОбъект            = НовыйОтчет;
		ФормаРасшифровки.ТекущееПолеРасшифровка = Поле;
		ФормаРасшифровки.ФормаОтчета            = ФормаОтчета;
		ФормаРасшифровки.ДанныеРасшифровки      = ФормаОтчета.ДанныеРасшифровки;
		ФормаРасшифровки.Расшифровка            = Расшифровка;
		ФормаРасшифровки.ПолеРасшифровки        = ПолеРасшифровки;
		ФормаРасшифровки.СписокПолейРасшифровки = СписокДоступныхРасшифровок;
		
		ФормаРасшифровки.Открыть();
		ФормаРасшифровки.ОбновитьФорму();
		
		Возврат Поле; 
	КонецЕсли;
	
	Возврат Неопределено; 
	
КонецФункции
	
Функция ДобавитьОграничениеПоПодразделениям() Экспорт
	
	Если ПараметрыСеанса.ИспользоватьОграничениеПоСтруктурныеПодразделения
		И ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ГруппыПользователейПользователиГруппы.Ссылка КАК ГруппаПользователей
		               |ПОМЕСТИТЬ ГруппыПользователя
		               |ИЗ
		               |	Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователейПользователиГруппы
		               |ГДЕ
		               |	ГруппыПользователейПользователиГруппы.Пользователь = &ТекущийПользователь
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа
		               |ИЗ
		               |	РегистрСведений.НазначениеВидовОбъектовДоступа КАК НазначениеВидовОбъектовДоступа
		               |ГДЕ
		               |	НазначениеВидовОбъектовДоступа.ГруппаПользователей В
		               |			(ВЫБРАТЬ
		               |				Группыпользователя.ГруппаПользователей
		               |			ИЗ
		               |				ГруппыПользователя КАК Группыпользователя)
		               |	И НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.СтруктурныеПодразделения)";
					   
		Запрос.УстановитьПараметр("ТекущийПользователь", глТекущийПользователь);
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда 
			Возврат Ложь;
		Иначе 
			Возврат Истина;
		КонецЕсли;
	Иначе 
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции 

Функция ДобавитьОтборПоОрганизациямИПодразделениям(ЭлементСтруктуры, ДеревоСтруктурныхЕдиниц, Использование = Истина, ДтКт = Ложь, ИмяПоляПодразделения = "Подразделение") Экспорт
	
	ПолеОрганизация 	= Новый ПолеКомпоновкиДанных("Организация");
	ПолеПодразделение 	= Новый ПолеКомпоновкиДанных(ИмяПоляПодразделения);
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	НоваяГруппаИли = Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	НоваяГруппаИли.Использование  	= Использование;
	НоваяГруппаИли.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	НоваяГруппаИли.Представление 	= "###ОтборПоОрганизации###";
	
	СписокОтмеченныхОрганизаций = Новый СписокЗначений;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Пометка", 1);
	СтруктураПоиска.Вставить("ЭтоГруппа", Ложь);
	СтруктураПоиска.Вставить("Организация", Истина);
	
	ИспользованиеОграничения = Ложь;
	
	Если ДеревоСтруктурныхЕдиниц.Строки.Количество() > 0 Тогда 
		НайденныеСтроки = ДеревоСтруктурныхЕдиниц.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
			СписокОтмеченныхОрганизаций.Добавить(СтрокаДерева);
		КонецЦикла;
		
		СтруктураПоиска.Пометка = 2;
		
		НайденныеСтроки = ДеревоСтруктурныхЕдиниц.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
			СписокОтмеченныхОрганизаций.Добавить(СтрокаДерева);
		КонецЦикла;	
	КонецЕсли;
		
	//В случае если в отборе нет ни одного подразделения и включен РЛС по подразделениям
	//добавим в отбор все доступные пользователю подразделения
	Если СписокОтмеченныхОрганизаций.Количество() = 0 Тогда
		Если ДобавитьОграничениеПоПодразделениям() Тогда
			ТаблицаДоступныхОрганизаций = СтандартныеОтчеты.ПолучитьСписокДоступныхОрганизаций();
			ИспользованиеОграничения = Истина;
			Для Каждого СтрокаТЗ Из ТаблицаДоступныхОрганизаций Цикл 
				СписокОтмеченныхОрганизаций.Добавить(СтрокаТЗ.Организация);
			КонецЦикла;						
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ТекОрганизация Из СписокОтмеченныхОрганизаций Цикл 
		
		НоваяГруппаИ = НоваяГруппаИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		НоваяГруппаИ.Использование  = Использование;
		НоваяГруппаИ.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		НовыйЭлемент = НоваяГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлемент.Использование  = Использование;
		НовыйЭлемент.ЛевоеЗначение 	= ПолеОрганизация;
		НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлемент.ПравоеЗначение = ?(ИспользованиеОграничения, ТекОрганизация.Значение, ТекОрганизация.Значение.СтруктурнаяЕдиница);
		
		СписокПодразделений = Новый СписокЗначений;
		
		Если Не ИспользованиеОграничения Тогда 
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("Пометка", 1);
			СтруктураПоиска.Вставить("Организация", Ложь);
			
			НайденныеСтроки = ТекОрганизация.Значение.Строки.НайтиСтроки(СтруктураПоиска, Истина);
			Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
				СписокПодразделений.Добавить(СтрокаДерева.СтруктурнаяЕдиница);
			КонецЦикла;
			
			СтруктураПоиска.Пометка = 2;
			
			НайденныеСтроки = ТекОрганизация.Значение.Строки.НайтиСтроки(СтруктураПоиска, Истина);
			Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
				СписокПодразделений.Добавить(СтрокаДерева.СтруктурнаяЕдиница);
			КонецЦикла; 
		КонецЕсли;
		
		//В случае если в отборе нет ни одного подразделения и включен РЛС по подразделениям
		//добавим в отбор все доступные пользователю подразделения
		Если СписокПодразделений.Количество() = 0 Тогда
			Если ДобавитьОграничениеПоПодразделениям() Тогда
				ТаблицаДоступныхПодразделений = СтандартныеОтчеты.ПолучитьСписокДоступныхПодразделений(ТекОрганизация);
				Для Каждого СтрокаТЗ Из ТаблицаДоступныхПодразделений Цикл 
					СписокПодразделений.Добавить(СтрокаТЗ.Подразделение);
				КонецЦикла;						
			КонецЕсли;
		КонецЕсли;
		
		Если СписокПодразделений.Количество() > 0 Тогда 
			Если Не ДтКт Тогда 
				НовыйЭлемент = НоваяГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.Использование  = Использование;
				НовыйЭлемент.ЛевоеЗначение 	= ПолеПодразделение;
				НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
				НовыйЭлемент.ПравоеЗначение = СписокПодразделений;
			Иначе
				
				ГруппаПодразделений = НоваяГруппаИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаПодразделений.Использование  	= Использование;
				ГруппаПодразделений.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;				
				
				НовыйЭлемент = ГруппаПодразделений.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.Использование  = Использование;
				НовыйЭлемент.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПодразделениеДт");
				НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
				НовыйЭлемент.ПравоеЗначение = СписокПодразделений;				
				
				НовыйЭлемент = ГруппаПодразделений.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.Использование  = Использование;
				НовыйЭлемент.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПодразделениеКт");
				НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
				НовыйЭлемент.ПравоеЗначение = СписокПодразделений;				
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат НовыйЭлемент;	
		
КонецФункции

Процедура ВставитьЗначениеЭлементаФормы(ЭлементыФормы, Структура, Имя) Экспорт
	
	Ключ = СтрЗаменить(Имя, "АналитическиеОтборы", "");
	Ключ = СтрЗаменить(Ключ, "НастройкиПрогноза", "");
		
	Если ЭлементыФормы.Найти(Имя) <> Неопределено Тогда
		Структура.Вставить(Ключ, ЭлементыФормы[Имя].Значение);
	Иначе
		Структура.Вставить(Ключ, Неопределено);
	КонецЕсли;
	
КонецПроцедуры
#КонецЕсли


Функция ПолучитьСписокТиповыхОтчетов()
	
	СписокОтчетов = Новый СписокЗначений;
	Для каждого Отчет Из Метаданные.Отчеты Цикл
		Если Отчет.Имя <> "ШаблонТиповогоОтчета"
		   И Отчет.Реквизиты.Найти("ПериодОтчета") = Неопределено
		   И Отчет.Реквизиты.Найти("ЗначенияНастроекПанелиПользователя") <> Неопределено Тогда
			СписокОтчетов.Добавить(Отчет.Имя, Отчет.Синоним);
		КонецЕсли;
	КонецЦикла;
	Возврат СписокОтчетов;
	
КонецФункции



// В текст запроса построителя вносит изменения с целью выборки всей информации о физлице
// Параметры:
// 	ТекстЗапроса 				- модифицируемый текст запроса построителя,
// 	СтруктураПредставлениеПолей - структура, в которую ложится представление добавленных полей физлица,
// 	СтруктураФорматаПолей 		- структура, в которую ложится формат добавленных полей физлица,
// 	ИмяОсновнойВыборки 			- имя таблицы запроса, к которой присоединяется информация о физлице
// 	ИмяПоляФизЛицо 				- имя реквизита основной выборки, имеющего тип "СправочникСсылка.ФизическиеЛица"
Процедура ДобавитьДанныеОФизлице(ТекстЗапроса, СтруктураПредставлениеПолей, СтруктураФорматаПолей, ИмяОсновнойВыборки, ИмяПоляФизЛицо = "ФизЛицо") Экспорт
	
	ПолноеИмяПоляФизЛицо = ИмяОсновнойВыборки + "." + ИмяПоляФизЛицо;

	// данные реквизитов физлица
	МетаданныеФизЛица = Метаданные.Справочники.ФизическиеЛица;
	ТипФизическиеЛица = Тип("СправочникСсылка.ФизическиеЛица");
	ТипДата 		  = Тип("Дата");
	
	ТекстОписаниеПолей = "";
	
	Для Каждого РеквизитФизЛица Из МетаданныеФизЛица.Реквизиты Цикл
		ОписаниеТипаРеквизита 	= РеквизитФизЛица.Тип;
		ИмяРеквизита 			= РеквизитФизЛица.Имя;
		ТекстОписаниеПолей = ТекстОписаниеПолей + ",
		|	" + ПолноеИмяПоляФизЛицо+"."+ИмяРеквизита+?(НЕ ОбщегоНазначения.СодержитТолькоПримитивныеТипы(ОписаниеТипаРеквизита), ".*", "")+" КАК "+ИмяРеквизита;
		СтруктураПредставлениеПолей.Вставить(ИмяРеквизита, РеквизитФизЛица.Синоним);
	КонецЦикла;

	// данные о физлице
	ТекстОписаниеПолей = ТекстОписаниеПолей + ",
	|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, " + ПолноеИмяПоляФизЛицо + ".Наименование) КАК ФиоПолное,
	|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ, " + ПолноеИмяПоляФизЛицо +".Наименование) КАК ФиоКраткое,
	|	ЕСТЬNULL(ФИОФизЛицПриПрисвоенииСИК.Фамилия + "" "" + ФИОФизЛицПриПрисвоенииСИК.Имя + "" "" + ФИОФизЛицПриПрисвоенииСИК.Отчество, """") КАК ФиоПриПрисвоенииСИК,
	|	ВЫБОР КОГДА ГОД(" + ПолноеИмяПоляФизЛицо +".ДатаРождения) = 1 ТОГДА 0 ИНАЧЕ &ДатаАктуальности_Год - ГОД(" + ПолноеИмяПоляФизЛицо +".ДатаРождения) + ВЫБОР КОГДА (Месяц(" + ПолноеИмяПоляФизЛицо +".ДатаРождения)*100+День(" + ПолноеИмяПоляФизЛицо +".ДатаРождения)) > (&ДатаАктуальности_Месяц*100+&ДатаАктуальности_День) ТОГДА -1 ИНАЧЕ 0 КОНЕЦ КОНЕЦ КАК Возраст,
	|	ВЫБОР КОГДА ГОД(" + ПолноеИмяПоляФизЛицо +".ДатаРождения) = 1 ТОГДА 0 ИНАЧЕ &ДатаАктуальности_Год - ГОД(" + ПолноеИмяПоляФизЛицо +".ДатаРождения) КОНЕЦ КАК ВозрастНаКонецГода,	
	|	ВЫБОР КОГДА ГОД(" + ПолноеИмяПоляФизЛицо +".ДатаРождения) <> 1 ТОГДА ГОД(" + ПолноеИмяПоляФизЛицо +".ДатаРождения) ИНАЧЕ 0 КОНЕЦ КАК ГодРождения,
	|	ВЫБОР КОГДА ГОД(" + ПолноеИмяПоляФизЛицо +".ДатаРождения) <> 1 ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&КонецПериода, ГОД), МЕСЯЦ, МЕСЯЦ(" + ПолноеИмяПоляФизЛицо +".ДатаРождения) - 1) ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1) КОНЕЦ КАК МесяцРождения,";
	
	ТекстСоединения = "
	|		// ФИО физлиц
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних({&КонецПериода}) КАК ФИОФизЛиц
	|		ПО " + ПолноеИмяПоляФизЛицо + " = ФИОФизЛиц.ФизЛицо}
	|
	|		// ФИО при присвоении СИК
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛицПриПрисвоенииСИК КАК ФИОФизЛицПриПрисвоенииСИК
	|		ПО " + ПолноеИмяПоляФизЛицо + " = ФИОФизЛицПриПрисвоенииСИК.ФизЛицо}
	|";
	
	// данные из табличных частей физлица
	Для Каждого ОписаниеТЧФизЛица Из МетаданныеФизЛица.ТабличныеЧасти Цикл
		ИмяТЧ 		= ОписаниеТЧФизЛица.Имя;
		СинонимТЧ   = ОписаниеТЧФизЛица.Синоним;
		Для каждого ОписаниеРеквизита Из ОписаниеТЧФизЛица.Реквизиты Цикл
			
			ОписаниеТипаРеквизита 	= ОписаниеРеквизита.Тип;
			ИмяРеквизита 			= ОписаниеРеквизита.Имя;
			ТекстОписаниеПолей = ТекстОписаниеПолей + "
			|	" + ИмяТЧ + "ФизЛица." + ИмяРеквизита + ?(НЕ ОбщегоНазначения.СодержитТолькоПримитивныеТипы(ОписаниеТипаРеквизита), ".*", "") + " КАК " + ИмяТЧ + ИмяРеквизита + ",";
			СтруктураПредставлениеПолей.Вставить(ИмяТЧ + ИмяРеквизита, СинонимТЧ + ": " + ОписаниеРеквизита.Синоним);
			
		КонецЦикла;
		ТекстСоединения = ТекстСоединения + "
		|		{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица." + ИмяТЧ + " КАК " + ИмяТЧ + "ФизЛица
		|		ПО " + ПолноеИмяПоляФизЛицо + " = " + ИмяТЧ + "ФизЛица.Ссылка}";
	КонецЦикла; 
	
	// данные из регистров сведений о физлице
	МассивРегистров = Новый Массив;
	МассивРегистров.Добавить("ГражданствоФизЛиц");
	МассивРегистров.Добавить("ИПННалоговыеВычетыФизлиц");
	МассивРегистров.Добавить("ИПНПлановыеНалоговыеВычетыФизлиц");
	МассивРегистров.Добавить("ИПНПрименениеВычетов");
	МассивРегистров.Добавить("КартСчетаФизЛиц");
	МассивРегистров.Добавить("ПаспортныеДанныеФизЛиц");	
	МассивРегистров.Добавить("СведенияОбИнвалидностиФизлиц");
	МассивРегистров.Добавить("СведенияОПенсионномОбеспеченииФизЛиц");
	МассивРегистров.Добавить("СведенияОФизлицахУчастникахВОВ");
	МассивРегистров.Добавить("ВоинскийУчет");
	МассивРегистров.Добавить("СемейноеПоложениеФизЛиц");
	
	Для каждого ИмяРегистра Из МассивРегистров Цикл
	
		МетаданныеРегистра = Метаданные.РегистрыСведений.Найти(ИмяРегистра);
		Если МетаданныеРегистра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПравоДоступа("Чтение", МетаданныеРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		СинонимРегистра = МетаданныеРегистра.Синоним;
		
		// Измерения
		Для каждого ОписаниеИзмерения Из МетаданныеРегистра.Измерения Цикл
			Если НЕ ОписаниеИзмерения.Тип.СодержитТип(ТипФизическиеЛица) Тогда
				ОписаниеТипаИзмерения 	= ОписаниеИзмерения.Тип;
				ИмяИзмерения 			= ОписаниеИзмерения.Имя;
				ТекстОписаниеПолей = ТекстОписаниеПолей + "
				|	" + ИмяРегистра + "." + ИмяИзмерения + ?(НЕ ОбщегоНазначения.СодержитТолькоПримитивныеТипы(ОписаниеТипаИзмерения), ".*", "") + " КАК " + ИмяРегистра + ИмяИзмерения + ",";
				СтруктураПредставлениеПолей.Вставить(ИмяРегистра + ИмяИзмерения, СинонимРегистра + ": " + ОписаниеИзмерения.Синоним);
				
			КонецЕсли;
		КонецЦикла;
		
		// Ресурсы
		Для каждого ОписаниеРесурса Из МетаданныеРегистра.Ресурсы Цикл
			ОписаниеТипаРесурса 	= ОписаниеРесурса.Тип;
			ИмяРесурса 				= ОписаниеРесурса.Имя;
			ТекстОписаниеПолей = ТекстОписаниеПолей + "
			|	" + ИмяРегистра + "." + ИмяРесурса + ?(НЕ ОбщегоНазначения.СодержитТолькоПримитивныеТипы(ОписаниеТипаРесурса), ".*", "") + " КАК " + ИмяРегистра + ИмяРесурса + ",";
			СтруктураПредставлениеПолей.Вставить(ИмяРегистра + ИмяРесурса, СинонимРегистра + ": " + ОписаниеРесурса.Синоним);
			
		КонецЦикла;
		
		ТекстСоединения = ТекстСоединения + "
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистра + ?(МетаданныеРегистра.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический,"",".СрезПоследних({&КонецПериода})") + " КАК " + ИмяРегистра + "
		|		ПО " + ПолноеИмяПоляФизЛицо + " = " + ИмяРегистра + ".ФизЛицо}";
		
	КонецЦикла;

	// Прочие регистры сведений

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДАННЫЕ О ФИЗЛИЦЕ: ПОЛЯ", СтрЗаменить(Лев(ТекстОписаниеПолей,СтрДлина(ТекстОписаниеПолей)-1), ".*", ""));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДАННЫЕ О ФИЗЛИЦЕ: СОЕДИНЕНИЯ", ТекстСоединения);
	
	// ПРЕДСТАВЛЕНИЕ ПОЛЕЙ
	
	//данные физлица
	СтруктураПредставлениеПолей.Вставить("ФиоПолное", "ФИО (полностью)");
	СтруктураПредставлениеПолей.Вставить("ФиоКраткое", "Фамилия И. О. ");
	СтруктураПредставлениеПолей.Вставить("ФиоПриПрисвоенииСИК", "ФИО при присвоении СИК");
	СтруктураПредставлениеПолей.Вставить("ВозрастНаКонецГода", "Возраст на конец года");
	СтруктураПредставлениеПолей.Вставить("ГодРождения", "Год рождения");
	СтруктураПредставлениеПолей.Вставить("МесяцРождения", "Месяц рождения");
	
	
КонецПроцедуры

// В текст для построителя отчета вставляет поля и источники контактной информации
//
Процедура ДобавитьКонтактнуюИнформацию(ТаблицаВидовОбъектовКИ, Текст, СтруктураПредставлениеПолей, мСоответствиеНазначений, 
	                                          СтруктураПараметры, 
	                                          ЗаменятьПоля = "//КОНТАКТНАЯ ИНФОРМАЦИЯ: ПОЛЯ", 
	                                          ЗаменятьСоединения = "//КОНТАКТНАЯ ИНФОРМАЦИЯ: СОЕДИНЕНИЯ") Экспорт

											  
	// Добавляемые фрагменты запроса
	ТекстИсточникиСведений ="";
	ТекстПоля = "";
	
	
	НомерВидаКИ = 0;
	// Для каждого объекта-владельца контактной информации получим список видов контактной информации
	// и присоединим их к запросу
	Для Каждого СтрокаТаблицыВидовОбъектов ИЗ ТаблицаВидовОбъектовКИ Цикл
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидОбъектаКонтактнойИнформации", СтрокаТаблицыВидовОбъектов.ВидОбъекта);
		
		// Текст выборки всех видов контактной информации для заданного вида объекта: Произвольные + Заданные в справочнике "ВидыКонтактнойИнформации"
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	""#ПроизвольныйВид#"" КАК Ссылка,
		|	0 КАК Код,
		|	КонтактнаяИнформация.Тип,
		|	КонтактнаяИнформация.Вид КАК Наименование
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|
		|ГДЕ
		|	(НЕ(КонтактнаяИнформация.Вид В (ВЫБРАТЬ РАЗЛИЧНЫЕ 	ВидыКонтактнойИнформации.Ссылка ИЗ Справочник.ВидыКонтактнойИнформации ВидыКонтактнойИнформации ))) И
		|	((ВЫРАЗИТЬ(КонтактнаяИнформация.Объект КАК " + СтрокаТаблицыВидовОбъектов.СтрокаТипОбъекта + ")) = КонтактнаяИнформация.Объект)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка,
		|	ВидыКонтактнойИнформации.Код,
		|	ВидыКонтактнойИнформации.Тип,
		|	ВидыКонтактнойИнформации.Наименование
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|
		|ГДЕ
		|	(ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ) И
		|	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ВидОбъектаКонтактнойИнформации";
		
		ВыборкаВидовИнформации = Запрос.Выполнить().Выбрать();	
		
		Пока ВыборкаВидовИнформации.Следующий() цикл
			НомерВидаКИ = НомерВидаКИ + 1;
			ИмяПоля = "КИ_" + НомерВидаКИ;
			Если ВыборкаВидовИнформации.Ссылка = "#ПроизвольныйВид#" тогда
				ИдентификаторВидаИнформации = ВыборкаВидовИнформации.Наименование;
			Иначе	
				ИдентификаторВидаИнформации = ВыборкаВидовИнформации.Ссылка;
			КонецЕсли;	 
			
			// Формируем описание полей запроса
			ТекстПоля = ТекстПоля + ",
			|	Выборка"+ИмяПоля+".Представление" + " КАК " + ИмяПоля;
			
			// Формируем описание источников данных
			ТекстИсточникиСведений = ТекстИсточникиСведений + Символы.ПС + 
			"{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК Выборка" + ИмяПоля + "
			|ПО Выборка" + ИмяПоля + ".Объект = " + СтрокаТаблицыВидовОбъектов.ПутьКДанным + "
			|И  Выборка" + ИмяПоля + ".Вид = &Параметр" + ИмяПоля + "}";
			
			// параметр для выборки значений по текущему виду информации
			
			СтруктураПараметры.Вставить("Параметр" + ИмяПоля, ИдентификаторВидаИнформации);
						
			// представление вида контактной информации
			ПредставлениеПоля = СокрЛП(ВыборкаВидовИнформации.Наименование);
			СтруктураПредставлениеПолей.Вставить(ИмяПоля, ПредставлениеПоля);
			
		КонецЦикла;	
		
	КонецЦикла; 
	
	Текст = СтрЗаменить(Текст, ЗаменятьПоля, ТекстПоля);
	Текст = СтрЗаменить(Текст, ЗаменятьСоединения, ТекстИсточникиСведений);

КонецПроцедуры


Функция ОтчетПодсистемыЗУП(ИмяОтчета) Экспорт
	Возврат куфиб_ЗащитаОтчеты.ОтчетПодсистемыЗУП(ИмяОтчета);
КонецФункции
