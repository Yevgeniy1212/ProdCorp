Функция ПостфиксБиблиотекЗащиты() Экспорт
	Возврат Константы.общ_ПостфиксИспользуемогоФайлаБиблиотек.Получить();	
КонецФункции

#Область РаботаСРазрезами

Функция ИмяРазреза(Разрез) Экспорт
	Возврат фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазрезаБезКэширования(Разрез);
КонецФункции

Функция ПредставлениеРазреза(Разрез) Экспорт
	Возврат фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазрезаБезКэширования(Разрез);
КонецФункции

Функция ОпределитьНаличиеРазрезаВФинансовомПоказателе(ФинансовыйПоказатель,Измерение,Бюджет=Неопределено) Экспорт
	Если Бюджет<>Неопределено Тогда
		КЭШ_РазрезыФинансовыхПоказателейБюджета = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_РазрезыФинансовыхПоказателейБюджета(Бюджет);
		СтрокиНайдено = КЭШ_РазрезыФинансовыхПоказателейБюджета.НайтиСтроки(Новый Структура("ФинансовыйПоказатель,Измерение",ФинансовыйПоказатель,Измерение));
		Если СтрокиНайдено.Количество()>0 Тогда
			Возврат Истина;
		КонецЕсли;
		СтрокиНайдено = КЭШ_РазрезыФинансовыхПоказателейБюджета.НайтиСтроки(Новый Структура("ФинансовыйПоказатель",ФинансовыйПоказатель));
		Если СтрокиНайдено.Количество()>0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОпределитьНаличиеРазрезаВФинансовомПоказателе(ФинансовыйПоказатель,Измерение);

КонецФункции

Функция КЭШ_РазрезыФинансовыхПоказателейБюджета(Бюджет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_СтатьиБюджета.ФинансовыйПоказатель КАК ФинансовыйПоказатель,
		|	РазрезыУчета.Измерение
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели.РазрезыУчета КАК РазрезыУчета
		|		ПО фин_СтатьиБюджета.ФинансовыйПоказатель = РазрезыУчета.Ссылка
		|ГДЕ фин_СтатьиБюджета.Владелец = &Бюджет
		|	И НЕ фин_СтатьиБюджета.ЭтоГруппа
		|	И фин_СтатьиБюджета.ФинансовыйПоказатель <> ЗНАЧЕНИЕ(Справочник.фин_ФинансовыеПоказатели.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Бюджет", Бюджет);
	
	ТаблицаРазрезы = Запрос.Выполнить().Выгрузить();
	ТаблицаРазрезы.Индексы.Добавить("ФинансовыйПоказатель");
	Возврат ТаблицаРазрезы;
КонецФункции

Функция СтруктураРазрезовФинансовогоПоказателя(ФинансовыйПоказатель,Бюджет=Неопределено) Экспорт
	Если ЗначениеЗаполнено(Бюджет) Тогда
		КЭШ_РазрезыФинансовыхПоказателейБюджета = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_СтруктурыРазрезовФинансовыхПоказателейБюджета(Бюджет);
		СтрокиНайдено = КЭШ_РазрезыФинансовыхПоказателейБюджета.НайтиСтроки(Новый Структура("ФинансовыйПоказатель",ФинансовыйПоказатель));
		Если СтрокиНайдено.Количество()>0 Тогда
			Возврат СтрокиНайдено[0].СтруктураРазрезов;
		КонецЕсли;
	Иначе
	    Структура = Новый Структура;
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РазрезыУчета.Измерение
			|ИЗ
			|	Справочник.фин_ФинансовыеПоказатели.РазрезыУчета КАК РазрезыУчета
			|ГДЕ
			|	РазрезыУчета.Ссылка = &показатель";
		
		Запрос.УстановитьПараметр("показатель", ФинансовыйПоказатель);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Структура.Вставить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяРазреза(ВыборкаДетальныеЗаписи.Измерение));
		КонецЦикла;
		Возврат Структура;
	КонецЕсли;
	Возврат Новый Структура;

КонецФункции

Функция КЭШ_СтруктурыРазрезовФинансовыхПоказателейБюджета(Бюджет) Экспорт
	
	КЭШ_Разрезы = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_РазрезыФинансовыхПоказателейБюджета(Бюджет);
	РазрезыБюджета = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокРазрезовБюджета(Бюджет);
	Для Каждого ЭлементРазрез Из РазрезыБюджета Цикл
		ЭлементРазрез.Представление = ИмяРазреза(ЭлементРазрез.Значение);
	КонецЦикла;
	
	ТаблицаСтруктуры = Новый ТаблицаЗначений;	
	ТаблицаСтруктуры.Колонки.Добавить("ФинансовыйПоказатель");
	ТаблицаСтруктуры.Колонки.Добавить("СтруктураРазрезов");
	
	ФП = КЭШ_Разрезы.Скопировать(,"ФинансовыйПоказатель");
	ФП.Свернуть("ФинансовыйПоказатель");
	Для Каждого СтрокаФП Из ФП Цикл
		ФинансовыйПоказатель = СтрокаФП.ФинансовыйПоказатель;
		Разрезы = "";
		Строки = КЭШ_Разрезы.НайтиСтроки(Новый Структура("ФинансовыйПоказатель",ФинансовыйПоказатель));
		Для Каждого СтрокаРазрезов Из Строки Цикл
			ЭлементРазрезовБюджета = РазрезыБюджета.НайтиПоЗначению(СтрокаРазрезов.Измерение);
			Если ЭлементРазрезовБюджета<>Неопределено Тогда
				Разрезы = Разрезы + ?(Разрезы="","",",")+ЭлементРазрезовБюджета.Представление;
			КонецЕсли;
		КонецЦикла;
		НС = ТаблицаСтруктуры.Добавить();
		НС.ФинансовыйПоказатель = ФинансовыйПоказатель;
		НС.СтруктураРазрезов = Новый Структура(Разрезы);
	КонецЦикла;
	ТаблицаСтруктуры.Индексы.Добавить("ФинансовыйПоказатель");
	Возврат ТаблицаСтруктуры;
КонецФункции

Функция ПустоеЗначениеРазреза(Знач ИмяРазреза,ФинансовыйПоказатель=Неопределено) Экспорт
	Если ТипЗнч(ИмяРазреза)=Тип("ПеречислениеСсылка.фин_ФактическиеПоказателиБюджетирования") Тогда
		ИмяРазреза = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяРазреза(ИмяРазреза);
	КонецЕсли;
	Если ИмяРазреза = "УправленческоеПодразделение" Тогда
		Возврат Справочники[фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений()].ПустаяСсылка();
	ИначеЕсли ИмяРазреза = "Проект" Тогда
		Возврат Справочники[фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПроектов()].ПустаяСсылка();
	ИначеЕсли ИмяРазреза = "Контрагент" Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	ИначеЕсли ИмяРазреза = "ВалютаОперации" Тогда
		Возврат Справочники.Валюты.ПустаяСсылка();
	ИначеЕсли ИмяРазреза = "СтатьяБюджета" Тогда
		Возврат Справочники.фин_СтатьиБюджета.ПустаяСсылка();
	ИначеЕсли ИмяРазреза = "Номенклатура" Тогда
		Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.ОписаниеТиповНоменклатурногоПеречня(ФинансовыйПоказатель).ПривестиЗначение(Неопределено);
	Иначе
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_НастройкаДополнительныхРазрезовБюджетирования.Разрез.ТипЗначения КАК ТипЗначения
			|ИЗ
			|	РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК фин_НастройкаДополнительныхРазрезовБюджетирования
			|ГДЕ
			|	фин_НастройкаДополнительныхРазрезовБюджетирования.Измерение = &Измерение";
		
		Запрос.УстановитьПараметр("Измерение", Перечисления.фин_ФактическиеПоказателиБюджетирования[ИмяРазреза]);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.ТипЗначения.ПривестиЗначение(Неопределено);
		КонецЕсли;

	КонецЕсли;
	Возврат Новый ОписаниеТипов("Неопределено");
КонецФункции

Функция КЭШ_РазрезыУчетаЦенПоказателейБюджета(Бюджет) Экспорт
	Возврат Документы.фин_Бюджет.ПолучитьРазрезыУчетаЦен(Бюджет);	
КонецФункции

Функция ЦенообразующийРазрезСтатьи(Бюджет,Статья,Разрез) Экспорт
	РазрезыУчетаЦен = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_РазрезыУчетаЦенПоказателейБюджета(Бюджет);
	Строки = РазрезыУчетаЦен.НайтиСтроки(Новый Структура("СтатьяБюджета,Измерение",Статья,Разрез));
	Возврат Строки.Количество()>0;	
КонецФункции

Функция ЦенообразующийРазрезПоказателя(Бюджет,ФинансовыйПоказатель,Разрез) Экспорт
	РазрезыУчетаЦен = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_РазрезыУчетаЦенПоказателейБюджета(Бюджет);
	Строки = РазрезыУчетаЦен.НайтиСтроки(Новый Структура("ФинансовыйПоказатель,Измерение",ФинансовыйПоказатель,Разрез));
	Возврат Строки.Количество()>0;	
КонецФункции

Функция ТипЗначенияГруппировки(Группировка) Экспорт
	Возврат фин_УправлениеОтчетамиБюджетирование.ТипЗначенияГруппировки(Группировка);
КонецФункции

#КонецОбласти

#Область РаботаСДаннымиСтатейБюджетов

Функция КЭШ_ДанныеСтатейБюджета(Бюджет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиБюджета.Ссылка,
		|	СтатьиБюджета.ЭтоГруппа,
		|	ВЫБОР
		|		КОГДА СтатьиБюджета.ФинансовыйПоказатель.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.фин_ВидыФинансовыхПоказателей.Рассчитываемый)
		|				И СтатьиБюджета.ФинансовыйПоказатель.ПризнакПеретекающегоОстатка <> ЗНАЧЕНИЕ(Перечисление.фин_ПризнакиПеретекающихОстатковМеждуПериодами.ПустаяСсылка)
		|			ТОГДА СтатьиБюджета.ФинансовыйПоказатель.ПризнакПеретекающегоОстатка
		|		ИНАЧЕ СтатьиБюджета.ИтоговаяФункция
		|	КОНЕЦ КАК ИтоговаяФункция,
		|	СтатьиБюджета.ИсключитьИзИтогов,
		|	СтатьиБюджета.КодСтрокиБюджета,
		|	СтатьиБюджета.Родитель,
		|	СтатьиБюджета.ФинансовыйПоказатель.ВидПоказателя КАК ВидПоказателя,
		|	ВЫБОР
		|		КОГДА СтатьиБюджета.Родитель = ЗНАЧЕНИЕ(Справочник.фин_СтатьиБюджета.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьРодитель,
		|	СтатьиБюджета.ФинансовыйПоказатель,
		|	СтатьиБюджета.Наименование,
		|	СтатьиБюджета.Код,
		|	СтатьиБюджета.ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
		|ГДЕ
		|	СтатьиБюджета.Владелец = &Владелец";

	Запрос.УстановитьПараметр("Владелец", Бюджет);

	ТаблицаДанные = Запрос.Выполнить().Выгрузить();
	ТаблицаДанные.Индексы.Добавить("Ссылка");
	Возврат ТаблицаДанные;
КонецФункции

Функция КЭШ_ДанныеСтатейБюджетаЧерезСоответствия(Бюджет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиБюджета.Ссылка,
		|	СтатьиБюджета.ЭтоГруппа,
		|	ВЫБОР
		|		КОГДА СтатьиБюджета.ФинансовыйПоказатель.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.фин_ВидыФинансовыхПоказателей.Рассчитываемый)
		|				И СтатьиБюджета.ФинансовыйПоказатель.ПризнакПеретекающегоОстатка <> ЗНАЧЕНИЕ(Перечисление.фин_ПризнакиПеретекающихОстатковМеждуПериодами.ПустаяСсылка)
		|			ТОГДА СтатьиБюджета.ФинансовыйПоказатель.ПризнакПеретекающегоОстатка
		|		ИНАЧЕ СтатьиБюджета.ИтоговаяФункция
		|	КОНЕЦ КАК ИтоговаяФункция,
		|	СтатьиБюджета.ИсключитьИзИтогов,
		|	СтатьиБюджета.КодСтрокиБюджета,
		|	СтатьиБюджета.Родитель,
		|	ВЫБОР
		|		КОГДА СтатьиБюджета.Родитель = ЗНАЧЕНИЕ(Справочник.фин_СтатьиБюджета.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьРодитель,
		|	СтатьиБюджета.ФинансовыйПоказатель.ВидПоказателя КАК ВидПоказателя,
		|	СтатьиБюджета.ФинансовыйПоказатель,
		|	СтатьиБюджета.Наименование,
		|	СтатьиБюджета.Код,
		|	СтатьиБюджета.ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
		|ГДЕ
		|	СтатьиБюджета.Владелец = &Владелец";

	Запрос.УстановитьПараметр("Владелец", Бюджет);
	Результат = Запрос.Выполнить();
	Выборка= Результат.Выбрать();
	
	Соответствие = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		СтруктураДанных = Новый Структура("ЭтоГруппа,ВидПоказателя,ИтоговаяФункция,ИсключитьИзИтогов,КодСтрокиБюджета,ЕстьРодитель,Родитель,ФинансовыйПоказатель,ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения,Наименование,Код");
		ЗаполнитьЗначенияСвойств(СтруктураДанных,Выборка);
		Соответствие.Вставить(Выборка.Ссылка,СтруктураДанных);
	КонецЦикла;
	Возврат Соответствие;
КонецФункции

Функция ИтоговаяФункцияСтроки(Статья,Бюджет) Экспорт
	КЭШ_ДанныеСтатей = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ДанныеСтатейБюджета(Бюджет);
	Результат = КЭШ_ДанныеСтатей.НайтиСтроки(Новый Структура("Ссылка",Статья));
	Если Результат.Количество()>0 Тогда
		Возврат Результат[0].ИтоговаяФункция;
	КонецЕсли;
    Возврат ПредопределенноеЗначение("Перечисление.фин_ИтоговыеФункции.Сумма");
КонецФункции

Функция ЕстьРодитель(Статья,Бюджет) Экспорт
	КЭШ_ДанныеСтатей = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ДанныеСтатейБюджета(Бюджет);
	Результат = КЭШ_ДанныеСтатей.НайтиСтроки(Новый Структура("Ссылка",Статья));
	Если Результат.Количество()>0 Тогда
		Возврат Результат[0].ЕстьРодитель;
	КонецЕсли;
    Возврат Ложь;
КонецФункции
 
Функция КодСтрокиБюджета(Статья,Бюджет) Экспорт
	КЭШ_ДанныеСтатей = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ДанныеСтатейБюджета(Бюджет);
	Результат = КЭШ_ДанныеСтатей.НайтиСтроки(Новый Структура("Ссылка",Статья));
	Если Результат.Количество()>0 Тогда
		Возврат Результат[0].КодСтрокиБюджета;
	КонецЕсли;
    Возврат "";
КонецФункции
 
Функция КодСтатьи(Статья,Бюджет) Экспорт
	КЭШ_ДанныеСтатей = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ДанныеСтатейБюджета(Бюджет);
	Результат = КЭШ_ДанныеСтатей.НайтиСтроки(Новый Структура("Ссылка",Статья));
	Если Результат.Количество()>0 Тогда
		Возврат Результат[0].Код;
	КонецЕсли;
    Возврат "";
КонецФункции
 
Функция НаименованиеСтатьи(Статья,Бюджет) Экспорт
	КЭШ_ДанныеСтатей = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ДанныеСтатейБюджета(Бюджет);
	Результат = КЭШ_ДанныеСтатей.НайтиСтроки(Новый Структура("Ссылка",Статья));
	Если Результат.Количество()>0 Тогда
		Возврат Результат[0].Наименование;
	КонецЕсли;
    Возврат "";
КонецФункции
 
Функция СтатьяБюджетаПоПоказателю(Статья,Бюджет,Версия) Экспорт
	КЭШ_ДанныеСтатей = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ДанныеСтатейБюджета(Бюджет);
	Результат = КЭШ_ДанныеСтатей.НайтиСтроки(Новый Структура("ФинансовыйПоказатель",Статья));
	Если Результат.Количество()>0 Тогда
		Возврат Результат[0].Ссылка;
	Иначе
		Возврат фин_РаботаСДаннымиЭкземпляраБюджетаСервер.ОпределитьСтатьюБюджета(Статья,Бюджет,Версия);
	КонецЕсли;
    Возврат "";
КонецФункции

Функция ИсключитьИзИтогов(Статья,Бюджет) Экспорт
	КЭШ_ДанныеСтатей = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ДанныеСтатейБюджета(Бюджет);
	Результат = КЭШ_ДанныеСтатей.НайтиСтроки(Новый Структура("Ссылка",Статья));
	Если Результат.Количество()>0 Тогда
		Возврат Результат[0].ИсключитьИзИтогов;
	КонецЕсли;
    Возврат Ложь;
КонецФункции

Функция ИсключаемыеИзИтогов(Бюджет) Экспорт
	КЭШ_ДанныеСтатей = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ДанныеСтатейБюджета(Бюджет);
	Результат = КЭШ_ДанныеСтатей.Скопировать(Новый Структура("ИсключитьИзИтогов",Истина));
    Возврат Результат.ВыгрузитьКолонку("Ссылка");
КонецФункции

Функция ЭтоГруппа(Статья,Бюджет) Экспорт
	КЭШ_ДанныеСтатей = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ДанныеСтатейБюджетаЧерезСоответствия(Бюджет);//фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ДанныеСтатейБюджета(Бюджет);
	Результат = КЭШ_ДанныеСтатей.Получить(Статья);//КЭШ_ДанныеСтатей.НайтиСтроки(Новый Структура("Ссылка",Статья));
	Если Результат<>Неопределено Тогда//Результат.Количество()>0 Тогда
		Возврат Результат.ЭтоГруппа;//Результат[0].ЭтоГруппа;
	КонецЕсли;
    Возврат Ложь;
КонецФункции

Функция РассчитываемаяСтатья(Статья,Бюджет) Экспорт
	КЭШ_ДанныеСтатей = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ДанныеСтатейБюджетаЧерезСоответствия(Бюджет);//фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ДанныеСтатейБюджета(Бюджет);
	Результат = КЭШ_ДанныеСтатей.Получить(Статья);//КЭШ_ДанныеСтатей.НайтиСтроки(Новый Структура("Ссылка",Статья));
	Если Результат<>Неопределено Тогда//Результат.Количество()>0 Тогда
		Возврат Результат.ВидПоказателя=Перечисления.фин_ВидыФинансовыхПоказателей.Рассчитываемый;//Результат[0].ЭтоГруппа;
	КонецЕсли;
    Возврат Ложь;
КонецФункции
 
Функция РодительСтатьиБюджета(Статья,Бюджет) Экспорт
	КЭШ_ДанныеСтатей = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ДанныеСтатейБюджета(Бюджет);
	Результат = КЭШ_ДанныеСтатей.НайтиСтроки(Новый Структура("Ссылка",Статья));
	Если Результат.Количество()>0 Тогда
		Возврат Результат[0].Родитель;
	КонецЕсли;
    Возврат ПредопределенноеЗначение("Справочник.фин_СтатьиБюджета.ПустаяСсылка");
КонецФункции

Функция ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения(Показатель,Бюджет) Экспорт
	КЭШ_ДанныеСтатейБюджета = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ДанныеСтатейБюджетаЧерезСоответствия(Бюджет);//фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ДанныеСтатейБюджета(Бюджет);
	Результат = КЭШ_ДанныеСтатейБюджета.Получить(Показатель);//КЭШ_ДанныеСтатейБюджета.НайтиСтроки(Новый Структура("Ссылка",Показатель));
	Если Результат<>Неопределено Тогда//Результат.Количество()>0 Тогда
		Возврат Результат.ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения;//Результат[0].ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область РаботаСДаннымиФинансовыхПоказателей


Функция КЭШ_ДанныеФПБюджета(Бюджет) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ФинансовыеПоказатели.УчетПоКоличеству
		|				И ФинансовыеПоказатели.УчетПоСумме
		|				И ФинансовыеПоказателиРазрезыУчета.НомерСтроки ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчетЦеныБезНоменклатуры,
		|	ВЫБОР
		|		КОГДА ФинансовыеПоказатели.УчетПоКоличеству
		|				И ФинансовыеПоказатели.УчетПоСумме
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчетЦены,
		|	ФинансовыеПоказатели.Ссылка,
		|	ФинансовыеПоказатели.УчетПоКоличеству,
		|	ФинансовыеПоказатели.УчетПоПлановойНоменклатуре,
		|	ФинансовыеПоказатели.УчетПоСумме
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК ФинансовыеПоказатели
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели.РазрезыУчета КАК ФинансовыеПоказателиРазрезыУчета
		|			ПО ФинансовыеПоказатели.Ссылка = ФинансовыеПоказателиРазрезыУчета.Ссылка
		|				И (ФинансовыеПоказателиРазрезыУчета.Измерение = &Измерение)
		|		ПО СтатьиБюджета.ФинансовыйПоказатель = ФинансовыеПоказатели.Ссылка
		|ГДЕ
		|	СтатьиБюджета.Владелец = &Бюджет";

	Запрос.УстановитьПараметр("Измерение", 	Перечисления.фин_ФактическиеПоказателиБюджетирования.Номенклатура);
	Запрос.УстановитьПараметр("Бюджет", 	Бюджет);

	КЭШ_ДанныеФП = Запрос.Выполнить().Выгрузить();
	КЭШ_ДанныеФП.Индексы.Добавить("Ссылка");

	Возврат КЭШ_ДанныеФП;

КонецФункции

Функция ВыводитьЦенуПоПоказателю(Показатель,Бюджет) Экспорт
	КЭШ_ДанныеФПБюджета = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ДанныеФПБюджета(Бюджет);
	Результат = КЭШ_ДанныеФПБюджета.НайтиСтроки(Новый Структура("Ссылка",Показатель));
	Если Результат.Количество()>0 Тогда
		Возврат Результат[0].УчетЦеныБезНоменклатуры;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция УчетЦены(Показатель,Бюджет) Экспорт
	КЭШ_ДанныеФПБюджета = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ДанныеФПБюджета(Бюджет);
	Результат = КЭШ_ДанныеФПБюджета.НайтиСтроки(Новый Структура("Ссылка",Показатель));
	Если Результат.Количество()>0 Тогда
		Возврат Результат[0].УчетЦены;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция УчетПоСумме(Показатель,Бюджет) Экспорт
	КЭШ_ДанныеФПБюджета = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ДанныеФПБюджета(Бюджет);
	Результат = КЭШ_ДанныеФПБюджета.НайтиСтроки(Новый Структура("Ссылка",Показатель));
	Если Результат.Количество()>0 Тогда
		Возврат Результат[0].УчетПоСумме;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция УчетПоКоличеству(Показатель,Бюджет) Экспорт
	КЭШ_ДанныеФПБюджета = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ДанныеФПБюджета(Бюджет);
	Результат = КЭШ_ДанныеФПБюджета.НайтиСтроки(Новый Структура("Ссылка",Показатель));
	Если Результат.Количество()>0 Тогда
		Возврат Результат[0].УчетПоКоличеству;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция УчетПоФинансовомуПоказателюПоСумме(Показатель) Экспорт
	КЭШ_ДанныеФПБюджета = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_СуммовыеФинансовыеПоказатели();
	Результат = КЭШ_ДанныеФПБюджета.Найти(Показатель);
	Если Результат<>Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция УчетПоФинансовомуПоказателюПоКоличеству(Показатель) Экспорт
	КЭШ_ДанныеФПБюджета = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_КоличественныеФинансовыеПоказатели();
	Результат = КЭШ_ДанныеФПБюджета.Найти(Показатель);
	Если Результат<>Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция РасчетФинансовогоПоказателяПоРасценкам(Показатель) Экспорт
	КЭШ_ДанныеФПБюджета = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ФинансовыеПоказателиПоРасценкам();
	Результат = КЭШ_ДанныеФПБюджета.Найти(Показатель);
	Если Результат<>Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция КЭШ_СуммовыеФинансовыеПоказатели() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ФинансовыеПоказатели.Ссылка
		|ИЗ
		|	Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|ГДЕ
		|	фин_ФинансовыеПоказатели.УчетПоСумме";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция КЭШ_КоличественныеФинансовыеПоказатели() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ФинансовыеПоказатели.Ссылка
		|ИЗ
		|	Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|ГДЕ
		|	фин_ФинансовыеПоказатели.УчетПоколичеству";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция КЭШ_ФинансовыеПоказателиПоРасценкам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ФинансовыеПоказатели.Ссылка
		|ИЗ
		|	Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|ГДЕ
		|	фин_ФинансовыеПоказатели.ПоРасценкам";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция УчетПоПлановойНоменклатуре(Показатель,Бюджет) Экспорт
	КЭШ_ДанныеФПБюджета = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ДанныеФПБюджета(Бюджет);
	Результат = КЭШ_ДанныеФПБюджета.НайтиСтроки(Новый Структура("Ссылка",Показатель));
	Если Результат.Количество()>0 Тогда
		Возврат Результат[0].УчетПоПлановойНоменклатуре;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ИспользуемыйНоменклатурныйПеречень(ФинансовыйПоказатель) Экспорт
	Возврат ФинансовыйПоказатель.ИспользуемыйНоменклатурныйПеречень;	
КонецФункции

Функция ПризнакПеретекающегоОстатка(ФинансовыйПоказатель) Экспорт
	Возврат ?(НЕ ЗначениеЗаполнено(ФинансовыйПоказатель) ИЛИ ТипЗнч(ФинансовыйПоказатель)<>Тип("СправочникСсылка.фин_ФинансовыеПоказатели"),Перечисления.фин_ПризнакиПеретекающихОстатковМеждуПериодами.ПустаяСсылка(),ФинансовыйПоказатель.ПризнакПеретекающегоОстатка);	
КонецФункции
	
Функция ОписаниеТиповНоменклатурногоПеречня(ФинансовыйПоказатель) Экспорт
	//Возврат фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОписаниеТиповНоменклатурногоПеречня(ФинансовыйПоказатель,,фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВестиУчетПоПлановойНоменклатуре"));
	ОписанияТиповНоменклатурногоПеречня = фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ОписаниеТиповНоменклатурногоРазреза();
	СтрокиКЭШ = ОписанияТиповНоменклатурногоПеречня.НайтиСтроки(Новый Структура("ФинансовыйПоказатель",ФинансовыйПоказатель));
	Если СтрокиКЭШ.Количество()>0 Тогда
		Возврат СтрокиКЭШ[0].ОписаниеТипов;
	Иначе
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
		Возврат Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
КонецФункции

Функция КЭШ_ОписаниеТиповНоменклатурногоРазреза() Экспорт
	ОписанияТиповНоменклатурногоПеречня = Новый ТаблицаЗначений;
	ОписанияТиповНоменклатурногоПеречня.Колонки.Добавить("ФинансовыйПоказатель");
	ОписанияТиповНоменклатурногоПеречня.Колонки.Добавить("ОписаниеТипов");
	ОписанияТиповНоменклатурногоПеречня.Индексы.Добавить("ФинансовыйПоказатель");
	ВестиУчетПоПлановойНоменклатуре = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВестиУчетПоПлановойНоменклатуре");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ФинансовыеПоказатели.Ссылка КАК ФинансовыйПоказатель,
		|	фин_ФинансовыеПоказатели.ИспользуемыйНоменклатурныйПеречень
		|ИЗ
		|	Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели.РазрезыУчета КАК фин_ФинансовыеПоказателиРазрезыУчета
		|		ПО фин_ФинансовыеПоказатели.Ссылка = фин_ФинансовыеПоказателиРазрезыУчета.Ссылка
		|ГДЕ
		|	фин_ФинансовыеПоказателиРазрезыУчета.Измерение = &Измерение";
	
	Запрос.УстановитьПараметр("Измерение", Перечисления.фин_ФактическиеПоказателиБюджетирования.Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НС = ОписанияТиповНоменклатурногоПеречня.Добавить();
		НС.ФинансовыйПоказатель = ВыборкаДетальныеЗаписи.ФинансовыйПоказатель;
		НС.ОписаниеТипов 		= фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОписаниеТиповНоменклатурногоПеречня(ВыборкаДетальныеЗаписи.ФинансовыйПоказатель,,ВестиУчетПоПлановойНоменклатуре,ВыборкаДетальныеЗаписи.ИспользуемыйНоменклатурныйПеречень);
	КонецЦикла;
	Возврат ОписанияТиповНоменклатурногоПеречня;
КонецФункции

Функция ФинансовыйПоказательПринадлежитБюджету(ФинансовыйПоказатель,Бюджет) Экспорт
	
	Если НЕ (ЗначениеЗаполнено(ФинансовыйПоказатель) И ЗначениеЗаполнено(Бюджет)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_СтатьиБюджета.Ссылка
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
		|ГДЕ
		|	фин_СтатьиБюджета.Владелец = &Бюджет
		|	И фин_СтатьиБюджета.ФинансовыйПоказатель = &ФинансовыйПоказатель
		|	И НЕ фин_СтатьиБюджета.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Бюджет", Бюджет);
	Запрос.УстановитьПараметр("ФинансовыйПоказатель", ФинансовыйПоказатель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

Функция ДетализацияПланирования(Сценарий) Экспорт
	Возврат Сценарий.ДетализацияПланирования;	
КонецФункции

#Область КЭШируемыеЗначенияИНастройки

//Функция ПолучитьЗначение() Экспорт
//	Попытка
//		Возврат ПараметрыСеанса.фин_ХранилищеЗначений.Получить();	
//	Исключение
//		Возврат Ложь;
//	КонецПопытки;
//КонецФункции

Функция ИмяСправочникаПроектов() Экспорт
	Если РежимИнтеграции()=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 Тогда
		Возврат "Проекты";
	Иначе
		Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"Проекты";
	КонецЕсли;
КонецФункции

Функция ИмяСправочникаПодразделений() Экспорт
	Если РежимИнтеграции()=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 Тогда
		Возврат "СтруктураПредприятия";
	Иначе
		Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"Подразделения";
	КонецЕсли;
КонецФункции

Функция ЕстьРеквизитГоловнаяОрганизация() Экспорт
	Возврат Метаданные.Справочники.Организации.Реквизиты.Найти("ГоловнаяОрганизация")<>Неопределено;	
КонецФункции

Функция ТребуетсяРасчетЗависимостей(Бюджет,Сценарий) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	фин_ЗависимостиФинансовыхПоказателей.ИсхФинансовыйПоказатель
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.фин_ЗависимостиФинансовыхПоказателей КАК фин_ЗависимостиФинансовыхПоказателей
		|		ПО фин_СтатьиБюджета.ФинансовыйПоказатель = фин_ЗависимостиФинансовыхПоказателей.ИсхФинансовыйПоказатель
		|ГДЕ
		|	фин_СтатьиБюджета.Владелец = &Бюджет
		|	И НЕ фин_СтатьиБюджета.ПометкаУдаления
		|	И НЕ фин_СтатьиБюджета.ЭтоГруппа
		|	И (фин_ЗависимостиФинансовыхПоказателей.ИсхСценарий = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка)
		|			ИЛИ фин_ЗависимостиФинансовыхПоказателей.ИсхСценарий = &Сценарий)";
	
	Запрос.УстановитьПараметр("Бюджет", Бюджет);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Функция ИспользуетсяФиксацияПлановПоСценарию(Сценарий) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ГраницыПериодовБюджетирования.Сценарий
		|ИЗ
		|	РегистрСведений.фин_ГраницыПериодовБюджетирования КАК фин_ГраницыПериодовБюджетирования
		|ГДЕ
		|	фин_ГраницыПериодовБюджетирования.Сценарий = &Сценарий";
	
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции

Функция ИспользуютсяРасчетыСтатейБюджетаПоФормулам(Бюджет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_СтатьиБюджета.Ссылка
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|		ПО фин_СтатьиБюджета.ФинансовыйПоказатель = фин_ФинансовыеПоказатели.Ссылка
		|ГДЕ
		|	фин_СтатьиБюджета.Владелец = &Бюджет
		|	И НЕ фин_СтатьиБюджета.ЭтоГруппа
		|	И НЕ фин_СтатьиБюджета.ПометкаУдаления
		|	И фин_ФинансовыеПоказатели.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.фин_ВидыФинансовыхПоказателей.Рассчитываемый)";
	
	Запрос.УстановитьПараметр("Бюджет", Бюджет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Функция ОбъектНастроекФактическихДанных(Схема) Экспорт
	Возврат ?(ТипЗнч(Схема)=Тип("СправочникСсылка.фин_ВидыДокументов") ИЛИ ТипЗнч(Схема)=Тип("СправочникСсылка.фин_КлассификаторРегистров"),Схема,Схема.Владелец);	
КонецФункции

Функция ДокументРегистрацииФактическихДанных(ДокументСсылка) Экспорт
	Возврат фин_ПривилегированныеПроцедуры.ДокументРегистрацииФактическихДанных(ДокументСсылка);	
КонецФункции

Функция РегистрыФактическихДанных() Экспорт
	МассивРегистров = Новый Массив;
	РежимХранения = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимХраненияФактическихДанных");
	Если РежимХранения = Перечисления.фин_РежимыХраненияФактическихДанных.ВРегистреОборотыБюджетов Тогда
		МассивРегистров.Добавить("фин_ОборотыБюджетов");
	ИначеЕсли РежимХранения = Перечисления.фин_РежимыХраненияФактическихДанных.ВРегистреФактическиеОборотыБюджетов Тогда
		МассивРегистров.Добавить("фин_ФактическиеОборотыБюджетов");
	Иначе
		Для Каждого Регистр Из Метаданные.РегистрыНакопления Цикл
			Если НРег(Регистр.Имя)=НРег("фин_ОборотыБюджетов") ИЛИ Найти(НРег(Регистр.Имя),НРег("фин_ФактическиеОборотыБюджетов"))<>0 Тогда
				МассивРегистров.Добавить(Регистр.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат МассивРегистров;
КонецФункции

Функция ВидДокументовПоИмениМетаданных(Имя) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ВидыДокументов.Ссылка
		|ИЗ
		|	Справочник.фин_ВидыДокументов КАК фин_ВидыДокументов
		|ГДЕ
		|	фин_ВидыДокументов.ПометкаУдаления = ЛОЖЬ
		|	И фин_ВидыДокументов.ПрограммныйИдентификатор = &ПрограммныйИдентификатор";
	
	Запрос.УстановитьПараметр("ПрограммныйИдентификатор", Имя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Справочники.фин_ВидыДокументов.ПустаяСсылка();
КонецФункции

Функция ИмяМетаданныхПоВидуДокумента(ВидДокументов) Экспорт
	Возврат ВидДокументов.ПрограммныйИдентификатор;
КонецФункции

Функция ПолучитьПериодичностьСценария(Сценарий) Экспорт
	Возврат фин_УправлениеБюджетированием.ПериодичностьСценария(Сценарий);	
КонецФункции

Функция ПродолжительностьЦиклаСценария(Сценарий) Экспорт
	Возврат фин_УправлениеБюджетированием.ПродолжительностьЦиклаСценария(Сценарий);
КонецФункции

Функция ИспользоватьТочкиПланированияСценария(Сценарий) Экспорт
	Возврат Сценарий.ИспользоватьТочкиПланирования;	
КонецФункции

Функция ПоддержкаГрафиковРаботыЗУП() Экспорт
	РежимВстраивания = ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимВстраивания = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана Тогда
		Возврат Истина;
	ИначеЕсли Метаданные.Справочники.Найти("ГрафикиРаботы")<>Неопределено И Метаданные.РегистрыСведений.Найти("РегламентированныйПроизводственныйКалендарь")<>Неопределено И Метаданные.Перечисления.Найти("ВидыУчетаВремени")<>Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ДлительностьРабочегоДняСогласования() Экспорт
	ДанныеХранилища = Константы.усд_НастройкаРабочегоВремени.Получить().Получить();
	Если ДанныеХранилища<>Неопределено И ТипЗнч(ДанныеХранилища)=Тип("Структура") Тогда
		Если ДанныеХранилища.Свойство("ПродолжительностьРабочегоДня") Тогда
			Возврат ДанныеХранилища.ПродолжительностьРабочегоДня;
		КонецЕсли;
	КонецЕсли;
	Возврат 8;
КонецФункции

Функция ИнтервалыРабочегоВремениСогласования() Экспорт
	ДанныеХранилища = Константы.усд_НастройкаРабочегоВремени.Получить().Получить();
	Если ДанныеХранилища<>Неопределено И ТипЗнч(ДанныеХранилища)=Тип("Структура") Тогда
		Если ДанныеХранилища.Свойство("РабочиеИнтервалыВремени") Тогда
			Возврат ДанныеХранилища.РабочиеИнтервалыВремени;
		КонецЕсли;
	КонецЕсли;
	Таблица = Новый ТаблицаЗначений;
	Возврат Таблица;
КонецФункции

Функция ПрефиксОбщихОбъектов() Экспорт
	РежимВстраивания = ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Если РежимВстраивания = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана Тогда
		Возврат "";
	Иначе
		Возврат "общ_";
	КонецЕсли;
КонецФункции


//Значение переменной
//
Функция ЗначениеПеременной(ИмяПараметра) Экспорт
	Если Метаданные.Константы.Найти(ИмяПараметра)<>Неопределено Тогда
		Возврат Константы[ИмяПараметра].Получить();
	ИначеЕсли Врег(ИмяПараметра) = ВРег("ВалютаРегламентированногоУчета") И Метаданные.Константы.Найти("ВалютаРегламентированногоУчета")=Неопределено Тогда
		НайденноеЗначение = Константы[ПрефиксОбщихОбъектов()+"ВалютаУправленческогоУчета"].Получить();
	ИначеЕсли Врег(ИмяПараметра) = ВРег("глТекущийПользователь") Тогда
		НайденноеЗначение = ПараметрыСеанса.ТекущийПользователь;
	ИначеЕсли Врег(ИмяПараметра) = ВРег("ТекущийПользователь") Тогда
		НайденноеЗначение = ПараметрыСеанса.ТекущийПользователь;
	ИначеЕсли Врег(ИмяПараметра) = ВРег("ПолучитьСписокИменДополнительныхРазрезов") Тогда
		НайденноеЗначение = Вычислить("фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокИменДополнительныхРазрезов()");
	ИначеЕсли Врег(ИмяПараметра) = ВРег("ПолучитьСписокДополнительныхРазрезов") Тогда
		НайденноеЗначение = Вычислить("фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокДополнительныхРазрезов()");
	ИначеЕсли Врег(ИмяПараметра) = ВРег("ПолучитьМассивДополнительныхРазрезов") Тогда
		НайденноеЗначение = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокДополнительныхРазрезов().ВыгрузитьЗначения();
	ИначеЕсли Врег(ИмяПараметра) = ВРег("ПолучитьПолныйСписокРазрезов") Тогда
		НайденноеЗначение = Вычислить("фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьПолныйСписокРазрезов()");
	ИначеЕсли Врег(ИмяПараметра) = ВРег("ПолучитьПолныйМассивРазрезов") Тогда
		НайденноеЗначение = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьПолныйСписокРазрезов().ВыгрузитьЗначения();
	ИначеЕсли Врег(ИмяПараметра) = ВРег("ПолучитьПолныйСписокИменРазрезов") Тогда
		НайденноеЗначение = Вычислить("фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьПолныйСписокИменРазрезов()");
	ИначеЕсли Врег(ИмяПараметра) = ВРег("ПолучитьПолныйМассивИменРазрезов") Тогда
		НайденноеЗначение = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьПолныйСписокИменРазрезов().ВыгрузитьЗначения();
	ИначеЕсли Врег(ИмяПараметра) = ВРег("ПолучитьСоответствиеРазрезовИИмен") Тогда
		НайденноеЗначение = Вычислить("фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСоответствиеРазрезовИИмен()");
	ИначеЕсли Врег(ИмяПараметра) = ВРег("МаксимальноеКоличествоСубконто") Тогда
		НайденноеЗначение = фин_РаботаСДополнительнымиРазрезамиБюджетирования.МаксимальноеКоличествоСубконто();
	ИначеЕсли Врег(ИмяПараметра) = ВРег("РазрезыПоИзмерениям") Тогда
		НайденноеЗначение = Вычислить("фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезыПоИзмерениям()");
	ИначеЕсли Врег(ИмяПараметра) = ВРег("НомерВерсииКонфигурации") И Метаданные.Константы.Найти("НомерВерсииКонфигурации")<>Неопределено Тогда
		НайденноеЗначение = Константы["НомерВерсииКонфигурации"].Получить();
 	ИначеЕсли Врег(ИмяПараметра) = ВРег("СтруктураРазрезовИТипов") Тогда
		НайденноеЗначение = фин_РаботаСДополнительнымиРазрезамиБюджетирования.СтруктураРазрезовИТипов();
	ИначеЕсли Врег(ИмяПараметра) = ВРег("фин_ИспользоватьОграниченияПоБюджетам") Тогда  
		Попытка
			Возврат ПараметрыСеанса.фин_ИспользоватьОграниченияПоБюджетам;
		Исключение
		
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	общ_СоставПрофилейДоступа.Профиль
				|ИЗ
				|	РегистрСведений.общ_СоставПрофилейДоступа КАК общ_СоставПрофилейДоступа
				|ГДЕ
				|	общ_СоставПрофилейДоступа.Пользователь = &Пользователь
				|	И НЕ общ_СоставПрофилейДоступа.Профиль.ПометкаУдаления
				|	И общ_СоставПрофилейДоступа.Профиль.ВидПрофиляДоступа = &ВидПрофиляДоступа";

			Запрос.УстановитьПараметр("ВидПрофиляДоступа", Перечисления.общ_ВидыПрофилейДоступа.Бюджеты);
			Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);

			Результат = Запрос.Выполнить();

			ПараметрыСеанса.фин_ИспользоватьОграниченияПоБюджетам = (НЕ Результат.Пустой()) И НЕ (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("фин_Бюджетирование"));
			Возврат ПараметрыСеанса.фин_ИспользоватьОграниченияПоБюджетам;
		КонецПопытки;
	ИначеЕсли Метаданные.Константы.Найти("общ_"+ИмяПараметра)<>Неопределено Тогда
		Возврат Константы["общ_"+ИмяПараметра].Получить();
	ИначеЕсли Метаданные.Константы.Найти("фин_"+ИмяПараметра)<>Неопределено Тогда
		Возврат Константы["фин_"+ИмяПараметра].Получить();
	ИначеЕсли Метаданные.Константы.Найти("ден_"+ИмяПараметра)<>Неопределено Тогда
		Возврат Константы["ден_"+ИмяПараметра].Получить();
	ИначеЕсли Метаданные.Константы.Найти("усд_"+ИмяПараметра)<>Неопределено Тогда
		Возврат Константы["усд_"+ИмяПараметра].Получить();
	ИначеЕсли Метаданные.Константы.Найти("узп_"+ИмяПараметра)<>Неопределено Тогда
		Возврат Константы["узп_"+ИмяПараметра].Получить();
	ИначеЕсли Метаданные.Константы.Найти("дог_"+ИмяПараметра)<>Неопределено Тогда
		Возврат Константы["дог_"+ИмяПараметра].Получить();
	Иначе
		ВызватьИсключение "Неверное имя параметра "+Строка(ИмяПараметра);
		Возврат Неопределено;
	КонецЕсли;
	Возврат НайденноеЗначение;	
КонецФункции

Функция РежимИнтеграции() Экспорт
	Возврат Константы.фин_РежимИнтеграцииСУчетнойСистемой.Получить();
КонецФункции

Функция СоответствиеТиповИТаблиц() Экспорт
	Возврат фин_РаботаСДополнительнымиРазрезамиБюджетирования.СоответствиеТиповИТаблиц();
КонецФункции

Функция ЕстьДополнительноеПравоПользователя(ВидПрава) Экспорт
	Если ПравоРегулируетсяДополнительнымиПравами(ВидПрава) Тогда
		Попытка
			Разрешено = Вычислить("УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей."+ВидПрава+", Ложь)");
			Возврат Разрешено.НайтиПоЗначению(Истина)<>Неопределено;
		Исключение
			Возврат ЕстьПраво(ВидПрава);
		КонецПопытки;
	ИначеЕсли НРег(ВидПрава)=НРег("РазрешитьПревышениеКонтролируемыхЗначенийПоБюджетам") Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ГруппыПользователейСостав.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ ОбъектыПрав
			|ИЗ
			|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
			|ГДЕ
			|	ГруппыПользователейСостав.Пользователь = &Пользователь
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&Пользователь
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Разрешение.РазрешеноПроведениеСПревышениемЛимитов
			|ИЗ
			|	РегистрСведений.фин_РазрешениеПроведенияДокументовСПревышениемКонтролируемыхЗначений КАК Разрешение
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыПрав КАК ОбъектыПрав
			|		ПО Разрешение.Пользователь = ОбъектыПрав.Пользователь
			|ГДЕ
			|	Разрешение.РазрешеноПроведениеСПревышениемЛимитов";
		
		Запрос.УстановитьПараметр("Пользователь", фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Возврат НЕ РезультатЗапроса.Пустой();
	Иначе
	//	Возврат ЕстьПраво(ВидПрава);
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПравоРегулируетсяДополнительнымиПравами(ВидПрава) Экспорт
	ПВХ = Метаданные.ПланыВидовХарактеристик.Найти("ПраваПользователей");
	Если ПВХ<>Неопределено И фин_ОбщегоНазначенияСервер.ЕстьОбщийМодуль("УправлениеПользователями")  Тогда
		Предопределенные = ПВХ.ПолучитьИменаПредопределенных();
		Возврат Предопределенные.Найти(ВидПрава)<>Неопределено;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ЕстьПраво(ВидПрава)
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИСТИНА КАК Поле1
			|ИЗ
			|	РегистрСведений.общ_ЗначенияДополнительныхПрав КАК общ_ЗначенияДополнительныхПрав
			|ГДЕ
			|	общ_ЗначенияДополнительныхПрав.Пользователь = &Пользователь
			|	И общ_ЗначенияДополнительныхПрав.Право = &Право";

	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.УстановитьПараметр("Право", Перечисления.общ_ВидыДополнительныхПрав[ВидПрава]);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ВедутсяВзаиморасчетыПоДокументам() Экспорт
	Если фин_ОбщегоНазначенияСервер.ЕстьОбщийМодуль("УправлениеВзаиморасчетамиСервер") Тогда
		Попытка
			Возврат Вычислить("УправлениеВзаиморасчетамиСервер.ВедутсяВзаиморасчетыПоДокументам()");
		Исключение
			Возврат Ложь;
		КонецПопытки;
	ИначеЕсли фин_ОбщегоНазначенияСервер.ЕстьОбщийМодуль("УправлениеВзаиморасчетами") Тогда
		Попытка
			Возврат Вычислить("УправлениеВзаиморасчетами.ВедутсяВзаиморасчетыПоДокументам()");
		Исключение
			Возврат Ложь;	
		КонецПопытки;		
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция НовыйИдентификатор() Экспорт
	Возврат ПоместитьВоВременноеХранилище(Неопределено,Новый УникальныйИдентификатор);
КонецФункции

Функция ПолучитьПризнакОтображенияСтруктурныхПодразделений() Экспорт
	Если Метаданные.ФункциональныеОпции.Найти("ПоддержкаРаботыСоСтруктурнымиПодразделениями")<>Неопределено Тогда
		Возврат ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	ИначеЕсли Метаданные.Константы.Найти("ПоддержкаРаботыСоСтруктурнымиПодразделениями")<>Неопределено Тогда
		Возврат Константы["ПоддержкаРаботыСоСтруктурнымиПодразделениями"].Получить();
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// Возвращает соответствие имен "функциональных" подсистем и значения Истина.
// У "функциональной" подсистемы снят флажок "Включать в командный интерфейс".
//
Функция ИменаПодсистем() Экспорт
	
	Имена = Новый Соответствие;
	ВставитьИменаПодчиненныхПодсистем(Имена, Метаданные);
	
	Возврат Новый ФиксированноеСоответствие(Имена);
	
КонецФункции

Процедура ВставитьИменаПодчиненныхПодсистем(Имена, РодительскаяПодсистема, Все = Ложь, ИмяРодительскойПодсистемы = "")
	
	Для каждого ТекущаяПодсистема Из РодительскаяПодсистема.Подсистемы Цикл
		
		Если ТекущаяПодсистема.ВключатьВКомандныйИнтерфейс И Не Все Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТекущейПодсистемы = ИмяРодительскойПодсистемы + ТекущаяПодсистема.Имя;
		Имена.Вставить(ИмяТекущейПодсистемы, Истина);
		
		Если ТекущаяПодсистема.Подсистемы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВставитьИменаПодчиненныхПодсистем(Имена, ТекущаяПодсистема, Все, ИмяТекущейПодсистемы + ".");
	КонецЦикла;
	
КонецПроцедуры

Функция КоличествоСценариев() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СценарииПланирования.Ссылка
		|ИЗ
		|	Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования КАК СценарииПланирования
		|ГДЕ
		|	НЕ СценарииПланирования.ЭтоГруппа
		|	И НЕ СценарииПланирования.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Возврат ВыборкаДетальныеЗаписи.Количество();
	
КонецФункции

Функция БюджетныйРегламентПериода(ПериодПланирования) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ПрименяемыеРегламентыФормированияБюджетовСрезПоследних.Регламент
		|ИЗ
		|	РегистрСведений.фин_ПрименяемыеРегламентыФормированияБюджетов.СрезПоследних(&Период, ) КАК фин_ПрименяемыеРегламентыФормированияБюджетовСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", ПериодПланирования);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Регламент =  ВыборкаДетальныеЗаписи.Регламент;
	Иначе
		Регламент = Документы.фин_БюджетныйРегламент.ПустаяСсылка();
	КонецЕсли;
	Возврат Регламент;
КонецФункции

Функция ИмяФормыВыбораСправочника(ИмяТаблицы) Экспорт
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		Возврат ИмяТаблицы+".ФормаВыбора";
	КонецЕсли;
	Если Найти(ИмяТаблицы,"Справочник.")<>0 Тогда
		МетаданныеСправочника = Метаданные.Справочники[Сред(ИмяТаблицы,Найти(ИмяТаблицы,".")+1)];
		Если МетаданныеСправочника.ОсновнаяФормаДляВыбора <> Неопределено И НРег(МетаданныеСправочника.ОсновнаяФормаДляВыбора.ТипФормы)=НРег("Управляемая") Тогда
			Возврат ИмяТаблицы+".ФормаВыбора";
		ИначеЕсли МетаданныеСправочника.ДополнительнаяФормаДляВыбора <> Неопределено И НРег(МетаданныеСправочника.ДополнительнаяФормаДляВыбора.ТипФормы)=НРег("Управляемая") Тогда
			Возврат ИмяТаблицы+".Форма."+МетаданныеСправочника.ДополнительнаяФормаДляВыбора.Имя;
		Иначе
			Возврат "Обработка.фин_РаботаСоСпискомСправочника.Форма";
		КонецЕсли;
	КонецЕсли;
	Возврат ИмяТаблицы+".ФормаВыбора";
КонецФункции

Функция ПолучитьЗначениеПоУмолчанию(Значение) Экспорт
	Возврат фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ЗначениеПеременной("ТекущийПользователь"), Значение);
КонецФункции

Функция ИмяТабличнойЧастиСоставаГруппыПользователей() Экспорт
	Возврат ?(Метаданные.Справочники.ГруппыПользователей.ТабличныеЧасти.Найти("ПользователиГруппы")<>Неопределено,"ПользователиГруппы","Состав");	
КонецФункции

Функция РеквизитыТабличнойЧастиБюджета() Экспорт
	Массив = Новый Массив;
	Для Каждого Реквизит Из Метаданные.Документы.фин_Бюджет.ТабличныеЧасти.ОборотыПоСтатьям.Реквизиты Цикл
		Массив.Добавить(НРег(Реквизит.Имя));
	КонецЦикла;
	Возврат Массив;
КонецФункции

Функция РеквизитЕдиницыИзмерения() Экспорт
	Возврат ?(Константы.фин_ИспользоватьРеквизитПлановаяЕдиницаИзмеренияПриПланировании.Получить()=Истина,"ПлановаяЕдиницаИзмерения",?(РежимИнтеграции()=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3,"ЕдиницаИзмерения","БазоваяЕдиницаИзмерения"));
КонецФункции
	
#КонецОбласти

#Область РегистрацияФактическихДанных

Функция РегистрФактическихДанныхДляДокумента(Знач ВидДокументов) Экспорт
	
	РежимХранения 		= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимХраненияФактическихДанных");
	Проведение 			= Метаданные.Документы[?(ТипЗнч(ВидДокументов)=Тип("Строка"),ВидДокументов,фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяМетаданныхПоВидуДокумента(ВидДокументов))].Проведение=Метаданные.СвойстваОбъектов.Проведение.Разрешить;
	РегистрацияФакта 	= Ложь;
	
	Если РежимХранения = Перечисления.фин_РежимыХраненияФактическихДанных.ВРегистреОборотыБюджетов Тогда
		Возврат Новый Структура("ИмяРегистра,РегистрацияРучнойОперацией,Проведение,РегистрацияФакта","фин_ОборотыБюджетов",Ложь,Проведение,РегистрацияФакта);
	ИначеЕсли РежимХранения = Перечисления.фин_РежимыХраненияФактическихДанных.ВРегистреФактическиеОборотыБюджетов Тогда
		Возврат Новый Структура("ИмяРегистра,РегистрацияРучнойОперацией,Проведение,РегистрацияФакта","фин_ФактическиеОборотыБюджетов",Ложь,Проведение,РегистрацияФакта);
	Иначе
		Если ТипЗнч(ВидДокументов)=Тип("Строка") Тогда
			ВидДокументов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ВидДокументовПоИмениМетаданных(ВидДокументов);
		КонецЕсли;
	
		Результат = Новый Структура("ИмяРегистра,РегистрацияРучнойОперацией,Проведение,РегистрацияФакта","фин_ФактическиеОборотыБюджетов",Ложь,Проведение,РегистрацияФакта);
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_НастройкиХраненияФактическихДанных.РегистрХраненияФактическихДанных КАК ИмяРегистра,
			|	фин_НастройкиХраненияФактическихДанных.РегистрацияРучнойОперацией
			|ИЗ
			|	РегистрСведений.фин_НастройкиХраненияФактическихДанных КАК фин_НастройкиХраненияФактическихДанных
			|ГДЕ
			|	фин_НастройкиХраненияФактическихДанных.ВидДокументов = &ВидДокументов";
		
		Запрос.УстановитьПараметр("ВидДокументов", ВидДокументов);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Результат,ВыборкаДетальныеЗаписи);
			Возврат Результат;
		КонецЦикла;
		
		Возврат Результат;
	КонецЕсли;
	
	
КонецФункции

Функция ИмеютсяНастройкиДляРегистра(ВидРегистра,ИмяРегистра) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НазначенияШаблонов.Схема КАК НаборШаблонов
	|ИЗ
	|	РегистрСведений.фин_ПрименениеСхемОтраженияФактическихДанных КАК НазначенияШаблонов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_КлассификаторРегистров КАК КлассификаторРегистров
	|		ПО НазначенияШаблонов.ОбъектИнформационнойБазы = КлассификаторРегистров.Ссылка
	|ГДЕ
	|	КлассификаторРегистров.ВидРегистра = &ВидРегистра
	|	И КлассификаторРегистров.ПрограммныйИдентификатор = &ПрограммныйИдентификатор
	|	И КлассификаторРегистров.ПометкаУдаления = ЛОЖЬ
	|	И КлассификаторРегистров.РегистрироватьПервичныеДанныеПоБюджетированию = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НазначенияШаблонов.Правило
	|ИЗ
	|	РегистрСведений.фин_ПериодыПримененияПравилПоФинансовымПоказателям КАК НазначенияШаблонов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_КлассификаторРегистров КАК КлассификаторРегистров
	|		ПО НазначенияШаблонов.Правило.Владелец = КлассификаторРегистров.Ссылка
	|ГДЕ
	|	КлассификаторРегистров.ВидРегистра = &ВидРегистра
	|	И КлассификаторРегистров.ПрограммныйИдентификатор = &ПрограммныйИдентификатор
	|	И КлассификаторРегистров.ПометкаУдаления = ЛОЖЬ
	|	И КлассификаторРегистров.РегистрироватьПервичныеДанныеПоБюджетированию = ИСТИНА";
	
	СоответствиеРегистров= Новый Соответствие;
	СоответствиеРегистров.Вставить("РегистрыСведений",		Перечисления.фин_ВидыРегистровСистемы.РегистрыСведений);
	СоответствиеРегистров.Вставить("РегистрыБухгалтерии",	Перечисления.фин_ВидыРегистровСистемы.РегистрыБухгалтерии);
	СоответствиеРегистров.Вставить("РегистрыНакопления",	Перечисления.фин_ВидыРегистровСистемы.РегистрыНакопления);
	СоответствиеРегистров.Вставить("РегистрыРасчета",		Перечисления.фин_ВидыРегистровСистемы.РегистрыРасчета);
	Запрос.УстановитьПараметр("ВидРегистра", СоответствиеРегистров.Получить(ВидРегистра));
	Запрос.УстановитьПараметр("ПрограммныйИдентификатор", ИмяРегистра);
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
КонецФункции

Функция ИмеютсяНастройкиДляДокумента(ВидДокументов) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НазначенияШаблонов.Схема КАК НаборШаблонов
	|ИЗ
	|	РегистрСведений.фин_ПрименениеСхемОтраженияФактическихДанных КАК НазначенияШаблонов
	|ГДЕ
	|	НазначенияШаблонов.ОбъектИнформационнойБазы = &ВидДокументов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НазначенияШаблонов.Правило
	|ИЗ
	|	РегистрСведений.фин_ПериодыПримененияПравилПоФинансовымПоказателям КАК НазначенияШаблонов
	|ГДЕ
	|	НазначенияШаблонов.Правило.Владелец = &ВидДокументов";
	
	Запрос.УстановитьПараметр("ВидДокументов", ВидДокументов);
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
КонецФункции

Функция СплошнаяРегистрацияДокументовВБюджетировании() Экспорт
	Возврат Метаданные.ПодпискиНаСобытия.фин_БюджетированиеФормированиеПроводокПриПроведенииПервичныхДокументов.Источник.Типы().Количество()=Метаданные.Документы.Количество() И Метаданные.ПодпискиНаСобытия.фин_БюджетированиеФормированиеПроводокПриЗаписиПервичныхДокументов.Источник.Типы().Количество()=Метаданные.Документы.Количество();
КонецФункции

Функция РегистрируемыеВФактическихДанныхДокументы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ВидыДокументов.Ссылка,
		|	фин_ВидыДокументов.ПрограммныйИдентификатор,
		|	фин_ВидыДокументов.РегистрироватьПервичныеДанныеПоБюджетированию
		|ИЗ
		|	Справочник.фин_ВидыДокументов КАК фин_ВидыДокументов
		|ГДЕ
		|	фин_ВидыДокументов.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДокументов = РезультатЗапроса.Выгрузить();
	ТаблицаДокументов.Индексы.Добавить("ПрограммныйИдентификатор");
	
	МассивРегистрируемых = Новый Массив;
	
	ПроверятьРегистры = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_УчитыватьФактическиеДанныеПоДвижениямРегистров");
	
	Если ПроверятьРегистры Тогда
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_КлассификаторРегистров.ПрограммныйИдентификатор,
			|	фин_КлассификаторРегистров.ВидРегистра
			|ИЗ
			|	Справочник.фин_КлассификаторРегистров КАК фин_КлассификаторРегистров
			|ГДЕ
			|	фин_КлассификаторРегистров.РегистрироватьПервичныеДанныеПоБюджетированию
			|	И фин_КлассификаторРегистров.ПометкаУдаления = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		МетаданныеРегистров = Новый Массив;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МетаданныеРегистра = Метаданные[фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВыборкаДетальныеЗаписи.ВидРегистра)].Найти(ВыборкаДетальныеЗаписи.ПрограммныйИдентификатор);
			Если МетаданныеРегистра<>Неопределено Тогда
				МетаданныеРегистров.Добавить(МетаданныеРегистра);
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
	Для Каждого Документ Из Метаданные.Документы Цикл
		Если Найти(Документ.Имя,"фин_")<>0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокиНастроек = ТаблицаДокументов.НайтиСтроки(Новый Структура("ПрограммныйИдентификатор",Документ.Имя));
		Если СтрокиНастроек.Количество()>0 И СтрокиНастроек[0].РегистрироватьПервичныеДанныеПоБюджетированию = Истина Тогда
			МассивРегистрируемых.Добавить(Документ.Имя);
			МассивРегистрируемых.Добавить(СтрокиНастроек[0].Ссылка);
			Продолжить;
		КонецЕсли;
		Если ПроверятьРегистры Тогда
			Для Каждого Регистр Из МетаданныеРегистров Цикл
				Если Документ.Движения.Содержит(Регистр) Тогда
					МассивРегистрируемых.Добавить(Документ.Имя);
					Если СтрокиНастроек.Количество()>0 Тогда
						МассивРегистрируемых.Добавить(СтрокиНастроек[0].Ссылка);
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат МассивРегистрируемых;
КонецФункции

Функция ДокументРегистрируетсяПоБюджетированию(ИмяДокумента) Экспорт
	Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрируемыеВФактическихДанныхДокументы().Найти(ИмяДокумента)<>Неопределено;	
КонецФункции

Функция ИмеютсяПравилаРегистрацииПрогнозныхДанных() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	фин_ПравилаОтраженияФактическихДанных.Ссылка
		|ИЗ
		|	Справочник.фин_ПравилаОтраженияФактическихДанных КАК фин_ПравилаОтраженияФактическихДанных
		|ГДЕ
		|	фин_ПравилаОтраженияФактическихДанных.ПрогнозноеЗначение
		|	И фин_ПравилаОтраженияФактическихДанных.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой();
		
КонецФункции

Функция ИмеютсяЛимитыНаИсполнение() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтролируемыеФинансовыеПоказатели.Регистратор
		|ИЗ
		|	РегистрНакопления.фин_КонтролируемыеФинансовыеПоказатели КАК КонтролируемыеФинансовыеПоказатели
		|ГДЕ
		|	КонтролируемыеФинансовыеПоказатели.ИспользованиеКонтролируемогоЗначения=ЗНАЧЕНИЕ(Перечисление.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой();
		
КонецФункции

Функция ДокументИмеетДвиженияПоРегиструНакопления(ИмяДокумента,ИмяРегистра) Экспорт
	Возврат Метаданные.Документы[ИмяДокумента].Движения.Содержит(Метаданные.РегистрыНакопления[ИмяРегистра]);	
КонецФункции

#КонецОбласти

#Область ОтчетыБюджетирования

Функция РеквизитыСправочникаНастроекОтчетов() Экспорт
	Массив = Новый Массив;
	Для Каждого Реквизит Из Метаданные.Справочники.фин_НастройкиОтчетовПоБюджетам.Реквизиты Цикл
		Массив.Добавить(НРег(Реквизит.Имя));
	КонецЦикла;
	Возврат Массив;
КонецФункции

Функция ТабличныеЧастиСправочникаНастроекОтчетов() Экспорт
	Массив = Новый Массив;
	Для Каждого Реквизит Из Метаданные.Справочники.фин_НастройкиОтчетовПоБюджетам.ТабличныеЧасти Цикл
		Массив.Добавить(НРег(Реквизит.Имя));
	КонецЦикла;
	Возврат Массив;
КонецФункции

Функция ВидОтчетаБюджетирования(ИмяОтчета) Экспорт
	Попытка
		Возврат Справочники.фин_ВидыОтчетовПоБюджетам[ИмяОтчета];
	Исключение
		Возврат Справочники.фин_ВидыОтчетовПоБюджетам.ПустаяСсылка();
	КонецПопытки;
КонецФункции

Функция ИмяОтчетаПоВиду(ВидОтчета) Экспорт
	Возврат Справочники.фин_ВидыОтчетовПоБюджетам.ПолучитьИмяМетаданныхОтчета(ВидОтчета);	
КонецФункции

Функция ПолучитьСписокМакетовОформления() Экспорт
	
	СписокМакетовОформления = Новый СписокЗначений;
	
	Для Каждого ОбщийМакет Из Метаданные.ОбщиеМакеты Цикл
		Если ОбщийМакет.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.МакетОформленияКомпоновкиДанных Тогда
			СписокМакетовОформления.Добавить(ОбщийМакет.Имя, ОбщийМакет.Синоним);
		КонецЕсли;
	КонецЦикла;
	
	СписокМакетовОформления.Добавить("БезОформления", "Без оформления");
	СписокМакетовОформления.Добавить("Основной"     , "Основной");
	СписокМакетовОформления.Добавить("Яркий"        , "Яркий");
	СписокМакетовОформления.Добавить("Море"         , "Море");
	СписокМакетовОформления.Добавить("Арктика"      , "Арктика");
	СписокМакетовОформления.Добавить("Зеленый"      , "Зеленый");
	СписокМакетовОформления.Добавить("Античный"     , "Античный");
	
	Возврат СписокМакетовОформления;
	
КонецФункции

#КонецОбласти

#Область РаботаСОбщимиПереопределяемымиЗначениями

Функция ТипСправочникВидыРаспределенияПоПроектам() Экспорт
	Возврат Тип("СправочникСсылка."+ПрефиксОбщихОбъектов()+"ВидыРаспределенияПоПроектам");
КонецФункции

Функция ТипСправочникУправленческихПодразделений() Экспорт
	Возврат Тип("СправочникСсылка."+ИмяСправочникаПодразделений());
КонецФункции

Функция ТипСправочникаПроектов() Экспорт
	Возврат Тип("СправочникСсылка."+ИмяСправочникаПроектов());
КонецФункции

Функция ОписаниеТиповТерминовБюджетирования() Экспорт
	СтрокаТипов = "СправочникСсылка.фин_Бюджеты,   
		|СправочникСсылка.фин_СтатьиБюджета, СправочникСсылка.ПодразделенияОрганизаций, СправочникСсылка.фин_ПлановаяНоменклатура, СправочникСсылка.Контрагенты, 
		|СправочникСсылка.НоменклатурныеГруппы, СправочникСсылка."+ИмяСправочникаПодразделений()+",  СправочникСсылка."+ИмяСправочникаПроектов()+", 
		|СправочникСсылка.Валюты, СправочникСсылка.ДолжностиОрганизаций,  
		| СправочникСсылка.общ_СценарииПланирования,  СправочникСсылка.Номенклатура, 
		|СправочникСсылка.КлассификаторЕдиницИзмерения,СправочникСсылка.СтатьиДвиженияДенежныхСредств, СправочникСсылка.фин_СлужебныеТерминыБюджетирования,ПланСчетовСсылка.фин_Бюджетирование, СправочникСсылка.фин_ОснованияКорректировокБюджетов, 
		|ПеречислениеСсылка.фин_ВидыОперацийБюджет,ПеречислениеСсылка.фин_СпособыВводаКорректировок, СправочникСсылка.фин_НастройкиОтчетовПоБюджетам,
		|СправочникСсылка.фин_ТаблицыОтчетовПоБюджетам,СправочникСсылка.фин_ПричиныНепринятияСтрокБюджетов,СправочникСсылка.фин_ВидыОтчетовПоБюджетам";
		
	Типы = Новый Массив;
	СтрокаТипов = СтрЗаменить(СтрокаТипов," ","");
	СтрокаТипов = СтрЗаменить(СтрокаТипов,Символы.ПС,"");
	Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаТипов, ",");
	Для Каждого Подстрока Из Подстроки Цикл
		ЧастиСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Подстрока, ".");
		ГруппаМетаданных = Неопределено;
		Если Найти(ЧастиСтроки[0],"Справочник")<>0 Тогда
			ГруппаМетаданных = Метаданные.Справочники;
		ИначеЕсли Найти(ЧастиСтроки[0],"ПланСчетов")<>0 Тогда
			ГруппаМетаданных = Метаданные.ПланыСчетов;
		ИначеЕсли Найти(ЧастиСтроки[0],"Перечисление")<>0 Тогда
			ГруппаМетаданных = Метаданные.Перечисления;
		КонецЕсли;
		Если ГруппаМетаданных<>Неопределено И ГруппаМетаданных.Найти(ЧастиСтроки[1])<>Неопределено Тогда
			Типы.Добавить(Тип(Подстрока));
		КонецЕсли;
	КонецЦикла;
	Для Каждого Тип Из Метаданные.ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Тип.Типы() Цикл
		Если Типы.Найти(Тип)=Неопределено Тогда
			Типы.Добавить(Тип);
		КонецЕсли;
	КонецЦикла;
	ОписаниеТипов = Новый ОписаниеТипов(Типы);
	Возврат ОписаниеТипов;
КонецФункции

Функция ОписаниеТиповУправленческоеПодразделение() Экспорт
	Возврат Новый ОписаниеТипов("СправочникСсылка."+ИмяСправочникаПодразделений());	
КонецФункции

Функция ПоддержкаНоменклатурныхГрупп() Экспорт
	Возврат Метаданные.Справочники.Найти("НоменклатурныеГруппы")<>Неопределено;
КонецФункции

Функция ТипНоменклатурныеГруппыСсылка() Экспорт
	Возврат ?(ПоддержкаНоменклатурныхГрупп(),Тип("СправочникСсылка.НоменклатурныеГруппы"),Тип("Строка"));	
КонецФункции

Функция ПустойТипПлановыхЦен() Экспорт
	Возврат Метаданные.ОпределяемыеТипы.фин_СправочникТиповЦен.Тип.ПривестиЗначение(Неопределено);	
КонецФункции

Функция ТипСправочникСценариевПланирования() Экспорт
	Возврат Тип("СправочникСсылка."+ПрефиксОбщихОбъектов()+"СценарииПланирования");
КонецФункции

Функция ДетализацияПланированияНоменклатурныеГруппы() Экспорт
	Возврат Перечисления[ПрефиксОбщихОбъектов()+"ДетализацияПланирования"].НоменклатурныеГруппы;	
КонецФункции

Функция СостояниеОбъектаУтвержден() Экспорт
	Возврат Перечисления[ПрефиксОбщихОбъектов()+"СостоянияОбъектов"].Утвержден;	
КонецФункции

Функция СостояниеОбъектаПодготовлен() Экспорт
	Возврат Перечисления[ПрефиксОбщихОбъектов()+"СостоянияОбъектов"].Подготовлен;	
КонецФункции

Функция ПустаяСсылкаСценарий() Экспорт
	Возврат Справочники[ПрефиксОбщихОбъектов()+"СценарииПланирования"].Пустаяссылка();	
КонецФункции

Функция ВидВремениПоДням() Экспорт
	Возврат ?(ПоддержкаГрафиковРаботыЗУП(),Перечисления["ВидыУчетаВремени"].ПоДням,"ПоДням");	
КонецФункции

Функция ВидВремениПоЧасам() Экспорт
	Возврат ?(ПоддержкаГрафиковРаботыЗУП(),Перечисления["ВидыУчетаВремени"].ПоЧасам,"ПоЧасам");	
КонецФункции

Функция ЕстьРегистрКурсовВалют() Экспорт
	Возврат Метаданные.РегистрыСведений.Найти("КурсыВалют")<>Неопределено;	
КонецФункции

#КонецОбласти

Функция ЭтоУТ3() Экспорт
	Возврат РежимИнтеграции()=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3;	
КонецФункции

Функция РегистрацияВПланеОбменаПолный(ПолноеИмяМетаданных) Экспорт
	Возврат (Найти(ПолноеИмяМетаданных,"_")<>0 ИЛИ фин_ОбщегоНазначенияВызовСервераПовтИсп.РежимИнтеграции()=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана) И Метаданные.ПланыОбмена["Полный"].Состав.Содержит(Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных));	
КонецФункции

Функция РегистрацияВПланеОбменаПоОрганизации(ПолноеИмяМетаданных) Экспорт
	Возврат (Найти(ПолноеИмяМетаданных,"_")<>0 ИЛИ фин_ОбщегоНазначенияВызовСервераПовтИсп.РежимИнтеграции()=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана) И Метаданные.ПланыОбмена["ПоОрганизации"].Состав.Содержит(Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных));	
КонецФункции


Функция ОтложеннаяРегистрацияВПланеОбменаПоОрганизации(ПолноеИмяМетаданных) Экспорт
	Если (Найти(ПолноеИмяМетаданных,"_")<>0 ИЛИ фин_ОбщегоНазначенияВызовСервераПовтИсп.РежимИнтеграции()=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана) Тогда
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных);
		Возврат Метаданные.ПланыОбмена["ПоОрганизации"].Состав.Содержит(ОбъектМетаданных) И Метаданные.ПланыОбмена["ПоОрганизации"].Состав.Найти(ОбъектМетаданных).АвтоРегистрация=АвтоРегистрацияИзменений.Запретить;	
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПолеПериодичность() Экспорт
	Возврат "Периодичность";	
КонецФункции
