/////////////////////////////////////////////////////////////////////////////////
// ЗАДАЧИ ПОЛЬЗОВАТЕЛЯ

// Процедура заполняет реквизиты адресации у задачи
//
Процедура ЗаписатьАдресациюЗадачи(Задача, Организация, РольИИсполнитель, Подразделение = Неопределено) Экспорт
	
	Если Константы.РазделятьЗадачиПоОрганизациям.Получить() Тогда
		Задача.Организация	= Организация;
	КонецЕсли;
	
	Если Константы.РазделятьЗадачиПоРолямИсполнителей.Получить() Тогда
		Задача.Роль			= РольИИсполнитель;
	КонецЕсли;
	
	УправлениеЗадачамиПереопределяемый.ЗаписатьАдресациюЗадачиДополнительно(Задача, Подразделение);

КонецПроцедуры

// Процедура вызывает алгоритмы формирования задач для каждого вида задачи
//
Процедура СформироватьСписокЗадач() Экспорт
	
	// Получение списка нужных видов задач
	ЗапросНужныхВидовЗадач = Новый Запрос;
	ЗапросНужныхВидовЗадач.Текст =
		"ВЫБРАТЬ
		|	ВидыЗадачПользователей.Ссылка КАК ВидЗадачиПользователей
		|ИЗ
		|	Справочник.ВидыЗадачПользователей КАК ВидыЗадачПользователей
		|ГДЕ
		|	(НЕ ВидыЗадачПользователей.ПометкаУдаления)
		|	И ВидыЗадачПользователей.Использование";
	
	ВыборкаЗапросаВидовЗадач = ЗапросНужныхВидовЗадач.Выполнить().Выбрать();
	
	// Подготовка общих данных
	ВремяФормированияЗадач = ТекущаяДата();
	
	Если День(ВремяФормированияЗадач) < 20 Тогда
		АктуальныйПериодРегистрации = НачалоМесяца(ДобавитьМесяц(ВремяФормированияЗадач, -1));
	Иначе
		АктуальныйПериодРегистрации = НачалоМесяца(ВремяФормированияЗадач);
	КонецЕсли;
	
	// Организации нужно обрабатывать все
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка,
		|	ВЫБОР
		|		КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА Организации.Ссылка
		|		ИНАЧЕ Организации.ГоловнаяОрганизация
		|	КОНЕЦ КАК ГоловнаяОрганизация
		|ИЗ
		|	Справочник.Организации КАК Организации";
		
	Выгрузка = Запрос.Выполнить().Выгрузить();
	СписокОрганизаций			= Выгрузка.ВыгрузитьКолонку("Ссылка");
	СписокГоловныхОрганизаций	= Выгрузка.ВыгрузитьКолонку("ГоловнаяОрганизация");
	
	ЕстьЗадачиВозвратНаРаботу			= Ложь;
	ЕстьЗадачиКадровоеПеремещение		= Ложь;
	ЕстьЗадачиУвольнение				= Ложь;
	
	// Обход выборки запроса и заполнение задач по видам
	Пока ВыборкаЗапросаВидовЗадач.Следующий() Цикл
		
		Если (ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.ВозвратНаРаботу) Тогда
			ЕстьЗадачиВозвратНаРаботу			= Истина;
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.ДеньРождения Тогда
			ДобавитьЗадачиДниРождения(ВремяФормированияЗадач);
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.Доначисление Тогда
			ДобавитьЗадачиДоначисление();
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.КадровоеПеремещение Тогда
			ЕстьЗадачиКадровоеПеремещение		= Истина;
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.НачислениеПоКадровомуДокументу Тогда
			ДобавитьЗадачиНачислениеПоКадровомуДокументу(ВремяФормированияЗадач, СписокОрганизаций);
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.ОтражениеЗарплатыВУчете Тогда
			ДобавитьЗадачиОтражениеЗарплатыВУчете(АктуальныйПериодРегистрации);
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.Перезаполнение Тогда
			ДобавитьЗадачиПерезаполнение(АктуальныйПериодРегистрации);
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.Перерасчет Тогда
			ДобавитьЗадачиПерерасчет(АктуальныйПериодРегистрации, СписокОрганизаций);
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.ПриемНаРаботу Тогда
			ДобавитьЗадачиПриемНаРаботу(ВремяФормированияЗадач, СписокГоловныхОрганизаций);
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.ПроизводственныйКалендарь Тогда
			ДобавитьЗадачиПроизводственныйКалендарь(ВремяФормированияЗадач);
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.РасчетСНиСО Тогда
			ДобавитьЗадачиРасчетСНиСО(АктуальныйПериодРегистрации);
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.РасчетЗарплаты Тогда
			ДобавитьЗадачиРасчетЗарплаты(АктуальныйПериодРегистрации);
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.РасчетУдержанийРаботниковОрганизаций Тогда
			ДобавитьЗадачиРасчетУдержанийРаботниковОрганизаций(АктуальныйПериодРегистрации);
	
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.Увольнение Тогда
			ЕстьЗадачиУвольнение				= Истина;
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.КонтрольОплатыПокупателей Тогда
			ДобавитьЗадачиКонтрольОплатыПокупателей(АктуальныйПериодРегистрации);

		Иначе
			УправлениеЗадачамиПереопределяемый.ДобавитьЗадачи(
				ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей,
				ВремяФормированияЗадач,
				АктуальныйПериодРегистрации,
				СписокГоловныхОрганизаций,
				СписокОрганизаций);
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьЗадачиНамеченныеСобытияПоПерсоналу(ВремяФормированияЗадач, СписокОрганизаций, ЕстьЗадачиВозвратНаРаботу, ЕстьЗадачиКадровоеПеремещение, ЕстьЗадачиУвольнение);
	
	// Удалим выполненные задачи 3х месячной давности
	Запрос.УстановитьПараметр("АктуальныйПериодРегистрации",	АктуальныйПериодРегистрации);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Задачи.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.Выполнена
		|	И Задачи.Дата < ДОБАВИТЬКДАТЕ(&АктуальныйПериодРегистрации, МЕСЯЦ, -3)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Выборка.Ссылка.ПолучитьОбъект().Удалить();
	КонецЦикла;
	
	// Изменение Константы ДатаАктуальностиЗадач
	Константы.ДатаАктуальностиЗадач.Установить(ВремяФормированияЗадач);
	
КонецПроцедуры

Процедура ОтменитьЗадачу(ВидЗадачи, ОбъектЗадачи) Экспорт
	
	Если ВидЗадачи = Справочники.ВидыЗадачПользователей.Перерасчет Тогда
		УдалитьЗадачуПерерасчет(ОбъектЗадачи);
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ЗАДАЧ ЗАРПЛАТНО-КАДРОВОЙ ФУНКЦИОНАЛЬНОСТИ

Процедура ДобавитьЗадачиДниРождения(ВремяФормированияЗадач)
	
	ЗапросДляДнейРождения = Новый Запрос;
	ЗапросДляДнейРождения.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА МЕСЯЦ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) = 12
		|				И МЕСЯЦ(&ВремяФормированияЗадач) = 1
		|			ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения, ГОД, ГОД(&ВремяФормированияЗадач) - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) - 1)
		|		КОГДА МЕСЯЦ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) = 1
		|				И МЕСЯЦ(&ВремяФормированияЗадач) = 12
		|			ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения, ГОД, ГОД(&ВремяФормированияЗадач) - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) + 1)
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения, ГОД, ГОД(&ВремяФормированияЗадач) - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения))
		|	КОНЕЦ КАК Период,
		|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Наименование КАК Наименование,
		|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Ссылка,
		|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Пол КАК Пол,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский)
		|			ТОГДА ""сотрудницу ""
		|		ИНАЧЕ ""сотрудника ""
		|	КОНЕЦ КАК СотрудникНадпись,
		|	ВЫБОР
		|		КОГДА (ГОД(&ВремяФормированияЗадач) - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения)) / 5 = (ВЫРАЗИТЬ((ГОД(&ВремяФормированияЗадач) - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения)) / 5 КАК ЧИСЛО(4, 0)))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДополнительныеДанные,
		|	ВЫБОР
		|		КОГДА МЕСЯЦ(&ВремяФормированияЗадач) < МЕСЯЦ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения)
		|				И МЕСЯЦ(&ВремяФормированияЗадач) = 12
		|			ТОГДА ГОД(&ВремяФормированияЗадач) - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) + 1
		|		ИНАЧЕ ГОД(&ВремяФормированияЗадач) - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения)
		|	КОНЕЦ КАК Возраст,
		|	ВЫБОР
		|		КОГДА Константы.РазделятьЗадачиПоОрганизациям
		|			ТОГДА РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	КОНЕЦ КАК Организация
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних КАК РаботникиОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Задачи.ОбъектЗадачи КАК ФизЛицо,
		|			Задачи.Дата КАК Дата
		|		ИЗ
		|			Задача.ЗадачаИсполнителя КАК Задачи
		|		ГДЕ
		|			Задачи.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.ДеньРождения)) КАК Существующие
		|		ПО (Существующие.ФизЛицо = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо)
		|			И (ВЫБОР
		|				КОГДА МЕСЯЦ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) = 12
		|						И МЕСЯЦ(&ВремяФормированияЗадач) = 1
		|					ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения, ГОД, ГОД(&ВремяФормированияЗадач) - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) - 1)
		|				КОГДА МЕСЯЦ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) = 1
		|						И МЕСЯЦ(&ВремяФормированияЗадач) = 12
		|					ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения, ГОД, ГОД(&ВремяФормированияЗадач) - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) + 1)
		|				ИНАЧЕ ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения, ГОД, ГОД(&ВремяФормированияЗадач) - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения))
		|			КОНЕЦ = Существующие.Дата),
		|	Константы КАК Константы
		|ГДЕ
		|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|	И ВЫБОР
		|			КОГДА МЕСЯЦ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) = 12
		|					И МЕСЯЦ(&ВремяФормированияЗадач) = 1
		|				ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения, ГОД, ГОД(&ВремяФормированияЗадач) - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) - 1)
		|			КОГДА МЕСЯЦ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) = 1
		|					И МЕСЯЦ(&ВремяФормированияЗадач) = 12
		|				ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения, ГОД, ГОД(&ВремяФормированияЗадач) - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) + 1)
		|			ИНАЧЕ ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения, ГОД, ГОД(&ВремяФормированияЗадач) - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения))
		|		КОНЕЦ МЕЖДУ ДОБАВИТЬКДАТЕ(&ВремяФормированияЗадач, ДЕНЬ, -5) И ДОБАВИТЬКДАТЕ(&ВремяФормированияЗадач, ДЕНЬ, 5)
		|	И РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения <> ДАТАВРЕМЯ(1, 1, 1)
		|	И Существующие.ФизЛицо ЕСТЬ NULL 
		|	И РаботникиОрганизацийСрезПоследних.Сотрудник.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	Наименование";
	
	ЗапросДляДнейРождения.Параметры.Вставить("ВремяФормированияЗадач", ВремяФормированияЗадач);
	ВыборкаДнейРождения = ЗапросДляДнейРождения.Выполнить().Выбрать();
	
	Пока ВыборкаДнейРождения.Следующий() Цикл
		
		ФИОСотрудника = СокрЛП(ВыборкаДнейРождения.Наименование);
		
		Если ВыборкаДнейРождения.ДополнительныеДанные Тогда
			НаименованиеЗадачи = "Поздравить " + Формат(ВыборкаДнейРождения.Период, "ДФ=""дд ММММ""") + " с юбилеем " + ВыборкаДнейРождения.СотрудникНадпись + ФИОСотрудника+ " (" + Строка(ВыборкаДнейРождения.Возраст) + ОбщегоНазначения.ФормаМножественногоЧисла(" год", " года", " лет", ВыборкаДнейРождения.Возраст) + ")";
		Иначе
			НаименованиеЗадачи = "Поздравить " + Формат(ВыборкаДнейРождения.Период, "ДФ=""дд ММММ""") + " с днем рождения " + ВыборкаДнейРождения.СотрудникНадпись + ФИОСотрудника + " (" + Строка(ВыборкаДнейРождения.Возраст) + ОбщегоНазначения.ФормаМножественногоЧисла(" год", " года", " лет", ВыборкаДнейРождения.Возраст) + ")";
		КонецЕсли;
		
		ЗадачаДнейРождения = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаДнейРождения.Дата			= НачалоДня(ВыборкаДнейРождения.Период);
		ЗадачаДнейРождения.ВидЗадачи	= Справочники.ВидыЗадачПользователей.ДеньРождения;
		ЗадачаДнейРождения.ОбъектЗадачи	= ВыборкаДнейРождения.Ссылка;
		ЗадачаДнейРождения.Наименование	= НаименованиеЗадачи;
		ЗаписатьАдресациюЗадачи(ЗадачаДнейРождения, ВыборкаДнейРождения.Организация, Справочники.РолиИсполнителей.Кадровик);
		ЗадачаДнейРождения.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗадачиДоначисление()
	
	ЗапросДопначислений = Новый Запрос;
	ЗапросДопначислений.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Доначисления.Сотрудник КАК Ссылка,
		|	Доначисления.Сотрудник.Физлицо.Пол КАК Пол,
		|	ПРЕДСТАВЛЕНИЕ(Доначисления.Сотрудник) КАК Наименование,
		|	Доначисления.Организация КАК Организация,
		|	Доначисления.ПериодДействия КАК Период,
		|	Доначисления.ДатаНачала КАК ДатаНачала,
		|	Доначисления.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	РегистрСведений.ДоначисленияСотрудникам КАК Доначисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			Задачи.ОбъектЗадачи КАК Сотрудник
		|		ИЗ
		|			Задача.ЗадачаИсполнителя КАК Задачи
		|		ГДЕ
		|			Задачи.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.Доначисление)) КАК Существующие
		|		ПО (Существующие.Сотрудник = Доначисления.Сотрудник)
		|ГДЕ
		|	Существующие.Сотрудник ЕСТЬ NULL ";
	ВыборкаДопначислений = ЗапросДопначислений.Выполнить().Выбрать();
	
	Пока ВыборкаДопначислений.Следующий() Цикл
		
		ФИОСотрудника = СокрЛП(ВыборкаДопначислений.Наименование);
		
		НаименованиеЗадачи = "Доначислить сотруднику " + ФИОСотрудника + " зарплату за " + ПредставлениеПериода(ВыборкаДопначислений.ДатаНачала, ВыборкаДопначислений.ДатаОкончания);
		
		ЗадачаДоначисления = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаДоначисления.Дата			= НачалоДня(ОбщегоНазначения.ПолучитьРабочуюДату());
		ЗадачаДоначисления.ВидЗадачи	= Справочники.ВидыЗадачПользователей.Доначисление;
		ЗадачаДоначисления.ОбъектЗадачи	= ВыборкаДопначислений.Ссылка;
		ЗадачаДоначисления.Наименование	= НаименованиеЗадачи;
		ЗаписатьАдресациюЗадачи(ЗадачаДоначисления, ВыборкаДопначислений.Организация, Справочники.РолиИсполнителей.Расчетчик);
		ЗадачаДоначисления.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗадачиПриемНаРаботу(ВремяФормированияЗадач, МассивОрганизаций)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.Ссылка.Наименование КАК Наименование,
		|	СотрудникиОрганизаций.Ссылка.Физлицо.Пол КАК Пол,
		|	СотрудникиОрганизаций.СтруктурнаяЕдиница КАК Организация
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних КАК РаботникиОрганизаций
		|		ПО (РаботникиОрганизаций.Сотрудник = СотрудникиОрганизаций.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			Задачи.ОбъектЗадачи КАК Сотрудник
		|		ИЗ
		|			Задача.ЗадачаИсполнителя КАК Задачи
		|		ГДЕ
		|			Задачи.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.ПриемНаРаботу)) КАК Существующие
		|		ПО (Существующие.Сотрудник = СотрудникиОрганизаций.Ссылка)
		|ГДЕ
		|	(НЕ СотрудникиОрганизаций.ЭтоГруппа)
		|	И (НЕ СотрудникиОрганизаций.ПометкаУдаления)
		|	И СотрудникиОрганизаций.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор))
		|	И РаботникиОрганизаций.Сотрудник ЕСТЬ NULL
		|	И Существующие.Сотрудник ЕСТЬ NULL
		|	И СотрудникиОрганизаций.Актуальность";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ФИОСотрудника = СокрЛП(Выборка.Наименование);
		
		НаименованиеЗадачи = "Принять на работу сотрудника " + ФИОСотрудника;
		
		ЗадачаПоПерсоналу = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаПоПерсоналу.Дата			= НачалоДня(ВремяФормированияЗадач);
		ЗадачаПоПерсоналу.ВидЗадачи		= Справочники.ВидыЗадачПользователей.ПриемНаРаботу;
		ЗадачаПоПерсоналу.ОбъектЗадачи	= Выборка.Сотрудник;
		ЗадачаПоПерсоналу.Наименование	= НаименованиеЗадачи;
		ЗаписатьАдресациюЗадачи(ЗадачаПоПерсоналу, Выборка.Организация, Справочники.РолиИсполнителей.Кадровик);
		ЗадачаПоПерсоналу.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗадачиПерезаполнение(АктуальныйПериодРегистрации)
	
	ЗапросПерезаполнения = Новый Запрос;
	ЗапросПерезаполнения.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеНачисления.ОбъектЗаполнения КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ПлановыеНачисления.ОбъектЗаполнения) КАК Наименование,
		|	ПлановыеНачисления.ОбособленноеПодразделение КАК Организация,
		|	ПлановыеНачисления.ПериодРегистрации КАК Период
		|ИЗ
		|	РегистрСведений.ЗаполнениеПлановыхНачислений КАК ПлановыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Задачи.ОбъектЗадачи КАК ОбъектЗаполнения
		|		ИЗ
		|			Задача.ЗадачаИсполнителя КАК Задачи
		|		ГДЕ
		|			Задачи.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.Перезаполнение)) КАК Существующие
		|		ПО (Существующие.ОбъектЗаполнения = ПлановыеНачисления.ОбъектЗаполнения)
		|ГДЕ
		|	ПлановыеНачисления.ПериодРегистрации >= &АктуальныйПериодРегистрации
		|	И Существующие.ОбъектЗаполнения ЕСТЬ NULL ";
								
	ЗапросПерезаполнения.Параметры.Вставить("АктуальныйПериодРегистрации", АктуальныйПериодРегистрации);
	ВыборкаПерезаполнения = ЗапросПерезаполнения.Выполнить().Выбрать();
	
	Пока ВыборкаПерезаполнения.Следующий() Цикл
		
		НаименованиеЗадачи = "Перезаполнить и перерассчитать " + СокрЛП(ВыборкаПерезаполнения.Наименование);
		
		ЗадачаПерезаполнения = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаПерезаполнения.Дата			= НачалоДня(ВыборкаПерезаполнения.Период);
		ЗадачаПерезаполнения.ВидЗадачи		= Справочники.ВидыЗадачПользователей.Перезаполнение;
		ЗадачаПерезаполнения.ОбъектЗадачи	= ВыборкаПерезаполнения.Ссылка;
		ЗадачаПерезаполнения.Наименование	= НаименованиеЗадачи;
		ЗаписатьАдресациюЗадачи(ЗадачаПерезаполнения, ВыборкаПерезаполнения.Организация, Справочники.РолиИсполнителей.Расчетчик);
		ЗадачаПерезаполнения.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗадачиПерерасчет(АктуальныйПериодРегистрации, МассивОрганизаций)
	
	ОбработкаПерерасчетЗарплаты = Обработки.ПерерасчетЗарплатыОрганизаций.Создать();
	ОбработкаПерерасчетЗарплаты.ТекущийПериод = АктуальныйПериодРегистрации;
	Результат = ОбработкаПерерасчетЗарплаты.СформироватьЗапрос(МассивОрганизаций, АктуальныйПериодРегистрации, Новый Массив);
	ТаблицаПерерасчетов = Результат.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаПерерасчетов",		 ТаблицаПерерасчетов);
	Запрос.УстановитьПараметр("АктуальныйПериодРегистрации", АктуальныйПериодРегистрации);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПерерасчетов.Наименование,
		|	ТаблицаПерерасчетов.ПериодРегистрации,
		|	ТаблицаПерерасчетов.Документ,
		|	ТаблицаПерерасчетов.Организация
		|ПОМЕСТИТЬ ВТ_Перерасчеты
		|ИЗ
		|	&ТаблицаПерерасчетов КАК ТаблицаПерерасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Перерасчеты.Наименование,
		|	Перерасчеты.ПериодРегистрации,
		|	Перерасчеты.Документ,
		|	Перерасчеты.Организация
		|ИЗ
		|	ВТ_Перерасчеты КАК Перерасчеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК Задачи
		|		ПО Перерасчеты.Документ = Задачи.ОбъектЗадачи
		|			И (Задачи.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.Перерасчет))
		|			И (НАЧАЛОПЕРИОДА(Задачи.Дата, ДЕНЬ) = Перерасчеты.ПериодРегистрации)
		|ГДЕ
		|	Задачи.Ссылка ЕСТЬ NULL ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаименованиеЗадачи = "Перерассчитать " + СокрЛП(Выборка.Наименование);
		
		ЗадачаПерерасчета = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаПерерасчета.Дата			= НачалоДня(Выборка.ПериодРегистрации);
		ЗадачаПерерасчета.ВидЗадачи		= Справочники.ВидыЗадачПользователей.Перерасчет;
		ЗадачаПерерасчета.ОбъектЗадачи	= Выборка.Документ;
		ЗадачаПерерасчета.Наименование	= НаименованиеЗадачи;
		ЗаписатьАдресациюЗадачи(ЗадачаПерерасчета, Выборка.Организация, Справочники.РолиИсполнителей.Расчетчик);
		ЗадачаПерерасчета.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗадачиПроизводственныйКалендарь(ВремяФормированияЗадач)
	
	ПервыйГод	= Год(ДобавитьМесяц(ВремяФормированияЗадач, -1));
	ВторойГод	= Год(ДобавитьМесяц(ВремяФормированияЗадач, 1));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Календарь.Год КАК Год
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК Календарь
		|ГДЕ
		|	Календарь.Год МЕЖДУ &ПервыйГод И &ВторойГод
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Задачи.ОбъектЗадачи
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.ПроизводственныйКалендарь)
		|	И Задачи.ОбъектЗадачи МЕЖДУ &ПервыйГод И &ВторойГод";
	
	Запрос.УстановитьПараметр("ПервыйГод",	ПервыйГод);
	Запрос.УстановитьПараметр("ВторойГод",	ВторойГод);
	
	Результат = Запрос.Выполнить();
	
	ДваГода = ПервыйГод <> ВторойГод;
	
	ЗаполнятьПервыйГод	= Результат.Пустой();
	ЗаполнятьВторойГод	= Результат.Пустой() И ДваГода;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Год = ПервыйГод Тогда
			ЗаполнятьПервыйГод	= Ложь;
		КонецЕсли;
		
		Если Выборка.Год = ВторойГод И ДваГода Тогда
			ЗаполнятьВторойГод	= Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаполнятьПервыйГод Тогда
		НаименованиеЗадачи = "Заполнить производственный календарь за " + Формат(ПервыйГод,"ЧЦ=4; ЧГ=0") + " год";;
		
		ЗадачаКалендаря = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаКалендаря.Дата			= Дата(ПервыйГод, 1, 1);
		ЗадачаКалендаря.ВидЗадачи		= Справочники.ВидыЗадачПользователей.ПроизводственныйКалендарь;
		ЗадачаКалендаря.ОбъектЗадачи	= ПервыйГод;
		ЗадачаКалендаря.Наименование	= НаименованиеЗадачи;
		ЗаписатьАдресациюЗадачи(ЗадачаКалендаря, Справочники.Организации.ПустаяСсылка(), Справочники.РолиИсполнителей.ПустаяСсылка());
		ЗадачаКалендаря.Записать();
	КонецЕсли;
	
	Если ЗаполнятьВторойГод Тогда
		НаименованиеЗадачи = "Заполнить производственный календарь за " + Формат(ВторойГод,"ЧЦ=4; ЧГ=0") + " год";;
		
		ЗадачаКалендаря = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаКалендаря.Дата			= Дата(ВторойГод, 1, 1);
		ЗадачаКалендаря.ВидЗадачи		= Справочники.ВидыЗадачПользователей.ПроизводственныйКалендарь;
		ЗадачаКалендаря.ОбъектЗадачи	= ВторойГод;
		ЗадачаКалендаря.Наименование	= НаименованиеЗадачи;
		ЗаписатьАдресациюЗадачи(ЗадачаКалендаря, Справочники.Организации.ПустаяСсылка(), Справочники.РолиИсполнителей.ПустаяСсылка());
		ЗадачаКалендаря.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗадачиРасчетЗарплаты(АктуальныйПериодРегистрации)
	
	ЗапросРасчетаЗарплаты = Новый Запрос;
	ЗапросРасчетаЗарплаты.Текст =
		"ВЫБРАТЬ
		|	КОНЕЦПЕРИОДА(&АктуальныйПериодРегистрации, МЕСЯЦ) КАК Период,
		|	Организации.Ссылка КАК Организация,
		|	Организации.Наименование КАК НаименованиеОрганизации,
		|	НачислениеЗарплатыРаботникамОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(НачислениеЗарплатыРаботникамОрганизаций.Ссылка) КАК Ссылка,
		|			НачислениеЗарплатыРаботникамОрганизаций.Организация КАК Организация
		|		ИЗ
		|			Документ.НачислениеЗарплатыРаботникамОрганизаций КАК НачислениеЗарплатыРаботникамОрганизаций
		|		ГДЕ
		|			НачислениеЗарплатыРаботникамОрганизаций.ПериодРегистрации = &АктуальныйПериодРегистрации
		|			И (НЕ НачислениеЗарплатыРаботникамОрганизаций.ПометкаУдаления)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			НачислениеЗарплатыРаботникамОрганизаций.Организация) КАК НачислениеЗарплатыРаботникамОрганизаций
		|		ПО Организации.Ссылка = НачислениеЗарплатыРаботникамОрганизаций.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Задачи.ОбъектЗадачи КАК Организация,
		|			Задачи.Дата КАК Дата
		|		ИЗ
		|			Задача.ЗадачаИсполнителя КАК Задачи
		|		ГДЕ
		|			Задачи.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.РасчетЗарплаты)) КАК Существующие
		|		ПО (Существующие.Организация = Организации.Ссылка)
		|			И (Существующие.Дата = КОНЕЦПЕРИОДА(&АктуальныйПериодРегистрации, МЕСЯЦ))
		|ГДЕ
		|	(НЕ 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					Документ.НачислениеЗарплатыРаботникамОрганизаций КАК Док
		|				ГДЕ
		|					Док.Организация = Организации.Ссылка
		|					И Док.Проведен
		|					И Док.ПериодРегистрации = &АктуальныйПериодРегистрации))
		|	И Существующие.Организация ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	НаименованиеОрганизации";
	
	ЗапросРасчетаЗарплаты.Параметры.Вставить("АктуальныйПериодРегистрации", АктуальныйПериодРегистрации);
	Выборка = ЗапросРасчетаЗарплаты.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаименованиеОрганизации = "";
		
		Если НЕ ПустаяСтрока(Выборка.НаименованиеОрганизации) Тогда
			НаименованиеОрганизации = " по " + ПроцедурыУправленияПерсоналом.ПреобразоватьСтрокуИнтерфейса("организации ") + СокрЛП(Выборка.НаименованиеОрганизации);
		КонецЕсли;
		
		НаименованиеЗадачи = "Начислить зарплату за " + Формат(Выборка.Период, "ДФ='ММММ'") + НаименованиеОрганизации;
		
		ЗадачаРасчетаЗарплаты = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаРасчетаЗарплаты.Дата			= КонецДня(Выборка.Период);
		ЗадачаРасчетаЗарплаты.ВидЗадачи		= Справочники.ВидыЗадачПользователей.РасчетЗарплаты;
		ЗадачаРасчетаЗарплаты.ОбъектЗадачи	= Выборка.Организация;
		ЗадачаРасчетаЗарплаты.Наименование	= НаименованиеЗадачи;
		ЗаписатьАдресациюЗадачи(ЗадачаРасчетаЗарплаты, Выборка.Организация, Справочники.РолиИсполнителей.Расчетчик);
		ЗадачаРасчетаЗарплаты.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗадачиРасчетСНиСО(АктуальныйПериодРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОНЕЦПЕРИОДА(&АктуальныйПериодРегистрации, МЕСЯЦ) КАК Период,
		|	Организации.Ссылка КАК Организация,
		|	Организации.Наименование КАК НаименованиеОрганизации,
		|	ДокументРасчетСНиСО.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(РасчетСНиСО.Ссылка) КАК Ссылка,
		|			РасчетСНиСО.Организация КАК Организация
		|		ИЗ
		|			Документ.РасчетСНиСО КАК РасчетСНиСО
		|		ГДЕ
		|			РасчетСНиСО.ПериодРегистрации = &АктуальныйПериодРегистрации
		|			И (НЕ РасчетСНиСО.ПометкаУдаления)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РасчетСНиСО.Организация) КАК ДокументРасчетСНиСО
		|		ПО Организации.Ссылка = ДокументРасчетСНиСО.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Задачи.ОбъектЗадачи КАК Организация,
		|			Задачи.Дата КАК Дата
		|		ИЗ
		|			Задача.ЗадачаИсполнителя КАК Задачи
		|		ГДЕ
		|			Задачи.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.РасчетСНиСО)) КАК Существующие
		|		ПО (Существующие.Организация = Организации.Ссылка)
		|			И (Существующие.Дата = КОНЕЦПЕРИОДА(&АктуальныйПериодРегистрации, МЕСЯЦ))
		|ГДЕ
		|	1 В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				1
		|			ИЗ
		|				Документ.НачислениеЗарплатыРаботникамОрганизаций КАК Док
		|			ГДЕ
		|				Док.Организация = Организации.Ссылка
		|				И Док.Проведен
		|				И Док.ПериодРегистрации = &АктуальныйПериодРегистрации)
		|	И (НЕ 2 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					2
		|				ИЗ
		|					Документ.РасчетСНиСО КАК ДокРасчетСНиСО
		|				ГДЕ
		|					ДокРасчетСНиСО.Организация = Организации.Ссылка
		|					И ДокРасчетСНиСО.Проведен
		|					И ДокРасчетСНиСО.ПериодРегистрации = &АктуальныйПериодРегистрации))
		|	И Существующие.Организация ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	НаименованиеОрганизации";
	
	Запрос.Параметры.Вставить("АктуальныйПериодРегистрации", АктуальныйПериодРегистрации);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаименованиеОрганизации = "";
		
		Если НЕ ПустаяСтрока(Выборка.НаименованиеОрганизации) Тогда
			НаименованиеОрганизации = " по " + ПроцедурыУправленияПерсоналом.ПреобразоватьСтрокуИнтерфейса("организации ") + СокрЛП(Выборка.НаименованиеОрганизации);
		КонецЕсли;
		
		НаименованиеЗадачи = "Рассчитать СН и СО за " + Формат(Выборка.Период, "ДФ='ММММ'") + НаименованиеОрганизации;
		
		ЗадачаРасчета = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаРасчета.Дата			= КонецДня(Выборка.Период);
		ЗадачаРасчета.ВидЗадачи		= Справочники.ВидыЗадачПользователей.РасчетСНиСО;
		ЗадачаРасчета.ОбъектЗадачи	= Выборка.Организация;
		ЗадачаРасчета.Наименование	= НаименованиеЗадачи;
		ЗаписатьАдресациюЗадачи(ЗадачаРасчета, Выборка.Организация, Справочники.РолиИсполнителей.Расчетчик);
		ЗадачаРасчета.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗадачиРасчетУдержанийРаботниковОрганизаций(АктуальныйПериодРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОНЕЦПЕРИОДА(&АктуальныйПериодРегистрации, МЕСЯЦ) КАК Период,
		|	Организации.Ссылка КАК Организация,
		|	Организации.Наименование КАК НаименованиеОрганизации,
		|	ДокументРасчетУдержанийРаботниковОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(РасчетУдержанийРаботниковОрганизаций.Ссылка) КАК Ссылка,
		|			РасчетУдержанийРаботниковОрганизаций.Организация КАК Организация
		|		ИЗ
		|			Документ.РасчетУдержанийРаботниковОрганизаций КАК РасчетУдержанийРаботниковОрганизаций
		|		ГДЕ
		|			РасчетУдержанийРаботниковОрганизаций.ПериодРегистрации = &АктуальныйПериодРегистрации
		|			И (НЕ РасчетУдержанийРаботниковОрганизаций.ПометкаУдаления)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РасчетУдержанийРаботниковОрганизаций.Организация) КАК ДокументРасчетУдержанийРаботниковОрганизаций
		|		ПО Организации.Ссылка = ДокументРасчетУдержанийРаботниковОрганизаций.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Задачи.ОбъектЗадачи КАК Организация,
		|			Задачи.Дата КАК Дата
		|		ИЗ
		|			Задача.ЗадачаИсполнителя КАК Задачи
		|		ГДЕ
		|			Задачи.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.РасчетУдержанийРаботниковОрганизаций)) КАК Существующие
		|		ПО (Существующие.Организация = Организации.Ссылка)
		|			И (Существующие.Дата = КОНЕЦПЕРИОДА(&АктуальныйПериодРегистрации, МЕСЯЦ))
		|ГДЕ
		|	1 В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				1
		|			ИЗ
		|				Документ.НачислениеЗарплатыРаботникамОрганизаций КАК Док
		|			ГДЕ
		|				Док.Организация = Организации.Ссылка
		|				И Док.Проведен
		|				И Док.ПериодРегистрации = &АктуальныйПериодРегистрации)
		|	И (НЕ 2 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					2
		|				ИЗ
		|					Документ.РасчетУдержанийРаботниковОрганизаций КАК ДокРасчетУдержанийРаботниковОрганизаций
		|				ГДЕ
		|					ДокРасчетУдержанийРаботниковОрганизаций.Организация = Организации.Ссылка
		|					И ДокРасчетУдержанийРаботниковОрганизаций.Проведен
		|					И ДокРасчетУдержанийРаботниковОрганизаций.ПериодРегистрации = &АктуальныйПериодРегистрации))
		|	И Существующие.Организация ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	НаименованиеОрганизации";
	
	Запрос.Параметры.Вставить("АктуальныйПериодРегистрации", АктуальныйПериодРегистрации);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаименованиеОрганизации = "";
		
		Если НЕ ПустаяСтрока(Выборка.НаименованиеОрганизации) Тогда
			НаименованиеОрганизации = " по " + ПроцедурыУправленияПерсоналом.ПреобразоватьСтрокуИнтерфейса("организации ") + СокрЛП(Выборка.НаименованиеОрганизации);
		КонецЕсли;
		
		НаименованиеЗадачи = "Рассчитать удержания сотрудников за " + Формат(Выборка.Период, "ДФ='ММММ'") + НаименованиеОрганизации;
		
		ЗадачаРасчета = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаРасчета.Дата			= КонецДня(Выборка.Период);
		ЗадачаРасчета.ВидЗадачи		= Справочники.ВидыЗадачПользователей.РасчетУдержанийРаботниковОрганизаций;
		ЗадачаРасчета.ОбъектЗадачи	= Выборка.Организация;
		ЗадачаРасчета.Наименование	= НаименованиеЗадачи;
		ЗаписатьАдресациюЗадачи(ЗадачаРасчета, Выборка.Организация, Справочники.РолиИсполнителей.Расчетчик);
		ЗадачаРасчета.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗадачиНачислениеПоКадровомуДокументу(ВремяФормированияЗадач, СписокОрганизаций)
	
	ОбработкаАнализНеявок = Обработки.АнализНеявок.Создать();
	ОбработкаАнализНеявок.ДатаНачала  	= НачалоМесяца(ВремяФормированияЗадач);
	ОбработкаАнализНеявок.ДатаОкончания = КонецМесяца(ВремяФормированияЗадач);
	
	Результат = ОбработкаАнализНеявок.СформироватьЗапрос(СписокОрганизаций);
	ТаблицаНеявок = Результат.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаНеявок",	ТаблицаНеявок);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаНеявок.КадровыйДокумент,
		|	ТаблицаНеявок.РасчетныйДокумент,
		|	ТаблицаНеявок.ДатаОкончания,
		|	ТаблицаНеявок.Организация
		|ПОМЕСТИТЬ ВТ_Неявки
		|ИЗ
		|	&ТаблицаНеявок КАК ТаблицаНеявок
		|ГДЕ
		|	(НЕ ТаблицаНеявок.ДатаОкончания ЕСТЬ NULL )
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Неявки.КадровыйДокумент,
		|	ВТ_Неявки.РасчетныйДокумент,
		|	ВТ_Неявки.ДатаОкончания,
		|	ВТ_Неявки.Организация
		|ИЗ
		|	ВТ_Неявки КАК ВТ_Неявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК Задачи
		|		ПО ВТ_Неявки.КадровыйДокумент = Задачи.ОбъектЗадачи
		|			И (Задачи.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.НачислениеПоКадровомуДокументу))
		|ГДЕ
		|	Задачи.Ссылка ЕСТЬ NULL ";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.РасчетныйДокумент) Тогда
			НаименованиеЗадачи = "Рассчитать документ " + Выборка.КадровыйДокумент;
			
			ЗадачаРасчетаЗарплаты = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			ЗадачаРасчетаЗарплаты.Дата			= КонецДня(ВремяФормированияЗадач);
			ЗадачаРасчетаЗарплаты.ВидЗадачи		= Справочники.ВидыЗадачПользователей.НачислениеПоКадровомуДокументу;
			ЗадачаРасчетаЗарплаты.Наименование	= НаименованиеЗадачи;
			ЗадачаРасчетаЗарплаты.ОбъектЗадачи	= Выборка.КадровыйДокумент;
			ЗаписатьАдресациюЗадачи(ЗадачаРасчетаЗарплаты, Выборка.Организация, Справочники.РолиИсполнителей.Расчетчик);
			ЗадачаРасчетаЗарплаты.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗадачиОтражениеЗарплатыВУчете(АктуальныйПериодРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(&АктуальныйПериодРегистрации, МЕСЯЦ) КАК Период,
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	ДокОтражениеЗПвУчете.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ОтражениеЗП.Ссылка) КАК Ссылка,
	|			ОтражениеЗП.Организация КАК Организация
	|		ИЗ
	|			Документ.ОтражениеЗарплатыВРеглУчете КАК ОтражениеЗП
	|		ГДЕ
	|			ОтражениеЗП.ПериодРегистрации = &АктуальныйПериодРегистрации
	|			И (НЕ ОтражениеЗП.ПометкаУдаления)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ОтражениеЗП.Организация) КАК ДокОтражениеЗПвУчете
	|		ПО Организации.Ссылка = ДокОтражениеЗПвУчете.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Задачи.ОбъектЗадачи КАК Организация,
	|			Задачи.Дата КАК Дата
	|		ИЗ
	|			Задача.ЗадачаИсполнителя КАК Задачи
	|		ГДЕ
	|			Задачи.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.ОтражениеЗарплатыВУчете)) КАК Существующие
	|		ПО (Существующие.Организация = Организации.Ссылка)
	|			И (Существующие.Дата = КОНЕЦПЕРИОДА(&АктуальныйПериодРегистрации, МЕСЯЦ))
	|ГДЕ
	|	1 В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				1
	|			ИЗ
	|				Документ.РасчетСНиСО КАК Док
	|			ГДЕ
	|				Док.Организация = Организации.Ссылка
	|				И Док.Проведен
	|				И Док.ПериодРегистрации = &АктуальныйПериодРегистрации
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				1
	|			ИЗ
	|				Документ.РасчетУдержанийРаботниковОрганизаций КАК Док
	|			ГДЕ
	|				Док.Организация = Организации.Ссылка
	|				И Док.Проведен
	|				И Док.ПериодРегистрации = &АктуальныйПериодРегистрации)
	|	И (НЕ 2 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					2
	|				ИЗ
	|					Документ.ОтражениеЗарплатыВРеглУчете КАК ДокОтражениеЗарплатыВРеглУчете
	|				ГДЕ
	|					ДокОтражениеЗарплатыВРеглУчете.Организация = Организации.Ссылка
	|					И ДокОтражениеЗарплатыВРеглУчете.Проведен
	|					И ДокОтражениеЗарплатыВРеглУчете.ПериодРегистрации = &АктуальныйПериодРегистрации))
	|	И Существующие.Организация ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	НаименованиеОрганизации";
	
	Запрос.Параметры.Вставить("АктуальныйПериодРегистрации", АктуальныйПериодРегистрации);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаименованиеОрганизации = "";
		Если НЕ ПустаяСтрока(Выборка.НаименованиеОрганизации) Тогда
			НаименованиеОрганизации = " по " + ПроцедурыУправленияПерсоналом.ПреобразоватьСтрокуИнтерфейса("организации ") + СокрЛП(Выборка.НаименованиеОрганизации);
		КонецЕсли;
		НаименованиеЗадачи = "Отразить в учете зарплату за " + Формат(Выборка.Период, "ДФ='ММММ'") + НаименованиеОрганизации;
		
		ЗадачаОтраженияЗарплаты = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаОтраженияЗарплаты.Дата			= КонецДня(Выборка.Период);
		ЗадачаОтраженияЗарплаты.ВидЗадачи		= Справочники.ВидыЗадачПользователей.ОтражениеЗарплатыВУчете;
		ЗадачаОтраженияЗарплаты.ОбъектЗадачи	= Выборка.Организация;
		ЗадачаОтраженияЗарплаты.Наименование	= НаименованиеЗадачи;
		ЗаписатьАдресациюЗадачи(ЗадачаОтраженияЗарплаты, Выборка.Организация, Справочники.РолиИсполнителей.Расчетчик);
		ЗадачаОтраженияЗарплаты.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗадачиНамеченныеСобытияПоПерсоналу(ВремяФормированияЗадач, МассивОрганизаций, ЕстьЗадачиВозвратНаРаботу, ЕстьЗадачиКадровоеПеремещение, ЕстьЗадачиУвольнение)
	
	Если НЕ ЕстьЗадачиВозвратНаРаботу И НЕ ЕстьЗадачиКадровоеПеремещение И НЕ ЕстьЗадачиУвольнение Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачала		= ОбщегоНазначения.ДобавитьИнтервал(ВремяФормированияЗадач, Перечисления.Периодичность.Месяц, -1);
	ДатаОкончания	= ОбщегоНазначения.ДобавитьИнтервал(ВремяФормированияЗадач, Перечисления.Периодичность.Неделя, 1);
	
	Результат = Обработки.ПоказНамеченныхСобытийПоПерсоналуОрганизаций.Создать().СформироватьЗапрос(МассивОрганизаций, ДатаНачала, ДатаОкончания);
	ТаблицаНамеченныхСобытий = Результат.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаНамеченныхСобытий",ТаблицаНамеченныхСобытий);
	
	// необходимо сделать условие на запрос, что бы не получать ненужные задачи
	УсловиеНаЗадачи = "";
	
	Если НЕ ЕстьЗадачиКадровоеПеремещение = ЕстьЗадачиВозвратНаРаботу
		ИЛИ	НЕ ЕстьЗадачиУвольнение = ЕстьЗадачиВозвратНаРаботу Тогда
		
		ОграничениеНаЗадачи = "";
		
		Если НЕ ЕстьЗадачиКадровоеПеремещение = ЕстьЗадачиВозвратНаРаботу Тогда
			ОграничениеНаЗадачи = "ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналуОрганизаций.Перемещение)";
		КонецЕсли;
		
		Если НЕ ЕстьЗадачиУвольнение = ЕстьЗадачиВозвратНаРаботу Тогда
			Если НЕ ПустаяСтрока(ОграничениеНаЗадачи) Тогда
				ОграничениеНаЗадачи = ОграничениеНаЗадачи + ",";
			КонецЕсли;
			ОграничениеНаЗадачи = ОграничениеНаЗадачи + "ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналуОрганизаций.Увольнение)";
		КонецЕсли;
		
		УсловиеНаЗадачи = "ГДЕ (" + ?(ЕстьЗадачиВозвратНаРаботу, "НЕ ", "") + "ТаблицаНамеченныхСобытий.ПланируемоеСобытие В (" + ОграничениеНаЗадачи + "))";
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаНамеченныхСобытий.ПланируемоеСобытие,
		|	ТаблицаНамеченныхСобытий.ДатаИзменения,
		|	ТаблицаНамеченныхСобытий.Сотрудник,
		|	ТаблицаНамеченныхСобытий.СотрудникНаименование,
		|	ТаблицаНамеченныхСобытий.Организация,
		|	ТаблицаНамеченныхСобытий.Подразделение,
		|	ТаблицаНамеченныхСобытий.Должность,
		|	ВЫБОР
		|		КОГДА ТаблицаНамеченныхСобытий.ПланируемоеСобытие = ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналуОрганизаций.Перемещение)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.КадровоеПеремещение)
		|		КОГДА ТаблицаНамеченныхСобытий.ПланируемоеСобытие = ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналуОрганизаций.Увольнение)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.Увольнение)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.ВозвратНаРаботу)
		|	КОНЕЦ КАК ВидЗадачи
		|ПОМЕСТИТЬ ВТ_НамеченныеСобытия
		|ИЗ
		|	&ТаблицаНамеченныхСобытий КАК ТаблицаНамеченныхСобытий
		|
		|" + УсловиеНаЗадачи + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НамеченныеСобытия.ПланируемоеСобытие,
		|	НамеченныеСобытия.ДатаИзменения,
		|	НамеченныеСобытия.СотрудникНаименование,
		|	НамеченныеСобытия.ВидЗадачи,
		|	НамеченныеСобытия.Сотрудник,
		|	НамеченныеСобытия.Организация,
		|	НамеченныеСобытия.Подразделение,
		|	НамеченныеСобытия.Должность
		|ИЗ
		|	ВТ_НамеченныеСобытия КАК НамеченныеСобытия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК Задачи
		|		ПО НамеченныеСобытия.Сотрудник = Задачи.ОбъектЗадачи
		|			И НамеченныеСобытия.ДатаИзменения = Задачи.Дата
		|			И НамеченныеСобытия.ВидЗадачи = Задачи.ВидЗадачи
		|ГДЕ
		|	Задачи.Ссылка ЕСТЬ NULL ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ФИОСотрудника = СокрЛП(Выборка.СотрудникНаименование);
		
		НаименованиеЗадачи = "";
		Если Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналуОрганизаций.Командировка Тогда
			НаименованиеЗадачи	= "Возврат из командировки сотрудника " + ФИОСотрудника;
		ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналуОрганизаций.ОтпускБезСохраненияЗарплаты Тогда
			НаименованиеЗадачи	= "Возврат из отпуска за свой счет сотрудника " + ФИОСотрудника;
		ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналуОрганизаций.ОтпускЕжегодный Тогда
			НаименованиеЗадачи	= "Возврат из ежегодного отпуска сотрудника " + ФИОСотрудника;
		ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналуОрганизаций.ОтпускПоУходуЗаРебенком Тогда
			НаименованиеЗадачи	= "Возврат из отпуска по уходу за ребенком сотрудника " + ФИОСотрудника;
		ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналуОрганизаций.ОтпускУчебный Тогда
			НаименованиеЗадачи	= "Возврат из учебного отпуска сотрудника " + ФИОСотрудника;
		ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналуОрганизаций.ОтпускУчебныйНеоплачиваемый Тогда
			НаименованиеЗадачи	= "Возврат из учебного неоплачиваемого отпуска сотрудника " + ФИОСотрудника;
		ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналуОрганизаций.Перемещение Тогда
			НаименованиеЗадачи	= "Переместить сотрудника " + ФИОСотрудника + " в подразделение " + Выборка.Подразделение + " на должность " + Выборка.Должность;
		ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналуОрганизаций.Увольнение Тогда
			НаименованиеЗадачи	= "Уволить сотрудника " + ФИОСотрудника;
		КонецЕсли;
		
		ЗадачаПоПерсоналу = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаПоПерсоналу.Дата			= НачалоДня(Выборка.ДатаИзменения);
		ЗадачаПоПерсоналу.ВидЗадачи		= Выборка.ВидЗадачи;
		ЗадачаПоПерсоналу.ОбъектЗадачи	= Выборка.Сотрудник;
		ЗадачаПоПерсоналу.Наименование	= НаименованиеЗадачи;
		ЗаписатьАдресациюЗадачи(ЗадачаПоПерсоналу, Выборка.Организация, Справочники.РолиИсполнителей.Кадровик, Выборка.Подразделение);
		ЗадачаПоПерсоналу.Записать();
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УДАЛЕНИЯ ЗАДАЧ ЗАРПЛАТНО-КАДРОВОЙ ФУНКЦИОНАЛЬНОСТИ

Процедура УдалитьЗадачуПерерасчет(ДокументПерерасчета)
	
	ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(ДокументПерерасчета);
	ПроведениеРасчетов.УдалитьСведенияОПерезаполненииДокумента(ДокументПерерасчета);
	
КонецПроцедуры

Процедура ДобавитьЗадачиКонтрольОплатыПокупателей(АктуальныйПериодРегистрации)

	Счета = Новый СписокЗначений;
	Счета.Добавить(ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиковСоб);
	Счета.Добавить(ПланыСчетов.Типовой.КраткосрочныеАвансыПолученные);
	Счета.Добавить(ПланыСчетов.Типовой.ТоварныйКредит);
	Счета.Добавить(ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьДочернихОрганизаций);
	Счета.Добавить(ПланыСчетов.Типовой.ПрочаяКраткосрочнаяДебиторскаяЗадолженность_);
	Счета.Добавить(ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПоАренде);

	Счета.Добавить(ПланыСчетов.Типовой.КраткосрочныеАвансыВыданные);
	Счета.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам);
	Счета.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоАренде);
	Счета.Добавить(ПланыСчетов.Типовой.ПрочиеАвансывыданныеСоб);

	
	КорСчета = Новый СписокЗначений;
	КорСчета.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах);
	КорСчета.Добавить(ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПредставительств);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеПараметрыДоговоровСрезПоследних.Договор КАК Договор,
		|	ДополнительныеПараметрыДоговоровСрезПоследних.Договор.НомерДоговора КАК НомерДоговора,
		|	ДополнительныеПараметрыДоговоровСрезПоследних.Договор.ДатаДоговора КАК ДатаДоговора,
		|	ДополнительныеПараметрыДоговоровСрезПоследних.Регистратор.Контрагент КАК Контрагент,
		|	ДополнительныеПараметрыДоговоровСрезПоследних.Договор.ДатаОкончанияДействияДоговора КАК СрокДействия,
		|	дог_ДоговорыИДополнительныеСоглашения.ОбщаяСуммаДоговора КАК ОбщаяСуммаДоговора,
		|	ДополнительныеПараметрыДоговоровСрезПоследних.ЗначениеДополнительногоПараметра КАК Исполнение,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА дог_ДоговорыИДополнительныеСоглашения.ДопСоглашение
		|				ТОГДА дог_ДоговорыИДополнительныеСоглашения.ВходящийНомер
		|		КОНЕЦ, 0) КАК ДопНомер,
		|	дог_ДоговорыИДополнительныеСоглашения.Регистратор.Комментарий КАК Примечание,
		|	дог_ДоговорыИДополнительныеСоглашения.ДопСоглашение,
		|	дог_ДоговорыИДополнительныеСоглашения.Регистратор.СрокОплаты,
		|	дог_ДоговорыИДополнительныеСоглашения.Регистратор.ТипСрокаОплат,
		|	дог_ДоговорыИДополнительныеСоглашения.Регистратор.КонтрагентПоТрехстороннемуСоглашению,
		|	дог_ДоговорыИДополнительныеСоглашения.Регистратор.ВидОплаты,
		|	ДополнительныеПараметрыДоговоровСрезПоследних.Регистратор.КолвоДнейДляОплаты КАК КолвоДнейДляОплаты,
		|	ДополнительныеПараметрыДоговоровСрезПоследних.Регистратор.ДоПолногоИсполнения КАК ДоПолногоИсполнения,
		|	дог_ДоговорыИДополнительныеСоглашения.ВидОбязательства,
		|	дог_ДоговорыИДополнительныеСоглашения.Организация
		|ПОМЕСТИТЬ ВТ_Договоры
		|ИЗ
		|	РегистрСведений.ДополнительныеПараметрыДоговоров.СрезПоследних(&КонецПериода, ТИПЗНАЧЕНИЯ(ЗначениеДополнительногоПараметра) = ТИП(Справочник.СтатусДоговора)) КАК ДополнительныеПараметрыДоговоровСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.дог_ДоговорыИДополнительныеСоглашения КАК дог_ДоговорыИДополнительныеСоглашения
		|		ПО ДополнительныеПараметрыДоговоровСрезПоследних.Договор = дог_ДоговорыИДополнительныеСоглашения.Договор
		|ГДЕ
		|	ДополнительныеПараметрыДоговоровСрезПоследних.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И дог_ДоговорыИДополнительныеСоглашения.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Договоры.Договор КАК Договор,
		|	ВТ_Договоры.НомерДоговора,
		|	ВТ_Договоры.ДатаДоговора,
		|	ВТ_Договоры.Контрагент,
		|	ВТ_Договоры.СрокДействия,
		|	ВТ_Договоры.ОбщаяСуммаДоговора,
		|	ВТ_Договоры.Исполнение,
		|	ВТ_Договоры.ДопНомер,
		|	ВТ_Договоры.Примечание,
		|	ВТ_Договоры.ДопСоглашение,
		|	ДополнительныеПараметрыДоговоровСрезПоследних.ЗначениеДополнительногоПараметра КАК Исполнитель,
		|	ВТ_Договоры.Договор.ПролонгируемаяДатаОкончанияДействияДоговора,
		|	ВТ_Договоры.РегистраторСрокОплаты КАК СрокОплаты,
		|	ВТ_Договоры.РегистраторТипСрокаОплат КАК ПоМесячно,
		|	ВТ_Договоры.РегистраторКонтрагентПоТрехстороннемуСоглашению КАК КонтрагентПоТрехстороннемуСоглашению,
		|	ВТ_Договоры.РегистраторВидОплаты,
		|	ВТ_Договоры.КолвоДнейДляОплаты,
		|	ВТ_Договоры.ДоПолногоИсполнения,
		|	ВТ_Договоры.ВидОбязательства,
		|	ВТ_Договоры.Организация
		|ПОМЕСТИТЬ ВТ_Контрагенты
		|ИЗ
		|	ВТ_Договоры КАК ВТ_Договоры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеПараметрыДоговоров.СрезПоследних(&КонецПериода, ТИПЗНАЧЕНИЯ(ЗначениеДополнительногоПараметра) = ТИП(Справочник.ФизическиеЛица)) КАК ДополнительныеПараметрыДоговоровСрезПоследних
		|		ПО ВТ_Договоры.Договор = ДополнительныеПараметрыДоговоровСрезПоследних.Договор
		|ГДЕ
		|	ДополнительныеПараметрыДоговоровСрезПоследних.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Контрагенты.Договор,
		|	ВТ_Контрагенты.НомерДоговора,
		|	ВТ_Контрагенты.ДатаДоговора КАК ДатаДоговора,
		|	ВТ_Контрагенты.Контрагент,
		|	ВТ_Контрагенты.СрокДействия,
		|	ВТ_Контрагенты.ОбщаяСуммаДоговора,
		|	ВТ_Контрагенты.Исполнение,
		|	ВТ_Контрагенты.ДопНомер,
		|	ВТ_Контрагенты.Примечание,
		|	ВТ_Контрагенты.ДопСоглашение,
		|	ВТ_Контрагенты.Исполнитель,
		|	ВТ_Контрагенты.ДоговорПролонгируемаяДатаОкончанияДействияДоговора,
		|	ВЫБОР
		|		КОГДА ВТ_Контрагенты.ПоМесячно
		|				И ВТ_Контрагенты.СрокДействия > &КонецПериода
		|			ТОГДА ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&КонецПериодаПроверяемогоМесяца, МЕСЯЦ), ДЕНЬ, ВТ_Контрагенты.КолвоДнейДляОплаты)
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВТ_Контрагенты.ПоМесячно
		|						И ВТ_Контрагенты.СрокДействия < &КонецПериода
		|					ТОГДА КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ)
		|				ИНАЧЕ ВЫБОР
		|						КОГДА НЕ ВТ_Контрагенты.ПоМесячно
		|							ТОГДА ВТ_Контрагенты.СрокОплаты
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК СрокОплаты,
		|	ВТ_Контрагенты.ПоМесячно,
		|	ВТ_Контрагенты.КонтрагентПоТрехстороннемуСоглашению,
		|	ВЫБОР
		|		КОГДА ВТ_Контрагенты.ВидОбязательства = ЗНАЧЕНИЕ(Перечисление.дог_ВидыОбязательствПоДоговору.Исходящее)
		|			ТОГДА ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0)
		|		ИНАЧЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0)
		|	КОНЕЦ КАК СуммаОплаты,
		|	ВТ_Контрагенты.РегистраторВидОплаты КАК ВидОплаты,
		|	ВТ_Контрагенты.КолвоДнейДляОплаты,
		|	ВТ_Контрагенты.ДоПолногоИсполнения,
		|	ВТ_Контрагенты.ВидОбязательства,
		|	ВТ_Контрагенты.Организация,
		|	ВТ_Контрагенты.Договор.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА ВТ_Контрагенты.ВидОбязательства = ЗНАЧЕНИЕ(Перечисление.дог_ВидыОбязательствПоДоговору.Исходящее)
		|			ТОГДА ЕСТЬNULL(ТиповойОборотыИсполнено.СуммаОборотДт, 0)
		|		ИНАЧЕ ЕСТЬNULL(ТиповойОборотыИсполнено.СуммаОборотКт, 0)
		|	КОНЕЦ КАК Исполнено,
		|	ВЫБОР
		|		КОГДА ВТ_Контрагенты.ВидОбязательства = ЗНАЧЕНИЕ(Перечисление.дог_ВидыОбязательствПоДоговору.Исходящее)
		|			ТОГДА ""Покупатель""
		|		ИНАЧЕ ""Поставщик""
		|	КОНЕЦ КАК ВидКонтрагента
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	ВТ_Контрагенты КАК ВТ_Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(&НачалоПериода, ДОБАВИТЬКДАТЕ(&КонецПериода, СЕКУНДА, 1), , Счет В ИЕРАРХИИ (&Счет), , , КорСчет В ИЕРАРХИИ (&КорСчет), ) КАК ТиповойОбороты
		|		ПО ВТ_Контрагенты.Контрагент = ТиповойОбороты.Субконто1
		|			И ВТ_Контрагенты.Договор = ТиповойОбороты.Субконто2
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(&НачалоПериода, ДОБАВИТЬКДАТЕ(&КонецПериода, СЕКУНДА, 1), , Счет В ИЕРАРХИИ (&Счет), , , НЕ КорСчет В ИЕРАРХИИ (&КорСчет), ) КАК ТиповойОборотыИсполнено
		|		ПО ВТ_Контрагенты.Контрагент = ТиповойОборотыИсполнено.Субконто1
		|			И ВТ_Контрагенты.Договор = ТиповойОборотыИсполнено.Субконто2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Договор,
		|	ВТ.НомерДоговора,
		|	ВТ.ДатаДоговора,
		|	ВТ.Контрагент,
		|	ВТ.СрокДействия КАК СрокДействия,
		|	ВТ.ОбщаяСуммаДоговора,
		|	ВТ.СуммаОплаты,
		|	ВТ.Исполнено,
		|	ВТ.Исполнение,
		|	ВТ.ДопНомер,
		|	ВТ.Примечание,
		|	ВТ.ДопСоглашение,
		|	ВТ.Исполнитель,
		|	ВТ.ДоговорПролонгируемаяДатаОкончанияДействияДоговора,
		|	ВТ.ПоМесячно,
		|	ВТ.КонтрагентПоТрехстороннемуСоглашению,
		|	ВТ.ВидОплаты,
		|	ВТ.КолвоДнейДляОплаты,
		|	ВТ.ДоПолногоИсполнения,
		|	ВТ.ВидОбязательства,
		|	ВТ.Организация КАК Организация,
		|	ВТ.ВалютаВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА ВТ.ОбщаяСуммаДоговора <> 0
		|			ТОГДА ВТ.Исполнено / ВТ.ОбщаяСуммаДоговора * 100
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПроцентИсполнения,
		|	ВТ.СрокОплаты,
		|	ВТ.ВидКонтрагента
		|ИЗ
		|	ВТ КАК ВТ
		|ГДЕ
		|	ВТ.СрокОплаты <> &ПустаяДата
		|	И ВТ.СуммаОплаты = 0
		|	И ВТ.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	ОсновнаяОрганизация    = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	
	Запрос.УстановитьПараметр("КонецПериода", ТекущаяДата());
	Запрос.УстановитьПараметр("КонецПериодаПроверяемогоМесяца", ?((День(ТекущаяДата())<=15), КонецМесяца(ТекущаяДата()-86400*30), КонецМесяца(ТекущаяДата())));

	Запрос.УстановитьПараметр("КорСчет", КорСчета);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(ТекущаяДата()));
	Запрос.УстановитьПараметр("Счет", Счета);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("Организация", ОсновнаяОрганизация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДатаНачалаПроверки = ТекущаяДата() - Справочники.РолиИсполнителей.КонтрольОплатКонтрагентов.КолвоДнейПослеСрока*86400;
		ДатаОкончанияПроверки = ТекущаяДата() + Справочники.РолиИсполнителей.КонтрольОплатКонтрагентов.КолвоДнейДоСрока*86400;
		
		Если Выборка.СрокОплаты >= ДатаНачалаПроверки И Выборка.СрокОплаты <= ДатаОкончанияПроверки Тогда
			
			НаименованиеЗадачи = Выборка.ВидКонтрагента + " " + Выборка.Контрагент + " должны провести оплату до " + Формат(Выборка.СрокОплаты,"ДФ=dd.MM.yyyy");
			
			ЗадачаРасчета = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			ЗадачаРасчета.Дата			= КонецДня(ТекущаяДата());
			ЗадачаРасчета.ВидЗадачи		= Справочники.ВидыЗадачПользователей.КонтрольОплатыПокупателей;
			ЗадачаРасчета.ОбъектЗадачи	= Выборка.Организация;
			ЗадачаРасчета.Наименование	= НаименованиеЗадачи;
			ЗадачаРасчета.Исполнитель   = ПараметрыСеанса.ТекущийПользователь;
			
			ЗаписатьАдресациюЗадачи(ЗадачаРасчета, Выборка.Организация, Справочники.РолиИсполнителей.КонтрольОплатКонтрагентов);
			ЗадачаРасчета.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
