// Общие процедуры и функции для работы с данными в базе

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка    - Ссылка на объект - элемент справочника, документ, ...
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
// 
Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		СтруктураРеквизитов = Новый Структура(Реквизиты);
		
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Структура")
		ИЛИ ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		
		СтруктураРеквизитов = Реквизиты;
		
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив")
		ИЛИ ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		
		СтруктураРеквизитов = Новый Структура;
		Для каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение ЦС_ОбщегоНазначенияБПКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"),
		Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		СокрЛП(КлючИЗначение.Значение),
		СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

// Процедура формирования номера документа
//
Процедура мПриУстановкеНовогоНомераДляДокументов(Источник, СтандартнаяОбработка, Префикс) Экспорт
	ОбщегоНазначения.ДобавитьПрефиксОрганизации(Источник, Префикс);
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры //мПриУстановкеНовогоНомераДляДокументов()

// Процедура добавляет префикс организации
//
Процедура мДобавитьПрефиксОрганизации(ДокументОбъект, Префикс) Экспорт
	
	// Если  нет реквизита "Организация" или для нее не задан префикс, то 
	// используем пустой префикс,
	// иначе используем префикс организации.
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Если мЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда 
		Реквизит = "Организация";
	ИначеЕсли мЕстьРеквизитДокумента("ОрганизацияОтправитель", МетаданныеДокумента) Тогда 
		Реквизит = "ОрганизацияОтправитель";
	Иначе 
		Если Не ЗначениеЗаполнено(Префикс) Тогда
			Префикс = "0";
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект[Реквизит].Префикс)  Тогда
		Если Не ЗначениеЗаполнено(Префикс) Тогда
			Префикс = "0";
		КонецЕсли;
	Иначе
		
		Префикс = ДокументОбъект[Реквизит].Префикс + Префикс;
		
	КонецЕсли;
	
Конецпроцедуры //мДобавитьПрефиксОрганизации()

// Функция позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Булево: Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция мЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт
	
	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);
	
КонецФункции // мЕстьРеквизитДокумента()

Процедура цс_ОбработкаЗполненияДоговорФЗОбработкаЗаполнения(Источник, Основание) Экспорт
	
	ТипЗнчОснование = ТипЗнч(Основание);
	
	Если ТипЗнчОснование = Тип("ДокументСсылка.цс_Договор") Тогда
		
		Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
			
			Гарантия = ЦС_ОбщийПереопределяемый.НайтиПодчиненныйГарантиюНаДоговор(Основание);
			
			Если НЕ Гарантия = НЕОПРЕДЕЛЕНО Тогда
				
				ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Источник, Основание);
				Источник.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
				Источник.СчетКонтрагента = Основание.СчетКонтрагента;
				Источник.ДокументОснование = Основание;
				Источник.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
				Источник.Контрагент 		   = Основание.Поставщик;
				//Источник.ДоговорКонтрагента    = Основание.ДоговорКонтрагента;
				ВидРасчетовПоДоговору = УправлениеВзаиморасчетами.ОпределениеВидаРасчетовПоПараметрамДоговора(Основание.ДоговорКонтрагента,Источник.ВалютаДокумента);
				
				СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(Источник.ВалютаДокумента, Источник.Дата);
				Источник.КурсДокумента           = СтруктураКурсаДокумента.Курс;
				Источник.КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
				
				СтруктураКурсаВзаиморасчетов  = ОбщегоНазначения.ПолучитьКурсВалюты(Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов, Источник.Дата);
				
				ТаблицаПлатежей = Источник.РасшифровкаПлатежа.Выгрузить();
				ТаблицаПлатежей.Добавить();
				ТаблицаПлатежей.ЗаполнитьЗначения(Основание.ДоговорКонтрагента,				"ДоговорКонтрагента");
				ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,		"КурсВзаиморасчетов");
				ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность,	"КратностьВзаиморасчетов");
				ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СуммаДокумента,	"СуммаПлатежа");
				ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СуммаДокумента,	"СуммаВзаиморасчетов");
				//ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, 	"СчетУчетаРасчетовСКонтрагентомБУ") ;			
				//ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, 		"СчетУчетаРасчетовПоАвансам") ;        			
				Источник.РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
				Источник.СуммаДокумента = Источник.РасшифровкаПлатежа.Итог("СуммаПлатежа");
				//Источник.СтрокаПлатеж 	= Источник.РасшифровкаПлатежа[0];
			Иначе
				Отказ = Истина;
				СП = Новый СообщениеПользователю;
				СП.Текст = "Нельзя произвести оплату на основании Договора, по которому нет Гарантии!";
				СП.Сообщить();
				//Возврат;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура цс_ОбработкаПроведенияППИФЗОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	Если ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.цс_Договор") Тогда
		
		Движение = Источник.Движения.цс_ЗадолженностьПоФорвардномуЗакупу.Добавить();
		Движение.Период = Источник.Дата;
		Движение.Организация = Источник.Организация;
		Движение.СтруктурноеПодразделение = Источник.СтруктурноеПодразделение;
		Движение.ВидДвижения = Перечисления.ВидыДвиженийПриходРасход.Расход;
		Движение.ДоговорКонтрагента = Источник.РасшифровкаПлатежа[0].ДоговорКонтрагента;
		Движение.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.цс_ВидЗадолженностиФЗ.Основная");
		Движение.Сумма = Источник.РасшифровкаПлатежа[0].СуммаВзаиморасчетов;
		
		Если Источник.ФЗ_НачислятьКомиссию Тогда
			Если ЗначениеЗаполнено(Источник.ФЗ_СчетДоходов) Тогда
				ДвижениеКом = Источник.Движения.цс_ЗадолженностьПоФорвардномуЗакупу.Добавить();
				ДвижениеКом.Период = Источник.Дата;
				ДвижениеКом.Организация = Источник.Организация;
				Движение.СтруктурноеПодразделение = Источник.СтруктурноеПодразделение;
				ДвижениеКом.ВидДвижения = Перечисления.ВидыДвиженийПриходРасход.Расход;
				ДвижениеКом.ДоговорКонтрагента = Источник.РасшифровкаПлатежа[0].ДоговорКонтрагента;
				ДвижениеКом.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.цс_ВидЗадолженностиФЗ.Комиссия");
				ДвижениеКом.Сумма = Источник.ДокументОснование.СуммаКомиссии;
				
				// Бухгалтерские проводки документа
				Если Не (Источник.ОтражатьВБухгалтерскомУчете И Источник.Оплачено) Тогда
					Возврат;
				КонецЕсли;
				
				ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(Источник.мВалютаРегламентированногоУчета, Источник.Дата);
				
				ПроводкиБУ = Источник.Движения.Типовой;
				ПроводкиНУ = Источник.Движения.Налоговый;
				
				ПроводкаБУ = ПроводкиБУ.Добавить();
				ПроводкаБУ.Период      = Источник.Дата;
				ПроводкаБУ.Организация = Источник.Организация;
				ПроводкаБУ.Содержание  = "Комиссия ФЗ";
				ПроводкаБУ.СчетДт      = ПредопределенноеЗначение("ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам");
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 1, Источник.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 2, Источник.РасшифровкаПлатежа[0].ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 3, Источник.ТипОперации);
				
				
				ПроводкаБУ.СчетКт		= Источник.ФЗ_СчетДоходов;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, 1, Источник.ФЗ_СубконтоБУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, 2, Источник.ФЗ_СубконтоБУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, 2, Источник.ФЗ_СубконтоБУ3);
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаБУ, Источник.СтруктурноеПодразделение, Источник.СтруктурноеПодразделение);
				
				Если ПроводкаБУ.СчетДт.Валютный Тогда
					ПроводкаБУ.ВалютаДт        = Источник.ВалютаДокумента;
					ПроводкаБУ.ВалютнаяСуммаДт = Источник.ДокументОснование.СуммаКомиссии;
				КонецЕсли;
				
				Если ПроводкаБУ.СчетКт.Валютный Тогда
					ПроводкаБУ.ВалютаКт        = Источник.ВалютаДокумента;
					ПроводкаБУ.ВалютнаяСуммаКт = Источник.ДокументОснование.СуммаКомиссии;
				КонецЕсли;
				
				
				ПроводкаБУ.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Источник.ДокументОснование.СуммаКомиссии, Источник.ВалютаДокумента, Источник.мВалютаРегламентированногоУчета,
				Источник.КурсДокумента,      ДанныеОВалюте.Курс, 
				Источник.КратностьДокумента, ДанныеОВалюте.Кратность);
				
				//НУ
				Если Источник.Движения.Налоговый.Количество()>0 Тогда
					СчетДтНУ = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ПроводкаБУ.СчетДт));	
					СчетКтНУ = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ПроводкаБУ.СчетКт));	
					
					ПроводкаНУ = ПроводкиНУ.Добавить();
					ПроводкаНУ.Период      = Источник.Дата;
					ПроводкаНУ.Организация = Источник.Организация;				
						
					ПроводкаНУ.СчетДт      = СчетДтНУ;
					ПроводкаНУ.Содержание  = "Комиссия ФЗ";
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,1,Источник.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,2,Источник.РасшифровкаПлатежа[0].ДоговорКонтрагента);
					//ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,3,СубконтоДтНУ3);
					
					//Если  ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СчетУчетаРасчетовСКонтрагентомБУ) Тогда				
					//	ПроводкаНУ.СчетКт     = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();						
					//	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					//Иначе
					ПроводкаНУ.СчетКт     = СчетКтНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, Источник.ФЗ_СубконтоБУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Источник.ФЗ_СубконтоБУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Источник.ФЗ_СубконтоБУ3);
					//КонецЕсли;
					
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, Источник.СтруктурноеПодразделение, Источник.СтруктурноеПодразделение);
					
					ПроводкаНУ.Сумма = Источник.ДокументОснование.СуммаКомиссии;
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Источник.ВидУчетаНУ);
					
				КонецЕсли;
			Иначе
				Отказ = Истина;
				СП = Новый СообщениеПользователю;
				СП.Текст = "Заполните Счет доходоов, для отражения комиссии форвардного закупа!";
				СП.Сообщить();
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ДокОбъект = Источник.ДокументОснование.ДокументОснование.ПолучитьОбъект();
		Если Не ДокОбъект.ПометкаУдаления Тогда
			ДокОбъект.Оплачено = Истина;
			ДокОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции 

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
	Возврат Результат[ИмяРеквизита];
	
КонецФункции 

Процедура КонтрагентПередЗаписьюПроверкаБИНПередЗаписью(Источник, Отказ) Экспорт
	
	//Если Источник.Обменданными.Загрузка тогда
	//	Возврат;
	//КонецЕсли;
	 
	//ПроверкаДубликатов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"КонтрольДубликатовВСправочникеКонтрагенты"); 
	//	
	//Если ПроверкаДубликатов Тогда
	//	Если Источник.СтранаРезидентства = Справочники.КлассификаторСтранМира.Казахстан Тогда
	//		
	//		Если не ЗначениеЗаполнено(Источник.ИдентификационныйКодЛичности) тогда
	//			Сообщить("Не заполнен ИИН/БИН");
	//			Отказ = истина;
	//			возврат;
	//		КонецЕсли;
	//		
	//		Запрос = Новый Запрос;
	//		Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	контрагенты.Ссылка
	//		|ИЗ
	//		|	Справочник.Контрагенты КАК контрагенты
	//		|ГДЕ
	//		|	контрагенты.ИдентификационныйКодЛичности = &ИдентификационныйКодЛичности
	//		|	И контрагенты.Ссылка <> &Ссылка";
	//		
	//		Запрос.УстановитьПараметр("ИдентификационныйКодЛичности", Источник.ИдентификационныйКодЛичности);
	//		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	//		
	//		Результат = Запрос.Выполнить();
	//		
	//		ВыборкаДетальныеЗаписи = Результат.Выбрать();
	//		
	//		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//			Сообщить("Данный ИИН/БИН зарегистрирован на " + ВыборкаДетальныеЗаписи.Ссылка);
	//			Отказ = Истина;
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры

// Функция СтрокаТаблицыЗначенийВСтруктуру создает
// структуру со свойствами, как колонки таблицы
// значений передаваемой строки
// и устанавливает этим свойствам значения
// из строки таблицы значений
// 
// Параметры:
//  СтрокаТаблицыЗначений - СтрокаТаблицыЗначений
//
// ВозвращаемоеЗначение:
//  Структура
//
Функция СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений) Экспорт
	
	Структура = Новый Структура;
	Для каждого Колонка Из СтрокаТаблицыЗначений.Владелец().Колонки Цикл
		Структура.Вставить(Колонка.Имя, СтрокаТаблицыЗначений[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции 

Процедура ЦС_ПередЗаписьюОбъектаСсылочногоТипаПриЗаписи(Источник, Отказ) Экспорт
	
	Если источник.обменданными.загрузка тогда 		
		Возврат;                              		
	КонецЕсли;
	//ЦС_Привилегированный.ЗаписатьВРегистр(ТекущаяДата(),Источник.Ссылка,глТекущийПользователь);
	
	
		
	
	
КонецПроцедуры

Процедура ЦС_ПередЗаписьюРасчетныхТаблицПроверкаДоступностиПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка тогда
		Возврат;
	КонецЕсли;
	
	Если не Константы.ЦС_ВводРасчетныхТаблицЗаблокирован.Получить() тогда			
		Если не РольДоступна("ПравоУтвержденияРасчетныхТаблиц") тогда
			Сообщить("Редактирование заявок заблокировано.");
			Отказ = Истина;
		КонецЕсли;			
	КонецЕсли;

	// Вставить содержимое обработчика.
КонецПроцедуры

Функция ПолучитьНоменклатуруГЗ(СсылкаНаОбъект) Экспорт
	
	Запрос = новый Запрос("ВЫБРАТЬ
	|	ЦС_СоответсвиеНоменклатурыГЗИНоменклатуры.НоменклатураГЗ
	|ИЗ
	|	РегистрСведений.ЦС_СоответсвиеНоменклатурыГЗИНоменклатуры КАК ЦС_СоответсвиеНоменклатурыГЗИНоменклатуры
	|ГДЕ
	|	ЦС_СоответсвиеНоменклатурыГЗИНоменклатуры.Номенклатура = &СсылкаНаОбъект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЦС_СоответсвиеНоменклатурыГЗИСтатейЗатрат.НоменклатураГЗ
	|ИЗ
	|	РегистрСведений.ЦС_СоответсвиеНоменклатурыГЗИСтатейЗатрат КАК ЦС_СоответсвиеНоменклатурыГЗИСтатейЗатрат
	|ГДЕ
	|	ЦС_СоответсвиеНоменклатурыГЗИСтатейЗатрат.СтатьяЗатрат = &СсылкаНаОбъект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЦС_СоответсвиеНоменклатурыГЗИОС.НоменклатураГЗ
	|ИЗ
	|	РегистрСведений.ЦС_СоответсвиеНоменклатурыГЗИОС КАК ЦС_СоответсвиеНоменклатурыГЗИОС
	|ГДЕ
	|	ЦС_СоответсвиеНоменклатурыГЗИОС.ОС = &СсылкаНаОбъект");
	
	Запрос.УстановитьПараметр("СсылкаНаОбъект",СсылкаНаОбъект);
	
	Выборка = запрос.Выполнить().Выбрать();
	
	Если выборка.Следующий() тогда
		возврат выборка.НоменклатураГЗ;	 
	КонецЕсли;
	 
КонецФункции

Процедура УстановитьНоменклатуруГЗ(НоменклатураГЗ,СсылкаНаОбъект) экспорт
	
	Если ТипЗнч(СсылкаНаОбъект) = тип("СправочникСсылка.Номенклатура") тогда
		МЗ = РегистрыСведений.ЦС_СоответсвиеНоменклатурыГЗИНоменклатуры.СоздатьМенеджерЗаписи();
		МЗ.Номенклатура = СсылкаНаОбъект;		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = тип("СправочникСсылка.СтатьиЗатрат") тогда
		МЗ = РегистрыСведений.ЦС_СоответсвиеНоменклатурыГЗИСтатейЗатрат.СоздатьМенеджерЗаписи();
		МЗ.СтатьяЗатрат = СсылкаНаОбъект;		
	Иначе  
		МЗ = РегистрыСведений.ЦС_СоответсвиеНоменклатурыГЗИОС.СоздатьМенеджерЗаписи();
		МЗ.ОС = СсылкаНаОбъект;		
	КонецЕсли;                           	
	
	МЗ.НоменклатураГЗ = НоменклатураГЗ;
	МЗ.Записать();	
	
КонецПроцедуры


Процедура ЦСПередЗаписьюПТУПроверкаНоменклатурыГЗПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
КонецПроцедуры

