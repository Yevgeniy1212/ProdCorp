 
// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ПриОткрытии" в модулех форм всех документов.
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа,
//  ТекПользователь                - ссылка на справочник, определяет текущего пользователя  
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ТипОперации                    - необязаетельный, строка вида операции ("Покупка" или "Продажа"),
//                                   если не передан, то реквизиты, зависящие от вида операции, не заполняются
//
Процедура ЗаполнитьШапкуДокумента(ДокументОбъект, ТекПользователь, ВалютаРегламентированногоУчета = Неопределено, ТипОперации = "", НеИзменятьРеквизитыПоНДС = Ложь,ПараметрОбъектКопирования = Неопределено, ПараметрОснование = Неопределено) Экспорт

	Перем ТипЦен;

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	
	// Флаги принадлежности к учету заполняем, только если оба не заполнены
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокумента) 
		И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокумента) Тогда
		
		//По умолчанию все документы требуют отражения в бухгалтерском учете
		Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			ДокументОбъект.ОтражатьВБухгалтерскомУчете = ПараметрОбъектКопирования.ОтражатьВБухгалтерскомУчете;
			ДокументОбъект.ОтражатьВУправленческомУчете =ПараметрОбъектКопирования.ОтражатьВБухгалтерскомУчете;
		Иначе
			Если Не (ДокументОбъект.ОтражатьВУправленческомУчете 
				или ДокументОбъект.ОтражатьВБухгалтерскомУчете) Тогда
				
				ДокументОбъект.ОтражатьВУправленческомУчете = Ложь;
				ДокументОбъект.ОтражатьВБухгалтерскомУчете  = Истина;				
			КонецЕсли;
		КонецЕсли;   	
		
	ИначеЕсли фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокумента) Тогда

		//По умолчанию все документы требуют отражения в бухгалтерском учете
		Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			ДокументОбъект.ОтражатьВБухгалтерскомУчете =ПараметрОбъектКопирования.ОтражатьВБухгалтерскомУчете;
		Иначе
			//По умолчанию все документы требуют отражения в бухгалтерском учете
			ДокументОбъект.ОтражатьВБухгалтерскомУчете = Истина
		КонецЕсли;

	КонецЕсли; 
	
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
	  И (НЕ ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
		ДокументОбъект.Организация = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ПодразделениеОрганизации)) Тогда
		ДокументОбъект.ПодразделениеОрганизации = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	КонецЕсли;
	
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СтруктурноеПодразделение", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурноеПодразделение)) Тогда
	   	СтруктурноеПодразделение = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновноеСтруктурноеПодразделениеОрганизации");
		Если СтруктурноеПодразделение = Неопределено Тогда
			ДокументОбъект.СтруктурноеПодразделение = ДокументОбъект.Организация;
		ИначеЕсли ТипЗнч(СтруктурноеПодразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ДокументОбъект.СтруктурноеПодразделение = СтруктурноеПодразделение;
		Иначе
			ДокументОбъект.СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();							
		КонецЕсли;
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СтруктурноеПодразделениеОтправитель", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурноеПодразделениеОтправитель)) Тогда
	   	СтруктурноеПодразделение = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновноеСтруктурноеПодразделениеОрганизации");
		Если СтруктурноеПодразделение = Неопределено Тогда
			ДокументОбъект.СтруктурноеПодразделениеОтправитель = ДокументОбъект.Организация;
		ИначеЕсли ТипЗнч(СтруктурноеПодразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ДокументОбъект.СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделение;
		Иначе
			ДокументОбъект.СтруктурноеПодразделениеОтправитель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();							
		КонецЕсли;
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурнаяЕдиница) 
	   И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда
		ДокументОбъект.СтруктурнаяЕдиница = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Ответственный)) Тогда
		ДокументОбъект.Ответственный = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнойОтветственный");
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Автор", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Автор)) Тогда
		ДокументОбъект.Автор = ТекПользователь;
	КонецЕсли;
	
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации)) Тогда
		ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][0];
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента)) Тогда
		ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.КурсДокумента)) Тогда
		СтруктураКурсаДокумента      = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
		ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;

		Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
			ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		КонецЕсли;
	КонецЕсли;

	// Если тип цен оказался не заполненным, то берем его из установок пользователя
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ТипЦен)) Тогда
		Если ТипОперации = "Продажа" Тогда
			ДокументОбъект.ТипЦен = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнойТипЦенПродажи");
		КонецЕсли;
	КонецЕсли;
	
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ДатаС", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ДатаС)) Тогда
		ДокументОбъект.ДатаС = ДокументОбъект.Дата;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьШапкуДокумента()

Процедура РедактироватьПраваДоступа(Ссылка) Экспорт
	Если Метаданные.ОбщиеМодули.Найти("НастройкаПравДоступа")<>Неопределено Тогда
		Выполнить("НастройкаПравДоступа.РедактироватьПраваДоступа(Ссылка)");	
	КонецЕсли;
КонецПроцедуры

// Процедура, вызываемая из форм документов из процедуры ПриОткрытии(), проверяет
// доступен ли документ для редактирования, если нет, то устанавливает свойство
// формы ТолькоПросмотр в значеине Истина
Процедура УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма) Экспорт
	Если Метаданные.ОбщиеМодули.Найти("НастройкаПравДоступа")<>Неопределено Тогда
   		Выполнить("НастройкаПравДоступа.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект,ЭтаФорма)");
	КонецЕсли;
КонецПроцедуры

Функция ПодразделениеПоСоответствию(ПодразделениеОрганизации) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение
		|ИЗ
		|	РегистрСведений."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
		|ГДЕ
		|	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации = &ПодразделениеОрганизации
		|	И СоответствиеПодразделенийИПодразделенийОрганизаций.Организация = &Организация";

	Запрос.УстановитьПараметр("Организация", ПодразделениеОрганизации.Владелец);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        Возврат ВыборкаДетальныеЗаписи.Подразделение;
	Иначе	
		Возврат Справочники[фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений()].ПустаяСсылка();
	КонецЕсли;

	
КонецФункции

Функция ПолучитьМакетОформленияУпр() Экспорт
	ЗаданныйМакет = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("МакетОформленияОтчетовУпр");
	Если ЗначениеЗаполнено(ЗаданныйМакет) Тогда
		Если ТипЗнч(ЗаданныйМакет)=Тип("Строка") Тогда
			Возврат ЗаданныйМакет;
		Иначе
			Возврат фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ЗаданныйМакет);	
		КонецЕсли;
	КонецЕсли;
	Возврат "Зеленый";	
КонецФункции

Функция НастроитьОформлениеТабличногоПоля(Элемент) Экспорт
	Элемент.ЦветРамки 	= Новый Цвет(176,196,222);	
	Элемент.ЦветТекста 	= Новый Цвет(25,25,112);
	НастроитьПодчиненныеЭлементы(Элемент);
КонецФункции

Функция НастроитьПодчиненныеЭлементы(Элемент) 
	Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
		//Если ТипЗнч(ПодчиненныйЭлемент)= Тип("ПолеФормы") Тогда
			ПодчиненныйЭлемент.ЦветФонаЗаголовка 	= Новый Цвет(176,196,222);	
		//КонецЕсли;
		ПодчиненныйЭлемент.ЦветТекстаЗаголовка	= Новый Цвет(0,68,68);
		ПодчиненныйЭлемент.ШрифтЗаголовка 		= Новый Шрифт(,9,Истина);
		Если ТипЗнч(ПодчиненныйЭлемент)=Тип("ГруппаФормы") Тогда
			НастроитьПодчиненныеЭлементы(ПодчиненныйЭлемент);
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция СостояниеОбъектаПоУмолчанию() Экспорт
	Возврат Перечисления[фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СостоянияОбъектов"].Подготовлен;
КонецФункции

Процедура фин_ПроверкаСтатусаОбъектаПередПроведениемОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	Если Источник.Состояние <> фин_ОбщегоНазначенияВызовСервераПовтИсп.СостояниеОбъектаУтвержден() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не утвержден, поэтому не может быть проведен!",Источник,"Статус","Объект",Отказ);
	КонецЕсли;
КонецПроцедуры
