//Процедура ФормироватьПроводкиПоБюджетированию
//
Процедура ФормироватьПроводкиПоБюджетированию(Источник, Отказ, РежимПроведения,ТаблицаПереданныхДвижений,ФиксированныйШаблон=Неопределено,ВидДокументов=Неопределено,ИмяДокумента=Неопределено,РегистрацияПрогнозныхДанных=Ложь,РегистрацияЛимитов=Ложь) Экспорт
	Если Отказ ИЛИ Источник.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	МетаданныеДокумента = Источник.Метаданные();
	Если ИмяДокумента=Неопределено Тогда	
		ИмяДокумента = МетаданныеДокумента.Имя;
	КонецЕсли;
	ПолучатьОрганизациюИзСтрокНабора = Ложь;
	БюджетированиеПоОрганизациям = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
	Организация = Справочники.Организации.ПустаяСсылка();
	Если БюджетированиеПоОрганизациям Тогда
		Если МетаданныеДокумента.Реквизиты.Найти("Организация")<>Неопределено Тогда
			Организация = Источник.Организация;
		Иначе
			ПолучатьОрганизациюИзСтрокНабора = Истина;
		КонецЕсли;
	КонецЕсли;
	ПараметрыХраненияФакта = фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрФактическихДанныхДляДокумента(ИмяДокумента);
	РегистраторФакта = ?(ПараметрыХраненияФакта.РегистрацияРучнойОперацией,фин_ОбщегоНазначенияВызовСервераПовтИсп.ДокументРегистрацииФактическихДанных(Источник),Источник);
	РегистрацияПоПлануСчетов = МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыБухгалтерии.фин_Бюджетирование) И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВестиУчетПоПлануСчетовБюджетирования");
	Если ПараметрыХраненияФакта.РегистрацияРучнойОперацией Тогда
		Если РегистраторФакта.ПометкаУдаления ИЛИ Источник.Дата<>РегистраторФакта.Дата ИЛИ (МетаданныеДокумента.Реквизиты.Найти("Организация")<>Неопределено И Источник.Организация <> РегистраторФакта.Организация) Тогда
			ОбъектРегистратор = РегистраторФакта.ПолучитьОбъект();
			ОбъектРегистратор.Дата = Источник.Дата;
			Если МетаданныеДокумента.Реквизиты.Найти("Организация")<>Неопределено Тогда
				ОбъектРегистратор.Организация = Источник.Организация;
			КонецЕсли;
			ОбъектРегистратор.ПометкаУдаления = Ложь;
			Попытка
				ОбъектРегистратор.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось изменить операцию ручной регистрации фактических данных бюджетирования для документа "+Строка(Источник)+"
				|	:"+ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли фин_ОбщегоНазначенияВызовСервераПовтИсп.ДокументИмеетДвиженияПоРегиструНакопления(ИмяДокумента,ПараметрыХраненияФакта.ИмяРегистра)=Ложь Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось выполнить регистрацию фактических данных бюджетирования для документа "+Строка(Источник)+"
				|	: документу не разрешено формировать движения по регистру фактических данных. Обратитесь к администратору");
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента",				Источник.Дата);
	Если ВидДокументов=Неопределено Тогда
		ВидДокументов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ВидДокументовПоИмениМетаданных(ИмяДокумента);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидДокументов",	ВидДокументов);
	Запрос.Текст="ВЫБРАТЬ
		             |	фин_ПрименениеСхемОтраженияФактическихДанных.ОбъектИнформационнойБазы КАК ВидДокументов,
		             |	фин_ПрименениеСхемОтраженияФактическихДанных.Схема КАК НаборШаблонов,
		             |	ИСТИНА КАК РегистрироватьПервичныеДанныеПоБюджетированию,
		             |	фин_ПрименениеСхемОтраженияФактическихДанных.ИспользоватьСовместноСШаблонамиРегистров
		             |ИЗ
		             |	РегистрСведений.фин_ПрименениеСхемОтраженияФактическихДанных.СрезПоследних(&ДатаДокумента, ОбъектИнформационнойБазы = &ВидДокументов) КАК фин_ПрименениеСхемОтраженияФактическихДанных
					 |ОБЪЕДИНИТЬ ВСЕ 
					 |ВЫБРАТЬ ПЕРВЫЕ 1
		             |	&ВидДокументов КАК ВидДокументов,
		             |	&ВидДокументов КАК НаборШаблонов,
		             |	ИСТИНА КАК РегистрироватьПервичныеДанныеПоБюджетированию,
		             |	ИСТИНА КАК ИспользоватьСовместноСШаблонамиРегистров
		             |ИЗ
		             |	РегистрСведений.фин_ПериодыПримененияПравилПоФинансовымПоказателям КАК фин_ПериодыПримененияПравилПоФинансовымПоказателям
					 |ГДЕ фин_ПериодыПримененияПравилПоФинансовымПоказателям.Правило.Владелец = &ВидДокументов
					 |	И фин_ПериодыПримененияПравилПоФинансовымПоказателям.Правило.ПоФинансовомуПоказателю
					 |	И фин_ПериодыПримененияПравилПоФинансовымПоказателям.ДатаНачала<=&ДатаДокумента И (фин_ПериодыПримененияПравилПоФинансовымПоказателям.ДатаОкончания>=&ДатаДокумента ИЛИ фин_ПериодыПримененияПравилПоФинансовымПоказателям.ДатаОкончания=ДАТАВРЕМЯ(1,1,1))";
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() ИЛИ ФиксированныйШаблон <>Неопределено Тогда
		ДатаВводаВСистему = ДатаОтраженияДокументаВБюджетах(Источник);
		ВидДокументов = Выборка.ВидДокументов;
		НаборШаблонов = Выборка.НаборШаблонов;
		Если НаборШаблонов = Перечисления.фин_АльтернативныеСпособыОтраженияФактическихДанных.ПоНастройкамДляРегистров Тогда
			Возврат;
		КонецЕсли;
		НаборДвиженийОбороты = РегистрыНакопления[ПараметрыХраненияФакта.ИмяРегистра].СоздатьНаборЗаписей();
		НаборДвиженийОбороты.Отбор.Регистратор.Установить(РегистраторФакта);
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_УчитыватьФактическиеДанныеПоДвижениямРегистров") И Выборка.ИспользоватьСовместноСШаблонамиРегистров = Истина Тогда
			НаборДвиженийОбороты.Прочитать();
		//Если Замещение=Истина ИЛИ ТаблицаДвижений.Количество()=0 Тогда
			СтрокиУдалить = Новый Массив;
			Для Каждого СтрокаНЗ Из НаборДвиженийОбороты Цикл
				Если ЗначениеЗаполнено(СтрокаНЗ.Схема) Тогда
					Если ТипЗнч(фин_ОбщегоНазначенияВызовСервераПовтИсп.ОбъектНастроекФактическихДанных(СтрокаНЗ.Схема))=Тип("СправочникСсылка.фин_ВидыДокументов") Тогда
						СтрокиУдалить.Добавить(СтрокаНЗ);
					КонецЕсли;
				ИначеЕсли ЗависимостьПоТекущемуШаблону(СтрокаНЗ,НаборДвиженийОбороты,НаборШаблонов) Тогда
					СтрокиУдалить.Добавить(СтрокаНЗ);
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
				НаборДвиженийОбороты.Удалить(СтрокаУдалить);
			КонецЦикла;
			//НаборДвиженийОбороты.Очистить();
			НаборДвиженийОбороты.Записать();
		//КонецЕсли;
		Иначе
			НаборДвиженийОбороты.Очистить();
			НаборДвиженийОбороты.Записать();
		КонецЕсли;
		Если РегистрацияЛимитов Тогда
			НаборДвижений = РегистрыНакопления.фин_КонтролируемыеФинансовыеПоказатели.СоздатьНаборЗаписей();
			НаборДвижений.Отбор.Регистратор.Установить(РегистраторФакта);
			НаборДвижений.Очистить();
			НаборДвижений.Записать();
		КонецЕсли;
		Если РегистрацияПоПлануСчетов Тогда
			НаборДвижений = РегистрыБухгалтерии.фин_Бюджетирование.СоздатьНаборЗаписей();
			НаборДвижений.Отбор.Регистратор.Установить(РегистраторФакта);
			НаборДвижений.Очистить();
			НаборДвижений.Записать();
		КонецЕсли;
		Если РегистрацияПрогнозныхДанных = Истина Тогда
			НаборДвиженийПрогноз = РегистрыНакопления.фин_ПрогнозИсполненияБюджетов.СоздатьНаборЗаписей();
			НаборДвиженийПрогноз.Отбор.Регистратор.Установить(РегистраторФакта);
			НаборДвиженийПрогноз.Очистить();
			НаборДвиженийПрогноз.Записать();
		КонецЕсли;
		Отражено = Ложь;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Документ",Источник.Ссылка);
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("фин_ЗначенияДополнительныхРеквизитовБюджетирования")=Неопределено Тогда
			Запрос.Текст="ВЫБРАТЬ
			|	ЗначенияДополнительныхРеквизитовБюджетирования.РеквизитБюджетирования КАК Реквизит,
			|	ЗначенияДополнительныхРеквизитовБюджетирования.ЗначениеРеквизита КАК Значение
			|ИЗ
			|	РегистрСведений.фин_ЗначенияДополнительныхРеквизитовБюджетирования КАК ЗначенияДополнительныхРеквизитовБюджетирования
			|ГДЕ
			|	ЗначенияДополнительныхРеквизитовБюджетирования.Документ = &Документ";
		Иначе
			Запрос.Текст="ВЫБРАТЬ
			|	ЗначенияДополнительныхРеквизитовБюджетирования.РеквизитБюджетирования КАК Реквизит,
			|	ЗначенияДополнительныхРеквизитовБюджетирования.ЗначениеРеквизита КАК Значение
			|ИЗ
			|	Документ."+МетаданныеДокумента.Имя+".фин_ЗначенияДополнительныхРеквизитовБюджетирования КАК ЗначенияДополнительныхРеквизитовБюджетирования
			|ГДЕ
			|	ЗначенияДополнительныхРеквизитовБюджетирования.Ссылка = &Документ";
		КонецЕсли;	
		ЗначенияДополнительныхРеквизитов = Запрос.Выполнить().Выгрузить();
		
		РеквизитОрганизация = (МетаданныеДокумента.Реквизиты.Найти("Организация")<>Неопределено) И Метаданные.РегистрыСведений[фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"РаспределениеПоПроектам"].Измерения.Найти("Организация")<>Неопределено;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РаспределениеПоПроектамСрезПоследних.ВидРаспределения КАК ВидРаспределения,
		|	РаспределениеПоПроектамСрезПоследних.Проект,
		|	РаспределениеПоПроектамСрезПоследних.ДоляРаспределения КАК ДоляРаспределения
		|ИЗ
		|	РегистрСведений."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"РаспределениеПоПроектам.СрезПоследних(&Дата, "+?(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям") И РеквизитОрганизация,"Организация = &Организация","")+") КАК РаспределениеПоПроектамСрезПоследних
		|ИТОГИ
		|	СУММА(ДоляРаспределения)
		|ПО
		|	ВидРаспределения";
		Запрос.УстановитьПараметр("Дата",		Источник.Дата);
		Если РеквизитОрганизация Тогда
			Запрос.УстановитьПараметр("Организация",Источник.Организация);
		КонецЕсли;
		ВыборкаВидыРаспределения = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВестиУчетПоПроектам = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ВестиУчетПоПроектам");
		СписокРазрезовУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов");
		КЭШ_Разрезы = Новый Соответствие;
	
		Если ФиксированныйШаблон = Неопределено Тогда
			Если НЕ Выборка.РегистрироватьПервичныеДанныеПоБюджетированию Тогда
				Возврат;
			КонецЕсли;
			Если ТипЗнч(НаборШаблонов)=Тип("СправочникСсылка.фин_НаборыШаблоновОтраженияПервичныхДанныхВБюджетах") Тогда
				СоставШаблона = НаборШаблонов.НаборШаблонов;
				Для Каждого СтрокаНабора Из СоставШаблона Цикл
					Отразить = Ложь;
					Если СтрокаНабора.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.Всегда Тогда
						Отразить = Истина;
					КонецЕсли;
					Если СтрокаНабора.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ВсегдаЕслиУдовлетворяетУсловию
						И усд_ПроцедурыСогласованияДокументов.УсловиеВыполняется(СтрокаНабора.УсловиеПримененияШаблона,Источник.Ссылка,,Источник.Ссылка) Тогда
						Отразить = Истина;
					КонецЕсли;
					Если СтрокаНабора.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиУдовлетворяетУсловию
						И Не Отражено
						И усд_ПроцедурыСогласованияДокументов.УсловиеВыполняется(СтрокаНабора.УсловиеПримененияШаблона,Источник.Ссылка,,Источник.Ссылка) Тогда
						Отразить = Истина;
						Отражено = Истина;
					КонецЕсли;
					Если Отразить Тогда
						ОтразитьВОборотахПоБюджетам(СтрокаНабора.Схема,НаборДвиженийОбороты,Источник,ЗначенияДополнительныхРеквизитов,ВыборкаВидыРаспределения,Отказ,ТаблицаПереданныхДвижений,ВестиУчетПоПроектам,СписокРазрезовУчета,РегистрацияПрогнозныхДанных,НаборДвиженийПрогноз,ПолучатьОрганизациюИзСтрокНабора);
					КонецЕсли;
				КонецЦикла;
				Для Каждого СтрокаНабора Из СоставШаблона Цикл
					Отразить = Ложь;
					Если СтрокаНабора.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиНеНайденУдовлетворяющийУсловиюШаблон
						И Не Отражено Тогда
						Отразить = Истина;
						Отражено = Истина;
					КонецЕсли;
					Если Отразить Тогда
						ОтразитьВОборотахПоБюджетам(СтрокаНабора.Схема,НаборДвиженийОбороты,Источник,ЗначенияДополнительныхРеквизитов,ВыборкаВидыРаспределения,Отказ,ТаблицаПереданныхДвижений,ВестиУчетПоПроектам,СписокРазрезовУчета,РегистрацияПрогнозныхДанных,НаборДвиженийПрогноз,ПолучатьОрганизациюИзСтрокНабора);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(НаборШаблонов)=Тип("СправочникСсылка.фин_СхемыОтраженияФактическихДанных") Тогда
				ОтразитьВОборотахПоБюджетам(НаборШаблонов,НаборДвиженийОбороты,Источник,ЗначенияДополнительныхРеквизитов,ВыборкаВидыРаспределения,Отказ,ТаблицаПереданныхДвижений,ВестиУчетПоПроектам,СписокРазрезовУчета,РегистрацияПрогнозныхДанных,НаборДвиженийПрогноз,ПолучатьОрганизациюИзСтрокНабора);
			ИначеЕсли ТипЗнч(НаборШаблонов)=Тип("СправочникСсылка.фин_ВидыДокументов") Тогда
				ОтразитьВОборотахПоБюджетам(НаборШаблонов,НаборДвиженийОбороты,Источник,ЗначенияДополнительныхРеквизитов,ВыборкаВидыРаспределения,Отказ,ТаблицаПереданныхДвижений,ВестиУчетПоПроектам,СписокРазрезовУчета,РегистрацияПрогнозныхДанных,НаборДвиженийПрогноз,ПолучатьОрганизациюИзСтрокНабора);
			ИначеЕсли НаборШаблонов = Перечисления.фин_АльтернативныеСпособыОтраженияФактическихДанных.ПоДокументамПланированияДвиженийДенежныхСредств Тогда
				ОтразитьВОборотахПоБюджетам(НаборШаблонов,НаборДвиженийОбороты,Источник,ЗначенияДополнительныхРеквизитов,ВыборкаВидыРаспределения,Отказ,ТаблицаПереданныхДвижений,ВестиУчетПоПроектам,СписокРазрезовУчета,РегистрацияПрогнозныхДанных,НаборДвиженийПрогноз,ПолучатьОрганизациюИзСтрокНабора);
			КонецЕсли;
		Иначе
			ОтразитьВОборотахПоБюджетам(ФиксированныйШаблон,НаборДвиженийОбороты,Источник,ЗначенияДополнительныхРеквизитов,ВыборкаВидыРаспределения,Отказ,ТаблицаПереданныхДвижений,ВестиУчетПоПроектам,СписокРазрезовУчета,РегистрацияПрогнозныхДанных,НаборДвиженийПрогноз,ПолучатьОрганизациюИзСтрокНабора);
		КонецЕсли;
		Если Не Отказ И НаборДвиженийОбороты.Количество() >0  Тогда
			ДатаСреза = Источник.Дата;
			
			
			ВалютаУправленческогоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
			ВалютаРегл = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
			Если ВалютаУправленческогоУчета.Пустая() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Проведение документа "+Строка(Источник.Ссылка)+" по регистрам бюджетирования невозможно: не задана валюта управленческого учета",,,,Отказ);
				Возврат;
			КонецЕсли;
			Для Каждого СтрокаНабора Из НаборДвиженийОбороты Цикл
				СтрокаНабора.Период 			= ДатаВводаВСистему;
				СтрокаНабора.Активность 		= Истина;
				СтрокаНабора.Регистратор 		= Источник.Ссылка;
				СтрокаНабора.ПериодПланирования	= ДатаВводаВСистему;
				Если НЕ ПолучатьОрганизациюИзСтрокНабора Тогда
					СтрокаНабора.Организация 		= Организация;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(СтрокаНабора.Валюта) Тогда
					СтрокаНабора.Валюта = ВалютаРегл;
				КонецЕсли;
			КонецЦикла;
			// расчет зависимостей - начало
			
			МассивИмен = Новый Массив;
			ПолныйМассивИмен = Новый Массив;
			Для Каждого РазрезЭлемент Из СписокРазрезовУчета Цикл
				ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
				ПолныйМассивИмен.Добавить(ИмяРазреза);
				Если Найти(ИмяРазреза,"Разрез")=0 Тогда
					Продолжить;
				КонецЕсли;
				МассивИмен.Добавить(ИмяРазреза);
			КонецЦикла;
			Если фин_УправлениеЗависимостямиСтатейБюджетов.ИмеютсяЗависимостиПоФактическимДанным(НаборДвиженийОбороты.ВыгрузитьКолонку("ФинансовыйПоказатель"),ДатаСреза,Организация) Тогда
				НаборДвиженийОбороты.Записать();
				ЗависимыеОбороты = НаборДвиженийОбороты.ВыгрузитьКолонки();
				ПромежуточныйНаборДвиженийОбороты = НаборДвиженийОбороты.Выгрузить();
				ПромежуточныйНаборДвиженийОбороты.Колонки.ВалютнаяСумма.Имя= "Сумма";
				ЗависимыеОбороты.Колонки.ВалютнаяСумма.Имя= "Сумма";
				Для Каждого РазрезЭлемент Из СписокРазрезовУчета Цикл
					ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
					Если Найти(ИмяРазреза,"Разрез")=0 Тогда
						Продолжить;
					КонецЕсли;
					ПромежуточныйНаборДвиженийОбороты.Колонки.Добавить(ИмяРазреза,фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(РазрезЭлемент.Значение,КЭШ_Разрезы).ТипЗначения);
					ЗависимыеОбороты.Колонки.Добавить(ИмяРазреза,фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(РазрезЭлемент.Значение,КЭШ_Разрезы).ТипЗначения);
				КонецЦикла;
				Для Инд=1 По 10 Цикл
					Если ПромежуточныйНаборДвиженийОбороты.Колонки.Найти("Разрез"+Строка(Инд))=Неопределено Тогда
						ПромежуточныйНаборДвиженийОбороты.Колонки.Добавить("Разрез"+Строка(Инд),Новый ОписаниеТипов("Строка"));
						ЗависимыеОбороты.Колонки.Добавить("Разрез"+Строка(Инд),Новый ОписаниеТипов("Строка"));
					КонецЕсли;
				КонецЦикла;
				Для Каждого СтрокаНабора Из ПромежуточныйНаборДвиженийОбороты Цикл
					Для Каждого ИмяРазреза Из МассивИмен Цикл
						СтрокаНабора[ИмяРазреза] = СтрокаНабора.ДополнительныеРазрезы[ИмяРазреза];
					КонецЦикла;
				КонецЦикла;
				фин_УправлениеЗависимостямиСтатейБюджетов.РассчитатьЗависимыеОбороты(,ПромежуточныйНаборДвиженийОбороты,ЗависимыеОбороты,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий(),Организация,БюджетированиеПоОрганизациям,ДатаВводаВСистему,ВестиУчетПоПроектам,Истина);
				ЗависимыеОбороты.Колонки.Сумма.Имя= "ВалютнаяСумма";
				Для Каждого СтрокаЗависимых Из ЗависимыеОбороты Цикл
					СтруктураРазрезовСтроки = Новый Структура;
					Для Каждого Разрез Из МассивИмен Цикл
						Если Найти(Разрез,"Разрез")<>0 Тогда
							СтруктураРазрезовСтроки.Вставить(Разрез,СтрокаЗависимых[Разрез]);
						КонецЕсли;
					КонецЦикла;
					СтрокаЗависимых.ДополнительныеРазрезы = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОпределитьПозициюКлассификатораПоСтруктуре(СтруктураРазрезовСтроки);
				КонецЦикла;
			
				фин_ОбщегоНазначенияСервер.ЗагрузитьВТаблицуЗначений(ЗависимыеОбороты,НаборДвиженийОбороты);
			КонецЕсли;
			                                                                 
			// расчет зависимостей - конец
			
			// расчет управленческой суммы
			СтруктураКурсов = Новый Соответствие;
			Для Каждого СтрокаНабора Из НаборДвиженийОбороты Цикл
				//СтрокаНабора.Период = Источник.Дата;
				СтрокаНабора.Активность = Истина;
				СтрокаНабора.Регистратор = РегистраторФакта;
				Если РегистраторФакта<>Источник Тогда
					СтрокаНабора.ПервичныйДокумент = РегистраторФакта;
				КонецЕсли;
				Если НЕ ПолучатьОрганизациюИзСтрокНабора Тогда
					СтрокаНабора.Организация = Организация;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаНабора.ПериодПланирования) Тогда
					СтрокаНабора.ПериодПланирования = СтрокаНабора.Период;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(СтрокаНабора.Валюта) Тогда
					СтрокаНабора.Валюта = ВалютаРегл;
				КонецЕсли;
				Если СтрокаНабора.Валюта = ВалютаУправленческогоУчета Тогда
					СтрокаНабора.СуммаУпр = СтрокаНабора.ВалютнаяСумма;
				Иначе
					Курс 		= фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(СтрокаНабора.Валюта,ДатаСреза);
					КурсУпр 	= фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ВалютаУправленческогоУчета,ДатаСреза);
					СтрокаНабора.СуммаУпр=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаНабора.ВалютнаяСумма,
					СтрокаНабора.Валюта,ВалютаУправленческогоУчета,
					Курс.Курс,КурсУпр.Курс,
					Курс.Кратность,КурсУпр.Кратность);
				КонецЕсли;
			КонецЦикла;
			НаборДвиженийОбороты.Записать();
			
			Если РегистрацияЛимитов Тогда
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ВТ",НаборДвиженийОбороты.Выгрузить());
				Запрос.Текст = "ВЫБРАТЬ
				|	ОборотыБюджетов.Валюта,
				|	ОборотыБюджетов.Проект,
				|	ОборотыБюджетов.УправленческоеПодразделение,
				|	ОборотыБюджетов.ФинансовыйПоказатель,
				|	ОборотыБюджетов.Контрагент,
				|	ОборотыБюджетов.Номенклатура,
				|	ОборотыБюджетов.ДополнительныеРазрезы,
				|	ОборотыБюджетов.Количество КАК Количество,
				|	ОборотыБюджетов.ВалютнаяСумма КАК ВалютнаяСумма,
				|	ОборотыБюджетов.СуммаУпр КАК СуммаУпр,
				|	ОборотыБюджетов.СуммаСценария КАК СуммаСценария,
				|	ОборотыБюджетов.ПериодПланирования КАК ПериодПланирования,
				|	ОборотыБюджетов.Период
				|ПОМЕСТИТЬ ВТОбороты
				|ИЗ
				|	&ВТ КАК ОборотыБюджетов
				|;
				|ВЫБРАТЬ
				|	ОборотыБюджетов.Валюта,
				|	ОборотыБюджетов.Проект,
				|	ОборотыБюджетов.УправленческоеПодразделение,
				|	ОборотыБюджетов.ФинансовыйПоказатель,
				|	ОборотыБюджетов.Контрагент,
				|	ОборотыБюджетов.Номенклатура,
				|	ОборотыБюджетов.ДополнительныеРазрезы,
				|	СУММА(ОборотыБюджетов.ВалютнаяСумма) КАК ВалютнаяСумма,
				|	СУММА(ОборотыБюджетов.Количество) КАК Количество,
				|	СУММА(ОборотыБюджетов.СуммаУпр) КАК СуммаУпр,
				|	СУММА(ОборотыБюджетов.СуммаСценария) КАК СуммаСценария,
				|	ОборотыБюджетов.ПериодПланирования,
				|	ОборотыБюджетов.Период
				|ИЗ
				|	ВТОбороты КАК ОборотыБюджетов
				|
				|СГРУППИРОВАТЬ ПО
				|	ОборотыБюджетов.Валюта,
				|	ОборотыБюджетов.ФинансовыйПоказатель,
				|	ОборотыБюджетов.УправленческоеПодразделение,
				|	ОборотыБюджетов.Номенклатура,
				|	ОборотыБюджетов.ДополнительныеРазрезы,
				|	ОборотыБюджетов.Контрагент,
				|	ОборотыБюджетов.Проект,
				|	ОборотыБюджетов.ПериодПланирования,
				|	ОборотыБюджетов.Период";
				Запрос.УстановитьПараметр("Регистратор", Источник.Ссылка);
				РезультатЗапроса = Запрос.Выполнить();
				
				// Проверка и движения по регистру "Контролируемые значения бюджетов"
				//НаборДвижений = Источник.Движения.фин_КонтролируемыеФинансовыеПоказатели;
				НаборДвижений = РегистрыНакопления.фин_КонтролируемыеФинансовыеПоказатели.СоздатьНаборЗаписей();
				НаборДвижений.Отбор.Регистратор.Установить(Источник);
				НаборДвижений.Очистить();
				НаборДвижений.Записать();
				ТабКонтролируемыхДвижений=НаборДвижений.Выгрузить();
				ТабКонтролируемыхДвижений.Очистить();
				
				ТаблицаОборотовДокументаДляКонтроля = РезультатЗапроса.Выгрузить();
				
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("Период",ДатаВводаВСистему);
				Для Каждого ИмяРазреза Из ПолныйМассивИмен Цикл
					Если Найти(ИмяРазреза,"Разрез")<>0 Тогда
						ТаблицаОборотовДокументаДляКонтроля.Колонки.Добавить(ИмяРазреза);
						Для Каждого СтрокаТаблицы Из ТаблицаОборотовДокументаДляКонтроля Цикл
							 СтрокаТаблицы[ИмяРазреза]=СтрокаТаблицы.ДополнительныеРазрезы[ИмяРазреза];
						 КонецЦикла;
					КонецЕсли;
					СтруктураДанных.Вставить(ИмяРазреза,ТаблицаОборотовДокументаДляКонтроля.ВыгрузитьКолонку(ИмяРазреза));	
				КонецЦикла;
				
				СписокЛимитов = фин_УправлениеЗависимостямиСтатейБюджетов.ПолучитьТаблицуКонтролирующихПравил(ТаблицаОборотовДокументаДляКонтроля.ВыгрузитьКолонку("ФинансовыйПоказатель"),Неопределено,БюджетированиеПоОрганизациям,Организация,СтруктураДанных,Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении,Истина);
				
				МассивУдаляемых = Новый Массив;
				Для Каждого СтрокаЛимит Из СписокЛимитов Цикл
					Если фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаЛимит.Период,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СтрокаЛимит.КонтролирующийСценарий)) <> фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ДатаВводаВСистему,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СтрокаЛимит.КонтролирующийСценарий)) Тогда
						МассивУдаляемых.Добавить(СтрокаЛимит);
					КонецЕсли;
				КонецЦикла;
				Для Каждого СтрокаЛимит Из МассивУдаляемых Цикл
					СписокЛимитов.Удалить(СтрокаЛимит);
				КонецЦикла;
				
				Для Каждого СтрокаОборотовДляКонтроля Из ТаблицаОборотовДокументаДляКонтроля Цикл
					
					ПроверкаПройдена = Истина;
					ТабКонтролируемыхЗначений=ПроверкаКонтролируемыхЗначений(Источник,СписокЛимитов,СтрокаОборотовДляКонтроля,ТаблицаОборотовДокументаДляКонтроля,БюджетированиеПоОрганизациям,ПолныйМассивИмен,ПроверкаПройдена);
					
					Если (НЕ ПроверкаПройдена) И НЕ РазрешеноПревышениеКонтролируемыхЗначенийПоБюджетам() Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Превышение контролируемого значения. Проведение отменено!",,,,Отказ);
						РегистрацияЗадачПоПревышению(СтрокаОборотовДляКонтроля.ФинансовыйПоказатель,Источник.Ссылка,ТабКонтролируемыхЗначений[0].КонтролирующийСценарий,"Попытка превышения лимита");
						Возврат;
					Иначе
						Если (НЕ ПроверкаПройдена) Тогда
							РегистрацияЗадачПоПревышению(СтрокаОборотовДляКонтроля.ФинансовыйПоказатель,Источник.Ссылка,ТабКонтролируемыхЗначений[0].КонтролирующийСценарий,"Проведение документа с превышением лимита");
						КонецЕсли;
					
						Если ТабКонтролируемыхЗначений.Количество()>0 Тогда
							
							ТабКонтролируемыхЗначений.Колонки.Добавить("ДополнительныеРазрезы",Новый ОписаниеТипов("СправочникСсылка.фин_КлассификаторНаборовДополнительныхРазрезов"));
							Для Каждого СтрокаКонтролируемых Из ТабКонтролируемыхЗначений Цикл
								СтруктураРазрезовСтроки = Новый Структура;
								Для Каждого Разрез Из МассивИмен Цикл
									Если Найти(Разрез,"Разрез")<>0 И ТабКонтролируемыхЗначений.Колонки.Найти(Разрез)<>Неопределено Тогда
										СтруктураРазрезовСтроки.Вставить(Разрез,СтрокаКонтролируемых[Разрез]);
									КонецЕсли;
								КонецЦикла;
								СтрокаКонтролируемых.ДополнительныеРазрезы = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОпределитьПозициюКлассификатораПоСтруктуре(СтруктураРазрезовСтроки);
							КонецЦикла;
							
							фин_ОбщегоНазначенияСервер.ЗагрузитьВТаблицуЗначений(ТабКонтролируемыхЗначений,ТабКонтролируемыхДвижений)
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				ТабКонтролируемыхДвижений.ЗаполнитьЗначения(Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении,"ИспользованиеКонтролируемогоЗначения");
				ТабКонтролируемыхДвижений.ЗаполнитьЗначения(Истина,"Активность");
				Для Каждого СтрокаКонтролируемых Из ТабКонтролируемыхДвижений Цикл
					СтрокаКонтролируемых.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ДатаВводаВСистему,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СтрокаКонтролируемых.Сценарий));
					СтрокаКонтролируемых.Период = ДатаВводаВСистему;
				КонецЦикла;
				//ТабКонтролируемыхДвижений.ЗаполнитьЗначения(Источник.Дата,"Период");
				
				Если БюджетированиеПоОрганизациям Тогда
					//ТабКонтролируемыхДвижений.Колонки.Добавить("Организация");
					ТабКонтролируемыхДвижений.ЗаполнитьЗначения(Организация,"Организация");
				КонецЕсли;
				
				НаборДвижений.Загрузить(ТабКонтролируемыхДвижений);	
				НаборДвижений.Записать();
			КонецЕсли;
			Если РегистрацияПоПлануСчетов Тогда
				// формирование проводок
				Запрос=Новый Запрос;
				ТекстЗапросаВТ="ВЫБРАТЬ
				             |	БюджетнаяОперация.Период,
				             |	БюджетнаяОперация.ШаблонПроводок,
				             |	БюджетнаяОперация.Организация,
				             |	БюджетнаяОперация.Сценарий,
				             |	БюджетнаяОперация.ФинансовыйПоказатель,
				             |	БюджетнаяОперация.УправленческоеПодразделение,
				             |	БюджетнаяОперация.Проект,
				             |	БюджетнаяОперация.Контрагент,
				             |	БюджетнаяОперация.Номенклатура,
				             |	БюджетнаяОперация.Валюта КАК Валюта,
				             |	БюджетнаяОперация.ДополнительныеРазрезы,
				             |	БюджетнаяОперация.Количество,
				             |	БюджетнаяОперация.СуммаУпр,
				             |	БюджетнаяОперация.ВалютнаяСумма,
				             |	БюджетнаяОперация.СуммаСценария
							 |ПОМЕСТИТЬ ВТ_ПереданныеДвижения
				             |ИЗ
				             |	&ВТ КАК БюджетнаяОперация";
 				ТекстЗапроса="ВЫБРАТЬ
				             |	БюджетнаяОперация.Период,
				             |	БюджетнаяОперация.ШаблонПроводок,
				             |	БюджетнаяОперация.Организация,
				             |	БюджетнаяОперация.Сценарий,
				             |	БюджетнаяОперация.ФинансовыйПоказатель,
				             |	БюджетнаяОперация.УправленческоеПодразделение,
				             |	БюджетнаяОперация.Проект,
				             |	БюджетнаяОперация.Контрагент,
				             |	БюджетнаяОперация.Номенклатура,
				             |	БюджетнаяОперация.Валюта КАК ВалютаОперации,
				             |	БюджетнаяОперация.ДополнительныеРазрезы,
				             |	БюджетнаяОперация.Количество,
				             |	БюджетнаяОперация.СуммаУпр,
				             |	БюджетнаяОперация.ВалютнаяСумма КАК Сумма,
				             |	БюджетнаяОперация.СуммаСценария
				             |ИЗ
				             |	ВТ_ПереданныеДвижения КАК БюджетнаяОперация";

				ПараметрыВТ = Новый Структура("ТекстВременныхТаблиц,ТаблицаЗначений",ТекстЗапросаВТ,НаборДвиженийОбороты.Выгрузить());

				ТабПроводокДокумента=фин_ПроцедурыМеханизмовБюджетирования.ПолучитьТаблицуПроводокПоПлануСчетовБюджетирования(Источник.Ссылка,ТекстЗапроса,ПараметрыВТ,,,,,Истина,,,);
				//НаборДвижений=Источник.Движения.фин_Бюджетирование;
				НаборДвижений = РегистрыБухгалтерии.фин_Бюджетирование.СоздатьНаборЗаписей();
				НаборДвижений.Отбор.Регистратор.Установить(РегистраторФакта);
				НаборДвижений.Очистить();
				СписокРесурсов = Новый Массив;
				СписокРесурсов.Добавить("ВалютнаяСуммаДт");
				СписокРесурсов.Добавить("ВалютнаяСуммаКт");
				СписокРесурсов.Добавить("КоличествоДт");
				СписокРесурсов.Добавить("КоличествоКт");
				СписокРесурсов.Добавить("СуммаУпр");
				Для Каждого Строка Из  ТабПроводокДокумента Цикл
					Для Каждого Ресурс из СписокРесурсов Цикл
						Если Строка[Ресурс] = Неопределено ИЛИ Строка[Ресурс] = NULL Тогда
							Строка[Ресурс] = 0;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				СтрокиУдалить = ТабПроводокДокумента.НайтиСтроки(Новый Структура("ВалютнаяСуммаДт,ВалютнаяСуммаКт,СуммаУпр,КоличествоДт,КоличествоКт",0,0,0,0,0));
				Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
					ТабПроводокДокумента.Удалить(СтрокаУдалить);
				КонецЦикла;
				ТабПроводокДокумента.Колонки.Добавить("Сценарий");
				ТабПроводокДокумента.Колонки.Добавить("Организация");     /// !!!!!!!!!!!!
				ТабПроводокДокумента.ЗаполнитьЗначения(Организация,"Организация");
				ТабПроводокДокумента.Колонки.Добавить("СуммаСценария");
				фин_ПроцедурыУчетаПоУправленческомуПлануСчетовСервер.ЗаполнитьНаборЗаписейРегистраБухгалтерииБюджетирование(НаборДвижений,ТабПроводокДокумента);
				НаборДвижений.Записать();
			КонецЕсли;
		ИначеЕсли НЕ Отказ Тогда
			НаборДвиженийОбороты.Записать();
		КонецЕсли;
		Если Не Отказ И РегистрацияПрогнозныхДанных И НаборДвиженийПрогноз.Количество() >0  Тогда
			Если НаборДвиженийПрогноз.Количество() >0  Тогда

				ДатаСреза = Источник.Дата;
				
				БюджетированиеПоОрганизациям = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
				
				ВалютаУправленческогоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
				ВалютаРегл = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
				Если ВалютаУправленческогоУчета.Пустая() Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Проведение документа "+Строка(Источник.Ссылка)+" по регистрам бюджетирования невозможно: не задана валюта управленческого учета",,,,Отказ);
					Возврат;
				КонецЕсли;
				Организация = Справочники.Организации.ПустаяСсылка();
				Если БюджетированиеПоОрганизациям И МетаданныеДокумента.Реквизиты.Найти("Организация")<>Неопределено Тогда
					Организация = Источник.Организация;
				КонецЕсли;
				Для Каждого СтрокаНабора Из НаборДвиженийПрогноз Цикл
					СтрокаНабора.Период = Источник.Дата;
					СтрокаНабора.Активность = Истина;
					СтрокаНабора.Регистратор = Источник.Ссылка;
					СтрокаНабора.ПериодПланирования = Источник.Дата;
					СтрокаНабора.Организация = Организация;
					Если Не ЗначениеЗаполнено(СтрокаНабора.Валюта) Тогда
						СтрокаНабора.Валюта = ВалютаРегл;
					КонецЕсли;
				КонецЦикла;
				// расчет зависимостей - начало
				
				МассивИмен = Новый Массив;
				ПолныйМассивИмен = Новый Массив;
				Для Каждого РазрезЭлемент Из СписокРазрезовУчета Цикл
					ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
					ПолныйМассивИмен.Добавить(ИмяРазреза);
					Если Найти(ИмяРазреза,"Разрез")=0 Тогда
						Продолжить;
					КонецЕсли;
					МассивИмен.Добавить(ИмяРазреза);
				КонецЦикла;
				Если фин_УправлениеЗависимостямиСтатейБюджетов.ИмеютсяЗависимостиПоФактическимДанным(НаборДвиженийПрогноз.ВыгрузитьКолонку("ФинансовыйПоказатель"),ДатаСреза,Организация) Тогда
					НаборДвиженийПрогноз.Записать();
					ЗависимыеОбороты = НаборДвиженийПрогноз.ВыгрузитьКолонки();
					ПромежуточныйНаборДвиженийОбороты = НаборДвиженийПрогноз.Выгрузить();
					ПромежуточныйНаборДвиженийОбороты.Колонки.ВалютнаяСумма.Имя= "Сумма";
					ЗависимыеОбороты.Колонки.ВалютнаяСумма.Имя= "Сумма";
					Для Каждого РазрезЭлемент Из СписокРазрезовУчета Цикл
						ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
						Если Найти(ИмяРазреза,"Разрез")=0 Тогда
							Продолжить;
						КонецЕсли;
						ПромежуточныйНаборДвиженийОбороты.Колонки.Добавить(ИмяРазреза,фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(РазрезЭлемент.Значение,КЭШ_Разрезы).ТипЗначения);
						ЗависимыеОбороты.Колонки.Добавить(ИмяРазреза,фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(РазрезЭлемент.Значение,КЭШ_Разрезы).ТипЗначения);
					КонецЦикла;
					Для Инд=1 По 10 Цикл
						Если ПромежуточныйНаборДвиженийОбороты.Колонки.Найти("Разрез"+Строка(Инд))=Неопределено Тогда
							ПромежуточныйНаборДвиженийОбороты.Колонки.Добавить("Разрез"+Строка(Инд),Новый ОписаниеТипов("Строка"));
							ЗависимыеОбороты.Колонки.Добавить("Разрез"+Строка(Инд),Новый ОписаниеТипов("Строка"));
						КонецЕсли;
					КонецЦикла;
					Для Каждого СтрокаНабора Из ПромежуточныйНаборДвиженийОбороты Цикл
						Для Каждого ИмяРазреза Из МассивИмен Цикл
							СтрокаНабора[ИмяРазреза] = СтрокаНабора.ДополнительныеРазрезы[ИмяРазреза];
						КонецЦикла;
					КонецЦикла;
					фин_УправлениеЗависимостямиСтатейБюджетов.РассчитатьЗависимыеОбороты(,ПромежуточныйНаборДвиженийОбороты,ЗависимыеОбороты,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий(),Организация,БюджетированиеПоОрганизациям,Источник.Дата,ВестиУчетПоПроектам,Истина);
					ЗависимыеОбороты.Колонки.Сумма.Имя= "ВалютнаяСумма";
					Для Каждого СтрокаЗависимых Из ЗависимыеОбороты Цикл
						СтруктураРазрезовСтроки = Новый Структура;
						Для Каждого Разрез Из МассивИмен Цикл
							Если Найти(Разрез,"Разрез")<>0 Тогда
								СтруктураРазрезовСтроки.Вставить(Разрез,СтрокаЗависимых[Разрез]);
							КонецЕсли;
						КонецЦикла;
						СтрокаЗависимых.ДополнительныеРазрезы = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОпределитьПозициюКлассификатораПоСтруктуре(СтруктураРазрезовСтроки);
					КонецЦикла;
				
					фин_ОбщегоНазначенияСервер.ЗагрузитьВТаблицуЗначений(ЗависимыеОбороты,НаборДвиженийПрогноз);
				КонецЕсли;
				                                                                 
				// расчет зависимостей - конец
				
				// расчет управленческой суммы
				СтруктураКурсов = Новый Соответствие;
				Для Каждого СтрокаНабора Из НаборДвиженийПрогноз Цикл
					//СтрокаНабора.Период = Источник.Дата;
					СтрокаНабора.Активность = Истина;
					СтрокаНабора.Регистратор = Источник.Ссылка;
					СтрокаНабора.Организация = Организация;
					СтрокаНабора.ПериодПланирования = СтрокаНабора.Период;
					Если Не ЗначениеЗаполнено(СтрокаНабора.Валюта) Тогда
						СтрокаНабора.Валюта = ВалютаРегл;
					КонецЕсли;
					Если СтрокаНабора.Валюта = ВалютаУправленческогоУчета Тогда
						СтрокаНабора.СуммаУпр = СтрокаНабора.ВалютнаяСумма;
					Иначе
						Курс 		= фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(СтрокаНабора.Валюта,ДатаСреза);
						КурсУпр 	= фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ВалютаУправленческогоУчета,ДатаСреза);
						СтрокаНабора.СуммаУпр=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаНабора.ВалютнаяСумма,
						СтрокаНабора.Валюта,ВалютаУправленческогоУчета,
						Курс.Курс,КурсУпр.Курс,
						Курс.Кратность,КурсУпр.Кратность);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			НаборДвиженийПрогноз.Записать();
		КонецЕсли;
	ИначеЕсли фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_УчитыватьФактическиеДанныеПоДвижениямРегистров") Тогда
		НаборДвиженийОбороты = РегистрыНакопления[ПараметрыХраненияФакта.ИмяРегистра].СоздатьНаборЗаписей();
		НаборДвиженийОбороты.Отбор.Регистратор.Установить(РегистраторФакта);
		НаборДвиженийОбороты.Очистить();
		НаборДвиженийОбороты.Записать();
		Если РегистрацияЛимитов Тогда
			НаборДвижений = РегистрыНакопления.фин_КонтролируемыеФинансовыеПоказатели.СоздатьНаборЗаписей();
			НаборДвижений.Отбор.Регистратор.Установить(РегистраторФакта);
			НаборДвижений.Очистить();
			НаборДвижений.Записать();
		КонецЕсли;
		Если РегистрацияПоПлануСчетов Тогда
			НаборДвижений = РегистрыБухгалтерии.фин_Бюджетирование.СоздатьНаборЗаписей();
			НаборДвижений.Отбор.Регистратор.Установить(РегистраторФакта);
			НаборДвижений.Очистить();
			НаборДвижений.Записать();
		КонецЕсли;
		Если РегистрацияПрогнозныхДанных = Истина Тогда
			НаборДвиженийПрогноз = РегистрыНакопления.фин_ПрогнозИсполненияБюджетов.СоздатьНаборЗаписей();
			НаборДвиженийПрогноз.Отбор.Регистратор.Установить(РегистраторФакта);
			НаборДвиженийПрогноз.Очистить();
			НаборДвиженийПрогноз.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ФормироватьПроводкиПоБюджетированию

Процедура РегистрацияЗадачПоПревышению(ФинансовыйПоказатель,Регистратор,Сценарий,Текст)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.ЭтапБюджетногоПроцесса,
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.Организация,
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.СценарийПланирования
		|ИЗ
		|	РегистрСведений.фин_КалендарноеПланированиеБюджетногоПроцесса КАК фин_КалендарноеПланированиеБюджетногоПроцесса
		|ГДЕ
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.ВидЗадачи = &ВидЗадачи
		|	И ВЫБОР
		|			КОГДА фин_КалендарноеПланированиеБюджетногоПроцесса.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ фин_КалендарноеПланированиеБюджетногоПроцесса.Организация = &Организация
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА фин_КалендарноеПланированиеБюджетногоПроцесса.СценарийПланирования = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			КОГДА &СценарийПланирования = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ фин_КалендарноеПланированиеБюджетногоПроцесса.СценарийПланирования = &СценарийПланирования
		|		КОНЕЦ";

	Запрос.УстановитьПараметр("ВидЗадачи", Перечисления.фин_ВидыЗадачПоБюджетам.УведомленияОПревышенииЛимитовПриУчетеФактическихДанных);
	Запрос.УстановитьПараметр("Организация", ?(Регистратор.Метаданные().Реквизиты.Найти("Организация")<>Неопределено,Регистратор.Организация,Справочники.Организации.ПустаяСсылка()));
	Запрос.УстановитьПараметр("СценарийПланирования", Сценарий);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Задача = Задачи.фин_ЗадачиБюджетногоПроцесса.СоздатьЗадачу();
		Задача.Дата = ТекущаяДата();
		Задача.Инициатор = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("глТекущийПользователь");
		Задача.Наименование = Текст+": "+Строка(Регистратор);
		Задача.Объект = Регистратор;
		Задача.Описание = Текст+": "+Строка(Регистратор)+"
		|	Финансовый показатель: "+Строка(ФинансовыйПоказатель)+ФинансовыйПоказатель.Код;
		Задача.Оповещение=Истина;
		Задача.СрокИсполнения = ТекущаяДата();
		Задача.СрокОповещения = ТекущаяДата();
		Задача.УстановитьНовыйНомер();
		Попытка
			Задача.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось создать задачу: "+Текст+": "+Строка(Регистратор)+"
		|	Финансовый показатель: "+Строка(ФинансовыйПоказатель)+ФинансовыйПоказатель.Код+"
		|	по причине: "+ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Функция ДатаОтраженияДокументаВБюджетах(Документ) Экспорт
	ДатаДокумента = Документ.Дата;
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ОтражатьФактическиеДанныеДатойВводаВСистему") = Ложь Тогда
		Возврат ДатаДокумента;
	ИначеЕсли ДатаДокумента < фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_НачалоОтраженияФактическихДанныхДатойВводаВСистему") Тогда
		Возврат ДатаДокумента;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_ДатыВводаДокументовВСистему.Документ,
			|	фин_ДатыВводаДокументовВСистему.ДатаВвода
			|ИЗ
			|	РегистрСведений.фин_ДатыВводаДокументовВСистему КАК фин_ДатыВводаДокументовВСистему
			|ГДЕ
			|	фин_ДатыВводаДокументовВСистему.Документ = &Документ";
		
		Запрос.УстановитьПараметр("Документ", Документ);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.ДатаВвода;
		Иначе
			ДатаДокумента 	= ТекущаяДата();
			НаборЗаписей 	= РегистрыСведений.фин_ДатыВводаДокументовВСистему.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(Документ.Ссылка);
			НЗ = НаборЗаписей.Добавить();
			НЗ.Документ = Документ.Ссылка;
			НЗ.ДатаВвода = ДатаДокумента;
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось сохранить дату ввода в систему для документа "+Строка(Документ.Ссылка)+"
				|	"+ОписаниеОшибки());
			КонецПопытки;
			Возврат ДатаДокумента;
		КонецЕсли;
	КонецЕсли;
КонецФункции


Функция ПолучитьПравилаСхемы(Шаблон,Дата) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Правила.Владелец,
		|	Правила.Ссылка,
		|	Правила.ВалютаИсточник,
		|	Правила.ВалютаТипИсточника,
		|	Правила.КоличествоИсточник,
		|	Правила.КоличествоТипИсточника,
		|	Правила.КонтрагентИсточник,
		|	Правила.КонтрагентТипИсточника,
		|	Правила.НоменклатураИсточник,
		|	Правила.НоменклатураТипИсточника,
		|	Правила.ПроектИсточник,
		|	Правила.ПроектТипИсточника,
		|	Правила.ФинансовыйПоказательИсточник,
		|	Правила.ФинансовыйПоказательТипИсточника,
		|	Правила.СуммаИсточник,
		|	Правила.СуммаТипИсточника,
		|	Правила.УправленческоеПодразделениеИсточник,
		|	Правила.УправленческоеПодразделениеТипИсточника,
		|	Правила.УправленческоеПодразделениеОбязательный,
		|	Правила.ПроектОбязательный,
		|	Правила.КонтрагентОбязательный,
		|	Правила.НоменклатураОбязательный,
		|	Правила.Разрез1ТипИсточника,
		|	Правила.Разрез2ТипИсточника,
		|	Правила.Разрез3ТипИсточника,
		|	Правила.Разрез4ТипИсточника,
		|	Правила.Разрез5ТипИсточника,
		|	Правила.Разрез6ТипИсточника,
		|	Правила.Разрез7ТипИсточника,
		|	Правила.Разрез8ТипИсточника,
		|	Правила.Разрез9ТипИсточника,
		|	Правила.Разрез10ТипИсточника,
		|	Правила.Разрез1Обязательный,
		|	Правила.Разрез2Обязательный,
		|	Правила.Разрез3Обязательный,
		|	Правила.Разрез4Обязательный,
		|	Правила.Разрез5Обязательный,
		|	Правила.Разрез6Обязательный,
		|	Правила.Разрез7Обязательный,
		|	Правила.Разрез8Обязательный,
		|	Правила.Разрез9Обязательный,
		|	Правила.Разрез10Обязательный,
		|	Правила.Разрез1Источник,
		|	Правила.Разрез2Источник,
		|	Правила.Разрез3Источник,
		|	Правила.Разрез4Источник,
		|	Правила.Разрез5Источник,
		|	Правила.Разрез6Источник,
		|	Правила.Разрез7Источник,
		|	Правила.Разрез8Источник,
		|	Правила.Разрез9Источник,
		|	Правила.Разрез10Источник,
		|	Правила.ПрогнозноеЗначение,
		|	Правила.Сторно,
		|	Правила.ВидДанных,
		|	Правила.ИмяИсточника,
		|	Правила.ПредставлениеИсточника,
		|	Правила.СпособИспользования,
		|	Правила.Условие,
		|	Правила.ШаблонПроводок,
		|	Правила.Порядок КАК Порядок
		|ИЗ
		|	Справочник.фин_ПравилаОтраженияФактическихДанных КАК Правила
		|ГДЕ
		|	(Правила.Владелец = &Шаблон
		|			ИЛИ Правила.Владелец.Владелец = &Шаблон)
		|	И Правила.ПометкаУдаления = ЛОЖЬ
		|	И Правила.ПоФинансовомуПоказателю = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ГруппаПравил,
		|	Правила.Ссылка,
		|	Правила.ВалютаИсточник,
		|	Правила.ВалютаТипИсточника,
		|	Правила.КоличествоИсточник,
		|	Правила.КоличествоТипИсточника,
		|	Правила.КонтрагентИсточник,
		|	Правила.КонтрагентТипИсточника,
		|	Правила.НоменклатураИсточник,
		|	Правила.НоменклатураТипИсточника,
		|	Правила.ПроектИсточник,
		|	Правила.ПроектТипИсточника,
		|	Правила.ФинансовыйПоказательИсточник,
		|	Правила.ФинансовыйПоказательТипИсточника,
		|	Правила.СуммаИсточник,
		|	Правила.СуммаТипИсточника,
		|	Правила.УправленческоеПодразделениеИсточник,
		|	Правила.УправленческоеПодразделениеТипИсточника,
		|	Правила.УправленческоеПодразделениеОбязательный,
		|	Правила.ПроектОбязательный,
		|	Правила.КонтрагентОбязательный,
		|	Правила.НоменклатураОбязательный,
		|	Правила.Разрез1ТипИсточника,
		|	Правила.Разрез2ТипИсточника,
		|	Правила.Разрез3ТипИсточника,
		|	Правила.Разрез4ТипИсточника,
		|	Правила.Разрез5ТипИсточника,
		|	Правила.Разрез6ТипИсточника,
		|	Правила.Разрез7ТипИсточника,
		|	Правила.Разрез8ТипИсточника,
		|	Правила.Разрез9ТипИсточника,
		|	Правила.Разрез10ТипИсточника,
		|	Правила.Разрез1Обязательный,
		|	Правила.Разрез2Обязательный,
		|	Правила.Разрез3Обязательный,
		|	Правила.Разрез4Обязательный,
		|	Правила.Разрез5Обязательный,
		|	Правила.Разрез6Обязательный,
		|	Правила.Разрез7Обязательный,
		|	Правила.Разрез8Обязательный,
		|	Правила.Разрез9Обязательный,
		|	Правила.Разрез10Обязательный,
		|	Правила.Разрез1Источник,
		|	Правила.Разрез2Источник,
		|	Правила.Разрез3Источник,
		|	Правила.Разрез4Источник,
		|	Правила.Разрез5Источник,
		|	Правила.Разрез6Источник,
		|	Правила.Разрез7Источник,
		|	Правила.Разрез8Источник,
		|	Правила.Разрез9Источник,
		|	Правила.Разрез10Источник,
		|	Правила.ПрогнозноеЗначение,
		|	Правила.Сторно,
		|	Правила.ВидДанных,
		|	Правила.ИмяИсточника,
		|	Правила.ПредставлениеИсточника,
		|	Правила.СпособИспользования,
		|	Правила.Условие,
		|	Правила.ШаблонПроводок,
		|	Правила.Порядок
		|ИЗ
		|	Справочник.фин_ПравилаОтраженияФактическихДанных КАК Правила
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.фин_ПериодыПримененияПравилПоФинансовымПоказателям КАК Периоды
		|		ПО Правила.Ссылка = Периоды.Правило
		|			И (Периоды.ДатаНачала <= &Дата)
		|			И (Периоды.ДатаОкончания >= &Дата
		|				ИЛИ Периоды.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
		|ГДЕ
		|	Правила.Владелец = &ОбъектИБ
		|	И Правила.ФинансовыйПоказательТипИсточника = ЗНАЧЕНИЕ(Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ФиксированноеЗначение)
		|	И Правила.ФинансовыйПоказательИсточник <> ЗНАЧЕНИЕ(Справочник.фин_ФинансовыеПоказатели.ПустаяСсылка)
		|	И Правила.ПоФинансовомуПоказателю
		|	И Правила.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";

	Запрос.УстановитьПараметр("Дата", Дата);
	Если НЕ (ТипЗнч(Шаблон)=Тип("СправочникСсылка.фин_ВидыДокументов") ИЛИ ТипЗнч(Шаблон)=Тип("СправочникСсылка.фин_КлассификаторРегистров")) Тогда
		Запрос.УстановитьПараметр("Шаблон", Шаблон);
		Запрос.УстановитьПараметр("ОбъектИБ", Шаблон.Владелец);
		Запрос.УстановитьПараметр("ГруппаПравил", Шаблон);
	Иначе
		Запрос.УстановитьПараметр("Шаблон", Неопределено);
		Запрос.УстановитьПараметр("ОбъектИБ", Шаблон);
		Запрос.УстановитьПараметр("ГруппаПравил", Шаблон);
	КонецЕсли;

	Результат = Запрос.Выполнить();

	Возврат Результат.Выгрузить();
КонецФункции

Функция ПолучитьГруппыПравилСхемы(Шаблон) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Шаблон КАК Группа,
		|	NULL КАК ВидДанных,
		|	NULL КАК ИмяИсточника,
		|	NULL КАК ПредставлениеИсточника,
		|	NULL КАК СпособИспользования,
		|	NULL КАК Условие,
		|	NULL КАК Порядок
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	фин_ГруппыПравилОтраженияФактическихДанных.Ссылка,
		|	фин_ГруппыПравилОтраженияФактическихДанных.ВидДанных,
		|	фин_ГруппыПравилОтраженияФактическихДанных.ИмяИсточника,
		|	фин_ГруппыПравилОтраженияФактическихДанных.ПредставлениеИсточника,
		|	фин_ГруппыПравилОтраженияФактическихДанных.СпособИспользования,
		|	фин_ГруппыПравилОтраженияФактическихДанных.Условие,
		|	фин_ГруппыПравилОтраженияФактическихДанных.Порядок
		|ИЗ
		|	Справочник.фин_ГруппыПравилОтраженияФактическихДанных КАК фин_ГруппыПравилОтраженияФактическихДанных
		|ГДЕ
		|	фин_ГруппыПравилОтраженияФактическихДанных.Владелец = &Шаблон
		|	И фин_ГруппыПравилОтраженияФактическихДанных.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";

	Запрос.УстановитьПараметр("Шаблон", Шаблон);

	Результат = Запрос.Выполнить();

	Возврат Результат.Выгрузить();
КонецФункции

Функция ПолучитьНастройкиСтрокиШаблона(Идентификатор,НаборНастроек) Экспорт
	Возврат НаборНастроек.НайтиСтроки(Новый Структура("ИдентификаторСтроки",Идентификатор))[0];	
КонецФункции

//Процедура ОтразитьВОборотахПоБюджетам
//
Процедура ОтразитьВОборотахПоБюджетам(Шаблон,НаборДвиженийОбороты,Источник,ЗначенияДополнительныхРеквизитов,ВыборкаВидыРаспределения,Отказ,ТаблицаПереданныхДвижений,ВестиУчетПоПроектам,СписокРазрезовУчета,РегистрацияПрогнозныхДанных=Ложь,НаборДвиженийПрогноз=Неопределено,ПолучатьОрганизациюИзСтрокНабора=Ложь)
	КЭШСписков = Неопределено;
	
	НаборПолей = Новый Массив;
	НаборПолей.Добавить("ФинансовыйПоказатель");
	Для Каждого РазрезУчета Из СписокРазрезовУчета Цикл
		НаборПолей.Добавить(фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезУчета.Значение));
	КонецЦикла;
	НаборПолей.Добавить("Валюта");
	НаборПолей.Добавить("Количество");
	НаборПолей.Добавить("Сумма");
	ТаблицаДвижений = НаборДвиженийОбороты.ВыгрузитьКолонки();
	ТаблицаДвижений.Колонки.Удалить("Проект");
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникаПроектов());
	МассивТипов.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникВидыРаспределенияПоПроектам());
	ТаблицаДвижений.Колонки.Добавить("Проект",Новый ОписаниеТипов(МассивТипов));
	Для Каждого РазрезУчета Из СписокРазрезовУчета Цикл
		Имя = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезУчета.Значение);
		Если Найти(Имя,"Разрез")<>0 Тогда
			ТаблицаДвижений.Колонки.Добавить(Имя,фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(РазрезУчета.Значение).ТипЗначения);
		КонецЕсли;	
	КонецЦикла;
	//ТаблицаДвижений.Колонки.Добавить("НомерСтрокиИсточника",Новый ОписаниеТипов("Число"));
	ТаблицаДвижений.Колонки.Добавить("ПредставлениеИсточника",Новый ОписаниеТипов("Строка"));
	ТаблицаДвижений.Колонки.Добавить("ПрогнозноеЗначение",Новый ОписаниеТипов("Булево"));
	Если Шаблон=Перечисления.фин_АльтернативныеСпособыОтраженияФактическихДанных.ПоДокументамПланированияДвиженийДенежныхСредств Тогда
		ТаблицаДвиженийКазначейства = Неопределено;
		СписокРасходных = Новый Массив;
		СписокРасходных.Добавить("ПлатежныйОрдерСписаниеДенежныхСредств");
		СписокРасходных.Добавить("ПлатежноеПоручениеИсходящее");
		СписокРасходных.Добавить("РасходныйКассовыйОрдер");
		СписокПриходных = Новый Массив;
		СписокПриходных.Добавить("ПлатежныйОрдерПоступлениеДенежныхСредств");
		СписокПриходных.Добавить("ПлатежноеПоручениеВходящее");
		СписокПриходных.Добавить("ПриходныйКассовыйОрдер");
		Если СписокРасходных.Найти(Источник.Метаданные().Имя)<>Неопределено Тогда
			Если НЕ ТаблицаПереданныхДвижений.Свойство("ден_РезервыПоБюджетамПодВыполнениеЗаявок",ТаблицаДвиженийКазначейства) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При проведении документа "+Источник.Ссылка+" по данным бюджетирования
				| 	возникла ошибка при исполнении шаблона "+Шаблон+": 
				|	не найден набор движений документа РезервыПоБюджетамПодВыполнениеЗаявок",,,,Отказ);
				Возврат;
			КонецЕсли;
			ТаблицаДвиженийКазначейства.Колонки.ЗаявкаНаРасходование.Имя = "ДокументПланирования";
		ИначеЕсли СписокПриходных.Найти(Источник.Метаданные().Имя)<>Неопределено Тогда
			Если НЕ ТаблицаПереданныхДвижений.Свойство("ден_ПредполагаемыеПоступленияПоБюджетам",ТаблицаДвиженийКазначейства) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При проведении документа "+Источник.Ссылка+" по данным бюджетирования
				| 	возникла ошибка при исполнении шаблона "+Шаблон+": 
				|	не найден набор движений документа ПредполагаемыеПоступленияПоБюджетам",,,,Отказ);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если ТаблицаДвиженийКазначейства<>Неопределено Тогда
			ТаблицаДвиженийКазначейства.ЗаполнитьЗначения(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий(),"Сценарий");
			Для Каждого СтрокаКазначейство Из ТаблицаДвиженийКазначейства Цикл
				НоваяСтрока = ТаблицаДвижений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКазначейство);
				Для Каждого КолонкаТЗ Из ТаблицаДвижений.Колонки Цикл
					Если Найти(КолонкаТЗ.Имя,"Разрез")<>0 И КолонкаТЗ.Имя<>"ДополнительныеРазрезы" Тогда
						НоваяСтрока[КолонкаТЗ.Имя] = СтрокаКазначейство.ДополнительныеРазрезы[КолонкаТЗ.Имя];
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	Иначе
		ГруппыШаблонов = ПолучитьГруппыПравилСхемы(Шаблон);
		НастройкиПравил = ПолучитьПравилаСхемы(Шаблон,Источник.Дата);
		СписокРазрезовСНастройкойОбязательности = Новый Массив;
		СписокРазрезовСНастройкойОбязательности.Добавить("УправленческоеПодразделение");
		СписокРазрезовСНастройкойОбязательности.Добавить("Проект");
		СписокРазрезовСНастройкойОбязательности.Добавить("Контрагент");
		СписокРазрезовСНастройкойОбязательности.Добавить("Номенклатура");
		СписокРазрезовСНастройкойОбязательности.Добавить("Разрез1");
		СписокРазрезовСНастройкойОбязательности.Добавить("Разрез2");
		СписокРазрезовСНастройкойОбязательности.Добавить("Разрез3");
		СписокРазрезовСНастройкойОбязательности.Добавить("Разрез4");
		СписокРазрезовСНастройкойОбязательности.Добавить("Разрез5");
		СписокРазрезовСНастройкойОбязательности.Добавить("Разрез6");
		СписокРазрезовСНастройкойОбязательности.Добавить("Разрез7");
		СписокРазрезовСНастройкойОбязательности.Добавить("Разрез8");
		СписокРазрезовСНастройкойОбязательности.Добавить("Разрез9");
		СписокРазрезовСНастройкойОбязательности.Добавить("Разрез10");
		СтрокиОбработанныеПоВышестоящимГруппамПравил = Новый ТаблицаЗначений;
		СтрокиОбработанныеПоВышестоящимГруппамПравил.Колонки.Добавить("ВидДанных");
		СтрокиОбработанныеПоВышестоящимГруппамПравил.Колонки.Добавить("ИмяИсточника");
		СтрокиОбработанныеПоВышестоящимГруппамПравил.Колонки.Добавить("СтрокаИсточника");
		Для Каждого ГруппаШаблонов Из ГруппыШаблонов Цикл
			мШаблоныГруппы = НастройкиПравил.НайтиСтроки(Новый Структура("Владелец",ГруппаШаблонов.Группа));
			ШаблоныГруппы = НастройкиПравил.СкопироватьКолонки();
			Для Каждого СтрокаШаблон Из мШаблоныГруппы Цикл
				Если СтрокаШаблон.ПрогнозноеЗначение И НЕ РегистрацияПрогнозныхДанных Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаШаблон.СпособИспользования <> Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиНеНайденУдовлетворяющийУсловиюШаблон Тогда
					НоваяСтрокаШаблона = ШаблоныГруппы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаШаблона,СтрокаШаблон);
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаШаблон Из мШаблоныГруппы Цикл
				Если СтрокаШаблон.ПрогнозноеЗначение И НЕ РегистрацияПрогнозныхДанных Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаШаблон.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиНеНайденУдовлетворяющийУсловиюШаблон Тогда
					НоваяСтрокаШаблона = ШаблоныГруппы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаШаблона,СтрокаШаблон);
				КонецЕсли;
			КонецЦикла;
			ОтраженныеСтроки = Новый Массив;
			Если ГруппаШаблонов.Группа = Шаблон Тогда
				Отражено = Ложь;
				Для Каждого Правило Из ШаблоныГруппы Цикл
					Если Правило.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента Тогда
						ВыполнитьОтражениеПоСтрокеГруппыШаблонов(Источник,ТаблицаДвижений,Шаблон,Правило,НаборПолей,СписокРазрезовСНастройкойОбязательности,ЗначенияДополнительныхРеквизитов,КЭШСписков,Правило.ВидДанных,"шапка документа",,,,Отказ,Отражено);
					ИначеЕсли Правило.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти Тогда	
						ИмяТабличнойЧасти 	= Правило.ИмяИсточника;
						Попытка
							мТабличнаяЧасть 		= Источник[ИмяТабличнойЧасти];
						Исключение
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При проведении документа "+Источник.Ссылка+" по данным бюджетирования
							| 	возникла ошибка при исполнении шаблона "+Шаблон+", правило "+Правило.Ссылка+": 
							|	не найдена табличная часть документа "+ИмяТабличнойЧасти,,,,Отказ);
							Возврат;
						КонецПопытки;
						ТабличнаяЧасть = мТабличнаяЧасть.Выгрузить();
						Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
							ПредставлениеИсточника	= "табличной части """+Источник.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним+""", строка № "+Строка(СтрокаТабличнойЧасти.НомерСтроки);
							ВыполнитьОтражениеПоСтрокеГруппыШаблонов(Источник,ТаблицаДвижений,Шаблон,Правило,НаборПолей,СписокРазрезовСНастройкойОбязательности,ЗначенияДополнительныхРеквизитов,КЭШСписков,Правило.ВидДанных,ПредставлениеИсточника,СтрокаТабличнойЧасти.НомерСтроки,СтрокаТабличнойЧасти,ИмяТабличнойЧасти,Отказ,,ОтраженныеСтроки);
						КонецЦикла;
						Если ОтраженныеСтроки.Количество()>0 Тогда
							Отражено = Истина;
						КонецЕсли;
					ИначеЕсли Правило.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах Тогда	
						ИмяТабличнойЧасти 	= Сред(Правило.ИмяИсточника,Найти(Правило.ИмяИсточника,".")+1);
						Попытка
							ТабличнаяЧасть = Неопределено;
							Если НЕ ТаблицаПереданныхДвижений.Свойство(ИмяТабличнойЧасти,ТабличнаяЧасть) Тогда
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При проведении документа "+Источник.Ссылка+" по данным бюджетирования
								| 	возникла ошибка при исполнении шаблона "+Шаблон+", правило "+Правило.Ссылка+": 
								|	не найден набор движений документа "+ИмяТабличнойЧасти,,,,Отказ);
								Возврат;
							КонецЕсли;
							Если ТабличнаяЧасть.Количество() = 0 Тогда
								Если Найти(Правило.ИмяИсточника,"РегистрБухгалтерии.") Тогда
									ОбъектНабора = РегистрыБухгалтерии;
								ИначеЕсли Найти(Правило.ИмяИсточника,"РегистрНакопления.") Тогда
									ОбъектНабора = РегистрыНакопления;
								ИначеЕсли Найти(Правило.ИмяИсточника,"РегистрСведений.") Тогда
									ОбъектНабора = РегистрыСведений;
								ИначеЕсли Найти(Правило.ИмяИсточника,"РегистрРасчета.") Тогда
									ОбъектНабора = РегистрыРасчета;
								КонецЕсли;
								НаборЗаписейДвижений = ОбъектНабора[ИмяТабличнойЧасти].СоздатьНаборЗаписей();
								НаборЗаписейДвижений.Отбор.Регистратор.Установить(Источник);
								НаборЗаписейДвижений.Прочитать();
								ТабличнаяЧасть = НаборЗаписейДвижений.Выгрузить();
							КонецЕсли;
						Исключение
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При проведении документа "+Источник.Ссылка+" по данным бюджетирования
							| 	возникла ошибка при исполнении шаблона "+Шаблон+", правило "+Правило.Ссылка+": 
							|	не найден набор движений документа "+ИмяТабличнойЧасти,,,,Отказ);
							Возврат;
						КонецПопытки;
						СинонимРегистра = "";
						Для Каждого РегистрДвижений Из Источник.Метаданные().Движения Цикл
							Если РегистрДвижений.Имя = ИмяТабличнойЧасти Тогда
								СинонимРегистра = РегистрДвижений.Синоним;
							КонецЕсли;
						КонецЦикла;
						Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
							ПредставлениеИсточника	= "набору движений """+СинонимРегистра+""", строка № "+Строка(ТабличнаяЧасть.Индекс(СтрокаТабличнойЧасти)+1);
							ВыполнитьОтражениеПоСтрокеГруппыШаблонов(Источник,ТаблицаДвижений,Шаблон,Правило,НаборПолей,СписокРазрезовСНастройкойОбязательности,ЗначенияДополнительныхРеквизитов,КЭШСписков,Правило.ВидДанных,ПредставлениеИсточника,ТабличнаяЧасть.Индекс(СтрокаТабличнойЧасти)+1,СтрокаТабличнойЧасти,ИмяТабличнойЧасти,Отказ,,ОтраженныеСтроки,?(ПолучатьОрганизациюИзСтрокНабора И ТабличнаяЧасть.Колонки.Найти("Организация")<>Неопределено,СтрокаТабличнойЧасти.Организация,Неопределено));
						КонецЦикла;
						Если ОтраженныеСтроки.Количество()>0 Тогда
							Отражено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
			 	Если ЗначениеЗаполнено(ГруппаШаблонов.Условие) Тогда
					Если ГруппаШаблонов.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента И Не усд_ПроцедурыСогласованияДокументов.УсловиеПоСтрокеВыполняется(ГруппаШаблонов.Услвоеи,Источник.Ссылка,,,Источник.Ссылка,КЭШСписков) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если ГруппаШаблонов.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента Тогда
					Если ГруппаШаблонов.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиУдовлетворяетУсловию ИЛИ ГруппаШаблонов.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиНеНайденУдовлетворяющийУсловиюШаблон Тогда
						Если СтрокиОбработанныеПоВышестоящимГруппамПравил.НайтиСтроки(Новый Структура("ВидДанных",ГруппаШаблонов.ВидДанных)).Количество()>0 Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					Если ГруппаШаблонов.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиУдовлетворяетУсловию Тогда
						НС = СтрокиОбработанныеПоВышестоящимГруппамПравил.Добавить();
						НС.ВидДанных 		= ГруппаШаблонов.ВидДанных;
					КонецЕсли;
					ВыполнитьОтражениеПоГруппеШаблонов(Источник,ТаблицаДвижений,Шаблон,ШаблоныГруппы,НастройкиПравил,НаборПолей,СписокРазрезовСНастройкойОбязательности,ЗначенияДополнительныхРеквизитов,КЭШСписков,ГруппаШаблонов.ВидДанных,"шапка документа",,,,Отказ,Отражено);
				ИначеЕсли ГруппаШаблонов.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти Тогда 
					ИмяТабличнойЧасти 	= ГруппаШаблонов.ИмяИсточника;
					Попытка
						мТабличнаяЧасть 		= Источник[ИмяТабличнойЧасти];
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При проведении документа "+Источник.Ссылка+" по данным бюджетирования
						| 	возникла ошибка при исполнении шаблона "+Шаблон+", правило "+Правило.Ссылка+": 
						|	не найдена табличная часть документа "+ИмяТабличнойЧасти,,,,Отказ);
						Возврат;
					КонецПопытки;
					ТабличнаяЧасть = мТабличнаяЧасть.Выгрузить();
					Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
						Если (ГруппаШаблонов.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ВсегдаЕслиУдовлетворяетУсловию ИЛИ ГруппаШаблонов.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиУдовлетворяетУсловию) И Не усд_ПроцедурыСогласованияДокументов.УсловиеПоСтрокеВыполняется(ГруппаШаблонов.Условие,Источник.Ссылка,СтрокаТабличнойЧасти,,Источник.Ссылка,КЭШСписков) Тогда
							Продолжить;
						КонецЕсли;
						Если ГруппаШаблонов.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиУдовлетворяетУсловию ИЛИ ГруппаШаблонов.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиНеНайденУдовлетворяющийУсловиюШаблон Тогда
							Если СтрокиОбработанныеПоВышестоящимГруппамПравил.НайтиСтроки(Новый Структура("ВидДанных,ИмяИсточника,СтрокаИсточника",ГруппаШаблонов.ВидДанных,ГруппаШаблонов.ИмяИсточника,ТабличнаяЧасть.Индекс(СтрокаТабличнойЧасти))).Количество()>0 Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						Если ГруппаШаблонов.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиУдовлетворяетУсловию Тогда
							НС = СтрокиОбработанныеПоВышестоящимГруппамПравил.Добавить();
							НС.ВидДанных 		= ГруппаШаблонов.ВидДанных;
							НС.ИмяИсточника 	= ГруппаШаблонов.ИмяИсточника;
							НС.СтрокаИсточника 	= ТабличнаяЧасть.Индекс(СтрокаТабличнойЧасти);
						КонецЕсли;
						ПредставлениеИсточника	= "табличной части """+Источник.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним+""", строка № "+Строка(СтрокаТабличнойЧасти.НомерСтроки);
						ВыполнитьОтражениеПоГруппеШаблонов(Источник,ТаблицаДвижений,Шаблон,ШаблоныГруппы,НастройкиПравил,НаборПолей,СписокРазрезовСНастройкойОбязательности,ЗначенияДополнительныхРеквизитов,КЭШСписков,ГруппаШаблонов.ВидДанных,ПредставлениеИсточника,СтрокаТабличнойЧасти.НомерСтроки,СтрокаТабличнойЧасти,ИмяТабличнойЧасти,Отказ,,ОтраженныеСтроки);
					КонецЦикла;
				Иначе	
					ИмяТабличнойЧасти 	= Сред(ГруппаШаблонов.ИмяИсточника,Найти(ГруппаШаблонов.ИмяИсточника,".")+1);
					Попытка
						ТабличнаяЧасть = Неопределено;
						Если НЕ ТаблицаПереданныхДвижений.Свойство(ИмяТабличнойЧасти,ТабличнаяЧасть) Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При проведении документа "+Источник.Ссылка+" по данным бюджетирования
							| 	возникла ошибка при исполнении шаблона "+Шаблон+", группа шаблонов "+ГруппаШаблонов.Представление+": 
							|	не найден набор движений документа "+ИмяТабличнойЧасти,,,,Отказ);
							Возврат;
						КонецЕсли;
						Если ТабличнаяЧасть.Количество() = 0 Тогда
							Если Найти(ГруппаШаблонов.ИмяИсточника,"РегистрБухгалтерии.") Тогда
								ОбъектНабора = РегистрыБухгалтерии;
							ИначеЕсли Найти(ГруппаШаблонов.ИмяИсточника,"РегистрНакопления.") Тогда
								ОбъектНабора = РегистрыНакопления;
							ИначеЕсли Найти(ГруппаШаблонов.ИмяИсточника,"РегистрСведений.") Тогда
								ОбъектНабора = РегистрыСведений;
							ИначеЕсли Найти(ГруппаШаблонов.ИмяИсточника,"РегистрРасчета.") Тогда
								ОбъектНабора = РегистрыРасчета;
							КонецЕсли;
							НаборЗаписейДвижений = ОбъектНабора[ИмяТабличнойЧасти].СоздатьНаборЗаписей();
							НаборЗаписейДвижений.Отбор.Регистратор.Установить(Источник);
							НаборЗаписейДвижений.Прочитать();
							ТабличнаяЧасть = НаборЗаписейДвижений.Выгрузить();
						КонецЕсли;
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При проведении документа "+Источник.Ссылка+" по данным бюджетирования
						| 	возникла ошибка при исполнении шаблона "+Шаблон+", группа шаблонов "+ГруппаШаблонов.Представление+": 
						|	не найден набор движений документа "+ИмяТабличнойЧасти,,,,Отказ);
						Возврат;
					КонецПопытки;
					СинонимРегистра = "";
					Для Каждого РегистрДвижений Из Источник.Метаданные().Движения Цикл
						Если РегистрДвижений.Имя = ИмяТабличнойЧасти Тогда
							СинонимРегистра = РегистрДвижений.Синоним;
						КонецЕсли;
					КонецЦикла;
					Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
						Если (ГруппаШаблонов.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ВсегдаЕслиУдовлетворяетУсловию ИЛИ ГруппаШаблонов.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиУдовлетворяетУсловию) И Не усд_ПроцедурыСогласованияДокументов.УсловиеПоСтрокеВыполняется(ГруппаШаблонов.Условие,Источник.Ссылка,СтрокаТабличнойЧасти,,Источник.Ссылка,КЭШСписков) Тогда
							Продолжить;
						КонецЕсли;
						Если ГруппаШаблонов.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиУдовлетворяетУсловию ИЛИ ГруппаШаблонов.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиНеНайденУдовлетворяющийУсловиюШаблон Тогда
							Если СтрокиОбработанныеПоВышестоящимГруппамПравил.НайтиСтроки(Новый Структура("ВидДанных,ИмяИсточника,СтрокаИсточника",ГруппаШаблонов.ВидДанных,ГруппаШаблонов.ИмяИсточника,ТабличнаяЧасть.Индекс(СтрокаТабличнойЧасти))).Количество()>0 Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						Если ГруппаШаблонов.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиУдовлетворяетУсловию Тогда
							НС = СтрокиОбработанныеПоВышестоящимГруппамПравил.Добавить();
							НС.ВидДанных 		= ГруппаШаблонов.ВидДанных;
							НС.ИмяИсточника 	= ГруппаШаблонов.ИмяИсточника;
							НС.СтрокаИсточника 	= ТабличнаяЧасть.Индекс(СтрокаТабличнойЧасти);
						КонецЕсли;
						ПредставлениеИсточника	= "набору движений """+СинонимРегистра+""", строка № "+Строка(ТабличнаяЧасть.Индекс(СтрокаТабличнойЧасти)+1);
						ВыполнитьОтражениеПоГруппеШаблонов(Источник,ТаблицаДвижений,Шаблон,ШаблоныГруппы,НастройкиПравил,НаборПолей,СписокРазрезовСНастройкойОбязательности,ЗначенияДополнительныхРеквизитов,КЭШСписков,ГруппаШаблонов.ВидДанных,ПредставлениеИсточника,ТабличнаяЧасть.Индекс(СтрокаТабличнойЧасти)+1,СтрокаТабличнойЧасти,ИмяТабличнойЧасти,Отказ,,ОтраженныеСтроки,?(ПолучатьОрганизациюИзСтрокНабора И ТабличнаяЧасть.Колонки.Найти("Организация")<>Неопределено,СтрокаТабличнойЧасти.Организация,Неопределено));
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ВестиУчетПоПроектам Тогда
		РаспределитьФактическиеДанныеПоПроектам(ТаблицаДвижений, ВыборкаВидыРаспределения);
	КонецЕсли;
	Статьи = ТаблицаДвижений.ВыгрузитьКолонку("ФинансовыйПоказатель");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РазрезыУчета.Ссылка КАК Статья,
		|	РазрезыУчета.Измерение
		|ИЗ
		|	Справочник.фин_ФинансовыеПоказатели.РазрезыУчета КАК РазрезыУчета
		|ГДЕ
		|	РазрезыУчета.Ссылка В (&Статьи)";

	Запрос.УстановитьПараметр("Статьи", Статьи);

	РазрезыПоСтатьям = Запрос.Выполнить().Выгрузить();

	Для Каждого СтрокаНовыхДвижений Из ТаблицаДвижений Цикл
		Если ЗначениеЗаполнено(СтрокаНовыхДвижений.ФинансовыйПоказатель) Тогда
			СтруктураРазрезовСтроки = Новый Структура;
			Для Каждого РазрезУчета Из СписокРазрезовУчета Цикл
				Имя = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезУчета.Значение);
				Если Имя = "Контрагент" ИЛИ Имя = "Номенклатура" ИЛИ Найти(Имя,"Разрез")<>0 Тогда
					Если РазрезыПоСтатьям.НайтиСтроки(Новый Структура("Статья,Измерение",СтрокаНовыхДвижений.ФинансовыйПоказатель,Перечисления.фин_ФактическиеПоказателиБюджетирования[Имя])).Количество()=0 Тогда
						СтрокаНовыхДвижений[Имя]="";
					КонецЕсли;
				КонецЕсли;
				Если Найти(Имя,"Разрез")<>0 Тогда
					СтруктураРазрезовСтроки.Вставить(Имя,СтрокаНовыхДвижений[Имя]);
				КонецЕсли;
			КонецЦикла;
			СтрокаНовыхДвижений.ДополнительныеРазрезы = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОпределитьПозициюКлассификатораПоСтруктуре(СтруктураРазрезовСтроки);
			Если (НЕ СтрокаНовыхДвижений.ФинансовыйПоказатель.УчетПоКоличеству) И СтрокаНовыхДвижений.Количество <>0 Тогда
				СтрокаНовыхДвижений.Количество = 0;
			КонецЕсли;
			Если (НЕ СтрокаНовыхДвижений.ФинансовыйПоказатель.УчетПоСумме) И (СтрокаНовыхДвижений.ВалютнаяСумма <>0 ИЛИ ЗначениеЗаполнено(СтрокаНовыхДвижений.Валюта)) Тогда
				СтрокаНовыхДвижений.ВалютнаяСумма = 0;
				СтрокаНовыхДвижений.Валюта = "";
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаНовыхДвижений.ФинансовыйПоказатель) Тогда
			Если СтрокаНовыхДвижений.Количество = 0 И СтрокаНовыхДвижений.СуммаУпр = 0 И СтрокаНовыхДвижений.ВалютнаяСумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаНовыхДвижений.ПрогнозноеЗначение Тогда
				Если РегистрацияПрогнозныхДанных Тогда
					НоваяСтрока = НаборДвиженийПрогноз.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаНовыхДвижений);
					НоваяСтрока.Схема = Шаблон;
				КонецЕсли;
			Иначе
				НоваяСтрока = НаборДвиженийОбороты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаНовыхДвижений);
				НоваяСтрока.Схема = Шаблон;
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Регистрация "+?(СтрокаНовыхДвижений.ПрогнозноеЗначение И РегистрацияПрогнозныхДанных,"прогнозных","фактических")+" данных по бюджетам на основании документа """+Строка(Источник)+""":
			|	при выполнении шаблона """+Строка(Шаблон)+""" (правило: "+СтрокаНовыхДвижений.Правило+")
			|	по "+СтрокаНовыхДвижений.ИмяИсточника+":
			|	не определен финансовый показатель - отражение данной операции по фактическим данным не выполнено!");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ОтразитьВОборотахПоБюджетам

Процедура ВыполнитьОтражениеПоГруппеШаблонов(Источник,ТаблицаДвижений,Шаблон,ШаблоныГруппы,НастройкиШаблона,НаборПолей,СписокРазрезовСНастройкойОбязательности,ЗначенияДополнительныхРеквизитов,КЭШСписков,ВидДанных,ПредставлениеИсточника,НомерСтрокиИсточника=0,СтрокаТабличнойЧасти=Неопределено,ИмяТаблицыИсточника="",Отказ=Ложь,ПодходящееПравилоНайдено=Ложь,ОтраженныеСтроки = Неопределено,Организация = Неопределено)
	Для Каждого Правило Из ШаблоныГруппы Цикл
		ВыполнитьОтражениеПоСтрокеГруппыШаблонов(Источник,ТаблицаДвижений,Шаблон,Правило,НаборПолей,СписокРазрезовСНастройкойОбязательности,ЗначенияДополнительныхРеквизитов,КЭШСписков,ВидДанных,ПредставлениеИсточника,НомерСтрокиИсточника,СтрокаТабличнойЧасти,ИмяТаблицыИсточника,Отказ,ПодходящееПравилоНайдено,ОтраженныеСтроки,Организация);
	КонецЦикла;
КонецПроцедуры

Процедура ВыполнитьОтражениеПоСтрокеГруппыШаблонов(Источник,ТаблицаДвижений,Шаблон,Правило,НаборПолей,СписокРазрезовСНастройкойОбязательности,ЗначенияДополнительныхРеквизитов,КЭШСписков,ВидДанных,ПредставлениеИсточника,НомерСтрокиИсточника=0,СтрокаТабличнойЧасти=Неопределено,ИмяТаблицыИсточника="",Отказ=Ложь,ПодходящееПравилоНайдено=Ложь,ОтраженныеСтроки = Неопределено,Организация=Неопределено)
	Если Правило.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиУдовлетворяетУсловию Тогда
		Если ОтраженныеСтроки<>Неопределено Тогда
			Если ОтраженныеСтроки.Найти(НомерСтрокиИсточника)<>Неопределено Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если ПодходящееПравилоНайдено Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли Правило.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиНеНайденУдовлетворяющийУсловиюШаблон Тогда
		Если ОтраженныеСтроки<>Неопределено Тогда
			Если ОтраженныеСтроки.Найти(НомерСтрокиИсточника)<>Неопределено Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если ПодходящееПравилоНайдено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Правило.Условие) Тогда
		Если Не усд_ПроцедурыСогласованияДокументов.УсловиеПоСтрокеВыполняется(Правило.Условие,Источник.Ссылка,СтрокаТабличнойЧасти,,Источник.Ссылка,КЭШСписков) Тогда
			Возврат;
		ИначеЕсли Правило.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиУдовлетворяетУсловию Тогда
			ПодходящееПравилоНайдено = Истина;
			Если ОтраженныеСтроки<>Неопределено Тогда
				ОтраженныеСтроки.Добавить(НомерСтрокиИсточника);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	НоваяСтрока = ТаблицаДвижений.Добавить();
	НоваяСтрока.Правило 				= Правило.Ссылка;
	НоваяСтрока.ШаблонПроводок 			= Правило.ШаблонПроводок;
	НоваяСтрока.НомерСтрокиИсточника 	= НомерСтрокиИсточника;
	НоваяСтрока.ПредставлениеИсточника	= ПредставлениеИсточника;
	НоваяСтрока.ИмяИсточника			= ИмяТаблицыИсточника;
	НоваяСтрока.ВидДанных 				= Правило.ВидДанных;
	НоваяСтрока.ПрогнозноеЗначение		= Правило.ПрогнозноеЗначение;
	Если Организация <> Неопределено Тогда
		НоваяСтрока.Организация		= Организация;
	КонецЕсли;
	Для Каждого Поле Из НаборПолей Цикл
		ОписаниеТипаИсточника = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьОписаниеТиповДляРазрезаБюджетирования(Поле);
		ТипИсточника = Правило[Поле+"ТипИсточника"];
		Если Не ЗначениеЗаполнено(Правило[Поле+"Источник"]) Тогда
			Продолжить;
		КонецЕсли;
		Результат = Неопределено;
		Если ТипИсточника = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования И ЗначенияДополнительныхРеквизитов<>Неопределено Тогда
			Реквизит = Правило[Поле+"Источник"];
			СтрокиРеквизита = ЗначенияДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Реквизит",Реквизит));
			Если СтрокиРеквизита.Количество() >0 Тогда
				Результат = СтрокиРеквизита[0].Значение;
			КонецЕсли;
		ИначеЕсли ТипИсточника = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента Тогда
			Попытка
				мПолеИсточника = Правило[Поле+"Источник"];
				Результат = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьЗначениеПоПолю(мПолеИсточника,Источник,ОписаниеТипаИсточника,,,Источник);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При проведении документа "+Источник.Ссылка+" по данным бюджетирования
				| 	возникла ошибка при исполнении шаблона "+Шаблон+", правило "+Правило.Ссылка+": 
				|	не найден реквизит шапки документа "+Правило[Поле+"Источник"],,,,Отказ);
				Возврат;
			КонецПопытки;
		ИначеЕсли ТипИсточника = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения И НЕ ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента Тогда
			Попытка
				мПолеИсточника = Правило[Поле+"Источник"];
				Результат = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьЗначениеПоПолю(мПолеИсточника,СтрокаТабличнойЧасти,ОписаниеТипаИсточника,,,?(ТипИсточника = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения,Источник,Неопределено));
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При проведении документа "+Источник.Ссылка+" по данным бюджетирования
				| 	возникла ошибка при исполнении шаблона "+Шаблон+", правило "+Правило.Ссылка+": 
				|	не найден реквизит "+Правило[Поле+"Источник"]+?(ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти," табличной части "," набора движений ")+ИмяТаблицыИсточника+" документа",,,,Отказ);
				Возврат;
			КонецПопытки;
		ИначеЕсли ТипИсточника = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ФиксированноеЗначение Тогда
			Результат = Правило[Поле+"Источник"];
		ИначеЕсли ТипИсточника = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие Тогда
			Настройка = Правило[Поле+"Источник"];
			Если ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента И Настройка.ВидДанных<>ВидДанных Тогда
				Продолжить;
			КонецЕсли;
			Если ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти И Настройка.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах Тогда
				Продолжить;
			КонецЕсли;
			Если ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах И Настройка.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти Тогда
				Продолжить;
			КонецЕсли;
			ТаблицаПоказателей = Новый ТаблицаЗначений;
			ТаблицаПоказателей.Колонки.Добавить("Показатель");
			ТаблицаПоказателей.Колонки.Добавить("Значение");
			Для Каждого СтрокаНастройки Из Настройка.ЗаполнениеПоказателей Цикл
				НовыйПоказатель 			= ТаблицаПоказателей.Добавить();
				НовыйПоказатель.Показатель 	= СтрокаНастройки.ПоказательВарианта;
				Если СтрокаНастройки.ФиксированноеЗначение Тогда
					НовыйПоказатель.Значение = СтрокаНастройки.Значение;
				Иначе

					мПолеИсточника = СтрокаНастройки.РеквизитЗаполненияПоказателя;
					СтруктураПоля = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьСтруктуруИсточникаПоля(мПолеИсточника);
					Попытка
						ТипЗаполнения = фин_ПроцедурыМеханизмовБюджетирования.СоздатьОписаниеТипаПоказателя(СтрокаНастройки); 
						Если Настройка.ВариантПолученияСоответствийДляПервичныхДанных = Справочники.фин_ВариантыПолученияСоответствийДляПервичныхДанных.ПолучениеПодразделенияПоПодразделениюОрганизации Тогда
							Если НРег(СтрокаНастройки.ПоказательВарианта)=НРег("ПодразделениеОрганизации") Тогда
								ТипЗаполнения = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций");
							ИначеЕсли НРег(СтрокаНастройки.ПоказательВарианта)=НРег("Организация") Тогда
								ТипЗаполнения = Новый ОписаниеТипов("СправочникСсылка.Организации");
							КонецЕсли;
						КонецЕсли;
						НовыйПоказатель.Значение = ТипЗаполнения.ПривестиЗначение(фин_ПроцедурыМеханизмовБюджетирования.ПолучитьЗначениеПоПолю(мПолеИсточника,Источник,ТипЗаполнения,СтрокаТабличнойЧасти,ВидДанных <> Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента));
					Исключение
						Если ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента ИЛИ СтруктураПоля.Источник = "" Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При проведении документа "+Источник.Ссылка+" по данным бюджетирования
								| 	возникла ошибка при исполнении шаблона "+Шаблон+", правило "+Правило.Ссылка+": 
								|	не найден реквизит шапки документа "+мПолеИсточника+", заданный в соответствии
								|	для поля "+Поле,,,,Отказ);
						Иначе
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При проведении документа "+Источник.Ссылка+" по данным бюджетирования
								| 	возникла ошибка при исполнении шаблона "+Шаблон+", правило "+Правило.Ссылка+": 
								|	не найден реквизит "+СтруктураПоля.Поле+?(ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти," табличной части "," набора движений ")+СтруктураПоля.Источник+" документа",,,,Отказ);
						КонецЕсли;	
						Отказ = Истина;
						Возврат;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			Попытка
				Результат = РассчитатьСоответствие(Настройка,Настройка.ВариантПолученияСоответствийДляПервичныхДанных,ТаблицаПоказателей,Источник);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При проведении документа "+Источник.Ссылка+" по данным бюджетирования
				| 	возникла ошибка при исполнении шаблона "+Шаблон+", правило "+Правило.Ссылка+": 
				|	не выполнен расчет, заданный в соответствии для поля "+Поле,,,,Отказ);
				Возврат;
			КонецПопытки;
		ИначеЕсли ТипИсточника = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие Тогда
			Попытка
				мПолеИсточника = Правило[Поле+"Источник"];
				ЗначениеПоляДляРасчета = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьЗначениеПоПолю(мПолеИсточника,?(Найти(мПолеИсточника,":")=0,Источник,СтрокаТабличнойЧасти),ОписаниеТипаИсточника,,,?(ТипИсточника = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения,Источник,Неопределено));
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При проведении документа "+Источник.Ссылка+" по данным бюджетирования
				| 	возникла ошибка при исполнении шаблона "+Шаблон+", правило "+Правило.Ссылка+": 
				|	не найден реквизит "+Правило[Поле+"Источник"]+?(ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти," табличной части "," набора движений ")+ИмяТаблицыИсточника+" документа",,,,Отказ);
				Возврат;
			КонецПопытки;
			Настройка = Новый Структура("Разрез,ВариантПолученияСоответствийДляПервичныхДанных",Перечисления.фин_ФактическиеПоказателиБюджетирования[Поле],Справочники.фин_ВариантыПолученияСоответствийДляПервичныхДанных.ПоНастройкеСоответствийДляИзмеренийБюджетирования);
			ТаблицаПоказателей = Новый ТаблицаЗначений;
			ТаблицаПоказателей.Колонки.Добавить("Показатель");
			ТаблицаПоказателей.Колонки.Добавить("Значение");
			НовыйПоказатель 			= ТаблицаПоказателей.Добавить();
			НовыйПоказатель.Показатель 	= "ИсходноеЗначение";
			НовыйПоказатель.Значение	= ЗначениеПоляДляРасчета;
			Попытка
				Результат = РассчитатьСоответствие(Настройка,Настройка.ВариантПолученияСоответствийДляПервичныхДанных,ТаблицаПоказателей,Источник);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При проведении документа "+Источник.Ссылка+" по данным бюджетирования
				| 	возникла ошибка при исполнении шаблона "+Шаблон+", правило "+Правило.Ссылка+": 
				|	не выполнен расчет, заданный в соответствии для поля "+Поле,,,,Отказ);
				Возврат;
			КонецПопытки;
		КонецЕсли;
		Если СписокРазрезовСНастройкойОбязательности.Найти(Поле)<>Неопределено И Правило[Поле+"Обязательный"] И НЕ ЗначениеЗаполнено(Результат) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для отражения фактических данных бюджетирования по шаблону "+Шаблон + ", правилу "+ Правило.Ссылка +?(ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента,"",?(ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти,", строка табличной части №"+Строка(НомерСтрокиИсточника)+",",", строка движений №"+Строка(НомерСтрокиИсточника)+","))+" не определено значение поля "+фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Перечисления.фин_ФактическиеПоказателиБюджетирования[Поле]),,,,Отказ);
		КонецЕсли;
		Если Поле = "Сумма" Тогда
			НоваяСтрока["ВалютнаяСумма"]=Результат;
		Иначе
			НоваяСтрока[Поле]=Результат;
		КонецЕсли;
	КонецЦикла;
	Если Правило.Сторно Тогда
		НоваяСтрока["ВалютнаяСумма"]	= -НоваяСтрока["ВалютнаяСумма"];
		НоваяСтрока["СуммаУпр"]			= -НоваяСтрока["СуммаУпр"];
		НоваяСтрока["Количество"]		= -НоваяСтрока["Количество"];
	КонецЕсли;
КонецПроцедуры

// Процедура распределяет обороты бюджетов по проектам.
//
Процедура РаспределитьФактическиеДанныеПоПроектам(ТабДвижений, ВыборкаПоВидамРаспределения) Экспорт
	НоваяТаблица = ТабДвижений.СкопироватьКолонки();
	Для Каждого Строка Из ТабДвижений Цикл
		
		Если (НЕ ЗначениеЗаполнено(Строка.Проект)) ИЛИ ТипЗнч(Строка.Проект)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникаПроектов() Тогда
			НоваяСтрока = НоваяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			Продолжить;
		КонецЕсли;
		
		ВидРаспределения = Строка.Проект;
		
		ВыборкаПоВидамРаспределения.Сбросить();
		
		Если Не ВыборкаПоВидамРаспределения.НайтиСледующий(Новый Структура("ВидРаспределения",ВидРаспределения)) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось выполнить распределение первичных данных по проектам по виду распределения """ + ВидРаспределения + """");
			НоваяСтрока = НоваяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			Продолжить;
		КонецЕсли;
		
		ВыборкаПроекты 	= ВыборкаПоВидамРаспределения.Выбрать();
		МассивКоэф 		= Новый Массив;
		МассивПроекты	= Новый Массив;
		Пока ВыборкаПроекты.Следующий() Цикл
			МассивКоэф.Добавить(ВыборкаПроекты.ДоляРаспределения);
			МассивПроекты.Добавить(ВыборкаПроекты.Проект);
		КонецЦикла;
		
		Сумма  			= Строка.ВалютнаяСумма;
		
		МассивСумма  	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.РаспределитьПропорционально(Сумма, МассивКоэф,,Ложь);
		
		Если МассивСумма = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Неверные коэффициенты (сумма) для распределения первичных данных по проектам по виду распределения """ + ВидРаспределения + """");
			НоваяСтрока = НоваяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			Продолжить;;
		КонецЕсли;
		Для К = 0 По МассивСумма.ВГраница() Цикл
			НоваяСтрока = НоваяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			НоваяСтрока.Проект 			= МассивПроекты[К];
			НоваяСтрока.ВалютнаяСумма  	= МассивСумма[К];
		КонецЦикла;
	КонецЦикла;	
	ТабДвижений = НоваяТаблица;
КонецПроцедуры // РаспределитьДвиженияДСПоПроектам

//Функция РассчитатьСоответствие
//
Функция РассчитатьСоответствие(Настройка,Вариант,НаборПоказателей,Источник)
	Результат = Неопределено;
	Если Вариант.ВходящиеПоказатели.Количество()=0 И (НЕ Вариант.Предопределенный) Тогда
		Возврат Результат;
	КонецЕсли;
	Если (НЕ ТипЗнч(Настройка)=Тип("Структура")) И Настройка.Метаданные().Имя <> "фин_ВариантыПолученияСоответствийДляПервичныхДанных" Тогда
		Для Каждого СтрокаПоказателя Из Настройка.ЗаполнениеПоказателей Цикл
			Если СтрокаПоказателя.Трансформация И НЕ СтрокаПоказателя.ВариантДляТрансформации.Пустая() Тогда
				СтрокаВНаборе 	= НаборПоказателей.НайтиСтроки(Новый Структура("Показатель",СтрокаПоказателя.ПоказательВарианта))[0];
				ЗначениеТек 	= СтрокаВНаборе.Значение;
				ПромежуточныйНаборПоказателей = Новый ТаблицаЗначений;
				ПромежуточныйНаборПоказателей.Колонки.Добавить("Показатель");
				ПромежуточныйНаборПоказателей.Колонки.Добавить("Значение");
				Если СтрокаПоказателя.ВариантДляТрансформации.ВходящиеПоказатели.Количество() >0 Тогда
					ИмяПоказателя = СтрокаПоказателя.ВариантДляТрансформации.ВходящиеПоказатели[0].Показатель;
					СтрокаНов = ПромежуточныйНаборПоказателей.Добавить();
					СтрокаНов.Показатель 	= ИмяПоказателя;
					СтрокаНов.Значение		= НаборПоказателей.НайтиСтроки(Новый Структура("Показатель",СтрокаПоказателя.ПоказательВарианта))[0].Значение;
				КонецЕсли;
				ЗначениеНов		= РассчитатьСоответствие(СтрокаПоказателя.ВариантДляТрансформации,СтрокаПоказателя.ВариантДляТрансформации,ПромежуточныйНаборПоказателей,Источник);
				СтрокаВНаборе.Значение = ЗначениеНов;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Вариант = Справочники.фин_ВариантыПолученияСоответствийДляПервичныхДанных.ПолучениеПодразделенияПоПодразделениюОрганизации Тогда
		Вариант_СоединениеСРегистром = Вариант.СоединениеСРегистром.ВыгрузитьКолонки();
		ПараметрСоединения = Вариант_СоединениеСРегистром.Добавить();
		ПараметрСоединения.Показатель 			= "Организация";
		ПараметрСоединения.ИзмерениеРегистра 	= "Организация";
		ПараметрСоединения = Вариант_СоединениеСРегистром.Добавить();
		ПараметрСоединения.Показатель 			= "ПодразделениеОрганизации";
		ПараметрСоединения.ИзмерениеРегистра 	= "ПодразделениеОрганизации";
		Вариант_ПолеРегистраРезультат 			= "Подразделение";
		Вариант_Регистр							= фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СоответствиеПодразделенийИПодразделенийОрганизаций";
		Условие = "";
		Периодичность = Ложь;
		Запрос = Новый Запрос;
		Регистр = Метаданные.РегистрыСведений[фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СоответствиеПодразделенийИПодразделенийОрганизаций"];
		Для Каждого СоединениеРегистра Из Вариант_СоединениеСРегистром Цикл
			Условие = Условие+?(Условие="","",Символы.ПС+" И ")+ СоединениеРегистра.ИзмерениеРегистра+"=&"+СоединениеРегистра.Показатель;
			ТребуемыйПоказатель = СоединениеРегистра.Показатель;
			Строки = НаборПоказателей.НайтиСтроки(Новый Структура("Показатель",ТребуемыйПоказатель));
			Если Строки.Количество()<>0 Тогда
				ТребуемоеЗначение = Строки[0].Значение;
				Запрос.УстановитьПараметр(СоединениеРегистра.Показатель,ТребуемоеЗначение);
			КонецЕсли;
		КонецЦикла;
		Запрос.Текст = "ВЫБРАТЬ Таблица."+Вариант_ПолеРегистраРезультат+" КАК Результат
		| ИЗ РегистрСведений."+Вариант_Регистр+" КАК Таблица
		| ГДЕ "+Условие;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Результат;
		КонецЕсли
	ИначеЕсли Вариант = Справочники.фин_ВариантыПолученияСоответствийДляПервичныхДанных.ПоНастройкеСоответствийДляИзмеренийБюджетирования Тогда
		Вариант_СоединениеСРегистром = Вариант.СоединениеСРегистром.ВыгрузитьКолонки();
		ПараметрСоединения = Вариант_СоединениеСРегистром.Добавить();
		ПараметрСоединения.Показатель 			= "ИсходноеЗначение";
		ПараметрСоединения.ИзмерениеРегистра 	= "ИсходноеЗначение";
		ПараметрСоединения = Вариант_СоединениеСРегистром.Добавить();
		ПараметрСоединения.Показатель 			= "Разрез";
		ПараметрСоединения.ИзмерениеРегистра 	= "Разрез";
		Вариант_ПолеРегистраРезультат 			= "Соответствие";
		Вариант_Регистр							= "фин_НастройкаСоответствийДляИзмеренийБюджетирования";
		Условие = "";
		Запрос = Новый Запрос;
		Периодичность = Истина;
		Запрос.УстановитьПараметр("ДатаСреза",Источник.Дата);
		Регистр = Метаданные.РегистрыСведений.фин_НастройкаСоответствийДляИзмеренийБюджетирования;
		Для Каждого СоединениеРегистра Из Вариант_СоединениеСРегистром Цикл
			Условие = Условие+?(Условие="","",Символы.ПС+" И ")+ СоединениеРегистра.ИзмерениеРегистра+"=&"+СоединениеРегистра.Показатель;
			ТребуемыйПоказатель = СоединениеРегистра.Показатель;
			Строки = НаборПоказателей.НайтиСтроки(Новый Структура("Показатель",ТребуемыйПоказатель));
			Если Строки.Количество()<>0 Тогда
				ТребуемоеЗначение = Строки[0].Значение;
				Запрос.УстановитьПараметр(СоединениеРегистра.Показатель,ТребуемоеЗначение);
			ИначеЕсли ТребуемыйПоказатель = "Разрез" Тогда
				Запрос.УстановитьПараметр(СоединениеРегистра.Показатель,Настройка.Разрез);
			КонецЕсли;
		КонецЦикла;
		Запрос.Текст = "ВЫБРАТЬ Таблица."+Вариант_ПолеРегистраРезультат+" КАК Результат
		| ИЗ РегистрСведений."+Вариант_Регистр+?(Периодичность,".СрезПоследних(&ДатаСреза)","")+" КАК Таблица
		| ГДЕ "+Условие;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Результат;
		КонецЕсли
	ИначеЕсли Вариант.ВариантРасчетаСоответствия = Перечисления.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоФормуле Тогда
		Формула = Вариант.Формула;
		Переменные = Новый Массив;
		Для Каждого Показатель Из НаборПоказателей Цикл
			Переменные.Добавить(Показатель.Значение);
			Формула = СтрЗаменить(Формула,"["+Показатель.Показатель+"]",?(ТипЗнч(Показатель.Значение)=Тип("Число"),?(Показатель.Значение=0,"0",СтрЗаменить(Строка(Формат(Показатель.Значение,"ЧГ=")),",",".")),?(ТипЗнч(Показатель.Значение)=Тип("Булево"),Формат(Показатель.Значение,"БЛ=Ложь; БИ=Истина"),Строка(Показатель.Значение))));
		КонецЦикла;
		Переменные.Вставить(0,Неопределено); 
		Результат = Вычислить(Формула);
	ИначеЕсли Вариант.ВариантРасчетаСоответствия = Перечисления.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоРеквизиту Тогда
		Формула = Вариант.Формула;
		Результат = НаборПоказателей[0].Значение[Формула];
	ИначеЕсли Вариант.ВариантРасчетаСоответствия = Перечисления.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоПеречню Тогда
		Если Вариант.Соответствия.Количество()=0 Тогда
			Возврат ?(ЗначениеЗаполнено(Вариант.ЗначениеИначе),Вариант.ЗначениеИначе,Неопределено);
		КонецЕсли;
		ТребуемыйПоказатель = Вариант.ВходящиеПоказатели[0].Показатель;
		Строки = НаборПоказателей.НайтиСтроки(Новый Структура("Показатель",ТребуемыйПоказатель));
		Если Строки.Количество()=0 Тогда
			Возврат ?(ЗначениеЗаполнено(Вариант.ЗначениеИначе),Вариант.ЗначениеИначе,Неопределено);
		КонецЕсли;
		ТребуемоеЗначение = Строки[0].Значение;
		ИскомыеСтроки = Вариант.Соответствия.НайтиСтроки(Новый Структура("Значение",ТребуемоеЗначение));
		Если ИскомыеСтроки.Количество()>0 Тогда
			Результат = ИскомыеСтроки[0].Результат;
		КонецЕсли;
		Если Результат = Неопределено И ЗначениеЗаполнено(Вариант.ЗначениеИначе) Тогда
			Результат = Вариант.ЗначениеИначе;
		КонецЕсли;
	ИначеЕсли Вариант.ВариантРасчетаСоответствия = Перечисления.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоПеречнюСоответствийРеквизиту Тогда
		Если Вариант.Соответствия.Количество()=0 Тогда
			Возврат ?(ЗначениеЗаполнено(Вариант.ЗначениеИначе),Вариант.ЗначениеИначе,Неопределено);
		КонецЕсли;
		Формула = Вариант.Формула;
		ТребуемыйПоказатель = Вариант.ВходящиеПоказатели[0].Показатель;
		Строки = НаборПоказателей.НайтиСтроки(Новый Структура("Показатель",ТребуемыйПоказатель));
		Если Строки.Количество()=0 Тогда
			Возврат ?(ЗначениеЗаполнено(Вариант.ЗначениеИначе),Вариант.ЗначениеИначе,Неопределено);
		КонецЕсли;
		ТребуемоеЗначение = Строки[0].Значение[Формула];
		ИскомыеСтроки = Вариант.Соответствия.НайтиСтроки(Новый Структура("Значение",ТребуемоеЗначение));
		Если ИскомыеСтроки.Количество()>0 Тогда
			Результат = ИскомыеСтроки[0].Результат;
		КонецЕсли;
		Если Результат = Неопределено И ЗначениеЗаполнено(Вариант.ЗначениеИначе) Тогда
			Результат = Вариант.ЗначениеИначе;
		КонецЕсли;
	ИначеЕсли Вариант.ВариантРасчетаСоответствия = Перечисления.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоШкале Тогда
		Если Вариант.Шкала.Количество()=0 Тогда
			Возврат Результат;
		КонецЕсли;
		ТребуемыйПоказатель = Вариант.ВходящиеПоказатели[0].Показатель;
		Строки = НаборПоказателей.НайтиСтроки(Новый Структура("Показатель",ТребуемыйПоказатель));
		Если Строки.Количество()=0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		ТребуемоеЗначение = Строки[0].Значение;
		Для Каждого СтрокаПеречня Из  Вариант.Шкала Цикл
			Если СтрокаПеречня.НачальноеЗначение <= ТребуемоеЗначение
				И СтрокаПеречня.КонечноеЗначение >= ТребуемоеЗначение Тогда
				Результат = СтрокаПеречня.Результат;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Вариант.ВариантРасчетаСоответствия = Перечисления.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоРегиструСоответствий Тогда
		Если Вариант.СоединениеСРегистром.Количество()=0 Тогда
			Возврат Результат;
		КонецЕсли;
		Условие = "";
		Периодичность = Ложь;
		Запрос = Новый Запрос;
		Регистр = Метаданные.РегистрыСведений.Найти(Вариант.Регистр);
		Если Строка(Регистр.ПериодичностьРегистраСведений) <> "Непериодический" Тогда
			Периодичность = Истина;
			Запрос.УстановитьПараметр("ДатаСреза",Источник.Дата);
		КонецЕсли;
		Для Каждого СоединениеРегистра Из Вариант.СоединениеСРегистром Цикл
			Условие = Условие+?(Условие="","",Символы.ПС+" И ")+ СоединениеРегистра.ИзмерениеРегистра+"=&"+СоединениеРегистра.Показатель;
			ТребуемыйПоказатель = СоединениеРегистра.Показатель;
			Строки = НаборПоказателей.НайтиСтроки(Новый Структура("Показатель",ТребуемыйПоказатель));
			Если Строки.Количество()<>0 Тогда
				ТребуемоеЗначение = Строки[0].Значение;
				Запрос.УстановитьПараметр(СоединениеРегистра.Показатель,ТребуемоеЗначение);
			КонецЕсли;
		КонецЦикла;
		Запрос.Текст = "ВЫБРАТЬ Таблица."+Вариант.ПолеРегистраРезультат+" КАК Результат
		| ИЗ РегистрСведений."+Вариант.Регистр+?(Периодичность,".СрезПоследних(&ДатаСреза)","")+" КАК Таблица
		| ГДЕ "+Условие;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Результат;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;	
КонецФункции //РассчитатьСоответствие

//Процедура ПроверкаСсылокОбъекта
//
Процедура ПроверкаСсылокОбъекта(ОбъектПроверки,ПредупреждениеПользователю,Дерево) Экспорт
	мДерево = Неопределено;
	МассивРегистров = фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрыФактическихДанных();
	Если ТипЗнч(ОбъектПроверки)=Тип("СправочникСсылка.фин_ВариантыПолученияСоответствийДляПервичныхДанных") Тогда
		ПредупреждениеПользователю = "могут потерять работоспособность настройки использования текущего варианта";
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",ОбъектПроверки.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиПолученияСоответствийДляПервичныхДанныхБюджетирования.Владелец КАК Объект1,
		|	НастройкиПолученияСоответствийДляПервичныхДанныхБюджетирования.Ссылка КАК Объект2
		|ИЗ
		|	Справочник.фин_НастройкиПолученияСоответствийДляПервичныхДанныхБюджетирования КАК НастройкиПолученияСоответствийДляПервичныхДанныхБюджетирования
		|ГДЕ
		|	НастройкиПолученияСоответствийДляПервичныхДанныхБюджетирования.ВариантПолученияСоответствийДляПервичныхДанных = &Ссылка
		|	И (НЕ НастройкиПолученияСоответствийДляПервичныхДанныхБюджетирования.ПометкаУдаления)
		|ИТОГИ ПО
		|	Объект1";
		мДерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИначеЕсли ТипЗнч(ОбъектПроверки)=Тип("СправочникСсылка.фин_НастройкиПолученияСоответствийДляПервичныхДанныхБюджетирования") Тогда
		ПредупреждениеПользователю = "могут потерять работоспособность шаблоны проводок, использующие выбранную настройку";
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",ОбъектПроверки.Ссылка);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	фин_ПравилаОтраженияФактическихДанных.Ссылка.Владелец КАК Объект1,
		|	фин_ПравилаОтраженияФактическихДанных.Ссылка КАК Объект2
		|ИЗ
		|	Справочник.фин_ПравилаОтраженияФактическихДанных КАК фин_ПравилаОтраженияФактическихДанных
		|ГДЕ
		|	(фин_ПравилаОтраженияФактическихДанных.ФинансовыйПоказательИсточник = &Ссылка
		|			ИЛИ фин_ПравилаОтраженияФактическихДанных.УправленческоеПодразделениеИсточник = &Ссылка
		|			ИЛИ фин_ПравилаОтраженияФактическихДанных.КонтрагентИсточник = &Ссылка
		|			ИЛИ фин_ПравилаОтраженияФактическихДанных.Разрез1Источник = &Ссылка
		|			ИЛИ фин_ПравилаОтраженияФактическихДанных.Разрез2Источник = &Ссылка
		|			ИЛИ фин_ПравилаОтраженияФактическихДанных.Разрез3Источник = &Ссылка
		|			ИЛИ фин_ПравилаОтраженияФактическихДанных.Разрез4Источник = &Ссылка
		|			ИЛИ фин_ПравилаОтраженияФактическихДанных.Разрез5Источник = &Ссылка
		|			ИЛИ фин_ПравилаОтраженияФактическихДанных.Разрез6Источник = &Ссылка
		|			ИЛИ фин_ПравилаОтраженияФактическихДанных.Разрез7Источник = &Ссылка
		|			ИЛИ фин_ПравилаОтраженияФактическихДанных.Разрез8Источник = &Ссылка
		|			ИЛИ фин_ПравилаОтраженияФактическихДанных.Разрез9Источник = &Ссылка
		|			ИЛИ фин_ПравилаОтраженияФактическихДанных.Разрез10Источник = &Ссылка
		|			ИЛИ фин_ПравилаОтраженияФактическихДанных.НоменклатураИсточник = &Ссылка
		|			ИЛИ фин_ПравилаОтраженияФактическихДанных.КоличествоИсточник = &Ссылка
		|			ИЛИ фин_ПравилаОтраженияФактическихДанных.СуммаИсточник = &Ссылка
		|			ИЛИ фин_ПравилаОтраженияФактическихДанных.ПроектИсточник = &Ссылка
		|			ИЛИ фин_ПравилаОтраженияФактическихДанных.ВалютаИсточник = &Ссылка)
		|	И (НЕ фин_ПравилаОтраженияФактическихДанных.ПометкаУдаления)
		|ИТОГИ ПО
		|	Объект1";
		мДерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИначеЕсли ТипЗнч(ОбъектПроверки)=Тип("СправочникСсылка.фин_СхемыОтраженияФактическихДанных") Тогда
		ПредупреждениеПользователю = "могут потерять актуальность проводки документов, выполненные по схеме отражения";
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",ОбъектПроверки.Ссылка);
		Для Каждого ИмяРегистра Из МассивРегистров Цикл
			Запрос.Текст = Запрос.Текст+?(МассивРегистров.Найти(ИмяРегистра)=0,"","
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|") +"
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	фин_СхемыОтраженияФактическихДанных.Владелец КАК Объект1,
			|	ОборотыБюджетов.Регистратор КАК Объект2,
			|	ОборотыБюджетов.Период КАК Период
			|ИЗ
			|	РегистрНакопления."+ИмяРегистра+" КАК ОборотыБюджетов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_СхемыОтраженияФактическихДанных КАК фин_СхемыОтраженияФактическихДанных
			|		ПО ОборотыБюджетов.Схема = фин_СхемыОтраженияФактическихДанных.Ссылка
			|ГДЕ
			|	фин_СхемыОтраженияФактическихДанных.Ссылка = &Ссылка
			|";
		КонецЦикла;
		Запрос.Текст = Запрос.Текст + "
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Период
		               |ИТОГИ ПО
		               |	Объект1";
		мДерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИначеЕсли ТипЗнч(ОбъектПроверки)=Тип("СправочникСсылка.фин_ПравилаОтраженияФактическихДанных") Тогда
		ПредупреждениеПользователю = "могут потерять актуальность схемы отражения, включающие правило, а также проводки документов, выполненные по правилу отражения";
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",ОбъектПроверки.Ссылка);
		Для Каждого ИмяРегистра Из МассивРегистров Цикл
			Запрос.Текст = Запрос.Текст+?(МассивРегистров.Найти(ИмяРегистра)=0,"","
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|") +"
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	фин_ПравилаОтраженияФактическихДанных.Владелец КАК Объект1,
			|	ОборотыБюджетов.Регистратор КАК Объект2,
			|	ОборотыБюджетов.Период КАК Период
			|ИЗ
			|	РегистрНакопления."+ИмяРегистра+" КАК ОборотыБюджетов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ПравилаОтраженияФактическихДанных КАК фин_ПравилаОтраженияФактическихДанных
			|		ПО ОборотыБюджетов.Правило = фин_ПравилаОтраженияФактическихДанных.Ссылка
			|ГДЕ
			|	фин_ПравилаОтраженияФактическихДанных.Ссылка = &Ссылка
			|";
		КонецЦикла;
		Запрос.Текст = Запрос.Текст + "
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Период
		               |ИТОГИ ПО
		               |	Объект1";
		мДерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИначеЕсли ТипЗнч(ОбъектПроверки)=Тип("СправочникСсылка.фин_НаборыШаблоновОтраженияПервичныхДанныхВБюджетах") Тогда
		ПредупреждениеПользователю = "могут потерять актуальность проводки документов, выполненные по набору шаблонов";
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",ОбъектПроверки.Ссылка);
		Для Каждого ИмяРегистра Из МассивРегистров Цикл
			Запрос.Текст = Запрос.Текст+?(МассивРегистров.Найти(ИмяРегистра)=0,"","
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|") +"
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	фин_СхемыОтраженияФактическихДанных.Владелец КАК Объект1,
			|	фин_СхемыОтраженияФактическихДанных.Ссылка КАК Объект2,
			|	ОборотыБюджетов.Регистратор КАК Объект3,
			|	ОборотыБюджетов.Период КАК Период
			|ИЗ
			|	Справочник.фин_НаборыШаблоновОтраженияПервичныхДанныхВБюджетах.НаборШаблонов КАК НаборыШаблоновОтраженияПервичныхДанныхВБюджетахНаборШаблонов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_СхемыОтраженияФактическихДанных КАК фин_СхемыОтраженияФактическихДанных
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления."+ИмяРегистра+" КАК ОборотыБюджетов
			|			ПО фин_СхемыОтраженияФактическихДанных.Ссылка = ОборотыБюджетов.Схема
			|		ПО НаборыШаблоновОтраженияПервичныхДанныхВБюджетахНаборШаблонов.Схема = фин_СхемыОтраженияФактическихДанных.Ссылка
			|ГДЕ
			|	НаборыШаблоновОтраженияПервичныхДанныхВБюджетахНаборШаблонов.Ссылка = &Ссылка
			|";
		КонецЦикла;
		Запрос.Текст = Запрос.Текст + "
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Период
		               |ИТОГИ ПО
		               |	Объект1,
		               |	Объект2";
		мДерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИначеЕсли ТипЗнч(ОбъектПроверки)=Тип("СправочникСсылка.усд_УсловияВыполненияОперацийПоДокументам") Тогда
		ПредупреждениеПользователю = "могут потерять актуальность проводки документов, выполненные по наборам шаблонов с использованием условия; может измениться порядок использования маршрутов согласования";
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",ОбъектПроверки.Ссылка);
		Для Каждого ИмяРегистра Из МассивРегистров Цикл
			Запрос.Текст = Запрос.Текст+?(МассивРегистров.Найти(ИмяРегистра)=0,"","
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|") +"
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	фин_СхемыОтраженияФактическихДанных.Владелец КАК Объект1,
			|	фин_СхемыОтраженияФактическихДанных.Ссылка КАК Объект2,
			|	ОборотыБюджетов.Регистратор КАК Объект3,
			|	ОборотыБюджетов.Период КАК Период
			|ИЗ
			|	Справочник.фин_НаборыШаблоновОтраженияПервичныхДанныхВБюджетах.НаборШаблонов КАК НаборыШаблоновОтраженияПервичныхДанныхВБюджетахНаборШаблонов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_СхемыОтраженияФактическихДанных КАК фин_СхемыОтраженияФактическихДанных
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления."+ИмяРегистра+" КАК ОборотыБюджетов
			|			ПО фин_СхемыОтраженияФактическихДанных.Ссылка = ОборотыБюджетов.Схема
			|		ПО НаборыШаблоновОтраженияПервичныхДанныхВБюджетахНаборШаблонов.Схема = фин_СхемыОтраженияФактическихДанных.Ссылка
			|ГДЕ
			|	НаборыШаблоновОтраженияПервичныхДанныхВБюджетахНаборШаблонов.УсловиеПримененияШаблона = &Ссылка
			|";
		КонецЦикла;
		Запрос.Текст = Запрос.Текст+"
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	МаршрутыДвиженияДокументов.Владелец,
		               |	МаршрутыДвиженияДокументов.Ссылка,
		               |	NULL,
		               |	NULL
		               |ИЗ
		               |	Справочник.усд_МаршрутыДвиженияДокументов КАК МаршрутыДвиженияДокументов
		               |ГДЕ
		               |	МаршрутыДвиженияДокументов.УсловиеПопаданияНаМаршрут = &Ссылка
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Период
		               |ИТОГИ ПО
		               |	Объект1,
		               |	Объект2";
		мДерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИначеЕсли ТипЗнч(ОбъектПроверки)=Тип("СправочникСсылка.усд_УсловияВыполненияОперацийПоСтрокамДокумента") Тогда
		ПредупреждениеПользователю = "могут потерять актуальность проводки документов, выполненные по шаблонам с использованием условия";
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",ОбъектПроверки.Ссылка);
		Для Каждого ИмяРегистра Из МассивРегистров Цикл
			Запрос.Текст = Запрос.Текст+?(МассивРегистров.Найти(ИмяРегистра)=0,"","
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|") +"
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	фин_ПравилаОтраженияФактическихДанных.Ссылка КАК Объект2,
			|	ОборотыБюджетов.Регистратор КАК Объект3,
			|	фин_ПравилаОтраженияФактическихДанных.Ссылка.Владелец КАК Объект1,
			|	ОборотыБюджетов.Период КАК Период
			|ИЗ
			|	Справочник.фин_ПравилаОтраженияФактическихДанных КАК фин_ПравилаОтраженияФактическихДанных
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления."+ИмяРегистра+" КАК ОборотыБюджетов
			|		ПО фин_ПравилаОтраженияФактическихДанных.Ссылка = ОборотыБюджетов.Правило
			|ГДЕ
			|	фин_ПравилаОтраженияФактическихДанных.Условие = &Ссылка
			|";
		КонецЦикла;
		Запрос.Текст = Запрос.Текст + "
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Период
		               |ИТОГИ ПО
		               |	Объект1,
		               |	Объект2";
		мДерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИначеЕсли ТипЗнч(ОбъектПроверки)=Тип("СправочникСсылка.усд_МаршрутыДвиженияДокументов") Тогда
		ПредупреждениеПользователю = "может быть нарушена цепочка согласования документов";
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",ОбъектПроверки.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НазначенияМаршрутов.ВидДокументов КАК Объект1,
		|	НазначенияМаршрутов.Документ КАК Объект2
		|ИЗ
		|	РегистрСведений.усд_НазначенияМаршрутов КАК НазначенияМаршрутов
		|ГДЕ
		|	НазначенияМаршрутов.Маршрут = &Ссылка
		|ИТОГИ ПО
		|	Объект1";
		мДерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли;
	#Если Сервер Тогда
		Дерево = Новый ХранилищеЗначения(мДерево);
	#Иначе
		Дерево = мДерево;
	#КонецЕсли
КонецПроцедуры //ПроверкаСсылокОбъекта

//Функция ПроверкаКонтролируемыхЗначений
//
Функция ПроверкаКонтролируемыхЗначений(Источник, СписокЛимитов, СтрокаОборотовДляКонтроля,ТаблицаОборотовДокументаДляКонтроля,БюджетированиеПоОрганизациям,МассивИмен,ПроверкаПройдена,ВозвращатьТаблицуВЛюбомСлучае=Ложь,РегистрироватьОбщееИсполнение = Ложь) Экспорт
	
	// Получение списка контролирующих сценариев для выбранного периода и измерений бюджетирования
	
	ТабРезультата= СписокЛимитов.СкопироватьКолонки();
	
	Для Каждого СтрокаЛимитов Из СписокЛимитов Цикл
		ПодходящаяСтрока = Истина;
		Для Каждого ИмяРазреза Из МассивИмен Цикл
			Если НЕ фин_РаботаСДополнительнымиРазрезамиБюджетирования.УчетПоСтатьеПоРазрезу(СтрокаОборотовДляКонтроля.ФинансовыйПоказатель,Перечисления.фин_ФактическиеПоказателиБюджетирования[ИмяРазреза]) Тогда
				Продолжить;
			КонецЕсли;
			Если СписокЛимитов.Колонки.Найти(ИмяРазреза)=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ (СтрокаЛимитов[ИмяРазреза] = СтрокаОборотовДляКонтроля[ИмяРазреза] ИЛИ НЕ ЗначениеЗаполнено(СтрокаЛимитов[ИмяРазреза])) Тогда
				ПодходящаяСтрока = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаЛимитов.ФинансовыйПоказатель = СтрокаОборотовДляКонтроля.ФинансовыйПоказатель И ПодходящаяСтрока Тогда
			НовыйЛимит = ТабРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЛимит,СтрокаЛимитов);
		КонецЕсли;
	КонецЦикла;
	
	//Запрос.УстановитьПараметр("ФинансовыйПоказатель",	СтрокаОборотовДляКонтроля.ФинансовыйПоказатель);
	ВалютаУправленческогоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	
	Возврат фин_УправлениеЗависимостямиСтатейБюджетов.ПроверитьПоказателиВСоответствииСправиламиКонтроля(ТабРезультата,ТаблицаОборотовДокументаДляКонтроля,СтрокаОборотовДляКонтроля,МассивИмен,,Источник,БюджетированиеПоОрганизациям,?(Источник.Метаданные().Реквизиты.Найти("Организация")=Неопределено,Справочники.Организации.ПустаяСсылка(),Источник.Организация),,Истина,ВалютаУправленческогоУчета,ПроверкаПройдена,ВозвращатьТаблицуВЛюбомСлучае);
	
КонецФункции // ПроверкаКонтролируемыхЗначений()

//Функция РазрядностьПланирования()
//
Функция РазрядностьПланирования() Экспорт
	Разрядность = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("РазрядностьПланированияБюджетов");	
	Если Разрядность = Перечисления.фин_РазрядностьПланированияБюджетов.Миллионы Тогда
		Возврат 1000000;
	ИначеЕсли Разрядность = Перечисления.фин_РазрядностьПланированияБюджетов.СотниТысяч Тогда
		Возврат 100000;
	ИначеЕсли Разрядность = Перечисления.фин_РазрядностьПланированияБюджетов.ДесяткиТысяч Тогда
		Возврат 10000;
	ИначеЕсли Разрядность = Перечисления.фин_РазрядностьПланированияБюджетов.Тысячи Тогда
		Возврат 1000;
	ИначеЕсли Разрядность = Перечисления.фин_РазрядностьПланированияБюджетов.Сотни Тогда
		Возврат 100;
	Иначе
		Возврат 1;
	КонецЕсли;
КонецФункции

//Процедура ФормироватьПроводкиПоБюджетированию
//
Процедура ФормироватьПроводкиПоБюджетированиюПоРегистрам(Регистратор,ТаблицаДвижений,ВидРегистра,ИмяРегистра,Отказ,Замещение,НаборШаблонов,РегистрацияПрогнозныхДанных = Ложь,РегистрацияЛимитов=Ложь) Экспорт
	Если Отказ ИЛИ ТаблицаДвижений.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	МетаданныеДокумента = Регистратор.Метаданные();
	ИмяДокумента = МетаданныеДокумента.Имя;
	Если ИмяДокумента = "Сторнирование" Тогда
		Возврат;
	КонецЕсли;
	ПолучатьОрганизациюИзСтрокНабора = Ложь;
	БюджетированиеПоОрганизациям = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
	Организация = Справочники.Организации.ПустаяСсылка();
	Если БюджетированиеПоОрганизациям Тогда
		Если МетаданныеДокумента.Реквизиты.Найти("Организация")<>Неопределено Тогда
			Если БюджетированиеПоОрганизациям Тогда
				Организация = Регистратор.Организация;
			КонецЕсли;
		ИначеЕсли ТаблицаДвижений.Колонки.Найти("Организация")<>Неопределено Тогда
			ПолучатьОрганизациюИзСтрокНабора = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыХраненияФакта = фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрФактическихДанныхДляДокумента(ИмяДокумента);
	РегистраторФакта = ?(ПараметрыХраненияФакта.РегистрацияРучнойОперацией,фин_ОбщегоНазначенияВызовСервераПовтИсп.ДокументРегистрацииФактическихДанных(Регистратор),Регистратор);
	РегистрацияПоПлануСчетов = МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыБухгалтерии.фин_Бюджетирование) И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВестиУчетПоПлануСчетовБюджетирования");
	Если ПараметрыХраненияФакта.РегистрацияРучнойОперацией Тогда
		Если РегистраторФакта.ПометкаУдаления ИЛИ Регистратор.Дата<>РегистраторФакта.Дата ИЛИ (Регистратор.Метаданные().Реквизиты.Найти("Организация")<>Неопределено И Регистратор.Организация <> РегистраторФакта.Организация) Тогда
			ОбъектРегистратор = РегистраторФакта.ПолучитьОбъект();
			ОбъектРегистратор.Дата = Регистратор.Дата;
			Если Регистратор.Метаданные().Реквизиты.Найти("Организация")<>Неопределено Тогда
				ОбъектРегистратор.Организация = Регистратор.Организация;
			КонецЕсли;
			ОбъектРегистратор.ПометкаУдаления = Ложь;
			Попытка
				ОбъектРегистратор.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось изменить операцию ручной регистрации фактических данных бюджетирования для документа "+Строка(Регистратор)+"
				|	:"+ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли фин_ОбщегоНазначенияВызовСервераПовтИсп.ДокументИмеетДвиженияПоРегиструНакопления(ИмяДокумента,ПараметрыХраненияФакта.ИмяРегистра)=Ложь Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось выполнить регистрацию фактических данных бюджетирования для документа "+Строка(Регистратор)+"
				|	: документу не разрешено формировать движения по регистру фактических данных. Обратитесь к администратору");
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(НаборШаблонов) Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвиженийОбороты = РегистрыНакопления[ПараметрыХраненияФакта.ИмяРегистра].СоздатьНаборЗаписей();
	НаборДвиженийОбороты.Отбор.Регистратор.Установить(РегистраторФакта);
	НаборДвиженийОбороты.Прочитать();
	Если Замещение=Истина Тогда//ИЛИ ТаблицаДвижений.Количество()=0 Тогда
		СтрокиУдалить = Новый Массив;
		Для Каждого СтрокаНЗ Из НаборДвиженийОбороты Цикл
			Если ЗначениеЗаполнено(СтрокаНЗ.Схема) Тогда
				Если ТипЗнч(фин_ОбщегоНазначенияВызовСервераПовтИсп.ОбъектНастроекФактическихДанных(СтрокаНЗ.Схема))=Тип("СправочникСсылка.фин_КлассификаторРегистров") И СтрокаНЗ.Схема = НаборШаблонов Тогда
					СтрокиУдалить.Добавить(СтрокаНЗ);
				КонецЕсли;
			ИначеЕсли ЗависимостьПоТекущемуШаблону(СтрокаНЗ,НаборДвиженийОбороты,НаборШаблонов) Тогда
				СтрокиУдалить.Добавить(СтрокаНЗ);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
			НаборДвиженийОбороты.Удалить(СтрокаУдалить);
		КонецЦикла;
		//НаборДвиженийОбороты.Очистить();
		НаборДвиженийОбороты.Записать();
	КонецЕсли;
	Если РегистрацияЛимитов Тогда
		НаборДвижений = РегистрыНакопления.фин_КонтролируемыеФинансовыеПоказатели.СоздатьНаборЗаписей();
		НаборДвижений.Отбор.Регистратор.Установить(РегистраторФакта);
		Если Замещение=Истина ИЛИ ТаблицаДвижений.Количество()=0 Тогда
			НаборДвижений.Очистить();
			НаборДвижений.Записать();
		КонецЕсли;
	КонецЕсли;
	Если РегистрацияПоПлануСчетов Тогда
		НаборДвижений = РегистрыБухгалтерии.фин_Бюджетирование.СоздатьНаборЗаписей();
		НаборДвижений.Отбор.Регистратор.Установить(РегистраторФакта);
		Если Замещение=Истина ИЛИ ТаблицаДвижений.Количество()=0 Тогда
			НаборДвижений.Очистить();
			НаборДвижений.Записать();
		КонецЕсли;
	КонецЕсли;
	Если РегистрацияПрогнозныхДанных Тогда
		НаборДвиженийПрогноз = РегистрыНакопления.фин_ПрогнозИсполненияБюджетов.СоздатьНаборЗаписей();
		НаборДвиженийПрогноз.Отбор.Регистратор.Установить(РегистраторФакта);
		НаборДвиженийПрогноз.Прочитать();
		Если Замещение=Истина ИЛИ ТаблицаДвижений.Количество()=0 Тогда
			СтрокиУдалить = Новый Массив;
			Для Каждого СтрокаНЗ Из НаборДвиженийПрогноз Цикл
				Если ЗначениеЗаполнено(СтрокаНЗ.Схема) Тогда
					Если ТипЗнч(фин_ОбщегоНазначенияВызовСервераПовтИсп.ОбъектНастроекФактическихДанных(СтрокаНЗ.Схема))=Тип("СправочникСсылка.фин_КлассификаторРегистров") И СтрокаНЗ.Схема = НаборШаблонов Тогда
						СтрокиУдалить.Добавить(СтрокаНЗ);
					КонецЕсли;
				ИначеЕсли ЗависимостьПоТекущемуШаблону(СтрокаНЗ,НаборДвиженийПрогноз,НаборШаблонов) Тогда
					СтрокиУдалить.Добавить(СтрокаНЗ);
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
				НаборДвиженийПрогноз.Удалить(СтрокаУдалить);
			КонецЦикла;
			//НаборДвиженийОбороты.Очистить();
			НаборДвиженийПрогноз.Записать();
		КонецЕсли;
	КонецЕсли;
	Отражено = Ложь;
	РеквизитОрганизация = (МетаданныеДокумента.Реквизиты.Найти("Организация")<>Неопределено);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РаспределениеПоПроектамСрезПоследних.ВидРаспределения КАК ВидРаспределения,
	|	РаспределениеПоПроектамСрезПоследних.Проект,
	|	РаспределениеПоПроектамСрезПоследних.ДоляРаспределения КАК ДоляРаспределения
	|ИЗ
	|	РегистрСведений."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"РаспределениеПоПроектам.СрезПоследних(&Дата, "+?(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям") И РеквизитОрганизация,"Организация = &Организация","")+") КАК РаспределениеПоПроектамСрезПоследних
	|ИТОГИ
	|	СУММА(ДоляРаспределения)
	|ПО
	|	ВидРаспределения";
	Запрос.УстановитьПараметр("Дата",		Регистратор.Дата);
	Если РеквизитОрганизация Тогда
		Запрос.УстановитьПараметр("Организация",Регистратор.Организация);
	КонецЕсли;
	ВыборкаВидыРаспределения = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВестиУчетПоПроектам = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ВестиУчетПоПроектам");
	СписокРазрезовУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов");
	КЭШ_Разрезы = Новый Соответствие;
	
	Если ТипЗнч(НаборШаблонов)=Тип("СправочникСсылка.фин_СхемыОтраженияФактическихДанных") ИЛИ ТипЗнч(НаборШаблонов)=Тип("СправочникСсылка.фин_ПравилаОтраженияФактическихДанных") Тогда
		ОтразитьВОборотахПоБюджетамПоРегистру(НаборШаблонов,НаборДвиженийОбороты,Регистратор,Отказ,ТаблицаДвижений,ВыборкаВидыРаспределения,ВестиУчетПоПроектам,СписокРазрезовУчета,Регистратор,РегистрацияПрогнозныхДанных,НаборДвиженийПрогноз,ПолучатьОрганизациюИзСтрокНабора);
	КонецЕсли;
	Если Не Отказ И НаборДвиженийОбороты.Количество() >0  Тогда
		ДатаСреза = Регистратор.Дата;
		ДатаВводаВСистему = ДатаОтраженияДокументаВБюджетах(Регистратор);
		
		
		ВалютаУправленческогоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
		ВалютаРегл = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
		Если ВалютаУправленческогоУчета.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Проведение документа "+Строка(Регистратор)+" по регистрам бюджетирования невозможно: не задана валюта управленческого учета",,,,Отказ);
			Возврат;
		КонецЕсли;
		Для Каждого СтрокаНабора Из НаборДвиженийОбороты Цикл
			СтрокаНабора.Период = ДатаВводаВСистему;
			СтрокаНабора.Активность = Истина;
			СтрокаНабора.Регистратор = Регистратор;
			СтрокаНабора.ПериодПланирования = ДатаВводаВСистему;
			Если НЕ ПолучатьОрганизациюИзСтрокНабора Тогда
				СтрокаНабора.Организация = Организация;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаНабора.Валюта) Тогда
				СтрокаНабора.Валюта = ВалютаРегл;
			КонецЕсли;
		КонецЦикла;
		// расчет зависимостей - начало
		МассивИмен = Новый Массив;
		ПолныйМассивИмен = Новый Массив;
		Для Каждого РазрезЭлемент Из СписокРазрезовУчета Цикл
			ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
			ПолныйМассивИмен.Добавить(ИмяРазреза);
			Если Найти(ИмяРазреза,"Разрез")=0 Тогда
				Продолжить;
			КонецЕсли;
			МассивИмен.Добавить(ИмяРазреза);
		КонецЦикла;
		
		ПромежуточныйНаборДвиженийОбороты = НаборДвиженийОбороты.Выгрузить().Скопировать(Новый Структура("Схема",НаборШаблонов));
		Если фин_УправлениеЗависимостямиСтатейБюджетов.ИмеютсяЗависимостиПоФактическимДанным(ПромежуточныйНаборДвиженийОбороты.ВыгрузитьКолонку("ФинансовыйПоказатель"),ДатаСреза,Организация) Тогда
			НаборДвиженийОбороты.Записать();
			ЗависимыеОбороты = НаборДвиженийОбороты.ВыгрузитьКолонки();
			ПромежуточныйНаборДвиженийОбороты.Колонки.ВалютнаяСумма.Имя= "Сумма";
			ЗависимыеОбороты.Колонки.ВалютнаяСумма.Имя= "Сумма";
			Для Каждого РазрезЭлемент Из СписокРазрезовУчета Цикл
				ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
				Если Найти(ИмяРазреза,"Разрез")=0 Тогда
					Продолжить;
				КонецЕсли;
				ПромежуточныйНаборДвиженийОбороты.Колонки.Добавить(ИмяРазреза,фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(РазрезЭлемент.Значение,КЭШ_Разрезы).ТипЗначения);
				ЗависимыеОбороты.Колонки.Добавить(ИмяРазреза,фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(РазрезЭлемент.Значение,КЭШ_Разрезы).ТипЗначения);
			КонецЦикла;
			Для Инд=1 По 10 Цикл
				Если ПромежуточныйНаборДвиженийОбороты.Колонки.Найти("Разрез"+Строка(Инд))=Неопределено Тогда
					ПромежуточныйНаборДвиженийОбороты.Колонки.Добавить("Разрез"+Строка(Инд),Новый ОписаниеТипов("Строка"));
					ЗависимыеОбороты.Колонки.Добавить("Разрез"+Строка(Инд),Новый ОписаниеТипов("Строка"));
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаНабора Из ПромежуточныйНаборДвиженийОбороты Цикл
				Для Каждого ИмяРазреза Из МассивИмен Цикл
					СтрокаНабора[ИмяРазреза] = СтрокаНабора.ДополнительныеРазрезы[ИмяРазреза];
				КонецЦикла;
			КонецЦикла;
			фин_УправлениеЗависимостямиСтатейБюджетов.РассчитатьЗависимыеОбороты(,ПромежуточныйНаборДвиженийОбороты,ЗависимыеОбороты,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий(),Организация,БюджетированиеПоОрганизациям,ДатаВводаВСистему,ВестиУчетПоПроектам,Истина);
			ЗависимыеОбороты.Колонки.Сумма.Имя= "ВалютнаяСумма";
			Для Каждого СтрокаЗависимых Из ЗависимыеОбороты Цикл
				СтруктураРазрезовСтроки = Новый Структура;
				Для Каждого Разрез Из МассивИмен Цикл
					Если Найти(Разрез,"Разрез")<>0 Тогда
						СтруктураРазрезовСтроки.Вставить(Разрез,СтрокаЗависимых[Разрез]);
					КонецЕсли;
				КонецЦикла;
				СтрокаЗависимых.ДополнительныеРазрезы = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОпределитьПозициюКлассификатораПоСтруктуре(СтруктураРазрезовСтроки);
			КонецЦикла;
			
			фин_ОбщегоНазначенияСервер.ЗагрузитьВТаблицуЗначений(ЗависимыеОбороты,НаборДвиженийОбороты);
		КонецЕсли;
		// расчет зависимостей - конец
		
		// расчет управленческой суммы
		СтруктураКурсов = Новый Соответствие;
		Для Каждого СтрокаНабора Из НаборДвиженийОбороты Цикл
			//СтрокаНабора.Период = Источник.Дата;
			СтрокаНабора.Активность = Истина;
			СтрокаНабора.Регистратор = РегистраторФакта;
			Если РегистраторФакта<>Регистратор Тогда
				СтрокаНабора.ПервичныйДокумент = РегистраторФакта;
			КонецЕсли;
			Если НЕ ПолучатьОрганизациюИзСтрокНабора Тогда
				СтрокаНабора.Организация = Организация;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаНабора.ПериодПланирования) Тогда
				СтрокаНабора.ПериодПланирования = СтрокаНабора.Период;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаНабора.Валюта) Тогда
				СтрокаНабора.Валюта = ВалютаРегл;
			КонецЕсли;
			Если СтрокаНабора.Валюта = ВалютаУправленческогоУчета Тогда
				СтрокаНабора.СуммаУпр = СтрокаНабора.ВалютнаяСумма;
			Иначе
				Курс 		= фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(СтрокаНабора.Валюта,ДатаСреза);
				КурсУпр 	= фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ВалютаУправленческогоУчета,ДатаСреза);
				СтрокаНабора.СуммаУпр=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаНабора.ВалютнаяСумма,
				СтрокаНабора.Валюта,ВалютаУправленческогоУчета,
				Курс.Курс,КурсУпр.Курс,
				Курс.Кратность,КурсУпр.Кратность);
			КонецЕсли;
		КонецЦикла;
		НаборДвиженийОбороты.Записать();
		
		Если РегистрацияЛимитов Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ВТ",НаборДвиженийОбороты.Выгрузить());
			Запрос.Текст = "ВЫБРАТЬ
			|	ОборотыБюджетов.ПериодПланирования,
			|	ОборотыБюджетов.Валюта,
			|	ОборотыБюджетов.Проект,
			|	ОборотыБюджетов.УправленческоеПодразделение,
			|	ОборотыБюджетов.ФинансовыйПоказатель,
			|	ОборотыБюджетов.Контрагент,
			|	ОборотыБюджетов.Номенклатура,
			|	ОборотыБюджетов.ДополнительныеРазрезы,
			|	ОборотыБюджетов.Количество КАК Количество,
			|	ОборотыБюджетов.ВалютнаяСумма КАК ВалютнаяСумма,
			|	ОборотыБюджетов.СуммаУпр КАК СуммаУпр,
			|	ОборотыБюджетов.СуммаСценария КАК СуммаСценария,
			|	ОборотыБюджетов.Период
			|ПОМЕСТИТЬ ВТОбороты
			|ИЗ
			|	&ВТ КАК ОборотыБюджетов
			|
			|;
			|ВЫБРАТЬ
			|	ОборотыБюджетов.ПериодПланирования,
			|	ОборотыБюджетов.Валюта,
			|	ОборотыБюджетов.Проект,
			|	ОборотыБюджетов.УправленческоеПодразделение,
			|	ОборотыБюджетов.ФинансовыйПоказатель,
			|	ОборотыБюджетов.Контрагент,
			|	ОборотыБюджетов.Номенклатура,
			|	ОборотыБюджетов.ДополнительныеРазрезы,
			|	СУММА(ОборотыБюджетов.ВалютнаяСумма) КАК ВалютнаяСумма,
			|	СУММА(ОборотыБюджетов.Количество) КАК Количество,
			|	СУММА(ОборотыБюджетов.СуммаУпр) КАК СуммаУпр,
			|	СУММА(ОборотыБюджетов.СуммаСценария) КАК СуммаСценария,
			|	ОборотыБюджетов.Период
			|ИЗ
			|	ВТОбороты КАК ОборотыБюджетов
			|
			|СГРУППИРОВАТЬ ПО
			|	ОборотыБюджетов.ПериодПланирования,
			|	ОборотыБюджетов.Валюта,
			|	ОборотыБюджетов.ФинансовыйПоказатель,
			|	ОборотыБюджетов.УправленческоеПодразделение,
			|	ОборотыБюджетов.Номенклатура,
			|	ОборотыБюджетов.ДополнительныеРазрезы,
			|	ОборотыБюджетов.Контрагент,
			|	ОборотыБюджетов.Проект,
			|	ОборотыБюджетов.Период";
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			РезультатЗапроса = Запрос.Выполнить();
			
			// Проверка и движения по регистру "Контролируемые значения бюджетов"
			НаборДвижений = РегистрыНакопления.фин_КонтролируемыеФинансовыеПоказатели.СоздатьНаборЗаписей();
			НаборДвижений.Отбор.Регистратор.Установить(Регистратор);
			НаборДвижений.Прочитать();
			ТабКонтролируемыхДвижений=НаборДвижений.Выгрузить();
			ТабКонтролируемыхДвижений.Очистить();
			
			ТаблицаОборотовДокументаДляКонтроля = РезультатЗапроса.Выгрузить();
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Период",ДатаВводаВСистему);
			Для Каждого ИмяРазреза Из ПолныйМассивИмен Цикл
				Если Найти(ИмяРазреза,"Разрез")<>0 Тогда
					ТаблицаОборотовДокументаДляКонтроля.Колонки.Добавить(ИмяРазреза);
					Для Каждого СтрокаТаблицы Из ТаблицаОборотовДокументаДляКонтроля Цикл
						СтрокаТаблицы[ИмяРазреза]=СтрокаТаблицы.ДополнительныеРазрезы[ИмяРазреза];
					КонецЦикла;
				КонецЕсли;
				СтруктураДанных.Вставить(ИмяРазреза,ТаблицаОборотовДокументаДляКонтроля.ВыгрузитьКолонку(ИмяРазреза));	
			КонецЦикла;
			
			СписокЛимитов = фин_УправлениеЗависимостямиСтатейБюджетов.ПолучитьТаблицуКонтролирующихПравил(ТаблицаОборотовДокументаДляКонтроля.ВыгрузитьКолонку("ФинансовыйПоказатель"),Неопределено,БюджетированиеПоОрганизациям,Регистратор.Организация,СтруктураДанных,Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении,Истина);
			
			МассивУдаляемых = Новый Массив;
			Для Каждого СтрокаЛимит Из СписокЛимитов Цикл
				Если фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаЛимит.Период,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СтрокаЛимит.КонтролирующийСценарий)) <> фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ДатаВводаВСистему,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СтрокаЛимит.КонтролирующийСценарий)) Тогда
					МассивУдаляемых.Добавить(СтрокаЛимит);
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаЛимит Из МассивУдаляемых Цикл
				СписокЛимитов.Удалить(СтрокаЛимит);
			КонецЦикла;
			
			Для Каждого СтрокаОборотовДляКонтроля Из ТаблицаОборотовДокументаДляКонтроля Цикл
				
				ПроверкаПройдена = Истина;
				ТабКонтролируемыхЗначений=ПроверкаКонтролируемыхЗначений(Регистратор,СписокЛимитов,СтрокаОборотовДляКонтроля,ТаблицаОборотовДокументаДляКонтроля,БюджетированиеПоОрганизациям,ПолныйМассивИмен,ПроверкаПройдена);
				
				Если (НЕ ПроверкаПройдена) И НЕ РазрешеноПревышениеКонтролируемыхЗначенийПоБюджетам() Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Превышение контролируемого значения. Проведение отменено!");
					РегистрацияЗадачПоПревышению(СтрокаОборотовДляКонтроля.ФинансовыйПоказатель,Регистратор,ТабКонтролируемыхЗначений[0].КонтролирующийСценарий,"Попытка превышения лимита");
					Отказ=Истина;
					Возврат;
				Иначе
					Если (НЕ ПроверкаПройдена) И НЕ РазрешеноПревышениеКонтролируемыхЗначенийПоБюджетам() Тогда
						РегистрацияЗадачПоПревышению(СтрокаОборотовДляКонтроля.ФинансовыйПоказатель,Регистратор,ТабКонтролируемыхЗначений[0].КонтролирующийСценарий,"Проведение документа с превышением лимита");
					КонецЕсли;
					
					Если ТабКонтролируемыхЗначений.Количество()>0 Тогда
						
						фин_ОбщегоНазначенияСервер.ЗагрузитьВТаблицуЗначений(ТабКонтролируемыхЗначений,ТабКонтролируемыхДвижений)
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			ТабКонтролируемыхДвижений.ЗаполнитьЗначения(Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении,"ИспользованиеКонтролируемогоЗначения");
			ТабКонтролируемыхДвижений.ЗаполнитьЗначения(Истина,"Активность");
			Для Каждого СтрокаКонтролируемых Из ТабКонтролируемыхДвижений Цикл
				СтрокаКонтролируемых.Период 			= ДатаВводаВСистему;
				СтрокаКонтролируемых.ПериодПланирования	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ДатаВводаВСистему,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СтрокаКонтролируемых.Сценарий));
			КонецЦикла;
			
			Если БюджетированиеПоОрганизациям Тогда
				//ТабКонтролируемыхДвижений.Колонки.Добавить("Организация");
				ТабКонтролируемыхДвижений.ЗаполнитьЗначения(Организация,"Организация");
			КонецЕсли;
			
			НаборДвижений.Загрузить(ТабКонтролируемыхДвижений);	
			НаборДвижений.Записать();
		КонецЕсли;
		Если РегистрацияПоПлануСчетов Тогда
			// формирование проводок
			Запрос=Новый Запрос;
			ТекстЗапросаВТ="ВЫБРАТЬ
			|	БюджетнаяОперация.ШаблонПроводок,
			|	БюджетнаяОперация.Период,
			|	БюджетнаяОперация.Организация,
			|	БюджетнаяОперация.Сценарий,
			|	БюджетнаяОперация.ФинансовыйПоказатель,
			|	БюджетнаяОперация.УправленческоеПодразделение,
			|	БюджетнаяОперация.Проект,
			|	БюджетнаяОперация.Контрагент,
			|	БюджетнаяОперация.Номенклатура,
			|	БюджетнаяОперация.Валюта КАК Валюта,
			|	БюджетнаяОперация.ДополнительныеРазрезы,
			|	БюджетнаяОперация.Количество,
			|	БюджетнаяОперация.СуммаУпр,
			|	БюджетнаяОперация.ВалютнаяСумма,
			|	БюджетнаяОперация.СуммаСценария
			|ПОМЕСТИТЬ ВТ_ПереданныеДвижения
			|ИЗ
			|	&ВТ КАК БюджетнаяОперация";
			ТекстЗапроса="ВЫБРАТЬ
			|	БюджетнаяОперация.ШаблонПроводок,
			|	БюджетнаяОперация.Период,
			|	БюджетнаяОперация.Организация,
			|	БюджетнаяОперация.Сценарий,
			|	БюджетнаяОперация.ФинансовыйПоказатель,
			|	БюджетнаяОперация.УправленческоеПодразделение,
			|	БюджетнаяОперация.Проект,
			|	БюджетнаяОперация.Контрагент,
			|	БюджетнаяОперация.Номенклатура,
			|	БюджетнаяОперация.Валюта КАК ВалютаОперации,
			|	БюджетнаяОперация.ДополнительныеРазрезы,
			|	БюджетнаяОперация.Количество,
			|	БюджетнаяОперация.СуммаУпр,
			|	БюджетнаяОперация.ВалютнаяСумма КАК Сумма,
			|	БюджетнаяОперация.СуммаСценария
			|ИЗ
			|	ВТ_ПереданныеДвижения КАК БюджетнаяОперация";
			
			ПараметрыВТ = Новый Структура("ТекстВременныхТаблиц,ТаблицаЗначений",ТекстЗапросаВТ,НаборДвиженийОбороты.Выгрузить());
			ТабПроводокДокумента=фин_ПроцедурыМеханизмовБюджетирования.ПолучитьТаблицуПроводокПоПлануСчетовБюджетирования(Регистратор,ТекстЗапроса,ПараметрыВТ,,,,,Истина,,,);
			//НаборДвижений=Источник.Движения.фин_Бюджетирование;
			НаборДвижений = РегистрыБухгалтерии.фин_Бюджетирование.СоздатьНаборЗаписей();
			НаборДвижений.Отбор.Регистратор.Установить(РегистраторФакта);
			НаборДвижений.Прочитать();
			СписокРесурсов = Новый Массив;
			СписокРесурсов.Добавить("ВалютнаяСуммаДт");
			СписокРесурсов.Добавить("ВалютнаяСуммаКт");
			СписокРесурсов.Добавить("КоличествоДт");
			СписокРесурсов.Добавить("КоличествоКт");
			СписокРесурсов.Добавить("СуммаУпр");
			Для Каждого Строка Из  ТабПроводокДокумента Цикл
				Для Каждого Ресурс из СписокРесурсов Цикл
					Если Строка[Ресурс] = Неопределено ИЛИ Строка[Ресурс] = NULL Тогда
						Строка[Ресурс] = 0;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			СтрокиУдалить = ТабПроводокДокумента.НайтиСтроки(Новый Структура("ВалютнаяСуммаДт,ВалютнаяСуммаКт,СуммаУпр,КоличествоДт,КоличествоКт",0,0,0,0,0));
			Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
				ТабПроводокДокумента.Удалить(СтрокаУдалить);
			КонецЦикла;
			ТабПроводокДокумента.Колонки.Добавить("Сценарий");
			ТабПроводокДокумента.Колонки.Добавить("Организация");     /// !!!!!!!!!!!!
			ТабПроводокДокумента.ЗаполнитьЗначения(Организация,"Организация");
			ТабПроводокДокумента.Колонки.Добавить("СуммаСценария");
			фин_ПроцедурыУчетаПоУправленческомуПлануСчетовСервер.ЗаполнитьНаборЗаписейРегистраБухгалтерииБюджетирование(НаборДвижений,ТабПроводокДокумента);
			НаборДвижений.Записать();
		КонецЕсли;
	ИначеЕсли НЕ Отказ Тогда
		НаборДвиженийОбороты.Записать();
	КонецЕсли;
	Если Не Отказ И РегистрацияПрогнозныхДанных Тогда
		Если  НаборДвиженийПрогноз.Количество() >0  Тогда
			ДатаСреза = Регистратор.Дата;
			
			БюджетированиеПоОрганизациям = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
			
			ВалютаУправленческогоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
			ВалютаРегл = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
			Если ВалютаУправленческогоУчета.Пустая() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Проведение документа "+Строка(Регистратор)+" по регистрам бюджетирования невозможно: не задана валюта управленческого учета",,,,Отказ);
				Возврат;
			КонецЕсли;
			Организация = Справочники.Организации.ПустаяСсылка();
			Если БюджетированиеПоОрганизациям Тогда
				Организация = Регистратор.Организация;
			КонецЕсли;
			Для Каждого СтрокаНабора Из НаборДвиженийПрогноз Цикл
				СтрокаНабора.Период = Регистратор.Дата;
				СтрокаНабора.Активность = Истина;
				СтрокаНабора.Регистратор = Регистратор;
				СтрокаНабора.ПериодПланирования = Регистратор.Дата;
				СтрокаНабора.Организация = Организация;
				Если Не ЗначениеЗаполнено(СтрокаНабора.Валюта) Тогда
					СтрокаНабора.Валюта = ВалютаРегл;
				КонецЕсли;
			КонецЦикла;
			// расчет зависимостей - начало
			МассивИмен = Новый Массив;
			ПолныйМассивИмен = Новый Массив;
			Для Каждого РазрезЭлемент Из СписокРазрезовУчета Цикл
				ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
				ПолныйМассивИмен.Добавить(ИмяРазреза);
				Если Найти(ИмяРазреза,"Разрез")=0 Тогда
					Продолжить;
				КонецЕсли;
				МассивИмен.Добавить(ИмяРазреза);
			КонецЦикла;
			
			ПромежуточныйНаборДвиженийОбороты = НаборДвиженийПрогноз.Выгрузить().Скопировать(Новый Структура("Схема",НаборШаблонов));
			Если фин_УправлениеЗависимостямиСтатейБюджетов.ИмеютсяЗависимостиПоФактическимДанным(ПромежуточныйНаборДвиженийОбороты.ВыгрузитьКолонку("ФинансовыйПоказатель"),ДатаСреза,Организация) Тогда
				НаборДвиженийПрогноз.Записать();
				ЗависимыеОбороты = НаборДвиженийПрогноз.ВыгрузитьКолонки();
				ПромежуточныйНаборДвиженийОбороты.Колонки.ВалютнаяСумма.Имя= "Сумма";
				ЗависимыеОбороты.Колонки.ВалютнаяСумма.Имя= "Сумма";
				Для Каждого РазрезЭлемент Из СписокРазрезовУчета Цикл
					ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
					Если Найти(ИмяРазреза,"Разрез")=0 Тогда
						Продолжить;
					КонецЕсли;
					ПромежуточныйНаборДвиженийОбороты.Колонки.Добавить(ИмяРазреза,фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(РазрезЭлемент.Значение,КЭШ_Разрезы).ТипЗначения);
					ЗависимыеОбороты.Колонки.Добавить(ИмяРазреза,фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(РазрезЭлемент.Значение,КЭШ_Разрезы).ТипЗначения);
				КонецЦикла;
				Для Инд=1 По 10 Цикл
					Если ПромежуточныйНаборДвиженийОбороты.Колонки.Найти("Разрез"+Строка(Инд))=Неопределено Тогда
						ПромежуточныйНаборДвиженийОбороты.Колонки.Добавить("Разрез"+Строка(Инд),Новый ОписаниеТипов("Строка"));
						ЗависимыеОбороты.Колонки.Добавить("Разрез"+Строка(Инд),Новый ОписаниеТипов("Строка"));
					КонецЕсли;
				КонецЦикла;
				Для Каждого СтрокаНабора Из ПромежуточныйНаборДвиженийОбороты Цикл
					Для Каждого ИмяРазреза Из МассивИмен Цикл
						СтрокаНабора[ИмяРазреза] = СтрокаНабора.ДополнительныеРазрезы[ИмяРазреза];
					КонецЦикла;
				КонецЦикла;
				фин_УправлениеЗависимостямиСтатейБюджетов.РассчитатьЗависимыеОбороты(,ПромежуточныйНаборДвиженийОбороты,ЗависимыеОбороты,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий(),Организация,БюджетированиеПоОрганизациям,Регистратор.Дата,ВестиУчетПоПроектам,Истина);
				ЗависимыеОбороты.Колонки.Сумма.Имя= "ВалютнаяСумма";
				Для Каждого СтрокаЗависимых Из ЗависимыеОбороты Цикл
					СтруктураРазрезовСтроки = Новый Структура;
					Для Каждого Разрез Из МассивИмен Цикл
						Если Найти(Разрез,"Разрез")<>0 Тогда
							СтруктураРазрезовСтроки.Вставить(Разрез,СтрокаЗависимых[Разрез]);
						КонецЕсли;
					КонецЦикла;
					СтрокаЗависимых.ДополнительныеРазрезы = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОпределитьПозициюКлассификатораПоСтруктуре(СтруктураРазрезовСтроки);
				КонецЦикла;
				
				фин_ОбщегоНазначенияСервер.ЗагрузитьВТаблицуЗначений(ЗависимыеОбороты,НаборДвиженийПрогноз);
			КонецЕсли;
			// расчет зависимостей - конец
			
			// расчет управленческой суммы
			СтруктураКурсов = Новый Соответствие;
			Для Каждого СтрокаНабора Из НаборДвиженийПрогноз Цикл
				//СтрокаНабора.Период = Источник.Дата;
				СтрокаНабора.Активность = Истина;
				СтрокаНабора.Регистратор = Регистратор;
				СтрокаНабора.Организация = Организация;
				СтрокаНабора.ПериодПланирования = СтрокаНабора.Период;
				Если Не ЗначениеЗаполнено(СтрокаНабора.Валюта) Тогда
					СтрокаНабора.Валюта = ВалютаРегл;
				КонецЕсли;
				Если СтрокаНабора.Валюта = ВалютаУправленческогоУчета Тогда
					СтрокаНабора.СуммаУпр = СтрокаНабора.ВалютнаяСумма;
				Иначе
					Курс 		= фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(СтрокаНабора.Валюта,ДатаСреза);
					КурсУпр 	= фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ВалютаУправленческогоУчета,ДатаСреза);
					СтрокаНабора.СуммаУпр=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаНабора.ВалютнаяСумма,
					СтрокаНабора.Валюта,ВалютаУправленческогоУчета,
					Курс.Курс,КурсУпр.Курс,
					Курс.Кратность,КурсУпр.Кратность);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		НаборДвиженийПрогноз.Записать();
	КонецЕсли;
КонецПроцедуры //ФормироватьПроводкиПоБюджетированию

Функция ЗависимостьПоТекущемуШаблону(СтрокаНабора,Набор,НаборШаблонов)
	Если СтрокаНабора.НомерСтрокиИсточника<>0 Тогда
		СтрокаРодитель = Набор[СтрокаНабора.НомерСтрокиИсточника-1];
		Если ЗначениеЗаполнено(СтрокаРодитель.Схема) Тогда
			Если ТипЗнч(фин_ОбщегоНазначенияВызовСервераПовтИсп.ОбъектНастроекФактическихДанных(СтрокаРодитель.Схема))=Тип("СправочникСсылка.фин_КлассификаторРегистров") И СтрокаРодитель.Схема = НаборШаблонов Тогда
				Возврат Истина;
			КонецЕсли;
		ИначеЕсли СтрокаНабора.НомерСтрокиИсточника <> СтрокаРодитель.НомерСтрокиИсточника Тогда
			Возврат ЗависимостьПоТекущемуШаблону(СтрокаРодитель,Набор,НаборШаблонов);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СтрокаНабора.Схема) Тогда
		Если ТипЗнч(фин_ОбщегоНазначенияВызовСервераПовтИсп.ОбъектНастроекФактическихДанных(СтрокаНабора.Схема))=Тип("СправочникСсылка.фин_КлассификаторРегистров") И СтрокаНабора.Схема = НаборШаблонов Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции


//Процедура ОтразитьВОборотахПоБюджетам
//
Процедура ОтразитьВОборотахПоБюджетамПоРегистру(Шаблон,НаборДвиженийОбороты,Источник,Отказ,ТаблицаПереданныхДвижений,ВыборкаВидыРаспределения,ВестиУчетПоПроектам,СписокРазрезовУчета,Регистратор,РегистрацияПрогнозныхДанных=Ложь,НаборДвиженийПрогноз=Неопределено,ПолучатьОрганизациюИзСтрокНабора)
	
	КЭШСписков = Неопределено;
	
	НаборПолей = Новый Массив;
	НаборПолей.Добавить("ФинансовыйПоказатель");
	Для Каждого РазрезУчета Из СписокРазрезовУчета Цикл
		НаборПолей.Добавить(фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезУчета.Значение));
	КонецЦикла;
	НаборПолей.Добавить("Валюта");
	НаборПолей.Добавить("Количество");
	НаборПолей.Добавить("Сумма");
	ТаблицаДвижений = НаборДвиженийОбороты.ВыгрузитьКолонки();
	ТаблицаДвижений.Колонки.Удалить("Проект");
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникаПроектов());
	МассивТипов.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникВидыРаспределенияПоПроектам());
	ТаблицаДвижений.Колонки.Добавить("Проект",Новый ОписаниеТипов(МассивТипов));
	Для Каждого РазрезУчета Из СписокРазрезовУчета Цикл
		Имя = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезУчета.Значение);
		Если Найти(Имя,"Разрез")<>0 Тогда
			ТаблицаДвижений.Колонки.Добавить(Имя,фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(РазрезУчета.Значение).ТипЗначения);
		КонецЕсли;	
	КонецЦикла;
	//ТаблицаДвижений.Колонки.Добавить("НомерСтрокиИсточника",Новый ОписаниеТипов("Число"));
	ТаблицаДвижений.Колонки.Добавить("ПредставлениеИсточника",Новый ОписаниеТипов("Строка"));
	ТаблицаДвижений.Колонки.Добавить("ПрогнозноеЗначение",Новый ОписаниеТипов("Булево"));
	
	ГруппыШаблонов 		= ПолучитьГруппыПравилСхемы(Шаблон);
	НастройкиПравил 	= ПолучитьПравилаСхемы(Шаблон,Источник.Дата);
	СписокРазрезовСНастройкойОбязательности = Новый Массив;
	СписокРазрезовСНастройкойОбязательности.Добавить("УправленческоеПодразделение");
	СписокРазрезовСНастройкойОбязательности.Добавить("Проект");
	СписокРазрезовСНастройкойОбязательности.Добавить("Контрагент");
	СписокРазрезовСНастройкойОбязательности.Добавить("Номенклатура");
	СписокРазрезовСНастройкойОбязательности.Добавить("Разрез1");
	СписокРазрезовСНастройкойОбязательности.Добавить("Разрез2");
	СписокРазрезовСНастройкойОбязательности.Добавить("Разрез3");
	СписокРазрезовСНастройкойОбязательности.Добавить("Разрез4");
	СписокРазрезовСНастройкойОбязательности.Добавить("Разрез5");
	СписокРазрезовСНастройкойОбязательности.Добавить("Разрез6");
	СписокРазрезовСНастройкойОбязательности.Добавить("Разрез7");
	СписокРазрезовСНастройкойОбязательности.Добавить("Разрез8");
	СписокРазрезовСНастройкойОбязательности.Добавить("Разрез9");
	СписокРазрезовСНастройкойОбязательности.Добавить("Разрез10");
	СтрокиОбработанныеПоВышестоящимГруппамПравил = Новый Массив;
	Для Каждого ГруппаШаблонов Из ГруппыШаблонов Цикл
		мШаблоныГруппы = НастройкиПравил.НайтиСтроки(Новый Структура("Владелец",ГруппаШаблонов.Группа));
		ШаблоныГруппы = НастройкиПравил.СкопироватьКолонки();
		Для Каждого СтрокаШаблон Из мШаблоныГруппы Цикл
			Если СтрокаШаблон.ПрогнозноеЗначение И НЕ РегистрацияПрогнозныхДанных Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаШаблон.СпособИспользования <> Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиНеНайденУдовлетворяющийУсловиюШаблон Тогда
				НоваяСтрокаШаблона = ШаблоныГруппы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаШаблона,СтрокаШаблон);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаШаблон Из мШаблоныГруппы Цикл
			Если СтрокаШаблон.ПрогнозноеЗначение И НЕ РегистрацияПрогнозныхДанных Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаШаблон.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиНеНайденУдовлетворяющийУсловиюШаблон Тогда
				НоваяСтрокаШаблона = ШаблоныГруппы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаШаблона,СтрокаШаблон);
			КонецЕсли;
		КонецЦикла;
		ШаблоныГруппы.ЗаполнитьЗначения(Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах,"ВидДанных");
		ОтраженныеСтроки = Новый Массив;
		Если ГруппаШаблонов.Группа = Шаблон Тогда
			Для Каждого Правило Из ШаблоныГруппы Цикл
				ТабличнаяЧасть = ТаблицаПереданныхДвижений;
				СинонимРегистра = Шаблон.Владелец.Наименование;
				ИмяТабличнойЧасти  = Шаблон.Владелец.ПрограммныйИдентификатор;
				Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
					ПредставлениеИсточника	= "набору движений """+СинонимРегистра+""", строка № "+Строка(ТабличнаяЧасть.Индекс(СтрокаТабличнойЧасти)+1);
					ВыполнитьОтражениеПоСтрокеГруппыШаблонов(Регистратор,ТаблицаДвижений,Шаблон,Правило,НаборПолей,СписокРазрезовСНастройкойОбязательности,Неопределено,КЭШСписков,Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах,ПредставлениеИсточника,?(ТабличнаяЧасть.Колонки.Найти("НомерСтроки")<>Неопределено,СтрокаТабличнойЧасти.НомерСтроки,ТабличнаяЧасть.Индекс(СтрокаТабличнойЧасти)+1),СтрокаТабличнойЧасти,ИмяТабличнойЧасти,Отказ,,ОтраженныеСтроки,?(ПолучатьОрганизациюИзСтрокНабора,СтрокаТабличнойЧасти.Организация,Неопределено));
				КонецЦикла;
			КонецЦикла;
		Иначе
				ТабличнаяЧасть = ТаблицаПереданныхДвижений;
				ИмяТабличнойЧасти  = Шаблон.Владелец.ПрограммныйИдентификатор;
				СинонимРегистра = Шаблон.Владелец.НаименованиеПолное;
				Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
					Если (ГруппаШаблонов.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ВсегдаЕслиУдовлетворяетУсловию ИЛИ ГруппаШаблонов.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиУдовлетворяетУсловию) И  Не усд_ПроцедурыСогласованияДокументов.УсловиеПоСтрокеВыполняется(ГруппаШаблонов.Условие,Источник.Ссылка,СтрокаТабличнойЧасти,,Источник.Ссылка,КЭШСписков) Тогда
						Продолжить;
					КонецЕсли;
					Если ГруппаШаблонов.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиУдовлетворяетУсловию ИЛИ ГруппаШаблонов.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиНеНайденУдовлетворяющийУсловиюШаблон Тогда
						Если СтрокиОбработанныеПоВышестоящимГруппамПравил.Найти(ТабличнаяЧасть.Индекс(СтрокаТабличнойЧасти))<>Неопределено Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					Если ГруппаШаблонов.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиУдовлетворяетУсловию Тогда
						СтрокиОбработанныеПоВышестоящимГруппамПравил.Добавить(ТабличнаяЧасть.Индекс(СтрокаТабличнойЧасти));
					КонецЕсли;
					Отражено = Ложь;
					ПредставлениеИсточника	= "набору движений """+СинонимРегистра+""", строка № "+Строка(ТабличнаяЧасть.Индекс(СтрокаТабличнойЧасти)+1);
					ВыполнитьОтражениеПоГруппеШаблонов(Источник,ТаблицаДвижений,Шаблон,ШаблоныГруппы,НастройкиПравил,НаборПолей,СписокРазрезовСНастройкойОбязательности,Неопределено,КЭШСписков,Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах,ПредставлениеИсточника,?(ТабличнаяЧасть.Колонки.Найти("НомерСтроки")<>Неопределено,СтрокаТабличнойЧасти.НомерСтроки,ТабличнаяЧасть.Индекс(СтрокаТабличнойЧасти)+1),СтрокаТабличнойЧасти,ИмяТабличнойЧасти,Отказ,,ОтраженныеСтроки,?(ПолучатьОрганизациюИзСтрокНабора,СтрокаТабличнойЧасти.Организация,Неопределено));
				КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Если ВестиУчетПоПроектам Тогда
		РаспределитьФактическиеДанныеПоПроектам(ТаблицаДвижений, ВыборкаВидыРаспределения);
	КонецЕсли;
	Статьи = ТаблицаДвижений.ВыгрузитьКолонку("ФинансовыйПоказатель");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РазрезыУчета.Ссылка КАК Статья,
		|	РазрезыУчета.Измерение
		|ИЗ
		|	Справочник.фин_ФинансовыеПоказатели.РазрезыУчета КАК РазрезыУчета
		|ГДЕ
		|	РазрезыУчета.Ссылка В (&Статьи)";

	Запрос.УстановитьПараметр("Статьи", Статьи);

	РазрезыПоСтатьям = Запрос.Выполнить().Выгрузить();

	Для Каждого СтрокаНовыхДвижений Из ТаблицаДвижений Цикл
		Если ЗначениеЗаполнено(СтрокаНовыхДвижений.ФинансовыйПоказатель) Тогда
			СтруктураРазрезовСтроки = Новый Структура;
			Для Каждого РазрезУчета Из СписокРазрезовУчета Цикл
				Имя = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезУчета.Значение);
				Если Имя = "Контрагент" ИЛИ Имя = "Номенклатура" ИЛИ Найти(Имя,"Разрез")<>0 Тогда
					Если РазрезыПоСтатьям.НайтиСтроки(Новый Структура("Статья,Измерение",СтрокаНовыхДвижений.ФинансовыйПоказатель,Перечисления.фин_ФактическиеПоказателиБюджетирования[Имя])).Количество()=0 Тогда
						СтрокаНовыхДвижений[Имя]="";
					КонецЕсли;
				КонецЕсли;
				Если Найти(Имя,"Разрез")<>0 Тогда
					СтруктураРазрезовСтроки.Вставить(Имя,СтрокаНовыхДвижений[Имя]);
				КонецЕсли;
			КонецЦикла;
			СтрокаНовыхДвижений.ДополнительныеРазрезы = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОпределитьПозициюКлассификатораПоСтруктуре(СтруктураРазрезовСтроки);
			Если (НЕ СтрокаНовыхДвижений.ФинансовыйПоказатель.УчетПоКоличеству) И СтрокаНовыхДвижений.Количество <>0 Тогда
				СтрокаНовыхДвижений.Количество = 0;
			КонецЕсли;
			Если (НЕ СтрокаНовыхДвижений.ФинансовыйПоказатель.УчетПоСумме) И (СтрокаНовыхДвижений.ВалютнаяСумма <>0 ИЛИ ЗначениеЗаполнено(СтрокаНовыхДвижений.Валюта)) Тогда
				СтрокаНовыхДвижений.ВалютнаяСумма = 0;
				СтрокаНовыхДвижений.Валюта = "";
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаНовыхДвижений.ФинансовыйПоказатель) Тогда
			Если СтрокаНовыхДвижений.Количество = 0 И СтрокаНовыхДвижений.СуммаУпр = 0 И СтрокаНовыхДвижений.ВалютнаяСумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаНовыхДвижений.ПрогнозноеЗначение Тогда
				Если РегистрацияПрогнозныхДанных Тогда
					НоваяСтрока = НаборДвиженийПрогноз.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаНовыхДвижений);
					НоваяСтрока.Схема = Шаблон;
				КонецЕсли;
			Иначе
				НоваяСтрока = НаборДвиженийОбороты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаНовыхДвижений);
				НоваяСтрока.Схема = Шаблон;
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Регистрация фактических данных по бюджетам на основании документа """+Строка(Источник)+""":
			|	при выполнении шаблона """+Строка(Шаблон)+""" (правило: "+СтрокаНовыхДвижений.Правило+")
			|	по "+СтрокаНовыхДвижений.ИмяИсточника+":
			|	не определен финансовый показатель - отражение данной операции по фактическим данным не выполнено!");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ОтразитьВОборотахПоБюджетам


// Функция возвращает признак разрешено ли превышение контролируемых значений по бюджетам пользователям.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если разрешено превышать контролируемые значения, иначе Ложь.
//
Функция РазрешеноПревышениеКонтролируемыхЗначенийПоБюджетам() Экспорт
	Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.ЕстьДополнительноеПравоПользователя("РазрешитьПревышениеКонтролируемыхЗначенийПоБюджетам");
КонецФункции // РазрешеноПревышениеКонтролируемыхЗначенийПоБюджетам()

Функция ОпределитьВозможностьРегистрацииФакта(Имя) Экспорт
	Если Имя = "" ИЛИ Метаданные.НайтиПоПолномуИмени("Документ."+Имя)=Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Подписка = Метаданные.ПодпискиНаСобытия.фин_БюджетированиеФормированиеПроводокПриПроведенииПервичныхДокументов;
	Если Подписка.Источник.СодержитТип(Тип("ДокументОбъект."+Имя)) Тогда
		Возврат Истина;
	КонецЕсли;
	Подписка = Метаданные.ПодпискиНаСобытия.фин_БюджетированиеФормированиеПроводокПриЗаписиПервичныхДокументов;
	Если Подписка.Источник.СодержитТип(Тип("ДокументОбъект."+Имя)) Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

Функция ОпределитьВозможностьРегистрацииФактаРегистром(ПрограммныйИдентификатор,ВидРегистра) Экспорт
	СоответствиеРегистров= Новый Соответствие;
	СоответствиеРегистров.Вставить(Перечисления.фин_ВидыРегистровСистемы.РегистрыСведений,		"РегистрыСведений");
	СоответствиеРегистров.Вставить(Перечисления.фин_ВидыРегистровСистемы.РегистрыБухгалтерии,	"РегистрыБухгалтерии");
	СоответствиеРегистров.Вставить(Перечисления.фин_ВидыРегистровСистемы.РегистрыНакопления,	"РегистрыНакопления");
	СоответствиеРегистров.Вставить(Перечисления.фин_ВидыРегистровСистемы.РегистрыРасчета,		"РегистрыРасчета");
	Возврат ?(ЗначениеЗаполнено(ВидРегистра) И ПрограммныйИдентификатор<>"" И Метаданные[СоответствиеРегистров.Получить(ВидРегистра)].Найти(ПрограммныйИдентификатор)<>Неопределено,Метаданные.ПодпискиНаСобытия.Найти("фин_БюджетированиеФормированиеПроводок"+СоответствиеРегистров.Получить(ВидРегистра)).Источник.СодержитТип(Тип(СтрЗаменить(СоответствиеРегистров.Получить(ВидРегистра),"Регистры","Регистр")+"НаборЗаписей."+ПрограммныйИдентификатор)),Ложь);
КонецФункции