Функция ПолучитьДвиженияЗерновойрасписки(ТекДокумент) Экспорт
	
	Запрос = новый Запрос;
	
	Запрос.УстановитьПараметр("ТекДокумент",ТекДокумент.ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ур_ЗерноНаСкладахОбороты.ЗерноваяРасписка
	|ИЗ
	|	РегистрНакопления.ур_ЗерноНаСкладах.Обороты(, , , ЗерноваяРасписка = &ТекДокумент) 
	|								КАК ур_ЗерноНаСкладахОбороты
	|";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возв = истина;
	Иначе
		Возв = ложь;
	Конецесли;
	
	Возврат Возв;
КонецФункции
	
Процедура УстановитьДоступностьЗерновойРаспискиДляРедактирования(ЭтотОбъект, ЭтаФорма) Экспорт
	
	Если ПолучитьДвиженияЗерновойрасписки(ЭтотОбъект) Тогда
			Сообщить("По зерновой расписке имеются движения.
							|Документ доступен только для просмотра !");
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;
		
Конецпроцедуры

// Процедура установки типа и доступности субконто в зависимости от выбранного счета
//
Процедура ПриВыбореСчетаВТабличномПоле(	Счет, Субконто1, ЭлементДиалогаСубконто1, Субконто2, 
										ЭлементДиалогаСубконто2, Субконто3, ЭлементДиалогаСубконто3,Субконто4, ЭлементДиалогаСубконто4, 
										ЭлементДиалогаСчет = НЕОПРЕДЕЛЕНО, ТолькоПросмотр = ЛОЖЬ) Экспорт
	
	ЭлементыСубконто = Новый Структура("Субконто1,ЭлементДиалогаСубконто1,Субконто2,ЭлементДиалогаСубконто2,Субконто3,ЭлементДиалогаСубконто3,Субконто4,ЭлементДиалогаСубконто4", Субконто1, ЭлементДиалогаСубконто1, Субконто2, ЭлементДиалогаСубконто2, Субконто3, ЭлементДиалогаСубконто3, Субконто4, ЭлементДиалогаСубконто4);
	
	ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
	
	Для Сч = 1 По ЧислоАктивныхСубконто Цикл
		ТипСубк = Счет.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
		
		ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ТолькоПросмотр = ТолькоПросмотр;
		
		Если ТипЗнч(ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч]) = Тип("ПолеВвода") Тогда
			ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ВыбиратьТип = (ТипСубк.Типы().Количество() > 1);
		Иначе
			ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ЭлементУправления.ВыбиратьТип = (ТипСубк.Типы().Количество() > 1);
		КонецЕсли; 
			
		// Чтобы не устанавливался флаг модифицированности при открытии формы
		Если ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]) <> ЭлементыСубконто["Субконто" + Сч] Тогда
			ЭлементыСубконто["Субконто" + Сч] = ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]);
		КонецЕсли;	
				
	КонецЦикла;
	
	Для Сч = (ЧислоАктивныхСубконто + 1) По 4 Цикл
			
		Если Не ЭлементыСубконто["Субконто" + Сч] = Неопределено Тогда
			ЭлементыСубконто["Субконто" + Сч] = Неопределено;
		КонецЕсли;
		
		ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ТолькоПросмотр = Истина;
		
	КонецЦикла;
	
	Если ЭлементДиалогаСчет <> Неопределено Тогда
		ЭлементДиалогаСчет.ТолькоПросмотр = ТолькоПросмотр;
	КонецЕсли;

	Если Не Субконто1 = ЭлементыСубконто.Субконто1 Тогда
		Субконто1 = ЭлементыСубконто.Субконто1;
	КонецЕсли;
	
	Если Не Субконто2 = ЭлементыСубконто.Субконто2 Тогда
		Субконто2 = ЭлементыСубконто.Субконто2;
	КонецЕсли;
	
	Если Не Субконто3 = ЭлементыСубконто.Субконто3 Тогда
		Субконто3 = ЭлементыСубконто.Субконто3;
	КонецЕсли;
	
	Если Не Субконто4 = ЭлементыСубконто.Субконто4 Тогда
		Субконто4 = ЭлементыСубконто.Субконто4;
	КонецЕсли;

КонецПроцедуры // ПриВыбореСчетаВТабличномПоле()

Функция ПолучитьСчетаУчетаРесурсов(ИсточникФинансирования) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникФинансирования",ИсточникФинансирования);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ур_СоответствиеСчетовУчетаРесурсов.СчетУчета,
	|	ур_СоответствиеСчетовУчетаРесурсов.ВидРесурса
	|ИЗ
	|	РегистрСведений.ур_СоответствиеСчетовУчетаРесурсов КАК ур_СоответствиеСчетовУчетаРесурсов
	|ГДЕ
	|	ур_СоответствиеСчетовУчетаРесурсов.ИсточникФинансирования = &ИсточникФинансирования
	|";
	
	тз = Запрос.Выполнить().Выгрузить();
	
	Возврат тз;

КонецФункции

Процедура ВыборСчета(Элемент,ИсточникФинансирования) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИсточникФинансирования", ИсточникФинансирования);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ур_СоответствиеСчетовУчетаРесурсов.СчетУчета Как Счет
	|ИЗ
	|	РегистрСведений.ур_СоответствиеСчетовУчетаРесурсов КАК ур_СоответствиеСчетовУчетаРесурсов
	|ГДЕ
	|	ур_СоответствиеСчетовУчетаРесурсов.ИсточникФинансирования = &ИсточникФинансирования
	|";
	
	ВыборкаСчетов = Запрос.Выполнить().Выбрать();
	СписокСчетов  = Новый СписокЗначений;
	
	Пока ВыборкаСчетов.Следующий() Цикл
		СписокСчетов.Добавить(ВыборкаСчетов.Счет);
	КонецЦикла;

	ФормаВыбора = ПланыСчетов.Типовой.ПолучитьФормуВыбора("ФормаВыбора", Элемент, );

	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Значение      = СписокСчетов;
	ФормаВыбора.ЭлементыФормы.Список.НастройкаОтбора.Ссылка.Доступность = Ложь;
	ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;

	ФормаВыбора.Открыть();
КонецПроцедуры

Процедура ВыборВсехСчетовУчета(Элемент) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ур_СоответствиеСчетовУчетаРесурсов.СчетУчета Как Счет
	|ИЗ
	|	РегистрСведений.ур_СоответствиеСчетовУчетаРесурсов КАК ур_СоответствиеСчетовУчетаРесурсов
	|";
	
	ВыборкаСчетов = Запрос.Выполнить().Выбрать();
	СписокСчетов  = Новый СписокЗначений;
	
	Пока ВыборкаСчетов.Следующий() Цикл
		СписокСчетов.Добавить(ВыборкаСчетов.Счет);
	КонецЦикла;

	ФормаВыбора = ПланыСчетов.Типовой.ПолучитьФормуВыбора("ФормаВыбора", Элемент, );

	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Значение      = СписокСчетов;
	ФормаВыбора.ЭлементыФормы.Список.НастройкаОтбора.Ссылка.Доступность = Ложь;
	ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;

	ФормаВыбора.Открыть();
КонецПроцедуры

Процедура ЗаполнитьСчетУчетаНДСВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти,ДокументОбъект) Экспорт
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетУчета",СтрокаТабличнойЧасти.СчетУчетаБУ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ур_СоответствиеСчетовУчетаРесурсов.СчетУчетаНДС,
	|	ур_СоответствиеСчетовУчетаРесурсов.СчетУчетаНДСПоРеализации
	|ИЗ
	|	РегистрСведений.ур_СоответствиеСчетовУчетаРесурсов КАК ур_СоответствиеСчетовУчетаРесурсов
	|ГДЕ
	|	ур_СоответствиеСчетовУчетаРесурсов.СчетУчета = &СчетУчета
	|";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если Результат.Следующий() Тогда
			СтрокаТабличнойЧасти.СчетУчетаНДС = Результат.СчетУчетаНДС;
		Иначе
			СтрокаТабличнойЧасти.СчетУчетаНДС = Планысчетов.Типовой.ПустаяСсылка();
		Конецесли;
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДСПоРеализации", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если Результат.Следующий() Тогда
			СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации = Результат.СчетУчетаНДСПоРеализации;
		Иначе
			СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации = Планысчетов.Типовой.ПустаяСсылка();
		Конецесли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыборНоменклатуры(Элемент) Экспорт
	
	ФормаВыбора = Справочники.Номенклатура.ПолучитьФормуВыбора(, Элемент, );
	
	ФормаВыбора.СправочникСписок.Отбор.Зерно.Значение = истина;
	ФормаВыбора.СправочникСписок.Отбор.Зерно.Использование = Истина;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Зерно.Доступность = Ложь;
	
	ФормаВыбора.Открыть();

КонецПроцедуры

Функция ПолучитьПредставлениеЗерновойРасписки(ЗерноваяРасписка) Экспорт	
	Если ЗерноваяРасписка<>неопределено Тогда
		Представление = СокрЛП(ЗерноваяРасписка.КодМСХ)+
								" "+СокрЛП(ЗерноваяРасписка.СерияНомерМСХ)+
								" от "+Формат(ЗерноваяРасписка.ДатаВыдачи,"ДФ=dd.MM.yyyy");
	Иначе
		Представление = ЗерноваяРасписка.Представление();						
	КонецЕсли;
	
	Возврат Представление;
КонецФункции

Процедура ВыборЗерновойРасписки(Элемент,СтруктураОтбора) Экспорт
	
	ФормаВыбора = Документы.ур_ЗерноваяРасписка.ПолучитьФормуВыбора(, Элемент, );
	
	ФормаВыбора.ДокументСписок.Отбор.Организация.Значение = СтруктураОтбора.Организация;
	ФормаВыбора.ДокументСписок.Отбор.Организация.Использование = Истина;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	
	ФормаВыбора.ДокументСписок.Отбор.Склад.Значение = СтруктураОтбора.Склад;
	ФормаВыбора.ДокументСписок.Отбор.Склад.Использование = Истина;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Склад.Доступность = Ложь;
	
	ФормаВыбора.ДокументСписок.Отбор.Склад.Значение = СтруктураОтбора.Склад;
	ФормаВыбора.ДокументСписок.Отбор.Склад.Использование = Истина;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Склад.Доступность = Ложь;
	
	ФормаВыбора.ДокументСписок.Отбор.Культура.Значение = СтруктураОтбора.Номенклатура;
	ФормаВыбора.ДокументСписок.Отбор.Культура.Использование = Истина;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Культура.Доступность = Ложь;
	
	
	ФормаВыбора.Открыть();

	
КонецПроцедуры

Функция ПроверкаНаДублированиеЗерновойРасписки(ТабЧасть, СтрокаТЧ, ЗерноваяРасписка) Экспорт	
	
	Отказ=ложь;
	
	Для Каждого СтрокаТовары Из ТабЧасть Цикл
		Если Не СтрокаТовары.НомерСтроки      = СтрокаТЧ.НомерСтроки
			И СтрокаТовары.ЗерноваяРасписка = ЗерноваяРасписка Тогда
			СтрокаТЧ.ЗерноваяРасписка = Документы.ур_ЗерноваяРасписка.ПустаяСсылка();
			Сообщить("Эта зерновая расписка уже выбрана в строке №" + СтрокаТовары.НомерСтроки + "!", СтатусСообщения.Внимание);
			
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Отказ;	
КонецФункции

//
Функция ПодготовитьТаблицуЗерновыхРасписок(ЭтотОбъект) Экспорт
	
	ДокументМетаданные = ЭтотОбъект.Метаданные();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекДокумент",ЭтотОбъект.ссылка);
	
	Запрос.текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	СоответствиеСчетов.ВидРесурса КАК ВидРесурса,
	|	ВЫБОР КОГДА Товары.ЗерноваяРасписка  Есть Null
	|   ТОГДА Значение(Документ.ур_ЗерноваяРасписка.ПустаяСсылка)
	|   ИНАЧЕ Товары.ЗерноваяРасписка
	|	КОНЕЦ КАК ЗерноваяРасписка,
	|	ВЫБОР КОГДА Товары.ЗерноваяРасписка  Есть Null
	|	ТОГДА Значение(Перечисление.ур_ВидыЗерна.Продовольственные)
	|	ИНАЧЕ Товары.ЗерноваяРасписка.ВидЗерна 
	|	КОНЕЦ КАК ВидЗерна,
	|	ЕстьNull(Товары.ЗерноваяРасписка.ГодУрожая,Товары.Номенклатура.ГодУрожая) КАК ГодУрожая,
	|	ЕстьNull(Товары.ЗерноваяРасписка.ВидКультуры,Товары.Номенклатура.ВидКультуры) КАК Культура,
	|	ЕстьNull(Товары.ЗерноваяРасписка.КлассностьКультуры,Товары.Номенклатура.Класс) КАК Класс,
	|	Товары.Количество КАК ЗачтенныйВес
	|ИЗ
	|	Документ."+ДокументМетаданные.Имя+".Товары КАК Товары
	|
	|Левое Соединение
	|      (ВЫБРАТЬ
	|          ур_СоответствиеСчетовУчетаРесурсов.СчетУчета,
	|          ур_СоответствиеСчетовУчетаРесурсов.ВидРесурса
	|		ИЗ
	|			РегистрСведений.ур_СоответствиеСчетовУчетаРесурсов КАК ур_СоответствиеСчетовУчетаРесурсов	
	|       ГДЕ
	|         ур_СоответствиеСчетовУчетаРесурсов.Счетучета В 
	|                 (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|                      Зерно.СчетУчетаБУ
	|				   ИЗ
	|					   Документ."+ДокументМетаданные.Имя+".Товары КАК Зерно
	|                  Где
	|                      Зерно.ссылка = &ТекДокумент
	|                  )
	|        ) КАК СоответствиеСчетов
	|    По Товары.СчетУчетаБУ = СоответствиеСчетов.СчетУчета
	|
	|ГДЕ
	|	Товары.ссылка = &ТекДокумент
	|
	|";
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСчетаУчетаРесурсовПоРеализации(ИсточникФинансирования, СчетУчетаБУ) Экспорт
	
	СтруктураВозврата = Новый Структура("
							|СчетДоходовБУ,
							|СубконтоДоходовБУ1,
							|СубконтоДоходовБУ2,
							|СубконтоДоходовБУ3,
							|СубконтоДоходовБУ4,
							|СчетДоходовКомиссионногоСбораБУ,
							|СчетСписанияСебестоимостиБУ,
							|СубконтоСписанияСебестоимостиБУ1,
							|СубконтоСписанияСебестоимостиБУ2,
							|СубконтоСписанияСебестоимостиБУ3,
							|СубконтоСписанияСебестоимостиБУ4");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникФинансирования",ИсточникФинансирования);
	Запрос.УстановитьПараметр("СчетУчета",СчетУчетаБУ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ур_СоответствиеСчетовУчетаРесурсов.СчетДоходов,
	|	ур_СоответствиеСчетовУчетаРесурсов.СубконтоДоходовБУ1,
	|	ур_СоответствиеСчетовУчетаРесурсов.СубконтоДоходовБУ2,
	|	ур_СоответствиеСчетовУчетаРесурсов.СубконтоДоходовБУ3,
	|	ур_СоответствиеСчетовУчетаРесурсов.СубконтоДоходовБУ4,
	|	ур_СоответствиеСчетовУчетаРесурсов.СчетДоходовКомиссионногоСбора,
	|	ур_СоответствиеСчетовУчетаРесурсов.СчетРасходов,
	|	ур_СоответствиеСчетовУчетаРесурсов.СубконтоРасходовБУ1,
	|	ур_СоответствиеСчетовУчетаРесурсов.СубконтоРасходовБУ2,
	|	ур_СоответствиеСчетовУчетаРесурсов.СубконтоРасходовБУ3,
	|	ур_СоответствиеСчетовУчетаРесурсов.СубконтоРасходовБУ4
	|ИЗ
	|	РегистрСведений.ур_СоответствиеСчетовУчетаРесурсов КАК ур_СоответствиеСчетовУчетаРесурсов
	|ГДЕ
	|	ур_СоответствиеСчетовУчетаРесурсов.ИсточникФинансирования = &ИсточникФинансирования
	|	И ур_СоответствиеСчетовУчетаРесурсов.СчетУчета = &СчетУчета
	|";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		 СтруктураВозврата.СчетДоходовБУ 		  = Результат.СчетДоходов;
		 СтруктураВозврата.СубконтоДоходовБУ1 = Результат.СубконтоДоходовБУ1;
		 СтруктураВозврата.СубконтоДоходовБУ2 = Результат.СубконтоДоходовБУ2;
		 СтруктураВозврата.СубконтоДоходовБУ3 = Результат.СубконтоДоходовБУ3;
		 СтруктураВозврата.СубконтоДоходовБУ4 = Результат.СубконтоДоходовБУ4;
		 СтруктураВозврата.СчетДоходовКомиссионногоСбораБУ  = Результат.СчетДоходовКомиссионногоСбора;
		 СтруктураВозврата.СчетСписанияСебестоимостиБУ 	   = Результат.СчетРасходов;
		 СтруктураВозврата.СубконтоСписанияСебестоимостиБУ1 = Результат.СубконтоРасходовБУ1;
		 СтруктураВозврата.СубконтоСписанияСебестоимостиБУ2 = Результат.СубконтоРасходовБУ2;
		 СтруктураВозврата.СубконтоСписанияСебестоимостиБУ3 = Результат.СубконтоРасходовБУ3;
		 СтруктураВозврата.СубконтоСписанияСебестоимостиБУ4 = Результат.СубконтоРасходовБУ4;
	КонецЕсли;
	
	Возврат СтруктураВозврата;

КонецФункции

Процедура РассчитатьСуммуКомиссионногоСбора(СтрокаТЧ, ЭтотОбъект) Экспорт
	
	МетаданныеДокумента = ЭтотОбъект.Метаданные();	
	
	Запрос = Новый запрос;
	
	запрос.УстановитьПараметр("СчетУчета", СтрокаТЧ.СчетучетаБУ);
	запрос.УстановитьПараметр("КонецПериода", ЭтотОбъект.Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ур_СтавкиКомиссионногоСбораСрезПоследних.Ставка
	|ИЗ
	|	РегистрСведений.ур_СтавкиКомиссионногоСбора.СрезПоследних(&КонецПериода, СчетУчета = &счетучета) КАК ур_СтавкиКомиссионногоСбораСрезПоследних
	|";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	ЗапросИсключения = Новый запрос;
	
	ЗапросИсключения.УстановитьПараметр("СчетУчета", СтрокаТЧ.СчетучетаБУ);
	ЗапросИсключения.УстановитьПараметр("КонецПериода", ЭтотОбъект.Дата);
	ЗапросИсключения.УстановитьПараметр("ТипОперации", ЭтотОбъект.ТипОперации);
	
	ЗапросИсключения.Текст = 
	"ВЫБРАТЬ
	|	ур_ТипыОперацийИсключаемыеИзРасчетаКомСбораСрезПоследних.ТипОперации
	|ИЗ
	|	РегистрСведений.ур_ТипыОперацийИсключаемыеИзРасчетаКомСбора.СрезПоследних(
	|			&КонецПериода,
	|			СчетУчета = &счетучета
	|				И ТипОперации = &ТипОперации) КАК ур_ТипыОперацийИсключаемыеИзРасчетаКомСбораСрезПоследних";
	
	РезультатИсключения = ЗапросИсключения.Выполнить().Выбрать();
	
	если Результат.Следующий() Тогда
		Если РезультатИсключения.Следующий() Тогда
			Ставка = 0 ;
		Иначе
			Ставка = Результат.ставка;
		КонецЕсли;
	Иначе
		Ставка = 0 ;
	КонецЕсли;
	
	Если ЭтотОбъект.СуммаВключаетНДС Тогда
		СтрокаТЧ.СуммаКомиссионногоСбора = Окр(СтрокаТЧ.Сумма*Ставка/100,2,1);
	Иначе
		СтрокаТЧ.СуммаКомиссионногоСбора = Окр((СтрокаТЧ.Сумма+СтрокаТЧ.СуммаНДС)*Ставка/100,2,1);
	КонецЕсли;
	
	УчитыватьНДС = Истина;
	СуммаВключаетНДС = Истина;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента ) Тогда
		УчитыватьНДС = ЭтотОбъект.УчитыватьНДС;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента ) Тогда
		СуммаВключаетНДС = ЭтотОбъект.СуммаВключаетНДС;
	КонецЕсли;

	ОсновнаяСтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяСтавкаНДС");

	СтрокаТЧ.СуммаНДСКомиссионногоСбора= УчетНДСИАкциза.РассчитатьСуммуНДС(СтрокаТЧ.СуммаКомиссионногоСбора,
														   Истина, 
														   Истина,
														   УчетНДСИАкциза.ПолучитьСтавкуНДС(ОсновнаяСтавкаНДС),
														   0,
														   Ложь);

Конецпроцедуры

Функция ПроверкаЗачтенногоВесаПоЗерновойРасписке(СтрокаТабличнойЧасти) Экспорт
	Отказ = Ложь ;
	Если СтрокаТабличнойЧасти.ЗерноваяРасписка.Зачтенныйвес<СтрокаТабличнойЧасти.Количество Тогда
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.ЗерноваяРасписка.Зачтенныйвес;
		ТекстСообщения = "Вес не может превышать вес по зерновой расписке";
		
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, отказ,  "", Неопределено);
		
	КонецЕсли;
	
	Возврат Отказ;	
КонецФункции

Функция ПолучитьСтатусЗерновойРасписки(ЭтотОбъект) Экспорт
	
	Запрос = новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериода",КонецДня(ОбщегоНазначения.ПолучитьРабочуюДату()));
	Запрос.УстановитьПараметр("ЗерноваяРасписка",ЭтотОбъект.ссылка);
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ур_СтатусыЗерновыхРасписокСрезПоследних.Статус
	|ИЗ
	|	РегистрСведений.ур_СтатусыЗерновыхРасписок.СрезПоследних(&КонецПериода, 
	|												ЗерноваяРасписка = &ЗерноваяРасписка)
	|				КАК ур_СтатусыЗерновыхРасписокСрезПоследних
	|";
	
	Результат = запрос.Выполнить().Выбрать();
	Если Результат.Следующий() тогда
		ВозвСтатус = Результат.Статус;
	иначе
		ВозвСтатус = Неопределено;
	КонецЕсли;
	
	Возврат ВозвСтатус;	
КонецФункции

Функция ПолучитьСтатусПогашения(ЭтотОбъект) Экспорт
	
	Запрос = новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериода",КонецДня(ОбщегоНазначения.ПолучитьРабочуюДату()));
	Запрос.УстановитьПараметр("ЗерноваяРасписка",ЭтотОбъект.ссылка);
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ур_ПогашенияЗерновыхРасписок.ВидПогашения КАК Статус
	|ИЗ
	|	РегистрСведений.ур_ПогашенияЗерновыхРасписок КАК ур_ПогашенияЗерновыхРасписок
	|ГДЕ
	|	ур_ПогашенияЗерновыхРасписок.ЗерноваяРасписка = &ЗерноваяРасписка";
	
	Результат = запрос.Выполнить().Выбрать();
	Если Результат.Следующий() тогда
		ВозвСтатус = Результат.Статус;
	иначе
		ВозвСтатус = Неопределено;
	КонецЕсли;
	
	Возврат ВозвСтатус;	
КонецФункции

Процедура ПолучитьИндоссаменты(ДокументОбъект, ФормаДокумента) Экспорт
	
	Запрос = Новый запрос;
	
	Запрос.УстановитьПараметр("ЗерноваяРасписка",ДокументОбъект.ссылка);
	
	Запрос.Текст =
	 "ВЫБРАТЬ
	 |	ур_ИндоссаментыЗерновыхРасписок.Период КАК Дата,
	 |	ур_ИндоссаментыЗерновыхРасписок.Индоссат,
	 |	ур_ИндоссаментыЗерновыхРасписок.Индоссант
	 |ИЗ
	 |	РегистрСведений.ур_ИндоссаментыЗерновыхРасписок КАК ур_ИндоссаментыЗерновыхРасписок
	 |ГДЕ
	 |	ур_ИндоссаментыЗерновыхРасписок.ЗерноваяРасписка = &ЗерноваяРасписка
	 |";
	 
	 тз = Запрос.Выполнить().Выгрузить();
	 Сообщить(тз.Количество());
	 
	  ФормаДокумента.ТаблицаИндоссаментов = Запрос.Выполнить().Выгрузить();
	  
КонецПроцедуры

Процедура ОткрытьДокументЗерноваяРасписка(МетаданныеДока, СтрокаТЧ, ИмяТаблЧасти) Экспорт
	
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЗерноваяРасписка",МетаданныеДока,ИмяТаблЧасти) Тогда
		ВыбДокумент =  СтрокаТЧ.ЗерноваяРасписка.ПолучитьОбъект();
		Если ВыбДокумент <> Неопределено Тогда
			ВыбДокумент.ПолучитьФорму().Открыть();
		КонецЕсли;
	Конецесли;
	
КонецПроцедуры

Функция ПолучитьВидРесурса(источникФинансирования, СчетУчетаБУ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникФинансирования",ИсточникФинансирования);
	Запрос.УстановитьПараметр("СчетУчета",СчетУчетаБУ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ур_СоответствиеСчетовУчетаРесурсов.ВидРесурса
	|ИЗ
	|	РегистрСведений.ур_СоответствиеСчетовУчетаРесурсов КАК ур_СоответствиеСчетовУчетаРесурсов
	|ГДЕ
	|	ур_СоответствиеСчетовУчетаРесурсов.ИсточникФинансирования = &ИсточникФинансирования
	|	И ур_СоответствиеСчетовУчетаРесурсов.Счетучета = &счетУчета
	|";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ВозвВид = Результат.ВидРесурса;
	Иначе
		ВозвВид = Справочники.ур_ВидыРесурсов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВозвВид;

КонецФункции

Функция ПодготовитьТаблицуПриходаЗерновыхРасписокПриРеализации(ДокументОбъект) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекДокумент",ДокументОбъект.ссылка);
	Запрос.УстановитьПараметр("ПустаяСсылка",Документы.ур_ЗерноваяРасписка.ПустаяСсылка());
	
	Запрос.текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	СоответствиеСчетов.ВидРесурса КАК ВидРесурса,
	|	Товары.НоваяЗерноваяРасписка КАК ЗерноваяРасписка,
	|	Товары.НоваяЗерноваяРасписка.ВидЗерна КАК ВидЗерна,
	|	Товары.НоваяЗерноваяРасписка.ГодУрожая КАК ГодУрожая,
	|	Товары.НоваяЗерноваяРасписка.ВидКультуры КАК Культура,
	|	Товары.НоваяЗерноваяРасписка.КлассностьКультуры КАК Класс,
	|	Товары.НоваяЗерноваяРасписка.ЗачтенныйВес КАК ЗачтенныйВесПоЗР,
	|	Товары.ЗерноваяРасписка.ЗачтенныйВес-Товары.Количество КАК ЗачтенныйВес
	|ИЗ
	|	Документ.ур_РеализацияЗерна.Товары КАК Товары
	|
	|Левое Соединение
	|      (ВЫБРАТЬ
	|          ур_СоответствиеСчетовУчетаРесурсов.СчетУчета,
	|          ур_СоответствиеСчетовУчетаРесурсов.ВидРесурса
	|		ИЗ
	|			РегистрСведений.ур_СоответствиеСчетовУчетаРесурсов КАК ур_СоответствиеСчетовУчетаРесурсов	
	|       ГДЕ
	|         ур_СоответствиеСчетовУчетаРесурсов.Счетучета В 
	|                 (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|                      Зерно.СчетУчетаБУ
	|				   ИЗ
	|					   Документ.ур_РеализацияЗерна.Товары КАК Зерно
	|                  Где
	|                      Зерно.ссылка = &ТекДокумент
	|                  )
	|        ) КАК СоответствиеСчетов
	|    По Товары.СчетУчетаБУ = СоответствиеСчетов.СчетУчета
	|
	|ГДЕ
	|	Товары.ссылка = &ТекДокумент
	|   И Товары.НоваяЗерноваяРасписка <> &ПустаяСсылка
	|
	|
	|";
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;

КонецФункции

Функция ПодготовитьТаблицуРасходаЗерновыхРасписокПриРеализации(ДокументОбъект) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекДокумент",ДокументОбъект.ссылка);
	Запрос.УстановитьПараметр("ПустаяСсылка",Документы.ур_ЗерноваяРасписка.ПустаяСсылка());
	
	Запрос.текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	СоответствиеСчетов.ВидРесурса КАК ВидРесурса,
	|	Товары.ЗерноваяРасписка КАК ЗерноваяРасписка,
	|	Товары.ЗерноваяРасписка.ВидЗерна КАК ВидЗерна,
	|	Товары.ЗерноваяРасписка.ГодУрожая КАК ГодУрожая,
	|	Товары.ЗерноваяРасписка.ВидКультуры КАК Культура,
	|	Товары.ЗерноваяРасписка.КлассностьКультуры КАК Класс,
	|	Товары.Количество КАК ЗачтенныйВес
	|ИЗ
	|	Документ.ур_РеализацияЗерна.Товары КАК Товары
	|
	|Левое Соединение
	|      (ВЫБРАТЬ
	|          ур_СоответствиеСчетовУчетаРесурсов.СчетУчета,
	|          ур_СоответствиеСчетовУчетаРесурсов.ВидРесурса
	|		ИЗ
	|			РегистрСведений.ур_СоответствиеСчетовУчетаРесурсов КАК ур_СоответствиеСчетовУчетаРесурсов	
	|       ГДЕ
	|         ур_СоответствиеСчетовУчетаРесурсов.Счетучета В 
	|                 (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|                      Зерно.СчетУчетаБУ
	|				   ИЗ
	|					   Документ.ур_РеализацияЗерна.Товары КАК Зерно
	|                  Где
	|                      Зерно.ссылка = &ТекДокумент
	|                  )
	|        ) КАК СоответствиеСчетов
	|    По Товары.СчетУчетаБУ = СоответствиеСчетов.СчетУчета
	|
	|ГДЕ
	|	Товары.ссылка = &ТекДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	СоответствиеСчетов.ВидРесурса КАК ВидРесурса,
	|	Товары.ЗерноваяРасписка.ВидЗерна КАК ВидЗерна,
	|	Товары.ЗерноваяРасписка КАК ЗерноваяРасписка,
	|	Товары.ЗерноваяРасписка.ГодУрожая КАК ГодУрожая,
	|	Товары.ЗерноваяРасписка.ВидКультуры КАК Культура,
	|	Товары.ЗерноваяРасписка.КлассностьКультуры КАК Класс,
	|	Товары.ЗерноваяРасписка.ЗачтенныйВес-Товары.Количество КАК ЗачтенныйВес
	|ИЗ
	|	Документ.ур_РеализацияЗерна.Товары КАК Товары
	|
	|Левое Соединение
	|      (ВЫБРАТЬ
	|          ур_СоответствиеСчетовУчетаРесурсов.СчетУчета,
	|          ур_СоответствиеСчетовУчетаРесурсов.ВидРесурса
	|		ИЗ
	|			РегистрСведений.ур_СоответствиеСчетовУчетаРесурсов КАК ур_СоответствиеСчетовУчетаРесурсов	
	|       ГДЕ
	|         ур_СоответствиеСчетовУчетаРесурсов.Счетучета В 
	|                 (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|                      Зерно.СчетУчетаБУ
	|				   ИЗ
	|					   Документ.ур_РеализацияЗерна.Товары КАК Зерно
	|                  Где
	|                      Зерно.ссылка = &ТекДокумент
	|                  )
	|        ) КАК СоответствиеСчетов
	|    По Товары.СчетУчетаБУ = СоответствиеСчетов.СчетУчета
	|
	|ГДЕ
	|	Товары.ссылка = &ТекДокумент
	|   И Товары.ЗерноваяРасписка.ЗачтенныйВес <> Товары.Количество
	|   И Товары.НоваяЗерноваяРасписка <> &ПустаяСсылка
	|
	|
	|";
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
КонецФункции

Функция ПодготовитьТаблицуЗерновыхРасписокПриПереоформлении(ДокументОбъект) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекДокумент",ДокументОбъект.ссылка);
	
	Запрос.текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.СчетУчетаБУ КАК СчетУчетаБУ,
	|	Товары.ЗерноваяРасписка КАК ЗерноваяРаспискаСписания,
	|	Товары.НоваяЗерноваяРасписка КАК ЗерноваяРасписка,
	|	Сумма(Товары.нКоличество) КАК ЗачтенныйВес,
	|	Сумма(Товары.нСумма) КАК Сумма
	|ИЗ
	|	Документ.ур_ПереоформлениеЗерновыхРасписок.Товары КАК Товары
	|
	|ГДЕ
	|	Товары.ссылка = &ТекДокумент
	|СГРУППИРОВАТЬ ПО СчетУчетаБУ,ЗерноваяРасписка,НоваяЗерноваяРасписка
	|";
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;

КонецФункции

Функция ПодготовитьТаблицуПриходаЗерновыхРасписокПриПереоформлении(ДокументОбъект) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекДокумент",ДокументОбъект.ссылка);
	
	Запрос.текст =
	"ВЫБРАТЬ
	|	Товары.ссылка.ВидРесурса КАК ВидРесурса,
	|	Товары.НоваяЗерноваяРасписка КАК ЗерноваяРасписка,
	|	Товары.НоваяЗерноваяРасписка.ВидЗерна КАК ВидЗерна,
	|	Товары.НоваяЗерноваяРасписка.ГодУрожая КАК ГодУрожая,
	|	Товары.НоваяЗерноваяРасписка.ВидКультуры КАК Культура,
	|	Товары.НоваяЗерноваяРасписка.КлассностьКультуры КАК Класс,
	|	Товары.нКоличество КАК ЗачтенныйВес
	|ИЗ
	|	Документ.ур_ПереоформлениеЗерновыхРасписок.Товары КАК Товары
	|
	|ГДЕ
	|	Товары.ссылка = &ТекДокумент
	|
	|";
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;

КонецФункции

Функция ПодготовитьТаблицуРасходаЗерновыхРасписокПриПереоформлении(ДокументОбъект) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекДокумент",ДокументОбъект.ссылка);
	
	Запрос.текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.ссылка.ВидРесурса КАК ВидРесурса,
	|	Товары.ЗерноваяРасписка КАК ЗерноваяРасписка,
	|	Товары.ЗерноваяРасписка.ВидЗерна КАК ВидЗерна,
	|	Товары.ЗерноваяРасписка.ГодУрожая КАК ГодУрожая,
	|	Товары.ЗерноваяРасписка.ВидКультуры КАК Культура,
	|	Товары.ЗерноваяРасписка.КлассностьКультуры КАК Класс,
	|	Товары.Количество КАК ЗачтенныйВес
	|ИЗ
	|	Документ.ур_ПереоформлениеЗерновыхРасписок.Товары КАК Товары
	|ГДЕ
	|	Товары.ссылка = &ТекДокумент
	|";
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
КонецФункции

Функция ПодготовитьТаблицуПриходаЗерновыхРасписокПриПереоформленииРесурсов(ДокументОбъект) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекДокумент",ДокументОбъект.ссылка);
	
	Запрос.текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	СоответствиеСчетов.ВидРесурса КАК ВидРесурса,
	|	Товары.ЗерноваяРасписка КАК ЗерноваяРасписка,
	|	Товары.ЗерноваяРасписка.ВИдЗерна КАК ВИдЗерна,
	|	Товары.ЗерноваяРасписка.ГодУрожая КАК ГодУрожая,
	|	Товары.ЗерноваяРасписка.ВидКультуры КАК Культура,
	|	Товары.ЗерноваяРасписка.КлассностьКультуры КАК Класс,
	|	Товары.Количество КАК ЗачтенныйВес
	|ИЗ
	|	Документ.ур_ПереоформлениеРесурсов.Товары КАК Товары
	|
	|Левое Соединение
	|      (ВЫБРАТЬ
	|          ур_СоответствиеСчетовУчетаРесурсов.СчетУчета,
	|          ур_СоответствиеСчетовУчетаРесурсов.ВидРесурса
	|		ИЗ
	|			РегистрСведений.ур_СоответствиеСчетовУчетаРесурсов КАК ур_СоответствиеСчетовУчетаРесурсов	
	|       ГДЕ
	|         ур_СоответствиеСчетовУчетаРесурсов.Счетучета В 
	|                 (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|                      Зерно.НовыйСчетУчетаБУ
	|				   ИЗ
	|					   Документ.ур_ПереоформлениеРесурсов.Товары КАК Зерно
	|                  Где
	|                      Зерно.ссылка = &ТекДокумент
	|                  )
	|        ) КАК СоответствиеСчетов
	|    По Товары.НовыйСчетУчетаБУ = СоответствиеСчетов.СчетУчета
	|
	|ГДЕ
	|	Товары.ссылка = &ТекДокумент
	|
	|
	|";
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;

КонецФункции

Функция ПодготовитьТаблицуРасходаЗерновыхРасписокПриПереоформленииРесурсов(ДокументОбъект) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекДокумент",ДокументОбъект.ссылка);
	Запрос.УстановитьПараметр("ПустаяСсылка",Документы.ур_ПереоформлениеРесурсов.ПустаяСсылка());
	
	Запрос.текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	СоответствиеСчетов.ВидРесурса КАК ВидРесурса,
	|	Товары.ЗерноваяРасписка КАК ЗерноваяРасписка,
	|	Товары.ЗерноваяРасписка.ВИдЗерна КАК ВИдЗерна,
	|	Товары.ЗерноваяРасписка.ГодУрожая КАК ГодУрожая,
	|	Товары.ЗерноваяРасписка.ВидКультуры КАК Культура,
	|	Товары.ЗерноваяРасписка.КлассностьКультуры КАК Класс,
	|	Товары.Количество КАК ЗачтенныйВес
	|ИЗ
	|	Документ.ур_ПереоформлениеРесурсов.Товары КАК Товары
	|
	|Левое Соединение
	|      (ВЫБРАТЬ
	|          ур_СоответствиеСчетовУчетаРесурсов.СчетУчета,
	|          ур_СоответствиеСчетовУчетаРесурсов.ВидРесурса
	|		ИЗ
	|			РегистрСведений.ур_СоответствиеСчетовУчетаРесурсов КАК ур_СоответствиеСчетовУчетаРесурсов	
	|       ГДЕ
	|         ур_СоответствиеСчетовУчетаРесурсов.Счетучета В 
	|                 (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|                      Зерно.СчетУчетаБУ
	|				   ИЗ
	|					   Документ.ур_ПереоформлениеРесурсов.Товары КАК Зерно
	|                  Где
	|                      Зерно.ссылка = &ТекДокумент
	|                  )
	|        ) КАК СоответствиеСчетов
	|    По Товары.СчетУчетаБУ = СоответствиеСчетов.СчетУчета
	|
	|ГДЕ
	|	Товары.ссылка = &ТекДокумент
	|
	|";
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
КонецФункции

Функция ПолучитьОстатокПоЗерновойРасписки(СтруктураОтбора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураОтбора.Организация);
	Запрос.УстановитьПараметр("Склад",СтруктураОтбора.Склад);
	Запрос.УстановитьПараметр("ВидРесурса",СтруктураОтбора.ВидРесурса);
	Запрос.УстановитьПараметр("ЗерноваяРасписка",СтруктураОтбора.ЗерноваяРасписка);
	Запрос.УстановитьПараметр("КонецПериода",СтруктураОтбора.КонецПериода);
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток КАК Остаток
	|ИЗ
	|	РегистрНакопления.ур_ЗерноНаСкладах.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И ВидРесурса = &ВидРесурса
	|				И Склад = &Склад
	|				И ЗерноваяРасписка = &ЗерноваяРасписка) 
	|			КАК ур_ЗерноНаСкладахОстатки
	|";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возвостаток = Результат.Остаток;
	Иначе
		ВозвОстаток = 0;
	КонецЕсли;
	
	Возврат ВозвОстаток;
КонецФункции

Процедура УстановитьЕдиницуИзмеренияОтчета(ЭтотОбъект) Экспорт
	
	ЭтотОбъект.ЕдиницаИзмеренияОтчета = перечисления.ур_ВариантыВыводаОтчетовПоУчетуЗерна.тонны;
	
КонецПроцедуры

Функция ПолучитьПредставлениеНоменклатуры(Номенклатура) Экспорт
	Возврат Номенклатура.НаименованиеПолное;
КонецФункции

Функция ПолучитьОстатокБУ(СтруктураОтбораБУ) Экспорт
	
	мВидысубконто = Новый массив;
	мВидысубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	мВидысубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);
	мВидысубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии);
	
	Запрос = новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",СтруктураОтбораБУ.Организация);
	Запрос.УстановитьПараметр("СчетУчетаБУ",СтруктураОтбораБУ.СчетУчетаБУ);
	Запрос.УстановитьПараметр("Склад",СтруктураОтбораБУ.Склад);
	Запрос.УстановитьПараметр("Номенклатура",СтруктураОтбораБУ.Номенклатура);
	Запрос.УстановитьПараметр("ЗерноваяРасписка",СтруктураОтбораБУ.ЗерноваяРасписка);
	Запрос.УстановитьПараметр("мВидысубконто",мВидысубконто);
	Запрос.УстановитьПараметр("КонецПериода",СтруктураОтбораБУ.КонецПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТиповойОстатки.КоличествоОстатокДт КАК ОстатокБУ
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&КонецПериода,
	|			Счет = &счетучетаБУ,
	|			&мВидыСубконто,
	|			Субконто1 = &Номенклатура
	//|				И Субконто2 = &склад
	//|				И Субконто3 = &ЗерноваяРасписка
	|				И Организация = &Организация) КАК ТиповойОстатки
	|";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.ОстатокБУ;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОстатокПоОперУчету(СтруктураОтбораОУ) Экспорт
	
	Запрос = новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",СтруктураОтбораОУ.Организация);
	Запрос.УстановитьПараметр("Склад",СтруктураОтбораОУ.Склад);
	Запрос.УстановитьПараметр("ЗерноваяРасписка",СтруктураОтбораОУ.ЗерноваяРасписка);
	Запрос.УстановитьПараметр("КонецПериода",СтруктураОтбораОУ.КонецПериода);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ур_ЗерноНаСкладахОстатки.ЗачтенныйвесОстаток КАК ОстатокОУ
	|ИЗ
	|	РегистрНакопления.ур_ЗерноНаСкладах.Остатки(
	|			&Конецпериода,
	|			Организация = &Организация
	|				И Склад = &Склад
	|				И Зерноваярасписка = &Зерноваярасписка) КАК ур_ЗерноНаСкладахОстатки
	|";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.ОстатокОУ;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗабронированныйВесПоЗерновойРасписке(СтруктураОтбораОУ) Экспорт
	Запрос = новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",СтруктураОтбораОУ.Организация);
	Запрос.УстановитьПараметр("ЗерноваяРасписка",СтруктураОтбораОУ.ЗерноваяРасписка);
	Запрос.УстановитьПараметр("КонецПериода",СтруктураОтбораОУ.КонецПериода);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ур_ЗабронированноеЗерноОстатки.ЗачтенныйвесОстаток КАК ОстатокОУ
	|ИЗ
	|	РегистрНакопления.ур_ЗабронированноеЗерно.Остатки(
	|			&Конецпериода,
	|			Организация = &Организация
	|				И Зерноваярасписка = &Зерноваярасписка) КАК ур_ЗабронированноеЗерноОстатки
	|";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.ОстатокОУ;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьТаблицуЗерновыхРасписокПриБронировании(ЭтотОбъект) Экспорт
	
	ДокументМетаданные = ЭтотОбъект.Метаданные();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекДокумент",ЭтотОбъект.ссылка);
	
	Запрос.текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	СоответствиеСчетов.ВидРесурса КАК ВидРесурса,
	|	Товары.Склад КАК Склад,
	|	Товары.ТипОперации КАК ТипОперации,
	|	Товары.Получатель КАК Получатель,
	|	Товары.ЗерноваяРасписка КАК ЗерноваяРасписка,
	|	Товары.ЗерноваяРасписка.ВидЗерна КАК ВидЗерна,
	|	Товары.ЗерноваяРасписка.ГодУрожая КАК ГодУрожая,
	|	Товары.ЗерноваяРасписка.ВидКультуры КАК Культура,
	|	Товары.ЗерноваяРасписка.КлассностьКультуры КАК Класс,
	|	Товары.Количество КАК ЗачтенныйВес
	|ИЗ
	|	Документ."+ДокументМетаданные.Имя+".Товары КАК Товары
	|
	|Левое Соединение
	|      (ВЫБРАТЬ
	|          ур_СоответствиеСчетовУчетаРесурсов.СчетУчета,
	|          ур_СоответствиеСчетовУчетаРесурсов.ВидРесурса
	|		ИЗ
	|			РегистрСведений.ур_СоответствиеСчетовУчетаРесурсов КАК ур_СоответствиеСчетовУчетаРесурсов	
	|       ГДЕ
	|         ур_СоответствиеСчетовУчетаРесурсов.Счетучета В 
	|                 (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|                      Зерно.СчетУчетаБУ
	|				   ИЗ
	|					   Документ."+ДокументМетаданные.Имя+".Товары КАК Зерно
	|                  Где
	|                      Зерно.ссылка = &ТекДокумент
	|                  )
	|        ) КАК СоответствиеСчетов
	|    По Товары.СчетУчетаБУ = СоответствиеСчетов.СчетУчета
	|
	|ГДЕ
	|	Товары.ссылка = &ТекДокумент
	|
	|";
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
КонецФункции

Функция ПодготовитьТаблицуЗерновыхРасписокПоНарядам(ЭтотОбъект) Экспорт
	
	ДокументМетаданные = ЭтотОбъект.Метаданные();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекДокумент",ЭтотОбъект.ссылка);
	
	Запрос.текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.ВидРесурса КАК ВидРесурса,
	//|	Товары.Склад КАК Склад,
	//|	Товары.ЗерноваяРасписка КАК ЗерноваяРасписка,
	//|	Товары.ЗерноваяРасписка.ВидЗерна КАК ВидЗерна,
	|	Товары.НОменклатура.ГодУрожая КАК ГодУрожая,
	|	Товары.НОменклатура.ВидКультуры КАК Культура,
	|	Товары.НОменклатура.Класс КАК Класс,
	|	Товары.Количество КАК ЗачтенныйВес
	|ИЗ
	|	Документ."+ДокументМетаданные.Имя+".Товары КАК Товары
	|
	//|Левое Соединение
	//|      (ВЫБРАТЬ
	//|          ур_СоответствиеСчетовУчетаРесурсов.СчетУчета,
	//|          ур_СоответствиеСчетовУчетаРесурсов.ВидРесурса
	//|		ИЗ
	//|			РегистрСведений.ур_СоответствиеСчетовУчетаРесурсов КАК ур_СоответствиеСчетовУчетаРесурсов	
	//|       ГДЕ
	//|         ур_СоответствиеСчетовУчетаРесурсов.Счетучета В 
	//|                 (ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|                      Зерно.СчетУчетаБУ
	//|				   ИЗ
	//|					   Документ."+ДокументМетаданные.Имя+".Товары КАК Зерно
	//|                  Где
	//|                      Зерно.ссылка = &ТекДокумент
	//|                  )
	//|        ) КАК СоответствиеСчетов
	//|    По Товары.СчетУчетаБУ = СоответствиеСчетов.СчетУчета
	|
	|ГДЕ
	|	Товары.ссылка = &ТекДокумент
	|
	|";
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
КонецФункции

Процедура КонтрольОстатковНаЗерновыхРасписках(ДокументОбъект,СтруктураШапкиДокумента,Имя,Отказ) Экспорт
	
	ДокументМетаданные = ДокументОбъект.Метаданные();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Склад",СтруктураШапкиДокумента.Склад);
	Запрос.УстановитьПараметр("ТекДокумент",ДокументОбъект.ссылка);
	Запрос.УстановитьПараметр("КонецПериода",СтруктураШапкиДокумента.Дата);
	Запрос.текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.ЗерноваяРасписка КАК ЗерноваяРасписка,
	|	ЕстьNull(ОстаткиЗерна.Остаток,0) - Товары.Количество  КАК ДоступныйВес
	|ИЗ
	|	Документ."+ДокументМетаданные.Имя+".Товары КАК Товары
	|Левое Соединение
	|        (ВЫБРАТЬ
	|			ур_ЗерноНаСкладахОстатки.ЗерноваяРасписка,
	|			ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток КАК Остаток
	|		  ИЗ
	|			РегистрНакопления.ур_ЗерноНаСкладах.Остатки(
	|				&КонецПериода,
	|				Организация = &организация
	|				И Склад = &Склад) 
	|				КАК ур_ЗерноНаСкладахОстатки
	|			) Как ОстаткиЗерна
	|      По Товары.ЗерноваяРасписка = ОстаткиЗерна.ЗерноваяРасписка
	|ГДЕ
	|	Товары.ссылка = &ТекДокумент
	|   
	|";
	
	тз = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЗ ИЗ тз Цикл
		Если СтрокаТЗ.ДоступныйВес<0 тогда
			Отказ = Истина;
			ПредстЗР = ПолучитьПредставлениеЗерновойРасписки(СтрокаТЗ.ЗерноваяРасписка);
			Сообщить(ПредстЗР+" вес превышает остаток !!!",СтатусСообщения.Важное);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура КонтрольБронированияНаЗерновыхРасписках(ДокументОбъект,СтруктураШапкиДокумента,Имя,Отказ) Экспорт
	
	ДокументМетаданные = ДокументОбъект.Метаданные();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Склад",СтруктураШапкиДокумента.Склад);
	Запрос.УстановитьПараметр("ТекДокумент",ДокументОбъект.ссылка);
	Запрос.УстановитьПараметр("КонецПериода",СтруктураШапкиДокумента.Дата);
	Запрос.текст =
	
	
	"ВЫБРАТЬ
	|	ур_ЗабронированноеЗерноОстатки.Зерноваярасписка,
	|	ур_ЗабронированноеЗерноОстатки.ЗачтенныйвесОстаток КАК ДоступныйВес
	|ИЗ
	|	РегистрНакопления.ур_ЗабронированноеЗерно.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Зерноваярасписка 
	|				в (
	|					ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Товары.ЗерноваяРасписка КАК ЗерноваяРасписка
	|					ИЗ
	|						Документ."+ДокументМетаданные.Имя+".Товары КАК Товары
	|					ГДЕ
	|						Товары.ссылка = &ТекДокумент	
	|)) КАК ур_ЗабронированноеЗерноОстатки
	|";
	
	тз = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЗ ИЗ тз Цикл
		Если СтрокаТЗ.ДоступныйВес > 0 тогда
			Отказ = Истина;
			ПредстЗР = ПолучитьПредставлениеЗерновойРасписки(СтрокаТЗ.ЗерноваяРасписка);
			Сообщить("Переоформление невозможно по зерновой расписке "+ПредстЗР+" вес забронирован !!!",СтатусСообщения.Важное);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура КонтрольЗалогаНаЗерновыхРасписках(ДокументОбъект,СтруктураШапкиДокумента,Имя,Отказ) Экспорт
	
	ДокументМетаданные = ДокументОбъект.Метаданные();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Склад",СтруктураШапкиДокумента.Склад);
	Запрос.УстановитьПараметр("ТекДокумент",ДокументОбъект.ссылка);
	Запрос.УстановитьПараметр("КонецПериода",СтруктураШапкиДокумента.Дата);
	Запрос.текст =
	
	
	"ВЫБРАТЬ
	|	ур_ЗерноВЗалогеОстатки.Зерноваярасписка,
	|	ур_ЗерноВЗалогеОстатки.ЗачтенныйвесОстаток КАК ДоступныйВес
	|ИЗ
	|	РегистрНакопления.ур_ЗерноВЗалоге.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Зерноваярасписка 
	|				в (
	|					ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Товары.ЗерноваяРасписка КАК ЗерноваяРасписка
	|					ИЗ
	|						Документ."+ДокументМетаданные.Имя+".Товары КАК Товары
	|					ГДЕ
	|						Товары.ссылка = &ТекДокумент	
	|)) КАК ур_ЗерноВЗалогеОстатки
	|";
	
	тз = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЗ ИЗ тз Цикл
		Если СтрокаТЗ.ДоступныйВес > 0 тогда
			Отказ = Истина;
			ПредстЗР = ПолучитьПредставлениеЗерновойРасписки(СтрокаТЗ.ЗерноваяРасписка);
			Сообщить("Переоформление невозможно по зерновой расписке "+ПредстЗР+" зерно в залоге !!!",СтатусСообщения.Важное);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьТаблицуЗабронированногоЗерна(ДокументОбъект, СтруктураШапкиДокумента) Экспорт
	
	ДокументМетаданные = ДокументОбъект.Метаданные();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Склад",СтруктураШапкиДокумента.Склад);
	Запрос.УстановитьПараметр("ТекДокумент",ДокументОбъект.ссылка);
	Запрос.УстановитьПараметр("КонецПериода",СтруктураШапкиДокумента.Дата);
	Запрос.текст =
	"ВЫБРАТЬ
	|	ур_ЗабронированноеЗерноОстатки.Организация,
	|	ур_ЗабронированноеЗерноОстатки.ВидРесурса,
	|	ур_ЗабронированноеЗерноОстатки.Склад,
	|	ур_ЗабронированноеЗерноОстатки.ТипОперации,
	|	ур_ЗабронированноеЗерноОстатки.ГодУрожая,
	|	ур_ЗабронированноеЗерноОстатки.Культура,
	|	ур_ЗабронированноеЗерноОстатки.Класс,
	|	ур_ЗабронированноеЗерноОстатки.Зерноваярасписка,
	|	ур_ЗабронированноеЗерноОстатки.Получатель,
	|	ур_ЗабронированноеЗерноОстатки.ЗачтенныйвесОстаток КАК Зачтенныйвес
	|ИЗ
	|	РегистрНакопления.ур_ЗабронированноеЗерно.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Склад = &Склад
	|			И ЗерноваяРасписка в 
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Товары.ЗерноваяРасписка
	|				ИЗ
	|					Документ."+ДокументМетаданные.Имя+".Товары КАК Товары
	|				ГДЕ
	|					Товары.ссылка = &ТекДокумент
	|				 )
	|				  ) КАК ур_ЗабронированноеЗерноОстатки
	|";
	
	тз = Запрос.Выполнить().Выгрузить();
	
	Возврат тз;
КонецФункции

Функция ПодготовитьТаблицуЗабронированногоЗерна(ДокументОбъект, СтруктураШапкиДокумента, Отказ) Экспорт
	
	ДокументМетаданные = ДокументОбъект.Метаданные();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Склад",СтруктураШапкиДокумента.Склад);
	Запрос.УстановитьПараметр("Получатель",СтруктураШапкиДокумента.Получатель);
	Запрос.УстановитьПараметр("ТипОперации",СтруктураШапкиДокумента.ТипОперации);
	Запрос.УстановитьПараметр("ТекДокумент",ДокументОбъект.ссылка);
	Запрос.УстановитьПараметр("КонецПериода",СтруктураШапкиДокумента.Дата);
	Запрос.текст =
	"ВЫБРАТЬ
	|	ур_ЗабронированноеЗерноОстатки.Организация,
	|	ур_ЗабронированноеЗерноОстатки.ВидРесурса,
	|	ур_ЗабронированноеЗерноОстатки.Склад,
	|	ур_ЗабронированноеЗерноОстатки.ТипОперации,
	|	ур_ЗабронированноеЗерноОстатки.ГодУрожая,
	|	ур_ЗабронированноеЗерноОстатки.Культура,
	|	ур_ЗабронированноеЗерноОстатки.Класс,
	|	ур_ЗабронированноеЗерноОстатки.Зерноваярасписка,
	|	ур_ЗабронированноеЗерноОстатки.Получатель,
	|	ур_ЗабронированноеЗерноОстатки.ЗачтенныйвесОстаток КАК Зачтенныйвес
	|ИЗ
	|	РегистрНакопления.ур_ЗабронированноеЗерно.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Склад = &Склад
	//|				И ТипОперации = &ТипОперации
	//|				И Получатель = &Получатель
	|			И ЗерноваяРасписка в 
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Товары.ЗерноваяРасписка
	|				ИЗ
	|					Документ."+ДокументМетаданные.Имя+".Товары КАК Товары
	|				ГДЕ
	|					Товары.ссылка = &ТекДокумент
	|				 )
	|				  ) КАК ур_ЗабронированноеЗерноОстатки
	|";
	
	тз = Запрос.Выполнить().Выгрузить();
	
	Возврат тз;
	
КонецФункции

Функция КонтрольОстатковБронированияНаЗерновыхРасписках(ДокументОбъект,СтруктураШапкиДокумента,ТекСтрока,Отказ) Экспорт
	
	ДокументМетаданные = ДокументОбъект.Метаданные();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Склад",				ТекСтрока.Склад);
	Запрос.УстановитьПараметр("ТипОперации",		ТекСтрока.ТипОперации);
	Запрос.УстановитьПараметр("ГодУРожая",			ТекСтрока.ЗерноваяРасписка.ГодУРожая);
	Запрос.УстановитьПараметр("Культура",			ТекСтрока.ЗерноваяРасписка.Культура);
	Запрос.УстановитьПараметр("Класс",				ТекСтрока.ЗерноваяРасписка.КлассностьКультуры);
	Запрос.УстановитьПараметр("ЗерноваяРасписка",	ТекСтрока.ЗерноваяРасписка);
	Запрос.УстановитьПараметр("Получатель",			ТекСтрока.Получатель);
	Запрос.УстановитьПараметр("ТекДокумент",		ДокументОбъект.ссылка);
	Запрос.УстановитьПараметр("КонецПериода",СтруктураШапкиДокумента.Дата);
	Запрос.текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.ЗерноваяРасписка КАК ЗерноваяРасписка,
	|	ЕстьNull(ОстаткиЗерна.Остаток,0) - Товары.Количество  КАК ДоступныйВес
	|ИЗ
	|	Документ."+ДокументМетаданные.Имя+".Товары КАК Товары
	|Левое Соединение
	|        (ВЫБРАТЬ
	|			ур_ЗабронированноеЗерноОстатки.ЗерноваяРасписка,
	|			ур_ЗабронированноеЗерноОстатки.ЗачтенныйВесОстаток КАК Остаток
	|		  ИЗ
	|			РегистрНакопления.ур_ЗабронированноеЗерно.Остатки(
	|				&КонецПериода,
	|				Организация = &организация
	|				И Склад = &Склад 
	|				И ТипОперации = &ТипОперации 
	//|				И ГодУРожая = &ГодУРожая 
	//|				И Культура = &Культура 
	//|				И Класс = &Класс 
	|				И ЗерноваяРасписка = &ЗерноваяРасписка 
	|				И Получатель = &Получатель) 
	|				КАК ур_ЗабронированноеЗерноОстатки
	|			) Как ОстаткиЗерна
	|      По Товары.ЗерноваяРасписка = ОстаткиЗерна.ЗерноваяРасписка
	|ГДЕ
	|	Товары.ссылка = &ТекДокумент
	|   
	|";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Если Результат.ДоступныйВес<0 тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция КонтрольОстатковЗалогаНаЗерновыхРасписках(ДокументОбъект,СтруктураШапкиДокумента,ТекСтрока,Отказ) Экспорт
	
	ДокументМетаданные = ДокументОбъект.Метаданные();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Склад",				ТекСтрока.Склад);
	Запрос.УстановитьПараметр("ТипОперации",		ТекСтрока.ТипОперации);
	Запрос.УстановитьПараметр("ГодУРожая",			ТекСтрока.ЗерноваяРасписка.ГодУРожая);
	Запрос.УстановитьПараметр("Культура",			ТекСтрока.ЗерноваяРасписка.Культура);
	Запрос.УстановитьПараметр("Класс",				ТекСтрока.ЗерноваяРасписка.КлассностьКультуры);
	Запрос.УстановитьПараметр("ЗерноваяРасписка",	ТекСтрока.ЗерноваяРасписка);
	Запрос.УстановитьПараметр("Получатель",			ТекСтрока.Получатель);
	Запрос.УстановитьПараметр("ТекДокумент",		ДокументОбъект.ссылка);
	Запрос.УстановитьПараметр("КонецПериода",СтруктураШапкиДокумента.Дата);
	Запрос.текст =
	
	"ВЫБРАТЬ
	|	ур_ЗерноВЗалогеОстатки.ЗачтенныйвесОстаток КАК Остаток
	|ИЗ
	|	РегистрНакопления.ур_ЗерноВЗалоге.Остатки(
	|			&КонецПериода,
	|			Организация = &организация
	|				И Склад = &Склад
	//|				И ТипОперации = &ТипОперации
	//|				И ГодУРожая = &ГодУРожая
	//|				И Культура = &Культура
	//|				И Класс = &Класс
	|				И Получатель = &Получатель
	|				И ЗерноваяРасписка = &ЗерноваяРасписка
	|				) КАК ур_ЗерноВЗалогеОстатки";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Остаток;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	
КонецФункции

///////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ПО РАСХОДУ ПО БУ

Функция СформироватьТаблицуСписания(ДокументОбъект,СтруктураШапкиДокумента)
	
	ДокументМетаданные = ДокументОбъект.Метаданные();
	
	ДокументМоментВремени = Новый МоментВремени(ДокументОбъект.Дата, ДокументОбъект.Ссылка);

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекДокумент",ДокументОбъект);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Склад",СтруктураШапкиДокумента.Склад);
	Запрос.УстановитьПараметр("КонецПериода",ДокументМоментВремени);
	
	Текст = 
	"ВЫБРАТЬ
	|	ТоварыПоДокументу.СчетУчетаБУ,
	|	ТоварыПоДокументу.Номенклатура,
	|	ТоварыПоДокументу.Номенклатура,
	|
	|ИЗ
	|  (ВЫБРАТЬ
	|       Товары.СчетУчетаБУ КАК СчетУчетаБУ,
	|       Товары.Номенклатура КАК Номенклатура,
	|       Товары.ЗерноваяРасписка КАК ЗерноваяРасписка,
	|       Сумма(Товары.Количество) КАК Количество
	|  ИЗ
	|		Документ."+ДокументМетаданные.Имя+".Товары
	|	СГРУППИРОВАТЬ ПО СчетУчета,Номенклатура,ЗерноваяРасписка
	|	) КАК ТоварыПоДокументу
	|";
	
КонецФункции

Функция ПолучитьОстаткиПоБУ(ДокументОбъект, ТекСтрока,СтруктураШапкиДокумента) Экспорт
	
	ДокументМоментВремени = Новый МоментВремени(ДокументОбъект.Дата, ДокументОбъект.Ссылка);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ЗерновыеРасписки);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Склад",СтруктураШапкиДокумента.Склад);
	Запрос.УстановитьПараметр("КонецПериода",ДокументМоментВремени);
	Запрос.УстановитьПараметр("ВидыСубконто",ВидыСубконто);
	

КонецФункции


Процедура ДвижениеПартийТоваров(ДокументОбъект, ТаблицаСписания, СтруктураШапкиДокумента , Отказ=Ложь) Экспорт
	
	Для Каждого СтрокаСписания ИЗ ТаблицаСписания Цикл
		СтрокаСписания.СписанныеПартииБУ = СтрокаСписания.ЗерновыеРасписки;
		
		СтруктураОстатков = ПолучитьОстаткиПоБУ(ДокументОбъект,СтрокаСписания,СтруктураШапкиДокумента);
		
		Сообщить(СтрокаСписания.Номенклатура);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьОстатки(ЭтотОбъект,СтруктураШапкиДокумента,Отказ) Экспорт
	
	ДокументМетаданные = ЭтотОбъект.Метаданные();
	
	ДокументМоментВремени = Новый МоментВремени(ЭтотОбъект.Дата, ЭтотОбъект.Ссылка);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ЗерновыеРасписки);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекДокумент",ЭтотОбъект.ссылка);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Склад",СтруктураШапкиДокумента.Склад);
	Запрос.УстановитьПараметр("КонецПериода",ДокументМоментВремени);
	Запрос.УстановитьПараметр("ВидыСубконто",ВидыСубконто);
	
	Текст = 
	"ВЫБРАТЬ
	|	ТоварыПоДокументу.СчетУчетаБУ,
	|	ТоварыПоДокументу.Склад,
	|	ТоварыПоДокументу.Номенклатура,
	|	ТоварыПоДокументу.ЗерноваяРасписка,
	|	ТоварыПоДокументу.Количество,
	|	Остатки.Остаток
	|
	|ИЗ
	|  (ВЫБРАТЬ
	|       Товары.СчетУчетаБУ КАК СчетУчетаБУ,
	|       Товары.ссылка.Склад КАК Склад,
	|       Товары.Номенклатура КАК Номенклатура,
	|       Товары.ЗерноваяРасписка КАК ЗерноваяРасписка,
	|       Сумма(Товары.Количество) КАК Количество
	|  ИЗ
	|		Документ."+ДокументМетаданные.Имя+".Товары КАК Товары
	|   Где Товары.ссылка = &ТекДокумент
	|	СГРУППИРОВАТЬ ПО СчетУчетаБУ,Товары.ссылка.Склад,Номенклатура,ЗерноваяРасписка
	|	) КАК ТоварыПоДокументу
	|
	|Левое Соединение
	|			(ВЫБРАТЬ
	|				ТиповойОстатки.Счет КАК Счет,
	|				ТиповойОстатки.Субконто1 КАК Номенклатура,
	|				ТиповойОстатки.Субконто2 КАК Склад,
	|				ТиповойОстатки.Субконто3 КАК ЗерноваяРасписка,
	|				ТиповойОстатки.КоличествоОстатокДт КАК Остаток
	|			ИЗ
	|				РегистрБухгалтерии.Типовой.Остатки(
	|					&КонецПериода,
	|					Счет В 
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СписокСчетов.СчетУчетаБУ
	|				 		ИЗ
	|							Документ."+ДокументМетаданные.Имя+".Товары КАК СписокСчетов
	|						Где СписокСчетов.ссылка = &ТекДокумент),
	|				&ВидыСубконто,
	|				Организация = &Организация
	|					И Субконто2 = &Склад) КАК ТиповойОстатки
	|            )  КАК Остатки
	|            ПО  Остатки.Счет = ТоварыПоДокументу.СчетУчетаБУ
	|				И Остатки.Номенклатура =  ТоварыПоДокументу.Номенклатура
	|				И Остатки.Склад =  ТоварыПоДокументу.Склад
	|				И Остатки.ЗерноваяРасписка =  ТоварыПоДокументу.ЗерноваяРасписка
	|
	|ГДЕ
	|	ТоварыПоДокументу.Количество>Остатки.Остаток
	|	
	|";	
	
	Запрос.Текст = Текст;
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ОбщегоНазначения.СообщитьОбОшибке(Результат.СчетУчетаБУ+ " "+результат.Номенклатура+" "+Результат.Зерноваярасписка+ " :Расход превышает остаток !!!");
		Отказ = Истина; 
	КонецЕсли;
	 
КонецПроцедуры


Функция СформироватьСписокСчетовУчетаРесурсов() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ур_СоответствиеСчетовУчетаРесурсов.СчетУчета
	|ИЗ
	|	РегистрСведений.ур_СоответствиеСчетовУчетаРесурсов КАК ур_СоответствиеСчетовУчетаРесурсов
	|";
	
	тз = Запрос.Выполнить().Выгрузить();
	
	Возврат тз;
	
КонецФункции

Процедура РасчетХраненияУдалить(ДокументОбъект) экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ДокументОбъект.организация);
	Запрос.УстановитьПараметр("Склад", ДокументОбъект.Склад);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоМесяца(ДокументОбъект.ПериодСверки)));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецМесяца(ДокументОбъект.ПериодСверки)));
	
	Запрос.Текст =
	//+++ Oleg SmartT. 2021-04-20	
	"ВЫБРАТЬ
	|	ур_ЗерноНаСкладахОстаткиИОбороты.Период КАК Дата,
	|	ур_ЗерноНаСкладахОстаткиИОбороты.Период КАК ДатаНачалаРасчета,
	|	ур_ЗерноНаСкладахОстаткиИОбороты.ВидРесурса КАК ВидРесурса,
	|	ур_ЗерноНаСкладахОстаткиИОбороты.ЗачтенныйВесНачальныйОстаток КАК ОстатокНаНачало,
	|	ур_ЗерноНаСкладахОстаткиИОбороты.ЗачтенныйВесПриход КАК Приход,
	|	ур_ЗерноНаСкладахОстаткиИОбороты.ЗачтенныйВесРасход КАК Расход,
	|	ур_ЗерноНаСкладахОстаткиИОбороты.ЗачтенныйВесКонечныйОстаток КАК ОстатокНаКонец,
	|	0 КАК Коэффициент,
	|	0 КАК ДнейХранения,
	|	0 КАК Количество,
	|	0 КАК ТоннаДни,
	|	0 КАК Сумма,
	|	0 КАК Количество_Залог,
	|	0 КАК ТоннаДни_Залог,
	|	0 КАК Сумма_Залог,
	|	ЕСТЬNULL(ТарифыНаХранение.Цена, 0) КАК Тариф,
	|	0 КАК ОстатокНаНачало_Залог,
	|	0 КАК ОстатокНаКонец_Залог,
	|	0 КАК Приход_Залог,
	|	0 КАК Расход_Залог
	|ИЗ
	|	РегистрНакопления.ур_ЗерноНаСкладах.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			День,
	|			,
	|			Организация = &Организация
	|				И Склад = &Склад
	|				И ВидРесурса В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Соответствия.ВидРесурса
	|					ИЗ
	|						РегистрСведений.ур_СоответствиеСчетовУчетаРесурсов КАК Соответствия)) КАК ур_ЗерноНаСкладахОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.б_ТарифыНаХранение КАК ТарифыНаХранение
	|		ПО ур_ЗерноНаСкладахОстаткиИОбороты.Организация = ТарифыНаХранение.Организация
	|			И ур_ЗерноНаСкладахОстаткиИОбороты.Склад = ТарифыНаХранение.Склад
	|			И ур_ЗерноНаСкладахОстаткиИОбороты.ВидРесурса = ТарифыНаХранение.ВидРесурса
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидРесурса,
	|	Дата";
	
	тз = Запрос.Выполнить().Выгрузить();
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ур_ЗерноНаСкладахОстаткиИОбороты.Период КАК ДатаНачалаРасчета,
	|	ур_ЗерноНаСкладахОстаткиИОбороты.ВидРесурса КАК ВидРесурса,
	|	ЕСТЬNULL(ВЗалоге.ЗачтенныйвесНачальныйОстаток, 0) КАК ОстатокНаНачало_Залог,
	|	ЕСТЬNULL(ВЗалоге.ЗачтенныйвесКонечныйОстаток, 0) КАК ОстатокНаКонец_Залог,
	|	ЕСТЬNULL(ВЗалоге.ЗачтенныйвесПриход, 0) КАК Приход_Залог,
	|	ЕСТЬNULL(ВЗалоге.ЗачтенныйвесРасход, 0) КАК Расход_Залог,
	|	ур_ЗерноНаСкладахОстаткиИОбороты.Культура,
	|	ур_ЗерноНаСкладахОстаткиИОбороты.Класс,
	|	ур_ЗерноНаСкладахОстаткиИОбороты.ГодУрожая,
	|	ур_ЗерноНаСкладахОстаткиИОбороты.ЗерноваяРасписка,
	|	ур_ЗерноНаСкладахОстаткиИОбороты.Видзерна
	|ИЗ
	|	РегистрНакопления.ур_ЗерноНаСкладах.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			День,
	|			,
	|			Организация = &Организация
	|				И Склад = &Склад
	|				И ВидРесурса В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Соответствия.ВидРесурса
	|					ИЗ
	|						РегистрСведений.ур_СоответствиеСчетовУчетаРесурсов КАК Соответствия)) КАК ур_ЗерноНаСкладахОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.б_ТарифыНаХранение КАК ТарифыНаХранение
	|		ПО ур_ЗерноНаСкладахОстаткиИОбороты.Организация = ТарифыНаХранение.Организация
	|			И ур_ЗерноНаСкладахОстаткиИОбороты.Склад = ТарифыНаХранение.Склад
	|			И ур_ЗерноНаСкладахОстаткиИОбороты.ВидРесурса = ТарифыНаХранение.ВидРесурса
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ур_ЗерноВЗалогеОстаткиИОбороты.Организация КАК Организация,
	|			ур_ЗерноВЗалогеОстаткиИОбороты.ВидРесурса КАК ВидРесурса,
	|			ур_ЗерноВЗалогеОстаткиИОбороты.Склад КАК Склад,
	|			ур_ЗерноВЗалогеОстаткиИОбороты.ЗачтенныйвесНачальныйОстаток КАК ЗачтенныйвесНачальныйОстаток,
	|			ур_ЗерноВЗалогеОстаткиИОбороты.ЗачтенныйвесКонечныйОстаток КАК ЗачтенныйвесКонечныйОстаток,
	|			ур_ЗерноВЗалогеОстаткиИОбороты.ЗачтенныйвесОборот КАК ЗачтенныйвесОборот,
	|			ур_ЗерноВЗалогеОстаткиИОбороты.ЗачтенныйвесПриход КАК ЗачтенныйвесПриход,
	|			ур_ЗерноВЗалогеОстаткиИОбороты.ЗачтенныйвесРасход КАК ЗачтенныйвесРасход,
	|			ур_ЗерноВЗалогеОстаткиИОбороты.Период КАК Период,
	|			ур_ЗерноВЗалогеОстаткиИОбороты.Культура КАК Культура,
	|			ур_ЗерноВЗалогеОстаткиИОбороты.ГодУрожая КАК ГодУрожая,
	|			ур_ЗерноВЗалогеОстаткиИОбороты.Класс КАК Класс,
	|			ур_ЗерноВЗалогеОстаткиИОбороты.Зерноваярасписка КАК Зерноваярасписка
	|		ИЗ
	|			РегистрНакопления.ур_ЗерноВЗалоге.ОстаткиИОбороты(
	|					&НачалоПериода,
	|					&КонецПериода,
	|					День,
	|					,
	|					Организация = &Организация
	|						И Склад = &Склад
	|						И ВидРесурса В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								Соответствия.ВидРесурса
	|							ИЗ
	|								РегистрСведений.ур_СоответствиеСчетовУчетаРесурсов КАК Соответствия)) КАК ур_ЗерноВЗалогеОстаткиИОбороты) КАК ВЗалоге
	|		ПО ур_ЗерноНаСкладахОстаткиИОбороты.Организация = ВЗалоге.Организация
	|			И ур_ЗерноНаСкладахОстаткиИОбороты.ВидРесурса = ВЗалоге.ВидРесурса
	|			И ур_ЗерноНаСкладахОстаткиИОбороты.Склад = ВЗалоге.Склад
	|			И ур_ЗерноНаСкладахОстаткиИОбороты.Период = ВЗалоге.Период
	|			И ур_ЗерноНаСкладахОстаткиИОбороты.Культура = ВЗалоге.Культура
	|			И ур_ЗерноНаСкладахОстаткиИОбороты.Класс = ВЗалоге.Класс
	|			И ур_ЗерноНаСкладахОстаткиИОбороты.ГодУрожая = ВЗалоге.ГодУрожая
	|			И ур_ЗерноНаСкладахОстаткиИОбороты.ЗерноваяРасписка = ВЗалоге.Зерноваярасписка";
	
	тз_резерв = Запрос.Выполнить().Выгрузить();
	тз_резерв.Свернуть("ДатаНачалаРасчета, ВидРесурса", "ОстатокНаНачало_Залог, Приход_Залог, Расход_Залог, ОстатокНаКонец_Залог");
	ПоследнийВидРесурса           = Неопределено;
	сРезерв_ОстатокНаНачало_Залог = 0;
	сРезерв_Приход_Залог          = 0;
	сРезерв_Расход_Залог          = 0;
	сРезерв_ОстатокНаКонец_Залог  = 0;
	
	ТекВидРесурса = "";
	
	КоличествоДнейМесяца = День(КонецМесяца(ДокументОбъект.ПериодСверки));
	
	Для Каждого СтрокаТЗ ИЗ тз Цикл
		
		//Получим резерв
		сПоиск = Новый Структура();
		сПоиск.Вставить("ДатаНачалаРасчета", СтрокаТЗ.Дата);
		сПоиск.Вставить("ВидРесурса", СтрокаТЗ.ВидРесурса);
		мНайдено = тз_резерв.НайтиСтроки(сПоиск);
		
		Для Каждого сРезерв из мНайдено Цикл
			Если (сРезерв.ОстатокНаНачало_Залог>0 ИЛИ сРезерв.ОстатокНаКонец_Залог>0) ИЛИ (СтрокаТЗ.ВидРесурса <> ПоследнийВидРесурса) Тогда
				сРезерв_ОстатокНаНачало_Залог = сРезерв.ОстатокНаНачало_Залог;
				сРезерв_Приход_Залог          = сРезерв.Приход_Залог;
				сРезерв_Расход_Залог          = сРезерв.Расход_Залог;
				сРезерв_ОстатокНаКонец_Залог  = сРезерв.ОстатокНаКонец_Залог;
				ПоследнийВидРесурса           = СтрокаТЗ.ВидРесурса;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаТЗ.ОстатокНаНачало_Залог = сРезерв_ОстатокНаНачало_Залог;
		СтрокаТЗ.Приход_Залог          = сРезерв_Приход_Залог;
		СтрокаТЗ.Расход_Залог          = сРезерв_Расход_Залог;
		СтрокаТЗ.ОстатокНаКонец_Залог  = сРезерв_ОстатокНаКонец_Залог;
		//
		СтрокаТЗ.ОстатокНаНачало = СтрокаТЗ.ОстатокНаНачало - СтрокаТЗ.ОстатокНаНачало_Залог;
		СтрокаТЗ.Приход          = СтрокаТЗ.Приход          - СтрокаТЗ.Приход_Залог;
		СтрокаТЗ.Расход          = СтрокаТЗ.Расход          - СтрокаТЗ.Расход_Залог;
		СтрокаТЗ.ОстатокНаКонец  = СтрокаТЗ.ОстатокНаКонец  - СтрокаТЗ.ОстатокНаКонец_Залог;
		
		//
		Если ТекВидРесурса <> СтрокаТЗ.ВидРесурса Тогда
			НачДата =  НачалоДня(НачалоМесяца(ДокументОбъект.ПериодСверки));
			ТекВидРесурса =  СтрокаТЗ.ВидРесурса;
		КонецЕсли;
		
		Если  КонецДня(СтрокаТЗ.Дата) = КонецМесяца(ДокументОбъект.ПериодСверки) Тогда
			СтрокаТЗ.Количество       = СтрокаТЗ.ОстатокНаНачало       + СтрокаТЗ.Приход       - СтрокаТЗ.Расход;
			СтрокаТЗ.Количество_Залог = СтрокаТЗ.ОстатокНаНачало_Залог + СтрокаТЗ.Приход_Залог - СтрокаТЗ.Расход_Залог;
		Иначе
			СтрокаТЗ.Количество       = СтрокаТЗ.ОстатокНаНачало;
			СтрокаТЗ.Количество_Залог = СтрокаТЗ.ОстатокНаНачало_Залог;
		Конецесли;
		
		Если День(СтрокаТЗ.Дата) = КоличествоДнейМесяца Тогда
			СтрокаТЗ.ДнейХранения = День(СтрокаТЗ.Дата)-День(Начдата)+1;
		Иначе	
			СтрокаТЗ.ДнейХранения = День(СтрокаТЗ.Дата)-День(Начдата);
		КонецЕсли;
		
		СтрокаТЗ.Коэффициент = СтрокаТЗ.ДнейХранения/КоличествоДнейМесяца;
		
		СтрокаТЗ.ТоннаДни          = СтрокаТЗ.Коэффициент * СтрокаТЗ.Количество; 
		СтрокаТЗ.ТоннаДни_Залог    = СтрокаТЗ.Коэффициент * СтрокаТЗ.Количество_Залог; 
		
		СтрокаТЗ.Сумма             = СтрокаТЗ.ТоннаДни       * СтрокаТЗ.Тариф;
		СтрокаТЗ.Сумма_Залог       = СтрокаТЗ.ТоннаДни_Залог * СтрокаТЗ.Тариф;
		
		СтрокаТЗ.ДатаНачалаРасчета = НачДата;
		НачДата                    = СтрокаТЗ.Дата;
	КонецЦикла;
	//--- Oleg SmartT. 2021-04-20	
	
	ДокументОбъект.Расчет.Загрузить(тз);
	
	
КонецПроцедуры

Функция ПолучитьТариф(ПарамДокумент, ПарамСтрока)
	
	Возврат РегистрыСведений.б_ТарифыНаХранение.ПолучитьПоследнее(ПарамСтрока.Дата, Новый Структура("Организация, Склад, ВидРесурса", ПарамДокумент.Организация, ПарамДокумент.Склад, ПарамСтрока.ВидРесурса)).Цена;
	
КонецФункции

Процедура РасчетХранения(ДокументОбъект) экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ДокументОбъект.организация);
	Запрос.УстановитьПараметр("Склад", ДокументОбъект.Склад);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоМесяца(ДокументОбъект.ПериодСверки)) );
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецМесяца(ДокументОбъект.ПериодСверки)));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ур_ЗерноНаСкладахОстаткиИОбороты.Период КАК Дата,
	|	ур_ЗерноНаСкладахОстаткиИОбороты.Период КАК ДатаНачалаРасчета,
	|	ур_ЗерноНаСкладахОстаткиИОбороты.ВидРесурса КАК ВидРесурса,
	|	ур_ЗерноНаСкладахОстаткиИОбороты.ЗачтенныйВесНачальныйОстаток КАК ОстатокНаНачало,
	|	ур_ЗерноНаСкладахОстаткиИОбороты.ЗачтенныйВесПриход КАК Приход,
	|	ур_ЗерноНаСкладахОстаткиИОбороты.ЗачтенныйВесРасход КАК Расход,
	|	ур_ЗерноНаСкладахОстаткиИОбороты.ЗачтенныйВесКонечныйОстаток КАК ОстатокНаКонец,
	|	0 КАК Коэффициент,
	|	0 КАК ДнейХранения,
	|	0 КАК Количество,
	|	0 КАК ТоннаДни,
	|	0 КАК Сумма,
	|	0 КАК Тариф
	|ИЗ
	|	РегистрНакопления.ур_ЗерноНаСкладах.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			День,
	|			,
	|			Организация = &Организация
	|				И Склад = &Склад
	|				И ВидРесурса В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Соответствия.ВидРесурса
	|					ИЗ
	|						РегистрСведений.ур_СоответствиеСчетовУчетаРесурсов КАК Соответствия)) КАК ур_ЗерноНаСкладахОстаткиИОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидРесурса,
	|	Дата";
	
	тз = Запрос.Выполнить().Выгрузить();
	
	
	ТекВидРесурса = "";
	
	КоличествоДнейМесяца = День(КонецМесяца(ДокументОбъект.ПериодСверки));
	
	Для Каждого СтрокаТЗ ИЗ тз Цикл
		Если ТекВидРесурса <> СтрокаТЗ.ВидРесурса Тогда
			НачДата =  НачалоДня(НачалоМесяца(ДокументОбъект.ПериодСверки));
			ТекВидРесурса =  СтрокаТЗ.ВидРесурса;
		КонецЕсли;
		Если День(СтрокаТЗ.Дата) = КоличествоДнейМесяца Тогда
			СтрокаТЗ.ДнейХранения = День(СтрокаТЗ.Дата)-День(Начдата)+1;
		Иначе	
			СтрокаТЗ.ДнейХранения = День(СтрокаТЗ.Дата)-День(Начдата);
		КонецЕсли;
		Если   СтрокаТЗ.Дата = КонецМесяца(ДокументОбъект.ПериодСверки) Тогда
			СтрокаТЗ.Количество = СтрокаТЗ.ОстатокНаНачало + СтрокаТЗ.Приход -  СтрокаТЗ.Расход;
		Иначе
			СтрокаТЗ.Количество = СтрокаТЗ.ОстатокНаНачало;
		Конецесли;
		
		СтрокаТЗ.Тариф = ПолучитьТариф(ДокументОбъект, СтрокаТЗ);
		СтрокаТЗ.Коэффициент = СтрокаТЗ.ДнейХранения/КоличествоДнейМесяца;
		СтрокаТЗ.ТоннаДни = СтрокаТЗ.Коэффициент*СтрокаТЗ.Количество;
		СтрокаТЗ.Сумма = Окр(СтрокаТЗ.ТоннаДни*СтрокаТЗ.Тариф);
		СтрокаТЗ.ДатаНачалаРасчета = НачДата;
		НачДата = СтрокаТЗ.Дата;
		
		//заполним тз документа
		//Если СтрокаТЗ.Сумма <> 0 тогда
			//НоваяСтрока = ДокументОбъект.Расчет.добавить();
			//ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ); 
		//КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.Расчет.Загрузить(тз);
	
КонецПроцедуры

Процедура РасчетХраненияЗалога(ДокументОбъект) экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ДокументОбъект.организация);
	Запрос.УстановитьПараметр("Склад", ДокументОбъект.Склад);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоМесяца(ДокументОбъект.ПериодСверки)) );
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецМесяца(ДокументОбъект.ПериодСверки)));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ур_ЗерноВЗалогеОстаткиИОбороты.Период КАК Дата,
	|	ур_ЗерноВЗалогеОстаткиИОбороты.Период КАК ДатаНачалаРасчета,
	|	ур_ЗерноВЗалогеОстаткиИОбороты.ВидРесурса КАК ВидРесурса,
	|	ур_ЗерноВЗалогеОстаткиИОбороты.ЗачтенныйвесНачальныйОстаток КАК ОстатокНаНачало,
	|	ур_ЗерноВЗалогеОстаткиИОбороты.ЗачтенныйвесПриход КАК Приход,
	|	ур_ЗерноВЗалогеОстаткиИОбороты.ЗачтенныйвесРасход КАК Расход,
	|	ур_ЗерноВЗалогеОстаткиИОбороты.ЗачтенныйвесКонечныйОстаток КАК ОстатокНаКонец,
	|	0 КАК Коэффициент,
	|	0 КАК ДнейХранения,
	|	0 КАК Количество,
	|	0 КАК ТоннаДни,
	|	0 КАК Сумма,
	|	0 КАК Тариф
	|ИЗ
	|	РегистрНакопления.ур_ЗерноВЗалоге.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			День,
	|			,
	|			Организация = &Организация
	|				И Склад = &Склад
	|				И ВидРесурса В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Соответствия.ВидРесурса
	|					ИЗ
	|						РегистрСведений.ур_СоответствиеСчетовУчетаРесурсов КАК Соответствия)) КАК ур_ЗерноВЗалогеОстаткиИОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидРесурса,
	|	Дата";
	
	тз = Запрос.Выполнить().Выгрузить();
	
	
	ТекВидРесурса = "";
	
	КоличествоДнейМесяца = День(КонецМесяца(ДокументОбъект.ПериодСверки));
	
	Для Каждого СтрокаТЗ ИЗ тз Цикл
		Если ТекВидРесурса <> СтрокаТЗ.ВидРесурса Тогда
			НачДата =  НачалоДня(НачалоМесяца(ДокументОбъект.ПериодСверки));
			ТекВидРесурса =  СтрокаТЗ.ВидРесурса;
		КонецЕсли;
		Если День(СтрокаТЗ.Дата) = КоличествоДнейМесяца Тогда
			СтрокаТЗ.ДнейХранения = День(СтрокаТЗ.Дата)-День(Начдата)+1;
		Иначе	
			СтрокаТЗ.ДнейХранения = День(СтрокаТЗ.Дата)-День(Начдата);
		КонецЕсли;
		Если   СтрокаТЗ.Дата = КонецМесяца(ДокументОбъект.ПериодСверки) Тогда
			СтрокаТЗ.Количество = СтрокаТЗ.ОстатокНаНачало + СтрокаТЗ.Приход -  СтрокаТЗ.Расход;
		Иначе
			СтрокаТЗ.Количество = СтрокаТЗ.ОстатокНаНачало;
		Конецесли;
		
		СтрокаТЗ.Тариф = ПолучитьТариф(ДокументОбъект, СтрокаТЗ);
		СтрокаТЗ.Коэффициент = СтрокаТЗ.ДнейХранения/КоличествоДнейМесяца;
		СтрокаТЗ.ТоннаДни = СтрокаТЗ.Коэффициент*СтрокаТЗ.Количество;
		СтрокаТЗ.Сумма = Окр(СтрокаТЗ.ТоннаДни*СтрокаТЗ.Тариф);
		СтрокаТЗ.ДатаНачалаРасчета = НачДата;
		НачДата = СтрокаТЗ.Дата;
		
		//заполним тз документа
		//Если СтрокаТЗ.Сумма <> 0 тогда
			//НоваяСтрока = ДокументОбъект.РасчетЗалог.добавить();
			//ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ); 
		//КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.РасчетЗалог.Загрузить(тз);
	
КонецПроцедуры

Функция ПолучитьСписокУчастниковЕЗХ(ДатаСреза)
	Перем СписокДляОтбора;
	
	СписокДляОтбора = "";

Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ур_СведенияОбУчастникахЕЗХСрезПоследних.Контрагент) КАК Наименование
		|ИЗ
		|	РегистрСведений.ур_СведенияОбУчастникахЕЗХ.СрезПоследних(&Период, Статус = &Действующий) КАК ур_СведенияОбУчастникахЕЗХСрезПоследних";

	Запрос.УстановитьПараметр("Действующий", Перечисления.ур_СтатусыУчастниковЕЗХ.Действующий);
	Запрос.УстановитьПараметр("Период", ДатаСреза);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокДляОтбора = СписокДляОтбора+СокрЛП(ВыборкаДетальныеЗаписи.Наименование)+";";
	КонецЦикла;
	
	Возврат СписокДляОтбора;
КонецФункции // ПолучитьСписокУчастниковЕЗХ()
 
///////////////////////////////////////////////////
//
Процедура ОткрытьФормуВыбораУчастникаЕЗХ(Элемент, ДатаСреза) Экспорт
	
	//СписокУчастниковЕЗХ = ПолучитьСписокУчастниковЕЗХ(ДатаСреза);
	//
	//ФормаВыбора = Справочники.Контрагенты.ПолучитьФормуВыбора("ФормаВыбораУчастниковЕЗХ", Элемент, );
	//
	////ФормаВыбора.СправочникСписок.ИерархическийПросмотр = Ложь;
	//ФормаВыбора.СправочникСписок.Отбор.Наименование.Значение = СписокУчастниковЕЗХ;
	////ФормаВыбора.СправочникСписок.Отбор.Контрагент.ВидСравнения = ;
	//ФормаВыбора.СправочникСписок.Отбор.Наименование.Использование = Истина;
	//ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Наименование.Доступность = Ложь;
	//
	//ФормаВыбора.Открыть();

	
КонецПроцедуры