# Если Клиент Тогда
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ДОПОЛНИТЕЛЬНЫМИ КНОПКАМИ

// Функция инициализирует дерево дополнительных кнопок
//	Параметры:
//		Нет
// Возвращаемое значение:
//		Тип: ДереваЗначений.
Функция ИнициализироватьДеревоДополнительныхКнопок() Экспорт
	
	ДеревоКнопок = Новый ДеревоЗначений;
	
	//Если ИмяКнопки = Неопределено, создается разделитель
	//Если Дерево имеет подчиненные, то 
	
	ДеревоКнопок.Колонки.Добавить("Имя");
	ДеревоКнопок.Колонки.Добавить("ТипКнопки");
	ДеревоКнопок.Колонки.Добавить("Текст");
	ДеревоКнопок.Колонки.Добавить("Подсказка");
	ДеревоКнопок.Колонки.Добавить("Картинка");
	ДеревоКнопок.Колонки.Добавить("Действие");
	ДеревоКнопок.Колонки.Добавить("Пометка");
	//Остальные свойства кнопки
	
	ДеревоКнопок.Колонки.Добавить("Расшифровка");
	
	Возврат ДеревоКнопок;
	
КонецФункции // ИнициализироватьДеревоДополнительныхКнопок()

// Функция добавляет новую строку в дерево кнопок
//
Функция ДобавитьСтрокуВДеревоКнопок(СтрокаПодменю, Имя, Знач ТипКнопки = Неопределено ,Текст = "", Действие = Неопределено, Расшифровка = Неопределено, Пометка = Ложь, Подсказка = "", Картинка = Неопределено, Позиция = Неопределено) Экспорт
	
	Если ТипКнопки = Неопределено Тогда
	
		ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
		
	КонецЕсли;
	Если Позиция = Неопределено Тогда
		СтрокаКнопки         = СтрокаПодменю.Строки.Добавить();
	Иначе
		СтрокаКнопки         = СтрокаПодменю.Строки.Вставить(Позиция);
	КонецЕсли; 
	
	
	СтрокаКнопки.Имя         = Имя;
	СтрокаКнопки.ТипКнопки   = ТипКнопки;
	СтрокаКнопки.Текст       = Текст;
	СтрокаКнопки.Действие    = Действие;
	СтрокаКнопки.Картинка    = Картинка;
	СтрокаКнопки.Подсказка   = Подсказка;
	СтрокаКнопки.Пометка     = Пометка;
	
	СтрокаКнопки.Расшифровка = Расшифровка;
	Возврат СтрокаКнопки;
	
КонецФункции // ДобавитьСтрокуВДеревоКнопок()

// Процедура формирует дерево кнопок для подменю "Заполнить"
//
Функция ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Действие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработкиПринадлежность.Ссылка,
	|	ВнешниеОбработкиПринадлежность.Ссылка.Наименование,
	|	ВнешниеОбработкиПринадлежность.ТабличнаяЧастьИмя КАК ТабличнаяЧастьИмя
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧастьИмя
	|ИТОГИ ПО
	|	ТабличнаяЧастьИмя";
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	ДеревоКнопок = ИнициализироватьДеревоДополнительныхКнопок();
	
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей);
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка());
	Иначе
		Возврат ДеревоКнопок;
	КонецЕсли;
	
	НомерКнопки = 0;
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		СтрокаПодменю = ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок,Выборка.ТабличнаяЧастьИмя);
		ВыборкаДействий            = Выборка.Выбрать();
		
		Пока ВыборкаДействий.Следующий() Цикл
			НомерКнопки = НомерКнопки + 1;
			
			ДобавитьСтрокуВДеревоКнопок(СтрокаПодменю, "ЗаполнениеТЧ"+НомерКнопки, ТипКнопкиКоманднойПанели.Действие, ВыборкаДействий.Наименование, Действие , ВыборкаДействий.Ссылка)
			
		КонецЦикла; 
	КонецЦикла; 
	
	
	Возврат ДеревоКнопок;
	
КонецФункции // ПолучитьДеревоКнопокЗаполненияТабличныхЧастей() 

// Процедура формирует подменю по дереву значений
// Параметры:
//	< СтрокаПодменю > (обязательный)
//		Тип: Дерево или элемент дерева значений, по данным которого необходимо построить подменю.
//	< Подменю> (обязательный)
//		Тип: Элемент командной панели «Кнопка» типа «Подменю». На которой необходимо сформировать новое подменю.
//	< Очищать> (по умолчанию «Ложь»)
//		Тип: булево. Определяет: следует ли очищать переданное подменю.
//	< ДобавлятьРазделительВНачало > (по умолчанию «Ложь»)
//		Тип: булево. Определяет: следует ли добавить в начало подменю разделитель.
Процедура СформироватьПодменю(СтрокаПодменю, Подменю, Очищать = Ложь, ДобавлятьРазделительВНачало = Ложь, КнопкиПодменюИзменяютДанные = Ложь) Экспорт
	
	Строки = СтрокаПодменю.Строки;
	Кнопки = Подменю.Кнопки;
	
	Если Очищать Тогда
		Кнопки.Очистить();
	КонецЕсли; 
	
	Если ДобавлятьРазделительВНачало и Строки.Количество() > 0 Тогда
		Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
	КонецЕсли; 
	
	Для каждого СтрокаКнопки Из Строки Цикл
		
		Кнопка = Кнопки.Добавить(СтрокаКнопки.Имя,СтрокаКнопки.ТипКнопки, СтрокаКнопки.Текст, СтрокаКнопки.Действие);
		
		Если СтрокаКнопки.Строки.Количество() > 0 Тогда
			
			СформироватьПодменю(СтрокаКнопки, Подменю, Ложь, Ложь)
			
		КонецЕсли; 
		
		Если Не СтрокаКнопки.Картинка = Неопределено Тогда
			
			Кнопка.Картинка  = СтрокаКнопки.Картинка;
		
		КонецЕсли; 
		
		Кнопка.Подсказка = СтрокаКнопки.Подсказка;
		Кнопка.Пояснение = СтрокаКнопки.Подсказка;
		Кнопка.Пометка   = СтрокаКнопки.Пометка;
		
		//Остальные свойства кнопки
		Если Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Действие Тогда
			Кнопка.ИзменяетДанные = КнопкиПодменюИзменяютДанные;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры // СформироватьПодменю()

// Процедура формирует подменю "Заполнить" у ТЧ по дереву значений
//
Процедура СформироватьПодменюЗаполненияТЧ(ДеревоКнопок, СоответствиеТЧ) Экспорт
	
	СтруктураТЧ = Новый Структура;
	Для Каждого КлючИЗначение Из СоответствиеТЧ Цикл
		
		СтруктураТЧ.Вставить(КлючИЗначение.Ключ.Данные,Новый Структура("ТабличноеПоле,ПодменюИлиКоманднаяПанель",КлючИЗначение.Ключ,КлючИЗначение.Значение));
		
	КонецЦикла;
	
	Для Каждого СтрокаПодменю Из ДеревоКнопок.Строки Цикл
		
		ИмяТабличнойЧасти = СтрокаПодменю.Имя;
		Если НЕ ПустаяСтрока(ИмяТабличнойЧасти) Тогда
			
			ЭлементыУправления = Неопределено;
			Если СтруктураТЧ.Свойство(ИмяТабличнойЧасти,ЭлементыУправления) Тогда
				
				СтрокаПодменю.Расшифровка = ЭлементыУправления.ТабличноеПоле;
				ПодменюИлиКоманднаяПанель = ЭлементыУправления.ПодменюИлиКоманднаяПанель;
				Если ТипЗНЧ(ПодменюИлиКоманднаяПанель) = Тип("КоманднаяПанель") Тогда
					
					ПодменюИлиКоманднаяПанель = ПодменюИлиКоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Подменю,"Заполнить");
					
				КонецЕсли;
				СформироватьПодменю(СтрокаПодменю, ПодменюИлиКоманднаяПанель, Ложь, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ЗАПОЛНЕНИЯ ТАБЛИЧНЫХ ЧАСТЕЙ ИЗ ВНЕШНИХ ОБРАБОТОК
 
// Процедура - обработчик нажатия любой из дополнительных кнопок заполнения табличных частей
// Параметры:
//    Форма       : Форма, вызвавшая процедуру
Процедура ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(СтрокаКнопки,ЭтотОбъект) Экспорт
	
	Расшифровка = СтрокаКнопки.Расшифровка;
	
	Если ТипЗНЧ(Расшифровка) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = Расшифровка.ПолучитьОбъект();
		
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней обработки заполнения табличной части документа. Возможно обработка была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры = Неопределено;
		МетаданныеОбъекта = ЭтотОбъект.Метаданные();
		СсылкаОбъекта = Неопределено;
		Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
			СсылкаОбъекта = Документы[МетаданныеОбъекта.Имя].ПустаяСсылка();
		ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
			СсылкаОбъекта = Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка();
		КонецЕсли;
		
		Если СсылкаОбъекта <> Неопределено Тогда
			Для Каждого Стр Из Расшифровка.Принадлежность Цикл
				Если (Стр.СсылкаОбъекта = СсылкаОбъекта) И (СокрЛП(Стр.ТабличнаяЧастьИмя) = СтрокаКнопки.Родитель.Имя) Тогда
					ДополнительныеПараметры = Стр.ДополнительныеПараметрыОбработки.Получить();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Попытка
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Исключение
			Сообщить("Ошибка исполнения внешней обработки табличной части документа."+Символы.ПС+ОписаниеОшибки(), СтатусСообщения.Важное);
			Возврат;
		КонецПопытки;
		
		// Передать внешней обработке дополнительные параметры
		Если ДополнительныеПараметры <> Неопределено Тогда
			// Если у внешней обработки есть реквизит для дополнительных параметров, присвоить ему значение
			Если НЕ Обработка.Метаданные().Реквизиты.Найти("ДополнительныеПараметры") = Неопределено Тогда
				Обработка.ДополнительныеПараметры = ДополнительныеПараметры;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			Обработка.Инициализировать(ЭтотОбъект, СтрокаКнопки.Родитель.Имя, СтрокаКнопки.Родитель.Расшифровка);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Заполнение ТЧ не произведено!");
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПЕЧАТИ

// Функция заполняет начальные параметры построителю отчета, который
//  используется для настройки отбора в мезанизме подключения внешних печатных форм.
//
// Параметры
//  ИмяТаблицы     - Строка, имя таблицы БД к которой необходимо определить запрос
//  СинонимТаблицы - Строка, синоним таблицы БД к которой необходимо определить запрос
//
// Возвращаемое значение:
//   ПостроительОтчета
//
Функция ИнициализироватьПостроительДопПечатныхФорм(ИмяТаблицы, СинонимТаблицы) Экспорт

	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	" + ИмяТаблицы + " КАК Объект
	|ГДЕ
	|	Объект.Ссылка = &Ссылка
	|{ГДЕ
	|	Объект.Ссылка.*}
	|";
	
	ПолеОбъекта = ПостроительОтчета.ДоступныеПоля.Найти("Ссылка");
	ПолеОбъекта.Представление = ?(НЕ ЗначениеЗаполнено(СинонимТаблицы), ИмяТаблицы, СинонимТаблицы);
	
	Возврат ПостроительОтчета;

КонецФункции // ИнициализироватьПостроительДопПечатныхФорм()

// Функция возвращает из дерева кнопок строку с описанием кнопки для макета по умолчанию
//
Функция ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяМетаданных, ДеревоКнопок)
	
	ИмяМакетаПоУмолчанию = ВосстановитьЗначение(ИмяМетаданных+ "МакетПечати");
	
	Если ИмяМакетаПоУмолчанию = Ложь или ДеревоКнопок.Строки.Количество() = 0 Тогда
		СтрокаПоУмолчанию = Неопределено;
	Иначе
		
		СтрокаПоУмолчанию = ДеревоКнопок.Строки.Найти(ИмяМакетаПоУмолчанию,"Текст");
		
		Если СтрокаПоУмолчанию = Неопределено Тогда
			СтрокаПоУмолчанию = ДеревоКнопок.Строки[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПоУмолчанию;
	
КонецФункции // ПолучитьСтрокуДереваМакетовПоУмолчанию()

// Процедура формирует дерево кнопок для подменю "Печать"
//
Функция ПолучитьДеревоМакетовПечати(СсылкаОбъекта, ВнутренниеПечатныеФормы, Действие = Неопределено, 
									ДействиеУстановитьПечатьПоУмолчанию = Неопределено) Экспорт
	
	// Сформировать структуру дерева
	ДеревоКнопок = ИнициализироватьДеревоДополнительныхКнопок();
	
	// Добавить в дерево встроенные печатные формы
	Если НЕ ВнутренниеПечатныеФормы = Неопределено Тогда
		ДобавитьВДеревоМакетовВстроенныеФормы(ДеревоКнопок, ВнутренниеПечатныеФормы, Действие);
	КонецЕсли;
	
	// Добавить в дерево дополнительные печатные формы из Справочник.ВнешниеОбработки
	ДобавитьВДеревоМакетовДополнительныеФормы(ДеревоКнопок, СсылкаОбъекта, Действие);
	
	// Получить имя макета печати по умолчанию
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(СсылкаОбъекта.Метаданные().Имя ,ДеревоКнопок);
	
	// Для подменю Печать объекта: установить пометку кнопки печати по умолчанию
	Если НЕ СтрокаПоУмолчанию = Неопределено Тогда
		СтрокаПоУмолчанию.Пометка = Истина;
	КонецЕсли;
	 
	// Добавит печать по умолчанию
	Если ДеревоКнопок.Строки.Количество() > 0 Тогда
		ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Разделитель);
		ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, "ПечатьПоУмолчанию", ТипКнопкиКоманднойПанели.Действие, "По умолчанию...", ДействиеУстановитьПечатьПоУмолчанию, "ПечатьПоУмолчанию");
	КонецЕсли; 
	
	Возврат ДеревоКнопок;
	
КонецФункции // ПолучитьДеревоМакетовПечати()

// Процедура Устанавливает кнопку "Печать по умолчанию"
//
Процедура УстановитьПечатьПоУмолчанию(	ПечатьПоУмолчанию, КоманднаяПанель, ДеревоМакетов, ИмяМетаданных, 
										ДействиеПечатьПоУмолчанию) Экспорт
	
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяМетаданных,ДеревоМакетов);
	
	Если Не СтрокаПоУмолчанию = Неопределено Тогда
		Если ПечатьПоУмолчанию = Неопределено Тогда
			
			ИмяКнопки = Строка (Новый УникальныйИдентификатор);
			
			Если КоманднаяПанель.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право Тогда
				КоманднаяПанель.Кнопки.Вставить(0,,ТипКнопкиКоманднойПанели.Разделитель);
				ПечатьПоУмолчанию = КоманднаяПанель.Кнопки.Вставить(0,ИмяКнопки,ТипКнопкиКоманднойПанели.Действие,"",ДействиеПечатьПоУмолчанию);
			Иначе
				КоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
				ПечатьПоУмолчанию = КоманднаяПанель.Кнопки.Добавить(ИмяКнопки,ТипКнопкиКоманднойПанели.Действие,"",ДействиеПечатьПоУмолчанию);
			КонецЕсли;
			
			ПечатьПоУмолчанию.Подсказка = "Печать по умолчанию";
			
		КонецЕсли; 
		
		ПечатьПоУмолчанию.Текст       = СтрокаПоУмолчанию.Текст;
		ПечатьПоУмолчанию.Доступность = Истина; 
		
	ИначеЕсли Не ПечатьПоУмолчанию = Неопределено Тогда
		
		ПечатьПоУмолчанию.Текст       = "Печать по умолчанию не назначена"; 
		ПечатьПоУмолчанию.Доступность = Ложь; 
		
	КонецЕсли; 
	
КонецПроцедуры // УстановитьПечатьПоУмолчанию()

// Процедура устанавливает Подменю "Печать" 
// Параметры:
//    Форма       : Форма, вызвавшая процедуру
//    ДополнительныеКнопки : Структура дополнительных кнопок
Процедура УстановитьПодменюПечати(ПодменюПечати, КоманднаяПанель, СоздаватьПриНеобходимости) Экспорт
	
	Если НЕ ПодменюПечати = Неопределено ИЛИ НЕ СоздаватьПриНеобходимости Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяПодменю = Строка (Новый УникальныйИдентификатор);
	
	Если КоманднаяПанель.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право Тогда
		КоманднаяПанель.Кнопки.Вставить(0,,ТипКнопкиКоманднойПанели.Разделитель);
		ПодменюПечати = КоманднаяПанель.Кнопки.Вставить(0,ИмяПодменю,ТипКнопкиКоманднойПанели.Подменю,"Печать");
	Иначе
		КоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
		ПодменюПечати = КоманднаяПанель.Кнопки.Добавить(ИмяПодменю,ТипКнопкиКоманднойПанели.Подменю,"Печать");
	КонецЕсли;
	
	ПодменюПечати.Подсказка = "Меню выбора печатных форм";
	
КонецПроцедуры // УстановитьПодменюПечати()

// Процедура - обработчик нажатия любой из дополнительных кнопок печати
// Параметры:
//    Форма       : Форма, вызвавшая процедуру
Процедура ПечатьПоДополнительнойКнопке(УдалитьДеревоМакетов, Объект, Форма, ТекстКнопки) Экспорт
	
	Попытка 
		ФормаОбработкиОбменаДаннымиПоОрганизацииИДокументами = Обработки.ОбменДаннымиПоОрганизацииИДокументами.ПолучитьФорму("Форма");
		Если ФормаОбработкиОбменаДаннымиПоОрганизацииИДокументами.Открыта() Тогда
			СписокОткрытыхОбектов = ФормаОбработкиОбменаДаннымиПоОрганизацииИДокументами.ЭтотОбъект.мСписокОткрытыхОбъектов;
			Если СписокОткрытыхОбектов.НайтиПоЗначению(Объект) <> Неопределено Тогда
				Сообщить("Печать документов, загруженных обработкой ""Обмен данными(по организации) и документами"" запрещена!", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Если НЕ РаботаСДиалогами.ПроверитьМодифицированностьВФорме(Объект,Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		СтруктураВнутреннихПечатныхФорм = Объект.ПолучитьСтруктуруПечатныхФорм()
	Исключение
		СтруктураВнутреннихПечатныхФорм = Новый Структура;
	КонецПопытки;
	
	ДеревоМакетовПечати = ПолучитьДеревоМакетовПечати(Объект.Ссылка, СтруктураВнутреннихПечатныхФорм);
	
	СтрокаКнопки = ДеревоМакетовПечати.Строки.Найти(ТекстКнопки,"Текст");
	
	Если СтрокаКнопки = Неопределено Тогда
		Предупреждение("Печать не доступна. Изменился набор реквизитов!");
		Возврат;
	КонецЕсли; 
	
	НаПринтер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ПечатьДокументовБезПредварительногоПросмотра") = Истина;
	
	Если ТипЗнч(СтрокаКнопки.Расшифровка) = Тип("Структура") Тогда
		ТабДокумент = НапечататьВнешнююФорму(Объект.Ссылка, СтрокаКнопки.Расшифровка);
		Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
			НапечататьДокумент(ТабДокумент, , НаПринтер, "Нематериальный актив: " + СокрЛП(Объект.Наименование),Объект.Ссылка);
		ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			НапечататьДокумент(ТабДокумент, , НаПринтер, "Основное средство: " + СокрЛП(Объект.Наименование),Объект.Ссылка);
		Иначе 
			НапечататьДокумент(ТабДокумент, , НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(Объект),Объект.Ссылка);
		КонецЕсли;
	Иначе
		Объект.Печать(СтрокаКнопки.Имя, , НаПринтер);
	КонецЕсли;                          
	
КонецПроцедуры // ПечатьПоДополнительнойКнопке()

// Процедура назначает макет по умолчанию
//
Функция НазначитьКнопкуПечатиПоУмолчанию(ДеревоМакетов, ИмяМетаданных) Экспорт
	
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяМетаданных,ДеревоМакетов);
	СписокМакетов = Новый СписокЗначений;
	
	Для каждого Строка Из ДеревоМакетов.Строки Цикл
		Если Строка.ТипКнопки = ТипКнопкиКоманднойПанели.Действие и Не Строка.Расшифровка = "ПечатьПоУмолчанию" Тогда
			СписокМакетов.Добавить(Строка.Текст,,СтрокаПоУмолчанию = Строка);
		КонецЕсли; 
	КонецЦикла; 
	
	ФормаВыбораПечатнойФормыПоУмолчанию = ПолучитьОбщуюФорму("ФормаВыбораПечатнойФормыПоУмолчанию");
	ФормаВыбораПечатнойФормыПоУмолчанию.СписокВыбораПечатнойФормы = СписокМакетов;
	МакетПоУмолчанию = ФормаВыбораПечатнойФормыПоУмолчанию.ОткрытьМодально();
	
	Если МакетПоУмолчанию = "" Тогда
		СохранитьЗначение(ИмяМетаданных + "МакетПечати", Ложь);
	ИначеЕсли Не МакетПоУмолчанию = Неопределено Тогда
		СохранитьЗначение(ИмяМетаданных + "МакетПечати", МакетПоУмолчанию);
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции // НазначитьКнопкуПечатиПоУмолчанию()

// Функция получает ТабличныйДокумент для печати из внешней печатной формы.
//
// Параметры
//  Ссылка         - Ссылка, для которой необходимо напечатать документ
//  ИсточникМакета - ИсточникМакета, структура, содержащая внешнюю обработку для печати
//
// Возвращаемое значение:
//   ТабличныйДокумент
//
Функция НапечататьВнешнююФорму(Ссылка, ИсточникМакета) Экспорт

	Перем ДополнительныеПараметры;
	
	ДвоичныеДанные = ИсточникМакета.СсылкаНаВнешнююОбработку.Принадлежность[ИсточникМакета.НомерСтроки - 1].ХранилищеВнешнейОбработки.Получить();
	
	// Получить дополнительные параметры внешней обработки
	ИсточникМакета.Свойство("ДополнительныеПараметрыОбработки", ДополнительныеПараметры);
	
	Если ДвоичныеДанные = Неопределено Тогда
		ДвоичныеДанные = ИсточникМакета.СсылкаНаВнешнююОбработку.ХранилищеВнешнейОбработки.Получить();
	КонецЕсли;
	
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Неопределено;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("epf");
	//Попытка
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		
		// Передать внешней обработке дополнительные параметры
		Если ДополнительныеПараметры <> Неопределено Тогда
			
			// Если у внешней обработки есть реквизит для дополнительных параметров, присвоить ему значение
			Если НЕ Обработка.Метаданные().Реквизиты.Найти("ДополнительныеПараметры") = Неопределено Тогда
				Обработка.ДополнительныеПараметры = ДополнительныеПараметры;
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент = Обработка.Печать();
		УдалитьФайлы(ИмяФайла);
	//Исключение
	//	ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось сформировать внешнюю печатную форму!");
	//КонецПопытки;
	
	Возврат ТабДокумент;

КонецФункции // НапечататьВнешнююФорму()

// Процедура дополняет таблицу печатных форма (ТаблицаМакетов) объекта
// из справочника "Дополнительные печатные формы"
Процедура ДобавитьВДеревоМакетовДополнительныеФормы(ДеревоМакетов, СсылкаОбъекта, Действие)
	
	СтрокиДерева = ДеревоМакетов.Строки;
	
	Если ТипЗнч(СсылкаОбъекта) = Тип("ОбъектМетаданных") Тогда
		Возврат;
	КонецЕсли; 
	
	МетаданныеОбъекта = СсылкаОбъекта.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработкиПринадлежность.Ссылка КАК Ссылка,
	|	ВнешниеОбработкиПринадлежность.ДополнительныеПараметрыОбработки КАК ДополнительныеПараметрыОбработки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВнешниеОбработкиПринадлежность.ПредставлениеКнопки, """") <> """" ТОГДА ВнешниеОбработкиПринадлежность.ПредставлениеКнопки
	|		ИНАЧЕ ВнешниеОбработкиПринадлежность.Ссылка.Наименование
	|	КОНЕЦ КАК Наименование,	
	|	ВнешниеОбработкиПринадлежность.Ссылка.ХранилищеВнешнейОбработки КАК СсылкаХранилищеВнешнейОбработки,
	|	ВнешниеОбработкиПринадлежность.НастройкиПостроителяДляОтбора КАК НастройкиПостроителяДляОтбора,
	|	ВнешниеОбработкиПринадлежность.ХранилищеВнешнейОбработки КАК ХранилищеВнешнейОбработки,
	|	ВнешниеОбработкиПринадлежность.ЗаменяемаяПечатнаяФорма КАК ЗаменяемаяПечатнаяФорма,
	|	ВнешниеОбработкиПринадлежность.НомерСтроки
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки
	|ИТОГИ ПО
	|	Ссылка";
	
	ИмяТаблицыОбъекта = "";
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма);
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
		ИмяТаблицыОбъекта = "Документ." + МетаданныеОбъекта.Имя;
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка());
		ИмяТаблицыОбъекта = "Справочник." + МетаданныеОбъекта.Имя;
	Иначе
		Возврат;
	КонецЕсли;
	
	БылРазделитель	= СтрокиДерева.Количество() = 0 ;
	ВыборкаСсылок	= Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылок.Следующий() Цикл
		
		ПорядковыйНомер	= 0;
		Выборка			= ВыборкаСсылок.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяОбработка	= Неопределено;
			ОбработкаСтроки	= Выборка.ХранилищеВнешнейОбработки.Получить();
			
			Если ТипЗнч(ОбработкаСтроки) = Тип("ДвоичныеДанные") Тогда
				НоваяОбработка = ОбработкаСтроки;
			Иначе
				ОбработкаЭлемента = Выборка.СсылкаХранилищеВнешнейОбработки.Получить();
				Если ТипЗнч(ОбработкаЭлемента) = Тип("ДвоичныеДанные") Тогда
					НоваяОбработка = ОбработкаЭлемента;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяОбработка = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			СтруктураРасшифровки = Новый Структура("СсылкаНаВнешнююОбработку, НомерСтроки, ДополнительныеПараметрыОбработки", ВыборкаСсылок.Ссылка, Выборка.НомерСтроки, Выборка.ДополнительныеПараметрыОбработки.Получить());
			
			// Проверим, удовлетворяет ли подключаемый отчет указанным в нем условиям
			НастройкиПостроителя = Выборка.НастройкиПостроителяДляОтбора.Получить();
			
			Если ТипЗнч(НастройкиПостроителя) = Тип("НастройкиПостроителяОтчета") Тогда
				
				ПостроительОтчета = ИнициализироватьПостроительДопПечатныхФорм(ИмяТаблицыОбъекта, МетаданныеОбъекта.Синоним);
				ПостроительОтчета.Параметры.Вставить("Ссылка", СсылкаОбъекта);
				ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя, Истина, Ложь, Ложь, Ложь, Ложь);
				ПостроительОтчета.Выполнить();
				
				Если ПостроительОтчета.Результат.Пустой() Тогда
					Продолжить;
				КонецЕсли;
				
				Подсказка = "Отбор";
			Иначе
				Подсказка = "";
			КонецЕсли;
			
			// Теперь проверим, надо ли заменять существующую печ.форму или нужно добавить новую
			Если ЗначениеЗаполнено(Выборка.ЗаменяемаяПечатнаяФорма) Тогда
				Подсказка = "Печатная форма заменена подключаемой" + Подсказка;
				СтрокаДерева = СтрокиДерева.Найти(Выборка.ЗаменяемаяПечатнаяФорма, "Имя");
				
				Если СтрокаДерева = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				//ПодменятьВстроеннуюФорму = Ложь;
				СтрокаДерева.Расшифровка = СтруктураРасшифровки;
				СтрокаДерева.Подсказка = Подсказка;
				СтрокаДерева.Текст = Выборка.Наименование;
				Продолжить;
				
			Иначе
				Подсказка = "Подключаемая печатная форма" + Подсказка;
				
			КонецЕсли; 
			
			// Только тут будем добавлять новую печ. форму в дополнение списка
			Если Не БылРазделитель Тогда
				ДобавитьСтрокуВДеревоКнопок(ДеревоМакетов, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Разделитель);
				БылРазделитель = Истина;
			КонецЕсли;
			
			Суффикс = ?(ПорядковыйНомер = 0 ,"" , "("+ПорядковыйНомер+")");
			ДобавитьСтрокуВДеревоКнопок(ДеревоМакетов, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Действие, Выборка.Наименование + Суффикс, Действие ,СтруктураРасшифровки, , Подсказка, , );			
			
		КонецЦикла;
	
	КонецЦикла; 
	
КонецПроцедуры // ДобавитьВДеревоМакетовДополнительныеФормы()

// Процедура добавляет в дерево кнопок макетов встроенные печатные формы
//
Процедура ДобавитьВДеревоМакетовВстроенныеФормы(ДеревоКнопок, ВнутренниеПечатныеФормы, Действие)

	Для каждого КлючИЗначение Из ВнутренниеПечатныеФормы Цикл
		
		Если КлючИЗначение.Значение = Неопределено Тогда
			ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, , ТипКнопкиКоманднойПанели.Разделитель);
		Иначе
			ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, КлючИЗначение.Ключ, ТипКнопкиКоманднойПанели.Действие, КлючИЗначение.Значение, Действие, КлючИЗначение.Ключ,,"Встроенная печатная форма");
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры // ДобавитьВДеревоМакетовВстроенныеФормы()

// Функция выводит на печать макет документа "по умолчанию"
//
Функция НапечататьДокументПоУмолчанию(Объект, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	ЭтоДокумент = Метаданные.Документы.Содержит(Объект.Метаданные());
	
	Если ЭтоДокумент И Объект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить и Не куфиб_ОбщегоНазначения.РазрешитьПечатьНепроведенныхДокументов(Объект.Проведен) Тогда
		Сообщить("Недостаточно полномочий для печати непроведенного документа!"); 
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		СтруктураВнутреннихПечатныхФорм = Объект.ПолучитьСтруктуруПечатныхФорм()
	Исключение
		СтруктураВнутреннихПечатныхФорм = Новый Структура;
	КонецПопытки;
	
	ДеревоМакетов = ПолучитьДеревоМакетовПечати(Объект.Ссылка, СтруктураВнутреннихПечатныхФорм);
	
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(Объект.Метаданные().Имя, ДеревоМакетов);
	
	Если СтрокаПоУмолчанию = Неопределено Тогда
		
		Сообщить("Печать по умолчанию не определена!"); 
		Возврат Ложь;
		
	КонецЕсли;
	
	Расшифровка = СтрокаПоУмолчанию.Расшифровка;
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		Если Не РаботаСДиалогами.ПроверитьМодифицированность(Объект) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТабДокумент = НапечататьВнешнююФорму(Объект.Ссылка, Расшифровка);
		НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ?(ЭтоДокумент, РаботаСДиалогами.СформироватьЗаголовокДокумента(Объект), Строка(Объект)), Объект.Ссылка);
	Иначе
		Объект.Печать(Расшифровка, КоличествоЭкземпляров, НаПринтер);
	КонецЕсли;
	Возврат Истина;
	
КонецФункции // НапечататьДокументПоУмолчанию()

// Печатает документ полученный по нажатию кнопки в форме списка
//
// Параметры
//  Документ - документ,который нужно отпечатать
//
Процедура НапечататьДокументИзФормыСписка(Объект) Экспорт
	
	Если Объект = Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	НаПринтер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ПечатьДокументовБезПредварительногоПросмотра") = Истина;	
	
	Если Не НапечататьДокументПоУмолчанию(Объект,0, НаПринтер) Тогда                             		
		Предупреждение("Форма печати документа по умолчанию не определена. Операция не выполнена.");
	КонецЕсли;

КонецПроцедуры // НапечататьДокументИзФормыСписка()

// Выводит на печать подготовленный макет 
//
// Параметры:
//  ПечДокумент           - ТабличыйДокумент, макет на печать,
//  КоличествоЭкземпляров - Число, количество экземпляров на печать,
//  НаПринтер             - Булево, Если истина, то выводим сразу на принтер.
//  Заголовок             - Заголовок окна табличного документа
//
Процедура НапечататьДокумент(ПечДокумент, КоличествоЭкземпляров = 1, НаПринтер = Ложь, Заголовок = "", Ссылка = Неопределено) Экспорт

	Если ПечДокумент = Неопределено тогда
		Возврат; 
	КонецЕсли;

	// Получить необходимое количество копий
	Если КоличествоЭкземпляров < 1 Тогда
		ПечДокумент.КоличествоЭкземпляров = 1;
	Иначе
		ПечДокумент.КоличествоЭкземпляров = КоличествоЭкземпляров;
	КонецЕсли;

	Если НЕ ПечДокумент.АвтоМасштаб
	   И НЕ ЗначениеЗаполнено(ПечДокумент.ИмяПринтера) Тогда
		ПечДокумент.АвтоМасштаб = Истина;
	КонецЕсли;

	Если НаПринтер Тогда

		ПечДокумент.Напечатать();

	Иначе

		// Отобразить печатный документ на экране
		Если Метаданные.ОбщиеФормы.Найти("ПечатьДокументов") <> Неопределено Тогда
			ФормаПечати = ПолучитьОбщуюФорму("ПечатьДокументов",, Новый УникальныйИдентификатор);
			ФормаПечати.ОбъектПечати     = Ссылка;
			ФормаПечати.ПечатныйДокумент = ПечДокумент;
			ФормаПечати.Заголовок        = Заголовок;
			ФормаПечати.Защита           = УправлениеПользователями.ЗащитаТаблиц();
			ФормаПечати.Открыть();
			
			// сохраним ссылку на последнюю открытую форму печати в глобальной переменной, 
			// чтобы потом к ней можно было программно обращаться
			глЗначениеПеременнойУстановить("глПоследняяОткрытаяФормаПечатьДокументов", ФормаПечати);
		Иначе
			ПечДокумент.ОтображатьЗаголовки = Ложь;
			ПечДокумент.ОтображатьСетку     = Ложь;
			ПечДокумент.Защита              = УправлениеПользователями.ЗащитаТаблиц();
			ПечДокумент.ТолькоПросмотр      = Истина;
			ПечДокумент.Показать(Заголовок);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // НапечататьДокумент()

// Печатает движения документа
//
// Параметры:
//  ДокументСсылка - ссылка на документ, движения которого печатаем
//
Процедура НапечататьДвиженияДокумента(ДокументСсылка) Экспорт

	// может, ссылки еще не существует? надо сначала записать документ
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Предупреждение("Сначала запишите документ!");
		Возврат;
	КонецЕсли;
	
	// Получим контекст отчета
	ПечатьДвиженийДокумента = Отчеты.ДвиженияДокумента.Создать();

	//Установим реквизиты и переменые отчета
	ПечатьДвиженийДокумента.Документ = ДокументСсылка;

	// Напечатаем движения
	ПечатьДвиженийДокумента.СформироватьОтчет();

КонецПроцедуры // НапечататьДвиженияДокумента()

// Функция возвращает значение "Истина" или "Ложь" в зависимости от 
//  результата вызова метода табличного документа ПроверитВывод() с учетом 
//   наличия или отсутствия в системе принтера по умолчанию.
//
// Параметры
//  ТабличныйДокумент  - табличный документ
//  ВыводимыеОбласти   - массив выводимых областей
//                 
// Возвращаемое значение:
//   Булево
//
Функция ПроверитьВыводДляТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти) Экспорт
	
	Попытка
		//Проверяет, умещаются ли переданные табличные документы на страницу при печати.
		Возврат ТабличныйДокумент.ПроверитьВывод(ВыводимыеОбласти);
		
	Исключение
		//При возникновении проблем с получением информации о текущем принтере возвращает значение "ИСТИНА".
		Возврат Истина;
		
	КонецПопытки;
	
КонецФункции // ПроверитьВыводДляТабличногоДокумента()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФАЙЛАМИ ДЛЯ МЕХАНИЗМА ДОПРОЛНИТЕЛЬНОЙ ИНФОРМАЦИИ

// Открывает переданный файл на диске с учетом типа файлов. Файлы, с которыми 
// может работать 1С:Предприятие открываются в 1С:Предприятии. Остальные файлы
// пытаются открыться зарегистрированным для них в системе приложением.
//
// Параметры
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//  ИмяФайла     – Строка, содержащая имя файла, без имени каталога.
//
Процедура ОткрытьФайлДополнительнойИнформации(ИмяКаталога, ИмяФайла) Экспорт

	ПолноеИмяФайла = ПолучитьИмяФайла(ИмяКаталога, ИмяФайла);
	РасширениеФайла = Врег(ПолучитьРасширениеФайла(ИмяФайла));

	Если РасширениеФайла = "MXL" Тогда

		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.Прочитать(ПолноеИмяФайла);
		ТабличныйДокумент.Показать(ИмяФайла, Лев(ИмяФайла, СтрДлина(ИмяФайла) - 4));

	ИначеЕсли РасширениеФайла = "TXT" Тогда

		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ПолноеИмяФайла);
		ТекстовыйДокумент.Показать(ИмяФайла, Лев(ИмяФайла, СтрДлина(ИмяФайла) - 4));

	ИначеЕсли РасширениеФайла = "EPF" Тогда

		ВнешняяОбработка = ВнешниеОбработки.Создать(ПолноеИмяФайла);
		ВнешняяОбработка.ПолучитьФорму().Открыть();

	Иначе

		ЗапуститьПриложение(ПолноеИмяФайла);

	КонецЕсли;

КонецПроцедуры // ОткрытьФайлДополнительнойИнформации()

#КонецЕсли

// Составляет полное имя файла из имени каталога и имени файла.
//
// Параметры
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//  ИмяФайла     – Строка, содержащая имя файла, без имени каталога.
//
// Возвращаемое значение:
//   Строка – полное имя файла с учетом каталога.
//
Функция ПолучитьИмяФайла(ИмяКаталога, ИмяФайла) Экспорт

	Если Не ПустаяСтрока(ИмяФайла) Тогда
		
		Возврат ИмяКаталога + ?(Прав(ИмяКаталога, 1) = "\", "", "\") + ИмяФайла;	
		
	Иначе
		
		Возврат ИмяКаталога;
		
	КонецЕсли;

КонецФункции // ПолучитьИмяФайла()

// Формирует строку фильтра для диалога выбора файла с типами файлов.
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//   Строка – фильтр по типам файлов для диалога выбора файла.
//
Функция ПолучитьФильтрФайлов() Экспорт

	Возврат "Все файлы (*.*)|*.*|"
		  + "Документ Microsoft Word (*.doc)|*.doc|"
		  + "Документ Microsoft Excell (*.xls)|*.xls|"
		  + "Документ Microsoft PowerPoint (*.ppt)|*.ppt|"
		  + "Документ Microsoft Visio (*.vsd)|*.vsd|"
		  + "Письмо электронной почты (*.msg)|*.msg|"
		  + "Картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|"
		  + "Текстовый документ (*.txt)|*.txt|"
		  + "Табличный документ (*.mxl)|*.mxl|";

КонецФункции // ПолучитьФильтрФайлов()

// Функция определяет дату последней модификации существующего файла на диске
// Параметры
//  ИмяФайла  – Строка, содержащая полный путь к файла на диске.
//
// Возвращаемое значение:
//   Дата – Дата последней модификации файла
//
Функция ПолучитьДатуФайла(Знач ИмяФайла) Экспорт
	
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.ПолучитьВремяИзменения();
	 
КонецФункции

// Формирует строку фильтра для диалога выбора картинки с типами файлов.
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//   Строка – фильтр по типам файлов для диалога выбора картинки.
//
Функция ПолучитьФильтрИзображений() Экспорт

	Возврат "Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|" 
		  + "Формат bmp (*.bmp;*.dib;*.rle)|*.bmp;*.dib;*.rle|"
		  + "Формат jpeg (*.jpg;*.jpeg)|*.jpg;*.jpeg|"
		  + "Формат tiff (*.tif)|*.tif|"
		  + "Формат gif (*.gif)|*.gif|"
		  + "Формат png (*.png)|*.png|"
		  + "Формат icon (*.ico)|*.ico|"
		  + "Формат метафайл (*.wmf;*.emf)|*.wmf;*.emf|";

КонецФункции // ПолучитьФильтрИзображений()

// Выделяет из имени файла его расширение (набор символов после последней точки).
//
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, неважно с именем каталога или без.
//
// Возвращаемое значение:
//   Строка – расширение файла.
//
Функция ПолучитьРасширениеФайла(ИмяФайла) Экспорт

	ПозицияПоследнейТочки = 0;
	РасширениеФайла = ИмяФайла;

	Пока 1 = 1 Цикл
	
		ПозицияПоследнейТочки = Найти(РасширениеФайла, ".");

		Если ПозицияПоследнейТочки = 0 Тогда

			Прервать;

		Иначе

			РасширениеФайла = Сред(РасширениеФайла, ПозицияПоследнейТочки + 1)

		КонецЕсли;

	КонецЦикла;

	Возврат ?(РасширениеФайла = ИмяФайла, "", РасширениеФайла);

КонецФункции // ПолучитьРасширениеФайла()

// Формирует имя каталога для сохранения/чтения файлов. Для различных типов объектов возможны 
// различные алгоритмы определения каталога.
//
// Параметры
//  ОбъектФайла  – Ссылка на объект данных, для которого прикрепляются файлы.
//  ТекущийПользователь - Ссылка на справочник Пользователи, с текущим пользователем
//                 конфигурации.
//
// Возвращаемое значение:
//   Строка – каталог файлов для указанного объекта и пользователя.
//
Функция ПолучитьИмяКаталога(ТекущийПользователь) Экспорт

	// Получим рабочий каталог из свойств пользователя.
	РабочийКаталог = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнойКаталогФайлов");

	// Если рабочий каталог не указан получим каталог временных файлов прогаммы
	Если ПустаяСтрока(РабочийКаталог) Тогда
		РабочийКаталог = КаталогВременныхФайлов();
	КонецЕсли;

	// Так как при различных указаниях рабочего каталога возможно наличие или отсутствие
	// последнего слеша, приведем строку каталога к унифицированному виду - без слеша на конце.
	Если Прав(РабочийКаталог, 1) = "\" Тогда
		РабочийКаталог = Лев(РабочийКаталог, СтрДлина(РабочийКаталог) - 1);
	КонецЕсли;

	Возврат РабочийКаталог;

КонецФункции // ПолучитьИмяКаталога()

#Если Клиент Тогда

// Проверяет наличие каталога на диске и предлагает создать, если каталога не существует.
//
// Параметры
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//
// Возвращаемое значение:
//   Булево – Истина, если каталог существует или создан, Ложь, если каталога нет.
//
Функция ПроверитьСуществованиеКаталога(ИмяКаталога) Экспорт

	КаталогНаДиске = Новый Файл(ИмяКаталога);
	Если КаталогНаДиске.Существует() Тогда
		Возврат Истина;
	Иначе
		Ответ = Вопрос("Указанный каталог не существует. Создать каталог?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			СоздатьКаталог(ИмяКаталога);
			Возврат Истина;
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;

КонецФункции // ПроверитьСуществованиеКаталога()

// Позволяет пользователю выбрать каталог на диске.
//
// Параметры
//  ИмяКаталога  – Строка, содержащая начальный путь к каталогу на диске.
//	ЗаголовокДиалога - Строка, содержащая заголовок диалога
//
// Возвращаемое значение:
//   Булево – Истина, если каталог выбран, Ложь, если нет.
//
Функция ВыбратьКаталог(ИмяКаталога, Знач ЗаголовокДиалога = "Укажите каталог") Экспорт

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = ЗаголовокДиалога;
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Каталог = ИмяКаталога;

	Если Диалог.Выбрать() Тогда
		ИмяКаталога = Диалог.Каталог;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ВыбатьКаталог()

// Сохраняет файл на диске.
//
// Параметры
//  Хранилище    – ХранилищеЗначения, которое содержит объект типа 
//                 ДвоичныеДанные с файлом для записи на диск.
//  ИмяФайла     – Строка, содержащая полное имя файла.
//  ТолькоЧтение – Булево, признак установки записываемому файлу атрибута ТолькоЧтение.
//  СпособПерезаписи – Строка. Параметр определеляет способ перезаписи существующих
//                 файлов на диске. В зависимости от пришедшего параметра выдается или
//                 не выдается запрос на перезапись файлов. Может устанавливаться в теле
//                 функции, если это необходимо. Принимаемые значения:
//                 "" (пустая строка) - это означает, что диалог еще ни разу не задавался
//                 и при наличии существующего файла будет выдан диалог запроса перезаписи.
//                 ДА - предыдущий файл был перезаписан, но перезапись текущего надо 
//                 запросить снова
//                 НЕТ - предыдущий файл не был перезаписан, но перезапись текущего надо 
//                 запросить снова
//                 ДАДЛЯВСЕХ - предыдущий файл был перезаписан, и все последующие тоже 
//                 надо перезаписывать.
//                 НЕТДЛЯВСЕХ - предыдущий файл не был перезаписан, и все последующие тоже 
//                 не надо перезаписывать.
//
// Возвращаемое значение:
//   Булево – Истина, если каталог выбран, Ложь, если нет.
//
Функция СохранитьФайлНаДиске(Хранилище, ИмяФайла, ТолькоЧтение, СпособПерезаписи, ВопросОПерезаписи = Истина, ИмяСправочника = "ХранилищеДополнительнойИнформации") Экспорт

	Попытка

		ФайлНаДиске = Новый Файл(ИмяФайла);
		КаталогНаДиске = Новый Файл(ФайлНаДиске.Путь);

		Если Не КаталогНаДиске.Существует() Тогда
			СоздатьКаталог(ФайлНаДиске.Путь);
		КонецЕсли;

		Если ФайлНаДиске.Существует() И ВопросОПерезаписи = Истина Тогда

			Если СпособПерезаписи = ""
			 ИЛИ Врег(СпособПерезаписи) = "ДА"
			 ИЛИ Врег(СпособПерезаписи) = "НЕТ" Тогда

				ФормаЗапросаПерезаписиФайлов = Справочники[ИмяСправочника].ПолучитьФорму("ФормаЗапросаПерезаписиФайлов");
				ФормаЗапросаПерезаписиФайлов.ТекстПредупреждения = 
					"На локальном диске уже существует файл:
					|" + ИмяФайла + "
					|Перезаписать имеющийся файл?";
				СпособПерезаписи = ФормаЗапросаПерезаписиФайлов.ОткрытьМодально();

				Если СпособПерезаписи = Неопределено
				 ИЛИ Врег(СпособПерезаписи) = "НЕТ"
				 ИЛИ Врег(СпособПерезаписи) = "НЕТДЛЯВСЕХ" Тогда
					Возврат Ложь;
				КонецЕсли;

			ИначеЕсли Врег(СпособПерезаписи) = "НЕТДЛЯВСЕХ" Тогда

				Возврат Ложь;

			КонецЕсли;

			// Если существующему файлу установлено ТолькоЧтение, отменим эту установку.
			Если ФайлНаДиске.ПолучитьТолькоЧтение() Тогда
				ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
			КонецЕсли;

		КонецЕсли;

		// Остались случаи когда:
		// - пользователь ответил Да или ДаДляВсех в текущем диалоге
		// - способ перезаписи уже пришел со значением ДаДляВсех
		Если ТипЗнч(Хранилище) <> Тип("ДвоичныеДанные") Тогда
			ДвоичныеДанные = Хранилище.Получить();
		Иначе
			ДвоичныеДанные = Хранилище;
		КонецЕсли; 
		ДвоичныеДанные.Записать(ИмяФайла);
		ФайлНаДиске.УстановитьТолькоЧтение(ТолькоЧтение);

	Исключение

		Предупреждение(ОписаниеОшибки());
		Возврат Ложь;

	КонецПопытки;

	Возврат Истина;

КонецФункции // СохранитьФайлНаДиске()

#КонецЕсли

// функция возвращает список запрещенных символов в именах файлов
// Возвращаемое значение:
//   Список значений в котором хранится список всех запрещенных символов в именах файлов.
//
Функция ПолучитьСписокЗапрещенныхСимволовВИменахФайлов()
	
	СписокСимволов = Новый СписокЗначений();
	
	СписокСимволов.Добавить("\");
	СписокСимволов.Добавить("/");
	СписокСимволов.Добавить(":");
	СписокСимволов.Добавить("*");
	СписокСимволов.Добавить("&");
	СписокСимволов.Добавить("""");
	СписокСимволов.Добавить("<");
	СписокСимволов.Добавить(">");
	СписокСимволов.Добавить("|");
	
	Возврат СписокСимволов;
	
КонецФункции

// Проверяет наличие запрещенных в среде MS Windows символов в имени файла.
//
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, без каталога.
//
// Возвращаемое значение:
//   Булево – Истина, если есть запрещенные символы, Ложь, если нет.
//
Функция ЕстьЗапрещенныеСимволыИмени(ИмяФайла) Экспорт

	Если ПустаяСтрока(ИмяФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СписокСимволов = ПолучитьСписокЗапрещенныхСимволовВИменахФайлов();
	
	Для Каждого СтрокаЗапретногоСимвола  Из СписокСимволов Цикл
		
		Если Найти(ИмяФайла,  СтрокаЗапретногоСимвола.Значение) > 0 Тогда
			
			Возврат Истина;
			
		КонецЕсли;
			
	КонецЦикла;
	
	// ничего не нашли
	Возврат Ложь;
    	
КонецФункции // ЕстьЗапрещенныеСимволыИмени()

#Если Клиент Тогда

// Проверяет возможность измененния расширения в имени файла. Выдает запрос пользователю
// на смену расширения.
//
// Параметры
//  ТекущееРасширение – Строка, содержащая текущее расширение файла, до изменения.
//  НовоеРасширение – Строка, содержащая новое расширение файла, после изменения.
//
// Возвращаемое значение:
//   Булево – Истина, если пользователь запретил изменение расширения, Ложь, если разрешил.
//
Функция НельзяИзменятьРасширение(ТекущееРасширение, НовоеРасширение) Экспорт

	Если Не ПустаяСтрока(ТекущееРасширение) И Не НовоеРасширение = ТекущееРасширение Тогда

		Ответ = Вопрос("Вы действительно хотите измерить расширение", РежимДиалогаВопрос.ДаНет);

		Если Ответ = КодВозвратаДиалога.Да Тогда

			Возврат Ложь;

		Иначе

			Возврат Истина;

		КонецЕсли;

	Иначе

		Возврат Ложь;

	КонецЕсли;

КонецФункции // НельзяИзменятьРасширение()
	
// Создает и устанавливает реквизиты диалога выбора фала.
//
// Параметры
//  МножественныйВыбор – Булево, признак множественного выбора.
//  НачальныйКаталог – Строка, содержащая начальный каталог выбора файла.
//
// Возвращаемое значение:
//   ДиалогВыбораФайлов – созданный диалог.
//
Функция ПолучитьДиалогВыбораФайлов(МножественныйВыбор, НачальныйКаталог = "") Экспорт

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Каталог = НачальныйКаталог;
	Диалог.Заголовок = "Выберите файл...";
	Диалог.Фильтр = ПолучитьФильтрФайлов();
	Диалог.ПредварительныйПросмотр = Истина;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.МножественныйВыбор = МножественныйВыбор;

	Возврат Диалог;

КонецФункции // ПолучитьДиалогВыбораФайлов()

// Выбор файлов пользователем на диске и добавление их объекту.
//
// Параметры
//  ОбъектФайла  - Ссылка на объект данных, для которого прикрепляются файлы.
//  ТекущийПользователь - Ссылка на справочник Пользователи, с текущим пользователем
//                 конфигурации.
//  ВидДанных    - ПеречислениеСсылка.ВидыДополнительнойИнформацииОбъектов содержащая вид
//                 дополнительной информации объекта.
//
Процедура ДобавитьФайлы(ОбъектФайла, ТекущийПользователь, ВидДанных = Неопределено, ИмяСправочника = "ХранилищеДополнительнойИнформации") Экспорт

	Если Не ОбъектФайла = Неопределено И ОбъектФайла.Пустая() Тогда
		Предупреждение("Необходимо записать объект, которому принадлежит файл.");
		Возврат;
	КонецЕсли;

	Диалог = ПолучитьДиалогВыбораФайлов(Истина);

	Если Не Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;

	Для каждого ПолученноеИмяФайла Из Диалог.ВыбранныеФайлы Цикл

		ПолученныйФайл = Новый Файл(ПолученноеИмяФайла);
		Состояние("Добавляется файл: " + ПолученныйФайл.Имя);

		НачатьТранзакцию();
		
		Отказ = Ложь;
		
		НовыйФайл = Справочники[ИмяСправочника].СоздатьЭлемент();
		НовыйФайл.Объект = ОбъектФайла;
		НовыйФайл.ИмяФайла = ПолученныйФайл.Имя;
		Если ИмяСправочника = "ХранилищеДополнительнойИнформации" Тогда
			НовыйФайл.ВидДанных = ВидДанных;
		КонецЕсли; 

		Попытка
			НовыйФайл.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолученныйФайл.ПолноеИмя), Новый СжатиеДанных());
			НовыйФайл.Записать();
		Исключение
			Предупреждение("Файл: " + ПолученныйФайл.ПолноеИмя + Символы.ПС + ОписаниеОшибки() + Символы.ПС + "Файл не добавлен.");
			Отказ = Истина;
		КонецПопытки;
		
		Если Отказ Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли; 

	КонецЦикла;

КонецПроцедуры // ДобавитьФайлы()

// Сохранение на диск отмеченных файлов объекта.
//
// Параметры
//  ОбъектФайла  - Ссылка на объект данных, для которого прикрепляются файлы.
//  ТекущийПользователь - Ссылка на справочник Пользователи, с текущим пользователем
//                 конфигурации.
//  ВыделенныеСтроки - ВыделенныеСтроки табличного поля со справочником дополнительной
//                 информации.
//
Процедура СохранитьФайлы(ОбъектФайла, ТекущийПользователь, ВыделенныеСтроки, ИмяКаталога = Неопределено, ИмяСправочника = "ХранилищеДополнительнойИнформации") Экспорт

	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ФормаСохраненияФайлов = Справочники[ИмяСправочника].ПолучитьФорму("ФормаСохраненияФайлов");
	ФормаСохраненияФайлов.ИмяКаталога    = ИмяКаталога;
	ФормаСохраненияФайлов.ТолькоЧтение   = Ложь;

	Если ИмяКаталога = Неопределено Тогда
		ИмяКаталога = ПолучитьИмяКаталога(ТекущийПользователь);
		ФормаСохраненияФайлов.ОткрытьКаталог = Истина;
	Иначе
		ФормаСохраненияФайлов.ОткрытьКаталог = Ложь;
	КонецЕсли; 

	СтруктураПараметров = ФормаСохраненияФайлов.ОткрытьМодально();
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ПроверитьСуществованиеКаталога(СтруктураПараметров.ИмяКаталога) Тогда
		Возврат;
	КонецЕсли;

	СпособПерезаписи = "";

	Для каждого СсылкаФайл из ВыделенныеСтроки Цикл

		Состояние("Сохраняется файл: " + СсылкаФайл.ИмяФайла);

		ИмяФайла = ПолучитьИмяФайла(СтруктураПараметров.ИмяКаталога, СсылкаФайл.ИмяФайла);
		СохранитьФайлНаДиске(СсылкаФайл.Хранилище, ИмяФайла, СтруктураПараметров.ТолькоЧтение, СпособПерезаписи);

		Если СпособПерезаписи = Неопределено Тогда
			Прервать;
		КонецЕсли; 

	КонецЦикла;

	Если СтруктураПараметров.ОткрытьКаталог Тогда
		ЗапуститьПриложение(СтруктураПараметров.ИмяКаталога);
	КонецЕсли;

КонецПроцедуры // СохранитьФайлы()

// Сохранение на диск отмеченных файлов объекта и их открытие.
//
// Параметры
//  ОбъектФайла  - Ссылка на объект данных, для которого прикрепляются файлы.
//  ТекущийПользователь - Ссылка на справочник Пользователи, с текущим пользователем
//                 конфигурации.
//  ВыделенныеСтроки - ВыделенныеСтроки табличного поля со справочником дополнительной
//                 информации.
//
Процедура ОткрытьФайлы(ОбъектФайла, ТекущийПользователь, ВыделенныеСтроки = Неопределено, ВопросОПерезаписи = Истина) Экспорт

	Если ВыделенныеСтроки = Неопределено Тогда
			
	    СтрокаДляВыполнения = "УправлениеЭлектроннойПочтой.ОткрытьФайлMSG(ОбъектФайла, ТекущийПользователь)";
	    Попытка
			Если Вычислить(СтрокаДляВыполнения) Тогда
				Возврат;
			КонецЕсли; 
		Исключение
		КонецПопытки;
		
		ИмяКаталога = ПолучитьИмяКаталога(ТекущийПользователь);
		ТолькоЧтение = Ложь;

		СпособПерезаписи = "";

		Состояние("Сохраняется файл: " + ОбъектФайла.ИмяФайла);

		ИмяФайла = ПолучитьИмяФайла(ИмяКаталога, ОбъектФайла.ИмяФайла);
		СохранитьФайлНаДиске(ОбъектФайла.Хранилище, ИмяФайла, Ложь, СпособПерезаписи, ВопросОПерезаписи);

		Если СпособПерезаписи = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ОткрытьФайлДополнительнойИнформации(ИмяКаталога, ОбъектФайла.ИмяФайла);
		
	Иначе
		
		Если ВыделенныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		ИмяКаталога = ПолучитьИмяКаталога(ТекущийПользователь);
		ТолькоЧтение = Ложь;

		СпособПерезаписи = "";

		Для каждого СсылкаФайл из ВыделенныеСтроки Цикл

			СтрокаДляВыполнения = "УправлениеЭлектроннойПочтой.ОткрытьФайлMSG(СсылкаФайл, ТекущийПользователь)";
			Попытка
				Если Вычислить(СтрокаДляВыполнения) Тогда
					Возврат;
				КонецЕсли; 
			Исключение
			КонецПопытки;
			
			Состояние("Сохраняется файл: " + СсылкаФайл.ИмяФайла);

			ИмяФайла = ПолучитьИмяФайла(ИмяКаталога, СсылкаФайл.ИмяФайла);
			СохранитьФайлНаДиске(СсылкаФайл.Хранилище, ИмяФайла, Ложь, СпособПерезаписи, ВопросОПерезаписи);

			Если СпособПерезаписи = Неопределено Тогда
				Прервать;
			КонецЕсли;

			ОткрытьФайлДополнительнойИнформации(ИмяКаталога, СсылкаФайл.ИмяФайла);

		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры // ОткрытьФайлы()

#КонецЕсли

// Получает индекс пиктограммы файла из коллекции пиктограмм в зависимости от расширения файла.
//
// Параметры
//  РасширениеФайла – Строка, содержащая расширение файла.
//
// Возвращаемое значение:
//   Число – индекс пиктограммы в коллекции.
//
Функция ПолучитьИндексПиктограммыФайла(РасширениеФайла) Экспорт

	РасширениеФайла = Врег(РасширениеФайла);

	Если Найти(",1CD,CF,CFU,DT,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат 1;
	ИначеЕсли "MXL" = РасширениеФайла Тогда
		Возврат 2;
	ИначеЕсли "TXT" = РасширениеФайла Тогда
		Возврат 3;
	ИначеЕсли "EPF" = РасширениеФайла Тогда
		Возврат 4;
	ИначеЕсли Найти(",BMP,DIB,RLE,JPG,JPEG,TIF,GIF,PNG,ICO,WMF,EMF,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат 5;
	ИначеЕсли Найти(",HTM,HTML,MHT,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат 6;
	ИначеЕсли "DOC" = РасширениеФайла Тогда
		Возврат 7;
	ИначеЕсли "XLS" = РасширениеФайла Тогда
		Возврат 8;
	ИначеЕсли "PPT" = РасширениеФайла Тогда
		Возврат 9;
	ИначеЕсли "VSD" = РасширениеФайла Тогда
		Возврат 10;
	ИначеЕсли "MPP" = РасширениеФайла Тогда
		Возврат 11;
	ИначеЕсли "MDB" = РасширениеФайла Тогда
		Возврат 12;
	ИначеЕсли "XML" = РасширениеФайла Тогда
		Возврат 13;
	ИначеЕсли "MSG" = РасширениеФайла Тогда
		Возврат 14;
	ИначеЕсли Найти(",RAR,ZIP,ARJ,CAB,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат 15;
	ИначеЕсли Найти(",EXE,COM,,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат 16;
	ИначеЕсли "BAT" = РасширениеФайла Тогда
		Возврат 17;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции // ПолучитьИндексПиктограммыФайла()

// Процедура меняет расширение имени переданного файла (сам файл не меняется, меняется колько строка)
//
// Параметры
//  ИмяФайла  – Строка, содержащая полное имя файла на диске.
//  НовоеРасширениеФайла  – Строка, содержащая новое расширение файла.
//
Процедура УстановитьРасширениеФайла(ИмяФайла, Знач НовоеРасширениеФайла) Экспорт
	
	// к расширению точку добавляем
	Если Сред(НовоеРасширениеФайла, 1, 1) <> "." Тогда
		ЗначениеНовогоРасширения = "." + НовоеРасширениеФайла;	
	Иначе
		ЗначениеНовогоРасширения = НовоеРасширениеФайла;	
	КонецЕсли;
	// если не находим точку в текущем имени файла, то просто приписываем к нему новое расширение с конца
	ПозицияТочки = СтрДлина(ИмяФайла);
	Пока ПозицияТочки >= 1 Цикл
		
		Если Сред(ИмяФайла, ПозицияТочки, 1) = "." Тогда
						
			ИмяФайла = Сред(ИмяФайла, 1, ПозицияТочки - 1) + ЗначениеНовогоРасширения;
			Возврат; 
			
		КонецЕсли;
		
		ПозицияТочки = ПозицияТочки - 1;	
	КонецЦикла;
	
	// не нашли точку в имени файла
	ИмяФайла = ИмяФайла + ЗначениеНовогоРасширения;	
	
КонецПроцедуры

// функция формирует имя файла выбрасывая из первоначально предложенного имени все
// запрещенные символы
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, без каталога.
//
// Возвращаемое значение:
//   Строка – имя файла, которое может быть использовано в файловой системе
//
Функция УдалитьЗапрещенныеСимволыИмени(Знач ИмяФайла) Экспорт

	ИтоговоеИмяФайла = СокрЛП(ИмяФайла);
	
	Если ПустаяСтрока(ИтоговоеИмяФайла) Тогда
		
		Возврат ИтоговоеИмяФайла;
		
	КонецЕсли;
	
	СписокСимволов = ПолучитьСписокЗапрещенныхСимволовВИменахФайлов();
	
	Для Каждого СтрокаЗапретногоСимвола  Из СписокСимволов Цикл
		
		ИтоговоеИмяФайла = СтрЗаменить(ИтоговоеИмяФайла,  СтрокаЗапретногоСимвола.Значение, "");			
		
	КонецЦикла;
	
	Возврат ИтоговоеИмяФайла;

КонецФункции // УдалитьЗапрещенныеСимволыИмени()

// Процедура полное имя файла разбивает на путь в файлу и имя самого файла
//
// Параметры
//  ПолноеИмяФайла  – Строка, содержащая полное имя файла на диске.
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//  ИмяФайла     – Строка, содержащая имя файла, без имени каталога.
//
Процедура ПолучитьКаталогИИмяФайла(Знач ПолноеИмяФайла, ИмяКаталога, ИмяФайла) Экспорт
	
	// находим последний с конца "\" все что до него - это путь, после - имя
	НомерПозиции = СтрДлина(ПолноеИмяФайла);
	Пока НомерПозиции <> 0 Цикл
		
		Если Сред(ПолноеИмяФайла, НомерПозиции, 1) = "\" Тогда
			
			ИмяКаталога = Сред(ПолноеИмяФайла, 1, НомерПозиции - 1);
			ИмяФайла = Сред(ПолноеИмяФайла, НомерПозиции + 1);
			Возврат;
			
		КонецЕсли;
		
		НомерПозиции = НомерПозиции - 1;
		
	КонецЦикла;
	
	// так и не нашли слешей, значит все- это имя файла
	ИмяФайла = ПолноеИмяФайла;
	ИмяКаталога = "";
	
КонецПроцедуры

// Выделяет из полного пути к файлу его имя (набор символов после последней \).
//
// Параметры
//  ПутьКФайлу     – Строка, содержащая имя файла, неважно с именем каталога или без.
//
// Возвращаемое значение:
//   Строка – расширение файла.
//
Функция ПолучитьИмяФайлаИзПолногоПути(Знач ПутьКФайлу) Экспорт
	
	ИмяФайла = ПолучитьЧастьСтрокиОтделеннойСимволом(ПутьКФайлу, "\");
	Возврат ИмяФайла;
	
КонецФункции

// функция возвращает часть строки после последнего встреченного символа в строке
Функция ПолучитьЧастьСтрокиОтделеннойСимволом(Знач ИсходнаяСтрока, Знач СимволПоиска)
	
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
						
			Возврат Сред(ИсходнаяСтрока, ПозицияСимвола + 1); 
			
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;

	Возврат "";
  	
КонецФункции

#Если Клиент Тогда

// Получает картинку файла из библиотеки картинок в зависимости от расширения файла.
//
// Параметры
//  РасширениеФайла – Строка, содержащая расширение файла.
//
// Возвращаемое значение:
//   Картинка.
//
Функция ПолучитьПиктограммуФайла(РасширениеФайла) Экспорт

	РасширениеФайла = Врег(РасширениеФайла);

	Если Найти(",1CD,CF,CFU,DT,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_1С;
	ИначеЕсли "MXL" = РасширениеФайла Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_MXL;
	ИначеЕсли "TXT" = РасширениеФайла Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_TXT;
	ИначеЕсли "EPF" = РасширениеФайла Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_EPF;
	ИначеЕсли Найти(",BMP,DIB,RLE,JPG,JPEG,TIF,GIF,PNG,ICO,WMF,EMF,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_BMP;
	ИначеЕсли Найти(",HTM,HTML,MHT,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_HTML;
	ИначеЕсли Найти(",DOC,RTF,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_Word;
	ИначеЕсли "XLS" = РасширениеФайла Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_Excel;
	ИначеЕсли "PPT" = РасширениеФайла Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_PowerPoint;
	ИначеЕсли "VSD" = РасширениеФайла Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_VSD;
	ИначеЕсли "MPP" = РасширениеФайла Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_MPP;
	ИначеЕсли "MDB" = РасширениеФайла Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_MDB;
	ИначеЕсли "XML" = РасширениеФайла Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_XML;
	ИначеЕсли "MSG" = РасширениеФайла Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_MSG;
	ИначеЕсли Найти(",RAR,ZIP,ARJ,CAB,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_WinRar;
	ИначеЕсли Найти(",EXE,COM,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_EXE;
	ИначеЕсли "BAT" = РасширениеФайла Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_BAT;
	Иначе
		Возврат БиблиотекаКартинок.ПиктограммаФайла_НеОпределен;
	КонецЕсли;

КонецФункции // ПолучитьПиктограммуФайла()

// Функция определяет, есть ли у объекта элементы в хранилище дополнительной информации
//
// Параметры
//  Объект - СправочникСсылка, ДокументСсылка, объект для которого определяем наличие файлов
//
// Возвращаемое значение:
//   Булево
//
Функция ЕстьДополнительнаяИнформация(Объект, ИмяСправочника = "ХранилищеДополнительнойИнформации") Экспорт

	ЗначениеНайдено = Ложь;
	
	Если ЗначениеЗаполнено(Объект) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект", Объект);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ХранилищеДополнительнойИнформации.Ссылка";
		Если Метаданные.Справочники[ИмяСправочника].Реквизиты.Найти("ЗначениеРазделенияДоступа") <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ХранилищеДополнительнойИнформации.ЗначениеРазделенияДоступа";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + ",
		|	ХранилищеДополнительнойИнформации.Объект
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК ХранилищеДополнительнойИнформации
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.Объект = &Объект
		|";
		ЗначениеНайдено = НЕ Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	Возврат ЗначениеНайдено;
	
КонецФункции
	
// Изменяет картинку у кнопки открытия формы списка файлов и изображений.
//
// Параметры
//  ОбъектФайла  - Ссылка на объект данных, для которого прикрепляются файлы.
//  КнопкаОткрытияФайлов - Кнопка тулбара, по нажатию которой открывается
//  форма списка файлов и изображений.
//
Процедура ПолучитьКартинкуКнопкиОткрытияФайлов(ОбъектФайла, СписокКнопокОткрытияФайлов) Экспорт

	КартинкаКнопки = ?(ЕстьДополнительнаяИнформация(ОбъектФайла), БиблиотекаКартинок.ТолькоСкрепка, БиблиотекаКартинок.НевидимаяСкрепка);
	Для каждого КнопкаОткрытияФайлов Из СписокКнопокОткрытияФайлов Цикл
		КнопкаОткрытияФайлов.Значение.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
		КнопкаОткрытияФайлов.Значение.Картинка    = КартинкаКнопки;
	КонецЦикла; 

КонецПроцедуры // ПолучитьКартинкуКнопкиОткрытияФайлов()

// Процедура открывает форму файлов и изображений по объекту отбора
//
Процедура ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ФормаВладелец, ИмяСправочника = "ХранилищеДополнительнойИнформации") Экспорт

	ФормаФайлов = Справочники[ИмяСправочника].ПолучитьФорму("ФормаСпискаФайловИИзображений", ФормаВладелец);
	
	// Изображения
	Если СтруктураДляСпискаИзображений.Свойство("ОтборОбъектИспользование") Тогда
		ФормаФайлов.Изображения.Отбор.Объект.Использование = СтруктураДляСпискаИзображений.ОтборОбъектИспользование;
		ФормаФайлов.Изображения.Отбор.Объект.Значение      = СтруктураДляСпискаИзображений.ОтборОбъектЗначение;
	КонецЕсли;
	Если СтруктураДляСпискаИзображений.Свойство("ДоступностьОтбораОбъекта") Тогда
		ФормаФайлов.ЭлементыФормы.Изображения.НастройкаОтбора.Объект.Доступность = СтруктураДляСпискаИзображений.ДоступностьОтбораОбъекта;
	КонецЕсли; 
	Если СтруктураДляСпискаИзображений.Свойство("ВидимостьКолонкиОбъекта") Тогда
		ФормаФайлов.ЭлементыФормы.Изображения.Колонки.Объект.Видимость = СтруктураДляСпискаИзображений.ВидимостьКолонкиОбъекта;
	КонецЕсли; 

	// Дополнительные файлы
	Если СтруктураДляСпискаДополнительныхФайлов.Свойство("ОтборОбъектИспользование") Тогда
		ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Использование = СтруктураДляСпискаДополнительныхФайлов.ОтборОбъектИспользование;
		ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Значение      = СтруктураДляСпискаДополнительныхФайлов.ОтборОбъектЗначение;
	КонецЕсли;
	Если СтруктураДляСпискаДополнительныхФайлов.Свойство("ДоступностьОтбораОбъекта") Тогда
		ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.НастройкаОтбора.Объект.Доступность = СтруктураДляСпискаДополнительныхФайлов.ДоступностьОтбораОбъекта;
	КонецЕсли; 
	Если СтруктураДляСпискаДополнительныхФайлов.Свойство("ВидимостьКолонкиОбъекта") Тогда
		ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.Колонки.Объект.Видимость = СтруктураДляСпискаДополнительныхФайлов.ВидимостьКолонкиОбъекта;
	КонецЕсли; 
	
	ФормаФайлов.ОбязательныеОтборы = ОбязательныеОтборы;
	
	Если СтруктураДляСпискаИзображений.Свойство("ОтборОбъектИспользование") И СтруктураДляСпискаДополнительныхФайлов.Свойство("ОтборОбъектИспользование") Тогда
		Если СтруктураДляСпискаИзображений.ОтборОбъектЗначение = СтруктураДляСпискаДополнительныхФайлов.ОтборОбъектЗначение Тогда
			ФормаФайлов.Заголовок = "Хранилище дополнительной информации (" + СокрЛП(Строка(СтруктураДляСпискаИзображений.ОтборОбъектЗначение)) + ")";
		КонецЕсли;
	КонецЕсли; 
	
	ФормаФайлов.Открыть();

КонецПроцедуры

// Открывает форму основного изображения объекта
//
// Параметры
//  ФормаВладелец – Форма – определяет форму владельца открываемой формы
//  ОсновноеИзображение – СправочникСсылка.ХранилищеДополнительнойИнформации – содержит 
//                 ссылку на основное изображение объеата
//
Процедура ОткрытьФормуИзображения(ФормаВладелец, ОсновноеИзображение, ОбъектВладелец) Экспорт

	Если ОсновноеИзображение = Неопределено ИЛИ ОсновноеИзображение.Пустая() Тогда
			
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.Заголовок = "Выберите файл с изображением";
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		ДиалогОткрытияФайла.ПредварительныйПросмотр = Истина;
		ДиалогОткрытияФайла.Фильтр = ПолучитьФильтрИзображений();

		Если ДиалогОткрытияФайла.Выбрать() Тогда
			ВыбранноеИзображение = Новый Картинка(ДиалогОткрытияФайла.ПолноеИмяФайла, Ложь);
		Иначе
			Возврат;
		КонецЕсли;
		
		НовыйОбъект = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
		НовыйОбъект.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение;
		НовыйОбъект.Хранилище = Новый ХранилищеЗначения(ВыбранноеИзображение, Новый СжатиеДанных);
		НовыйОбъект.Объект = ОбъектВладелец;
		
		ФормаИзображения = НовыйОбъект.ПолучитьФорму("ФормаИзображения");
		
	Иначе
		
		ФормаИзображения = ОсновноеИзображение.ПолучитьФорму("ФормаИзображения");
		
	КонецЕсли;
	
	ФормаИзображения.ВладелецФормы = ФормаВладелец;
	ФормаИзображения.РежимВыбора = Истина;
	ФормаИзображения.ЗакрыватьПриВыборе = Ложь;
	ФормаИзображения.Открыть();
	
КонецПроцедуры // ОткрытьФормуИзображения()

#КонецЕсли

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА РАБОТЫ С УНИВЕРСАЛЬНЫМ ПОИСКОМ ДАННЫХ
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


// Процедура снимает отборы у списка номенклатуры, которые были установлены из ЭУ "быстрых" отборов на форме.
// 
Процедура СнятьБыстрыеОтборыДанных(ОбъектДанных, СписокОтборов) Экспорт

	Если ТипЗнч(СписокОтборов) = Тип("СписокЗначений") тогда
		
		Для Каждого ЭлементСписка Из СписокОтборов Цикл
			
			Попытка
				ОбъектДанных.Отбор[ЭлементСписка.Значение].Использование = Ложь;
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
		// принудительно убираем ограничение по ссылке
		ОбъектДанных.Отбор["Ссылка"].Использование = Ложь;
	
	Иначе
		
		Попытка
			ОбъектДанных.Отбор[СписокОтборов].Использование = Ложь;
		Исключение
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

// Процедура устанавливает отборы у списка номенклатуры, которые были установлены из ЭУ "быстрых" отборов на форме.
// 
Процедура УстановитьБыстрыйОтборДанных(ОбъектДанных, Знач ЗначениеОтбора = "", Знач ИмяОтбораДанных = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ИмяОтбораДанных) тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбъектДанных.Отбор[ИмяОтбораДанных].Использование = ЗначениеЗаполнено(ЗначениеОтбора);
	Исключение
		// может быть передано поле которого нет в отборах
		Возврат;
	КонецПопытки;
	
	Если ОбъектДанных.Отбор[ИмяОтбораДанных].Использование Тогда
		
		ОбъектДанных.Отбор[ИмяОтбораДанных].ВидСравнения  = ВидСравнения.Содержит;
		ОбъектДанных.Отбор[ИмяОтбораДанных].Значение = ЗначениеОтбора;
		
	КонецЕсли;

КонецПроцедуры

// процедура снимает все отборы посика по полям
Процедура ОчиститьОтборыПоискаПоПолям(Список, СписокБыстрыхОтборовПоРеквизитам, СписокПолейПоиска) Экспорт
	
	СнятьБыстрыеОтборыДанных(Список, СписокБыстрыхОтборовПоРеквизитам);
	СписокПолейПоиска = Неопределено;
	Список.Обновить();
	
КонецПроцедуры

//функция возвращает настройку поиска по имени
Функция ПолучитьПараметрыНастройкиПоискаПоИмени(Знач СоответсвиеИмяКнопокИОтборов, Знач ТипОбъектовПоиска, Знач ИмяНастройки,
	Знач ПользовательНастройкиОбмена, Знач НастройкаОтбораДанных) Экспорт
	
	ИмяОбъектаНастройки = ПолучитьИмяОбъектаНастройки(ТипОбъектовПоиска);
				
	Если ПустаяСтрока(ИмяОбъектаНастройки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// нужно получить настройку поиска по имени
	ЗначениеСоответсвия = СоответсвиеИмяКнопокИОтборов.Получить(ИмяНастройки);
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("ИмяОбъекта", ИмяОбъектаНастройки);

	
	Если ЗначениеСоответсвия = Неопределено тогда
		
		// в соответствии не нашли нужных параметров
		СтруктураНастройки.Вставить("Пользователь", ПользовательНастройкиОбмена);
		СтруктураНастройки.Вставить("НаименованиеНастройки", НастройкаОтбораДанных);
	Иначе	
				
		СтруктураНастройки.Вставить("Пользователь", ЗначениеСоответсвия.Пользователь);
		СтруктураНастройки.Вставить("НаименованиеНастройки", ЗначениеСоответсвия.ИмяНастройки);
	
	КонецЕсли;
            			
	НастройкаНайдена = ПолучитьНастройку(СтруктураНастройки);
					
	Если НЕ НастройкаНайдена Тогда
		
		СтруктураНастройки = Неопределено;
		
	КонецЕсли;
	
	Возврат СтруктураНастройки;
	
КонецФункции

//Функция возвращает нименованеи объекта настройки
Функция ПолучитьИмяОбъектаНастройки(ТипОбъектовПоиска) Экспорт
	
	Если ТипОбъектовПоиска = Неопределено Тогда
		Возврат "";
	КонецЕсли;
		
	МетаданныеСправочника = Метаданные.НайтиПоТипу(ТипОбъектовПоиска);	
	
	Возврат "ОбработкаОбъект.УниверсальныйПоискОбъектов.СправочникСсылка." + МетаданныеСправочника.Имя;
	
КонецФункции

//процедура скрывает колонки в табличном документе
//поиск колонок происходит в указанной области по указанному тексту заголовка колонки
Процедура СкрытьКолонкиВТабличномДокументе(ТабДокумент, ТекстКолонки, ШиринаКолонки=1, ИмяОбластиШапки="") Экспорт
	Попытка
		Если ИмяОбластиШапки="" Тогда
			ОбластьШапкиМест = ТабДокумент.НайтиТекст(ТекстКолонки,,,истина);
		Иначе	
			ОбластьШапкиМест = ТабДокумент.НайтиТекст(ТекстКолонки,,ТабДокумент.Области[ИмяОбластиШапки],истина);
		КонецЕсли;
		
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ОбластьШапкиМест <> неопределено Тогда
		ОбластьМест = ТабДокумент.Область(,ОбластьШапкиМест.Лево,,ОбластьШапкиМест.Лево + ШиринаКолонки-1);
		ОбластьМест.Видимость = ложь;
	КонецЕсли;

КонецПроцедуры
              
#Если Клиент Тогда
	
Функция ВыполнитьИнтерактивныйПоискОбъектовВСписке(ТипОбъектовПоиска, СписокПоиска, ТабличноеПолеПоиска,
	
	Знач НеИспользуемыеПараметрыОтбора = Неопределено, Знач НастройкаПоиска = Неопределено, 
	РезультирующееДеревоПоиска = Неопределено, СтрокаПоискаДанных = "",
	Знач ФормаВладелец = Неопределено) Экспорт
	
	Если СписокПоиска = Неопределено 
		ИЛИ ТабличноеПолеПоиска = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// отборов в списке может и не быть
	ДанныеНеИспользуемыеПараметрыОтбора = Неопределено;
	Если НеИспользуемыеПараметрыОтбора <> Неопределено Тогда
		ДанныеНеИспользуемыеПараметрыОтбора = НеИспользуемыеПараметрыОтбора.Скопировать();		
	КонецЕсли;
	
	ДополнительныйОтбор = СписокПоиска.Отбор;
	
	ОбработкаУниверсальногоПоиска = Обработки.УниверсальныйПоискОбъектов.Создать();
	ОбработкаУниверсальногоПоиска.НастройкаПоискаДанных = НастройкаПоиска;
	
	СписокНайденныхОбъектов = ОбработкаУниверсальногоПоиска.ВыполнитьИнтерактивныйПоискОбъектов(ТипОбъектовПоиска, Ложь, ДополнительныйОтбор,
	ДанныеНеИспользуемыеПараметрыОтбора, РезультирующееДеревоПоиска, СтрокаПоискаДанных, ФормаВладелец);
	
	Если СписокНайденныхОбъектов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// нужно для всех неиспользуемых отборов убрать признак использования
	Если ДанныеНеИспользуемыеПараметрыОтбора <> Неопределено Тогда
		
		Для Каждого СтрокаДанныхОтбора Из ДанныеНеИспользуемыеПараметрыОтбора Цикл 
			
			Попытка
				СписокПоиска.Отбор[СтрокаДанныхОтбора.Значение].Использование = Ложь;
			Исключение
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СписокПоиска.Отбор.Ссылка.Использование = Истина;
	СписокПоиска.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
	СписокПоиска.Отбор.Ссылка.Значение = СписокНайденныхОбъектов;
	
	ТабличноеПолеПоиска.НастройкаОтбора.Ссылка.Доступность = Истина;
	
	Если ТабличноеПолеПоиска.ИерархическийПросмотр Тогда
		ОтветНаВопрос = Вопрос("Для удобства поиска рекомендуется снять режим иерархического просмотра. Снять?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			ТабличноеПолеПоиска.ИерархическийПросмотр = Ложь;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

#КонецЕсли

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С НАСТРОЙКАМИ

#Если Клиент Тогда

Функция ВосстановлениеНастроек(СтруктураНастройки) Экспорт
	
	ФормаУправленияНастройками = РегистрыСведений.СохраненныеНастройки.ПолучитьФорму("ФормаУправленияНастройками");
	ФормаУправленияНастройками.мВосстановлениеНастройки = Истина;
	ФормаУправленияНастройками.мСтруктураНастройки = СтруктураНастройки;
	
	Результат = ФормаУправленияНастройками.ОткрытьМодально();
	СтруктураНастройки = ФормаУправленияНастройками.мСтруктураНастройки;
	Возврат Результат;
	
КонецФункции // ВосстановитьНастройки()

Функция СохранениеНастроек(СтруктураНастройки) Экспорт
	
	ФормаУправленияНастройками = РегистрыСведений.СохраненныеНастройки.ПолучитьФорму("ФормаУправленияНастройками");
	ФормаУправленияНастройками.мВосстановлениеНастройки = Ложь;
	ФормаУправленияНастройками.мСтруктураНастройки = СтруктураНастройки;
	
	Результат = ФормаУправленияНастройками.ОткрытьМодально();
	СтруктураНастройки = ФормаУправленияНастройками.мСтруктураНастройки;
	Возврат Результат;
	
КонецФункции // СохранитьНастройки()

#КонецЕсли

Функция ПолучитьНастройку(СтруктураНастройки) Экспорт
	
	Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Пользователь,
	|	СохраненныеНастройки.ИмяОбъекта,
	|	СохраненныеНастройки.НаименованиеНастройки КАК НаименованиеНастройки,
	|	СохраненныеНастройки.СохраненнаяНастройка,
	|	СохраненныеНастройки.ИспользоватьПриОткрытии,
	|	СохраненныеНастройки.СохранятьАвтоматически
	|ИЗ
	|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|	И СохраненныеНастройки.Пользователь = &Пользователь
	|	И СохраненныеНастройки.НаименованиеНастройки = &НаименованиеНастройки");
	
	Если СтруктураНастройки.Свойство("Пользователь") = Ложь ИЛИ Не ЗначениеЗаполнено(СтруктураНастройки.Пользователь) Тогда
					
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
					
	Иначе
					
		Запрос.УстановитьПараметр("Пользователь", СтруктураНастройки.Пользователь);
					
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
	Запрос.УстановитьПараметр("НаименованиеНастройки", СтруктураНастройки.НаименованиеНастройки);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Если РезультатЗапроса.Пустой() Тогда
			
		Возврат Ложь;
			
	Иначе
			
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаИзРезультатаЗапроса.Следующий();
		
		СтруктураНастройки.Вставить("СохраненнаяНастройка", ВыборкаИзРезультатаЗапроса.СохраненнаяНастройка.Получить());
		СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", ВыборкаИзРезультатаЗапроса.ИспользоватьПриОткрытии);
		СтруктураНастройки.Вставить("СохранятьАвтоматически", ВыборкаИзРезультатаЗапроса.СохранятьАвтоматически);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПолучитьНастройку()

Функция ПолучитьНастройки(СтруктураНастройки, ПолучитьНастройкиВсехПользователей = Ложь, ПолучитьГрупповыеНастройки = Ложь, ПолучитьОбщиеНастройки = Ложь) Экспорт
	
	Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Пользователь,
	|	СохраненныеНастройки.ИмяОбъекта,
	|	СохраненныеНастройки.НаименованиеНастройки КАК НаименованиеНастройки,
	|	СохраненныеНастройки.СохраненнаяНастройка,
	|	СохраненныеНастройки.ИспользоватьПриОткрытии,
	|	СохраненныеНастройки.СохранятьАвтоматически,
	|	0 КАК ВидНастройки
	|ИЗ
	|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|	И СохраненныеНастройки.Пользователь = &Пользователь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СохраненныеНастройки.Пользователь,
	|	СохраненныеНастройки.ИмяОбъекта,
	|	СохраненныеНастройки.НаименованиеНастройки,
	|	СохраненныеНастройки.СохраненнаяНастройка,
	|	СохраненныеНастройки.ИспользоватьПриОткрытии,
	|	СохраненныеНастройки.СохранятьАвтоматически,
	|	1
	|ИЗ
	|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|	И СохраненныеНастройки.Пользователь <> &Пользователь
	|	И СохраненныеНастройки.Пользователь ССЫЛКА Справочник.Пользователи
	|	И &НастройкиВсехПользователей = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СохраненныеНастройки.Пользователь,
	|	СохраненныеНастройки.ИмяОбъекта,
	|	СохраненныеНастройки.НаименованиеНастройки,
	|	СохраненныеНастройки.СохраненнаяНастройка,
	|	СохраненныеНастройки.ИспользоватьПриОткрытии,
	|	СохраненныеНастройки.СохранятьАвтоматически,
	|	2
	|ИЗ
	|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|	И ВЫРАЗИТЬ(СохраненныеНастройки.Пользователь КАК Справочник.ГруппыПользователей).ПользователиГруппы.Пользователь = &Пользователь
	|	И &ГрупповыеНастройки = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СохраненныеНастройки.Пользователь,
	|	СохраненныеНастройки.ИмяОбъекта,
	|	СохраненныеНастройки.НаименованиеНастройки,
	|	СохраненныеНастройки.СохраненнаяНастройка,
	|	СохраненныеНастройки.ИспользоватьПриОткрытии,
	|	СохраненныеНастройки.СохранятьАвтоматически,
	|	3
	|ИЗ
	|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|	И СохраненныеНастройки.Пользователь = НЕОПРЕДЕЛЕНО
	|	И &ОбщиеНастройки = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидНастройки,
	|	НаименованиеНастройки");
			
	Если СтруктураНастройки.Свойство("Пользователь") = Ложь ИЛИ Не ЗначениеЗаполнено(СтруктураНастройки.Пользователь) Тогда
					
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
					
	Иначе
					
		Запрос.УстановитьПараметр("Пользователь", СтруктураНастройки.Пользователь);
					
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
	Запрос.УстановитьПараметр("НастройкиВсехПользователей", ПолучитьНастройкиВсехПользователей);
	Запрос.УстановитьПараметр("ГрупповыеНастройки", ПолучитьГрупповыеНастройки);
	Запрос.УстановитьПараметр("ОбщиеНастройки", ПолучитьОбщиеНастройки);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьНастройки()
	
Функция ПолучитьНастройкуИспользоватьПриОткрытии(СтруктураНастройки) Экспорт
	
	Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВложенныйЗапрос.НаименованиеНастройки КАК НаименованиеНастройки,
	|	ВложенныйЗапрос.СохраненнаяНастройка КАК СохраненнаяНастройка,
	|	ВложенныйЗапрос.СохранятьАвтоматически КАК СохранятьАвтоматически
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		СохраненныеНастройки.НаименованиеНастройки КАК НаименованиеНастройки,
	|		СохраненныеНастройки.СохраненнаяНастройка КАК СохраненнаяНастройка,
	|		СохраненныеНастройки.СохранятьАвтоматически КАК СохранятьАвтоматически
	|	ИЗ
	|		РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|	ГДЕ
	|		СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|		И СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА
	|		И СохраненныеНастройки.Пользователь = &Пользователь
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		СохраненныеНастройки.НаименованиеНастройки,
	|		СохраненныеНастройки.СохраненнаяНастройка,
	|		СохраненныеНастройки.СохранятьАвтоматически
	|	ИЗ
	|		РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|	ГДЕ
	|		СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|		И СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА
	|		И ВЫРАЗИТЬ(СохраненныеНастройки.Пользователь КАК Справочник.ГруппыПользователей).ПользователиГруппы.Пользователь = &Пользователь
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		СохраненныеНастройки.НаименованиеНастройки,
	|		СохраненныеНастройки.СохраненнаяНастройка,
	|		СохраненныеНастройки.СохранятьАвтоматически
	|	ИЗ
	|		РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|	ГДЕ
	|		СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|		И СохраненныеНастройки.Пользователь = НЕОПРЕДЕЛЕНО
	|		И СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА) КАК ВложенныйЗапрос");
		
	Если СтруктураНастройки.Свойство("Пользователь") = Ложь ИЛИ Не ЗначениеЗаполнено(СтруктураНастройки.Пользователь) Тогда
					
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
					
	Иначе
					
		Запрос.УстановитьПараметр("Пользователь", СтруктураНастройки.Пользователь);
					
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
		
	РезультатЗапроса = Запрос.Выполнить();
		
	Если РезультатЗапроса.Пустой() Тогда
			
		Возврат Ложь;
			
	Иначе
			
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаИзРезультатаЗапроса.Следующий();
		
		СтруктураНастройки.Вставить("НаименованиеНастройки", ВыборкаИзРезультатаЗапроса.НаименованиеНастройки);
		СтруктураНастройки.Вставить("СохраненнаяНастройка", ВыборкаИзРезультатаЗапроса.СохраненнаяНастройка.Получить());
		СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", Истина);
		СтруктураНастройки.Вставить("СохранятьАвтоматически", ВыборкаИзРезультатаЗапроса.СохранятьАвтоматически);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПолучитьНастройкуИспользоватьПриОткрытии()

Функция СохранитьНастройку(СтруктураНастройки, СтруктураЗаменяемойНастройки = Неопределено) Экспорт
	
	Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураНастройки.Свойство("ИспользоватьПриОткрытии") И СтруктураНастройки.ИспользоватьПриОткрытии = Истина Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СохраненныеНастройки.Пользователь,
		|	СохраненныеНастройки.ИмяОбъекта,
		|	СохраненныеНастройки.НаименованиеНастройки
		|ИЗ
		|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
		|ГДЕ
		|	СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА
		|	И СохраненныеНастройки.Пользователь = &Пользователь
		|	И СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
		|	И СохраненныеНастройки.НаименованиеНастройки <> &НаименованиеНастройки");
		
		Запрос.УстановитьПараметр("Пользователь", СтруктураНастройки.Пользователь);
		Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
		Запрос.УстановитьПараметр("НаименованиеНастройки", СтруктураНастройки.НаименованиеНастройки);
		
		РезультаЗапроса = Запрос.Выполнить();
		
		Если РезультаЗапроса.Пустой() = Ложь Тогда
			
			МенеджерЗаписи = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
			
			Выборка = РезультаЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				МенеджерЗаписи.Пользователь = Выборка.Пользователь;
				МенеджерЗаписи.ИмяОбъекта = Выборка.ИмяОбъекта;
				МенеджерЗаписи.НаименованиеНастройки = Выборка.НаименованиеНастройки;
				
				МенеджерЗаписи.Прочитать();
				
				Если МенеджерЗаписи.Выбран() Тогда
					
					МенеджерЗаписи.ИспользоватьПриОткрытии = Ложь;
					МенеджерЗаписи.Записать();
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
	МенеджерЗаписи = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
		
	Если СтруктураЗаменяемойНастройки <> Неопределено Тогда
		
		МенеджерЗаписи.Пользователь = СтруктураЗаменяемойНастройки.Пользователь;
		МенеджерЗаписи.ИмяОбъекта = СтруктураЗаменяемойНастройки.ИмяОбъекта;
		МенеджерЗаписи.НаименованиеНастройки = СтруктураЗаменяемойНастройки.НаименованиеНастройки;
		
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			
			МенеджерЗаписи.НаименованиеНастройки = СтруктураНастройки.НаименованиеНастройки;
			
			Если СтруктураНастройки.Свойство("СохраненнаяНастройка") Тогда
				
				МенеджерЗаписи.СохраненнаяНастройка = Новый ХранилищеЗначения(СтруктураНастройки.СохраненнаяНастройка, Новый СжатиеДанных(9));
				
			КонецЕсли;
			
			Если СтруктураНастройки.Свойство("ИспользоватьПриОткрытии") Тогда
						
				МенеджерЗаписи.ИспользоватьПриОткрытии = СтруктураНастройки.ИспользоватьПриОткрытии;
						
			КонецЕсли;
					
			Если СтруктураНастройки.Свойство("СохранятьАвтоматически") Тогда
						
				МенеджерЗаписи.СохранятьАвтоматически = СтруктураНастройки.СохранятьАвтоматически;
						
			КонецЕсли;
				
		Иначе
				
			Возврат Ложь;
				
		КонецЕсли;
		
	Иначе
		
		МенеджерЗаписи.Пользователь = СтруктураНастройки.Пользователь;
		МенеджерЗаписи.ИмяОбъекта = СтруктураНастройки.ИмяОбъекта;
		МенеджерЗаписи.НаименованиеНастройки = СтруктураНастройки.НаименованиеНастройки;
		МенеджерЗаписи.СохраненнаяНастройка = Новый ХранилищеЗначения(СтруктураНастройки.СохраненнаяНастройка, Новый СжатиеДанных(9));
		
		Если СтруктураНастройки.Свойство("ИспользоватьПриОткрытии") Тогда
					
			МенеджерЗаписи.ИспользоватьПриОткрытии = СтруктураНастройки.ИспользоватьПриОткрытии;
					
		КонецЕсли;
				
		Если СтруктураНастройки.Свойство("СохранятьАвтоматически") Тогда
					
			МенеджерЗаписи.СохранятьАвтоматически = СтруктураНастройки.СохранятьАвтоматически;
					
		КонецЕсли;
		
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
		
	Возврат Истина;
	
КонецФункции // СохранитьНастройку()

Функция УдалитьНастройку(СтруктураНастройки) Экспорт
	
	Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
		
	МенеджерЗаписи.Пользователь = СтруктураНастройки.Пользователь;
	МенеджерЗаписи.ИмяОбъекта = СтруктураНастройки.ИмяОбъекта;
	МенеджерЗаписи.НаименованиеНастройки = СтруктураНастройки.НаименованиеНастройки;
	
	МенеджерЗаписи.Прочитать();
		
	Если МенеджерЗаписи.Выбран() Тогда
			
		МенеджерЗаписи.Удалить();
			
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // УдалитьНастройку()
