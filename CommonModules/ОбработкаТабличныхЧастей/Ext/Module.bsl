// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	
	Валюта = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента",  МетаданныеДокумента),ДокументОбъект.ВалютаДокумента, Константы.ВалютаРегламентированногоУчета.Получить());
	Курс   = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов",  МетаданныеДокумента),ДокументОбъект.КурсВзаиморасчетов, 1);
	Кратность = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов",  МетаданныеДокумента),ДокументОбъект.КратностьВзаиморасчетов, 1);
	
	Если	ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаАкциза",  МетаданныеДокумента, ИмяТабличнойЧасти) И
			ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаАкциза", МетаданныеДокумента, ИмяТабличнойЧасти) И
			ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Количество",   МетаданныеДокумента, ИмяТабличнойЧасти) И
			ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Номенклатура", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			
		Коэффициент = 1;
		Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда		
			Коэффициент = СтрокаТабличнойЧасти.Номенклатура.КоэффициентРасчетаОблагаемойБазыАкциза;
		КонецЕсли;	
		
		Если ДокументОбъект.УчитыватьАкциз Тогда
			СтрокаТабличнойЧасти.СуммаАкциза = УчетНДСИАкциза.РассчитатьСуммуАкциза(СтрокаТабличнойЧасти.Количество, Коэффициент, УчетНДСИАкциза.ПолучитьСтавкуАкциза(СтрокаТабличнойЧасти.СтавкаАкциза), Валюта, Курс, Кратность);
		Иначе
			СтрокаТабличнойЧасти.СуммаАкциза = 0;
			СтрокаТабличнойЧасти.СтавкаАкциза = Справочники.СтавкиАкциза.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // РассчитатьСуммуАкцизаТабЧасти()
               
// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//  ИмяРеквизитаСуммаНДС - реквизит, который заполняется расчетной суммой НДС. "СуммаНДС" либо "УплаченныйНДС".
//
Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяРеквизитаСуммаНДС = "СуммаНДС", РассчитыватьСуммуЗачета = Ложь) Экспорт

	// Если в документе нет флагов учета НДС, то используем значения по умолчанию
	УчитыватьНДС = Истина;
	СуммаВключаетНДС = Ложь;
	МетаданныеДокумента = ДокументОбъект.Метаданные();	
	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	ЕстьОборотПоРеализации 	= ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ОборотПоРеализации", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьВалюта              = ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента);
	ЭтоЗаявлениеОВвозеТоваров = МетаданныеДокумента.Имя = "ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов";
	
	Если ЕстьВалюта И НЕ ЭтоЗаявлениеОВвозеТоваров И ДокументОбъект.мВалютаРегламентированногоУчета <> ДокументОбъект.ВалютаДокумента И ДокументОбъект.Дата < Дата(2014, 07, 01) Тогда
		// В валютных счетах-фактурах до 01.07.2014 расчет НДС выполняется от суммы, так как оборот по реализации указывается в тенге.
		// В валютных счетах-фактурах начиная с 01.07.2014 расчет НДС выполняется от оборота по реализации, так как оборот по реализации указывается в валюте.
		ЕстьОборотПоРеализации 	= Ложь;
	КонецЕсли;	
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента ) Тогда
		УчитыватьНДС = ДокументОбъект.УчитыватьНДС;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента ) Тогда
		СуммаВключаетНДС = ДокументОбъект.СуммаВключаетНДС;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если ЕстьОборотПоРеализации Тогда 
			СтрокаТабличнойЧасти[ИмяРеквизитаСуммаНДС] = УчетНДСИАкциза.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ОборотПоРеализации,
														   УчитыватьНДС, 
														   Ложь,
														   УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),
														   ?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаАкциза", МетаданныеДокумента, ИмяТабличнойЧасти), СтрокаТабличнойЧасти.СуммаАкциза,0),
														   Истина);	
														   
		ИначеЕсли	ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		
			СтрокаТабличнойЧасти[ИмяРеквизитаСуммаНДС]= УчетНДСИАкциза.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
														   УчитыватьНДС, 
														   СуммаВключаетНДС,
														   УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),
														   ?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаАкциза", МетаданныеДокумента, ИмяТабличнойЧасти), СтрокаТабличнойЧасти.СуммаАкциза,0),
														   ?(ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента), ДокументОбъект.СуммаВключаетАкциз,Ложь));
		КонецЕсли;													   
	КонецЕсли;

	// если в документе есть реквизиты УплаченныйНДС и СуммаНДС, то сумма НДС к зачету определяется
	// исходя из признака включения НДС в стоимость
	Если РассчитыватьСуммуЗачета Тогда
		НДСВключенВСтоимость 	= ?(ОбщегоНазначения.ЕстьРеквизитДокумента("НДСВключенВСтоимость", МетаданныеДокумента), ДокументОбъект.НДСВключенВСтоимость, Ложь);	
		Если НДСВключенВСтоимость Тогда
			СтрокаТабличнойЧасти.СуммаНДС = 0;
		Иначе
			СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти[ИмяРеквизитаСуммаНДС];
		КонецЕсли
	КонецЕсли;   	

КонецПроцедуры // РассчитатьСуммуНДСТабЧасти()

// Устанавливает запрет на изменение видимости заданных колонок в заданной коллекции колонок 
// табличного поля
//
// Параметры:
//  Колонки          - коллекция колонок табличного поля,
//  СтруктураКолонок - структура, содержащая имена колонок, видимость которых отключить нельзя
//
Процедура УстановитьИзменятьВидимостьКолонокТабЧасти(Колонки, СтруктураКолонок) Экспорт
          
	// устанавливаем стандартные запреты на изменение видимости колонок
	Для каждого КолонкаТаблицы из Колонки Цикл
		КолонкаТаблицы.ИзменятьВидимость = НЕ СтруктураКолонок.Свойство(КолонкаТаблицы.Имя);
	КонецЦикла;

КонецПроцедуры // УстановитьИзменятьВидимостьКолонокТабЧасти()

// Рассчитывает сумму в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект     - объект редактируемого документа.
//
Процедура РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СпособРасчета = Неопределено, ИмяТабличнойЧасти = Неопределено) Экспорт

	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

КонецПроцедуры // РассчитатьСуммуТабЧасти()

// Процедура выполняет стандартные действия при изменении суммы 
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//  ТекПользователь      - необходим для совместимости аналогичной процедуры в УТ
//
Процедура ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ТекПользователь = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли; 

КонецПроцедуры // ПриИзмененииСуммыТабЧасти()

// Процедура заполняет ставку НДС в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	//Заполнить СтавкаНДС
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСтавкуНДСТабЧасти()

// Процедура заполняет Вид реализации в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьНДСВидРеализацииТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ТекПользователь) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);	
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НДСВидОперацииРеализации", МетаданныеДокумента, ИмяТабличнойЧасти)
	   И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НДСВидОперацииРеализации) Тогда
	   
		ВидДокумента = МетаданныеДокумента.Имя;
		
		Если ВидДокумента = "ВозвратТоваровОтПокупателя" Тогда
			// Для возвратов подставляем предопределенный элемент
			СтрокаТабличнойЧасти.НДСВидОперацииРеализации = Справочники.ВидыРеализации.ВозвратТМЗ;
		Иначе
			// Для остальных документов - значение по умолчанию для пользователя
			СтрокаТабличнойЧасти.НДСВидОперацииРеализации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойВидОперацииРеализации");
			
			//если не заполнена настройка по умолчанию
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.НДСВидОперацииРеализации) Тогда
				СтрокаТабличнойЧасти.НДСВидОперацииРеализации  = Справочники.ВидыРеализации.РеализацияТМЗ;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьНДСВидРеализацииТабЧасти()

// Процедура заполняет Вид оборота в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);	
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НДСВидОборота", МетаданныеДокумента, ИмяТабличнойЧасти)
	   И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НДСВидОборота) Тогда
	   
		Если УчетНДСИАкциза.ПолучитьМетодОтнесенияНДСВЗачет(ДокументОбъект.Организация, ДокументОбъект.Дата) = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный Тогда
			СтрокаТабличнойЧасти.НДСВидОборота = Перечисления.ВидыОборотовПоРеализации.Общий;
		Иначе
			СтрокаТабличнойЧасти.НДСВидОборота = Перечисления.ВидыОборотовПоРеализации.Облагаемый;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьНДСВидОборотаТабЧасти()

// Процедура заполняет Вид поступления в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти	- строка табличной части документа,
//  ДокументОбъект			- объект редактируемого документа,
//	ТекПользователь			- пользователь
//
Процедура ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ТекПользователь) Экспорт
	
	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);	
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НДСВидПоступления", МетаданныеДокумента, ИмяТабличнойЧасти) и НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НДСВидПоступления) Тогда
		ВидДокумента = МетаданныеДокумента.Имя;
		
		Если ВидДокумента = "ВозвратТоваровПоставщику" ИЛИ
			 ВидДокумента = "ВозвратТоваровПоставщикуИзНТТ" Тогда
			// для возвратов подставляем предопределенный элемент
			СтрокаТабличнойЧасти.НДСВидПоступления = Справочники.ВидыПоступления.ВозвратТМЗ;
		ИначеЕсли ВидДокумента = "СписаниеТоваров" Тогда
			// для возвратов подставляем предопределенный элемент
			СтрокаТабличнойЧасти.НДСВидПоступления = Справочники.ВидыПоступления.СписаниеТМЗ;	
		ИначеЕсли ВидДокумента = "ГТДИмпорт" Тогда			
			СтрокаТабличнойЧасти.НДСВидПоступления = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойВидПоступленияИмпорт");
		Иначе
			// для остальных документов - значение по умолчанию для пользователя
			СтрокаТабличнойЧасти.НДСВидПоступления = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойВидПоступления");
		КонецЕсли;

	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьНДСВидПоступленияТабЧасти()

// Процедура заполняет ставку Акциза в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьСтавкуАкцизаТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаАкциза", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		СтрокаТабличнойЧасти.СтавкаАкциза = СтрокаТабличнойЧасти.Номенклатура.СтавкаАкциза;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСтавкуАкцизаТабЧасти()


 // Процедура заполняет Вид реализации по Акцмзу в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьАкцизВидРеализацииТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ТекПользователь) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);	
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("АкцизВидОперацииРеализации", МетаданныеДокумента, ИмяТабличнойЧасти)
	   И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.АкцизВидОперацииРеализации) Тогда
	   
		//Значение по умолчанию для пользователя
		СтрокаТабличнойЧасти.АкцизВидОперацииРеализации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойВидОперацииОблагаемойАкцизом");

		//если не заполнена настройка по умолчанию
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.АкцизВидОперацииРеализации) Тогда
			СтрокаТабличнойЧасти.АкцизВидОперацииРеализации  = Справочники.ВидыОперацийОблагаемыхАкцизом.Реализация;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьНДСВидРеализацииТабЧасти()


// Производит пересчет цен при изменении флагов учета налогов.
// Пересчет зависит от способа заполнения цен, при заполнении По ценам номенклатуры (при продаже) 
// хочется избегать ситуаций, когда компания «теряет деньги» при пересчете налогов. 
// Поэтому если в документе флаг "Учитывать налог" выключен, то цены должны браться напрямую из справочника, 
// потому что хочется продавать по той же цене, независимо от режима налогообложения. 
// Например, если отпускная цена задана с НДС для избежания ошибок округления, то это не значит, 
// что при отпуске без НДС мы должны продать дешевле. Если же флаг учета налога в документе включен, 
// то цены должны пересчитываться при подстановке в документ: 
// налог должен включаться или не включаться в зависимости от флага включения налога в типе цен.
// При заполнении по ценам контрагентов (при покупке) хочется хранить цены поставщиков. 
// Поэтому нужно пересчитывать всегда по установленным флагам в документе и в типе цен. 
// Это гарантирует, что при записи цен в регистр и последующем их чтении, 
// например, при заполнении следующего документа, мы с точностью до ошибок округления при пересчете 
// получим те же самые цены.
//
// Все расчеты с акцизом провоим из того предположения, что если Цена включает НДС, то она включает и Акциз
//
// Параметры: 
//  Цена                - число, пересчитваемое значение цены, 
//  СпособЗаполненияЦен - ссылка на перечисление СпособыЗаполненияЦен, определяет способ расчета,
//						  "при продаже" или "при покупке", см описание функции,
//  ЦенаВключаетНДС     - булево, определяет содержит ли переданное значение цены НДС,
//  УчитыватьНДС        - булево, определяет должно ли новое значение цены учитвать НДС,
//  СуммаВключаетНДС    - булево, определяет должно ли новое значение цены включать НДС,
//  СтавкаНДС           - число, ставка НДС, 
//
//  ЦенаВключаетАкциз   - булево, определяет содержит ли переданное значение цены Акциз,
//  УчитыватьАкциз      - булево, определяет должно ли новое значение цены учитвать Акциз,
//  СуммаВключаетАкциз  - булево, определяет должно ли новое значение цены включать Акциз,
//  СуммаАкциза         - число, сумма акциза на единицу, 
//
// Возвращаемое значение:
//  Числое, новое значение цены.
//
Функция ПересчитатьЦенуПриИзмененииФлаговНалогов(	Цена, СпособЗаполненияЦен, ЦенаВключаетНДС,
													УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС, 
													ЦенаВключаетАкциз  = Ложь, УчитыватьАкциз = Ложь, 
													СуммаВключаетАкциз = Ложь, СуммаАкциза = 0) Экспорт


	// Инициализация переменных
	НадоВключитьНДС  = Ложь;
	НадоИсключитьНДС = Ложь;
	
	НадоВключитьАкциз  = Ложь;
	НадоИсключитьАкциз = Ложь;
	
	НоваяЦена		 = Цена;
	
	
	Если УчитыватьНДС Тогда
		Если СуммаВключаетНДС И (НЕ ЦенаВключаетНДС) Тогда
			// Надо добавлять НДС       
			НадоВключитьНДС = Истина;
		ИначеЕсли НЕ СуммаВключаетНДС И ЦенаВключаетНДС Тогда
			// Надо исключать НДС       
			НадоИсключитьНДС = Истина;
		КонецЕсли;
	Иначе
		Если ЦенаВключаетНДС  Тогда
			// Надо исключать НДС       
			НадоИсключитьНДС = Истина;
		КонецЕсли;	
	КонецЕсли;
		
	Если УчитыватьАкциз Тогда
		Если СуммаВключаетАкциз И (НЕ ЦенаВключаетАкциз) Тогда
			// Надо добавлять НДС       
			НадоВключитьАкциз = Истина;
		ИначеЕсли НЕ СуммаВключаетАкциз И ЦенаВключаетАкциз Тогда
			// Надо исключать НДС       
			НадоИсключитьАкциз = Истина;
		КонецЕсли;
		// при условии что у нас вдется учет Акциза и Сумма будет включать НДС, принудительного акциз включаем в цену, 
		//т.к. он входит в базу для расчета НДС
		Если НадоВключитьНДС и НЕ СуммаВключаетАкциз Тогда
			НадоВключитьАкциз = Истина;
			// при этом если Акциз ране у нас был - отнимем его, чтобы не включить дважды
			Если ЦенаВключаетАкциз  Тогда
				НадоИсключитьАкциз = Истина;
			КонецЕсли;	
		КонецЕсли;
	Иначе
		Если ЦенаВключаетАкциз  Тогда
			// Надо исключать НДС       
			НадоИсключитьАкциз = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	//НДС накручивается сверху, поэтому при любом раскладе первым исключаем его
	Если НадоИсключитьНДС Тогда
		НоваяЦена = (НоваяЦена * 100) / (100 + СтавкаНДС);
	КонецЕсли;
	
	// Исключаем акциз
	Если НадоИсключитьАкциз Тогда
		НоваяЦена =  НоваяЦена - СуммаАкциза;
	КонецЕсли;	
	
	//включаем его при необходимости 
	Если НадоВключитьАкциз Тогда
		НоваяЦена = НоваяЦена + СуммаАкциза;
	КонецЕсли;	
	
	
	Если НадоВключитьНДС Тогда
		НоваяЦена = (НоваяЦена * (100 + СтавкаНДС)) / 100;
	КонецЕсли;

	Возврат НоваяЦена;

КонецФункции // ПересчитатьЦенуПриИзмененииФлаговНалогов()

// Процедура заполняет единицу и цену по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	ИмяТабличнойЧасти	= ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента	= ДокументОбъект.Метаданные();

	ВалютаДокумента = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента), ДокументОбъект.ВалютаДокумента, ВалютаРегламентированногоУчета);  
	КурсДок         = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента), ОбщегоНазначения.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), 1);
	КратностьДок    = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента), ОбщегоНазначения.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), 1);
	
	//Из регистра сведений ЦеныНоменклатуры по Номенклатура, ТипЦен получить ресурсы, 
	// установить коэффициент.
	// Если не заданы значения измерений, то устанавливаем по справочнику
	ТипЦен = "";
	
	Если ДокументОбъект.Метаданные().Реквизиты.Найти("ТипЦен") <> Неопределено Тогда
		ТипЦен = ДокументОбъект.ТипЦен;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда 

		// берем из самого реквизита Номенклатура
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Коэффициент", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			СтрокаТабличнойЧасти.Коэффициент      = 1;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Цена = 0;

	Иначе
		// из регистра
		Цена = УправлениеЦенообразованием.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
										ДокументОбъект.ТипЦен, ДокументОбъект.Дата,
										ВалютаДокумента, КурсДок, КратностьДок, ДокументОбъект.Организация);

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		Если НЕ ЗначениеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(	Цена, 
																					Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
																					ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
																					ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) 
																					И ДокументОбъект.УчитыватьНДС, 
																					ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) 
																					И ДокументОбъект.СуммаВключаетНДС, 
																					?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти),
																					УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
		КонецЕсли;

		// Если единица оказалась не заполненной, то заполняем ее основной единицей номеклатуры
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент      = 1;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьЕдиницуЦенуПродажиТабЧасти()

// Функция выполняет поиск первой, удовлетворяющей условию поика, строки табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа, в которой осуществляется поиск,
//  СтруктураОтбора - структура - задает условие поиска.
//
// Возвращаемое значение: 
//  Строка табличной части - найденная строка табличной части,
//  Неопределено           - строка табличной части не найдена.
//
Функция НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора) Экспорт

	СтрокаТабличнойЧасти = Неопределено;
	МассивНайденныхСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции // НайтиСтрокуТабЧасти()

// Процедура выполняет стандартные действия при изменении номенклатуры 
// в строке табличной части документа (очищает ссылки на подчиненные справочники).
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//  ИмяЕдиницыИзмерения  - наименование единицы измерения
//
Процедура ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяЕдиницыИзмерения = "ЕдиницаИзмерения") Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// При изменении номенклатуры очистим ссылки на подчиненные справочники
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента(ИмяЕдиницыИзмерения, МетаданныеДокумента, ИмяТабличнойЧасти)
	   И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти[ИмяЕдиницыИзмерения].Владелец Тогда
		СтрокаТабличнойЧасти[ИмяЕдиницыИзмерения] = Неопределено;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти)
	   И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.СерияНоменклатуры.Владелец Тогда
		СтрокаТабличнойЧасти.СерияНоменклатуры = Неопределено;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти)
	   И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры.Владелец Тогда
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииНоменклатурыТабЧасти()

// Процедура выполняет стандартные действия при изменении единицы 
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	// Установить коэффициент
	Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	Попытка
		Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
		Если ТипЗнч(Номенклатура)<>Тип("СправочникСсылка.Номенклатура") И ТипЗнч(Номенклатура)<>Тип("СправочникСсылка.фин_ПлановаяНоменклатура") Тогда
			Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
	Исключение
	КонецПопытки;
	мКоэффициент = СтрокаТабличнойЧасти.Коэффициент;
	СтрокаТабличнойЧасти.Коэффициент = дог_УправлениеДоговорами.КоэффициентПересчетаВБазовую(СтрокаТабличнойЧасти.ЕдиницаИзмерения,Номенклатура); 
	ЕстьЦена = Ложь;
	Попытка
		Цена = СтрокаТабличнойЧасти.Цена;
		ЕстьЦена = Истина;
	Исключение
		Возврат;
	КонецПопытки;
	Если ЕстьЦена И мКоэффициент<>СтрокаТабличнойЧасти.Коэффициент Тогда
		Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ОбщегоНазначения.ПолучитьЗначениеПеременной("глТекущийПользователь"),"ПриИзмененииЕдиницыИзмеренияТМЗПересчитыватьЦенуПропорционально")=Истина Тогда
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена / (СтрокаТабличнойЧасти.Коэффициент/?(мКоэффициент=0,1,мКоэффициент)); 
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена *СтрокаТабличнойЧасти.Количество;
			// пересчет суммы НДС
			Попытка
				СуммаНДС = СтрокаТабличнойЧасти.СуммаНДС;
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			Исключение
			КонецПопытки;
			Попытка
				СуммаАкциз = СтрокаТабличнойЧасти.СуммаАкциза;
				РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииЕдиницыТабЧасти

// Процедура заполняет единицу и цену по ценам покупки в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ПересчитыватьНалогиВЦене       - булево, определяет необходимость пересчета цен по флагам налогов в документе,
//                                   необязательный, по умолчанию Истина.
//
Процедура ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета, ПересчитыватьНалогиВЦене = Истина) Экспорт

	Перем Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС;

	ИмяТабличнойЧасти	= ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента	= ДокументОбъект.Метаданные();

	СтруктураШапкиДокумента.Свойство("ТипЦен",			ТипЦен);
	СтруктураШапкиДокумента.Свойство("ДатаДокумента",	ДатаДокумента);
	СтруктураШапкиДокумента.Свойство("ВалютаДокумента",	ВалютаДокумента);
	СтруктураШапкиДокумента.Свойство("УчитыватьНДС",	УчитыватьНДС);
	СтруктураШапкиДокумента.Свойство("СуммаВключаетНДС",СуммаВключаетНДС);
	
	// Из регистра сведений ЦеныКонтрагентов по измерениям Контрагент, Номенклатура, ТипЦен получить ресурсы, 
	// установить коэффициент.

	// определяем имя табличной части, из которой вызывается процедура
	ИмяТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Имя;
	
	// Если не заданы значения измерений, то устанавливаем по справочнику
	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда 

		// берем из самого реквизита Номенклатура
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = 1;
			СтрокаТабличнойЧасти.Цена             = 0;
		КонецЕсли;

	Иначе
		// из регистра
		Цена = УправлениеЦенообразованием.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
										ТипЦен, ДатаДокумента,
										ВалютаДокумента, ОбщегоНазначения.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), 
										ОбщегоНазначения.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), ДокументОбъект.Организация);

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		Если НЕ ЗначениеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе

			Если ПересчитыватьНалогиВЦене Тогда
				СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(	Цена, 
																						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, 
																						ТипЦен.ЦенаВключаетНДС,
																						УчитыватьНДС, СуммаВключаетНДС, 
																						УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			Иначе
				СтрокаТабличнойЧасти.Цена = Цена;
			КонецЕсли;
		КонецЕсли;

		// Если единица оказалась не заполненной, то заполняем ее основной единицей номеклатуры
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
				СтрокаТабличнойЧасти.ЕдиницаИзмерения  = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент = 1
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// если в документе существует реквизит КоличествоМест, то рассчитанная цена идет за него
	// вычислим цену за базовую единицу
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если СтрокаТабличнойЧасти.Коэффициент > 0 Тогда
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена / СтрокаТабличнойЧасти.Коэффициент;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьЕдиницуЦенуПокупкиТабЧасти()


// Изменяет видимость колонки табличного поля (напрмер, табличной части документа).
// Если изменение видимости колонки запрещено, то предварительно разрешает изменять видимость колонки.
//
// Параметры:
//  Колонка   - колонка табличного поля, 
//  Видимость - булево, устанавливаемый флаг видимости колонки.
//
Процедура УстановитьВидимостьКолонкиТабЧасти(Колонка, Видимость) Экспорт

	Если Колонка.ИзменятьВидимость Тогда
		Колонка.Видимость = Видимость;
	Иначе // надо вначале разрешить менять видимость
		Колонка.ИзменятьВидимость = Истина;
		Колонка.Видимость = Видимость;
		Колонка.ИзменятьВидимость = Ложь;
	КонецЕсли; 

КонецПроцедуры // УстановитьВидимостьКолонкиТабЧасти()

// Процедура заполняет Содержание из полного наименования номенклатуры в строке табличной части
//
// Параметры
//  СтрокаТабличнойЧасти - Строка табличной части
//
Процедура ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, Документобъект) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Содержание", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		
		НаименованиеПолное = СтрокаТабличнойЧасти.Номенклатура.НаименованиеПолное;

		Если ПустаяСтрока(НаименованиеПолное) Тогда
			СтрокаТабличнойЧасти.Содержание = СтрокаТабличнойЧасти.Номенклатура.Наименование;
		Иначе
			СтрокаТабличнойЧасти.Содержание = НаименованиеПолное;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСодержаниеТабЧасти()

// Процедура заполняет способ списания товаров в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления["СпособыСписанияОстаткаТоваров"].СоСклада;

КонецПроцедуры // ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти()

// Процедура заполняет единицу в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьЕдиницуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	// берем из самого реквизита Номенклатура
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент      = 1;

КонецПроцедуры // ЗаполнитьЕдиницуТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПОДБОРА В ТОРГОВЫЕ ДОКУМЕНТЫ

// Универсальная процедура, которая инициирует механизм подбора
// номенклатуры в документы (открывает основную форму обработки подбор).
//
// Параметры:
//  ФормаДокумента - форма документа, в который осуществляется подбор,
//  СтруктураПараметров - параметры, которые передаются в форму подбора.
//
Процедура ОткрытьПодборНоменклатуры(ФормаДокумента, СтруктураПараметров, ФормаПодбора = Неопределено) Экспорт

	// Добавляем обработчики в форму
	МетаданныеДокумента = ФормаДокумента.ДокументОбъект.Метаданные();

	Для Каждого ЭлементСтруктурыПараметров Из СтруктураПараметров Цикл

		ИмяРеквизита = ЭлементСтруктурыПараметров.Ключ;

		Если ОбщегоНазначения.ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Тогда

			ФормаДокумента.ПодключитьОбработчикИзмененияДанных(ИмяРеквизита, "ОбновитьФормуПодбора", Ложь);

		Иначе
			Если ИмяРеквизита = "Склад" Тогда
			
				ИмяРеквизита = "СкладОрдер";
				Если ОбщегоНазначения.ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Тогда

					ФормаДокумента.ПодключитьОбработчикИзмененияДанных(ИмяРеквизита, "ОбновитьФормуПодбора", Ложь);
					Продолжить;

				КонецЕсли;

				ИмяРеквизита = "СкладОтправитель";
				Если ОбщегоНазначения.ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Тогда

					ФормаДокумента.ПодключитьОбработчикИзмененияДанных(ИмяРеквизита, "ОбновитьФормуПодбора", Ложь);
					Продолжить;

				КонецЕсли;

			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	// Открываем форму подбора.
	ФормаПодбора = Обработки.ПодборНоменклатуры.ПолучитьФорму("ОсновнаяФорма", ФормаДокумента, ФормаДокумента);
	ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаПодбора.Открыть();
	
КонецПроцедуры // ОткрытьПодборНоменклатуры()

// Процедура, которая обновляет параметры подбора номенклатуры и
// инициирует обновление формы подбора, если она открыта
//
// Параметры:
//  ДокументОбъект     - объект документа, в котором производится подбор.
//  ФормаДокумента     - форма документа, в который осуществляется подбор,
//  ПолноеИмяРеквизита - полное имя реквизита, который изменился.
//
Процедура ОбновитьПараметрыИФормуПодбора(ДокументОбъект, ФормаДокумента, ПолноеИмяРеквизита) Экспорт

	ФормаПодбора = Обработки.ПодборНоменклатуры.ПолучитьФорму("ОсновнаяФорма", ФормаДокумента, ФормаДокумента);

	Если ФормаПодбора.Открыта() Тогда

		ИмяРеквизита = СтрЗаменить(ПолноеИмяРеквизита, "ДокументОбъект.", "");

		Если ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров.Свойство(ИмяРеквизита) Тогда

			ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров.Вставить(ИмяРеквизита, ДокументОбъект[ИмяРеквизита]);
			СтруктураЗапроса = ФормаПодбора.ЭлементыФормы.СписокВидовПодбора.Значение;
			Родитель         = ФормаПодбора.ПолучитьТекущегоРодителя();

			ФормаПодбора.ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыИФормуПодбора()

#Если Клиент Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПЕРЕТАСКИВАНИЕМ НОМЕНКЛАТУРЫ ИЗ ПОДБОРА

// Функция выполняет проверку перетаскивания из подбора номенклатуры.
//
// Параметры:
//  ПараметрыПеретаскивания - параметры перетаскивания.
//
// Возвращаемое значение: 
//  Флаг проверки.
//
Функция ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Экспорт

	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") Тогда
		Возврат ПараметрыПеретаскивания.Значение.Свойство("ИзПодбора");
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ПолучитьСтруктуруЗначенийПеретаскивания()

// Процедура проверки перетаскивания из подбора номенклатуры.
//
// Параметры:
//  ПараметрыПеретаскивания - параметры перетаскивания.
//  СтандартнаяОбработка    - cтандартная обработка.
//  ДокументСсылка          - ссылка на документ.
//  ИмяТЧ                   - имя табличной части.
//
Процедура ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ДокументСсылка, ИмяТЧ) Экспорт

	СтандартнаяОбработка = Ложь;

	Если ДокументСсылка = ПараметрыПеретаскивания.Значение.Владелец
	   И ИмяТЧ = ПараметрыПеретаскивания.Значение.ИмяТЧ Тогда
	   
	    Если Не ПараметрыПеретаскивания.Значение.ВыбСтрока.ЭтоГруппа Тогда
			Если (ИмяТЧ =  "Услуги" И НЕ ПараметрыПеретаскивания.Значение.ВыбСтрока.Услуга)
			 ИЛИ (ИмяТЧ <> "Услуги" И    ПараметрыПеретаскивания.Значение.ВыбСтрока.Услуга) Тогда
				ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
				ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
			Иначе
				ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Копирование;
				ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
			КонецЕсли;
		Иначе
			ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Копирование;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		КонецЕсли;
	Иначе
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	КонецЕсли;

КонецПроцедуры // ПроверкаПеретаскиванияИзПодбора()

// Процедура подтверждающая перетаскивание из подбора номенклатуры.
//
// Параметры:
//  ПараметрыПеретаскивания - параметры перетаскивания.
//  СтандартнаяОбработка    - cтандартная обработка.
//
Процедура ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка                       = Ложь;
	ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Копирование;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;

КонецПроцедуры // ПеретаскиваниеИзПодбора()

// Процедура отменяющая перетаскивание из подбора номенклатуры.
//
// Параметры:
//  ПараметрыПеретаскивания - параметры перетаскивания.
//  СтандартнаяОбработка    - cтандартная обработка.
//
Процедура ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка                       = Ложь;
	ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;

КонецПроцедуры // ПеретаскиваниеОтменить()

#КонецЕсли
