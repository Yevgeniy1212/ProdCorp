
// Возвращает текст надписи "Цены и валюта".
//
// Параметры:
//  ДанныеДокумента - Структура, ДанныеФормыСтруктура - Структура реквизитов, 
//   по которым будет формироваться текст надписи "Цены и валюта".
//
// Возвращаемое значение:
//  Строка - Текст надписи "Цены и валюта". 
//
// Пример:
//  ЦеныИВалюта = фин_ОбщегоНазначенияКлиентСервер.СформироватьНадписьЦеныИВалюта(ЭтаФорма.Объект);
//
Функция СформироватьНадписьЦеныИВалюта(ДанныеДокумента) Экспорт
	
	ТекстНадписи = "";
	
	ВалютаУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	Если ДанныеДокумента.Свойство("ВалютаДокумента") Тогда 	
		Если ЗначениеЗаполнено(ДанныеДокумента.ВалютаДокумента) Тогда
			Если ДанныеДокумента.ВалютаДокумента = ВалютаУчета Тогда
				ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1,'"), ДанныеДокумента.ВалютаДокумента);	
			ИначеЕсли ДанныеДокумента.Свойство("КурсВзаиморасчетов") // не во всех документах есть курс и кратность взаиморасчетов
				И ДанныеДокумента.Свойство("КратностьВзаиморасчетов") Тогда
				ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 %2 = %3 %4,'"),
					ДанныеДокумента.КратностьВзаиморасчетов,
					ДанныеДокумента.ВалютаДокумента,
					ДанныеДокумента.КурсВзаиморасчетов,
					ВалютаУчета);
			ИначеЕсли ДанныеДокумента.Свойство("КурсДокумента") // в документах где нет курса и кратности взаиморасчетов заполним надпись по курсу и кратности документа
				И ДанныеДокумента.Свойство("КратностьДокумента") Тогда
				ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 %2 = %3 %4,'"),
					ДанныеДокумента.КратностьДокумента,
					ДанныеДокумента.ВалютаДокумента,
					ДанныеДокумента.КурсДокумента,
					ВалютаУчета);
			Иначе 
				ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1,'"), ДанныеДокумента.ВалютаДокумента);
			КонецЕсли;
		Иначе
			ТекстНадписи = НСтр("ru = 'Валюта: <нет>,'");	
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеДокумента.Свойство("ТипЦен") Тогда
		ТекстНадписи = ТекстНадписи + ?(ПустаяСтрока(ТекстНадписи), "", Символы.ПС);
		Если ЗначениеЗаполнено(ДанныеДокумента.ТипЦен) Тогда
			ТекстНадписи = ТекстНадписи + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Тип цен: %1,'"), ДанныеДокумента.ТипЦен);				
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = 'Тип цен: <не указан>,'");	
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеДокумента.Свойство("УчитыватьНДС") Тогда
		ТекстНадписи = ТекстНадписи + ?(ПустаяСтрока(ТекстНадписи), "", Символы.ПС);
		Если ДанныеДокумента.УчитыватьНДС Тогда
			Если ДанныеДокумента.Свойство("СуммаВключаетНДС") Тогда
				ТекстВключениеНДС = ?(ДанныеДокумента.СуммаВключаетНДС,
					НСтр("ru = 'в т.ч.'"),
					НСтр("ru = 'сверху'"));
				ТекстНадписи = ТекстНадписи + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'НДС (%1),'"), ТекстВключениеНДС);
			Иначе
				ТекстНадписи = ТекстНадписи + НСтр("ru = 'НДС,'");
			КонецЕсли;
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = 'Не учитывать НДС,'");	
		КонецЕсли;		
	КонецЕсли;
	
	Если ДанныеДокумента.Свойство("УчитыватьАкциз") И ДанныеДокумента.УчитыватьАкциз Тогда
		ТекстНадписи = ТекстНадписи + ?(ПустаяСтрока(ТекстНадписи), "", Символы.ПС);
		ТекстВключениеАкциза = ?(ДанныеДокумента.СуммаВключаетАкциз,
			НСтр("ru = 'в т.ч.'"),
			НСтр("ru = 'сверху'"));
		ТекстНадписи = ТекстНадписи + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Акциз (%1),'"), ТекстВключениеАкциза);
	КонецЕсли;
		
	ТекстНадписи = ?(ПустаяСтрока(ТекстНадписи), "", Сред(ТекстНадписи, 1, СтрДлина(ТекстНадписи) - 1));
	
	Возврат ТекстНадписи;
	
КонецФункции

// Определяет в форме документа первую страницу с максимальным
// количеством строк в табличной части.
// Проверяется также видимость элемента.
// Если количество строк в табличных частях одинаково,
// то функция вернет имя первой табличной части из СписокТабличныхПолей. 
//
// Параметры:
//   Форма                - форма документа, который открывается;
//   СписокТабличныхПолей - Список значений - табличных полей, где
//                            Значение - имя элемента формы,
//                            Представление - имя табличной части (в метаданных)
//
Функция ПолучитьТекущуюВидимуюТабличнуюЧасть(Форма, СписокТабличныхПолей) Экспорт
	
	Если СписокТабличныхПолей.Количество() > 0 Тогда
		МаксКоличествоСтрок = 0;
		ИмяТабличнойЧасти   = "";
		Для Каждого Элемент из СписокТабличныхПолей Цикл
			Если Форма.Элементы[Элемент.Значение].Видимость Тогда
				ИмяТабличнойЧасти       = ?(ИмяТабличнойЧасти = "", Элемент.Значение, ИмяТабличнойЧасти);
				КоличествоСтрокТабЧасти = Форма.Объект[Элемент.Представление].Количество();
				Если КоличествоСтрокТабЧасти > МаксКоличествоСтрок Тогда
					МаксКоличествоСтрок = КоличествоСтрокТабЧасти;
					ИмяТабличнойЧасти   = Элемент.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Возврат ИмяТабличнойЧасти;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция НайтиСтрокуТабЧасти(Объект, ТабличнаяЧасть, СтруктураОтбора) Экспорт

	СтрокаТабличнойЧасти = Неопределено;
	МассивНайденныхСтрок = Объект[ТабличнаяЧасть].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда

		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

// Процедура возвращает информацию по курсу валюты в виде строки
//
// Параметры: 
//  Валюта                         - Валюта, курс которой необходимо отобразить
//  Курс                           - курс, которой необходимо отобразить
//  Кратность                      - кратность, которую необходимо отобразить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СформироватьСкобки             - признак необходимости скобок
//
// Возвращаемое значение:
//  Строка с данными о курсе и кратности валюты
//
Функция ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, Курс, Кратность, ВалютаРегламентированногоУчета, 
												СформироватьСкобки = Ложь) Экспорт

	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Возврат "";

	Иначе
		Возврат ?(СформироватьСкобки, "   ( ", "") + Кратность + " "
			  + СокрЛП(Валюта)
			  + " = "
			  + Курс + " " 
			  + СокрЛП(ВалютаРегламентированногоУчета)
			  + ?(СформироватьСкобки, " )", "");
	КонецЕсли;

КонецФункции

// Функция возвращает дату как месяц в виде строки
//
Функция ДатаКакМесяцПредставление(ДатаДата) Экспорт
	
	Возврат Формат(ДатаДата, "ДФ='ММММ гггг'");
	
КонецФункции // ДатаКакМесяцПредставление()

// Эта функция пересчитывает сумму из валюты ВалютаНач по курсу ПоКурсуНач 
// в валюту ВалютаКон по курсу ПоКурсуКон
//
// Параметры:      
//	Сумма          - сумма, которую следует пересчитать;
//	ВалютаНач      - ссылка на элемент справочника Валют;
//                   определяет валюты из которой надо пересчитвать;
//	ВалютаКон      - ссылка на элемент справочника Валют;
//                   определяет валюты в которую надо пересчитвать;
// 	ПоКурсуНач     - курс из которого надо пересчитать;
// 	ПоКурсуКон     - курс в который надо пересчитать;
// 	ПоКратностьНач - кратность из которого надо пересчитать (по умолчанию = 1);
// 	ПоКратностьКон - кратность в который надо пересчитать  (по умолчанию = 1);
//
// Возвращаемое значение: 
//  Сумма, пересчитанная в другую валюту
//
Функция ПересчитатьИзВалютыВВалюту(Сумма, ВалютаНач, ВалютаКон, ПоКурсуНач, ПоКурсуКон, 
								   ПоКратностьНач = 1, ПоКратностьКон = 1 ) Экспорт

	Если (ВалютаНач = ВалютаКон) Тогда

		// Считаем, что пересчет не нужен.
		Возврат Сумма;

	КонецЕсли;

	Если (ПоКурсуНач     = ПоКурсуКон) 
	   И (ПоКратностьНач = ПоКратностьКон) Тогда

		// ну, тут и считать нечего...
		Возврат Сумма;

	КонецЕсли;
	
	// Проверка установки значений
	ПризнакОшибки = Ложь;
	Если ПоКурсуНач     = 0  Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При пересчете валютных сумм обнаружен нулевой курс валюты: " + СокрЛП(ВалютаНач));
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если ПоКурсуКон     = 0  Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При пересчете валютных сумм обнаружен нулевой курс валюты: " + СокрЛП(ВалютаКон));
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если ПоКратностьНач = 0  Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При пересчете валютных сумм обнаружена нулевая кратность валюты: " + СокрЛП(ВалютаНач));
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если ПоКратностьКон = 0  Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При пересчете валютных сумм обнаружена нулевая кратность валюты: " + СокрЛП(ВалютаКон));
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если ПризнакОшибки Тогда
		Возврат 0;          
	КонецЕсли;

	Возврат Окр((Сумма * ПоКурсуНач * ПоКратностьКон) / (ПоКурсуКон * ПоКратностьНач), 2);

КонецФункции // ПересчитатьИзВалютыВВалюту()

// Создает массив и копирует в него значения, содержащиеся в колонке коллекции строк.
//
// Параметры:
//	КоллекцияСтрок - коллекция, для которой доступен обход посредством  
//		оператора Для каждого … Из … Цикл.
//	ИмяКолонки - строка с именем поля коллекции, значения которого нужно выгрузить.
//	ТолькоУникальныеЗначения - булево, необязательный, если истина, 
//		то в массив будут включены только различающиеся значения.
//
Функция ВыгрузитьКолонку(КоллекцияСтрок, ИмяКолонки, ТолькоУникальныеЗначения = Ложь) Экспорт

	МассивЗначений = Новый Массив;
	
	УникальныеЗначения = Новый Соответствие;
	
	Для каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		Значение = СтрокаКоллекции[ИмяКолонки];
		Если ТолькоУникальныеЗначения И УникальныеЗначения[Значение] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивЗначений.Добавить(Значение);
		УникальныеЗначения.Вставить(Значение, Истина);
	КонецЦикла; 
	
	Возврат МассивЗначений;
	
КонецФункции

// Добавить или заменить существующий элемент отбора динамического списка.
//
// Параметры:
//   ДинамическийСписок - ДинамическийСписок - Список, в котором требуется установить отбор.
//   ИмяПоля            - Строка - Поле, по которому необходимо установить отбор.
//   ПравоеЗначение     - Произвольный - Значение отбора.
//       Необязательный. Значение по умолчанию: Неопределено.
//       Внимание! Если передать Неопределено, то значение не будет изменено.
//   ВидСравнения  - ВидСравненияКомпоновкиДанных - Условие отбора.
//   Представление - Строка - Представление элемента компоновки данных.
//       Необязательный. Значение по умолчанию: Неопределено.
//       Если указано, то выводится только флажок использования с указанным представлением (значение не выводится).
//       Для очистки (чтобы значение снова выводилось) следует передать пустую строку.
//   Использование - Булево - Флажок использования этого отбора.
//       Необязательный. Значение по умолчанию: Неопределено.
//   РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - Способ отображения этого отбора
//                                                                          пользователю.
//       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ - В группе быстрых настроек над списком.
//       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный       - В настройка списка (в подменю Еще).
//       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный   - Запретить пользователю менять этот отбор.
//   ИдентификаторПользовательскойНастройки - Строка - Уникальный идентификатор этого отбора.
//       Используется для связи с пользовательскими настройками.
//
// См. также:
//   Одноименные свойства объекта "ЭлементОтбораКомпоновкиДанных" в синтакс-помощнике.
//
Процедура УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля,
	ПравоеЗначение = Неопределено,
	ВидСравнения = Неопределено,
	Представление = Неопределено,
	Использование = Неопределено,
	РежимОтображения = Неопределено,
	ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Если РежимОтображения = Неопределено Тогда
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
	Если РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		ОтборДинамическогоСписка = ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	Иначе
		ОтборДинамическогоСписка = ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор;
	КонецЕсли;
	
	Если ИдентификаторПользовательскойНастройки = Неопределено Тогда
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ОтборДинамическогоСписка,
		ИмяПоля,
		ПравоеЗначение,
		ВидСравнения,
		Представление,
		Использование,
		РежимОтображения);
	Иначе
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ОтборДинамическогоСписка,
		ИмяПоля,
		ПравоеЗначение,
		ВидСравнения,
		Представление,
		Использование,
		РежимОтображения,
		ИдентификаторПользовательскойНастройки);
	КонецЕсли;	
КонецПроцедуры

Функция РезультатИзмененияПоказателя(ИсходноеЗначение,ДействиеНадПоказателем,ВеличинаИзменения) Экспорт
	Результат = ИсходноеЗначение;
	Если ДействиеНадПоказателем=ПредопределенноеЗначение("Перечисление.фин_ДействияНадПоказателем.УвеличитьНаПроцент") Тогда
		Результат = ИсходноеЗначение * (1+ВеличинаИзменения/100);
	ИначеЕсли ДействиеНадПоказателем=ПредопределенноеЗначение("Перечисление.фин_ДействияНадПоказателем.УменьшитьНаПроцент") Тогда
		Результат = ИсходноеЗначение * (1-ВеличинаИзменения/100);
	ИначеЕсли ДействиеНадПоказателем=ПредопределенноеЗначение("Перечисление.фин_ДействияНадПоказателем.УвеличитьНаЗначение") Тогда
		Результат = ИсходноеЗначение + ВеличинаИзменения;
	ИначеЕсли ДействиеНадПоказателем=ПредопределенноеЗначение("Перечисление.фин_ДействияНадПоказателем.УменьшитьНаЗначение") Тогда
		Результат = ИсходноеЗначение - ВеличинаИзменения;
	ИначеЕсли ДействиеНадПоказателем=ПредопределенноеЗначение("Перечисление.фин_ДействияНадПоказателем.УмножитьНаКоэффициент") Тогда
		Результат = ИсходноеЗначение * ВеличинаИзменения;
	ИначеЕсли ДействиеНадПоказателем=ПредопределенноеЗначение("Перечисление.фин_ДействияНадПоказателем.ОкруглитьДоЗнаковПослеЗапятой") Тогда
		Результат = Окр(ИсходноеЗначение , ВеличинаИзменения);
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ПредставлениеСрокаИсполнения(Длительность,ВидСрока) Экспорт
	СтруктураЗамены = Новый Структура;
	Если Длительность > 20 Тогда
		СрокСтрокой = Формат(Длительность,"ЧГ=");
		ПоследняяЦифра = Число(Прав(СрокСтрокой,1));
		ПоследниеДвеЦифры = Число(Прав(СрокСтрокой,2));
	Иначе
		ПоследняяЦифра 		= 0;
		ПоследниеДвеЦифры 	= 0;
	КонецЕсли;
	Если Длительность = 0 Тогда
		// ничего не делаем
	ИначеЕсли Длительность = 1 ИЛИ (Длительность>20 И ПоследняяЦифра=1 И ПоследниеДвеЦифры<>11) Тогда
		СтруктураЗамены.Вставить("дней","день");
		СтруктураЗамены.Вставить("часов","час");
		СтруктураЗамены.Вставить("минут","минута");
	ИначеЕсли (Длительность >=2 И Длительность <= 4) ИЛИ (Длительность>20 И ПоследняяЦифра >=2 И ПоследняяЦифра <= 4) Тогда
		СтруктураЗамены.Вставить("дней","дня");
		СтруктураЗамены.Вставить("часов","часа");
		СтруктураЗамены.Вставить("минут","минуты");
	КонецЕсли;
	ВидСрокаТекст = НРег(ВидСрока);
	Для Каждого ЭлементСтруктуры Из СтруктураЗамены Цикл
		ВидСрокаТекст = СтрЗаменить(ВидСрокаТекст,ЭлементСтруктуры.Ключ,ЭлементСтруктуры.Значение);
	КонецЦикла;
	Возврат Строка(Длительность)+" "+ВидСрокаТекст;
КонецФункции

Функция ПредставлениеСпособаЦенообразования(СтрокаДерева,Многострочный = Ложь) Экспорт
	Текст = "";
	Если СтрокаДерева.УчетПоСумме=Ложь ИЛИ СтрокаДерева.УчетПоКоличеству=Ложь Тогда
		Возврат "";
	ИначеЕсли СтрокаДерева.СпособЦенообразования = ПредопределенноеЗначение("Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоДаннымИсточникаРасчетов") Тогда
		Текст = "По источнику: "+Строка(СтрокаДерева.ИсточникДанныхДляЦены);
	ИначеЕсли СтрокаДерева.СпособЦенообразования = ПредопределенноеЗначение("Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоПрогнознымЦенамНоменклатуры") Тогда
		Текст = "По плановым ценам: "+Строка(СтрокаДерева.ИспользуемыйТипЦен);
	ИначеЕсли СтрокаДерева.СпособЦенообразования = ПредопределенноеЗначение("Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоБухгалтерскимЦенамНоменклатуры") Тогда
		Текст = "По бух. ценам: "+Строка(СтрокаДерева.ИспользуемыйТипЦен);
	Иначе
		Текст = Строка(СтрокаДерева.СпособЦенообразования);
	КонецЕсли;
	Возврат ?(Многострочный И Текст = "","ценообразование не настроено",Текст);
КонецФункции

Функция ПредставлениеНастроекИтогов(СтрокаДерева,Многострочный = Ложь) Экспорт
	ИтоговаяФункция = ?(ЗначениеЗаполнено(СтрокаДерева.ИтоговаяФункция),СтрокаДерева.ИтоговаяФункция,ПредопределенноеЗначение("Перечисление.фин_ИтоговыеФункции.Сумма"));
	
	Текст = Строка(ИтоговаяФункция);
	
	Если СтрокаДерева.ИсключитьИзИтогов  Тогда
		Текст = Текст + ?(Многострочный,Символы.Таб,"; ")+"Исключена из итогов по группам";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДерева.ПризнакВнутригрупповогоОборота)  Тогда
		Текст = Текст + ?(Многострочный,Символы.Таб,"; ")+"Уровень элиминации: "+Строка(СтрокаДерева.ПризнакВнутригрупповогоОборота);
	КонецЕсли;
	Возврат Текст;
КонецФункции

Функция ПредставлениеНастроекРасчетов(СтрокаДерева,Многострочный = Ложь,ВидСтрокиБюджета=Неопределено) Экспорт
	ЭтоГруппа 		= СтрокаДерева.ЭтоГруппа;
	Текст = "";
	//Текст0 = "";
	Если НЕ ЭтоГруппа Тогда
		ВидПоказателя 	= ?(ЗначениеЗаполнено(СтрокаДерева.ВидПоказателя),СтрокаДерева.ВидПоказателя,ПредопределенноеЗначение("Перечисление.фин_ВидыФинансовыхПоказателей.Оборотный"));
		//Если Многострочный И ВидПоказателя = ПредопределенноеЗначение("Перечисление.фин_ВидыФинансовыхПоказателей.Оборотный") Тогда
		Текст = ?((ЭтоСтрокаДерева(СтрокаДерева) ИЛИ (ТипЗнч(СтрокаДерева)=Тип("ДанныеФормыСтруктура") И СтрокаДерева.Свойство("ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения"))) И СтрокаДерева.ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения,"Начальное заполнение: ","") 
					+ ?(ЭтоСтрокаДерева(СтрокаДерева) ИЛИ (ТипЗнч(СтрокаДерева)=Тип("ДанныеФормыСтруктура") И СтрокаДерева.Свойство("ВидСтрокиБюджета")),Строка(СтрокаДерева.ВидСтрокиБюджета),Строка(ВидСтрокиБюджета));
		//КонецЕсли;
	КонецЕсли;
	//ЕстьФормулы = Ложь;
	Если (ЭтоГруппа ИЛИ СтрокаДерева.УчетПоСумме) И ЗначениеЗаполнено(СтрокаДерева.Формула) И НЕ (СтрокаДерева.ПоРасценкам И СтрокаДерева.УчетПоКоличеству) Тогда
		//Текст0 = Текст0 + ?(Текст0="","",",")+"Сумма";
		СтрокаФормула = Строка(СтрокаДерева.Формула);
		Текст = Текст + ?(Многострочный,Символы.ПС,?(Текст="","","; "))+"Расчет суммы: <"+?(СтрДлина(СтрокаФормула)>50 И НЕ Многострочный,Лев(СтрокаФормула,50)+"...",СтрокаФормула)+">";
		//ЕстьФормулы = Истина;
	КонецЕсли;
	Если (ЭтоГруппа ИЛИ СтрокаДерева.УчетПоКоличеству) И ЗначениеЗаполнено(СтрокаДерева.ФормулаКоличество) Тогда
		//Текст0 = Текст0 + ?(Текст0="","",",")+"Количество";
		СтрокаФормула = Строка(СтрокаДерева.ФормулаКоличество);
		Текст = Текст + ?(Многострочный,Символы.ПС,?(Текст="","","; "))+"Расчет количества: <"+?(СтрДлина(СтрокаФормула)>50 И НЕ Многострочный,Лев(СтрокаФормула,50)+"...",СтрокаФормула)+">";
		//ЕстьФормулы = Истина;
	КонецЕсли;
	Если (ЭтоГруппа ИЛИ (СтрокаДерева.УчетПоСумме И СтрокаДерева.УчетПоКоличеству)) И ЗначениеЗаполнено(СтрокаДерева.ФормулаКоличество) И СтрокаДерева.ПоРасценкам Тогда
		Текст = Текст + ?(Многострочный,Символы.ПС,?(Текст="","","; "))+"Расчет суммы - по расценкам, заданным для показателя";
	КонецЕсли;
	//Если ЕстьФормулы Тогда
	//	Текст = Текст0 + " по формуле "+?(Многострочный,Символы.ПС,";") +Текст+?(Многострочный,Символы.ПС,"")+" (расчет "+?(СтрокаДерева.ТолькоДляПлановыхДанных,"только при планировании","при планировании и при расчете фактических данных")+")";
	//КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаДерева.ПризнакПеретекающегоОстатка) Тогда
		Текст = Текст + ?(Многострочный,Символы.ПС,?(Текст="","","; "))+"Является показателем перетекающего остатка: "+Строка(СтрокаДерева.ПризнакПеретекающегоОстатка);
	КонецЕсли;
	Если НЕ ЭтоГруппа Тогда
		Если (ЭтоСтрокаДерева(СтрокаДерева) ИЛИ (ТипЗнч(СтрокаДерева)=Тип("ДанныеФормыСтруктура") И СтрокаДерева.Свойство("ЧастотаВыполненияРасчетовПоФормулам"))) И ЗначениеЗаполнено(СтрокаДерева.ЧастотаВыполненияРасчетовПоФормулам) Тогда
			Текст = Текст + ?(Многострочный,Символы.ПС,?(Текст="","","; "))+"Расчет производится: "+Строка(СтрокаДерева.ЧастотаВыполненияРасчетовПоФормулам)+?(СтрокаДерева.ЧастотаВыполненияРасчетовПоФормулам=ПредопределенноеЗначение("Перечисление.фин_ЧастотаВыполненияРасчетов.СУказаннойПериодичностью"),": "+Строка(СтрокаДерева.ПериодичностьВыполненияРасчетов),"");
		КонецЕсли;
	КонецЕсли;
	Если СтрокаДерева.ОтносительныйПоказатель Тогда
		Текст = Текст + ?(Многострочный,Символы.ПС,?(Текст="","","; "))+"Является относительным показателем (выражение в валюте управленческого учета не пересчитывается и принимается с таким же значением)";
	КонецЕсли;
	Если НЕ ЭтоГруппа Тогда
		Если Многострочный И ВидПоказателя = ПредопределенноеЗначение("Перечисление.фин_ВидыФинансовыхПоказателей.Рассчитываемый") И Текст = "" Тогда
			Текст = "Рассчитываемый";
		КонецЕсли;
	КонецЕсли;
	Возврат Текст;
КонецФункции

Функция ЭтоСтрокаДерева(СтрокаДерева)
	Если ТипЗнч(СтрокаДерева)=Тип("ДанныеформыЭлементДерева") Тогда
		Возврат Истина;
	КонецЕсли;
	#Если НЕ (ТонкийКлиент ИЛИ ВебКлиент) Тогда
	Если ТипЗнч(СтрокаДерева)=Тип("СтрокаДереваЗначений") Тогда
		Возврат Истина;
	КонецЕсли;
	#КонецЕсли
	Возврат Ложь;
КонецФункции

Функция ПредставлениеПериодаРасчета(СтрокаДанных) Экспорт
	Если СтрокаДанных.ПериодСбораДанных = ПредопределенноеЗначение("Перечисление.ден_СпособыОпределенияПериодов.ПланируемыйПериод") Тогда
		Возврат "Планируемый период";	
	ИначеЕсли СтрокаДанных.ПериодСбораДанных = ПредопределенноеЗначение("Перечисление.ден_СпособыОпределенияПериодов.БюджетныйПериод") Тогда
		Возврат "Бюджетный период";	
	ИначеЕсли СтрокаДанных.ПериодСбораДанных = ПредопределенноеЗначение("Перечисление.ден_СпособыОпределенияПериодов.ИсторическиеДанные") Тогда
		Возврат "Исторические данные"+?(ЗначениеЗаполнено(СтрокаДанных.Периодичность)," за "+НРег(Строка(СтрокаДанных.Периодичность)),"");	
	ИначеЕсли СтрокаДанных.ПериодСбораДанных = ПредопределенноеЗначение("Перечисление.ден_СпособыОпределенияПериодов.ИсторическиеДанныеСНакоплением") Тогда
		Возврат "Исторические данные"+?(ЗначениеЗаполнено(СтрокаДанных.Периодичность)," за "+НРег(Строка(СтрокаДанных.Периодичность)),"")+" с накоплением в течение бюджетного периода";	
	ИначеЕсли СтрокаДанных.ПериодСбораДанных = ПредопределенноеЗначение("Перечисление.ден_СпособыОпределенияПериодов.ПланируемыйПериодСНакоплением") Тогда
		Возврат "Планируемый период с накоплением"+?(ЗначениеЗаполнено(СтрокаДанных.Периодичность)," за "+НРег(Строка(СтрокаДанных.Периодичность)),"");	
	ИначеЕсли СтрокаДанных.ПериодСбораДанных = ПредопределенноеЗначение("Перечисление.ден_СпособыОпределенияПериодов.ПредшествующийПериод") Тогда
		Возврат "Предшествующий "+?(ЗначениеЗаполнено(СтрокаДанных.Периодичность),НРег(Строка(СтрокаДанных.Периодичность)),"период")+?(СтрокаДанных.Лаг>1,", лаг: "+Строка(СтрокаДанных.Лаг),"");	
	ИначеЕсли СтрокаДанных.ПериодСбораДанных = ПредопределенноеЗначение("Перечисление.ден_СпособыОпределенияПериодов.Произвольный") Тогда
		Возврат "С "+Формат(СтрокаДанных.НачалоПериода,"ДЛФ=DD; ДП=-")+" по "+Формат(СтрокаДанных.КонецПериода,"ДЛФ=DD; ДП=-");	
	Иначе
		Возврат "<неопределен>";
	КонецЕсли;
КонецФункции

Функция ПредставлениеСпособаИспользованияПравила(СтрокаДанных) Экспорт
	Возврат Строка(СтрокаДанных.СпособИспользования)+?(СтрокаДанных.СпособИспользования=ПредопределенноеЗначение("Перечисление.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ВсегдаЕслиУдовлетворяетУсловию") ИЛИ СтрокаДанных.СпособИспользования=ПредопределенноеЗначение("Перечисление.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиУдовлетворяетУсловию"),": "+?(ЗначениеЗаполнено(СтрокаДанных.Условие),СтрокаДанных.Условие,"<не настроено>"),"")+", порядок применения: "+Строка(СтрокаДанных.Порядок);
КонецФункции

Процедура ЗаполнитьПредставлениеСтрокиНастройкиСоответствий(ТекущиеДанные) Экспорт
	ТекущиеДанные.ПредставлениеНастройки = ?(ТекущиеДанные.ФиксированноеЗначение,"Фиксированное значение: "+строка(ТекущиеДанные.Значение),"Поле: "+ТекущиеДанные.РеквизитЗаполненияПоказателя)+?(ТекущиеДанные.Трансформация,", промежуточное преобразование: "+Строка(ТекущиеДанные.ВариантДляТрансформации),"");	
КонецПроцедуры

Функция ПредставлениеТаблицыДанныхПравила(СтрокаДанных) Экспорт
	Возврат Строка(СтрокаДанных.ВидДанных)+?(СтрокаДанных.ВидДанных=ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента"),"",": "+СтрокаДанных.ПредставлениеИсточника+" ("+СтрокаДанных.ИмяИсточника+")");
КонецФункции

Функция ПолучитьПредставлениеПолученияФактическихДанных(Поле,Объект,ЭтоРегистр=Ложь) Экспорт
	ТипИсточника = Объект[Поле+"ТипИсточника"];
	Источник = Объект[Поле+"Источник"];
	Если НЕ ЗначениеЗаполнено(Источник) Тогда
		Возврат "";
	ИначеЕсли ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ФиксированноеЗначение") Тогда
		Возврат Строка(Источник);
	ИначеЕсли ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента") Тогда
		Возврат "Поле шапки: "+"["+Строка(Источник)+"]";
	ИначеЕсли ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения") Тогда
		Возврат ?(ЭтоРегистр,"Поле записи: ","Поле таб. части/набора движений: ")+"["+Строка(Источник)+"]";
	ИначеЕсли ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования") Тогда
		Возврат "Доп. реквизиты бюджетирования: "+Строка(Источник);
	ИначеЕсли ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие") Тогда
		Возврат "Настраиваемое соответствие: "+Строка(Источник);
	ИначеЕсли ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие") Тогда
		Возврат "Стандартное соответствие полю: "+Строка(Источник);
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Процедура УстановитьЦенуВДинамическойКолонке(КоллекцияДанныхФормы) Экспорт
	Для Каждого СтрокаТЧ Из КоллекцияДанныхФормы Цикл
		 СтрокаТЧ.Цена = ?(СтрокаТЧ.Количество<>0,СтрокаТЧ.Сумма/СтрокаТЧ.Количество,0);
	КонецЦикла;
КонецПроцедуры

Функция ИмяОбъектаИБ(Имя) Экспорт
	
	МассивПереопределяемых = Новый Массив;
	МассивПереопределяемых.Добавить("УстановкаДолейРаспределенияПоПроектам");
	МассивПереопределяемых.Добавить("Проекты");
	МассивПереопределяемых.Добавить("ВидыРаспределенияПоПроектам");
	МассивПереопределяемых.Добавить("Подразделения");
	МассивПереопределяемых.Добавить("СценарииПланирования");
	МассивПереопределяемых.Добавить("ЯзыкиНародовМира");
	МассивПереопределяемых.Добавить("КурсыВалютПоСценариям");
	МассивПереопределяемых.Добавить("СоответствиеПодразделенийИПодразделенийОрганизаций");
	МассивПереопределяемых.Добавить("УстановкаВидовРаспределенияДляСтатейДДС");
	МассивПереопределяемых.Добавить("ВалютаУправленческогоУчета");
	МассивПереопределяемых.Добавить("ДетализацияПланирования");
	МассивПереопределяемых.Добавить("СостоянияОбъектов");
	Если МассивПереопределяемых.Найти(Имя)<>Неопределено Тогда
		Если Имя="Проекты" Тогда
			ФинальнаяСтрока = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПроектов();
		ИначеЕсли Имя = "Подразделения" Тогда
			ФинальнаяСтрока = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений();
		Иначе
			ФинальнаяСтрока = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+Имя;
		КонецЕсли;
		Возврат ФинальнаяСтрока;
	Иначе
		Возврат Имя;
	КонецЕсли;
	
КонецФункции


Функция ИмяОбъектаКроссплатформенное(Имя) Экспорт
	
	МассивПереопределяемых = Новый Массив;
	МассивПереопределяемых.Добавить("УстановкаДолейРаспределенияПоПроектам");
	МассивПереопределяемых.Добавить("Проекты");
	МассивПереопределяемых.Добавить("ВидыРаспределенияПоПроектам");
	МассивПереопределяемых.Добавить("Подразделения");
	МассивПереопределяемых.Добавить("СценарииПланирования");
	МассивПереопределяемых.Добавить("ЯзыкиНародовМира");
	МассивПереопределяемых.Добавить("КурсыВалютПоСценариям");
	МассивПереопределяемых.Добавить("СоответствиеПодразделенийИПодразделенийОрганизаций");
	МассивПереопределяемых.Добавить("УстановкаВидовРаспределенияДляСтатейДДС");
	МассивПереопределяемых.Добавить("ВалютаУправленческогоУчета");
	МассивПереопределяемых.Добавить("ДетализацияПланирования");
	МассивПереопределяемых.Добавить("СостоянияОбъектов");
	Если МассивПереопределяемых.Найти(Имя)<>Неопределено Тогда
		Если Имя=фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПроектов() Тогда
			ФинальнаяСтрока = "Проекты";
		ИначеЕсли Имя = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений() Тогда
			ФинальнаяСтрока = "Подразделения";
		Иначе
			ФинальнаяСтрока = СтрЗаменить(Имя,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов(),"");
		КонецЕсли;
		Возврат ФинальнаяСтрока;
	Иначе
		Возврат Имя;
	КонецЕсли;
	
КонецФункции