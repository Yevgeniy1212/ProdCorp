
// Проверяет, что у текущего пользователя установлена какая-либо роль, 
//  кроме самодостаточных ролей (не предусматривающих совместное использование)
//
Функция РолиТекущегоПользователяНастроеныПравильно(РольТребуетЗаполненияФизлица = Ложь) Экспорт
	
	// В данной конфигурации дополнительных проверок не требуется	
	Возврат Истина;
	
КонецФункции

Функция РолиТребуютПользователя() Экспорт
	
	// роль Пользователь требуют все роли, исключение составляет ТолькоПросмотр
	НеТребуютРольПользователь = Новый Массив;
	НеТребуютРольПользователь.Добавить(Метаданные.Роли.ТолькоПросмотр);
	
	МассивРолей = Новый Массив;
	Для Каждого МетаданныеРоли Из Метаданные.Роли Цикл
		Если НеТребуютРольПользователь.Найти(МетаданныеРоли) = Неопределено Тогда
			МассивРолей.Добавить(МетаданныеРоли);
		КонецЕсли;
	КонецЦикла;

	Возврат МассивРолей;
	
КонецФункции

Функция ПолучитьСписокРолейПользователя() Экспорт
	
	СписокРолейПользователя = Новый Массив;
	
	РолиПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Роли;
	Для Каждого РольПользователя Из РолиПользователя Цикл
		СписокРолейПользователя.Добавить(РольПользователя.Имя);
	КонецЦикла;
	
	Возврат СписокРолейПользователя;
	
КонецФункции

Функция ПолучитьСписокРолейКонфигурации() Экспорт
	
	СписокРолей = Новый Соответствие;
	
	РолиКонфигурации = Метаданные.Роли;
	Для Каждого РольКонфигурации Из РолиКонфигурации Цикл
		СписокРолей.Вставить(РольКонфигурации.Имя, РольКонфигурации.Представление());
	КонецЦикла;
	
	Возврат СписокРолей;
	
КонецФункции

// Функция составляет пароль из латинских символов с помощью генератора случайных чисел
//
Функция СлучайныйПароль(ДлинаПароля = 8) Экспорт
	
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел;

	Пароль = "";
	Для НомерСимвола = 1 По ДлинаПароля Цикл
		Пароль = Пароль + Символ(ГенераторСлучайныхЧисел.СлучайноеЧисло(97, 122));
	КонецЦикла;
	
	Возврат Пароль;
	
КонецФункции // СлучайныйПароль

// Функция устанавливает случайный пароль пользователю ИБ и возвращает его значение
//
Функция ПарольПользователяИБ(ИмяПользователяИБ, УстанавливатьЕслиНеУстановлен = Ложь) Экспорт
	
	ПарольПользователя = Неопределено;
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
	
	Если ПользовательИБ <> Неопределено Тогда
		Если ПользовательИБ.ПарольУстановлен ИЛИ УстанавливатьЕслиНеУстановлен Тогда
			ПарольПользователя = СлучайныйПароль();
			ПользовательИБ.Пароль = ПарольПользователя;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ПользовательИБ.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить пароль пользователя ИБ " + ПользовательИБ.Имя + " по причине " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ПарольПользователя;
	
КонецФункции // ПарольПользователяИБ

// Функция создает элемент справочника Пользователи и пользователя информационной базы
//  в соответствии с переданными параметрами
//
Функция СоздатьПользователя(Имя, Роли, ПолноеИмя = "", Физлицо = Неопределено, ПользовательИБ = Неопределено, 
								Пароль = Неопределено, ГруппаПользователя = Неопределено, ГруппыДоступа = Неопределено, 
								ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПустаяСтрока(ПолноеИмя) Тогда
		ПолноеИмя = Имя;
	КонецЕсли;
	
	// создание пользователя (в справочнике пользователей)
	ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();
	
	ПользовательОбъект.Код          = Имя;
	ПользовательОбъект.Наименование = ПолноеИмя;
	ПользовательОбъект.ФизЛицо		= Физлицо;
	ПользовательОбъект.Родитель 	= ГруппаПользователя;
	
	Попытка
		ПользовательОбъект.Записать();
		ПолныеПрава.ЗаписатьНастройкиПоУмолчаниюНовогоПользователя(ПользовательОбъект.Ссылка);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось создать пользователя " + Имя + " по причине " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;

	Если ГруппыДоступа <> Неопределено Тогда
		Для Каждого ГруппаДоступа Из ГруппыДоступа Цикл
			ГруппаДоступаОбъект = ГруппаДоступа.ПолучитьОбъект();
			Если ГруппаДоступаОбъект.ПользователиГруппы.Найти(ПользовательОбъект.Ссылка, "Пользователь") = Неопределено Тогда
				ГруппаДоступаОбъект.ПользователиГруппы.Добавить().Пользователь = ПользовательОбъект.Ссылка;
				ГруппаДоступаОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// создание пользователя ИБ
	ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
	
	ПользовательИБ.Имя 			= Имя;
	ПользовательИБ.ПолноеИмя 	= ПолноеИмя;
	
	// параметры по умолчанию
	ПользовательИБ.АутентификацияОС				= Ложь;
	ПользовательИБ.АутентификацияСтандартная 	= Истина;
	ПользовательИБ.ЗапрещеноИзменятьПароль		= Ложь;
	ПользовательИБ.ПоказыватьВСпискеВыбора		= Истина;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПользовательИБ, ДополнительныеПараметры);
	КонецЕсли;
	
	// назначаем роли
	Если ТипЗнч(Роли) = Тип("Строка") Тогда
		НазначаемыеРоли = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Роли);
	Иначе
		НазначаемыеРоли = Роли;
	КонецЕсли;
	
	Для Каждого Роль Из НазначаемыеРоли Цикл
		Если ТипЗнч(Роль) = Тип("Строка") Тогда
			НазначаемаяРоль = Метаданные.Роли[Роль];
		Иначе
			НазначаемаяРоль = Роль;
		КонецЕсли;
		ПользовательИБ.Роли.Добавить(НазначаемаяРоль);
	КонецЦикла;
	
	Попытка
		ПользовательИБ.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось создать пользователя ИБ " + Имя + " по причине " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	// установим пароль
	Если УправлениеПользователямиДополнительный.ПарольПользователяИБ(ПользовательИБ.Имя, Истина) <> Неопределено Тогда
		// "перечитаем" пользователя ИБ
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Имя);
	КонецЕсли;
	
	Возврат ПользовательОбъект.Ссылка;
	
КонецФункции // СоздатьПользователя

// Функция определяет индекс картинки для пользователя 
//  из коллекции картинок пользователей информационной базы
//
Функция ИндексКартинкиПользователя(ПользовательИБ) Экспорт
	
	Возврат ?(ПользовательИБ <> Неопределено И ЗначениеЗаполнено(ПользовательИБ.Имя), 
			?(ПользовательИБ.ПарольУстановлен, 2, 1),
			0);
			
КонецФункции // ИндексКартинкиПользователя
