//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ ДОКУМЕНТОВ

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры, функции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ формирования движений кадровых документов по плановым начислениям работников организации

// Процедура строит список должностей (или подразделений), по кадровому плану предприятия.
//
// Параметры: 
//  Режим - строка, может принимать значения: "Должность" или "Подразделение" определяет, что именно 
//			будет выбирать пользователь
//  ДолжностьИлиПодразделение - СправочникСсылка.Подразделения или СправочникСсылка.Должности,  
//			второе значение в текущей строке т.п.
//
// Возвращаемое значение
//  нет
//
Функция ВыбратьИзКадровогоПланаПредприятия(Режим, ДолжностьИлиПодразделение) Экспорт
	
	Запрос = Новый Запрос;
	
	Если НЕ ЗначениеЗаполнено(ДолжностьИлиПодразделение) Тогда
		Возврат Новый СписокЗначений 
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ДолжностьИлиПодразделение",ДолжностьИлиПодразделение);
		
	Если Режим = "Подразделение" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыйПланСрезПоследних.Подразделение КАК Элемент,
		|	КадровыйПланСрезПоследних.Подразделение.Наименование КАК ЭлементНаименование
		|ИЗ
		|	РегистрСведений.КадровыйПлан.СрезПоследних(
		|		,
		|		Должность = &ДолжностьИлиПодразделение) КАК КадровыйПланСрезПоследних
//////////////Выносить в переопределяемый модуль		
		//|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|				ДолжностиОрганизаций.Должность
		//|			ИЗ
		//|				Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций
		//|			ГДЕ
		//|				ДолжностиОрганизаций.Ссылка = &ДолжностьИлиПодразделение)) КАК КадровыйПланСрезПоследних
//////////////Выносить в переопределяемый модуль		
		|ГДЕ
		|	КадровыйПланСрезПоследних.Количество > 0";
		
	ИначеЕсли Режим = "Должность" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				КадровыйПланСрезПоследних.Должность КАК Элемент,
		|				КадровыйПланСрезПоследних.Должность.Наименование КАК ЭлементНаименование
		|			ИЗ
		|				РегистрСведений.КадровыйПлан.СрезПоследних(, Подразделение = &ДолжностьИлиПодразделение) КАК КадровыйПланСрезПоследних
		|			ГДЕ
		|				КадровыйПланСрезПоследних.Количество > 0";
		
//////////////Выносить в переопределяемый модуль		
		//"ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	ДолжностиОрганизаций.Ссылка КАК Элемент,
		//|	ДолжностиОрганизаций.Наименование КАК ЭлементНаименование
		//|ИЗ
		//|	Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций
		//|ГДЕ
		//|	ДолжностиОрганизаций.Должность В
		//|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|				КадровыйПланСрезПоследних.Должность
		//|			ИЗ
		//|				РегистрСведений.КадровыйПлан.СрезПоследних(, Подразделение = &ДолжностьИлиПодразделение) КАК КадровыйПланСрезПоследних
		//|			ГДЕ
		//|				КадровыйПланСрезПоследних.Количество > 0)";
//////////////Выносить в переопределяемый модуль		
		
	Иначе
		Возврат Новый СписокЗначений 
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый СписокЗначений 
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	СписокВыбора = Новый СписокЗначений();
	
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Элемент, Выборка.ЭлементНаименование);	
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции // ВыбратьИзКадровогоПланаПредприятия

// Возвращает структуру с данными по выбранному работнику 
// Парамтеры:
//	Сотрудник - ссылка на справочник Сотрудники
//	ВыбираемыеДанные - строка, признак того, что нужно выбирать данные из регистров Работники и/или УчетЗаработкаРаботников
//
// Возвращаемое значение:
//  Структура с элементами
//		всегда присуствует 
//			Физлицо
//		если ВыбираемыеДанные содержит строку "Работники"
//			Подразделение
//			Должность
//			ГрафикРаботы
//			ЗанимаемыхСтавок
//		если ВыбираемыеДанные содержит строку "УчетЗаработкаРаботников"
//			СпособОтраженияВУпрУчете
//			УчетНачисленийПоОрганизации
//
Функция СведенияПоВыбранномуРаботнику(Сотрудник, ВыбираемыеДанные) Экспорт
	
	// Получим данные из среза последних
	ВыбиратьРаботники = Найти(ВыбираемыеДанные, "Работники") > 0;
	ВыбиратьУчетЗаработкаРаботников = Найти(ВыбираемыеДанные, "УчетЗаработкаРаботников") > 0;
	
	Запрос = Новый Запрос;
	Если ВыбиратьРаботники Тогда
		Если Не ВыбиратьУчетЗаработкаРаботников Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	&Сотрудник КАК Сотрудник,
			|	Работники.Подразделение,
			|	Работники.Должность,
			|	Работники.ГрафикРаботы,
			|	Работники.ЗанимаемыхСтавок
			|ИЗ
			|	РегистрСведений.Работники.СрезПоследних(
			|		,
			|		Физлицо В
			|			(ВЫБРАТЬ
			|				СотрудникиОрганизаций.Физлицо
			|			ИЗ
			|				Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|			ГДЕ
			|				СотрудникиОрганизаций.Ссылка = &Сотрудник)) КАК Работники";
			
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	&Сотрудник КАК Сотрудник,
			|	Работники.Подразделение,
			|	Работники.Должность,
			|	Работники.ГрафикРаботы,
			|	Работники.ЗанимаемыхСтавок,
			|	УчетЗаработкаРаботников.СпособОтраженияВУпрУчете,
			|	УчетЗаработкаРаботников.УчетНачисленийПоОрганизации
			|ИЗ
			|	РегистрСведений.Работники.СрезПоследних(
			|		,
			|		Физлицо В
			|			(ВЫБРАТЬ
			|				СотрудникиОрганизаций.Физлицо
			|			ИЗ
			|				Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|			ГДЕ
			|				СотрудникиОрганизаций.Ссылка = &Сотрудник)) КАК Работники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников.СрезПоследних(
			|		,
			|		Физлицо В
			|			(ВЫБРАТЬ
			|				СотрудникиОрганизаций.Физлицо
			|			ИЗ
			|				Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|			ГДЕ
			|				СотрудникиОрганизаций.Ссылка = &Сотрудник)) КАК УчетЗаработкаРаботников
			|		ПО (ИСТИНА)";
		КонецЕсли;
		
	ИначеЕсли ВыбиратьУчетЗаработкаРаботников Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Сотрудник КАК Сотрудник,
		|	УчетЗаработкаРаботников.СпособОтраженияВУпрУчете,
		|	УчетЗаработкаРаботников.УчетНачисленийПоОрганизации
		|ИЗ
		|	РегистрСведений.УчетЗаработкаРаботников.СрезПоследних(
		|		,
		|		Физлицо В
		|			(ВЫБРАТЬ
		|				СотрудникиОрганизаций.Физлицо
		|			ИЗ
		|				Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|			ГДЕ
		|				СотрудникиОрганизаций.Ссылка = &Сотрудник)) КАК УчетЗаработкаРаботников";
		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Сотрудник КАК Сотрудник,
		|	Работники.ФизЛицо
		|ИЗ
		|	РегистрСведений.Работники.СрезПоследних(
		|		,
		|		Физлицо В
		|			(ВЫБРАТЬ
		|				СотрудникиОрганизаций.Физлицо
		|			ИЗ
		|				Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|			ГДЕ
		|				СотрудникиОрганизаций.Ссылка = &Сотрудник)) КАК Работники";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
		
	Иначе
		Если ВыбиратьРаботники Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ВыбранныйНаборДанных = Новый Структура("Сотрудник, Подразделение, Должность, ГрафикРаботы, ЗанимаемыхСтавок");
			ВыбранныйНаборДанных.Сотрудник			= Выборка.Сотрудник;
			ВыбранныйНаборДанных.Подразделение		= Выборка.Подразделение;
			ВыбранныйНаборДанных.Должность			= Выборка.Должность;
			ВыбранныйНаборДанных.ГрафикРаботы		= Выборка.ГрафикРаботы;
			ВыбранныйНаборДанных.ЗанимаемыхСтавок	= Выборка.ЗанимаемыхСтавок;
			Если ВыбиратьУчетЗаработкаРаботников Тогда
				ВыбранныйНаборДанных.Вставить("СпособОтраженияВУпрУчете",		Выборка.СпособОтраженияВУпрУчете);
				ВыбранныйНаборДанных.Вставить("УчетНачисленийПоОрганизации",	Выборка.УчетНачисленийПоОрганизации);
			КонецЕсли;
			
		ИначеЕсли ВыбиратьУчетЗаработкаРаботников Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ВыбранныйНаборДанных = Новый Структура("Сотрудник, СпособОтраженияВУпрУчете, УчетНачисленийПоОрганизации");
			ВыбранныйНаборДанных.Сотрудник						= Выборка.Сотрудник;
			ВыбранныйНаборДанных.СпособОтраженияВУпрУчете		= Выборка.СпособОтраженияВУпрУчете;
			ВыбранныйНаборДанных.УчетНачисленийПоОрганизации	= Выборка.УчетНачисленийПоОрганизации;
			
		Иначе
			ВыбранныйНаборДанных = Новый Структура("Сотрудник");
			ВыбранныйНаборДанных.Сотрудник	= Выборка.Сотрудник;
			
		КонецЕсли;
		
		Возврат ВыбранныйНаборДанных;
		
	КонецЕсли;
	
КонецФункции // СведенияПоВыбранномуРаботнику

