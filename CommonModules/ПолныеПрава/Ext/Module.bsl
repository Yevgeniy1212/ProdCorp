////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПАРАМЕТРАМИ СЕАНСА 

// Устанавливает неизменяемые параметры сеанса пользователя
//
Процедура УстановитьПараметрыСеанса(ТекущийПользователь) Экспорт
	
	УстановитьИзменяемыеПараметрыСеансаПользователя();
	
КонецПроцедуры // УстановитьПараметрыСеанса()

Процедура УстановитьИзменяемыеПараметрыСеансаПользователя(Интерактивно = Ложь, ТекстРезультата = "") Экспорт
	
	ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей = Константы.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей.Получить();
	ТекстРезультата = ТекстРезультата + " - обновлены данные прав доступа" + Символы.ПС;
	
	УстановитьПараметрГраницыЗапретаИзмененияДанных();
	ТекстРезультата = ТекстРезультата + " - обновлены даты запрета изменения данных" + Символы.ПС;
	
	// инициализация параметров сеанса, связанных с механизмом РИБ:
	// ПрефиксУзлаРаспределеннойИнформационнойБазы, НаличиеОбменаДаннымиПоОрганизации
	// ВсеУзлыОбменаПоОрганизациям, СоответствиеОрганизацийИУзловОбменаПоОрганизации
	// ИспользованиеРИБ
	ОпределитьФактИспользованияРИБ();
	ТекстРезультата = ТекстРезультата + " - обновлены параметры распределенной информационной базы" + Символы.ПС;
	
	ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Новый Структура);
	ТекстРезультата = ТекстРезультата + " - сброшен кэш значений текущего сеанса" + Символы.ПС;
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Процедура УстановитьПараметрСеансаТекущийПользователь(ТекущийПользователь = Неопределено) Экспорт
	
	Если ТекущийПользователь = Неопределено Тогда
		
		ИмяПользователя = ИмяПользователя();	
		
		Если ПустаяСтрока(ИмяПользователя) Тогда
		    // пользователь не авторизовался
		    ИмяПользователя = "НеАвторизован";		
        КонецЕсли;
        
		ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
		
		Если НЕ ПустаяСтрока(ИмяПользователя) Тогда
						
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Пользователи.Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.Код = &Код
			|	И НЕ Пользователи.ЭтоГруппа";

			Запрос.УстановитьПараметр("Код", ИмяПользователя);					
			Выборка = Запрос.Выполнить().Выбрать();

			Если Выборка.Следующий() Тогда
				ТекущийПользователь = Выборка.Ссылка;
			Иначе
				ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();	
			КонецЕсли;			
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;
	
КонецПроцедуры

Процедура УстановитьПараметрыМеханизмаОграниченияПравДоступа() Экспорт
	
	ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей = Константы.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей.Получить();
	Если ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВидыОбъектовДоступа.Ссылка,
		               |	МАКСИМУМ(ВЫБОР
		               |			КОГДА ПользователиГруппы.Ссылка ЕСТЬ NULL 
		               |				ТОГДА ИСТИНА
		               |			ИНАЧЕ ВЫБОР
		               |					КОГДА НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа ЕСТЬ NULL 
		               |						ТОГДА ЛОЖЬ
		               |					ИНАЧЕ ИСТИНА
		               |				КОНЕЦ
		               |		КОНЕЦ) КАК ЕстьОграничение
		               |ИЗ
		               |	Перечисление.ВидыОбъектовДоступа КАК ВидыОбъектовДоступа
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.ПользователиГруппы КАК ПользователиГруппы
		               |		ПО (ПользователиГруппы.Пользователь = &ТекущийПользователь)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НазначениеВидовОбъектовДоступа КАК НазначениеВидовОбъектовДоступа
		               |		ПО (НазначениеВидовОбъектовДоступа.ГруппаПользователей = ПользователиГруппы.Ссылка)
		               |			И (НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = ВидыОбъектовДоступа.Ссылка)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВидыОбъектовДоступа.Ссылка";
		
		Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
		Выборка = Запрос.Выполнить().Выбрать();
		ВидыОбъектовДоступаЗначения = Метаданные.Перечисления.ВидыОбъектовДоступа.ЗначенияПеречисления; 
		Пока Выборка.Следующий() Цикл
			Если Метаданные.ПараметрыСеанса.Найти("ИспользоватьОграничениеПо" + ВидыОбъектовДоступаЗначения.Получить(Перечисления.ВидыОбъектовДоступа.Индекс(Выборка.Ссылка)).Имя)<>Неопределено Тогда
				ПараметрыСеанса["ИспользоватьОграничениеПо" + ВидыОбъектовДоступаЗначения.Получить(Перечисления.ВидыОбъектовДоступа.Индекс(Выборка.Ссылка)).Имя] = Выборка.ЕстьОграничение;
			КонецЕсли;
		КонецЦикла;
		
			
	Иначе
		
		Для Каждого ВидОбъектаДоступа Из Метаданные.Перечисления.ВидыОбъектовДоступа.ЗначенияПеречисления Цикл
			Если Метаданные.ПараметрыСеанса.Найти("ИспользоватьОграничениеПо" + ВидОбъектаДоступа.Имя)<>Неопределено Тогда
				ПараметрыСеанса["ИспользоватьОграничениеПо" + ВидОбъектаДоступа.Имя] = Ложь;			
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыСеанса.ИспользоватьОграничениеПоСтруктурныеПодразделения = Истина И Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить() = Ложь Тогда
		ПараметрыСеанса.ИспользоватьОграничениеПоСтруктурныеПодразделения = Ложь; 
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	общ_СоставПрофилейДоступа.Профиль
		|ИЗ
		|	РегистрСведений.общ_СоставПрофилейДоступа КАК общ_СоставПрофилейДоступа
		|ГДЕ
		|	общ_СоставПрофилейДоступа.Пользователь = &Пользователь
		|	И НЕ общ_СоставПрофилейДоступа.Профиль.ПометкаУдаления
		|	И общ_СоставПрофилейДоступа.Профиль.ВидПрофиляДоступа = &ВидПрофиляДоступа";

	Запрос.УстановитьПараметр("ВидПрофиляДоступа", Перечисления.общ_ВидыПрофилейДоступа.КазначейскиеДокументы);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);

	Результат = Запрос.Выполнить();

	ПараметрыСеанса.общ_ИспользоватьОграниченияПоКазначейству = НЕ Результат.Пустой();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	общ_СоставПрофилейДоступа.Профиль
		|ИЗ
		|	РегистрСведений.общ_СоставПрофилейДоступа КАК общ_СоставПрофилейДоступа
		|ГДЕ
		|	общ_СоставПрофилейДоступа.Пользователь = &Пользователь
		|	И НЕ общ_СоставПрофилейДоступа.Профиль.ПометкаУдаления
		|	И общ_СоставПрофилейДоступа.Профиль.ВидПрофиляДоступа = &ВидПрофиляДоступа";

	Запрос.УстановитьПараметр("ВидПрофиляДоступа", Перечисления.общ_ВидыПрофилейДоступа.Бюджеты);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);

	Результат = Запрос.Выполнить();

	ПараметрыСеанса.фин_ИспользоватьОграниченияПоБюджетам = (НЕ Результат.Пустой()) И НЕ (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("фин_Бюджетирование"));
	
	// параметры для отработки совместного использования ролей
	ПараметрыСеанса.ДоступныКассовыеОперации = РольДоступна("Кассир");
	ПараметрыСеанса.ДоступныБухгалтерскиеОперации = РольДоступна("Бухгалтер") ИЛИ РольДоступна("ден_Финансист");
	ПараметрыСеанса.ДоступныОперацииВыплатыЗарплаты = РольДоступна("ВыплатаЗаработнойПлаты");
	ПараметрыСеанса.ДоступныОперацииПоРаботеСПодотчетнымиЛицами = РольДоступна("ПодотчетныеЛица");
	ПараметрыСеанса.ДоступныОперацииПоРаботеСПодотчетнымиЛицамиЗарплата = РольДоступна("ПодотчетныеЛицаЗарплата");
	
КонецПроцедуры

// Сохранение в параметре сеанса ГраницыЗапретаИзмененияДанных границ запрета изменений данных
//
Процедура УстановитьПараметрГраницыЗапретаИзмененияДанных() Экспорт
		
    Если РольДоступна("ПолныеПрава") И НЕ Константы.ПрименятьДатуЗапретаДляПолныхПрав.Получить() Тогда
    	ПараметрыСеанса.ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(0));
        
    	Возврат;
    КонецЕсли;
    
    ТекстЗапросаПоОрганизациям = "
    |ВЫБРАТЬ
    |   ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) как Организация
    |
    |ОБЪЕДИНИТЬ
    |
    |ВЫБРАТЬ
    |	Организации.Ссылка
    |ИЗ 
    |   Справочник.Организации КАК Организации";
	
    ТекстЗапросаПоОбщейДатеЗапретаРедактирования = "ВЫБРАТЬ
                                                   |    ЕстьNull(ГраницыЗапретаИзмененияДанных.ГраницаЗапретаИзменений, ДатаВремя(1,1,1,23,59,59)) КАК ОбщаяДата
                                                   |ИЗ
                                                   |    РегистрСведений.ГраницыЗапретаИзмененияДанных КАК ГраницыЗапретаИзмененияДанных
                                                   |ГДЕ
                                                   |    ГраницыЗапретаИзмененияДанных.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
                                                   |    И ГраницыЗапретаИзмененияДанных.Пользователь = НЕОПРЕДЕЛЕНО";
                                                   
    ТекстЗапросаПоПриоритетамЗаписей = "ВЫБРАТЬ
                                       |    Организации.Организация КАК Организация,
                                       |    Границы.Пользователь КАК Пользователь,
                                       |    ВЫБОР
                                       |        КОГДА Границы.Пользователь = НЕОПРЕДЕЛЕНО
                                       |				И Границы.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
                                       |            ТОГДА 4
                                       |		КОГДА Границы.Пользователь = НЕОПРЕДЕЛЕНО
                                       |			ТОГДА 3
                                       |        КОГДА Границы.Пользователь ССЫЛКА Справочник.ГруппыПользователей
                                       |                И ГруппыПользователей.Пользователь = &Пользователь
                                       |            ТОГДА 2
                                       |        КОГДА Границы.Пользователь ССЫЛКА Справочник.Пользователи
                                       |                И Границы.Пользователь = &Пользователь
                                       |            ТОГДА 1
                                       |    КОНЕЦ КАК Приоритет,
                                       |    Границы.ГраницаЗапретаИзменений КАК ГраницаЗапретаИзменений
                                       |ИЗ
                                       |    РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Границы
                                       |        ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователей
                                       |        ПО (ГруппыПользователей.Пользователь = &Пользователь И ГруппыПользователей.Ссылка = Границы.Пользователь)
                                       |		ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаПоОрганизациям + ") КАК Организации
                                       |		ПО Границы.Организация = Организации.Организация
                                       |			ИЛИ Границы.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
                                       |";
                                       
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ  РАЗРЕШЕННЫЕ
                   |    Организации.Организация как Организация,
                   |    ЕСТЬNULL(МИНИМУМ(ЕСТЬNULL(ТаблицаГраницыЗапрета.ГраницаЗапретаИзменений, ОбщаяДатаЗапрета.ОбщаяДата)), ДАТАВРЕМЯ(1, 1, 1)) КАК ГраницаЗапретаИзменений,                   
                   |    ОбщаяДатаЗапрета.ОбщаяДата как ОбщаяДата
                   |ИЗ
                   |	(" + ТекстЗапросаПоОрганизациям+") Как Организации  
                   |
                   |    ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                   |            Приоритеты.Организация КАК Организация,
                   |            МИНИМУМ(Приоритеты.Приоритет) КАК Приоритет
                   |        ИЗ
                   |            (" + ТекстЗапросаПоПриоритетамЗаписей + ") КАК Приоритеты
                   |        
                   |        СГРУППИРОВАТЬ ПО
                   |            Приоритеты.Организация) КАК ТаблицаПриоритетов
                   |        ПО ТаблицаПриоритетов.Организация = Организации.Организация
                   |
                   |	ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаПоПриоритетамЗаписей + ") КАК ТаблицаГраницыЗапрета
                   |        ПО ТаблицаПриоритетов.Организация = ТаблицаГраницыЗапрета.Организация
                   |            И ТаблицаПриоритетов.Приоритет = ТаблицаГраницыЗапрета.Приоритет
                   |	
                   |	ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаПоОбщейДатеЗапретаРедактирования + ") Как ОбщаяДатаЗапрета
                   |		ПО ИСТИНА
                   |
                   |СГРУППИРОВАТЬ ПО
                   |    Организации.Организация, 
                   |	ОбщаяДата";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
    
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Соответствие = Неопределено;
	Иначе			
		Соответствие = Новый Соответствие;
		Выборка = РезультатЗапроса.Выбрать();
        ОбщаяДатаЗапрета = Неопределено;
		Пока Выборка.Следующий() Цикл
			Соответствие[Выборка.Организация] = Выборка.ГраницаЗапретаИзменений;
            Если ОбщаяДатаЗапрета = Неопределено Тогда
                ОбщаяДатаЗапрета = Выборка.ОбщаяДата;
            КонецЕсли;            
        КонецЦикла;
        
        Если НЕ ОбщаяДатаЗапрета = Неопределено Тогда
            Соответствие["ОбщаяДатаЗапретаРедактирования"] = ОбщаяДатаЗапрета;
        КонецЕсли;
        
		Если Соответствие.Количество() = 0 Тогда
			Соответствие = Неопределено;
		КонецЕсли;		
	КонецЕсли;
	
	Если Соответствие <> Неопределено Тогда
		СохранятьСоответствие = Ложь;
		Для Каждого КлючИЗначение Из Соответствие Цикл
			ЕСли КлючИЗначение.Значение <> Дата('00010101') Тогда
				СохранятьСоответствие = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ СохранятьСоответствие Тогда
			Соответствие = Неопределено;
		КонецЕсли;			
	КонецЕсли;
		
	ПараметрыСеанса.ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Соответствие, Новый СжатиеДанных(0));

КонецПроцедуры // УстановитьПараметрГраницыЗапретаИзмененияДанных()

// Сохранение в параметре сеанса ИспользованиеРИБ признак работы в режиме РИБ
//
Процедура ОпределитьФактИспользованияРИБ() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Полный.Ссылка
	               |ИЗ
	               |	ПланОбмена.Полный КАК Полный
	               |ГДЕ
	               |	Полный.Ссылка <> &ЭтотУзел
				   |И НЕ Полный.ПометкаУдаления";
				   
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.Полный.ЭтотУзел());
	
	ПараметрыСеанса.ИспользованиеРИБ = НЕ Запрос.Выполнить().Пустой();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбменУправлениеТорговлейБухгалтерия.Ссылка КАК Ссылка,
				   |	ОбменУправлениеТорговлейБухгалтерия.ДатаНачалаВыгрузкиДокументов КАК ДатаНачалаВыгрузкиДокументов
	               |ИЗ
	               |	ПланОбмена.ОбменУправлениеТорговлейБухгалтерия КАК ОбменУправлениеТорговлейБухгалтерия
	               |ГДЕ
	               |	ОбменУправлениеТорговлейБухгалтерия.Ссылка <> &ЭтотУзелПоОрганизации
				   |И НЕ ОбменУправлениеТорговлейБухгалтерия.ПометкаУдаления";
				   
	Запрос.УстановитьПараметр("ЭтотУзелПоОрганизации", ПланыОбмена.ОбменУправлениеТорговлейБухгалтерия.ЭтотУзел());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПараметрыСеанса.НаличиеОбменаТорговляБухгалтерия = НЕ РезультатЗапроса.Пустой();
		
	Если ПараметрыСеанса.НаличиеОбменаТорговляБухгалтерия Тогда
		
		ТаблицаОбменовУТБП = РезультатЗапроса.Выгрузить();
		ТаблицаОбменовУТБП.Индексы.Добавить("Ссылка");
		
		ПараметрыСеанса.СоответствиеУзловИДатДляОбменаБухгалтерияТорговля = Новый ХранилищеЗначения(ТаблицаОбменовУТБП);
		
		
		МассивВсехУзлов = ПроцедурыОбменаТорговляБухгалтерия.ПолучитьМассивВсехУзлов();
		ПараметрыСеанса.ВсеУзлыОбменаТорговляБухгалтерия = Новый ФиксированныйМассив(МассивВсехУзлов);
		
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	Организации.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Организации КАК Организации";
		МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");			   
		МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
				
		СоответствиеУзловИОрганизаций = Новый Соответствие;			   
					   
		Для Каждого Организация ИЗ МассивОрганизаций Цикл
			
			МассивУзлов = ПроцедурыОбменаТорговляБухгалтерия.ПолучитьЗапросомМассивУзловПоОрганизации(Организация);
			СоответствиеУзловИОрганизаций.Вставить(Организация, МассивУзлов);
						
		КонецЦикла;		
				
		ПараметрыСеанса.СоответствиеОрганизацийИУзловОбменаТорговляБухгалтерия = Новый ХранилищеЗначения(СоответствиеУзловИОрганизаций);		
		
	КонецЕсли;	
	
	//Добавлено для работы плана обмена по организациям
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоОрганизации.Ссылка
	               |ИЗ
	               |	ПланОбмена.ПоОрганизации КАК ПоОрганизации
	               |ГДЕ
	               |	ПоОрганизации.Ссылка <> &ЭтотУзелПоОрганизации
				   |И НЕ ПоОрганизации.ПометкаУдаления";
				   
	Запрос.УстановитьПараметр("ЭтотУзелПоОрганизации", ПланыОбмена.ПоОрганизации.ЭтотУзел());
		
	ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации = НЕ Запрос.Выполнить().Пустой();
	
	ПараметрыСеанса.ИспользованиеРИБ = ПараметрыСеанса.ИспользованиеРИБ ИЛИ ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации;
	
	ПараметрыСеанса.ПрефиксУзлаРаспределеннойИнформационнойБазы = Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();
	
	Если ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации Тогда
		
		МассивВсехУзлов = ПроцедурыОбменаДаннымиПоОрганизации.ПолучитьМассивВсехУзлов();
		
		ПараметрыСеанса.ВсеУзлыОбменаПоОрганизациям = Новый ФиксированныйМассив(МассивВсехУзлов);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	Организации.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Организации КАК Организации";
					   
		СоотвествиеУзловИОрганизаций = Новый Соответствие;			   
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			МассивУзлов = ПроцедурыОбменаДаннымиПоОрганизации.ПолучитьЗапросомМассивУзловПоОрганизации(Выборка.Ссылка);
			СоотвествиеУзловИОрганизаций.Вставить(Выборка.Ссылка, МассивУзлов);
						
		КонецЦикла;
		
		// пустую орнаизацию надо в список добавить
		МассивУзлов = ПроцедурыОбменаДаннымиПоОрганизации.ПолучитьЗапросомМассивУзловПоОрганизации(Справочники.Организации.ПустаяСсылка());
		СоотвествиеУзловИОрганизаций.Вставить(Справочники.Организации.ПустаяСсылка(), МассивУзлов);
		
		ПараметрыСеанса.СоответствиеОрганизацийИУзловОбменаПоОрганизации = Новый ХранилищеЗначения(СоотвествиеУзловИОрганизаций);
		
	КонецЕсли;
	
	// обмен с сайтом
	Если Метаданные.ПланыОбмена.Найти("ОбменССайтомТоварами") <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОбменССайтомТоварами.Ссылка КАК Ссылка
		               |ИЗ
		               |	ПланОбмена.ОбменССайтомТоварами КАК ОбменССайтомТоварами
		               |ГДЕ
		               |	(ОбменССайтомТоварами.Ссылка <> &ЭтотУзел)	
				   		|И НЕ ОбменССайтомТоварами.ПометкаУдаления
					   |";
					   
		Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменССайтомТоварами.ЭтотУзел());
		МассивУзловДляОбменаССайтомТоварами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		ПараметрыСеанса.ВсеУзлыДляОбменаССайтомТоварами = Новый ФиксированныйМассив(МассивУзловДляОбменаССайтомТоварами);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОбменССайтомЗаказами.Ссылка КАК Ссылка
		               |ИЗ
		               |	ПланОбмена.ОбменССайтомЗаказами КАК ОбменССайтомЗаказами
		               |ГДЕ
		               |	(ОбменССайтомЗаказами.Ссылка <> &ЭтотУзел)	
				   		|И НЕ ОбменССайтомЗаказами.ПометкаУдаления
					   |";
					   
		Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменССайтомЗаказами.ЭтотУзел());
		МассивУзловДляОбменаССайтомЗаказами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		ПараметрыСеанса.ВсеУзлыДляОбменаССайтомЗаказами = Новый ФиксированныйМассив(МассивУзловДляОбменаССайтомЗаказами);	
		
		ПараметрыСеанса.НаличиеОбменаССайтом = (МассивУзловДляОбменаССайтомТоварами.Количество() + МассивУзловДляОбменаССайтомЗаказами.Количество() > 0);
		
	КонецЕсли;

	ПараметрыСеанса.СохранятьИнформациюОМестеСозданияОбъектов = Константы.СохранятьИнформациюОМестеСозданияОбъектов.Получить();
	
КонецПроцедуры // ОпределитьФактИспользованияРИБ()

// Процедура инициализирует глобальную переменную глТекущийПользователь.
// Переменная содержит ссылку на элемент справочника "Пользователи", 
// соответствующий текущему пользователю информационной базы.
//
// Параметры:
//  Нет.
//
Функция ОпределитьТекущегоПользователя() Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();        
	Иначе
		ИмяПользователя           = ИмяПользователя();
		
		Если ПустаяСтрока(ПолноеИмяПользователя()) Тогда
			ПолноеИмяПользователя = ИмяПользователя;
		Иначе
			ПолноеИмяПользователя = ПолноеИмяПользователя();
		КонецЕсли;
	КонецЕсли;	
	
	ДлинаКодаПользователя = Метаданные.Справочники.Пользователи.ДлинаКода;
	
	Если СтрДлина(ИмяПользователя) > ДлинаКодаПользователя Тогда
		ИмяПользователя = Лев(ИмяПользователя, ДлинаКодаПользователя);
	КонецЕсли; 
	
	// Проверить отсутствие групп, имеюших такой же код, как ИмяПользователя,
	// т.к. если такие группы есть, то не удастся записать нового пользователя. 
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ЭтоГруппа
	|	И Пользователи.Код = &Код";	
	Запрос.УстановитьПараметр("Код", ИмяПользователя);
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		ТекстИсключения = НСтр(
		"ru = 'Пользователь ""[ИмяПользователя]"" не был найден в справочнике ""Пользователи"".
		|Невозможно создать нового пользователя с именем ""[ИмяПользователя]"", 
		|так как в справочнике ""Пользователи"" имеется группа с именем ""[ИмяПользователя]"".'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "[ИмяПользователя]", ИмяПользователя);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	// Найти существующего пользователя.
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	(НЕ Пользователи.ЭтоГруппа)
	|	И Пользователи.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", ИмяПользователя);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ОбъектПользователь = Справочники.Пользователи.СоздатьЭлемент();
		
		ОбъектПользователь.Код          = ИмяПользователя;
		ОбъектПользователь.Наименование = ПолноеИмяПользователя;
        
		Попытка
			ОбъектПользователь.Записать();
        Исключение
            #Если Клиент Тогда
			Предупреждение("Пользователь : " + ИмяПользователя + " не был найден в справочнике пользователей. Возникла ошибка при добавлении пользователя в справочник.
				|" + ОписаниеОшибки());
			ЗавершитьРаботуСистемы(Ложь);
            #КонецЕсли
        
			Возврат Справочники.Пользователи.ПустаяСсылка();
			
		КонецПопытки;
        
		ТекущийПользователь = ОбъектПользователь.Ссылка;

    Иначе
        Выборка = Результат.Выбрать();
		Выборка.Следующий();
        
        ТекущийПользователь = Выборка.Ссылка;
		
		Возврат ТекущийПользователь;
		
	КонецЕсли; 
  		
		Набор = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
		Набор.Отбор.Пользователь.Использование = Истина;
		Набор.Отбор.Пользователь.Значение      = ТекущийПользователь;
		
		// Инициализируем признак учета по всем организациям
		Режим = Истина;
		
		
		Запрос = Новый Запрос();
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации";
		Выборка = Запрос.Выполнить().Выбрать();

		КоличествоЗаписейВВыборке = Выборка.Количество();
			
		Если КоличествоЗаписейВВыборке = 1 Тогда

			// выбирать не из чего - запишем значения без лишних вопросов
			Выборка.Следующий();
			ОсновнаяОрганизация = Выборка.Ссылка;
					
		ИначеЕсли КоличествоЗаписейВВыборке > 0 Тогда
       		#Если Клиент Тогда
				ФормаВыбора = ПолучитьОбщуюФорму("УправлениеУчетомПоОрганизациям");
				
				СтруктураВозврата = ФормаВыбора.ОткрытьМодально();
				
				Если (СтруктураВозврата <> Неопределено) Тогда
					Режим               = СтруктураВозврата.Режим;
					ОсновнаяОрганизация = СтруктураВозврата.Организация;
				КонецЕсли;
				
				Если ОсновнаяОрганизация = Неопределено Тогда
					ОсновнаяОрганизация = Справочники.Организации.ПустаяСсылка();
				КонецЕсли;
			#Иначе
				#Если НЕ ВнешнееСоединение Тогда 
					Сообщить("Для пользователя " + ТекущийПользователь +" установлен учет по всем организациям");
				#КонецЕсли
				ОсновнаяОрганизация = Справочники.Организации.ПустаяСсылка();
			#КонецЕсли
		КонецЕсли;			

		Если ОбщегоНазначения.ЕстьПредопределенныйЭлемент("ОсновнаяОрганизация", Метаданные.ПланыВидовХарактеристик.НастройкиПользователей) Тогда
			Запись = Набор.Добавить();
			Запись.Пользователь = ТекущийПользователь;
			Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация;
			Запись.Значение     = ОсновнаяОрганизация;
		КонецЕсли;
		

		Если ОбщегоНазначения.ЕстьПредопределенныйЭлемент("ЗапрашиватьПодтверждениеПриЗакрытии", Метаданные.ПланыВидовХарактеристик.НастройкиПользователей) Тогда
			Запись = Набор.Добавить();
			Запись.Пользователь = ТекущийПользователь;
			Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ЗапрашиватьПодтверждениеПриЗакрытии;
			Запись.Значение     = Истина;
		КонецЕсли;

				
		Если ОбщегоНазначения.ЕстьПредопределенныйЭлемент("ПоказыватьВДокументахСчетаУчета", Метаданные.ПланыВидовХарактеристик.НастройкиПользователей) Тогда
			Запись = Набор.Добавить();
			Запись.Пользователь = ТекущийПользователь;
			Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ПоказыватьВДокументахСчетаУчета;
			Запись.Значение     = Истина;
		КонецЕсли;
		
		
		Если ОбщегоНазначения.ЕстьПредопределенныйЭлемент("УчетПоВсемОрганизациям", Метаданные.ПланыВидовХарактеристик.НастройкиПользователей) Тогда
			Запись = Набор.Добавить();
        	Запись.Пользователь = ТекущийПользователь;
			Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.УчетПоВсемОрганизациям;
			Запись.Значение     = Режим;
		КонецЕсли;
		
		
		Если ОбщегоНазначения.ЕстьПредопределенныйЭлемент("ОсновнойОтветственный", Метаданные.ПланыВидовХарактеристик.НастройкиПользователей) Тогда
			Запись = Набор.Добавить();
       		Запись.Пользователь = ТекущийПользователь;
			Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойОтветственный;
			Запись.Значение     = ТекущийПользователь;
		КонецЕсли;
		
		
		Если ОбщегоНазначения.ЕстьПредопределенныйЭлемент("ЗапрашиватьВидОперацииПриВводеНового", Метаданные.ПланыВидовХарактеристик.НастройкиПользователей) Тогда
			Запись = Набор.Добавить();
       		Запись.Пользователь = ТекущийПользователь;
    		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ЗапрашиватьВидОперацииПриВводеНового;
    		Запись.Значение     = Истина;
		КонецЕсли;
    	
		
		Если ОбщегоНазначения.ЕстьПредопределенныйЭлемент("ПоказыватьБыстроеОсвоениеПриНачалеРаботыСистемы", Метаданные.ПланыВидовХарактеристик.НастройкиПользователей) Тогда
			Запись = Набор.Добавить();
        	Запись.Пользователь = ТекущийПользователь;
			Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ПоказыватьБыстроеОсвоениеПриНачалеРаботыСистемы;
			Запись.Значение     = Истина;
		КонецЕсли;
		
		Попытка
			
			Набор.Записать();
			
		Исключение
			
			#Если Клиент Тогда
			Предупреждение("Ошибка при записи настроек нового пользователя.
				|" + ОписаниеОшибки());
			ЗавершитьРаботуСистемы(Ложь);
            #КонецЕсли		
						
		КонецПопытки;
		
		#Если Клиент Тогда
			Если НЕ Константы.НомерВерсииКонфигурации.Получить() = "" Тогда
				Сообщить("Пользователь зарегистрирован в справочнике пользователей.");
			КонецЕсли;
		
			// ЗУП 2.0	
			Если НЕ Константы.РазделятьЗадачиПоОрганизациям.Получить() И
				НЕ Константы.РазделятьЗадачиПоРолямИсполнителей.Получить() Тогда
				
				УправлениеПользователями.ЗаписатьИсполнителя(ТекущийПользователь);
			КонецЕсли;
		#КонецЕсли
	    						

	Возврат ТекущийПользователь;
	
КонецФункции // ОпределитьТекущегоПользователя()
////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПАРАМЕТРАМИ СЕАНСА 
                 
// функция по пользователю ИБ определяет есть ли у него Windows авторизация
Функция НаличиеУПользователяWindowsАвторизации(Знач ИмяПользователяИБ) Экспорт
	
	Если ПустаяСтрока(ИмяПользователяИБ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// находим пользователя ИБ
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПользовательИБ.АутентификацияОС;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПРАВАМИ 

// Процедура физически записывает набор прав в ИБ
//
Процедура ЗаписатьНаборПрав(НаборПрав, Отказ, ШапкаОшибки)
	
	Попытка
		НаборПрав.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ШапкаОшибки);
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры // ЗаписатьНаборПрав()

Процедура ЗаписатьПраваДоступаКДокументамДругихПользователей(ТаблицаНабораПрав, СтруктураОтбора, Отказ = Ложь, ШапкаОшибки = "") Экспорт
	НаборПрав = РегистрыСведений.ПраваДоступаКДокументамДругихПользователей.СоздатьНаборЗаписей();
	НаборПрав.Загрузить(ТаблицаНабораПрав);
	
	Для Каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
		НаборПрав.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
		НаборПрав.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
	КонецЦикла;
	
	// с полными правами можно все делать
	Если РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
		ЗаписатьНаборПрав(НаборПрав, Отказ, ШапкаОшибки);
	Иначе	
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке(("Нарушение прав доступа: редактировать список пользователей (групп пользователей), документы которых
						  |доступны для редактировани, может только пользователь с полными правами"),, ШапкаОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ЗарегистрироватьПраваДоступаПользователяКОбъекту(СсылкаНового, Родитель, Отказ = Ложь) Экспорт

	Если НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНового)) Тогда
		Возврат;
	КонецЕсли;
	
	Если СсылкаНового.ПолучитьОбъект() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектДоступа.Установить(СсылкаНового);

	
	НастройкаПравДоступа.ДополнитьНаборПравДоступаУнаследованнымиЗаписями(НаборЗаписей, СсылкаНового, Родитель);
	
	ЗаписатьНаборПрав(НаборЗаписей, Отказ, "Не удалось записать права доступа к объекту!")

	
КонецПроцедуры

Функция ОбновитьПраваДоступаПользователейПоВладельцуДоступа(Ссылка, ОбновляемыйОбъект = Неопределено) Экспорт
	
	ПраваДоступаПользователей = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
	
	ПраваДоступаПользователей.Отбор.ОбъектДоступа      .Установить(Ссылка);
	ПраваДоступаПользователей.Отбор.ВладелецПравДоступа.Установить(Ссылка);
	
	ПраваДоступаПользователей.Прочитать();
	
	ПраваДоступаПользователей.Отбор.ОбъектДоступа.Использование = Ложь;
	
	НастройкаПравДоступа.ДополнитьНаборПравДоступаНаследуемымиЗаписями(ПраваДоступаПользователей, ОбновляемыйОбъект);
		
	Попытка
		ПраваДоступаПользователей.Записать(ОбновляемыйОбъект = Неопределено);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // () 

Процедура ЗаписатьПраваДоступаПользователей(ТаблицаНабораПрав, СтруктураОтбора, Отказ = Ложь, ШапкаОшибки = "") Экспорт
	
	
	НаборПрав   = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
	
	Для Каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
		Если Не ЭлементСтруктуры.Ключ = "ВладелецПравДоступа" Тогда
			НаборПрав.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
			НаборПрав.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	// Проверим набор на корректность установленных отборов
	Если НаборПрав.Отбор.ОбъектДоступа.Использование Тогда
		ОтборПоОбъектуДоступа = Истина;
		ОбъектДоступа = НаборПрав.Отбор.ОбъектДоступа.Значение;
		НаборПрав.Отбор.ВладелецПравДоступа.Установить(ОбъектДоступа);
		НаборПрав.Отбор.ОбъектДоступа.Использование = Ложь;
	ИначеЕсли НаборПрав.Отбор.Пользователь.Использование Тогда
		
		ОтборПоОбъектуДоступа = Ложь;
		НаборПрав.Отбор.НаследованаОтВсеПользователи.Установить(Ложь);		
		
		Если НЕ ЗначениеЗаполнено(НаборПрав.Отбор.Пользователь.Значение) Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьОбОшибке(ШапкаОшибки);
			Возврат;
		КонецЕсли;
		
	Иначе
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке(ШапкаОшибки);
		Возврат;
	КонецЕсли;
	
	ТаблицаРазличияСтрок   = НаборПрав.Выгрузить();
	ТаблицаРазличияЗаписей = НаборПрав.Выгрузить();
	
	НаборПрав.Прочитать();
	
	ТаблицаСтарогоНабора = НаборПрав.Выгрузить();
	
	ТаблицаНовогоНабора  = НастройкаПравДоступа.ПолучитьТаблицуПравДоступаБезУнаследуемыхЗаписей(ТаблицаНабораПрав);
	
	НаборПрав.Загрузить(ТаблицаНовогоНабора);
	
	// с полными правами можно все делать
	Если Не РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нарушение прав доступа!",, ШапкаОшибки);
		Возврат;
	КонецЕсли;
	
	НастройкаПравДоступа.ДополнитьНаборПравДоступаНаследуемымиЗаписями(НаборПрав);
	
	Если ОтборПоОбъектуДоступа Тогда
		НастройкаПравДоступа.ДополнитьНаборПравДоступаГруппамиПользователей(НаборПрав);
	КонецЕсли;
		
	ЗаписатьНаборПрав(НаборПрав, Отказ, ШапкаОшибки);	
		
КонецПроцедуры // () 

Процедура ОбновитьПраваДоступаКПрошлымРодителям(Ссылка, ПрошлыйИзмененныйРодительОбъектаДоступа, Отказ) Экспорт
	
	ОбновляемыеОбъекты = Новый Массив;
	ОбновляемыеОбъекты.Добавить(ПрошлыйИзмененныйРодительОбъектаДоступа);
	НастройкаПравДоступа.ПолучитьМассивРодительскихЭлементов(ПрошлыйИзмененныйРодительОбъектаДоступа, ОбновляемыеОбъекты);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиПравДоступаПользователей.ОбъектДоступа КАК Ссылка
	|ИЗ
	|	РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
	|ГДЕ
	|	НастройкиПравДоступаПользователей.ОбъектДоступа = НастройкиПравДоступаПользователей.ВладелецПравДоступа И 
	|	НастройкиПравДоступаПользователей.ОбъектДоступа В (&ОбновляемыеОбъекты)";
	
	Запрос.УстановитьПараметр("ОбновляемыеОбъекты", ОбновляемыеОбъекты);	
	
	ОбновляемыеОбъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для каждого ОбновляемыйОбъект Из ОбновляемыеОбъекты Цикл
		
		МассивЭлементов = НастройкаПравДоступа.ПолучитьМассивДочернихЭлементов(Ссылка);
		МассивЭлементов.Добавить(Ссылка);
		
		Для Каждого ПодчиненныйЭлемент ИЗ МассивЭлементов Цикл
		
			ПраваДоступаПользователей = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
		
			ПраваДоступаПользователей.Отбор.ОбъектДоступа      .Установить(ПодчиненныйЭлемент);
			ПраваДоступаПользователей.Отбор.ВладелецПравДоступа.Установить(ОбновляемыйОбъект);
			
			Попытка
				ПраваДоступаПользователей.Записать();		
			Исключение
				Отказ = Истина;
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки() + Символы.ПС+ " .Не записаны права доступа к объекту: " + Ссылка);
				Возврат;
			КонецПопытки;
		
		КонецЦикла;
			
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьСписокОбновляемыхОбъектовПриПереносеВГруппу(Ссылка, ОбновляемыеОбъекты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиПравДоступаПользователей.ОбъектДоступа КАК Ссылка
	|ИЗ
	|	РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
	|ГДЕ
	|	НастройкиПравДоступаПользователей.ОбъектДоступа = НастройкиПравДоступаПользователей.ВладелецПравДоступа и 
	|	(НастройкиПравДоступаПользователей.ОбъектДоступа В (&ОбновляемыеОбъекты)";
	
	Если НастройкаПравДоступа.ПолучитьИмяРеквизитаРодителяОбъектаДоступа(Ссылка) = "Родитель" Тогда
		Запрос.Текст = Запрос.Текст + "
		|			ИЛИ НастройкиПравДоступаПользователей.ОбъектДоступа В ИЕРАРХИИ (&Ссылка))";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Иначе
		Запрос.Текст = Запрос.Текст + ")";
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ОбновляемыеОбъекты", ОбновляемыеОбъекты);	
	
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////////////////////////

// Функция определяет наличение движения по регистрам для документа
Функция ОпределитьНаличиеДвиженийПоРегистратору(ДокументСсылка) Экспорт
	ТекстЗапроса = "";	
	// для исключения падения для документов, проводящимся более чем по 256 таблицам
	счетчик_таблиц = 0;
	
	МетаданнныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданнныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение ИЗ МетаданнныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		// имя регистра приводим к Строка(200), см. ниже
		ПолноеИмя = Движение.ПолноеИмя();
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + ПолноеИмя 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + ПолноеИмя 
		+ " ГДЕ Регистратор = &Регистратор";
		
		// если в запрос попадает более 256 таблиц – разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным)
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// при выгрузке для колонки «Имя» тип устанавливается по самой длинной строке из запроса
	// при втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// приводится к строка(200)
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Индексы.Добавить("Имя");	
	
	// если количество таблиц не превысило 256 – возвращаем таблицу
	Если счетчик_таблиц = МетаданнныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;			
	КонецЕсли;
	
	// таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение ИЗ МетаданнныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";	
		
		
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции

Процедура РегистрацияОбъектовДоступаДокумента(ДокументСсылка, ОбъектыДоступа, Замещать = Истина) Экспорт
	
	ОбъектыДоступа.Свернуть("ОбъектДоступа, ВидОбъектаДоступа");
	ОбъектыДоступа.Колонки.Добавить("ДокументСсылка");
	ОбъектыДоступа.ЗаполнитьЗначения(ДокументСсылка, "ДокументСсылка");
	
	Отбор = Новый Структура();
	Отбор.Вставить("ОбъектДоступа",Неопределено);
	МассивСтрок = ОбъектыДоступа.НайтиСтроки(Отбор);
	Для Каждого СтрокаТЗ Из МассивСтрок Цикл
		ОбъектыДоступа.Удалить(СтрокаТЗ);
	КонецЦикла;
	
	Набор = РегистрыСведений.ОбъектыДоступаДокументов.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументСсылка.Установить(ДокументСсылка);
	Набор.Загрузить(ОбъектыДоступа);
	Набор.Записать(Замещать);

КонецПроцедуры

// Предназначена для выполнения запроса в привилегированном модуле. Чаще используется для исключения ошибок 
// доступа к данным. 
//
// Параметры:
//  ТекстЗапроса - Строка, содержащая текст запроса.
//  СтруктураПараметровЗапроса - Структура, содержащая параметры запроса. Данный модуль всегда
//                               выполняется на сервере, поэтому в структуре не должны быть мутабельные значения.
//                               
// Возвращаемое значение:
//  РезультатЗапроса - результат запроса.
//
Функция ВыполнитьЗапросВПривилегированномМодуле(ТекстЗапроса, СтруктураПараметровЗапроса) Экспорт	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Для Каждого ЭлемСтр Из СтруктураПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(ЭлемСтр.Ключ, ЭлемСтр.Значение);
	КонецЦикла;	
	
	РезультатЗапроса = Неопределено;
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
	Возврат РезультатЗапроса;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С УЧЕТНОЙ ПОЛИТИКОЙ

// Функция инициализирует глобальную переменную глУчетнаяПолитикаПоПерсоналуОрганизации.
// Переменная содержит соответствие, где организация является ключом, а поддержка 
// поддержка внутреннего совместительства значением.
//
// Параметры:
//  Нет.
//
Функция ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации() Экспорт
	
	УчетнаяПолитикаПоПерсоналуОрганизации = Новый Соответствие;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.Организации) Тогда
	
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ЕдиныйНумераторКадровыхДокументов, ЛОЖЬ) КАК ЕдиныйНумераторКадровыхДокументов,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПроверкаШтатногоРасписания, ЛОЖЬ) КАК ПроверкаШтатногоРасписания,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.РасчетЗарплатыОрганизацииПоОтветственным, ЛОЖЬ) КАК РасчетЗарплатыОрганизацииПоОтветственным,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ИспользуютсяНачисленияВВалюте, ЛОЖЬ) КАК ИспользуютсяНачисленияВВалюте,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПроверкаПериодовНачисления, ЛОЖЬ) КАК ПроверкаПериодовНачисления,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка, &парамПустойПорядокУчетаВремени) = &парамПустойПорядокУчетаВремени
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка.ПоФактическиОтработанномуВремени)
		|		ИНАЧЕ УчетнаяПолитикаПоПерсоналуОрганизаций.ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка
		|	КОНЕЦ КАК ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка, &парамПустоеИспользованиеГрафиковРаботы) = &парамПустоеИспользованиеГрафиковРаботы
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка.ФактическийГрафикРаботыСотрудника)
		|		ИНАЧЕ УчетнаяПолитикаПоПерсоналуОрганизаций.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка
		|	КОНЕЦ КАК ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка, ЛОЖЬ) КАК УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ВариантУчетаКадровыхПерестановок, Значение(Перечисление.ВариантыУчетаКадровыхПерестановок.ПустаяСсылка)) КАК ВариантУчетаКадровыхПерестановок,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок, ЛОЖЬ) КАК РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.РасчетКоэффициентаНарастающимИтогом, ЛОЖЬ) КАК РасчетКоэффициентаНарастающимИтогом
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
		|		ПО (ВЫБОР
		|				КОГДА Организации.ГоловнаяОрганизация = &парамПустаяОрганизация
		|					ТОГДА Организации.Ссылка
		|				ИНАЧЕ Организации.ГоловнаяОрганизация
		|			КОНЕЦ = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация)");
		
		парамПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		парамПустойПорядокУчетаВремени = Перечисления.ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка.ПустаяСсылка();
		парамПустоеИспользованиеГрафиковРаботы = Перечисления.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка.ПустаяСсылка();
		Запрос.УстановитьПараметр("парамПустаяОрганизация",парамПустаяОрганизация);
		Запрос.УстановитьПараметр("парамПустойПорядокУчетаВремени",парамПустойПорядокУчетаВремени);
		Запрос.УстановитьПараметр("парамПустоеИспользованиеГрафиковРаботы",парамПустоеИспользованиеГрафиковРаботы);
		
		УчетнаяПолитикаПоПерсоналуОрганизации.Вставить(парамПустаяОрганизация, 
			Новый Структура("ЕдиныйНумераторКадровыхДокументов, 
			|ПроверкаШтатногоРасписания,
			|РасчетЗарплатыОрганизацииПоОтветственным,
			|ИспользуютсяНачисленияВВалюте,
			|ПроверкаПериодовНачисления,
			|ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка,
			|ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка,
			|УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка,
			|ВариантУчетаКадровыхПерестановок,
			|РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок,
			|РасчетКоэффициентаНарастающимИтогом",
			Ложь,
			Ложь,
			Ложь,
			Ложь,
			Ложь,
			Перечисления.ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка.ПоФактическиОтработанномуВремени,
			Перечисления.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка.ФактическийГрафикРаботыСотрудника,
			Ложь,
			Перечисления.ВариантыУчетаКадровыхПерестановок.ПодразделениеИлиДолжность,
			Ложь,
			Ложь));
			
		Выборка = Запрос.Выполнить().Выбрать();	
		Пока Выборка.Следующий() Цикл		
			УчетнаяПолитикаПоПерсоналуОрганизации.Вставить(Выборка.Организация, 
				Новый Структура("ЕдиныйНумераторКадровыхДокументов, 
				|ПроверкаШтатногоРасписания,
				|РасчетЗарплатыОрганизацииПоОтветственным,
				|ИспользуютсяНачисленияВВалюте,
				|ПроверкаПериодовНачисления,
				|ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка,
				|ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка,
				|УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка,
				|ВариантУчетаКадровыхПерестановок,
				|РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок,
				|РасчетКоэффициентаНарастающимИтогом",
				Выборка.ЕдиныйНумераторКадровыхДокументов, 
				Выборка.ПроверкаШтатногоРасписания, 
				Выборка.РасчетЗарплатыОрганизацииПоОтветственным,
				Выборка.ИспользуютсяНачисленияВВалюте,
				Выборка.ПроверкаПериодовНачисления,
				Выборка.ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка,
				Выборка.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка,
				Выборка.УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка,
				Выборка.ВариантУчетаКадровыхПерестановок,
				Выборка.РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок,
				Выборка.РасчетКоэффициентаНарастающимИтогом));
		КонецЦикла;
	
	КонецЕсли; 
	
	Возврат УчетнаяПолитикаПоПерсоналуОрганизации;
	
КонецФункции // ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации()

// Функция возвращает соответствие налогоплательщиков для всех возможных структурных единиц
//
// Возвращаемое значение:
//	Соответствие со следующей структурой
//		Ключ - СправочникСсылка.Организации/ПодразделенияОрганизации - все возможные структурные единицы
//		Значение - Структура 
//						Ключ - строка с название вида налога (как имена значения перечисления РазделыНалоговогоУчета)
//						Значение - Структура с такими же полями, как и ресурсы в регистре сведений ИсчислениеНалоговСтруктурныхЕдиниц
//
// Пример обращения к результату:
//		Результат[Справочники.Организации.НайтиПоИмени("ТОО ОГО-ГО")].НалогиСЗаработнойПлаты.Налогоплательщик
// 
Функция ЗаполнитьИсчислениеНалоговСтруктурныхЕдиниц() Экспорт

	//Если НЕ Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить() Тогда
	//	// если в базе не поддерживается работа со структурными единица - ничего не делаем
	//	Возврат Неопределено;
	//КонецЕсли;

	Результат = Новый Соответствие();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК СтруктурнаяЕдиница,
	|	РазделыНалоговогоУчета.Ссылка КАК РазделНалоговогоУчета,
	|	ЕСТЬNULL(ИсчислениеНалогов.Налогоплательщик, Организации.Ссылка) КАК Налогоплательщик,
	|	ВЫБОР
	|		КОГДА НЕ(ИсчислениеНалогов.НалоговыйКомитет ЕСТЬ NULL) 
	|			ТОГДА ВЫБОР
	|					КОГДА ИсчислениеНалогов.НалоговыйКомитет = &ПустойКонтрагент
	|						ТОГДА Организации.НалоговыйКомитет
	|					ИНАЧЕ ИсчислениеНалогов.НалоговыйКомитет
	|				  КОНЕЦ
	|		ИНАЧЕ Организации.НалоговыйКомитет
	|	КОНЕЦ КАК НалоговыйКомитет
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.РазделыНалоговогоУчета КАК РазделыНалоговогоУчета
	|		ПО ИСТИНА
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов
	|		ПО Организации.Ссылка = ИсчислениеНалогов.СтруктурнаяЕдиница
	|			И РазделыНалоговогоУчета.Ссылка = ИсчислениеНалогов.РазделНалоговогоУчета
	|";
	
	Если Метаданные.Справочники.Найти("ПодразделенияОрганизаций") <> Неопределено Тогда
		// если есть этот справочник, значит это бухгалтерия
		// дополним запрос
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка КАК СтруктурнаяЕдиница,
		|	РазделыНалоговогоУчета.Ссылка КАК РазделНалоговогоУчета,
		|	ВЫБОР
		|		КОГДА ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением
		|			ТОГДА ЕСТЬNULL(ИсчислениеНалогов_Подр.Налогоплательщик, ЕСТЬNULL(ИсчислениеНалогов_Орг.Налогоплательщик, ПодразделенияОрганизаций.Владелец)) 
		|		ИНАЧЕ ЕСТЬNULL(ИсчислениеНалогов_Орг.Налогоплательщик, ПодразделенияОрганизаций.Владелец)
		|	КОНЕЦ КАК Налогоплательщик,
		|	ВЫБОР
		|		КОГДА ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением
		|			ТОГДА ВЫБОР
		|					КОГДА НЕ(ИсчислениеНалогов_Подр.НалоговыйКомитет ЕСТЬ NULL)
		|							И ИсчислениеНалогов_Подр.НалоговыйКомитет <> &ПустойКонтрагент
		|						ТОГДА ИсчислениеНалогов_Подр.НалоговыйКомитет
		|					КОГДА НЕ(ИсчислениеНалогов_Орг.НалоговыйКомитет ЕСТЬ NULL)
		|							И ИсчислениеНалогов_Орг.НалоговыйКомитет <> &ПустойКонтрагент
		|						ТОГДА ИсчислениеНалогов_Орг.НалоговыйКомитет
		|					ИНАЧЕ ПодразделенияОрганизаций.Владелец.НалоговыйКомитет
		|				  КОНЕЦ
		|		КОГДА НЕ(ИсчислениеНалогов_Орг.НалоговыйКомитет ЕСТЬ NULL)
		|				И ИсчислениеНалогов_Орг.НалоговыйКомитет <> &ПустойКонтрагент
		|			ТОГДА ИсчислениеНалогов_Орг.НалоговыйКомитет
		|		ИНАЧЕ ПодразделенияОрганизаций.Владелец.НалоговыйКомитет
		|	КОНЕЦ КАК НалоговыйКомитет
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.РазделыНалоговогоУчета КАК РазделыНалоговогоУчета
		|		ПО ИСТИНА
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов_Подр
		|		ПО ПодразделенияОрганизаций.Ссылка = ИсчислениеНалогов_Подр.СтруктурнаяЕдиница
		|			И ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением
		|			И РазделыНалоговогоУчета.Ссылка = ИсчислениеНалогов_Подр.РазделНалоговогоУчета
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов_Орг
		|		ПО ПодразделенияОрганизаций.Владелец = ИсчислениеНалогов_Орг.СтруктурнаяЕдиница
		|			И РазделыНалоговогоУчета.Ссылка = ИсчислениеНалогов_Орг.РазделНалоговогоУчета
		|";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// соотвествие, в котором храним строковые имена разделов налогового учета
	СоответствиеРазделовНУ = Новый Соответствие();
	Для Каждого РазделНУ Из Метаданные.Перечисления.РазделыНалоговогоУчета.ЗначенияПеречисления Цикл
		ИмяРазделаНУ = РазделНУ.Имя;
		СоответствиеРазделовНУ.Вставить(Перечисления.РазделыНалоговогоУчета[ИмяРазделаНУ], ИмяРазделаНУ);
	КонецЦикла;	
	
	Пока Выборка.Следующий() Цикл
		
		ИмяРазделаНУ = СоответствиеРазделовНУ[Выборка.РазделНалоговогоУчета];
		
		ЭлементСоответствияДляСтруктурнойЕдиницы = Результат[Выборка.СтруктурнаяЕдиница];
		Если ЭлементСоответствияДляСтруктурнойЕдиницы = Неопределено Тогда
			Результат.Вставить(Выборка.СтруктурнаяЕдиница, Новый Структура());
			ЭлементСоответствияДляСтруктурнойЕдиницы = Результат[Выборка.СтруктурнаяЕдиница];
		КонецЕсли;
		
		СтруктураИсчислениеНалогов = Новый Структура();
		СтруктураИсчислениеНалогов.Вставить("Налогоплательщик", Выборка.Налогоплательщик);
		СтруктураИсчислениеНалогов.Вставить("НалоговыйКомитет", Выборка.НалоговыйКомитет);
		
		// записываем в формируемое соответствие
		ЭлементСоответствияДляСтруктурнойЕдиницы.Вставить(ИмяРазделаНУ, СтруктураИсчислениеНалогов);
	
	КонецЦикла;

	Возврат Результат;

КонецФункции // ЗаполнитьИсчислениеНалоговСтруктурныхЕдиниц()


////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ПОЛЬЗОВАТЕЛЯМИ

Функция ПроверитьПользователей(ИмяПользователя) Экспорт 
	
	КоличествоПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей().Количество();
	
	Если КоличествоПользователей = 0 Тогда 
		
		НовыйПользователь = ПользователиИнформационнойБазы.СоздатьПользователя();
		НовыйПользователь.АутентификацияОС = Ложь;
		НовыйПользователь.АутентификацияСтандартная = Истина;
		НовыйПользователь.Имя = ИмяПользователя;
		НовыйПользователь.ПолноеИмя = ИмяПользователя;
		НовыйПользователь.ОсновнойИнтерфейс = Метаданные.Интерфейсы.Полный;
		НовыйПользователь.Язык = Метаданные.Языки.Русский;
		НовыйПользователь.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
		НовыйПользователь.Записать();
				
		СтарыйПользователь = Ложь;
	Иначе 
		СтарыйПользователь = Истина;
	КонецЕсли;

	Возврат СтарыйПользователь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ЗАПИСИ ТЕКУЩИХ КАДРОВЫХ ДАННЫХ СОТРУДНИКА

Процедура УстановитьРеквизитыИЗаписатьСотрудникаОрганизации(Выборка, Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		СотрудникОбъект = Выборка.Сотрудник.ПолучитьОбъект();
		
		Если СотрудникОбъект = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СотрудникОбъект.ТекущаяСтруктурнаяЕдиница			= Выборка.ОбособленноеПодразделение;
		СотрудникОбъект.ТекущееПодразделениеОрганизации		= Выборка.ПодразделениеОрганизации;
		СотрудникОбъект.ТекущаяДолжностьОрганизации			= Выборка.Должность;
		СотрудникОбъект.ДатаПриемаНаРаботу					= Выборка.ДатаПриемаНаРаботу;
		СотрудникОбъект.ДатаУвольнения						= Выборка.ДатаУвольнения;
		
		Попытка
			СотрудникОбъект.Заблокировать();
		Исключение
			#Если Клиент Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ИнформацияОбОшибке());
			# Иначе
				ОбщегоНазначения.СообщитьОбОшибке(ИнформацияОбОшибке().Описание);
			# КонецЕсли
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		СотрудникОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьРеквизитыИЗаписатьСотрудника(Выборка, Отказ)

	Пока Выборка.Следующий() Цикл
		
		СотрудникОбъект = Выборка.Сотрудник.ПолучитьОбъект();
		
		Если СотрудникОбъект = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СотрудникОбъект.ТекущееПодразделениеПредприятия	= Выборка.Подразделение;
		СотрудникОбъект.ТекущаяДолжностьПредприятия		= Выборка.Должность;
		СотрудникОбъект.ДатаПриемаНаРаботуВПредприятие	= Выборка.ДатаПриемаНаРаботу;
		СотрудникОбъект.ДатаУвольненияИзПредприятия		= Выборка.ДатаУвольнения;
		
		Попытка	
			СотрудникОбъект.Заблокировать();
		Исключение
			#Если Клиент Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ИнформацияОбОшибке());
			# Иначе
				ОбщегоНазначения.СообщитьОбОшибке(ИнформацияОбОшибке().Описание);
			# КонецЕсли
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		СотрудникОбъект.ПолучитьКадровыеДанныеФизлица = Ложь;
		СотрудникОбъект.Записать();
		
	КонецЦикла;

КонецПроцедуры

// В процедуре всем сотрудникам, которые есть в документе регистраторе,
// устанавливаются текущие кадровые данные
// Перед записью данных необходимо отобрать данные без учета регистратора
// При записи данных необходимо отбирать данные с учетом регистратора
//
Процедура ЗаписатьТекущиеКадровыеДанныеСотрудникаОрганизации(Отказ, Замещение, БезРегистратора, Регистратор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаботникиОрганизаций.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.Регистратор = &Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	РаботникиОрганизацийСрезПоследних.Должность КАК Должность,
	|	ЕСТЬNULL(РаботникиОрганизацийПрием.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПриемаНаРаботу,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РаботникиОрганизацийУвольнение.Период, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ РаботникиОрганизацийУвольнение.Период
	|	КОНЕЦ КАК ДатаУвольнения
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				,
	|				Сотрудник В
	|						(ВЫБРАТЬ
	|							Сотрудники.Сотрудник
	|						ИЗ
	|							ВТСотрудники КАК Сотрудники)
	|					" + ?(БезРегистратора, "И Регистратор <> &Регистратор", "") + "
	|) КАК РаботникиОрганизацийСрезПоследних
	|		ПО Сотрудники.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийПрием
	|		ПО Сотрудники.Сотрудник = РаботникиОрганизацийПрием.Сотрудник
	|			И (РаботникиОрганизацийПрием.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
	|			" + ?(БезРегистратора, "И (РаботникиОрганизацийПрием.Регистратор <> &Регистратор)", "") + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийУвольнение
	|		ПО Сотрудники.Сотрудник = РаботникиОрганизацийУвольнение.Сотрудник
	|			И (РаботникиОрганизацийУвольнение.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|			" + ?(БезРегистратора, "И (РаботникиОрганизацийУвольнение.Регистратор <> &Регистратор)", "") + "
	|ГДЕ
	|	(Сотрудники.Сотрудник.ТекущаяСтруктурнаяЕдиница <> ЕСТЬNULL(РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение
	|					, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|			ИЛИ Сотрудники.Сотрудник.ТекущееПодразделениеОрганизации <> ЕСТЬNULL(РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
	|					, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
	|			ИЛИ Сотрудники.Сотрудник.ТекущаяДолжностьОрганизации <> ЕСТЬNULL(РаботникиОрганизацийСрезПоследних.Должность
	|					, ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка))
	|			ИЛИ Сотрудники.Сотрудник.ДатаПриемаНаРаботу <> ЕСТЬNULL(РаботникиОрганизацийПрием.Период, ДАТАВРЕМЯ(1, 1, 1))
	|			ИЛИ Сотрудники.Сотрудник.ДатаУвольнения <> ЕСТЬNULL(РаботникиОрганизацийУвольнение.Период, ДАТАВРЕМЯ(1, 1, 1)))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьРеквизитыИЗаписатьСотрудникаОрганизации(Выборка, Отказ);
	
КонецПроцедуры

// В процедуре всем сотрудникам, которые есть в документе регистраторе,
// устанавливаются текущие кадровые данные
// Перед записью данных необходимо отобрать данные без учета регистратора
// При записи данных необходимо отбирать данные с учетом регистратора
//
Процедура ЗаписатьТекущиеКадровыеДанныеСотрудника(Отказ, Замещение, БезРегистратора, Регистратор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Работники.ФизЛицо КАК Физлицо
	|ПОМЕСТИТЬ ВТФизлица
	|ИЗ
	|	РегистрСведений.Работники КАК Работники
	|ГДЕ
	|	Работники.Регистратор = &Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	СотрудникиОрганизаций.Физлицо КАК Физлицо
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Физлицо В
	|			(ВЫБРАТЬ
	|				Физлица.Физлицо
	|			ИЗ
	|				ВТФизлица КАК Физлица)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Физлицо
	|; 
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиПодразделение.ФизЛицо,
	|	РаботникиПодразделение.Подразделение,
	|	РаботникиПодразделение.Должность
	|ПОМЕСТИТЬ ВТ_РаботникиПодразделениеДолжность
	|ИЗ
	|	РегистрСведений.Работники.СрезПоследних(
	|			,
	|			Физлицо В
	|					(ВЫБРАТЬ
	|						Физлица.Физлицо
	|					ИЗ
	|						ВТФизлица КАК Физлица)
	|					" + ?(БезРегистратора, "И Регистратор <> &Регистратор", "") + ") КАК РаботникиПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	Сотрудники.Сотрудник.Физлицо КАК Физлицо,
	|	РаботникиСрезПоследних.Подразделение КАК Подразделение,
	|	РаботникиСрезПоследних.Должность КАК Должность,
	|	ЕСТЬNULL(РаботникиПрием.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПриемаНаРаботу,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РаботникиУвольнение.Период, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ЕСТЬNULL(РаботникиПрием.Период, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(РаботникиУвольнение.Период, ДАТАВРЕМЯ(1, 1, 1))
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(РаботникиУвольнение.Период, ДЕНЬ, -1)
	|	КОНЕЦ КАК ДатаУвольнения
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаботникиПодразделениеДолжность КАК РаботникиСрезПоследних
	|		ПО Сотрудники.Физлицо = РаботникиСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники.СрезПоследних(
	|				,
	|				Физлицо В
	|						(ВЫБРАТЬ
	|							Физлица.Физлицо
	|						ИЗ
	|							ВТФизлица КАК Физлица)
	|					И ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|					" + ?(БезРегистратора, "И Регистратор <> &Регистратор", "") + ") КАК РаботникиПрием
	|		ПО Сотрудники.Физлицо = РаботникиПрием.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники.СрезПоследних(
	|				,
	|				Физлицо В
	|						(ВЫБРАТЬ
	|							Физлица.Физлицо
	|						ИЗ
	|							ВТФизлица КАК Физлица)
	|					И ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					" + ?(БезРегистратора, "И Регистратор <> &Регистратор", "") + ") КАК РаботникиУвольнение
	|		ПО Сотрудники.Физлицо = РаботникиУвольнение.ФизЛицо
	|ГДЕ
	|	(Сотрудники.Сотрудник.ТекущееПодразделениеПредприятия <> ЕСТЬNULL(РаботникиСрезПоследних.Подразделение, ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка))
	|			ИЛИ Сотрудники.Сотрудник.ТекущаяДолжностьПредприятия <> ЕСТЬNULL(РаботникиСрезПоследних.Должность, ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка))
	|			ИЛИ Сотрудники.Сотрудник.ДатаПриемаНаРаботуВПредприятие <> ЕСТЬNULL(РаботникиПрием.Период, ДАТАВРЕМЯ(1, 1, 1))
	|			ИЛИ Сотрудники.Сотрудник.ДатаУвольненияИзПредприятия <> ЕСТЬNULL(РаботникиУвольнение.Период, ДАТАВРЕМЯ(1, 1, 1)))";
	
	// временная таблица ВТ_РаботникиПодразделениеДолжность используется в переопределяемой части запроса
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьРеквизитыИЗаписатьСотрудника(Выборка, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ КАДРОВЫХ ДОКУМЕНТОВ

// Функция возвращает текст запроса для получения периодов использования ресурсов
//
// Параметры:
//	ИмяРегистра		- имя регистра
//	ДатаНачала		- имя параметра "дата начала" интревала за который необходимо получить периоды, 
//					  если не задана - то "от самого начала"
//	ДатаОкончания	- имя параметра "дата окончания" интервала за который необходимо получить периоды, 
//					  если не задана - то "до самомго конца"
//	Условие			- условие, по которому отбираются перичные записи регистра. Условия пишется на поля 
//					  регистра периодов с применением алиаса "Периоды". Например: "Периоды.Физлицо В (&Физлица)"
//
// Возвращает:
//	Текст запроса, содержащий поля:
//		Регистратор1	- ссылка на регистратор, который определяет период
//		Регистратор2	- ссылка на второй регистратор, который определяет период (для 
//						  периодов, которые определяются двумя событиями)
//		<Измерение>		- все измерения регистра кроме ДатаНачала и ДатаОкончания
//		ДатаНачала		- начало полученного виртуального периода
//		ДатаОкончания	- окончание полученного виртуального периода
//
Функция ПериодыИспользованияРесурсов(ИмяРегистра, ДатаНачала = Неопределено, ДатаОкончания = Неопределено, Условие = "", УчитыватьРегистратор = Истина, МаксимальныйИнтервал = Неопределено) Экспорт
	
	ИмяТаблицы = "РегистрСведений." + ИмяРегистра;
	РегистрМД = Метаданные.НайтиПоПолномуИмени(ИмяТаблицы);
	Измерения = Новый Массив;
	Для Каждого Измерение Из РегистрМД.Измерения Цикл
		Имя = Измерение.Имя;
		Если Имя = "ДатаНачала" или Имя = "ДатаОкончания" Тогда
			Продолжить;
		КонецЕсли;
		Измерения.Добавить(Имя);
	КонецЦикла;
		
	Текст =
	"ВЫБРАТЬ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|	Периоды." + Измерение + " КАК " + Измерение + ",";
	КонецЦикла;
	Текст = Текст + "
	|	Периоды.Регистратор КАК Регистратор1,
	|	NULL КАК Регистратор2,
	|	Периоды.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(ПериодыВсп.ДатаНачала) ЕСТЬ NULL 
	|			ТОГДА Периоды.ДатаОкончания
	|		ИНАЧЕ МИНИМУМ(ПериодыВсп.ДатаНачала)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	" + ИмяТаблицы + " КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК ПериодыВсп
	|		ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "Периоды." + Измерение + " = ПериодыВсп." + Измерение + "
		|		И ";
	КонецЦикла;
	Текст = Текст + "ПериодыВсп.ДатаНачала > Периоды.ДатаНачала
	|			И ПериодыВсп.ДатаНачала < Периоды.ДатаОкончания
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК Проверка
	|		ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "Периоды." + Измерение + " = Проверка." + Измерение + "
		|		И ";
	КонецЦикла;
	Текст = Текст + "Проверка.ДатаОкончания > Периоды.ДатаНачала
	|			И Проверка.ДатаОкончания < Периоды.ДатаОкончания
	|			И (Проверка.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
	|ГДЕ";
	Если Не ПустаяСтрока(Условие) Тогда
		Текст = Текст + "
		|	" + Условие + "
		|	И ";
	КонецЕсли;
	Если Не УчитыватьРегистратор Тогда
		Текст = Текст + "
		|	Периоды.Регистратор <> &Регистратор
		|	И ";
	КонецЕсли;
	Если ДатаНачала <> Неопределено ИЛИ ДатаОкончания <> Неопределено Тогда
		Текст = Текст + "(";
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
		Текст = Текст + "Периоды.ДатаНачала >= &" + ДатаНачала + "
		|	";
	КонецЕсли;
	Если ДатаОкончания <> Неопределено Тогда
		Если ДатаНачала <> Неопределено Тогда
			Текст = Текст + "И ";
		КонецЕсли;
		Текст = Текст + "Периоды.ДатаНачала <= &" + ДатаОкончания + "
		|	";
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
		Текст = Текст + "ИЛИ &ДатаНачала >= Периоды.ДатаНачала
		|	И &ДатаНачала <= Периоды.ДатаОкончания";
	КонецЕсли;
	Если ДатаНачала <> Неопределено ИЛИ ДатаОкончания <> Неопределено Тогда
		Текст = Текст + ") И ";
	КонецЕсли;
	Текст = Текст + "Периоды.ДатаНачала <> ДАТАВРЕМЯ(1,1,1)
	|		И Периоды.ДатаОкончания <> ДАТАВРЕМЯ(1,1,1)
	|		И Проверка.ДатаНачала ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|	Периоды." + Измерение + ",";
	КонецЦикла;
	Текст = Текст + "
	|	Периоды.Регистратор,
	|	Периоды.ДатаНачала,
	|	Периоды.ДатаОкончания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|	Периоды." + Измерение + " КАК " + Измерение + ",";
	КонецЦикла;
	Текст = Текст + "
	|	Периоды.Регистратор1,
	|	Периоды.Регистратор2,
	|	Периоды.ДатаНачала,
	|	Периоды.ДатаОкончания
	|ИЗ
	|	(ВЫБРАТЬ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|		МаксимальныеПериоды." + Измерение +" КАК " + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|		Периоды.Регистратор КАК Регистратор1,
	|		ВЫБОР
	|			КОГДА
	|				МаксимальныеПериоды.Регистратор <> Периоды.Регистратор
	|					ТОГДА МаксимальныеПериоды.Регистратор
	|		КОНЕЦ КАК Регистратор2,
	|		ЕСТЬNULL(Периоды.ДатаНачала, ДАТАВРЕМЯ(1,1,1)) КАК ДатаНачала,
	|		МаксимальныеПериоды.ДатаОкончания КАК ДатаОкончания
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Периоды.Регистратор КАК Регистратор,";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|			Периоды." + Измерение +" КАК " + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|			Периоды.ДатаОкончания КАК ДатаОкончания,
	|			МАКСИМУМ(ПериодыПредыдущие.ДатаНачала) КАК МаксДата
	|		ИЗ
	|			" + ИмяТаблицы + " КАК Периоды
	|				ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК ПериодыПредыдущие
	|				ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "Периоды." + Измерение +" = ПериодыПредыдущие." + Измерение +"
		|				И ";
	КонецЦикла;
	Если Не УчитыватьРегистратор Тогда
		Текст = Текст + "ПериодыПредыдущие.Регистратор <> &Регистратор
		|				И ";
	КонецЕсли;		
	Если МаксимальныйИнтервал <> Неопределено Тогда
		Текст = Текст + "(ПериодыПредыдущие.ДатаНачала > ДОБАВИТЬКДАТЕ(Периоды.ДатаОкончания, ДЕНЬ, -&МаксимальныйИнтервал))
		|				И ";
	КонецЕсли;
	Текст = Текст + "Периоды.ДатаОкончания > ПериодыПредыдущие.ДатаНачала
	|		ГДЕ";
	Если Не ПустаяСтрока(Условие) Тогда
		Текст = Текст + "
		|		" + Условие + "
		|		И ";
	КонецЕсли;
	Если Не УчитыватьРегистратор Тогда
		Текст = Текст + "Периоды.Регистратор <> &Регистратор
		|		И ";
	КонецЕсли;		
	Если ДатаНачала <> Неопределено ИЛИ ДатаОкончания <> Неопределено Тогда
		Текст = Текст + "(";
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
		Текст = Текст + "Периоды.ДатаОкончания >= &" + ДатаНачала + "
		|	";
	КонецЕсли;
	Если ДатаОкончания <> Неопределено Тогда
		Если ДатаНачала <> Неопределено Тогда
			Текст = Текст + "И ";
		КонецЕсли;
		Текст = Текст + "Периоды.ДатаОкончания <= &" + ДатаОкончания + "
		|	";
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
		Текст = Текст + "ИЛИ &ДатаНачала <= Периоды.ДатаОкончания";
	КонецЕсли;
	Если ДатаНачала <> Неопределено ИЛИ ДатаОкончания <> Неопределено Тогда
		Текст = Текст + ") И ";
	КонецЕсли;
	Текст = Текст +
	"			Периоды.ДатаНачала = ДАТАВРЕМЯ(1,1,1)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Регистратор,";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|			Периоды." + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|			Периоды.ДатаОкончания) КАК МаксимальныеПериоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК Периоды
	|			ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "Периоды." + Измерение +" = МаксимальныеПериоды." + Измерение +"
		|				И ";
	КонецЦикла;
	Текст = Текст + "МаксимальныеПериоды.МаксДата = Периоды.ДатаНачала
	|				И (Периоды.ДатаНачала <> ДАТАВРЕМЯ(1,1,1))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|		МинимальныеПериоды." + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|		МинимальныеПериоды.Регистратор КАК Регистратор1,
	|		ВЫБОР КОГДА Периоды.Регистратор <> МинимальныеПериоды.Регистратор ТОГДА Периоды.Регистратор КОНЕЦ КАК Регистратор2,
	|		МинимальныеПериоды.ДатаНачала,
	|		ЕСТЬNULL(Периоды.ДатаОкончания, ДАТАВРЕМЯ(1,1,1))
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Периоды.Регистратор КАК Регистратор,";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|			Периоды." + Измерение +" КАК " + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|			Периоды.ДатаНачала КАК ДатаНачала,
	|			МИНИМУМ(ПериодыСледующие.ДатаОкончания) КАК МинДата
	|		ИЗ
	|			" + ИмяТаблицы + " КАК Периоды
	|				ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК ПериодыСледующие
	|				ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "Периоды." + Измерение +" = ПериодыСледующие." + Измерение +"
		|				И ";
	КонецЦикла;
	Если Не УчитыватьРегистратор Тогда
		Текст = Текст + "ПериодыСледующие.Регистратор <> &Регистратор
		|				И ";
	КонецЕсли;
	Если МаксимальныйИнтервал <> Неопределено Тогда
		Текст = Текст + "(ПериодыСледующие.ДатаОкончания < ДОБАВИТЬКДАТЕ(Периоды.ДатаНачала, ДЕНЬ, &МаксимальныйИнтервал))
		|				И ";
	КонецЕсли;
	Текст = Текст + "Периоды.ДатаНачала < ПериодыСледующие.ДатаОкончания
	|					И ПериодыСледующие.ДатаНачала = ДАТАВРЕМЯ(1,1,1)
	|		ГДЕ";
	Если Не ПустаяСтрока(Условие) Тогда
		Текст = Текст + "
		|" + Условие + "
		|	И ";
	КонецЕсли;
	Если Не УчитыватьРегистратор Тогда
		Текст = Текст + "
		|Периоды.Регистратор <> &Регистратор
		|	И ";
	КонецЕсли;
	Если ДатаНачала <> Неопределено ИЛИ ДатаОкончания <> Неопределено Тогда
		Текст = Текст + "(";
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
		Текст = Текст + "ВЫБОР КОГДА Периоды.ДатаНачала = ДАТАВРЕМЯ(1,1,1) ТОГДА Периоды.ДатаОкончания ИНАЧЕ Периоды.ДатаНачала КОНЕЦ >= &" + ДатаНачала + "
		|	";
	КонецЕсли;
	Если ДатаОкончания <> Неопределено Тогда
		Если ДатаНачала <> Неопределено Тогда
			Текст = Текст + "И ";
		КонецЕсли;
		Текст = Текст + "ВЫБОР КОГДА Периоды.ДатаНачала = ДАТАВРЕМЯ(1,1,1) ТОГДА Периоды.ДатаОкончания ИНАЧЕ Периоды.ДатаНачала КОНЕЦ <= &" + ДатаОкончания + "
		|	";
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
		Текст = Текст + "ИЛИ &ДатаНачала >= ВЫБОР КОГДА Периоды.ДатаНачала = ДАТАВРЕМЯ(1,1,1) ТОГДА Периоды.ДатаОкончания ИНАЧЕ Периоды.ДатаНачала КОНЕЦ
		|	И &ДатаНачала <= Периоды.ДатаОкончания";
	КонецЕсли;
	Если ДатаНачала <> Неопределено ИЛИ ДатаОкончания <> Неопределено Тогда
		Текст = Текст + ") И ";
	КонецЕсли;
	Текст = Текст + "Периоды.ДатаОкончания = ДАТАВРЕМЯ(1,1,1)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Регистратор,";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|			Периоды." + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|			Периоды.ДатаНачала) КАК МинимальныеПериоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК Периоды
	|			ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "Периоды." + Измерение +" = МинимальныеПериоды." + Измерение +"
		|				И ";
	КонецЦикла;
	Текст = Текст + "МинимальныеПериоды.МинДата = Периоды.ДатаОкончания
	|				И (Периоды.ДатаОкончания <> ДАТАВРЕМЯ(1,1,1))) КАК Периоды";
	Возврат Текст;
	
КонецФункции

Процедура ПолучитьОшибкиПериодовРаботыСотрудника(Регистратор, УчитыватьРегистратор, МассивФизлица, Организация, ВидЗанятости, СообщенияОбОшибках, ОшибкиПериодов) Экспорт
	
	Запрос = Новый Запрос;
	
	ТаблицаПериодов = ПериодыИспользованияРесурсов("ПериодыРаботыРаботниковОрганизаций", , , "Периоды.Физлицо В (&Физлица) И Периоды.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации." + ВидЗанятости + ")" + ?(ВидЗанятости <> "ОсновноеМестоРаботы", " И Периоды.Организация = &Организация", ""), УчитыватьРегистратор);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистратор1,
	|	Регистратор2,
	|	ПРЕДСТАВЛЕНИЕ(Регистратор1) КАК ПредставлениеРегистратор1,
	|	ПРЕДСТАВЛЕНИЕ(Регистратор2) КАК ПредставлениеРегистратор2,
	|	Регистратор1.Организация.ГоловнаяОрганизация КАК Регистратор1ГоловнаяОрганизация,
	|	Регистратор2.Организация.ГоловнаяОрганизация КАК Регистратор2ГоловнаяОрганизация,
	|	Физлицо,
	|	Физлицо.Наименование КАК ФизлицоНаименование,
	|	ДатаНачала,
	|	ДатаОкончания
	|ИЗ                                   
	|	(" + ТаблицаПериодов + ") КАК Периоды
	|УПОРЯДОЧИТЬ ПО
	|	ФизлицоНаименование,
	|	ДатаНачала";
	
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Физлица",		МассивФизлица);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// обработаем периоды
	ТекущееФизлицо						= Неопределено;
	ПоследняяДатаНачала					= '0001-01-01';
	ПоследняяДатаОкончания				= '0001-01-01';
	ПоследнийРегистратор1				= Неопределено;
	ПоследнийРегистратор2				= Неопределено;
	ПоследнийПредставлениеРегистратор1	= "";
	ПоследнийПредставлениеРегистратор2	= "";
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекущееФизлицо <> Выборка.Физлицо Тогда
			ТекущееФизлицо = Выборка.Физлицо;
			
		ИначеЕсли (ПоследняяДатаОкончания > Выборка.ДатаНачала) ИЛИ (ПоследняяДатаОкончания = '0001-01-01') Тогда
			Если ОшибкиПериодов <> НеОпределено Тогда
				ОшибкиПериодов[Выборка.Физлицо] = 0;
			КонецЕсли;
			// сообщения формируем для переданного регистратора или все, если регистратор не задан 
			Если СообщенияОбОшибках <> НеОпределено И
				   (Регистратор = НеОпределено ИЛИ
					ПоследнийРегистратор1 = Регистратор ИЛИ
					ПоследнийРегистратор2 = Регистратор ИЛИ
					Выборка.Регистратор1 = Регистратор ИЛИ
					Выборка.Регистратор2 = Регистратор) Тогда
				СообщениеОбОшибке = Новый Структура("Физлицо,
													|ДатаНачала, 
													|ДатаОкончания, 
													|ДатаНачалаПред, 
													|ДатаОкончанияПред, 
													|Регистратор1, 
													|Регистратор2, 													
													|Регистратор1ГоловнаяОрганизация, 
													|Регистратор2ГоловнаяОрганизация, 
													|ПослРегистратор1, 
													|ПослРегистратор2,
													|Регистратор1Ссылка, 
													|Регистратор2Ссылка, 
													|ПослРегистратор1Ссылка, 
													|ПослРегистратор2Ссылка");
				СообщениеОбОшибке.Физлицо			= Выборка.ФизлицоНаименование;
				СообщениеОбОшибке.ДатаНачала		= Выборка.ДатаНачала;
				СообщениеОбОшибке.ДатаОкончания		= Выборка.ДатаОкончания;
				СообщениеОбОшибке.Регистратор1ГоловнаяОрганизация = Выборка.Регистратор1ГоловнаяОрганизация;
				СообщениеОбОшибке.Регистратор2ГоловнаяОрганизация = Выборка.Регистратор2ГоловнаяОрганизация;
				СообщениеОбОшибке.ДатаНачалаПред	= ПоследняяДатаНачала;
				СообщениеОбОшибке.ДатаОкончанияПред	= ПоследняяДатаОкончания;
				
				СообщениеОбОшибке.Регистратор1Ссылка 		= Выборка.Регистратор1;
				СообщениеОбОшибке.Регистратор2Ссылка 		= Выборка.Регистратор2;
				СообщениеОбОшибке.ПослРегистратор1Ссылка 	= ПоследнийРегистратор1;
				СообщениеОбОшибке.ПослРегистратор2Ссылка 	= ПоследнийРегистратор2;
				
				Если Выборка.Регистратор1 = Регистратор Тогда
					СообщениеОбОшибке.Регистратор1 = Выборка.ПредставлениеРегистратор1 + " (текущий документ)";
				Иначе
					СообщениеОбОшибке.Регистратор1 = "" + Выборка.ПредставлениеРегистратор1;
				КонецЕсли;
				
				Если Выборка.Регистратор2 = Регистратор Тогда
					СообщениеОбОшибке.Регистратор2 = Выборка.ПредставлениеРегистратор2 + " (текущий документ)";
				Иначе
					СообщениеОбОшибке.Регистратор2 = "" + Выборка.ПредставлениеРегистратор2;
				КонецЕсли;
				
				Если Выборка.Регистратор1 <> ПоследнийРегистратор1 
					И Выборка.Регистратор2 <> ПоследнийРегистратор1 Тогда
					Если ПоследнийРегистратор1 = Регистратор Тогда
						СообщениеОбОшибке.ПослРегистратор1 = ПоследнийПредставлениеРегистратор1 + " (текущий документ)";
					Иначе
						СообщениеОбОшибке.ПослРегистратор1 = "" + ПоследнийПредставлениеРегистратор1;
					КонецЕсли;
				КонецЕсли;
				
				Если Выборка.Регистратор1 <> ПоследнийРегистратор2 
					И Выборка.Регистратор2 <> ПоследнийРегистратор2 Тогда
					Если ПоследнийРегистратор2 = Регистратор Тогда
						СообщениеОбОшибке.ПослРегистратор2 = ПоследнийПредставлениеРегистратор2 + " (текущий документ)";
					Иначе
						СообщениеОбОшибке.ПослРегистратор2 = "" + ПоследнийПредставлениеРегистратор2;
					КонецЕсли;
				КонецЕсли;
				
				СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
				
			КонецЕсли;
		КонецЕсли;
		
		ПоследнийРегистратор1				= Выборка.Регистратор1;
		ПоследнийРегистратор2				= Выборка.Регистратор2;
		ПоследнийПредставлениеРегистратор1	= Выборка.ПредставлениеРегистратор1;
		ПоследнийПредставлениеРегистратор2	= Выборка.ПредставлениеРегистратор2;
		ПоследняяДатаНачала					= Выборка.ДатаНачала;
		ПоследняяДатаОкончания				= Выборка.ДатаОкончания;
	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибке(СообщатьОбОшибкахПериодов, СообщенияОбОшибках, ВидЗанятости, Отказ) Экспорт
	
	Если СообщатьОбОшибкахПериодов Тогда
		Для Каждого Сообщение Из СообщенияОбОшибках Цикл
			СтрокаСообщениеОбОшибке = Сообщение.Физлицо + ": сотрудник уже работает " + "по " + ВидЗанятости + " в организации " + Сообщение.Регистратор1ГоловнаяОрганизация + Символы.ПС+ "(" + 
			Формат(Сообщение.ДатаНачала, "ДФ='дд МММ гг ""г.""'") + ?(Сообщение.ДатаОкончанияПред <> Дата("00010101"), " - ", " ") + 
			Формат(Сообщение.ДатаОкончания, "ДФ='дд МММ гг ""г.""'") + " и " + 
			Формат(Сообщение.ДатаНачалаПред, "ДФ='дд МММ гг ""г.""'") +  ?(Сообщение.ДатаОкончанияПред <> Дата("00010101"), " - ", " ") + 
			Формат(Сообщение.ДатаОкончанияПред, "ДФ='дд МММ гг ""г.""'") + ")";
			СтрокаСообщениеОбОшибке = СтрокаСообщениеОбОшибке + Символы.ПС + "Документы, которые противоречат друг другу:";
			Если НЕ ПустаяСтрока(Сообщение.Регистратор1) Тогда
				СтрокаСообщениеОбОшибке = СтрокаСообщениеОбОшибке + Символы.ПС + "   " + Сообщение.Регистратор1;
			КонецЕсли;
			Если НЕ ПустаяСтрока(Сообщение.Регистратор2) Тогда
				СтрокаСообщениеОбОшибке = СтрокаСообщениеОбОшибке + Символы.ПС + "   " + Сообщение.Регистратор2;
			КонецЕсли;
			Если НЕ ПустаяСтрока(Сообщение.ПослРегистратор1) Тогда
				СтрокаСообщениеОбОшибке = СтрокаСообщениеОбОшибке + Символы.ПС + "   " + Сообщение.ПослРегистратор1;
			КонецЕсли;
			Если НЕ ПустаяСтрока(Сообщение.ПослРегистратор2) Тогда
				СтрокаСообщениеОбОшибке = СтрокаСообщениеОбОшибке + Символы.ПС + "   " + Сообщение.ПослРегистратор2;
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщениеОбОшибке);
			Отказ = Истина;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ПО ЗАРПЛАТЕ, КОТОРЫЕ НАДО ВЫПОЛНЯТЬ В ПРИВИЛЕГИРОВАННОМ МОДУЛЕ

// Возвращает следующий по порядку табельный номер в пределах организации.
//
Функция ОпределитьМаксимальныйТабельныйНомер(Организация = Неопределено, ВидДоговора = Неопределено, Ссылка) Экспорт 

	Если НЕ ЗначениеЗаполнено(ВидДоговора) Тогда
		Возврат "";
	КонецЕсли;
	
	Префикс = "";
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	парамВидДоговора = Новый Массив;
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		парамВидДоговора.Добавить(Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
		парамВидДоговора.Добавить(Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий);
	Иначе
		Префикс = "д";
		парамВидДоговора.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		парамВидДоговора.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		парамВидДоговора.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Лицензионный);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамВидДоговора", парамВидДоговора);
	Запрос.УстановитьПараметр("Ссылка",			  Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СотрудникиОрганизаций.Код) КАК Код
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Организация = &парамОрганизация
	|	И СотрудникиОрганизаций.ВидДоговора В (&парамВидДоговора)
	|	И СотрудникиОрганизаций.Ссылка <> &Ссылка";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатаЗапроса = Запрос.Выполнить();
	Если РезультатаЗапроса.Пустой() Тогда
		Возврат ?(ЗначениеЗаполнено(Префикс), Префикс + "000000001", "0000000001");
	Иначе
		СтрокаРезультата = РезультатаЗапроса.Выгрузить()[0];
		Если НЕ ЗначениеЗаполнено(СтрокаРезультата.Код) Тогда
			Возврат ?(ЗначениеЗаполнено(Префикс), Префикс + "000000001", "0000000001");
		Иначе
			Возврат ПроцедурыУправленияПерсоналом.ПолучитьСледующийНомер(СокрП(СтрокаРезультата.Код));
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ОпределитьМаксимальныйТабельныйНомер()

///////////////////////////////////////////////////////////////////////////////
// МЕХАНИЗМ СОЗДАНИЯ ПОЛЬЗОВАТЕЛЕЙ

Процедура ЗаписатьНастройкиПоУмолчаниюНовогоПользователя(НовыйПользователь) Экспорт

	ПользовательОбъект = НовыйПользователь.ПолучитьОбъект();
	ПользовательОбъект.ОбновитьНастройки(ПользовательОбъект.ПолучитьДеревоНастроекПользователя(Истина), Истина, Истина);

КонецПроцедуры

Процедура ОбработатьУстановкуВозможногоПрефиксаИнформационнойБазы(Значение) Экспорт
	
	Если ПустаяСтрока(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Первые 1 1
	               |	
	               |ИЗ
	               |	РегистрСведений.ПрефиксыИнформационныхБаз КАК ПрефиксыИнформационныхБаз
				   |ГДЕ
				   |	ПрефиксыИнформационныхБаз.Префикс = &Префикс";
				   
	Запрос.УстановитьПараметр("Префикс", Значение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписейРегистра = РегистрыСведений.ПрефиксыИнформационныхБаз.СоздатьНаборЗаписей();
	
	НаборЗаписейРегистра.Отбор.Префикс.Установить(Значение);
	
	СтрокаРегистра = НаборЗаписейРегистра.Добавить();
	
	СтрокаРегистра.Префикс = Значение;
		
	НаборЗаписейРегистра.Записать();
	
КонецПроцедуры

Процедура ПроверкаНастроекПользователей(ГруппаПользователей, ВыводСообщения = Ложь) Экспорт
	              
	// формирование списка разрешенных объектов доступа
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиПравДоступаПользователей.ОбъектДоступа,
				   |	НастройкиПравДоступаПользователей.ВидОбъектаДоступа КАК ДоступныеВиды,
	               |	ВЫБОР
	               |		КОГДА НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.СтруктурныеПодразделения)
	               |			ТОГДА ""РазрешенныеСтруктурныеПодразделения""
	               |		ИНАЧЕ ""РазрешенныеОбъекты""
	               |	КОНЕЦ КАК ВидОбъектаДоступа
	               |ИЗ
	               |	РегистрСведений.НазначениеВидовОбъектовДоступа КАК НазначениеВидовОбъектовДоступа
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
	               |		ПО НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = НастройкиПравДоступаПользователей.ВидОбъектаДоступа
	               |ГДЕ
	               |	НазначениеВидовОбъектовДоступа.ГруппаПользователей = &ГруппаПользователей
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НастройкиПравДоступаПользователей.ОбъектДоступа,
				   |	НастройкиПравДоступаПользователей.ВидОбъектаДоступа,
	               |	ВЫБОР
	               |		КОГДА НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.СтруктурныеПодразделения)
	               |			ТОГДА ""РазрешенныеСтруктурныеПодразделения""
	               |		ИНАЧЕ ""РазрешенныеОбъекты""
	               |	КОНЕЦ";
				   
	Запрос.УстановитьПараметр("ГруппаПользователей", ГруппаПользователей);
	
	ВыборкаОграниченийПоВидамОбъектовДоступа = Запрос.Выполнить().Выгрузить();
	
	Если ВыборкаОграниченийПоВидамОбъектовДоступа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановленныеВидыОбъектовДоступа = ВыборкаОграниченийПоВидамОбъектовДоступа.Скопировать(,"ДоступныеВиды");
	УстановленныеВидыОбъектовДоступа.Свернуть("ДоступныеВиды");

	РЛСПоСтруктурномуПодразделению = ?(УстановленныеВидыОбъектовДоступа.Найти(Перечисления.ВидыОбъектовДоступа.СтруктурныеПодразделения) = Неопределено, Ложь, Истина);
	РЛСПоФизическимЛицам		   = ?(УстановленныеВидыОбъектовДоступа.Найти(Перечисления.ВидыОбъектовДоступа.ФизическиеЛица) = Неопределено, Ложь, Истина);
	РЛСПоКассам					   = ?(УстановленныеВидыОбъектовДоступа.Найти(Перечисления.ВидыОбъектовДоступа.Кассы) = Неопределено, Ложь, Истина);
	
	// формирование списка конфликтных настроек пользователей группы
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиПользователей.Пользователь КАК Пользователь,
	               |	НастройкиПользователей.Настройка КАК Настройка,
	               |	НастройкиПользователей.Значение,
	               |	ВЫБОР
	               |		КОГДА НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |		КОГДА НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ОсновнойСклад)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	               |	КОНЕЦ КАК НовоеЗначение
	               |ИЗ
	               |	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователейПользователиГруппы
	               |		ПО НастройкиПользователей.Пользователь = ГруппыПользователейПользователиГруппы.Пользователь
	               |ГДЕ
	               |	ГруппыПользователейПользователиГруппы.Ссылка = &ГруппаПользователей
	               |	И НастройкиПользователей.Настройка В
	               |			(ВЫБРАТЬ
	               |				ВЫБОР
	               |					КОГДА НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.Организации)
	               |						ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация)
	               |					КОГДА НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.Склады)
	               |						ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ОсновнойСклад)
	               |				КОНЕЦ КАК НастройкаПользователя
	               |			ИЗ
	               |				РегистрСведений.НазначениеВидовОбъектовДоступа КАК НазначениеВидовОбъектовДоступа
	               |			ГДЕ
	               |				НазначениеВидовОбъектовДоступа.ГруппаПользователей = &ГруппаПользователей
	               |				И (НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.Организации)
	               |					ИЛИ НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.Склады)))
	               |	И (НЕ НастройкиПользователей.Значение В
	               |				(ВЫБРАТЬ
	               |					НастройкиПравДоступаПользователей.ОбъектДоступа
	               |				ИЗ
	               |					РегистрСведений.НазначениеВидовОбъектовДоступа КАК НазначениеВидовОбъектовДоступа ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
	               |						ПО
	               |							НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = НастройкиПравДоступаПользователей.ВидОбъектаДоступа
	               |				ГДЕ
	               |					НазначениеВидовОбъектовДоступа.ГруппаПользователей = &ГруппаПользователей
	               |					И НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа <> ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.СтруктурныеПодразделения)
	               |				СГРУППИРОВАТЬ ПО
	               |								НастройкиПравДоступаПользователей.ОбъектДоступа))";
				   
   Если РЛСПоСтруктурномуПодразделению Тогда
	   
	   Запрос.Текст = Запрос.Текст + "
	   			   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	НастройкиПользователей.Пользователь,
				   |	НастройкиПользователей.Настройка,
				   |	НастройкиПользователей.Значение,
				   |	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
				   |ИЗ
				   |	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователейПользователиГруппы
				   |		ПО НастройкиПользователей.Пользователь = ГруппыПользователейПользователиГруппы.Пользователь
				   |ГДЕ
				   |	ГруппыПользователейПользователиГруппы.Ссылка = &ГруппаПользователей
				   |	И (НЕ НастройкиПользователей.Значение В ИЕРАРХИИ
				   |				(ВЫБРАТЬ
				   |					НастройкиПравДоступаПользователей.ОбъектДоступа
				   |				ИЗ
				   |					РегистрСведений.НазначениеВидовОбъектовДоступа КАК НазначениеВидовОбъектовДоступа ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
				   |						ПО
				   |							НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = НастройкиПравДоступаПользователей.ВидОбъектаДоступа
				   |				ГДЕ
				   |					НазначениеВидовОбъектовДоступа.ГруппаПользователей = &ГруппаПользователей
				   |					И НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.СтруктурныеПодразделения)
				   |				СГРУППИРОВАТЬ ПО
				   |								НастройкиПравДоступаПользователей.ОбъектДоступа
				   |		
				   |				ОБЪЕДИНИТЬ
				   |		
				   |				ВЫБРАТЬ
				   |					ПодразделенияОрганизаций.Ссылка
				   |				ИЗ
				   |					Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
				   |				ГДЕ
				   |					ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением = ЛОЖЬ
				   |					И ПодразделенияОрганизаций.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)))
				   |	И (НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ОсновноеСтруктурноеПодразделениеОрганизации)
				   |			ИЛИ НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ОсновноеПодразделениеОрганизации)
				   |				И НастройкиПользователей.Значение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))";
				   
		ЗапросПоДоступнымПодразделениям = Новый Запрос;
		ЗапросПоДоступнымПодразделениям.Текст = "ВЫБРАТЬ
		                                        |	ПодразделенияОрганизаций.Ссылка КАК Подразделение
		                                        |ИЗ
		                                        |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		                                        |ГДЕ
		                                        |	(ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ
		                                        |				(ВЫБРАТЬ
		                                        |					НастройкиПравДоступаПользователей.ОбъектДоступа
		                                        |				ИЗ
		                                        |					РегистрСведений.НазначениеВидовОбъектовДоступа КАК НазначениеВидовОбъектовДоступа ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
		                                        |						ПО
		                                        |							НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = НастройкиПравДоступаПользователей.ВидОбъектаДоступа
		                                        |				ГДЕ
		                                        |					НазначениеВидовОбъектовДоступа.ГруппаПользователей = &ГруппаПользователей
		                                        |					И НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.СтруктурныеПодразделения)
		                                        |				СГРУППИРОВАТЬ ПО
		                                        |								НастройкиПравДоступаПользователей.ОбъектДоступа)
		                                        |			ИЛИ ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ
		                                        |				(ВЫБРАТЬ
		                                        |					ПодразделенияОрганизаций.Ссылка
		                                        |				ИЗ
		                                        |					Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		                                        |				ГДЕ
		                                        |					ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением = ЛОЖЬ
		                                        |					И ПодразделенияОрганизаций.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)))";
				   
    КонецЕсли;
   
    Если РЛСПоФизическимЛицам Тогда
		
		Запрос.Текст = Запрос.Текст + "
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |	ВЫБРАТЬ
				   |	НастройкиПользователей.Пользователь,
				   |	НастройкиПользователей.Настройка,
				   |	НастройкиПользователей.Значение,
				   |	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
				   |ИЗ
				   |	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователейПользователиГруппы
				   |		ПО НастройкиПользователей.Пользователь = ГруппыПользователейПользователиГруппы.Пользователь
				   |ГДЕ
				   |	ГруппыПользователейПользователиГруппы.Ссылка = &ГруппаПользователей
				   |	И (НЕ НастройкиПользователей.Значение.ФизЛицо.ГруппаДоступаФизическогоЛица В
				   |				(ВЫБРАТЬ
				   |					НастройкиПравДоступаПользователей.ОбъектДоступа
				   |				ИЗ
				   |					РегистрСведений.НазначениеВидовОбъектовДоступа КАК НазначениеВидовОбъектовДоступа ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
				   |						ПО
				   |							НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = НастройкиПравДоступаПользователей.ВидОбъектаДоступа
				   |				ГДЕ
			 	   |					НазначениеВидовОбъектовДоступа.ГруппаПользователей = &ГруппаПользователей
			 	   |					И НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.ФизическиеЛица)
			 	   |				СГРУППИРОВАТЬ ПО
				   |								НастройкиПравДоступаПользователей.ОбъектДоступа))
				   |	И НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ОсновнойОтветственный)
				   |	И НастройкиПользователей.Значение <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";				   
	КонецЕсли;			 
			   
	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО
	| Пользователь,
	| Настройка";
	
	НеразрешенныеОбъекты = Запрос.Выполнить();
	
	Если РЛСПоКассам Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	Организации.Наименование КАК Наименование,
		               |	Организации.ОсновнаяКасса.Наименование КАК Касса
		               |ИЗ
		               |	Справочник.Организации КАК Организации
		               |ГДЕ
		               |	(НЕ Организации.ОсновнаяКасса В
		               |				(ВЫБРАТЬ
		               |					НастройкиПравДоступаПользователей.ОбъектДоступа
		               |				ИЗ
		               |					РегистрСведений.НазначениеВидовОбъектовДоступа КАК НазначениеВидовОбъектовДоступа ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
		               |						ПО
		               |							НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = НастройкиПравДоступаПользователей.ВидОбъектаДоступа
		               |				ГДЕ
		               |					НазначениеВидовОбъектовДоступа.ГруппаПользователей = &ГруппаПользователей
		               |					И НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.Кассы)
		               |				СГРУППИРОВАТЬ ПО
		               |								НастройкиПравДоступаПользователей.ОбъектДоступа))
		               |	И Организации.ОсновнаяКасса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ПодразделенияОрганизаций.Наименование,
		               |	ПодразделенияОрганизаций.ОсновнаяКасса.Наименование
		               |ИЗ
		               |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		               |ГДЕ
		               |	(НЕ ПодразделенияОрганизаций.ОсновнаяКасса В
		               |				(ВЫБРАТЬ
		               |					НастройкиПравДоступаПользователей.ОбъектДоступа
		               |				ИЗ
		               |					РегистрСведений.НазначениеВидовОбъектовДоступа КАК НазначениеВидовОбъектовДоступа ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
		               |						ПО
		               |							НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = НастройкиПравДоступаПользователей.ВидОбъектаДоступа
		               |				ГДЕ
		               |					НазначениеВидовОбъектовДоступа.ГруппаПользователей = &ГруппаПользователей
		               |					И НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.Кассы)
		               |				СГРУППИРОВАТЬ ПО
		               |								НастройкиПравДоступаПользователей.ОбъектДоступа))
		               |	И ПодразделенияОрганизаций.ОсновнаяКасса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)";
					   
		НеразрешенныеКассы = Запрос.Выполнить().Выбрать();
		СообщениеКассы = "";
		
		Пока НеразрешенныеКассы.Следующий() Цикл
			СообщениеКассы = СообщениеКассы + """" + НеразрешенныеКассы.Наименование + """" + ", ";
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СообщениеКассы) Тогда
			СообщениеКассы = Сред(СообщениеКассы, 1, (СтрДлина(СообщениеКассы)-2)) + "!";
			СообщениеКассы = "У следующих объектов реквизит ""Основная касса"" заполнен значением, ограниченным правами доступа: " + СообщениеКассы;
		КонецЕсли;                                                                                    
		
	КонецЕсли;
	
	// выгрузка конфилктных настроек пользвателей в форму обработки "Настройка прав доступа"
	Если НЕ НеразрешенныеОбъекты.Пустой() ИЛИ ЗначениеЗаполнено(СообщениеКассы) Тогда
		
		#Если Клиент Тогда
			СписокРазрешенныхОбъектов = ВыборкаОграниченийПоВидамОбъектовДоступа.НайтиСтроки(Новый Структура("ВидОбъектаДоступа", "РазрешенныеОбъекты"));
			СписокРазрешенныхСтруктурныхПодразделений = ВыборкаОграниченийПоВидамОбъектовДоступа.НайтиСтроки(Новый Структура("ВидОбъектаДоступа", "РазрешенныеСтруктурныеПодразделения"));
			
			ФормаНеразрешенныхОбъектов = Обработки.НастройкаПравДоступа.ПолучитьФорму("ФормаПроверкиНастроекПользователей");
			ФормаНеразрешенныхОбъектов.НеразрешенныеОбъекты.Загрузить(НеразрешенныеОбъекты.Выгрузить());
			
			ФормаНеразрешенныхОбъектов.ТаблицаРазрешенныхОбъектов   				 = ВыборкаОграниченийПоВидамОбъектовДоступа.Скопировать(СписокРазрешенныхОбъектов);
			ФормаНеразрешенныхОбъектов.ТаблицаРазрешенныхСтруктурныхПодразделений 	 = ВыборкаОграниченийПоВидамОбъектовДоступа.Скопировать(СписокРазрешенныхСтруктурныхПодразделений);
			
			Если ЗапросПоДоступнымПодразделениям <> Неопределено Тогда
				ЗапросПоДоступнымПодразделениям.УстановитьПараметр("ГруппаПользователей", ГруппаПользователей);
				ФормаНеразрешенныхОбъектов.ТаблицаРазрешенныхПодразделений = ЗапросПоДоступнымПодразделениям.Выполнить().Выгрузить();
			КонецЕсли;
			
			ФормаНеразрешенныхОбъектов.ЭлементыФормы.КонфликтныеКассы.Заголовок 	 = СообщениеКассы;
			
			ФормаНеразрешенныхОбъектов.ОткрытьМодально();
		#КонецЕсли
		
	Иначе
		
		#Если Клиент Тогда
			Если ВыводСообщения Тогда
				Предупреждение("Настройки пользователей установлены корректно.");
			КонецЕсли;
		#КонецЕсли
 		
	КонецЕсли;
	
КонецПроцедуры

#Область НеИспользуемые

// Функция возвращает текст запроса для получения учетной политики 
// по персоналу организации
//
Функция ПолучитьТекстЗапросаУчетнойПолитикиПоПерсоналу() Экспорт
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Организации.Ссылка КАК Организация,
				|	ЕСТЬNULL(УчетнаяПолитика.ВестиУчетПоГоловнойОрганизации, ИСТИНА) КАК ВедениеУчетаПоГоловнойОрганизации,
				|	ЕСТЬNULL(УчетнаяПолитика.ПоддержкаВнутреннегоСовместительства, ЛОЖЬ) КАК ПоддержкаВнутреннегоСовместительства,
				|	ЕСТЬNULL((НЕ УчетнаяПолитика.НеВестиУчетПоТабельнымНомерам), ИСТИНА) КАК ПоддержкаТабельногоНомера,
				|	ЕСТЬNULL(УчетнаяПолитика.УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка, ИСТИНА) КАК УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка
				|ИЗ
				|	Справочник.Организации КАК Организации
				|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			УчетнаяПолитикаПоПерсоналуОрганизаций.Организация КАК Организация,
				|			УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации КАК ВестиУчетПоГоловнойОрганизации,
				|			УчетнаяПолитикаПоГолове.ПоддержкаВнутреннегоСовместительства КАК ПоддержкаВнутреннегоСовместительства,
				|			УчетнаяПолитикаПоГолове.НеВестиУчетПоТабельнымНомерам КАК НеВестиУчетПоТабельнымНомерам,
				|			УчетнаяПолитикаПоГолове.УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка КАК УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка
				|		ИЗ
				|			РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
				|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоГолове
				|				ПО (ВЫБОР
				|						КОГДА УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации
				|							ТОГДА ВЫБОР
				|									КОГДА УчетнаяПолитикаПоПерсоналуОрганизаций.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				|										ТОГДА УчетнаяПолитикаПоПерсоналуОрганизаций.Организация.Ссылка
				|									ИНАЧЕ УчетнаяПолитикаПоПерсоналуОрганизаций.Организация.ГоловнаяОрганизация
				|								КОНЕЦ
				|						ИНАЧЕ УчетнаяПолитикаПоПерсоналуОрганизаций.Организация
				|					КОНЕЦ = УчетнаяПолитикаПоГолове.Организация)) КАК УчетнаяПолитика
				|		ПО Организации.Ссылка = УчетнаяПолитика.Организация.Ссылка";
	
КонецФункции // ПолучитьТекстЗапросаУчетнойПолитикиПоПерсоналу()

// Функция формирует таблицу учетной политики по персоналу
//
Функция СформироватьТаблицуУчетнойПолитикиПоПерсоналу(УчетнаяПолитика) Экспорт
	
	ТаблицаУчетнойПолитики = Новый ТаблицаЗначений;
	ТаблицаУчетнойПолитики.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаУчетнойПолитики.Колонки.Добавить("ВедениеУчетаПоГоловнойОрганизации", Новый ОписаниеТипов("Булево"));
	ТаблицаУчетнойПолитики.Колонки.Добавить("УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка", Новый ОписаниеТипов("Булево"));	
	ТаблицаУчетнойПолитики.Колонки.Добавить("ВариантУчетаКадровыхПерестановок", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыУчетаКадровыхПерестановок"));	
	
	Для Каждого ЭлементУчетнойПолитики Из УчетнаяПолитика Цикл
		НоваяСтрока = ТаблицаУчетнойПолитики.Добавить();
		НоваяСтрока.Организация = ЭлементУчетнойПолитики.Ключ;
		НоваяСтрока.ВедениеУчетаПоГоловнойОрганизации 	 = ЭлементУчетнойПолитики.Значение["ВедениеУчетаПоГоловнойОрганизации"];
		НоваяСтрока.УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка = ЭлементУчетнойПолитики.Значение["УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка"];
		НоваяСтрока.ВариантУчетаКадровыхПерестановок 	 = ЭлементУчетнойПолитики.Значение["ВариантУчетаКадровыхПерестановок"];
	КонецЦикла;   	
	
	Возврат ТаблицаУчетнойПолитики;
	
КонецФункции // СформироватьТаблицуУчетнойПолитикиПоПерсоналу()

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ТРЕБУЮЩИЕ ПРИВЕЛИГИРОВАННОГО РЕЖИМА

// Функция выполняет запрос при автоподборе текста и при окончании ввода текста в поле ввода
// 
Функция ПолучитьРезультатЗапросаАвтоподбораПодразделенияОрганизации(Организация, СтруктурноеПодразделение, Текст) Экспорт 
	
	УсловиеОрганизация = 			  "";
	УсловиеСтруктурноеПодразделение = "";
	УсловиеРодительПустаяСсылка = 	  "";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		УсловиеОрганизация = "И ПодразделенияОрганизаций.Владелец = &Организация";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктурноеПодразделение) Тогда 
		УсловиеСтруктурноеПодразделение = "И ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ(&СтруктурноеПодразделение)";
	Иначе
		УсловиеРодительПустаяСсылка 	= "ИЛИ ПодразделенияОрганизаций.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", 			  Организация);
	Запрос.УстановитьПараметр("ТекстПодбора", 			  Текст + "%");
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("Пользователь", 			  ПараметрыСеанса.ТекущийПользователь);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ПодразделенияОрганизаций.Ссылка,
					|	ПодразделенияОрганизаций.Код,
					|	ПодразделенияОрганизаций.Наименование
					|ИЗ
					|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
					|ГДЕ
					|	ПодразделенияОрганизаций.Наименование ПОДОБНО &ТекстПодбора
					|	" + УсловиеОрганизация + "
					|	" + УсловиеСтруктурноеПодразделение;
					
					Если ПараметрыСеанса.ИспользоватьОграничениеПоСтруктурныеПодразделения Тогда
						
						Запрос. Текст = Запрос.Текст + "И (НЕ ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ
														|				(ВЫБРАТЬ 
														|					ПодразделенияОрганизаций.Ссылка
														|				ИЗ
														|					Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
														|				ГДЕ
														|					(НЕ ПодразделенияОрганизаций.Ссылка В
														|							(ВЫБРАТЬ
														|								НастройкиПравДоступаПользователей.ОбъектДоступа КАК ОбъектДоступа
														|							ИЗ
														|								РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НазначениеВидовОбъектовДоступа КАК НазначениеВидовОбъектовДоступа ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователейПользователиГруппы ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
														|										ПО ГруппыПользователейПользователиГруппы.Пользователь = Пользователи.Ссылка
														|										ПО НазначениеВидовОбъектовДоступа.ГруппаПользователей = ГруппыПользователейПользователиГруппы.Ссылка
														|										ПО НастройкиПравДоступаПользователей.ВидОбъектаДоступа = НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа
														|							ГДЕ
														|								Пользователи.Ссылка = &Пользователь
														|								И НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.СтруктурныеПодразделения)
														|							СГРУППИРОВАТЬ ПО
														|								НастройкиПравДоступаПользователей.ОбъектДоступа))
														|				И ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением))";
						
                    КонецЕсли;

	Возврат Запрос.Выполнить();
	
КонецФункции

// Проверяет факт принятия к учету основного средства в других организациях.
//
Функция ПроверитьПринятиеКУчетуОСВДругихОрганизациях(СтруктураШапкиДокумента, СписокОС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период",          СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("Организация",     СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокОС",		 СписокОС); 
	
	// Выборка основных средств, принятых к учету в других организациях.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(СостоянияОСОрганизаций.ОсновноеСредство) КАК ОсновноеСредство,
	|	СостоянияОСОрганизаций.ОсновноеСредство.Код КАК КодОсновногоСредства,
	|	ПРЕДСТАВЛЕНИЕ(СостоянияОСОрганизаций.Организация) КАК Организация,
	|	СостоянияОСОрганизаций.ДатаСостояния КАК ДатаСостояния
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних
	|			(&Период, 
	|			Организация <> &Организация и
	|			ОсновноеСредство В (&СписокОС)) КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)
	|";
	Запрос.Выполнить();
	
	ВыборкаОС = Запрос.Выполнить();
	
	Возврат  ВыборкаОС;
	
КонецФункции// ПроверитьПринятиеКУчетуОСВДругихОрганизациях()

Функция ПоместитьПередаваемыеДанные(Группа,Ключ,Данные) Экспорт
	ТекущиеДанные = ПараметрыСеанса.ПередаваемыеДанные;
	НовыеДанные = Новый Соответствие;
	Для Каждого Элемент Из ТекущиеДанные Цикл
		НовыеДанные.Вставить(Элемент.Ключ,Элемент.Значение);
	КонецЦикла;
	мДанныеГруппы = НовыеДанные.Получить(Ключ);
	Если мДанныеГруппы = Неопределено Тогда
		ДанныеГруппы = Новый Структура;
	Иначе
		ДанныеГруппы = Новый Структура;
		Для Каждого Элемент Из мДанныеГруппы Цикл
			ДанныеГруппы.Вставить(Элемент.Ключ,Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	ДанныеГруппы.Вставить(Группа,ЗначениеВСтрокуВнутр(Данные));
	НовыеДанные.Вставить(Ключ,Новый ФиксированнаяСтруктура(ДанныеГруппы));
	ПараметрыСеанса.ПередаваемыеДанные=Новый ФиксированноеСоответствие(НовыеДанные);
КонецФункции

Функция ИзвлечьПередаваемыеДанные(Группа,Ключ) Экспорт
	ТекущиеДанные = ПараметрыСеанса.ПередаваемыеДанные;
	НовыеДанные = Новый Соответствие;
	Результат = Неопределено;
	Для Каждого Элемент Из ТекущиеДанные Цикл
		Если Ключ = Элемент.Ключ Тогда
			ДанныеГруппы = Новый Структура;
			Для Каждого ЭлементГруппы Из Элемент.Значение Цикл
				Если Группа = ЭлементГруппы.Ключ Тогда
					Результат = ЗначениеИзСтрокиВнутр(ЭлементГруппы.Значение);
				Иначе
					ДанныеГруппы.Вставить(ЭлементГруппы.Ключ,ЭлементГруппы.Значение);
				КонецЕсли;
			КонецЦикла;
			НовыеДанные.Вставить(Элемент.Ключ,Новый ФиксированнаяСтруктура(ДанныеГруппы));
		Иначе
			НовыеДанные.Вставить(Элемент.Ключ,Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	ПараметрыСеанса.ПередаваемыеДанные=Новый ФиксированноеСоответствие(НовыеДанные);
	Возврат Результат;
КонецФункции

