// Функция возвращает ближайшую дату начала периода планирования
//
// Параметры
//	Периодичность (Перечисления.фин_Периодичность)	- периодичность планирования по сценарию.
//	ДатаВПериоде (Дата)							- произвольная дата
//
// Возвращаемое значение:
//	ДатаНачалаПериода		– ближайшая дата начала периода планирования
//
Функция ДатаНачалаПериода(ЗНАЧ ДатаВПериоде,ПериодичностьПланирования) Экспорт
	
	Если ТипЗнч(ПериодичностьПланирования) = фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования() Тогда
		ПродолжительностьЦикла = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПродолжительностьЦиклаСценария(ПериодичностьПланирования);
		Периодичность = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(ПериодичностьПланирования);
		Если ТипЗнч(ПродолжительностьЦикла)=Тип("ПеречислениеСсылка.фин_Периодичность") Тогда
			Если ДатаНачалаПериода(ДатаВПериоде,Периодичность)=ДатаНачалаПериода(ДатаНачалаПериода(ДатаВПериоде,ПродолжительностьЦикла),Периодичность) Тогда
				Возврат ДатаНачалаПериода(ДатаВПериоде,ПродолжительностьЦикла);
			КонецЕсли;
		//	Периодичность = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(ПериодичностьПланирования);
		//Иначе
		//	Периодичность = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(ПериодичностьПланирования);
		КонецЕсли;
	Иначе
		Периодичность = ПериодичностьПланирования;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ДатаВПериоде)=Тип("Дата") Тогда
		Возврат '00010101';
	КонецЕсли;
	
	Если ДатаВПериоде = '00010101' Тогда 
		ДатаВПериоде = ТекущаяДата();
	КонецЕсли;
	
	Если Периодичность=ПредопределенноеЗначение("Перечисление.фин_Периодичность.День") Тогда
		Возврат НачалоДня(ДатаВПериоде);
	ИначеЕсли Периодичность=ПредопределенноеЗначение("Перечисление.фин_Периодичность.Неделя") Тогда
		Возврат НачалоНедели (ДатаВПериоде);
	ИначеЕсли Периодичность=ПредопределенноеЗначение("Перечисление.фин_Периодичность.Месяц") Тогда
		Возврат НачалоМесяца (ДатаВПериоде);
	ИначеЕсли Периодичность=ПредопределенноеЗначение("Перечисление.фин_Периодичность.Квартал") Тогда
		Возврат НачалоКвартала (ДатаВПериоде);
	ИначеЕсли Периодичность=ПредопределенноеЗначение("Перечисление.фин_Периодичность.Год") Тогда
		Возврат НачалоГода (ДатаВПериоде);
	ИначеЕсли Периодичность=ПредопределенноеЗначение("Перечисление.фин_Периодичность.Декада") Тогда
		День = Цел((День(ДатаВПериоде)-1)/10)*10;
		Если День = 30 Тогда
			День =20;
		КонецЕсли;
		Возврат Дата(Год(ДатаВПериоде),Месяц(ДатаВПериоде),?(День=0,1,День))+?(День=0,0,24*60*60);
	ИначеЕсли Периодичность=ПредопределенноеЗначение("Перечисление.фин_Периодичность.Полугодие") Тогда
		НоваяДатаПериода	=НачалоМесяца(ДатаВПериоде);
		НовыйМесяц = 1;
		Если Месяц(НоваяДатаПериода) >6 Тогда
			НовыйМесяц = 7;
		КонецЕсли;
		НоваяДатаПериода = Дата(Год(НоваяДатаПериода),НовыйМесяц,1);
		Возврат НоваяДатаПериода;
	Иначе
		Возврат НачалоДня(ДатаВПериоде);
	КонецЕсли;
	
КонецФункции // ДатаНачалаПериода()

// Функция возвращает ближайшую дату окончания периода планирования
//
// Параметры
//	Периодичность (Перечисления.фин_Периодичность)	- периодичность планирования по сценарию.
//	ДатаВПериоде (Дата)							- произвольная дата
//
// Возвращаемое значение:
//	ДатаКонцаПериода	– ближайшая дата окончания периода планирования
//
Функция ДатаКонцаПериода(ЗНАЧ ДатаВПериоде,ПериодичностьПланирования) Экспорт
	
	Если ТипЗнч(ПериодичностьПланирования) = фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования() Тогда
		Периодичность = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(ПериодичностьПланирования);
	Иначе
		Периодичность = ПериодичностьПланирования;
	КонецЕсли;
	
	Если ДатаВПериоде = '00010101' Тогда 
		ДатаВПериоде = ТекущаяДата();
	КонецЕсли;
	
	Если Периодичность=ПредопределенноеЗначение("Перечисление.фин_Периодичность.День") Тогда
		Возврат КонецДня(ДатаВПериоде);
	ИначеЕсли Периодичность=ПредопределенноеЗначение("Перечисление.фин_Периодичность.Неделя") Тогда
		Возврат КонецНедели (ДатаВПериоде);
	ИначеЕсли Периодичность=ПредопределенноеЗначение("Перечисление.фин_Периодичность.Месяц") Тогда
		Возврат КонецМесяца (ДатаВПериоде);
	ИначеЕсли Периодичность=ПредопределенноеЗначение("Перечисление.фин_Периодичность.Квартал") Тогда
		Возврат КонецКвартала (ДатаВПериоде);
	ИначеЕсли Периодичность=ПредопределенноеЗначение("Перечисление.фин_Периодичность.Год") Тогда
		Возврат КонецГода (ДатаВПериоде);
	ИначеЕсли Периодичность=ПредопределенноеЗначение("Перечисление.фин_Периодичность.Декада") Тогда
		День = Цел((День(ДатаВПериоде)-1)/10)*10;
		Если День < 0 Тогда
			День = 0;
		КонецЕсли;
		Если День = 30 Тогда
			День =20;
		КонецЕсли;
		День=День+10;
		Если День=30 Тогда
			Попытка
				Возврат КонецМесяца(Дата(Год(ДатаВПериоде),Месяц(ДатаВПериоде),?(День=0,1,День)));
			Исключение
				День = День -5;
				Возврат КонецМесяца(Дата(Год(ДатаВПериоде),Месяц(ДатаВПериоде),?(День=0,1,День)));
			КонецПопытки;
		Иначе
			Возврат КонецДня(Дата(Год(ДатаВПериоде),Месяц(ДатаВПериоде),?(День=0,1,День)));
		КонецЕсли;
	ИначеЕсли Периодичность=ПредопределенноеЗначение("Перечисление.фин_Периодичность.Полугодие") Тогда
		НоваяДатаПериода	=НачалоМесяца(ДатаВПериоде);
		НовыйМесяц = 6;
		Если Месяц(НоваяДатаПериода) >6 Тогда
			НовыйМесяц = 12;
		КонецЕсли;
		НоваяДатаПериода = КонецМесяца(Дата(Год(НоваяДатаПериода),НовыйМесяц,1));
		Возврат НоваяДатаПериода;
	Иначе
		Возврат КонецДня(ДатаВПериоде);
	КонецЕсли;
	
КонецФункции // ДатаКонцаПериода()

// Возвращает строку, описывающую период, определяемый переданными
// датой и периодичностью.
//
// Параметры
//  ДатаВПериоде:Дата - дата из периода
//  Периодичность: Строка - строка, определяющая периодичность
//
// Возвращаемое значение:
//   СтрокаПериод: строка   – представление периода для вывода в отчетах
//
Функция ПолучитьПериодСтрокой(ДатаВПериоде, ПериодичностьДаты, ПериодичностьИнтервалаСценария = Неопределено) Экспорт
	
	Если ТипЗнч(ПериодичностьДаты) <> Тип("Строка") Тогда
		Если ТипЗнч(ПериодичностьДаты)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования() Тогда
			Периодичность = Строка(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(ПериодичностьДаты));
		Иначе
			Периодичность = Строка(ПериодичностьДаты);
		КонецЕсли;
	Иначе
		Периодичность = ПериодичностьДаты;
	КонецЕсли;

	Если Периодичность = "Год" Тогда
		ФорматДаты = "ДФ='гггг ""г.""'";
		
	ИначеЕсли Периодичность = "Квартал" Тогда
		ФорматДаты = "ДФ='к"" квартал"" гггг ""г.""'";
		
	ИначеЕсли Периодичность = "Месяц" Тогда
		ФорматДаты = "ДФ='ММММ гггг ""г.""'";
		
	ИначеЕсли Периодичность = "Неделя" Тогда
		ФорматДаты = "ДФ='""Неделя (""дд.ММ.гггг'";
		
	ИначеЕсли Периодичность = "День" Тогда
		ФорматДаты = "ДФ='дд.ММ.гггг ""г.""'";
		
	ИначеЕсли Периодичность = "Полугодие" Тогда
		ФорматДаты = "ДФ='гггг"" г.""'";
		СтрокаПериод = "" + Формат(ДатаВПериоде, ФорматДаты);
		Если Месяц(ДатаВПериоде) >=6 Тогда
			Полугодие = "2 полугодие ";
		Иначе
			Полугодие = "1 полугодие ";
		КонецЕсли;
		Возврат Полугодие+СтрокаПериод;
		
	ИначеЕсли Периодичность = "Декада" Тогда
		ФорматДаты = "ДФ='"" декада ""ММММ гг"" г.""'";
		СтрокаПериод = "" + Формат(ДатаВПериоде, ФорматДаты);
		Если День(ДатаВПериоде) <=10 Тогда
			Декада = "1";
		ИначеЕсли День(ДатаВПериоде) <=20 Тогда
			Декада = "2";
		Иначе
			Декада = "3";
		КонецЕсли;
		Возврат Декада+СтрокаПериод;
	Иначе
		ФорматДаты = "";
	КонецЕсли;
	
	СтрокаПериод = "" + Формат(ДатаВПериоде, ФорматДаты);
	Если Периодичность = "Неделя" И ТипЗнч(ДатаВПериоде) = Тип("Дата") Тогда
		СтрокаПериод = "" + НеделяГода(ДатаВПериоде) + " " + СтрокаПериод + Формат(?(ПериодичностьИнтервалаСценария=Неопределено ИЛИ КонецНедели(ДатаВПериоде)<>КонецНедели(ДатаКонцаПериода(ДатаВПериоде,ПериодичностьИнтервалаСценария)),КонецНедели(ДатаВПериоде),ДатаКонцаПериода(ДатаВПериоде,ПериодичностьИнтервалаСценария)), "ДФ='"" - ""дд.ММ.гггг)'");
	КонецЕсли;
	
	Возврат СтрокаПериод;
	
КонецФункции // ПолучитьПериодСтрокой()

Функция ПредставлениеИнтервалаСтрокой(Период,Сценарий) Экспорт
	ТекстНачало = ПолучитьПериодСтрокой(Период,Сценарий);
	ТекстКонец = ?(ТипЗнч(Сценарий)=Тип("ПеречислениеСсылка.фин_Периодичность"),
				ПолучитьПериодСтрокой(ДатаКонцаПериода(Период,Сценарий),Сценарий),
				ПолучитьПериодСтрокой(ПолучитьГоризонтПланирования(Период,Сценарий),Сценарий));
	Если ТекстНачало=ТекстКонец Тогда
		Возврат ТекстНачало;
	Иначе
		Возврат  ТекстНачало+" - "+ТекстКонец;
	КонецЕсли;
КонецФункции

Функция ПолучитьПериодыДляВыбора(ДатаВГоду,Сценарий) Экспорт
	Если ДатаВГоду='00010101' Тогда
		ДатаВГоду = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	Начало = НачалоГода(ДатаВГоду);
	СписокПериодов = Новый СписокЗначений;
	ИспользоватьТочкиПланирования = ТипЗнч(Сценарий)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования() И фин_ОбщегоНазначенияВызовСервераПовтИсп.ИспользоватьТочкиПланированияСценария(Сценарий);
	Если ИспользоватьТочкиПланирования Тогда
		ТочкиПланирования = фин_ПроцедурыМеханизмовБюджетированияВызовСервера.МассивТочекПланированияСценария(Сценарий);
		// ограничим выбор этими точками
		Для Каждого ТочкаПланирования Из ТочкиПланирования Цикл
			СписокПериодов.Добавить(ТочкаПланирования,ПредставлениеИнтервалаСтрокой(ТочкаПланирования,Сценарий));
		КонецЦикла;
		Возврат СписокПериодов;
	КонецЕсли;
	СписокПериодов.Добавить(Год(Начало)-1,Строка(Год(Начало)-1)+" ...");
	ПервыйПериод = ДатаНачалаПериода(Начало,Сценарий);
	Если ТипЗнч(Сценарий)<>фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования() ИЛИ (НЕ ИспользоватьТочкиПланирования) ИЛИ ТочкиПланирования.Найти(ПервыйПериод)<>Неопределено Тогда
		СписокПериодов.Добавить(ПервыйПериод,ПредставлениеИнтервалаСтрокой(ПервыйПериод,Сценарий));
	КонецЕсли;
	СледующийПериод = СледующийПериодПланирования(ПервыйПериод,Сценарий,,Ложь);
	мСледующийПериод = СледующийПериод;
	Пока Год(СледующийПериод)=Год(ДатаВГоду) Цикл
		Если ТипЗнч(Сценарий)<>фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования() ИЛИ (НЕ ИспользоватьТочкиПланирования) ИЛИ ТочкиПланирования.Найти(СледующийПериод)<>Неопределено Тогда
			СписокПериодов.Добавить(СледующийПериод,ПредставлениеИнтервалаСтрокой(СледующийПериод,Сценарий));
		КонецЕсли;
		СледующийПериод = СледующийПериодПланирования(СледующийПериод,Сценарий,,Ложь);
		Если СледующийПериод = мСледующийПериод Тогда
			Прервать;
		КонецЕсли;
		мСледующийПериод = СледующийПериод;
	КонецЦикла;
	СписокПериодов.Добавить(Год(Начало)+1,Строка(Год(Начало)+1)+" ...");
	Возврат СписокПериодов;
КонецФункции

// возвращает следующий период планирования
//
Функция СледующийПериодПланирования(ДатаВПериодеПланирования,Сценарий,Добавить = Истина,Сообщать = Истина) Экспорт
	ПериодПланирования = ДатаВПериодеПланирования;
	Если ПериодПланирования = '00010101' Тогда
		ПериодПланирования = ТекущаяДата();
	КонецЕсли;
	Если ТипЗнч(Сценарий)= Тип("ПеречислениеСсылка.фин_Периодичность") Тогда
		НачалоПериода 		= ДатаНачалаПериода(ДатаВПериодеПланирования,Сценарий);
		ПериодПланирования 	= ДобавитьИнтервал(НачалоПериода,Сценарий,?(Добавить,1,-1));
		Возврат ПериодПланирования;
	КонецЕсли;
	ПродолжительностьЦикла 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ПродолжительностьЦиклаСценария(Сценарий);
	ПериодичностьРасчета 	= ?(ТипЗнч(ПродолжительностьЦикла)=Тип("ПеречислениеСсылка.фин_Периодичность"),ПродолжительностьЦикла,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий));
	ПериодПланирования 		= ДатаНачалаПериода(ДатаВПериодеПланирования,ПериодичностьРасчета);
	ПериодПланирования 		= ДобавитьИнтервал(ПериодПланирования,ПериодичностьРасчета,?(Добавить,1,-1));
	Возврат ПериодПланирования;
КонецФункции //СледующийПериодПланирования 

// Функция добавляет интервал к дате
//
// Параметры:
//	Периодичность (Перечисления.фин_Периодичность)	- периодичность 
//	ДатаВПериоде (Дата)							- произвольная дата
//	Смещение (число)							- определяет направление и количество периодов, в котором сдвигается дата
//
// Возвращаемое значение:
//	Дата, отстоящая от исходной на заданное количество периодов 
//
Функция ДобавитьИнтервал(ДатаПериода,ПериодичностьПланирования,Смещение) Экспорт
	
	Если ТипЗнч(ПериодичностьПланирования) = фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования() Тогда
		Периодичность = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(ПериодичностьПланирования);
	Иначе
		Периодичность = ПериодичностьПланирования;
	КонецЕсли;
	
	Если ДатаПериода = '00010101' Тогда 
		ДатаПериода = ТекущаяДата();
	КонецЕсли;
	

	Если Смещение=0 Тогда
		НоваяДатаПериода=ДатаПериода;	
	ИначеЕсли Периодичность=ПредопределенноеЗначение("Перечисление.фин_Периодичность.День") Тогда
		НоваяДатаПериода=НачалоДня(ДатаПериода+Смещение*24*3600);
	ИначеЕсли Периодичность=ПредопределенноеЗначение("Перечисление.фин_Периодичность.Неделя") Тогда
		НоваяДатаПериода=НачалоНедели(ДатаПериода+Смещение*7*24*3600);

	ИначеЕсли Периодичность=ПредопределенноеЗначение("Перечисление.фин_Периодичность.Месяц") Тогда
		НоваяДатаПериода=ДобавитьМесяц(ДатаПериода,Смещение);

	ИначеЕсли Периодичность=ПредопределенноеЗначение("Перечисление.фин_Периодичность.Квартал") Тогда
		НоваяДатаПериода=ДобавитьМесяц(ДатаПериода,Смещение*3);

	ИначеЕсли Периодичность=ПредопределенноеЗначение("Перечисление.фин_Периодичность.Год") Тогда
		НоваяДатаПериода=ДобавитьМесяц(ДатаПериода,Смещение*12);

	ИначеЕсли Периодичность=ПредопределенноеЗначение("Перечисление.фин_Периодичность.Декада") Тогда
			День = День(ДатаПериода);
			Если День<11 Тогда
				Декада = 1;
			ИначеЕсли День<21 Тогда
				Декада = 2;
			Иначе
				Декада = 3;
			КонецЕсли;
			СдвигМесяцев = Цел(Смещение/3);
			Если СдвигМесяцев<>0 Тогда
				НоваяДатаПериода = ДобавитьМесяц(ДатаПериода,СдвигМесяцев);
			Иначе
				НоваяДатаПериода = ДатаПериода;
			КонецЕсли;
			СдвигДекад = Смещение - СдвигМесяцев*3;
		    РезультирующаяДекада = Декада + СдвигДекад;
			Если РезультирующаяДекада>3 ИЛИ РезультирующаяДекада<-3 Тогда
				СдвигМесяцев = Цел(РезультирующаяДекада/3);
				Если СдвигМесяцев<>0 Тогда
					НоваяДатаПериода = ДобавитьМесяц(НоваяДатаПериода,СдвигМесяцев);
				КонецЕсли;
				СдвигДекад = РезультирующаяДекада - СдвигМесяцев*3;
				НоваяДатаПериода=Дата(Год(НоваяДатаПериода),Месяц(НоваяДатаПериода),(СдвигДекад-1)*10+1);
			ИначеЕсли РезультирующаяДекада >0 Тогда
				НоваяДатаПериода=Дата(Год(НоваяДатаПериода),Месяц(НоваяДатаПериода),(РезультирующаяДекада-1)*10+1);
			Иначе
				ДекадаПредыдущегоМесяца = 3 - РезультирующаяДекада;
				Если ДекадаПредыдущегоМесяца = 0 Тогда
					ДекадаПредыдущегоМесяца = 3;
					НоваяДатаПериода = ДобавитьМесяц(НоваяДатаПериода,-1);
				КонецЕсли;
				НоваяДатаПериода = ДобавитьМесяц(НоваяДатаПериода,-1);
				НоваяДатаПериода=Дата(Год(НоваяДатаПериода),Месяц(НоваяДатаПериода),(ДекадаПредыдущегоМесяца-1)*10+1);
			КонецЕсли;
				
		
		НоваяДатаПериода = ДатаНачалаПериода(НоваяДатаПериода,Периодичность)
		
	ИначеЕсли Периодичность=ПредопределенноеЗначение("Перечисление.фин_Периодичность.Полугодие") Тогда
		НоваяДатаПериода	=ДобавитьМесяц(ДатаПериода,Смещение*6);
		НоваяДатаПериода 	= ДатаНачалаПериода(НоваяДатаПериода,Периодичность)

	Иначе
		НоваяДатаПериода=НачалоДня(ДатаПериода+Смещение*24*3600);

	КонецЕсли;

	Возврат НоваяДатаПериода;

КонецФункции

// возвращает строку без дефиса
// применяется для формирования кода источника на основании бюджетной операции
// Параметры
//  КодИсточника  - Строка - редактируемый код
//
// Возвращаемое значение:
//   Строка   - редактируемый код без дефиса
//
Функция УдалитьНедопустимыеСимволыНомера(Знач КодИсточника,ПреобразованиеЧастейСловаВВерхнийРегистр = Истина,Длина=1000)  Экспорт
    МассивНедопустимыхСимволов = ПолучитьНедопустимыеСимволы();
	
	Результат = "";
	ДлинаКода = СтрДлина(КодИсточника);
	ЕстьНедопустимыйСимвол = Ложь;
	Для Инд= 1 По ДлинаКода Цикл
		 Симв = Сред(КодИсточника,Инд,1);
		 Если МассивНедопустимыхСимволов.Найти(Симв)<>Неопределено Тогда
			//Если Симв ="0" Тогда
			//	Если ЕстьНедопустимыйСимвол Тогда
			//		Продолжить; 
			//	КонецЕсли;
			//Иначе
				ЕстьНедопустимыйСимвол=Истина;
				КодИсточника = Лев(КодИсточника,Инд)+ВРег(Сред(КодИсточника,Инд+1,1))+Сред(КодИсточника,Инд+2);
				Продолжить;
			//КонецЕсли;
		 Иначе
			ЕстьНедопустимыйСимвол = Ложь;
		 КонецЕсли;
		 Результат =Результат + Симв;
	КонецЦикла;
	Если СтрДлина(Результат)>Длина Тогда
		Результат = Прав(Результат,Длина);
	КонецЕсли;
    Возврат Результат;
КонецФункции // УдалитьДефисНомера()

// возвращает горизонт планирования в виде даты/текста
//
Функция ПолучитьГоризонтПланирования(ДатаВПериодеПланирования,Сценарий,Текст=Ложь) Экспорт
	Если ТипЗнч(Сценарий)=Тип("ПеречислениеСсылка.фин_Периодичность") Тогда
		Возврат ДатаКонцаПериода(ДатаВПериодеПланирования,Сценарий);
	КонецЕсли;
	ПродолжительностьЦикла 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ПродолжительностьЦиклаСценария(Сценарий);
	Периодичность 			= фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий);
	ПериодичностьРасчета 	= ?(ТипЗнч(ПродолжительностьЦикла)=Тип("ПеречислениеСсылка.фин_Периодичность"),ПродолжительностьЦикла,Периодичность);
	ПериодПланирования 		= ДатаНачалаПериода(ДатаВПериодеПланирования,ПериодичностьРасчета);
	Если ТипЗнч(ПродолжительностьЦикла)=Тип("Число") Тогда
		Дата = ?(ПродолжительностьЦикла<2,ДатаКонцаПериода(ПериодПланирования,Периодичность),ДатаКонцаПериода(ДобавитьИнтервал(ДатаКонцаПериода(ПериодПланирования,Периодичность),Периодичность,ПродолжительностьЦикла-1),Периодичность));
	Иначе
		Дата = ДатаКонцаПериода(ПериодПланирования,ПродолжительностьЦикла);
	КонецЕсли;
	Если Текст Тогда
		Возврат ПредставлениеПериодаСтрокой(?(ТипЗнч(ПродолжительностьЦикла)=Тип("ПеречислениеСсылка.фин_Периодичность"),ДатаНачалаПериода(Дата,Периодичность),Дата),Сценарий,?(ТипЗнч(ПродолжительностьЦикла)=Тип("ПеречислениеСсылка.фин_Периодичность"),ПродолжительностьЦикла,Неопределено));
	Иначе
		Возврат Дата;
	КонецЕсли;
КонецФункции //ПолучитьГоризонтПланирования

// возвращает текстовое представление периода
//
Функция ПредставлениеПериодаСтрокой(Дата,Сценарий,ПериодичностьИнтервалаСценария = Неопределено) Экспорт
	ДатаПериода =  ПолучитьДатуИзПоляКомпоновки(Дата);
	Если ТипЗнч(Сценарий)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования() Тогда
		Периодичность = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий);
	ИначеЕсли ТипЗнч(Сценарий)=Тип("СправочникОбъект."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования") Тогда
		Периодичность = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий);
	Иначе
		Периодичность = Сценарий;
	КонецЕсли;
	Возврат ПолучитьПериодСтрокой(ДатаПериода,Строка(Периодичность),ПериодичностьИнтервалаСценария);
КонецФункции //ПредставлениеПериодаСтрокой

Функция ЧисловоеВыражение(Текст) Экспорт
	ЕстьТекстовыеСимволы = Ложь;
	МассивЧисел = Новый Массив;
	МассивЧисел.Добавить("0");
	МассивЧисел.Добавить("1");
	МассивЧисел.Добавить("2");
	МассивЧисел.Добавить("3");
	МассивЧисел.Добавить("4");
	МассивЧисел.Добавить("5");
	МассивЧисел.Добавить("6");
	МассивЧисел.Добавить("7");
	МассивЧисел.Добавить("8");
	МассивЧисел.Добавить("9");
	МассивЧисел.Добавить(".");
	Для Инд = 1 По СтрДлина(Текст) Цикл
		Символ = Сред(Текст,Инд,1);
		Если МассивЧисел.Найти(Символ)=Неопределено Тогда
			ЕстьТекстовыеСимволы = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат НЕ ЕстьТекстовыеСимволы;
КонецФункции

Функция ПолучитьСлужебныеСловаЗапроса() Экспорт
   МассивСлов = Новый Массив;
   МассивСлов.Добавить("И");
   МассивСлов.Добавить("ИЛИ");
   МассивСлов.Добавить("НЕ");
   МассивСлов.Добавить("ВЫБОР");
   МассивСлов.Добавить("КОГДА");
   МассивСлов.Добавить("ТОГДА");
   МассивСлов.Добавить("ИНАЧЕ");
   МассивСлов.Добавить("КОНЕЦ");
   МассивСлов.Добавить("ДАТАВРЕМЯ");
   МассивСлов.Добавить("ЕСТЬNULL");
   МассивСлов.Добавить("ЕСТЬ");
   МассивСлов.Добавить("NULL");
   МассивСлов.Добавить("ПОДСТРОКА");
   МассивСлов.Добавить("ГОД");
   МассивСлов.Добавить("КВАРТАЛ");
   МассивСлов.Добавить("МЕСЯЦ");
   МассивСлов.Добавить("ДЕНЬГОДА");
   МассивСлов.Добавить("ДЕНЬ");
   МассивСлов.Добавить("НЕДЕЛЯ");
   МассивСлов.Добавить("ДЕНЬНЕДЕЛИ");
   МассивСлов.Добавить("ЧАС");
   МассивСлов.Добавить("МИНУТА");
   МассивСлов.Добавить("СЕКУНДА");
   МассивСлов.Добавить("НАЧАЛОПЕРИОДА");
   МассивСлов.Добавить("КОНЕЦПЕРИОДА");
   МассивСлов.Добавить("ДОБАВИТЬКДАТЕ");
   МассивСлов.Добавить("ПРЕДСТАВЛЕНИЕ");
   МассивСлов.Добавить("ПРЕДСТАВЛЕНИЕССЫЛКИ");
   МассивСлов.Добавить("ТИПЗНАЧЕНИЯ");
   Возврат МассивСлов;
КонецФункции

Функция ПолучитьНедопустимыеСимволы(БезЧисловых=Ложь) Экспорт
    МассивНедопустимыхСимволов = Новый Массив;
	МассивНедопустимыхСимволов.Добавить("-");
	МассивНедопустимыхСимволов.Добавить("/");
	МассивНедопустимыхСимволов.Добавить("*");
	МассивНедопустимыхСимволов.Добавить("+");
	МассивНедопустимыхСимволов.Добавить(",");
	МассивНедопустимыхСимволов.Добавить(".");
	МассивНедопустимыхСимволов.Добавить("?");
	МассивНедопустимыхСимволов.Добавить("(");
	МассивНедопустимыхСимволов.Добавить(")");
	МассивНедопустимыхСимволов.Добавить("=");
	МассивНедопустимыхСимволов.Добавить("/");
	МассивНедопустимыхСимволов.Добавить("\");
	МассивНедопустимыхСимволов.Добавить("|");
	МассивНедопустимыхСимволов.Добавить("");
	МассивНедопустимыхСимволов.Добавить("""");
	МассивНедопустимыхСимволов.Добавить("'");
	МассивНедопустимыхСимволов.Добавить("!");
	МассивНедопустимыхСимволов.Добавить("#");
	МассивНедопустимыхСимволов.Добавить(",");
	МассивНедопустимыхСимволов.Добавить("%");
	МассивНедопустимыхСимволов.Добавить("$");
	МассивНедопустимыхСимволов.Добавить("^");
	МассивНедопустимыхСимволов.Добавить("&");
	МассивНедопустимыхСимволов.Добавить(";");
	МассивНедопустимыхСимволов.Добавить("[");
	МассивНедопустимыхСимволов.Добавить("]");
	МассивНедопустимыхСимволов.Добавить("{");
	МассивНедопустимыхСимволов.Добавить("}");
	МассивНедопустимыхСимволов.Добавить("`");
	МассивНедопустимыхСимволов.Добавить("~");
	МассивНедопустимыхСимволов.Добавить("<");
	МассивНедопустимыхСимволов.Добавить(">");
	МассивНедопустимыхСимволов.Добавить(Символы.ПС);
	МассивНедопустимыхСимволов.Добавить(Символы.ВТаб);
	МассивНедопустимыхСимволов.Добавить(Символы.Таб);
	Если НЕ БезЧисловых Тогда
		МассивНедопустимыхСимволов.Добавить("0");
	КонецЕсли;
	МассивНедопустимыхСимволов.Добавить(" ");
	Возврат МассивНедопустимыхСимволов;
КонецФункции

// возвращает дату из стандартного поля компоновки данных
//
Функция ПолучитьДатуИзПоляКомпоновки(Дата) Экспорт
	 Возврат ?(ТипЗнч(Дата)=Тип("Дата"),Дата,Дата.Дата);
КонецФункции //ПолучитьДатуИзПоляКомпоновки

// Функция выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения
//
// Параметры:
//  ИсхСумма   - распределяемая сумма
//  МассивКоэф - массив коэффициентов распределения
//  Точность   - точность округления при распределении. Необязателен.
//
//Возвращает:
//  МассивСумм - массив размерностью равный массиву коэффициентов, содержит
//               суммы в соответствии с весом коэффициента (из массива коэффициентов)
//               В случае если распределить не удалось (сумма = 0, кол-во коэф. = 0,
//               или суммарный вес коэф. = 0), тогда возвращается значение Неопределено
//
Функция РаспределитьПропорционально(Знач ИсхСумма, МассивКоэф, Знач Точность = 2, ПроверкаНулевыхЗначений=Истина,Умножать=Ложь) Экспорт

	Если МассивКоэф.Количество() = 0 Или (ПроверкаНулевыхЗначений И ИсхСумма = 0) Или ИсхСумма = Null Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИндексМакс = 0;
	МаксЗнач   = 0;
	РаспрСумма = 0;
	СуммаКоэф  = 0;
	
	Если Умножать=Истина Тогда
		СуммаКоэф = 1;
	Иначе

		Для К = 0 По МассивКоэф.Количество() - 1 Цикл

			МодульЧисла = ?(МассивКоэф[К] > 0, МассивКоэф[К], - МассивКоэф[К]);

			Если МаксЗнач < МодульЧисла Тогда
				МаксЗнач   = МодульЧисла;
				ИндексМакс = К;
			КонецЕсли;

			СуммаКоэф = СуммаКоэф + МассивКоэф[К];

		КонецЦикла;
		
	КонецЕсли;

	Если СуммаКоэф = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивСумм = Новый Массив(МассивКоэф.Количество());

	Для К = 0 По МассивКоэф.Количество() - 1 Цикл
		МассивСумм[К] = Окр(ИсхСумма * МассивКоэф[К] / СуммаКоэф, Точность, 1);
		РаспрСумма    = РаспрСумма + МассивСумм[К];
	КонецЦикла;

	// Погрешности округления отнесем на коэффицент с максимальным весом
	Если Умножать = Ложь И Не РаспрСумма = ИсхСумма Тогда
		МассивСумм[ИндексМакс] = МассивСумм[ИндексМакс] + ИсхСумма - РаспрСумма;
	КонецЕсли;

	Возврат МассивСумм;

КонецФункции // РаспределитьПропорционально()

Процедура УстановитьГоризонтПланированияИПредставлениеБюджетногоПериода(ПредставлениеБюджетногоПериода,ГоризонтПланирования=Неопределено,ПериодПланирования,Сценарий) Экспорт
	ГоризонтПланирования 			= ПолучитьГоризонтПланирования(ПериодПланирования,Сценарий);
	ПредставлениеБюджетногоПериода 	= ПолучитьПериодСтрокой(ПериодПланирования,Сценарий);
	ТекстГоризонт 					= ПолучитьПериодСтрокой(ГоризонтПланирования,Сценарий);
	Если ТекстГоризонт<>ПредставлениеБюджетногоПериода Тогда
		ПредставлениеБюджетногоПериода = ПредставлениеБюджетногоПериода+" - "+ТекстГоризонт;
	КонецЕсли;
КонецПроцедуры


// возвращает период планирования согласно новому сценарию
//
Функция СинхронизироватьПериодПланированияСоСценарием(ПериодПланирования,Сценарий) Экспорт
	Периодичность = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий);
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ИспользоватьТочкиПланированияСценария(Сценарий) Тогда
		Точки = фин_ПроцедурыМеханизмовБюджетированияВызовСервера.МассивТочекПланированияСценария(Сценарий);
		Если Точки.Количество() = 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для сценария """+Сценарий+""" задана единственная точка планирования!");
			Возврат Точки[0];
		ИначеЕсли Точки.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для сценария """+Сценарий+""" не заданы точки планирования!");
			Возврат ДатаНачалаПериода(ТекущаяДата(),Периодичность);
		Иначе
			Период = ПериодПланирования;
			Если Период = '00010101' Тогда
				Период = ТекущаяДата();
			КонецЕсли;
			Для Каждого Строка Из Точки Цикл
				Если Строка >= Период Тогда
					Возврат Строка;
				КонецЕсли;
			КонецЦикла;
			Возврат Точки[0];
		КонецЕсли;
	Иначе
		ПродолжительностьЦикла = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПродолжительностьЦиклаСценария(Сценарий);
		Возврат ДатаНачалаПериода(ПериодПланирования,?(ТипЗнч(ПродолжительностьЦикла)=Тип("ПеречислениеСсылка.фин_Периодичность"),ПродолжительностьЦикла,Периодичность));
	КонецЕсли;
КонецФункции //СинхронизироватьПериодПланированияСоСценарием

// возвращает конец периода планирования согласно новому сценарию
//
Функция СинхронизироватьКонецПериодаПланированияСоСценарием(ПериодПланирования,Сценарий) Экспорт
	Периодичность = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий);
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ИспользоватьТочкиПланированияСценария(Сценарий) Тогда
		Точки = фин_ПроцедурыМеханизмовБюджетированияВызовСервера.МассивТочекПланированияСценария(Сценарий,"УБЫВ");
		Если Точки.Количество() = 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для сценария """+Сценарий+""" задана единственная точка планирования!");
			Возврат Точки[0];
		ИначеЕсли Точки.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для сценария """+Сценарий+""" не заданы точки планирования!");
			Возврат ДатаНачалаПериода(ТекущаяДата(),Периодичность);
		Иначе
			Период = ПериодПланирования;
			Если Период = '00010101' Тогда
				Период = ТекущаяДата();
			КонецЕсли;
			Для Каждого Строка Из Точки Цикл
				Если Строка < Период Тогда
					Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(Строка,Сценарий);
				КонецЕсли;
			КонецЦикла;
			Возврат ПолучитьГоризонтПланирования(Точки[0],Сценарий);
		КонецЕсли;
	Иначе
		Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,Периодичность);
	КонецЕсли;
КонецФункции //СинхронизироватьПериодПланированияСоСценарием

Функция СписокПериодовВШаге(ПериодПланирования,Сценарий) Экспорт
	ГоризонтПланирования = ПолучитьГоризонтПланирования(ПериодПланирования,Сценарий);
	Список = Новый СписокЗначений;
	Список.Добавить(ПериодПланирования,ПолучитьПериодСтрокой(ПериодПланирования,Сценарий));
	СледующийПериод = ДобавитьИнтервал(ПериодПланирования,Сценарий,1);
	Пока СледующийПериод<=ГоризонтПланирования Цикл
		Список.Добавить(СледующийПериод,ПолучитьПериодСтрокой(СледующийПериод,Сценарий));
		СледующийПериод = ДобавитьИнтервал(СледующийПериод,Сценарий,1);
	КонецЦикла;
	Возврат Список;
КонецФункции

Функция ПолучитьПродолжительностьЦикла(Сценарий,ПериодПланирования=Неопределено) Экспорт
	Если ПериодПланирования = Неопределено Тогда
		ПериодПланирования = ТекущаяДата();
	КонецЕсли;
	ПродолжительностьЦикла = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПродолжительностьЦиклаСценария(Сценарий);
	Если ПродолжительностьЦикла=Неопределено Тогда
		Возврат 1;
	ИначеЕсли ТипЗнч(ПродолжительностьЦикла)=Тип("Число") Тогда
		Возврат Макс(ПродолжительностьЦикла,1);
	Иначе
		Периодичность = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий);
		Если ПродолжительностьЦикла = Периодичность Тогда
			Возврат 1;
		Иначе
			Если ПродолжительностьЦикла = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Год") Тогда
				Если Периодичность = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Полугодие") Тогда
					Возврат 2;
				ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Квартал") Тогда
					Возврат 3; 
				ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Месяц") Тогда
					Возврат 12; 
				ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Декада") Тогда
					Возврат 12*3; 
				ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Неделя") Тогда
					Возврат НеделяГода(КонецГода(ПериодПланирования));
				Иначе
					Возврат ДеньГода(КонецГода(ПериодПланирования));
				КонецЕсли;
			ИначеЕсли ПродолжительностьЦикла = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Полугодие") Тогда
				Если Периодичность = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Квартал") Тогда
					Возврат 2; 
				ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Месяц") Тогда
					Возврат 6; 
				ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Декада") Тогда
					Возврат 6*3; 
				ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Неделя") Тогда
					Возврат ?(КонецНедели(ПериодПланирования)<=НачалоНедели(КонецМесяца(Дата(1,6,Год(ПериодПланирования)))),НеделяГода(КонецГода(ПериодПланирования)),НеделяГода(КонецГода(ПериодПланирования))-НеделяГода(НачалоНедели(КонецМесяца(Дата(1,6,Год(ПериодПланирования))))));
				Иначе
					Возврат ?(ДеньГода(ПериодПланирования)<=ДеньГода(КонецМесяца(Дата(1,6,Год(ПериодПланирования)))),ДеньГода(КонецГода(ПериодПланирования)),ДеньГода(КонецГода(ПериодПланирования))-ДеньГода(КонецМесяца(Дата(1,6,Год(ПериодПланирования)))));
				КонецЕсли;
			ИначеЕсли ПродолжительностьЦикла = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Квартал") Тогда
				Если Периодичность = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Месяц") Тогда
					Возврат 3; 
				ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Декада") Тогда
					Возврат 3*3; 
				ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Неделя") Тогда
					Возврат 1+НеделяГода(КонецКвартала(ПериодПланирования))-НеделяГода(НачалоКвартала(ПериодПланирования));
				Иначе
					Возврат 1+ДеньГода(КонецКвартала(ПериодПланирования))-ДеньГода(НачалоКвартала(ПериодПланирования));
				КонецЕсли;
			ИначеЕсли ПродолжительностьЦикла = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Месяц") Тогда
				Если Периодичность = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Декада") Тогда
					Возврат 3; 
				ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Неделя") Тогда
					Возврат 1+НеделяГода(КонецМесяца(ПериодПланирования))-НеделяГода(НачалоМесяца(ПериодПланирования));
				Иначе
					Возврат 1+ДеньГода(КонецМесяца(ПериодПланирования))-ДеньГода(НачалоМесяца(ПериодПланирования));
				КонецЕсли;
			ИначеЕсли ПродолжительностьЦикла = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Декада") Тогда
				Если Периодичность = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Неделя") Тогда
					Возврат 1;
				Иначе
					Возврат 10;
				КонецЕсли;
			ИначеЕсли ПродолжительностьЦикла = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Неделя") Тогда
				Возврат 7;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции
