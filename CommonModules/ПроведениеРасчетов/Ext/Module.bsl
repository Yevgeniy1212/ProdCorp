////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫПОЛНЕНИЯ РАСЧЕТОВ

// Производит расчет записей набора записей регистра расчета
// параметры:
//  ИсходныеДанные - результат запроса к исходным данным
//  НаборЗаписейРегистра - набор записей
//  ГоловнаяОрганизация - ссылка на организацию
//  ОбособленноеПодразделение - ссылка на обособленное подразделение
//	ТабличнаяЧастьДокумента - табличная часть документа, заполняется по результатам расчета
//	ТаблицаСтавокИПН - таблица значений со ставками ИПН за период, соответствующий текущему рассчитываемому периоду регистрации
//						используется для расчета "от обратного"
//
// возвращаемое значение:
//	нет
//
Процедура РассчитатьЗаписиНабора(ИсходныеДанные, 
									НаборЗаписейРегистра, 
									ГоловнаяОрганизация, 
									ОбособленноеПодразделение, 
									ТабличнаяЧастьДокумента, 
									ТаблицаСтавокИПН = Неопределено,
									МассивИндексыСтрокТабличнойЧасти = Неопределено,
									РасчетРезультатаОтОбратного = Ложь,
									КомментироватьРасчет = Ложь, 
									ФормаКомментариев = НеОпределено, 
									Налогоплательщик = Неопределено) Экспорт
	
	СтруктураПоиска = Новый Структура("НомерСтроки");
	ПустойКодДохода = Справочники.СпособыНалогообложенияДоходов.ПустаяСсылка();
	
	// признаки расчета набора записей определенного регистра
	ОсновныеНачисленияОрганизаций = Ложь;
	ДополнительныеНачисленияОрганизаций = Ложь;
	УправленческиеРасчеты = Ложь;
	УправленческиеНачисления = Ложь;
	РегламентированныеУдержания = Ложь;
    РегламентированныеНачисления = Ложь;
	Если ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") Тогда
		ОсновныеНачисленияОрганизаций = Истина;
        РегламентированныеНачисления = Истина;
    ИначеЕсли ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") Тогда
        ДополнительныеНачисленияОрганизаций = Истина;
        РегламентированныеНачисления = Истина;
	ИначеЕсли ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.УправленческиеНачисления") Тогда
		УправленческиеРасчеты = Истина;
		УправленческиеНачисления = Истина;
	ИначеЕсли ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.УправленческиеУдержания") Тогда
		УправленческиеРасчеты = Истина;
	ИначеЕсли ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.УдержанияРаботниковОрганизаций") Тогда
		РегламентированныеУдержания = Истина;
	КонецЕсли;
	
	// Для контроля предела начислений сформируем таблицу накопленных данных
	НакопленныеДанныеПоТекущемуРасчету = Новый ТаблицаЗначений;
	НакопленныеДанныеПоТекущемуРасчету.Колонки.Добавить("Регистратор");
	НакопленныеДанныеПоТекущемуРасчету.Колонки.Добавить("ФизЛицо");
	НакопленныеДанныеПоТекущемуРасчету.Колонки.Добавить("ВидРасчета");
	НакопленныеДанныеПоТекущемуРасчету.Колонки.Добавить("ПериодДействия");
	НакопленныеДанныеПоТекущемуРасчету.Колонки.Добавить("СуммаРезультат");

	ИсходныеДанные.Сбросить();
		
	Для Каждого СтрокаДвижений Из НаборЗаписейРегистра Цикл
		СтруктураПоиска.НомерСтроки = СтрокаДвижений.НомерСтроки;
		Если ИсходныеДанные.НайтиСледующий(СтруктураПоиска) Тогда
			РассчитатьЗаписьРегистраРасчета(СтрокаДвижений, ИсходныеДанные, УправленческиеРасчеты, РегламентированныеНачисления, РегламентированныеУдержания, ОсновныеНачисленияОрганизаций, ДополнительныеНачисленияОрганизаций, ТаблицаСтавокИПН, КомментироватьРасчет, ФормаКомментариев, НакопленныеДанныеПоТекущемуРасчету);
		КонецЕсли;
	КонецЦикла;
	
	ИсходныеДанные.Сбросить();
	ПериодРегистрации = НаборЗаписейРегистра[0].ПериодРегистрации;
	
	СтруктураЦелевыхРазмеровДляРасчетовОтОбратного =  Новый Структура;
	Если ПериодРегистрации >= '20100101' Тогда
		Если РасчетРезультатаОтОбратного Тогда
			СтруктураЦелевыхРазмеровДляРасчетовОтОбратного = ПолучитьСтруктуруТаблицЦелевыхРазмеровРасчетовОтОбратного(ИсходныеДанные, НаборЗаписейРегистра.Выгрузить());
		КонецЕсли;
	КонецЕсли;
	
	СтруктураВспомогательныхДанных = ПолучитьСтруктуруДополнительныхДанныхРасчетовОтОбратного(ПериодРегистрации);		
	
	ИсходныеДанные.Сбросить();
	
	Для Каждого СтрокаДвижений Из НаборЗаписейРегистра Цикл
        СтруктураПоиска.НомерСтроки = СтрокаДвижений.НомерСтроки;
		Если ИсходныеДанные.НайтиСледующий(СтруктураПоиска) Тогда
			
			Если ОсновныеНачисленияОрганизаций Или ДополнительныеНачисленияОрганизаций Тогда
				Если СтрокаДвижений.ВидРасчета.ОтОбратного Тогда
					РассчитатьЗаписьРегистраРасчетаОтОбратного(СтрокаДвижений, ИсходныеДанные, ТаблицаСтавокИПН, ПериодРегистрации, КомментироватьРасчет, СтруктураЦелевыхРазмеровДляРасчетовОтОбратного, СтруктураВспомогательныхДанных, Налогоплательщик);
				КонецЕсли;
			КонецЕсли;
			
			Если ТабличнаяЧастьДокумента = НеОпределено Тогда
				СтрокаТабличнойЧасти = НеОпределено;
			Иначе
				Если МассивИндексыСтрокТабличнойЧасти = Неопределено Тогда
					СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(НаборЗаписейРегистра.Индекс(СтрокаДвижений));
				Иначе
					СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(МассивИндексыСтрокТабличнойЧасти.Получить(НаборЗаписейРегистра.Индекс(СтрокаДвижений)));
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТабличнойЧасти <> НеОпределено Тогда
				СтрокаТабличнойЧасти.Результат = СтрокаДвижений.Результат;
				
				// дополнительные данные, определяемые в момент расчета и требующиеся для дальнейших расчетов
				Если ОсновныеНачисленияОрганизаций ИЛИ ДополнительныеНачисленияОрганизаций Тогда
					СтрокаТабличнойЧасти.ДополнительныеДанные = СтрокаДвижений.ДополнительныеДанные;
					
					Если ПериодРегистрации >= '20190101' И СтрокаДвижений.ВидРасчета.ОтОбратного И ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
						СтрокаТабличнойЧасти.СуммаВычетовДоходовОтОбратного = СтрокаДвижений.СуммаВычетовДоходовОтОбратного;	
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			// если это данные по виду расчета, период действия которого является отработанным временем
			// или учитывается как норма времени, то сохраним данные о времени
			Если (ОсновныеНачисленияОрганизаций ИЛИ УправленческиеНачисления) И СтрокаДвижений.Авторасчет Тогда
				
				СпособРасчета = ИсходныеДанные.СпособРасчета;
				
				БылоСообщениеОРабочемВремени = 
					(СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку ИЛИ
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням ИЛИ 
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам ИЛИ
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням ИЛИ
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам ИЛИ
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням ИЛИ
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам ИЛИ
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке ИЛИ
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке ИЛИ
                    СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням ИЛИ 
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам ИЛИ
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке ИЛИ
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке ИЛИ
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы ИЛИ
                    СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения ИЛИ 
                    СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения ИЛИ
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке); 
				
				БылоСообщениеОВидеВремени = Ложь;
				
				Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
					Если (ИсходныеДанные.ОтработаноВремениОсновное = NULL ИЛИ ИсходныеДанные.ОтработаноВремениОсновное = 0) 
							И ?(НЕ УправленческиеНачисления, ИсходныеДанные.ЕстьОтработаноЧасовПоТабелю = 0, Истина) Тогда
						Если НЕ БылоСообщениеОРабочемВремени Тогда
							Сообщить(""+СтрокаДвижений.Физлицо + "; " + СтрокаДвижений.ВидРасчета + ": Нет рабочих дней в заданном периоде", СтатусСообщения.Важное);
							БылоСообщениеОРабочемВремени = Истина;
						КонецЕсли; 
						// обнуляем ресурсы по отработанному времени
						СтрокаДвижений.ОтработаноДней = 0;
						СтрокаДвижений.ОтработаноЧасов = 0;
						Если ОсновныеНачисленияОрганизаций Тогда
							СтрокаДвижений.ОтработаноДнейПоПятидневке = 0 ;
						КонецЕсли; 						
					Иначе
						Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням Тогда
							СтрокаДвижений.ОтработаноДней = ОплачиваемыеДни(УправленческиеНачисления, ИсходныеДанные) * ?(СтрокаДвижений.Сторно,-1,1);
							СтрокаДвижений.ОтработаноЧасов = ОплачиваемыеЧасы(УправленческиеНачисления, ИсходныеДанные) * ?(СтрокаДвижений.Сторно,-1,1);
						ИначеЕсли СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
							СтрокаДвижений.ОтработаноЧасов = ОплачиваемыеЧасы(УправленческиеНачисления, ИсходныеДанные) * ?(СтрокаДвижений.Сторно,-1,1);
							СтрокаДвижений.ОтработаноДней = ОплачиваемыеДни(УправленческиеНачисления, ИсходныеДанные) * ?(СтрокаДвижений.Сторно,-1,1);
						Иначе
							Сообщить(""+СтрокаДвижений.Физлицо + "; " + СтрокаДвижений.ВидРасчета + ": Не задан вид учета времени", СтатусСообщения.Важное);
							БылоСообщениеОВидеВремени = Истина;
							// обнуляем ресурсы по отработанному времени
							СтрокаДвижений.ОтработаноДней = 0;
							СтрокаДвижений.ОтработаноЧасов = 0;
							Если ОсновныеНачисленияОрганизаций Тогда
								СтрокаДвижений.ОтработаноДнейПоПятидневке = 0 ;
							КонецЕсли; 						
						КонецЕсли;
						Если ОсновныеНачисленияОрганизаций Тогда
							СтрокаДвижений.ОтработаноДнейПоПятидневке = ?(ИсходныеДанные.ОтработаноВремениПроизводственныйГрафик <> Null, ИсходныеДанные.ОтработаноВремениПроизводственныйГрафик,0)  * ?(СтрокаДвижений.Сторно,-1,1) ;
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли; 
				
				Если ОсновныеНачисленияОрганизаций И ИсходныеДанные.ЗачетНормыВремени Тогда
					Если ИсходныеДанные.ОсновноеЗначениеНормаФактическийПериодДействия = NULL Тогда
						Если Не БылоСообщениеОРабочемВремени Тогда
							Сообщить(""+СтрокаДвижений.Физлицо + "; " + СтрокаДвижений.ВидРасчета + ": Нет рабочих дней в заданном периоде", СтатусСообщения.Важное);
						КонецЕсли; 
						// обнуляем ресурсы по отработанному времени
						СтрокаДвижений.НормаДней = 0;
						СтрокаДвижений.НормаЧасов = 0;
						СтрокаДвижений.НормаДнейПоПятидневке = 0 ;
					Иначе
						Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням Тогда
							СтрокаДвижений.НормаДней = НормаОплачиваемыхДней(ИсходныеДанные) * ?(СтрокаДвижений.Сторно,-1,1);
							СтрокаДвижений.НормаЧасов = НормаОплачиваемыхЧасов(ИсходныеДанные) * ?(СтрокаДвижений.Сторно,-1,1);
						ИначеЕсли ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
							СтрокаДвижений.НормаЧасов = НормаОплачиваемыхЧасов(ИсходныеДанные) * ?(СтрокаДвижений.Сторно,-1,1);
							Если Не ИсходныеДанные.ВидРасчетаЯвляетсяПочасовымОтклонением Тогда
								СтрокаДвижений.НормаДней = НормаОплачиваемыхДней(ИсходныеДанные) * ?(СтрокаДвижений.Сторно,-1,1);
							КонецЕсли;
						Иначе
							Если Не БылоСообщениеОВидеВремени Тогда
								Сообщить(""+СтрокаДвижений.Физлицо + "; " + СтрокаДвижений.ВидРасчета + ": Не задан вид учета времени", СтатусСообщения.Важное);
							КонецЕсли;
							// обнуляем ресурсы по отработанному времени
							СтрокаДвижений.НормаДней = 0;
							СтрокаДвижений.НормаЧасов = 0;
							СтрокаДвижений.НормаДнейПоПятидневке = 0 ;
						КонецЕсли;
						Если Не ИсходныеДанные.ВидРасчетаЯвляетсяПочасовымОтклонением Тогда
							СтрокаДвижений.НормаДнейПоПятидневке = ?(ИсходныеДанные.ПроизводственныйКалендарьПятидневкаФактическийПериодДействия = NULL, 0, ИсходныеДанные.ПроизводственныйКалендарьПятидневкаФактическийПериодДействия) * ?(СтрокаДвижений.Сторно,-1,1);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли; 
				
				// Перепишем данные из регистра в табличную часть документа
				Если СтрокаТабличнойЧасти <> НеОпределено тогда
					Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
						СтрокаТабличнойЧасти.ОтработаноДней = СтрокаДвижений.ОтработаноДней;
						СтрокаТабличнойЧасти.ОтработаноЧасов = СтрокаДвижений.ОтработаноЧасов;
						Если ОсновныеНачисленияОрганизаций Тогда
							СтрокаТабличнойЧасти.ОтработаноДнейПоПятидневке = СтрокаДвижений.ОтработаноДнейПоПятидневке;
						КонецЕсли;
					ИначеЕсли ИсходныеДанные.УчетОтработанногоВремени Тогда
						СтрокаТабличнойЧасти.ОтработаноДней = СтрокаДвижений.УчитываемыеДни;
						СтрокаТабличнойЧасти.ОтработаноЧасов = СтрокаДвижений.УчитываемыеЧасы;
                        Если ОсновныеНачисленияОрганизаций Тогда
                            СтрокаТабличнойЧасти.ОтработаноДнейПоПятидневке = 0;
                        КонецЕсли;
                    Иначе
                        СтрокаТабличнойЧасти.ОтработаноДней = 0;
                        СтрокаТабличнойЧасти.ОтработаноЧасов = 0;
                        Если ОсновныеНачисленияОрганизаций Тогда
                            СтрокаТабличнойЧасти.ОтработаноДнейПоПятидневке = 0;
                        КонецЕсли;
					КонецЕсли;
					
					Если ОсновныеНачисленияОрганизаций Тогда
					 	Если ИсходныеДанные.ЗачетНормыВремени Тогда
							СтрокаТабличнойЧасти.НормаДней = СтрокаДвижений.НормаДней;
							СтрокаТабличнойЧасти.НормаЧасов = СтрокаДвижений.НормаЧасов;
							СтрокаТабличнойЧасти.НормаДнейПоПятидневке = СтрокаДвижений.НормаДнейПоПятидневке;
						Иначе
                            СтрокаТабличнойЧасти.НормаДней = 0;
                            СтрокаТабличнойЧасти.НормаЧасов = 0;
                            СтрокаТабличнойЧасти.НормаДнейПоПятидневке = 0;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли; 					
			КонецЕсли;	
			
		КонецЕсли;
	КонецЦикла;
	
	// произведем перерасчет начислений "от обратного", к которым была применена корректировка дохода, 
	// до достижения в очередном начислении суммы предела в 25 МРП
	Если ПериодРегистрации >= Дата(2019, 1, 1)
		И РасчетРезультатаОтОбратного Тогда
		
		ИсходныеДанные.Сбросить();
		
		// для корректной навигации методом НайтиСледующий отсортируем по порядку номера строки
		НачисленияСКорректировкой = СтруктураЦелевыхРазмеровДляРасчетовОтОбратного.ТаблицаНачисленияСКорректировкойДохода;
		НачисленияСКорректировкой.Сортировать("НомерСтроки Возр");
		
		Для Каждого СтрокаКорректировки Из НачисленияСКорректировкой Цикл
			
			Если НЕ СтрокаКорректировки.ПересчитатьНачисление Тогда
				Продолжить;	
			КонецЕсли;
			
			СтрокаДвижений = СтрокаКорректировки.СтрокаДвижений;
			СтруктураПоиска.НомерСтроки = СтрокаДвижений.НомерСтроки;
			
			Если ИсходныеДанные.НайтиСледующий(СтруктураПоиска, "НомерСтроки")
				И СтрокаДвижений <> Неопределено Тогда
				
				СтруктураВспомогательныхДанных.Вставить("ЭтоРасчетКорректировокДохода", Истина);
				
				РассчитатьЗаписьРегистраРасчетаОтОбратного(СтрокаДвижений, ИсходныеДанные, ТаблицаСтавокИПН, ПериодРегистрации, КомментироватьРасчет, СтруктураЦелевыхРазмеровДляРасчетовОтОбратного, СтруктураВспомогательныхДанных, Налогоплательщик);
				
				Если ТабличнаяЧастьДокумента = НеОпределено Тогда
					СтрокаТабличнойЧасти = НеОпределено;
				Иначе
					Если МассивИндексыСтрокТабличнойЧасти = Неопределено Тогда
						СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(НаборЗаписейРегистра.Индекс(СтрокаДвижений));
					Иначе
						СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(МассивИндексыСтрокТабличнойЧасти.Получить(НаборЗаписейРегистра.Индекс(СтрокаДвижений)));
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокаТабличнойЧасти <> НеОпределено Тогда
					
					СтрокаТабличнойЧасти.Результат = СтрокаДвижений.Результат;
					
					// СуммаВычетовДоходовОтОбратного не меняем, в перерасчете используем ранее рассчитанную сумму вычета
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры // РассчитатьЗаписиНабора

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  ТаблицаСтавокИПН - таблица значений со ставками ИПН за текущий рассчитываемый период регистрации для расчета "от обратного"
//
// Возвращаемое значение:
//  Нет.
//
Процедура РассчитатьЗаписьРегистраРасчета(СтрокаДвижений, 
											ИсходныеДанные, 
											УправленческиеРасчеты, 
											РегламентированныеНачисления, 
											РегламентированныеУдержания, 
											ОсновныеНачисленияОрганизаций, 
											ДополнительныеНачисленияОрганизаций, 
											ТаблицаСтавокИПН = Неопределено,
											КомментироватьРасчет, ФормаКомментариев,
											НакопленныеДанныеПоТекущемуРасчету)
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	СпособРасчета = ИсходныеДанные.СпособРасчета;
	Результат = 0;
	СпособРасчетаОтПоказателей = Ложь;
	
	РезультатПолучен = Истина;
	
	ПоказательРазмер = "Показатель1";
	
	// расчет будем проводить только для авторассчитываемой записи
	Если СтрокаДвижений.Авторасчет Тогда
	
		Если КомментироватьРасчет Тогда
			КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>%%</B>", ,ИсходныеДанные.ВидРасчетаНаименование, СтрокаДвижений.ВидРасчета);
			РаботаССообщениями.КомментарийРасчета("Способ расчета: " + ИсходныеДанные.СпособРасчета, КомментарийВидаРасчета);
			РаботаССообщениями.КомментарийРасчета("Порядок расчета: " + ВизуализироватьФормулуРасчета(СтрокаДвижений.ВидРасчета, , ИсходныеДанные.ВычитатьИзБазыИПН, ИсходныеДанные.ВычитатьИзБазыОПВ, ИсходныеДанные.ВычитатьИзБазыВОСМС), КомментарийВидаРасчета);
		КонецЕсли;
	
	    // этот Если... нужно расширять при появлении новых способов расчета или видов расчета,
		// которые не укладываются в тот или иной способ
		
		// Процентом
		//	
		Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
			// Размер - процент доплаты
			Если ИсходныеДанные.РезультатБаза = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисления ");
			Иначе
				РезультатБаза = ИсходныеДанные.РезультатБаза;

				Если КомментироватьРасчет Тогда
					КомментарийБазы = РаботаССообщениями.КомментарийРасчета("Базовые начисления составили всего: " + РезультатБаза, КомментарийВидаРасчета,,,, Ложь);
				КонецЕсли;
				
				Если РегламентированныеУдержания Тогда
					
					Если ИсходныеДанные.ВычитатьИзБазыИПН И ИсходныеДанные.ИсчисленныйНалог <> NULL Тогда
						РезультатБаза = РезультатБаза - ИсходныеДанные.ИсчисленныйНалог;
						Если КомментироватьРасчет Тогда
							РаботаССообщениями.КомментарийРасчета("Исчислен ИПН за текущий период: " + ИсходныеДанные.ИсчисленныйНалог, КомментарийВидаРасчета); 
						КонецЕсли;
					КонецЕсли;
					
					Если ИсходныеДанные.ВычитатьИзБазыОПВ И ИсходныеДанные.ИсчисленныйВзнос <> NULL Тогда
						РезультатБаза = РезультатБаза - ИсходныеДанные.ИсчисленныйВзнос;
						Если КомментироватьРасчет Тогда
							РаботаССообщениями.КомментарийРасчета("Исчислены ОПВ за текущий период: " + ИсходныеДанные.ИсчисленныйВзнос, КомментарийВидаРасчета); 
						КонецЕсли;
					КонецЕсли;
					
					Если ИсходныеДанные.ВычитатьИзБазыВОСМС И ИсходныеДанные.ИсчисленныйВзносОСМС <> NULL Тогда
						РезультатБаза = РезультатБаза - ИсходныеДанные.ИсчисленныйВзносОСМС;
						Если КомментироватьРасчет Тогда
							РаботаССообщениями.КомментарийРасчета("Исчислены взносы ОСМС за текущий период: " + ИсходныеДанные.ИсчисленныйВзносОСМС, КомментарийВидаРасчета); 
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				Результат = РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100;
				
				Если КомментироватьРасчет Тогда
					Если РегламентированныеУдержания Тогда
						РаботаССообщениями.КомментарийРасчета("Процент удержания: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета); 
					Иначе
						РаботаССообщениями.КомментарийРасчета("Процент оплаты: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета); 
					КонецЕсли;
				КонецЕсли;
				
				Если РегламентированныеУдержания Тогда
					Результат = Макс(Результат, 0);
				КонецЕсли;
			КонецЕсли;
			
		// ИЛКоэффициентомПоМРПДоПредела
		//	
		ИначеЕсли ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.ИЛКоэффициентомПоМРПДоПредела Тогда
			// Размер - коэффициент МРП
			РасшифровкаМРП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			Если ИсходныеДанные.РазмерМесячногоРасчетногоПоказателя = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": ", "Не определен размер месячного расчетного показателя", РасшифровкаМРП);
			Иначе
				ПределПоДокументуОснованию  = ?(ИсходныеДанные.ПределПоДокументуОснованию = Null, 0 ,ИсходныеДанные.ПределПоДокументуОснованию);
				УжеНачисленоЗаВсюИсторию 	= ?(ИсходныеДанные.УжеНачисленоЗаВсюИсторию = Null, 0, ИсходныеДанные.УжеНачисленоЗаВсюИсторию);
				
				ТекущийРезультат = ИсходныеДанные.РазмерМесячногоРасчетногоПоказателя * СтрокаДвижений[ПоказательРазмер]; 
				// Ограничим результат расчета в случае достижения предела удержания
				Результат = Мин(ТекущийРезультат, ПределПоДокументуОснованию  - УжеНачисленоЗаВсюИсторию);
				
				Если КомментироватьРасчет Тогда
					Если УжеНачисленоЗаВсюИсторию <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Ранее удержано с момента действия исп. листа: " + УжеНачисленоЗаВсюИсторию, КомментарийВидаРасчета);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("Удержание производится до выплаты: ", КомментарийВидаРасчета, ПределПоДокументуОснованию, СтрокаДвижений.ДокументОснование);
					РаботаССообщениями.КомментарийРасчета("Коэффициент МРП: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета); 
					РаботаССообщениями.КомментарийРасчета("Месячный расчетный показатель: ", КомментарийВидаРасчета, "" + ИсходныеДанные.РазмерМесячногоРасчетногоПоказателя, РасшифровкаМРП); 
				КонецЕсли;
				
			КонецЕсли;
			
		// ИЛКоэффициентомПоМРП
		//	
		ИначеЕсли ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.ИЛКоэффициентомПоМРП Тогда
			// Размер - коэффициент МРП
			РасшифровкаМРП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			Если ИсходныеДанные.РазмерМесячногоРасчетногоПоказателя = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": ", "Не определен размер месячного расчетного показателя", РасшифровкаМРП);
			Иначе
				Результат = ИсходныеДанные.РазмерМесячногоРасчетногоПоказателя * СтрокаДвижений[ПоказательРазмер];
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Коэффициент МРП: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета); 
					РаботаССообщениями.КомментарийРасчета("Месячный расчетный показатель: ", КомментарийВидаРасчета, "" + ИсходныеДанные.РазмерМесячногоРасчетногоПоказателя, РасшифровкаМРП); 
				КонецЕсли;
			КонецЕсли;
			
		// ПоМесячномуРасчетномуПоказателю
		//	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю Тогда
			// Размер - коэффициент МРП
			РасшифровкаМРП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			Если ИсходныеДанные.РазмерМесячногоРасчетногоПоказателя = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": ", "Не определен размер месячного расчетного показателя", РасшифровкаМРП);
			Иначе
				Результат = ИсходныеДанные.РазмерМесячногоРасчетногоПоказателя * СтрокаДвижений[ПоказательРазмер];
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Коэффициент МРП: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета); 
					РаботаССообщениями.КомментарийРасчета("Месячный расчетный показатель: ", КомментарийВидаРасчета, "" + ИсходныеДанные.РазмерМесячногоРасчетногоПоказателя, РасшифровкаМРП); 
				КонецЕсли;
			КонецЕсли;
			
		// ПоМесячномуРасчетномуПоказателюПоДням
		// ПоМесячномуРасчетномуПоказателюПоЧасам
		//
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням или 
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам Тогда
			
			РасшифровкаМРП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");		
			Если ИсходныеДанные.РазмерМесячногоРасчетногоПоказателя = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": ", "Не определен размер месячного расчетного показателя", РасшифровкаМРП);
				СтрокаДвижений.Результат = 0;
				Возврат;
			КонецЕсли;
					
			НормаВремени = НормаВремениЗаМесяц(ИсходныеДанные, ИсходныеДанные.ВидУчетаВремени);
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные);
			Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
			ИначеЕсли НормаВремени = 0 или ОтработаноВремениОсновное = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
			Иначе
				Результат = ИсходныеДанные.РазмерМесячногоРасчетногоПоказателя * СтрокаДвижений[ПоказательРазмер] * ОтработаноВремениОсновное / НормаВремени;
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Коэффициент МРП: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Месячный расчетный показатель: ", КомментарийВидаРасчета, "" + ИсходныеДанные.РазмерМесячногоРасчетногоПоказателя, РасшифровкаМРП);
					РаботаССообщениями.КомментарийРасчета("Норма времени за месяц: " + НормаВремени, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Оплачиваемое время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Вид учета времени: " + СтрокаДвижений.ВидУчетаВремени, КомментарийВидаРасчета);
				КонецЕсли;
				
				// чтобы за счет переработки не увеличить сумму регламентированных начислений (например, экологической доплаты)
				Если Не СтрокаДвижений.Сторно Тогда
					Если Результат + ИсходныеДанные.УжеНачисленоВТекущемПериоде > ИсходныеДанные.РазмерМесячногоРасчетногоПоказателя * СтрокаДвижений[ПоказательРазмер] Тогда
						Результат = ИсходныеДанные.РазмерМесячногоРасчетногоПоказателя * СтрокаДвижений[ПоказательРазмер] - ИсходныеДанные.УжеНачисленоВТекущемПериоде;
						
						Если КомментироватьРасчет Тогда
							РаботаССообщениями.КомментарийРасчета("Ранее начислено в текущем периоде: " + ИсходныеДанные.УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					// сторнируем не больше, чем начислили
					Если Результат > ИсходныеДанные.УжеНачисленоВТекущемПериоде Тогда
						Результат = ИсходныеДанные.УжеНачисленоВТекущемПериоде;

						Если КомментироватьРасчет Тогда
							РаботаССообщениями.КомментарийРасчета("Ранее начислено в текущем периоде: " + ИсходныеДанные.УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// фиксируем отработанное время
			Если (НЕ ИсходныеДанные.ЗачетОтработанногоВремени) И (ИсходныеДанные.УчетОтработанногоВремени) Тогда
				СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
			Иначе
				СтрокаДвижений.УчитываемыеДни  = 0;
				СтрокаДвижений.УчитываемыеЧасы = 0;
			КонецЕсли;

		// ПоМинимальнойЗаработнойПлате
		//	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате Тогда
			// Размер - коэффициент МЗП
			РасшифровкаМЗП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			Если ИсходныеДанные.РазмерМинимальнойЗаработнойПлаты = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": ", "Не определен размер минимальной заработной платы", РасшифровкаМЗП);
			Иначе
				Результат = ИсходныеДанные.РазмерМинимальнойЗаработнойПлаты * СтрокаДвижений[ПоказательРазмер];
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Коэффициент МЗП: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Минимальная заработная плата: ", КомментарийВидаРасчета, "" + ИсходныеДанные.РазмерМинимальнойЗаработнойПлаты, РасшифровкаМЗП);
				КонецЕсли;
				
			КонецЕсли;
			
		// ПоМинимальнойЗаработнойПлатеПоДням
		// ПоМинимальнойЗаработнойПлатеПоЧасам
		//
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням или 
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам Тогда

			// Размер - коэффициент МЗП
			РасшифровкаМЗП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			Если ИсходныеДанные.РазмерМинимальнойЗаработнойПлаты = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": ", "Не определен размер минимальной заработной платы", РасшифровкаМЗП);
				СтрокаДвижений.Результат = 0;
				Возврат;
			КонецЕсли;
					
			НормаВремени = НормаВремениЗаМесяц(ИсходныеДанные, ИсходныеДанные.ВидУчетаВремени);
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные);
			Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
			ИначеЕсли НормаВремени = 0 или ОтработаноВремениОсновное = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
			Иначе
				Результат = ИсходныеДанные.РазмерМинимальнойЗаработнойПлаты * СтрокаДвижений[ПоказательРазмер] * ОтработаноВремениОсновное / НормаВремени;

				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Коэффициент МЗП: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Минимальная заработная плата: ", КомментарийВидаРасчета, "" + ИсходныеДанные.РазмерМинимальнойЗаработнойПлаты, РасшифровкаМЗП);
					РаботаССообщениями.КомментарийРасчета("Норма времени за месяц: " + НормаВремени, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Оплачиваемое время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Вид учета времени: " + СтрокаДвижений.ВидУчетаВремени, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
			
			// фиксируем отработанное время
			Если (НЕ ИсходныеДанные.ЗачетОтработанногоВремени) И (ИсходныеДанные.УчетОтработанногоВремени) Тогда
				СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
			Иначе
				СтрокаДвижений.УчитываемыеДни  = 0;
				СтрокаДвижений.УчитываемыеЧасы = 0;
			КонецЕсли;
			
		// ИсполнительныйЛистПроцентом
		//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Тогда
			
			// Размер - процент удержания
			Если ИсходныеДанные.РезультатБаза = NULL Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисления ");
			Иначе
				
				РезультатБаза = ИсходныеДанные.РезультатБаза;
				
				Если КомментироватьРасчет Тогда
					КомментарийБазы = РаботаССообщениями.КомментарийРасчета("Базовые начисления составили всего: " + РезультатБаза, КомментарийВидаРасчета,,,, Ложь);
				КонецЕсли;
				
				Если ИсходныеДанные.ВычитатьИзБазыИПН Тогда
					ИсчисленныйНалог 	= ?(ИсходныеДанные.ИсчисленныйНалог = Null, 0, ИсходныеДанные.ИсчисленныйНалог);
					РезультатБаза 		= РезультатБаза - ИсчисленныйНалог;

					Если КомментироватьРасчет Тогда
						РаботаССообщениями.КомментарийРасчета("Исчислен ИПН за текущий период: " + ИсчисленныйНалог, КомментарийВидаРасчета); 
					КонецЕсли;
					
				КонецЕсли;
				
				Если ИсходныеДанные.ВычитатьИзБазыОПВ Тогда
					ИсчисленныйВзнос	= ?(ИсходныеДанные.ИсчисленныйВзнос = Null, 0, ИсходныеДанные.ИсчисленныйВзнос);
					РезультатБаза 		= РезультатБаза - ИсчисленныйВзнос;
					
					Если КомментироватьРасчет Тогда
						РаботаССообщениями.КомментарийРасчета("Исчислены ОПВ за текущий период: " + ИсходныеДанные.ИсчисленныйВзнос, КомментарийВидаРасчета); 
					КонецЕсли;
					
				КонецЕсли;
				
				Если ИсходныеДанные.ВычитатьИзБазыВОСМС Тогда
					ИсчисленныйВзносОСМС	= ?(ИсходныеДанные.ИсчисленныйВзносОСМС = Null, 0, ИсходныеДанные.ИсчисленныйВзносОСМС);
					РезультатБаза 			= РезультатБаза - ИсчисленныйВзносОСМС;
					
					Если КомментироватьРасчет Тогда
						РаботаССообщениями.КомментарийРасчета("Исчислены взносы ОСМС за текущий период: " + ИсходныеДанные.ИсчисленныйВзносОСМС, КомментарийВидаРасчета); 
					КонецЕсли;
					
				КонецЕсли;
				
				УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
				
				Результат = Макс((РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100) - УжеНачисленоВТекущемПериоде, 0);
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Процент удержания: ", КомментарийВидаРасчета, СтрокаДвижений[ПоказательРазмер], СтрокаДвижений.ДокументОснование);
					Если УжеНачисленоВТекущемПериоде <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Ранее удержано в текущем периоде: " + УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			
		// ИсполнительныйЛистПроцентомДоПредела
		//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Тогда
			
			// Размер - процент удержания
			Если ИсходныеДанные.РезультатБаза = NULL Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисления ");
			Иначе
				
				РезультатБаза = ИсходныеДанные.РезультатБаза;

				Если КомментироватьРасчет Тогда
					КомментарийБазы = РаботаССообщениями.КомментарийРасчета("Базовые начисления составили всего: " + РезультатБаза, КомментарийВидаРасчета,,,, Ложь);
				КонецЕсли;
				
				Если ИсходныеДанные.ВычитатьИзБазыИПН Тогда
					ИсчисленныйНалог 	= ?(ИсходныеДанные.ИсчисленныйНалог = Null, 0, ИсходныеДанные.ИсчисленныйНалог);
					РезультатБаза 		= РезультатБаза - ИсчисленныйНалог;

					Если КомментироватьРасчет Тогда
						РаботаССообщениями.КомментарийРасчета("Исчислен ИПН за текущий период: " + ИсчисленныйНалог, КомментарийВидаРасчета); 
					КонецЕсли;
					
				КонецЕсли;

				Если ИсходныеДанные.ВычитатьИзБазыОПВ Тогда
					ИсчисленныйВзнос	= ?(ИсходныеДанные.ИсчисленныйВзнос = Null, 0, ИсходныеДанные.ИсчисленныйВзнос);
					РезультатБаза 		= РезультатБаза - ИсчисленныйВзнос;
					
					Если КомментироватьРасчет Тогда
						РаботаССообщениями.КомментарийРасчета("Исчислены ОПВ за текущий период: " + ИсходныеДанные.ИсчисленныйВзнос, КомментарийВидаРасчета); 
					КонецЕсли;
					
				КонецЕсли;
				
				Если ИсходныеДанные.ВычитатьИзБазыВОСМС Тогда
					ИсчисленныйВзносОСМС	= ?(ИсходныеДанные.ИсчисленныйВзносОСМС = Null, 0, ИсходныеДанные.ИсчисленныйВзносОСМС);
					РезультатБаза 			= РезультатБаза - ИсчисленныйВзносОСМС;
					
					Если КомментироватьРасчет Тогда
						РаботаССообщениями.КомментарийРасчета("Исчислены взносы ОСМС за текущий период: " + ИсходныеДанные.ИсчисленныйВзносОСМС, КомментарийВидаРасчета); 
					КонецЕсли;
					
				КонецЕсли;

				УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
				ПределПоДокументуОснованию  = ?(ИсходныеДанные.ПределПоДокументуОснованию = Null, 0 ,ИсходныеДанные.ПределПоДокументуОснованию);
				УжеНачисленоЗаВсюИсторию 	= ?(ИсходныеДанные.УжеНачисленоЗаВсюИсторию = Null, 0, ИсходныеДанные.УжеНачисленоЗаВсюИсторию);
				
				Результат = Макс((РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100) - УжеНачисленоВТекущемПериоде, 0);
				// Ограничим результат расчета в случае достижения предела удержания
				Результат = Мин(Результат, ПределПоДокументуОснованию  - УжеНачисленоЗаВсюИсторию);
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Процент удержания: ", КомментарийВидаРасчета, СтрокаДвижений[ПоказательРазмер], СтрокаДвижений.ДокументОснование);
					Если УжеНачисленоВТекущемПериоде <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Ранее удержано в текущем периоде: " + УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
					КонецЕсли;
					Если УжеНачисленоЗаВсюИсторию <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Ранее удержано с момента действия исп. листа: " + УжеНачисленоЗаВсюИсторию, КомментарийВидаРасчета);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("Удержание производится до выплаты: ", КомментарийВидаРасчета, ПределПоДокументуОснованию, СтрокаДвижений.ДокументОснование);
				КонецЕсли;
				
			КонецЕсли;
			
			
		// ИсполнительныйЛистФиксСуммойДоПредела
		//		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда
			
			ПределПоДокументуОснованию  = ?(ИсходныеДанные.ПределПоДокументуОснованию = Null, 0 ,ИсходныеДанные.ПределПоДокументуОснованию);
			УжеНачисленоЗаВсюИсторию 	= ?(ИсходныеДанные.УжеНачисленоЗаВсюИсторию = Null, 0, ИсходныеДанные.УжеНачисленоЗаВсюИсторию);
			
			// Ограничим результат расчета в случае достижения предела удержания
			Результат = Мин(СтрокаДвижений[ПоказательРазмер], ПределПоДокументуОснованию  - УжеНачисленоЗаВсюИсторию);
			
			Если КомментироватьРасчет Тогда
				РаботаССообщениями.КомментарийРасчета("Сумма удержания: ", КомментарийВидаРасчета, СтрокаДвижений[ПоказательРазмер], СтрокаДвижений.ДокументОснование);
				Если УжеНачисленоЗаВсюИсторию <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Ранее удержано с момента действия исп. листа: " + УжеНачисленоЗаВсюИсторию, КомментарийВидаРасчета);
				КонецЕсли;
				РаботаССообщениями.КомментарийРасчета("Удержание производится до выплаты: ", КомментарийВидаРасчета, ПределПоДокументуОснованию, СтрокаДвижений.ДокументОснование);
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
			
			Если ИсходныеДанные.РазмерПочтовогоПеревода <> 0 Тогда
				Результат = Макс(ИсходныеДанные.ВеличинаСтавкиПочтовогоСбора / 100 * ИсходныеДанные.РазмерПочтовогоПеревода, ИсходныеДанные.МинСуммаПочтовогоСбора);
			КонецЕсли;
			
			Если КомментироватьРасчет Тогда
				РаботаССообщениями.КомментарийРасчета("Сумма удержания по исп. листу: " + ИсходныеДанные.РазмерПочтовогоПеревода, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Процент сбора: " + ИсходныеДанные.ВеличинаСтавкиПочтовогоСбора, КомментарийВидаРасчета);
				Если ИсходныеДанные.МинСуммаПочтовогоСбора <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Мин сумма сбора: " + ИсходныеДанные.МинСуммаПочтовогоСбора, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			
		// УдержаниеФиксированнойСуммой
		//		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой Тогда
			
			УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
			// Размер - сумма удержания 
			// за месяц должно удержаться ровно столько, сколько указано в документе
			Результат = СтрокаДвижений[ПоказательРазмер] - УжеНачисленоВТекущемПериоде;
			
			Если КомментироватьРасчет Тогда
				РаботаССообщениями.КомментарийРасчета("Сумма удержания по исп. листу: ", КомментарийВидаРасчета, СтрокаДвижений[ПоказательРазмер], СтрокаДвижений.ДокументОснование);
				Если УжеНачисленоВТекущемПериоде <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Ранее удержано в текущем периоде: " + УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			
		// ФиксированнойСуммой
		// ПоДоговоруФиксированнойСуммой
		//		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой
				  Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммойДляПочасовогоОтклонения
				  Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой Тогда
			// Размер - сумма доплаты
			Результат = СтрокаДвижений[ПоказательРазмер];

			Если КомментироватьРасчет Тогда
				Если РегламентированныеУдержания Тогда
					РаботаССообщениями.КомментарийРасчета("Сумма удержания: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				Иначе
					РаботаССообщениями.КомментарийРасчета("Сумма оплаты: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			// фиксируем отработанное время
			Если ОсновныеНачисленияОрганизаций Тогда
				Если (НЕ ИсходныеДанные.ЗачетОтработанногоВремени) И (ИсходныеДанные.УчетОтработанногоВремени) Тогда
					СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
					СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				Иначе
					СтрокаДвижений.УчитываемыеДни  = 0;
					СтрокаДвижений.УчитываемыеЧасы = 0;
				КонецЕсли;
			КонецЕсли;
			
			
		// НулеваяСумма
		//		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма
					Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения Тогда
			// Ничего не считаем, только фиксируем время при необходимости 
			Если ИсходныеДанные.УчетОтработанногоВремени Тогда
				Если Не ЭтоРасчетПочасовогоОтклонения(СпособРасчета) Тогда
					СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				Иначе
					СтрокаДвижений.УчитываемыеДни = 0;
				КонецЕсли;
				СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
			Иначе
				СтрокаДвижений.УчитываемыеДни 	= 0;
				СтрокаДвижений.УчитываемыеЧасы 	= 0;
			КонецЕсли;
			
			
		// ПоМесячнойТарифнойСтавкеПоДням
		// ПоМесячнойТарифнойСтавкеПоЧасам
		//
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням или 
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам или
			        СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням или 
			        СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам или
			        СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения или
					СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням Тогда
					
			НормаВремени = НормаВремениЗаМесяц(ИсходныеДанные, ИсходныеДанные.ВидУчетаВремени);
	        ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные);
			//-=-=
			ДополнитьОтработанноеВремяИспытательнымСроком(ИсходныеДанные, ОтработаноВремениОсновное); 
			//-=-=
			Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
			ИначеЕсли НормаВремени = 0 или ОтработаноВремениОсновное = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
			Иначе
				Результат = СтрокаДвижений[ПоказательРазмер] * ОтработаноВремениОсновное / НормаВремени;

				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Тарифная ставка: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Норма времени за месяц: " + НормаВремени, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Оплачиваемое время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Вид учета времени: " + СтрокаДвижений.ВидУчетаВремени, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
			
			// фиксируем отработанное время
			Если (НЕ ИсходныеДанные.ЗачетОтработанногоВремени) И (ИсходныеДанные.УчетОтработанногоВремени) Тогда
				Если Не ЭтоРасчетПочасовогоОтклонения(СпособРасчета) Тогда
					СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				Иначе	
					СтрокаДвижений.УчитываемыеДни  = 0;
				КонецЕсли;
				СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
			Иначе
				СтрокаДвижений.УчитываемыеДни  = 0;
				СтрокаДвижений.УчитываемыеЧасы = 0;
			КонецЕсли;
			
		// ПоЧасовойТарифнойСтавке
		// ПоДневнойТарифнойСтавке
		//
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке ИЛИ
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке ИЛИ
			        СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке ИЛИ
			        СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке ИЛИ
					СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовой ИЛИ
					СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифДневной ИЛИ
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы ИЛИ
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения Тогда
			
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные);
			Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
			ИначеЕсли ОтработаноВремениОсновное = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
			Иначе
				Результат = СтрокаДвижений[ПоказательРазмер] * ОтработаноВремениОсновное;
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Тарифная ставка: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Оплачиваемое время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Вид учета времени: " + СтрокаДвижений.ВидУчетаВремени, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
			
			// фиксируем отработанное время
			Если (НЕ ИсходныеДанные.ЗачетОтработанногоВремени) И (ИсходныеДанные.УчетОтработанногоВремени) Тогда
				Если Не ЭтоРасчетПочасовогоОтклонения(СпособРасчета) Тогда
					СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				Иначе
					СтрокаДвижений.УчитываемыеДни  = 0;
				КонецЕсли;
				СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
			Иначе
				СтрокаДвижений.УчитываемыеДни  = 0;
			    СтрокаДвижений.УчитываемыеЧасы = 0;
			КонецЕсли;
			
		// ВыходноеПособие	и  СохраняемыйЗаработокНаВремяТрудоустройства
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ВыходноеПособие 
		ИЛИ ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ВыходноеПособие2018 Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда 
				Если 
					ИсходныеДанные.СреднийЗаработок = Null
					ИЛИ ИсходныеДанные.СуммированныйУчетРабочегоВремени = Null
					ИЛИ (ИсходныеДанные.СуммированныйУчетРабочегоВремени и (ИсходныеДанные.ОтработаноЧасов = 0 ИЛИ ИсходныеДанные.ОтработаноЧасов = Null))
					ИЛИ (Не ИсходныеДанные.СуммированныйУчетРабочегоВремени и (ИсходныеДанные.ОтработаноДней = 0 ИЛИ ИсходныеДанные.ОтработаноДней = Null)) Тогда
					РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка ");
					СтрокаДвижений.Результат = 0;
					Возврат;
				КонецЕсли;	
			КонецЕсли;	
			
			ПроцентОплаты = 100;
			ОплачиваемоеВремя = СтрокаДвижений[ПоказательРазмер];
			КоэффициентИндексации = СтрокаДвижений.КоэффициентИндексации;
			
			// Расчитаем заработок за день (или за час для суммированного учета времени)
			Если ИсходныеДанные.СуммированныйУчетРабочегоВремени Тогда
				ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноЧасов, 2);
			Иначе
				ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноДней, 2);
			КонецЕсли;	
			
			Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты/100 * КоэффициентИндексации;
			
			Если КомментироватьРасчет Тогда
				РаботаССообщениями.КомментарийРасчета("Оплачиваемое время: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Коэффициент индексации: " + КоэффициентИндексации, КомментарийВидаРасчета);
				Если ИсходныеДанные.СуммированныйУчетРабочегоВремени Тогда
					РаботаССообщениями.КомментарийРасчета("Среднечасовой заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				Иначе
					РаботаССообщениями.КомментарийРасчета("Среднедневной заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
		// ОплатаПоСреднему
		//
		ИначеЕсли СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднему ИЛИ 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку ИЛИ 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда 
				Если ИсходныеДанные.СреднийЗаработок = Null 
					ИЛИ ((СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам) и (ИсходныеДанные.ОтработаноЧасов = 0 ИЛИ ИсходныеДанные.ОтработаноЧасов = Null))
					ИЛИ ((СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням) и (ИсходныеДанные.ОтработаноДней = 0 ИЛИ ИсходныеДанные.ОтработаноДней = Null)) Тогда
					РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка ");
					СтрокаДвижений.Результат = 0;
					Возврат;
				КонецЕсли;	
			КонецЕсли;	
			
			Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
			КонецЕсли;
			
			ПроцентОплаты = ?(СтрокаДвижений[ПоказательРазмер] = 0, 100, СтрокаДвижений[ПоказательРазмер]);
			ОплачиваемоеВремя = ОплачиваемоеВремя(ИсходныеДанные);
			КоэффициентИндексации = СтрокаДвижений.КоэффициентИндексации;
			
			// Расчитаем заработок за день (или за час для суммированного учета времени)
			// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
			Если НЕ СтрокаДвижений.Сторно Тогда
				
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноЧасов, 2);
				Иначе
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноДней, 2);
				КонецЕсли;	
				
				// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
				СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
				
			Иначе
				ЗаработокЗаЕдиницуВремени = Окр(СтрокаДвижений.ДополнительныеДанные, 2);
			КонецЕсли; 
			
			Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты/100 * КоэффициентИндексации;
			
			Если КомментироватьРасчет Тогда
				РаботаССообщениями.КомментарийРасчета("Процент оплаты: " + ПроцентОплаты, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Оплачиваемое время: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Коэффициент индексации: " + КоэффициентИндексации, КомментарийВидаРасчета);
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					РаботаССообщениями.КомментарийРасчета("Среднечасовой заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				Иначе
					РаботаССообщениями.КомментарийРасчета("Среднедневной заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				КонецЕсли;				
			КонецЕсли;
			
			// фиксируем отработанное время
			Если (ИсходныеДанные.УчетОтработанногоВремени) Тогда
				Если Не ЭтоРасчетПочасовогоОтклонения(СпособРасчета) Тогда
					СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				Иначе
					СтрокаДвижений.УчитываемыеДни  = 0;
				КонецЕсли;
				СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
			Иначе
			    СтрокаДвижений.УчитываемыеДни  = 0;
			    СтрокаДвижений.УчитываемыеЧасы = 0;
			КонецЕсли;
			
			
		// ДоплатаДоСреднегоЗаработка
		//
		//ИначеЕсли СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаДоСреднегоЗаработка ИЛИ 
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда 
				Если ИсходныеДанные.СреднийЗаработок = Null 
					ИЛИ ((СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам) и (ИсходныеДанные.ОтработаноЧасов = 0 ИЛИ ИсходныеДанные.ОтработаноЧасов = Null))
					ИЛИ ((СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням) и (ИсходныеДанные.ОтработаноДней = 0 ИЛИ ИсходныеДанные.ОтработаноДней = Null)) Тогда
					РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка ");
					СтрокаДвижений.Результат = 0;
					Возврат;
				КонецЕсли;	
			КонецЕсли;	
			
			Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
			КонецЕсли;
			
			ПроцентОплаты = ?(СтрокаДвижений[ПоказательРазмер] = 0, 100, СтрокаДвижений[ПоказательРазмер]);
			ОплачиваемоеВремя = ОплачиваемоеВремя(ИсходныеДанные);
			КоэффициентИндексации = СтрокаДвижений.КоэффициентИндексации;
			
			// Расчитаем заработок за день (или за час для суммированного учета времени)
			// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
			Если НЕ СтрокаДвижений.Сторно Тогда
				
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноЧасов, 2);
				Иначе
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноДней, 2);
				КонецЕсли;	
				
				// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
				СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
				
			Иначе
				ЗаработокЗаЕдиницуВремени = Окр(СтрокаДвижений.ДополнительныеДанные, 2);
			КонецЕсли; 
			
			СреднийЗаработок = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты/100 * КоэффициентИндексации;
			
			// Вычтем из среднего заработка начисленные суммы
			РезультатБаза = Окр(?(ИсходныеДанные.РезультатБаза = Null, 0, ИсходныеДанные.РезультатБаза), 2);
			Результат = Макс(СреднийЗаработок - РезультатБаза, 0);
			
			Если КомментироватьРасчет Тогда
				РаботаССообщениями.КомментарийРасчета("Процент оплаты: " + ПроцентОплаты, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Оплачиваемое время: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Коэффициент индексации: " + КоэффициентИндексации, КомментарийВидаРасчета);
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					РаботаССообщениями.КомментарийРасчета("Среднечасовой заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				Иначе
					РаботаССообщениями.КомментарийРасчета("Среднедневной заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				КонецЕсли;
				РаботаССообщениями.КомментарийРасчета("Оплата по среднему заработку: " + СреднийЗаработок, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Ранее начислено в текущем периоде: " + РезультатБаза, КомментарийВидаРасчета);				
			КонецЕсли;
			
			// фиксируем отработанное время
			Если (ИсходныеДанные.УчетОтработанногоВремени) Тогда
				СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
			Иначе
				СтрокаДвижений.УчитываемыеДни  = 0;
				СтрокаДвижений.УчитываемыеЧасы = 0;
			КонецЕсли;
			
			
		// ПоСреднемуЗаработкуДляБольничных
		//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда
				Если ИсходныеДанные.СреднийЗаработок = Null 
					ИЛИ ((СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам) и (ИсходныеДанные.ОтработаноЧасов = 0 ИЛИ ИсходныеДанные.ОтработаноЧасов = Null))
					ИЛИ ((СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням) и (ИсходныеДанные.ОтработаноДней = 0 ИЛИ ИсходныеДанные.ОтработаноДней = Null)) Тогда
					РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка ");
					СтрокаДвижений.Результат = 0;
					Возврат;
				КонецЕсли;	
			КонецЕсли;	
			
			Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
			КонецЕсли;
			
			ПроцентОплаты = СтрокаДвижений[ПоказательРазмер];
			ОплачиваемоеВремя = ОплачиваемоеВремя(ИсходныеДанные);
			КоэффициентИндексации = СтрокаДвижений.КоэффициентИндексации;
			
			// Расчитаем заработок за день (или за час для суммированного учета времени)
			// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
			Если НЕ СтрокаДвижений.Сторно Тогда
				
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноЧасов, 2);
				Иначе
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноДней, 2);
				КонецЕсли;	
				
				// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
				СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
				
			Иначе
				ЗаработокЗаЕдиницуВремени = Окр(СтрокаДвижений.ДополнительныеДанные, 2);
			КонецЕсли;
			
			Если КомментироватьРасчет Тогда
				РаботаССообщениями.КомментарийРасчета("Процент оплаты: " + ПроцентОплаты, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Оплачиваемое время: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Коэффициент индексации: " + КоэффициентИндексации, КомментарийВидаРасчета);
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					РаботаССообщениями.КомментарийРасчета("Среднечасовой заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				Иначе
					РаботаССообщениями.КомментарийРасчета("Среднедневной заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ИсходныеДанные.ПроверятьОграничениеПособия Тогда
				Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100 * КоэффициентИндексации;
			Иначе

				СтруктураПоиска = Новый Структура("Регистратор, ФизЛицо, ВидРасчета, ПериодДействия", ИсходныеДанные.Регистратор, ИсходныеДанные.ФизЛицо, ВидРасчета, НачалоМесяца(ИсходныеДанные.ПериодДействияНачало));
				НайденныеСтроки = НакопленныеДанныеПоТекущемуРасчету.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НакопленныеДанныеСтрока = НайденныеСтроки[0];
					НачисленнаяСуммаПоТекущемуРасчету = НакопленныеДанныеСтрока.СуммаРезультат;
				Иначе 
					НакопленныеДанныеСтрока = Неопределено;
					НачисленнаяСуммаПоТекущемуРасчету = 0;
				КонецЕсли;
								
				РазмерКомпенсации = Окр(ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100 * КоэффициентИндексации, 2);
				Результат = Мин(РазмерКомпенсации, ИсходныеДанные.РазмерОграничения - НачисленнаяСуммаПоТекущемуРасчету);
				
				Если НакопленныеДанныеСтрока = Неопределено Тогда
					НакопленныеДанныеСтрока = НакопленныеДанныеПоТекущемуРасчету.Добавить();
					НакопленныеДанныеСтрока.Регистратор 	= ИсходныеДанные.Регистратор;
					НакопленныеДанныеСтрока.ФизЛицо 		= ИсходныеДанные.ФизЛицо;
					НакопленныеДанныеСтрока.ВидРасчета 		= ВидРасчета;
					НакопленныеДанныеСтрока.ПериодДействия 	= НачалоМесяца(ИсходныеДанные.ПериодДействияНачало);
				КонецЕсли;
				НакопленныеДанныеСтрока.СуммаРезультат 		= НачисленнаяСуммаПоТекущемуРасчету + Результат;
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Оплата по среднему заработку: " + РазмерКомпенсации, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Размер ограничения пособия: " + ИсходныеДанные.РазмерОграниченияБЛЗаМесяц, КомментарийВидаРасчета);
					УжеНачисленоВТекущемПериодеБЛ = ИсходныеДанные.УжеНачисленоВТекущемПериодеБЛ + НачисленнаяСуммаПоТекущемуРасчету;
					РаботаССообщениями.КомментарийРасчета("Ранее начислено пособия за текущий месяц: " + УжеНачисленоВТекущемПериодеБЛ, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
			
			// фиксируем отработанное время
			Если (ИсходныеДанные.УчетОтработанногоВремени) Тогда
				СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
			Иначе
				СтрокаДвижений.УчитываемыеДни  = 0;
				СтрокаДвижений.УчитываемыеЧасы = 0;
			КонецЕсли;
			
		// Компенсация отпуска и Удержание за неотработанный отпуск	
		ИначеЕсли ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпуска ИЛИ 
			ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения ИЛИ 
			ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпуска2018 ИЛИ 
			ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения2018 ИЛИ 
			ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпуск Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда
				Если ИсходныеДанные.СреднийЗаработок = Null 
					ИЛИ ИсходныеДанные.СуммированныйУчетРабочегоВремени = Null
					ИЛИ (ИсходныеДанные.СуммированныйУчетРабочегоВремени и (ИсходныеДанные.ОтработаноЧасов = 0 ИЛИ ИсходныеДанные.ОтработаноЧасов = Null))
					ИЛИ (Не ИсходныеДанные.СуммированныйУчетРабочегоВремени и (ИсходныеДанные.ОтработаноДней = 0 ИЛИ ИсходныеДанные.ОтработаноДней = Null)) Тогда
					РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка ");
					СтрокаДвижений.Результат = 0;
					Возврат;
				КонецЕсли;		
			КонецЕсли; 
			
			ОплачиваемоеВремя = 0;
			ОтработаноДней = ИсходныеДанные.ОтработаноДней;
			ОтработаноЧасов = ИсходныеДанные.Отработаночасов;
			КоэффициентИндексации = СтрокаДвижений.КоэффициентИндексации;
			ОплачиваемыйВидВремени = "";
			ВидСреднегоЗаработка = "";

			Если СтрокаДвижений.ДатаНачалаСобытия < ПолучитьДатуНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням() Тогда
				// до расчета по единым правилам, утвержденным Постановлением Правительства РК № 1394 от 29.12.2007
				ОплачиваемыйВидВремени = "дни";
				ВидСреднегоЗаработка = "Среднедневной";
				ОплачиваемоеВремя = СтрокаДвижений.Показатель1; // количество календарных дней
				
				// Определим количество фактически отработанных календарных дней 		
				Если ИсходныеДанные.СуммированныйУчетРабочегоВремени Тогда
					// Определим коэффициент фактического использования рабочего времени как отношение
					// фактически отработанных часов в расчетном периоде к норме рабочего времени
					КалендарныхДней = ?(ИсходныеДанные.КалендарныхДней = NULL, 0, ИсходныеДанные.КалендарныхДней);
					КоэффициентИспользованияРабочегоВремени = ?(ЗначениеЗаполнено(ИсходныеДанные.НормаЧасов), Окр(ИсходныеДанные.ОтработаноЧасов / ИсходныеДанные.НормаЧасов, 4), 0);
					КоэффициентИспользованияРабочегоВремени = Мин(КоэффициентИспользованияРабочегоВремени, 1);
					ОтработаноДней = Окр(КалендарныхДней * КоэффициентИспользованияРабочегоВремени, 2);
				КонецЕсли; 
				
				ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ОтработаноДней, 2);
				
			Иначе
				ОплачиваемоеВремя = СтрокаДвижений.Показатель2; // количество рабочих дней (часов)
				
				Если ИсходныеДанные.СуммированныйУчетРабочегоВремени Тогда
					// от часов
					ОплачиваемыйВидВремени = "часы";
					ВидСреднегоЗаработка = "Среднечасовой";
					
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ОтработаноЧасов, 2);
				Иначе
					// от дней
					ОплачиваемыйВидВремени = "дни";
					ВидСреднегоЗаработка = "Среднедневной";
					
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ОтработаноДней, 2);
				КонецЕсли;
			КонецЕсли;
			
			Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * КоэффициентИндексации;
			
			Если КомментироватьРасчет Тогда
				РаботаССообщениями.КомментарийРасчета("Оплачиваемые " + ОплачиваемыйВидВремени + ": " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Коэффициент индексации: " + КоэффициентИндексации, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета(ВидСреднегоЗаработка + " заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
			КонецЕсли;
			
		// ОплатаПоСреднемуОтпКалендарныеДни 
		ИначеЕсли СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтп ИЛИ 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда
				Если ИсходныеДанные.СреднийЗаработок = NULL 
					ИЛИ ((СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам) и (ИсходныеДанные.ОтработаноЧасов = 0 ИЛИ ИсходныеДанные.ОтработаноЧасов = Null))
					ИЛИ ((СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням) и (ИсходныеДанные.ОтработаноДней = 0 ИЛИ ИсходныеДанные.ОтработаноДней = Null)) Тогда
					РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка ");
					СтрокаДвижений.Результат = 0;
					Возврат;
				КонецЕсли;		
			КонецЕсли; 
			
			ДатаНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням = ПолучитьДатуНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням();
			ОплачиваемыйВидВремени = "";
			ВидСреднегоЗаработка = "";
			ОплачиваемоеВремя = 0;
			ОплачиваемыеДни = 0;
			ОплачиваемыеЧасы = 0;
			
			ПроцентОплаты = ?(СтрокаДвижений[ПоказательРазмер] = 0, 100, СтрокаДвижений[ПоказательРазмер]);
			
			Если СтрокаДвижений.ДатаНачалаСобытия < ДатаНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.ПроизводственныйКалендарьКалендарныеДниФактическийПериодДействия = Null, 0, ИсходныеДанные.ПроизводственныйКалендарьКалендарныеДниФактическийПериодДействия);
				ОплачиваемыйВидВремени = "календарные дни";
				ОплачиваемыйВидВремени = "Среднедневной";
				ОплачиваемыеДни = ОплачиваемоеВремя;
			Иначе
				
				Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
					РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
				КонецЕсли;
				
				ОплачиваемыеДни = ОплачиваемыеДни(Ложь, ИсходныеДанные);
				ОплачиваемыеЧасы = ОплачиваемыеЧасы(Ложь, ИсходныеДанные);
				
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням Тогда
					ОплачиваемоеВремя = ОплачиваемыеДни;
					ОплачиваемыйВидВремени = "рабочие дни";
					ВидСреднегоЗаработка = "Среднедневной";
				Иначе
					ОплачиваемоеВремя = Окр(ОплачиваемыеЧасы, 2);
					ОплачиваемыйВидВремени = "рабочие часы";
					ВидСреднегоЗаработка = "Среднечасовой";
				КонецЕсли;
			КонецЕсли;
			
			ОтработаноДней = ИсходныеДанные.ОтработаноДней;
			ОтработаноЧасов = ИсходныеДанные.ОтработаноЧасов;
			ОтработанноеВремя = 0;
			КоэффициентИндексации = СтрокаДвижений.КоэффициентИндексации;
			
			Если СтрокаДвижений.ДатаНачалаСобытия < ДатаНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням Тогда
				
				// расчет до инструкции № 1394 от 29.12.2007 - по календарным дням
				ОтработанноеВремя = ОтработаноДней;
			
				// Определим количество фактически отработанных календарных дней 
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					// Определим коэффициент фактического использования рабочего времени как отношение
					// фактически отработанных часов в расчетном периоде к норме рабочего времени
					КалендарныхДней = ?(ИсходныеДанные.КалендарныхДней = NULL, 0, ИсходныеДанные.КалендарныхДней);
					КоэффициентИспользованияРабочегоВремени = ?(ЗначениеЗаполнено(ИсходныеДанные.НормаЧасов), Окр(ИсходныеДанные.ОтработаноЧасов / ИсходныеДанные.НормаЧасов, 4), 0);
					КоэффициентИспользованияРабочегоВремени = Мин(КоэффициентИспользованияРабочегоВремени, 1);
					ОтработанноеВремя = Окр(КалендарныхДней * КоэффициентИспользованияРабочегоВремени, 2);
				КонецЕсли; 
				
			Иначе
			
				// расчет по инструкции № 1394 от 29.12.2007 - по рабочим дням (часам)
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням Тогда
					ОтработанноеВремя = ОтработаноДней;
				Иначе
					ОтработанноеВремя = ОтработаноЧасов;
				КонецЕсли;
			
			КонецЕсли;
				
			
			// Расчитаем заработок за день для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" 
			// записи начислений
			Если НЕ СтрокаДвижений.Сторно Тогда
				
				ЗаработокЗаЕдиницуВремени = ?(ОтработанноеВремя <> 0, Окр(ИсходныеДанные.СреднийЗаработок / ОтработанноеВремя, 2), 0);
				
				// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
				СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
				
			Иначе
				ЗаработокЗаЕдиницуВремени = Окр(СтрокаДвижений.ДополнительныеДанные, 2);
			КонецЕсли; 

			Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100 * КоэффициентИндексации;
			
			Если КомментироватьРасчет Тогда
				РаботаССообщениями.КомментарийРасчета("Процент оплаты: " + ПроцентОплаты, КомментарийВидаРасчета);			
				РаботаССообщениями.КомментарийРасчета("Оплачиваемые " + ОплачиваемыйВидВремени + ": " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Коэффициент индексации: " + КоэффициентИндексации, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета(ВидСреднегоЗаработка + " заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
			КонецЕсли;
			
			// фиксируем отработанное время
			Если (ИсходныеДанные.УчетОтработанногоВремени) Тогда
				СтрокаДвижений.КалендарныхДней	= ?(ИсходныеДанные.ПроизводственныйКалендарьКалендарныеДниФактическийПериодДействия = Null, 0, ИсходныеДанные.ПроизводственныйКалендарьКалендарныеДниФактическийПериодДействия) * ?(СтрокаДвижений.Сторно, -1, 1);
				СтрокаДвижений.УчитываемыеДни  	= ОплачиваемыеДни * ?(СтрокаДвижений.Сторно, -1, 1);
				СтрокаДвижений.УчитываемыеЧасы  = ОплачиваемыеЧасы * ?(СтрокаДвижений.Сторно, -1, 1);
			Иначе
				СтрокаДвижений.КалендарныхДней	= 0;
				СтрокаДвижений.УчитываемыеДни  	= 0;
				СтрокаДвижений.УчитываемыеЧасы  = 0;
			КонецЕсли;
			
			
		// СдельныйЗаработок
		//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
			
			Если ИсходныеДанные.РазмерСдельногоЗаработка = Null Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": нет данных о фактической выработке");
			Иначе	
				Результат = ИсходныеДанные.РазмерСдельногоЗаработка;
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Размер сдельного заработка: " + ИсходныеДанные.РазмерСдельногоЗаработка, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли; 

			// фиксируем отработанное время
			Если РегламентированныеНачисления Тогда
				Если (ИсходныеДанные.УчетОтработанногоВремени) Тогда
					СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
					СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				Иначе
					СтрокаДвижений.УчитываемыеДни  = 0;
					СтрокаДвижений.УчитываемыеЧасы = 0;
				КонецЕсли;
			КонецЕсли;

	    // начисление от стажа процентом
	    ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом Тогда
			
			Если ИсходныеДанные.РезультатБаза = NULL Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисления ");
			Иначе
				Результат = ИсходныеДанные.РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100;
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Базовые начисления составили всего: " + ИсходныеДанные.РезультатБаза, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Процент оплаты: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
			
		// ПроцентомПоЧасовойТарифнойСтавке
		//	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке Тогда
			
			Если ТипЗнч(СтрокаДвижений.Регистратор) = Тип("ДокументСсылка.НачислениеЗарплатыРаботникамОрганизаций") Тогда
				КоличествоЧасов = ОплачиваемоеВремя(ИсходныеДанные);
				ОшибкаВводаОтработанногоВремени = ИсходныеДанные.ОшибкаВводаОтработанногоВремени;
			Иначе
				Если СтрокаДвижений.ВидРасчета.ЗачетОтработанногоВремени Тогда
					КоличествоЧасов	= ?(СтрокаДвижений.ОтработаноЧасов < 0, СтрокаДвижений.ОтработаноЧасов * - 1, СтрокаДвижений.ОтработаноЧасов);
				ИначеЕсли СтрокаДвижений.ВидРасчета.УчетОтработанногоВремени Тогда
					КоличествоЧасов	= ?(СтрокаДвижений.УчитываемыеЧасы < 0, СтрокаДвижений.УчитываемыеЧасы * - 1, СтрокаДвижений.УчитываемыеЧасы);
				Иначе 
					КоличествоЧасов = 0;
				КонецЕсли;
				ОшибкаВводаОтработанногоВремени = Ложь;
			КонецЕсли;

			Если ОшибкаВводаОтработанногоВремени Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
			ИначеЕсли КоличествоЧасов = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
			Иначе
				Результат = СтрокаДвижений[ПоказательРазмер] * КоличествоЧасов;
				
				Если КомментироватьРасчет Тогда
					РаботаССообщениями.КомментарийРасчета("Тарифная ставка: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Оплачиваемое время: " + КоличествоЧасов, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Вид учета времени: " + СтрокаДвижений.ВидУчетаВремени, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
			
			// фиксируем отработанное время
			Если (НЕ ИсходныеДанные.ЗачетОтработанногоВремени) И (ИсходныеДанные.УчетОтработанногоВремени) Тогда
				СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
			Иначе
				СтрокаДвижений.УчитываемыеДни  = 0;
			    СтрокаДвижений.УчитываемыеЧасы = 0;
			КонецЕсли;
			
		// Произвольная формула
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
			
			ФормулаРасчета = ИсходныеДанные.ФормулаРасчета;
			
			Если ЗначениеЗаполнено(ФормулаРасчета) Тогда //Возможно, что формула пустая, тогда результат вводится руками
				
				Если ИсходныеДанные.РасчетИмеетБазовыеНачисления Тогда // расчетная база собирается отдельно от других показателей
					
					РасчетнаяБаза = ИсходныеДанные.РезультатБаза;
					
					Если РасчетнаяБаза = NULL Тогда
						РаботаССообщениями.КомментарийРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисления ");
						РасчетнаяБаза = 0;
					КонецЕсли;
					
					Если РегламентированныеУдержания Тогда
						
						Если ИсходныеДанные.ВычитатьИзБазыИПН И ИсходныеДанные.ИсчисленныйНалог <> NULL Тогда
							РасчетнаяБаза = РасчетнаяБаза - ИсходныеДанные.ИсчисленныйНалог;
							Если КомментироватьРасчет Тогда
								РаботаССообщениями.КомментарийРасчета("Исчислен ИПН за текущий период: " + ИсходныеДанные.ИсчисленныйНалог, КомментарийВидаРасчета); 
							КонецЕсли;
						КонецЕсли;
						
						Если ИсходныеДанные.ВычитатьИзБазыОПВ И ИсходныеДанные.ИсчисленныйВзнос <> NULL Тогда
							РасчетнаяБаза = РасчетнаяБаза - ИсходныеДанные.ИсчисленныйВзнос;
							Если КомментироватьРасчет Тогда
								РаботаССообщениями.КомментарийРасчета("Исчислены ОПВ за текущий период: " + ИсходныеДанные.ИсчисленныйВзнос, КомментарийВидаРасчета); 
							КонецЕсли;
						КонецЕсли;
						
						Если ИсходныеДанные.ВычитатьИзБазыВОСМС И ИсходныеДанные.ИсчисленныйВзносОСМС <> NULL Тогда
							РасчетнаяБаза = РасчетнаяБаза - ИсходныеДанные.ИсчисленныйВзносОСМС;
							Если КомментироватьРасчет Тогда
								РаботаССообщениями.КомментарийРасчета("Исчислены взносы ОСМС за текущий период: " + ИсходныеДанные.ИсчисленныйВзносОСМС, КомментарийВидаРасчета); 
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;

					Если КомментироватьРасчет Тогда
						КомментарийБазы = РаботаССообщениями.КомментарийРасчета("Базовые начисления составили всего: " + РасчетнаяБаза, КомментарийВидаРасчета,,,, Ложь);
					КонецЕсли;
					
				КонецЕсли;
				
				Если ИсходныеДанные.КоличествоПоказателей <> Null Тогда
					
					Показатели = Новый Массив;
					ПоказательВремяВДнях 	= Справочники.ПоказателиСхемМотивации.ВремяВДнях;
					ПоказательВремяВЧасах 	= Справочники.ПоказателиСхемМотивации.ВремяВЧасах;
					ПоказательНормаВремениВДнях = Справочники.ПоказателиСхемМотивации.НормаВремениВДнях;
					ПоказательНормаВремениВЧасах = Справочники.ПоказателиСхемМотивации.НормаВремениВЧасах;
					
					// Заменим значения предопределенных показателей времени 
					// и проверим, все ли показатели получены			
					Для НомерСтроки = 1 По ИсходныеДанные.КоличествоПоказателей Цикл
						
						ПоказательВремени = Ложь;
						
		                Если НЕ УправленческиеРасчеты Тогда
		                    ЗначениеПоказателя  = Null;
		                    ПоказательМотивации = ИсходныеДанные["ПоказательМотивации" + НомерСтроки]; 
							
							Если ПоказательМотивации = ПоказательВремяВДнях Тогда
								ПоказательВремени = Истина;
								ЗначениеПоказателя = ОплачиваемыеДни(Ложь, ИсходныеДанные);
								
								Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
									РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
								КонецЕсли;
								
							ИначеЕсли ПоказательМотивации = ПоказательВремяВЧасах Тогда
								ПоказательВремени = Истина;
								ЗначениеПоказателя = ОплачиваемыеЧасы(Ложь, ИсходныеДанные);
								
								Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
									РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
								КонецЕсли;

							ИначеЕсли ПоказательМотивации = ПоказательНормаВремениВДнях Тогда
								ПоказательВремени = Истина;
								ЗначениеПоказателя = НормаВремениЗаМесяц(ИсходныеДанные, Перечисления.ВидыУчетаВремени.ПоДням);
								
								Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
									РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
								КонецЕсли;
								
							ИначеЕсли ПоказательМотивации = ПоказательНормаВремениВЧасах Тогда
								ПоказательВремени = Истина;
								ЗначениеПоказателя = НормаВремениЗаМесяц(ИсходныеДанные, Перечисления.ВидыУчетаВремени.ПоЧасам);
								
								Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
									РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
								КонецЕсли;
								
							ИначеЕсли ЗначениеЗаполнено(ПоказательМотивации) Тогда
								ЗначениеПоказателя = ИсходныеДанные["Показатель" + НомерСтроки];
								
							КонецЕсли;
						Иначе
							ЗначениеПоказателя = ИсходныеДанные["Показатель" + НомерСтроки];
							
						КонецЕсли;
						
						Если ПоказательВремени Тогда
							Если ЗначениеПоказателя = Null Тогда
								РаботаССообщениями.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные["Показатель"+НомерСтроки+"Наименование"] + """");
								РезультатПолучен = Ложь;
							КонецЕсли;
						ИначеЕсли ИсходныеДанные["Показатель"+НомерСтроки] = Null Тогда
							РаботаССообщениями.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные["Показатель"+НомерСтроки+"Наименование"] + """");
							РезультатПолучен = Ложь;
						ИначеЕсли КомментироватьРасчет Тогда
							Если Не РегламентированныеНачисления Или Не ИсходныеДанные["Показатель" + НомерСтроки + "ЯвляетсяРасчетнойБазой"] Тогда
								РаботаССообщениями.КомментарийРасчета(ИсходныеДанные["Показатель"+НомерСтроки+"Наименование"]+ ": " + Строка(ЗначениеПоказателя), КомментарийВидаРасчета);
							КонецЕсли;
						КонецЕсли;

						Показатели.Вставить(НомерСтроки - 1, ЗначениеПоказателя);
						Если ПоказательВремени Тогда
							ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "ИсходныеДанные.Показатель" + НомерСтроки, "Показатели["+Строка(НомерСтроки-1) + "]");
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
				
				Если ИсходныеДанные.КоличествоПоказателей <> Null Тогда
					Для НомерСтроки = 1 По ИсходныеДанные.КоличествоПоказателей Цикл
					КонецЦикла;
				КонецЕсли;
				
				Если РезультатПолучен Тогда
					
					// вместо значения ПоказательN из результата запроса для расчетной базы 
					// будем использовать специально вычисленное значение
					Если ИсходныеДанные.РасчетИмеетБазовыеНачисления Тогда
						
						ТекстРасчетнаяБаза = Формат(РасчетнаяБаза,"ЧРД=.; ЧН=0; ЧГ=0");
						Для НомерСтроки = 1 По ИсходныеДанные.КоличествоПоказателей Цикл
							Если ИсходныеДанные["Показатель" + НомерСтроки + "ЯвляетсяРасчетнойБазой"] Тогда
								ФормулаРасчета = СтрЗаменить(ФормулаРасчета,"ИсходныеДанные.Показатель" + НомерСтроки, ТекстРасчетнаяБаза);
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
					Попытка
						Результат = Вычислить(ФормулаРасчета);
					Исключение					
						РаботаССообщениями.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " +" При расчете " + ИсходныеДанные.ВидРасчетаНаименование + ОписаниеОшибки());
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЕсли;

		// Не найден способ расчета
		Иначе
			РаботаССообщениями.ОшибкаРасчета(""+ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": вид расчета не предусмотрен");
		КонецЕсли;
		
		// фиксируем отработанное время
		Если ОсновныеНачисленияОрганизаций И СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
			Если (НЕ ИсходныеДанные.ЗачетОтработанногоВремени) И (ИсходныеДанные.УчетОтработанногоВремени) Тогда
				СтрокаДвижений.УчитываемыеДни  = ОплачиваемыеДни(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
				СтрокаДвижений.УчитываемыеЧасы = ОплачиваемыеЧасы(УправленческиеРасчеты, ИсходныеДанные) * ?(СтрокаДвижений.Сторно, -1, 1);
			Иначе
				СтрокаДвижений.УчитываемыеДни  = 0;
				СтрокаДвижений.УчитываемыеЧасы = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат <> 0 Тогда
			Если ОсновныеНачисленияОрганизаций Или ДополнительныеНачисленияОрганизаций Тогда
				Если ВидРасчета.ОтОбратного Тогда
					СтрокаДвижений.ДополнительныеДанные = Результат;
				КонецЕсли;
			КонецЕсли;
			Результат = ОбщегоНазначения.ОкруглитьЧисло(Результат, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		КонецЕсли;
		
		СтрокаДвижений.Результат = Результат * ?(СтрокаДвижений.Сторно,-1,1);
		Если КомментироватьРасчет Тогда
			Если СтрокаДвижений.Сторно Тогда
				РаботаССообщениями.КомментарийРасчета("Расчет сторно", КомментарийВидаРасчета, , , Перечисления.ВидыСообщений.ВажнаяИнформация);
			КонецЕсли;
			Если ОсновныеНачисленияОрганизаций Или ДополнительныеНачисленияОрганизаций Тогда
				Если ВидРасчета.ОтОбратного Тогда
					РаботаССообщениями.КомментарийРасчета("Сумма к выплате на руки: " + СтрокаДвижений.Результат, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Результат расчета: <НомерСтроки" + Строка(СтрокаДвижений.НомерСтроки) + ">" , КомментарийВидаРасчета);
				Иначе 
					РаботаССообщениями.КомментарийРасчета("Результат расчета: " + СтрокаДвижений.Результат, КомментарийВидаРасчета);
				КонецЕсли;
			Иначе
				РаботаССообщениями.КомментарийРасчета("Результат расчета: " + СтрокаДвижений.Результат, КомментарийВидаРасчета);
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры  // РассчитатьЗаписьРегистраРасчета

// Функция предназначена для получения структуры НеобходимыеДанные с элементами:
//			База
//			НормаВремени
//			ОтработаноВремени
// каждый из которых - булево и означает необходимость получения соотв. исходных данных для 
// расчета записей регистра расчета
// Параметр:
//	МассивСпособовРасчета - массив элементов типа СпособРасчетаСсылка или ПланВидовРасчетаСсылка
Функция ПолучитьСтруктуруНеобходимыхДанных(МассивСпособовРасчета, ТаблицаПоказателей, ИмяПВР = "ОсновныеНачисленияОрганизаций")
	
	НеобходимыеДанные = Новый Структура;
	НеобходимыеДанные.Вставить("База", Ложь);
	НеобходимыеДанные.Вставить("НормаВремени", Ложь);
	НеобходимыеДанные.Вставить("НормаВремениЗаМесяц", Ложь);
	НеобходимыеДанные.Вставить("ОтработаноВремени", Ложь);
	НеобходимыеДанные.Вставить("СдельныйЗаработок", Ложь);
	НеобходимыеДанные.Вставить("СреднийЗаработок", Ложь);
	НеобходимыеДанные.Вставить("ИсчисленныйИПН", Ложь);
	НеобходимыеДанные.Вставить("ИсчисленныйОПВ", Ложь);
	НеобходимыеДанные.Вставить("ИсчисленныеВОСМС", Ложь);
	НеобходимыеДанные.Вставить("ПределПоДокументуОснованию", Ложь);
	НеобходимыеДанные.Вставить("НакопленныеДанныеПоДокументуОснованию", Ложь);
	НеобходимыеДанные.Вставить("ПочтовыеПереводы", Ложь);
	НеобходимыеДанные.Вставить("РазмерОграниченияПособия", Ложь);
	НеобходимыеДанные.Вставить("РазмерРегламентированныхРасчетныхПоказателей", Ложь);
	НеобходимыеДанные.Вставить("НакопленныеДанныеПоВидуРасчета", Ложь);
	НеобходимыеДанные.Вставить("РасчетОтОбратного", Ложь);
	НеобходимыеДанные.Вставить("ОтОбратногоКомпенсироватьИПН", Ложь);
	НеобходимыеДанные.Вставить("ОтОбратногоКомпенсироватьОПВ", Ложь); 
	НеобходимыеДанные.Вставить("ОтОбратногоКомпенсироватьВОСМС", Ложь); 
	НеобходимыеДанные.Вставить("ОтОбратногоУчитыватьОПВ", Ложь); 
	НеобходимыеДанные.Вставить("ОтОбратногоУчитыватьВОСМС", Ложь); 
	НеобходимыеДанные.Вставить("ОтОбратногоКомпенсироватьУдержания", Ложь);
	НеобходимыеДанные.Вставить("ПоказателиСхемМотивации", Ложь);
	НеобходимыеДанные.Вставить("Стаж", Ложь);
	НеобходимыеДанные.Вставить("Стаж", Ложь);
    НеобходимыеДанные.Вставить("ИзменениеЕдиныхПравил2024", Ложь);
	
	// данный Если... необходимо пополнять при появлении новых способ расчета или
	// видов расчета, которые не укладываются ни в один из способов
	Для Каждого СпособРасчета Из МассивСпособовРасчета Цикл
		Если 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам ИЛИ 
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням ИЛИ 
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения ИЛИ
	            СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам ИЛИ 
	            СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням ИЛИ
			 	СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням Тогда
				
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.НормаВремениЗаМесяц = Истина;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке ИЛИ
				  СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифДневной ИЛИ
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке ИЛИ
				  СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовой ИЛИ
	              СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке ИЛИ
    	          СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке ИЛИ
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы ИЛИ
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения ИЛИ
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке Тогда
				  
			НеобходимыеДанные.ОтработаноВремени = Истина;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
			НеобходимыеДанные.База = Истина;
			// исчисленные ИПН и ОПВ берем всегда, присоединяться будут только к запросу по регистру расчета УдержанияРаботниковОрганизаций
			// и только для тех людей, у которых есть виды расчета с признаками ВычитатьИзБазыИПН и/или ВычитатьИзБазыОПВ
			НеобходимыеДанные.ИсчисленныйИПН = Истина;
			НеобходимыеДанные.ИсчисленныйОПВ = Истина;
			НеобходимыеДанные.ИсчисленныеВОСМС = Истина;
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.ИсчисленныйИПН = Истина;
			НеобходимыеДанные.ИсчисленныйОПВ = Истина;
			НеобходимыеДанные.ИсчисленныеВОСМС = Истина;
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.ИсчисленныйИПН = Истина;
			НеобходимыеДанные.ИсчисленныйОПВ = Истина;
			НеобходимыеДанные.ИсчисленныеВОСМС = Истина;
			НеобходимыеДанные.ПределПоДокументуОснованию = Истина;
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда
			НеобходимыеДанные.ПределПоДокументуОснованию = Истина;
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
		ИначеЕсли   СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднему ИЛИ 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных ИЛИ
			СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ ИЛИ 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку ИЛИ
			СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтп ИЛИ 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска ИЛИ
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения Тогда
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.СреднийЗаработок = Истина;
			Если СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтп ИЛИ 
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда 
				НеобходимыеДанные.НормаВремениЗаМесяц = Истина;
			КонецЕсли;
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных Тогда
				НеобходимыеДанные.РазмерОграниченияПособия = Истина;
			КонецЕсли;
            
            Если СпособРасчета <> ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтп И
                СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных Тогда
				НеобходимыеДанные.ИзменениеЕдиныхПравил2024 = Истина;
			КонецЕсли;
		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.СреднийЗаработок = Истина;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой ИЛИ
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммойДляПочасовогоОтклонения или 
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой Тогда
			// ничего...
		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой Тогда
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
			НеобходимыеДанные.СдельныйЗаработок = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням ИЛИ
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам ИЛИ
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю ИЛИ 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате ИЛИ 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням ИЛИ 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам Тогда
			НеобходимыеДанные.РазмерРегламентированныхРасчетныхПоказателей = Истина;
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням ИЛИ
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам ИЛИ 
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням ИЛИ 
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам Тогда
				НеобходимыеДанные.ОтработаноВремени = Истина;
				НеобходимыеДанные.НормаВремениЗаМесяц = Истина;
			КонецЕсли;
			
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням ИЛИ
				СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам Тогда
				НеобходимыеДанные.НакопленныеДанныеПоВидуРасчета = Истина;
			КонецЕсли;
		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
			НеобходимыеДанные.ПочтовыеПереводы = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма ИЛИ
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения Тогда
			// для возможного учета времени простоя, прогула и т.д.
			НеобходимыеДанные.ОтработаноВремени = Истина;
        ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом Тогда
			НеобходимыеДанные.База = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
			НеобходимыеДанные.ПоказателиСхемМотивации = Истина;
			Если ИмяПВР = "УдержанияОрганизаций" Тогда
				// исчисленные ИПН и ОПВ берем всегда, присоединяться будут только к запросу по регистру расчета УдержанияРаботниковОрганизаций
				// и только для тех людей, у которых есть виды расчета с признаками ВычитатьИзБазыИПН и/или ВычитатьИзБазыОПВ
				НеобходимыеДанные.ИсчисленныйИПН = Истина;
				НеобходимыеДанные.ИсчисленныйОПВ = Истина;
				НеобходимыеДанные.ИсчисленныеВОСМС = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	МассивСтажей = Новый Соответствие;

	Для Каждого СтрокаПоказателя Из ТаблицаПоказателей Цикл
		
		Показатель = СтрокаПоказателя.Показатель;
		
		НеобходимыеДанные.СдельныйЗаработок = НеобходимыеДанные.СдельныйЗаработок 
													ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.СдельнаяВыработка;
													
		НеобходимыеДанные.ОтработаноВремени = НеобходимыеДанные.ОтработаноВремени 
													ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.ВремяВДнях 
													ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.ВремяВЧасах;
													
		НеобходимыеДанные.НормаВремениЗаМесяц = НеобходимыеДанные.НормаВремениЗаМесяц 
													ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВДнях 
													ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВЧасах;
													
		НеобходимыеДанные.База = НеобходимыеДанные.База 
									ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза;

		НеобходимыеДанные.Стаж = НеобходимыеДанные.Стаж 
									ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.Стаж;
									
		Если ЗначениеЗаполнено(СтрокаПоказателя.ВидСтажа) Тогда
			 МассивСтажей.Вставить(СтрокаПоказателя.ВидСтажа, СтрокаПоказателя.ВидСтажаКод) 
		КонецЕсли;

	КонецЦикла;
	
	НеобходимыеДанные.Вставить("ПроизвольныеСтажи", МассивСтажей);

	Возврат НеобходимыеДанные;
КонецФункции

// Функция предназначена для получения оплачиваемого времени по результату запроса при расчете:
//
// Параметры:
//	ИсходныеДанные - строка выборки из результат запроса, по которой вернуть время
//
// Возвращаемое значение:
//	Число - размер оплачиваемого времени в днях/часах
//
Функция ОплачиваемоеВремя(ИсходныеДанные) Экспорт
	
	ОтработаноВремениОсновное = ?(ИсходныеДанные.ОтработаноВремениОсновное = NULL, 0, ИсходныеДанные.ОтработаноВремениОсновное);

	Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
		Возврат 0;
    ИначеЕсли ИсходныеДанные.ЕстьОтработаноДнейПоТабелю = 0 Тогда
    	Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням Тогда
        	Возврат ОтработаноВремениОсновное;
        Иначе
        	Возврат ОтработаноВремениОсновное - ?(ИсходныеДанные.ЕстьОтработаноЧасовПоТабелюОтклонение <> 0, ИсходныеДанные.ОтработаноЧасовПоТабелюОтклонение, 0);
        КонецЕсли;
    Иначе
        Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням Тогда
			Возврат ИсходныеДанные.ОтработаноДнейПоТабелю;
			//Если ИсходныеДанные.ОтработаноДнейПоТабелю = 0 Тогда
			//	Возврат ОтработаноВремениОсновное;
			//Иначе
			//	Возврат ИсходныеДанные.ОтработаноДнейПоТабелю;
			//КонецЕсли;
        Иначе
        	Возврат ИсходныеДанные.ОтработаноЧасовПоТабелю;
			//Если ИсходныеДанные.ОтработаноЧасовПоТабелю = 0 Тогда
			//	Возврат ОтработаноВремениОсновное - ИсходныеДанные.ОтработаноЧасовПоТабелюОтклонение;
			//Иначе
			//	Возврат ИсходныеДанные.ОтработаноЧасовПоТабелю;
			//КонецЕсли;
        КонецЕсли;
    КонецЕсли;
КонецФункции // ОплачиваемоеВремя()

// Функция предназначена для получения оплачиваемых часов по результату запроса при расчете:
//
// Параметры:
//	ИсходныеДанные - строка выборки из результат запроса, по которой вернуть часы
//
// Возвращаемое значение:
//	Число - размер оплачиваемого времени в часах
//
Функция ОплачиваемыеЧасы(УправленческиеНачисления, ИсходныеДанные) Экспорт

    Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням Тогда
        ОтработаноЧасовПоГрафику = ?(ИсходныеДанные.ОтработаноВремениДополнительное = NULL, 0, ИсходныеДанные.ОтработаноВремениДополнительное);    	
    Иначе
        Если ИсходныеДанные.ПериодДействияНачало >= '20240101' И 
			(ИсходныеДанные.СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтп ИЛИ 
			ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска) Тогда
            Если ИсходныеДанные.СуммированныйУчетРабочегоВремени Тогда
                КалендарныхДней	= ?(ИсходныеДанные.ПроизводственныйКалендарьКалендарныеДниФактическийПериодДействия = Null, 0, ИсходныеДанные.ПроизводственныйКалендарьКалендарныеДниФактическийПериодДействия);
                ОтработаноЧасовПоГрафику = ?(ИсходныеДанные.СреднемесячноеЧислоЧасов <> NULL, КалендарныхДней * Окр(ИсходныеДанные.СреднемесячноеЧислоЧасов, 2) / Окр(ИсходныеДанные.СреднееКоличествоКалендарныхДнейБезПраздничных, 2), 0);    	           
            Иначе
                ОтработаноЧасовПоГрафику = ?(ИсходныеДанные.ОтработаноВремениОсновное = NULL, 0, ИсходныеДанные.ОтработаноВремениОсновное);
            КонецЕсли;
        Иначе                                            
            ОтработаноЧасовПоГрафику = ?(ИсходныеДанные.ОтработаноВремениОсновное = NULL, 0, ИсходныеДанные.ОтработаноВремениОсновное);    	
        КонецЕсли; 
    КонецЕсли;
	
    Если УправленческиеНачисления Тогда
       	Возврат ОтработаноЧасовПоГрафику;    	
	ИначеЕсли ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
		Возврат 0;
    ИначеЕсли ИсходныеДанные.ЕстьОтработаноЧасовПоТабелю = 0 Тогда
    	Возврат ОтработаноЧасовПоГрафику - ?(ИсходныеДанные.ЕстьОтработаноЧасовПоТабелюОтклонение <> 0, ИсходныеДанные.ОтработаноЧасовПоТабелюОтклонение, 0);
    Иначе
		//Если ИсходныеДанные.ОтработаноЧасовПоТабелю = 0 Тогда
		//	Возврат ОтработаноЧасовПоГрафику - ИсходныеДанные.ОтработаноЧасовПоТабелюОтклонение;
		//Иначе
			Возврат ИсходныеДанные.ОтработаноЧасовПоТабелю;
		//КонецЕсли;
    КонецЕсли;
КонецФункции // ОплачиваемыеЧасы()

// Функция предназначена для получения оплачиваемых дней по результату запроса при расчете:
//
// Параметры:
//	ИсходныеДанные - строка выборки из результат запроса, по которой вернуть дни
//
// Возвращаемое значение:
//	Число - размер оплачиваемого времени в днях
//
Функция ОплачиваемыеДни(УправленческиеНачисления, ИсходныеДанные) Экспорт

	Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням Тогда
		ОтработаноДнейПоГрафику = ?(ИсходныеДанные.ОтработаноВремениОсновное = NULL, 0, ИсходныеДанные.ОтработаноВремениОсновное);    	
	Иначе
		ОтработаноДнейПоГрафику = ?(ИсходныеДанные.ОтработаноВремениДополнительное = NULL, 0, ИсходныеДанные.ОтработаноВремениДополнительное);    	
	КонецЕсли;
	
    Если УправленческиеНачисления Или ИсходныеДанные.ЕстьОтработаноДнейПоТабелю = 0 Тогда
       	Возврат ОтработаноДнейПоГрафику;    	
	ИначеЕсли ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
		Возврат 0;
    Иначе
		//Если ИсходныеДанные.ОтработаноДнейПоТабелю = 0 Тогда
		//	Возврат ОтработаноДнейПоГрафику;
		//Иначе
			Возврат ИсходныеДанные.ОтработаноДнейПоТабелю;
		//КонецЕсли;
    КонецЕсли;
КонецФункции // ОплачиваемыеДни()

// Функция предназначена для получения нормы оплачиваемых часов по результату запроса при расчете:
//
// Параметры:
//	ИсходныеДанные - строка выборки из результата запроса, по которой вернуть часы
//
// Возвращаемое значение:
//	Число - размер оплачиваемого времени в часах
//
Функция НормаОплачиваемыхЧасов(ИсходныеДанные) Экспорт

	Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням Тогда
		НормаЧасовПоГрафику = ?(ИсходныеДанные.ДополнительноеЗначениеНормаФактическийПериодДействия = NULL, 0, ИсходныеДанные.ДополнительноеЗначениеНормаФактическийПериодДействия);    	
	Иначе
		НормаЧасовПоГрафику = ?(ИсходныеДанные.ОсновноеЗначениеНормаФактическийПериодДействия = NULL, 0, ИсходныеДанные.ОсновноеЗначениеНормаФактическийПериодДействия);    	
	КонецЕсли;
	
    Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
		Возврат 0;
	ИначеЕсли ИсходныеДанные.НормаЧасовПоТабелюПоСтрокеРасчета = NULL Тогда
       	Возврат НормаЧасовПоГрафику;    	
    Иначе
		Если ИсходныеДанные.НормаЧасовПоТабелюПоСтрокеРасчета = 0 Тогда
			Возврат НормаЧасовПоГрафику - ИсходныеДанные.НормаЧасовПоТабелюПоСтрокеРасчетаОтклонение;
		Иначе
			Возврат ИсходныеДанные.НормаЧасовПоТабелюПоСтрокеРасчета;
		КонецЕсли;
    КонецЕсли;
КонецФункции // НормаОплачиваемыхЧасов()

// Функция предназначена для получения нормы оплачиваемых дней по результату запроса при расчете:
//
// Параметры:
//	ИсходныеДанные - строка выборки из результат запроса, по которой вернуть дни
//
// Возвращаемое значение:
//	Число - размер оплачиваемого времени в днях
//
Функция НормаОплачиваемыхДней(ИсходныеДанные) Экспорт

	Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням Тогда
		НормаДнейПоГрафику = ?(ИсходныеДанные.ОсновноеЗначениеНормаФактическийПериодДействия = NULL, 0, ИсходныеДанные.ОсновноеЗначениеНормаФактическийПериодДействия);    	
	Иначе
		НормаДнейПоГрафику = ?(ИсходныеДанные.ДополнительноеЗначениеНормаФактическийПериодДействия = NULL, 0, ИсходныеДанные.ДополнительноеЗначениеНормаФактическийПериодДействия);    	
	КонецЕсли;
	     	
	Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
		Возврат 0;
	ИначеЕсли ИсходныеДанные.НормаДнейПоТабелюПоСтрокеРасчета = NULL Тогда
       	Возврат НормаДнейПоГрафику;    	
    Иначе
		Если ИсходныеДанные.НормаДнейПоТабелюПоСтрокеРасчета = 0 Тогда
			Возврат НормаДнейПоГрафику;
		Иначе
			Возврат ИсходныеДанные.НормаДнейПоТабелюПоСтрокеРасчета;
		КонецЕсли;
    КонецЕсли;
КонецФункции // НормаОплачиваемыхДней()

// Функция предназначена для получения нормы дней по результату запроса при расчете:
//
// Параметры:
//	ИсходныеДанные - строка выборки из результата запроса, по которой вернуть дни
//
// Возвращаемое значение:
//	Число - размер нормы времени в днях
//
Функция НормаВремениЗаМесяц(ИсходныеДанные, ВидУчетаВремени) Экспорт

	Если ИсходныеДанные.ВидУчетаВремени = ВидУчетаВремени Тогда
		НормаВремениПоГрафику = ?(ИсходныеДанные.ОсновноеЗначениеНормаПериодДействия = NULL, 0, ИсходныеДанные.ОсновноеЗначениеНормаПериодДействия);
	Иначе
		НормаВремениПоГрафику = ?(ИсходныеДанные.ДополнительноеЗначениеНормаПериодДействия = NULL, 0, ИсходныеДанные.ДополнительноеЗначениеНормаПериодДействия);
	КонецЕсли;

	Если ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням Тогда
		НормаВремениПоТабелю = ИсходныеДанные.НормаДнейПоТабелюЗаМесяц;
		ВремяПочасовыхОтклонений = 0;
	Иначе
		НормаВремениПоТабелю = ИсходныеДанные.НормаЧасовПоТабелюЗаМесяц;
		ВремяПочасовыхОтклонений = ИсходныеДанные.ЧасовПоТабелюЗаМесяцОтклонение;
	КонецЕсли;
	
	Если НормаВремениПоТабелю = NULL Тогда
		Возврат НормаВремениПоГрафику;    	
	ИначеЕсли ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
		Возврат 0;
	Иначе
		Если НормаВремениПоТабелю = ВремяПочасовыхОтклонений Тогда
			Возврат НормаВремениПоГрафику;
		Иначе
			Возврат НормаВремениПоТабелю;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // НормаВремениЗаМесяц()

// Создает строку в движениях  РасчетСреднегоЗаработка, заполняет по данным выборки 
// из запроса и возвращает ее
// Используется в СформироватьИЗаписатьДанныеРасчетаСреднего
// Параметры:
// 	Выборка - спозиционированная выборка результата запроса
//  НаборЗаписей - набор записей РасчетСреднегоЗаработка
//  Регистратор - документ
//  ВидРасчета - вид расчета среднего заработка
//
// Возвращаемое значение:
// Запись регистра расчета РасчетСреднегоЗаработка
//
Функция СоздатьСтрокуРасчетаСреднего(Выборка, НаборЗаписей, Регистратор, ВидРасчета)
	
	Строка = НаборЗаписей.Добавить();
    // предопределенные поля
	Строка.ПериодРегистрации = Регистратор.ПериодРегистрации;
	Строка.ВидРасчета = ВидРасчета;

	// измерения
	Строка.Физлицо 	   = Выборка.Физлицо;
	Строка.Организация = Выборка.Организация;
	Строка.Сотрудник   = Выборка.Сотрудник;

    // реквизиты
	Строка.СпособРасчета = Выборка.СпособРасчета;
	Строка.ДатаНачалаРасчетногоПериода = Выборка.НачалоБП;
	Строка.ДатаОкончанияРасчетногоПериода = Выборка.КонецБП;
	Строка.ПериодРасчетаСреднегоЗаработка = Выборка.ПериодРасчетаСреднегоЗаработка;
	
	Возврат Строка;
	
КонецФункции // СоздатьСтрокуРасчетаСреднего

// Выполняет формирование результата запроса по базовым данным для расчета ресурсов 
// среднего заработка
// Параметры:
//   Регистратор - регистратор набора записей регистра ОсновныеНачисленияРаботниковОрганизации 
//                 или ДополнительныеНачисленияРаботниковОрганизаций
// Возвращаемое значение: 
//   Результат запроса
//
Функция БазовыеДанныеДляРасчетаСреднегоПосле_08_2015(Регистратор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Дополнительные.Результат КАК Результат,
		|	ВЫБОР
		|		КОГДА Дополнительные.ВидРасчета.ВидПремии = ЗНАЧЕНИЕ(Перечисление.ВидыПремии.ГодоваяПремия)
		|			ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(Дополнительные.ПериодРегистрации, МЕСЯЦ, -11), МЕСЯЦ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(Дополнительные.БазовыйПериодНачало, МЕСЯЦ)
		|	КОНЕЦ КАК ДатаНачалоПериодаПремии,
		|	ВЫБОР
		|		КОГДА Дополнительные.ВидРасчета.ВидПремии = ЗНАЧЕНИЕ(Перечисление.ВидыПремии.ГодоваяПремия)
		|			ТОГДА КОНЕЦПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ)
		|		ИНАЧЕ КОНЕЦПЕРИОДА(Дополнительные.БазовыйПериодКонец, МЕСЯЦ)
		|	КОНЕЦ КАК ДатаОкончанияПериодаПремии,
		|	Дополнительные.ЧислоМесяцев КАК ЧислоМесяцев,
		|	РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка КАК ПериодРасчетаСреднегоЗаработка,
		|	РасчетСреднегоЗаработка.НомерСтроки КАК НомерСтроки,
		|	Дополнительные.Регистратор КАК РегистраторДопГруппировка,
		|	Дополнительные.НомерСтроки КАК НомерСтрокиДопГруппировка,
		|	СУММА(ЕСТЬNULL(ОтработанноеВремяПремии.ОтработаноДнейПоПятидневке, 0)) КАК ОтработаноДнейПоПятидневке,
		|	НормаПоПроизвКалендарю.Пятидневка КАК ДнейПоПятидневке,
		|	НормаПоПроизвКалендарю.ДатаКалендаря КАК ДатаКалендаря,
		// премии 1/3, 1/6, 1/12 учитываем не уменьшая при приеме отработанное время
		|	НЕ Дополнительные.ВидРасчета.ВидПремии = ЗНАЧЕНИЕ(Перечисление.ВидыПремии.НеПремия) И Дополнительные.ВидРасчета.ЧислоМесяцев > 1 КАК ЭтоДробнаяПремия,
		|	Дополнительные.ВидРасчета
		|ПОМЕСТИТЬ ВТ_ПремииГруппировкаПоОтработанномуВремени
		|ИЗ
		|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК СреднийЗаработокБазовыеВидыРасчета
		|		ПО РасчетСреднегоЗаработка.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Дополнительные
		|		ПО (Дополнительные.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.ВидРасчета)
		|			И (Дополнительные.Сотрудник = РасчетСреднегоЗаработка.Сотрудник)
		|			И (Дополнительные.Организация = РасчетСреднегоЗаработка.Организация)
		|			И (Дополнительные.ПериодРегистрации МЕЖДУ РасчетСреднегоЗаработка.БазовыйПериодНачало И РасчетСреднегоЗаработка.БазовыйПериодКонец)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК НормаПоПроизвКалендарю
		|		ПО (ВЫБОР
		|				КОГДА Дополнительные.ВидРасчета.ВидПремии = ЗНАЧЕНИЕ(Перечисление.ВидыПремии.ГодоваяПремия)
		|					ТОГДА НормаПоПроизвКалендарю.ДатаКалендаря МЕЖДУ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(Дополнительные.ПериодРегистрации, МЕСЯЦ, -11), МЕСЯЦ)
		|						И КОНЕЦПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ)
		|				ИНАЧЕ НормаПоПроизвКалендарю.ДатаКалендаря МЕЖДУ Дополнительные.БазовыйПериодНачало И Дополнительные.БазовыйПериодКонец
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОтработанноеВремяПремии
		|		ПО (Дополнительные.Сотрудник = ОтработанноеВремяПремии.Сотрудник)
		|			И (Дополнительные.Организация = ОтработанноеВремяПремии.Организация)
		|			И (ВЫБОР
		|				КОГДА Дополнительные.ВидРасчета.ВидПремии = ЗНАЧЕНИЕ(Перечисление.ВидыПремии.ГодоваяПремия)
		|					ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(Дополнительные.ПериодРегистрации, МЕСЯЦ, -11), МЕСЯЦ) <= ОтработанноеВремяПремии.ПериодДействияКонец
		|				ИНАЧЕ Дополнительные.БазовыйПериодНачало <= ОтработанноеВремяПремии.ПериодДействияКонец
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА Дополнительные.ВидРасчета.ВидПремии = ЗНАЧЕНИЕ(Перечисление.ВидыПремии.ГодоваяПремия)
		|					ТОГДА КОНЕЦПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ) >= ОтработанноеВремяПремии.ПериодДействияНачало
		|				ИНАЧЕ Дополнительные.БазовыйПериодКонец >= ОтработанноеВремяПремии.ПериодДействияНачало
		|			КОНЕЦ)
		|			И (ОтработанноеВремяПремии.ОтработаноДнейПоПятидневке <> 0)
		|			И (ОтработанноеВремяПремии.ПериодДействия = НормаПоПроизвКалендарю.ДатаКалендаря)
		|ГДЕ
		|	РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
		|	И РасчетСреднегоЗаработка.ВидРасчета В(&парамПоПремии)
		|
		|СГРУППИРОВАТЬ ПО
		|	НормаПоПроизвКалендарю.ДатаКалендаря,
		|	РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
		|	РасчетСреднегоЗаработка.НомерСтроки,
		|	Дополнительные.Регистратор,
		|	Дополнительные.НомерСтроки,
		|	Дополнительные.Результат,
		|	НормаПоПроизвКалендарю.Пятидневка,
		|	ВЫБОР
		|		КОГДА Дополнительные.ВидРасчета.ВидПремии = ЗНАЧЕНИЕ(Перечисление.ВидыПремии.ГодоваяПремия)
		|			ТОГДА КОНЕЦПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ)
		|		ИНАЧЕ КОНЕЦПЕРИОДА(Дополнительные.БазовыйПериодКонец, МЕСЯЦ)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Дополнительные.ВидРасчета.ВидПремии = ЗНАЧЕНИЕ(Перечисление.ВидыПремии.ГодоваяПремия)
		|			ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(Дополнительные.ПериодРегистрации, МЕСЯЦ, -11), МЕСЯЦ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(Дополнительные.БазовыйПериодНачало, МЕСЯЦ)
		|	КОНЕЦ,
		|	Дополнительные.ЧислоМесяцев,
		|	Дополнительные.ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтработанныйПериод.НомерСтроки КАК НомерСтроки,
		|	ОтработанныйПериод.НомерСтрокиДопГруппировка КАК НомерСтрокиДопГруппировка,
		|	ОтработанныйПериод.РегистраторДопГруппировка КАК РегистраторДопГруппировка,
		|	ОтработанныйПериод.ВидРасчета КАК ВидРасчета,
		|	ОтработанныйПериод.ДатаНачалоПериодаПремии КАК ДатаНачалоПериодаПремии,
		|	ОтработанныйПериод.ДатаОкончанияПериодаПремии КАК ДатаОкончанияПериодаПремии,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(ОтработанныйПериод.ДатаКалендаря, МЕСЯЦ)) КАК ЧислоМесяцевПоОтработанномуПериоду
		|ПОМЕСТИТЬ ВТ_ОтработанныйПериод
		|ИЗ
		|	ВТ_ПремииГруппировкаПоОтработанномуВремени КАК ОтработанныйПериод
		|ГДЕ
		|	ОтработанныйПериод.ОтработаноДнейПоПятидневке > 0
		|	ИЛИ ОтработанныйПериод.ЭтоДробнаяПремия
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтработанныйПериод.НомерСтроки,
		|	ОтработанныйПериод.НомерСтрокиДопГруппировка,
		|	ОтработанныйПериод.РегистраторДопГруппировка,
		|	ОтработанныйПериод.ВидРасчета,
		|	ОтработанныйПериод.ДатаНачалоПериодаПремии,
		|	ОтработанныйПериод.ДатаОкончанияПериодаПремии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БазаОсновныеНачисления.РезультатБаза КАК РезультатБаза,
		|	&ПустаяДата КАК ДатаНачалаПериодаПремии,
		|	&ПустаяДата КАК ДатаОкончанияПериодаПремии,
		|	1 КАК ЧислоМесяцев,
		|	БазаОсновныеНачисления.ПериодРасчетаСреднегоЗаработка КАК ПериодРасчетаСреднегоЗаработка,
		|	БазаОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|	0 КАК ОтработаноПоПятидневке,
		|	0 КАК НормаПоПятидневке,
		|	&ПустаяДата КАК ПериодПремии,
		|	0 КАК ЧислоМесяцевПоОтработанномуПериоду,
		|	0 КАК НомерСтрокиДопГруппировка,
		|	0 КАК РегистраторДопГруппировка
		|ПОМЕСТИТЬ ВТ_База
		|ИЗ
		|	РегистрРасчета.РасчетСреднегоЗаработка.БазаОсновныеНачисленияРаботниковОрганизаций(
		|			&парамИзмерения,
		|			&парамИзмерения,
		|			&парамРазрезы,
		|			Регистратор = &парамРегистратор
		|				И НЕ ВидРасчета В (&парамПоПремии)) КАК БазаОсновныеНачисления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БазаДополнительныеНачисления.РезультатБаза,
		|	&ПустаяДата,
		|	&ПустаяДата,
		|	ВЫБОР
		|		КОГДА БазаДополнительныеНачисления.ЧислоМесяцевРазрез = 0
		|			ТОГДА 1
		|		ИНАЧЕ БазаДополнительныеНачисления.ЧислоМесяцевРазрез
		|	КОНЕЦ,
		|	БазаДополнительныеНачисления.ПериодРасчетаСреднегоЗаработка,
		|	БазаДополнительныеНачисления.НомерСтроки,
		|	0,
		|	0,
		|	&ПустаяДата,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	РегистрРасчета.РасчетСреднегоЗаработка.БазаДополнительныеНачисленияРаботниковОрганизаций(
		|			&парамИзмерения,
		|			&парамИзмерения,
		|			&парамРазрезыДоп,
		|			Регистратор = &парамРегистратор
		|				И НЕ ВидРасчета В (&парамПоПремии)) КАК БазаДополнительныеНачисления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПремииГруппировкаПоОтработанномуВремени.Результат,
		|	ПремииГруппировкаПоОтработанномуВремени.ДатаНачалоПериодаПремии,
		|	ПремииГруппировкаПоОтработанномуВремени.ДатаОкончанияПериодаПремии,
		|	ПремииГруппировкаПоОтработанномуВремени.ЧислоМесяцев,
		|	ПремииГруппировкаПоОтработанномуВремени.ПериодРасчетаСреднегоЗаработка,
		|	ПремииГруппировкаПоОтработанномуВремени.НомерСтроки,
		|	СУММА(ПремииГруппировкаПоОтработанномуВремени.ОтработаноДнейПоПятидневке),
		|	СУММА(ПремииГруппировкаПоОтработанномуВремени.ДнейПоПятидневке),
		|	НАЧАЛОПЕРИОДА(ПремииГруппировкаПоОтработанномуВремени.ДатаКалендаря, МЕСЯЦ),
		|	ЕСТЬNULL(ОтработанныйПериод.ЧислоМесяцевПоОтработанномуПериоду, 0),
		|	ПремииГруппировкаПоОтработанномуВремени.НомерСтрокиДопГруппировка КАК НомерСтрокиДопГруппировка,
		|	ПремииГруппировкаПоОтработанномуВремени.РегистраторДопГруппировка КАК РегистраторДопГруппировка
		|ИЗ
		|	ВТ_ПремииГруппировкаПоОтработанномуВремени КАК ПремииГруппировкаПоОтработанномуВремени
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтработанныйПериод КАК ОтработанныйПериод
		|		ПО ПремииГруппировкаПоОтработанномуВремени.НомерСтроки = ОтработанныйПериод.НомерСтроки
		|			И ПремииГруппировкаПоОтработанномуВремени.ВидРасчета = ОтработанныйПериод.ВидРасчета
		|			И ПремииГруппировкаПоОтработанномуВремени.ДатаНачалоПериодаПремии = ОтработанныйПериод.ДатаНачалоПериодаПремии
		|			И ПремииГруппировкаПоОтработанномуВремени.ДатаОкончанияПериодаПремии = ОтработанныйПериод.ДатаОкончанияПериодаПремии
		|			И ПремииГруппировкаПоОтработанномуВремени.НомерСтрокиДопГруппировка = ОтработанныйПериод.НомерСтрокиДопГруппировка
		|			И ПремииГруппировкаПоОтработанномуВремени.РегистраторДопГруппировка = ОтработанныйПериод.РегистраторДопГруппировка
        |
		|СГРУППИРОВАТЬ ПО
		|	ПремииГруппировкаПоОтработанномуВремени.Результат,
		|	ПремииГруппировкаПоОтработанномуВремени.ДатаНачалоПериодаПремии,
		|	ПремииГруппировкаПоОтработанномуВремени.ДатаОкончанияПериодаПремии,
		|	ПремииГруппировкаПоОтработанномуВремени.ЧислоМесяцев,
		|	ПремииГруппировкаПоОтработанномуВремени.ПериодРасчетаСреднегоЗаработка,
		|	ПремииГруппировкаПоОтработанномуВремени.НомерСтроки,
		|	НАЧАЛОПЕРИОДА(ПремииГруппировкаПоОтработанномуВремени.ДатаКалендаря, МЕСЯЦ),
		|	ОтработанныйПериод.ЧислоМесяцевПоОтработанномуПериоду,
		|	ПремииГруппировкаПоОтработанномуВремени.НомерСтрокиДопГруппировка,
		|	ПремииГруппировкаПоОтработанномуВремени.РегистраторДопГруппировка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки,
		|	ПериодПремии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(База.РезультатБаза) КАК РезультатБаза,
		|	СУММА(База.ОтработаноПоПятидневке) КАК ОтработаноДнейПоПятидневке,
		|	СУММА(База.НормаПоПятидневке) КАК НормаДнейПоПятидневкеПроизвКалендарь,
		|	ВЫБОР
		|		КОГДА База.ПериодПремии <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НАЧАЛОПЕРИОДА(База.ПериодПремии, МЕСЯЦ)
		|		ИНАЧЕ База.ДатаНачалаПериодаПремии
		|	КОНЕЦ КАК ДатаНачалаПериодаПремии,
		|	ВЫБОР
		|		КОГДА База.ПериодПремии <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА КОНЕЦПЕРИОДА(База.ПериодПремии, МЕСЯЦ)
		|		ИНАЧЕ База.ДатаОкончанияПериодаПремии
		|	КОНЕЦ КАК ДатаОкончанияПериодаПремии,
		|	База.ЧислоМесяцев,
		|	База.ЧислоМесяцевПоОтработанномуПериоду КАК ПериодПремииВМесяцах,
		|	База.ПериодРасчетаСреднегоЗаработка,
		|	База.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТ_База КАК База
        |
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА База.ПериодПремии <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НАЧАЛОПЕРИОДА(База.ПериодПремии, МЕСЯЦ)
		|		ИНАЧЕ База.ДатаНачалаПериодаПремии
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА База.ПериодПремии <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА КОНЕЦПЕРИОДА(База.ПериодПремии, МЕСЯЦ)
		|		ИНАЧЕ База.ДатаОкончанияПериодаПремии
		|	КОНЕЦ,
		|	База.ЧислоМесяцев,
		|	База.ЧислоМесяцевПоОтработанномуПериоду,
		|	База.ПериодРасчетаСреднегоЗаработка,
		|	База.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	База.НомерСтроки,
		|	ВЫБОР
		|		КОГДА База.ПериодПремии <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НАЧАЛОПЕРИОДА(База.ПериодПремии, МЕСЯЦ)
		|		ИНАЧЕ База.ДатаНачалаПериодаПремии
		|	КОНЕЦ";

	Измерения = Новый Массив(1);
	Измерения[0] = "Сотрудник";

	Разрезы = Новый Массив(1);
	Разрезы[0] = "ПериодРегистрации";
	
	РазрезыДоп = Новый Массив(2);
	РазрезыДоп[0] = "ПериодРегистрации";
	РазрезыДоп[1] = "ЧислоМесяцев";
	
	Запрос.УстановитьПараметр("парамИзмерения",  Измерения);
	Запрос.УстановитьПараметр("парамРазрезы", 	 Разрезы);
	Запрос.УстановитьПараметр("парамРазрезыДоп", РазрезыДоп);
	
	ПоПремии = Новый Массив;
	ПоПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
	ПоПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБезИндексации);
	ПоПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
	ПоПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБезИндексации);
	
	Запрос.УстановитьПараметр("парамПоПремии", 	   ПоПремии);
	Запрос.УстановитьПараметр("ПустаяДата", 	   '00010101');
	Запрос.УстановитьПараметр("парамРегистратор", 	Регистратор);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

// Выполняет формирование результата запроса по базовым данным для расчета ресурсов 
// среднего заработка
// Параметры: 
//   Регистратор - регистратор набора записей регистра ОсновныеНачисленияРаботниковОрганизации 
//                 или ДополнительныеНачисленияРаботниковОрганизаций
// Возвращаемое значение: 
//   Результат запроса
//
Функция БазовыеДанныеДляРасчетаСреднегоДо_08_2015(Регистратор)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Дополнительные.Результат КАК Результат,
		|	НАЧАЛОПЕРИОДА(Дополнительные.БазовыйПериодНачало, МЕСЯЦ) КАК ДатаНачалоПериодаПремии,
		|	КОНЕЦПЕРИОДА(Дополнительные.БазовыйПериодКонец, МЕСЯЦ) КАК ДатаОкончанияПериодаПремии,
		|	Дополнительные.ЧислоМесяцев КАК ЧислоМесяцев,
		|	РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка КАК ПериодРасчетаСреднегоЗаработка,
		|	РасчетСреднегоЗаработка.НомерСтроки КАК НомерСтроки,
		|	СУММА(ЕСТЬNULL(ОтработанноеВремяПремии.ОтработаноДнейПоПятидневке, 0)) КАК ОтработаноДнейПоПятидневке,
		|	НормаПоПроизвКалендарю.Пятидневка КАК ДнейПоПятидневке,
		|	НормаПоПроизвКалендарю.ДатаКалендаря КАК ДатаКалендаря,
		|	РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода,
		|	РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода
		|ПОМЕСТИТЬ ВТ_ПремииГруппировкаПоОтработанномуВремени
		|ИЗ
		|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК СреднийЗаработокБазовыеВидыРасчета
		|		ПО РасчетСреднегоЗаработка.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Дополнительные
		|		ПО (Дополнительные.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.ВидРасчета)
		|			И (Дополнительные.Сотрудник = РасчетСреднегоЗаработка.Сотрудник)
		|			И (Дополнительные.Организация = РасчетСреднегоЗаработка.Организация)
		|			И (Дополнительные.ПериодРегистрации МЕЖДУ РасчетСреднегоЗаработка.БазовыйПериодНачало И РасчетСреднегоЗаработка.БазовыйПериодКонец)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК НормаПоПроизвКалендарю
		|		ПО (НормаПоПроизвКалендарю.ДатаКалендаря МЕЖДУ Дополнительные.БазовыйПериодНачало И Дополнительные.БазовыйПериодКонец)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОтработанноеВремяПремии
		|		ПО (Дополнительные.Сотрудник = ОтработанноеВремяПремии.Сотрудник)
		|			И (Дополнительные.Организация = ОтработанноеВремяПремии.Организация)
		|			И (Дополнительные.БазовыйПериодНачало <= ОтработанноеВремяПремии.ПериодДействияКонец)
		|			И (Дополнительные.БазовыйПериодКонец >= ОтработанноеВремяПремии.ПериодДействияНачало)
		|			И (ОтработанноеВремяПремии.ОтработаноДнейПоПятидневке <> 0)
		|			И (ОтработанноеВремяПремии.ПериодДействия = НормаПоПроизвКалендарю.ДатаКалендаря)
		|ГДЕ
		|	РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
		|	И РасчетСреднегоЗаработка.ВидРасчета В(&парамПоПремии)
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(Дополнительные.БазовыйПериодНачало, МЕСЯЦ),
		|	НормаПоПроизвКалендарю.ДатаКалендаря,
		|	КОНЕЦПЕРИОДА(Дополнительные.БазовыйПериодКонец, МЕСЯЦ),
		|	Дополнительные.ЧислоМесяцев,
		|	РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
		|	РасчетСреднегоЗаработка.НомерСтроки,
		|	Дополнительные.Результат,
		|	НормаПоПроизвКалендарю.Пятидневка,
		|	РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода,
		|	РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БазаОсновныеНачисления.РезультатБаза КАК РезультатБаза,
		|	&ПустаяДата КАК ДатаНачалаПериодаПремии,
		|	&ПустаяДата КАК ДатаОкончанияПериодаПремии,
		|	&ПустаяДата КАК ДатаНачалаРасчетногоПериода,
		|	&ПустаяДата КАК ДатаОкончанияРасчетногоПериода,
		|	1 КАК ЧислоМесяцев,
		|	БазаОсновныеНачисления.ПериодРасчетаСреднегоЗаработка КАК ПериодРасчетаСреднегоЗаработка,
		|	БазаОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|	0 КАК ОтработаноПоПятидневке,
		|	0 КАК НормаПоПятидневке
		|ПОМЕСТИТЬ ВТ_База
		|ИЗ
		|	РегистрРасчета.РасчетСреднегоЗаработка.БазаОсновныеНачисленияРаботниковОрганизаций(
		|			&парамИзмерения,
		|			&парамИзмерения,
		|			&парамРазрезы,
		|			Регистратор = &парамРегистратор
		|				И НЕ ВидРасчета В (&парамПоПремии)) КАК БазаОсновныеНачисления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БазаДополнительныеНачисления.РезультатБаза,
		|	&ПустаяДата,
		|	&ПустаяДата,
		|	&ПустаяДата,
		|	&ПустаяДата,
		|	ВЫБОР
		|		КОГДА БазаДополнительныеНачисления.ЧислоМесяцевРазрез = 0
		|			ТОГДА 1
		|		ИНАЧЕ БазаДополнительныеНачисления.ЧислоМесяцевРазрез
		|	КОНЕЦ,
		|	БазаДополнительныеНачисления.ПериодРасчетаСреднегоЗаработка,
		|	БазаДополнительныеНачисления.НомерСтроки,
		|	0,
		|	0
		|ИЗ
		|	РегистрРасчета.РасчетСреднегоЗаработка.БазаДополнительныеНачисленияРаботниковОрганизаций(
		|			&парамИзмерения,
		|			&парамИзмерения,
		|			&парамРазрезыДоп,
		|			Регистратор = &парамРегистратор
		|				И НЕ ВидРасчета В (&парамПоПремии)) КАК БазаДополнительныеНачисления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПремииГруппировкаПоОтработанномуВремени.Результат,
		|	ПремииГруппировкаПоОтработанномуВремени.ДатаНачалоПериодаПремии,
		|	ПремииГруппировкаПоОтработанномуВремени.ДатаОкончанияПериодаПремии,
		|	ПремииГруппировкаПоОтработанномуВремени.ДатаНачалаРасчетногоПериода,
		|	ПремииГруппировкаПоОтработанномуВремени.ДатаОкончанияРасчетногоПериода,
		|	ПремииГруппировкаПоОтработанномуВремени.ЧислоМесяцев,
		|	ПремииГруппировкаПоОтработанномуВремени.ПериодРасчетаСреднегоЗаработка,
		|	ПремииГруппировкаПоОтработанномуВремени.НомерСтроки,
		|	СУММА(ПремииГруппировкаПоОтработанномуВремени.ОтработаноДнейПоПятидневке),
		|	СУММА(ПремииГруппировкаПоОтработанномуВремени.ДнейПоПятидневке)
		|ИЗ
		|	ВТ_ПремииГруппировкаПоОтработанномуВремени КАК ПремииГруппировкаПоОтработанномуВремени
		|
		|СГРУППИРОВАТЬ ПО
		|	ПремииГруппировкаПоОтработанномуВремени.Результат,
		|	ПремииГруппировкаПоОтработанномуВремени.ДатаНачалоПериодаПремии,
		|	ПремииГруппировкаПоОтработанномуВремени.ДатаОкончанияПериодаПремии,
		|	ПремииГруппировкаПоОтработанномуВремени.ДатаНачалаРасчетногоПериода,
		|	ПремииГруппировкаПоОтработанномуВремени.ДатаОкончанияРасчетногоПериода,
		|	ПремииГруппировкаПоОтработанномуВремени.ЧислоМесяцев,
		|	ПремииГруппировкаПоОтработанномуВремени.ПериодРасчетаСреднегоЗаработка,
		|	ПремииГруппировкаПоОтработанномуВремени.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(База.РезультатБаза) КАК РезультатБаза,
		|	СУММА(База.ОтработаноПоПятидневке) КАК ОтработаноДнейПоПятидневке,
		|	СУММА(База.НормаПоПятидневке) КАК НормаДнейПоПятидневкеПроизвКалендарь,
		|	База.ДатаНачалаПериодаПремии,
		|	База.ДатаОкончанияПериодаПремии,
		|	ЛОЖЬ КАК ПоследняяСтрокаПремии,
		|	База.ЧислоМесяцев,
		|	РАЗНОСТЬДАТ(База.ДатаНачалаПериодаПремии, База.ДатаОкончанияПериодаПремии, МЕСЯЦ) + 1 КАК ПериодПремииВМесяцах,
		|	ВЫБОР
		|		КОГДА База.ДатаНачалаРасчетногоПериода > База.ДатаНачалаПериодаПремии 
		|			ТОГДА РАЗНОСТЬДАТ(База.ДатаНачалаРасчетногоПериода, База.ДатаОкончанияПериодаПремии, МЕСЯЦ) + 1
		|		ИНАЧЕ РАЗНОСТЬДАТ(База.ДатаНачалаПериодаПремии, База.ДатаОкончанияПериодаПремии, МЕСЯЦ) + 1
		|	КОНЕЦ КАК МесяцевПериодаПремииВРасчетномПериоде,
		|	База.ПериодРасчетаСреднегоЗаработка,
		|	База.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТ_База КАК База
		|
		|СГРУППИРОВАТЬ ПО
		|	База.ДатаНачалаПериодаПремии,
		|	База.ДатаОкончанияПериодаПремии,
		|	База.ЧислоМесяцев,
		|	РАЗНОСТЬДАТ(База.ДатаНачалаПериодаПремии, База.ДатаОкончанияПериодаПремии, МЕСЯЦ) + 1,
		|	ВЫБОР
		|		КОГДА База.ДатаНачалаРасчетногоПериода > База.ДатаНачалаПериодаПремии 
		|			ТОГДА РАЗНОСТЬДАТ(База.ДатаНачалаРасчетногоПериода, База.ДатаОкончанияПериодаПремии, МЕСЯЦ) + 1
		|		ИНАЧЕ РАЗНОСТЬДАТ(База.ДатаНачалаПериодаПремии, База.ДатаОкончанияПериодаПремии, МЕСЯЦ) + 1
		|	КОНЕЦ,
		|	База.ПериодРасчетаСреднегоЗаработка,
		|	База.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	База.НомерСтроки";

	Измерения = Новый Массив(1);
	Измерения[0] = "Сотрудник";

	Разрезы = Новый Массив(1);
	Разрезы[0] = "ПериодРегистрации";
	
	РазрезыДоп = Новый Массив(2);
	РазрезыДоп[0] = "ПериодРегистрации";
	РазрезыДоп[1] = "ЧислоМесяцев";
	
	Запрос.УстановитьПараметр("парамИзмерения",  Измерения);
	Запрос.УстановитьПараметр("парамРазрезы", 	 Разрезы);
	Запрос.УстановитьПараметр("парамРазрезыДоп", РазрезыДоп);
	
	ПоПремии = Новый Массив;
	ПоПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
	ПоПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБезИндексации);
	ПоПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
	ПоПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБезИндексации);
	
	Запрос.УстановитьПараметр("парамПоПремии", 	   ПоПремии);
	Запрос.УстановитьПараметр("ПустаяДата", 	   '00010101');
	Запрос.УстановитьПараметр("парамРегистратор", 	Регистратор);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

// выполняет формирование и запись набора записей регистра РасчетСреднегоЗаработка
// на основании данных набора записей регистра ОсновныеНачисленияРаботниковОрганизации
// Параметры:
//  ИмяРегистра - имя регистра расчетов 
//  Регистратор - регистратор набора записей регистра ОсновныеНачисленияРаботниковОрганизации 
//                или ДополнительныеНачисленияРаботниковОрганизаций
//  НаборЗаписей
//  УчетнаяПолитикаПоПерсоналу
// 
// Возвращаемое значение:
//  нет
//
Процедура СформироватьИЗаписатьДанныеРасчетаСреднего(ИмяРегистра, Регистратор, НаборЗаписей, УчетнаяПолитика) Экспорт;
	
	// Для получения полных данных по разным филиалам 
	УстановитьПривилегированныйРежим(Истина);
	
	ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка 		    = УчетнаяПолитика.ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка;
	УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка 	    = УчетнаяПолитика.УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка;
	ВариантУчетаКадровыхПерестановок							    = УчетнаяПолитика.ВариантУчетаКадровыхПерестановок;
	РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок	= УчетнаяПолитика.РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок;
	РасчетКоэффициентаНарастающимИтогом                     		= УчетнаяПолитика.РасчетКоэффициентаНарастающимИтогом;
	
	// Вычислим наименьшую и наибольшую дату расчета среднего
	ДатаНачалаРасчетаСреднего = Дата('00010101');
	ДатаОкончанияРасчетаСреднего = Дата('00010101');
	
	// Получим дату начала расчета события
	//ДатаНачалаСобытия = Дата('00010101');
	ДатаНачалаСобытия = ПолучитьДатуНачалаСобытия(ИмяРегистра, Регистратор);
	
	// Выберем данные о коэффициентах индексации за расчетные периоды (в общем случае может быть несколько 
	// различных расчетных периодов, так как записей начислений в документе оплаты может быть несколько и мы позволяем 
	// пользователю редактировать расчетный период)

	Запрос = Новый Запрос; 
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СпособыРасчетаПоСреднему = Новый Массив(5);
	СпособыРасчетаПоСреднему[0] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку;
	СпособыРасчетаПоСреднему[1] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных;
	СпособыРасчетаПоСреднему[2] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска;
	СпособыРасчетаПоСреднему[3] = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка;
	СпособыРасчетаПоСреднему[4] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения;
	
	Запрос.УстановитьПараметр("парамСпособыРасчета", СпособыРасчетаПоСреднему);
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
	Запрос.УстановитьПараметр("ДатаНачалаРасчетаСУчетомИндексации", ПолучитьДатуНачалаРасчетаСреднегоЗаработкаСУчетомИндексации());
	
	КоличествоПеремещений = 0;
	
 	Если УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка Тогда
		
		ТекущееПодразделение = "";
		ТекущаяДолжность = "";
		
		КадровыеПерестановкиФизЛицТекст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РаботникиОрганизаций.Сотрудник,
			|	РаботникиОрганизаций.Организация,
			|	РаботникиОрганизаций.Период,
			|	РаботникиОрганизаций.ПодразделениеОрганизации,
			|	РаботникиОрганизаций.Должность,
			|	РаботникиОрганизаций.ТарифныйРазряд
			|ПОМЕСТИТЬ ВТ_КадровыеПерестановкиФизЛиц
			|ИЗ
			|	РегистрРасчета." + ИмяРегистра + " КАК Основной
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|		ПО Основной.Сотрудник = РаботникиОрганизаций.Сотрудник
			|			И Основной.Организация = РаботникиОрганизаций.Организация
			|			И (Основной.Регистратор = &парамРегистратор)";
			
		Запрос.Текст = КадровыеПерестановкиФизЛицТекст;
		Запрос.Выполнить();
		КадровыеПерестановкиФизЛицТекст = "ВТ_КадровыеПерестановкиФизЛиц";
			
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
					   |	РаботникиОрганизаций.Сотрудник,
					   |	РаботникиОрганизаций.Организация,
					   |	РаботникиОрганизаций.Период,
					   |	РаботникиОрганизаций.ПодразделениеОрганизации,
					   |	РаботникиОрганизаций.Должность,
					   |	РаботникиОрганизаций.ТарифныйРазряд
					   |ИЗ
					   |	" + КадровыеПерестановкиФизЛицТекст + " КАК РаботникиОрганизаций
					   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					   |			РаботникиОрганизаций.Сотрудник КАК Сотрудник,
					   |			РаботникиОрганизаций.Организация КАК Организация,
					   |			МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
					   |		ИЗ
					   |			РегистрРасчета." + ИмяРегистра + " КАК Основной
					   |				ЛЕВОЕ СОЕДИНЕНИЕ " + КадровыеПерестановкиФизЛицТекст + " КАК РаботникиОрганизаций
					   |				ПО Основной.Сотрудник = РаботникиОрганизаций.Сотрудник
					   |					И Основной.Организация = РаботникиОрганизаций.Организация
					   |					И Основной.ПериодРасчетаСреднегоЗаработкаНачало >= РаботникиОрганизаций.Период
					   |					И (Основной.Регистратор = &парамРегистратор)
					   |		
					   |		СГРУППИРОВАТЬ ПО
					   |			РаботникиОрганизаций.Сотрудник,
					   |			РаботникиОрганизаций.Организация) КАК КадровыеДанныеДоРасчетаСреднегоЗаработка
					   |		ПО РаботникиОрганизаций.Период = КадровыеДанныеДоРасчетаСреднегоЗаработка.Период
					   |			И РаботникиОрганизаций.Сотрудник = КадровыеДанныеДоРасчетаСреднегоЗаработка.Сотрудник
					   |			И РаботникиОрганизаций.Организация = КадровыеДанныеДоРасчетаСреднегоЗаработка.Организация";

					   
		ТекущееМестоРаботы = Запрос.Выполнить().Выбрать();
		Если ТекущееМестоРаботы.Следующий() Тогда
			ТекущееПодразделение 	= ТекущееМестоРаботы.ПодразделениеОрганизации;
			ТекущаяДолжность	 	= ТекущееМестоРаботы.Должность;
			ТекущийТарифныйРазряд 	= ТекущееМестоРаботы.ТарифныйРазряд;
		КонецЕсли;
		
		ПериодыПеремещенийТекст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
			|	РаботникиОрганизаций.Организация КАК Организация,
			|	РаботникиОрганизаций.Период КАК Период,
			|	" + ?(ВариантУчетаКадровыхПерестановок = Перечисления.ВариантыУчетаКадровыхПерестановок.ПодразделениеИлиДолжность,
				"РаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,","") + "
			|	" + ?(ВариантУчетаКадровыхПерестановок = Перечисления.ВариантыУчетаКадровыхПерестановок.ПодразделениеДолжностьРазряд,
				"РаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
			|	РаботникиОрганизаций.ТарифныйРазряд КАК ТарифныйРазряд,","") + "
			|	" + ?(ВариантУчетаКадровыхПерестановок = Перечисления.ВариантыУчетаКадровыхПерестановок.ДолжностьРазряд,
				"РаботникиОрганизаций.ТарифныйРазряд КАК ТарифныйРазряд,","") + "
			|	
			|	РаботникиОрганизаций.Должность КАК Должность 
			|ИЗ
			|	РегистрРасчета." + ИмяРегистра + " КАК Основной
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + КадровыеПерестановкиФизЛицТекст + " КАК РаботникиОрганизаций
			|		ПО РаботникиОрганизаций.Сотрудник = Основной.Сотрудник
			|			И РаботникиОрганизаций.Организация = Основной.Организация
			|			И РаботникиОрганизаций.Период < Основной.ДатаНачалаСобытия
			|			И РаботникиОрганизаций.Период >= Основной.ПериодРасчетаСреднегоЗаработкаНачало
			|			И (Основной.Регистратор = &парамРегистратор)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период
			|";

		Запрос.Текст = ПериодыПеремещенийТекст;
		ПеремещенияСотрудника = Запрос.Выполнить().Выбрать();
		
		Если РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок Тогда
			// таблица кадровых перемещений сотрудника
			ТаблицаКадровыхПеремещений = Новый ТаблицаЗначений;
			ТаблицаКадровыхПеремещений.Колонки.Добавить("Сотрудник",   Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
			ТаблицаКадровыхПеремещений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
			ТаблицаКадровыхПеремещений.Колонки.Добавить("Период", 	   Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
			ТаблицаКадровыхПеремещений.Колонки.Добавить("ПериодКонец", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		КонецЕсли;
		
		// Определим последнюю дату смены места работы
		ПериодПоследнегоПеремещения = Дата('00010101000000');
		КоличествоПеремещений = 0;
		Если ВариантУчетаКадровыхПерестановок = Перечисления.ВариантыУчетаКадровыхПерестановок.ПодразделениеИлиДолжность Тогда
			
			Пока ПеремещенияСотрудника.Следующий() Цикл
				Если ТекущееПодразделение <>  ПеремещенияСотрудника.ПодразделениеОрганизации
					ИЛИ ТекущаяДолжность <> ПеремещенияСотрудника.Должность Тогда
					
					Если ТекущееПодразделение <> "" И ТекущаяДолжность <> "" Тогда
						
						КоличествоПеремещений = КоличествоПеремещений + 1;
						
						Если РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок Тогда
							СтрокаПеремещения = ТаблицаКадровыхПеремещений.Добавить();
							СтрокаПеремещения.Сотрудник   = ПеремещенияСотрудника.Сотрудник;
							СтрокаПеремещения.Организация = ПеремещенияСотрудника.Организация;
							СтрокаПеремещения.Период 	  = ПериодПоследнегоПеремещения;
							СтрокаПеремещения.ПериодКонец = ПеремещенияСотрудника.Период-1;
						КонецЕсли;

					КонецЕсли;
					
					ТекущееПодразделение 		= ПеремещенияСотрудника.ПодразделениеОрганизации;
				    ТекущаяДолжность			= ПеремещенияСотрудника.Должность;
					ПериодПоследнегоПеремещения	= ПеремещенияСотрудника.Период;
					
				КонецЕсли;			
				
			КонецЦикла;
			
			Если РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок Тогда
				СтрокаПеремещения = ТаблицаКадровыхПеремещений.Добавить();
				СтрокаПеремещения.Сотрудник   = ПеремещенияСотрудника.Сотрудник;
				СтрокаПеремещения.Организация = ПеремещенияСотрудника.Организация;
				СтрокаПеремещения.Период 	  = ПериодПоследнегоПеремещения;
				СтрокаПеремещения.ПериодКонец = Дата("39990101");
			КонецЕсли;
			
		ИначеЕсли ВариантУчетаКадровыхПерестановок = Перечисления.ВариантыУчетаКадровыхПерестановок.Должность Тогда
			
			Пока ПеремещенияСотрудника.Следующий() Цикл
				
				Если ТекущаяДолжность <> ПеремещенияСотрудника.Должность Тогда
					
					Если ТекущаяДолжность <> "" Тогда
						
						КоличествоПеремещений = КоличествоПеремещений + 1;
						
						Если РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок Тогда
							СтрокаПеремещения = ТаблицаКадровыхПеремещений.Добавить();
							СтрокаПеремещения.Сотрудник   = ПеремещенияСотрудника.Сотрудник;
							СтрокаПеремещения.Организация = ПеремещенияСотрудника.Организация;
							СтрокаПеремещения.Период 	  = ПериодПоследнегоПеремещения;
							СтрокаПеремещения.ПериодКонец = ПеремещенияСотрудника.Период-1;
						КонецЕсли;
						
					КонецЕсли;
					
					ТекущаяДолжность			= ПеремещенияСотрудника.Должность;
					ПериодПоследнегоПеремещения	= ПеремещенияСотрудника.Период;
					
				КонецЕсли;			
			КонецЦикла;
			
			Если РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок Тогда
				СтрокаПеремещения = ТаблицаКадровыхПеремещений.Добавить();
				СтрокаПеремещения.Сотрудник   = ПеремещенияСотрудника.Сотрудник;
				СтрокаПеремещения.Организация = ПеремещенияСотрудника.Организация;
				СтрокаПеремещения.Период 	  = ПериодПоследнегоПеремещения;
				СтрокаПеремещения.ПериодКонец = Дата("39990101");
			КонецЕсли;
			
		ИначеЕсли ВариантУчетаКадровыхПерестановок = Перечисления.ВариантыУчетаКадровыхПерестановок.ДолжностьРазряд Тогда
			
			Пока ПеремещенияСотрудника.Следующий() Цикл
				Если ТекущийТарифныйРазряд <>  ПеремещенияСотрудника.ТарифныйРазряд
					ИЛИ ТекущаяДолжность <> ПеремещенияСотрудника.Должность Тогда
					
					Если (ТекущийТарифныйРазряд <> "" И ТекущийТарифныйРазряд <> Неопределено) ИЛИ ТекущаяДолжность <> "" Тогда
						
						КоличествоПеремещений = КоличествоПеремещений + 1;
						
						Если РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок Тогда
							СтрокаПеремещения = ТаблицаКадровыхПеремещений.Добавить();
							СтрокаПеремещения.Сотрудник   = ПеремещенияСотрудника.Сотрудник;
							СтрокаПеремещения.Организация = ПеремещенияСотрудника.Организация;
							СтрокаПеремещения.Период 	  = ПериодПоследнегоПеремещения;
							СтрокаПеремещения.ПериодКонец = ПеремещенияСотрудника.Период-1;
						КонецЕсли;
						
					КонецЕсли;
					
					ТекущийТарифныйРазряд 		= ПеремещенияСотрудника.ТарифныйРазряд;
					ТекущаяДолжность			= ПеремещенияСотрудника.Должность;
					ПериодПоследнегоПеремещения	= ПеремещенияСотрудника.Период;
					
				КонецЕсли;			
				
			КонецЦикла;
			
			Если РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок Тогда
				СтрокаПеремещения = ТаблицаКадровыхПеремещений.Добавить();
				СтрокаПеремещения.Сотрудник   = ПеремещенияСотрудника.Сотрудник;
				СтрокаПеремещения.Организация = ПеремещенияСотрудника.Организация;
				СтрокаПеремещения.Период 	  = ПериодПоследнегоПеремещения;
				СтрокаПеремещения.ПериодКонец = Дата("39990101");
			КонецЕсли;
			
		ИначеЕсли ВариантУчетаКадровыхПерестановок = Перечисления.ВариантыУчетаКадровыхПерестановок.ПодразделениеДолжностьРазряд Тогда
			
			Пока ПеремещенияСотрудника.Следующий() Цикл
				Если ТекущееПодразделение <>  ПеремещенияСотрудника.ПодразделениеОрганизации
					ИЛИ ТекущаяДолжность <> ПеремещенияСотрудника.Должность
					ИЛИ ТекущийТарифныйРазряд <>  ПеремещенияСотрудника.ТарифныйРазряд Тогда
					
					Если ТекущийТарифныйРазряд <> "" ИЛИ (ТекущаяДолжность <> "" И ТекущееПодразделение <> "") Тогда
						
						КоличествоПеремещений = КоличествоПеремещений + 1;
						
						Если РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок Тогда
							СтрокаПеремещения = ТаблицаКадровыхПеремещений.Добавить();
							СтрокаПеремещения.Сотрудник   = ПеремещенияСотрудника.Сотрудник;
							СтрокаПеремещения.Организация = ПеремещенияСотрудника.Организация;
							СтрокаПеремещения.Период 	  = ПериодПоследнегоПеремещения;
							СтрокаПеремещения.ПериодКонец = ПеремещенияСотрудника.Период-1;
						КонецЕсли;
						
					КонецЕсли;
					
					ТекущееПодразделение 		= ПеремещенияСотрудника.ПодразделениеОрганизации;
					ТекущийТарифныйРазряд 		= ПеремещенияСотрудника.ТарифныйРазряд;
					ТекущаяДолжность			= ПеремещенияСотрудника.Должность;
					ПериодПоследнегоПеремещения	= ПеремещенияСотрудника.Период;
					
				КонецЕсли;			
				
			КонецЦикла;
			
			Если РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок Тогда
				СтрокаПеремещения = ТаблицаКадровыхПеремещений.Добавить();
				СтрокаПеремещения.Сотрудник   = ПеремещенияСотрудника.Сотрудник;
				СтрокаПеремещения.Организация = ПеремещенияСотрудника.Организация;
				СтрокаПеремещения.Период 	  = ПериодПоследнегоПеремещения;
				СтрокаПеремещения.ПериодКонец = Дата("39990101");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ДатаНачалаСобытия >= ПолучитьДатуИзмененияЕдиныхПравил2015() 
		И НЕ РасчетКоэффициентаНарастающимИтогом Тогда

		КоэффициентыИндексацииЗаработкаТекст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Основной.Сотрудник,
			|	Основной.Организация,
			|	КоэффициентыИндексацииЗаработка.Период КАК ДатаИндексации,
			|	ВЫБОР
			|		КОГДА КоэффициентыИндексацииЗаработка.Коэффициент > 1
			|			ТОГДА КоэффициентыИндексацииЗаработка.Коэффициент
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК КоэффициентИндексации
			|ПОМЕСТИТЬ ВТ_КоэффициентыИндексацииЗаработка
			|ИЗ
			|	РегистрРасчета." + ИмяРегистра + " КАК Основной
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентыИндексацииЗаработка КАК КоэффициентыИндексацииЗаработка
			|		ПО Основной.Организация = КоэффициентыИндексацииЗаработка.Организация
			|			И Основной.Сотрудник = КоэффициентыИндексацииЗаработка.Сотрудник
			|			И Основной.ДатаНачалаСобытия > КоэффициентыИндексацииЗаработка.Период
			|			И (Основной.Регистратор = &парамРегистратор)
			|ГДЕ
			|	КоэффициентыИндексацииЗаработка.Период = КоэффициентыИндексацииЗаработка.ДатаИндексации";
		
		Если УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка Тогда
			
			Если РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок И КоличествоПеремещений > 0 Тогда
				КоэффициентыИндексацииЗаработкаТекст = СтрЗаменить(КоэффициентыИндексацииЗаработкаТекст, "ВТ_КоэффициентыИндексацииЗаработка", "ВТ_ДанныеКоэффициентов");
				Запрос.УстановитьПараметр("ПериодыКадровыхПерестановок", ТаблицаКадровыхПеремещений);
				КоэффициентыИндексацииЗаработкаТекст = КоэффициентыИндексацииЗаработкаТекст + "
					|;
					|////////////////////////////////////////////////////////////////////////////////
					|
					|ВЫБРАТЬ
					|	ПериодыКадровыхПерестановок.Организация,
					|	ПериодыКадровыхПерестановок.Сотрудник,
					|	ПериодыКадровыхПерестановок.Период,
					|	ПериодыКадровыхПерестановок.ПериодКонец
					|ПОМЕСТИТЬ ВТ_ПериодыКадровыхПерестановок
					|   ИЗ &ПериодыКадровыхПерестановок КАК ПериодыКадровыхПерестановок
					|;
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	КоэффициентыИндексацииЗаработка.Сотрудник,
					|	КоэффициентыИндексацииЗаработка.Организация,
					|	КоэффициентыИндексацииЗаработка.ДатаИндексации,
					|	ВЫБОР
					|		КОГДА КоэффициентыИндексацииЗаработка.КоэффициентИндексации < 1
					|			ТОГДА 1
					|		ИНАЧЕ ВЫБОР 
					|				КОГДА КоэффициентыИндексацииЗаработка.ДатаИндексации = ПериодыКадровыхПерестановок.Период
					|					ТОГДА 1
					|				ИНАЧЕ КоэффициентыИндексацииЗаработка.КоэффициентИндексации
					|			  КОНЕЦ
					|	КОНЕЦ КАК КоэффициентИндексации
					|ПОМЕСТИТЬ ВТ_КоэффициентыИндексацииЗаработка
				    |ИЗ
					|	ВТ_ДанныеКоэффициентов КАК КоэффициентыИндексацииЗаработка
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыКадровыхПерестановок КАК ПериодыКадровыхПерестановок
					|	    	ПО КоэффициентыИндексацииЗаработка.Организация = ПериодыКадровыхПерестановок.Организация
					|	    	И КоэффициентыИндексацииЗаработка.Сотрудник = ПериодыКадровыхПерестановок.Сотрудник
					|	    	И КоэффициентыИндексацииЗаработка.ДатаИндексации МЕЖДУ ПериодыКадровыхПерестановок.Период И ПериодыКадровыхПерестановок.ПериодКонец 
					|ОБЪЕДИНИТЬ
					|// добавим строки для кадровых перемещений без индексации (коэффициент равен 1)
					|
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ПериодыКадровыхПерестановок.Сотрудник,
					|	ПериодыКадровыхПерестановок.Организация,
					|	ПериодыКадровыхПерестановок.Период,
					|	1
					|ИЗ
					|	ВТ_ПериодыКадровыхПерестановок КАК ПериодыКадровыхПерестановок
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКоэффициентов КАК КоэффициентыИндексацииЗаработка
					|		ПО ПериодыКадровыхПерестановок.Сотрудник = КоэффициентыИндексацииЗаработка.Сотрудник
					|			И ПериодыКадровыхПерестановок.Организация = КоэффициентыИндексацииЗаработка.Организация
					|			И ПериодыКадровыхПерестановок.Период = КоэффициентыИндексацииЗаработка.ДатаИндексации
					|
					|ГДЕ 
					|	(КоэффициентыИндексацииЗаработка.Сотрудник) ЕСТЬ NULL
					|";

			ИначеЕсли КоличествоПеремещений > 0 Тогда
				Запрос.УстановитьПараметр("ПериодПоследнегоПеремещения", ПериодПоследнегоПеремещения);
				КоэффициентыИндексацииЗаработкаТекст = КоэффициентыИндексацииЗаработкаТекст + "
					|	И КоэффициентыИндексацииЗаработка.Период > &ПериодПоследнегоПеремещения
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	Основной.Сотрудник,
					|	Основной.Организация,
					|	&ПериодПоследнегоПеремещения,
					|	1
					|ИЗ
					|	РегистрРасчета." + ИмяРегистра + " КАК Основной
					|ГДЕ Основной.Регистратор = &парамРегистратор
					|";
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе 
			
		КоэффициентыИндексацииЗаработкаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(КоэффициентыИндексацииЗаработка.Период) КАК Период,
		|	КоэффициентыИндексацииЗаработка.Сотрудник КАК Сотрудник,
		|	КоэффициентыИндексацииЗаработка.Организация КАК Организация
		|ПОМЕСТИТЬ ВТ_ВыборПериода
		|ИЗ
		|	РегистрРасчета." + ИмяРегистра + " КАК Основной
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентыИндексацииЗаработка КАК КоэффициентыИндексацииЗаработка
		|		ПО Основной.Сотрудник = КоэффициентыИндексацииЗаработка.Сотрудник
		|			И Основной.Организация = КоэффициентыИндексацииЗаработка.Организация
		|			И Основной.ПериодРасчетаСреднегоЗаработкаНачало < КоэффициентыИндексацииЗаработка.Период
		|			И Основной.ДатаНачалаСобытия > КоэффициентыИндексацииЗаработка.Период
		|			И Основной.Регистратор = &парамРегистратор
		|ГДЕ
		|	КоэффициентыИндексацииЗаработка.Коэффициент > 1
		|
		|СГРУППИРОВАТЬ ПО
		|	КоэффициентыИндексацииЗаработка.Сотрудник,
		|	КоэффициентыИндексацииЗаработка.Организация
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КоэффициентыИндексацииЗаработка.Сотрудник КАК Сотрудник,
		|	КоэффициентыИндексацииЗаработка.Организация КАК Организация,
		|	КоэффициентыИндексацииЗаработка.ДатаИндексации КАК ДатаИндексации,
		|	ВЫБОР
		|		КОГДА КоэффициентыИндексацииЗаработка.КоэффициентИндексации < 1
		|			ТОГДА 1
		|		ИНАЧЕ КоэффициентыИндексацииЗаработка.КоэффициентИндексации
		|	КОНЕЦ КАК КоэффициентИндексации
		|ПОМЕСТИТЬ ВТ_КоэффициентыИндексацииЗаработка
		|ИЗ
		|	РегистрСведений.КоэффициентыИндексацииЗаработка КАК КоэффициентыИндексацииЗаработка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВыборПериода КАК ВыборПериода
		|		ПО КоэффициентыИндексацииЗаработка.Сотрудник = ВыборПериода.Сотрудник
		|			И КоэффициентыИндексацииЗаработка.Организация = ВыборПериода.Организация
		|			И КоэффициентыИндексацииЗаработка.Период = ВыборПериода.Период";
		
		Если УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка Тогда
			
			Если РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок И КоличествоПеремещений > 0 Тогда
				
				Запрос.УстановитьПараметр("ПериодыКадровыхПерестановок", ТаблицаКадровыхПеремещений);
				КоэффициентыИндексацииЗаработкаТекст = "
					|	ВЫБРАТЬ
					|  		ВТ_ПериодыКадровыхПерестановок.Организация,
					|  		ВТ_ПериодыКадровыхПерестановок.Сотрудник,
					|  		ВТ_ПериодыКадровыхПерестановок.Период,
					|  		ВТ_ПериодыКадровыхПерестановок.ПериодКонец
					|
					|ПОМЕСТИТЬ ВТ_ПериодыКадровыхПерестановок
					|   ИЗ &ПериодыКадровыхПерестановок КАК ВТ_ПериодыКадровыхПерестановок
					|
					|;
					|////////////////////////////////////////////////////////////////////////////////
					|	ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
					|	МАКСИМУМ(КоэффициентыИндексацииЗаработка.Период) КАК Период,
					|	КоэффициентыИндексацииЗаработка.Сотрудник КАК Сотрудник,
					|	КоэффициентыИндексацииЗаработка.Организация КАК Организация,
					|	ПериодыКадровыхПерестановок.Период КАК ПериодНачало,
					|	ПериодыКадровыхПерестановок.ПериодКонец
					|ПОМЕСТИТЬ ВТ_ВыборПериода
					|
					|ИЗ
					|	РегистрРасчета." + ИмяРегистра + " КАК Основной
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентыИндексацииЗаработка КАК КоэффициентыИндексацииЗаработка
					|		ПО Основной.Сотрудник = КоэффициентыИндексацииЗаработка.Сотрудник
					|			И Основной.Организация = КоэффициентыИндексацииЗаработка.Организация
					|			И Основной.ПериодРасчетаСреднегоЗаработкаНачало < КоэффициентыИндексацииЗаработка.Период
					|			И Основной.ДатаНачалаСобытия > КоэффициентыИндексацииЗаработка.Период
					|			И (Основной.Регистратор = &парамРегистратор)
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыКадровыхПерестановок КАК ПериодыКадровыхПерестановок
					|		ПО Основной.Сотрудник = ПериодыКадровыхПерестановок.Сотрудник
					|			И Основной.Организация = ПериодыКадровыхПерестановок.Организация
					|			И (КоэффициентыИндексацииЗаработка.Период >= ПериодыКадровыхПерестановок.Период)
					|			И (КоэффициентыИндексацииЗаработка.Период <= ПериодыКадровыхПерестановок.ПериодКонец)
					|
					|ГДЕ
					|	КоэффициентыИндексацииЗаработка.Коэффициент > 1
					|
					|СГРУППИРОВАТЬ ПО
					|	КоэффициентыИндексацииЗаработка.Организация,
					|	КоэффициентыИндексацииЗаработка.Сотрудник,
					|	ПериодыКадровыхПерестановок.Период,
					|	ПериодыКадровыхПерестановок.ПериодКонец
					|
					|;
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	КоэффициентыИндексацииЗаработка.Сотрудник КАК Сотрудник,
					|	КоэффициентыИндексацииЗаработка.Организация КАК Организация,
					|	КоэффициентыИндексацииЗаработка.ДатаИндексации КАК ДатаИндексации,
					|	ВЫБОР
					|		КОГДА КоэффициентыИндексацииЗаработка.КоэффициентИндексации < 1
					|			ТОГДА 1
					|		ИНАЧЕ ВЫБОР 
					|				КОГДА КоэффициентыИндексацииЗаработка.ДатаИндексации = ВыборПериода.ПериодНачало
					|					ТОГДА 1
					|				ИНАЧЕ КоэффициентыИндексацииЗаработка.КоэффициентИндексации
					|			  КОНЕЦ
					|	КОНЕЦ КАК КоэффициентИндексации
					|ПОМЕСТИТЬ ВТ_КоэффициентыИндексацииЗаработка
					|
					|ИЗ
					|	РегистрСведений.КоэффициентыИндексацииЗаработка КАК КоэффициентыИндексацииЗаработка
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВыборПериода КАК ВыборПериода
					|		ПО КоэффициентыИндексацииЗаработка.Сотрудник = ВыборПериода.Сотрудник
					|			И КоэффициентыИндексацииЗаработка.Организация = ВыборПериода.Организация
					|			И КоэффициентыИндексацииЗаработка.Период = ВыборПериода.Период
					|			И КоэффициентыИндексацииЗаработка.ДатаИндексации МЕЖДУ ВыборПериода.ПериодНачало И ВыборПериода.ПериодКонец
					|
					|ОБЪЕДИНИТЬ
					// добавим строки для кадровых перемещений без индексации (коэффициент равен 1)
					|
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ПериодыКадровыхПерестановок.Сотрудник,
					|	ПериодыКадровыхПерестановок.Организация,
					|	ПериодыКадровыхПерестановок.Период,
					|	1
					|
					|ИЗ
					|	ВТ_ПериодыКадровыхПерестановок КАК ПериодыКадровыхПерестановок
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентыИндексацииЗаработка КАК КоэффициентыИндексацииЗаработка
					|		ПО ПериодыКадровыхПерестановок.Сотрудник = КоэффициентыИндексацииЗаработка.Сотрудник
					|			И ПериодыКадровыхПерестановок.Организация = КоэффициентыИндексацииЗаработка.Организация
					|			И ПериодыКадровыхПерестановок.Период = КоэффициентыИндексацииЗаработка.Период
					|
					|ГДЕ 
					|	(КоэффициентыИндексацииЗаработка.Сотрудник) ЕСТЬ NULL
					|
					|";
				
			ИначеЕсли КоличествоПеремещений > 0 Тогда
				
				Запрос.УстановитьПараметр("ПериодПоследнегоПеремещения", ПериодПоследнегоПеремещения);
				КоэффициентыИндексацииЗаработкаТекст = КоэффициентыИндексацииЗаработкаТекст + "
				|ГДЕ КоэффициентыИндексацииЗаработка.ДатаИндексации > &ПериодПоследнегоПеремещения
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Основной.Сотрудник,
				|	Основной.Организация,
				|	&ПериодПоследнегоПеремещения,
				|	1
				|ИЗ
				|	РегистрРасчета." + ИмяРегистра + " КАК Основной
				|ГДЕ Основной.Регистратор = &парамРегистратор
				|";
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = КоэффициентыИндексацииЗаработкаТекст;
    Запрос.Выполнить();
	КоэффициентыИндексацииЗаработкаТекст = "ВТ_КоэффициентыИндексацииЗаработка";
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Основной.Сотрудник КАК Сотрудник,
	|	Основной.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	Основной.Организация КАК Организация,
	|	Основной.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ГОД(Основной.ПериодРасчетаСреднегоЗаработкаОкончание) * 12 + МЕСЯЦ(Основной.ПериодРасчетаСреднегоЗаработкаОкончание) - ГОД(Основной.ПериодРасчетаСреднегоЗаработкаНачало) * 12 - МЕСЯЦ(Основной.ПериодРасчетаСреднегоЗаработкаНачало) + 1 КАК ПериодРасчетаСреднегоЗаработка,
	|	Основной.ПериодРасчетаСреднегоЗаработкаНачало КАК НачалоБП,
	|	КОНЕЦПЕРИОДА(Основной.ПериодРасчетаСреднегоЗаработкаОкончание, ДЕНЬ) КАК КонецБП,
	|	Основной.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	КоэффициентыИндексацииЗаработка.КоэффициентИндексации,
	|	КоэффициентыИндексацииЗаработка.ДатаИндексации КАК Период
	|ИЗ
	|	РегистрРасчета." + ИмяРегистра + " КАК Основной
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + КоэффициентыИндексацииЗаработкаТекст + " КАК КоэффициентыИндексацииЗаработка
	|		ПО (КоэффициентыИндексацииЗаработка.Сотрудник = Основной.Сотрудник)
	|			И (КоэффициентыИндексацииЗаработка.Организация = Основной.Организация)
	|			И (Основной.ДатаНачалаСобытия >= &ДатаНачалаРасчетаСУчетомИндексации)
	|			И Основной.ДатаНачалаСобытия >= КоэффициентыИндексацииЗаработка.ДатаИндексации
	|			И Основной.ПериодРасчетаСреднегоЗаработкаНачало < КоэффициентыИндексацииЗаработка.ДатаИндексации
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.ВидРасчета.СпособРасчета В(&парамСпособыРасчета)
	|	И (НЕ Основной.Сторно)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	СпособРасчета,
	|	НачалоБП,
	|	КонецБП,
	|	Период УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	МассивПредыдущаяСтрока = Новый Массив;
	МассивСтрока = Новый Массив();
	ПредыдущаяСтрокаЗаработок = Неопределено;
    
    ТекущийСотрудник = Неопределено;
    ТекущаяОрганизация = Неопределено;
    ТекущийСпособ = Неопределено;
    ТекущийНачалоБП = Неопределено;
    ТекущийКонецБП = Неопределено;
    ТекущийКоэффициент = 1;

	ДатаНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням = ПолучитьДатуНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням();
	НеобходимРасчетПоКалендарнымДням = Ложь; 

    // предопределенные виды расчета среднего заработка (строки по заработку (БЛ, отпуск) создаются всегда, остальные - только при наличии базовых видов)
	ПоЗаработку = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
	ПоЗаработкуБезИндексации = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБезИндексации;
	ИспользоватьПоЗаработкуБезИндексации = ПоЗаработкуБезИндексации.БазовыеВидыРасчета.Количество() > 0;
	
	ПоЗаработкуБЛ = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ;
	ПоЗаработкуБЛБезИндексации = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛБезИндексации;
	ИспользоватьПоЗаработкуБЛБезИндексации = ПоЗаработкуБЛБезИндексации.БазовыеВидыРасчета.Количество() > 0;
	
	ПоЗаработкуОтпуск = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск;
	ПоЗаработкуОтпускБезИндексации = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпускБезИндексации;
	ИспользоватьПоЗаработкуОтпускБезИндексации = ПоЗаработкуОтпускБезИндексации.БазовыеВидыРасчета.Количество() > 0;

	МассивВидыРасчетаПремии = Новый Массив();
    
    ПоПремиям = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
    ИспользоватьПоПремиям = ПоПремиям.БазовыеВидыРасчета.Количество() > 0;
    Если ИспользоватьПоПремиям Тогда
    	МассивВидыРасчетаПремии.Добавить(ПоПремиям);
    КонецЕсли;
    ПоПремиямБезИндексации = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБезИндексации;
    ИспользоватьПоПремиямБезИндексации = ПоПремиямБезИндексации.БазовыеВидыРасчета.Количество() > 0;
    Если ИспользоватьПоПремиямБезИндексации Тогда
    	МассивВидыРасчетаПремии.Добавить(ПоПремиямБезИндексации);
    КонецЕсли;
	
	ПоФиксПремиям = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
	ИспользоватьПоФиксПремиям = ПоФиксПремиям.БазовыеВидыРасчета.Количество() > 0;
	Если ИспользоватьПоФиксПремиям Тогда
		МассивВидыРасчетаПремии.Добавить(ПоФиксПремиям);
	КонецЕсли;
	ПоФиксПремиямБезИндексации = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБезИндексации;
	ИспользоватьПоФиксПремиямБезИндексации = ПоФиксПремиямБезИндексации.БазовыеВидыРасчета.Количество() > 0;
	Если ИспользоватьПоФиксПремиямБезИндексации Тогда
		МассивВидыРасчетаПремии.Добавить(ПоФиксПремиямБезИндексации);
	КонецЕсли;

	// Скопируем структуру набора записей
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	
	// Выборку обходим в порядке убывания дат случаев индексации
	Пока Выборка.Следующий() Цикл
		
		// узнаем необходимость расчета в календарных днях для среднего заработка
		Если Выборка.ДатаНачалаСобытия < ДатаНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням Тогда
			НеобходимРасчетПоКалендарнымДням = Истина;
		КонецЕсли;
		
		// Запишем дату начала события
		ДатаНачалаСобытия = Выборка.ДатаНачалаСобытия;
	
		// Проверим, не сменился ли работник
		Если ТекущийСотрудник <> Выборка.Сотрудник ИЛИ ТекущаяОрганизация <> Выборка.Организация ИЛИ ТекущийСпособ <> Выборка.СпособРасчета 
			ИЛИ ТекущийНачалоБП <> Выборка.НачалоБП ИЛИ ТекущийКонецБП <> Выборка.КонецБП Тогда
			
			// Закроем строки по предыдущему работнику
			Если ПредыдущаяСтрокаЗаработок <> Неопределено Тогда
			
				ТекущийМесяц = НачалоМесяца(ПредыдущаяСтрокаЗаработок.БазовыйПериодКонец);
				МесяцБазовыйПериодНачало = НачалоМесяца(ТекущийНачалоБП);

				СтрокаЗаработок = ПредыдущаяСтрокаЗаработок;
				Для Н = 0 По МассивСтрока.ВГраница() Цикл
					МассивСтрока[Н] = МассивПредыдущаяСтрока[Н];
				КонецЦикла;
				
				Пока ТекущийМесяц > МесяцБазовыйПериодНачало Цикл
					
					// дозаполним строки по работнику
					Для Н = 0 По МассивСтрока.ВГраница() Цикл
						МассивСтрока[Н].БазовыйПериодНачало = ТекущийМесяц;
					КонецЦикла;
					
					// Создадим по первой строке по работнику для заработка и премии
					МассивСтрока.Очистить();

					Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных Тогда
						
						СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛ);
						МассивСтрока.Добавить(СтрокаЗаработок);
						Если ИспользоватьПоЗаработкуБЛБезИндексации Тогда
							МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛБезИндексации));
						КонецЕсли;
						
					ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда
					
						СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпуск);
						МассивСтрока.Добавить(СтрокаЗаработок);
						Если ИспользоватьПоЗаработкуОтпускБезИндексации Тогда
							МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпускБезИндексации));
						КонецЕсли;
					
					Иначе
					
						СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработку);
						МассивСтрока.Добавить(СтрокаЗаработок);
						Если ИспользоватьПоЗаработкуБезИндексации Тогда
							МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБезИндексации));
						КонецЕсли;
					
					КонецЕсли;

					Для Н = 0 По МассивСтрока.ВГраница() Цикл
						ЗаполнитьЗначенияСвойств(МассивСтрока[Н], МассивПредыдущаяСтрока[Н]);
						МассивСтрока[Н].БазовыйПериодКонец = ТекущийМесяц - 1;
						МассивСтрока[Н].КоэффициентИндексации = ТекущийКоэффициент;
					КонецЦикла;
					
					ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, -1);
					
				КонецЦикла;
				
				// закроем последнюю строку по предыдущему работнику
				ПредыдущаяСтрокаЗаработок = Неопределено;
				Для Н = 0 По МассивСтрока.ВГраница() Цикл
					МассивСтрока[Н].БазовыйПериодНачало = ТекущийНачалоБП;
				КонецЦикла;
			КонецЕсли;

			// Запомним новый набор идентификаторов начисления
			ТекущаяОрганизация = Выборка.Организация;
			ТекущийСотрудник = Выборка.Сотрудник;
			ТекущийСпособ = Выборка.СпособРасчета;
			ТекущийНачалоБП = Выборка.НачалоБП;
			ТекущийКонецБП = Выборка.КонецБП;
			
			// Инициализируем данные для нового работника
			ТекущийКоэффициент = 1;
			
			МассивСтрока.Очистить();
			МассивПредыдущаяСтрока.Очистить();
			
			// Создадим по первой строке по работнику для заработка и премии
			Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных Тогда
						
				СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛ);
				МассивСтрока.Добавить(СтрокаЗаработок);
				Если ИспользоватьПоЗаработкуБЛБезИндексации Тогда
					МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛБезИндексации));
				КонецЕсли;
						
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда
					
				СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпуск);
				МассивСтрока.Добавить(СтрокаЗаработок);
				Если ИспользоватьПоЗаработкуОтпускБезИндексации Тогда
					МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпускБезИндексации));
				КонецЕсли;
					
			Иначе
					
				СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработку);
				МассивСтрока.Добавить(СтрокаЗаработок);
				Если ИспользоватьПоЗаработкуБезИндексации Тогда
					МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБезИндексации));
				КонецЕсли;
					
			КонецЕсли;
			
			Для Н = 0 По МассивСтрока.ВГраница() Цикл
				МассивСтрока[Н].КоэффициентИндексации = 1;
				МассивСтрока[Н].БазовыйПериодКонец = Выборка.КонецБП;
			КонецЦикла;
			
			Если Выборка.Период <> Null И Выборка.Период <= Выборка.КонецБП Тогда

				ТекущийМесяц = НачалоМесяца(СтрокаЗаработок.БазовыйПериодКонец);
				МесяцБазовыйПериодНачало = НачалоМесяца(Выборка.Период);
				Пока ТекущийМесяц > МесяцБазовыйПериодНачало Цикл
				
					// дозаполним строки по работнику
					Для Н = 0 По МассивСтрока.ВГраница() Цикл
						МассивСтрока[Н].БазовыйПериодНачало = ТекущийМесяц;					
					КонецЦикла;
					
					// Создадим по первой строке по работнику для заработка и премии
					МассивСтрока.Очистить();
					
					Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных Тогда
								
						СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛ);
						МассивСтрока.Добавить(СтрокаЗаработок);
						Если ИспользоватьПоЗаработкуБЛБезИндексации Тогда
							МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛБезИндексации));
						КонецЕсли;
								
					ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда
							
						СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпуск);
						МассивСтрока.Добавить(СтрокаЗаработок);
						Если ИспользоватьПоЗаработкуОтпускБезИндексации Тогда
							МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпускБезИндексации));
						КонецЕсли;
							
					Иначе
							
						СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработку);
						МассивСтрока.Добавить(СтрокаЗаработок);
						Если ИспользоватьПоЗаработкуБезИндексации Тогда
							МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБезИндексации));
						КонецЕсли;
							
					КонецЕсли;
							
					Для Н = 0 По МассивСтрока.ВГраница() Цикл
						МассивСтрока[Н].БазовыйПериодКонец = ТекущийМесяц - 1;
						МассивСтрока[Н].КоэффициентИндексации = ТекущийКоэффициент;
					КонецЦикла;
					
					ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, -1);
					
				КонецЦикла;
				
				// дозаполним первые строки по работнику
				Для Н = 0 По МассивСтрока.ВГраница() Цикл
					МассивСтрока[Н].БазовыйПериодНачало = Выборка.Период;
				КонецЦикла;
				
				// и создадим еще по одной строке
				МассивСтрока.Очистить();
				
				Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных Тогда
								
					СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛ);
					МассивСтрока.Добавить(СтрокаЗаработок);
					Если ИспользоватьПоЗаработкуБЛБезИндексации Тогда
						МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛБезИндексации));
					КонецЕсли;
								
				ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда
							
					СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпуск);
					МассивСтрока.Добавить(СтрокаЗаработок);
					Если ИспользоватьПоЗаработкуОтпускБезИндексации Тогда
						МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпускБезИндексации));
					КонецЕсли;
							
				Иначе
							
					СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработку);
					МассивСтрока.Добавить(СтрокаЗаработок);
					Если ИспользоватьПоЗаработкуБезИндексации Тогда
						МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБезИндексации));
					КонецЕсли;
							
				КонецЕсли;
							
				// дозаполним - знаем все кроме БазовыйПериодНачало
				ТекущийКоэффициент = Выборка.КоэффициентИндексации;
				
				Для Н = 0 По МассивСтрока.ВГраница() Цикл
					МассивСтрока[Н].БазовыйПериодКонец = Выборка.Период-1;
				КонецЦикла;
				
			ИначеЕсли Выборка.Период <> Null Тогда
				// здесь запомним только КоэффициентИндексации
				ТекущийКоэффициент = Выборка.КоэффициентИндексации;
			КонецЕсли;
			
			Для Н = 0 По МассивСтрока.ВГраница() Цикл
				МассивСтрока[Н].КоэффициентИндексации = ТекущийКоэффициент;
			КонецЦикла;
			
		Иначе	
			
			Если Выборка.Период = Null ИЛИ Выборка.Период <= Выборка.КонецБП Тогда	
				
				ТекущийМесяц = НачалоМесяца(ПредыдущаяСтрокаЗаработок.БазовыйПериодКонец);
				МесяцБазовыйПериодНачало = НачалоМесяца(Выборка.Период);
				Пока ТекущийМесяц > МесяцБазовыйПериодНачало Цикл
				
					// дозаполним строки по работнику
					Для Н = 0 По МассивПредыдущаяСтрока.ВГраница() Цикл
						МассивПредыдущаяСтрока[Н].БазовыйПериодНачало = ТекущийМесяц;
					КонецЦикла;
					
					// Создадим по первой строке по работнику для заработка и премии
					МассивПредыдущаяСтрока.Очистить();
					
					Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных Тогда
								
						ПредыдущаяСтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛ);
						МассивПредыдущаяСтрока.Добавить(ПредыдущаяСтрокаЗаработок);
						Если ИспользоватьПоЗаработкуБЛБезИндексации Тогда
							МассивПредыдущаяСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛБезИндексации));
						КонецЕсли;
								
					ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда
							
						ПредыдущаяСтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпуск);
						МассивПредыдущаяСтрока.Добавить(ПредыдущаяСтрокаЗаработок);
						Если ИспользоватьПоЗаработкуОтпускБезИндексации Тогда
							МассивПредыдущаяСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпускБезИндексации));
						КонецЕсли;
							
					Иначе
							
						ПредыдущаяСтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработку);
						МассивПредыдущаяСтрока.Добавить(ПредыдущаяСтрокаЗаработок);
						Если ИспользоватьПоЗаработкуБезИндексации Тогда
							МассивПредыдущаяСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБезИндексации));
						КонецЕсли;
							
					КонецЕсли;
							
					Для Н = 0 По МассивПредыдущаяСтрока.ВГраница() Цикл
						МассивПредыдущаяСтрока[Н].БазовыйПериодКонец = ТекущийМесяц - 1;
						МассивПредыдущаяСтрока[Н].КоэффициентИндексации = ТекущийКоэффициент;
					КонецЦикла;
					
					ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, -1);
					
				КонецЦикла;
		
				// закроем предыдущую строку
				Для Н = 0 По МассивПредыдущаяСтрока.ВГраница() Цикл
					МассивПредыдущаяСтрока[Н].БазовыйПериодНачало = Выборка.Период;
				КонецЦикла;
				
				// Создадим очередные строки
				МассивСтрока.Очистить();
				
				Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных Тогда
							
					СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛ);
					МассивСтрока.Добавить(СтрокаЗаработок);
					Если ИспользоватьПоЗаработкуБЛБезИндексации Тогда
						МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛБезИндексации));
					КонецЕсли;
							
				ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда
						
					СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпуск);
					МассивСтрока.Добавить(СтрокаЗаработок);
					Если ИспользоватьПоЗаработкуОтпускБезИндексации Тогда
						МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпускБезИндексации));
					КонецЕсли;
						
				Иначе
						
					СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработку);
					МассивСтрока.Добавить(СтрокаЗаработок);
					Если ИспользоватьПоЗаработкуБезИндексации Тогда
						МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБезИндексации));
					КонецЕсли;
						
				КонецЕсли;
						
				// дозаполним - знаем все кроме БазовыйПериодНачало
				ТекущийКоэффициент = Выборка.КоэффициентИндексации;

				Для Н = 0 По МассивСтрока.ВГраница() Цикл
					МассивСтрока[Н].БазовыйПериодКонец = Выборка.Период-1;
					МассивСтрока[Н].КоэффициентИндексации = ТекущийКоэффициент;
				КонецЦикла;
				
			Иначе
				// здесь запомним только КоэффициентИндексации
				ТекущийКоэффициент = Выборка.КоэффициентИндексации;
				Для Н = 0 По МассивСтрока.ВГраница() Цикл
					МассивСтрока[Н].КоэффициентИндексации = ТекущийКоэффициент;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Сохраним для следующей итерации
		ПредыдущаяСтрокаЗаработок = СтрокаЗаработок;
		МассивПредыдущаяСтрока.Очистить();
		Для Н = 0 По МассивСтрока.ВГраница() Цикл
			МассивПредыдущаяСтрока.Добавить(МассивСтрока[Н]);
		КонецЦикла;
		
		// Расчет минимальной и максимальной из дат начала и окончания расчетных периодов 
		//(эти данные нужны для процедуры ПолучитьДанныеДляРасчета
        Если ДатаНачалаРасчетаСреднего = Дата('00010101') Тогда
			ДатаНачалаРасчетаСреднего = Выборка.НачалоБП;
		Иначе
			ДатаНачалаРасчетаСреднего = Мин(ДатаНачалаРасчетаСреднего, Выборка.НачалоБП);
		КонецЕсли;
        Если ДатаОкончанияРасчетаСреднего = Дата('00010101') Тогда
			ДатаОкончанияРасчетаСреднего = Выборка.КонецБП;
		Иначе
			ДатаОкончанияРасчетаСреднего = Макс(ДатаОкончанияРасчетаСреднего, Выборка.КонецБП);
		КонецЕсли;
		
	КонецЦикла;
	
	// Закроем строки по последнему работнику
	Если ПредыдущаяСтрокаЗаработок <> Неопределено Тогда
	
		ТекущийМесяц = НачалоМесяца(ПредыдущаяСтрокаЗаработок.БазовыйПериодКонец);
		МесяцБазовыйПериодНачало = НачалоМесяца(ТекущийНачалоБП);
		
		СтрокаЗаработок = ПредыдущаяСтрокаЗаработок;
		МассивСтрока.Очистить();
		Для Н = 0 По МассивПредыдущаяСтрока.ВГраница() Цикл
			МассивСтрока.Добавить(МассивПредыдущаяСтрока[Н]);
		КонецЦикла;
		
		Пока ТекущийМесяц > МесяцБазовыйПериодНачало Цикл
			
			// дозаполним строки по работнику
			Для Н = 0 По МассивСтрока.ВГраница() Цикл
				МассивСтрока[Н].БазовыйПериодНачало = ТекущийМесяц;
			КонецЦикла;
			
			// Создадим по первой строке по работнику для заработка и премии
			МассивСтрока.Очистить();
				
			Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных Тогда
							
				СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛ);
				МассивСтрока.Добавить(СтрокаЗаработок);
				Если ИспользоватьПоЗаработкуБЛБезИндексации Тогда
					МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБЛБезИндексации));
				КонецЕсли;
							
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда
						
				СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпуск);
				МассивСтрока.Добавить(СтрокаЗаработок);
				Если ИспользоватьПоЗаработкуОтпускБезИндексации Тогда
					МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуОтпускБезИндексации));
				КонецЕсли;
						
			Иначе
						
				СтрокаЗаработок = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработку);
				МассивСтрока.Добавить(СтрокаЗаработок);
				Если ИспользоватьПоЗаработкуБезИндексации Тогда
					МассивСтрока.Добавить(СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуБезИндексации));
				КонецЕсли;
						
			КонецЕсли;
						
			Для Н = 0 По МассивСтрока.ВГраница() Цикл
				ЗаполнитьЗначенияСвойств(МассивСтрока[Н],МассивПредыдущаяСтрока[Н]);
				МассивСтрока[Н].БазовыйПериодКонец = ТекущийМесяц - 1;
				МассивСтрока[Н].КоэффициентИндексации = ТекущийКоэффициент;
			КонецЦикла;
			
			ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, -1);
			
		КонецЦикла;
		
		// закроем последнюю строку по предыдущему работнику
		Для Н = 0 По МассивСтрока.ВГраница() Цикл
			МассивСтрока[Н].БазовыйПериодНачало = ТекущийНачалоБП;
		КонецЦикла;
		
	КонецЕсли;
	
	// Добавим строки с премиями
	Выборка.Сбросить();
	Пока Выборка.СледующийПоЗначениюПоля("СпособРасчета") Цикл
		ТекущийМесяц = НачалоМесяца(ДатаОкончанияРасчетаСреднего);
		Пока ТекущийМесяц >= ДатаНачалаРасчетаСреднего Цикл	
			Для Н = 0 По МассивВидыРасчетаПремии.ВГраница() Цикл
				Строка = СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, МассивВидыРасчетаПремии[Н]);
				Строка.БазовыйПериодНачало = ТекущийМесяц;
				Строка.БазовыйПериодКонец = КонецМесяца(ТекущийМесяц);
				Строка.КоэффициентИндексации = 1;
				МассивСтрока.Добавить(Строка);
			КонецЦикла;
	    	ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, -1);
		КонецЦикла;
	КонецЦикла;
			
	// Загрузим полученные периоды в набор записей
	ТаблицаЗаписей.Сортировать("Сотрудник, СпособРасчета, ДатаНачалаРасчетногоПериода, ДатаОкончанияРасчетногоПериода, БазовыйПериодНачало");
	НаборЗаписей.Загрузить(ТаблицаЗаписей);
	
	// Зафиксируем нарезанные записи
	НаборЗаписей.Записать();

	////////////////////////////////////////////////////////////////////////////////
	// Базовые данные для расчета ресурсов
	Если ДатаНачалаСобытия >= ПолучитьДатуИзмененияЕдиныхПравил2015() Тогда
		// С 20 августа 2015 года годовая премия учитывается с даты фактической выплаты
		Результат = БазовыеДанныеДляРасчетаСреднегоПосле_08_2015(Регистратор);
	Иначе
		Результат = БазовыеДанныеДляРасчетаСреднегоДо_08_2015(Регистратор);
	КонецЕсли;
	
	ВыборкаБазы = Результат.Выбрать();
	
	// ЗаписиДанныхДляСреднего
	// Данные для расчета среднего заработка
	// Поля:
	//		НомерСтроки - ключевое поле в пределах регистратора,
	// 		ДатаНачалаРасчетногоПериода, ДатаОкончанияРасчетногоПериода - определяют расчетный период,
	// 		БазовыйПериодНачало, БазовыйПериодКонец - определяют часть расчетного периода,
    //      Сотрудник, Организация - измерения регистра - для идентификации записи
    //      ВидРасчета - вид заработка для расчета среднего 
    //      СпособРасчета - способ расчета среднего заработка
    //
	// Описание:
	//      выбираем из регистра расчета среднего заработка все записи по регистратору по
	//      видам расчета: основной заработок (оба вида) и фиксированные премии
	//
	ЗаписиДанныхДляСреднего =
	"ВЫБРАТЬ
	|	ЗаписиРасчетаСреднего.НомерСтроки КАК НомерСтроки,
	|	ЗаписиРасчетаСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	ЗаписиРасчетаСреднего.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|	ЗаписиРасчетаСреднего.Сотрудник КАК Сотрудник,
	|	ЗаписиРасчетаСреднего.Организация КАК Организация,
	|	ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода КАК ДатаНачалаРасчетногоПериода,
	|	ЗаписиРасчетаСреднего.ДатаОкончанияРасчетногоПериода КАК ДатаОкончанияРасчетногоПериода,
	|	ЗаписиРасчетаСреднего.ВидРасчета КАК ВидРасчета,
	|	ЗаписиРасчетаСреднего.СпособРасчета КАК СпособРасчета
	|ИЗ
	|	РегистрРасчета.РасчетСреднегоЗаработка КАК ЗаписиРасчетаСреднего
	|ГДЕ
	|	ЗаписиРасчетаСреднего.Регистратор = &парамРегистратор
	|	И ЗаписиРасчетаСреднего.ВидРасчета В(&Заработок)";
	
	// НормаПоПроизвКалендарю
	// Данные о норме дней по шестидневке
	// Поля:
	//		МесяцПериода,
	// 		ДнейПоПятидневке
    //
	// Описание:
	//      выбираем из производсвенного календаря с сумированием ресурса Шестидневка
	//      условие - с начала периода расчета среднего заработка по конец периода
	//      группируем по номеру месяца
	//
	НормаПоПроизвКалендарюТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК МесяцПериода,
	|	СУММА(ПроизводственныйКалендарь.Пятидневка) КАК ДнейПоПятидневке
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ГДЕ
	|	ПроизводственныйКалендарь.ДатаКалендаря >= &парамДатаС
	|	И ПроизводственныйКалендарь.ДатаКалендаря <= &парамДатаПо
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ)";
	
	Если НеобходимРасчетПоКалендарнымДням Тогда
		
		// расчет до введения единой инструкции по расчету среднего заработка № 1394 от 29.12.2007
	
		ФактическийПериодДействияТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФПД.Организация,
		|	ФПД.Сотрудник,
		|	ФПД.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
		|	ФПД.Сторно,
		|	ФПД.ПериодДействия,
		|	ФПД.ПериодРегистрации,
		|	ПроизводственныйКалендарь.ДатаКалендаря
		|ИЗ
		|	РегистрРасчета.РасчетСреднегоЗаработка КАК ЗаписиРасчетаСреднего
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|								ВидРасчета.ЗачетНормыВремени
		|								И Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|														Организация 
		|													ИЗ 
		|														РегистрРасчета.РасчетСреднегоЗаработка 
		|													ГДЕ 
		|														Регистратор = &парамРегистратор)
		|								И Сотрудник В (ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|														Сотрудник 
		|													ИЗ 
		|														РегистрРасчета.РасчетСреднегоЗаработка 
		|													ГДЕ 
		|														Регистратор = &парамРегистратор)) КАК ФПД
		|		ПО ЗаписиРасчетаСреднего.Сотрудник = ФПД.Сотрудник
		|			И ЗаписиРасчетаСреднего.Организация = ФПД.Организация
		|			И ФПД.ПериодДействия МЕЖДУ ЗаписиРасчетаСреднего.БазовыйПериодНачало И ЗаписиРасчетаСреднего.БазовыйПериодКонец
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарь
		|		ПО ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ФПД.ПериодДействияНачало И ФПД.ПериодДействияКонец
		|ГДЕ
		|	ЗаписиРасчетаСреднего.Регистратор = &парамРегистратор
		|	И ЗаписиРасчетаСреднего.ВидРасчета = &ПоЗаработкуОтпуск
		|";
		
		// КалендарныеДниПоГрафику
		// Данные о количестве календарных дней приходящихся на отработанное время по графику
		// Поля:
		//		Сотрудник,
		// 		ПериодДействия,
		//		ОтработаноКалендарныхДней
	    //
		// Описание:
		//      выбираем из графика работника календарные дни, приходящиеся на отработанное время
		//      условие - с начала периода расчета среднего заработка по конец периода
		//      группируем по периоду действия
		//
		КалендарныеДниПоГрафикуТекст = 
		"ВЫБРАТЬ
		|	ФактическийПериодДействия.Сотрудник,
		|	ФактическийПериодДействия.Организация,
		|	ФактическийПериодДействия.ПериодДействия,
		|	СУММА(ВЫБОР 
		|			КОГДА НЕ ФактическийПериодДействия.ЗачетОтработанногоВремени 
		|				ТОГДА 0
		|			ИНАЧЕ ВЫБОР КОГДА ФактическийПериодДействия.Сторно ТОГДА -1 ИНАЧЕ 1 КОНЕЦ * ПроизводственныйКалендарь.КалендарныеДни
		|		  КОНЕЦ) КАК ОтработаноКалендарныхДней,
		|	СУММА(ВЫБОР КОГДА ФактическийПериодДействия.Сторно ТОГДА -1 ИНАЧЕ 1 КОНЕЦ * ПроизводственныйКалендарь.КалендарныеДни) КАК НормаКалендарныхДней
		|ИЗ
		|	(" + ФактическийПериодДействияТекст + ") КАК ФактическийПериодДействия
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарь
		|		ПО ФактическийПериодДействия.ДатаКалендаря = ПроизводственныйКалендарь.ДатаКалендаря
		|
		|СГРУППИРОВАТЬ ПО
		|	ФактическийПериодДействия.Сотрудник,
		|	ФактическийПериодДействия.Организация,
		|	ФактическийПериодДействия.ПериодДействия";
		
		////////////////////////////////////////////////////////////////////////////////
		// данные о продолжительности расчетного периода (ОтработаноДней и ОтработаноЧасов), а также
		// об отработанном времени и норме времени за расчетный период  -
		// 	нужны для включения премий, начисленных в фиксированных суммах, пропорционально отработанному времени)
		
		// к каждой записи из данных для расчета среднего выбираем записи основного регистра по правилу:
		// - если это запись по премиям в фикс. суммах - все записи основного регистра, попадающие в расчетный период
		// - если это запись по заработку и начинает расчетный период - записи основного регистра за все "затронутые" месяцы расчетного периода
		// - если же это одна из последующих записей по заработку - записи основного регистра за "затронутые" месяцы расчетного периода, кроме первого
		// для записей расчета среднего по премиям в фикс. суммах собираем отработанное время и норму по пятидневке за весь расчетный период
		// для записей по заработку собираем продолжительность её части расчетного периода
	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтработанноеВремя.НомерСтроки КАК НомерСтроки,
		|	СУММА(ОтработанноеВремя.ОтработаноДнейПоПятидневке) КАК ОтработаноДнейПоПятидневке,
		|	СУММА(ОтработанноеВремя.НормаДнейПоПятидневкеПроизвКалендарь) КАК НормаДнейПоПятидневкеПроизвКалендарь,
		|	СУММА(ОтработанноеВремя.ОтработаноДней) КАК ОтработаноДней,
		|	СУММА(ОтработанноеВремя.ОтработаноЧасов) КАК ОтработаноЧасов,
		|	СУММА(ОтработанноеВремя.НормаЧасов) КАК НормаЧасов,
		|	СУММА(ОтработанноеВремя.КалендарныхДней) КАК КалендарныхДней
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаписиРасчетаСреднего.НомерСтроки КАК НомерСтроки,
		|		СУММА(ОтработанноеВремя.ОтработаноДнейПоПятидневке) КАК ОтработаноДнейПоПятидневке,
		|		НормаПоПроизвКалендарю.ДнейПоПятидневке КАК НормаДнейПоПятидневкеПроизвКалендарь,
		|		КалендарныеДниПоГрафику.НормаКалендарныхДней КАК КалендарныхДней,
		|		ВЫБОР 
		|			КОГДА ЗаписиРасчетаСреднего.СпособРасчета В (&парамНеОтпуск) 
		|				ТОГДА СУММА(ОтработанноеВремя.ОтработаноДней)
		|			ИНАЧЕ КалендарныеДниПоГрафику.ОтработаноКалендарныхДней
		|		КОНЕЦ КАК ОтработаноДней,
		|		СУММА(ОтработанноеВремя.ОтработаноЧасов) КАК ОтработаноЧасов,
		|		ВЫБОР
		|			КОГДА СУММА(ОтработанноеВремя.НормаЧасов) > БалансРабочегоВремени.НормаЧасов
		|				ТОГДА БалансРабочегоВремени.НормаЧасов
		|			ИНАЧЕ СУММА(ОтработанноеВремя.НормаЧасов)
		|		КОНЕЦ КАК НормаЧасов
		|	ИЗ
		|		(" + ЗаписиДанныхДляСреднего + ") КАК ЗаписиРасчетаСреднего
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОтработанноеВремя
		|		ПО ЗаписиРасчетаСреднего.Сотрудник = ОтработанноеВремя.Сотрудник
		|			И ЗаписиРасчетаСреднего.Организация = ОтработанноеВремя.Организация
		|			И ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода <= ОтработанноеВремя.ПериодДействияКонец
		|			И ЗаписиРасчетаСреднего.ДатаОкончанияРасчетногоПериода >= ОтработанноеВремя.ПериодДействияНачало
		|			И ((ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода = ЗаписиРасчетаСреднего.БазовыйПериодНачало
		|						И НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ) <= ОтработанноеВремя.ПериодДействия
		|					ИЛИ ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода < ЗаписиРасчетаСреднего.БазовыйПериодНачало
		|						И ЗаписиРасчетаСреднего.БазовыйПериодНачало <= ОтработанноеВремя.ПериодДействия)
		|					И НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодКонец, МЕСЯЦ) >= ОтработанноеВремя.ПериодДействия
		|				ИЛИ ЗаписиРасчетаСреднего.ВидРасчета В (&ФиксПремии))
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + НормаПоПроизвКалендарюТекст + ") КАК НормаПоПроизвКалендарю
		|		ПО (НормаПоПроизвКалендарю.МесяцПериода = НАЧАЛОПЕРИОДА(ОтработанноеВремя.ПериодДействия, ДЕНЬ))
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + КалендарныеДниПоГрафикуТекст + ") КАК КалендарныеДниПоГрафику
		|		ПО КалендарныеДниПоГрафику.Сотрудник = ОтработанноеВремя.Сотрудник
		|			И КалендарныеДниПоГрафику.Организация = ОтработанноеВремя.Организация
		|			И КалендарныеДниПоГрафику.ПериодДействия = ОтработанноеВремя.ПериодДействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|								ЗаписиРасчетаСреднего.Сотрудник,
		|								ЗаписиРасчетаСреднего.Организация,
		|								НАЧАЛОПЕРИОДА(БалансРабочегоВремени.ДатаМесяца, МЕСЯЦ) КАК ПериодДействия,
		|								МАКСИМУМ(БалансРабочегоВремени.НормаЧасов) КАК НормаЧасов
		|							ИЗ
		|								(" + ЗаписиДанныхДляСреднего + ") КАК ЗаписиРасчетаСреднего
		|								ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОтработанноеВремя
		|									ПО ЗаписиРасчетаСреднего.Сотрудник = ОтработанноеВремя.Сотрудник
		|										И ЗаписиРасчетаСреднего.Организация = ОтработанноеВремя.Организация
		|										И ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода <= ОтработанноеВремя.ПериодДействияКонец
		|										И ЗаписиРасчетаСреднего.ДатаОкончанияРасчетногоПериода >= ОтработанноеВремя.ПериодДействияНачало
		|										И ОтработанноеВремя.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботыФизЛиц
		|								ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БалансРабочегоВремени КАК БалансРабочегоВремени
		|									ПО ОтработанноеВремя.ГрафикРаботы.ГрафикРаботы = БалансРабочегоВремени.ГрафикРаботы
		|							СГРУППИРОВАТЬ ПО
		|								ЗаписиРасчетаСреднего.Сотрудник,
		|								ЗаписиРасчетаСреднего.Организация,
		|								НАЧАЛОПЕРИОДА(БалансРабочегоВремени.ДатаМесяца, МЕСЯЦ)) КАК БалансРабочегоВремени
		|		ПО ОтработанноеВремя.Сотрудник = БалансРабочегоВремени.Сотрудник
		|			И ОтработанноеВремя.Организация = БалансРабочегоВремени.Организация
		|			И ОтработанноеВремя.ПериодДействия = БалансРабочегоВремени.ПериодДействия
		|
		|	СГРУППИРОВАТЬ ПО
		|		ЗаписиРасчетаСреднего.СпособРасчета,
		|		ЗаписиРасчетаСреднего.НомерСтроки,
		|		НАЧАЛОПЕРИОДА(ОтработанноеВремя.ПериодДействия, ДЕНЬ),
		|		НормаПоПроизвКалендарю.ДнейПоПятидневке,
		|		КалендарныеДниПоГрафику.ОтработаноКалендарныхДней,
		|		КалендарныеДниПоГрафику.НормаКалендарныхДней,
		|		БалансРабочегоВремени.НормаЧасов) КАК ОтработанноеВремя
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтработанноеВремя.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Иначе
		// расчет после введения единой инструкции по расчету среднего заработка № 1394 от 29.12.2007
		
		Если ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка = Перечисления.ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка.ПоФактическиОтработанномуВремени Тогда
			// расчет при учете времени работника для рассчета среднего заработка по фактически отработанному времени
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОтработанноеВремя.НомерСтроки КАК НомерСтроки,
			|	СУММА(ОтработанноеВремя.ОтработаноДнейПоПятидневке) КАК ОтработаноДнейПоПятидневке,
			|	СУММА(ОтработанноеВремя.НормаДнейПоПятидневкеПроизвКалендарь) КАК НормаДнейПоПятидневкеПроизвКалендарь,
			|	СУММА(ОтработанноеВремя.ОтработаноДней) КАК ОтработаноДней,
			|	СУММА(ОтработанноеВремя.ОтработаноЧасов) КАК ОтработаноЧасов
			|ИЗ
			|	(ВЫБРАТЬ
			|		ЗаписиРасчетаСреднего.НомерСтроки КАК НомерСтроки,
			|		СУММА(ОтработанноеВремя.ОтработаноДнейПоПятидневке) КАК ОтработаноДнейПоПятидневке,
			|		НормаПоПроизвКалендарю.ДнейПоПятидневке КАК НормаДнейПоПятидневкеПроизвКалендарь,
			|		СУММА(ВЫБОР КОГДА НЕ(БазовыеВидыРасчета.ВидРасчета ЕСТЬ NULL) ТОГДА ОтработанноеВремя.ОтработаноДней ИНАЧЕ 0 КОНЕЦ) КАК ОтработаноДней,
			|		СУММА(ВЫБОР КОГДА НЕ(БазовыеВидыРасчета.ВидРасчета ЕСТЬ NULL) ТОГДА ОтработанноеВремя.ОтработаноЧасов ИНАЧЕ 0 КОНЕЦ) КАК ОтработаноЧасов
			|	ИЗ
			|		(" + ЗаписиДанныхДляСреднего + ") КАК ЗаписиРасчетаСреднего
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОтработанноеВремя
			|		ПО ЗаписиРасчетаСреднего.Сотрудник = ОтработанноеВремя.Сотрудник
			|			И ЗаписиРасчетаСреднего.Организация = ОтработанноеВремя.Организация
			|			И ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода <= ОтработанноеВремя.ПериодДействияКонец
			|			И ЗаписиРасчетаСреднего.ДатаОкончанияРасчетногоПериода >= ОтработанноеВремя.ПериодДействияНачало
			|			И ((ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода = ЗаписиРасчетаСреднего.БазовыйПериодНачало
			|						И НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ) <= ОтработанноеВремя.ПериодДействия
			|					ИЛИ ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода < ЗаписиРасчетаСреднего.БазовыйПериодНачало
			|						И ЗаписиРасчетаСреднего.БазовыйПериодНачало <= ОтработанноеВремя.ПериодДействия)
			|					И НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодКонец, МЕСЯЦ) >= ОтработанноеВремя.ПериодДействия)
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ (" + НормаПоПроизвКалендарюТекст + ") КАК НормаПоПроизвКалендарю
			|		ПО (НормаПоПроизвКалендарю.МесяцПериода = ОтработанноеВремя.ПериодДействия)
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК БазовыеВидыРасчета
			|			ПО ЗаписиРасчетаСреднего.ВидРасчета = БазовыеВидыРасчета.Ссылка
			|				И ОтработанноеВремя.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
			|
			|	СГРУППИРОВАТЬ ПО
			|		ЗаписиРасчетаСреднего.СпособРасчета,
			|		ЗаписиРасчетаСреднего.НомерСтроки,
			|		НАЧАЛОПЕРИОДА(ОтработанноеВремя.ПериодДействия, ДЕНЬ),
			|		НормаПоПроизвКалендарю.ДнейПоПятидневке) КАК ОтработанноеВремя
			|
			|СГРУППИРОВАТЬ ПО
			|	ОтработанноеВремя.НомерСтроки
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		
		Иначе
			// расчет при учете времени работника для рассчета среднего заработка по основному графику предприятия
			
			Запрос.УстановитьПараметр("ОсновнойГрафикРаботыПредприятия",Константы.ОсновнойГрафикРаботыПредприятия.Получить());
			Запрос.УстановитьПараметр("ПоЧасам", Перечисления.ВидыУчетаВремени.ПоЧасам);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОтработанноеВремя.НомерСтроки КАК НомерСтроки,
			|	СУММА(ОтработанноеВремя.ОтработаноДнейПоПятидневке) КАК ОтработаноДнейПоПятидневке,
			|	ОтработанноеВремя.НормаДнейПоПятидневкеПроизвКалендарь КАК НормаДнейПоПятидневкеПроизвКалендарь,
			|	СУММА(ОтработанноеВремя.ОтработаноДней) КАК ОтработаноДней,
			|	СУММА(ОтработанноеВремя.ОтработаноЧасов) КАК ОтработаноЧасов
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ЗаписиРасчетаСреднего.НомерСтроки КАК НомерСтроки,
			|		ВЫБОР
			|			КОГДА (НЕ БазовыеВидыРасчета.ВидРасчета ЕСТЬ NULL )
			|				ТОГДА ВЫБОР
			|						КОГДА ФактическийПериод.Сторно
			|							ТОГДА ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ПроизводственныйКалендарьПятидневка, 0) * -1
			|						ИНАЧЕ ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ПроизводственныйКалендарьПятидневка, 0)
			|					КОНЕЦ
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК ОтработаноДнейПоПятидневке,
			|		НормаПоПроизвКалендарю.ДнейПоПятидневке КАК НормаДнейПоПятидневкеПроизвКалендарь,
			|		ВЫБОР
			|			КОГДА (НЕ БазовыеВидыРасчета.ВидРасчета ЕСТЬ NULL )
			|				ТОГДА ВЫБОР
			|						КОГДА ФактическийПериод.Сторно
			|							ТОГДА ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0) * -1
			|						ИНАЧЕ ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0)
			|					КОНЕЦ
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК ОтработаноДней,
			|		ВЫБОР
			|			КОГДА (НЕ БазовыеВидыРасчета.ВидРасчета ЕСТЬ NULL )
			|				ТОГДА ВЫБОР
			|						КОГДА ФактическийПериод.Сторно
			|							ТОГДА ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение, 0) * -1
			|						ИНАЧЕ ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение, 0)
			|					КОНЕЦ
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК ОтработаноЧасов,
			|		ГрафикиРаботыПоВидамВремени.Дата КАК Дата
			|	ИЗ
			|		(" + ЗаписиДанныхДляСреднего + ") КАК ЗаписиРасчетаСреднего
			|
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
			|									ВидРасчета.ЗачетОтработанногоВремени
			|									И (Сотрудник, Организация) В (ВЫБРАТЬ
			|																		РасчетСреднегоЗаработка.Сотрудник,
			|																		РасчетСреднегоЗаработка.Организация
			|																	ИЗ
			|																		РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|																	ГДЕ
			|																		РасчетСреднегоЗаработка.Регистратор = &парамРегистратор)) КАК ФактическийПериод
			|			ПО ЗаписиРасчетаСреднего.Сотрудник = ФактическийПериод.Сотрудник
			|				И ЗаписиРасчетаСреднего.Организация = ФактическийПериод.Организация
			|				И ((ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода = ЗаписиРасчетаСреднего.БазовыйПериодНачало
			|							И НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ) <= ФактическийПериод.ПериодДействия
			|						ИЛИ ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода < ЗаписиРасчетаСреднего.БазовыйПериодНачало
			|							И ЗаписиРасчетаСреднего.БазовыйПериодНачало <= ФактическийПериод.ПериодДействия)
			|						И НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодКонец, МЕСЯЦ) >= ФактическийПериод.ПериодДействия)
			|				И ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода <= ФактическийПериод.ПериодДействияКонец
			|				И ЗаписиРасчетаСреднего.ДатаОкончанияРасчетногоПериода >= ФактическийПериод.ПериодДействияНачало
			|
			|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК БазовыеВидыРасчета
			|			ПО ЗаписиРасчетаСреднего.ВидРасчета = БазовыеВидыРасчета.Ссылка
			|				И (ФактическийПериод.ВидРасчета = БазовыеВидыРасчета.ВидРасчета)
			|
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
			|			ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ОсновнойГрафикРаботыПредприятия)
			|				И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ ФактическийПериод.ПериодДействияНачало И ФактическийПериод.ПериодДействияКонец)
			|				И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &ПоЧасам)
			|
			|			ЛЕВОЕ СОЕДИНЕНИЕ (" + НормаПоПроизвКалендарюТекст + ") КАК НормаПоПроизвКалендарю
			|			ПО (НормаПоПроизвКалендарю.МесяцПериода = ФактическийПериод.ПериодДействия)) КАК ОтработанноеВремя
			|
			|СГРУППИРОВАТЬ ПО
			|	ОтработанноеВремя.НомерСтроки,
			|	ОтработанноеВремя.НормаДнейПоПятидневкеПроизвКалендарь
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки
			|";			
			
		КонецЕсли; // Если ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка = 
			
	КонецЕсли; // Если НеобходимРасчетПоКалендарнымДням Тогда
	
	Заработок = Новый Массив();
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБезИндексации);
	Запрос.УстановитьПараметр("Заработок", Заработок);
	
	ПоФиксПремиям = Новый Массив();
	ПоФиксПремиям.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
	ПоФиксПремиям.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБезИндексации);
	
	СписокСпособов = Новый Массив();
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения);
	Запрос.УстановитьПараметр("парамНеОтпуск", СписокСпособов);
	
	Запрос.УстановитьПараметр("ФиксПремии", ПоФиксПремиям);
	Запрос.УстановитьПараметр("ПоЗаработкуОтпуск", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск);
	Запрос.УстановитьПараметр("парамДатаС", НачалоМесяца(ДатаНачалаРасчетаСреднего));
	Запрос.УстановитьПараметр("парамДатаПо", КонецМесяца(ДатаОкончанияРасчетаСреднего));
	Запрос.УстановитьПараметр("парамПоКалендарным", Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	Запрос.УстановитьПараметр("парамПоДням", Перечисления.ВидыУчетаВремени.ПоДням);
	
	СоответствиеФиксПремий = Новый Соответствие;
	СоответствиеФиксПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям, Истина);
	СоответствиеФиксПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБезИндексации, Истина);
	
	СоответствиеПолностьюУчитываемыхПремий = Новый Соответствие;
	СоответствиеПолностьюУчитываемыхПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям, Истина);
	СоответствиеПолностьюУчитываемыхПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБезИндексации, Истина);
	
	СоответствиеПремий = Новый Соответствие;
	СоответствиеПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям, Истина);
	СоответствиеПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБезИндексации, Истина);
	СоответствиеПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям, Истина);
	СоответствиеПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБезИндексации, Истина);

	
	ВыборкаОтработанноеВремя = Запрос.Выполнить().Выбрать();
	
	// заполним результаты в наборе записей	
	СтруктураПоиска = Новый Структура("НомерСтроки");
	ВГраница = НаборЗаписей.Количество() - 1;
	ЕстьПремии = Ложь;
	Для Индекс = 0 По ВГраница Цикл
		СтрокаДвижений = НаборЗаписей[Индекс];
		
		СтруктураПоиска.НомерСтроки = СтрокаДвижений.НомерСтроки;
		
		Если ВыборкаОтработанноеВремя.НайтиСледующий(СтруктураПоиска) Тогда
			СтрокаДвижений.ОтработаноДней 				= ВыборкаОтработанноеВремя.ОтработаноДней;
			СтрокаДвижений.ОтработаноЧасов 				= ВыборкаОтработанноеВремя.ОтработаноЧасов;
				
			Если НеобходимРасчетПоКалендарнымДням Тогда
				СтрокаДвижений.НормаЧасов	 				= ВыборкаОтработанноеВремя.НормаЧасов;
				СтрокаДвижений.КалендарныхДней 				= ВыборкаОтработанноеВремя.КалендарныхДней;
			КонецЕсли;
		КонецЕсли;

		ПерваяЗапись = Истина;
		Пока ВыборкаБазы.НайтиСледующий(СтруктураПоиска) Цикл
			Если НЕ ПерваяЗапись Тогда
				// вводим новые строки набора записей
				ДопСтрокаДвижений = НаборЗаписей.Добавить();
				
				ДопСтрокаДвижений.ПериодРегистрации = СтрокаДвижений.ПериодРегистрации;
				ДопСтрокаДвижений.ВидРасчета 		= СтрокаДвижений.ВидРасчета;
				ДопСтрокаДвижений.Регистратор 		= СтрокаДвижений.Регистратор;
				ДопСтрокаДвижений.Активность 		= Ложь;
				
				// измерения
				ДопСтрокаДвижений.Физлицо 		= СтрокаДвижений.Физлицо;
				ДопСтрокаДвижений.Организация	= СтрокаДвижений.Организация;
				ДопСтрокаДвижений.Сотрудник		= СтрокаДвижений.Сотрудник;
				
				// свойства
				ДопСтрокаДвижений.БазовыйПериодНачало 		 	 = СтрокаДвижений.БазовыйПериодНачало;
				ДопСтрокаДвижений.БазовыйПериодКонец 		 	 = СтрокаДвижений.БазовыйПериодКонец;
				
				// реквизиты
				ДопСтрокаДвижений.КоэффициентИндексации 		 = СтрокаДвижений.КоэффициентИндексации;
				ДопСтрокаДвижений.ДатаНачалаРасчетногоПериода 	 = СтрокаДвижений.ДатаНачалаРасчетногоПериода;
				ДопСтрокаДвижений.ДатаОкончанияРасчетногоПериода = СтрокаДвижений.ДатаОкончанияРасчетногоПериода;
				ДопСтрокаДвижений.СпособРасчета 				 = СтрокаДвижений.СпособРасчета;
				ДопСтрокаДвижений.ПериодРасчетаСреднегоЗаработка = СтрокаДвижений.ПериодРасчетаСреднегоЗаработка;
				
				СтрокаДвижений = ДопСтрокаДвижений;
				
			КонецЕсли;
			
				
			Если ВыборкаБазы.ПериодПремииВМесяцах > 1 Тогда
                Если (ВыборкаБазы.ОтработаноДнейПоПятидневке > 0 ИЛИ (СоответствиеПолностьюУчитываемыхПремий[СтрокаДвижений.ВидРасчета] <> Неопределено И ВыборкаБазы.ОтработаноДнейПоПятидневке <> 0))
                    И ВыборкаБазы.ДатаНачалаПериодаПремии >= СтрокаДвижений.ДатаНачалаРасчетногоПериода Тогда
					СтрокаДвижений.Результат					= ВыборкаБазы.РезультатБаза / ВыборкаБазы.ПериодПремииВМесяцах;
				КонецЕсли;
			ИначеЕсли ВыборкаБазы.ПериодПремииВМесяцах = 1 И ВыборкаБазы.ЧислоМесяцев > 1 Тогда
				Если ВыборкаБазы.ОтработаноДнейПоПятидневке > 0 И ВыборкаБазы.ДатаНачалаПериодаПремии >= СтрокаДвижений.ДатаНачалаРасчетногоПериода Тогда
					СтрокаДвижений.Результат					= ВыборкаБазы.РезультатБаза;
				КонецЕсли;
			ИначеЕсли ВыборкаБазы.ПериодПремииВМесяцах = 1 ИЛИ ВыборкаБазы.ЧислоМесяцев = 1 Тогда
				СтрокаДвижений.Результат 					= ВыборкаБазы.РезультатБаза;
			Иначе 
				СтрокаДвижений.Результат 					= 0;
			КонецЕсли;
			
			СтрокаДвижений.Размер							= ВыборкаБазы.РезультатБаза;
			СтрокаДвижений.ЧислоМесяцев 					= ВыборкаБазы.ЧислоМесяцев;
			СтрокаДвижений.ПериодРасчетаСреднегоЗаработка 	= ВыборкаБазы.ПериодРасчетаСреднегоЗаработка;
			СтрокаДвижений.ДатаНачалаПериодаПремии		 	= ВыборкаБазы.ДатаНачалаПериодаПремии;
			СтрокаДвижений.ДатаОкончанияПериодаПремии		= ВыборкаБазы.ДатаОкончанияПериодаПремии;
			
			Если СоответствиеПремий[СтрокаДвижений.ВидРасчета] <> Неопределено Тогда
				
				Если СоответствиеФиксПремий[СтрокаДвижений.ВидРасчета] <> Неопределено Тогда
					// для "премий фиксированной суммой" надо учитывать отработанное время
					СтрокаДвижений.ОтработаноПоПятидневке 		= ВыборкаБазы.ОтработаноДнейПоПятидневке;
					СтрокаДвижений.НормаПоПятидневке 			= ВыборкаБазы.НормаДнейПоПятидневкеПроизвКалендарь;
				КонецЕсли;
									
			ИначеЕсли НЕ ПерваяЗапись Тогда

				СтрокаДвижений.ОтработаноДней 				= ВыборкаОтработанноеВремя.ОтработаноДней;
				СтрокаДвижений.ОтработаноЧасов 				= ВыборкаОтработанноеВремя.ОтработаноЧасов;
				
				Если НеобходимРасчетПоКалендарнымДням Тогда
					СтрокаДвижений.НормаЧасов	 				= ВыборкаОтработанноеВремя.НормаЧасов;
					СтрокаДвижений.КалендарныхДней 				= ВыборкаОтработанноеВремя.КалендарныхДней;
				КонецЕсли;
					
			КонецЕсли;
			
			// разделим суммы премий по месяцам, за которые начислены премии
			Если ЗначениеЗаполнено(СтрокаДвижений.ДатаНачалаПериодаПремии)
					И ЗначениеЗаполнено(СтрокаДвижений.ДатаОкончанияПериодаПремии) Тогда
				ЕстьПремии = Истина;
				
				Если НачалоМесяца(СтрокаДвижений.ДатаНачалаПериодаПремии) <> НачалоМесяца(СтрокаДвижений.ДатаОкончанияПериодаПремии) Тогда
				
					ПериодПремииВМесяцах = Месяц(СтрокаДвижений.ДатаОкончанияПериодаПремии) + 12 * Год(СтрокаДвижений.ДатаОкончанияПериодаПремии) - 
											Месяц(СтрокаДвижений.ДатаНачалаПериодаПремии) - 12 * Год(СтрокаДвижений.ДатаНачалаПериодаПремии) + 1;
					
					ПервыйМесяцПремииВРасчетномПериоде	 = Макс(СтрокаДвижений.ДатаНачалаПериодаПремии, СтрокаДвижений.ДатаНачалаРасчетногоПериода);
					ПоследнийМесяцПремииВРасчетномПериоде= Мин(СтрокаДвижений.ДатаОкончанияПериодаПремии, СтрокаДвижений.ДатаОкончанияРасчетногоПериода);
											
					МесяцевПериодаПремииВРасчетномПериоде = Месяц(ПоследнийМесяцПремииВРасчетномПериоде) + 12 * Год(ПоследнийМесяцПремииВРасчетномПериоде) - 
																Месяц(ПервыйМесяцПремииВРасчетномПериоде) - 12 * Год(ПервыйМесяцПремииВРасчетномПериоде) + 1;
											
					ТекущийМесяц = СтрокаДвижений.ДатаНачалаПериодаПремии;
					ДатаОкончанияПериодаПремии = СтрокаДвижений.ДатаОкончанияПериодаПремии;
					РезультатКРаспределению = СтрокаДвижений.Размер * МесяцевПериодаПремииВРасчетномПериоде / ПериодПремииВМесяцах;
					РезультатРаспределено = 0;
					ПоследняяСтрокаДвижения = Неопределено;
						
					Пока ТекущийМесяц < ДатаОкончанияПериодаПремии Цикл
						
						Если ТекущийМесяц = СтрокаДвижений.ДатаНачалаПериодаПремии Тогда
							// корректируем результат в самой первой строке движения
							ДопСтрокаДвижений = СтрокаДвижений;
						Иначе
							// добавляем новую строку
							ДопСтрокаДвижений = НаборЗаписей.Добавить();
							ЗаполнитьЗначенияСвойств(ДопСтрокаДвижений, СтрокаДвижений);
						КонецЕсли;
						
						Если ТекущийМесяц >= ПервыйМесяцПремииВРасчетномПериоде И ТекущийМесяц <= ПоследнийМесяцПремииВРасчетномПериоде Тогда
							ДопСтрокаДвижений.Результат = РезультатКРаспределению / МесяцевПериодаПремииВРасчетномПериоде;
							ПоследняяСтрокаДвижений = ДопСтрокаДвижений;
						Иначе
							// этот месяц из периода премии не попадает в расчетный период
							ДопСтрокаДвижений.Результат = 0;
						КонецЕсли;
						ДопСтрокаДвижений.ДатаНачалаПериодаПремии = ТекущийМесяц;
						ДопСтрокаДвижений.ДатаОкончанияПериодаПремии = КонецМесяца(ТекущийМесяц);
						
						РезультатРаспределено = РезультатРаспределено + ДопСтрокаДвижений.Результат;
					
						ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
						
					КонецЦикла;
					
					// ошибки округления на последнюю запись
					Если ПоследняяСтрокаДвижения <> Неопределено Тогда
						ПоследняяСтрокаДвижения.Результат = ПоследняяСтрокаДвижения.Результат + РезультатКРаспределению - РезультатРаспределено;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;	
			
			ПерваяЗапись = Ложь;			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЕстьПремии Тогда
	
		//Запишем результат
		НаборЗаписей.Записать();
	
		// для премий определим периоды индексации заработка по каждому месяцу, за который начислена премия
		Если ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка = Перечисления.ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка.ПоФактическиОтработанномуВремени Тогда
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	РасчетСреднегоЗаработка.Сотрудник КАК Сотрудник,
			|	РасчетСреднегоЗаработка.Организация КАК Организация,
			|	МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период,
			|	РасчетСреднегоЗаработка.БазовыйПериодНачало КАК БазовыйПериодНачало,
			|	РасчетСреднегоЗаработка.БазовыйПериодКонец КАК БазовыйПериодКонец
			|ПОМЕСТИТЬ ВТ_ПериодыГрафиковРаботы
			|ИЗ
			|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|		ПО РасчетСреднегоЗаработка.Сотрудник = РаботникиОрганизаций.Сотрудник
			|			И РасчетСреднегоЗаработка.Организация = РаботникиОрганизаций.Организация
			|			И РасчетСреднегоЗаработка.БазовыйПериодКонец >= РаботникиОрганизаций.Период
			|ГДЕ
			|	РасчетСреднегоЗаработка.ДатаНачалаПериодаПремии <> &ПустаяДата
			|	И РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
			|СГРУППИРОВАТЬ ПО
			|	РасчетСреднегоЗаработка.Организация,
			|	РасчетСреднегоЗаработка.Сотрудник,
			|	РасчетСреднегоЗаработка.БазовыйПериодНачало,
			|	РасчетСреднегоЗаработка.БазовыйПериодКонец
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПериодыГрафиковРаботы.Сотрудник КАК Сотрудник,
			|	ПериодыГрафиковРаботы.Организация КАК Организация,
			|	ПериодыГрафиковРаботы.Период КАК Период,
			|	РаботникиОрганизаций.ГрафикРаботы КАК ГрафикРаботы,
			|	ПериодыГрафиковРаботы.БазовыйПериодНачало КАК БазовыйПериодНачало,
			|	ПериодыГрафиковРаботы.БазовыйПериодКонец КАК БазовыйПериодКонец
			|ПОМЕСТИТЬ ВТ_ГрафикиРаботы
			|ИЗ
			|	ВТ_ПериодыГрафиковРаботы КАК ПериодыГрафиковРаботы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|		ПО ПериодыГрафиковРаботы.Сотрудник = РаботникиОрганизаций.Сотрудник
			|			И ПериодыГрафиковРаботы.Организация = РаботникиОрганизаций.Организация
			|			И ПериодыГрафиковРаботы.Период = РаботникиОрганизаций.Период
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ГрафикиРаботы.Сотрудник КАК Сотрудник,
			|	ГрафикиРаботы.Организация КАК Организация,
			|	ГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы,
			|	РасчетСреднегоЗаработка.НомерСтроки КАК НомерСтроки,
			|	РасчетСреднегоЗаработка.ДатаНачалаПериодаПремии КАК ДатаНачалаПериодаПремии,
			|	РасчетСреднегоЗаработка.ДатаОкончанияПериодаПремии КАК ДатаОкончанияПериодаПремии
			|ПОМЕСТИТЬ ВТ_ГрафикиРаботПоПериодамПремий
			|ИЗ
			|	ВТ_ГрафикиРаботы КАК ГрафикиРаботы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|		ПО ГрафикиРаботы.Сотрудник = РасчетСреднегоЗаработка.Сотрудник
			|			И ГрафикиРаботы.Организация = РасчетСреднегоЗаработка.Организация
			|			И ГрафикиРаботы.БазовыйПериодНачало = РасчетСреднегоЗаработка.БазовыйПериодНачало
			|			И ГрафикиРаботы.БазовыйПериодКонец = РасчетСреднегоЗаработка.БазовыйПериодКонец
			|ГДЕ
			|	РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
			|	И РасчетСреднегоЗаработка.ДатаНачалаПериодаПремии <> &ПустаяДата
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КоэффициентыИндексации.Сотрудник КАК Сотрудник,
			|	КоэффициентыИндексации.Организация КАК Организация,
			|	КоэффициентыИндексации.ДатаИндексации КАК ДатаИндексации,
			|	КоэффициентыИндексации.КоэффициентИндексации КАК КоэффициентИндексации,
			|	ГрафикиРаботПоПериодамПремий.ГрафикРаботы КАК ГрафикРаботы
			|ПОМЕСТИТЬ ВТ_ПериодыИндексацииЗаработка
			|ИЗ
			|	" + КоэффициентыИндексацииЗаработкаТекст + " КАК КоэффициентыИндексации
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГрафикиРаботПоПериодамПремий КАК ГрафикиРаботПоПериодамПремий
			|	ПО КоэффициентыИндексации.Сотрудник = ГрафикиРаботПоПериодамПремий.Сотрудник
			|		И КоэффициентыИндексации.Организация = ГрафикиРаботПоПериодамПремий.Организация
			|		И (КоэффициентыИндексации.ДатаИндексации МЕЖДУ ГрафикиРаботПоПериодамПремий.ДатаНачалаПериодаПремии И ГрафикиРаботПоПериодамПремий.ДатаОкончанияПериодаПремии)
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПериодыИндексацииЗаработка.Сотрудник,
			|	ПериодыИндексацииЗаработка.Организация,
			|	ПериодыИндексацииЗаработка.ДатаИндексации,
			|	ПериодыИндексацииЗаработка.КоэффициентИндексации,
			|	ПериодыИндексацииЗаработка.ГрафикРаботы,
			|	СУММА(ВЫБОР
			|			КОГДА ГрафикиРаботы.ВидУчетаВремени = &ПоДням
			|					И ГрафикиРаботы.Дата >= ПериодыИндексацииЗаработка.ДатаИндексации
			|				ТОГДА ГрафикиРаботы.ОсновноеЗначение
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ДнейПослеИндексации,
			|	СУММА(ВЫБОР
			|			КОГДА ГрафикиРаботы.ВидУчетаВремени = &ПоДням
			|					И ГрафикиРаботы.Дата < ПериодыИндексацииЗаработка.ДатаИндексации
			|				ТОГДА ГрафикиРаботы.ОсновноеЗначение
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ДнейДоИндексации,
			|	СУММА(ВЫБОР
			|			КОГДА ГрафикиРаботы.ВидУчетаВремени = &ПоДням
			|				ТОГДА ГрафикиРаботы.ОсновноеЗначение
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК НормаДней
			|ИЗ
			|	ВТ_ПериодыИндексацииЗаработка КАК ПериодыИндексацииЗаработка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
			|		ПО ПериодыИндексацииЗаработка.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы
			|			И (НАЧАЛОПЕРИОДА(ПериодыИндексацииЗаработка.ДатаИндексации, МЕСЯЦ) = ГрафикиРаботы.Месяц)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПериодыИндексацииЗаработка.Сотрудник,
			|	ПериодыИндексацииЗаработка.Организация,
			|	ПериодыИндексацииЗаработка.ДатаИндексации,
			|	ПериодыИндексацииЗаработка.КоэффициентИндексации,
			|	ПериодыИндексацииЗаработка.ГрафикРаботы
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаИндексации УБЫВ
	       	|";
		Иначе // По основному графику предприятия
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	КоэффициентыИндексацииЗаработка.Сотрудник,
			|	КоэффициентыИндексацииЗаработка.Организация,
			|	КоэффициентыИндексацииЗаработка.ДатаИндексации КАК ДатаИндексации,
			|	КоэффициентыИндексацииЗаработка.КоэффициентИндексации,
			|	СУММА(ВЫБОР
			|			КОГДА ГрафикиРаботы.ВидУчетаВремени = &ПоДням
			|					И ГрафикиРаботы.Дата >= КоэффициентыИндексацииЗаработка.ДатаИндексации
			|				ТОГДА ГрафикиРаботы.ОсновноеЗначение
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ДнейПослеИндексации,
			|	СУММА(ВЫБОР
			|			КОГДА ГрафикиРаботы.ВидУчетаВремени = &ПоДням
			|					И ГрафикиРаботы.Дата < КоэффициентыИндексацииЗаработка.ДатаИндексации
			|				ТОГДА ГрафикиРаботы.ОсновноеЗначение
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ДнейДоИндексации,
			|	СУММА(ВЫБОР
			|			КОГДА ГрафикиРаботы.ВидУчетаВремени = &ПоДням
			|				ТОГДА ГрафикиРаботы.ОсновноеЗначение
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК НормаДней
			|ИЗ
			|	ВТ_КоэффициентыИндексацииЗаработка КАК КоэффициентыИндексацииЗаработка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
			|		ПО (НАЧАЛОПЕРИОДА(КоэффициентыИндексацииЗаработка.ДатаИндексации, МЕСЯЦ) = ГрафикиРаботы.Месяц)
			|ГДЕ
			|	ГрафикиРаботы.ГрафикРаботы = &ОсновнойГрафикРаботыПредприятия
			|
			|СГРУППИРОВАТЬ ПО
			|	КоэффициентыИндексацииЗаработка.Сотрудник,
			|	КоэффициентыИндексацииЗаработка.Организация,
			|	КоэффициентыИндексацииЗаработка.ДатаИндексации,
			|	КоэффициентыИндексацииЗаработка.КоэффициентИндексации
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаИндексации УБЫВ";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ПоДням", Перечисления.ВидыУчетаВремени.ПоДням);
		Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
		МассивИндексируемыхПремий = Новый Массив();
		МассивИндексируемыхПремий.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
		МассивИндексируемыхПремий.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
		
		ВыборкаКоэффициентовИндексацииПремий = Запрос.Выполнить().Выбрать();
		
		// Разделим премии по периодам индексации и расставим коэффициенты		
		Пока ВыборкаКоэффициентовИндексацииПремий.Следующий() Цикл
			СтрокаВыборки = ВыборкаКоэффициентовИндексацииПремий;
			ВГраница = НаборЗаписей.Количество() - 1;
			Для Индекс = 0 По ВГраница Цикл
				СтрокаДвижений = НаборЗаписей[Индекс];
				Если МассивИндексируемыхПремий.Найти(СтрокаДвижений.ВидРасчета) <> Неопределено 
					И ЗначениеЗаполнено(СтрокаДвижений.ДатаНачалаПериодаПремии) И ЗначениеЗаполнено(СтрокаДвижений.ДатаОкончанияПериодаПремии) Тогда
					Если СтрокаВыборки.ДатаИндексации > СтрокаДвижений.ДатаНачалаПериодаПремии И
						СтрокаВыборки.ДатаИндексации < СтрокаДвижений.ДатаОкончанияПериодаПремии Тогда
						
						ДопСтрокаДвижений = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ДопСтрокаДвижений, СтрокаДвижений);
						СтрокаДвижений.КоэффициентИндексации = СтрокаВыборки.КоэффициентИндексации;
						СтрокаДвижений.ДатаОкончанияПериодаПремии = СтрокаВыборки.ДатаИндексации - 86400;
						ДопСтрокаДвижений.ДатаНачалаПериодаПремии = СтрокаВыборки.ДатаИндексации;
						
						Если СтрокаВыборки.ДнейДоИндексации <> 0 или СтрокаВыборки.НормаДней <> 0 Тогда
							СуммаКРаспределению = СтрокаДвижений.Результат;
							СтрокаДвижений.Результат = СуммаКРаспределению * СтрокаВыборки.ДнейДоИндексации / СтрокаВыборки.НормаДней;
							ДопСтрокаДвижений.Результат = СуммаКРаспределению - СтрокаДвижений.Результат;
						Иначе
							ДопСтрокаДвижений.Результат = 0;
						КонецЕсли;
								
					ИначеЕсли СтрокаВыборки.ДатаИндексации > СтрокаДвижений.ДатаНачалаПериодаПремии И
						СтрокаВыборки.ДатаИндексации > СтрокаДвижений.ДатаОкончанияПериодаПремии Тогда
						СтрокаДвижений.КоэффициентИндексации = СтрокаВыборки.КоэффициентИндексации;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
				
	КонецЕсли;
	
	// отсортируем по периодам
	ТЗСреднийЗаработок = НаборЗаписей.Выгрузить();	
	ТЗСреднийЗаработок.Сортировать("Организация, Сотрудник, БазовыйПериодКонец, ВидРасчета, ЧислоМесяцев, ДатаНачалаПериодаПремии");
	
	// для видов расчета среднего заработка БезИндексации установим коэффициент индексации = 1
	Если ИспользоватьПоЗаработкуБезИндексации
			ИЛИ ИспользоватьПоЗаработкуБЛБезИндексации
			ИЛИ ИспользоватьПоЗаработкуОтпускБезИндексации
			ИЛИ ИспользоватьПоПремиямБезИндексации
			ИЛИ ИспользоватьПоФиксПремиямБезИндексации Тогда
			
		Для Каждого СтрокаТЗ Из ТЗСреднийЗаработок Цикл
			Если СтрокаТЗ.ВидРасчета = ПоЗаработкуБезИндексации
					ИЛИ СтрокаТЗ.ВидРасчета = ПоЗаработкуБЛБезИндексации
					ИЛИ СтрокаТЗ.ВидРасчета = ПоЗаработкуОтпускБезИндексации
					ИЛИ СтрокаТЗ.ВидРасчета = ПоПремиямБезИндексации
					ИЛИ СтрокаТЗ.ВидРасчета = ПоФиксПремиямБезИндексации Тогда
				СтрокаТЗ.КоэффициентИндексации = 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	НаборЗаписей.Загрузить(ТЗСреднийЗаработок);
	
	//Запишем результат
	НаборЗаписей.Записать();

КонецПроцедуры

// Возвращает дату начала события для расчета среднего заработка
Функция ПолучитьДатуНачалаСобытия(ИмяРегистра, Регистратор)
	
	ДатаНачалаСобытия = Дата(1, 1, 1);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Основной.ДатаНачалаСобытия
		|ИЗ
		|	РегистрРасчета." + ИмяРегистра + " КАК Основной
		|ГДЕ
		|	Основной.Регистратор = &Регистратор
		|	И Основной.ДатаНачалаСобытия <> ДАТАВРЕМЯ(1, 1, 1)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаНачалаСобытия = Выборка.ДатаНачалаСобытия;
	КонецЕсли;
	
	Возврат ДатаНачалаСобытия;
	
КонецФункции

// Возвращает дату вступления в силу Постановления Правительства РК от 11.07.2006 г. № 657  
// "О  внесении дополнения в постановление Правительства РК от 29.12.2000 г. № 1942 
//	«Об утверждении Инструкции о порядке исчисления средней заработной платы работников»"
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ПолучитьДатуНачалаРасчетаСреднегоЗаработкаСУчетомИндексации() Экспорт

	Возврат	'20060725';              

КонецФункции // ПолучитьДатуНачалаРасчетаСреднегоЗаработкаСУчетомИндексации()

// Возвращает дату вступления в силу Приказа Министра здравоохранения и социального развития 
// Республики Казахстан от 7 июля 2015 года № 567 "Об утверждении Единых правил исчисления средней заработной платы". 
//
Функция ПолучитьДатуИзмененияЕдиныхПравил2015() Экспорт
	
	Возврат	'20150820';
	
КонецФункции

// Возвращает дату вступления в силу Постановления Правительства РК от 29.12.2007 № 1394
// Об утверждении Единых правил исчисления средней заработной платы
//
Функция ПолучитьДатуНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням() Экспорт

	Возврат '20071229';

КонецФункции // ПолучитьДатуНачалаРасчетаТолькоПоРабочимДням()

// Рассчитывает записи из переданного набора записей
//
// Параметры: 
//  ИмяРегистра			 - имя регистра, чьи записи будут рассчитаны
//  НаборЗаписейРегистра - набор записей, которые надо рассчитать
//	НаборЗаписейРасчетСреднего
//	ГоловнаяОрганизация
//	ОбособленноеПодразделение
//	ТабличнаяЧастьДокумента
//  ОднократныйРасчетСреднего - будево. Если Истина, то при расчете выполняется 
//  					однократный расчет среднего в не зависимости от количесвта различных 
//						категорий видов расчета в наборе записей
//
// Возвращаемое значение:
//  Нет.
//
Процедура РассчитатьЗаписиРегистраРасчета(ИмяРегистра, 
												НаборЗаписейРегистра, 
												НаборЗаписейРасчетСреднего = НеОпределено,
												ГоловнаяОрганизация = НеОпределено,
												УчетнаяПолитикаПоПерсоналу = НеОпределено,
												ОбособленноеПодразделение = НеОпределено,
												ТабличнаяЧастьДокумента = НеОпределено,
												ОднократныйРасчетСреднего = Ложь,
												Налогоплательщик = Неопределено,
												МассивИндексыСтрокТабличнойЧасти = Неопределено,
												КомментироватьРасчет = Ложь, ФормаКомментариев = НеОпределено) Экспорт

	Если НаборЗаписейРегистра.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	// здесь предполагаем, что в наборе записей не может быть записей с разными периодами регистрации
	ПериодРегистрации = НаборЗаписейРегистра[0].ПериодРегистрации;
	ТаблицаСтавокИПН  = Неопределено; // первый вызванный расчет "от обратного" сам заполнит себе ставки
	
	Регистратор = НаборЗаписейРегистра.Отбор.Регистратор.Значение;
	ИмяПВР = Метаданные.РегистрыРасчета[ИмяРегистра].ПланВидовРасчета.Имя;
	
	// при расчете начислений "от обратного" необходимо очищать сумму корректировки доходов для корректности расчета
	Если ПериодРегистрации >= '20190101' 
		И (ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций"
		ИЛИ ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций") Тогда
		
		Для Каждого СтрокаНабора Из НаборЗаписейРегистра Цикл
			СтрокаНабора.СуммаВычетовДоходовОтОбратного = 0;		
		КонецЦикла;
		
	КонецЕсли;
	
	СчитатьСреднийЗаработок = Истина;

	Если 	ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" ИЛИ 
			ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций" ИЛИ
			ИмяРегистра = "УправленческиеНачисления" ИЛИ 
			ИмяРегистра = "УдержанияРаботниковОрганизаций" ИЛИ
			ИмяРегистра = "УправленческиеУдержания"	Тогда
		
		// получим массив видов расчета из набора записей
		ТаблицаВидовРасчета = НаборЗаписейРегистра.Выгрузить();
		ТаблицаВидовРасчета.Свернуть("ВидРасчета");
		ВидыРасчетов = ТаблицаВидовРасчета.ВыгрузитьКолонку("ВидРасчета");

		// Получим максимальное число показателей			
		ЗапросНаКоличествоПоказателей = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(НачисленияПоказатели.НомерСтроки),0) КАК КолВоПоказателей
		|ИЗ");
		Если ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" Тогда
			ЗапросНаКоличествоПоказателей.Текст = ЗапросНаКоличествоПоказателей.Текст + "
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК НачисленияПоказатели";
		ИначеЕсли ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций" Тогда 
			ЗапросНаКоличествоПоказателей.Текст = ЗапросНаКоличествоПоказателей.Текст + "
		|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК НачисленияПоказатели";
		ИначеЕсли ИмяРегистра = "УдержанияРаботниковОрганизаций" Тогда 		
			ЗапросНаКоличествоПоказателей.Текст = ЗапросНаКоличествоПоказателей.Текст + "
		|	ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК НачисленияПоказатели";
		ИначеЕсли ИмяРегистра = "УправленческиеНачисления" Тогда 		
			ЗапросНаКоличествоПоказателей.Текст = ЗапросНаКоличествоПоказателей.Текст + "
		|	ПланВидовРасчета.УправленческиеНачисления.Показатели КАК НачисленияПоказатели";
		ИначеЕсли ИмяРегистра = "УправленческиеУдержания" Тогда 		
			ЗапросНаКоличествоПоказателей.Текст = ЗапросНаКоличествоПоказателей.Текст + "
		|	ПланВидовРасчета.УправленческиеУдержания.Показатели КАК НачисленияПоказатели";
		КонецЕсли;
		ВыборкаКоличестваПоказателей = ЗапросНаКоличествоПоказателей.Выполнить().Выбрать();
		ВыборкаКоличестваПоказателей.Следующий();
		КоличествоПоказателей = ВыборкаКоличестваПоказателей.КолВоПоказателей;

		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПВР.КатегорияРасчета,
		|	ВЫБОР КОГДА ПВР.СпособРасчета = &парамПустойСпособРасчета ТОГДА ПВР.Ссылка ИНАЧЕ ПВР.СпособРасчета КОНЕЦ Как СпособРасчета");
		
		Для СчПоказателей = 1 По КоличествоПоказателей Цикл
			Если СчПоказателей = 1 Тогда
				Запрос.Текст = Запрос.Текст + ",";
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "
			|	ВЫБОР
			|		КОГДА ТЧПоказатели.НомерСтроки = " + СчПоказателей + "
			|			ТОГДА 
			|				ВЫБОР
			|					КОГДА ТЧПоказатели.Показатель.Предопределенный ИЛИ ТЧПоказатели.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
			|						ТОГДА ТЧПоказатели.Показатель
			|					ИНАЧЕ NULL
			|				КОНЕЦ				
			|		ИНАЧЕ NULL
			|	КОНЕЦ КАК Показатель" + СчПоказателей + ",
			|	ВЫБОР
			|		КОГДА ТЧПоказатели.НомерСтроки = " + СчПоказателей + "
			|			ТОГДА 
			|				ВЫБОР
			|					КОГДА ТЧПоказатели.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
			|						ТОГДА ТЧПоказатели.Показатель.ВидСтажа
			|					ИНАЧЕ NULL
			|				КОНЕЦ
			|		ИНАЧЕ NULL
			|	КОНЕЦ КАК ВидСтажа" + СчПоказателей + ",
			|	ВЫБОР
			|		КОГДА ТЧПоказатели.НомерСтроки = " + СчПоказателей+ "
			|			ТОГДА 
			|				ВЫБОР
			|					КОГДА ТЧПоказатели.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
			|						ТОГДА ТЧПоказатели.Показатель.ВидСтажа.Код
			|					ИНАЧЕ NULL
			|				КОНЕЦ
			|		ИНАЧЕ NULL
			|	КОНЕЦ КАК ВидСтажаКод" + СчПоказателей;

			Если СчПоказателей<КоличествоПоказателей Тогда
				Запрос.Текст = Запрос.Текст + ","
			КонецЕсли;
		КонецЦикла;

		Запрос.Текст = Запрос.Текст
		
		+ ?(ИмяПВР = "УправленческиеНачисления",
		",
		|	ПВР.ЗачетОтработанногоВремени","")		
		+ ?(ИмяПВР = "ОсновныеНачисленияОрганизаций", 
		",
		|	ПВР.ЗачетНормыВремени,
		|	ПВР.ЗачетОтработанногоВремени,
		|	ПВР.УчетОтработанногоВремени", "") 		
		+ ?(ИмяПВР = "ОсновныеНачисленияОрганизаций" ИЛИ ИмяПВР = "ДополнительныеНачисленияОрганизаций",
		",
		|	ПВР.ОтОбратного,
		|	ЕСТЬNULL(КомпенсируемыеВидыУдержаний.КомпенсироватьИПН, ЛОЖЬ) КАК ОтОбратногоКомпенсироватьИПН,
		|	ЕСТЬNULL(КомпенсируемыеВидыУдержаний.КомпенсироватьОПВ, ЛОЖЬ) КАК ОтОбратногоКомпенсироватьОПВ,
		|	ЕСТЬNULL(КомпенсируемыеВидыУдержаний.КомпенсироватьВОСМС, ЛОЖЬ) КАК ОтОбратногоКомпенсироватьВОСМС,
		|	ЕСТЬNULL(КомпенсируемыеВидыУдержаний.КомпенсироватьУдержания, ЛОЖЬ) КАК ОтОбратногоКомпенсироватьУдержания","") 
		+ "
		|ИЗ
		|	ПланВидовРасчета."+ИмяПВР+" КАК ПВР";
		
		Если КоличествоПоказателей > 0 Тогда
			Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ  ПланВидовРасчета." + ИмяПВР + ".Показатели КАК ТЧПоказатели
		|	ПО ПВР.Ссылка = ТЧПоказатели.Ссылка
		|		И (ТЧПоказатели.Показатель.Предопределенный
		|			ИЛИ ТЧПоказатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Стаж))";
		КонецЕсли;

		Запрос.Текст = Запрос.Текст +
		?(ИмяПВР = "ОсновныеНачисленияОрганизаций" ИЛИ ИмяПВР = "ДополнительныеНачисленияОрганизаций",
		"	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							КомпенсируемыеВидыУдержаний.Ссылка КАК ВидРасчета,
		|							ВЫБОР
		|								КОГДА СУММА(ВЫБОР
		|												КОГДА КомпенсируемыеВидыУдержаний.ВидРасчета = &парамНалогиСборыОтчисленияИПН ТОГДА 1
		|												ИНАЧЕ 0 
		|								  			КОНЕЦ) <> 0 ТОГДА ИСТИНА
		|								ИНАЧЕ ЛОЖЬ
		|							КОНЕЦ КАК КомпенсироватьИПН,
		|							ВЫБОР
		|								КОГДА СУММА(ВЫБОР		
		|												КОГДА КомпенсируемыеВидыУдержаний.ВидРасчета = &парамНалогиСборыОтчисленияОПВ ТОГДА 1
		|												ИНАЧЕ 0 
		|								  			КОНЕЦ) <> 0 ТОГДА ИСТИНА
		|								ИНАЧЕ ЛОЖЬ
		|							КОНЕЦ КАК КомпенсироватьОПВ,
		|							ВЫБОР
		|								КОГДА СУММА(ВЫБОР		
		|												КОГДА КомпенсируемыеВидыУдержаний.ВидРасчета = &парамНалогиСборыОтчисленияВОСМС ТОГДА 1
		|												ИНАЧЕ 0 
		|								  			КОНЕЦ) <> 0 ТОГДА ИСТИНА
		|								ИНАЧЕ ЛОЖЬ
		|							КОНЕЦ КАК КомпенсироватьВОСМС,
		|							ВЫБОР
		|								КОГДА СУММА(ВЫБОР
		|												КОГДА КомпенсируемыеВидыУдержаний.ВидРасчета <> &парамНалогиСборыОтчисленияИПН
		|										  				И КомпенсируемыеВидыУдержаний.ВидРасчета <> &парамНалогиСборыОтчисленияОПВ 
		|														И КомпенсируемыеВидыУдержаний.ВидРасчета <> &парамНалогиСборыОтчисленияВОСМС ТОГДА 1
		|												ИНАЧЕ 0 
		|								  			КОНЕЦ) <> 0 ТОГДА ИСТИНА
		|								ИНАЧЕ ЛОЖЬ
		|							КОНЕЦ КАК КомпенсироватьУдержания
		|					 ИЗ
		|							ПланВидовРасчета." + ИмяПВР + ".КомпенсируемыеРасчетомОтОбратногоВидыУдержаний КАК КомпенсируемыеВидыУдержаний
		|					 СГРУППИРОВАТЬ ПО
		|		                     КомпенсируемыеВидыУдержаний.Ссылка) КАК КомпенсируемыеВидыУдержаний
		|		ПО ПВР.Ссылка = КомпенсируемыеВидыУдержаний.ВидРасчета","") + "
		|
		|ГДЕ 
		|	ПВР.Ссылка В(&парамВидыРасчетов)
		|УПОРЯДОЧИТЬ ПО
		|	ПВР.КатегорияРасчета.Порядок
		|
		|ИТОГИ ПО ПВР.КатегорияРасчета";

		Запрос.УстановитьПараметр("парамВидыРасчетов", 			   ВидыРасчетов);
		Запрос.УстановитьПараметр("парамПустойСпособРасчета", 	   Перечисления.СпособыРасчетаОплатыТруда.ПустаяСсылка());
		Запрос.УстановитьПараметр("парамНалогиСборыОтчисленияИПН", Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог);
		Запрос.УстановитьПараметр("парамНалогиСборыОтчисленияОПВ", Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы);
		Запрос.УстановитьПараметр("парамНалогиСборыОтчисленияВОСМС", Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование);
		
		// получаем список категороий и способов расчета
		ВыборкаКатегорий = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		// первая запись набора делается с пересчетом Фактического периода действия
		ТолькоЗапись = Ложь;
		
		Пока ВыборкаКатегорий.Следующий() Цикл
			
			// Получим структуру необходимых данных для расчетов текущей категории
			МассивСпособовРасчета = Новый Массив;// Массив способов расчета текущий категории
			ТаблицаПоказателей = Новый ТаблицаЗначений;// Таблица видов показателей схем мотивации
			ТаблицаПоказателей.Колонки.Добавить("Показатель");
			ТаблицаПоказателей.Колонки.Добавить("ВидСтажа");
			ТаблицаПоказателей.Колонки.Добавить("ВидСтажаКод");

			НормаВремени = Ложь;// Признак необходимости получения нормы времени для видов расчета
			ОтработаноВремени = Ложь;// Признак необходимости получения отработанного времени для видов расчета
			РасчетОтОбратного = Ложь; // Признак необходимости выбора данных для расчета от обратного
			КомпенсироватьИПН = Ложь; // Признак необходимости выбора данных для расчета компенсируемого расчетом от обратного ИПН
			КомпенсироватьОПВ = Ложь; // Признак необходимости выбора данных для расчета погашаемых расчетом от обратного ОПВ
			КомпенсироватьВОСМС = Ложь; // Признак необходимости выбора данных для расчета погашаемых расчетом от обратного ВОСМС
			КомпенсироватьУдержания = Ложь; // Признак необходимости выбора данных для расчета погашаемых расчетом от обратного прочих удержаний
			НакопленныеДанныеПоДокументуОснованию = Ложь; 
			ПределПоДокументуОснованию			  = Ложь;
			
			ВложеннаяВыборка = ВыборкаКатегорий.Выбрать();
			Пока ВложеннаяВыборка.Следующий() Цикл
				МассивСпособовРасчета.Добавить(ВложеннаяВыборка.СпособРасчета);

                Для Сч = 1 По КоличествоПоказателей Цикл
					Если ВложеннаяВыборка["Показатель"+Сч] <> Null Тогда
						СтрокаПоказателя = ТаблицаПоказателей.Добавить();
						СтрокаПоказателя.Показатель		= ВложеннаяВыборка["Показатель"+Сч];
						СтрокаПоказателя.ВидСтажа		= ВложеннаяВыборка["ВидСтажа"+Сч];
						СтрокаПоказателя.ВидСтажаКод	= ВложеннаяВыборка["ВидСтажаКод"+Сч];
					КонецЕсли;
				КонецЦикла;
				
				Если ИмяПВР = "ОсновныеНачисленияОрганизаций" Тогда
					НормаВремени = НормаВремени ИЛИ ВложеннаяВыборка.ЗачетНормыВремени;
					ОтработаноВремени = ОтработаноВремени ИЛИ ВложеннаяВыборка.ЗачетОтработанногоВремени ИЛИ ВложеннаяВыборка.УчетОтработанногоВремени;
				КонецЕсли; 
				
				Если ИмяПВР = "ОсновныеНачисленияОрганизаций"
					 Или ИмяПВР = "ДополнительныеНачисленияОрганизаций" Тогда
					 
					РасчетОтОбратного = РасчетОтОбратного ИЛИ ВложеннаяВыборка.ОтОбратного;
					КомпенсироватьИПН = КомпенсироватьИПН ИЛИ ВложеннаяВыборка.ОтОбратногоКомпенсироватьИПН;
					КомпенсироватьОПВ = КомпенсироватьОПВ ИЛИ ВложеннаяВыборка.ОтОбратногоКомпенсироватьОПВ;
					КомпенсироватьВОСМС = КомпенсироватьВОСМС ИЛИ ВложеннаяВыборка.ОтОбратногоКомпенсироватьВОСМС;
					КомпенсироватьУдержания = КомпенсироватьУдержания ИЛИ ВложеннаяВыборка.ОтОбратногоКомпенсироватьУдержания;
					
				КонецЕсли;
				
				Если ИмяПВР = "УправленческиеНачисления" Тогда
					ОтработаноВремени = ОтработаноВремени ИЛИ ВложеннаяВыборка.ЗачетОтработанногоВремени;
				КонецЕсли;
				
				Если ИмяПВР = "УдержанияОрганизаций" 
					 И ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю Тогда
					НакопленныеДанныеПоДокументуОснованию = Истина;
					ПределПоДокументуОснованию			  = Истина;
				КонецЕсли; 
				
			КонецЦикла;
			
			НеобходимыеДанные = ПолучитьСтруктуруНеобходимыхДанных(МассивСпособовРасчета, ТаблицаПоказателей, ИмяПВР);
			НеобходимыеДанные.НормаВремени = НеобходимыеДанные.НормаВремени ИЛИ НормаВремени;
			НеобходимыеДанные.ОтработаноВремени = НеобходимыеДанные.ОтработаноВремени ИЛИ ОтработаноВремени;
			
			НеобходимыеДанные.РасчетОтОбратного = НеобходимыеДанные.РасчетОтОбратного ИЛИ РасчетОтОбратного;
			НеобходимыеДанные.ОтОбратногоКомпенсироватьИПН = НеобходимыеДанные.ОтОбратногоКомпенсироватьИПН ИЛИ КомпенсироватьИПН;
			НеобходимыеДанные.ОтОбратногоКомпенсироватьОПВ = НеобходимыеДанные.ОтОбратногоКомпенсироватьОПВ ИЛИ КомпенсироватьОПВ;
			НеобходимыеДанные.ОтОбратногоКомпенсироватьВОСМС = НеобходимыеДанные.ОтОбратногоКомпенсироватьВОСМС ИЛИ КомпенсироватьВОСМС;
			НеобходимыеДанные.ОтОбратногоУчитыватьОПВ = КомпенсироватьИПН ИЛИ КомпенсироватьОПВ;
			НеобходимыеДанные.ОтОбратногоУчитыватьВОСМС = КомпенсироватьИПН ИЛИ КомпенсироватьВОСМС;
			НеобходимыеДанные.ОтОбратногоКомпенсироватьУдержания = НеобходимыеДанные.ОтОбратногоКомпенсироватьУдержания ИЛИ КомпенсироватьУдержания;
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию ИЛИ НакопленныеДанныеПоДокументуОснованию;
			НеобходимыеДанные.ПределПоДокументуОснованию = НеобходимыеДанные.ПределПоДокументуОснованию ИЛИ ПределПоДокументуОснованию;
			
			// записываем набор перед расчетом каждой категории начислений
			НаборЗаписейРегистра.Записать(Истина, ТолькоЗапись);
			ТолькоЗапись = Истина;
	
			// если нужны данные для расчета среднего заработка
			Если СчитатьСреднийЗаработок И НеобходимыеДанные.СреднийЗаработок И (НаборЗаписейРасчетСреднего <> Неопределено) Тогда
				УчетнаяПолитика = УчетнаяПолитикаПоПерсоналу[ГоловнаяОрганизация];
				СформироватьИЗаписатьДанныеРасчетаСреднего(ИмяРегистра, Регистратор, НаборЗаписейРасчетСреднего, УчетнаяПолитика);
				Если ОднократныйРасчетСреднего Тогда
					СчитатьСреднийЗаработок = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ИсходныеДанные = ПроведениеРасчетовПолныеПрава.ПолучитьДанныеДляРасчета(ИмяРегистра, ВыборкаКатегорий.КатегорияРасчета, НеобходимыеДанные, Регистратор, ГоловнаяОрганизация, ОбособленноеПодразделение, УчетнаяПолитикаПоПерсоналу, ПериодРегистрации, , , Налогоплательщик, КомментироватьРасчет).Выбрать();
			
			РассчитатьЗаписиНабора(ИсходныеДанные, НаборЗаписейРегистра, ГоловнаяОрганизация, ОбособленноеПодразделение, ТабличнаяЧастьДокумента, ТаблицаСтавокИПН, МассивИндексыСтрокТабличнойЧасти, НеобходимыеДанные.РасчетОтОбратного, КомментироватьРасчет, ФормаКомментариев, Налогоплательщик);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // РассчитатьЗаписиРегистраРасчета

// Перерассчитывает записи из переданного набора записей
//
// Параметры: 
//  ИмяРегистра			 - имя регистра, чьи записи будут рассчитаны
//  НаборЗаписейРегистра - набор записей, которые надо рассчитать
//	Физлица - массив физлиц для перерасчета
//	НаборЗаписейРасчетСреднего - набор записей расчета среднего заработка
//	Организация - организацция
//	ТабличнаяЧастьДокумента - табличная часть документа по которой ведется перерасчет
//
// Возвращаемое значение:
//  Нет.
//
Процедура ПереРассчитатьЗаписиРегистраРасчета(ИмяРегистра, 
												НаборЗаписейРегистра, 
												Сотрудники = Неопределено, 
												НаборЗаписейРасчетСреднего = Неопределено,
												ГоловнаяОрганизация = Неопределено,
												УчетнаяПолитикаПоПерсоналу = Неопределено,
												ОбособленноеПодразделение = Неопределено,
												ТабличнаяЧастьДокумента = Неопределено,
												ОднократныйРасчетСреднего = Ложь,
												Налогоплательщик = Неопределено) Экспорт

	Если НаборЗаписейРегистра.Количество() = 0	тогда
		Возврат;
	КонецЕсли;
	// здесь предполагаем, что в наборе записей не может быть записей с разными периодами регистрации
	ПериодРегистрации = НаборЗаписейРегистра[0].ПериодРегистрации;
	ТаблицаСтавокИПН  = Неопределено; // первый вызванный расчет "от обратного" сам заполнит себе ставки
	
	Регистратор = НаборЗаписейРегистра.Отбор.Регистратор.Значение;
	ИмяПВР = Метаданные.РегистрыРасчета[ИмяРегистра].ПланВидовРасчета.Имя;

	СчитатьСреднийЗаработок = Истина;
	
	// таблица СотрудникиДляПерерасчета
	// Список физлиц по которым необходимо выполнить перерасчет
	// Поля:
	//		Сотрудники
	// Описание:
	// Получает список неповторяющихся сотрудников по которым есть записи
	// перерасчета в одной из таблиц перерасчета - по основным или дополнительным начислениям
	//
	СотрудникиДляПерерасчетаТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Перерасчет.Сотрудник
	|ИЗ
	|	(ВЫБРАТЬ
	|		Перерасчет.Сотрудник КАК Сотрудник
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
	|	ГДЕ
	|		Перерасчет.ОбъектПерерасчета = &парамРегистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Перерасчет.Сотрудник
	|	ИЗ
	|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
	|	ГДЕ
	|		Перерасчет.ОбъектПерерасчета = &парамРегистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаполнениеПлановыхНачислений.Сотрудник
	|	ИЗ
	|		РегистрСведений.ЗаполнениеПлановыхНачислений КАК ЗаполнениеПлановыхНачислений
	|	ГДЕ
	|		ЗаполнениеПлановыхНачислений.ОбъектЗаполнения = &парамРегистратор) КАК Перерасчет";
	
	Если ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" ИЛИ 
			ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций" ИЛИ
			ИмяРегистра = "УправленческиеНачисления" ИЛИ 
			ИмяРегистра = "УдержанияРаботниковОрганизаций" ИЛИ
			ИмяРегистра = "УправленческиеУдержания"	Тогда
			
		// Получим максимальное число показателей			
		ЗапросНаКоличествоПоказателей = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(НачисленияПоказатели.НомерСтроки),0) КАК КолВоПоказателей
		|ИЗ");
		Если ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" Тогда
			ЗапросНаКоличествоПоказателей.Текст = ЗапросНаКоличествоПоказателей.Текст + "
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК НачисленияПоказатели";
		ИначеЕсли ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций" Тогда 
			ЗапросНаКоличествоПоказателей.Текст = ЗапросНаКоличествоПоказателей.Текст + "
		|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК НачисленияПоказатели";
		ИначеЕсли ИмяРегистра = "УдержанияРаботниковОрганизаций" Тогда 		
			ЗапросНаКоличествоПоказателей.Текст = ЗапросНаКоличествоПоказателей.Текст + "
		|	ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК НачисленияПоказатели";
		ИначеЕсли ИмяРегистра = "УправленческиеНачисления" Тогда 		
			ЗапросНаКоличествоПоказателей.Текст = ЗапросНаКоличествоПоказателей.Текст + "
		|	ПланВидовРасчета.УправленческиеНачисления.Показатели КАК НачисленияПоказатели";
		ИначеЕсли ИмяРегистра = "УправленческиеУдержания" Тогда 		
			ЗапросНаКоличествоПоказателей.Текст = ЗапросНаКоличествоПоказателей.Текст + "
		|	ПланВидовРасчета.УправленческиеУдержания.Показатели КАК НачисленияПоказатели";
		КонецЕсли;
		ВыборкаКоличестваПоказателей = ЗапросНаКоличествоПоказателей.Выполнить().Выбрать();
		ВыборкаКоличестваПоказателей.Следующий();
		КоличествоПоказателей = ВыборкаКоличестваПоказателей.КолВоПоказателей;

        // соответствие категории начисления и массива сособов расчета
		// для записей, которые будут перерассчитываться
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|   " + ИмяРегистра + ".ВидРасчета.КатегорияРасчета КАК КатегорияРасчета,
		|	ВЫБОР КОГДА " + ИмяРегистра + ".ВидРасчета.СпособРасчета = &парамПустойСпособРасчета ТОГДА "+ИмяРегистра+".ВидРасчета ИНАЧЕ " + ИмяРегистра + ".ВидРасчета.СпособРасчета КОНЕЦ Как СпособРасчета";
		
		Для СчПоказателей = 1 По КоличествоПоказателей Цикл
			Если СчПоказателей = 1 Тогда
				Запрос.Текст = Запрос.Текст + ",";
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "
			|	ВЫБОР
			|		КОГДА ТЧПоказатели.НомерСтроки = " + СчПоказателей + "
			|			ТОГДА 
			|				ВЫБОР
			|					КОГДА ТЧПоказатели.Показатель.Предопределенный ИЛИ ТЧПоказатели.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
			|						ТОГДА ТЧПоказатели.Показатель
			|					ИНАЧЕ NULL
			|				КОНЕЦ				
			|		ИНАЧЕ NULL
			|	КОНЕЦ КАК Показатель" + СчПоказателей + ",
			|	ВЫБОР
			|		КОГДА ТЧПоказатели.НомерСтроки = "+ СчПоказателей+"
			|			ТОГДА 
			|				ВЫБОР
			|					КОГДА ТЧПоказатели.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
			|						ТОГДА ТЧПоказатели.Показатель.ВидСтажа
			|					ИНАЧЕ NULL
			|				КОНЕЦ
			|		ИНАЧЕ NULL
			|	КОНЕЦ КАК ВидСтажа" + СчПоказателей + ",
			|	ВЫБОР
			|		КОГДА ТЧПоказатели.НомерСтроки = " + СчПоказателей + "
			|			ТОГДА 
			|				ВЫБОР
			|					КОГДА ТЧПоказатели.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
			|						ТОГДА ТЧПоказатели.Показатель.ВидСтажа.Код
			|					ИНАЧЕ NULL
			|				КОНЕЦ
			|		ИНАЧЕ NULL
			|	КОНЕЦ КАК ВидСтажаКод" + СчПоказателей;

			Если СчПоказателей < КоличествоПоказателей Тогда
				Запрос.Текст = Запрос.Текст + ","
			КонецЕсли;
		КонецЦикла;

		Запрос.Текст = Запрос.Текст + ?(ИмяПВР = "УправленческиеНачисления",
		",
		|	"+ ИмяРегистра + ".ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени", "")		
		+ ?(ИмяПВР = "ОсновныеНачисленияОрганизаций", 
		",
		|	" + ИмяРегистра+ ".ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
		|	" + ИмяРегистра+ ".ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
		|	" + ИмяРегистра+ ".ВидРасчета.УчетОтработанногоВремени КАК УчетОтработанногоВремени", "") 		
		+ ?(ИмяПВР = "ОсновныеНачисленияОрганизаций" ИЛИ ИмяПВР = "ДополнительныеНачисленияОрганизаций",
		",
		|	" + ИмяРегистра+ ".ВидРасчета.ОтОбратного КАК ОтОбратного,
		|	ЕСТЬNULL(КомпенсируемыеВидыУдержаний.КомпенсироватьИПН, ЛОЖЬ) КАК ОтОбратногоКомпенсироватьИПН,
		|	ЕСТЬNULL(КомпенсируемыеВидыУдержаний.КомпенсироватьОПВ, ЛОЖЬ) КАК ОтОбратногоКомпенсироватьОПВ,
		|	ЕСТЬNULL(КомпенсируемыеВидыУдержаний.КомпенсироватьВОСМС, ЛОЖЬ) КАК ОтОбратногоКомпенсироватьВОСМС,
		|	ЕСТЬNULL(КомпенсируемыеВидыУдержаний.КомпенсироватьУдержания, ЛОЖЬ) КАК ОтОбратногоКомпенсироватьУдержания","") + "
		|ИЗ
		|	РегистрРасчета." + ИмяРегистра + " КАК " + ИмяРегистра + "
		|
		|	" + ?(Сотрудники = Неопределено, "
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СотрудникиДляПерерасчетаТекст + ") КАК СотрудникиДляПерерасчетаТекст
		|		ПО СотрудникиДляПерерасчетаТекст.Сотрудник = " + ИмяРегистра + ".Сотрудник", "") + "
		|";
		
		Если КоличествоПоказателей > 0 Тогда
			Запрос.Текст = Запрос.Текст + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ  ПланВидовРасчета." + ИмяПВР+ ".Показатели КАК ТЧПоказатели
			|	ПО " + ИмяРегистра + ".ВидРасчета = ТЧПоказатели.Ссылка
			|		И (ТЧПоказатели.Показатель.Предопределенный
			|			ИЛИ ТЧПоказатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Стаж))";
		КонецЕсли;
		
        Запрос.Текст = Запрос.Текст + ?(ИмяПВР = "ОсновныеНачисленияОрганизаций" ИЛИ ИмяПВР = "ДополнительныеНачисленияОрганизаций",
		"	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							КомпенсируемыеВидыУдержаний.Ссылка КАК ВидРасчета,
		|							ВЫБОР
		|								КОГДА СУММА(ВЫБОР
		|												КОГДА КомпенсируемыеВидыУдержаний.ВидРасчета = &парамНалогиСборыОтчисленияИПН ТОГДА 1
		|												ИНАЧЕ 0 
		|								  			КОНЕЦ) <> 0 ТОГДА ИСТИНА
		|								ИНАЧЕ ЛОЖЬ
		|							КОНЕЦ КАК КомпенсироватьИПН,
		|							ВЫБОР
		|								КОГДА СУММА(ВЫБОР		
		|												КОГДА КомпенсируемыеВидыУдержаний.ВидРасчета = &парамНалогиСборыОтчисленияОПВ ТОГДА 1
		|												ИНАЧЕ 0 
		|								  			КОНЕЦ) <> 0 ТОГДА ИСТИНА
		|								ИНАЧЕ ЛОЖЬ
		|							КОНЕЦ КАК КомпенсироватьОПВ,
		|							ВЫБОР
		|								КОГДА СУММА(ВЫБОР		
		|												КОГДА КомпенсируемыеВидыУдержаний.ВидРасчета = &парамНалогиСборыОтчисленияВОСМС ТОГДА 1
		|												ИНАЧЕ 0 
		|								  			КОНЕЦ) <> 0 ТОГДА ИСТИНА
		|								ИНАЧЕ ЛОЖЬ
		|							КОНЕЦ КАК КомпенсироватьВОСМС,
		|							ВЫБОР
		|								КОГДА СУММА(ВЫБОР
		|												КОГДА КомпенсируемыеВидыУдержаний.ВидРасчета <> &парамНалогиСборыОтчисленияИПН
		|										  				И КомпенсируемыеВидыУдержаний.ВидРасчета <> &парамНалогиСборыОтчисленияОПВ
		|														И КомпенсируемыеВидыУдержаний.ВидРасчета <> &парамНалогиСборыОтчисленияВОСМС ТОГДА 1
		|												ИНАЧЕ 0 
		|								  			КОНЕЦ) <> 0 ТОГДА ИСТИНА
		|								ИНАЧЕ ЛОЖЬ
		|							КОНЕЦ КАК КомпенсироватьУдержания
		|					 ИЗ
		|							ПланВидовРасчета." + ИмяПВР + ".КомпенсируемыеРасчетомОтОбратногоВидыУдержаний КАК КомпенсируемыеВидыУдержаний
		|					 СГРУППИРОВАТЬ ПО
		|		                     КомпенсируемыеВидыУдержаний.Ссылка) КАК КомпенсируемыеВидыУдержаний
		|		ПО " + ИмяРегистра + ".ВидРасчета = КомпенсируемыеВидыУдержаний.ВидРасчета","") + "
		|
		|ГДЕ 
		|	" + ИмяРегистра + ".Регистратор = &парамРегистратор
		|	" + ?(Сотрудники <> Неопределено, "И " + ИмяРегистра + ".Сотрудник В(&парамСотрудники)", "") + "
		|
		|ИТОГИ ПО 
		|	" + ИмяРегистра + ".ВидРасчета.КатегорияРасчета";
		   
		Запрос.УстановитьПараметр("парамРегистратор", 			   Регистратор);
		Запрос.УстановитьПараметр("парамСотрудники", 			   Сотрудники);
    	Запрос.УстановитьПараметр("парамПустойСпособРасчета", 	   Перечисления.СпособыРасчетаОплатыТруда.ПустаяСсылка());
		Запрос.УстановитьПараметр("парамНалогиСборыОтчисленияИПН", Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог);
		Запрос.УстановитьПараметр("парамНалогиСборыОтчисленияОПВ", Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы);
		Запрос.УстановитьПараметр("парамНалогиСборыОтчисленияВОСМС", Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование);
		
		ВыборкаКатегорий = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ВыборкаКатегорий.Следующий() Цикл
			
			// Получим структуру необходимых данных для расчетов текущей категории
			МассивСпособовРасчета 	= Новый Массив; // Массив способов расчета текущий категории
			ТаблицаПоказателей 		= Новый ТаблицаЗначений; // Таблица видов показателей схем мотивации
			ТаблицаПоказателей.Колонки.Добавить("Показатель");
			ТаблицаПоказателей.Колонки.Добавить("ВидСтажа");
			ТаблицаПоказателей.Колонки.Добавить("ВидСтажаКод");
			РасчетОтОбратного 		= Ложь; // Признак необходимости выбора данных для расчета от обратного
			НормаВремени 		  	= Ложь; // Признак необходимости получения нормы времени для видов расчета
			ОтработаноВремени 	  	= Ложь; // Признак необходимости получения отработанного времени для видов расчета
			КомпенсироватьИПН 	  	= Ложь; // Признак необходимости выбора данных для расчета компенсируемого расчетом от обратного ИПН
			КомпенсироватьОПВ 		= Ложь; // Признак необходимости выбора данных для расчета погашаемых расчетом от обратного ОПВ
			КомпенсироватьВОСМС		= Ложь; // Признак необходимости выбора данных для расчета погашаемых расчетом от обратного ВОСМС
			КомпенсироватьУдержания = Ложь; // Признак необходимости выбора данных для расчета погашаемых расчетом от обратного прочих удержаний
			
			ВложеннаяВыборка = ВыборкаКатегорий.Выбрать();
			Пока ВложеннаяВыборка.Следующий() Цикл
				МассивСпособовРасчета.Добавить(ВложеннаяВыборка.СпособРасчета);

                Для Сч = 1 По КоличествоПоказателей Цикл
					
					Если ВложеннаяВыборка["Показатель" + Сч] <> NULL Тогда
						
						СтрокаПоказателя = ТаблицаПоказателей.Добавить();
						СтрокаПоказателя.Показатель		= ВложеннаяВыборка["Показатель" + Сч];
						СтрокаПоказателя.ВидСтажа		= ВложеннаяВыборка["ВидСтажа" + Сч];
						СтрокаПоказателя.ВидСтажаКод	= ВложеннаяВыборка["ВидСтажаКод" + Сч];

					КонецЕсли;
				КонецЦикла;

				Если ИмяПВР = "ОсновныеНачисленияОрганизаций" Тогда
					НормаВремени = НормаВремени ИЛИ ВложеннаяВыборка.ЗачетНормыВремени;
					ОтработаноВремени = ОтработаноВремени ИЛИ ВложеннаяВыборка.ЗачетОтработанногоВремени ИЛИ ВложеннаяВыборка.УчетОтработанногоВремени;
				КонецЕсли; 
				
				Если ИмяПВР = "ОсновныеНачисленияОрганизаций"
					 ИЛИ ИмяПВР = "ДополнительныеНачисленияОрганизаций" Тогда
					РасчетОтОбратного = РасчетОтОбратного ИЛИ ВложеннаяВыборка.ОтОбратного; 
					КомпенсироватьИПН = КомпенсироватьИПН ИЛИ ВложеннаяВыборка.ОтОбратногоКомпенсироватьИПН;
					КомпенсироватьОПВ = КомпенсироватьОПВ ИЛИ ВложеннаяВыборка.ОтОбратногоКомпенсироватьОПВ;
					КомпенсироватьВОСМС = КомпенсироватьВОСМС ИЛИ ВложеннаяВыборка.ОтОбратногоКомпенсироватьВОСМС;
					КомпенсироватьУдержания = КомпенсироватьУдержания ИЛИ ВложеннаяВыборка.ОтОбратногоКомпенсироватьУдержания;
				КонецЕсли;
				
				Если ИмяПВР = "УправленческиеНачисления" Тогда
					ОтработаноВремени = ОтработаноВремени ИЛИ ВложеннаяВыборка.ЗачетОтработанногоВремени;
				КонецЕсли;
				
			КонецЦикла;
			
			НеобходимыеДанные = ПолучитьСтруктуруНеобходимыхДанных(МассивСпособовРасчета, ТаблицаПоказателей);
			НеобходимыеДанные.НормаВремени = НеобходимыеДанные.НормаВремени ИЛИ НормаВремени;
			НеобходимыеДанные.ОтработаноВремени = НеобходимыеДанные.ОтработаноВремени ИЛИ ОтработаноВремени;
			
			НеобходимыеДанные.РасчетОтОбратного = НеобходимыеДанные.РасчетОтОбратного ИЛИ РасчетОтОбратного;
			НеобходимыеДанные.ОтОбратногоКомпенсироватьИПН = НеобходимыеДанные.ОтОбратногоКомпенсироватьИПН ИЛИ КомпенсироватьИПН;
			НеобходимыеДанные.ОтОбратногоКомпенсироватьОПВ = НеобходимыеДанные.ОтОбратногоКомпенсироватьОПВ ИЛИ КомпенсироватьОПВ;
			НеобходимыеДанные.ОтОбратногоКомпенсироватьВОСМС = НеобходимыеДанные.ОтОбратногоКомпенсироватьВОСМС ИЛИ КомпенсироватьВОСМС;
			НеобходимыеДанные.ОтОбратногоУчитыватьОПВ = КомпенсироватьИПН ИЛИ КомпенсироватьОПВ;
			НеобходимыеДанные.ОтОбратногоКомпенсироватьУдержания = НеобходимыеДанные.ОтОбратногоКомпенсироватьУдержания ИЛИ КомпенсироватьУдержания;
			
            // если нужны данные для расчета среднего заработка
			Если СчитатьСреднийЗаработок И НеобходимыеДанные.СреднийЗаработок И (НаборЗаписейРасчетСреднего <> Неопределено) Тогда
				УчетнаяПолитика = УчетнаяПолитикаПоПерсоналу[ГоловнаяОрганизация];
				СформироватьИЗаписатьДанныеРасчетаСреднего(ИмяРегистра, Регистратор, НаборЗаписейРасчетСреднего, УчетнаяПолитика);
				Если ОднократныйРасчетСреднего Тогда
					
					СчитатьСреднийЗаработок = Ложь;
					
				КонецЕсли;
			КонецЕсли;
			
			ИсходныеДанные = ПроведениеРасчетовПолныеПрава.ПолучитьДанныеДляРасчета(ИмяРегистра, ВыборкаКатегорий.КатегорияРасчета, НеобходимыеДанные, Регистратор, ГоловнаяОрганизация, ОбособленноеПодразделение, УчетнаяПолитикаПоПерсоналу, ПериодРегистрации, Истина, Сотрудники, Налогоплательщик).Выбрать();
			
			// Курс результата передаем равным 1, т.к. считаем, что перерасчет доступен только для реглучета
			РассчитатьЗаписиНабора(ИсходныеДанные, НаборЗаписейРегистра, ГоловнаяОрганизация, ОбособленноеПодразделение, ТабличнаяЧастьДокумента, ТаблицаСтавокИПН, , НеобходимыеДанные.РасчетОтОбратного);

			// записываем набор после расчета каждой очередной категории
			НаборЗаписейРегистра.Записать(Истина, Истина);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ПерерассчитатьЗаписиРегистраРасчета() 

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным для способа расчета "от обратного"
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  ТаблицаСтавокИПН - таблица значений со ставками ИПН за текущий рассчитываемый период регистрации для расчета "от обратного"
//
// Возвращаемое значение:
//  Число - результат расчета.
//
Функция РассчитатьЗаписьРегистраРасчетаОтОбратного(СтрокаДвижений, ИсходныеДанные, ТаблицаСтавокИПН, ПериодРегистрации, КомментироватьРасчет = Ложь, СтруктураЦелевыхРазмеровДляРасчетовОтОбратного, СтруктураВспомогательныхДанных, Налогоплательщик)

	Если ПериодРегистрации >= '20210101' Тогда
		// после 2021
		Возврат РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2021(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет, СтруктураЦелевыхРазмеровДляРасчетовОтОбратного, СтруктураВспомогательныхДанных, Налогоплательщик)
	ИначеЕсли ПериодРегистрации >= '20200101' Тогда
		// после 2020
		Возврат РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2020(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет, СтруктураЦелевыхРазмеровДляРасчетовОтОбратного, СтруктураВспомогательныхДанных, Налогоплательщик)
	ИначеЕсли ПериодРегистрации >= '20190101' Тогда
		// после 2019
		Возврат РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2019(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет, СтруктураЦелевыхРазмеровДляРасчетовОтОбратного, СтруктураВспомогательныхДанных)
	ИначеЕсли ПериодРегистрации >= '20180101' Тогда
		// после 2018
		Возврат РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2018(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет, СтруктураЦелевыхРазмеровДляРасчетовОтОбратного)
	ИначеЕсли ПериодРегистрации >= '20140101' Тогда
		// после 2014 - расширены возможности расчтов от обратного: исключен расчет нарастающим итогом
		Возврат РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2014(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет, СтруктураЦелевыхРазмеровДляРасчетовОтОбратного)
	ИначеЕсли ПериодРегистрации >= '20100101' Тогда
		// после 2010 - расширены возможности расчтов от обратного
		Возврат РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2010(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет, СтруктураЦелевыхРазмеровДляРасчетовОтОбратного)
	ИначеЕсли ПериодРегистрации >= '20090101' Тогда
		// после 2009 - по фиксированной ставке хранится льготируемый доход и разрешенный вычет в регистре
		Возврат РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2009(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет);
	ИначеЕсли ПериодРегистрации >= '20070101' Тогда
		// после 2007 - по фиксированной ставке
		Возврат РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2007(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет);
	Иначе
		// до 2007 - по шкале
		Возврат РассчитатьЗаписьРегистраРасчетаОтОбратногоДо2007(СтрокаДвижений, ИсходныеДанные, ТаблицаСтавокИПН, ПериодРегистрации, КомментироватьРасчет);
	КонецЕсли;

КонецФункции // РассчитатьЗаписьРегистраРасчетаОтОбратного

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным для способа расчета "от обратного"
// по правилам, действующим до 2006 года (шкала ставок ИПН)
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  ТаблицаСтавокИПН - таблица значений со ставками ИПН за текущий рассчитываемый период регистрации для расчета "от обратного"
//
// Возвращаемое значение:
//  Число - результат расчета.
//
// Расчет "от обратного" производится на основе решения уравнения:
// 
// 		Х - Кн * ИПН - Кв * ОПВ - Ку * Уд = Р,
// где
//                          ((Х + Бн - ОПВ - Льгот) * Ка - НижПред) * %Н + Фс
//		ИПН = К1н * ( К0н * -------------------------------------------------- - Н)
//                                             Ка 
//
//		Льгот = Кл * ЛБ + Кл * Х - Кл * ОПВ + (1 - Кл) * ГЛ
//
//      ОПВ = ((1- К1в)*(Х + Бв) * %В + К1в * МаксОПВ -РанееИсчислВзносы) * К2в
//      
//      Уд  = Х * %Упр + Фу + (Х - ОПВ) * %Ув + (Х - ИПН) * %Ун + (Х - ОПВ - ИПН) * %Унв
//
// Относительно Х:
//
//      ОПВ(Х) = Х * %ПФ + Фв
//
//				%ПФ = %В * К2в * (1 - К1в)
//           
//				Фв  = Бв * %В * (1 - К1в) * К2в + К1в * МаксОПВ * К2в - К2в * РанееИсчислВзносы
//
//		Льгот(Х) = Х * %Л + Фл
//
//				%Л  = Кл * (1 - %ПФ)
//
//				Фл  = Кл * (ЛБ - Фв) + (1 - Кл) * ГЛ
//
//		ИПН(Х) = Х * %НВ + Фн
//
//				%НВ = К1н * К0н * (1 - %ПФ) * (1 - Кл) * %Н
//
//                                                       К1н * К0н                     К1н * К0н 
//				Фн  = К1н * К0н * (Бн - Фв - Фл) * %Н - ------------ * НижПред * %Н + ----------- * Фс - К1н * Н
//                                                           Ка                            Ка
//
// Решение уравнения:
//               Р + К'н * Фн + К'в * Фв + Ку * Фу
//		Х	  = -----------------------------------
//               1 - К'н * %НВ - К'в * %ПФ - Ку * %У'
//
// где
//		К'н   = Кн - Ку * %Ун - Ку * %Унв
//		К'в   = Кв - Ку * %Ув - Ку * %Унв
//		%У'   = %Упр + %Ув + %Ун + %Унв
//
//
// Обозначения:
// |В формуле	|	Переменная в программе					| Комментарий
// ---------------------------------------------------------------------------------------------------------------
// |   Х		|	ИскомаяСуммаНачислений					| Сумма, которую хотят получить на руки (за минусом включаемых начислений)
// |   Кн		|	КомпенсироватьИПН						| 1, если компенсируется ИПН, 0 иначе
// |   Кв		|	КомпенсироватьОПВ						| 1, если компенсируются ОПВ, 0 иначе
// |   Ку		|	КомпенсироватьУдержания					| 1, если компенсируются удержания, 0 иначе
// |   К1н		|	ПризнакИсчисленияИПН					| 1, если с работника удерживается ИПН, 0 иначе (льготник)
// |   К0н		|	ПризнакРасчетИПНБезВозврата	 			| 1, если ИПН рассчитывается по таблице, иначе 0 - возврат ранее исчисленного налога
// |   Бн		|   БазаДляИсчисленияИПН					| Сумма облагаемого ИПН дохода (уже отняты вычеты и ОПВ)
// |   Ка		|	КоэффициентПересчета					| Коэффицент авансового удержания ИПН (в зависимости от месяца налогового периода)
// |   НижПред	|	НижнийПределШкалыИПН					| Нижний (левый) предел строки таблицы ставок ИПН
// |   %Н		|	ПроцентИПН								| Процент ИПН по текущей строке таблицы ставок ИПН
// |   Фс		| СуммаНалогаПредыдущегоПредела				| Сумма налога с предыдущей строки таблицы ставок ИПН
// |   Н		|	РанееНалогИсчисленный					| Сумма ИПН, исчисленного за предыдущие месяца налогового года
// |   К1в		| ПризнакПрименятьОграничениеПоДоходамОПВ 	| 0, если расчет ОПВ от базы (когда база < 75 МЗП), 1 если ОПВ с 75 МЗП
// |   Бв		|	БазаДляИсчисленияОПВ					| Сумма облагаемого ОПВ дохода за месяц (за счет прочих начислений, не относящихся в Х)
// |   %В		|	ПроцентОПВ								| Процент обязательных пенсионных взносов
// |   МаксОПВ	| 	МаксСуммаОПВ 							| Сумма ОПВ с 75 МЗП
// |   К2в		|	ПризнакИсчисленияОПВ					| 1, если по работнику исчисляются ОПВ, иначе 0 (пенсионер, инвалид 1, 2 гр. и т.д.)
// |   %Упр		|	ПроцентПрочихКомпенсируемыхУдержаний	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых не вычитается ОПВ и ИПН)
// |   %Ун		|	ПроцентКомпенсируемыхУдержанийБезИПН	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН)
// |   %Ув		|	ПроцентКомпенсируемыхУдержанийБезОПВ	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ОПВ)
// |   %Унв		|	ПроцентКомпенсируемыхУдержанийБезИПНиОПВ| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН и ОПВ)
// |   Фу		|	СуммаКомпенсируемыхУдержаний			| Компенсируемые удержания фиксированной суммой
// |   %ПФ		|	РезультирующийПроцентОПВ				|
// |   Фв		|	ФиксЧастьОПВ							|
// |   %НВ		|	РезультирующийПроцентИПНиОПВ			|
// |   Фн		|	ФиксЧастьИПН							|
// |   Кл		|	ПризнакПримененияЛьготы					| 1, если льгота в пределах льготируемого дохода, иначе 0 - в пределах годовой льготы ГЛ
// |   %Л		|	РезультирующийПроцентЛьготы				|
// |   Фл		|	ФиксЧастьЛьготы							|
// |   ЛБ		|	ЛьготируемаяБазаДляИсчисленияИПН		| База исчисления ИПН, к которой применяется льгота
// |   ГЛ		|	ПрименяемаяЛьготаЗаГод					| Годовой размер льготы
// 
Функция РассчитатьЗаписьРегистраРасчетаОтОбратногоДо2007(СтрокаДвижений, ИсходныеДанные, ТаблицаСтавокИПН, ПериодРегистрации, КомментироватьРасчет)
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	СпособРасчета = ИсходныеДанные.СпособРасчета;
	Результат = 0;
	ЦелевойРазмер = 0;
	
	РезультатПолучен = Ложь;
	
	ЭтоПВРОсновныеНачисления = (ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	
	// Если это расчет "от обратного" для основного начисления, то не учитываем прочие суммы доходов, т.к.
	// налоги/взносы будут компенсироваться только для самого основного начисления и включаемых в него видов расчета.
	// Если идет расчет "от обратного" для прочих доплат, то их считаем таким образом, чтобы компенсировать только 
	// ту часть налога/взноса, которая начислена на сумму доплаты.
	Если ЭтоПВРОсновныеНачисления Тогда
		Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
			ОсновноеНачисление = Истина;
		Иначе
			ОсновноеНачисление = Ложь;
		КонецЕсли;
	Иначе
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// Если до этого никаких вообще начислений не было, то в любом случае считаем как "основное начисление"
	Если ИсходныеДанные.ОбщаяСуммаНачислений = 0 Тогда
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// определим целевой размер
	ЦелевойРазмер = СтрокаДвижений.Результат;

	// запомним целевой размер текущей строки расчета
	Если ЭтоПВРОсновныеНачисления Тогда
	
		СтрокаДвижений.ДополнительныеДанные = ЦелевойРазмер;
		
		Если ОсновноеНачисление Тогда
			// Увеличим целевой размер на размеры всех других расчетов "от обратного", введенных в текущем месяце,
			// их фактические результаты потом будут вычтены в конец расчета.
			ЦелевойРазмер = ЦелевойРазмер + ИсходныеДанные.РасчетОтОбратногоДополнительныеДанные;
		КонецЕсли;
			
	КонецЕсли;
	
	Если ТаблицаСтавокИПН = Неопределено Тогда
		
		// это первый вызов расчета от обратного - выберем сведения о ставках ИПН для периода регистрации
		// и вернем таблицу ставок в вызывающую процедуру через параметр, чтобы в следующий раз не выбирать
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("парамВидСтавокИПНиСН", Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН);
		Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	&парамПериодРегистрации КАК Период,
		|	ШкалаСтавокИПН.НомерСтрокиСтавок,
		|	ШкалаСтавокИПН.СуммаДоходаС,
		|	ШкалаСтавокИПН.СуммаДоходаПо,
		|	ШкалаСтавокИПН.Ставка,
		|	ШкалаСтавокИПН.СуммаНалогаПредыдущегоПредела
		|ИЗ
		|	РегистрСведений.СведенияОСтавкахИПНиСН.СрезПоследних(
		|			&парамПериодРегистрации,
		|			ВидСтавокИПНиСН = &парамВидСтавокИПНиСН) КАК ШкалаСтавокИПН
		|УПОРЯДОЧИТЬ ПО
		|	ШкалаСтавокИПН.СуммаДоходаС
		|";
		
		ТаблицаСтавокИПН = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Если ТаблицаСтавокИПН.Количество() = 0 Тогда
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Не определена таблица ставок ИПН ", СтатусСообщения.Важное);
		Возврат 0;
	КонецЕсли;
	
	// Признаки компенсирования расчетом "от обратного" различных удержаний
	КомпенсироватьИПН 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, 1, 0);
	КомпенсироватьОПВ 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ, 1, 0);
	КомпенсироватьУдержания 	= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания, 1, 0);
	
	Если КомпенсироватьИПН <> 0 Или КомпенсироватьОПВ <> 0 Тогда
		Если Не ИсходныеДанные.ОтражениеПоПериодуРегистрации Тогда
			Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": расчет невозможен, т.к. в учетной политике по налоговому учету не установлен признак отражения налогов и взносов по периоду регистрации! ", СтатусСообщения.Важное);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Данные для расчета ИПН 
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		ПризнакПримененияЛьготы				= ?(ИсходныеДанные.ПризнакПримененияЛьготы > 0, 1, 0);
		ПризнакИсчисленияИПН 				= 1 - ПризнакПримененияЛьготы;
		БазаДляИсчисленияИПН 				= ИсходныеДанные.ОблагаемыйДоходЗаГод - ИсходныеДанные.НалоговыйВычетЗаГод - ИсходныеДанные.ИсчисленныеВзносыЗаГод;
		ЛьготируемаяБазаДляИсчисленияИПН	= ИсходныеДанные.ЛьготируемаяБазаДляИсчисленияИПН;
		ОблагаемыйИПНДоходЗаМесяц			= ИсходныеДанные.ОблагаемыйДоходЗаМесяц;
		РанееНалогИсчисленный 				= ИсходныеДанные.РанееНалогИсчисленный;
		ПрименяемаяЛьготаЗаГод 				= ИсходныеДанные.ПрименяемаяЛьготаЗаГод;
		КоэффициентПересчета 				= ИсходныеДанные.КоэффициентПересчета;
		СреднемесячныйРазмерМЗПЗаКвартал 	= ИсходныеДанные.СреднемесячныйРазмерМЗПЗаКвартал;
		ПолученныйДоходЗаКвартал 			= ИсходныеДанные.ПолученныйДоходЗаКвартал;
		РегистрировалсяДоходЗаКвартал 		= Мин(ИсходныеДанные.РегистрировалсяДоходЗаКвартал + 1, Месяц(ПериодРегистрации) - Месяц(НачалоКвартала(ПериодРегистрации)) + 1); // учтем еще и сам месяц начисления "от обратного"
		ПроверятьНаНулевуюСтавку			= ИсходныеДанные.ПрименятьНулевуюСтавку;
		
		Если Месяц(ПериодРегистрации) > 3 Тогда
			// если за предыдущие кварталы среднемесячный доход превышал МЗП, то на нулевую ставку уже не проверяем
			НомерПредыдущегоКвартала = (Месяц(НачалоКвартала(ПериодРегистрации)) - 1) / 3;
			Для НомерКвартала = 1 По НомерПредыдущегоКвартала Цикл
				Если ИсходныеДанные["ПрименятьНулевуюСтавкуКв" + Строка(НомерКвартала)] = 0 Тогда
					ПроверятьНаНулевуюСтавку = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;		
	Иначе
		// Если компенсация ИПН не нужна, то все по нулям
		ПризнакИсчисленияИПН 				= 0;
		ПризнакПримененияЛьготы				= 0;
		БазаДляИсчисленияИПН 				= 0;
		ЛьготируемаяБазаДляИсчисленияИПН	= 0;
		ОблагаемыйИПНДоходЗаМесяц			= 0;
		РанееНалогИсчисленный 				= 0;
		ПрименяемаяЛьготаЗаГод 				= 0;
		КоэффициентПересчета 				= 1;
		СреднемесячныйРазмерМЗПЗаКвартал 	= 0;
		ПолученныйДоходЗаКвартал 			= 0;
		РегистрировалсяДоходЗаКвартал		= 1;
		ПроверятьНаНулевуюСтавку			= Ложь;
	КонецЕсли;
	
	// Данные для расчета ОПВ
	Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
		ПризнакИсчисленияОПВ 				= ?(ИсходныеДанные.ПризнакИсчисленияОПВ, 1, 0);
		БазаДляИсчисленияОПВ 				= ИсходныеДанные.БазаДляИсчисленияОПВ;
		РазмерОграниченияПоДоходамОПВ 		= ИсходныеДанные.РазмерОграниченияПоДоходамОПВ;
		РанееВзносыИсчисленные 				= ИсходныеДанные.РанееВзносыИсчисленные;
	Иначе
		// Если учет ОПВ не нужен, то все по нулям
		ПризнакИсчисленияОПВ 				= 0;
		БазаДляИсчисленияОПВ 				= 0;
		РазмерОграниченияПоДоходамОПВ 		= 0;
		РанееВзносыИсчисленные 				= 0;
	КонецЕсли;
	
	// Данные по прочим погашаемым удержаниям
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		СуммаКомпенсируемыхУдержаний			= ИсходныеДанные.СуммаКомпенсируемыхУдержаний;
		ПроцентКомпенсируемыхУдержанийБезИПН	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПН / 100;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезОПВ / 100;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ / 100;
		ПроцентПрочихКомпенсируемыхУдержаний		= ИсходныеДанные.ПроцентПрочихКомпенсируемыхУдержаний / 100;
	Иначе
		// Если удержания не компенсируются, то все по нулям
		СуммаКомпенсируемыхУдержаний			= 0;
		ПроцентКомпенсируемыхУдержанийБезИПН	= 0;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= 0;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= 0;
		ПроцентПрочихКомпенсируемыхУдержаний		= 0;
	КонецЕсли;
	
	// Сумма, которую надо начислить, чтобы с учетом включаемых начислений получить нужную сумму на руки
	ИскомаяСуммаНачислений = ЦелевойРазмер - ИсходныеДанные.СуммаВключаемыхНачислений;
	
	// округлим искомую сумму
	ИскомаяСуммаНачислений = ОбщегоНазначения.ОкруглитьЧисло(ИскомаяСуммаНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
	
	Если (ПризнакИсчисленияИПН * КомпенсироватьИПН = 0)
		  И (ПризнакИсчисленияОПВ * КомпенсироватьОПВ = 0)
		  И КомпенсироватьУдержания = 0 Тогда
		 
		// Считать нечего, т.к. либо ничего не компенсируем (что ошибка) либо не положено ничего считать 
		Если КомпенсироватьИПН = 0 И КомпенсироватьОПВ = 0 И КомпенсироватьУдержания = 0 Тогда
			Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Не определены компенсируемые удержания ", СтатусСообщения.Важное);
		КонецЕсли;
		
		Возврат ИскомаяСуммаНачислений;		
		
	КонецЕсли;
	
	ПроцентОПВ = ИсходныеДанные.ПроцентОПВ; // ставка ОПВ
	ПризнакРасчетИПНБезВозврата = 1; // если 0, то нужно вернуть РанееНалогИсчисленный
	МаксСуммаОПВ = ПроцентОПВ * РазмерОграниченияПоДоходамОПВ; // ОПВ с макс суммы облагаемого дохода
	ПризнакПрименятьОграничениеПоДоходамОПВ = 0; // если 1, то применяется ограничение по доходам, облагаемым ОПВ
	НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
	
	// Если это расчет "от обратного" для доплат, то определяем сумму налога/взноса с уже начисленных доходов
	Если Не ОсновноеНачисление Тогда
	
		// Расчет ОПВ
		ИсчисленныеОПВ = 0;
		Если ПризнакИсчисленияОПВ <> 0 Тогда
			ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ) - РанееВзносыИсчисленные;
		КонецЕсли;
		
		ИсчисленныеОПВ = ОбщегоНазначения.ОкруглитьЧисло(ИсчисленныеОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Расчет ИПН 
		ИсчисленныйИПН = 0;		
		ОблагаемаяИПНСумма = КоэффициентПересчета * (БазаДляИсчисленияИПН - ИсчисленныеОПВ - Мин(Макс(ЛьготируемаяБазаДляИсчисленияИПН - ПризнакПримененияЛьготы * ИсчисленныеОПВ, 0), ПрименяемаяЛьготаЗаГод));
		Если ОблагаемаяИПНСумма > 0 Тогда
			Если ОблагаемаяИПНСумма <= 12 * СреднемесячныйРазмерМЗПЗаКвартал
				 И ОблагаемаяИПНСумма / РегистрировалсяДоходЗаКвартал  <= СреднемесячныйРазмерМЗПЗаКвартал
				 И ПроверятьНаНулевуюСтавку Тогда
				
				// Возврат ранее исчисленного налога
				ИсчисленныйИПН = - РанееНалогИсчисленный;
				 
			Иначе
				Для ИндексСтавки = 0 По ТаблицаСтавокИПН.Количество() - 1 Цикл
					Если ОблагаемаяИПНСумма >= ТаблицаСтавокИПН[ИндексСтавки].СуммаДоходаС 
						 И ОблагаемаяИПНСумма <= ТаблицаСтавокИПН[ИндексСтавки].СуммаДоходаПо Тогда
						 
						СтрокаСтавок = ТаблицаСтавокИПН[ИндексСтавки];
						
						ИсчисленныйИПН = (ОблагаемаяИПНСумма - СтрокаСтавок.СуммаДоходаС) * СтрокаСтавок.Ставка / 100 + СтрокаСтавок.СуммаНалогаПредыдущегоПредела;
						ИсчисленныйИПН = Окр(ИсчисленныйИПН / КоэффициентПересчета, 2) - РанееНалогИсчисленный;
						 
						Прервать;
					КонецЕсли;
				КонецЦикла;		
			КонецЕсли;
		КонецЕсли;
		
		ИсчисленныйИПН = ОбщегоНазначения.ОкруглитьЧисло(ИсчисленныйИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// При расчете "от обратного" для доплат ищем такую сумму, чтобы после удержания налога/взноса получил на руки 
		// такую же сумму, какую получил бы без доплаты, + чистый размер самой доплаты		
		СуммаНаРукиСПрочихНачислений = (ИсходныеДанные.ОбщаяСуммаНачислений - ИсходныеДанные.СуммаВключаемыхНачислений) - ИсчисленныеОПВ - ИсчисленныйИПН;
		ИскомаяСуммаНачислений = ИскомаяСуммаНачислений + СуммаНаРукиСПрочихНачислений;
		БазаДляИсчисленияОПВ = - ИсходныеДанные.НеОблагаемыйОПВДоходЗаМесяц + ИсходныеДанные.ПрочиеДоходыДляОПВ;
		БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц - ИсходныеДанные.НеОблагаемыйИПНДоходЗаМесяц; // т.к. доход за месяц полностью будет входить в результат решения уравнения
		Если ПризнакПримененияЛьготы = 1 Тогда
			ЛьготируемаяБазаДляИсчисленияИПН = ЛьготируемаяБазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц;
		КонецЕсли;
	
		// чтобы из-за того, если для доплаты не стоит компенсация ОПВ, не удержалось ОПВ с основных начислений
		// или из-за того, что рассчитываемый вид сам по себе не облагается ОПВ,
		// включим его дополнительно как компенсируемые удержания суммой
		Если (КомпенсироватьОПВ = 0 ИЛИ ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом) И ИсчисленныеОПВ <> 0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
			КомпенсироватьУдержания = 1;
			Если ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
				ПризнакИсчисленияОПВ = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если КомпенсироватьИПН = 0 И ИсчисленныйИПН <>0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныйИПН;
			КомпенсироватьУдержания = 1;
		КонецЕсли;
		
	Иначе
		// если основное начисление (за отработанное время)
		БазаДляИсчисленияОПВ = ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений + ИсходныеДанные.ПрочиеДоходыДляОПВ;
		БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц + ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений;
		
		Если ПризнакИсчисленияОПВ = 1 Тогда
			// если данный вид ОПВ не облагается, но база для исчисления с других видов есть
			ПризнакИсчисленияОПВ = ?(ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом, 1, 0);
			ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ) - РанееВзносыИсчисленные;
			Если ПризнакИсчисленияОПВ = 0 И ИсчисленныеОПВ <> 0 Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
				СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
				КомпенсироватьУдержания = 1;
			КонецЕсли;			
		КонецЕсли;
		
		Если ПризнакПримененияЛьготы = 1 Тогда
			ЛьготируемаяБазаДляИсчисленияИПН = ЛьготируемаяБазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц + ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений;
		КонецЕсли;
	КонецЕсли;
	
	// Определим первоначально строку ставок ИПН 
	ПроцентИПН = ТаблицаСтавокИПН.Итог("Ставка") / ТаблицаСтавокИПН.Количество() / 100; // усредненный процент ИПН для первого приближения
	ОблагаемаяИПНСумма = Макс(ПризнакИсчисленияИПН * (1 + ПроцентИПН - ПризнакИсчисленияОПВ * ПроцентОПВ) * (БазаДляИсчисленияИПН + ИскомаяСуммаНачислений - Макс(ЛьготируемаяБазаДляИсчисленияИПН, 0)) * КоэффициентПересчета, 0);
	
	ИндексСтавки = 0;
	Для ИндексСтавки = 0 По ТаблицаСтавокИПН.Количество() - 1 Цикл
		Если ОблагаемаяИПНСумма >= ТаблицаСтавокИПН[ИндексСтавки].СуммаДоходаС 
			 И ОблагаемаяИПНСумма <= ТаблицаСтавокИПН[ИндексСтавки].СуммаДоходаПо Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ШагИтерации = 0;	
	МаксимальноеЧислоШагов = 100;
	
	Пока Не РезультатПолучен И (ШагИтерации < МаксимальноеЧислоШагов) Цикл
		
		ШагИтерации = ШагИтерации + 1;
		РезультатПолучен = Истина;		
		
		// Вычисляем вспомогательные переменные
		ПроцентИПН 				 = ТаблицаСтавокИПН[ИндексСтавки].Ставка / 100;
		НижнийПределШкалыИПН	 = ТаблицаСтавокИПН[ИндексСтавки].СуммаДоходаС;
		СуммаНалогаПредыдущегоПредела = ТаблицаСтавокИПН[ИндексСтавки].СуммаНалогаПредыдущегоПредела;
		
		РезультирующийПроцентОПВ = ПроцентОПВ * ПризнакИсчисленияОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ);
		
		ФиксЧастьОПВ			 = ПризнакИсчисленияОПВ * (БазаДляИсчисленияОПВ * ПроцентОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ) + 
														   ПризнакПрименятьОграничениеПоДоходамОПВ * МаксСуммаОПВ - РанееВзносыИсчисленные);
		
														   
		РезультирующийПроцентЛьготы = ПризнакПримененияЛьготы * (1 - РезультирующийПроцентОПВ);
		
		ФиксЧастьЛьготы				= ПризнакПримененияЛьготы * (ЛьготируемаяБазаДляИсчисленияИПН - ФиксЧастьОПВ) + 
										(1 - ПризнакПримененияЛьготы) * ПрименяемаяЛьготаЗаГод;
														   
										
		РезультирующийПроцентИПНиОПВ = ПризнакИсчисленияИПН * ПризнакРасчетИПНБезВозврата * (1 - РезультирующийПроцентОПВ) * 
											(1 - ПризнакПримененияЛьготы) * ПроцентИПН;
											
		ФиксЧастьИПН			= ПризнакИсчисленияИПН * ПризнакРасчетИПНБезВозврата *
								  		( (БазаДляИсчисленияИПН - ФиксЧастьОПВ - ФиксЧастьЛьготы) * ПроцентИПН -
								  		   НижнийПределШкалыИПН * ПроцентИПН / КоэффициентПересчета +
								  		   СуммаНалогаПредыдущегоПредела / КоэффициентПересчета
								  		) -  ПризнакИсчисленияИПН * РанееНалогИсчисленный;
		
		КоэффициентИПН = КомпенсироватьИПН - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		КоэффициентОПВ = КомпенсироватьОПВ - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		ПроцентКомпенсируемыхУдержаний = ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ + 
											ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + ПроцентПрочихКомпенсируемыхУдержаний;
								  		
		Числитель = (ИскомаяСуммаНачислений + 
					КоэффициентИПН * ФиксЧастьИПН +
					КоэффициентОПВ * ФиксЧастьОПВ + 
					КомпенсироватьУдержания * СуммаКомпенсируемыхУдержаний);
					
		Знаменатель = (1 - 
	     				КоэффициентИПН * РезультирующийПроцентИПНиОПВ -
					   	КоэффициентОПВ * РезультирующийПроцентОПВ - 
						КомпенсироватьУдержания * ПроцентКомпенсируемыхУдержаний);
								  		
		Результат = ?(Знаменатель <> 0, Числитель / Знаменатель, 0);
		Результат = ОбщегоНазначения.ОкруглитьЧисло(Результат, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Проверим граничные условия, при которых делали расчет
		РезультатОПВ = ПризнакИсчисленияОПВ * ПроцентОПВ * (БазаДляИсчисленияОПВ + Результат);

		Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
			// Наличие облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияОПВ И ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ОПВ исчисляются
					
					Если БазаДляИсчисленияОПВ + Результат > 0 Тогда
						Если ПризнакИсчисленияОПВ <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 1;
					Иначе
						Если ПризнакИсчисленияОПВ <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если РезультатОПВ > МаксСуммаОПВ Тогда
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 1;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		РезультатОПВ = РезультатОПВ - РанееВзносыИсчисленные;
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда 
			// Учтем граничные условия, возникающие при расчете ИПН
			
			// Льготы по ИПН
			ОблагаемаяИПНСумма = 0;
			Если РезультатПолучен Тогда
				НоваяЛьготируемаяБазаДляИсчисленияИПН = Макс(Результат * РезультирующийПроцентЛьготы + ФиксЧастьЛьготы, 0);
				ОблагаемаяИПНСумма = (БазаДляИсчисленияИПН + Результат - РезультатОПВ - НоваяЛьготируемаяБазаДляИсчисленияИПН) * КоэффициентПересчета;
				Если ОблагаемаяИПНСумма > 0 Тогда
					Если ПризнакИсчисленияИПН <> 1 Тогда
						// Ранее налог не рассчитывался, теперь же появилась облагаемая база - нужен еще один шаг цикла
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакИсчисленияИПН = 1;
				Иначе
					Если ПризнакИсчисленияИПН <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакИсчисленияИПН = 0;
				КонецЕсли;
				
				// Размер применяемой льготы
				Если (НоваяЛьготируемаяБазаДляИсчисленияИПН <> 0 ИЛИ ПрименяемаяЛьготаЗаГод <> 0)
						И НоваяЛьготируемаяБазаДляИсчисленияИПН <> ПрименяемаяЛьготаЗаГод Тогда
					Если НоваяЛьготируемаяБазаДляИсчисленияИПН > ПрименяемаяЛьготаЗаГод Тогда
						// необходимо применять льготу в пределах льготируемого дохода
						Если ПризнакПримененияЛьготы <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакПримененияЛьготы = 0;
					Иначе
						// ранее льгота применялась в размере годовой, надо в пределах льготируемого дохода
						Если ПризнакПримененияЛьготы <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакПримененияЛьготы = 1;
					КонецЕсли;
				КонецЕсли;
				
				ОблагаемаяИПНСумма = Макс(ОблагаемаяИПНСумма, 0);
			КонецЕсли;
				
			// Соответствие примененной шкале
			Если РезультатПолучен Тогда
				ВремИндекс = 0;
				Для ВремИндекс = 0 По ТаблицаСтавокИПН.Количество() - 1 Цикл
					Если ОблагаемаяИПНСумма >= ТаблицаСтавокИПН[ВремИндекс].СуммаДоходаС
						 И ОблагаемаяИПНСумма <= ТаблицаСтавокИПН[ВремИндекс].СуммаДоходаПо Тогда
						
						Если ВремИндекс <> ИндексСтавки Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ИндексСтавки = ВремИндекс;
						
						Прервать;
						
					КонецЕсли;
				КонецЦикла;			
			КонецЕсли;

			// Проверка на применение нулевой ставки
			Если РезультатПолучен И ПроверятьНаНулевуюСтавку Тогда
				Если ОблагаемаяИПНСумма <= 12 * СреднемесячныйРазмерМЗПЗаКвартал
					 И (ПолученныйДоходЗаКвартал + Результат) / РегистрировалсяДоходЗаКвартал  <= СреднемесячныйРазмерМЗПЗаКвартал Тогда
					
					Если ПризнакРасчетИПНБезВозврата <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетИПНБезВозврата = 0;
					
				Иначе				
					Если ПризнакРасчетИПНБезВозврата <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетИПНБезВозврата = 1;
					
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не РезультатПолучен Тогда
		// вышли из цикла по превышению макс допустимого числа шагов
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Превышено допустимо число шагов итерации ", СтатусСообщения.Важное);
	Иначе
		// Из-за округления могут получиться лишние тиынки
		ИсчисленныйИПН = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентИПНиОПВ + ФиксЧастьИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеОПВ = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентОПВ + ФиксЧастьОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеУдержания = ОбщегоНазначения.ОкруглитьЧисло(КомпенсироватьУдержания * (Результат * ПроцентПрочихКомпенсируемыхУдержаний + 
												(Результат - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезОПВ +
												(Результат - ИсчисленныйИПН) * ПроцентКомпенсируемыхУдержанийБезИПН +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + 
												СуммаКомпенсируемыхУдержаний), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		ОбщаяСуммаКомпенсируемыхУдержаний = ИсчисленныйИПН + ИсчисленныеОПВ + ИсчисленныеУдержания;
		Разность = ИскомаяСуммаНачислений - (Результат - ОбщаяСуммаКомпенсируемыхУдержаний);
		
		Если Разность > -1 И Разность < 1 Тогда
			Результат = Результат + Разность;
		КонецЕсли;
		
		Если Не ОсновноеНачисление Тогда
			Результат = Результат - ИсходныеДанные.ОбщаяСуммаНачислений; 
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = ОбщегоНазначения.ОкруглитьЧисло(?(РезультатПолучен, Результат, 0), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);

	СтрокаДвижений.Результат = Результат;

	Если КомментироватьРасчет Тогда
		РаботаССообщениями.ЗаменитьТекстКомментарияРасчета("Результат расчета: <НомерСтроки" + Строка(СтрокаДвижений.НомерСтроки) + ">", 
														   "Результат расчета: " + Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции  // РассчитатьЗаписьРегистраРасчетаОтОбратногоДо2007

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным для способа расчета "от обратного"
// по правилам, действующим с 2007 года (фикс. ставка ИПН)
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  ТаблицаСтавокИПН - таблица значений со ставками ИПН за текущий рассчитываемый период регистрации для расчета "от обратного"
//
// Возвращаемое значение:
//  Число - результат расчета.
//
// Расчет "от обратного" производится на основе решения уравнения:
// 
// 		Х - Кн * ИПН - Кв * ОПВ - Ку * Уд = Р,
// где
//                    
//		ИПН = К1н * (К0н * (Х + Бн - ОПВ - Льгот) * %Н - Н)
//
//		Льгот = Кл * ЛБ + Кл * Х - Кл * ОПВ + (1 - Кл) * ГЛ - РанееПримЛьгота
//
//      ОПВ = ((1- К1в)*(Х + Бв) * %В + К1в * МаксОПВ -РанееИсчислВзносы) * К2в
//      
//      Уд  = Х * %Упр + Фу + (Х - ОПВ) * %Ув + (Х - ИПН) * %Ун + (Х - ОПВ - ИПН) * %Унв
//
// Относительно Х:
//
//      ОПВ(Х) = Х * %ПФ + Фв
//
//				%ПФ = %В * К2в * (1 - К1в)
//           
//				Фв  = Бв * %В * (1 - К1в) * К2в + К1в * МаксОПВ * К2в - К2в * РанееИсчислВзносы
//
//		Льгот(Х) = Х * %Л + Фл
//
//				%Л  = Кл * (1 - %ПФ)
//
//				Фл  = Кл * (ЛБ - Фв) + (1 - Кл) * ГЛ - РанееПримЛьгота
//
//		ИПН(Х) = Х * %НВ + Фн
//
//				%НВ = К1н * К0н * %Н * (1 - %ПФ - %Л)
//
//				Фн  = К1н * К0н * %Н * (Бн - Фв - Фл) - К1н * Н
//
// Решение уравнения:
//               Р + К'н * Фн + К'в * Фв + Ку * Фу
//		Х	  = -----------------------------------
//               1 - К'н * %НВ - К'в * %ПФ - Ку * %У'
//
// где
//		К'н   = Кн - Ку * %Ун - Ку * %Унв
//		К'в   = Кв - Ку * %Ув - Ку * %Унв
//		%У'   = %Упр + %Ув + %Ун + %Унв
//
//
// Обозначения:
// |В формуле	|	Переменная в программе					| Комментарий
// ---------------------------------------------------------------------------------------------------------------
// |   Х		|	ИскомаяСуммаНачислений					| Сумма, которую хотят получить на руки (за минусом включаемых начислений)
// |   Кн		|	КомпенсироватьИПН						| 1, если компенсируется ИПН, 0 иначе
// |   Кв		|	КомпенсироватьОПВ						| 1, если компенсируются ОПВ, 0 иначе
// |   Ку		|	КомпенсироватьУдержания					| 1, если компенсируются удержания, 0 иначе
// |   К1н		|	ПризнакИсчисленияИПН					| 1, если с работника удерживается ИПН, 0 иначе (льготник)
// |   К0н		|	ПризнакРасчетаИПН			 			| 1, если ИПН рассчитывается, иначе 0 - налог = 0 (обл база за месяц < 0)
// |   Бн		|   БазаДляИсчисленияИПН					| Сумма облагаемого ИПН дохода за месяц (уже отняты вычеты и ОПВ)
// |   %Н		|	ПроцентИПН								| Процент ИПН
// |   Н		|	РанееНалогИсчисленный					| Сумма ИПН, исчисленного за текущий месяц др. документами (пока по выборке получается, что всегда = 0!!!)
// |   К1в		| ПризнакПрименятьОграничениеПоДоходамОПВ 	| 0, если расчет ОПВ от базы (когда база < 75 МЗП), 1 если ОПВ с 75 МЗП
// |   Бв		|	БазаДляИсчисленияОПВ					| Сумма облагаемого ОПВ дохода за месяц (за счет прочих начислений, не относящихся в Х)
// |   %В		|	ПроцентОПВ								| Процент обязательных пенсионных взносов
// |   МаксОПВ	| 	МаксСуммаОПВ 							| Сумма ОПВ с 75 МЗП
// |   К2в		|	ПризнакИсчисленияОПВ					| 1, если по работнику исчисляются ОПВ, иначе 0 (пенсионер, инвалид 1, 2 гр. и т.д.)
// |   %Упр		|	ПроцентПрочихКомпенсируемыхУдержаний	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых не вычитается ОПВ и ИПН)
// |   %Ун		|	ПроцентКомпенсируемыхУдержанийБезИПН	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН)
// |   %Ув		|	ПроцентКомпенсируемыхУдержанийБезОПВ	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ОПВ)
// |   %Унв		|	ПроцентКомпенсируемыхУдержанийБезИПНиОПВ| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН и ОПВ)
// |   Фу		|	СуммаКомпенсируемыхУдержаний			| Компенсируемые удержания фиксированной суммой
// |   %ПФ		|	РезультирующийПроцентОПВ				|
// |   Фв		|	ФиксЧастьОПВ							|
// |   %НВ		|	РезультирующийПроцентИПНиОПВ			|
// |   Фн		|	ФиксЧастьИПН							|
// |   Кл		|	ПризнакПримененияЛьготы					| 1, если льгота в пределах льготируемого дохода, иначе 0 - в пределах годовой льготы ГЛ
// |   %Л		|	РезультирующийПроцентЛьготы				|
// |   Фл		|	ФиксЧастьЛьготы							|
// |   ЛБ		|	ЛьготируемаяБазаДляИсчисленияИПН		| База исчисления ИПН, к которой применяется льгота
// |   ГЛ		|	ПрименяемаяЛьготаЗаГод					| Годовой размер льготы
// 
Функция РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2007(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет)
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	СпособРасчета = ИсходныеДанные.СпособРасчета;
	Результат = 0;
	ЦелевойРазмер = 0;
	
	РезультатПолучен = Ложь;
	
	ЭтоПВРОсновныеНачисления = (ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	
	// Если это расчет "от обратного" для основного начисления, то не учитываем прочие суммы доходов, т.к.
	// налоги/взносы будут компенсироваться только для самого основного начисления и включаемых в него видов расчета.
	// Если идет расчет "от обратного" для прочих доплат, то их считаем таким образом, чтобы компенсировать только 
	// ту часть налога/взноса, которая начислена на сумму доплаты.
	Если ЭтоПВРОсновныеНачисления Тогда
		Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
			ОсновноеНачисление = Истина;
		Иначе
			ОсновноеНачисление = Ложь;
		КонецЕсли;
	Иначе
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// Если до этого никаких вообще начислений не было, то в любом случае считаем как "основное начисление"
	Если ИсходныеДанные.ОбщаяСуммаНачислений = 0 Тогда
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// определим целевой размер
	ЦелевойРазмер = СтрокаДвижений.Результат;
	
	// запомним целевой размер текущей строки расчета
	Если ЭтоПВРОсновныеНачисления Тогда
		
		СтрокаДвижений.ДополнительныеДанные = ЦелевойРазмер;
		
		Если ОсновноеНачисление Тогда
			// Увеличим целевой размер на размеры всех других расчетов "от обратного", введенных в текущем месяце,
			// их фактические результаты потом будут вычтены в конец расчета.
			ЦелевойРазмер = ЦелевойРазмер + ИсходныеДанные.РасчетОтОбратногоДополнительныеДанные;
		КонецЕсли;
		
	КонецЕсли;
	
	// Признаки компенсирования расчетом "от обратного" различных удержаний
	КомпенсироватьИПН 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, 1, 0);
	КомпенсироватьОПВ 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ, 1, 0);
	КомпенсироватьУдержания 	= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания, 1, 0);
	
	Если КомпенсироватьИПН <> 0 Или КомпенсироватьОПВ <> 0 Тогда
		Если Не ИсходныеДанные.ОтражениеПоПериодуРегистрации Тогда
			Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": расчет невозможен, т.к. в учетной политике по налоговому учету не установлен признак отражения налогов и взносов по периоду регистрации! ", СтатусСообщения.Важное);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Данные для расчета ИПН 
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		ПризнакПримененияЛьготы				= ?(ИсходныеДанные.ПризнакПримененияЛьготы > 0, 1, 0);
		ПризнакИсчисленияИПН 				= 1 - ПризнакПримененияЛьготы;
		БазаДляИсчисленияИПНЗаГод			= ИсходныеДанные.ОблагаемыйДоходЗаГод - ИсходныеДанные.НалоговыйВычетЗаГод - ИсходныеДанные.ИсчисленныеВзносыЗаГод;
		ЛьготируемаяБазаДляИсчисленияИПН	= ИсходныеДанные.ЛьготируемаяБазаДляИсчисленияИПН;
		ОблагаемыйИПНДоходЗаМесяц			= ИсходныеДанные.ОблагаемыйДоходЗаМесяц;
		БазаДляИсчисленияИПН				= ИсходныеДанные.ОблагаемыйДоход - ИсходныеДанные.НалоговыйВычетЗаМесяц - ИсходныеДанные.ИсчисленныеВзносыЗаМесяц;
		РанееНалогИсчисленный 				= ИсходныеДанные.РанееНалогИсчисленный;
		РанееПримененнаяЛьгота 				= ИсходныеДанные.РанееПримененнаяЛьгота;
		ПрименяемаяЛьготаЗаГод 				= ИсходныеДанные.ПрименяемаяЛьготаЗаГод;
		ПроцентИПН							= ИсходныеДанные.ПроцентИПН / 100;
		
		Если ПроцентИПН = 0 Тогда
			Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Не определена ставка ИПН", СтатусСообщения.Важное);
			Возврат 0;
		КонецЕсли;
	Иначе
		// Если компенсация ИПН не нужна, то все по нулям
		ПризнакИсчисленияИПН 				= 0;
		ПризнакПримененияЛьготы				= 0;
		БазаДляИсчисленияИПНЗаГод			= 0;
		ЛьготируемаяБазаДляИсчисленияИПН	= 0;
		ОблагаемыйИПНДоходЗаМесяц			= 0;
		БазаДляИсчисленияИПН				= 0;
		РанееНалогИсчисленный 				= 0;
		РанееПримененнаяЛьгота				= 0;
		ПрименяемаяЛьготаЗаГод 				= 0;
		ПроцентИПН							= 0;
	КонецЕсли;
	
	// Данные для расчета ОПВ
	Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
		ПризнакИсчисленияОПВ 				= ?(ИсходныеДанные.ПризнакИсчисленияОПВ, 1, 0);
		БазаДляИсчисленияОПВ 				= ИсходныеДанные.БазаДляИсчисленияОПВ;
		РазмерОграниченияПоДоходамОПВ 		= ИсходныеДанные.РазмерОграниченияПоДоходамОПВ;
		РанееВзносыИсчисленные 				= ИсходныеДанные.РанееВзносыИсчисленные;
		ПроцентОПВ 							= ИсходныеДанные.ПроцентОПВ; // ставка ОПВ
		МаксСуммаОПВ					 	= ПроцентОПВ * РазмерОграниченияПоДоходамОПВ; // ОПВ с макс суммы облагаемого дохода
		ПрочиеДоходыДляОПВ					= ИсходныеДанные.ПрочиеДоходыДляОПВ;
	Иначе
		// Если учет ОПВ не нужен, то все по нулям
		ПризнакИсчисленияОПВ 				= 0;
		БазаДляИсчисленияОПВ 				= 0;
		РазмерОграниченияПоДоходамОПВ 		= 0;
		РанееВзносыИсчисленные 				= 0;
		ПроцентОПВ 							= 0; // ставка ОПВ
		МаксСуммаОПВ					 	= 0; // ОПВ с макс суммы облагаемого дохода
		ПрочиеДоходыДляОПВ					= 0;
	КонецЕсли;
	
	// Данные по прочим погашаемым удержаниям
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		СуммаКомпенсируемыхУдержаний			= ИсходныеДанные.СуммаКомпенсируемыхУдержаний;
		ПроцентКомпенсируемыхУдержанийБезИПН	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПН / 100;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезОПВ / 100;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ / 100;
		ПроцентПрочихКомпенсируемыхУдержаний		= ИсходныеДанные.ПроцентПрочихКомпенсируемыхУдержаний / 100;
	Иначе
		// Если удержания не компенсируются, то все по нулям
		СуммаКомпенсируемыхУдержаний			= 0;
		ПроцентКомпенсируемыхУдержанийБезИПН	= 0;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= 0;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= 0;
		ПроцентПрочихКомпенсируемыхУдержаний		= 0;
	КонецЕсли;
	
	// Сумма, которую надо начислить, чтобы с учетом включаемых начислений получить нужную сумму на руки
	ИскомаяСуммаНачислений = ЦелевойРазмер - ИсходныеДанные.СуммаВключаемыхНачислений;
	
	// округлим искомую сумму
	ИскомаяСуммаНачислений = ОбщегоНазначения.ОкруглитьЧисло(ИскомаяСуммаНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
	
	Если НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		 
		// Считать нечего, т.к. либо ничего не компенсируем (что ошибка) либо не положено ничего считать 
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Не определены компенсируемые удержания ", СтатусСообщения.Важное);
		
		Возврат ИскомаяСуммаНачислений;		
		
	КонецЕсли;
		
	ПризнакПрименятьОграничениеПоДоходамОПВ = 0; // если 1, то применяется ограничение по доходам, облагаемым ОПВ
	НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
	ПризнакРасчетаИПН = 1; // если 1, то считаем ИПН, если 0, то налог=0 (нет обл. доходов за месяц)
	
	// Если это расчет "от обратного" для доплат, то определяем сумму налога/взноса с уже начисленных доходов
	Если Не ОсновноеНачисление Тогда
	
		// Скорректируем льготу
		Если ПризнакПримененияЛьготы = 0 Тогда
			// льготу вообще не считаем
			ПрименяемаяЛьготаЗаГод = 0;
			ЛьготируемаяБазаДляИсчисленияИПН = 0;
			РанееПримененнаяЛьгота = 0;
		КонецЕсли;
	
		// Расчет ОПВ
		ИсчисленныеОПВ = 0;
		Если ПризнакИсчисленияОПВ <> 0 Тогда
			ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ) - РанееВзносыИсчисленные;
		КонецЕсли;
		
		ИсчисленныеОПВ = ОбщегоНазначения.ОкруглитьЧисло(ИсчисленныеОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Расчет ИПН 
		ИсчисленныйИПН = 0;		
		Если ПрименяемаяЛьготаЗаГод = 0 Тогда
			// вообще без льготы
			ОблагаемаяИПНСумма = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
		ИначеЕсли ПрименяемаяЛьготаЗаГод > ЛьготируемаяБазаДляИсчисленияИПН - ПризнакПримененияЛьготы * ИсчисленныеОПВ Тогда
			// еще всю льготу не выбрал
			ОблагаемаяИПНСумма = 0;
		Иначе
			 ОблагаемаяИПНСумма = Мин(БазаДляИсчисленияИПН - ИсчисленныеОПВ, ЛьготируемаяБазаДляИсчисленияИПН - ПризнакПримененияЛьготы * ИсчисленныеОПВ - ПрименяемаяЛьготаЗаГод);
		КонецЕсли;
		Если ОблагаемаяИПНСумма > 0 Тогда
			ИсчисленныйИПН = ОблагаемаяИПНСумма * ПроцентИПН;
			ИсчисленныйИПН = Окр(ИсчисленныйИПН, 2) - РанееНалогИсчисленный;
		КонецЕсли;
		
		ИсчисленныйИПН = ОбщегоНазначения.ОкруглитьЧисло(ИсчисленныйИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// При расчете "от обратного" для доплат ищем такую сумму, чтобы после удержания налога/взноса получил на руки 
		// такую же сумму, какую получил бы без доплаты, + чистый размер самой доплаты		
		СуммаНаРукиСПрочихНачислений = (ИсходныеДанные.ОбщаяСуммаНачислений - ИсходныеДанные.СуммаВключаемыхНачислений) - ИсчисленныеОПВ - ИсчисленныйИПН;
		ИскомаяСуммаНачислений = ИскомаяСуммаНачислений + СуммаНаРукиСПрочихНачислений;
		БазаДляИсчисленияОПВ = - ИсходныеДанные.НеОблагаемыйОПВДоходЗаМесяц + ПрочиеДоходыДляОПВ;
		БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц - ИсходныеДанные.НеОблагаемыйИПНДоходЗаМесяц; // т.к. доход за месяц полностью будет входить в результат решения уравнения
		БазаДляИсчисленияИПНЗаГод = БазаДляИсчисленияИПНЗаГод - ОблагаемыйИПНДоходЗаМесяц - ИсходныеДанные.НеОблагаемыйИПНДоходЗаМесяц;
		Если ПризнакПримененияЛьготы = 1 Тогда
			ЛьготируемаяБазаДляИсчисленияИПН = ЛьготируемаяБазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц;
		КонецЕсли;
	
		// чтобы из-за того, если для доплаты не стоит компенсация ОПВ, не удержалось ОПВ с основных начислений
		// или из-за того, что рассчитываемый вид сам по себе не облагается ОПВ,
		// включим его дополнительно как компенсируемые удержания суммой
		Если (КомпенсироватьОПВ = 0 ИЛИ ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом) И ИсчисленныеОПВ <> 0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
			КомпенсироватьУдержания = 1;
			Если ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
				БазаДляИсчисленияИПНЗаГод = БазаДляИсчисленияИПНЗаГод - ИсчисленныеОПВ;
				ПризнакИсчисленияОПВ = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если КомпенсироватьИПН = 0 И ИсчисленныйИПН <>0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныйИПН;
			КомпенсироватьУдержания = 1;
		КонецЕсли;
		
	Иначе
		// если основное начисление (за отработанное время)
		БазаДляИсчисленияОПВ = ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений + ПрочиеДоходыДляОПВ;
		БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц + ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений;
		БазаДляИсчисленияИПНЗаГод = БазаДляИсчисленияИПНЗаГод - ОблагаемыйИПНДоходЗаМесяц + ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений;
		
		Если ПризнакИсчисленияОПВ = 1 Тогда
			// если данный вид ОПВ не облагается, но база для исчисления с других видов есть
			ПризнакИсчисленияОПВ = ?(ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом, 1, 0);
			ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ) - РанееВзносыИсчисленные;
			Если ПризнакИсчисленияОПВ = 0 И ИсчисленныеОПВ <> 0 Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
				БазаДляИсчисленияИПНЗаГод = БазаДляИсчисленияИПНЗаГод - ИсчисленныеОПВ;
				СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
				КомпенсироватьУдержания = 1;
			КонецЕсли;			
		КонецЕсли;
		
		Если ПризнакПримененияЛьготы = 1 Тогда
			ЛьготируемаяБазаДляИсчисленияИПН = ЛьготируемаяБазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц + ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений;
		Иначе
			// льготу не считаем
			ПрименяемаяЛьготаЗаГод = 0;
			ЛьготируемаяБазаДляИсчисленияИПН = 0;
			РанееПримененнаяЛьгота = 0;
		КонецЕсли;
	КонецЕсли;
	
	ШагИтерации = 0;	
	МаксимальноеЧислоШагов = 100;
	
	Пока Не РезультатПолучен И (ШагИтерации < МаксимальноеЧислоШагов) Цикл
		
		ШагИтерации = ШагИтерации + 1;
		РезультатПолучен = Истина;		
		
		// Вычисляем вспомогательные переменные
		РезультирующийПроцентОПВ = ПроцентОПВ * ПризнакИсчисленияОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ);
		
		ФиксЧастьОПВ			 = ПризнакИсчисленияОПВ * (БазаДляИсчисленияОПВ * ПроцентОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ) + 
														   ПризнакПрименятьОграничениеПоДоходамОПВ * МаксСуммаОПВ - РанееВзносыИсчисленные);
		
														   
		РезультирующийПроцентЛьготы = ПризнакПримененияЛьготы * (1 - РезультирующийПроцентОПВ);
		
		ФиксЧастьЛьготы				= ПризнакПримененияЛьготы * (ЛьготируемаяБазаДляИсчисленияИПН - ФиксЧастьОПВ) + 
										(1 - ПризнакПримененияЛьготы) * ПрименяемаяЛьготаЗаГод - РанееПримененнаяЛьгота;
														   
										
		РезультирующийПроцентИПНиОПВ = ПризнакИсчисленияИПН * ПризнакРасчетаИПН * ПроцентИПН * 
											(1 - РезультирующийПроцентОПВ - РезультирующийПроцентЛьготы);
											
		ФиксЧастьИПН			= ПризнакИсчисленияИПН * ПризнакРасчетаИПН * ПроцентИПН * (БазаДляИсчисленияИПН - ФиксЧастьОПВ - ФиксЧастьЛьготы) -
									ПризнакИсчисленияИПН * РанееНалогИсчисленный;
		
		КоэффициентИПН = КомпенсироватьИПН - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		КоэффициентОПВ = КомпенсироватьОПВ - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		ПроцентКомпенсируемыхУдержаний = ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ + 
											ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + ПроцентПрочихКомпенсируемыхУдержаний;
								  		
		Числитель = (ИскомаяСуммаНачислений + 
					КоэффициентИПН * ФиксЧастьИПН +
					КоэффициентОПВ * ФиксЧастьОПВ + 
					КомпенсироватьУдержания * СуммаКомпенсируемыхУдержаний);
					
		Знаменатель = (1 - 
	     				КоэффициентИПН * РезультирующийПроцентИПНиОПВ -
					   	КоэффициентОПВ * РезультирующийПроцентОПВ - 
						КомпенсироватьУдержания * ПроцентКомпенсируемыхУдержаний);
								  		
		Результат = ?(Знаменатель <> 0, Числитель / Знаменатель, 0);
		Результат = ОбщегоНазначения.ОкруглитьЧисло(Результат, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Проверим граничные условия, при которых делали расчет
		РезультатОПВ = ПризнакИсчисленияОПВ * ПроцентОПВ * (БазаДляИсчисленияОПВ + Результат);

		Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
			// Наличие облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияОПВ И ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ОПВ исчисляются
					
					Если БазаДляИсчисленияОПВ + Результат > 0 Тогда
						Если ПризнакИсчисленияОПВ <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 1;
					Иначе
						Если ПризнакИсчисленияОПВ <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если РезультатОПВ > МаксСуммаОПВ Тогда
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 1;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		РезультатОПВ = РезультатОПВ - РанееВзносыИсчисленные;
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда 
			// Учтем граничные условия, возникающие при расчете ИПН
			
			// Льготы по ИПН
			ОблагаемаяИПНСумма = 0;
			Если РезультатПолучен Тогда
				НоваяЛьготируемаяБазаДляИсчисленияИПН = Макс(Результат * РезультирующийПроцентЛьготы + ФиксЧастьЛьготы + РанееПримененнаяЛьгота, 0);
				ОблагаемаяИПНСумма = БазаДляИсчисленияИПНЗаГод + Результат - РезультатОПВ - НоваяЛьготируемаяБазаДляИсчисленияИПН;
				Если ОблагаемаяИПНСумма > 0 Или ПрименяемаяЛьготаЗаГод = 0 Тогда
					Если ПризнакИсчисленияИПН <> 1 Тогда
						// Ранее налог не рассчитывался, теперь же появилась облагаемая база - нужен еще один шаг цикла
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакИсчисленияИПН = 1;
				Иначе
					Если ПризнакИсчисленияИПН <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакИсчисленияИПН = 0;
				КонецЕсли;
				
				Если (НоваяЛьготируемаяБазаДляИсчисленияИПН <> 0 ИЛИ ПрименяемаяЛьготаЗаГод <> 0)
						И НоваяЛьготируемаяБазаДляИсчисленияИПН <> ПрименяемаяЛьготаЗаГод Тогда
						
					// Размер применяемой льготы
					Если НоваяЛьготируемаяБазаДляИсчисленияИПН > ПрименяемаяЛьготаЗаГод Тогда
						// необходимо применять льготу в пределах льготируемого дохода
						Если ПризнакПримененияЛьготы <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакПримененияЛьготы = 0;
					Иначе
						// ранее льгота применялась в размере годовой, надо в пределах льготируемого дохода
						Если ПризнакПримененияЛьготы <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакПримененияЛьготы = 1;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			// проверка на то, чтобы ИПН не был отрицательным, если обл. доходы за месяц < 0
			Если РезультатПолучен Тогда
				ОблагаемаяИПНСумма = БазаДляИсчисленияИПН + Результат - РезультатОПВ;
				Если ПризнакПримененияЛьготы <> 0 Тогда
					ОблагаемаяИПНСумма = ОблагаемаяИПНСумма - (ПрименяемаяЛьготаЗаГод - РанееПримененнаяЛьгота);
				КонецЕсли;

				Если ОблагаемаяИПНСумма < 0 Тогда
					// ранее налог считался, но облагаемая сумма за месяц < 0 - на следующем шаге не считаем
					Если ПризнакРасчетаИПН <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 0;
				Иначе
					// ранее налог не считался, но теперь облагаемая сумма > 0 и налог есть с чего считать
					Если ПризнакРасчетаИПН <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не РезультатПолучен Тогда
		// вышли из цикла по превышению макс допустимого числа шагов
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Превышено допустимо число шагов итерации ", СтатусСообщения.Важное);
	Иначе
		// Из-за округления могут получиться лишние тиынки
		ИсчисленныйИПН = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентИПНиОПВ + ФиксЧастьИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеОПВ = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентОПВ + ФиксЧастьОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеУдержания = ОбщегоНазначения.ОкруглитьЧисло(КомпенсироватьУдержания * (Результат * ПроцентПрочихКомпенсируемыхУдержаний + 
												(Результат - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезОПВ +
												(Результат - ИсчисленныйИПН) * ПроцентКомпенсируемыхУдержанийБезИПН +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + 
												СуммаКомпенсируемыхУдержаний), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		ОбщаяСуммаКомпенсируемыхУдержаний = ИсчисленныйИПН + ИсчисленныеОПВ + ИсчисленныеУдержания;
		Разность = ИскомаяСуммаНачислений - (Результат - ОбщаяСуммаКомпенсируемыхУдержаний);
		
		Если Разность > -1 И Разность < 1 Тогда
			Результат = Результат + Разность;
		КонецЕсли;
		
		Если Не ОсновноеНачисление Тогда
			Результат = Результат - ИсходныеДанные.ОбщаяСуммаНачислений; 
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = ОбщегоНазначения.ОкруглитьЧисло(?(РезультатПолучен, Результат, 0), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);

	СтрокаДвижений.Результат = Результат;

	Если КомментироватьРасчет Тогда
		РаботаССообщениями.ЗаменитьТекстКомментарияРасчета("Результат расчета: <НомерСтроки" + Строка(СтрокаДвижений.НомерСтроки) + ">", 
													   		"Результат расчета: " + Результат);
    КонецЕсли;
	
	Возврат Результат;
	
КонецФункции  // РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2007

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным для способа расчета "от обратного"
// по правилам, действующим с 2009 года (фикс. ставка ИПН)
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  ТаблицаСтавокИПН - таблица значений со ставками ИПН за текущий рассчитываемый период регистрации для расчета "от обратного"
//
// Возвращаемое значение:
//  Число - результат расчета.
//
// Расчет "от обратного" производится на основе решения уравнения:
// 
// 		Х - Кн * ИПН - Кв * ОПВ - Ку * Уд = Р,
// где
//                    
//		ИПН = К0н * (Х + Бн - Льгот - ОПВ - Вычет) * %Н
//
//      ОПВ = ((1- К1в)*(Х + Бв) * %В + К1в * МаксОПВ) * К2в
//      
//      Уд  = Х * %Упр + Фу + (Х - ОПВ) * %Ув + (Х - ИПН) * %Ун + (Х - ОПВ - ИПН) * %Унв
//
// Относительно Х:
//
//      ОПВ(Х) = Х * %ПФ + Фв
//
//				%ПФ = %В * К2в * (1 - К1в)
//           
//				Фв  = Бв * %В * (1 - К1в) * К2в + К1в * МаксОПВ * К2в
//
//		ИПН(Х) = Х * %НВ + Фн
//
//				%НВ = К0н * %Н * (1 - %ПФ)
//
//				Фн  = К0н * %Н * (Бн - Льгот - Фв - Вычет)
//
// Решение уравнения:
//               Р + К'н * Фн + К'в * Фв + Ку * Фу
//		Х	  = -----------------------------------
//               1 - К'н * %НВ - К'в * %ПФ - Ку * %У'
//
// где
//		К'н   = Кн - Ку * %Ун - Ку * %Унв
//		К'в   = Кв - Ку * %Ув - Ку * %Унв
//		%У'   = %Упр + %Ув + %Ун + %Унв
//
//
// Обозначения:
// |В формуле	|	Переменная в программе					| Комментарий
// ---------------------------------------------------------------------------------------------------------------
// |   Х		|	ИскомаяСуммаНачислений					| Сумма, которую хотят получить на руки (за минусом включаемых начислений)
// |   Кн		|	КомпенсироватьИПН						| 1, если компенсируется ИПН, 0 иначе
// |   Кв		|	КомпенсироватьОПВ						| 1, если компенсируются ОПВ, 0 иначе
// |   Ку		|	КомпенсироватьУдержания					| 1, если компенсируются удержания, 0 иначе
// |   К0н		|	ПризнакРасчетаИПН			 			| 1, если ИПН рассчитывается, иначе 0 - налог = 0 (обл база за месяц < 0)
// |   Бн		|   БазаДляИсчисленияИПН					| Сумма облагаемого ИПН дохода за месяц (уже отняты вычеты и ОПВ)
// |   %Н		|	ПроцентИПН								| Процент ИПН
// |   К1в		| ПризнакПрименятьОграничениеПоДоходамОПВ 	| 0, если расчет ОПВ от базы (когда база < 75 МЗП), 1 если ОПВ с 75 МЗП
// |   Бв		|	БазаДляИсчисленияОПВ					| Сумма облагаемого ОПВ дохода за месяц (за счет прочих начислений, не относящихся в Х)
// |   %В		|	ПроцентОПВ								| Процент обязательных пенсионных взносов
// |   МаксОПВ	| 	МаксСуммаОПВ 							| Сумма ОПВ с 75 МЗП
// |   К2в		|	ПризнакИсчисленияОПВ					| 1, если по работнику исчисляются ОПВ, иначе 0 (пенсионер, инвалид 1, 2 гр. и т.д.)
// |   %Упр		|	ПроцентПрочихКомпенсируемыхУдержаний	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых не вычитается ОПВ и ИПН)
// |   %Ун		|	ПроцентКомпенсируемыхУдержанийБезИПН	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН)
// |   %Ув		|	ПроцентКомпенсируемыхУдержанийБезОПВ	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ОПВ)
// |   %Унв		|	ПроцентКомпенсируемыхУдержанийБезИПНиОПВ| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН и ОПВ)
// |   Фу		|	СуммаКомпенсируемыхУдержаний			| Компенсируемые удержания фиксированной суммой
// |   %ПФ		|	РезультирующийПроцентОПВ				|
// |   Фв		|	ФиксЧастьОПВ							|
// |   %НВ		|	РезультирующийПроцентИПНиОПВ			|
// |   Фн		|	ФиксЧастьИПН							|
// |   Льгот	|	ОстатокЛьготы							| Неиспользованная часть льготы, доступна в текущем месяца
// |   Вычет	|	ОстатокВычета							| Неиспользованный вычет с учетом переносимых с начала года, доступный в текущем месяце
// 
Функция РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2009(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет)
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	СпособРасчета = ИсходныеДанные.СпособРасчета;
	Результат = 0;
	ЦелевойРазмер = 0;
	
	РезультатПолучен = Ложь;
	
	ЭтоПВРОсновныеНачисления = (ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	
	// Если это расчет "от обратного" для основного начисления, то не учитываем прочие суммы доходов, т.к.
	// налоги/взносы будут компенсироваться только для самого основного начисления и включаемых в него видов расчета.
	// Если идет расчет "от обратного" для прочих доплат, то их считаем таким образом, чтобы компенсировать только 
	// ту часть налога/взноса, которая начислена на сумму доплаты.
	Если ЭтоПВРОсновныеНачисления Тогда
		Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
			ОсновноеНачисление = Истина;
		Иначе
			ОсновноеНачисление = Ложь;
		КонецЕсли;
	Иначе
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// Если до этого никаких вообще начислений не было, то в любом случае считаем как "основное начисление"
	Если ИсходныеДанные.ОбщаяСуммаНачислений = 0 Тогда
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// определим целевой размер
	ЦелевойРазмер = СтрокаДвижений.Результат;
		
	// запомним целевой размер текущей строки расчета
	Если ЭтоПВРОсновныеНачисления Тогда
		
		СтрокаДвижений.ДополнительныеДанные = ЦелевойРазмер;
		
		Если ОсновноеНачисление Тогда
			// Увеличим целевой размер на размеры всех других расчетов "от обратного", введенных в текущем месяце,
			// их фактические результаты потом будут вычтены в конец расчета.
			ЦелевойРазмер = ЦелевойРазмер + ИсходныеДанные.РасчетОтОбратногоДополнительныеДанные;
		КонецЕсли;
		
	КонецЕсли;
	
	// Признаки компенсирования расчетом "от обратного" различных удержаний
	КомпенсироватьИПН 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, 1, 0);
	КомпенсироватьОПВ 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ, 1, 0);
	КомпенсироватьУдержания 	= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания, 1, 0);
	
	Если КомпенсироватьИПН <> 0 Или КомпенсироватьОПВ <> 0 Тогда
		Если Не ИсходныеДанные.ОтражениеПоПериодуРегистрации Тогда
			МассивПараметров = Новый Массив;
			Если НЕ ИсходныеДанные.Регистратор.Пустая() Тогда
				МассивПараметров.Добавить(ИсходныеДанные.Регистратор.Организация);
			КонецЕсли;
			РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметров);
			
			РаботаССообщениями.ОшибкаРасчета("", "Для " + ИсходныеДанные.СотрудникНаименование + " расчет """ + ИсходныеДанные.ВидРасчетаНаименование 
													+ """ не возможен, т.к. в учетной политике по налоговому учету не установлен признак отражения 
													|налогов и взносов по периоду регистрации", РасшифровкаУчетнойПолитики);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Данные для расчета ИПН 
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		БазаДляИсчисленияИПН						= ИсходныеДанные.ОблагаемыйДоход;

		ОстатокЛьготы								= Макс(ИсходныеДанные.ЛьготаПоДоходу - ИсходныеДанные.ПримененнаяЛьготаЗаГод - ИсходныеДанные.ПримененнаяЛьготаНаПредыдущемМестеРаботы, 0);
		ОстатокВычета								= Макс(ИсходныеДанные.РазрешенныйВычетЗаГод + ИсходныеДанные.НалоговыйВычетЛичный - ИсходныеДанные.ПримененныйВычетЗаГод, 0);
		ПроцентИПН									= ИсходныеДанные.ПроцентИПН;
		ПрочиеДоходыДляИПН							= ИсходныеДанные.ПрочиеДоходыДляИПН;
		                   		
		Если ПроцентИПН = 0 Тогда
			РасшифровкаСтавкиИПН = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахИПН.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не заполнено значение ставки индивидуального подоходного налога", РасшифровкаСтавкиИПН);
			Возврат 0;
		КонецЕсли;
	Иначе
		// Если компенсация ИПН не нужна, то все по нулям
		БазаДляИсчисленияИПН						= 0;

		ОстатокЛьготы								= 0;
		ОстатокВычета								= 0;
		ПроцентИПН									= 0;
		ПрочиеДоходыДляИПН							= 0;
	КонецЕсли;
	
	// Данные для расчета ОПВ
	Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
		ПризнакИсчисленияОПВ 				= ?(ИсходныеДанные.ПризнакИсчисленияОПВ, 1, 0);
		БазаДляИсчисленияОПВ 				= ИсходныеДанные.БазаДляИсчисленияОПВ;
		РазмерОграниченияПоДоходамОПВ 		= ИсходныеДанные.РазмерОграниченияПоДоходамОПВ;
		ПроцентОПВ 							= ИсходныеДанные.ПроцентОПВ; // ставка ОПВ
		МаксСуммаОПВ 						= ПроцентОПВ * РазмерОграниченияПоДоходамОПВ; // ОПВ с макс суммы облагаемого дохода
		ПрочиеДоходыДляОПВ					= ИсходныеДанные.ПрочиеДоходыДляОПВ;
	Иначе
		// Если учет ОПВ не нужен, то все по нулям
		ПризнакИсчисленияОПВ 				= 0;
		БазаДляИсчисленияОПВ 				= 0;
		РазмерОграниченияПоДоходамОПВ 		= 0;
		ПроцентОПВ 							= 0; // ставка ОПВ
		МаксСуммаОПВ 						= 0; // ОПВ с макс суммы облагаемого дохода
		ПрочиеДоходыДляОПВ					= 0;
	КонецЕсли;
	
	// Данные по прочим погашаемым удержаниям
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		СуммаКомпенсируемыхУдержаний			= ИсходныеДанные.СуммаКомпенсируемыхУдержаний;
		ПроцентКомпенсируемыхУдержанийБезИПН	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПН / 100;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезОПВ / 100;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ / 100;
		ПроцентПрочихКомпенсируемыхУдержаний		= ИсходныеДанные.ПроцентПрочихКомпенсируемыхУдержаний / 100;
	Иначе
		// Если удержания не компенсируются, то все по нулям
		СуммаКомпенсируемыхУдержаний			= 0;
		ПроцентКомпенсируемыхУдержанийБезИПН	= 0;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= 0;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= 0;
		ПроцентПрочихКомпенсируемыхУдержаний		= 0;
	КонецЕсли;
	
	// Сумма, которую надо начислить, чтобы с учетом включаемых начислений получить нужную сумму на руки
	ИскомаяСуммаНачислений = ЦелевойРазмер - ИсходныеДанные.СуммаВключаемыхНачислений;
	
	// округлим искомую сумму
	ИскомаяСуммаНачислений = ОбщегоНазначения.ОкруглитьЧисло(ИскомаяСуммаНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
	
	Если НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		 
		// Считать нечего, т.к. либо ничего не компенсируем 
		РаботаССообщениями.ОшибкаРасчета(ИсходныеДанные.ВидРасчетаНаименование, ": Не определены компенсируемые удержания", ВидРасчета);
		
		Возврат ИскомаяСуммаНачислений;		
		
	КонецЕсли;
	
	ПризнакПрименятьОграничениеПоДоходамОПВ = 0; // если 1, то применяется ограничение по доходам, облагаемым ОПВ
	НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
	ПризнакРасчетаИПН = 1; // если 1, то считаем ИПН, если 0, то налог=0 (нет обл. доходов за месяц)
	
	// Если это расчет "от обратного" для доплат, то определяем сумму налога/взноса с уже начисленных доходов
	Если Не ОсновноеНачисление Тогда
	
		// Расчет ОПВ
		ИсчисленныеОПВ = 0;
		Если ПризнакИсчисленияОПВ <> 0 Тогда
			ИсчисленныеОПВ = Мин(ПроцентОПВ * (БазаДляИсчисленияОПВ - ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений), МаксСуммаОПВ);
		КонецЕсли;
		
		ИсчисленныеОПВ = ОбщегоНазначения.ОкруглитьЧисло(ИсчисленныеОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Расчет ИПН 
		ИсчисленныйИПН = 0;		
		ОблагаемаяИПНСумма = (БазаДляИсчисленияИПН - ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений) - ОстатокЛьготы - ИсчисленныеОПВ - ОстатокВычета;
		Если ОблагаемаяИПНСумма > 0 Тогда
			ИсчисленныйИПН = ОблагаемаяИПНСумма * ПроцентИПН;
			ИсчисленныйИПН = Окр(ИсчисленныйИПН, 2);
		КонецЕсли;
		
		ИсчисленныйИПН = ОбщегоНазначения.ОкруглитьЧисло(ИсчисленныйИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// При расчете "от обратного" для доплат ищем такую сумму, чтобы после удержания налога/взноса получил на руки 
		// такую же сумму, какую получил бы без доплаты, + чистый размер самой доплаты		
		// ИсходныеДанные.ОбщаяСуммаНачислений - уже включает ИсходныеДанные.СуммаВключаемыхНачислений
		СуммаНаРукиСПрочихНачислений = (ИсходныеДанные.ОбщаяСуммаНачислений) - ИсчисленныеОПВ - ИсчисленныйИПН;
		ИскомаяСуммаНачислений = ИскомаяСуммаНачислений + СуммаНаРукиСПрочихНачислений;
		БазаДляИсчисленияОПВ = - ИсходныеДанные.НеОблагаемыйОПВДоходЗаМесяц + ПрочиеДоходыДляОПВ;
		БазаДляИсчисленияИПН = - ИсходныеДанные.НеОблагаемыйИПНДоходЗаМесяц; // т.к. доход за месяц полностью будет входить в результат решения уравнения
	
		// чтобы из-за того, если для доплаты не стоит компенсация ОПВ, не удержалось ОПВ с основных начислений
		// или из-за того, что рассчитываемый вид сам по себе не облагается ОПВ,
		// включим его дополнительно как компенсируемые удержания суммой
		Если (КомпенсироватьОПВ = 0 ИЛИ ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом) И ИсчисленныеОПВ <> 0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
			КомпенсироватьУдержания = 1;
			Если ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
				ПризнакИсчисленияОПВ = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если КомпенсироватьИПН = 0 И ИсчисленныйИПН <>0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныйИПН;
			КомпенсироватьУдержания = 1;
		КонецЕсли;
		
	Иначе
		// если основное начисление (за отработанное время)
		БазаДляИсчисленияОПВ = ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений + ПрочиеДоходыДляОПВ;
		БазаДляИсчисленияИПН = БазаДляИсчисленияИПН; //ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений + ПрочиеДоходыДляИПН; для включения сумм доп.вычетов.
		
		Если ПризнакИсчисленияОПВ = 1 Тогда
			// если данный вид ОПВ не облагается, но база для исчисления с других видов есть
			ПризнакИсчисленияОПВ = ?(ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом, 1, 0);
			ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ);
			Если ПризнакИсчисленияОПВ = 0 И ИсчисленныеОПВ <> 0 Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
				СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
				КомпенсироватьУдержания = 1;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	ШагИтерации = 0;	
	МаксимальноеЧислоШагов = 100;
	
	Пока Не РезультатПолучен И (ШагИтерации < МаксимальноеЧислоШагов) Цикл
		
		ШагИтерации = ШагИтерации + 1;
		РезультатПолучен = Истина;		
		
		// Вычисляем вспомогательные переменные
		РезультирующийПроцентОПВ = ПроцентОПВ * ПризнакИсчисленияОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ);
		
		ФиксЧастьОПВ			 = ПризнакИсчисленияОПВ * (БазаДляИсчисленияОПВ * ПроцентОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ) + 
														   ПризнакПрименятьОграничениеПоДоходамОПВ * МаксСуммаОПВ);
		
		РезультирующийПроцентИПНиОПВ = ПризнакРасчетаИПН * ПроцентИПН * (1 - РезультирующийПроцентОПВ);
											
		ФиксЧастьИПН			= ПризнакРасчетаИПН * ПроцентИПН * (БазаДляИсчисленияИПН - ОстатокЛьготы - ФиксЧастьОПВ - ОстатокВычета);
		
		КоэффициентИПН = КомпенсироватьИПН - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		КоэффициентОПВ = КомпенсироватьОПВ - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		ПроцентКомпенсируемыхУдержаний = ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ + 
											ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + ПроцентПрочихКомпенсируемыхУдержаний;
								  		
		Числитель = (ИскомаяСуммаНачислений + 
					КоэффициентИПН * ФиксЧастьИПН +
					КоэффициентОПВ * ФиксЧастьОПВ + 
					КомпенсироватьУдержания * СуммаКомпенсируемыхУдержаний);
					
		Знаменатель = (1 - 
	     				КоэффициентИПН * РезультирующийПроцентИПНиОПВ -
					   	КоэффициентОПВ * РезультирующийПроцентОПВ - 
						КомпенсироватьУдержания * ПроцентКомпенсируемыхУдержаний);
								  		
		Результат = ?(Знаменатель <> 0, Числитель / Знаменатель, 0);
		Результат = ОбщегоНазначения.ОкруглитьЧисло(Результат, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Проверим граничные условия, при которых делали расчет
		РезультатОПВ = ПризнакИсчисленияОПВ * ПроцентОПВ * (БазаДляИсчисленияОПВ + Результат);

		Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
			// Наличие облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияОПВ И ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ОПВ исчисляются
					
					Если БазаДляИсчисленияОПВ + Результат > 0 Тогда
						Если ПризнакИсчисленияОПВ <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 1;
					Иначе
						Если ПризнакИсчисленияОПВ <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если РезультатОПВ > МаксСуммаОПВ Тогда
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 1;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда 
			// Учтем граничные условия, возникающие при расчете ИПН
			
			// проверка на то, чтобы ИПН не был отрицательным, если обл. доходы за месяц < 0
			Если РезультатПолучен Тогда
				ОблагаемаяИПНСумма = БазаДляИсчисленияИПН + Результат - РезультатОПВ - ОстатокЛьготы - ОстатокВычета;

				Если ОблагаемаяИПНСумма < 0 Тогда
					// ранее налог считался, но облагаемая сумма за месяц < 0 - на следующем шаге не считаем
					Если ПризнакРасчетаИПН <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 0;
				Иначе
					// ранее налог не считался, но теперь облагаемая сумма > 0 и налог есть с чего считать
					Если ПризнакРасчетаИПН <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не РезультатПолучен Тогда
		// вышли из цикла по превышению макс допустимого числа шагов
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Превышено допустимо число шагов итерации ", СтатусСообщения.Важное);
	Иначе
		// Из-за округления могут получиться лишние тиынки
		ИсчисленныйИПН = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентИПНиОПВ + ФиксЧастьИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеОПВ = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентОПВ + ФиксЧастьОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеУдержания = ОбщегоНазначения.ОкруглитьЧисло(КомпенсироватьУдержания * (Результат * ПроцентПрочихКомпенсируемыхУдержаний + 
												(Результат - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезОПВ +
												(Результат - ИсчисленныйИПН) * ПроцентКомпенсируемыхУдержанийБезИПН +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + 
												СуммаКомпенсируемыхУдержаний), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		ОбщаяСуммаКомпенсируемыхУдержаний = ИсчисленныйИПН + ИсчисленныеОПВ + ИсчисленныеУдержания;
		Разность = ИскомаяСуммаНачислений - (Результат - ОбщаяСуммаКомпенсируемыхУдержаний);
		
		Если Разность > -1 И Разность < 1 Тогда
			Результат = Результат + Разность;
		КонецЕсли;
		
		Если Не ОсновноеНачисление Тогда
			Результат = Результат - ИсходныеДанные.ОбщаяСуммаНачислений; 
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = ОбщегоНазначения.ОкруглитьЧисло(?(РезультатПолучен, Результат, 0), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);

	СтрокаДвижений.Результат = Результат;

	Если КомментироватьРасчет Тогда 
		РаботаССообщениями.ЗаменитьТекстКомментарияРасчета("Результат расчета: <НомерСтроки" + Строка(СтрокаДвижений.НомерСтроки) + ">", 
													   "Результат расчета: " + Результат);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции  // РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2009()

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным для способа расчета "от обратного"
// по правилам, действующим с 2009 года (фикс. ставка ИПН)
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  ТаблицаСтавокИПН - таблица значений со ставками ИПН за текущий рассчитываемый период регистрации для расчета "от обратного"
//
// Возвращаемое значение:
//  Число - результат расчета.
//
// Расчет "от обратного" производится на основе решения уравнения:
// 
// 		Х - Кн * ИПН - Кв * ОПВ - Ку * Уд = Р,
// где
//                    
//		ИПН = К0н * (Х + Бн - Льгот - ОПВ - Вычет) * %Н
//
//      ОПВ = ((1- К1в)*(Х + Бв) * %В + К1в * МаксОПВ) * К2в
//      
//      Уд  = Х * %Упр + Фу + (Х - ОПВ) * %Ув + (Х - ИПН) * %Ун + (Х - ОПВ - ИПН) * %Унв
//
// Относительно Х:
//
//      ОПВ(Х) = Х * %ПФ + Фв
//
//				%ПФ = %В * К2в * (1 - К1в)
//           
//				Фв  = Бв * %В * (1 - К1в) * К2в + К1в * МаксОПВ * К2в
//
//		ИПН(Х) = Х * %НВ + Фн
//
//				%НВ = К0н * %Н * (1 - %ПФ)
//
//				Фн  = К0н * %Н * (Бн - Льгот - Фв - Вычет)
//
// Решение уравнения:
//               Р + К'н * Фн + К'в * Фв + Ку * Фу
//		Х	  = -----------------------------------
//               1 - К'н * %НВ - К'в * %ПФ - Ку * %У'
//
// где
//		К'н   = Кн - Ку * %Ун - Ку * %Унв
//		К'в   = Кв - Ку * %Ув - Ку * %Унв
//		%У'   = %Упр + %Ув + %Ун + %Унв
//
//
// Обозначения:
// |В формуле	|	Переменная в программе					| Комментарий
// ---------------------------------------------------------------------------------------------------------------
// |   Х		|	ИскомаяСуммаНачислений					| Сумма, которую хотят получить на руки (за минусом включаемых начислений)
// |   Кн		|	КомпенсироватьИПН						| 1, если компенсируется ИПН, 0 иначе
// |   Кв		|	КомпенсироватьОПВ						| 1, если компенсируются ОПВ, 0 иначе
// |   Ку		|	КомпенсироватьУдержания					| 1, если компенсируются удержания, 0 иначе
// |   К0н		|	ПризнакРасчетаИПН			 			| 1, если ИПН рассчитывается, иначе 0 - налог = 0 (обл база за месяц < 0)
// |   Бн		|   БазаДляИсчисленияИПН					| Сумма облагаемого ИПН дохода за месяц (уже отняты вычеты и ОПВ)
// |   %Н		|	ПроцентИПН								| Процент ИПН
// |   К1в		| ПризнакПрименятьОграничениеПоДоходамОПВ 	| 0, если расчет ОПВ от базы (когда база < 75 МЗП), 1 если ОПВ с 75 МЗП
// |   Бв		|	БазаДляИсчисленияОПВ					| Сумма облагаемого ОПВ дохода за месяц (за счет прочих начислений, не относящихся в Х)
// |   %В		|	ПроцентОПВ								| Процент обязательных пенсионных взносов
// |   МаксОПВ	| 	МаксСуммаОПВ 							| Сумма ОПВ с 75 МЗП
// |   К2в		|	ПризнакИсчисленияОПВ					| 1, если по работнику исчисляются ОПВ, иначе 0 (пенсионер, инвалид 1, 2 гр. и т.д.)
// |   %Упр		|	ПроцентПрочихКомпенсируемыхУдержаний	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых не вычитается ОПВ и ИПН)
// |   %Ун		|	ПроцентКомпенсируемыхУдержанийБезИПН	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН)
// |   %Ув		|	ПроцентКомпенсируемыхУдержанийБезОПВ	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ОПВ)
// |   %Унв		|	ПроцентКомпенсируемыхУдержанийБезИПНиОПВ| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН и ОПВ)
// |   Фу		|	СуммаКомпенсируемыхУдержаний			| Компенсируемые удержания фиксированной суммой
// |   %ПФ		|	РезультирующийПроцентОПВ				|
// |   Фв		|	ФиксЧастьОПВ							|
// |   %НВ		|	РезультирующийПроцентИПНиОПВ			|
// |   Фн		|	ФиксЧастьИПН							|
// |   Льгот	|	ОстатокЛьготы							| Неиспользованная часть льготы, доступна в текущем месяца
// |   Вычет	|	ОстатокВычета							| Неиспользованный вычет с учетом переносимых с начала года, доступный в текущем месяце
// 
Функция РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2010(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет, СтруктураЦелевыхРазмеров)
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	СпособРасчета = ИсходныеДанные.СпособРасчета;
	Результат = 0;
	ЦелевойРазмер = 0;
	
	// Получем целевые размеры всех расчтов от обратного в сумме 
	// для вычисления коэффициента распределения
 	ТаблицаЦелевыхРазмеров = СтруктураЦелевыхРазмеров.ТаблицаЦелевыхРазмеров;
	ТаблицаЦелевыхРазмеровПоВидуРасчета = СтруктураЦелевыхРазмеров.ТаблицаЦелевыхРазмеровПоВидуРасчета;
	
	ЦелевойРазмерВсего = 0;
	ЦелевойРазмерВсегоПоВидуРасчета = 0;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Регистратор", ИсходныеДанные.Регистратор);
	СтруктураПоиска.Вставить("ФизЛицо", ИсходныеДанные.ФизЛицо);
	
	// Для распределения вычетов и льгот
	ЦелевойРазмерВсего = ТаблицаЦелевыхРазмеров.НайтиСтроки(СтруктураПоиска)[0].ЦелевойРазмер;

	СтруктураПоиска.Вставить("ВидРасчетаНаименование", ИсходныеДанные.ВидРасчетаНаименование);
	
	// Для распределения включаемых начислений
	ЦелевойРазмерВсегоПоВидуРасчета = ТаблицаЦелевыхРазмеровПоВидуРасчета.НайтиСтроки(СтруктураПоиска)[0].ЦелевойРазмер;
	
	РезультатПолучен = Ложь;
	
	ЭтоПВРОсновныеНачисления = (ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	
	// определим целевой размер
	ЦелевойРазмер = СтрокаДвижений.Результат;
	
	// Для вычетов и льгот
	КоэффициентРаспределения = ?(ЦелевойРазмерВсего <= 0, 1, ЦелевойРазмер / ЦелевойРазмерВсего);
	
	// Для включаемых начислений
	КоэффициентРаспределенияВключаемыхНачислений = ?(ЦелевойРазмерВсегоПоВидуРасчета <= 0, 1, ЦелевойРазмер / ЦелевойРазмерВсегоПоВидуРасчета);
	
	// запомним целевой размер текущей строки расчета
	СтрокаДвижений.ДополнительныеДанные = ЦелевойРазмер;
		
	// Увеличим целевой размер на размеры всех других расчетов "от обратного", введенных в текущем месяце,
	// их фактические результаты потом будут вычтены в конец расчета.
	ЦелевойРазмер = ЦелевойРазмер + ИсходныеДанные.РасчетОтОбратногоДополнительныеДанные * КоэффициентРаспределения;
	
	// Признаки компенсирования расчетом "от обратного" различных удержаний
	КомпенсироватьИПН 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, 1, 0);
	КомпенсироватьОПВ 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ, 1, 0);
	КомпенсироватьУдержания 	= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания, 1, 0);
	
	Если КомпенсироватьИПН <> 0 Или КомпенсироватьОПВ <> 0 Тогда
		Если Не ИсходныеДанные.ОтражениеПоПериодуРегистрации Тогда
			МассивПараметров = Новый Массив;
			Если НЕ ИсходныеДанные.Регистратор.Пустая() Тогда
				МассивПараметров.Добавить(ИсходныеДанные.Регистратор.Организация);
			КонецЕсли;
			РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметров);
			
			РаботаССообщениями.ОшибкаРасчета("", "Для " + ИсходныеДанные.СотрудникНаименование + " расчет """ + ИсходныеДанные.ВидРасчетаНаименование 
													+ """ не возможен, т.к. в учетной политике по налоговому учету не установлен признак отражения 
													|налогов и взносов по периоду регистрации", РасшифровкаУчетнойПолитики);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Данные для расчета ИПН 
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		БазаДляИсчисленияИПН						= ИсходныеДанные.ОблагаемыйДоход;
		ОстатокЛьготы								= Макс(ИсходныеДанные.ЛьготаПоДоходу - ИсходныеДанные.ПримененнаяЛьготаЗаГод - ИсходныеДанные.ПримененнаяЛьготаНаПредыдущемМестеРаботы, 0);
		ОстатокВычета								= ?(ВидРасчета["ВидДохода"] <> Справочники.ВидыДоходов.ДоходыОтРаботодателя, 0, Макс(ИсходныеДанные.РазрешенныйВычетЗаГод + ИсходныеДанные.НалоговыйВычетЛичный - ИсходныеДанные.ПримененныйВычетЗаГод, 0));
		ПлановыйВычет								= ?(ВидРасчета["ВидДохода"] <> Справочники.ВидыДоходов.ДоходыОтРаботодателя, 0, ИсходныеДанные.НалоговыйВычетПлановый);
		ПроцентИПН									= ИсходныеДанные.ПроцентИПН;
		ПрочиеДоходыДляИПН							= ИсходныеДанные.ПрочиеДоходыДляИПН;
		                   		
		Если ПроцентИПН = 0 Тогда
			РасшифровкаСтавкиИПН = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахИПН.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не заполнено значение ставки индивидуального подоходного налога для вида доходов """ + ИсходныеДанные.ВидДохода + """", РасшифровкаСтавкиИПН);
			Возврат 0;
		КонецЕсли;
	Иначе
		// Если компенсация ИПН не нужна, то все по нулям
		БазаДляИсчисленияИПН						= 0;
		ОстатокЛьготы								= 0;
		ОстатокВычета								= 0;
		ПлановыйВычет								= 0;
		ПроцентИПН									= 0;
		ПрочиеДоходыДляИПН							= 0;
	КонецЕсли;
	
	// Данные для расчета ОПВ
	Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
		ПризнакИсчисленияОПВ 				= ?(ИсходныеДанные.ПризнакИсчисленияОПВ, 1, 0);
		РазмерОграниченияПоДоходамОПВ 		= ИсходныеДанные.РазмерОграниченияПоДоходамОПВ;
		ПроцентОПВ 							= ИсходныеДанные.ПроцентОПВ; // ставка ОПВ
		ПрочиеДоходыДляОПВ					= ИсходныеДанные.ПрочиеДоходыДляОПВ;
		Если ИсходныеДанные.РасчетОтОбратногоУчитыватьПрямыеНачисления Тогда
			МаксСуммаОПВ 					= Макс(ПроцентОПВ * ((РазмерОграниченияПоДоходамОПВ - ИсходныеДанные.ОблагаемыйОПВДоходПрямыхНачислений + ПрочиеДоходыДляОПВ) * КоэффициентРаспределения + ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений ),0);		
		Иначе
			МаксСуммаОПВ 					= ПроцентОПВ * РазмерОграниченияПоДоходамОПВ * КоэффициентРаспределения; // ОПВ с макс суммы облагаемого дохода
		КонецЕсли;
	Иначе
		// Если учет ОПВ не нужен, то все по нулям
		ПризнакИсчисленияОПВ 				= 0;
		РазмерОграниченияПоДоходамОПВ 		= 0;
		ПроцентОПВ 							= 0; // ставка ОПВ
		МаксСуммаОПВ 						= 0; // ОПВ с макс суммы облагаемого дохода
		ПрочиеДоходыДляОПВ					= 0;
	КонецЕсли;
	
	// Данные по прочим погашаемым удержаниям
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		СуммаКомпенсируемыхУдержаний			= ИсходныеДанные.СуммаКомпенсируемыхУдержаний;
		ПроцентКомпенсируемыхУдержанийБезИПН	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПН / 100;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезОПВ / 100;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ / 100;
		ПроцентПрочихКомпенсируемыхУдержаний		= ИсходныеДанные.ПроцентПрочихКомпенсируемыхУдержаний / 100;
	Иначе
		// Если удержания не компенсируются, то все по нулям
		СуммаКомпенсируемыхУдержаний			= 0;
		ПроцентКомпенсируемыхУдержанийБезИПН	= 0;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= 0;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= 0;
		ПроцентПрочихКомпенсируемыхУдержаний		= 0;
	КонецЕсли;
	
	// Сумма, которую надо начислить, чтобы с учетом включаемых начислений получить нужную сумму на руки
	ИскомаяСуммаНачислений = ЦелевойРазмер - ИсходныеДанные.СуммаВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений;
	
	// округлим искомую сумму
	ИскомаяСуммаНачислений = ОбщегоНазначения.ОкруглитьЧисло(ИскомаяСуммаНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
	
	Если НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		 
		// Считать нечего, т.к. либо ничего не компенсируем 
		РаботаССообщениями.ОшибкаРасчета(ИсходныеДанные.ВидРасчетаНаименование, ": Не определены компенсируемые удержания", ВидРасчета);
		Возврат ИскомаяСуммаНачислений;		
	КонецЕсли;
	
	ПризнакПрименятьОграничениеПоДоходамОПВ = 0; // если 1, то применяется ограничение по доходам, облагаемым ОПВ
	НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
	ПризнакРасчетаИПН = 1; // если 1, то считаем ИПН, если 0, то налог=0 (нет обл. доходов за месяц)
	
	ОстатокЛьготы = ОстатокЛьготы * КоэффициентРаспределения;
	ОстатокВычета = ОстатокВычета * КоэффициентРаспределения;
	ПлановыйВычет = ПлановыйВычет * КоэффициентРаспределения;
    ПрочиеДоходыДляИПН = ПрочиеДоходыДляИПН * КоэффициентРаспределения;
	ПрочиеДоходыДляОПВ = ПрочиеДоходыДляОПВ * КоэффициентРаспределения;
	СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний * КоэффициентРаспределения;
	
	БазаДляИсчисленияОПВ = ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений + ПрочиеДоходыДляОПВ * КоэффициентРаспределения;
	БазаДляИсчисленияИПН = БазаДляИсчисленияИПН * КоэффициентРаспределения + ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений; // для включения сумм доп.вычетов.
		
	Если ПризнакИсчисленияОПВ = 1 Тогда
		// если данный вид ОПВ не облагается, но база для исчисления с других видов есть
		ПризнакИсчисленияОПВ = ?(ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом, 1, 0);
		ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ);
		Если ПризнакИсчисленияОПВ = 0 И ИсчисленныеОПВ <> 0 Тогда
			// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
			БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
			КомпенсироватьУдержания = 1;
		КонецЕсли;			
	КонецЕсли;
	
	ШагИтерации = 0;	
	МаксимальноеЧислоШагов = 100;
	
	Если ИсходныеДанные.РасчетОтОбратногоУчитыватьПрямыеНачисления Тогда
		ЛьготыВычеты = БазаДляИсчисленияИПН + Мин(ИсходныеДанные.ОблагаемыйИПНДоходПрямыхНачислений * КоэффициентРаспределения - ОстатокЛьготы - ОстатокВычета - ПлановыйВычет, 0);
	Иначе 
		ЛьготыВычеты = БазаДляИсчисленияИПН - ОстатокЛьготы - ОстатокВычета - ПлановыйВычет;
	КонецЕсли;
		
	Пока Не РезультатПолучен И (ШагИтерации < МаксимальноеЧислоШагов) Цикл
		
		ШагИтерации = ШагИтерации + 1;
		РезультатПолучен = Истина;		
		
		// Вычисляем вспомогательные переменные
		РезультирующийПроцентОПВ = ПроцентОПВ * ПризнакИсчисленияОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ);
		
		ФиксЧастьОПВ			 = ПризнакИсчисленияОПВ * (БазаДляИсчисленияОПВ * ПроцентОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ) + 
														   ПризнакПрименятьОграничениеПоДоходамОПВ * МаксСуммаОПВ);
		
		РезультирующийПроцентИПНиОПВ = ПризнакРасчетаИПН * ПроцентИПН * (1 - РезультирующийПроцентОПВ);
											
		ФиксЧастьИПН			= ПризнакРасчетаИПН * ПроцентИПН * (ЛьготыВычеты - ФиксЧастьОПВ);
		
		КоэффициентИПН = КомпенсироватьИПН - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		КоэффициентОПВ = КомпенсироватьОПВ - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		ПроцентКомпенсируемыхУдержаний = ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ + 
											ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + ПроцентПрочихКомпенсируемыхУдержаний;
								  		
		Числитель = (ИскомаяСуммаНачислений + 
					КоэффициентИПН * ФиксЧастьИПН +
					КоэффициентОПВ * ФиксЧастьОПВ + 
					КомпенсироватьУдержания * СуммаКомпенсируемыхУдержаний);
					
		Знаменатель = (1 - 
	     				КоэффициентИПН * РезультирующийПроцентИПНиОПВ -
					   	КоэффициентОПВ * РезультирующийПроцентОПВ - 
						КомпенсироватьУдержания * ПроцентКомпенсируемыхУдержаний);
								  		
		Результат = ?(Знаменатель <> 0, Числитель / Знаменатель, 0);
		Результат = ОбщегоНазначения.ОкруглитьЧисло(Результат, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Проверим граничные условия, при которых делали расчет
		РезультатОПВ = ПризнакИсчисленияОПВ * ПроцентОПВ * (БазаДляИсчисленияОПВ + Результат);

		Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
			// Наличие облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияОПВ И ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ОПВ исчисляются
					
					Если БазаДляИсчисленияОПВ + Результат > 0 Тогда
						Если ПризнакИсчисленияОПВ <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 1;
					Иначе
						Если ПризнакИсчисленияОПВ <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если РезультатОПВ > МаксСуммаОПВ Тогда
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 1;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда 
			// Учтем граничные условия, возникающие при расчете ИПН
			
			// проверка на то, чтобы ИПН не был отрицательным, если обл. доходы за месяц < 0
			Если РезультатПолучен Тогда
				ОблагаемаяИПНСумма = ЛьготыВычеты + Результат - РезультатОПВ;

				Если ОблагаемаяИПНСумма < 0 Тогда
					// ранее налог считался, но облагаемая сумма за месяц < 0 - на следующем шаге не считаем
					Если ПризнакРасчетаИПН <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 0;
				Иначе
					// ранее налог не считался, но теперь облагаемая сумма > 0 и налог есть с чего считать
					Если ПризнакРасчетаИПН <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не РезультатПолучен Тогда
		// вышли из цикла по превышению макс допустимого числа шагов
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Превышено допустимо число шагов итерации ", СтатусСообщения.Важное);
	Иначе
		// Из-за округления могут получиться лишние тиынки
		ИсчисленныйИПН = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентИПНиОПВ + ФиксЧастьИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеОПВ = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентОПВ + ФиксЧастьОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеУдержания = ОбщегоНазначения.ОкруглитьЧисло(КомпенсироватьУдержания * (Результат * ПроцентПрочихКомпенсируемыхУдержаний + 
												(Результат - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезОПВ +
												(Результат - ИсчисленныйИПН) * ПроцентКомпенсируемыхУдержанийБезИПН +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + 
												СуммаКомпенсируемыхУдержаний), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		ОбщаяСуммаКомпенсируемыхУдержаний = ИсчисленныйИПН + ИсчисленныеОПВ + ИсчисленныеУдержания;
		Разность = ИскомаяСуммаНачислений - (Результат - ОбщаяСуммаКомпенсируемыхУдержаний);
		
		Если Разность > -1 И Разность < 1 Тогда
			Результат = Результат + Разность;
		КонецЕсли;
		
		Результат = Результат - ИсходныеДанные.ОбщаяСуммаНачислений * КоэффициентРаспределения;
		
	КонецЕсли;
	
	Результат = ОбщегоНазначения.ОкруглитьЧисло(?(РезультатПолучен, Результат, 0), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);

	СтрокаДвижений.Результат = Результат;

	Если КомментироватьРасчет Тогда
		
		РаботаССообщениями.ЗаменитьТекстКомментарияРасчета("Результат расчета: <НомерСтроки" + Строка(СтрокаДвижений.НомерСтроки) + ">", 
													   "Результат расчета: " + Результат);
	КонецЕсли;
												   

	Возврат Результат;
	
КонецФункции  // РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2010()

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным для способа расчета "от обратного"
// по правилам, действующим с 2009 года (фикс. ставка ИПН)
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  ТаблицаСтавокИПН - таблица значений со ставками ИПН за текущий рассчитываемый период регистрации для расчета "от обратного"
//
// Возвращаемое значение:
//  Число - результат расчета.
//
// Расчет "от обратного" производится на основе решения уравнения:
// 
// 		Х - Кн * ИПН - Кв * ОПВ - Ку * Уд = Р,
// где
//                    
//		ИПН = К0н * (Х + Бн - Льгот - ОПВ - Вычет) * %Н
//
//      ОПВ = ((1- К1в)*(Х + Бв) * %В + К1в * МаксОПВ) * К2в
//      
//      Уд  = Х * %Упр + Фу + (Х - ОПВ) * %Ув + (Х - ИПН) * %Ун + (Х - ОПВ - ИПН) * %Унв
//
// Относительно Х:
//
//      ОПВ(Х) = Х * %ПФ + Фв
//
//				%ПФ = %В * К2в * (1 - К1в)
//           
//				Фв  = Бв * %В * (1 - К1в) * К2в + К1в * МаксОПВ * К2в
//
//		ИПН(Х) = Х * %НВ + Фн
//
//				%НВ = К0н * %Н * (1 - %ПФ)
//
//				Фн  = К0н * %Н * (Бн - Льгот - Фв - Вычет)
//
// Решение уравнения:
//               Р + К'н * Фн + К'в * Фв + Ку * Фу
//		Х	  = -----------------------------------
//               1 - К'н * %НВ - К'в * %ПФ - Ку * %У'
//
// где
//		К'н   = Кн - Ку * %Ун - Ку * %Унв
//		К'в   = Кв - Ку * %Ув - Ку * %Унв
//		%У'   = %Упр + %Ув + %Ун + %Унв
//
//
// Обозначения:
// |В формуле	|	Переменная в программе					| Комментарий
// ---------------------------------------------------------------------------------------------------------------
// |   Х		|	ИскомаяСуммаНачислений					| Сумма, которую хотят получить на руки (за минусом включаемых начислений)
// |   Кн		|	КомпенсироватьИПН						| 1, если компенсируется ИПН, 0 иначе
// |   Кв		|	КомпенсироватьОПВ						| 1, если компенсируются ОПВ, 0 иначе
// |   Ку		|	КомпенсироватьУдержания					| 1, если компенсируются удержания, 0 иначе
// |   К0н		|	ПризнакРасчетаИПН			 			| 1, если ИПН рассчитывается, иначе 0 - налог = 0 (обл база за месяц < 0)
// |   Бн		|   БазаДляИсчисленияИПН					| Сумма облагаемого ИПН дохода за месяц (уже отняты вычеты и ОПВ)
// |   %Н		|	ПроцентИПН								| Процент ИПН
// |   К1в		| ПризнакПрименятьОграничениеПоДоходамОПВ 	| 0, если расчет ОПВ от базы (когда база < 75 МЗП), 1 если ОПВ с 75 МЗП
// |   Бв		|	БазаДляИсчисленияОПВ					| Сумма облагаемого ОПВ дохода за месяц (за счет прочих начислений, не относящихся в Х)
// |   %В		|	ПроцентОПВ								| Процент обязательных пенсионных взносов
// |   МаксОПВ	| 	МаксСуммаОПВ 							| Сумма ОПВ с 75 МЗП
// |   К2в		|	ПризнакИсчисленияОПВ					| 1, если по работнику исчисляются ОПВ, иначе 0 (пенсионер, инвалид 1, 2 гр. и т.д.)
// |   %Упр		|	ПроцентПрочихКомпенсируемыхУдержаний	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых не вычитается ОПВ и ИПН)
// |   %Ун		|	ПроцентКомпенсируемыхУдержанийБезИПН	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН)
// |   %Ув		|	ПроцентКомпенсируемыхУдержанийБезОПВ	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ОПВ)
// |   %Унв		|	ПроцентКомпенсируемыхУдержанийБезИПНиОПВ| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН и ОПВ)
// |   Фу		|	СуммаКомпенсируемыхУдержаний			| Компенсируемые удержания фиксированной суммой
// |   %ПФ		|	РезультирующийПроцентОПВ				|
// |   Фв		|	ФиксЧастьОПВ							|
// |   %НВ		|	РезультирующийПроцентИПНиОПВ			|
// |   Фн		|	ФиксЧастьИПН							|
// |   Льгот	|	ОстатокЛьготы							| Неиспользованная часть льготы, доступна в текущем месяца
// |   Вычет	|	ОстатокВычета							| Неиспользованный вычет с учетом переносимых с начала года, доступный в текущем месяце
// 
Функция РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2014(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет, СтруктураЦелевыхРазмеров)
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	Результат = 0;
	ЦелевойРазмер = 0;
	
	// Получем целевые размеры всех расчтов от обратного в сумме 
	// для вычисления коэффициента распределения
	ТаблицаЦелевыхРазмеров = СтруктураЦелевыхРазмеров.ТаблицаЦелевыхРазмеров;
	ТаблицаЦелевыхРазмеровПоВидуРасчета = СтруктураЦелевыхРазмеров.ТаблицаЦелевыхРазмеровПоВидуРасчета;
	
	ЦелевойРазмерВсего = 0;
	ЦелевойРазмерВсегоПоВидуРасчета = 0;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Регистратор", ИсходныеДанные.Регистратор);
	СтруктураПоиска.Вставить("ФизЛицо", ИсходныеДанные.ФизЛицо);
	
	// Для распределения вычетов и льгот
	ЦелевойРазмерВсего = ТаблицаЦелевыхРазмеров.НайтиСтроки(СтруктураПоиска)[0].ЦелевойРазмер;

	СтруктураПоиска.Вставить("ВидРасчетаНаименование", ИсходныеДанные.ВидРасчетаНаименование);
	
	// Для распределения включаемых начислений
	ЦелевойРазмерВсегоПоВидуРасчета = ТаблицаЦелевыхРазмеровПоВидуРасчета.НайтиСтроки(СтруктураПоиска)[0].ЦелевойРазмер;
	
	РезультатПолучен = Ложь;
	
	ЭтоПВРОсновныеНачисления = (ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	
	// определим целевой размер
	ЦелевойРазмер = СтрокаДвижений.Результат;
	
	
	// КоэффициентРаспределения и КоэффициентРаспределенияВключаемыхНачислений необходимы для паралельного расчета разных начислений с одной категорией начисления,
	// или одного и того же расчета в случае изменения размера в середине расчетного периода
	
	// Для вычетов, льгот и ограничений
	КоэффициентРаспределения = ?(ЦелевойРазмерВсего <= 0, 1, ЦелевойРазмер / ЦелевойРазмерВсего);
	
	// Для включаемых начислений
	КоэффициентРаспределенияВключаемыхНачислений = ?(ЦелевойРазмерВсегоПоВидуРасчета <= 0, 1, ЦелевойРазмер / ЦелевойРазмерВсегоПоВидуРасчета);
	
	// запомним целевой размер текущей строки расчета
	СтрокаДвижений.ДополнительныеДанные = ЦелевойРазмер;
		
	// Сумма, которую надо начислить, чтобы с учетом включаемых начислений получить нужную сумму на руки
	ИскомаяСуммаНачислений = ЦелевойРазмер - ИсходныеДанные.СуммаВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений;
	
	// округлим искомую сумму
	ИскомаяСуммаНачислений = ОбщегоНазначения.ОкруглитьЧисло(ИскомаяСуммаНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
	
	Если НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		 
		// Считать нечего, т.к. либо ничего не компенсируем 
		РаботаССообщениями.ЗаменитьТекстКомментарияРасчета("Результат расчета: <НомерСтроки" + Строка(СтрокаДвижений.НомерСтроки) + ">", "Результат расчета: " + ЦелевойРазмер);										
		РаботаССообщениями.ОшибкаРасчета(ИсходныеДанные.ВидРасчетаНаименование, ": Не определены компенсируемые удержания", ВидРасчета);
		Возврат ИскомаяСуммаНачислений;		
	КонецЕсли;

	// Признаки компенсирования расчетом "от обратного" различных удержаний
	КомпенсироватьИПН 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, 1, 0);
	КомпенсироватьОПВ 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ, 1, 0);
	КомпенсироватьУдержания 	= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания, 1, 0);
	
	Если КомпенсироватьИПН <> 0 Или КомпенсироватьОПВ <> 0 Тогда
		Если Не ИсходныеДанные.ОтражениеПоПериодуРегистрации Тогда
			МассивПараметров = Новый Массив;
			Если НЕ ИсходныеДанные.Регистратор.Пустая() Тогда
				МассивПараметров.Добавить(ИсходныеДанные.Регистратор.Организация);
			КонецЕсли;
			РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметров);
			
			РаботаССообщениями.ОшибкаРасчета("", "Для " + ИсходныеДанные.СотрудникНаименование + " расчет """ + ИсходныеДанные.ВидРасчетаНаименование 
													+ """ не возможен, т.к. в учетной политике по налоговому учету не установлен признак отражения 
													|налогов и взносов по периоду регистрации", РасшифровкаУчетнойПолитики);
													
			РаботаССообщениями.ЗаменитьТекстКомментарияРасчета("Результат расчета: <НомерСтроки" + Строка(СтрокаДвижений.НомерСтроки) + ">", "Результат расчета: 0");										
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Данные для расчета ИПН 
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		БазаДляИсчисленияИПН 						= ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений + 
													  ИсходныеДанные.ПрочиеДоходыДляИПН * КоэффициентРаспределения * (1 - ИсходныеДанные.ЕстьОтОбратногоКомпенсирующиеИПН); // Прочие доходы учитываем только 1 раз
		ОстатокЛьготы								= Макс(ИсходныеДанные.ЛьготаПоДоходу - ИсходныеДанные.ПримененнаяЛьготаЗаГод - ИсходныеДанные.ПримененнаяЛьготаНаПредыдущемМестеРаботы, 0);
		ОстатокВычета								= ?(ВидРасчета["ВидДохода"] <> Справочники.ВидыДоходов.ДоходыОтРаботодателя, 0, Макс(ИсходныеДанные.РазрешенныйВычетЗаГод + ИсходныеДанные.НалоговыйВычетЛичный - ИсходныеДанные.ПримененныйВычетЗаГод, 0));
		ПлановыйВычет								= ?(ВидРасчета["ВидДохода"] <> Справочники.ВидыДоходов.ДоходыОтРаботодателя, 0, ИсходныеДанные.НалоговыйВычетПлановый);
		//ПрочиеДоходыДляИПН							= ИсходныеДанные.ПрочиеДоходыДляИПН;
						   		
		ПроцентИПН									= ИсходныеДанные.ПроцентИПН;
		Если ПроцентИПН = 0 Тогда
			РасшифровкаСтавкиИПН = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахИПН.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не заполнено значение ставки индивидуального подоходного налога для вида доходов """ + ИсходныеДанные.ВидДохода + """", РасшифровкаСтавкиИПН);
			Возврат 0;
		КонецЕсли;
	Иначе
		// Если компенсация ИПН не нужна, то все по нулям
		БазаДляИсчисленияИПН						= 0;
		ОстатокЛьготы								= 0;
		ОстатокВычета								= 0;
		ПлановыйВычет								= 0;
		//ПрочиеДоходыДляИПН							= 0;
		ПроцентИПН									= 0;
	КонецЕсли;
	
	// Данные для расчета ОПВ
	Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
		БазаДляИсчисленияОПВ 				= ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений + 
											  ИсходныеДанные.ПрочиеДоходыДляОПВ * КоэффициентРаспределения * (1 - ИсходныеДанные.ЕстьОтОбратногоКомпенсирующиеОПВ); // Прочие доходы учитываем только 1 раз
		ПризнакИсчисленияОПВ 				= ?(ИсходныеДанные.ПризнакИсчисленияОПВ, 1, 0);
		ПроцентОПВ 							= ИсходныеДанные.ПроцентОПВ; // ставка ОПВ
		//ПрочиеДоходыДляОПВ					= ИсходныеДанные.ПрочиеДоходыДляОПВ;
		
		// Скорректируем размер ограничения на ранее исчисленные доходы
		КорректировкаОграничения 			= ИсходныеДанные.ОблагаемыйОПВДоходНачисленийОтОбратного +  
											  ИсходныеДанные.ОблагаемыйОПВДоходПрочихВключаемыхНачислений + ?(ИсходныеДанные.РасчетОтОбратногоУчитыватьПрямыеНачисления, 
											  ИсходныеДанные.ОблагаемыйОПВДоходПрямыхНачислений, 0);
											  
		РазмерОграниченияПоДоходамОПВ 		= Макс(ИсходныеДанные.РазмерОграниченияПоДоходамОПВ - КорректировкаОграничения, 0) * КоэффициентРаспределения;
		
		МаксСуммаОПВ						= ПроцентОПВ * РазмерОграниченияПоДоходамОПВ;
	Иначе
		// Если учет ОПВ не нужен, то все по нулям
		БазаДляИсчисленияОПВ				= 0;
		ПризнакИсчисленияОПВ 				= 0;
		РазмерОграниченияПоДоходамОПВ 		= 0;
		ПроцентОПВ 							= 0; // ставка ОПВ
		//ПрочиеДоходыДляОПВ					= 0;
		МаксСуммаОПВ						= 0;
	КонецЕсли;
	
	// Данные по прочим погашаемым удержаниям
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		СуммаКомпенсируемыхУдержаний			= ИсходныеДанные.СуммаКомпенсируемыхУдержаний;
		ПроцентКомпенсируемыхУдержанийБезИПН	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПН / 100;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезОПВ / 100;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ / 100;
		ПроцентПрочихКомпенсируемыхУдержаний		= ИсходныеДанные.ПроцентПрочихКомпенсируемыхУдержаний / 100;
	Иначе
		// Если удержания не компенсируются, то все по нулям
		СуммаКомпенсируемыхУдержаний			= 0;
		ПроцентКомпенсируемыхУдержанийБезИПН	= 0;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= 0;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= 0;
		ПроцентПрочихКомпенсируемыхУдержаний		= 0;
	КонецЕсли;
	
	ПризнакПрименятьОграничениеПоДоходамОПВ = 0; // если 1, то применяется ограничение по доходам, облагаемым ОПВ
	НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
	ПризнакРасчетаИПН = 1; // если 1, то считаем ИПН, если 0, то налог=0 (нет обл. доходов за месяц)
	
	СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний * КоэффициентРаспределения;
	
	ИсчисленныеОПВВключаемыхНачислений = 0;
	Если ПризнакИсчисленияОПВ = 1 Тогда
		// если данный вид ОПВ не облагается, но база для исчисления с других видов есть
		ПризнакИсчисленияОПВ = ?(ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом, 1, 0);
		ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ);
		Если ПризнакИсчисленияОПВ = 0 И ИсчисленныеОПВ <> 0 Тогда
			// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
			БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
			ИсчисленныеОПВВключаемыхНачислений = ИсчисленныеОПВ * КомпенсироватьОПВ;
		КонецЕсли;			
	КонецЕсли;
	
	// Скорректируем Льготы и Вычеты с учетом ранее исчисленных доходов
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		КорректировкаЛьготВычетов = (ИсходныеДанные.ОблагаемыйИПНДоходНачисленийОтОбратного - ИсходныеДанные.ОблагаемыйОПВДоходНачисленийОтОбратного * ПроцентОПВ) +
									(ИсходныеДанные.ОблагаемыйИПНДоходПрочихВключаемыхНачислений - ИсходныеДанные.ОблагаемыйОПВДоходПрочихВключаемыхНачислений * ПроцентОПВ) + ?(ИсходныеДанные.РасчетОтОбратногоУчитыватьПрямыеНачисления, 
									ИсходныеДанные.ОблагаемыйИПНДоходПрямыхНачислений - ИсходныеДанные.ОблагаемыйОПВДоходПрямыхНачислений * ПроцентОПВ, 0);
									
		ЛьготыВычеты = БазаДляИсчисленияИПН + Мин(КорректировкаЛьготВычетов - ОстатокЛьготы - ОстатокВычета - ПлановыйВычет, 0) * КоэффициентРаспределения;
	Иначе
		ЛьготыВычеты = 0;
	КонецЕсли;
	
	ИсчисленныйИПНВключаемыхНачислений = 0;
	Если ПризнакРасчетаИПН = 1 Тогда
		// если данный вид ИПН не облагается, но база для исчисления с других видов есть
		ПризнакРасчетаИПН = ?(ИсходныеДанные.ОблагаетсяИПН <> НеОблагаетсяЦеликом, 1, 0);
		ИсчисленныйИПН = Макс(ПроцентИПН * (ЛьготыВычеты - ПризнакИсчисленияОПВ * Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ)), 0);
		Если ПризнакРасчетаИПН = 0 И ИсчисленныйИПН <> 0 Тогда
			ИсчисленныйИПНВключаемыхНачислений = ИсчисленныйИПН * КомпенсироватьИПН;
		КонецЕсли;			
	КонецЕсли;
		
	ШагИтерации = 0;	
	МаксимальноеЧислоШагов = 100;
	
	Пока Не РезультатПолучен И (ШагИтерации < МаксимальноеЧислоШагов) Цикл
		
		ШагИтерации = ШагИтерации + 1;
		РезультатПолучен = Истина;		
		
		// Вычисляем вспомогательные переменные
		РезультирующийПроцентОПВ = ПроцентОПВ * ПризнакИсчисленияОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ);
		
		ФиксЧастьОПВ			 = ПризнакИсчисленияОПВ * (БазаДляИсчисленияОПВ * ПроцентОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ) + 
														   ПризнакПрименятьОграничениеПоДоходамОПВ * МаксСуммаОПВ);
		
		РезультирующийПроцентИПНиОПВ = ПроцентИПН * ПризнакРасчетаИПН * (1 - РезультирующийПроцентОПВ);
											
		ФиксЧастьИПН			= ПризнакРасчетаИПН * ПроцентИПН * (ЛьготыВычеты - ФиксЧастьОПВ);
		
		КоэффициентИПН = КомпенсироватьИПН - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		КоэффициентОПВ = КомпенсироватьОПВ - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		ПроцентКомпенсируемыхУдержаний = ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ + 
											ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + ПроцентПрочихКомпенсируемыхУдержаний;
								  		
		Числитель = (ИскомаяСуммаНачислений + 
					КоэффициентИПН * ФиксЧастьИПН +
					КоэффициентОПВ * ФиксЧастьОПВ + 
					КомпенсироватьУдержания * СуммаКомпенсируемыхУдержаний +
					ИсчисленныеОПВВключаемыхНачислений +
					ИсчисленныйИПНВключаемыхНачислений);
					
		Знаменатель = (1 - 
		 				КоэффициентИПН * РезультирующийПроцентИПНиОПВ -
					   	КоэффициентОПВ * РезультирующийПроцентОПВ - 
						КомпенсироватьУдержания * ПроцентКомпенсируемыхУдержаний);
								  		
		Результат = ?(Знаменатель <> 0, Числитель / Знаменатель, 0);
		Результат = ОбщегоНазначения.ОкруглитьЧисло(Результат, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Проверим граничные условия, при которых делали расчет
		РезультатОПВ = ПризнакИсчисленияОПВ * ПроцентОПВ * (БазаДляИсчисленияОПВ + Результат);

		Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
			// Наличие облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияОПВ И ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ОПВ исчисляются
					
					Если БазаДляИсчисленияОПВ + Результат > 0 Тогда
						Если ПризнакИсчисленияОПВ <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 1;
					Иначе
						Если ПризнакИсчисленияОПВ <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если РезультатОПВ > МаксСуммаОПВ Тогда
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 1;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда 
			// Учтем граничные условия, возникающие при расчете ИПН
			
			// проверка на то, чтобы ИПН не был отрицательным, если обл. доходы за месяц < 0
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ОблагаетсяИПН <> НеОблагаетсяЦеликом Тогда
					
					ОблагаемаяИПНСумма = ЛьготыВычеты + Результат - РезультатОПВ;

					Если ОблагаемаяИПНСумма < 0 Тогда
						// ранее налог считался, но облагаемая сумма за месяц < 0 - на следующем шаге не считаем
						Если ПризнакРасчетаИПН <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакРасчетаИПН = 0;
					Иначе
						// ранее налог не считался, но теперь облагаемая сумма > 0 и налог есть с чего считать
						Если ПризнакРасчетаИПН <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакРасчетаИПН = 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ИсчисленныйИПН = 0;
	ИсчисленныеОПВ = 0;
	ИсчисленныеУдержания = 0;
	
	Если Не РезультатПолучен Тогда
		// вышли из цикла по превышению макс допустимого числа шагов
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Превышено допустимо число шагов итерации ", СтатусСообщения.Важное);
	Иначе
		// Из-за округления могут получиться лишние тиынки
		ИсчисленныеОПВ = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентОПВ + ФиксЧастьОПВ + ИсчисленныеОПВВключаемыхНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Скорректируем исчисленный ИПН включаемых начислений на размер ОПВ текущего расчета
		//ИсчисленныйИПНВключаемыхНачислений = Макс(ИсчисленныйИПНВключаемыхНачислений - ИсчисленныеОПВ * ПроцентИПН, 0);
		ИсчисленныйИПН = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентИПНиОПВ + ФиксЧастьИПН + ИсчисленныйИПНВключаемыхНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
        // Увеличим результат на компенсацию включаемых начислений
		//Результат = Результат + ИсчисленныйИПНВключаемыхНачислений + ИсчисленныеОПВВключаемыхНачислений;
		
		ИсчисленныеУдержания = ОбщегоНазначения.ОкруглитьЧисло(КомпенсироватьУдержания * (Результат * ПроцентПрочихКомпенсируемыхУдержаний + 
												(Результат - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезОПВ +
												(Результат - ИсчисленныйИПН) * ПроцентКомпенсируемыхУдержанийБезИПН +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + 
												СуммаКомпенсируемыхУдержаний), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		ОбщаяСуммаКомпенсируемыхУдержаний = ИсчисленныйИПН + ИсчисленныеОПВ + ИсчисленныеУдержания;
		Разность = ИскомаяСуммаНачислений - (Результат - ОбщаяСуммаКомпенсируемыхУдержаний);
		
		Если Разность > -1 И Разность < 1 Тогда
			Результат = Результат + Разность;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = ОбщегоНазначения.ОкруглитьЧисло(?(РезультатПолучен, Результат, 0), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);

	СтрокаДвижений.Результат = Результат;

	Если КомментироватьРасчет Тогда
		
		СтрокаДополнения = "";
		Если ОбщаяСуммаКомпенсируемыхУдержаний <> 0 ИЛИ ИсходныеДанные.СуммаВключаемыхНачислений <> 0 Тогда
			СтрокаДополнения = ", в том числе:";
		КонецЕсли;
		
		
		СтрокаКомментарияОтОбратного = РаботаССообщениями.ЗаменитьТекстКомментарияРасчета("Результат расчета: <НомерСтроки" + Строка(СтрокаДвижений.НомерСтроки) + ">", 
													   "Результат расчета: " + Результат + СтрокаДополнения);
													   
		// Покажем суммы компенсируемых удержаний
		Если ОбщаяСуммаКомпенсируемыхУдержаний <> 0 И СтрокаКомментарияОтОбратного <> Неопределено Тогда
			Удержания = РаботаССообщениями.КомментарийРасчета("Компенсировано удержаний:", СтрокаКомментарияОтОбратного);
			Если ИсчисленныеОПВ <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("ОПВ: " + ИсчисленныеОПВ, Удержания);
			КонецЕсли;
			Если ИсчисленныйИПН <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("ИПН: " + ИсчисленныйИПН, Удержания);
			КонецЕсли;
			Если ИсчисленныеУдержания <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("Прочие удержания: " + ИсчисленныеУдержания, Удержания);
			КонецЕсли;
		КонецЕсли;
		
		
		// Покажем корректировки на включаемые начисления
		Если ИсходныеДанные.СуммаВключаемыхНачислений <> 0 И СтрокаКомментарияОтОбратного <> Неопределено Тогда
			РаботаССообщениями.КомментарийРасчета("Вычтено включаемых начислений: " + ИсходныеДанные.СуммаВключаемыхНачислений, СтрокаКомментарияОтОбратного);
		КонецЕсли;
				
	КонецЕсли;
												   
	Возврат Результат;
	
КонецФункции  // РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2014()

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным для способа расчета "от обратного"
// по правилам, действующим с 2009 года (фикс. ставка ИПН)
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  ТаблицаСтавокИПН - таблица значений со ставками ИПН за текущий рассчитываемый период регистрации для расчета "от обратного"
//
// Возвращаемое значение:
//  Число - результат расчета.
//
// Расчет "от обратного" производится на основе решения уравнения:
// 
// 		Х - Кн * ИПН - Кв * ОПВ - Ку * Уд = Р,
// где
//                    
//		ИПН = К0н * (Х + Бн - Льгот - ОПВ - Вычет) * %Н
//
//      ОПВ = ((1- К1в)*(Х + Бв) * %В + К1в * МаксОПВ) * К2в
//      
//      Уд  = Х * %Упр + Фу + (Х - ОПВ) * %Ув + (Х - ИПН) * %Ун + (Х - ОПВ - ИПН) * %Унв
//
// Относительно Х:
//
//      ОПВ(Х) = Х * %ПФ + Фв
//
//				%ПФ = %В * К2в * (1 - К1в)
//           
//				Фв  = Бв * %В * (1 - К1в) * К2в + К1в * МаксОПВ * К2в
//
//		ИПН(Х) = Х * %НВ + Фн
//
//				%НВ = К0н * %Н * (1 - %ПФ)
//
//				Фн  = К0н * %Н * (Бн - Льгот - Фв - Вычет)
//
// Решение уравнения:
//               Р + К'н * Фн + К'в * Фв + Ку * Фу
//		Х	  = -----------------------------------
//               1 - К'н * %НВ - К'в * %ПФ - Ку * %У'
//
// где
//		К'н   = Кн - Ку * %Ун - Ку * %Унв
//		К'в   = Кв - Ку * %Ув - Ку * %Унв
//		%У'   = %Упр + %Ув + %Ун + %Унв
//
//
// Обозначения:
// |В формуле	|	Переменная в программе					| Комментарий
// ---------------------------------------------------------------------------------------------------------------
// |   Х		|	ИскомаяСуммаНачислений					| Сумма, которую хотят получить на руки (за минусом включаемых начислений)
// |   Кн		|	КомпенсироватьИПН						| 1, если компенсируется ИПН, 0 иначе
// |   Кв		|	КомпенсироватьОПВ						| 1, если компенсируются ОПВ, 0 иначе
// |   Ку		|	КомпенсироватьУдержания					| 1, если компенсируются удержания, 0 иначе
// |   К0н		|	ПризнакРасчетаИПН			 			| 1, если ИПН рассчитывается, иначе 0 - налог = 0 (обл база за месяц < 0)
// |   Бн		|   БазаДляИсчисленияИПН					| Сумма облагаемого ИПН дохода за месяц (уже отняты вычеты и ОПВ)
// |   %Н		|	ПроцентИПН								| Процент ИПН
// |   К1в		| ПризнакПрименятьОграничениеПоДоходамОПВ 	| 0, если расчет ОПВ от базы (когда база < 75 МЗП), 1 если ОПВ с 75 МЗП
// |   Бв		|	БазаДляИсчисленияОПВ					| Сумма облагаемого ОПВ дохода за месяц (за счет прочих начислений, не относящихся в Х)
// |   %В		|	ПроцентОПВ								| Процент обязательных пенсионных взносов
// |   МаксОПВ	| 	МаксСуммаОПВ 							| Сумма ОПВ с 75 МЗП
// |   К2в		|	ПризнакИсчисленияОПВ					| 1, если по работнику исчисляются ОПВ, иначе 0 (пенсионер, инвалид 1, 2 гр. и т.д.)
// |   %Упр		|	ПроцентПрочихКомпенсируемыхУдержаний	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых не вычитается ОПВ и ИПН)
// |   %Ун		|	ПроцентКомпенсируемыхУдержанийБезИПН	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН)
// |   %Ув		|	ПроцентКомпенсируемыхУдержанийБезОПВ	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ОПВ)
// |   %Унв		|	ПроцентКомпенсируемыхУдержанийБезИПНиОПВ| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН и ОПВ)
// |   Фу		|	СуммаКомпенсируемыхУдержаний			| Компенсируемые удержания фиксированной суммой
// |   %ПФ		|	РезультирующийПроцентОПВ				|
// |   Фв		|	ФиксЧастьОПВ							|
// |   %НВ		|	РезультирующийПроцентИПНиОПВ			|
// |   Фн		|	ФиксЧастьИПН							|
// |   Льгот	|	ОстатокЛьготы							| Неиспользованная часть льготы, доступна в текущем месяца
// |   Вычет	|	ОстатокВычета							| Неиспользованный вычет с учетом переносимых с начала года, доступный в текущем месяце
// 
Функция РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2018(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет, СтруктураЦелевыхРазмеров)
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	Результат = 0;
	ЦелевойРазмер = 0;
	
	// Получем целевые размеры всех расчтов от обратного в сумме 
	// для вычисления коэффициента распределения
	ТаблицаЦелевыхРазмеров = СтруктураЦелевыхРазмеров.ТаблицаЦелевыхРазмеров;
	ТаблицаЦелевыхРазмеровПоВидуРасчета = СтруктураЦелевыхРазмеров.ТаблицаЦелевыхРазмеровПоВидуРасчета;
	
	ЦелевойРазмерВсего = 0;
	ЦелевойРазмерВсегоПоВидуРасчета = 0;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Регистратор", ИсходныеДанные.Регистратор);
	СтруктураПоиска.Вставить("ФизЛицо", ИсходныеДанные.ФизЛицо);
	
	// Для распределения вычетов и льгот
	ЦелевойРазмерВсего = ТаблицаЦелевыхРазмеров.НайтиСтроки(СтруктураПоиска)[0].ЦелевойРазмер;

	СтруктураПоиска.Вставить("ВидРасчетаНаименование", ИсходныеДанные.ВидРасчетаНаименование);
	
	// Для распределения включаемых начислений
	ЦелевойРазмерВсегоПоВидуРасчета = ТаблицаЦелевыхРазмеровПоВидуРасчета.НайтиСтроки(СтруктураПоиска)[0].ЦелевойРазмер;
	
	РезультатПолучен = Ложь;
	
	ЭтоПВРОсновныеНачисления = (ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	
	// определим целевой размер
	ЦелевойРазмер = СтрокаДвижений.Результат;
	
	
	// КоэффициентРаспределения и КоэффициентРаспределенияВключаемыхНачислений необходимы для паралельного расчета разных начислений с одной категорией начисления,
	// или одного и того же расчета в случае изменения размера в середине расчетного периода
	
	// Для вычетов, льгот и ограничений
	КоэффициентРаспределения = ?(ЦелевойРазмерВсего <= 0, 1, ЦелевойРазмер / ЦелевойРазмерВсего);
	
	// Для включаемых начислений
	КоэффициентРаспределенияВключаемыхНачислений = ?(ЦелевойРазмерВсегоПоВидуРасчета <= 0, 1, ЦелевойРазмер / ЦелевойРазмерВсегоПоВидуРасчета);
	
	// запомним целевой размер текущей строки расчета
	СтрокаДвижений.ДополнительныеДанные = ЦелевойРазмер;
		
	// Сумма, которую надо начислить, чтобы с учетом включаемых начислений получить нужную сумму на руки
	ИскомаяСуммаНачислений = ЦелевойРазмер - ИсходныеДанные.СуммаВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений;
	
	// округлим искомую сумму
	ИскомаяСуммаНачислений = ОбщегоНазначения.ОкруглитьЧисло(ИскомаяСуммаНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
	
	Если НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		 
		// Считать нечего, т.к. либо ничего не компенсируем 
		РаботаССообщениями.ЗаменитьТекстКомментарияРасчета("Результат расчета: <НомерСтроки" + Строка(СтрокаДвижений.НомерСтроки) + ">", "Результат расчета: " + ЦелевойРазмер);										
		РаботаССообщениями.ОшибкаРасчета(ИсходныеДанные.ВидРасчетаНаименование, ": Не определены компенсируемые удержания", ВидРасчета);
		Возврат ИскомаяСуммаНачислений;		
	КонецЕсли;

	// Признаки компенсирования расчетом "от обратного" различных удержаний
	КомпенсироватьИПН 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, 1, 0);
	КомпенсироватьОПВ 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ, 1, 0);
	КомпенсироватьУдержания 	= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания, 1, 0);
	
	Если КомпенсироватьИПН <> 0 Или КомпенсироватьОПВ <> 0 Тогда
		Если Не ИсходныеДанные.ОтражениеПоПериодуРегистрации Тогда
			МассивПараметров = Новый Массив;
			Если НЕ ИсходныеДанные.Регистратор.Пустая() Тогда
				МассивПараметров.Добавить(ИсходныеДанные.Регистратор.Организация);
			КонецЕсли;
			РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметров);
			
			РаботаССообщениями.ОшибкаРасчета("", "Для " + ИсходныеДанные.СотрудникНаименование + " расчет """ + ИсходныеДанные.ВидРасчетаНаименование 
													+ """ не возможен, т.к. в учетной политике по налоговому учету не установлен признак отражения 
													|налогов и взносов по периоду регистрации", РасшифровкаУчетнойПолитики);
													
			РаботаССообщениями.ЗаменитьТекстКомментарияРасчета("Результат расчета: <НомерСтроки" + Строка(СтрокаДвижений.НомерСтроки) + ">", "Результат расчета: 0");										
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Данные для расчета ИПН 
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		БазаДляИсчисленияИПН 						= ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений + 
													  ИсходныеДанные.ПрочиеДоходыДляИПН * КоэффициентРаспределения * (1 - ИсходныеДанные.ЕстьОтОбратногоКомпенсирующиеИПН); // Прочие доходы учитываем только 1 раз
		ОстатокВычета								= Макс(ИсходныеДанные.РазрешенныеНалоговыеВычеты, 0);
		ПроцентИПН									= ИсходныеДанные.ПроцентИПН;
		Если ПроцентИПН = 0 Тогда
			РасшифровкаСтавкиИПН = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахИПН.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не заполнено значение ставки индивидуального подоходного налога для вида доходов """ + ИсходныеДанные.ВидДохода + """", РасшифровкаСтавкиИПН);
			Возврат 0;
		КонецЕсли;
	Иначе
		// Если компенсация ИПН не нужна, то все по нулям
		БазаДляИсчисленияИПН						= 0;
		ОстатокВычета								= 0;
		ПроцентИПН									= 0;
	КонецЕсли;
	
	// Данные для расчета ОПВ
	Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
		БазаДляИсчисленияОПВ 				= ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений + 
											  ИсходныеДанные.ПрочиеДоходыДляОПВ * КоэффициентРаспределения * (1 - ИсходныеДанные.ЕстьОтОбратногоКомпенсирующиеОПВ); // Прочие доходы учитываем только 1 раз
		ПризнакИсчисленияОПВ 				= ?(ИсходныеДанные.ПризнакИсчисленияОПВ, 1, 0);
		ПроцентОПВ 							= ИсходныеДанные.ПроцентОПВ; // ставка ОПВ
		//ПрочиеДоходыДляОПВ					= ИсходныеДанные.ПрочиеДоходыДляОПВ;
		
		// Скорректируем размер ограничения на ранее исчисленные доходы
		КорректировкаОграничения 			= ИсходныеДанные.ОблагаемыйОПВДоходНачисленийОтОбратного +  
											  ИсходныеДанные.ОблагаемыйОПВДоходПрочихВключаемыхНачислений + ?(ИсходныеДанные.РасчетОтОбратногоУчитыватьПрямыеНачисления, 
											  ИсходныеДанные.ОблагаемыйОПВДоходПрямыхНачислений, 0);
											  
		РазмерОграниченияПоДоходамОПВ 		= Макс(ИсходныеДанные.РазмерОграниченияПоДоходамОПВ - КорректировкаОграничения, 0) * КоэффициентРаспределения;
		
		МаксСуммаОПВ						= ПроцентОПВ * РазмерОграниченияПоДоходамОПВ;
	Иначе
		// Если учет ОПВ не нужен, то все по нулям
		БазаДляИсчисленияОПВ				= 0;
		ПризнакИсчисленияОПВ 				= 0;
		РазмерОграниченияПоДоходамОПВ 		= 0;
		ПроцентОПВ 							= 0; // ставка ОПВ
		//ПрочиеДоходыДляОПВ					= 0;
		МаксСуммаОПВ						= 0;
	КонецЕсли;
	
	// Данные по прочим погашаемым удержаниям
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		СуммаКомпенсируемыхУдержаний			= ИсходныеДанные.СуммаКомпенсируемыхУдержаний;
		ПроцентКомпенсируемыхУдержанийБезИПН	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПН / 100;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезОПВ / 100;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ / 100;
		ПроцентПрочихКомпенсируемыхУдержаний		= ИсходныеДанные.ПроцентПрочихКомпенсируемыхУдержаний / 100;
	Иначе
		// Если удержания не компенсируются, то все по нулям
		СуммаКомпенсируемыхУдержаний			= 0;
		ПроцентКомпенсируемыхУдержанийБезИПН	= 0;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= 0;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= 0;
		ПроцентПрочихКомпенсируемыхУдержаний		= 0;
	КонецЕсли;
	
	ПризнакПрименятьОграничениеПоДоходамОПВ = 0; // если 1, то применяется ограничение по доходам, облагаемым ОПВ
	НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
	ПризнакРасчетаИПН = 1; // если 1, то считаем ИПН, если 0, то налог=0 (нет обл. доходов за месяц)
	
	СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний * КоэффициентРаспределения;
	
	ИсчисленныеОПВВключаемыхНачислений = 0;
	Если ПризнакИсчисленияОПВ = 1 Тогда
		// если данный вид ОПВ не облагается, но база для исчисления с других видов есть
		ПризнакИсчисленияОПВ = ?(ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом, 1, 0);
		ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ);
		Если ПризнакИсчисленияОПВ = 0 И ИсчисленныеОПВ <> 0 Тогда
			// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
			БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
			ИсчисленныеОПВВключаемыхНачислений = ИсчисленныеОПВ * КомпенсироватьОПВ;
		КонецЕсли;			
	КонецЕсли;
	
	// Скорректируем Льготы и Вычеты с учетом ранее исчисленных доходов
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		КорректировкаЛьготВычетов = (ИсходныеДанные.ОблагаемыйИПНДоходНачисленийОтОбратного - ИсходныеДанные.ОблагаемыйОПВДоходНачисленийОтОбратного * ПроцентОПВ) +
									(ИсходныеДанные.ОблагаемыйИПНДоходПрочихВключаемыхНачислений - ИсходныеДанные.ОблагаемыйОПВДоходПрочихВключаемыхНачислений * ПроцентОПВ) + ?(ИсходныеДанные.РасчетОтОбратногоУчитыватьПрямыеНачисления, 
									ИсходныеДанные.ОблагаемыйИПНДоходПрямыхНачислений - ИсходныеДанные.ОблагаемыйОПВДоходПрямыхНачислений * ПроцентОПВ, 0);
									
		ЛьготыВычеты = БазаДляИсчисленияИПН + Мин(КорректировкаЛьготВычетов - ОстатокВычета, 0) * КоэффициентРаспределения;
	Иначе
		ЛьготыВычеты = 0;
	КонецЕсли;
	
	ИсчисленныйИПНВключаемыхНачислений = 0;
	Если ПризнакРасчетаИПН = 1 Тогда
		// если данный вид ИПН не облагается, но база для исчисления с других видов есть
		ПризнакРасчетаИПН = ?(ИсходныеДанные.ОблагаетсяИПН <> НеОблагаетсяЦеликом, 1, 0);
		ИсчисленныйИПН = Макс(ПроцентИПН * (ЛьготыВычеты - ПризнакИсчисленияОПВ * Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ)), 0);
		Если ПризнакРасчетаИПН = 0 И ИсчисленныйИПН <> 0 Тогда
			ИсчисленныйИПНВключаемыхНачислений = ИсчисленныйИПН * КомпенсироватьИПН;
		КонецЕсли;			
	КонецЕсли;
		
	ШагИтерации = 0;	
	МаксимальноеЧислоШагов = 100;
	
	Пока Не РезультатПолучен И (ШагИтерации < МаксимальноеЧислоШагов) Цикл
		
		ШагИтерации = ШагИтерации + 1;
		РезультатПолучен = Истина;		
		
		// Вычисляем вспомогательные переменные
		РезультирующийПроцентОПВ = ПроцентОПВ * ПризнакИсчисленияОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ);
		
		ФиксЧастьОПВ			 = ПризнакИсчисленияОПВ * (БазаДляИсчисленияОПВ * ПроцентОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ) + 
														   ПризнакПрименятьОграничениеПоДоходамОПВ * МаксСуммаОПВ);
		
		РезультирующийПроцентИПНиОПВ = ПроцентИПН * ПризнакРасчетаИПН * (1 - РезультирующийПроцентОПВ);
											
		ФиксЧастьИПН			= ПризнакРасчетаИПН * ПроцентИПН * (ЛьготыВычеты - ФиксЧастьОПВ);
		
		КоэффициентИПН = КомпенсироватьИПН - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		КоэффициентОПВ = КомпенсироватьОПВ - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		ПроцентКомпенсируемыхУдержаний = ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ + 
											ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + ПроцентПрочихКомпенсируемыхУдержаний;
								  		
		Числитель = (ИскомаяСуммаНачислений + 
					КоэффициентИПН * ФиксЧастьИПН +
					КоэффициентОПВ * ФиксЧастьОПВ + 
					КомпенсироватьУдержания * СуммаКомпенсируемыхУдержаний +
					ИсчисленныеОПВВключаемыхНачислений +
					ИсчисленныйИПНВключаемыхНачислений);
					
		Знаменатель = (1 - 
		 				КоэффициентИПН * РезультирующийПроцентИПНиОПВ -
					   	КоэффициентОПВ * РезультирующийПроцентОПВ - 
						КомпенсироватьУдержания * ПроцентКомпенсируемыхУдержаний);
								  		
		Результат = ?(Знаменатель <> 0, Числитель / Знаменатель, 0);
		Результат = ОбщегоНазначения.ОкруглитьЧисло(Результат, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Проверим граничные условия, при которых делали расчет
		РезультатОПВ = ПризнакИсчисленияОПВ * ПроцентОПВ * (БазаДляИсчисленияОПВ + Результат);

		Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
			// Наличие облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияОПВ И ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ОПВ исчисляются
					
					Если БазаДляИсчисленияОПВ + Результат > 0 Тогда
						Если ПризнакИсчисленияОПВ <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 1;
					Иначе
						Если ПризнакИсчисленияОПВ <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если РезультатОПВ > МаксСуммаОПВ Тогда
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 1;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда 
			// Учтем граничные условия, возникающие при расчете ИПН
			
			// проверка на то, чтобы ИПН не был отрицательным, если обл. доходы за месяц < 0
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ОблагаетсяИПН <> НеОблагаетсяЦеликом Тогда
					
					ОблагаемаяИПНСумма = ЛьготыВычеты + Результат - РезультатОПВ;

					Если ОблагаемаяИПНСумма < 0 Тогда
						// ранее налог считался, но облагаемая сумма за месяц < 0 - на следующем шаге не считаем
						Если ПризнакРасчетаИПН <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакРасчетаИПН = 0;
					Иначе
						// ранее налог не считался, но теперь облагаемая сумма > 0 и налог есть с чего считать
						Если ПризнакРасчетаИПН <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакРасчетаИПН = 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ИсчисленныйИПН = 0;
	ИсчисленныеОПВ = 0;
	ИсчисленныеУдержания = 0;
	
	Если Не РезультатПолучен Тогда
		// вышли из цикла по превышению макс допустимого числа шагов
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Превышено допустимо число шагов итерации ", СтатусСообщения.Важное);
	Иначе
		// Из-за округления могут получиться лишние тиынки
		ИсчисленныеОПВ = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентОПВ + ФиксЧастьОПВ + ИсчисленныеОПВВключаемыхНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Скорректируем исчисленный ИПН включаемых начислений на размер ОПВ текущего расчета
		//ИсчисленныйИПНВключаемыхНачислений = Макс(ИсчисленныйИПНВключаемыхНачислений - ИсчисленныеОПВ * ПроцентИПН, 0);
		ИсчисленныйИПН = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентИПНиОПВ + ФиксЧастьИПН + ИсчисленныйИПНВключаемыхНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
        // Увеличим результат на компенсацию включаемых начислений
		//Результат = Результат + ИсчисленныйИПНВключаемыхНачислений + ИсчисленныеОПВВключаемыхНачислений;
		
		ИсчисленныеУдержания = ОбщегоНазначения.ОкруглитьЧисло(КомпенсироватьУдержания * (Результат * ПроцентПрочихКомпенсируемыхУдержаний + 
												(Результат - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезОПВ +
												(Результат - ИсчисленныйИПН) * ПроцентКомпенсируемыхУдержанийБезИПН +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + 
												СуммаКомпенсируемыхУдержаний), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		ОбщаяСуммаКомпенсируемыхУдержаний = ИсчисленныйИПН + ИсчисленныеОПВ + ИсчисленныеУдержания;
		Разность = ИскомаяСуммаНачислений - (Результат - ОбщаяСуммаКомпенсируемыхУдержаний);
		
		Если Разность > -1 И Разность < 1 Тогда
			Результат = Результат + Разность;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = ОбщегоНазначения.ОкруглитьЧисло(?(РезультатПолучен, Результат, 0), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);

	СтрокаДвижений.Результат = Результат;

	Если КомментироватьРасчет Тогда
		
		СтрокаДополнения = "";
		Если ОбщаяСуммаКомпенсируемыхУдержаний <> 0 ИЛИ ИсходныеДанные.СуммаВключаемыхНачислений <> 0 Тогда
			СтрокаДополнения = ", в том числе:";
		КонецЕсли;
		
		
		СтрокаКомментарияОтОбратного = РаботаССообщениями.ЗаменитьТекстКомментарияРасчета("Результат расчета: <НомерСтроки" + Строка(СтрокаДвижений.НомерСтроки) + ">", 
													   "Результат расчета: " + Результат + СтрокаДополнения);
													   
		// Покажем суммы компенсируемых удержаний
		Если ОбщаяСуммаКомпенсируемыхУдержаний <> 0 И СтрокаКомментарияОтОбратного <> Неопределено Тогда
			Удержания = РаботаССообщениями.КомментарийРасчета("Компенсировано удержаний:", СтрокаКомментарияОтОбратного);
			Если ИсчисленныеОПВ <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("ОПВ: " + ИсчисленныеОПВ, Удержания);
			КонецЕсли;
			Если ИсчисленныйИПН <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("ИПН: " + ИсчисленныйИПН, Удержания);
			КонецЕсли;
			Если ИсчисленныеУдержания <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("Прочие удержания: " + ИсчисленныеУдержания, Удержания);
			КонецЕсли;
		КонецЕсли;
		
		
		// Покажем корректировки на включаемые начисления
		Если ИсходныеДанные.СуммаВключаемыхНачислений <> 0 И СтрокаКомментарияОтОбратного <> Неопределено Тогда
			РаботаССообщениями.КомментарийРасчета("Вычтено включаемых начислений: " + ИсходныеДанные.СуммаВключаемыхНачислений, СтрокаКомментарияОтОбратного);
		КонецЕсли;
				
	КонецЕсли;
												   
	Возврат Результат;
	
КонецФункции  // РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2014()

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным для способа расчета "от обратного"
// по правилам, действующим с 2009 года (фикс. ставка ИПН)
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  ТаблицаСтавокИПН - таблица значений со ставками ИПН за текущий рассчитываемый период регистрации для расчета "от обратного"
//
// Возвращаемое значение:
//  Число - результат расчета.
//
// Расчет "от обратного" производится на основе решения уравнения:
// 
// 		Х - Кн * ИПН - Кв * ОПВ - Ку * Уд = Р,
// где
//                    
//		ИПН = К0н * (Х + Бн - Льгот - ОПВ - Вычет) * %Н
//
//      ОПВ = ((1- К1в)*(Х + Бв) * %В + К1в * МаксОПВ) * К2в
//      
//      Уд  = Х * %Упр + Фу + (Х - ОПВ) * %Ув + (Х - ИПН) * %Ун + (Х - ОПВ - ИПН) * %Унв
//
// Относительно Х:
//
//      ОПВ(Х) = Х * %ПФ + Фв
//
//				%ПФ = %В * К2в * (1 - К1в)
//           
//				Фв  = Бв * %В * (1 - К1в) * К2в + К1в * МаксОПВ * К2в
//
//		ИПН(Х) = Х * %НВ + Фн
//
//				%НВ = К0н * %Н * (1 - %ПФ)
//
//				Фн  = К0н * %Н * (Бн - Льгот - Фв - Вычет)
//
// Решение уравнения:
//               Р + К'н * Фн + К'в * Фв + Ку * Фу
//		Х	  = -----------------------------------
//               1 - К'н * %НВ - К'в * %ПФ - Ку * %У'
//
// где
//		К'н   = Кн - Ку * %Ун - Ку * %Унв
//		К'в   = Кв - Ку * %Ув - Ку * %Унв
//		%У'   = %Упр + %Ув + %Ун + %Унв
//
//
// Обозначения:
// |В формуле	|	Переменная в программе					| Комментарий
// ---------------------------------------------------------------------------------------------------------------
// |   Х		|	ИскомаяСуммаНачислений					| Сумма, которую хотят получить на руки (за минусом включаемых начислений)
// |   Кн		|	КомпенсироватьИПН						| 1, если компенсируется ИПН, 0 иначе
// |   Кв		|	КомпенсироватьОПВ						| 1, если компенсируются ОПВ, 0 иначе
// |   Ку		|	КомпенсироватьУдержания					| 1, если компенсируются удержания, 0 иначе
// |   К0н		|	ПризнакРасчетаИПН			 			| 1, если ИПН рассчитывается, иначе 0 - налог = 0 (обл база за месяц < 0)
// |   Бн		|   БазаДляИсчисленияИПН					| Сумма облагаемого ИПН дохода за месяц (уже отняты вычеты и ОПВ)
// |   %Н		|	ПроцентИПН								| Процент ИПН
// |   К1в		| ПризнакПрименятьОграничениеПоДоходамОПВ 	| 0, если расчет ОПВ от базы (когда база < 75 МЗП), 1 если ОПВ с 75 МЗП
// |   Бв		|	БазаДляИсчисленияОПВ					| Сумма облагаемого ОПВ дохода за месяц (за счет прочих начислений, не относящихся в Х)
// |   %В		|	ПроцентОПВ								| Процент обязательных пенсионных взносов
// |   МаксОПВ	| 	МаксСуммаОПВ 							| Сумма ОПВ с 75 МЗП
// |   К2в		|	ПризнакИсчисленияОПВ					| 1, если по работнику исчисляются ОПВ, иначе 0 (пенсионер, инвалид 1, 2 гр. и т.д.)
// |   %Упр		|	ПроцентПрочихКомпенсируемыхУдержаний	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых не вычитается ОПВ и ИПН)
// |   %Ун		|	ПроцентКомпенсируемыхУдержанийБезИПН	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН)
// |   %Ув		|	ПроцентКомпенсируемыхУдержанийБезОПВ	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ОПВ)
// |   %Унв		|	ПроцентКомпенсируемыхУдержанийБезИПНиОПВ| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН и ОПВ)
// |   Фу		|	СуммаКомпенсируемыхУдержаний			| Компенсируемые удержания фиксированной суммой
// |   %ПФ		|	РезультирующийПроцентОПВ				|
// |   Фв		|	ФиксЧастьОПВ							|
// |   %НВ		|	РезультирующийПроцентИПНиОПВ			|
// |   Фн		|	ФиксЧастьИПН							|
// |   Льгот	|	ОстатокЛьготы							| Неиспользованная часть льготы, доступна в текущем месяца
// |   Вычет	|	ОстатокВычета							| Неиспользованный вычет с учетом переносимых с начала года, доступный в текущем месяце
// 
Функция РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2019(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет, СтруктураЦелевыхРазмеров, СтруктураВспомогательныхДанных)
	
	ЭтоРасчетКорректировокДохода = ?(СтруктураВспомогательныхДанных.Свойство("ЭтоРасчетКорректировокДохода"), СтруктураВспомогательныхДанных.ЭтоРасчетКорректировокДохода, Ложь);
	ТаблицаПримененныхВычетов = ?(СтруктураВспомогательныхДанных.Свойство("ТаблицаПримененныхВычетов"), СтруктураВспомогательныхДанных.ТаблицаПримененныхВычетов, Новый ТаблицаЗначений);
	
	СтрокаСуммыВычета = ТаблицаПримененныхВычетов.Найти(ИсходныеДанные.ФизЛицо);
	
	Если НЕ СтрокаСуммыВычета = Неопределено Тогда
		СуммаПримененогоВычетаВТекущемРасчете = СтрокаСуммыВычета.ПрименнныйВычет;
	Иначе
		СуммаПримененогоВычетаВТекущемРасчете = 0;
	КонецЕсли;
	
	Если ЭтоРасчетКорректировокДохода Тогда
		РезультатДоКорректировки = СтрокаДвижений.Результат;
		СтрокаДвижений.Результат = СтрокаДвижений.ДополнительныеДанные;
	КонецЕсли;

	ВидРасчета = СтрокаДвижений.ВидРасчета;
	Результат = 0;
	ЦелевойРазмер = 0;
	
	ДатаПримененияКорректировкиДохода = Дата(2019, 1, 1);
	// МРП получаем на начало финансового года, в соответствии с НК
	ОграничениеКорректировкиДохода25МРП = 25 * МесячныйРасчетныйПоказатель(НачалоГода(ПериодРегистрации));
	ПрименятьКорректировкуПрочихНалоговВзносов = ПроведениеРасчетовПолныеПрава.ПрименятьКорректировкуПрочихНалоговВзносовОтчислений(СтрокаДвижений.Организация, ПериодРегистрации);
	
	// Получем целевые размеры всех расчтов от обратного в сумме 
	// для вычисления коэффициента распределения
	ТаблицаЦелевыхРазмеров = СтруктураЦелевыхРазмеров.ТаблицаЦелевыхРазмеров;
	ТаблицаЦелевыхРазмеровПоВидуРасчета = СтруктураЦелевыхРазмеров.ТаблицаЦелевыхРазмеровПоВидуРасчета;
	НачисленияСКорректировкой = СтруктураЦелевыхРазмеров.ТаблицаНачисленияСКорректировкойДохода;
	
	ЦелевойРазмерВсего = 0;
	ЦелевойРазмерВсегоПоВидуРасчета = 0;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Регистратор", ИсходныеДанные.Регистратор);
	СтруктураПоиска.Вставить("ФизЛицо", ИсходныеДанные.ФизЛицо);
	
	СтрокаТаблицыЦелевыхРазмеров = ТаблицаЦелевыхРазмеров.НайтиСтроки(СтруктураПоиска)[0];
	
	// Для распределения вычетов и льгот
	ЦелевойРазмерВсего = СтрокаТаблицыЦелевыхРазмеров.ЦелевойРазмер;
	СуммаНалогаВсего   = СтрокаТаблицыЦелевыхРазмеров.СуммаНалога;

	СтруктураПоиска.Вставить("ВидРасчетаНаименование", ИсходныеДанные.ВидРасчетаНаименование);
	
	// Для распределения включаемых начислений
	ЦелевойРазмерВсегоПоВидуРасчета = ТаблицаЦелевыхРазмеровПоВидуРасчета.НайтиСтроки(СтруктураПоиска)[0].ЦелевойРазмер;
	
	РезультатПолучен = Ложь;
	
	// определим целевой размер
	ЦелевойРазмер = СтрокаДвижений.Результат;
	
	
	// КоэффициентРаспределения и КоэффициентРаспределенияВключаемыхНачислений необходимы для паралельного расчета разных начислений с одной категорией начисления,
	// или одного и того же расчета в случае изменения размера в середине расчетного периода
	
	// Для вычетов, льгот и ограничений
	КоэффициентРаспределения = ?(ЦелевойРазмерВсего <= 0, 1, ЦелевойРазмер / ЦелевойРазмерВсего);
	
	// Для включаемых начислений
	КоэффициентРаспределенияВключаемыхНачислений = ?(ЦелевойРазмерВсегоПоВидуРасчета <= 0, 1, ЦелевойРазмер / ЦелевойРазмерВсегоПоВидуРасчета);
		
	ТаблицаСтавокНалогов = Новый ТаблицаЗначений;
	ТаблицаСтавокНалогов.Колонки.Добавить("СуммаДоходаС",  Новый ОписаниеТипов("Число"));
	ТаблицаСтавокНалогов.Колонки.Добавить("СуммаДоходаПо", Новый ОписаниеТипов("Число"));
	ТаблицаСтавокНалогов.Колонки.Добавить("СтавкаИПН",     Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(10, 1));
	УменьшеннаяСтавка = ТаблицаСтавокНалогов.Добавить();
	УменьшеннаяСтавка.СуммаДоходаС = 0;
	УменьшеннаяСтавка.СуммаДоходаПо = ОграничениеКорректировкиДохода25МРП;
	УменьшеннаяСтавка.СтавкаИПН = 1;
	СтандартнаяСтавка = ТаблицаСтавокНалогов.Добавить();
	СтандартнаяСтавка.СуммаДоходаС = ОграничениеКорректировкиДохода25МРП;
	// максимальная величина ресурса СуммаДохода
	СтандартнаяСтавка.СуммаДоходаПо = 999999999999999.99;
	СтандартнаяСтавка.СтавкаИПН = 10;

	// запомним целевой размер текущей строки расчета
	СтрокаДвижений.ДополнительныеДанные = ЦелевойРазмер;
		
	// Сумма, которую надо начислить, чтобы с учетом включаемых начислений получить нужную сумму на руки
	ИскомаяСуммаНачислений = ЦелевойРазмер - ИсходныеДанные.СуммаВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений;
	
	// округлим искомую сумму
	ИскомаяСуммаНачислений = ОбщегоНазначения.ОкруглитьЧисло(ИскомаяСуммаНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
	
	Если НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		 
		// Считать нечего, т.к. либо ничего не компенсируем 
		РаботаССообщениями.ЗаменитьТекстКомментарияРасчета("Результат расчета: <НомерСтроки" + Строка(СтрокаДвижений.НомерСтроки) + ">", "Результат расчета: " + ЦелевойРазмер);										
		РаботаССообщениями.ОшибкаРасчета(ИсходныеДанные.ВидРасчетаНаименование, ": Не определены компенсируемые удержания", ВидРасчета);
		Возврат ИскомаяСуммаНачислений;		
	КонецЕсли;

	// Признаки компенсирования расчетом "от обратного" различных удержаний
	КомпенсироватьИПН 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, 1, 0);
	КомпенсироватьОПВ 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ, 1, 0);
	КомпенсироватьУдержания 	= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания, 1, 0);
	
	Если КомпенсироватьИПН <> 0 Или КомпенсироватьОПВ <> 0 Тогда
		Если Не ИсходныеДанные.ОтражениеПоПериодуРегистрации Тогда
			МассивПараметров = Новый Массив;
			Если НЕ ИсходныеДанные.Регистратор.Пустая() Тогда
				МассивПараметров.Добавить(ИсходныеДанные.Регистратор.Организация);
			КонецЕсли;
			РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметров);
			
			РаботаССообщениями.ОшибкаРасчета("", "Для " + ИсходныеДанные.СотрудникНаименование + " расчет """ + ИсходныеДанные.ВидРасчетаНаименование 
													+ """ не возможен, т.к. в учетной политике по налоговому учету не установлен признак отражения 
													|налогов и взносов по периоду регистрации", РасшифровкаУчетнойПолитики);
													
			РаботаССообщениями.ЗаменитьТекстКомментарияРасчета("Результат расчета: <НомерСтроки" + Строка(СтрокаДвижений.НомерСтроки) + ">", "Результат расчета: 0");										
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Данные для расчета ИПН 
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		БазаДляИсчисленияИПН 						= ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений + 
													  ИсходныеДанные.ПрочиеДоходыДляИПН * КоэффициентРаспределения * (1 - ИсходныеДанные.ЕстьОтОбратногоКомпенсирующиеИПН); // Прочие доходы учитываем только 1 раз
		ОстатокВычета								= ?(НЕ ИсходныеДанные.ФизЛицоНерезидент, Макс(ИсходныеДанные.РазрешенныеНалоговыеВычеты, 0), 0);
	Иначе
		// Если компенсация ИПН не нужна, то все по нулям
		БазаДляИсчисленияИПН						= 0;
		ОстатокВычета								= 0;

	КонецЕсли;
	
	// Данные для расчета ОПВ
	Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
		БазаДляИсчисленияОПВ 				= ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений + 
											  ИсходныеДанные.ПрочиеДоходыДляОПВ * КоэффициентРаспределения * (1 - ИсходныеДанные.ЕстьОтОбратногоКомпенсирующиеОПВ); // Прочие доходы учитываем только 1 раз
		ПризнакИсчисленияОПВ 				= ?(ИсходныеДанные.ПризнакИсчисленияОПВ, 1, 0);
		ПроцентОПВ 							= ИсходныеДанные.ПроцентОПВ; // ставка ОПВ
		//ПрочиеДоходыДляОПВ					= ИсходныеДанные.ПрочиеДоходыДляОПВ;
		
		// Скорректируем размер ограничения на ранее исчисленные доходы
		КорректировкаОграничения 			= ИсходныеДанные.ОблагаемыйОПВДоходНачисленийОтОбратного +  
											  ИсходныеДанные.ОблагаемыйОПВДоходПрочихВключаемыхНачислений + ?(ИсходныеДанные.РасчетОтОбратногоУчитыватьПрямыеНачисления, 
											  ИсходныеДанные.ОблагаемыйОПВДоходПрямыхНачислений, 0);
											  
		РазмерОграниченияПоДоходамОПВ 		= Макс(ИсходныеДанные.РазмерОграниченияПоДоходамОПВ - КорректировкаОграничения, 0) * КоэффициентРаспределения;
		
		МаксСуммаОПВ						= ПроцентОПВ * РазмерОграниченияПоДоходамОПВ;
	Иначе
		// Если учет ОПВ не нужен, то все по нулям
		БазаДляИсчисленияОПВ				= 0;
		ПризнакИсчисленияОПВ 				= 0;
		РазмерОграниченияПоДоходамОПВ 		= 0;
		ПроцентОПВ 							= 0; // ставка ОПВ
		//ПрочиеДоходыДляОПВ					= 0;
		МаксСуммаОПВ						= 0;
	КонецЕсли;
	
	// Данные по прочим погашаемым удержаниям
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		СуммаКомпенсируемыхУдержаний			= ИсходныеДанные.СуммаКомпенсируемыхУдержаний;
		ПроцентКомпенсируемыхУдержанийБезИПН	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПН / 100;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезОПВ / 100;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ / 100;
		ПроцентПрочихКомпенсируемыхУдержаний		= ИсходныеДанные.ПроцентПрочихКомпенсируемыхУдержаний / 100;
	Иначе
		// Если удержания не компенсируются, то все по нулям
		СуммаКомпенсируемыхУдержаний			= 0;
		ПроцентКомпенсируемыхУдержанийБезИПН	= 0;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= 0;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= 0;
		ПроцентПрочихКомпенсируемыхУдержаний		= 0;
	КонецЕсли;
	
	ПризнакПрименятьОграничениеПоДоходамОПВ = 0; // если 1, то применяется ограничение по доходам, облагаемым ОПВ
	НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
	ПризнакРасчетаИПН = 1; // если 1, то считаем ИПН, если 0, то налог=0 (нет обл. доходов за месяц)
	
	СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний * КоэффициентРаспределения;
	
	ИсчисленныеОПВВключаемыхНачислений = 0;
	Если ПризнакИсчисленияОПВ = 1 Тогда
		// если данный вид ОПВ не облагается, но база для исчисления с других видов есть
		ПризнакИсчисленияОПВ = ?(ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом, 1, 0);
		ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ);
		Если ПризнакИсчисленияОПВ = 0 И ИсчисленныеОПВ <> 0 Тогда
			// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
			БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
			ИсчисленныеОПВВключаемыхНачислений = ИсчисленныеОПВ * КомпенсироватьОПВ;
		КонецЕсли;			
	КонецЕсли;
	
	// Скорректируем Льготы и Вычеты с учетом ранее исчисленных доходов
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда

		КорректировкаЛьготВычетовОтОбратного = ИсходныеДанные.ОблагаемыйИПНДоходНачисленийОтОбратного - ИсходныеДанные.ОблагаемыйОПВДоходНачисленийОтОбратного * ПроцентОПВ;
		КорректировкаЛьготВычетовВключаемых  = ИсходныеДанные.ОблагаемыйИПНДоходПрочихВключаемыхНачислений - ИсходныеДанные.ОблагаемыйОПВДоходПрочихВключаемыхНачислений * ПроцентОПВ;
		КорректировкаЛьготВычетовПрямых  	 = ?(ИсходныеДанные.РасчетОтОбратногоУчитыватьПрямыеНачисления, ИсходныеДанные.ОблагаемыйИПНДоходПрямыхНачислений - ИсходныеДанные.ОблагаемыйОПВДоходПрямыхНачислений * ПроцентОПВ, 0);
		
		КорректировкаЛьготВычетов = КорректировкаЛьготВычетовОтОбратного + КорректировкаЛьготВычетовВключаемых + КорректировкаЛьготВычетовПрямых;
									
		// коэффициент распределения не используем, списываем по остаткам
		Если ЭтоРасчетКорректировокДохода Тогда 
			// при перерасчете корректировки используем сумму применного вычета в этом начислении ранее
			ЛьготыВычеты = -СтрокаДвижений.СуммаВычетовДоходовОтОбратного;
		ИначеЕсли КорректировкаЛьготВычетовПрямых > ИсходныеДанные.РазрешенныеНалоговыеВычеты
			// если сумма прямых начислений более суммы разрешенных вычетов, то в расчетах от обратного вычет не применяем
			ИЛИ (КорректировкаЛьготВычетов - КорректировкаЛьготВычетовОтОбратного) > ИсходныеДанные.РазрешенныеНалоговыеВычеты Тогда
			ЛьготыВычеты = 0;
		Иначе
			// Сумма всех возможных налоговых вычетов - Вычета других документов - Вычеты текущего расчета (в документе по сотруднику 2 и более расчтов от обратного) - Суммы вычетов прямых начислений (принимаем как использованная сумма вычета)
			ЛьготыВычеты = БазаДляИсчисленияИПН - (Макс(ИсходныеДанные.РазрешенныеНалоговыеВычеты - ИсходныеДанные.ПримененныеНалоговыеВычетыВТекущемМесяце - СуммаПримененогоВычетаВТекущемРасчете - КорректировкаЛьготВычетовПрямых, 0));
		КонецЕсли;
	Иначе
		ЛьготыВычеты = 0;
	КонецЕсли;
	
	ИсчисленныйИПНВключаемыхНачислений = 0;
	Если ПризнакРасчетаИПН = 1 Тогда
		
		ПроцентИПН = 0.1;
		
		// определим размер применяемой корректировки дохода (корректировка дохода применяется после вычетов)
		Если ПериодРегистрации >= ДатаПримененияКорректировкиДохода 
			И НЕ ИсходныеДанные.ФизЛицоНерезидент  
			Тогда
			
			Для ИндексСтавки = 0 По ТаблицаСтавокНалогов.Количество() - 1 Цикл
				Если ИсходныеДанные.СуммаНачисленийОтОбратного >= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаС 
					И ИсходныеДанные.СуммаНачисленийОтОбратного <= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаПо Тогда
					
					ПроцентИПН = ТаблицаСтавокНалогов[ИндексСтавки].СтавкаИПН / 100;
					
					Прервать;
				КонецЕсли;
			КонецЦикла;		
			
		КонецЕсли;

		// если данный вид ИПН не облагается, но база для исчисления с других видов есть
		ПризнакРасчетаИПН = ?(ИсходныеДанные.ОблагаетсяИПН <> НеОблагаетсяЦеликом, 1, 0);
		ИсчисленныйИПН = Макс(ПроцентИПН * (ЛьготыВычеты - ПризнакИсчисленияОПВ * Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ)), 0);
		Если ПризнакРасчетаИПН = 0 И ИсчисленныйИПН <> 0 Тогда
			ИсчисленныйИПНВключаемыхНачислений = ИсчисленныйИПН * КомпенсироватьИПН;
		КонецЕсли;			
	КонецЕсли;
		
	ШагИтерации = 0;	
	МаксимальноеЧислоШагов = 100;
	
	// Определим первоначально строку ставок ИПН 
	СуммаДоходаСотрудникаДоРасчета = ЦелевойРазмерВсего + СуммаНалогаВсего + ИсходныеДанные.СуммаНачисленийОтОбратного + ?(ИсходныеДанные.РасчетОтОбратногоУчитыватьПрямыеНачисления, ИсходныеДанные.СуммаПрямыхНачислений - ИсходныеДанные.СуммаВключаемыхНачислений, 0);
	
	Если НЕ ИсходныеДанные.ФизЛицоНерезидент
		И НЕ СтрокаДвижений.Сторно Тогда
		
		ИндексСтавки = 0;
		Для ИндексСтавки = 0 По ТаблицаСтавокНалогов.Количество() - 1 Цикл
			// если сумма сотрудника до расчета налогов уже выше предела, то для расчета сразу используем ставку 10%
			Если СуммаДоходаСотрудникаДоРасчета >= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаС 
				И СуммаДоходаСотрудникаДоРасчета <= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаПо Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		// для нерезидентов используем обычную ставку налогов
		ИндексСтавки = 1;
		
	КонецЕсли;
	
	Пока Не РезультатПолучен И (ШагИтерации < МаксимальноеЧислоШагов) Цикл
		
		ШагИтерации = ШагИтерации + 1;
		РезультатПолучен = Истина;		
		
		ПроцентИПН 				 = ТаблицаСтавокНалогов[ИндексСтавки].СтавкаИПН / 100;

		// Вычисляем вспомогательные переменные
		РезультирующийПроцентОПВ = ПроцентОПВ * ПризнакИсчисленияОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ);
		
		ФиксЧастьОПВ			 = ПризнакИсчисленияОПВ * (БазаДляИсчисленияОПВ * ПроцентОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ) + 
														   ПризнакПрименятьОграничениеПоДоходамОПВ * МаксСуммаОПВ);
		
		РезультирующийПроцентИПНиОПВ = ПроцентИПН * ПризнакРасчетаИПН * (1 - РезультирующийПроцентОПВ);
											
		ФиксЧастьИПН			= ПризнакРасчетаИПН * ПроцентИПН * (ЛьготыВычеты - ФиксЧастьОПВ);
		
		КоэффициентИПН = КомпенсироватьИПН - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		КоэффициентОПВ = КомпенсироватьОПВ - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		ПроцентКомпенсируемыхУдержаний = ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ + 
											ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + ПроцентПрочихКомпенсируемыхУдержаний;
								  		
		Числитель = (ИскомаяСуммаНачислений + 
					КоэффициентИПН * ФиксЧастьИПН +
					КоэффициентОПВ * ФиксЧастьОПВ + 
					КомпенсироватьУдержания * СуммаКомпенсируемыхУдержаний +
					ИсчисленныеОПВВключаемыхНачислений +
					ИсчисленныйИПНВключаемыхНачислений);
					
		Знаменатель = (1 - 
		 				КоэффициентИПН * РезультирующийПроцентИПНиОПВ -
					   	КоэффициентОПВ * РезультирующийПроцентОПВ - 
						КомпенсироватьУдержания * ПроцентКомпенсируемыхУдержаний);
								  		
		Результат = ?(Знаменатель <> 0, Числитель / Знаменатель, 0);
		Результат = ОбщегоНазначения.ОкруглитьЧисло(Результат, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Проверим граничные условия, при которых делали расчет
		РезультатОПВ = ПризнакИсчисленияОПВ * ПроцентОПВ * (БазаДляИсчисленияОПВ + Результат);

		Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
			// Наличие облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияОПВ И ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ОПВ исчисляются
					
					Если БазаДляИсчисленияОПВ + Результат > 0 Тогда
						Если ПризнакИсчисленияОПВ <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 1;
					Иначе
						Если ПризнакИсчисленияОПВ <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если РезультатОПВ > МаксСуммаОПВ Тогда
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 1;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда 
			// Учтем граничные условия, возникающие при расчете ИПН
			
			// проверка на то, чтобы ИПН не был отрицательным, если обл. доходы за месяц < 0
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ОблагаетсяИПН <> НеОблагаетсяЦеликом Тогда
					
					ОблагаемаяИПНСумма = ЛьготыВычеты + Результат - РезультатОПВ;

					Если ОблагаемаяИПНСумма < 0 Тогда
						// ранее налог считался, но облагаемая сумма за месяц < 0 - на следующем шаге не считаем
						Если ПризнакРасчетаИПН <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакРасчетаИПН = 0;
					Иначе
						// ранее налог не считался, но теперь облагаемая сумма > 0 и налог есть с чего считать
						Если ПризнакРасчетаИПН <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакРасчетаИПН = 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Соответствие общего дохода сотрудника применямой ставке 
		Если РезультатПолучен И (ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			И ИсходныеДанные.ОтОбратногоУчитыватьОПВ) 
			И НЕ ИсходныеДанные.ФизЛицоНерезидент
			И НЕ СтрокаДвижений.Сторно Тогда
				
			ВремИндекс = 0;
			
			Для ВремИндекс = 0 По ТаблицаСтавокНалогов.Количество() - 1 Цикл
				
				// СуммаДоходаСотрудникаДоРасчета + сумма "сверху" текущего начисления
				СуммаДоходаСотрудникаПослеРасчета = СуммаДоходаСотрудникаДоРасчета + (Результат - ЦелевойРазмер);
				
				Если СуммаДоходаСотрудникаПослеРасчета >= ТаблицаСтавокНалогов[ВремИндекс].СуммаДоходаС
					 И СуммаДоходаСотрудникаПослеРасчета <= ТаблицаСтавокНалогов[ВремИндекс].СуммаДоходаПо Тогда
					
					Если ВремИндекс <> ИндексСтавки Тогда
						
						РезультатПолучен = Ложь;
						
						СтрокиКорректировок = НачисленияСКорректировкой.НайтиСтроки(Новый Структура("Сотрудник", ИсходныеДанные.Сотрудник));
						
						Если НЕ СтрокиКорректировок.Количество() = 0 Тогда
							
							Для Каждого СтрокаКорректировки Из СтрокиКорректировок Цикл
								СтрокаКорректировки.ПересчитатьНачисление = Истина;	
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
					
					ИндексСтавки = ВремИндекс;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// зафиксируем начисления, в которых была применена корректировка дохода; 
			// список таких начислений будет перерасчитан, в случае превышения 
			// в очередном виде расчета "от обратного" суммы предела корректировки
			Если СуммаДоходаСотрудникаПослеРасчета <= ОграничениеКорректировкиДохода25МРП
				И НЕ ЭтоРасчетКорректировокДохода Тогда
					
				СтрокаСКорректировкойДохода = НачисленияСКорректировкой.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСКорректировкойДохода, СтрокаДвижений);
				СтрокаСКорректировкойДохода.СтрокаДвижений = СтрокаДвижений;
					
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
	ИсчисленныйИПН = 0;
	ИсчисленныеОПВ = 0;
	ИсчисленныеУдержания = 0;
	
	Если Не РезультатПолучен Тогда
		// вышли из цикла по превышению макс допустимого числа шагов
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Превышено допустимое число шагов итерации ", СтатусСообщения.Важное);
	Иначе
		// Из-за округления могут получиться лишние тиынки
		ИсчисленныеОПВ = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентОПВ + ФиксЧастьОПВ + ИсчисленныеОПВВключаемыхНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Скорректируем исчисленный ИПН включаемых начислений на размер ОПВ текущего расчета
		ИсчисленныйИПН = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентИПНиОПВ + ФиксЧастьИПН + ИсчисленныйИПНВключаемыхНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		ИсчисленныеУдержания = ОбщегоНазначения.ОкруглитьЧисло(КомпенсироватьУдержания * (Результат * ПроцентПрочихКомпенсируемыхУдержаний + 
												(Результат - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезОПВ +
												(Результат - ИсчисленныйИПН) * ПроцентКомпенсируемыхУдержанийБезИПН +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + 
												СуммаКомпенсируемыхУдержаний), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		ОбщаяСуммаКомпенсируемыхУдержаний = ИсчисленныйИПН + ИсчисленныеОПВ + ИсчисленныеУдержания;
		Разность = ИскомаяСуммаНачислений - (Результат - ОбщаяСуммаКомпенсируемыхУдержаний);
		
		Если Разность > -1 И Разность < 1 Тогда
			Результат = Результат + Разность;
		КонецЕсли;
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			// при перерасчете корректировок используем ранне рассчитанную сумму вычета
			И НЕ ЭтоРасчетКорректировокДохода Тогда
			
			СуммаПрименногоВычетаИПН = Окр(?(ЛьготыВычеты < 0, Мин(-ЛьготыВычеты, Результат - ИсчисленныеОПВ - ИсчисленныеУдержания), 0), 2);
		
			СтрокаДвижений.СуммаВычетовДоходовОтОбратного = СуммаПрименногоВычетаИПН;
			
			Если НЕ СтрокаСуммыВычета = Неопределено Тогда
				СтрокаСуммыВычета.ПрименнныйВычет = СтрокаСуммыВычета.ПрименнныйВычет + СуммаПрименногоВычетаИПН; 
			Иначе
				СтрокаПрименнногоВычета = ТаблицаПримененныхВычетов.Добавить();
				СтрокаПрименнногоВычета.ФизЛицо = ИсходныеДанные.Физлицо;
				СтрокаПрименнногоВычета.ПрименнныйВычет = СуммаПрименногоВычетаИПН;
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
	Результат = ОбщегоНазначения.ОкруглитьЧисло(?(РезультатПолучен, Результат, 0), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);

	СтрокаДвижений.Результат = Результат;

	СтрокаТаблицыЦелевыхРазмеров.СуммаНалога = СуммаНалогаВсего + (Результат - ЦелевойРазмер);
	
	Если КомментироватьРасчет Тогда
		
		СтрокаДополнения = "";
		Если ОбщаяСуммаКомпенсируемыхУдержаний <> 0 ИЛИ ИсходныеДанные.СуммаВключаемыхНачислений <> 0 Тогда
			СтрокаДополнения = ", в том числе:";
		КонецЕсли;
		
		Если ЭтоРасчетКорректировокДохода Тогда
			СтрокаКомментарияОтОбратного = РаботаССообщениями.ЗаменитьТекстКомментарияРасчета("Результат расчета: " + РезультатДоКорректировки + СтрокаДополнения, 
														   "Результат расчета: " + Результат + СтрокаДополнения);
														   
		   	Если НЕ СтрокаКомментарияОтОбратного = Неопределено Тогда
				СтрокаКомментарияОтОбратного.Строки.Очистить();	   
			КонецЕсли;
															   
		Иначе
			СтрокаКомментарияОтОбратного = РаботаССообщениями.ЗаменитьТекстКомментарияРасчета("Результат расчета: <НомерСтроки" + Строка(СтрокаДвижений.НомерСтроки) + ">", 
														   "Результат расчета: " + Результат + СтрокаДополнения);
		КонецЕсли;
		
													   
		// Покажем суммы компенсируемых удержаний
		Если ОбщаяСуммаКомпенсируемыхУдержаний <> 0 И СтрокаКомментарияОтОбратного <> Неопределено Тогда
			Удержания = РаботаССообщениями.КомментарийРасчета("Компенсировано удержаний:", СтрокаКомментарияОтОбратного);
			Если ИсчисленныеОПВ <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("ОПВ: " + ИсчисленныеОПВ, Удержания);
			КонецЕсли;
			Если ИсчисленныйИПН <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("ИПН: " + ИсчисленныйИПН, Удержания);
			КонецЕсли;
			Если ИсчисленныеУдержания <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("Прочие удержания: " + ИсчисленныеУдержания, Удержания);
			КонецЕсли;
		КонецЕсли;
		
		
		// Покажем корректировки на включаемые начисления
		Если ИсходныеДанные.СуммаВключаемыхНачислений <> 0 И СтрокаКомментарияОтОбратного <> Неопределено Тогда
			РаботаССообщениями.КомментарийРасчета("Вычтено включаемых начислений: " + ИсходныеДанные.СуммаВключаемыхНачислений, СтрокаКомментарияОтОбратного);
		КонецЕсли;
				
	КонецЕсли;
												   
	Возврат Результат;
	
КонецФункции  // РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2014()

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным для способа расчета "от обратного"
// по правилам, действующим с 2009 года (фикс. ставка ИПН)
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  ТаблицаСтавокИПН - таблица значений со ставками ИПН за текущий рассчитываемый период регистрации для расчета "от обратного"
//
// Возвращаемое значение:
//  Число - результат расчета.
//
// Расчет "от обратного" производится на основе решения уравнения:
// 
// 		Х - Кн * ИПН - Кв * ОПВ - Ку * Уд = Р,
// где
//                    
//		ИПН = К0н * (Х + Бн - Льгот - ОПВ - Вычет) * %Н
//
//      ОПВ = ((1- К1в)*(Х + Бв) * %В + К1в * МаксОПВ) * К2в
//      
//      Уд  = Х * %Упр + Фу + (Х - ОПВ) * %Ув + (Х - ИПН) * %Ун + (Х - ОПВ - ИПН) * %Унв
//
// Относительно Х:
//
//      ОПВ(Х) = Х * %ПФ + Фв
//
//				%ПФ = %В * К2в * (1 - К1в)
//           
//				Фв  = Бв * %В * (1 - К1в) * К2в + К1в * МаксОПВ * К2в
//
//		ИПН(Х) = Х * %НВ + Фн
//
//				%НВ = К0н * %Н * (1 - %ПФ)
//
//				Фн  = К0н * %Н * (Бн - Льгот - Фв - Вычет)
//
// Решение уравнения:
//               Р + К'н * Фн + К'в * Фв + Ку * Фу
//		Х	  = -----------------------------------
//               1 - К'н * %НВ - К'в * %ПФ - Ку * %У'
//
// где
//		К'н   = Кн - Ку * %Ун - Ку * %Унв
//		К'в   = Кв - Ку * %Ув - Ку * %Унв
//		%У'   = %Упр + %Ув + %Ун + %Унв
//
//
// Обозначения:
// |В формуле	|	Переменная в программе					| Комментарий
// ---------------------------------------------------------------------------------------------------------------
// |   Х		|	ИскомаяСуммаНачислений					| Сумма, которую хотят получить на руки (за минусом включаемых начислений)
// |   Кн		|	КомпенсироватьИПН						| 1, если компенсируется ИПН, 0 иначе
// |   Кв		|	КомпенсироватьОПВ						| 1, если компенсируются ОПВ, 0 иначе
// |   Ку		|	КомпенсироватьУдержания					| 1, если компенсируются удержания, 0 иначе
// |   К0н		|	ПризнакРасчетаИПН			 			| 1, если ИПН рассчитывается, иначе 0 - налог = 0 (обл база за месяц < 0)
// |   Бн		|   БазаДляИсчисленияИПН					| Сумма облагаемого ИПН дохода за месяц (уже отняты вычеты и ОПВ)
// |   %Н		|	ПроцентИПН								| Процент ИПН
// |   К1в		| ПризнакПрименятьОграничениеПоДоходамОПВ 	| 0, если расчет ОПВ от базы (когда база < 75 МЗП), 1 если ОПВ с 75 МЗП
// |   Бв		|	БазаДляИсчисленияОПВ					| Сумма облагаемого ОПВ дохода за месяц (за счет прочих начислений, не относящихся в Х)
// |   %В		|	ПроцентОПВ								| Процент обязательных пенсионных взносов
// |   МаксОПВ	| 	МаксСуммаОПВ 							| Сумма ОПВ с 75 МЗП
// |   К2в		|	ПризнакИсчисленияОПВ					| 1, если по работнику исчисляются ОПВ, иначе 0 (пенсионер, инвалид 1, 2 гр. и т.д.)
// |   %Упр		|	ПроцентПрочихКомпенсируемыхУдержаний	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых не вычитается ОПВ и ИПН)
// |   %Ун		|	ПроцентКомпенсируемыхУдержанийБезИПН	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН)
// |   %Ув		|	ПроцентКомпенсируемыхУдержанийБезОПВ	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ОПВ)
// |   %Унв		|	ПроцентКомпенсируемыхУдержанийБезИПНиОПВ| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН и ОПВ)
// |   Фу		|	СуммаКомпенсируемыхУдержаний			| Компенсируемые удержания фиксированной суммой
// |   %ПФ		|	РезультирующийПроцентОПВ				|
// |   Фв		|	ФиксЧастьОПВ							|
// |   %НВ		|	РезультирующийПроцентИПНиОПВ			|
// |   Фн		|	ФиксЧастьИПН							|
// |   Льгот	|	ОстатокЛьготы							| Неиспользованная часть льготы, доступна в текущем месяца
// |   Вычет	|	ОстатокВычета							| Неиспользованный вычет с учетом переносимых с начала года, доступный в текущем месяце
// 
Функция РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2020(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет, СтруктураЦелевыхРазмеров, СтруктураВспомогательныхДанных, Налогоплательщик)
	
	ЭтоРасчетКорректировокДохода = ?(СтруктураВспомогательныхДанных.Свойство("ЭтоРасчетКорректировокДохода"), СтруктураВспомогательныхДанных.ЭтоРасчетКорректировокДохода, Ложь);
	ТаблицаПримененныхВычетов = ?(СтруктураВспомогательныхДанных.Свойство("ТаблицаПримененныхВычетов"), СтруктураВспомогательныхДанных.ТаблицаПримененныхВычетов, Новый ТаблицаЗначений);
	
	СтрокаСуммыВычета = ТаблицаПримененныхВычетов.Найти(ИсходныеДанные.ФизЛицо);
	
	Если НЕ СтрокаСуммыВычета = Неопределено Тогда
		СуммаПримененогоВычетаВТекущемРасчете = СтрокаСуммыВычета.ПрименнныйВычет;
	Иначе
		СуммаПримененогоВычетаВТекущемРасчете = 0;
	КонецЕсли;
	
	Если ЭтоРасчетКорректировокДохода Тогда
		РезультатДоКорректировки = СтрокаДвижений.Результат;
		СтрокаДвижений.Результат = СтрокаДвижений.ДополнительныеДанные;
	КонецЕсли;

	ВидРасчета = СтрокаДвижений.ВидРасчета;
	Результат = 0;
	ЦелевойРазмер = 0;
	
	ДатаПримененияКорректировкиДохода = Дата(2019, 1, 1);
	// МРП получаем на начало финансового года, в соответствии с НК
	ОграничениеКорректировкиДохода25МРП = 25 * МесячныйРасчетныйПоказатель(НачалоГода(ПериодРегистрации));
	ПрименятьКорректировкуПрочихНалоговВзносов = ПроведениеРасчетовПолныеПрава.ПрименятьКорректировкуПрочихНалоговВзносовОтчислений(СтрокаДвижений.Организация, ПериодРегистрации);
	ПрименятьВычетВОСМС = ПроведениеРасчетовПолныеПрава.ПрименятьВычетВОСМСДляФизическихЛицИГПХ(Налогоплательщик, ПериодРегистрации);
	
	// Получем целевые размеры всех расчтов от обратного в сумме 
	// для вычисления коэффициента распределения
	ТаблицаЦелевыхРазмеров = СтруктураЦелевыхРазмеров.ТаблицаЦелевыхРазмеров;
	ТаблицаЦелевыхРазмеровПоВидуРасчета = СтруктураЦелевыхРазмеров.ТаблицаЦелевыхРазмеровПоВидуРасчета;
 	НачисленияСКорректировкой = СтруктураЦелевыхРазмеров.ТаблицаНачисленияСКорректировкойДохода;
	
	ЦелевойРазмерВсего = 0;
	ЦелевойРазмерВсегоПоВидуРасчета = 0;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Регистратор", ИсходныеДанные.Регистратор);
	СтруктураПоиска.Вставить("ФизЛицо", ИсходныеДанные.ФизЛицо);
	
	СтрокаТаблицыЦелевыхРазмеров = ТаблицаЦелевыхРазмеров.НайтиСтроки(СтруктураПоиска)[0];
	
	// Для распределения вычетов и льгот
	ЦелевойРазмерВсего = СтрокаТаблицыЦелевыхРазмеров.ЦелевойРазмер;
	СуммаНалогаВсего   = СтрокаТаблицыЦелевыхРазмеров.СуммаНалога;

	СтруктураПоиска.Вставить("ВидРасчетаНаименование", ИсходныеДанные.ВидРасчетаНаименование);
	
	// Для распределения включаемых начислений
	ЦелевойРазмерВсегоПоВидуРасчета = ТаблицаЦелевыхРазмеровПоВидуРасчета.НайтиСтроки(СтруктураПоиска)[0].ЦелевойРазмер;
	
	РезультатПолучен = Ложь;
	
	// определим целевой размер
	ЦелевойРазмер = СтрокаДвижений.Результат;
	
	
	// КоэффициентРаспределения и КоэффициентРаспределенияВключаемыхНачислений необходимы для паралельного расчета разных начислений с одной категорией начисления,
	// или одного и того же расчета в случае изменения размера в середине расчетного периода
	
	// Для вычетов, льгот и ограничений
	КоэффициентРаспределения = ?(ЦелевойРазмерВсего <= 0, 1, ЦелевойРазмер / ЦелевойРазмерВсего);
	
	// Для включаемых начислений
	КоэффициентРаспределенияВключаемыхНачислений = ?(ЦелевойРазмерВсегоПоВидуРасчета <= 0, 1, ЦелевойРазмер / ЦелевойРазмерВсегоПоВидуРасчета);
		
	ТаблицаСтавокНалогов = Новый ТаблицаЗначений;
	ТаблицаСтавокНалогов.Колонки.Добавить("СуммаДоходаС",  Новый ОписаниеТипов("Число"));
	ТаблицаСтавокНалогов.Колонки.Добавить("СуммаДоходаПо", Новый ОписаниеТипов("Число"));
	ТаблицаСтавокНалогов.Колонки.Добавить("СтавкаИПН",     Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(10, 1));
	УменьшеннаяСтавка = ТаблицаСтавокНалогов.Добавить();
	УменьшеннаяСтавка.СуммаДоходаС = 0;
	УменьшеннаяСтавка.СуммаДоходаПо = ОграничениеКорректировкиДохода25МРП;
	УменьшеннаяСтавка.СтавкаИПН = 1;
	СтандартнаяСтавка = ТаблицаСтавокНалогов.Добавить();
	СтандартнаяСтавка.СуммаДоходаС = ОграничениеКорректировкиДохода25МРП;
	// максимальная величина ресурса СуммаДохода
	СтандартнаяСтавка.СуммаДоходаПо = 999999999999999.99;
	СтандартнаяСтавка.СтавкаИПН = ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, ИсходныеДанные.ПроцентИПН*100, 0); 

	// запомним целевой размер текущей строки расчета
	СтрокаДвижений.ДополнительныеДанные = ЦелевойРазмер;
		
	// Сумма, которую надо начислить, чтобы с учетом включаемых начислений получить нужную сумму на руки
	ИскомаяСуммаНачислений = ЦелевойРазмер - ИсходныеДанные.СуммаВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений;
	
	// округлим искомую сумму
	ИскомаяСуммаНачислений = ОбщегоНазначения.ОкруглитьЧисло(ИскомаяСуммаНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
	
	Если НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьВОСМС
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		 
		// Считать нечего, т.к. либо ничего не компенсируем 
		РаботаССообщениями.ЗаменитьТекстКомментарияРасчета("Результат расчета: <НомерСтроки" + Строка(СтрокаДвижений.НомерСтроки) + ">", "Результат расчета: " + ЦелевойРазмер);										
		РаботаССообщениями.ОшибкаРасчета(ИсходныеДанные.ВидРасчетаНаименование, ": Не определены компенсируемые удержания", ВидРасчета);
		Возврат ИскомаяСуммаНачислений;		
	КонецЕсли;

	// Признаки компенсирования расчетом "от обратного" различных удержаний
	КомпенсироватьИПН 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, 1, 0);
	КомпенсироватьОПВ 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ, 1, 0);
	КомпенсироватьВОСМС			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьВОСМС, 1, 0);
	КомпенсироватьУдержания 	= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания, 1, 0);
	
	Если КомпенсироватьИПН <> 0 Или КомпенсироватьОПВ <> 0 Или КомпенсироватьВОСМС <> 0 Тогда
		Если Не ИсходныеДанные.ОтражениеПоПериодуРегистрации Тогда
			МассивПараметров = Новый Массив;
			Если НЕ ИсходныеДанные.Регистратор.Пустая() Тогда
				МассивПараметров.Добавить(ИсходныеДанные.Регистратор.Организация);
			КонецЕсли;
			РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметров);
			
			РаботаССообщениями.ОшибкаРасчета("", "Для " + ИсходныеДанные.СотрудникНаименование + " расчет """ + ИсходныеДанные.ВидРасчетаНаименование 
													+ """ не возможен, т.к. в учетной политике по налоговому учету не установлен признак отражения 
													|налогов и взносов по периоду регистрации", РасшифровкаУчетнойПолитики);
													
			РаботаССообщениями.ЗаменитьТекстКомментарияРасчета("Результат расчета: <НомерСтроки" + Строка(СтрокаДвижений.НомерСтроки) + ">", "Результат расчета: 0");										
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Данные для расчета ИПН 
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		БазаДляИсчисленияИПН 						= ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений + 
													  ИсходныеДанные.ПрочиеДоходыДляИПН * КоэффициентРаспределения * (1 - ИсходныеДанные.ЕстьОтОбратногоКомпенсирующиеИПН); // Прочие доходы учитываем только 1 раз
		ОстатокВычета								= ?(НЕ ИсходныеДанные.ФизЛицоНерезидент, Макс(ИсходныеДанные.РазрешенныеНалоговыеВычеты, 0), 0);
		ПредоставлятьВычетОПВ						= ?(НЕ ИсходныеДанные.ФизЛицоНерезидент, 1, 0);
		Если ПрименятьВычетВОСМС Тогда 
			ПредоставлятьВычетВОСМС					= ?(НЕ ИсходныеДанные.ФизЛицоНерезидент, 1, 0);
		Иначе			
			ПредоставлятьВычетВОСМС					= 0;
		КонецЕсли;
		
	Иначе
		// Если компенсация ИПН не нужна, то все по нулям
		БазаДляИсчисленияИПН						= 0;
		ОстатокВычета								= 0;
		ПредоставлятьВычетОПВ						= 0;
		ПредоставлятьВычетВОСМС						= 0;
		
	КонецЕсли;
	
	// Данные для расчета ОПВ
	Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
		БазаДляИсчисленияОПВ 				= ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений + 
											  ИсходныеДанные.ПрочиеДоходыДляОПВ * КоэффициентРаспределения * (1 - ИсходныеДанные.ЕстьОтОбратногоКомпенсирующиеОПВ); // Прочие доходы учитываем только 1 раз
		ПризнакИсчисленияОПВ 				= ?(ИсходныеДанные.ПризнакИсчисленияОПВ, 1, 0);
		ПроцентОПВ 							= ИсходныеДанные.ПроцентОПВ; // ставка ОПВ
		//ПрочиеДоходыДляОПВ					= ИсходныеДанные.ПрочиеДоходыДляОПВ;
		
		// Скорректируем размер ограничения на ранее исчисленные доходы
		КорректировкаОграничения 			= ИсходныеДанные.ОблагаемыйОПВДоходНачисленийОтОбратного +  
											  ИсходныеДанные.ОблагаемыйОПВДоходПрочихВключаемыхНачислений + ?(ИсходныеДанные.РасчетОтОбратногоУчитыватьПрямыеНачисления, 
											  ИсходныеДанные.ОблагаемыйОПВДоходПрямыхНачислений, 0);
											  
		РазмерОграниченияПоДоходамОПВ 		= Макс(ИсходныеДанные.РазмерОграниченияПоДоходамОПВ - КорректировкаОграничения, 0) * КоэффициентРаспределения;
		
		МаксСуммаОПВ						= ПроцентОПВ * РазмерОграниченияПоДоходамОПВ;
	Иначе
		// Если учет ОПВ не нужен, то все по нулям
		БазаДляИсчисленияОПВ				= 0;
		ПризнакИсчисленияОПВ 				= 0;
		РазмерОграниченияПоДоходамОПВ 		= 0;
		ПроцентОПВ 							= 0; // ставка ОПВ
		//ПрочиеДоходыДляОПВ					= 0;
		МаксСуммаОПВ						= 0;
	КонецЕсли;
	
	// Данные для расчета ОПВ
	Если ИсходныеДанные.ОтОбратногоУчитыватьВОСМС Тогда
		БазаДляИсчисленияВОСМС 				= ИсходныеДанные.ОблагаемыйВОСМСДоходВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений + 
											  ИсходныеДанные.ПрочиеДоходыДляВОСМС * КоэффициентРаспределения * (1 - ИсходныеДанные.ЕстьОтОбратногоКомпенсирующиеВОСМС); 
		ПризнакИсчисленияВОСМС 				= ?(ИсходныеДанные.ПризнакИсчисленияВОСМС, 1, 0);
		ПроцентВОСМС						= ИсходныеДанные.ПроцентВОСМС; // ставка ВОСМС
		
		// Скорректируем размер ограничения на ранее исчисленные доходы
		КорректировкаОграничения 			= ИсходныеДанные.ОблагаемыйВОСМСДоходНачисленийОтОбратного +  
											  ИсходныеДанные.ОблагаемыйВОСМСДоходПрочихВключаемыхНачислений + ?(ИсходныеДанные.РасчетОтОбратногоУчитыватьПрямыеНачисления, 
											  ИсходныеДанные.ОблагаемыйВОСМСДоходПрямыхНачислений, 0) +
											  ?(ЗначениеЗаполнено(ИсходныеДанные.ПроцентВОСМС), ИсходныеДанные.ВОСМСДругогоРаботодателя / ИсходныеДанные.ПроцентВОСМС, 0);
											  
		РазмерОграниченияПоДоходамВОСМС		= Макс(ИсходныеДанные.РазмерОграниченияПоДоходамВОСМС - КорректировкаОграничения, 0) * КоэффициентРаспределения;
		
		МаксСуммаВОСМС						= ПроцентВОСМС * РазмерОграниченияПоДоходамВОСМС;
		
		// для срабатывания максимального ограничения без тиын, округлим максимальную сумму
		Если (МаксСуммаВОСМС - Цел(МаксСуммаВОСМС)) > 0 Тогда
			
			МаксСуммаВОСМС = Окр(МаксСуммаВОСМС, 0, РежимОкругления.Окр15как20);
			
		КонецЕсли;
		
		ПризнакПрименятьОкруглениеВОСМС	= 0;
		ИсчисленныйВОСМСПослеОкругления = 0;
		
	Иначе
		// Если учет ВОСМС не нужен, то все по нулям
		БазаДляИсчисленияВОСМС				= 0;
		ПризнакИсчисленияВОСМС 				= 0;
		РазмерОграниченияПоДоходамВОСМС 	= 0;
		ПроцентВОСМС 						= 0; // ставка ВОСМС
		МаксСуммаВОСМС						= 0;
		ПризнакПрименятьОкруглениеВОСМС		= 0;
		ИсчисленныйВОСМСПослеОкругления 	= 0;
	КонецЕсли;
	
	// Данные по прочим погашаемым удержаниям
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		СуммаКомпенсируемыхУдержаний			  = ИсходныеДанные.СуммаКомпенсируемыхУдержаний;
		ПроцентКомпенсируемыхУдержанийТолькоИПН	  = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийТолькоИПН / 100;
		ПроцентКомпенсируемыхУдержанийТолькоОПВ	  = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийТолькоОПВ / 100;
		ПроцентКомпенсируемыхУдержанийТолькоВОСМС = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийТолькоВОСМС / 100;
		ПроцентКомпенсируемыхУдержанийБезИПН	  = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПН / 100;
		ПроцентКомпенсируемыхУдержанийБезОПВ	  = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезОПВ / 100;
		ПроцентКомпенсируемыхУдержанийБезВОСМС	  = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезВОСМС / 100;
		ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС / 100;
		ПроцентПрочихКомпенсируемыхУдержаний		= ИсходныеДанные.ПроцентПрочихКомпенсируемыхУдержаний / 100;
	Иначе
		// Если удержания не компенсируются, то все по нулям
		СуммаКомпенсируемыхУдержаний			  = 0;
		ПроцентКомпенсируемыхУдержанийТолькоИПН	  = 0;
		ПроцентКомпенсируемыхУдержанийТолькоОПВ	  = 0;
		ПроцентКомпенсируемыхУдержанийТолькоВОСМС = 0;
		ПроцентКомпенсируемыхУдержанийБезИПН	  = 0;
		ПроцентКомпенсируемыхУдержанийБезОПВ	  = 0;
		ПроцентКомпенсируемыхУдержанийБезВОСМС	  = 0;
		ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС = 0;
		ПроцентПрочихКомпенсируемыхУдержаний	  = 0;
	КонецЕсли;
	
	ПризнакПрименятьОграничениеПоДоходамОПВ = 0; // если 1, то применяется ограничение по доходам, облагаемым ОПВ
	ПризнакПрименятьОграничениеПоДоходамВОСМС = 0; // если 1, то применяется ограничение по доходам, облагаемым ВОСМС
	НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
	ПризнакРасчетаИПН = 1; // если 1, то считаем ИПН, если 0, то налог=0 (нет обл. доходов за месяц)
	
	СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний * КоэффициентРаспределения;
	
	ИсчисленныеОПВВключаемыхНачислений = 0;
	Если ПризнакИсчисленияОПВ = 1 Тогда
		// если данный вид ОПВ не облагается, но база для исчисления с других видов есть
		ПризнакИсчисленияОПВ = ?(ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом, 1, 0);
		ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ);
		Если ПризнакИсчисленияОПВ = 0 И ИсчисленныеОПВ <> 0 Тогда
			// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
			БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ*ПредоставлятьВычетОПВ;
			ИсчисленныеОПВВключаемыхНачислений = ИсчисленныеОПВ * КомпенсироватьОПВ;
		КонецЕсли;			
	КонецЕсли;
	
	ИсчисленныеВОСМСВключаемыхНачислений = 0;
	Если ПризнакИсчисленияВОСМС = 1 Тогда
		// если данный вид ВОСМС не облагается, но база для исчисления с других видов есть
		ПризнакИсчисленияВОСМС = ?(ИсходныеДанные.ОблагаетсяВОСМС <> НеОблагаетсяЦеликом, 1, 0);
		ИсчисленныеВОСМС = Мин(ПроцентВОСМС * БазаДляИсчисленияВОСМС, МаксСуммаВОСМС);
		ИсчисленныеВОСМС = Окр(ИсчисленныеВОСМС, 0, РежимОкругления.Окр15как20);
		Если ПризнакИсчисленияВОСМС = 0 И ИсчисленныеВОСМС <> 0 Тогда
			// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
			БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеВОСМС*ПредоставлятьВычетВОСМС;
			ИсчисленныеВОСМСВключаемыхНачислений = ИсчисленныеВОСМС * КомпенсироватьВОСМС;
		КонецЕсли;			
	КонецЕсли;
	
	// Скорректируем Льготы и Вычеты с учетом ранее исчисленных доходов
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда

		КорректировкаЛьготВычетовОтОбратного = ИсходныеДанные.ОблагаемыйИПНДоходНачисленийОтОбратного - ИсходныеДанные.ОблагаемыйОПВДоходНачисленийОтОбратного * ПроцентОПВ - ИсходныеДанные.ОблагаемыйВОСМСДоходНачисленийОтОбратного * ПроцентВОСМС;
		КорректировкаЛьготВычетовВключаемых  = ИсходныеДанные.ОблагаемыйИПНДоходПрочихВключаемыхНачислений - ИсходныеДанные.ОблагаемыйОПВДоходПрочихВключаемыхНачислений * ПроцентОПВ - ИсходныеДанные.ОблагаемыйВОСМСДоходПрочихВключаемыхНачислений * ПроцентВОСМС;
		КорректировкаЛьготВычетовПрямых  	 = ?(ИсходныеДанные.РасчетОтОбратногоУчитыватьПрямыеНачисления, ИсходныеДанные.ОблагаемыйИПНДоходПрямыхНачислений - ИсходныеДанные.ОблагаемыйОПВДоходПрямыхНачислений * ПроцентОПВ - ?(ПрименятьВычетВОСМС, ИсходныеДанные.ОблагаемыйВОСМСДоходПрямыхНачислений * ПроцентВОСМС, 0), 0);
		
		КорректировкаЛьготВычетов = КорректировкаЛьготВычетовОтОбратного + КорректировкаЛьготВычетовВключаемых + КорректировкаЛьготВычетовПрямых;
									
		// коэффициент распределения не используем, списываем по остаткам
		Если ЭтоРасчетКорректировокДохода Тогда 
			// при перерасчете корректировки используем сумму применного вычета в этом начислении ранее
			ЛьготыВычеты = -СтрокаДвижений.СуммаВычетовДоходовОтОбратного;
		ИначеЕсли КорректировкаЛьготВычетовПрямых > ИсходныеДанные.РазрешенныеНалоговыеВычеты
			// если сумма прямых начислений более суммы разрешенных вычетов, то в расчетах от обратного вычет не применяем
			ИЛИ (КорректировкаЛьготВычетов - КорректировкаЛьготВычетовОтОбратного) > ИсходныеДанные.РазрешенныеНалоговыеВычеты Тогда
			ЛьготыВычеты = 0;
		Иначе
			// Сумма всех возможных налоговых вычетов - Вычета других документов - Вычеты текущего расчета (в документе по сотруднику 2 и более расчтов от обратного) - Суммы вычетов прямых начислений (принимаем как использованная сумма вычета)
			ЛьготыВычеты = БазаДляИсчисленияИПН - (Макс(ИсходныеДанные.РазрешенныеНалоговыеВычеты - ИсходныеДанные.ПримененныеНалоговыеВычетыВТекущемМесяце - СуммаПримененогоВычетаВТекущемРасчете - КорректировкаЛьготВычетовПрямых, 0));
		КонецЕсли;
	Иначе
		ЛьготыВычеты = 0;
	КонецЕсли;
	
	ИсчисленныйИПНВключаемыхНачислений = 0;
	Если ПризнакРасчетаИПН = 1 Тогда
		
		ПроцентИПН = ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, ИсходныеДанные.ПроцентИПН*100, 0);
		
		// определим размер применяемой корректировки дохода (корректировка дохода применяется после вычетов)
		Если ПериодРегистрации >= ДатаПримененияКорректировкиДохода 
			И НЕ ИсходныеДанные.ФизЛицоНерезидент  
			Тогда
			
			// для целей корректировки дохода учтем сумму прямых начислений текущего месяца независимо от настройки РасчетОтОбратногоУчитыватьПрямыеНачисления
			СуммаНачисленийДоРасчета = ИсходныеДанные.СуммаНачисленийОтОбратного + ИсходныеДанные.СуммаПрямыхНачислений;
			
			Для ИндексСтавки = 0 По ТаблицаСтавокНалогов.Количество() - 1 Цикл
				Если СуммаНачисленийДоРасчета >= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаС 
					И СуммаНачисленийДоРасчета <= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаПо Тогда
					
					 	//При введении ставки 0%, если доход меньше 25 МРП всегда ставка у нас будет 0%
						Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
							Если ИсходныеДанные.ПроцентИПН = 0 Тогда
								ПроцентИПН = 0;
							Иначе
								ПроцентИПН = ТаблицаСтавокНалогов[ИндексСтавки].СтавкаИПН / 100;
							КонецЕсли;
						Иначе
							ПроцентИПН = 0;
						КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;		
			
		КонецЕсли;

		// если данный вид ИПН не облагается, но база для исчисления с других видов есть
		ПризнакРасчетаИПН = ?(ИсходныеДанные.ОблагаетсяИПН <> НеОблагаетсяЦеликом, 1, 0);
		ИсчисленныйИПН = Макс(ПроцентИПН * (ЛьготыВычеты - ПризнакИсчисленияОПВ * Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ) - ПризнакИсчисленияВОСМС * Мин(Окр(ПроцентВОСМС * БазаДляИсчисленияВОСМС, 0, РежимОкругления.Окр15как20), МаксСуммаВОСМС)), 0);
		Если ПризнакРасчетаИПН = 0 И ИсчисленныйИПН <> 0 Тогда
			ИсчисленныйИПНВключаемыхНачислений = ИсчисленныйИПН * КомпенсироватьИПН;
		КонецЕсли;			
	КонецЕсли;
		
	ШагИтерации = 0;	
	МаксимальноеЧислоШагов = 100;
	
	// Определим первоначально строку ставок ИПН 
	// сумму прямых начилений в целях применяемой ставки учитываем всегда, независимост от настройки учета прямых начислений - приведено к поведению ЗУП 3.1
	СуммаДоходаСотрудникаДоРасчета = ЦелевойРазмерВсего + СуммаНалогаВсего + ИсходныеДанные.СуммаНачисленийОтОбратного + ИсходныеДанные.СуммаПрямыхНачислений - ИсходныеДанные.СуммаВключаемыхНачислений;
	
	Если НЕ ИсходныеДанные.ФизЛицоНерезидент
		И НЕ СтрокаДвижений.Сторно Тогда
		
		ИндексСтавки = 0;
		Для ИндексСтавки = 0 По ТаблицаСтавокНалогов.Количество() - 1 Цикл
			// если сумма сотрудника до расчета налогов уже выше предела, то для расчета сразу используем ставку 10%
			Если СуммаДоходаСотрудникаДоРасчета >= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаС 
				И СуммаДоходаСотрудникаДоРасчета <= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаПо Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		// для нерезидентов используем обычную ставку налогов
		ИндексСтавки = 1;
		
	КонецЕсли;
	
	Пока Не РезультатПолучен И (ШагИтерации < МаксимальноеЧислоШагов) Цикл
		
		ШагИтерации = ШагИтерации + 1;
		РезультатПолучен = Истина;		
		
		//При введении ставки 0%, если доход меньше 25 МРП всегда ставка у нас будет 0%
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
			Если ИсходныеДанные.ПроцентИПН = 0 Тогда
				ПроцентИПН = 0;
			Иначе
				ПроцентИПН = ТаблицаСтавокНалогов[ИндексСтавки].СтавкаИПН / 100;
			КонецЕсли;		
		Иначе
			ПроцентИПН = 0;
		КонецЕсли;
	
		ПроцентВОСМС = ?(ИсходныеДанные.ОтОбратногоУчитыватьВОСМС, ИсходныеДанные.ПроцентВОСМС, 0);
		
		// Вычисляем вспомогательные переменные
		РезультирующийПроцентОПВ = ПроцентОПВ * ПризнакИсчисленияОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ);
		
		ФиксЧастьОПВ			 = ПризнакИсчисленияОПВ * (БазаДляИсчисленияОПВ * ПроцентОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ) + 
														   ПризнакПрименятьОграничениеПоДоходамОПВ * МаксСуммаОПВ);
		
		// Вычисляем вспомогательные переменные
		РезультирующийПроцентВОСМС = ПроцентВОСМС * ПризнакИсчисленияВОСМС * (1 - ПризнакПрименятьОграничениеПоДоходамВОСМС - ПризнакПрименятьОкруглениеВОСМС);
		
		ФиксЧастьВОСМС			 = ПризнакИсчисленияВОСМС * (БазаДляИсчисленияВОСМС * ПроцентВОСМС * (1 - ПризнакПрименятьОграничениеПоДоходамВОСМС - ПризнакПрименятьОкруглениеВОСМС) + 
														   ПризнакПрименятьОграничениеПоДоходамВОСМС * МаксСуммаВОСМС) + ПризнакПрименятьОкруглениеВОСМС * ИсчисленныйВОСМСПослеОкругления;
		
		РезультирующийПроцентИПНиОПВиВОСМС = ПроцентИПН * ПризнакРасчетаИПН * (1 - ПредоставлятьВычетОПВ * РезультирующийПроцентОПВ - ПредоставлятьВычетВОСМС * РезультирующийПроцентВОСМС);
											
		ФиксЧастьИПН			= ПризнакРасчетаИПН * ПроцентИПН * (ЛьготыВычеты - ПредоставлятьВычетОПВ * ФиксЧастьОПВ - ПредоставлятьВычетВОСМС * ФиксЧастьВОСМС);
		
		КоэффициентИПН = КомпенсироватьИПН - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийТолькоИПН + ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС + ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезВОСМС);
		КоэффициентОПВ = КомпенсироватьОПВ - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийТолькоОПВ + ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС + ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезВОСМС);
		КоэффициентВОСМС = КомпенсироватьВОСМС - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийТолькоВОСМС + ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС + ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ);

		ПроцентКомпенсируемыхУдержаний = ПроцентКомпенсируемыхУдержанийТолькоИПН + ПроцентКомпенсируемыхУдержанийТолькоОПВ + ПроцентКомпенсируемыхУдержанийТолькоВОСМС +
									 	 ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезВОСМС +
											ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС + ПроцентПрочихКомпенсируемыхУдержаний;
		
		Числитель = (ИскомаяСуммаНачислений + 
					КоэффициентИПН * ФиксЧастьИПН +
					КоэффициентОПВ * ФиксЧастьОПВ + 
					КоэффициентВОСМС * ФиксЧастьВОСМС + 
					КомпенсироватьУдержания * СуммаКомпенсируемыхУдержаний +
					ИсчисленныеОПВВключаемыхНачислений +
					ИсчисленныеВОСМСВключаемыхНачислений +
					ИсчисленныйИПНВключаемыхНачислений);
					
		Знаменатель = (1 - 
		 				КоэффициентИПН * РезультирующийПроцентИПНиОПВиВОСМС -
					   	КоэффициентОПВ * РезультирующийПроцентОПВ - 
					   	КоэффициентВОСМС * РезультирующийПроцентВОСМС - 
						КомпенсироватьУдержания * ПроцентКомпенсируемыхУдержаний);
								  		
		Результат = ?(Знаменатель <> 0, Числитель / Знаменатель, 0);
		Результат = ОбщегоНазначения.ОкруглитьЧисло(Результат, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Проверим граничные условия, при которых делали расчет
		РезультатОПВ = ПризнакИсчисленияОПВ * ПроцентОПВ * (БазаДляИсчисленияОПВ + Результат);

		// Проверим граничные условия, при которых делали расчет
		КомпенсированоВОСМС = ПризнакИсчисленияВОСМС * ПроцентВОСМС * (БазаДляИсчисленияВОСМС + Результат) * (1 - ПризнакПрименятьОграничениеПоДоходамВОСМС - ПризнакПрименятьОкруглениеВОСМС) + ПризнакПрименятьОграничениеПоДоходамВОСМС * МаксСуммаВОСМС + ПризнакПрименятьОкруглениеВОСМС * ИсчисленныйВОСМСПослеОкругления;

		Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
			// Наличие облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияОПВ И ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ОПВ исчисляются
					
					Если БазаДляИсчисленияОПВ + Результат > 0 Тогда
						Если ПризнакИсчисленияОПВ <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 1;
					Иначе
						Если ПризнакИсчисленияОПВ <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если РезультатОПВ > МаксСуммаОПВ Тогда
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 1;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;

		Если ИсходныеДанные.ОтОбратногоУчитыватьВОСМС Тогда
			// Наличие облагаемых ВОСМС доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияВОСМС И ИсходныеДанные.ОблагаетсяВОСМС <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ВОСМС исчисляются
					
					Если БазаДляИсчисленияВОСМС + Результат > 0 Тогда
						Если ПризнакИсчисленияВОСМС <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияВОСМС = 1;
					Иначе
						Если ПризнакИсчисленияВОСМС <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияВОСМС = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ВОСМС доходов
			Если РезультатПолучен Тогда
					Если КомпенсированоВОСМС >= МаксСуммаВОСМС
						ИЛИ (КомпенсированоВОСМС = МаксСуммаВОСМС
							И ПризнакПрименятьОграничениеПоДоходамВОСМС = 1) Тогда
					Если ПризнакПрименятьОграничениеПоДоходамВОСМС <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамВОСМС = 1;
					ИсчисленныйВОСМСПослеОкругления = 0;
					ПризнакПрименятьОкруглениеВОСМС = 0;	
				// проверим наличие сотой части в исчисленном ВОСМС	
				ИначеЕсли (КомпенсированоВОСМС - Цел(КомпенсированоВОСМС)) > 0 Тогда
					ПризнакПрименятьОграничениеПоДоходамВОСМС = 0;
					ПризнакПрименятьОкруглениеВОСМС = 1;
					ИсчисленныйВОСМСПослеОкругления = Окр(КомпенсированоВОСМС, 0, РежимОкругления.Окр15как20);
					РезультатПолучен = Ложь;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамВОСМС <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамВОСМС = 0;
					ИсчисленныйВОСМСПослеОкругления = 0;
					ПризнакПрименятьОкруглениеВОСМС = 0;	
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда 
			// Учтем граничные условия, возникающие при расчете ИПН
			
			// проверка на то, чтобы ИПН не был отрицательным, если обл. доходы за месяц < 0
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ОблагаетсяИПН <> НеОблагаетсяЦеликом Тогда
					
					ОблагаемаяИПНСумма = ЛьготыВычеты + Результат - РезультатОПВ * ПредоставлятьВычетОПВ - КомпенсированоВОСМС * ПредоставлятьВычетВОСМС;

					Если ОблагаемаяИПНСумма < 0 Тогда
						// ранее налог считался, но облагаемая сумма за месяц < 0 - на следующем шаге не считаем
						Если ПризнакРасчетаИПН <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакРасчетаИПН = 0;
					Иначе
						// ранее налог не считался, но теперь облагаемая сумма > 0 и налог есть с чего считать
						Если ПризнакРасчетаИПН <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакРасчетаИПН = 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Соответствие общего дохода сотрудника применямой ставке 
		Если РезультатПолучен И (ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			ИЛИ ПрименятьКорректировкуПрочихНалоговВзносов И ИсходныеДанные.ОтОбратногоУчитыватьОПВ 
			ИЛИ ПрименятьКорректировкуПрочихНалоговВзносов И ИсходныеДанные.ОтОбратногоУчитыватьВОСМС)
			И НЕ ИсходныеДанные.ФизЛицоНерезидент
			И НЕ СтрокаДвижений.Сторно Тогда
				
			ВремИндекс = 0;
			
			Для ВремИндекс = 0 По ТаблицаСтавокНалогов.Количество() - 1 Цикл
				
				// СуммаДоходаСотрудникаДоРасчета + сумма "сверху" текущего начисления
				// уменьшим сумму целевого размера на сумму включаемых начислений ЦелевойРазмер - СуммаВключаемыхНачислений
				СуммаДоходаСотрудникаПослеРасчета = СуммаДоходаСотрудникаДоРасчета + (Результат - (ЦелевойРазмер - ИсходныеДанные.СуммаВключаемыхНачислений));
				
				Если СуммаДоходаСотрудникаПослеРасчета >= ТаблицаСтавокНалогов[ВремИндекс].СуммаДоходаС
					 И СуммаДоходаСотрудникаПослеРасчета <= ТаблицаСтавокНалогов[ВремИндекс].СуммаДоходаПо Тогда
					
					Если ВремИндекс <> ИндексСтавки Тогда
						
						РезультатПолучен = Ложь;
						
						СтрокиКорректировок = НачисленияСКорректировкой.НайтиСтроки(Новый Структура("Сотрудник", ИсходныеДанные.Сотрудник));
						
						Если НЕ СтрокиКорректировок.Количество() = 0 Тогда
							
							Для Каждого СтрокаКорректировки Из СтрокиКорректировок Цикл
								СтрокаКорректировки.ПересчитатьНачисление = Истина;	
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
					
					ИндексСтавки = ВремИндекс;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// зафиксируем начисления, в которых была применена корректировка дохода; 
			// список таких начислений будет перерасчитан, в случае превышения 
			// в очередном виде расчета "от обратного" суммы предела корректировки
			Если СуммаДоходаСотрудникаПослеРасчета <= ОграничениеКорректировкиДохода25МРП
				И НЕ ЭтоРасчетКорректировокДохода Тогда
					
				СтрокаСКорректировкойДохода = НачисленияСКорректировкой.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСКорректировкойДохода, СтрокаДвижений);
				СтрокаСКорректировкойДохода.СтрокаДвижений = СтрокаДвижений;
					
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
	ИсчисленныйИПН = 0;
	ИсчисленныеОПВ = 0;
	ИсчисленныеВОСМС = 0;
	ИсчисленныеУдержания = 0;
	
	Если Не РезультатПолучен Тогда
		// вышли из цикла по превышению макс допустимого числа шагов
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Превышено допустимое число шагов итерации ", СтатусСообщения.Важное);
	Иначе
		// Из-за округления могут получиться лишние тиынки
		ИсчисленныеОПВ = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентОПВ + ФиксЧастьОПВ + ИсчисленныеОПВВключаемыхНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Из-за округления могут получиться лишние тиынки
		ИсчисленныеВОСМС = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентВОСМС + ФиксЧастьВОСМС + ИсчисленныеВОСМСВключаемыхНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);

		// Скорректируем исчисленный ИПН включаемых начислений на размер ОПВ текущего расчета
		ИсчисленныйИПН = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентИПНиОПВиВОСМС + ФиксЧастьИПН + ИсчисленныйИПНВключаемыхНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		ИсчисленныеУдержания = ОбщегоНазначения.ОкруглитьЧисло(КомпенсироватьУдержания * (Результат * ПроцентПрочихКомпенсируемыхУдержаний + 
												(Результат - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийТолькоОПВ +
												(Результат - ИсчисленныйИПН) * ПроцентКомпенсируемыхУдержанийТолькоИПН +
												(Результат - ИсчисленныеВОСМС) * ПроцентКомпенсируемыхУдержанийТолькоВОСМС +
												(Результат - ИсчисленныеОПВ - ИсчисленныеВОСМС) * ПроцентКомпенсируемыхУдержанийБезИПН +
												(Результат - ИсчисленныйИПН - ИсчисленныеВОСМС) * ПроцентКомпенсируемыхУдержанийБезОПВ +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезВОСМС +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ - ИсчисленныеВОСМС) * ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС + 
												СуммаКомпенсируемыхУдержаний), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		ОбщаяСуммаКомпенсируемыхУдержаний = ИсчисленныйИПН + ИсчисленныеОПВ + ИсчисленныеВОСМС + ИсчисленныеУдержания;
		Разность = ИскомаяСуммаНачислений - (Результат - ОбщаяСуммаКомпенсируемыхУдержаний);
		
		Если Разность > -1 И Разность < 1 Тогда
			Результат = Результат + Разность;
		КонецЕсли;
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			// при перерасчете корректировок используем ранне рассчитанную сумму вычета
			И НЕ ЭтоРасчетКорректировокДохода Тогда
			
			СуммаПрименногоВычетаИПН = Окр(?(ЛьготыВычеты < 0, Мин(-ЛьготыВычеты, Результат - ИсчисленныеОПВ*ПредоставлятьВычетОПВ - ИсчисленныеВОСМС*ПредоставлятьВычетВОСМС - ИсчисленныеУдержания), 0), 2);
		
			СтрокаДвижений.СуммаВычетовДоходовОтОбратного = СуммаПрименногоВычетаИПН;
			
			Если НЕ СтрокаСуммыВычета = Неопределено Тогда
				СтрокаСуммыВычета.ПрименнныйВычет = СтрокаСуммыВычета.ПрименнныйВычет + СуммаПрименногоВычетаИПН; 
			Иначе
				СтрокаПрименнногоВычета = ТаблицаПримененныхВычетов.Добавить();
				СтрокаПрименнногоВычета.ФизЛицо = ИсходныеДанные.Физлицо;
				СтрокаПрименнногоВычета.ПрименнныйВычет = СуммаПрименногоВычетаИПН;
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
	Результат = ОбщегоНазначения.ОкруглитьЧисло(?(РезультатПолучен, Результат, 0), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);

	СтрокаДвижений.Результат = Результат;

	СтрокаТаблицыЦелевыхРазмеров.СуммаНалога = СуммаНалогаВсего + (Результат - ЦелевойРазмер);
	
	Если КомментироватьРасчет Тогда
		
		СтрокаДополнения = "";
		Если ОбщаяСуммаКомпенсируемыхУдержаний <> 0 ИЛИ ИсходныеДанные.СуммаВключаемыхНачислений <> 0 Тогда
			СтрокаДополнения = ", в том числе:";
		КонецЕсли;
		
		Если ЭтоРасчетКорректировокДохода Тогда
			СтрокаКомментарияОтОбратного = РаботаССообщениями.ЗаменитьТекстКомментарияРасчета("Результат расчета: " + РезультатДоКорректировки + СтрокаДополнения, 
														   "Результат расчета: " + Результат + СтрокаДополнения);
														   
		   	Если НЕ СтрокаКомментарияОтОбратного = Неопределено Тогда
				СтрокаКомментарияОтОбратного.Строки.Очистить();	   
			КонецЕсли;
															   
		Иначе
			СтрокаКомментарияОтОбратного = РаботаССообщениями.ЗаменитьТекстКомментарияРасчета("Результат расчета: <НомерСтроки" + Строка(СтрокаДвижений.НомерСтроки) + ">", 
														   "Результат расчета: " + Результат + СтрокаДополнения);
		КонецЕсли;
		
													   
		// Покажем суммы компенсируемых удержаний
		Если ОбщаяСуммаКомпенсируемыхУдержаний <> 0 И СтрокаКомментарияОтОбратного <> Неопределено Тогда
			Удержания = РаботаССообщениями.КомментарийРасчета("Компенсировано удержаний:", СтрокаКомментарияОтОбратного);
			Если ИсчисленныеОПВ <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("ОПВ: " + ИсчисленныеОПВ, Удержания);
			КонецЕсли;
			Если ИсчисленныйИПН <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("ИПН: " + ИсчисленныйИПН, Удержания);
			КонецЕсли;
			Если ИсчисленныеВОСМС <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("ВОСМС: " + ИсчисленныеВОСМС, Удержания);
			КонецЕсли;
			Если ИсчисленныеУдержания <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("Прочие удержания: " + ИсчисленныеУдержания, Удержания);
			КонецЕсли;
		КонецЕсли;
		
		
		// Покажем корректировки на включаемые начисления
		Если ИсходныеДанные.СуммаВключаемыхНачислений <> 0 И СтрокаКомментарияОтОбратного <> Неопределено Тогда
			РаботаССообщениями.КомментарийРасчета("Вычтено включаемых начислений: " + ИсходныеДанные.СуммаВключаемыхНачислений, СтрокаКомментарияОтОбратного);
		КонецЕсли;
				
	КонецЕсли;
												   
	Возврат Результат;
	
КонецФункции  // РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2014()

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным для способа расчета "от обратного"
// по правилам, действующим с 2009 года (фикс. ставка ИПН)
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  ТаблицаСтавокИПН - таблица значений со ставками ИПН за текущий рассчитываемый период регистрации для расчета "от обратного"
//
// Возвращаемое значение:
//  Число - результат расчета.
//
// Расчет "от обратного" производится на основе решения уравнения:
// 
// 		Х - Кн * ИПН - Кв * ОПВ - Ку * Уд = Р,
// где
//                    
//		ИПН = К0н * (Х + Бн - Льгот - ОПВ - Вычет) * %Н
//
//      ОПВ = ((1- К1в)*(Х + Бв) * %В + К1в * МаксОПВ) * К2в
//      
//      Уд  = Х * %Упр + Фу + (Х - ОПВ) * %Ув + (Х - ИПН) * %Ун + (Х - ОПВ - ИПН) * %Унв
//
// Относительно Х:
//
//      ОПВ(Х) = Х * %ПФ + Фв
//
//				%ПФ = %В * К2в * (1 - К1в)
//           
//				Фв  = Бв * %В * (1 - К1в) * К2в + К1в * МаксОПВ * К2в
//
//		ИПН(Х) = Х * %НВ + Фн
//
//				%НВ = К0н * %Н * (1 - %ПФ)
//
//				Фн  = К0н * %Н * (Бн - Льгот - Фв - Вычет)
//
// Решение уравнения:
//               Р + К'н * Фн + К'в * Фв + Ку * Фу
//		Х	  = -----------------------------------
//               1 - К'н * %НВ - К'в * %ПФ - Ку * %У'
//
// где
//		К'н   = Кн - Ку * %Ун - Ку * %Унв
//		К'в   = Кв - Ку * %Ув - Ку * %Унв
//		%У'   = %Упр + %Ув + %Ун + %Унв
//
//
// Обозначения:
// |В формуле	|	Переменная в программе					| Комментарий
// ---------------------------------------------------------------------------------------------------------------
// |   Х		|	ИскомаяСуммаНачислений					| Сумма, которую хотят получить на руки (за минусом включаемых начислений)
// |   Кн		|	КомпенсироватьИПН						| 1, если компенсируется ИПН, 0 иначе
// |   Кв		|	КомпенсироватьОПВ						| 1, если компенсируются ОПВ, 0 иначе
// |   Ку		|	КомпенсироватьУдержания					| 1, если компенсируются удержания, 0 иначе
// |   К0н		|	ПризнакРасчетаИПН			 			| 1, если ИПН рассчитывается, иначе 0 - налог = 0 (обл база за месяц < 0)
// |   Бн		|   БазаДляИсчисленияИПН					| Сумма облагаемого ИПН дохода за месяц (уже отняты вычеты и ОПВ)
// |   %Н		|	ПроцентИПН								| Процент ИПН
// |   К1в		| ПризнакПрименятьОграничениеПоДоходамОПВ 	| 0, если расчет ОПВ от базы (когда база < 75 МЗП), 1 если ОПВ с 75 МЗП
// |   Бв		|	БазаДляИсчисленияОПВ					| Сумма облагаемого ОПВ дохода за месяц (за счет прочих начислений, не относящихся в Х)
// |   %В		|	ПроцентОПВ								| Процент обязательных пенсионных взносов
// |   МаксОПВ	| 	МаксСуммаОПВ 							| Сумма ОПВ с 75 МЗП
// |   К2в		|	ПризнакИсчисленияОПВ					| 1, если по работнику исчисляются ОПВ, иначе 0 (пенсионер, инвалид 1, 2 гр. и т.д.)
// |   %Упр		|	ПроцентПрочихКомпенсируемыхУдержаний	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых не вычитается ОПВ и ИПН)
// |   %Ун		|	ПроцентКомпенсируемыхУдержанийБезИПН	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН)
// |   %Ув		|	ПроцентКомпенсируемыхУдержанийБезОПВ	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ОПВ)
// |   %Унв		|	ПроцентКомпенсируемыхУдержанийБезИПНиОПВ| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН и ОПВ)
// |   Фу		|	СуммаКомпенсируемыхУдержаний			| Компенсируемые удержания фиксированной суммой
// |   %ПФ		|	РезультирующийПроцентОПВ				|
// |   Фв		|	ФиксЧастьОПВ							|
// |   %НВ		|	РезультирующийПроцентИПНиОПВ			|
// |   Фн		|	ФиксЧастьИПН							|
// |   Льгот	|	ОстатокЛьготы							| Неиспользованная часть льготы, доступна в текущем месяца
// |   Вычет	|	ОстатокВычета							| Неиспользованный вычет с учетом переносимых с начала года, доступный в текущем месяце
// 
Функция РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2021(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет, СтруктураЦелевыхРазмеров, СтруктураВспомогательныхДанных, Налогоплательщик)
	
	ЭтоРасчетКорректировокДохода = ?(СтруктураВспомогательныхДанных.Свойство("ЭтоРасчетКорректировокДохода"), СтруктураВспомогательныхДанных.ЭтоРасчетКорректировокДохода, Ложь);
	ТаблицаПримененныхВычетов = ?(СтруктураВспомогательныхДанных.Свойство("ТаблицаПримененныхВычетов"), СтруктураВспомогательныхДанных.ТаблицаПримененныхВычетов, Новый ТаблицаЗначений);
	
	СтрокаСуммыВычета = ТаблицаПримененныхВычетов.Найти(ИсходныеДанные.ФизЛицо);
	
	Если НЕ СтрокаСуммыВычета = Неопределено Тогда
		СуммаПримененогоВычетаВТекущемРасчете = СтрокаСуммыВычета.ПрименнныйВычет;
	Иначе
		СуммаПримененогоВычетаВТекущемРасчете = 0;
	КонецЕсли;
	
	Если ЭтоРасчетКорректировокДохода Тогда
		РезультатДоКорректировки = СтрокаДвижений.Результат;
		СтрокаДвижений.Результат = СтрокаДвижений.ДополнительныеДанные;
	КонецЕсли;

	ВидРасчета = СтрокаДвижений.ВидРасчета;
	Результат = 0;
	ЦелевойРазмер = 0;
	
	ДатаПримененияКорректировкиДохода = Дата(2019, 1, 1);
	// МРП получаем на начало финансового года, в соответствии с НК
	ОграничениеКорректировкиДохода25МРП = 25 * МесячныйРасчетныйПоказатель(НачалоГода(ПериодРегистрации));
	
	// Получем целевые размеры всех расчтов от обратного в сумме 
	// для вычисления коэффициента распределения
	ТаблицаЦелевыхРазмеров = СтруктураЦелевыхРазмеров.ТаблицаЦелевыхРазмеров;
	ТаблицаЦелевыхРазмеровПоВидуРасчета = СтруктураЦелевыхРазмеров.ТаблицаЦелевыхРазмеровПоВидуРасчета;
 	НачисленияСКорректировкой = СтруктураЦелевыхРазмеров.ТаблицаНачисленияСКорректировкойДохода;
	
	ЦелевойРазмерВсего = 0;
	ЦелевойРазмерВсегоПоВидуРасчета = 0;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Регистратор", ИсходныеДанные.Регистратор);
	СтруктураПоиска.Вставить("ФизЛицо", ИсходныеДанные.ФизЛицо);
	
	СтрокаТаблицыЦелевыхРазмеров = ТаблицаЦелевыхРазмеров.НайтиСтроки(СтруктураПоиска)[0];
	
	// Для распределения вычетов и льгот
	ЦелевойРазмерВсего = СтрокаТаблицыЦелевыхРазмеров.ЦелевойРазмер;
	СуммаНалогаВсего   = СтрокаТаблицыЦелевыхРазмеров.СуммаНалога;

	СтруктураПоиска.Вставить("ВидРасчетаНаименование", ИсходныеДанные.ВидРасчетаНаименование);
	
	// Для распределения включаемых начислений
	ЦелевойРазмерВсегоПоВидуРасчета = ТаблицаЦелевыхРазмеровПоВидуРасчета.НайтиСтроки(СтруктураПоиска)[0].ЦелевойРазмер;
	
	РезультатПолучен = Ложь;
	
	// определим целевой размер
	ЦелевойРазмер = СтрокаДвижений.Результат;
	
	
	// КоэффициентРаспределения и КоэффициентРаспределенияВключаемыхНачислений необходимы для паралельного расчета разных начислений с одной категорией начисления,
	// или одного и того же расчета в случае изменения размера в середине расчетного периода
	
	// Для вычетов, льгот и ограничений
	КоэффициентРаспределения = ?(ЦелевойРазмерВсего <= 0, 1, ЦелевойРазмер / ЦелевойРазмерВсего);
	
	// Для включаемых начислений
	КоэффициентРаспределенияВключаемыхНачислений = ?(ЦелевойРазмерВсегоПоВидуРасчета <= 0, 1, ЦелевойРазмер / ЦелевойРазмерВсегоПоВидуРасчета);
		
	ТаблицаСтавокНалогов = Новый ТаблицаЗначений;
	ТаблицаСтавокНалогов.Колонки.Добавить("СуммаДоходаС",  Новый ОписаниеТипов("Число"));
	ТаблицаСтавокНалогов.Колонки.Добавить("СуммаДоходаПо", Новый ОписаниеТипов("Число"));
	ТаблицаСтавокНалогов.Колонки.Добавить("СтавкаИПН",     Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(10, 1));
	УменьшеннаяСтавка = ТаблицаСтавокНалогов.Добавить();
	УменьшеннаяСтавка.СуммаДоходаС = 0;
	УменьшеннаяСтавка.СуммаДоходаПо = ОграничениеКорректировкиДохода25МРП;
	УменьшеннаяСтавка.СтавкаИПН = 1;
	СтандартнаяСтавка = ТаблицаСтавокНалогов.Добавить();
	СтандартнаяСтавка.СуммаДоходаС = ОграничениеКорректировкиДохода25МРП;
	// максимальная величина ресурса СуммаДохода
	СтандартнаяСтавка.СуммаДоходаПо = 999999999999999.99;
	СтандартнаяСтавка.СтавкаИПН = ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, ИсходныеДанные.ПроцентИПН*100, 0); 

	// запомним целевой размер текущей строки расчета
	СтрокаДвижений.ДополнительныеДанные = ЦелевойРазмер;
		
	// Сумма, которую надо начислить, чтобы с учетом включаемых начислений получить нужную сумму на руки
	ИскомаяСуммаНачислений = ЦелевойРазмер - ИсходныеДанные.СуммаВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений;
	
	// округлим искомую сумму
	ИскомаяСуммаНачислений = ОбщегоНазначения.ОкруглитьЧисло(ИскомаяСуммаНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
	
	Если НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьВОСМС
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		 
		// Считать нечего, т.к. либо ничего не компенсируем 
		РаботаССообщениями.ЗаменитьТекстКомментарияРасчета("Результат расчета: <НомерСтроки" + Строка(СтрокаДвижений.НомерСтроки) + ">", "Результат расчета: " + ЦелевойРазмер);										
		РаботаССообщениями.ОшибкаРасчета(ИсходныеДанные.ВидРасчетаНаименование, ": Не определены компенсируемые удержания", ВидРасчета);
		Возврат ИскомаяСуммаНачислений;		
	КонецЕсли;

	// Признаки компенсирования расчетом "от обратного" различных удержаний
	КомпенсироватьИПН 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, 1, 0);
	КомпенсироватьОПВ 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ, 1, 0);
	КомпенсироватьВОСМС			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьВОСМС, 1, 0);
	КомпенсироватьУдержания 	= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания, 1, 0);
	
	Если КомпенсироватьИПН <> 0 Или КомпенсироватьОПВ <> 0 Или КомпенсироватьВОСМС <> 0 Тогда
		Если Не ИсходныеДанные.ОтражениеПоПериодуРегистрации Тогда
			МассивПараметров = Новый Массив;
			Если НЕ ИсходныеДанные.Регистратор.Пустая() Тогда
				МассивПараметров.Добавить(ИсходныеДанные.Регистратор.Организация);
			КонецЕсли;
			РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметров);
			
			РаботаССообщениями.ОшибкаРасчета("", "Для " + ИсходныеДанные.СотрудникНаименование + " расчет """ + ИсходныеДанные.ВидРасчетаНаименование 
													+ """ не возможен, т.к. в учетной политике по налоговому учету не установлен признак отражения 
													|налогов и взносов по периоду регистрации", РасшифровкаУчетнойПолитики);
													
			РаботаССообщениями.ЗаменитьТекстКомментарияРасчета("Результат расчета: <НомерСтроки" + Строка(СтрокаДвижений.НомерСтроки) + ">", "Результат расчета: 0");										
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Данные для расчета ИПН 
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		БазаДляИсчисленияИПН 						= ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений + 
													  ИсходныеДанные.ПрочиеДоходыДляИПН * КоэффициентРаспределения * (1 - ИсходныеДанные.ЕстьОтОбратногоКомпенсирующиеИПН); // Прочие доходы учитываем только 1 раз
		ОстатокВычета								= ?(НЕ ИсходныеДанные.ФизЛицоНерезидент, Макс(ИсходныеДанные.РазрешенныеНалоговыеВычеты, 0), 0);
		ПредоставлятьВычетОПВ						= ?(НЕ ИсходныеДанные.ФизЛицоНерезидент, 1, 0);
		ПредоставлятьВычетВОСМС					    = ?(НЕ ИсходныеДанные.ФизЛицоНерезидент, 1, 0);
			
	Иначе
		// Если компенсация ИПН не нужна, то все по нулям
		БазаДляИсчисленияИПН						= 0;
		ОстатокВычета								= 0;
		ПредоставлятьВычетОПВ						= 0;
		ПредоставлятьВычетВОСМС						= 0;
		
	КонецЕсли;
	
	// Данные для расчета ОПВ
	Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
		БазаДляИсчисленияОПВ 				= ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений + 
											  ИсходныеДанные.ПрочиеДоходыДляОПВ * КоэффициентРаспределения * (1 - ИсходныеДанные.ЕстьОтОбратногоКомпенсирующиеОПВ); // Прочие доходы учитываем только 1 раз
		ПризнакИсчисленияОПВ 				= ?(ИсходныеДанные.ПризнакИсчисленияОПВ, 1, 0);
		ПроцентОПВ 							= ИсходныеДанные.ПроцентОПВ; // ставка ОПВ
		//ПрочиеДоходыДляОПВ					= ИсходныеДанные.ПрочиеДоходыДляОПВ;
		
		// Скорректируем размер ограничения на ранее исчисленные доходы
		КорректировкаОграничения 			= ИсходныеДанные.ОблагаемыйОПВДоходНачисленийОтОбратного +  
											  ИсходныеДанные.ОблагаемыйОПВДоходПрочихВключаемыхНачислений + ?(ИсходныеДанные.РасчетОтОбратногоУчитыватьПрямыеНачисления, 
											  ИсходныеДанные.ОблагаемыйОПВДоходПрямыхНачислений, 0);
											  
		РазмерОграниченияПоДоходамОПВ 		= Макс(ИсходныеДанные.РазмерОграниченияПоДоходамОПВ - КорректировкаОграничения, 0) * КоэффициентРаспределения;
		
		МаксСуммаОПВ						= ПроцентОПВ * РазмерОграниченияПоДоходамОПВ;
	Иначе
		// Если учет ОПВ не нужен, то все по нулям
		БазаДляИсчисленияОПВ				= 0;
		ПризнакИсчисленияОПВ 				= 0;
		РазмерОграниченияПоДоходамОПВ 		= 0;
		ПроцентОПВ 							= 0; // ставка ОПВ
		//ПрочиеДоходыДляОПВ					= 0;
		МаксСуммаОПВ						= 0;
	КонецЕсли;
	
	// Данные для расчета ОПВ
	Если ИсходныеДанные.ОтОбратногоУчитыватьВОСМС Тогда
		БазаДляИсчисленияВОСМС 				= ИсходныеДанные.ОблагаемыйВОСМСДоходВключаемыхНачислений * КоэффициентРаспределенияВключаемыхНачислений + 
											  ИсходныеДанные.ПрочиеДоходыДляВОСМС * КоэффициентРаспределения * (1 - ИсходныеДанные.ЕстьОтОбратногоКомпенсирующиеВОСМС); 
		ПризнакИсчисленияВОСМС 				= ?(ИсходныеДанные.ПризнакИсчисленияВОСМС, 1, 0);
		ПроцентВОСМС						= ИсходныеДанные.ПроцентВОСМС; // ставка ВОСМС
		
		// Скорректируем размер ограничения на ранее исчисленные доходы
		КорректировкаОграничения 			= ИсходныеДанные.ОблагаемыйВОСМСДоходНачисленийОтОбратного +  
											  ИсходныеДанные.ОблагаемыйВОСМСДоходПрочихВключаемыхНачислений + ?(ИсходныеДанные.РасчетОтОбратногоУчитыватьПрямыеНачисления, 
											  ИсходныеДанные.ОблагаемыйВОСМСДоходПрямыхНачислений, 0) +
											  ?(ЗначениеЗаполнено(ИсходныеДанные.ПроцентВОСМС), ИсходныеДанные.ВОСМСДругогоРаботодателя / ИсходныеДанные.ПроцентВОСМС, 0);
											  
		РазмерОграниченияПоДоходамВОСМС		= Макс(ИсходныеДанные.РазмерОграниченияПоДоходамВОСМС - КорректировкаОграничения, 0) * КоэффициентРаспределения;
		
		МаксСуммаВОСМС						= ПроцентВОСМС * РазмерОграниченияПоДоходамВОСМС;
		
		// для срабатывания максимального ограничения без тиын, округлим максимальную сумму
		Если (МаксСуммаВОСМС - Цел(МаксСуммаВОСМС)) > 0 Тогда
			
			МаксСуммаВОСМС = Окр(МаксСуммаВОСМС, 0, РежимОкругления.Окр15как20);
			
		КонецЕсли;
		
		ПризнакПрименятьОкруглениеВОСМС	= 0;
		ИсчисленныйВОСМСПослеОкругления = 0;
		
	Иначе
		// Если учет ВОСМС не нужен, то все по нулям
		БазаДляИсчисленияВОСМС				= 0;
		ПризнакИсчисленияВОСМС 				= 0;
		РазмерОграниченияПоДоходамВОСМС 	= 0;
		ПроцентВОСМС 						= 0; // ставка ВОСМС
		МаксСуммаВОСМС						= 0;
		ПризнакПрименятьОкруглениеВОСМС		= 0;
		ИсчисленныйВОСМСПослеОкругления 	= 0;
	КонецЕсли;
	
	// Данные по прочим погашаемым удержаниям
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		СуммаКомпенсируемыхУдержаний			  = ИсходныеДанные.СуммаКомпенсируемыхУдержаний;
		ПроцентКомпенсируемыхУдержанийТолькоИПН	  = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийТолькоИПН / 100;
		ПроцентКомпенсируемыхУдержанийТолькоОПВ	  = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийТолькоОПВ / 100;
		ПроцентКомпенсируемыхУдержанийТолькоВОСМС = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийТолькоВОСМС / 100;
		ПроцентКомпенсируемыхУдержанийБезИПН	  = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПН / 100;
		ПроцентКомпенсируемыхУдержанийБезОПВ	  = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезОПВ / 100;
		ПроцентКомпенсируемыхУдержанийБезВОСМС	  = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезВОСМС / 100;
		ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС / 100;
		ПроцентПрочихКомпенсируемыхУдержаний		= ИсходныеДанные.ПроцентПрочихКомпенсируемыхУдержаний / 100;
	Иначе
		// Если удержания не компенсируются, то все по нулям
		СуммаКомпенсируемыхУдержаний			  = 0;
		ПроцентКомпенсируемыхУдержанийТолькоИПН	  = 0;
		ПроцентКомпенсируемыхУдержанийТолькоОПВ	  = 0;
		ПроцентКомпенсируемыхУдержанийТолькоВОСМС = 0;
		ПроцентКомпенсируемыхУдержанийБезИПН	  = 0;
		ПроцентКомпенсируемыхУдержанийБезОПВ	  = 0;
		ПроцентКомпенсируемыхУдержанийБезВОСМС	  = 0;
		ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС = 0;
		ПроцентПрочихКомпенсируемыхУдержаний	  = 0;
	КонецЕсли;
	
	ПризнакПрименятьОграничениеПоДоходамОПВ = 0; // если 1, то применяется ограничение по доходам, облагаемым ОПВ
	ПризнакПрименятьОграничениеПоДоходамВОСМС = 0; // если 1, то применяется ограничение по доходам, облагаемым ВОСМС
	НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
	ПризнакРасчетаИПН = 1; // если 1, то считаем ИПН, если 0, то налог=0 (нет обл. доходов за месяц)
	
	СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний * КоэффициентРаспределения;
	
	ИсчисленныеОПВВключаемыхНачислений = 0;
	Если ПризнакИсчисленияОПВ = 1 Тогда
		// если данный вид ОПВ не облагается, но база для исчисления с других видов есть
		ПризнакИсчисленияОПВ = ?(ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом, 1, 0);
		ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ);
		Если ПризнакИсчисленияОПВ = 0 И ИсчисленныеОПВ <> 0 Тогда
			// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
			БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ*ПредоставлятьВычетОПВ;
			ИсчисленныеОПВВключаемыхНачислений = ИсчисленныеОПВ * КомпенсироватьОПВ;
		КонецЕсли;			
	КонецЕсли;
	
	ИсчисленныеВОСМСВключаемыхНачислений = 0;
	Если ПризнакИсчисленияВОСМС = 1 Тогда
		// если данный вид ВОСМС не облагается, но база для исчисления с других видов есть
		ПризнакИсчисленияВОСМС = ?(ИсходныеДанные.ОблагаетсяВОСМС <> НеОблагаетсяЦеликом, 1, 0);
		ИсчисленныеВОСМС = Мин(ПроцентВОСМС * БазаДляИсчисленияВОСМС, МаксСуммаВОСМС);
		ИсчисленныеВОСМС = Окр(ИсчисленныеВОСМС, 0, РежимОкругления.Окр15как20);
		Если ПризнакИсчисленияВОСМС = 0 И ИсчисленныеВОСМС <> 0 Тогда
			// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
			БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеВОСМС*ПредоставлятьВычетВОСМС;
			ИсчисленныеВОСМСВключаемыхНачислений = ИсчисленныеВОСМС * КомпенсироватьВОСМС;
		КонецЕсли;			
	КонецЕсли;
	
	// Скорректируем Льготы и Вычеты с учетом ранее исчисленных доходов
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда

		КорректировкаЛьготВычетовОтОбратного = ИсходныеДанные.ОблагаемыйИПНДоходНачисленийОтОбратного - ИсходныеДанные.ОблагаемыйОПВДоходНачисленийОтОбратного * ПроцентОПВ - ИсходныеДанные.ОблагаемыйВОСМСДоходНачисленийОтОбратного * ПроцентВОСМС;
		КорректировкаЛьготВычетовВключаемых  = ИсходныеДанные.ОблагаемыйИПНДоходПрочихВключаемыхНачислений - ИсходныеДанные.ОблагаемыйОПВДоходПрочихВключаемыхНачислений * ПроцентОПВ - ИсходныеДанные.ОблагаемыйВОСМСДоходПрочихВключаемыхНачислений * ПроцентВОСМС;
		КорректировкаЛьготВычетовПрямых  	 = ?(ИсходныеДанные.РасчетОтОбратногоУчитыватьПрямыеНачисления, ИсходныеДанные.ОблагаемыйИПНДоходПрямыхНачислений - ИсходныеДанные.ОблагаемыйОПВДоходПрямыхНачислений * ПроцентОПВ - ИсходныеДанные.ОблагаемыйВОСМСДоходПрямыхНачислений * ПроцентВОСМС, 0);
		
		КорректировкаЛьготВычетов = КорректировкаЛьготВычетовОтОбратного + КорректировкаЛьготВычетовВключаемых + КорректировкаЛьготВычетовПрямых;
									
		// коэффициент распределения не используем, списываем по остаткам
		Если ЭтоРасчетКорректировокДохода Тогда 
			// при перерасчете корректировки используем сумму применного вычета в этом начислении ранее
			ЛьготыВычеты = -СтрокаДвижений.СуммаВычетовДоходовОтОбратного;
		ИначеЕсли КорректировкаЛьготВычетовПрямых > ИсходныеДанные.РазрешенныеНалоговыеВычеты
			// если сумма прямых начислений более суммы разрешенных вычетов, то в расчетах от обратного вычет не применяем
			ИЛИ (КорректировкаЛьготВычетов - КорректировкаЛьготВычетовОтОбратного) > ИсходныеДанные.РазрешенныеНалоговыеВычеты Тогда
			ЛьготыВычеты = 0;
		Иначе
			// Сумма всех возможных налоговых вычетов - Вычета других документов - Вычеты текущего расчета (в документе по сотруднику 2 и более расчтов от обратного) - Суммы вычетов прямых начислений (принимаем как использованная сумма вычета)
			ЛьготыВычеты = БазаДляИсчисленияИПН - (Макс(ИсходныеДанные.РазрешенныеНалоговыеВычеты - ИсходныеДанные.ПримененныеНалоговыеВычетыВТекущемМесяце - СуммаПримененогоВычетаВТекущемРасчете - КорректировкаЛьготВычетовПрямых, 0));
		КонецЕсли;
	Иначе
		ЛьготыВычеты = 0;
	КонецЕсли;
	
	ИсчисленныйИПНВключаемыхНачислений = 0;
	Если ПризнакРасчетаИПН = 1 Тогда
		
		ПроцентИПН = ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, ИсходныеДанные.ПроцентИПН*100, 0);
		
		// определим размер применяемой корректировки дохода (корректировка дохода применяется после вычетов)
		Если ПериодРегистрации >= ДатаПримененияКорректировкиДохода 
			И НЕ ИсходныеДанные.ФизЛицоНерезидент  
			Тогда
			
			// для целей корректировки дохода учтем сумму прямых начислений текущего месяца независимо от настройки РасчетОтОбратногоУчитыватьПрямыеНачисления
			СуммаНачисленийДоРасчета = ИсходныеДанные.СуммаНачисленийОтОбратного + ИсходныеДанные.СуммаПрямыхНачислений;
			
			Для ИндексСтавки = 0 По ТаблицаСтавокНалогов.Количество() - 1 Цикл
				Если СуммаНачисленийДоРасчета >= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаС 
					И СуммаНачисленийДоРасчета <= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаПо Тогда
					
					 	//При введении ставки 0%, если доход меньше 25 МРП всегда ставка у нас будет 0%
						Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
							Если ИсходныеДанные.ПроцентИПН = 0 Тогда
								ПроцентИПН = 0;
							Иначе
								ПроцентИПН = ТаблицаСтавокНалогов[ИндексСтавки].СтавкаИПН / 100;
							КонецЕсли;
						Иначе
							ПроцентИПН = 0;
						КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;		
			
		КонецЕсли;

		// если данный вид ИПН не облагается, но база для исчисления с других видов есть
		ПризнакРасчетаИПН = ?(ИсходныеДанные.ОблагаетсяИПН <> НеОблагаетсяЦеликом, 1, 0);
		ИсчисленныйИПН = Макс(ПроцентИПН * (ЛьготыВычеты - ПризнакИсчисленияОПВ * Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ) - ПризнакИсчисленияВОСМС * Мин(Окр(ПроцентВОСМС * БазаДляИсчисленияВОСМС, 0, РежимОкругления.Окр15как20), МаксСуммаВОСМС)), 0);
		Если ПризнакРасчетаИПН = 0 И ИсчисленныйИПН <> 0 Тогда
			ИсчисленныйИПНВключаемыхНачислений = ИсчисленныйИПН * КомпенсироватьИПН;
		КонецЕсли;			
	КонецЕсли;
		
	ШагИтерации = 0;	
	МаксимальноеЧислоШагов = 100;
	
	// Определим первоначально строку ставок ИПН 
	// сумму прямых начилений в целях применяемой ставки учитываем всегда, независимост от настройки учета прямых начислений - приведено к поведению ЗУП 3.1
	СуммаДоходаСотрудникаДоРасчета = ЦелевойРазмерВсего + СуммаНалогаВсего + ИсходныеДанные.СуммаНачисленийОтОбратного + ИсходныеДанные.СуммаПрямыхНачислений - ИсходныеДанные.СуммаВключаемыхНачислений;
	
	Если НЕ ИсходныеДанные.ФизЛицоНерезидент
		И НЕ СтрокаДвижений.Сторно Тогда
		
		ИндексСтавки = 0;
		Для ИндексСтавки = 0 По ТаблицаСтавокНалогов.Количество() - 1 Цикл
			// если сумма сотрудника до расчета налогов уже выше предела, то для расчета сразу используем ставку 10%
			Если СуммаДоходаСотрудникаДоРасчета >= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаС 
				И СуммаДоходаСотрудникаДоРасчета <= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаПо Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		// для нерезидентов используем обычную ставку налогов
		ИндексСтавки = 1;
		
	КонецЕсли;
	
	Пока Не РезультатПолучен И (ШагИтерации < МаксимальноеЧислоШагов) Цикл
		
		ШагИтерации = ШагИтерации + 1;
		РезультатПолучен = Истина;		
		
		//При введении ставки 0%, если доход меньше 25 МРП всегда ставка у нас будет 0%
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
			Если ИсходныеДанные.ПроцентИПН = 0 Тогда
				ПроцентИПН = 0;
			Иначе
				ПроцентИПН = ТаблицаСтавокНалогов[ИндексСтавки].СтавкаИПН / 100;
			КонецЕсли;		
		Иначе
			ПроцентИПН = 0;
		КонецЕсли;
	
		ПроцентВОСМС = ?(ИсходныеДанные.ОтОбратногоУчитыватьВОСМС, ИсходныеДанные.ПроцентВОСМС, 0);
		
		// Вычисляем вспомогательные переменные
		РезультирующийПроцентОПВ = ПроцентОПВ * ПризнакИсчисленияОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ);
		
		ФиксЧастьОПВ			 = ПризнакИсчисленияОПВ * (БазаДляИсчисленияОПВ * ПроцентОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ) + 
														   ПризнакПрименятьОграничениеПоДоходамОПВ * МаксСуммаОПВ);
		
		// Вычисляем вспомогательные переменные
		РезультирующийПроцентВОСМС = ПроцентВОСМС * ПризнакИсчисленияВОСМС * (1 - ПризнакПрименятьОграничениеПоДоходамВОСМС - ПризнакПрименятьОкруглениеВОСМС);
		
		ФиксЧастьВОСМС			 = ПризнакИсчисленияВОСМС * (БазаДляИсчисленияВОСМС * ПроцентВОСМС * (1 - ПризнакПрименятьОграничениеПоДоходамВОСМС - ПризнакПрименятьОкруглениеВОСМС) + 
														   ПризнакПрименятьОграничениеПоДоходамВОСМС * МаксСуммаВОСМС) + ПризнакПрименятьОкруглениеВОСМС * ИсчисленныйВОСМСПослеОкругления;
		
		РезультирующийПроцентИПНиОПВиВОСМС = ПроцентИПН * ПризнакРасчетаИПН * (1 - ПредоставлятьВычетОПВ * РезультирующийПроцентОПВ - ПредоставлятьВычетВОСМС * РезультирующийПроцентВОСМС);
											
		ФиксЧастьИПН			= ПризнакРасчетаИПН * ПроцентИПН * (ЛьготыВычеты - ПредоставлятьВычетОПВ * ФиксЧастьОПВ - ПредоставлятьВычетВОСМС * ФиксЧастьВОСМС);
		
		КоэффициентИПН = КомпенсироватьИПН - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийТолькоИПН + ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС + ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезВОСМС);
		КоэффициентОПВ = КомпенсироватьОПВ - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийТолькоОПВ + ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС + ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезВОСМС);
		КоэффициентВОСМС = КомпенсироватьВОСМС - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийТолькоВОСМС + ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС + ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ);

		ПроцентКомпенсируемыхУдержаний = ПроцентКомпенсируемыхУдержанийТолькоИПН + ПроцентКомпенсируемыхУдержанийТолькоОПВ + ПроцентКомпенсируемыхУдержанийТолькоВОСМС +
									 	 ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезВОСМС +
											ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС + ПроцентПрочихКомпенсируемыхУдержаний;
		
		Числитель = (ИскомаяСуммаНачислений + 
					КоэффициентИПН * ФиксЧастьИПН +
					КоэффициентОПВ * ФиксЧастьОПВ + 
					КоэффициентВОСМС * ФиксЧастьВОСМС + 
					КомпенсироватьУдержания * СуммаКомпенсируемыхУдержаний +
					ИсчисленныеОПВВключаемыхНачислений +
					ИсчисленныеВОСМСВключаемыхНачислений +
					ИсчисленныйИПНВключаемыхНачислений);
					
		Знаменатель = (1 - 
		 				КоэффициентИПН * РезультирующийПроцентИПНиОПВиВОСМС -
					   	КоэффициентОПВ * РезультирующийПроцентОПВ - 
					   	КоэффициентВОСМС * РезультирующийПроцентВОСМС - 
						КомпенсироватьУдержания * ПроцентКомпенсируемыхУдержаний);
								  		
		Результат = ?(Знаменатель <> 0, Числитель / Знаменатель, 0);
		Результат = ОбщегоНазначения.ОкруглитьЧисло(Результат, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Проверим граничные условия, при которых делали расчет
		РезультатОПВ = ПризнакИсчисленияОПВ * ПроцентОПВ * (БазаДляИсчисленияОПВ + Результат);

		// Проверим граничные условия, при которых делали расчет
		КомпенсированоВОСМС = ПризнакИсчисленияВОСМС * ПроцентВОСМС * (БазаДляИсчисленияВОСМС + Результат) * (1 - ПризнакПрименятьОграничениеПоДоходамВОСМС - ПризнакПрименятьОкруглениеВОСМС) + ПризнакПрименятьОграничениеПоДоходамВОСМС * МаксСуммаВОСМС + ПризнакПрименятьОкруглениеВОСМС * ИсчисленныйВОСМСПослеОкругления;

		Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
			// Наличие облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияОПВ И ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ОПВ исчисляются
					
					Если БазаДляИсчисленияОПВ + Результат > 0 Тогда
						Если ПризнакИсчисленияОПВ <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 1;
					Иначе
						Если ПризнакИсчисленияОПВ <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если РезультатОПВ > МаксСуммаОПВ Тогда
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 1;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;

		Если ИсходныеДанные.ОтОбратногоУчитыватьВОСМС Тогда
			// Наличие облагаемых ВОСМС доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияВОСМС И ИсходныеДанные.ОблагаетсяВОСМС <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ВОСМС исчисляются
					
					Если БазаДляИсчисленияВОСМС + Результат > 0 Тогда
						Если ПризнакИсчисленияВОСМС <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияВОСМС = 1;
					Иначе
						Если ПризнакИсчисленияВОСМС <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияВОСМС = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ВОСМС доходов
			Если РезультатПолучен Тогда
					Если КомпенсированоВОСМС >= МаксСуммаВОСМС
						ИЛИ (КомпенсированоВОСМС = МаксСуммаВОСМС
							И ПризнакПрименятьОграничениеПоДоходамВОСМС = 1) Тогда
					Если ПризнакПрименятьОграничениеПоДоходамВОСМС <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамВОСМС = 1;
					ИсчисленныйВОСМСПослеОкругления = 0;
					ПризнакПрименятьОкруглениеВОСМС = 0;	
				// проверим наличие сотой части в исчисленном ВОСМС	
				ИначеЕсли (КомпенсированоВОСМС - Цел(КомпенсированоВОСМС)) > 0 Тогда
					ПризнакПрименятьОграничениеПоДоходамВОСМС = 0;
					ПризнакПрименятьОкруглениеВОСМС = 1;
					ИсчисленныйВОСМСПослеОкругления = Окр(КомпенсированоВОСМС, 0, РежимОкругления.Окр15как20);
					РезультатПолучен = Ложь;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамВОСМС <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамВОСМС = 0;
					ИсчисленныйВОСМСПослеОкругления = 0;
					ПризнакПрименятьОкруглениеВОСМС = 0;	
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда 
			// Учтем граничные условия, возникающие при расчете ИПН
			
			// проверка на то, чтобы ИПН не был отрицательным, если обл. доходы за месяц < 0
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ОблагаетсяИПН <> НеОблагаетсяЦеликом Тогда
					
					ОблагаемаяИПНСумма = ЛьготыВычеты + Результат - РезультатОПВ * ПредоставлятьВычетОПВ - КомпенсированоВОСМС * ПредоставлятьВычетВОСМС;

					Если ОблагаемаяИПНСумма < 0 Тогда
						// ранее налог считался, но облагаемая сумма за месяц < 0 - на следующем шаге не считаем
						Если ПризнакРасчетаИПН <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакРасчетаИПН = 0;
					Иначе
						// ранее налог не считался, но теперь облагаемая сумма > 0 и налог есть с чего считать
						Если ПризнакРасчетаИПН <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакРасчетаИПН = 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Соответствие общего дохода сотрудника применямой ставке 
		Если РезультатПолучен И (ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			ИЛИ ИсходныеДанные.ОтОбратногоУчитыватьОПВ 
			ИЛИ ИсходныеДанные.ОтОбратногоУчитыватьВОСМС)
			И НЕ ИсходныеДанные.ФизЛицоНерезидент
			И НЕ СтрокаДвижений.Сторно Тогда
				
			ВремИндекс = 0;
			
			Для ВремИндекс = 0 По ТаблицаСтавокНалогов.Количество() - 1 Цикл
				
				// СуммаДоходаСотрудникаДоРасчета + сумма "сверху" текущего начисления
				// уменьшим сумму целевого размера на сумму включаемых начислений ЦелевойРазмер - СуммаВключаемыхНачислений
				СуммаДоходаСотрудникаПослеРасчета = СуммаДоходаСотрудникаДоРасчета + (Результат - (ЦелевойРазмер - ИсходныеДанные.СуммаВключаемыхНачислений));
				
				Если СуммаДоходаСотрудникаПослеРасчета >= ТаблицаСтавокНалогов[ВремИндекс].СуммаДоходаС
					 И СуммаДоходаСотрудникаПослеРасчета <= ТаблицаСтавокНалогов[ВремИндекс].СуммаДоходаПо Тогда
					
					Если ВремИндекс <> ИндексСтавки Тогда
						
						РезультатПолучен = Ложь;
						
						СтрокиКорректировок = НачисленияСКорректировкой.НайтиСтроки(Новый Структура("Сотрудник", ИсходныеДанные.Сотрудник));
						
						Если НЕ СтрокиКорректировок.Количество() = 0 Тогда
							
							Для Каждого СтрокаКорректировки Из СтрокиКорректировок Цикл
								СтрокаКорректировки.ПересчитатьНачисление = Истина;	
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
					
					ИндексСтавки = ВремИндекс;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// зафиксируем начисления, в которых была применена корректировка дохода; 
			// список таких начислений будет перерасчитан, в случае превышения 
			// в очередном виде расчета "от обратного" суммы предела корректировки
			Если СуммаДоходаСотрудникаПослеРасчета <= ОграничениеКорректировкиДохода25МРП
				И НЕ ЭтоРасчетКорректировокДохода Тогда
					
				СтрокаСКорректировкойДохода = НачисленияСКорректировкой.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСКорректировкойДохода, СтрокаДвижений);
				СтрокаСКорректировкойДохода.СтрокаДвижений = СтрокаДвижений;
					
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
	ИсчисленныйИПН = 0;
	ИсчисленныеОПВ = 0;
	ИсчисленныеВОСМС = 0;
	ИсчисленныеУдержания = 0;
	
	Если Не РезультатПолучен Тогда
		// вышли из цикла по превышению макс допустимого числа шагов
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Превышено допустимое число шагов итерации ", СтатусСообщения.Важное);
	Иначе
		// Из-за округления могут получиться лишние тиынки
		ИсчисленныеОПВ = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентОПВ + ФиксЧастьОПВ + ИсчисленныеОПВВключаемыхНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Из-за округления могут получиться лишние тиынки
		ИсчисленныеВОСМС = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентВОСМС + ФиксЧастьВОСМС + ИсчисленныеВОСМСВключаемыхНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);

		// Скорректируем исчисленный ИПН включаемых начислений на размер ОПВ текущего расчета
		ИсчисленныйИПН = ОбщегоНазначения.ОкруглитьЧисло(Результат * РезультирующийПроцентИПНиОПВиВОСМС + ФиксЧастьИПН + ИсчисленныйИПНВключаемыхНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		ИсчисленныеУдержания = ОбщегоНазначения.ОкруглитьЧисло(КомпенсироватьУдержания * (Результат * ПроцентПрочихКомпенсируемыхУдержаний + 
												(Результат - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийТолькоОПВ +
												(Результат - ИсчисленныйИПН) * ПроцентКомпенсируемыхУдержанийТолькоИПН +
												(Результат - ИсчисленныеВОСМС) * ПроцентКомпенсируемыхУдержанийТолькоВОСМС +
												(Результат - ИсчисленныеОПВ - ИсчисленныеВОСМС) * ПроцентКомпенсируемыхУдержанийБезИПН +
												(Результат - ИсчисленныйИПН - ИсчисленныеВОСМС) * ПроцентКомпенсируемыхУдержанийБезОПВ +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезВОСМС +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ - ИсчисленныеВОСМС) * ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС + 
												СуммаКомпенсируемыхУдержаний), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		ОбщаяСуммаКомпенсируемыхУдержаний = ИсчисленныйИПН + ИсчисленныеОПВ + ИсчисленныеВОСМС + ИсчисленныеУдержания;
		Разность = ИскомаяСуммаНачислений - (Результат - ОбщаяСуммаКомпенсируемыхУдержаний);
		
		Если Разность > -1 И Разность < 1 Тогда
			Результат = Результат + Разность;
		КонецЕсли;
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			// при перерасчете корректировок используем ранне рассчитанную сумму вычета
			И НЕ ЭтоРасчетКорректировокДохода Тогда
			
			СуммаПрименногоВычетаИПН = Окр(?(ЛьготыВычеты < 0, Мин(-ЛьготыВычеты, Результат - ИсчисленныеОПВ*ПредоставлятьВычетОПВ - ИсчисленныеВОСМС*ПредоставлятьВычетВОСМС - ИсчисленныеУдержания), 0), 2);
		
			СтрокаДвижений.СуммаВычетовДоходовОтОбратного = СуммаПрименногоВычетаИПН;
			
			Если НЕ СтрокаСуммыВычета = Неопределено Тогда
				СтрокаСуммыВычета.ПрименнныйВычет = СтрокаСуммыВычета.ПрименнныйВычет + СуммаПрименногоВычетаИПН; 
			Иначе
				СтрокаПрименнногоВычета = ТаблицаПримененныхВычетов.Добавить();
				СтрокаПрименнногоВычета.ФизЛицо = ИсходныеДанные.Физлицо;
				СтрокаПрименнногоВычета.ПрименнныйВычет = СуммаПрименногоВычетаИПН;
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
	Результат = ОбщегоНазначения.ОкруглитьЧисло(?(РезультатПолучен, Результат, 0), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);

	СтрокаДвижений.Результат = Результат;

	СтрокаТаблицыЦелевыхРазмеров.СуммаНалога = СуммаНалогаВсего + (Результат - ЦелевойРазмер);
	
	Если КомментироватьРасчет Тогда
		
		СтрокаДополнения = "";
		Если ОбщаяСуммаКомпенсируемыхУдержаний <> 0 ИЛИ ИсходныеДанные.СуммаВключаемыхНачислений <> 0 Тогда
			СтрокаДополнения = ", в том числе:";
		КонецЕсли;
		
		Если ЭтоРасчетКорректировокДохода Тогда
			СтрокаКомментарияОтОбратного = РаботаССообщениями.ЗаменитьТекстКомментарияРасчета("Результат расчета: " + РезультатДоКорректировки + СтрокаДополнения, 
														   "Результат расчета: " + Результат + СтрокаДополнения);
														   
		   	Если НЕ СтрокаКомментарияОтОбратного = Неопределено Тогда
				СтрокаКомментарияОтОбратного.Строки.Очистить();	   
			КонецЕсли;
															   
		Иначе
			СтрокаКомментарияОтОбратного = РаботаССообщениями.ЗаменитьТекстКомментарияРасчета("Результат расчета: <НомерСтроки" + Строка(СтрокаДвижений.НомерСтроки) + ">", 
														   "Результат расчета: " + Результат + СтрокаДополнения);
		КонецЕсли;
		
													   
		// Покажем суммы компенсируемых удержаний
		Если ОбщаяСуммаКомпенсируемыхУдержаний <> 0 И СтрокаКомментарияОтОбратного <> Неопределено Тогда
			Удержания = РаботаССообщениями.КомментарийРасчета("Компенсировано удержаний:", СтрокаКомментарияОтОбратного);
			Если ИсчисленныеОПВ <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("ОПВ: " + ИсчисленныеОПВ, Удержания);
			КонецЕсли;
			Если ИсчисленныйИПН <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("ИПН: " + ИсчисленныйИПН, Удержания);
			КонецЕсли;
			Если ИсчисленныеВОСМС <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("ВОСМС: " + ИсчисленныеВОСМС, Удержания);
			КонецЕсли;
			Если ИсчисленныеУдержания <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("Прочие удержания: " + ИсчисленныеУдержания, Удержания);
			КонецЕсли;
		КонецЕсли;
		
		
		// Покажем корректировки на включаемые начисления
		Если ИсходныеДанные.СуммаВключаемыхНачислений <> 0 И СтрокаКомментарияОтОбратного <> Неопределено Тогда
			РаботаССообщениями.КомментарийРасчета("Вычтено включаемых начислений: " + ИсходныеДанные.СуммаВключаемыхНачислений, СтрокаКомментарияОтОбратного);
		КонецЕсли;
				
	КонецЕсли;
												   
	Возврат Результат;
	
КонецФункции  // РассчитатьЗаписьРегистраРасчетаОтОбратногоПосле2014()

//Возвращает таблицу целевых размеров с общей суммой "на руки"
//
Функция ПолучитьСтруктуруТаблицЦелевыхРазмеровРасчетовОтОбратного(ИсходныеДанные, ТаблицаЗаписейРегистра)
	
	ТаблицаЦелевыхРазмеров = Новый ТаблицаЗначений;
	ТаблицаЦелевыхРазмеров.Колонки.Добавить("Регистратор");
	ТаблицаЦелевыхРазмеров.Колонки.Добавить("ФизЛицо");
	ТаблицаЦелевыхРазмеров.Колонки.Добавить("ЦелевойРазмер");
	ТаблицаЦелевыхРазмеров.Колонки.Добавить("СуммаНалога");
	
	ТаблицаЦелевыхРазмеровПоВидуРасчета = Новый ТаблицаЗначений;
	ТаблицаЦелевыхРазмеровПоВидуРасчета.Колонки.Добавить("Регистратор");
	ТаблицаЦелевыхРазмеровПоВидуРасчета.Колонки.Добавить("ФизЛицо");
	ТаблицаЦелевыхРазмеровПоВидуРасчета.Колонки.Добавить("ВидРасчетаНаименование");
	ТаблицаЦелевыхРазмеровПоВидуРасчета.Колонки.Добавить("ЦелевойРазмер");
	
	ТаблицаНачисленияСКорректировкойДохода = Новый ТаблицаЗначений;
	ТаблицаНачисленияСКорректировкойДохода.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
	ТаблицаНачисленияСКорректировкойДохода.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));	
	ТаблицаНачисленияСКорректировкойДохода.Колонки.Добавить("СтрокаДвижений");	
	ТаблицаНачисленияСКорректировкойДохода.Колонки.Добавить("ПересчитатьНачисление", Новый ОписаниеТипов("Булево"));
	ТаблицаНачисленияСКорректировкойДохода.Индексы.Добавить("Сотрудник");	
	
	СтрокаИсходныхДанных = ИсходныеДанные;
	Пока СтрокаИсходныхДанных.Следующий() Цикл
		
		СтрокаНабораЗаписей = ТаблицаЗаписейРегистра.Найти(СтрокаИсходныхДанных.НомерСтроки, "НомерСтроки");

		Если НЕ СтрокаНабораЗаписей.ВидРасчета.ОтОбратного Тогда
			Продолжить;
		КонецЕсли;
		
		ЦелевойРазмер = СтрокаНабораЗаписей.Результат;
		
		НоваяСтрока 				= ТаблицаЦелевыхРазмеров.Добавить();
		НоваяСтрока.Регистратор 	= СтрокаИсходныхДанных.Регистратор;
		НоваяСтрока.ФизЛицо			= СтрокаИсходныхДанных.ФизЛицо;
		НоваяСтрока.ЦелевойРазмер	= ЦелевойРазмер;
		НоваяСтрока.СуммаНалога		= 0;
		
		НоваяСтрока 						= ТаблицаЦелевыхРазмеровПоВидуРасчета.Добавить();
		НоваяСтрока.Регистратор 			= СтрокаИсходныхДанных.Регистратор;
		НоваяСтрока.ФизЛицо					= СтрокаИсходныхДанных.ФизЛицо;
		НоваяСтрока.ВидРасчетаНаименование 	= СтрокаИсходныхДанных.ВидРасчетаНаименование;
		НоваяСтрока.ЦелевойРазмер			= ЦелевойРазмер;		
		
	КонецЦикла;
	
	ТаблицаЦелевыхРазмеров.Свернуть("Регистратор, ФизЛицо", "ЦелевойРазмер, СуммаНалога");
	ТаблицаЦелевыхРазмеровПоВидуРасчета.Свернуть("Регистратор, ФизЛицо, ВидРасчетаНаименование", "ЦелевойРазмер");

	СтруктураЦелевыхРазмеров = Новый Структура;
	СтруктураЦелевыхРазмеров.Вставить("ТаблицаЦелевыхРазмеров", 			 	ТаблицаЦелевыхРазмеров);
	СтруктураЦелевыхРазмеров.Вставить("ТаблицаЦелевыхРазмеровПоВидуРасчета", 	ТаблицаЦелевыхРазмеровПоВидуРасчета);
	СтруктураЦелевыхРазмеров.Вставить("ТаблицаНачисленияСКорректировкойДохода", ТаблицаНачисленияСКорректировкойДохода);
	
	Возврат СтруктураЦелевыхРазмеров;
	
КонецФункции

Функция ПолучитьСтруктуруДополнительныхДанныхРасчетовОтОбратного(ПериодРегистрации)
	
	СтруктураВспомогательныхДанных = Новый Структура;
	
	Если ПериодРегистрации >= '20190101' Тогда
		
		// таблица хранит суммы примененных вычетов в рамках процедуры расчета
		ТаблицаПримененныхВычетов = Новый ТаблицаЗначений;
		ТаблицаПримененныхВычетов.Колонки.Добавить("ФизЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ТаблицаПримененныхВычетов.Колонки.Добавить("ПрименнныйВычет", Новый ОписаниеТипов("Число",,,));
		
		ТаблицаПримененныхВычетов.Индексы.Добавить("ФизЛицо");
		
		СтруктураВспомогательныхДанных.Вставить("ЭтоРасчетКорректировокДохода", Ложь);
		СтруктураВспомогательныхДанных.Вставить("ТаблицаПримененныхВычетов", ТаблицаПримененныхВычетов);
		
	КонецЕсли;
	
	Возврат СтруктураВспомогательныхДанных;

КонецФункции

// Проверяет необходимость выполнения перерасчета документа
// если в таблицах перерасчета по документу ссылка на который передана 
// есть хоть одна запись - возращает Истина
// Параметры:
//  Регистратор - ссылка на документ
// Возвращаемое значение:
//  булево
//
Функция НеобходимостьПерерасчета(Регистратор) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Перерасчет.Сотрудник
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		Перерасчет.Сотрудник КАК Сотрудник
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
	|	
	|	ГДЕ
	|		Перерасчет.ОбъектПерерасчета = &парамРегистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		Перерасчет.Сотрудник
	|	ИЗ
	|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
	|	
	|	ГДЕ
	|		Перерасчет.ОбъектПерерасчета = &парамРегистратор) КАК Перерасчет");
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
	Если Запрос.Выполнить().Пустой() Тогда 
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции  // НеобходимостьПерерасчета

Процедура ПроверитьНаличиеЗапрашиваемыхПоказателейТипаТарифныйРазряд(ВидРасчета, ОбработкаКомментариев, Отказ)
	
	МассивПоказателей = Новый Массив;
	Для Каждого СтрокаТабличнойЧасти Из ВидРасчета.Показатели Цикл
		Если СтрокаТабличнойЧасти.ЗапрашиватьПриКадровыхПеремещениях Тогда
			МассивПоказателей.Добавить(СтрокаТабличнойЧасти.Показатель);
		КонецЕсли;
	КонецЦикла;
	Если МассивПоказателей.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					Справочник.ПоказателиСхемМотивации КАК ПоказателиСхемМотивации
		|				ГДЕ
		|					ПоказателиСхемМотивации.Ссылка В (&МассивПоказателей)
		|					И ПоказателиСхемМотивации.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибка,
		|	""Показатели типа """"Тарифный разряд"""" не могут запрашиваться в удержаниях"" КАК ТекстОшибки";
		Запрос.УстановитьПараметр("МассивПоказателей", МассивПоказателей);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Если Выборка.ЕстьОшибка Тогда
			ОбработкаКомментариев.ДобавитьСообщение(Выборка.ТекстОшибки, Перечисления.ВидыСообщений.Ошибка);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаличиеЗапрашиваемыхПоказателейТипаТарифныйРазряд

// Проверяет правильность заполнения реквизитов вида расчета 
// для некуоторых случаев выдает сообщение об ошибке
// для некоторых - возвращает текст сообщения
// 	Параметры:
//		ВидРасчета - объект Вид расчета
//		Отказ - признак отказа (проверка не прошла)
//	Возвращаемое значение:
//		ТекстСообщения - текст сообщения о результате проверки
Функция ПроверитьНастройкуВидаРасчета(ВидРасчета, Отказ, ОбработкаКомментариев, ПроверятьСоответствиеБазовыхИВедущихРасчетов = Истина) Экспорт

    МетаданныеВидаРасчета = ВидРасчета.Метаданные();
	
	ВидРасчетаЯвляетсяНачислением = МетаданныеВидаРасчета <> Метаданные.ПланыВидовРасчета.УдержанияОрганизаций
			  						И МетаданныеВидаРасчета <> Метаданные.ПланыВидовРасчета.УправленческиеУдержания;

	Если НЕ ЗначениеЗаполнено(ВидРасчета.Наименование) Тогда
		ОбработкаКомментариев.ДобавитьСообщение("Не задано наименование " + ?(ВидРасчетаЯвляетсяНачислением, "начисления", "удержания") + "!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина;
	КонецЕсли; 
    
	ЕстьРеквизитСпособРасчета = МетаданныеВидаРасчета.Реквизиты.Найти("СпособРасчета") <> НеОпределено;
	Если ЕстьРеквизитСпособРасчета И НЕ ЗначениеЗаполнено(ВидРасчета.СпособРасчета) Тогда
		ОбработкаКомментариев.ДобавитьСообщение("Не задан способ расчета!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина;
	КонецЕсли;

    ЕстьРеквизитКатегорияНачисления = МетаданныеВидаРасчета.Реквизиты.Найти("КатегорияРасчета") <> НеОпределено;
	Если ЕстьРеквизитКатегорияНачисления И НЕ ЗначениеЗаполнено(ВидРасчета.КатегорияРасчета) Тогда
		ОбработкаКомментариев.ДобавитьСообщение("Необходимо задать последовательность начисления!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина;
	КонецЕсли; 

	// Вид расчета не может входить в собственную базу
    ВидРасчетаСсылка = ВидРасчета.Ссылка;

	// расчитываем на то, что данная функция вызывается для видов расчета с поддержкой базового периода
	Если ВидРасчета.БазовыеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  НеОпределено Тогда
		ОбработкаКомментариев.ДобавитьСообщение("Вид расчета не может быть включен в состав собственной расчетной базы!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина;
	КонецЕсли;

	Если ВидРасчета.ВедущиеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  НеОпределено Тогда
		ОбработкаКомментариев.ДобавитьСообщение("Вид расчета не может быть включен в состав собственной таблицы ведущих видов расчета!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина;
	КонецЕсли;
	
	ЕстьРеквизитПроизвольнаяФормулаРасчета = МетаданныеВидаРасчета.Реквизиты.Найти("ПроизвольнаяФормулаРасчета") <> Неопределено;
	Если ЕстьРеквизитПроизвольнаяФормулаРасчета И ВидРасчета.ПроизвольнаяФормулаРасчета И Не ЗначениеЗаполнено(ВидРасчета.ФормулаРасчета) Тогда
		ОбработкаКомментариев.ДобавитьСообщение("Не заполнена формула расчета!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина;
	КонецЕсли;

	// тарифный разряд не может запрашиваться в удержаниях
	ТипыПВРУдержаний = Новый Массив;
	ТипыПВРУдержаний.Добавить(Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций"));
	ТипыПВРУдержаний.Добавить(Тип("ПланВидовРасчетаСсылка.УправленческиеУдержания"));
	Если ТипыПВРУдержаний.Найти(ТипЗнч(ВидРасчета.Ссылка)) <> Неопределено Тогда
		ПроверитьНаличиеЗапрашиваемыхПоказателейТипаТарифныйРазряд(ВидРасчета, ОбработкаКомментариев, Отказ);
	КонецЕсли;

	// если поддерживается период действия
	Если МетаданныеВидаРасчета.ИспользованиеПериодаДействия Тогда
		Если ВидРасчета.ВытесняющиеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  НеОпределено Тогда
			ОбработкаКомментариев.ДобавитьСообщение("Начисление не может быть включено в состав собственной таблицы вытесняющих видов расчета!", Перечисления.ВидыСообщений.Ошибка);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если МетаданныеВидаРасчета.Реквизиты.Найти("ОблагаетсяИПН") <> Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(ВидРасчета.ВидДохода) Тогда
			ОбработкаКомментариев.ДобавитьСообщение("Не указан вид дохода начисления!", Перечисления.ВидыСообщений.Ошибка);
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВидРасчета.ОблагаетсяИПН) Тогда
			ОбработкаКомментариев.ДобавитьСообщение("Не указан способ обложения ИПН!", Перечисления.ВидыСообщений.Ошибка);
			Отказ = Истина;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВидРасчета.ОблагаетсяОПВ) Тогда
			ОбработкаКомментариев.ДобавитьСообщение("Не указан способ обложения ОПВ!", Перечисления.ВидыСообщений.Ошибка);
			Отказ = Истина;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВидРасчета.ОблагаетсяСН) Тогда
			ОбработкаКомментариев.ДобавитьСообщение("Не указан способ обложения СН!", Перечисления.ВидыСообщений.Ошибка);
			Отказ = Истина;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВидРасчета.ОблагаетсяСО) Тогда
			ОбработкаКомментариев.ДобавитьСообщение("Не указан способ обложения СО!", Перечисления.ВидыСообщений.Ошибка);
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВидРасчета.ОблагаетсяОППВ) Тогда
			ОбработкаКомментариев.ДобавитьСообщение("Не указан способ обложения ОППВ!", Перечисления.ВидыСообщений.Ошибка);
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВидРасчета.ОблагаетсяОПВР) Тогда
			ОбработкаКомментариев.ДобавитьСообщение("Не указан способ обложения ОПВР!", Перечисления.ВидыСообщений.Ошибка);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьРеквизитСпособРасчета 
		И (МетаданныеВидаРасчета.Реквизиты.Найти("ОтОбратного") <> Неопределено 
		И ВидРасчета.ОтОбратного) Тогда
		
		// Проверим на вхождение данного начисления в список включаемых расчетов от обратного
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВключаемыеВидыНачислений.Ссылка КАК Ссылка,
		|	ВключаемыеВидыНачислений.ВидРасчета КАК ВидРасчета
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВключаемыеВРасчетОтОбратногоВидыНачислений КАК ВключаемыеВидыНачислений
		|ГДЕ
		|	ВключаемыеВидыНачислений.ВидРасчета = &ВидРасчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВключаемыеВидыНачислений.Ссылка,
		|	ВключаемыеВидыНачислений.ВидРасчета
		|ИЗ
		|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ВключаемыеВРасчетОтОбратногоВидыНачислений КАК ВключаемыеВидыНачислений
		|ГДЕ
		|	ВключаемыеВидыНачислений.ВидРасчета = &ВидРасчета";
		
		Запрос.УстановитьПараметр("ВидРасчета", ВидРасчетаСсылка);
		ВыборкаПоВидамНачислений = Запрос.Выполнить().Выбрать();
		ТекстСообщения = "";
		Пока ВыборкаПоВидамНачислений.Следующий() Цикл 
			ТекстСообщения = 	ТекстСообщения + ?(НЕ ЗначениеЗаполнено(ТекстСообщения), "Данное начисление используется в качестве включаемого в начисления со способом расчета ""от обратного"": ", ", ") 
								+ """" + ВыборкаПоВидамНачислений.Ссылка + """";
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ТекстСообщения = ТекстСообщения + ". Установка формулы расчета ""от обратного"" невозможна!";
			ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения, Перечисления.ВидыСообщений.Ошибка);
			Отказ = Истина;
		КонецЕсли;
				
		// Проверим на вхождение данного начисления в список базовых начислений расчетов от обратного
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	БазовыеВидыРасчета.Ссылка КАК Ссылка,
		               |	БазовыеВидыРасчета.ВидРасчета КАК ВидРасчета
		               |ИЗ
		               |	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.БазовыеВидыРасчета КАК БазовыеВидыРасчета
		               |ГДЕ
		               |	БазовыеВидыРасчета.ВидРасчета = &ВидРасчета
		               |	И БазовыеВидыРасчета.Ссылка.ОтОбратного
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	БазовыеВидыРасчета.Ссылка,
		               |	БазовыеВидыРасчета.ВидРасчета
		               |ИЗ
		               |	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.БазовыеВидыРасчета КАК БазовыеВидыРасчета
		               |ГДЕ
		               |	БазовыеВидыРасчета.ВидРасчета = &ВидРасчета
		               |	И БазовыеВидыРасчета.Ссылка.ОтОбратного";
		
		Запрос.УстановитьПараметр("ВидРасчета", ВидРасчетаСсылка);
		ВыборкаПоВидамНачислений = Запрос.Выполнить().Выбрать();
		ТекстСообщения = "";
		Пока ВыборкаПоВидамНачислений.Следующий() Цикл 
			ТекстСообщения = 	ТекстСообщения + ?(НЕ ЗначениеЗаполнено(ТекстСообщения), "Данное начисление используется в качестве базового в начисления со способом расчета ""от обратного"": ", ", ") 
								+ """" + ВыборкаПоВидамНачислений.Ссылка + """";
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ТекстСообщения = ТекстСообщения + ". Установка формулы расчета ""от обратного"" невозможна!";
			ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения, Перечисления.ВидыСообщений.Ошибка);
			Отказ = Истина;
		КонецЕсли;
		
		// Проверим на вхождение в данное начисление расчетов от обратного в качестве базовых начислений
		ТекстСообщения = "";
		Для Каждого СтрокаБазовыйРасчет ИЗ ВидРасчета.БазовыеВидыРасчета Цикл
			Если СтрокаБазовыйРасчет.ВидРасчета.ОтОбратного Тогда
				ТекстСообщения = 	ТекстСообщения + ?(НЕ ЗначениеЗаполнено(ТекстСообщения), "В данном начислении в качестве базовых расчетов используются начисления со способом расчета ""от обратного"": ", ", ") 
									+ """" + СтрокаБазовыйРасчет.ВидРасчета + """";
			КонецЕсли;							
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ТекстСообщения = ТекстСообщения + ". Установка формулы расчета ""от обратного"" невозможна!";
			ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения, Перечисления.ВидыСообщений.Ошибка);
			Отказ = Истина;
		КонецЕсли;

	КонецЕсли;
	
    Если Отказ Тогда
	    Возврат "";
	КонецЕсли; 
	
	ТекстСообщения = "";
	// Проверим значение реквизита "Категория начисления"
	// Для ПВР "Удержания организаций" проверку пропустим.
	Если ЕстьРеквизитКатегорияНачисления и ТипыПВРУдержаний.Найти(ТипЗнч(ВидРасчета.Ссылка)) = Неопределено Тогда
		
		Запрос = Новый Запрос;
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыРасчета.ВидРасчета.КатегорияРасчета КАК КатегорияРасчета,
		|	ВидыРасчета.ВидРасчета.Наименование КАК Наименование,
		|	""БазовыеВидыРасчета"" КАК ИмяТЧ";
		// Для дополнительных начислений организации добавим еще одно поле
		Если МетаданныеВидаРасчета = Метаданные.ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ВЫБОР
			|		КОГДА ВидыРасчета.ВидРасчета.ВидПремии ЕСТЬ NULL 
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК БазовыйВидаРасчетаДополнительный";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	ПланВидовРасчета."+МетаданныеВидаРасчета.Имя+".БазовыеВидыРасчета КАК ВидыРасчета
		|
		|ГДЕ
		|	ВидыРасчета.Ссылка = &парамТекущийВидРасчета";

		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("парамТекущийВидРасчета", ВидРасчетаСсылка);
		Категории = Запрос.Выполнить().Выгрузить();

		Если (МетаданныеВидаРасчета.Реквизиты.Найти("ОтОбратного") <> Неопределено 
			И ВидРасчета.ОтОбратного) Тогда
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "БазовыеВидыРасчета", "ВключаемыеВРасчетОтОбратногоВидыНачислений");
			Запрос.Текст = ТекстЗапроса;
			КатегорииОтОбратного = Запрос.Выполнить().Выгрузить();
			Для Каждого СтрокаКатегории Из КатегорииОтОбратного Цикл
				НоваяСтрока = Категории.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКатегории);
			КонецЦикла;
			
		КонецЕсли;
				
		// Определение максимальной категории среди видов расчета, входящих в базу
		МаксимальныйИндексКатегории = -1;
		Если МетаданныеВидаРасчета = Метаданные.ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций Тогда
			
			БазовыеВРСоответствие = Новый Структура("ОсновныеВР,ДополнительныеВР", Ложь, Ложь);
			МаксимальныйИндексКатегории = ?(Категории.Количество() = 0, -1, 0);
				
			Для Каждого БазовыйРасчет Из Категории Цикл
				
				Если БазовыйРасчет.БазовыйВидаРасчетаДополнительный Тогда
					
					Если БазовыйРасчет.Наименование = Null Тогда
						Продолжить;
					КонецЕсли; 
					Если БазовыйРасчет.КатегорияРасчета = Перечисления.КатегорииРасчетов.ПустаяСсылка() Тогда
						Продолжить;
					КонецЕсли;
					ИндексКатегории = Перечисления.КатегорииРасчетов.Индекс(БазовыйРасчет.КатегорияРасчета);
					МаксимальныйИндексКатегории = Макс(МаксимальныйИндексКатегории, ИндексКатегории);
					БазовыеВРСоответствие.ДополнительныеВР = Истина;
				Иначе
					БазовыеВРСоответствие.ОсновныеВР = Истина;
					Продолжить
				КонецЕсли; 
				
			КонецЦикла;
			
		Иначе
			
			Для Каждого БазовыйРасчет Из Категории Цикл
				Если БазовыйРасчет.Наименование = Null Тогда
					Продолжить;
				КонецЕсли; 
				Если БазовыйРасчет.КатегорияРасчета = Перечисления.КатегорииРасчетов.ПустаяСсылка() Тогда
					Продолжить;
				КонецЕсли;
				ИндексКатегории = Перечисления.КатегорииРасчетов.Индекс(БазовыйРасчет.КатегорияРасчета);
				МаксимальныйИндексКатегории = Макс(МаксимальныйИндексКатегории, ИндексКатегории);
				ИмяТЧ = ?(МаксимальныйИндексКатегории = ИндексКатегории, БазовыйРасчет.ИмяТЧ, ИмяТЧ);
			КонецЦикла;
			
		КонецЕсли;

		Если МаксимальныйИндексКатегории = Перечисления.КатегорииРасчетов.Количество()-1 Тогда

			// В базе расчетов есть расчеты с максимальной категорией
			Если ИмяТЧ = "БазовыеВидыРасчета" Тогда
				ТекстСообщения = "Откорректируйте состав базовых видов расчетов. В базу расчетов не должны входить расчеты с категорией начислений ""Зависимое третьего уровня""!.";
			ИначеЕсли ИмяТЧ = "ВключаемыеВРасчетОтОбратногоВидыНачислений" Тогда
				ТекстСообщения = "Откорректируйте состав включаемых в расчет ""от обратного"" видов начислений. В него не должны входить расчеты с категорией начислений ""Зависимое третьего уровня""!.";
			КонецЕсли;

		Иначе
			// Категория начислений вида расчета должна быть на уровень выше любого из видов расчетов, составляющих базу расчета
			Если МаксимальныйИндексКатегории = -1 Тогда
				МаксимальнаяКатегорияБазы = Перечисления.КатегорииРасчетов.ПустаяСсылка();
			Иначе
				МаксимальнаяКатегорияБазы = Перечисления.КатегорииРасчетов.Получить(МаксимальныйИндексКатегории);
			КонецЕсли;
			Если МетаданныеВидаРасчета = Метаданные.ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций Тогда
				Если БазовыеВРСоответствие.ДополнительныеВР Тогда
					ИндексВыбраннойКатегории = Перечисления.КатегорииРасчетов.Индекс(ВидРасчета.КатегорияРасчета);
				ИначеЕсли БазовыеВРСоответствие.ОсновныеВР Тогда
					ИндексВыбраннойКатегории = МаксимальныйИндексКатегории +1;
				Иначе
					ИндексВыбраннойКатегории = Перечисления.КатегорииРасчетов.Индекс(ВидРасчета.КатегорияРасчета);
				КонецЕсли;
			Иначе
				ИндексВыбраннойКатегории = Перечисления.КатегорииРасчетов.Индекс(ВидРасчета.КатегорияРасчета);
			КонецЕсли;
			ОжидаемаяКатегория = Перечисления.КатегорииРасчетов.Получить(МаксимальныйИндексКатегории +1);
		 		
			Если ИндексВыбраннойКатегории <= МаксимальныйИндексКатегории Тогда
				// Пользователь установил категорию меньше чем самая максимальная категория базы расчетов
				Если ИмяТЧ = "БазовыеВидыРасчета" Тогда
					ТекстСообщения = "Неверно установлена категория начислений. В базу расчетов входят расчеты с категорией """ + МаксимальнаяКатегорияБазы + """. Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """!";
				ИначеЕсли ИмяТЧ = "ВключаемыеВРасчетОтОбратногоВидыНачислений" Тогда
					ТекстСообщения = "Неверно установлена категория начислений. В список включаемых в расчет ""от обратного"" видов начислений входят расчеты с категорией """ + МаксимальнаяКатегорияБазы + """. Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """!";
				КонецЕсли;
			ИначеЕсли ИндексВыбраннойКатегории > МаксимальныйИндексКатегории +1 тогда
				// Категория слишком большая - предупредим
				Если МаксимальныйИндексКатегории = -1 Тогда  // нет в базе ничего
					Если ЕстьРеквизитСпособРасчета Тогда
						Если СпособРасчетаТребуетБазовыйПериод(ВидРасчета.СпособРасчета,ВидРасчета.Показатели) Тогда
							Если Категории.НайтиСтроки(Новый Структура("ИмяТЧ", "БазовыеВидыРасчета")).Количество() = 0 Тогда
								ТекстСообщения = "Рекомендуется заполнить базовые начисления!";
							КонецЕсли;
						Иначе
							Если ИмяТЧ = "БазовыеВидыРасчета" Тогда
								ТекстСообщения = "Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """, т.к. для вида расчета не заданы базовые начисления или для базовых начислений не заданы категории начисления!";
							ИначеЕсли ИмяТЧ = "ВключаемыеВРасчетОтОбратногоВидыНачислений" Тогда
								ТекстСообщения = "Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """, т.к. для вида расчета не заданы включаемые в расчет ""от обратного"" начисления или для них не заданы категории начисления!";
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если ИмяТЧ = "БазовыеВидыРасчета" Тогда
						ТекстСообщения = "Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """, т.к. максимальной категорией среди базовых расчетов является категория """ + МаксимальнаяКатегорияБазы + """!";
					ИначеЕсли ИмяТЧ = "ВключаемыеВРасчетОтОбратногоВидыНачислений" Тогда
						ТекстСообщения = "Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """, т.к. максимальной категорией среди включаемых в расчет ""от обратного"" начислений является категория """ + МаксимальнаяКатегорияБазы + """!";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
 				
	КонецЕсли; 
	
	// Проверим соответствие списков базовых и ведущих расчетов
	Если ПроверятьСоответствиеБазовыхИВедущихРасчетов Тогда
		Для Каждого СтрокаБазовыйРасчет из ВидРасчета.БазовыеВидыРасчета Цикл
			
			Если СтрокаБазовыйРасчет.ВидРасчета = Неопределено Тогда
				ТекстСообщения = ТекстСообщения + ?(НЕ ЗначениеЗаполнено(ТекстСообщения),"",Символы.ПС) + "В строке " + СтрокаБазовыйРасчет.НомерСтроки + " базовых видов расчета не указан вид расчета!";
				Продолжить;
			КонецЕсли;
		   
			Если СтрокаБазовыйРасчет.ВидРасчета.Ссылка = Неопределено Тогда
			   ТекстСообщения = ТекстСообщения + ?(НЕ ЗначениеЗаполнено(ТекстСообщения),"",Символы.ПС) + "В строке " + СтрокаБазовыйРасчет.НомерСтроки + " базовых видов расчета не указан вид расчета!"
			Иначе
			
				Если ВидРасчета.ВедущиеВидыРасчета.Найти(СтрокаБазовыйРасчет.ВидРасчета,"ВидРасчета") = Неопределено Тогда
					ТекстСообщения = ТекстСообщения + ?(НЕ ЗначениеЗаполнено(ТекстСообщения),"",Символы.ПС) + "Список ведущих видов расчета отличается от списка базовых расчетов. Рекомендуется синхронизировать указанные списки!";
					Прервать;
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЦикла; 
	КонецЕсли; 
	
	// Если ВР связан со средним заработком, проверим, что бы был заполнен реквизит "ПериодРасчетаСреднегоЗаработка"
	ЕстьРеквизитПериодРасчетаСреднегоЗаработка = МетаданныеВидаРасчета.Реквизиты.Найти("ПериодРасчетаСреднегоЗаработка") <> НеОпределено;
	Если ЕстьРеквизитСпособРасчета и ЕстьРеквизитПериодРасчетаСреднегоЗаработка Тогда
	
		Если ПолучитьСписокНачисленийПоСреднемуЗаработку().НайтиПоЗначению(ВидРасчета.СпособРасчета) <> НеОпределено Тогда
			Если НЕ ЗначениеЗаполнено(ВидРасчета.ПериодРасчетаСреднегоЗаработка) Тогда
				ОбработкаКомментариев.ДобавитьСообщение("Необходимо задать количество месяцев для расчета среднего заработка!", Перечисления.ВидыСообщений.Ошибка);
				Отказ = Истина;
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат ТекстСообщения;

КонецФункции

// Возвращает список категорий начислений, доступных для способа расчета
Функция ПолучитьСписокКатегорийНачисленийСпособаРасчета(СпособРасчета) Экспорт

	СписокКатегорий = Новый СписокЗначений;	
	Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом  Тогда
		СписокКатегорий.Добавить(Перечисления.КатегорииРасчетов.ЗависимоеПервогоУровня);
		СписокКатегорий.Добавить(Перечисления.КатегорииРасчетов.ЗависимоеВторогоУровня);
		СписокКатегорий.Добавить(Перечисления.КатегорииРасчетов.ЗависимоеТретьегоУровня);
	Иначе//СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой
		СписокКатегорий.Добавить(Перечисления.КатегорииРасчетов.Первичное);
	КонецЕсли; 

	Возврат СписокКатегорий;

КонецФункции // рзСписокКатегорийНачисленийСпособаРасчета()

// Возвращает вид учета времени в зависимости от вида расчета и вида графика 
Функция ПолучитьВидУчетаВремени(СпособРасчета, СуммированныйУчетРабочегоВремени) Экспорт
	
	// вид учета времени определяется по способу расчета
	
	Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам
		ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения
		ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам 
		ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам
		ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам
		ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке 
		ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения
		ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке 
		ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок 
		ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммойДляПочасовогоОтклонения 
		ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения
		ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке Тогда
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда	
		
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоНочнымЧасам;
		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка 
		ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку 
		ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска
		ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных 
		ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения Тогда
		
		Если СуммированныйУчетРабочегоВремени = Истина 
				ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения Тогда
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
		Иначе	
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням
		КонецЕсли; 
		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке
			  ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням
			  ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням 
			  ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням 
			  ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням 
			  ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке Тогда
		
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
		
	Иначе
		Если СуммированныйУчетРабочегоВремени = Истина Тогда
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
		Иначе
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидУчетаВремени;
КонецФункции

// рассчитываем сумму за работу в документах сдельной выработки
//
// Параметры
//  ТекущиеДанные - данные строки т.ч. Выработка
//  РассчитыватьСуммуЗаРаботуВВалютеРасценки - булево, флажок пересчета суммы в валюте расценки
//
Процедура РассчитатьСуммуЗаРаботу(ТекущиеДанные, Дата, ВалютаРегламентированногоУчета, ВалютаУпрУчета, КурсВалютыУпрУчета, КратностьВалютыУпрУчета, РассчитыватьСуммуЗаРаботуВВалютеРасценки = Истина) Экспорт

	Если РассчитыватьСуммуЗаРаботуВВалютеРасценки Тогда
		ТекущиеДанные.СуммаЗаРаботуВВалютеРасценки = ТекущиеДанные.Расценка * ТекущиеДанные.Количество;
	КонецЕсли;
	
	Если ТекущиеДанные.Валюта = ВалютаРегламентированногоУчета Тогда
		КурсВылютыРасценки = 1;
		КратностьВылютыРасценки = 1;
	ИначеЕсли ТекущиеДанные.Валюта = ВалютаУпрУчета Тогда	
		КурсВылютыРасценки = КурсВалютыУпрУчета;
		КратностьВылютыРасценки = КратностьВалютыУпрУчета;
	Иначе	
		Структура = РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ТекущиеДанные.Валюта));
		КурсВылютыРасценки = Структура.Курс;
		КратностьВылютыРасценки = Структура.Кратность;
	КонецЕсли; 
	
	ТекущиеДанные.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ТекущиеДанные.СуммаЗаРаботуВВалютеРасценки,ТекущиеДанные.Валюта,ВалютаУпрУчета,
							КурсВылютыРасценки, КурсВалютыУпрУчета, КратностьВылютыРасценки, КратностьВалютыУпрУчета);
	ТекущиеДанные.СуммаРегл = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ТекущиеДанные.СуммаЗаРаботуВВалютеРасценки,ТекущиеДанные.Валюта,ВалютаРегламентированногоУчета,
							КурсВылютыРасценки, 1, КратностьВылютыРасценки, 1);
	
КонецПроцедуры // РассчитатьСуммуЗаРаботу()

// Функция возвращет структуру с правилами округления результата указанного вида расчета
//
// Параметры:
//	ВидРасчета - вид расчета начисления/удержания/налог/сбор/отчисление
//	ПериодРегистрации - дата месяца, в котором производится расчет
//
// Возвращаемое значение:
//	Структура с двумя ключами:
//		ПорядокОкругления - значение перечисления ПорядкиОкругления
//		МетодОкругления - значение перечисления МетодыОкругления
//
Функция ПолучитьПравилоОкругленияВидаРасчета(ВидРасчета, ПериодРегистрации) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидРасчета", ВидРасчета);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ИспользоватьОбщееОкругление", ПериодРегистрации < '20220101' ИЛИ НЕ (ВидРасчета = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование
															ИЛИ ВидРасчета = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование
															ИЛИ ВидРасчета = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления));
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	ПорядокОкругленияВР.Период,
	|	ПорядокОкругленияВР.ПорядокОкругления,
	|	ПорядокОкругленияВР.МетодОкругления
	|ИЗ
	|	РегистрСведений.ПорядокОкругленияРезультатовРасчетаЗарплаты.СрезПоследних(
	|		&ПериодРегистрации, 
	|		ВидРасчета = &ВидРасчета) КАК ПорядокОкругленияВР
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	ПорядокОкругленияОбщ.Период,
	|	ПорядокОкругленияОбщ.ПорядокОкругления,
	|	ПорядокОкругленияОбщ.МетодОкругления
	|ИЗ
	|	РегистрСведений.ПорядокОкругленияРезультатовРасчетаЗарплаты.СрезПоследних(
	|		&ПериодРегистрации, 
	|		ВидРасчета = НЕОПРЕДЕЛЕНО
	|		И &ИспользоватьОбщееОкругление) КАК ПорядокОкругленияОбщ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет
	|";

	СтруктураПравила = Новый Структура();
	СтруктураПравила.Вставить("ПорядокОкругления", Перечисления.ПорядкиОкругления.Окр0_01);
	СтруктураПравила.Вставить("МетодОкругления", Перечисления.МетодыОкругления.ПоАрифметическимПравилам);
	СтруктураПравила.Вставить("Период", '00010101');
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураПравила.ПорядокОкругления 	= Выборка.ПорядокОкругления;
		СтруктураПравила.МетодОкругления 	= Выборка.МетодОкругления;
		СтруктураПравила.Период 			= Выборка.Период;
		Прервать;
	КонецЦикла;

	Возврат СтруктураПравила;

КонецФункции // ПолучитьПравилоОкругленияВидаРасчета()

// Фукнция рассчитывается число рабочих дней или часов для оплаты компенсации за неиспользованный отпуск
// по заданному числу календарных дней и дате отсчета
//
// Параметры:
// 	ФизЛицо, Приказ, Организация - данные о работнике
//	ДатаКомпенсации - дата предоставления компенсации, от которой отсчитывается период
//	ЧислоКалендарныхДней - число календарных дней компенсации
//
Функция РассчитатьЧислоРабочихДнейЧасовКомпенсацииОтпуска(Сотрудник, Организация, ДатаКомпенсации, ЧислоКалендарныхДней, ЭтоРасчетПриУвольнении = Ложь) Экспорт

	Результат = 0;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаКомпенсации", ДатаКомпенсации);
	
	// определим график работы на момент предоставления компенсации
	ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка;
	Если ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка = Перечисления.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка.ФактическийГрафикРаботыСотрудника Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГрафикиРаботыФизЛиц.Ссылка КАК ПерсональныйГрафик, 
		|	РаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы,
		|	ЕСТЬNULL(РаботникиОрганизации.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаКомпенсации,
		|			Сотрудник = &Сотрудник
		|			И Организация = &Организация) КАК РаботникиОрганизации
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыФизЛиц КАК ГрафикиРаботыФизЛиц
		|		ПО РаботникиОрганизации.ГрафикРаботы = ГрафикиРаботыФизЛиц.ГрафикРаботы
		|			И ГрафикиРаботыФизЛиц.Сотрудник = &Сотрудник
		|			И ГрафикиРаботыФизЛиц.Организация = &Организация
		|			И ЕСТЬNULL(РаботникиОрганизации.ГрафикРаботы.ИспользуетсяСовместноСПланГрафиком, ЛОЖЬ)
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		ГрафикРаботы = Неопределено;
		ПерсональныйГрафик = Неопределено;
		СуммированныйУчетРабочегоВремени = Ложь;
		Если Выборка.Следующий() Тогда
			ГрафикРаботы = Выборка.ГрафикРаботы;
			ПерсональныйГрафик = Выборка.ПерсональныйГрафик;
			СуммированныйУчетРабочегоВремени = Выборка.СуммированныйУчетРабочегоВремени;
		КонецЕсли;
	Иначе
		// рассчитываем по основному графику работы предприятия
		ГрафикРаботы = Константы.ОсновнойГрафикРаботыПредприятия.Получить();
		ПерсональныйГрафик = Неопределено;
		СуммированныйУчетРабочегоВремени = ГрафикРаботы.СуммированныйУчетРабочегоВремени;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	Запрос.УстановитьПараметр("ПерсональныйГрафик", ПерсональныйГрафик);
	
	Если ЭтоРасчетПриУвольнении Тогда 
		// найдем первый рабочий день от даты компенсации, с которого будем осуществлять отсчет
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ГрафикиРаботыПоВидамВремени.Дата КАК Дата
		|ИЗ
		|	(ВЫБРАТЬ
		|		ГрафикиРаботыПоВидамВремени.Дата КАК Дата
		|	ИЗ
		|		РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|	ГДЕ
		|		ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ГрафикРаботы
		|		И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
		|		И ГрафикиРаботыПоВидамВремени.Дата >= &ДатаКомпенсации
		|		И ГрафикиРаботыПоВидамВремени.ОсновноеЗначение <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ГрафикиРаботыПоВидамВремени.Дата
		|	ИЗ
		|		РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|	ГДЕ
		|		ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ПерсональныйГрафик
		|		И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
		|		И ГрафикиРаботыПоВидамВремени.Дата >= &ДатаКомпенсации
		|		И ГрафикиРаботыПоВидамВремени.ОсновноеЗначение <> 0) КАК ГрафикиРаботыПоВидамВремени
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаНачала = Выборка.Дата;
		Иначе
			ДатаНачала = ДатаКомпенсации;
		КонецЕсли;
	Иначе
		ДатаНачала = ДатаКомпенсации;
	КонецЕсли;

	// определим дата окончания периода по числу календарных дней
	ДатаОкончания = ПолучитьДатуОкончанияПоЧислуДнейПериода(ДатаНачала, ЧислоКалендарныхДней);
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
    Запрос.УстановитьПараметр("ОсновнойГрафикРаботыПредприятия", Константы.ОсновнойГрафикРаботыПредприятия.Получить());
    Запрос.УстановитьПараметр("ДатаИзмененияЕдиныхПравил2024", '20240101');
    Запрос.УстановитьПараметр("СуммированныйУчетРабочегоВремени", СуммированныйУчетРабочегоВремени);

	Запрос.Текст =
    "ВЫБРАТЬ
    |   ГрафикиРаботы.Ссылка КАК ГрафикРаботыПредприятия,
    |   ГрафикиРаботы.Наименование,
    |   ГрафикиРаботы.ВидГрафика,
    |   ГрафикиРаботы.ПервыйВыходной,
    |   ГрафикиРаботы.ВторойВыходной,
    |   ГрафикиРаботы.ДлительностьРабочейНедели,
    |   ГрафикиРаботы.Представление
    |ПОМЕСТИТЬ ВТ_ГрафикРаботыПредприятия
    |ИЗ
    |   Справочник.ГрафикиРаботы КАК ГрафикиРаботы
    |ГДЕ
    |   ГрафикиРаботы.Ссылка = &ОсновнойГрафикРаботыПредприятия
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |   ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеКалендаря.ДатаКалендаря), 0) / 12 КАК СреднееКоличествоКалендарныхДней,
    |   ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
    |               КОГДА НЕ ДанныеКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
    |                   ТОГДА ДанныеКалендаря.ДатаКалендаря
    |               ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
    |           КОНЕЦ) - 1, 0) / 12 КАК СреднееКоличествоКалендарныхДнейБезПраздничных,
    |   СУММА(ВЫБОР
    |           КОГДА ГрафикиРаботы.ВидГрафика = ЗНАЧЕНИЕ(Перечисление.ВидыРабочихГрафиков.Пятидневка)
    |               ТОГДА ВЫБОР
    |                       КОГДА ГрафикиРаботы.ДлительностьРабочейНедели = 40
    |                           ТОГДА ЕСТЬNULL(ВЫБОР
    |                                       КОГДА ДанныеКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
    |                                           ТОГДА 8
    |                                       ИНАЧЕ 0
    |                                   КОНЕЦ, 0)
    |                       ИНАЧЕ ЕСТЬNULL(ВЫБОР
    |                                   КОГДА ДанныеКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
    |                                       ТОГДА 7.2
    |                                   ИНАЧЕ 0
    |                               КОНЕЦ, 0)
    |                   КОНЕЦ
    |           КОГДА ГрафикиРаботы.ВидГрафика = ЗНАЧЕНИЕ(Перечисление.ВидыРабочихГрафиков.Шестидневка)
    |               ТОГДА ВЫБОР
    |                       КОГДА ГрафикиРаботы.ДлительностьРабочейНедели = 40
    |                           ТОГДА ЕСТЬNULL(ВЫБОР
    |                                       КОГДА ДанныеКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
    |                                           ТОГДА ВЫБОР
    |                                                   КОГДА ПеренесенныеРабочиеДни.ВыходнойДень ЕСТЬ NULL
    |                                                       ТОГДА 7
    |                                                   ИНАЧЕ 5
    |                                               КОНЕЦ
    |                                       КОГДА ДанныеКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
    |                                           ТОГДА ВЫБОР
    |                                                   КОГДА ПеренесенныеРабочиеДни.ВыходнойДень ЕСТЬ NULL
    |                                                       ТОГДА 5
    |                                                   ИНАЧЕ 7
    |                                               КОНЕЦ
    |                                       ИНАЧЕ 0
    |                                   КОНЕЦ, 0)
    |                       КОГДА ГрафикиРаботы.ДлительностьРабочейНедели = 36
    |                           ТОГДА ЕСТЬNULL(ВЫБОР
    |                                       КОГДА ДанныеКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
    |                                               ИЛИ ДанныеКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
    |                                           ТОГДА 6
    |                                       ИНАЧЕ 0
    |                                   КОНЕЦ, 0)
    |                   КОНЕЦ
    |           ИНАЧЕ ЕСТЬNULL(ВЫБОР
    |                       КОГДА ДанныеКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
    |                               ИЛИ ДанныеКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
    |                           ТОГДА ЕСТЬNULL(ВЫБОР
    |                                       КОГДА ДанныеКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
    |                                           ТОГДА ВЫБОР
    |                                                   КОГДА ПеренесенныеРабочиеДни.ВыходнойДень ЕСТЬ NULL
    |                                                       ТОГДА 7
    |                                                   ИНАЧЕ 5
    |                                               КОНЕЦ
    |                                       КОГДА ДанныеКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
    |                                           ТОГДА ВЫБОР
    |                                                   КОГДА ПеренесенныеРабочиеДни.ВыходнойДень ЕСТЬ NULL
    |                                                       ТОГДА 5
    |                                                   ИНАЧЕ 7
    |                                               КОНЕЦ
    |                                       ИНАЧЕ 0
    |                                   КОНЕЦ, 0)
    |                   КОНЕЦ, 0)
    |       КОНЕЦ) / 12 КАК СреднемесячноеЧислоЧасов,
    |   ДанныеКалендаря.Год,
    |   ГрафикиРаботы.ГрафикРаботыПредприятия
    |ПОМЕСТИТЬ ВТ_ДанныеКалендаря
    |ИЗ
    |   РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ДанныеКалендаря
    |       ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГрафикРаботыПредприятия КАК ГрафикиРаботы
    |       ПО (ИСТИНА)
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПеренесенныеРабочиеДни КАК ПеренесенныеРабочиеДни
    |       ПО ДанныеКалендаря.Год = ПеренесенныеРабочиеДни.Год
    |           И ДанныеКалендаря.ДатаКалендаря = ПеренесенныеРабочиеДни.РабочийДень
    |           И (&ДатаНачала >= &ДатаИзмененияЕдиныхПравил2024)
    |ГДЕ
    |   ДанныеКалендаря.Год = ГОД(&ДатаНачала)
    |
    |СГРУППИРОВАТЬ ПО
    |   ДанныеКалендаря.Год,
    |   ГрафикиРаботы.ГрафикРаботыПредприятия
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
    |   СУММА(ГрафикиРаботыПоВидамВремени.ПроизводственныйКалендарьКалендарныеДни) КАК КалендарныхДней,
    |   СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) КАК ЧислоДней,
    |   СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ЧислоЧасов
    |ПОМЕСТИТЬ ВТ_ГрафикиРаботыВремени
    |ИЗ
    |   РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
    |ГДЕ
    |   ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ГрафикРаботы
    |   И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
    |   И ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
    |
    |СГРУППИРОВАТЬ ПО
    |   ГрафикиРаботыПоВидамВремени.ГрафикРаботы
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |   ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
    |   СУММА(ГрафикиРаботыПоВидамВремени.ПроизводственныйКалендарьКалендарныеДни),
    |   СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение),
    |   СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение)
    |ИЗ
    |   РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
    |ГДЕ
    |   ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ПерсональныйГрафик
    |   И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
    |   И ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
    |
    |СГРУППИРОВАТЬ ПО
    |   ГрафикиРаботыПоВидамВремени.ГрафикРаботы
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   ВТ_ГрафикиРаботыВремени.ГрафикРаботы,
    |   ВТ_ГрафикиРаботыВремени.КалендарныхДней,
    |   ВТ_ГрафикиРаботыВремени.ЧислоДней КАК ЧислоДней,
    |   ВЫБОР
    |       КОГДА &СуммированныйУчетРабочегоВремени И (&ДатаНачала >= &ДатаИзмененияЕдиныхПравил2024)
    |           ТОГДА ВТ_ГрафикиРаботыВремени.КалендарныхДней * ВТ_ДанныеКалендаря.СреднемесячноеЧислоЧасов / ВТ_ДанныеКалендаря.СреднееКоличествоКалендарныхДнейБезПраздничных
    |       ИНАЧЕ ВТ_ГрафикиРаботыВремени.ЧислоЧасов
    |   КОНЕЦ КАК ЧислоЧасов
    |ИЗ
    |   ВТ_ГрафикиРаботыВремени КАК ВТ_ГрафикиРаботыВремени
    |       ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКалендаря КАК ВТ_ДанныеКалендаря
    |       ПО (ИСТИНА)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// из-за того, что план-график может быть заполнен только за текущий месяц, а дней компенсации - много,
		// то ведем подсчет по тому графику (основному либо план-графику), где представлен весь период 
		Если Выборка.КалендарныхДней = ЧислоКалендарныхДней Тогда
			Если СуммированныйУчетРабочегоВремени Тогда
				Результат = Выборка.ЧислоЧасов;
			Иначе
				Результат = Выборка.ЧислоДней;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции // РассчитатьЧислоРабочихДнейЧасовКомпенсацииОтпуска()

// ISO 20022
Функция ДатаИзмененияПорядкаПеречисленияОСМС2024() Экспорт
	
	Возврат НачалоМесяца('20240421');
	
КонецФункции // ISO 20022

/////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ ДЛЯ РАБОТЫ С НАЛОГАМИ, ВЗНОСАМИ И ОТЧИСЛЕНИЯМ С ЗАРПЛАТЫ

// Заполняет набор записей по переданным данным расчета ИПН
//
// Параметры: 
//  НаборЗаписей - набор записей регистра ИПНРасчетыСБюджетом
//	ТаблицаДанныеИПН - таблица значений - данные расчета ИПН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымИПН(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт

	Если ПериодРегистрации >= '20200101' Тогда	
		ЗаполнитьНаборЗаписейПоДаннымИПНПосле2020(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, КомментарийВидаРасчета, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
	ИначеЕсли ПериодРегистрации >= '20190101' Тогда	
		ЗаполнитьНаборЗаписейПоДаннымИПНПосле2019(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, КомментарийВидаРасчета, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
	ИначеЕсли ПериодРегистрации >= '20180101' Тогда	
		ЗаполнитьНаборЗаписейПоДаннымИПНПосле2018(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, КомментарийВидаРасчета, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
	ИначеЕсли ПериодРегистрации >= '20170701' Тогда	
		ЗаполнитьНаборЗаписейПоДаннымИПНПосле2017(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, КомментарийВидаРасчета, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
	ИначеЕсли ПериодРегистрации >= '20090101' Тогда
		ЗаполнитьНаборЗаписейПоДаннымИПНПосле2009(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, КомментарийВидаРасчета, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
	Иначе
		ЗаполнитьНаборЗаписейПоДаннымИПНДо2009(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, КомментарийВидаРасчета, ФизЛицо);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымИПН()

// Заполняет набор записей по переданным данным расчета ИПН
//
// Параметры: 
//  НаборЗаписей - набор записей регистра ИПНРасчетыСБюджетом
//	ТаблицаДанныеИПН - таблица значений - данные расчета ИПН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымИПНДо2009(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено)
	
	// правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;

	УжеИсчислили = 0;
	УжеПрименилиВычет = 0;
	УжеПрименилиЛьготу = 0;
	ТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	ТекущийГод = 0;
	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ИПН
	РаботникиДляРасчетаИПН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения	
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ПримененныйВычет, ПримененнаяЛьгота, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
				СтруктураСтроки.ПримененныйВычет = 0;
				СтруктураСтроки.ПримененнаяЛьгота = 0;
			КонецЕсли;
			РаботникиДляРасчетаИПН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;
	Иначе
		// при расчете всех строк - сохраняем только список физлиц (без сумм)
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			РаботникиДляРасчетаИПН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета ИПН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;
	Если КомментироватьРасчет Тогда
		// комментарий для расчет ИПН реализован только начиная с 2007 года - начало комментария формируется в документе РасчетУдержанийРаботниковОрганизаций
		ЕстьПодробныйКомментарий = ТаблицаДанныеИПН.Колонки.Найти("СуммаДоходаВсего") <> Неопределено;
	КонецЕсли;
	
	Для Каждого ДанныеИПН Из ТаблицаДанныеИПН Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеИПН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ДанныеИПН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеИПН.Период, ПравилоОкругления);
		КонецЕсли;
	
		// проверим заполненность необходимых реквизитов
		Если ДанныеИПН.Период >= '20070101' Тогда
			// комментарии и проверки реализованы только в расчете после 2007 года
			Если ДанныеИПН.ПроцентСтавки = 0 Тогда
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахИПНиСН.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не заполнено значение ставки индивидуального подоходного налога", РасшифровкаСтавки, -99);  // т.к. порядок сообщения для комментария ИПН=-100, то сообщения сразу выводим за ним
				БылаОшибка = Истина;
			КонецЕсли;
			
			Если ДанныеИПН.РазмерМЗП = 0 Тогда
				РасшифровкаМЗП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не определен размер минимальной заработной платы", РасшифровкаМЗП, -98);
				БылаОшибка = Истина;
			КонецЕсли;
			
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизлицо <> ДанныеИПН.ФизЛицо ИЛИ ТекущийГод <> Год(ДанныеИПН.Период) Тогда
			УжеИсчислили = 0;
			УжеПрименилиВычет = 0;
			УжеПрименилиЛьготу = 0;
			ТекущееФизлицо = ДанныеИПН.ФизЛицо;
			ТекущийГод = Год(ДанныеИПН.Период);
		КонецЕсли;
		
		РанееНалогИсчисленный = ?(ДанныеИПН.РанееНалогИсчисленный = null, 0, ДанныеИПН.РанееНалогИсчисленный);
		Если ДанныеИПН.Период >= '20070101' Тогда
			НалогИсчисленный = ?(ДанныеИПН.НалогИсчисленный = null, 0, ДанныеИПН.НалогИсчисленный);
			ВычетПримененный = ДанныеИПН.ПримененныйВычет;
		Иначе
			НалогИсчисленный = ?(ДанныеИПН.НалогИсчисленный = null, 0, ДанныеИПН.НалогИсчисленный) - УжеИсчислили;
			ВычетПримененный = ДанныеИПН.ПримененныйВычет - УжеПрименилиВычет;
		КонецЕсли;
		ЛьготаПримененная = ДанныеИПН.ПримененнаяЛьгота - УжеПрименилиЛьготу;
		
		// Округлим результат
		НалогИсчисленный 	= ОбщегоНазначения.ОкруглитьЧисло(НалогИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		ВычетПримененный 	= ОбщегоНазначения.ОкруглитьЧисло(ВычетПримененный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		ЛьготаПримененная 	= ОбщегоНазначения.ОкруглитьЧисло(ЛьготаПримененная, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		НалогИсчисленный = НалогИсчисленный - РанееНалогИсчисленный;
		
		Если КомментироватьРасчет Тогда
		   
		   	Если ДанныеИПН.Период = ПериодРегистрации ИЛИ НалогИсчисленный <> 0 Тогда
		   	
		   		Если ЕстьПодробныйКомментарий Тогда
		   		
					РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеИПН.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"000"); // "000" - первая строка с месяцем
				
					МассивПараметровРасшифровки = Новый Массив;
					МассивПараметровРасшифровки.Добавить(ДанныеИПН.ФизЛицо);
					
					РаботаССообщениями.КомментарийРасчета("Начислено доходов: " + ДанныеИПН.СуммаДоходаВсего, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"010");
					Если ДанныеИПН.СуммаНеоблагаемогоДохода <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Доходы, не подлежащие налогообложению: " + ДанныеИПН.СуммаНеоблагаемогоДохода, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"020");
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("ОПВ за месяц: " + ДанныеИПН.ОПВЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"030");
					
					РасшифровкаВычета = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьНалогиФизЛица", МассивПараметровРасшифровки);
					Если ДанныеИПН.ПримененныйВычетЗаМесяц <> 0 Тогда
						Если ДанныеИПН.РанееПримененныйНалоговыйВычет <> 0 Тогда
							КомментарийВычета = РаботаССообщениями.КомментарийРасчета("Предоставлен вычет: " + ВычетПримененный, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"040");
							РаботаССообщениями.КомментарийРасчета("Вычет за месяц: ", КомментарийВычета, ДанныеИПН.ПримененныйВычетЗаМесяц, РасшифровкаВычета);
							РаботаССообщениями.КомментарийРасчета("Ранее предоставлен вычет за месяц: " + ДанныеИПН.РанееПримененныйНалоговыйВычет, КомментарийВычета);
						Иначе
							РаботаССообщениями.КомментарийРасчета("Предоставлен вычет: ", КомментарийВидаРасчета, ВычетПримененный, РасшифровкаВычета, , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"040");
						КонецЕсли;
					Иначе
						КомментарийВычета = РаботаССообщениями.КомментарийРасчета("Вычет за месяц не предоставлен:", КомментарийВидаРасчета, , , Перечисления.ВидыСообщений.ВажнаяИнформация, , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"040");	
						Если ДанныеИПН.ПризнакПрименениеВычета = 0 Тогда
							РаботаССообщениями.КомментарийРасчета("", КомментарийВычета, "Заявление на вычет не зарегистрировано", РасшифровкаВычета);
						КонецЕсли;
						Если ДанныеИПН.ПризнакФизЛицоНеРезидент <> 0 Тогда
							РасшифровкаГражданства = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьГражданствоФизЛица", МассивПараметровРасшифровки);
							РаботаССообщениями.КомментарийРасчета("", КомментарийВычета, "Лицо не является налоговым резидентом РК", РасшифровкаГражданства);
						КонецЕсли;
						Если ДанныеИПН.НормаДнейПоПятидневке < ДанныеИПН.НормаДнейПоПроизводственномуКалендарю / 2 Тогда
							КомментарийВычета = РаботаССообщениями.КомментарийРасчета("Отработано менее половины месяца по пятидневке:", КомментарийВычета);
							РаботаССообщениями.КомментарийРасчета("Рабочих дней: " + ДанныеИПН.НормаДнейПоПроизводственномуКалендарю, КомментарийВычета);
							РаботаССообщениями.КомментарийРасчета("Учитывается для вычета: " + ДанныеИПН.НормаДнейПоПятидневке, КомментарийВычета);
						КонецЕсли;
					КонецЕсли;

					// т.к в комментарий могут еще попасть сообщения о плановых налоговых вычетах (страховых, жилищных),
					// которые рассчитываются в документе "РасчетУдержанийРаботниковОрганизаций", то ниже следующим
					// комментариям назначаем порядок сообщения больший, чем "100" ("100" - это порядок сообщения для плановых вычетов)
					
					Если ДанныеИПН.ЛьготаЗаГод <> 0 Тогда
						
						КомментарийЛьготы = РаботаССообщениями.КомментарийРасчета("Предоставлена льгота: " + ЛьготаПримененная, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"200");
					
						Если ДанныеИПН.ПризнакЛьготаУчастникаВОВ <> 0 Тогда
							Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбУчастникеВОВФизЛица", МассивПараметровРасшифровки);
							РаботаССообщениями.КомментарийРасчета("", КомментарийЛьготы, "Является лицом, приравненным к участникам ВОВ", Расшифровка);
						КонецЕсли;
						Если ДанныеИПН.ПризнакЛьготаПоИнвалидности <> 0 Тогда
							Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбИнвалидностиФизЛица", МассивПараметровРасшифровки);
							Если ДанныеИПН.ЛьготаЗаГод > 90000000 Тогда
			 					РаботаССообщениями.КомментарийРасчета("", КомментарийЛьготы, "Является инвалидом I или II группы, льгота без ограничения дохода", Расшифровка);
			 				Иначе
			 					РаботаССообщениями.КомментарийРасчета("", КомментарийЛьготы, "Является инвалидом III группы, льгота до 27 МЗП: " + ДанныеИПН.ЛьготаЗаГод, Расшифровка);
			 					Если ДанныеИПН.РанееПримененнаяЛьгота <> 0 Тогда
			 						РаботаССообщениями.КомментарийРасчета("Ранее уже предоставлена льгота " + ДанныеИПН.РанееПримененнаяЛьгота, КомментарийЛьготы);
			 					КонецЕсли;
			 				КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					РаботаССообщениями.КомментарийРасчета("Облагаемый доход: " + ДанныеИПН.ОблагаемаяСумма, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"300");
					РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахИПНиСН.ПолучитьФормуСписка().Открыть();");
					РаботаССообщениями.КомментарийРасчета("Процент ИПН: ", КомментарийВидаРасчета, ДанныеИПН.ПроцентСтавки, РасшифровкаСтавки, , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"400");
					Если ДанныеИПН.РанееНалогИсчисленный <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("ИПН за месяц: " + ДанныеИПН.ИПНЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"500");
						РаботаССообщениями.КомментарийРасчета("Ранее исчисленный ИПН: " + ДанныеИПН.РанееНалогИсчисленный, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"600");
					КонецЕсли;
					
				КонецЕсли;
				
				РаботаССообщениями.КомментарийРасчета("Исчисленный ИПН: " + НалогИсчисленный, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"700");
			
			КонецЕсли;
			
		КонецЕсли;
		
		Если 	НалогИсчисленный = 0 и 
				ВычетПримененный = 0 и 
				ЛьготаПримененная = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.ФизЛицо                		= ДанныеИПН.ФизЛицо;
			Движение.СтруктурнаяЕдиница				= Организация;
			Движение.МесяцНалоговогоПериода    		= ДанныеИПН.Период;
			Движение.Организация            		= Организация;
			Движение.Налогоплательщик          		= Налогоплательщик;

			// Ресурсы
			Движение.Налог						= НалогИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеИПН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеИПН.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаИПН.Удалить(ДанныеИПН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеИПН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ПримененныйВычет				= ВычетПримененный;
		Строка.ПримененнаяЛьгота			= ЛьготаПримененная;
		Строка.МесяцНалоговогоПериода 		= ДанныеИПН.Период;
		
		// Запомним суммы для следующей итерации
		УжеИсчислили = УжеИсчислили + НалогИсчисленный;
		УжеПрименилиВычет = УжеПрименилиВычет + ВычетПримененный;
		УжеПрименилиЛьготу = УжеПрименилиЛьготу + ЛьготаПримененная;

	КонецЦикла;
	
	// заполним ИсчисленныйИПН
	Для Каждого Элемент Из РаботникиДляРасчетаИПН Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйИПН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйИПН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйИПН.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Налог, ПримененныйВычет, ПримененнаяЛьгота");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйИПН);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
			
			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Налог"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Налог");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымИПНДо2009()

// Заполняет набор записей по переданным данным расчета ИПН
//
// Параметры: 
//  НаборЗаписей - набор записей регистра ИПНРасчетыСБюджетом
//	ТаблицаДанныеИПН - таблица значений - данные расчета ИПН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымИПНПосле2009(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина)
	
	// правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	СоответствиеСтавкиИПН = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода, ВидДохода");

	// строим список физлиц, по по которым считается ИПН
	РаботникиДляРасчетаИПН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;
			
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ВидДохода, МесяцНалоговогоПериода, ОблагаемаяБаза, ПримененныйВычет, ПримененнаяЛьгота, РазрешенныйВычет");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
				СтруктураСтроки.ОблагаемаяБаза = 0;
				СтруктураСтроки.ПримененныйВычет = 0;
				СтруктураСтроки.ПримененнаяЛьгота = 0;
				СтруктураСтроки.РазрешенныйВычет = 0;
			КонецЕсли;
			МассивСтрок.Добавить(СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета ИПН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	ТекущееФизЛицо = "";
	ВычетПримененныйВДанномРасчете = 0;
	РазрешенныйВычетВДанномРасчете = 0;
	ЛьготаПримененнаяВДанномРасчете = 0;
	ДоходыОтРаботодателя = Справочники.ВидыДоходов.ДоходыОтРаботодателя;
	
	Для Каждого ДанныеИПН Из ТаблицаДанныеИПН Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеИПН.Период);
	
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеИПН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ДанныеИПН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеИПН.Период, ПравилоОкругления);
		КонецЕсли;
	    СтруктураПоискаСтавкиИПН = Новый Структура("Период, ВидДохода, ПризнакФизЛицоНеРезидент", ДанныеИПН.Период, ДанныеИПН.ВидДохода, ДанныеИПН.ПризнакФизЛицоНеРезидент);
		// получим ставку ИПН
		ПроцентСтавки = СоответствиеСтавкиИПН[СтруктураПоискаСтавкиИПН];
		Если ПроцентСтавки = Неопределено Тогда
			ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуИПН(Налогоплательщик, ДанныеИПН.ВидДохода, ДанныеИПН.Период, ДанныеИПН.ПризнакФизЛицоНеРезидент);
			СоответствиеСтавкиИПН.Вставить(СтруктураПоискаСтавкиИПН, ПроцентСтавки);			
		КонецЕсли;
		
		// проверим заполненность необходимых реквизитов
		Если НЕ ЗначениеЗаполнено(ПроцентСтавки) Тогда
			РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахИПН.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не заполнено значение ставки индивидуального подоходного налога для вида доходов """ + ДанныеИПН.ВидДохода + """", РасшифровкаСтавки, -99);  // т.к. порядок сообщения для комментария ИПН=-100, то сообщения сразу выводим за ним
			БылаОшибка = Истина;
		КонецЕсли;                                                                                                                                             
		
		Если ДанныеИПН.РазмерМЗП = 0 Тогда
			РасшифровкаМЗП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не определен размер минимальной заработной платы", РасшифровкаМЗП, -98);
			БылаОшибка = Истина;
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизЛицо <> ДанныеИПН.ФизЛицо 
			ИЛИ НачалоГода(ДанныеИПН.Период) = НачалоМесяца(ДанныеИПН.Период) Тогда
			ТекущееФизЛицо = ДанныеИПН.ФизЛицо;
			ВычетПримененныйВДанномРасчете = 0;
			РазрешенныйВычетВДанномРасчете = 0;
			ЛьготаПримененнаяВДанномРасчете = 0;
		КонецЕсли;
		
		// расчет результата
		ОблагаемыйДоход = ДанныеИПН.ОблагаемыйДоход;
		
		// сумма невыбранной льготы
		
		// т.к. одно физлицо может присутствовать в нескольких документах расчета за один месяц, 
		// то определим "чистую" сумму льготы, приходящейся на прошлые месяцы
		ПримененнаяЛьготаЗаПрошлыеМесяцы = ДанныеИПН.ПримененнаяЛьготаЗаГод - ДанныеИПН.ПримененнаяЛьготаЗаМесяц;
		МаксимальноДопустимаяЛьгота = Макс(ДанныеИПН.ЛьготаПоДоходу - ДанныеИПН.ПримененнаяЛьготаНаПредыдущемМестеРаботы, 0);
		ОстатокЛьготы = Макс(МаксимальноДопустимаяЛьгота - ПримененнаяЛьготаЗаПрошлыеМесяцы - ЛьготаПримененнаяВДанномРасчете, 0);
		
		Если ОстатокЛьготы > 0 И ОблагаемыйДоход > 0 Тогда
			ЛьготаПримененная = Мин(ОблагаемыйДоход, ОстатокЛьготы) - ДанныеИПН.ПримененнаяЛьготаЗаМесяц;
		Иначе
			ЛьготаПримененная = 0;
		КонецЕсли;
		
		ЛьготаПримененнаяВДанномРасчете = ЛьготаПримененнаяВДанномРасчете + ЛьготаПримененная;
		
		ВычетПримененный = 0;
		РазрешенныйВычет = 0;
		
		// Вычеты применяем только для доходов, полученных от работодателя
		Если ДанныеИПН.ВидДохода = ДоходыОтРаботодателя Тогда
			// облагаемая часть дохода после применения льготы и вычета ОПВ
			ОблагаемаяСумма = ОблагаемыйДоход - ОстатокЛьготы - ДанныеИПН.ИсчисленныеВзносы;
			
			РазрешенныйВычетЗаПрошлыеМесяцы = ДанныеИПН.РазрешенныйВычетЗаГод - ДанныеИПН.РазрешенныйВычетЗаМесяц;
			РазрешенныйВычетЗаТекущийМесяц = ДанныеИПН.НалоговыйВычетЛичный + РазрешенныйВычетВДанномРасчете;
			РазрешенныйВычет = ДанныеИПН.НалоговыйВычетЛичный - ДанныеИПН.РазрешенныйВычетЗаМесяц;
			
			РазрешенныйВычетВДанномРасчете = РазрешенныйВычетВДанномРасчете + РазрешенныйВычет;
			
			ПрименныйВычетЗаТекущийМесяц = РазрешенныйВычетЗаПрошлыеМесяцы + РазрешенныйВычетЗаТекущийМесяц - (ДанныеИПН.ПримененныйВычетЗаГод - ДанныеИПН.ПримененныйВычетЗаМесяц) - ВычетПримененныйВДанномРасчете;		
			ВычетПримененный = ПрименныйВычетЗаТекущийМесяц;
			
			Если ОблагаемаяСумма >= 0 Тогда
				ВычетПримененный = Мин(ВычетПримененный, ОблагаемаяСумма);
			Иначе
				ВычетПримененный = 0;
			КонецЕсли;
			
			// если было несколько документов по расчету налога, то определяем остаток вычета для текущего документа
			ВычетПримененный = ВычетПримененный - ДанныеИПН.ПримененныйВычетЗаМесяц;
			
			ВычетПримененныйВДанномРасчете = ВычетПримененныйВДанномРасчете + ВычетПримененный;
			
			ОблагаемаяСумма = ОблагаемаяСумма - ПрименныйВычетЗаТекущийМесяц - ДанныеИПН.ПрочиеВычеты;
			
		Иначе // Если это не доходы от работодателя, то используем только льготы 
			// облагаемая часть дохода после применения льготы
			ОблагаемаяСумма = ОблагаемыйДоход - ОстатокЛьготы;
		КонецЕсли;
		
		НалогИсчисленныйЗаМесяц = Макс(ОблагаемаяСумма * ПроцентСтавки / 100, 0);
		
		// Округлим результат
		НалогИсчисленный 	= ОбщегоНазначения.ОкруглитьЧисло(НалогИсчисленныйЗаМесяц, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		ВычетПримененный 	= ОбщегоНазначения.ОкруглитьЧисло(ВычетПримененный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		ЛьготаПримененная 	= ОбщегоНазначения.ОкруглитьЧисло(ЛьготаПримененная, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);

		НалогИсчисленный = НалогИсчисленный - ДанныеИПН.РанееИсчисленныйНалог;
		
		ОблагаемаяБаза = Макс(ОблагаемаяСумма, 0) - ДанныеИПН.РанееИсчисленнаяОблагаемаяБаза;

		Если КомментироватьРасчет Тогда
		   
		   	Если ДанныеИПН.Период = ПериодРегистрации ИЛИ НалогИсчисленный <> 0 Тогда
		   	
				РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеИПН.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"000"); // "000" - первая строка с месяцем
				РаботаССообщениями.КомментарийРасчета("Вид дохода: " + ДанныеИПН.ВидДохода, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+ "001"); // "000" - первая строка с месяцем
			
				МассивПараметровРасшифровки = Новый Массив;
				МассивПараметровРасшифровки.Добавить(ДанныеИПН.ФизЛицо);
				
				РаботаССообщениями.КомментарийРасчета("Начислено доходов: " + ДанныеИПН.СуммаДоходаВсего, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"010");
				Если ДанныеИПН.СуммаНеоблагаемогоДохода <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Доходы, не подлежащие налогообложению: " + ДанныеИПН.СуммаНеоблагаемогоДохода, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"020");
				КонецЕсли;

				Если ДанныеИПН.ЛьготаПоДоходу <> 0 Тогда
					
					КомментарийЛьготы = РаботаССообщениями.КомментарийРасчета("Предоставлена льгота: " + ЛьготаПримененная, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"025");
				
					Если ДанныеИПН.ПрименяетсяЛьготаУчастникаВОВ Тогда
						Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбУчастникеВОВФизЛица", МассивПараметровРасшифровки);
						Если ПериодРегистрации >= '20100101' Тогда
							РаботаССообщениями.КомментарийРасчета("", КомментарийЛьготы, "Является лицом, приравненным к участникам ВОВ, льгота до 55 МЗП: " + ДанныеИПН.ЛьготаПоДоходу, Расшифровка);
						Иначе
							РаботаССообщениями.КомментарийРасчета("", КомментарийЛьготы, "Является лицом, приравненным к участникам ВОВ, льгота до 45 МЗП: " + ДанныеИПН.ЛьготаПоДоходу, Расшифровка);
						КонецЕсли;
					КонецЕсли;
					Если ДанныеИПН.ПрименяетсяЛьготаПоИнвалидности Тогда
						Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбИнвалидностиФизЛица", МассивПараметровРасшифровки);
						Если ПериодРегистрации >= '20100101' Тогда
							 РаботаССообщениями.КомментарийРасчета("", КомментарийЛьготы, "Является инвалидом I, II, III гр. (родителем инвалида, участником ВОВ), льгота до 55 МЗП: " + ДанныеИПН.ЛьготаПоДоходу, Расшифровка);
						Иначе
							Если НЕ (ДанныеИПН.ОтношениеКИнвалидности = Перечисления.ОтношениеКИнвалидности.Инвалид 
										И ДанныеИПН.ГруппаИнвалидности = "III") Тогда
								 РаботаССообщениями.КомментарийРасчета("", КомментарийЛьготы, "Является инвалидом I, II гр. (родителем инвалида, участником ВОВ), льгота до 45 МЗП: " + ДанныеИПН.ЛьготаПоДоходу, Расшифровка);
							Иначе
								 РаботаССообщениями.КомментарийРасчета("", КомментарийЛьготы, "Является инвалидом III гр., льгота до 27 МЗП: " + ДанныеИПН.ЛьготаПоДоходу, Расшифровка);
							КонецЕсли;			 				
						КонецЕсли;
					КонецЕсли;
					Если ДанныеИПН.ПримененнаяЛьготаЗаГод + ДанныеИПН.ПримененнаяЛьготаНаПредыдущемМестеРаботы <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("С нач. года ранее предоставленная льгота " + (ДанныеИПН.ПримененнаяЛьготаЗаГод + ДанныеИПН.ПримененнаяЛьготаНаПредыдущемМестеРаботы), КомментарийЛьготы);
					КонецЕсли;
				КонецЕсли;
				
				Если ДанныеИПН.ВидДохода = ДоходыОтРаботодателя Тогда
					РаботаССообщениями.КомментарийРасчета("ОПВ за месяц: " + ДанныеИПН.ИсчисленныеВзносы, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"030");
					
					РасшифровкаВычета = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьНалогиФизЛица", МассивПараметровРасшифровки);
					Если ДанныеИПН.НалоговыйВычетЛичный <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Разрешенный вычет: ", КомментарийВидаРасчета, ДанныеИПН.НалоговыйВычетЛичный, РасшифровкаВычета, , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"040");
						РаботаССообщениями.КомментарийРасчета("Предоставленный вычет: " + ВычетПримененный, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"041");
						Если ДанныеИПН.ПримененныйВычетЗаМесяц <> 0 Тогда
							РаботаССообщениями.КомментарийРасчета("Ранее предоставленный вычет: " + ДанныеИПН.ПримененныйВычетЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"042");
						КонецЕсли;
					Иначе
						КомментарийВычета = РаботаССообщениями.КомментарийРасчета("Вычет за месяц не предоставлен:", КомментарийВидаРасчета, , , Перечисления.ВидыСообщений.ВажнаяИнформация, , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"040");	
						Если ДанныеИПН.ПризнакПрименениеВычета = 0 Тогда
							РаботаССообщениями.КомментарийРасчета("", КомментарийВычета, "Заявление на вычет не зарегистрировано", РасшифровкаВычета);
						КонецЕсли;
						Если ДанныеИПН.ПризнакФизЛицоНеРезидент <> 0 Тогда
							РасшифровкаГражданства = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьГражданствоФизЛица", МассивПараметровРасшифровки);
							РаботаССообщениями.КомментарийРасчета("", КомментарийВычета, "Лицо не является налоговым резидентом РК", РасшифровкаГражданства);
						КонецЕсли;
						Если ДанныеИПН.КалендарныхДнейРаботы < 16 Тогда
							КомментарийВычета = РаботаССообщениями.КомментарийРасчета("Является работником менее 16 календарных дней: " + ДанныеИПН.КалендарныхДнейРаботы, КомментарийВычета);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				// т.к в комментарий могут еще попасть сообщения о плановых налоговых вычетах (страховых, жилищных),
				// которые рассчитываются в документе "РасчетУдержанийРаботниковОрганизаций", то нижеследующим
				// комментариям назначаем порядок сообщения больший, чем "100" ("100" - это порядок сообщения для плановых вычетов)				
				
				Если ДанныеИПН.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Объект исчисления ИПН за месяц: " + Макс(ОблагаемаяСумма, 0), КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"301");
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления ИПН: " + ДанныеИПН.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"302");
				КонецЕсли;
 				РаботаССообщениями.КомментарийРасчета("Объект исчисления ИПН: " + ОблагаемаяБаза, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"350");

				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахИПН.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.КомментарийРасчета("Процент ИПН: ", КомментарийВидаРасчета, ПроцентСтавки, РасшифровкаСтавки, , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"400");
				Если ДанныеИПН.РанееИсчисленныйНалог <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("ИПН за месяц: " + НалогИсчисленныйЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"500");
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный ИПН: " + ДанныеИПН.РанееИсчисленныйНалог, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"600");
				КонецЕсли;
					
				РаботаССообщениями.КомментарийРасчета("Исчисленный ИПН: " + НалогИсчисленный, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"700");

			КонецЕсли;
				
		КонецЕсли;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда 
			
			Если	НалогИсчисленный = 0 И
					ВычетПримененный = 0 И 
					ЛьготаПримененная = 0 И
					РазрешенныйВычет = 0 И
					ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.ФизЛицо                		= ДанныеИПН.ФизЛицо;
			Движение.СтруктурнаяЕдиница				= Организация;
			Движение.МесяцНалоговогоПериода    		= ДанныеИПН.Период;
			Движение.Организация            		= Организация;
			Движение.Налогоплательщик          		= Налогоплательщик;

			// Ресурсы
			Движение.Налог						= НалогИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеИПН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеИПН.Период;
			СтруктураПоиска.ВидДохода = ДанныеИПН.ВидДохода;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаИПН.Удалить(ДанныеИПН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеИПН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.ПримененныйВычет				= ВычетПримененный;
		Строка.ПримененнаяЛьгота			= ЛьготаПримененная;
		Строка.РазрешенныйВычет				= РазрешенныйВычет;
		Строка.МесяцНалоговогоПериода 		= ДанныеИПН.Период;
		Строка.ВидДохода			 		= ДанныеИПН.ВидДохода;
		
	КонецЦикла;
	
	// заполним ИсчисленныйИПН
	Для Каждого Элемент Из РаботникиДляРасчетаИПН Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйИПН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйИПН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйИПН.Свернуть("ФизЛицо, МесяцНалоговогоПериода, ВидДохода", "Налог, ОблагаемаяБаза, ПримененныйВычет, ПримененнаяЛьгота, РазрешенныйВычет");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйИПН);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
			
			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Налог"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Налог");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымИПНПосле2009()

// Заполняет набор записей по переданным данным расчета ИПН
//
// Параметры: 
//  НаборЗаписей - набор записей регистра ИПНРасчетыСБюджетом
//	ТаблицаДанныеИПН - таблица значений - данные расчета ИПН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымИПНПосле2017(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина)
	
	// правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	СоответствиеСтавкиИПН = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода, ВидДохода");

	// строим список физлиц, по по которым считается ИПН
	РаботникиДляРасчетаИПН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;
			
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ВидДохода, МесяцНалоговогоПериода, ОблагаемаяБаза, ПримененныйВычет, ПримененнаяЛьгота, РазрешенныйВычет");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
				СтруктураСтроки.ОблагаемаяБаза = 0;
				СтруктураСтроки.ПримененныйВычет = 0;
				СтруктураСтроки.ПримененнаяЛьгота = 0;
				СтруктураСтроки.РазрешенныйВычет = 0;
			КонецЕсли;
			МассивСтрок.Добавить(СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета ИПН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	ТекущееФизЛицо = "";
	ВычетПримененныйВДанномРасчете = 0;
	РазрешенныйВычетВДанномРасчете = 0;
	ЛьготаПримененнаяВДанномРасчете = 0;
	ДоходыОтРаботодателя = Справочники.ВидыДоходов.ДоходыОтРаботодателя;
	
	Для Каждого ДанныеИПН Из ТаблицаДанныеИПН Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеИПН.Период);
	
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеИПН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ДанныеИПН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеИПН.Период, ПравилоОкругления);
		КонецЕсли;
	    СтруктураПоискаСтавкиИПН = Новый Структура("Период, ВидДохода, ПризнакФизЛицоНеРезидент", ДанныеИПН.Период, ДанныеИПН.ВидДохода, ДанныеИПН.ПризнакФизЛицоНеРезидент);
		// получим ставку ИПН
		ПроцентСтавки = СоответствиеСтавкиИПН[СтруктураПоискаСтавкиИПН];
		Если ПроцентСтавки = Неопределено Тогда
			ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуИПН(Налогоплательщик, ДанныеИПН.ВидДохода, ДанныеИПН.Период, ДанныеИПН.ПризнакФизЛицоНеРезидент);
			СоответствиеСтавкиИПН.Вставить(СтруктураПоискаСтавкиИПН, ПроцентСтавки);			
		КонецЕсли;
		
		// проверим заполненность необходимых реквизитов
		Если НЕ ЗначениеЗаполнено(ПроцентСтавки) Тогда
			РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахИПН.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не заполнено значение ставки индивидуального подоходного налога для вида доходов """ + ДанныеИПН.ВидДохода + """", РасшифровкаСтавки, -99);  // т.к. порядок сообщения для комментария ИПН=-100, то сообщения сразу выводим за ним
			БылаОшибка = Истина;
		КонецЕсли;                                                                                                                                             
		
		Если ДанныеИПН.РазмерМЗП = 0 Тогда
			РасшифровкаМЗП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не определен размер минимальной заработной платы", РасшифровкаМЗП, -98);
			БылаОшибка = Истина;
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизЛицо <> ДанныеИПН.ФизЛицо 
			ИЛИ НачалоГода(ДанныеИПН.Период) = НачалоМесяца(ДанныеИПН.Период) Тогда
			ТекущееФизЛицо = ДанныеИПН.ФизЛицо;
			ВычетПримененныйВДанномРасчете = 0;
			РазрешенныйВычетВДанномРасчете = 0;
			ЛьготаПримененнаяВДанномРасчете = 0;
		КонецЕсли;
		
		// расчет результата
		ОблагаемыйДоход = ДанныеИПН.ОблагаемыйДоход;
		
		// сумма невыбранной льготы
		
		// т.к. одно физлицо может присутствовать в нескольких документах расчета за один месяц, 
		// то определим "чистую" сумму льготы, приходящейся на прошлые месяцы
		ПримененнаяЛьготаЗаПрошлыеМесяцы = ДанныеИПН.ПримененнаяЛьготаЗаГод - ДанныеИПН.ПримененнаяЛьготаЗаМесяц;
		МаксимальноДопустимаяЛьгота = Макс(ДанныеИПН.ЛьготаПоДоходу - ДанныеИПН.ПримененнаяЛьготаНаПредыдущемМестеРаботы, 0);
		ОстатокЛьготы = Макс(МаксимальноДопустимаяЛьгота - ПримененнаяЛьготаЗаПрошлыеМесяцы - ЛьготаПримененнаяВДанномРасчете, 0);
		
		Если ОстатокЛьготы > 0 И ОблагаемыйДоход > 0 Тогда
			ЛьготаПримененная = Мин(ОблагаемыйДоход, ОстатокЛьготы) - ДанныеИПН.ПримененнаяЛьготаЗаМесяц;
		Иначе
			ЛьготаПримененная = 0;
		КонецЕсли;
		
		ЛьготаПримененнаяВДанномРасчете = ЛьготаПримененнаяВДанномРасчете + ЛьготаПримененная;
		
		ВычетПримененный = 0;
		РазрешенныйВычет = 0;
		
		// Вычеты применяем только для доходов, полученных от работодателя
		Если ДанныеИПН.ВидДохода = ДоходыОтРаботодателя Тогда
			// облагаемая часть дохода после применения льготы и вычета ОПВ
			ОблагаемаяСумма = ОблагаемыйДоход - ОстатокЛьготы - ДанныеИПН.ИсчисленныеВзносы;
			
			РазрешенныйВычетЗаПрошлыеМесяцы = ДанныеИПН.РазрешенныйВычетЗаГод - ДанныеИПН.РазрешенныйВычетЗаМесяц;
			РазрешенныйВычетЗаТекущийМесяц = ДанныеИПН.НалоговыйВычетЛичный + РазрешенныйВычетВДанномРасчете;
			РазрешенныйВычет = ДанныеИПН.НалоговыйВычетЛичный - ДанныеИПН.РазрешенныйВычетЗаМесяц;
			
			РазрешенныйВычетВДанномРасчете = РазрешенныйВычетВДанномРасчете + РазрешенныйВычет;
			
			ПрименныйВычетЗаТекущийМесяц = РазрешенныйВычетЗаПрошлыеМесяцы + РазрешенныйВычетЗаТекущийМесяц - (ДанныеИПН.ПримененныйВычетЗаГод - ДанныеИПН.ПримененныйВычетЗаМесяц) - ВычетПримененныйВДанномРасчете;		
			ВычетПримененный = ПрименныйВычетЗаТекущийМесяц;
			
			Если ОблагаемаяСумма >= 0 Тогда
				ВычетПримененный = Мин(ВычетПримененный, ОблагаемаяСумма);
			Иначе
				ВычетПримененный = 0;
			КонецЕсли;
			
			// если было несколько документов по расчету налога, то определяем остаток вычета для текущего документа
			ВычетПримененный = ВычетПримененный - ДанныеИПН.ПримененныйВычетЗаМесяц;
			
			ВычетПримененныйВДанномРасчете = ВычетПримененныйВДанномРасчете + ВычетПримененный;
			
			ОблагаемаяСумма = ОблагаемаяСумма - ПрименныйВычетЗаТекущийМесяц - ДанныеИПН.ИсчисленныеВзносыОСМС - ДанныеИПН.ПрочиеВычеты;
			
		Иначе // Если это не доходы от работодателя, то используем только льготы 
			// облагаемая часть дохода после применения льготы
			ОблагаемаяСумма = ОблагаемыйДоход - ОстатокЛьготы - ДанныеИПН.ИсчисленныеВзносыОСМС;
		КонецЕсли;
		
		НалогИсчисленныйЗаМесяц = Макс(ОблагаемаяСумма * ПроцентСтавки / 100, 0);
		
		// Округлим результат
		НалогИсчисленный 	= ОбщегоНазначения.ОкруглитьЧисло(НалогИсчисленныйЗаМесяц, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		ВычетПримененный 	= ОбщегоНазначения.ОкруглитьЧисло(ВычетПримененный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		ЛьготаПримененная 	= ОбщегоНазначения.ОкруглитьЧисло(ЛьготаПримененная, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);

		НалогИсчисленный = НалогИсчисленный - ДанныеИПН.РанееИсчисленныйНалог;
		
		ОблагаемаяБаза = Макс(ОблагаемаяСумма, 0) - ДанныеИПН.РанееИсчисленнаяОблагаемаяБаза;

		Если КомментироватьРасчет Тогда
		   
		   	Если ДанныеИПН.Период = ПериодРегистрации ИЛИ НалогИсчисленный <> 0 Тогда
		   	
				РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеИПН.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"000"); // "000" - первая строка с месяцем
				РаботаССообщениями.КомментарийРасчета("Вид дохода: " + ДанныеИПН.ВидДохода, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+ "001"); // "000" - первая строка с месяцем
			
				МассивПараметровРасшифровки = Новый Массив;
				МассивПараметровРасшифровки.Добавить(ДанныеИПН.ФизЛицо);
				
				РаботаССообщениями.КомментарийРасчета("Начислено доходов: " + ДанныеИПН.СуммаДоходаВсего, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"010");
				Если ДанныеИПН.СуммаНеоблагаемогоДохода <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Доходы, не подлежащие налогообложению: " + ДанныеИПН.СуммаНеоблагаемогоДохода, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"020");
				КонецЕсли;

				Если ДанныеИПН.ЛьготаПоДоходу <> 0 Тогда
					
					КомментарийЛьготы = РаботаССообщениями.КомментарийРасчета("Предоставлена льгота: " + ЛьготаПримененная, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"025");
				
					Если ДанныеИПН.ПрименяетсяЛьготаУчастникаВОВ Тогда
						Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбУчастникеВОВФизЛица", МассивПараметровРасшифровки);
						Если ПериодРегистрации >= '20100101' Тогда
							РаботаССообщениями.КомментарийРасчета("", КомментарийЛьготы, "Является лицом, приравненным к участникам ВОВ, льгота до 55 МЗП: " + ДанныеИПН.ЛьготаПоДоходу, Расшифровка);
						Иначе
							РаботаССообщениями.КомментарийРасчета("", КомментарийЛьготы, "Является лицом, приравненным к участникам ВОВ, льгота до 45 МЗП: " + ДанныеИПН.ЛьготаПоДоходу, Расшифровка);
						КонецЕсли;
					КонецЕсли;
					Если ДанныеИПН.ПрименяетсяЛьготаПоИнвалидности Тогда
						Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбИнвалидностиФизЛица", МассивПараметровРасшифровки);
						Если ПериодРегистрации >= '20100101' Тогда
							 РаботаССообщениями.КомментарийРасчета("", КомментарийЛьготы, "Является инвалидом I, II, III гр. (родителем инвалида, участником ВОВ), льгота до 55 МЗП: " + ДанныеИПН.ЛьготаПоДоходу, Расшифровка);
						Иначе
							Если НЕ (ДанныеИПН.ОтношениеКИнвалидности = Перечисления.ОтношениеКИнвалидности.Инвалид 
										И ДанныеИПН.ГруппаИнвалидности = "III") Тогда
								 РаботаССообщениями.КомментарийРасчета("", КомментарийЛьготы, "Является инвалидом I, II гр. (родителем инвалида, участником ВОВ), льгота до 45 МЗП: " + ДанныеИПН.ЛьготаПоДоходу, Расшифровка);
							Иначе
								 РаботаССообщениями.КомментарийРасчета("", КомментарийЛьготы, "Является инвалидом III гр., льгота до 27 МЗП: " + ДанныеИПН.ЛьготаПоДоходу, Расшифровка);
							КонецЕсли;			 				
						КонецЕсли;
					КонецЕсли;
					Если ДанныеИПН.ПримененнаяЛьготаЗаГод + ДанныеИПН.ПримененнаяЛьготаНаПредыдущемМестеРаботы <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("С нач. года ранее предоставленная льгота " + (ДанныеИПН.ПримененнаяЛьготаЗаГод + ДанныеИПН.ПримененнаяЛьготаНаПредыдущемМестеРаботы), КомментарийЛьготы);
					КонецЕсли;
				КонецЕсли;
				
				Если ДанныеИПН.ВидДохода = ДоходыОтРаботодателя Тогда
					РаботаССообщениями.КомментарийРасчета("ОПВ за месяц: " + ДанныеИПН.ИсчисленныеВзносы, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"030");
					
					РасшифровкаВычета = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьНалогиФизЛица", МассивПараметровРасшифровки);
					Если ДанныеИПН.НалоговыйВычетЛичный <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Разрешенный вычет: ", КомментарийВидаРасчета, ДанныеИПН.НалоговыйВычетЛичный, РасшифровкаВычета, , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"040");
						РаботаССообщениями.КомментарийРасчета("Предоставленный вычет: " + ВычетПримененный, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"041");
						Если ДанныеИПН.ПримененныйВычетЗаМесяц <> 0 Тогда
							РаботаССообщениями.КомментарийРасчета("Ранее предоставленный вычет: " + ДанныеИПН.ПримененныйВычетЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"042");
						КонецЕсли;
					Иначе
						КомментарийВычета = РаботаССообщениями.КомментарийРасчета("Вычет за месяц не предоставлен:", КомментарийВидаРасчета, , , Перечисления.ВидыСообщений.ВажнаяИнформация, , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"040");	
						Если ДанныеИПН.ПризнакПрименениеВычета = 0 Тогда
							РаботаССообщениями.КомментарийРасчета("", КомментарийВычета, "Заявление на вычет не зарегистрировано", РасшифровкаВычета);
						КонецЕсли;
						Если ДанныеИПН.ПризнакФизЛицоНеРезидент <> 0 Тогда
							РасшифровкаГражданства = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьГражданствоФизЛица", МассивПараметровРасшифровки);
							РаботаССообщениями.КомментарийРасчета("", КомментарийВычета, "Лицо не является налоговым резидентом РК", РасшифровкаГражданства);
						КонецЕсли;
						Если ДанныеИПН.КалендарныхДнейРаботы < 16 Тогда
							КомментарийВычета = РаботаССообщениями.КомментарийРасчета("Является работником менее 16 календарных дней: " + ДанныеИПН.КалендарныхДнейРаботы, КомментарийВычета);
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;

				РаботаССообщениями.КомментарийРасчета("Взносы ОСМС за месяц: " + ДанныеИПН.ИсчисленныеВзносыОСМС, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"043");

				// т.к в комментарий могут еще попасть сообщения о плановых налоговых вычетах (страховых, жилищных),
				// которые рассчитываются в документе "РасчетУдержанийРаботниковОрганизаций", то нижеследующим
				// комментариям назначаем порядок сообщения больший, чем "100" ("100" - это порядок сообщения для плановых вычетов)				
				
				Если ДанныеИПН.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Объект исчисления ИПН за месяц: " + Макс(ОблагаемаяСумма, 0), КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"301");
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления ИПН: " + ДанныеИПН.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"302");
				КонецЕсли;
 				РаботаССообщениями.КомментарийРасчета("Объект исчисления ИПН: " + ОблагаемаяБаза, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"350");

				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахИПН.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.КомментарийРасчета("Процент ИПН: ", КомментарийВидаРасчета, ПроцентСтавки, РасшифровкаСтавки, , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"400");
				Если ДанныеИПН.РанееИсчисленныйНалог <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("ИПН за месяц: " + НалогИсчисленныйЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"500");
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный ИПН: " + ДанныеИПН.РанееИсчисленныйНалог, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"600");
				КонецЕсли;
					
				РаботаССообщениями.КомментарийРасчета("Исчисленный ИПН: " + НалогИсчисленный, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"700");

			КонецЕсли;
				
		КонецЕсли;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда 
			
			Если	НалогИсчисленный = 0 И
					ВычетПримененный = 0 И 
					ЛьготаПримененная = 0 И
					РазрешенныйВычет = 0 И
					ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.ФизЛицо                		= ДанныеИПН.ФизЛицо;
			Движение.СтруктурнаяЕдиница				= Организация;
			Движение.МесяцНалоговогоПериода    		= ДанныеИПН.Период;
			Движение.Организация            		= Организация;
			Движение.Налогоплательщик          		= Налогоплательщик;

			// Ресурсы
			Движение.Налог						= НалогИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеИПН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеИПН.Период;
			СтруктураПоиска.ВидДохода = ДанныеИПН.ВидДохода;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаИПН.Удалить(ДанныеИПН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеИПН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.ПримененныйВычет				= ВычетПримененный;
		Строка.ПримененнаяЛьгота			= ЛьготаПримененная;
		Строка.РазрешенныйВычет				= РазрешенныйВычет;
		Строка.МесяцНалоговогоПериода 		= ДанныеИПН.Период;
		Строка.ВидДохода			 		= ДанныеИПН.ВидДохода;
		
	КонецЦикла;
	
	// заполним ИсчисленныйИПН
	Для Каждого Элемент Из РаботникиДляРасчетаИПН Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйИПН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйИПН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйИПН.Свернуть("ФизЛицо, МесяцНалоговогоПериода, ВидДохода", "Налог, ОблагаемаяБаза, ПримененныйВычет, ПримененнаяЛьгота, РазрешенныйВычет");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйИПН);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
			
			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Налог"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Налог");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымИПНПосле2009()

// Заполняет набор записей по переданным данным расчета ИПН
//
// Параметры: 
//  НаборЗаписей - набор записей регистра ИПНРасчетыСБюджетом
//	ТаблицаДанныеИПН - таблица значений - данные расчета ИПН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымИПНПосле2018(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина)
	
	// правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	СоответствиеСтавкиИПН = Новый Соответствие;
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода, ВидДохода");
	
	// строим список физлиц, по по которым считается ИПН
	РаботникиДляРасчетаИПН = Новый Соответствие;
	
	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;
			
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ВидДохода, ОблагаемаяБаза, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
			КонецЕсли;
			МассивСтрок.Добавить(СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета ИПН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	ТекущееФизЛицо = "";
	ДоходыОтРаботодателя = Справочники.ВидыДоходов.ДоходыОтРаботодателя;
	
	Для Каждого ДанныеИПН Из ТаблицаДанныеИПН Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеИПН.Период);
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеИПН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ДанныеИПН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеИПН.Период, ПравилоОкругления);
		КонецЕсли;
		СтруктураПоискаСтавкиИПН = Новый Структура("Период, ВидДохода, ПризнакФизЛицоНеРезидент", ДанныеИПН.Период, ДанныеИПН.ВидДохода, ДанныеИПН.ПризнакФизЛицоНеРезидент);
		// получим ставку ИПН
		ПроцентСтавки = СоответствиеСтавкиИПН[СтруктураПоискаСтавкиИПН];
		Если ПроцентСтавки = Неопределено Тогда
			ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуИПН(Налогоплательщик, ДанныеИПН.ВидДохода, ДанныеИПН.Период, ДанныеИПН.ПризнакФизЛицоНеРезидент);
			СоответствиеСтавкиИПН.Вставить(СтруктураПоискаСтавкиИПН, ПроцентСтавки);			
		КонецЕсли;
		
		// проверим заполненность необходимых реквизитов
		Если НЕ ЗначениеЗаполнено(ПроцентСтавки) Тогда
			РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахИПН.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не заполнено значение ставки индивидуального подоходного налога для вида доходов """ + ДанныеИПН.ВидДохода + """", РасшифровкаСтавки, -99);  // т.к. порядок сообщения для комментария ИПН=-100, то сообщения сразу выводим за ним
			БылаОшибка = Истина;
		КонецЕсли;                                                                                                                                             
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизЛицо <> ДанныеИПН.ФизЛицо 
			ИЛИ НачалоГода(ДанныеИПН.Период) = НачалоМесяца(ДанныеИПН.Период) Тогда
			ТекущееФизЛицо = ДанныеИПН.ФизЛицо;
		КонецЕсли;
		
		// расчет результата
		ОблагаемыйДоход = ДанныеИПН.ОблагаемыйДоход;
		
		// облагаемая часть дохода после применения вычетов
		ОблагаемаяСумма = ОблагаемыйДоход - ДанныеИПН.ПримененныеВычеты;
		
		НалогИсчисленныйЗаМесяц = Макс(ОблагаемаяСумма * ПроцентСтавки / 100, 0);
		
		// Округлим результат
		НалогИсчисленный 	= ОбщегоНазначения.ОкруглитьЧисло(НалогИсчисленныйЗаМесяц, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		НалогИсчисленный = НалогИсчисленный - ДанныеИПН.РанееИсчисленныйНалог;
		
		ОблагаемаяБаза = Макс(ОблагаемаяСумма, 0) - ДанныеИПН.РанееИсчисленнаяОблагаемаяБаза;
		
		Если КомментироватьРасчет Тогда
			
			Если ДанныеИПН.Период = ПериодРегистрации ИЛИ НалогИсчисленный <> 0 Тогда
				
				РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеИПН.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"000"); // "000" - первая строка с месяцем
				РаботаССообщениями.КомментарийРасчета("Вид дохода: " + ДанныеИПН.ВидДохода, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+ "001"); // "000" - первая строка с месяцем
				
				МассивПараметровРасшифровки = Новый Массив;
				МассивПараметровРасшифровки.Добавить(ДанныеИПН.ФизЛицо);
				
				РаботаССообщениями.КомментарийРасчета("Начислено доходов: " + ДанныеИПН.СуммаДоходаВсего, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"010");
				
				Если ДанныеИПН.ВидДохода = ДоходыОтРаботодателя Тогда
					
					РасшифровкаВычета = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьНалогиФизЛица", МассивПараметровРасшифровки);
					
					РаботаССообщениями.КомментарийРасчета("Предоставленный вычет: " + ДанныеИПН.ПримененныеВычетыВТекущемРасчете, КомментарийВидаРасчета, , , , ,Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"041");
					
				КонецЕсли;
				
				Если ДанныеИПН.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Объект исчисления ИПН за месяц: " + Макс(ОблагаемаяСумма, 0), КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"301");
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления ИПН: " + ДанныеИПН.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"302");
				КонецЕсли;
				РаботаССообщениями.КомментарийРасчета("Объект исчисления ИПН: " + ОблагаемаяБаза, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"350");
				
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахИПН.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.КомментарийРасчета("Процент ИПН: ", КомментарийВидаРасчета, ПроцентСтавки, РасшифровкаСтавки, , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"400");
				Если ДанныеИПН.РанееИсчисленныйНалог <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("ИПН за месяц: " + НалогИсчисленныйЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"500");
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный ИПН: " + ДанныеИПН.РанееИсчисленныйНалог, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"600");
				КонецЕсли;
				
				РаботаССообщениями.КомментарийРасчета("Исчисленный ИПН: " + НалогИсчисленный, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"700");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда 
			
			Если	ДанныеИПН.ПримененныеВычетыВТекущемРасчете = 0 И
				ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			Движение = НаборЗаписей.Добавить();
			
			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.ФизЛицо                		= ДанныеИПН.ФизЛицо;
			Движение.СтруктурнаяЕдиница				= Организация;
			Движение.МесяцНалоговогоПериода    		= ДанныеИПН.Период;
			Движение.Организация            		= Организация;
			Движение.Налогоплательщик          		= Налогоплательщик;
			
			// Ресурсы
			Движение.Налог						= НалогИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеИПН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеИПН.Период;
			СтруктураПоиска.ВидДохода = ДанныеИПН.ВидДохода;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаИПН.Удалить(ДанныеИПН.ФизЛицо);
		КонецЕсли;
		
		Строка.ФизЛицо 						= ДанныеИПН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеИПН.Период;
		Строка.ВидДохода			 		= ДанныеИПН.ВидДохода;
		
	КонецЦикла;
	
	// заполним ИсчисленныйИПН
	Для Каждого Элемент Из РаботникиДляРасчетаИПН Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйИПН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйИПН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйИПН.Свернуть("ФизЛицо, МесяцНалоговогоПериода, ВидДохода", "Налог, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйИПН);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
			
			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Налог"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Налог");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымИПНПосле2018()

// Заполняет набор записей по переданным данным расчета ИПН
//
// Параметры: 
//  НаборЗаписей - набор записей регистра ИПНРасчетыСБюджетом
//	ТаблицаДанныеИПН - таблица значений - данные расчета ИПН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымИПНПосле2019(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина)
	
	// правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	СоответствиеСтавкиИПН = Новый Соответствие;
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода, ВидДохода");
	
	// строим список физлиц, по по которым считается ИПН
	РаботникиДляРасчетаИПН = Новый Соответствие;
	
	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;
			
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ВидДохода, ОблагаемаяБаза, МесяцНалоговогоПериода, ПримененнаяЛьгота");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
				СтруктураСтроки.ПримененнаяЛьгота = 0;
			КонецЕсли;
			МассивСтрок.Добавить(СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета ИПН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	
	ДатаПримененияКорректировкиДохода = Дата(2019, 1, 1);

	ТекущееФизЛицо = "";
	ДоходыОтРаботодателя = Справочники.ВидыДоходов.ДоходыОтРаботодателя;
	
	Для Каждого ДанныеИПН Из ТаблицаДанныеИПН Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеИПН.Период);
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеИПН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ДанныеИПН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеИПН.Период, ПравилоОкругления);
		КонецЕсли;
		СтруктураПоискаСтавкиИПН = Новый Структура("Период, ВидДохода, ПризнакФизЛицоНеРезидент", ДанныеИПН.Период, ДанныеИПН.ВидДохода, ДанныеИПН.ПризнакФизЛицоНеРезидент);
		// получим ставку ИПН
		ПроцентСтавки = СоответствиеСтавкиИПН[СтруктураПоискаСтавкиИПН];
		Если ПроцентСтавки = Неопределено Тогда
			ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуИПН(Налогоплательщик, ДанныеИПН.ВидДохода, ДанныеИПН.Период, ДанныеИПН.ПризнакФизЛицоНеРезидент);
			СоответствиеСтавкиИПН.Вставить(СтруктураПоискаСтавкиИПН, ПроцентСтавки);			
		КонецЕсли;
		
		// проверим заполненность необходимых реквизитов
		Если НЕ ЗначениеЗаполнено(ПроцентСтавки) Тогда
			РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахИПН.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не заполнено значение ставки индивидуального подоходного налога для вида доходов """ + ДанныеИПН.ВидДохода + """", РасшифровкаСтавки, -99);  // т.к. порядок сообщения для комментария ИПН=-100, то сообщения сразу выводим за ним
			БылаОшибка = Истина;
		КонецЕсли;                                                                                                                                             
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизЛицо <> ДанныеИПН.ФизЛицо 
			ИЛИ НачалоГода(ДанныеИПН.Период) = НачалоМесяца(ДанныеИПН.Период) Тогда
			ТекущееФизЛицо = ДанныеИПН.ФизЛицо;
		КонецЕсли;
		
		// расчет результата
		ОблагаемыйДоход = ДанныеИПН.ОблагаемыйДоход;
		
		// облагаемая часть дохода после применения вычетов
		ОблагаемаяСумма = ОблагаемыйДоход - ДанныеИПН.ПримененныеВычеты;
		
		// определим размер применяемой корректировки дохода (корректировка дохода применяется после вычетов)
		Если ДанныеИПН.Период >= ДатаПримененияКорректировкиДохода 
			И ДанныеИПН.НеПрименятьКорректировкуПоПрочимПризнакам <> 1
			И ДанныеИПН.ВидДохода = ДоходыОтРаботодателя Тогда
			
			ОграничениеКорректировкиДохода25МРП = 25 * МесячныйРасчетныйПоказатель(ДанныеИПН.Период);
			
			// применим корректировку на облагаемую часть дохода после применения вычетов (Доходы - Вычеты), 
			// если сумма всего дохода (ДанныеИПН.СуммаДоходаВсего) не более 25 МРП
			Если ДанныеИПН.СуммаДоходаВсего <= ОграничениеКорректировкиДохода25МРП Тогда 
				ПрименяемаяКорректировка = Окр(ОблагаемаяСумма * 0.9, 2, РежимОкругления.Окр15как20);
			Иначе
				ПрименяемаяКорректировка = 0;
			КонецЕсли;			
			
		Иначе
			
			ПрименяемаяКорректировка = 0;
			
		КонецЕсли;

		ОблагаемаяСумма = ОблагаемаяСумма - ПрименяемаяКорректировка;
		
		НалогИсчисленныйЗаМесяц = Макс(ОблагаемаяСумма * ПроцентСтавки / 100, 0);
		
		// Округлим результат
		НалогИсчисленный 	= ОбщегоНазначения.ОкруглитьЧисло(НалогИсчисленныйЗаМесяц, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		НалогИсчисленный = НалогИсчисленный - ДанныеИПН.РанееИсчисленныйНалог;
		
		ОблагаемаяБаза = Макс(ОблагаемаяСумма, 0) - ДанныеИПН.РанееИсчисленнаяОблагаемаяБаза;
		
		ПрименяемаяКорректировка = ПрименяемаяКорректировка - ДанныеИПН.РанееПримененнаяЛьгота;

		Если КомментироватьРасчет Тогда
			
			Если ДанныеИПН.Период = ПериодРегистрации ИЛИ НалогИсчисленный <> 0 Тогда
				
				РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеИПН.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"000"); // "000" - первая строка с месяцем
				РаботаССообщениями.КомментарийРасчета("Вид дохода: " + ДанныеИПН.ВидДохода, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+ "001"); // "000" - первая строка с месяцем
				
				МассивПараметровРасшифровки = Новый Массив;
				МассивПараметровРасшифровки.Добавить(ДанныеИПН.ФизЛицо);
				
				РаботаССообщениями.КомментарийРасчета("Начислено доходов: " + ДанныеИПН.СуммаДоходаВсего, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"010");
				
				Если ДанныеИПН.ВидДохода = ДоходыОтРаботодателя Тогда
					
					РасшифровкаВычета = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьНалогиФизЛица", МассивПараметровРасшифровки);
					
					РаботаССообщениями.КомментарийРасчета("Предоставленный вычет: " + ДанныеИПН.ПримененныеВычетыВТекущемРасчете, КомментарийВидаРасчета, , , , ,Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"041");
					
				КонецЕсли;
				
				Если ДанныеИПН.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Объект исчисления ИПН за месяц: " + Макс(ОблагаемаяСумма, 0), КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"301");
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления ИПН: " + ДанныеИПН.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"302");
				КонецЕсли;
				РаботаССообщениями.КомментарийРасчета("Объект исчисления ИПН: " + ОблагаемаяБаза, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"350");
				
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахИПН.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.КомментарийРасчета("Процент ИПН: ", КомментарийВидаРасчета, ПроцентСтавки, РасшифровкаСтавки, , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"400");
				Если ДанныеИПН.РанееИсчисленныйНалог <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("ИПН за месяц: " + НалогИсчисленныйЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"500");
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный ИПН: " + ДанныеИПН.РанееИсчисленныйНалог, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"600");
				КонецЕсли;
				
				РаботаССообщениями.КомментарийРасчета("Исчисленный ИПН: " + НалогИсчисленный, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"700");
				
				Если ДанныеИПН.Период >= ДатаПримененияКорректировкиДохода Тогда
					
					РаботаССообщениями.КомментарийРасчета("Корректировка ИПН: " + ПрименяемаяКорректировка, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"800");
					
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда 
			
			Если	ДанныеИПН.ПримененныеВычетыВТекущемРасчете = 0 И
				ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			Движение = НаборЗаписей.Добавить();
			
			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.ФизЛицо                		= ДанныеИПН.ФизЛицо;
			Движение.СтруктурнаяЕдиница				= Организация;
			Движение.МесяцНалоговогоПериода    		= ДанныеИПН.Период;
			Движение.Организация            		= Организация;
			Движение.Налогоплательщик          		= Налогоплательщик;
			
			// Ресурсы
			Движение.Налог						= НалогИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеИПН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеИПН.Период;
			СтруктураПоиска.ВидДохода = ДанныеИПН.ВидДохода;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаИПН.Удалить(ДанныеИПН.ФизЛицо);
		КонецЕсли;
		
		Строка.ФизЛицо 						= ДанныеИПН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		
		Если ДанныеИПН.Период >= ДатаПримененияКорректировкиДохода
			И ПрименяемаяКорректировка <> 0 Тогда 
			Строка.ПримененнаяЛьгота		= ПрименяемаяКорректировка;
		КонецЕсли;
		
		Строка.МесяцНалоговогоПериода 		= ДанныеИПН.Период;
		Строка.ВидДохода			 		= ДанныеИПН.ВидДохода;
		
	КонецЦикла;
	
	// заполним ИсчисленныйИПН
	Для Каждого Элемент Из РаботникиДляРасчетаИПН Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйИПН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйИПН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйИПН.Свернуть("ФизЛицо, МесяцНалоговогоПериода, ВидДохода", "Налог, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйИПН);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
			
			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Налог"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Налог");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымИПНПосле2018()

// Заполняет набор записей по переданным данным расчета ИПН
//
// Параметры: 
//  НаборЗаписей - набор записей регистра ИПНРасчетыСБюджетом
//	ТаблицаДанныеИПН - таблица значений - данные расчета ИПН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымИПНПосле2020(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина)
	
	// правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	СоответствиеСтавкиИПН = Новый Соответствие;
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода, ВидДохода");
	
	// строим список физлиц, по по которым считается ИПН
	РаботникиДляРасчетаИПН = Новый Соответствие;
	
	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;
			
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ВидДохода, ОблагаемаяБаза, МесяцНалоговогоПериода, ПримененнаяЛьгота");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
				СтруктураСтроки.ПримененнаяЛьгота = 0;
			КонецЕсли;
			МассивСтрок.Добавить(СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета ИПН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	
	ДатаПримененияКорректировкиДохода = Дата(2019, 1, 1);

	ТекущееФизЛицо = "";
	ДоходыОтРаботодателя = Справочники.ВидыДоходов.ДоходыОтРаботодателя;
	
	Для Каждого ДанныеИПН Из ТаблицаДанныеИПН Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеИПН.Период);
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеИПН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ДанныеИПН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеИПН.Период, ПравилоОкругления);
		КонецЕсли;
		СтруктураПоискаСтавкиИПН = Новый Структура("Период, ВидДохода, ПризнакФизЛицоНеРезидент", ДанныеИПН.Период, ДанныеИПН.ВидДохода, ДанныеИПН.ПризнакФизЛицоНеРезидент);
		// получим ставку ИПН
		ПроцентСтавки = СоответствиеСтавкиИПН[СтруктураПоискаСтавкиИПН];
		Если ПроцентСтавки = Неопределено Тогда
			ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуИПН(Налогоплательщик, ДанныеИПН.ВидДохода, ДанныеИПН.Период, ДанныеИПН.ПризнакФизЛицоНеРезидент);
			СоответствиеСтавкиИПН.Вставить(СтруктураПоискаСтавкиИПН, ПроцентСтавки);			
		КонецЕсли;
		
		// проверим заполненность необходимых реквизитов
		//Если НЕ ЗначениеЗаполнено(ПроцентСтавки) Тогда
		//	РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахИПН.ПолучитьФормуСписка().Открыть();");
		//	РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не заполнено значение ставки индивидуального подоходного налога для вида доходов """ + ДанныеИПН.ВидДохода + """", РасшифровкаСтавки, -99);  // т.к. порядок сообщения для комментария ИПН=-100, то сообщения сразу выводим за ним
		//	БылаОшибка = Истина;
		//КонецЕсли;                                                                                                                                             
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизЛицо <> ДанныеИПН.ФизЛицо 
			ИЛИ НачалоГода(ДанныеИПН.Период) = НачалоМесяца(ДанныеИПН.Период) Тогда
			ТекущееФизЛицо = ДанныеИПН.ФизЛицо;
		КонецЕсли;
		
		// расчет результата
		ОблагаемыйДоход = ДанныеИПН.ОблагаемыйДоход;
		
		// облагаемая часть дохода после применения вычетов
		ОблагаемаяСумма = ОблагаемыйДоход - ДанныеИПН.ПримененныеВычеты;
		
		// определим размер применяемой корректировки дохода (корректировка дохода применяется после вычетов)
		Если ДанныеИПН.Период >= ДатаПримененияКорректировкиДохода 
			И ДанныеИПН.НеПрименятьКорректировкуПоПрочимПризнакам <> 1
			И ДанныеИПН.ВидДохода = ДоходыОтРаботодателя Тогда
			
			ОграничениеКорректировкиДохода25МРП = 25 * МесячныйРасчетныйПоказатель(НачалоГода(ДанныеИПН.Период));
			
			// применим корректировку на облагаемую часть дохода после применения вычетов (Доходы - Вычеты), 
			// если сумма всего дохода (ДанныеИПН.СуммаДоходаВсего) не более 25 МРП
			Если ДанныеИПН.СуммаДоходаВсего <= ОграничениеКорректировкиДохода25МРП Тогда 
				ПрименяемаяКорректировка = Окр(ОблагаемаяСумма * 0.9, 2, РежимОкругления.Окр15как20);
			Иначе
				ПрименяемаяКорректировка = 0;
			КонецЕсли;			
			
		Иначе
			
			ПрименяемаяКорректировка = 0;
			
		КонецЕсли;

		ОблагаемаяСумма = ОблагаемаяСумма - ПрименяемаяКорректировка;
		
		НалогИсчисленныйЗаМесяц = Макс(ОблагаемаяСумма * ПроцентСтавки / 100, 0);
		
		// Округлим результат
		НалогИсчисленный 	= ОбщегоНазначения.ОкруглитьЧисло(НалогИсчисленныйЗаМесяц, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		НалогИсчисленный = НалогИсчисленный - ДанныеИПН.РанееИсчисленныйНалог;
		
		ОблагаемаяБаза = Макс(ОблагаемаяСумма, 0) - ДанныеИПН.РанееИсчисленнаяОблагаемаяБаза;
		
		ПрименяемаяКорректировка = ПрименяемаяКорректировка - ДанныеИПН.РанееПримененнаяЛьгота;

		Если КомментироватьРасчет Тогда
			
			Если ДанныеИПН.Период = ПериодРегистрации ИЛИ НалогИсчисленный <> 0 Тогда
				
				РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеИПН.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"000"); // "000" - первая строка с месяцем
				РаботаССообщениями.КомментарийРасчета("Вид дохода: " + ДанныеИПН.ВидДохода, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+ "001"); // "000" - первая строка с месяцем
				
				МассивПараметровРасшифровки = Новый Массив;
				МассивПараметровРасшифровки.Добавить(ДанныеИПН.ФизЛицо);
				
				РаботаССообщениями.КомментарийРасчета("Начислено доходов: " + ДанныеИПН.СуммаДоходаВсего, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"010");
				
				Если ДанныеИПН.ВидДохода = ДоходыОтРаботодателя Тогда
					
					РасшифровкаВычета = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьНалогиФизЛица", МассивПараметровРасшифровки);
					
					РаботаССообщениями.КомментарийРасчета("Предоставленный вычет: " + ДанныеИПН.ПримененныеВычетыВТекущемРасчете, КомментарийВидаРасчета, , , , ,Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"041");
					
				КонецЕсли;
				
				Если ДанныеИПН.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Объект исчисления ИПН за месяц: " + Макс(ОблагаемаяСумма, 0), КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"301");
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления ИПН: " + ДанныеИПН.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"302");
				КонецЕсли;
				РаботаССообщениями.КомментарийРасчета("Объект исчисления ИПН: " + ОблагаемаяБаза, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"350");
				
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахИПН.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.КомментарийРасчета("Процент ИПН: ", КомментарийВидаРасчета, ПроцентСтавки, РасшифровкаСтавки, , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"400");
				Если ДанныеИПН.РанееИсчисленныйНалог <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("ИПН за месяц: " + НалогИсчисленныйЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"500");
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный ИПН: " + ДанныеИПН.РанееИсчисленныйНалог, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"600");
				КонецЕсли;
				
				РаботаССообщениями.КомментарийРасчета("Исчисленный ИПН: " + НалогИсчисленный, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+ДанныеИПН.ВидДохода.Код+"700");
				
				Если ДанныеИПН.Период >= ДатаПримененияКорректировкиДохода Тогда
					
					РаботаССообщениями.КомментарийРасчета("Сумма уменьшения облагаемого дохода (Корректировка ИПН): " + ПрименяемаяКорректировка, КомментарийВидаРасчета, , , , , Формат(ДанныеИПН.Период, "ДФ=ггггММдд")+"800");
					
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда 
			
			Если	ДанныеИПН.ПримененныеВычетыВТекущемРасчете = 0 И
				ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			Движение = НаборЗаписей.Добавить();
			
			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.ФизЛицо                		= ДанныеИПН.ФизЛицо;
			Движение.СтруктурнаяЕдиница				= Организация;
			Движение.МесяцНалоговогоПериода    		= ДанныеИПН.Период;
			Движение.Организация            		= Организация;
			Движение.Налогоплательщик          		= Налогоплательщик;
			
			// Ресурсы
			Движение.Налог						= НалогИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеИПН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеИПН.Период;
			СтруктураПоиска.ВидДохода = ДанныеИПН.ВидДохода;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаИПН.Удалить(ДанныеИПН.ФизЛицо);
		КонецЕсли;
		
		Строка.ФизЛицо 						= ДанныеИПН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		
		Если ДанныеИПН.Период >= ДатаПримененияКорректировкиДохода
			И ПрименяемаяКорректировка <> 0 Тогда 
			Строка.ПримененнаяЛьгота		= ПрименяемаяКорректировка;
		КонецЕсли;
		
		Строка.МесяцНалоговогоПериода 		= ДанныеИПН.Период;
		Строка.ВидДохода			 		= ДанныеИПН.ВидДохода;
		
	КонецЦикла;
	
	// заполним ИсчисленныйИПН
	Для Каждого Элемент Из РаботникиДляРасчетаИПН Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйИПН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйИПН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйИПН.Свернуть("ФизЛицо, МесяцНалоговогоПериода, ВидДохода", "Налог, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйИПН);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
			
			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Налог"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Налог");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымИПНПосле2018()

// Заполняет набор записей по переданным данным расчета вычетов ИПН
//
// Параметры: 
//  НаборЗаписей - набор записей регистра СведенияОбИсчисленииВычетовИПН
//	ТаблицаДанныеВычетовИПН - таблица значений - данные расчета вычетов ИПН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымВычетовИПН(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеВычетовИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
	Если ПериодРегистрации >= '20210101' Тогда	
		ЗаполнитьНаборЗаписейПоДаннымВычетовИПНПосле2021(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеВычетовИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, КомментарийВидаРасчета, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);	
    иначеЕсли ПериодРегистрации >= '20200101' Тогда
		ЗаполнитьНаборЗаписейПоДаннымВычетовИПНПосле2020(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеВычетовИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, КомментарийВидаРасчета, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
	ИначеЕсли ПериодРегистрации >= '20190101' Тогда	
		ЗаполнитьНаборЗаписейПоДаннымВычетовИПНПосле2019(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеВычетовИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, КомментарийВидаРасчета, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);	
	Иначе
		ЗаполнитьНаборЗаписейПоДаннымВычетовИПНДо2019(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеВычетовИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, КомментарийВидаРасчета, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымВычетовИПН()

// Заполняет набор записей по переданным данным расчета вычетов ИПН
//
// Параметры: 
//  НаборЗаписей - набор записей регистра СведенияОбИсчисленииВычетовИПН
//	ТаблицаДанныеВычетовИПН - таблица значений - данные расчета вычетов ИПН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымВычетовИПНДо2019(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеВычетовИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода, ВидВычета");

	// строим список физлиц, по по которым считается ИПН
	РаботникиДляРасчетаИПН = Новый Соответствие;
	МассивСтрок = Новый Массив;
	
	// Если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;

			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, МесяцНалоговогоПериода, ВидВычета, ВидДохода, РазрешенныйВычет, ПримененныйВычет");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета вычетов ИПН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	//
	БылаОшибка = Ложь;
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	ВычетыПримененныеВДанномРасчете = Новый Соответствие;
	ВычетыРазрешенныеВДанномРасчете = Новый Соответствие;
	
	// Для разных видов дохода фиксируем примененные вычеты в текущем расчете
	ВычетыПримененныеВДанномРасчетеПоВидамДохода = Новый ТаблицаЗначений;
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("Контрагент");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ФизЛицо");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ВидВычета");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ВидДохода");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ПримененныйВычет");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("РазрешенныйВычет");

	ТекущееФизЛицо = "";
	ТекущийМесяцНалоговогоПериода = "";
	ТекущийВидДохода = "";
	
	
	Для Каждого ДанныеВычетовИПН Из ТаблицаДанныеВычетовИПН Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеВычетовИПН.МесяцНалоговогоПериода);
		
		Если ДанныеВычетовИПН.РазмерМЗП = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не определен размер минимальной заработной платы'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
		
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизЛицо <> ДанныеВычетовИПН.ФизЛицо Тогда
			ТекущееФизЛицо = ДанныеВычетовИПН.ФизЛицо;
			ОблагаемыйДоход = ДанныеВычетовИПН.ОблагаемыйДоход;
			ВычетыПримененныеВДанномРасчете.Очистить();
			ВычетыРазрешенныеВДанномРасчете.Очистить();
			ТекущийМесяцНалоговогоПериода = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
			ТекущийВидДохода = ДанныеВычетовИПН.ВидДохода;
			
		ИначеЕсли ТекущийМесяцНалоговогоПериода <> НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода) 
			ИЛИ ТекущийВидДохода <> ДанныеВычетовИПН.ВидДохода  Тогда
			ОблагаемыйДоход = ДанныеВычетовИПН.ОблагаемыйДоход;
			ТекущийМесяцНалоговогоПериода = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
			ТекущийВидДохода = ДанныеВычетовИПН.ВидДохода;
			Если НачалоГода(ДанныеВычетовИПН.МесяцНалоговогоПериода) = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода) Тогда
				ВычетыПримененныеВДанномРасчете.Очистить();
				ВычетыРазрешенныеВДанномРасчете.Очистить();
			КонецЕсли;
		КонецЕсли;
		
	
		// Соберем остатки за прошлые периоды в пределах года
		РазрешенныйВычетЗаПрошлыеМесяцы = ДанныеВычетовИПН.РазрешенныйВычетСНачалаГода - ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериоде;
		ПримененныйВычетЗаПрошлыеМесяцы = ДанныеВычетовИПН.ПримененныйВычетСНачалаГода - ДанныеВычетовИПН.ПримененныйВычетВТекущемПериоде;
		ОстатокВычетаЗаПрошлыеМесяцы = РазрешенныйВычетЗаПрошлыеМесяцы - ПримененныйВычетЗаПрошлыеМесяцы;
		
		// Получим значения в текущем периоде
		Если ДанныеВычетовИПН.ВидВычета = Справочники.ВычетыИПН.НаОплатуМедицинскихУслуг 
				ИЛИ ДанныеВычетовИПН.ВидВычета = Справочники.ВычетыИПН.Стандартный75МЗПИнвалиды Тогда
			РазрешенныйВычетВТекущемПериоде = Мин(ДанныеВычетовИПН.СуммовойПределВычета 
													- РазрешенныйВычетЗаПрошлыеМесяцы
													- ?(ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0), 
													ДанныеВычетовИПН.РазмерВычета);
		Иначе 	
			РазрешенныйВычетВТекущемПериоде = ДанныеВычетовИПН.РазмерВычета;
		КонецЕсли;
		
		// Получим сумму вычетов примененную по другим видам доходов в данном расчете
		Если ТипЗнч(ДанныеВычетовИПН.ФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
			ФизЛицоРасчета = ДанныеВычетовИПН.ФизЛицо.ФизЛицо;
		Иначе 
			ФизЛицоРасчета = ДанныеВычетовИПН.ФизЛицо;
		КонецЕсли;

		МассивПримененныеВычеты = ВычетыПримененныеВДанномРасчетеПоВидамДохода.НайтиСтроки(Новый Структура("ФизЛицо, ВидВычета", ФизЛицоРасчета, ДанныеВычетовИПН.ВидВычета));		

		ПримененныйВычетВТекущемРасчетеПоДругимДоходам = 0;
		РазрешенныйВычетВТекущемРасчетеПоДругимДоходам = 0;
		Для Каждого СтрокаПримененныйВычет Из МассивПримененныеВычеты Цикл
			Если СтрокаПримененныйВычет.Контрагент <> ДанныеВычетовИПН.ФизЛицо Тогда
				ПримененныйВычетВТекущемРасчетеПоДругимДоходам = ПримененныйВычетВТекущемРасчетеПоДругимДоходам + СтрокаПримененныйВычет.ПримененныйВычет;
				РазрешенныйВычетВТекущемРасчетеПоДругимДоходам = РазрешенныйВычетВТекущемРасчетеПоДругимДоходам + СтрокаПримененныйВычет.РазрешенныйВычет;
			КонецЕсли;
		КонецЦикла;
		
		ПримененныйВычетВТекущемПериоде = Мин(ОблагаемыйДоход, ОстатокВычетаЗаПрошлыеМесяцы + РазрешенныйВычетВТекущемПериоде + ?(ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0)
										- ДанныеВычетовИПН.ПримененныйВычетВТекущемПериодеПоДругимДоходам - ПримененныйВычетВТекущемРасчетеПоДругимДоходам
										- ?(ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0));
		
		// Скорректируем остаток облагаемого дохода
		ОблагаемыйДоход = Макс(0, ОблагаемыйДоход - ПримененныйВычетВТекущемПериоде);
		
		// Получим значения в текущем расчете
		РазрешенныйВычетВТекущемРасчете = РазрешенныйВычетВТекущемПериоде - ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериоде - РазрешенныйВычетВТекущемРасчетеПоДругимДоходам;
		ПримененныйВычетВТекущемРасчете = ПримененныйВычетВТекущемПериоде - ДанныеВычетовИПН.ПримененныйВычетВТекущемПериоде + ДанныеВычетовИПН.ПримененныйВычетВТекущемПериодеПоДругимДоходам;
		
		// Зафиксируем результаты по значению текущего физлица расчета
		Если ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) = Неопределено Тогда
			ВычетыПримененныеВДанномРасчете.Вставить(ДанныеВычетовИПН.ВидВычета, ПримененныйВычетВТекущемРасчете);
		Иначе 
			ВычетыПримененныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] = ВычетыПримененныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] + ПримененныйВычетВТекущемРасчете;
		КонецЕсли;
		
		Если ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) = Неопределено Тогда 
			ВычетыРазрешенныеВДанномРасчете.Вставить(ДанныеВычетовИПН.ВидВычета, РазрешенныйВычетВТекущемРасчете);
		Иначе 
			ВычетыРазрешенныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] = ВычетыРазрешенныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] + РазрешенныйВычетВТекущемРасчете;
		КонецЕсли;
		
		// Зафиксируем результаты в целом по физлицу
		НоваяСтрокаПримененныеВычеты 					= ВычетыПримененныеВДанномРасчетеПоВидамДохода.Добавить();
		НоваяСтрокаПримененныеВычеты.Контрагент 		= ДанныеВычетовИПН.ФизЛицо;
		НоваяСтрокаПримененныеВычеты.ФизЛицо 			= ФизЛицоРасчета;
		НоваяСтрокаПримененныеВычеты.ВидВычета 			= ДанныеВычетовИПН.ВидВычета;
		НоваяСтрокаПримененныеВычеты.ВидДохода 			= ДанныеВычетовИПН.ВидДохода;
		НоваяСтрокаПримененныеВычеты.ПримененныйВычет 	= ПримененныйВычетВТекущемРасчете;
		НоваяСтрокаПримененныеВычеты.РазрешенныйВычет 	= РазрешенныйВычетВТекущемРасчете;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда 
			Если РазрешенныйВычетВТекущемРасчете = 0 И
					ПримененныйВычетВТекущемРасчете = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период							= НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
			
			// Измерения
			Движение.ФизическоеЛицо             	= ДанныеВычетовИПН.ФизЛицо;
			Движение.СтруктурнаяЕдиница				= Организация;
			Движение.ПериодРегистрации	    		= НачалоМесяца(ПериодРегистрации);
			Движение.Организация            		= Организация;
			Движение.Налогоплательщик          		= Налогоплательщик;
			Движение.ВидВычета		          		= ДанныеВычетовИПН.ВидВычета;
			Движение.ВидДохода		          		= ДанныеВычетовИПН.ВидДохода;

			// Ресурсы
			Движение.РазрешенныйВычет				= РазрешенныйВычетВТекущемРасчете;
			Движение.ПримененныйВычет				= ПримененныйВычетВТекущемРасчете;
			
		КонецЕсли;
		
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеВычетовИПН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеВычетовИПН.МесяцНалоговогоПериода;
			СтруктураПоиска.ВидВычета = ДанныеВычетовИПН.ВидВычета;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаИПН.Удалить(ДанныеВычетовИПН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеВычетовИПН.ФизЛицо;
		Строка.МесяцНалоговогоПериода 		= ДанныеВычетовИПН.МесяцНалоговогоПериода;
		Строка.ВидВычета					= ДанныеВычетовИПН.ВидВычета;
		Строка.ВидДохода					= ДанныеВычетовИПН.ВидДохода;
		Строка.РазрешенныйВычет				= РазрешенныйВычетВТекущемРасчете;
		Строка.ПримененныйВычет				= ПримененныйВычетВТекущемРасчете;
		
	КонецЦикла;
	
	// заполним ИсчисленныеВычетыИПН
	Для Каждого Элемент Из РаботникиДляРасчетаИПН Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеВычетыИПН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеВычетыИПН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеВычетыИПН.Свернуть("ФизЛицо, МесяцНалоговогоПериода, ВидВычета, ВидДохода", "РазрешенныйВычет, ПримененныйВычет");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеВычетыИПН);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "Период");
			
			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("РазрешенныйВычет"), ВРег(Колонка.Имя)) = 0 
					И Найти(ВРег("ПримененныйВычет"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "РазрешенныйВычет, ПримененныйВычет");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымВычетовИПН()

// Заполняет набор записей по переданным данным расчета вычетов ИПН
//
// Параметры: 
//  НаборЗаписей - набор записей регистра СведенияОбИсчисленииВычетовИПН
//	ТаблицаДанныеВычетовИПН - таблица значений - данные расчета вычетов ИПН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымВычетовИПНПосле2019(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеВычетовИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода, ВидВычета");

	// строим список физлиц, по по которым считается ИПН
	РаботникиДляРасчетаИПН = Новый Соответствие;
	МассивСтрок = Новый Массив;
	
	// Если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;

			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, МесяцНалоговогоПериода, ВидВычета, ВидДохода, РазрешенныйВычет, ПримененныйВычет");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета вычетов ИПН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	//
	БылаОшибка = Ложь;
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	ВычетыПримененныеВДанномРасчете = Новый Соответствие;
	ВычетыРазрешенныеВДанномРасчете = Новый Соответствие;
	
	// Для разных видов дохода фиксируем примененные вычеты в текущем расчете
	ВычетыПримененныеВДанномРасчетеПоВидамДохода = Новый ТаблицаЗначений;
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("Контрагент");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ФизЛицо");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ВидВычета");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ВидДохода");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ПримененныйВычет");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("РазрешенныйВычет");

	ТекущееФизЛицо = "";
	ТекущийМесяцНалоговогоПериода = "";
	ТекущийВидДохода = "";
	
	
	Для Каждого ДанныеВычетовИПН Из ТаблицаДанныеВычетовИПН Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеВычетовИПН.МесяцНалоговогоПериода);
		
		Если ДанныеВычетовИПН.РазмерМЗП = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не определен размер минимальной заработной платы'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
		
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизЛицо <> ДанныеВычетовИПН.ФизЛицо Тогда
			ТекущееФизЛицо = ДанныеВычетовИПН.ФизЛицо;
			ОблагаемыйДоход = ДанныеВычетовИПН.ОблагаемыйДоход;
			ВычетыПримененныеВДанномРасчете.Очистить();
			ВычетыРазрешенныеВДанномРасчете.Очистить();
			ТекущийМесяцНалоговогоПериода = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
			ТекущийВидДохода = ДанныеВычетовИПН.ВидДохода;
			
		ИначеЕсли ТекущийМесяцНалоговогоПериода <> НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода) 
			ИЛИ ТекущийВидДохода <> ДанныеВычетовИПН.ВидДохода  Тогда
			ОблагаемыйДоход = ДанныеВычетовИПН.ОблагаемыйДоход;
			ТекущийМесяцНалоговогоПериода = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
			ТекущийВидДохода = ДанныеВычетовИПН.ВидДохода;
			Если НачалоГода(ДанныеВычетовИПН.МесяцНалоговогоПериода) = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода) Тогда
				ВычетыПримененныеВДанномРасчете.Очистить();
				ВычетыРазрешенныеВДанномРасчете.Очистить();
			КонецЕсли;
		КонецЕсли;
		
	
		// Соберем остатки за прошлые периоды в пределах года
		РазрешенныйВычетЗаПрошлыеМесяцы = ДанныеВычетовИПН.РазрешенныйВычетСНачалаГода - ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериоде;
		ПримененныйВычетЗаПрошлыеМесяцы = ДанныеВычетовИПН.ПримененныйВычетСНачалаГода - ДанныеВычетовИПН.ПримененныйВычетВТекущемПериоде;
		ОстатокВычетаЗаПрошлыеМесяцы = РазрешенныйВычетЗаПрошлыеМесяцы - ПримененныйВычетЗаПрошлыеМесяцы;
		
		// Получим значения в текущем периоде
		Если ДанныеВычетовИПН.ВидВычета = Справочники.ВычетыИПН.НаОплатуМедицинскихУслуг 
				ИЛИ ДанныеВычетовИПН.ВидВычета = Справочники.ВычетыИПН.Стандартный75МЗПИнвалиды Тогда
			РазрешенныйВычетВТекущемПериоде = Мин(ДанныеВычетовИПН.СуммовойПределВычета 
													- РазрешенныйВычетЗаПрошлыеМесяцы
													- ?(ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0), 
													ДанныеВычетовИПН.РазмерВычета);
		Иначе 	
			РазрешенныйВычетВТекущемПериоде = ДанныеВычетовИПН.РазмерВычета;
		КонецЕсли;
		
		// Получим сумму вычетов примененную по другим видам доходов в данном расчете
		Если ТипЗнч(ДанныеВычетовИПН.ФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
			ФизЛицоРасчета = ДанныеВычетовИПН.ФизЛицо.ФизЛицо;
		Иначе 
			ФизЛицоРасчета = ДанныеВычетовИПН.ФизЛицо;
		КонецЕсли;

		МассивПримененныеВычеты = ВычетыПримененныеВДанномРасчетеПоВидамДохода.НайтиСтроки(Новый Структура("ФизЛицо, ВидВычета", ФизЛицоРасчета, ДанныеВычетовИПН.ВидВычета));		

		ПримененныйВычетВТекущемРасчетеПоДругимДоходам = 0;
		РазрешенныйВычетВТекущемРасчетеПоДругимДоходам = 0;
		Для Каждого СтрокаПримененныйВычет Из МассивПримененныеВычеты Цикл
			Если СтрокаПримененныйВычет.Контрагент <> ДанныеВычетовИПН.ФизЛицо Тогда
				// игнорируем ОПВ 
				Если ДанныеВычетовИПН.ВидВычета <> Справочники.ВычетыИПН.ВычетОПВ Тогда
					ПримененныйВычетВТекущемРасчетеПоДругимДоходам = ПримененныйВычетВТекущемРасчетеПоДругимДоходам + СтрокаПримененныйВычет.ПримененныйВычет;
					РазрешенныйВычетВТекущемРасчетеПоДругимДоходам = РазрешенныйВычетВТекущемРасчетеПоДругимДоходам + СтрокаПримененныйВычет.РазрешенныйВычет;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		ПримененныйВычетВТекущемПериоде = Мин(ОблагаемыйДоход, ОстатокВычетаЗаПрошлыеМесяцы + РазрешенныйВычетВТекущемПериоде + ?(ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0)
										- ДанныеВычетовИПН.ПримененныйВычетВТекущемПериодеПоДругимДоходам - ПримененныйВычетВТекущемРасчетеПоДругимДоходам
										- ?(ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0));
		
		// Скорректируем остаток облагаемого дохода
		ОблагаемыйДоход = Макс(0, ОблагаемыйДоход - ПримененныйВычетВТекущемПериоде);
		
		// Получим значения в текущем расчете
		РазрешенныйВычетВТекущемРасчете = РазрешенныйВычетВТекущемПериоде - ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериоде - РазрешенныйВычетВТекущемРасчетеПоДругимДоходам;
		ПримененныйВычетВТекущемРасчете = ПримененныйВычетВТекущемПериоде - ДанныеВычетовИПН.ПримененныйВычетВТекущемПериоде + ДанныеВычетовИПН.ПримененныйВычетВТекущемПериодеПоДругимДоходам;
		
		// Зафиксируем результаты по значению текущего физлица расчета
		Если ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) = Неопределено Тогда
			ВычетыПримененныеВДанномРасчете.Вставить(ДанныеВычетовИПН.ВидВычета, ПримененныйВычетВТекущемРасчете);
		Иначе 
			ВычетыПримененныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] = ВычетыПримененныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] + ПримененныйВычетВТекущемРасчете;
		КонецЕсли;
		
		Если ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) = Неопределено Тогда 
			ВычетыРазрешенныеВДанномРасчете.Вставить(ДанныеВычетовИПН.ВидВычета, РазрешенныйВычетВТекущемРасчете);
		Иначе 
			ВычетыРазрешенныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] = ВычетыРазрешенныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] + РазрешенныйВычетВТекущемРасчете;
		КонецЕсли;
		
		// Зафиксируем результаты в целом по физлицу
		НоваяСтрокаПримененныеВычеты 					= ВычетыПримененныеВДанномРасчетеПоВидамДохода.Добавить();
		НоваяСтрокаПримененныеВычеты.Контрагент 		= ДанныеВычетовИПН.ФизЛицо;
		НоваяСтрокаПримененныеВычеты.ФизЛицо 			= ФизЛицоРасчета;
		НоваяСтрокаПримененныеВычеты.ВидВычета 			= ДанныеВычетовИПН.ВидВычета;
		НоваяСтрокаПримененныеВычеты.ВидДохода 			= ДанныеВычетовИПН.ВидДохода;
		НоваяСтрокаПримененныеВычеты.ПримененныйВычет 	= ПримененныйВычетВТекущемРасчете;
		НоваяСтрокаПримененныеВычеты.РазрешенныйВычет 	= РазрешенныйВычетВТекущемРасчете;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда 
			Если РазрешенныйВычетВТекущемРасчете = 0 И
					ПримененныйВычетВТекущемРасчете = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период							= НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
			
			// Измерения
			Движение.ФизическоеЛицо             	= ДанныеВычетовИПН.ФизЛицо;
			Движение.СтруктурнаяЕдиница				= Организация;
			Движение.ПериодРегистрации	    		= НачалоМесяца(ПериодРегистрации);
			Движение.Организация            		= Организация;
			Движение.Налогоплательщик          		= Налогоплательщик;
			Движение.ВидВычета		          		= ДанныеВычетовИПН.ВидВычета;
			Движение.ВидДохода		          		= ДанныеВычетовИПН.ВидДохода;

			// Ресурсы
			Движение.РазрешенныйВычет				= РазрешенныйВычетВТекущемРасчете;
			Движение.ПримененныйВычет				= ПримененныйВычетВТекущемРасчете;
			
		КонецЕсли;
		
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеВычетовИПН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеВычетовИПН.МесяцНалоговогоПериода;
			СтруктураПоиска.ВидВычета = ДанныеВычетовИПН.ВидВычета;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаИПН.Удалить(ДанныеВычетовИПН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеВычетовИПН.ФизЛицо;
		Строка.МесяцНалоговогоПериода 		= ДанныеВычетовИПН.МесяцНалоговогоПериода;
		Строка.ВидВычета					= ДанныеВычетовИПН.ВидВычета;
		Строка.ВидДохода					= ДанныеВычетовИПН.ВидДохода;
		Строка.РазрешенныйВычет				= РазрешенныйВычетВТекущемРасчете;
		Строка.ПримененныйВычет				= ПримененныйВычетВТекущемРасчете;
		
	КонецЦикла;
	
	// заполним ИсчисленныеВычетыИПН
	Для Каждого Элемент Из РаботникиДляРасчетаИПН Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеВычетыИПН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеВычетыИПН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеВычетыИПН.Свернуть("ФизЛицо, МесяцНалоговогоПериода, ВидВычета, ВидДохода", "РазрешенныйВычет, ПримененныйВычет");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеВычетыИПН);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "Период");
			
			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("РазрешенныйВычет"), ВРег(Колонка.Имя)) = 0 
					И Найти(ВРег("ПримененныйВычет"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "РазрешенныйВычет, ПримененныйВычет");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымВычетовИПН()

// Заполняет набор записей по переданным данным расчета вычетов ИПН
//
// Параметры: 
//  НаборЗаписей - набор записей регистра СведенияОбИсчисленииВычетовИПН
//	ТаблицаДанныеВычетовИПН - таблица значений - данные расчета вычетов ИПН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымВычетовИПНПосле2020(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеВычетовИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода, ВидВычета");
	
	ПрименятьОПВиВОСМСДляГПХ = ПроведениеРасчетовПолныеПрава.ПрименятьВычетВОСМСДляФизическихЛицИГПХ(Организация, ПериодРегистрации);

	// строим список физлиц, по по которым считается ИПН
	РаботникиДляРасчетаИПН = Новый Соответствие;
	МассивСтрок = Новый Массив;
	
	// Если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;

			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, МесяцНалоговогоПериода, ВидВычета, ВидДохода, РазрешенныйВычет, ПримененныйВычет");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета вычетов ИПН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	//
	БылаОшибка = Ложь;
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	ВычетыПримененныеВДанномРасчете = Новый Соответствие;
	ВычетыРазрешенныеВДанномРасчете = Новый Соответствие;
	
	// Для разных видов дохода фиксируем примененные вычеты в текущем расчете
	ВычетыПримененныеВДанномРасчетеПоВидамДохода = Новый ТаблицаЗначений;
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("Контрагент");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ФизЛицо");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ВидВычета");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ВидДохода");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ПримененныйВычет");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("РазрешенныйВычет");

	ТекущееФизЛицо = "";
	ТекущийМесяцНалоговогоПериода = "";
	ТекущийВидДохода = "";
	
	
	Для Каждого ДанныеВычетовИПН Из ТаблицаДанныеВычетовИПН Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеВычетовИПН.МесяцНалоговогоПериода);
		
		Если ДанныеВычетовИПН.РазмерМЗП = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не определен размер минимальной заработной платы'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
		
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизЛицо <> ДанныеВычетовИПН.ФизЛицо Тогда
			ТекущееФизЛицо = ДанныеВычетовИПН.ФизЛицо;
			ОблагаемыйДоход = ДанныеВычетовИПН.ОблагаемыйДоход;
			ВычетыПримененныеВДанномРасчете.Очистить();
			ВычетыРазрешенныеВДанномРасчете.Очистить();
			ТекущийМесяцНалоговогоПериода = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
			ТекущийВидДохода = ДанныеВычетовИПН.ВидДохода;
			
		ИначеЕсли ТекущийМесяцНалоговогоПериода <> НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода) 
			ИЛИ ТекущийВидДохода <> ДанныеВычетовИПН.ВидДохода  Тогда
			ОблагаемыйДоход = ДанныеВычетовИПН.ОблагаемыйДоход;
			ТекущийМесяцНалоговогоПериода = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
			ТекущийВидДохода = ДанныеВычетовИПН.ВидДохода;
			Если НачалоГода(ДанныеВычетовИПН.МесяцНалоговогоПериода) = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода) Тогда
				ВычетыПримененныеВДанномРасчете.Очистить();
				ВычетыРазрешенныеВДанномРасчете.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		
		Если ДанныеВычетовИПН.ВидВычета = Справочники.ВычетыИПН.НаОплатуМедицинскихУслуг 
				ИЛИ ДанныеВычетовИПН.ВидВычета = Справочники.ВычетыИПН.Стандартный75МЗПИнвалиды Тогда
			РазрешенныйВычетЗаПрошлыеМесяцыПоДругимДоходам = ДанныеВычетовИПН.РазрешенныйВычетСНачалаГодаПоДругимДоходам;
			ПримененныйВычетЗаПрошлыеМесяцыПоДругимДоходам = ДанныеВычетовИПН.ПримененныйВычетСНачалаГодаПоДругимДоходам;
		Иначе
			РазрешенныйВычетЗаПрошлыеМесяцыПоДругимДоходам = 0;
			ПримененныйВычетЗаПрошлыеМесяцыПоДругимДоходам = 0;
		КонецЕсли;

		// Соберем остатки за прошлые периоды в пределах года
		РазрешенныйВычетЗаПрошлыеМесяцы = ДанныеВычетовИПН.РазрешенныйВычетСНачалаГода + РазрешенныйВычетЗаПрошлыеМесяцыПоДругимДоходам - ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериоде - ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериодеПоДругимДоходам;
		ПримененныйВычетЗаПрошлыеМесяцы = ДанныеВычетовИПН.ПримененныйВычетСНачалаГода + ПримененныйВычетЗаПрошлыеМесяцыПоДругимДоходам - ДанныеВычетовИПН.ПримененныйВычетВТекущемПериоде - ДанныеВычетовИПН.ПримененныйВычетВТекущемПериодеПоДругимДоходам;
		ОстатокВычетаЗаПрошлыеМесяцы = РазрешенныйВычетЗаПрошлыеМесяцы - ПримененныйВычетЗаПрошлыеМесяцы;
		
		// Получим значения в текущем периоде
		Если ДанныеВычетовИПН.ВидВычета = Справочники.ВычетыИПН.НаОплатуМедицинскихУслуг 
				ИЛИ ДанныеВычетовИПН.ВидВычета = Справочники.ВычетыИПН.Стандартный75МЗПИнвалиды Тогда
			РазрешенныйВычетВТекущемПериоде = Мин(ДанныеВычетовИПН.СуммовойПределВычета 
													- РазрешенныйВычетЗаПрошлыеМесяцы
													- ?(ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0), 
													ДанныеВычетовИПН.РазмерВычета);
			РазрешенныйВычетВТекущемПериодеПоДругимДоходам = ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериодеПоДругимДоходам;
			ПримененныйВычетВТекущемПериодеПоДругимДоходам = ДанныеВычетовИПН.ПримененныйВычетВТекущемПериодеПоДругимДоходам;
	
		Иначе 	
			РазрешенныйВычетВТекущемПериоде = ДанныеВычетовИПН.РазмерВычета;
			РазрешенныйВычетВТекущемПериодеПоДругимДоходам = 0;
			ПримененныйВычетВТекущемПериодеПоДругимДоходам = 0;
		КонецЕсли;
		
		// Получим сумму вычетов примененную по другим видам доходов в данном расчете
		Если ТипЗнч(ДанныеВычетовИПН.ФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
			ФизЛицоРасчета = ДанныеВычетовИПН.ФизЛицо.ФизЛицо;
		Иначе 
			ФизЛицоРасчета = ДанныеВычетовИПН.ФизЛицо;
		КонецЕсли;

		МассивПримененныеВычеты = ВычетыПримененныеВДанномРасчетеПоВидамДохода.НайтиСтроки(Новый Структура("ФизЛицо, ВидВычета", ФизЛицоРасчета, ДанныеВычетовИПН.ВидВычета));		

		ПримененныйВычетВТекущемРасчетеПоДругимДоходам = 0;
		РазрешенныйВычетВТекущемРасчетеПоДругимДоходам = 0;
		Для Каждого СтрокаПримененныйВычет Из МассивПримененныеВычеты Цикл
			Если СтрокаПримененныйВычет.Контрагент <> ДанныеВычетовИПН.ФизЛицо Тогда
				Если ДанныеВычетовИПН.ВидВычета <> Справочники.ВычетыИПН.ВычетВОСМС 
					И ДанныеВычетовИПН.ВидВычета <> Справочники.ВычетыИПН.ВычетОПВ Тогда
					ПримененныйВычетВТекущемРасчетеПоДругимДоходам = ПримененныйВычетВТекущемРасчетеПоДругимДоходам + СтрокаПримененныйВычет.ПримененныйВычет;
					РазрешенныйВычетВТекущемРасчетеПоДругимДоходам = РазрешенныйВычетВТекущемРасчетеПоДругимДоходам + СтрокаПримененныйВычет.РазрешенныйВычет;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ПримененныйВычетВТекущемПериоде = Мин(ОблагаемыйДоход, ОстатокВычетаЗаПрошлыеМесяцы + РазрешенныйВычетВТекущемПериоде + ?(ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0)
										- ПримененныйВычетВТекущемПериодеПоДругимДоходам - ПримененныйВычетВТекущемРасчетеПоДругимДоходам
										- ?(ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0));
		
		// Скорректируем остаток облагаемого дохода
		ОблагаемыйДоход = Макс(0, ОблагаемыйДоход - ПримененныйВычетВТекущемПериоде);
		
		// при сторнировании начислений предудущего месяца возникает ситуация, когда есть только сторнируемый облагаемый доход и вычет уходит в минус
		ПримененныйВычетВТекущемПериоде = Макс(0, ПримененныйВычетВТекущемПериоде);
		
		// Получим значения в текущем расчете
		РазрешенныйВычетВТекущемРасчете = РазрешенныйВычетВТекущемПериоде - ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериоде - РазрешенныйВычетВТекущемРасчетеПоДругимДоходам - РазрешенныйВычетВТекущемПериодеПоДругимДоходам;
		// ДанныеВычетовИПН.ПримененныйВычетВТекущемПериодеПоДругимДоходам не используем, тк теперь ограничение по виду дохода в выборе запроса 
		ПримененныйВычетВТекущемРасчете = ПримененныйВычетВТекущемПериоде - ДанныеВычетовИПН.ПримененныйВычетВТекущемПериоде;
		
		// Зафиксируем результаты по значению текущего физлица расчета
		Если ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) = Неопределено Тогда
			ВычетыПримененныеВДанномРасчете.Вставить(ДанныеВычетовИПН.ВидВычета, ПримененныйВычетВТекущемРасчете);
		Иначе 
			ВычетыПримененныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] = ВычетыПримененныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] + ПримененныйВычетВТекущемРасчете;
		КонецЕсли;
		
		Если ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) = Неопределено Тогда 
			ВычетыРазрешенныеВДанномРасчете.Вставить(ДанныеВычетовИПН.ВидВычета, РазрешенныйВычетВТекущемРасчете);
		Иначе 
			ВычетыРазрешенныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] = ВычетыРазрешенныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] + РазрешенныйВычетВТекущемРасчете;
		КонецЕсли;
		
		// Зафиксируем результаты в целом по физлицу
		НоваяСтрокаПримененныеВычеты 					= ВычетыПримененныеВДанномРасчетеПоВидамДохода.Добавить();
		НоваяСтрокаПримененныеВычеты.Контрагент 		= ДанныеВычетовИПН.ФизЛицо;
		НоваяСтрокаПримененныеВычеты.ФизЛицо 			= ФизЛицоРасчета;
		НоваяСтрокаПримененныеВычеты.ВидВычета 			= ДанныеВычетовИПН.ВидВычета;
		НоваяСтрокаПримененныеВычеты.ВидДохода 			= ДанныеВычетовИПН.ВидДохода;
		НоваяСтрокаПримененныеВычеты.ПримененныйВычет 	= ПримененныйВычетВТекущемРасчете;
		НоваяСтрокаПримененныеВычеты.РазрешенныйВычет 	= РазрешенныйВычетВТекущемРасчете;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда 
			Если РазрешенныйВычетВТекущемРасчете = 0 И
					ПримененныйВычетВТекущемРасчете = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период							= НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
			
			// Измерения
			Движение.ФизическоеЛицо             	= ДанныеВычетовИПН.ФизЛицо;
			Движение.СтруктурнаяЕдиница				= Организация;
			Движение.ПериодРегистрации	    		= НачалоМесяца(ПериодРегистрации);
			Движение.Организация            		= Организация;
			Движение.Налогоплательщик          		= Налогоплательщик;
			Движение.ВидВычета		          		= ДанныеВычетовИПН.ВидВычета;
			Движение.ВидДохода		          		= ДанныеВычетовИПН.ВидДохода;

			// Ресурсы
			Движение.РазрешенныйВычет				= РазрешенныйВычетВТекущемРасчете;
			Движение.ПримененныйВычет				= ПримененныйВычетВТекущемРасчете;
			
		КонецЕсли;
		
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеВычетовИПН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеВычетовИПН.МесяцНалоговогоПериода;
			СтруктураПоиска.ВидВычета = ДанныеВычетовИПН.ВидВычета;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаИПН.Удалить(ДанныеВычетовИПН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеВычетовИПН.ФизЛицо;
		Строка.МесяцНалоговогоПериода 		= ДанныеВычетовИПН.МесяцНалоговогоПериода;
		Строка.ВидВычета					= ДанныеВычетовИПН.ВидВычета;
		Строка.ВидДохода					= ДанныеВычетовИПН.ВидДохода;
		Строка.РазрешенныйВычет				= РазрешенныйВычетВТекущемРасчете;
		Строка.ПримененныйВычет				= ПримененныйВычетВТекущемРасчете;
		
	КонецЦикла;
	
	// заполним ИсчисленныеВычетыИПН
	Для Каждого Элемент Из РаботникиДляРасчетаИПН Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеВычетыИПН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеВычетыИПН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеВычетыИПН.Свернуть("ФизЛицо, МесяцНалоговогоПериода, ВидВычета, ВидДохода", "РазрешенныйВычет, ПримененныйВычет");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеВычетыИПН);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "Период");
			
			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("РазрешенныйВычет"), ВРег(Колонка.Имя)) = 0 
					И Найти(ВРег("ПримененныйВычет"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "РазрешенныйВычет, ПримененныйВычет");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымВычетовИПН()

// Заполняет набор записей по переданным данным расчета вычетов ИПН
//
// Параметры: 
//  НаборЗаписей - набор записей регистра СведенияОбИсчисленииВычетовИПН
//	ТаблицаДанныеВычетовИПН - таблица значений - данные расчета вычетов ИПН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымВычетовИПНПосле2021(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеВычетовИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода, ВидВычета");
	
	// строим список физлиц, по по которым считается ИПН
	РаботникиДляРасчетаИПН = Новый Соответствие;
	МассивСтрок = Новый Массив;
	
	// Если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;

			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, МесяцНалоговогоПериода, ВидВычета, ВидДохода, РазрешенныйВычет, ПримененныйВычет");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета вычетов ИПН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	//
	БылаОшибка = Ложь;
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	ВычетыПримененныеВДанномРасчете = Новый Соответствие;
	ВычетыРазрешенныеВДанномРасчете = Новый Соответствие;
	
	// Для разных видов дохода фиксируем примененные вычеты в текущем расчете
	ВычетыПримененныеВДанномРасчетеПоВидамДохода = Новый ТаблицаЗначений;
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("Контрагент");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ФизЛицо");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ВидВычета");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ВидДохода");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ПримененныйВычет");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("РазрешенныйВычет");

	ТекущееФизЛицо = "";
	ТекущийМесяцНалоговогоПериода = "";
	ТекущийВидДохода = "";
	
	
	Для Каждого ДанныеВычетовИПН Из ТаблицаДанныеВычетовИПН Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеВычетовИПН.МесяцНалоговогоПериода);
		
		Если ДанныеВычетовИПН.РазмерМЗП = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не определен размер минимальной заработной платы'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
		
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизЛицо <> ДанныеВычетовИПН.ФизЛицо Тогда
			ТекущееФизЛицо = ДанныеВычетовИПН.ФизЛицо;
			ОблагаемыйДоход = ДанныеВычетовИПН.ОблагаемыйДоход;
			ВычетыПримененныеВДанномРасчете.Очистить();
			ВычетыРазрешенныеВДанномРасчете.Очистить();
			ТекущийМесяцНалоговогоПериода = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
			ТекущийВидДохода = ДанныеВычетовИПН.ВидДохода;
			
		ИначеЕсли ТекущийМесяцНалоговогоПериода <> НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода) 
			ИЛИ ТекущийВидДохода <> ДанныеВычетовИПН.ВидДохода  Тогда
			ОблагаемыйДоход = ДанныеВычетовИПН.ОблагаемыйДоход;
			ТекущийМесяцНалоговогоПериода = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
			ТекущийВидДохода = ДанныеВычетовИПН.ВидДохода;
			Если НачалоГода(ДанныеВычетовИПН.МесяцНалоговогоПериода) = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода) Тогда
				ВычетыПримененныеВДанномРасчете.Очистить();
				ВычетыРазрешенныеВДанномРасчете.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		
		Если ДанныеВычетовИПН.ВидВычета = Справочники.ВычетыИПН.НаОплатуМедицинскихУслуг 
				ИЛИ ДанныеВычетовИПН.ВидВычета = Справочники.ВычетыИПН.Стандартный75МЗПИнвалиды Тогда
			РазрешенныйВычетЗаПрошлыеМесяцыПоДругимДоходам = ДанныеВычетовИПН.РазрешенныйВычетСНачалаГодаПоДругимДоходам;
			ПримененныйВычетЗаПрошлыеМесяцыПоДругимДоходам = ДанныеВычетовИПН.ПримененныйВычетСНачалаГодаПоДругимДоходам;
		Иначе
			РазрешенныйВычетЗаПрошлыеМесяцыПоДругимДоходам = 0;
			ПримененныйВычетЗаПрошлыеМесяцыПоДругимДоходам = 0;
		КонецЕсли;

		// Соберем остатки за прошлые периоды в пределах года
		РазрешенныйВычетЗаПрошлыеМесяцы = ДанныеВычетовИПН.РазрешенныйВычетСНачалаГода + РазрешенныйВычетЗаПрошлыеМесяцыПоДругимДоходам - ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериоде - ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериодеПоДругимДоходам;
		ПримененныйВычетЗаПрошлыеМесяцы = ДанныеВычетовИПН.ПримененныйВычетСНачалаГода + ПримененныйВычетЗаПрошлыеМесяцыПоДругимДоходам - ДанныеВычетовИПН.ПримененныйВычетВТекущемПериоде - ДанныеВычетовИПН.ПримененныйВычетВТекущемПериодеПоДругимДоходам;
		ОстатокВычетаЗаПрошлыеМесяцы = РазрешенныйВычетЗаПрошлыеМесяцы - ПримененныйВычетЗаПрошлыеМесяцы;
		
		// Получим значения в текущем периоде
		Если ДанныеВычетовИПН.ВидВычета = Справочники.ВычетыИПН.НаОплатуМедицинскихУслуг 
				ИЛИ ДанныеВычетовИПН.ВидВычета = Справочники.ВычетыИПН.Стандартный75МЗПИнвалиды Тогда
			РазрешенныйВычетВТекущемПериоде = Мин(ДанныеВычетовИПН.СуммовойПределВычета 
													- РазрешенныйВычетЗаПрошлыеМесяцы
													- ?(ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0), 
													ДанныеВычетовИПН.РазмерВычета);
			РазрешенныйВычетВТекущемПериодеПоДругимДоходам = ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериодеПоДругимДоходам;
			ПримененныйВычетВТекущемПериодеПоДругимДоходам = ДанныеВычетовИПН.ПримененныйВычетВТекущемПериодеПоДругимДоходам;
	
		Иначе 	
			РазрешенныйВычетВТекущемПериоде = ДанныеВычетовИПН.РазмерВычета;
			РазрешенныйВычетВТекущемПериодеПоДругимДоходам = 0;
			ПримененныйВычетВТекущемПериодеПоДругимДоходам = 0;
		КонецЕсли;
		
		// Получим сумму вычетов примененную по другим видам доходов в данном расчете
		Если ТипЗнч(ДанныеВычетовИПН.ФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
			ФизЛицоРасчета = ДанныеВычетовИПН.ФизЛицо.ФизЛицо;
		Иначе 
			ФизЛицоРасчета = ДанныеВычетовИПН.ФизЛицо;
		КонецЕсли;

		МассивПримененныеВычеты = ВычетыПримененныеВДанномРасчетеПоВидамДохода.НайтиСтроки(Новый Структура("ФизЛицо, ВидВычета", ФизЛицоРасчета, ДанныеВычетовИПН.ВидВычета));		

		ПримененныйВычетВТекущемРасчетеПоДругимДоходам = 0;
		РазрешенныйВычетВТекущемРасчетеПоДругимДоходам = 0;
		Для Каждого СтрокаПримененныйВычет Из МассивПримененныеВычеты Цикл
			Если СтрокаПримененныйВычет.Контрагент <> ДанныеВычетовИПН.ФизЛицо Тогда
				Если ДанныеВычетовИПН.ВидВычета <> Справочники.ВычетыИПН.ВычетВОСМС 
					И ДанныеВычетовИПН.ВидВычета <> Справочники.ВычетыИПН.ВычетОПВ Тогда
					ПримененныйВычетВТекущемРасчетеПоДругимДоходам = ПримененныйВычетВТекущемРасчетеПоДругимДоходам + СтрокаПримененныйВычет.ПримененныйВычет;
					РазрешенныйВычетВТекущемРасчетеПоДругимДоходам = РазрешенныйВычетВТекущемРасчетеПоДругимДоходам + СтрокаПримененныйВычет.РазрешенныйВычет;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ПримененныйВычетВТекущемПериоде = Мин(ОблагаемыйДоход, ОстатокВычетаЗаПрошлыеМесяцы + РазрешенныйВычетВТекущемПериоде + ?(ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0)
										- ПримененныйВычетВТекущемПериодеПоДругимДоходам - ПримененныйВычетВТекущемРасчетеПоДругимДоходам
										- ?(ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0));
		
		// Скорректируем остаток облагаемого дохода
		ОблагаемыйДоход = Макс(0, ОблагаемыйДоход - ПримененныйВычетВТекущемПериоде);
		
		// при сторнировании начислений предудущего месяца возникает ситуация, когда есть только сторнируемый облагаемый доход и вычет уходит в минус
		ПримененныйВычетВТекущемПериоде = Макс(0, ПримененныйВычетВТекущемПериоде);
		
		// Получим значения в текущем расчете
		РазрешенныйВычетВТекущемРасчете = РазрешенныйВычетВТекущемПериоде - ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериоде - РазрешенныйВычетВТекущемРасчетеПоДругимДоходам - РазрешенныйВычетВТекущемПериодеПоДругимДоходам;
		// ДанныеВычетовИПН.ПримененныйВычетВТекущемПериодеПоДругимДоходам не используем, тк теперь ограничение по виду дохода в выборе запроса 
		ПримененныйВычетВТекущемРасчете = ПримененныйВычетВТекущемПериоде - ДанныеВычетовИПН.ПримененныйВычетВТекущемПериоде;
		
		// Зафиксируем результаты по значению текущего физлица расчета
		Если ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) = Неопределено Тогда
			ВычетыПримененныеВДанномРасчете.Вставить(ДанныеВычетовИПН.ВидВычета, ПримененныйВычетВТекущемРасчете);
		Иначе 
			ВычетыПримененныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] = ВычетыПримененныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] + ПримененныйВычетВТекущемРасчете;
		КонецЕсли;
		
		Если ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) = Неопределено Тогда 
			ВычетыРазрешенныеВДанномРасчете.Вставить(ДанныеВычетовИПН.ВидВычета, РазрешенныйВычетВТекущемРасчете);
		Иначе 
			ВычетыРазрешенныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] = ВычетыРазрешенныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] + РазрешенныйВычетВТекущемРасчете;
		КонецЕсли;
		
		// Зафиксируем результаты в целом по физлицу
		НоваяСтрокаПримененныеВычеты 					= ВычетыПримененныеВДанномРасчетеПоВидамДохода.Добавить();
		НоваяСтрокаПримененныеВычеты.Контрагент 		= ДанныеВычетовИПН.ФизЛицо;
		НоваяСтрокаПримененныеВычеты.ФизЛицо 			= ФизЛицоРасчета;
		НоваяСтрокаПримененныеВычеты.ВидВычета 			= ДанныеВычетовИПН.ВидВычета;
		НоваяСтрокаПримененныеВычеты.ВидДохода 			= ДанныеВычетовИПН.ВидДохода;
		НоваяСтрокаПримененныеВычеты.ПримененныйВычет 	= ПримененныйВычетВТекущемРасчете;
		НоваяСтрокаПримененныеВычеты.РазрешенныйВычет 	= РазрешенныйВычетВТекущемРасчете;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда 
			Если РазрешенныйВычетВТекущемРасчете = 0 И
					ПримененныйВычетВТекущемРасчете = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период							= НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
			
			// Измерения
			Движение.ФизическоеЛицо             	= ДанныеВычетовИПН.ФизЛицо;
			Движение.СтруктурнаяЕдиница				= Организация;
			Движение.ПериодРегистрации	    		= НачалоМесяца(ПериодРегистрации);
			Движение.Организация            		= Организация;
			Движение.Налогоплательщик          		= Налогоплательщик;
			Движение.ВидВычета		          		= ДанныеВычетовИПН.ВидВычета;
			Движение.ВидДохода		          		= ДанныеВычетовИПН.ВидДохода;

			// Ресурсы
			Движение.РазрешенныйВычет				= РазрешенныйВычетВТекущемРасчете;
			Движение.ПримененныйВычет				= ПримененныйВычетВТекущемРасчете;
			
		КонецЕсли;
		
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеВычетовИПН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеВычетовИПН.МесяцНалоговогоПериода;
			СтруктураПоиска.ВидВычета = ДанныеВычетовИПН.ВидВычета;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаИПН.Удалить(ДанныеВычетовИПН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеВычетовИПН.ФизЛицо;
		Строка.МесяцНалоговогоПериода 		= ДанныеВычетовИПН.МесяцНалоговогоПериода;
		Строка.ВидВычета					= ДанныеВычетовИПН.ВидВычета;
		Строка.ВидДохода					= ДанныеВычетовИПН.ВидДохода;
		Строка.РазрешенныйВычет				= РазрешенныйВычетВТекущемРасчете;
		Строка.ПримененныйВычет				= ПримененныйВычетВТекущемРасчете;
		
	КонецЦикла;
	
	// заполним ИсчисленныеВычетыИПН
	Для Каждого Элемент Из РаботникиДляРасчетаИПН Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеВычетыИПН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеВычетыИПН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеВычетыИПН.Свернуть("ФизЛицо, МесяцНалоговогоПериода, ВидВычета, ВидДохода", "РазрешенныйВычет, ПримененныйВычет");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеВычетыИПН);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "Период");
			
			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("РазрешенныйВычет"), ВРег(Колонка.Имя)) = 0 
					И Найти(ВРег("ПримененныйВычет"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "РазрешенныйВычет, ПримененныйВычет");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымВычетовИПН()

// Заполняет набор записей по переданным данным расчета ОПВ для документов по расчету ОПВ
//
// Параметры: 
//	ТабличнаяЧасть - ссылка на табличную часть документа, с которой работать
//	ПериодРегистрации - первое число месяца, в котором производиться расчет
//  НаборЗаписей - набор записей регистра ОПВРасчетыСФондами 
//	РезультатОПВ - данные расчета ОПВ (полученный функцией ПроведениеРасчетовПолныеПрава.ПолучитьДанныеДляРасчетаОПВ())
//	Налогоплательщик - ссылка на элемент справочника Организации, соответствующий организации-налогоплательщику
//	Организация - ссылка на элемент справочника Организации из шапки документа
//	ОтражениеПоПериодуРегистрации - булевский признак отражения расчетов по налогам ПериодомРегистрации
//	Перерасчет - булевский признак выполнения перерасчета
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымОПВ(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатОПВ, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
	Если ПериодРегистрации >= '20200101' Тогда
		ЗаполнитьНаборЗаписейПоДаннымОПВПосле2020(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатОПВ, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
	Иначе	
		ЗаполнитьНаборЗаписейПоДаннымОПВДо2020(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатОПВ, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымОПВ

// Заполняет набор записей по переданным данным расчета ОПВ для документов по расчету ОПВ
//
// Параметры: 
//	ТабличнаяЧасть - ссылка на табличную часть документа, с которой работать
//	ПериодРегистрации - первое число месяца, в котором производиться расчет
//  НаборЗаписей - набор записей регистра ОПВРасчетыСФондами 
//	РезультатОПВ - данные расчета ОПВ (полученный функцией ПроведениеРасчетовПолныеПрава.ПолучитьДанныеДляРасчетаОПВ())
//	Налогоплательщик - ссылка на элемент справочника Организации, соответствующий организации-налогоплательщику
//	Организация - ссылка на элемент справочника Организации из шапки документа
//	ОтражениеПоПериодуРегистрации - булевский признак отражения расчетов по налогам ПериодомРегистрации
//	Перерасчет - булевский признак выполнения перерасчета
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымОПВДо2020(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатОПВ, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
	СоответствиеПравилаОкругления = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ОПВ
	РаботникиДляРасчетаОПВ = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаОПВ.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;

			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Взнос, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаОПВ.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета ОПВ, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Обязательные пенсионные взносы</B>", , , , , , -300); // -300 - ОПВ идет самым первым комментарием
	КонецЕсли;
	
	ДанныеОПВ = РезультатОПВ.Выбрать();
	БылаОшибка = Ложь;
	
	Пока ДанныеОПВ.Следующий() Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеОПВ.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, ДанныеОПВ.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеОПВ.Период, ПравилоОкругления);
		КонецЕсли;
	
		// проверим заполненность необходимых реквизитов
		//Если ДанныеОПВ.ПроцентСтавки = 0 Тогда
		//	РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
		//	РаботаССообщениями.ОшибкаРасчета("Расчет ОПВ: ", "Не заполнено значение ставки обязательных пенсионных взносов", РасшифровкаСтавки, -199);  // -199 ошибка относятся непосредственно к ОПВ
		//	БылаОшибка = Истина;
		//КонецЕсли;
	
		Если ДанныеОПВ.РазмерОграниченияПоДоходам = 0 Тогда
			РасшифровкаОграничения = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет ОПВ: ", "Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам", РасшифровкаОграничения, -198);  // -198 ошибка относятся непосредственно к ОПВ
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		ВзносИсчисленный = ДанныеОПВ.ВзносИсчисленный;
		ОблагаемаяБаза = ДанныеОПВ.ОблагаемаяБаза;
		
		// Округлим результат
		ВзносИсчисленный = ОбщегоНазначения.ОкруглитьЧисло(ВзносИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		Если КомментироватьРасчет Тогда
			РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеОПВ.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета);
			
			ОПВДолжныБытьРассчитаны = Истина;
			МассивПараметровРасшифровки = Новый Массив;
			МассивПараметровРасшифровки.Добавить(ДанныеОПВ.ФизЛицо);
			
			Если ДанныеОПВ.ПризнакФизЛицаБезПраваНаПенсию <> 0 Тогда                                                             
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьГражданствоФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Не имеет права на пенсию", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ОПВДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			Если ДанныеОПВ.ПризнакФизЛицаПенсионера <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьПенсионноеОбеспечениеФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является пенсионером", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ОПВДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			Если ДанныеОПВ.ПризнакФизЛицаИнвалида <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбИнвалидностиФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является инвалидом I или II группы, у которого инвалидность установлена бессрочно", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ОПВДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ОПВДолжныБытьРассчитаны Тогда
				РаботаССообщениями.КомментарийРасчета("Доход, принимаемый для исчисления ОПВ: " + ДанныеОПВ.ОблагаемыйДоход, КомментарийВидаРасчета);
				Если ПериодРегистрации >= Дата('20200101') Тогда
					РаботаССообщениями.КомментарийРасчета("Ограничение по доходу в пределах 50 МЗП: " + ДанныеОПВ.РазмерОграниченияПоДоходам, КомментарийВидаРасчета);
				ИначеЕсли ПериодРегистрации >= Дата('20190101') Тогда
					//ограничние 1 МЗП только для ГПХ
					Если ТипЗнч(ДанныеОПВ.ФизЛицо) =  Тип("СправочникСсылка.Контрагенты") Тогда
						РаботаССообщениями.КомментарийРасчета("Минимальное ограничение по доходу в пределах 1 МЗП: " + ДанныеОПВ.РазмерМинимальногоОграниченияПоДоходам, КомментарийВидаРасчета);
						РаботаССообщениями.КомментарийРасчета("Максимальное ограничение по доходу в пределах 50 МЗП: " + ДанныеОПВ.РазмерОграниченияПоДоходам, КомментарийВидаРасчета);					
					Иначе
						РаботаССообщениями.КомментарийРасчета("Ограничение по доходу в пределах 50 МЗП: " + ДанныеОПВ.РазмерОграниченияПоДоходам, КомментарийВидаРасчета);					
					КонецЕсли;
					
				Иначе
					РаботаССообщениями.КомментарийРасчета("Ограничение по доходу в пределах 75 МЗП: " + ДанныеОПВ.РазмерОграниченияПоДоходам, КомментарийВидаРасчета);
				КонецЕсли;
				
				Если ДанныеОПВ.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Объект исчисления ОПВ за месяц: " + ДанныеОПВ.ОблагаемаяБазаЗаМесяц, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления ОПВ: " + ДанныеОПВ.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета);
				КонецЕсли;
				РаботаССообщениями.КомментарийРасчета("Объект исчисления ОПВ: " + ОблагаемаяБаза, КомментарийВидаРасчета);
				
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.КомментарийРасчета("Процент ОПВ: ", КомментарийВидаРасчета, ДанныеОПВ.ПроцентСтавки, РасшифровкаСтавки);
				Если ДанныеОПВ.РанееИсчисленныйВзнос <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("ОПВ за месяц: " + ДанныеОПВ.ВзносЗаПериод, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленные ОПВ: " + ДанныеОПВ.РанееИсчисленныйВзнос, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			РаботаССообщениями.КомментарийРасчета("Исчисленные ОПВ: " + ВзносИсчисленный, КомментарийВидаРасчета);
		КонецЕсли;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ВзносИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
					
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеОПВ.ФизЛицо;
			Движение.СтруктурнаяЕдиница        	= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеОПВ.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Взнос						= ВзносИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеОПВ.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеОПВ.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаОПВ.Удалить(ДанныеОПВ.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеОПВ.ФизЛицо;
		Строка.Взнос  						= ВзносИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеОПВ.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеОПВ
	Для Каждого Элемент Из РаботникиДляРасчетаОПВ Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйОПВ = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйОПВ.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйОПВ.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Взнос, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйОПВ);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Взнос"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Взнос");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымОПВ

// Заполняет набор записей по переданным данным расчета ОПВ для документов по расчету ОПВ
//
// Параметры: 
//	ТабличнаяЧасть - ссылка на табличную часть документа, с которой работать
//	ПериодРегистрации - первое число месяца, в котором производиться расчет
//  НаборЗаписей - набор записей регистра ОПВРасчетыСФондами 
//	РезультатОПВ - данные расчета ОПВ (полученный функцией ПроведениеРасчетовПолныеПрава.ПолучитьДанныеДляРасчетаОПВ())
//	Налогоплательщик - ссылка на элемент справочника Организации, соответствующий организации-налогоплательщику
//	Организация - ссылка на элемент справочника Организации из шапки документа
//	ОтражениеПоПериодуРегистрации - булевский признак отражения расчетов по налогам ПериодомРегистрации
//	Перерасчет - булевский признак выполнения перерасчета
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымОПВПосле2020(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатОПВ, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
	СоответствиеПравилаОкругления = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ОПВ
	РаботникиДляРасчетаОПВ = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаОПВ.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;

			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Взнос, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаОПВ.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета ОПВ, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Обязательные пенсионные взносы</B>", , , , , , -300); // -300 - ОПВ идет самым первым комментарием
	КонецЕсли;
	
	ДанныеОПВ = РезультатОПВ.Выбрать();
	БылаОшибка = Ложь;
	
	ТаблицаВзносовПоФизЛицамПоДругимДоходам = Новый ТаблицаЗначений;
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("ФизЛицо", 	   Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("Период", 	       ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("ОблагаемаяБаза", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Индексы.Добавить("ФизЛицо, Период");
	
	СтруктураПоискаПоФизЛицам = Новый Структура("ФизЛицо, Период");
	
	Пока ДанныеОПВ.Следующий() Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеОПВ.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, ДанныеОПВ.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеОПВ.Период, ПравилоОкругления);
		КонецЕсли;
	
		// проверим заполненность необходимых реквизитов
		//Если ДанныеОПВ.ПроцентСтавки = 0 Тогда
		//	РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
		//	РаботаССообщениями.ОшибкаРасчета("Расчет ОПВ: ", "Не заполнено значение ставки обязательных пенсионных взносов", РасшифровкаСтавки, -199);  // -199 ошибка относятся непосредственно к ОПВ
		//	БылаОшибка = Истина;
		//КонецЕсли;
	
		Если ДанныеОПВ.РазмерОграниченияПоДоходам = 0 Тогда
			РасшифровкаОграничения = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет ОПВ: ", "Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам", РасшифровкаОграничения, -198);  // -198 ошибка относятся непосредственно к ОПВ
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПоФизЛицам, ДанныеОПВ);
		
		// сумма взносов исчисленная
		МассивВзносов = ТаблицаВзносовПоФизЛицамПоДругимДоходам.НайтиСтроки(СтруктураПоискаПоФизЛицам);
		
		Если МассивВзносов.Количество() > 0 Тогда
			ОблагаемаяБазаРанееВРасчетеПоДругимВидам = МассивВзносов[0].ОблагаемаяБаза;
		Иначе
			ОблагаемаяБазаРанееВРасчетеПоДругимВидам = 0;
		КонецЕсли;
		
		РазмерОграниченияПоДоходам = ДанныеОПВ.РазмерОграниченияПоДоходам;
		
		// уменьшим максимальный предел по доходам за счет суммы по другим видам дохода
		Если ОблагаемаяБазаРанееВРасчетеПоДругимВидам > 0
			ИЛИ ДанныеОПВ.РанееИсчисленныйВзносПоДругимВидам > 0 Тогда
			
			РазмерОграниченияПоДоходам = Макс(РазмерОграниченияПоДоходам - ОблагаемаяБазаРанееВРасчетеПоДругимВидам - ДанныеОПВ.РанееИсчисленнаяОблагаемаяБазаПоДругимВидам, 0);
			
		КонецЕсли;
		
		// облагаемая база
		Если ДанныеОПВ.ОблагаемыйДоход <= 0 Тогда
			
			ОблагаемаяБаза = 0;
			
		ИначеЕсли ДанныеОПВ.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда 
			
			Если ДанныеОПВ.ОблагаемыйДоход < ДанныеОПВ.РазмерМинимальногоОграниченияПоДоходам
				И ДанныеОПВ.Период < Дата('20230701') Тогда
			
				ОблагаемаяБаза = ДанныеОПВ.РазмерМинимальногоОграниченияПоДоходам;
				
			Иначе
			
				ОблагаемаяБаза = ДанныеОПВ.ОблагаемыйДоход;
				
			КонецЕсли;
			
		ИначеЕсли ДанныеОПВ.ОблагаемыйДоход < РазмерОграниченияПоДоходам Тогда
			
			ОблагаемаяБаза = ДанныеОПВ.ОблагаемыйДоход;
			
		Иначе
			
			ОблагаемаяБаза = РазмерОграниченияПоДоходам;
			
		КонецЕсли;			
		
		ОблагаемаяБаза = ОблагаемаяБаза - ДанныеОПВ.РанееИсчисленнаяОблагаемаяБаза;
		
		Если ОблагаемаяБаза <= 0 Тогда
			
			ВзносЗаПериод = 0;
			
		ИначеЕсли ДанныеОПВ.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда 
			
			Если ОблагаемаяБаза < ДанныеОПВ.РазмерМинимальногоОграниченияПоДоходам
				И ДанныеОПВ.Период < Дата('20230701') Тогда
			
				ВзносЗаПериод = ДанныеОПВ.РазмерМинимальногоОграниченияПоДоходам * ДанныеОПВ.Ставка;
				
			Иначе
				
				ВзносЗаПериод = ОблагаемаяБаза * ДанныеОПВ.Ставка;
				
			КонецЕсли;
			
		ИначеЕсли ОблагаемаяБаза < РазмерОграниченияПоДоходам Тогда
			
			ВзносЗаПериод = ОблагаемаяБаза * ДанныеОПВ.Ставка;
			
		Иначе
			
			ВзносЗаПериод = РазмерОграниченияПоДоходам * ДанныеОПВ.Ставка;
			
		КонецЕсли;
		
		// ПолеВзносыИсчисленные + "-" + ПолеРанееВзносыИсчисленные - не отнимаем, т.к. выше уже уменьшили облагаемую базу ОблагаемаяБаза - ДанныеОПВ.РанееИсчисленнаяОблагаемаяБаза
		ВзносИсчисленный = ВзносЗаПериод;
		
		// Округлим результат
		ВзносИсчисленный = ОбщегоНазначения.ОкруглитьЧисло(ВзносИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		Если КомментироватьРасчет Тогда
			РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеОПВ.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета);
			
			ОПВДолжныБытьРассчитаны = Истина;
			МассивПараметровРасшифровки = Новый Массив;
			МассивПараметровРасшифровки.Добавить(ДанныеОПВ.ФизЛицо);
			
			Если ДанныеОПВ.ПризнакФизЛицаБезПраваНаПенсию <> 0 Тогда                                                             
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьГражданствоФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Не имеет права на пенсию", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ОПВДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			Если ДанныеОПВ.ПризнакФизЛицаПенсионера <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьПенсионноеОбеспечениеФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является пенсионером", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ОПВДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			Если ДанныеОПВ.ПризнакФизЛицаИнвалида <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбИнвалидностиФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является лицом с инвалидностью I или II группы, у которого инвалидность установлена бессрочно", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ОПВДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ОПВДолжныБытьРассчитаны Тогда
				РаботаССообщениями.КомментарийРасчета("Доход, принимаемый для исчисления ОПВ: " + ОблагаемаяБаза, КомментарийВидаРасчета);
				Если ПериодРегистрации >= Дата('20200101') Тогда
					РаботаССообщениями.КомментарийРасчета("Ограничение по доходу в пределах 50 МЗП: " + ДанныеОПВ.РазмерОграниченияПоДоходам, КомментарийВидаРасчета);
				ИначеЕсли ПериодРегистрации >= Дата('20190101') Тогда
					//ограничние 1 МЗП только для ГПХ
					Если ТипЗнч(ДанныеОПВ.ФизЛицо) =  Тип("СправочникСсылка.Контрагенты") Тогда
						РаботаССообщениями.КомментарийРасчета("Минимальное ограничение по доходу в пределах 1 МЗП: " + ДанныеОПВ.РазмерМинимальногоОграниченияПоДоходам, КомментарийВидаРасчета);
						РаботаССообщениями.КомментарийРасчета("Максимальное ограничение по доходу в пределах 50 МЗП: " + ДанныеОПВ.РазмерОграниченияПоДоходам, КомментарийВидаРасчета);					
					Иначе
						РаботаССообщениями.КомментарийРасчета("Ограничение по доходу в пределах 50 МЗП: " + ДанныеОПВ.РазмерОграниченияПоДоходам, КомментарийВидаРасчета);					
					КонецЕсли;
					
				Иначе
					РаботаССообщениями.КомментарийРасчета("Ограничение по доходу в пределах 75 МЗП: " + ДанныеОПВ.РазмерОграниченияПоДоходам, КомментарийВидаРасчета);
				КонецЕсли;
				
				Если ДанныеОПВ.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Объект исчисления ОПВ за месяц: " + ДанныеОПВ.ОблагаемаяБазаЗаМесяц, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления ОПВ: " + ДанныеОПВ.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета);
				КонецЕсли;
				РаботаССообщениями.КомментарийРасчета("Объект исчисления ОПВ: " + ОблагаемаяБаза, КомментарийВидаРасчета);
				
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.КомментарийРасчета("Процент ОПВ: ", КомментарийВидаРасчета, ДанныеОПВ.ПроцентСтавки, РасшифровкаСтавки);
				Если ДанныеОПВ.РанееИсчисленныйВзнос <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("ОПВ за месяц: " + ВзносЗаПериод, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленные ОПВ: " + ДанныеОПВ.РанееИсчисленныйВзнос, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			РаботаССообщениями.КомментарийРасчета("Исчисленные ОПВ: " + ВзносИсчисленный, КомментарийВидаРасчета);
		КонецЕсли;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ВзносИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		МассивВзносов = ТаблицаВзносовПоФизЛицамПоДругимДоходам.НайтиСтроки(СтруктураПоискаПоФизЛицам);
		Если МассивВзносов.Количество() > 0 Тогда
			СтрокаВзносовТаблицаВзносовПоФизЛицам = МассивВзносов[0];
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза = СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза + ОблагаемаяБаза;
		Иначе
			СтрокаВзносовТаблицаВзносовПоФизЛицам = ТаблицаВзносовПоФизЛицамПоДругимДоходам.Добавить();
			СтрокаВзносовТаблицаВзносовПоФизЛицам.Период = ДанныеОПВ.Период;
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ФизЛицо = ДанныеОПВ.ФизЛицоДохода;
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза = ОблагаемаяБаза;
		КонецЕсли;
					
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеОПВ.ФизЛицо;
			Движение.СтруктурнаяЕдиница        	= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеОПВ.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Взнос						= ВзносИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеОПВ.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеОПВ.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаОПВ.Удалить(ДанныеОПВ.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеОПВ.ФизЛицо;
		Строка.Взнос  						= ВзносИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеОПВ.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеОПВ
	Для Каждого Элемент Из РаботникиДляРасчетаОПВ Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйОПВ = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйОПВ.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйОПВ.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Взнос, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйОПВ);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Взнос"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Взнос");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымОПВ

// Заполняет набор записей по переданным данным расчета СО
//
// Параметры: 
//  НаборЗаписей - набор записей регистра СОРасчетыСФондами
//	РезультатСО - таблица значений - данные расчета СО
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымСО(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатСО, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
	Если ПериодРегистрации >= '20220101' Тогда
		ЗаполнитьНаборЗаписейПоДаннымСОПосле2022(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатСО, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
	ИначеЕсли ПериодРегистрации >= '20140101' Тогда
		ЗаполнитьНаборЗаписейПоДаннымСОПосле2014(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатСО, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
	ИначеЕсли ПериодРегистрации >= '20130201' Тогда
		ЗаполнитьНаборЗаписейПоДаннымСОПосле2013(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатСО, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
	Иначе
		ЗаполнитьНаборЗаписейПоДаннымСОДо2013(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатСО, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
	КонецЕсли;
	
КонецПроцедуры
	
// Заполняет набор записей по переданным данным расчета СО
//
// Параметры: 
//  НаборЗаписей - набор записей регистра СОРасчетыСФондами
//	РезультатСО - таблица значений - данные расчета СО
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымСОДо2013(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатСО, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина)
	
    // правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СО
	РаботникиДляРасчетаСО = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаСО.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;

			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Отчисление, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаСО.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета СО, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Социальные отчисления</B>");
	КонецЕсли;
	
	ДанныеСО = РезультатСО.Выбрать();
	БылаОшибка = Ложь;
	
	// узнаем работает ли организация по урощенке
	ОрганизацияЯвляетсяПлательщикомСН = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаСоциальногоНалога(Организация, ПериодРегистрации);
	
	Пока ДанныеСО.Следующий() Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСО.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, ДанныеСО.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеСО.Период, ПравилоОкругления);
		КонецЕсли;
	
		// проверим заполненность необходимых реквизитов
		Если ДанныеСО.ПроцентСтавки = 0 Тогда
			РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет СО: ", "Не заполнено значение ставки обязательных социальных отчислений", РасшифровкаСтавки);
			БылаОшибка = Истина;
		КонецЕсли;
	
		Если ДанныеСО.РазмерОграниченияПоДоходах = 0 Тогда
			РасшифровкаОграничения = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет СО: ", "Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам", РасшифровкаОграничения);
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
	
		ОтчислениеИсчисленное = ДанныеСО.ОтчислениеИсчисленное;
		СОЗаМесяц 			  = ДанныеСО.СОЗаМесяц;
		ОблагаемаяБазаЗаМесяц = Мин(ДанныеСО.ОблагаемаяБазаЗаМесяц, ДанныеСО.РазмерОграниченияПоДоходах);
	
		// для самостоятельно занятых лиц, работающих на упрощенном режиме сумма СО не должна быть менее 4% от МЗП
		Если НЕ ОрганизацияЯвляетсяПлательщикомСН И Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда			
			Если ЗначениеЗаполнено(ДанныеСО.ФизЛицо) И ДанныеСО.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда
				МинОграничение = ДанныеСО.МинОграничениеСОпоИП;
				Если СОЗаМесяц <> 0 И СОЗаМесяц < МинОграничение Тогда
					СОЗаМесяц = МинОграничение;
					ОблагаемаяБазаЗаМесяц = ДанныеСО.МинОбъектИсчисления;
					// пересчитаем исчисленное отлисление за вычетом ранее исчисленных сумм
					ОтчислениеИсчисленное = СОЗаМесяц - ДанныеСО.РанееОтчисленияИсчисленные;
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
		
		// Округлим результат
		ОтчислениеИсчисленное = ОбщегоНазначения.ОкруглитьЧисло(ОтчислениеИсчисленное, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		ОблагаемаяБаза = ОблагаемаяБазаЗаМесяц - ДанныеСО.РанееИсчисленнаяОблагаемаяБаза;
		
		Если КомментироватьРасчет Тогда
			РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеСО.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета);
			
			СОДолжныБытьРассчитаны = Истина;
			МассивПараметровРасшифровки = Новый Массив;
			МассивПараметровРасшифровки.Добавить(ДанныеСО.ФизЛицо);
			
			Если ДанныеСО.ПризнакФизЛицаБезСоциальногоСтрахования <> 0 Тогда                                                             
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьГражданствоФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Не подлежит социальному страхованию", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				СОДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			Если ДанныеСО.ПризнакФизЛицаПенсионера <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьПенсионноеОбеспечениеФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является пенсионером", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				СОДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если СОДолжныБытьРассчитаны Тогда
				РаботаССообщениями.КомментарийРасчета("Доход, принимаемый для исчисления СО: " + ДанныеСО.ОблагаемыйДоход, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("ОПВ за месяц: " + ДанныеСО.ОПВЗаМесяц, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Ограничение по доходу в пределах 10 МЗП: " + ДанныеСО.РазмерОграниченияПоДоходах, КомментарийВидаРасчета);
				
				Если ДанныеСО.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Объект исчисления СО за месяц: " + ОблагаемаяБазаЗаМесяц, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления СО: " + ДанныеСО.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета);
				КонецЕсли;
				
				РаботаССообщениями.КомментарийРасчета("Объект исчисления СО: " + ОблагаемаяБаза, КомментарийВидаРасчета);
				
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.КомментарийРасчета("Процент СО: ", КомментарийВидаРасчета, ДанныеСО.ПроцентСтавки, РасшифровкаСтавки);
				Если ДанныеСО.РанееОтчисленияИсчисленные <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("СО за месяц: " + СОЗаМесяц, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленные СО: " + ДанныеСО.РанееОтчисленияИсчисленные, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			РаботаССообщениями.КомментарийРасчета("Исчисленные СО: " + ОтчислениеИсчисленное, КомментарийВидаРасчета);
		КонецЕсли;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ОтчислениеИсчисленное = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру

			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеСО.ФизЛицо;
			Движение.СтруктурнаяЕдиница			= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеСО.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Отчисление					= ОтчислениеИсчисленное;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСО.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСО.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСО.Удалить(ДанныеСО.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСО.ФизЛицо;
		Строка.Отчисление					= ОтчислениеИсчисленное;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеСО.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеСО
	Для Каждого Элемент Из РаботникиДляРасчетаСО Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеСО = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеСО.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеСО.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Отчисление, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеСО);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Отчисление"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Отчисление");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымСО

// Заполняет набор записей по переданным данным расчета СО с мин. ограничением на общую сумму доходов
//
// Параметры: 
//  НаборЗаписей - набор записей регистра СОРасчетыСФондами
//	РезультатСО - таблица значений - данные расчета СО
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымСОПосле2013(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатСО, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина)
	
    // правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СО
	РаботникиДляРасчетаСО = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
						
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаСО.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;
			
			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Отчисление, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаСО.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета СО, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Социальные отчисления</B>");
	КонецЕсли;
	
	ДанныеСО = РезультатСО.Выбрать();
	БылаОшибка = Ложь;
	
	// узнаем работает ли организация по урощенке
	ОрганизацияЯвляетсяПлательщикомСН = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаСоциальногоНалога(Организация, ПериодРегистрации);
	
	Пока ДанныеСО.Следующий() Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСО.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, ДанныеСО.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеСО.Период, ПравилоОкругления);
		КонецЕсли;
	
		// проверим заполненность необходимых реквизитов
		Если ДанныеСО.ПроцентСтавки = 0 Тогда
			РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет СО: ", "Не заполнено значение ставки обязательных социальных отчислений", РасшифровкаСтавки);
			БылаОшибка = Истина;
		КонецЕсли;
	
		Если ДанныеСО.РазмерОграниченияПоДоходах = 0 Тогда
			РасшифровкаОграничения = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет СО: ", "Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам", РасшифровкаОграничения);
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
	
		ОтчислениеИсчисленное = ДанныеСО.ОтчислениеИсчисленное;
		СОЗаМесяц 			  = ДанныеСО.СОЗаМесяц;
		ОблагаемаяБазаЗаМесяц = Мин(ДанныеСО.ОблагаемаяБазаЗаМесяц, ДанныеСО.РазмерОграниченияПоДоходах);
		
		// для самостоятельно занятых лиц, работающих на упрощенном режиме сумма СО не должна быть менее 4% от МЗП
		Если НЕ ОрганизацияЯвляетсяПлательщикомСН И Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда			
			Если ЗначениеЗаполнено(ДанныеСО.ФизЛицо) И ДанныеСО.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда
				МинОграничение = ДанныеСО.МинОграничениеСОпоИП;
				Если СОЗаМесяц <> 0 И СОЗаМесяц < МинОграничение Тогда
					СОЗаМесяц = МинОграничение;
					ОблагаемаяБазаЗаМесяц = ДанныеСО.РазмерМЗП;
					// пересчитаем исчисленное отлисление за вычетом ранее исчисленных сумм
					ОтчислениеИсчисленное = СОЗаМесяц - ДанныеСО.РанееОтчисленияИсчисленные;
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
		
		// Округлим результат
		ОтчислениеИсчисленное = ОбщегоНазначения.ОкруглитьЧисло(ОтчислениеИсчисленное, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		ОблагаемаяБаза = ОблагаемаяБазаЗаМесяц - ДанныеСО.РанееИсчисленнаяОблагаемаяБаза;
		
		Если КомментироватьРасчет Тогда
			РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеСО.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета);
			
			СОДолжныБытьРассчитаны = Истина;
			МассивПараметровРасшифровки = Новый Массив;
			МассивПараметровРасшифровки.Добавить(ДанныеСО.ФизЛицо);
			
			Если ДанныеСО.ПризнакФизЛицаБезСоциальногоСтрахования <> 0 Тогда                                                             
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьГражданствоФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Не подлежит социальному страхованию", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				СОДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			Если ДанныеСО.ПризнакФизЛицаПенсионера <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьПенсионноеОбеспечениеФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является пенсионером", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				СОДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если СОДолжныБытьРассчитаны Тогда
				РаботаССообщениями.КомментарийРасчета("Доход, принимаемый для исчисления СО: " + ДанныеСО.ОблагаемыйДоход, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Общая сумма начисленных доходов: " + ДанныеСО.ОбщаяСуммаНачислений, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("ОПВ за месяц: " + ДанныеСО.ОПВЗаМесяц, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Ограничение на объект исчисления 1 МЗП: " + ДанныеСО.МинОбъектИсчисления, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Ограничение по доходу в пределах 10 МЗП: " + ДанныеСО.РазмерОграниченияПоДоходах, КомментарийВидаРасчета);
				
				Если ДанныеСО.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Объект исчисления СО за месяц: " + ОблагаемаяБазаЗаМесяц, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления СО: " + ДанныеСО.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета);
				КонецЕсли;
				
				РаботаССообщениями.КомментарийРасчета("Объект исчисления СО: " + ОблагаемаяБаза, КомментарийВидаРасчета);
				
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.КомментарийРасчета("Процент СО: ", КомментарийВидаРасчета, ДанныеСО.ПроцентСтавки, РасшифровкаСтавки);
				Если ДанныеСО.РанееОтчисленияИсчисленные <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("СО за месяц: " + СОЗаМесяц, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленные СО: " + ДанныеСО.РанееОтчисленияИсчисленные, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			РаботаССообщениями.КомментарийРасчета("Исчисленные СО: " + ОтчислениеИсчисленное, КомментарийВидаРасчета);
		КонецЕсли;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ОтчислениеИсчисленное = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру

			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеСО.ФизЛицо;
			Движение.СтруктурнаяЕдиница			= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеСО.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Отчисление					= ОтчислениеИсчисленное;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСО.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСО.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСО.Удалить(ДанныеСО.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСО.ФизЛицо;
		Строка.Отчисление					= ОтчислениеИсчисленное;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеСО.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеСО
	Для Каждого Элемент Из РаботникиДляРасчетаСО Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеСО = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеСО.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеСО.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Отчисление, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеСО);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Отчисление"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Отчисление");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымСО

// Заполняет набор записей по переданным данным расчета СО с мин. ограничением на объект исчисления
//
// Параметры: 
//  НаборЗаписей - набор записей регистра СОРасчетыСФондами
//	РезультатСО - таблица значений - данные расчета СО
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымСОПосле2014(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатСО, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина)
	
    // правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СО
	РаботникиДляРасчетаСО = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
						
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаСО.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;
			
			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Отчисление, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаСО.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета СО, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Социальные отчисления</B>");
	КонецЕсли;
	
	ДанныеСО = РезультатСО.Выбрать();
	БылаОшибка = Ложь;
	
	// узнаем работает ли организация по урощенке
	ОрганизацияЯвляетсяПлательщикомСН = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаСоциальногоНалога(Организация, ПериодРегистрации);
	
	Пока ДанныеСО.Следующий() Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСО.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, ДанныеСО.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеСО.Период, ПравилоОкругления);
		КонецЕсли;
	
		// проверим заполненность необходимых реквизитов
		//Если ДанныеСО.ПроцентСтавки = 0 Тогда
		//	РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
		//	РаботаССообщениями.ОшибкаРасчета("Расчет СО: ", "Не заполнено значение ставки обязательных социальных отчислений", РасшифровкаСтавки);
		//	БылаОшибка = Истина;
		//КонецЕсли;
	
		Если ДанныеСО.РазмерОграниченияПоДоходах = 0 Тогда
			РасшифровкаОграничения = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет СО: ", "Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам", РасшифровкаОграничения);
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
	
		ОтчислениеИсчисленное = ДанныеСО.ОтчислениеИсчисленное;
		СОЗаМесяц 			  = ДанныеСО.СОЗаМесяц;
		ОблагаемаяБазаЗаМесяц = Мин(ДанныеСО.ОблагаемаяБазаЗаМесяц, ДанныеСО.РазмерОграниченияПоДоходах);
		
		// для самостоятельно занятых лиц, работающих на упрощенном режиме сумма СО не должна быть менее 4% от МЗП
		Если НЕ ОрганизацияЯвляетсяПлательщикомСН И Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда			
			Если ЗначениеЗаполнено(ДанныеСО.ФизЛицо) И ДанныеСО.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда
				МинОграничение = ДанныеСО.МинОграничениеСОпоИП;
				Если СОЗаМесяц <> 0 И СОЗаМесяц < МинОграничение Тогда
					СОЗаМесяц = МинОграничение;
					ОблагаемаяБазаЗаМесяц = ДанныеСО.РазмерМЗП;
					// пересчитаем исчисленное отлисление за вычетом ранее исчисленных сумм
					ОтчислениеИсчисленное = СОЗаМесяц - ДанныеСО.РанееОтчисленияИсчисленные;
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
		
		// Округлим результат
		ОтчислениеИсчисленное = ОбщегоНазначения.ОкруглитьЧисло(ОтчислениеИсчисленное, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		ОблагаемаяБаза = ОблагаемаяБазаЗаМесяц - ДанныеСО.РанееИсчисленнаяОблагаемаяБаза;
		
		Если КомментироватьРасчет Тогда
			РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеСО.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета);
			
			СОДолжныБытьРассчитаны = Истина;
			МассивПараметровРасшифровки = Новый Массив;
			МассивПараметровРасшифровки.Добавить(ДанныеСО.ФизЛицо);
			
			Если ДанныеСО.ПризнакФизЛицаБезСоциальногоСтрахования <> 0 Тогда                                                             
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьГражданствоФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Не подлежит социальному страхованию", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				СОДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			Если ДанныеСО.ПризнакФизЛицаПенсионера <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьПенсионноеОбеспечениеФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является пенсионером", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				СОДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если СОДолжныБытьРассчитаны Тогда
				РаботаССообщениями.КомментарийРасчета("Доход, принимаемый для исчисления СО: " + ДанныеСО.ОблагаемыйДоход, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("ОПВ за месяц: " + ДанныеСО.ОПВЗаМесяц, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Ограничение на объект исчисления 1 МЗП: " + ДанныеСО.МинОбъектИсчисления, КомментарийВидаРасчета);
				Если ПериодРегистрации >= Дата('20190101') Тогда
					РаботаССообщениями.КомментарийРасчета("Ограничение по доходу в пределах 7 МЗП: " + ДанныеСО.РазмерОграниченияПоДоходах, КомментарийВидаРасчета);
				Иначе
					РаботаССообщениями.КомментарийРасчета("Ограничение по доходу в пределах 10 МЗП: " + ДанныеСО.РазмерОграниченияПоДоходах, КомментарийВидаРасчета);
				КонецЕсли;
				
				Если ДанныеСО.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Объект исчисления СО за месяц: " + ОблагаемаяБазаЗаМесяц, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления СО: " + ДанныеСО.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета);
				КонецЕсли;
				
				РаботаССообщениями.КомментарийРасчета("Объект исчисления СО: " + ОблагаемаяБаза, КомментарийВидаРасчета);
				
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.КомментарийРасчета("Процент СО: ", КомментарийВидаРасчета, ДанныеСО.ПроцентСтавки, РасшифровкаСтавки);
				Если ДанныеСО.РанееОтчисленияИсчисленные <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("СО за месяц: " + СОЗаМесяц, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленные СО: " + ДанныеСО.РанееОтчисленияИсчисленные, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			РаботаССообщениями.КомментарийРасчета("Исчисленные СО: " + ОтчислениеИсчисленное, КомментарийВидаРасчета);
		КонецЕсли;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ОтчислениеИсчисленное = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру

			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеСО.ФизЛицо;
			Движение.СтруктурнаяЕдиница			= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеСО.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Отчисление					= ОтчислениеИсчисленное;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСО.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСО.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСО.Удалить(ДанныеСО.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСО.ФизЛицо;
		Строка.Отчисление					= ОтчислениеИсчисленное;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеСО.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеСО
	Для Каждого Элемент Из РаботникиДляРасчетаСО Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеСО = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеСО.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеСО.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Отчисление, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеСО);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Отчисление"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Отчисление");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымСО

// Заполняет набор записей по переданным данным расчета СО с мин. ограничением на объект исчисления
//
// Параметры: 
//  НаборЗаписей - набор записей регистра СОРасчетыСФондами
//	РезультатСО - таблица значений - данные расчета СО
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымСОПосле2022(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатСО, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина)
	
    // правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СО
	РаботникиДляРасчетаСО = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
						
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаСО.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;
			
			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Отчисление, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаСО.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета СО, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Социальные отчисления</B>");
	КонецЕсли;
	
	ДанныеСО = РезультатСО.Выбрать();
	БылаОшибка = Ложь;
	
	// узнаем работает ли организация по урощенке
	ОрганизацияЯвляетсяПлательщикомСН = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаСоциальногоНалога(Организация, ПериодРегистрации);
	
	Пока ДанныеСО.Следующий() Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСО.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, ДанныеСО.Период);
			Если ПравилоОкругления.Период >= '20220101' Тогда
				СоответствиеПравилаОкругления.Вставить(ДанныеСО.Период, ПравилоОкругления);
			Иначе
				ПравилоОкругления = Новый Структура("ПорядокОкругления, МетодОкругления", Перечисления.ПорядкиОкругления.Окр1, Перечисления.МетодыОкругления.ВсегдаВБольшуюСторону);
				СоответствиеПравилаОкругления.Вставить(ДанныеСО.Период, ПравилоОкругления);
			КонецЕсли;
		КонецЕсли;
	
		Если ДанныеСО.РазмерОграниченияПоДоходах = 0 Тогда
			РасшифровкаОграничения = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет СО: ", "Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам", РасшифровкаОграничения);
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
	
		ОтчислениеИсчисленное = ДанныеСО.ОтчислениеИсчисленное;
		СОЗаМесяц 			  = ДанныеСО.СОЗаМесяц;
		ОблагаемаяБазаЗаМесяц = Мин(ДанныеСО.ОблагаемаяБазаЗаМесяц, ДанныеСО.РазмерОграниченияПоДоходах);
		
		// для самостоятельно занятых лиц, работающих на упрощенном режиме сумма СО не должна быть менее 4% от МЗП
		Если НЕ ОрганизацияЯвляетсяПлательщикомСН И Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда			
			Если ЗначениеЗаполнено(ДанныеСО.ФизЛицо) И ДанныеСО.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда
				МинОграничение = ДанныеСО.МинОграничениеСОпоИП;
				Если СОЗаМесяц <> 0 И СОЗаМесяц < МинОграничение Тогда
					СОЗаМесяц = МинОграничение;
					ОблагаемаяБазаЗаМесяц = ДанныеСО.РазмерМЗП;
					// пересчитаем исчисленное отлисление за вычетом ранее исчисленных сумм
					ОтчислениеИсчисленное = СОЗаМесяц - ДанныеСО.РанееОтчисленияИсчисленные;
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
		
		ОблагаемаяБаза = ОблагаемаяБазаЗаМесяц - ДанныеСО.РанееИсчисленнаяОблагаемаяБаза;
		
		// корректировка при округлении расчетов
		Если ОблагаемаяБаза = 0 И (ОтчислениеИсчисленное > -1 И ОтчислениеИсчисленное < 1) Тогда
		
			ОтчислениеИсчисленное = 0;
			
		Иначе
			
			// Округлим результат
			ОтчислениеИсчисленное = ОбщегоНазначения.ОкруглитьЧисло(ОтчислениеИсчисленное, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
			
		КонецЕсли;
		
		Если КомментироватьРасчет Тогда
			РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеСО.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета);
			
			СОДолжныБытьРассчитаны = Истина;
			МассивПараметровРасшифровки = Новый Массив;
			МассивПараметровРасшифровки.Добавить(ДанныеСО.ФизЛицо);
			
			Если ДанныеСО.ПризнакФизЛицаБезСоциальногоСтрахования <> 0 Тогда                                                             
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьГражданствоФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Не подлежит социальному страхованию", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				СОДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			Если ДанныеСО.ПризнакФизЛицаПенсионера <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьПенсионноеОбеспечениеФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является пенсионером", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				СОДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если СОДолжныБытьРассчитаны Тогда
				РаботаССообщениями.КомментарийРасчета("Доход, принимаемый для исчисления СО: " + ДанныеСО.ОблагаемыйДоход, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("ОПВ за месяц: " + ДанныеСО.ОПВЗаМесяц, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Ограничение на объект исчисления 1 МЗП: " + ДанныеСО.МинОбъектИсчисления, КомментарийВидаРасчета);
				Если ПериодРегистрации >= Дата('20190101') Тогда
					РаботаССообщениями.КомментарийРасчета("Ограничение по доходу в пределах 7 МЗП: " + ДанныеСО.РазмерОграниченияПоДоходах, КомментарийВидаРасчета);
				Иначе
					РаботаССообщениями.КомментарийРасчета("Ограничение по доходу в пределах 10 МЗП: " + ДанныеСО.РазмерОграниченияПоДоходах, КомментарийВидаРасчета);
				КонецЕсли;
				
				Если ДанныеСО.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Объект исчисления СО за месяц: " + ОблагаемаяБазаЗаМесяц, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления СО: " + ДанныеСО.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета);
				КонецЕсли;
				
				РаботаССообщениями.КомментарийРасчета("Объект исчисления СО: " + ОблагаемаяБаза, КомментарийВидаРасчета);
				
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.КомментарийРасчета("Процент СО: ", КомментарийВидаРасчета, ДанныеСО.ПроцентСтавки, РасшифровкаСтавки);
				Если ДанныеСО.РанееОтчисленияИсчисленные <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("СО за месяц: " + СОЗаМесяц, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленные СО: " + ДанныеСО.РанееОтчисленияИсчисленные, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			РаботаССообщениями.КомментарийРасчета("Исчисленные СО: " + ОтчислениеИсчисленное, КомментарийВидаРасчета);
		КонецЕсли;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ОтчислениеИсчисленное = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру

			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеСО.ФизЛицо;
			Движение.СтруктурнаяЕдиница			= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеСО.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Отчисление					= ОтчислениеИсчисленное;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСО.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСО.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСО.Удалить(ДанныеСО.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСО.ФизЛицо;
		Строка.Отчисление					= ОтчислениеИсчисленное;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеСО.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеСО
	Для Каждого Элемент Из РаботникиДляРасчетаСО Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеСО = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеСО.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеСО.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Отчисление, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеСО);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Отчисление"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Отчисление");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымСО

// Заполняет табличную часть ИсчисленныйСН по переданным данным расчета СН
//
// Параметры: 
//	РезультатСН - таблица значений - данные расчета СН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьТабличнуюЧастьПоДаннымСН(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт

	Если ПериодРегистрации >= '20220101' Тогда
		ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2022(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
	ИначеЕсли ПериодРегистрации >= '20210101' Тогда
		ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2021(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
    ИначеЕсли ПериодРегистрации >= '20200101' Тогда
		ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2020(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
	ИначеЕсли ПериодРегистрации >= '20190101' Тогда
		ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2019(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
	ИначеЕсли ПериодРегистрации >= '20090101' Тогда
		ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2009(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
	Иначе
		ЗаполнитьТабличнуюЧастьПоДаннымСНДо2009(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоДаннымСН()

// Заполняет табличную часть ИсчисленныйСН по переданным данным расчета СН
//
// Параметры: 
//	РезультатСН - таблица значений - данные расчета СН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьТабличнуюЧастьПоДаннымСНДо2009(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено)

	// Правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;

	УжеИсчислили = 0;
	ТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	ТекущийГод = 0;
	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СН
	РаботникиДляРасчетаСН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения	
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
			КонецЕсли;
			РаботникиДляРасчетаСН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;
	Иначе
		// при расчете всех строк - сохраняем только список физлиц (без сумм)
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			РаботникиДляРасчетаСН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета СН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Социальный налог</B>");
	КонецЕсли;

	Если РезультатСН.Колонки.Найти("ПризнакИндивидуальногоПредпринимателя") <> Неопределено Тогда
		НалогоплательщикЯвляетсяИП = Истина;
	Иначе
		НалогоплательщикЯвляетсяИП = Ложь;
	КонецЕсли;
	
	ДанныеСН = РезультатСН.Выбрать();
	
	Пока ДанныеСН.Следующий() Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеСН.Период, ПравилоОкругления);
		КонецЕсли;
	
		// проверим заполненность необходимых реквизитов
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			
			Если ДанныеСН.ПроцентСтавки = 0 И ДанныеСН.СуммаНалогаПредыдущегоПредела = 0 И ДанныеСН.ОблагаемаяСумма <> 0 Тогда
				МассивПараметровСтавки = Новый Массив();
				МассивПараметровСтавки.Добавить(ДанныеСН.ШкалаСтавокСН);
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОСтавкахИПНиСН", МассивПараметровСтавки);
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не заполнено значение ставки " + НРег(Лев(ДанныеСН.ШкалаСтавокСН, 1)) + Сред(ДанныеСН.ШкалаСтавокСН, 2), РасшифровкаСтавки);
				БылаОшибка = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ДанныеСН.РазмерМРП = 0 Тогда
				РасшифровкаМРП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не определен размер месячного расчетного показателя", РасшифровкаМРП);
				БылаОшибка = Истина;
			КонецЕсли;
			
			МассивПараметровУчетнаяПолитика = Новый Массив;
			МассивПараметровУчетнаяПолитика.Добавить(ДанныеСН.Налогоплательщик);
			РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметровУчетнаяПолитика);
			
			Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не указан коэффициент МРП за индивидуального предпринимателя", РасшифровкаУчетнойПолитики);
				БылаОшибка = Истина;
			КонецЕсли;
			Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не указан коэффициент МРП за наемного работника", РасшифровкаУчетнойПолитики);
				БылаОшибка = Истина;
			КонецЕсли;
		
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизлицо <> ДанныеСН.ФизЛицо ИЛИ ТекущийГод <> Год(ДанныеСН.Период) Тогда
			УжеИсчислили = 0;
			ТекущееФизлицо = ДанныеСН.ФизЛицо;
			ТекущийГод = Год(ДанныеСН.Период);
		КонецЕсли;
		
		НалогИсчисленный = ?(ДанныеСН.НалогИсчисленный = null, 0, ДанныеСН.НалогИсчисленный) - УжеИсчислили;
		
		// Округлить результат
		НалогИсчисленный = ОбщегоНазначения.ОкруглитьЧисло(НалогИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		Если КомментироватьРасчет Тогда
			
			Если ДанныеСН.Период = ПериодРегистрации ИЛИ НалогИсчисленный <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеСН.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета);
				
				Если НЕ НалогоплательщикЯвляетсяИП Тогда
				
					МассивПараметровРасшифровки = Новый Массив;
					МассивПараметровРасшифровки.Добавить(ДанныеСН.ФизЛицо);

					РаботаССообщениями.КомментарийРасчета("Начислено доходов с нач. года: " + ДанныеСН.СуммаДоходаВсего, КомментарийВидаРасчета);				
					Если ДанныеСН.СуммаНеоблагаемогоДохода <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Доходы, не подлежащие налогообложению: " + ДанныеСН.СуммаНеоблагаемогоДохода, КомментарийВидаРасчета);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("ОПВ с нач. года: " + ДанныеСН.ОПВЗаГод, КомментарийВидаРасчета);
					Если ДанныеСН.МесяцНачалаНалоговогоГода = NULL Тогда
						РаботаССообщениями.КомментарийРасчета("Не является постоянным работником, коэффициент перерасчета " + ДанныеСН.КоэффициентПересчета, КомментарийВидаРасчета);
					ИначеЕсли Год(ДанныеСН.МесяцНачалаНалоговогоГода) < Год(ДанныеСН.Период) Тогда
						РаботаССообщениями.КомментарийРасчета("Работает с начала года, коэффициент перерасчета " + ДанныеСН.КоэффициентПересчета, КомментарийВидаРасчета);
					Иначе
						РаботаССообщениями.КомментарийРасчета("Начало налогового года с " + Формат(ДанныеСН.МесяцНачалаНалоговогоГода, "ДФ='дд.ММ.гг'") + ", коэффициент перерасчета " + ДанныеСН.КоэффициентПересчета, КомментарийВидаРасчета);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("Расчетная сумма дохода, облагаемая СН: " + ДанныеСН.ОблагаемаяСумма, КомментарийВидаРасчета);
					
					МассивПараметровСтавки = Новый Массив();
					МассивПараметровСтавки.Добавить(ДанныеСН.ШкалаСтавокСН);
					РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОСтавкахИПНиСН", МассивПараметровСтавки);
					
					РасшифровкаГражданства = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьГражданствоФизЛица", МассивПараметровРасшифровки);
					
					Если ДанныеСН.ПризнакИностранногоСпециалиста = 0 Тогда
						РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Не является иностранным специалистом", РасшифровкаГражданства);
					Иначе
						РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является иностранным специалистом", РасшифровкаГражданства);
					КонецЕсли;
					
					КомментарийСтавки = РаботаССообщениями.КомментарийРасчета("Применяется шкала ставок ", КомментарийВидаРасчета, НРег(Лев(ДанныеСН.ШкалаСтавокСН, 1)) + Сред(ДанныеСН.ШкалаСтавокСН, 2), РасшифровкаСтавки);
					РаботаССообщениями.КомментарийРасчета("Сумма дохода с: " + ДанныеСН.СуммаДоходаС, КомментарийСтавки);
					РаботаССообщениями.КомментарийРасчета("Сумма дохода по: " + ДанныеСН.СуммаДоходаПо, КомментарийСтавки);
					РаботаССообщениями.КомментарийРасчета("Процент СН: " + ДанныеСН.ПроцентСтавки, КомментарийСтавки);
					РаботаССообщениями.КомментарийРасчета("Фикс. сумма налога: " + ДанныеСН.СуммаНалогаПредыдущегоПредела, КомментарийСтавки);
					
					РаботаССообщениями.КомментарийРасчета("СН с расчетной суммы дохода: " + ДанныеСН.СНЗаГод, КомментарийВидаРасчета);
					Если ДанныеСН.СОЗаГод <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("СО с нач. года: " + ДанныеСН.СОЗаГод, КомментарийВидаРасчета);
					КонецЕсли;
					Если ДанныеСН.РанееНалогИсчисленный <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Ранее исчислен СН с нач. года: " + ДанныеСН.РанееНалогИсчисленный, КомментарийВидаРасчета);
					КонецЕсли;
					
				Иначе
				
					МассивПараметровРасшифровки = Новый Массив;
					МассивПараметровРасшифровки.Добавить(ДанныеСН.Налогоплательщик);
				
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РасшифровкаОрганизации = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьФормуОрганизации", МассивПараметровРасшифровки);
						РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является индивидуальным предпринимателем", РасшифровкаОрганизации);
					Иначе
						РаботаССообщениями.КомментарийРасчета("Является наемным работником", КомментарийВидаРасчета);
					КонецЕсли;
					
					РасшифровкаМРП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
					РаботаССообщениями.КомментарийРасчета("Размер МРП: ", КомментарийВидаРасчета, ДанныеСН.РазмерМРП, РасшифровкаМРП);
					
					РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметровРасшифровки);
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Коэффициент МРП: ", КомментарийВидаРасчета, ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя, РасшифровкаУчетнойПолитики);
					Иначе
						РаботаССообщениями.КомментарийРасчета("Коэффициент МРП: ", КомментарийВидаРасчета, ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника, РасшифровкаУчетнойПолитики);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("СО за месяц: " + ДанныеСН.СОЗаМесяц, КомментарийВидаРасчета);
					Если ДанныеСН.РанееНалогИсчисленный <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("СН за месяц: " + ДанныеСН.СНЗаМесяц, КомментарийВидаРасчета);
						РаботаССообщениями.КомментарийРасчета("Ранее исчислен СН за месяц: " + ДанныеСН.РанееНалогИсчисленный, КомментарийВидаРасчета);
					КонецЕсли;
					
				КонецЕсли;
					
				РаботаССообщениями.КомментарийРасчета("Исчисленный СН: " + НалогИсчисленный, КомментарийВидаРасчета);
				
			КонецЕсли;
		
		КонецЕсли;
		
		Если НалогИсчисленный = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСН.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСН.Удалить(ДанныеСН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.МесяцНалоговогоПериода 		= ДанныеСН.Период;
		
		// Запомним суммы для следующей итерации
		УжеИсчислили = УжеИсчислили + НалогИсчисленный;

	КонецЦикла;
	
	// заполним ИсчисленныйСН
	Для Каждого Элемент Из РаботникиДляРасчетаСН Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйСН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйСН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйСН.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Налог");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйСН);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоДаннымСНДо2009()

// Заполняет табличную часть ИсчисленныйСН по переданным данным расчета СН
//
// Параметры: 
//	РезультатСН - таблица значений - данные расчета СН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2009(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина)

	// Правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	СоответствиеСтавкиСН = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СН
	РаботникиДляРасчетаСН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения	
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
						
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаСН.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;
			
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ОблагаемаяБаза, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
			КонецЕсли;
			МассивСтрок.Добавить(СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаСН.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета СН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Социальный налог</B>");
	КонецЕсли;

	Если РезультатСН.Колонки.Найти("ПризнакИндивидуальногоПредпринимателя") <> Неопределено Тогда
		НалогоплательщикЯвляетсяИП = Истина;
	Иначе
		НалогоплательщикЯвляетсяИП = Ложь;
	КонецЕсли;
	
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	ДанныеСН = РезультатСН.Выбрать();
	
	Пока ДанныеСН.Следующий() Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеСН.Период);
	
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеСН.Период, ПравилоОкругления);
		КонецЕсли;
		
		// проверим заполненность необходимых реквизитов
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			
			// получим ставку СН
			ПроцентСтавки = СоответствиеСтавкиСН[ДанныеСН.Период];
			Если ПроцентСтавки = Неопределено Тогда
				ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
				СоответствиеСтавкиСН.Вставить(ДанныеСН.Период, ПроцентСтавки);			
			КонецЕсли;
		
			Если НЕ ЗначениеЗаполнено(ПроцентСтавки) Тогда
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не заполнено значение ставки социального налога", РасшифровкаСтавки);
				БылаОшибка = Истина;
			КонецЕсли;
			
			Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога И ДанныеСН.РазмерМЗП = 0 Тогда
				РасшифровкаМЗП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не определен размер минимальной заработной платы", РасшифровкаМЗП);
				БылаОшибка = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ДанныеСН.РазмерМРП = 0 Тогда
				РасшифровкаМРП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не определен размер месячного расчетного показателя", РасшифровкаМРП);
				БылаОшибка = Истина;
			КонецЕсли;
			
			МассивПараметровУчетнаяПолитика = Новый Массив;
			МассивПараметровУчетнаяПолитика.Добавить(ДанныеСН.Налогоплательщик);
			РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметровУчетнаяПолитика);
			
			Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не указан коэффициент МРП за индивидуального предпринимателя", РасшифровкаУчетнойПолитики);
				БылаОшибка = Истина;
			КонецЕсли;
			Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не указан коэффициент МРП за наемного работника", РасшифровкаУчетнойПолитики);
				БылаОшибка = Истина;
			КонецЕсли;
		
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			// Расчет налога для юр.лица
			ОблагаемаяСумма = Макс(ДанныеСН.ОблагаемыйДоход - ДанныеСН.ИсчисленныеВзносы, 0);
			
			Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога И ОблагаемаяСумма > 0 Тогда
				// включено ограничение на нижний предел - не менее минимальной заработной платы
				Если ОблагаемаяСумма < ДанныеСН.РазмерМЗП Тогда
					ОблагаемаяСумма = ДанныеСН.РазмерМЗП;
				КонецЕсли;
			КонецЕсли;
			
			СуммаНалогаДоВычетаСО = ОблагаемаяСумма * ПроцентСтавки / 100;
			
			// окончательная сумма налога
			НалогИсчисленный = Макс(СуммаНалогаДоВычетаСО - ДанныеСН.ИсчисленныеОтчисления, 0) - ДанныеСН.РанееИсчисленныйНалог;
			
		Иначе
			// расчет налога для ИП произведен уже в запросе
			НалогИсчисленный = ?(ДанныеСН.НалогИсчисленный = null, 0, ДанныеСН.НалогИсчисленный);
		КонецЕсли;
		
		// Округлить результат
		НалогИсчисленный = ОбщегоНазначения.ОкруглитьЧисло(НалогИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		Если Не НалогоплательщикЯвляетсяИП Тогда
			ОблагаемаяБаза = ОблагаемаяСумма - ДанныеСН.РанееИсчисленнаяОблагаемаяБаза;
		Иначе 
			ОблагаемаяБаза = 0;
		КонецЕсли;
				
		Если КомментироватьРасчет Тогда
			
			Если ДанныеСН.Период = ПериодРегистрации ИЛИ НалогИсчисленный <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеСН.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета);
				
				Если НЕ НалогоплательщикЯвляетсяИП Тогда
				
					МассивПараметровРасшифровки = Новый Массив;
					МассивПараметровРасшифровки.Добавить(ДанныеСН.ФизЛицо);

					РаботаССообщениями.КомментарийРасчета("Начислено доходов: " + ДанныеСН.СуммаДоходаВсего, КомментарийВидаРасчета);				
					Если ДанныеСН.СуммаНеоблагаемогоДохода <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Доходы, не подлежащие налогообложению: " + ДанныеСН.СуммаНеоблагаемогоДохода, КомментарийВидаРасчета);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("ОПВ за месяц: " + ДанныеСН.ИсчисленныеВзносы, КомментарийВидаРасчета);
					
					Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога Тогда
						МассивПараметровУчетнаяПолитика = Новый Массив;
						МассивПараметровУчетнаяПолитика.Добавить(Налогоплательщик);
						РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметровУчетнаяПолитика);
						
						РаботаССообщениями.КомментарийРасчета("Ограничение на минимальную сумму облагаемого дохода (не менее МЗП): ", КомментарийВидаРасчета, ДанныеСН.РазмерМЗП, РасшифровкаУчетнойПолитики);
					КонецЕсли;
					
					Если ДанныеСН.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Объект исчисления СН за месяц: " + ОблагаемаяСумма, КомментарийВидаРасчета);
						РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления СН: " + ДанныеСН.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("Объект исчисления СН: " + ОблагаемаяБаза, КомментарийВидаРасчета);
						
					// ставка
					РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
					РаботаССообщениями.КомментарийРасчета("Процент СН: ", КомментарийВидаРасчета, ПроцентСтавки, РасшифровкаСтавки);
					
					РаботаССообщениями.КомментарийРасчета("СН с расчетной суммы дохода: " + СуммаНалогаДоВычетаСО, КомментарийВидаРасчета);
					Если ДанныеСН.ИсчисленныеОтчисления <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("СО за месяц: " + ДанныеСН.ИсчисленныеОтчисления, КомментарийВидаРасчета);
					КонецЕсли;
					Если ДанныеСН.РанееИсчисленныйНалог <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Ранее исчислен СН за месяц: " + ДанныеСН.РанееИсчисленныйНалог, КомментарийВидаРасчета);
					КонецЕсли;
					
				Иначе
				
					МассивПараметровРасшифровки = Новый Массив;
					МассивПараметровРасшифровки.Добавить(ДанныеСН.Налогоплательщик);
				
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РасшифровкаОрганизации = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьФормуОрганизации", МассивПараметровРасшифровки);
						РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является индивидуальным предпринимателем", РасшифровкаОрганизации);
					Иначе
						РаботаССообщениями.КомментарийРасчета("Является наемным работником", КомментарийВидаРасчета);
					КонецЕсли;
					
					РасшифровкаМРП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
					РаботаССообщениями.КомментарийРасчета("Размер МРП: ", КомментарийВидаРасчета, ДанныеСН.РазмерМРП, РасшифровкаМРП);
					
					РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметровРасшифровки);
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Коэффициент МРП: ", КомментарийВидаРасчета, ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя, РасшифровкаУчетнойПолитики);
					Иначе
						РаботаССообщениями.КомментарийРасчета("Коэффициент МРП: ", КомментарийВидаРасчета, ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника, РасшифровкаУчетнойПолитики);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("СО за месяц: " + ДанныеСН.СОЗаМесяц, КомментарийВидаРасчета);
					Если ДанныеСН.РанееНалогИсчисленный <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("СН за месяц: " + ДанныеСН.СНЗаМесяц, КомментарийВидаРасчета);
						РаботаССообщениями.КомментарийРасчета("Ранее исчислен СН за месяц: " + ДанныеСН.РанееНалогИсчисленный, КомментарийВидаРасчета);
					КонецЕсли;
					
				КонецЕсли;
					
				РаботаССообщениями.КомментарийРасчета("Исчисленный СН: " + НалогИсчисленный, КомментарийВидаРасчета);
				
			КонецЕсли;
		
		КонецЕсли;
		
		Если Не НалогоплательщикЯвляетсяИП Тогда
			ОблагаемаяБаза = ОблагаемаяСумма - ДанныеСН.РанееИсчисленнаяОблагаемаяБаза;
		Иначе 
			ОблагаемаяБаза = 0;
		КонецЕсли;
				
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если НалогИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
				
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСН.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСН.Удалить(ДанныеСН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеСН.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныйСН
	Для Каждого Элемент Из РаботникиДляРасчетаСН Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйСН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйСН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйСН.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Налог, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйСН);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2009()

// Заполняет табличную часть ИсчисленныйСН по переданным данным расчета СН
//
// Параметры: 
//	РезультатСН - таблица значений - данные расчета СН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2019(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина)

	// Правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	СоответствиеСтавкиСН = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СН
	РаботникиДляРасчетаСН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения	
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
						
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаСН.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;
			
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ОблагаемаяБаза, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
			КонецЕсли;
			МассивСтрок.Добавить(СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаСН.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета СН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Социальный налог</B>");
	КонецЕсли;

	Если РезультатСН.Колонки.Найти("ПризнакИндивидуальногоПредпринимателя") <> Неопределено Тогда
		НалогоплательщикЯвляетсяИП = Истина;
	Иначе
		НалогоплательщикЯвляетсяИП = Ложь;
	КонецЕсли;
	
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	ДанныеСН = РезультатСН.Выбрать();
	
	Пока ДанныеСН.Следующий() Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеСН.Период);
	
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеСН.Период, ПравилоОкругления);
		КонецЕсли;
		
		// проверим заполненность необходимых реквизитов
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			
			// получим ставку СН
			ПроцентСтавки = СоответствиеСтавкиСН[ДанныеСН.Период];
			Если ПроцентСтавки = Неопределено Тогда
				ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
				СоответствиеСтавкиСН.Вставить(ДанныеСН.Период, ПроцентСтавки);			
			КонецЕсли;
		
			Если НЕ ЗначениеЗаполнено(ПроцентСтавки) Тогда
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не заполнено значение ставки социального налога", РасшифровкаСтавки);
				БылаОшибка = Истина;
			КонецЕсли;
			
			Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога И ДанныеСН.РазмерМЗП = 0 Тогда
				РасшифровкаМЗП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не определен размер минимальной заработной платы", РасшифровкаМЗП);
				БылаОшибка = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ДанныеСН.РазмерМРП = 0 Тогда
				РасшифровкаМРП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не определен размер месячного расчетного показателя", РасшифровкаМРП);
				БылаОшибка = Истина;
			КонецЕсли;
			
			МассивПараметровУчетнаяПолитика = Новый Массив;
			МассивПараметровУчетнаяПолитика.Добавить(ДанныеСН.Налогоплательщик);
			РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметровУчетнаяПолитика);
			
			Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не указан коэффициент МРП за индивидуального предпринимателя", РасшифровкаУчетнойПолитики);
				БылаОшибка = Истина;
			КонецЕсли;
			Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не указан коэффициент МРП за наемного работника", РасшифровкаУчетнойПолитики);
				БылаОшибка = Истина;
			КонецЕсли;
		
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			
			// Если применяется минимальная база, то доход менее 25МРП будет всегда меньше этой суммы 
			ПрименяемаяКорректировка = ДанныеСН.СуммаКорректировкиДохода;
			
			// Расчет налога для юр.лица
			ОблагаемаяСумма = Макс(ДанныеСН.ОблагаемыйДоход - ДанныеСН.ИсчисленныеВзносы - ПрименяемаяКорректировка, 0);
			
			Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога И ОблагаемаяСумма > 0 Тогда
				// включено ограничение на нижний предел - не менее минимальной заработной платы
				Если ОблагаемаяСумма < ДанныеСН.РазмерМЗП Тогда
					ОблагаемаяСумма = ДанныеСН.РазмерМЗП;
				КонецЕсли;
			Иначе
				ОблагаемаяСумма = ОблагаемаяСумма;	
			КонецЕсли;
			
			СуммаНалогаДоВычетаСО = ОблагаемаяСумма * ПроцентСтавки / 100;
			
			// окончательная сумма налога
			НалогИсчисленный = Макс(СуммаНалогаДоВычетаСО - ДанныеСН.ИсчисленныеОтчисления, 0) - ДанныеСН.РанееИсчисленныйНалог;
			
		Иначе
			// расчет налога для ИП произведен уже в запросе
			НалогИсчисленный = ?(ДанныеСН.НалогИсчисленный = null, 0, ДанныеСН.НалогИсчисленный);
		КонецЕсли;
		
		// Округлить результат
		НалогИсчисленный = ОбщегоНазначения.ОкруглитьЧисло(НалогИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		Если Не НалогоплательщикЯвляетсяИП Тогда
			ОблагаемаяБаза = ОблагаемаяСумма - ДанныеСН.РанееИсчисленнаяОблагаемаяБаза;
		Иначе 
			ОблагаемаяБаза = 0;
		КонецЕсли;
				
		Если КомментироватьРасчет Тогда
			
			Если ДанныеСН.Период = ПериодРегистрации ИЛИ НалогИсчисленный <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеСН.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета);
				
				Если НЕ НалогоплательщикЯвляетсяИП Тогда
				
					МассивПараметровРасшифровки = Новый Массив;
					МассивПараметровРасшифровки.Добавить(ДанныеСН.ФизЛицо);

					РаботаССообщениями.КомментарийРасчета("Начислено доходов: " + ДанныеСН.СуммаДоходаВсего, КомментарийВидаРасчета);				
					Если ДанныеСН.СуммаНеоблагаемогоДохода <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Доходы, не подлежащие налогообложению: " + ДанныеСН.СуммаНеоблагаемогоДохода, КомментарийВидаРасчета);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("ОПВ за месяц: " + ДанныеСН.ИсчисленныеВзносы, КомментарийВидаРасчета);
					
					Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога Тогда
						МассивПараметровУчетнаяПолитика = Новый Массив;
						МассивПараметровУчетнаяПолитика.Добавить(Налогоплательщик);
						РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметровУчетнаяПолитика);
						
						РаботаССообщениями.КомментарийРасчета("Ограничение на минимальную сумму облагаемого дохода (не менее МЗП): ", КомментарийВидаРасчета, ДанныеСН.РазмерМЗП, РасшифровкаУчетнойПолитики);
					КонецЕсли;
					
					Если ДанныеСН.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Объект исчисления СН за месяц: " + ОблагаемаяСумма, КомментарийВидаРасчета);
						РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления СН: " + ДанныеСН.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("Объект исчисления СН: " + ОблагаемаяБаза, КомментарийВидаРасчета);
						
					// ставка
					РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
					РаботаССообщениями.КомментарийРасчета("Процент СН: ", КомментарийВидаРасчета, ПроцентСтавки, РасшифровкаСтавки);
					
					РаботаССообщениями.КомментарийРасчета("СН с расчетной суммы дохода: " + СуммаНалогаДоВычетаСО, КомментарийВидаРасчета);
					Если ДанныеСН.ИсчисленныеОтчисления <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("СО за месяц: " + ДанныеСН.ИсчисленныеОтчисления, КомментарийВидаРасчета);
					КонецЕсли;
					Если ДанныеСН.РанееИсчисленныйНалог <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Ранее исчислен СН за месяц: " + ДанныеСН.РанееИсчисленныйНалог, КомментарийВидаРасчета);
					КонецЕсли;
					
				Иначе
				
					МассивПараметровРасшифровки = Новый Массив;
					МассивПараметровРасшифровки.Добавить(ДанныеСН.Налогоплательщик);
				
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РасшифровкаОрганизации = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьФормуОрганизации", МассивПараметровРасшифровки);
						РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является индивидуальным предпринимателем", РасшифровкаОрганизации);
					Иначе
						РаботаССообщениями.КомментарийРасчета("Является наемным работником", КомментарийВидаРасчета);
					КонецЕсли;
					
					РасшифровкаМРП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
					РаботаССообщениями.КомментарийРасчета("Размер МРП: ", КомментарийВидаРасчета, ДанныеСН.РазмерМРП, РасшифровкаМРП);
					
					РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметровРасшифровки);
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Коэффициент МРП: ", КомментарийВидаРасчета, ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя, РасшифровкаУчетнойПолитики);
					Иначе
						РаботаССообщениями.КомментарийРасчета("Коэффициент МРП: ", КомментарийВидаРасчета, ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника, РасшифровкаУчетнойПолитики);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("СО за месяц: " + ДанныеСН.СОЗаМесяц, КомментарийВидаРасчета);
					Если ДанныеСН.РанееНалогИсчисленный <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("СН за месяц: " + ДанныеСН.СНЗаМесяц, КомментарийВидаРасчета);
						РаботаССообщениями.КомментарийРасчета("Ранее исчислен СН за месяц: " + ДанныеСН.РанееНалогИсчисленный, КомментарийВидаРасчета);
					КонецЕсли;
					
				КонецЕсли;
					
				РаботаССообщениями.КомментарийРасчета("Исчисленный СН: " + НалогИсчисленный, КомментарийВидаРасчета);
				
			КонецЕсли;
		
		КонецЕсли;
		
		Если Не НалогоплательщикЯвляетсяИП Тогда
			ОблагаемаяБаза = ОблагаемаяСумма - ДанныеСН.РанееИсчисленнаяОблагаемаяБаза;
		Иначе 
			ОблагаемаяБаза = 0;
		КонецЕсли;
				
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если НалогИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
				
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСН.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСН.Удалить(ДанныеСН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеСН.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныйСН
	Для Каждого Элемент Из РаботникиДляРасчетаСН Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйСН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйСН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйСН.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Налог, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйСН);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2009()

// Заполняет табличную часть ИсчисленныйСН по переданным данным расчета СН
//
// Параметры: 
//	РезультатСН - таблица значений - данные расчета СН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2020(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина)

	// Правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	СоответствиеСтавкиСН = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СН
	РаботникиДляРасчетаСН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения	
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
						
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаСН.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;
			
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ОблагаемаяБаза, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
			КонецЕсли;
			МассивСтрок.Добавить(СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаСН.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета СН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Социальный налог</B>");
	КонецЕсли;

	Если РезультатСН.Колонки.Найти("ПризнакИндивидуальногоПредпринимателя") <> Неопределено Тогда
		НалогоплательщикЯвляетсяИП = Истина;
	Иначе
		НалогоплательщикЯвляетсяИП = Ложь;
	КонецЕсли;
	
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	ДанныеСН = РезультатСН.Выбрать();
	
	Пока ДанныеСН.Следующий() Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеСН.Период);
	
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеСН.Период, ПравилоОкругления);
		КонецЕсли;
		
		// проверим заполненность необходимых реквизитов
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			
			// получим ставку СН
			ПроцентСтавки = СоответствиеСтавкиСН[ДанныеСН.Период];
			Если ПроцентСтавки = Неопределено Тогда
				ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
				СоответствиеСтавкиСН.Вставить(ДанныеСН.Период, ПроцентСтавки);			
			КонецЕсли;
		
			//Если НЕ ЗначениеЗаполнено(ПроцентСтавки) Тогда
			//	РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
			//	РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не заполнено значение ставки социального налога", РасшифровкаСтавки);
			//	БылаОшибка = Истина;
			//КонецЕсли;
			
			Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога И ДанныеСН.РазмерМЗП = 0 Тогда
				РасшифровкаМЗП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не определен размер минимальной заработной платы", РасшифровкаМЗП);
				БылаОшибка = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ДанныеСН.РазмерМРП = 0 Тогда
				РасшифровкаМРП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не определен размер месячного расчетного показателя", РасшифровкаМРП);
				БылаОшибка = Истина;
			КонецЕсли;
			
			МассивПараметровУчетнаяПолитика = Новый Массив;
			МассивПараметровУчетнаяПолитика.Добавить(ДанныеСН.Налогоплательщик);
			РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметровУчетнаяПолитика);
			
			Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не указан коэффициент МРП за индивидуального предпринимателя", РасшифровкаУчетнойПолитики);
				БылаОшибка = Истина;
			КонецЕсли;
			//Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = 0 Тогда
			//	РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не указан коэффициент МРП за наемного работника", РасшифровкаУчетнойПолитики);
			//	БылаОшибка = Истина;
			//КонецЕсли;
		
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			
			ПрименяемаяКорректировка = 0;
			
			// Если применяется минимальная база, то доход менее 25МРП будет всегда меньше этой суммы 
			Если ПроведениеРасчетовПолныеПрава.ПрименятьКорректировкуПрочихНалоговВзносовОтчислений(Налогоплательщик, ПериодРегистрации) Тогда
				
				ПрименяемаяКорректировка = ДанныеСН.СуммаКорректировкиДохода;
				
			КонецЕсли;
			
			// Расчет налога для юр.лица
			ОблагаемаяСумма = Макс(ДанныеСН.ОблагаемыйДоход - ДанныеСН.ИсчисленныеОПВ - ДанныеСН.ИсчисленныеВОСМС - ПрименяемаяКорректировка, 0);
			
			Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога И ОблагаемаяСумма > 0 Тогда
				// включено ограничение на нижний предел - не менее минимальной заработной платы
				Если ОблагаемаяСумма < ДанныеСН.РазмерМЗП Тогда
					ОблагаемаяСумма = ДанныеСН.РазмерМЗП;
				КонецЕсли;
			Иначе
				ОблагаемаяСумма = ОблагаемаяСумма;	
			КонецЕсли;
			
			СуммаНалогаДоВычетаСО = ОблагаемаяСумма * ПроцентСтавки / 100;
			
			// окончательная сумма налога
			НалогИсчисленный = Макс(СуммаНалогаДоВычетаСО - ДанныеСН.ИсчисленныеОтчисления, 0) - ДанныеСН.РанееИсчисленныйНалог;
			
		Иначе
			// расчет налога для ИП произведен уже в запросе
			НалогИсчисленный = ?(ДанныеСН.НалогИсчисленный = null, 0, ДанныеСН.НалогИсчисленный);
		КонецЕсли;
		
		// Округлить результат
		НалогИсчисленный = ОбщегоНазначения.ОкруглитьЧисло(НалогИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		Если Не НалогоплательщикЯвляетсяИП Тогда
			ОблагаемаяБаза = ОблагаемаяСумма - ДанныеСН.РанееИсчисленнаяОблагаемаяБаза;
		Иначе 
			ОблагаемаяБаза = 0;
		КонецЕсли;
				
		Если КомментироватьРасчет Тогда
			
			Если ДанныеСН.Период = ПериодРегистрации ИЛИ НалогИсчисленный <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеСН.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета);
				
				Если НЕ НалогоплательщикЯвляетсяИП Тогда
				
					МассивПараметровРасшифровки = Новый Массив;
					МассивПараметровРасшифровки.Добавить(ДанныеСН.ФизЛицо);

					РаботаССообщениями.КомментарийРасчета("Начислено доходов: " + ДанныеСН.СуммаДоходаВсего, КомментарийВидаРасчета);				
					Если ДанныеСН.СуммаНеоблагаемогоДохода <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Доходы, не подлежащие налогообложению: " + ДанныеСН.СуммаНеоблагаемогоДохода, КомментарийВидаРасчета);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("ОПВ за месяц: " + ДанныеСН.ИсчисленныеОПВ, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("ВОСМС за месяц: " + ДанныеСН.ИсчисленныеВОСМС, КомментарийВидаРасчета);
					
					Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога Тогда
						МассивПараметровУчетнаяПолитика = Новый Массив;
						МассивПараметровУчетнаяПолитика.Добавить(Налогоплательщик);
						РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметровУчетнаяПолитика);
						
						РаботаССообщениями.КомментарийРасчета("Ограничение на минимальную сумму облагаемого дохода (не менее МЗП): ", КомментарийВидаРасчета, ДанныеСН.РазмерМЗП, РасшифровкаУчетнойПолитики);
					КонецЕсли;
					
					Если ДанныеСН.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Объект исчисления СН за месяц: " + ОблагаемаяСумма, КомментарийВидаРасчета);
						РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления СН: " + ДанныеСН.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("Объект исчисления СН: " + ОблагаемаяБаза, КомментарийВидаРасчета);
						
					// ставка
					РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
					РаботаССообщениями.КомментарийРасчета("Процент СН: ", КомментарийВидаРасчета, ПроцентСтавки, РасшифровкаСтавки);
					
					РаботаССообщениями.КомментарийРасчета("СН с расчетной суммы дохода: " + СуммаНалогаДоВычетаСО, КомментарийВидаРасчета);
					Если ДанныеСН.ИсчисленныеОтчисления <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("СО за месяц: " + ДанныеСН.ИсчисленныеОтчисления, КомментарийВидаРасчета);
					КонецЕсли;
					Если ДанныеСН.РанееИсчисленныйНалог <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Ранее исчислен СН за месяц: " + ДанныеСН.РанееИсчисленныйНалог, КомментарийВидаРасчета);
					КонецЕсли;
					
				Иначе
				
					МассивПараметровРасшифровки = Новый Массив;
					МассивПараметровРасшифровки.Добавить(ДанныеСН.Налогоплательщик);
				
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РасшифровкаОрганизации = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьФормуОрганизации", МассивПараметровРасшифровки);
						РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является индивидуальным предпринимателем", РасшифровкаОрганизации);
					Иначе
						РаботаССообщениями.КомментарийРасчета("Является наемным работником", КомментарийВидаРасчета);
					КонецЕсли;
					
					РасшифровкаМРП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
					РаботаССообщениями.КомментарийРасчета("Размер МРП: ", КомментарийВидаРасчета, ДанныеСН.РазмерМРП, РасшифровкаМРП);
					
					РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметровРасшифровки);
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Коэффициент МРП: ", КомментарийВидаРасчета, ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя, РасшифровкаУчетнойПолитики);
					Иначе
						РаботаССообщениями.КомментарийРасчета("Коэффициент МРП: ", КомментарийВидаРасчета, ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника, РасшифровкаУчетнойПолитики);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("СО за месяц: " + ДанныеСН.СОЗаМесяц, КомментарийВидаРасчета);
					Если ДанныеСН.РанееНалогИсчисленный <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("СН за месяц: " + ДанныеСН.СНЗаМесяц, КомментарийВидаРасчета);
						РаботаССообщениями.КомментарийРасчета("Ранее исчислен СН за месяц: " + ДанныеСН.РанееНалогИсчисленный, КомментарийВидаРасчета);
					КонецЕсли;
					
				КонецЕсли;
					
				РаботаССообщениями.КомментарийРасчета("Исчисленный СН: " + НалогИсчисленный, КомментарийВидаРасчета);
				
			КонецЕсли;
		
		КонецЕсли;
		
		Если Не НалогоплательщикЯвляетсяИП Тогда
			ОблагаемаяБаза = ОблагаемаяСумма - ДанныеСН.РанееИсчисленнаяОблагаемаяБаза;
		Иначе 
			ОблагаемаяБаза = 0;
		КонецЕсли;
				
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если НалогИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
				
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСН.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСН.Удалить(ДанныеСН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеСН.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныйСН
	Для Каждого Элемент Из РаботникиДляРасчетаСН Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйСН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйСН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйСН.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Налог, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйСН);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2020()

// Заполняет табличную часть ИсчисленныйСН по переданным данным расчета СН
//
// Параметры: 
//	РезультатСН - таблица значений - данные расчета СН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2021(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина)

	// Правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	СоответствиеСтавкиСН = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СН
	РаботникиДляРасчетаСН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения	
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
						
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаСН.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;
			
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ОблагаемаяБаза, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
			КонецЕсли;
			МассивСтрок.Добавить(СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаСН.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета СН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Социальный налог</B>");
	КонецЕсли;

	Если РезультатСН.Колонки.Найти("ПризнакИндивидуальногоПредпринимателя") <> Неопределено Тогда
		НалогоплательщикЯвляетсяИП = Истина;
	Иначе
		НалогоплательщикЯвляетсяИП = Ложь;
	КонецЕсли;
	
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	ДанныеСН = РезультатСН.Выбрать();
	
	Пока ДанныеСН.Следующий() Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеСН.Период);
	
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеСН.Период, ПравилоОкругления);
		КонецЕсли;
		
		// проверим заполненность необходимых реквизитов
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			
			// получим ставку СН
			ПроцентСтавки = СоответствиеСтавкиСН[ДанныеСН.Период];
			Если ПроцентСтавки = Неопределено Тогда
				ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
				СоответствиеСтавкиСН.Вставить(ДанныеСН.Период, ПроцентСтавки);			
			КонецЕсли;
		
			//Если НЕ ЗначениеЗаполнено(ПроцентСтавки) Тогда
			//	РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
			//	РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не заполнено значение ставки социального налога", РасшифровкаСтавки);
			//	БылаОшибка = Истина;
			//КонецЕсли;
			
			Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога И ДанныеСН.РазмерМЗП = 0 Тогда
				РасшифровкаМЗП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не определен размер минимальной заработной платы", РасшифровкаМЗП);
				БылаОшибка = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ДанныеСН.РазмерМРП = 0 Тогда
				РасшифровкаМРП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не определен размер месячного расчетного показателя", РасшифровкаМРП);
				БылаОшибка = Истина;
			КонецЕсли;
			
			МассивПараметровУчетнаяПолитика = Новый Массив;
			МассивПараметровУчетнаяПолитика.Добавить(ДанныеСН.Налогоплательщик);
			РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметровУчетнаяПолитика);
			
			Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не указан коэффициент МРП за индивидуального предпринимателя", РасшифровкаУчетнойПолитики);
				БылаОшибка = Истина;
			КонецЕсли;
			//Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = 0 Тогда
			//	РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не указан коэффициент МРП за наемного работника", РасшифровкаУчетнойПолитики);
			//	БылаОшибка = Истина;
			//КонецЕсли;
		
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			
			// Расчет налога для юр.лица
			ОблагаемаяСумма = Макс(ДанныеСН.ОблагаемыйДоход - ДанныеСН.ИсчисленныеОПВ - ДанныеСН.ИсчисленныеВОСМС, 0);
			
			Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога И ОблагаемаяСумма > 0 Тогда
				// включено ограничение на нижний предел - не менее минимальной заработной платы
				Если ОблагаемаяСумма < ДанныеСН.РазмерМЗП Тогда
					ОблагаемаяСумма = ДанныеСН.РазмерМЗП;
				КонецЕсли;
			Иначе
				ОблагаемаяСумма = ОблагаемаяСумма;	
			КонецЕсли;
			
			СуммаНалогаДоВычетаСО = ОблагаемаяСумма * ПроцентСтавки / 100;
			
			// окончательная сумма налога
			НалогИсчисленный = Макс(СуммаНалогаДоВычетаСО - ДанныеСН.ИсчисленныеОтчисления, 0) - ДанныеСН.РанееИсчисленныйНалог;
			
		Иначе
			// расчет налога для ИП произведен уже в запросе
			НалогИсчисленный = ?(ДанныеСН.НалогИсчисленный = null, 0, ДанныеСН.НалогИсчисленный);
		КонецЕсли;
		
		// Округлить результат
		НалогИсчисленный = ОбщегоНазначения.ОкруглитьЧисло(НалогИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		Если Не НалогоплательщикЯвляетсяИП Тогда
			ОблагаемаяБаза = ОблагаемаяСумма - ДанныеСН.РанееИсчисленнаяОблагаемаяБаза;
		Иначе 
			ОблагаемаяБаза = 0;
		КонецЕсли;
				
		Если КомментироватьРасчет Тогда
			
			Если ДанныеСН.Период = ПериодРегистрации ИЛИ НалогИсчисленный <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеСН.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета);
				
				Если НЕ НалогоплательщикЯвляетсяИП Тогда
				
					МассивПараметровРасшифровки = Новый Массив;
					МассивПараметровРасшифровки.Добавить(ДанныеСН.ФизЛицо);

					РаботаССообщениями.КомментарийРасчета("Начислено доходов: " + ДанныеСН.СуммаДоходаВсего, КомментарийВидаРасчета);				
					Если ДанныеСН.СуммаНеоблагаемогоДохода <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Доходы, не подлежащие налогообложению: " + ДанныеСН.СуммаНеоблагаемогоДохода, КомментарийВидаРасчета);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("ОПВ за месяц: " + ДанныеСН.ИсчисленныеОПВ, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("ВОСМС за месяц: " + ДанныеСН.ИсчисленныеВОСМС, КомментарийВидаРасчета);
					
					Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога Тогда
						МассивПараметровУчетнаяПолитика = Новый Массив;
						МассивПараметровУчетнаяПолитика.Добавить(Налогоплательщик);
						РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметровУчетнаяПолитика);
						
						РаботаССообщениями.КомментарийРасчета("Ограничение на минимальную сумму облагаемого дохода (не менее МЗП): ", КомментарийВидаРасчета, ДанныеСН.РазмерМЗП, РасшифровкаУчетнойПолитики);
					КонецЕсли;
					
					Если ДанныеСН.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Объект исчисления СН за месяц: " + ОблагаемаяСумма, КомментарийВидаРасчета);
						РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления СН: " + ДанныеСН.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("Объект исчисления СН: " + ОблагаемаяБаза, КомментарийВидаРасчета);
						
					// ставка
					РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
					РаботаССообщениями.КомментарийРасчета("Процент СН: ", КомментарийВидаРасчета, ПроцентСтавки, РасшифровкаСтавки);
					
					РаботаССообщениями.КомментарийРасчета("СН с расчетной суммы дохода: " + СуммаНалогаДоВычетаСО, КомментарийВидаРасчета);
					Если ДанныеСН.ИсчисленныеОтчисления <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("СО за месяц: " + ДанныеСН.ИсчисленныеОтчисления, КомментарийВидаРасчета);
					КонецЕсли;
					Если ДанныеСН.РанееИсчисленныйНалог <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Ранее исчислен СН за месяц: " + ДанныеСН.РанееИсчисленныйНалог, КомментарийВидаРасчета);
					КонецЕсли;
					
				Иначе
				
					МассивПараметровРасшифровки = Новый Массив;
					МассивПараметровРасшифровки.Добавить(ДанныеСН.Налогоплательщик);
				
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РасшифровкаОрганизации = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьФормуОрганизации", МассивПараметровРасшифровки);
						РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является индивидуальным предпринимателем", РасшифровкаОрганизации);
					Иначе
						РаботаССообщениями.КомментарийРасчета("Является наемным работником", КомментарийВидаРасчета);
					КонецЕсли;
					
					РасшифровкаМРП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
					РаботаССообщениями.КомментарийРасчета("Размер МРП: ", КомментарийВидаРасчета, ДанныеСН.РазмерМРП, РасшифровкаМРП);
					
					РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметровРасшифровки);
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Коэффициент МРП: ", КомментарийВидаРасчета, ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя, РасшифровкаУчетнойПолитики);
					Иначе
						РаботаССообщениями.КомментарийРасчета("Коэффициент МРП: ", КомментарийВидаРасчета, ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника, РасшифровкаУчетнойПолитики);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("СО за месяц: " + ДанныеСН.СОЗаМесяц, КомментарийВидаРасчета);
					Если ДанныеСН.РанееНалогИсчисленный <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("СН за месяц: " + ДанныеСН.СНЗаМесяц, КомментарийВидаРасчета);
						РаботаССообщениями.КомментарийРасчета("Ранее исчислен СН за месяц: " + ДанныеСН.РанееНалогИсчисленный, КомментарийВидаРасчета);
					КонецЕсли;
					
				КонецЕсли;
					
				РаботаССообщениями.КомментарийРасчета("Исчисленный СН: " + НалогИсчисленный, КомментарийВидаРасчета);
				
			КонецЕсли;
		
		КонецЕсли;
		
		Если Не НалогоплательщикЯвляетсяИП Тогда
			ОблагаемаяБаза = ОблагаемаяСумма - ДанныеСН.РанееИсчисленнаяОблагаемаяБаза;
		Иначе 
			ОблагаемаяБаза = 0;
		КонецЕсли;
				
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если НалогИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
				
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСН.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСН.Удалить(ДанныеСН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеСН.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныйСН
	Для Каждого Элемент Из РаботникиДляРасчетаСН Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйСН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйСН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйСН.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Налог, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйСН);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2020()

// Заполняет табличную часть ИсчисленныйСН по переданным данным расчета СН
//
// Параметры: 
//	РезультатСН - таблица значений - данные расчета СН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2022(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина)

	// Правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	СоответствиеСтавкиСН = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СН
	РаботникиДляРасчетаСН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения	
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
						
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаСН.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;
			
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ОблагаемаяБаза, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
			КонецЕсли;
			МассивСтрок.Добавить(СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаСН.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета СН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Социальный налог</B>");
	КонецЕсли;

	Если РезультатСН.Колонки.Найти("ПризнакИндивидуальногоПредпринимателя") <> Неопределено Тогда
		НалогоплательщикЯвляетсяИП = Истина;
	Иначе
		НалогоплательщикЯвляетсяИП = Ложь;
	КонецЕсли;
	
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	ДанныеСН = РезультатСН.Выбрать();
	
	Пока ДанныеСН.Следующий() Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеСН.Период);
	
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеСН.Период, ПравилоОкругления);
		КонецЕсли;
		
		// проверим заполненность необходимых реквизитов
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			
			// получим ставку СН
			ПроцентСтавки = СоответствиеСтавкиСН[ДанныеСН.Период];
			Если ПроцентСтавки = Неопределено Тогда
				ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
				СоответствиеСтавкиСН.Вставить(ДанныеСН.Период, ПроцентСтавки);			
			КонецЕсли;
		
			Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога И ДанныеСН.РазмерМРП = 0 Тогда
				РасшифровкаМЗП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.ОшибкаРасчета("Расчет ИПН: ", "Не определен размер месячного расчетного показателя", РасшифровкаМЗП);
				БылаОшибка = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ДанныеСН.РазмерМРП = 0 Тогда
				РасшифровкаМРП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не определен размер месячного расчетного показателя", РасшифровкаМРП);
				БылаОшибка = Истина;
			КонецЕсли;
			
			МассивПараметровУчетнаяПолитика = Новый Массив;
			МассивПараметровУчетнаяПолитика.Добавить(ДанныеСН.Налогоплательщик);
			РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметровУчетнаяПолитика);
			
			Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = 0 Тогда
				РаботаССообщениями.ОшибкаРасчета("Расчет СН: ", "Не указан коэффициент МРП за индивидуального предпринимателя", РасшифровкаУчетнойПолитики);
				БылаОшибка = Истина;
			КонецЕсли;
		
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			
			// Расчет налога для юр.лица
			ОблагаемаяСумма = Макс(ДанныеСН.ОблагаемыйДоход - ДанныеСН.ИсчисленныеОПВ - ДанныеСН.ИсчисленныеВОСМС, 0);
			
			Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога И ОблагаемаяСумма > 0 Тогда
				// включено ограничение на нижний предел - не менее минимальной заработной платы
				Если ОблагаемаяСумма < ДанныеСН.РазмерМРП * 14 Тогда
					ОблагаемаяСумма = ДанныеСН.РазмерМРП * 14;
				КонецЕсли;
			Иначе
				ОблагаемаяСумма = ОблагаемаяСумма;	
			КонецЕсли;
			
			СуммаНалогаДоВычетаСО = ОблагаемаяСумма * ПроцентСтавки / 100;
			
			// окончательная сумма налога
			НалогИсчисленный = Макс(СуммаНалогаДоВычетаСО - ДанныеСН.ИсчисленныеОтчисления, 0) - ДанныеСН.РанееИсчисленныйНалог;
			
		Иначе
			// расчет налога для ИП произведен уже в запросе
			НалогИсчисленный = ?(ДанныеСН.НалогИсчисленный = null, 0, ДанныеСН.НалогИсчисленный);
		КонецЕсли;
		
		Если Не НалогоплательщикЯвляетсяИП Тогда
			ОблагаемаяБаза = ОблагаемаяСумма - ДанныеСН.РанееИсчисленнаяОблагаемаяБаза;
		Иначе 
			ОблагаемаяБаза = 0;
		КонецЕсли;
		
		// корректировка при округлении расчетов
		Если ОблагаемаяБаза = 0 И (НалогИсчисленный > -1 И НалогИсчисленный < 1) Тогда
		
			НалогИсчисленный = 0;
			
		Иначе
			
			// Округлить результат
			НалогИсчисленный = ОбщегоНазначения.ОкруглитьЧисло(НалогИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
			
		КонецЕсли;
				
		Если КомментироватьРасчет Тогда
			
			Если ДанныеСН.Период = ПериодРегистрации ИЛИ НалогИсчисленный <> 0 Тогда
				РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеСН.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета);
				
				Если НЕ НалогоплательщикЯвляетсяИП Тогда
				
					МассивПараметровРасшифровки = Новый Массив;
					МассивПараметровРасшифровки.Добавить(ДанныеСН.ФизЛицо);

					РаботаССообщениями.КомментарийРасчета("Начислено доходов: " + ДанныеСН.СуммаДоходаВсего, КомментарийВидаРасчета);				
					Если ДанныеСН.СуммаНеоблагаемогоДохода <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Доходы, не подлежащие налогообложению: " + ДанныеСН.СуммаНеоблагаемогоДохода, КомментарийВидаРасчета);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("ОПВ за месяц: " + ДанныеСН.ИсчисленныеОПВ, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("ВОСМС за месяц: " + ДанныеСН.ИсчисленныеВОСМС, КомментарийВидаРасчета);
					
					Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога Тогда
						МассивПараметровУчетнаяПолитика = Новый Массив;
						МассивПараметровУчетнаяПолитика.Добавить(Налогоплательщик);
						РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметровУчетнаяПолитика);
						
						РаботаССообщениями.КомментарийРасчета("Ограничение на минимальную сумму облагаемого дохода (не менее 14 МРП): ", КомментарийВидаРасчета, ДанныеСН.РазмерМРП * 14, РасшифровкаУчетнойПолитики);
					КонецЕсли;
					
					Если ДанныеСН.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Объект исчисления СН за месяц: " + ОблагаемаяСумма, КомментарийВидаРасчета);
						РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления СН: " + ДанныеСН.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("Объект исчисления СН: " + ОблагаемаяБаза, КомментарийВидаРасчета);
						
					// ставка
					РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
					РаботаССообщениями.КомментарийРасчета("Процент СН: ", КомментарийВидаРасчета, ПроцентСтавки, РасшифровкаСтавки);
					
					РаботаССообщениями.КомментарийРасчета("СН с расчетной суммы дохода: " + СуммаНалогаДоВычетаСО, КомментарийВидаРасчета);
					Если ДанныеСН.ИсчисленныеОтчисления <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("СО за месяц: " + ДанныеСН.ИсчисленныеОтчисления, КомментарийВидаРасчета);
					КонецЕсли;
					Если ДанныеСН.РанееИсчисленныйНалог <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Ранее исчислен СН за месяц: " + ДанныеСН.РанееИсчисленныйНалог, КомментарийВидаРасчета);
					КонецЕсли;
					
				Иначе
				
					МассивПараметровРасшифровки = Новый Массив;
					МассивПараметровРасшифровки.Добавить(ДанныеСН.Налогоплательщик);
				
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РасшифровкаОрганизации = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьФормуОрганизации", МассивПараметровРасшифровки);
						РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является индивидуальным предпринимателем", РасшифровкаОрганизации);
					Иначе
						РаботаССообщениями.КомментарийРасчета("Является наемным работником", КомментарийВидаРасчета);
					КонецЕсли;
					
					РасшифровкаМРП = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
					РаботаССообщениями.КомментарийРасчета("Размер МРП: ", КомментарийВидаРасчета, ДанныеСН.РазмерМРП, РасшифровкаМРП);
					
					РасшифровкаУчетнойПолитики = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьУчетнуюПолитикуПоНалоговомуУчету", МассивПараметровРасшифровки);
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("Коэффициент МРП: ", КомментарийВидаРасчета, ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя, РасшифровкаУчетнойПолитики);
					Иначе
						РаботаССообщениями.КомментарийРасчета("Коэффициент МРП: ", КомментарийВидаРасчета, ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника, РасшифровкаУчетнойПолитики);
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("СО за месяц: " + ДанныеСН.СОЗаМесяц, КомментарийВидаРасчета);
					Если ДанныеСН.РанееНалогИсчисленный <> 0 Тогда
						РаботаССообщениями.КомментарийРасчета("СН за месяц: " + ДанныеСН.СНЗаМесяц, КомментарийВидаРасчета);
						РаботаССообщениями.КомментарийРасчета("Ранее исчислен СН за месяц: " + ДанныеСН.РанееНалогИсчисленный, КомментарийВидаРасчета);
					КонецЕсли;
					
				КонецЕсли;
					
				РаботаССообщениями.КомментарийРасчета("Исчисленный СН: " + НалогИсчисленный, КомментарийВидаРасчета);
				
			КонецЕсли;
		
		КонецЕсли;
		
		Если Не НалогоплательщикЯвляетсяИП Тогда
			ОблагаемаяБаза = ОблагаемаяСумма - ДанныеСН.РанееИсчисленнаяОблагаемаяБаза;
		Иначе 
			ОблагаемаяБаза = 0;
		КонецЕсли;
				
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если НалогИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
				
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСН.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСН.Удалить(ДанныеСН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеСН.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныйСН
	Для Каждого Элемент Из РаботникиДляРасчетаСН Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйСН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйСН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйСН.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Налог, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйСН);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2020()

// Заполняет табличную часть ИсчисленныйСН по переданным данным расчета СН
//
// Параметры: 
//	ВидОперации - вид операции расчета пени
//	ПериодРегистрации - месяц, в котором производится расчет пени
//	ТабличнаяЧасть - табличная часть документа РасчетПениОПВиСО
//	РезультатРасчетаПени - данные расчета СН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьТабличнуюЧастьПоДаннымРасчетаПениОПВиСО(ВидОперации, ПериодРегистрации, ТабличнаяЧасть, РезультатРасчетаПени) Экспорт
	
	// правило округления
	Если ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ Тогда
		ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, ПериодРегистрации);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениСО Тогда
		ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, ПериодРегистрации);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениВОСМС Тогда
		ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование, ПериодРегистрации);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениООСМС Тогда
		ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование, ПериодРегистрации);
	Иначе 
		ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы, ПериодРегистрации);
	КонецЕсли;

	ТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по которым считается пени
	РаботникиДляРасчетаПени = Новый Соответствие;
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		РаботникиДляРасчетаПени.Вставить(Строка.Физлицо, Новый Структура("СтруктурнаяЕдиница, ПодразделениеОрганизации, МесяцНалоговогоПериода, ДатаНачала, ДатаОкончания", 
																			Строка.СтруктурнаяЕдиница,
																			Строка.ПодразделениеОрганизации,
																			Строка.МесяцНалоговогоПериода,
																			Строка.ДатаНачала,
																			Строка.ДатаОкончания));
	КонецЦикла;
	
	// очистим результаты расчета пени, которые находятся в табличной части документа
	ТабличнаяЧасть.Очистить(); 
	
	ТекущееФизЛицо = Неопределено;
	ТекущаяСтруктурнаяЕдиница = Неопределено;
	ТекущееПодразделениеОрганизации = Неопределено;
	ТекущийМесяцНалоговогоПериода = Неопределено;
	ТекущаяСтрокаТЧ = Неопределено;
	ТекущаяСуммаЗадолженности = Неопределено;
	ТекущаяСтавкаРефинансирования = Неопределено;
	ТекущийКоэффициент = Неопределено;
	ТекущееЧислоДнейВГоду = Неопределено;
	
	ДанныеРасчетаПени = РезультатРасчетаПени.Выбрать();
	
	Пока ДанныеРасчетаПени.Следующий() Цикл
		
		БылоСообщениеОбОшибке = Ложь;
		Если ДанныеРасчетаПени.СрокПеречисления = NULL Тогда
			
			БылоСообщениеОбОшибке = Истина;
			Сообщить(" " + ДанныеРасчетаПени.ФизЛицо + " за месяц налогового периода " + 
						Формат(ДанныеРасчетаПени.МесяцНалоговогоПериода, "ДФ='ММММ гггг'") +  
						?(ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ, " (месяц выплаты доходов " + Формат(ДанныеРасчетаПени.МесяцВыплатыДоходов, "ДФ='ММММ гггг'") + ")", "") + 
						" не указан срок перечисления!", СтатусСообщения.ОченьВажное);
		КонецЕсли;
		
		Если ДанныеРасчетаПени.СтавкаРефинансирования = NULL Или ДанныеРасчетаПени.СтавкаРефинансирования = 0 Тогда
			БылоСообщениеОбОшибке = Истина;
			Сообщить("Не определено значение ставки рефинансирования на " + Формат(ДанныеРасчетаПени.ДатаНачала, "ДФ=dd.MM.yyyy") + "!", СтатусСообщения.ОченьВажное);
		КонецЕсли;

		Если ДанныеРасчетаПени.Коэффициент = NULL Или ДанныеРасчетаПени.Коэффициент = 0 Тогда
			БылоСообщениеОбОшибке = Истина;
			Сообщить("Не определено значение коэффициента ставки рефинансирования на " + Формат(ДанныеРасчетаПени.ДатаНачала, "ДФ=dd.MM.yyyy") + ", используемого для расчета пени!", СтатусСообщения.ОченьВажное);
		КонецЕсли;
		
		Если БылоСообщениеОбОшибке Тогда
			Продолжить;
		КонецЕсли;
	
		Если ДанныеРасчетаПени.ФизЛицо <> ТекущееФизЛицо
				Или ДанныеРасчетаПени.СтруктурнаяЕдиница <> ТекущаяСтруктурнаяЕдиница
				Или ДанныеРасчетаПени.ПодразделениеОрганизации <> ТекущееПодразделениеОрганизации
				Или ДанныеРасчетаПени.МесяцНалоговогоПериода <> ТекущийМесяцНалоговогоПериода
				Или ДанныеРасчетаПени.СуммаЗадолженности <> ТекущаяСуммаЗадолженности
				Или ДанныеРасчетаПени.СтавкаРефинансирования <> ТекущаяСтавкаРефинансирования 
				Или ДанныеРасчетаПени.Коэффициент <> ТекущийКоэффициент 
				Или ДанныеРасчетаПени.ДнейВГоду <> ТекущееЧислоДнейВГоду Тогда
			
			// сменилось физлицо или месяц налогового периода - создаем новую строку
			ТекущееФизЛицо = ДанныеРасчетаПени.ФизЛицо;
			ТекущаяСтруктурнаяЕдиница = ДанныеРасчетаПени.СтруктурнаяЕдиница;
			ТекущаяПодразделениеОрганизации = ДанныеРасчетаПени.ПодразделениеОрганизации;
			ТекущийМесяцНалоговогоПериода = ДанныеРасчетаПени.МесяцНалоговогоПериода;
			ТекущаяСуммаЗадолженности = ДанныеРасчетаПени.СуммаЗадолженности;
			ТекущаяСтавкаРефинансирования = ДанныеРасчетаПени.СтавкаРефинансирования;
			ТекущийКоэффициент = ДанныеРасчетаПени.Коэффициент;
			ТекущееЧислоДнейВГоду = ДанныеРасчетаПени.ДнейВГоду;
			
			ТекущаяСтрокаТЧ = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаПени.Удалить(ДанныеРасчетаПени.ФизЛицо);
			
			// заполняем новую строку
			ЗаполнитьЗначенияСвойств(ТекущаяСтрокаТЧ, ДанныеРасчетаПени);
		Иначе
			Если ЗначениеЗаполнено(ТекущаяСтрокаТЧ) 
					И КонецДня(ТекущаяСтрокаТЧ.ДатаОкончания) + 1 = НачалоДня(ДанныеРасчетаПени.ДатаНачала) Тогда
				// новую строку не создаем, передвигаем дату окончания в текущей строке в будущее и складываем суммы
				ТекущаяСтрокаТЧ.ДатаОкончания = ДанныеРасчетаПени.ДатаОкончания;
				ТекущаяСтрокаТЧ.Сумма = ТекущаяСтрокаТЧ.Сумма + ДанныеРасчетаПени.Сумма;
			Иначе
				// создаем новую строку
				ТекущаяСтрокаТЧ = ТабличнаяЧасть.Добавить();
				РаботникиДляРасчетаПени.Удалить(ДанныеРасчетаПени.ФизЛицо);
				ЗаполнитьЗначенияСвойств(ТекущаяСтрокаТЧ, ДанныеРасчетаПени);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	// заполним ИсчислениеПени
	Для Каждого Элемент Из РаботникиДляРасчетаПени Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.ФизЛицо = Элемент.Ключ;
		НоваяСтрока.МесяцНалоговогоПериода = Элемент.Значение.МесяцНалоговогоПериода;
		НоваяСтрока.ДатаНачала = Элемент.Значение.ДатаНачала;
		НоваяСтрока.ДатаОкончания = Элемент.Значение.ДатаОкончания;
	КонецЦикла;
	
	// свернем строки с одинаковыми реквизитам
	ТабличнаяЧасть.Свернуть("ФизЛицо, СтруктурнаяЕдиница, ПодразделениеОрганизации, МесяцНалоговогоПериода, ДатаНачала, ДатаОкончания", "Сумма");
	
	// округлим результат расчета - если расчеты производятся не до тиынок
	Если ПравилоОкругления.ПорядокОкругления <> Перечисления.ПорядкиОкругления.Окр0_01 Тогда
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			СтрокаТЧ.Сумма = ОбщегоНазначения.ОкруглитьЧисло(СтрокаТЧ.Сумма, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоДаннымРасчетаПениОПВиСО()

// Заполняет табличную часть по переданным данным расчета ОППВ
//
// Параметры: 
//  НаборЗаписей - набор записей регистра СОРасчетыСФондами
//	РезультатОППВ - таблица значений - данные расчета ОППВ
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымОППВ(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатОППВ, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
	Если ПериодРегистрации < '20140101' Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПравилаОкругления = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ОПВ
	РаботникиДляРасчетаОППВ = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
						
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаОППВ.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;
			
			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Взнос, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаОППВ.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета ОППВ, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Обязательные профессиональные пенсионные взносы</B>"); 
	КонецЕсли;
	
	ДанныеОППВ = РезультатОППВ.Выбрать();
	БылаОшибка = Ложь;
	
	Пока ДанныеОППВ.Следующий() Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеОППВ.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы, ДанныеОППВ.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеОППВ.Период, ПравилоОкругления);
		КонецЕсли;
	
		// проверим заполненность необходимых реквизитов
		//Если ДанныеОППВ.ПроцентСтавки = 0 Тогда
		//	РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
		//	РаботаССообщениями.ОшибкаРасчета("Расчет ОППВ: ", "Не заполнено значение ставки обязательных профессиональных пенсионных взносов", РасшифровкаСтавки); 
		//	БылаОшибка = Истина;
		//КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		ВзносИсчисленный = ДанныеОППВ.ВзносИсчисленный;
		ОблагаемаяБаза = ДанныеОППВ.ОблагаемаяБаза;
		
		// Округлим результат
		ВзносИсчисленный = ОбщегоНазначения.ОкруглитьЧисло(ВзносИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		Если КомментироватьРасчет Тогда
			РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеОППВ.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета);
			
			ОППВДолжныБытьРассчитаны = Истина;
			МассивПараметровРасшифровки = Новый Массив;
			МассивПараметровРасшифровки.Добавить(ДанныеОППВ.ФизЛицо);
			
			Если ДанныеОППВ.ПризнакФизЛицаБезПраваНаПенсию <> 0 Тогда                                                             
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьГражданствоФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Не имеет права на пенсию", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ОППВДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеОППВ.ПризнакФизЛицаПенсионера <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьПенсионноеОбеспечениеФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является пенсионером", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ОППВДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			

			Если ОППВДолжныБытьРассчитаны Тогда
				РаботаССообщениями.КомментарийРасчета("Доход, принимаемый для исчисления ОППВ: " + ДанныеОППВ.ОблагаемыйДоход, КомментарийВидаРасчета);
				
				Если ДанныеОППВ.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Объект исчисления ОППВ за месяц: " + ДанныеОППВ.ОблагаемаяБазаЗаМесяц, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления ОППВ: " + ДанныеОППВ.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета);
				КонецЕсли;
				РаботаССообщениями.КомментарийРасчета("Объект исчисления ОППВ: " + ОблагаемаяБаза, КомментарийВидаРасчета);
				
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.КомментарийРасчета("Процент ОППВ: ", КомментарийВидаРасчета, ДанныеОППВ.ПроцентСтавки, РасшифровкаСтавки);
				Если ДанныеОППВ.РанееИсчисленныйВзнос <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("ОППВ за месяц: " + ДанныеОППВ.ВзносЗаПериод, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленные ОППВ: " + ДанныеОППВ.РанееИсчисленныйВзнос, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			РаботаССообщениями.КомментарийРасчета("Исчисленные ОППВ: " + ВзносИсчисленный, КомментарийВидаРасчета);
		КонецЕсли;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ВзносИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
					
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеОППВ.ФизЛицо;
			Движение.СтруктурнаяЕдиница        	= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеОППВ.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Взнос						= ВзносИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеОППВ.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеОППВ.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаОППВ.Удалить(ДанныеОППВ.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеОППВ.ФизЛицо;
		Строка.Взнос  						= ВзносИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеОППВ.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеОППВ
	Для Каждого Элемент Из РаботникиДляРасчетаОППВ Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйОППВ = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйОППВ.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйОППВ.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Взнос, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйОППВ);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Взнос"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Взнос");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымОППВ

// Заполняет табличную часть по переданным данным расчета ОПВР
//
// Параметры: 
//  НаборЗаписей - набор записей регистра СОРасчетыСФондами
//	РезультатОПВР - таблица значений - данные расчета ОПВР
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымОПВР(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатОПВР, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
	Если ПериодРегистрации < '20240101' Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПравилаОкругления = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ОПВ
	РаботникиДляРасчетаОПВР = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
						
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаОПВР.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;
			
			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Взнос, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаОПВР.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета ОПВР, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Обязательные пенсионные взносы работодателя</B>"); 
	КонецЕсли;
	
	ДанныеОПВР = РезультатОПВР.Выбрать();
	БылаОшибка = Ложь;
	
	Пока ДанныеОПВР.Следующий() Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеОПВР.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя, ДанныеОПВР.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеОПВР.Период, ПравилоОкругления);
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ДанныеОПВР.ДатаРожденияНеУказана
			ИЛИ ДанныеОПВР.ВозрастНеПодходит Тогда
			ВзносИсчисленный = 0;
			ОблагаемаяБаза = 0;
		Иначе
			ВзносИсчисленный = ДанныеОПВР.ВзносИсчисленный;
			ОблагаемаяБаза = ДанныеОПВР.ОблагаемаяБаза;
		КонецЕсли;
		
		// скорректируем погрешность округления, возникающую как доначисление налога,
		// при наличии предыдущих расчетов документов расчета ОПВР в рамках одного периода
		Если ДанныеОПВР.РанееИсчисленныйВзнос > 0
			И ОблагаемаяБаза = 0
			И (ВзносИсчисленный < 1 И ВзносИсчисленный > 0
			ИЛИ ВзносИсчисленный > -1 И ВзносИсчисленный < 0) Тогда
			
			ВзносИсчисленный = 0;
			
		КонецЕсли;

		Если УдалятьСтрокиСНулевымиЗначениями
			И НЕ ДанныеОПВР.ДатаРожденияНеУказана Тогда
			Если ВзносИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Округлим результат
		ВзносИсчисленный = ОбщегоНазначения.ОкруглитьЧисло(ВзносИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		Если КомментироватьРасчет Тогда
			РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеОПВР.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета);
			
			ОПВРДолжныБытьРассчитаны = Истина;
			МассивПараметровРасшифровки = Новый Массив;
			МассивПараметровРасшифровки.Добавить(ДанныеОПВР.ФизЛицо);
			
			Если ДанныеОПВР.ПризнакФизЛицаБезПраваНаПенсию <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьГражданствоФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Не имеет права на пенсию", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ОПВРДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеОПВР.ПризнакФизЛицаПенсионера <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьПенсионноеОбеспечениеФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является пенсионером", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ОПВРДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеОПВР.ПризнакФизЛицаИнвалида <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбИнвалидностиФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является инвалидом I или II группы, у которого инвалидность установлена бессрочно.", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ОПВРДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеОПВР.ДатаРожденияНеУказана Тогда
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Дата рождения не указана.", ДанныеОПВР.ФизЛицо, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ОПВРДолжныБытьРассчитаны = Ложь;
			ИначеЕсли ДанныеОПВР.ВозрастНеПодходит Тогда
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Лицо, родившееся до 1 января 1975 года.", ДанныеОПВР.ФизЛицо, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ОПВРДолжныБытьРассчитаны = Ложь;
			КонецЕсли;

			Если ОПВРДолжныБытьРассчитаны Тогда
				РаботаССообщениями.КомментарийРасчета("Доход, принимаемый для исчисления ОПВР: " + ДанныеОПВР.ОблагаемыйДоход, КомментарийВидаРасчета);
				
				Если ДанныеОПВР.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Объект исчисления ОПВР за месяц: " + ДанныеОПВР.ОблагаемаяБазаЗаМесяц, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления ОПВР: " + ДанныеОПВР.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета);
				КонецЕсли;
				РаботаССообщениями.КомментарийРасчета("Объект исчисления ОПВР: " + ОблагаемаяБаза, КомментарийВидаРасчета);
				
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.КомментарийРасчета("Процент ОПВР: ", КомментарийВидаРасчета, ДанныеОПВР.ПроцентСтавки, РасшифровкаСтавки);
				Если ДанныеОПВР.РанееИсчисленныйВзнос <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("ОПВР за месяц: " + ДанныеОПВР.ВзносЗаПериод, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленные ОПВР: " + ДанныеОПВР.РанееИсчисленныйВзнос, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			РаботаССообщениями.КомментарийРасчета("Исчисленные ОПВР: " + ВзносИсчисленный, КомментарийВидаРасчета);
		КонецЕсли;
		
		Если УдалятьСтрокиСНулевымиЗначениями
			И НЕ ДанныеОПВР.ДатаРожденияНеУказана Тогда
			Если ВзносИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
					
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеОПВР.ФизЛицо;
			Движение.СтруктурнаяЕдиница        	= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеОПВР.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Взнос						= ВзносИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеОПВР.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеОПВР.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаОПВР.Удалить(ДанныеОПВР.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеОПВР.ФизЛицо;
		Строка.Взнос  						= ВзносИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеОПВР.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеОПВР
	Для Каждого Элемент Из РаботникиДляРасчетаОПВР Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйОПВР = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйОПВР.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйОПВР.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Взнос, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйОПВР);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Взнос"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Взнос");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымОПВР

// Заполняет набор записей по переданным данным расчета ООСМС
//
// Параметры: 
//  НаборЗаписей - набор записей регистра ООСМСРасчетыСФондами
//	РезультатООСМС - таблица значений - данные расчета ООСМС
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымООСМС(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатООСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
        		
	Если ПериодРегистрации >= '20220101' Тогда
		ЗаполнитьНаборЗаписейПоДаннымООСМСПосле2022(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатООСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
	Иначе	
		ЗаполнитьНаборЗаписейПоДаннымООСМСДо2022(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатООСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
    КонецЕсли;	
	
КонецПроцедуры

// Заполняет набор записей по переданным данным расчета ООСМС
//
// Параметры: 
//  НаборЗаписей - набор записей регистра ООСМСРасчетыСФондами
//	РезультатООСМС - таблица значений - данные расчета ООСМС
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымООСМСДо2022(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатООСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
    // правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ООСМС
	РаботникиДляРасчетаООСМС = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
						
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаООСМС.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;
			
			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Отчисление, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаООСМС.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета ООСМС, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Отчисления на обязательное социальное медицинское страхование</B>");
	КонецЕсли;
	
	ДанныеООСМС = РезультатООСМС.Выбрать();
	БылаОшибка = Ложь;
	
	Пока ДанныеООСМС.Следующий() Цикл
		
		Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо 
			И ЗначениеЗаполнено(ДанныеООСМС.ФизЛицо) И ДанныеООСМС.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда
			Продолжить;
		КонецЕсли;

		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеООСМС.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование, ДанныеООСМС.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеООСМС.Период, ПравилоОкругления);
		КонецЕсли;
	
		// проверим заполненность необходимых реквизитов
		//Если ДанныеООСМС.ПроцентСтавки = 0 Тогда
		//	РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахОСМС.ПолучитьФормуСписка().Открыть();");
		//	РаботаССообщениями.ОшибкаРасчета("Расчет отчислений ОСМС: ", "Не заполнено значение ставки отчислений ОСМС", РасшифровкаСтавки);
		//	БылаОшибка = Истина;
		//КонецЕсли;
	                     
		Если ДанныеООСМС.РазмерОграниченияПоДоходам = 0 Тогда
			РасшифровкаОграничения = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет отчислений ОСМС: ", "Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам", РасшифровкаОграничения);
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
	
		ООСМСЗаМесяц 		  = ДанныеООСМС.ООСМСЗаМесяц;
		ОблагаемаяБазаЗаМесяц = ДанныеООСМС.ОблагаемаяБазаЗаМесяц;
		
		// пересчитаем исчисленное отлисление за вычетом ранее исчисленных сумм
		ОтчислениеИсчисленное = ООСМСЗаМесяц - ДанныеООСМС.РанееОтчисленияИсчисленные;
		
		// Округлим результат
		ОтчислениеИсчисленное = ОбщегоНазначения.ОкруглитьЧисло(ОтчислениеИсчисленное, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		ОблагаемаяБаза = ОблагаемаяБазаЗаМесяц - ДанныеООСМС.РанееИсчисленнаяОблагаемаяБаза;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ОтчислениеИсчисленное = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		
		Если КомментироватьРасчет Тогда
			РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеООСМС.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета);
			
			ООСМСДолжныБытьРассчитаны = Истина;
			МассивПараметровРасшифровки = Новый Массив;
			МассивПараметровРасшифровки.Добавить(ДанныеООСМС.ФизЛицо);
			
			Если ДанныеООСМС.ПризнакФизЛицаБезМедицинскогоСтрахования <> 0 Тогда                                                             
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьГражданствоФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Не подлежит медицинскому страхованию.", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ООСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеООСМС.ПризнакФизЛицаПенсионера <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьПенсионноеОбеспечениеФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является пенсионером", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ООСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеООСМС.ПризнакФизлицаУчастникаВОВ <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбУчастникеВОВФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является участником ВОВ.", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ООСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеООСМС.ПризнакФизлицаИнвалида <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбИнвалидностиФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является инвалидом", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ООСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;

			Если ООСМСДолжныБытьРассчитаны Тогда
				РаботаССообщениями.КомментарийРасчета("Доход, принимаемый для исчисления отчислений ОСМС: " + ДанныеООСМС.ОблагаемыйДоход, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Ограничение на объект исчисления 1 МЗП: " + ДанныеООСМС.РазмерМЗП, КомментарийВидаРасчета);
				Если ПериодРегистрации >= Дата('20190101') Тогда
					РаботаССообщениями.КомментарийРасчета("Ограничение по доходу в пределах 10 МЗП: " + ДанныеООСМС.РазмерОграниченияПоДоходам, КомментарийВидаРасчета);
				Иначе
					РаботаССообщениями.КомментарийРасчета("Ограничение по доходу в пределах 15 МЗП: " + ДанныеООСМС.РазмерОграниченияПоДоходам, КомментарийВидаРасчета);
				КонецЕсли;
				
				Если ДанныеООСМС.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Объект исчисления отчислений ОСМС за месяц: " + ОблагаемаяБазаЗаМесяц, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления отчислений ОСМС: " + ДанныеООСМС.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета);
				КонецЕсли;
				
				РаботаССообщениями.КомментарийРасчета("Объект исчисления отчислений ОСМС: " + ОблагаемаяБаза, КомментарийВидаРасчета);
				
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахОСМС.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.КомментарийРасчета("Процент отчислений ОСМС: ", КомментарийВидаРасчета, ДанныеООСМС.ПроцентСтавки, РасшифровкаСтавки);
				Если ДанныеООСМС.РанееОтчисленияИсчисленные <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Отчисления ОСМС за месяц: " + ООСМСЗаМесяц, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленные отчисления ОСМС: " + ДанныеООСМС.РанееОтчисленияИсчисленные, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			РаботаССообщениями.КомментарийРасчета("Исчисленные отчисления ОСМС: " + ОтчислениеИсчисленное, КомментарийВидаРасчета);
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру

			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеООСМС.ФизЛицо;
			Движение.СтруктурнаяЕдиница			= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеООСМС.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Отчисление					= ОтчислениеИсчисленное;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеООСМС.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеООСМС.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаООСМС.Удалить(ДанныеООСМС.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеООСМС.ФизЛицо;
		Строка.Отчисление					= ОтчислениеИсчисленное;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеООСМС.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеООСМС
	Для Каждого Элемент Из РаботникиДляРасчетаООСМС Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеООСМС = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеООСМС.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеООСМС.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Отчисление, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеООСМС);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Отчисление"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Отчисление");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Заполняет набор записей по переданным данным расчета ООСМС
//
// Параметры: 
//  НаборЗаписей - набор записей регистра ООСМСРасчетыСФондами
//	РезультатООСМС - таблица значений - данные расчета ООСМС
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымООСМСПосле2022(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатООСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
    // правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ООСМС
	РаботникиДляРасчетаООСМС = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
						
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаООСМС.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;
			
			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Отчисление, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаООСМС.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета ООСМС, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Отчисления на обязательное социальное медицинское страхование</B>");
	КонецЕсли;
	
	ДанныеООСМС = РезультатООСМС.Выбрать();
	БылаОшибка = Ложь;
	
	Пока ДанныеООСМС.Следующий() Цикл
		
		Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо 
			И ЗначениеЗаполнено(ДанныеООСМС.ФизЛицо) И ДанныеООСМС.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда
			Продолжить;
		КонецЕсли;

		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
	
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеООСМС.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование, ДанныеООСМС.Период);
			Если ПравилоОкругления.Период >= '20220101' Тогда
				СоответствиеПравилаОкругления.Вставить(ДанныеООСМС.Период, ПравилоОкругления);
			Иначе
				ПравилоОкругления = Новый Структура("ПорядокОкругления, МетодОкругления", Перечисления.ПорядкиОкругления.Окр1, Перечисления.МетодыОкругления.ПоАрифметическимПравилам);
				СоответствиеПравилаОкругления.Вставить(ДанныеООСМС.Период, ПравилоОкругления);
			КонецЕсли;
		КонецЕсли;
	
		ООСМСЗаМесяц 		  = ДанныеООСМС.ООСМСЗаМесяц;
		ОблагаемаяБазаЗаМесяц = ДанныеООСМС.ОблагаемаяБазаЗаМесяц;
		
		// пересчитаем исчисленное отлисление за вычетом ранее исчисленных сумм
		ОтчислениеИсчисленное = ООСМСЗаМесяц - ДанныеООСМС.РанееОтчисленияИсчисленные;
		
		ОблагаемаяБаза = ОблагаемаяБазаЗаМесяц - ДанныеООСМС.РанееИсчисленнаяОблагаемаяБаза;
		
		// корректировка при округлении расчетов
		Если ОблагаемаяБаза = 0 И (ОтчислениеИсчисленное > -1 И ОтчислениеИсчисленное < 1) Тогда
		
			ОтчислениеИсчисленное = 0;
			
		Иначе
			
			// Округлим результат
			ОтчислениеИсчисленное = ОбщегоНазначения.ОкруглитьЧисло(ОтчислениеИсчисленное, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
			
		КонецЕсли;

		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ОтчислениеИсчисленное = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		
		Если КомментироватьРасчет Тогда
			РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеООСМС.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета);
			
			ООСМСДолжныБытьРассчитаны = Истина;
			МассивПараметровРасшифровки = Новый Массив;
			МассивПараметровРасшифровки.Добавить(ДанныеООСМС.ФизЛицо);
			
			Если ДанныеООСМС.ПризнакФизЛицаБезМедицинскогоСтрахования <> 0 Тогда                                                             
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьГражданствоФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Не подлежит медицинскому страхованию.", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ООСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеООСМС.ПризнакФизЛицаПенсионера <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьПенсионноеОбеспечениеФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является пенсионером", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ООСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеООСМС.ПризнакФизлицаУчастникаВОВ <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбУчастникеВОВФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является участником ВОВ.", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ООСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеООСМС.ПризнакФизлицаИнвалида <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбИнвалидностиФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является лицом с инвалидностью", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ООСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;

			Если ООСМСДолжныБытьРассчитаны Тогда
				РаботаССообщениями.КомментарийРасчета("Доход, принимаемый для исчисления отчислений ОСМС: " + ДанныеООСМС.ОблагаемыйДоход, КомментарийВидаРасчета);
				РаботаССообщениями.КомментарийРасчета("Ограничение на объект исчисления 1 МЗП: " + ДанныеООСМС.РазмерМЗП, КомментарийВидаРасчета);
				Если ПериодРегистрации >= Дата('20190101') Тогда
					РаботаССообщениями.КомментарийРасчета("Ограничение по доходу в пределах 10 МЗП: " + ДанныеООСМС.РазмерОграниченияПоДоходам, КомментарийВидаРасчета);
				Иначе
					РаботаССообщениями.КомментарийРасчета("Ограничение по доходу в пределах 15 МЗП: " + ДанныеООСМС.РазмерОграниченияПоДоходам, КомментарийВидаРасчета);
				КонецЕсли;
				
				Если ДанныеООСМС.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Объект исчисления отчислений ОСМС за месяц: " + ОблагаемаяБазаЗаМесяц, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления отчислений ОСМС: " + ДанныеООСМС.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета);
				КонецЕсли;
				
				РаботаССообщениями.КомментарийРасчета("Объект исчисления отчислений ОСМС: " + ОблагаемаяБаза, КомментарийВидаРасчета);
				
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахОСМС.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.КомментарийРасчета("Процент отчислений ОСМС: ", КомментарийВидаРасчета, ДанныеООСМС.ПроцентСтавки, РасшифровкаСтавки);
				Если ДанныеООСМС.РанееОтчисленияИсчисленные <> 0 Тогда
					РаботаССообщениями.КомментарийРасчета("Отчисления ОСМС за месяц: " + ООСМСЗаМесяц, КомментарийВидаРасчета);
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленные отчисления ОСМС: " + ДанныеООСМС.РанееОтчисленияИсчисленные, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			РаботаССообщениями.КомментарийРасчета("Исчисленные отчисления ОСМС: " + ОтчислениеИсчисленное, КомментарийВидаРасчета);
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру

			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеООСМС.ФизЛицо;
			Движение.СтруктурнаяЕдиница			= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеООСМС.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Отчисление					= ОтчислениеИсчисленное;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеООСМС.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеООСМС.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаООСМС.Удалить(ДанныеООСМС.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеООСМС.ФизЛицо;
		Строка.Отчисление					= ОтчислениеИсчисленное;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеООСМС.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеООСМС
	Для Каждого Элемент Из РаботникиДляРасчетаООСМС Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеООСМС = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеООСМС.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеООСМС.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Отчисление, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеООСМС);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Отчисление"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Отчисление");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Заполняет набор записей по переданным данным расчета ВОСМС для документов по расчету ВОСМС
//
// Параметры: 
//	ТабличнаяЧасть - ссылка на табличную часть документа, с которой работать
//	ПериодРегистрации - первое число месяца, в котором производиться расчет
//  НаборЗаписей - набор записей регистра ОПВРасчетыСФондами 
//	РезультатВОСМС - данные расчета ВОСМС (полученный функцией ПроведениеРасчетовПолныеПрава.ПолучитьДанныеДляРасчетаОПВ())
//	Налогоплательщик - ссылка на элемент справочника Организации, соответствующий организации-налогоплательщику
//	Организация - ссылка на элемент справочника Организации из шапки документа
//	ОтражениеПоПериодуРегистрации - булевский признак отражения расчетов по налогам ПериодомРегистрации
//	Перерасчет - булевский признак выполнения перерасчета
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымВОСМС(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатВОСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
	Если ПериодРегистрации >= '20220101' Тогда
		ЗаполнитьНаборЗаписейПоДаннымВОСМСПосле2022(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатВОСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
	ИначеЕсли ПериодРегистрации >= '20210101' Тогда
		ЗаполнитьНаборЗаписейПоДаннымВОСМСПосле2021(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатВОСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
    ИначеЕсли ПериодРегистрации >= '20200101' Тогда
		ЗаполнитьНаборЗаписейПоДаннымВОСМСПосле2020(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатВОСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
	Иначе	
		ЗаполнитьНаборЗаписейПоДаннымВОСМСДо2019(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатВОСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
	КонецЕсли;	
		
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымВОСМС

Процедура ЗаполнитьНаборЗаписейПоДаннымВОСМСДо2019(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатВОСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
	СоответствиеПравилаОкругления = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода, ВидДохода");

	// строим список физлиц, по по которым считается ВОСМС
	РаботникиДляРасчетаВОСМС = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаВОСМС.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;

			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Взнос, ВидДохода, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаВОСМС.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета ВОСМС, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Взносы на обязательное социальное медицинское страхование</B>", , , , , , -200); // -200 - ВОСМС идет после ОПВ
	КонецЕсли;
	
	ДанныеВОСМС = РезультатВОСМС.Выбрать();
	БылаОшибка = Ложь;
	
	Пока ДанныеВОСМС.Следующий() Цикл
		
		Если ФизЛицо <> Неопределено И ФизЛицо <> ДанныеВОСМС.ФизЛицо Тогда
			Продолжить;
		КонецЕсли; 
		
		Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо 
			И ЗначениеЗаполнено(ДанныеВОСМС.ФизЛицо) И ДанныеВОСМС.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда
			РасчетЗаИП = Истина;
		Иначе
			РасчетЗаИП = Ложь;
		КонецЕсли;
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеВОСМС.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование, ДанныеВОСМС.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеВОСМС.Период, ПравилоОкругления);
		КонецЕсли;
		
		Если НЕ РасчетЗаИП Тогда
			ПроцентСтавки = ДанныеВОСМС.ПроцентСтавки;
		Иначе
			ПроцентСтавки = ПроцедурыНалоговогоУчета.ПолучитьСтавкуОСМС(ДанныеВОСМС.Период, Справочники.ВидыДоходов.ДоходыОтНалоговогоАгента, "Взносы");
		КонецЕсли;

		// проверим заполненность необходимых реквизитов
		Если ПроцентСтавки = 0 Тогда
			РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахОСМС.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет взносов ОСМС: ", "Не заполнено значение ставки взносов ОСМС для вида доходов """ + ДанныеВОСМС.ВидДохода + """", РасшифровкаСтавки, -99);  // т.к. порядок сообщения для комментария ИПН=-100, то сообщения сразу выводим за ним
			БылаОшибка = Истина;
		КонецЕсли;
	
		Если ДанныеВОСМС.РазмерОграниченияПоДоходам = 0 Тогда
			РасшифровкаОграничения = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет взносов ОСМС: ", "Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам", РасшифровкаОграничения, -198);  // -198 ошибка относятся непосредственно к ВОСМС
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		ВзносИсчисленный = 0;
		ОблагаемаяБаза = 0;
		Ограничения = 0;
		
		Если НЕ РасчетЗаИП Тогда
			ВзносИсчисленный = ДанныеВОСМС.ВзносИсчисленный;
			ОблагаемаяБаза = ДанныеВОСМС.ОблагаемаяБаза;
		Иначе // для ИП объект всегда 2 МЗП
			Если ДанныеВОСМС.ПризнакФизЛицаБезМедицинскогоСтрахования = 0  
				И ДанныеВОСМС.ПризнакФизЛицаПенсионера = 0
				И ДанныеВОСМС.ПризнакФизлицаУчастникаВОВ = 0
				И ДанныеВОСМС.ПризнакФизлицаИнвалида = 0 Тогда                                                             
			ВзносИсчисленныйЗаМесяц = 2 * ДанныеВОСМС.РазмерМЗП * ПроцентСтавки / 100;
			ВзносИсчисленный = ВзносИсчисленныйЗаМесяц - ДанныеВОСМС.РанееИсчисленныйВзнос;
			ОблагаемаяБаза = 2 * ДанныеВОСМС.РазмерМЗП - ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБаза;
			Ограничения = 2 * ДанныеВОСМС.РазмерМЗП; 
			КонецЕсли;
		КонецЕсли;
		
		// Округлим результат
		ВзносИсчисленный = ОбщегоНазначения.ОкруглитьЧисло(ВзносИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		Если КомментироватьРасчет Тогда
			РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеВОСМС.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"000"); 
			РаботаССообщениями.КомментарийРасчета("Вид дохода: " + ДанныеВОСМС.ВидДохода, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+ "001"); 
			
			ВОСМСДолжныБытьРассчитаны = Истина;
			МассивПараметровРасшифровки = Новый Массив;
			МассивПараметровРасшифровки.Добавить(ДанныеВОСМС.ФизЛицо);
			
			Если ДанныеВОСМС.ПризнакФизЛицаБезМедицинскогоСтрахования <> 0 Тогда                                                             
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьГражданствоФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Не подлежит медицинскому страхованию.", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ВОСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеВОСМС.ПризнакФизЛицаПенсионера <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьПенсионноеОбеспечениеФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является пенсионером", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ВОСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеВОСМС.ПризнакФизлицаУчастникаВОВ <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбУчастникеВОВФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является участником ВОВ.", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ВОСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеВОСМС.ПризнакФизлицаИнвалида <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбИнвалидностиФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является инвалидом", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ВОСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;

			Если ВОСМСДолжныБытьРассчитаны Тогда
				РаботаССообщениями.КомментарийРасчета("Доход, принимаемый для исчисления взноса ОСМС: " + ДанныеВОСМС.ОблагаемыйДоход, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"010");
				Если НЕ РасчетЗаИП Тогда
					РаботаССообщениями.КомментарийРасчета("Ограничение на объект исчисления 1 МЗП: " + ДанныеВОСМС.РазмерМЗП, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"011");
					РаботаССообщениями.КомментарийРасчета("Ограничение по доходу в пределах 15 МЗП: " + ДанныеВОСМС.РазмерОграниченияПоДоходам, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"012");
				КонецЕсли;
								
				Если ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
					Если РасчетЗаИП Тогда
						РаботаССообщениями.КомментарийРасчета("Объект исчисления взноса ОСМС за месяц: " + Ограничения, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"020");
					Иначе
						РаботаССообщениями.КомментарийРасчета("Объект исчисления взноса ОСМС за месяц: " + ДанныеВОСМС.ОблагаемаяБазаЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"025");
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления взноса ОСМС: " + ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"030");
				КонецЕсли;
				РаботаССообщениями.КомментарийРасчета("Объект исчисления взноса ОСМС: " + ОблагаемаяБаза, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"035");
				
				РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахОСМС.ПолучитьФормуСписка().Открыть();");
				РаботаССообщениями.КомментарийРасчета("Процент взноса ОСМС: ", КомментарийВидаРасчета, ПроцентСтавки, РасшифровкаСтавки, , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"036");
				Если ДанныеВОСМС.РанееИсчисленныйВзнос <> 0 Тогда
					Если РасчетЗаИП Тогда
						РаботаССообщениями.КомментарийРасчета("Взнос ОСМС за месяц: " + ВзносИсчисленныйЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"040");
					Иначе 
						РаботаССообщениями.КомментарийРасчета("Взнос ОСМС за месяц: " + ДанныеВОСМС.ВОСМСЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"041");
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленные взносы ОСМС: " + ДанныеВОСМС.РанееИсчисленныйВзнос, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"042");
				КонецЕсли;
			КонецЕсли;
			
			РаботаССообщениями.КомментарийРасчета("Исчисленные взносы ОСМС: " + ВзносИсчисленный, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"043");
		КонецЕсли;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ВзносИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
					
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);

			// Измерения
			Движение.ФизЛицо                	= ДанныеВОСМС.ФизЛицо;
			Движение.СтруктурнаяЕдиница        	= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеВОСМС.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;
			Движение.ВидДохода   				= ДанныеВОСМС.ВидДохода;

			// Ресурсы
			Движение.Взнос						= ВзносИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеВОСМС.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеВОСМС.Период;
			СтруктураПоиска.ВидДохода = ДанныеВОСМС.ВидДохода;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаВОСМС.Удалить(ДанныеВОСМС.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеВОСМС.ФизЛицо;
		Строка.ВидДохода 					= ДанныеВОСМС.ВидДохода;
		Строка.Взнос  						= ВзносИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеВОСМС.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеВОСМС
	Для Каждого Элемент Из РаботникиДляРасчетаВОСМС Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеВОСМС = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеВОСМС.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеВОСМС.Свернуть("ФизЛицо, МесяцНалоговогоПериода, ВидДохода", "Взнос, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеВОСМС);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Взнос"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Взнос");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымВОСМС

Процедура ЗаполнитьНаборЗаписейПоДаннымВОСМСПосле2020(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатВОСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
	СоответствиеПравилаОкругления = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода, ВидДохода");

	// строим список физлиц, по по которым считается ВОСМС
	РаботникиДляРасчетаВОСМС = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаВОСМС.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;

			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Взнос, ВидДохода, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаВОСМС.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета ВОСМС, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Взносы на обязательное социальное медицинское страхование</B>", , , , , , -200); // -200 - ВОСМС идет после ОПВ
	КонецЕсли;
	
	ДанныеВОСМС = РезультатВОСМС.Выбрать();
	БылаОшибка = Ложь;
	
	ТаблицаВзносовПоФизЛицамПоДругимДоходам = Новый ТаблицаЗначений;
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("ФизЛицо", 	   Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("Период", 	       ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("ОблагаемаяБаза", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Индексы.Добавить("ФизЛицо, Период");
	
	СтруктураПоискаПоФизЛицам = Новый Структура("ФизЛицо, Период");
	
	Пока ДанныеВОСМС.Следующий() Цикл
		
		Если ФизЛицо <> Неопределено И ФизЛицо <> ДанныеВОСМС.ФизЛицо Тогда
			Продолжить;
		КонецЕсли; 
		
		Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо 
			И ЗначениеЗаполнено(ДанныеВОСМС.ФизЛицо) И ДанныеВОСМС.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда
			РасчетЗаИП = Истина;
		Иначе
			РасчетЗаИП = Ложь;
		КонецЕсли;
		
		ПроцентСтавки = ДанныеВОСМС.ПроцентСтавки;

		// проверим заполненность необходимых реквизитов
		//Если ПроцентСтавки = 0 Тогда
		//	Если НЕ РасчетЗаИП Тогда
		//		РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахОСМС.ПолучитьФормуСписка().Открыть();");
		//		РаботаССообщениями.ОшибкаРасчета("Расчет взносов ОСМС: ", "Не заполнено значение ставки взносов ОСМС для вида доходов """ + ДанныеВОСМС.ВидДохода + """", РасшифровкаСтавки, -99);  // т.к. порядок сообщения для комментария ИПН=-100, то сообщения сразу выводим за ним
		//		БылаОшибка = Истина;
		//	Иначе
		//		РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.ПолучитьФормуСписка().Открыть();");
		//		РаботаССообщениями.ОшибкаРасчета("Расчет взносов ОСМС: ", "Не заполнено значение ставки взносов ОСМС для ИП ", РасшифровкаСтавки, -99);  // т.к. порядок сообщения для комментария ИПН=-100, то сообщения сразу выводим за ним
		//		БылаОшибка = Истина;
		//	КонецЕсли;
		//КонецЕсли;
	
		Если ДанныеВОСМС.РазмерОграниченияПоДоходам = 0 Тогда
			РасшифровкаОграничения = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет взносов ОСМС: ", "Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам", РасшифровкаОграничения, -198);  // -198 ошибка относятся непосредственно к ВОСМС
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПоФизЛицам, ДанныеВОСМС);
		
		ВзносИсчисленный = 0;
		ОблагаемаяБаза = 0;
		Ограничения = 0;
		
		Если НЕ РасчетЗаИП Тогда
			
			МассивВзносов = ТаблицаВзносовПоФизЛицамПоДругимДоходам.НайтиСтроки(СтруктураПоискаПоФизЛицам);
			
			Если МассивВзносов.Количество() > 0 Тогда
				ОблагаемаяБазаРанееВРасчетеПоДругимВидам = МассивВзносов[0].ОблагаемаяБаза;
			Иначе
				ОблагаемаяБазаРанееВРасчетеПоДругимВидам = 0;
			КонецЕсли;
			
			РазмерОграниченияПоДоходам = ДанныеВОСМС.РазмерОграниченияПоДоходам;
		
			Если ОблагаемаяБазаРанееВРасчетеПоДругимВидам > 0
				ИЛИ ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБазаПоДругимВидам > 0 Тогда
				
				РазмерОграниченияПоДоходам = Макс(РазмерОграниченияПоДоходам - ОблагаемаяБазаРанееВРасчетеПоДругимВидам - ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБазаПоДругимВидам, 0);
				
			КонецЕсли;
		
			Если ДанныеВОСМС.ИсчисленныйВзносДругойРаботадатель > 0 Тогда
				
				РазмерОграниченияПоДоходам = Макс(РазмерОграниченияПоДоходам - ДанныеВОСМС.ИсчисленныйВзносДругойРаботадатель / (ДанныеВОСМС.ПроцентСтавки / 100), 0);
	
			КонецЕсли;
			
			// облагаемая база по ВОСМС
			Если ДанныеВОСМС.ОблагаемыйДоход > 0 Тогда
				
				Если ДанныеВОСМС.ОблагаемыйДоход + ДанныеВОСМС.КорректировкаДохода > РазмерОграниченияПоДоходам Тогда
					ОблагаемаяБаза = РазмерОграниченияПоДоходам;
				Иначе
					ОблагаемаяБаза = ДанныеВОСМС.ОблагаемыйДоход + ДанныеВОСМС.КорректировкаДохода;
				КонецЕсли;
				
			Иначе 
				
				ОблагаемаяБаза = 0;
				
			КонецЕсли;
			
			ОблагаемаяБаза = ОблагаемаяБаза - ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБаза;
			
			// сумма взносов исчисленная
			Если ОблагаемаяБаза > 0 Тогда
				ВзносИсчисленный = ОблагаемаяБаза * ДанныеВОСМС.ПроцентСтавки / 100;
			Иначе
				ВзносИсчисленный = 0;
			КонецЕсли;
				
		Иначе // для ИП объект всегда 1.4 МЗП
			Если ДанныеВОСМС.ПризнакФизЛицаБезМедицинскогоСтрахования = 0  
				И ДанныеВОСМС.ПризнакФизЛицаПенсионера = 0
				И ДанныеВОСМС.ПризнакФизлицаУчастникаВОВ = 0
				И ДанныеВОСМС.ПризнакФизлицаИнвалида = 0 Тогда                                                             
			ВзносИсчисленныйЗаМесяц = 1.4 * ДанныеВОСМС.РазмерМЗП * ПроцентСтавки / 100;
			ВзносИсчисленный = ВзносИсчисленныйЗаМесяц - ДанныеВОСМС.РанееИсчисленныйВзнос;
			ОблагаемаяБаза = 1.4 * ДанныеВОСМС.РазмерМЗП - ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБаза;
			Ограничения = 1.4 * ДанныеВОСМС.РазмерМЗП; 
			КонецЕсли;
		КонецЕсли;
		
		// Округлим результат
		ВзносИсчисленный = ОбщегоНазначения.ОкруглитьЧисло(ВзносИсчисленный, Перечисления.ПорядкиОкругления.Окр1, Перечисления.МетодыОкругления.ПоАрифметическимПравилам);
		
		Если КомментироватьРасчет Тогда
			РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеВОСМС.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"000"); 
			РаботаССообщениями.КомментарийРасчета("Вид дохода: " + ДанныеВОСМС.ВидДохода, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+ "001"); 
			
			ВОСМСДолжныБытьРассчитаны = Истина;
			МассивПараметровРасшифровки = Новый Массив;
			МассивПараметровРасшифровки.Добавить(ДанныеВОСМС.ФизЛицо);
			
			Если ДанныеВОСМС.ПризнакФизЛицаБезМедицинскогоСтрахования <> 0 Тогда                                                             
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьГражданствоФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Не подлежит медицинскому страхованию.", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ВОСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеВОСМС.ПризнакФизЛицаПенсионера <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьПенсионноеОбеспечениеФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является пенсионером", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ВОСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеВОСМС.ПризнакФизлицаУчастникаВОВ <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбУчастникеВОВФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является участником ВОВ.", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ВОСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеВОСМС.ПризнакФизлицаИнвалида <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбИнвалидностиФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является инвалидом", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ВОСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;

			Если ВОСМСДолжныБытьРассчитаны Тогда
				РаботаССообщениями.КомментарийРасчета("Доход, принимаемый для исчисления взноса ОСМС: " + ДанныеВОСМС.ОблагаемыйДоход, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"010");
				Если НЕ РасчетЗаИП Тогда
					РаботаССообщениями.КомментарийРасчета("Ограничение по доходу в пределах 10 МЗП: " + ДанныеВОСМС.РазмерОграниченияПоДоходам, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"012");
				КонецЕсли;
								
				Если ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
					Если РасчетЗаИП Тогда
						РаботаССообщениями.КомментарийРасчета("Объект исчисления взноса ОСМС за месяц: " + Ограничения, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"020");
					Иначе
						РаботаССообщениями.КомментарийРасчета("Объект исчисления взноса ОСМС за месяц: " + ДанныеВОСМС.ОблагаемаяБазаЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"025");
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления взноса ОСМС: " + ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"030");
				КонецЕсли;
				РаботаССообщениями.КомментарийРасчета("Объект исчисления взноса ОСМС: " + ОблагаемаяБаза, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"035");
				
				Если РасчетЗаИП Тогда
					РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.ПолучитьФормуСписка().Открыть();");
				Иначе
					РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахОСМС.ПолучитьФормуСписка().Открыть();");
				КонецЕсли;
				РаботаССообщениями.КомментарийРасчета("Процент взноса ОСМС: ", КомментарийВидаРасчета, ПроцентСтавки, РасшифровкаСтавки, , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"036");
				Если ДанныеВОСМС.РанееИсчисленныйВзнос <> 0 Тогда
					Если РасчетЗаИП Тогда
						РаботаССообщениями.КомментарийРасчета("Взнос ОСМС за месяц: " + ВзносИсчисленныйЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"040");
					Иначе 
						РаботаССообщениями.КомментарийРасчета("Взнос ОСМС за месяц: " + ДанныеВОСМС.ВОСМСЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"041");
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленные взносы ОСМС: " + ДанныеВОСМС.РанееИсчисленныйВзнос, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"042");
				КонецЕсли;
			КонецЕсли;
			
			РаботаССообщениями.КомментарийРасчета("Исчисленные взносы ОСМС: " + ВзносИсчисленный, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"043");
		КонецЕсли;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ВзносИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		МассивВзносов = ТаблицаВзносовПоФизЛицамПоДругимДоходам.НайтиСтроки(СтруктураПоискаПоФизЛицам);
		Если МассивВзносов.Количество() > 0 Тогда
			СтрокаВзносовТаблицаВзносовПоФизЛицам = МассивВзносов[0];
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза = СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза + ОблагаемаяБаза;
		Иначе
			СтрокаВзносовТаблицаВзносовПоФизЛицам = ТаблицаВзносовПоФизЛицамПоДругимДоходам.Добавить();
			СтрокаВзносовТаблицаВзносовПоФизЛицам.Период = ДанныеВОСМС.Период;
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ФизЛицо = ДанныеВОСМС.ФизЛицоДохода;
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза = ОблагаемаяБаза;
		КонецЕсли;
					
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);

			// Измерения
			Движение.ФизЛицо                	= ДанныеВОСМС.ФизЛицо;
			Движение.СтруктурнаяЕдиница        	= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеВОСМС.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;
			Движение.ВидДохода   				= ДанныеВОСМС.ВидДохода;

			// Ресурсы
			Движение.Взнос						= ВзносИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеВОСМС.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеВОСМС.Период;
			СтруктураПоиска.ВидДохода = ДанныеВОСМС.ВидДохода;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаВОСМС.Удалить(ДанныеВОСМС.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеВОСМС.ФизЛицо;
		Строка.ВидДохода 					= ДанныеВОСМС.ВидДохода;
		Строка.Взнос  						= ВзносИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеВОСМС.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеВОСМС
	Для Каждого Элемент Из РаботникиДляРасчетаВОСМС Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеВОСМС = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеВОСМС.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеВОСМС.Свернуть("ФизЛицо, МесяцНалоговогоПериода, ВидДохода", "Взнос, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеВОСМС);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Взнос"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Взнос");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымВОСМС

Процедура ЗаполнитьНаборЗаписейПоДаннымВОСМСПосле2021(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатВОСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
	СоответствиеПравилаОкругления = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода, ВидДохода");

	// строим список физлиц, по по которым считается ВОСМС
	РаботникиДляРасчетаВОСМС = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаВОСМС.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;

			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Взнос, ВидДохода, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаВОСМС.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета ВОСМС, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Взносы на обязательное социальное медицинское страхование</B>", , , , , , -200); // -200 - ВОСМС идет после ОПВ
	КонецЕсли;
	
	ДанныеВОСМС = РезультатВОСМС.Выбрать();
	БылаОшибка = Ложь;
	
	ТаблицаВзносовПоФизЛицамПоДругимДоходам = Новый ТаблицаЗначений;
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("ФизЛицо", 	   Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("Период", 	       ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("ОблагаемаяБаза", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Индексы.Добавить("ФизЛицо, Период");
	
	СтруктураПоискаПоФизЛицам = Новый Структура("ФизЛицо, Период");
	
	Пока ДанныеВОСМС.Следующий() Цикл
		
		Если ФизЛицо <> Неопределено И ФизЛицо <> ДанныеВОСМС.ФизЛицо Тогда
			Продолжить;
		КонецЕсли; 
		
		Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо 
			И ЗначениеЗаполнено(ДанныеВОСМС.ФизЛицо) И ДанныеВОСМС.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда
			РасчетЗаИП = Истина;
		Иначе
			РасчетЗаИП = Ложь;
		КонецЕсли;
		
		ПроцентСтавки = ДанныеВОСМС.ПроцентСтавки;

		// проверим заполненность необходимых реквизитов
		//Если ПроцентСтавки = 0 Тогда
		//	Если НЕ РасчетЗаИП Тогда
		//		РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахОСМС.ПолучитьФормуСписка().Открыть();");
		//		РаботаССообщениями.ОшибкаРасчета("Расчет взносов ОСМС: ", "Не заполнено значение ставки взносов ОСМС для вида доходов """ + ДанныеВОСМС.ВидДохода + """", РасшифровкаСтавки, -99);  // т.к. порядок сообщения для комментария ИПН=-100, то сообщения сразу выводим за ним
		//		БылаОшибка = Истина;
		//	Иначе
		//		РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.ПолучитьФормуСписка().Открыть();");
		//		РаботаССообщениями.ОшибкаРасчета("Расчет взносов ОСМС: ", "Не заполнено значение ставки взносов ОСМС для ИП ", РасшифровкаСтавки, -99);  // т.к. порядок сообщения для комментария ИПН=-100, то сообщения сразу выводим за ним
		//		БылаОшибка = Истина;
		//	КонецЕсли;
		//КонецЕсли;
	
		Если ДанныеВОСМС.РазмерОграниченияПоДоходам = 0 Тогда
			РасшифровкаОграничения = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет взносов ОСМС: ", "Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам", РасшифровкаОграничения, -198);  // -198 ошибка относятся непосредственно к ВОСМС
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПоФизЛицам, ДанныеВОСМС);
		
		ВзносИсчисленный = 0;
		ОблагаемаяБаза = 0;
		Ограничения = 0;
		
		Если НЕ РасчетЗаИП Тогда
			
			МассивВзносов = ТаблицаВзносовПоФизЛицамПоДругимДоходам.НайтиСтроки(СтруктураПоискаПоФизЛицам);
			
			Если МассивВзносов.Количество() > 0 Тогда
				ОблагаемаяБазаРанееВРасчетеПоДругимВидам = МассивВзносов[0].ОблагаемаяБаза;
			Иначе
				ОблагаемаяБазаРанееВРасчетеПоДругимВидам = 0;
			КонецЕсли;
			
			РазмерОграниченияПоДоходам = ДанныеВОСМС.РазмерОграниченияПоДоходам;
		
			Если ОблагаемаяБазаРанееВРасчетеПоДругимВидам > 0
				ИЛИ ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБазаПоДругимВидам > 0 Тогда
				
				РазмерОграниченияПоДоходам = Макс(РазмерОграниченияПоДоходам - ОблагаемаяБазаРанееВРасчетеПоДругимВидам - ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБазаПоДругимВидам, 0);
				
			КонецЕсли;
		
			Если ДанныеВОСМС.ИсчисленныйВзносДругойРаботадатель > 0 Тогда
				
				РазмерОграниченияПоДоходам = Макс(РазмерОграниченияПоДоходам - ДанныеВОСМС.ИсчисленныйВзносДругойРаботадатель / (ДанныеВОСМС.ПроцентСтавки / 100), 0);
	
			КонецЕсли;
			
			// облагаемая база по ВОСМС
			Если ДанныеВОСМС.ОблагаемыйДоход > 0 Тогда
				
				Если ДанныеВОСМС.ОблагаемыйДоход > РазмерОграниченияПоДоходам Тогда
					ОблагаемаяБаза = РазмерОграниченияПоДоходам;
				Иначе
					ОблагаемаяБаза = ДанныеВОСМС.ОблагаемыйДоход;
				КонецЕсли;
				
			Иначе 
				
				ОблагаемаяБаза = 0;
				
			КонецЕсли;
			
			ОблагаемаяБаза = ОблагаемаяБаза - ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБаза;
			
			// сумма взносов исчисленная
			Если ОблагаемаяБаза > 0 Тогда
				ВзносИсчисленный = ОблагаемаяБаза * ДанныеВОСМС.ПроцентСтавки / 100;
			Иначе
				ВзносИсчисленный = 0;
			КонецЕсли;
				
		Иначе // для ИП объект всегда 1.4 МЗП
			Если ДанныеВОСМС.ПризнакФизЛицаБезМедицинскогоСтрахования = 0  
				И ДанныеВОСМС.ПризнакФизЛицаПенсионера = 0
				И ДанныеВОСМС.ПризнакФизлицаУчастникаВОВ = 0
				И ДанныеВОСМС.ПризнакФизлицаИнвалида = 0 Тогда                                                             
			ВзносИсчисленныйЗаМесяц = 1.4 * ДанныеВОСМС.РазмерМЗП * ПроцентСтавки / 100;
			ВзносИсчисленный = ВзносИсчисленныйЗаМесяц - ДанныеВОСМС.РанееИсчисленныйВзнос;
			ОблагаемаяБаза = 1.4 * ДанныеВОСМС.РазмерМЗП - ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБаза;
			Ограничения = 1.4 * ДанныеВОСМС.РазмерМЗП; 
			КонецЕсли;
		КонецЕсли;
		
		// Округлим результат
		ВзносИсчисленный = ОбщегоНазначения.ОкруглитьЧисло(ВзносИсчисленный, Перечисления.ПорядкиОкругления.Окр1, Перечисления.МетодыОкругления.ПоАрифметическимПравилам);
		
		Если КомментироватьРасчет Тогда
			РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеВОСМС.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"000"); 
			РаботаССообщениями.КомментарийРасчета("Вид дохода: " + ДанныеВОСМС.ВидДохода, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+ "001"); 
			
			ВОСМСДолжныБытьРассчитаны = Истина;
			МассивПараметровРасшифровки = Новый Массив;
			МассивПараметровРасшифровки.Добавить(ДанныеВОСМС.ФизЛицо);
			
			Если ДанныеВОСМС.ПризнакФизЛицаБезМедицинскогоСтрахования <> 0 Тогда                                                             
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьГражданствоФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Не подлежит медицинскому страхованию.", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ВОСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеВОСМС.ПризнакФизЛицаПенсионера <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьПенсионноеОбеспечениеФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является пенсионером", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ВОСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеВОСМС.ПризнакФизлицаУчастникаВОВ <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбУчастникеВОВФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является участником ВОВ.", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ВОСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеВОСМС.ПризнакФизлицаИнвалида <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбИнвалидностиФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является инвалидом", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ВОСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;

			Если ВОСМСДолжныБытьРассчитаны Тогда
				РаботаССообщениями.КомментарийРасчета("Доход, принимаемый для исчисления взноса ОСМС: " + ДанныеВОСМС.ОблагаемыйДоход, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"010");
				Если НЕ РасчетЗаИП Тогда
					РаботаССообщениями.КомментарийРасчета("Ограничение по доходу в пределах 10 МЗП: " + ДанныеВОСМС.РазмерОграниченияПоДоходам, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"012");
				КонецЕсли;
								
				Если ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
					Если РасчетЗаИП Тогда
						РаботаССообщениями.КомментарийРасчета("Объект исчисления взноса ОСМС за месяц: " + Ограничения, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"020");
					Иначе
						РаботаССообщениями.КомментарийРасчета("Объект исчисления взноса ОСМС за месяц: " + ДанныеВОСМС.ОблагаемаяБазаЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"025");
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления взноса ОСМС: " + ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"030");
				КонецЕсли;
				РаботаССообщениями.КомментарийРасчета("Объект исчисления взноса ОСМС: " + ОблагаемаяБаза, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"035");
				
				Если РасчетЗаИП Тогда
					РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.ПолучитьФормуСписка().Открыть();");
				Иначе
					РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахОСМС.ПолучитьФормуСписка().Открыть();");
				КонецЕсли;
				РаботаССообщениями.КомментарийРасчета("Процент взноса ОСМС: ", КомментарийВидаРасчета, ПроцентСтавки, РасшифровкаСтавки, , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"036");
				Если ДанныеВОСМС.РанееИсчисленныйВзнос <> 0 Тогда
					Если РасчетЗаИП Тогда
						РаботаССообщениями.КомментарийРасчета("Взнос ОСМС за месяц: " + ВзносИсчисленныйЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"040");
					Иначе 
						РаботаССообщениями.КомментарийРасчета("Взнос ОСМС за месяц: " + ДанныеВОСМС.ВОСМСЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"041");
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленные взносы ОСМС: " + ДанныеВОСМС.РанееИсчисленныйВзнос, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"042");
				КонецЕсли;
			КонецЕсли;
			
			РаботаССообщениями.КомментарийРасчета("Исчисленные взносы ОСМС: " + ВзносИсчисленный, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"043");
		КонецЕсли;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ВзносИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		МассивВзносов = ТаблицаВзносовПоФизЛицамПоДругимДоходам.НайтиСтроки(СтруктураПоискаПоФизЛицам);
		Если МассивВзносов.Количество() > 0 Тогда
			СтрокаВзносовТаблицаВзносовПоФизЛицам = МассивВзносов[0];
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза = СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза + ОблагаемаяБаза;
		Иначе
			СтрокаВзносовТаблицаВзносовПоФизЛицам = ТаблицаВзносовПоФизЛицамПоДругимДоходам.Добавить();
			СтрокаВзносовТаблицаВзносовПоФизЛицам.Период = ДанныеВОСМС.Период;
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ФизЛицо = ДанныеВОСМС.ФизЛицоДохода;
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза = ОблагаемаяБаза;
		КонецЕсли;
					
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);

			// Измерения
			Движение.ФизЛицо                	= ДанныеВОСМС.ФизЛицо;
			Движение.СтруктурнаяЕдиница        	= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеВОСМС.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;
			Движение.ВидДохода   				= ДанныеВОСМС.ВидДохода;

			// Ресурсы
			Движение.Взнос						= ВзносИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеВОСМС.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеВОСМС.Период;
			СтруктураПоиска.ВидДохода = ДанныеВОСМС.ВидДохода;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаВОСМС.Удалить(ДанныеВОСМС.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеВОСМС.ФизЛицо;
		Строка.ВидДохода 					= ДанныеВОСМС.ВидДохода;
		Строка.Взнос  						= ВзносИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеВОСМС.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеВОСМС
	Для Каждого Элемент Из РаботникиДляРасчетаВОСМС Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеВОСМС = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеВОСМС.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеВОСМС.Свернуть("ФизЛицо, МесяцНалоговогоПериода, ВидДохода", "Взнос, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеВОСМС);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Взнос"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Взнос");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымВОСМС

Процедура ЗаполнитьНаборЗаписейПоДаннымВОСМСПосле2022(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатВОСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
	СоответствиеПравилаОкругления = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода, ВидДохода");

	// строим список физлиц, по по которым считается ВОСМС
	РаботникиДляРасчетаВОСМС = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаВОСМС.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;

			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Взнос, ВидДохода, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаВОСМС.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета ВОСМС, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		КомментарийВидаРасчета = РаботаССообщениями.КомментарийРасчета("Расчет <B>Взносы на обязательное социальное медицинское страхование</B>", , , , , , -200); // -200 - ВОСМС идет после ОПВ
	КонецЕсли;
	
	ДанныеВОСМС = РезультатВОСМС.Выбрать();
	БылаОшибка = Ложь;
	
	ТаблицаВзносовПоФизЛицамПоДругимДоходам = Новый ТаблицаЗначений;
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("ФизЛицо", 	   Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("Период", 	       ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("ОблагаемаяБаза", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Индексы.Добавить("ФизЛицо, Период");
	
	СтруктураПоискаПоФизЛицам = Новый Структура("ФизЛицо, Период");
	
	Пока ДанныеВОСМС.Следующий() Цикл
		
		Если ФизЛицо <> Неопределено И ФизЛицо <> ДанныеВОСМС.ФизЛицо Тогда
			Продолжить;
		КонецЕсли; 
		
		Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо 
			И ЗначениеЗаполнено(ДанныеВОСМС.ФизЛицо) И ДанныеВОСМС.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда
			РасчетЗаИП = Истина;
		Иначе
			РасчетЗаИП = Ложь;
		КонецЕсли;
		
		ПроцентСтавки = ДанныеВОСМС.ПроцентСтавки;

		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеВОСМС.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование, ДанныеВОСМС.Период);
			Если ПравилоОкругления.Период >= '20220101' Тогда
				СоответствиеПравилаОкругления.Вставить(ДанныеВОСМС.Период, ПравилоОкругления);
			Иначе
				ПравилоОкругления = Новый Структура("ПорядокОкругления, МетодОкругления", Перечисления.ПорядкиОкругления.Окр1, Перечисления.МетодыОкругления.ПоАрифметическимПравилам);
				СоответствиеПравилаОкругления.Вставить(ДанныеВОСМС.Период, ПравилоОкругления);
			КонецЕсли;
		КонецЕсли;
	
		Если ДанныеВОСМС.РазмерОграниченияПоДоходам = 0 Тогда
			РасшифровкаОграничения = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьФормуСписка().Открыть();");
			РаботаССообщениями.ОшибкаРасчета("Расчет взносов ОСМС: ", "Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам", РасшифровкаОграничения, -198);  // -198 ошибка относятся непосредственно к ВОСМС
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПоФизЛицам, ДанныеВОСМС);
		
		ВзносИсчисленный = 0;
		ОблагаемаяБаза = 0;
		Ограничения = 0;
		МаксимальныйВОСМСПриДостиженииПредела = 0;
		
		Если НЕ РасчетЗаИП Тогда
			
			МассивВзносов = ТаблицаВзносовПоФизЛицамПоДругимДоходам.НайтиСтроки(СтруктураПоискаПоФизЛицам);
			
			Если МассивВзносов.Количество() > 0 Тогда
				ОблагаемаяБазаРанееВРасчетеПоДругимВидам = МассивВзносов[0].ОблагаемаяБаза;
			Иначе
				ОблагаемаяБазаРанееВРасчетеПоДругимВидам = 0;
			КонецЕсли;
			
			РазмерОграниченияПоДоходам = ДанныеВОСМС.РазмерОграниченияПоДоходам;
		
			Если ОблагаемаяБазаРанееВРасчетеПоДругимВидам > 0
				ИЛИ ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБазаПоДругимВидам > 0 Тогда
				
				РазмерОграниченияПоДоходам = Макс(РазмерОграниченияПоДоходам - ОблагаемаяБазаРанееВРасчетеПоДругимВидам - ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБазаПоДругимВидам, 0);
				
				ВОСМСРанееИсчисленный = ОбщегоНазначения.ОкруглитьЧисло((ОблагаемаяБазаРанееВРасчетеПоДругимВидам + ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБазаПоДругимВидам) * ДанныеВОСМС.ПроцентСтавки / 100, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);	
				МаксимальныйВОСМСПриДостиженииПредела = ДанныеВОСМС.РазмерОграниченияПоДоходам * ДанныеВОСМС.ПроцентСтавки / 100 - ВОСМСРанееИсчисленный;
				
			КонецЕсли;
		
			Если ДанныеВОСМС.ИсчисленныйВзносДругойРаботадатель > 0 Тогда
				
				РазмерОграниченияПоДоходам = Макс(РазмерОграниченияПоДоходам - ДанныеВОСМС.ИсчисленныйВзносДругойРаботадатель / (ДанныеВОСМС.ПроцентСтавки / 100), 0);
	
			КонецЕсли;
			
			// облагаемая база по ВОСМС
			Если ДанныеВОСМС.ОблагаемыйДоход > 0 Тогда
				
				Если ДанныеВОСМС.ОблагаемыйДоход > РазмерОграниченияПоДоходам Тогда
					ОблагаемаяБаза = РазмерОграниченияПоДоходам;
				Иначе
					ОблагаемаяБаза = ДанныеВОСМС.ОблагаемыйДоход;
				КонецЕсли;
				
			Иначе 
				
				ОблагаемаяБаза = 0;
				
			КонецЕсли;
			
			ОблагаемаяБаза = ОблагаемаяБаза - ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБаза;
			
			// сумма взносов исчисленная
			Если ОблагаемаяБаза > 0 Тогда
				ВзносИсчисленный = ОблагаемаяБаза * ДанныеВОСМС.ПроцентСтавки / 100;
			Иначе
				ВзносИсчисленный = 0;
			КонецЕсли;
			
			Если НЕ МаксимальныйВОСМСПриДостиженииПредела = 0
				И ВзносИсчисленный > МаксимальныйВОСМСПриДостиженииПредела Тогда
				
				ВзносИсчисленный = МаксимальныйВОСМСПриДостиженииПредела;	
				МаксимальныйВОСМСПриДостиженииПредела = 0;

			КонецЕсли;
				
		Иначе // для ИП объект всегда 1.4 МЗП
			Если ДанныеВОСМС.ПризнакФизЛицаБезМедицинскогоСтрахования = 0  
				И ДанныеВОСМС.ПризнакФизЛицаПенсионера = 0
				И ДанныеВОСМС.ПризнакФизлицаУчастникаВОВ = 0
				И ДанныеВОСМС.ПризнакФизлицаИнвалида = 0 Тогда                                                             
			ВзносИсчисленныйЗаМесяц = 1.4 * ДанныеВОСМС.РазмерМЗП * ПроцентСтавки / 100;
			ВзносИсчисленный = ВзносИсчисленныйЗаМесяц - ДанныеВОСМС.РанееИсчисленныйВзнос;
			ОблагаемаяБаза = 1.4 * ДанныеВОСМС.РазмерМЗП - ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБаза;
			Ограничения = 1.4 * ДанныеВОСМС.РазмерМЗП; 
			КонецЕсли;
		КонецЕсли;
		
		// Округлим результат
		ВзносИсчисленный = ОбщегоНазначения.ОкруглитьЧисло(ВзносИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		Если КомментироватьРасчет Тогда
			РаботаССообщениями.КомментарийРасчета("Месяц: " + Формат(ДанныеВОСМС.Период, "ДФ='ММММ гггг'"), КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"000"); 
			РаботаССообщениями.КомментарийРасчета("Вид дохода: " + ДанныеВОСМС.ВидДохода, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+ "001"); 
			
			ВОСМСДолжныБытьРассчитаны = Истина;
			МассивПараметровРасшифровки = Новый Массив;
			МассивПараметровРасшифровки.Добавить(ДанныеВОСМС.ФизЛицо);
			
			Если ДанныеВОСМС.ПризнакФизЛицаБезМедицинскогоСтрахования <> 0 Тогда                                                             
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьГражданствоФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Не подлежит медицинскому страхованию.", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ВОСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеВОСМС.ПризнакФизЛицаПенсионера <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьПенсионноеОбеспечениеФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является пенсионером", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ВОСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеВОСМС.ПризнакФизлицаУчастникаВОВ <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбУчастникеВОВФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является участником ВОВ.", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ВОСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеВОСМС.ПризнакФизлицаИнвалида <> 0 Тогда
				Расшифровка = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьСведенияОбИнвалидностиФизЛица", МассивПараметровРасшифровки);
				РаботаССообщениями.КомментарийРасчета("", КомментарийВидаРасчета, "Является лицом с инвалидностью", Расшифровка, Перечисления.ВидыСообщений.ВажнаяИнформация);
				ВОСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;

			Если ВОСМСДолжныБытьРассчитаны Тогда
				РаботаССообщениями.КомментарийРасчета("Доход, принимаемый для исчисления взноса ОСМС: " + ДанныеВОСМС.ОблагаемыйДоход, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"010");
				Если НЕ РасчетЗаИП Тогда
					РаботаССообщениями.КомментарийРасчета("Ограничение по доходу в пределах 10 МЗП: " + ДанныеВОСМС.РазмерОграниченияПоДоходам, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"012");
				КонецЕсли;
								
				Если ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБаза <> 0 Тогда
					Если РасчетЗаИП Тогда
						РаботаССообщениями.КомментарийРасчета("Объект исчисления взноса ОСМС за месяц: " + Ограничения, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"020");
					Иначе
						РаботаССообщениями.КомментарийРасчета("Объект исчисления взноса ОСМС за месяц: " + ДанныеВОСМС.ОблагаемаяБазаЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"025");
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленный объект исчисления взноса ОСМС: " + ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБаза, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"030");
				КонецЕсли;
				РаботаССообщениями.КомментарийРасчета("Объект исчисления взноса ОСМС: " + ОблагаемаяБаза, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"035");
				
				Если РасчетЗаИП Тогда
					РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.ПолучитьФормуСписка().Открыть();");
				Иначе
					РасшифровкаСтавки = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.СведенияОСтавкахОСМС.ПолучитьФормуСписка().Открыть();");
				КонецЕсли;
				РаботаССообщениями.КомментарийРасчета("Процент взноса ОСМС: ", КомментарийВидаРасчета, ПроцентСтавки, РасшифровкаСтавки, , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"036");
				Если ДанныеВОСМС.РанееИсчисленныйВзнос <> 0 Тогда
					Если РасчетЗаИП Тогда
						РаботаССообщениями.КомментарийРасчета("Взнос ОСМС за месяц: " + ВзносИсчисленныйЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"040");
					Иначе 
						РаботаССообщениями.КомментарийРасчета("Взнос ОСМС за месяц: " + ДанныеВОСМС.ВОСМСЗаМесяц, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"041");
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("Ранее исчисленные взносы ОСМС: " + ДанныеВОСМС.РанееИсчисленныйВзнос, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"042");
				КонецЕсли;
			КонецЕсли;
			
			РаботаССообщениями.КомментарийРасчета("Исчисленные взносы ОСМС: " + ВзносИсчисленный, КомментарийВидаРасчета, , , , , Формат(ДанныеВОСМС.Период, "ДФ=ггггММдд")+ДанныеВОСМС.ВидДохода.Код+"043");
		КонецЕсли;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ВзносИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		МассивВзносов = ТаблицаВзносовПоФизЛицамПоДругимДоходам.НайтиСтроки(СтруктураПоискаПоФизЛицам);
		Если МассивВзносов.Количество() > 0 Тогда
			СтрокаВзносовТаблицаВзносовПоФизЛицам = МассивВзносов[0];
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза = СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза + ОблагаемаяБаза;
		Иначе
			СтрокаВзносовТаблицаВзносовПоФизЛицам = ТаблицаВзносовПоФизЛицамПоДругимДоходам.Добавить();
			СтрокаВзносовТаблицаВзносовПоФизЛицам.Период = ДанныеВОСМС.Период;
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ФизЛицо = ДанныеВОСМС.ФизЛицоДохода;
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза = ОблагаемаяБаза;
		КонецЕсли;
					
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);

			// Измерения
			Движение.ФизЛицо                	= ДанныеВОСМС.ФизЛицо;
			Движение.СтруктурнаяЕдиница        	= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеВОСМС.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;
			Движение.ВидДохода   				= ДанныеВОСМС.ВидДохода;

			// Ресурсы
			Движение.Взнос						= ВзносИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеВОСМС.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеВОСМС.Период;
			СтруктураПоиска.ВидДохода = ДанныеВОСМС.ВидДохода;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаВОСМС.Удалить(ДанныеВОСМС.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеВОСМС.ФизЛицо;
		Строка.ВидДохода 					= ДанныеВОСМС.ВидДохода;
		Строка.Взнос  						= ВзносИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеВОСМС.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеВОСМС
	Для Каждого Элемент Из РаботникиДляРасчетаВОСМС Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеВОСМС = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеВОСМС.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеВОСМС.Свернуть("ФизЛицо, МесяцНалоговогоПериода, ВидДохода", "Взнос, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеВОСМС);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Взнос"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Взнос");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымВОСМС

// Выполняет распределение налогов, взносов и удержаний по структурным единицам и подразделениям организаций
//
// Параметры:
//		ТаблицаРаспределения - результирующая таблица
// 		РезультатЗапроса - результат запроса с данными распределения
//		КолонкиДляРаспределения - массив имен распределяемых полей
//		КолонкаДляПоиска - имя ключевого поля для писка строки
//		КолонкаКоэффициентов - имя колонки для вычисления коэффициентов распределения (с абсолютными значениями)
//
// Возвращаемое значение:
//		Нет
//
Процедура РаспределитьНалогиВзносыУдержанияПоСтруктурнымЕдиницам(ТаблицаРаспределения, РезультатЗапроса, КолонкиДляРаспределения, КолонкаДляПоиска, КолонкаКоэффициентов) Экспорт
	
	ВыборкаПоГруппе = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, КолонкаДляПоиска);
	
	Пока ВыборкаПоГруппе.Следующий() Цикл
		ДанныеРаспределения = ВыборкаПоГруппе.Выбрать();
		
		Если ДанныеРаспределения.Количество() > 1 Тогда
			
			ПорядокОкругления = ДанныеРаспределения.ПорядокОкругления;
			МетодОкругления = ДанныеРаспределения.МетодОкругления;
			
			МассивКоэффициентов = Новый Массив;
			Пока ДанныеРаспределения.Следующий() Цикл
				МассивКоэффициентов.Добавить(ДанныеРаспределения[КолонкаКоэффициентов]);
			КонецЦикла;
			КолонкиДляРаспределенияСтрока = "";
			Для Каждого ИмяКолонки Из КолонкиДляРаспределения Цикл 
				КолонкиДляРаспределенияСтрока = КолонкиДляРаспределенияСтрока + ?(КолонкиДляРаспределенияСтрока <> "", ", ", "") + ИмяКолонки;				
			КонецЦикла;
			
			Для Каждого ИмяКолонки Из КолонкиДляРаспределения Цикл 
				
				МассивРезультатов = ОбщегоНазначения.РаспределитьПропорционально(ВыборкаПоГруппе[ИмяКолонки], МассивКоэффициентов, 2);
				ДанныеРаспределения.Сбросить();
				МассивСозданныхСтрок = Новый Массив;
				Для Инд = 0 По МассивКоэффициентов.Количество()-1 Цикл
					ДанныеРаспределения.Следующий();
					НоваяСтрока = ТаблицаРаспределения.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеРаспределения, ,КолонкиДляРаспределенияСтрока);
					НоваяСтрока[ИмяКолонки] = ?(МассивРезультатов <> Неопределено, МассивРезультатов[Инд], 0);
					МассивСозданныхСтрок.Добавить(НоваяСтрока);
				КонецЦикла;
				
				// Округлим результаты, остаток относим на последнюю строку
				Если МассивСозданныхСтрок.Количество() > 1 И ПорядокОкругления <> NULL Тогда
					Остаток = ВыборкаПоГруппе[ИмяКолонки];
					Для Инд = 0 По МассивСозданныхСтрок.Количество() - 1 Цикл
						РаспределеннаяСтрока = МассивСозданныхСтрок.Получить(Инд);
						Если Инд = МассивСозданныхСтрок.Количество() - 1 Тогда
							РаспределеннаяСтрока[ИмяКолонки] = Остаток;
						Иначе
							РаспределеннаяСтрока[ИмяКолонки] = ОбщегоНазначения.ОкруглитьЧисло(РаспределеннаяСтрока[ИмяКолонки], ПорядокОкругления, МетодОкругления);
							Остаток = Остаток - РаспределеннаяСтрока[ИмяКолонки];
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;

			КонецЦикла;
		Иначе
			ДанныеРаспределения.Следующий();
			НоваяСтрока = ТаблицаРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеРаспределения);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫПОЛНЕНИЯ ДВИЖЕНИЙ ПО РЕГИСТРАМ

// Выполняет движения по регистрам накопления ВзаиморасчетыСРаботникамиОрганизаций и
// ВзаиморасчетыСДепонентамиОрганизаций при выплате заработной платы
//
// Параметры:
//  ДокументОбъект   - документ-объект РасходныйКассовыйОрдер или ПлатежноеПоручениеИсходящее,
//  				   по данным которого надо выполнить движение
//	ТекстЗапросаПоВзаиморасчетам - строка с текстом запроса по выплачиваемым суммам 
//									(Поля: ФизЛицо, ПериодНачисленияЗарплаты, ПериодНачисленияДепонированнойЗарплаты, СпособРасчетаСуммКВыплате,
//											Сумма, ДепонированнаяСумма)
//	СтруктураПараметровЗапроса - структура с параметрами, используемыми в ТекстЗапросаПоВзаиморасчета
//	СпособВыплаты - ПеречислениеСсылка.СпособыВыплатыЗарплаты 
//	глИсчислениеНалоговСтруктурныхЕдиниц - значение глобальной переменной
//
Процедура ВыполнитьДвиженияПоРегистрамПоВыплатеЗарплаты(ДокументОбъект, 
														ТекстЗапросаПоВзаиморасчетам, 
														СтруктураПараметровЗапроса, 
														СпособВыплаты,
														глИсчислениеНалоговСтруктурныхЕдиниц) Экспорт

	ПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
	ДатаДокумента 	= ДокументОбъект.Дата;
	Движения		= ДокументОбъект.Движения;
	Организация 	= ДокументОбъект.Организация;

	ПорядокСписанияЗадолженностиПоЗарплате = ПроцедурыНалоговогоУчета.ПолучитьПризнакПорядокСписанияЗадолженностиПоЗарплате(Организация, ДатаДокумента);
	
	СтруктураПризнаковРапсределенияНалогов = ПроцедурыНалоговогоУчета.ПолучитьПризнакиРаспределенияНалогов(Организация, ДатаДокумента);
	
	РаспределятьНалогиПоСтруктурнымЕдиницам = СтруктураПризнаковРапсределенияНалогов.РаспределятьНалогиПоСтруктурнымЕдиницам;
	РаспределятьНалогиПоПодразделениямОрганизаций = СтруктураПризнаковРапсределенияНалогов.РаспределятьНалогиПоПодразделениямОрганизаций;
	
	//ПКК
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = Истина;
	//ПКК
	Запрос = Новый Запрос();
    МестоРаботыТекст="";
	// внесем список переданных параметров
	Для Каждого ПараметрЗапроса Из СтруктураПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	// прочие параметры
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("Организация", Организация);

	ТаблЗначенийВыплаченныеСуммыПоПериодам = Новый ТаблицаЗначений;
	ТаблЗначенийВыплаченныеСуммыПоПериодам.Колонки.Добавить("ПериодВзаиморасчетов");
	ТаблЗначенийВыплаченныеСуммыПоПериодам.Колонки.Добавить("СтруктурнаяЕдиница");
	ТаблЗначенийВыплаченныеСуммыПоПериодам.Колонки.Добавить("Налогоплательщик");
	ТаблЗначенийВыплаченныеСуммыПоПериодам.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблЗначенийВыплаченныеСуммыПоПериодам.Колонки.Добавить("ВыплаченнаяСумма");
	
	ТаблЗначенийВыплаченныеСуммыПоПериодам.Индексы.Добавить("ПериодВзаиморасчетов, СтруктурнаяЕдиница, Налогоплательщик, ПодразделениеОрганизации");
	СтруктураПоиска = Новый Структура("ПериодВзаиморасчетов, СтруктурнаяЕдиница, Налогоплательщик, ПодразделениеОрганизации");
	
	// для поддержки работы со структурными подразделениями определим подразделение работы 
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		ПериодыФизлицаТекст = "
		|ВЫБРАТЬ
		|	ФизЛицо,
		|	ПериодНачисленияЗарплаты КАК Период
		|ИЗ
		|	(" + ТекстЗапросаПоВзаиморасчетам + ") КАК ВзаиморасчетыСРаботниками
		|
		|ОБЪЕДИНИТЬ // берем различающиеся строки
		|
		|ВЫБРАТЬ
		|	ФизЛицо,
		|	ПериодНачисленияДепонированнойЗарплаты КАК Период
		|ИЗ
		|	(" + ТекстЗапросаПоВзаиморасчетам + ") КАК ВзаиморасчетыСДепонентами
		|";
	    ПериодыФизЛицаТекст = 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ * ПОМЕСТИТЬ ПериодыФизЛицаВТ ИЗ ("+ПериодыФизЛицаТекст+") КАК ЗапросПоПериодамДляВТ;";
		
		// Выполним запрос по периодам физлиц 
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = ПериодыФизлицаТекст;
		Запрос.Выполнить();
		
		ПериодыФизЛицаТекстВТ = "ВЫБРАТЬ * ИЗ ПериодыФизЛицаВТ КАК ВложенныйЗапросПериодыФизЛицаИзВТ";
		
		МестоРаботыТекст = СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекстВТ, Организация, Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		// Выполним запрос по местам работы
		Запрос.Текст = МестоРаботыТекст;
		Запрос.Выполнить();
		
		МестоРаботыВТ="МестоРаботыВТ";
		
	КонецЕсли;
	
	// Проводим списание по регистрам накопления
	// Сначала списываем по депонированным суммам, затем по текущим взаиморасчетам
	Для Инд = 1 По 2 Цикл

		Запрос.Текст ="
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеДокумента.ФизЛицо КАК ФизЛицо,
		|	ДанныеДокумента." + ?(Инд = 1, "Депонированная", "") + "Сумма КАК Сумма,
		|	ДанныеДокумента.ПериодНачисления" + ?(Инд = 1, "Депонированной", "") + "Зарплаты КАК ПериодНачисления,	
		|	ДанныеДокумента.СпособРасчетаСуммКВыплате КАК СпособРасчетаСуммКВыплате,
		|	ЕСТЬNULL(ОстаткиКВыплате.СуммаВзаиморасчетовОстаток, 0) КАК Остаток,
		|	ЕСТЬNULL(ОстаткиКВыплате.ПериодВзаиморасчетов, &ПустаяДата) КАК ПериодВзаиморасчетов";
		
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
			Запрос.Текст = Запрос.Текст + ",
			|	ВЫБОР
			|		КОГДА НЕ (ОстаткиКВыплате.СтруктурнаяЕдиница ЕСТЬ NULL)
			|			ТОГДА ОстаткиКВыплате.СтруктурнаяЕдиница
			|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
			|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
			|		ИНАЧЕ &Организация
			|	КОНЕЦ КАК СтруктурнаяЕдиница,
			|	ВЫБОР
			|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
			|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
			|		ИНАЧЕ &Организация
			|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
			|	ОстаткиКВыплате.Налогоплательщик,
			|	ВЫБОР 
			|		КОГДА НЕ (ОстаткиКВыплате.ПодразделениеОрганизации ЕСТЬ NULL)
			|			ТОГДА ОстаткиКВыплате.ПодразделениеОрганизации
			|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
			|			ТОГДА МестоРаботы.ПодразделениеОрганизации
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
			|	КОНЕЦ КАК ПодразделениеОрганизации,
			|	ВЫБОР 
			|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
			|			ТОГДА МестоРаботы.ПодразделениеОрганизации
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
			|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы";
		Иначе
			Запрос.Текст = Запрос.Текст + ",
			|	&Организация КАК СтруктурнаяЕдиница,
			|	&Организация КАК СтруктурнаяЕдиницаПоМестуРаботы,
			|	&Организация КАК Налогоплательщик,
			|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
			|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	(" + ТекстЗапросаПоВзаиморасчетам + ") КАК ДанныеДокумента 
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыС" + ?(Инд=1, "Депонентами", "Работниками") + "Организаций.Остатки(
		|										&ДатаДокумента, 
		|										Организация = &Организация И
		|										ФизЛицо В (ВЫБРАТЬ
		|														ВЫРАЗИТЬ(ФизЛицо КАК Справочник.ФизическиеЛица)
		|													ИЗ
		|														(" + ТекстЗапросаПоВзаиморасчетам + ") КАК Док)) КАК ОстаткиКВыплате
		|	ПО ДанныеДокумента.ФизЛицо = ОстаткиКВыплате.ФизЛицо";
		
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
			Запрос.Текст = Запрос.Текст + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
			|		ПО ДанныеДокумента.ФизЛицо = МестоРаботы.ФизЛицо
			|			И ДанныеДокумента.ПериодНачисления" + ?(Инд=1, "Депонированной", "") + "Зарплаты = МестоРаботы.Период";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "		
		|
		|ГДЕ 
		|	ДанныеДокумента." + ?(Инд = 1, "Депонированная", "") + "Сумма <> 0 
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеДокумента.ФизЛицо,
		|	ОстаткиКВыплате.ПериодВзаиморасчетов
		|
		|ИТОГИ МАКСИМУМ(Сумма), СУММА(Остаток), МАКСИМУМ(СтруктурнаяЕдиницаПоМестуРаботы), МАКСИМУМ(ПодразделениеОрганизацииПоМестуРаботы) ПО
		|	ФизЛицо,
		|	СпособРасчетаСуммКВыплате,
		|	ПериодНачисления
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
			
		ВыборкаПоФизЛицо = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоФизЛицо.Следующий() Цикл
			
			ВыборкаПоСпособуРасчета = ВыборкаПоФизЛицо.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			// Очищаем при смене сотрудника
			ТаблЗначенийВыплаченныеСуммыПоПериодам.Очистить();				
			
			Пока ВыборкаПоСпособуРасчета.Следующий() Цикл					
				
				Если ВыборкаПоСпособуРасчета.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.АвансЗаМесяц
				 ИЛИ ВыборкаПоСпособуРасчета.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.АвансЗаПервуюПоловинуМесяца Тогда
					ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс;
				Иначе
					ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
				КонецЕсли;
			
				ВыборкаПоПериодуНачисления = ВыборкаПоСпособуРасчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоПериодуНачисления.Следующий() Цикл
					
					СуммаКВыплате = ВыборкаПоПериодуНачисления.Сумма;
					Выборка = ВыборкаПоПериодуНачисления.Выбрать();						
					
					Пока Выборка.Следующий() И (СуммаКВыплате <> 0) Цикл
						
						МожноВыплачиватьЗаПериод = Ложь;
						
						// В зависимости от вида выплачиваемой суммы отражаем факт выплаты.
						Если Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц Тогда

							Если ПорядокСписанияЗадолженностиПоЗарплате = Перечисления.ПорядокСписанияЗадолженностиПоЗарплате.ПоМетодуFIFO Тогда

								Если Выборка.ПериодВзаиморасчетов <= Выборка.ПериодНачисления Тогда
									МожноВыплачиватьЗаПериод = Истина;
								КонецЕсли;
							Иначе
								
								Если Выборка.ПериодВзаиморасчетов = Выборка.ПериодНачисления Тогда
									МожноВыплачиватьЗаПериод = Истина;
								КонецЕсли;
								
							КонецЕсли;
						
						ИначеЕсли Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ОстаткиПоЗарплатеНаКонецМесяца Тогда
							
							Если Выборка.ПериодВзаиморасчетов <= Выборка.ПериодНачисления Тогда
								МожноВыплачиватьЗаПериод = Истина;
							КонецЕсли;
						
						ИначеЕсли Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ДепонированнаяЗарплатаЗаМесяц Тогда

							Если ПорядокСписанияЗадолженностиПоЗарплате = Перечисления.ПорядокСписанияЗадолженностиПоЗарплате.ПоМетодуFIFO Тогда

								Если Выборка.ПериодВзаиморасчетов <= Выборка.ПериодНачисления Тогда
									МожноВыплачиватьЗаПериод = Истина;
								КонецЕсли;
							Иначе
								
								Если Выборка.ПериодВзаиморасчетов = Выборка.ПериодНачисления Тогда
									МожноВыплачиватьЗаПериод = Истина;
								КонецЕсли;
								
							КонецЕсли;
							
						ИначеЕсли Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ОстаткиПоДепонированнойЗарплатеНаКонецМесяца Тогда

							Если Выборка.ПериодВзаиморасчетов <= Выборка.ПериодНачисления Тогда
								МожноВыплачиватьЗаПериод = Истина;
							КонецЕсли;

						ИначеЕсли Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаИДепонированнаяЗарплата Тогда

							Если ПорядокСписанияЗадолженностиПоЗарплате = Перечисления.ПорядокСписанияЗадолженностиПоЗарплате.ПоМетодуFIFO Тогда

								Если Выборка.ПериодВзаиморасчетов <= Выборка.ПериодНачисления Тогда
									МожноВыплачиватьЗаПериод = Истина;
								КонецЕсли;
							Иначе
								
								Если Выборка.ПериодВзаиморасчетов = Выборка.ПериодНачисления Тогда
									МожноВыплачиватьЗаПериод = Истина;
								КонецЕсли;
								
							КонецЕсли;

						ИначеЕсли Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаИОстаткиПоДепонированнойЗарплате Тогда

							// Депонированные суммы выплачиваем вплоть до указанного периода, а 
							// заработную плату - только за текущий месяц
							Если Инд = 1 И Выборка.ПериодВзаиморасчетов <= Выборка.ПериодНачисления Тогда
								МожноВыплачиватьЗаПериод = Истина;
							ИначеЕсли Выборка.ПериодВзаиморасчетов = Выборка.ПериодНачисления И НЕ ПорядокСписанияЗадолженностиПоЗарплате = Перечисления.ПорядокСписанияЗадолженностиПоЗарплате.ПоМетодуFIFO Тогда
								МожноВыплачиватьЗаПериод = Истина;
							ИначеЕсли Выборка.ПериодВзаиморасчетов <= Выборка.ПериодНачисления И ПорядокСписанияЗадолженностиПоЗарплате = Перечисления.ПорядокСписанияЗадолженностиПоЗарплате.ПоМетодуFIFO Тогда
								МожноВыплачиватьЗаПериод = Истина;
							КонецЕсли;

						ИначеЕсли Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ВсяСуммаЗадолженности Тогда

							Если Выборка.ПериодВзаиморасчетов <= Выборка.ПериодНачисления Тогда
								МожноВыплачиватьЗаПериод = Истина;
							КонецЕсли;
						
						ИначеЕсли Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ПоВидуРасчета Тогда
							
							Если ПорядокСписанияЗадолженностиПоЗарплате = Перечисления.ПорядокСписанияЗадолженностиПоЗарплате.ПоМетодуFIFO Тогда

								Если Выборка.ПериодВзаиморасчетов <= Выборка.ПериодНачисления Тогда
									МожноВыплачиватьЗаПериод = Истина;
								КонецЕсли;
							Иначе
								
								Если Выборка.ПериодВзаиморасчетов = Выборка.ПериодНачисления Тогда
									МожноВыплачиватьЗаПериод = Истина;
								КонецЕсли;
								
							КонецЕсли;
						
						ИначеЕсли Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.АвансЗаМесяц
							  ИЛИ Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.АвансЗаПервуюПоловинуМесяца Тогда

							Если ПорядокСписанияЗадолженностиПоЗарплате = Перечисления.ПорядокСписанияЗадолженностиПоЗарплате.ПоМетодуFIFO Тогда

								Если Выборка.ПериодВзаиморасчетов <= Выборка.ПериодНачисления Тогда
									МожноВыплачиватьЗаПериод = Истина;
								КонецЕсли;
							Иначе
								
								Если Выборка.ПериодВзаиморасчетов = Выборка.ПериодНачисления Тогда
									МожноВыплачиватьЗаПериод = Истина;
								КонецЕсли;
								
							КонецЕсли;
							
						Иначе
							
							МожноВыплачиватьЗаПериод = Истина;
							
						КонецЕсли;
						
						Если МожноВыплачиватьЗаПериод Тогда

							ПериодВзаиморасчетовКВыплате = ?(Выборка.ПериодВзаиморасчетов <> '00010101', Выборка.ПериодВзаиморасчетов, НачалоМесяца(ДатаДокумента));
							
							ОстатокКВыплате = Выборка.Остаток; 
							
							// Учтем уже ранее выплаченные суммы в цикле, чтобы потом не получить 
							// в регистре с депонированной зарплатой перебор имеющейся задолженности,
							// если будут оставаться остатки, то заносим их в регистр с текущими взаиморасчетами
							СтруктураПоиска.ПериодВзаиморасчетов = ПериодВзаиморасчетовКВыплате;
							СтруктураПоиска.СтруктурнаяЕдиница	 = Выборка.СтруктурнаяЕдиница;
							СтруктураПоиска.Налогоплательщик	 = Выборка.Налогоплательщик;
							// Остатки по подразделениям закрываем всегда чтобы не было зависших сумм
							СтруктураПоиска.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
							
							НайденныеСтроки = ТаблЗначенийВыплаченныеСуммыПоПериодам.НайтиСтроки(СтруктураПоиска);
							Если НайденныеСтроки.Количество() <> 0 Тогда
								ОстатокКВыплате = ОстатокКВыплате - НайденныеСтроки[0].ВыплаченнаяСумма;
							КонецЕсли;

							ВыплачиваемаяСумма = Мин(СуммаКВыплате, ОстатокКВыплате);
							
							Если ВыплачиваемаяСумма <> 0 Тогда
							
								Если Выборка.Налогоплательщик = NULL Тогда
									// получаем налогоплательщика по структурной единице по месту работы
									СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
									Налогоплательщик 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Выборка.СтруктурнаяЕдиницаПоМестуРаботы,
																										Организация,
																										глИсчислениеНалоговСтруктурныхЕдиниц,
																										Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
								Иначе
									СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
									Налогоплательщик 	= Выборка.Налогоплательщик;
								КонецЕсли;
							
								/////////////////////////////////////////////////////////////////////////////
								// ВзаиморасчетыСРаботникамиОрганизаций или ВзаиморасчетыСДепонентамиОрганизаций
								//
							
								Если Инд = 1 Тогда
									Движение = Движения.ВзаиморасчетыСДепонентамиОрганизаций.ДобавитьРасход();
								Иначе
									Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.ДобавитьРасход();
								КонецЕсли;
								
								// Свойства
								Движение.Период 				= ДатаДокумента;
								
								// Измерения
								Движение.ФизЛицо 				= Выборка.ФизЛицо;
								Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
									Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиница;
									Движение.Налогоплательщик	= Налогоплательщик;
								Иначе
									Движение.СтруктурнаяЕдиница	= Организация;
									Движение.Налогоплательщик	= Организация;
								КонецЕсли;
								Движение.ПериодВзаиморасчетов 	= ПериодВзаиморасчетовКВыплате;
								Движение.Организация			= Налогоплательщик;
								// Остатки по подразделениям закрываем всегда чтобы не было зависших сумм
								Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
								
								// Ресурсы
								Движение.СуммаВзаиморасчетов 	= ВыплачиваемаяСумма;
								
								// Реквизиты
								Движение.ХарактерВыплаты		= ХарактерВыплаты;
								Движение.СпособВыплаты			= СпособВыплаты;
								Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
								
								/////////////////////////////////////////////////////////////////////////////
								// ВыплаченныеДоходыРаботникамОрганизацийНУ
								//

								Движение = Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.Добавить();
								
								// Свойства
								Движение.Период 				= ДатаДокумента;
								
								// Измерения
								Движение.Физлицо				= Выборка.ФизЛицо;
								Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
									Движение.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
									Движение.Налогоплательщик	= Налогоплательщик;
								Иначе
									Движение.СтруктурнаяЕдиница = Организация;
									Движение.Налогоплательщик	= Организация;
								КонецЕсли;
								Движение.МесяцНалоговогоПериода = ПериодВзаиморасчетовКВыплате;
								Движение.Организация			= Налогоплательщик;
								// Остатки по подразделениям закрываем всегда чтобы не было зависших сумм
								Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
								
								// Ресурсы
								Движение.СуммаДохода			= ВыплачиваемаяСумма;
								
								СуммаКВыплате = СуммаКВыплате - ВыплачиваемаяСумма;
								
								// Запомним, сколько уже выплатили
								Если НайденныеСтроки.Количество() = 0 Тогда
									СтрокаТЗ = ТаблЗначенийВыплаченныеСуммыПоПериодам.Добавить();
									СтрокаТЗ.ПериодВзаиморасчетов = ПериодВзаиморасчетовКВыплате;
									СтрокаТЗ.СтруктурнаяЕдиница	  = Выборка.СтруктурнаяЕдиница; // всегда ищем по полям запроса!
									СтрокаТЗ.Налогоплательщик	  = Выборка.Налогоплательщик;
									СтрокаТЗ.ВыплаченнаяСумма 	  = ВыплачиваемаяСумма;
								Иначе
									НайденныеСтроки[0].ВыплаченнаяСумма = НайденныеСтроки[0].ВыплаченнаяСумма + ВыплачиваемаяСумма;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;										
					
					Если СуммаКВыплате <> 0 Тогда
						// Нераспределенный остаток ставим как выплату в месяце по дате документа
						
						/////////////////////////////////////////////////////////////////////////////
						// ВзаиморасчетыСРаботникамиОрганизаций 
						//
						Если Инд = 1 Тогда
							Движение = Движения.ВзаиморасчетыСДепонентамиОрганизаций.ДобавитьРасход();
						Иначе
							Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.ДобавитьРасход();
						КонецЕсли;
						
						// Свойства
						Движение.Период 				= ДатаДокумента;
						
						// Измерения
						Движение.ФизЛицо 				= ВыборкаПоПериодуНачисления.ФизЛицо;
						Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
							Налогоплательщик 			= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоПериодуНачисления.СтруктурнаяЕдиницаПоМестуРаботы,
																										Организация,
																										глИсчислениеНалоговСтруктурныхЕдиниц,
																										Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
							Движение.СтруктурнаяЕдиница	= ВыборкаПоПериодуНачисления.СтруктурнаяЕдиницаПоМестуРаботы;
							Движение.Налогоплательщик	= Налогоплательщик;
						Иначе
							Движение.СтруктурнаяЕдиница = Организация;
							Движение.Налогоплательщик	= Организация;
						КонецЕсли;							
						Движение.ПериодВзаиморасчетов   = НачалоМесяца(ДатаДокумента);
						Движение.Организация 			= Налогоплательщик;
						// Нераспределенный остаток относим на подразделение только если ведется раздельный учет налогов по подразделениям организаций
						Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда
							Движение.ПодразделениеОрганизации = ВыборкаПоПериодуНачисления.ПодразделениеОрганизацииПоМестуРаботы;
						КонецЕсли;
						
						
						// Ресурсы
						Движение.СуммаВзаиморасчетов	= СуммаКВыплате;
						
						// Реквизиты
						Движение.ХарактерВыплаты		= ХарактерВыплаты;
						Движение.СпособВыплаты			= СпособВыплаты;
						Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
						
						/////////////////////////////////////////////////////////////////////////////
						// ВыплаченныеДоходыРаботникамОрганизацийНУ
						//

						Движение = Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.Добавить();
								
						// Свойства
						Движение.Период 				= ДатаДокумента;
								
						// Измерения
						Движение.Физлицо				= ВыборкаПоПериодуНачисления.ФизЛицо;
						Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
							Движение.СтруктурнаяЕдиница = ВыборкаПоПериодуНачисления.СтруктурнаяЕдиницаПоМестуРаботы;
							Движение.Налогоплательщик	= Налогоплательщик;
						Иначе
							Движение.СтруктурнаяЕдиница = Организация;
							Движение.Налогоплательщик	= Организация;
						КонецЕсли;
						Движение.МесяцНалоговогоПериода = НачалоМесяца(ДатаДокумента);
						Движение.Организация			= Налогоплательщик;
						// Нераспределенный остаток относим на подразделение только если ведется раздельный учет налогов по подразделениям организаций
						Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда
							Движение.ПодразделениеОрганизации = ВыборкаПоПериодуНачисления.ПодразделениеОрганизацииПоМестуРаботы;
						КонецЕсли;
							
						// Ресурсы
						Движение.СуммаДохода			= СуммаКВыплате;
								
					КонецЕсли;
				
				КонецЦикла; // Пока ВыборкаПоПериодуНачисления.Следующий() Цикл
				
			КонецЦикла; // Пока ВыборкаПоСпособуРасчета.Следующий() Цикл

		КонецЦикла; // Пока ВыборкаПоФизЛицо.Следующий() Цикл
	
	КонецЦикла; // Для Инд = 1 По 2 Цикл	
	
КонецПроцедуры // ВыполнитьДвиженияПоРегистрамПоВыплатеЗарплаты()

// Выполняет движения по регистру накопления ВзаиморасчетыОрганизацийСПолучателямиИЛ по погашению задолженности
// 
// Параметры:
//	ДокументОбъект - документ, являющийся регистратором
//	ТекстЗапросаПоВзаиморасчетам - строка с текстом запроса по выплачиваемым суммам 
//									(Поля: Получатель, ДокументОснование, ПериодВзаиморасчетов, СуммаВзаиморасчетов, СуммаСборов)
//	СтруктураПараметровЗапроса - структура с параметрами, используемыми в ТекстЗапросаПоВзаиморасчета
//	глИсчислениеНалоговСтруктурныхЕдиниц - значение глобальной переменной
//
Процедура ВыполнитьДвиженияПоРегистрамПоПеречислениюИЛ(ДокументОбъект,
														ТекстЗапросаПоВзаиморасчетам,
														СтруктураПараметровЗапроса,
														глИсчислениеНалоговСтруктурныхЕдиниц) Экспорт

	Организация 	= ДокументОбъект.Организация;
	ДатаДокумента 	= ДокументОбъект.Дата;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
	
	СтруктураПризнаковРапсределенияНалогов = ПроцедурыНалоговогоУчета.ПолучитьПризнакиРаспределенияНалогов(Организация, ДатаДокумента);
	
	РаспределятьНалогиПоСтруктурнымЕдиницам = СтруктураПризнаковРапсределенияНалогов.РаспределятьНалогиПоСтруктурнымЕдиницам;
	РаспределятьНалогиПоПодразделениямОрганизаций = СтруктураПризнаковРапсределенияНалогов.РаспределятьНалогиПоПодразделениямОрганизаций;
	
	Запрос = Новый Запрос;
	МестоРаботыТекст="";
	// установим переданные параметры
	Для Каждого ПараметрЗапроса Из СтруктураПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументОснование.ФизЛицо КАК ФизЛицо,
		|	ПериодВзаиморасчетов КАК Период
		|ИЗ
		|	(" + ТекстЗапросаПоВзаиморасчетам + ") КАК Док";
		
		ПериодыФизЛицаТекст = 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ * ПОМЕСТИТЬ ПериодыФизЛицаВТ ИЗ ("+ПериодыФизЛицаТекст+") КАК ЗапросПоПериодамДляВТ;" ;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = ПериодыФизЛицаТекст;
		Запрос.Выполнить();
		
		ПериодыФизЛицаТекстВТ = "ВЫБРАТЬ * ИЗ ПериодыФизЛицаВТ КАК ВложенныйЗапросПериодыФизЛицаИзВТ";
	
		МестоРаботыТекст = СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекстВТ, Организация, Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
		
	КонецЕсли;
	
	Запрос.Текст = МестоРаботыТекст+"
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДокумента.Получатель,
	|	ДанныеДокумента.ДокументОснование,
	|	ДанныеДокумента.ПериодВзаиморасчетов,
	|	ДанныеДокумента.СуммаВзаиморасчетов,
	|	ДанныеДокумента.СуммаСборов,
	|	ЕСТЬNULL(ВзаиморасчетыОстатки.СуммаВзаиморасчетовОстаток, 0) КАК СуммаВзаиморасчетовОстаток,
	|	ЕСТЬNULL(ВзаиморасчетыОстатки.СуммаСборовОстаток, 0) КАК СуммаСборовОстаток";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (ВзаиморасчетыОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ВзаиморасчетыОстатки.СтруктурнаяЕдиница
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &Организация
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &Организация
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВзаиморасчетыОстатки.Налогоплательщик, 
		|	ВЫБОР 
		|		КОГДА НЕ (ВзаиморасчетыОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ВзаиморасчетыОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР 
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&Организация КАК СтруктурнаяЕдиница,
		|	&Организация КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&Организация КАК Налогоплательщик,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	(" + ТекстЗапросаПоВзаиморасчетам + ") КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Остатки(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|			И Получатель В (ВЫБРАТЬ
	|								Получатель
	|							ИЗ
	|								(" + ТекстЗапросаПоВзаиморасчетам + ") КАК Док)) КАК ВзаиморасчетыОстатки
	|		ПО ДанныеДокумента.Получатель = ВзаиморасчетыОстатки.Получатель
	|			И ДанныеДокумента.ПериодВзаиморасчетов = ВзаиморасчетыОстатки.ПериодВзаиморасчетов";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
		|		ПО ДанныеДокумента.ДокументОснование.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ДанныеДокумента.ПериодВзаиморасчетов = МестоРаботы.Период
		|";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Получатель,
	|	ДанныеДокумента.ДокументОснование,
	|	ДанныеДокумента.ПериодВзаиморасчетов
	|";

    Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.СледующийПоЗначениюПоля("Получатель") Цикл
		
		Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
			
			Пока Выборка.СледующийПоЗначениюПоля("ПериодВзаиморасчетов") Цикл
			
				ОстатокВзаиморасчетовКСписанию 	= Выборка.СуммаВзаиморасчетов;
				ОстатокСборовКСписанию 			= Выборка.СуммаСборов;
				
				ТекущийПолучатель 			= Выборка.Получатель;
				ТекущийДокументОснование 	= Выборка.ДокументОснование;
				ТекущийПериодВзаиморасчетов = Выборка.ПериодВзаиморасчетов;
				
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.Следующий()
						И Выборка.Получатель = ТекущийПолучатель
						И Выборка.ДокументОснование = ТекущийДокументОснование
						И Выборка.ПериодВзаиморасчетов = ТекущийПериодВзаиморасчетов
						И Выборка.Налогоплательщик <> NULL Цикл
				
					СуммаВзаиморасчетовКВыплате = Мин(ОстатокВзаиморасчетовКСписанию, Выборка.СуммаВзаиморасчетовОстаток);
					СуммаСборовКВыплате 		= Мин(ОстатокСборовКСписанию, Выборка.СуммаСборовОстаток);
					
					Если СуммаВзаиморасчетовКВыплате = 0 И СуммаСборовКВыплате = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ОстатокВзаиморасчетовКСписанию 	= ОстатокВзаиморасчетовКСписанию - СуммаВзаиморасчетовКВыплате;
					ОстатокСборовКСписанию			= ОстатокСборовКСписанию - СуммаСборовКВыплате;
					
					//////////////////////////////////////////////////////
					// ВзаиморасчетыОрганизацийСПолучателямиИЛ
					
					Движение = ДокументОбъект.Движения.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Добавить();
					
					// Свойства
					Движение.Период			= ДатаДокумента;
					Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
					
					// Измерения
					Движение.Получатель 	= Выборка.Получатель;
					Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Движение.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница = Организация;
						Движение.Налогоплательщик	= Организация;
					КонецЕсли;					
					Движение.ДокументОснование		= Выборка.ДокументОснование;
					Движение.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
					Движение.Организация			= Организация;
					// Остатки по подразделениям закрываем всегда чтобы не было зависших сумм
					Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;

					// Ресурсы
					Движение.СуммаВзаиморасчетов	= СуммаВзаиморасчетовКВыплате;
					Движение.СуммаСборов			= СуммаСборовКВыплате;
						
				КонецЦикла;
			
				// остаток кидаем на структурную единицу по месту работы сотрудника-алименщика
				Если ОстатокВзаиморасчетовКСписанию <> 0 Или ОстатокСборовКСписанию <> 0 Тогда
				
					//////////////////////////////////////////////////////
					// ВзаиморасчетыОрганизацийСПолучателямиИЛ

					Движение = ДокументОбъект.Движения.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Добавить();
					
					// Свойства
					Движение.Период			= ДатаДокумента;
					Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
					
					// Измерения
					Движение.Получатель 	= ТекущийПолучатель;
					Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																						Организация,
																						глИсчислениеНалоговСтруктурныхЕдиниц,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница = СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик 	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница = Организация;
						Движение.Налогоплательщик 	= Организация;
					КонецЕсли;
					Движение.ДокументОснование		= ТекущийДокументОснование;
					Движение.ПериодВзаиморасчетов	= ТекущийПериодВзаиморасчетов;
					Движение.Организация			= Организация;
					// Нераспределенный остаток относим на подразделение только если ведется раздельный учет налогов по подразделениям организаций					
					Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
					
					// Ресурсы
					Движение.СуммаВзаиморасчетов 	= ОстатокВзаиморасчетовКСписанию;
					Движение.СуммаСборов			= ОстатокСборовКСписанию;
					
				КонецЕсли;				
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ПериодВзаиморасчетов") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("Получатель") Цикл

КонецПроцедуры // ВыполнитьДвиженияПоРегистрамПоПеречислениюИЛ()

// Выполняет движения по регистрам накопления ОПВПодлежитПеречислениюВФонды и ОПВРасчетыСФондами по погашению задолженности ОПВ
// 
// Параметры:
//	ДокументОбъект - документ, являющийся регистратором
//	ТекстЗапросаПоВзаиморасчетам - строка с текстом запроса по перечисляемым суммам 
//									(Поля: ФизЛицо, МесяцИсчисления, ВидПлатежа, СпособРасчетаСуммыКПеречислению, Сумма)
//	СтруктураПараметровЗапроса - структура с параметрами, используемыми в ТекстЗапросаПоВзаиморасчета
//	глИсчислениеНалоговСтруктурныхЕдиниц - значение глобальной переменной
//
Процедура ВыполнитьДвиженияПоРегистрамПоПеречислениюОПВ(ДокументОбъект,
														ТекстЗапросаПоВзаиморасчетам,
														СтруктураПараметровЗапроса,
														глИсчислениеНалоговСтруктурныхЕдиниц) Экспорт
														
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
	ДатаДокумента 	= ДокументОбъект.Дата;
	Движения		= ДокументОбъект.Движения;
	Организация 	= ДокументОбъект.Организация;
	
	СтруктураПризнаковРаспределенияНалогов = ПроцедурыНалоговогоУчета.ПолучитьПризнакиРаспределенияНалогов(Организация, ДатаДокумента);
    РаспределятьНалогиПоСтруктурнымЕдиницам = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоСтруктурнымЕдиницам;
    РаспределятьНалогиПоПодразделениямОрганизаций = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоПодразделениямОрганизаций;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МестоРаботыТекст="";
	
		// внесем список переданных параметров
	Для Каждого ПараметрЗапроса Из СтруктураПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамОрганизация", 		Организация);
	Запрос.УстановитьПараметр("парамДата", 				ДатаДокумента);
	
	// Список видов платежей, по которым формируются движения по регистру ОПВПодлежитПеречислениюВФонды
	СписокВидовПлатежей = Новый СписокЗначений;
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогАкт);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогСам);
	Запрос.УстановитьПараметр("СписокВидовПлатежей", СписокВидовПлатежей);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ПОМЕСТИТЬ ВТ_ОПВРасчетыСФондами ИЗ (" + ТекстЗапросаПоВзаиморасчетам + ") КАК ОПВРасчетыСФондами";
	Запрос.Выполнить();
	ТекстЗапросаПоВзаиморасчетам = "ВТ_ОПВРасчетыСФондами";	
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизЛицо,
		|	МесяцИсчисления КАК Период
		|ИЗ
		|	" + ТекстЗапросаПоВзаиморасчетам + " КАК Взаиморасчеты
		|";
	
		МестоРаботыТекст = СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекст, Организация, Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
		
	КонецЕсли;

	Запрос.Текст = МестоРаботыТекст+ 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОПВПеречислениеВФонды.МесяцИсчисления КАК МесяцИсчисления,
	|	ОПВПеречислениеВФонды.ВидПлатежа КАК ВидПлатежа,
	|	ВЫБОР
	|		КОГДА ОПВПеречислениеВФонды.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПлатежЯвляетсяНалогом,
	|	ОПВПеречислениеВФонды.ФизЛицо КАК ФизЛицо,
	|	ОПВПеречислениеВФонды.Сумма КАК Сумма,
	|	ЕСТЬNULL(ОПВРасчетыСФондамиОстатки.ВзносОстаток, 0) КАК РасчетыСФондамиОстаток,
	|	ВЫБОР
	|		КОГДА ОПВПеречислениеВФонды.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ОПВПодлежитПеречислениюВФондыОстатки.МесяцВыплатыДоходов
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК МесяцВыплатыДоходов,
	|	ЕСТЬNULL(ОПВРасчетыСФондамиОстатки.МесяцНалоговогоПериода, ЕСТЬNULL(ОПВПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, ОПВПеречислениеВФонды.МесяцИсчисления)) КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА ОПВПеречислениеВФонды.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ЕСТЬNULL(ОПВПодлежитПеречислениюВФондыОстатки.ВзносОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПодлежитПеречислениюОстаток";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (ОПВПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ОПВПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница
		|		КОГДА НЕ (ОПВРасчетыСФондамиОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ОПВРасчетыСФондамиОстатки.СтруктурнаяЕдиница
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (ОПВРасчетыСФондамиОстатки.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА ОПВРасчетыСФондамиОстатки.Налогоплательщик
		|		ИНАЧЕ ОПВПодлежитПеречислениюВФондыОстатки.Налогоплательщик
		|	КОНЕЦ КАК Налогоплательщик,
		|	ВЫБОР 
		|		КОГДА НЕ (ОПВПодлежитПеречислениюВФондыОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ОПВПодлежитПеречислениюВФондыОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (ОПВРасчетыСФондамиОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ОПВРасчетыСФондамиОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР 
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&парамОрганизация КАК СтруктурнаяЕдиница,
		|	&парамОрганизация КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&парамОрганизация КАК Налогоплательщик,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	" + ТекстЗапросаПоВзаиморасчетам + " КАК ОПВПеречислениеВФонды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОПВРасчетыСФондами.Остатки(
	|			&парамДата,
	|			Организация = &парамОрганизация
	|			И ФизЛицо В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВЫРАЗИТЬ(ФизЛицо КАК Справочник.ФизическиеЛица)
	|				ИЗ
	|					" + ТекстЗапросаПоВзаиморасчетам + " КАК Док)) КАК ОПВРасчетыСФондамиОстатки
	|		ПО ОПВПеречислениеВФонды.ФизЛицо = ОПВРасчетыСФондамиОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ОПВПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяц) 
	|							ИЛИ ОПВПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяцПоНУ)
	|						ТОГДА ОПВПеречислениеВФонды.МесяцИсчисления = НАЧАЛОПЕРИОДА(ОПВРасчетыСФондамиОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|					ИНАЧЕ ОПВПеречислениеВФонды.МесяцИсчисления >= НАЧАЛОПЕРИОДА(ОПВРасчетыСФондамиОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|				КОНЕЦ)
	|			И ОПВПеречислениеВФонды.ВидПлатежа = ОПВРасчетыСФондамиОстатки.ВидПлатежа
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОПВПодлежитПеречислениюВФонды.Остатки(
	|			&парамДата,
	|			Организация = &парамОрганизация
	|		    И ФизЛицо В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВЫРАЗИТЬ(ФизЛицо КАК Справочник.ФизическиеЛица)
	|				ИЗ
	|					" + ТекстЗапросаПоВзаиморасчетам + " КАК Док)) КАК ОПВПодлежитПеречислениюВФондыОстатки
	|		ПО ОПВПеречислениеВФонды.ФизЛицо = ОПВПодлежитПеречислениюВФондыОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ОПВПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяц) 
	|							ИЛИ ОПВПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяцПоНУ)
	|						ТОГДА ОПВПеречислениеВФонды.МесяцИсчисления = НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|					ИНАЧЕ ОПВПеречислениеВФонды.МесяцИсчисления >= НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|				КОНЕЦ)
	|			И ВЫБОР
	|				КОГДА НЕ(ОПВРасчетыСФондамиОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
	|					ТОГДА ОПВРасчетыСФондамиОстатки.СтруктурнаяЕдиница = ОПВПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница
	|							И ОПВРасчетыСФондамиОстатки.Налогоплательщик = ОПВПодлежитПеречислениюВФондыОстатки.Налогоплательщик
	|							И ОПВРасчетыСФондамиОстатки.МесяцНалоговогоПериода = ОПВПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
		|		ПО ОПВПеречислениеВФонды.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ОПВПеречислениеВФонды.МесяцИсчисления = МестоРаботы.Период";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ОБЪЕДИНИТЬ // Выводим только те строки, по которым нет остатков в РН ""ОПВ расчеты с фондами"", но есть остатки в РН ""ОПВ подлежит перечислению в фонды""
	|
	|ВЫБРАТЬ 
	|	ОПВПеречислениеВФонды.МесяцИсчисления КАК МесяцИсчисления,
	|	ОПВПеречислениеВФонды.ВидПлатежа КАК ВидПлатежа,
	|	ВЫБОР
	|		КОГДА ОПВПеречислениеВФонды.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПлатежЯвляетсяНалогом,
	|	ОПВПеречислениеВФонды.ФизЛицо КАК ФизЛицо,
	|	ОПВПеречислениеВФонды.Сумма КАК Сумма,
	|	ЕСТЬNULL(ОПВРасчетыСФондамиОстатки.ВзносОстаток, 0) КАК РасчетыСФондамиОстаток,
	|	ВЫБОР
	|		КОГДА ОПВПеречислениеВФонды.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ОПВПодлежитПеречислениюВФондыОстатки.МесяцВыплатыДоходов
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК МесяцВыплатыДоходов,
	|	ЕСТЬNULL(ОПВПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, ЕСТЬNULL(ОПВРасчетыСФондамиОстатки.МесяцНалоговогоПериода, ОПВПеречислениеВФонды.МесяцИсчисления)) КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА ОПВПеречислениеВФонды.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ЕСТЬNULL(ОПВПодлежитПеречислениюВФондыОстатки.ВзносОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПодлежитПеречислениюОстаток";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (ОПВПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ОПВПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница
		|		КОГДА НЕ (ОПВРасчетыСФондамиОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ОПВРасчетыСФондамиОстатки.СтруктурнаяЕдиница
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (ОПВРасчетыСФондамиОстатки.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА ОПВРасчетыСФондамиОстатки.Налогоплательщик
		|		ИНАЧЕ ОПВПодлежитПеречислениюВФондыОстатки.Налогоплательщик
		|	КОНЕЦ КАК Налогоплательщик,
		|	ВЫБОР 
		|		КОГДА НЕ (ОПВРасчетыСФондамиОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ОПВРасчетыСФондамиОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (ОПВПодлежитПеречислениюВФондыОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ОПВПодлежитПеречислениюВФондыОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР 
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&парамОрганизация КАК СтруктурнаяЕдиница,
		|	&парамОрганизация КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&парамОрганизация КАК Налогоплательщик,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы 
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	" + ТекстЗапросаПоВзаиморасчетам + " КАК ОПВПеречислениеВФонды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОПВПодлежитПеречислениюВФонды.Остатки(
	|			&парамДата,
	|			Организация = &парамОрганизация
	|		    И ФизЛицо В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВЫРАЗИТЬ(ФизЛицо КАК Справочник.ФизическиеЛица)
	|				ИЗ
	|					" + ТекстЗапросаПоВзаиморасчетам + " КАК Док)) КАК ОПВПодлежитПеречислениюВФондыОстатки
	|		ПО ОПВПеречислениеВФонды.ФизЛицо = ОПВПодлежитПеречислениюВФондыОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ОПВПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяц) 
	|							ИЛИ ОПВПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяцПоНУ)
	|						ТОГДА ОПВПеречислениеВФонды.МесяцИсчисления = НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|					ИНАЧЕ ОПВПеречислениеВФонды.МесяцИсчисления >= НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|				КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОПВРасчетыСФондами.Остатки(
	|			&парамДата,
	|			Организация = &парамОрганизация
	|			И ФизЛицо В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВЫРАЗИТЬ(ФизЛицо КАК Справочник.ФизическиеЛица)
	|				ИЗ
	|					" + ТекстЗапросаПоВзаиморасчетам + " КАК Док)) КАК ОПВРасчетыСФондамиОстатки
	|		ПО ОПВПеречислениеВФонды.ФизЛицо = ОПВРасчетыСФондамиОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ОПВПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяц) 
	|							ИЛИ ОПВПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяцПоНУ)
	|						ТОГДА ОПВПеречислениеВФонды.МесяцИсчисления = НАЧАЛОПЕРИОДА(ОПВРасчетыСФондамиОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|					ИНАЧЕ ОПВПеречислениеВФонды.МесяцИсчисления >= НАЧАЛОПЕРИОДА(ОПВРасчетыСФондамиОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|				КОНЕЦ)
	|			И ВЫБОР
	|				КОГДА НЕ(ОПВПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
	|					ТОГДА ОПВРасчетыСФондамиОстатки.СтруктурнаяЕдиница = ОПВПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница
	|							И ОПВРасчетыСФондамиОстатки.Налогоплательщик = ОПВПодлежитПеречислениюВФондыОстатки.Налогоплательщик
	|							И ОПВРасчетыСФондамиОстатки.МесяцНалоговогоПериода = ОПВПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|			И ОПВПеречислениеВФонды.ВидПлатежа = ОПВРасчетыСФондамиОстатки.ВидПлатежа
	|
	|";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
		|		ПО ОПВПеречислениеВФонды.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ОПВПеречислениеВФонды.МесяцИсчисления = МестоРаботы.Период";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,	
	|	ВидПлатежа,	
	|	МесяцИсчисления,
	|	МесяцНалоговогоПериода,
	|	МесяцВыплатыДоходов
	|";
	
	Выборка =  Запрос.Выполнить().Выбрать();
	
	ТаблицаСписанныхОстатков = Новый ТаблицаЗначений;
	ТаблицаСписанныхОстатков.Колонки.Добавить("СтруктурнаяЕдиница");
	ТаблицаСписанныхОстатков.Колонки.Добавить("Налогоплательщик");
	ТаблицаСписанныхОстатков.Колонки.Добавить("УжеСписано");
	
	ТаблицаСписанныхОстатков.Индексы.Добавить("СтруктурнаяЕдиница, Налогоплательщик");
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("СтруктурнаяЕдиница");
	СтруктураПоиска.Вставить("Налогоплательщик");
	
	Движения.ОПВРасчетыСФондами.мТаблицаДвижений = Движения.ОПВРасчетыСФондами.ВыгрузитьКолонки();
	Движения.ОПВПодлежитПеречислениюВФонды.мТаблицаДвижений = Движения.ОПВПодлежитПеречислениюВФонды.ВыгрузитьКолонки();
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
				
				ОстатокКСписанию 	= Выборка.Сумма;
				ТаблицаСписанныхОстатков.Очистить();
				
				Пока Выборка.СледующийПоЗначениюПоля("МесяцНалоговогоПериода") Цикл
		
					// по регистрам накопления
					Пока Выборка.СледующийПоЗначениюПоля("МесяцВыплатыДоходов") Цикл
						
						ПодлежитПеречислениюОстаток = Выборка.ПодлежитПеречислениюОстаток;				
						
						ТекущееФизЛицо 					= Выборка.ФизЛицо;
						ТекущийВидПлатежа				= Выборка.ВидПлатежа;
						ТекущийПлатежЯвляетсяНалогом 	= Выборка.ПлатежЯвляетсяНалогом;
						ТекущийМесяцИсчисления			= Выборка.МесяцИсчисления;
						ТекущийМесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
						ТекущийМесяцВыплатыДоходов 		= Выборка.МесяцВыплатыДоходов;
						
						СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
						ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
						
						Пока Выборка.Следующий()
						   И Выборка.ФизЛицо = ТекущееФизЛицо
						   И Выборка.ВидПлатежа = ТекущийВидПлатежа
						   И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
						   И Выборка.МесяцНалоговогоПериода = ТекущийМесяцНалоговогоПериода
						   И Выборка.МесяцВыплатыДоходов = ТекущийМесяцВыплатыДоходов
						   И Выборка.Налогоплательщик <> NULL Цикл
								
							// найдем уже учтенные на предыдущих шагах цикла суммы по комбинации СтруктурнаяЕдиница+Налогоплательщик
							СтруктураПоиска.СтруктурнаяЕдиница 	= Выборка.СтруктурнаяЕдиница;
							СтруктураПоиска.Налогоплательщик	= Выборка.Налогоплательщик;
							НайденныеСтроки = ТаблицаСписанныхОстатков.НайтиСтроки(СтруктураПоиска);
							
							СуммаКСписанию = Выборка.ПодлежитПеречислениюОстаток;
							
							Если НайденныеСтроки.Количество() > 0 Тогда
								СуммаКСписанию = СуммаКСписанию - НайденныеСтроки[0].УжеСписано;
							КонецЕсли;
							
							Если Выборка.ПлатежЯвляетсяНалогом И ПодлежитПеречислениюОстаток <> 0 Тогда // берем с учетом сумм, подлежащих перечислению
								СуммаКСписанию = Мин(ОстатокКСписанию, ПодлежитПеречислениюОстаток, СуммаКСписанию);
								ПодлежитПеречислениюОстаток = ПодлежитПеречислениюОстаток - СуммаКСписанию;
							Иначе
								СуммаКСписанию = Мин(ОстатокКСписанию, СуммаКСписанию);
							КонецЕсли;
							ОстатокКСписанию = ОстатокКСписанию - СуммаКСписанию;
							
							// запомним сколько уже списали
							Если НайденныеСтроки.Количество() = 0 Тогда
								СтрокаТЗ = ТаблицаСписанныхОстатков.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка);
								СтрокаТЗ.УжеСписано = СуммаКСписанию;
							Иначе
								НайденныеСтроки[0].УжеСписано = НайденныеСтроки[0].УжеСписано + СуммаКСписанию;
							КонецЕсли;
							
							/////////////////////////////////////////////////
							// ОПВРасчетыСФондами
							Движение = Движения.ОПВРасчетыСФондами.мТаблицаДвижений.Добавить();
							
							// Свойства
							Движение.Период			= ДатаДокумента;
							Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
							
							Движение.ФизЛицо		= Выборка.ФизЛицо;
							Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
								Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
								Движение.Налогоплательщик	= Выборка.Налогоплательщик;
							Иначе
								Движение.СтруктурнаяЕдиница	= Организация;
								Движение.Налогоплательщик	= Организация;
							КонецЕсли;
							Движение.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
							Движение.ВидПлатежа				= Выборка.ВидПлатежа;
							Движение.Организация			= Организация;
							// Остатки по подразделению закрываем всегда чтобы не было зависания остатков
							Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;

							// Ресурсы
							Движение.Взнос					= СуммаКСписанию;
							
							// Реквизиты
							Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
							
							
							/////////////////////////////////////////////////
							// ОПВПодлежитПеречислениюВФонды
							Если Выборка.ПлатежЯвляетсяНалогом Тогда
							
								Движение = Движения.ОПВПодлежитПеречислениюВФонды.мТаблицаДвижений.Добавить();
								
								// Свойства
								Движение.Период			= ДатаДокумента;
								Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
								
								// Измерения
								Движение.ФизЛицо		= Выборка.ФизЛицо;
								Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
									Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
									Движение.Налогоплательщик	= Выборка.Налогоплательщик;
								Иначе
									Движение.СтруктурнаяЕдиница	= Организация;
									Движение.Налогоплательщик	= Организация;
								КонецЕсли;
								Движение.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
								Движение.МесяцВыплатыДоходов	= ?(Выборка.МесяцВыплатыДоходов <> NULL, Выборка.МесяцВыплатыДоходов, Выборка.МесяцИсчисления);
								Движение.Организация			= Организация;
								// Остатки по подразделению закрываем всегда чтобы не было зависания остатков
								Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
								
								// Ресурсы
								Движение.Взнос					= СуммаКСписанию;
								
								// Реквизиты
								Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
							
							КонецЕсли;
							
						КонецЦикла;
					КонецЦикла;
				КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцВыплатыДоходов") Цикл

				Если ОстатокКСписанию <> 0 Тогда
				
					/////////////////////////////////////////////////
					// ОПВРасчетыСФондами
					
					Движение = Движения.ОПВРасчетыСФондами.мТаблицаДвижений.Добавить();
					
					// Свойства
					Движение.Период 		= ДатаДокумента;
					Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																						Организация,
																						глИсчислениеНалоговСтруктурныхЕдиниц,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Организация;
						Движение.Налогоплательщик	= Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= Организация;
					// Нераспределенный остаток относим на подразделение места работы только если ведется раздельный учет налогов по подразделениям организаций
					Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
					
					// Ресурсы
					Движение.Взнос					= ОстатокКСписанию;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;

					/////////////////////////////////////////////////
					// ОПВПодлежитПеречислениюВФонды
					Если ТекущийПлатежЯвляетсяНалогом Тогда
						Движение = Движения.ОПВПодлежитПеречислениюВФонды.мТаблицаДвижений.Добавить();
						
						// Свойства
						Движение.Период			= ДатаДокумента;
						Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
						
						// Измерения 
						Движение.ФизЛицо		= ТекущееФизЛицо;
						Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
							Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
							Движение.Налогоплательщик	= Налогоплательщик;
						Иначе
							Движение.СтруктурнаяЕдиница	= Организация;
							Движение.Налогоплательщик	= Организация;
						КонецЕсли;
						Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
						Движение.МесяцВыплатыДоходов	= ТекущийМесяцИсчисления;
						Движение.Организация			= Организация;
						// Нераспределенный остаток относим на подразделение места работы только если ведется раздельный учет налогов по подразделениям организаций
						Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда
							Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
						КонецЕсли;
						
						// Ресурсы
						Движение.Взнос					= ОстатокКСписанию;
						
						// Реквизиты
						Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
						
					КонецЕсли;
				
				КонецЕсли;

			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцНачисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
	// свернем одинаковые строки и запишем в наборы записей
	ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(Движения.ОПВРасчетыСФондами);
	Движения.ОПВРасчетыСФондами.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	Движения.ОПВРасчетыСФондами.Загрузить(Движения.ОПВРасчетыСФондами.мТаблицаДвижений);
	
	ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(Движения.ОПВПодлежитПеречислениюВФонды);
	Движения.ОПВПодлежитПеречислениюВФонды.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	Движения.ОПВПодлежитПеречислениюВФонды.Загрузить(Движения.ОПВПодлежитПеречислениюВФонды.мТаблицаДвижений);

														
КонецПроцедуры

// Выполняет движения по регистру накопления СОРасчетыСФондами по погашению задолженности СО
// 
// Параметры:
//	ДокументОбъект - документ, являющийся регистратором
//	ТекстЗапросаПоВзаиморасчетам - строка с текстом запроса по перечисляемым суммам 
//									(Поля: ФизЛицо, МесяцИсчисления, ВидПлатежа, СпособРасчетаСуммыКПеречислению, Сумма)
//	СтруктураПараметровЗапроса - структура с параметрами, используемыми в ТекстЗапросаПоВзаиморасчета
//	глИсчислениеНалоговСтруктурныхЕдиниц - значение глобальной переменной
//
Процедура ВыполнитьДвиженияПоРегистрамПоПеречислениюСО(ДокументОбъект,
														ТекстЗапросаПоВзаиморасчетам,
														СтруктураПараметровЗапроса,
														глИсчислениеНалоговСтруктурныхЕдиниц) Экспорт
													
													
													
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();

	ДатаДокумента 	= ДокументОбъект.Дата;
	Движения		= ДокументОбъект.Движения;
	Организация 	= ДокументОбъект.Организация;
  	СтруктураПризнаковРаспределенияНалогов = ПроцедурыНалоговогоУчета.ПолучитьПризнакиРаспределенияНалогов(Организация, ДатаДокумента);
    РаспределятьНалогиПоСтруктурнымЕдиницам = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоСтруктурнымЕдиницам;
    РаспределятьНалогиПоПодразделениямОрганизаций = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоПодразделениямОрганизаций;
	
	Запрос = Новый Запрос;
	МестоРаботыТекст="";
	
	// внесем список переданных параметров
	Для Каждого ПараметрЗапроса Из СтруктураПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДата", 			ДатаДокумента);
	Запрос.УстановитьПараметр("парамОрганизация", 	Организация);

	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизЛицо,
		|	МесяцИсчисления КАК Период
		|ИЗ
		|	(" + ТекстЗапросаПоВзаиморасчетам + ") КАК Взаиморасчеты
		|";
	    ПериодыФизЛицаТекст = 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ * ПОМЕСТИТЬ ПериодыФизЛицаВТ ИЗ ("+ПериодыФизЛицаТекст+") КАК ЗапросПоПериодамДляВТ;" ;
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = ПериодыФизЛицаТекст;
		Запрос.Выполнить();
		
		ПериодыФизЛицаТекстВТ = "ВЫБРАТЬ * ИЗ ПериодыФизЛицаВТ КАК ВложенныйЗапросПериодыФизЛицаИзВТ";
	
		МестоРаботыТекст = СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекстВТ, Организация, Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
		
	КонецЕсли;
	
	Запрос.Текст = МестоРаботыТекст+
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.МесяцИсчисления,
	|	ВложенныйЗапрос.ВидПлатежа,
	|	ВложенныйЗапрос.ФизЛицо,
	|	ВложенныйЗапрос.Сумма,
	|	ЕСТЬNULL(СОРасчетыСФондамиОстатки.МесяцНалоговогоПериода, ВложенныйЗапрос.МесяцИсчисления) КАК МесяцНалоговогоПериода,
	|	ЕСТЬNULL(СОРасчетыСФондамиОстатки.ОтчислениеОстаток, 0) КАК ОтчислениеОстаток";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ(СОРасчетыСФондамиОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА СОРасчетыСФондамиОстатки.СтруктурнаяЕдиница
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	СОРасчетыСФондамиОстатки.Налогоплательщик,
		|	ВЫБОР 
		|		КОГДА НЕ (СОРасчетыСФондамиОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА СОРасчетыСФондамиОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР 
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&парамОрганизация КАК СтруктурнаяЕдиница,
		|	&парамОрганизация КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&парамОрганизация КАК Налогоплательщик,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	(" + ТекстЗапросаПоВзаиморасчетам + ") КАК ВложенныйЗапрос
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СОРасчетыСФондами.Остатки(
	|			&парамДата,
	|			Организация = &парамОрганизация
	|			И ФизЛицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВЫРАЗИТЬ(ФизЛицо КАК Справочник.ФизическиеЛица)
	|				ИЗ
	|					(" + ТекстЗапросаПоВзаиморасчетам + ") КАК Док)) КАК СОРасчетыСФондамиОстатки
	|		ПО ВложенныйЗапрос.ФизЛицо = СОРасчетыСФондамиОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ВложенныйЗапрос.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяц)
	|						ТОГДА ВложенныйЗапрос.МесяцИсчисления = СОРасчетыСФондамиОстатки.МесяцНалоговогоПериода
	|					ИНАЧЕ ВложенныйЗапрос.МесяцИсчисления >= СОРасчетыСФондамиОстатки.МесяцНалоговогоПериода
	|				КОНЕЦ)
	|			И ВложенныйЗапрос.ВидПлатежа = СОРасчетыСФондамиОстатки.ВидПлатежа";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
		|		ПО ВложенныйЗапрос.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ВложенныйЗапрос.МесяцИсчисления = МестоРаботы.Период";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.ФизЛицо,
	|	ВложенныйЗапрос.ВидПлатежа,
	|	ВложенныйЗапрос.МесяцИсчисления,
	|	ЕСТЬNULL(СОРасчетыСФондамиОстатки.МесяцНалоговогоПериода, ВложенныйЗапрос.МесяцИсчисления)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	глИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
	
	Движения.СОРасчетыСФондами.мТаблицаДвижений = Движения.СОРасчетыСФондами.ВыгрузитьКолонки();
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
			
				ОстатокКСписанию 		= Выборка.Сумма;
				ТекущееФизЛицо 			= Выборка.ФизЛицо;
				ТекущийВидПлатежа		= Выборка.ВидПлатежа;
				ТекущийМесяцИсчисления	= Выборка.МесяцИсчисления;
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.Следующий()
				   И Выборка.ФизЛицо = ТекущееФизЛицо
				   И Выборка.ВидПлатежа = ТекущийВидПлатежа
				   И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
				   И Выборка.Налогоплательщик <> NULL Цикл
				
					СуммаКСписанию 		= Мин(ОстатокКСписанию, Выборка.ОтчислениеОстаток);
					ОстатокКСписанию 	= ОстатокКСписанию - СуммаКСписанию;
					
					Если СуммаКСписанию = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Движение = Движения.СОРасчетыСФондами.мТаблицаДвижений.Добавить();
					
					// Свойства
					Движение.Период			= ДатаДокумента;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;					
					// Измерения
					Движение.ФизЛицо		= Выборка.ФизЛицо;
					Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Организация;
						Движение.Налогоплательщик	= Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
					Движение.ВидПлатежа				= Выборка.ВидПлатежа;
					Движение.Организация			= Организация;					
					// Остатки по подразделению закрываем всегда чтобы не было зависания остатков
					Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
					// Ресурсы
					Движение.Отчисление				= СуммаКСписанию;					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;				
				КонецЦикла;
			
				Если ОстатокКСписанию <> 0 Тогда 
				    // остаток относим на структурную единицу и налогоплательщика по месту работы

					Движение = Движения.СОРасчетыСФондами.мТаблицаДвижений.Добавить();					
					// Свойства
					Движение.Период			= ДатаДокумента;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы, 
																						Организация,
																						глИсчислениеНалоговСтруктурныхЕдиниц,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Организация;
						Движение.Налогоплательщик	= Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= Организация;
					
					// Нераспределенный остаток относим на подразделение места работы только если ведется раздельный учет налогов по подразделениям организаций
					Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда 
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
										
					// Ресурсы
					Движение.Отчисление				= ОстатокКСписанию;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
				    
				КонецЕсли;
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл

	// сверем движения регистра и запишем в набор записей
	ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(Движения.СОРасчетыСФондами);
	Движения.СОРасчетыСФондами.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	Движения.СОРасчетыСФондами.Загрузить(Движения.СОРасчетыСФондами.мТаблицаДвижений);
	
КонецПроцедуры

// Выполняет движения по регистру накопления ООСМСРасчетыСФондами по погашению задолженности СО
// 
// Параметры:
//	ДокументОбъект - документ, являющийся регистратором
//	ТекстЗапросаПоВзаиморасчетам - строка с текстом запроса по перечисляемым суммам 
//									(Поля: ФизЛицо, МесяцИсчисления, ВидПлатежа, СпособРасчетаСуммыКПеречислению, Сумма)
//	СтруктураПараметровЗапроса - структура с параметрами, используемыми в ТекстЗапросаПоВзаиморасчета
//	глИсчислениеНалоговСтруктурныхЕдиниц - значение глобальной переменной
//
Процедура ВыполнитьДвиженияПоРегистрамПоПеречислениюООСМС(ДокументОбъект,
														ТекстЗапросаПоВзаиморасчетам,
														СтруктураПараметровЗапроса,
														глИсчислениеНалоговСтруктурныхЕдиниц) Экспорт
																				
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();

	ДатаДокумента 	= ДокументОбъект.Дата;
	Движения		= ДокументОбъект.Движения;
	Организация 	= ДокументОбъект.Организация;
  	СтруктураПризнаковРаспределенияНалогов = ПроцедурыНалоговогоУчета.ПолучитьПризнакиРаспределенияНалогов(Организация, ДатаДокумента);
    РаспределятьНалогиПоСтруктурнымЕдиницам = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоСтруктурнымЕдиницам;
    РаспределятьНалогиПоПодразделениямОрганизаций = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоПодразделениямОрганизаций;
	
	Запрос = Новый Запрос;
	МестоРаботыТекст="";
	
	// внесем список переданных параметров
	Для Каждого ПараметрЗапроса Из СтруктураПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДата", 			ДатаДокумента);
	Запрос.УстановитьПараметр("парамОрганизация", 	Организация);

	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизЛицо,
		|	МесяцИсчисления КАК Период
		|ИЗ
		|	(" + ТекстЗапросаПоВзаиморасчетам + ") КАК Взаиморасчеты
		|";
	    ПериодыФизЛицаТекст = 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ * ПОМЕСТИТЬ ПериодыФизЛицаВТ ИЗ ("+ПериодыФизЛицаТекст+") КАК ЗапросПоПериодамДляВТ;" ;
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = ПериодыФизЛицаТекст;
		Запрос.Выполнить();
		
		ПериодыФизЛицаТекстВТ = "ВЫБРАТЬ * ИЗ ПериодыФизЛицаВТ КАК ВложенныйЗапросПериодыФизЛицаИзВТ";
	
		МестоРаботыТекст = СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекстВТ, Организация, Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
		
	КонецЕсли;
	
	Запрос.Текст = МестоРаботыТекст+
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.МесяцИсчисления,
	|	ВложенныйЗапрос.ВидПлатежа,
	|	ВложенныйЗапрос.ФизЛицо,
	|	ВложенныйЗапрос.Сумма,
	|	ЕСТЬNULL(ООСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода, ВложенныйЗапрос.МесяцИсчисления) КАК МесяцНалоговогоПериода,
	|	ЕСТЬNULL(ООСМСРасчетыСФондамиОстатки.ОтчислениеОстаток, 0) КАК ОтчислениеОстаток";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ(ООСМСРасчетыСФондамиОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ООСМСРасчетыСФондамиОстатки.СтруктурнаяЕдиница
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ООСМСРасчетыСФондамиОстатки.Налогоплательщик,
		|	ВЫБОР 
		|		КОГДА НЕ (ООСМСРасчетыСФондамиОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ООСМСРасчетыСФондамиОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР 
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&парамОрганизация КАК СтруктурнаяЕдиница,
		|	&парамОрганизация КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&парамОрганизация КАК Налогоплательщик,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	(" + ТекстЗапросаПоВзаиморасчетам + ") КАК ВложенныйЗапрос
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ООСМСРасчетыСФондами.Остатки(
	|			&парамДата,
	|			Организация = &парамОрганизация
	|			И ФизЛицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВЫРАЗИТЬ(ФизЛицо КАК Справочник.ФизическиеЛица)
	|				ИЗ
	|					(" + ТекстЗапросаПоВзаиморасчетам + ") КАК Док)) КАК ООСМСРасчетыСФондамиОстатки
	|		ПО ВложенныйЗапрос.ФизЛицо = ООСМСРасчетыСФондамиОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ВложенныйЗапрос.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяц)
	|						ТОГДА ВложенныйЗапрос.МесяцИсчисления = ООСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода
	|					ИНАЧЕ ВложенныйЗапрос.МесяцИсчисления >= ООСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода
	|				КОНЕЦ)
	|			И ВложенныйЗапрос.ВидПлатежа = ООСМСРасчетыСФондамиОстатки.ВидПлатежа";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
		|		ПО ВложенныйЗапрос.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ВложенныйЗапрос.МесяцИсчисления = МестоРаботы.Период";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.ФизЛицо,
	|	ВложенныйЗапрос.ВидПлатежа,
	|	ВложенныйЗапрос.МесяцИсчисления,
	|	ЕСТЬNULL(ООСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода, ВложенныйЗапрос.МесяцИсчисления)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	глИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
	
	Движения.ООСМСРасчетыСФондами.мТаблицаДвижений = Движения.ООСМСРасчетыСФондами.ВыгрузитьКолонки();
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
			
				ОстатокКСписанию 		= Выборка.Сумма;
				ТекущееФизЛицо 			= Выборка.ФизЛицо;
				ТекущийВидПлатежа		= Выборка.ВидПлатежа;
				ТекущийМесяцИсчисления	= Выборка.МесяцИсчисления;
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.Следующий()
				   И Выборка.ФизЛицо = ТекущееФизЛицо
				   И Выборка.ВидПлатежа = ТекущийВидПлатежа
				   И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
				   И Выборка.Налогоплательщик <> NULL Цикл
				
					СуммаКСписанию 		= Мин(ОстатокКСписанию, Выборка.ОтчислениеОстаток);
					ОстатокКСписанию 	= ОстатокКСписанию - СуммаКСписанию;
					
					Если СуммаКСписанию = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Движение = Движения.ООСМСРасчетыСФондами.мТаблицаДвижений.Добавить();
					
					// Свойства
					Движение.Период			= ДатаДокумента;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;					
					// Измерения
					Движение.ФизЛицо		= Выборка.ФизЛицо;
					Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Организация;
						Движение.Налогоплательщик	= Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
					Движение.ВидПлатежа				= Выборка.ВидПлатежа;
					Движение.Организация			= Организация;					
					// Остатки по подразделению закрываем всегда чтобы не было зависания остатков
					Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
					// Ресурсы
					Движение.Отчисление				= СуммаКСписанию;					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;				
				КонецЦикла;
			
				Если ОстатокКСписанию <> 0 Тогда 
				    // остаток относим на структурную единицу и налогоплательщика по месту работы

					Движение = Движения.ООСМСРасчетыСФондами.мТаблицаДвижений.Добавить();					
					// Свойства
					Движение.Период			= ДатаДокумента;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы, 
																						Организация,
																						глИсчислениеНалоговСтруктурныхЕдиниц,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Организация;
						Движение.Налогоплательщик	= Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= Организация;
					
					// Нераспределенный остаток относим на подразделение места работы только если ведется раздельный учет налогов по подразделениям организаций
					Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда 
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
										
					// Ресурсы
					Движение.Отчисление				= ОстатокКСписанию;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
				    
				КонецЕсли;
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл

	// сверем движения регистра и запишем в набор записей
	ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(Движения.ООСМСРасчетыСФондами);
	Движения.ООСМСРасчетыСФондами.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	Движения.ООСМСРасчетыСФондами.Загрузить(Движения.ООСМСРасчетыСФондами.мТаблицаДвижений);
	
КонецПроцедуры

// Выполняет движения по регистрам накопления ВОСМСПодлежитПеречислениюВФонды и ВОСМСРасчетыСФондами по погашению задолженности ВОСМС
// 
// Параметры:
//	ДокументОбъект - документ, являющийся регистратором
//	ТекстЗапросаПоВзаиморасчетам - строка с текстом запроса по перечисляемым суммам 
//									(Поля: ФизЛицо, МесяцИсчисления, ВидПлатежа, СпособРасчетаСуммыКПеречислению, Сумма)
//	СтруктураПараметровЗапроса - структура с параметрами, используемыми в ТекстЗапросаПоВзаиморасчета
//	глИсчислениеНалоговСтруктурныхЕдиниц - значение глобальной переменной
//
Процедура ВыполнитьДвиженияПоРегистрамПоПеречислениюВОСМС(ДокументОбъект,
														ТекстЗапросаПоВзаиморасчетам,
														СтруктураПараметровЗапроса,
														глИсчислениеНалоговСтруктурныхЕдиниц) Экспорт
														
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
	ДатаДокумента 	= ДокументОбъект.Дата;
	Движения		= ДокументОбъект.Движения;
	Организация 	= ДокументОбъект.Организация;
	
	СтруктураПризнаковРаспределенияНалогов = ПроцедурыНалоговогоУчета.ПолучитьПризнакиРаспределенияНалогов(Организация, ДатаДокумента);
    РаспределятьНалогиПоСтруктурнымЕдиницам = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоСтруктурнымЕдиницам;
    РаспределятьНалогиПоПодразделениямОрганизаций = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоПодразделениямОрганизаций;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МестоРаботыТекст="";
	
		// внесем список переданных параметров
	Для Каждого ПараметрЗапроса Из СтруктураПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамОрганизация", 		Организация);
	Запрос.УстановитьПараметр("парамДата", 				ДатаДокумента);
	
	// Список видов платежей, по которым формируются движения по регистру ВОСМСПодлежитПеречислениюВФонды
	СписокВидовПлатежей = Новый СписокЗначений;
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогАкт);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогСам);
	Запрос.УстановитьПараметр("СписокВидовПлатежей", СписокВидовПлатежей);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ПОМЕСТИТЬ ВТ_ВОСМСРасчетыСФондами ИЗ (" + ТекстЗапросаПоВзаиморасчетам + ") КАК ВОСМСРасчетыСФондами";
	Запрос.Выполнить();
	ТекстЗапросаПоВзаиморасчетам = "ВТ_ВОСМСРасчетыСФондами";	
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизЛицо,
		|	МесяцИсчисления КАК Период
		|ИЗ
		|	" + ТекстЗапросаПоВзаиморасчетам + " КАК Взаиморасчеты
		|";
	
		МестоРаботыТекст = СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекст, Организация, Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
		
	КонецЕсли;

	Запрос.Текст = МестоРаботыТекст+ 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВОСМСПеречислениеВФонды.МесяцИсчисления КАК МесяцИсчисления,
	|	ВОСМСПеречислениеВФонды.ВидПлатежа КАК ВидПлатежа,
	|	ВЫБОР
	|		КОГДА ВОСМСПеречислениеВФонды.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПлатежЯвляетсяНалогом,
	|	ВОСМСПеречислениеВФонды.ФизЛицо КАК ФизЛицо,
	|	ВОСМСПеречислениеВФонды.Сумма КАК Сумма,
	|	ЕСТЬNULL(ВОСМСРасчетыСФондамиОстатки.ВзносОстаток, 0) КАК РасчетыСФондамиОстаток,
	|	ВЫБОР
	|		КОГДА ВОСМСПеречислениеВФонды.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ВОСМСПодлежитПеречислениюВФондыОстатки.МесяцВыплатыДоходов
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК МесяцВыплатыДоходов,
	|	ЕСТЬNULL(ВОСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода, ЕСТЬNULL(ВОСМСПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, ВОСМСПеречислениеВФонды.МесяцИсчисления)) КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА ВОСМСПеречислениеВФонды.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ЕСТЬNULL(ВОСМСПодлежитПеречислениюВФондыОстатки.ВзносОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПодлежитПеречислениюОстаток";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (ВОСМСПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ВОСМСПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница
		|		КОГДА НЕ (ВОСМСРасчетыСФондамиОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ВОСМСРасчетыСФондамиОстатки.СтруктурнаяЕдиница
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (ВОСМСРасчетыСФондамиОстатки.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА ВОСМСРасчетыСФондамиОстатки.Налогоплательщик
		|		ИНАЧЕ ВОСМСПодлежитПеречислениюВФондыОстатки.Налогоплательщик
		|	КОНЕЦ КАК Налогоплательщик,
		|	ВЫБОР 
		|		КОГДА НЕ (ВОСМСПодлежитПеречислениюВФондыОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ВОСМСПодлежитПеречислениюВФондыОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (ВОСМСРасчетыСФондамиОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ВОСМСРасчетыСФондамиОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР 
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&парамОрганизация КАК СтруктурнаяЕдиница,
		|	&парамОрганизация КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&парамОрганизация КАК Налогоплательщик,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	" + ТекстЗапросаПоВзаиморасчетам + " КАК ВОСМСПеречислениеВФонды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВОСМСРасчетыСФондами.Остатки(
	|			&парамДата,
	|			Организация = &парамОрганизация
	|			И ФизЛицо В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ФизЛицо
	|				ИЗ
	|					" + ТекстЗапросаПоВзаиморасчетам + " КАК Док)) КАК ВОСМСРасчетыСФондамиОстатки
	|		ПО ВОСМСПеречислениеВФонды.ФизЛицо = ВОСМСРасчетыСФондамиОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ВОСМСПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяц) 
	|							ИЛИ ВОСМСПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяцПоНУ)
	|						ТОГДА ВОСМСПеречислениеВФонды.МесяцИсчисления = НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|					ИНАЧЕ ВОСМСПеречислениеВФонды.МесяцИсчисления >= НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|				КОНЕЦ)
	|			И ВОСМСПеречислениеВФонды.ВидПлатежа = ВОСМСРасчетыСФондамиОстатки.ВидПлатежа
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВОСМСПодлежитПеречислениюВФонды.Остатки(
	|			&парамДата,
	|			Организация = &парамОрганизация
	|		    И ФизЛицо В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ФизЛицо
	|				ИЗ
	|					" + ТекстЗапросаПоВзаиморасчетам + " КАК Док)) КАК ВОСМСПодлежитПеречислениюВФондыОстатки
	|		ПО ВОСМСПеречислениеВФонды.ФизЛицо = ВОСМСПодлежитПеречислениюВФондыОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ВОСМСПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяц) 
	|							ИЛИ ВОСМСПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяцПоНУ)
	|						ТОГДА ВОСМСПеречислениеВФонды.МесяцИсчисления = НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|					ИНАЧЕ ВОСМСПеречислениеВФонды.МесяцИсчисления >= НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|				КОНЕЦ)
	|			И ВЫБОР
	|				КОГДА НЕ(ВОСМСРасчетыСФондамиОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
	|					ТОГДА ВОСМСРасчетыСФондамиОстатки.СтруктурнаяЕдиница = ВОСМСПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница
	|							И ВОСМСРасчетыСФондамиОстатки.Налогоплательщик = ВОСМСПодлежитПеречислениюВФондыОстатки.Налогоплательщик
	|							И ВОСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода = ВОСМСПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
		|		ПО ВОСМСПеречислениеВФонды.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ВОСМСПеречислениеВФонды.МесяцИсчисления = МестоРаботы.Период";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ОБЪЕДИНИТЬ // Выводим только те строки, по которым нет остатков в РН ""ОВСМС расчеты с фондами"", но есть остатки в РН ""ВОСМС подлежит перечислению в фонды""
	|
	|ВЫБРАТЬ 
	|	ВОСМСПеречислениеВФонды.МесяцИсчисления КАК МесяцИсчисления,
	|	ВОСМСПеречислениеВФонды.ВидПлатежа КАК ВидПлатежа,
	|	ВЫБОР
	|		КОГДА ВОСМСПеречислениеВФонды.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПлатежЯвляетсяНалогом,
	|	ВОСМСПеречислениеВФонды.ФизЛицо КАК ФизЛицо,
	|	ВОСМСПеречислениеВФонды.Сумма КАК Сумма,
	|	ЕСТЬNULL(ВОСМСРасчетыСФондамиОстатки.ВзносОстаток, 0) КАК РасчетыСФондамиОстаток,
	|	ВЫБОР
	|		КОГДА ВОСМСПеречислениеВФонды.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ВОСМСПодлежитПеречислениюВФондыОстатки.МесяцВыплатыДоходов
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК МесяцВыплатыДоходов,
	|	ЕСТЬNULL(ВОСМСПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, ЕСТЬNULL(ВОСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода, ВОСМСПеречислениеВФонды.МесяцИсчисления)) КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА ВОСМСПеречислениеВФонды.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ЕСТЬNULL(ВОСМСПодлежитПеречислениюВФондыОстатки.ВзносОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПодлежитПеречислениюОстаток";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (ВОСМСПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ВОСМСПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница
		|		КОГДА НЕ (ВОСМСРасчетыСФондамиОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ВОСМСРасчетыСФондамиОстатки.СтруктурнаяЕдиница
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (ВОСМСРасчетыСФондамиОстатки.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА ВОСМСРасчетыСФондамиОстатки.Налогоплательщик
		|		ИНАЧЕ ВОСМСПодлежитПеречислениюВФондыОстатки.Налогоплательщик
		|	КОНЕЦ КАК Налогоплательщик,
		|	ВЫБОР 
		|		КОГДА НЕ (ВОСМСРасчетыСФондамиОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ВОСМСРасчетыСФондамиОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (ВОСМСПодлежитПеречислениюВФондыОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ВОСМСПодлежитПеречислениюВФондыОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР 
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&парамОрганизация КАК СтруктурнаяЕдиница,
		|	&парамОрганизация КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&парамОрганизация КАК Налогоплательщик,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы 
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	" + ТекстЗапросаПоВзаиморасчетам + " КАК ВОСМСПеречислениеВФонды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВОСМСПодлежитПеречислениюВФонды.Остатки(
	|			&парамДата,
	|			Организация = &парамОрганизация
	|		    И ФизЛицо В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ФизЛицо
	|				ИЗ
	|					" + ТекстЗапросаПоВзаиморасчетам + " КАК Док)) КАК ВОСМСПодлежитПеречислениюВФондыОстатки
	|		ПО ВОСМСПеречислениеВФонды.ФизЛицо = ВОСМСПодлежитПеречислениюВФондыОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ВОСМСПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяц) 
	|							ИЛИ ВОСМСПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяцПоНУ)
	|						ТОГДА ВОСМСПеречислениеВФонды.МесяцИсчисления = НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|					ИНАЧЕ ВОСМСПеречислениеВФонды.МесяцИсчисления >= НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|				КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВОСМСРасчетыСФондами.Остатки(
	|			&парамДата,
	|			Организация = &парамОрганизация
	|			И ФизЛицо В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ФизЛицо
	|				ИЗ
	|					" + ТекстЗапросаПоВзаиморасчетам + " КАК Док)) КАК ВОСМСРасчетыСФондамиОстатки
	|		ПО ВОСМСПеречислениеВФонды.ФизЛицо = ВОСМСРасчетыСФондамиОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ВОСМСПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяц) 
	|							ИЛИ ВОСМСПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяцПоНУ)
	|						ТОГДА ВОСМСПеречислениеВФонды.МесяцИсчисления = НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|					ИНАЧЕ ВОСМСПеречислениеВФонды.МесяцИсчисления >= НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|				КОНЕЦ)
	|			И ВЫБОР
	|				КОГДА НЕ(ВОСМСРасчетыСФондамиОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
	|					ТОГДА ВОСМСРасчетыСФондамиОстатки.СтруктурнаяЕдиница = ВОСМСПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница
	|							И ВОСМСРасчетыСФондамиОстатки.Налогоплательщик = ВОСМСПодлежитПеречислениюВФондыОстатки.Налогоплательщик
	|							И ВОСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода = ВОСМСПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|			И ВОСМСПеречислениеВФонды.ВидПлатежа = ВОСМСРасчетыСФондамиОстатки.ВидПлатежа
	|
	|";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
		|		ПО ВОСМСПеречислениеВФонды.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ВОСМСПеречислениеВФонды.МесяцИсчисления = МестоРаботы.Период";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,	
	|	ВидПлатежа,	
	|	МесяцИсчисления,
	|	МесяцНалоговогоПериода,
	|	МесяцВыплатыДоходов
	|";
	
	Выборка =  Запрос.Выполнить().Выбрать();
	
	ТаблицаСписанныхОстатков = Новый ТаблицаЗначений;
	ТаблицаСписанныхОстатков.Колонки.Добавить("СтруктурнаяЕдиница");
	ТаблицаСписанныхОстатков.Колонки.Добавить("Налогоплательщик");
	ТаблицаСписанныхОстатков.Колонки.Добавить("УжеСписано");
	
	ТаблицаСписанныхОстатков.Индексы.Добавить("СтруктурнаяЕдиница, Налогоплательщик");
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("СтруктурнаяЕдиница");
	СтруктураПоиска.Вставить("Налогоплательщик");
	
	Движения.ВОСМСРасчетыСФондами.мТаблицаДвижений = Движения.ВОСМСРасчетыСФондами.ВыгрузитьКолонки();
	Движения.ВОСМСПодлежитПеречислениюВФонды.мТаблицаДвижений = Движения.ВОСМСПодлежитПеречислениюВФонды.ВыгрузитьКолонки();
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
				
				ОстатокКСписанию 	= Выборка.Сумма;
				ТаблицаСписанныхОстатков.Очистить();
				
				Пока Выборка.СледующийПоЗначениюПоля("МесяцНалоговогоПериода") Цикл
		
					// по регистрам накопления
					Пока Выборка.СледующийПоЗначениюПоля("МесяцВыплатыДоходов") Цикл
						
						ПодлежитПеречислениюОстаток = Выборка.ПодлежитПеречислениюОстаток;				
						
						ТекущееФизЛицо 					= Выборка.ФизЛицо;
						ТекущийВидПлатежа				= Выборка.ВидПлатежа;
						ТекущийПлатежЯвляетсяНалогом 	= Выборка.ПлатежЯвляетсяНалогом;
						ТекущийМесяцИсчисления			= Выборка.МесяцИсчисления;
						ТекущийМесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
						ТекущийМесяцВыплатыДоходов 		= Выборка.МесяцВыплатыДоходов;
						
						СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
						ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
						
						Пока Выборка.Следующий()
						   И Выборка.ФизЛицо = ТекущееФизЛицо
						   И Выборка.ВидПлатежа = ТекущийВидПлатежа
						   И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
						   И Выборка.МесяцНалоговогоПериода = ТекущийМесяцНалоговогоПериода
						   И Выборка.МесяцВыплатыДоходов = ТекущийМесяцВыплатыДоходов
						   И Выборка.Налогоплательщик <> NULL Цикл
								
							// найдем уже учтенные на предыдущих шагах цикла суммы по комбинации СтруктурнаяЕдиница+Налогоплательщик
							СтруктураПоиска.СтруктурнаяЕдиница 	= Выборка.СтруктурнаяЕдиница;
							СтруктураПоиска.Налогоплательщик	= Выборка.Налогоплательщик;
							НайденныеСтроки = ТаблицаСписанныхОстатков.НайтиСтроки(СтруктураПоиска);
							
							СуммаКСписанию = Выборка.ПодлежитПеречислениюОстаток;
							
							Если НайденныеСтроки.Количество() > 0 Тогда
								СуммаКСписанию = СуммаКСписанию - НайденныеСтроки[0].УжеСписано;
							КонецЕсли;
							
							Если Выборка.ПлатежЯвляетсяНалогом И ПодлежитПеречислениюОстаток <> 0 Тогда // берем с учетом сумм, подлежащих перечислению
								СуммаКСписанию = Мин(ОстатокКСписанию, ПодлежитПеречислениюОстаток, СуммаКСписанию);
								ПодлежитПеречислениюОстаток = ПодлежитПеречислениюОстаток - СуммаКСписанию;
							Иначе
								СуммаКСписанию = Мин(ОстатокКСписанию, СуммаКСписанию);
							КонецЕсли;
							ОстатокКСписанию = ОстатокКСписанию - СуммаКСписанию;
							
							// запомним сколько уже списали
							Если НайденныеСтроки.Количество() = 0 Тогда
								СтрокаТЗ = ТаблицаСписанныхОстатков.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка);
								СтрокаТЗ.УжеСписано = СуммаКСписанию;
							Иначе
								НайденныеСтроки[0].УжеСписано = НайденныеСтроки[0].УжеСписано + СуммаКСписанию;
							КонецЕсли;
							
							/////////////////////////////////////////////////
							// ВОСМСРасчетыСФондами
							Движение = Движения.ВОСМСРасчетыСФондами.мТаблицаДвижений.Добавить();
							
							// Свойства
							Движение.Период			= ДатаДокумента;
							Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
							
							Движение.ФизЛицо		= Выборка.ФизЛицо;
							Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
								Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
								Движение.Налогоплательщик	= Выборка.Налогоплательщик;
							Иначе
								Движение.СтруктурнаяЕдиница	= Организация;
								Движение.Налогоплательщик	= Организация;
							КонецЕсли;
							Движение.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
							Движение.ВидПлатежа				= Выборка.ВидПлатежа;
							Движение.Организация			= Организация;
							// Остатки по подразделению закрываем всегда чтобы не было зависания остатков
							Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;

							// Ресурсы
							Движение.Взнос					= СуммаКСписанию;
							
							// Реквизиты
							Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
							
							
							/////////////////////////////////////////////////
							// ВОСМСПодлежитПеречислениюВФонды
							Если Выборка.ПлатежЯвляетсяНалогом Тогда
							
								Движение = Движения.ВОСМСПодлежитПеречислениюВФонды.мТаблицаДвижений.Добавить();
								
								// Свойства
								Движение.Период			= ДатаДокумента;
								Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
								
								// Измерения
								Движение.ФизЛицо		= Выборка.ФизЛицо;
								Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
									Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
									Движение.Налогоплательщик	= Выборка.Налогоплательщик;
								Иначе
									Движение.СтруктурнаяЕдиница	= Организация;
									Движение.Налогоплательщик	= Организация;
								КонецЕсли;
								Движение.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
								Движение.МесяцВыплатыДоходов	= ?(Выборка.МесяцВыплатыДоходов <> NULL, Выборка.МесяцВыплатыДоходов, Выборка.МесяцИсчисления);
								Движение.Организация			= Организация;
								// Остатки по подразделению закрываем всегда чтобы не было зависания остатков
								Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
								
								// Ресурсы
								Движение.Взнос					= СуммаКСписанию;
								
								// Реквизиты
								Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
							
							КонецЕсли;
							
						КонецЦикла;
					КонецЦикла;
				КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцВыплатыДоходов") Цикл

				Если ОстатокКСписанию <> 0 Тогда
				
					/////////////////////////////////////////////////
					// ВОСМСРасчетыСФондами
					
					Движение = Движения.ВОСМСРасчетыСФондами.мТаблицаДвижений.Добавить();
					
					// Свойства
					Движение.Период 		= ДатаДокумента;
					Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																						Организация,
																						глИсчислениеНалоговСтруктурныхЕдиниц,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Организация;
						Движение.Налогоплательщик	= Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= Организация;
					// Нераспределенный остаток относим на подразделение места работы только если ведется раздельный учет налогов по подразделениям организаций
					Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
					
					// Ресурсы
					Движение.Взнос					= ОстатокКСписанию;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;

					/////////////////////////////////////////////////
					// ВОСМСПодлежитПеречислениюВФонды
					Если ТекущийПлатежЯвляетсяНалогом Тогда
						Движение = Движения.ВОСМСПодлежитПеречислениюВФонды.мТаблицаДвижений.Добавить();
						
						// Свойства
						Движение.Период			= ДатаДокумента;
						Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
						
						// Измерения 
						Движение.ФизЛицо		= ТекущееФизЛицо;
						Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
							Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
							Движение.Налогоплательщик	= Налогоплательщик;
						Иначе
							Движение.СтруктурнаяЕдиница	= Организация;
							Движение.Налогоплательщик	= Организация;
						КонецЕсли;
						Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
						Движение.МесяцВыплатыДоходов	= ТекущийМесяцИсчисления;
						Движение.Организация			= Организация;
						// Нераспределенный остаток относим на подразделение места работы только если ведется раздельный учет налогов по подразделениям организаций
						Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда
							Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
						КонецЕсли;
						
						// Ресурсы
						Движение.Взнос					= ОстатокКСписанию;
						
						// Реквизиты
						Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
						
					КонецЕсли;
				
				КонецЕсли;

			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцНачисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
	// свернем одинаковые строки и запишем в наборы записей
	ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(Движения.ВОСМСРасчетыСФондами);
	Движения.ВОСМСРасчетыСФондами.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	Движения.ВОСМСРасчетыСФондами.Загрузить(Движения.ВОСМСРасчетыСФондами.мТаблицаДвижений);
	
	ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(Движения.ВОСМСПодлежитПеречислениюВФонды);
	Движения.ВОСМСПодлежитПеречислениюВФонды.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	Движения.ВОСМСПодлежитПеречислениюВФонды.Загрузить(Движения.ВОСМСПодлежитПеречислениюВФонды.мТаблицаДвижений);

														
КонецПроцедуры

// Выполняет движения по регистру накопления ОППВРасчетыСФондами по погашению задолженности ОППВ
// 
// Параметры:
//	ДокументОбъект - документ, являющийся регистратором
//	ТекстЗапросаПоВзаиморасчетам - строка с текстом запроса по перечисляемым суммам 
//									(Поля: ФизЛицо, МесяцИсчисления, ВидПлатежа, СпособРасчетаСуммыКПеречислению, Сумма)
//	СтруктураПараметровЗапроса - структура с параметрами, используемыми в ТекстЗапросаПоВзаиморасчета
//	глИсчислениеНалоговСтруктурныхЕдиниц - значение глобальной переменной
//
Процедура ВыполнитьДвиженияПоРегистрамПоПеречислениюОППВ(ДокументОбъект,
														ТекстЗапросаПоВзаиморасчетам,
														СтруктураПараметровЗапроса,
														глИсчислениеНалоговСтруктурныхЕдиниц) Экспорт
													
													
													
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();

	ДатаДокумента 	= ДокументОбъект.Дата;
	Движения		= ДокументОбъект.Движения;
	Организация 	= ДокументОбъект.Организация;
  	СтруктураПризнаковРаспределенияНалогов = ПроцедурыНалоговогоУчета.ПолучитьПризнакиРаспределенияНалогов(Организация, ДатаДокумента);
    РаспределятьНалогиПоСтруктурнымЕдиницам = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоСтруктурнымЕдиницам;
    РаспределятьНалогиПоПодразделениямОрганизаций = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоПодразделениямОрганизаций;
	
	Запрос = Новый Запрос;
	МестоРаботыТекст="";
	
	// внесем список переданных параметров
	Для Каждого ПараметрЗапроса Из СтруктураПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДата", 			ДатаДокумента);
	Запрос.УстановитьПараметр("парамОрганизация", 	Организация);

	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизЛицо,
		|	МесяцИсчисления КАК Период
		|ИЗ
		|	(" + ТекстЗапросаПоВзаиморасчетам + ") КАК Взаиморасчеты
		|";
	    ПериодыФизЛицаТекст = 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ * ПОМЕСТИТЬ ПериодыФизЛицаВТ ИЗ ("+ПериодыФизЛицаТекст+") КАК ЗапросПоПериодамДляВТ;" ;
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = ПериодыФизЛицаТекст;
		Запрос.Выполнить();
		
		ПериодыФизЛицаТекстВТ = "ВЫБРАТЬ * ИЗ ПериодыФизЛицаВТ КАК ВложенныйЗапросПериодыФизЛицаИзВТ";
	
		МестоРаботыТекст = СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекстВТ, Организация, Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
		
	КонецЕсли;
	
	Запрос.Текст = МестоРаботыТекст+
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.МесяцИсчисления,
	|	ВложенныйЗапрос.ВидПлатежа,
	|	ВложенныйЗапрос.ФизЛицо,
	|	ВложенныйЗапрос.Сумма,
	|	ЕСТЬNULL(ОППВРасчетыСФондамиОстатки.МесяцНалоговогоПериода, ВложенныйЗапрос.МесяцИсчисления) КАК МесяцНалоговогоПериода,
	|	ЕСТЬNULL(ОППВРасчетыСФондамиОстатки.ВзносОстаток, 0) КАК ВзносОстаток";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ(ОППВРасчетыСФондамиОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ОППВРасчетыСФондамиОстатки.СтруктурнаяЕдиница
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ОППВРасчетыСФондамиОстатки.Налогоплательщик,
		|	ВЫБОР 
		|		КОГДА НЕ (ОППВРасчетыСФондамиОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ОППВРасчетыСФондамиОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР 
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&парамОрганизация КАК СтруктурнаяЕдиница,
		|	&парамОрганизация КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&парамОрганизация КАК Налогоплательщик,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	(" + ТекстЗапросаПоВзаиморасчетам + ") КАК ВложенныйЗапрос
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОППВРасчетыСФондами.Остатки(
	|			&парамДата,
	|			Организация = &парамОрганизация
	|			И ФизЛицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВЫРАЗИТЬ(ФизЛицо КАК Справочник.ФизическиеЛица)
	|				ИЗ
	|					(" + ТекстЗапросаПоВзаиморасчетам + ") КАК Док)) КАК ОППВРасчетыСФондамиОстатки
	|		ПО ВложенныйЗапрос.ФизЛицо = ОППВРасчетыСФондамиОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ВложенныйЗапрос.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяц)
	|						ТОГДА ВложенныйЗапрос.МесяцИсчисления = ОППВРасчетыСФондамиОстатки.МесяцНалоговогоПериода
	|					ИНАЧЕ ВложенныйЗапрос.МесяцИсчисления >= ОППВРасчетыСФондамиОстатки.МесяцНалоговогоПериода
	|				КОНЕЦ)
	|			И ВложенныйЗапрос.ВидПлатежа = ОППВРасчетыСФондамиОстатки.ВидПлатежа";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
		|		ПО ВложенныйЗапрос.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ВложенныйЗапрос.МесяцИсчисления = МестоРаботы.Период";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.ФизЛицо,
	|	ВложенныйЗапрос.ВидПлатежа,
	|	ВложенныйЗапрос.МесяцИсчисления	
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	глИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
	
	Движения.ОППВРасчетыСФондами.мТаблицаДвижений = Движения.ОППВРасчетыСФондами.ВыгрузитьКолонки();
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
			
				ОстатокКСписанию 		= Выборка.Сумма;
				ТекущееФизЛицо 			= Выборка.ФизЛицо;
				ТекущийВидПлатежа		= Выборка.ВидПлатежа;
				ТекущийМесяцИсчисления	= Выборка.МесяцИсчисления;
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.Следующий()
				   И Выборка.ФизЛицо = ТекущееФизЛицо
				   И Выборка.ВидПлатежа = ТекущийВидПлатежа
				   И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
				   И Выборка.Налогоплательщик <> NULL Цикл
				
					СуммаКСписанию 		= Мин(ОстатокКСписанию, Выборка.ВзносОстаток);
					ОстатокКСписанию 	= ОстатокКСписанию - СуммаКСписанию;
					
					Если СуммаКСписанию = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Движение = Движения.ОППВРасчетыСФондами.мТаблицаДвижений.Добавить();
					
					// Свойства
					Движение.Период			= ДатаДокумента;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;					
					// Измерения
					Движение.ФизЛицо		= Выборка.ФизЛицо;
					Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Организация;
						Движение.Налогоплательщик	= Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
					Движение.ВидПлатежа				= Выборка.ВидПлатежа;
					Движение.Организация			= Организация;					
					// Остатки по подразделению закрываем всегда чтобы не было зависания остатков
					Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
					// Ресурсы
					Движение.Взнос					= СуммаКСписанию;					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;				
				КонецЦикла;
			
				Если ОстатокКСписанию <> 0 Тогда 
				    // остаток относим на структурную единицу и налогоплательщика по месту работы

					Движение = Движения.ОППВРасчетыСФондами.мТаблицаДвижений.Добавить();					
					// Свойства
					Движение.Период			= ДатаДокумента;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы, 
																						Организация,
																						глИсчислениеНалоговСтруктурныхЕдиниц,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Организация;
						Движение.Налогоплательщик	= Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= Организация;
					
					// Нераспределенный остаток относим на подразделение места работы только если ведется раздельный учет налогов по подразделениям организаций
					Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда 
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
										
					// Ресурсы
					Движение.Взнос					= ОстатокКСписанию;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
				    
				КонецЕсли;
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл

	// сверем движения регистра и запишем в набор записей
	ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(Движения.ОППВРасчетыСФондами);
	Движения.ОППВРасчетыСФондами.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	Движения.ОППВРасчетыСФондами.Загрузить(Движения.ОППВРасчетыСФондами.мТаблицаДвижений);
	
КонецПроцедуры

// Выполняет движения по регистру накопления ОПВРРасчетыСФондами по погашению задолженности ОПВР
// 
// Параметры:
//	ДокументОбъект - документ, являющийся регистратором
//	ТекстЗапросаПоВзаиморасчетам - строка с текстом запроса по перечисляемым суммам 
//									(Поля: ФизЛицо, МесяцИсчисления, ВидПлатежа, СпособРасчетаСуммыКПеречислению, Сумма)
//	СтруктураПараметровЗапроса - структура с параметрами, используемыми в ТекстЗапросаПоВзаиморасчета
//	глИсчислениеНалоговСтруктурныхЕдиниц - значение глобальной переменной
//
Процедура ВыполнитьДвиженияПоРегистрамПоПеречислениюОПВР(ДокументОбъект,
														ТекстЗапросаПоВзаиморасчетам,
														СтруктураПараметровЗапроса,
														глИсчислениеНалоговСтруктурныхЕдиниц) Экспорт
													
													
													
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();

	ДатаДокумента 	= ДокументОбъект.Дата;
	Движения		= ДокументОбъект.Движения;
	Организация 	= ДокументОбъект.Организация;
  	СтруктураПризнаковРаспределенияНалогов = ПроцедурыНалоговогоУчета.ПолучитьПризнакиРаспределенияНалогов(Организация, ДатаДокумента);
    РаспределятьНалогиПоСтруктурнымЕдиницам = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоСтруктурнымЕдиницам;
    РаспределятьНалогиПоПодразделениямОрганизаций = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоПодразделениямОрганизаций;
	
	Запрос = Новый Запрос;
	МестоРаботыТекст="";
	
	// внесем список переданных параметров
	Для Каждого ПараметрЗапроса Из СтруктураПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДата", 			ДатаДокумента);
	Запрос.УстановитьПараметр("парамОрганизация", 	Организация);

	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизЛицо,
		|	МесяцИсчисления КАК Период
		|ИЗ
		|	(" + ТекстЗапросаПоВзаиморасчетам + ") КАК Взаиморасчеты
		|";
	    ПериодыФизЛицаТекст = 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ * ПОМЕСТИТЬ ПериодыФизЛицаВТ ИЗ ("+ПериодыФизЛицаТекст+") КАК ЗапросПоПериодамДляВТ;" ;
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = ПериодыФизЛицаТекст;
		Запрос.Выполнить();
		
		ПериодыФизЛицаТекстВТ = "ВЫБРАТЬ * ИЗ ПериодыФизЛицаВТ КАК ВложенныйЗапросПериодыФизЛицаИзВТ";
	
		МестоРаботыТекст = СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекстВТ, Организация, Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
		
	КонецЕсли;
	
	Запрос.Текст = МестоРаботыТекст+
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.МесяцИсчисления,
	|	ВложенныйЗапрос.ВидПлатежа,
	|	ВложенныйЗапрос.ФизЛицо,
	|	ВложенныйЗапрос.Сумма,
	|	ЕСТЬNULL(ОПВРРасчетыСФондамиОстатки.МесяцНалоговогоПериода, ВложенныйЗапрос.МесяцИсчисления) КАК МесяцНалоговогоПериода,
	|	ЕСТЬNULL(ОПВРРасчетыСФондамиОстатки.ВзносОстаток, 0) КАК ВзносОстаток";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ(ОПВРРасчетыСФондамиОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ОПВРРасчетыСФондамиОстатки.СтруктурнаяЕдиница
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ОПВРРасчетыСФондамиОстатки.Налогоплательщик,
		|	ВЫБОР 
		|		КОГДА НЕ (ОПВРРасчетыСФондамиОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ОПВРРасчетыСФондамиОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР 
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&парамОрганизация КАК СтруктурнаяЕдиница,
		|	&парамОрганизация КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&парамОрганизация КАК Налогоплательщик,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	(" + ТекстЗапросаПоВзаиморасчетам + ") КАК ВложенныйЗапрос
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОПВРРасчетыСФондами.Остатки(
	|			&парамДата,
	|			Организация = &парамОрганизация
	|			И ФизЛицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВЫРАЗИТЬ(ФизЛицо КАК Справочник.ФизическиеЛица)
	|				ИЗ
	|					(" + ТекстЗапросаПоВзаиморасчетам + ") КАК Док)) КАК ОПВРРасчетыСФондамиОстатки
	|		ПО ВложенныйЗапрос.ФизЛицо = ОПВРРасчетыСФондамиОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ВложенныйЗапрос.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяц)
	|						ТОГДА ВложенныйЗапрос.МесяцИсчисления = ОПВРРасчетыСФондамиОстатки.МесяцНалоговогоПериода
	|					ИНАЧЕ ВложенныйЗапрос.МесяцИсчисления >= ОПВРРасчетыСФондамиОстатки.МесяцНалоговогоПериода
	|				КОНЕЦ)
	|			И ВложенныйЗапрос.ВидПлатежа = ОПВРРасчетыСФондамиОстатки.ВидПлатежа";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
		|		ПО ВложенныйЗапрос.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ВложенныйЗапрос.МесяцИсчисления = МестоРаботы.Период";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.ФизЛицо,
	|	ВложенныйЗапрос.ВидПлатежа,
	|	ВложенныйЗапрос.МесяцИсчисления	
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	глИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
	
	Движения.ОПВРРасчетыСФондами.мТаблицаДвижений = Движения.ОПВРРасчетыСФондами.ВыгрузитьКолонки();
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
			
				ОстатокКСписанию 		= Выборка.Сумма;
				ТекущееФизЛицо 			= Выборка.ФизЛицо;
				ТекущийВидПлатежа		= Выборка.ВидПлатежа;
				ТекущийМесяцИсчисления	= Выборка.МесяцИсчисления;
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.Следующий()
				   И Выборка.ФизЛицо = ТекущееФизЛицо
				   И Выборка.ВидПлатежа = ТекущийВидПлатежа
				   И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
				   И Выборка.Налогоплательщик <> NULL Цикл
				
					СуммаКСписанию 		= Мин(ОстатокКСписанию, Выборка.ВзносОстаток);
					ОстатокКСписанию 	= ОстатокКСписанию - СуммаКСписанию;
					
					Если СуммаКСписанию = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Движение = Движения.ОПВРРасчетыСФондами.мТаблицаДвижений.Добавить();
					
					// Свойства
					Движение.Период			= ДатаДокумента;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;					
					// Измерения
					Движение.ФизЛицо		= Выборка.ФизЛицо;
					Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Организация;
						Движение.Налогоплательщик	= Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
					Движение.ВидПлатежа				= Выборка.ВидПлатежа;
					Движение.Организация			= Организация;					
					// Остатки по подразделению закрываем всегда чтобы не было зависания остатков
					Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
					// Ресурсы
					Движение.Взнос					= СуммаКСписанию;					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;				
				КонецЦикла;
			
				Если ОстатокКСписанию <> 0 Тогда 
				    // остаток относим на структурную единицу и налогоплательщика по месту работы

					Движение = Движения.ОПВРРасчетыСФондами.мТаблицаДвижений.Добавить();					
					// Свойства
					Движение.Период			= ДатаДокумента;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы, 
																						Организация,
																						глИсчислениеНалоговСтруктурныхЕдиниц,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Организация;
						Движение.Налогоплательщик	= Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= Организация;
					
					// Нераспределенный остаток относим на подразделение места работы только если ведется раздельный учет налогов по подразделениям организаций
					Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда 
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
										
					// Ресурсы
					Движение.Взнос					= ОстатокКСписанию;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
				    
				КонецЕсли;
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл

	// сверем движения регистра и запишем в набор записей
	ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(Движения.ОПВРРасчетыСФондами);
	Движения.ОПВРРасчетыСФондами.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	Движения.ОПВРРасчетыСФондами.Загрузить(Движения.ОПВРРасчетыСФондами.мТаблицаДвижений);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА ДОКУМЕНТОВ

// Процедура рассчитывает начисления по среднему и заполняет реквизит Результат таблицы начислений
// Параметры:
//  	РассчитываемыеТаблицы  - структура из элементов, соответствующих табличным частям документа. 
//				Значение Истина для каждого из элементов структуры означает необходимость расчета 
//				соответствующей табличной части документа
// 		РежимПерерасчета - булево - признак вызов расчета при перерасчете документа
Функция РассчитатьДокументСреднегоЗаработка(Документ, 
											РассчитываемыеТаблицы, 
											ВыборкаПоШапкеДокумента, 
											РежимПерерасчета = Ложь, 
											УчетнаяПолитикаПоПерсоналу, 
											Налогоплательщик = Неопределено,
											КомментироватьРасчет = Ложь) Экспорт
	
	Отказ = Ложь;
	
	Ссылка = Документ.Ссылка;
	
	// Создадим наборы записей используемых регистров 
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	НаборОсновныеНачисления.мВыполнятьВспомогательныеРасчеты = Ложь;
	
	НаборРасчетСреднего = РегистрыРасчета.РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборРасчетСреднего.Отбор.Регистратор.Значение = Ссылка;
	
	Если НЕ РассчитываемыеТаблицы.РасчетСреднего Тогда

		// получим реквизиты табличной части РасчетСреднего 
		
		Запрос = Новый Запрос;
		
		// Установим параметры запроса
		Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
		Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
		Запрос.УстановитьПараметр("ПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());

		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					   |	СтрокаРасчетСреднего.НомерСтроки,
					   |	СтрокаРасчетСреднего.Ссылка.Физлицо КАК ФизЛицо,
					   |	ВЫБОР
					   |		КОГДА СтрокаРасчетСреднего.Ссылка.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
					   |			ТОГДА СтрокаРасчетСреднего.Ссылка.Организация
					   |		ИНАЧЕ СтрокаРасчетСреднего.Ссылка.Организация.ГоловнаяОрганизация
					   |	КОНЕЦ КАК Организация,
					   |	СтрокаРасчетСреднего.Ссылка.Сотрудник КАК Сотрудник,
					   |	СтрокаРасчетСреднего.ВидРасчета,
					   |	СтрокаРасчетСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
					   |	ВЫБОР КОГДА СтрокаРасчетСреднего.БазовыйПериодКонец <> &ПустаяДата ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднего.БазовыйПериодКонец, ДЕНЬ) ИНАЧЕ &ПустаяДата КОНЕЦ КАК БазовыйПериодКонец,
					   |	СтрокаРасчетСреднего.ОтработаноПоПятидневке,
					   |	СтрокаРасчетСреднего.НормаПоПятидневке,
					   |	СтрокаРасчетСреднего.ОтработаноДней,
					   |	СтрокаРасчетСреднего.ОтработаноЧасов,
					   |	СтрокаРасчетСреднего.КоэффициентИндексации,
					   |	СтрокаРасчетСреднего.ЧислоМесяцев,
					   |	СтрокаРасчетСреднего.Размер,
					   |	СтрокаРасчетСреднего.Результат,
					   |	СтрокаРасчетСреднего.ДатаНачалаПериодаПремии,
					   |	СтрокаРасчетСреднего.ДатаОкончанияПериодаПремии
					   |ИЗ
					   |	Документ." + Документ.Метаданные().Имя + ".РасчетСреднего КАК СтрокаРасчетСреднего
					   |
					   |ГДЕ
					   |	СтрокаРасчетСреднего.Ссылка = &ДокументСсылка";

		РезультатЗапросаПоРасчетСреднего = Запрос.Выполнить();
		
		ВыборкаПоРасчетСреднего = РезультатЗапросаПоРасчетСреднего.Выбрать();
		Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
			
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоРасчетСреднего.НомерСтроки) +
			""" табл. части ""Расчет среднего"": ";
			
			// Вид расчета
			Если НЕ ЗначениеЗаполнено(ВыборкаПоРасчетСреднего.ВидРасчета) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ);
			КонецЕсли;
			
			// Дата начала базового периода
			Если НЕ ЗначениеЗаполнено(ВыборкаПоРасчетСреднего.БазовыйПериодНачало) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ);
				// Дата окончания базового периода
			ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоРасчетСреднего.БазовыйПериодКонец) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода!", Отказ);
			ИначеЕсли ВыборкаПоРасчетСреднего.БазовыйПериодКонец < ВыборкаПоРасчетСреднего.БазовыйПериодНачало Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата начала базового периода не может быть больше даты окончания базового периода!", Отказ);
			КонецЕсли; 
			
			Если НЕ Отказ Тогда
				// Заполним записи в наборах записей регистров
				Движение = НаборРасчетСреднего.Добавить();
				
				// Свойства
				Движение.ПериодРегистрации          	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
				Движение.БазовыйПериодНачало        	= ВыборкаПоРасчетСреднего.БазовыйПериодНачало;
				Движение.БазовыйПериодКонец     		= ВыборкаПоРасчетСреднего.БазовыйПериодКонец;
				Движение.ВидРасчета				    	= ВыборкаПоРасчетСреднего.ВидРасчета;
				
				// Измерения
				Движение.ФизЛицо                    	= ВыборкаПоРасчетСреднего.ФизЛицо;
				Движение.Организация					= ВыборкаПоРасчетСреднего.Организация;
				Движение.Сотрудник						= ВыборкаПоРасчетСреднего.Сотрудник;
				
				// Ресурсы
				Движение.Результат						= ВыборкаПоРасчетСреднего.Результат;
				Движение.ОтработаноПоПятидневке			= ВыборкаПоРасчетСреднего.ОтработаноПоПятидневке;
				Движение.НормаПоПятидневке				= ВыборкаПоРасчетСреднего.НормаПоПятидневке;
				Движение.ОтработаноДней					= ВыборкаПоРасчетСреднего.ОтработаноДней;
				Движение.ОтработаноЧасов				= ВыборкаПоРасчетСреднего.ОтработаноЧасов;
				
				// Реквизиты
				Движение.Размер							= ВыборкаПоРасчетСреднего.Размер;
				Движение.КоэффициентИндексации			= ВыборкаПоРасчетСреднего.КоэффициентИндексации;
				Движение.ЧислоМесяцев 					= ВыборкаПоРасчетСреднего.ЧислоМесяцев;
				Движение.ПериодРасчетаСреднегоЗаработка	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработка;
				Движение.СпособРасчета					= ВыборкаПоШапкеДокумента.СпособРасчета;
				Движение.ДатаНачалаРасчетногоПериода	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
				Движение.ДатаОкончанияРасчетногоПериода	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
				Движение.ДатаНачалаПериодаПремии		= ВыборкаПоРасчетСреднего.ДатаНачалаПериодаПремии;
				Движение.ДатаОкончанияПериодаПремии		= ВыборкаПоРасчетСреднего.ДатаОкончанияПериодаПремии;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ Отказ Тогда
			НаборРасчетСреднего.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Отказ;
	КонецЕсли; 
	
	Документ.СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборОсновныеНачисления);
	
	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия
	ТаблицаСторноЗаписей = НаборОсновныеНачисления.ПолучитьДополнение();
	Для Каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		// Заполним записи в наборе записей регистра
		// и в табличной части
		
		// новая запись движений
		Движение = НаборОсновныеНачисления.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно);

		// прочие свойства и реквизиты
		Движение.ПериодРегистрации          	= СтрокаСторно.ПериодРегистрацииСторно;
		Движение.ПериодДействияНачало       	= СтрокаСторно.ПериодДействияНачалоСторно;
		Движение.ПериодДействияКонец  		  	= СтрокаСторно.ПериодДействияКонецСторно;
		Движение.СторнируемыйДокумент  		  	= СтрокаСторно.Регистратор;
		Движение.Сторно							= Истина;
		Движение.Авторасчет						= Истина;

	КонецЦикла;
	
	// Очистим начисления
	Документ.Начисления.Очистить();
	
	// рассчитываем записи начислений и если надо, записи расчета среднего заработка
	Если РассчитываемыеТаблицы.Начисления Тогда
		
		Если РассчитываемыеТаблицы.РасчетСреднего Тогда
			РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, УчетнаяПолитикаПоПерсоналу, ВыборкаПоШапкеДокумента.Организация,,Истина, Налогоплательщик,, КомментироватьРасчет);
		Иначе
			РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, УчетнаяПолитикаПоПерсоналу, ВыборкаПоШапкеДокумента.Организация, , , Налогоплательщик,, КомментироватьРасчет);
		КонецЕсли;
		
		// перепишем записи начислений в документ
		Для Каждого СтрокаНачислений Из НаборОсновныеНачисления Цикл
			
			НоваяСтрока = Документ.Начисления.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
			
			// прочие реквизиты
			НоваяСтрока.ДатаНачала 					= СтрокаНачислений.ПериодДействияНачало;
			НоваяСтрока.ДатаОкончания 				= СтрокаНачислений.ПериодДействияКонец;
			НоваяСтрока.ОтработаноДней 				= ?(СтрокаНачислений.ОтработаноДней <> 0, СтрокаНачислений.ОтработаноДней, СтрокаНачислений.УчитываемыеДни);
			НоваяСтрока.ОтработаноЧасов 			= ?(СтрокаНачислений.ОтработаноЧасов <> 0, СтрокаНачислений.ОтработаноЧасов, СтрокаНачислений.УчитываемыеЧасы);
			
		КонецЦикла; 
		
	ИначеЕсли РассчитываемыеТаблицы.РасчетСреднего Тогда
		НаборОсновныеНачисления.Записать();
		УчетнаяПолитика = УчетнаяПолитикаПоПерсоналу[ВыборкаПоШапкеДокумента.ГоловнаяОрганизация];
		СформироватьИЗаписатьДанныеРасчетаСреднего("ОсновныеНачисленияРаботниковОрганизаций", Ссылка, НаборРасчетСреднего, УчетнаяПолитика);
	КонецЕсли;

	Если РассчитываемыеТаблицы.РасчетСреднего Тогда
		// перепишем записи расчета среднего заработка в документ
		Документ.РасчетСреднего.Загрузить(НаборРасчетСреднего.Выгрузить());
	КонецЕсли;
	
	Если РежимПерерасчета тогда
		// Для режима перерасчета запишем движения (набор записей расчета среднего уже записан)
		НаборОсновныеНачисления.Записать();
	Иначе	
		// Удаляем движения для режима интерактивного расчета 
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		НаборРасчетСреднего.Очистить();
		НаборРасчетСреднего.Записать();
	КонецЕсли;	
		
	Возврат НЕ Отказ;
		
КонецФункции  // РассчитатьДокументСреднегоЗаработка

// Процедура разделяет записи в указанном наборе или таблице записей основных начислений
// с учетом периодов действия коэффициентов индексации заработка. Предполагается, что 
// набор записей содержит данные по одному работнику одной организации
//
// Параметры:
//	Организация - головная организация
//	Сотрудник - сотрудник
//	НаборЗаписей - набор записей или таблица значений со структурой регистра расчета ОсновныеНачисленияРаботниковОрганизаций
//	ДатаНачала - дата, начиная с которой определяется коэффициенты индексации, если Неопределено, то берется
//					с начала первого месяца начисления из набора по последний день
//	ДатаОкончания - дата, по которую выбирать коэффициенты индексации
//	
// Возвращаемого значения нет, изменяет переданный набор
//
Процедура РазделитьЗаписиНабораПоПериодамИндексацииЗаработка(Организация, Сотрудник, НаборЗаписей, ДатаНачала = Неопределено, ДатаОкончания = Неопределено) Экспорт

	// определим даты выбора сведений о коэффициентах индексации
	Если НЕ ЗначениеЗаполнено(ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаНачала = ?(ЗначениеЗаполнено(ДатаНачала), ДатаНачала,'29991231');
		ДатаОкончания = ?(ЗначениеЗаполнено(ДатаОкончания), ДатаОкончания, '00010101');
		
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			ДатаНачала 		= Мин(ДатаНачала, ЗаписьНабора.ПериодДействияНачало);
			ДатаОкончания 	= Макс(ДатаОкончания, ЗаписьНабора.ПериодДействияКонец);
		КонецЦикла;
		
	КонецЕсли; 

	РасчетКоэффициентаНарастающимИтогом = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].РасчетКоэффициентаНарастающимИтогом;
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	КоэффициентыИндексацииЗаработка.Период,
	|	КоэффициентыИндексацииЗаработка.Коэффициент
	|ИЗ
	|	РегистрСведений.КоэффициентыИндексацииЗаработка КАК КоэффициентыИндексацииЗаработка
	|ГДЕ
	|	КоэффициентыИндексацииЗаработка.Организация = &Организация
	|	И КоэффициентыИндексацииЗаработка.Сотрудник = &Сотрудник
	|	И КоэффициентыИндексацииЗаработка.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоэффициентыИндексацииЗаработка.Период
	|";
	
	ВыборкаКоэффициентовИндексации = Запрос.Выполнить().Выбрать();

	// учтем возможность повышения заработка в течение оплачиваемого периода
	Пока ВыборкаКоэффициентовИндексации.Следующий() Цикл
		Инд = 0;
		Пока Инд < НаборЗаписей.Количество() Цикл
			ЗаписьНабора = НаборЗаписей[Инд];
				
			Если ЗаписьНабора.ПериодДействияНачало >= ВыборкаКоэффициентовИндексации.Период Тогда
				// нужно применить коэффициент индексации к строке
				Если ЗаписьНабора.ДатаНачалаСобытия >= ПолучитьДатуИзмененияЕдиныхПравил2015()
					И НЕ РасчетКоэффициентаНарастающимИтогом Тогда
					ЗаписьНабора.КоэффициентИндексации = ВыборкаКоэффициентовИндексации.Коэффициент;
				Иначе 
					ЗаписьНабора.КоэффициентИндексации = ЗаписьНабора.КоэффициентИндексации * ВыборкаКоэффициентовИндексации.Коэффициент;
				КонецЕсли;
				
				
			ИначеЕсли ЗаписьНабора.ПериодДействияНачало < ВыборкаКоэффициентовИндексации.Период
					И ВыборкаКоэффициентовИндексации.Период <= ЗаписьНабора.ПериодДействияКонец Тогда
					
				// нужно разделить строку на две - до и после индексации
				НоваяЗаписьНабора = НаборЗаписей.Вставить(НаборЗаписей.Индекс(ЗаписьНабора)+1);
				ЗаполнитьЗначенияСвойств(НоваяЗаписьНабора, ЗаписьНабора);
					
				ЗаписьНабора.ПериодДействияКонец 		= НачалоДня(ВыборкаКоэффициентовИндексации.Период) - 1;
				НоваяЗаписьНабора.ПериодДействияНачало 	= НачалоДня(ВыборкаКоэффициентовИндексации.Период);
				Если ЗаписьНабора.ДатаНачалаСобытия >= ПолучитьДатуИзмененияЕдиныхПравил2015()
					И НЕ РасчетКоэффициентаНарастающимИтогом Тогда
					НоваяЗаписьНабора.КоэффициентИндексации = ВыборкаКоэффициентовИндексации.Коэффициент;
				Иначе
					НоваяЗаписьНабора.КоэффициентИндексации = ЗаписьНабора.КоэффициентИндексации * ВыборкаКоэффициентовИндексации.Коэффициент;
				КонецЕсли;
				
						
				Инд = Инд + 1; // пропускаем добавленную запись
				
			КонецЕсли;
				
			Инд = Инд + 1;
		КонецЦикла;
			
	КонецЦикла;
	
	// Исключим коэффициенты < 1 и удалим лишние записи
	Инд = 0;
	Пока Инд < НаборЗаписей.Количество() Цикл
		ЗаписьНабора = НаборЗаписей[Инд];
		Если ЗаписьНабора.КоэффициентИндексации < 1 Тогда
			Если Инд > 0 Тогда
				СтараяЗаписьНабора = НаборЗаписей[Инд-1];
				Если СтараяЗаписьНабора.ПериодДействияКонец <> КонецМесяца(СтараяЗаписьНабора.ПериодДействияКонец) Тогда
				    СтараяЗаписьНабора.ПериодДействияКонец = ЗаписьНабора.ПериодДействияКонец;
				    НаборЗаписей.Удалить(ЗаписьНабора);
				    Инд = Инд - 1;
				Иначе
				    ЗаписьНабора.КоэффициентИндексации = 1;
				КонецЕсли;				
			Иначе 
				ЗаписьНабора.КоэффициентИндексации = 1;
			КонецЕсли;
		КонецЕсли;
		Инд = Инд + 1;
	КонецЦикла;
	
КонецПроцедуры // РазделитьЗаписиНачисленийПоПериодамИндексацииЗаработка

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОПИСЫВАЮТ СВЯЗИ ПРЕДОПРЕДЕЛЕННЫХ ВИДОВ РАСЧЕТА И СПОСОБОВ ИХ РАСЧЕТА

// Возвращает способ расчета для указанного вида расчета
//
// Параметры
//  ВидРасчета  – ПланыВыидовРасчета.ОсновныеНачисленияОрганизаций.Ссылка – вид расчета
// Возвращаемое значение:
//   Перечисления.СпособыРасчетаОплатыТруда.Ссылка   – <описание возвращаемого значения>
Функция ПолучитьСпособРасчетаОтВидаРасчета(ВидРасчета) Экспорт
	
	// ОРГАНИЗАЦИОННЫЕ НАЧИСЛЕНИЯ
	Если ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням Тогда
		Возврат  Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням; 
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоЧасам Тогда
		Возврат  Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам; 
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладОтОбратного Тогда
		Возврат Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой;
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладОтОбратногоПоДням Тогда
		Возврат Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням;
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладОтОбратногоПоЧасам Тогда
		Возврат Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам;
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовойОтОбратного Тогда
		Возврат Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке;
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифДневной Тогда
		Возврат  Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке; 
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовой Тогда
		Возврат  Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке; 
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяОплата Тогда
		Возврат Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок; 
	Иначе
		Возврат Перечисления.СпособыРасчетаОплатыТруда.ПустаяСсылка();
	КонецЕсли; 
	
КонецФункции 

//Возвращает вид расчета по организции для указанного способа расчета
//
// Параметры
//   СпособРасчета - Перечисления.СпособыРасчетаОплатыТруда.Ссылка   – <описание возвращаемого значения>
// Возвращаемое значение:
//  ПланыВыидовРасчета.ОсновныеНачисленияОрганизаций.Ссылка – вид расчета
Функция ПолучитьВидРасчетаОрганизацииОтСпособаРасчета(СпособРасчета) Экспорт
	
	Если ЗначениеЗаполнено(СпособРасчета) Тогда
		
		Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням  Тогда
			Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам Тогда
			Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоЧасам
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке Тогда
			Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифДневной
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке Тогда
			Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовой
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
			Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяОплата
		Иначе
			Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции 
 
//Возвращает вид расчета для указанного способа расчета
//
// Параметры
//   СпособРасчета - Перечисления.СпособыРасчетаОплатыТруда.Ссылка   – <описание возвращаемого значения>
// Возвращаемое значение:
//  ПланыВыидовРасчета.ОсновныеНачисленияОрганизаций.Ссылка – вид расчета
Функция ПолучитьВидРасчетаОтСпособаРасчета(СпособРасчета) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	УправленческиеНачисления.Ссылка
	                      |ИЗ
	                      |	ПланВидовРасчета.УправленческиеНачисления КАК УправленческиеНачисления
	                      |
	                      |ГДЕ
	                      |	УправленческиеНачисления.СпособРасчета = &СпособРасчета");

	Запрос.УстановитьПараметр("СпособРасчета",СпособРасчета);						  

	Выборка = Запрос.Выполнить().Выбрать(); 

	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка
	Иначе
		Возврат ПланыВидовРасчета.УправленческиеНачисления.ПустаяСсылка();
	КонецЕсли;
		
КонецФункции 
 
// Процедура получает курс валюты упр учета для целей расчетов с персоналом 
// и валюту упручета
// Параметры:
//		ДатаКурса
//		ВалютаУпрУчета - в парамтер будет передана ссылка на валюту
//		КурсВалютыУпрУчета - в параметр будет передан курс
//		ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ПолучитьКурсВалютыУпрУчета(ДатаКурса, ВалютаУпрУчета, КурсВалютыУпрУчета, ВалютаРегламентированногоУчета) Экспорт
	ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Если ВалютаРегламентированногоУчета = ВалютаУпрУчета Тогда
		КурсВалютыУпрУчета = 1;
	Иначе
		Отбор = Новый Структура("Валюта", ВалютаУпрУчета);
		СведенияОКурсе = РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом.Получить(НачалоМесяца(ДатаКурса), Отбор);
		КурсВалютыУпрУчета = ?(СведенияОКурсе.Кратность = 0, 0 , СведенияОКурсе.Курс / СведенияОКурсе.Кратность);
	КонецЕсли;
КонецПроцедуры	

// Разбивает строку таблицы начислений на помесячные записи (длиной не более месяца)
// Параметры:
//		СтрокаНачислений - строка таблицы начислений, которую следует разбить
//		ТаблицаНачислений - таблица начислений, имеющая 2 обязательные колонки: КолонкаДатаНачала и  КолонкаДатаОкончания
//		КоллекцияКолонокТаблицы - коллекция колонок таблицы
//		КолонкаДатаНачала - имя колонки, содержащей дату начала периода записи
//		КолонкаДатаОкончания - имя колонки, содержащей дату окончания периода записи
Процедура РазбитьСтрокуНачисленийНаПомесячныеЗаписи(СтрокаНачислений, ТаблицаНачислений, КоллекцияКолонокТаблицы, КолонкаДатаНачала = "ДатаНачала", КолонкаДатаОкончания = "ДатаОкончания") Экспорт
	
	НачалоПериода = СтрокаНачислений[КолонкаДатаНачала];
	КонецПериода = СтрокаНачислений[КолонкаДатаОкончания];
	
	Если НачалоМесяца(НачалоПериода) = НачалоМесяца(КонецПериода) ИЛИ КонецПериода < НачалоПериода Тогда
		Возврат;// разбивать не надо
	КонецЕсли; 
	
	РазницаВМесяцах = (Год(КонецПериода)*12 + Месяц(КонецПериода)) - (Год(НачалоПериода)*12 + Месяц(НачалоПериода));
	
	// У первоначальной строки дату конца установим в конец первого месяца
	СтрокаНачислений[КолонкаДатаОкончания] = КонецМесяца(НачалоПериода);	
	
	ОчередноеНачалоМесяца = НачалоМесяца(НачалоПериода);
	Для Счетчик = 1 По РазницаВМесяцах Цикл
		
		НоваяСтрока = ТаблицаНачислений.Добавить();
		
		// Скопируем строку
		Для Каждого Колонка из КоллекцияКолонокТаблицы Цикл
			Если Колонка.Имя = "НомерСтроки" Тогда
				Продолжить;
			КонецЕсли; 
			НоваяСтрока[Колонка.Имя] = СтрокаНачислений[Колонка.Имя];
		КонецЦикла; 
		
		// Установим период
		ОчередноеНачалоМесяца = ДобавитьМесяц(ОчередноеНачалоМесяца, 1);
		НоваяСтрока[КолонкаДатаНачала] = ОчередноеНачалоМесяца;	
		НоваяСтрока[КолонкаДатаОкончания] = КонецМесяца(ОчередноеНачалоМесяца);	
		
	КонецЦикла;
	
	// Для  последней строки установим конец периода в конец разбиваемого периода
	НоваяСтрока[КолонкаДатаОкончания]	 = КонецПериода;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СПИСКОВ СПОСОБОВ РАСЧЕТА

// Возвращает список регламентированных алгоритмов начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокОсновныхВариантовНачисленийОрганизации() Экспорт

	 СписокСпособов = Новый СписокЗначений;
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы);
  	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате);
	 
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);

     // почасовые отклонения
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммойДляПочасовогоОтклонения);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения);
	 
	 Возврат СписокСпособов;
	 
КонецФункции // ПолучитьСписокОсновныхВариантовНачисленийОрганизации()

// Возвращает список регламентированных алгоритмов начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокДополнительныхВариантовНачислений() Экспорт

	 СписокСпособов = Новый СписокЗначений;
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой);

	 Возврат СписокСпособов

КонецФункции // ПолучитьСписокДополнительныхВариантовНачислений()

// Возвращает список алгоритмов начислений, являющихся почасовыми отклонениями
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокНачисленийПочасовыхОтклонений() Экспорт

	СписокСпособов = Новый СписокЗначений;
	 
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммойДляПочасовогоОтклонения);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения);

	Возврат СписокСпособов

КонецФункции // ПолучитьСписокДополнительныхВариантовНачислений()

// Возвращает список алгоритмов начислений, зависящих от среднего заработка
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокНачисленийПоСреднемуЗаработку() Экспорт

	 СписокСпособов = Новый СписокЗначений;
	 
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения);

	 Возврат СписокСпособов

КонецФункции // ПолучитьСписокНачисленийПоСреднемуЗаработку()

// Возвращает список регламентированных алгоритмов начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокВариантовУдержанийОрганизации() Экспорт

	 СписокСпособов = Новый СписокЗначений;
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор);
	 
	 Возврат СписокСпособов

КонецФункции // ПолучитьСписокВариантовУдержанийОрганизации()

// Возвращает список регламентированных алгоритмов начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокВариантовУпрНачислений() Экспорт

	 СписокСпособов = Новый СписокЗначений;
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула);
 
	 Возврат СписокСпособов

КонецФункции // ПолучитьСписокВариантовУпрНачислений()

// Возвращает список алгоритмов начислений надбавок
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокВариантовНадбавок() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам);

	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокВариантовНадбавок()

// Возвращает список алгоритмов начислений, не требующих указания валюты начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокСпособовРасчетаНеТребующихУказанияВалюты() Экспорт
	
	СписокСпособов = Новый СписокЗначений;

	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);
	
	Возврат СписокСпособов;
	
КонецФункции 

// Возвращает алгоритмы начислений, не требующих указания валюты начислений, в виде соответствия
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Соответствие, содержащая подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСоответствиеСпособовРасчетаТребующихВалюту() Экспорт
	
	Список = ПолучитьСписокСпособовРасчетаНеТребующихУказанияВалюты();
	СоответствиеСпособов = Новый Соответствие;
	Для Сч = 0 По Перечисления.СпособыРасчетаОплатыТруда.Количество() - 1 Цикл
		Значение = Перечисления.СпособыРасчетаОплатыТруда.Получить(Сч);
		СоответствиеСпособов.Вставить(Значение, Список.НайтиПоЗначению(Значение) = Неопределено);
	КонецЦикла;  
	
    Возврат СоответствиеСпособов
	
КонецФункции // Получить()

#Если Клиент Тогда

// По плану видов расчета выполняет поиск элементов по первым символам имени с применением шаблона
// Параметры:
//     	СтрокаПервыеСимволы - Строка - первые символы имени расчета
// 	   	ИмяПланаВидовРасчета - Строка - имя плана видов расчета
//	   	СтрокаДопУсловие - Строка - дополнительное условие для отбора видов расчетов
//		СписокДопПараметры - Структура - параметры запроса, необходимые для вычисления доп. условия
// Возвращает:
//		Удовлетворяющий шаблону имени и условиям отбора вид расчета, если таких несколько - то список значений
Функция ПолучитьСписокВидовРасчетаПоПервымСимволамИмениРасчета(	СтрокаПервыеСимволы, ИмяПланаВидовРасчета, 
																СтрокаДопУсловие, СтруктураДопПараметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 51
	               |	ОсновныеНачисленияОрганизаций.Ссылка КАК Ссылка,
	               |	ОсновныеНачисленияОрганизаций.Наименование + "" ("" + ОсновныеНачисленияОрганизаций.Код + "")"" КАК СтрокаПредставления
	               |ИЗ
	               |	ПланВидовРасчета." + ИмяПланаВидовРасчета + " КАК ОсновныеНачисленияОрганизаций
	               |
	               |ГДЕ
	               |	ОсновныеНачисленияОрганизаций.Наименование ПОДОБНО &парамШаблонИмени
				   | " + ?(НЕ ЗначениеЗаполнено(СтрокаДопУсловие), "", " И " + СтрокаДопУсловие);
				   
	Если СтруктураДопПараметры <> Неопределено Тогда
		// Параметры, требуемые для вычисления дополнительного условия
		Для Каждого Элемент ИЗ СтруктураДопПараметры  Цикл
			Запрос.УстановитьПараметр(Элемент.Ключ , Элемент.Значение);
		КонецЦикла; 
	КонецЕсли;
	
	// заменим спецсимволы
	СтрокаПервыеСимволы = СтрЗаменить(СтрокаПервыеСимволы, "~", "~~");
	СтрокаПервыеСимволы = СтрЗаменить(СтрокаПервыеСимволы, "%", "~%");
	СтрокаПервыеСимволы = СтрЗаменить(СтрокаПервыеСимволы, "_", "~_");
	СтрокаПервыеСимволы = СтрЗаменить(СтрокаПервыеСимволы, "[", "~[");
	СтрокаПервыеСимволы = СтрЗаменить(СтрокаПервыеСимволы, "-", "~-");
	
	Запрос.УстановитьПараметр("парамШаблонИмени", СтрокаПервыеСимволы + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Значение = Неопределено;
	
	Если Выборка.Количество() = 51 Тогда
		Предупреждение("Найдено более 50-ти значений, удовлетворяющих условиям выбора. Задайте более длинную строку или воспользуйтесь командой выбора (F4).");
	ИначеЕсли Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Значение = Выборка.Ссылка;
	ИначеЕсли Выборка.Количество() = 0 Тогда
		Предупреждение("В элемент управления введены данные не удовлетворяющие условиям выбора.");
	Иначе
		Значение = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Значение.Добавить(Выборка.Ссылка, Выборка.СтрокаПредставления);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции // ПолучитьСписокВидовРасчетаПоПервымСимволамИмениРасчета()

// Процедура производит настройки для колонок при выводе плановых начислений
// в зависимости от параметров вида расчета.
//
Процедура ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ДанныеСтроки, СведенияОВидахРасчета, ИспользуютсяТарифныеРазряды = Истина, СторноСтрока = Ложь, ЕстьДанныеЗавершения = Ложь) Экспорт
	
	Если ОформлениеСтроки.Ячейки.Найти("Надбавка") = Неопределено Тогда
		ВидРасчета = ДанныеСтроки.ВидРасчета;	
	Иначе
		ВидРасчета = ДанныеСтроки.Надбавка;
	КонецЕсли; 
	
	СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидРасчета);

	ЕстьПоказатели = Ложь;
	Для СчПоказателей = 1 По 6 Цикл
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
			ВидимостьПоказателяИВалюты = Истина;
			Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] Тогда
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Истина;
				ЕстьПоказатели = Истина;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
				Если ИспользуютсяТарифныеРазряды Тогда
					ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
					ОформлениеСтроки.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость = Ложь;
				КонецЕсли;
			ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] Тогда
				ВидимостьПоказателяИВалюты = Ложь;
				ЕстьПоказатели = Истина;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
				Если ИспользуютсяТарифныеРазряды Тогда
					ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"]);
					ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Истина;	
					ОформлениеСтроки.Ячейки["ТарифныйРазряд" + СчПоказателей].Видимость = Истина;
				КонецЕсли;
			Иначе
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				Если ИспользуютсяТарифныеРазряды Тогда
					ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
					ОформлениеСтроки.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ВидимостьПоказателяИВалюты Тогда
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
				ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей].Видимость = СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
				Если ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость Тогда
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
				КонецЕсли;
			Иначе
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь;
			КонецЕсли;
		Иначе
			ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
			Если ИспользуютсяТарифныеРазряды Тогда
				ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость = Ложь;
			КонецЕсли;
			ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьПоказатели Тогда
		Если ЗначениеЗаполнено(ВидРасчета) Тогда
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель1"].УстановитьТекст("<вводится ежемесячно>");
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель1"].Видимость = Истина;
		Иначе
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель1"].Видимость = Ложь;
		КонецЕсли;
		ОформлениеСтроки.Ячейки["Показатель1"].ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки["Валюта1"].ТолькоПросмотр 	  = Истина;
		Если ИспользуютсяТарифныеРазряды Тогда
			ОформлениеСтроки.Ячейки["НаименованиеПоказательТР1"].Видимость = Ложь;
			ОформлениеСтроки.Ячейки["ТарифныйРазряд1"].Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;
	
	// События завершения
	Если ЕстьДанныеЗавершения Тогда
		Если ДанныеСтроки.ДействиеЗавершения = Неопределено Тогда
			
			Для СчПоказателей = 1 По 6 Цикл
				
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость	= Ложь;
				Если ИспользуютсяТарифныеРазряды Тогда
					ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость	= Ложь;
					ОформлениеСтроки.Ячейки["ТарифныйРазряд" +СчПоказателей + "Завершения"].Видимость				= Ложь;
				КонецЕсли;
				
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость				= Ложь;
				ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость					= Ложь;

			КонецЦикла;
					
		Иначе
			
			Если ТипЗнч(ВидРасчета) <> Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций") Тогда
				СведенияОВидеРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ДанныеСтроки.ВидРасчетаЗавершения);
			КонецЕсли;
						
			Показатели = Ложь;
			Для СчПоказателей = 1 По 6 Цикл
				Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
					
					ВидимостьПоказателяИВалюты = Истина;
					Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] Тогда
						ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость = Истина;
						ЕстьПоказатели = Истина;
						ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
						Если ИспользуютсяТарифныеРазряды Тогда
							ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость = Ложь;
							ОформлениеСтроки.Ячейки["ТарифныйРазряд" +СчПоказателей + "Завершения"].Видимость = Ложь;
						КонецЕсли;
					ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] Тогда
						ВидимостьПоказателяИВалюты = Ложь;
						ЕстьПоказатели = Истина;
						ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
						ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
						Если ИспользуютсяТарифныеРазряды Тогда
							ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].УстановитьТекст(СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"]);
							ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость = Истина;
							ОформлениеСтроки.Ячейки["ТарифныйРазряд" + СчПоказателей + "Завершения"].Видимость = Истина;
						КонецЕсли;
					Иначе
						ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
						Если ИспользуютсяТарифныеРазряды Тогда
							ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость = Ложь;
							ОформлениеСтроки.Ячейки["ТарифныйРазряд" +СчПоказателей + "Завершения"].Видимость = Ложь;
						КонецЕсли;
					КонецЕсли;
					Если ВидимостьПоказателяИВалюты Тогда
						ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
						ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость = СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
						Если ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость Тогда
							ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
						КонецЕсли;
					Иначе
						ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
						ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость = Ложь;
					КонецЕсли;
				Иначе
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей + "Завершения"].Видимость = Ложь;
					Если ИспользуютсяТарифныеРазряды Тогда
						ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей + "Завершения"].Видимость = Ложь;
						ОформлениеСтроки.Ячейки["ТарифныйРазряд" +СчПоказателей + "Завершения"].Видимость = Ложь;					
					КонецЕсли;
					ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей + "Завершения"].Видимость = Ложь;
				КонецЕсли;
				
			КонецЦикла;

			Если НЕ ЕстьПоказатели Тогда
				Если ЗначениеЗаполнено(ВидРасчета) Тогда
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель1Завершения"].УстановитьТекст("<вводится ежемесячно>");
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель1Завершения"].Видимость = Истина;
				Иначе
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель1Завершения"].Видимость = Ложь;
				КонецЕсли;
				ОформлениеСтроки.Ячейки["Показатель1Завершения"].ТолькоПросмотр = Истина;
				ОформлениеСтроки.Ячейки["Валюта1Завершения"].ТолькоПросмотр     = Истина;
				Если ИспользуютсяТарифныеРазряды Тогда
					ОформлениеСтроки.Ячейки["НаименованиеПоказательТР1Завершения"].Видимость = Ложь;
					ОформлениеСтроки.Ячейки["ТарифныйРазряд1Завершения"].Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ОформлениеСтроки.Ячейки.ПоказателиЗавершения.Видимость = Ложь;

		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ПриВыводеСтрокиПлановыхНачислений()

// Процедура производит настройки для колонок при выводе начислений/удержаний
// в зависимости от параметров вида расчета.
//
Процедура ПриВыводеСтрокиРасчета(ОформлениеСтроки, ДанныеСтроки, СведенияОВидахРасчета, ИспользуютсяТарифныеРазряды = Истина) Экспорт
	
	ДанныеСтрокиВидРасчета = ДанныеСтроки.ВидРасчета;

	ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;

	СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ДанныеСтрокиВидРасчета, "ПриРасчете");
	
	Если ЗначениеЗаполнено(ДанныеСтрокиВидРасчета) Тогда
		
		ЕстьПоказатели = Ложь; 
		СчПоказателей = 0;
		Для СчПоказателей = 1 По 6 Цикл
			
			Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
				
				ЕстьПоказатели = Истина;
				
				ВидимостьПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
				ВидимостьНаименованияПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"];
				
				// настроим видимость ячеек
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = ВидимостьНаименованияПоказателя;
				
				// размеры показателя будут доступны только для видимых и изменяемых показателей
				Если ВидимостьПоказателя Тогда
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр = СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется
					Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно
					Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически
					Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.ВиденНоНеРедактируетсяПриРасчете;
				КонецЕсли;
				
				// если отображается наименование - пропишем текст
				Если ВидимостьНаименованияПоказателя Тогда
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
				ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] Тогда
					ВидимостьПоказателя = СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Видимость"];
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр	= Не ВидимостьПоказателя Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно
																							  Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически;																							  
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"];
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"]);
				КонецЕсли;
				
				Если ВидимостьПоказателя Тогда
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
				КонецЕсли;
				
			Иначе
				// настроим видимость ячеек
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДанныеСтрокиВидРасчета) Тогда
			Если не ЕстьПоказатели Тогда
				ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.УстановитьТекст("<рассчитываются автоматически>");
				ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.Видимость			= Истина;
				ОформлениеСтроки.Ячейки["Показатель1"].ТолькоПросмотр				= Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Для СчПоказателей = 1 По 6 Цикл
			// настроим видимость ячеек
			ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПриВыводеСтрокиРасчета()

// Вызывается при изменении показателя схемы мотивации в строке табличной части документов
//
// Параметры:
//	ЭлементТабличноеПоле - элемент формы табличное поле, в котором 
//	Значение - измененное значение показателя 
//	Показатель - СправочникСсылка.ПоказателиСхемМотивации - вид показателя
//	СведенияОВидахРасчета - соответствие, в котором хранится информация о видах расчета, 
//							полученное с помощью функции ПолучитьСведенияОВидеРасчета()
//	ДокументОбъект - объект, представляющий документ, в котором произошло изменение
//	ИмяТабличнойЧасти - строка с именем табличной части, в которой произошло изменение
//	УчетнаяПолитикаПоПерсоналуОрганизации - структура с учетной политикой по персоналу организации (только для регл. учета)
//
Процедура ПриИзмененииЗначенияПоказателяМотивации(ЭлементТабличноеПоле, 
													Значение, 
													парамПоказатель, 
													СведенияОВидахРасчета, 
													ДокументОбъект, 
													ИмяТабличнойЧасти) Экспорт
	
	ВидРасчета = ЭлементТабличноеПоле.ТекущаяСтрока.ВидРасчета;
	
	СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидРасчета);
	
	КоличествоПоказателей = СведенияОВидеРасчета["ФактКоличествоПоказателей"];
	
	ТЧ = ДокументОбъект[ИмяТабличнойЧасти];
	
	Если КоличествоПоказателей > (парамПоказатель - 1) Тогда
		Показатель  = СведенияОВидеРасчета["Показатель" + парамПоказатель];
	Иначе
		Возврат;
	КонецЕсли;
	Если ЭлементТабличноеПоле.ТекущаяСтрока.ВидРасчета.ПроизвольнаяФормулаРасчета Тогда
		Если ИмяТабличнойЧасти <> "Удержания" Тогда
			СтрПодразделение= ЭлементТабличноеПоле.ТекущаяСтрока.ПодразделениеОрганизации;
		КонецЕсли;
		Если Показатель.ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий Тогда
			Для Каждого СтрокаНачисления Из ТЧ Цикл
				
				ВидРасчета = СтрокаНачисления.ВидРасчета;
				СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидРасчета);

				КоличествоПоказателей = СведенияОВидеРасчета["ФактКоличествоПоказателей"];
				Для СчПоказателей = 1 По КоличествоПоказателей Цикл
					ПоказательВР = СведенияОВидеРасчета["Показатель" + СчПоказателей];
					Если ПоказательВР.Предопределенный Тогда 
						Продолжить;
					КонецЕсли;
					Если ПоказательВР = Показатель Тогда
						СтрокаНачисления["Показатель" + СчПоказателей] = Значение;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;

		ИначеЕсли Показатель.ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ПоПодразделению Тогда
			Если ИмяТабличнойЧасти <> "Удержания" Тогда
				Для Каждого СтрокаНачисления Из ТЧ Цикл
					ВидРасчета = СтрокаНачисления.ВидРасчета;
					
					СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидРасчета);

					КоличествоПоказателей = СведенияОВидеРасчета["ФактКоличествоПоказателей"];
					Если СтрокаНачисления.ПодразделениеОрганизации = СтрПодразделение Тогда
						Для СчПоказателей = 1 По КоличествоПоказателей Цикл
							ПоказательВР = СведенияОВидеРасчета["Показатель" + СчПоказателей];
							Если ПоказательВР.Предопределенный Тогда 
								Продолжить;
							КонецЕсли;
							Если ПоказательВР = Показатель Тогда
								СтрокаНачисления["Показатель" + СчПоказателей] = Значение;
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииЗначенияПоказателяМотивации()

#КонецЕсли
 
// Возвращает список алгоритмов основных начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокВариантовОсновныхНачислений() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	                                   
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокВариантовНадбавок()

// Возвращает список способов расчетов фиксированной суммой
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокСпособовРасчетовФиксированнойСуммой() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	                                   
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокСпособовРасчетовФиксированнойСуммой()

// Возвращает список способов расчетов по договорам ГПХ
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокСпособовРасчетовПоДоговору() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	                                   
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокСпособовРасчетовПоДоговору()

// Возвращает список способов расчетов по среднему заработку
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокСпособовРасчетовПоСреднемуЗаработку() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	                                   
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокСпособовРасчетовПоСреднемуЗаработку()

// Возвращает список способов расчетов по шкале ставок
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокСпособовРасчетовПоШкалеСтавок() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	                                   
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокСпособовРасчетовПоДоговору()

// Возвращает список способов расчетов по минимальной заработной плате
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокСпособовРасчетовПоМинимальнойЗаработнойПлате() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	                                   
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокСпособовРасчетовПоМинимальнойЗаработнойПлате()

// Возвращает список предопределенных начислений
Функция ПредопределенныеНачисленияОрганизации() Экспорт

	СписокПредопределенныхВР = Новый СписокЗначений;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОсновныеНачисленияОрганизаций.Ссылка,
	                      |	ОсновныеНачисленияОрганизаций.Наименование
	                      |ИЗ
	                      |	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	                      |
	                      |ГДЕ
	                      |	(ОсновныеНачисленияОрганизаций.Предопределенный)");

	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
	    СписокПредопределенныхВР.Добавить(Результат.Ссылка,Результат.Наименование);
	КонецЦикла;
	
    Возврат СписокПредопределенныхВР
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ВИДАМИ РАСЧЕТА

// Эта функция возвращает информацию о виде расчета из переданного соответствия
// Если в соответствии не найдена информация о виде расчета - она подготавливается и 
// помещается в соответствие
// Применяется для работы с формами, в которых активно требуется получать 
// информащцию о видах расчета, например, при выводе строки табличного поля
//
// Параметры:      
//	СведенияОВидахРасчета - соответствие, у котрого в качестве ключа - ПланВидовРасчетаСсылка, а 
//  				  в качестве значения - структура из элементов
//					  РазмерТребуется - булево - если да, то при вводе такого 
//										вида расчета требуется проставлять значение "размер" 
//										(суммы, проценты и проч. показатели, используемые при расчете)
//
//	ВидРасчета - ПланВидовРасчетаСсылка
//
// Возвращаемое значение:
//  Описанная выше структура
//
Функция ПолучитьСведенияОВидеРасчета(СведенияОВидахРасчета, ВидРасчета) Экспорт
	
	СведенияОВидеРасчета = СведенияОВидахРасчета[ВидРасчета];
	Если СведенияОВидеРасчета = Неопределено Тогда
		
		ИзменениеПоказателяНеУказано = Перечисления.ИзменениеПоказателейСхемМотивации.ПустаяСсылка();
	
		СведенияОВидеРасчета = Новый Структура("
		|СпособРасчета,
		|ЗачетОтработанногоВремени,
		|ЗачетНормыВремени,
		|УчетОтработанногоВремени,
		|ПериодРасчетаСреднегоЗаработка,
		|РазмерТребуется, 
		|НеТребуетВалюты,
		|ТребуетВводаТарифногоРазряда",
		Неопределено, 		// СпособРасчета
		Ложь,			    // ЗачетОтработанногоВремени
		Ложь,				// ЗачетНормыВремени
		Ложь,				// УчетОтработанногоВремени
		0,					// ПериодРасчетаСреднегоЗаработка
		Ложь,               // РазмерТребуется
		Ложь,               // НеТребуетВалюты	
		Ложь);				// ТребуетВводаТарифногоРазряда
		
		СпособРасчета = ВидРасчета.СпособРасчета;
		ТипВР = ТипЗнч(ВидРасчета);
		// размер требует способ расчета
		СведенияОВидеРасчета.СпособРасчета = СпособРасчета;
		СведенияОВидеРасчета.РазмерТребуется = СпособРасчетаТребуетРазмер(СпособРасчета);
		СведенияОВидеРасчета.НеТребуетВалюты = СпособРасчетаНеТребуетВалюты(СпособРасчета);
		// размер требует вид расчета
		Если ТипВР = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
			ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета,ВидРасчета,"ЗачетОтработанногоВремени,
																	 |ЗачетНормыВремени,
																	 |УчетОтработанногоВремени,
																	 |ТребуетВводаТарифногоРазряда,
																	 |ПериодРасчетаСреднегоЗаработка");
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
				СведенияОВидеРасчета.РазмерТребуется = Истина;
			КонецЕсли;	
			Если СведенияОВидеРасчета.ТребуетВводаТарифногоРазряда Тогда
				СведенияОВидеРасчета.НеТребуетВалюты = Истина
			КонецЕсли;
		КонецЕсли;
		Если ТипВР = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций")  Тогда
			ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета,ВидРасчета,"ТребуетВводаТарифногоРазряда");
			Если СведенияОВидеРасчета.ТребуетВводаТарифногоРазряда Тогда
				СведенияОВидеРасчета.НеТребуетВалюты = Истина
			КонецЕсли;
			Если ПолучитьСписокНачисленийПоСреднемуЗаработку().НайтиПоЗначению(СпособРасчета) <> Неопределено Тогда
				СведенияОВидеРасчета.ПериодРасчетаСреднегоЗаработка = ВидРасчета.ЧислоМесяцев;
			КонецЕсли;
		КонецЕсли;
		Если ТипВР = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций") Тогда
			Если ПолучитьСписокНачисленийПоСреднемуЗаработку().НайтиПоЗначению(СпособРасчета) <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета,ВидРасчета,"ПериодРасчетаСреднегоЗаработка");
			КонецЕсли;
		КонецЕсли;
		Если ТипВР = Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления") Тогда
			ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета,ВидРасчета,"ЗачетОтработанногоВремени");
		КонецЕсли;
		
		СведенияОВидахРасчета[ВидРасчета] = СведенияОВидеРасчета;
	КонецЕсли;
	
	Возврат СведенияОВидеРасчета;
	
КонецФункции  // ПолучитьСведенияОВидеРасчета()

Функция СведенияПВРПоТипуВР(ВРСсылка)
	
	СведенияПВРПоТипуВР = Новый Соответствие;
	СведенияПВРПоТипуВР.Вставить(Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), 			Новый Структура("Имя, ЭтоНачисление, ЭтоДополнительноеНачисление, ЭтоРегламентированныйУчет", "ОсновныеНачисленияОрганизаций", Истина, Ложь, Истина));
	СведенияПВРПоТипуВР.Вставить(Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций"), 	Новый Структура("Имя, ЭтоНачисление, ЭтоДополнительноеНачисление, ЭтоРегламентированныйУчет", "ДополнительныеНачисленияОрганизаций", Истина, Истина, Истина));
	СведенияПВРПоТипуВР.Вставить(Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций"), 					Новый Структура("Имя, ЭтоНачисление, ЭтоДополнительноеНачисление, ЭтоРегламентированныйУчет", "УдержанияОрганизаций", Ложь, Ложь, Истина));
	СведенияПВРПоТипуВР.Вставить(Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления"), 				Новый Структура("Имя, ЭтоНачисление, ЭтоДополнительноеНачисление, ЭтоРегламентированныйУчет", "УправленческиеНачисления", Истина, Ложь, Ложь));
	СведенияПВРПоТипуВР.Вставить(Тип("ПланВидовРасчетаСсылка.УправленческиеУдержания"), 				Новый Структура("Имя, ЭтоНачисление, ЭтоДополнительноеНачисление, ЭтоРегламентированныйУчет", "УправленческиеУдержания", Ложь, Ложь, Ложь));
	
	Возврат СведенияПВРПоТипуВР[ТипЗнч(ВРСсылка)];
	
КонецФункции // СведенияПВРПоТипуВР

// Эта функция возвращает информацию о виде расчета из переданного соответствия
// Если в соответствии не найдена информация о виде расчета - она подготавливается и 
// помещается в соответствие
// Применяется для работы с формами, в которых активно требуется получать 
// информащцию о видах расчета, например, при выводе строки табличного поля
//
// Параметры:      
//	СведенияОВидахРасчета - соответствие, у котрого в качестве ключа - ПланВидовРасчетаСсылка, а 
//  				  в качестве значения - структура из элементов
//					  РазмерТребуется - булево - если да, то при вводе такого 
//										вида расчета требуется проставлять значение "размер" 
//										(суммы, проценты и проч. показатели, используемые при расчете)
//
//	ВидРасчета - ПланВидовРасчетаСсылка
//
// Возвращаемое значение:
//  Описанная выше структура
//
Функция ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидРасчета, Режим = "ПлановыеНачисления") Экспорт
	
	СведенияОВидеРасчета = СведенияОВидахРасчета[ВидРасчета];
	
	Если СведенияОВидеРасчета = Неопределено Тогда
		
		СведенияОВидеРасчета = Новый Структура("СпособРасчета,КоличествоПоказателей,РазмерТребуется,НеТребуетВалюты,ТребуетВводаТарифногоРазряда,ФактКоличествоПоказателей,ИспользуетРасчетнуюБазу,ИспользуетПоказателиУчетаВремени", Неопределено, 1, Ложь, Ложь, Ложь,0, Ложь, Ложь);
																					
		Если ЗначениеЗаполнено(ВидРасчета) Тогда
			
			СведенияОПВР = СведенияПВРПоТипуВР(ВидРасчета);
			ИмяПВР = СведенияОПВР.Имя;
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Показатели.Показатель,
			|	ВЫБОР
			|		КОГДА  НЕ Показатели.ЗапрашиватьПриКадровыхПеремещениях
			|			ТОГДА ИСТИНА";
			Если СведенияОПВР.ЭтоНачисление И Не СведенияОПВР.ЭтоДополнительноеНачисление Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|       ИНАЧЕ
				|			ВЫБОР 
				|				КОГДА Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная) ИЛИ Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
				|				ИЛИ Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая) ИЛИ Показатели.Показатель.ТарифнаяСтавка
				|					ТОГДА НЕ Показатели.Ссылка.ЗачетОтработанногоВремени
				|				ИНАЧЕ ЛОЖЬ
				|			КОНЕЦ";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + "
			|	КОНЕЦ КАК НЕЗапрашиватьПриКадровыхПеремещениях,
			|	ВЫБОР
			|		КОГДА Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ПустаяСсылка) 
			|			ТОГДА ИСТИНА";
			Если СведенияОПВР.ЭтоНачисление И Не СведенияОПВР.ЭтоДополнительноеНачисление Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|	    ИНАЧЕ
				|			ВЫБОР 
				|				КОГДА Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная) ИЛИ Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
				|					ИЛИ Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая) ИЛИ Показатели.Показатель.ТарифнаяСтавка
				|						ТОГДА НЕ Показатели.Ссылка.ЗачетОтработанногоВремени
				|				КОГДА Показатели.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
				|						ТОГДА Истина
				|					ИНАЧЕ Показатели.Показатель.Предопределенный
				|			КОНЕЦ";
			Иначе
				ТекстЗапроса = ТекстЗапроса + "
				|		КОГДА Показатели.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
				|			ТОГДА Истина
				|		ИНАЧЕ Показатели.Показатель.Предопределенный";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + "		
			|			
			|	КОНЕЦ КАК Предопределенный,
			|	ВЫБОР КОГДА Показатели.Показатель.Предопределенный И Показатели.Показатель <> Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
			|				И Показатели.Показатель <> Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная) 
			|				И Показатели.Показатель <> Значение(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая) 
			|			ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоПредопределенный,
			|	ВЫБОР КОГДА Показатели.Показатель.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ВыбранаВалюта,
			|	ВЫБОР КОГДА Показатели.Показатель.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ИЛИ Показатели.Показатель.Валюта = Константы.ВалютаУправленческогоУчета ТОГДА ЛОЖЬ ИНАЧЕ Истина КОНЕЦ КАК ВводВалютныхЗначений,
			|	Показатели.Показатель.Наименование КАК ПоказательНаименование,
			|	Показатели.Показатель.ТипПоказателя,
			|	Показатели.Показатель.ВидПоказателя КАК ВидПоказателя,
			|	Показатели.Показатель.Валюта КАК ВалютаПоказателя, 
			|	ВЫБОР
			|		КОГДА Показатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
			|			ТОГДА 3
			|		ИНАЧЕ ВЫБОР
			|				КОГДА Показатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Денежный)
			|					ТОГДА 2
			|				ИНАЧЕ 3
			|			КОНЕЦ
			|	КОНЕЦ КАК ТочностьПредставления,
			|	ЕСТЬNULL(Показатели.Показатель.ВозможностьИзменения, ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка)) КАК ПоказательВозможностьИзменения,
			|	Показатели.НомерСтроки,
			|	КоличествоПоказателей.Количество КАК КоличествоПоказателей,
			|	ВЫБОР
			|		КОГДА 1 В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					1
			|				ИЗ
			|					ПланВидовРасчета." + ИмяПВР + ".Показатели КАК Показатели
			|				ГДЕ
			|					Показатели.Ссылка = &Ссылка
			|					И Показатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБаза))
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ИспользуетРасчетнуюБазу,
			|	ВЫБОР
			|		КОГДА 1 В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					1
			|				ИЗ
			|					ПланВидовРасчета." + ИмяПВР + ".Показатели КАК Показатели
			|				ГДЕ
			|					Показатели.Ссылка = &Ссылка
			|					И Показатели.Показатель В(	ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВДнях),
			|												ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВЧасах),		
			|												ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.НормаВремениВДнях),		
			|												ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.НормаВремениВЧасах)))		
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ИспользуетПоказателиУчетаВремени,
			|	Показатели.Ссылка.СпособРасчета КАК СпособРасчета,
			|";
			Если СведенияОПВР.ЭтоНачисление И СведенияОПВР.ЭтоРегламентированныйУчет Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|	ВЫБОР
				|		КОГДА Показатели.Ссылка.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула)
				|			ТОГДА ВЫБОР
				|					КОГДА 1 В
				|							(ВЫБРАТЬ ПЕРВЫЕ 1
				|								1
				|							ИЗ
				|								ПланВидовРасчета." + ИмяПВР + ".Показатели КАК Показатели
				|							ГДЕ
				|								Показатели.Ссылка = &Ссылка
				|								И Показатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд))
				|						ТОГДА ИСТИНА
				|					ИНАЧЕ ЛОЖЬ
				|				КОНЕЦ
				|		ИНАЧЕ Показатели.Ссылка.ТребуетВводаТарифногоРазряда
				|	КОНЕЦ КАК ТребуетВводаТарифногоРазряда
				|";
			Иначе
				ТекстЗапроса = ТекстЗапроса + "
				|	ВЫБОР
				|		КОГДА 1 В
				|				(ВЫБРАТЬ ПЕРВЫЕ 1
				|					1
				|				ИЗ
				|					ПланВидовРасчета." + ИмяПВР + ".Показатели КАК Показатели
				|				ГДЕ
				|					Показатели.Ссылка = &Ссылка
				|					И Показатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд))
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ТребуетВводаТарифногоРазряда
				|";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + "
			|ИЗ
			|	ПланВидовРасчета." + ИмяПВР + ".Показатели КАК Показатели
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			КОЛИЧЕСТВО(Показатель) КАК Количество
			|		ИЗ
			|			ПланВидовРасчета." + ИмяПВР + ".Показатели
			|		ГДЕ
			|			Ссылка = &Ссылка) КАК КоличествоПоказателей
			|		ПО (ИСТИНА),
			|	Константы КАК Константы
			|ГДЕ
			|	Показатели.Ссылка = &Ссылка";
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Ссылка",ВидРасчета);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				
				СтрокаТаблицыСведений = РезультатЗапроса.Выбрать();
				Пока СтрокаТаблицыСведений.Следующий() Цикл
					
					СведенияОВидеРасчета["КоличествоПоказателей"] 		= Макс(СведенияОВидеРасчета["КоличествоПоказателей"], СтрокаТаблицыСведений["КоличествоПоказателей"]);
					СведенияОВидеРасчета["ФактКоличествоПоказателей"] 	= Макс(СтрокаТаблицыСведений["КоличествоПоказателей"],СведенияОВидеРасчета["ФактКоличествоПоказателей"]);
					СведенияОВидеРасчета["ИспользуетРасчетнуюБазу"] 	= СтрокаТаблицыСведений["ИспользуетРасчетнуюБазу"];
					СведенияОВидеРасчета["ИспользуетПоказателиУчетаВремени"] = СтрокаТаблицыСведений["ИспользуетПоказателиУчетаВремени"];
					СведенияОВидеРасчета["СпособРасчета"]				= СтрокаТаблицыСведений["СпособРасчета"];
					СведенияОВидеРасчета["ТребуетВводаТарифногоРазряда"]= СтрокаТаблицыСведений["ТребуетВводаТарифногоРазряда"];
					
					СчПоказателей 			= СтрокаТаблицыСведений.НомерСтроки;
					ВозможностьИзменения	= СтрокаТаблицыСведений.ПоказательВозможностьИзменения;
					ТипПоказателя			= СтрокаТаблицыСведений.ПоказательТипПоказателя;
					
					
					СведенияОВидеРасчета.Вставить("ВалютаПоказателя" + СчПоказателей,СтрокаТаблицыСведений["ВалютаПоказателя"]);
					СведенияОВидеРасчета.Вставить("ВводВалютныхЗначений" + СчПоказателей, СтрокаТаблицыСведений["ВводВалютныхЗначений"]);
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Точность", СтрокаТаблицыСведений["ТочностьПредставления"]);
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "ВозможностьИзменения",ВозможностьИзменения);
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Наименование",СтрокаТаблицыСведений["ПоказательНаименование"]);
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "ВидПоказателя",СтрокаТаблицыСведений["ВидПоказателя"]);
					
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей ,СтрокаТаблицыСведений.Показатель);
					
					Если СтрокаТаблицыСведений["НЕЗапрашиватьПриКадровыхПеремещениях"] <> Null И СтрокаТаблицыСведений["НЕЗапрашиватьПриКадровыхПеремещениях"] И Не СтрокаТаблицыСведений["ЭтоПредопределенный"] Тогда
						Если Режим = "ПлановыеНачисления" Тогда
							Если ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.ИзменяетсяПриРасчете
								ИЛИ ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.ВиденНоНеРедактируетсяПриРасчете Тогда 
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Истина);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
								Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный Тогда
									СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Истина);
								Иначе
									СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
								КонецЕсли;
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
							Иначе
								
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
								СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
							КонецЕсли;
						
						Иначе
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость" ,Истина);
							Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
								
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость" , Истина);
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость" , Истина);
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Наименование" , СтрокаТаблицыСведений["ПоказательНаименование"]);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость" , Ложь);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость" , Ложь);
								СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость" , Ложь);	
								
							ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Числовой Или ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Процентный Или ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.СуммаПоказателя Тогда
								
								
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
								СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
								
							ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный Тогда
								
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
								СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", СтрокаТаблицыСведений["ВыбранаВалюта"]);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Точность", СтрокаТаблицыСведений["ТочностьПредставления"]);
								
							ИначеЕсли (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
								Или (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная) Тогда
								
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
								СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
								
							Иначе
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
								СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
								СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", СтрокаТаблицыСведений["ВыбранаВалюта"]);
								СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
							КонецЕсли;
							
						КонецЕсли;
					ИначеЕсли СтрокаТаблицыСведений["Предопределенный"] <> Null И СтрокаТаблицыСведений["Предопределенный"] Тогда
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
					ИначеЕсли Режим = "ПлановыеНачисления" и (СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно
						Или СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически) Тогда
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость" , Ложь);
						СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость" , Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость" , Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость" , Ложь);
					Иначе
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость" ,Истина);
						Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
							
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость" , Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость" , Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Наименование" , СтрокаТаблицыСведений["ПоказательНаименование"]);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость" , Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость" , Ложь);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость" , Ложь);	
							
						ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Числовой Тогда
							
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
							
						ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный Тогда
							
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", СтрокаТаблицыСведений["ВыбранаВалюта"]);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Точность", СтрокаТаблицыСведений["ТочностьПредставления"]);
							
							
						ИначеЕсли (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
							Или (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная) Тогда
							
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
							
						Иначе
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
							
						КонецЕсли;
					КонецЕсли;
					
					Если СтрокаТаблицыСведений.Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная
						Или СтрокаТаблицыСведений.Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная Тогда
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Точность", СтрокаТаблицыСведений["ТочностьПредставления"]);
					КонецЕсли;
				КонецЦикла;
			Иначе
				ИменаРеквизитовВР = "СпособРасчета" + ?(СведенияОПВР.ЭтоНачисление И СведенияОПВР.ЭтоРегламентированныйУчет, ",ТребуетВводаТарифногоРазряда", "");
				ЗначенияРеквизитовВР = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ВидРасчета, ИменаРеквизитовВР);
				ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета, ЗначенияРеквизитовВР);
				СведенияОВидеРасчета.Вставить("Показатель1Наименование", "");
				СведенияОВидеРасчета.Вставить("ПоказательТР1НаименованиеВидимость", Ложь);
				СведенияОВидеРасчета.Вставить("ПоказательТР1Видимость", Ложь);
				СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);
				СведенияОВидеРасчета.Вставить("Показатель1Видимость", Ложь);
				СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
				СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
				СведенияОВидеРасчета.Вставить("Показатель1ВозможностьИзменения", Ложь);
				СведенияОВидеРасчета.Вставить("ВалютаПоказателя1");
			КонецЕсли;
				
	 		ИзменениеПоказателяНеУказано = Перечисления.ИзменениеПоказателейСхемМотивации.ПустаяСсылка();
					
			// заполним для регламентированных способов оплаты труда
			Если СведенияОПВР.ЭтоРегламентированныйУчет Тогда
				Если СведенияОВидеРасчета.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
					СведенияОВидеРасчета.Вставить("ФактКоличествоПоказателей",0);
					СведенияОВидеРасчета["Показатель1Точность"] = 3;
					
					Если СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням 
						Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам 
						Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения Тогда
						СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						НаименованиеТарифнойСтавки = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная;
						
						Если СведенияОВидеРасчета.ТребуетВводаТарифногоРазряда Тогда
							СведенияОВидеРасчета.Вставить("ПоказательТР1НаименованиеВидимость", Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР1Видимость", Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР1Наименование", НаименованиеТарифнойСтавки);
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
						Иначе
							СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель1Наименование", НаименованиеТарифнойСтавки);
							СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						КонецЕсли;
					ИначеЕсли СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке 
						Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке
						Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения Тогда
						СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						
						Если СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке Тогда
							НаименованиеТарифнойСтавки = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная;
							СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
						Иначе
							НаименованиеТарифнойСтавки = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая;
							СведенияОВидеРасчета.Вставить("Показатель1Точность", 3);
						КонецЕсли;
						
						Если СведенияОВидеРасчета.ТребуетВводаТарифногоРазряда Тогда
							СведенияОВидеРасчета.Вставить("ПоказательТР1НаименованиеВидимость", Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР1Видимость", Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР1Наименование", НаименованиеТарифнойСтавки);
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
						Иначе
							СведенияОВидеРасчета.Вставить("Показатель1Наименование", НаименованиеТарифнойСтавки);
							СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						КонецЕсли;
					ИначеЕсли СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
						СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", ?(СведенияОПВР.ЭтоНачисление, "Процент оплаты", "Процент удержания"));
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
					ИначеЕсли СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке
						Или  СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням
						Или  СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам
						Или  СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке Тогда
						Если Режим = "ПлановыеНачисления" Тогда
							СведенияОВидеРасчета["КоличествоПоказателей"] = 1;
							СведенияОВидеРасчета["ФактКоличествоПоказателей"] = 1;
						Иначе 
							СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
						КонецЕсли;
						
						Если СведенияОВидеРасчета.ТребуетВводаТарифногоРазряда Тогда
							СведенияОВидеРасчета.Вставить("ПоказательТР1НаименованиеВидимость", Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР1Видимость", Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР1Наименование", ?(Режим = "ПлановыеНачисления","Тарифный разряд","Тарифная ставка"));					
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
						Иначе
							СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Тарифная ставка");					
							СведенияОВидеРасчета.Вставить("Показатель1ВозможностьИзменения", Истина);
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						КонецЕсли;

					ИначеЕсли СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
						Если Режим = "ПлановыеНачисления" Тогда
							СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент доплаты");
							СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);				
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
						Иначе // для отображения в ведомости начислений
							СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Тарифная ставка (расч.)");
							СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);				
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель2Наименование", "Тарифная ставка (час)");
							СведенияОВидеРасчета.Вставить("Показатель2Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Истина);			
							СведенияОВидеРасчета.Вставить("Валюта2Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель3Наименование", "Коэффициент оплаты");
							СведенияОВидеРасчета.Вставить("Показатель3Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель3НаименованиеВидимость", Истина);			
							СведенияОВидеРасчета.Вставить("Валюта3Видимость", Ложь);
						КонецЕсли;
				ИначеЕсли СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке Тогда
						Если Режим = "ПлановыеНачисления" Тогда
							СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент доплаты");
							СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);				
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
						Иначе // для отображения в ведомости начислений
							СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Тарифная ставка (расч.)");
							СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);				
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель2Наименование", "Тарифная ставка (час)");
							СведенияОВидеРасчета.Вставить("Показатель2Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Истина);			
							СведенияОВидеРасчета.Вставить("Валюта2Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель3Наименование", "Коэффициент оплаты");
							СведенияОВидеРасчета.Вставить("Показатель3Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель3НаименованиеВидимость", Истина);			
							СведенияОВидеРасчета.Вставить("Валюта3Видимость", Ложь);
						КонецЕсли;

				ИначеЕсли СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом Тогда
						Если Режим = "ПлановыеНачисления" Тогда
							СведенияОВидеРасчета["КоличествоПоказателей"] = 0;
							СведенияОВидеРасчета["ФактКоличествоПоказателей"] = 0;
							СведенияОВидеРасчета.Вставить("Показатель1Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель1ВозможностьИзменения", Ложь);
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
						Иначе
							СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент оплаты");
							СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель1ВозможностьИзменения", Истина);
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
						КонецЕсли;
					ИначеЕсли СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку
						Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных
						Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска
						Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения
						Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
						СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", ?(СведенияОПВР.ЭтоДополнительноеНачисление ИЛИ НЕ СведенияОПВР.ЭтоНачисление, "Дней оплаты", "Процент"));
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
					ИначеЕсли  СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
						Если Режим = "ПлановыеНачисления" Тогда
							СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						КонецЕсли;
							
						Если СведенияОВидеРасчета.ТребуетВводаТарифногоРазряда Тогда
							СведенияОВидеРасчета.Вставить("ПоказательТР1НаименованиеВидимость", Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР1Видимость", Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР1Наименование", ?(Режим = "ПлановыеНачисления","Тарифный разряд","Тарифная ставка"));
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
						Иначе 
							СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Тарифная ставка");
							СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						КонецЕсли;

					ИначеЕсли  СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой 
						Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммойДляПочасовогоОтклонения
						Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой Тогда
						СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Сумма");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
						
					ИначеЕсли  СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю
						Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням
						Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Коэффициент МРП");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);			
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);				
					ИначеЕсли  СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате
						Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням
						Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Коэффициент МЗП");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);			
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);				
					ИначеЕсли  СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма
						Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "без оплаты");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
				ИначеЕсли  СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом 
						Или СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Тогда
						СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент удержаний");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
					ИначеЕсли  СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда
						СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Фиксированная сумма");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
					ИначеЕсли  СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
						СведенияОВидеРасчета.Вставить("РазмерТребуется", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент сбора");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
					ИначеЕсли СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой Тогда
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Сумма");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
					ИначеЕсли ПроведениеРасчетов.СпособРасчетаТребуетРазмер(СведенияОВидеРасчета.СпособРасчета) Тогда
						СведенияОВидеРасчета.Вставить(СведенияОВидеРасчета.РазмерТребуется, Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						Если НЕ ПроведениеРасчетов.СпособРасчетаНеТребуетВалюты(СведенияОВидеРасчета.СпособРасчета) И Найти(Строка(СведенияОВидеРасчета.СпособРасчета), "П1") = 0 Тогда
							СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВидРасчета = ПланыВидовРасчета.УправленческиеУдержания.УдержаноПоБухгалтерии Тогда
				СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Удержано по бухгалтерии");
				СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
				СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);
				СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
				СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
			КонецЕсли;
			
		Иначе
			СведенияОВидеРасчета.Вставить("Показатель1Наименование", "");
			СведенияОВидеРасчета.Вставить("ПоказательТР1НаименованиеВидимость", Ложь);
			СведенияОВидеРасчета.Вставить("ПоказательТР1Видимость", Ложь);
			СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);
			СведенияОВидеРасчета.Вставить("Показатель1Видимость", Ложь);
			СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
			СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
			СведенияОВидеРасчета.Вставить("Показатель1ВозможностьИзменения", Ложь);
		КонецЕсли;
		
		СведенияОВидахРасчета[ВидРасчета] = СведенияОВидеРасчета;
		
	КонецЕсли;

	Возврат СведенияОВидеРасчета;
	
КонецФункции  // ПолучитьСведенияОВидеРасчетаСхемыМотивации

// Получает список предопределенных показателей схем мотивации 
//
Функция ПолучитьСписокПредопределенныхПоказателей() Экспорт 
	
	СписокПредопределенныхПоказателей = Новый СписокЗначений;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПоказателиСхемМотивации.Ссылка КАК Ссылка,
	|	ПоказателиСхемМотивации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ПоказателиСхемМотивации КАК ПоказателиСхемМотивации
	|ГДЕ
	|	ПоказателиСхемМотивации.Предопределенный";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокПредопределенныхПоказателей.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокПредопределенныхПоказателей;
	
КонецФункции // ПолучитьСписокПредопределенныхПоказателей()

// проверка того, что показатель схемы мотивации является предопределенным показателем 
// не требующим ввода (т.е. рассчитываемым автоматически)
Функция ЭтоПоказательСАвторасчетом(Показатель) Экспорт
    Возврат     Показатель = Справочники.ПоказателиСхемМотивации.ВремяВДнях 
            или Показатель = Справочники.ПоказателиСхемМотивации.ВремяВЧасах
            или Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВДнях
            или Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВЧасах
            или Показатель = Справочники.ПоказателиСхемМотивации.СдельнаяВыработка
            или Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза			
            или Показатель = Справочники.ПоказателиСхемМотивации.Стаж			
			или Показатель = Справочники.ПоказателиСхемМотивации.УдалитьНуль;

КонецФункции // ЭтоПоказательСАвторасчетом()

// Читает и сохраняет для последующего использования реквизиты показателей схем мотивации
//
// Параметры
//  СведенияОПоказателях  - соответствие с данными о показателях
//  Показатель - ссылка на эл-т спр-ка ПоказателиСхемМотивации
//
// Возвращаемое значение:
//   Структура  - содержит реквизиты эл-та спр-ка ПоказателиСхемМотивации
//
Функция ПолучитьСведенияОПоказателе(СведенияОПоказателях,Показатель) Экспорт

	СведенияОПоказателе = СведенияОПоказателях[Показатель];
	Если СведенияОПоказателе = Неопределено Тогда
		СведенияОПоказателе = Новый Структура("ВидПоказателя,
												|ТипПоказателя,
												|ВозможностьИзменения",
												Перечисления.ВидыПоказателейСхемМотивации.ПустаяСсылка(),
												Перечисления.ТипыПоказателейСхемМотивации.ПустаяСсылка(),
												Перечисления.ИзменениеПоказателейСхемМотивации.ПустаяСсылка());
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидПоказателя,
		|	ТипПоказателя,
		|	ВозможностьИзменения
		|ИЗ
		|	Справочник.ПоказателиСхемМотивации КАК ПоказателиСхемМотивации
		|ГДЕ
		|	ПоказателиСхемМотивации.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка",Показатель);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СведенияОПоказателе,Выборка);
		КонецЕсли;
		СведенияОПоказателях[Показатель] = СведенияОПоказателе	
	КонецЕсли;
	
	Возврат СведенияОПоказателе

КонецФункции // ПолучитьСведенияОПоказателе()

// Возвращает список типов показателей схем мотивации, для которых не требуется валюта и валютные пересчеты
//
Функция ПолучитьСписокТиповПоказателейСхемМотивацииНеТребующихУказанияВалюты() Экспорт

	СписокТиповПоказателей = Новый СписокЗначений;
	
	СписокТиповПоказателей.Добавить(Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная);
	СписокТиповПоказателей.Добавить(Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая);
	СписокТиповПоказателей.Добавить(Перечисления.ТипыПоказателейСхемМотивации.Процентный);
	СписокТиповПоказателей.Добавить(Перечисления.ТипыПоказателейСхемМотивации.Числовой);

	Возврат СписокТиповПоказателей;
	
КонецФункции // ПолучитьСписокТиповПоказателейСхемМотивацииНеТребующихУказанияВалюты()

// функция проверяет необходимость задавать размер для расчета по заданному способу
// Парамерты:
//	СпособРасчета
//
// Возвращаемое значение:
//	булево - признак того, нужен ли размер для расчета таким способом
//
Функция СпособРасчетаТребуетРазмер(СпособРасчета) Экспорт
	Возврат НЕ (
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам		
		или	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения
		или	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула);
КонецФункции

Функция СпособРасчетаНеТребуетВалюты(СпособРасчета) Экспорт
	
	Возврат (
	
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы ИЛИ
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке ИЛИ
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка ИЛИ
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку ИЛИ
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска ИЛИ
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных ИЛИ
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения ИЛИ
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом ИЛИ
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма ИЛИ
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения ИЛИ
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок ИЛИ
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом ИЛИ
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела ИЛИ
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела ИЛИ
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю ИЛИ
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням ИЛИ
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам ИЛИ
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате ИЛИ
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням ИЛИ
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам ИЛИ
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом
    );
	
КонецФункции

// Функция проверяет необходимость задавать базовый период для расчета по заданному способу
//
Функция СпособРасчетаТребуетБазовыйПериод(СпособРасчета, Показатели) Экспорт
	
	ПоказательРасчетнаяБаза = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза;
											
	Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом
	 ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом
	 ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом
	 ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Тогда
		
		Возврат Истина;
		
	ИначеЕсли Показатели.Найти(ПоказательРасчетнаяБаза) <> Неопределено Тогда
		  
		Возврат Истина;
		
	Иначе
	
		Возврат Ложь;
	
	КонецЕсли;
											
КонецФункции // СпособРасчетаТребуетБазовыйПериод()

// проверка того, что способ расчета относится к договорам
Функция ЭтоДоговор(СпособРасчета) Экспорт
    Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой; 
КонецФункции

// проверка того, что способ расчета относится к расчетам по среднему
Функция ЭтоРасчетПоСреднемуЗаработку(СпособРасчета) Экспорт
	Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка;
КонецФункции

// проверка того, что способ расчета относится к расчетам фиксированной суммой
Функция ЭтоРасчетФиксированнойСуммой(СпособРасчета) Экспорт
	Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю или 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате или 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой;
КонецФункции

// проверка того, что способ расчета относится к расчетам по шкале ставок
Функция ЭтоРасчетПоШкалеСтавок(СпособРасчета) Экспорт
	Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор;
КонецФункции

// проверка того, что способ расчета относится к расчетам почасовых отклонений
Функция ЭтоРасчетПочасовогоОтклонения(СпособРасчета) Экспорт
	Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммойДляПочасовогоОтклонения или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения;
КонецФункции

// Проверка того, что способ расчета относится к расчетам от МРП
//
Функция ЭтоРасчетПоМесячномуРасчетномуПоказателю(СпособРасчета) Экспорт
	Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам;
КонецФункции // ЭтоРасчетПоМесячномуРасчетномуПоказателю()

// Проверка того, что способ расчета относится к расчетам от минимальной зарплаты
//
Функция ЭтоРасчетПоМинимальнойЗаработнойПлате(СпособРасчета) Экспорт
	Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам;
КонецФункции // ЭтоРасчетПоМинимальнойЗаработнойПлате()

// Возвращает Истина, если оба переданных способа расчета описывают эквивалентные по времени
// виды тарифных ставок (все месячные тарифные ставки, все дневные, все часовые)
//
Функция СпособыРасчетаОписываютОдинаковыеВидыТарифныхСтавок(СпособРасчета1, СпособРасчета2) Экспорт

	СпособыРасчета = Перечисления.СпособыРасчетаОплатыТруда;

	СтруктураТарифныеСтавки = Новый Структура("Месячные, Дневные, Часовые");
	
	СтруктураТарифныеСтавки.Месячные = Новый Соответствие();
	СтруктураТарифныеСтавки.Месячные.Вставить(СпособыРасчета.ПоМесячнойТарифнойСтавкеПоДням, Истина);
	СтруктураТарифныеСтавки.Месячные.Вставить(СпособыРасчета.ПоМесячнойТарифнойСтавкеПоЧасам, Истина);
	СтруктураТарифныеСтавки.Месячные.Вставить(СпособыРасчета.ПоМинимальнойЗаработнойПлатеПоДням, Истина);
	СтруктураТарифныеСтавки.Месячные.Вставить(СпособыРасчета.ПоМинимальнойЗаработнойПлатеПоЧасам, Истина);
	
	СтруктураТарифныеСтавки.Дневные = Новый Соответствие();
	СтруктураТарифныеСтавки.Дневные.Вставить(СпособыРасчета.ПоДневнойТарифнойСтавке, Истина);
	
	СтруктураТарифныеСтавки.Часовые = Новый Соответствие();
	СтруктураТарифныеСтавки.Часовые.Вставить(СпособыРасчета.ПоЧасовойТарифнойСтавке, Истина);
	СтруктураТарифныеСтавки.Часовые.Вставить(СпособыРасчета.СдельныйЗаработок, Истина);

	Для Каждого ВидСтавки Из СтруктураТарифныеСтавки Цикл
		Если ВидСтавки.Значение[СпособРасчета1] <> Неопределено
				И ВидСтавки.Значение[СпособРасчета2] <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;

КонецФункции // СпособыРасчетаОписываютОдинаковыеВидыТарифныхСтавок

// Функция возвращает число календарных дней, содержащихся в заданном периоде
// Параметры:
//  ДатаНачала - дата начала периода
//
//	ДатаОкончания - дата окончания периода
//
// Возвращаемое значение:
//	число - число календарных дней в периоде
//
Функция РассчитатьЧислоКалендарныхДней(ДатаНачала, ДатаОкончания) Экспорт
	ЧислоКалендарныхДней = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		| СУММА(КалендарныеДни) КАК ЧислоДней 
		|ИЗ 
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь
		|ГДЕ ДатаКалендаря МЕЖДУ &ДатаНачала И &ДатаОкончания
		|";
		
	Запрос.УстановитьПараметр("ДатаНачала",НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(ДатаОкончания));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		ЧислоКалендарныхДней = Результат[0].ЧислоДней;
	КонецЕсли;
	
	Возврат ЧислоКалендарныхДней;
КонецФункции

// Функция возвращает дату, отстоящую от заданной на указанное число календарных дней
// Параметры:
//	ДатаНачала - дата, от которой отсчитывать
//	ДнейПериода - число календарных дней период, дату окончания которого вернуть
//
// Возвращаемое значение:
//	Дата - дата окончания периода
//
Функция ПолучитьДатуОкончанияПоЧислуДнейПериода(ДатаНачала, ДнейПериода) Экспорт

	ДатаОкончания = '00010101';
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДнейПериода", ДнейПериода);
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СледДаты.ДатаКалендаря КАК ДатаКалендаря,
	               |	СУММА(ДниПериода.КалендарныеДни) КАК КалендарныеДни
	               |ИЗ
	               |	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК СледДаты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ДниПериода
	               |		ПО (ДниПериода.ДатаКалендаря МЕЖДУ &ДатаНачала И СледДаты.ДатаКалендаря)
	               |ГДЕ
	               |	// считаем, что в пределах тройного периода обязательно будет нужная дата
	               |	СледДаты.ДатаКалендаря МЕЖДУ &ДатаНачала И ДОБАВИТЬКДАТЕ(&ДатаНачала, ДЕНЬ, 3 * &ДнейПериода)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СледДаты.ДатаКалендаря
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(ДниПериода.КалендарныеДни) = &ДнейПериода
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаКалендаря";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаОкончания = Выборка.ДатаКалендаря;
	КонецЕсли;

	Возврат ДатаОкончания;

КонецФункции // ПолучитьДатуОкончанияПоЧислуДнейПериода

// Функция возвращает коэффициент оплаты для заданного вида работ
// Параметры:
//  Организация - СправочникСсылка.Организации - организация для которой нужно получить коэффициент
//  Дата - дата на которую нужно получить коэффициент
//	ВидРасчета - ПланВидовРасчетаСсылка - задаёт вид сверхнормативных работ (ночные, праздничные и 
//  			 выходные, сверхурочные)
//
// Возвращаемое значение:
//	число - коэффициент, если коэффициент не задан - нижний предел по законодательству
//
Функция ПолучитьКоэффициентОплатыСверхнормативныхРабот(Организация, Дата, ВидРасчета) Экспорт
	
	Коэффициент = 0;

	// необходимо также вытаскивать вид расчета для сравнения, в том случае если на дату вид расчета оказался отличным
	// от передаваемого параметром, то передадим минимальный коэффициент
	Если ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке 
		И ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Сверхурочные Тогда
		КоэффициентТекст = "ВЫБРАТЬ ВЫБОР КОГДА КоэффициентСверхурочные ЕСТЬ NULL ТОГДА 1.5 ИНАЧЕ КоэффициентСверхурочные КОНЕЦ КАК Коэффициент,
							|	ВидРасчетаСверхурочные КАК ВидРасчета";
		Коэффициент = 1.5;
	ИначеЕсли ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке 
		И (ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Праздники 
		ИЛИ ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеРабочиеДни) Тогда
		Если Дата >= Дата(2016, 1, 1) Тогда  // с 1 января 2016 года оплата праздничных и выходных дней производится в размере 1,5 от часовой тарифной ставки
			КоэффициентТекст = "ВЫБРАТЬ ВЫБОР КОГДА КоэффициентПраздничныеИВыходные ЕСТЬ NULL ТОГДА 1.5 ИНАЧЕ КоэффициентПраздничныеИВыходные КОНЕЦ КАК Коэффициент,
								|	ВидРасчетаПраздничныеИВыходные КАК ВидРасчета";
			Коэффициент = 1.5;
		Иначе
			КоэффициентТекст = "ВЫБРАТЬ ВЫБОР КОГДА КоэффициентПраздничныеИВыходные ЕСТЬ NULL ТОГДА 2 ИНАЧЕ КоэффициентПраздничныеИВыходные КОНЕЦ КАК Коэффициент,
								|	ВидРасчетаПраздничныеИВыходные КАК ВидРасчета";
			Коэффициент = 2;
		КонецЕсли;
	ИначеЕсли ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы 
		И ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы Тогда
		КоэффициентТекст = "ВЫБРАТЬ ВЫБОР КОГДА КоэффициентНочные ЕСТЬ NULL ТОГДА 1.5 ИНАЧЕ КоэффициентНочные КОНЕЦ КАК Коэффициент,
							|	ВидРасчетаНочные КАК ВидРасчета";
		Коэффициент = 1.5;
	Иначе
		КоэффициентТекст = "ВЫБРАТЬ 0 КАК Коэффициент,
							|ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка) КАК ВидРасчета";
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = КоэффициентТекст + "
		|ИЗ 
		|	РегистрСведений.КоэффициентыОплатыСверхнормативныхРабот.СрезПоследних(&Дата, Организация = &Организация)
		|";
		
	Запрос.УстановитьПараметр("Дата", 		 КонецДня(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Коэффициент = ?(Результат[0].Коэффициент = NULL, 0, Результат[0].Коэффициент);
	КонецЕсли;

	Если НЕ ВидРасчета.ЗачетОтработанногоВремени Тогда
		Коэффициент = Макс(0, Коэффициент - 1);
	КонецЕсли;
	
	Возврат Коэффициент;
	
КонецФункции

// Функция возвращает список видов расчета, которые надо добавить в ВедущиеВидыРасчета
// при добавлении списка видов расчета, переданных во входном параметре
//
// Параметры:
//	ВидРасчета - вид расчета или список значений видов расчета, для которых определить ведущие
//
//
Функция ПолучитьСписокВедущихВидовРасчета(ВидРасчета) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидРасчета", ВидРасчета);
	
	ТекстЗапроса = "";
	
	Для Каждого МетаданныеПВР Из Метаданные.ПланыВидовРасчета Цикл
	
	    Если НЕ ПравоДоступа("Чтение", МетаданныеПВР) Тогда
	    	Продолжить;
	    КонецЕсли;
	
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ
			|";
		КонецЕсли;
	
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПВР.ВидРасчета
		|ИЗ
		|	ПланВидовРасчета." + МетаданныеПВР.Имя + ".ВедущиеВидыРасчета КАК ПВР
		|ГДЕ
		|	ПВР.Ссылка В (&ВидРасчета)";
	
	КонецЦикла;

	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокВедущихВР = Новый СписокЗначений;

	Пока Выборка.Следующий() Цикл
		СписокВедущихВР.Добавить(Выборка.ВидРасчета);
	КонецЦикла;

	Возврат СписокВедущихВР;

КонецФункции // ПолучитьСписокВедущихВидовРасчета()

// Возвращает список начислений при формировании списка включаемых начислений в расчет от обратного
Функция ПолучитьСписокДоступныхНачисленийДляИспользованияВРасчетахОтОбратного(ИмяПВР, Текст) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачисленияОрганизаций.Ссылка КАК ВидРасчета
	               |ИЗ
	               |	ПланВидовРасчета." + ИмяПВР + " КАК НачисленияОрганизаций
	               |ГДЕ
	               |	(НЕ НачисленияОрганизаций.ОтОбратного)
	               |	И НачисленияОрганизаций.Наименование ПОДОБНО &парамТекст + ""%"" СПЕЦСИМВОЛ ""~""";
				   
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");  
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Запрос.УстановитьПараметр("парамТекст", Текст);
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"));
	СписокВыбора.СортироватьПоЗначению();

	Возврат СписокВыбора;
	
КонецФункции

Процедура ПроверкаПоказателейВПлановыхНачислениях(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, ЭтоНачисление, Отказ, Заголовок, ИспользуютсяНачисленияВВалюте, СоответствиеВалютныеСпособыРасчета = Неопределено) Экспорт
	
	Если ВыборкаПоСтрокамДокумента.ПроизвольнаяФормулаРасчета Тогда
		Для СчПоказателя = 1 По Мин(ВыборкаПоСтрокамДокумента.КоличествоПоказателей, 6) Цикл
			ТипПоказателя = ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя + "ТипПоказателя"];
			ВозможностьИзменения = ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя + "ВозможностьИзменения"];
			ЗапрашиватьПриКадровыхПеремещениях = ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя + "ЗапрашиватьПриКадровыхПеремещениях"];
			Если ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется И ЗапрашиватьПриКадровыхПеремещениях
				Или ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.ИзменяетсяПриРасчете	Тогда
				
				// проверка постоянных показателей
				Если ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя] = 0 Тогда
					// размер 
					Если Не ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя + "Предопределенный"]
						и ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная
						и ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая
						и ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
						ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан размер показателя " + ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя+"Наименование"], Отказ, Заголовок);
					КонецЕсли;
				КонецЕсли;
				Если ЭтоНачисление Тогда
					Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента["ТарифныйРазряд" + СчПоказателя])
						и ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
						ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан размер тарифа " + ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя+"Наименование"], Отказ, Заголовок);
					КонецЕсли;	
				КонецЕсли;	
				// валюта (для денежного показателя)
				Если ИспользуютсяНачисленияВВалюте Тогда
					Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный 
						и НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента["Валюта" + СчПоказателя]) 
						и ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
						ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке +  "не указана валюта!", Отказ, Заголовок);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ИспользуютсяНачисленияВВалюте Тогда
			// Валюта
			Если (Не ЭтоНачисление Или Не ВыборкаПоСтрокамДокумента.ТребуетВводаТарифногоРазряда)
				И Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Валюта1) 
				И СоответствиеВалютныеСпособыРасчета[ВыборкаПоСтрокамДокумента.СпособРасчета] 
				И ПроведениеРасчетов.СпособРасчетаТребуетРазмер(ВыборкаПоСтрокамДокумента.СпособРасчета) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не задана валюта!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		// Размер оплаты
		Если ВыборкаПоСтрокамДокумента.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить И ПроведениеРасчетов.СпособРасчетаТребуетРазмер(ВыборкаПоСтрокамДокумента.СпособРасчета) Тогда
			Если ЭтоНачисление И ВыборкаПоСтрокамДокумента.Показатель1 = 0 и Не ВыборкаПоСтрокамДокумента.ТребуетВводаТарифногоРазряда Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан размер начисления!", Отказ, Заголовок);
				
			ИначеЕсли ЭтоНачисление И ВыборкаПоСтрокамДокумента.ТарифныйРазряд1.Пустая() И ВыборкаПоСтрокамДокумента.ТребуетВводаТарифногоРазряда Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан разряд!", Отказ, Заголовок);
				
			ИначеЕсли Не ЭтоНачисление И ВыборкаПоСтрокамДокумента.Показатель1 = 0 Тогда 
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан размер удержания!", Отказ, Заголовок);
				
			КонецЕсли;
		КонецЕсли;
			
		
	КонецЕсли;
	
КонецПроцедуры //ПроверкаПоказаетелей

Функция ПроизвольноеНачислениеНеЗависитОтВремениИБазы(ВидРасчета) Экспорт
	
	НеЗависитОтВремениИБазы = Истина;
	
	ПоказателиВремениИБазы = Новый Массив();
	ПоказателиВремениИБазы.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВДнях);
	ПоказателиВремениИБазы.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВЧасах);
	ПоказателиВремениИБазы.Добавить(Справочники.ПоказателиСхемМотивации.НормаВремениВДнях);
	ПоказателиВремениИБазы.Добавить(Справочники.ПоказателиСхемМотивации.НормаВремениВЧасах);
	ПоказателиВремениИБазы.Добавить(Справочники.ПоказателиСхемМотивации.РасчетнаяБаза);
	
	Для Каждого ПоказательМотивации Из ВидРасчета.Показатели Цикл
		Если ПоказателиВремениИБазы.Найти(ПоказательМотивации.Показатель) <> Неопределено Тогда 
			НеЗависитОтВремениИБазы = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НеЗависитОтВремениИБазы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СТАЖЕМ

// проверка того, что способ расчета относится к расчетам от стажа по тарифным ставкам
Функция ЭтоРасчетОтСтажаПоТарифу(СпособРасчета) Экспорт
    Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке 
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке;
КонецФункции

// проверка того, что способ расчета относится к расчетам от стажа
Функция ЭтоРасчетОтСтажа(СпособРасчета) Экспорт
    Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке 
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом;
КонецФункции

// Функция выбирает стажи по физлицу из ТЧ "Стажи" справочника "Физические лица"
//
// Параметры
//  Физлицо		– СправочникСсылка.ФизическиеЛица – работник, которому вычисляется стаж
//  ДопУсловие	– Строка – строка дополнительного условия в запрос
//  ВидСтажа	– СправочникСсылка.ВидыСтажа - значение параметра для дополнительного условия
//
// Возвращаемое значение:
//   ВыборкаИзРезультатаЗапроса   – выборка со стажами работника
//
Функция ВыбратьСтажиРаботника(Физлицо, ДопУсловие = Неопределено, ВидСтажа = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 4
	|	ФизическиеЛицаСтажи.ВидСтажа,
	|	ФизическиеЛицаСтажи.ВидСтажа.Наименование КАК Наименование,
	|	ФизическиеЛицаСтажи.ДатаОтсчета,
	|	ФизическиеЛицаСтажи.РазмерМесяцев,
	|	ФизическиеЛицаСтажи.РазмерДней
	|ИЗ
	|	Справочник.ФизическиеЛица.Стажи КАК ФизическиеЛицаСтажи
	|ГДЕ
	|	ФизическиеЛицаСтажи.Ссылка = &Физлицо";
	
	Если ДопУсловие <> Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса + " " + ДопУсловие;
		
		Если ВидСтажа <> Неопределено Тогда
			
			Запрос.УстановитьПараметр("ВидСтажа", ВидСтажа);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	
	Возврат Запрос.Выполнить().Выбрать()
	
КонецФункции // ВыбратьСтажиРаботника()

// определяет начало непрерывного стажа физлица
//
// Параметры
//  ДатаНачала - Дата, дата на которую формируется стаж
//  Физлицо - Справочник.ФизическиеЛица, физ. лицо для которого определяется стаж
//  Организация - Справочник.Организации, организация, где работает физлицо.
//
// Возвращаемое значение:
//  дата - дата начала непрерывного стажа
//
Функция ПолучитьНачалоНепрерывногоСтажа(ДатаНачала, Физлицо, Организация) Экспорт

	ВыборкаПоСтажу = ВыбратьСтажиРаботника(Физлицо, "И ФизическиеЛицаСтажи.ВидСтажа = &ВидСтажа", Справочники.ВидыСтажа.НепрерывныйСтаж);
	Если ВыборкаПоСтажу.Следующий() Тогда
	
		ДатаНепрерывногоСтажа = ДобавитьМесяц(ВыборкаПоСтажу.ДатаОтсчета, - ВыборкаПоСтажу.РазмерМесяцев) - ВыборкаПоСтажу.РазмерДней*86400;
		
	Иначе // Непрерывный стаж не введен, для определения непрерывного стажа будем брать дату последнего приема на работу.
		
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РаботникиОрганизацийСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|		&ДатаАктуальности,
		|		Физлицо = &Физлицо
		|			И Организация = &ГоловнаяОрганизация
		|			И (Приказ.ВидЗанятости <> &ВнутреннееСовместительство
		|				ИЛИ Приказ.ВидЗанятости ЕСТЬ NULL )
		|			И ПричинаИзмененияСостояния = &Прием) КАК РаботникиОрганизацийСрезПоследних";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ДатаАктуальности",			ДатаНачала);
		Запрос.УстановитьПараметр("Физлицо",					Физлицо);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		Запрос.УстановитьПараметр("Прием",						Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
		Запрос.УстановитьПараметр("ВнутреннееСовместительство",	Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаНепрерывногоСтажа = Выборка.Период
		Иначе 
			ДатаНепрерывногоСтажа = Дата(1,1,1)
		КонецЕсли; 
		
	КонецЕсли; 
	
    Возврат ДатаНепрерывногоСтажа
	
КонецФункции // ПолучитьНепрерывныйСтаж()

// Формирует текст запроса для вычисления стажа физического лица в годах, месяцах и днях
// Параметры:
//  ИмяИсточника - строка, имя источника в запросе, откуда выбираем данные
//	ИмяПоляДатаАктуальности - строка, полное имя поля в запросе или имя параметра с датой, на которую считаем стаж
//	ИмяПоляДатаОтсчета - строка, имя поля в источнике соответствующее "Справочник.ФизическиеЛица.Стажи.ДатаОтсчета"
//	ИмяПоляРазмерМесяцев - строка, имя поля в источнике соответствующее "Справочник.ФизическиеЛица.Стажи.РазмерМесяцев"
//	ИмяПоляРазмерДней - строка, имя поля в источнике соответствующее "Справочник.ФизическиеЛица.Стажи.РазмерДней"
//	ПрефиксИмениПолей - строка - префикс, который добавлять к имени выходных полей
// 
// Возвращаемое значение:
//  Строка на языке запросов для расчета стажа с полями РазмерЛет, РазмерМесяцев, РазмерДней с указанным префиксом
//
Функция СформироватьТекстЗапросаОСтаже(ИмяИсточника, 
									   ИмяПоляДатаАктуальности,
									   Знач ИмяПоляДатаОтсчета = "ДатаОтсчета", 
									   ИмяПоляРазмерМесяцев = "РазмерМесяцев", 
									   ИмяПоляРазмерДней = "РазмерДней",
									   ПрефиксИмениПолей = "") Экспорт
	
	// Отступим назад от фактической даты отсчета на соответствующее число месяцев и дней.
	ИмяПоляДатаОтсчета = "ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(" + ИмяИсточника + "." + ИмяПоляДатаОтсчета + ", МЕСЯЦ, - " + ИмяИсточника + "." + ИмяПоляРазмерМесяцев + "), ДЕНЬ, - " + ИмяИсточника + "." + ИмяПоляРазмерДней + ")";
	
	// Поле с количеством лет стажа
	Текст = "
	|	ВЫБОР КОГДА " + ИмяПоляДатаОтсчета + " < " + ИмяПоляДатаАктуальности + " ТОГДА 
	|			ВЫБОР КОГДА МЕСЯЦ(" + ИмяПоляДатаОтсчета + ") * 100 + ДЕНЬ(" + ИмяПоляДатаОтсчета + ") > 
	|						МЕСЯЦ(" + ИмяПоляДатаАктуальности + ") * 100 + ДЕНЬ(" + ИмяПоляДатаАктуальности + ") ТОГДА
	|				  ГОД(" + ИмяПоляДатаАктуальности + ") - ГОД(" + ИмяПоляДатаОтсчета + ") - 1 
	|
	|				  ИНАЧЕ ГОД(" + ИмяПоляДатаАктуальности + ") - ГОД(" + ИмяПоляДатаОтсчета + ") 
	|			КОНЕЦ 
	|
	|		 ИНАЧЕ 0 
	|	КОНЕЦ ";
	
	Текст = Текст + " КАК " + ПрефиксИмениПолей + "РазмерЛет, ";
	
	// Выбор поля с количеством месяцев стажа
	Текст = Текст + "
	|	ВЫБОР КОГДА " + ИмяПоляДатаОтсчета + "< " + ИмяПоляДатаАктуальности + " ТОГДА 
	|			ВЫБОР КОГДА МЕСЯЦ(" + ИмяПоляДатаОтсчета + ") * 100 + ДЕНЬ(" + ИмяПоляДатаОтсчета + ") > 
	|						МЕСЯЦ(" + ИмяПоляДатаАктуальности + ") * 100 + ДЕНЬ(" + ИмяПоляДатаАктуальности +") ТОГДА
	|				  12 - (МЕСЯЦ(" + ИмяПоляДатаОтсчета + ") - МЕСЯЦ(" + ИмяПоляДатаАктуальности + ")) 
	|					
	|				  ИНАЧЕ МЕСЯЦ(" + ИмяПоляДатаАктуальности + ") - МЕСЯЦ(" + ИмяПоляДатаОтсчета + ") 
	|			КОНЕЦ 
	|
	|		  ИНАЧЕ 0 
	|	КОНЕЦ 
	| 
	|	- 
	|
	|  	ВЫБОР КОГДА ДЕНЬ(" + ИмяПоляДатаОтсчета + ") > ДЕНЬ(" + ИмяПоляДатаАктуальности + ") ТОГДА 1 
	|		  
	|		  ИНАЧЕ 0 
	|	КОНЕЦ";
	
	Текст = Текст + " КАК " + ПрефиксИмениПолей + "РазмерМесяцев, ";
	
	// Выбор поля с количеством дней стажа
	Текст = Текст + "
	|	ВЫБОР КОГДА " + ИмяПоляДатаОтсчета + " <= " + ИмяПоляДатаАктуальности + " ТОГДА 
	|			ВЫБОР КОГДА ДЕНЬ(" + ИмяПоляДатаОтсчета + ") > ДЕНЬ(" + ИмяПоляДатаАктуальности + ") ТОГДА 
	|					ВЫБОР КОГДА ДЕНЬ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(" + ИмяПоляДатаАктуальности + ", МЕСЯЦ), МЕСЯЦ, -1), МЕСЯЦ)) > ДЕНЬ(" + ИмяПоляДатаОтсчета + ") ТОГДА
	|				  		  ДЕНЬ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(" + ИмяПоляДатаАктуальности + ", МЕСЯЦ), МЕСЯЦ, -1), МЕСЯЦ)) 
	|		 		  		  - ДЕНЬ(" + ИмяПоляДатаОтсчета + ") + ДЕНЬ(" + ИмяПоляДатаАктуальности + ") + 1  
	|
	|						  ИНАЧЕ ДЕНЬ(" + ИмяПоляДатаАктуальности + ")
	|							
	|					КОНЕЦ
	|
	|				  ИНАЧЕ ДЕНЬ(" + ИмяПоляДатаАктуальности + ") - ДЕНЬ(" + ИмяПоляДатаОтсчета + ") + 1 
	|			КОНЕЦ 
	|		  
	|		  ИНАЧЕ 0 
	|	КОНЕЦ";

	Текст = Текст + " КАК " + ПрефиксИмениПолей + "РазмерДней ";
	
	Возврат Текст;
	
КонецФункции // СформироватьТекстЗапросаОСтаже()

////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ДОПОЛНИТЕЛЬНЫХ ДАННЫХ ПРИ ПРОВЕДЕНИИ ДОКУМЕНТОВ

// Функция строит текст запроса для определения структурной единиц, в котором числился работник по 
// основному месту работу на начало каждого указанного месяца либо на момент приема в середине месяца
// 
// Параметры:
//	ПериодыФизЛицаТекст - строка с подзапросом для выбора списка физлиц (должен содержать уникальные комбинации Период, ФизЛицо)
//	Организация - организация из шапки документа, для которой строить запрос
//	Запрос - объект Запрос, который будет использован для выборки (в него устаналиваются необходимые параметры)
//
// Возвращаемое значение:
//	Строка - текст запроса
//
Функция СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыСотрудникаТекст, Организация, Запрос, ПоФизЛицам = Ложь) Экспорт

	Запрос.УстановитьПараметр("прм_ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("прм_ОбособленноеПодразделение", Организация);
	
	Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	ПолеФизЛицоСотрудник = ?(ПоФизЛицам, "ФизЛицо", "Сотрудник");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПериодыФизЛица." + ПолеФизЛицоСотрудник + " КАК Сотрудник,
		|	ПериодыФизЛица.Период КАК Период,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА РаботникиОрганизации.Период <= НАЧАЛОПЕРИОДА(ПериодыФизЛица.Период, МЕСЯЦ)
		|				И НЕ РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|				ТОГДА РаботникиОрганизации.Период		
		|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|		КОНЕЦ) КАК ДатаНазначения,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|				ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
		|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|		КОНЕЦ) КАК ДатаПоследнегоУвольнения,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|					И НАЧАЛОПЕРИОДА(РаботникиОрганизации.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ПериодыФизЛица.Период, МЕСЯЦ)
		|				ТОГДА РаботникиОрганизации.Период
		|			ИНАЧЕ ДАТАВРЕМЯ(2999, 12, 31)
		|		КОНЕЦ) КАК ДатаПоследнегоПриема
		|ПОМЕСТИТЬ ВТ_Работники
		|ИЗ
		|	(" + ПериодыСотрудникаТекст + ") КАК ПериодыФизЛица
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|		ПО ПериодыФизЛица." + ПолеФизЛицоСотрудник + ?(ПоФизЛицам, "", ".ФизЛицо") + " = РаботникиОрганизации.Сотрудник.ФизЛицо
		|			И (РаботникиОрганизации.Период <= КОНЕЦПЕРИОДА(ПериодыФизЛица.Период, МЕСЯЦ))
		|			И (РаботникиОрганизации.Организация = &прм_ГоловнаяОрганизация)
		|			И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
		|	
		|СГРУППИРОВАТЬ ПО
		|	ПериодыФизЛица." + ПолеФизЛицоСотрудник + ",
		|	ПериодыФизЛица.Период
		|;
		|
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДатыПоследнихДоговоров.Сотрудник,
		|	ДатыПоследнихДоговоров.Период,
		|	ВЫБОР
		|		КОГДА ДатыПоследнихДоговоров.ДатаНачалаНаНачалоМесяца <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДатыПоследнихДоговоров.ДатаНачалаНаНачалоМесяца
		|		ИНАЧЕ ДатыПоследнихДоговоров.ПоследняяДатаНачала
		|	КОНЕЦ КАК ДатаНачала,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА ДатыПоследнихДоговоров.ДатаНачалаНаНачалоМесяца <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДоговорникиОрганизацииНаНачалоМесяца.ПодразделениеОрганизации
		|		ИНАЧЕ АктуальныеДоговорникиОрганизации.ПодразделениеОрганизации
		|	КОНЕЦ) КАК ПодразделениеОрганизации,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА ДатыПоследнихДоговоров.ДатаНачалаНаНачалоМесяца <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДоговорникиОрганизацииНаНачалоМесяца.ОбособленноеПодразделение
		|		ИНАЧЕ АктуальныеДоговорникиОрганизации.ОбособленноеПодразделение
		|	КОНЕЦ) КАК ОбособленноеПодразделение, 
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА ДатыПоследнихДоговоров.ДатаНачалаНаНачалоМесяца <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДоговорникиОрганизацииНаНачалоМесяца.ДатаОкончания
		|		ИНАЧЕ АктуальныеДоговорникиОрганизации.ДатаОкончания
		|	КОНЕЦ) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТ_ДоговорникиОрганизации 
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПериодыФизЛица." + ПолеФизЛицоСотрудник + " КАК Сотрудник,
		|		ПериодыФизЛица.Период,
		|		МАКСИМУМ(ВЫБОР
		|			КОГДА ДоговорникиОрганизации.ДатаНачала <= НАЧАЛОПЕРИОДА(ПериодыФизЛица.Период, МЕСЯЦ)
		|				ТОГДА ДоговорникиОрганизации.ДатаНачала
		|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|		КОНЕЦ) КАК ДатаНачалаНаНачалоМесяца,
		|		МАКСИМУМ(ДоговорникиОрганизации.ДатаНачала) КАК ПоследняяДатаНачала
		|	ИЗ
		|		(" + ПериодыСотрудникаТекст + ") КАК ПериодыФизЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоговорникиОрганизаций КАК ДоговорникиОрганизации
		|			ПО ПериодыФизЛица." + ПолеФизЛицоСотрудник + " = ДоговорникиОрганизации.Сотрудник" + ?(ПоФизЛицам, "." + ПолеФизЛицоСотрудник, "") + "
		|				И ДоговорникиОрганизации.Организация = &прм_ГоловнаяОрганизация
		|				И ДоговорникиОрганизации.ДатаНачала <= КОНЕЦПЕРИОДА(ПериодыФизЛица.Период, МЕСЯЦ)
		|	СГРУППИРОВАТЬ ПО
		|		ПериодыФизЛица." + ПолеФизЛицоСотрудник + ",
		|		ПериодыФизЛица.Период) КАК ДатыПоследнихДоговоров
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоговорникиОрганизаций КАК ДоговорникиОрганизацииНаНачалоМесяца
		|		ПО ДатыПоследнихДоговоров.Сотрудник = ДоговорникиОрганизацииНаНачалоМесяца.Сотрудник" + ?(ПоФизЛицам, "." + ПолеФизЛицоСотрудник, "") + "
		|			И ДатыПоследнихДоговоров.ДатаНачалаНаНачалоМесяца = ДоговорникиОрганизацииНаНачалоМесяца.ДатаНачала
		|			И ДоговорникиОрганизацииНаНачалоМесяца.Организация = &прм_ГоловнаяОрганизация
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоговорникиОрганизаций КАК АктуальныеДоговорникиОрганизации
		|		ПО ДатыПоследнихДоговоров.Сотрудник = АктуальныеДоговорникиОрганизации.Сотрудник" + ?(ПоФизЛицам, "." + ПолеФизЛицоСотрудник, "") + "
		|			И ДатыПоследнихДоговоров.ПоследняяДатаНачала = АктуальныеДоговорникиОрганизации.ДатаНачала
		|			И АктуальныеДоговорникиОрганизации.Организация = &прм_ГоловнаяОрганизация
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыПоследнихДоговоров.Сотрудник,
		|	ДатыПоследнихДоговоров.Период,
		|	ВЫБОР
		|		КОГДА ДатыПоследнихДоговоров.ДатаНачалаНаНачалоМесяца <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДатыПоследнихДоговоров.ДатаНачалаНаНачалоМесяца
		|		ИНАЧЕ ДатыПоследнихДоговоров.ПоследняяДатаНачала
		|	КОНЕЦ
		|";
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Работники.Сотрудник КАК " + ПолеФизЛицоСотрудник + ",
		|	Работники.Период,
		|	ВЫБОР
		|		// сотрудник не является работником и никогда им не был, проверим как договорника
		|		КОГДА Работники.ДатаНазначения = ДАТАВРЕМЯ(1, 1, 1) 
		|				И Работники.ДатаПоследнегоПриема = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(ДоговорникиОрганизации.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
		|						ТОГДА ДоговорникиОрганизации.ПодразделениеОрганизации
		|					ИНАЧЕ ДоговорникиОрганизации.ОбособленноеПодразделение
		|				  КОНЕЦ
		|                                      
		|		// уволили и как работника и как договорника до начала месяца, смотрим, в роли кого дольше работал
		|		КОГДА Работники.ДатаПоследнегоУвольнения <> ДАТАВРЕМЯ(1, 1, 1) 
		|				И Работники.ДатаПоследнегоПриема = ДАТАВРЕМЯ(2999, 12, 31)
		|				И ДоговорникиОрганизации.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
		|				И Работники.ДатаПоследнегоУвольнения <= НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)
		|			ТОГДА ВЫБОР
		|					КОГДА Работники.ДатаПоследнегоУвольнения < ДоговорникиОрганизации.ДатаОкончания // дольше числился как договорник
		|						ТОГДА ВЫБОР
		|								КОГДА ЕСТЬNULL(ДоговорникиОрганизации.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
		|									ТОГДА ДоговорникиОрганизации.ПодразделениеОрганизации
		|								ИНАЧЕ ДоговорникиОрганизации.ОбособленноеПодразделение
		|				  			  КОНЕЦ
		|					КОГДА ЕСТЬNULL(МестаРаботыНаНачалоМесяца.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
		|						ТОГДА МестаРаботыНаНачалоМесяца.ПодразделениеОрганизации
		|					ИНАЧЕ МестаРаботыНаНачалоМесяца.ОбособленноеПодразделение
		|				КОНЕЦ
		|
		|		// сначала был договорником, а потом стал работником в текущем месяце - берем как договорника
		|		КОГДА Работники.ДатаПоследнегоПриема <> ДАТАВРЕМЯ(1, 1, 1) 
		|				И Работники.ДатаНазначения = ДАТАВРЕМЯ(1, 1, 1)
		|				И ДоговорникиОрганизации.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
		|				И ДоговорникиОрганизации.ДатаНачала < Работники.ДатаПоследнегоПриема 
		|				И ДоговорникиОрганизации.ДатаОкончания > НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(ДоговорникиОрганизации.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
		|						ТОГДА ДоговорникиОрганизации.ПодразделениеОрганизации
		|					ИНАЧЕ ДоговорникиОрганизации.ОбособленноеПодразделение
		|				  КОНЕЦ
		|
		|		// и договорником и работником стал в текущем месяце - смотрим, кем стал раньше
		|		КОГДА ДоговорникиОрганизации.ДатаНачала >= НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)
		|				И Работники.ДатаПоследнегоПриема >= НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)
		|				И Работники.ДатаПоследнегоУвольнения < НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)
		|			ТОГДА ВЫБОР
		|					КОГДА ДоговорникиОрганизации.ДатаНачала < Работники.ДатаПоследнегоПриема
		|						ТОГДА ВЫБОР
		|								КОГДА ЕСТЬNULL(ДоговорникиОрганизации.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
		|									ТОГДА ДоговорникиОрганизации.ПодразделениеОрганизации
		|								ИНАЧЕ ДоговорникиОрганизации.ОбособленноеПодразделение
		|							КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ЕСТЬNULL(МестаРаботыНаНачалоМесяца.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
		|								ТОГДА МестаРаботыНаНачалоМесяца.ПодразделениеОрганизации
		|							ИНАЧЕ МестаРаботыНаНачалоМесяца.ОбособленноеПодразделение

		|						КОНЕЦ
		|				КОНЕЦ
		|
		|		// Принят как работник в середине месяца и либо вообще не уволен, 
		|		// либо уволен был до даты повторного приема и сейчас проводится документ именно по новому месту работы
		|		КОГДА Работники.ДатаПоследнегоПриема <> ДАТАВРЕМЯ(2999, 12, 31) // был прием в середине месяца
		|				И (Работники.ДатаПоследнегоУвольнения = ДАТАВРЕМЯ(1, 1, 1) // увольнения вообще не было 
		|					ИЛИ (Работники.ДатаПоследнегоУвольнения <> ДАТАВРЕМЯ(1, 1, 1) // было увольнение до даты повторного приема или в текущем месяце 
		|							И МестаРаботыПослеПриема.ОбособленноеПодразделение =  &прм_ОбособленноеПодразделение)) // и сейчас проводится документ именно по новому месту работы
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(МестаРаботыПослеПриема.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
		|						ТОГДА МестаРаботыПослеПриема.ПодразделениеОрганизации
		|					ИНАЧЕ МестаРаботыПослеПриема.ОбособленноеПодразделение
		|				  КОНЕЦ
		|
		|		// Ничего не происходило увольнения-приема в середине месяца не было - определяем структурную единицу на начало месяца
		|		// место работы работника имеет приоритет перед место работы договорника
		|		КОГДА ЕСТЬNULL(МестаРаботыНаНачалоМесяца.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
		|			ТОГДА МестаРаботыНаНачалоМесяца.ПодразделениеОрганизации
		|
		|		ИНАЧЕ МестаРаботыНаНачалоМесяца.ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		// сотрудник не является работником и никогда им не был, проверим как договорника
		|		КОГДА Работники.ДатаНазначения = ДАТАВРЕМЯ(1, 1, 1) 
		|				И Работники.ДатаПоследнегоПриема = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЕСТЬNULL(ДоговорникиОрганизации.ПодразделениеОрганизации, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
		|                                      
		|		// уволили и как работника и как договорника до начала месяца, смотрим, в роли кого дольше работал
		|		КОГДА Работники.ДатаПоследнегоУвольнения <> ДАТАВРЕМЯ(1, 1, 1) 
		|				И Работники.ДатаПоследнегоПриема = ДАТАВРЕМЯ(2999, 12, 31)
		|				И ДоговорникиОрганизации.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
		|				И Работники.ДатаПоследнегоУвольнения <= НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)
		|			ТОГДА ВЫБОР
		|					КОГДА Работники.ДатаПоследнегоУвольнения < ДоговорникиОрганизации.ДатаОкончания // дольше числился как договорник
		|						ТОГДА ЕСТЬNULL(ДоговорникиОрганизации.ПодразделениеОрганизации, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
		|					ИНАЧЕ ЕСТЬNULL(МестаРаботыНаНачалоМесяца.ПодразделениеОрганизации, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
		|				КОНЕЦ
		|
		|		// сначала был договорником, а потом стал работником в текущем месяце - берем как договорника
		|		КОГДА Работники.ДатаПоследнегоПриема <> ДАТАВРЕМЯ(1, 1, 1) 
		|				И Работники.ДатаНазначения = ДАТАВРЕМЯ(1, 1, 1)
		|				И ДоговорникиОрганизации.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
		|				И ДоговорникиОрганизации.ДатаНачала < Работники.ДатаПоследнегоПриема 
		|				И ДоговорникиОрганизации.ДатаОкончания > НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)
		|			ТОГДА ЕСТЬNULL(ДоговорникиОрганизации.ПодразделениеОрганизации, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
		|
		|		// и договорником и работником стал в текущем месяце - смотрим, кем стал раньше
		|		КОГДА ДоговорникиОрганизации.ДатаНачала >= НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)
		|				И Работники.ДатаПоследнегоПриема >= НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)
		|				И Работники.ДатаПоследнегоУвольнения < НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)
		|			ТОГДА ВЫБОР
		|					КОГДА ДоговорникиОрганизации.ДатаНачала < Работники.ДатаПоследнегоПриема
		|						ТОГДА ЕСТЬNULL(ДоговорникиОрганизации.ПодразделениеОрганизации, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
		|					ИНАЧЕ ЕСТЬNULL(МестаРаботыНаНачалоМесяца.ПодразделениеОрганизации, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
		|				КОНЕЦ
		|
		|		// Принят как работник в середине месяца и либо вообще не уволен, 
		|		// либо уволен был до даты повторного приема и сейчас проводится документ именно по новому месту работы
		|		КОГДА Работники.ДатаПоследнегоПриема <> ДАТАВРЕМЯ(2999, 12, 31) // был прием в середине месяца
		|				И (Работники.ДатаПоследнегоУвольнения = ДАТАВРЕМЯ(1, 1, 1) // увольнения вообще не было 
		|					ИЛИ (Работники.ДатаПоследнегоУвольнения <> ДАТАВРЕМЯ(1, 1, 1) // было увольнение до даты повторного приема или в текущем месяце 
		|							И МестаРаботыПослеПриема.ОбособленноеПодразделение =  &прм_ОбособленноеПодразделение)) // и сейчас проводится документ именно по новому месту работы
		|			ТОГДА ЕСТЬNULL(МестаРаботыПослеПриема.ПодразделениеОрганизации, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
		|
		|		// Ничего не происходило увольнения-приема в середине месяца не было - определяем структурную единицу на начало месяца
		|		// место работы работника имеет приоритет перед место работы договорника
		|		ИНАЧЕ ЕСТЬNULL(МестаРаботыНаНачалоМесяца.ПодразделениеОрганизации, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
		|	КОНЕЦ КАК ПодразделениеОрганизации
		|ИЗ
		|	ВТ_Работники КАК Работники
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК МестаРаботыНаНачалоМесяца
		|		ПО Работники.Сотрудник" + ?(ПоФизЛицам, "", ".ФизЛицо") + " = МестаРаботыНаНачалоМесяца.Сотрудник.ФизЛицо
		|			И МестаРаботыНаНачалоМесяца.Организация = &прм_ГоловнаяОрганизация
		|			И Работники.ДатаНазначения = ВЫБОР
		|											КОГДА МестаРаботыНаНачалоМесяца.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|												ТОГДА ДОБАВИТЬКДАТЕ(МестаРаботыНаНачалоМесяца.Период, ДЕНЬ, -1)
		|											ИНАЧЕ МестаРаботыНаНачалоМесяца.Период
		|										 КОНЕЦ
		|			И НЕ МестаРаботыНаНачалоМесяца.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)							
		|			И МестаРаботыНаНачалоМесяца.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК МестаРаботыПослеПриема
		|			ПО Работники.Сотрудник" + ?(ПоФизЛицам, "", ".ФизЛицо") + " = МестаРаботыПослеПриема.Сотрудник.ФизЛицо
		|				И МестаРаботыПослеПриема.Организация = &прм_ГоловнаяОрганизация
		|				И Работники.ДатаПоследнегоПриема = МестаРаботыПослеПриема.Период
		|				И МестаРаботыПослеПриема.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|				И МестаРаботыПослеПриема.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоговорникиОрганизации КАК ДоговорникиОрганизации
		|			ПО Работники.Сотрудник = ДоговорникиОрганизации.Сотрудник
		|				И Работники.Период = ДоговорникиОрганизации.Период
		|";

	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаСтруктурныеЕдиницы()

// Функция строит текст запроса для определения признаков исчисления ОППВ по работникам, 
// признак получаем по периодам, переданным из документа
// 
// Параметры:
//	ПериодыФизЛицаТекст - строка с с именем временной таблицы (таблица должна содержать уникальные комбинации ДатаНачисления, Сотрудник)
//	Организация - организация из шапки документа, для которой строить запрос
//	Запрос - объект Запрос, который будет использован для выборки (в него устаналиваются необходимые параметры)
//
// Возвращаемое значение:
//	Строка - имя временной таблицы
//
Функция СформироватьТекстЗапросаПериодыИсчисленияОППВ(ПериодыНачисленийТекст, Организация, Запрос) Экспорт 
	
	Запрос.УстановитьПараметр("прм_ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	
    Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПериодыНачислений.Сотрудник КАК Сотрудник,
		|	ПериодыНачислений.ПериодНачисления КАК ПериодНачисления,
		|	МАКСИМУМ(РаботникиОрганизаций.Период) КАК ПериодРаботника
		|ПОМЕСТИТЬ ВТ_ПериодыРаботников
		|ИЗ
		|	" + ПериодыНачисленийТекст + " КАК ПериодыНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО ПериодыНачислений.Сотрудник = РаботникиОрганизаций.Сотрудник
		|			И ПериодыНачислений.ПериодНачисления >= РаботникиОрганизаций.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыНачислений.Сотрудник,
		|	ПериодыНачислений.ПериодНачисления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ПериодРаботника
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПериодыРаботников.Сотрудник КАК Сотрудник,
		|	ПериодыРаботников.ПериодНачисления КАК ПериодНачисления,
		|	ЕСТЬNULL(РаботникиОрганизаций.ИсчислятьОППВ, ЛОЖЬ) КАК ИсчислятьОППВ
		|ПОМЕСТИТЬ ВТ_ПериодыИсчисленияОППВ
		|ИЗ
		|	ВТ_ПериодыРаботников КАК ПериодыРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО ПериодыРаботников.Сотрудник = РаботникиОрганизаций.Сотрудник
		|			И ПериодыРаботников.ПериодРаботника = РаботникиОрганизаций.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ПериодНачисления";
		
	Запрос.Выполнить();
	
	Возврат "ВТ_ПериодыИсчисленияОППВ";
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// КОММЕНТАРИИ РАСЧЕТОВ

// Формирует текстовую интерпретацию формулы по способу расчета и показателям для отображения
// на экране.
//
// Параметры
//  Объект - ПланВидовРасчетаОбъект для ПВР УправленческиеНачисления или УправленческиеУдержания
//	Режим - "Текст" - форумал выводится в виде текста, "HTML" - в виде HTML кода, по умолчанию = "Текст"
// Возвращаемое значение:
//   Строка   – содержит текстовую интерпретацию формулы расчета.
//
Функция ВизуализироватьФормулуРасчета(Объект, Режим = "Текст", ВычитатьИзБазыИПН = Ложь, ВычитатьИзБазыОПВ = Ложь, ВычитатьИзБазыВОСМС = Ложь) Экспорт

	СпособРасчета = Объект.СпособРасчета;
	
	Если Режим = "HTML" Тогда
		
		СтрокаФормулы ="
		|	<HTML><HEAD>
		|	</HEAD>
		|	<BODY vlink=#000 link=#000 scroll=auto rightMargin=0><FONT face=""MS Sans Serif"" size=1>
		|";
		
	КонецЕсли;
    
	Если  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой
	  Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой
	  Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммойДляПочасовогоОтклонения 
	  Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Фиксированная сумма</FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>, до удержания указанной в документе суммы";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Фиксированная сумма</FONT>, до удержания указанной в документе суммы"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Сдельная выработка>";		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Сдельная выработка</FONT>"			
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма
		Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<0>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = 0"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка> * <Отработанное время в днях>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Тарифная ставка</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Отработанное время в днях</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка> * <Отработанное время в часах>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Тарифная ставка</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Отработанное время в часах</FONT>"						
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка> * <Время в часах>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Тарифная ставка</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Время в часах</FONT>"						
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент оплаты> * <Расчетная база>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Процент оплаты</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Расчетная база</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент сбора> * <Сумма по исполнительному листу>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Процент сбора</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Сумма по исполнительному листу</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Тогда
		Если Режим = "Текст" Тогда
			Если Не ВычитатьИзБазыИПН И Не ВычитатьИзБазыОПВ И Не ВычитатьИзБазыВОСМС Тогда
				СтрокаФормулы = "<Процент удержаний> * <Расчетная база>"		
			Иначе
				СтрокаФормулы = "<Процент удержаний> * (<Расчетная база>";
				Если ВычитатьИзБазыИПН Тогда
					СтрокаФормулы = СтрокаФормулы + " - <Исчисленный ИПН>";
				КонецЕсли;
				Если ВычитатьИзБазыОПВ Тогда
					СтрокаФормулы = СтрокаФормулы + " - <Исчисленные ОПВ>";
				КонецЕсли;
				Если ВычитатьИзБазыВОСМС Тогда
					СтрокаФормулы = СтрокаФормулы + " - <Исчисленные взносы ОСМС>";
				КонецЕсли;
				СтрокаФормулы = СтрокаФормулы + ")";
			КонецЕсли;
		Иначе
			Если Не ВычитатьИзБазыИПН И Не ВычитатьИзБазыОПВ И Не ВычитатьИзБазыВОСМС Тогда
				СтрокаФормулы = СтрокаФормулы + "
								|Результат = <FONT color=#0000ff>Процент удержаний</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Расчетная база</FONT>"			
			Иначе
				СтрокаФормулы = СтрокаФормулы + "
								|Результат = <FONT color=#0000ff>Процент удержаний</FONT> <FONT color=#FF0000>* (</FONT><FONT color=#0000ff>Расчетная база</FONT>";
				Если ВычитатьИзБазыИПН Тогда
					СтрокаФормулы = СтрокаФормулы + " <FONT color=#FF0000>-</FONT> <FONT color=#0000ff>Исчисленный ИПН</FONT>";
				КонецЕсли;
				Если ВычитатьИзБазыОПВ Тогда
					СтрокаФормулы = СтрокаФормулы + " <FONT color=#FF0000>-</FONT> <FONT color=#0000ff>Исчисленные ОПВ</FONT>";
				КонецЕсли;
				Если ВычитатьИзБазыВОСМС Тогда
					СтрокаФормулы = СтрокаФормулы + " <FONT color=#FF0000>-</FONT> <FONT color=#0000ff>Исчисленные взносы ОСМС</FONT>";
				КонецЕсли;
				СтрокаФормулы = СтрокаФормулы + "<color=#FF0000>)</FONT>"			
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Тогда  
		Если Режим = "Текст" Тогда
			Если Не ВычитатьИзБазыИПН И Не ВычитатьИзБазыОПВ И Не ВычитатьИзБазыВОСМС Тогда
				СтрокаФормулы = "<Процент удержаний> * <Расчетная база>"		
			Иначе
				СтрокаФормулы = "<Процент удержаний> * (<Расчетная база>";
				Если ВычитатьИзБазыИПН Тогда
					СтрокаФормулы = СтрокаФормулы + " - <Исчисленный ИПН>";
				КонецЕсли;
				Если ВычитатьИзБазыОПВ Тогда
					СтрокаФормулы = СтрокаФормулы + " - <Исчисленные ОПВ>";
				КонецЕсли;
				Если ВычитатьИзБазыВОСМС Тогда
					СтрокаФормулы = СтрокаФормулы + " - <Исчисленные взносы ОСМС>";
				КонецЕсли;
				СтрокаФормулы = СтрокаФормулы + ")";
			КонецЕсли;
			СтрокаФормулы = СтрокаФормулы + ", до удержания указанной в документе суммы";
		Иначе
			Если Не ВычитатьИзБазыИПН И Не ВычитатьИзБазыОПВ И Не ВычитатьИзБазыВОСМС Тогда
				СтрокаФормулы = СтрокаФормулы + "
								|Результат = <FONT color=#0000ff>Процент удержаний</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Расчетная база</FONT>, до удержания указанной в документе суммы"			
			Иначе
				СтрокаФормулы = СтрокаФормулы + "
								|Результат = <FONT color=#0000ff>Процент удержаний</FONT> <FONT color=#FF0000>* (</FONT><FONT color=#0000ff>Расчетная база</FONT>";
				Если ВычитатьИзБазыИПН Тогда
					СтрокаФормулы = СтрокаФормулы + " <FONT color=#FF0000>-</FONT> <FONT color=#0000ff>Исчисленный ИПН</FONT>";
				КонецЕсли;
				Если ВычитатьИзБазыОПВ Тогда
					СтрокаФормулы = СтрокаФормулы + " <FONT color=#FF0000>-</FONT> <FONT color=#0000ff>Исчисленные ОПВ</FONT>";
				КонецЕсли;
				Если ВычитатьИзБазыВОСМС Тогда
					СтрокаФормулы = СтрокаФормулы + " <FONT color=#FF0000>-</FONT> <FONT color=#0000ff>Исчисленные взносы ОСМС</FONT>";
				КонецЕсли;
				СтрокаФормулы = СтрокаФормулы + "<FONT color=#FF0000>)</FONT>, до удержания указанной в документе суммы"			
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Часовая тарифная ставка> * <Ночное время в часах>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Часовая тарифная ставка</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Процент доплаты</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Ночное время в часах</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Часовая тарифная ставка> * <Время в часах>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Часовая тарифная ставка</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Процент доплаты</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Время в часах</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку 
		Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных 
		Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда		
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Средний дневной (часовой) заработок> * <Время в днях (часах)>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Средний дневной (часовой) заработок</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Время в днях (часах)</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения Тогда		
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Средний часовой заработок> * <Время в часах>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Средний часовой заработок</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Время в часах</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка (оклад)> / <Норма времени за месяц в днях> * <Отработанное время в днях>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Тарифная ставка (оклад)</FONT> <FONT color=#FF0000>/</FONT> <FONT color=#0000ff>Норма времени за месяц в днях</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Отработанное время в днях</FONT>"			
		КонецЕсли;			
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка (оклад)> / <Норма времени за месяц в часах> * <Отработанное время в часах>"								
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Тарифная ставка (оклад)</FONT> <FONT color=#FF0000>/</FONT> <FONT color=#0000ff>Норма времени за месяц в часах</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Отработанное время в часах</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тарифная ставка (оклад)> / <Норма времени за месяц в часах> * <Время в часах>"								
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Тарифная ставка (оклад)</FONT> <FONT color=#FF0000>/</FONT> <FONT color=#0000ff>Норма времени за месяц в часах</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Время в часах</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Коэффициент> * <Месячный расчетный показатель>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Коэффициент</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Месячный расчетный показатель</FONT>"			
		КонецЕсли;			
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Коэффициент> * <Месячный расчетный показатель> / <Норма времени за месяц в днях> * <Отработанное время в днях>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Коэффициент</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Месячный расчетный показатель</FONT> <FONT color=#FF0000>/</FONT> <FONT color=#0000ff>Норма времени за месяц в днях</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Отработанное время в днях</FONT>"			
		КонецЕсли;			
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Коэффициент> * <Месячный расчетный показатель> / <Норма времени за месяц в часах> * <Отработанное время в часах>"								
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Коэффициент</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Месячный расчетный показатель</FONT> <FONT color=#FF0000>/</FONT> <FONT color=#0000ff>Норма времени за месяц в часах</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Отработанное время в часах</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Коэффициент> * <Минимальная заработная плата>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Коэффициент</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Минимальная заработная плата</FONT>"			
		КонецЕсли;			
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Коэффициент> * <Минимальная заработная плата> / <Норма времени за месяц в днях> * <Отработанное время в днях>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Коэффициент</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Минимальная заработная плата</FONT> <FONT color=#FF0000>/</FONT> <FONT color=#0000ff>Норма времени за месяц в днях</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Отработанное время в днях</FONT>"			
		КонецЕсли;			
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Коэффициент> * <Минимальная заработная плата> / <Норма времени за месяц в часах> * <Отработанное время в часах>"								
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Коэффициент</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Минимальная заработная плата</FONT> <FONT color=#FF0000>/</FONT> <FONT color=#0000ff>Норма времени за месяц в часах</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Отработанное время в часах</FONT>"			
		КонецЕсли;		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала дневной тарифной ставки> * <Отработанное время в днях>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Стаж</FONT> оценить по <FONT color=#0000ff>Шкала дневной тарифной ставки</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Отработанное время в днях</FONT>"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала месячной тарифной ставки>  / <Норма времени за месяц в днях> * <Отработанное время в днях>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Стаж</FONT> оценить по <FONT color=#0000ff>Шкала месячной тарифной ставки</FONT> <FONT color=#FF0000>/</FONT> <FONT color=#0000ff>Норма времени за месяц в днях</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Отработанное время в днях</FONT>"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала часовой тарифной ставки> * <Отработанное время в часах>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Стаж</FONT> оценить по <FONT color=#0000ff>Шкала часовой тарифной ставки</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Отработанное время в часах</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала месячной тарифной ставки>  / <Норма времени за месяц в часах> * <Отработанное время в часах>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Стаж</FONT> оценить по <FONT color=#0000ff>Шкала месячной тарифной ставки</FONT> <FONT color=#FF0000>/</FONT> <FONT color=#0000ff>Норма времени за месяц в часах</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Отработанное время в часах</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала процентов оплаты> * <Расчетная база>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Стаж</FONT> оценить по <FONT color=#0000ff>Шкала процентов оплаты</FONT> <FONT color=#FF0000>*</FONT> <FONT color=#0000ff>Расчетная база</FONT>"			
		КонецЕсли;						
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "Максимум(<Средний заработок> - <Начислено>, <0>)";		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Максимум</FONT><FONT color=#FF0000>(</FONT><FONT color=#0000ff>Средний заработок</FONT> <FONT color=#FF0000>-</FONT> <FONT color=#0000ff>Начислено</FONT><FONT color=#FF0000>,</FONT> 0<FONT color=#FF0000>)</FONT>"		
		КонецЕсли;
	ИначеЕсли Объект.ПроизвольнаяФормулаРасчета Тогда
				ФормулаРасчета	= Объект.ФормулаРасчетаПредставление;
		
		ФормулаРасчета	= СтрЗаменить(ФормулаРасчета, "ПроведениеРасчетов.", "");
		
		СимволыДляЗамены = "/=-+*()?<,";
		
		Если Режим = "Текст" Тогда
			
			// заменим подставим вместо ИсходныеДанные.ПоказательN нужные показатели
			СтрокаФормулы = ПроведениеРасчетов.ПолучитьHTLMКодФормулыРасчета(ФормулаРасчета, Объект.Показатели, Режим);
			
		Иначе
			
			НоваяФормулаРасчета = "";
			Для НомерСимвола = 1 По СтрДлина(ФормулаРасчета) Цикл
				Символ = Сред(ФормулаРасчета,НомерСимвола,1);
				Если Найти(СимволыДляЗамены,Символ) > 0 Тогда
					НоваяФормулаРасчета = НоваяФормулаРасчета + "<FONT color=#FF0000>" + Символ + "</FONT>"; 
				Иначе
					НоваяФормулаРасчета = НоваяФормулаРасчета + Символ;
				КонецЕсли;
			КонецЦикла;	
			
			ФормулаРасчета = НоваяФормулаРасчета;
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " NOT ", "<FONT color=#FF0000> NOT </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " OR ", "<FONT color=#FF0000> OR </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " AND ", "<FONT color=#FF0000> AND </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " И ", "<FONT color=#FF0000> И </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " ИЛИ ", "<FONT color=#FF0000> ИЛИ </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " НЕ ", "<FONT color=#FF0000> НЕ </FONT>"); 
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " not ", "<FONT color=#FF0000> not </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " or ", "<FONT color=#FF0000> or </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " and ", "<FONT color=#FF0000> and </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " и ", "<FONT color=#FF0000> и </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " или ", "<FONT color=#FF0000> или </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " не ", "<FONT color=#FF0000> не </FONT>");
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Not ", "<FONT color=#FF0000> Not </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Or ", "<FONT color=#FF0000> Or </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " And ", "<FONT color=#FF0000> And </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Или ", "<FONT color=#FF0000> Или </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Не ", "<FONT color=#FF0000> Не </FONT>");		
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Цел", "<FONT color=#0000ff>Цел</FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Окр", "<FONT color=#0000ff>Окр</FONT>");
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Макс", "<FONT color=#0000ff>Макс</FONT>");
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Мин", "<FONT color=#0000ff>Мин</FONT>");
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "ОценитьПо", "<FONT color=#0000ff>ОценитьПо</FONT>");		
			
			СтрокаФормулы = СтрокаФормулы + "Результат = " +  ПроведениеРасчетов.ПолучитьHTLMКодФормулыРасчета(ФормулаРасчета, Объект.Показатели, Режим);
			
		КонецЕсли;
											
	Иначе
		СтрокаФормулы = ""	
	КонецЕсли;
	
	Если Режим = "HTML" Тогда
		СтрокаФормулы = СтрокаФормулы + "
		|</font></html>"
	КонецЕсли;

	
    Возврат СтрокаФормулы;
	
КонецФункции // ВизуализироватьФормулуРасчета()

////////////////////////////////////////////////////////////////////////////////
// ФОРМУЛЬНЫЕ РАСЧЕТЫ

// Функция извлекает из участка формулы, где размещен вызов ОценитьПо(),
// текст первого параметра для дальнейшей обработки
//
Функция ПараметрФункцииОценитьПо(УчастокФормулыРасчета)
	
	ПараметрФункцииОценитьПо = "";
	
	НачалоОценитьПо = Найти(ВРег(УчастокФормулыРасчета), "ОЦЕНИТЬПО");
	
	// выбираем посимвольно строку после открывающейся скобки и до запятой (разделителя параметров)
	СимволНачалаПараметра = "(";
	СимволОкончанияПараметра = ",";
	
	СобиратьСимволы = Ложь;
	
	Для НомерСимвола = НачалоОценитьПо По СтрДлина(УчастокФормулыРасчета) Цикл
		Символ = Сред(УчастокФормулыРасчета, НомерСимвола, 1);
		Если СобиратьСимволы Тогда
			Если Символ = СимволОкончанияПараметра Тогда
				СобиратьСимволы = Ложь;
				Прервать;
			КонецЕсли;
			ПараметрФункцииОценитьПо = ПараметрФункцииОценитьПо + Символ;
		Иначе
			Если Символ = СимволНачалаПараметра Тогда
				СобиратьСимволы = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрФункцииОценитьПо;
	
КонецФункции // ПараметрФункцииОценитьПо

Функция ПолучитьТекстОценитьПо(ПараметрФункцииОценитьПо, Шкала, ПустаяШкала = Ложь)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СоставШкалОценкиПоказателейРасчета.ЗначениеС, 0) КАК ЗначениеС,
	|	ЕСТЬNULL(СоставШкалОценкиПоказателейРасчета.ЗначениеПо, 0) КАК ЗначениеПо,
	|	СоставШкалОценкиПоказателейРасчета.Размер
	|ИЗ
	|	РегистрСведений.СоставШкалОценкиПоказателейРасчета КАК СоставШкалОценкиПоказателейРасчета
	|ГДЕ
	|	СоставШкалОценкиПоказателейРасчета.ШкалаОценкиПоказателя = &ШкалаОценкиПоказателя
	|
	|УПОРЯДОЧИТЬ ПО
	|	СоставШкалОценкиПоказателейРасчета.НомерСтрокиШкалы";
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ШкалаОценкиПоказателя", Шкала);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Текст = "";
	
	Если Выборка.Количество() = 0 Тогда
		ПустаяШкала = Истина;
		Возврат Текст;
	КонецЕсли;
	
	ПроцентнаяШкала = Шкала.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная;
	
	КоличествоОткрытыхСкобок = 0;
	Пока Выборка.Следующий() Цикл
		
		Если КоличествоОткрытыхСкобок > 0 Тогда
			Текст = Текст + " , ";
		КонецЕсли;
		Текст = Текст + "?(" + ПараметрФункцииОценитьПо+ " >" + Формат(Выборка.ЗначениеС,"ЧРД=.; ЧН=0; ЧГ=0") + " И " + ПараметрФункцииОценитьПо + " <="  + Формат(Выборка.ЗначениеПо,"ЧРД=.; ЧН=0; ЧГ=0") + " ," + Формат(Выборка.Размер / ?(ПроцентнаяШкала, 100, 1),"ЧРД=.; ЧН=0; ЧГ=0");
		КоличествоОткрытыхСкобок = КоличествоОткрытыхСкобок + 1;
		
	КонецЦикла;
	
	КоличествоОткрытыхСкобок = КоличествоОткрытыхСкобок - 1;
	Если КоличествоОткрытыхСкобок >= 0 И Текст <> "" Тогда
		Текст = Текст + ", 0";
	КонецЕсли;
	Пока КоличествоОткрытыхСкобок > 0 Цикл
		Текст = Текст + ")";
		КоличествоОткрытыхСкобок = КоличествоОткрытыхСкобок - 1;
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции //ПолучитьТекстОценитьПо

Процедура СообщитьОбОшибке(ОбработкаКомментариев, ТекстСообщения, Отказ)
	
	Если ТипЗнч(ОбработкаКомментариев) = Тип("ОбработкаОбъект.СообщенияВыполняемыхДействий") Тогда
		Отказ = Истина;
		ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения, Перечисления.ВидыСообщений.Ошибка);
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверкаИФормированиеФормулыРасчета(Отказ, Показатели, МассивРазделителей, ОператорыИФункцииОднойСтрокой, ОператорыИФункции, мПеременные, ОбработкаКомментариев, ТекстФормулы, мФормулаРасчета, мФормулаРасчетаПредставление) Экспорт
	
	Если Найти(ТекстФормулы, ";") <> 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В формуле не допустимо использование символа "";""", Отказ);
		Отказ = Истина;
	КонецЕсли;
	
	Показатели.Очистить();
	
	// установим начальные значения
	НовыйТекст								= "";
	ДлинаСтроки								= СтрДлина(ТекстФормулы);
	ДлинаСтрокиБезПробелов					= СтрДлина(СокрП(ТекстФормулы));
	Слово									= "";
	СловоСобрано							= Ложь;
	КоличествоПоказателей					= 0;
	КоличествоНеПредопределенныхПоказателей	= 0;
	мФормулаРасчета							= "";
	мФормулаРасчетаПредставление			= "";
	
	// переменные для проверки правельности ввода показателей
	БылоОценитьПО			= Ложь;
	БылоОценитьПОВЦикле		= Ложь;
	ОткрытыхСкобок			= 0;
	ЗакрытыхСкобок			= 0;
	КонечествоПарамОценитьПО= 0;
	ПервыйСимвОценитьПО		= 1;
	ПоследийСимвОценитьПО	= 1;
	НомерНеШкальногоПоказателя= 0;
	НеШкальныеПоказатели	= Новый СписокЗначений;
	
	СсылкаПоказатели		= Неопределено;
	
	// разбор слов
	Для НомерАнализируемогоСимвола = 1 По ДлинаСтроки Цикл
		
		Символ = Сред(ТекстФормулы, НомерАнализируемогоСимвола, 1);
		
		Если  МассивРазделителей.Найти(Символ) <> Неопределено Или Найти(ОператорыИФункцииОднойСтрокой, Символ) Тогда
			
			СловоСобрано = Истина;
		Иначе
			
			// символ не разделитель, можно его добавить к слову
			Слово = Слово + Символ;
			Если ДлинаСтроки = НомерАнализируемогоСимвола Тогда 
				СловоСобрано = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СловоСобрано Тогда
			
			НомерПоказателя = 0;
			СловоВРег = ВРег(СокрЛ(Слово));
			Если Найти(ОператорыИФункции, СловоВРег) <> 0 Или ЭтоЧисло(Слово) Тогда
				
				Если СловоВРег = "ОЦЕНИТЬПО" Тогда
					Слово					= "ОценитьПо";
					БылоОценитьПО			= Истина;
					БылоОценитьПОВЦикле		= Истина;
					ПервыйСимвОценитьПО		= СтрДлина(НовыйТекст);
					ПервыйСимвОценитьПОФорм	= СтрДлина(мФормулаРасчета);
				КонецЕсли;
				
				// функции и числа записываем 
				НовыйТекст = НовыйТекст + Слово;
				мФормулаРасчета					= мФормулаРасчета + Слово;
				мФормулаРасчетаПредставление	= мФормулаРасчетаПредставление + Слово;
				
				
			ИначеЕсли мПеременные.Получить(Слово) <> Неопределено Тогда
				
				СсылкаПоказатели = Справочники.ПоказателиСхемМотивации.НайтиПоРеквизиту("Идентификатор",Слово);
				Если СсылкаПоказатели = Справочники.ПоказателиСхемМотивации.ПустаяСсылка() Тогда
					СообщитьОбОшибке(ОбработкаКомментариев, "Не найден показатель с идентификатором """ + Слово+ """", Отказ);
					Прервать;
				КонецЕсли;
				
				// в идентификаторы показателей подставляем случайные числа, чтобы Вычислить() не упала при делении на нули
				// или при операциях с разными типами данных 				
				НовыйТекст				= НовыйТекст + СтрЗаменить(Строка(мПеременные.Получить(Слово)),",",".");
				
				Если СсылкаПоказатели.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная И СсылкаПоказатели.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая Тогда
					НеШкальныйПоказательСсылка = НеШкальныеПоказатели.НайтиПоЗначению(СсылкаПоказатели);
					Если НеШкальныйПоказательСсылка = Неопределено Тогда
						НеШкальныеПоказатели.Добавить(СсылкаПоказатели);
						НомерНеШкальногоПоказателя = НеШкальныеПоказатели.Количество();
					Иначе
						НомерНеШкальногоПоказателя = Число(НеШкальныеПоказатели.Индекс(НеШкальныйПоказательСсылка) + 1);
					КонецЕсли;
					
				КонецЕсли;
				
				ПоказательИзСписка = Показатели.НайтиПоЗначению(СсылкаПоказатели);
				Если ПоказательИзСписка = Неопределено Тогда
					КоличествоПоказателей	= КоличествоПоказателей + 1;	
					Показатели.Добавить(СсылкаПоказатели);
					мФормулаРасчета					= мФормулаРасчета + "ИсходныеДанные.Показатель"+КоличествоПоказателей;
					мФормулаРасчетаПредставление	= мФормулаРасчетаПредставление + "ИсходныеДанные.Показатель"+КоличествоПоказателей;
					
					Если Не СсылкаПоказатели.Предопределенный
						И (СсылкаПоказатели <> Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная и 
						СсылкаПоказатели <> Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая И СсылкаПоказатели <> Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная) Тогда
						КоличествоНеПредопределенныхПоказателей = КоличествоНеПредопределенныхПоказателей + 1;
					КонецЕсли;
					
				Иначе
					НомерП = Число(Показатели.Индекс(ПоказательИзСписка) + 1);
					мФормулаРасчета					= мФормулаРасчета + "ИсходныеДанные.Показатель"+НомерП;
					мФормулаРасчетаПредставление	= мФормулаРасчетаПредставление + "ИсходныеДанные.Показатель"+НомерП;
				КонецЕсли;
				
				НомерПоказателя			= КоличествоПоказателей;
				
				// проверим правильность ввода показателей
				Если КоличествоНеПредопределенныхПоказателей > 6 Тогда
					СообщитьОбОшибке(ОбработкаКомментариев, "Количество не предопределенных показателей не может быть больше 6!", Отказ);
					Прервать;
				КонецЕсли;
				
			Иначе
				// а это уже что-то непонятное, такие вещи вводить мы не договаривались ...
				СообщитьОбОшибке(ОбработкаКомментариев, "Неопознанный показатель, оператор или функция: """ + Слово+ """", Отказ);
				Прервать;
			КонецЕсли;
			
			Если МассивРазделителей.Найти(Символ) <> Неопределено или  Найти(ОператорыИФункцииОднойСтрокой, Символ) <> 0 Тогда	
				
				Если БылоОценитьПОВЦикле Тогда
					Если Символ = "(" Тогда
						ОткрытыхСкобок = ОткрытыхСкобок + 1;
					ИначеЕсли Символ = ")" Тогда
						ЗакрытыхСкобок = ЗакрытыхСкобок + 1;
						Если ЗакрытыхСкобок = ОткрытыхСкобок Тогда			// Проверим, является ли показатель шкалой
							ПоследийСимвОценитьПО = НомерАнализируемогоСимвола+19;
							Если СсылкаПоказатели <> Неопределено Тогда
								Если СсылкаПоказатели.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная И
									СсылкаПоказатели.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая Тогда
									СообщитьОбОшибке(ОбработкаКомментариев, "Показатель №" + КоличествоПоказателей +" должен быть шкалой оценки!", Отказ);
									Прервать;
								ИначеЕсли Показатели.Количество() > 1 Тогда
									ПоказательШкала = СсылкаПоказатели;
									ПустаяШкала = Ложь;
									ТекстОценитьПо = ПолучитьТекстОценитьПо(ПараметрФункцииОценитьПо(Сред(мФормулаРасчета, ПервыйСимвОценитьПоФорм,ПоследийСимвОценитьПо)), ПоказательШкала, ПустаяШкала);
									Если ПустаяШкала Тогда
										СообщитьОбОшибке(ОбработкаКомментариев, "В качестве показателя №" + НомерПоказателя +" выбрана пустая оценочная шкала", Отказ);
									КонецЕсли;
									ЛеваяЧастьФормулы = Лев(мФормулаРасчета, ПервыйСимвОценитьПОФорм);
									мФормулаРасчета = ЛеваяЧастьФормулы + ТекстОценитьПо;
									НовыйТекст = Лев(НовыйТекст, ПервыйСимвОценитьПО) + СтрЗаменить(ТекстОценитьПо, "ИсходныеДанные.Показатель","");
								КонецЕсли;
								Если ДлинаСтрокиБезПробелов <> НомерАнализируемогоСимвола Тогда
									БылоОценитьПОВЦикле			= Ложь;
								КонецЕсли;
								ОткрытыхСкобок			= 0;
								ЗакрытыхСкобок			= 0;
								КонечествоПарамОценитьПО= 0;
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли Символ = "," Тогда
						КонечествоПарамОценитьПО = КонечествоПарамОценитьПО + 1;
						Если КонечествоПарамОценитьПО > 1 Тогда
							СообщитьОбОшибке(ОбработкаКомментариев, "Количество параметров в функции ОценитьПо() не должно быть больше двух!", Отказ);
							Прервать;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли НомерПоказателя > 0 Тогда
					Если СсылкаПоказатели.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная Или
						СсылкаПоказатели.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая Тогда
						Отказ = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				НовыйТекст						= НовыйТекст + Символ;
				мФормулаРасчета					= мФормулаРасчета + Символ;
				мФормулаРасчетаПредставление	= мФормулаРасчетаПредставление + Символ;
			КонецЕсли;
			
			// сбросим все флаги
			Слово			= "";
			СловоСобрано	= Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// проверим не является ли последний показатель шкалой оценки 
	Если Не БылоОценитьПО И НовыйТекст <> "" И СсылкаПоказатели <> Неопределено Тогда
		Если СсылкаПоказатели.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная Или
			СсылкаПоказатели.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая Тогда
			СообщитьОбОшибке(ОбработкаКомментариев, "Показатель №" + КоличествоПоказателей +" не может быть шкалой оценки!", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		// проверка формулы на прочие непредвиденные ошибки
		Если ЗначениеЗаполнено(НовыйТекст) Тогда
			Попытка
				Результат = Вычислить(НовыйТекст);
			Исключение
				СообщитьОбОшибке(ОбработкаКомментариев, "Ошибка в формуле расчета! " + ОписаниеОшибки(), Отказ);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	// проверим нужа ли подмена базовых показателей
	ДелатьПодменуПоказателей		= Ложь;
	ЕстьПредопределенные			= Ложь;
	ЕстьНеПредопределенные			= Ложь;
	ЕстьНеПредопределенныеПослеПред	= Ложь;
	СчПоказателей = Показатели.Количество()-1;
	Пока СчПоказателей >= 0 Цикл
		Предопределенный = Показатели[СчПоказателей].Значение.Предопределенный;
		Если ЕстьПредопределенные И Не ЕстьНеПредопределенные Тогда
			ЕстьНеПредопределенныеПослеПред = (ЕстьНеПредопределенныеПослеПред Или Не Предопределенный) И ЕстьПредопределенные;
		ИначеЕсли ЕстьНеПредопределенные И Предопределенный Тогда
			// не все предопределенные показатели находятся в конце, нужно переносить их в конец и проверять не был ли изменён состав показателей
			ДелатьПодменуПоказателей = Истина;
			Прервать;
		КонецЕсли;
		ЕстьПредопределенные = ЕстьПредопределенные Или Предопределенный;
		ЕстьНеПредопределенные	= ЕстьНеПредопределенные Или Не Предопределенный;
		Если ЕстьНеПредопределенныеПослеПред И Предопределенный Тогда
			// не все предопределенные показатели находятся в конце, нужно переносить их в конец и проверять не был ли изменён состав показателей
			ДелатьПодменуПоказателей = Истина;
			Прервать;
		КонецЕсли;
		СчПоказателей = СчПоказателей - 1;
	КонецЦикла;
	
	Если ДелатьПодменуПоказателей Тогда
		// подменим номера базовым показателям
		НомераПредопределенныхПоказателей	= Новый Массив;	
		НомераПоказателей					= Новый Массив;	
		Для Сч = 1 По Показатели.Количество() Цикл	
			СсылкаПоказатели =Показатели[Сч-1].Значение;
			Если СсылкаПоказатели.Предопределенный И (СсылкаПоказатели <> Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная и 
				СсылкаПоказатели <> Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая И СсылкаПоказатели <> Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная) Тогда
				НомераПредопределенныхПоказателей.Добавить(Сч);
			Иначе
				НомераПоказателей.Добавить(Сч);
			КонецЕсли;
		КонецЦикла;
		ЗаменяемНаПоказатель		= Показатели.Количество() + 1;
		НомераПоказателейКоличество	= НомераПоказателей.Количество();
		Для Каждого НомерПредопределенногоПоказателя Из НомераПредопределенныхПоказателей Цикл
			Если НомераПоказателейКоличество > 0 Тогда
				
				НомераПоказателей_Минус1 = НомераПоказателей[НомераПоказателейКоличество-1]-1;
				
				Показатель 														= Показатели[НомераПоказателей_Минус1];
				Показатель_1													= Показатели[НомерПредопределенногоПоказателя-1];
				Показатели.Удалить(НомераПоказателей_Минус1);
				Показатели.Вставить(НомераПоказателей_Минус1, Показатель_1.Значение,Показатель_1.Значение);
				Показатели.Удалить(НомерПредопределенногоПоказателя-1);
				Показатели.Вставить(НомерПредопределенногоПоказателя-1, Показатель.Значение, Показатель.Значение);
				
				мФормулаРасчета = СтрЗаменить(мФормулаРасчета, "ИсходныеДанные.Показатель" + НомераПоказателей[НомераПоказателейКоличество-1],"ИсходныеДанные.Показатель" + ЗаменяемНаПоказатель);
				мФормулаРасчета = СтрЗаменить(мФормулаРасчета, "ИсходныеДанные.Показатель" + НомерПредопределенногоПоказателя,"ИсходныеДанные.Показатель" + НомераПоказателей[НомераПоказателейКоличество-1]);
				мФормулаРасчета = СтрЗаменить(мФормулаРасчета, "ИсходныеДанные.Показатель" + ЗаменяемНаПоказатель,"ИсходныеДанные.Показатель" + НомерПредопределенногоПоказателя);
				
				мФормулаРасчетаПредставление = СтрЗаменить(мФормулаРасчетаПредставление, "ИсходныеДанные.Показатель" + НомераПоказателей[НомераПоказателейКоличество-1],"ИсходныеДанные.Показатель" + ЗаменяемНаПоказатель);
				мФормулаРасчетаПредставление = СтрЗаменить(мФормулаРасчетаПредставление, "ИсходныеДанные.Показатель" + НомерПредопределенногоПоказателя,"ИсходныеДанные.Показатель" + НомераПоказателей[НомераПоказателейКоличество-1]);
				мФормулаРасчетаПредставление = СтрЗаменить(мФормулаРасчетаПредставление, "ИсходныеДанные.Показатель" + ЗаменяемНаПоказатель,"ИсходныеДанные.Показатель" + НомерПредопределенногоПоказателя);

				НомераПоказателейКоличество = НомераПоказателейКоличество - 1;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;

	Возврат Отказ;
	
КонецФункции //ПроверкаИФормированиеФормулыРасчета

Функция ПолучитьHTLMКодФормулыРасчета(ФормулаРасчета, Показатели, Режим, ВыводитьИдентификатор = Ложь) Экспорт
	
	Числа = "0123456789";
	
	
	ОператорыИФункции				=  ".,+,-,/,*,ЦЕЛ,INT,ОКР,ROUND,МАКС,MAX,МИН,MIN,?,=,<,>,<=,>=,ОЦЕНИТЬПО,(,),И,ИЛИ,НЕ,OR,AND,NOT";
	ОператорыИФункцииОднойСтрокой	=  ".,+,-,/,*,?,=,<,>,(,)";
	
	МассивРазделителей = Новый Массив;
	МассивРазделителей.Добавить(" ");
	МассивРазделителей.Добавить(Символы.ВК);
	МассивРазделителей.Добавить(Символы.ВТаб);
	МассивРазделителей.Добавить(Символы.НПП);
	МассивРазделителей.Добавить(Символы.ПС);
	МассивРазделителей.Добавить(Символы.ПФ);
	МассивРазделителей.Добавить(Символы.Таб);
	
	СловоСобрано		= Ложь;
	НайденПоказатель	= Ложь;
	
	Слово = "";
	
	ДлинаСтроки					= СтрДлина(ФормулаРасчета);
	НовыйHTMLКодФормулыРасчета	= "";
	
	
	// разбор слов
	НомерАнализируемогоСимвола = 1;
	Пока НомерАнализируемогоСимвола <= ДлинаСтроки Цикл
		
		Символ = Сред(ФормулаРасчета, НомерАнализируемогоСимвола, 1);
		
		Если Символ = "." И Слово = "ИсходныеДанные" и Сред(ФормулаРасчета, НомерАнализируемогоСимвола+1, 10) = "Показатель" Тогда
			
			
			НомерАнализируемогоСимвола = НомерАнализируемогоСимвола + 10;
			НомерПоказателя = "";
			ШагВнутриЦикла = 0;
			ПродолжитьЦикл = Истина;
			Пока ПродолжитьЦикл Цикл
				
				НомерАнализируемогоСимвола = НомерАнализируемогоСимвола + 1;
				СимволДляСравненияСЧислом = Сред(ФормулаРасчета, НомерАнализируемогоСимвола, 1);
				Если Найти(Числа, СимволДляСравненияСЧислом) <> 0 Тогда
					НомерПоказателя = НомерПоказателя + СимволДляСравненияСЧислом;
					ПродолжитьЦикл  = (НомерАнализируемогоСимвола <= ДлинаСтроки);
				Иначе
					ПродолжитьЦикл = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Режим = "Текст" Тогда
				Если Показатели.Количество() >= Число(НомерПоказателя) Тогда
					Если ВыводитьИдентификатор Тогда
						ПоказательДляФормулы = Строка(Показатели[Число(НомерПоказателя) - 1].Показатель.Идентификатор);
					Иначе
						ПоказательДляФормулы = Строка(Показатели[Число(НомерПоказателя) - 1].Показатель);
					КонецЕсли;
				Иначе
					Возврат НовыйHTMLКодФормулыРасчета;
				КонецЕсли;
			Иначе
				Если Показатели.Количество() >= Число(НомерПоказателя) Тогда
					ПоказательДляФормулы = "<FONT color=#0000ff>" + Строка(Показатели[Число(НомерПоказателя) - 1].Показатель)+"</FONT>";
				Иначе
					Возврат НовыйHTMLКодФормулыРасчета;
				КонецЕсли;
			КонецЕсли;
			
			НовыйHTMLКодФормулыРасчета = НовыйHTMLКодФормулыРасчета + ПоказательДляФормулы;
			
			НайденПоказатель = Истина;
			
			Слово = "";
			
		ИначеЕсли  МассивРазделителей.Найти(Символ) <> Неопределено Или Найти(ОператорыИФункцииОднойСтрокой, Символ) Тогда
			
			СловоСобрано = Истина;
			НайденПоказатель = Ложь;
			Слово = Слово + Символ;
		Иначе
			
			// символ не разделитель, можно его добавить к слову
			Слово = Слово + Символ;
			Если ДлинаСтроки = НомерАнализируемогоСимвола Тогда 
				СловоСобрано = Истина;
			КонецЕсли;
			НайденПоказатель = Ложь;
		КонецЕсли;
		
		Если СловоСобрано И Не НайденПоказатель Тогда
			//	ФормулаРасчета	= СтрЗаменить(ФормулаРасчета, "ИсходныеДанные.Показатель"+Показатель.НомерСтроки, ПоказательДляФормулы);
			НовыйHTMLКодФормулыРасчета = НовыйHTMLКодФормулыРасчета + Слово;
			СловоСобрано = Ложь;
			Слово = "";
		КонецЕсли;
		
		Если НЕ НайденПоказатель Тогда
			НомерАнализируемогоСимвола = НомерАнализируемогоСимвола + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НовыйHTMLКодФормулыРасчета;
	
КонецФункции //ПолучитьHTLMКодФормулыРасчета

Функция ЭтоЧисло(Слово)
	
	Цифры = "1234567890";
	
	Для НомСимвола = 1 По СтрДлина(Слово) Цикл
		
		Если Найти(Цифры, Сред(Слово, НомСимвола, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина
	
КонецФункции

Функция ПолучитьМассивРазделителей() Экспорт
	
	МассивРазделителей = Новый Массив;
	
	МассивРазделителей.Добавить(" ");
	МассивРазделителей.Добавить(Символы.ВК);
	МассивРазделителей.Добавить(Символы.ВТаб);
	МассивРазделителей.Добавить(Символы.НПП);
	МассивРазделителей.Добавить(Символы.ПС);
	МассивРазделителей.Добавить(Символы.ПФ);
	МассивРазделителей.Добавить(Символы.Таб);
	
	Возврат МассивРазделителей;
	
КонецФункции

Функция ИменаПВРПоОдномуИзВР(ПВРСсылка)
	
	ИменаПВР = Новый Массив;
	ИменаПВР.Добавить("ОсновныеНачисленияОрганизаций");
	ИменаПВР.Добавить("ДополнительныеНачисленияОрганизаций");
	ИменаПВР.Добавить("УдержанияОрганизаций");
	
	МассивыИменПВРПоТипу = Новый Соответствие;
	МассивыИменПВРПоТипу.Вставить(Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), ИменаПВР);
	МассивыИменПВРПоТипу.Вставить(Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций"), ИменаПВР);
	МассивыИменПВРПоТипу.Вставить(Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций"), ИменаПВР);
	
	ИменаПВРУпр = Новый Массив;
	ИменаПВРУпр.Добавить("УправленческиеНачисления");
	ИменаПВРУпр.Добавить("УправленческиеУдержания");
	
	МассивыИменПВРПоТипу.Вставить(Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления"), ИменаПВРУпр);
	МассивыИменПВРПоТипу.Вставить(Тип("ПланВидовРасчетаСсылка.УправленческиеУдержания"), ИменаПВРУпр);
	
	Возврат МассивыИменПВРПоТипу[ТипЗнч(ПВРСсылка)];
	
КонецФункции // ИменаПВРПоОдномуИзВР

Функция ТекстЗапросаВременнойТаблицыПоказателиВидаРасчета(ИменаПВР) Экспорт
	
	ТекстЗапроса = "";
	НомерПВР = 0;
	Пока НомерПВР < ИменаПВР.Количество() Цикл
		Если НомерПВР > 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	Ссылка КАК ВидРасчета,
		|	Показатель КАК Показатель,
		|	ЗапрашиватьПриКадровыхПеремещениях КАК ЗапрашиватьПриКадровыхПеремещениях";
		Если НомерПВР = 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ПОМЕСТИТЬ ПоказателиВидаРасчета";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	ПланВидовРасчета." + ИменаПВР[НомерПВР] + ".Показатели
		|";
		
		НомерПВР = НомерПВР + 1;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета,
	|	Показатель
	|;
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаВременнойТаблицыПоказателиВидаРасчета

Функция СформироватьЗапросСвойствПоказателейВидовРасчета(ПоказателиФормулы, ПВРСсылка, ЭтоОсновноеНачисление)
	
	ТекстЗапроса = ТекстЗапросаВременнойТаблицыПоказателиВидаРасчета(ИменаПВРПоОдномуИзВР(ПВРСсылка));
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиВидовРасчета.Показатель
	|ПОМЕСТИТЬ ПоказателиУжеЗапрашиваются
	|ИЗ
	|	ПоказателиВидаРасчета КАК ПоказателиВидовРасчета
	|ГДЕ
	|	ПоказателиВидовРасчета.ВидРасчета <> &Ссылка
	|	И ПоказателиВидовРасчета.Показатель В(&ПоказателиФормулы)
	|	И ПоказателиВидовРасчета.ЗапрашиватьПриКадровыхПеремещениях
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиСхемМотивации.Ссылка КАК Показатель,
	|	ВЫБОР
	|		КОГДА ПоказателиСхемМотивации.ВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется)
	|				И (НЕ ПоказателиСхемМотивации.ТипПоказателя В (ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая), ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная)))
	|			ТОГДА ВЫБОР
	|					КОГДА ПоказателиСхемМотивации.ТарифнаяСтавка
	|							ИЛИ ПоказателиСхемМотивации.Ссылка В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая))
	|						ТОГДА &ЭтоОсновноеНачисление
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ПоказателиСхемМотивации.Ссылка В
	|										(ВЫБРАТЬ
	|											ПоказателиУжеЗапрашиваются.Показатель
	|										ИЗ
	|											ПоказателиУжеЗапрашиваются)
	|									И (НЕ ЕСТЬNULL(ПоказателиВидаРасчета.ЗапрашиватьПриКадровыхПеремещениях, ЛОЖЬ))
	|								ТОГДА ЛОЖЬ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗапрашиватьПриКадровыхПеремещениях
	|ИЗ
	|	Справочник.ПоказателиСхемМотивации КАК ПоказателиСхемМотивации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиВидаРасчета КАК ПоказателиВидаРасчета
	|		ПО ПоказателиСхемМотивации.Ссылка = ПоказателиВидаРасчета.Показатель
	|			И (ПоказателиВидаРасчета.ВидРасчета = &Ссылка)
	|ГДЕ
	|	ПоказателиСхемМотивации.Ссылка В(&ПоказателиФормулы)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПоказателиФормулы", ПоказателиФормулы);
	Запрос.УстановитьПараметр("Ссылка", ПВРСсылка);
	Запрос.УстановитьПараметр("ЭтоОсновноеНачисление", ЭтоОсновноеНачисление);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросСвойствПоказателейВидовРасчета

Процедура ЗаполнитьТаблицуПоказателейВидаРасчета(Объект, ПоказателиФормулы)
	
	Если Объект.Метаданные().Реквизиты.Найти("ЗачетОтработанногоВремени") <> Неопределено Тогда
		ЭтоОсновноеНачисление = Объект.ЗачетОтработанногоВремени;
	Иначе
		ЭтоОсновноеНачисление = Ложь;
	КонецЕсли;
	
	Выборка = СформироватьЗапросСвойствПоказателейВидовРасчета(ПоказателиФормулы, Объект.Ссылка, ЭтоОсновноеНачисление).Выбрать();
	
	Объект.Показатели.Очистить();
	Для Каждого ПоказательФормулы Из ПоказателиФормулы Цикл
		Выборка.Сбросить();
		Выборка.НайтиСледующий(ПоказательФормулы, "Показатель");
		ЗаполнитьЗначенияСвойств(Объект.Показатели.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуПоказателейВидаРасчета

// Процедура обеспечивает ввод формульных начислений и удержаний
//
Процедура УстановитьПараметрыВидаРасчета(Параметр, Объект, Элементыформы) Экспорт
	
	Объект.ФормулаРасчета				= Параметр[0];
	Объект.ФормулаРасчетаПредставление	= Параметр[2];
	Объект.СпособРасчета 				= Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула;
	Объект.ПроизвольнаяФормулаРасчета	= Истина;
	
	ЗаполнитьТаблицуПоказателейВидаРасчета(Объект, Параметр[1]);

	Элементыформы.СпособРасчетаПредставление.УстановитьТекст(ПроведениеРасчетов.ВизуализироватьФормулуРасчета(Объект, "HTML", Объект.Метаданные().Имя = "УдержанияОрганизаций"));
	
КонецПроцедуры // УстановитьПараметрыВидаРасчета

// Процедура контролирует признак Запрашивать у показателей произвольной формулы так, 
// чтобы один и тот же показатель не мог быть запрошен в разных видах расчета одновременно, 
// так как это может привести к разным значениям одного и того же показателя
// Исключения составляют виды расчета, в которых этот признак уже был установлен ранее
//
Процедура ПроверитьУстановкуПризнакаЗапрашивать(ПВРОбъект, Отказ, ОбработкаКомментариев) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Показатели.Показатель КАК Показатель,
	|	Показатели.ЗапрашиватьПриКадровыхПеремещениях КАК ЗапрашиватьПриКадровыхПеремещениях
	|ПОМЕСТИТЬ ПоказателиСхемМотивации
	|ИЗ
	|	&Показатели КАК Показатели
	|;
	|";
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаВременнойТаблицыПоказателиВидаРасчета(ИменаПВРПоОдномуИзВР(ПВРОбъект.Ссылка));
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиСхемМотивации.Показатель КАК Показатель,
	|	ПоказателиУжеЗапрашиваются.ВидРасчета
	|ИЗ
	|	ПоказателиСхемМотивации КАК ПоказателиСхемМотивации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоказателиВидаРасчета КАК ПоказателиУжеЗапрашиваются
	|		ПО ПоказателиСхемМотивации.Показатель = ПоказателиУжеЗапрашиваются.Показатель
	|			И (ПоказателиУжеЗапрашиваются.ЗапрашиватьПриКадровыхПеремещениях)
	|			И (ПоказателиУжеЗапрашиваются.ВидРасчета <> &Ссылка)
	|ГДЕ
	|	ПоказателиСхемМотивации.ЗапрашиватьПриКадровыхПеремещениях
	|	И (НЕ ПоказателиСхемМотивации.Показатель В
	|				(ВЫБРАТЬ
	|					ПоказателиВидаРасчета.Показатель
	|				ИЗ
	|					ПоказателиВидаРасчета КАК ПоказателиВидаРасчета
	|				ГДЕ
	|					ПоказателиВидаРасчета.ВидРасчета = &Ссылка
	|					И ПоказателиВидаРасчета.ЗапрашиватьПриКадровыхПеремещениях))
	|ИТОГИ ПО
	|	Показатель";
	
	// ошибкой является установка признака запрашивать для уже запрашиваемых в других видах расчета показателей, 
	// если этот признак не был установлен ранее
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ПВРОбъект.Ссылка);
	Запрос.УстановитьПараметр("Показатели", ПВРОбъект.Показатели.Выгрузить(, "Показатель, ЗапрашиватьПриКадровыхПеремещениях"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаПоПоказателям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПоказателям.Следующий() Цикл
			
			ОбработкаКомментариев.ДобавитьСообщение("Показатель формулы расчета " + ВыборкаПоПоказателям.Показатель + " уже запрашивается в нижеперечисленных видах расчета:", Перечисления.ВидыСообщений.Раздел);
			Выборка = ВыборкаПоПоказателям.Выбрать();
			Пока Выборка.Следующий() Цикл
				Расшифровки = Новый Массив;
				Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", Строка(Выборка.ВидРасчета) + " ", Выборка.ВидРасчета));	
				ОбработкаКомментариев.ДобавитьСообщение(Строка(Выборка.ВидРасчета), Перечисления.ВидыСообщений.Информация, Расшифровки);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьУстановкуПризнакаЗапрашивать

////////////////////////////////////////////////////////////////////////////////
// ОБСЛУЖИВАНИЕ ПЕРЕРАСЧЕТОВ
// 

// Процедура выполняет дописывание наборов записей перерасчетов основных начислений по 
// переданной выборке.
// Выборка должна содержать уникальные комбинации Физлицо+Регистратор (т.е. ОбъектПерерасчета)
// которых еще нет в таблице перерасчета
Процедура ДописатьПерерасчетыОсновныхНачислений(Выборка) Экспорт
	
	Наборы = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Набор = Наборы[Выборка.Регистратор];
		Если Набор = Неопределено Тогда
			Набор = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
			Набор.Отбор.ОбъектПерерасчета.Значение = Выборка.Регистратор;
			Набор.Отбор.ОбъектПерерасчета.Использование = Истина;
			Наборы.Вставить(Выборка.Регистратор, Набор);
		КонецЕсли;
		НоваяСтрока = Набор.Добавить();
		НоваяСтрока.ОбъектПерерасчета	= Выборка.Регистратор;
		НоваяСтрока.Сотрудник			= Выборка.Сотрудник;
		НоваяСтрока.ФизЛицо				= Выборка.Физлицо;
		НоваяСтрока.Организация			= Выборка.Организация;
	КонецЦикла;
	Для Каждого ЭлементСтруктуры Из Наборы Цикл
		// дописываем набор записей по данному объекту перерасчета
		ЭлементСтруктуры.Значение.Записать(Ложь);
	КонецЦикла;
	
КонецПроцедуры // ДописатьПерерасчетыОсновныхНачислений()

// Процедура выполняет дописывание наборов записей перерасчетов в
// регистр сведений ЗаполнениеПлановыхНачислений
//
Процедура ДописатьПерерасчетыВЗаполнениеПлановыхНачислений(Выборка) Экспорт
	
	Наборы = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Набор = Наборы[Выборка.ОбъектЗаполнения];
		Если Набор = Неопределено Тогда
			Набор = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
			Набор.Отбор.ОбъектЗаполнения.Значение = Выборка.ОбъектЗаполнения;
			Набор.Отбор.ОбъектЗаполнения.Использование = Истина;
			Наборы.Вставить(Выборка.ОбъектЗаполнения, Набор);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Набор.Добавить(),Выборка);
	КонецЦикла;
		
	Для Каждого ЭлементыСтруктуры Из Наборы Цикл
		ЭлементыСтруктуры.Значение.Записать(Ложь);
	КонецЦикла;
	
КонецПроцедуры // ДописатьПерерасчетыВЗаполнениеПлановыхНачислений()

// Удаляем записи перезаполнений как по самому документу, так и по исходному документу,
// если переданный документ является исправлением
//
// Параметры
//  ДокументСсылка - ссылка на документ, для которого требуется удалить записи рег-ра перезаполнений
//  
Процедура УдалитьСведенияОПерезаполненииДокумента(ДокументСсылка, СотрудникиДокумента = Неопределено, ТолькоПоИсправленнымДокументам = Ложь) Экспорт
	
	НаборПерезаполнения = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
	НаборПерезаполнения.Отбор.ОбъектЗаполнения.Использование = Истина;
	НаборПерезаполнения.Отбор.ОбъектЗаполнения.ВидСравнения  = ВидСравнения.Равно;
	
	Если НаборПерезаполнения.Отбор.ОбъектЗаполнения.ТипЗначения.СодержитТип(ТипЗнч(ДокументСсылка)) Тогда
		
		НаборСотрудниковПерезаполнения = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
		НаборСотрудниковПерезаполнения.Отбор.ОбъектЗаполнения.Использование = Истина;
		НаборСотрудниковПерезаполнения.Отбор.ОбъектЗаполнения.ВидСравнения = ВидСравнения.Равно;
		
		МассивИсправленныхДокументов = Новый Массив;
		
		// проверим, является ли переданный документ чьим-нибудь исправлением
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыИсправления.ПерерассчитываемыйДокумент КАК ОбъектПерерасчета
		|ИЗ
		|	Документ." + ДокументСсылка.Метаданные().Имя + " КАК ДокументыИсправления
		|ГДЕ
		|	ДокументыИсправления.Ссылка = &Исправление";
		Запрос.УстановитьПараметр("Исправление", ДокументСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
		
		Если ЗначениеЗаполнено(ОбъектПерерасчета) Тогда
			
			// выберем исправленных сотрудников - соответствующие им записи перерасчетов надо будет также удалить
			ЗапросСотрудников = Новый Запрос;
			ЗапросСотрудников.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаполнениеПлановыхНачислений.Сотрудник
			|ИЗ
			|	РегистрСведений.ЗаполнениеПлановыхНачислений КАК ЗаполнениеПлановыхНачислений
			|ГДЕ
			|	ЗаполнениеПлановыхНачислений.ОбъектЗаполнения = &ОбъектЗаполнения
			|	И (&ПоВсемСотрудникам
			|			ИЛИ ЗаполнениеПлановыхНачислений.Сотрудник В (&Сотрудники))";
			ЗапросСотрудников.УстановитьПараметр("ОбъектЗаполнения",  ОбъектПерерасчета);
			ЗапросСотрудников.УстановитьПараметр("Сотрудники", 		  СотрудникиДокумента);
			ЗапросСотрудников.УстановитьПараметр("ПоВсемСотрудникам", СотрудникиДокумента = Неопределено);
			МассивСотрудников = ЗапросСотрудников.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
			
			// выявим все исправленные документы
			Пока ЗначениеЗаполнено(ОбъектПерерасчета) Цикл
				
				МассивИсправленныхДокументов.Добавить(ОбъектПерерасчета);
				Запрос.УстановитьПараметр("Исправление", ОбъектПерерасчета);
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
				ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ТолькоПоИсправленнымДокументам Тогда 
			Если СотрудникиДокумента = Неопределено Тогда // удалим все записи перезаполнений по самому документу
				НаборПерезаполнения.Отбор.ОбъектЗаполнения.Значение = ДокументСсылка;
				НаборПерезаполнения.Записать(Истина);
			Иначе // удалим записи перезаполнений по переданным сотрудникам
				НаборПерезаполнения.Отбор.ОбъектЗаполнения.Значение 		   = ДокументСсылка;
				НаборСотрудниковПерезаполнения.Отбор.ОбъектЗаполнения.Значение = ДокументСсылка;
				НаборПерезаполнения.Прочитать();
				Для Каждого Запись Из НаборПерезаполнения Цикл
					Если СотрудникиДокумента.Найти(Запись.Сотрудник) = Неопределено Тогда
						ЗаполнитьЗначенияСвойств(НаборСотрудниковПерезаполнения.Добавить(), Запись);
					КонецЕсли;
				КонецЦикла;
				НаборСотрудниковПерезаполнения.Записать(Истина);
				НаборСотрудниковПерезаполнения.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		// для цепочки исправленных документов удалим записи перерасчетов по исправленным 
		// в переданном документе сотрудникам
		Для Каждого Значение Из МассивИсправленныхДокументов Цикл
			НаборПерезаполнения.Отбор.ОбъектЗаполнения.Значение = Значение;
			НаборСотрудниковПерезаполнения.Отбор.ОбъектЗаполнения.Значение = Значение;
			НаборПерезаполнения.Прочитать();
			Для Каждого Запись Из НаборПерезаполнения Цикл
				Если МассивСотрудников.Найти(Запись.Сотрудник) = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НаборСотрудниковПерезаполнения.Добавить(), Запись);
				КонецЕсли;
			КонецЦикла;
			НаборСотрудниковПерезаполнения.Записать(Истина);
			НаборСотрудниковПерезаполнения.Очистить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // УдалитьСведенияОПерезаполненииДокумента()

// Удаляем записи перерасчетов как по самому документу, так и по исходному документу,
// если переданный документ является исправлением
//
// Параметры
//  ДокументСсылка - ссылка на документ, для которого требуется удалить записи таблиц перерасчетов
//  
Процедура УдалитьСведенияОПерерасчетеДокумента(ДокументСсылка, ТолькоПоИсправленнымДокументам = Ложь) Экспорт
	
	ПерерасчетыПоДокументам = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
	ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
	ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
	
	ДопПерерасчетыПоДокументам = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
	ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
	ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
	
	СредПерерасчетыПоДокументам = РегистрыРасчета.РасчетСреднегоЗаработка.Перерасчеты.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
	СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
	
	МассивИсправленныхДокументов = Новый Массив;
	ТипРегистратора = ТипЗнч(ДокументСсылка);
	Если ТипРегистратора <> Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком") Тогда
		
		// проверим, является ли переданный документ чьим-нибудь исправлением
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыИсправления.ПерерассчитываемыйДокумент КАК ОбъектПерерасчета
		|ИЗ
		|	Документ." + ДокументСсылка.Метаданные().Имя + " КАК ДокументыИсправления
		|ГДЕ
		|	ДокументыИсправления.Ссылка = &Исправление";
		Запрос.УстановитьПараметр("Исправление", ДокументСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
		
		Если ЗначениеЗаполнено(ОбъектПерерасчета) Тогда
			
			ПерерасчетыФизлицПоДокументам = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
			ПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
			ПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
			
			ДопПерерасчетыФизлицПоДокументам = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
			ДопПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
			ДопПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
			
			СредПерерасчетыФизлицПоДокументам = РегистрыРасчета.РасчетСреднегоЗаработка.Перерасчеты.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
			СредПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
			СредПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
			
			// выберем исправленных физлиц - соответствующие им записи перерасчетов надо будет также удалить
			ЗапросФизлиц = Новый Запрос;
			ЗапросФизлиц.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДополнительныеНачисленияРаботниковОрганизаций.ФизЛицо
			|ИЗ
			|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
			|ГДЕ
			|	ДополнительныеНачисленияРаботниковОрганизаций.Регистратор = &Регистратор
			|	И ДополнительныеНачисленияРаботниковОрганизаций.СторнируемыйДокумент = &ИсходныйДокумент
			|	И ДополнительныеНачисленияРаботниковОрганизаций.Сторно
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
			|ГДЕ
			|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &Регистратор
			|	И ОсновныеНачисленияРаботниковОрганизаций.СторнируемыйДокумент = &ИсходныйДокумент
			|	И ОсновныеНачисленияРаботниковОрганизаций.Сторно
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РасчетСреднегоЗаработка.ФизЛицо
			|ИЗ
			|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|ГДЕ
			|	РасчетСреднегоЗаработка.Регистратор = &Регистратор";
			ЗапросФизлиц.УстановитьПараметр("Регистратор", ДокументСсылка);
			ЗапросФизлиц.УстановитьПараметр("ИсходныйДокумент", ОбъектПерерасчета);
			МассивФизлиц = ЗапросФизлиц.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо");
			
			// выявим все исправленные документы
			Пока ЗначениеЗаполнено(ОбъектПерерасчета) Цикл
				
				МассивИсправленныхДокументов.Добавить(ОбъектПерерасчета);
				Запрос.УстановитьПараметр("Исправление", ОбъектПерерасчета);
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
				ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ТипЗначения.СодержитТип(ТипРегистратора) тогда
		
		Если Не ТолькоПоИсправленнымДокументам Тогда // удалим все записи перерасчетов по самому документу
			ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = ДокументСсылка;
			ПерерасчетыПоДокументам.Записать();
		КонецЕсли;
		
		// для цепочки исправленных документов удалим записи перерасчетов по исправленным 
		// в переданном документе сотрудникам
		Для каждого Значение Из МассивИсправленныхДокументов Цикл
			ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			ПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			ПерерасчетыПоДокументам.Прочитать();
			Для каждого Запись Из ПерерасчетыПоДокументам Цикл
				Если МассивФизлиц.Найти(Запись.ФизЛицо) = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ПерерасчетыФизлицПоДокументам.Добавить(),Запись);
				КонецЕсли;
			КонецЦикла;
			ПерерасчетыФизлицПоДокументам.Записать();
			ПерерасчетыФизлицПоДокументам.Очистить();
		КонецЦикла;
		
	КонецЕсли;
	Если ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ТипЗначения.СодержитТип(ТипРегистратора) тогда
		
		Если Не ТолькоПоИсправленнымДокументам Тогда // удалим все записи перерасчетов по самому документу
			ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = ДокументСсылка;
			ДопПерерасчетыПоДокументам.Записать();
		КонецЕсли;
		
		// для цепочки исправленных документов удалим записи перерасчетов по исправленным 
		// в переданном документе сотрудникам
		Для каждого Значение Из МассивИсправленныхДокументов Цикл
			ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			ДопПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			ДопПерерасчетыПоДокументам.Прочитать();
			Для каждого Запись Из ДопПерерасчетыПоДокументам Цикл
				Если МассивФизлиц.Найти(Запись.ФизЛицо) = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ДопПерерасчетыФизлицПоДокументам.Добавить(),Запись);
				КонецЕсли;
			КонецЦикла;
			ДопПерерасчетыФизлицПоДокументам.Записать();
			ДопПерерасчетыФизлицПоДокументам.Очистить();
		КонецЦикла;
	КонецЕсли;
	Если СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ТипЗначения.СодержитТип(ТипРегистратора) тогда
		
		Если Не ТолькоПоИсправленнымДокументам Тогда // удалим все записи перерасчетов по самому документу
			СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = ДокументСсылка;
			СредПерерасчетыПоДокументам.Записать();
		КонецЕсли;
		
		// для цепочки исправленных документов удалим записи перерасчетов по исправленным 
		// в переданном документе сотрудникам
		Для каждого Значение Из МассивИсправленныхДокументов Цикл
			СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			СредПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			СредПерерасчетыПоДокументам.Прочитать();
			Для каждого Запись Из СредПерерасчетыПоДокументам Цикл
				Если МассивФизлиц.Найти(Запись.ФизЛицо) = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СредПерерасчетыФизлицПоДокументам.Добавить(),Запись);
				КонецЕсли;
			КонецЦикла;
			СредПерерасчетыФизлицПоДокументам.Записать();
			СредПерерасчетыФизлицПоДокументам.Очистить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИСПРАВЛЕНИЕ ДОКУМЕНТОВ

// Функция получает документ(ы), которым был исправлен расчетный документ
//
// Параметры
//  ДокументСсылка - ссылка на документ, включенный в механизм исправлений
//  Режим - строка, допустимые значения: "КритерийОтбора", "ТаблицаДокумента" 
//  ИмяДокумента - имя соответствующего объекта метаданных
//
// Возвращаемое значение:
//   Режим = "КритерийОтбора": массив документов-исправлений, возможно, пустой.
//   Режим = "ТаблицаДокумента": ссылка на документ того же вида, что и переданный параметр; 
//   или Неопределено, если документ-исправление не найден.
//
Функция ПолучитьДокументИсправление(ДокументСсылка = Неопределено, Режим = Неопределено, ИмяДокумента = Неопределено, ИмяРеквизита = "ПерерассчитываемыйДокумент") Экспорт 
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Режим = Неопределено Тогда
		Режим = ?(ДокументСсылка.Метаданные().Реквизиты.Найти("Сотрудник") = Неопределено, "КритерийОтбора","ТаблицаДокумента")	
	КонецЕсли;
	
	Если Режим = "КритерийОтбора" Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументыИсправления.Ссылка
		|ИЗ
		|	КритерийОтбора.ДокументыИсправления(&ИсходныйДокумент) КАК ДокументыИсправления
		|";
	ИначеЕсли Режим = "ТаблицаДокумента" Тогда
		Если НЕ ЗначениеЗаполнено(ИмяДокумента) Тогда
			ИмяДокумента = ДокументСсылка.Метаданные().Имя;
		КонецЕсли;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументыИсправления.Ссылка
		|ИЗ
		|	Документ." + ИмяДокумента + " КАК ДокументыИсправления
		|ГДЕ
		|	ДокументыИсправления." + ИмяРеквизита + " = &ИсходныйДокумент";
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИсходныйДокумент",ДокументСсылка);
	Результат = Запрос.Выполнить();
	
	Если Режим = "КритерийОтбора" Тогда
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Функция получает документ(ы), которым был исправлен расчетный документ
//
// Параметры
//  ДокументСсылка - ссылка на документ, включенный в механизм исправлений
//  Режим - строка, допустимые значения: "КритерийОтбора", "ТаблицаДокумента" 
//
// Возвращаемое значение:
//   Режим = "КритерийОтбора": массив документов-исправлений, возможно, пустой.
//   Режим = "ТаблицаДокумента": ссылка на документ того же вида, что и переданный параметр; 
//   или Неопределено, если документ-исправление не найден.
//
Функция ПолучитьДокументСторнирование(ДокументСсылка = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыИсправления.Ссылка
	|ИЗ
	|	Документ.Сторнирование КАК ДокументыИсправления
	|ГДЕ
	|	ДокументыИсправления.ДокументОснование = &ИсходныйДокумент";
	Запрос.УстановитьПараметр("ИсходныйДокумент",ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка
	Иначе
		Возврат Документы.Сторнирование.ПустаяСсылка()
	КонецЕсли;
	
КонецФункции

// Обработчик подписки ПередЗаписьюДокументаИсправление
// 
Процедура ПередЗаписьюДокументаПроверкаИсправленногоДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения ИЛИ РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Источник.Метаданные().Реквизиты.Найти("ИсправляемыйДокумент") <> Неопределено Тогда
			ИмяРеквизита = "ИсправляемыйДокумент";
		Иначе
			ИмяРеквизита = "ПерерассчитываемыйДокумент";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПолучитьДокументИсправление(Источник.Ссылка, , , ИмяРеквизита)) Тогда
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ТекстСообщенияОбОшибке = "Документ был исправлен, проведение документа запрещено!";
			Иначе
				ТекстСообщенияОбОшибке = "Документ был исправлен, отмена проведения документа запрещена!";
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибке, Отказ);
			
		ИначеЕсли ЗначениеЗаполнено(ПолучитьДокументСторнирование(Источник.Ссылка)) Тогда
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ТекстСообщенияОбОшибке = "Документ был сторнирован, проведение документа запрещено!";
			Иначе
				ТекстСообщенияОбОшибке = "Документ был сторнирован, отмена проведения документа запрещена!";
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибке, Отказ);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет документ-исправление по исходному кадровому документу
//
Процедура ЗаполнитьИсправлениеПоКадровомуДокументу(ЭтотОбъект, ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ЭтотОбъект.ИсправляемыйДокумент = ИсходныйДокумент;
	
	МД = ИсходныйДокумент.Метаданные();
	
	МассивНепереносимыхРеквизитов = Новый Массив;
	МассивНепереносимыхРеквизитов.Добавить("Проведен");
	МассивНепереносимыхРеквизитов.Добавить("Номер");
	МассивНепереносимыхРеквизитов.Добавить("Дата");
	МассивНепереносимыхРеквизитов.Добавить("Автор");
	МассивНепереносимыхРеквизитов.Добавить("ПометкаУдаления");
	МассивНепереносимыхРеквизитов.Добавить("Комментарий");
	МассивНепереносимыхРеквизитов.Добавить("Ответственный");
	МассивНепереносимыхРеквизитов.Добавить("КраткийСоставДокумента");
	МассивНепереносимыхРеквизитов.Добавить("ДанныеПрошлойВерсии");
	МассивНепереносимыхРеквизитов.Добавить("ИсправляемыйДокумент");
	МассивНепереносимыхРеквизитов.Добавить("ДвиженияИсправляемогоДокумента");
	
	Реквизиты = Новый Массив;
	Для Каждого Реквизит Из МД.Реквизиты Цикл
		Имя = Реквизит.Имя;
		Если МассивНепереносимыхРеквизитов.Найти(Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Реквизиты.Добавить(Имя);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ИсходныйДокумент",	ИсходныйДокумент);
	Текст = "";
	Для Каждого Реквизит Из Реквизиты Цикл
		Если НЕ ПустаяСтрока(Текст) Тогда
			Текст = Текст + ",";
		КонецЕсли;
		Текст = Текст + "
		|	Док." + Реквизит + " КАК " + Реквизит;
	КонецЦикла;
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + Текст + "
	|ИЗ
	|	Документ." + МД.Имя + " КАК Док
	|ГДЕ
	|	Док.Ссылка = &ИсходныйДокумент
	|	И Док.Проведен";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сотрудники",			Сотрудники);
	Запрос.УстановитьПараметр("ПоВсемСотрудникам",	Сотрудники = Неопределено);
	
	Для Каждого МДТабличнаяЧасть Из МД.ТабличныеЧасти Цикл
		ЗаписиСторнируются	= МДТабличнаяЧасть.Реквизиты.Найти("Сторно") <> Неопределено;
		ЕстьСотрудник		= МДТабличнаяЧасть.Реквизиты.Найти("Сотрудник") <> Неопределено;
		
		РеквизитыТЧ = Новый Массив;
		Для Каждого РеквизитТЧ Из МДТабличнаяЧасть.Реквизиты Цикл
			Имя = РеквизитТЧ.Имя;
			Если Имя = "Сторно" Тогда
				Продолжить;
			КонецЕсли;
			РеквизитыТЧ.Добавить(Имя);
		КонецЦикла;
		
		Текст = "";
		Для Каждого РеквизитТЧ Из РеквизитыТЧ Цикл
			Текст = Текст + "
			|	Док." + РеквизитТЧ + " КАК " + РеквизитТЧ + ",";
		КонецЦикла;
		ТекстЗапроса =
		"ВЫБРАТЬ"+Текст+"
		|	Док.НомерСтроки
		|ПОМЕСТИТЬ ВТДок
		|ИЗ
		|	Документ." + МД.Имя + "." + МДТабличнаяЧасть.Имя + " КАК Док
		|ГДЕ
		|	Док.Ссылка = &ИсходныйДокумент
		|	И Док.Ссылка.Проведен
		|	" + ?(ЗаписиСторнируются, "И (НЕ Док.Сторно)", "") + "
		|	" + ?(ЕстьСотрудник, "И (&ПоВсемСотрудникам ИЛИ Док.Сотрудник В (&Сотрудники))", "") + "
		|;";
		
		Если ЗаписиСторнируются Тогда
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ИСТИНА КАК Сторно,
			|	Док.*
			|ИЗ
			|	ВТДок КАК Док
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЛОЖЬ,
			|	Док.*
			|ИЗ
			|	ВТДок КАК Док
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сторно УБЫВ,
			|	Док.НомерСтроки";
			
		Иначе
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	Док.*
			|ИЗ
			|	ВТДок КАК Док
			|
			|УПОРЯДОЧИТЬ ПО
			|	Док.НомерСтроки";
			
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		
		ЭтотОбъект[МДТабличнаяЧасть.Имя].Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЦикла;
	
КонецПроцедуры

// Выбирает из документов-исправлений сотрудников и помещает их в соответствие
//
// Параметры
//  ТекстЗапроса - строка. содержит текст запроса выора сотрудников
//  ДокументыИсправления - массив документов-исправлений
//  ИмяПоля - строка, имя поля запроса, содержащего сотрудника
//  ИмяПараметра - строка, имя параметра запроса, содержащего документы-исправления
//
// Возвращаемое значение:
//   Соответствие с сотрудниками документов исправлений
//
Функция СформироватьСоответствиеСотрудниковСИсправлениями(ТекстЗапроса = "", ДокументыИсправления = Неопределено, ИмяПоля = "Сотрудник", ИмяПараметра = "Исправления") Экспорт
                                                                             
	Сотрудники = Новый Соответствие;
	
	Если ПустаяСтрока(ТекстЗапроса) ИЛИ НЕ ЗначениеЗаполнено(ДокументыИсправления) Тогда
		Возврат	Сотрудники;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр(ИмяПараметра, ДокументыИсправления);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Сотрудники.Вставить(Выборка[ИмяПоля], Истина);
	КонецЦикла;
	
	Возврат Сотрудники;

КонецФункции // СформироватьСоответствиеСотрудниковСИсправлениями()

// Модуль объекта кадровых документов 

// Создает набор записей регистра, описание объекта метаданных которого передано
//
// Параметры
//  Движение - Объект метаданных, описывающий регистр, по которому производится движение
//
// Возвращаемое значение:
//   новый набор записей переданного регистра
//
Функция НаборЗаписейПоОбъектуМетаданных(Движение)
	
	НаборЗаписей = Неопределено;
	
	Если Метаданные.РегистрыСведений.Содержит(Движение) Тогда
		НаборЗаписей = РегистрыСведений[Движение.Имя].СоздатьНаборЗаписей();
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(Движение) Тогда
		НаборЗаписей = РегистрыНакопления[Движение.Имя].СоздатьНаборЗаписей();
	КонецЕсли;
	
	Возврат НаборЗаписей;
	
КонецФункции // НаборДвиженийДокумента()

// Читает движения переданного документа, сохраняет их в соответствие,  
//  а затем очищает
//
// Параметры
//  ДокументСсылка - ДокументСсылка.<ИмяИсправляемогоДокумента>, исправляемый документ, 
//					чьи движения будут исправлены
//  СоответствиеДвижений - соответствие, в этот параметр возвращаются удаленные движения
//  Сотрудники, ФизЛица - соответствия, содержат сотрудников, физлиц, по которым следует  
//                  отбирать движения
//
// Возвращаемое значение:
//   нет
//
Процедура ОбработатьДвиженияИсправляемогоДокумента(ДокументСсылка = Неопределено, СоответствиеДвижений = Неопределено, Сотрудники = Неопределено, ФизЛица = Неопределено, Отказ)
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат;
	КонецЕсли;

	Если СоответствиеДвижений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	Режим = ?(МетаданныеДокумента.Реквизиты.Найти("Сотрудник") = Неопределено, "ПоНесколькимСотрудникам","ПоОдномуСотруднику");
	
	Если Режим = "ПоНесколькимСотрудникам" Тогда
		
		Если НЕ ЗначениеЗаполнено(Сотрудники) Тогда
			Возврат
		КонецЕсли;
		
		Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
			
			Если Движение.Измерения.Найти("Сотрудник") <> Неопределено ИЛИ Движение.Реквизиты.Найти("Сотрудник") <> Неопределено Тогда
				МассивПроверки = Сотрудники;
				ИмяПоля = "Сотрудник";
			ИначеЕсли Движение.Измерения.Найти("ФизЛицо") <> Неопределено ИЛИ Движение.Реквизиты.Найти("ФизЛицо") <> Неопределено Тогда
				МассивПроверки = ФизЛица;
				ИмяПоля = "ФизЛицо";
			Иначе 
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = НаборЗаписейПоОбъектуМетаданных(Движение);
			Если НаборЗаписей = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура(ИмяПоля);
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
			
			НаборЗаписей.Прочитать();
			ВременнаяТЗ = НаборЗаписей.Выгрузить();
			СохраненныеДвижения = СоответствиеДвижений.Получить(Движение.Имя);
			Если СохраненныеДвижения <> Неопределено Тогда
				Для Каждого Строка Из СохраненныеДвижения Цикл
					Если ВременнаяТЗ.Найти(Строка.НомерСтроки, "НомерСтроки") = Неопределено Тогда
						ЗаполнитьЗначенияСвойств(ВременнаяТЗ.Добавить(), Строка);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			УдаляемыеДвижения = ВременнаяТЗ.СкопироватьКолонки();
			Для Каждого ОбъектПроверки Из МассивПроверки Цикл
				СтруктураПоиска[ИмяПоля] = ОбъектПроверки;
				МассивДвижений = ВременнаяТЗ.НайтиСтроки(СтруктураПоиска);
				Для Каждого СтрокаТЗ Из МассивДвижений Цикл
					ЗаполнитьЗначенияСвойств(УдаляемыеДвижения.Добавить(), СтрокаТЗ);
					ВременнаяТЗ.Удалить(СтрокаТЗ);
				КонецЦикла;
			КонецЦикла;
			СоответствиеДвижений.Вставить(Движение.Имя, УдаляемыеДвижения);
			НаборЗаписей.Загрузить(ВременнаяТЗ);
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Отказ = Истина;
				Возврат;
			КонецПопытки;
		КонецЦикла;
		
	ИначеЕсли Режим = "ПоОдномуСотруднику" Тогда
		
		Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
			
			НаборЗаписей = НаборЗаписейПоОбъектуМетаданных(Движение);
			Если НаборЗаписей = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
			НаборЗаписей.Прочитать();
			СоответствиеДвижений.Вставить(Движение.Имя, НаборЗаписей.Выгрузить());
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры // ОбработатьДвиженияИсправляемогоДокумента()

// Восстанавливает движения для переданного документа из переданного соответствия
//
Процедура ВосстановитьДвиженияИсправляемогоДокумента(ДокументСсылка = Неопределено, СоответствиеДвижений = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат;
	КонецЕсли;

	Если СоответствиеДвижений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	Режим = ?(МетаданныеДокумента.Реквизиты.Найти("Сотрудник") = Неопределено, "ПоНесколькимСотрудникам","ПоОдномуСотруднику");	
	
	Если Режим = "ПоНесколькимСотрудникам" Тогда
		
		Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
			
			НаборЗаписей = НаборЗаписейПоОбъектуМетаданных(Движение);
			Если НаборЗаписей = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ВременнаяТЗ = СоответствиеДвижений[Движение.Имя];
			Если ВременнаяТЗ <> Неопределено Тогда
				НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
				Для Каждого СтрокаТЗ Из ВременнаяТЗ Цикл
					ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаТЗ);
				КонецЦикла;
				НаборЗаписей.Записать(Ложь);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Режим = "ПоОдномуСотруднику" Тогда
		
		Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
			
			НаборЗаписей = НаборЗаписейПоОбъектуМетаданных(Движение);
			Если НаборЗаписей = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
			НаборЗаписей.Загрузить(СоответствиеДвижений[Движение.Имя]);
			НаборЗаписей.Записать(Ложь);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьДвиженияИсправляемогоДокумента()

// Процедура - обработчик события "ПередЗаписью" модуля объекта
//
Процедура ИсправлениеКадровогоДокументаПередЗаписью(Отказ, РежимЗаписи, РежимПроведения, ЭтотОбъект, ВосстанавливатьДвижения, ИсправляемыйДокумент, СоответствиеДвижений) Экспорт
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ ЭтотОбъект.ИсправляемыйДокумент.Пустая() Тогда
		Сотрудники	= Новый Массив;
		Физлица		= Новый Массив;
		Если ЭтотОбъект.Метаданные().ТабличныеЧасти.Найти("РаботникиОрганизации") = Неопределено Тогда
			Сотрудники.Добавить(ЭтотОбъект.Сотрудник);
			Физлица.Добавить(ЭтотОбъект.Физлицо);
			
		Иначе
			МассивСтрок = ЭтотОбъект.РаботникиОрганизации.НайтиСтроки(Новый Структура("Сторно", Истина));
			Для Каждого Строка Из МассивСтрок Цикл
				Если Сотрудники.Найти(Строка.Сотрудник) = Неопределено Тогда
					Сотрудники.Добавить(Строка.Сотрудник);
				КонецЕсли;
				Если Физлица.Найти(Строка.Физлицо) = Неопределено Тогда
					Физлица.Добавить(Строка.Физлицо);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		СоответствиеДвижений = ЭтотОбъект.ДвиженияИсправляемогоДокумента.Получить();
		
		Если СоответствиеДвижений = Неопределено Тогда
			СоответствиеДвижений = Новый Соответствие;
		КонецЕсли;

		ОбработатьДвиженияИсправляемогоДокумента(ЭтотОбъект.ИсправляемыйДокумент, СоответствиеДвижений, Сотрудники, Физлица, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ЭтотОбъект.ДвиженияИсправляемогоДокумента = Новый ХранилищеЗначения(СоответствиеДвижений);
	
	КонецЕсли;
		
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		СоответствиеДвижений = ЭтотОбъект.ДвиженияИсправляемогоДокумента.Получить();
		Если СоответствиеДвижений <> Неопределено Тогда
			ЭтотОбъект.ДвиженияИсправляемогоДокумента	= Неопределено;
			
			Если ЭтотОбъект.ИсправляемыйДокумент.Пустая() Тогда
				Запрос = Новый Запрос;
				
				Запрос.УстановитьПараметр("ДокументСсылка",	ЭтотОбъект.Ссылка);
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	Док.ИсправляемыйДокумент
				|ИЗ
				|	Документ." + ЭтотОбъект.Метаданные().Имя + " КАК Док
				|ГДЕ
				|	Док.Ссылка = &ДокументСсылка";
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ИсправляемыйДокумент = Выборка.ИсправляемыйДокумент;
					ВосстанавливатьДвижения		= Истина;
				КонецЕсли;
				
			Иначе
				ИсправляемыйДокумент = ЭтотОбъект.ИсправляемыйДокумент;
				ВосстанавливатьДвижения		= Истина;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи" модуля объекта
//
Процедура ИсправлениеКадровогоДокументаПриЗаписи(Отказ, ВосстанавливатьДвижения, ИсправляемыйДокумент, СоответствиеДвижений) Экспорт
	
	Если ВосстанавливатьДвижения Тогда
		ВосстановитьДвиженияИсправляемогоДокумента(ИсправляемыйДокумент, СоответствиеДвижений);
		ВосстанавливатьДвижения = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует сторно-записи по перерассчитываемому документу
//
Процедура СформироватьСторноЗаписиПоПерерассчитываемомуДокументу(ПерерассчитываемыйДокумент = Неопределено, ВыборкаПоШапкеДокумента = Неопределено, НаборОсновныеНачисления = Неопределено, НаборДополнительныеНачисления = Неопределено, НаборУдержания = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда // по переданному документу заведомо нет движений
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	Запрос.УстановитьПараметр("ПериодРегистрации", 			ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("ДокументИсправление",		ВыборкаПоШапкеДокумента.Ссылка);
	
	Если НаборОсновныеНачисления <> Неопределено Тогда // выполним запрос по основным начислениям
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеНачисления.Сотрудник,
		|	ОсновныеНачисления.ВидРасчета,
		|	ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
		|	ОсновныеНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
		|	ОсновныеНачисления.Показатель1,
		|	ОсновныеНачисления.Показатель2,
		|	ОсновныеНачисления.Показатель3,
		|	ОсновныеНачисления.Показатель4,
		|	ОсновныеНачисления.Показатель5,
		|	ОсновныеНачисления.Показатель6,
		|	-ОсновныеНачисления.Результат - ЕСТЬNULL(СУММА(СторноНачисления.Результат), 0) КАК Результат,
		|	-ОсновныеНачисления.ОтработаноДней - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДней), 0) КАК ОтработаноДней,
		|	-ОсновныеНачисления.ОтработаноДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДнейПоПятидневке), 0) КАК ОтработаноДнейПоПятидневке,
		|	-ОсновныеНачисления.НормаДней - ЕСТЬNULL(СУММА(СторноНачисления.НормаДней), 0) КАК НормаДней,
		|	-ОсновныеНачисления.НормаЧасов - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасов), 0) КАК НормаЧасов,
		|	-ОсновныеНачисления.НормаДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаДнейПоПятидневке), 0) КАК НормаДнейПоПятидневке,
		|	-ОсновныеНачисления.УчитываемыеДни - ЕСТЬNULL(СУММА(СторноНачисления.УчитываемыеДни), 0) КАК УчитываемыеДни,
		|	-ОсновныеНачисления.УчитываемыеЧасы - ЕСТЬNULL(СУММА(СторноНачисления.УчитываемыеЧасы), 0) КАК УчитываемыеЧасы,
		|	-ОсновныеНачисления.КалендарныхДней - ЕСТЬNULL(СУММА(СторноНачисления.КалендарныхДней), 0) КАК КалендарныхДней,
		|	ОсновныеНачисления.ПодразделениеОрганизации,
		|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
		|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	ОсновныеНачисления.ДополнительныеДанные,
		|	ОсновныеНачисления.ДатаНачалаСобытия,
		|	ОсновныеНачисления.ДатаНачалаСобытия,
		|	ОсновныеНачисления.ПериодДействияНачало,
		|	ОсновныеНачисления.ПериодДействияКонец,
		|	ОсновныеНачисления.ГрафикРаботы,
		|	ОсновныеНачисления.ВидУчетаВремени,
		|	ОсновныеНачисления.Регистратор КАК СторнируемыйДокумент,
		|	ЛОЖЬ КАК Авторасчет,
		|	ИСТИНА КАК Сторно,
		|	НЕОПРЕДЕЛЕНО КАК ВариантОбработкиЗаписиПриОтраженииВРеглУчете,
		|	ОсновныеНачисления.БазовыйПериодНачало,
		|	ОсновныеНачисления.БазовыйПериодКонец
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК СторноНачисления
		|		ПО ОсновныеНачисления.Сотрудник = СторноНачисления.Сотрудник
		|			И ОсновныеНачисления.ВидРасчета = СторноНачисления.ВидРасчета
		|			И (СторноНачисления.ПериодДействияНачало МЕЖДУ ОсновныеНачисления.ПериодДействияНачало И ОсновныеНачисления.ПериодДействияКонец)
		|			И (СторноНачисления.ПериодДействияКонец МЕЖДУ ОсновныеНачисления.ПериодДействияНачало И ОсновныеНачисления.ПериодДействияКонец)
		|			И (СторноНачисления.ПериодРегистрации > ОсновныеНачисления.ПериодРегистрации)
		|			И (СторноНачисления.ПериодРегистрации <= &ПериодРегистрации)
		|			И (СторноНачисления.СторнируемыйДокумент = ОсновныеНачисления.Регистратор)
		|			И (СторноНачисления.Регистратор <> &ДокументИсправление)
		|ГДЕ
		|	(НЕ ОсновныеНачисления.Сторно)
		|	И ОсновныеНачисления.Регистратор = &ПерерассчитываемыйДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеНачисления.Сотрудник,
		|	ОсновныеНачисления.ВидРасчета,
		|	ОсновныеНачисления.Показатель1,
		|	ОсновныеНачисления.Показатель2,
		|	ОсновныеНачисления.Показатель3,
		|	ОсновныеНачисления.Показатель4,
		|	ОсновныеНачисления.Показатель5,
		|	ОсновныеНачисления.Показатель6,
		|	ОсновныеНачисления.ПодразделениеОрганизации,
		|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
		|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	ОсновныеНачисления.ДополнительныеДанные,
		|	ОсновныеНачисления.ДатаНачалаСобытия,
		|	ОсновныеНачисления.ПериодДействияНачало,
		|	ОсновныеНачисления.ПериодДействияКонец,
		|	ОсновныеНачисления.ГрафикРаботы,
		|	ОсновныеНачисления.ВидУчетаВремени,
		|	ОсновныеНачисления.Регистратор,
		|	ОсновныеНачисления.Результат,
		|	ОсновныеНачисления.НормаДней,
		|	ОсновныеНачисления.НормаЧасов,
		|	ОсновныеНачисления.НормаДнейПоПятидневке,
		|	ОсновныеНачисления.ОтработаноДней,
		|	ОсновныеНачисления.ОтработаноЧасов,
		|	ОсновныеНачисления.ОтработаноДнейПоПятидневке,
		|	ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени,
		|	ОсновныеНачисления.ВидРасчета.ЗачетНормыВремени,
		|	ОсновныеНачисления.БазовыйПериодНачало,
		|	ОсновныеНачисления.БазовыйПериодКонец,
		|	ОсновныеНачисления.УчитываемыеДни,
		|	ОсновныеНачисления.УчитываемыеЧасы,
		|	ОсновныеНачисления.КалендарныхДней";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Движение = НаборОсновныеНачисления.Добавить();
	
			ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоШапкеДокумента);
			ЗаполнитьЗначенияСвойств(Движение, Выборка);

		КонецЦикла;
		
	КонецЕсли;
	
	Если НаборДополнительныеНачисления <> Неопределено Тогда // выполним запрос по дополнительным начислениям
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеНачисления.Сотрудник,
		|	ДополнительныеНачисления.ВидРасчета,
		|	ДополнительныеНачисления.Показатель1,
		|	ДополнительныеНачисления.Показатель2,
		|	ДополнительныеНачисления.Показатель3,
		|	ДополнительныеНачисления.Показатель4,
		|	ДополнительныеНачисления.Показатель5,
		|	ДополнительныеНачисления.Показатель6,
		|	-ДополнительныеНачисления.Результат КАК Результат,
		|	ДополнительныеНачисления.ПодразделениеОрганизации,
		|	ДополнительныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
		|	ДополнительныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	ДополнительныеНачисления.ДатаНачалаСобытия,
		|	ДополнительныеНачисления.ГрафикРаботы,
		|	ЛОЖЬ КАК Авторасчет,
		|	ИСТИНА КАК Сторно,
		|	ДополнительныеНачисления.Регистратор КАК СторнируемыйДокумент,
		|	ДополнительныеНачисления.ЧислоМесяцев,
		|	ДополнительныеНачисления.БазовыйПериодНачало,
		|	ДополнительныеНачисления.БазовыйПериодКонец
		|ИЗ
		|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисления
		|ГДЕ
		|	(НЕ ДополнительныеНачисления.Сторно)
		|	И ДополнительныеНачисления.Регистратор = &ПерерассчитываемыйДокумент";
		
		// выполним запрос по дополнительным начислениям
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
		
			Движение = НаборДополнительныеНачисления.Добавить();
		
			ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента);
			ЗаполнитьЗначенияСвойств(Движение,Выборка);
			
			Движение.ПериодРегистрации   = ВыборкаПоШапкеДокумента.ПериодРегистрации;

		КонецЦикла;
		
	КонецЕсли;
	
	Если НаборУдержания <> Неопределено Тогда // выполним запрос по удержаниям
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдержанияРаботниковОрганизаций.Сотрудник,
		|	УдержанияРаботниковОрганизаций.ВидРасчета,
		|	УдержанияРаботниковОрганизаций.Показатель1,
		|	УдержанияРаботниковОрганизаций.Показатель2,
		|	УдержанияРаботниковОрганизаций.Показатель3,
		|	УдержанияРаботниковОрганизаций.Показатель4,
		|	УдержанияРаботниковОрганизаций.Показатель5,
		|	УдержанияРаботниковОрганизаций.Показатель6,
		|	-УдержанияРаботниковОрганизаций.Результат КАК Результат,
		|	УдержанияРаботниковОрганизаций.ПериодРасчетаСреднегоЗаработкаНачало,
		|	УдержанияРаботниковОрганизаций.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	УдержанияРаботниковОрганизаций.ДатаНачалаСобытия,
		|	УдержанияРаботниковОрганизаций.ГрафикРаботы,
		|	ЛОЖЬ КАК Авторасчет,
		|	ИСТИНА КАК Сторно,
		|	УдержанияРаботниковОрганизаций.Регистратор КАК СторнируемыйДокумент,
		|	УдержанияРаботниковОрганизаций.БазовыйПериодНачало,
		|	УдержанияРаботниковОрганизаций.БазовыйПериодКонец
		|ИЗ
		|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизаций
		|ГДЕ
		|	(НЕ УдержанияРаботниковОрганизаций.Сторно)
		|	И УдержанияРаботниковОрганизаций.Регистратор = &ПерерассчитываемыйДокумент";
		
		// выполним запрос по дополнительным начислениям
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Движение = НаборУдержания.Добавить();

			ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента);
			ЗаполнитьЗначенияСвойств(Движение,Выборка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьСторноЗаписиПоПерерассчитываемомуДокументу()

// Определяет, можно ли изменять документ "задним числом", т.е. проверяет
//   отсутствие исправлений и сторнирований.
//
// Параметры
//  ДокументСсылка - ссылка на документ, включенный в механизм исправлений
//  ОписаниеПричиныОтказа - переменная, куда возвращается описание проблемы
//
// Возвращаемое значение:
//  булево
//
Функция ДокументНельзяИзменятьЗаднимЧислом(ДокументСсылка = Неопределено, ОписаниеПричиныОтказа = "") Экспорт 
	
	ОписаниеПричиныОтказа = "";
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Ложь;
	ИначеЕсли ЗначениеЗаполнено(ПолучитьДокументИсправление(ДокументСсылка)) Тогда
		ОписаниеПричиныОтказа = "Документ был исправлен, перерасчет документа ""задним числом"" запрещен!";
		Возврат Истина;
	ИначеЕсли ЗначениеЗаполнено(ПолучитьДокументСторнирование(ДокументСсылка)) Тогда
		ОписаниеПричиныОтказа = "Документ был сторнирован, перерасчет документа ""задним числом"" запрещен!";
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции

// Функция строит текст запроса для проверки отражения зарплаты в регламентированном учете
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция СформироватьТекстЗапросаДляПроверкиОтраженияЗарплатыВРеглУчете() Экспорт 
	
	// Выбор всех расчетных данных и данных по бух. регистру
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Начисления.ОбособленноеПодразделение КАК Организация,
	|	Начисления.ПериодРегистрации КАК ПериодРегистрации,
	|	Начисления.ФизЛицо,
	|
	|	Начисления.Результат КАК Начислено,
	|	0 КАК НачисленоБух,
	|	Начисления.Результат КАК РазностьНачислено,
	|
	|	0 КАК ИПН,
	|	0 КАК ИПНБух,
	|	0 КАК РазностьИПН,
	|
	|	0 КАК ОПВ,
	|	0 КАК ОПВБух,
	|	0 КАК РазностьОПВ,
	|
	|	0 КАК Удержано,
	|	0 КАК УдержаноБух,
	|	0 КАК РазностьУдержано,
	|
	|	0 КАК СоциальныеОтчисления,
	|	0 КАК СоциальныеОтчисленияБух,
	|	0 КАК РазностьСоциальныеОтчисления,
	|
	|	0 КАК СоциальныйНалог,
	|	0 КАК СоциальныйНалогБух,
	|	0 КАК РазностьСоциальныйНалог,
	|
	|	0 КАК ОППВ,
	|	0 КАК ОППВБух,
	|	0 КАК РазностьОППВ,
	|
	|	0 КАК ВОСМС,
	|	0 КАК ВОСМСБух,
	|	0 КАК РазностьВОСМС,
	|
	|	0 КАК ООСМС,
	|	0 КАК ООСМСБух,
	|	0 КАК РазностьООСМС,
	|
	|	0 КАК ОПВР,
	|	0 КАК ОПВРБух,
	|	0 КАК РазностьОПВР,
	|
	|	0 КАК ПениВОСМС,
	|	0 КАК ПениВОСМСБух,
	|	0 КАК РазностьПениВОСМС,
	|
	|	0 КАК ПениООСМС,
	|	0 КАК ПениООСМСБух,
	|	0 КАК РазностьПениООСМС,
	|
	|	0 КАК ПениОПВ,
	|	0 КАК ПениОПВБух,
	|	0 КАК РазностьПениОПВ,
	|
	|	0 КАК ПениСО,
	|	0 КАК ПениСОБух,
	|	0 КАК РазностьПениСО,
	|
	|	0 КАК ПениОППВ,
	|	0 КАК ПениОППВБух,
	|	0 КАК РазностьПениОППВ,
	|
	|	0 КАК ПениОПВР,
	|	0 КАК ПениОПВРБух,
	|	0 КАК РазностьПениОПВР,
	|
	|	Начисления.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|ГДЕ
	|	Начисления.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	|	И НЕ Начисления.ВидРасчета.ЯвляетсяПрочимДоходом
	|	И Начисления.Результат <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.ОбособленноеПодразделение КАК Организация,
	|	НАЧАЛОПЕРИОДА(Начисления.ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации,
	|	Начисления.ФизЛицо,
	|
	|	Начисления.Результат КАК Начислено,
	|	0 КАК НачисленоБух,
	|	Начисления.Результат КАК РазностьНачислено,
	|
	|	0 КАК ИПН,
	|	0 КАК ИПНБух,
	|	0 КАК РазностьИПН,
	|
	|	0 КАК ОПВ,
	|	0 КАК ОПВБух,
	|	0 КАК РазностьОПВ,
	|
	|	0 КАК Удержано,
	|	0 КАК УдержаноБух,
	|	0 КАК РазностьУдержано,
	|
	|	0 КАК СоциальныеОтчисления,
	|	0 КАК СоциальныеОтчисленияБух,
	|	0 КАК РазностьСоциальныеОтчисления,
	|
	|	0 КАК СоциальныйНалог,
	|	0 КАК СоциальныйНалогБух,
	|	0 КАК РазностьСоциальныйНалог,
	|
	|	0 КАК ОППВ,
	|	0 КАК ОППВБух,
	|	0 КАК РазностьОППВ,
	|
	|	0 КАК ВОСМС,
	|	0 КАК ВОСМСБух,
	|	0 КАК РазностьВОСМС,
	|
	|	0 КАК ООСМС,
	|	0 КАК ООСМСБух,
	|	0 КАК РазностьООСМС,
	|
	|	0 КАК ОПВР,
	|	0 КАК ОПВРБух,
	|	0 КАК РазностьОПВР,
	|
	|	0 КАК ПениВОСМС,
	|	0 КАК ПениВОСМСБух,
	|	0 КАК РазностьПениВОСМС,
	|
	|	0 КАК ПениООСМС,
	|	0 КАК ПениООСМСБух,
	|	0 КАК РазностьПениООСМС,
	|
	|	0 КАК ПениОПВ,
	|	0 КАК ПениОПВБух,
	|	0 КАК РазностьПениОПВ,
	|
	|	0 КАК ПениСО,
	|	0 КАК ПениСОБух,
	|	0 КАК РазностьПениСО,
	|
	|	0 КАК ПениОППВ,
	|	0 КАК ПениОППВБух,
	|	0 КАК РазностьПениОППВ,
	|
	|	0 КАК ПениОПВР,
	|	0 КАК ПениОПВРБух,
	|	0 КАК РазностьПениОПВР,
	|
	|	Начисления.Регистратор
	|ИЗ
	|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Начисления
	|ГДЕ
	|	Начисления.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	|	И НЕ Начисления.ВидРасчета.ЯвляетсяПрочимДоходом
	|	И Начисления.Результат <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИПНСведенияОДоходах.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации,
	|	ИПНСведенияОДоходах.ФизЛицо,
	|
	|	ИПНСведенияОДоходах.СуммаДохода КАК Начислено,
	|	0 КАК НачисленоБух,
	|	ИПНСведенияОДоходах.СуммаДохода КАК РазностьНачислено,
	|
	|	0 КАК ИПН,
	|	0 КАК ИПНБух,
	|	0 КАК РазностьИПН,
	|
	|	0 КАК ОПВ,
	|	0 КАК ОПВБух,
	|	0 КАК РазностьОПВ,
	|
	|	0 КАК Удержано,
	|	0 КАК УдержаноБух,
	|	0 КАК РазностьУдержано,
	|
	|	0 КАК СоциальныеОтчисления,
	|	0 КАК СоциальныеОтчисленияБух,
	|	0 КАК РазностьСоциальныеОтчисления,
	|
	|	0 КАК СоциальныйНалог,
	|	0 КАК СоциальныйНалогБух,
	|	0 КАК РазностьСоциальныйНалог,
	|
	|	0 КАК ОППВ,
	|	0 КАК ОППВБух,
	|	0 КАК РазностьОППВ,
	|
	|	0 КАК ВОСМС,
	|	0 КАК ВОСМСБух,
	|	0 КАК РазностьВОСМС,
	|
	|	0 КАК ООСМС,
	|	0 КАК ООСМСБух,
	|	0 КАК РазностьООСМС,
	|
	|	0 КАК ОПВР,
	|	0 КАК ОПВРБух,
	|	0 КАК РазностьОПВР,
	|
	|	0 КАК ПениВОСМС,
	|	0 КАК ПениВОСМСБух,
	|	0 КАК РазностьПениВОСМС,
	|
	|	0 КАК ПениООСМС,
	|	0 КАК ПениООСМСБух,
	|	0 КАК РазностьПениООСМС,
	|
	|	0 КАК ПениОПВ,
	|	0 КАК ПениОПВБух,
	|	0 КАК РазностьПениОПВ,
	|
	|	0 КАК ПениСО,
	|	0 КАК ПениСОБух,
	|	0 КАК РазностьПениСО,
	|
	|	0 КАК ПениОППВ,
	|	0 КАК ПениОППВБух,
	|	0 КАК РазностьПениОППВ,
	|
	|	0 КАК ПениОПВР,
	|	0 КАК ПениОПВРБух,
	|	0 КАК РазностьПениОПВР,
	|
	|	ИПНСведенияОДоходах.Регистратор
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	|ГДЕ
	|	ИПНСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	|	И (ИПНСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения
	|		И ИПНСведенияОДоходах.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыКонтрагентов))
	|	И ИПНСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|	И ИПНСведенияОДоходах.СуммаДохода <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Удержания.ОбособленноеПодразделение КАК Организация,
	|	Удержания.ПериодРегистрации КАК ПериодРегистрации,
	|	Удержания.ФизЛицо,
	|
	|	0 КАК Начислено,
	|	0 КАК НачисленоБух,
	|	0 КАК РазностьНачислено,
	|
	|	0 КАК ИПН,
	|	0 КАК ИПНБух,
	|	0 КАК РазностьИПН,
	|
	|	0 КАК ОПВ,
	|	0 КАК ОПВБух,
	|	0 КАК РазностьОПВ,
	|
	|	Удержания.Результат КАК Удержано,
	|	0 КАК УдержаноБух,
	|	Удержания.Результат КАК РазностьУдержано,
	|
	|	0 КАК СоциальныеОтчисления,
	|	0 КАК СоциальныеОтчисленияБух,
	|	0 КАК РазностьСоциальныеОтчисления,
	|
	|	0 КАК СоциальныйНалог,
	|	0 КАК СоциальныйНалогБух,
	|	0 КАК РазностьСоциальныйНалог,
	|
	|	0 КАК ОППВ,
	|	0 КАК ОППВБух,
	|	0 КАК РазностьОППВ,
	|
	|	0 КАК ВОСМС,
	|	0 КАК ВОСМСБух,
	|	0 КАК РазностьВОСМС,
	|
	|	0 КАК ООСМС,
	|	0 КАК ООСМСБух,
	|	0 КАК РазностьООСМС,
	|
	|	0 КАК ОПВР,
	|	0 КАК ОПВРБух,
	|	0 КАК РазностьОПВР,
	|
	|	0 КАК ПениВОСМС,
	|	0 КАК ПениВОСМСБух,
	|	0 КАК РазностьПениВОСМС,
	|
	|	0 КАК ПениООСМС,
	|	0 КАК ПениООСМСБух,
	|	0 КАК РазностьПениООСМС,
	|
	|	0 КАК ПениОПВ,
	|	0 КАК ПениОПВБух,
	|	0 КАК РазностьПениОПВ,
	|
	|	0 КАК ПениСО,
	|	0 КАК ПениСОБух,
	|	0 КАК РазностьПениСО,
	|
	|	0 КАК ПениОППВ,
	|	0 КАК ПениОППВБух,
	|	0 КАК РазностьПениОППВ,
	|
	|	0 КАК ПениОПВР,
	|	0 КАК ПениОПВРБух,
	|	0 КАК РазностьПениОПВР,
	|
	|	Удержания.Регистратор
	|ИЗ
	|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК Удержания
	|ГДЕ
	|	Удержания.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	|	И Удержания.Результат <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПогашениеЗаймов.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ПогашениеЗаймов.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	ПогашениеЗаймов.ФизЛицо,
	|
	|	0 КАК Начислено,
	|	0 КАК НачисленоБух,
	|	0 КАК РазностьНачислено,
	|
	|	0 КАК ИПН,
	|	0 КАК ИПНБух,
	|	0 КАК РазностьИПН,
	|
	|	0 КАК ОПВ,
	|	0 КАК ОПВБух,
	|	0 КАК РазностьОПВ,
	|
	|	ПогашениеЗаймов.ОсновнойДолг КАК Удержано,
	|	0 КАК УдержаноБух,
	|	ПогашениеЗаймов.ОсновнойДолг КАК РазностьУдержано,
	|
	|	0 КАК СоциальныеОтчисления,
	|	0 КАК СоциальныеОтчисленияБух,
	|	0 КАК РазностьСоциальныеОтчисления,
	|
	|	0 КАК СоциальныйНалог,
	|	0 КАК СоциальныйНалогБух,
	|	0 КАК РазностьСоциальныйНалог,
	|
	|	0 КАК ОППВ,
	|	0 КАК ОППВБух,
	|	0 КАК РазностьОППВ,
	|
	|	0 КАК ВОСМС,
	|	0 КАК ВОСМСБух,
	|	0 КАК РазностьВОСМС,
	|
	|	0 КАК ООСМС,
	|	0 КАК ООСМСБух,
	|	0 КАК РазностьООСМС,
	|
	|	0 КАК ОПВР,
	|	0 КАК ОПВРБух,
	|	0 КАК РазностьОПВР,
	|
	|	0 КАК ПениВОСМС,
	|	0 КАК ПениВОСМСБух,
	|	0 КАК РазностьПениВОСМС,
	|
	|	0 КАК ПениООСМС,
	|	0 КАК ПениООСМСБух,
	|	0 КАК РазностьПениООСМС,
	|
	|	0 КАК ПениОПВ,
	|	0 КАК ПениОПВБух,
	|	0 КАК РазностьПениОПВ,
	|
	|	0 КАК ПениСО,
	|	0 КАК ПениСОБух,
	|	0 КАК РазностьПениСО,
	|
	|	0 КАК ПениОППВ,
	|	0 КАК ПениОППВБух,
	|	0 КАК РазностьПениОППВ,
	|
	|	0 КАК ПениОПВР,
	|	0 КАК ПениОПВРБух,
	|	0 КАК РазностьПениОПВР,
	|
	|	ПогашениеЗаймов.Регистратор
	|ИЗ
	|	РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций КАК ПогашениеЗаймов
	|ГДЕ
	|	ПогашениеЗаймов.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПогашениеЗаймов.УдержаноИзЗарплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИПНРасчетыСБюджетом.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	ИПНРасчетыСБюджетом.ФизЛицо,
	|
	|	0 КАК Начислено,
	|	0 КАК НачисленоБух,
	|	0 КАК РазностьНачислено,
	|
	|	ИПНРасчетыСБюджетом.Налог КАК ИПН,
	|	0 КАК ИПНБух,
	|	ИПНРасчетыСБюджетом.Налог КАК РазностьИПН,
	|
	|	0 КАК ОПВ,
	|	0 КАК ОПВБух,
	|	0 КАК РазностьОПВ,
	|
	|	0 КАК Удержано,
	|	0 КАК УдержаноБух,
	|	0 КАК РазностьУдержано,
	|
	|	0 КАК СоциальныеОтчисления,
	|	0 КАК СоциальныеОтчисленияБух,
	|	0 КАК РазностьСоциальныеОтчисления,
	|
	|	0 КАК СоциальныйНалог,
	|	0 КАК СоциальныйНалогБух,
	|	0 КАК РазностьСоциальныйНалог,
	|
	|	0 КАК ОППВ,
	|	0 КАК ОППВБух,
	|	0 КАК РазностьОППВ,
	|
	|	0 КАК ВОСМС,
	|	0 КАК ВОСМСБух,
	|	0 КАК РазностьВОСМС,
	|
	|	0 КАК ООСМС,
	|	0 КАК ООСМСБух,
	|	0 КАК РазностьООСМС,
	|
	|	0 КАК ОПВР,
	|	0 КАК ОПВРБух,
	|	0 КАК РазностьОПВР,
	|
	|	0 КАК ПениВОСМС,
	|	0 КАК ПениВОСМСБух,
	|	0 КАК РазностьПениВОСМС,
	|
	|	0 КАК ПениООСМС,
	|	0 КАК ПениООСМСБух,
	|	0 КАК РазностьПениООСМС,
	|
	|	0 КАК ПениОПВ,
	|	0 КАК ПениОПВБух,
	|	0 КАК РазностьПениОПВ,
	|
	|	0 КАК ПениСО,
	|	0 КАК ПениСОБух,
	|	0 КАК РазностьПениСО,
	|
	|	0 КАК ПениОППВ,
	|	0 КАК ПениОППВБух,
	|	0 КАК РазностьПениОППВ,
	|
	|	0 КАК ПениОПВР,
	|	0 КАК ПениОПВРБух,
	|	0 КАК РазностьПениОПВР,
	|
	|	ИПНРасчетыСБюджетом.Регистратор
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|ГДЕ
	|	ИПНРасчетыСБюджетом.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И НЕ ИПНРасчетыСБюджетом.НеОтражатьВРеглУчете
	|	И ИПНРасчетыСБюджетом.Налог <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОПВРасчетыСФондами.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	ОПВРасчетыСФондами.ФизЛицо,
	|
	|	0 КАК Начислено,
	|	0 КАК НачисленоБух,
	|	0 КАК РазностьНачислено,
	|
	|	0 КАК ИПН,
	|	0 КАК ИПНБух,
	|	0 КАК РазностьИПН,
	|
	|	ВЫБОР
	|		КОГДА ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОПВРасчетыСФондами.Взнос 
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОПВ,
	|	0 КАК ОПВБух,
	|	ВЫБОР
	|		КОГДА ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОПВРасчетыСФондами.Взнос 
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьОПВ,
	|
	|	0 КАК Удержано,
	|	0 КАК УдержаноБух,
	|	0 КАК РазностьУдержано,
	|
	|	0 КАК СоциальныеОтчисления,
	|	0 КАК СоциальныеОтчисленияБух,
	|	0 КАК РазностьСоциальныеОтчисления,
	|
	|	0 КАК СоциальныйНалог,
	|	0 КАК СоциальныйНалогБух,
	|	0 КАК РазностьСоциальныйНалог,
	|
	|	0 КАК ОППВ,
	|	0 КАК ОППВБух,
	|	0 КАК РазностьОППВ,
	|
	|	0 КАК ВОСМС,
	|	0 КАК ВОСМСБух,
	|	0 КАК РазностьВОСМС,
	|
	|	0 КАК ООСМС,
	|	0 КАК ООСМСБух,
	|	0 КАК РазностьООСМС,
	|
	|	0 КАК ОПВР,
	|	0 КАК ОПВРБух,
	|	0 КАК РазностьОПВР,
	|
	|	0 КАК ПениВОСМС,
	|	0 КАК ПениВОСМСБух,
	|	0 КАК РазностьПениВОСМС,
	|
	|	0 КАК ПениООСМС,
	|	0 КАК ПениООСМСБух,
	|	0 КАК РазностьПениООСМС,
	|
	|	ВЫБОР
	|		КОГДА ОПВРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОПВРасчетыСФондами.Взнос 
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПениОПВ,
	|	0 КАК ПениОПВБух,
	|	ВЫБОР
	|		КОГДА ОПВРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОПВРасчетыСФондами.Взнос 
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьПениОПВ,
	|
	|	0 КАК ПениСО,
	|	0 КАК ПениСОБух,
	|	0 КАК РазностьПениСО,
	|
	|	0 КАК ПениОППВ,
	|	0 КАК ПениОППВБух,
	|	0 КАК РазностьПениОППВ,
	|
	|	0 КАК ПениОПВР,
	|	0 КАК ПениОПВРБух,
	|	0 КАК РазностьПениОПВР,
	|
	|	ОПВРасчетыСФондами.Регистратор
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|ГДЕ
	|	ОПВРасчетыСФондами.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И НЕ ОПВРасчетыСФондами.НеОтражатьВРеглУчете
	|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ОПВРасчетыСФондами.Взнос <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СОРасчетыСФондами.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	СОРасчетыСФондами.ФизЛицо,
	|
	|	0 КАК Начислено,
	|	0 КАК НачисленоБух,
	|	0 КАК РазностьНачислено,
	|
	|	0 КАК ИПН,
	|	0 КАК ИПНБух,
	|	0 КАК РазностьИПН,
	|
	|	0 КАК ОПВ,
	|	0 КАК ОПВБух,
	|	0 КАК РазностьОПВ,
	|
	|	0 КАК Удержано,
	|	0 КАК УдержаноБух,
	|	0 КАК РазностьУдержано,
	|
	|	ВЫБОР
	|		КОГДА СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА СОРасчетыСФондами.Отчисление
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СоциальныеОтчисления,
	|	0 КАК СоциальныеОтчисленияБух,
	|	ВЫБОР
	|		КОГДА СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА СОРасчетыСФондами.Отчисление
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьСоциальныеОтчисления,
	|
	|	0 КАК СоциальныйНалог,
	|	0 КАК СоциальныйНалогБух,
	|	0 КАК РазностьСоциальныйНалог,
	|
	|	0 КАК ОППВ,
	|	0 КАК ОППВБух,
	|	0 КАК РазностьОППВ,
	|
	|	0 КАК ВОСМС,
	|	0 КАК ВОСМСБух,
	|	0 КАК РазностьВОСМС,
	|
	|	0 КАК ООСМС,
	|	0 КАК ООСМСБух,
	|	0 КАК РазностьООСМС,
	|
	|	0 КАК ОПВР,
	|	0 КАК ОПВРБух,
	|	0 КАК РазностьОПВР,
	|
	|	0 КАК ПениВОСМС,
	|	0 КАК ПениВОСМСБух,
	|	0 КАК РазностьПениВОСМС,
	|
	|	0 КАК ПениООСМС,
	|	0 КАК ПениООСМСБух,
	|	0 КАК РазностьПениООСМС,
	|
	|	0 КАК ПениОПВ,
	|	0 КАК ПениОПВБух,
	|	0 КАК РазностьПениОПВ,
	|
	|	ВЫБОР
	|		КОГДА СОРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА СОРасчетыСФондами.Отчисление
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПениСО,
	|	0 КАК ПениСОБух,
	|	ВЫБОР
	|		КОГДА СОРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА СОРасчетыСФондами.Отчисление
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьПениСО,
	|
	|	0 КАК ПениОППВ,
	|	0 КАК ПениОППВБух,
	|	0 КАК РазностьПениОППВ,
	|
	|	0 КАК ПениОПВР,
	|	0 КАК ПениОПВРБух,
	|	0 КАК РазностьПениОПВР,
	|
	|	СОРасчетыСФондами.Регистратор
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|ГДЕ
	|	СОРасчетыСФондами.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И СОРасчетыСФондами.Отчисление <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СНИсчисленный.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(СНИсчисленный.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	СНИсчисленный.ФизЛицо,
	|
	|	0 КАК Начислено,
	|	0 КАК НачисленоБух,
	|	0 КАК РазностьНачислено,
	|
	|	0 КАК ИПН,
	|	0 КАК ИПНБух,
	|	0 КАК РазностьИПН,
	|
	|	0 КАК ОПВ,
	|	0 КАК ОПВБух,
	|	0 КАК РазностьОПВ,
	|
	|	0 КАК Удержано,
	|	0 КАК УдержаноБух,
	|	0 КАК РазностьУдержано,
	|
	|	0 КАК СоциальныеОтчисления,
	|	0 КАК СоциальныеОтчисленияБух,
	|	0 КАК РазностьСоциальныеОтчисления,
	|
	|	СНИсчисленный.Налог КАК СоциальныйНалог,
	|	0 КАК СоциальныйНалогБух,
	|	СНИсчисленный.Налог КАК РазностьСоциальныйНалог,
	|
	|	0 КАК ОППВ,
	|	0 КАК ОППВБух,
	|	0 КАК РазностьОППВ,
	|
	|	0 КАК ВОСМС,
	|	0 КАК ВОСМСБух,
	|	0 КАК РазностьВОСМС,
	|
	|	0 КАК ООСМС,
	|	0 КАК ООСМСБух,
	|	0 КАК РазностьООСМС,
	|
	|	0 КАК ОПВР,
	|	0 КАК ОПВРБух,
	|	0 КАК РазностьОПВР,
	|
	|	0 КАК ПениВОСМС,
	|	0 КАК ПениВОСМСБух,
	|	0 КАК РазностьПениВОСМС,
	|
	|	0 КАК ПениООСМС,
	|	0 КАК ПениООСМСБух,
	|	0 КАК РазностьПениООСМС,
	|
	|	0 КАК ПениОПВ,
	|	0 КАК ПениОПВБух,
	|	0 КАК РазностьПениОПВ,
	|
	|	0 КАК ПениСО,
	|	0 КАК ПениСОБух,
	|	0 КАК РазностьПениСО,
	|
	|	0 КАК ПениОППВ,
	|	0 КАК ПениОППВБух,
	|	0 КАК РазностьПениОППВ,
	|
	|	0 КАК ПениОПВР,
	|	0 КАК ПениОПВРБух,
	|	0 КАК РазностьПениОПВР,
	|
	|	СНИсчисленный.Регистратор
	|ИЗ
	|	РегистрНакопления.СНИсчисленный КАК СНИсчисленный
	|ГДЕ
	|	СНИсчисленный.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И НЕ СНИсчисленный.НеОтражатьВРеглУчете
	|	И СНИсчисленный.Налог <> 0
	|		
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОППВРасчетыСФондами.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	ОППВРасчетыСФондами.ФизЛицо,
	|
	|	0 КАК Начислено,
	|	0 КАК НачисленоБух,
	|	0 КАК РазностьНачислено,
	|
	|	0 КАК ИПН,
	|	0 КАК ИПНБух,
	|	0 КАК РазностьИПН,
	|
	|	0 КАК ОПВ,
	|	0 КАК ОПВБух,
	|	0 КАК РазностьОПВ,
	|
	|	0 КАК Удержано,
	|	0 КАК УдержаноБух,
	|	0 КАК РазностьУдержано,
	|
	|	0 КАК СоциальныеОтчисления,
	|	0 КАК СоциальныеОтчисленияБух,
	|	0 КАК РазностьСоциальныеОтчисления,
	|
	|	0 КАК СоциальныйНалог,
	|	0 КАК СоциальныйНалогБух,
	|	0 КАК РазностьСоциальныйНалог,
	|
	|	ВЫБОР
	|		КОГДА ОППВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОППВРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОППВ,
	|	0 КАК ОППВБух,
	|	ВЫБОР
	|		КОГДА ОППВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОППВРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьОППВ,
	|
	|	0 КАК ВОСМС,
	|	0 КАК ВОСМСБух,
	|	0 КАК РазностьВОСМС,
	|
	|	0 КАК ООСМС,
	|	0 КАК ООСМСБух,
	|	0 КАК РазностьООСМС,
	|
	|	0 КАК ОПВР,
	|	0 КАК ОПВРБух,
	|	0 КАК РазностьОПВР,
	|
	|	0 КАК ПениВОСМС,
	|	0 КАК ПениВОСМСБух,
	|	0 КАК РазностьПениВОСМС,
	|
	|	0 КАК ПениООСМС,
	|	0 КАК ПениООСМСБух,
	|	0 КАК РазностьПениООСМС,
	|
	|	0 КАК ПениОПВ,
	|	0 КАК ПениОПВБух,
	|	0 КАК РазностьПениОПВ,
	|
	|	0 КАК ПениСО,
	|	0 КАК ПениСОБух,
	|	0 КАК РазностьПениСО,
	|
	|	ВЫБОР
	|		КОГДА ОППВРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОППВРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПениОППВ,
	|	0 КАК ПениОППВБух,
	|	ВЫБОР
	|		КОГДА ОППВРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОППВРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьПениОППВ,
	|
	|	0 КАК ПениОПВР,
	|	0 КАК ПениОПВРБух,
	|	0 КАК РазностьПениОПВР,
	|
	|	ОППВРасчетыСФондами.Регистратор
	|ИЗ
	|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
	|ГДЕ
	|	ОППВРасчетыСФондами.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ОППВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОППВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ОППВРасчетыСФондами.Взнос <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ООСМСРасчетыСФондами.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	ООСМСРасчетыСФондами.ФизЛицо,
	|
	|	0 КАК Начислено,
	|	0 КАК НачисленоБух,
	|	0 КАК РазностьНачислено,
	|
	|	0 КАК ИПН,
	|	0 КАК ИПНБух,
	|	0 КАК РазностьИПН,
	|
	|	0 КАК ОПВ,
	|	0 КАК ОПВБух,
	|	0 КАК РазностьОПВ,
	|
	|	0 КАК Удержано,
	|	0 КАК УдержаноБух,
	|	0 КАК РазностьУдержано,
	|
	|	0 КАК СоциальныеОтчисления,
	|	0 КАК СоциальныеОтчисленияБух,
	|	0 КАК РазностьСоциальныеОтчисления,
	|
	|	0 КАК СоциальныйНалог,
	|	0 КАК СоциальныйНалогБух,
	|	0 КАК РазностьСоциальныйНалог,
	|
	|	0 КАК ОППВ,
	|	0 КАК ОППВБух,
	|	0 КАК РазностьОППВ,
	|
	|	0 КАК ВОСМС,
	|	0 КАК ВОСМСБух,
	|	0 КАК РазностьВОСМС,
	|
	|	ВЫБОР
	|		КОГДА ООСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ООСМСРасчетыСФондами.Отчисление
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ООСМС,
	|	0 КАК ООСМСБух,
	|	ВЫБОР
	|		КОГДА ООСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ООСМСРасчетыСФондами.Отчисление
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьООСМС,
	|
	|	0 КАК ОПВР,
	|	0 КАК ОПВРБух,
	|	0 КАК РазностьОПВР,
	|
	|	0 КАК ПениВОСМС,
	|	0 КАК ПениВОСМСБух,
	|	0 КАК РазностьПениВОСМС,
	|
	|	ВЫБОР
	|		КОГДА ООСМСРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ООСМСРасчетыСФондами.Отчисление
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПениООСМС,
	|	0 КАК ПениООСМСБух,
	|	ВЫБОР
	|		КОГДА ООСМСРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ООСМСРасчетыСФондами.Отчисление
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьПениООСМС,
	|
	|	0 КАК ПениОПВ,
	|	0 КАК ПениОПВБух,
	|	0 КАК РазностьПениОПВ,
	|
	|	0 КАК ПениСО,
	|	0 КАК ПениСОБух,
	|	0 КАК РазностьПениСО,
	|
	|	0 КАК ПениОППВ,
	|	0 КАК ПениОППВБух,
	|	0 КАК РазностьПениОППВ,
	|
	|	0 КАК ПениОПВР,
	|	0 КАК ПениОПВРБух,
	|	0 КАК РазностьПениОПВР,
	|
	|	ООСМСРасчетыСФондами.Регистратор
	|ИЗ
	|	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	|ГДЕ
	|	ООСМСРасчетыСФондами.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ООСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ООСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ООСМСРасчетыСФондами.Отчисление <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВОСМСРасчетыСФондами.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	ВОСМСРасчетыСФондами.ФизЛицо,
	|
	|	0 КАК Начислено,
	|	0 КАК НачисленоБух,
	|	0 КАК РазностьНачислено,
	|
	|	0 КАК ИПН,
	|	0 КАК ИПНБух,
	|	0 КАК РазностьИПН,
	|
	|	0 КАК ОПВ,
	|	0 КАК ОПВБух,
	|	0 КАК РазностьОПВ,
	|
	|	0 КАК Удержано,
	|	0 КАК УдержаноБух,
	|	0 КАК РазностьУдержано,
	|
	|	0 КАК СоциальныеОтчисления,
	|	0 КАК СоциальныеОтчисленияБух,
	|	0 КАК РазностьСоциальныеОтчисления,
	|
	|	0 КАК СоциальныйНалог,
	|	0 КАК СоциальныйНалогБух,
	|	0 КАК РазностьСоциальныйНалог,
	|
	|	0 КАК ОППВ,
	|	0 КАК ОППВБух,
	|	0 КАК РазностьОППВ,
	|
	|	ВЫБОР
	|		КОГДА ВОСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ВОСМСРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВОСМС,
	|	0 КАК ВОСМСБух,
	|	ВЫБОР
	|		КОГДА ВОСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ВОСМСРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьВОСМС,
	|
	|	0 КАК ООСМС,
	|	0 КАК ООСМСБух,
	|	0 КАК РазностьООСМС,
	|
	|	0 КАК ОПВР,
	|	0 КАК ОПВРБух,
	|	0 КАК РазностьОПВР,
	|
	|	ВЫБОР
	|		КОГДА ВОСМСРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ВОСМСРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПениВОСМС,
	|	0 КАК ПениВОСМСБух,
	|	ВЫБОР
	|		КОГДА ВОСМСРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ВОСМСРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьПениВОСМС,
	|
	|	0 КАК ПениООСМС,
	|	0 КАК ПениООСМСБух,
	|	0 КАК РазностьПениООСМС,
	|
	|	0 КАК ПениОПВ,
	|	0 КАК ПениОПВБух,
	|	0 КАК РазностьПениОПВ,
	|
	|	0 КАК ПениСО,
	|	0 КАК ПениСОБух,
	|	0 КАК РазностьПениСО,
	|
	|	0 КАК ПениОППВ,
	|	0 КАК ПениОППВБух,
	|	0 КАК РазностьПениОППВ,
	|
	|	0 КАК ПениОПВР,
	|	0 КАК ПениОПВРБух,
	|	0 КАК РазностьПениОПВР,
	|
	|	ВОСМСРасчетыСФондами.Регистратор
	|ИЗ
	|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|ГДЕ
	|	ВОСМСРасчетыСФондами.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И НЕ ВОСМСРасчетыСФондами.НеОтражатьВРеглУчете
	|	И ВОСМСРасчетыСФондами.Взнос <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОПВРРасчетыСФондами.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ОПВРРасчетыСФондами.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	ОПВРРасчетыСФондами.ФизЛицо,
	|
	|	0 КАК Начислено,
	|	0 КАК НачисленоБух,
	|	0 КАК РазностьНачислено,
	|
	|	0 КАК ИПН,
	|	0 КАК ИПНБух,
	|	0 КАК РазностьИПН,
	|
	|	0 КАК ОПВ,
	|	0 КАК ОПВБух,
	|	0 КАК РазностьОПВ,
	|
	|	0 КАК Удержано,
	|	0 КАК УдержаноБух,
	|	0 КАК РазностьУдержано,
	|
	|	0 КАК СоциальныеОтчисления,
	|	0 КАК СоциальныеОтчисленияБух,
	|	0 КАК РазностьСоциальныеОтчисления,
	|
	|	0 КАК СоциальныйНалог,
	|	0 КАК СоциальныйНалогБух,
	|	0 КАК РазностьСоциальныйНалог,
	|
	|	0 КАК ОППВ,
	|	0 КАК ОППВБух,
	|	0 КАК РазностьОППВ,
	|
	|	0 КАК ВОСМС,
	|	0 КАК ВОСМСБух,
	|	0 КАК РазностьВОСМС,
	|
	|	0 КАК ООСМС,
	|	0 КАК ООСМСБух,
	|	0 КАК РазностьООСМС,
	|
	|	ВЫБОР
	|		КОГДА ОПВРРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОПВРРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОПВР,
	|	0 КАК ОПВРБух,
	|	ВЫБОР
	|		КОГДА ОПВРРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОПВРРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьОПВР,
	|
	|	0 КАК ПениВОСМС,
	|	0 КАК ПениВОСМСБух,
	|	0 КАК РазностьПениВОСМС,
	|
	|	0 КАК ПениООСМС,
	|	0 КАК ПениООСМСБух,
	|	0 КАК РазностьПениООСМС,
	|
	|	0 КАК ПениОПВ,
	|	0 КАК ПениОПВБух,
	|	0 КАК РазностьПениОПВ,
	|
	|	0 КАК ПениСО,
	|	0 КАК ПениСОБух,
	|	0 КАК РазностьПениСО,
	|
	|	0 КАК ПениОППВ,
	|	0 КАК ПениОППВБух,
	|	0 КАК РазностьПениОППВ,
	|
	|	ВЫБОР
	|		КОГДА ОПВРРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОПВРРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПениОПВР,
	|	0 КАК ПениОПВРБух,
	|	ВЫБОР
	|		КОГДА ОПВРРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОПВРРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьПениОПВР,
	|
	|	ОПВРРасчетыСФондами.Регистратор
	|ИЗ
	|	РегистрНакопления.ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
	|ГДЕ
	|	ОПВРРасчетыСФондами.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ОПВРРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВРРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ОПВРРасчетыСФондами.Взнос <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Типовой.Ссылка.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(Типовой.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА Типовой.СчетДт = &СчетСН ИЛИ Типовой.СчетКт = &СчетСН ИЛИ Типовой.СчетКт = &СчетООСМС ИЛИ Типовой.СчетКт = &СчетОПВР
	|			ТОГДА Типовой.ФизЛицо 
	|
	|		КОГДА Типовой.СчетДт <> &СчетОплатаТруда И Типовой.СчетКт <> &СчетОплатаТруда 
	|				И Типовой.СубконтоДт1 ССЫЛКА Справочник.Контрагенты
	|				И Типовой.СубконтоДт1 <> Неопределено
	|				И Типовой.СубконтоДт1 <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(Типовой.СубконтоДт1 КАК Справочник.Контрагенты)
	|
	|		КОГДА Типовой.СчетДт <> &СчетОплатаТруда И Типовой.СчетКт <> &СчетОплатаТруда 
	|				И Типовой.СубконтоКт1 ССЫЛКА Справочник.Контрагенты
	|				И Типовой.СубконтоКт1 <> Неопределено
	|				И Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(Типовой.СубконтоКт1 КАК Справочник.Контрагенты)
	|
	|		КОГДА Типовой.СубконтоДт1 ССЫЛКА Справочник.ФизическиеЛица
	|				И Типовой.СубконтоДт1 <> Неопределено
	|				И Типовой.СубконтоДт1 <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(Типовой.СубконтоДт1 КАК Справочник.ФизическиеЛица)
	|
	|		КОГДА Типовой.СубконтоДт2 ССЫЛКА Справочник.ФизическиеЛица
	|				И Типовой.СубконтоДт2 <> Неопределено
	|				И Типовой.СубконтоДт2 <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(Типовой.СубконтоДт2 КАК Справочник.ФизическиеЛица)
	|
	|		КОГДА Типовой.СубконтоДт3 ССЫЛКА Справочник.ФизическиеЛица
	|				И Типовой.СубконтоДт3 <> Неопределено
	|				И Типовой.СубконтоДт3 <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(Типовой.СубконтоДт3 КАК Справочник.ФизическиеЛица)
	|
	|		КОГДА Типовой.СубконтоКт1 ССЫЛКА Справочник.ФизическиеЛица
	|				И Типовой.СубконтоКт1 <> Неопределено
	|				И Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(Типовой.СубконтоКт1 КАК Справочник.ФизическиеЛица)
	|
	|		КОГДА Типовой.СубконтоКт2 ССЫЛКА Справочник.ФизическиеЛица
	|				И Типовой.СубконтоКт2 <> Неопределено
	|				И Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(Типовой.СубконтоКт2 КАК Справочник.ФизическиеЛица)
	|
	|		КОГДА Типовой.СубконтоКт3 ССЫЛКА Справочник.ФизическиеЛица
	|				И Типовой.СубконтоКт3 <> Неопределено
	|				И Типовой.СубконтоКт3 <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(Типовой.СубконтоКт3 КАК Справочник.ФизическиеЛица)
	|
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	КОНЕЦ КАК ФизЛицо,
	|
	|	0 КАК Начислено,
	|	ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетОплатаТруда
	|			ТОГДА Типовой.Сумма
	|		КОГДА Типовой.СчетДт <> &СчетОплатаТруда И Типовой.СчетКт <> &СчетОплатаТруда 
	|				И Типовой.СубконтоКт1 ССЫЛКА Справочник.Контрагенты
	|				И Типовой.СубконтоКт1 <> Неопределено
	|				И Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачисленоБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетОплатаТруда
	|			ТОГДА Типовой.Сумма
	|		КОГДА Типовой.СчетДт <> &СчетОплатаТруда И Типовой.СчетКт <> &СчетОплатаТруда 
	|				И Типовой.СубконтоКт1 ССЫЛКА Справочник.Контрагенты
	|				И Типовой.СубконтоКт1 <> Неопределено
	|				И Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьНачислено,
	|
	|	0 КАК ИПН,
	|	ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетИПН
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ ИПНБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетИПН
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьИПН,
	|
	|	0 КАК ОПВ,
	|	ВЫБОР
	|		КОГДА Типовой.СчетДт = &СчетОплатаТруда И Типовой.СчетКт = &СчетОПВ 
	|           И Типовой.СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы)
	|			И Типовой.СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА Типовой.Сумма
	|		КОГДА Типовой.СчетДт <> &СчетОплатаТруда
	|			И Типовой.СчетКт = &СчетОПВ
	|			И Типовой.СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			И Типовой.СубконтоДт1 ССЫЛКА Справочник.Контрагенты
	|			И Типовой.СубконтоДт1 <> НЕОПРЕДЕЛЕНО
	|			И Типовой.СубконтоДт1 <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОПВБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетДт = &СчетОплатаТруда И Типовой.СчетКт = &СчетОПВ 
	|           И Типовой.СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы)
	|			И Типовой.СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА Типовой.Сумма
	|		КОГДА Типовой.СчетДт <> &СчетОплатаТруда
	|			И Типовой.СчетКт = &СчетОПВ
	|			И Типовой.СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			И Типовой.СубконтоДт1 ССЫЛКА Справочник.Контрагенты
	|			И Типовой.СубконтоДт1 <> НЕОПРЕДЕЛЕНО
	|			И Типовой.СубконтоДт1 <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьОПВ,
	|
	|	0 КАК Удержано,
	|	ВЫБОР
	|		КОГДА Типовой.СчетДт = &СчетОплатаТруда И Типовой.СчетКт <> &СчетОПВ И Типовой.СчетКт <> &СчетИПН И Типовой.СчетКт <> &СчетВОСМС
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УдержаноБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетДт = &СчетОплатаТруда И Типовой.СчетКт <> &СчетОПВ И Типовой.СчетКт <> &СчетИПН И Типовой.СчетКт <> &СчетВОСМС
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьУдержано,
	|
	|	0 КАК СоциальныеОтчисления,
	|	ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетСО И 
	|			ВЫБОР
	|				КОГДА Типовой.СубконтоКт1 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт1 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				КОГДА Типовой.СубконтоКт2 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт2 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ	
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СоциальныеОтчисленияБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетСО И 
	|			ВЫБОР
	|				КОГДА Типовой.СубконтоКт1 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт1 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				КОГДА Типовой.СубконтоКт2 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт2 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ	
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьСоциальныеОтчисления,
	|
	|	0 КАК СоциальныйНалог,
	|	ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетСН
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СоциальныйНалогБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетСН
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьСоциальныйНалог,
	|
	|	0 КАК ОППВ,
	|	ВЫБОР
	|		КОГДА Типовой.СчетДт <> &СчетОплатаТруда И Типовой.СчетКт = &СчетОППВ 
	|           И Типовой.СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы)
	|			И Типовой.СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОППВБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетДт <> &СчетОплатаТруда И Типовой.СчетКт = &СчетОППВ
	|           И Типовой.СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы)
	|			И Типовой.СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьОППВ,
	|
	|	0 КАК ВОСМС,
	|	ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетВОСМС И 
	|			ВЫБОР
	|				КОГДА Типовой.СубконтоКт1 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт1 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				КОГДА Типовой.СубконтоКт2 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт2 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ	
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВОСМСБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетВОСМС И 
	|			ВЫБОР
	|				КОГДА Типовой.СубконтоКт1 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт1 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				КОГДА Типовой.СубконтоКт2 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт2 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ	
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьВОСМС,
	|
	|	0 КАК ООСМС,
	|	ВЫБОР
	|		КОГДА Типовой.СчетДт <> &СчетОплатаТруда И Типовой.СчетКт = &СчетООСМС И 
	|			ВЫБОР
	|				КОГДА Типовой.СубконтоКт1 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт1 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				КОГДА Типовой.СубконтоКт2 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт2 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ	
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ООСМСБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетДт <> &СчетОплатаТруда И Типовой.СчетКт = &СчетООСМС И 
	|			ВЫБОР
	|				КОГДА Типовой.СубконтоКт1 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт1 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				КОГДА Типовой.СубконтоКт2 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт2 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ	
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьООСМС,
	|
	|	0 КАК ОПВР,
	|	ВЫБОР
	|		КОГДА Типовой.СчетДт <> &СчетОплатаТруда И Типовой.СчетКт = &СчетОПВР 
	|           И Типовой.СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя)
	|			И Типовой.СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОПВРБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетДт <> &СчетОплатаТруда И Типовой.СчетКт = &СчетОПВР
	|           И Типовой.СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя)
	|			И Типовой.СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьОПВР,
	|
	|	0 КАК ПениВОСМС,
	|	ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетВОСМС И 
	|			ВЫБОР
	|				КОГДА Типовой.СубконтоКт1 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт1 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				КОГДА Типовой.СубконтоКт1 ССЫЛКА Справочник.НалогиСборыОтчисления
	|						И Типовой.СубконтоКт1 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование)
	|						И Типовой.СубконтоКт2 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт2 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ	
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПениВОСМСБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетВОСМС И 
	|			ВЫБОР
	|				КОГДА Типовой.СубконтоКт1 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт1 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				КОГДА Типовой.СубконтоКт2 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт2 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьПениВОСМС,
	|
	|	0 КАК ПениООСМС,
	|	ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетООСМС И 
	|			ВЫБОР
	|				КОГДА Типовой.СубконтоКт1 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт1 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				КОГДА Типовой.СубконтоКт2 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт2 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПениООСМСБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетООСМС И 
	|			ВЫБОР
	|				КОГДА Типовой.СубконтоКт1 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт1 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				КОГДА Типовой.СубконтоКт2 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт2 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьПениООСМС,
	|
	|	0 КАК ПениОПВ,
	|	ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетОПВ И 
	|			ВЫБОР
	|				КОГДА Типовой.СубконтоКт1 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт1 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				КОГДА Типовой.СубконтоКт1 ССЫЛКА Справочник.НалогиСборыОтчисления
	|						И Типовой.СубконтоКт1 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы)
	|						И Типовой.СубконтоКт2 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт2 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ	
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПениОПВБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетОПВ И 
	|			ВЫБОР
	|				КОГДА Типовой.СубконтоКт1 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт1 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				КОГДА Типовой.СубконтоКт1 ССЫЛКА Справочник.НалогиСборыОтчисления
	|						И Типовой.СубконтоКт1 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы)
	|						И Типовой.СубконтоКт2 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт2 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ	
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьПениОПВ,
	|
	|	0 КАК ПениСО,
	|	ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетСО И 
	|			ВЫБОР
	|				КОГДА Типовой.СубконтоКт1 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт1 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				КОГДА Типовой.СубконтоКт2 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт2 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПениСОБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетСО И 
	|			ВЫБОР
	|				КОГДА Типовой.СубконтоКт1 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт1 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				КОГДА Типовой.СубконтоКт2 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт2 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьПениСО,
	|
	|	0 КАК ПениОППВ,
	|	ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетОППВ И 
	|			ВЫБОР
	|				КОГДА Типовой.СубконтоКт1 ССЫЛКА Справочник.НалогиСборыОтчисления
	|						И Типовой.СубконтоКт1 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы)
	|						И Типовой.СубконтоКт2 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт2 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ	
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПениОППВБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетОППВ И 
	|			ВЫБОР
	|				КОГДА Типовой.СубконтоКт1 ССЫЛКА Справочник.НалогиСборыОтчисления
	|						И Типовой.СубконтоКт1 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы)
	|						И Типовой.СубконтоКт2 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт2 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ	
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьПениОППВ,
	|
	|	0 КАК ПениОПВР,
	|	ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетОПВР И 
	|			ВЫБОР
	|				КОГДА Типовой.СубконтоКт1 ССЫЛКА Справочник.НалогиСборыОтчисления
	|						И Типовой.СубконтоКт1 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя)
	|						И Типовой.СубконтоКт2 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт2 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ	
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПениОПВРБух,
	|	- ВЫБОР
	|		КОГДА Типовой.СчетКт = &СчетОПВР И 
	|			ВЫБОР
	|				КОГДА Типовой.СубконтоКт1 ССЫЛКА Справочник.НалогиСборыОтчисления
	|						И Типовой.СубконтоКт1 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя)
	|						И Типовой.СубконтоКт2 ССЫЛКА Перечисление.ВидыПлатежейВБюджетИФонды
	|						И Типовой.СубконтоКт2 <> НЕОПРЕДЕЛЕНО
	|						И Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.ПустаяСсылка)
	|					ТОГДА Типовой.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ	
	|			ТОГДА Типовой.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьПениОПВР,
	|
	|	Типовой.Ссылка
	|ИЗ
	|	Документ.ОтражениеЗарплатыВРеглУчете.ОтражениеВУчете КАК Типовой
	|ГДЕ
	|	Типовой.Ссылка.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	|	И Типовой.Ссылка.Проведен
	|	И Типовой.Сумма <> 0
	|";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Данные.Начислено,
	|	Данные.НачисленоБух,
	|	Данные.РазностьНачислено,
	|
	|	Данные.ИПН,
	|	Данные.ИПНБух,
	|	Данные.РазностьИПН,
	|
	|	Данные.ОПВ,
	|	Данные.ОПВБух,
	|	Данные.РазностьОПВ,
	|
	|	Данные.Удержано,
	|	Данные.УдержаноБух,
	|	Данные.РазностьУдержано,
	|
	|	Данные.СоциальныеОтчисления,
	|	Данные.СоциальныеОтчисленияБух,
	|	Данные.РазностьСоциальныеОтчисления,
	|
	|	Данные.СоциальныйНалог,
	|	Данные.СоциальныйНалогБух,
	|	Данные.РазностьСоциальныйНалог,
	|	
	|	Данные.ОППВ,
	|	Данные.ОППВБух,
	|	Данные.РазностьОППВ,
	|
	|	Данные.ВОСМС,
	|	Данные.ВОСМСБух,
	|	Данные.РазностьВОСМС,
	|
	|	Данные.ООСМС,
	|	Данные.ООСМСБух,
	|	Данные.РазностьООСМС,
	|
	|	Данные.ОПВР,
	|	Данные.ОПВРБух,
	|	Данные.РазностьОПВР,
	|
	|	Данные.ПениВОСМС,
	|	Данные.ПениВОСМСБух,
	|	Данные.РазностьПениВОСМС,
	|
	|	Данные.ПениООСМС,
	|	Данные.ПениООСМСБух,
	|	Данные.РазностьПениООСМС,
	|
	|	Данные.ПениОПВ,
	|	Данные.ПениОПВБух,
	|	Данные.РазностьПениОПВ,
	|
	|	Данные.ПениСО,
	|	Данные.ПениСОБух,
	|	Данные.РазностьПениСО,
	|
	|	Данные.ПениОППВ,
	|	Данные.ПениОППВБух,
	|	Данные.РазностьПениОППВ,
	|
	|	Данные.ПениОПВР,
	|	Данные.ПениОПВРБух,
	|	Данные.РазностьПениОПВР
	|
	|{ВЫБРАТЬ
	|	Данные.Организация.* КАК Организация,
	|	Данные.ПериодРегистрации КАК ПериодРегистрации,
	|	Данные.ФизЛицо.* КАК ФизЛицо,
	|	Данные.Регистратор
	|	//СВОЙСТВА
	|}
	|ИЗ
	|	(" + ТекстЗапроса + ") КАК Данные
	|//СОЕДИНЕНИЯ
	|
	|{ГДЕ
	|	Данные.Организация.* КАК Организация,
	|	Данные.ПериодРегистрации КАК ПериодРегистрации,
	|	Данные.ФизЛицо.* КАК ФизЛицо,
	|	Данные.Регистратор
	|	//СВОЙСТВА
	|	//КАТЕГОРИИ
	|}
	|{УПОРЯДОЧИТЬ ПО
	|	Данные.Организация.* КАК Организация,
	|	Данные.ПериодРегистрации КАК ПериодРегистрации,
	|	Данные.ФизЛицо.* КАК ФизЛицо,
	|	Данные.Регистратор
	|	//СВОЙСТВА
	|}
	|ИТОГИ 
	|	СУММА(Начислено),
	|	СУММА(НачисленоБух),
	|	СУММА(РазностьНачислено),
	|
	|	СУММА(ИПН),
	|	СУММА(ИПНБух),
	|	СУММА(РазностьИПН),
	|
	|	СУММА(ОПВ),
	|	СУММА(ОПВБух),
	|	СУММА(РазностьОПВ),
	|
	|	СУММА(Удержано),
	|	СУММА(УдержаноБух),
	|	СУММА(РазностьУдержано),
	|
	|	СУММА(СоциальныеОтчисления),
	|	СУММА(СоциальныеОтчисленияБух),
	|	СУММА(РазностьСоциальныеОтчисления),
	|
	|	СУММА(СоциальныйНалог),
	|	СУММА(СоциальныйНалогБух),
	|	СУММА(РазностьСоциальныйНалог),
	|
	|	СУММА(ОППВ),
	|	СУММА(ОППВБух),
	|	СУММА(РазностьОППВ),
	|
	|	СУММА(ВОСМС),
	|	СУММА(ВОСМСБух),
	|	СУММА(РазностьВОСМС),
	|
	|	СУММА(ООСМС),
	|	СУММА(ООСМСБух),
	|	СУММА(РазностьООСМС),
	|
	|	СУММА(ОПВР),
	|	СУММА(ОПВРБух),
	|	СУММА(РазностьОПВР),
	|
	|	СУММА(ПениВОСМС),
	|	СУММА(ПениВОСМСБух),
	|	СУММА(РазностьПениВОСМС),
	|
	|	СУММА(ПениООСМС),
	|	СУММА(ПениООСМСБух),
	|	СУММА(РазностьПениООСМС),
	|
	|	СУММА(ПениОПВ),
	|	СУММА(ПениОПВБух),
	|	СУММА(РазностьПениОПВ),
	|
	|	СУММА(ПениСО),
	|	СУММА(ПениСОБух),
	|	СУММА(РазностьПениСО),
	|
	|	СУММА(ПениОППВ),
	|	СУММА(ПениОППВБух),
	|	СУММА(РазностьПениОППВ),
	|
	|	СУММА(ПениОПВР),
	|	СУММА(ПениОПВРБух),
	|	СУММА(РазностьПениОПВР)
	|
	|ПО ОБЩИЕ
	|
	|{ИТОГИ ПО
	|	Организация.* КАК Организация,
	|	ПериодРегистрации КАК ПериодРегистрации,
	|	ФизЛицо.* КАК ФизЛицо,
	|	Данные.Регистратор
	|	//СВОЙСТВА
	|}
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Получает размер месячного расчетного показателя
//
// Параметры:
//	ДатаАктуальности - дата, на которую нужно получить МРП.
//
// Возвращаемое значение:
//	число, размер МРП на дату, или Неопределено, если МРП на дату не определен.
//
Функция МесячныйРасчетныйПоказатель(ДатаАктуальности) Экспорт
	
	Возврат РегистрыСведений.РегламентированныеРасчетныеПоказатели.ДанныеРазмераМесячногоРасчетногоПоказателя(ДатаАктуальности)["Размер"];
	
КонецФункции

Процедура ПроверитьПерерасчетИПНДоходОтНалоговогоАгентаДо2020(ДокументОбъект) Экспорт
    
   	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасчетУдержанийРаботниковОрганизаций") Тогда
		ИмяДокумента = "РасчетУдержанийРаботниковОрганизаций";
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасчетНалоговПриПоступленииАктивовУслуг") Тогда
		ИмяДокумента = "РасчетНалоговПриПоступленииАктивовУслуг";
	Иначе
		Возврат;
	КонецЕсли;

    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
    |	Работники.Физлицо КАК Физлицо
    |ИЗ
    |	Документ." + ИмяДокумента + ".ИсчисленныйИПН КАК Работники
    |
    |ГДЕ
    |	Работники.Ссылка = &парамРегистратор
    |	И Работники.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |   И Работники.МесяцНалоговогоПериода МЕЖДУ ДАТАВРЕМЯ(2019, 1, 1) И ДАТАВРЕМЯ(2020, 12, 31)";
    
   	Запрос.УстановитьПараметр("парамРегистратор", ДокументОбъект.Ссылка);
    Выборка = Запрос.Выполнить().Выбрать();
    Если Выборка.Количество() > 0 Тогда
		Сообщить("Внимание! Изменен расчет ИПН по доходам от налогового агента (по договорам ГПХ).
                  |В соответствии с Законом РК от 10.12.2020 года № 382-VI, физическим лицам предоставляются вычеты на сумму исчисленных ОПВ и ВОСМС.");
	КонецЕсли;   
    
КонецПроцедуры

Процедура ДополнитьОтработанноеВремяИспытательнымСроком(ИсходныеДанные, ОтработаноВремениОсновное)

	//Проверка Испытательный срок
	НаИспытСроке = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ИспытательныйСрок,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|ГДЕ
	//|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = &Ссылка
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник = &Сотрудник
	|	И ПриемНаРаботуВОрганизациюРаботникиОрганизации.ИспытательныйСрок > 0";
	
	//Запрос.УстановитьПараметр("Ссылка", Стр.Приказ);
	Запрос.УстановитьПараметр("Сотрудник", ИсходныеДанные.Сотрудник);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ОкончаниеИспСрока = ДобавитьМесяц(ВыборкаДетальныеЗаписи.ДатаПриема, ВыборкаДетальныеЗаписи.ИспытательныйСрок);
		Если ОкончаниеИспСрока > ИсходныеДанные.ПериодДействияНачало Тогда
			НаИспытСроке = Истина;
		Иначе
			НаИспытСроке = Ложь;
		КонецЕсли;	
		
	КонецЦикла;
	
	Если НаИспытСроке = Истина Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочееВремяРаботниковОрганизаций.Сотрудник.Физлицо,
		|	РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени,
		|	СУММА(РабочееВремяРаботниковОрганизаций.Дней) КАК Дней,
		|	СУММА(РабочееВремяРаботниковОрганизаций.Часов) КАК Часов
		|ИЗ
		|	РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
		|ГДЕ
		|	РабочееВремяРаботниковОрганизаций.Период МЕЖДУ &датаНач И &ДатаКон
		|	И РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени = &ВидИспользованияРабочегоВремени
		//-=-=
		|	И РабочееВремяРаботниковОрганизаций.Сотрудник = &Сотрудник
		//-=-=
		|
		|СГРУППИРОВАТЬ ПО
		|	РабочееВремяРаботниковОрганизаций.Сотрудник.Физлицо,
		|	РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени";
		
		Запрос.УстановитьПараметр("ВидИспользованияРабочегоВремени", Справочники.КлассификаторИспользованияРабочегоВремени.НайтиПоРеквизиту("БуквенныйКод", "ЯИ"));
		Запрос.УстановитьПараметр("ДатаКон", ИсходныеДанные.ПериодДействияКонец);
		Запрос.УстановитьПараметр("датаНач", ИсходныеДанные.ПериодДействияНачало);
		//-=-=
		Запрос.УстановитьПараметр("Сотрудник", ИсходныеДанные.Сотрудник);
		//-=-=
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням Тогда
				ОтработаноВремениОсновное = ОтработаноВремениОсновное + ВыборкаДетальныеЗаписи.Дней;
			Иначе
				ОтработаноВремениОсновное = ОтработаноВремениОсновное + ВыборкаДетальныеЗаписи.Часов;	 
			КонецЕсли;
			//Стр.Результат = Стр.Показатель1/Стр.НормаДней*Стр.ОтработаноДней;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

