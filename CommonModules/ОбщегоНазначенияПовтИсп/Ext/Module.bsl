////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
// Серверные процедуры и функции общего назначения.
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает признак наличия в конфигурации общих реквизитов-разделителей.
//
// Возвращаемое значение:
// Булево.
//
Функция ЭтоРазделеннаяКонфигурация() Экспорт
	
	ЕстьРазделители = Ложь;
	Для каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если ОбщийРеквизит.РазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять Тогда
			ЕстьРазделители = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьРазделители;
	
КонецФункции

// Возвращает список полных имен всех объектов метаданных, использующихся в общих реквизитах-разделителях.
// Для последовательностей и журналов документов определяет разделенность по входящим документам: любому из.
//
// Возвращаемое значение:
// ФиксированноеСоответствие.
//
Функция РазделенныеОбъектыМетаданных() Экспорт
	
	Результат = Новый Соответствие;
	
	// I. Перебрать состав всех общих реквизитов.
	
	//Для Каждого МетаданныеОбщегоРеквизита Из Метаданные.ОбщиеРеквизиты Цикл
	//	Если МетаданныеОбщегоРеквизита.РазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять Тогда
	//		СоставОбщегоРеквизита = ОбщегоНазначенияПовтИсп.СоставОбщегоРеквизита(МетаданныеОбщегоРеквизита.Имя);
	//		
	//		Для Каждого ЭлементСостава Из СоставОбщегоРеквизита Цикл
	//			
	//			Если ОбщегоНазначения.ЭлементСоставаОбщегоРеквизитаИспользуется(ЭлементСостава, МетаданныеОбщегоРеквизита) Тогда
	//				Результат.Вставить(ЭлементСостава.Метаданные.ПолноеИмя(), Истина);
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//КонецЦикла;
	
	// II. Для последовательностей и журналов определять разделенность по входящим документам.
	
	// 1) Последовательности. Перебор с проверкой первого входящего документа. Если документов нет, считаем разделенной.
	Для Каждого МетаданныеПоследовательности Из Метаданные.Последовательности Цикл
		Если МетаданныеПоследовательности.Документы.Количество() = 0 Тогда
			ШаблонСообщения = НСтр("ru = 'В последовательность %1 не включено ни одного документа.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, МетаданныеПоследовательности.Имя);
			ЗаписьЖурналаРегистрации("ОбщегоНазначенияПовтИсп.РазделенныеОбъектыМетаданных", УровеньЖурналаРегистрации.Ошибка, 
				МетаданныеПоследовательности, , ТекстСообщения);
			Результат.Вставить(МетаданныеПоследовательности.ПолноеИмя(), Истина);
		Иначе	
			Для Каждого МетаданныеДокумента Из МетаданныеПоследовательности.Документы Цикл
				Если Результат.Получить(МетаданныеДокумента.ПолноеИмя()) <> Неопределено Тогда
					Результат.Вставить(МетаданныеПоследовательности.ПолноеИмя(), Истина);
				КонецЕсли;
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// 2) Журналы. Перебор с проверкой первого входящего документа. Если документов нет, считаем разделенным.
	Для Каждого МетаданныеЖурналаДокументов Из Метаданные.ЖурналыДокументов Цикл
		Если МетаданныеЖурналаДокументов.РегистрируемыеДокументы.Количество() = 0 Тогда
			ШаблонСообщения = НСтр("ru = 'В журнал %1 не включено ни одного документа.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, МетаданныеЖурналаДокументов.Имя);
			ЗаписьЖурналаРегистрации("ОбщегоНазначенияПовтИсп.РазделенныеОбъектыМетаданных", УровеньЖурналаРегистрации.Ошибка, 
				МетаданныеЖурналаДокументов, , ТекстСообщения);
			Результат.Вставить(МетаданныеЖурналаДокументов.ПолноеИмя(), Истина);
		Иначе
			Для Каждого МетаданныеДокумента Из МетаданныеЖурналаДокументов.РегистрируемыеДокументы Цикл
				Если Результат.Получить(МетаданныеДокумента.ПолноеИмя()) <> Неопределено Тогда
					Результат.Вставить(МетаданныеЖурналаДокументов.ПолноеИмя(), Истина);
				КонецЕсли;
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(Результат);
	
КонецФункции

// Возвращает состав общего реквизита с заданным именем.
//
// Параметры:
// Имя - Строка - Имя общего реквизита.
//
// Возвращаемое значение:
// СоставОбщегоРеквизита.
//
Функция СоставОбщегоРеквизита(Знач Имя) Экспорт
	
	Возврат Метаданные.ОбщиеРеквизиты[Имя].Состав;
	
КонецФункции

// Возвращает признак того, что объект метаданных используется в общих реквизитах-разделителях.
//
// Параметры:
// ИмяОбъектаМетаданных - Строка.
//
// Возвращаемое значение:
// Булево.
//
Функция ЭтоРазделенныйОбъектМетаданных(Знач ИмяОбъектаМетаданных) Экспорт
	
	Возврат РазделенныеОбъектыМетаданных().Получить(ИмяОбъектаМетаданных) <> Неопределено;
	
КонецФункции

// Возвращает признак включения условного разделения.
// В случае вызова в неразделенной конфигурации возвращает Ложь.
//
Функция РазделениеВключено() Экспорт
	
	Возврат ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация() И ПолучитьФункциональнуюОпцию("РаботаВМоделиСервиса");
	
КонецФункции

// Возвращает признак возможности обращения к разделенным данным из текущего сеанса.
// В случае вызова в неразделенной конфигурации возвращает Истина.
//
// Возвращаемое значение:
// Булево.
//
Функция ДоступноИспользованиеРазделенныхДанных() Экспорт
	
	Возврат НЕ РазделениеВключено();
	
КонецФункции

// Возвращает объект ПреобразованиеXSL созданный из общего макета с переданным
// именем.
//
// Параметры:
// ИмяОбщегоМакет - Строка - имя общего макета типа ДвоичныеДанные содержащего
// файл преобразования XSL.
//
// Возвращаемое значение:
// ПреобразованиеXSL - объект ПреобразованиеXSL.
//
Функция ПолучитьПреобразованиеXSLИзОбщегоМакета(Знач ИмяОбщегоМакета) Экспорт
	
	ДанныеМакета = ПолучитьОбщийМакет(ИмяОбщегоМакета);
	ИмяФайлаПреобразования = ПолучитьИмяВременногоФайла("xsl");
	ДанныеМакета.Записать(ИмяФайлаПреобразования);
	
	Преобразование = Новый ПреобразованиеXSL;
	Преобразование.ЗагрузитьИзФайла(ИмяФайлаПреобразования);
	
	Попытка
		УдалитьФайлы(ИмяФайлаПреобразования);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение XSL'"), УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Преобразование;
	
КонецФункции

// Определяет, сеанс запущен с разделителями или без.
//
// Возвращаемое значение:
// Булево.
//
Функция СеансЗапущенБезРазделителей() Экспорт
	
	Возврат ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных.Количество() = 0;
	
КонецФункции

// Возвращает тип платформы сервера.
//
// Возвращаемое значение:
// ТипПлатформы; Неопределено.
//
Функция ТипПлатформыСервера(ВызовСервера = Истина) Экспорт
	
#Если Сервер Тогда
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Возврат СистемнаяИнфо.ТипПлатформы;
#Иначе
	Если ВызовСервера Тогда
		ТипПлатформыСервераСтрокой = СтандартныеПодсистемыВызовСервера.ТипПлатформыСервераСтрокой();
		
		Если ТипПлатформыСервераСтрокой = "Linux_x86" Тогда
			Возврат ТипПлатформы.Linux_x86;
			
		ИначеЕсли ТипПлатформыСервераСтрокой = "Linux_x86_64" Тогда
			Возврат ТипПлатформы.Linux_x86_64;
			
		ИначеЕсли ТипПлатформыСервераСтрокой = "Windows_x86" Тогда
			Возврат ТипПлатформы.Windows_x86;
			
		ИначеЕсли ТипПлатформыСервераСтрокой = "Windows_x86_64" Тогда
			Возврат ТипПлатформы.Windows_x86_64;
		КонецЕсли;
		
		Возврат Неопределено;
	Иначе
		СистемнаяИнфо = Новый СистемнаяИнформация;
		Возврат СистемнаяИнфо.ТипПлатформы;
	КонецЕсли;
#КонецЕсли
	
КонецФункции

// Функция получает цвет стиля по имени элемента стиля
//
// Параметры:
// ИмяЦветаСтиля - Строка -  Имя элемента стиля.
//
// Возвращаемое значение:
// Цвет.
//
Функция ЦветСтиля(ИмяЦветаСтиля) Экспорт
	
	Возврат ЦветаСтиля[ИмяЦветаСтиля];
	
КонецФункции

// Функция получает шрифт стиля по имени элемента стиля.
//
// Параметры:
// ИмяШрифтаСтиля - Строка - Имя шрифта стиля.
//
// Возвращаемое значение:
// Шрифт.
//
Функция ШрифтСтиля(ИмяШрифтаСтиля) Экспорт
	
	Возврат ШрифтыСтиля[ИмяШрифтаСтиля];
	
КонецФункции


// Получает размер месячного расчетного показателя
//
// Параметры:
//	ДатаАктуальности - дата, на которую нужно получить МРП.
//
// Возвращаемое значение:
//	число, размер МРП на дату, или Неопределено, если МРП на дату не определен.
//
Функция МесячныйРасчетныйПоказатель(ДатаАктуальности) Экспорт
	
	Возврат РегистрыСведений.РегламентированныеРасчетныеПоказатели.ДанныеРазмераМесячногоРасчетногоПоказателя(ДатаАктуальности)["Размер"];
	
КонецФункции	
