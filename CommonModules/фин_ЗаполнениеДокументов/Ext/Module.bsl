////////////////////////////////////////////////////////////////////////////////
// ЗаполнениеДокументов: 
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
 
// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ПриОткрытии" в модулех форм всех документов.
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа,
//  ТекПользователь                - ссылка на справочник, определяет текущего пользователя  
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ТипОперации                    - необязаетельный, строка вида операции ("Покупка" или "Продажа"),
//                                   если не передан, то реквизиты, зависящие от вида операции, не заполняются
//
Процедура ЗаполнитьШапкуДокумента(ДокументОбъект, ВалютаРегламентированногоУчета = Неопределено, ТипОперации = "", НеИзменятьРеквизитыПоНДС = Ложь,ПараметрОбъектКопирования = Неопределено, ПараметрОснование = Неопределено) Экспорт

	Перем ТипЦен;
	
	ТекПользователь = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь");

	Если ТипЗнч(ДокументОбъект) = Тип("Структура") ИЛИ 
		 ТипЗнч(ДокументОбъект) = Тип("ДанныеФормыСтруктура") Тогда 
		МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();
	Иначе 
		МетаданныеДокумента = ДокументОбъект.Метаданные();
	КонецЕсли;
	
	//заполнение даты
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
	  	ДокументОбъект.Дата = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	// Флаги принадлежности к учету заполняем, только если оба не заполнены
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокумента) 
		И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокумента) Тогда
		
		//По умолчанию все документы требуют отражения в бухгалтерском учете
		Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			ДокументОбъект.ОтражатьВБухгалтерскомУчете  = ПараметрОбъектКопирования.ОтражатьВБухгалтерскомУчете;
			ДокументОбъект.ОтражатьВУправленческомУчете = ПараметрОбъектКопирования.ОтражатьВБухгалтерскомУчете;
		Иначе
			Если НЕ (ДокументОбъект.ОтражатьВУправленческомУчете 
				ИЛИ ДокументОбъект.ОтражатьВБухгалтерскомУчете) Тогда
				
				ДокументОбъект.ОтражатьВУправленческомУчете = Ложь;
				ДокументОбъект.ОтражатьВБухгалтерскомУчете  = Истина;				
			КонецЕсли;
		КонецЕсли;   	
		
	ИначеЕсли фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокумента) Тогда

		//По умолчанию все документы требуют отражения в бухгалтерском учете
		Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			ДокументОбъект.ОтражатьВБухгалтерскомУчете = ПараметрОбъектКопирования.ОтражатьВБухгалтерскомУчете;
		Иначе
			//По умолчанию все документы требуют отражения в бухгалтерском учете
			ДокументОбъект.ОтражатьВБухгалтерскомУчете = Истина
		КонецЕсли;

	КонецЕсли; 
	
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
	  И (НЕ ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
		ДокументОбъект.Организация = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ПодразделениеОрганизации)) Тогда
		ДокументОбъект.ПодразделениеОрганизации = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	КонецЕсли;
	
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СтруктурноеПодразделение", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурноеПодразделение)) Тогда
		 СтруктурноеПодразделение = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновноеСтруктурноеПодразделениеОрганизации");
		Если СтруктурноеПодразделение = Неопределено Тогда
			ДокументОбъект.СтруктурноеПодразделение = ДокументОбъект.Организация;
		ИначеЕсли ТипЗнч(СтруктурноеПодразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ДокументОбъект.СтруктурноеПодразделение = СтруктурноеПодразделение;
		Иначе
			ДокументОбъект.СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();							
		КонецЕсли;
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СтруктурноеПодразделениеОтправитель", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурноеПодразделениеОтправитель)) Тогда
		СтруктурноеПодразделение = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновноеСтруктурноеПодразделениеОрганизации");
		Если СтруктурноеПодразделение = Неопределено Тогда
			ДокументОбъект.СтруктурноеПодразделениеОтправитель = ДокументОбъект.Организация;
		ИначеЕсли ТипЗнч(СтруктурноеПодразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ДокументОбъект.СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделение;
		Иначе
			ДокументОбъект.СтруктурноеПодразделениеОтправитель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();							
		КонецЕсли;
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурнаяЕдиница) 
	   И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда
		ДокументОбъект.СтруктурнаяЕдиница = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Ответственный)) Тогда
		ДокументОбъект.Ответственный = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнойОтветственный");
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Автор", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Автор)) Тогда
		ДокументОбъект.Автор = ТекПользователь;
	КонецЕсли;
	
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации)) Тогда
		ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][0];
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Склад)) Тогда
		ДокументОбъект.Склад = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.СкладОрдер) Тогда
		ДокументОбъект.СкладОрдер = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СтавкаНДС", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.СтавкаНДС)) Тогда
		ДокументОбъект.СтавкаНДС = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнаяСтавкаНДС");
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("БанковскийСчетОрганизации", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетОрганизации)
	   И (ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
	    СчетПоУмолчанию = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		ДокументОбъект.БанковскийСчетОрганизации = СчетПоУмолчанию;
		Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
			ДокументОбъект.ВалютаДокумента = СчетПоУмолчанию.ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации)
	   И (ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
		СчетПоУмолчанию = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		ДокументОбъект.СчетОрганизации = СчетПоУмолчанию;
		Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
			ДокументОбъект.ВалютаДокумента =  СчетПоУмолчанию.ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента)) Тогда
		ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.КурсДокумента)) Тогда
		СтруктураКурсаДокумента      = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
		ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;

		Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
			ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		КонецЕсли;
	КонецЕсли;

	// Если тип цен оказался не заполненным, то берем его из установок пользователя
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ТипЦен)) Тогда
	    Если ТипОперации = "Продажа" Тогда
			ДокументОбъект.ТипЦен = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнойТипЦенПродажи");
		КонецЕсли;
	КонецЕсли;
	
	//если документ скопирован, флаги учета переносим как есть
	Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		
		// Флаги учета налогов заполняем, только если флаг УчитыватьНДС не заполнен.
		Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) Тогда
			ДокументОбъект.УчитыватьНДС =  ПараметрОбъектКопирования.УчитыватьНДС ;	
			Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) Тогда
				ДокументОбъект.СуммаВключаетНДС =  ПараметрОбъектКопирования.СуммаВключаетНДС ;	
			КонецЕсли;			
		КонецЕсли;
		
		Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента) Тогда
			ДокументОбъект.УчитыватьАкциз =  ПараметрОбъектКопирования.УчитыватьАкциз;
			Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента) Тогда			
				ДокументОбъект.СуммаВключаетАкциз = ПараметрОбъектКопирования.СуммаВключаетАкциз;
			КонецЕсли;				
		КонецЕсли; 	
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрОснование) И ТипЗнч(ПараметрОснование) <> Тип("Структура") Тогда
		
		Если Метаданные.Документы.Найти(ПараметрОснование.Метаданные().Имя) <> Неопределено Тогда
			
			МетаданныеОснования = ПараметрОснование.Метаданные();
			
			// если в основании есть реквизит Учитывать НДС, подставляем оттуда
			Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) И
				фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеОснования) Тогда
				
				ДокументОбъект.УчитыватьНДС = ПараметрОснование.УчитыватьНДС ;	
				
			// Флаги учета налогов заполняем, только если флаг УчитыватьНДС не заполнен.
			ИначеЕсли фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) И (НЕ НеИзменятьРеквизитыПоНДС) Тогда
				
				ДокументОбъект.УчитыватьНДС =  ПолучитьПризнакПлательщикаНДС(ДокументОбъект.Организация, ДокументОбъект.Дата);		
				
			КонецЕсли;
			
			Если (фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента))
				И (ЗначениеЗаполнено(ДокументОбъект.ТипЦен)) Тогда
				
				УстановитьПризнакиИзТипаЦен = Истина;
				// Если ТипЦен - элемент справочника ТипыЦенНоменклатуры и цены выбранного типа расчетные, 
				// то флаги включения налогов надо брать из базовой цены
				Если ДокументОбъект.ТипЦен.Метаданные().Реквизиты.Найти("Рассчитывается") <> Неопределено Тогда
					ТипЦен = ?(ДокументОбъект.ТипЦен.Рассчитывается, ДокументОбъект.ТипЦен.БазовыйТипЦен, ДокументОбъект.ТипЦен);
				Иначе
					ТипЦен = ДокументОбъект.ТипЦен;
				КонецЕсли;
				
			Иначе
				
				УстановитьПризнакиИзТипаЦен = Ложь;
				
			КонецЕсли;
			
			Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) 
				И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеОснования) Тогда
				
				ДокументОбъект.СуммаВключаетНДС =  ПараметрОснование.СуммаВключаетНДС ;	
				
			ИначеЕсли фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) 
				И ДокументОбъект.УчитыватьНДС И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) Тогда
				
				Если УстановитьПризнакиИзТипаЦен Тогда
					ДокументОбъект.СуммаВключаетНДС = ТипЦен.ЦенаВключаетНДС;
				Иначе
					ДокументОбъект.СуммаВключаетНДС = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// Флаги учета налогов заполняем, только если флаг УчитыватьНДС не заполнен.
		Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) 
			И (НЕ НеИзменятьРеквизитыПоНДС) Тогда
			ДокументОбъект.УчитыватьНДС = ПолучитьПризнакПлательщикаНДС(ДокументОбъект.Организация, ДокументОбъект.Дата);		
		КонецЕсли; 
		
		
		Если (фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента))
			И (ЗначениеЗаполнено(ДокументОбъект.ТипЦен)) Тогда
			
			// Если ТипЦен - элемент справочника ТипыЦенНоменклатуры и цены выбранного типа расчетные, 
			// то флаги включения налогов надо брать из базовой цены
			ТипЦен = ДокументОбъект.ТипЦен;
			
			// Флаги учета налогов заполняем, только если флаг УчитыватьНДС заполнен.
			Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
				И ДокументОбъект.УчитыватьНДС И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) И (НЕ НеИзменятьРеквизитыПоНДС) Тогда
				ДокументОбъект.СуммаВключаетНДС = ТипЦен.ЦенаВключаетНДС;
			КонецЕсли; 
			
			// Флаги учета налогов заполняем, только если флаг УчитыватьАкциз заполнен.
			Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента) 
				И ДокументОбъект.УчитыватьАкциз И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента)Тогда			
				ДокументОбъект.СуммаВключаетАкциз = ТипЦен.ЦенаВключаетАкциз;
			КонецЕсли; 		
		Иначе          
			// Заполним значениями по умолчанию (нет, либо не заполнен ТипЦен).
			// Флаги учета налогов заполняем, только если флаг УчитыватьНДС не заполнен.
			Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) 
				И ДокументОбъект.УчитыватьНДС И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) И (НЕ НеИзменятьРеквизитыПоНДС) Тогда			
				ДокументОбъект.СуммаВключаетНДС = Истина;
			КонецЕсли; 
			
			// Заполним значениями по умолчанию (нет, либо не заполнен ТипЦен).
			// Флаги учета налогов заполняем, только если флаг УчитыватьНДС не заполнен.
			Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента) И ДокументОбъект.УчитыватьАкциз И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента)Тогда			
				ДокументОбъект.СуммаВключаетАкциз = Истина;
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
	
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ДатаС", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ДатаС)) Тогда
		ДокументОбъект.ДатаС = ДокументОбъект.Дата;
	КонецЕсли;

	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ПериодРегистрации", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ПериодРегистрации)) Тогда
		ДокументОбъект.ПериодРегистрации = НачалоМесяца(ТекущаяДата());
	КонецЕсли;

	
КонецПроцедуры // ЗаполнитьШапкуДокумента()

Функция ПолучитьПризнакПлательщикаНДС(Организация, Дата) Экспорт
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0
		ИЛИ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана
		ИЛИ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана Тогда
		Возврат Вычислить("ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата)");
	Иначе	
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// Процедура предназначена для заполнения общих реквизитов документов по документу основанию,
//	вызывается в обработчиках событий "ОбработкаЗаполнения" в модулях документов.
//
// Параметры:
//  ДокументОбъект  - объект редактируемого документа,
//  ДокументОснование - объект документа основания
//
Процедура ЗаполнитьШапкуДокументаПоОснованию(ДокументОбъект, ДокументОснование) Экспорт

	Если ТипЗнч(ДокументОбъект) = Тип("Структура") ИЛИ 
		ТипЗнч(ДокументОбъект) = Тип("ДанныеФормыСтруктура") Тогда 
		МетаданныеДокумента          = ДокументОбъект.Ссылка.Метаданные();
	Иначе 
		МетаданныеДокумента          = ДокументОбъект.Метаданные();
	КонецЕсли;
	
	МетаданныеДокументаОснования = ДокументОснование.Метаданные();

	//заполнение даты
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
	  	ДокументОбъект.Дата = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	// Организация.
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
	   И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Организация", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Организация = ДокументОснование.Организация;
	КонецЕсли;

	
	// Подразделение.
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента)
	   И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Подразделение", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Подразделение = ДокументОснование.Подразделение;
	КонецЕсли;

	// ПодразделениеОрганизации.
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокумента)
	   И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ПодразделениеОрганизации = ДокументОснование.ПодразделениеОрганизации;
	КонецЕсли;

	// Склад.
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента)
	   И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Склад", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Склад = ДокументОснование.Склад;
	КонецЕсли;
	
	// Ответственный.
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента)
	   И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Ответственный", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Ответственный = ДокументОснование.Ответственный;
	КонецЕсли;

	// Контрагент.
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента)
	   И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Контрагент = ДокументОснование.Контрагент;
	КонецЕсли;

	// ДоговорКонтрагента.
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента)
	   И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокументаОснования) 
	   И (НЕ фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
	      ИЛИ ДокументОбъект.Организация = ДокументОснование.ДоговорКонтрагента.Организация) Тогда

		ДокументОбъект.ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента;

		// КурсВзаиморасчетов.
		Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
			// Определим дату получения курсов
			ДатаСреза = ?(ЗначениеЗаполнено(ДокументОбъект.Дата), ДокументОбъект.Дата, ТекущаяДата());
						
			СтруктураКурсаВзаиморасчетов = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДатаСреза);
			ДокументОбъект.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;

			// КратностьВзаиморасчетов.
			Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Касса
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Касса", МетаданныеДокумента) Тогда

		// Если в документе-основании есть структурная единица(или касса), то берем ее оттуда
		Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница) 
			   И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = Тип("СправочникСсылка.Кассы") Тогда
				ДокументОбъект.Касса = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Касса", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.Касса) Тогда
				ДокументОбъект.Касса = ДокументОснование.Касса;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Банковский счет 
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокумента) Тогда

		// Если в документе-основании есть структурная единица(или касса), то берем ее оттуда
		Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница) 
			   И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.БанковскийСчет) Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.БанковскийСчет;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Банковский счет организации
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("БанковскийСчетОрганизации", МетаданныеДокумента)
	   И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокументаОснования) Тогда

		Если НЕ ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетОрганизации)
		  И ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет)Тогда
			ДокументОбъект.БанковскийСчетОрганизации = ДокументОснование.БанковскийСчет;
		КонецЕсли;
	КонецЕсли;

	// Структурная единица
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокумента)
	   И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда

		Если НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурнаяЕдиница)
		  И ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница)Тогда
			ДокументОбъект.СтруктурнаяЕдиница = ДокументОснование.СтруктурнаяЕдиница;
		КонецЕсли;
	КонецЕсли;

	// ВалютаДокумента.
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
	   И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокументаОснования) Тогда

		// Если есть касса или банковский счет, то валюта должна браться только оттуда
		Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Касса", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.Касса.ВалютаДенежныхСредств;
			КонецЕсли;
		ИначеЕсли фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет) Тогда
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.БанковскийСчет.ВалютаДенежныхСредств;
		    КонецЕсли;
		Иначе
			ДокументОбъект.ВалютаДокумента = ДокументОснование.ВалютаДокумента;
		КонецЕсли;

		// КурсДокумента.
		Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
			// Определим дату получения курсов
			ДатаСреза = ?(ЗначениеЗаполнено(ДокументОбъект.Дата), ДокументОбъект.Дата, ТекущаяДата());
			
			СтруктураКурсаДокумента = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДатаСреза);
			ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;

			// КратностьДокумента.
			Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	// ТипЦен.
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента)
	   И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ТипЦен = ДокументОснование.ТипЦен;
	КонецЕсли;

	// Тип скидки.
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ТипСкидкиНаценки", МетаданныеДокумента)
	   И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ТипСкидкиНаценки", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ТипСкидкиНаценки = ДокументОснование.ТипСкидкиНаценки;
	КонецЕсли;
	
	// Дисконтная карта
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ДисконтнаяКарта", МетаданныеДокумента)
	   И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ДисконтнаяКарта", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ДисконтнаяКарта = ДокументОснование.ДисконтнаяКарта;
	КонецЕсли;

	// УчитыватьНДС.
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
	   И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.УчитыватьНДС = ДокументОснование.УчитыватьНДС;
	КонецЕсли;

	// СуммаВключаетНДС.
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
	   И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.СуммаВключаетНДС = ДокументОснование.СуммаВключаетНДС;
	КонецЕсли;
    		
		// УчитыватьАкциз.
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента)
	   И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.УчитыватьАкциз = ДокументОснование.УчитыватьАкциз;
	КонецЕсли;

	// СуммаВключаетАкциз.
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента)
	   И фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.СуммаВключаетАкциз = ДокументОснование.СуммаВключаетАкциз;
	КонецЕсли;
    
	// ОтражатьВУправленческомУчете.
	// Если есть в основании, копируем из основания, иначе - Истина.
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокумента) Тогда
		Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокументаОснования) Тогда
			ДокументОбъект.ОтражатьВУправленческомУчете = ДокументОснование.ОтражатьВУправленческомУчете;
		Иначе
			ДокументОбъект.ОтражатьВУправленческомУчете = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокумента) Тогда
		Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокументаОснования) Тогда
			ДокументОбъект.ОтражатьВБухгалтерскомУчете = ДокументОснование.ОтражатьВБухгалтерскомУчете;
		Иначе
			ДокументОбъект.ОтражатьВБухгалтерскомУчете = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьШапкуДокументаПоОснованию()

 ////////////////////////////////////////////////////////////////////////////////
 // СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура предназначена для заполнения общих реквизитов документов
//	вызывается в обработчиках событий "ПередЗаписью" документов.
Процедура ПередЗаписьюДокументаУстановкаАвтораПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Автор", Источник.Метаданные())
	   И (НЕ ЗначениеЗаполнено(Источник.Автор)) Тогда
		Источник.Автор = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь");
	КонецЕсли;
	
КонецПроцедуры

					 
// Процедура обрабатывает событие ПриКопирование документа
// Перднозначена для очистки общих реквизитов при копировании документа
Процедура ПриКопированииДокументаОчисткаОбщихРеквизитов(Источник, ОбъектКопирования) Экспорт
	
	Если Источник.Метаданные().Реквизиты.Найти("Автор") <> Неопределено Тогда 
		Источник.Автор = Справочники.Пользователи.ПустаяСсылка()
	КонецЕсли;
	
	Если Источник.Метаданные().Реквизиты.Найти("РучнаяКорректировка") <> Неопределено Тогда 
		Источник.РучнаяКорректировка = Ложь
	КонецЕсли;
	
	Если Источник.Метаданные().Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда 
		Источник.ДокументОснование = Неопределено
	КонецЕсли;
	
	Если Источник.Метаданные().Реквизиты.Найти("СтруктурноеПодразделение") <> Неопределено Тогда 
		Если (фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0
			ИЛИ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана
			ИЛИ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана)
			И фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений() Тогда 
			Источник.СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


// Процедура удаляет из массива МассивРеквизитов элементы, соответствующие именам 
// реквизитов объекта из массива МассивНепроверяемыхРеквизитов.
// Для использования в обработчиках события ОбработкаПроверкиЗаполнения.
//
// Параметры:
//	МассивРеквизитов              - Массив - массив строк с именами реквизитов объекта.
//	МассивНепроверяемыхРеквизитов - Массив строк с именами реквизитов объекта, не требующих проверки.
//
Процедура УдалитьНепроверяемыеРеквизитыИзМассива(МассивРеквизитов, МассивНепроверяемыхРеквизитов) Экспорт
	
	Для Каждого ЭлементМассива Из МассивНепроверяемыхРеквизитов Цикл
	
		ПорядковыйНомер = МассивРеквизитов.Найти(ЭлементМассива);
		Если ПорядковыйНомер <> Неопределено Тогда
			МассивРеквизитов.Удалить(ПорядковыйНомер);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры
