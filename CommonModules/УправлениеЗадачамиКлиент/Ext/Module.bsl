
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫПОЛНЕНИЯ ЗАДАЧ

Процедура ВыполнитьВыбраннуюЗадачу(Задача) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",	Задача);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Задачи.ВидЗадачи,
		|	Задачи.ОбъектЗадачи,
		|	Задачи.Дата КАК ДатаЗадачи
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ВидЗадачи			= Выборка.ВидЗадачи;
	ОбъектЗадачи		= Выборка.ОбъектЗадачи;
	ДатаЗадачи			= Выборка.ДатаЗадачи;
	
	Если ВидЗадачи = Справочники.ВидыЗадачПользователей.ВозвратНаРаботу Тогда
		ЗадачаВозвратНаРаботу(ОбъектЗадачи, ДатаЗадачи);
		
	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.ДеньРождения Тогда
		ЗадачаДеньРождения(ОбъектЗадачи);
		
	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.Доначисление Тогда
		ЗадачаДоначисление(ОбъектЗадачи, ДатаЗадачи);
		
	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.КадровоеПеремещение Тогда
		ЗадачаКадровоеПеремещение(ОбъектЗадачи, ДатаЗадачи);
		
	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.НачислениеПоКадровомуДокументу Тогда
		ЗадачаНачислениеПоКадровомуДокументу(ОбъектЗадачи);
		
	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.Перезаполнение Тогда
		ЗадачаПерезаполнение(ОбъектЗадачи, ДатаЗадачи, Задача);
		
	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.Перерасчет Тогда
		ЗадачаПерерасчет(ОбъектЗадачи, ДатаЗадачи);
		
	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.ПриемНаРаботу Тогда
		ЗадачаПриемНаРаботу(ОбъектЗадачи);
		
	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.ПроизводственныйКалендарь Тогда
		ЗадачаПроизводственныйКалендарь(ОбъектЗадачи);
		
	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.РасчетСНиСО Тогда
		ЗадачаРасчетныйДокумент(ВидЗадачи, ОбъектЗадачи, ДатаЗадачи);
		
	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.РасчетУдержанийРаботниковОрганизаций Тогда
		ЗадачаРасчетныйДокумент(ВидЗадачи, ОбъектЗадачи, ДатаЗадачи);
		
	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.РасчетЗарплаты Тогда
		ЗадачаРасчетныйДокумент(ВидЗадачи, ОбъектЗадачи, ДатаЗадачи);
		
	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.ОтражениеЗарплатыВУчете Тогда
		ЗадачаРасчетныйДокумент(ВидЗадачи, ОбъектЗадачи, ДатаЗадачи);
		
	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.Увольнение Тогда
		ЗадачаУвольнение(ОбъектЗадачи, ДатаЗадачи);
		
	Иначе
		Результат = УправлениеЗадачамиКлиентПереопределяемый.ВыполнитьЗадачи(ВидЗадачи, ОбъектЗадачи, ДатаЗадачи);
		
		Если НЕ Результат Тогда
			Задача.ПолучитьФорму().Открыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫПОЛНЕНИЯ ЗАДАЧ ЗАРПЛАТНО-КАДРОВОЙ ФУНКЦИОНАЛЬНОСТИ

// функция формирует сообщение с именами сотрудников, по которым произведен перерасчет
//
Функция ПолучитьСообщениеОПерерасчетеСотрудников(ДокументПерерасчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументПерерасчета);
	ТекущаяДата = ОбщегоНазначения.ПолучитьРабочуюДату();
	
	Если День(ТекущаяДата) < 20 Тогда
		АктуальныйПериодРегистрации = НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -1));
	Иначе
		АктуальныйПериодРегистрации = НачалоМесяца(ТекущаяДата);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("АктуальныйПериодРегистрации", АктуальныйПериодРегистрации);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 4
		|	ПРЕДСТАВЛЕНИЕ(СотрудникиПерерасчета.Сотрудник) КАК ПредставлениеСотрудника
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ОсновныеНачисленияРаботниковОрганизацийПерерасчетОсновныхНачислений.Сотрудник КАК Сотрудник
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК ОсновныеНачисленияРаботниковОрганизацийПерерасчетОсновныхНачислений
		|	ГДЕ
		|		ОсновныеНачисленияРаботниковОрганизацийПерерасчетОсновныхНачислений.ОбъектПерерасчета = &ДокументСсылка
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ДополнительныеНачисленияРаботниковОрганизацийПерерасчетДополнительныхНачислений.Сотрудник
		|	ИЗ
		|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК ДополнительныеНачисленияРаботниковОрганизацийПерерасчетДополнительныхНачислений
		|	ГДЕ
		|		ДополнительныеНачисленияРаботниковОрганизацийПерерасчетДополнительныхНачислений.ОбъектПерерасчета = &ДокументСсылка
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		РасчетСреднегоЗаработкаПерерасчетСреднегоЗаработка.Сотрудник
		|	ИЗ
		|		РегистрРасчета.РасчетСреднегоЗаработка.ПерерасчетСреднегоЗаработка КАК РасчетСреднегоЗаработкаПерерасчетСреднегоЗаработка
		|	ГДЕ
		|		РасчетСреднегоЗаработкаПерерасчетСреднегоЗаработка.ОбъектПерерасчета = &ДокументСсылка
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ЗаполнениеПлановыхНачислений.Сотрудник
		|	ИЗ
		|		РегистрСведений.ЗаполнениеПлановыхНачислений КАК ЗаполнениеПлановыхНачислений
		|	ГДЕ
		|		ЗаполнениеПлановыхНачислений.ОбъектЗаполнения = &ДокументСсылка
		|		И ЗаполнениеПлановыхНачислений.ПериодРегистрации < &АктуальныйПериодРегистрации) КАК СотрудникиПерерасчета";
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоСотрудников = 0;
	ТекстСообщения = "Документ перерассчитан. Изменились результаты расчета сотрудников:";
	
	Пока Выборка.Следующий() И КоличествоСотрудников < 4 Цикл
		ТекстСообщения = ТекстСообщения + " " + Выборка.ПредставлениеСотрудника + ",";
		КоличествоСотрудников = КоличествоСотрудников + 1;
	КонецЦикла;
	
	ТекстСообщения = Лев(ТекстСообщения, СтрДлина(ТекстСообщения) - 1);
	
	Если Выборка.Количество() > 3 Тогда
		ТекстСообщения = ТекстСообщения + " и других...";
	КонецЕсли;
	
	Если Выборка.Количество() > 0 Тогда
		Возврат ТекстСообщения;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПолучитьСообщениеОПерерасчетеСотрудников()

Процедура ЗадачаВозвратНаРаботу(ОбъектЗадачи, ДатаЗадачи)
	
	Попытка
		ФормаДокумента = Документы.ВозвратНаРаботуОрганизаций.ПолучитьФормуНовогоДокумента(, , ОбъектЗадачи);
		ФормаДокумента.Организация = ОбъектЗадачи.СтруктурнаяЕдиница;
		
		НоваяСтрока = ФормаДокумента.РаботникиОрганизации.Добавить();
		НоваяСтрока.Сотрудник 	 = ОбъектЗадачи;
		НоваяСтрока.ДатаВозврата = ДатаЗадачи;
		
		ФормаДокумента.Открыть();
	Исключение
		Предупреждение("Недостаточно прав для выполнения операции!");
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗадачаДеньРождения(ОбъектЗадачи)
	
	ФормаЭлемента = ОбъектЗадачи.ПолучитьФорму();
	ФормаЭлемента.Открыть();
	
КонецПроцедуры

Процедура ЗадачаДоначисление(ОбъектЗадачи, ДатаЗадачи)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сотрудник",		ОбъектЗадачи);
	Запрос.УстановитьПараметр("ДатаНачала",		НачалоМесяца(ДатаЗадачи));
	Запрос.УстановитьПараметр("ДатаОкончания",	КонецМесяца(ДатаЗадачи));
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Доначисления.Сотрудник КАК Ссылка,
		|	Доначисления.ДатаНачала КАК ДатаНачала,
		|	Доначисления.ДатаОкончания КАК ДатаОкончания,
		|	Доначисления.Организация
		|ИЗ
		|	РегистрСведений.ДоначисленияСотрудникам КАК Доначисления
		|ГДЕ
		|	Доначисления.Сотрудник = &Сотрудник
		|	И Доначисления.ДатаНачала >= &ДатаНачала
		|	И Доначисления.ДатаОкончания <= &ДатаОкончания";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ДокументДоначисление = Документы.НачислениеЗарплатыРаботникамОрганизаций.СоздатьДокумент();
		ДокументДоначисление.Организация					= Выборка.Организация;
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументДоначисление, глЗначениеПеременной("глТекущийПользователь"));
		
		СписокСотрудников = Новый СписокЗначений;
		СписокСотрудников.Добавить(ОбъектЗадачи);
		
		ДокументДоначисление.ПериодНачисления				= Перечисления.ПериодНачисленияЗарплаты.ПрошлыйПериод;
		ДокументДоначисление.ПериодНачисленияДатаНачала		= Выборка.ДатаНачала;
		ДокументДоначисление.ПериодНачисленияДатаОкончания	= Выборка.ДатаОкончания;
		ДокументДоначисление.ВыполнитьАвтозаполнение(
		ДокументДоначисление.ПериодНачисленияДатаНачала, 
		ДокументДоначисление.ПериодНачисленияДатаОкончания,,,
		СписокСотрудников);
		
		ФормаДокумента = ДокументДоначисление.ПолучитьФорму();
		ФормаДокумента.Открыть();
	Исключение
		Предупреждение("Недостаточно прав для выполнения операции!");
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗадачаКадровоеПеремещение(ОбъектЗадачи, ДатаЗадачи)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник",	ОбъектЗадачи);
	Запрос.УстановитьПараметр("Период",		ДатаЗадачи);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПрошлоеСостояние.ПодразделениеОрганизации,
		|	ПрошлоеСостояние.Должность,
		|	ПрошлоеСостояние.ЗанимаемыхСтавок,
		|	ПрошлоеСостояние.ГрафикРаботы,
		|	ПрошлоеСостояние.Период КАК Период
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК ПрошлоеСостояние
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Период, Сотрудник = &Сотрудник) КАК ТекущееСостояние
		|		ПО ПрошлоеСостояние.Сотрудник = ТекущееСостояние.Сотрудник
		|			И ПрошлоеСостояние.Период < ТекущееСостояние.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Попытка
		ФормаДокумента = Документы.КадровоеПеремещениеОрганизаций.ПолучитьФормуНовогоДокумента(, , ОбъектЗадачи);
		ФормаДокумента.Заполнить(ОбъектЗадачи);
		
		Если ФормаДокумента.РаботникиОрганизации.Количество() > 0 И Выборка.Следующий() Тогда
			НоваяСтрока = ФормаДокумента.РаботникиОрганизации[0];
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ДатаНачала = ДатаЗадачи;
		КонецЕсли;
		
		ФормаДокумента.ДобавитьНачисленияПоСтроке(НоваяСтрока);
		ФормаДокумента.Открыть();
	Исключение
		Предупреждение("Недостаточно прав для выполнения операции!");
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗадачаНачислениеПоКадровомуДокументу(ОбъектЗадачи)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",	ОбъектЗадачи);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Док.Организация
		|ИЗ
		|	Документ." + ОбъектЗадачи.Метаданные().Имя + " КАК Док
		|ГДЕ
		|	Док.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если ПравоДоступа("Использование", Метаданные.Обработки.АнализНеявок) И Выборка.Организация <> Неопределено Тогда
		ФормаОбработки = Обработки.АнализНеявок.ПолучитьФорму();
		
		ФормаОбработки.Организация					= Выборка.Организация;
		ФормаОбработки.ОтбиратьСобытияПоДокументу	= Истина;
		ФормаОбработки.ТипДокумента					= ОбъектЗадачи.Метаданные().Синоним;
		ФормаОбработки.КадровыйДокумент				= ОбъектЗадачи;
		
		ФормаОбработки.Неявки.Очистить();
		ФормаОбработки.Автозаполнение();
		
		ФормаОбработки.Открыть();
	Иначе
		Предупреждение("Недостаточно прав для выполнения операции!")
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗадачаПерезаполнение(ОбъектЗадачи, ДатаЗадачи, Задача)
	
	Если НачалоМесяца(ДатаЗадачи) < НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату()) Тогда
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("1", "Перерассчитать");
		СписокКнопок.Добавить("0", "Отметить задачу");
		СписокКнопок.Добавить("",  "Отмена");
		
		Результат = Вопрос("Перезаполнять можно только документы текущего периода. Вы можете перерассчитать 
							|существующий документ или отметить задачу как выполненную.", 
							СписокКнопок, , , "Перезаполнение документа");
		
		Если ПустаяСтрока(Результат) Тогда
			Возврат;
		КонецЕсли;
		
		Если Результат = "1" Тогда
			
			ЗадачаПерерасчет(ОбъектЗадачи, ДатаЗадачи);
			
		ИначеЕсли Результат = "0" Тогда
			
			ЗадачаОбъект = Задача.ПолучитьОбъект();
			ЗадачаОбъект.Выполнена = Истина;
			ЗадачаОбъект.Записать();
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументЗаполнения",	ОбъектЗадачи);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаполнениеПлановыхНачислений.Сотрудник
		|ИЗ
		|	РегистрСведений.ЗаполнениеПлановыхНачислений КАК ЗаполнениеПлановыхНачислений
		|ГДЕ
		|	ЗаполнениеПлановыхНачислений.ОбъектЗаполнения = &ДокументЗаполнения";
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокСотрудников = Новый СписокЗначений;
	СписокСотрудников.ЗагрузитьЗначения(Выборка.ВыгрузитьКолонку("Сотрудник"));

	Попытка
		ДокОбъект = ОбъектЗадачи.ПолучитьОбъект();
		ДокОбъект.ВыполнитьПерезаполнениеПоВыбраннымСотрудникам(СписокСотрудников);
		ДокОбъект.ПолучитьФорму().Открыть();
	Исключение
		Предупреждение("Недостаточно прав для выполнения операции!");
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗадачаПерерасчет(ОбъектЗадачи, ДатаЗадачи)
	                               
	Если НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату()) <= НачалоМесяца(ДатаЗадачи) Тогда
		
		Результат = "2";
		
	Иначе
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("1", "Создать исправление");
		СписокКнопок.Добавить("0", "Пересчитать прошлым периодом");
		СписокКнопок.Добавить("",  "Отмена");
		
		Результат = Вопрос("Создать документ-исправление для перерасчета текущим периодом или пересчитать документ 
							|прошлым периодом", СписокКнопок, , , "Перерасчет документ");

		Если ПустаяСтрока(Результат) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат = "1" Тогда
		Попытка
			ФормаДокумента = Документы[Метаданные.НайтиПоТипу(ТипЗнч(ОбъектЗадачи)).Имя].ПолучитьФормуНовогоДокумента(, , ОбъектЗадачи);
			ФормаДокумента.ПериодРегистрации = НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату());
			ФормаДокумента.ЗаполнитьПоПерерассчитываемомуДокументу(ОбъектЗадачи);
			
			ФормаДокумента.Открыть();
		Исключение
			Предупреждение("Недостаточно прав для выполнения операции!");
		КонецПопытки;
		
	ИначеЕсли Результат = "0" Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ДокументПерерасчета", ОбъектЗадачи);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 4
			|	ПерерассчитываемыеДокументы.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 4
			|		РасчетСНОсновныеНачисления.Ссылка КАК Ссылка
			|	ИЗ
			|		(ВЫБРАТЬ
			|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник.Физлицо КАК ФизЛицо,
			|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник КАК Сотрудник,
			|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
			|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Организация КАК Организация
			|		ИЗ
			|			Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
			|		ГДЕ
			|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка = &ДокументПерерасчета) КАК УсловияДокумента
			|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетСНиСО.ИсчисленныйСН КАК РасчетСНОсновныеНачисления
			|			ПО УсловияДокумента.ФизЛицо = РасчетСНОсновныеНачисления.ФизЛицо
			|				И УсловияДокумента.ПериодРегистрации = РасчетСНОсновныеНачисления.Ссылка.ПериодРегистрации
			|				И УсловияДокумента.Организация = РасчетСНОсновныеНачисления.Ссылка.Организация
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 4
			|		РасчетИсчисленныйИПН.Ссылка
			|	ИЗ
			|		(ВЫБРАТЬ
			|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник.Физлицо КАК ФизЛицо,
			|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник КАК Сотрудник,
			|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
			|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Организация КАК Организация
			|		ИЗ
			|			Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
			|		ГДЕ
			|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка = &ДокументПерерасчета) КАК УсловияДокумента
			|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетУдержанийРаботниковОрганизаций.ИсчисленныйИПН КАК РасчетИсчисленныйИПН
			|			ПО УсловияДокумента.ФизЛицо = РасчетИсчисленныйИПН.ФизЛицо
			|				И УсловияДокумента.ПериодРегистрации = РасчетИсчисленныйИПН.Ссылка.ПериодРегистрации
			|				И УсловияДокумента.Организация = РасчетИсчисленныйИПН.Ссылка.Организация
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 4
			|		ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
			|	ИЗ
			|		(ВЫБРАТЬ
			|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник.Физлицо КАК ФизЛицо,
			|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник КАК Сотрудник,
			|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
			|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Организация КАК Организация
			|		ИЗ
			|			Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
			|		ГДЕ
			|			НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка = &ДокументПерерасчета) КАК УсловияДокумента
			|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
			|			ПО УсловияДокумента.Организация = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация
			|				И УсловияДокумента.ФизЛицо = ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо
			|				И УсловияДокумента.ПериодРегистрации = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПериодНачисленияЗарплаты) КАК ПерерассчитываемыеДокументы
			|ГДЕ
			|	ПерерассчитываемыеДокументы.Ссылка ЕСТЬ НЕ NULL ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		ДокументыТекст = "";
		НомерЗначенияЗапроса = 1;
		
		Пока Выборка.Следующий() Цикл
			Если НомерЗначенияЗапроса < 4 Тогда
				ДокументыТекст = ДокументыТекст + Символы.ПС + Строка(Выборка.Документ);
				НомерЗначенияЗапроса = НомерЗначенияЗапроса + 1;
			ИначеЕсли НомерЗначенияЗапроса = 4 Тогда
				ДокументыТекст = ДокументыТекст + " и другие..."
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НачалоМесяца(ДатаЗадачи) = НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату()) Тогда
			ТекстСообщения = "Вы уверены в том, что хотите перерассчитать документ " + Строка(ОбъектЗадачи) + "?";
		Иначе
			ТекстСообщения = "Вы уверены в том, что хотите перерассчитать документ " + Строка(ОбъектЗадачи) + " прошлым периодом?";
		КонецЕсли;
		
		ТекстСообщения = ТекстСообщения +
		?(ПустаяСтрока(ДокументыТекст), "", символы.ПС + "Выполнение этой операции приведет к необходимости пересмотреть документы:" + ДокументыТекст);
		
		Ответ = Вопрос(ТекстСообщения, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да, "Предупреждение");
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Попытка
				ТекстСообщения = ПолучитьСообщениеОПерерасчетеСотрудников(ОбъектЗадачи);
				
				ДокументОбъект = ОбъектЗадачи.ПолучитьОбъект();
				ДокументОбъект.Перерассчитать();
				Если ТекстСообщения <> "" Тогда
					Предупреждение(ТекстСообщения, , "Перерасчет документа");
				КонецЕсли;
				
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке("Документ " + Строка(ДокументОбъект) + " не может быть перерассчитан!
				|" + ОписаниеОшибки());
				
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗадачаПриемНаРаботу(ОбъектЗадачи)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник",	ОбъектЗадачи);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Док.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Док
		|ГДЕ
		|	Док.Сотрудник = &Сотрудник
		|	И (НЕ Док.Ссылка.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Попытка
		Если Выборка.Следующий() Тогда
			ФормаДокумента = Выборка.Ссылка.ПолучитьФорму();
		Иначе
			ФормаДокумента = Документы.ПриемНаРаботуВОрганизацию.ПолучитьФормуНовогоДокумента(, , ОбъектЗадачи);
			ФормаДокумента.Заполнить(ОбъектЗадачи);
		КонецЕсли;                                        
		
		ФормаДокумента.Открыть();
	Исключение
		Предупреждение("Недостаточно прав для выполнения операции!");	
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗадачаПроизводственныйКалендарь(ОбъектЗадачи)
	
	ФормаСпискаРегистра = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.ПолучитьФормуСписка();
	ФормаСпискаРегистра.ГодВФорме	= ОбъектЗадачи;
	ФормаСпискаРегистра.Открыть();
		
КонецПроцедуры

Процедура ЗадачаРасчетныйДокумент(ВидЗадачи, ОбъектЗадачи, ДатаЗадачи)
	
	Если ВидЗадачи = Справочники.ВидыЗадачПользователей.РасчетЗарплаты Тогда
		ВидДокумента	= "НачислениеЗарплатыРаботникамОрганизаций";
	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.РасчетСНиСО Тогда
		ВидДокумента	= "РасчетСНиСО";
	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.РасчетУдержанийРаботниковОрганизаций Тогда
		ВидДокумента	= "РасчетУдержанийРаботниковОрганизаций";
	ИначеЕсли ВидЗадачи = Справочники.ВидыЗадачПользователей.ОтражениеЗарплатыВУчете Тогда
		ВидДокумента	= "ОтражениеЗарплатыВРеглУчете";
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",		ОбъектЗадачи);
	Запрос.УстановитьПараметр("ПериодРегистрации",	НачалоМесяца(ДатаЗадачи));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Док.Ссылка КАК Ссылка
		|ИЗ
		|	Документ." + ВидДокумента + " КАК Док
		|ГДЕ
		|	Док.ПериодРегистрации = &ПериодРегистрации
		|	И Док.Организация = &Организация
		|	И (НЕ Док.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Попытка
			ФормаДокумента = Выборка.Ссылка.ПолучитьФорму();
		Исключение
			Предупреждение("Недостаточно прав для выполнения операции!");
		КонецПопытки;
	Иначе                                
		Попытка
			ФормаДокумента = Документы[ВидДокумента].ПолучитьФормуНовогоДокумента(, , ОбъектЗадачи);
			ФормаДокумента.Организация			= ОбъектЗадачи;
			ФормаДокумента.ПериодРегистрации	= НачалоМесяца(ДатаЗадачи);
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ФормаДокумента, глЗначениеПеременной("глТекущийПользователь"));
			ФормаДокумента.Заполнить(ОбъектЗадачи);
		Исключение
			Предупреждение("Недостаточно прав для выполнения операции!");
		КонецПопытки;
	КонецЕсли;
	
	Если ФормаДокумента <> Неопределено Тогда
		ФормаДокумента.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗадачаУвольнение(ОбъектЗадачи, ДатаЗадачи)
	
	Попытка
		ФормаДокумента = Документы.УвольнениеИзОрганизаций.ПолучитьФормуНовогоДокумента(, , ОбъектЗадачи);
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("ОбъектЗадачи", ОбъектЗадачи);
		ДанныеЗаполнения.Вставить("ДатаЗадачи", ДатаЗадачи);
		ФормаДокумента.Организация = ОбъектЗадачи["ТекущаяСтруктурнаяЕдиница"];
		ФормаДокумента.Заполнить(ДанныеЗаполнения);
		ФормаДокумента.Открыть();
	Исключение
		Предупреждение("Недостаточно прав для выполнения операции!");
	КонецПопытки;		
	
КонецПроцедуры
