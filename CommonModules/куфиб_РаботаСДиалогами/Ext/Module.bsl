// Формирует и устанавливает текст заголовка формы документа
//
// Параметры:
//  СтрокаВидаОперации - строка вида операции документа, 
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура УстановитьЗаголовокФормыДокумента(СтрокаВидаОперации = "", ДокументОбъект, ФормаДокумента) Экспорт

	ФормаДокумента.АвтоЗаголовок = Ложь; // заголовок будем писать сами
	
	Если ПустаяСтрока(СтрокаВидаОперации) Тогда
		Заголовок = ДокументОбъект.Метаданные().Синоним + ": ";
	Иначе
		Заголовок = ДокументОбъект.Метаданные().Синоним + ": " + СтрокаВидаОперации + ". ";
	КонецЕсли;
		
	Если ДокументОбъект.Ссылка.Пустая() Тогда  
		Заголовок = Заголовок + "Новый";
	Иначе
		Если ДокументОбъект.Проведен Тогда
			Заголовок = Заголовок + "Проведен";
		ИначеЕсли фин_ОбщегоНазначенияСервер.ПроведениеДоступно(ДокументОбъект) Тогда
			Заголовок = Заголовок + "Не проведен";
		Иначе
			Заголовок = Заголовок + "Записан";
		КонецЕсли;
		Если куфиб_ОбщегоНазначения.ЕстьРеквизитДокумента("РучнаяКорректировка", ДокументОбъект.Метаданные()) Тогда
			Если ДокументОбъект.РучнаяКорректировка Тогда
				Заголовок = Заголовок + ": (Ручная корректировка)";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ФормаДокумента.Заголовок = Заголовок;

КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Формирует текст-заголовок формы отчета
//
Функция СформироватьЗаголовокОсновнойФормы(ДатаНач, ДатаКон, НазваниеОтчета, РежимВводаПериода) Экспорт

	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если РежимВводаПериода =  0 Тогда  // произвольный период
		Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда
			ОписаниеПериода     = "Период не установлен";

		Иначе
			Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда
				ОписаниеПериода = "" + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""...""") 
				+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

			Иначе
				Если ДатаНач <= ДатаКон Тогда
					ОписаниеПериода = "" + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
				Иначе
					ОписаниеПериода = "Неправильно задан период!"
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
		
	ИначеЕсли РежимВводаПериода =  1 Тогда   // на дату
		Если ДатаКон = '00010101000000' Тогда
			ОписаниеПериода = "на текущее время " + Формат(ТекущаяДата(), "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

		Иначе
			ОписаниеПериода = "на конец дня " + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");
			
		КонецЕсли;

	ИначеЕсли РежимВводаПериода = 2 Тогда   // месяц
		Если ДатаНач = '00010101000000' Тогда
			ОписаниеПериода     = "Период не установлен";

		Иначе
			ОписаниеПериода = "" + ПредставлениеПериода(НачалоМесяца(ДатаНач), КонецМесяца(ДатаНач), "ФП = Истина");
			
		КонецЕсли;
		
	ИначеЕсли РежимВводаПериода = 3 Тогда   // квартал
		Если ДатаНач = '00010101000000' Тогда
			ОписаниеПериода     = "Период не установлен";

		Иначе
			ОписаниеПериода = "" + ПредставлениеПериода(НачалоКвартала(ДатаНач), КонецКвартала(ДатаНач), "ФП = Истина");
			
		КонецЕсли;
		
	ИначеЕсли РежимВводаПериода = 4 Тогда   // год
		Если ДатаНач = '00010101000000' Тогда
			ОписаниеПериода     = "Период не установлен";

		Иначе
			ОписаниеПериода = "" + ПредставлениеПериода(НачалоГода(ДатаНач), КонецГода(ДатаНач), "ФП = Истина");
			
		КонецЕсли;
		
	КонецЕсли;

	// - ЗУП - начало
	
	НазваниеОтчета = СтрЗаменить(НазваниеОтчета, "работник", "сотрудник");
	
	// - ЗУП - конец
	Возврат НазваниеОтчета+" (" + ОписаниеПериода + ") ";

КонецФункции

// Процедура добавляет информацию о коде и/или артикуле в ячейки табличного поля
// при выводе очередной строки
//
// Параметры:
//  КолонкиТабПоля - коллекция колонок табличного поля
//  ЯчейкиСтрокиТабПоля - коллекция ячеек строки табличного поля
//  Номенклатура - СправочникСсылка.Номенклатура, товар, по которому надо вывести код и/или артикул
//
Процедура ПоказатьКодАртикул(КолонкиТабПоля, ЯчейкиСтрокиТабПоля, Номенклатура) Экспорт

	Если КолонкиТабПоля.Код.Видимость Тогда
		Если Номенклатура <> Неопределено Тогда
			ЯчейкиСтрокиТабПоля.Код.УстановитьТекст(Номенклатура.Код);
		Иначе
			ЯчейкиСтрокиТабПоля.Код.УстановитьТекст("");
		КонецЕсли;
	КонецЕсли;

	Если КолонкиТабПоля.Артикул.Видимость Тогда
		Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			ЯчейкиСтрокиТабПоля.Артикул.УстановитьТекст(Номенклатура.Артикул);
		Иначе
			ЯчейкиСтрокиТабПоля.Артикул.УстановитьТекст("");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПоказатьКодАртикул()

	
// Заполняет список пунктов подменю выбора вида операции значениями переданной коллекции объектов метаданных,
// соответствующей перечислению видов операций для данного документа, с фильтром по переданному списку.
// Всем кнопкам назначается одно переданное действие.
// Обычно используется для заполнения пунктов подменю "ПодменюВидаОперации" командной панели
// формы документа значениями перечисления "Вид операции" для данного вида документа
//
// Параметры:
//  ЭлементМеню                   - кнопка командной панели формы, соответствующая подменю, которое надо заполнить, 
//  ОбъектЗаполнения              - коллекция для заполнения пунктов подменю, 
//  ОбъектОбработкиВыбораОперации - действие, которое надо выполнить при выборе любого пункта подменю.
//  СписокИсключения              - список значений перечисления, которые не должны добавляться
//
Процедура УстановитьПодменюВыбораВидаОперацииФильтр(ЭлементМеню, ОбъектЗаполнения, 
													ОбъектОбработкиВыбораОперации, СписокИсключения) Экспорт

	#Если ТолстыйКлиентОбычноеПриложение Тогда
	Для каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл

		Если СписокИсключения.НайтиПоЗначению(ЭлементЗаполнения.Имя) = Неопределено Тогда

		ЭлементМеню.Кнопки.Добавить(ЭлементЗаполнения.Имя, ТипКнопкиКоманднойПанели.Действие, 
		                            ЭлементЗаполнения.Синоним, ОбъектОбработкиВыбораОперации);

		ЭлементМеню.Кнопки[ЭлементЗаполнения.Имя].ИзменяетДанные = Истина;
		КонецЕсли;

	КонецЦикла;
	#КонецЕсли	

КонецПроцедуры // РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации()

//Процедура предоставляет пользователю при создании документа выбрать операцию из списка
//
Процедура ВыбратьВидОперации(ДокументОбъект, Отказ, СписокИсключений = Неопределено, ПараметрОбъектКопирования = Неопределено,ВыбиратьВсеРавно=Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ВыбиратьВсеРавно ИЛИ НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации)) 
		И куфиб_ОбщегоНазначения.ПолучитьЗначениеПоУмолчанию(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"), "ЗапрашиватьВидОперацииПриВводеНового") Тогда
		
		Если ТипЗнч(СписокИсключений) <> Тип("СписокЗначений") Тогда
			СписокИсключений = Новый СписокЗначений;
		КонецЕсли;
		
		СписокВидов = Новый СписокЗначений();
		Для каждого ЭлементЗаполнения из фин_ОбщегоНазначенияСервер.ЗначенияПеречисленияВидаОперации(ДокументОбъект) Цикл
			Если СписокИсключений.НайтиПоЗначению(ЭлементЗаполнения.Имя) = Неопределено Тогда
				СписокВидов.Добавить(ЭлементЗаполнения.Имя, ЭлементЗаполнения.Синоним);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокВидов.Количество()= 1 Тогда 
			ДокументОбъект.ВидОперации = фин_ОбщегоНазначенияСервер.ЗначениеВидаОперации(ДокументОбъект,СписокВидов[0].Значение);
			Возврат;	
		КонецЕсли;
		
		Вид = СписокВидов.ВыбратьЭлемент("Выбор вида операции документа");
		
		Если НЕ Вид = Неопределено Тогда
			ДокументОбъект.ВидОперации = фин_ОбщегоНазначенияСервер.ЗначениеВидаОперации(ДокументОбъект,Вид.Значение);
		Иначе
			Отказ = Истина;
		КонецЕсли; 		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет модифицированность документа перед печатью, и если необходимо 
// записывает его
// 
// Параметры
//  Документ - (ДокументОбъект.*) - проверяемый документ
//
Функция ПроверитьМодифицированность(Документ) Экспорт

	Результат = Ложь;

	Если Документ.Модифицированность() Тогда

		Проведен = ?(Документ.Проведен, " и провести","");

		Ответ = Вопрос("Документ изменен. Для печати его необходимо записать"+ Проведен +".
		               |Записать" + Проведен + "?",
		               РежимДиалогаВопрос.ОКОтмена, , 
		               КодВозвратаДиалога.Отмена,
		               "Документ изменен");

		Если Ответ = КодВозвратаДиалога.ОК Тогда

			Если Документ.Проведен Тогда

				ДатаДока = НачалоДня(Документ.Дата);
				ДатаДня  = НачалоДня(ТекущаяДата());

				Попытка
					
					Если ДатаДока = ДатаДня и фин_ОбщегоНазначенияСервер.ОперативноеПроведениеДоступно(Документ) Тогда
						Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
					Иначе
						Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					КонецЕсли;

				Исключение

					Предупреждение("Операция не выполнена!");
					Возврат Результат = Истина;

				КонецПопытки;

			Иначе
				Документ.Записать();
			КонецЕсли;

			Результат = Истина;

		КонецЕсли;

	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированность()

// Функция формирует представление заголовка документа
//
// Возвращаемое значение:
//  Строка - представление номера документа
//
Функция СформироватьЗаголовокДокумента(Объект, НазваниеОбъекта = "", глСписокПрефиксовУзлов = Неопределено, ПереноситьДату = Ложь) Экспорт
	
	Если ТипЗнч(Объект)=Тип("Массив") Тогда
		Возврат СформироватьЗаголовокДокумента(Объект[0], НазваниеОбъекта, глСписокПрефиксовУзлов, ПереноситьДату);
	КонецЕсли;
	
	Если ПереноситьДату Тогда 
		ПереводСтроки = Символ(13);
	Иначе 
		ПереводСтроки = " "
	КонецЕсли;
	
	Сведения = фин_ОбщегоНазначенияСервер.СведенияМетаданных(Объект);
	
	Если НЕ ЗначениеЗаполнено(НазваниеОбъекта) Тогда 
		НазваниеДокумента = Сведения.Представление;
	КонецЕсли;
	
	ОбъектИмя = Сведения.Имя;
	
	Если фин_ОбщегоНазначенияСервер.ЕстьОбъектМетаданных(ОбъектИмя,"Документы") <> Неопределено Тогда
		СтрокаЗаголовка = НазваниеОбъекта + " № " + куфиб_ОбщегоНазначения.ПолучитьНомерНаПечать(Объект, глСписокПрефиксовУзлов)
						+ ПереводСтроки + "от " + Формат(Сведения.Дата, "ДЛФ=DD");
	ИначеЕсли фин_ОбщегоНазначенияСервер.ЕстьОбъектМетаданных(ОбъектИмя,"Справочники") <> Неопределено Тогда
		СтрокаЗаголовка = НазваниеОбъекта + куфиб_ОбщегоНазначения.ПолучитьНомерНаПечать(Объект, глСписокПрефиксовУзлов)
						+ ПереводСтроки;
	КонецЕсли;				
	
	Возврат СтрокаЗаголовка

КонецФункции // СформироватьЗаголовокДокумента()

//  Процедура определяет ситуацию, когда при изменении своей даты документ 
//  оказывается в другом периоде нумерации документов, и в это м случае
//  присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументОбъект         - контекст документа,из которого вызвана процедура 
//  НачальнаяДатаДокумента - начальная дата документа 
// 
Процедура ПроверитьНомерДокумента(ДокументОбъект, НачальнаяДатаДокумента) Экспорт   // в разработке
     фин_ОбщегоНазначенияСервер.ПроверитьНомерДокумента(ДокументОбъект, НачальнаяДатаДокумента);
КонецПроцедуры // ПроверитьНомерДокумента()

// Процедура выводит форму структуры подчиненности документа
//
Процедура ПоказатьСтруктуруПодчиненностиДокумента(ДокументСсылка) Экспорт
 	Если фин_ОбщегоНазначенияСервер.ЕстьОбъектМетаданных("куфиб_ФормаСтруктурыПодчиненности","ОбщиеФормы") = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ФормаСтруктурыПодчиненности = ПолучитьФорму("ОбщаяФорма.куфиб_ФормаСтруктурыПодчиненности",Новый Структура("ДокументСсылка",ДокументСсылка),,ДокументСсылка);
	
	Если ФормаСтруктурыПодчиненности.Открыта() Тогда
		ФормаСтруктурыПодчиненности.Закрыть();
	КонецЕсли;
	
	ФормаСтруктурыПодчиненности.Открыть();
	 
КонецПроцедуры // ПоказатьСтруктуруПодчиненностиДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ ДОКУМЕНТОВ

// Процедура выполняет открытие формы работы со свойствами документа
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//  ФормаДокумента - форма редактируемого документа
//
Процедура ОткрытьСвойстваДокумента(ДокументОбъект, ФормаДокумента) Экспорт
 	Если фин_ОбщегоНазначенияСервер.ЕстьОбработка("ЗначенияСвойствОбъекта") = Ложь Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		Вопрос = "Перед началом работы со свойствами необходимо записать документ. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Попытка 
				ФормаДокумента.ЗаписатьВФорме();
			Исключение
				куфиб_ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
				Возврат;
			КонецПопытки;	
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Форма = Обработки.ЗначенияСвойствОбъекта.ПолучитьФорму("ЗначенияСвойствОбъекта", ФормаДокумента, ДокументОбъект.Ссылка);
		Форма.НазначениеСвойств      = ПредопределенноеЗначение("ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы");
		Форма.ОбъектОтбораЗначений   = ДокументОбъект.Ссылка;
		Форма.ОбъектОтбораНазначений = ДокументОбъект.Ссылка;

		Форма.ПрочитатьЗаполнитьСвойстваИЗначения();
	#Иначе
		Форма = ПолучитьФорму("Обработка.ЗначенияСвойствОбъекта.Форма.ФормаУправляемая",Новый Структура("НазначениеСвойств,ОбъектОтбораЗначений,ОбъектОтбораНазначений",ПредопределенноеЗначение("ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы"),ДокументОбъект.Ссылка,ДокументОбъект.Ссылка) ,ФормаДокумента, ДокументОбъект.Ссылка);
	#КонецЕсли

	Форма.Открыть();

КонецПроцедуры // ОткрытьСвойстваДокумента()

// Процедура выполняет открытие формы работы с категориями документа
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//  ФормаДокумента - форма редактируемого документа
//
Процедура ОткрытьКатегорииДокумента(ДокументОбъект, ФормаДокумента) Экспорт
	
	Если фин_ОбщегоНазначенияСервер.ЕстьОбработка("КатегорииОбъекта") = Ложь Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		Вопрос = "Перед началом работы с категориями необходимо записать документ. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Попытка
				ФормаДокумента.ЗаписатьВФорме();
			Исключение
				куфиб_ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
				Возврат;
			КонецПопытки;	
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Форма = Обработки.КатегорииОбъекта.ПолучитьФорму("КатегорииОбъекта", ФормаДокумента, ДокументОбъект.Ссылка);

		Форма.НазначениеКатегорий   = ПредопределенноеЗначение("ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы");
		Форма.ОбъектОтбораКатегорий = ДокументОбъект.Ссылка;

		Форма.ПрочитатьЗаполнитьКатегорииОбъекта();
 	#Иначе
		Форма = ПолучитьФорму("Обработка.КатегорииОбъекта.Форма.ФормаУправляемая",Новый Структура("НазначениеКатегорий,ОбъектОтбораКатегорий",ПредопределенноеЗначение("ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы"),ДокументОбъект.Ссылка) ,ФормаДокумента, ДокументОбъект.Ссылка);
	#КонецЕсли
	Форма.Открыть();

КонецПроцедуры // ОткрытьКатегорииДокумента()


// Процедура устанавливает отбор по основной организации в указанно форме
//
Процедура УстановитьОтборПоОрганизации(	Форма, УчетПоВсемОрганизациям, ОсновнаяОрганизация, 
										ИмяРеквизитаСписка, СкрыватьКолонку = Истина, ИмяОтбора = "Организация") Экспорт

	 //В том случае если учте ведется по одной организации необходимо установить мягкий отбор.
	 //т.е. отбор, с возможностью его изменения.
	лУчетПоВсемОрганизациям =  фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"), "УчетПоВсемОрганизациям");
	Если НЕ лУчетПоВсемОрганизациям Тогда // Установлен режим учета по одной организации

		Если НЕ (ТипЗнч(Форма[ИмяРеквизитаСписка]) = Тип("ТаблицаЗначений")) Тогда // Элемент - табличное поле

			 //Проверим - Если это связанный регистр сведений тогда не нужно устанавливать отбор - 
			 //он уже установлен системой автоматически

			Если ИмяРеквизитаСписка = "РегистрСведенийСписок" Тогда

				// Возвможно это переход по кнопке Перейти
				Если ТипЗнч(Форма.ПараметрОтборПоИзмерению) = Тип("Структура") Тогда
					Если ЗначениеЗаполнено(Форма.ПараметрОтборПоИзмерению) Тогда
						Возврат; // Это переход по кнопке Перейти - не нужно устанавливать отбор
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;
          Если не Форма[ИмяРеквизитаСписка].Отбор.Найти(ИмяОтбора) = Неопределено Тогда
			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].ВидСравнения  = ВидСравнения.Равно;
			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].Использование = Истина;
			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].Значение      = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ОсновнаяОрганизация");

			Форма.ЭлементыФормы[ИмяРеквизитаСписка].НастройкаОтбора[ИмяОтбора].Доступность = Ложь;
          КонецЕсли;
		КонецЕсли;

		Если СкрыватьКолонку Тогда

			Если НЕ Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки.Найти(ИмяОтбора) = Неопределено Тогда

				Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки[ИмяОтбора].Видимость         = Ложь;
				Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки[ИмяОтбора].ИзменятьВидимость = Ложь;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // УстановитьОтборПоОрганизации()

// Функция спрашивает пользователя записать ли объект, или нет, если он новый
//
// Параметры
//  ФормаОбъекта - Форма объекта, из которой пытаются произвести действия
//
// Возвращаемое значение:
//   Булево - Объект записан или нет
//
Функция ЗаписатьНовыйОбъектВФорме(ФормаОбъекта) Экспорт

	Если ФормаОбъекта.Объект.Ссылка.Пустая() Тогда
		
		//Если куфиб_ОбщегоНазначения.ВСоставеДокументов(ФормаОбъекта.ЭтотОбъект.Ссылка) Тогда
		//	ТекстВопроса = "Для выполнения данной операции необходимо записать документ. Записать?";
		//Иначе // Справочник
		//	ТекстВопроса = "Для выполнения данной операции необходимо записать элемент. Записать?";
		//КонецЕсли; 
		
		ТекстВопроса = "Для выполнения данной операции необходимо записать элемент. Записать?";

		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		Иначе
			Попытка
				Возврат ФормаОбъекта.ЗаписатьВФорме();
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции // ЗаписатьНовыйОбъектВФорме()

// Заполняет значение реквизита формы СтруктурноеПодразделение, управляет видимостью панели ПанельСтруктурногоПодразделения 
//
// Параметры:
//   Организация - реквизит документа Организация
//	 СтруктурноеПодразделениеОрганизация - реквизит документа СтруктурноеПодразделение
//   ФормаДокумента - форма документа 
//	 ЭтоНовый - определяет, записан ли элемент в базу данных
//
Процедура УстановитьВидимостьСтруктурногоПодразделенияВУправляемойФорме(Организация, СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ОтображатьСтруктурныеПодразделения, ПанельСтруктурногоПодразделения, ЭтоНовый) Экспорт

	Если  ОтображатьСтруктурныеПодразделения Тогда
		Если ЭтоНовый И НЕ ЗначениеЗаполнено(СтруктурноеПодразделение)Тогда
			СтруктурноеПодразделениеОрганизация = Организация;
		Иначе
			СтруктурноеПодразделениеОрганизация = ?(ЗначениеЗаполнено(СтруктурноеПодразделение), СтруктурноеПодразделение, Организация);
		КонецЕсли;	
		ПанельСтруктурногоПодразделения.ТекущаяСтраница = ПанельСтруктурногоПодразделения.ПодчиненныеЭлементы.СтруктурнаяЕдиница;
	Иначе 
		Если НЕ ЭтоНовый И ЗначениеЗаполнено(СтруктурноеПодразделение)Тогда
			СтруктурноеПодразделениеОрганизация = ?(ЗначениеЗаполнено(СтруктурноеПодразделение), СтруктурноеПодразделение, Организация);
			ПанельСтруктурногоПодразделения.ТекущаяСтраница = ПанельСтруктурногоПодразделения.ПодчиненныеЭлементы.СтруктурнаяЕдиница;
    	Иначе
			ПанельСтруктурногоПодразделения.ТекущаяСтраница = ПанельСтруктурногоПодразделения.ПодчиненныеЭлементы.Организация;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьСтруктурногоПодразделения()


// Процедура - обработчик события ПриИзменении поля ввода СтруктурноеПодразделение
//
Процедура ПриИзмененииЗначенияСтруктурногоПодразделения(ТекПользователь, Организация, СтруктурноеПодразделение, ФлагИзмененияОрганизации = Ложь) Экспорт
	
	ИсходнаяОрганизация = Организация;
	
	фин_ОбщегоНазначенияСервер.УстановитьОрганизациюИСтруктурноеПодразделение(Организация, СтруктурноеПодразделение);	
	
	Если ИсходнаяОрганизация <> Организация Тогда
	 	ФлагИзмененияОрганизации = Истина;
	Иначе
		ФлагИзмененияОрганизации = Ложь;		
	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияСтруктурногоПодразделения


///////////////////////////////////////////////////////////////////////////////////////////////
///

// Процедура открывает общую форму выбора Структурных подразделений и позволяет выбрать значение.
// заполняет реквизит Организация и СтруктурноеПодразделение из формы выбора структурного подразделения

Процедура НачалоВыбораСтруктурногоПодразделения(ФормаДокумента, СтандартнаяОбработка, Организация, СтруктурноеПодразделение, ФлагИзмененияОрганизации = Ложь, ДоступностьИзмененияОрганизации = Истина) Экспорт
	СтандартнаяОбработка = Ложь;
	ИсходнаяОрганизация = Организация;
	//ФормаВыбора = ПолучитьОбщуюФорму("ФормаВыбораСтруктурногоПодразделения"); //Общая форма
	ФормаВыбора = ПолучитьФорму("ОбщаяФорма.общ_ФормаВыбораСтруктурногоПодразделения"); //Общая форма
	ФормаВыбора.Организация 			= Организация;
	ФормаВыбора.АктивноеПодразделение 	= СтруктурноеПодразделение;
	//ФормаВыбора.ЭлементыФормы.Организация.Доступность = ДоступностьИзмененияОрганизации;
	ФормаВыбора.Элементы.Организация.Доступность = ДоступностьИзмененияОрганизации;
	                                                                                  
	СтруктураРезультата = ФормаВыбора.ОткрытьМодально();

	Если ТипЗнч(СтруктураРезультата) = Тип("Структура") Тогда
		Организация				 = СтруктураРезультата.Организация;
		СтруктурноеПодразделение = СтруктураРезультата.Подразделение;
		
		// если ДоступностьИзмененияОрганизации = Ложь тогда нет необходимости дальнейшего действия
		Если ДоступностьИзмененияОрганизации Тогда 
			ФормаДокумента.СтруктурноеПодразделениеОрганизация = СтруктураРезультата.Подразделение;  
			фин_ОбщегоНазначенияСервер.УстановитьОрганизациюИСтруктурноеПодразделение(Организация, ФормаДокумента.СтруктурноеПодразделениеОрганизация);
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ИсходнаяОрганизация <> Организация Тогда
	 	ФлагИзмененияОрганизации = Истина;
	Иначе
		ФлагИзмененияОрганизации = Ложь;
	КонецЕсли;
	
КонецПроцедуры // НачалоВыбораСтруктурногоПодразделения

// Процедура обслуживает событие ОбновлениеОтображения в форме, где расположен ЭУ тайпинга.
//
// Параметры
//  ЭтаФорма - Форма записи регистра сведений КонтактнаяИнформация
//  Элемент - элемент управления в котором происводится тайпинг
//
Процедура ОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, Элемент, ОбработкаТайпинга, ТекстТайпинга) Экспорт

	Если ОбработкаТайпинга Тогда
		ЭтаФорма.ТекущийЭлемент = Элемент;
		Элемент.ВыделенныйТекст = ТекстТайпинга;
		ОбработкаТайпинга = Ложь;
		ТекстТайпинга = "";
	КонецЕсли; 
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		//Элемент.ЦветТекстаПоля = ЦветаСтиля.ТекстИнформационнойНадписи;
	Иначе
		Элемент.ЦветТекстаПоля = Новый Цвет;
	КонецЕсли;

КонецПроцедуры // ОбновлениеОтображенияВФормеПриТайпинге()

// Процедура обслуживает событие АвтоПодборТекста элемента управления СтруктурноеПодразделение для подмены автопоиска по тексту.
//
// Параметры
//  Текст - текст введенный в поле ввода Вид
//	Владелец - ссылка на организацию
//  ТекстАвтоПодбора - текст автоподбора в поле Вид
//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
//
Процедура АвтоПодборТекстаВПолеСтруктурногоПодразделения(Текст, Владелец, ТекстАвтоПодбора, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СписокЗначений = куфиб_ОбщегоНазначения.ПолучитьРезультатЗапросаАвтоподбораСтруктурногоПодразделенияСписком(Владелец, Текст);                    
	                                                  
	Если СписокЗначений.Количество()>0 Тогда
		
		// для управляемых форм
		Если ТекстАвтоПодбора = Неопределено Тогда
			ТекстАвтоПодбора = СписокЗначений;
			Возврат;
		КонецЕсли;

	КонецЕсли;   
КонецПроцедуры

 // Процедура обслуживает событие ОкончаниеВводаТекста элемента управления СтруктурноеПодразделение
// Параметры
//	ФормаДокумента - исходная форма
//  Элемент - поле ввода
//  Текст - текст введенный в поле ввода СтрукутурноеПодразделение
//	Владелец - ссылка на организацию
//  СтруктурноеПодразделениеОрганизация - реквизит документа СтруктурноеПодразделение
//  Значение - данные элемента управления поле ввода
//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
//
Процедура ОкончаниеВводаТекстаВПолеСтруктурногоПодразделения(ФормаДокумента, Элемент, Текст, Владелец, СтруктурноеПодразделениеОрганизация, Значение, СтандартнаяОбработка) Экспорт
	
	Если СтрДлина(Элемент.ВыделенныйТекст) <> 0 Тогда
		Текст = Сред(Текст, 1, СтрДлина(Текст) - СтрДлина(Элемент.ВыделенныйТекст));
	КонецЕсли;
	
	СписокЗначений = куфиб_ОбщегоНазначения.ПолучитьРезультатЗапросаАвтоподбораСтруктурногоПодразделенияСписком(Владелец, Текст);                    
	
	Если СписокЗначений.Количество()>0 Тогда
		
		СтандартнаяОбработка = Ложь;
		// - КУФИБ - начало
		Если ТипЗнч(Элемент)=Тип("ПолеФормы") Тогда  // если управляемый интерфейс
			Значение = СписокЗначений.Скопировать();
			Возврат;
		КонецЕсли;
		// -КУФИБ- конец
		Если СписокЗначений.Количество() = 1 Тогда
			Значение = СписокЗначений[0].Значение;
		Иначе
			Элемент.СписокВыбора = СписокЗначений;
			ВыбранныйЭлемент  =  ФормаДокумента.ВыбратьИзСписка(СписокЗначений, Элемент, 0);
			
			Если ВыбранныйЭлемент <> Неопределено Тогда
				Значение = ВыбранныйЭлемент.Значение;
			Иначе
				Значение = Элемент.Значение;
			КонецЕсли;	
		КонецЕсли;
		
		СтруктурноеПодразделениеОрганизация = Значение;
	Иначе
		//в том случае, если вводиться подразделение, но не струкутрное
		СтандартнаяОбработка = Ложь;
 		// - КУФИБ - начало
		Если ТипЗнч(Элемент)=Тип("ПолеФормы") Тогда  // если управляемый интерфейс
			Возврат;
		КонецЕсли;
		// -КУФИБ- конец
       Значение = Элемент.Значение;
			
	КонецЕсли;
	
КонецПроцедуры

// Процедура обслуживает событие АвтоПодборТекста элемента управления ПолеВвода для подмены автопоиска по тексту.
//
// Параметры
//  Элемент - поле ввода
//  Текст - текст введенный в поле ввода Вид
//  ТекстАвтоПодбора - текст автоподбора в поле Вид
//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ТипСправочника - Тип, тип справочника автоподбора текста
//

Процедура АвтоПодборТекстаВЭлементеУправления(Знач Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, знач СтруктураПараметров, ТипСправочника) Экспорт
	РезультатЗапроса = куфиб_ОбщегоНазначения.ПолучитьРезультатЗапросаАвтоподбора(Текст, СтруктураПараметров, ТипСправочника, 2);
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтандартнаяОбработка = Ложь;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			ПустаяСсылка = Новый(ТипСправочника);
			КоллекцияЭлементовПоиска = ПустаяСсылка.Метаданные().ВводПоСтроке;
			Для каждого ЭлементКоллекции Из КоллекцияЭлементовПоиска Цикл
				Если Лев(Врег(Выборка[ЭлементКоллекции.Имя]), СтрДлина(Текст)) = ВРег(Текст) Тогда
					Если Врег(Текст) <> Врег(Выборка[ЭлементКоллекции.Имя]) Тогда
						ТекстАвтоподбора = Выборка[ЭлементКоллекции.Имя];
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры // АвтоПодборТекстаВЭлементеУправления()

// Процедура обслуживает событие ОкончаниеВводаТекста элемента управления Вид в форме записи регистра
// сведений Контактная информация.
//
// Параметры
//  Элемент - поле ввода
//  Текст - текст введенный в поле ввода Вид
//  Значение - данные элемента управления поле ввода
//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ЭтаФорма - форма записи регистра сведений контактная информация
//  ТипСправочника - Тип, тип справочника автоподбора текста
//
Процедура ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, 
												  СтруктураПараметров, ЭтаФорма, ТипСправочника, 
												  ОбработкаТайпинга = Неопределено, ТекстТайпинга = Неопределено, 
												  ПоследнееЗначениеЭлементаТайпинга = Неопределено, 
												  ПриОтсутствииЗначенияОставлятьТекст = Истина) Экспорт

	Если ПустаяСтрока(Текст) Тогда
		Значение = Новый(ТипСправочника);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли; 
	РезультатЗапроса = куфиб_ОбщегоНазначения.ПолучитьРезультатЗапросаАвтоподбора(Текст, СтруктураПараметров, ТипСправочника, 51);
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтандартнаяОбработка = Ложь;
	Если РезультатЗапроса.Пустой() И ПриОтсутствииЗначенияОставлятьТекст Тогда
		ОтветНаВопрос = Вопрос(("В элемент управления введены некорректные данные." + Символы.ПС + "Продолжить?"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			ОбработкаТайпинга = Истина;
			ТекстТайпинга = Текст;
		Иначе
			Значение = Текст;
		КонецЕсли;						
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Значение = Выборка.Ссылка;
		ИначеЕсли Выборка.Количество() > 50 Тогда
			Предупреждение("Найдено более 50-ти значений, удовлетворяющих условиям выбора.
						   |Задайте более длинную строку или воспользуйтесь командой выбора (F4).");
			Если ПоследнееЗначениеЭлементаТайпинга = Неопределено Тогда
				Значение = Текст;
			Иначе
				Значение = ПоследнееЗначениеЭлементаТайпинга;
			КонецЕсли;
		Иначе
			Если Выборка.Количество() = 0 Тогда
				ВыбранныйЭлемент = Неопределено;
			Иначе
				СписокВыбора = куфиб_ОбщегоНазначения.СформироватьСписокВыбораЗначенийТайпинга(РезультатЗапроса, Текст, ТипСправочника);
				ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент);
			КонецЕсли; 
			Если ВыбранныйЭлемент = Неопределено Тогда
				ОтветНаВопрос = Вопрос(("В элемент управления введены некорректные данные." + Символы.ПС + "Продолжить?"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
				Если ПоследнееЗначениеЭлементаТайпинга = Неопределено Тогда
					Значение = Текст;
				Иначе
					Значение = ПоследнееЗначениеЭлементаТайпинга;
				КонецЕсли; 
				Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
					ОбработкаТайпинга = Истина;
					ТекстТайпинга = Текст;
				КонецЕсли;
			Иначе
				Значение = ВыбранныйЭлемент.Значение;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры // ОкончаниеВводаТекстаВЭлементеУправления()

//Процедура предоставляет пользователю при создании документа выбрать операцию из списка
//
Процедура ВыбратьВидОперацииЗначение(ДокументОбъект, Отказ, СписокИсключений = Неопределено, ПараметрОбъектКопирования = Неопределено,ВыбиратьВсеРавно=Ложь,ВнеЗависимостиОтНастроекПользователя=Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ВыбиратьВсеРавно ИЛИ НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации)) 
		И (ВнеЗависимостиОтНастроекПользователя ИЛИ куфиб_ОбщегоНазначения.ПолучитьЗначениеПоУмолчанию(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"), "ЗапрашиватьВидОперацииПриВводеНового")) Тогда
		
		Если ТипЗнч(СписокИсключений) <> Тип("СписокЗначений") Тогда
			СписокИсключений = Новый СписокЗначений;
		КонецЕсли;
		
		СписокВидов = Новый СписокЗначений();
		СписокЭлементов = фин_ОбщегоНазначенияСервер.ЭлементыПеречисленияВидаОперации(ДокументОбъект.ВидОперации);
		Для каждого ЭлементЗаполнения Из СписокЭлементов Цикл
			Если СписокИсключений.НайтиПоЗначению(ЭлементЗаполнения.Значение) = Неопределено Тогда
				СписокВидов.Добавить(ЭлементЗаполнения.Значение, ЭлементЗаполнения.Представление);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокВидов.Количество()= 1 Тогда 
			ДокументОбъект.ВидОперации = СписокВидов[0].Значение;
			Возврат;	
		КонецЕсли;
		
		Вид = СписокВидов.ВыбратьЭлемент("Выбор вида операции документа");
		
		Если НЕ Вид = Неопределено Тогда
			ДокументОбъект.ВидОперации = Вид.Значение;
		Иначе
			Отказ = Истина;
		КонецЕсли; 		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается из форм платежных документов при смене кассы или 
// банковского счета. Меняет валюту, курс документа и предлагает пересчитать сумму.
//
// Параметры:
//  ВалютаДокумента  - ссылка на справочник, валюта документа до изменения;
//  КурсДокумента    - число, курс документа до изменения; 
//  ДатаДокумента    - дата, дата на которую будем получать новый курс; 
//  СуммаДокумента   - число, сумма документа; 
//  ВалютаДенежныхСредств - ссылка на справочник, валюта выбранного счета или кассы 
//                     (новая валюта документа);
//
Процедура ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, ДатаДокумента, 
	                                        СуммаДокумента, ВалютаДенежныхСредств,ПересчитыватьСумму=Истина) Экспорт

	// Поменяем валюту до вопроса о пересчете, чтобы было видно, что она действительно поменялась.
	СтараяВалюта    = ВалютаДокумента; 
	СатрыйКурс      = КурсДокумента;
	СтараяКратность = КратностьДокумента;
	ВалютаДокумента = ВалютаДенежныхСредств; // должны строго совпадать

	СтруктураКурсаВалютаДокумента = куфиб_ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;

	Если ВалютаДокумента <>  СтараяВалюта
	   И СуммаДокумента > 0 Тогда

		// Надо предложить пересчитать сумму.
		Ответ = Вопрос("Изменилась валюта документа. Пересчитать сумму документа?", 
		               РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СуммаДокумента = куфиб_ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтараяВалюта, ВалютаДокумента, СатрыйКурс,
									    КурсДокумента,СтараяКратность,КратностьДокумента);
		Иначе
			ПересчитыватьСумму=Ложь;								
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияКассыБанковскогоСчета()

//Функция раскладывает строку с данными о месте рождения на элементы структуры
//
Функция РазложитьМестоРождения(Знач СтрокаМестоРождения, ВерхнийРегистр = Истина) Экспорт

	НаселенныйПункт		= "";
	Район				= "";
	Область				= "";
	Страна				= "";
	МассивМестоРождения	= ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(?(ВерхнийРегистр, Врег(СтрокаМестоРождения), СтрокаМестоРождения));
	ЭлементовВМассиве	= МассивМестоРождения.Количество();   
	
	Если ЭлементовВМассиве	>	0	тогда
		НаселенныйПункт	=	СокрЛП(МассивМестоРождения[0]);
	КонецЕсли;
	
	Если ЭлементовВМассиве	>	1	тогда
		Район	=	СокрЛП(МассивМестоРождения[1]);
	КонецЕсли;
	
	Если ЭлементовВМассиве	>	2	тогда
		Область	=	СокрЛП(МассивМестоРождения[2]);
	КонецЕсли;
	
	Если ЭлементовВМассиве	>	3	тогда
		Страна	=	СокрЛП(МассивМестоРождения[3]);
	КонецЕсли;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Область",Область);
	СтруктураВозврата.Вставить("Страна",Страна);
	
	Возврат СтруктураВозврата;
	
КонецФункции // РазложитьМестоРождения()

//Процедура начала подбора номенклатуры
Процедура НачалоПодбораНоменклатуры(Элемент,ПлановаяНоменклатура,Услуги,УникальныйИдентификатор) Экспорт
	мПараметры = Новый Структура;
	мПараметры.Вставить("Отбор",Новый Структура("Услуга", Услуги));
	мПараметры.Вставить("ЗакрыватьПриВыборе",Ложь);
	ФормаНоменклатура = ПолучитьФорму("Справочник."+?(ПлановаяНоменклатура=Истина,"фин_Плановая","")+"Номенклатура.ФормаВыбора",мПараметры,Элемент,УникальныйИдентификатор);
	Если ТипЗнч(ФормаНоменклатура)<>Тип("УправляемаяФорма") Тогда
		ФормаНоменклатура.Отбор.Услуга.Значение = Услуги;
		ФормаНоменклатура.Отбор.Услуга.Использование = Истина;
	КонецЕсли;
	ФормаНоменклатура.Открыть();	
КонецПроцедуры

//процедура начала выбора номенклатуры
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка,Услуги) Экспорт
	СтандартнаяОбработка = Ложь;
	ТипВвода = Тип("СправочникСсылка.Номенклатура");
	Если ТипЗнч(Элемент)=Тип("ПолеФормы") Тогда
		ТипыВвода = Элемент.ОграничениеТипа.Типы();
		Если ТипыВвода.Количество()>1 Тогда
			СписокВыбора = Новый СписокЗначений;
			СписокВыбора.ЗагрузитьЗначения(ТипыВвода);
			РезультатВыбора = СписокВыбора.ВыбратьЭлемент("Выберите тип");
			Если РезультатВыбора = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ТипВвода = РезультатВыбора.Значение;
		ИначеЕсли ТипыВвода.Количество()=0 Тогда
			ТипВвода = Тип("СправочникСсылка.Номенклатура");
		Иначе
			ТипВвода = ТипыВвода[0];
		КонецЕсли;
	КонецЕсли;
	Если ТипВвода = Тип("СправочникСсылка.Номенклатура") Тогда
		мПараметры = Новый Структура;
		мПараметры.Вставить("Отбор",Новый Структура("Услуга", Услуги));
		мПараметры.Вставить("ЗакрыватьПриВыборе",Истина);
		ФормаНоменклатура = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора",мПараметры,Элемент);
		Если ТипЗнч(ФормаНоменклатура)<>Тип("УправляемаяФорма") Тогда
			ФормаНоменклатура.Отбор.Услуга.Значение = Услуги;
			ФормаНоменклатура.Отбор.Услуга.Использование = Истина;
		КонецЕсли;
	Иначе
		мПараметры = Новый Структура;
		мПараметры.Вставить("Отбор",Новый Структура("ТипПозицииВПланеЗакупок", ?(Услуги,ПредопределенноеЗначение("Перечисление.узп_ТипыПозицийПлановойНоменклатурыВПланеЗакупок.Услуга"),СписокТиповНоменклатуры())));
		мПараметры.Вставить("ЗакрыватьПриВыборе",Истина);
		ФормаНоменклатура = ПолучитьФорму("Справочник.фин_ПлановаяНоменклатура.ФормаВыбора",мПараметры,Элемент);
	КонецЕсли;
	ФормаНоменклатура.Открыть();
КонецПроцедуры

// Формирует и устанавливает текст заголовка формы документа
//
// Параметры:
//  СтрокаВидаОперации - строка вида операции документа, 
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура УстановитьЗаголовокФормыДокументаТонкийКлиент(СтрокаВидаОперации = "", ДокументСсылка, ФормаДокумента) Экспорт

	ФормаДокумента.АвтоЗаголовок = Ложь; // заголовок будем писать сами
	Заголовок = Строка(ТипЗнч(ДокументСсылка.Ссылка))+": ";
	//
	Если НЕ ПустаяСтрока(СтрокаВидаОперации) Тогда
		Заголовок = Заголовок + СтрокаВидаОперации+". ";
	КонецЕсли;
		
	Если ДокументСсылка.Ссылка.Пустая() Тогда  
		Заголовок = Заголовок + "Новый";
	Иначе
		Если ДокументСсылка.Проведен Тогда
			Заголовок = Заголовок + "Проведен";
		//ИначеЕсли ДокументСсылка.Метаданные().Проведение = ДокументСсылка.СвойстваОбъектов.Проведение.Разрешить Тогда
		//	Заголовок = Заголовок + "Не проведен";
		Иначе
			Заголовок = Заголовок + "Записан";
		КонецЕсли;
		
	КонецЕсли;
	Если НЕ ДокументСсылка.Ссылка.Пустая() Тогда
		Заголовок = Заголовок+". " + ДокументСсылка.Номер+" от "+Строка(ДокументСсылка.Дата);
	КонецЕсли;
	
	ФормаДокумента.Заголовок = Заголовок;

КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Устанавливает видимость колонки "СтруктурноеПодразделение" в формах списка и выбора
// в зависимости от поддержки работы со стркутурными подразделениями
Процедура ВидимостьКолонкиСтруктурногоПодразделения(ДокументСписок, ИмяКолонки = "СтруктурноеПодразделение") Экспорт
	Если ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений() Тогда
		//Массив может передаваться, когда в документе 2 реквизита "Структурное подразделение"
		Если ТипЗнч(ИмяКолонки) = Тип("Массив") Тогда
			Для Каждого Элемент Из ИмяКолонки Цикл
				Если ДокументСписок.ПодчиненныеЭлементы.Найти(Элемент) <> Неопределено Тогда				
					ДокументСписок.ПодчиненныеЭлементы[Элемент].Видимость = Истина;
				КонецЕсли;			
			КонецЦикла;
		Иначе
			Если ДокументСписок.ПодчиненныеЭлементы.Найти(ИмяКолонки) <> Неопределено Тогда				
				ДокументСписок.ПодчиненныеЭлементы[ИмяКолонки].Видимость = Истина;
			КонецЕсли;					
		КонецЕсли;	
	КонецЕсли; 	
		
КонецПроцедуры

// Функция преобразовывает дату в представление периода
//
// Параметры:
//   ПериодРегистрации - Дата периода
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации) Экспорт

	Возврат Формат(ПериодРегистрации, "ДФ='MMMM yyyy'");

КонецФункции

// Процедура возвращает информацию по курсу валюты в виде строки
//
// Параметры: 
//  Валюта                         - Валюта, курс которой необходимо отобразить
//  Курс                           - курс, которой необходимо отобразить
//  Кратность                      - кратность, которую необходимо отобразить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СформироватьСкобки             - признак необходимости скобок
//
// Возвращаемое значение:
//  Строка с данными о курсе и кратности валюты
//
Функция ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, Курс, Кратность, ВалютаРегламентированногоУчета,СформироватьСкобки = Ложь) Экспорт

	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Возврат "";

	Иначе
		Возврат ?(СформироватьСкобки, "   ( ", "") + Кратность + " "
		      + СокрЛП(Валюта)
		      + " = "
		      + Курс + " " 
		      + СокрЛП(ВалютаРегламентированногоУчета)
		      + ?(СформироватьСкобки, " )", "");
	КонецЕсли;

КонецФункции // ПолучитьИнформациюКурсаВалютыСтрокой()

//Процедура НажатиеНаПанельЗакладок(Элементы, Элемент,Родитель) Экспорт
//	Для Каждого Группа из Родитель.ПодчиненныеЭлементы Цикл
//		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
//		//Для жирности
//		//Для каждого ЭлементГруппы из Группа.ПодчиненныеЭлементы Цикл
//		//	ЭлементГруппы.Шрифт = Новый Шрифт(,,Ложь,,,);
//		//КонецЦикла;
//	КонецЦикла;
//	ИмяЭлемента = Сред(ОтсечьЦифры(Элемент.Имя),СтрДлина("Декорация")+1);
//	Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы["Страница"+ИмяЭлемента];
//	Элементы["Группа"+ИмяЭлемента].Отображение =ОтображениеОбычнойГруппы.РамкаГруппы;
//	//Элементы["Декорация"+ИмяЭлемента+"1"].Шрифт =  Новый Шрифт(,,Истина,,,);
//КонецПроцедуры

Процедура НажатиеНаПанельЗакладок(Элементы, Элемент,Родитель) Экспорт
	ЖирныйШрифт = Новый Шрифт(,,Истина,,,);
	НеЖирныйШрифт = Новый Шрифт(,,Ложь,,);
	Для Каждого Группа из Родитель.ПодчиненныеЭлементы Цикл
		ИмяЭлемента = Сред(ОтсечьЦифры(Группа.Имя),СтрДлина("Группа")+1);
		Элементы["Декорация"+ИмяЭлемента+"1"].Шрифт =  НеЖирныйШрифт;
	КонецЦикла;
	ИмяЭлемента = Сред(ОтсечьЦифры(Элемент.Имя),СтрДлина("Декорация")+1);
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы["Страница"+ИмяЭлемента];
	Элементы["Декорация"+ИмяЭлемента+"1"].Шрифт =  ЖирныйШрифт;
КонецПроцедуры

Функция ОтсечьЦифры(ИсходнаяСтрока)

	ФинальнаяСтрока = ИсходнаяСтрока;
	
	КодСимвола = КодСимвола(Прав(ИсходнаяСтрока, 1));
	
	Если (КодСимвола >= 48 И КодСимвола <= 57) Тогда
		ФинальнаяСтрока = Лев(ИсходнаяСтрока, СтрДлина(ИсходнаяСтрока) - 1);
	КонецЕсли; 
	
	КодСимвола = КодСимвола(Прав(ФинальнаяСтрока, 1));
	
	Если (КодСимвола >= 48 И КодСимвола <= 57) Тогда
		ФинальнаяСтрока = Лев(ФинальнаяСтрока, СтрДлина(ФинальнаяСтрока) - 1);
	КонецЕсли; 
	
	Возврат ФинальнаяСтрока;
		
КонецФункции // ОтсечьЦифры()

Функция СписокТиповНоменклатуры()
	Список = Новый СписокЗначений;
	Список.Добавить(ПредопределенноеЗначение("Перечисление.узп_ТипыПозицийПлановойНоменклатурыВПланеЗакупок.Товар"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.узп_ТипыПозицийПлановойНоменклатурыВПланеЗакупок.НематериальныйАктив"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.узп_ТипыПозицийПлановойНоменклатурыВПланеЗакупок.ОсновноеСредство"));
	Возврат Список;
КонецФункции

