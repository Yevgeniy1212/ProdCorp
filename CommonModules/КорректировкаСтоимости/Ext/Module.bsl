// Формируется список счетов учета номенклатуры, стоимость которой
// необходимо корректировать.
Функция СписокСчетовУчетаНоменклатуры(Учет, Организация = Неопределено, Период = Неопределено) Экспорт
	
	Если Учет = "Нал" Тогда
		ИмяПланаСчетов = "Налоговый";
		
		СписокСчетов= Новый СписокЗначений;
		СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].Товары);
		СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ГотоваяПродукция);
		СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].СырьеИМатериалы);
		СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ПроизводствоИзДавальческогоСырья);
		СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ПрочиеЗапасы);		
	Иначе 		
		ИмяПланаСчетов = "Типовой";
		
		СписокСчетов= Новый СписокЗначений;
		СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].СырьеИМатериалы);
		СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ГотоваяПродукция);
		СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].Товары);
		СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ПрочиеЗапасы);
		СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ПроизводствоИзДавальческогоСырья);
	КонецЕсли;
	
	Возврат СписокСчетов;
	
КонецФункции // МассивСчетовУчетаНоменклатуры()
           
// Формируется список счетов на которых ведутся расчеты с контрагентами.
Функция ПолучитьСчетаРасчетов()

	СписокСчетов= Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженность);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяДебиторскаяЗадолженность);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.КраткосрочнаяКредиторскаяЗадолженность);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяКредиторскаяЗадолженность);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.СебестоимостьРеализованнойПродукцииИОказанныхУслуг_);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.РасходыПоРеализацииПродукцииИОказаниюУслуг_);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.АдминистративныеРасходы_);
	
	
	Возврат СписокСчетов;

КонецФункции // ПолучитьСчетаРасчетов()

////////////////////////////////////////////////////////////////////////////////
// Процедуры списания по-средней, не зависящие от структуры данных конфигурации

//// РассчитатьСписаниеПоСредней
////
//// Параметры:
////	ТаблицаТоваров - содержит товары, списание которых необходимо усреднить. 
////	Каждая колонка соответствует одному из постоянных параметров товара, не изменяемых в ходе перемещений. 
////	По остальным параметрам выполняется усреднение
////
Процедура РассчитатьСписаниеПоСредней(ТаблицаТоваров, ДатаНач, ДатаКон, СтруктураДопПараметров) Экспорт
	
	// Основное допущение данного метода - игнорирование замкнутой цепочки перемещений между состояниями ("холостого хода"):
	// считаем, что если товар в ходе перемещений снова попал в исходное состояние, то он как бы не перемещался, 
	// это движение можно исключить из общего оборота, а стоимость движения принять равной 0. Цепочки перемещений 
	// таким образом размыкаются, что позволяет рассчитать стоимости движений, начиная от конца цепочки.
	
	// Получим все состояния для товара, которые он принимал за период в виде таблицы
	//	---------------------------------------------------------------------------------------------------------------------------------
	// |Состояние 1 (Источник) |Состояние 2 (Приемник)| Перемещаемое количество| Стоимость (нужна для упрощения последующей корректировки)
	
	// Последовательно обходя состояния, выделим контуры (пути, начала и концы которых совпадают)
	// В каждом контуре найдем количество, которое совершило перемещение по замкнутому кругу ("холостой ход"), 
	// и уменьшим каждое движение из контура на данное количество.
	// Будем выбирать другие состояния для получения всех контуров и применим к ним то же правило.
	
	// После нахождения контуров в графах перемещений и сокращения "холостого хода" получаем совокупность разомкнутых 
	// путей перехода товара между состояниями (остовные деревья). Внутри каждой такой цепочки выполняем расчет.
	// Важно:  в общем случае результат сокращения зависит от последовательности обхода контуров, поэтому
	// для повторяемости результата она должна подчиняться какому-либо правилу (например, чтобы сводные перемещения
	// упорядочивались по возрастанию даты первого перемещения)
	
	// Получим таблицу перемещений, содержащую суммарные перемещения между состояниями
	
	// Получаемая таблица должна содержать колонку "Количество", "Стоимость" и колонки, описывающие старое и новое состояние,
	// причем имена колонок нового состояния заканчиваются на ПрефиксПараметровНовогоСостояния
	ПрефиксПараметровНовогоСостояния="_НовоеСостояние";
	
	Таб = ПолучитьТаблицуПеремещений(ТаблицаТоваров, ДатаНач, ДатаКон, ПрефиксПараметровНовогоСостояния, СтруктураДопПараметров);
	
	
	//1. Приведем переданную таблицу перемещений к требуемому виду:
	// Таблица имеет колонки Источник, Приемник, Количество
	// строка таблицы соответствует перемещению из состояния 1 в состояние 2, перемещения не повторяются.
	
	// Количество колонок без ПрефиксПараметровНовогоСостояния должно быть равно количеству колонок с ПрефиксПараметровНовогоСостояния
	// Сформируем также структуру, которая содержит параметры состояния товара
	СтруктураСостояния = Новый Структура;
	
	
	МассивСумм = Неопределено;
	СтруктураДопПараметров.Свойство("МассивСумм", МассивСумм);
	
	Если ТипЗнч(МассивСумм) <> Тип("Массив") Тогда
		МассивСумм = Новый Массив;
		МассивСумм.Добавить("Стоимость");
	КонецЕсли;
	
	
	// То же самое, но в соответствии - для удобства поиска
	СоотвСумм = Новый Соответствие;
	
	Для Каждого ЭлементСумм Из МассивСумм Цикл
		СоотвСумм.Вставить(ЭлементСумм, ЭлементСумм);
	КонецЦикла;
	
	Инд=0;
	Пока Инд< Таб.Колонки.Количество() Цикл
		
		Колонка = Таб.Колонки[Инд];
		
		// Имя колонки не совпадает с количеством и колонками стоимости
		Если ВРег(Колонка.Имя) <> ВРег("Количество") Тогда
			
			// Это колонка суммы
			Если СоотвСумм[Колонка.Имя] <> Неопределено Тогда
				Инд = Инд+1;
				Продолжить;
			КонецЕсли;
			
			// Колонки, оканчивающиеся на ПрефиксПараметровНовогоСостояния - правые (новое состояние), им должны соответствовать такие же левые, оканчивающиеся на ПрефиксПараметровНовогоСостояния
			Если Прав(Колонка.Имя, СтрДлина(ПрефиксПараметровНовогоСостояния)) = ПрефиксПараметровНовогоСостояния  Тогда
				ИмяСоответствующейКолонки=Лев(Колонка.Имя, СтрДлина(Колонка.Имя)-СтрДлина(ПрефиксПараметровНовогоСостояния));
				Если Таб.Колонки.Найти(ИмяСоответствующейКолонки)=Неопределено Тогда
					Таб.Колонки.Добавить(ИмяСоответствующейКолонки, Колонка.ТипЗначения)
				КонецЕсли;
				// И наоборот, колонки, не оканчивающиеся на ПрефиксПараметровНовогоСостояния - левые (новое состояние), им должны соответствовать такие же правые, оканчивающиеся на ПрефиксПараметровНовогоСостояния
			Иначе
				ИмяСоответствующейКолонки=Колонка.Имя+ПрефиксПараметровНовогоСостояния;
				Если Таб.Колонки.Найти(ИмяСоответствующейКолонки)=Неопределено Тогда
					Таб.Колонки.Добавить(ИмяСоответствующейКолонки, Колонка.ТипЗначения)
				КонецЕсли;
				
				СтруктураСостояния.Вставить(Колонка.Имя);
			КонецЕсли;
		КонецЕсли;
		
		Инд=Инд+1;
	КонецЦикла;
	
	// В таблице перемещений заменим параметры состояний индексами состояний, сами параметры будут храниться в СоотвПараметровСостояний
	
	Таб.Колонки.Добавить("Источник", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0)));
	Таб.Колонки.Добавить("Приемник", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0)));
	
	СоотвПараметровСостояний = Новый Соответствие;
	
	Для Каждого Строка Из Таб Цикл // поиск выполняется полным перебором
		
		// Состояния-источники
		// Найдем состояние в соответствии				
		НайденоСостояние=Ложь;
		Для Каждого ЭлементСостояние Из СоотвПараметровСостояний Цикл
			
			НайденоСостояние=Истина;
			Для Каждого Элемент Из СтруктураСостояния Цикл
				
				Если НЕ (ЭлементСостояние.Значение[Элемент.Ключ] = Строка[Элемент.Ключ]) Тогда
					
					НайденоСостояние = Ложь; // состояния различны
					
					Прервать; // дальше можно не проверять
				КонецЕсли;
				
			КонецЦикла;
			
			Если НайденоСостояние Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоСостояние Тогда
			ИндексСостояния = ЭлементСостояние.Ключ;
		Иначе
			// Переносим в соответствие
			СтрСост = Новый Структура;
			Для Каждого Элемент Из СтруктураСостояния Цикл
				
				
				СтрСост.Вставить(Элемент.Ключ, Строка[Элемент.Ключ]);
			КонецЦикла;
			
			ИндексСостояния = СоотвПараметровСостояний.Количество();
			СоотвПараметровСостояний.Вставить(ИндексСостояния, СтрСост);
		КонецЕсли;
		
		// Оставим в таблице ссылку на состояние
		Строка.Источник = ИндексСостояния;
		
		
		// То же самое для состояний-приемников
		// Найдем состояние в соответсвии				
		НайденоСостояние=Ложь;
		Для Каждого ЭлементСостояние Из СоотвПараметровСостояний Цикл
			
			НайденоСостояние=Истина;
			Для Каждого Элемент Из СтруктураСостояния Цикл
				
				Если НЕ (ЭлементСостояние.Значение[Элемент.Ключ] = Строка[Элемент.Ключ+ПрефиксПараметровНовогоСостояния]) Тогда
					
					НайденоСостояние = Ложь; // состояния различны
					
					Прервать; // дальше можно не проверять
				КонецЕсли;
				
			КонецЦикла;
			
			Если НайденоСостояние Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоСостояние Тогда
			ИндексСостояния = ЭлементСостояние.Ключ;
		Иначе
			// Переносим в соответствие
			СтрСост = Новый Структура;
			Для Каждого Элемент Из СтруктураСостояния Цикл
				СтрСост.Вставить(Элемент.Ключ, Строка[Элемент.Ключ+ПрефиксПараметровНовогоСостояния]);
			КонецЦикла;
			
			ИндексСостояния = СоотвПараметровСостояний.Количество();
			СоотвПараметровСостояний.Вставить(ИндексСостояния, СтрСост);
		КонецЕсли;
		
		// Оставим в таблице ссылку на состояние
		Строка.Приемник = ИндексСостояния;
		
	КонецЦикла;
	
	// "Свернем" встречные перемещения: вместо двух перемещений типа 1->2 и 2->1 оставим одно 
	// с количеством |Кол12 - Кол21| в направлении большего перемещения.
	
	// Проведем следующее преобразование: повернем пары так, чтобы количество перемещения стало положительным
	Для Каждого Строка Из Таб Цикл
		
		Если Строка.Количество<0 Тогда
			Буф=Строка.Приемник;
			Строка.Приемник 	= Строка.Источник;
			Строка.Источник 	= Буф;
			Строка.Количество 	= - Строка.Количество;
			
			Для Каждого КолСумма Из МассивСумм Цикл
				Строка[КолСумма] = - Строка[КолСумма];
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	// "Свертка" встречных перемещений
	Инд=0;
	КолВо = Таб.Количество();
	
	Пока Инд<КолВо Цикл
		
		Инд2 = Инд+1;
		Пока Инд2<КолВо Цикл
			
			Строка2 = Таб[Инд2];
			Строка  = Таб[Инд];
			
			// Если найдено соответствующее встречное перемещение
			Если Строка.Источник = Строка2.Приемник
				И Строка.Приемник = Строка2.Источник Тогда
				
				Если Строка.Количество>Строка2.Количество Тогда
					УменьшитьНаКоличество = Строка2.Количество;

				Иначе
					УменьшитьНаКоличество = Строка.Количество;

				КонецЕсли;
				
				Строка.Количество  = Строка.Количество  - УменьшитьНаКоличество;
				Строка2.Количество = Строка2.Количество - УменьшитьНаКоличество;
				
				Для Каждого КолСумма Из МассивСумм Цикл
					
					Если Строка.Количество>Строка2.Количество Тогда
						УменьшитьНаСтоимость = Строка2[КолСумма];
					Иначе
						УменьшитьНаСтоимость = Строка[КолСумма];
					КонецЕсли;
					
					// То же самое - со стоимостью
					Строка[КолСумма]  = Строка[КолСумма]  - УменьшитьНаСтоимость;
					Строка2[КолСумма] = Строка2[КолСумма]  - УменьшитьНаСтоимость;
				КонецЦикла;
				
				// На этом обход можно прервать: быть не более одной пары встречных перемещений
				Прервать;
				
			Иначе
				Инд2 = Инд2+1;
			КонецЕсли;
			
		КонецЦикла; 
		
		Инд = Инд+1;
		
	КонецЦикла; 
	
	// Удалим обнулившиеся строки
	// Удаляем только строки со всеми нулевыми суммами и нулевым количеством
	
	КолВо = Таб.Количество();
	Инд=0;
	Пока Инд<КолВо Цикл
		
		Строка  = Таб[Инд];
		
		НеНужноУдалять = Строка.Количество<>0;
		
		Если Не НеНужноУдалять Тогда
			
			Для Каждого КолСумма Из МассивСумм Цикл
				
				НеНужноУдалять = НеНужноУдалять Или Строка[КолСумма]<>0;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не НеНужноУдалять Тогда

			Таб.Удалить(Строка);
			
			КолВо = КолВо-1;
		Иначе
			Инд=Инд+1;
		КонецЕсли;
	КонецЦикла;
	
	
	// Получили таблицу перемещений в требуемом формате
	ТаблицаПеремещений = Таб;	
	
	// Таблица перемещений содержит несколько несвязанных частей, относящихся к отдельным партиям - строкам таблицы ТаблицаТоваров
	
	// Обработка перемещений: разрыв контуров
	// Получим наборы смежных вершин для каждой вершины
	// Соотв СмежныеВершины Вершина, СмежныеВершины
	
	Источники = Новый Соответствие;
	Приемники = Новый Соответствие;
	МассивНачалДеревьев = Новый Массив;
	
	Для Каждого Строка Из ТаблицаПеремещений Цикл
		
		ПараметрыИсточника = Источники[Строка.Источник];
		Если ПараметрыИсточника = Неопределено Тогда
			СмежныеВершины		= Новый Соответствие;
			ПараметрыИсточника 	= Новый Структура("Пройден, СмежныеВершины", Ложь, СмежныеВершины);
		КонецЕсли;
		
		ПараметрыИсточника.СмежныеВершины.Вставить(Строка.Приемник, ТаблицаПеремещений.Индекс(Строка)); // во вложенной структуре храним смежную вершину и номер строки перемещения
		
		Источники.Вставить(Строка.Источник, ПараметрыИсточника);
		
	КонецЦикла;
	
	// Чтобы рассчитать перемещения, заменим каждый связный граф перемещений его остовным деревом
	// Для этого обойдем их все, найдем и разорвем все контуры по предложенному выше правилу.
	Для Каждого Элемент Из Источники Цикл
		Если НЕ Элемент.Значение.Пройден Тогда // если от вершины еще не строился контур, обрабатываем
		
			ПройденныеВершины = Новый ТаблицаЗначений;
			ПройденныеВершины.Колонки.Добавить("Ключ");
			ПройденныеВершины.Колонки.Добавить("Значение");
			
			НоваяСтрока = ПройденныеВершины.Добавить();
			НоваяСтрока.Ключ = Элемент.Ключ;
			НоваяСтрока.Значение = -1;
			
			НомерВершины = Элемент.Ключ;
			
			РазорватьКонтуры(НомерВершины, Источники, ПройденныеВершины, ТаблицаПеремещений);
		КонецЕсли;
		
	КонецЦикла;
	
	// После этого таблица содержит незамкнутую последовательность перемещений. 
	// Стоимость перемещений с количеством = 0 в таблице тоже должна быть приведена к 0.
	
	СтСумм = Новый Структура; // структура сумм
	
	Для Каждого Строка Из ТаблицаПеремещений Цикл
		
		Если Строка.Количество=0 Тогда
			
			Для Каждого КолСумма Из МассивСумм Цикл
				СтСумм.Вставить(КолСумма, -Строка[КолСумма]);
				СтСумм.Вставить("Количество", Строка.Количество);
			КонецЦикла;
			
			
			
			ДобавитьЗаписиПоПеремещению(СоотвПараметровСостояний[Строка.Источник], СоотвПараметровСостояний[Строка.Приемник], СтСумм, СтруктураДопПараметров)

			
		Иначе
			
			Приемники.Вставить(Строка.Приемник, Строка.Приемник);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Теперь нужно выделить отдельные деревья, определить среднюю стоимость для каждого дерева, 
	// и начиная с самого начала каждого дерева последовательно рассчитать стоимость для каждого состояния/перемещения
	
	// Найдем начало каждого дерева - его нет в приемниках
	Для каждого Строка Из ТаблицаПеремещений Цикл
		
		// Анализируем только ненулевые дуги
		Если Строка.Количество<>0 Тогда
			
			// Если источника нет среди приемников, значит это начало дерева
			Если Приемники[Строка.Источник]=Неопределено Тогда
				
				ВершинаНайдена = Ложь; // признак того, что вершина уже есть в массиве
				Для Каждого НачалоДерева Из МассивНачалДеревьев Цикл
					
					// Такая вершина уже имеется в списке начал
					Если Строка.Источник = НачалоДерева Тогда
						ВершинаНайдена = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ВершинаНайдена Тогда
					МассивНачалДеревьев.Добавить(Строка.Источник);
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// На данном этапе нужна информация о начальном состоянии и внешнем поступлении в каждую вершину
	
	// Будем использовать список вершин, для каждой из которых указаны смежные вершины - приемники и 
	Вершины = Новый Соответствие; // здесь нам понадобится общее количество источников, приемники
	Для Каждого Строка Из ТаблицаПеремещений Цикл
		
		Если Строка.Количество=0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Обработаем источник
		ПодчСтруктура = Вершины[Строка.Источник];
		Если ПодчСтруктура=Неопределено Тогда
			ПодчСтруктура = Новый Структура("КоличествоИсточников, Приемники, КоличествоРассчитанныхВходов", 0, Новый Соответствие, 0);
		КонецЕсли;
		
		СтСумм = Новый Структура; // структура сумм
		Для Каждого КолСумма Из МассивСумм Цикл
			СтСумм.Вставить(КолСумма, Строка[КолСумма]);
		КонецЦикла;
		
		ПодчСтруктура.Приемники.Вставить(Строка.Приемник, Новый Структура("Количество, СтруктураСумм", Строка.Количество, СтСумм)); // Вместе с вершиной-приемником запоминаем количество перемещения

		
		Вершины.Вставить(Строка.Источник, ПодчСтруктура);
		
		// Обработаем приемник
		ПодчСтруктура = Вершины[Строка.Приемник];
		Если ПодчСтруктура=Неопределено Тогда
			ПодчСтруктура = Новый Структура("КоличествоИсточников, Приемники, КоличествоРассчитанныхВходов", 1, Новый Соответствие, 0);
		Иначе
			ПодчСтруктура.КоличествоИсточников = ПодчСтруктура.КоличествоИсточников + 1;
		КонецЕсли;
		
		Вершины.Вставить(Строка.Приемник, ПодчСтруктура);
	КонецЦикла;
	
	// В структуру Вершины нужно добавить данные о начальном остатке и внешнем поступлении для каждого из состояний,
	// Можно также добавить состояний, не участвовавших в перемещениях, тогда для них тоже будет рассчитано внешнее списание
	МассивДобавленныеВершины = Новый Массив;
	ДобавитьНачальныйОстатокИВнешнееПоступление(Вершины, СоотвПараметровСостояний, ДатаНач, ДатаКон, СтруктураДопПараметров, МассивДобавленныеВершины);
	
	// Добавленные состояния возвращаются специальным массивом, который добавляется к началам деревьев
	Для Каждого Элемент Из МассивДобавленныеВершины Цикл
		МассивНачалДеревьев.Добавить(Элемент)
	КонецЦикла;
	
	// Теперь будем обходить деревья с начала, и рассчитывать состояния и переходы между ними
	Для Каждого НачалоДерева Из МассивНачалДеревьев Цикл
		РассчитатьПуть(НачалоДерева, Вершины, СоотвПараметровСостояний, СтруктураДопПараметров);
	КонецЦикла;
	
КонецПроцедуры // РассчитатьСписаниеПоСредней()

// Находит контуры и разрывает их, сокращая на минимальное количество
//
// Параметры:
//	Нет.
//
Процедура РазорватьКонтуры(НомерИсхВершины, Источники, ПройденныеВершины, ТаблицаПеремещений)
	
	Приемники = Источники[НомерИсхВершины].СмежныеВершины;
	
	Для Каждого ЭлементВершина Из Приемники Цикл
		
		НомерВершины		 = ЭлементВершина.Ключ;
		ИндСтрокиПеремещения = ЭлементВершина.Значение;
		
		// Найдем каждую вершину-приемник в списке источников
		ПараметрыИсточника = Источники[НомерВершины];
		Если ПараметрыИсточника = Неопределено Тогда
			Продолжить; // это висячая вершина (степени 1)
		КонецЕсли;
		СмежныеВершины = ПараметрыИсточника.СмежныеВершины;
		
		// Неплохо бы запоминать уже пройденные контуры, чтобы не разбирать уже разобранные
		// Контур нужно идентифицировать последовательностью входящих в него вершин.
		
		// Проверим на замыкание
		
		Если ПройденныеВершины.Найти(НомерВершины,"Ключ")<> Неопределено тогда
		
			// Контур найден: можно сокращать на мин. количество перемещения
			
			// Найдем дугу контура с мин. количеством
			
			// Начнем с текущей
			СтрокаЗамыкающая			= ТаблицаПеремещений[ИндСтрокиПеремещения];
			МинКоличество				= СтрокаЗамыкающая.Количество;
			ИндСтрокиСМинКоличеством 	= ИндСтрокиПеремещения;
			
			Инд = 0;
			НачалсяКонтур = Ложь; // флаг начала контура
			
			Для Каждого Элемент Из ПройденныеВершины Цикл
				
				// Найдем начало контура
				НачалсяКонтур = НачалсяКонтур ИЛИ (Элемент.Ключ = НомерВершины);
				
				Если НачалсяКонтур Тогда
					Если Инд>0 Тогда // в первом элементе нет ссылки на строку
						Строка=ТаблицаПеремещений[Элемент.Значение];
						Если Строка.Количество < МинКоличество Тогда 
							МинКоличество 				= Строка.Количество;
							ИндСтрокиСМинКоличеством 	= Элемент.Значение;
						КонецЕсли;
					КонецЕсли;
					Инд=Инд+1;
				КонецЕсли;
			КонецЦикла;
			
			// Вычтем найденное минимальное количество из всех дуг контура
			
			// ... из замыкающей дуги
			СтрокаЗамыкающая.Количество = СтрокаЗамыкающая.Количество - МинКоличество;
			
			// ... из всех пройденных дуг
			Инд=0;
			НачалсяКонтур = Ложь; // флаг начала контура
			Для Каждого Элемент Из ПройденныеВершины Цикл
				
				// Найдем начало контура
				НачалсяКонтур = НачалсяКонтур ИЛИ (Элемент.Ключ = НомерВершины);
				
				Если НачалсяКонтур Тогда
					Если Инд>0 Тогда // в первом элементе нет ссылки на строку
						Строка=ТаблицаПеремещений[Элемент.Значение];
						Строка.Количество = Строка.Количество - МинКоличество;
					КонецЕсли;
					Инд=Инд+1;
				КонецЕсли;
				
			КонецЦикла;
			
			// Если контур разорван, для повторяющейся вершины процедуру не запускаем, пеерходим к следующему приемнику
			Продолжить;
			
		КонецЕсли;
		
		// Сделаем копию ПройденныеВершины и добавим пройденную вершину
		
		КопияПройденныеВершины =ПройденныеВершины.Скопировать();
		
		НоваяСтрока = КопияПройденныеВершины.Добавить();
		НоваяСтрока.Ключ = НомерВершины;
		НоваяСтрока.Значение = ИндСтрокиПеремещения;

		
		РазорватьКонтуры(НомерВершины, Источники, КопияПройденныеВершины, ТаблицаПеремещений);
		
		// Отметим, что от вершины уже строился контур, чтобы не вызывать аналогичную процедуру повторно
		Источники[НомерВершины].Пройден = Истина;
		
	КонецЦикла;
	
КонецПроцедуры // РазорватьКонтуры()

// Рассчитывает отрезки пути в состояния, в которые есть переход из данной вершины
//
// Параметры:
//	Источник - номер состояния-источника.
//	Состояния - соответствие, содержащее состояния, приемники и т.д.
//	СоотвПараметровСостояний - соответствие, содержащее параметры состояния, как они представлены в БД (измерения, счета, субконто и т.д.)
//
Процедура РассчитатьПуть(Источник, Состояния, СоотвПараметровСостояний, СтруктураДопПараметров)
	
	// Состояние в начале:
	// ............
	// ............
	
	// Расчет состояния.
	// Стоимость в состоянии складывается из:
	// Начального остатка + Внешнего прихода (определяется сразу)
	// Прихода из других состояний (входящих стрелок - оперделяется сложением стрелок)
	
	// Приход из других состояний определяем по таблице перемещений
	
	// Расчет перемещения в другие состояния
	// В каждом состоянии-приемнике КоличествоРассчитанныхВходов = КоличествоРассчитанныхВходов+1
	
	СостояниеИсточник=Состояния[Источник];
	
   	СтКорректировка = Новый Структура; // структура корректировок
	СтСуммы = Новый Структура; // структура сумм в сстоянии
	
	// Состояние можно испоьзовать в расчете, если рассчитаны все входящие стрелки
	Если СостояниеИсточник.КоличествоИсточников=СостояниеИсточник.КоличествоРассчитанныхВходов Тогда
		
		СоотвПриемники=СостояниеИсточник.Приемники; // соответствие  - примники
		
		// Рассчитаем перемещения между состояниями
		Для Каждого ЭлементПриемник Из СоотвПриемники Цикл
			
			Приемник 		= ЭлементПриемник.Ключ;
			Количество 		= ЭлементПриемник.Значение.Количество;
			
			Состояние = Состояния[Приемник];
			
			// Заполним структуру корректировки сумм
			Для Каждого ЭлементСумма Из ЭлементПриемник.Значение.СтруктураСумм Цикл
				
				Если СостояниеИсточник.Количество > Количество Тогда
					СтКорректировка.Вставить("Себестоимость", Окр(СостояниеИсточник.СтруктураСумм[ЭлементСумма.Ключ]*Количество /СостояниеИсточник.Количество, 2));
				Иначе
					СтКорректировка.Вставить("Себестоимость", СостояниеИсточник.СтруктураСумм[ЭлементСумма.Ключ]);
				КонецЕсли;
				
				// Суммы в новом состоянии
				СтСуммы.Вставить(ЭлементСумма.Ключ, СтКорректировка["Себестоимость"]);
				
				// Корректировка равна разности между правильным движением и уже выполненным движением
				СтКорректировка.Вставить(ЭлементСумма.Ключ, СтКорректировка["Себестоимость"] - ЭлементСумма.Значение);
				СтКорректировка.Вставить("СписаноРанее",ЭлементСумма.Значение);
				СтКорректировка.Вставить("Количество", Количество);
				
			КонецЦикла;
			
			
			// Теперь можно сформировать записи по перемещению между состояниями
			// Передаем разницу между первоначальным движением и рассчитанным
			
			ДобавитьЗаписиПоПеремещению(СоотвПараметровСостояний[Источник], СоотвПараметровСостояний[Приемник], СтКорректировка, СтруктураДопПараметров);
			
			// Поступление в состояние
			Состояние.Количество = Состояние.Количество + Количество;
			
			СостояниеИсточник.Количество = СостояниеИсточник.Количество - Количество;
			
			// Поступление в состояние: добавим суммы
			Для Каждого ЭлементСумма Из СтСуммы Цикл
				
				Состояние.СтруктураСумм[ЭлементСумма.Ключ]         = Состояние.СтруктураСумм[ЭлементСумма.Ключ]         + ЭлементСумма.Значение;
				СостояниеИсточник.СтруктураСумм[ЭлементСумма.Ключ] = СостояниеИсточник.СтруктураСумм[ЭлементСумма.Ключ] - ЭлементСумма.Значение;
				
			КонецЦикла;
			
			Состояние.КоличествоРассчитанныхВходов = Состояние.КоличествоРассчитанныхВходов+1;
			
			// Расчет пути из этой точки
			РассчитатьПуть(Приемник, Состояния, СоотвПараметровСостояний, СтруктураДопПараметров);
			
		КонецЦикла;
		
		// Остаток в состоянии после перемещений: суммы
		СтОстаток = Новый Структура;
		Для Каждого ЭлементСумма Из СостояниеИсточник.СтруктураСумм Цикл
			СтОстаток.Вставить(ЭлементСумма.Ключ, ЭлементСумма.Значение);
		КонецЦикла;
		
		// Теперь можем рассчитать внешние выходы:
		// сформируем записи по внешнему списанию из состояния Источник
		
		ДобавитьЗаписиПоВнешнемуСписанию(СоотвПараметровСостояний[Источник], СостояниеИсточник.Количество, СтОстаток, СтруктураДопПараметров);

		// Все выходы из данного состояния рассчитаны.
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьПуть()
 
////////////////////////////////////////////////////////////////////////////////
// Процедуры списания по-средней, зависящие от структуры данных конфигурации

// Возвращает таблицу перемещений товаров между состояниями
// Зависит от конкретной структуры данных конфигурации
//
// Параметры:
//	Нет.
//
Функция ПолучитьТаблицуПеремещений(ТаблицаТоваров, ДатаНач, ДатаКон,  Префикс, СтруктураДопПараметров)
	
	Учет	= СтруктураДопПараметров.Учет;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВложенныйЗапрос.Сумма КАК Стоимость,
	|	ВложенныйЗапрос.Регистратор КАК Регистратор,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.СчетКт КАК Счет,
	|	ВложенныйЗапрос.СтруктурноеПодразделениеДт КАК СтруктурноеПодразделение" + Префикс + ",
	|	ВложенныйЗапрос.СтруктурноеПодразделениеКт КАК СтруктурноеПодразделение,
	|	ВложенныйЗапрос.СчетДт КАК Счет" + Префикс + ",
	|	ВложенныйЗапрос.СубконтоКт1 КАК Субконто1,
	|	ВложенныйЗапрос.СубконтоКт2 КАК Субконто2,
	|	ВложенныйЗапрос.СубконтоКт3 КАК Субконто3,
	|	ВложенныйЗапрос.СубконтоДт1 КАК Субконто1" + Префикс + ",
	|	ВложенныйЗапрос.СубконтоДт2 КАК Субконто2" + Префикс + ",
	|	ВложенныйЗапрос.СубконтоДт3 КАК Субконто3" + Префикс + " ";
	Если Учет = "Нал" Тогда
		Запрос.Текст = Запрос.Текст + "
		|	, ВложенныйЗапрос.ВидУчетаКт КАК ВидУчета,
		|	ВложенныйЗапрос.ВидУчетаДт КАК ВидУчета" + Префикс;
	КонецЕсли;
    Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТиповойОбороты.СчетКт КАК СчетКт,
	|		ТиповойОбороты.Регистратор КАК Регистратор,
	|		ВЫБОР КОГДА ТиповойОбороты.СубконтоКт1 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоКт1 КОГДА ТиповойОбороты.СубконтоКт2 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоКт2 КОГДА ТиповойОбороты.СубконтоКт3 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоКт3 ИНАЧЕ Неопределено КОНЕЦ КАК НоменклатураКт,
	|		ВЫБОР КОГДА ТиповойОбороты.СубконтоДт1 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоДт1 КОГДА ТиповойОбороты.СубконтоДт2 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоДт2 КОГДА ТиповойОбороты.СубконтоДт3 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоДт3 ИНАЧЕ NULL КОНЕЦ КАК НоменклатураДт,
	|		ВЫБОР КОГДА СуммовойУчетКт.Субконто1 ТОГДА ТиповойОбороты.СубконтоКт1 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоКт1,
	|		ВЫБОР КОГДА СуммовойУчетКт.Субконто2 ТОГДА ТиповойОбороты.СубконтоКт2 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоКт2,
	|		ВЫБОР КОГДА СуммовойУчетКт.Субконто3 ТОГДА ТиповойОбороты.СубконтоКт3 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоКт3,
	|		ТиповойОбороты.СчетДт КАК СчетДт,
	|		ТиповойОбороты.СтруктурноеПодразделениеДт КАК СтруктурноеПодразделениеДт,
	|		ТиповойОбороты.СтруктурноеПодразделениеКт КАК СтруктурноеПодразделениеКт,
	|		ВЫБОР КОГДА СуммовойУчетДт.Субконто1 ТОГДА ТиповойОбороты.СубконтоДт1 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоДт1,
	|		ВЫБОР КОГДА СуммовойУчетДт.Субконто2 ТОГДА ТиповойОбороты.СубконтоДт2 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоДт2,
	|		ВЫБОР КОГДА СуммовойУчетДт.Субконто3 ТОГДА ТиповойОбороты.СубконтоДт3 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоДт3, 
	|		СУММА(ВЫБОР КОГДА ТиповойОбороты.СуммаОборот ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ТиповойОбороты.СуммаОборот КОНЕЦ) КАК Сумма,
	|		СУММА(ВЫБОР КОГДА (ТиповойОбороты.КоличествоОборотКт) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ТиповойОбороты.КоличествоОборотКт КОНЕЦ) КАК Количество ";
	Если Учет = "Нал" Тогда
		Запрос.Текст = Запрос.Текст + "
		|	, ТиповойОбороты.ВидУчетаДт КАК ВидУчетаДт,
		|	 ТиповойОбороты.ВидУчетаКт КАК ВидУчетаКт";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст  + "
	|	ИЗ
	|		РегистрБухгалтерии.Типовой.ОборотыДтКт(&ДатаНач, &ДатаКон,Регистратор , СчетДт В ИЕРАРХИИ (&СписокСчетов), , СчетКт В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация) КАК ТиповойОбороты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				Типовой.Ссылка КАК Счет,
	|				МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 1 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто1,
	|				МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 2 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто2,
	|				МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 3 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто3
	|			ИЗ
	|				ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто
	|					ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
	|					ПО ТиповойВидыСубконто.Ссылка = Типовой.Ссылка
	|			
	|			ГДЕ
	|				Типовой.Ссылка В ИЕРАРХИИ(&СписокСчетов)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Типовой.Ссылка) КАК СуммовойУчетКт
	|			ПО ТиповойОбороты.СчетКт = СуммовойУчетКт.Счет
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				Типовой.Ссылка КАК Счет,
	|				МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 1 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто1,
	|				МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 2 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто2,
	|				МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 3 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто3
	|			ИЗ
	|				ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто
	|					ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
	|					ПО ТиповойВидыСубконто.Ссылка = Типовой.Ссылка
	|			
	|			ГДЕ
	|				Типовой.Ссылка В ИЕРАРХИИ(&СписокСчетов)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Типовой.Ссылка) КАК СуммовойУчетДт
	|			ПО ТиповойОбороты.СчетДт = СуммовойУчетДт.Счет
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТиповойОбороты.СчетКт,
	|		ТиповойОбороты.СчетДт,
	|    ТиповойОбороты.Регистратор,
	|    ТиповойОбороты.СтруктурноеПодразделениеДт,
	|	 ТиповойОбороты.СтруктурноеПодразделениеКт, ";
	Если Учет = "Нал" Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ТиповойОбороты.ВидУчетаДт,
		|	ТиповойОбороты.ВидУчетаКт,	";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст  + "
	|		ВЫБОР КОГДА ТиповойОбороты.СубконтоКт1 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоКт1 КОГДА ТиповойОбороты.СубконтоКт2 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоКт2 КОГДА ТиповойОбороты.СубконтоКт3 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоКт3 ИНАЧЕ Неопределено КОНЕЦ,
	|		ВЫБОР КОГДА ТиповойОбороты.СубконтоДт1 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоДт1 КОГДА ТиповойОбороты.СубконтоДт2 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоДт2 КОГДА ТиповойОбороты.СубконтоДт3 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоДт3 ИНАЧЕ NULL КОНЕЦ,
	|		ВЫБОР КОГДА СуммовойУчетКт.Субконто1 ТОГДА ТиповойОбороты.СубконтоКт1 ИНАЧЕ Неопределено КОНЕЦ,
	|		ВЫБОР КОГДА СуммовойУчетКт.Субконто2 ТОГДА ТиповойОбороты.СубконтоКт2 ИНАЧЕ Неопределено КОНЕЦ,
	|		ВЫБОР КОГДА СуммовойУчетКт.Субконто3 ТОГДА ТиповойОбороты.СубконтоКт3 ИНАЧЕ Неопределено КОНЕЦ,
	|		ВЫБОР КОГДА СуммовойУчетДт.Субконто1 ТОГДА ТиповойОбороты.СубконтоДт1 ИНАЧЕ Неопределено КОНЕЦ,
	|		ВЫБОР КОГДА СуммовойУчетДт.Субконто2 ТОГДА ТиповойОбороты.СубконтоДт2 ИНАЧЕ Неопределено КОНЕЦ,
	|		ВЫБОР КОГДА СуммовойУчетДт.Субконто3 ТОГДА ТиповойОбороты.СубконтоДт3 ИНАЧЕ Неопределено КОНЕЦ) КАК ВложенныйЗапрос
	|
	|ГДЕ
	//|	ВЫБОР КОГДА ВложенныйЗапрос.СубконтоКт1 ССЫЛКА Документ.ОтчетПроизводстваЗаСмену ТОГДА ВложенныйЗапрос.СубконтоКт1.Дата КОГДА ВложенныйЗапрос.СубконтоКт2 ССЫЛКА Документ.ОтчетПроизводстваЗаСмену ТОГДА ВложенныйЗапрос.СубконтоКт2.Дата КОГДА ВложенныйЗапрос.СубконтоКт3 ССЫЛКА Документ.ОтчетПроизводстваЗаСмену ТОГДА ВложенныйЗапрос.СубконтоКт3.Дата ИНАЧЕ (&ДатаНач) КОНЕЦ >= &ДатаНач И
	|	(ВложенныйЗапрос.НоменклатураКт = ВложенныйЗапрос.НоменклатураДт) И ";
	
	Если ТаблицаТоваров <> Неопределено Тогда
	Запрос.Текст = Запрос.Текст + "
		|		(ВложенныйЗапрос.НоменклатураКт В (&СписокТоваров))  ";
	ИначеЕсли   ТаблицаТоваров <> Неопределено И СтруктураДопПараметров.Учет = "Нал" Тогда
		Запрос.Текст = Запрос.Текст + "
		|		(ВложенныйЗапрос.НоменклатураКт В (&СписокТоваров)  
		|		ВложенныйЗапрос.Регистратор В (&СписокКорретируемыхДокументов))  ";	
	ИначеЕсли ТаблицаТоваров = Неопределено И СтруктураДопПараметров.Учет = "Нал"   Тогда
		Запрос.Текст = Запрос.Текст + " 
		|		(ВложенныйЗапрос.Регистратор В (&СписокКорректируемыхДокументов))  ";
	КонецЕсли;   
	Запрос.Текст = Запрос.Текст + "
		|	И (ВложенныйЗапрос.СчетДт <> ВложенныйЗапрос.СчетКт ИЛИ ВложенныйЗапрос.СубконтоКт1 <> ВложенныйЗапрос.СубконтоДт1 ИЛИ ВложенныйЗапрос.СубконтоКт2 <> ВложенныйЗапрос.СубконтоДт2 
		| ИЛИ ВложенныйЗапрос.СубконтоКт3 <> ВложенныйЗапрос.СубконтоДт3 ИЛИ  ВложенныйЗапрос.СтруктурноеПодразделениеДт <> ВложенныйЗапрос.СтруктурноеПодразделениеКт)";
			
	Если СтруктураДопПараметров.Учет = "Нал" Тогда
		
		Запрос.УстановитьПараметр("ВидУчета",     СтруктураДопПараметров.ВидУчетаНУ);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация", "Организация = &Организация И ВидУчетаДт В Иерархии(&ВидУчета) И ВидУчетаКт В Иерархии(&ВидУчета) ");		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Типовой", "Налоговый");
	КонецЕсли; 

	Запрос.УстановитьПараметр("ДатаНач", 		ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", 		ДатаКон);
	Запрос.УстановитьПараметр("Организация", 	СтруктураДопПараметров.Организация);
	Запрос.УстановитьПараметр("СписокСчетов",   СписокСчетовУчетаНоменклатуры(СтруктураДопПараметров.Учет, СтруктураДопПараметров.Организация, ДатаКон));
	Запрос.УстановитьПараметр("СписокТоваров", 	ТаблицаТоваров);
	
	Если СтруктураДопПараметров.Учет = "Нал"  Тогда 
		Запрос.УстановитьПараметр("СписокКорректируемыхДокументов", СтруктураДопПараметров.СписокКорректируемыхДокументов);
	КонецЕсли;

	Таб = Запрос.Выполнить().Выгрузить();
	ТаблицаПеремещений = Таб.Скопировать();	    
	
	СтруктураДопПараметров.Вставить("ТаблицаПеремещений", ТаблицаПеремещений);
	СтруктураДопПараметров.Вставить("Префикс", Префикс);
	
	Если Учет = "Нал" Тогда
		Таб.Свернуть("СтруктурноеПодразделение, СтруктурноеПодразделение" + Префикс + ",Счет,Счет" +Префикс + ",Субконто1,Субконто1" + Префикс + ",Субконто2,Субконто2"+ Префикс + ",Субконто3,Субконто3"+ Префикс + ", ВидУчета, ВидУчета" + Префикс, "Количество, Стоимость");
	Иначе
		Таб.Свернуть("СтруктурноеПодразделение, СтруктурноеПодразделение" + Префикс + ",Счет,Счет" +Префикс + ",Субконто1,Субконто1" + Префикс + ",Субконто2,Субконто2"+ Префикс + ",Субконто3,Субконто3"+ Префикс, "Количество, Стоимость");		
	КонецЕсли;
			
	Возврат Таб;
	
КонецФункции // ПолучитьТаблицуПеремещений()

// Добавляет данные о начальном остатке и внешнем поступлении в состояниях
//
// Параметры:
//	Нет.
//
Процедура ДобавитьНачальныйОстатокИВнешнееПоступление(Состояния, СоотвПараметровСостояний, ДатаНач, ДатаКон, СтруктураДопПараметров, МассивДобавляемыхВершин)
	
	// Из структуры доп параметров добудем дополнительные параметры
	Учет                         = СтруктураДопПараметров.Учет;
	
	СписокНеКорректируемыхСчетов = СтруктураДопПараметров.СписокНеКорректируемыхСчетов; // список счетов списания номенклатуры на которые не надо корректировать
	МассивНоменклатуры           = СтруктураДопПараметров.ТаблицаТоваров;
	
	МассивСумм = Неопределено; // список суммовых ресурсов, списываемых пропорционально количеству
	СтруктураДопПараметров.Свойство("МассивСумм", МассивСумм);
	
	Если ТипЗнч(МассивСумм) <> Тип("Массив") Тогда
		МассивСумм = Новый Массив;
		МассивСумм.Добавить("Стоимость");
	КонецЕсли;
	
	Если Учет = "Нал" Тогда
				
	    ВидУчета                = СтруктураДопПараметров.ВидУчетаНУ;
		
	КонецЕсли;

	Текст = "ВЫБРАТЬ
		|	ВложенныйЗапрос.Счет,
		|	ВложенныйЗапрос.СтруктурноеПодразделение,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто1 ТОГДА ВложенныйЗапрос.Субконто1 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто1,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто2 ТОГДА ВложенныйЗапрос.Субконто2 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто2,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто3 ТОГДА ВложенныйЗапрос.Субконто3 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто3,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаОстаток)                  ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаОстаток) КОНЕЦ КАК СуммаОстаток,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоОстаток)             ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоОстаток) КОНЕЦ КАК КоличествоОстаток,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаПриход)                   ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаПриход) КОНЕЦ КАК СуммаПриход,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоПриход)              ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоПриход) КОНЕЦ КАК КоличествоПриход,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаВозвратОтПокупателя)      ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаВозвратОтПокупателя) КОНЕЦ КАК СуммаВозвратОтПокупателя,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоВозвратОтПокупателя) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоВозвратОтПокупателя)  КОНЕЦ КАК КоличествоВозвратОтПокупателя,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаВозвратПоставщику)        ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаВозвратПоставщику) КОНЕЦ КАК СуммаВозвратПоставщику,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоВозвратПоставщику)   ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоВозвратПоставщику)  КОНЕЦ КАК КоличествоВозвратПоставщику,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаПриходОтходов)            ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаПриходОтходов) КОНЕЦ КАК СуммаПриходОтходов,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоПриходОтходов)       ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоПриходОтходов)  КОНЕЦ КАК КоличествоПриходОтходов ";
		Если Учет = "Нал" тогда
			Текст = Текст + " 	,ВложенныйЗапрос.ВидУчета Как ВидУчета";
		КонецЕсли;
		Текст = Текст + "
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаОстатковИПриходов.Счет КАК Счет,
		|		ТаблицаОстатковИПриходов.Субконто1 КАК Субконто1,
		|		ТаблицаОстатковИПриходов.Субконто2 КАК Субконто2,
		|		ТаблицаОстатковИПриходов.Субконто3 КАК Субконто3,
		|		ТаблицаОстатковИПриходов.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|		СУММА(ВЫБОР КОГДА ТаблицаОстатковИПриходов.СуммаНачальныйОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаОстатковИПриходов.СуммаНачальныйОстаток КОНЕЦ) КАК СуммаОстаток,";
		Если Учет = "Нал"  Тогда
		Текст = Текст +"
			|		ТаблицаОстатковИПриходов.ВидУчета Как ВидУчета,";			
		КонецЕсли; 
		Текст = Текст +"
		|		СУММА(ВЫБОР КОГДА ТаблицаОстатковИПриходов.КоличествоНачальныйОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаОстатковИПриходов.КоличествоНачальныйОстаток КОНЕЦ) КАК КоличествоОстаток,		
		|		ВЫБОР КОГДА СУММА(ТаблицаОстатковИПриходов.СуммаОборотДт) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ТаблицаОстатковИПриходов.СуммаОборотДт) КОНЕЦ КАК СуммаПриход,
		|		ВЫБОР КОГДА СУММА(ТаблицаОстатковИПриходов.КоличествоОборотДт) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ТаблицаОстатковИПриходов.КоличествоОборотДт) КОНЕЦ КАК КоличествоПриход,
		|		0 КАК СуммаВозвратОтПокупателя,
		|		0 КАК КоличествоВозвратОтПокупателя,
		|		0 КАК СуммаВозвратПоставщику,
		|		0 КАК КоличествоВозвратПоставщику,
		|		0 КАК СуммаПриходОтходов,
		|		0 КАК КоличествоПриходОтходов
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация) КАК ТаблицаОстатковИПриходов";
		
		Если МассивНоменклатуры <> Неопределено Тогда
			Текст = Текст + "
			|	ГДЕ
			|		(ВЫБОР КОГДА ТаблицаОстатковИПриходов.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаОстатковИПриходов.Субконто1 В (&МассивНоменклатуры) КОГДА ТаблицаОстатковИПриходов.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаОстатковИПриходов.Субконто2 В (&МассивНоменклатуры) КОГДА ТаблицаОстатковИПриходов.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаОстатковИПриходов.Субконто3 В (&МассивНоменклатуры) ИНАЧЕ ЛОЖЬ КОНЕЦ)";
		КонецЕсли;
	
		Текст = Текст + "
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаОстатковИПриходов.Счет,
		|		ТаблицаОстатковИПриходов.Субконто1,
		|		ТаблицаОстатковИПриходов.Субконто2,
		|		ТаблицаОстатковИПриходов.Субконто3,
		|       ТаблицаОстатковИПриходов.СтруктурноеПодразделение ";
		Если Учет = "Нал"  Тогда
			Текст = Текст +"
		|		, ТаблицаОстатковИПриходов.ВидУчета";
		КонецЕсли;
		
		Текст = Текст + "
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаВозвратов.Счет,
		|		ТаблицаВозвратов.Субконто1,
		|		ТаблицаВозвратов.Субконто2,
		|		ТаблицаВозвратов.Субконто3,
		|		ТаблицаВозвратов.СтруктурноеПодразделение,
		|		0,	";
		Если Учет = "Нал" Тогда
			Текст = Текст +"
		|		ТаблицаВозвратов.ВидУчета,";
		КонецЕсли;
		
		Текст = Текст + "
		|		0,
		|		0,
		|		0, 
		|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.СуммаОборотДт >= 0  И НЕ ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.СуммаОборотДт) ИНАЧЕ 0 КОНЕЦ),
		|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.КоличествоОборотДт >= 0 И НЕ ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.КоличествоОборотДт) ИНАЧЕ 0 КОНЕЦ),
		|		СУММА(ВЫБОР КОГДА ТаблицаВозвратов.СуммаОборотКт >= 0 ТОГДА ТаблицаВозвратов.СуммаОборотКт ИНАЧЕ 0 КОНЕЦ),
		|		СУММА(ВЫБОР КОГДА ТаблицаВозвратов.КоличествоОборотКт >= 0 ТОГДА ТаблицаВозвратов.КоличествоОборотКт ИНАЧЕ 0 КОНЕЦ),
		|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.СуммаОборотКт < 0  И ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.СуммаОборотКт) ИНАЧЕ 0 КОНЕЦ),		
	    |		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.КоличествоОборотКт < 0 И ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.КоличествоОборотКт) ИНАЧЕ 0 КОНЕЦ)
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Обороты(&ДатаНач, &ДатаКон, Регистратор, Счет В ИЕРАРХИИ (&СписокСчетов), ,  Организация = &Организация, , ) КАК ТаблицаВозвратов
		|	
		|	ГДЕ (ВЫБОР КОГДА (ТаблицаВозвратов.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя) 
		|			ТОГДА (ВЫРАЗИТЬ(ТаблицаВозвратов.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Сделка.Дата < &ДатаНач 
		|				ИЛИ ВЫРАЗИТЬ(ТаблицаВозвратов.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Сделка.Склад <> ВЫРАЗИТЬ(ТаблицаВозвратов.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Склад 
		|				ИЛИ ВЫРАЗИТЬ(ТаблицаВозвратов.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Сделка.Склад ЕСТЬ NULL
		|				ИЛИ ВЫРАЗИТЬ(ТаблицаВозвратов.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Сделка.Дата ЕСТЬ NULL) 
		|		ИНАЧЕ ЛОЖЬ КОНЕЦ)
		|		ИЛИ (ТаблицаВозвратов.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену И (ТаблицаВозвратов.КоличествоОборотКт < 0 ИЛИ ТаблицаВозвратов.СуммаОборотКт < 0))";
		
		Если МассивНоменклатуры <> Неопределено Тогда
			Текст = Текст + " И
			|		(ВЫБОР КОГДА ТаблицаВозвратов.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаВозвратов.Субконто1 В (&МассивНоменклатуры) КОГДА ТаблицаВозвратов.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаВозвратов.Субконто2 В (&МассивНоменклатуры) КОГДА ТаблицаВозвратов.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаВозвратов.Субконто3 В (&МассивНоменклатуры) ИНАЧЕ ЛОЖЬ КОНЕЦ)";
		КонецЕсли;
	
		Текст = Текст + "
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаВозвратов.Счет,
		|		ТаблицаВозвратов.Субконто1,
		|		ТаблицаВозвратов.Субконто2,
		|		ТаблицаВозвратов.Субконто3, 
		|		ТаблицаВозвратов.СтруктурноеПодразделение ";
		Если Учет = "Нал" Тогда
			Текст = Текст +"
		|		, ТаблицаВозвратов.ВидУчета";
		КонецЕсли;                		
		Текст = Текст + " 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВнутренееПеремещение.Счет,
		|		ВнутренееПеремещение.Субконто1,
		|		ВнутренееПеремещение.Субконто2,
		|		ВнутренееПеремещение.Субконто3,
		|		ВнутренееПеремещение.СтруктурноеПодразделение, 
		|		0,";
				
		Если Учет = "Нал" Тогда
			Текст = Текст +"
		|   	ВнутренееПеремещение.ВидУчета,";
		КонецЕсли;
	    Текст = Текст +"
		|		0,
		|		СУММА(-(ВЫБОР КОГДА ВнутренееПеремещение.СуммаОборотДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ВнутренееПеремещение.СуммаОборотДт КОНЕЦ)),
		|		СУММА(-(ВЫБОР КОГДА ВнутренееПеремещение.КоличествоОборотДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ВнутренееПеремещение.КоличествоОборотДт КОНЕЦ)),
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Обороты(&ДатаНач, &ДатаКон, Период, Счет В ИЕРАРХИИ (&СписокСчетов), ,  Организация = &Организация, КорСчет В ИЕРАРХИИ (&СписокСчетов), ) КАК ВнутренееПеремещение
		|	ГДЕ
		|		((ВЫБОР КОГДА ВнутренееПеремещение.Субконто1 ССЫЛКА Справочник.Номенклатура 
		|					ТОГДА ВнутренееПеремещение.Субконто1 
		|				КОГДА ВнутренееПеремещение.Субконто2 ССЫЛКА Справочник.Номенклатура 
		|					ТОГДА ВнутренееПеремещение.Субконто2 
		|				КОГДА ВнутренееПеремещение.Субконто3 ССЫЛКА Справочник.Номенклатура 
		|					ТОГДА ВнутренееПеремещение.Субконто3 
		|				ИНАЧЕ 
		|					NULL КОНЕЦ) = 
		|		(ВЫБОР КОГДА ВнутренееПеремещение.КорСубконто1 ССЫЛКА Справочник.Номенклатура 
		|					ТОГДА ВнутренееПеремещение.КорСубконто1 
		|				КОГДА ВнутренееПеремещение.КорСубконто2 ССЫЛКА Справочник.Номенклатура 
		|					ТОГДА ВнутренееПеремещение.КорСубконто2 
		|				КОГДА ВнутренееПеремещение.КорСубконто3 ССЫЛКА Справочник.Номенклатура 
		|					ТОГДА ВнутренееПеремещение.КорСубконто3 
		|				ИНАЧЕ 
		|					NULL КОНЕЦ))";
		
		Если МассивНоменклатуры <> Неопределено Тогда
			Текст = Текст + "
			|	И (ВЫБОР КОГДА ВнутренееПеремещение.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ВнутренееПеремещение.Субконто1 В (&МассивНоменклатуры) КОГДА ВнутренееПеремещение.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ВнутренееПеремещение.Субконто2 В (&МассивНоменклатуры) КОГДА ВнутренееПеремещение.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ВнутренееПеремещение.Субконто3 В (&МассивНоменклатуры) ИНАЧЕ ЛОЖЬ КОНЕЦ)";
		КонецЕсли;
	
		Текст = Текст + "
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВнутренееПеремещение.Счет,
		|		ВнутренееПеремещение.Субконто1,
		|		ВнутренееПеремещение.Субконто2,
		|		ВнутренееПеремещение.Субконто3,
		|		ВнутренееПеремещение.СтруктурноеПодразделение ";
		Если Учет = "Нал" Тогда
			Текст = Текст +"
		|		, ВнутренееПеремещение.ВидУчета";
		КонецЕсли;                		
				
	// Если есть операции списания, которе не должны быть скорректированы, то эти
	// операции необходимо учесть при расчете среденвзвешенной стоимости номенклатуры.
	Если СписокНеКорректируемыхСчетов <> Неопределено Тогда
		
		Текст = Текст + "
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаНеУчитываемыхСписаний.Счет,
		|		ТаблицаНеУчитываемыхСписаний.Субконто1,
		|		ТаблицаНеУчитываемыхСписаний.Субконто2,
		|		ТаблицаНеУчитываемыхСписаний.Субконто3,
		|		ТаблицаНеУчитываемыхСписаний.СтруктурноеПодразделение, 
		|		0,  ";
		Если Учет = "Нал" Тогда
			Текст = Текст +"
		|		ТаблицаНеУчитываемыхСписаний.ВидУчета,";
	КонецЕсли;   
	Текст = Текст + "	
		|		0,
		|		СУММА(-(ВЫБОР КОГДА ТаблицаНеУчитываемыхСписаний.СуммаОборотКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаНеУчитываемыхСписаний.СуммаОборотКт КОНЕЦ)),
		|		СУММА(-(ВЫБОР КОГДА ТаблицаНеУчитываемыхСписаний.КоличествоОборотКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаНеУчитываемыхСписаний.КоличествоОборотКт КОНЕЦ)),
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&СписокНеКорректируемыхСчетов), ,  Организация = &Организация, , ) КАК ТаблицаНеУчитываемыхСписаний";
		
		Если МассивНоменклатуры <> Неопределено Тогда
			Текст = Текст + "
			|	
			|	ГДЕ
			|		(ВЫБОР КОГДА ТаблицаНеУчитываемыхСписаний.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаНеУчитываемыхСписаний.Субконто1 В (&МассивНоменклатуры) КОГДА ТаблицаНеУчитываемыхСписаний.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаНеУчитываемыхСписаний.Субконто2 В (&МассивНоменклатуры) КОГДА ТаблицаНеУчитываемыхСписаний.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаНеУчитываемыхСписаний.Субконто3 В (&МассивНоменклатуры) ИНАЧЕ ЛОЖЬ КОНЕЦ)";
		КонецЕсли;
	
		Текст = Текст + "
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ТаблицаНеУчитываемыхСписаний.Счет,
			|		ТаблицаНеУчитываемыхСписаний.Субконто1,
			|		ТаблицаНеУчитываемыхСписаний.Субконто2,
			|		ТаблицаНеУчитываемыхСписаний.Субконто3,
			|		ТаблицаНеУчитываемыхСписаний.СтруктурноеПодразделение ";
			Если Учет = "Нал" Тогда
				Текст = Текст +"
				|		, ТаблицаНеУчитываемыхСписаний.ВидУчета";
			КонецЕсли; 			
		КонецЕсли;  	
		Текст = Текст + ") КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Типовой.Ссылка КАК Счет,
		|			МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 1 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто1,
		|			МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 2 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто2,
		|			МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 3 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто3
		|		ИЗ
		|			ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто
		|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|				ПО ТиповойВидыСубконто.Ссылка = Типовой.Ссылка
		|		
		|		ГДЕ
		|			Типовой.Ссылка В ИЕРАРХИИ(&СписокСчетов)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Типовой.Ссылка) КАК СуммовойУчет
		|		ПО ВложенныйЗапрос.Счет = СуммовойУчет.Счет
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Счет,
		|	ВложенныйЗапрос.СтруктурноеПодразделение,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто1 ТОГДА ВложенныйЗапрос.Субконто1 ИНАЧЕ Неопределено КОНЕЦ,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто2 ТОГДА ВложенныйЗапрос.Субконто2 ИНАЧЕ Неопределено КОНЕЦ,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто3 ТОГДА ВложенныйЗапрос.Субконто3 ИНАЧЕ Неопределено КОНЕЦ ";
		Если Учет = "Нал" Тогда
			Текст = Текст +"
			|		, ВложенныйЗапрос.ВидУчета";
		КонецЕсли;  		      	
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаНач", 						ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", 						ДатаКон);
		Запрос.УстановитьПараметр("Организация", 					СтруктураДопПараметров.Организация);
		Запрос.УстановитьПараметр("МассивНоменклатуры", 			МассивНоменклатуры);
		Запрос.УстановитьПараметр("СписокСчетов",  					СписокСчетовУчетаНоменклатуры(Учет));
		Запрос.УстановитьПараметр("СчетаРасчетов", 					ПолучитьСчетаРасчетов());
		Запрос.УстановитьПараметр("СписокНеКорректируемыхСчетов", 	СписокНеКорректируемыхСчетов);
		
		Если Учет = "Нал" Тогда
			Текст = СтрЗаменить(Текст, "Типовой", "Налоговый");
			Текст = СтрЗаменить(Текст, "Организация = &Организация", "Организация = &Организация И ВидУчета В Иерархии(&ВидУчета)");
			Запрос.УстановитьПараметр("ВидУчета", ВидУчета);   			
		КонецЕсли; 

		Запрос.Текст = Текст;
	
		ТабПартий = Запрос.Выполнить().Выгрузить();
					
		ТабПартий.Колонки.Добавить("Найдена", Новый ОписаниеТипов("Булево"));
	
		Парам=Новый Структура;
		ИндСостояния=Состояния.Количество();
		
		Для Каждого Состояние Из Состояния Цикл
			
			ИндСостояния = Макс(ИндСостояния, Состояние.Ключ);	
		
			// Это параметры (значения измерений, счетов, субконто и т.д.), которые имеет состояние
			ПараметрыСостояния = СоотвПараметровСостояний[Состояние.Ключ];
			
			Парам.Вставить("Счет", ПараметрыСостояния["Счет"]);
			Парам.Вставить("Субконто1", ПараметрыСостояния["Субконто1"]);
			Парам.Вставить("Субконто2", ПараметрыСостояния["Субконто2"]);
			Парам.Вставить("Субконто3", ПараметрыСостояния["Субконто3"]);
			Парам.Вставить("СтруктурноеПодразделение", ПараметрыСостояния["СтруктурноеПодразделение"]);
			Если Учет = "Нал" Тогда
				Парам.Вставить("ВидУчета", ПараметрыСостояния["ВидУчета"]);
			КонецЕсли;			
				
			Количество = 0;
			
			СтруктураСумм = Новый Структура; // структура, хранящая суммы
			
			// Заполнение сумм
			Для Каждого ЭлементСумма Из МассивСумм Цикл
				СтруктураСумм.Вставить(ЭлементСумма, 0);
			КонецЦикла;
			
			НайдСтроки=ТабПартий.НайтиСтроки(Парам);
			Для Каждого СтрокаТаблицы Из НайдСтроки Цикл
				
				Количество = СтрокаТаблицы.КоличествоОстаток + СтрокаТаблицы.КоличествоПриход 
						   + СтрокаТаблицы.КоличествоПриходОтходов + СтрокаТаблицы.КоличествоВозвратОтПокупателя + СтрокаТаблицы.КоличествоВозвратПоставщику;
						   
				Сумма      = СтрокаТаблицы.СуммаОстаток + СтрокаТаблицы.СуммаПриход 
						   + СтрокаТаблицы.СуммаПриходОтходов + СтрокаТаблицы.СуммаВозвратОтПокупателя + СтрокаТаблицы.СуммаВозвратПоставщику;		   
						   
				СтруктураСумм.Вставить("Стоимость",  СтруктураСумм[ЭлементСумма] + Сумма);						   				
				// Отметим найденные строки (участвующие в перемещениях), чтобы потом добавить все остальные остатки
				СтрокаТаблицы.Найдена = Истина;
			КонецЦикла;
			
			Состояние.Значение.Вставить("Количество", Количество);
			
			Состояние.Значение.Вставить("СтруктураСумм", СтруктураСумм);
		КонецЦикла;
	
		// Теперь добавим состояния не участвующие в перемещениях (обособленные вершины) - тем, по которым не было перемещений, чтобы по ним внешнее списание рассчиталось той же процедурой, что и для перемещений
		//ИндСостояния=Состояния.Количество();
		Для Каждого СтрокаТаблицы Из ТабПартий Цикл
			Если НЕ СтрокаТаблицы.Найдена Тогда
				
				Количество = СтрокаТаблицы.КоличествоОстаток + СтрокаТаблицы.КоличествоПриход + СтрокаТаблицы.КоличествоВозвратОтПокупателя + СтрокаТаблицы.КоличествоВозвратПоставщику;							
				
				СтруктураСумм = Новый Структура; // структура, хранящая суммы
				СтруктураСумм.Вставить("Стоимость", СтрокаТаблицы.СуммаОстаток + СтрокаТаблицы.СуммаПриход + СтрокаТаблицы.СуммаВозвратОтПокупателя + СтрокаТаблицы.СуммаВозвратПоставщику);
				
				ИндСостояния=ИндСостояния+1;
				
				// Добавим состояние со всеми необходимыми параметрами
				Состояния.Вставить(ИндСостояния, 
				
				Новый Структура("КоличествоИсточников, КоличествоРассчитанныхВходов, Приемники, Количество, СтруктураСумм", 0, 0, Новый Соответствие, Количество, СтруктураСумм));
				
				Если Учет = "Нал" Тогда
					СоотвПараметровСостояний.Вставить(ИндСостояния, Новый Структура("Счет,СтруктурноеПодразделение, Субконто1, Субконто2, Субконто3, ВидУчета", СтрокаТаблицы.Счет, СтрокаТаблицы.СтруктурноеПодразделение, СтрокаТаблицы.Субконто1, СтрокаТаблицы.Субконто2, СтрокаТаблицы.Субконто3, СтрокаТаблицы.ВидУчета));
				Иначе
					СоотвПараметровСостояний.Вставить(ИндСостояния, Новый Структура("Счет, СтруктурноеПодразделение, Субконто1, Субконто2, Субконто3", СтрокаТаблицы.Счет, СтрокаТаблицы.СтруктурноеПодразделение, СтрокаТаблицы.Субконто1, СтрокаТаблицы.Субконто2, СтрокаТаблицы.Субконто3));
				КонецЕсли;
									
				МассивДобавляемыхВершин.Добавить(ИндСостояния);
				
			КонецЕсли;
			
		КонецЦикла;
	
КонецПроцедуры // ДобавитьНачальныйОстатокИВнешнееПоступление()

// Добавляет в базу данных записи по перемещению в другое состояние
//
// Параметры:
//	Нет.
//  
Процедура ДобавитьЗаписиПоПеремещению(ПараметрыСостоянияИсточника, ПараметрыСостоянияПриемника, ИсходнаяСуммаКорректировки, СтруктураДопПараметров)
	
	СуммаКорректировки 		= ИсходнаяСуммаКорректировки.Стоимость;
	КоличествоКорректировки = ИсходнаяСуммаКорректировки.Количество;
		
	
	Если ИсходнаяСуммаКорректировки.Свойство("СписаноРанее") Тогда
		СуммаСписаноРанее = ИсходнаяСуммаКорректировки.СписаноРанее;
	Иначе
		СуммаСписаноРанее= 0;
	КонецЕсли;	
	                		
	Если СтруктураДопПараметров.Учет = "Нал" И ИсходнаяСуммаКорректировки.Свойство("Себестоимость") Тогда
		СуммаСебестоимости = ИсходнаяСуммаКорректировки.Себестоимость;
	Иначе
		СуммаСебестоимости = СуммаСписаноРанее+СуммаКорректировки;
	КонецЕсли;	
	
	Если СуммаКорректировки = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Учет = СтруктураДопПараметров.Учет;
	
	Движение = СтруктураДопПараметров.Регистратор.Движения[?(Учет = "Нал", "Налоговый", "Типовой")];
	
	СуммаКорректировки = Окр(СуммаКорректировки, 2,1);
	
	Префикс = СтруктураДопПараметров.Префикс;
	СтруктураПоискаПоРегистратору = Новый Структура("СтруктурноеПодразделение, Счет,Субконто1,Субконто2,Субконто3,СтруктурноеПодразделение" + Префикс +" ,Счет" + Префикс + ",Субконто1" + Префикс + ", Субконто2" + Префикс + ",Субконто3" + Префикс + "",
									ПараметрыСостоянияИсточника.СтруктурноеПодразделение,ПараметрыСостоянияИсточника.Счет,ПараметрыСостоянияИсточника.Субконто1,ПараметрыСостоянияИсточника.Субконто2,ПараметрыСостоянияИсточника.Субконто3,
									ПараметрыСостоянияПриемника.СтруктурноеПодразделение, ПараметрыСостоянияПриемника.Счет,ПараметрыСостоянияПриемника.Субконто1,ПараметрыСостоянияПриемника.Субконто2,ПараметрыСостоянияПриемника.Субконто3);
		
	ОперацийПеремещений = СтруктураДопПараметров.ТаблицаПеремещений.НайтиСтроки(СтруктураПоискаПоРегистратору);
			
	ОбщаяСуммаКорректировки = 0;
	ОсталосьКоличества      = КоличествоКорректировки;
		
	УжеСписано = 0;
	ОбщаяСтоимостьКорректировкиБУ = 0;
	Для Каждого ОперацияПеремещения Из ОперацийПеремещений Цикл	
		Если ОперацияПеремещения.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;        		
		        					
		Если ОсталосьКоличества < ОперацияПеремещения.Количество
			И КоличествоКорректировки <> 0 И ОсталосьКоличества <> 0 Тогда
			КоэффициентКорректировки = ОсталосьКоличества/КоличествоКорректировки;
		Иначе			
			Если КоличествоКорректировки > ОперацияПеремещения.Количество Тогда
				КоэффициентКорректировки = ОперацияПеремещения.Количество/КоличествоКорректировки;
			Иначе
				КоэффициентКорректировки = 1;
			КонецЕсли;
		КонецЕсли;
		
		ОсталосьКоличества = ОсталосьКоличества- ОперацияПеремещения.Количество;
		
		СуммаКорректировкиПеремещения = 0;
		Если Учет = "Бух" Тогда

			Если УжеСписано = СуммаКорректировки Тогда
				Продолжить;
			КонецЕсли; 
			СуммаКорректировкиПеремещения = Окр(СуммаКорректировки*КоэффициентКорректировки,2);
			
			ОбщаяСуммаКорректировки = ОбщаяСуммаКорректировки +СуммаКорректировкиПеремещения;
			УжеСписано = ОбщаяСуммаКорректировки; 		
			
		ИначеЕсли Учет = "Нал"   Тогда	
			
			// получаем сведения о корректировки из БУ
			// корректирующая корреспонденция будет производится на общую сумму по аналитике
			СтруктураПоиска = Новый Структура;
			//для перемешения ищем без учета ном. групп и подразделений выпуска. Так как они не могут присутствовать в аналитике проводки
			СтруктураПоиска.Вставить("Номенклатура",						ПараметрыСостоянияИсточника.Субконто1);
			СтруктураПоиска.Вставить("СтруктурноеПодразделение",			ПараметрыСостоянияИсточника.СтруктурноеПодразделение);
			СтруктураПоиска.Вставить("СтруктурноеПодразделениеПолучатель",	ПараметрыСостоянияПриемника.СтруктурноеПодразделение);		
			СтруктураПоиска.Вставить("КорректируемыйДокумент",				ОперацияПеремещения.Регистратор);		
			
			СписокНоменклатуры = СтруктураДопПараметров.ТаблицаРасчетаСебестоимости.НайтиСтроки(СтруктураПоиска);
			
			Если СписокНоменклатуры.Количество() <> 0 Тогда						
				///////////////////////////////////////
				//// получаем данные из БУ о сумме списания и корректировке документа
				СебестоимостьБУ 		= 0;  КоличествоБУ 			= 0;
				СуммаКорректировкиБУ 	= 0;  РанееСписаноВБУ			= 0;
				УжеСписаноВНУ			= 0;	
								
				Для Каждого КорректируемаяПартия Из СписокНоменклатуры Цикл
					СебестоимостьБУ 		= СебестоимостьБУ 		 + КорректируемаяПартия.Себестоимость;
					КоличествоБУ    		= КоличествоБУ 			 + КорректируемаяПартия.Количество;
					СуммаКорректировкиБУ 	= СуммаКорректировкиБУ	 + КорректируемаяПартия.СуммаКорректировки;
					УжеСписаноВНУ			= УжеСписаноВНУ			 + КорректируемаяПартия.СуммаКорректировкиВНУ;
				КонецЦикла; 
				РанееСписаноВБУ		= СебестоимостьБУ - СуммаКорректировкиБУ;
				ОбщаяСтоимостьКорректировкиБУ = ОбщаяСтоимостьКорректировкиБУ + СуммаКорректировкиБУ;
				
				Если СуммаКорректировкиБУ = УжеСписаноВНУ Тогда
					Продолжить;
				КонецЕсли;

				КоличествоСписанияВНУ 	= ОперацияПеремещения.Количество;
				СуммаСписанияВНУ 		= Окр(СуммаСписаноРанее * КоэффициентКорректировки,2);;
				
				//  БУ > НУ например в случаях, когда в НУ направления списания отличаются от БУ
				//  НУ м/б больше БУ  в случаях, когда на счетах БУ ведется партионный учет и списание в течение месяца происходило по партиям, произведенным в прошлых периодах.
				//  в БУ в этом случае корректировка затрагивает только производственные партии текущего периода. В НУ из-за отсутствия партионного учета мы располагаем только общей суммой списания.
				Если КоличествоБУ < КоличествоСписанияВНУ Тогда				
					КоличествоСписанияВНУ 			= КоличествоБУ;						
					СуммаСписанияВНУ 				= РанееСписаноВБУ;
				КонецЕсли;	
				
				Если КоличествоБУ > КоличествоСписанияВНУ Тогда
					КоэффициентКорректировки = КоличествоСписанияВНУ/КоличествоБУ;
				Иначе
					КоэффициентКорректировки = 1;
				КонецЕсли;      			
				
				ДолжноБытьСписаноНУ   = ?(КоличествоСписанияВНУ = КоличествоБУ, СебестоимостьБУ , Окр(СебестоимостьБУ/КоличествоБУ * КоличествоСписанияВНУ, 2)); 								
				//СуммаКорректировкиПеремещения     = ДолжноБытьСписаноНУ - СуммаСписанияВНУ;
				
				СуммаКорректировкиПеремещения = ?(КоличествоСписанияВНУ = КоличествоБУ, СуммаКорректировкиБУ , Окр(СуммаКорректировкиБУ/КоличествоБУ * КоличествоСписанияВНУ, 2));
				Если СуммаКорректировкиПеремещения <> 0 Тогда 
					// с учетом предыдущих транзакций. Так как в первой итерации корректировка уже могла быть произведена по итоговым данным БУ
					СуммаКорректировкиПеремещения = СуммаКорректировкиПеремещения - УжеСписаноВНУ;
				КонецЕсли;			
				
				Если СуммаКорректировки <> 0 Тогда
					СписокНоменклатуры[0].СуммаКорректировкиВНУ = СписокНоменклатуры[0].СуммаКорректировкиВНУ + СуммаКорректировкиПеремещения; 
				КонецЕсли;
				ОбщаяСуммаКорректировки = ОбщаяСуммаКорректировки + СуммаКорректировкиПеремещения;	
			КонецЕсли;	       		
		КонецЕсли;			
				
		Если НЕ ТипЗнч(ОперацияПеремещения.Регистратор) = Тип("ДокументСсылка.ЗакрытиеМесяца") И СтруктураДопПараметров.Свойство("ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров") Тогда 						
			
			// суммы корректировок - складываются.
			// сведения о количестве и себестоимости в БУ - переписываются
			СтруктураПоиска = Новый Структура("Организация, Номенклатура,КорректируемыйДокумент",
			СтруктураДопПараметров.Организация,ПараметрыСостоянияИсточника.Субконто1, ОперацияПеремещения.Регистратор);
			СписокКорректировок = СтруктураДопПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.НайтиСтроки(СтруктураПоиска);
			Если СписокКорректировок.Количество() = 0 Тогда
				
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров = СтруктураДопПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Добавить();
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.ПериодРасчета               = СтруктураДопПараметров.Период;
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Организация                 = СтруктураДопПараметров.Организация;
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Номенклатура                = ПараметрыСостоянияИсточника.Субконто1;
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Регистратор                 = СтруктураДопПараметров.Регистратор;								
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.КорректируемыйДокумент      = ОперацияПеремещения.Регистратор;															
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СтруктурноеПодразделение    = ПараметрыСостоянияИсточника.СтруктурноеПодразделение;  												
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СтруктурноеПодразделениеПолучатель = ПараметрыСостоянияПриемника.СтруктурноеПодразделение;
			Иначе
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров = СписокКорректировок[0];
			КонецЕсли;
			
			Если Учет = "Нал" Тогда
				
				Если СтруктураДопПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Колонки.Найти("ВидУчета") = Неопределено Тогда
					СтруктураДопПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Колонки.Добавить("ВидУчета");
				КонецЕсли;
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.ВидУчета = ПараметрыСостоянияПриемника.ВидУчета;	
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировкиВНУ = ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировкиВНУ + СуммаКорректировкиПеремещения;				
			Иначе	
				// по данным БУ					
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Количество 			 = ОперацияПеремещения.Количество;													
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Себестоимость		 = Окр(СуммаСебестоимости*КоэффициентКорректировки,2);				
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировки 	 = ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировки + СуммаКорректировкиПеремещения;					
			КонецЕсли;   			
		КонецЕсли; 						
	КонецЦикла;			        		
	
	Если Учет <> "Нал" Тогда 
		Остаток = СуммаКорректировки - ОбщаяСуммаКорректировки;
		Если Остаток <> 0 Тогда
			ОбщаяСуммаКорректировки = СуммаКорректировки;			
			Если СтруктураДопПараметров.Свойство("ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров")
				И НЕ ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров = Неопределено Тогда 							
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировки = ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировки + Остаток;									
			КонецЕсли;
		КонецЕсли; 
	Иначе
		ОстатокНУ = ОбщаяСтоимостьКорректировкиБУ - ОбщаяСуммаКорректировки; 			
		Если ОстатокНУ >-0.5 И ОстатокНУ < 0.5 Тогда
			ОбщаяСуммаКорректировки = ОбщаяСуммаКорректировки + ОстатокНУ;
			Если СтруктураДопПараметров.Свойство("ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров")
				И НЕ ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров = Неопределено Тогда 							
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировкиВНУ = ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировки + ОстатокНУ;
			КонецЕсли;
		КонецЕсли;				
	КонецЕсли;    					
		                    		
		Если ОбщаяСуммаКорректировки <> 0 Тогда
			
		Проводка = Движение.Добавить();
		
		Проводка.Период        = СтруктураДопПараметров.Период;
		Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
		Проводка.Активность    = Истина;
		Проводка.Организация   = СтруктураДопПараметров.Организация;
		Проводка.Содержание    = "Корректировка стоимости перемещения";
		Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ;
		
		Проводка.СчетКт = ПараметрыСостоянияИсточника.Счет;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
		
		Проводка.СчетДт = ПараметрыСостоянияПриемника.Счет;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ПараметрыСостоянияПриемника.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ПараметрыСостоянияПриемника.Субконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ПараметрыСостоянияПриемника.Субконто3);
		
		Проводка.Сумма = ОбщаяСуммаКорректировки;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, 
		ПараметрыСостоянияПриемника.СтруктурноеПодразделение, ПараметрыСостоянияИсточника.СтруктурноеПодразделение);
		
		Если Учет = "Нал" Тогда			
			Проводка.ВидУчетаДт = ПараметрыСостоянияПриемника.ВидУчета;      
			Проводка.ВидУчетаКт = ПараметрыСостоянияПриемника.ВидУчета;		
		КонецЕсли;	
	КонецЕсли;
	
	Движение.Записать(Ложь);
	
КонецПроцедуры // ДобавитьЗаписиПоПеремещению()

// Здесь формируются все записи по внешнему списанию 
//
// Параметры:
//	Нет.
//
Процедура ДобавитьЗаписиПоВнешнемуСписанию(ПараметрыСостоянияИсточника, знач ОбщееКоличество, знач ОбщаяСтоимостьГП, СтруктураДопПараметров)
	
	Учет = СтруктураДопПараметров.Учет;
	Движение = СтруктураДопПараметров.Регистратор.Движения[?(Учет = "Нал", "Налоговый", "Типовой")];
	РеализацияТМЗ = СтруктураДопПараметров.Регистратор.Движения["РеализацияТМЗ"];
	
	ОперацийСписания 			   = СтруктураДопПараметров.ТаблицаОперацийСписания.НайтиСтроки(ПараметрыСостоянияИсточника);
	СписокСчетовВзаиморасчетов     = УправлениеВзаиморасчетами.ПолучитьСписокСчетовВзаиморасчетов();
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ОбщееКоличествоПроверки = ОбщееКоличество;
	
	ОбщаяСтоимость = ОбщаяСтоимостьГП.Стоимость; // Стоимость к распределению
		
	Для каждого ОперацияСписания Из ОперацийСписания Цикл
		
		//необходимо скорректировать стоимость списания реализованных товаров по регистру "Реализация ТМЗ"
		СтруктураПоиска = Новый Структура("СтруктурноеПодразделение, Счет, Возврат,Субконто1,Субконто2,Субконто3,КорСчет,КорСубконто1, КорСубконто2, КорСубконто3",
								ОперацияСписания.СтруктурноеПодразделение,ОперацияСписания.Счет,ОперацияСписания.Возврат,ОперацияСписания.Субконто1,ОперацияСписания.Субконто2,ОперацияСписания.Субконто3,
								ОперацияСписания.КорСчет,ОперацияСписания.КорСубконто1,ОперацияСписания.КорСубконто2,ОперацияСписания.КорСубконто3);
								
		Если Учет = "Нал" Тогда
			СтруктураПоиска.Вставить("ВидУчета",ОперацияСписания.ВидУчета); 
		КонецЕсли;
		
		ОперацийРеализации = СтруктураДопПараметров.ТаблицаОперацийРеализации.НайтиСтроки(СтруктураПоиска);
		
		Если ОбщееКоличество = 0 Тогда
			Если ОперацияСписания.Возврат И НЕ ОбщееКоличествоПроверки = 0 Тогда
				ОбщееКоличество = ОбщееКоличествоПроверки;
				ОбщаяСтоимость = ОбщаяСтоимостьГП.Стоимость; 
			Иначе 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Учет = "Бух" Тогда
			// По бух. учету проводим корректировку сводно по корреспонденции направления списания
			КоличествоОстаток = ОбщееКоличество;
			ДолжноБытьСписано  = Окр(ОбщаяСтоимость/ОбщееКоличество * ОперацияСписания.Количество, 2); 
			
		Если ОперацияСписания.Возврат Тогда 
				
				Если СтруктураДопПараметров.ЗаписьВозвратыПоПроизводству.Количество() > 0 Тогда 
					//необходимо скорректировать стоимость списания реализованных товаров по регистру "Реализация ТМЗ"
					
					  СтруктураПоискаВозврата = Новый Структура("СчетДт, СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1, СубконтоКт2",
                                ОперацияСписания.Счет, ОперацияСписания.Субконто1,ОперацияСписания.Субконто2,ОперацияСписания.Субконто3,
                                ОперацияСписания.КорСчет,ОперацияСписания.КорСубконто1,ОперацияСписания.КорСубконто2);
        
                    СтруктураПоискаВозврата.Вставить("СубконтоКт3", ?(ОперацияСписания.КорСубконто3 = NULL, Неопределено,    ОперацияСписания.КорСубконто3));    
                    ОперацияВовзрата = СтруктураДопПараметров.ЗаписьВозвратыПоПроизводству.НайтиСтроки(СтруктураПоискаВозврата);
					
					УчтеноВозврата = 0;
					
					Для каждого СтрокаМассива Из ОперацияВовзрата Цикл
						
						УчтеноВозврата = СтрокаМассива.Сумма + УчтеноВозврата;
							
					КонецЦикла;	
						
					Если ОперацияВовзрата.Количество() <> 0 Тогда 
						СуммаКорректировки = ДолжноБытьСписано - (УчтеноВозврата + ОперацияСписания.Сумма);
					Иначе 
						СуммаКорректировки = ДолжноБытьСписано - ОперацияСписания.Сумма;
					КонецЕсли;	
					
				Иначе 
					
					СуммаКорректировки = ДолжноБытьСписано - ОперацияСписания.Сумма;
					
				КонецЕсли;
					
			Иначе 
				СуммаКорректировки = ДолжноБытьСписано - ОперацияСписания.Сумма;
			КонецЕсли;
				
			// Уменьшим общую стоимость и количество.
			ОбщаяСтоимость  = ОбщаяСтоимость  - ДолжноБытьСписано;
			ОбщееКоличество = ОбщееКоличество - ОперацияСписания.Количество;	
		КонецЕсли;
		
		// Для расчета по средней и для корректировки списания МПЗ на косвенные расходы третью корректировку делать не надо
		Если Лев(СтруктураДопПараметров.РасчетПрямыхЗатратНомер, 1) = "3" Тогда
			Если СтруктураДопПараметров.РасчетПрямыхЗатратНомер <> "3По средней" Тогда
				ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа, Продукция, СубконтоКт2, СубконтоКт3", ОперацияСписания.КорСубконто1, ОперацияСписания.КорСубконто2, ПараметрыСостоянияИсточника.Субконто1, ПараметрыСостоянияИсточника.Субконто2, ПараметрыСостоянияИсточника.Субконто3));
				Если ВстречныйВыпуск.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;   				
			КонецЕсли;
			
			Если Лев(ОперацияСписания.КорСчет.Код, 1) = "2" Тогда
				ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("ПодразделениеПересчета, Продукция", ОперацияСписания.КорСубконто1, ПараметрыСостоянияИсточника.Субконто1));
				Если ВстречныйВыпуск.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Учет = "Бух" И СуммаКорректировки <> 0 Тогда
			
			// Если это Документ возврата товаров поставщику, 
			// то разницу в стоимости отнесем напрямую на счет списания разницы себестоимости
			Если НЕ ОперацияСписания.ВозвратПоставщику Тогда
							
				// Если счет валютный то необходимо поставить валютную сумму
				СчетНайденВСписке = СписокСчетовВзаиморасчетов.Найти(ОперацияСписания.КорСчет, "Ссылка");
				Если СчетНайденВСписке <> Неопределено Тогда
					
					Если ТипЗнч(ОперацияСписания.КорСубконто2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
						
						Если ОперацияСписания.КорСубконто2.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда 
							
							Если ОперацияСписания.Возврат Тогда 
								Проводка = СтруктураДопПараметров.ЗаписьВозвратыПоПроизводству.Добавить();
							Иначе 
								Проводка = Движение.Добавить();
							КонецЕсли;
							
							Проводка.ВалютаДт 		 = ВалютаРегламентированногоУчета;
							Проводка.ВалютнаяСуммаДт = СуммаКорректировки;
						Иначе 
							Сообщить("Корректировка по счету: " + ОперацияСписания.КорСчет + " на сумму " + СуммаКорректировки + " не будет произведена"
								  + " так как в договоре:" + ОперацияСписания.КорСубконто2 + " установлена валюта отличная от валюты регламентированного учета!", СтатусСообщения.ОченьВажное);
							Продолжить;
						КонецЕсли;
						
					Иначе 
						Если ОперацияСписания.Возврат Тогда 
							Проводка = СтруктураДопПараметров.ЗаписьВозвратыПоПроизводству.Добавить();	
						Иначе 
							Проводка = Движение.Добавить();
						КонецЕсли;
					КонецЕсли;
				Иначе 
					Если ОперацияСписания.Возврат Тогда 
						Проводка = СтруктураДопПараметров.ЗаписьВозвратыПоПроизводству.Добавить();		
					Иначе 
						Проводка = Движение.Добавить();
					КонецЕсли;
				КонецЕсли;
		
				Проводка.Период        = СтруктураДопПараметров.Период;
				Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
				Проводка.Активность    = Истина;
				Проводка.Организация   = СтруктураДопПараметров.Организация;
				Проводка.Содержание    = "Корректировка стоимости списания";
				Проводка.ВидРегламентнойОперации = ?(НЕ СтруктураДопПараметров.Учет = "Нал", Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ, Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ);
				
				Если ОперацияСписания.Возврат Тогда 
						
					Проводка.СчетКт = ОперацияСписания.КорСчет;
					Проводка.СубконтоКт1 = ОперацияСписания.КорСубконто1;
					Проводка.СубконтоКт2 = ОперацияСписания.КорСубконто2;
					Проводка.СубконтоКт3 = ОперацияСписания.КорСубконто3;
					
					Проводка.СчетДт = ПараметрыСостоянияИсточника.Счет;
					Проводка.СубконтоДт1 = ПараметрыСостоянияИсточника.Субконто1;
					Проводка.СубконтоДт2 = ПараметрыСостоянияИсточника.Субконто2;
					Проводка.СубконтоДт3 = ПараметрыСостоянияИсточника.Субконто3;
				Иначе 	
					
					Проводка.СчетКт = ПараметрыСостоянияИсточника.Счет;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
					
					Проводка.СчетДт = ОперацияСписания.КорСчет;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ОперацияСписания.КорСубконто1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ОперацияСписания.КорСубконто2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ОперацияСписания.КорСубконто3);

				КонецЕсли;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, 
				ПараметрыСостоянияИсточника.СтруктурноеПодразделение, ПараметрыСостоянияИсточника.СтруктурноеПодразделение);
				
				Проводка.Сумма = СуммаКорректировки;
				
			КонецЕсли;
			
			//Если это Документ возврата товаров поставщику, нужно проверить использовался ли в проводках счет возврата
			//или напрямую шли взаиморасчеты
			Если ОперацияСписания.ВозвратПоставщику Тогда
				
				Если ОперацийРеализации.Количество() > 0 Тогда 
					
					// Чтобы учесть оба варианта проведения Возврата поставщику (со счетом возврата и без),
					// отбор необходимо накладывать на всю корреспонденцию и рассматривать дебетовую сторону взаиморасчетов
					// (к примеру, 1281 если указан счет возвратов и 3310 если не указан).
					СтруктураПоискаДляВзаиморасчетов = Новый Структура("Регистратор, СчетДт, СубконтоДт1, СубконтоДт2, СубконтоДт3, СчетКт, СубконтоКт1, СубконтоКт2, СубконтоКт3",
																		ОперацийРеализации[0].Регистратор, ОперацияСписания.КорСчет, 
																		ОперацияСписания.КорСубконто1,  ОперацияСписания.КорСубконто2, ?(ОперацияСписания.КорСубконто3 = Неопределено, NULL, ОперацияСписания.КорСубконто3),
																		ОперацияСписания.Счет, ?(ОперацияСписания.Субконто1 = Неопределено, NULL, ОперацияСписания.Субконто1),
																		?(ОперацияСписания.Субконто2 = Неопределено, NULL, ОперацияСписания.Субконто2),
																		?(ОперацияСписания.Субконто3 = Неопределено, NULL, ОперацияСписания.Субконто3));

					ОперацииВозврата = СтруктураДопПараметров.ТаблицаВозвратовПоставщику.НайтиСтроки(СтруктураПоискаДляВзаиморасчетов);
					
					Для Каждого СтрокаВозврата Из ОперацииВозврата Цикл
						
						Если ЗначениеЗаполнено(СтрокаВозврата.СчетОтнесенияСебестоимостиБУ) Тогда
							//движение по зачету Дт СчетСписанияРазницыСебестоимости - Кт СчетУчетаТМЗ
							Проводка = Движение.Добавить();																
							
							Проводка.Период        = СтруктураДопПараметров.Период;
							Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
							Проводка.Активность    = Истина;
							Проводка.Организация   = СтруктураДопПараметров.Организация;
							Проводка.Содержание    = НСтр("ru = 'Корректировка стоимости списания'");
							Проводка.ВидРегламентнойОперации = ?(НЕ СтруктураДопПараметров.Учет = "Нал", Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ, Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ);
							
							Проводка.СчетДт = СтрокаВозврата.СчетОтнесенияСебестоимостиБУ;
							Для Индекс = 1 По 3 Цикл
								Если ТипЗнч(СтрокаВозврата["СубконтоОтнесенияСебестоимостиБУ" + Индекс]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, Индекс, СтрокаВозврата.НоменклатурнаяГруппа);
								Иначе 
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, Индекс, СтрокаВозврата["СубконтоОтнесенияСебестоимостиБУ" + Индекс]);
								КонецЕсли;
							КонецЦикла;
							
							Проводка.СчетКт = ПараметрыСостоянияИсточника.Счет;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
							
							ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, 
							ПараметрыСостоянияИсточника.СтруктурноеПодразделение, ПараметрыСостоянияИсточника.СтруктурноеПодразделение);
							
							Проводка.Сумма = СуммаКорректировки;
							
							Если Проводка.СчетКт.Валютный Тогда
								Проводка.ВалютаКт 		 = ВалютаРегламентированногоУчета;
								Проводка.ВалютнаяСуммаКт = СуммаКорректировки;
							Конецесли;
							
							Если Проводка.СчетДт.Валютный Тогда
								Проводка.ВалютаДт 		 = ВалютаРегламентированногоУчета;
								Проводка.ВалютнаяСуммаДт = СуммаКорректировки;
							Конецесли; 
							
						КонецЕсли;
					КонецЦикла;										
					
				КонецЕсли;                      				
			КонецЕсли;                          			
			
		КонецЕсли;
		
		КоличествоСписания = ОперацияСписания.Количество;
		
		ОбщаяСуммаПриРаспределении = 0;
		Для каждого ОперацияРеализации Из ОперацийРеализации Цикл					
			Если Учет = "Нал" Тогда										
				// необходимо учесть возможное наличие ВР сумм

				//необходимо скорректировать стоимость списания реализованных товаров по регистру "Реализация ТМЗ"
				СтруктураПоискаВР = Новый Структура("Счет,Субконто1,Субконто2,Субконто3,КорСчет,КорСубконто1, КорСубконто2, КорСубконто3, ВидУчета, Регистратор",
				ОперацияРеализации.Счет,ОперацияРеализации.Субконто1,ОперацияРеализации.Субконто2,ОперацияРеализации.Субконто3,
				ОперацияРеализации.КорСчет,ОперацияРеализации.КорСубконто1,ОперацияРеализации.КорСубконто2,ОперацияРеализации.КорСубконто3, Справочники.ВидыУчетаНУ.ВР, ОперацияРеализации.Регистратор);
				
				ОперацийРеализацииВР = СтруктураДопПараметров.ТаблицаОперацийРеализации.НайтиСтроки(СтруктураПоискаВР);
				СуммаВР = 0;
				Для Каждого ОперацияРеализацииВР Из ОперацийРеализацииВР Цикл	
					СуммаВР = СуммаВР + ОперацияРеализацииВР.Сумма;				
				КонецЦикла;						
				
				СтруктураПоиска = Новый Структура;
				
				Если ТипЗнч(ПараметрыСостоянияИсточника.Субконто1)  = Тип("СправочникСсылка.Номенклатура") Тогда
					СтруктураПоиска.Вставить("Номенклатура",ПараметрыСостоянияИсточника.Субконто1);
				ИначеЕсли ТипЗнч(ПараметрыСостоянияИсточника.Субконто2)  = Тип("СправочникСсылка.Номенклатура") Тогда
					СтруктураПоиска.Вставить("Номенклатура",ПараметрыСостоянияИсточника.Субконто2);
				ИначеЕсли ТипЗнч(ПараметрыСостоянияИсточника.Субконто3)  = Тип("СправочникСсылка.Номенклатура") Тогда
					СтруктураПоиска.Вставить("Номенклатура",ПараметрыСостоянияИсточника.Субконто3); 
				КонецЕсли;      			
									
				СтруктураПоиска.Вставить("СтруктурноеПодразделение",ПараметрыСостоянияИсточника.СтруктурноеПодразделение);
				
				Если ТипЗнч(ОперацияСписания.КорСубконто1)  = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
					СтруктураПоиска.Вставить("ПодразделениеВыпуска",ОперацияСписания.КорСубконто1);
				ИначеЕсли ТипЗнч(ОперацияСписания.КорСубконто2) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
					СтруктураПоиска.Вставить("ПодразделениеВыпуска", ОперацияСписания.КорСубконто2);
				ИначеЕсли ТипЗнч(ОперацияСписания.КорСубконто3) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
					СтруктураПоиска.Вставить("ПодразделениеВыпуска", ОперацияСписания.КорСубконто3);
				КонецЕсли;      			
				
				Если ТипЗнч(ОперацияСписания.КорСубконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда						
					СтруктураПоиска.Вставить("СтатьяЗатрат", ОперацияСписания.КорСубконто1);  																		
				ИначеЕсли ТипЗнч(ОперацияСписания.КорСубконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда						
					СтруктураПоиска.Вставить("СтатьяЗатрат", ОперацияСписания.КорСубконто2);  
				ИначеЕсли ТипЗнч(ОперацияСписания.КорСубконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда						
					СтруктураПоиска.Вставить("СтатьяЗатрат", ОперацияСписания.КорСубконто3);  						
				КонецЕсли; 

				// Для давальческого сырья поиск выполняем с учетом НГ			
				Если ТипЗнч(ОперацияСписания.КорСубконто2)  = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					СтруктураПоиска.Вставить("НоменклатурнаяГруппаВыпуска",ОперацияСписания.КорСубконто2);
				ИначеЕсли ТипЗнч(ОперацияСписания.КорСубконто2) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					СтруктураПоиска.Вставить("НоменклатурнаяГруппаВыпуска", ОперацияСписания.КорСубконто2);
				ИначеЕсли ТипЗнч(ОперацияСписания.КорСубконто3) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					СтруктураПоиска.Вставить("НоменклатурнаяГруппаВыпуска", ОперацияСписания.КорСубконто3);
				КонецЕсли;		
				
				
				СуммаКорректировки	 = 0;
				СебестоимостьБУ 	 = 0; КоличествоБУ    = 0;
				СуммаКорректировкиБУ = 0; РанееСписаноВБУ = 0;
				УжеСписаноВНУ		 = 0;
				
				КорСубконтоСписанияБУ1 = Неопределено;
				КорСубконтоСписанияБУ2 = Неопределено;
				КорСубконтоСписанияБУ3 = Неопределено;
				КорСчетСписанияБУ 	   = Неопределено;

				// Регистратор
				СтруктураПоиска.Вставить("КорректируемыйДокумент", ОперацияРеализации.Регистратор);
				
				СписокНоменклатуры = СтруктураДопПараметров.ТаблицаРасчетаСебестоимости.НайтиСтроки(СтруктураПоиска);
				Если СписокНоменклатуры.Количество() <> 0 Тогда							
					// получаем данные из БУ о сумме списания и корректировке документа
					Для Каждого КорректируемаяПартия Из СписокНоменклатуры Цикл
						СебестоимостьБУ 		= СебестоимостьБУ 		 + КорректируемаяПартия.Себестоимость;
						КоличествоБУ    		= КоличествоБУ 			 + КорректируемаяПартия.Количество;
						СуммаКорректировкиБУ 	= СуммаКорректировкиБУ	 + КорректируемаяПартия.СуммаКорректировки;
						УжеСписаноВНУ			= УжеСписаноВНУ			 + КорректируемаяПартия.СуммаКорректировкиВНУ;
						
						КорСубконтоСписанияБУ1 = КорректируемаяПартия.ПодразделениеВыпуска;
						КорСубконтоСписанияБУ2 = КорректируемаяПартия.НоменклатурнаяГруппаВыпуска;
						КорСубконтоСписанияБУ3 = КорректируемаяПартия.СтатьяЗатрат;
						КорСчетСписанияБУ      = КорректируемаяПартия.СчетЗатратБУ;	
					КонецЦикла; 
					РанееСписаноВБУ		= СебестоимостьБУ - СуммаКорректировкиБУ;
					
					КоличествоСписанияВНУ 	= ОперацияСписания.Количество;
					СуммаСписанияВНУ 		= ОперацияСписания.Сумма + СуммаВР;
					
					Если СуммаКорректировкиБУ = УжеСписаноВНУ Тогда
						Продолжить;
					КонецЕсли;

					//  БУ > НУ например в случаях, когда в НУ направления списания отличаются от БУ
					//  НУ м/б больше БУ  в случаях, когда на счетах БУ ведется партионный учет и списание в течение месяца происходило по партиям, произведенным в прошлых периодах.
					//  в БУ в этом случае корректировка затрагивает только производственные партии текущего периода. В НУ из-за отсутствия партионного учета мы располагаем только общей суммой списания.
					Если КоличествоБУ < КоличествоСписанияВНУ Тогда				
						КоличествоСписанияВНУ 			= КоличествоБУ;						
						СуммаСписанияВНУ 				= РанееСписаноВБУ;
					КонецЕсли;	
					
					Если КоличествоБУ > ОперацияСписания.Количество Тогда
						КоэффициентКорректировки = ОперацияСписания.Количество/КоличествоБУ;
					Иначе
						КоэффициентКорректировки = 1;
					КонецЕсли;      			
					
					ДолжноБытьСписаноНУ    = ?(КоличествоСписанияВНУ = КоличествоБУ, СебестоимостьБУ , Окр(СебестоимостьБУ/КоличествоБУ * КоличествоСписанияВНУ, 2)); 
					
					СуммаКорректировки     = ДолжноБытьСписаноНУ - СуммаСписанияВНУ;
					
					Если СуммаКорректировки <-0.5 или СуммаКорректировки > 0.5 Тогда
						// с учетом предыдущих транзакций. Так как в первой итерации корректировка уже могла быть произведена по итоговым данным БУ
						СуммаКорректировки = СуммаКорректировки - УжеСписаноВНУ;
					КонецЕсли;			
					
					// Уменьшим общую стоимость и количество.
					ОбщаяСтоимость  = ОбщаяСтоимость  - ДолжноБытьСписаноНУ;
					ОбщееКоличество = ОбщееКоличество - КоличествоСписанияВНУ;	
					
					
					Если СуммаКорректировки <> 0 Тогда
						СписокНоменклатуры[0].СуммаКорректировкиВНУ = СписокНоменклатуры[0].СуммаКорректировкиВНУ + СуммаКорректировки; 
					КонецЕсли;							
					
					// Формирование проводок в НУ
					Если СуммаКорректировки <> 0 Тогда
						
						Если НЕ ОперацияСписания.ВозвратПоставщику Тогда
							
							Проводка = Движение.Добавить();
							Проводка.Период        = СтруктураДопПараметров.Период;							
							Проводка.Активность    = Истина;
							Проводка.Организация   = СтруктураДопПараметров.Организация;
							Проводка.Содержание    = "Корректировка стоимости списания";
							Проводка.ВидРегламентнойОперации = ?(НЕ СтруктураДопПараметров.Учет = "Нал", Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ, Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ);
							
							Если ОперацияСписания.Возврат Тогда 
								
								Проводка.СчетКт = ОперацияСписания.КорСчет;
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ОперацияСписания.КорСубконто1);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ОперацияСписания.КорСубконто2);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ОперацияСписания.КорСубконто3);
							
								Проводка.СчетДт = ПараметрыСостоянияИсточника.Счет;
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ПараметрыСостоянияИсточника.Субконто1);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ПараметрыСостоянияИсточника.Субконто2);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ПараметрыСостоянияИсточника.Субконто3);

							Иначе 
								
								Проводка.СчетКт = ПараметрыСостоянияИсточника.Счет;
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
							
								Проводка.СчетДт = ОперацияСписания.КорСчет;
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ОперацияСписания.КорСубконто1);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ОперацияСписания.КорСубконто2);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ОперацияСписания.КорСубконто3);
							
							КонецЕсли;
							
							ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, 
							ПараметрыСостоянияИсточника.СтруктурноеПодразделение, ПараметрыСостоянияИсточника.СтруктурноеПодразделение);
							
							Проводка.Сумма = СуммаКорректировки;
							
							КоличествоСписания = ОперацияСписания.Количество;
							
							Если ОперацияСписания.Возврат Тогда
								ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, ОперацияСписания.ВидУчета, Ложь);
							Иначе
								ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, ОперацияСписания.ВидУчета);
							КонецЕсли;	
							
							ПроцедурыНалоговогоУчета.ОтразитьРасходыНаРемонтПроизводственныхОС(Движение,
										Новый Структура("СчетБУ, СубконтоБУ1, СубконтоБУ2,СубконтоБУ3",
										КорСчетСписанияБУ, КорСубконтоСписанияБУ1, КорСубконтоСписанияБУ2, КорСубконтоСписанияБУ3),
										Новый Структура("СчетНУ, СубконтоНУ1, СубконтоНУ2,СубконтоНУ3",
										ОперацияСписания.КорСчет, ОперацияСписания.КорСубконто1, ОперацияСписания.КорСубконто2, ОперацияСписания.КорСубконто3),
										СтруктураДопПараметров.Период, СтруктураДопПараметров.Организация, ПараметрыСостоянияИсточника.СтруктурноеПодразделение, ПараметрыСостоянияИсточника.СтруктурноеПодразделение, ОперацияСписания.ВидУчета, СуммаКорректировки, КоличествоСписания, Ложь, Неопределено);
							
						Иначе
							
							//Если это Документ возврата товаров поставщику, нужно проверить использовался ли в проводках счет возврата
							//или напрямую шли взаиморасчеты
							СтруктураПоискаДляВзаиморасчетов = Новый Структура("Регистратор, СчетДт, СубконтоДт1, СубконтоДт2, СубконтоДт3, СчетКт, СубконтоКт1, СубконтоКт2, СубконтоКт3",
																				ОперацияРеализации.Регистратор, ОперацияСписания.КорСчет, 
																				ОперацияСписания.КорСубконто1,  ОперацияСписания.КорСубконто2, ?(ОперацияСписания.КорСубконто3 = Неопределено, NULL, ОперацияСписания.КорСубконто3),
																				ОперацияСписания.Счет, ?(ОперацияСписания.Субконто1 = Неопределено, NULL, ОперацияСписания.Субконто1),
																				?(ОперацияСписания.Субконто2 = Неопределено, NULL, ОперацияСписания.Субконто2),
																				?(ОперацияСписания.Субконто3 = Неопределено, NULL, ОперацияСписания.Субконто3));
							
							ОперацииВозврата = СтруктураДопПараметров.ТаблицаВозвратовПоставщику.НайтиСтроки(СтруктураПоискаДляВзаиморасчетов);
							
							Для Каждого СтрокаВозврата Из ОперацииВозврата Цикл
								
								Если ЗначениеЗаполнено(СтрокаВозврата.СчетОтнесенияСебестоимостиНУ) Тогда
									//движение по зачету Дт СчетСписанияРазницыСебестоимости - Кт СчетУчетаТМЗ
									Если СтрокаВозврата.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ(СтрокаВозврата.СчетУчетаРасчетовСКонтрагентом) Тогда
										
										Проводка = Движение.Добавить();																
										Проводка.Период        = СтруктураДопПараметров.Период;
										Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
										Проводка.Активность    = Истина;
										Проводка.Организация   = СтруктураДопПараметров.Организация;
										Проводка.Содержание    = НСтр("ru = 'Корректировка стоимости списания'");
										Проводка.ВидРегламентнойОперации = ?(НЕ СтруктураДопПараметров.Учет = "НУ", Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ, Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ);
										
										Проводка.СчетДт = СтрокаВозврата.СчетОтнесенияСебестоимостиНУ;
										Для Индекс = 1 По 3 Цикл
											Если ТипЗнч(СтрокаВозврата["СубконтоОтнесенияСебестоимостиНУ" + Индекс]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
												ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, Индекс, СтрокаВозврата.НоменклатурнаяГруппа);
											Иначе 
												ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, Индекс, СтрокаВозврата["СубконтоОтнесенияСебестоимостиНУ" + Индекс]);
											КонецЕсли;
										КонецЦикла;
										
										Проводка.СчетКт = ПараметрыСостоянияИсточника.Счет;
										ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
										ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
										ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
										
										ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, 
											ПараметрыСостоянияИсточника.СтруктурноеПодразделение, ПараметрыСостоянияИсточника.СтруктурноеПодразделение);
										
										Проводка.Сумма = СуммаКорректировки;
										
										КоличествоСписания = ОперацияСписания.Количество;
										
										ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, ОперацияСписания.ВидУчета);
									КонецЕсли; 					
									
								КонецЕсли;
							КонецЦикла;										
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;	
			
			Если КоличествоСписания = 0 Тогда
				Прервать;
			КонецЕсли;                                           					
			
			Если ОперацияРеализации.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если КоличествоСписания>ОперацияРеализации.Количество Тогда
				КоэффициентКорректировки = ОперацияРеализации.Количество/КоличествоСписания;
			Иначе
				КоэффициентКорректировки = 1;
			КонецЕсли;
			
			Если НЕ ТипЗнч(ОперацияРеализации.Регистратор) = Тип("ДокументСсылка.ЗакрытиеМесяца") И  СтруктураДопПараметров.Свойство("ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров") Тогда 						
				// суммы корректировок - складываются.
				// сведения о количестве и себестоимости в БУ - переписываются
				СтруктураПоиска = Новый Структура("Номенклатура,КорректируемыйДокумент",
				ПараметрыСостоянияИсточника.Субконто1, ОперацияРеализации.Регистратор);
				
				Если ТипЗнч(ПараметрыСостоянияИсточника.Субконто1) = Тип("СправочникСсылка.Номенклатура") Тогда
					СтруктураПоиска.Вставить("Номенклатура", ПараметрыСостоянияИсточника.Субконто1);
				ИначеЕсли ТипЗнч(ПараметрыСостоянияИсточника.Субконто2) = Тип("СправочникСсылка.Номенклатура") Тогда
					СтруктураПоиска.Вставить("Номенклатура", ПараметрыСостоянияИсточника.Субконто2);
				ИначеЕсли ТипЗнч(ПараметрыСостоянияИсточника.Субконто3) = Тип("СправочникСсылка.Номенклатура") Тогда
					СтруктураПоиска.Вставить("Номенклатура", ПараметрыСостоянияИсточника.Субконто3);
				КонецЕсли;
				
				Если ТипЗнч(ОперацияРеализации.КорСубконто1)  = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
					СтруктураПоиска.Вставить("ПодразделениеВыпуска",ОперацияРеализации.КорСубконто1);
				ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто2) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
					СтруктураПоиска.Вставить("ПодразделениеВыпуска", ОперацияРеализации.КорСубконто2);
				ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто3) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
					СтруктураПоиска.Вставить("ПодразделениеВыпуска", ОперацияРеализации.КорСубконто3);
				КонецЕсли;      			
				
				// Для давальческого сырья поиск выполняем с учетом НГ			
				Если ТипЗнч(ОперацияРеализации.КорСубконто1) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					СтруктураПоиска.Вставить("НоменклатурнаяГруппаВыпуска", ОперацияРеализации.КорСубконто1);
				ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто2) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					СтруктураПоиска.Вставить("НоменклатурнаяГруппаВыпуска", ОперацияРеализации.КорСубконто2);
				ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто3) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					СтруктураПоиска.Вставить("НоменклатурнаяГруппаВыпуска", ОперацияРеализации.КорСубконто3);
				КонецЕсли;
				            				
				Если ТипЗнч(ОперацияРеализации.КорСубконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда						
					СтруктураПоиска.Вставить("СтатьяЗатрат", ОперацияРеализации.КорСубконто1);  																		
				ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда						
					СтруктураПоиска.Вставить("СтатьяЗатрат", ОперацияРеализации.КорСубконто2);  
				ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда						
					СтруктураПоиска.Вставить("СтатьяЗатрат", ОперацияРеализации.КорСубконто3);  						
				КонецЕсли; 

				СписокКорректировок = СтруктураДопПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.НайтиСтроки(СтруктураПоиска);
				Если СписокКорректировок.Количество() = 0 Тогда
					
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров = СтруктураДопПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Добавить();
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.ПериодРасчета               = СтруктураДопПараметров.Период;
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Организация                 = СтруктураДопПараметров.Организация;
					
					// заполняем измерение "Номенклатура"
					Если ТипЗнч(ПараметрыСостоянияИсточника.Субконто1) = Тип("СправочникСсылка.Номенклатура") Тогда
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Номенклатура = ПараметрыСостоянияИсточника.Субконто1;
					ИначеЕсли ТипЗнч(ПараметрыСостоянияИсточника.Субконто2) = Тип("СправочникСсылка.Номенклатура") Тогда
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Номенклатура = ПараметрыСостоянияИсточника.Субконто2;
					ИначеЕсли ТипЗнч(ПараметрыСостоянияИсточника.Субконто3) = Тип("СправочникСсылка.Номенклатура") Тогда
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Номенклатура = ПараметрыСостоянияИсточника.Субконто3;
					КонецЕсли;

					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Регистратор                 = СтруктураДопПараметров.Регистратор;								
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.КорректируемыйДокумент      = ОперацияРеализации.Регистратор;								
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СтруктурноеПодразделение     = ПараметрыСостоянияИсточника.СтруктурноеПодразделение;  																		
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СчетЗатратБУ                 = ОперацияРеализации.КорСчет;  																		
					
					Если ТипЗнч(ОперацияРеализации.КорСубконто1) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.ПодразделениеВыпуска             = ОперацияРеализации.КорСубконто1;
					ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто2) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.ПодразделениеВыпуска             = ОперацияРеализации.КорСубконто2;
					ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто3) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.ПодразделениеВыпуска             = ОперацияРеализации.КорСубконто3;
					КонецЕсли; 
					
					Если ТипЗнч(ОперацияРеализации.КорСубконто1) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.НоменклатурнаяГруппаВыпуска             = ОперацияРеализации.КорСубконто1;
					ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто2) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.НоменклатурнаяГруппаВыпуска             = ОперацияРеализации.КорСубконто2;
					ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто3) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.НоменклатурнаяГруппаВыпуска             = ОперацияРеализации.КорСубконто3;
					КонецЕсли; 
					
					Если ТипЗнч(ОперацияРеализации.КорСубконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда						
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СтатьяЗатрат             = ОперацияРеализации.КорСубконто1;  																		
					ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СтатьяЗатрат             = ОперацияРеализации.КорСубконто2;
					ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СтатьяЗатрат             = ОперацияРеализации.КорСубконто3;						
					КонецЕсли; 
					
				Иначе
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров = СписокКорректировок[0];
				КонецЕсли;
				Если Учет = "Нал" Тогда
					
					Если СтруктураДопПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Колонки.Найти("ВидУчета") = Неопределено Тогда
						СтруктураДопПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Колонки.Добавить("ВидУчета");
					КонецЕсли;
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.ВидУчета = ОперацияСписания.ВидУчета;
				
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировкиВНУ = ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировкиВНУ + СуммаКорректировки;
					
				Иначе	
					// по данным БУ
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Количество 			 = ОперацияРеализации.Количество;													
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Себестоимость		 = Окр(ДолжноБытьСписано*КоэффициентКорректировки,2);	
					
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировки 	 = ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировки + Окр(СуммаКорректировки*КоэффициентКорректировки,2);
				КонецЕсли;					
			КонецЕсли;
			
			//движения в регистр "Реализация ТМЗ" формируются только для бух.учета
			Если Учет <> "Нал" Тогда
				
				ОбщаяСуммаПриРаспределении = ОбщаяСуммаПриРаспределении + Окр(СуммаКорректировки*КоэффициентКорректировки,2);
				
				Если НЕ (ТипЗнч(ОперацияРеализации.Регистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
					ИЛИ ТипЗнч(ОперацияРеализации.Регистратор) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") 
					ИЛИ ТипЗнч(ОперацияРеализации.Регистратор) = Тип("ДокументСсылка.РеализацияУслугПоПереработке")
					ИЛИ ТипЗнч(ОперацияРеализации.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"))
					ИЛИ ОбщаяСуммаПриРаспределении = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ДвижениеТМЗ 						 = РеализацияТМЗ.Добавить();
				ДвижениеТМЗ.Период        			 = СтруктураДопПараметров.Период;
				ДвижениеТМЗ.Регистратор   			 = СтруктураДопПараметров.Регистратор;
				ДвижениеТМЗ.СтруктурноеПодразделение = ПараметрыСостоянияИсточника.СтруктурноеПодразделение;
				ДвижениеТМЗ.Активность    			 = Истина;
				ДвижениеТМЗ.Организация   			 = СтруктураДопПараметров.Организация;
				ДвижениеТМЗ.ДоговорКонтрагента   	 = ОперацияРеализации.Регистратор.ДоговорКонтрагента;
				ДвижениеТМЗ.СчетУчета 				 = ПараметрыСостоянияИсточника.Счет;
				
				// заполняем измерение "Номенклатура"
				Если ТипЗнч(ПараметрыСостоянияИсточника.Субконто1) = Тип("СправочникСсылка.Номенклатура") Тогда
					ДвижениеТМЗ.Номенклатура = ПараметрыСостоянияИсточника.Субконто1;
				ИначеЕсли ТипЗнч(ПараметрыСостоянияИсточника.Субконто2) = Тип("СправочникСсылка.Номенклатура") Тогда
					ДвижениеТМЗ.Номенклатура = ПараметрыСостоянияИсточника.Субконто2;
				ИначеЕсли ТипЗнч(ПараметрыСостоянияИсточника.Субконто3) = Тип("СправочникСсылка.Номенклатура") Тогда
					ДвижениеТМЗ.Номенклатура = ПараметрыСостоянияИсточника.Субконто3;
				КонецЕсли;
				// заполняем измерение "Склад"
				Если ТипЗнч(ПараметрыСостоянияИсточника.Субконто1) = Тип("СправочникСсылка.Склады") Тогда
					ДвижениеТМЗ.Склад = ПараметрыСостоянияИсточника.Субконто1;
				ИначеЕсли ТипЗнч(ПараметрыСостоянияИсточника.Субконто2) = Тип("СправочникСсылка.Склады") Тогда
					ДвижениеТМЗ.Склад = ПараметрыСостоянияИсточника.Субконто2;
				ИначеЕсли ТипЗнч(ПараметрыСостоянияИсточника.Субконто3) = Тип("СправочникСсылка.Склады") Тогда
					ДвижениеТМЗ.Склад = ПараметрыСостоянияИсточника.Субконто3;
				КонецЕсли;
				// заполняем измерение "Партия"
				Если ЗначениеЗаполнено(ПараметрыСостоянияИсточника.Субконто1) И НЕ (ТипЗнч(ПараметрыСостоянияИсточника.Субконто1) = Тип("СправочникСсылка.Склады") ИЛИ ТипЗнч(ПараметрыСостоянияИсточника.Субконто1) = Тип("СправочникСсылка.Номенклатура")) Тогда
					ДвижениеТМЗ.Партия = ПараметрыСостоянияИсточника.Субконто1;
				ИначеЕсли ЗначениеЗаполнено(ПараметрыСостоянияИсточника.Субконто2) И НЕ (ТипЗнч(ПараметрыСостоянияИсточника.Субконто2) = Тип("СправочникСсылка.Склады") ИЛИ ТипЗнч(ПараметрыСостоянияИсточника.Субконто2) = Тип("СправочникСсылка.Номенклатура")) Тогда
					ДвижениеТМЗ.Партия = ПараметрыСостоянияИсточника.Субконто2;
				ИначеЕсли ЗначениеЗаполнено(ПараметрыСостоянияИсточника.Субконто3) И НЕ (ТипЗнч(ПараметрыСостоянияИсточника.Субконто3) = Тип("СправочникСсылка.Склады") ИЛИ ТипЗнч(ПараметрыСостоянияИсточника.Субконто3) = Тип("СправочникСсылка.Номенклатура")) Тогда
					ДвижениеТМЗ.Партия = ПараметрыСостоянияИсточника.Субконто3;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ДвижениеТМЗ.Партия) Тогда
					ДвижениеТМЗ.Партия = Неопределено;
				КонецЕсли;
				  
				ДвижениеТМЗ.Стоимость = СуммаКорректировки*КоэффициентКорректировки;
				
				Если ТипЗнч(ОперацияРеализации.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
					ДвижениеТМЗ.Стоимость = ДвижениеТМЗ.Стоимость * (-1);
				КонецЕсли;
				
			КонецЕсли;	
		КонецЦикла;
		Если Учет <> "Нал" Тогда
			//проверим остаток, получившийся после распределения
			Остаток = СуммаКорректировки - ОбщаяСуммаПриРаспределении; 				
			Если Остаток <> 0 Тогда
				Если СтруктураДопПараметров.Свойство("ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров")
					И НЕ ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров = Неопределено Тогда 
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировки = ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировки + Остаток;	
				КонецЕсли;    					
			КонецЕсли;				
		КонецЕсли;      		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьЗаписиПоВнешнемуСписанию()

Функция ПолучитьТаблицуОперацийСписания(ТаблицаТоваров, ДатаНач, ДатаКон, СтруктураДопПараметров)
	
	Учет	= СтруктураДопПараметров.Учет;
	
	Если СтруктураДопПараметров.Учет <> "Бух" Тогда    
	    ВидУчетаНУ = СтруктураДопПараметров.ВидУчетаНУ;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВложенныйЗапрос.Регистратор,
	|	ВложенныйЗапрос.Счет,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто1 ТОГДА ВложенныйЗапрос.Субконто1 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто1,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто2 ТОГДА ВложенныйЗапрос.Субконто2 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто2,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто3 ТОГДА ВложенныйЗапрос.Субконто3 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто3,
	|	ВложенныйЗапрос.КорСчет,
	|	ВложенныйЗапрос.КорСубконто1,
	|	ВложенныйЗапрос.КорСубконто2,
	|	ВложенныйЗапрос.КорСубконто3,
	|   ВложенныйЗапрос.СтруктурноеПодразделение, 
	|	ВЫБОР КОГДА ВложенныйЗапрос.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя Тогда Истина ИНАЧЕ Ложь КОНЕЦ КАК Возврат,
	|	ВЫБОР КОГДА (НЕ (ВложенныйЗапрос.КорНоменклатура) ЕСТЬ NULL) И (ВложенныйЗапрос.КорСчетНоменклатуры) ТОГДА ВложенныйЗапрос.КорНоменклатура ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ КАК Комплектация,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество ";
	Если СтруктураДопПараметров.Учет <> "Бух"  Тогда
		Запрос.Текст = Запрос.Текст + " ,ВложенныйЗапрос.ВидУчета Как ВидУчета";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаСписания.Регистратор КАК Регистратор,
	|		ТаблицаСписания.Счет 		КАК Счет,
	|		ТаблицаСписания.КорСчет 	КАК КорСчет,
	|		ТаблицаСписания.Субконто1 	КАК Субконто1,
	|		ТаблицаСписания.Субконто2 	КАК Субконто2,
	|		ТаблицаСписания.Субконто3 	КАК Субконто3,
    |		ТаблицаСписания.СтруктурноеПодразделение 	КАК СтруктурноеПодразделение,
	|		ВЫБОР КОГДА (ТаблицаСписания.КорСчет В ИЕРАРХИИ (&СписокСчетов)) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК КорСчетНоменклатуры,
	|		ТаблицаСписания.КорСубконто1 	КАК КорСубконто1,
	|		ТаблицаСписания.КорСубконто2 	КАК КорСубконто2,
	|		ТаблицаСписания.КорСубконто3 	КАК КорСубконто3,
	|		ВЫБОР КОГДА ТаблицаСписания.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.Субконто1 КОГДА ТаблицаСписания.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.Субконто2 КОГДА ТаблицаСписания.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.Субконто3 ИНАЧЕ NULL КОНЕЦ КАК Номенклатура,
	|		ВЫБОР КОГДА ТаблицаСписания.КорСубконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.КорСубконто1 КОГДА ТаблицаСписания.КорСубконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.КорСубконто2 КОГДА ТаблицаСписания.КорСубконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.КорСубконто3 ИНАЧЕ NULL КОНЕЦ КАК КорНоменклатура,";
	Если Учет = "Нал" Тогда  			
		Запрос.Текст = Запрос.Текст + "	
		|		ТаблицаСписания.ВидУчета  Как ВидУчета,";
	КонецЕсли;	
	Запрос.Текст = Запрос.Текст + "
			|		ВЫБОР 	КОГДА ТаблицаСписания.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя Тогда ЕстьNULL(ТаблицаСписания.СуммаОборотДт, 0)
			|			Иначе ЕстьNULL(ТаблицаСписания.СуммаОборотКт,0) КОНЕЦ КАК Сумма,";
		
  Запрос.Текст = Запрос.Текст + "
	|		ВЫБОР КОГДА ТаблицаСписания.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя Тогда ЕстьNULL(ТаблицаСписания.КоличествоОборотДт, 0)
	|		ИНАЧЕ ЕстьNULL(ТаблицаСписания.КоличествоОборотКт, 0) КОНЕЦ КАК Количество
	|	ИЗ
	|		РегистрБухгалтерии.Типовой.Обороты(&ДатаНач, &ДатаКон, Регистратор, Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация , , ) КАК ТаблицаСписания
	|	
	|	ГДЕ
	|НЕ (ТаблицаСписания.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену И (ТаблицаСписания.КоличествоОборотКт < 0 ИЛИ ТаблицаСписания.СуммаОборотКт < 0)) И
	|		((ТаблицаСписания.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца) ИЛИ   (ТаблицаСписания.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя) ИЛИ
	|		(ТаблицаСписания.КоличествоОборотКт <> 0 ИЛИ ТаблицаСписания.СуммаОборотКт <> 0) И (НЕ(ТаблицаСписания.Регистратор ССЫЛКА Документ.ПеремещениеТоваров) Или (ТаблицаСписания.Регистратор ССЫЛКА Документ.ПеремещениеТоваров И ТаблицаСписания.КорСубконто1 ССЫЛКА Справочник.Склады)))";
	
	Запрос.Текст = Запрос.Текст + "
	|		) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Типовой.Ссылка КАК Счет,
	|			МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 1 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто1,
	|			МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 2 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто2,
	|			МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 3 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто3
	|		ИЗ
	|			ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
	|				ПО ТиповойВидыСубконто.Ссылка = Типовой.Ссылка
	|		
	|		ГДЕ
	|			Типовой.Ссылка В ИЕРАРХИИ(&СписокСчетов)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Типовой.Ссылка) КАК СуммовойУчет
	|		ПО ВложенныйЗапрос.Счет = СуммовойУчет.Счет
	|
	|ГДЕ
	|	(НЕ(ВложенныйЗапрос.КорСчет В ИЕРАРХИИ (&СписокСчетов)) ИЛИ
	|	(ВЫБОР КОГДА (ВложенныйЗапрос.КорНоменклатура) ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ВложенныйЗапрос.Номенклатура <> ВложенныйЗапрос.КорНоменклатура КОНЕЦ))";
	
	Если ТаблицаТоваров <> Неопределено Тогда
	Запрос.Текст = Запрос.Текст + " И
		|		(ВложенныйЗапрос.Номенклатура В (&СписокТоваров))";
	ИначеЕсли   ТаблицаТоваров <> Неопределено И СтруктураДопПараметров.Учет = "Нал" Тогда
		Запрос.Текст = Запрос.Текст + " И
		|		(ВложенныйЗапрос.Номенклатура В (&СписокТоваров) И 
		|		ВложенныйЗапрос.Регистратор В (&СписокКорретируемыхДокументов))";	
	ИначеЕсли ТаблицаТоваров = Неопределено И СтруктураДопПараметров.Учет = "Нал"   Тогда
		Запрос.Текст = Запрос.Текст + " И
		|		(ВложенныйЗапрос.Регистратор В (&СписокКорректируемыхДокументов))";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Регистратор,
	|	ВложенныйЗапрос.Счет,
	|	ВложенныйЗапрос.КорСчет,
	|	ВложенныйЗапрос.КорСубконто1,
	|	ВложенныйЗапрос.КорСубконто2,
	|	ВложенныйЗапрос.КорСубконто3, 
	|   ВложенныйЗапрос.СтруктурноеПодразделение,";
	Если Учет = "Нал" Тогда 
		Запрос.Текст = Запрос.Текст + " 
	|	ВложенныйЗапрос.ВидУчета,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	ВЫБОР КОГДА (НЕ (ВложенныйЗапрос.КорНоменклатура) ЕСТЬ NULL) И (ВложенныйЗапрос.КорСчетНоменклатуры) ТОГДА ВложенныйЗапрос.КорНоменклатура ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто1 ТОГДА ВложенныйЗапрос.Субконто1 ИНАЧЕ Неопределено КОНЕЦ,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто2 ТОГДА ВложенныйЗапрос.Субконто2 ИНАЧЕ Неопределено КОНЕЦ,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто3 ТОГДА ВложенныйЗапрос.Субконто3 ИНАЧЕ Неопределено КОНЕЦ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("Организация", СтруктураДопПараметров.Организация);
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетовУчетаНоменклатуры(СтруктураДопПараметров.Учет));
	Запрос.УстановитьПараметр("СчетаРасчетов", ПолучитьСчетаРасчетов());
	Запрос.УстановитьПараметр("СписокТоваров", ТаблицаТоваров);
	Если СтруктураДопПараметров.Учет = "Нал"  Тогда 
		Запрос.УстановитьПараметр("СписокКорректируемыхДокументов", СтруктураДопПараметров.СписокКорректируемыхДокументов);
	КонецЕсли;
	
	Если СтруктураДопПараметров.Учет <> "Бух" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Типовой", "Налоговый");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация ", "Организация = &Организация И ВидУчета В Иерархии(&ВидУчетаНУ)");
		СписокВидовУчета = Новый СписокЗначений;
		СписокВидовУчета.Добавить(ВидУчетаНУ);
		СписокВидовУчета.Добавить(Справочники.ВидыУчетаНУ.ВР);
		
		// При корректировке мы должны учесть движения по прямому виду учета НУ/Пр и ВР, которая могла иметь место
		Запрос.УстановитьПараметр("ВидУчетаНУ", СписокВидовУчета);
		Если ВидУчетаНУ = Справочники.ВидыУчетаНУ.ПР Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаСписания.ВидУчета = &ВидУчетаНУ","ТаблицаСписания.ВидУчета.Родитель = &ВидУчетаНУ");
		КонецЕсли;		
	КонецЕсли;    	

	Таб = Запрос.Выполнить().Выгрузить();
	ТабСписания = Таб.Скопировать();
	ТабСДопГруппировкой = Таб.Скопировать();
	
	Если СтруктураДопПараметров.Учет = "Бух"  Тогда  		
		ТабСписания.Свернуть("Регистратор,Возврат,СтруктурноеПодразделение,Счет,Субконто1,Субконто2,Субконто3,КорСчет,КорСубконто1,КорСубконто2,КорСубконто3", "Сумма, Количество");
	Иначе
		ТабСписания.Свернуть("Регистратор,Возврат,СтруктурноеПодразделение,Счет,Субконто1,Субконто2,Субконто3,КорСчет,КорСубконто1,КорСубконто2,КорСубконто3,ВидУчета", "Сумма, Количество");
	КонецЕсли;
	
	////////////////////////
	ТабСписания.Колонки.Добавить("ВозвратПоставщику", Новый ОписаниеТипов("Булево"));
	
	Если СтруктураДопПараметров.Учет = "Бух" Тогда 
		ТабСДопГруппировкой.Свернуть("Регистратор,СтруктурноеПодразделение,Счет,Субконто1,Субконто2,Субконто3", "Сумма,Количество");
	Иначе
		ТабСДопГруппировкой.Свернуть("Регистратор,СтруктурноеПодразделение,Счет,Субконто1,Субконто2,Субконто3,ВидУчета", "Сумма,Количество");
	КонецЕсли;       
	
	МассивВозвратов = Новый Массив();
	
	Для Каждого СтрокаСписания ИЗ ТабСДопГруппировкой Цикл
		
		Если НЕ ТипЗнч(СтрокаСписания.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			Продолжить;
		КонецЕсли;  
		
		Если МассивВозвратов.Найти(СтрокаСписания.Регистратор) = Неопределено Тогда 
			МассивВозвратов.Добавить(СтрокаСписания.Регистратор);
		КонецЕсли;
		
		Если СтруктураДопПараметров.Учет = "Бух" Тогда 
			
			СтруктураПоиска = Новый Структура("Регистратор,СтруктурноеПодразделение,Счет,Субконто1,Субконто2,Субконто3",
												СтрокаСписания.Регистратор, СтрокаСписания.СтруктурноеПодразделение, СтрокаСписания.Счет,
												СтрокаСписания.Субконто1, СтрокаСписания.Субконто2, СтрокаСписания.Субконто3);
		Иначе
			
			СтруктураПоиска = Новый Структура("Регистратор,СтруктурноеПодразделение,Счет,Субконто1,Субконто2,Субконто3,ВидУчета",
												СтрокаСписания.Регистратор, СтрокаСписания.СтруктурноеПодразделение, СтрокаСписания.Счет,
												СтрокаСписания.Субконто1, СтрокаСписания.Субконто2, СтрокаСписания.Субконто3, СтрокаСписания.ВидУчета);
		КонецЕсли;
		
		// Т.к. при возврате ТМЗ могут возвращаться по той стоимости по которой поступили, 
		// а могут и по завышенной стоимости, то проводка Дт СчетОтнесенияСебестоимости - Кт СчетТМЗ 
		// будет сформирована не всегда, поэтому ориентируемся на проводку по взаиморасчетам,
		// но списывать разницу в стоимости будем напрямую на счет отнесения себестоимости из документа возврата
		СтрокиПоиска = ТабСписания.НайтиСтроки(СтруктураПоиска); 
		Для Индекс = 0 По СтрокиПоиска.Количество()-1 Цикл   			
			ТабСписания[ТабСписания.Индекс(СтрокиПоиска[Индекс])].ВозвратПоставщику = Истина;						
			Если ТабСписания[ТабСписания.Индекс(СтрокиПоиска[Индекс])].Количество <> 0 Тогда
				ТабСписания[ТабСписания.Индекс(СтрокиПоиска[Индекс])].Сумма = СтрокаСписания.Сумма;					
			Иначе
				ТабСписания.Удалить(ТабСписания.Индекс(СтрокиПоиска[Индекс]));					
			КонецЕсли;				
		КонецЦикла; 														
		
	КонецЦикла;                                                                                        
	
	Если СтруктураДопПараметров.Учет = "Бух" Тогда  		
		ТабСписания.Свернуть("ВозвратПоставщику,Возврат,СтруктурноеПодразделение,Счет,Субконто1,Субконто2,Субконто3,КорСчет,КорСубконто1,КорСубконто2,КорСубконто3", "Сумма,Количество");
	Иначе
		ТабСписания.Свернуть("ВозвратПоставщику,Возврат,СтруктурноеПодразделение,Счет,Субконто1,Субконто2,Субконто3,КорСчет,КорСубконто1,КорСубконто2,КорСубконто3,ВидУчета", "Сумма,Количество");
	КонецЕсли;  
	
	//получим таблицу Движений возвратов товаров поставщику
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", МассивВозвратов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоДт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоДт1.НоменклатурнаяГруппа
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоДт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоДт2.НоменклатурнаяГруппа
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоДт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоДт3.НоменклатурнаяГруппа
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоКт1.НоменклатурнаяГруппа
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоКт2.НоменклатурнаяГруппа
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоКт3.НоменклатурнаяГруппа
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ТиповойДвиженияССубконто.СчетДт,
	|	ТиповойДвиженияССубконто.СубконтоДт1,
	|	ТиповойДвиженияССубконто.СубконтоДт2,
	|	ТиповойДвиженияССубконто.СубконтоДт3,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоДт1) КАК ПРЕДСТАВЛЕНИЕСубконтоДт1,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоДт2) КАК ПРЕДСТАВЛЕНИЕСубконтоДт2,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоДт3) КАК ПРЕДСТАВЛЕНИЕСубконтоДт3,
	|	ТиповойДвиженияССубконто.СчетКт,
	|	ТиповойДвиженияССубконто.СубконтоКт1,
	|	ТиповойДвиженияССубконто.СубконтоКт2,
	|	ТиповойДвиженияССубконто.СубконтоКт3,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоКт1) КАК ПРЕДСТАВЛЕНИЕСубконтоКт1,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоКт2) КАК ПРЕДСТАВЛЕНИЕСубконтоКт2,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоКт3) КАК ПРЕДСТАВЛЕНИЕСубконтоКт3,
	|	ТиповойДвиженияССубконто.Организация,";
	Если СтруктураДопПараметров.Учет = "Бух" Тогда 
		Запрос.Текст = Запрос.Текст + "
		|	ВЫБОР
		|		КОГДА ТиповойДвиженияССубконто.ВалютаДт ЕСТЬ NULL 
		|			ТОГДА ТиповойДвиженияССубконто.ВалютаКт
		|		ИНАЧЕ ТиповойДвиженияССубконто.ВалютаДт
		|	КОНЕЦ КАК Валюта,
		|	СУММА(ВЫБОР
		|			КОГДА ТиповойДвиженияССубконто.ВалютнаяСуммаДт ЕСТЬ NULL 
		|				ТОГДА ТиповойДвиженияССубконто.ВалютнаяСуммаКт
		|			ИНАЧЕ ТиповойДвиженияССубконто.ВалютнаяСуммаДт
		|		КОНЕЦ) КАК ВалСумма,";
	Иначе 
		Запрос.Текст = Запрос.Текст + "
		|	ТиповойДвиженияССубконто.ВидУчетаДт КАК ВидУчетаДт,
		|	ТиповойДвиженияССубконто.ВидУчетаКт КАК ВидУчетаКт,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	СУММА(ВЫБОР
	|			КОГДА ТиповойДвиженияССубконто.КоличествоДт ЕСТЬ NULL 
	|				ТОГДА ТиповойДвиженияССубконто.КоличествоКт
	|			ИНАЧЕ ТиповойДвиженияССубконто.КоличествоДт
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма,
	|	ТиповойДвиженияССубконто.Регистратор,
	|	ДокументыВозвратовПоставщику.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ДокументыВозвратовПоставщику.СчетУчетаРасчетовПоВозвратам КАК СчетУчетаРасчетовПоВозвратам,
	|	ДокументыВозвратовПоставщику.СчетОтнесенияСебестоимостиБУ КАК СчетОтнесенияСебестоимостиБУ,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиБУ1 КАК СубконтоОтнесенияСебестоимостиБУ1,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиБУ2 КАК СубконтоОтнесенияСебестоимостиБУ2,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиБУ3 КАК СубконтоОтнесенияСебестоимостиБУ3,
	|	ДокументыВозвратовПоставщику.СчетОтнесенияСебестоимостиНУ КАК СчетОтнесенияСебестоимостиНУ,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиНУ1 КАК СубконтоОтнесенияСебестоимостиНУ1,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиНУ2 КАК СубконтоОтнесенияСебестоимостиНУ2,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиНУ3 КАК СубконтоОтнесенияСебестоимостиНУ3
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор В (&Регистратор), , ) КАК ТиповойДвиженияССубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ДокументыВозвратовПоставщику
	|       ПО ДокументыВозвратовПоставщику.Ссылка = ТиповойДвиженияССубконто.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоДт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоДт1.НоменклатурнаяГруппа
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоДт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоДт2.НоменклатурнаяГруппа
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоДт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоДт3.НоменклатурнаяГруппа
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоКт1.НоменклатурнаяГруппа
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоКт2.НоменклатурнаяГруппа
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоКт3.НоменклатурнаяГруппа
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТиповойДвиженияССубконто.СубконтоДт2,
	|	ТиповойДвиженияССубконто.СубконтоКт1,
	|	ТиповойДвиженияССубконто.СчетКт,
	|	ТиповойДвиженияССубконто.СубконтоКт2,";
	Если СтруктураДопПараметров.Учет = "Бух" Тогда 
		Запрос.Текст = Запрос.Текст + "
		|	ВЫБОР
		|		КОГДА ТиповойДвиженияССубконто.ВалютаДт ЕСТЬ NULL 
		|			ТОГДА ТиповойДвиженияССубконто.ВалютаКт
		|		ИНАЧЕ ТиповойДвиженияССубконто.ВалютаДт
		|	КОНЕЦ,";
	Иначе 
		Запрос.Текст = Запрос.Текст + "
		|	ТиповойДвиженияССубконто.ВидУчетаДт,
		|	ТиповойДвиженияССубконто.ВидУчетаКт,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	ТиповойДвиженияССубконто.СчетДт,
	|	ТиповойДвиженияССубконто.Организация,
	|	ТиповойДвиженияССубконто.СубконтоДт3,
	|	ТиповойДвиженияССубконто.СубконтоКт3,
	|	ТиповойДвиженияССубконто.СубконтоДт1,
	|	ТиповойДвиженияССубконто.Регистратор,
	|	ДокументыВозвратовПоставщику.СчетУчетаРасчетовСКонтрагентом,
	|	ДокументыВозвратовПоставщику.СчетУчетаРасчетовПоВозвратам,
	|	ДокументыВозвратовПоставщику.СчетОтнесенияСебестоимостиБУ,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиБУ1,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиБУ2,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиБУ3,
	|	ДокументыВозвратовПоставщику.СчетОтнесенияСебестоимостиНУ,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиНУ1,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиНУ2,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиНУ3";    	
	
	Если СтруктураДопПараметров.Учет = "Нал" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Типовой", "Налоговый");
	КонецЕсли;    	
	
	ТаблицаВозвратовПоставщику = Запрос.Выполнить().Выгрузить();	
	СтруктураДопПараметров.Вставить("ТаблицаВозвратовПоставщику", ТаблицаВозвратовПоставщику);
	//////////////////////

	СтруктураДопПараметров.Вставить("ТаблицаОперацийСписания", ТабСписания);
	СтруктураДопПараметров.Вставить("ТаблицаОперацийРеализации", Таб);
	
	ТабДляКомплектации = Таб.Скопировать();
	ТабДляКомплектации.Свернуть("Комплектация");
	МассивКомплектов = Таб.ВыгрузитьКолонку("Комплектация");
	
	// дублирование содержимого процедуры УдалитьНеЗаполненныеЭлементыМассива() модуля Отчеты_БК
	// т.к. данный модуль использовать не можем, в силу выполнения модуля только на клиенте
	Колво = МассивКомплектов.Количество();
	Для н=1 По Колво Цикл
		Если НЕ ЗначениеЗаполнено(МассивКомплектов[Колво-н]) Тогда
			МассивКомплектов.Удалить(Колво-н);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДопПараметров.Вставить("МассивКомплектов", МассивКомплектов);
	
	Возврат ТабСписания;
		
КонецФункции // ПолучитьТаблицуОперацийСписания()

Процедура КорректировкаСтоимости(МассивНоменклатуры, НачДата, КонДата, СтруктураДопПараметров) Экспорт

	 //В структуру дополнительных параметров добавим таблицу операции списания
	ПолучитьТаблицуОперацийСписания(МассивНоменклатуры, НачДата, КонДата, СтруктураДопПараметров);
	
	РассчитатьСписаниеПоСредней(МассивНоменклатуры, НачДата, КонДата, СтруктураДопПараметров);

	НаборЗаписей = СтруктураДопПараметров.Регистратор.Движения[?(СтруктураДопПараметров.Учет = "Бух","Типовой","Налоговый")];
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
	МассивКомплектов = СтруктураДопПараметров.МассивКомплектов;
	МассивРассчитанныхКомплектов = Новый Массив();
	
	Пока МассивКомплектов.Количество() > 0 Цикл
		
		СтруктураДопПараметров.Вставить("ТаблицаТоваров", МассивКомплектов);
		ПолучитьТаблицуОперацийСписания(МассивКомплектов, НачДата, КонДата, СтруктураДопПараметров);
	    РассчитатьСписаниеПоСредней(МассивКомплектов, НачДата, КонДата, СтруктураДопПараметров);
		НаборЗаписей = СтруктураДопПараметров.Регистратор.Движения[?(СтруктураДопПараметров.Учет = "Бух","Типовой","Налоговый")];
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Записать(Ложь);
		КонецЕсли;
		
		//Запомним обработанную номенклату
		Для Каждого Элемент Из МассивКомплектов Цикл
			МассивРассчитанныхКомплектов.Добавить(Элемент);
		КонецЦикла;
		
		МассивКомплектов.Очистить();
		
		//Заполним новый массив комплектов с проверкой на наличие такой номенклатуры
		//в составе обработанных комплектов. Это нужно что бы исключить зацикливание
		//в случаях Ном1 -> Компл1 -> Ном1
		Для Каждого Элемент Из СтруктураДопПараметров.МассивКомплектов Цикл
			Если МассивРассчитанныхКомплектов.Найти(Элемент) = Неопределено Тогда
				МассивКомплектов.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;        	
		    	
КонецПроцедуры
