// Получает договор контрагента по умолчанию с учетом условий отбора. Возвращается основной договор или единственный или пустая ссылка
//
// Параметры
//  ВладелецДоговора	–	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить
//  ОрганизацияДоговора	–	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить
//  СписокВидовДоговора	–	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> 
//							Нужные виды договора
//  СтруктураПараметров	–	<Структура>
//							Структура дополнительных параметров отбора договоров по реквизитам.
//							Элементы структуры СтруктураПараметров:
//							Ключ - имя реквизита договора, Значение - еще одна структура
//							
//							Элементы структуры, которая находится в Значение:
//							Ключ - "ЗначениеОтбора", Значение - значение реквизита договора для отбора. Обязательный элемент.
//							Ключ - "ВидСравненияОтбора", Значение - <ВидСравнения>. Необязательный элемент, по умолчанию ВидСравнения.Равно
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> – найденный счет или пустая ссылка
//
Функция УстановитьДоговорКонтрагента(ДоговорКонтрагента,ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора=неопределено, СтруктураПараметров = Неопределено) Экспорт

	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
	|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
	|			И ДоговорыКонтрагентов.Ссылка = СправочникВладелец.ОсновнойДоговорКонтрагента
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	ГоловнаяОрганизацияДоговора = ЦС_ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ОрганизацияДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ГоловнаяОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	ИмяРеквизитаКонтрагент = ЦС_ОбщийКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора();
	ИмяРеквизитаВидДоговора = ЦС_ОбщийКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаВидДоговора();
	
	ТекстФильтра = "
	|	ДоговорыКонтрагентов." + ИмяРеквизитаКонтрагент + " = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
	+?(СписокВидовДоговора<>неопределено,"
	|	И ДоговорыКонтрагентов." + ИмяРеквизитаВидДоговора + " В (&СписокВидовДоговора)","");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Для каждого Параметр Из СтруктураПараметров Цикл
			ИмяРеквизита = Параметр.Ключ;
			СтруктураОтбора = Параметр.Значение;
			
			ВидСравненияЗапроса = "";

			Если НЕ СтруктураОтбора.Свойство("ВидСравненияОтбора") Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Равно Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
				ВидСравненияЗапроса = "<>";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
				ВидСравненияЗапроса = "В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
				ВидСравненияЗапроса = "НЕ В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Больше Тогда
				ВидСравненияЗапроса = ">";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
				ВидСравненияЗапроса = ">=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Меньше Тогда
				ВидСравненияЗапроса = "<";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
				ВидСравненияЗапроса = "<=";
			Иначе // другие варианты 
				ВидСравненияЗапроса = "=";
			КонецЕсли;
			
			ТекстФильтра = ТекстФильтра + "
			|	И ДоговорыКонтрагентов." + ИмяРеквизита + " " + ВидСравненияЗапроса + " (&" + ИмяРеквизита + ")";
			Запрос.УстановитьПараметр(ИмяРеквизита, СтруктураОтбора.ЗначениеОтбора);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойДоговор = Выборка.Приоритет = 1;
		НайденОдинДоговор     = Выборка.Количество() = 1;
		
		Если НайденОсновнойДоговор ИЛИ НайденОдинДоговор Тогда
			НовыйДоговор = Выборка.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
	РеквизитыДоговора = ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента);
	
	Если (НЕ ЗначениеЗаполнено(ДоговорКонтрагента)) 
		ИЛИ (РеквизитыДоговора.Владелец <> ВладелецДоговора ИЛИ РеквизитыДоговора.Организация <> ГоловнаяОрганизацияДоговора)  Тогда	
		ДоговорКонтрагента = НовыйДоговор;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПолучитьДоговорКонтрагента()

// Функция ПолучитьРеквизитыДоговора() возвращает структуру со реквизитами договора, 
// используемыми при проведении документов по регламентированному учету. Функция используется 
// для унификации имен реквизитов справочника ДоговорыКонтрагентов при обращении к ним 
// из разных конфигураций, при этом типы самих реквизитов могут различаться в разных 
// конфигурациях.
//
// Параметры:
//  ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов.
//
// Возвращаемое значение:
//  Структура с ключами:
//		Ссылка				 - СправочникСсылка.ДоговорыКонтрагентов, ссылка на сам договор
//		ВалютаВзаиморасчетов - СправочникСсылка.Валюты, валюта взаиморасчетов по договору
//		Организация 		 - СправочникСсылка.Организации, организация, с которой заключен договор
//		Владелец 			 - СправочникСсылка.Контрагент, контрагент, с которым заключен договор
//		ВидДоговора 		 - ПеречислениеСсылка.ВидыДоговоровКонтрагентов  (БП)
//							   или ПеречислениеСсылка.ХозяйственныеОперации (УП) 
//		ТипЦен				 - СправочникСсылка.ТипыЦенНоменклатуры (БП)
//							   или НЕОПРЕДЕЛЕНО (УП)
//		УчетАгентскогоНДС	 - Булево
//		ВидАгентскогоДоговора- ПеречислениеСсылка.ВидыАгентскихДоговоров
//		РасчетыВУсловныхЕдиницах - Булево
//		
//		
Функция ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента) Экспорт

	СтруктураРеквизиты = Новый Структура();
	СтруктураРеквизиты.Вставить("Ссылка",  				Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ВалютаВзаиморасчетов",	Справочники.Валюты.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("Владелец",				Справочники.Контрагенты.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("Организация",			Справочники.Организации.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ТипЦен",				Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ВидДоговора",			Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка());

	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтруктураРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
																		"Ссылка,
																		|ВалютаВзаиморасчетов,
																		|Владелец,
																		|Организация,
																		|ТипЦен,
																		|ВидДоговора,
																		|РасчетыВУсловныхЕдиницах");
	КонецЕсли;
	
	Возврат СтруктураРеквизиты;

КонецФункции // ПолучитьРеквизитыДоговора()

Функция ГоловнаяОрганизация(Организация) Экспорт
	
	Возврат ЦС_ОбщегоНазначенияБПВызовСервераПовтИсп.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
	
КонецФункции // ГоловнаяОрганизация()

// Устанавливает банковский счет по умолчанию. Возвращает состояние установлен/не установлен
//
// Параметры
//  Счет				-	Текущее значение счета
//  ВладелецСчета  		–	<СправочникСсылка.Контрагенты (.Организации)> 
//							Контрагент (организация), счет которого нужно получить
//  Валюта  			–	<СправочникСсылка.Валюты>
//							Валюта регламентированного учета
//  СовпадениеВалюты	–	<Булево>
//                          признак совпадения нужной валюты с указанной, либо исключения ее из поиска
//							По умолчанию ищем счет с указанной валютой.
//
// Возвращаемое значение:
//   <СправочникСсылка.БанковскиеСчета> – найденный счет или пустая ссылка
//
Функция УстановитьБанковскийСчет(Счет,ВладелецСчета, Валюта, СовпадениеВалюты = Истина) Экспорт
	
	НовыйСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	БанковскиеСчета.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СправочникВладелец
	|		ПО БанковскиеСчета.Владелец = СправочникВладелец.Ссылка
	|			И БанковскиеСчета.Ссылка = СправочникВладелец.ОсновнойБанковскийСчет
	|ГДЕ
	|	БанковскиеСчета.Владелец = &ВладелецСчета
	|	И БанковскиеСчета.ПометкаУдаления = ЛОЖЬ
	|	И (БанковскиеСчета.ВалютаДенежныхСредств = &Валюта
	|				И &СовпадениеВалюты = ИСТИНА
	|			ИЛИ (НЕ БанковскиеСчета.ВалютаДенежныхСредств = &Валюта)
	|				И &СовпадениеВалюты = ЛОЖЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецСчета",   ВладелецСчета);
	Запрос.УстановитьПараметр("Валюта", 		 Валюта);
	Запрос.УстановитьПараметр("СовпадениеВалюты",СовпадениеВалюты);
	
	Если ТипЗнч(ВладелецСчета) = Тип("СправочникСсылка.Контрагенты") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.Организации", "Справочник.Контрагенты");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат    = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойСчет = Выборка.Приоритет = 1;
		НайденОдинСчет     = Выборка.Количество() = 1;
		
		Если НайденОсновнойСчет ИЛИ НайденОдинСчет Тогда
			НовыйСчет = Выборка.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
	Если Счет <> НовыйСчет 
		И ((НЕ ЗначениеЗаполнено(Счет))
			ИЛИ (ТипЗнч(Счет) = Тип("СправочникСсылка.БанковскиеСчета") 
				И Счет.Владелец <> ВладелецСчета)) Тогда
		
		Счет = НовыйСчет;
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПолучитьБанковскийСчет()

Процедура ОткрытьГарантию(Форма, цс_ГарантияФЗ) Экспорт

	
КонецПроцедуры

Функция РеквизитыДляНадписиОГарантии(Знач ОснованиеГр) Экспорт

	ГарантияФЗ = НайтиПодчиненныйГарантиюНаДоговор(ОснованиеГр);
	Если ЗначениеЗаполнено(ГарантияФЗ) Тогда
		РеквизитыГр = Новый Структура(
		"Ссылка,Представление,НомерГарантияФЗ,ДатаГарантияФЗ",
		ГарантияФЗ, Строка(ГарантияФЗ));
		ЗначенияРеквизитов = ЦС_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ГарантияФЗ,
		"Номер,Дата");
		
		//РеквизитыГр.НомерГарантияФЗ = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(
		//	ЗначенияРеквизитов.Номер, Истина, Истина);
		РеквизитыГр.НомерГарантияФЗ = ЗначенияРеквизитов.Номер;
		РеквизитыГр.ДатаГарантияФЗ  = ЗначенияРеквизитов.Дата;
	Иначе
		РеквизитыГр = Неопределено;
	КонецЕсли;
	
	Возврат РеквизитыГр;
	
КонецФункции 

// Функция производит поиск счета-фактуры выданного на реализацию или корректировочного с указанным документом-основанием
//
// Параметры:
//  ДокументОснование	- ссылка на документ, для которого надо найти счет-фактуру
//  ИсключаемыйСФ		- ссылка на счет-фактуру, исключаемый при поиске
//  ПометкаУдаления		- <Булево> - значение пометки счета-фактуры для отбора при поиске
//
// Возвращаемое значение:
//  Если нашли, то возвращаем ссылку, не нашли - Неопределено
//
Функция НайтиПодчиненныйГарантиюНаДоговор(ДокументОснование, ИсключаемыйГр = Неопределено, ПометкаУдаления = Ложь) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ПометкаУдаления",   ПометкаУдаления);
	Запрос.УстановитьПараметр("ИсключаемыйГр",     ИсключаемыйГр);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	цс_ГарантияФЗ.Ссылка КАК Гарантия
	|ИЗ
	|	Документ.цс_ГарантияФЗ КАК цс_ГарантияФЗ
	|ГДЕ
	|	цс_ГарантияФЗ.ДокументОснование = &ДокументОснование
	|	И цс_ГарантияФЗ.Ссылка.ПометкаУдаления = &ПометкаУдаления
	|	И цс_ГарантияФЗ.Ссылка <> &ИсключаемыйГр";

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Гарантия;
	КонецЕсли;

КонецФункции

   // Выполняет общие для всех документов действия связанные с пометкой на удаление
// счета-фактуры при удалении документа, являющегося основание данного счета-фактуры.
//
// Параметры:
//  ДокументОбъект  - объект документа,
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура СинхронизацияПометкиНаУдалениеУГарантии(ДокументОбъект, ВидДокумента = "цс_ГарантияФЗ", Отказ = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПометкаУдаленияСсылки = ЦС_ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокументОбъект.Ссылка, "ПометкаУдаления");

	Если ДокументОбъект.ПометкаУдаления <> ПометкаУдаленияСсылки Тогда

		// Произошло изменение пометки на удаление
		// Попытаемся найти Гарантию
		
		ГарантияФЗ = НайтиПодчиненныйГарантиюНаДоговор(ДокументОбъект.Ссылка, , НЕ ДокументОбъект.ПометкаУдаления);
			
		Если ЗначениеЗаполнено(ГарантияФЗ)И ГарантияФЗ <> ДокументОбъект.Ссылка Тогда
			Попытка
				// Есть ГарантияФЗ, нужно установить для него пометку удаления
				ГарантияФЗОбъект = ГарантияФЗ.ПолучитьОбъект();
				//Если ДокументОбъект.ПометкаУдаления Тогда
				//	// Если в счете-фактуре несколько оснований, счет-фактура не помечается на удаление,
				//	// а очищается ссылка на текущее основание
				//	СтрокиТекОснования = СчетФактураОбъект.ДокументыОснования.НайтиСтроки(
				//		Новый Структура("ДокументОснование", ДокументОбъект.Ссылка));
				//	Если СчетФактураОбъект.ДокументыОснования.Количество() > СтрокиТекОснования.Количество() Тогда
				//		Для каждого СтрокаКУдалению Из СтрокиТекОснования Цикл
				//			СчетФактураОбъект.ДокументыОснования.Удалить(СтрокаКУдалению);
				//		КонецЦикла;
				//		СчетФактураОбъект.Записать();
				//		ТекстСообщения = НСтр("ru = 'Из документа <%1> удалена ссылка на <%2>.'");
				//		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				//			ТекстСообщения, СчетФактура, ДокументОбъект);
				//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				//		Возврат;
				//	КонецЕсли;
				//КонецЕсли;

				ГарантияФЗОбъект.УстановитьПометкуУдаления(ДокументОбъект.ПометкаУдаления);
				Если ДокументОбъект.ПометкаУдаления Тогда
					ТекстСообщения = НСтр("ru = 'Документ <%1> помечен на удаление.'");
					ТекстСообщения = ЦС_ОбщегоНазначенияБПКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ГарантияФЗ);
					//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					СП = Новый СообщениеПользователю;
					СП.Текст = ТекстСообщения;
					СП.Сообщить();
				Иначе
					ТекстСообщения = НСтр("ru = 'У документа <%1> снята пометка на удаление.'");
					ТекстСообщения = ЦС_ОбщегоНазначенияБПКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ГарантияФЗ);
					//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					СП = Новый СообщениеПользователю;
					СП.Текст = ТекстСообщения;
					СП.Сообщить();
				КонецЕсли;
			Исключение
				ОписаниеОшибки = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(НСТр("ru = 'Операция не выполнена'"), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
				Отказ = Истина;
			КонецПопытки;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры 

