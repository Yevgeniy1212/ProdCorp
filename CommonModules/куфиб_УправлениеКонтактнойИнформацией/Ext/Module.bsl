//Функции модуля

// Функция определяет вид объекта контактной информации
//
// Параметры
//  ОбъектСсылка - Ссылка на объект контактной информации
// Возвращаемые значения
//  Возвращается ссылка на перечисление ВидыОбъектовКонтактнойИнформации,
//  соответствующее параметру ОбъектСсылка
Функция ВидОбъектаКИ(ОбъектСсылка) Экспорт
	Если ОбъектСсылка = Неопределено Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка();
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Пользователи") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи;
	ИначеЕсли Метаданные.Справочники.Найти("КонтактныеЛица") <> Неопределено 
				И ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица;
	ИначеЕсли Метаданные.Справочники.Найти("КонтактныеЛицаКонтрагентов") <> Неопределено
		        И ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов;
	ИначеЕсли Метаданные.Справочники.Найти("ЛичныеКонтакты") <> Неопределено
		        И ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ЛичныеКонтакты") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ЛичныеКонтакты;
	Иначе
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли; 
КонецФункции // ВидОбъектаКИ()

// Функция считывает контактную информацию из ИБ в набор записей регистра сведений.
//
// Параметры:
//  НаборЗаписей - набор записей регистра сведений
//  Ссылка - Объект, по которому необходимо заполнить КИ
//
Функция ПрочитатьКонтактнуюИнформацию(Знач НаборЗаписей, Ссылка) Экспорт
	Если ТипЗнч(НаборЗаписей) <> Тип("РегистрСведенийНаборЗаписей.КонтактнаяИнформация") Тогда
		НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	Иначе
		НаборЗаписей.Очистить();
	КонецЕсли; 
	НаборЗаписей.Отбор.Объект.Значение      = Ссылка;
	НаборЗаписей.Отбор.Объект.Использование = Истина;
	НаборЗаписей.Прочитать();
	ТаблицаНабора = НаборЗаписей.Выгрузить();
	ТаблицаНабора.Сортировать("Тип ВОЗР, Вид ВОЗР");
	НаборЗаписей.Загрузить(ТаблицаНабора);
	МассивВидов = НаборЗаписей.ВыгрузитьКолонку("Вид");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидОбъектаКонтактнойИнформации", ВидОбъектаКИ(Ссылка));
	Запрос.УстановитьПараметр("МассивВидов"                   , МассивВидов);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка     КАК Вид,
	|	ВидыКонтактнойИнформации.Ссылка.Тип КАК Тип
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ВидОбъектаКонтактнойИнформации
	|	И
	|	НЕ ВидыКонтактнойИнформации.Ссылка В (&МассивВидов)
	|";
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Сортировать("Тип ВОЗР, Вид ВОЗР");
	Для Каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
		ЗаписьРегистра			= НаборЗаписей.Добавить();
		ЗаписьРегистра.Вид		= СтрокаТаблицы.Вид;
		ЗаписьРегистра.Тип		= СтрокаТаблицы.Тип;
		ЗаписьРегистра.Объект	= Ссылка;
	КонецЦикла;
	Возврат НаборЗаписей.Выгрузить();
КонецФункции // ПрочитатьКонтактнуюИнформацию()

// Функция формирует структуру записи регистра.
//
// Параметры:
//  Запись - запись набора записей регистра сведений
//
Функция ПолучитьСтруктуруЗаписиРегистра(Запись) Экспорт
	Если ТипЗнч(Запись) = Тип("РегистрСведенийЗапись.КонтактнаяИнформация")
	 ИЛИ ТипЗнч(Запись) = Тип("РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация") Тогда
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Объект"       , Запись.Объект);
		СтруктураЗаписи.Вставить("Тип"          , Запись.Тип);
		СтруктураЗаписи.Вставить("Вид"          , Запись.Вид);
		СтруктураЗаписи.Вставить("Представление", Запись.Представление);
		СтруктураЗаписи.Вставить("Комментарий"  , Запись.Комментарий);
		Для а = 1 По 10 Цикл
			СтруктураЗаписи.Вставить("Поле" + Строка(а), Запись["Поле" + Строка(а)]);
		КонецЦикла;
		Возврат СтруктураЗаписи;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
КонецФункции // ПолучитьСтруктуруЗаписиРегистра()

//Передает значения объектов, доступных только с сервера
Функция ПолучитьОпределения(парам,парамзнач) Экспорт
	Если ВРег(парам) = ВРег("Перечисления.ТипыКонтактнойИнформации.Адрес") тогда
		Возврат Перечисления.ТипыКонтактнойИнформации.Адрес;
	КонецЕсли;
	Если ВРег(парам) = ВРег("Перечисления.ТипыКонтактнойИнформации.Количество") тогда
		Возврат Перечисления.ТипыКонтактнойИнформации.Количество();
	КонецЕсли;
	Если ВРег(парам) = ВРег("Перечисления.ТипыКонтактнойИнформации[а]") тогда
		Возврат Перечисления.ТипыКонтактнойИнформации[парамзнач];
	КонецЕсли;
	Если ВРег(парам) = ВРег("Константы.ШаблоныТелефонныхНомеров.Получить().Получить()") тогда
		Возврат Константы.ШаблоныТелефонныхНомеров.Получить().Получить();
	КонецЕсли;
	
	
КонецФункции

// Функция возвращает представление адреса собранного из полей значений Поле1 - Поле10
//
// Параметры
//  ПроизвольныйАдрес - Булево, определяет принадлежность к Республики Казахстан
//
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьПредставлениеАдреса(Запись, ПроизвольныйАдрес = Ложь) Экспорт
	ТекПредставление = "";
	Если НЕ ПроизвольныйАдрес Тогда
		Если СокрЛП(Запись.Поле1) <> "" Тогда
			ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле1) + ", " + "Республика Казахстан";
		Иначе
			ТекПредставление =  ", " + "Республика Казахстан";
		КонецЕсли;
	Иначе
		Если СокрЛП(Запись.Поле1) <> "" Тогда
			ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле1);
		КонецЕсли;
	КонецЕсли;
	Если СокрЛП(Запись.Поле2) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле2);
	КонецЕсли;

	Если СокрЛП(Запись.Поле3) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле3);
	КонецЕсли;
	Если СокрЛП(Запись.Поле4) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле4);
	КонецЕсли;
	Если СокрЛП(Запись.Поле5) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле5);
	КонецЕсли;
	Если СокрЛП(Запись.Поле6) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле6);
	КонецЕсли;
	Если СокрЛП(Запись.Поле7) <> "" Тогда
		ТекПредставление = ТекПредставление + ", дом № " + СокрЛП(Запись.Поле7);
	КонецЕсли;
	Если СокрЛП(Запись.Поле8) <> "" Тогда
		ТекПредставление = ТекПредставление + ", корпус " + СокрЛП(Запись.Поле8);
	КонецЕсли;
	Если СокрЛП(Запись.Поле9) <> "" Тогда
		ТекПредставление = ТекПредставление + ", к." + СокрЛП(Запись.Поле9);
	КонецЕсли;
	Если СтрДлина(ТекПредставление) > 2 Тогда
		ТекПредставление = Сред(ТекПредставление, 3);
	КонецЕсли;
	Возврат ТекПредставление;
КонецФункции

// Функция возвращает строку адресного элемента
//
Функция ПолучитьСтруктуруАдресногоЭлемента(КодЭлемента) Экспорт
	ТексЗапроса = "ВЫБРАТЬ
				  |	АдресныйКлассификатор.Код,
				  |	АдресныйКлассификатор.КодОбластиВКоде,
				  |	АдресныйКлассификатор.Наименование,
				  |	АдресныйКлассификатор.Сокращение,
				  |	АдресныйКлассификатор.Индекс,
				  |	АдресныйКлассификатор.ТипАдресногоЭлемента,
				  |	АдресныйКлассификатор.КодРайонаВКоде,
				  |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде				  
				  |ИЗ
				  |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
				  |
				  |ГДЕ
				  |	АдресныйКлассификатор.Код = &КодЭлемента";
	Запрос = Новый Запрос(ТексЗапроса);
	Запрос.УстановитьПараметр("КодЭлемента", КодЭлемента);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Код,Наименование,Сокращение,ТипАдресногоЭлемента,Индекс,КодОбластиВКоде,КодРайонаВКоде,КодНаселенногоПунктаВКоде",
								 Выборка.Код,
								 Выборка.Наименование,
								 Выборка.Сокращение,
								 Выборка.ТипАдресногоЭлемента,
								 Выборка.Индекс,
								 Выборка.КодОбластиВКоде,
								 Выборка.КодРайонаВКоде,
								 Выборка.КодНаселенногоПунктаВКоде);
	Иначе 
		Возврат ПолучитьПустуюСтруктуруАдреса();
	КонецЕсли;
КонецФункции // ПолучитьСтруктуруАдресногоЭлемента()

// Функция возвращает структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений
//
// Параметры:
// Нет.
//
// Возвращаемое значение:
// Струтктура - структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений
//
Функция ПолучитьПустуюСтруктуруАдреса() Экспорт
	Возврат Новый Структура("Код,Наименование,Сокращение,ТипАдресногоЭлемента,Индекс,КодОбластиВКоде,КодРайонаВКоде,КодНаселенногоПунктаВКоде", 0, "", "", 0, "", 0, 0, 0);
КонецФункции // ПолучитьПустуюСтруктуруАдреса()

// Функция по для переданной строки определят необходимость дополнить её
// сокращением
//
// Параметры
//  Название - Строка .для которой определяется необходимость дополнения 
// сокращением
//  Уровень - уровень, для которго необходимо составить список сокращений
// Возвращаемые значения
//  Возвращается Неопределено, если строку дополнять не нужно или список 
// значений с сокращениями в обратном случае
Функция ПолучитьСписокСокращений(Знач Название, Уровень) Экспорт

	Название = СокрЛП(Название);

	Если ПустаяСтрока(Название) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ОбрезатьСокращение(Название) <> Название Тогда // было что обрезать
		Возврат Неопределено; // для строки не требуется допонение сокращением
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Уровень", Уровень);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Уровень = &Уровень";

	Выборка = Запрос.Выполнить().Выбрать();

	СписокСокращений = Новый СписокЗначений();

	Пока Выборка.Следующий() Цикл
		СписокСокращений.Добавить(Выборка.Ссылка.Сокращение);
	КонецЦикла;

	Если СписокСокращений.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат СписокСокращений;
	КонецЕсли;

КонецФункции // ПолучитьСписокСокращений()

// Функция определяет является ли последнее слово в строке допустимым 
//  сокращением, и если является, то обрезает его из строки
//
// Параметры
//  СтрокаЭлемента - Строка в которой необходимо обрезать сокращение
// Возвращаемые значения
//  Обрезаную строку в случае, если есть сокращение и полученную строку в 
// обратном случае
Функция ОбрезатьСокращение(Знач СтрокаЭлемента) Экспорт

	Буфер				= СокрП(СтрокаЭлемента);
	ПозицияПослПробела	= Найти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;

	Пока СтрЧислоВхождений(Буфер, " ") > 1 Цикл
		Буфер = Лев(Буфер, ПозицияПослПробела - 1) + "_" + Сред(Буфер, ПозицияПослПробела + 1);
		ПозицияПослПробела = Найти(Буфер, " ");
	КонецЦикла;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сокращение", Сред(СтрокаЭлемента, ПозицияПослПробела + 1));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Сокращение = &Сокращение";

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Если ПустаяСтрока(СокрЛП(Лев(СтрокаЭлемента, ПозицияПослПробела - 1))) Тогда
			Возврат СтрокаЭлемента;
		Иначе
			Возврат Лев(СтрокаЭлемента, ПозицияПослПробела - 1);
		КонецЕсли;
	Иначе
		Возврат СтрокаЭлемента;
	КонецЕсли;

КонецФункции // ОбрезатьСокращение()

// Функция ищет требуемый адресный элемент по названию и типу 
// и возвращает первый найденный. В качестве дополнения может 
// быть задан элемент "родитель"
//
// Параметры:
//  НазваниеЭлемента - название адресного элемента ( с сокращением)
//  ТипЭлемента - тип искомого адресного элемента
//  ЭлементРодитель - элемент "родитель"
//
// Возвращаемое значение:
//  Найденный элемент справоника Адресный классификатор или пустая ссылка в случае неудачи
//
Функция ПолучитьАдресныйЭлемент(НазваниеЭлемента, ТипЭлемента, КодЭлементаРодителя = 0) Экспорт

	Если (СокрЛП(НазваниеЭлемента) = "") ИЛИ (ТипЭлемента = 0) Тогда
		Возврат ПолучитьПустуюСтруктуруАдреса();
	КонецЕсли;

	ТексЗапроса = "ВЫБРАТЬ
				  |	АдресныйКлассификатор.Код,
				  |	АдресныйКлассификатор.КодОбластиВКоде,
				  |	АдресныйКлассификатор.ТипАдресногоЭлемента
				  |ИЗ
				  |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
				  |
				  |ГДЕ
				  |	АдресныйКлассификатор.Наименование = &Наименование И
				  |	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента";
	
	Запрос = Новый Запрос(ТексЗапроса);
	Запрос.УстановитьПараметр("Наименование", НазваниеЭлемента);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", ТипЭлемента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если КодЭлементаРодителя > 0 Тогда // проверка на соответствие подчинению родителю
		СтруктураАдресаРодителя = ПолучитьСтруктуруАдресногоЭлемента(КодЭлементаРодителя);
		МаскаРодителя = ПолучитьМаскуПоТипу(СтруктураАдресаРодителя.ТипАдресногоЭлемента);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Если КодЭлементаРодителя > 0 Тогда // проверка на соответствие подчинению родителю
			Если Цел(КодЭлементаРодителя / МаскаРодителя) <> Цел(Выборка.Код / МаскаРодителя) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Возврат ПолучитьСтруктуруАдресногоЭлемента(Выборка.Код);
		
	КонецЦикла;
	
	Возврат ПолучитьПустуюСтруктуруАдреса();
	
КонецФункции // ПолучитьАдресныйЭлемент()
//Основные процедуры модуля

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  ТипАдресногоЭлемента -  число - тип адресного элемента.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция ПолучитьМаскуПоТипу(ТипАдресногоЭлемента) Экспорт

	Если ТипАдресногоЭлемента = 1 Тогда
		Возврат МаскаОбласти();

	ИначеЕсли ТипАдресногоЭлемента = 2 Тогда
		Возврат МаскаРайона();

	ИначеЕсли ТипАдресногоЭлемента = 3 Тогда
		Возврат МаскаГорода();
	Иначе
		Возврат МаскаСела();
	КонецЕсли;

КонецФункции // ПолучитьМаскуПоТипу()

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаОБласти() Экспорт
	Возврат 10000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаРайона() Экспорт
	Возврат 100000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаГорода() Экспорт
	Возврат 1;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаСела() Экспорт
	Возврат 1;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаНасПункта() Экспорт
	Возврат 1;
КонецФункции

// Функция приводит телефонный номер к одному из указанных в настройке шаблонов
//
// Параметры
//  НомерТЛФ – строка, номер телефона, который надо преобразовывать
//
// Возвращаемое значение:
//   Приведенный номер – строка, номер, приведенный к одному из шаблонов
//
Функция ПривестиНомерТелефонаКШаблону(НомерТЛФ) Экспорт
	
	ТолькоЦифрыНомера		= "";
	КоличествоЦифрНомера	= 0;
	
	Для а = 1 По СтрДлина(НомерТЛФ) Цикл
		
		Если СтрЧислоВхождений("1234567890",Сред(НомерТЛФ,а,1)) > 0 Тогда
			КоличествоЦифрНомера	= КоличествоЦифрНомера + 1;
			ТолькоЦифрыНомера		= ТолькоЦифрыНомера + Сред(НомерТЛФ,а,1);
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоЦифрНомера = 0 Тогда
		Возврат НомерТЛФ;
	КонецЕсли;
	
	СтруктураШаблонов = Константы.ШаблоныТелефонныхНомеров.Получить().Получить();
	
	Если ТипЗнч(СтруктураШаблонов) <> Тип("Соответствие") Тогда
		Возврат НомерТЛФ;
	КонецЕсли;
	
	ПолученныйШаблон = СтруктураШаблонов.Получить(КоличествоЦифрНомера);
	
	Если ПолученныйШаблон = Неопределено Тогда
		Возврат НомерТЛФ;
	КонецЕсли;
	
	ПриведенныйНомер	= "";
	НомерЦифры			= 0;
	
	Для а=1 По СтрДлина(ПолученныйШаблон) Цикл
		
		Если Сред(ПолученныйШаблон,а,1) = "9" Тогда
			НомерЦифры = НомерЦифры + 1;
			ПриведенныйНомер = ПриведенныйНомер + Сред(ТолькоЦифрыНомера,НомерЦифры,1);
		Иначе
			ПриведенныйНомер = ПриведенныйНомер + Сред(ПолученныйШаблон,а,1);
		КонецЕсли;
		
	КонецЦикла; 

	Возврат ПриведенныйНомер;
	
КонецФункции // ПривестиНомерТелефонаКШаблону()

// Функция проверяет строку на наличие значимых символов
//
// Параметры
//  ВыбСтрока  – строка для проверки
// Возвращаемое значение:
//   Строка - пробел или пустое значение строки
//
Функция ПроверкаПустойСтроки(ВыбСтрока, ПризнакЗапятой=Истина)
	
	Если ПустаяСтрока(ВыбСтрока) Тогда
		Возврат "";
	Иначе
		Возврат ?(ПризнакЗапятой,",","")+" ";
	КонецЕсли; 
	
КонецФункции // ПроверкаПустойСтроки()


// Обработчик события "ПередНачаломДобавления" табличного поля
// набора записей регистра сведений
//
Процедура КонтактнаяИнформацияПередНачаломДобавленияОбщее
//(Элемент, Отказ, Копирование, РедактироватьКИВДиалоге, ТабличноеПоле, НаборКонтактнойИнформации, ДоступностьОбъекта = Истина, Форма = Неопределено) Экспорт
(Элемент, Отказ, Копирование, РедактироватьКИВДиалоге, ТекущиеДанные, РедактированиеТекста, НаборКонтактнойИнформации, СоздатьОбработку,
ДоступностьОбъекта = Истина, Форма = Неопределено) Экспорт
	Если Не Копирование Тогда
		Если РедактироватьКИВДиалоге Тогда
			Отказ = Истина;
			СоздатьОбработку = Истина;
			//ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
			//ОбработкаРедактирования.ДоступностьОбъекта = ДоступностьОбъекта;
			//ОбработкаРедактирования.РедактироватьЗапись(НаборКонтактнойИнформации, , Форма);
		Иначе
			//ТабличноеПоле.Колонки.Представление.ЭлементУправления.РедактированиеТекста = Истина;
			РедактированиеТекста = Истина;
		КонецЕсли;
	Иначе
		Если РедактироватьКИВДиалоге Тогда
			Отказ = Истина;
			СоздатьОбработку = Истина;
			//ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
			//ОбработкаРедактирования.ДоступностьОбъекта = ДоступностьОбъекта;
			//ОбработкаРедактирования.РедактироватьЗапись(НаборКонтактнойИнформации,, Форма, ПолучитьСтруктуруЗаписиРегистра(ТекущиеДанные));
		Иначе
			УстановитьВозможностьРедактированияТекстаКИ(ТекущиеДанные,РедактированиеТекста);
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

// Процедура контролирует возможность редактирования текста в поле ввода представления КИ.
//
Процедура УстановитьВозможностьРедактированияТекстаКИ(ТекущиеДанные,РедактированиеТекста) Экспорт
	Если ТекущиеДанные.Тип = куфиб_УправлениеКонтактнойИнформацией.ПолучитьОпределения("Перечисления.ТипыКонтактнойИнформации.Адрес",)
	   И ЗначениеЗаполнено(ТекущиеДанные.Представление)
	   И (ПолучитьПредставлениеАдреса(ТекущиеДанные) =ТекущиеДанные.Представление) Тогда
		//Элемент.Представление.ЭлементУправления.РедактированиеТекста = Ложь;
		РедактированиеТекста = Ложь;
	Иначе
		//Элемент.Представление.ЭлементУправления.РедактированиеТекста = Истина;
		РедактированиеТекста = Истина;
	КонецЕсли; 
КонецПроцедуры // УстановитьВозможностьРедактированияТекстаКИ()

// Процедура формирует строковое представление телефона
//
Функция СформироватьПредставлениеТелефона(НаборПолей) Экспорт

	НаборПолей.Представление = НаборПолей.Поле1;
	НаборПолей.Представление = НаборПолей.Представление + ?((Не ПустаяСтрока(НаборПолей.Поле2)),(ПроверкаПустойСтроки(НаборПолей.Представление, Ложь)+"(" + НаборПолей.Поле2 + ")"),"");
	НаборПолей.Представление = НаборПолей.Представление + ?((Не ПустаяСтрока(НаборПолей.Поле3)),(ПроверкаПустойСтроки(НаборПолей.Представление, ПустаяСтрока(НаборПолей.Поле2)) + ПривестиНомерТелефонаКШаблону(НаборПолей.Поле3)),"");
	
	Если НЕ ПустаяСтрока(НаборПолей.Представление) Тогда
		НаборПолей.Представление = НаборПолей.Представление + ?((Не ПустаяСтрока(НаборПолей.Поле4)),(ПроверкаПустойСтроки(НаборПолей.Представление) + "доб. " + ПривестиНомерТелефонаКШаблону(НаборПолей.Поле4)),"");
	Иначе
		НаборПолей.Представление = ПривестиНомерТелефонаКШаблону(НаборПолей.Поле4);
	КонецЕсли; 
	Возврат НаборПолей.Представление;
КонецФункции // СформироватьПредставление()

// Процедура записывает контактную информацию в ИБ из набора записей регистра сведений.
//
// Параметры:
//  НаборЗаписей - набор записей регистра сведений
//  Ссылка - Объект, по которому необходимо записать КИ
//  Отказ - Булево
//
Процедура ЗаписатьКонтактнуюИнформацию(НаборЗаписей, Ссылка, Отказ) Экспорт

	Индекс = 0;
	Пока 1 = 1 Цикл
		
		Если Индекс > НаборЗаписей.Количество() - 1 Тогда
			Прервать;
		КонецЕсли; 
		
		Запись = НаборЗаписей[Индекс];
		
		Если НЕ ЗначениеЗаполнено(Запись.Представление) Тогда
			НаборЗаписей.Удалить(Запись);
			Продолжить;
		КонецЕсли;
		
		Запись.Объект = Ссылка;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	НаборЗаписей.Отбор.Объект.Значение      = Ссылка;
	НаборЗаписей.Отбор.Объект.Использование = Истина;
	НаборЗаписейРегистра = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.Объект.Значение      = Ссылка;
	НаборЗаписейРегистра.Отбор.Объект.Использование = Истина;

	НаборЗаписейРегистра.Загрузить(НаборЗаписей.Выгрузить());
	Попытка
		//НаборЗаписей.Записать();
		НаборЗаписейРегистра.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ("Элемент """ + СокрЛП(Ссылка) + """ не записан. Не записана контактная информация."));
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	ПрочитатьКонтактнуюИнформацию(НаборЗаписей, Ссылка)
	
КонецПроцедуры // ЗаписатьКонтактнуюИнформацию()

Процедура УстановкаПараметровОкна(Параметры, Объект, элементы) Экспорт
	Если Параметры.Свойство("Объект") Тогда
		Объект.Объект = Параметры.Объект;
		Если ЗначениеЗаполнено(Параметры.Объект) Тогда
			Если Параметры.Свойство("РедактироватьОбъект") Тогда
				Элементы.Объект.ТолькоПросмотр = Не Параметры.РедактироватьОбъект;
			КонецЕсли;
		Иначе
			Элементы.Объект.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если Параметры.Свойство("Тип") Тогда
		Объект.Тип = Параметры.Тип;
	КонецЕсли;
	Если Параметры.Свойство("Адрес") Тогда
		Объект.Адрес = Параметры.Адрес;
	КонецЕсли;
	
	Если Параметры.Свойство("Вид") Тогда
		Объект.Вид = Параметры.Вид;
	КонецЕсли;
	Если Параметры.Свойство("Комментарий") Тогда
		Объект.Комментарий = Параметры.Комментарий;
	КонецЕсли;
		Если Параметры.Свойство("Поле1") Тогда
		Объект.Поле1 = Параметры.Поле1;
	КонецЕсли;
	Если Параметры.Свойство("Поле2") Тогда
		Объект.Поле2 = Параметры.Поле2;
	КонецЕсли;
	Если Параметры.Свойство("Поле3") Тогда
		Объект.Поле3 = Параметры.Поле3;
	КонецЕсли;
	Если Параметры.Свойство("Поле4") Тогда
		Объект.Поле4 = Параметры.Поле4;
	КонецЕсли;
	Если Параметры.Свойство("Поле5") Тогда
		Объект.Поле5 = Параметры.Поле5;
	КонецЕсли;
	Если Параметры.Свойство("Поле6") Тогда
		Объект.Поле6 = Параметры.Поле6;
	КонецЕсли;
	Если Параметры.Свойство("Поле7") Тогда
		Объект.Поле7 = Параметры.Поле7;
	КонецЕсли;
	Если Параметры.Свойство("Поле8") Тогда
		Объект.Поле8 = Параметры.Поле8;
	КонецЕсли;
	Если Параметры.Свойство("Поле9") Тогда
		Объект.Поле9 = Параметры.Поле9;
	КонецЕсли;
	Если Параметры.Свойство("Поле10") Тогда
		Объект.Поле10 = Параметры.Поле10;
	КонецЕсли;
	Если Параметры.Свойство("Представление") Тогда
		Объект.Представление = Параметры.Представление;
	КонецЕсли;	

КонецПроцедуры

функция ПоискСтрокиВТаблицеКИ(ВыбранноеЗначение,НаборКонтактнойИнформации)
	ТабличнаяЧасть = НаборКонтактнойИнформации.Выгрузить();
	Для каждого строкаТЧ Из ТабличнаяЧасть Цикл
		Если ВыбранноеЗначение.Тип = СтрокаТЧ.Тип И
			 ВыбранноеЗначение.Вид = СтрокаТЧ.Вид Тогда
			 Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

Функция ЗаписьКИВРегистр(ВыбранноеЗначение, знач НаборКонтактнойИнформации) Экспорт
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		//Редактируется ли запись
		Если ЗначениеЗаполнено(ВыбранноеЗначение.СтарыйТип) Тогда
			Структура = Новый Структура;
			Структура.Вставить("Тип", ВыбранноеЗначение.СтарыйТип);
			Структура.Вставить("Вид", ВыбранноеЗначение.СтарыйВид);
			Структура.Вставить("Представление", ВыбранноеЗначение.СтарыйПредставление);
			МассивКИ = НаборКонтактнойИнформации.НайтиСтроки(Структура);
			Если МассивКИ<>Неопределено Тогда
				СтрокаКИ=МассивКИ.Получить(0);
			Иначе
				Сообщение = новый СообщениеПользователю;
				Сообщение.Текст = "Строка редактирования не обнаружена";
				Сообщение.Сообщить();
				Возврат НаборКонтактнойИнформации.Выгрузить();
			КонецЕсли;
		//проверяем дальше
		//Если запись с такими полями существует, то меняем ее
		ИначеЕсли ПоискСтрокиВТаблицеКИ(ВыбранноеЗначение,НаборКонтактнойИнформации) Тогда
			Структура = Новый Структура;
			Структура.Вставить("Тип", ВыбранноеЗначение.Тип);
			Структура.Вставить("Вид", ВыбранноеЗначение.Вид);
			МассивКИ = НаборКонтактнойИнформации.НайтиСтроки(Структура);
			Если МассивКИ<>Неопределено Тогда
				СтрокаКИ=МассивКИ.Получить(0);
			КонецЕсли;
		//Если все проверки пройдены и они ложны тогда добавляем новую запись
		ИначеЕсли ВыбранноеЗначение.НовыйЭлемент Тогда
			СтрокаКИ = НаборКонтактнойИнформации.Добавить();
		КонецЕсли;	
		СтрокаКИ.Тип = ВыбранноеЗначение.Тип;
		СтрокаКИ.Вид = ВыбранноеЗначение.Вид;
		СтрокаКИ.Объект = ВыбранноеЗначение.Объект;
		СтрокаКИ.Комментарий = ВыбранноеЗначение.Комментарий;
		СтрокаКИ.Представление = ВыбранноеЗначение.Представление;
		СтрокаКИ.Поле1 = ВыбранноеЗначение.Поле1;
		СтрокаКИ.Поле2 = ВыбранноеЗначение.Поле2;
		СтрокаКИ.Поле3 = ВыбранноеЗначение.Поле3;
		СтрокаКИ.Поле4 = ВыбранноеЗначение.Поле4;
		СтрокаКИ.Поле5 = ВыбранноеЗначение.Поле5;
		СтрокаКИ.Поле6 = ВыбранноеЗначение.Поле6;
		СтрокаКИ.Поле7 = ВыбранноеЗначение.Поле7;
		СтрокаКИ.Поле8 = ВыбранноеЗначение.Поле8;
		СтрокаКИ.Поле9 = ВыбранноеЗначение.Поле9;
		СтрокаКИ.Поле10 = ВыбранноеЗначение.Поле10;
	КонецЕсли;
	Возврат НаборКонтактнойИнформации.Выгрузить();
КонецФункции


