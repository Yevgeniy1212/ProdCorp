///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕРЕОЦЕНКИ ВАЛЮТНЫХ СЧЕТОВ
                             
// Процедура Формирует корреспонденции в бухгалтерском и налоговом
// учете по отражению курсовой разницы
Процедура СформироватьКорреспонденцииПоКурсовойРазнице(СтруктураШапкиДокумента,ПроводкиБУ, ПроводкиНУ, СчетаОтраженияКурсовойРазницы, СчетПереоценки, ОтражатьНУ, ТекСчет, ВалютаПереоценки, ВставитьПервой, РасчетныйОстатокВалРегУчета,куфиб_ТаблицаПереоценокОУ=Неопределено) Экспорт
	
	Если РасчетныйОстатокВалРегУчета = 0 тогда
		Возврат;
	КонецЕсли;	
	

	// Если структура провод для отражения курсовой разниц не получена,
	// получаем ее
	Если СчетаОтраженияКурсовойРазницы = Неопределено Тогда
		ПодразделениеДляРеглОпераций = ПолучитьПодразделениеДляРеглОпераций(СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация);		
		СчетаОтраженияКурсовойРазницы = ПолучитьСчетаОтраженияКурсовойРазницы(СтруктураШапкиДокумента.Организация, ТекСчет, ПодразделениеДляРеглОпераций);
	КонецЕсли;	
	
	Проводка = ?(ВставитьПервой, ПроводкиБУ.Вставить(0), ПроводкиБУ.Добавить());
	
	Проводка.Период      = СтруктураШапкиДокумента.Дата;
	Проводка.Организация = СтруктураШапкиДокумента.Организация;
	Проводка.Содержание  = "Переоценка валюты";
	Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредствБУ;
	
	ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
	
	Если РасчетныйОстатокВалРегУчета < 0 тогда
		
		Проводка.СчетДт = СчетаОтраженияКурсовойРазницы.СчетРасходовБУ;
		УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СчетаОтраженияКурсовойРазницы.СубконтоРасходовБУ1);
		УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СчетаОтраженияКурсовойРазницы.СубконтоРасходовБУ2);
		УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СчетаОтраженияКурсовойРазницы.СубконтоРасходовБУ3);
		Проводка.СчетКт = ТекСчет;
		
		Для Каждого ТекВидСубконто Из ТекСчет.ВидыСубконто Цикл					
			ТекЗначениеСубконто = "";						
			Если СчетПереоценки.Свойство("Субконто" + ТекВидСубконто.НомерСтроки,ТекЗначениеСубконто) тогда
				Проводка.СубконтоКт.Вставить(ТекВидСубконто.ВидСубконто,ТекЗначениеСубконто);	
			КонецЕсли;						
		КонецЦикла;
		
		Проводка.ВалютаКт = ВалютаПереоценки;
		Проводка.Сумма    = -РасчетныйОстатокВалРегУчета;
		
	Иначе
		
		Проводка.СчетКт = СчетаОтраженияКурсовойРазницы.СчетДоходовБУ;
		УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1, СчетаОтраженияКурсовойРазницы.СубконтоДоходовБУ1);
		УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2, СчетаОтраженияКурсовойРазницы.СубконтоДоходовБУ2);
		УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3, СчетаОтраженияКурсовойРазницы.СубконтоДоходовБУ3);
		
		Проводка.СчетДт = ТекСчет;
		
		Для Каждого ТекВидСубконто из ТекСчет.ВидыСубконто цикл					
			ТекЗначениеСубконто = "";						
			Если СчетПереоценки.Свойство("Субконто" + ТекВидСубконто.НомерСтроки,ТекЗначениеСубконто) тогда
				Проводка.СубконтоДт.Вставить(ТекВидСубконто.ВидСубконто,ТекЗначениеСубконто);	
			КонецЕсли;						
		КонецЦикла;
		
		Проводка.ВалютаДт = ВалютаПереоценки;
		Проводка.Сумма    = РасчетныйОстатокВалРегУчета;
		
	КонецЕсли;
	
	Если ОтражатьНУ тогда
		
		Проводка = ?(ВставитьПервой, ПроводкиНУ.Вставить(0), ПроводкиНУ.Добавить());
		
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Переоценка валюты";
		Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредствБУ;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
		Если РасчетныйОстатокВалРегУчета<0 тогда					
			Проводка.СчетДт = СчетаОтраженияКурсовойРазницы.СчетРасходовНУ;
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,1, СчетаОтраженияКурсовойРазницы.СубконтоРасходовНУ1);
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,2, СчетаОтраженияКурсовойРазницы.СубконтоРасходовНУ2);
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,3, СчетаОтраженияКурсовойРазницы.СубконтоРасходовНУ3);
			// Корсчет в НУ. Прямая трансляция
			ТекСчетНУ = ТекСчет.СчетНУ;
			Если ЗначениеЗаполнено(ТекСчетНУ) И НЕ (ТекСчетНУ.ЗапретитьИспользоватьВПроводках) Тогда
				Проводка.СчетКт = ТекСчетНУ;		
				Для Каждого ТекВидСубконто Из ТекСчет.ВидыСубконто Цикл					
					Если СчетПереоценки.Свойство("Субконто" + ТекВидСубконто.НомерСтроки,ТекЗначениеСубконто) Тогда
						УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, ТекВидСубконто.НомерСтроки,ТекЗначениеСубконто);
					КонецЕсли;		
				КонецЦикла;
			КонецЕсли;	
			
			Проводка.Сумма  = -РасчетныйОстатокВалРегУчета;
		Иначе								
			Проводка.СчетКт = СчетаОтраженияКурсовойРазницы.СчетДоходовНУ;
			УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1, СчетаОтраженияКурсовойРазницы.СубконтоДоходовНУ1);
			УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2, СчетаОтраженияКурсовойРазницы.СубконтоДоходовНУ2);
			УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3, СчетаОтраженияКурсовойРазницы.СубконтоДоходовНУ3);
			
			// Корсчет в НУ. Прямая трансляция
			ТекСчетНУ = ТекСчет.СчетНУ;
			Если ЗначениеЗаполнено(ТекСчетНУ) И НЕ (ТекСчетНУ.ЗапретитьИспользоватьВПроводках) Тогда
				Проводка.СчетДт = ТекСчетНУ;		
				Для Каждого ТекВидСубконто Из ТекСчет.ВидыСубконто Цикл					
					Если СчетПереоценки.Свойство("Субконто" + ТекВидСубконто.НомерСтроки,ТекЗначениеСубконто) тогда
						УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, ТекВидСубконто.НомерСтроки,ТекЗначениеСубконто);
					КонецЕсли;		
				КонецЦикла;
			КонецЕсли;	
			Проводка.Сумма  = РасчетныйОстатокВалРегУчета;
		КонецЕсли;
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка,  СтруктураШапкиДокумента.ВидУчетаНУ);
	КонецЕсли;
	
	// -куфиб- начало
	Если куфиб_ТаблицаПереоценокОУ<>Неопределено Тогда
		 НС 								= куфиб_ТаблицаПереоценокОУ.Добавить();
		 НС.СуммаРегл 						= РасчетныйОстатокВалРегУчета * ?(РасчетныйОстатокВалРегУчета < 0,-1,1);
		 НС.ПриходРасход 					= ?(РасчетныйОстатокВалРегУчета < 0,Перечисления.ден_ВидыДвиженийПриходРасход.Расход,Перечисления.ден_ВидыДвиженийПриходРасход.Приход);
		 Субконто 							= ?(РасчетныйОстатокВалРегУчета < 0,Проводка.СубконтоКт,Проводка.СубконтоДт);
		 НС.БанковскийСчетКасса 			= Субконто.Получить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДенежныеСредства);
		 НС.СтатьяДвиженияДенежныхСредств 	= Субконто.Получить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиДвиженияДенежныхСредств);
	КонецЕсли;
	// -куфиб- конец
	
КонецПроцедуры	

// Процедура возвращает способ переоценки, установленный для указанного счета
// В случае, если счет переоценивается и по операциям, и регламентно (стандартный способ) - возвращается значение Неопределено
// 		используется кэш СчетаСОсобымПорядкомПереоценкиБУ  - содержащий соответствия счетов и их способа переоценки
//
Функция ОсобыйПорядокПереоценкиСчета(Счет, СчетаСОсобымПорядкомПереоценкиБУ = Неопределено) Экспорт
	// инициализация КЭШа, если он не заполнен
	Если (СчетаСОсобымПорядкомПереоценкиБУ = Неопределено) ИЛИ НЕ (ТипЗнч(СчетаСОсобымПорядкомПереоценкиБУ) = Тип("Структура")) Тогда		
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетаСОсобымПорядкомПереоценкиБУ.СпособПризнанияКурсовойРазницы
		|ИЗ
		|	РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценкиБУ
		|ГДЕ
		|	СчетаСОсобымПорядкомПереоценкиБУ.Счет = &Счет";
		
		Запрос.УстановитьПараметр("Счет", Счет);
		
		Результат = Запрос.Выполнить();
		СчетаСОсобымПорядкомПереоценкиБУ = Новый Соответствие;
	
		Если Результат.Пустой() Тогда
			СчетаСОсобымПорядкомПереоценкиБУ.Вставить(Счет, Неопределено);
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			СчетаСОсобымПорядкомПереоценкиБУ.Вставить(Счет, Выборка.СпособПризнанияКурсовойРазницы);
		КонецЕсли;			
	КонецЕсли; 
	// установка типа переоценки
	Возврат СчетаСОсобымПорядкомПереоценкиБУ[Счет]	
КонецФункции // ОсобыйПорядокПереоценкиСчета


// Процедура расчитывает курсовые разницы и формирует проводки в БУ и НУ
//
// Параметры:
// Объект          		- ДокументОбъект          	- Документ для которого выполняется 
//                                             		операция.
// СчетПереоценки		- Структура  				- Содержит счет и аналитику для переоценки.
//		Счет			- ПланСчетов.Типовой	- Счет для переоценки
//		Субконто1		- ссылка
//		Субконто2		- ссылка
//		Субконто3		- ссылка
//		ТенговыйОстаток	- число					    - остаток в валюте регламентированного учета
//		ВалютныйОстаток	- число					    - остаток в валюте для переоценки
//
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// ВалютаИКурсДокумента	- Структура					- Содержит информацию о валюте, курсе и кратности документа.
//													  Получается с помощью сервисной функции СтруктурироватьВалютаКурсКратность
//		.Валюта			- СправочникСсылка.Валюты	- ссылка на валюту документа
//		.Курс			- Число
//		.Кратность		- Число
//
//  РассчитыватьОстатки - Булево					- Определяет режим расчета остатков в процедуре.
//													Ложь - не рассчитывать остатки. 
//														Тенговые и валютные остатки не рассчитываются в процедуре, 
//														а берутся из колонок структуры СчетПереоценки:
//															СчетПереоценки.ТенговыйОстаток;
//															СчетПереоценки.ВалютныйОстаток.
//													Истина - расчитывать остатки в процедуре.
//													Значение по умолчанию: Истина.
//
//  ИспользоватьКурсИзСправочника - Булево			- Определяет режим выбора курса при переоценке.
//													Ложь - курс берется из документа.
//													Истина - курс берется из справочника "Валюты".
//													Значение по умолчанию: Ложь.
//
//  ОтражатьНУ 			- Булево 					- Отражать движения в налоговом учете
//													Значение по умолчанию: Истина.
//  ВставитьПервой		- Булево					- Режим добавления проводки по курсовой разнице.
//                                                  Истина - проводка вставляется первой (ПроводкиБУ.Вставить(0))
//													Ложь   - добавляется новой проводкой
//													Значение по умолчанию - Ложь
//	СпособПереоценки	- Перечисление.СпособыРасчетаКурсовойРазницы. В случае, если процедура вызывается
//													из документа "ЗакрытиеМесяца", параметр необходимо заполнить 	
// Описание                                         
// 	Процедура проводит переоценку счетов, по переданным в структуре СчетПереоценки счете и аналитике.
//	Положительная курсовая разница относится в кредит счета 4222, отрицательная - в дебет счета 4122.
//	В качестве объекта аналитического учета по субсчетам счета 4222 используется предопределенный элемент справочника 
//	"Доходы" с наименованием "Курсовые разницы"
//	Сформированные проводки являются проводками документа, контекст которого передан в процедуру.
//	Если по переданному субконто по этому счету считаются только обороты, оно не учитывается при расчете остатков.
//	В некоторых случаях расчет тенговых и валютных остатков может выполняться в модулях документов 
//	(например регламентны документ, производящий переоценку валюты на отчетную дату).
//	Для предотвращения повторного расчета в параметр РассчитыватьОстатки следует 
//	передать значение Ложь и в структуру СчетПереоценки внести расчитаные остатки. 
//	В остальных случаях этот параметр можно не указывать.
//	Курсовые разницы, выявленные на счетах бухгалтерского учета, отражаются в налоговом учете 
//	на счетах Н730 или Н850 (в зависимости от того доход это или расход).
//
Процедура ПереоценкаСчетаРегл(	СтруктураШапкиДокумента, ПроводкиБУ, ПроводкиНУ, СчетПереоценки, ВалютаРегламентированногоУчета="", 
								ВставитьПервой=Истина, РассчитыватьОстатки=Истина, Заголовок = Неопределено,
								СчетаСОсобымПорядкомПереоценкиБУ = Неопределено, СпособПереоценки = Неопределено, Отказ, СтруктураПараметров = Неопределено,куфиб_ТаблицаПереоценокОУ=Неопределено) Экспорт

	ВалютаРегламентированногоУчета = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	Организация     			   = СтруктураШапкиДокумента.Организация;
	СтруктурноеПодразделение       = СтруктураШапкиДокумента.СтруктурноеПодразделение;
	ОтражатьНУ      			   = ?(СтруктураШапкиДокумента.Свойство("НеобходимостьОтраженияВНУ"),СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ, Ложь);
	ДатаДока        			   = СтруктураШапкиДокумента.Дата;
	
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
	КонецЕсли;  	
		
	РегламентнаяОперация = СтруктураПараметров.Свойство("РегламентнаяПереоценка")И СтруктураПараметров.РегламентнаяПереоценка;
	Если РегламентнаяОперация Тогда
		ТаблицаРасчетаПереоценкиВалюты = СтруктураПараметров.ТаблицаРасчетаПереоценкиВалюты;		
	КонецЕсли;
	
	Ссылка 			= СтруктураШапкиДокумента.Ссылка;
	Если Заголовок = Неопределено Тогда
		Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	КонецЕсли; 
	МоментДокумента = Новый МоментВремени( ДатаДока,Ссылка);
	
	ВалютаДокумента = Неопределено;
	
	СтруктураШапкиДокумента.Свойство("ВалютаДокумента",ВалютаДокумента);
	
	//Получение списка и аналитики счетов для переоценки
	ТекСчет = "";
	СпособПризнанияКурсовойРазницы = "";
	
	СчетПереоценки.Свойство("Счет", ТекСчет);
	СчетПереоценки.Свойство("СпособПризнанияКурсовойРазницы", СпособПризнанияКурсовойРазницы);

	Если НЕ ЗначениеЗаполнено(ТекСчет) Тогда
		Возврат;
	КонецЕсли;

	Если Не(ТекСчет.Валютный) Тогда
		Возврат;
	КонецЕсли;
	
	ПризнакОборотногоСубконто = "";
	СчетПереоценки.Свойство("ПризнакОборотногоСубконто", ПризнакОборотногоСубконто);
	
	ТаблицаОборотногоСубконто = "";	
	СчетПереоценки.Свойство("ТаблицаОборотногоСубконто", ТаблицаОборотногоСубконто);
	
	СуммаОперацииПогашения      =  0;
	СчетПереоценки.Свойство("Сумма", СуммаОперацииПогашения);
	
	
	Если СчетаСОсобымПорядкомПереоценкиБУ = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетаСОсобымПорядкомПереоценкиБУ.Счет
		|ИЗ
		|	РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценкиБУ";
		
		Если не СпособПереоценки = Неопределено Тогда
			
			Запрос.Текст = Запрос.Текст + "			
			|ГДЕ
			|Не СчетаСОсобымПорядкомПереоценкиБУ.СпособПризнанияКурсовойРазницы = &СпособПризнанияКурсовойРазницы";
			
			Запрос.УстановитьПараметр("СпособПризнанияКурсовойРазницы", СпособПереоценки);
		КонецЕсли;		
		
		СчетаСОсобымПорядкомПереоценкиБУ = Новый списокЗначений();
		СчетаСОсобымПорядкомПереоценкиБУ.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"));
	КонецЕсли; 
	
	Если НЕ СчетаСОсобымПорядкомПереоценкиБУ.НайтиПоЗначению(ТекСчет) = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ПодразделениеДляРеглОпераций = ПолучитьПодразделениеДляРеглОпераций(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
	// получили отказ, дальше не идем...
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	СчетаОтраженияКурсовойРазницы = ПолучитьСчетаОтраженияКурсовойРазницы(Организация, ТекСчет, ПодразделениеДляРеглОпераций);
		
	//получение остатков, переоценка валютных счетов
	ОстатокВалРегУчета = 0;
	ОстатокИнаяВал     = 0;
	
	Если РассчитыватьОстатки тогда
		Если ВалютаДокумента = ВалютаРегламентированногоУчета тогда
			ВалютаДокумента = Неопределено;
		КонецЕсли;

		СтруктураОтбора = Новый Структура("Счет",ТекСчет);
		СтруктураОтбора.Вставить("Организация"			   , Организация);
        СтруктураОтбора.Вставить("СтруктурноеПодразделение", СтруктурноеПодразделение);
	
		Реквизиты    = "Счет,Валюта";
		ВидыСубконто = Новый массив();

		Для Каждого ТекВидСубконто из ТекСчет.ВидыСубконто цикл

			Если Не(ТекВидСубконто.ТолькоОбороты) тогда
				ВидыСубконто.Добавить(ТекВидСубконто.ВидСубконто);
				Реквизиты = Реквизиты + ",Субконто" + (ВидыСубконто.ВГраница() + 1);
				ТекЗначениеФильтра = "";
				
				Если СчетПереоценки.Свойство("Субконто" + ТекВидСубконто.НомерСтроки,ТекЗначениеФильтра) тогда
					СтруктураОтбора.Вставить("Субконто" + (ВидыСубконто.ВГраница() + 1),ТекЗначениеФильтра);
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		РеестрОстатков = РегистрыБухгалтерии.Типовой.Остатки(МоментДокумента,ВидыСубконто,СтруктураОтбора,Реквизиты,"Сумма,ВалютнаяСумма");
		МассивСубконто = Новый Массив();
		Для Счетчик = 1 По 3 Цикл
			Если Не РеестрОстатков.Колонки.Найти("Субконто" + Счетчик) = Неопределено Тогда
				МассивСубконто.Добавить("Субконто" + Счетчик);				
			КонецЕсли;	
		КонецЦикла;

		Для каждого Стр из РеестрОстатков цикл
			Если НЕ ЗначениеЗаполнено(Стр.Валюта) Тогда
				СтрокаСообщения = "Обнаружены остатки по валютному счету без указания валюты. Переоценка остатка не производится."+Символы.ПС
				+ "   - счет: "+ТекСчет.код + " <"+ТекСчет.Наименование+">";
				Для НомерСубконто = 1 по ВидыСубконто.Количество() Цикл
					СтрокаСообщения=СтрокаСообщения+ Символы.ПС+ "    - субконто <"+ВидыСубконто[НомерСубконто-1].Наименование+"> : """+ Стр["Субконто"+НомерСубконто]+"""";
				КонецЦикла; 
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения,,Заголовок);
				Продолжить;
			КонецЕсли;  

			Если (НЕ ЗначениеЗаполнено(ВалютаДокумента)) ИЛИ НЕ(ВалютаДокумента = Стр.Валюта) Тогда
				ДанныеОВалютеОстатка = ОбщегоНазначения.ПолучитьКурсВалюты(Стр.Валюта,ДатаДока);
			Иначе
				ДанныеОВалютеОстатка = Новый Структура("Курс,Кратность",СтруктураШапкиДокумента.КурсДокумента,СтруктураШапкиДокумента.КратностьДокумента);
			КонецЕсли;  					
			 			
			ОстатокВалРегУчета = Стр.СуммаОстатокДт - Стр.СуммаОстатокКт;
			ОстатокИнаяВал     = Стр.ВалютнаяСуммаОстатокДт - Стр.ВалютнаяСуммаОстатокКт;
						
			Если СпособПризнанияКурсовойРазницы = Перечисления.СпособыПризнанияКурсовойРазницы.ПоОперациямПриПогашении Тогда
				
				КурсОстатка = 0;
				Если ОстатокИнаяВал <> 0 Тогда
					КурсОстатка = ОстатокВалРегУчета/ОстатокИнаяВал;					
				КонецЕсли; 				
				
				ЗнакПереоценки = 1;
				Если Стр.Счет.Вид = ВидСчета.Пассивный Тогда
					ЗнакПереоценки = -1;
				КонецЕсли;
				
				//берем только ту часть суммы, которая идет на погашение
				СуммаДляПереоценки  = ЗнакПереоценки * Мин(ЗнакПереоценки*ОстатокИнаяВал, СуммаОперацииПогашения);
				СуммаПереоценкиПоКурсуОстатка = СуммаДляПереоценки * КурсОстатка;
				РасчетныйОстатокНаДатуОперацииВалРегУчета = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДляПереоценки, Стр.Валюта, ВалютаРегламентированногоУчета,
			                                                         ДанныеОВалютеОстатка.Курс, 1,ДанныеОВалютеОстатка.Кратность,1);
				
											 
																				 
				РасчетныйОстатокВалРегУчета = Окр(РасчетныйОстатокНаДатуОперацииВалРегУчета - СуммаПереоценкиПоКурсуОстатка,2);
			Иначе
				
				РасчетныйОстатокНаДатуОперацииВалРегУчета = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ОстатокИнаяВал, Стр.Валюта, ВалютаРегламентированногоУчета,
			                                                         ДанныеОВалютеОстатка.Курс, 1,ДанныеОВалютеОстатка.Кратность,1);
																	 
				РасчетныйОстатокВалРегУчета = РасчетныйОстатокНаДатуОперацииВалРегУчета - Число(ОстатокВалРегУчета);
				
			КонецЕсли;
			
			Если ОстатокВалРегУчета = РасчетныйОстатокНаДатуОперацииВалРегУчета ИЛИ РасчетныйОстатокВалРегУчета=0 Тогда
				Продолжить;
			КонецЕсли;       							
						
			// Если у счета есть оборотное субконто
			// распределяем сумму переоценки пропорционально сумме оборотов по таким субконто
			Если Не ТаблицаОборотногоСубконто = Неопределено Тогда
				ОбщаяСуммаПоОборотнымСубконтоСчета = ТаблицаОборотногоСубконто.Итог("Сумма");				
				Если РегламентнаяОперация Тогда
					ОбщаяСуммаПоОборотнымСубконтоСчетаРегл = ТаблицаОборотногоСубконто.Итог("СуммаВРегл");				
					РаспределеннаяСуммаПоОборотнымСубконтоСчетаРегл = 0;
					РаспределеннаяСуммаПоОборотнымСубконтоСчетаВал = 0;
				КонецЕсли; 								
				РаспределеннаяСуммаПоОборотнымСубконтоСчета     = 0;
				Для Каждого СтрОборотногоСубконто Из  ТаблицаОборотногоСубконто Цикл
					СуммаПереоценкиПоСтроке = Окр(?(ОбщаяСуммаПоОборотнымСубконтоСчета = 0, 0,СтрОборотногоСубконто.Сумма/ОбщаяСуммаПоОборотнымСубконтоСчета * РасчетныйОстатокВалРегУчета),2);
					РаспределеннаяСуммаПоОборотнымСубконтоСчета = РаспределеннаяСуммаПоОборотнымСубконтоСчета  + СуммаПереоценкиПоСтроке;
					СчетПереоценки.Вставить("Субконто1",СтрОборотногоСубконто.Субконто1);				
					СчетПереоценки.Вставить("Субконто2",СтрОборотногоСубконто.Субконто2);				
					СчетПереоценки.Вставить("Субконто3",СтрОборотногоСубконто.Субконто3);				
					СформироватьКорреспонденцииПоКурсовойРазнице(СтруктураШапкиДокумента,ПроводкиБУ, ПроводкиНУ, СчетаОтраженияКурсовойРазницы, СчетПереоценки, ОтражатьНУ, ТекСчет, Стр.Валюта, ВставитьПервой, СуммаПереоценкиПоСтроке,куфиб_ТаблицаПереоценокОУ);
					Если РегламентнаяОперация Тогда
						ОстатокРеглУчета = Окр(?(ОбщаяСуммаПоОборотнымСубконтоСчета = 0, 0,СтрОборотногоСубконто.Сумма/ОбщаяСуммаПоОборотнымСубконтоСчета * ОстатокВалРегУчета),2);
						РаспределеннаяСуммаПоОборотнымСубконтоСчетаРегл = РаспределеннаяСуммаПоОборотнымСубконтоСчетаРегл  + ОстатокРеглУчета;
						
						ОстатокВалУчета = Окр(?(ОбщаяСуммаПоОборотнымСубконтоСчета = 0, 0,СтрОборотногоСубконто.Сумма/ОбщаяСуммаПоОборотнымСубконтоСчета * ОстатокИнаяВал),2);
						РаспределеннаяСуммаПоОборотнымСубконтоСчетаВал = РаспределеннаяСуммаПоОборотнымСубконтоСчетаВал + ОстатокВалУчета;
						СформиратьТаблицуДляДанныхОПереоценки(СтруктураШапкиДокумента,ТаблицаРасчетаПереоценкиВалюты,ТекСчет,СчетаОтраженияКурсовойРазницы,СчетПереоценки,ОтражатьНУ,Стр.Валюта,ДанныеОВалютеОстатка.Курс,ОстатокРеглУчета,ОстатокВалУчета, СуммаПереоценкиПоСтроке); 						
					КонецЕсли;				
				КонецЦикла;	
				// Обшибки Округления
				ПогрешностьОкругления = Окр(РасчетныйОстатокВалРегУчета - РаспределеннаяСуммаПоОборотнымСубконтоСчета,2);
				Если Не ПогрешностьОкругления = 0 Тогда
					СформироватьКорреспонденцииПоКурсовойРазнице(СтруктураШапкиДокумента,ПроводкиБУ, ПроводкиНУ, СчетаОтраженияКурсовойРазницы, СчетПереоценки, ОтражатьНУ, ТекСчет, Стр.Валюта, ВставитьПервой, ПогрешностьОкругления,куфиб_ТаблицаПереоценокОУ);
					
					Если РегламентнаяОперация Тогда
						ПогрешностьОкругленияРегл = Окр(ОстатокВалРегУчета - РаспределеннаяСуммаПоОборотнымСубконтоСчетаРегл,2);
						ПогрешностьОкругленияВал  = Окр(ОстатокИнаяВал - РаспределеннаяСуммаПоОборотнымСубконтоСчетаВал,2);
						СформиратьТаблицуДляДанныхОПереоценки(СтруктураШапкиДокумента,ТаблицаРасчетаПереоценкиВалюты,ТекСчет,СчетаОтраженияКурсовойРазницы,СчетПереоценки,ОтражатьНУ,Стр.Валюта,ДанныеОВалютеОстатка.Курс,ПогрешностьОкругленияРегл,ПогрешностьОкругленияВал, ПогрешностьОкругления); 						
					КонецЕсли; 
				КонецЕсли;
				
			Иначе
				// Оборотного субонто нет, формируем одну проводку
				Для Счетчик = 1 По МассивСубконто.Количество() Цикл
					СчетПереоценки.Вставить("Субконто"+ Счетчик,Стр["Субконто"+ Счетчик]);				
				КонецЦикла;				
				СформироватьКорреспонденцииПоКурсовойРазнице(СтруктураШапкиДокумента,ПроводкиБУ, ПроводкиНУ, СчетаОтраженияКурсовойРазницы, СчетПереоценки, ОтражатьНУ, ТекСчет, Стр.Валюта, ВставитьПервой, РасчетныйОстатокВалРегУчета,куфиб_ТаблицаПереоценокОУ);
				Если РегламентнаяОперация Тогда
					СформиратьТаблицуДляДанныхОПереоценки(СтруктураШапкиДокумента,ТаблицаРасчетаПереоценкиВалюты,ТекСчет,СчетаОтраженияКурсовойРазницы,СчетПереоценки,ОтражатьНУ,Стр.Валюта,ДанныеОВалютеОстатка.Курс,ОстатокВалРегУчета,ОстатокИнаяВал, РасчетныйОстатокВалРегУчета); 
				КонецЕсли;				
			КонецЕсли;	
			
		КонецЦикла;
		
		Возврат;

	Иначе

		СчетПереоценки.Свойство("ТенговыйОстаток", ОстатокВалРегУчета);
		СчетПереоценки.Свойство("ВалютныйОстаток", ОстатокИнаяВал);

	КонецЕсли;
	
	// переоценка без расчета остатков
	ДанныеОВалютеОстатка = Неопределено; 	
	
	//курсы могут быть заданы в документе "Закрытия месяца"
	Если Не СтруктураПараметров.Свойство("ДанныеОВалютеОстатка",ДанныеОВалютеОстатка) Тогда				
		ДанныеОВалютеОстатка = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента,ДатаДока);		
	КонецЕсли;
	
	РасчетныйОстатокВалРегУчета = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ОстатокИнаяВал, ВалютаДокумента, ВалютаРегламентированногоУчета,
							ДанныеОВалютеОстатка.Курс, 1,ДанныеОВалютеОстатка.Кратность, 1);
	
	Если ОстатокВалРегУчета = РасчетныйОстатокВалРегУчета тогда
		Возврат;
	КонецЕсли;
	 
	РасчетныйОстатокВалРегУчета = РасчетныйОстатокВалРегУчета - Число(ОстатокВалРегУчета);
	ФильтрСубконто = Неопределено;
	
	// Если у счета есть оборотное субконто
	// распределяем сумму переоценки пропорционально сумме оборотов по таким субконто
	Если (Не ТаблицаОборотногоСубконто = Неопределено) и (ТаблицаОборотногоСубконто.Количество()>0) Тогда
		ОбщаяСуммаПоОборотнымСубконтоСчета = ТаблицаОборотногоСубконто.Итог("Сумма");				
		РаспределеннаяСуммаПоОборотнымСубконтоСчета = 0;
		Если РегламентнаяОперация Тогда
			РаспределеннаяСуммаПоОборотнымСубконтоСчетаРегл = 0;
			РаспределеннаяСуммаПоОборотнымСубконтоСчетаВал = 0;
		КонецЕсли; 			
		Для Каждого СтрОборотногоСубконто Из  ТаблицаОборотногоСубконто Цикл
			СуммаПереоценкиПоСтроке = Окр(?(ОбщаяСуммаПоОборотнымСубконтоСчета = 0, 0,СтрОборотногоСубконто.Сумма/ОбщаяСуммаПоОборотнымСубконтоСчета * РасчетныйОстатокВалРегУчета),2);
			РаспределеннаяСуммаПоОборотнымСубконтоСчета = РаспределеннаяСуммаПоОборотнымСубконтоСчета  + СуммаПереоценкиПоСтроке;
			СчетПереоценки.Вставить("Субконто1",СтрОборотногоСубконто.Субконто1);				
			СчетПереоценки.Вставить("Субконто2",СтрОборотногоСубконто.Субконто2);				
			СчетПереоценки.Вставить("Субконто3",СтрОборотногоСубконто.Субконто3);				
			СформироватьКорреспонденцииПоКурсовойРазнице(СтруктураШапкиДокумента,ПроводкиБУ, ПроводкиНУ, СчетаОтраженияКурсовойРазницы, СчетПереоценки, ОтражатьНУ, ТекСчет, ВалютаДокумента, ВставитьПервой, СуммаПереоценкиПоСтроке,куфиб_ТаблицаПереоценокОУ);
			Если РегламентнаяОперация Тогда
				ОстатокРеглУчета = Окр(?(ОбщаяСуммаПоОборотнымСубконтоСчета = 0, 0,СтрОборотногоСубконто.Сумма/ОбщаяСуммаПоОборотнымСубконтоСчета * ОстатокВалРегУчета),2);
				РаспределеннаяСуммаПоОборотнымСубконтоСчетаРегл = РаспределеннаяСуммаПоОборотнымСубконтоСчетаРегл  + ОстатокРеглУчета;
				
				ОстатокВалУчета = Окр(?(ОбщаяСуммаПоОборотнымСубконтоСчета = 0, 0,СтрОборотногоСубконто.Сумма/ОбщаяСуммаПоОборотнымСубконтоСчета * ОстатокИнаяВал),2);
				РаспределеннаяСуммаПоОборотнымСубконтоСчетаВал = РаспределеннаяСуммаПоОборотнымСубконтоСчетаВал + ОстатокВалУчета;
				СформиратьТаблицуДляДанныхОПереоценки(СтруктураШапкиДокумента,ТаблицаРасчетаПереоценкиВалюты,ТекСчет,СчетаОтраженияКурсовойРазницы,СчетПереоценки,ОтражатьНУ,ВалютаДокумента,ДанныеОВалютеОстатка.Курс,ОстатокРеглУчета,ОстатокВалУчета, СуммаПереоценкиПоСтроке); 						
			КонецЕсли;

		КонецЦикла;	
		// Обшибки Округления
		ПогрешностьОкругления = Окр(РасчетныйОстатокВалРегУчета - РаспределеннаяСуммаПоОборотнымСубконтоСчета,2);
		Если Не ПогрешностьОкругления = 0 Тогда
			СформироватьКорреспонденцииПоКурсовойРазнице(СтруктураШапкиДокумента,ПроводкиБУ, ПроводкиНУ, СчетаОтраженияКурсовойРазницы, СчетПереоценки, ОтражатьНУ, ТекСчет, ВалютаДокумента, ВставитьПервой, ПогрешностьОкругления,куфиб_ТаблицаПереоценокОУ);
			Если РегламентнаяОперация Тогда
				ПогрешностьОкругленияРегл = Окр(ОстатокВалРегУчета - РаспределеннаяСуммаПоОборотнымСубконтоСчетаРегл,2);
				ПогрешностьОкругленияВал  = Окр(ОстатокИнаяВал - РаспределеннаяСуммаПоОборотнымСубконтоСчетаВал,2);
				СформиратьТаблицуДляДанныхОПереоценки(СтруктураШапкиДокумента,ТаблицаРасчетаПереоценкиВалюты,ТекСчет,СчетаОтраженияКурсовойРазницы,СчетПереоценки,ОтражатьНУ,ВалютаДокумента,ДанныеОВалютеОстатка.Курс,ПогрешностьОкругленияРегл,ПогрешностьОкругленияВал, ПогрешностьОкругления); 						
			КонецЕсли; 

		КонецЕсли;
	Иначе
		СформироватьКорреспонденцииПоКурсовойРазнице(СтруктураШапкиДокумента,ПроводкиБУ, ПроводкиНУ, СчетаОтраженияКурсовойРазницы, СчетПереоценки, ОтражатьНУ, ТекСчет, ВалютаДокумента, ВставитьПервой, РасчетныйОстатокВалРегУчета,куфиб_ТаблицаПереоценокОУ);
		Если РегламентнаяОперация Тогда
			СформиратьТаблицуДляДанныхОПереоценки(СтруктураШапкиДокумента,ТаблицаРасчетаПереоценкиВалюты,ТекСчет,СчетаОтраженияКурсовойРазницы,СчетПереоценки,ОтражатьНУ,СтруктураШапкиДокумента.ВалютаДокумента,ДанныеОВалютеОстатка.Курс,ОстатокВалРегУчета,ОстатокИнаяВал, РасчетныйОстатокВалРегУчета); 						
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПереоценкаСчетаРегл()

Процедура СформиратьТаблицуДляДанныхОПереоценки(СтруктураШапкиДокумента,ТаблицаРасчетаПереоценкиВалюты,Счет,СчетаОтраженияКурсовойРазницы,СтруктураПереоценки,ОтражатьНУ,Валюта,КурсПереоценки,Остаток,ВалютныйОстаток, СуммаПереоценки)	

	Если СуммаПереоценки = 0 тогда
		Возврат;
	КонецЕсли;	
	
	Если СчетаОтраженияКурсовойРазницы = Неопределено Тогда
		ПодразделениеДляРеглОпераций = ПолучитьПодразделениеДляРеглОпераций(СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация);		
		СчетаОтраженияКурсовойРазницы = ПолучитьСчетаОтраженияКурсовойРазницы(СтруктураШапкиДокумента.Организация, Счет, ПодразделениеДляРеглОпераций);
	КонецЕсли;	
	
	ВидУчета = Справочники.ВидыУчетаНУ.НУ;	
	
	Если СуммаПереоценки < 0 тогда
		СчетНУ = СчетаОтраженияКурсовойРазницы.СчетРасходовНУ;
		
		СтатьяЗатратВПроводке = СчетНУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
		Если Не  СтатьяЗатратВПроводке = Неопределено Тогда	
			Индекс = 0;
			Пока Индекс < 3 Цикл
				Индекс = Индекс + 1;
				ИмяСубконто = "СубконтоРасходовНУ" + Индекс; 				
				Если ТипЗнч(СчетаОтраженияКурсовойРазницы[ИмяСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
					ВидУчета = ПроцедурыНалоговогоУчета.ВидУчетаНУПоСтатьеЗатрат(СчетаОтраженияКурсовойРазницы[ИмяСубконто]);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 		
		
	Иначе								
		СчетНУ = СчетаОтраженияКурсовойРазницы.СчетДоходовНУ;
	КонецЕсли;
	
	
	СтрокаРасчетаПереоценкиВалюты = ТаблицаРасчетаПереоценкиВалюты.Добавить();  			
	СтрокаРасчетаПереоценкиВалюты.Счет           = Счет;                        
	СтрокаРасчетаПереоценкиВалюты.Валюта         = Валюта;
	СтрокаРасчетаПереоценкиВалюты.Субконто1      = СтруктураПереоценки.Субконто1;
	СтрокаРасчетаПереоценкиВалюты.Субконто2      = СтруктураПереоценки.Субконто2;
	СтрокаРасчетаПереоценкиВалюты.Субконто3      = СтруктураПереоценки.Субконто3;

	СтрокаРасчетаПереоценкиВалюты.СуммаВВалюте   = ВалютныйОстаток;
	СтрокаРасчетаПереоценкиВалюты.СуммаВТенге    = Остаток;
	СтрокаРасчетаПереоценкиВалюты.Сумма          = СуммаПереоценки;
	СтрокаРасчетаПереоценкиВалюты.КурсПереоценки = КурсПереоценки;	
	Если ОтражатьНУ Тогда                                         				
		Если ВидУчета = Справочники.ВидыУчетаНУ.НУ Тогда
			СтрокаРасчетаПереоценкиВалюты.СуммаНУ        = СуммаПереоценки;
			СтрокаРасчетаПереоценкиВалюты.СуммаПР        = 0;
			СтрокаРасчетаПереоценкиВалюты.СуммаВТенгеНУ  = Остаток;
			СтрокаРасчетаПереоценкиВалюты.СуммаВТенгеПР  = 0;           
		Иначе
			СтрокаРасчетаПереоценкиВалюты.СуммаНУ        = 0;
			СтрокаРасчетаПереоценкиВалюты.СуммаПР        = СуммаПереоценки;
			СтрокаРасчетаПереоценкиВалюты.СуммаВТенгеНУ  = 0;
		    СтрокаРасчетаПереоценкиВалюты.СуммаВТенгеПР  = Остаток;      
		Конецесли; 			
	КонецЕсли;	
	
КонецПроцедуры

// Формирует по проводкам документа список валютных счетов для переоценки, запускает переоценку.
//
// Параметры
// 	Объект          		- ДокументОбъект        	- Документ для которого выполняется процедура.
// 	ВалютаИКурсДокумента	- Структура					- Содержит информацию о валюте, курсе и кратности документа.
//													  	 	Получается с помощью сервисной функции СтруктурироватьВалютаКурсКратность
//		Валюта				- СправочникСсылка.Валюты	- ссылка на валюту документа
//		Курс				- Число
//		Кратность			- Число
//
//  ИспользоватьКурсИзСправочника - Булево				- Для передачи в процедуру переоценки,
//													 	 определяет режим выбора курса при переоценке.
//															Ложь - курс берется из документа.
//															Истина - курс берется из справочника "Валюты".
//															Значение по умолчанию: Ложь.
//
//  ОтражатьНУ 			- Булево						- Отражать движения в налоговом учете
//														 	Значение по умолчанию: Истина.
//
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Функция ПереоценкаСчетовДокументаРегл(	ДокументОбъект, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета="", 
										Отказ) экспорт

	ВалютаРегламентированногоУчета = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	ПроводкиБУ      = ДокументОбъект.Движения.Типовой;
	ПроводкиНУ = Неопределено;

	Если СтруктураШапкиДокумента.Свойство("НеобходимостьОтраженияВНУ") и СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ тогда
		ПроводкиНУ = ДокументОбъект.Движения.Налоговый;

		Если ПроводкиНУ = Неопределено тогда
			Отказ = Истина;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;    
	
	ВалютаДокумента = СтруктураШапкиДокумента.ВалютаДокумента;

	Если ПроводкиБУ.Количество() = 0 тогда // (ВалютаДокумента = ВалютаРегламентированногоУчета) ИЛИ
		Возврат Истина;
	КонецЕсли;


	//Подготовка таблицы значений для формирования списка счетов для переоценки
	ТаблицаСчетов = Новый ТаблицаЗначений;
	ТаблицаСчетов.Колонки.Добавить("Счет");
	ТаблицаСчетов.Колонки.Добавить("Субконто1");
	ТаблицаСчетов.Колонки.Добавить("Субконто2");
	ТаблицаСчетов.Колонки.Добавить("Субконто3");
	ТаблицаСчетов.Колонки.Добавить("ИспользованиеС1", Новый ОписаниеТипов("Булево"));
	ТаблицаСчетов.Колонки.Добавить("ИспользованиеС2", Новый ОписаниеТипов("Булево"));
	ТаблицаСчетов.Колонки.Добавить("ИспользованиеС3", Новый ОписаниеТипов("Булево"));
	ТаблицаСчетов.Колонки.Добавить("ПризнакОборотногоСубконто", Новый ОписаниеТипов("Булево"));
	ТаблицаСчетов.Колонки.Добавить("Сумма");
	ТаблицаСчетов.Колонки.Добавить("СпособПризнанияКурсовойРазницы");
	
	
	ТаблицаОборотныхСубконтоСчета = Новый ТаблицаЗначений;
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Счет");	
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Субконто1");
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Субконто2");
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Субконто3");
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Сумма");
	
	ТаблицаОборотногоСубконто = ТаблицаОборотныхСубконтоСчета.Скопировать();
	
	Запрос = Новый Запрос;	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаСОсобымПорядкомПереоценкиБУ.Счет,
	|	СчетаСОсобымПорядкомПереоценкиБУ.СпособПризнанияКурсовойРазницы
	|ПОМЕСТИТЬ ВТ_ВсеСчетаПереоценки
	|ИЗ
	|	РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценкиБУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаСОсобымПорядкомПереоценкиБУ.Счет
	|ИЗ
	|	ВТ_ВсеСчетаПереоценки КАК СчетаСОсобымПорядкомПереоценкиБУ
	|ГДЕ
	|	НЕ СчетаСОсобымПорядкомПереоценкиБУ.СпособПризнанияКурсовойРазницы В (&СпособПризнанияКурсовойРазницы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаСОсобымПорядкомПереоценкиБУ.Счет,
	|	СчетаСОсобымПорядкомПереоценкиБУ.СпособПризнанияКурсовойРазницы
	|ИЗ
	|	ВТ_ВсеСчетаПереоценки КАК СчетаСОсобымПорядкомПереоценкиБУ
	|ГДЕ
	|	СчетаСОсобымПорядкомПереоценкиБУ.СпособПризнанияКурсовойРазницы = ЗНАЧЕНИЕ(Перечисление.СпособыПризнанияКурсовойРазницы.ПоОперациямПриПогашении)";
	
	СпособыПризнанияКурсовойРазницы = Новый Массив;
	СпособыПризнанияКурсовойРазницы.Добавить(Перечисления.СпособыПризнанияКурсовойРазницы.ПоОперациям);
	СпособыПризнанияКурсовойРазницы.Добавить(Перечисления.СпособыПризнанияКурсовойРазницы.ПоОперациямПриПогашении);
	
	Запрос.УстановитьПараметр("СпособПризнанияКурсовойРазницы", СпособыПризнанияКурсовойРазницы);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаСчетаСОсобымПорядкомПереоценкиБУ = Результат[1].Выгрузить();
	ТаблицаСчетовПереоценки = Результат[2].Выгрузить();

	
    СчетаСОсобымПорядкомПереоценкиБУ = Новый СписокЗначений();
	СчетаСОсобымПорядкомПереоценкиБУ.ЗагрузитьЗначения(ТаблицаСчетаСОсобымПорядкомПереоценкиБУ.ВыгрузитьКолонку("Счет"));
	
    	
	//Формирование списка счетов для переоценки
	Для каждого ТекПроводка из ПроводкиБУ Цикл

		Если ТекПроводка.СчетКт.Валютный тогда	
			
			Если СчетаСОсобымПорядкомПереоценкиБУ.НайтиПоЗначению(ТекПроводка.СчетКт)= Неопределено Тогда
				
				СчетПереоценки = ТаблицаСчетовПереоценки.Найти(ТекПроводка.СчетКт,"Счет"); 
				
				//если задолженность идет на увеличение, то не нужно переоценивать когда способ переоценки = "По операция (при погашении)
				Если СчетПереоценки <> Неопределено 
					И ТекПроводка.СчетКт.Вид = ВидСчета.Пассивный Тогда 
					Продолжить;
				КонецЕсли;			
				
				ТекСчет = ТекПроводка.СчетКт;
				ТекЗаписьТаблицы      = ТаблицаСчетов.Добавить();
				ТекЗаписьТаблицы.Счет = ТекСчет;          				
				ТекЗаписьТаблицы.Сумма = ТекПроводка.ВалютнаяСуммаКт;
				ТекЗаписьТаблицы.ПризнакОборотногоСубконто = Ложь;			
				ТекЗаписьТаблицы.СпособПризнанияКурсовойРазницы = ?(СчетПереоценки = Неопределено, "", СчетПереоценки.СпособПризнанияКурсовойРазницы);			
				
				Для Каждого ТекСубконто из ТекСчет.ВидыСубконто цикл
					Если ТекСубконто.ТолькоОбороты Тогда						
						ТекЗаписьТаблицы.ПризнакОборотногоСубконто = Истина;
					Иначе
						ТекЗаписьТаблицы.Установить(ТекСубконто.НомерСтроки, ТекПроводка.СубконтоКт.Получить(ТекСубконто.ВидСубконто));
						ТекЗаписьТаблицы.Установить(ТекСубконто.НомерСтроки + 3,Истина);
					КонецЕсли;	
				КонецЦикла;
				// оборотное субконто. Помещаем в отдельную таблицу, чтобы выполнять распределение суммы переоценки по оборотным субконто
				Если ТекЗаписьТаблицы.ПризнакОборотногоСубконто Тогда
					ТекЗаписьТаблицыОборотногоСубконто = ТаблицаОборотныхСубконтоСчета.Добавить();
					ТекЗаписьТаблицыОборотногоСубконто.Счет = ТекСчет;
					ТекЗаписьТаблицыОборотногоСубконто.Сумма 	 = ТекПроводка.ВалютнаяСуммаКт;					
					// Общая сумма по счету
					ТекЗаписьТаблицы.Сумма 	 					 = ТекПроводка.ВалютнаяСуммаКт;					
					Для Каждого ТекСубконто из ТекСчет.ВидыСубконто Цикл
						ТекЗаписьТаблицыОборотногоСубконто.Установить(ТекСубконто.НомерСтроки, ТекПроводка.СубконтоКт.Получить(ТекСубконто.ВидСубконто));					
					КонецЦикла;															
				КонецЕсли;	                                                             
			КонецЕсли;
			
		КонецЕсли;
	
		Если ТекПроводка.СчетДт.Валютный Тогда
			
			Если СчетаСОсобымПорядкомПереоценкиБУ.НайтиПоЗначению(ТекПроводка.СчетДт)= Неопределено Тогда
				
				СчетПереоценки = ТаблицаСчетовПереоценки.Найти(ТекПроводка.СчетДт,"Счет"); 
				
				//если задолженность идет на увеличение, то не нужно переоценивать когда способ переоценки = "По операция (при погашении)
				Если СчетПереоценки <> Неопределено  
					И ТекПроводка.СчетДт.Вид = ВидСчета.Активный Тогда 
					Продолжить;
				КонецЕсли;			
				
				ТекСчет = ТекПроводка.СчетДт;
				ТекЗаписьТаблицы      = ТаблицаСчетов.Добавить();
				ТекЗаписьТаблицы.Счет = ТекСчет;
				ТекЗаписьТаблицы.Сумма = ТекПроводка.ВалютнаяСуммаДт;
				ТекЗаписьТаблицы.ПризнакОборотногоСубконто = Ложь;
				ТекЗаписьТаблицы.СпособПризнанияКурсовойРазницы = ?(СчетПереоценки = Неопределено, "", СчетПереоценки.СпособПризнанияКурсовойРазницы);			
				
				Для Каждого ТекСубконто из ТекСчет.ВидыСубконто Цикл
					Если ТекСубконто.ТолькоОбороты Тогда						
						ТекЗаписьТаблицы.ПризнакОборотногоСубконто = Истина;
					Иначе
						ТекЗаписьТаблицы.Установить(ТекСубконто.НомерСтроки, ТекПроводка.СубконтоДт.Получить(ТекСубконто.ВидСубконто));
						ТекЗаписьТаблицы.Установить(ТекСубконто.НомерСтроки + 3,Истина);	
					КонецЕсли;	
				КонецЦикла;
				
				// оборотное субконто. Помещаем в отдельную таблицу, чтобы выполнять распределение суммы переоценки по оборотным субконто
				Если ТекЗаписьТаблицы.ПризнакОборотногоСубконто Тогда
					ТекЗаписьТаблицыОборотногоСубконто = ТаблицаОборотныхСубконтоСчета.Добавить();
					ТекЗаписьТаблицыОборотногоСубконто.Счет = ТекСчет;
					ТекЗаписьТаблицыОборотногоСубконто.Сумма 	 = ТекПроводка.ВалютнаяСуммаДт;					
					// Общая сумма по счету
					ТекЗаписьТаблицы.Сумма 	 					 = ТекПроводка.ВалютнаяСуммаДт;					
					Для Каждого ТекСубконто из ТекСчет.ВидыСубконто Цикл
						ТекЗаписьТаблицыОборотногоСубконто.Установить(ТекСубконто.НомерСтроки, ТекПроводка.СубконтоДт.Получить(ТекСубконто.ВидСубконто));					
					КонецЦикла;					
				КонецЕсли;	                                                             
			КонецЕсли;
		КонецЕсли;   		
	КонецЦикла;

	ТаблицаСчетов.Свернуть("Счет,Субконто1,Субконто2,Субконто3,ИспользованиеС1,ИспользованиеС2,ИспользованиеС3, ПризнакОборотногоСубконто, СпособПризнанияКурсовойРазницы", "Сумма");
	ТаблицаОборотныхСубконтоСчета.Свернуть("Счет,Субконто1,Субконто2,Субконто3", "Сумма");	
	// -куфиб- начало
	СписокВыбораСчетов 		= Неопределено;
	ТаблицаПереоценокОУ 	= Неопределено;
	Если (ТипЗнч(ДокументОбъект)=Тип("ДокументОбъект.РасходныйКассовыйОрдер")
		ИЛИ ТипЗнч(ДокументОбъект)=Тип("ДокументОбъект.ПлатежноеПоручениеВходящее")
		ИЛИ ТипЗнч(ДокументОбъект)=Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее")
		ИЛИ ТипЗнч(ДокументОбъект)=Тип("ДокументОбъект.ПлатежныйОрдерПоступлениеДенежныхСредств")
		ИЛИ ТипЗнч(ДокументОбъект)=Тип("ДокументОбъект.ПлатежныйОрдерСписаниеДенежныхСредств")
		ИЛИ ТипЗнч(ДокументОбъект)=Тип("ДокументОбъект.ПриходныйКассовыйОрдер")) И ден_ПроцедурыКазначейства.ТребуетсяАвтоматическаяПереоценкаОперативныхОстатковДенежныхСредств(СтруктураШапкиДокумента.Дата)
		Тогда
		СписокВыбораСчетов 	= ден_ПроцедурыКазначейства.СписокСчетовУчетаДенежныхСредств();
		ТаблицаПереоценокОУ = ден_ПроцедурыКазначейства.СоздатьТаблицуПереоценок();
	КонецЕсли;
	
	// -куфиб- конец
	
	//Запуск процедуры переоценки для каждого счета
	Для каждого ТекСчет из ТаблицаСчетов цикл

		СчетДляПереоценки 	= Новый Структура("Счет",ТекСчет.Счет);
        СтруктураПоиска 	= Новый Структура("Счет", ТекСчет.Счет);
		Для Индекс = 1 по 3 Цикл
			Если ТекСчет.Получить(Индекс + 3) тогда
				СчетДляПереоценки.Вставить("Субконто" + Индекс, ТекСчет.Получить(Индекс));
				СтруктураПоиска.Вставить("Субконто" + Индекс, ТекСчет.Получить(Индекс));
			КонецЕсли;
		КонецЦикла;
		СчетДляПереоценки.Вставить("ПризнакОборотногоСубконто", ТекСчет.ПризнакОборотногоСубконто);
		СчетДляПереоценки.Вставить("Сумма", ТекСчет.Сумма);
		СчетДляПереоценки.Вставить("СпособПризнанияКурсовойРазницы", ТекСчет.СпособПризнанияКурсовойРазницы);
		Если ТекСчет.ПризнакОборотногоСубконто Тогда
			МассивСтрок = ТаблицаОборотныхСубконтоСчета.НайтиСтроки(СтруктураПоиска);
			ТаблицаОборотногоСубконто.Очистить();
			
			Для Счетчик = 0 по МассивСтрок.Количество()-1 Цикл
				СтрОборотногоСубконто = ТаблицаОборотногоСубконто.Добавить();
				Для СчетчикКолонок = 0 по 4 Цикл
					СтрОборотногоСубконто[СчетчикКолонок] = МассивСтрок[Счетчик][СчетчикКолонок];
				КонецЦикла;	
				
			КонецЦикла;
			СчетДляПереоценки.Вставить("ТаблицаОборотногоСубконто", ТаблицаОборотногоСубконто);
		Иначе
			СчетДляПереоценки.Вставить("ТаблицаОборотногоСубконто", Неопределено); 			
		КонецЕсли; 		

		ПереоценкаСчетаРегл(СтруктураШапкиДокумента, ПроводкиБУ, ПроводкиНУ, СчетДляПереоценки, ВалютаРегламентированногоУчета, Истина,,,СчетаСОсобымПорядкомПереоценкиБУ,, Отказ,,ден_ПроцедурыКазначейства.НеобходимостьРасчетаОперативныхПереоценок(СписокВыбораСчетов,ТекСчет.Счет,ТаблицаПереоценокОУ));
		// если уже получили отказ, тогда не имеет смысла для остальных счетов запускать процедуру переоценки 
		Если Отказ Тогда
			Прервать;
		КонецЕсли;	
	КонецЦикла;

	// -куфиб- начало
	Если ТаблицаПереоценокОУ<>Неопределено Тогда
		ден_ПроцедурыКазначейства.СформироватьДвиженияПоПереоценкам(ДокументОбъект.Движения,ТаблицаПереоценокОУ,ВалютаРегламентированногоУчета,СтруктураШапкиДокумента);
	КонецЕсли;
	// -куфиб- конец

	Возврат Истина;

КонецФункции // ПереоценкаСчетовДокументаРегл()
                               
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ СО СЧЕТАМИ И СУБКОНТО

// Функция формирует массив счетов 6000 и 7000 разделов
//
Функция СформироватьСписокСчетовДоходовРасходов(ВключатьДоходы = Истина, ВключатьРасходы = Истина) экспорт
	
	МассивСчетовДоходовРасходов = Новый Массив;
	Если ВключатьДоходы Тогда
		// Счета доходов
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.ДоходыОтФинансирования);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.ПрочиеДоходы_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.ДоходыСвязанныеСПрекращаемойДеятельностью_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.ДоляПрибылиОрганизацийУчитываемыхПоМетодуДолевогоУчастия);
	КонецЕсли;
	Если ВключатьРасходы Тогда
		// Счета расходов
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.СебестоимостьРеализованнойПродукцииИОказанныхУслуг_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.РасходыПоРеализацииПродукцииИОказаниюУслуг_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.АдминистративныеРасходы_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.РасходыНаФинансирование);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.ПрочиеРасходы_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.РасходыСвязанныеСПрекращаемойДеятельностью_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.ДоляВУбыткеОрганизацийУчитываемыхМетодомДолевогоУчастия);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу_);	
	КонецЕсли;
	Возврат МассивСчетовДоходовРасходов;
КонецФункции // СформироватьСписокСчетовДоходовРасходов

// Функция получает перечень счетов,
// входящих в состав блока производства
Функция ПолучитьСписокСчетовПроизводственногоУчета() Экспорт 
	
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	Типовой.Ссылка КАК Счет
	//                      |ИЗ
	//                      |	ПланСчетов.Типовой КАК Типовой
	//                      |ГДЕ
	//                      |	(Типовой.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_))
	//                      |			ИЛИ Типовой.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_))
	//                      |			ИЛИ Типовой.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_))
	//                      |			ИЛИ Типовой.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_)))");
	//Результат = Запрос.Выполнить();					  
	//Если Не Результат.Пустой()Тогда
	//	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Счет");
	//Иначе
		Возврат Новый Массив;
	//КонецЕсли;
							  
КонецФункции // ПолучитьСписокСчетовПроизводственногоУчета

// Функция проверяет счет на его принадлежность к блоку
// производственных счетов
// СписокСчетовПроизводства - кешируемый перечень производственных счетов
//
Функция СчетЯвляетсяПроизводственным(ТекСчет, СписокСчетовПроизводства = Неопределено) Экспорт
	Результат  = Ложь;
	//Если СписокСчетовПроизводства = Неопределено Тогда
	//	СписокСчетовПроизводства = ПолучитьСписокСчетовПроизводственногоУчета();
	//КонецЕсли;
	
	// Счет не производственный.		
	//Если СписокСчетовПроизводства.Найти(ТекСчет) <> Неопределено Тогда		
	//	Результат  = Истина;			
	//КонецЕсли;	 
	
	Возврат Результат
КонецФункции // СчетЯвляетсяПроизводственным

// Функция получает перечень счетов,
// входящих в состав блока производства
Функция ПолучитьСписокСчетовПроизводственногоУчетаНУ() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Налоговый.Ссылка КАК Счет
	                      |ИЗ
	                      |	ПланСчетов.Налоговый КАК Налоговый
	                      |ГДЕ
	                      |	(Налоговый.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ОсновноеПроизводство_))
	                      |			ИЛИ Налоговый.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства))
	                      |			ИЛИ Налоговый.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВспомогательныеПроизводства))
	                      |			ИЛИ Налоговый.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.НакладныеРасходы)))");
	Результат = Запрос.Выполнить();					  
	Если Не Результат.Пустой()Тогда
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Счет");
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
							  
КонецФункции // ПолучитьСписокСчетовПроизводственногоУчета

// Функция проверяет счет на его принадлежность к блоку
// производственных счетов
// СписокСчетовПроизводства - кешируемый перечень производственных счетов
//
Функция СчетЯвляетсяПроизводственнымНУ(ТекСчет, СписокСчетовПроизводства = Неопределено) Экспорт
	
	Результат  = Ложь;
	Если СписокСчетовПроизводства = Неопределено Тогда
		СписокСчетовПроизводства = глЗначениеПеременной("глСписокСчетовПроизводстваНУ");
	КонецЕсли;
	
	// Счет не производственный.		
	Если СписокСчетовПроизводства.Найти(ТекСчет) <> Неопределено Тогда		
		Результат  = Истина;			
	КонецЕсли;	 
	
	Возврат Результат
	
КонецФункции // СчетЯвляетсяПроизводственным

// Функция получает перечень счетов,
// входящих в состав блока производства
Функция ПолучитьСписокСчетовВАУчетаНУ() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Налоговый.Ссылка КАК Счет
	                      |ИЗ
	                      |	ПланСчетов.Налоговый КАК Налоговый
	                      |ГДЕ
	                      |	(Налоговый.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВАПодлежащиеАмортизации))
	                      |			ИЛИ Налоговый.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВАНеПодлежащиеАмортизации))
	                      |			ИЛИ Налоговый.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.НезавершенноеСтроительство))
	                      |			ИЛИ Налоговый.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПреренцииДоВводаВЭксплуатацию)))");
	Результат = Запрос.Выполнить();					  
	Если Не Результат.Пустой()Тогда
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Счет");
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
							  
КонецФункции // ПолучитьСписокСчетовПроизводственногоУчета

// Функция проверяет счет на его принадлежность к блоку
// производственных счетов
// СписокСчетовПроизводства - кешируемый перечень производственных счетов
//
Функция СчетЯвляетсяВАНУ(ТекСчет, СписокСчетовВА = Неопределено) Экспорт
	
	Результат  = Ложь;
	Если СписокСчетовВА = Неопределено Тогда
		СписокСчетовВА = глЗначениеПеременной("глСписокСчетовВА");
	КонецЕсли;
	
	// Счет не производственный.		
	Если СписокСчетовВА.Найти(ТекСчет) <> Неопределено Тогда		
		Результат  = Истина;			
	КонецЕсли;	 
	
	Возврат Результат
	
КонецФункции // СчетЯвляетсяПроизводственным

// Процедура устанавливает субконто на счете. Если такое субконто не счете
// отсутствует, то ничего не делается.
//
// Параметры:
//		Счет - Счет, к которому относится субконто
//      Субконто - вид субконто
//		Номер или имя установливаемого субконто
//      Значение субконто - значение устанавливаемого субконто
//
Процедура УстановитьСубконто(Счет, Субконто, ИмяСубконто, ЗначениеСубконто, Сообщать = Ложь, Заголовок = "") Экспорт

	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяСубконто) = Тип("Число") Тогда

		Если ИмяСубконто > Счет.ВидыСубконто.Количество() Тогда
			Возврат;
		КонецЕсли;

		ВидСубк = Счет.ВидыСубконто[ИмяСубконто - 1].ВидСубконто;

	Иначе
        Если ТипЗнч(ИмяСубконто) = Тип("Строка") Тогда
			ВидСубк = ПланыВидовХарактеристик.ВидыСубконтоТиповые[ИмяСубконто];
		Иначе
			ВидСубк = ИмяСубконто;
		КонецЕсли;

		Если Счет.ВидыСубконто.Найти( ВидСубк) = Неопределено Тогда
			Если Сообщать тогда
				ОбщегоНазначения.СообщитьОбОшибке("Вида субконто <" + ВидСубк + "> для счета """+Счет.Код +" ("+Счет.Наименование+")"" не определено.",, Заголовок );
			КонецЕсли;
			Возврат;
		КонецЕсли;

	КонецЕсли;

	Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		Субконто.Вставить(ВидСубк, ЗначениеСубконто);

	ИначеЕсли Сообщать тогда
		ОбщегоНазначения.СообщитьОбОшибке("Неверное значение """ + ЗначениеСубконто + """ для вида субконто <" + ВидСубк + ">",, Заголовок);

	КонецЕсли;

КонецПроцедуры // УстановитьСубконто()

// Процедура устанавливает субконто на счете по виду субконто. Если такое субконто на счете
// отсутствует, то ничего не делается.
//
// Параметры:
//		Счет - Счет, к которому относится субконто
//      Субконто - набор субконто
//		Номер или имя установливаемого субконто
//      Значение субконто - значение устанавливаемого субконто
//
Процедура УстановитьСубконтоПоВидуСубконто(	Счет, Субконто, ВидСубконто, ЗначениеСубконто, Сообщать = Ложь, 
											Заголовок = "") Экспорт

	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		Возврат;
	КонецЕсли;

	Если Счет.ВидыСубконто.Найти(ВидСубконто) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		Субконто.Вставить(ВидСубконто, ЗначениеСубконто);

	ИначеЕсли Сообщать тогда
		ОбщегоНазначения.СообщитьОбОшибке("Неверное значение """ + ЗначениеСубконто + """ для вида субконто <" + ВидСубконто + ">",, Заголовок);

	КонецЕсли;

КонецПроцедуры // УстановитьСубконто()

// Функция проверяет возможность использования счета в проводках.
//
// Параметры:
//  Счет     - Проверяемый счет.
//  Сообщать - признак вывода сообщений.
//
// Возвращаемое значение:
//  Булево - возможность использования счета в проводках
//  
//
Функция СчетМожноИспользоватьВПроводках(Счет, Сообщать = Истина) Экспорт

	Если ТипЗнч(Счет) <> Тип("ПланСчетовСсылка.Типовой")		
	   И ТипЗнч(Счет) <> Тип("ПланСчетовСсылка.Налоговый") Тогда
		Возврат Ложь; // Неправильный тип
	КонецЕсли;

	Если Счет = ПланыСчетов.Типовой.ПустаяСсылка() Тогда
		Возврат Истина; // Пустая ссылка может использоваться
	КонецЕсли;

	Если Счет.ЗапретитьИспользоватьВПроводках Тогда

		Если Сообщать Тогда
			Сообщить("Счет " + СокрЛП(Счет)+" """ + Счет.Наименование + """ нельзя использовать в проводках.");
		КонецЕсли;

		Возврат Ложь; // Счет использовать в проводках нельзя

	КонецЕсли;

	Возврат Истина; // Счет можно использовать в проводках 

КонецФункции // СчетМожноИспользоватьВПроводках()

// Эта функция возвращает информацию о счете из переданного соответсвия
// Если в соответствии не найдена информация о счете - она подготавливается и 
// помещается в соответсвие
// Применяется для работы с формами в которых активно требуется получать 
// информащцию о счетах, например, при выводе строки табличного поля
//
// Параметры:      
//	СведенияОСчетах - соответсвие у котрого в качестве ключа - ПланСчетовСсылка, а 
//  				  в качестве значения - структура из 4-х элементов
//					  КоличествоСубконто - число
//                    ТипСубконто1 - описание типа
//                    ТипСубконто2 - описание типа
//                    ТипСубконто3 - описание типа
//					  ВидСубконто1Представление - представление вида субконто
//					  ВидСубконто2Представление - представление вида субконто
//					  ВидСубконто3Представление - представление вида субконто
//
//	Счет - ПланСчетовСсылка
//
// Возвращаемое значение:
//  Описанная выше структура
//
Функция ПолучитьСведенияОСчете(СведенияОСчетах, Счет) Экспорт

	СведенияОСчете = СведенияОСчетах[Счет];

	Если СведенияОСчете = Неопределено Тогда

		СведенияОСчете = Новый Структура("КоличествоСубконто, ТипСубконто1, ТипСубконто2, ТипСубконто3, ВидСубконто1Представление, ВидСубконто2Представление, ВидСубконто3Представление");

		СведенияОСчете.КоличествоСубконто = Счет.ВидыСубконто.Количество();

		Если СведенияОСчете.КоличествоСубконто > 0 Тогда

			ВидСубконто = Счет.ВидыСубконто[0].ВидСубконто;

			СведенияОСчете.ТипСубконто1              = ВидСубконто.ТипЗначения;
			СведенияОСчете.ВидСубконто1Представление = ВидСубконто.Наименование;

		КонецЕсли;

		Если СведенияОСчете.КоличествоСубконто > 1 Тогда

			ВидСубконто = Счет.ВидыСубконто[1].ВидСубконто;

			СведенияОСчете.ТипСубконто2              = ВидСубконто.ТипЗначения;
			СведенияОСчете.ВидСубконто2Представление = ВидСубконто.Наименование;

		КонецЕсли;

		Если СведенияОСчете.КоличествоСубконто > 2 Тогда

			ВидСубконто = Счет.ВидыСубконто[2].ВидСубконто;

			СведенияОСчете.ТипСубконто3              = ВидСубконто.ТипЗначения;
			СведенияОСчете.ВидСубконто3Представление = ВидСубконто.Наименование;

		КонецЕсли;

		СведенияОСчетах[Счет] = СведенияОСчете;

	КонецЕсли;

	Возврат СведенияОСчете;

КонецФункции  // ПолучитьСведенияОСчете()

// Выполняет в табличном поле приведение значений субконто к типу, соответствующему счету
// сведения о счете передаются через параметр СведенияОСчете
// используется для табличных полей, содержащих колонки типа Счет и соответствующие ему субконто
//
// Параметры:
//	ТабличноеПоле 	- табличное поле 
//  ДтКт 			- строка "Дт", "Кт" или "" - часть имени колонки табличного поля
// 					для колонок табличного поля поддерживаются имена 
//					типа СубконтоДт1, СубконтоКт1, Субконто1...
//  СведенияОСчете 	- структура
//					  КоличествоСубконто - число
//                    ТипСубконто1 - описание типа
//                    ТипСубконто2 - описание типа
//                    ТипСубконто3 - описание типа
//					  ВидСубконто1Представление - представление вида субконто - в данной процедуре не используется
//					  ВидСубконто2Представление - представление вида субконто - в данной процедуре не используется
//					  ВидСубконто3Представление - представление вида субконто - в данной процедуре не используется
//
Процедура ПривестиЗначениеСубконто(ТабличноеПоле, ДтКт, СведенияОСчете) Экспорт

	Для СчетчикСубконто = 1 По 3 Цикл

		Если СведенияОСчете.КоличествоСубконто >= СчетчикСубконто Тогда
			ТабличноеПоле.ТекущиеДанные["Субконто"+ДтКт+СчетчикСубконто] = СведенияОСчете["ТипСубконто"+СчетчикСубконто].ПривестиЗначение(ТабличноеПоле.ТекущиеДанные["Субконто"+ДтКт+СчетчикСубконто]);

		Иначе
			ТабличноеПоле.ТекущиеДанные["Субконто"+ДтКт+СчетчикСубконто] = Неопределено;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПривестиЗначениеСубконто()

// Функция возвращает количество для записи в проводку
// Если на счете не ведется количественный учет, то возвращается 0
//
// Параметры:
// 		Счет - счет проводки
//      Количество - количество для проводки
//		
// Возврат:
//		Количество для записи в проводку
//
Функция КоличествоВПроводку(Счет, Количество) Экспорт

	Возврат ?(Счет.Пустая(), 0, ?(Счет.Количественный, Количество, 0));

КонецФункции // КоличествоВПроводку()

// Производит замену субконто НУ на субконто БУ, если у них одинаковые типы-
//   Объект - строка табличной части, либо ссылка на обект, в случае, если реквизиты налогового учета находятся в шапке
Процедура ЗаменитьСубконтоНУВСтроке(Объект, СчетБУ, СчетНУ, НомерСубконто, СубконтоБУ, ИмяРеквизитаСубконтоНУ = "Субконто") Экспорт

	Если НЕ ЗначениеЗаполнено(СчетБУ) Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СчетНУ) Тогда
		Возврат;
	КонецЕсли;	
	
	Если СчетБУ.ВидыСубконто.Количество() < НомерСубконто Тогда
		Возврат;
	КонецЕсли;
	
	// найдем аналогичный ВидСубконто для счета НУ
	НомерСубконтоНУ = СчетНУ.ВидыСубконто.Найти(СчетБУ.ВидыСубконто[НомерСубконто-1].ВидСубконто);
	
	Если НомерСубконтоНУ = Неопределено Тогда
		// по типу
		Для Счетчик = 1 по 3 Цикл			
			Если СчетНУ.ВидыСубконто.Количество() >= Счетчик Тогда
				Если СчетНУ.ВидыСубконто[Счетчик - 1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СубконтоБУ)) Тогда						
					Объект[ИмяРеквизитаСубконтоНУ + Счетчик]= СубконтоБУ;						
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;				
	Иначе
		Объект[ИмяРеквизитаСубконтоНУ + НомерСубконтоНУ.НомерСтроки]= СубконтоБУ;						
	КонецЕсли;
	
КонецПроцедуры // ЗаменитьСубконтоНУВСтроке()

// Производит замену субконто НУ на субконто БУ, если у них одинаковые типы-
// 
Процедура ЗаменитьСубконтоНУ(СчетБУ, СчетНУ, НомерСубконто, СубконтоБУ, СубконтоНУ) Экспорт

	Если НЕ ЗначениеЗаполнено(СчетБУ) Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СчетНУ) Тогда
		Возврат;
	КонецЕсли;	
	
	Если СчетНУ.ВидыСубконто.Количество() >= НомерСубконто 
		И СчетБУ.ВидыСубконто.Количество() >= НомерСубконто 
		Тогда
		Если СчетБУ.ВидыСубконто[НомерСубконто - 1].ВидСубконто.ТипЗначения = 
			СчетНУ.ВидыСубконто[НомерСубконто - 1].ВидСубконто.ТипЗначения Тогда
			
			СубконтоНУ = СубконтоБУ;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаменитьСубконтоНУ()

// Преобразует согласно заданых параметров счет БУ в счет НУ
// 
Функция ПреобразоватьСчетаБУвСчетНУ(СтруктураДанных, Тип = "НУ", ССубконто = Ложь, Знач ДатаСреза = Неопределено) Экспорт

	Перем ТекстУсловий;
	
	Если ССубконто Тогда
		Результат = Новый Структура("Счет"+Тип+", Субконто"+Тип+"1,Субконто"+Тип+"2,Субконто"+Тип+"3");
	Иначе	
		Результат = ПланыСчетов.Налоговый.ПустаяСсылка();
	КонецЕсли;	
	
	Если НЕ Тип = "НУ" Тогда
		Сообщить("Неверный тип преобразования счета БУ в счет НУ");
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанных) Тогда
		Возврат Результат;
	КонецЕсли;
	
	//если необходимо получать соответтсвие счета и субконто, то данные будем брать из регситра сведений
	//Соответствие счетов БУ и НУ
	Если ССубконто Тогда
		// наивысший приоритет у записи
		// в которой совпадают все измерения, далее по убывающий в порядке расположения измерений
		СтруктураИзмерений = Новый Структура("СчетБУ, СчетКоррБУ, СубконтоБУ1, СубконтоБУ2, СубконтоБУ3, ВидЗатратНУ",
		ПланыСчетов.Типовой.ПустаяСсылка(),
		ПланыСчетов.Типовой.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
		Неопределено);
		
		Запрос = Новый Запрос();	
		
		ПовторяемыйФрагментТекстаНачало =  "
		|	СоответствиеСчетовБУиНУ.СчетБУ,
		|	СоответствиеСчетовБУиНУ.СчетКоррБУ,
		|	СоответствиеСчетовБУиНУ.СубконтоБУ1,
		|	СоответствиеСчетовБУиНУ.СубконтоБУ2,
		|	СоответствиеСчетовБУиНУ.СубконтоБУ3,
		|	СоответствиеСчетовБУиНУ.ВидЗатратНУ,
		|	СоответствиеСчетовБУиНУ.СчетНУ,
		|	СоответствиеСчетовБУиНУ.СубконтоНУ1,
		|	СоответствиеСчетовБУиНУ.СубконтоНУ2,
		|	СоответствиеСчетовБУиНУ.СубконтоНУ3
		|ИЗ
		|	РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних(&ДатаСреза, ";
		ПовторяемыйФрагментТекстаКонец = ") КАК СоответствиеСчетовБУиНУ
		|ГДЕ
		|	СоответствиеСчетовБУиНУ.Учитывается";	
		
		Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);	
		Запрос.УстановитьПараметр("СписокПустыхЗначений", ПроцедурыНалоговогоУчета.СформироватьСписокПустыхСсылокТиповСубконто());	 
		// в регистре 5 измерений, соответственно
		// наивысший приоритет у записи
		// в которой совпадают все измерения, далее по убывающий в порядке расположения измерений
		// Запрос по Счету Дт
		Счетчик = СтруктураДанных.Количество();
		ТекстЗапроса = "";
		Пока Счетчик >=1 Цикл 		
			Если не ТекстЗапроса = "" Тогда 
				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ ";
			КонецЕсли;		
			ТекстУсловия = "СчетБУ = &СчетБУ ";
			НомерПараметра = 0;		
			Для каждого ПолеСтруктуры из СтруктураИзмерений Цикл
				ПараметрЕстьВСтруктуреДанных = СтруктураДанных.Свойство(ПолеСтруктуры.Ключ);
				Если ПараметрЕстьВСтруктуреДанных Тогда				
					НомерПараметра = НомерПараметра + 1;
				КонецЕсли;			
				// если по данному полю задано значение отбора - ищем по нему, в противном случае ищем запись с пустым значением данного параметра
				ТекстУсловия = ТекстУсловия + Символы.ПС + "	И (" + ПолеСтруктуры.Ключ + " = &" + ?(ПараметрЕстьВСтруктуреДанных и НомерПараметра<=Счетчик, ПолеСтруктуры.Ключ,"Пустой" + ПолеСтруктуры.Ключ + " или " +  ПолеСтруктуры.Ключ +" = Неопределено или "+ ПолеСтруктуры.Ключ +" в (&СписокПустыхЗначений)") + ")";			
			КонецЦикла;						
			Счетчик = Счетчик - 1;
			ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ ","ВЫБРАТЬ " ) + ПовторяемыйФрагментТекстаНачало + ТекстУсловия + ПовторяемыйФрагментТекстаКонец;	
		КонецЦикла;	
		
		Если ТекстЗапроса = "" Тогда
			Возврат Результат
		КонецЕсли;	
		
		Запрос.Текст = ТекстЗапроса;
		
		// Установим параметры запроса
		Для каждого ПолеСтруктуры из СтруктураИзмерений Цикл
			Если СтруктураДанных.Свойство(ПолеСтруктуры.Ключ) Тогда
				Запрос.УстановитьПараметр(ПолеСтруктуры.Ключ, СтруктураДанных[ПолеСтруктуры.Ключ]);
			иначе
				Запрос.УстановитьПараметр(ПолеСтруктуры.Ключ, ПолеСтруктуры.Значение);
			КонецЕсли;	
			// установим пустой параметр
			Запрос.УстановитьПараметр("Пустой"+ПолеСтруктуры.Ключ, ПолеСтруктуры.Значение);		
		КонецЦикла;			
		
		РезультатВыполненияЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатВыполненияЗапроса.Пустой() Тогда 
			
			Выборка = РезультатВыполненияЗапроса.Выбрать();
						
			Если Выборка.Следующий() Тогда
				
				Результат = Новый Структура("Счет"+Тип+", Субконто"+Тип+"1,Субконто"+Тип+"2,Субконто"+Тип+"3");
				Результат.СчетНУ      = Выборка["Счет"     + Тип];
				Результат.СубконтоНУ1 = Выборка["Субконто" + Тип + "1"];
				Результат.СубконтоНУ2 = Выборка["Субконто" + Тип + "2"];
				Результат.СубконтоНУ3 = Выборка["Субконто" + Тип + "3"];
				
				Возврат Результат;	
				
			КонецЕсли;
		
		Иначе 
			//соответствие берется из плана счетов "Типовой"
			
			Запрос = Новый Запрос;
			Запрос.Текст =  "ВЫБРАТЬ
			|	Типовой.СчетНУ
			|ИЗ
			|	ПланСчетов.Типовой КАК Типовой
			|ГДЕ
			|	Типовой.Ссылка = &СчетБУ" ; 					
			
			// Установим параметры запроса
			Запрос.УстановитьПараметр("СчетБУ", СтруктураДанных.СчетБУ);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда 		
				Результат = Новый Структура("Счет"+Тип+", Субконто"+Тип+"1,Субконто"+Тип+"2,Субконто"+Тип+"3");
				// возвращаем только счет
				Результат.СчетНУ = Выборка["Счет" + Тип];
				
				Возврат Результат; 			
				
			КонецЕсли; 
					
		КонецЕсли;
				
	Иначе  //соответствие только счета НУ - берется из плана счетов "Типовой"
		
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ
		|	Типовой.СчетНУ
		|ИЗ
		|	ПланСчетов.Типовой КАК Типовой
		|ГДЕ
		|	Типовой.Ссылка = &СчетБУ" ; 					
		
		// Установим параметры запроса
		Запрос.УстановитьПараметр("СчетБУ", СтруктураДанных.СчетБУ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 		
			Возврат Выборка["Счет" + Тип]; 			
		КонецЕсли; 
	КонецЕсли; 	
	
	Возврат Результат;

КонецФункции // ПреобразоватьСчетаБУвСчетНУ()

// Функция возвращает счета учета номенклатры по выбранной организации.
//
// Параметры:
//  Организация         - организация, по которой определяются счета учета
//  Номенклатура        - номенклатура, по которой определяются счета учета
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура) Экспорт

	СтруктураВозврата = Новый Структура("
							|СчетУчетаБУ, 						СчетУчетаДавСырья,         			СчетПередачиБУ,
							|СчетПередачиЗаб,					СчетУчетаНДСПоПриобретению, 		СчетУчетаНДСПоРеализации,
							|СчетУчетаНДСУплаченногоНаТаможне,	СчетУчетаАкцизаПоРеализации, 
							|СчетДоходовОтРеализацииБУ,			СчетДоходовПриВозвратеБУ,			СчетСебестоимостиПриРеализацииБУ,
							|СчетУчетаНУ, 						СчетПередачиНУ,						СчетДоходовОтРеализацииНУ,	
							|СчетДоходовПриВозвратеНУ,			СчетСебестоимостиПриРеализацииНУ,
							|СубконтоДоходовБУ1, 				СубконтоДоходовБУ2, 				СубконтоДоходовБУ3,
							|СубконтоДоходовПриВозвратеБУ1, 	СубконтоДоходовПриВозвратеБУ2, 		СубконтоДоходовПриВозвратеБУ3,
							|СубконтоДоходовНУ1, 				СубконтоДоходовНУ2, 				СубконтоДоходовНУ3,	
							|СубконтоДоходовПриВозвратеНУ1, 	СубконтоДоходовПриВозвратеНУ2, 		СубконтоДоходовПриВозвратеНУ3,
							|СубконтоДоходовПриВозвратеБУ1, 	СубконтоДоходовПриВозвратеБУ2, 		СубконтоДоходовПриВозвратеБУ3,
							|СубконтоСебестоимостиБУ1, 			СубконтоСебестоимостиБУ2, 			СубконтоСебестоимостиБУ3,
							|СубконтоСебестоимостиНУ1, 			СубконтоСебестоимостиНУ2, 			СубконтоСебестоимостиНУ3,
							|СчетПоложительныхОтклоненийБУ,		СчетОтрицательныхОтклоненийБУ,
							|СубконтоПоложительныхОтклоненийБУ1,СубконтоПоложительныхОтклоненийБУ2,	СубконтоПоложительныхОтклоненийБУ3,
							|СубконтоОтрицательныхОтклоненийБУ1,СубконтоОтрицательныхОтклоненийБУ2,	СубконтоОтрицательныхОтклоненийБУ3,
							|СчетПоложительныхОтклоненийНУ,		СчетОтрицательныхОтклоненийНУ,
							|СубконтоПоложительныхОтклоненийНУ1,СубконтоПоложительныхОтклоненийНУ2,	СубконтоПоложительныхОтклоненийНУ3,
							|СубконтоОтрицательныхОтклоненийНУ1,СубконтоОтрицательныхОтклоненийНУ2,	СубконтоОтрицательныхОтклоненийНУ3");

	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	МассивНоменклатура	 = Новый Массив();
	МассивОрганизация	 = Новый Массив();
	
	МассивНоменклатура.Добавить(Справочники.Номенклатура.ПустаяСсылка());
	МассивОрганизация.Добавить(Справочники.Организации.ПустаяСсылка());
	
	МассивНоменклатура.Добавить(Номенклатура);
	СписокГрупп = ОбщегоНазначения.ПолучитьСписокВышестоящихГрупп(Номенклатура);
	Для каждого Элемент Из СписокГрупп Цикл
		МассивНоменклатура.Добавить(Элемент);
	КонецЦикла;
	
	МассивОрганизация.Добавить(Организация);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",        МассивОрганизация);
	Запрос.УстановитьПараметр("Номенклатура",       МассивНоменклатура);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаУчетаНоменклатуры.СчетУчетаБУ,
	|	СчетаУчетаНоменклатуры.СчетУчетаЗабалансовый,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачиБУ,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачиЗабалансовый,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоПриобретению,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоРеализации,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСУплаченногоНаТаможне,
	|	СчетаУчетаНоменклатуры.СчетУчетаАкцизаПоРеализации,
	|	СчетаУчетаНоменклатуры.СчетДоходовОтРеализацииБУ,
	|	СчетаУчетаНоменклатуры.СчетСебестоимостиПриРеализацииБУ,
	|	СчетаУчетаНоменклатуры.СчетУчетаНУ,
	|	СчетаУчетаНоменклатуры.СчетДоходовОтРеализацииНУ,
	|	СчетаУчетаНоменклатуры.СчетСебестоимостиПриРеализацииНУ,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачиНУ,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовОтРеализацииБУ1,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовОтРеализацииБУ2,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовОтРеализацииБУ3,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовОтРеализацииНУ1,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовОтРеализацииНУ2,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовОтРеализацииНУ3,
	|	СчетаУчетаНоменклатуры.СубконтоСебестоимостиПриРеализацииБУ1,
	|	СчетаУчетаНоменклатуры.СубконтоСебестоимостиПриРеализацииБУ2,
	|	СчетаУчетаНоменклатуры.СубконтоСебестоимостиПриРеализацииБУ3,
	|	СчетаУчетаНоменклатуры.СубконтоСебестоимостиПриРеализацииНУ1,
	|	СчетаУчетаНоменклатуры.СубконтоСебестоимостиПриРеализацииНУ2,
	|	СчетаУчетаНоменклатуры.СубконтоСебестоимостиПриРеализацииНУ3,
	|	СчетаУчетаНоменклатуры.Организация,
	|	СчетаУчетаНоменклатуры.Номенклатура,
	|	СчетаУчетаНоменклатуры.Номенклатура.ЭтоГруппа,
	|	СчетаУчетаНоменклатуры.СчетДоходовПриВозвратеБУ,
	|	СчетаУчетаНоменклатуры.СчетДоходовПриВозвратеНУ,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовПриВозвратеБУ1,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовПриВозвратеБУ2,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовПриВозвратеБУ3,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовПриВозвратеНУ1,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовПриВозвратеНУ2,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовПриВозвратеНУ3,
	|	СчетаУчетаНоменклатуры.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ,
	|	СчетаУчетаНоменклатуры.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ1,
	|	СчетаУчетаНоменклатуры.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ2,
	|	СчетаУчетаНоменклатуры.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ3,
	|	СчетаУчетаНоменклатуры.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ,
	|	СчетаУчетаНоменклатуры.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ1,
	|	СчетаУчетаНоменклатуры.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ2,
	|	СчетаУчетаНоменклатуры.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ3,
	|	СчетаУчетаНоменклатуры.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ,
	|	СчетаУчетаНоменклатуры.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ1,
	|	СчетаУчетаНоменклатуры.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ2,
	|	СчетаУчетаНоменклатуры.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ3,
	|	СчетаУчетаНоменклатуры.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ,
	|	СчетаУчетаНоменклатуры.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ1,
	|	СчетаУчетаНоменклатуры.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ2,
	|	СчетаУчетаНоменклатуры.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ3
	|ИЗ
	|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	|ГДЕ
	|	СчетаУчетаНоменклатуры.Организация В(&Организация)
	|	И СчетаУчетаНоменклатуры.Номенклатура В(&Номенклатура)";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Колонки.Добавить("Глубина");
	Для Каждого Строка Из ТаблицаЗапроса Цикл
		Если Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Строка.Глубина = 0;
		Иначе
			Строка.Глубина = СтрДлина(Строка.Номенклатура.ПолныйКод());
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗапроса.Сортировать("Глубина Убыв, Организация Убыв");
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда

		СведенияОСчетах = ТаблицаЗапроса[0];

		СтруктураВозврата.СчетУчетаБУ         				= СведенияОСчетах.СчетУчетаБУ;
		СтруктураВозврата.СчетУчетаДавСырья   				= СведенияОСчетах.СчетУчетаЗабалансовый;
		СтруктураВозврата.СчетПередачиБУ	   				= СведенияОСчетах.СчетУчетаПередачиБУ;
		СтруктураВозврата.СчетПередачиЗаб   				= СведенияОСчетах.СчетУчетаПередачиЗабалансовый;
		СтруктураВозврата.СчетУчетаНДСПоПриобретению    	= СведенияОСчетах.СчетУчетаНДСПоПриобретению;
		СтруктураВозврата.СчетУчетаНДСПоРеализации 			= СведенияОСчетах.СчетУчетаНДСПоРеализации;
		СтруктураВозврата.СчетУчетаНДСУплаченногоНаТаможне  = СведенияОСчетах.СчетУчетаНДСУплаченногоНаТаможне;
		СтруктураВозврата.СчетУчетаАкцизаПоРеализации	    = СведенияОСчетах.СчетУчетаАкцизаПоРеализации;
		СтруктураВозврата.СчетДоходовОтРеализацииБУ       	= СведенияОСчетах.СчетДоходовОтРеализацииБУ;
		СтруктураВозврата.СчетСебестоимостиПриРеализацииБУ	= СведенияОСчетах.СчетСебестоимостиПриРеализацииБУ;
		СтруктураВозврата.СчетДоходовПриВозвратеБУ       	= СведенияОСчетах.СчетДоходовПриВозвратеБУ;
		
		СтруктураВозврата.СчетУчетаНУ						= СведенияОСчетах.СчетУчетаНУ;
		СтруктураВозврата.СчетПередачиНУ					= СведенияОСчетах.СчетУчетаПередачиНУ;
		СтруктураВозврата.СчетДоходовОтРеализацииНУ			= СведенияОСчетах.СчетДоходовОтРеализацииНУ;
		СтруктураВозврата.СчетСебестоимостиПриРеализацииНУ	= СведенияОСчетах.СчетСебестоимостиПриРеализацииНУ;			
		СтруктураВозврата.СчетДоходовПриВозвратеНУ       	= СведенияОСчетах.СчетДоходовПриВозвратеНУ;
		
		СтруктураВозврата.СубконтоДоходовБУ1				= СведенияОСчетах.СубконтоДоходовОтРеализацииБУ1;
		СтруктураВозврата.СубконтоДоходовБУ2				= СведенияОСчетах.СубконтоДоходовОтРеализацииБУ2;
		СтруктураВозврата.СубконтоДоходовБУ3				= СведенияОСчетах.СубконтоДоходовОтРеализацииБУ3;
		
		СтруктураВозврата.СубконтоДоходовНУ1 				= СведенияОСчетах.СубконтоДоходовОтРеализацииНУ1;
		СтруктураВозврата.СубконтоДоходовНУ2 				= СведенияОСчетах.СубконтоДоходовОтРеализацииНУ2;
		СтруктураВозврата.СубконтоДоходовНУ3 				= СведенияОСчетах.СубконтоДоходовОтРеализацииНУ3;
		
		СтруктураВозврата.СубконтоДоходовПриВозвратеБУ1		= СведенияОСчетах.СубконтоДоходовПриВозвратеБУ1;
		СтруктураВозврата.СубконтоДоходовПриВозвратеБУ2		= СведенияОСчетах.СубконтоДоходовПриВозвратеБУ2;
		СтруктураВозврата.СубконтоДоходовПриВозвратеБУ3		= СведенияОСчетах.СубконтоДоходовПриВозвратеБУ3;
		
		СтруктураВозврата.СубконтоДоходовПриВозвратеНУ1		= СведенияОСчетах.СубконтоДоходовПриВозвратеНУ1;
		СтруктураВозврата.СубконтоДоходовПриВозвратеНУ2		= СведенияОСчетах.СубконтоДоходовПриВозвратеНУ2;
		СтруктураВозврата.СубконтоДоходовПриВозвратеНУ3		= СведенияОСчетах.СубконтоДоходовПриВозвратеНУ3;
		
		СтруктураВозврата.СубконтоСебестоимостиБУ1			= СведенияОСчетах.СубконтоСебестоимостиПриРеализацииБУ1;
		СтруктураВозврата.СубконтоСебестоимостиБУ2			= СведенияОСчетах.СубконтоСебестоимостиПриРеализацииБУ2;
		СтруктураВозврата.СубконтоСебестоимостиБУ3			= СведенияОСчетах.СубконтоСебестоимостиПриРеализацииБУ3;
		
		СтруктураВозврата.СубконтоСебестоимостиНУ1			= СведенияОСчетах.СубконтоСебестоимостиПриРеализацииНУ1;
		СтруктураВозврата.СубконтоСебестоимостиНУ2			= СведенияОСчетах.СубконтоСебестоимостиПриРеализацииНУ2;
		СтруктураВозврата.СубконтоСебестоимостиНУ3			= СведенияОСчетах.СубконтоСебестоимостиПриРеализацииНУ3;
		
		// счета учета по операциям со структурными подразделениями
		СтруктураВозврата.СчетПоложительныхОтклоненийБУ		= СведенияОСчетах.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ;
		СтруктураВозврата.СубконтоПоложительныхОтклоненийБУ1	= СведенияОСчетах.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ1;
		СтруктураВозврата.СубконтоПоложительныхОтклоненийБУ2	= СведенияОСчетах.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ2;
		СтруктураВозврата.СубконтоПоложительныхОтклоненийБУ3	= СведенияОСчетах.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ3;
		
		СтруктураВозврата.СчетОтрицательныхОтклоненийБУ		= СведенияОСчетах.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ;
		СтруктураВозврата.СубконтоОтрицательныхОтклоненийБУ1	= СведенияОСчетах.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ1;
		СтруктураВозврата.СубконтоОтрицательныхОтклоненийБУ2	= СведенияОСчетах.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ2;
		СтруктураВозврата.СубконтоОтрицательныхОтклоненийБУ3	= СведенияОСчетах.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ3;
		
		// счета учета по операциям со структурными подразделениями
		СтруктураВозврата.СчетПоложительныхОтклоненийНУ		= СведенияОСчетах.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ;
		СтруктураВозврата.СубконтоПоложительныхОтклоненийНУ1	= СведенияОСчетах.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ1;
		СтруктураВозврата.СубконтоПоложительныхОтклоненийНУ2	= СведенияОСчетах.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ2;
		СтруктураВозврата.СубконтоПоложительныхОтклоненийНУ3	= СведенияОСчетах.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ3;
		
		СтруктураВозврата.СчетОтрицательныхОтклоненийНУ		= СведенияОСчетах.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ;
		СтруктураВозврата.СубконтоОтрицательныхОтклоненийНУ1	= СведенияОСчетах.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ1;
		СтруктураВозврата.СубконтоОтрицательныхОтклоненийНУ2	= СведенияОСчетах.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ2;
		СтруктураВозврата.СубконтоОтрицательныхОтклоненийНУ3	= СведенияОСчетах.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ3;

	КонецЕсли;

	Возврат СтруктураВозврата;

КонецФункции // ПолучитьСчетаУчетаНоменклатуры()

// Функция возвращает счета доходов и расходов для отражения курсовой разницы при переоценке
// валютных счетов бухгалтерского учета.
//
// Параметры:
//  Организация    - организация, по которой определяются счета учета
//  Счет 	       - счет, по которому производится переоценка валюты
//
// Возвращаемое значение:
//  Структура - структура содержащая счета отражения доходов и расходов по курсовой разницы
// 
Функция ПолучитьСчетаОтраженияКурсовойРазницы(Организация = Неопределено, Счет = Неопределено, ПодразделениеДляРеглОпераций = Неопределено) Экспорт
	ПустойСчетБУ = ПланыСчетов.Типовой.ПустаяСсылка();
	ПустойСчетНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
	
	СтруктураВозврата = Новый Структура("
							|СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3,
							|СчетДоходовНУ, СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3,
							|СчетРасходовБУ, СубконтоРасходовБУ1, СубконтоРасходовБУ2, СубконтоРасходовБУ3,
							|СчетРасходовНУ, СубконтоРасходовНУ1, СубконтоРасходовНУ2, СубконтоРасходовНУ3",
							ПустойСчетБУ, Неопределено, Неопределено, Неопределено, 
							ПустойСчетНУ, Неопределено, Неопределено, Неопределено, 
							ПустойСчетБУ, Неопределено, Неопределено, Неопределено, 
							ПустойСчетНУ, Неопределено, Неопределено, Неопределено);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("ПустойСчет", ПустойСчетБУ);
	
		
	СписокГрупп = Новый Массив;
	Если не Счет = Неопределено и не Счет.Пустая() Тогда
		СписокГрупп = ОбщегоНазначения.ПолучитьСписокВышестоящихГрупп(Счет);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокГруппСчетов", СписокГрупп);
	// Система расчета приоритетов записей запроса:
	// 1 			- соответствуют организация и счет
	// 2 ... N +1  	- соответствует организация, выбранный счет - являетс субсчетом счета-группы в записи(Где N - количество вышестоящих счетов-групп) 
	// N + 2		- соответствует организация, счет не выбран
	// N + 3 		- организация не выбрана, счет соответствует
	// N + 4... 3 + 2*N  -  организация не выбрана, выбранный счет - является субсчетом счета-группы в записи(Где N - количество вышестоящих счетов-групп) 
	// 4 + 2*N  	-  организация не выбрана, счет  не выбран 
	    	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СпособыОтраженияКурсовойРазницы.СчетДоходовБУ,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоДоходовБУ1,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоДоходовБУ2,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоДоходовБУ3,
	               |	СпособыОтраженияКурсовойРазницы.СчетРасходовБУ,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоРасходовБУ1,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоРасходовБУ2,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоРасходовБУ3,
	               |	СпособыОтраженияКурсовойРазницы.СчетДоходовНУ,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоДоходовНУ1,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоДоходовНУ2,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоДоходовНУ3,
	               |	СпособыОтраженияКурсовойРазницы.СчетРасходовНУ,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоРасходовНУ1,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоРасходовНУ2,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоРасходовНУ3,
	               |	ВЫБОР
	               |		КОГДА СпособыОтраженияКурсовойРазницы.Организация = &Организация
	               |				И СпособыОтраженияКурсовойРазницы.Счет = &Счет
	               |			ТОГДА 1 ";
   Индекс = 0;
   
   // приоритеты для записей счетов-групп, родителей выбранного элемента
   КоличествоГруппСчетов = СписокГрупп.Количество(); 
   Для каждого Элемент Из СписокГрупп Цикл
	   // приоритеты для записей с заполненной организацией
	   	Индекс = Индекс + 1;
	   	ИмяПараметра = "ГруппаСчетов" + Индекс;
		Запрос.УстановитьПараметр(ИмяПараметра, Элемент);
		Запрос.Текст = Запрос.Текст + "
					|		КОГДА СпособыОтраженияКурсовойРазницы.Организация = &Организация
	                |				И СпособыОтраженияКурсовойРазницы.Счет = &" + ИмяПараметра +"
	                |			ТОГДА " + Строка(Индекс +1);
					
					// приоритеты для записей с заполненной организацией
		Запрос.Текст = Запрос.Текст + "
					|		КОГДА СпособыОтраженияКурсовойРазницы.Организация = &ПустаяОрганизация
	                |				И СпособыОтраженияКурсовойРазницы.Счет = &" + ИмяПараметра +"
	                |			ТОГДА " + Строка(Индекс +3);
	КонецЦикла;	   					   
	// остальные вариации			
	Запрос.Текст = Запрос.Текст + "
					|	            
	                |		КОГДА СпособыОтраженияКурсовойРазницы.Организация = &Организация
	                |				И СпособыОтраженияКурсовойРазницы.Счет = &ПустойСчет
	                |			ТОГДА " + Строка(2 + КоличествоГруппСчетов)+ "
	                |		КОГДА СпособыОтраженияКурсовойРазницы.Организация = &ПустаяОрганизация
	                |				И СпособыОтраженияКурсовойРазницы.Счет = &Счет
	                |			ТОГДА " + Строка(3 + КоличествоГруппСчетов)+ "	                
	                |		КОГДА СпособыОтраженияКурсовойРазницы.Организация = &ПустаяОрганизация
	                |				И СпособыОтраженияКурсовойРазницы.Счет = &ПустойСчет
	                |			ТОГДА " + Строка(4 + КоличествоГруппСчетов*2)+ "					
	                |	КОНЕЦ КАК Приоритет
	                |ИЗ
	                |	РегистрСведений.СпособыОтраженияКурсовойРазницы КАК СпособыОтраженияКурсовойРазницы
	                |ГДЕ
	                |	(СпособыОтраженияКурсовойРазницы.Организация = &Организация
	                |			ИЛИ СпособыОтраженияКурсовойРазницы.Организация = &ПустаяОрганизация)
	                |	И (СпособыОтраженияКурсовойРазницы.Счет =&Счет
					|			ИЛИ СпособыОтраженияКурсовойРазницы.Счет в (&СписокГруппСчетов)
	                |			ИЛИ СпособыОтраженияКурсовойРазницы.Счет = &ПустойСчет)
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Приоритет";
					
	Результат = Запрос.Выполнить();
				
	Если НЕ Результат.Пустой() Тогда		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Для Каждого КлючИЗначение из СтруктураВозврата Цикл
			СтруктураВозврата[КлючИЗначение.Ключ]= Выборка[КлючИЗначение.Ключ];
		КонецЦикла;	             
		
		
	КонецЕсли;
	
	// Установка значений по умолчанию	
	Если СтруктураВозврата.СчетДоходовБУ.Пустая() Тогда
		СтруктураВозврата.СчетДоходовБУ 		= ПланыСчетов.Типовой.НереализованныеДоходыОтКурсовойРазницыСоб;
		СтруктураВозврата.СубконтоДоходовБУ1 	= Справочники.Доходы.КурсовыеРазницы;
		
		Для Каждого Субконто ИЗ СтруктураВозврата.СчетДоходовБУ.ВидыСубконто Цикл
			Если Субконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда
				Если Субконто.НомерСтроки = 2 Тогда
					СтруктураВозврата.СубконтоДоходовБУ2 = ПодразделениеДляРеглОпераций;
				ИначеЕсли Субконто.НомерСтроки = 3 Тогда
					СтруктураВозврата.СубконтоДоходовБУ3 = ПодразделениеДляРеглОпераций;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;	
	
	Если СтруктураВозврата.СчетДоходовНУ.Пустая() Тогда
		СтруктураВозврата.СчетДоходовНУ 		= ПланыСчетов.Налоговый.ДоходОтКурсовойРазницы;
		СтруктураВозврата.СубконтоДоходовНУ1 	= Справочники.Доходы.КурсовыеРазницы;
	КонецЕсли;	
	
	Если СтруктураВозврата.СчетРасходовБУ.Пустая() Тогда
		СтруктураВозврата.СчетРасходовБУ 		= ПланыСчетов.Типовой.НереализованныеасходыПоКурсовойРазницеСоб;
		СтруктураВозврата.СубконтоРасходовБУ1 	= Справочники.СтатьиЗатрат.КурсовыеРазницы;
		
		Для Каждого Субконто ИЗ СтруктураВозврата.СчетРасходовБУ.ВидыСубконто Цикл
			Если Субконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда
				Если Субконто.НомерСтроки = 2 Тогда
					СтруктураВозврата.СубконтоРасходовБУ2 = ПодразделениеДляРеглОпераций;
				ИначеЕсли Субконто.НомерСтроки = 3 Тогда
					СтруктураВозврата.СубконтоРасходовБУ3 = ПодразделениеДляРеглОпераций;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	Если СтруктураВозврата.СчетРасходовНУ.Пустая() Тогда
		СтруктураВозврата.СчетРасходовНУ 		= ПланыСчетов.Налоговый.РасходыПоКурсовойРазнице;
		СтруктураВозврата.СубконтоРасходовНУ1 	= Справочники.СтатьиЗатрат.КурсовыеРазницы;
	КонецЕсли;			                
    	
	Возврат СтруктураВозврата; 
КонецФункции // ПолучитьСчетаОтраженияКурсовойРазницы

// Функция возвращает счет учета для выбранного объекта учета
// банковского счета или кассы
// Параметры
//  ОбъектУчета  – банковский счет или касса для которого
//                 определяется счет учета
//	ЗаполнятьЗначениемПоУмолчанию - в случае, если параметр истина
//                  и в регистре сведений данные дл нужного объекта отсутствуют
// 					то функция вернет значение счета учета по-умолчанию
//
Функция ПолучитьСчетУчетаДенежныхСредств(ОбъектУчета, ЗаполнятьЗначениемПоУмолчанию = Ложь) Экспорт
	
	СведенияОСчетеУчета = РегистрыСведений.СчетаУчетаДенежныхСредств.Получить(Новый Структура("ОбъектУчета", ОбъектУчета));
	Если ЗаполнятьЗначениемПоУмолчанию ИЛИ СведенияОСчетеУчета.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка() Тогда
		// получение счетов учета по умолчанию
		Если СведенияОСчетеУчета.СчетУчетаБУ.Пустая() 
		И НЕ ОбъектУчета.Пустая() Тогда
			Если ТипЗнч(ОбъектУчета) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				// Для банка	
				СведенияОСчетеУчета.СчетУчетаБУ = ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетахСоб;
			Иначе
				СведенияОСчетеУчета.СчетУчетаБУ = ПланыСчетов.Типовой.ДенежныеСредстваВКассе;
			КонецЕсли;
			
		    #Если Клиент Тогда
			// Проверка допустимости использования счета
			Если Не СчетМожноИспользоватьВПроводках(СведенияОСчетеУчета.СчетУчетаБУ) Тогда
				СведенияОСчетеУчета.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка();
			КонецЕсли; 			
			#КонецЕсли
		
		КонецЕсли;	
	КонецЕсли;	
	
	Если ЗаполнятьЗначениемПоУмолчанию ИЛИ СведенияОСчетеУчета.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка() Тогда
		// получение счетов учета по умолчанию
		Если СведенияОСчетеУчета.СчетУчетаНУ.Пустая() 
		И НЕ СведенияОСчетеУчета.СчетУчетаБУ.Пустая() Тогда
		
			СведенияОСчетеУчета.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СведенияОСчетеУчета.СчетУчетаБУ));		
			Если Не ЗначениеЗаполнено(СведенияОСчетеУчета.СчетУчетаНУ) Тогда
				СведенияОСчетеУчета.СчетУчетаНУ = ПланыСчетов.Налоговый.ДенежныеСредстваВКассеИНаРасчетныхСчетах;
			КонецЕсли;					
		    #Если Клиент Тогда
			// Проверка допустимости использования счета
			Если Не СчетМожноИспользоватьВПроводках(СведенияОСчетеУчета.СчетУчетаНУ) Тогда
				СведенияОСчетеУчета.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
			КонецЕсли; 			
			#КонецЕсли		
		КонецЕсли;	
	КонецЕсли;	 
	
	Возврат СведенияОСчетеУчета;
КонецФункции // ПолучитьСчетУчетаДенежныхСредств() 

// Устанавливает тип для переданного в качестве параметра элемента
// в зависимости от аналитики счета
//
// Параметры
// СтрокаТч - строка табличной части
// Счет  – счет для которого назначается аналитика
// ИмяСубконто - <Строка> – полное имя реквизита аналитики
// НомерАналитики - <Число> – порядковый номер субконто счета
//                                 
Процедура НазначитьТипАналитикиСчета(СтрокаТч, Счет, ИмяСубконто, НомерАналитики = 1) Экспорт

	ВидыСубконтоСчета = Счет.ВидыСубконто;
	
	Если НомерАналитики <= ВидыСубконтоСчета.Количество() тогда		
		ОграничениеТипа = ВидыСубконтоСчета [НомерАналитики - 1].ВидСубконто.ТипЗначения;		
		СтрокаТч[ИмяСубконто]  = ОграничениеТипа.ПривестиЗначение(СтрокаТч[ИмяСубконто]);							
	Иначе
		СтрокаТч[ИмяСубконто] = Неопределено;
	КонецЕсли;	

КонецПроцедуры // НазначитьТипАналитикиСчета()

// Устанавливает типы субконто при изменении счета
//
// Параметры
// СтрокаТч - строка табличной части
// Счет  – счет для которого необходимо назначить аналитику
// ИмяСубконто - <Строка> –имя реквизита аналитики без нумератора
//
Процедура НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТч, Счет, ИмяСубконто, КоличествоАналитики = 1) Экспорт

	ВидыСубконтоСчета = Счет.ВидыСубконто;
	
	Для Ном = 1 по КоличествоАналитики Цикл		
		НазначитьТипАналитикиСчета(СтрокаТч, Счет, ИмяСубконто + Ном, Ном);		
	КонецЦикла;

КонецПроцедуры // НазначитьТипДляГруппыНумерованнойАналитикиСчета()

// Функция возвращает остаток по счету бухгалтерского учета
// Возвращаемое значение - таблица значений в развороте по аналитике с учетом фильтра
Функция ПолучитьОстатокПоСчету(	Организация, СтруктурноеПодразделение, Период, Счет, Валюта = Неопределено, Субконто1 = Неопределено, 
								Субконто2 = Неопределено, Субконто3 = Неопределено, ЗнакФильтрПоОстаткам = 0) Экспорт

	ВидПланаСчетов = Счет.Метаданные().Имя;

	Субконто    = Новый Массив(3);
	Субконто[0] = Субконто1;
	Субконто[1] = Субконто2;
	Субконто[2] = Субконто3;

	ФильтрПоСубконто = "";

	Для Каждого ТекВидСубконто из Счет.ВидыСубконто Цикл
		Если Не(ТекВидСубконто.ТолькоОбороты) Тогда
			Если Не(Субконто[ТекВидСубконто.НомерСтроки-1] = Неопределено) тогда
				ФильтрПоСубконто =	ФильтрПоСубконто + " И Субконто" + ТекВидСубконто.НомерСтроки + 
									" = &Субконто" + ТекВидСубконто.НомерСтроки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ВыбиратьВалюту			= (НЕ Счет.Метаданные().ПризнакиУчета.Найти("Валютный") = Неопределено);
	ВыбиратьВалютнуюСумму	= (НЕ Метаданные.РегистрыБухгалтерии[ВидПланаСчетов].Ресурсы.Найти("ВалютнаяСумма") = Неопределено);
	ОтборПоОрганизации		= (НЕ Метаданные.РегистрыБухгалтерии[ВидПланаСчетов].Измерения.Найти("Организация") = Неопределено);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Период"     , Период);
	Запрос.УстановитьПараметр("Счет"       , Счет);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("Субконто1"  , Субконто[0]);
	Запрос.УстановитьПараметр("Субконто2"  , Субконто[1]);
	Запрос.УстановитьПараметр("Субконто3"  , Субконто[2]);
	Запрос.УстановитьПараметр("Валюта"     , Валюта);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Счет,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Выразить(СУММА((ВЫБОР 
	|			КОГДА СуммаОстаток ЕСТЬ Null 
	|			ТОГДА 0
	|		ИНАЧЕ
	|			СуммаОстаток
	|		КОНЕЦ)) как число) КАК СуммаОстаток
	|  "+?(ВыбиратьВалюту,",  ВЫБОР 
	|		КОГДА Счет.Валютный = Истина ТОГДА 
	|			Валюта
	|		ИНАЧЕ
	|			Неопределено
	|		КОНЕЦ Валюта","")+"
	|	"+?(ВыбиратьВалютнуюСумму,",  Выразить(СУММА(ВЫБОР 
	|			КОГДА ВалютнаяСуммаОстаток ЕСТЬ Null 
	|			ТОГДА 0
	|		ИНАЧЕ
	|			ВалютнаяСуммаОстаток
	|		КОНЕЦ)как Число) КАК ВалютнаяСуммаОстаток","")+"
	|ИЗ
	|	РегистрБухгалтерии."+ВидПланаСчетов+".Остатки(&Период, Счет = &Счет, , Истина = Истина  
	|		"		+ ?(ОтборПоОрганизации," И Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение","") +"
	|		"     	+ ?(НЕ ЗначениеЗаполнено(Валюта) ИЛИ НЕ Счет.Валютный,""," И Валюта = &Валюта ") + "
	|	    " 		+ ФильтрПоСубконто + ") КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Счет,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3
	|  "+?(ВыбиратьВалюту," ,Валюта","")+"
	|УПОРЯДОЧИТЬ ПО
	|	Счет,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3
	|  "+?(ВыбиратьВалюту," ,Валюта","")+"
	|";
	
	ВыборкаОстатков = Запрос.Выполнить();

	Остатки = ВыборкаОстатков.Выгрузить();
	Если Остатки.Колонки.Найти("ВалютнаяСуммаОстаток") = Неопределено Тогда
		Остатки.Колонки.Добавить("ВалютнаяСуммаОстаток", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		Остатки.ЗагрузитьКолонку(Остатки.ВыгрузитьКолонку("СуммаОстаток"),"ВалютнаяСуммаОстаток");
	КонецЕсли; 
	
	Если НЕ(ЗнакФильтрПоОстаткам = 0) тогда

		КУдалению = Новый Массив;

		Для каждого Остаток из Остатки Цикл

			Если ((ЗнакФильтрПоОстаткам > 0) = (?(НЕ ЗначениеЗаполнено(Валюта),Остаток.СуммаОстаток,Остаток.ВалютнаяСуммаОстаток) > 0)) тогда

				Если ЗнакФильтрПоОстаткам < 0 тогда
					Остаток.СуммаОстаток         = -Остаток.СуммаОстаток;
					Остаток.ВалютнаяСуммаОстаток = -Остаток.ВалютнаяСуммаОстаток;
				КонецЕсли;

			Иначе
				КУдалению.Добавить(Остаток);

			КонецЕсли;

		КонецЦИкла;

		Для каждого Остаток из КУдалению цикл
			Остатки.Удалить(Остаток);
		КонецЦикла;

	КонецЕсли;

	Возврат Остатки;

КонецФункции // ПолучитьОстатокПоСчету()

// Заполняет в соответствие с переданными ограничениями список счетов учета денежных средств,
// из которых будет производиться выбор пользователем в форме документа
//
// Параметры
//  МассивСчетовОтбора		 		– <Массив> – массив счетов-групп. В результат функции попадут субсчета этих счетов 
//  МассивСчетовИсключений		 		– <Массив> – массив счетов, которые будут исключены из отбора 
//  ОтборПоПризнакуВалютный	 		– <Булево> – нужен ли дополнительный отбор среди выбранных счетов по признаку "Валютный" 
//  СчетОтбораПоПризнакуВалютный 	– <ПланыСчетов.Валютный> – счет, в соответствие в признаком "Валютный" которого
//                              	будет ограничиваться список - результат функции
//
// Возвращаемое значение:
//   <СписокЗначений> – список счетов, среди которых будет производиться выбор в форме документа
//
Функция ЗаполнитьСписокВыбораСчетов(МассивСчетовОтбора, ОтборПоПризнакуВалютный = Ложь, СчетОтбораПоПризнакуВалютный = Неопределено,МассивСчетовИсключений = Неопределено, ИмяПланаСчетов = "Типовой") Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетовОтбора", МассивСчетовОтбора);
	Запрос.УстановитьПараметр("МассивСчетовИсключений", МассивСчетовИсключений);
	
	ОтбиратьПоПризнакуВалютный = ОтборПоПризнакуВалютный 
								И ТипЗнч(СчетОтбораПоПризнакуВалютный) = Тип("ПланСчетовСсылка.Типовой") 
								И НЕ СчетОтбораПоПризнакуВалютный.Пустая();
		
	Запрос.УстановитьПараметр("ОтбиратьПоПризнакуВалютный", ОтбиратьПоПризнакуВалютный);
	   
	Если ОтбиратьПоПризнакуВалютный Тогда
		Запрос.УстановитьПараметр("Валютный", СчетОтбораПоПризнакуВалютный.Валютный);
	Иначе
		Запрос.УстановитьПараметр("Валютный", Неопределено);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Типовой.Ссылка КАК Счет,
	|	Типовой.Код КАК Код,
	|	Типовой.Наименование КАК Наименование
	|ИЗ
	|	ПланСчетов." + ИмяПланаСчетов +" КАК Типовой
	|ГДЕ
	|	Типовой.Ссылка В ИЕРАРХИИ (&МассивСчетовОтбора)
	|	И (НЕ Типовой.ЗапретитьИспользоватьВПроводках) ";
	Если ИмяПланаСчетов = "Типовой" Тогда
		Запрос.Текст = Запрос.Текст + "	
	|	И (НЕ &ОтбиратьПоПризнакуВалютный
	|			ИЛИ Типовой.Валютный = &Валютный)";
	КонецЕсли;
		Запрос.Текст = Запрос.Текст + "	
	|   И Типовой.Ссылка Не В (&МассивСчетовИсключений)
	|   И (НЕ(Типовой.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ СчетРодитель.Родитель ИЗ ПланСчетов." +  ИмяПланаСчетов + " КАК СчетРодитель ГДЕ НЕ(СчетРодитель.Родитель = НЕОПРЕДЕЛЕНО) )))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	СписокВыбора = Новый СписокЗначений;

	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		СписокВыбора.Добавить(Результат.Счет, Результат.Код + " (" + Результат.Наименование + ")");
	КонецЦикла;
	
	Возврат СписокВыбора;

КонецФункции // ЗаполнитьСписокВыбораСчетов()

// Функция возвращает структуру с параметрами учетной политики.
//
Функция ПолучитьПодразделениеДляРеглОпераций(КонДата, Отказ, Организация) Экспорт

	ПодразделениеДляРеглОпераций = Неопределено;
	
	// проверим, ведется ли учет в разрезе подразделений, если нет то ничего получать не надо
	// достаточно лишь проверить один счет, так как везде аналитика устанавливается одновременно
	Счет6000 = ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг_;
	ВедетсяУчетПоПодразделениям = ?(Счет6000.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения, "ВидСубконто") = Неопределено, Ложь, Истина);

	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		Отказ = Истина;
		Возврат ПодразделениеДляРеглОпераций;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонДата) Тогда
		
		Отказ = Истина;
		Возврат ПодразделениеДляРеглОпераций;
		
	КонецЕсли;

	// получим параметры уч.политики по БУ
	УчетнаяПолитика=глЗначениеПеременной("глУчетнаяПолитикаПоБухгалтерскомуУчету");	
			
	УчетнаяПолитикаОрганизации = УчетнаяПолитика.НайтиСтроки(Новый Структура("Организация", Организация));
		
	Если УчетнаяПолитикаОрганизации.Количество() = 0 Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке("Не указаны параметры учетной политики " + "бухгалтерского учета ("+СокрЛП(Организация)+") на " + Формат(КонДата, "ДЛФ=DD"), Отказ);
		Возврат ПодразделениеДляРеглОпераций;	
	Иначе
			
		Номер = 0;
		ФлагОтказа = Истина;
		Для НомерСтроки = 1 По УчетнаяПолитикаОрганизации.Количество() Цикл
				
			Строка = УчетнаяПолитикаОрганизации.Получить(НомерСтроки - 1);
			Если Строка.Период <= КонДата Тогда
				Номер = НомерСтроки;
				ФлагОтказа = Ложь;
					
			Иначе 
				Прервать;
			КонецЕсли;
		КонецЦикла;
			
		Если Номер <> 0 Тогда
			Строка = УчетнаяПолитикаОрганизации.Получить(Номер - 1);
			ПодразделениеДляРеглОпераций = Строка.ПодразделениеДляРеглОпераций;
							
		КонецЕсли;
			
	КонецЕсли;
		
	Если ВедетсяУчетПоПодразделениям = Истина И ФлагОтказа = Истина Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указаны параметры учетной политики " + "бухгалтерского учета ("+СокрЛП(Организация)+") на " + Формат(КонДата, "ДЛФ=DD"), Отказ);
		Возврат ПодразделениеДляРеглОпераций;	
	КонецЕсли; 
	
	Если ВедетсяУчетПоПодразделениям = Истина И Не ЗначениеЗаполнено(ПодразделениеДляРеглОпераций) Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнен реквизит ""Подразделение для регламентных операций"" в учетной политике организации """ + СокрЛП(Организация) + """ на " + Формат(КонДата, "ДЛФ=DD"), Отказ);
		Возврат ПодразделениеДляРеглОпераций;	
	КонецЕсли;	
		
	Возврат ПодразделениеДляРеглОпераций;
	
КонецФункции // ПолучитьПараметрыУчетнойПолитики()

//Процедура заполняет "СчетУчетаНУ" по соответствии с "Счетом учета БУ". При этом, если соответствие на нейдено
//то подставляется значениме по умолчанию, если оно было задано
//
Функция ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетУчетаБУ, Дата, ЗначениеСчетаНУПоУмолчанию = Неопределено) Экспорт
	СчетУчетаНУ = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаБУ), , , Дата);
	Если Не ЗначениеЗаполнено(СчетУчетаНУ) И  НЕ ЗначениеСчетаНУПоУмолчанию = Неопределено Тогда
		СчетУчетаНУ  = ЗначениеСчетаНУПоУмолчанию;
	КонецЕсли;  	  
	Возврат СчетУчетаНУ;
КонецФункции

#Если Клиент тогда

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ СО СЧЕТАМИ И СУБКОНТО В ФОРМАХ И ЭЛЕМЕНТАХ УПРАВЛЕНИЯ

// Процедура установки типа и доступности субконто в зависимости от выбранного счета
//
Процедура ПриВыбореСчетаВТабличномПоле(	Счет, Субконто1, ЭлементДиалогаСубконто1, Субконто2, 
										ЭлементДиалогаСубконто2, Субконто3, ЭлементДиалогаСубконто3, 
										ЭлементДиалогаСчет = НЕОПРЕДЕЛЕНО, ТолькоПросмотр = ЛОЖЬ) Экспорт
	
	ЭлементыСубконто = Новый Структура("Субконто1,ЭлементДиалогаСубконто1,Субконто2,ЭлементДиалогаСубконто2,Субконто3,ЭлементДиалогаСубконто3", Субконто1, ЭлементДиалогаСубконто1, Субконто2, ЭлементДиалогаСубконто2, Субконто3, ЭлементДиалогаСубконто3);
	
	ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
	
	Для Сч = 1 По ЧислоАктивныхСубконто Цикл
		ТипСубк = Счет.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
		
		ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ТолькоПросмотр = ТолькоПросмотр;
		
		Если ТипЗнч(ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч]) = Тип("ПолеВвода") Тогда
			ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ВыбиратьТип = (ТипСубк.Типы().Количество() > 1);
		Иначе
			ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ЭлементУправления.ВыбиратьТип = (ТипСубк.Типы().Количество() > 1);
		КонецЕсли; 
			
		// Чтобы не устанавливался флаг модифицированности при открытии формы
		Если ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]) <> ЭлементыСубконто["Субконто" + Сч] Тогда
			ЭлементыСубконто["Субконто" + Сч] = ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]);
		КонецЕсли;	
				
	КонецЦикла;
	
	Для Сч = (ЧислоАктивныхСубконто + 1) По 3 Цикл
			
		Если Не ЭлементыСубконто["Субконто" + Сч] = Неопределено Тогда
			ЭлементыСубконто["Субконто" + Сч] = Неопределено;
		КонецЕсли;
		
		ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ТолькоПросмотр = Истина;
		
	КонецЦикла;
	
	Если ЭлементДиалогаСчет <> Неопределено Тогда
		ЭлементДиалогаСчет.ТолькоПросмотр = ТолькоПросмотр;
	КонецЕсли;

	Если Не Субконто1 = ЭлементыСубконто.Субконто1 Тогда
		Субконто1 = ЭлементыСубконто.Субконто1;
	КонецЕсли;
	
	Если Не Субконто2 = ЭлементыСубконто.Субконто2 Тогда
		Субконто2 = ЭлементыСубконто.Субконто2;
	КонецЕсли;
	
	Если Не Субконто3 = ЭлементыСубконто.Субконто3 Тогда
		Субконто3 = ЭлементыСубконто.Субконто3;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореСчетаВТабличномПоле()

Процедура УстановитьДоступностьЯчеекПоСчету(Счет, Субконто1, Субконто2, Субконто3) Экспорт
	
	ЭлементыСубконто = Новый Структура("Субконто1,Субконто2,Субконто3", Субконто1, Субконто2, Субконто3);
	ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
	
	Для Сч = 1 По 3 Цикл
		ЭлементыСубконто["Субконто" + Сч].Доступность =  (Сч <= ЧислоАктивныхСубконто);
	КонецЦикла;
	
КонецПроцедуры // УстановитьДоступностьЯчеекПоСчету()

// Назначает видимость ячейкам строки табличного поля, соответствующим субконто
// в зависимлсти от счета. Сведения о счете передаются через параметр СведенияОСчете
// Используется для табличных полей, содержащих колонки типа Счет и соответствующие ему субконто
// при выводе строки
//
// Параметры:
//	ОформлениеСтроки 	- оформление строки
//  ДтКт 				- строка "Дт", "Кт" или "" - часть имени колонки табличного поля
// 						для колонок табличного поля поддерживаются имена 
//						типа СубконтоДт1, СубконтоКт1, Субконто1...
//  СведенияОСчете 		- структура
//					  	КоличествоСубконто - число
//                    	ТипСубконто1 - описание типа
//                    	ТипСубконто2 - описание типа
//                    	ТипСубконто3 - описание типа
//					    ВидСубконто1Представление - представление вида субконто - в данной процедуре не используется
//					    ВидСубконто2Представление - представление вида субконто - в данной процедуре не используется
//					    ВидСубконто3Представление - представление вида субконто - в данной процедуре не используется
//
Процедура НазначитьВидимостьСубконто(ОформлениеСтроки, ДтКт, СведенияОСчете) Экспорт

	Для СчетчикСубконто = 1 По 3 Цикл
		ОформлениеСтроки.Ячейки["Субконто" + ДтКт + СчетчикСубконто].Видимость = СведенияОСчете.КоличествоСубконто >= СчетчикСубконто;
		ОформлениеСтроки.Ячейки["Субконто" + ДтКт + СчетчикСубконто].ТолькоПросмотр = НЕ СведенияОСчете.КоличествоСубконто >= СчетчикСубконто;
	КонецЦикла;

КонецПроцедуры // НазначитьВидимостьСубконто()

// Процедура отрабатывает установку отбора по владельцу-организации 
// для первого субконто.
//
//  Также процедура устанавливает отборы в формах выбора партий номенклатуры, 
// документов расчетов с контрагентами и партий материалов в эксплуатации.
//
// Параметры:
//  Элемент      - элемент управления, для которого устанавливается отбор
//  СтандартнаяОбработка - Булево, признак стандартной обработки выбора
//                 в элементе формы
//  СписокПараметров -СписокЗначений, в котором передаются параметры
//                 отбора для форм выбора партий, документов расчетов
//                 с контрагентами
//  ОграничениеТипаЭлемента - ОписаниеТипов, содержащее список допустимых
//                 типов элемента управления
//
Процедура ОбработатьВыборСубконто(	Элемент, СтандартнаяОбработка, Организация, СписокПараметров = Неопределено, 
									ОграничениеТипаЭлемента = Неопределено, СтруктурноеПодразделение = Неопределено) Экспорт
	
	Если не ТипЗнч(ОграничениеТипаЭлемента) = Тип("ОписаниеТипов") тогда
		ТипЭлемента = ТипЗнч(Элемент.Значение);
		
		Если ТипЭлемента = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		ОграничениеТипаЭлемента = Элемент.ОграничениеТипа;
		
	ИначеЕсли ОграничениеТипаЭлемента.Типы().Количество() > 0 тогда
		ТипЭлемента = ТипЗнч(Элемент.Значение);
		Если ?(ТипЭлемента = Неопределено, Истина, не ОграничениеТипаЭлемента.СодержитТип(ТипЭлемента)) Тогда
			ТипЭлемента = ОграничениеТипаЭлемента.Типы()[0];
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли;
	
	
	Если ТипЭлемента = Тип("СправочникСсылка.СтатьиЗатрат") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.СтатьиЗатрат.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.НачальноеЗначениеВыбора      = Элемент.Значение;
		ФормаВыбора.ПараметрВыборГруппИЭлементов =  ИспользованиеГруппИЭлементов.Элементы;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.ПараметрОтборПоВладельцу = Организация;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
		ФормаВыбора.НачальноеЗначениеВыбора  = Элемент.Значение;

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.Кассы") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.Кассы.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.ПараметрОтборПоВладельцу = Организация;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
		ФормаВыбора.НачальноеЗначениеВыбора  = Элемент.Значение;
		
	ИначеЕсли Метаданные.Справочники.Найти("ПодразделенияОрганизаций")<>Неопределено И ТипЭлемента = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.ПодразделенияОрганизаций.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.ПараметрОтборПоВладельцу = Организация;
		Если СтруктурноеПодразделение <> Неопределено Тогда
			ФормаВыбора.СтруктурноеПодразделение = СтруктурноеПодразделение;
		КонецЕсли;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
		ФормаВыбора.НачальноеЗначениеВыбора  = ?(Элемент.Значение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), СтруктурноеПодразделение, Элемент.Значение);

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,Элемент,);

		//Если Организация <> Неопределено Тогда
		//	ФормаВыбора.СправочникСписок.Отбор.Организация.Значение      = Организация;
		//	ФормаВыбора.СправочникСписок.Отбор.Организация.Использование = Истина;
		//	ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
		//Иначе
			ФормаВыбора.СправочникСписок.Отбор.Организация.Использование = Ложь;
		//КонецЕсли;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
				
		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
			Если СписокПараметров.Свойство("Контрагент") Тогда
				Если ТипЗнч(СписокПараметров.Контрагент) =  Тип("СправочникСсылка.Контрагенты") Тогда
					ФормаВыбора.СправочникСписок.Отбор.Владелец.Значение      = СписокПараметров.Контрагент;
					ФормаВыбора.СправочникСписок.Отбор.Владелец.Использование = Истина;
					ФормаВыбора.СправочникСписок.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе 
			Попытка
				Если ЗначениеЗаполнено(Элемент.ВыборПоВладельцу) И ТипЗнч(Элемент.ВыборПоВладельцу) = Тип("СправочникСсылка.Контрагенты") Тогда  
					ФормаВыбора.СправочникСписок.Отбор.Владелец.Значение      = Элемент.ВыборПоВладельцу;
					ФормаВыбора.СправочникСписок.Отбор.Владелец.Использование = Истина;
					ФормаВыбора.СправочникСписок.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли; 
		
		ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
		
	ИначеЕсли ОграничениеТипаЭлемента = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии.ТипЗначения
		ИЛИ   ТипЭлемента = Тип("ДокументСсылка.Партия") Тогда

		СтандартнаяОбработка    = Ложь;
		ФормаВыбора             = Документы.Партия.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.Организация = Организация;

		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
			ФормаВыбора.Номенклатура = ?(СписокПараметров.Свойство("Номенклатура")	, СписокПараметров.Номенклатура	, Неопределено);
			ФормаВыбора.Склад        = ?(СписокПараметров.Свойство("Склад")			, СписокПараметров.Склад		, Неопределено);
			Если СписокПараметров.Свойство("ВидСубконто") Тогда
				ФормаВыбора.ВидСубконто  = СписокПараметров.ВидСубконто;			
			ИначеЕсли ОграничениеТипаЭлемента = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии.ТипЗначения тогда
				ФормаВыбора.ВидСубконто  = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии;
			КонецЕсли;
			ФормаВыбора.КонПериода   = ?(СписокПараметров.Свойство("Дата")			, СписокПараметров.Дата			, Неопределено);
		КонецЕсли;
        ФормаВыбора.НачальноеЗначениеВыбора  = Элемент.Значение;
		
	ИначеЕсли ОграничениеТипаЭлемента = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами.ТипЗначения	
		ИЛИ   ТипЭлемента = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда

		ОграничениеТипаЭлемента = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами.ТипЗначения;

		СтандартнаяОбработка = Ложь;

		СтруктураПараметров  = Новый Структура("Организация, Контрагент, ДоговорКонтрагента,КонецПериода,СчетДляОпределенияОстатков,СторонаСчета");

		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда

			СтруктураПараметров.Вставить("Организация", Организация);

			Если СписокПараметров.Свойство("Контрагент") тогда
				СтруктураПараметров.Вставить("Контрагент", СписокПараметров.Контрагент);
			КонецЕсли;

			Если СписокПараметров.Свойство("ДоговорКонтрагента") тогда
				СтруктураПараметров.Вставить("ДоговорКонтрагента", СписокПараметров.ДоговорКонтрагента);
			КонецЕсли;

			Если СписокПараметров.Свойство("Дата") тогда
				Если ТипЗнч(СписокПараметров.Дата) = Тип("Дата") тогда
					СтруктураПараметров.Вставить("КонецПериода", СписокПараметров.Дата - 1);
				КонецЕсли;
			КонецЕсли;

			Если СписокПараметров.Свойство("СчетУчета") тогда
				СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", СписокПараметров.СчетУчета);
			КонецЕсли;

			Если СписокПараметров.Свойство("СторонаПроводки") тогда
				СтруктураПараметров.Вставить("СторонаСчета", ?(СписокПараметров.СторонаПроводки = "Дт", 1, 0));
			КонецЕсли;

		КонецЕсли;

		РаботаСДиалогами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, ОграничениеТипаЭлемента);

		Возврат;

	КонецЕсли;

	Если Не СтандартнаяОбработка Тогда 
		
		Попытка
			ФормаВыбора.ПараметрВыборГруппИЭлементов = Элемент.ВыборГруппИЭлементов;
		Исключение
		КонецПопытки;

		ФормаВыбора.Открыть();
	КонецЕсли;

КонецПроцедуры // ОбработатьВыборСубконто()

Процедура ОткрытьЖурналПроводок(Ссылка, Регистр = "БУ") Экспорт

	Если Регистр = "БУ" Тогда

		ФормаСписка = РегистрыБухгалтерии.Типовой.ПолучитьФормуСписка();
		
		Если ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.ТипЗначения.СодержитТип(ТипЗнч(Ссылка)) Тогда
			// Отбор по регистратору
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.Значение      = Ссылка;
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.ВидСравнения  = ВидСравнения.Равно;
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.Использование = Истина;
			
			ФормаСписка.ЭлементыФормы.РегистрБухгалтерииСписок.НастройкаОтбора["Регистратор"].Доступность = Ложь;
			
			// Отбор по организации
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", Ссылка.Метаданные()) Тогда
				Организация = Ссылка.Организация;
				ФормаСписка.РегистрБухгалтерииСписок.Отбор.Организация.Значение      = Организация;
				ФормаСписка.РегистрБухгалтерииСписок.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
				ФормаСписка.РегистрБухгалтерииСписок.Отбор.Организация.Использование = Истина;
			КонецЕсли;
			
			ФормаСписка.Открыть(); 			
		КонецЕсли;

	Иначе

		ФормаСписка = РегистрыБухгалтерии.Налоговый.ПолучитьФормуСписка();

		Если ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.ТипЗначения.СодержитТип(ТипЗнч(Ссылка)) Тогда
			
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.Значение      = Ссылка;
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.ВидСравнения  = ВидСравнения.Равно;
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.Использование = Истина;
			
			ФормаСписка.ЭлементыФормы.РегистрБухгалтерииСписок.НастройкаОтбора["Регистратор"].Доступность = Ложь;
			
			// Отбор по организации
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", Ссылка.Метаданные()) Тогда
				Организация = Ссылка.Организация;
				ФормаСписка.РегистрБухгалтерииСписок.Отбор.Организация.Значение      = Организация;
				ФормаСписка.РегистрБухгалтерииСписок.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
				ФормаСписка.РегистрБухгалтерииСписок.Отбор.Организация.Использование = Истина;
			КонецЕсли;
			
			ФормаСписка.Открыть();
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОткрытьЖурналПроводок()

// Получает сумму списания активов для заполнения печатных форм документов
//
Функция ПолучитьСуммуСписанияАктивов(ТекДокумент) Экспорт
	
	ПроводкиДокумента = Новый ТаблицаЗначений;
	ПроводкиДокумента.Колонки.Добавить("Номенклатура");
	ПроводкиДокумента.Колонки.Добавить("Количество");
	ПроводкиДокумента.Колонки.Добавить("Сумма");
	
	ТаблицаСуммСписания = Новый ТаблицаЗначений;
	ТаблицаСуммСписания.Колонки.Добавить("Номенклатура");
	ТаблицаСуммСписания.Колонки.Добавить("Количество");
	ТаблицаСуммСписания.Колонки.Добавить("Сумма");
	
	Если ТекДокумент.Проведен Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
		|	ТиповойДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
		|	СУММА(ТиповойДвиженияССубконто.КоличествоКт) КАК КоличествоКт,
		|	СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Типовой.ДвиженияССубконто(&ДатаНач, &ДатаКон, Регистратор = &Регистратор) КАК ТиповойДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	ТиповойДвиженияССубконто.СубконтоКт1,
		|	ТиповойДвиженияССубконто.СубконтоКт2";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ДатаНач", ТекДокумент.Дата);
		Запрос.УстановитьПараметр("ДатаКон", ТекДокумент.Дата);
		Запрос.УстановитьПараметр("Регистратор", ТекДокумент.Ссылка);
		
		
		ПроводкиДокумента = Запрос.Выполнить().Выгрузить();
		Для Каждого ПроводкаДокумента Из ПроводкиДокумента Цикл
			
			Если ТипЗнч(ПроводкаДокумента.СубконтоКт1) = Тип("СправочникСсылка.Номенклатура") Тогда
				Строка = ТаблицаСуммСписания.Добавить();
				Строка.Номенклатура = ПроводкаДокумента.СубконтоКт1;
				Строка.Количество   = ПроводкаДокумента.КоличествоКт;
				Строка.Сумма        = ПроводкаДокумента.Сумма;
			КонецЕсли;
			
			Если ТипЗнч(ПроводкаДокумента.СубконтоКт2) = Тип("СправочникСсылка.Номенклатура") Тогда
				Строка = ТаблицаСуммСписания.Добавить();
				Строка.Номенклатура = ПроводкаДокумента.СубконтоКт2;
				Строка.Количество   = ПроводкаДокумента.КоличествоКт;
				Строка.Сумма        = ПроводкаДокумента.Сумма;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаСуммСписания.Свернуть("Номенклатура", "Количество, Сумма");
		
	КонецЕсли;
	
  Возврат  ТаблицаСуммСписания;
  
КонецФункции // ПолучитьСуммуСписанияАктивов()

// Процедура устанавливает видимость ячеек для ввода аналитики счета
//
Процедура НастроитьВидимостьЯчеекАналитикиСчета(ОформлениеСтроки, СчетБУ = НЕОПРЕДЕЛЕНО, СчетНУ = НЕОПРЕДЕЛЕНО, ИмяАналитикиБУ = "БУ", ИмяАналитикиНУ = "НУ", ОтражатьВНалоговомУчете = Ложь) Экспорт
	
	КоличествоСубконтоСчетаБУ = ?(СчетБУ = Неопределено, 0, СчетБУ.ВидыСубконто.Количество());
	КоличествоСубконтоСчетаНУ = ?(СчетНУ = Неопределено, 0, СчетНУ.ВидыСубконто.Количество());
	
	ИмяЯчейкиВидаСубконтоБУ = "ВидАналитики" + ИмяАналитикиБУ;		
	ИмяЯчейкиВидаСубконтоНУ = "ВидАналитики" + ИмяАналитикиНУ;		
	
	ОформлениеСтроки.Ячейки[ИмяЯчейкиВидаСубконтоБУ].Видимость = Ложь;
	ОформлениеСтроки.Ячейки[ИмяЯчейкиВидаСубконтоНУ].Видимость = Ложь;
	
	Для Счетчик = 1 по 3 Цикл
		// Бухгалтерский учет		
		ИмяЯчейкиВидаСубконтоБУ = "ВидСубконто" + ИмяАналитикиБУ + Счетчик;		
		Если НЕ ОформлениеСтроки.Ячейки.Найти(ИмяЯчейкиВидаСубконтоБУ) = НЕОПРЕДЕЛЕНО Тогда
			Если КоличествоСубконтоСчетаБУ >= Счетчик Тогда
				ОформлениеСтроки.Ячейки[ИмяЯчейкиВидаСубконтоБУ].УстановитьТекст(СчетБУ.ВидыСубконто.Получить(Счетчик-1).ВидСубконто);
			Иначе
				ОформлениеСтроки.Ячейки[ИмяЯчейкиВидаСубконтоБУ].УстановитьТекст("");
			КонецЕсли;			
		КонецЕсли;			
		
		// Аналитика бухгалтерского учета
		ИмяЯчейкиСубконтоБУ = "Субконто" + ИмяАналитикиБУ + Счетчик;		
		Если НЕ ОформлениеСтроки.Ячейки.Найти(ИмяЯчейкиСубконтоБУ) = НЕОПРЕДЕЛЕНО Тогда			
			//ОформлениеСтроки.Ячейки[ИмяЯчейкиСубконтоБУ].ТолькоПросмотр = НЕ КоличествоСубконтоСчетаБУ >= Счетчик;			
		КонецЕсли;			
		
		// Налоговый учет
		ИмяЯчейкиНУ = "ВидСубконто" + ИмяАналитикиНУ + Счетчик;
		Если НЕ ОформлениеСтроки.Ячейки.Найти(ИмяЯчейкиНУ) = НЕОПРЕДЕЛЕНО Тогда			
			Если КоличествоСубконтоСчетаНУ >= Счетчик Тогда
				ОформлениеСтроки.Ячейки[ИмяЯчейкиНУ].УстановитьТекст(СчетНУ.ВидыСубконто.Получить(Счетчик-1).ВидСубконто);
			Иначе
				ОформлениеСтроки.Ячейки[ИмяЯчейкиНУ].УстановитьТекст("");
			КонецЕсли;			
		КонецЕсли;	
		// Аналитика Налогового учета
		ИмяЯчейкиСубконтоНУ = "Субконто" + ИмяАналитикиНУ + Счетчик;		
		Если НЕ ОформлениеСтроки.Ячейки.Найти(ИмяЯчейкиСубконтоНУ) = НЕОПРЕДЕЛЕНО Тогда			
			//ОформлениеСтроки.Ячейки[ИмяЯчейкиСубконтоНУ].ТолькоПросмотр = НЕ КоличествоСубконтоСчетаНУ >= Счетчик;			
			ОформлениеСтроки.Ячейки[ИмяЯчейкиСубконтоНУ].Видимость = ОтражатьВНалоговомУчете;
		КонецЕсли;					
	КонецЦикла;	
	                        	
КонецПроцедуры // НастроитьВидимостьЯчеекАналитикиСчета()

#КонецЕсли

// Процедура проверяет принадлежность реквизита типа ПодразделениеОрганизации
// выбранной организации.
//
// Параметры:
//  ДокументОбъект - объект документ, в форме которого произошло событие
//  ТекПользователь - текущий пользователь, настройки которого используются
//                 по умолчанию
//  НазваниеРеквизитаСубконто - название проверяемого реквизита
//  Субконто     - значение проверяемого реквизита
//
Процедура ПроверитьСубконтоПодразделение(ДокументОбъект, ТекПользователь, Организация, НазваниеРеквизитаСубконто, Субконто)
	
	Если ТипЗнч(Субконто) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		
		ПодразделениеПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеПодразделениеОрганизации");
		
		// Если субконто не заполнено.
		Если НЕ ЗначениеЗаполнено(Субконто) Тогда
			
			// Если субконто сооответствует выбранной организации, подставляем его.
			Если ПодразделениеПоУмолчанию.Владелец = Организация Тогда
				ДокументОбъект[НазваниеРеквизитаСубконто] = ПодразделениеПоУмолчанию;
			КонецЕсли;
			
		Иначе // Если ПодразделениеОрганизации заполнено.
			
			// Если ПодразделениеОрганизации не соответствует выбранной организации.
			Если НЕ Субконто.Владелец = Организация Тогда
				
				// Если ПодразделениеПоУмолчанию сооответствует выбранной организации, подставляем его.
				Если ПодразделениеПоУмолчанию.Владелец = Организация Тогда
					ДокументОбъект[НазваниеРеквизитаСубконто] = ПодразделениеПоУмолчанию;
				Иначе // Выбрана не основная организация. ПодразделениеОрганизации нужно очистить.
					ДокументОбъект[НазваниеРеквизитаСубконто] = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
					ОбщегоНазначения.СообщитьОбОшибке("Значение в поле ""Подразделение"" не соответствует выбранной организации и было очищено.");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСубконтоПодразделение()

// Процедура проверяет владельца субконто "Подразделение"
//
// Параметры:
//	ДокументОбъект - объект документ в форме которого произошло событие
//  ТекПользователь - текущий пользователь, настройки которого используются
//                 по умолчанию
//  СтруктураРеквизитов - структура с названиеями и значениями реквизитов, 
//                 кот.необходимо проверить
//
Процедура ПроверитьВладельцаСубконтоПодразделение(	ДокументОбъект, ТекПользователь, Организация, 
													СтруктураРеквизитов) Экспорт

	Если СтруктураРеквизитов.Свойство("НазваниеСубконтоБУ1") И СтруктураРеквизитов.Свойство("СубконтоБУ1") Тогда
		ПроверитьСубконтоПодразделение(ДокументОбъект, ТекПользователь, Организация, СтруктураРеквизитов.НазваниеСубконтоБУ1, СтруктураРеквизитов.СубконтоБУ1);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("НазваниеСубконтоБУ2") И СтруктураРеквизитов.Свойство("СубконтоБУ2") Тогда
		ПроверитьСубконтоПодразделение(ДокументОбъект, ТекПользователь, Организация, СтруктураРеквизитов.НазваниеСубконтоБУ2, СтруктураРеквизитов.СубконтоБУ2);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("НазваниеСубконтоБУ3") И СтруктураРеквизитов.Свойство("СубконтоБУ3") Тогда
		ПроверитьСубконтоПодразделение(ДокументОбъект, ТекПользователь, Организация, СтруктураРеквизитов.НазваниеСубконтоБУ3, СтруктураРеквизитов.СубконтоБУ3);
	КонецЕсли;
	 	 
КонецПроцедуры  // ПроверитьВладельцаСубконтоПодразделение()

// Процедура устанавливает значение определенному реквизиту
//
// Параметры:
//  ДокументОбъект - объект документ, в форме которого произошло событие
//  НазваниеРеквизитаСубконто - название устанавливаемого реквизита
//  Субконто     - значение устанавливаемого реквизита
//  ЗначениеСубконто - устанавливаемое значение
//
Процедура УстановитьПроизвольноеСубконто(ДокументОбъект, НазваниеРеквизитаСубконто, Субконто, ЗначениеСубконто)	
	
	Если ТипЗнч(Субконто) = ТипЗнч(ЗначениеСубконто) Тогда
		
		// Если субконто не заполнено.
		Если НЕ ЗначениеЗаполнено(Субконто) Тогда
			ДокументОбъект[НазваниеРеквизитаСубконто] = ЗначениеСубконто;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПроизвольноеСубконто()

// Процедура - обработчик события ПриИзменении счета в табличной части
//
// Параметры:
//	ДокументОбъект - объект документ в форме которого произошло событие
//  СтруктураРеквизитов - структура с названиеями и значениями реквизитов, 
//                 кот.необходимо проверить
//
Процедура ПроверитьУстановитьПроизвольноеСубконто(ДокументОбъект, СтруктураРеквизитов) Экспорт
	
	Если СтруктураРеквизитов.Свойство("НазваниеСубконтоБУ1") И СтруктураРеквизитов.Свойство("СубконтоБУ1") И СтруктураРеквизитов.Свойство("ЗначениеСубконто") Тогда
		УстановитьПроизвольноеСубконто(ДокументОбъект, СтруктураРеквизитов.НазваниеСубконтоБУ1, СтруктураРеквизитов.СубконтоБУ1, СтруктураРеквизитов.ЗначениеСубконто);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("НазваниеСубконтоБУ2") И СтруктураРеквизитов.Свойство("СубконтоБУ2") И СтруктураРеквизитов.Свойство("ЗначениеСубконто") Тогда
		УстановитьПроизвольноеСубконто(ДокументОбъект, СтруктураРеквизитов.НазваниеСубконтоБУ2, СтруктураРеквизитов.СубконтоБУ2, СтруктураРеквизитов.ЗначениеСубконто);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("НазваниеСубконтоБУ3") И СтруктураРеквизитов.Свойство("СубконтоБУ3") И СтруктураРеквизитов.Свойство("ЗначениеСубконто") Тогда
		УстановитьПроизвольноеСубконто(ДокументОбъект, СтруктураРеквизитов.НазваниеСубконтоБУ3, СтруктураРеквизитов.СубконтоБУ3,  СтруктураРеквизитов.ЗначениеСубконто);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьУстановитьПроизвольноеСубконто()

// Заполняет аналитику счета табличной части
// значениями по умолчанию
//
Процедура ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета ,ИмяАналитикиСчетовУчета, ИмяСчетаТабличнойЧасти, ИмяАналитикиТабличнойЧасти) Экспорт
	
	Для Счетчик = 1  По  3 Цикл			
		
		Если СтрокаТЧ[ИмяСчетаТабличнойЧасти].ВидыСубконто.Количество() >= Счетчик Тогда		
			// Заполняем значения аналитики номенклатура и Номенклатурная группа
			Если СтрокаТЧ[ИмяСчетаТабличнойЧасти].ВидыСубконто[Счетчик - 1].ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.НоменклатурныеГруппы")) Тогда
				СтрокаТЧ[ИмяАналитикиТабличнойЧасти + Счетчик]= СтрокаТЧ.Номенклатура.НоменклатурнаяГруппа;
			КонецЕсли;								
			Если СтрокаТЧ[ИмяСчетаТабличнойЧасти].ВидыСубконто[Счетчик - 1].ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
				СтрокаТЧ[ИмяАналитикиТабличнойЧасти + Счетчик]= СтрокаТЧ.Номенклатура;
			КонецЕсли;								
			// Прочую аналитику заполняем по данным регистра сведений "СчетаУчетаНоменклатуры"
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ[ИмяАналитикиТабличнойЧасти + Счетчик]) Тогда
				СтрокаТЧ[ИмяАналитикиТабличнойЧасти + Счетчик] = СчетаУчета[ИмяАналитикиСчетовУчета + Счетчик];
			КонецЕсли;	
		Иначе
			СтрокаТЧ[ИмяАналитикиТабличнойЧасти + Счетчик] = Неопределено;	
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ВЫБОРА

#Если Клиент Тогда

// Вызывается в обработчике события "Начало выбора" при выборе вида учета в НУ.
// Используется для ограничения возможности выбора пользователем элементов справочника
// постоянными разницами (ПР) в учете по налогу на прибыль
//
Процедура ВыборВидаУчетаНУ(Элемент, СтандартнаяОбработка)Экспорт
	СтандартнаяОбработка = Ложь;		
	ОтборПоВидуУчета = Справочники.ВидыУчетаНУ.ПР;   		
	ФормаВыбора = Справочники.ВидыУчетаНУ.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.УстановитьРодителя(ОтборПоВидуУчета);
	//ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;
	
	ФормаВыбора.Открыть();                           	
КонецПроцедуры	//ВыборВидаУчетаНУ()

// Вызывается в обработчике события "Начало выбора" при выборе счета.
// используется для получения списка только балансовых или только
// забаланс
//
Процедура ВыборСчета(Элемент, СтандартнаяОбработка, Флаг) Экспорт

	СтандартнаяОбработка = Ложь;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Флаг", Флаг);
	Запрос.Текст = "ВЫБРАТЬ
	|	Типовой.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|
	|ГДЕ
	|	Типовой.Забалансовый = &Флаг";
	
	ВыборкаСчетов = Запрос.Выполнить().Выбрать();
	СписокСчетов  = Новый СписокЗначений;
	
	Пока ВыборкаСчетов.Следующий() Цикл
		СписокСчетов.Добавить(ВыборкаСчетов.Счет);
	КонецЦикла;

	ФормаВыбора = ПланыСчетов.Типовой.ПолучитьФормуВыбора("ФормаВыбора", Элемент, );

	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Значение      = СписокСчетов;
	ФормаВыбора.ЭлементыФормы.Список.НастройкаОтбора.Ссылка.Доступность = Ложь;
	ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;

	ФормаВыбора.Открыть();

Конецпроцедуры // ВыборСчета()

// Процедура выделяет незаполненные реквизиты проводки: субконто, валюту, количество и валютную сумму
//
Процедура УстановитьОформлениеНезаполненныхРеквизитовОперации(Элемент, ОформлениеСтроки, ДанныеСтроки, КэшСоответствиеСчетов, ВидУчета) Экспорт
	КоличествоСубконтоДт = Отчеты_БК.ОпределитьДляСчетаПоСоответсвиеКоличествоСубконто(ДанныеСтроки.СчетДт, КэшСоответствиеСчетов);
	КоличествоСубконтоКт = Отчеты_БК.ОпределитьДляСчетаПоСоответсвиеКоличествоСубконто(ДанныеСтроки.СчетКт, КэшСоответствиеСчетов);
	
	Для Счетчик = 1 По 3 Цикл
		// Дт
		Если Счетчик<=КоличествоСубконтоДт И НЕ ЗначениеЗаполнено(ОформлениеСтроки.Ячейки["СубконтоДт" + Счетчик].Значение)Тогда
			ОформлениеСтроки.Ячейки["СубконтоДт" + Счетчик].ОтметкаНезаполненного = Истина;
		Иначе	
			ОформлениеСтроки.Ячейки["СубконтоДт" + Счетчик].ОтметкаНезаполненного = Ложь;
		КонецЕсли;					
		// Кт
		Если Счетчик<=КоличествоСубконтоКт И НЕ ЗначениеЗаполнено(ОформлениеСтроки.Ячейки["СубконтоКт" + Счетчик].Значение) Тогда
			ОформлениеСтроки.Ячейки["СубконтоКт" + Счетчик].ОтметкаНезаполненного = Истина;
		Иначе	
			ОформлениеСтроки.Ячейки["СубконтоКт" + Счетчик].ОтметкаНезаполненного = Ложь;
		КонецЕсли;					
	КонецЦикла;			
	
	Если ВидУчета = "БУ" Тогда
		// валюта и валютная сумма
		ОформлениеСтроки.Ячейки.ВалютаДт.ОтметкаНезаполненного 			= (НЕ ДанныеСтроки.ВалютаДт = NULL  И НЕ ЗначениеЗаполнено(ДанныеСтроки.ВалютаДт));
		ОформлениеСтроки.Ячейки.ВалютнаяСуммаДт.ОтметкаНезаполненного 	= (НЕ ДанныеСтроки.ВалютаДт = NULL  И НЕ ЗначениеЗаполнено(ДанныеСтроки.ВалютнаяСуммаДт)); 
		
		ОформлениеСтроки.Ячейки.ВалютаКт.ОтметкаНезаполненного 			= (НЕ ДанныеСтроки.ВалютаКт = NULL  И НЕ ЗначениеЗаполнено(ДанныеСтроки.ВалютаКт));
		ОформлениеСтроки.Ячейки.ВалютнаяСуммаКт.ОтметкаНезаполненного 	= (НЕ ДанныеСтроки.ВалютаКт = NULL  И НЕ ЗначениеЗаполнено(ДанныеСтроки.ВалютнаяСуммаКт)); 
		
		// количество
		ОформлениеСтроки.Ячейки.КоличествоДт.ОтметкаНезаполненного = (НЕ ДанныеСтроки.КоличествоДт = NULL  И НЕ ЗначениеЗаполнено(ДанныеСтроки.КоличествоДт));
		ОформлениеСтроки.Ячейки.КоличествоКт.ОтметкаНезаполненного = (НЕ ДанныеСтроки.КоличествоКт = NULL  И НЕ ЗначениеЗаполнено(ДанныеСтроки.КоличествоКт));
	КонецЕсли;
	
	Если ВидУчета = "НУ" Тогда
		// вид учета НУ
		ОформлениеСтроки.Ячейки.ВидУчетаДт.ОтметкаНезаполненного 		= НЕ ЗначениеЗаполнено(ДанныеСтроки.ВидУчетаДт) И ЗначениеЗаполнено(ДанныеСтроки.СчетДт);
				
		ОформлениеСтроки.Ячейки.ВидУчетаКт.ОтметкаНезаполненного 		= НЕ ЗначениеЗаполнено(ДанныеСтроки.ВидУчетаКт) И ЗначениеЗаполнено(ДанныеСтроки.СчетКт);
	КонецЕсли;	
КонецПроцедуры // УстановитьОформлениеНезаполненныхРеквизитов

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ФОРМИРОВАНИЯ РАСШИФРОВОК К СПОСОБАМ ОТРАЖЕНИЯ
// 

// Формирует представление переданного способа отражения с "предметной" точки зрения
//
// Параметры
//  СпособОтраженияВБухучете - СправочникСсылка.СпособыОтраженияЗарплатыВРеглУчете - описываемый 
//                 способ отражения
//
// Возвращаемое значение:
//   строка - сформированное представление
//
Функция ПолучитьПредставлениеСпособаОтраженияНачисленияВУчетах(СпособОтраженияВБухучете) Экспорт
	
	Если СпособОтраженияВБухучете.Пустая() Тогда
		РасшифровкаТекст = "Способ отражения определяется по данным о работнике и его плановых начислениях";
	ИначеЕсли СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете Тогда
		РасшифровкаТекст = "Начисление не отражается в бухгалтерском учете";
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", СпособОтраженияВБухучете);
		Запрос.УстановитьПараметр("Подразделения", ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
		Запрос.УстановитьПараметр("РаботникиОрганизаций", ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций);
		Запрос.УстановитьПараметр("Контрагенты", ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
		Запрос.УстановитьПараметр("СчетРасчетовПоИЛ", ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоИсполнительнымЛистам);

		ИмяПланаСчетов = "Типовой";

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СпособыОтраженияЗарплатыВРеглУчете.СчетДт.Код, """") КАК СчетДт,
		|	ПРЕДСТАВЛЕНИЕ(СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт1) КАК СубконтоДт1Представление,
		|	ПРЕДСТАВЛЕНИЕ(СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт2) КАК СубконтоДт2Представление,
		|	ПРЕДСТАВЛЕНИЕ(СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт3) КАК СубконтоДт3Представление,
		|
		|	ЕСТЬNULL(СпособыОтраженияЗарплатыВРеглУчете.СчетКт.Код, """") КАК СчетКт,
		|	ПРЕДСТАВЛЕНИЕ(СпособыОтраженияЗарплатыВРеглУчете.СубконтоКт1) КАК СубконтоКт1Представление,
		|	ПРЕДСТАВЛЕНИЕ(СпособыОтраженияЗарплатыВРеглУчете.СубконтоКт2) КАК СубконтоКт2Представление,
		|	ПРЕДСТАВЛЕНИЕ(СпособыОтраженияЗарплатыВРеглУчете.СубконтоКт3) КАК СубконтоКт3Представление,
		|
		|	ЕСТЬNULL(СпособыОтраженияЗарплатыВРеглУчете.СчетДтНУ.Код, """") КАК СчетДтНУ,
		|	ПРЕДСТАВЛЕНИЕ(СпособыОтраженияЗарплатыВРеглУчете.СубконтоДтНУ1) КАК СубконтоДтНУ1Представление,
		|	ПРЕДСТАВЛЕНИЕ(СпособыОтраженияЗарплатыВРеглУчете.СубконтоДтНУ2) КАК СубконтоДтНУ2Представление,
		|	ПРЕДСТАВЛЕНИЕ(СпособыОтраженияЗарплатыВРеглУчете.СубконтоДтНУ3) КАК СубконтоДтНУ3Представление,
		|
		|	ЕСТЬNULL(СпособыОтраженияЗарплатыВРеглУчете.СчетКтНУ.Код, """") КАК СчетКтНУ,
		|	ПРЕДСТАВЛЕНИЕ(СпособыОтраженияЗарплатыВРеглУчете.СубконтоКтНУ1) КАК СубконтоКтНУ1Представление,
		|	ПРЕДСТАВЛЕНИЕ(СпособыОтраженияЗарплатыВРеглУчете.СубконтоКтНУ2) КАК СубконтоКтНУ2Представление,
		|	ПРЕДСТАВЛЕНИЕ(СпособыОтраженияЗарплатыВРеглУчете.СубконтоКтНУ3) КАК СубконтоКтНУ3Представление,
		|
		|	ЕСТЬNULL(ТиповойВидыСубконтоДт.КоличествоСк, 0) КАК КоличествоСкДтБУ,
		|	ЕСТЬNULL(ТиповойВидыСубконтоКт.КоличествоСк, 0) КАК КоличествоСкКтБУ,
		|	ЕСТЬNULL(ВидСубконтоДтБУПодразделения.НомерСтроки, 0) КАК НомерСкДтПодразделенияБУ,
		|	ЕСТЬNULL(ВидСубконтоДтБУРаботникиОрганизаций.НомерСтроки, 0) КАК НомерСкДтРаботникиОрганизацийБУ,
		|	ЕСТЬNULL(ВидСубконтоКтБУРаботникиОрганизаций.НомерСтроки, 0) КАК НомерСкКтРаботникиОрганизацийБУ,
		|	ЕСТЬNULL(ВидСубконтоКтБУКонтрагенты.НомерСтроки, 0) КАК НомерСкКтКонтрагентыБУ,
		|		
		|	ЕСТЬNULL(НалоговыйВидыСубконтоДт.КоличествоСк, 0) КАК КоличествоСкДтНУ,
		|	ЕСТЬNULL(НалоговыйВидыСубконтоКт.КоличествоСк, 0) КАК КоличествоСкКтНУ,
		|	ЕСТЬNULL(ВидСубконтоДтНУПодразделения.НомерСтроки, 0) КАК НомерСкДтПодразделенияНУ,
		|	ЕСТЬNULL(ВидСубконтоДтНУРаботникиОрганизаций.НомерСтроки, 0) КАК НомерСкДтРаботникиОрганизацийНУ,
		|	ЕСТЬNULL(ВидСубконтоКтНУРаботникиОрганизаций.НомерСтроки, 0) КАК НомерСкКтРаботникиОрганизацийНУ,
		|	ЕСТЬNULL(ВидСубконтоКтНУКонтрагенты.НомерСтроки, 0) КАК НомерСкКтКонтрагентыНУ
		|
		|ИЗ
		|	(ВЫБРАТЬ
		|		СпособыОтраженияЗарплатыВРеглУчете.Ссылка КАК Ссылка,
		|
		|		СпособыОтраженияЗарплатыВРеглУчете.СчетДт КАК СчетДт,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт1 КАК СубконтоДт1,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт2 КАК СубконтоДт2,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт3 КАК СубконтоДт3,
		|
		|		СпособыОтраженияЗарплатыВРеглУчете.СчетКт КАК СчетКт,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоКт1 КАК СубконтоКт1,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоКт2 КАК СубконтоКт2,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоКт3 КАК СубконтоКт3,
		|
		|		СпособыОтраженияЗарплатыВРеглУчете.СчетДтНУ КАК СчетДтНУ,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоДтНУ1 КАК СубконтоДтНУ1,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоДтНУ2 КАК СубконтоДтНУ2,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоДтНУ3 КАК СубконтоДтНУ3,
		|
		|		СпособыОтраженияЗарплатыВРеглУчете.СчетКтНУ КАК СчетКтНУ,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоКтНУ1 КАК СубконтоКтНУ1,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоКтНУ2 КАК СубконтоКтНУ2,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоКтНУ3 КАК СубконтоКтНУ3
		|
		|	ИЗ
		|		Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК СпособыОтраженияЗарплатыВРеглУчете
		|	ГДЕ
		|		СпособыОтраженияЗарплатыВРеглУчете.Ссылка = &Ссылка) КАК СпособыОтраженияЗарплатыВРеглУчете
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КОЛИЧЕСТВО(ТиповойВидыСубконто.ВидСубконто) КАК КоличествоСк,
		|			ТиповойВидыСубконто.Ссылка КАК Ссылка
		|		ИЗ
		|			ПланСчетов." + ИмяПланаСчетов + ".ВидыСубконто КАК ТиповойВидыСубконто
		|		СГРУППИРОВАТЬ ПО
		|			ТиповойВидыСубконто.Ссылка) КАК ТиповойВидыСубконтоДт
		|		ПО СпособыОтраженияЗарплатыВРеглУчете.СчетДт = ТиповойВидыСубконтоДт.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КОЛИЧЕСТВО(ТиповойВидыСубконто.ВидСубконто) КАК КоличествоСк,
		|			ТиповойВидыСубконто.Ссылка КАК Ссылка
		|		ИЗ
		|			ПланСчетов." + ИмяПланаСчетов + ".ВидыСубконто КАК ТиповойВидыСубконто
		|		СГРУППИРОВАТЬ ПО
		|			ТиповойВидыСубконто.Ссылка) КАК ТиповойВидыСубконтоКт
		|		ПО СпособыОтраженияЗарплатыВРеглУчете.СчетКт = ТиповойВидыСубконтоКт.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов." + ИмяПланаСчетов + ".ВидыСубконто КАК ВидСубконтоДтБУПодразделения
		|		ПО СпособыОтраженияЗарплатыВРеглУчете.СчетДт = ВидСубконтоДтБУПодразделения.Ссылка
		|			И ВидСубконтоДтБУПодразделения.ВидСубконто = &Подразделения
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов." + ИмяПланаСчетов + ".ВидыСубконто КАК ВидСубконтоДтБУРаботникиОрганизаций
		|		ПО СпособыОтраженияЗарплатыВРеглУчете.СчетДт = ВидСубконтоДтБУРаботникиОрганизаций.Ссылка
		|			И ВидСубконтоДтБУРаботникиОрганизаций.ВидСубконто = &РаботникиОрганизаций
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов." + ИмяПланаСчетов + ".ВидыСубконто КАК ВидСубконтоКтБУРаботникиОрганизаций
		|		ПО СпособыОтраженияЗарплатыВРеглУчете.СчетКт = ВидСубконтоКтБУРаботникиОрганизаций.Ссылка
		|			И ВидСубконтоКтБУРаботникиОрганизаций.ВидСубконто = &РаботникиОрганизаций
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов." + ИмяПланаСчетов + ".ВидыСубконто КАК ВидСубконтоКтБУКонтрагенты
		|		ПО СпособыОтраженияЗарплатыВРеглУчете.СчетКт = ВидСубконтоКтБУКонтрагенты.Ссылка
		|			И ВидСубконтоКтБУКонтрагенты.ВидСубконто = &Контрагенты
		|			И СпособыОтраженияЗарплатыВРеглУчете.СчетКт = &СчетРасчетовПоИЛ
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КОЛИЧЕСТВО(НалоговыйВидыСубконто.ВидСубконто) КАК КоличествоСк,
		|			НалоговыйВидыСубконто.Ссылка КАК Ссылка
		|		ИЗ
		|			ПланСчетов.Налоговый.ВидыСубконто КАК НалоговыйВидыСубконто
		|		СГРУППИРОВАТЬ ПО
		|			НалоговыйВидыСубконто.Ссылка) КАК НалоговыйВидыСубконтоДт
		|		ПО СпособыОтраженияЗарплатыВРеглУчете.СчетДтНУ = НалоговыйВидыСубконтоДт.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КОЛИЧЕСТВО(НалоговыйВидыСубконто.ВидСубконто) КАК КоличествоСк,
		|			НалоговыйВидыСубконто.Ссылка КАК Ссылка
		|		ИЗ
		|			ПланСчетов.Налоговый.ВидыСубконто КАК НалоговыйВидыСубконто
		|		СГРУППИРОВАТЬ ПО
		|			НалоговыйВидыСубконто.Ссылка) КАК НалоговыйВидыСубконтоКт
		|		ПО СпособыОтраженияЗарплатыВРеглУчете.СчетКтНУ = НалоговыйВидыСубконтоКт.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ВидСубконтоДтНУПодразделения
		|		ПО СпособыОтраженияЗарплатыВРеглУчете.СчетДтНУ = ВидСубконтоДтНУПодразделения.Ссылка
		|			И ВидСубконтоДтНУПодразделения.ВидСубконто = &Подразделения
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ВидСубконтоДтНУРаботникиОрганизаций
		|		ПО СпособыОтраженияЗарплатыВРеглУчете.СчетДтНУ = ВидСубконтоДтНУРаботникиОрганизаций.Ссылка
		|			И ВидСубконтоДтНУРаботникиОрганизаций.ВидСубконто = &РаботникиОрганизаций
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ВидСубконтоКтНУРаботникиОрганизаций
		|		ПО СпособыОтраженияЗарплатыВРеглУчете.СчетКтНУ = ВидСубконтоКтНУРаботникиОрганизаций.Ссылка
		|			И ВидСубконтоКтНУРаботникиОрганизаций.ВидСубконто = &РаботникиОрганизаций
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ВидСубконтоКтНУКонтрагенты
		|		ПО СпособыОтраженияЗарплатыВРеглУчете.СчетКтНУ = ВидСубконтоКтНУКонтрагенты.Ссылка
		|			И ВидСубконтоКтНУКонтрагенты.ВидСубконто = &Контрагенты
		|			И СпособыОтраженияЗарплатыВРеглУчете.СчетКт = &СчетРасчетовПоИЛ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		РасшифровкаТекст = "Бухгалтерский учет: ";
		Если ЗначениеЗаполнено(Выборка.СчетДт) Тогда
			РасшифровкаТекст = РасшифровкаТекст + "Дт " + Выборка.СчетДт;
			Для СчСк = 1 По Выборка.КоличествоСкДтБУ Цикл
				Если Не ЗначениеЗаполнено(Выборка["СубконтоДт" + СчСк + "Представление"]) Тогда
					Если СчСк = Выборка.НомерСкДтПодразделенияБУ Тогда
						РасшифровкаТекст = РасшифровкаТекст + ", <подбирается автоматически>";
					ИначеЕсли СчСк = Выборка.НомерСкДтРаботникиОрганизацийБУ Тогда
						РасшифровкаТекст = РасшифровкаТекст + ", <подбирается автоматически>";
					Иначе
						РасшифровкаТекст = РасшифровкаТекст + ", <не указано>";
					КонецЕсли;
				Иначе
					РасшифровкаТекст = РасшифровкаТекст + ", " + Выборка["СубконтоДт" + СчСк + "Представление"];
				КонецЕсли;
			КонецЦикла;
		Иначе
			РасшифровкаТекст = РасшифровкаТекст + " Дт <не указано>";
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.СчетКт) Тогда
			РасшифровкаТекст = РасшифровкаТекст + " Кт " + Выборка.СчетКт;
			Для СчСк = 1 По Выборка.КоличествоСкКтБУ Цикл
				Если Не ЗначениеЗаполнено(Выборка["СубконтоКт" + СчСк + "Представление"]) Тогда
					Если СчСк = Выборка.НомерСкКтРаботникиОрганизацийБУ Тогда
						РасшифровкаТекст = РасшифровкаТекст + ", <подбирается автоматически>";
					ИначеЕсли СчСк = Выборка.НомерСкКтКонтрагентыБУ Тогда
						РасшифровкаТекст = РасшифровкаТекст + ", <подбирается автоматически>";
					Иначе
						РасшифровкаТекст = РасшифровкаТекст + ", <не указано>";
					КонецЕсли;
				Иначе
					РасшифровкаТекст = РасшифровкаТекст + ", " + Выборка["СубконтоКт" + СчСк + "Представление"];
				КонецЕсли;
			КонецЦикла;
		Иначе
			РасшифровкаТекст = РасшифровкаТекст + " Кт <не указано>";
		КонецЕсли;
		
		РасшифровкаТекст = РасшифровкаТекст + ";" + Символы.ПС + "Налоговый учет: ";
		Если ЗначениеЗаполнено(Выборка.СчетДтНУ) Тогда
			РасшифровкаТекст = РасшифровкаТекст + "Дт " + Выборка.СчетДтНУ;
			Для СчСк = 1 По Выборка.КоличествоСкДтНУ Цикл
				Если Не ЗначениеЗаполнено(Выборка["СубконтоДтНУ" + СчСк + "Представление"]) Тогда
					Если СчСк = Выборка.НомерСкДтПодразделенияНУ Тогда
						РасшифровкаТекст = РасшифровкаТекст + ", <подбирается автоматически>";
					ИначеЕсли СчСк = Выборка.НомерСкДтРаботникиОрганизацийНУ Тогда
						РасшифровкаТекст = РасшифровкаТекст + ", <подбирается автоматически>";
					Иначе
						РасшифровкаТекст = РасшифровкаТекст + ", <не указано>";
					КонецЕсли;
				Иначе
					РасшифровкаТекст = РасшифровкаТекст + ", " + Выборка["СубконтоДтНУ" + СчСк + "Представление"];
				КонецЕсли;
			КонецЦикла;
		Иначе
			РасшифровкаТекст = РасшифровкаТекст + " Дт <не указано>";
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.СчетКтНУ) Тогда
			РасшифровкаТекст = РасшифровкаТекст + " Кт " + Выборка.СчетКтНУ;
			Для СчСк = 1 По Выборка.КоличествоСкКтНУ Цикл
				Если Не ЗначениеЗаполнено(Выборка["СубконтоКтНУ" + СчСк + "Представление"]) Тогда
					Если СчСк = Выборка.НомерСкКтРаботникиОрганизацийНУ Тогда
						РасшифровкаТекст = РасшифровкаТекст + ", <подбирается автоматически>";
					ИначеЕсли СчСк = Выборка.НомерСкКтКонтрагентыНУ Тогда
						РасшифровкаТекст = РасшифровкаТекст + ", <подбирается автоматически>";
					Иначе
						РасшифровкаТекст = РасшифровкаТекст + ", <не указано>";
					КонецЕсли;
				Иначе
					РасшифровкаТекст = РасшифровкаТекст + ", " + Выборка["СубконтоКтНУ" + СчСк + "Представление"];
				КонецЕсли;
			КонецЦикла;
		Иначе
			РасшифровкаТекст = РасшифровкаТекст + " Кт <не указано>";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РасшифровкаТекст	
	
КонецФункции // ПолучитьПредставлениеСпособаОтраженияНачисленияВУчетах()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ ДОКУМЕНТАМИ

// Функция выполняет проверку необходимости проведения документа по разделам учета
//
Функция ПроводитьДокументПоРазделуУчета(Организация, РазделУчета, Дата) Экспорт
	
	Если ТипЗнч(РазделУчета) <> Тип("ПеречислениеСсылка.РазделыУчета") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяПеречисления = "";
	Для Каждого ЗначениеПеречисления Из РазделУчета.Метаданные().ЗначенияПеречисления Цикл
		Если Перечисления.РазделыУчета[ЗначениеПеречисления.Имя] = РазделУчета Тогда
			ИмяПеречисления = ЗначениеПеречисления.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ИмяПеречисления) Тогда
		Возврат Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	1 КАК ЗаписьРегистра
	               |ИЗ
	               |	(ВЫБРАТЬ ПЕРВЫЕ 1
	               |		КОНЕЦПЕРИОДА(ДатаАктуальностиУчета."+ИмяПеречисления+", ДЕНЬ) КАК ДатаАктуальности,
	               |		ВЫБОР
	               |			КОГДА ДатаАктуальностиУчета.Организация = &Организация
	               |				ТОГДА 1
	               |			ИНАЧЕ 2
	               |		КОНЕЦ КАК Порядок
	               |	ИЗ
	               |		РегистрСведений.ДатаАктуальностиУчета КАК ДатаАктуальностиУчета
	               |	ГДЕ
	               |		(ДатаАктуальностиУчета.Организация = &Организация
	               |				ИЛИ ДатаАктуальностиУчета.Организация = &ПустаяОрганизация)
	               |		И ДатаАктуальностиУчета."+ИмяПеречисления+" <> ДАТАВРЕМЯ(1, 1, 1)
	               |	
	               |	УПОРЯДОЧИТЬ ПО
	               |		Порядок) КАК МаксимальнаяДата
	               |ГДЕ
	               |	МаксимальнаяДата.ДатаАктуальности <= &ДатаДокумента";
	 	 
	Запрос.УстановитьПараметр("Организация", Организация);            
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);

	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции // ПроводитьДокументПоРазделуУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СТРУКТУРНЫМИ ПОДРАЗДЕЛЕНИЯМИ

// Процедура устанавливает в проводке подразделение на счете, если по нему ведется учет по подразделениям
//
// Параметры:
//		Проводка - <запись регистра бухгалтерии> - проводка, в которой нужно установить подразделение
//      Подразделение - <СправочникСсылка.ПодразделенияОрганизаций> - устанавливаемое подразделение
//		ДтКт - <Строка> - если "Дт", подразделение устанавливается по дебету проводки, иначе по кредиту
//
Процедура УстановитьПодразделениеПроводки(Проводка, СтруктурноеПодразделение, ДтКт = "Дт") Экспорт
	
		Проводка["СтруктурноеПодразделение" + ДтКт] = СтруктурноеПодразделение;
	
КонецПроцедуры

// Процедура устанавливает в проводке подразделения, если по счетам дебета и кредита ведется учет по подразделениям
//
// Параметры:
//		Проводка - <запись регистра бухгалтерии> - проводка, в которой нужно установить подразделения
//      ПодразделениеДт - <СправочникСсылка.ПодразделенияОрганизаций> - устанавливаемое подразделение по дебету
//      ПодразделениеКт - <СправочникСсылка.ПодразделенияОрганизаций> - устанавливаемое подразделение по кредиту
//
Процедура УстановитьПодразделенияПроводки(Проводка, СтруктурноеПодразделениеДт, СтруктурноеПодразделениеКт) Экспорт

	УстановитьПодразделениеПроводки(Проводка, СтруктурноеПодразделениеДт, "Дт");
	
	УстановитьПодразделениеПроводки(Проводка, СтруктурноеПодразделениеКт, "Кт");

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УНИВЕРСАЛИЗАЦИИ ПРОМЕЖУТОЧНЫХ ДАННЫХ

// Процедура управляет доступностью признаков отражения в БУ и НУ в документах в зависимости от реквизита организации ОтражатьВРегламентированномУчете
// Также процедура может изменять значения реквизитов ОтражатьВБУ и ОтражатьВНУ
// Может вызываться из обработчиков формы ПриОткрытии, ОрганизацияПриИзменении
// Параметры:
// 	Объект - Документ-объект
// 	Форма - форма документа
// 	ИмяОтражатьВБУ - имя элемента формы, связанного с реквизитом ОтражатьВБУ
//  ИмяОтражатьВНУ - имя элемента формы, связанного с реквизитом ОтражатьВНУ
//  мОтражатьВРегламентированномУчете - переменная формы, передается в процедуру для изменения.
//		далее может использоваться в логике формы в индивидуальном порядке для каждого документа.
//	флИзменятьРеквизитыБУНУ - признак необходимости изменять реквизиты документа ОтражатьвБУ, ОтражатьВНУ
//		Устанавливается если процедура вызывается при изменении значения организации в документе
//
Процедура УправлениеПризнакомОтраженияВРеглУчете(Объект, Форма,ИмяОтражатьВБУ = "ОтражатьВБухгалтерскомУчете",ИмяОтражатьВНУ = "УчитыватьКПН",мОтражатьВРегламентированномУчете,флИзменятьРеквизитыБУНУ=ложь, НеобходимостьУстановкиРеквизитовФормы = Ложь, мУчетнаяПолитикаПоБухгалтерскомуУчету = Неопределено, мУчетнаяПолитикаПоНалоговомуУчету = Неопределено) Экспорт
	
	Если  ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", Объект.Метаданные()) Тогда
		Организация  = Объект.Организация;
	ИначеЕсли  ОбщегоНазначения.ЕстьРеквизитДокумента("ОрганизацияОтправитель", Объект.Метаданные()) Тогда
		Организация = Объект.ОрганизацияОтправитель;
	КонецЕсли;
		  		
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВРегламентированномУчете", Метаданные.Справочники.Организации) Тогда
		мОтражатьВРегламентированномУчете = Организация.ОтражатьВРегламентированномУчете;
	Иначе
		мОтражатьВРегламентированномУчете = Истина;
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Объект.Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазниц = ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Объект.Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);
	
	Форма.ЭлементыФормы[ИмяОтражатьВБУ].Доступность                          = мОтражатьВРегламентированномУчете;
	
	//такого элемента на форме может и не быть
	Если НЕ ОбщегоНазначения.ЕстьРеквизитДокумента(ИмяОтражатьВНУ, Объект.Метаданные()) Тогда
		ИмяОтражатьВНУ = "";
	КонецЕсли;	
		
	Если ИмяОтражатьВНУ<>"" Тогда
		Форма.ЭлементыФормы[ИмяОтражатьВНУ].Доступность                          = мОтражатьВРегламентированномУчете;
	КонецЕсли;
	
	Если флИзменятьРеквизитыБУНУ ИЛИ Объект.ЭтоНовый() Тогда
		Если мОтражатьВРегламентированномУчете Тогда
			ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
			//организация в РУ отражается. Флаги БУ и НУ необходимо установить в соотв. с настройками пользователя по умолчанию
			ОтражатьВБУ = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВБухгалтерскомУчете");
			
			//признак отражения в БУ перезаполняем, если в настройках стоит отражение в БУ, а в документе признак снят
			//Признак мог быть снят из-за признака "ОтражатьВРегламентированномУчете" у организации.
			//В других случаях, предполагаем, что пользователь вручную снял признак отражения в БУ  и менять его при смене организации
			//если в ней установлен признак "ОтржатьВРегламентированномУчете" считаем неп логично.
			Если (НЕ Объект.ОтражатьВБухгалтерскомУчете И ОтражатьВБУ) Тогда
				Объект.ОтражатьВБухгалтерскомУчете  = ОтражатьВБУ;			
			ИначеЕсли Объект.ЭтоНовый() Тогда 
				Объект.ОтражатьВБухгалтерскомУчете  = ОтражатьВБУ;			
			КонецЕсли;
			
			Если ИмяОтражатьВНУ<>""  Тогда
				Если Объект.ОтражатьВБухгалтерскомУчете Тогда
					Объект.УчитыватьКПН            = ОрганизацияПлательщикНалогаНаПрибыль;
					Объект.ВидУчетаНУ              = ?(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВНалоговомУчете"), Справочники.ВидыУчетаНУ.НУ, Справочники.ВидыУчетаНУ.ПР) ;
				Иначе
					Объект.УчитыватьКПН = Ложь;
				КонецЕсли;
		  КонецЕсли;

		Иначе
			//организация в РУ не отражается - необходимо сбросить флаги отражения в БУ и НУ
			Если Объект.ОтражатьВБухгалтерскомУчете  Тогда
				Объект.ОтражатьВБухгалтерскомУчете = Ложь;
			КонецЕсли;
			Если ИмяОтражатьВНУ<>"" Тогда
				Если Объект.УчитыватьКПН Тогда
					Объект.УчитыватьКПН = Ложь;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
    Если НеобходимостьУстановкиРеквизитовФормы Тогда
		Форма.ОрганизацияПлательщикНалогаНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль;
		Форма.ПоддержкаУчетаВременныхРазниц = ПоддержкаУчетаВременныхРазниц;
	КонецЕсли;
	
КонецПроцедуры // УправлениеПризнакомОтраженияВРеглУчете()

Процедура УстановитьДоступностьЯчееекПоСчету(Счет, Субконто1, Субконто2, Субконто3) Экспорт
	
	ЭлементыСубконто = Новый Структура("Субконто1,Субконто2,Субконто3", Субконто1, Субконто2, Субконто3);
	ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
	
	Для Сч = 1 По 3 Цикл
		ЭлементыСубконто["Субконто" + Сч].Доступность =  (Сч <= ЧислоАктивныхСубконто);
	КонецЦикла;
	
КонецПроцедуры // УстановитьДоступностьЯчееекПоСчету()

