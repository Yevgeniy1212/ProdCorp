
Функция РодительОС() Экспорт
	Имя = "Созданные автоматически на основании регистрации договоров";
	Найден = Справочники.ОсновныеСредства.НайтиПоНаименованию(Имя);
	Если НЕ Найден.Пустая() Тогда
		Возврат Найден;
	КонецЕсли;
	НоваяГруппа = Справочники.ОсновныеСредства.СоздатьГруппу();
	НоваяГруппа.Наименование = Имя;
	НоваяГруппа.УстановитьНовыйКод();
	НоваяГруппа.Записать();
	Возврат НоваяГруппа.Ссылка;
КонецФункции

Функция РодительНМА() Экспорт
	Имя = "Созданные автоматически на основании регистрации договоров";
	Найден = Справочники.НематериальныеАктивы.НайтиПоНаименованию(Имя);
	Если НЕ Найден.Пустая() Тогда
		Возврат Найден;
	КонецЕсли;
	НоваяГруппа = Справочники.НематериальныеАктивы.СоздатьГруппу();
	НоваяГруппа.Наименование = Имя;
	НоваяГруппа.УстановитьНовыйКод();
	НоваяГруппа.Записать();
	Возврат НоваяГруппа.Ссылка;
КонецФункции

Процедура ПроверкаПравильностиСозданногоДокументаНаОсновании(ИсходныйОбъект, Основание, Отказ) Экспорт
	Если ТипЗнч(Основание) <> Тип("ДокументСсылка.дог_РегистрацияДоговоров") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ИсходныйОбъект) = Тип("ДанныеФормыСтруктура") И ИсходныйОбъект.Свойство("Ссылка") Тогда
		Попытка
			Объект = ДанныеФормыВЗначение(ИсходныйОбъект, Тип("ДокументОбъект." + Строка(ИсходныйОбъект.Ссылка.Метаданные().Имя)));
		Исключение
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	Иначе
		Объект = ИсходныйОбъект;
	КонецЕсли;	
	
	Если Основание.ВидОперацииПоДоговору = Перечисления.дог_ВидыОперацийПоДоговору.ТоварныеОперации Тогда
		Если Основание.ВидДоговораПоТоварнымОперациям = Перечисления.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорПоставки Тогда
			Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг")
				ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.Доверенность")
				ИЛИ ТипЗнч(Объект)=Тип("ДокументОбъект.дог_РегистрацияДоговоров") Тогда
				Возврат;
			Иначе
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		ИначеЕсли  Основание.ВидДоговораПоТоварнымОперациям = Перечисления.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорРеализации
			ИЛИ Основание.ВидДоговораПоТоварнымОперациям = Перечисления.дог_ВидыДоговоровПоТоварнымОперациям.ЗаказНаПриобретение Тогда
			Если ТипЗнч(Объект)=Тип("ДокументОбъект.РеализацияТоваровУслуг") 
				ИЛИ ТипЗнч(Объект)=Тип("ДокументОбъект.ПередачаОС")
				ИЛИ ТипЗнч(Объект)=Тип("ДокументОбъект.СчетНаОплатуПокупателю")
				ИЛИ ТипЗнч(Объект)=Тип("ДокументОбъект.дог_РегистрацияДоговоров") Тогда
				Возврат;
			Иначе
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	Иначе 
		Отказ = Истина;
		Возврат;		
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьДеньОплаты(ДатаД, Периодичность, Смещение,СмещениеП, ПериодичностьСмещения) Экспорт
	Если Периодичность = Перечисления.фин_Периодичность.День Тогда
		Возврат ДатаД+60*60*24*?(СмещениеП=0,1,СмещениеП);
	Иначе
		ДатаД = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ДатаД,Периодичность)+1;
		Если СмещениеП>0 Тогда
			Для Инд = 1 По СмещениеП Цикл
				ДатаД = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ДатаД,ПериодичностьСмещения)+1;	
			КонецЦикла;
		КонецЕсли;
		ДатаД = ДатаД+Смещение*60*60*24;
		//ДатаДКонец = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ДатаД,Периодичность);
		Возврат ДатаД;
	КонецЕсли;
	
КонецФункции

Функция СформироватьСписокПлатежей(ДатаНачала,ДатаОкончания,Организация,СтруктурноеПодразделение,ВключаяПодчиненные,Контрагент,Договор,ОтображатьДанныеПоПодчиненнымДоговорамКонтрагента,Входящее,ДатаПлатежа) Экспорт
	Возврат общ_ПроцедурыМеханизмаЗащиты.СформироватьСписокПлатежей(ДатаНачала,ДатаОкончания,Организация,СтруктурноеПодразделение,ВключаяПодчиненные,Контрагент,Договор,ОтображатьДанныеПоПодчиненнымДоговорамКонтрагента,Входящее,ДатаПлатежа);		
КонецФункции

Функция РассчитатьСуммуПлатежа(ДатаОплаты, СтрокаДанных, СПокупателем, ПоЗадолженности = Ложь) Экспорт
	Возврат общ_ПроцедурыМеханизмаЗащиты.РассчитатьСуммуПлатежа(ДатаОплаты, СтрокаДанных, СПокупателем, ПоЗадолженности);		
КонецФункции

// Функция возвращает возможные счета учета расчетов с контрагентом
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Контрагент  - по которому выполняется поиск
//  Договор     - по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаРасчетовСКонтрагентомПоДокументу(	Данные, 
	ВалютаРегламентированногоУчета = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		ВалютаРегламентированногоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;
	
	Результат = Новый Структура("
	|СчетРасчетов, СчетАвансов,СчетВозвратов,
	|СчетРасчетовПокупателя, СчетАвансовПокупателя,СчетВозвратовПокупателя");
	
	Если ТипЗнч(Данные.Контрагент) <> Тип("СправочникСсылка.Контрагенты") ИЛИ 
		(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")<>Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана
		И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")<>Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0
		И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")<>Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВидРасчетовПоДоговору = ОпределениеВидаРасчетовПоПараметрамДокументаРегистрацияДоговора(Данные.ВалютаДоговора,ВалютаРегламентированногоУчета);
	
	Запрос    = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",       Данные.Организация);
	Запрос.УстановитьПараметр("Контрагент",        Данные.Контрагент);
	Запрос.УстановитьПараметр("Договор",           Данные.Договор);
	Запрос.УстановитьПараметр("ВидРасчетов",       ВидРасчетовПоДоговору);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор",     Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидРасчетов", Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка());
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Приоритет,
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
	|	СчетРасчетовСПокупателемПоВозвратам
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|ГДЕ
	|	СчетаУчетаРасчетовСКонтрагентами.Договор = &Договор
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ  
	|	2,
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
	|	СчетРасчетовСПокупателемПоВозвратам
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|ГДЕ
	|	СчетаУчетаРасчетовСКонтрагентами.Организация = &Организация
	|	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &Контрагент
	|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор
	|";
	Индекс = 2;
	Если фин_ОбщегоНазначенияСервер.ЕстьОбщийМодуль("ОбщегоНазначенияБКВызовСервера") Тогда
		СписокГрупп = Вычислить("ОбщегоНазначенияБКВызовСервера.ПолучитьСписокВышеСтоящихГрупп(Данные.Контрагент)");
	Иначе
		СписокГрупп = Новый СписокЗначений;
	КонецЕсли;
	Для Каждого Элемент из СписокГрупп Цикл
		
		Индекс = Индекс + 1;
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, Элемент);
		Запрос.Текст = Запрос.Текст+"
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ  
		|	"+Индекс+",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
		|	СчетРасчетовСПокупателемПоВозвратам
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
		|ГДЕ
		|	СчетаУчетаРасчетовСКонтрагентами.Организация = &Организация
		|	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &ГруппаКонтрагентов"+Индекс+"
		|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор
		|";
	КонецЦикла;
	Запрос.Текст = Запрос.Текст+"
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ  
	|	"+(Индекс+1)+",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
	|	СчетРасчетовСПокупателемПоВозвратам
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|ГДЕ
	|	СчетаУчетаРасчетовСКонтрагентами.Организация = &ПустаяОрганизация
	|	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &Контрагент
	|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор
	|";
	Индекс = Индекс+1;
	
	Для Каждого Элемент из СписокГрупп Цикл
		
		Индекс = Индекс + 1;
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, Элемент);
		Запрос.Текст = Запрос.Текст+"
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ  
		|	"+Индекс+",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
		|	СчетРасчетовСПокупателемПоВозвратам
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
		|ГДЕ
		|	СчетаУчетаРасчетовСКонтрагентами.Организация = &ПустаяОрганизация
		|	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &ГруппаКонтрагентов"+Индекс+"
		|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор";
	КонецЦикла;
	Запрос.Текст = Запрос.Текст+"
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ 
	|	"+(Индекс+1)+",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
	|	СчетРасчетовСПокупателемПоВозвратам
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|ГДЕ
	|	СчетаУчетаРасчетовСКонтрагентами.Организация = &Организация
	|	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &ПустойКонтрагент
	|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор
	|
	|ОБЪЕДИНИТЬ
	|
	|
	|ВЫБРАТЬ 
	|	"+(Индекс+2)+",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
	|	СчетРасчетовСПокупателемПоВозвратам
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|ГДЕ
	|	СчетаУчетаРасчетовСКонтрагентами.Организация = &ПустаяОрганизация
	|	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &ПустойКонтрагент
	|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат.СчетРасчетов              = Выборка.СчетУчетаРасчетовСПоставщиком;
		Результат.СчетАвансов               = Выборка.СчетУчетаАвансовВыданных;
		Результат.СчетВозвратов             = Выборка.СчетУчетаРасчетовСПоставщикомПоВозвратам;
		Результат.СчетРасчетовПокупателя    = Выборка.СчетУчетаРасчетовСПокупателем;
		Результат.СчетАвансовПокупателя     = Выборка.СчетУчетаАвансовПолученных;
		Результат.СчетВозвратовПокупателя   = Выборка.СчетРасчетовСПокупателемПоВозвратам;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

// Функция возвращает вид расчетов по договору
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтраентов
//		ВалютаРегламентированногоУчета 	- СправочникСсылка.Валюты
//
// Возвращаемое значение
//      ПеречилениеСсылка.ВидыРасчетовПоДоговорам
//
Функция ОпределениеВидаРасчетовПоПараметрамДокументаРегистрацияДоговора(Валюта, ВалютаРегламентированногоУчета) Экспорт
	
	Если Валюта = ВалютаРегламентированногоУчета 
		ИЛИ НЕ ЗначениеЗаполнено(Валюта) Тогда
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;
		
	Иначе
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;
		
	КонецЕсли;
	
	Возврат ВидРасчетовПоДоговору;
	
КонецФункции // ОпределениеВидаРасчетовПоПараметрамДоговора()
 
Процедура СформироватьДвиженияПоГрафикуПоставок(Документ,МассивТЧ,ДоговорРеализации,ДокументВозврата = Ложь)
	УчитыватьНДС = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("УчитыватьСуммуНДСПриУчетеИсполненияТоварныхДоговоров");
	ТаблицаПоставок = Новый ТаблицаЗначений;
	ТаблицаПоставок.Колонки.Добавить("Номенклатура");
	ТаблицаПоставок.Колонки.Добавить("Количество");
	ТаблицаПоставок.Колонки.Добавить("Дата");
	ДвиженияПоГрафику = РегистрыНакопления.дог_ГрафикиПоставокПоДоговорам.СоздатьНаборЗаписей();
	ДвиженияПоГрафику.Отбор.Регистратор.Установить(Документ.Ссылка);
	// получение таблицы номенклатуры
	Для Каждого ТЧ Из МассивТЧ Цикл
		Для Каждого СтрокаТЧ Из Документ[ТЧ] Цикл
			Движение = ТаблицаПоставок.Добавить();
			Движение.Дата = Документ.Дата;
			Если ТЧ = "Товары" Тогда
				Движение.Номенклатура = СтрокаТЧ.Номенклатура;
				Движение.Количество = ?(СтрокаТЧ.Коэффициент<>0,СтрокаТЧ.Коэффициент*СтрокаТЧ.Количество,СтрокаТЧ.Количество);
			ИначеЕсли ТЧ = "ОС" Тогда
				Если ДоговорРеализации Тогда
					Движение.Номенклатура = СтрокаТЧ.ОсновноеСредство;
				Иначе

					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	СоответствиеВнеоборотныхАктивовПлановойНоменклатуре.ПлановаяНоменклатура
						|ИЗ
						|	РегистрСведений.узп_СоответствиеВнеоборотныхАктивовПлановойНоменклатуре КАК СоответствиеВнеоборотныхАктивовПлановойНоменклатуре
						|ГДЕ
						|	СоответствиеВнеоборотныхАктивовПлановойНоменклатуре.ВнеоборотныйАктив = &ВнеоборотныйАктив";

					Запрос.УстановитьПараметр("ВнеоборотныйАктив", СтрокаТЧ.ОсновноеСредство);

					Результат = Запрос.Выполнить();

					ВыборкаДетальныеЗаписи = Результат.Выбрать();

					Если ВыборкаДетальныеЗаписи.Следующий() Тогда
						Движение.Номенклатура = ВыборкаДетальныеЗаписи.ПлановаяНоменклатура;
					Иначе	
						Движение.Номенклатура = СтрокаТЧ.ОсновноеСредство;
					КонецЕсли;

				КонецЕсли;
				Движение.Количество = 1;
			ИначеЕсли ТЧ = "НМА" Тогда
				Если ДоговорРеализации Тогда
					Движение.Номенклатура = СтрокаТЧ.НематериальныйАктив;
				Иначе

					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	СоответствиеВнеоборотныхАктивовПлановойНоменклатуре.ПлановаяНоменклатура
						|ИЗ
						|	РегистрСведений.узп_СоответствиеВнеоборотныхАктивовПлановойНоменклатуре КАК СоответствиеВнеоборотныхАктивовПлановойНоменклатуре
						|ГДЕ
						|	СоответствиеВнеоборотныхАктивовПлановойНоменклатуре.ВнеоборотныйАктив = &ВнеоборотныйАктив";

					Запрос.УстановитьПараметр("ВнеоборотныйАктив", СтрокаТЧ.НематериальныйАктив);

					Результат = Запрос.Выполнить();

					ВыборкаДетальныеЗаписи = Результат.Выбрать();

					Если ВыборкаДетальныеЗаписи.Следующий() Тогда
						Движение.Номенклатура = ВыборкаДетальныеЗаписи.ПлановаяНоменклатура;
					Иначе	
						Движение.Номенклатура = СтрокаТЧ.НематериальныйАктив;
					КонецЕсли;

				КонецЕсли;
				Движение.Количество = 1;
			Иначе 
				Движение.Номенклатура = СтрокаТЧ.Номенклатура;
				Движение.Количество = СтрокаТЧ.Количество;
			КонецЕсли;
			Если ДокументВозврата Тогда
				Движение.Количество = -Движение.Количество;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Организация = Документ.Организация;
	СтруктурноеПодразделение = Документ.СтруктурноеПодразделение;
	ДоговорКонтрагента = Документ.ДоговорКонтрагента;
	// расчет исполнения графика
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикиПоставокОстатки.Контрагент КАК Контрагент,
		|	ГрафикиПоставокОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ГрафикиПоставокОстатки.НоменклатураОС КАК НоменклатураОС,
		|	ГрафикиПоставокОстатки.ДатаПоставки КАК ДатаПоставки,
		|	ГрафикиПоставокОстатки.ВидДоговораПоТоварнымОперациям,
		|	ГрафикиПоставокОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.дог_ГрафикиПоставокПоДоговорам.Остатки(
		|			&МоментВремени,
		|			Организация = &Организация
		|				И СтруктурноеПодразделение = &СтруктурноеПодразделение
		|				И ДоговорКонтрагента=&ДоговорКонтрагента) КАК ГрафикиПоставокОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент,
		|	ДоговорКонтрагента,
		|	НоменклатураОС,
		|	ДатаПоставки";

	Запрос.УстановитьПараметр("МоментВремени", 				Новый МоментВремени(Документ.Дата,Документ.Ссылка));
	Запрос.УстановитьПараметр("Организация", 				Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",	СтруктурноеПодразделение);
 	Запрос.УстановитьПараметр("ДоговорКонтрагента", 		ДоговорКонтрагента);

	Результат = Запрос.Выполнить();

	ТаблицаГрафика 	= Результат.Выгрузить();

    РасчетПогашенияГрафикаПоставок(Организация,СтруктурноеПодразделение,ДоговорКонтрагента,ТаблицаГрафика,ТаблицаПоставок,ДвиженияПоГрафику);
	Попытка
		ДвиженияПоГрафику.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать движения по исполнению графика поставок для документа "+Строка(Документ.Ссылка)+"
		|	"+ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Процедура РасчетПогашенияГрафикаПоставок(Организация,СтруктурноеПодразделение,ДоговорКонтрагента,ТаблицаГрафика,ТаблицаПоставок,ДвиженияПоГрафику) Экспорт
	мТаблицаПоставок = ТаблицаПоставок.Скопировать();
	мТаблицаПоставок.Свернуть("Номенклатура");
	СписокПоставленнойНоменклатуры = мТаблицаПоставок.ВыгрузитьКолонку("Номенклатура");
	Для Каждого Номенклатура Из СписокПоставленнойНоменклатуры Цикл
		ТаблицаГрафикаНоменклатура 	= ТаблицаГрафика.Скопировать(Новый Структура("НоменклатураОС",Номенклатура));
		ТаблицаПоставокНоменклатура = ТаблицаПоставок.Скопировать(Новый Структура("Номенклатура",Номенклатура));
		ТаблицаГрафикаНоменклатура.Сортировать("ДатаПоставки");
		ТаблицаПоставокНоменклатура.Сортировать("Дата");
		Для Каждого СтрокаПоставок Из ТаблицаПоставокНоменклатура Цикл
			Если СтрокаПоставок.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого СтрокаГрафика Из ТаблицаГрафикаНоменклатура Цикл
				Если СтрокаГрафика.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				КоличествоЗачтенное = 0;
				КоличествоЗачтенное = Мин(СтрокаПоставок.Количество,СтрокаГрафика.Количество);
				СтрокаПоставок.Количество 	= СтрокаПоставок.Количество - КоличествоЗачтенное;
				СтрокаГрафика.Количество 	= СтрокаГрафика.Количество - КоличествоЗачтенное;
				Если КоличествоЗачтенное<>0 Тогда
					Движение = ДвиженияПоГрафику.ДобавитьРасход();
					ЗаполнитьЗначенияСвойств(Движение,СтрокаГрафика);
					Движение.Организация 				= Организация;
					Движение.СтруктурноеПодразделение 	= СтруктурноеПодразделение;
					Движение.ДоговорКонтрагента 		= ДоговорКонтрагента;
					Движение.Период 					= СтрокаПоставок.Дата;
					Движение.Количество 				= КоличествоЗачтенное;
					Если СтрокаПоставок.Дата> СтрокаГрафика.ДатаПоставки Тогда
						Движение.ДнейПросрочки = (НачалоДня(СтрокаПоставок.Дата)-НачалоДня(СтрокаГрафика.ДатаПоставки))/(24*60*60);
					КонецЕсли;
				КонецЕсли;
				Если СтрокаПоставок.Количество =0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьДвиженияПоИсполнениюДоговоров(Документ,МассивТЧ,ДоговорРеализации,ДокументВозврата = Ложь)
	УчитыватьНДС = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("УчитыватьСуммуНДСПриУчетеИсполненияТоварныхДоговоров");
	ДвиженияПоИсполнению = РегистрыНакопления.дог_ИсполнениеДоговоров.СоздатьНаборЗаписей();
	ДвиженияПоИсполнению.Отбор.Регистратор.Установить(Документ.Ссылка);
	Для Каждого ТЧ Из МассивТЧ Цикл
		Для Каждого СтрокаТЧ Из Документ[ТЧ] Цикл
			Движение = ДвиженияПоИсполнению.ДобавитьРасход();
			Движение.Период = Документ.Дата;
			Движение.Организация = Документ.Организация;
			Движение.СтруктурноеПодразделение = Документ.СтруктурноеПодразделение;
			Движение.ДоговорКонтрагента = Документ.ДоговорКонтрагента;
			Если ТЧ = "Товары" Тогда
				Движение.НоменклатураОС = СтрокаТЧ.Номенклатура;
				Движение.Количество = ?(СтрокаТЧ.Коэффициент<>0,СтрокаТЧ.Коэффициент*СтрокаТЧ.Количество,СтрокаТЧ.Количество);
			ИначеЕсли ТЧ = "ОС" Тогда
				Если ДоговорРеализации Тогда
					Движение.НоменклатураОС = СтрокаТЧ.ОсновноеСредство;
				Иначе

					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	СоответствиеВнеоборотныхАктивовПлановойНоменклатуре.ПлановаяНоменклатура
						|ИЗ
						|	РегистрСведений.узп_СоответствиеВнеоборотныхАктивовПлановойНоменклатуре КАК СоответствиеВнеоборотныхАктивовПлановойНоменклатуре
						|ГДЕ
						|	СоответствиеВнеоборотныхАктивовПлановойНоменклатуре.ВнеоборотныйАктив = &ВнеоборотныйАктив";

					Запрос.УстановитьПараметр("ВнеоборотныйАктив", СтрокаТЧ.ОсновноеСредство);

					Результат = Запрос.Выполнить();

					ВыборкаДетальныеЗаписи = Результат.Выбрать();

					Если ВыборкаДетальныеЗаписи.Следующий() Тогда
						Движение.НоменклатураОС = ВыборкаДетальныеЗаписи.ПлановаяНоменклатура;
					Иначе	
						Движение.НоменклатураОС = СтрокаТЧ.ОсновноеСредство;
					КонецЕсли;

				КонецЕсли;
				Движение.Количество = 1;
			ИначеЕсли ТЧ = "НМА" Тогда
				Если ДоговорРеализации Тогда
					Движение.НоменклатураОС = СтрокаТЧ.НематериальныйАктив;
				Иначе

					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	СоответствиеВнеоборотныхАктивовПлановойНоменклатуре.ПлановаяНоменклатура
						|ИЗ
						|	РегистрСведений.узп_СоответствиеВнеоборотныхАктивовПлановойНоменклатуре КАК СоответствиеВнеоборотныхАктивовПлановойНоменклатуре
						|ГДЕ
						|	СоответствиеВнеоборотныхАктивовПлановойНоменклатуре.ВнеоборотныйАктив = &ВнеоборотныйАктив";

					Запрос.УстановитьПараметр("ВнеоборотныйАктив", СтрокаТЧ.НематериальныйАктив);

					Результат = Запрос.Выполнить();

					ВыборкаДетальныеЗаписи = Результат.Выбрать();

					Если ВыборкаДетальныеЗаписи.Следующий() Тогда
						Движение.НоменклатураОС = ВыборкаДетальныеЗаписи.ПлановаяНоменклатура;
					Иначе	
						Движение.НоменклатураОС = СтрокаТЧ.НематериальныйАктив;
					КонецЕсли;

				КонецЕсли;
				Движение.Количество = 1;
			Иначе 
				Движение.НоменклатураОС = СтрокаТЧ.Номенклатура;
				Движение.Количество = СтрокаТЧ.Количество;
			КонецЕсли;
			Если УчитыватьНДС Тогда
				Если Документ.СуммаВключаетНДС Тогда
					Движение.Сумма = СтрокаТЧ.Сумма;
				Иначе
					Движение.Сумма = СтрокаТЧ.Сумма+СтрокаТЧ.СуммаНДС;
				КонецЕсли;
			Иначе
				Если Документ.СуммаВключаетНДС Тогда
					Движение.Сумма = СтрокаТЧ.Сумма-СтрокаТЧ.СуммаНДС;
				Иначе
					Движение.Сумма = СтрокаТЧ.Сумма;
				КонецЕсли;
			КонецЕсли;
			Если ДокументВозврата Тогда
				Движение.Сумма = -Движение.Сумма;
				Движение.Количество = -Движение.Количество;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Попытка
		ДвиженияПоИсполнению.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать движения по исполнению договора для документа "+Строка(Документ.Ссылка)+"
		|	"+ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Процедура СформироватьТаблицуПлатежныхДней(ТаблицаДат) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабДанных",ТаблицаДат);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.Организация КАК Организация,
	|	Таб.Год КАК Год
	|ПОМЕСТИТЬ ТабДок
	|ИЗ
	|	&ТабДанных КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикПлатежныхДней.Организация КАК Организация,
	|	ГрафикПлатежныхДней.ДатаКалендаря КАК Дата,
	|	ГрафикПлатежныхДней.Год
	|ИЗ
	|	ТабДок КАК ТабДок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ден_ГрафикПлатежныхДней КАК ГрафикПлатежныхДней
	|		ПО ТабДок.Организация = ГрафикПлатежныхДней.Организация
	|			И ТабДок.Год <= ГрафикПлатежныхДней.Год
	|ГДЕ
	|	ГрафикПлатежныхДней.ВидДня = ЗНАЧЕНИЕ(Перечисление.ден_ВидыДнейГрафикаПлатежныхДней.Платежный)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата";
	
	Результат = Запрос.Выполнить();
	ТаблицаДат = Результат.Выгрузить();
КонецПроцедуры

Функция ПолучитьТаблицуПлатежныхДней(От,До) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("От",От);
	Запрос.УстановитьПараметр("До",До);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикПлатежныхДней.Организация КАК Организация,
	|	ГрафикПлатежныхДней.ДатаКалендаря КАК Дата,
	|	ГрафикПлатежныхДней.Год
	|ИЗ
	|	РегистрСведений.ден_ГрафикПлатежныхДней КАК ГрафикПлатежныхДней
	|ГДЕ
	|	ГрафикПлатежныхДней.ВидДня = ЗНАЧЕНИЕ(Перечисление.ден_ВидыДнейГрафикаПлатежныхДней.Платежный)
	|	И ГрафикПлатежныхДней.Год>=&От И ГрафикПлатежныхДней.Год<=&До
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата";
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();
КонецФункции

Функция ПривестиДатуПлатежа(Направление,Организация,Дата,ПоСпособу = Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("Направление",Направление);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.Организация КАК Организация,
	|	Таб.ДатаКалендаря КАК Дата
	|ПОМЕСТИТЬ ТабДок
	|ИЗ
	|	РегистрСведений.ден_ГрафикПлатежныхДней КАК Таб
	|ГДЕ
	|	Таб.Организация = &Организация
	|	И ВЫБОР
	|			КОГДА &Направление = 1
	|				ТОГДА Таб.ДатаКалендаря > &Дата
	|			ИНАЧЕ Таб.ДатаКалендаря < &Дата
	|		КОНЕЦ И Таб.ВидДня = ЗНАЧЕНИЕ(Перечисление.ден_ВидыДнейГрафикаПлатежныхДней.Платежный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабДок.Дата КАК Дата
	|ИЗ
	|	ТабДок КАК ТабДок
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата "+?(Направление = 1,"Возр","Убыв");
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ?(НЕ ПоСпособу,Дата+Направление*86400,Дата);
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Дата;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСписокДоговоров(Организация,СтруктурноеПодразделение,Контрагент,Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыИДополнительныеСоглашенияСрезПоследних.Договор
	|ИЗ
	|	РегистрСведений.дог_ДоговорыИДополнительныеСоглашения.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|				И Договор.Владелец = &Контрагент) КАК ДоговорыИДополнительныеСоглашенияСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	
	Результат = Запрос.Выполнить();
	СЗ = Новый СписокЗначений;
	СЗ.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("Договор"));
	Возврат СЗ;
КонецФункции

Процедура ИсключитьПроверку(ПроверяемыеРеквизиты,Имя) Экспорт
	Если ПроверяемыеРеквизиты.Найти(Имя)<>Неопределено Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти(Имя));
	КонецЕсли;
КонецПроцедуры

Функция РассчитатьСуммуСобытия(СтруктураДанных) Экспорт
	ПравилоРасчета = СтруктураДанных.ПравилоРасчетаПлатежей;
	Запрос = Новый Запрос;
	Запрос.Текст = ПравилоРасчета.ТекстЗапроса;
	ТребуетсяЗапросКПараметрам = Ложь;
	ПараметрыСтроки = Новый Массив;
	ПараметрыСтроки.Добавить("Организация");
	ПараметрыСтроки.Добавить("СтруктурноеПодразделение");
	ПараметрыСтроки.Добавить("Договор");
	ПараметрыСтроки.Добавить("Контрагент");
	ПараметрыСтроки.Добавить("НачалоПериодаРасчета");
	ПараметрыСтроки.Добавить("ОкончаниеПериодаРасчета");
	Для Каждого СтрокаПараметр Из ПравилоРасчета.ПараметрыЗапроса Цикл
		Если НЕ СтрокаПараметр.ПараметрДоговора Тогда
			Запрос.УстановитьПараметр(СтрокаПараметр.ИмяПараметра,СтрокаПараметр.ЗначениеПараметра);
		ИначеЕсли ПараметрыСтроки.Найти(СтрокаПараметр.ЗначениеПараметра)<>Неопределено Тогда
			Запрос.УстановитьПараметр(СтрокаПараметр.ИмяПараметра,СтруктураДанных[СтрокаПараметр.ЗначениеПараметра]);
		Иначе
			ТребуетсяЗапросКПараметрам = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ТребуетсяЗапросКПараметрам Тогда
	
		ЗапросПараметры = Новый Запрос;
		ЗапросПараметры.Текст = 
			"ВЫБРАТЬ *
			|ИЗ
			|	РегистрСведений.дог_ДоговорыИДополнительныеСоглашения.СрезПоследних(&Дата, Договор = &Договор) КАК дог_ДоговорыИДополнительныеСоглашенияСрезПоследних";
		
		ЗапросПараметры.УстановитьПараметр("Дата", 		СтруктураДанных.ОкончаниеПериодаРасчета);
		ЗапросПараметры.УстановитьПараметр("Договор", 	СтруктураДанных.Договор);
		
		РезультатЗапроса = ЗапросПараметры.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Для Каждого СтрокаПараметр Из ПравилоРасчета.ПараметрыЗапроса Цикл
				Если СтрокаПараметр.ПараметрДоговора И ПараметрыСтроки.Найти(СтрокаПараметр.ЗначениеПараметра)=Неопределено Тогда
					Запрос.УстановитьПараметр(СтрокаПараметр.ИмяПараметра,ВыборкаДетальныеЗаписи[СтрокаПараметр.ЗначениеПараметра]);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При расчете по договору "+СтруктураДанных.Договор+" произошла ошибка:
		|	"+ОписаниеОшибки());
		Возврат 0;
	КонецПопытки;
	
	Если Выборка.Следующий() Тогда
		Попытка
			Возврат Выборка.СуммаСобытия;
		Исключение
			Возврат 0;
		КонецПопытки;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция СписокПараметровДоговораДляПроизвольногоПравила() Экспорт
	СписокПараметров = Новый СписокЗначений;
	СписокПараметров.Добавить("Организация",	"Организация");
	СписокПараметров.Добавить("Контрагент",		"Контрагент");
	СписокПараметров.Добавить("Договор",		"Договор");
	СписокПараметров.Добавить("СтруктурноеПодразделение",	"Структурное подразделение");
	СписокПараметров.Добавить("НачалоПериодаРасчета",		"Начало периода расчета");
	СписокПараметров.Добавить("ОкончаниеПериодаРасчета",	"Окончание периода расчета");
	Для Каждого Ресурс Из Метаданные.РегистрыСведений.дог_ДоговорыИДополнительныеСоглашения.Ресурсы Цикл
		СписокПараметров.Добавить(Ресурс.Имя,	Ресурс.Синоним);
	КонецЦикла;
	Возврат СписокПараметров;
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ТМЗ

Функция КоэффициентПересчетаВБазовую(ЕдиницаИзмерения,Номенклатура) Экспорт
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат 1;
	КонецЕсли;
	Если ЕдиницаИзмерения = Номенклатура.БазоваяЕдиницаИзмерения Тогда
		Возврат 1;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КоэффициентыПересчета.КоэффициентПересчета
	|ИЗ
	|	РегистрСведений.узп_КоэффициентыПересчетаЕдиницИзмерения КАК КоэффициентыПересчета
	|ГДЕ
	|	КоэффициентыПересчета.ИсходнаяЕдиницаИзмерения = &ИсходнаяЕдиницаИзмерения
	|	И КоэффициентыПересчета.Номенклатура = &Номенклатура
	|	И КоэффициентыПересчета.РезультирующаяЕдиницаИзмерения = &РезультирующаяЕдиницаИзмерения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КоэффициентыПересчета.КоэффициентПересчета
	|ИЗ
	|	РегистрСведений.узп_КоэффициентыПересчетаЕдиницИзмерения КАК КоэффициентыПересчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	|		ПО КоэффициентыПересчета.Номенклатура = спрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ПлановаяНоменклатура КАК ПлановаяНоменклатура
	|		ПО КоэффициентыПересчета.Номенклатура = ПлановаяНоменклатура.Ссылка
	|ГДЕ
	|	КоэффициентыПересчета.ИсходнаяЕдиницаИзмерения = &ИсходнаяЕдиницаИзмерения
	|	И КоэффициентыПересчета.РезультирующаяЕдиницаИзмерения = &РезультирующаяЕдиницаИзмерения
	|	И ПлановаяНоменклатура.Ссылка ЕСТЬ NULL 
	|	И спрНоменклатура.Ссылка ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("ИсходнаяЕдиницаИзмерения", ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("РезультирующаяЕдиницаИзмерения", Номенклатура.БазоваяЕдиницаИзмерения);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.КоэффициентПересчета;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КоэффициентыПересчета.КоэффициентПересчета
		|ИЗ
		|	РегистрСведений.узп_КоэффициентыПересчетаЕдиницИзмерения КАК КоэффициентыПересчета
		|ГДЕ
		|	КоэффициентыПересчета.ИсходнаяЕдиницаИзмерения = &ИсходнаяЕдиницаИзмерения
		|	И КоэффициентыПересчета.Номенклатура = &Номенклатура
		|	И КоэффициентыПересчета.РезультирующаяЕдиницаИзмерения = &РезультирующаяЕдиницаИзмерения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КоэффициентыПересчета.КоэффициентПересчета
		|ИЗ
		|	РегистрСведений.узп_КоэффициентыПересчетаЕдиницИзмерения КАК КоэффициентыПересчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
		|		ПО КоэффициентыПересчета.Номенклатура = спрНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ПлановаяНоменклатура КАК ПлановаяНоменклатура
		|		ПО КоэффициентыПересчета.Номенклатура = ПлановаяНоменклатура.Ссылка
		|ГДЕ
		|	КоэффициентыПересчета.ИсходнаяЕдиницаИзмерения = &ИсходнаяЕдиницаИзмерения
		|	И КоэффициентыПересчета.РезультирующаяЕдиницаИзмерения = &РезультирующаяЕдиницаИзмерения
		|	И ПлановаяНоменклатура.Ссылка ЕСТЬ NULL 
		|	И спрНоменклатура.Ссылка ЕСТЬ NULL ";
		
		Запрос.УстановитьПараметр("ИсходнаяЕдиницаИзмерения", Номенклатура.БазоваяЕдиницаИзмерения);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("РезультирующаяЕдиницаИзмерения", ЕдиницаИзмерения);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат 1/ВыборкаДетальныеЗаписи.КоэффициентПересчета;
		Иначе
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРегламентированнуюНоменклатуру(Номенклатура,Характеристика,Дата) Экспорт
	Если ТипЗнч(Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат Номенклатура;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Соответствие.РегламентированнаяНоменклатура,
	|	Соответствие.ПлановаяНоменклатура,
	|	Соответствие.ХарактеристикаПлановойНоменклатуры
	|ИЗ
	|	РегистрСведений.узп_СоответствиеПлановойИРегламентированнойНоменклатуры.СрезПоследних(&Дата, ) КАК Соответствие
	|ГДЕ
	|	Соответствие.ПлановаяНоменклатура = &ПлановаяНоменклатура
	|	И Соответствие.ХарактеристикаПлановойНоменклатуры = &ХарактеристикаПлановойНоменклатуры";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ПлановаяНоменклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаПлановойНоменклатуры", Характеристика);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РегламентированнаяНоменклатура");
	Если Результат.Количество()=0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Соответствие.РегламентированнаяНоменклатура,
		|	Соответствие.ПлановаяНоменклатура,
		|	Соответствие.ХарактеристикаПлановойНоменклатуры
		|ИЗ
		|	РегистрСведений.узп_СоответствиеПлановойИРегламентированнойНоменклатуры.СрезПоследних(&Дата, ) КАК Соответствие
		|ГДЕ
		|	Соответствие.ПлановаяНоменклатура = &ПлановаяНоменклатура
		|	И Соответствие.ХарактеристикаПлановойНоменклатуры = &ХарактеристикаПлановойНоменклатуры";
		
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("ПлановаяНоменклатура", Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикаПлановойНоменклатуры", Справочники.узп_ПлановыеХарактеристикиНоменклатуры.ПустаяСсылка());
		
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РегламентированнаяНоменклатура");
		Если Результат.Количество()=0 Тогда
			Возврат Справочники.Номенклатура.ПустаяСсылка();
		ИначеЕсли Результат.Количество()=1 Тогда
			Возврат Результат.Получить(0);
		Иначе
			Возврат Результат;
		КонецЕсли;
	ИначеЕсли Результат.Количество()=1 Тогда
		Возврат Результат.Получить(0);
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	
КонецФункции

Функция ПолучитьТипВводаНоменклатуры() Экспорт
	Перечень = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ИспользуемыйНоменклатурныйПеречень");
	МассивТипов = Новый Массив;
	Если Перечень = Перечисления.узп_ИспользуемыеНоменклатурныеПеречни.ПлановаяНоменклатура Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.фин_ПлановаяНоменклатура"));
	ИначеЕсли Перечень = Перечисления.узп_ИспользуемыеНоменклатурныеПеречни.РегламентированнаяНоменклатура Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
	Иначе
		МассивТипов.Добавить(Тип("СправочникСсылка.фин_ПлановаяНоменклатура"));
		МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
	КонецЕсли;	
	Возврат Новый ОписаниеТипов(МассивТипов);		
КонецФункции


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ЦЕНАМИ

// Процедура заполняет единицу и цену по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ЗаполнитьЕдиницуЦенуПродажиТабЧастиПлан(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета,ТипЦен,ВалютаДокумента) Экспорт
	
	КурсДок         = 1;
	КратностьДок    = 1;
	
	//Из регистра сведений ЦеныНоменклатуры по Номенклатура, ТипЦен получить ресурсы, 
	// установить коэффициент.
	// Если не заданы значения измерений, то устанавливаем по справочнику
	
	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда 
		
		// берем из самого реквизита Номенклатура
		Если СтрокаТабличнойЧасти.Свойство("ЕдиницаИзмерения") Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
		КонецЕсли;
		Если СтрокаТабличнойЧасти.Свойство("Коэффициент") Тогда
			СтрокаТабличнойЧасти.Коэффициент      = 1;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Цена = 0;
		
	Иначе
		// из регистра
		Цена = ПолучитьПлановуюЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,ТипЦен, ДокументОбъект.Дата,ВалютаДокумента, КурсДок, КратностьДок, ДокументОбъект.Сценарий);
		
		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		Если НЕ ЗначениеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = Цена;
		КонецЕсли;
		
		// Если единица оказалась не заполненной, то заполняем ее основной единицей номеклатуры
		Если СтрокаТабличнойЧасти.Свойство("ЕдиницаИзмерения") Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент      = 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЕдиницуЦенуПродажиТабЧасти()

// Функция возвращает цену компании для требуемой номенклатуры в указанном типе цен , 
// на заданную дату, за заданную единицу измерения, пересчитанную в требуемую валюту по заданному курсу.
//
// Параметры: 
//  Номенклатура         - ссылка на элемент справочника "Номенклатура", для которого надо получить цену,
//  ТипЦен               - ссылка на элемент справочника "Типы цен", опредедяет цену какого типа надо получить,
//  Дата                 - дата, на которую надо получить цену, если не заполнено, то берется рабочая дата
//  ЕдиницаИзмерения     - ссылка на элемент справочника "Единицы измерения", определяет для какой единицы надо получить 
//                         цену, если не заполнен, то заполняется единицей цены
//  Валюта               - ссылка на элемент справочника "Валюты", определяет валюту. в которой надо вернуть цену,
//                         если не заполнен, то заполняется валютой цены
//  Курс                 - число, курс требуемой валюты, если не заполнен, берется курс из регистра 
//                         сведений "Курсы валют",
//  Кратность            - число, кратность требуемой валюты, если не заполнена, берется курс из регистра 
//                         сведений "Курсы валют",
//
// Возвращаемое значение:
//  Число, рассчитанное значение цены.
//
Функция ПолучитьПлановуюЦенуНоменклатуры(Номенклатура, ТипЦен, Дата, 
	Валюта = Неопределено, Курс = 0, Кратность = 1, Сценарий) Экспорт
	
	Если Не ЗначениеЗаполнено(Сценарий) Тогда
		Возврат 0;
	КонецЕсли;
	
	ПолученнаяЦена = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",         Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТипЦен",       ТипЦен);
	Запрос.УстановитьПараметр("Сценарий",  		Сценарий);
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныНоменклатуры.Цена,
	|	ЦеныНоменклатуры.Валюта
	|ИЗ
	|	РегистрСведений.фин_ПрогнозныеЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура И ТипЦен = &ТипЦен И Сценарий = &Сценарий) КАК ЦеныНоменклатуры";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПолученнаяЦена = Выборка.Цена;
		ВалютаЦены     = Выборка.Валюта;
	КонецЕсли;
	
	Если НЕ (ВалютаЦены = Валюта) И НЕ (Валюта = Неопределено) И НЕ (ВалютаЦены = Неопределено) Тогда
		
		СтруктураКурсаЦены = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ВалютаЦены, Дата);
		ПолученнаяЦена     = фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(ПолученнаяЦена, ВалютаЦены, Валюта, 
		СтруктураКурсаЦены.Курс, СтруктураКурсаЦены.Кратность,
		Курс, Кратность);
		
	ИначеЕсли Валюта = Неопределено Тогда
		Валюта = ВалютаЦены;
	КонецЕсли;
	
	Возврат ПолученнаяЦена;
	
КонецФункции // ПолучитьЦенуНоменклатуры()

// Процедура заполняет единицу и цену по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, СтруктураДанныхДокумента, ВалютаРегламентированногоУчета,ПоЦенамПоставщика = Ложь) Экспорт
	
	ВалютаДокумента = ?(СтруктураДанныхДокумента.Свойство("ВалютаДокумента"), СтруктураДанныхДокумента.ВалютаДокумента, ВалютаРегламентированногоУчета);  
	КурсДок         = ?(СтруктураДанныхДокумента.Свойство("ВалютаДокумента"), фин_ОбщегоНазначенияСервер.КурсДокумента(СтруктураДанныхДокумента, ВалютаРегламентированногоУчета), 1);
	КратностьДок    = ?(СтруктураДанныхДокумента.Свойство("ВалютаДокумента"), фин_ОбщегоНазначенияСервер.КратностьДокумента(СтруктураДанныхДокумента, ВалютаРегламентированногоУчета), 1);
	
	//Из регистра сведений ЦеныНоменклатуры по Номенклатура, ТипЦен получить ресурсы, 
	// установить коэффициент.
	// Если не заданы значения измерений, то устанавливаем по справочнику
	ТипЦен = "";
	
	Если СтруктураДанныхДокумента.Свойство("ТипЦен") Тогда
		ТипЦен = СтруктураДанныхДокумента.ТипЦен;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда 
		
		// берем из самого реквизита Номенклатура
		Если СтрокаТабличнойЧасти.Свойство("ЕдиницаИзмерения") Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
		КонецЕсли;
		Если СтрокаТабличнойЧасти.Свойство("Коэффициент") Тогда
			СтрокаТабличнойЧасти.Коэффициент      = 1;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Цена = 0;
		
	Иначе
		// из регистра
		Если ПоЦенамПоставщика Тогда
			Цена = ПолучитьЦенуПоставщика(СтрокаТабличнойЧасти.Номенклатура,
				СтруктураДанныхДокумента.ТипЦен, СтруктураДанныхДокумента.Дата,
				ВалютаДокумента, КурсДок, КратностьДок, СтруктураДанныхДокумента.Контрагент);
		Иначе
			Цена = ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
				СтруктураДанныхДокумента.ТипЦен, СтруктураДанныхДокумента.Дата,
				ВалютаДокумента, КурсДок, КратностьДок, СтруктураДанныхДокумента.Организация);
		КонецЕсли;
		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		Если НЕ ЗначениеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(	Цена, 
								Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
								СтруктураДанныхДокумента.ТипЦен.ЦенаВключаетНДС,
								СтруктураДанныхДокумента.Свойство("УчитыватьНДС") И СтруктураДанныхДокумента.УчитыватьНДС, 
								СтруктураДанныхДокумента.Свойство("СуммаВключаетНДС") И СтруктураДанныхДокумента.СуммаВключаетНДС, 
								?(СтрокаТабличнойЧасти.Свойство("СтавкаНДС"),дог_УправлениеДоговорамиСерверПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
		КонецЕсли;
		
		// Если единица оказалась не заполненной, то заполняем ее основной единицей номеклатуры
		Если СтрокаТабличнойЧасти.Свойство("ЕдиницаИзмерения") Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент      = 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЕдиницуЦенуПродажиТабЧасти()


// Производит пересчет цен при изменении флагов учета налогов.
// Пересчет зависит от способа заполнения цен, при заполнении По ценам номенклатуры (при продаже) 
// хочется избегать ситуаций, когда компания «теряет деньги» при пересчете налогов. 
// Поэтому если в документе флаг "Учитывать налог" выключен, то цены должны браться напрямую из справочника, 
// потому что хочется продавать по той же цене, независимо от режима налогообложения. 
// Например, если отпускная цена задана с НДС для избежания ошибок округления, то это не значит, 
// что при отпуске без НДС мы должны продать дешевле. Если же флаг учета налога в документе включен, 
// то цены должны пересчитываться при подстановке в документ: 
// налог должен включаться или не включаться в зависимости от флага включения налога в типе цен.
// При заполнении по ценам контрагентов (при покупке) хочется хранить цены поставщиков. 
// Поэтому нужно пересчитывать всегда по установленным флагам в документе и в типе цен. 
// Это гарантирует, что при записи цен в регистр и последующем их чтении, 
// например, при заполнении следующего документа, мы с точностью до ошибок округления при пересчете 
// получим те же самые цены.
//
// Все расчеты с акцизом провоим из того предположения, что если Цена включает НДС, то она включает и Акциз
//
// Параметры: 
//  Цена                - число, пересчитваемое значение цены, 
//  СпособЗаполненияЦен - ссылка на перечисление СпособыЗаполненияЦен, определяет способ расчета,
//						  "при продаже" или "при покупке", см описание функции,
//  ЦенаВключаетНДС     - булево, определяет содержит ли переданное значение цены НДС,
//  УчитыватьНДС        - булево, определяет должно ли новое значение цены учитвать НДС,
//  СуммаВключаетНДС    - булево, определяет должно ли новое значение цены включать НДС,
//  СтавкаНДС           - число, ставка НДС, 
//
//  ЦенаВключаетАкциз   - булево, определяет содержит ли переданное значение цены Акциз,
//  УчитыватьАкциз      - булево, определяет должно ли новое значение цены учитвать Акциз,
//  СуммаВключаетАкциз  - булево, определяет должно ли новое значение цены включать Акциз,
//  СуммаАкциза         - число, сумма акциза на единицу, 
//
// Возвращаемое значение:
//  Числое, новое значение цены.
//
Функция ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, СпособЗаполненияЦен, ЦенаВключаетНДС,
													УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС, 
													ЦенаВключаетАкциз  = Ложь, УчитыватьАкциз = Ложь, 
													СуммаВключаетАкциз = Ложь, СуммаАкциза = 0) Экспорт

	// Инициализация переменных
	НадоВключитьНДС  = Ложь;
	НадоИсключитьНДС = Ложь;
	
	НадоВключитьАкциз  = Ложь;
	НадоИсключитьАкциз = Ложь;
	
	НоваяЦена		 = Цена;
	
	Если УчитыватьНДС Тогда
		Если СуммаВключаетНДС И (НЕ ЦенаВключаетНДС) Тогда
			// Надо добавлять НДС       
			НадоВключитьНДС = Истина;
		ИначеЕсли НЕ СуммаВключаетНДС И ЦенаВключаетНДС Тогда
			// Надо исключать НДС       
			НадоИсключитьНДС = Истина;
		КонецЕсли;
	Иначе
		Если ЦенаВключаетНДС  Тогда
			// Надо исключать НДС       
			НадоИсключитьНДС = Истина;
		КонецЕсли;	
	КонецЕсли;
		
	Если УчитыватьАкциз Тогда
		Если СуммаВключаетАкциз И (НЕ ЦенаВключаетАкциз) Тогда
			// Надо добавлять НДС       
			НадоВключитьАкциз = Истина;
		ИначеЕсли НЕ СуммаВключаетАкциз И ЦенаВключаетАкциз Тогда
			// Надо исключать НДС       
			НадоИсключитьАкциз = Истина;
		КонецЕсли;
		// при условии что у нас вдется учет Акциза и Сумма будет включать НДС, принудительного акциз включаем в цену, 
		//т.к. он входит в базу для расчета НДС
		Если НадоВключитьНДС И НЕ СуммаВключаетАкциз Тогда
			НадоВключитьАкциз = Истина;
			// при этом если Акциз ране у нас был - отнимем его, чтобы не включить дважды
			Если ЦенаВключаетАкциз  Тогда
				НадоИсключитьАкциз = Истина;
			КонецЕсли;	
		КонецЕсли;
	Иначе
		Если ЦенаВключаетАкциз  Тогда
			// Надо исключать НДС       
			НадоИсключитьАкциз = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	//НДС накручивается сверху, поэтому при любом раскладе первым исключаем его
	Если НадоИсключитьНДС Тогда
		НоваяЦена = (НоваяЦена * 100) / (100 + СтавкаНДС);
	КонецЕсли;
	
	// Исключаем акциз
	Если НадоИсключитьАкциз Тогда
		НоваяЦена =  НоваяЦена - СуммаАкциза;
	КонецЕсли;	
	
	//включаем его при необходимости 
	Если НадоВключитьАкциз Тогда
		НоваяЦена = НоваяЦена + СуммаАкциза;
	КонецЕсли;	
	
	
	Если НадоВключитьНДС Тогда
		НоваяЦена = (НоваяЦена * (100 + СтавкаНДС)) / 100;
	КонецЕсли;

	Возврат НоваяЦена;

КонецФункции // ПересчитатьЦенуПриИзмененииФлаговНалогов()


// Функция возвращает цену компании для требуемой номенклатуры в указанном типе цен , 
// на заданную дату, за заданную единицу измерения, пересчитанную в требуемую валюту по заданному курсу.
//
// Параметры: 
//  Номенклатура         - ссылка на элемент справочника "Номенклатура", для которого надо получить цену,
//  ТипЦен               - ссылка на элемент справочника "Типы цен", опредедяет цену какого типа надо получить,
//  Дата                 - дата, на которую надо получить цену, если не заполнено, то берется рабочая дата
//  ЕдиницаИзмерения     - ссылка на элемент справочника "Единицы измерения", определяет для какой единицы надо получить 
//                         цену, если не заполнен, то заполняется единицей цены
//  Валюта               - ссылка на элемент справочника "Валюты", определяет валюту. в которой надо вернуть цену,
//                         если не заполнен, то заполняется валютой цены
//  Курс                 - число, курс требуемой валюты, если не заполнен, берется курс из регистра 
//                         сведений "Курсы валют",
//  Кратность            - число, кратность требуемой валюты, если не заполнена, берется курс из регистра 
//                         сведений "Курсы валют",
//
// Возвращаемое значение:
//  Число, рассчитанное значение цены.
//
Функция ПолучитьЦенуПоставщика(Номенклатура, ТипЦен, Дата, 
	Валюта = Неопределено, Курс = 0, Кратность = 1, Контрагент) Экспорт
	
	//Если Не ЗначениеЗаполнено(Контрагент) Тогда
	//	Возврат 0;
	//КонецЕсли;
	
	ПолученнаяЦена = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",         Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТипЦен",       ТипЦен);
	Запрос.УстановитьПараметр("Контрагент",  Контрагент);
	Запрос.УстановитьПараметр("Сценарий",  		фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ОсновнойСценарийПланированияЗакупок"));
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныНоменклатуры.Цена,
	|	ЦеныНоменклатуры.Валюта
	|ИЗ
	|	РегистрСведений.узп_ПереченьЦенПоставщиков.СрезПоследних(
	|			&Дата,
	|			Номенклатура = &Номенклатура
	|				И ТипЦен = &ТипЦен
	|				И Контрагент = &Контрагент) КАК ЦеныНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныНоменклатуры.Цена,
	|	ЦеныНоменклатуры.Валюта
	|ИЗ
	|	РегистрСведений.фин_ПрогнозныеЦеныНоменклатуры.СрезПоследних(
	|			&Дата,
	|			Номенклатура = &Номенклатура
	|				И ТипЦен = &ТипЦен
	|				И Сценарий = &Сценарий) КАК ЦеныНоменклатуры";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПолученнаяЦена = Выборка.Цена;
		ВалютаЦены     = Выборка.Валюта;
	КонецЕсли;
	
	Если НЕ (ВалютаЦены = Валюта) И НЕ (Валюта = Неопределено) И НЕ (ВалютаЦены = Неопределено) Тогда
		
		СтруктураКурсаЦены = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ВалютаЦены, Дата);
		ПолученнаяЦена     = фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(ПолученнаяЦена, ВалютаЦены, Валюта, 
		СтруктураКурсаЦены.Курс, СтруктураКурсаЦены.Кратность,
		Курс, Кратность);
		
	ИначеЕсли Валюта = Неопределено Тогда
		Валюта = ВалютаЦены;
	КонецЕсли;
	
	Возврат ПолученнаяЦена;
	
КонецФункции // ПолучитьЦенуПоставщика()

// Функция возвращает цену компании для требуемой номенклатуры в указанном типе цен , 
// на заданную дату, за заданную единицу измерения, пересчитанную в требуемую валюту по заданному курсу.
//
// Параметры: 
//  Номенклатура         - ссылка на элемент справочника "Номенклатура", для которого надо получить цену,
//  ТипЦен               - ссылка на элемент справочника "Типы цен", опредедяет цену какого типа надо получить,
//  Дата                 - дата, на которую надо получить цену, если не заполнено, то берется рабочая дата
//  ЕдиницаИзмерения     - ссылка на элемент справочника "Единицы измерения", определяет для какой единицы надо получить 
//                         цену, если не заполнен, то заполняется единицей цены
//  Валюта               - ссылка на элемент справочника "Валюты", определяет валюту. в которой надо вернуть цену,
//                         если не заполнен, то заполняется валютой цены
//  Курс                 - число, курс требуемой валюты, если не заполнен, берется курс из регистра 
//                         сведений "Курсы валют",
//  Кратность            - число, кратность требуемой валюты, если не заполнена, берется курс из регистра 
//                         сведений "Курсы валют",
//
// Возвращаемое значение:
//  Число, рассчитанное значение цены.
//
Функция ПолучитьЦенуНоменклатуры(Номенклатура, ТипЦен, Дата, 
	Валюта = Неопределено, Курс = 0, Кратность = 1, Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат 0;
	КонецЕсли;
	
	ПолученнаяЦена = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",         Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТипЦен",       ТипЦен);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Сценарий",  		фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ОсновнойСценарийПланированияЗакупок"));
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныНоменклатуры.Цена,
	|	ЦеныНоменклатуры.Валюта
	|ИЗ
	|	РегистрСведений."+?(ТипЗнч(Номенклатура)=Тип("СправочникСсылка.фин_ПлановаяНоменклатура"),"фин_Прогнозные","")+"ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура И ТипЦен = &ТипЦен И "+?(ТипЗнч(Номенклатура)=Тип("СправочникСсылка.фин_ПлановаяНоменклатура"),"Сценарий = &Сценарий","Организация = &Организация")+") КАК ЦеныНоменклатуры";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПолученнаяЦена = Выборка.Цена;
		ВалютаЦены     = Выборка.Валюта;
	КонецЕсли;
	
	Если НЕ (ВалютаЦены = Валюта) И НЕ (Валюта = Неопределено) И НЕ (ВалютаЦены = Неопределено) Тогда
		
		СтруктураКурсаЦены = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ВалютаЦены, Дата);
		ПолученнаяЦена     = фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(ПолученнаяЦена, ВалютаЦены, Валюта, 
		СтруктураКурсаЦены.Курс, СтруктураКурсаЦены.Кратность,
		Курс, Кратность);
		
	ИначеЕсли Валюта = Неопределено Тогда
		Валюта = ВалютаЦены;
	КонецЕсли;
	
	Возврат ПолученнаяЦена;
	
КонецФункции // ПолучитьЦенуНоменклатуры()

// Получает контекст общей формы "Цены и Валюта", устанавливает в ней значения и доступность реквизитов 
// по значениям, заданным в документе, и открывает форму. 
//
// Параметры: 
//  ДокументОбъект                     - обьъект редактируемого документа; 
//  СтруктураРеквизитовДокумента       - структура, задает список обрабатываемых реквизитов документа;
//                                       если реквизит надо обрабатывать, то для него есть ключ в этой структуре;
//  ВалютаРегламентированногоУчета     - валюта регламентированного учета
//  СтруктураНеРедактируемыхРеквизитов - структура, задает список реквизитов, которые надо показывать, 
//                                       но не надо давать изменять, необязательный параметр.
//  ИмяТабличнойЧасти                  - строка, имя табличной части, которую надо пересчитать, 
//                                       по умолчанию - "Товары".
//  НовыйТипЦенДляУстановки            - тип цен, который по возможности нужно установить как новый в форме;
//
// Возвращаемое значение:
//  Структура, содержащая значения текущих и устанавливаемых значений для реквизитов документа.
//
Функция ПолучитьФормуЦеныИВалютаТонкийКлиент(ФормаЦеныВалюты,ДокументОбъект, СтруктураРеквизитовДокумента, ВалютаРегламентированногоУчета,
	СтруктураНеРедактируемыхРеквизитов = Неопределено, ИмяТабличнойЧасти,
	НовыйТипЦенДляУстановки = Неопределено) Экспорт
	
	// Установим текущие реквизиты.
	УстановитьТекущиеРеквизитыФормаЦеныВалюты(ФормаЦеныВалюты, ДокументОбъект, 
	СтруктураРеквизитовДокумента, ИмяТабличнойЧасти, 
	ВалютаРегламентированногоУчета, НовыйТипЦенДляУстановки);
	
	// Доступность реквизитов формы.
	УстановитьДоступностьРеквизитовФормаЦеныВалюты(	ФормаЦеныВалюты, СтруктураРеквизитовДокумента, 
	СтруктураНеРедактируемыхРеквизитов);
	
	// Теперь можно и открывать форму, она вернет результат своей работы.
	Возврат ФормаЦеныВалюты;
	
КонецФункции // ОткрытьФормуЦеныИВалюта()

// По реквизитам редактируемого документа устанавливает реквизиты общей формы "Цены и Валюта".
//
// Параметры: 
//  ФормаЦеныВалюты                - форма, соответствует общей контекст общей форме "Цены и Валюта", 
//  ДокументОбъект                 - объект редактируемого документа
//  СтруктураРеквизитовДокумента   - структура, задает список обрабатываемых реквизитов документа,
//                                   если реквизит надо обрабатывать, то для него есть ключ в этой структуре.
//                                   Множество возможных ключей: (ТипЦен, ТипСкидкиНаценки, ВалютаДокумента, КурсДокумента, 
//								     КратностьДокумента, УчитыватьНДС, СуммаВключаетНДС);
//  ИмяТабличнойЧасти              - строка, имя табличной части, которую надо пересчитать, 
//                                   по умолчанию - "Товары".
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  НовыйТипЦенДляУстановки        - тип цен, который по возможности нужно установить как новый в форме;
//
Процедура УстановитьТекущиеРеквизитыФормаЦеныВалюты(ФормаЦеныВалюты, ДокументОбъект,
	СтруктураРеквизитовДокумента, ИмяТабличнойЧасти,
	ВалютаРегламентированногоУчета,
	НовыйТипЦенДляУстановки = Неопределено) Экспорт
	
	// если хоть в одной табличной части есть хотя бы одна строка, надо пересчитывать
	НадоПересчитывать = Ложь;
	Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
		Если ДокументОбъект[ТЧОбъекта.Имя].Количество() > 0 Тогда
			НадоПересчитывать = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ НадоПересчитывать И НЕ(ДокументОбъект.Метаданные().Реквизиты.Найти("Сумма") = Неопределено) Тогда
		//Все таки надо пересчитать если есть реквизит "Сумма" в шапке.
		НадоПересчитывать = Истина;
	КонецЕсли;
	
	ФормаЦеныВалюты.Вставить("ТабличнаяЧастьПуста",НЕ НадоПересчитывать);
	
	// Для получения курса на дату
	ФормаЦеныВалюты.Вставить("ДатаКурса",ДокументОбъект.Дата);
	
	// определим текущую валюту взиморасчетов
	ТекущийВалютаВзаиморасчетов = "";
	Контрагент                  = "";
	
	Если СтруктураРеквизитовДокумента.Свойство("БезКонтроляВалютыВзаиморасчетов") Тогда
		ТекущийВалютаВзаиморасчетов                 = СтруктураРеквизитовДокумента.БезКонтроляВалютыВзаиморасчетов;
		ФормаЦеныВалюты.Вставить("ТекущийВалютаВзаиморасчетов",ТекущийВалютаВзаиморасчетов);
		ФормаЦеныВалюты.Вставить("ПересчитатьЦеныПоВалюте",Истина);
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Валюты.Ссылка КАК Валюта
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|УПОРЯДОЧИТЬ ПО
		|	Валюта";
		
		Выборка = Запрос.Выполнить().Выбрать();
		МассивВыбора = Новый Массив;
		Если Выборка.Следующий() Тогда
			МассивВыбора.Добавить(Выборка.Валюта);
		КонецЕсли;
		ФормаЦеныВалюты.Вставить("НовыйВалютаДокумента_СписокВыбора",МассивВыбора);
		
		ФормаЦеныВалюты.Вставить("НовыйВалютаДокумента_КнопкаОчистки",Ложь);
	Иначе
		
		Если ДокументОбъект.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
			Если СтруктураРеквизитовДокумента.Свойство("ДоговорКонтрагента") Тогда
				ТекущийВалютаВзаиморасчетов = СтруктураРеквизитовДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			ИначеЕсли ДокументОбъект.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
				ТекущийВалютаВзаиморасчетов = ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов;			
			Иначе
				// Если в документе и в переданной структуре нет реквизита Договор
				// Проверяем есть ли реквизит валюта взаиморасчетов
				Если ДокументОбъект.Метаданные().Реквизиты.Найти("ВалютаВзаиморасчетов") <> Неопределено Тогда
					ТекущийВалютаВзаиморасчетов = ДокументОбъект.ВалютаВзаиморасчетов;
					
					// в документе ГТД импорт заполнение Валюты взаиморасчетов не обязательно
					// поэтому установим ее равно валюте документа, чтобы пользователь мог установить
					// флаги расчета сумм.
					Если НЕ ЗначениеЗаполнено(ТекущийВалютаВзаиморасчетов) и СтруктураРеквизитовДокумента.Свойство("ВалютаДокумента") Тогда
						ТекущийВалютаВзаиморасчетов = ДокументОбъект.ВалютаДокумента;
					КонецЕсли;
				Иначе
					УстановитьПривилегированныйРежим(Истина);
					ТекущийВалютаВзаиморасчетов = ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;
			ФормаЦеныВалюты.Вставить("ТекущийВалютаВзаиморасчетов",ТекущийВалютаВзаиморасчетов);
		КонецЕсли;
	КонецЕсли;
	
	// может быть, надо ограничить список доступных валют для документа?
	// сделаем это, если, во-первых, существует валюта документа, во-вторых, существует валюта взаиморасчетов
	// (т.е. передается курс взаиморасчетов)
	Если СтруктураРеквизитовДокумента.Свойство("КурсВзаиморасчетов")
		И НЕ СтруктураРеквизитовДокумента.Свойство("КурсДокумента")
		И СтруктураРеквизитовДокумента.Свойство("ВалютаДокумента") Тогда
		ФормаЦеныВалюты.Вставить("НовыйВалютаДокумента_РежимВыбораИзСписка",Истина);
		МассивВыбора = Неопределено;
		ФормаЦеныВалюты.Свойство("НовыйВалютаДокумента_СписокВыбора",МассивВыбора);
		Если МассивВыбора = Неопределено Тогда
			МассивВыбора = Новый Массив;
		КонецЕсли;
		МассивВыбора.Добавить(ТекущийВалютаВзаиморасчетов);
		
		Если ВалютаРегламентированногоУчета <> ТекущийВалютаВзаиморасчетов Тогда
			МассивВыбора.Добавить(ВалютаРегламентированногоУчета);
		КонецЕсли;
		ФормаЦеныВалюты.Вставить("НовыйВалютаДокумента_СписокВыбора",МассивВыбора);
		
		ФормаЦеныВалюты.Вставить("НовыйВалютаДокумента_КнопкаВыбора", Ложь);
		ФормаЦеныВалюты.Вставить("НовыйВалютаДокумента_КнопкаОчистки", Ложь);
	КонецЕсли;
	
	Для каждого ЭлементСтруктуры Из СтруктураРеквизитовДокумента Цикл
		Если ФормаЦеныВалюты.Свойство("Текущий" + ЭлементСтруктуры.Ключ)
			ИЛИ ЭлементСтруктуры.Ключ = "КратностьВзаиморасчетов"
			ИЛИ ЭлементСтруктуры.Ключ = "КратностьДокумента" Тогда
			ФормаЦеныВалюты.Вставить("Текущий" + ЭлементСтруктуры.Ключ,ДокументОбъект[ЭлементСтруктуры.Ключ]);
			
			Если ЭлементСтруктуры.Значение = Неопределено Тогда
				ФормаЦеныВалюты.Вставить("Новый" + ЭлементСтруктуры.Ключ,ФормаЦеныВалюты["Текущий" + ЭлементСтруктуры.Ключ]);
			Иначе
				ФормаЦеныВалюты.Вставить("Новый" + ЭлементСтруктуры.Ключ,ЭлементСтруктуры.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// если уже при открытии новый тип цен отличается от текущего, надо обработать изменения реквизитов формы
	Если ФормаЦеныВалюты.НовыйТипЦен <> ФормаЦеныВалюты.ТекущийТипЦен 
		И ЗначениеЗаполнено(ФормаЦеныВалюты.НовыйТипЦен) Тогда
		// надо установить флаг СуммаВключаемНДС из типа цены
		ФормаЦеныВалюты.Вставить("НовыйСуммаВключаетНДС",ФормаЦеныВалюты.НовыйТипЦен.ЦенаВключаетНДС);
	КонецЕсли;
	
	// если мы используем режим выбора из списка для новой валюты документа
	// и в списке нет нужной валюты, установим новую валюту в валюту взаиморасчетов
	Если ФормаЦеныВалюты.НовыйВалютаДокумента_РежимВыбораИзСписка = Истина
		И ФормаЦеныВалюты.НовыйВалютаДокумента_СписокВыбора.НайтиПоЗначению(ФормаЦеныВалюты.НовыйВалютаДокумента) = Неопределено Тогда
		ФормаЦеныВалюты.Вставить("НовыйВалютаДокумента",ФормаЦеныВалюты.НовыйВалютаДокумента_СписокВыбора[0].Значение);
	КонецЕсли;
	
	// Если передан НовыйТипЦенДляУстановки и он подходит по параметрам, установим его в форме
	Если НовыйТипЦенДляУстановки <> Неопределено
		И СтруктураРеквизитовДокумента.Свойство("ТипЦен") 
		И Метаданные.НайтиПоТипу(ТипЗнч(ДокументОбъект.ТипЦен)).Имя = НовыйТипЦенДляУстановки.Метаданные().Имя Тогда
		ФормаЦеныВалюты.Вставить("НовыйТипЦен",НовыйТипЦенДляУстановки);
	КонецЕсли;
	
	// Вызов при изменении значения договора
	Если СтруктураРеквизитовДокумента.Свойство("ВызовПриИзмененииЗначенияДоговора") Тогда
		ФормаЦеныВалюты.Вставить("НовыйВалютаДокумента",ТекущийВалютаВзаиморасчетов);
		ФормаЦеныВалюты.Вставить("ПересчитатьЦеныПоВалюте",Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьТекущиеРеквизитыФормаЦеныВалюты()

// Устанавливает доступность реквизитов общей формы "Цены и Валюта" согласно переданной структуре.
//
// Параметры: 
//  ФормаЦеныВалюты                    - форма, соответствует общей контекст общей форме "Цены и Валюта", 
//  ДокументОбъект                     - обьъект редактируемого документа; 
//  СтруктураРеквизитовДокумента       - структура, задает список обрабатываемых реквизитов документа;
//                                       если реквизит надо обрабатывать, то для него есть ключ в этой структуре;
//  СтруктураНеРедактируемыхРеквизитов - структура, задает список реквизитов, которые надо показывать, 
//                                       но не надо давать изменять, необязательный параметр.
//
Процедура УстановитьДоступностьРеквизитовФормаЦеныВалюты(	ФормаЦеныВалюты, СтруктураРеквизитовДокумента,
	СтруктураНеРедактируемыхРеквизитов = Неопределено)
	
	ФормаЦеныВалюты.Вставить("НовыйТипЦен_Доступность"               , СтруктураРеквизитовДокумента.Свойство("ТипЦен"));
	ФормаЦеныВалюты.Вставить("НовыйВалютаДокумента_Доступность"      , СтруктураРеквизитовДокумента.Свойство("ВалютаДокумента"));
	ФормаЦеныВалюты.Вставить("НовыйКурсДокумента_Доступность"        , СтруктураРеквизитовДокумента.Свойство("КурсДокумента"));
	ФормаЦеныВалюты.Вставить("НовыйКурсВзаиморасчетов_Доступность"   , СтруктураРеквизитовДокумента.Свойство("КурсВзаиморасчетов"));
	ФормаЦеныВалюты.Вставить("НовыйУчитыватьНДС_Доступность"         , СтруктураРеквизитовДокумента.Свойство("УчитыватьНДС"));
	ФормаЦеныВалюты.Вставить("НовыйСуммаВключаетНДС_Доступность"     , СтруктураРеквизитовДокумента.Свойство("СуммаВключаетНДС"));
	ФормаЦеныВалюты.Вставить("НовыйНДСВключенВСтоимость_Доступность" , СтруктураРеквизитовДокумента.Свойство("НДСВключенВСтоимость"));
	
	ФормаЦеныВалюты.Вставить("НовыйУчитыватьАкциз_Доступность"       , СтруктураРеквизитовДокумента.Свойство("УчитыватьАкциз"));
	ФормаЦеныВалюты.Вставить("НовыйСуммаВключаетАкциз_Доступность"   , СтруктураРеквизитовДокумента.Свойство("СуммаВключаетАкциз"));
	
	// Если задана структура исключений, то сделаем недоступными соответствующие реквизиты.
	Если СтруктураНеРедактируемыхРеквизитов <> Неопределено Тогда
		
		Для Каждого ЭлементСтруктуры Из СтруктураНеРедактируемыхРеквизитов Цикл
			ФормаЦеныВалюты.Вставить("Новый" + ЭлементСтруктуры.Ключ+"_Доступность", Ложь);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьРеквизитовФормаЦеныВалюты()

Функция СтруктураДанныхФормыЦеныВалюта() Экспорт
	Структура = Новый Структура;
	Структура.Вставить("ВладелецТипаЦен","");
	Структура.Вставить("ДатаКурса",'00010101');
	Структура.Вставить("НовыйВалютаДокумента",Справочники.Валюты.ПустаяСсылка());
	Структура.Вставить("НовыйКратностьВзаиморасчетов",0);
	Структура.Вставить("НовыйКратностьДокумента",0);
	Структура.Вставить("НовыйКурсВзаиморасчетов",0);
	Структура.Вставить("НовыйКурсДокумента",0);
	Структура.Вставить("НовыйНДСВключатьВСтоимость",Ложь);
	Структура.Вставить("НовыйНДСВключенВСтоимость",Ложь);
	Структура.Вставить("НовыйСуммаВключаетАкциз",Ложь);
	Структура.Вставить("НовыйСуммаВключаетНДС",Ложь);
	Структура.Вставить("НовыйТипЦен",Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	Структура.Вставить("НовыйУчитыватьАкциз",Ложь);
	Структура.Вставить("НовыйУчитыватьНДС",Ложь);
	Структура.Вставить("ПерезаполнитьЦеныПоТипу",Ложь);
	Структура.Вставить("ПересчитатьЦеныПоВалюте",Ложь);
	Структура.Вставить("ТабличнаяЧастьПуста",Ложь);
	Структура.Вставить("ТекущийВалютаВзаиморасчетов",Справочники.Валюты.ПустаяСсылка());
	Структура.Вставить("ТекущийВалютаДокумента",Справочники.Валюты.ПустаяСсылка());
	Структура.Вставить("ТекущийКратностьВзаиморасчетов",0);
	Структура.Вставить("ТекущийКратностьДокумента",0);
	Структура.Вставить("ТекущийКурсВзаиморасчетов",0);
	Структура.Вставить("ТекущийКурсДокумента",0);
	Структура.Вставить("ТекущийНДСВключенВСтоимость",Ложь);
	Структура.Вставить("ТекущийСуммаВключаетАкциз",Ложь);
	Структура.Вставить("ТекущийСуммаВключаетНДС",Ложь);
	Структура.Вставить("ТекущийТипЦен",Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	Структура.Вставить("ТекущийУчитыватьАкциз",Ложь);
	Структура.Вставить("ТекущийУчитыватьНДС",Ложь);
	Структура.Вставить("НовыйВалютаДокумента_РежимВыбораИзСписка",Ложь);
	Структура.Вставить("НовыйВалютаДокумента_СписокВыбора",Новый Массив);
	Возврат Структура;
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ЗАПОЛНЕНИЯ ДОКУМЕНТОВ
Процедура ОбработкаЗаполненияПоДоговоруОбработкаЗаполнения(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	ИсточникЗаполнения = Источник;
	Если ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") И Источник.Свойство("Ссылка") Тогда
		Попытка
			ИсточникЗаполнения = Источник.Ссылка.ПолучитьОбъект();
		Исключение
			ИсточникЗаполнения = Источник;
		КонецПопытки;
	КонецЕсли;
	общ_ПроцедурыМеханизмаЗащиты.ОбработкаЗаполненияПоДоговоруОбработкаЗаполнения(ИсточникЗаполнения, ДанныеЗаполнения, СтандартнаяОбработка);
КонецПроцедуры

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
Процедура ОбработатьВыборДоговора(Договор,ДокументОбъект) Экспорт
	Если ЗначениеЗаполнено(Договор) И ДоговорЗарегистрирован(Договор) Тогда
		Если Вопрос("Заполнить по спецификации зарегистрированного товарного договора?",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			//СписокТЧ = Новый Массив;
			//СписокТЧ.Добавить("Товары");
			//СписокТЧ.Добавить("Услуги");
			//СписокТЧ.Добавить("ОС");
			//СписокТЧ.Добавить("НМА");
			//Если ДокументОбъект.Метаданные().ТабличныеЧасти.Количество()>0 Тогда
			//	Если НЕ (ДокументОбъект.Метаданные().ТабличныеЧасти.Количество()=1 И ДокументОбъект.Метаданные().ТабличныеЧасти.Найти("фин_ЗначенияДополнительныхРеквизитовБюджетирования")<>Неопределено) Тогда
			//		Для Каждого ТЧ Из СписокТЧ Цикл
			//			Если ДокументОбъект.Метаданные().ТабличныеЧасти.Найти(ТЧ)<>Неопределено И ДокументОбъект[ТЧ].Количество()>0 Тогда
			//				Ответ = Вопрос("Табличные части при заполнении по спецификации будут очищены. Продолжить?",РежимДиалогаВопрос.ДаНет);
			//				Если Ответ=КодВозвратаДиалога.Нет Тогда
			//					Возврат;
			//				КонецЕсли;
			//				Прервать;
			//			КонецЕсли;
			//		КонецЦикла;
			//	КонецЕсли;
			//КонецЕсли;
			ОбработкаЗаполненияПоДоговоруОбработкаЗаполнения(ДокументОбъект,Договор,Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
	
#КонецЕсли

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УЧЕТА ИСПОЛНЕНИЯ ПЛАНОВЫХ ДОКУМЕНТОВ/ЗАКАЗОВ

// Процедура делает движения при проведении документов по ТМЗ, по специфике договора
//
Процедура ПриПроведенииДокументовПоДоговоруОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("УчитыватьИсполнениеТоварныхДоговоров") Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ВидОперацииПоДоговору,
	|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ВидДоговораПоТоварнымОперациям,
	|	ДоговорыИДополнительныеСоглашенияСрезПоследних.СтруктурноеПодразделение,
	|	ДоговорыИДополнительныеСоглашенияСрезПоследних.ЗамещающийДоговор,
	|	ДоговорыИДополнительныеСоглашенияСрезПоследних.КонтролироватьСрокиПоставки
	|ИЗ
	|	РегистрСведений.дог_ДоговорыИДополнительныеСоглашения.СрезПоследних(
	|			&Момент,
	|			Договор = &Договор
	|				И Организация = &Организация) КАК ДоговорыИДополнительныеСоглашенияСрезПоследних";
	Граница = Новый Граница(Источник.МоментВремени(),ВидГраницы.Включая);
	Запрос.УстановитьПараметр("Договор", Источник.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Организация", Источник.Организация);
	Запрос.УстановитьПараметр("Момент", КонецДня(Источник.Дата));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	УчетнаяПолитика.ЗапретитьТоварныеОперацииПоНезарегистрированнымДоговорам
			|ИЗ
			|	РегистрСведений.фин_УчетнаяПолитикаПоБюджетированию.СрезПоследних(&Дата, ) КАК УчетнаяПолитика";

		Запрос.УстановитьПараметр("Дата", Источник.Дата);

		мРезультат = Запрос.Выполнить();

		мВыборкаДетальныеЗаписи = мРезультат.Выбрать();

		Если мВыборкаДетальныеЗаписи.Следующий() Тогда
			Если мВыборкаДетальныеЗаписи.ЗапретитьТоварныеОперацииПоНезарегистрированнымДоговорам И НЕ РазрешитьТоварныеОперацииПоНезарегистрированнымДоговорам() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При регистрации операций по договору """+Строка(Источник.ДоговорКонтрагента)+""" документом "+Строка(Источник.Ссылка)+" возникла ошибка:
				|	договор не зарегистрирован, выполнение товарных операций по нему запрещено! Документ не может быть проведен");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;

		Возврат;
	КонецЕсли;
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений() И ВыборкаДетальныеЗаписи.СтруктурноеПодразделение <>Источник.СтруктурноеПодразделение Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При регистрации операций по договору """+Строка(Источник.ДоговорКонтрагента)+""" документом "+Строка(Источник.Ссылка)+" возникла ошибка:
		|	структурное подразделение документа отличается от структурного подразделения договора ("+?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СтруктурноеПодразделение),Строка(ВыборкаДетальныеЗаписи.СтруктурноеПодразделение),"по головному подразделению")+")!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗамещающийДоговор) Тогда
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//	"ВЫБРАТЬ
		//	|	УчетнаяПолитика.ЗапретитьТоварныеОперацииПоНезарегистрированнымДоговорам
		//	|ИЗ
		//	|	РегистрСведений.фин_УчетнаяПолитикаПоБюджетированию.СрезПоследних(&Дата, ) КАК УчетнаяПолитика";

		//Запрос.УстановитьПараметр("Дата", Источник.Дата);

		//мРезультат = Запрос.Выполнить();

		//мВыборкаДетальныеЗаписи = мРезультат.Выбрать();

		//Если мВыборкаДетальныеЗаписи.Следующий() Тогда
		//	Если мВыборкаДетальныеЗаписи.ЗапретитьТоварныеОперацииПоНезарегистрированнымДоговорам И НЕ РазрешитьТоварныеОперацииПоНезарегистрированнымДоговорам() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При регистрации операций по договору """+Строка(Источник.ДоговорКонтрагента)+""" документом "+Строка(Источник.Ссылка)+" возникла ошибка:
				|	договор имеет замещающее дополнительное соглашение, выполнение товарных операций по нему запрещено! Документ не может быть проведен");
				Отказ = Истина;
				Возврат;
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	ДоговорРеализации = Ложь;
	Если ВыборкаДетальныеЗаписи.ВидОперацииПоДоговору <> Перечисления.дог_ВидыОперацийПоДоговору.ТоварныеОперации Тогда
		Возврат;
	Иначе
		Если ВыборкаДетальныеЗаписи.ВидДоговораПоТоварнымОперациям = Перечисления.дог_ВидыДоговоровПоТоварнымОперациям.ДоговорРеализации 
			ИЛИ ВыборкаДетальныеЗаписи.ВидДоговораПоТоварнымОперациям = Перечисления.дог_ВидыДоговоровПоТоварнымОперациям.ЗаказНаПриобретение Тогда
			ДоговорРеализации = Истина;
		КонецЕсли;
	КонецЕсли;
	
	МассивТЧ = Новый Массив;
	Если (ТипЗнч(Источник)=Тип("ДокументОбъект.ПоступлениеТоваровУслуг") ИЛИ ТипЗнч(Источник)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг")) И НЕ ДоговорРеализации Тогда
		МассивТЧ.Добавить("Товары");
		МассивТЧ.Добавить("Услуги");
		МассивТЧ.Добавить("ОС");
		Если НЕ (Источник.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия
			ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Импорт) Тогда
			Возврат;
		КонецЕсли;
		СформироватьДвиженияПоИсполнениюДоговоров(Источник,МассивТЧ,ДоговорРеализации);	
	ИначеЕсли (ТипЗнч(Источник)=Тип("ДокументОбъект.ПоступлениеИзПереработки") ИЛИ ТипЗнч(Источник)=Тип("ДокументСсылка.ПоступлениеИзПереработки")) И НЕ ДоговорРеализации Тогда
		МассивТЧ.Добавить("Услуги");
		СформироватьДвиженияПоИсполнениюДоговоров(Источник,МассивТЧ,ДоговорРеализации);	
	ИначеЕсли (ТипЗнч(Источник)=Тип("ДокументОбъект.РеализацияУслугПоПереработке") ИЛИ ТипЗнч(Источник)=Тип("ДокументСсылка.РеализацияУслугПоПереработке")) И ДоговорРеализации Тогда
		МассивТЧ.Добавить("Услуги");
		СформироватьДвиженияПоИсполнениюДоговоров(Источник,МассивТЧ,ДоговорРеализации);	
	ИначеЕсли (ТипЗнч(Источник)=Тип("ДокументОбъект.АктОбОказанииПроизводственныхУслуг") ИЛИ ТипЗнч(Источник)=Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")) И ДоговорРеализации Тогда
		МассивТЧ.Добавить("Услуги");
		СформироватьДвиженияПоИсполнениюДоговоров(Источник,МассивТЧ,ДоговорРеализации);	
	ИначеЕсли (ТипЗнч(Источник)=Тип("ДокументОбъект.РеализацияТоваровУслуг") ИЛИ ТипЗнч(Источник)=Тип("ДокументСсылка.РеализацияТоваровУслуг")) И ДоговорРеализации Тогда
		МассивТЧ.Добавить("Товары");
		МассивТЧ.Добавить("Услуги");
		Если НЕ Источник.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
			Возврат;
		КонецЕсли;
		СформироватьДвиженияПоИсполнениюДоговоров(Источник,МассивТЧ,ДоговорРеализации);	
	ИначеЕсли (ТипЗнч(Источник)=Тип("ДокументОбъект.ПоступлениеНМА") ИЛИ ТипЗнч(Источник)=Тип("ДокументСсылка.ПоступлениеНМА")) И НЕ ДоговорРеализации Тогда
		МассивТЧ.Добавить("НМА");
		СформироватьДвиженияПоИсполнениюДоговоров(Источник,МассивТЧ,ДоговорРеализации);
	ИначеЕсли (ТипЗнч(Источник)=Тип("ДокументОбъект.ПередачаНМА") ИЛИ ТипЗнч(Источник)=Тип("ДокументСсылка.ПередачаНМА")) И ДоговорРеализации Тогда
		МассивТЧ.Добавить("НМА");
		СтруктураИсточник = усд_УправлениеСогласованиемДокументов.СоздатьСтруктуруПоДаннымДокумента(Источник);
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("НематериальныйАктив");
		Таблица.Колонки.Добавить("Сумма");
		Таблица.Колонки.Добавить("СуммаНДС");
		СтрокаТЗ = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗ,Источник);
		СтруктураИсточник.Вставить("НМА",Таблица);
		СтруктураИсточник.Вставить("Движения",Источник.Движения);
		СформироватьДвиженияПоИсполнениюДоговоров(СтруктураИсточник,МассивТЧ,ДоговорРеализации);
	ИначеЕсли (ТипЗнч(Источник)=Тип("ДокументОбъект.ПередачаОС") ИЛИ ТипЗнч(Источник)=Тип("ДокументСсылка.ПередачаОС")) И ДоговорРеализации Тогда
		МассивТЧ.Добавить("ОС");
		Если НЕ Источник.ВидОперации = Перечисления.ВидыОперацийПередачиОС.Реализация Тогда
			Возврат;
		КонецЕсли;
		СформироватьДвиженияПоИсполнениюДоговоров(Источник,МассивТЧ,ДоговорРеализации);
	ИначеЕсли (ТипЗнч(Источник)=Тип("ДокументОбъект.ВозвратТоваровПоставщику") ИЛИ ТипЗнч(Источник)=Тип("ДокументСсылка.ВозвратТоваровПоставщику")) И НЕ ДоговорРеализации Тогда
		МассивТЧ.Добавить("Товары");
		МассивТЧ.Добавить("Услуги");
		МассивТЧ.Добавить("ОС");
		Если НЕ Источник.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Покупка Тогда
			Возврат;
		КонецЕсли;
		СформироватьДвиженияПоИсполнениюДоговоров(Источник,МассивТЧ,ДоговорРеализации,Истина);
	ИначеЕсли (ТипЗнч(Источник)=Тип("ДокументОбъект.ВозвратТоваровОтПокупателя") ИЛИ ТипЗнч(Источник)=Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) И ДоговорРеализации Тогда
		МассивТЧ.Добавить("Товары");
		МассивТЧ.Добавить("Услуги");
		СформироватьДвиженияПоИсполнениюДоговоров(Источник,МассивТЧ,ДоговорРеализации,Истина);
	КонецЕсли;
	
	// контроль сроков поставки
	Если ВыборкаДетальныеЗаписи.КонтролироватьСрокиПоставки И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("дог_КонтролироватьСрокиПоставокПоДоговорам")
		И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("дог_ДатаНачалаКонтроляСроковПоставокПоДоговорам")<=Источник.Дата
		И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("дог_РежимКонтроляСроковПоставокПоДоговорам")=Перечисления.дог_РежимУчетаИсполненияСроковПоставкиПоДоговорам.ПриПроведенииПервичныхДокументов Тогда
		СформироватьДвиженияПоГрафикуПоставок(Источник,МассивТЧ,ДоговорРеализации);	
	КонецЕсли;
КонецПроцедуры


// Функция возвращает право печатать непроведенные документы.
//
// Параметры:
//  Проведен     - признак проведен ли документ (если документ не проводной,
//                 то либо параметр опускается, либо равен Истина)
//
// Возвращаемое значение:
//  Истина - если можно печатать, иначе Ложь.
//
Функция РазрешитьТоварныеОперацииПоНезарегистрированнымДоговорам() Экспорт

	Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.ЕстьДополнительноеПравоПользователя("РазрешитьПроведениеТоварныхОперацийПоНезарегистрированнымДоговорам");
	
КонецФункции // РазрешитьПечатьНепроведенныхДокументов()


Функция ДоговорЗарегистрирован(Договор) Экспорт
    УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	дог_ДоговорыИДополнительныеСоглашенияСрезПоследних.Договор
		|ИЗ
		|	РегистрСведений.дог_ДоговорыИДополнительныеСоглашения.СрезПоследних(, Договор = &Договор) КАК дог_ДоговорыИДополнительныеСоглашенияСрезПоследних";

	Запрос.УстановитьПараметр("Договор", Договор);
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
КонецФункции

Процедура дог_АвтоматическаяРегистрацияСобытийПоДоговорамОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ИмяДокумента = Источник.Метаданные().Имя;
	Если ИмяДокумента = "ПоступлениеТоваровУслуг" ИЛИ ИмяДокумента = "ПоступлениеТоваровУслуг" Тогда
		НаборЗаписей = РегистрыСведений.дог_СобытияПоДоговорам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Источник.Ссылка);
		Движение 					= НаборЗаписей.Добавить();
		Движение.Организация 		= Источник.Организация;
		Движение.СтруктурноеПодразделение = Источник.СтруктурноеПодразделение;
		Движение.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		Движение.Период 			= Источник.Дата;
		Движение.Событие 			= ?(ИмяДокумента = "ПоступлениеТоваровУслуг",Справочники.дог_СобытияПоДоговору.Покупка,Справочники.дог_СобытияПоДоговору.Реализация);
		СуммаСобытия = Источник.СуммаДокумента;
		Если Источник.ВалютаДокумента<>Движение.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
			КурсДоговор = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(Движение.ДоговорКонтрагента.ВалютаВзаиморасчетов,Источник.Дата);	
			КурсДокумент = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(Источник.ВалютаДокумента,Источник.Дата);
			СуммаСобытия = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СуммаСобытия,Источник.ВалютаДокумента,Движение.ДоговорКонтрагента.ВалютаВзаиморасчетов,КурсДокумент.Курс,КурсДоговор.Курс,КурсДокумент.Кратность,КурсДоговор.Кратность);
		КонецЕсли;
		Движение.СуммаСобытия		= СуммаСобытия;
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при регистрации событий по договору документом "+Строка(Источник.Ссылка));
		КонецПопытки;
	КонецЕсли;	
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("дог_АвтоматическаяРегистрацияПользовательскихСобытийПоДоговорам")=Истина Тогда
		ДокументБанкаКассы = ИмяДокумента = "ПлатежноеПоручениеВходящее" ИЛИ ИмяДокумента = "ПлатежноеПоручениеИсходящее" ИЛИ
								ИмяДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" ИЛИ ИмяДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" ИЛИ
								ИмяДокумента = "РасходныйКассовыйОрдер" ИЛИ ИмяДокумента = "ПриходныйКассовыйОрдер";
		Если НЕ ДокументБанкаКассы Тогда
			Если НЕ ЗначениеЗаполнено(Источник.ДоговорКонтрагента) Тогда
				Возврат;
			КонецЕсли;
			Если НЕ ДоговорЗарегистрирован(Источник.ДоговорКонтрагента) Тогда
				Возврат;
			КонецЕсли;
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	фин_ВидыДокументов.Ссылка
				|ПОМЕСТИТЬ ВТ_Виды
				|ИЗ
				|	Справочник.фин_ВидыДокументов КАК фин_ВидыДокументов
				|ГДЕ
				|	фин_ВидыДокументов.ПрограммныйИдентификатор = &ПрограммныйИдентификатор
				|	И НЕ фин_ВидыДокументов.ПометкаУдаления
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Настройки.Событие,
				|	Настройки.РеквизитРасчетаСуммыСобытия КАК РеквизитСумма,
				|	Настройки.РеквизитВалютыСобытия КАК РеквизитВалюта
				|ИЗ
				|	ВТ_Виды КАК ВТ_Виды
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.дог_НастройкиАвтоматическойРегистрацииСобытийПоДоговору.СрезПоследних(&Дата, ) КАК Настройки
				|		ПО ВТ_Виды.Ссылка = Настройки.РегистрирующийДокумент
				|ГДЕ
				|	Настройки.АвтоматическаяРегистрация = ИСТИНА";

			Запрос.УстановитьПараметр("Дата", Источник.Дата);
			Запрос.УстановитьПараметр("ПрограммныйИдентификатор", ИмяДокумента);

			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Возврат;
			КонецЕсли;

			ВыборкаДетальныеЗаписи = Результат.Выбрать();
	 		НаборЗаписей = РегистрыСведений.дог_СобытияПоДоговорам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Источник.Ссылка);

			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Движение 					= НаборЗаписей.Добавить();
				Движение.Организация 		= Источник.Организация;
				Движение.СтруктурноеПодразделение = Источник.СтруктурноеПодразделение;
				Движение.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
				Движение.Период 			= Источник.Дата;
				Движение.Событие 			= ВыборкаДетальныеЗаписи.Событие;
				СуммаСобытия = 0;
				Если ВыборкаДетальныеЗаписи.РеквизитСумма<>"" И Источник.Метаданные().Реквизиты.Найти(ВыборкаДетальныеЗаписи.РеквизитСумма)<>Неопределено Тогда
					СуммаСобытия = Источник[ВыборкаДетальныеЗаписи.РеквизитСумма];
					Если ВыборкаДетальныеЗаписи.РеквизитВалюта<>"" И Источник.Метаданные().Реквизиты.Найти(ВыборкаДетальныеЗаписи.РеквизитВалюта)<>Неопределено Тогда
						ВалютаДокумента = Источник[ВыборкаДетальныеЗаписи.РеквизитВалюта];
						Если ВалютаДокумента<>Движение.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
							КурсДоговор = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(Движение.ДоговорКонтрагента.ВалютаВзаиморасчетов,Источник.Дата);	
							КурсДокумент = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ВалютаДокумента,Источник.Дата);
							СуммаСобытия = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СуммаСобытия,ВалютаДокумента,Движение.ДоговорКонтрагента.ВалютаВзаиморасчетов,КурсДокумент.Курс,КурсДоговор.Курс,КурсДокумент.Кратность,КурсДоговор.Кратность);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Движение.СуммаСобытия		= СуммаСобытия;
			КонецЦикла;
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при регистрации событий по договору документом "+Строка(Источник.Ссылка));
			КонецПопытки;
		Иначе
			Если НЕ ден_ПроцедурыКазначейства.ЕстьРасчетыСКонтрагентами(Источник.ВидОперации) Тогда
				Возврат;
			КонецЕсли;
			ИсходящийПлатеж = ИмяДокумента = "ПлатежноеПоручениеИсходящее" ИЛИ ИмяДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" ИЛИ	ИмяДокумента = "РасходныйКассовыйОрдер";

			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	РасшифровкаПлатежа.ДоговорКонтрагента,
				|	РасшифровкаПлатежа.СуммаПлатежа
				|ПОМЕСТИТЬ ВТ_Договоры
				|ИЗ
				|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК РасшифровкаПлатежа
				|ГДЕ
				|	РасшифровкаПлатежа.Ссылка = &Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	дог_ДоговорыИДополнительныеСоглашенияСрезПоследних.Договор
				|ПОМЕСТИТЬ ВТ_Регистрация
				|ИЗ
				|	РегистрСведений.дог_ДоговорыИДополнительныеСоглашения.СрезПоследних(
				|			,
				|			Договор В
				|				(ВЫБРАТЬ
				|					ВТ_Договоры.ДоговорКонтрагента
				|				ИЗ
				|					ВТ_Договоры)) КАК дог_ДоговорыИДополнительныеСоглашенияСрезПоследних
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_Договоры.ДоговорКонтрагента,
				|	ВТ_Договоры.СуммаПлатежа
				|ИЗ
				|	ВТ_Договоры КАК ВТ_Договоры
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Регистрация КАК ВТ_Регистрация
				|		ПО ВТ_Договоры.ДоговорКонтрагента = ВТ_Регистрация.Договор";

			Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
			ТаблицаДоговоры = Запрос.Выполнить().Выгрузить();

			Если ТаблицаДоговоры.Количество()=0 Тогда
				Возврат;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	фин_ВидыДокументов.Ссылка
				|ПОМЕСТИТЬ ВТ_Виды
				|ИЗ
				|	Справочник.фин_ВидыДокументов КАК фин_ВидыДокументов
				|ГДЕ
				|	фин_ВидыДокументов.ПрограммныйИдентификатор = &ПрограммныйИдентификатор
				|	И НЕ фин_ВидыДокументов.ПометкаУдаления
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Настройки.Событие,
				|	Настройки.РеквизитРасчетаСуммыСобытия КАК РеквизитСумма,
				|	Настройки.РеквизитВалютыСобытия КАК РеквизитВалюта
				|ИЗ
				|	ВТ_Виды КАК ВТ_Виды
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.дог_НастройкиАвтоматическойРегистрацииСобытийПоДоговору.СрезПоследних(&Дата, ) КАК Настройки
				|		ПО ВТ_Виды.Ссылка = Настройки.РегистрирующийДокумент
				|ГДЕ
				|	Настройки.АвтоматическаяРегистрация = ИСТИНА";

			Запрос.УстановитьПараметр("Дата", Источник.Дата);
			Запрос.УстановитьПараметр("ПрограммныйИдентификатор", ИмяДокумента);

			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Возврат;
			КонецЕсли;

			ВыборкаДетальныеЗаписи = Результат.Выбрать();
	 		НаборЗаписей = РегистрыСведений.дог_СобытияПоДоговорам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Источник.Ссылка);

			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Для Каждого СтрокаДоговор Из ТаблицаДоговоры Цикл
					Движение 					= НаборЗаписей.Добавить();
					Движение.Организация 		= Источник.Организация;
					Движение.СтруктурноеПодразделение = ?(ИсходящийПлатеж,Источник.СтруктурноеПодразделениеОтправитель,Источник.СтруктурноеПодразделениеПолучатель);
					Движение.ДоговорКонтрагента = СтрокаДоговор.ДоговорКонтрагента;
					Движение.Период 			= Источник.Дата;
					Движение.Событие 			= ВыборкаДетальныеЗаписи.Событие;
					СуммаСобытия = 0;
	//				Если ВыборкаДетальныеЗаписи.РеквизитСумма<>"" И Источник.Метаданные().Реквизиты.Найти(ВыборкаДетальныеЗаписи.РеквизитСумма)<>Неопределено Тогда
						СуммаСобытия = СтрокаДоговор.СуммаПлатежа;
						Если ВыборкаДетальныеЗаписи.РеквизитВалюта<>"" И Источник.Метаданные().Реквизиты.Найти(ВыборкаДетальныеЗаписи.РеквизитВалюта)<>Неопределено Тогда
							ВалютаДокумента = Источник[ВыборкаДетальныеЗаписи.РеквизитВалюта];
							Если ВалютаДокумента<>Движение.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
								КурсДоговор = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(Движение.ДоговорКонтрагента.ВалютаВзаиморасчетов,Источник.Дата);	
								КурсДокумент = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ВалютаДокумента,Источник.Дата);
								СуммаСобытия = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СуммаСобытия,ВалютаДокумента,Движение.ДоговорКонтрагента.ВалютаВзаиморасчетов,КурсДокумент.Курс,КурсДоговор.Курс,КурсДокумент.Кратность,КурсДоговор.Кратность);
							КонецЕсли;
						КонецЕсли;
	//				КонецЕсли;
					Движение.СуммаСобытия		= СуммаСобытия;
				КонецЦикла;
			КонецЦикла;
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при регистрации событий по договору документом "+Строка(Источник.Ссылка));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьНаборСчетовРасшифровкиОтчета(ВидОбязательства,ГруппаОбязательств,СрокЗадолженности) Экспорт
	ТаблицаКлассификацииСтрокОтчета = Новый ТаблицаЗначений;
	ТаблицаКлассификацииСтрокОтчета.Колонки.Добавить("СрокЗадолженности");
	ТаблицаКлассификацииСтрокОтчета.Колонки.Добавить("ГруппаОбязательств");
	ТаблицаКлассификацииСтрокОтчета.Колонки.Добавить("ВидОбязательства");
	ТаблицаКлассификацииСтрокОтчета.Колонки.Добавить("СтрокаОтчета");
	ТаблицаКлассификацииСтрокОтчета.Колонки.Добавить("Счет");

	НС = ТаблицаКлассификацииСтрокОтчета.Добавить();
	НС.СтрокаОтчета = 1;
	НС.ВидОбязательства = "Предоставленные займы";
	НС.СрокЗадолженности = "Краткосрочные";
	НС.ГруппаОбязательств = "Обязательства контрагента перед компанией";
	НС.Счет = ПланыСчетов.Типовой.КраткосрочныеПредоставленныеЗаймы;
	НС = ТаблицаКлассификацииСтрокОтчета.Добавить();
	НС.СтрокаОтчета = 2;
	НС.ВидОбязательства = "Дебиторская задолженность";
	НС.СрокЗадолженности = "Краткосрочные";
	НС.ГруппаОбязательств = "Обязательства контрагента перед компанией";
	НС.Счет = ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженность;
	НС = ТаблицаКлассификацииСтрокОтчета.Добавить();
	НС.СтрокаОтчета = 3;
	НС.ВидОбязательства = "Авансы выданные";
	НС.СрокЗадолженности = "Краткосрочные";
	НС.ГруппаОбязательств = "Обязательства контрагента перед компанией";
	НС.Счет = ПланыСчетов.Типовой.КраткосрочныеАвансыВыданные;
	НС = ТаблицаКлассификацииСтрокОтчета.Добавить();
	НС.СтрокаОтчета = 4;
	НС.ВидОбязательства = "Предоставленные займы";
	НС.СрокЗадолженности = "Долгосрочные";
	НС.ГруппаОбязательств = "Обязательства контрагента перед компанией";
	НС.Счет = ПланыСчетов.Типовой.ДолгосрочныеПредоставленныеЗаймы;
	НС = ТаблицаКлассификацииСтрокОтчета.Добавить();
	НС.СтрокаОтчета = 5;
	НС.ВидОбязательства = "Дебиторская задолженность";
	НС.СрокЗадолженности = "Долгосрочные";
	НС.ГруппаОбязательств = "Обязательства контрагента перед компанией";
	НС.Счет = ПланыСчетов.Типовой.ДолгосрочнаяДебиторскаяЗадолженность;
	НС = ТаблицаКлассификацииСтрокОтчета.Добавить();
	НС.СтрокаОтчета = 6;
	НС.ВидОбязательства = "Авансы выданные";
	НС.СрокЗадолженности = "Долгосрочные";
	НС.ГруппаОбязательств = "Обязательства контрагента перед компанией";
	НС.Счет = ПланыСчетов.Типовой.ИнвестицииУчитываемыеМетодомДолевогоУчастия;
	НС = ТаблицаКлассификацииСтрокОтчета.Добавить();
	НС.СтрокаОтчета = 7;
	НС.ВидОбязательства = "Инвестиции";
	НС.СрокЗадолженности = "Прочие";
	НС.ГруппаОбязательств = "Обязательства контрагента перед компанией";
	НС.Счет = ПланыСчетов.Типовой.ДолгосрочныеАвансыВыданные;
	НС = ТаблицаКлассификацииСтрокОтчета.Добавить();
	НС.СтрокаОтчета = 8;
	НС.ВидОбязательства = "Полученные займы / финансовые обязательства";
	НС.СрокЗадолженности = "Краткосрочные";
	НС.ГруппаОбязательств = "Обязательства компании перед контрагентом";
	НС.Счет = ПланыСчетов.Типовой.КраткосрочныеФинансовыеОбязательства;
	НС = ТаблицаКлассификацииСтрокОтчета.Добавить();
	НС.СтрокаОтчета = 9;
	НС.ВидОбязательства = "Кредиторская задолженность";
	НС.СрокЗадолженности = "Краткосрочные";
	НС.ГруппаОбязательств = "Обязательства компании перед контрагентом";
	НС.Счет = ПланыСчетов.Типовой.КраткосрочнаяКредиторскаяЗадолженность;
	НС = ТаблицаКлассификацииСтрокОтчета.Добавить();
	НС.СтрокаОтчета = 10;
	НС.ВидОбязательства = "Оценочные обязательства";
	НС.СрокЗадолженности = "Краткосрочные";
	НС.ГруппаОбязательств = "Обязательства компании перед контрагентом";
	НС.Счет = ПланыСчетов.Типовой.КраткосрочныеОценочныеОбязательства;
	НС = ТаблицаКлассификацииСтрокОтчета.Добавить();
	НС.СтрокаОтчета = 11;
	НС.ВидОбязательства = "Авансы полученные";
	НС.СрокЗадолженности = "Краткосрочные";
	НС.ГруппаОбязательств = "Обязательства компании перед контрагентом";
	НС.Счет = ПланыСчетов.Типовой.КраткосрочныеАвансыПолученные;
	НС = ТаблицаКлассификацииСтрокОтчета.Добавить();
	НС.СтрокаОтчета = 12;
	НС.ВидОбязательства = "Прочие обязательства";
	НС.СрокЗадолженности = "Краткосрочные";
	НС.ГруппаОбязательств = "Обязательства компании перед контрагентом";
	НС.Счет = ПланыСчетов.Типовой.ОбязательстваГруппыНаВыбытиеПредназначеннойДляПродажи;
	НС = ТаблицаКлассификацииСтрокОтчета.Добавить();
	НС.СтрокаОтчета = 12;
	НС.ВидОбязательства = "Прочие обязательства";
	НС.СрокЗадолженности = "Краткосрочные";
	НС.ГруппаОбязательств = "Обязательства компании перед контрагентом";
	НС.Счет = ПланыСчетов.Типовой.ПрочиеКраткосрочныеОбязательства;
	НС = ТаблицаКлассификацииСтрокОтчета.Добавить();
	НС.СтрокаОтчета = 13;
	НС.ВидОбязательства = "Полученные займы / финансовые обязательства";
	НС.СрокЗадолженности = "Долгосрочные";
	НС.ГруппаОбязательств = "Обязательства компании перед контрагентом";
	НС.Счет = ПланыСчетов.Типовой.ДолгосрочныеФинансовыеОбязательства;
	НС = ТаблицаКлассификацииСтрокОтчета.Добавить();
	НС.СтрокаОтчета = 14;
	НС.ВидОбязательства = "Кредиторская задолженность";
	НС.СрокЗадолженности = "Долгосрочные";
	НС.ГруппаОбязательств = "Обязательства компании перед контрагентом";
	НС.Счет = ПланыСчетов.Типовой.ДолгосрочнаяКредиторскаяЗадолженность;
	НС = ТаблицаКлассификацииСтрокОтчета.Добавить();
	НС.СтрокаОтчета = 15;
	НС.ВидОбязательства = "Оценочные обязательства";
	НС.СрокЗадолженности = "Долгосрочные";
	НС.ГруппаОбязательств = "Обязательства компании перед контрагентом";
	НС.Счет = ПланыСчетов.Типовой.ДолгосрочныеОценочныеОбязательства;
	НС = ТаблицаКлассификацииСтрокОтчета.Добавить();
	НС.СтрокаОтчета = 16;
	НС.ВидОбязательства = "Авансы полученные";
	НС.СрокЗадолженности = "Долгосрочные";
	НС.ГруппаОбязательств = "Обязательства компании перед контрагентом";
	НС.Счет = ПланыСчетов.Типовой.ДолгосрочныеАвансыПолученные;

	СтруктураПоиска = Новый Структура;
	Если ЗначениеЗаполнено(ВидОбязательства) Тогда
		СтруктураПоиска.Вставить("ВидОбязательства",ВидОбязательства);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ГруппаОбязательств) Тогда
		СтруктураПоиска.Вставить("ГруппаОбязательств",ГруппаОбязательств);	
	КонецЕсли;
	Если ЗначениеЗаполнено(СрокЗадолженности) Тогда
		СтруктураПоиска.Вставить("СрокЗадолженности",СрокЗадолженности);	
	КонецЕсли;
	ТаблицаНайдено = ТаблицаКлассификацииСтрокОтчета.Скопировать(СтруктураПоиска);
	Возврат ТаблицаНайдено.ВыгрузитьКолонку("Счет");
КонецФункции

Функция ПолучитьРасшифровкуДляОтчетаПоЗадолженности(ИмяОтчета,Организация,Контрагент,Договор,ИмяПоляРасшифровки,ВидОбязательства,ГруппаОбязательств,СрокЗадолженности,НачалоПериода,КонецПериода,Счет=Неопределено) Экспорт
	Счета = ПолучитьНаборСчетовРасшифровкиОтчета(ВидОбязательства,ГруппаОбязательств,СрокЗадолженности);	
	Если ИмяОтчета = "дог_АнализЗадолженностиБУПоДоговору" ИЛИ ИмяОтчета = "дог_АнализЗадолженностиБУПоДоговоруВРазрезеПериодов" Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТиповойВидыСубконто.Ссылка КАК Счет
			|ПОМЕСТИТЬ ВТ_Счета
			|ИЗ
			|	ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто
			|ГДЕ
			|	ТиповойВидыСубконто.Ссылка В ИЕРАРХИИ(&Счета)
			|	И ТиповойВидыСубконто.ВидСубконто = &ВидСубконтоДоговоры
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТиповойОбороты.Счет,
			|	ТиповойОбороты.Счет.Наименование КАК Наименование,
			|	ВЫБОР
			|		КОГДА ТиповойОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
			|			ТОГДА ТиповойОбороты.СуммаНачальныйОстатокДт
			|		ИНАЧЕ ТиповойОбороты.СуммаНачальныйОстатокКт
			|	КОНЕЦ КАК СуммаНачальныйОстаток,
			|	ВЫБОР
			|		КОГДА ТиповойОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
			|			ТОГДА ""Дт""
			|		ИНАЧЕ ""Кт""
			|	КОНЕЦ КАК СуммаНачальныйОстатокСторона,
			|	""Остатки"" КАК СуммаНачальныйОстатокПоле,
			|	ВЫБОР
			|		КОГДА ТиповойОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
			|			ТОГДА ТиповойОбороты.СуммаОборотДт
			|		ИНАЧЕ ТиповойОбороты.СуммаОборотКт
			|	КОНЕЦ КАК СуммаПриход,
			|	ВЫБОР
			|		КОГДА ТиповойОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
			|			ТОГДА ""Дт""
			|		ИНАЧЕ ""Кт""
			|	КОНЕЦ КАК СуммаПриходСторона,
			|	""Обороты"" КАК СуммаПриходПоле,
			|	ВЫБОР
			|		КОГДА ТиповойОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
			|			ТОГДА ТиповойОбороты.СуммаОборотДт
			|		ИНАЧЕ ТиповойОбороты.СуммаОборотКт
			|	КОНЕЦ КАК СуммаРасход,
			|	ВЫБОР
			|		КОГДА ТиповойОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
			|			ТОГДА ""Дт""
			|		ИНАЧЕ ""Кт""
			|	КОНЕЦ КАК СуммаРасходСторона,
			|	""Обороты"" КАК СуммаРасходПоле,
			|	ВЫБОР
			|		КОГДА ТиповойОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
			|			ТОГДА ТиповойОбороты.СуммаКонечныйОстатокДт
			|		ИНАЧЕ ТиповойОбороты.СуммаКонечныйОстатокКт
			|	КОНЕЦ КАК СуммаКонечныйОстаток,
			|	ВЫБОР
			|		КОГДА ТиповойОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
			|			ТОГДА ""Дт""
			|		ИНАЧЕ ""Кт""
			|	КОНЕЦ КАК СуммаКонечныйОстатокСторона,
			|	""Остатки"" КАК СуммаКонечныйОстатокПоле,
			|	ВЫБОР
			|		КОГДА ТиповойОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
			|			ТОГДА ТиповойОбороты.ВалютнаяСуммаНачальныйОстатокДт
			|		ИНАЧЕ ТиповойОбороты.ВалютнаяСуммаНачальныйОстатокКт
			|	КОНЕЦ КАК ВалютнаяСуммаНачальныйОстаток,
			|	ВЫБОР
			|		КОГДА ТиповойОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
			|			ТОГДА ""Дт""
			|		ИНАЧЕ ""Кт""
			|	КОНЕЦ КАК ВалютнаяСуммаНачальныйОстатокСторона,
			|	""Остатки"" КАК ВалютнаяСуммаНачальныйОстатокПоле,
			|	ВЫБОР
			|		КОГДА ТиповойОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
			|			ТОГДА ТиповойОбороты.ВалютнаяСуммаОборотДт
			|		ИНАЧЕ ТиповойОбороты.ВалютнаяСуммаОборотКт
			|	КОНЕЦ КАК ВалютнаяСуммаПриход,
			|	ВЫБОР
			|		КОГДА ТиповойОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
			|			ТОГДА ""Дт""
			|		ИНАЧЕ ""Кт""
			|	КОНЕЦ КАК ВалютнаяСуммаПриходСторона,
			|	""Обороты"" КАК ВалютнаяСуммаПриходПоле,
			|	ВЫБОР
			|		КОГДА ТиповойОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
			|			ТОГДА ТиповойОбороты.ВалютнаяСуммаОборотДт
			|		ИНАЧЕ ТиповойОбороты.ВалютнаяСуммаОборотКт
			|	КОНЕЦ КАК ВалютнаяСуммаРасход,
			|	ВЫБОР
			|		КОГДА ТиповойОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
			|			ТОГДА ""Дт""
			|		ИНАЧЕ ""Кт""
			|	КОНЕЦ КАК ВалютнаяСуммаРасходСторона,
			|	""Обороты"" КАК ВалютнаяСуммаРасходПоле,
			|	ВЫБОР
			|		КОГДА ТиповойОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
			|			ТОГДА ТиповойОбороты.ВалютнаяСуммаКонечныйОстатокДт
			|		ИНАЧЕ ТиповойОбороты.ВалютнаяСуммаКонечныйОстатокКт
			|	КОНЕЦ КАК ВалютнаяСуммаКонечныйОстаток,
			|	ВЫБОР
			|		КОГДА ТиповойОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
			|			ТОГДА ""Дт""
			|		ИНАЧЕ ""Кт""
			|	КОНЕЦ КАК ВалютнаяСуммаКонечныйОстатокСторона,
			|	""Остатки"" КАК ВалютнаяСуммаКонечныйОстатокПоле
			|ИЗ
			|	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
			|			&НачалоПериода,
			|			&КонецПериода,
			|			,
			|			,
			|			Счет В ИЕРАРХИИ
			|				(ВЫБРАТЬ
			|					ВТ_Счета.Счет
			|				ИЗ
			|					ВТ_Счета),
			|			&ВидыСубконто,
			|			Субконто1 = &Контрагент
			|				И Субконто2 = &ДоговорКонтрагента
			|				И Организация = &Организация) КАК ТиповойОбороты";

		Запрос.УстановитьПараметр("Счета", ?(Счет=Неопределено,Счета,Счет));
		Запрос.УстановитьПараметр("ВидСубконтоДоговоры", ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
		ВидыСубконто = Новый Массив;
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
		Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", Договор);
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("Организация", Организация);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();
        ТекстРасшифровки ="";
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи[ИмяПоляРасшифровки]=0 ИЛИ ВыборкаДетальныеЗаписи[ИмяПоляРасшифровки]=NULL Тогда
				Продолжить;
			КонецЕсли;
			ТекстРасшифровки = ТекстРасшифровки + ?(ТекстРасшифровки="","",";"+Символы.ПС)+ ВыборкаДетальныеЗаписи[ИмяПоляРасшифровки+"Поле"] +" счета "+Строка(ВыборкаДетальныеЗаписи.Счет)+" ("+ВыборкаДетальныеЗаписи[ИмяПоляРасшифровки+"Сторона"]+"): "+Строка(ВыборкаДетальныеЗаписи[ИмяПоляРасшифровки]);
		КонецЦикла;
        Возврат ТекстРасшифровки;
	ИначеЕсли ИмяОтчета = "дог_ОстаткиЗадолженностиБУПоДоговору" Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТиповойВидыСубконто.Ссылка КАК Счет
			|ПОМЕСТИТЬ ВТ_Счета
			|ИЗ
			|	ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто
			|ГДЕ
			|	ТиповойВидыСубконто.Ссылка В ИЕРАРХИИ(&Счета)
			|	И ТиповойВидыСубконто.ВидСубконто = &ВидСубконтоДоговоры
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТиповойОбороты.Счет,
			|	ТиповойОбороты.Счет.Наименование,
			|	ВЫБОР
			|		КОГДА ТиповойОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
			|			ТОГДА ТиповойОбороты.СуммаОстатокДт
			|		ИНАЧЕ ТиповойОбороты.СуммаОстатокКт
			|	КОНЕЦ КАК СуммаОстаток,
			|	ВЫБОР
			|		КОГДА ТиповойОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
			|			ТОГДА ТиповойОбороты.ВалютнаяСуммаОстатокДт
			|		ИНАЧЕ ТиповойОбороты.ВалютнаяСуммаОстатокКт
			|	КОНЕЦ КАК ВалютнаяСуммаОстаток,
			|	ВЫБОР
			|		КОГДА ТиповойОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
			|			ТОГДА ""Дт""
			|		ИНАЧЕ ""Кт""
			|	КОНЕЦ КАК СуммаОстатокСторона,
			|	ВЫБОР
			|		КОГДА ТиповойОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
			|			ТОГДА ""Дт""
			|		ИНАЧЕ ""Кт""
			|	КОНЕЦ КАК ВалютнаяСуммаОстатокСторона
			|ИЗ
			|	РегистрБухгалтерии.Типовой.Остатки(
			|			&ДатаОтчета,
			|			Счет В ИЕРАРХИИ
			|				(ВЫБРАТЬ
			|					ВТ_Счета.Счет
			|				ИЗ
			|					ВТ_Счета),
			|			&ВидыСубконто,
			|			Субконто1 = &Контрагент
			|				И Субконто2 = &ДоговорКонтрагента
			|				И Организация = &Организация) КАК ТиповойОбороты";

		Запрос.УстановитьПараметр("Счета", ?(Счет=Неопределено,Счета,Счет));
		Запрос.УстановитьПараметр("ВидСубконтоДоговоры", ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
		ВидыСубконто = Новый Массив;
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
		Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", Договор);
		Запрос.УстановитьПараметр("ДатаОтчета", КонецПериода);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Организация", Организация);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();
        ТекстРасшифровки ="";
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи[ИмяПоляРасшифровки]=0 ИЛИ ВыборкаДетальныеЗаписи[ИмяПоляРасшифровки]=NULL Тогда
				Продолжить;
			КонецЕсли;
			ТекстРасшифровки = ТекстРасшифровки + ?(ТекстРасшифровки="","",";"+Символы.ПС)+ "Остатки счета "+Строка(ВыборкаДетальныеЗаписи.Счет)+" ("+ВыборкаДетальныеЗаписи[ИмяПоляРасшифровки+"Сторона"]+"): "+Строка(ВыборкаДетальныеЗаписи[ИмяПоляРасшифровки]);
		КонецЦикла;
        Возврат ТекстРасшифровки;
	КонецЕсли;
	Возврат "";
КонецФункции

Функция ПредставлениеДоговораДляОтчета(Договор) Экспорт
	Возврат "Договор: "+Строка(Договор)+" / Контрагент: "+?(ЗначениеЗаполнено(Договор),Строка(Договор.Владелец),"");	
КонецФункции

Функция ПолучитьПервоначальныйДоговорКонтрагента(ДоговорКонтрагента) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыИДополнительныеСоглашения.ПервоначальныйДоговор КАК Договор
		|ИЗ
		|	РегистрСведений.дог_ЗарегистрированныеДоговорыКонтрагентов.СрезПоследних(, Договор = &Договор) КАК ДоговорыИДополнительныеСоглашения";

	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Договор;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция ПолучитьПодчиненныеДоговорыПервогоУровня(ДоговорКонтрагента,Подробно = Ложь) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	дог_ЗарегистрированныеДоговорыКонтрагентовСрезПоследних.Договор,
		|	дог_ЗарегистрированныеДоговорыКонтрагентовСрезПоследних.ВариантРегистрацииДополнительногоСоглашения
		|ИЗ
		|	РегистрСведений.дог_ЗарегистрированныеДоговорыКонтрагентов.СрезПоследних(
		|			,
		|			Контрагент = &Контрагент
		|				И Организация = &Организация) КАК дог_ЗарегистрированныеДоговорыКонтрагентовСрезПоследних
		|ГДЕ
		|	дог_ЗарегистрированныеДоговорыКонтрагентовСрезПоследних.ПервоначальныйДоговор = &ПервоначальныйДоговор
		|	И дог_ЗарегистрированныеДоговорыКонтрагентовСрезПоследних.Договор <> &ПервоначальныйДоговор";

	Запрос.УстановитьПараметр("Организация", ДоговорКонтрагента.Организация);
	Запрос.УстановитьПараметр("Контрагент", ДоговорКонтрагента.Владелец);
	Запрос.УстановитьПараметр("ПервоначальныйДоговор", ДоговорКонтрагента);

	Результат = Запрос.Выполнить();

	Если Подробно=Истина Тогда
		Возврат Результат.Выгрузить();
	Иначе
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Договор");
	КонецЕсли;

КонецФункции

Функция ПолучитьВсеПодчиненныеДоговоры(ДоговорКонтрагента) Экспорт
	ПодчиненныеДоговоры = ПолучитьПодчиненныеДоговорыПервогоУровня(ДоговорКонтрагента);
	Для Каждого Договор Из ПодчиненныеДоговоры Цикл
		ПодчиненныеВторогоУровня = ПолучитьВсеПодчиненныеДоговоры(Договор);
		Для Каждого мДоговор Из ПодчиненныеВторогоУровня Цикл
			ПодчиненныеДоговоры.Добавить(мДоговор);
		КонецЦикла;
	КонецЦикла;
	Возврат ПодчиненныеДоговоры;
КонецФункции

Процедура УстановитьСписокПодчиненныхДоговоровВКомпоновщикМакета(КомпоновщикНастроек,ОтображатьДанныеПоПодчиненнымДоговорамКонтрагента,ДоговорКонтрагента) Экспорт
	Если ОтображатьДанныеПоПодчиненнымДоговорамКонтрагента И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ПодчиненныеДоговорыТекущего = Новый СписокЗначений;
		ПодчиненныеДоговорыТекущего.ЗагрузитьЗначения(дог_УправлениеДоговорами.ПолучитьВсеПодчиненныеДоговоры(ДоговорКонтрагента));
		ПодчиненныеДоговорыТекущего.Добавить(ДоговорКонтрагента);
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("СписокДоговоров",ПодчиненныеДоговорыТекущего);
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьОтборПоСтруктурнымЕдиницамВКомпоновщикМакета(КомпоновщикНастроек,мСписокСтруктурныхЕдиниц,мСписокПодразделений,мДеревоСтруктурныхЕдиниц=Неопределено) Экспорт
	Если мДеревоСтруктурныхЕдиниц=Неопределено ИЛИ мДеревоСтруктурныхЕдиниц.Строки.Количество() = 0 Тогда 
		
		СписокСтруктурныхЕдиниц = Новый СписокЗначений;
		СписокСтруктурныхЕдиниц.ЗагрузитьЗначения(мСписокСтруктурныхЕдиниц.ВыгрузитьЗначения());
		
		Для Каждого СтрПодразделение Из мСписокПодразделений Цикл 
			СписокСтруктурныхЕдиниц.Добавить(СтрПодразделение.Значение);
		КонецЦикла;		
				
		мДеревоСтруктурныхЕдиниц = общ_СтандартныеОтчетыСервер.СформироватьДеревоСЕ(, СписокСтруктурныхЕдиниц);
		
	КонецЕсли;
	
	общ_СтандартныеОтчетыСервер.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, мДеревоСтруктурныхЕдиниц,,,"СтруктурноеПодразделение");
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТОВ

 // Формирование движений документа "Регламентный расчет исполнения графиков поставки"

// Процедура - Сформировать движения регламентный расчет исполнения графиков поставки
Процедура СформироватьДвиженияРегламентныйРасчетИсполненияГрафиковПоставки(Реквизиты, ТаблицаДвижений, Движения, Отказ) Экспорт
	
	// расчет
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроизведенныеРасчеты.Контрагент,
		|	ПроизведенныеРасчеты.Договор
		|ПОМЕСТИТЬ ВТ_ПроизведенныеРасчеты
		|ИЗ
		|	РегистрСведений.дог_ПроизведенныеРасчетыИсполненияГрафиковПоставки КАК ПроизведенныеРасчеты
		|ГДЕ
		|	ПроизведенныеРасчеты.Организация = &Организация
		|	И ПроизведенныеРасчеты.СтруктурноеПодразделение = &СтруктурноеПодразделение
		|	И ПроизведенныеРасчеты.ПериодРасчета = &НачалоПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	ПроизведенныеРасчеты.Договор,
		|	ПроизведенныеРасчеты.Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	дог_ИсполнениеДоговоровОбороты.КоличествоРасход КАК Количество,
		|	дог_ИсполнениеДоговоровОбороты.ДоговорКонтрагента,
		|	дог_ИсполнениеДоговоровОбороты.НоменклатураОС КАК Номенклатура,
		|	дог_ИсполнениеДоговоровОбороты.Период КАК Дата
		|ПОМЕСТИТЬ ВТ_Приход
		|ИЗ
		|	РегистрНакопления.дог_ИсполнениеДоговоров.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			День,
		|			Организация = &Организация
		|				И СтруктурноеПодразделение = &СтруктурноеПодразделение"+?(ЗначениеЗаполнено(Реквизиты.ДоговорКонтрагента),"
		|				И ДоговорКонтрагента=&ДоговорКонтрагента",?(ЗначениеЗаполнено(Реквизиты.Контрагент),"
		|				И ДоговорКонтрагента.Владелец=&Контрагент",""))+") КАК дог_ИсполнениеДоговоровОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПроизведенныеРасчеты КАК ВТ_ПроизведенныеРасчеты
		|			ПО ДоговорыКонтрагентов.Владелец = ВТ_ПроизведенныеРасчеты.Контрагент
		|				И (ДоговорыКонтрагентов.Ссылка = ВТ_ПроизведенныеРасчеты.Договор
		|					ИЛИ ВТ_ПроизведенныеРасчеты.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
		|		ПО дог_ИсполнениеДоговоровОбороты.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
		|ГДЕ
		|	ВТ_ПроизведенныеРасчеты.Контрагент ЕСТЬ NULL
		|	И дог_ИсполнениеДоговоровОбороты.КоличествоРасход>0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Приход.ДоговорКонтрагента
		|ПОМЕСТИТЬ ВТ_Договоры
		|ИЗ
		|	ВТ_Приход КАК ВТ_Приход
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Приход.ДоговорКонтрагента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикиПоставокОстатки.Контрагент КАК Контрагент,
		|	ГрафикиПоставокОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ГрафикиПоставокОстатки.НоменклатураОС КАК НоменклатураОС,
		|	ГрафикиПоставокОстатки.ДатаПоставки КАК ДатаПоставки,
		|	ГрафикиПоставокОстатки.ВидДоговораПоТоварнымОперациям,
		|	ГрафикиПоставокОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.дог_ГрафикиПоставокПоДоговорам.Остатки(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И СтруктурноеПодразделение = &СтруктурноеПодразделение
		|				И ДоговорКонтрагента В
		|					(ВЫБРАТЬ
		|						ВТ_Договоры.ДоговорКонтрагента
		|					ИЗ
		|						ВТ_Договоры КАК ВТ_Договоры)"+?(ЗначениеЗаполнено(Реквизиты.ДоговорКонтрагента),"
		|						И ДоговорКонтрагента=&ДоговорКонтрагента",?(ЗначениеЗаполнено(Реквизиты.Контрагент),"
		|						И Контрагент=&Контрагент",""))+") КАК ГрафикиПоставокОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент,
		|	ДоговорКонтрагента,
		|	НоменклатураОС,
		|	ДатаПоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Приход.Количество,
		|	ВТ_Приход.ДоговорКонтрагента,
		|	ВТ_Приход.Номенклатура,
		|	ВТ_Приход.Дата
		|ИЗ
		|	ВТ_Приход КАК ВТ_Приход";

	Запрос.УстановитьПараметр("КонецПериода", 				КонецМесяца(Реквизиты.Дата));
	Запрос.УстановитьПараметр("НачалоПериода", 				НачалоМесяца(Реквизиты.Дата));
	Запрос.УстановитьПараметр("Организация", 				Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",	Реквизиты.СтруктурноеПодразделение);
 	Запрос.УстановитьПараметр("ДоговорКонтрагента", 		Реквизиты.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Контрагент", 				Реквизиты.Контрагент);

	Результат = Запрос.ВыполнитьПакет();

	Графики 	= Результат[3].Выгрузить();
	Поставки 	= Результат[4].Выгрузить();
	
	ЗарегистрироватьДвиженияРегламентныйРасчетИсполненияГрафиковПоставки(Реквизиты, Графики, Поставки, Движения, Отказ);

КонецПроцедуры

// Процедура - Зарегистрировать движения регламентный расчет исполнения графиков поставки
Процедура ЗарегистрироватьДвиженияРегламентныйРасчетИсполненияГрафиковПоставки(Реквизиты, Графики, Поставки, Движения, Отказ)
	
	// по шапке по регистру бсо_СформированноеГарантийноеОбеспечение
	Движения.дог_ПроизведенныеРасчетыИсполненияГрафиковПоставки.Записывать 	= Истина;
	Движение = Движения.дог_ПроизведенныеРасчетыИсполненияГрафиковПоставки.Добавить();
	Движение.Период = Реквизиты.Дата;
	Движение.Организация = Реквизиты.Организация;
	Движение.СтруктурноеПодразделение = Реквизиты.СтруктурноеПодразделение;
	Движение.Контрагент = Реквизиты.Контрагент;
	Движение.Договор = Реквизиты.ДоговорКонтрагента;
	Движение.ПериодРасчета = НачалоМесяца(Реквизиты.Дата);
	
	Движения.дог_ГрафикиПоставокПоДоговорам.Записывать 	= Истина;
	
	мПоставки = Поставки.Скопировать();
	мПоставки.Свернуть("ДоговорКонтрагента");
	СписокДоговоров = мПоставки.ВыгрузитьКолонку("ДоговорКонтрагента");
	
	ДвиженияПоГрафику = Движения.дог_ГрафикиПоставокПоДоговорам;
	
	Для Каждого ДоговорРасчета Из СписокДоговоров Цикл
		ТаблицаГрафика 	= Графики.Скопировать(Новый Структура("ДоговорКонтрагента", ДоговорРасчета));
		ТаблицаПоставок = Поставки.Скопировать(Новый Структура("ДоговорКонтрагента", ДоговорРасчета));
    	РасчетПогашенияГрафикаПоставок(Реквизиты.Организация, Реквизиты.СтруктурноеПодразделение, ДоговорРасчета, ТаблицаГрафика, ТаблицаПоставок, ДвиженияПоГрафику);
	КонецЦикла;
	
КонецПроцедуры

Процедура фин_ПроверкаПравильностиСозданногоДокументаНаОснованииОбработкаПолученияФормы(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ДокументМенеджер.Доверенность") Тогда
		Если ВидФормы = "ФормаОбъекта" И Параметры.Свойство("Основание") Тогда 
			Отказ = Ложь;
			ПроверкаПравильностиСозданногоДокументаНаОсновании(Источник.ПустаяСсылка(), Параметры.Основание, Отказ);
			СтандартнаяОбработка = Не Отказ;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры


// Процедура заполняет ставку НДС в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, МетаданныеДокумента) Экспорт

	//Заполнить СтавкаНДС
	Если фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСтавкуНДСТабЧасти()

Функция ПолучитьСведенияОНоменклатуре(Номенклатура, ПараметрыОбъекта) Экспорт

	Если ТипЗнч(Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокНоменклатуры = Новый Массив;
	СписокНоменклатуры.Добавить(Номенклатура);
	
	СведенияОНоменклатуре = ПолучитьСведенияОСпискеНоменклатуры(СписокНоменклатуры, ПараметрыОбъекта).Получить(Номенклатура);
	
	Возврат СведенияОНоменклатуре;

КонецФункции

// Возвращает сведения о массиве номенклатуры
//
// Параметры:
//  СписокНоменклатуры - массив номенклатуры
//  ПараметрыОбъекта   - структура содержащая поля:
//  - Дата                    - обязательный
//  - Организация             - обязательный
//  - ТипЦен                  - не обязательный
//  - ВалютаДокумента         - не обязательный
//  - КурсВзаиморасчетов      - не обязательный
//  - КратностьВзаиморасчетов - не обязательный
//  - СуммаВключаетНДС        - не обязательный
//  - СтавкаНДС               - не обязательный (Если параметр передан,
//    то будет использована переданная ставка, иначе ставка из номенклатуры)
//
// Возвращает соответствие:
//  Ключ     - номенклатура
//  Значение - структура сведений о номенклатуре
//
Функция ПолучитьСведенияОСпискеНоменклатуры(СписокНоменклатуры, ПараметрыОбъекта) Экспорт
	перем СтавкаНДС, ЦенаВключаетНДС, СуммаВключаетНДС, СтавкаАкциза;
	Перем ВалютаДокумента, КурсДокумента, КратностьДокумента;
	Перем ТипЦен, ТипЦенПлановойСебестоимости;
	Перем ТаблицаЦен, ТаблицаЦенПлановойСебестоимости, ЗаполнятьЦену;
	Перем Реализация, ЗаполнятьСпецификацию;
	
	Дата		= ПараметрыОбъекта.Дата;
	Организация	= ПараметрыОбъекта.Организация;
	
	Если НЕ ПараметрыОбъекта.Свойство("Реализация", Реализация) Тогда
		Реализация = Ложь;
	КонецЕсли;
	
	Если НЕ ПараметрыОбъекта.Свойство("ЗаполнятьСпецификацию", ЗаполнятьСпецификацию) Тогда
		ЗаполнятьСпецификацию = Ложь;
	КонецЕсли;
		
	ПараметрыОбъекта.Свойство("СтавкаНДС", СтавкаНДС);
	ПараметрыОбъекта.Свойство("ТипЦенПлановойСебестоимости", ТипЦенПлановойСебестоимости); 

		
	Если ПараметрыОбъекта.Свойство("ТипЦен", ТипЦен) И ЗначениеЗаполнено(ТипЦен) Тогда
		ЦенаВключаетНДС = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС = Ложь;
	КонецЕсли;
	
	Если НЕ ПараметрыОбъекта.Свойство("СуммаВключаетНДС", СуммаВключаетНДС) Тогда
		СуммаВключаетНДС = ЦенаВключаетНДС;
	КонецЕсли;
	
	Если ПараметрыОбъекта.Свойство("ЗаполнятьЦену", ЗаполнятьЦену) Тогда
		ЗаполнятьЦену = ЗаполнятьЦену И ЗначениеЗаполнено(ТипЦен);
	Иначе
		ЗаполнятьЦену = ЗначениеЗаполнено(ТипЦен);	
	КонецЕсли;

	ВалютаРегламентированногоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	Если НЕ ПараметрыОбъекта.Свойство("ВалютаДокумента", ВалютаДокумента)
		ИЛИ НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		
		ПараметрыОбъекта.Свойство("КурсДокумента", КурсДокумента);
		ПараметрыОбъекта.Свойство("КратностьДокумента", КратностьДокумента);
		
		Если КурсДокумента = Неопределено ИЛИ КратностьДокумента = Неопределено Тогда
			ПараметрыОбъекта.Свойство("КурсВзаиморасчетов", КурсДокумента);
			ПараметрыОбъекта.Свойство("КратностьВзаиморасчетов", КратностьДокумента);
		КонецЕсли;
		
		Если КурсДокумента = Неопределено ИЛИ КратностьДокумента = Неопределено Тогда
			КурсНаДату = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			КурсДокумента		= КурсНаДату.Курс;
			КратностьДокумента	= КурсНаДату.Кратность;
		КонецЕсли;
		
	Иначе
		КурсДокумента		= 1;
		КратностьДокумента	= 1;
	КонецЕсли;
	
	ИменаРеквизитов =
		"Код, Наименование, НаименованиеПолное, Артикул,
		|БазоваяЕдиницаИзмерения, СтавкаНДС,
		|Услуга, НоменклатурнаяГруппа,
		|СтавкаАкциза, КоэффициентРасчетаОблагаемойБазыАкциза";
	
	СоответствиеСведенийОНоменклатуре = фин_ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъектов(СписокНоменклатуры, ИменаРеквизитов);
	
	Если ЗаполнятьЦену Тогда
		ТаблицаЦен = дог_УправлениеЦенообразованием.ПолучитьТаблицуЦенНоменклатуры(СписокНоменклатуры, ТипЦен, Дата, Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЦенПлановойСебестоимости) Тогда
		ТаблицаЦенПлановойСебестоимости = дог_УправлениеЦенообразованием.ПолучитьТаблицуЦенНоменклатуры(СписокНоменклатуры, ТипЦенПлановойСебестоимости, Дата, Организация);
	КонецЕсли;
		
	ВидСубконтоНоменклатурныеГруппы = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы;
	
	Для Каждого Номенклатура Из СписокНоменклатуры Цикл
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			СведенияОНоменклатуре = Новый Структура(ИменаРеквизитов);
			СоответствиеСведенийОНоменклатуре.Вставить(Номенклатура, СведенияОНоменклатуре);
		КонецЕсли;
		
		Если ПустаяСтрока(СведенияОНоменклатуре.НаименованиеПолное) Тогда
			СведенияОНоменклатуре.НаименованиеПолное = СведенияОНоменклатуре.Наименование;
		КонецЕсли;
		
		СведенияОНоменклатуре.Вставить("Коэффициент", 1);  		
				
		Содержание = ?(ПустаяСтрока(СведенияОНоменклатуре.НаименованиеПолное), СведенияОНоменклатуре.Наименование, СведенияОНоменклатуре.НаименованиеПолное);
		СведенияОНоменклатуре.Вставить("Содержание", Содержание);  
		
		Если ЗначениеЗаполнено(СтавкаНДС) Тогда;
			// Ставка НДС передана в параметрах
			СведенияОНоменклатуре.СтавкаНДС = СтавкаНДС;      			
		ИначеЕсли ЗначениеЗаполнено(СтавкаАкциза) Тогда;
			// Ставка НДС передана в параметрах
			СведенияОНоменклатуре.СтавкаАкциза = СтавкаАкциза;			
		КонецЕсли;
		
		Цена = 0;
		Если ЗаполнятьЦену Тогда
			
			НайденнаяСтрока	= ТаблицаЦен.Найти(Номенклатура, "Номенклатура");
			Если НайденнаяСтрока <> Неопределено Тогда
				
				Цена = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(
					НайденнаяСтрока.Цена,
					НайденнаяСтрока.Валюта, ВалютаДокумента,
					НайденнаяСтрока.Курс, КурсДокумента,
					НайденнаяСтрока.Кратность, КратностьДокумента);

				Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
																Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
																ТипЦен.ЦенаВключаетНДС,
																ПараметрыОбъекта.Свойство("УчитыватьНДС") 
																И ПараметрыОбъекта.УчитыватьНДС, 
																ПараметрыОбъекта.Свойство("СуммаВключаетНДС") 
																И СуммаВключаетНДС, 
																?(ПараметрыОбъекта.Свойство("СтавкаНДС"),
																дог_УправлениеДоговорамиСерверПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС),0));
					
			КонецЕсли;
			
		КонецЕсли;
		СведенияОНоменклатуре.Вставить("Цена", Цена);
		СведенияОНоменклатуре.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
		
		ПлановаяСтоимость = 0;
		Если ЗначениеЗаполнено(ТипЦенПлановойСебестоимости) Тогда
			
			НайденнаяСтрока = ТаблицаЦенПлановойСебестоимости.Найти(Номенклатура, "Номенклатура");
			Если НайденнаяСтрока <> Неопределено Тогда
				
				ПлановаяСтоимость = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(
					НайденнаяСтрока.Цена,
					НайденнаяСтрока.Валюта, ВалютаРегламентированногоУчета,
					НайденнаяСтрока.Курс, 1,
					НайденнаяСтрока.Кратность, 1);
			КонецЕсли;
			
		КонецЕсли;
		СведенияОНоменклатуре.Вставить("ПлановаяСтоимость", ПлановаяСтоимость);
			
	КонецЦикла;
	
	Возврат СоответствиеСведенийОНоменклатуре;

КонецФункции


// Возвращает договор контрагента, если организация, указанная
// в данном договоре доступна пользователю
Функция ДоступныйДоговорКонтрагента(ДоговорСсылка, ДополнительныйОтбор = Неопределено) Экспорт
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ДоговорыКонтрагентов.Организация
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов ";
	
	УсловиеОтбор = "";
	
	Если ЗначениеЗаполнено(ДоговорСсылка) Тогда
		
		УсловиеОтбор = "ГДЕ
					   |ДоговорыКонтрагентов.Ссылка = &ДоговорСсылка " ;
		Запрос.УстановитьПараметр("ДоговорСсылка", ДоговорСсылка);					   
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + УсловиеОтбор;
	
	Если НЕ ДополнительныйОтбор = Неопределено И ТипЗнч(ДополнительныйОтбор) = Тип("Структура") Тогда
		
		ТекстОтбор = "";
	    ТекстСоединения = "";
	   
	    Для Каждого ЭлементСтруктуры Из ДополнительныйОтбор Цикл
		   
		   ВидСравненияВЗапрос = " = ";

			Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Массив") Тогда
			   ВидСравненияВЗапрос = " В ";
			КонецЕсли;

			Если ТекстСоединения = "" И Найти(ВРег(Запрос.Текст), "ГДЕ") = 0 Тогда
			   ТекстСоединения = " ГДЕ ";
			Иначе
			   ТекстСоединения = " И ";
			КонецЕсли;
			   			   
			ТекстОтбор = ТекстОтбор + ТекстСоединения + ЭлементСтруктуры.Ключ + ВидСравненияВЗапрос + " (&Параметр" + ЭлементСтруктуры.Ключ + ")";

			Запрос.УстановитьПараметр("Параметр" + ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			   		   			   
		КонецЦикла;
		
	   Запрос.Текст = Запрос.Текст + ТекстОтбор;
	   
	КонецЕсли;		
	      		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДоговорКонтрагента = Выборка.Договор;
	Иначе
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ДоговорКонтрагента;
	
КонецФункции // ДоступныйДоговорКонтрагента()


