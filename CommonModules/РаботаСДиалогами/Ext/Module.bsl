// Этот модуль предназачен для реализации алгоритмов работы форм и 
// содержит процедуры и функции работы с формами и элементами форм,
// а также подготовки данных для представления информации в формах.
                          
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ВЫЗОВА ИЗ ИНТЕРФЕЙСА

//Процедура открывает список выбора внешних обработок
//
Процедура ОткрытьСписокВнешнихОбработок() Экспорт
	
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
	
КонецПроцедуры // ОткрытьСписокВнешнихОбработок()

//Процедура открывает список выбора внешних отчетов
//
Процедура ОткрытьСписокВнешнихОтчетов() Экспорт
	
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
	
КонецПроцедуры // ОткрытьСписокВнешнихОтчетов()

//Процедура открывает список выбора внешних классификаторов
//
Процедура ОткрытьСписокВнешнихКлассификаторов() Экспорт
	
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.Классификатор;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
	
КонецПроцедуры

//Процедура открывает список выбора внешних печатных форм
//
Процедура ОткрытьСписокВнешнихПечатныхФорм() Экспорт
	
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
	
КонецПроцедуры // ОткрытьСписокВнешнихПечатныхФорм()

//Процедура открывает список выбора внешних обработок заполнения табличных частей
//
Процедура ОткрытьСписокВнешнихОбработокЗаполненияТабличныхЧастей() Экспорт
	
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
	
КонецПроцедуры // ОткрытьСписокВнешнихОбработокЗаполненияТабличныхЧастей()

// Процедура выбора расчетного документа.
//
Процедура ВыборРасчетногоДокумента(СтруктураПараметров,Элемент,ТипыДокументов) Экспорт

	ФормаВыбора = Документы.ДокументРасчетовСКонтрагентом.ПолучитьФорму("ФормаВыбора",Элемент);

	Если СтруктураПараметров.Свойство("Организация") Тогда 
		ФормаВыбора.Организация        = СтруктураПараметров.Организация;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("Контрагент") Тогда 
		ФормаВыбора.Контрагент         = СтруктураПараметров.Контрагент;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ДоговорКонтрагента") Тогда 
		ФормаВыбора.ДоговорКонтрагента = СтруктураПараметров.ДоговорКонтрагента;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("СчетДляОпределенияОстатков") Тогда 
		ФормаВыбора.Счет               = СтруктураПараметров.СчетДляОпределенияОстатков;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("СторонаСчета") Тогда 
		ФормаВыбора.ОстаткиОбороты     = СтруктураПараметров.СторонаСчета;
	КонецЕсли;

	ФормаВыбора.РежимВыбора        = Истина;
	ФормаВыбора.мТипыДокументов    = ТипыДокументов;
	
	Если СтруктураПараметров.Свойство("ЭтоНовыйДокумент")Тогда 
		Если СтруктураПараметров.ЭтоНовыйДокумент Тогда
			ФормаВыбора.КонПериода         = КонецДня(РабочаяДата);
		Иначе
			ФормаВыбора.КонПериода         = СтруктураПараметров.КонецПериода;
		КонецЕсли;
	Иначе
		ФормаВыбора.КонПериода         = СтруктураПараметров.КонецПериода;
	КонецЕсли;

	Если СтруктураПараметров.Свойство("НачалоПериода") Тогда
		ФормаВыбора.НачПериода         = СтруктураПараметров.НачалоПериода;
		ФормаВыбора.мПереданИнтервал = Истина;
	Иначе
		ФормаВыбора.мПереданИнтервал = Ложь;
	КонецЕсли; 

	ФормаВыбора.Открыть();

КонецПроцедуры // ВыборРасчетногоДокумента()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧЕНИЯ ТАЙПИНГА В ПОЛЕ ВВОДА

// Функция формирует список выбора значений, для события ОкончаниеВводаТекста.
//
// Параметры
//  РезультатЗапроса - РезультатЗапроса при тайпинге
//  Текст - Строка, текст тайпинга
//  ТипСправочника - Тип, тип справочника автоподбора текста
//
// Возвращаемое значение:
//   Список значений
//
Функция СформироватьСписокВыбораЗначенийТайпинга(РезультатЗапроса, Знач Текст, ТипСправочника)

	ПустаяСсылка = Новый(ТипСправочника);
	КоллекцияЗначенийПоискаПоПодстроке = ПустаяСсылка.Метаданные().ВводПоСтроке;
	
	СписокВозврата = Новый СписокЗначений;
	
	Текст = ВРег(Текст);
	ДлинаТекста = СтрДлина(Текст);
	
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	ЕстьНаименование = (ТаблицаЗапроса.Колонки.Найти("Наименование") <> Неопределено);
	ЕстьКод          = (ТаблицаЗапроса.Колонки.Найти("Код") <> Неопределено);
	
	Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
	
		Если ЕстьНаименование И КоллекцияЗначенийПоискаПоПодстроке.Найти("Наименование") <> Неопределено И ВРег(Лев(СтрокаТаблицы.Наименование, ДлинаТекста)) = Текст Тогда
			СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, (СтрокаТаблицы.Наименование + ?(ЕстьКод, (" (" + СокрЛП(Строка(СтрокаТаблицы.Код)) + ")"), "")));
			Продолжить;
		КонецЕсли;
		
		Если ЕстьКод И КоллекцияЗначенийПоискаПоПодстроке.Найти("Код") <> Неопределено И ВРег(Лев(СтрокаТаблицы.Код, ДлинаТекста)) = Текст Тогда
			Если ЕстьНаименование Тогда
				СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, (СтрокаТаблицы.Наименование + " (" + СокрЛП(Строка(СтрокаТаблицы.Код)) + ")"));
			Иначе
				СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, СокрЛП(Строка(СтрокаТаблицы.Код)));
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		Для каждого Колонка Из ТаблицаЗапроса.Колонки Цикл
		
			Если Колонка.Имя = "Наименование" ИЛИ Колонка.Имя = "Код" ИЛИ Колонка.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли; 
		
			Если ВРег(Лев(СтрокаТаблицы[Колонка.Имя], ДлинаТекста)) = Текст Тогда
				СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, ("" + СтрокаТаблицы[Колонка.Имя] + ?(ЕстьНаименование, (" (" + Строка(СтрокаТаблицы.Наименование) + ")"), "")));
			КонецЕсли
			
		КонецЦикла; 
	
	КонецЦикла; 

	Возврат СписокВозврата;
	
КонецФункции

// Процедура обслуживает событие ОбновлениеОтображения в форме, где расположен ЭУ тайпинга.
//
// Параметры
//  ЭтаФорма - Форма записи регистра сведений КонтактнаяИнформация
//  Элемент - элемент управления в котором происводится тайпинг
//
Процедура ОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, Элемент, ОбработкаТайпинга, ТекстТайпинга) Экспорт

	Если ОбработкаТайпинга Тогда
		ЭтаФорма.ТекущийЭлемент = Элемент;
		Элемент.ВыделенныйТекст = ТекстТайпинга;
		ОбработкаТайпинга = Ложь;
		ТекстТайпинга = "";
	КонецЕсли; 
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		Элемент.ЦветТекстаПоля = ЦветаСтиля.ТекстИнформационнойНадписи;
	Иначе
		Элемент.ЦветТекстаПоля = Новый Цвет;
	КонецЕсли;

КонецПроцедуры // ОбновлениеОтображенияВФормеПриТайпинге()

// Процедура обслуживает событие ОкончаниеВводаТекста элемента управления Вид в форме записи регистра
// сведений Контактная информация.
//
// Параметры
//  Элемент - поле ввода
//  Текст - текст введенный в поле ввода Вид
//  Значение - данные элемента управления поле ввода
//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ЭтаФорма - форма записи регистра сведений контактная информация
//  ТипСправочника - Тип, тип справочника автоподбора текста
//
Процедура ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, 
												  СтруктураПараметров, ЭтаФорма, ТипСправочника, 
												  ОбработкаТайпинга = Неопределено, ТекстТайпинга = Неопределено, 
												  ПоследнееЗначениеЭлементаТайпинга = Неопределено, 
												  ПриОтсутствииЗначенияОставлятьТекст = Истина) Экспорт

	Если ПустаяСтрока(Текст) Тогда
		Значение = Новый(ТипСправочника);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли; 

	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбора(Текст, СтруктураПараметров, ТипСправочника, 51);
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	Если РезультатЗапроса.Пустой() И ПриОтсутствииЗначенияОставлятьТекст Тогда
		ОтветНаВопрос = Вопрос(("В элемент управления введены некорректные данные." + Символы.ПС + "Продолжить?"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			ОбработкаТайпинга = Истина;
			ТекстТайпинга = Текст;
		Иначе
			Значение = Текст;
		КонецЕсли;						
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Значение = Выборка.Ссылка;
		ИначеЕсли Выборка.Количество() > 50 Тогда
			Предупреждение("Найдено более 50-ти значений, удовлетворяющих условиям выбора.
						   |Задайте более длинную строку или воспользуйтесь командой выбора (F4).");
						   
			Если ПоследнееЗначениеЭлементаТайпинга = Неопределено Тогда
				Значение = Текст;
			Иначе
				Значение = ПоследнееЗначениеЭлементаТайпинга;
			КонецЕсли;
			
		Иначе
			
			Если Выборка.Количество() = 0 Тогда
				ВыбранныйЭлемент = Неопределено;
			Иначе
				СписокВыбора = СформироватьСписокВыбораЗначенийТайпинга(РезультатЗапроса, Текст, ТипСправочника);
				ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент);
			КонецЕсли; 
			
			Если ВыбранныйЭлемент = Неопределено Тогда
				
				ОтветНаВопрос = Вопрос(("В элемент управления введены некорректные данные." + Символы.ПС + "Продолжить?"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
				
				Если ПоследнееЗначениеЭлементаТайпинга = Неопределено Тогда
					Значение = Текст;
				Иначе
					Значение = ПоследнееЗначениеЭлементаТайпинга;
				КонецЕсли; 
				
				Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
					ОбработкаТайпинга = Истина;
					ТекстТайпинга = Текст;
				КонецЕсли;
				
			Иначе
				Значение = ВыбранныйЭлемент.Значение;
			КонецЕсли;
			
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ОкончаниеВводаТекстаВЭлементеУправления()

// Процедура обслуживает событие ОкончаниеВводаТекста элемента управления СтруктурноеПодразделение
// Параметры
//	ФормаДокумента - исходная форма
//  Элемент - поле ввода
//  Текст - текст введенный в поле ввода СтрукутурноеПодразделение
//	Владелец - ссылка на организацию
//  СтруктурноеПодразделениеОрганизация - реквизит документа СтруктурноеПодразделение
//  Значение - данные элемента управления поле ввода
//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
//
Процедура ОкончаниеВводаТекстаВПолеСтруктурногоПодразделения(ФормаДокумента, Элемент, Текст, Владелец, СтруктурноеПодразделениеОрганизация, Значение, СтандартнаяОбработка) Экспорт
	
	Если СтрДлина(Элемент.ВыделенныйТекст) <> 0 Тогда
		Текст = Сред(Текст, 1, СтрДлина(Текст) - СтрДлина(Элемент.ВыделенныйТекст));
	КонецЕсли;
	
	Результат = ПолучитьРезультатЗапросаАвтоподбораСтруктурногоПодразделения(Владелец, Текст);                    
	
	Если НЕ Результат.Пустой() Тогда
		
		СтандартнаяОбработка = Ложь;
		Список = Результат.Выгрузить();
		// - КУФИБ - начало
		Если ТипЗнч(Элемент)=Тип("ПолеФормы") Тогда  // если управляемый интерфейс
			Значение = Новый СписокЗначений;
			Значение.ЗагрузитьЗначения(Список.ВыгрузитьКолонку("Ссылка"));
			Возврат;
		КонецЕсли;
		// -КУФИБ- конец
		Если Список.Количество() = 1 Тогда
			Значение = Список[0].Ссылка;
		Иначе
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.ЗагрузитьЗначения(Список.ВыгрузитьКолонку("Ссылка"));
			Элемент.СписокВыбора = СписокЗначений;
			ВыбранныйЭлемент  =  ФормаДокумента.ВыбратьИзСписка(СписокЗначений, Элемент, 0);
			
			Если ВыбранныйЭлемент <> Неопределено Тогда
				Значение = ВыбранныйЭлемент.Значение;
			Иначе
				Значение = Элемент.Значение;
			КонецЕсли;	
		КонецЕсли;
		
		СтруктурноеПодразделениеОрганизация = Значение;
	Иначе
		//в том случае, если вводиться подразделение, но не струкутрное
		СтандартнаяОбработка = Ложь;
        Значение = Элемент.Значение;
			
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает событие ОкончаниеВводаТекста элемента управления ПодразделениеОрганизации
//
Процедура ОкончаниеВводаТекстаВПолеПодразделенияОрганизации(Организация, СтруктурноеПодразделение, Форма,
															Элемент, Текст, Значение, СтандартнаяОбработка) Экспорт 
															
	Если СтрДлина(Элемент.ВыделенныйТекст) <> 0 Тогда
		Текст = Сред(Текст, 1, СтрДлина(Текст) - СтрДлина(Элемент.ВыделенныйТекст));
	КонецЕсли;
															
	Результат = ПолныеПрава.ПолучитьРезультатЗапросаАвтоподбораПодразделенияОрганизации(Организация, СтруктурноеПодразделение, Текст);
	
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
	Иначе
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.Пустой() Тогда
		Список = Результат.Выгрузить();
		Если Список.Количество() = 1 Тогда
			Значение = Список[0].Ссылка;
		Иначе 
			СписокЗначений 		 = СформироватьСписокВыбораЗначенийТайпинга(Результат, Текст, Тип("СправочникСсылка.ПодразделенияОрганизаций"));
			Элемент.СписокВыбора = СписокЗначений;
			ВыбранныйЭлемент  	 =  Форма.ВыбратьИзСписка(СписокЗначений, Элемент, 0);
			
			Если ВыбранныйЭлемент <> Неопределено Тогда
				Значение = ВыбранныйЭлемент.Значение;
			Иначе
				СтандартнаяОбработка = Истина;
			КонецЕсли;	
		КонецЕсли;
	Иначе 
		Предупреждение("В элемент управления введены некорректные данные!");
	КонецЕсли;

КонецПроцедуры

// Процедура обслуживает событие АвтоПодборТекста элемента управления ПолеВвода для подмены автопоиска по тексту.
//
// Параметры
//  Элемент - поле ввода
//  Текст - текст введенный в поле ввода Вид
//  ТекстАвтоПодбора - текст автоподбора в поле Вид
//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ТипСправочника - Тип, тип справочника автоподбора текста
//
Процедура АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, 
												СтруктураПараметров, ТипСправочника) Экспорт

	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбора(Текст, СтруктураПараметров, ТипСправочника, 2);
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			
			Выборка.Следующий();
			ПустаяСсылка = Новый(ТипСправочника);
			КоллекцияЭлементовПоиска = ПустаяСсылка.Метаданные().ВводПоСтроке;
			
			Для каждого ЭлементКоллекции Из КоллекцияЭлементовПоиска Цикл
				Если Лев(Врег(Выборка[ЭлементКоллекции.Имя]), СтрДлина(Текст)) = ВРег(Текст) Тогда
					
					Если Врег(Текст) <> Врег(Выборка[ЭлементКоллекции.Имя]) Тогда
						ТекстАвтоподбора = Выборка[ЭлементКоллекции.Имя];
					КонецЕсли;
					
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // АвтоПодборТекстаВЭлементеУправления()

// Процедура обслуживает событие АвтоПодборТекста элемента управления СтруктурноеПодразделение для подмены автопоиска по тексту.
//
// Параметры
//  Текст - текст введенный в поле ввода Вид
//	Владелец - ссылка на организацию
//  ТекстАвтоПодбора - текст автоподбора в поле Вид
//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
//
Процедура АвтоПодборТекстаВПолеСтруктурногоПодразделения(Текст, Владелец, ТекстАвтоПодбора, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Результат = ПолучитьРезультатЗапросаАвтоподбораСтруктурногоПодразделения(Владелец, Текст);	
	                                                  
	Если Не Результат.Пустой() Тогда	
		Список = Результат.Выгрузить();
		// - КУФИБ - начало
		
		// для управляемых форм
		//Если ТекстАвтоПодбора = Неопределено Тогда
		//	ТекстАвтоПодбора = Новый СписокЗначений;
		//	ТекстАвтоПодбора.Добавить(Список[0].Ссылка);
		//	Возврат;
		//КонецЕсли;
		// - КУФИБ - конец
		ТекстАвтоПодбора = Список[0].Ссылка;
	КонецЕсли;   
КонецПроцедуры

// Процедура обрабатывает событие АвтоПодборТекста элемента управления ПодразделениеОрганизации
//
Процедура АвтоПодборТекстаВПолеПодразделениеОрганизации(Организация, СтруктурноеПодразделение, 
														Текст, ТекстАвтоподбора, СтандартнаяОбработка) Экспорт 
	СтандартнаяОбработка = Ложь;													
	Результат = ПолныеПрава.ПолучитьРезультатЗапросаАвтоподбораПодразделенияОрганизации(Организация, СтруктурноеПодразделение, Текст);
	
	Если НЕ Результат.Пустой() Тогда
		Список = Результат.Выгрузить();
		ТекстАвтоподбора = Список[0].Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует ограничение для запроса по полю 
Функция СформироватьОграничениеПоПолюВхождениеВНачало(ИмяПоля, ТипЗначенияПоиска) Экспорт
	
	Ограничение = ИмяПоля + ?(ТипЗначенияПоиска = Тип("Строка"), (" ПОДОБНО &ТекстАвтоПодбора СПЕЦСИМВОЛ ""~"""), (" =  &ТекстАвтоПодбораЧисло"));
	Возврат "(" + Ограничение + ") ";
	
КонецФункции

//Функция Определяет тип ограничений по полю
Функция ОпределитьТипОграниченийПоПолю(ИмяЭлемента, МетаданныеОбъекта, ДляСправочника = Истина)
	
	Если ДляСправочника Тогда
		
		Если ИмяЭлемента <> "Наименование" И ИмяЭлемента <> "Код" Тогда
	    	ТипЗначенияПоиска = МетаданныеОбъекта.Реквизиты[ИмяЭлемента].Тип.Типы()[0];
		Иначе
			Если ИмяЭлемента = "Наименование" Тогда
				ТипЗначенияПоиска = Тип("Строка");
			Иначе
				Если МетаданныеОбъекта.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
					ТипЗначенияПоиска = Тип("Строка");
				Иначе
					ТипЗначенияПоиска = Тип("Число");
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
	Иначе
		// тип определяем для регистра сведений
		Объект = МетаданныеОбъекта.Измерения.Найти(ИмяЭлемента);
		Если Объект = Неопределено Тогда
			Объект = МетаданныеОбъекта.Ресурсы.Найти(ИмяЭлемента);
		КонецЕсли;
		Если Объект = Неопределено Тогда
			Объект = МетаданныеОбъекта.Реквизиты.Найти(ИмяЭлемента);
			Если Объект = Неопределено Тогда
				ТипЗначенияПоиска = Тип("Строка");
			КонецЕсли;	
		КонецЕсли;
		ТипЗначенияПоиска = Объект.Тип.Типы()[0];
		
	КонецЕсли;
	
	Возврат  ТипЗначенияПоиска;
	
КонецФункции

// Функция создает объект запрос и устанавливает у него параметры ТекстАвтоПодбора и ТекстАвтоПодбораЧисло
// убирает лишние символы в строке поиска
Функция СоздатьЗапросДляСпискаАвтоподбора(СтрокаПоиска, СтрокаОтборовПоСтруктуре, СтруктураПараметров, ИмяТаблицыОграничений)
	
	Запрос = Новый Запрос;
	
	СтрокаПоиска = ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СтрокаПоиска);
		
	Запрос.УстановитьПараметр("ТекстАвтоПодбора"     , (СтрокаПоиска + "%"));
	Попытка
		Запрос.УстановитьПараметр("ТекстАвтоПодбораЧисло", Число(СтрокаПоиска));
	Исключение
		Запрос.УстановитьПараметр("ТекстАвтоПодбораЧисло", Неопределено);
	КонецПопытки;
	
	// Устанавливает ограничения
	СтрокаОтборовПоСтруктуре = "";
	Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
		Ключ 	 = ЭлементСтруктуры.Ключ;
        Значение = ЭлементСтруктуры.Значение;

		Запрос.УстановитьПараметр(Ключ, Значение);
		СтрокаОтборовПоСтруктуре = СтрокаОтборовПоСтруктуре + "
		|		И
		|		" + ИмяТаблицыОграничений + "." + Ключ + " В (&"+ Ключ + ")";
	КонецЦикла; 
	
	Возврат Запрос;
	
КонецФункции // СоздатьЗапросДляСпискаАвтоподбора()

// функция по типу возвращает наименование ветки метаданных
Функция ПолучитьВеткуМетаданныхПоТипу(ТипДанных)
	
	ВеткаМетаданных = "";
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипДанных) Тогда
		ВеткаМетаданных = "Справочник"
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипДанных) Тогда
		ВеткаМетаданных = "ПланВидовРасчета"
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипДанных) Тогда
		ВеткаМетаданных = "ПланВидовХарактеристик"
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипДанных) Тогда
		ВеткаМетаданных = "ПланСчетов"
	КонецЕсли;
	
	Возврат ВеткаМетаданных;

КонецФункции // ПолучитьВеткуМетаданныхПоТипу()

// Функция выполняет запрос при автоподборе текста  и при окончании ввода текста в поле ввода.
//
// Параметры
//  Текст - Строка, текст введенный в поле ввода видв контактной информации, по которому необходимо строить поиск
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ТипСправочника - Тип, тип справочника автоподбора текста
//  КоличествоЭлементов - Число, количество элементов в результирующей таблице запроса
//
// Возвращаемое значение
//  РезультатЗапроса
//
Функция ПолучитьРезультатЗапросаАвтоподбора(Знач Текст, СтруктураПараметров, ТипСправочника, КоличествоЭлементов) Экспорт
    	
	ВеткаМетаданных = ПолучитьВеткуМетаданныхПоТипу(ТипСправочника);
	
	Если ВеткаМетаданных = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПустаяСсылкаТипа = Новый(ТипСправочника);

	МетаданныеОбъекта = ПустаяСсылкаТипа.Метаданные();
	
	КоллекцияПоискаПоПодстроке = МетаданныеОбъекта.ВводПоСтроке;
	Если КоллекцияПоискаПоПодстроке.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ИмяТаблицыСправочника = МетаданныеОбъекта.Имя;
	ИмяТаблицыОграничений = ?(КоллекцияПоискаПоПодстроке.Количество() = 1, "ТаблицаВложенногоЗапроса", "ТаблицаСправочника");
	СтрокаОтборовПоСтруктуре = "";
	
	Запрос = СоздатьЗапросДляСпискаАвтоподбора(Текст, СтрокаОтборовПоСтруктуре, СтруктураПараметров, ИмяТаблицыОграничений);
	
	СтрокаПолей = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ " + Строка(КоличествоЭлементов) + "
	|	ТаблицаВложенногоЗапроса.Ссылка КАК Ссылка,
	|";
	
	Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
		СтрокаПолей = СтрокаПолей + "
		|	ТаблицаВложенногоЗапроса.Ссылка.Наименование КАК Наименование,";
	КонецЕсли;
	
	Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
		СтрокаПолей = СтрокаПолей + "
		|	ТаблицаВложенногоЗапроса.Ссылка.Код КАК Код,";
	КонецЕсли; 
	
	Если КоллекцияПоискаПоПодстроке.Количество() = 1 Тогда
		
		ЭлементКоллекции = КоллекцияПоискаПоПодстроке[0];
		ТипЗначенияПоиска = ОпределитьТипОграниченийПоПолю(ЭлементКоллекции.Имя, МетаданныеОбъекта);
		
		Если ЭлементКоллекции.Имя <> "Наименование" И ЭлементКоллекции.Имя <> "Код" Тогда
			СтрокаПолей = СтрокаПолей + "
			|	ТаблицаВложенногоЗапроса.Ссылка." + ЭлементКоллекции.Имя + " КАК " + ЭлементКоллекции.Имя;

		КонецЕсли;
		
		Запрос.Текст = Лев(СтрокаПолей, (СтрДлина(СтрокаПолей) - 1)) + "
		|ИЗ
		|	" + ВеткаМетаданных + "." + ИмяТаблицыСправочника + " КАК ТаблицаВложенногоЗапроса
		|ГДЕ ";
		
		ОграничениеПоПолю = СформироватьОграничениеПоПолюВхождениеВНачало("ТаблицаВложенногоЗапроса." + ЭлементКоллекции.Имя, ТипЗначенияПоиска);
		
		Запрос.Текст = Запрос.Текст +"
		|	" + ОграничениеПоПолю + СтрокаОтборовПоСтруктуре;
	
	Иначе
		
		ПервыйЭлемент = Истина;
		СтрокаТаблиц = "";
		Для Каждого ЭлементКоллекции Из КоллекцияПоискаПоПодстроке Цикл
			
			ТипЗначенияПоиска = ОпределитьТипОграниченийПоПолю(ЭлементКоллекции.Имя, МетаданныеОбъекта);
			
			Если ЭлементКоллекции.Имя <> "Наименование" И ЭлементКоллекции.Имя <> "Код" Тогда
				СтрокаПолей = СтрокаПолей + "
				|	ТаблицаВложенногоЗапроса.Ссылка." + ЭлементКоллекции.Имя + " КАК " + ЭлементКоллекции.Имя + ",";

			КонецЕсли;
			
			Если НЕ ПервыйЭлемент Тогда
				СтрокаТаблиц = СтрокаТаблиц + "
				|
				|	ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли; 
			ПервыйЭлемент = Ложь;
			
			СтрокаТаблиц = СтрокаТаблиц + "
			|	ВЫБРАТЬ  ПЕРВЫЕ " + Строка(КоличествоЭлементов) + "
			|		ТаблицаСправочника.Ссылка КАК Ссылка
			|	ИЗ
			|		" + ВеткаМетаданных + "." + ИмяТаблицыСправочника + " КАК ТаблицаСправочника
			|	ГДЕ ";

			
			ОграничениеПоПолю = СформироватьОграничениеПоПолюВхождениеВНачало("ТаблицаСправочника." + ЭлементКоллекции.Имя, ТипЗначенияПоиска);
			СтрокаТаблиц = СтрокаТаблиц +"
			|	" + ОграничениеПоПолю + СтрокаОтборовПоСтруктуре;		
		КонецЦикла; 
		
		Запрос.Текст = Лев(СтрокаПолей, (СтрДлина(СтрокаПолей) - 1)) + "
		|ИЗ
		|
		|	(
		|" + СтрокаТаблиц + "
		|	) КАК ТаблицаВложенногоЗапроса";
	
	КонецЕсли; 
	
	Возврат Запрос.Выполнить();

КонецФункции // ПолучитьРезультатЗапросаАвтоподбора

// Функция выполняет запрос при автоподборе текста и при окончании ввода текста в поле ввода.
//
// Параметры
//  Текст - Строка, текст введенный в поле ввода СтруктурноеПодразделение, по которому необходимо строить поиск
//  Организация - ссылка на организацию
//
// Возвращаемое значение
//  РезультатЗапроса
//
Функция ПолучитьРезультатЗапросаАвтоподбораСтруктурногоПодразделения(Владелец, Текст) Экспорт
		
		Если Владелец <> Справочники.Организации.ПустаяСсылка() Тогда
			
			ЗапросПоОрганизации		= " И Организации.Ссылка = &Владелец";
			ЗапросПоСППодразделение = " И ПодразделенияОрганизаций.Владелец = &Владелец";
			
		Иначе
			
			ЗапросПоОрганизации 	= "";
			ЗапросПоСППодразделение = "";
				  
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
							  |	Организации.Ссылка КАК Ссылка,
							  |	Организации.Ссылка КАК Владелец
							  |ИЗ
							  |	Справочник.Организации КАК Организации
							  |ГДЕ
							  |	Организации.Наименование ПОДОБНО &ШаблонНаименования"
							  + ЗапросПоОрганизации + 
							  " ОБЪЕДИНИТЬ ВСЕ
							  |
							  |ВЫБРАТЬ 
							  |	ПодразделенияОрганизаций.Ссылка,
							  |	ПодразделенияОрганизаций.Владелец
							  |ИЗ
							  |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
							  |ГДЕ
							  |	ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением = ИСТИНА
							  |	И ПодразделенияОрганизаций.Наименование ПОДОБНО &ШаблонНаименования"
							  + ЗапросПоСППодразделение +
							  " УПОРЯДОЧИТЬ ПО
							  |	Владелец,
							  |	Ссылка
							  |АВТОУПОРЯДОЧИВАНИЕ");
	Запрос.УстановитьПараметр("ШаблонНаименования", Текст + "%");
	Запрос.УстановитьПараметр("Владелец", 			Владелец); 
	
	Возврат Запрос.Выполнить();	

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С УНИВЕРСАЛЬНЫМ ПОИСКОМ ДАННЫХ

//функция создает сервисный объект для поиска номенклатуры
Функция СоздатьОбъектПоискаДанныхДляНоменклатуры(Знач ЭлементФормыЗначениеОтбора, Знач ОбъектФормыСписок, Знач СписокДанных) Экспорт
	
	мПоискОбъектовВСпискахДанных = Обработки.ПоискОбъектовВСпискахДанных.Создать();
	мПоискОбъектовВСпискахДанных.ТипОбъектовПоиска = Тип("СправочникСсылка.Номенклатура");
	мПоискОбъектовВСпискахДанных.ПрефиксНазванияСпискаДляСохранения = "мСписокЗначенийОтбораНоменклатуры.";

	мПоискОбъектовВСпискахДанных.СписокБыстрыхОтборовПоРеквизитам = Новый СписокЗначений();
	мПоискОбъектовВСпискахДанных.СписокБыстрыхОтборовПоРеквизитам.Добавить("Наименование", "Наименование");
	мПоискОбъектовВСпискахДанных.СписокБыстрыхОтборовПоРеквизитам.Добавить("НаименованиеПолное", "Полное наименование");
	мПоискОбъектовВСпискахДанных.СписокБыстрыхОтборовПоРеквизитам.Добавить("Код", "Код");
	мПоискОбъектовВСпискахДанных.СписокБыстрыхОтборовПоРеквизитам.Добавить("Артикул", "Артикул");
	
	мПоискОбъектовВСпискахДанных.ОбъектФормыЗначениеОтбораСпискаДанных = ЭлементФормыЗначениеОтбора;
	мПоискОбъектовВСпискахДанных.ОбъектФормыСписок = ОбъектФормыСписок;
	мПоискОбъектовВСпискахДанных.Список = СписокДанных;
	мПоискОбъектовВСпискахДанных.ПрефиксПутиСохраненияНастроекПользователя = "Справочники.Номенклатура.ФормаСписка";
		
	Возврат мПоискОбъектовВСпискахДанных;
	
КонецФункции

//функция создает сервисный объект для поиска Контрагенты
Функция СоздатьОбъектПоискаДанныхДляКонтрагентов(Знач ЭлементФормыЗначениеОтбора, Знач ОбъектФормыСписок, Знач СписокДанных) Экспорт
	
	мПоискОбъектовВСпискахДанных = Обработки.ПоискОбъектовВСпискахДанных.Создать();
	мПоискОбъектовВСпискахДанных.ТипОбъектовПоиска = Тип("СправочникСсылка.Контрагенты");
	мПоискОбъектовВСпискахДанных.ПрефиксНазванияСпискаДляСохранения = "мСписокЗначенийОтбораКонтрагенты.";

	мПоискОбъектовВСпискахДанных.СписокБыстрыхОтборовПоРеквизитам = Новый СписокЗначений();
	мПоискОбъектовВСпискахДанных.СписокБыстрыхОтборовПоРеквизитам.Добавить("Наименование", "Наименование");
	мПоискОбъектовВСпискахДанных.СписокБыстрыхОтборовПоРеквизитам.Добавить("НаименованиеПолное", "Полное наименование");
	мПоискОбъектовВСпискахДанных.СписокБыстрыхОтборовПоРеквизитам.Добавить("Код", "Код");
	мПоискОбъектовВСпискахДанных.СписокБыстрыхОтборовПоРеквизитам.Добавить("РНН", "РНН");
	мПоискОбъектовВСпискахДанных.СписокБыстрыхОтборовПоРеквизитам.Добавить("ИдентификационныйКодЛичности", "БИН/ИИН");

	мПоискОбъектовВСпискахДанных.ОбъектФормыЗначениеОтбораСпискаДанных = ЭлементФормыЗначениеОтбора;
	мПоискОбъектовВСпискахДанных.ОбъектФормыСписок = ОбъектФормыСписок;
	мПоискОбъектовВСпискахДанных.Список = СписокДанных;
	мПоискОбъектовВСпискахДанных.ПрефиксПутиСохраненияНастроекПользователя = "Справочники.Контрагенты.ФормаСписка";
		
	Возврат мПоискОбъектовВСпискахДанных;
	
КонецФункции

//функция создает сервисный объект для поиска Физические лица
Функция СоздатьОбъектПоискаДанныхДляФизЛиц(Знач ЭлементФормыЗначениеОтбора, Знач ОбъектФормыСписок, Знач СписокДанных) Экспорт
	
	мПоискОбъектовВСпискахДанных = Обработки.ПоискОбъектовВСпискахДанных.Создать();
	мПоискОбъектовВСпискахДанных.ТипОбъектовПоиска = Тип("СправочникСсылка.ФизическиеЛица");
	мПоискОбъектовВСпискахДанных.ПрефиксНазванияСпискаДляСохранения = "мСписокЗначенийОтбораФизическиеЛица.";

	мПоискОбъектовВСпискахДанных.СписокБыстрыхОтборовПоРеквизитам = Новый СписокЗначений();
	мПоискОбъектовВСпискахДанных.СписокБыстрыхОтборовПоРеквизитам.Добавить("Наименование", "Наименование");
	мПоискОбъектовВСпискахДанных.СписокБыстрыхОтборовПоРеквизитам.Добавить("Код", "Код");
	мПоискОбъектовВСпискахДанных.СписокБыстрыхОтборовПоРеквизитам.Добавить("РНН", "РНН");
	мПоискОбъектовВСпискахДанных.СписокБыстрыхОтборовПоРеквизитам.Добавить("СИК", "СИК");
	мПоискОбъектовВСпискахДанных.СписокБыстрыхОтборовПоРеквизитам.Добавить("ИдентификационныйКодЛичности", "ИИН");

	мПоискОбъектовВСпискахДанных.ОбъектФормыЗначениеОтбораСпискаДанных = ЭлементФормыЗначениеОтбора;
	мПоискОбъектовВСпискахДанных.ОбъектФормыСписок = ОбъектФормыСписок;
	мПоискОбъектовВСпискахДанных.Список = СписокДанных;
	мПоискОбъектовВСпискахДанных.ПрефиксПутиСохраненияНастроекПользователя = "Справочники.ФизическиеЛица.ФормаСписка";
		
	Возврат мПоискОбъектовВСпискахДанных;
	
КонецФункции

//функция создает сервисный объект для поиска основных средств
Функция СоздатьОбъектПоискаДанныхДляОсновныхСредств(Знач ЭлементФормыЗначениеОтбора, Знач ОбъектФормыСписок, Знач СписокДанных) Экспорт
	
	мПоискОбъектовВСпискахДанных = Обработки.ПоискОбъектовВСпискахДанных.Создать();
	мПоискОбъектовВСпискахДанных.ТипОбъектовПоиска = Тип("СправочникСсылка.ОсновныеСредства");
	мПоискОбъектовВСпискахДанных.ПрефиксНазванияСпискаДляСохранения = "мСписокЗначенийОтбораОсновныхСредств.";

	мПоискОбъектовВСпискахДанных.СписокБыстрыхОтборовПоРеквизитам = Новый СписокЗначений();
	мПоискОбъектовВСпискахДанных.СписокБыстрыхОтборовПоРеквизитам.Добавить("Наименование", "Наименование");
	мПоискОбъектовВСпискахДанных.СписокБыстрыхОтборовПоРеквизитам.Добавить("НаименованиеПолное", "Полное наименование");
    мПоискОбъектовВСпискахДанных.СписокБыстрыхОтборовПоРеквизитам.Добавить("Код", "Код");
	
	мПоискОбъектовВСпискахДанных.ОбъектФормыЗначениеОтбораСпискаДанных = ЭлементФормыЗначениеОтбора;
	мПоискОбъектовВСпискахДанных.ОбъектФормыСписок = ОбъектФормыСписок;
	мПоискОбъектовВСпискахДанных.Список = СписокДанных;
	мПоискОбъектовВСпискахДанных.ПрефиксПутиСохраненияНастроекПользователя = "Справочники.ОсновныеСредства.ФормаСписка";
		
	Возврат мПоискОбъектовВСпискахДанных;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ВЫБОРА

// Процедура выполняет стандартные действия при начале выбора договора контрагента в формах документов.
//
// Параметры:
//  ДокументОбъект                   - объект редактируемого документа;
//  ФормаДокумента                    - форма редактируемого документа;
//  ЭлементФормы                      - элемент формы документа, который надо заполнить; 
//  Контрагент                        - ссылка на справочник, определяет контрагента по договору;
//  ДоговорКонтрагента                - ссылка на справочник, определяет договор контрагента;
//  ВидДоговораВзаиморасчетов         - вид договора взаиморасчетов для отбора, значение перечисления ВидыДоговоровКонтрагентов;
//  СтандартнаяОбработка              - булево, признак выполнения стандартной (системной) обработки события,
//  СтруктураДополнительныхПараметров - структура, содержит дополнительные значения отбора, необязаетльный,
//                                      ключ - имя отбора, значение - структура, определяющая отбор с ключами:
//                                      ЗначениеОтбора (если не задан, то отбор не устанавливается), 
//                                      ВидСравненияОтбора (если не задан, то ВидСравнения.Равно), 
//                                      ДоступностьОтбора (если не задан, то Ложь).
//
Процедура НачалоВыбораЗначенияДоговораКонтрагента(	ДокументОбъект, ФормаДокумента, ЭлементФормы, Контрагент, 
													ДоговорКонтрагента, ВидыДоговораВзаиморасчетов, СтандартнаяОбработка,
													СтруктураДополнительныхПараметров = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Тип выбираемого значения зависит от договора.
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Предупреждение("Не выбран контрагент!");
		Если ТипЗнч(ФормаДокумента.ТекущийЭлемент) = Тип("ТабличноеПоле")
			И (МетаданныеДокумента.Имя = "АвансовыйОтчет"
			ИЛИ МетаданныеДокумента.Имя = "ЗакрытиеДтКтЗадолженности"			
			ИЛИ МетаданныеДокумента.Имя = "ВводНачальныхОстатковПоВзаиморасчетам") Тогда
			
			ФормаДокумента.ТекущийЭлемент.ТекущаяКолонка = ФормаДокумента.ТекущийЭлемент.Колонки.Контрагент;		
		Иначе
			Если МетаданныеДокумента.Имя = "КорректировкаДолга" Тогда 
				ФормаДокумента.ТекущийЭлемент = ФормаДокумента.ЭлементыФормы.КонтрагентКредитор;
			ИначеЕсли НЕ МетаданныеДокумента.Имя = "ВводНачальныхОстатков"  Тогда
				ФормаДокумента.ТекущийЭлемент = ФормаДокумента.ЭлементыФормы.Контрагент;
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;

	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ФормаВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,ЭлементФормы,);

	// Владельца менять по умолчанию не даем.
	ФормаВыбора.ПараметрОтборПоВладельцу = Контрагент;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	Попытка
		ФормаВыбора.ПараметрВыборГруппИЭлементов = ЭлементФормы.ВыборГруппИЭлементов;
	Исключение
	КонецПопытки;

	Если ВидыДоговораВзаиморасчетов<>Неопределено Тогда

		// Оставим в выборе только "правильные" договоры
		Если ТипЗнч(ВидыДоговораВзаиморасчетов) = Тип("СписокЗначений") Тогда
			ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                    = ВидСравнения.ВСписке;
		Иначе
			ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                    = ВидСравнения.Равно;
		КонецЕсли;
		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Значение                            = ВидыДоговораВзаиморасчетов;
		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Использование                       = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидДоговора.Доступность = Ложь;
	КонецЕсли;

	// Еще надо фильтровать по организации, если она заполнена
	//Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация",МетаданныеДокумента)
	//   И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
	//	ФормаВыбора.СправочникСписок.Отбор.Организация.Значение                            = ДокументОбъект.Организация;
	//	ФормаВыбора.СправочникСписок.Отбор.Организация.Использование                       = Истина;
	//	ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения                        = ВидСравнения.Равно;
	//	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	//КонецЕсли;
	// Добавим фильтры по дополнительным параметрам отбора
	Если ТипЗнч(СтруктураДополнительныхПараметров) = Тип("Структура") Тогда
		Для каждого ЭлементСтруктуры Из СтруктураДополнительныхПараметров Цикл

			СтруктураОтбора = ЭлементСтруктуры.Значение;
			
			ЗначениеОтбора     = Неопределено;
			ВидСравненияОтбора = Неопределено;
			ДоступностьОтбора  = Неопределено;

			Если СтруктураОтбора.Свойство("ЗначениеОтбора", ЗначениеОтбора) Тогда

				Если СтруктураОтбора.Свойство("ВидСравненияОтбора", ВидСравненияОтбора) Тогда
					ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравненияОтбора;
				Иначе
					ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.Равно;
				КонецЕсли;

				ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЗначениеОтбора;
				ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;

				Если СтруктураОтбора.Свойство("ДоступностьОтбора", ДоступностьОтбора) Тогда
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = ДоступностьОтбора;
				Иначе
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = Ложь;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ДоговорКонтрагента;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияДоговораКонтрагента()

// Процедура выполняет стандартные действия при начале выбора банковского счета контрагента в формах документов.
//
// Параметры:
//  ВладелецБанковскогоСчета - ссылка на справочник, определяет владельца банковского счета;
//  ЭлементФормы             - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка,    - булево, признак выполнения стандартной (системной) обработки события 
//                             начала выбора для данного элемента формы документа.
//  ВалютаБанковскогоСчета   - ссылка на справочник, определяет валюту банковского счета,
//                             если неп заполнено, то список банковских счетов не фильтруется по валюте;
//
Процедура НачалоВыбораЗначенияБанковскогоСчета(ВладелецБанковскогоСчета,ЭлементФормы, СтандартнаяОбработка, 
									   ВалютаБанковскогоСчета = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;

	ФормаВыбораБанковскогоСчета = Справочники.БанковскиеСчета.ПолучитьФормуСписка(, ЭлементФормы);
	ФормаВыбораБанковскогоСчета.ПараметрОтборПоВладельцу = ВладелецБанковскогоСчета;

	Если ЗначениеЗаполнено(ВалютаБанковскогоСчета) Тогда

		ФормаВыбораБанковскогоСчета.Отбор.ВалютаДенежныхСредств.Значение      = ВалютаБанковскогоСчета;
		ФормаВыбораБанковскогоСчета.Отбор.ВалютаДенежныхСредств.Использование = Истина;

	КонецЕсли;

	ФормаВыбораБанковскогоСчета.РежимВыбора = Истина;
	ФормаВыбораБанковскогоСчета.Открыть();


КонецПроцедуры // НачалоВыбораЗначенияБанковскогоСчета()

// Процедура выполняет стандартные действия при начале выбора структурной единицы в формах документов.
//
// Параметры:
//  СписокСтруктурныхЕдиниц  - список значений, содержащий список структурных единиц, который будет обновлен после выбора
//  ЭлементФормы             - элемент формы документа, который надо заполнить
//  СтандартнаяОбработка     - булево, признак выполнения стандартной (системной) обработки события 
//                             начала выбора для данного элемента формы документа.
//  РежимВыбораСтруктурныхЕдиниц - строка для указания режим выбора структурных единиц
//                             "ПоГоловнымОрганизациями" - выбор только по справочнику Организации (бухгалтерские отчеты)
//							   "ПоНалогоплательщику" - выбор по регистру ИсчислениеНалоговСтруктурныхЕдиниц (налоговые отчеты)
//	Налогоплательщик 		 - СправочникСсылка.Организации/СправочникСсылка.ПодразделенияОрганизаций
//	НалоговыйКомитет 		 - СправочникСсылка.Контрагенты - налоговый комитет, по которому первоначально установить отбор
//	РазделНалоговогоУчета	 - значение перечисления РазделыНалоговогоУчета
//	ЗапретитьИзменениеПараметровОтбора - булево, если Истина, то пользователь не сможет менять условия отбора (Налогоплательщика и НалоговыйКомитет)
//
// Возвращаемое значение:
//	Булево - Истина, если пользователь нажал ОК, иначе Ложь
//
Функция НачалоВыбораСпискаСтруктурныхЕдиниц(СписокСтруктурныхЕдиниц, ЭлементФормы, СтандартнаяОбработка,
												СтроковоеПредставлениеСписка, 
												РежимВыбораСтруктурныхЕдиниц = "ПоГоловнымОрганизациям", 
												Налогоплательщик = Неопределено,
												НалоговыйКомитет = Неопределено,
												РазделНалоговогоУчета = Неопределено,
												ЗапретитьИзменениеПараметровОтбора = Ложь,
												ГоловнаяОрганизацияДляУчетаЗарплаты = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;
	ФормаВыбораСтруктурнойЕдиницы = ПолучитьОбщуюФорму("ФормаВыбораСтруктурныхЕдиниц", ЭлементФормы);
	
	ФормаВыбораСтруктурнойЕдиницы.НачальныйСписокСтруктурныхЕдиниц 	  = СписокСтруктурныхЕдиниц;
	ФормаВыбораСтруктурнойЕдиницы.РежимВыбораСтруктурныхЕдиниц 		  = РежимВыбораСтруктурныхЕдиниц;
	ФормаВыбораСтруктурнойЕдиницы.Налогоплательщик                    = Налогоплательщик;
	ФормаВыбораСтруктурнойЕдиницы.НалоговыйКомитет                    = НалоговыйКомитет;
	ФормаВыбораСтруктурнойЕдиницы.РазделНалоговогоУчета               = РазделНалоговогоУчета;
	ФормаВыбораСтруктурнойЕдиницы.ЗапретитьИзменениеПараметровОтбора  = ЗапретитьИзменениеПараметровОтбора;
	ФормаВыбораСтруктурнойЕдиницы.ГоловнаяОрганизацияДляУчетаЗарплаты = ГоловнаяОрганизацияДляУчетаЗарплаты;
	
	РезультатВыбора = ФормаВыбораСтруктурнойЕдиницы.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		// перепишем список выбранных структурных единиц в переданных параметр
		МассивСтруктурныхЕдиниц = РезультатВыбора.ВыгрузитьЗначения();
		СписокСтруктурныхЕдиниц.ЗагрузитьЗначения(МассивСтруктурныхЕдиниц);
		
		// сформируем текстового представление списка
		СтроковоеПредставлениеСписка = ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц); 
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // НачалоВыбораСпискаСтруктурныхЕдиниц

//Процедура обрабатывает начало выбора структурных единиц
//
Функция НачалоВыбораПодразделенийОрганизаций(ЭлементФормы, СписокОрганизаций, СписокПодразделений = Неопределено, СтандартнаяОбработка, 
	ПредставлениеСпискаОрганизаций, ПредставлениеСпискаПодразделений = Неопределено, ДеревоСтруктурныхЕдиниц = Неопределено, ИспользованиеСтруктурныхПодразделений = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;
	ФормаВыбораСтруктурнойЕдиницы = ПолучитьОбщуюФорму("ФормаВыбораСтруктурногоПодразделенияОтчеты", ЭлементФормы);
	ФормаВыбораСтруктурнойЕдиницы.ПодборВОтчет = Истина;
	
	Если ИспользованиеСтруктурныхПодразделений <> Неопределено Тогда 
		ФормаВыбораСтруктурнойЕдиницы.ИспользованиеСтруктурныхПодразделений = ИспользованиеСтруктурныхПодразделений;
	КонецЕсли;
	
	СписокСтруктурныхЕдиниц = Новый СписокЗначений;
	СписокСтруктурныхЕдиниц.ЗагрузитьЗначения(СписокОрганизаций.ВыгрузитьЗначения());
	
	Если СписокПодразделений <> Неопределено Тогда 
		Для Каждого СтрПодразделение Из СписокПодразделений Цикл 
			СписокСтруктурныхЕдиниц.Добавить(СтрПодразделение.Значение);
		КонецЦикла;		
	КонецЕсли;
	
	ФормаВыбораСтруктурнойЕдиницы.НачальныйСписокСтруктурныхЕдиниц = СписокСтруктурныхЕдиниц;
	
	Если ДеревоСтруктурныхЕдиниц <> Неопределено Тогда 
		Если ДеревоСтруктурныхЕдиниц.Строки.Количество() > 0 Тогда 
			ФормаВыбораСтруктурнойЕдиницы.ИспользоватьПереданноеДеревоСЕ = Истина;
			ФормаВыбораСтруктурнойЕдиницы.ВыбранныеСтруктурныеЕдиницы = ДеревоСтруктурныхЕдиниц;
		Иначе 
			ФормаВыбораСтруктурнойЕдиницы.ИспользоватьПереданноеДеревоСЕ = Ложь;
		КонецЕсли;		
	Иначе 
		ФормаВыбораСтруктурнойЕдиницы.ИспользоватьПереданноеДеревоСЕ = Ложь;
	КонецЕсли;
	
	
	РезультатВыбора = ФормаВыбораСтруктурнойЕдиницы.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		
		ДеревоСтруктурныхЕдиниц = РезультатВыбора;
		
		//Обработаем полученное дерево
		СписокОтмеченныхСтруктурныхЕдиниц = Новый СписокЗначений;
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Пометка", 1);
		СтруктураПоиска.Вставить("ЭтоГруппа", Ложь);
		
		НайденныеСтроки = ДеревоСтруктурныхЕдиниц.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
			СписокОтмеченныхСтруктурныхЕдиниц.Добавить(СтрокаДерева.СтруктурнаяЕдиница);
		КонецЦикла;
				
		СтруктураПоиска.Пометка = 2;
		
		НайденныеСтроки = ДеревоСтруктурныхЕдиниц.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
			СписокОтмеченныхСтруктурныхЕдиниц.Добавить(СтрокаДерева.СтруктурнаяЕдиница);
		КонецЦикла;			
		
		// перепишем список выбранных структурных единиц в переданных параметр
		МассивСтруктурныхЕдиниц = СписокОтмеченныхСтруктурныхЕдиниц.ВыгрузитьЗначения();
		
		МассивОрганизаций = Новый Массив;
		МассивПодразделений = Новый Массив;
		Для Каждого СтруктурнаяЕдиница Из МассивСтруктурныхЕдиниц Цикл 
			Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.Организации") Тогда 
				МассивОрганизаций.Добавить(СтруктурнаяЕдиница);
			Иначе 
				МассивПодразделений.Добавить(СтруктурнаяЕдиница);
			КонецЕсли;
		КонецЦикла;		
		
		СписокОрганизаций.ЗагрузитьЗначения(МассивОрганизаций);
		ПредставлениеСпискаОрганизаций = РаботаСДиалогами.ВыгрузитьСписокВСтроку(СписокОрганизаций); 
		
		Если СписокПодразделений <> Неопределено Тогда
			СписокПодразделений.ЗагрузитьЗначения(МассивПодразделений);
			Для Каждого ЗначениеСЗ Из СписокПодразделений Цикл
				Если НЕ ЗначениеЗаполнено(ЗначениеСЗ.Значение) Тогда 
					ЗначениеСЗ.Представление = "Головное подразделение";
				КонецЕсли;				
			КонецЦикла;
				
			ПредставлениеСпискаПодразделений = РаботаСДиалогами.ВыгрузитьСписокВСтроку(СписокПодразделений);
		КонецЕсли;
		
	КонецЕсли;

КонецФункции // НачалоВыбораСпискаСтруктурныхЕдиниц

// Процедура выполняет стандартные действия при начале выбора документа составного типа в формах документов.
//
// Параметры:
//  ДокументОбъект       - объект редактируемого документа;
//  ФормаДокумента       - форма редактируемого документа;
//  ЭлементФормы         - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка - булево, признак выполнения стандартной (системной) обработки события 
//                         начала выбора для данного элемента формы документа.
//  СтруктураОтбора      - структура, содержащая имена и значения отборов в форме выбора.
//  ИмяТабличнойЧасти    - имя табличной части
//
Процедура НачалоВыбораЗначенияДокументаСоставногоТипа(ДокументОбъект, ФормаДокумента, ЭлементФормы, 
					   СтандартнаяОбработка, СтруктураОтбора, ИмяТабличнойЧасти) Экспорт

	СтандартнаяОбработка = Ложь;

	// Заполним возможный список типов документов, которые могут быть в этом реквизите.
	СписокТипов = Новый СписокЗначений;

	Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда // Шапка документа
		МассивТипов = ДокументОбъект.Метаданные().Реквизиты[ЭлементФормы.Данные].Тип.Типы();
	Иначе // Табличная часть
		ИмяКолонки  = ФормаДокумента.ЭлементыФормы[ИмяТабличнойЧасти].ТекущаяКолонка.Имя;
		МассивТипов = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[ИмяКолонки].Тип.Типы();
	КонецЕсли;

	Если МассивТипов.Количество() = 1 Тогда
		ОбъектОписанияМетаданных = Метаданные.НайтиПоТипу(МассивТипов[0]);
		ВыбранныйТип = ОбъектОписанияМетаданных.Имя;
	Иначе

		Для каждого ЭлементМассива Из МассивТипов Цикл

			ПустоеЗначение = Новый(ЭлементМассива);
			ОбъектОписанияМетаданных = ПустоеЗначение.Метаданные();
			СписокТипов.Добавить(ОбъектОписанияМетаданных.Имя, ОбъектОписанияМетаданных.Представление());

		КонецЦикла; 

		ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов, ЭлементФормы);

		Если ВыбранныйЭлемент = Неопределено Тогда // Отказ от выбора
			Возврат;
		КонецЕсли;
		ВыбранныйТип = ВыбранныйЭлемент.Значение;
	КонецЕсли;

	Если ТипЗнч(ЭлементФормы.Значение) <> Тип("ДокументСсылка." + ВыбранныйТип) Тогда
		ЭлементФормы.Значение = Документы[ВыбранныйТип].ПустаяСсылка();
	КонецЕсли;

	Если СтруктураОтбора = Неопределено Тогда
		СтруктураОтбора = Новый Структура;
	КонецЕсли;

	// Форма выбора этого документа специфична. Отсутствует отбор.
	Если ВыбранныйТип = "ДокументРасчетовСКонтрагентом" Тогда

		Если НЕ СтруктураОтбора.Свойство("Дата") Тогда
			СтруктураОтбора.Вставить("Дата",               ДокументОбъект.Дата);
		КонецЕсли;
		Если НЕ СтруктураОтбора.Свойство("Организация") Тогда
			СтруктураОтбора.Вставить("Организация",        ДокументОбъект.Организация);
		КонецЕсли;
		Если НЕ СтруктураОтбора.Свойство("Контрагент") Тогда
			СтруктураОтбора.Вставить("Контрагент",         ДокументОбъект.Контрагент);
		КонецЕсли;
		Если НЕ СтруктураОтбора.Свойство("ДоговорКонтрагента") Тогда
			СтруктураОтбора.Вставить("ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
		КонецЕсли;
		Если НЕ СтруктураОтбора.Свойство("КонецПериода") Тогда
			СтруктураОтбора.Вставить("КонецПериода",       ДокументОбъект.Дата - 1);
		КонецЕсли;
		
		ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ДокументРасчетовСКонтрагентом");

		ВыборРасчетногоДокумента(СтруктураОтбора, ЭлементФормы, ОграничениеТипа);

		Возврат;

	КонецЕсли;

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ВыбранныйТип].ПолучитьФормуВыбора(,ЭлементФормы,);

	Попытка
		// Отфильруем список документов.
		МетаданныеЭлементаФормы = Метаданные.НайтиПоТипу(ТипЗнч(ЭлементФормы.Значение));
		ИмяОбъектаМетаданных = "";
		Если МетаданныеЭлементаФормы <> Неопределено Тогда
			ИмяОбъектаМетаданных = МетаданныеЭлементаФормы.Имя;
		КонецЕсли;
		
		Для каждого ЭлементСтруктуры Из СтруктураОтбора Цикл

			// Проверка возможности установки отбора
			Если ФормаВыбора.Отбор.Найти(ЭлементСтруктуры.Ключ) = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("СписокЗначений") Тогда
				ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.ВСписке;
			КонецЕсли;
			
			Если ЭлементСтруктуры.Ключ = "ДоговорКонтрагента" И ИмяОбъектаМетаданных = "ГТДИмпорт" Тогда
				
				ФормаВыбора.Отбор["ДокументыПоДоговоруКонтрагента"].Значение      = ЭлементСтруктуры.Значение;
				ФормаВыбора.Отбор["ДокументыПоДоговоруКонтрагента"].Использование = Истина;
			
			КонецЕсли;
			
			// Проверка возможности установки отбора
			Если ФормаВыбора.Отбор.Найти(ЭлементСтруктуры.Ключ) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
				
			ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
			ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;

		КонецЦикла;

		Если ЗначениеЗаполнено(ЭлементФормы.Значение) Тогда
			ФормаВыбора.ПараметрТекущаяСтрока = ЭлементФормы.Значение;
		КонецЕсли;

	Исключение
		// нет таких отборов как заявлено в структуре.
	КонецПопытки;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияДокументаСоставногоТипа()
                              
Процедура НачалоВыбораКонтактногоЛицаКонтрагента(Элемент,СтандартнаяОбработка, Контрагент) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаВыбора = Справочники.КонтактныеЛица.ПолучитьФормуВыбора(,Элемент);
	ФормаВыбора.РежимВыбора = Истина;
	ФормаВыбора.СправочникСписок.Отбор.ОбъектВладелец.Использование = Истина;
	ФормаВыбора.СправочникСписок.Отбор.ОбъектВладелец.Значение = Контрагент;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ОбъектВладелец.Доступность = Ложь;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

// Процедура открывает общую форму выбора Структурных подразделений и позволяет выбрать значение.
// заполняет реквизит Организация и СтруктурноеПодразделение из формы выбора структурного подразделения
//
Процедура НачалоВыбораСтруктурногоПодразделения(ФормаДокумента, СтандартнаяОбработка, Организация, СтруктурноеПодразделение, ФлагИзмененияОрганизации = Ложь, ДоступностьИзмененияОрганизации = Истина) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ИсходнаяОрганизация = Организация;
		
	ФормаВыбора = ПолучитьОбщуюФорму("ФормаВыбораСтруктурногоПодразделения"); //Общая форма
	ФормаВыбора.Организация 			= Организация;
	ФормаВыбора.АктивноеПодразделение 	= СтруктурноеПодразделение;
	ФормаВыбора.ЭлементыФормы.Организация.Доступность = ДоступностьИзмененияОрганизации;
	                                                                                  
	СтруктураРезультата = ФормаВыбора.ОткрытьМодально();

	Если ТипЗнч(СтруктураРезультата) = Тип("Структура") Тогда
		Организация				 = СтруктураРезультата.Организация;
		СтруктурноеПодразделение = СтруктураРезультата.Подразделение;
		
		// если ДоступностьИзмененияОрганизации = Ложь тогда нет необходимости дальнейшего действия
		Если ДоступностьИзмененияОрганизации Тогда 
			ФормаДокумента.СтруктурноеПодразделениеОрганизация = СтруктураРезультата.Подразделение;  
			УстановитьОрганизациюИСтруктурноеПодразделение(Организация, ФормаДокумента.СтруктурноеПодразделениеОрганизация);
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ИсходнаяОрганизация <> Организация Тогда
	 	ФлагИзмененияОрганизации = Истина;
	Иначе
		ФлагИзмененияОрганизации = Ложь;
	КонецЕсли;
	
КонецПроцедуры // НачалоВыбораСтруктурногоПодразделения

// Процедура открывает форму выбора подразделения, устанавливает значение структурного подразделения
//
Процедура НачалоВыбораПодразделения(Организация, СтруктурноеПодразделение, Элемент, СтандартнаяОбработка) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.ПодразделенияОрганизаций.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.ПараметрОтборПоВладельцу = Организация;
	ФормаВыбора.СтруктурноеПодразделение = СтруктурноеПодразделение;
   	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Ссылка.Доступность = Истина;
    ФормаВыбора.НачальноеЗначениеВыбора  = ?(Элемент.Значение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), СтруктурноеПодразделение, Элемент.Значение);
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ИЗМЕНЕНИЙ РЕКВИЗИТОВ В ФОРМЕ

// Процедура выполняет общие действия при изменнении даты документа
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ФлагИзмененияКурса             - валюта регламентированного учета
//
Процедура ПриИзмененииЗначенияДатыДокумента(ДокументОбъект, ВалютаРегламентированногоУчета, ФлагИзмененияКурса = Неопределено, УчетнаяПолитикаПоНалоговомуУчету = Неопределено, ФлагИзмененияУчетаНДС = Истина) Экспорт

	МетаданныеДокумента            	= ДокументОбъект.Метаданные();
	ЕстьВалютаДокумента           	= ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента",    МетаданныеДокумента);
	ЕстьДоговорКонтрагента         	= ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента);
	
	ЕстьУчетНДС = Ложь;
	Если ФлагИзмененияУчетаНДС Тогда
		ЕстьУчетНДС						= ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента);
	КонецЕсли;
	
	ПроверкаПоВалютеВзаиморасчетов 	= Ложь;
	ФлагИзмененияКурса             	= Ложь;
    Если ЕстьУчетНДС И Метаданные.РегистрыСведений.Найти("УчетнаяПолитикаНалоговыйУчет") <> Неопределено Тогда
		ДокументОбъект.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ДокументОбъект.Организация, ДокументОбъект.Дата, УчетнаяПолитикаПоНалоговомуУчету);		
		Если (НЕ ДокументОбъект.УчитыватьНДС) и ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) Тогда
			ДокументОбъект.СуммаВключаетНДС = Ложь;
		КонецЕсли;			
	КонецЕсли; 
	         		
	// В некоторых документах нет валюты документа и договора.
	Если ЕстьВалютаДокумента Тогда
		Если ЕстьДоговорКонтрагента Тогда
			Договор = ДокументОбъект.ДоговорКонтрагента;

			Если ЗначениеЗаполнено(Договор) Тогда
				Валюта = Договор.ВалютаВзаиморасчетов;
				ПроверкаПоВалютеВзаиморасчетов = Истина;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Валюта = ДокументОбъект.ВалютаДокумента;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	СтруктураНовогоКурсаВалюты  = ОбщегоНазначения.ПолучитьКурсВалюты(Валюта, ДокументОбъект.Дата);
	НовыйКурс                   = СтруктураНовогоКурсаВалюты.Курс;
	НоваяКратность              = СтруктураНовогоКурсаВалюты.Кратность;

	ЕстьКурсДокумента           = ОбщегоНазначения.ЕстьРеквизитДокумента("КурсДокумента",           МетаданныеДокумента);
	ЕстьКратностьДокумента      = ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьДокумента",      МетаданныеДокумента);
	ЕстьКурсВзаиморасчетов      = ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов",      МетаданныеДокумента);
	ЕстьКратностьВзаиморасчетов = ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента);

	// В некоторых документах курс и кратность документа отсутствуют
	Если ПроверкаПоВалютеВзаиморасчетов И ЕстьКурсВзаиморасчетов И ЕстьКратностьВзаиморасчетов Тогда
		СтарыйКурс      = ДокументОбъект.КурсВзаиморасчетов;
		СтараяКратность = ДокументОбъект.КратностьВзаиморасчетов;
	ИначеЕсли НЕ ПроверкаПоВалютеВзаиморасчетов И ЕстьКурсДокумента И ЕстьКратностьДокумента Тогда
		СтарыйКурс      = ДокументОбъект.КурсДокумента;
		СтараяКратность = ДокументОбъект.КратностьДокумента;
	Иначе
		Возврат;
	КонецЕсли;

	// Если курс и кратность неизменилась, то выход.
	Если НовыйКурс = СтарыйКурс И НоваяКратность = СтараяКратность Тогда
		Возврат;
	КонецЕсли;

	ТекстВалюты     = ?(ПроверкаПоВалютеВзаиморасчетов, "взаиморасчетов ", "документа ");
	ТекстНовыйКурс  = СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, НовыйКурс,  НоваяКратность,  ВалютаРегламентированногоУчета, Истина));
	ТекстСтарыйКурс = СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, СтарыйКурс, СтараяКратность, ВалютаРегламентированногоУчета, Истина));
	ТекстВопроса    = "На дату документа у валюты "  + ТекстВалюты+ ТекстСтарыйКурс + " был задан другой курс."
					+ Символы.ПС+ "Установить курс " + ТекстВалюты+ ТекстНовыйКурс + " в соответствии с курсом валюты?";
	Ответ           = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если ЕстьКурсДокумента Тогда
			ДокументОбъект.КурсДокумента           = НовыйКурс;
		КонецЕсли;
		
		Если ЕстьКратностьДокумента Тогда
			ДокументОбъект.КратностьДокумента      = НоваяКратность;
		КонецЕсли;
		
		Если ЕстьКурсВзаиморасчетов Тогда
			ДокументОбъект.КурсВзаиморасчетов      = НовыйКурс;
		КонецЕсли;
		
		Если ЕстьКратностьВзаиморасчетов Тогда
			ДокументОбъект.КратностьВзаиморасчетов = НоваяКратность;
		КонецЕсли;

		ФлагИзмененияКурса = Истина;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияДатыДокумента()

// Процедура вызывается из форм платежных документов при смене кассы или 
// банковского счета. Меняет валюту, курс документа и предлагает пересчитать сумму.
//
// Параметры:
//  ВалютаДокумента  - ссылка на справочник, валюта документа до изменения;
//  КурсДокумента    - число, курс документа до изменения; 
//  ДатаДокумента    - дата, дата на которую будем получать новый курс; 
//  СуммаДокумента   - число, сумма документа; 
//  ВалютаДенежныхСредств - ссылка на справочник, валюта выбранного счета или кассы 
//                     (новая валюта документа);
//
Процедура ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, ДатаДокумента, 
	                                        СуммаДокумента, ВалютаДенежныхСредств,ПересчитыватьСумму=Истина) Экспорт

	// Поменяем валюту до вопроса о пересчете, чтобы было видно, что она действительно поменялась.
	СтараяВалюта    = ВалютаДокумента; 
	СатрыйКурс      = КурсДокумента;
	СтараяКратность = КратностьДокумента;
	ВалютаДокумента = ВалютаДенежныхСредств; // должны строго совпадать

	СтруктураКурсаВалютаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;

	Если ВалютаДокумента <>  СтараяВалюта
	   И СуммаДокумента > 0 Тогда

		// Надо предложить пересчитать сумму.
		Ответ = Вопрос("Изменилась валюта документа. Пересчитать сумму документа?", 
		               РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СуммаДокумента = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтараяВалюта, ВалютаДокумента, СатрыйКурс,
									    КурсДокумента,СтараяКратность,КратностьДокумента);
		Иначе
			ПересчитыватьСумму=Ложь;								
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияКассыБанковскогоСчета()


// Процедура - обработчик события ПриИзменении поля ввода Организация
//
// Параметры:
//  ДокументОбъект - объект документ в форме которого произошло событие.
//  ТекПользователь - текущий пользователь, настройки которого используются
//                 по умолчанию.
//	УчетнаяПолитикаПоНалоговомуУчету - структура с учетной политикой по налоговому учету (возвращаемый параметр)
//
Процедура ПриИзмененииЗначенияОрганизации(ДокументОбъект, ТекПользователь, УчетнаяПолитикаПоНалоговомуУчету = Неопределено, СтруктураПараметровДляПолученияДоговора= Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
		
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда  
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокумента)
		   И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
			
			ПодразделениеПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеПодразделениеОрганизации");
			
			// Если ПодразделениеОрганизации не заполнено.
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.ПодразделениеОрганизации) Тогда
				
				// Если ПодразделениеПоУмолчанию сооответствует выбранной организации, подставляем его.
				Если ПодразделениеПоУмолчанию.Владелец = ДокументОбъект.Организация Тогда
					ДокументОбъект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
				КонецЕсли;
				
			Иначе // Если ПодразделениеОрганизации заполнено.
				
				// Если ПодразделениеОрганизации не соответствует выбранной организации.
				Если НЕ ДокументОбъект.ПодразделениеОрганизации.Владелец = ДокументОбъект.Организация Тогда
					
					// Если ПодразделениеПоУмолчанию сооответствует выбранной организации, подставляем его.
					Если ПодразделениеПоУмолчанию.Владелец = ДокументОбъект.Организация Тогда
						ДокументОбъект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
					Иначе // Выбрана не основная организация. ПодразделениеОрганизации нужно очистить.
						ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
						ОбщегоНазначения.СообщитьОбОшибке("Значение в поле ""Подразделение"" не соответствует выбранной организации и было очищено.");
					КонецЕсли;   					
				КонецЕсли;       				
			КонецЕсли;           			
		КонецЕсли;               

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
				Если ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента)
				   И ДокументОбъект.ДоговорКонтрагента.Организация = ДокументОбъект.Организация Тогда
			    Иначе
				    Если ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.КорректировкаДолга") Тогда
						ДокументОбъект.ДоговорКонтрагента = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(ДокументОбъект.Организация, ДокументОбъект.Контрагент, СтруктураПараметровДляПолученияДоговора);
					Иначе
						ДокументОбъект.ДоговорКонтрагента = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(ДокументОбъект.Организация, ДокументОбъект.КонтрагентКредитор, СтруктураПараметровДляПолученияДоговора);
					КонецЕсли;
				КонецЕсли;
			Иначе
				ДокументОбъект.ДоговорКонтрагента = Неопределено;
			КонецЕсли;
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("БанковскийСчетОрганизации", МетаданныеДокумента) Тогда
			ДокументОбъект.БанковскийСчетОрганизации = УправлениеДенежнымиСредствами.ПолучитьОсновнойБанковскийСчетДокумента(ДокументОбъект, МетаданныеДокумента);			
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Касса", МетаданныеДокумента) Тогда						
			ДокументОбъект.Касса = УправлениеДенежнымиСредствами.ПолучитьОсновнуюКассуДокумента(ДокументОбъект, МетаданныеДокумента);				
		КонецЕсли;
		
		// Устанавливаем признак учета НДС
		// в зависимости от того, является ли организация плательщиком НДС
		УчетнаяПолитикаПоНалоговомуУчету = Неопределено;
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) Тогда			
			ДокументОбъект.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ДокументОбъект.Организация, ДокументОбъект.Дата, УчетнаяПолитикаПоНалоговомуУчету);	
			
			Если НЕ ДокументОбъект.УчитыватьНДС и ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) Тогда
				ДокументОбъект.СуммаВключаетНДС = Ложь;
			КонецЕсли;			
		КонецЕсли;			

		// в бухгалтерии цены задаются в разрезе организаций 
		Если Метаданные.РегистрыСведений.Найти("ЦеныНоменклатуры") <> Неопределено
				И Метаданные.РегистрыСведений.ЦеныНоменклатуры.Измерения.Найти("Организация") <> Неопределено Тогда

			СписокТЧ = Новый СписокЗначений;
			Для Каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
				
				Если (ТЧ.Реквизиты.Найти("Цена") <> Неопределено) И (ТЧ.Реквизиты.Найти("Номенклатура") <> Неопределено) Тогда
					СписокТЧ.Добавить(ТЧ.Имя);
				КонецЕсли;
				
			КонецЦикла;
			
			Если СписокТЧ.Количество() > 0 Тогда
				
				Если Вопрос("Перезаполнить цены в табличных частях документа?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
					
					ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
					
					Для Каждого ЭлементСписка из СписокТЧ Цикл
						
						ТЧ = ДокументОбъект[ЭлементСписка.Значение];
						Для Каждого СтрокаТабличнойЧасти Из ТЧ Цикл
							
							ВалютаДокумента = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента), ДокументОбъект.ВалютаДокумента, ВалютаРегламентированногоУчета);  
							КурсДок         = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента), ОбщегоНазначения.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), 1);
							КратностьДок    = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента), ОбщегоНазначения.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), 1);
							
							ТипЦен = "";
							Если МетаданныеДокумента.Реквизиты.Найти("ТипЦен") <> Неопределено Тогда
								ТипЦен = ДокументОбъект.ТипЦен;
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ТипЦен) Тогда 
								// из регистра
								Цена = УправлениеЦенообразованием.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, ТипЦен, ДокументОбъект.Дата,
																ВалютаДокумента, КурсДок, КратностьДок, ДокументОбъект.Организация);

								// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
								Если НЕ ЗначениеЗаполнено(Цена) Тогда
									СтрокаТабличнойЧасти.Цена = 0;
								Иначе
									СтрокаТабличнойЧасти.Цена = ОбработкаТабличныхЧастей.ПересчитатьЦенуПриИзмененииФлаговНалогов(	Цена, 
																											Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
																											ТипЦен.ЦенаВключаетНДС,
																											ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) 
																											И ДокументОбъект.УчитыватьНДС, 
																											ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) 
																											И ДокументОбъект.СуммаВключаетНДС, 
																											?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ЭлементСписка.Значение),
																											УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
								КонецЕсли;
							
							Иначе
								
								СтрокаТабличнойЧасти.Цена = 0;
								
							КонецЕсли;
							
							ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
							ОбработкаТабличныхЧастей.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
							ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияОрганизации()

// Процедура - обработчик события ПриИзменении поля ввода СтруктурноеПодразделение
//
Процедура ПриИзмененииЗначенияСтруктурногоПодразделения(ТекПользователь, Организация, СтруктурноеПодразделение, ФлагИзмененияОрганизации = Ложь) Экспорт
	
	ИсходнаяОрганизация = Организация;
	
	УстановитьОрганизациюИСтруктурноеПодразделение(Организация, СтруктурноеПодразделение);	
	
	Если ИсходнаяОрганизация <> Организация Тогда
	 	ФлагИзмененияОрганизации = Истина;
	Иначе
		ФлагИзмененияОрганизации = Ложь;		
	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияСтруктурногоПодразделения

	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОФОРМЛЕНИЯ ФОРМЫ

// Формирует и устанавливает текст заголовка формы документа
//
// Параметры:
//  СтрокаВидаОперации - строка вида операции документа, 
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура УстановитьЗаголовокФормыДокумента(СтрокаВидаОперации = "", ДокументОбъект, ФормаДокумента) Экспорт

	ФормаДокумента.АвтоЗаголовок = Ложь; // заголовок будем писать сами
	
	Если ПустаяСтрока(СтрокаВидаОперации) Тогда
		Заголовок = ДокументОбъект.Метаданные().Синоним + ": ";
	Иначе
		Заголовок = ДокументОбъект.Метаданные().Синоним + ": " + СтрокаВидаОперации + ". ";
	КонецЕсли;
		
	Если ДокументОбъект.ЭтоНовый() Тогда  
		Заголовок = Заголовок + "Новый";
	Иначе
		Если ДокументОбъект.Проведен Тогда
			Заголовок = Заголовок + "Проведен";
		ИначеЕсли ДокументОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Заголовок = Заголовок + "Не проведен";
		Иначе
			Заголовок = Заголовок + "Записан";
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("РучнаяКорректировка", ДокументОбъект.Метаданные()) Тогда
			Если ДокументОбъект.РучнаяКорректировка Тогда
				Заголовок = Заголовок + ": (Ручная корректировка)";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ФормаДокумента.Заголовок = Заголовок;

КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Формирует и устанавливает текст заголовка для элемента управления "УчитыватьКПН"
//
// Параметры:
//  Организация - выбранная организация в документе, 
//  ЭлементУправления     - элемент управления "УчитыватьКПН". 
//
Процедура УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Организация, ЭлементУправления) Экспорт
	
	Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Заголовок = "Учитывать ИПН";
	Иначе
		Заголовок = "Учет КПН";
	КонецЕсли;   	
	
	ЭлементУправления.Заголовок = Заголовок;  
КонецПроцедуры

// Делает страницу панели с переданным именем видимой и текущей, а остальные - невидимыми
//  Параметры:
//	ИмяСтраницы  - страница, которую необходимо сделать текущей
//  Панель - имя панели;
//
Процедура УстановитьТекущуюСтраницу(ИменаСтраниц, Панель) Экспорт
	
	СписокСтраниц = Новый Структура(ИменаСтраниц);
	ИмяСтраницы = "";
	Для Каждого Страница Из Панель.Страницы Цикл
		Если НЕ СписокСтраниц.Свойство(Страница.Имя) Тогда
			Страница.Видимость = Ложь;
		Иначе
			Страница.Видимость = Истина;
			Если НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
				ИмяСтраницы = Страница.Имя;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
	
	Если СписокСтраниц.Количество()> 1 Тогда		
		Панель.ОтображениеЗакладок = ОтображениеЗакладок.Сверху;
	Иначе
		Панель.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
	КонецЕсли;
	
	Панель.ТекущаяСтраница = Панель.Страницы[ИмяСтраницы];
	
КонецПроцедуры // УстановитьТекущуюСтраницу()

// Процедура добавляет информацию о коде и/или артикуле в ячейки табличного поля
// при выводе очередной строки
//
// Параметры:
//  КолонкиТабПоля - коллекция колонок табличного поля
//  ЯчейкиСтрокиТабПоля - коллекция ячеек строки табличного поля
//  Номенклатура - СправочникСсылка.Номенклатура, товар, по которому надо вывести код и/или артикул
//
Процедура ПоказатьКодАртикул(КолонкиТабПоля, ЯчейкиСтрокиТабПоля, Номенклатура) Экспорт

	Если КолонкиТабПоля.Код.Видимость Тогда
		Если Номенклатура <> Неопределено Тогда
			ЯчейкиСтрокиТабПоля.Код.УстановитьТекст(Номенклатура.Код);
		Иначе
			ЯчейкиСтрокиТабПоля.Код.УстановитьТекст("");
		КонецЕсли;
	КонецЕсли;

	Если КолонкиТабПоля.Артикул.Видимость Тогда
		Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			ЯчейкиСтрокиТабПоля.Артикул.УстановитьТекст(Номенклатура.Артикул);
		Иначе
			ЯчейкиСтрокиТабПоля.Артикул.УстановитьТекст("");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПоказатьКодАртикул()

// Функция преобразовывает дату в представление периода
//
// Параметры:
//   ПериодРегистрации - Дата периода
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации) Экспорт

	Возврат Формат(ПериодРегистрации, "ДФ='MMMM yyyy'");

КонецФункции

// Процедура обрабатывает событие регулирования в поле периода регистрации
//
Процедура РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если Направление = 1 Тогда
		ПериодРегистрации = КонецМесяца(ПериодРегистрации) + 1;
	ИначеЕсли Направление = -1 Тогда
		ПериодРегистрации = НачалоМесяца(ПериодРегистрации - 1);
	КонецЕсли;

	ПредставлениеПериодаРегистрации = ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);

КонецПроцедуры

// Процедура обрабатывает событие начала выбора из списка в поле периода регистрации
// Процедура исполняется только на клиенте
//
Процедура НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, НачальноеЗначение = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = ПериодРегистрации;
	КонецЕсли; 
	
	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	НачалоМесяцаЗаполнения = НачалоТекущегоГода;
	ЭлементПоУмолчанию = Неопределено;
	Для а = 1 По 12 Цикл
		ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоМесяцаЗаполнения, ДатаКакМесяцПредставление(НачалоМесяцаЗаполнения));
		Если НачальноеЗначение = НачалоМесяцаЗаполнения Тогда
			ЭлементПоУмолчанию = ДобавленныйЭлемент;
		КонецЕсли; 
		НачалоМесяцаЗаполнения = ДобавитьМесяц(НачалоМесяцаЗаполнения, 1);
	КонецЦикла;
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));
	
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент, ЭлементПоУмолчанию);
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(НачальноеЗначение) Тогда
		НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, ВыбранныйЭлемент.Значение);
		Возврат;
	КонецЕсли;
	
	ПериодРегистрации = ВыбранныйЭлемент.Значение;
	Элемент.Значение  = ДатаКакМесяцПредставление(ПериодРегистрации);
	
КонецПроцедуры // НачалоВыбораИзСпискаПредставленияПериодаРегистрации()

// Отображает статус состояние документе в НУ в ФормеСписка и в форме выбора
// 
Процедура ПринятиеКУчетуНУСписокПриПолученииДанных(Список, ОформленияСтрок, ЕстьВидУчетаНУ = Истина)  Экспорт
	
	Список.Колонки.ПринятиеКУчетуНУ.КартинкиСтрок = БиблиотекаКартинок.СостояниеПринятиеКУчетуНУВДокументах;
	
	Для Каждого Строка Из ОформленияСтрок Цикл
		Если Строка.ДанныеСтроки.УчитыватьКПН  Тогда
			ОтображатьКартинку = Истина;
			//проверяем есть ли реквизит "Вид учета НУ", если нет то
			//отображаем как 2 галочки "УчитыватьКПН" - документ как "Движение НЗП" 			
			Если НЕ ЕстьВидУчетаНУ Тогда
				Строка.Ячейки.ПринятиеКУчетуНУ.ИндексКартинки = 0;
			Иначе
				
				Если  Строка.ДанныеСтроки.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ Тогда
					Строка.Ячейки.ПринятиеКУчетуНУ.ИндексКартинки = 0;
				Иначе                                             				
					Строка.Ячейки.ПринятиеКУчетуНУ.ИндексКартинки = 1;
				КонецЕсли;	
			КонецЕсли; 			
		Иначе
			ОтображатьКартинку = Ложь;			
		КонецЕсли;
		Строка.Ячейки.ПринятиеКУчетуНУ.ОтображатьКартинку = ОтображатьКартинку;				
	КонецЦикла
	
	
КонецПроцедуры // РучнаяКорректировкаСписокПриПолученииДанных()

// Заполняет значение реквизита формы СтруктурноеПодразделение, управляет видимостью панели ПанельСтруктурногоПодразделения 
//
// Параметры:
//   Организация - реквизит документа Организация
//	 СтруктурноеПодразделениеОрганизация - реквизит документа СтруктурноеПодразделение
//   ФормаДокумента - форма документа 
//	 ЭтоНовый - определяет, записан ли элемент в базу данных
//
Процедура УстановитьВидимостьСтруктурногоПодразделения(Организация, СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ОтображатьСтруктурныеПодразделения, ПанельСтруктурногоПодразделения, ЭтоНовый) Экспорт

	Если  ОтображатьСтруктурныеПодразделения Тогда
		Если ЭтоНовый И НЕ ЗначениеЗаполнено(СтруктурноеПодразделение)Тогда
			СтруктурноеПодразделениеОрганизация = Организация;
		Иначе
			СтруктурноеПодразделениеОрганизация = ?(ЗначениеЗаполнено(СтруктурноеПодразделение), СтруктурноеПодразделение, Организация);
		КонецЕсли;	
		ПанельСтруктурногоПодразделения.ТекущаяСтраница = ПанельСтруктурногоПодразделения.Страницы.СтруктурнаяЕдиница;
	Иначе 
		Если НЕ ЭтоНовый И ЗначениеЗаполнено(СтруктурноеПодразделение)Тогда
			СтруктурноеПодразделениеОрганизация = ?(ЗначениеЗаполнено(СтруктурноеПодразделение), СтруктурноеПодразделение, Организация);
			ПанельСтруктурногоПодразделения.ТекущаяСтраница = ПанельСтруктурногоПодразделения.Страницы.СтруктурнаяЕдиница;
    	Иначе
			ПанельСтруктурногоПодразделения.ТекущаяСтраница = ПанельСтруктурногоПодразделения.Страницы.Организация;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьСтруктурногоПодразделения()


// Устанавливает видимость колонки "СтруктурноеПодразделение" в формах списка и выбора
// в зависимости от поддержки работы со стркутурными подразделениями
Процедура ВидимостьКолонкиСтруктурногоПодразделения(ДокументСписок, ИмяКолонки = "СтруктурноеПодразделение") Экспорт
	
	Если ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений() Тогда
		//Массив может передаваться, когда в документе 2 реквизита "Структурное подразделение"
		Если ТипЗнч(ИмяКолонки) = Тип("Массив") Тогда
			Для Каждого Элемент Из ИмяКолонки Цикл
				Если ДокументСписок.Колонки.Найти(Элемент) <> Неопределено Тогда				
					ДокументСписок.Колонки[Элемент].Видимость = Истина;
				КонецЕсли;			
			КонецЦикла;
		Иначе
			Если ДокументСписок.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда				
				ДокументСписок.Колонки[ИмяКолонки].Видимость = Истина;
			КонецЕсли;					
		КонецЕсли;	
	КонецЕсли; 	
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ИНФОРМАЦИИ В ФОРМЕ

//  Процедура определяет ситуацию, когда при изменении своей даты документ 
//  оказывается в другом периоде нумерации документов, и в это м случае
//  присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументОбъект         - контекст документа,из которого вызвана процедура 
//  НачальнаяДатаДокумента - начальная дата документа 
// 
Процедура ПроверитьНомерДокумента(ДокументОбъект, НачальнаяДатаДокумента) Экспорт   // в разработке

	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокументОбъект.Метаданные().ПериодичностьНомера;

	//В зависимости от установленной периодичности смены номеров,
	//определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - ДокументОбъект.Дата;

	Иначе
		Возврат;

	КонецЕсли;

	Если РазностьДат <> 0 Тогда
		ДокументОбъект.Номер = "";
	КонецЕсли;

КонецПроцедуры // ПроверитьНомерДокумента()

// Проверяет модифицированность документа перед печатью, и если необходимо 
// записывает его
// 
// Параметры
//  Документ - (ДокументОбъект.*) - проверяемый документ
//
Функция ПроверитьМодифицированность(Документ) Экспорт

	Результат = Ложь;

	Если Документ.Модифицированность() Тогда

		Проведен = ?(Документ.Проведен, " и провести","");

		Ответ = Вопрос("Документ изменен. Для печати его необходимо записать"+ Проведен +".
		               |Записать" + Проведен + "?",
		               РежимДиалогаВопрос.ОКОтмена, , 
		               КодВозвратаДиалога.Отмена,
		               "Документ изменен");

		Если Ответ = КодВозвратаДиалога.ОК Тогда

			Если Документ.Проведен Тогда

				ДатаДока = НачалоДня(Документ.Дата);
				ДатаДня  = НачалоДня(ТекущаяДата());

				Попытка
					
					Если ДатаДока = ДатаДня и Документ.Метаданные().ОперативноеПроведение = Метаданные.СвойстваОбъектов.ОперативноеПроведение.Разрешить Тогда
						Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
					Иначе
						Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					КонецЕсли;

				Исключение

					Предупреждение("Операция не выполнена!");
					Возврат Результат = Истина;

				КонецПопытки;

			Иначе
				Документ.Записать();
			КонецЕсли;

			Результат = Истина;

		КонецЕсли;

	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированность()

// Проверяет модифицированность документа / справочника перед печатью, и если необходимо 
// записывает его
// 
// Параметры
//  Объект - (ДокументОбъект.*, СправочникОбъект.*) - проверяемый документ / справочник
//  Форма    - форма проверяемого документа / справочника
//
Функция ПроверитьМодифицированностьВФорме(Объект, Форма, СтрокаДействия = "печати") Экспорт

	Результат = Ложь;

	Если Форма.Модифицированность Тогда

		Проведен    = Метаданные.Документы.Содержит(Объект.Метаданные()) И Объект.Проведен;
		СтрПроведен = ?(Проведен, " и провести","");
		
		Ответ = Вопрос("Объект изменен. Для " + СтрокаДействия + " его необходимо записать "+ СтрПроведен +".
		               |Записать" + СтрПроведен + "?",
		               РежимДиалогаВопрос.ОКОтмена, , 
		               КодВозвратаДиалога.Отмена,
		               "Объект изменен");

		Если Ответ = КодВозвратаДиалога.ОК Тогда

			Попытка
				Если Проведен Тогда
					
					ДатаДока = НачалоДня(Объект.Дата);
					ДатаДня  = НачалоДня(ТекущаяДата());
                    					
					Если ДатаДока = ДатаДня И Объект.Метаданные().ОперативноеПроведение = Метаданные.СвойстваОбъектов.ОперативноеПроведение.Разрешить Тогда
						Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
					Иначе
						Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					КонецЕсли;					
					Результат = Истина;
				Иначе
					Результат = Форма.ЗаписатьВФорме();
				КонецЕсли;
			Исключение
				Предупреждение("Операция не выполнена!");
				Возврат Результат = Истина;
			КонецПопытки;

		КонецЕсли;

	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированностьВФорме()

// Предназначен для заполнения аналитики "Подразделения" на счетах доходов/затрат
//
// Параметры:
//  СтрокаТЧ - строка табличной части, где нужно заполнять аналитику.
//  Счет - ПланыСчетовСсылка, счет, аналитику которого нужно заполнить.
//  ИмяАналитикиТабличнойЧасти - Строка, имя аналитики счета.
//  Подразделение - СправочникССылка.ПодразделенияОрганизации, значение, которым заполняется субконто "Подразделение".
//
Процедура ЗаполнитьАналитикуПодразделениеСчетовДоходовЗатрат(СтрокаТЧ, Счет, ИмяАналитики, ПодразделениеОрганизации, СписокПодразделений = Неопределено) Экспорт
	
	ПроверятьНеобходимостьИзменения = Ложь;
	Если СписокПодразделений <> Неопределено Тогда
		ПроверятьНеобходимостьИзменения = Истина;
	КонецЕсли;
		
	Для Счетчик = 1 По 3 Цикл
		Если Счет.ВидыСубконто.Количество() >= Счетчик Тогда
			Если Счет.ВидыСубконто[Счетчик - 1].ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда
				Если ПроверятьНеобходимостьИзменения Тогда
					Если СписокПодразделений.НайтиПоЗначению(СтрокаТЧ[ИмяАналитики + Счетчик]) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				СтрокаТЧ[ИмяАналитики + Счетчик] = ПодразделениеОрганизации;
			КонецЕсли;
		Иначе
			СтрокаТЧ[ИмяАналитики + Счетчик] = Неопределено;	
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьАналитикуПодразделениеСчетовДоходовЗатрат()

// Процедура проверяет вхождение Подразделения в иерархию Структурного подразделения шапки документы
//
Процедура ПроверитьСоответствиеПодразделения(Организация, СтруктурноеПодразделение, Подразделение = Неопределено, 
											СписокТабличныхЧастей = Неопределено, СтруктураРеквизитовШапки = Неопределено) Экспорт 
											
	Если (Не ЗначениеЗаполнено(СтруктурноеПодразделение) И Не ЗначениеЗаполнено(Организация)) 
		Или (Подразделение <> Неопределено И Не ЗначениеЗаполнено(Подразделение)) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПодразделенияОрганизаций.Ссылка
	               |ИЗ
	               |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	               |ГДЕ
	               |	ПодразделенияОрганизаций.Владелец = &Организация
	               |	И ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ(&СтруктурноеПодразделение)";
				   
	СписокПодразделений = Новый СписокЗначений;
	СписокПодразделений.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));			   
	
	ПустаяСсылкаПодразделения = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
	Если Подразделение <> Неопределено Тогда
		Если СписокПодразделений.НайтиПоЗначению(Подразделение) = Неопределено Тогда
			ТекстВопроса = "Значение в поле ""Подразделение"" не соответствует выбранному структурному подразделению." + Символы.ПС 
				+ "Очистить значение?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Подразделение = ПустаяСсылкаПодразделения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовШапки <> Неопределено Тогда
		Объект = СтруктураРеквизитовШапки.Объект;
		АналитикаСчетовШапки = СтруктураРеквизитовШапки.СписокАналитикиСчетовШапки;
		Если СтруктураРеквизитовШапки.Свойство("ПриставкаИмениСчета") Тогда
			Приставка = СтруктураРеквизитовШапки.ПриставкаИмениСчета;
		Иначе 
			Приставка = "";
		КонецЕсли;
		
		Для Каждого ИмяАналитикиСчета Из АналитикаСчетовШапки Цикл
			Счет = Объект[Приставка + "Счет" + ИмяАналитикиСчета];
			Для Счетчик = 1 По 3 Цикл
				Если Счет.ВидыСубконто.Количество() >= Счетчик Тогда
					Если Счет.ВидыСубконто[Счетчик - 1].ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда
						Если СписокПодразделений.НайтиПоЗначению(Объект[Приставка + "Субконто" + ИмяАналитикиСчета + Счетчик]) <> Неопределено Тогда
							Продолжить;
						КонецЕсли;
						Объект[Приставка + "Субконто" + ИмяАналитикиСчета + Счетчик] = ПустаяСсылкаПодразделения;
					КонецЕсли;
				Иначе
					Объект[Приставка + "Субконто" + ИмяАналитикиСчета + Счетчик] = Неопределено;	
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если СписокТабличныхЧастей <> Неопределено Тогда
		
		Для Каждого Реквизиты Из СписокТабличныхЧастей Цикл
			ТабличнаяЧасть = Реквизиты.Значение.ТабличнаяЧасть;
			
			СписокРеквизитовПодразделения = Новый СписокЗначений;
			Реквизиты.Значение.Свойство("СписокРеквизитовПодразделения", СписокРеквизитовПодразделения);
			
			АналитикаСчетовТабличнойЧасти = Новый СписокЗначений;
			Реквизиты.Значение.Свойство("СписокАналитикиСчетов", АналитикаСчетовТабличнойЧасти);
			
			Если Реквизиты.Значение.Свойство("ПриставкаИмениСчета") Тогда
				Приставка = Реквизиты.Значение.ПриставкаИмениСчета;
			Иначе 
				Приставка = "";
			КонецЕсли;
			
			Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
				
				Если СписокРеквизитовПодразделения <> Неопределено Тогда
					Для Каждого РеквизитПодразделения Из СписокРеквизитовПодразделения Цикл
						Если СписокПодразделений.НайтиПоЗначению(СтрокаТЧ[РеквизитПодразделения.Значение]) = Неопределено Тогда
							СтрокаТЧ[РеквизитПодразделения.Значение] = ПустаяСсылкаПодразделения;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если АналитикаСчетовТабличнойЧасти <> Неопределено Тогда
					Для Каждого ИмяАналитикиТабличнойЧасти Из АналитикаСчетовТабличнойЧасти Цикл 
						ЗаполнитьАналитикуПодразделениеСчетовДоходовЗатрат(СтрокаТЧ, СтрокаТЧ[Приставка + "Счет" + ИмяАналитикиТабличнойЧасти.Значение], 
																			Приставка + "Субконто" + ИмяАналитикиТабличнойЧасти.Значение, ПустаяСсылкаПодразделения, СписокПодразделений);
					КонецЦикла;		
				КонецЕсли;
				
			КонецЦикла;        
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция спрашивает пользователя записать ли объект, или нет, если он новый
//
// Параметры
//  ФормаОбъекта - Форма объекта, из которой пытаются произвести действия
//
// Возвращаемое значение:
//   Булево - Объект записан или нет
//
Функция ЗаписатьНовыйОбъектВФорме(ФормаОбъекта) Экспорт

	Если ФормаОбъекта.ЭтоНовый() Тогда
		
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ФормаОбъекта.ЭтотОбъект.Ссылка)) Тогда
			ТекстВопроса = "Для выполнения данной операции необходимо записать документ. Записать?";
		Иначе // Справочник
			ТекстВопроса = "Для выполнения данной операции необходимо записать элемент. Записать?";
		КонецЕсли; 
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		Иначе
			Попытка
				Возврат ФормаОбъекта.ЗаписатьВФорме();
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции // ЗаписатьНовыйОбъектВФорме()

// Функция формирует представление заголовка документа
//
// Возвращаемое значение:
//  Строка - представление номера документа
//
Функция СформироватьЗаголовокДокумента(Объект, НазваниеОбъекта = "", глСписокПрефиксовУзлов = Неопределено, ПереноситьДату = Ложь) Экспорт
    	
	Если ПереноситьДату Тогда 
		ПереводСтроки = Символ(13);
	Иначе 
		ПереводСтроки = " "
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НазваниеОбъекта) Тогда 
		НазваниеДокумента = Объект.Метаданные().Представление();
	КонецЕсли;
	
	ОбъектИмя = Объект.Метаданные().Имя;
	
	Если Метаданные.Документы.Найти(ОбъектИмя) <> Неопределено Тогда
		СтрокаЗаголовка = НазваниеОбъекта + " № " + ОбщегоНазначения.ПолучитьНомерНаПечать(Объект, глСписокПрефиксовУзлов)
						+ ПереводСтроки + "от " + Формат(Объект.Дата, "ДЛФ=DD");
	ИначеЕсли Метаданные.Справочники.Найти(ОбъектИмя) <> Неопределено Тогда
		СтрокаЗаголовка = НазваниеОбъекта + ОбщегоНазначения.ПолучитьНомерНаПечать(Объект, глСписокПрефиксовУзлов)
						+ ПереводСтроки;
	КонецЕсли;				
	
	Возврат СтрокаЗаголовка

КонецФункции // СформироватьЗаголовокДокумента()

// Активизирует один из реквизитов при открытии документа.
//
// Параметры:
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//  ТекПользователь	   - пользователь
//
Функция АктивизироватьРеквизитВФорме(ДокументОбъект, ФормаДокумента, ТекПользователь = Неопределено, ПоддержкаСтруктурныхПодразделений = Неопределено) Экспорт

	// Структура - порядок актиизации реквизитов.
	// Активизируется первый не заполненный или дата, если стоит соответствующая настройка пользователя
	СтруктураРеквизитов = Новый Структура();
	
	СтруктураРеквизитов.Вставить("ДатаВыписки");
	//СтруктураРеквизитов.Вставить("Дата");
	СтруктураРеквизитов.Вставить("Номер");
	Если ПоддержкаСтруктурныхПодразделений = Неопределено ИЛИ ПоддержкаСтруктурныхПодразделений = Ложь Тогда
		СтруктураРеквизитов.Вставить("Организация");             	
	Иначе 
		СтруктураРеквизитов.Вставить("СтруктурноеПодразделениеОрганизация");
	КонецЕсли;
	СтруктураРеквизитов.Вставить("Касса");
	СтруктураРеквизитов.Вставить("БанковскийСчет");
	СтруктураРеквизитов.Вставить("Склад");
	СтруктураРеквизитов.Вставить("СкладОрдер");
	СтруктураРеквизитов.Вставить("Контрагент");
	СтруктураРеквизитов.Вставить("Получатель");
	СтруктураРеквизитов.Вставить("Плательщик");
	СтруктураРеквизитов.Вставить("Сотрудник");
	СтруктураРеквизитов.Вставить("РодительскоеОсновноеСредство");
	

	Если ТекПользователь <> Неопределено Тогда
		ПриОткрытииФокусВводаНаДату = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриОткрытииДокументовПозиционироватьсяНаДату");
	Иначе
		ПриОткрытииФокусВводаНаДату = Ложь;
	КонецЕсли;

	Для каждого Элемент Из СтруктураРеквизитов Цикл

		// Определим, есть ли ЭУ с таким именем.
		ЭлементУправления = ФормаДокумента.ЭлементыФормы.Найти(Элемент.Ключ);
		Если ЭлементУправления <> Неопределено Тогда // есть такой
			Если (((Элемент.Ключ = "Дата" Или Элемент.Ключ = "ДатаВыписки") И ПриОткрытииФокусВводаНаДату) 
						Или НЕ ЗначениеЗаполнено(ЭлементУправления.Значение))
					И ЭлементУправления.Доступность
			   		И ЭлементУправления.Видимость
			  		И Не ЭлементУправления.ТолькоПросмотр Тогда 

				// Нашли не заполненный ЭУ. Делаем его текущим и прекращаем цикл.
				ФормаДокумента.ТекущийЭлемент = ЭлементУправления;
				Возврат Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла; 

	Возврат Ложь;

КонецФункции // АктивизироватьРеквизитВФорме()

// Устанавливается значение организации в зависимости от владельца выбранного структурного подразделения
//
Процедура УстановитьОрганизациюИСтруктурноеПодразделение(Организация, СтруктурноеПодразделение) Экспорт	
	
	Организация = ?(ТипЗнч(СтруктурноеПодразделение) = Тип("СправочникСсылка.Организации"), СтруктурноеПодразделение, СтруктурноеПодразделение.Владелец);	
	
КонецПроцедуры // УстановитьОрганизациюИСтруктурноеПодразделение

/////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ЗАПОЛНЕНИЯ СУЩЕСТВУЮЩИХ ДОКУМЕНТОВ ПО ДРУГИМ ДОКУМЕНТАМ

// Выполняет заполнение указанной табличной части переданного документа
// данными из выбранного пользователем исходного документа, предварительно полностью очищая
// целевую табличную часть.
//
// Параметры:
//	ДокументОбъект - документ-объект, который надо заполнять
//	ИмяТабличнойЧасти - строка с именем табличной части ДокументОбъект, которую надо заполнять
//	ЗаполнятьАвтоматически - булево, если Истина, то функция сама выполняет заполнение, иначе только возвращает структуру с данными
//	СтруктураИсходныхДокументов - структура, ключами которой являются имена документов, 
//									значениями (необязательно) - структура с именами доступных для выбора пользователем табличных частей.
//									Если СтруктураИсходныхДокументов не задана, то доступны для выбора все документы, у которых есть табл. части
//	СтруктураРеквизитов - структура с именами реквизитов из табл. части ИмяТабличнойЧасти, которые пользователь может использовать
//								Если неуказано, то доступны для использования все реквизиты
//
// Возвращаемое значение:
//	Если пользователь нажал ОК, то структура с ключами
//				СоответствиеРеквизитов - таблица значений со списком реквизитов целевого документа (см. обр-ку КопированиеТабличныйЧастейДокументов)
//				ИсходныйДокумент - ссылка на исходный документ, из которого осуществляется копирование
//				ИмяИсходнойТабличнойЧасти - строка с именем табл. части исходного документа, из которой осуществляется копирование
//				Данные - РезультатЗапроса, содержащий отобранные данные исходной табличной части (все реквизиты)
//	Если пользователь отказался от заполнения, то возвращается Неопределено
//
Функция ОбработатьНажатиеНаКнопкуЗаполнитьПоДокументу(ДокументОбъект, ИмяТабличнойЧасти, ЗаполнятьАвтоматически = Истина, СтруктураИсходныхДокументов = Неопределено, СтруктураРеквизитов = Неопределено) Экспорт

	Если ДокументОбъект[ИмяТабличнойЧасти].Количество() > 0 Тогда
		ТекстВопроса = "Табличная часть """ + ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним + """ будет полностью перезаполнена. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Неопределено;
		КонецЕсли; 
		ДокументОбъект[ИмяТабличнойЧасти].Очистить();
	КонецЕсли;
	
	Возврат ОбработатьНажатиеНаКнопкуДобавитьИзДокумента(ДокументОбъект, ИмяТабличнойЧасти, ЗаполнятьАвтоматически, СтруктураИсходныхДокументов, СтруктураРеквизитов);

КонецФункции // ОбработатьНажатиеНаКнопкуЗаполнитьПоДокументу()

// Выполняет заполнение табличной части документа на основании данных из табличной части
// другого документа, не очищая уже имеющиеся данные.
//
Функция ОбработатьНажатиеНаКнопкуДобавитьИзДокумента(ДокументОбъект, ИмяТабличнойЧасти, ЗаполнятьАвтоматически = Истина, СтруктураИсходныхДокументов = Неопределено, СтруктураРеквизитов = Неопределено) Экспорт

	ОбработкаКопирование = Обработки.КопированиеТабличныхЧастейДокументов.Создать();
	ОбработкаКопирование.ДокументОбъект 			= ДокументОбъект;
	ОбработкаКопирование.ИмяТабличнойЧасти 			= ИмяТабличнойЧасти;
	ОбработкаКопирование.СтруктураРеквизитов 		= СтруктураРеквизитов;
	ОбработкаКопирование.СтруктураИсходныхДокументов = СтруктураИсходныхДокументов;
	
	ФормаОбработки = ОбработкаКопирование.ПолучитьФорму("Форма");
	СтруктураРезультата = ФормаОбработки.ОткрытьМодально();
	
	Если ЗаполнятьАвтоматически И ТипЗнч(СтруктураРезультата) = Тип("Структура") Тогда
		// заполняем табличную часть
		Выборка = СтруктураРезультата.Данные.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ДокументОбъект[ИмяТабличнойЧасти].Добавить();
			
			// переносим все отмеченные реквизиты
			Для Каждого Реквизит Из СтруктураРезультата.СоответствиеРеквизитов Цикл
				Если Реквизит.Использование Тогда
					Если Реквизит.ИсходныйРеквизит = "<...>" Тогда
						НоваяСтрока[Реквизит.Имя] = Реквизит.ПрочееЗначение;
					Иначе
						НоваяСтрока[Реквизит.Имя] = Выборка[Реквизит.ИсходныйРеквизит];
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ОбработатьНажатиеНаКнопкуДобавитьИзДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ИСТОРИЕЙ ВВОДА ЗНАЧЕНИЙ

// Процедура по для переданной строке пути и строковому представлению
//
// Параметры
//  Название - Строка .для которой определяется необходимость дополнения 
// сокращением
//  Уровень - уровень, для которго необходимо составить список сокращений
//
Процедура ДополнитьСписокИсторииВвода(Путь, Знач Значение) Экспорт

	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;

	СтрокаИстории = ВосстановитьЗначение(Путь);

	Если СтрокаИстории = Неопределено Тогда
		СписокИстории = Новый СписокЗначений();
	Иначе
		СписокИстории = ЗначениеИзСтрокиВнутр(СтрокаИстории);
	КонецЕсли;

	Если ТипЗнч(СписокИстории) <> Тип("СписокЗначений") Тогда
		СписокИстории = Новый СписокЗначений();
	КонецЕсли;

	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Значение = ЗначениеВСтрокуВнутр(Значение);
	КонецЕсли;

	Если СписокИстории.НайтиПоЗначению(Значение) <> Неопределено Тогда
		 СписокИстории.Удалить(СписокИстории.НайтиПоЗначению(Значение));
	КонецЕсли;

	СписокИстории.Вставить(0, Значение, Значение);

	Пока СписокИстории.Количество() > 5 Цикл
		СписокИстории.Удалить(СписокИстории.Получить(СписокИстории.Количество() - 1));
	КонецЦикла;

	СохранитьЗначение(Путь, ЗначениеВСтрокуВнутр(СписокИстории));

КонецПроцедуры // ДополнитьСписокИсторииВвода()

// Функция по для переданной строке пути возвращает список заполненных значений
//
// Параметры
//  Путь - Строка .с указанием объекта метаданных и поля ввода 
// сокращением
//
// Возвращаемые значения
//  Возвращается список значений с историей ввода в это поле
//
Функция ПолучитьСписокИсторииВвода(Путь) Экспорт

	СтрокаИстории = ВосстановитьЗначение(Путь);

	Если СтрокаИстории = Неопределено Тогда
		Возврат Новый СписокЗначений();
	КонецЕсли;

	СписокИстории = ЗначениеИзСтрокиВнутр(СтрокаИстории);

	Если ТипЗнч(СписокИстории) = Тип("СписокЗначений") Тогда
		Для каждого ЭлементСписка из СписокИстории Цикл
			Если ТипЗнч(ЭлементСписка.Значение) <> Тип("Строка") Тогда
				СписокИстории.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;

		Для каждого ЭлементСписка из СписокИстории Цикл
			Если ТипЗнч(ЗначениеИзСтрокиВнутр(ЭлементСписка.Значение)) <> Тип("Строка") Тогда
				ЭлементСписка.Значение = ЗначениеИзСтрокиВнутр(ЭлементСписка.Значение);
				ЭлементСписка.Представление = Строка(ЭлементСписка.Значение);
			КонецЕсли;
		КонецЦикла;

		Возврат СписокИстории;

	Иначе
		Возврат Новый СписокЗначений();

	КонецЕсли;

КонецФункции // ПолучитьСписокИсторииВвода()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ И ОБРАБОТКИ МЕНЮ

// Заполняет список пунктов подменю выбора вида операции значениями переданной коллекции 
// объектов метаданных, соответствующей перечислению видов операций для данного документа.
// Всем кнопкам назначается одно переданное действие.
// Обычно используется для заполнения пунктов подменю "ПодменюВидаОперации" командной панели
// формы документа значениями перечисления "Вид операции" для данного вида документа
//
// Параметры:
//  ЭлементМеню                   - кнопка командной панели формы, соответствующая подменю, которое надо заполнить, 
//  ОбъектЗаполнения              - коллекция для заполнения пунктов подменю, 
//  ОбъектОбработкиВыбораОперации - действие, которое надо выполнить при выборе любого пункта подменю.
//
Процедура УстановитьПодменюВыбораВидаОперации(ЭлементМеню, ОбъектЗаполнения, ОбъектОбработкиВыбораОперации) Экспорт

	Для каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл
		
		ЭлементМеню.Кнопки.Добавить(ЭлементЗаполнения.Имя, ТипКнопкиКоманднойПанели.Действие, 
		                            ЭлементЗаполнения.Синоним, ОбъектОбработкиВыбораОперации);
		ЭлементМеню.Кнопки[ЭлементЗаполнения.Имя].ИзменяетДанные = Истина;
		
	КонецЦикла;

КонецПроцедуры // УстановитьПодменюВыбораВидаОперации()
	
// Заполняет список пунктов подменю выбора вида операции значениями переданной коллекции объектов метаданных,
// соответствующей перечислению видов операций для данного документа, с фильтром по переданному списку.
// Всем кнопкам назначается одно переданное действие.
// Обычно используется для заполнения пунктов подменю "ПодменюВидаОперации" командной панели
// формы документа значениями перечисления "Вид операции" для данного вида документа
//
// Параметры:
//  ЭлементМеню                   - кнопка командной панели формы, соответствующая подменю, которое надо заполнить, 
//  ОбъектЗаполнения              - коллекция для заполнения пунктов подменю, 
//  ОбъектОбработкиВыбораОперации - действие, которое надо выполнить при выборе любого пункта подменю.
//  СписокИсключения              - список значений перечисления, которые не должны добавляться
//
Процедура УстановитьПодменюВыбораВидаОперацииФильтр(ЭлементМеню, ОбъектЗаполнения, 
													ОбъектОбработкиВыбораОперации, СписокИсключения) Экспорт

	Для каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл

		Если СписокИсключения.НайтиПоЗначению(ЭлементЗаполнения.Имя) = Неопределено Тогда

		ЭлементМеню.Кнопки.Добавить(ЭлементЗаполнения.Имя, ТипКнопкиКоманднойПанели.Действие, 
		                            ЭлементЗаполнения.Синоним, ОбъектОбработкиВыбораОперации);

		ЭлементМеню.Кнопки[ЭлементЗаполнения.Имя].ИзменяетДанные = Истина;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации()

//Процедура предоставляет пользователю при создании документа выбрать операцию из списка
//
Процедура ВыбратьВидОперации(ДокументОбъект, Отказ, СписокИсключений = Неопределено, ПараметрОбъектКопирования = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации) 
		И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ЗапрашиватьВидОперацииПриВводеНового") Тогда
		
		Если ТипЗнч(СписокИсключений) <> Тип("СписокЗначений") Тогда
			СписокИсключений = Новый СписокЗначений;
		КонецЕсли;
		
		СписокВидов = Новый СписокЗначений();
		Для каждого ЭлементЗаполнения из ДокументОбъект.ВидОперации.Метаданные().ЗначенияПеречисления Цикл
			Если СписокИсключений.НайтиПоЗначению(ЭлементЗаполнения.Имя) = Неопределено Тогда
				СписокВидов.Добавить(ЭлементЗаполнения.Имя, ЭлементЗаполнения.Синоним);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокВидов.Количество()= 1 Тогда 
			ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][СписокВидов[0].Значение];
			Возврат;	
		КонецЕсли;
		
		Вид = СписокВидов.ВыбратьЭлемент("Выбор вида операции документа");
		
		Если НЕ Вид = Неопределено Тогда
			ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][Вид.Значение];
		Иначе
			Отказ = Истина;
		КонецЕсли; 		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается формирования кнопки "Подбор" для формы видов расчетов Планов Видов Расчетов.
//
// Параметры:
//  СсылкаПВР 	   	   - ссылка на ПВР;
//  ФормаЭлемента 	   - Форма вида расчета.
//  ВедущиеВидыРасчета - булево, Истина - если нужно формировать кнопку в командной
//						 панели ТЧ "ВедущиеВидыРасчета".
//
Процедура СоздатьКнопкуПодбораДляПВР(СсылкаПВР, ФормаЭлемента, ВедущиеВидыРасчета = Ложь) Экспорт

	МассивДоступныхТипов = Новый Массив;
	
	КоллекцияБазовыхВидовРасчета = Метаданные.ПланыВидовРасчета[СсылкаПВР.Метаданные().Имя].БазовыеВидыРасчета;
	
	Если КоллекцияБазовыхВидовРасчета.Количество() > 1 Тогда
		
		ФормаЭлемента.ЭлементыФормы.КоманднаяПанельБазовыеВидыРасчета.Кнопки.Подбор.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю;
		
		Если ВедущиеВидыРасчета Тогда
			ФормаЭлемента.ЭлементыФормы.КоманднаяПанельВедущиеВидыРасчета.Кнопки.Подбор.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю;
		КонецЕсли;
		
		Для каждого СтрокаКолекции Из КоллекцияБазовыхВидовРасчета Цикл
			
			ДействиеПоКнопке = Новый Действие("КоманднаяПанельБазовыеВидыРасчетаПодборПодМеню");
			ФормаЭлемента.ЭлементыФормы.КоманднаяПанельБазовыеВидыРасчета.Кнопки.Подбор.Кнопки.Добавить(СтрокаКолекции.Имя, ТипКнопкиКоманднойПанели.Действие, СтрокаКолекции.Синоним, ДействиеПоКнопке);
			
			Если ВедущиеВидыРасчета Тогда
				
				ДействиеПоКнопке = Новый Действие("КоманднаяПанельВедущиеВидыРасчетаПодМеню");
				ФормаЭлемента.ЭлементыФормы.КоманднаяПанельВедущиеВидыРасчета.Кнопки.Подбор.Кнопки.Добавить(СтрокаКолекции.Имя, ТипКнопкиКоманднойПанели.Действие, СтрокаКолекции.Синоним, ДействиеПоКнопке);
				
				МассивДоступныхТипов.Добавить(Тип("ПланВидовРасчетаСсылка." + СтрокаКолекции.Имя));
				
			КонецЕсли;
			
		КонецЦикла; 
		
	Иначе
		
		ДействиеПоКнопке = Новый Действие("КоманднаяПанельБазовыеВидыРасчетаПодбор");
		ФормаЭлемента.ЭлементыФормы.КоманднаяПанельБазовыеВидыРасчета.Кнопки.Подбор.ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
		ФормаЭлемента.ЭлементыФормы.КоманднаяПанельБазовыеВидыРасчета.Кнопки.Подбор.Действие  = ДействиеПоКнопке;
		
		Если ВедущиеВидыРасчета Тогда
			
			ДействиеПоКнопке = Новый Действие("КоманднаяПанельВедущиеВидыРасчетаПодбор");
			ФормаЭлемента.ЭлементыФормы.КоманднаяПанельВедущиеВидыРасчета.Кнопки.Подбор.Действие = ДействиеПоКнопке;
			
			Для каждого СтрокаКолекции Из КоллекцияБазовыхВидовРасчета Цикл
				
				МассивДоступныхТипов.Добавить(Тип("ПланВидовРасчетаСсылка." + СтрокаКолекции.Имя));
				Прервать;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если ВедущиеВидыРасчета Тогда
		
		ФормаЭлемента.ЭлементыФормы.ВедущиеВидыРасчета.Колонки.ВидРасчета.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов(МассивДоступныхТипов);
		Если КоллекцияБазовыхВидовРасчета.Количество() = 1 Тогда
			ФормаЭлемента.ЭлементыФормы.ВедущиеВидыРасчета.Колонки.ВидРасчета.ЭлементУправления.ВыбиратьТип = Ложь;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // СоздатьКнопкуПодбораДляПВР()

// Удаляет кнопку из набора кнопок, если она существует
//
Процедура УдалитьКнопкуИзНабора(ИмяКнопки, НаборКнопок) Экспорт

	Кнопка = НаборКнопок.Найти(ИмяКнопки);
	Если Кнопка <> Неопределено Тогда
		НаборКнопок.Удалить(НаборКнопок.Индекс(Кнопка));
	КонецЕсли;

КонецПроцедуры // УдалитьКнопкуИзНабора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ и ФУНКЦИИ ИНФОРМИРОВАНИЯ ПОЛЬЗОВАТЕЛЯ

// Записывает документ в режиме отмены проведения, проверяет необходимость очистки табличных частей, спросив об этом у пользователя
// Параметры
//  Объект        - ДокументОбъект
//  ФормаОбъекта  – Тип - Форма
//                 форма документа из которого вызвана функция
//  ТекстВопроса1 и ТекстВопроса2  – Тип – Строка
//                 текст вопроса
//  ЗаписыватьДокумент - параметр определяет, производить запись документа или нет, с параметром Ложь функция
//						 вызывается при заполнении списком, т.е. запись документа необходимо произвести
//						 только если пользователь не откажется от заполнения списком в обработчике ОбработкаВыбора формы
//
// Возвращаемое значение:
//   Истина   – если не требуется запись документа или запись прошла успешно
//   Ложь     - отказ пользователя от записи или не удачная попытка записи
Функция ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(Объект, ФормаОбъекта, ТабличныеЧасти, ТекстВопроса1, ТекстВопроса2, ЗаписыватьДокумент = Истина) Экспорт
	
	Если Объект.Проведен Тогда
		
		//документ проведен, необходимо записать документ отменив проведение и очистить табличные части
		
		Если Вопрос(ТекстВопроса1, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		Если ЗаписыватьДокумент Тогда
			Попытка
				ФормаОбъекта.ЗаписатьВФорме(РежимЗаписиДокумента.ОтменаПроведения);
			Исключение
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		
		// документ не проведен, необходимо записать документ и очистиить табличные части, вопросы
		// пользователю задаем только по поводу очистки табличных частей
		НадоОчищатьТабличныеЧасти = Ложь;
		Если НЕ ТабличныеЧасти = Неопределено Тогда
			//проверим заполнение табличных частей			
			Для каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
				НадоОчищатьТабличныеЧасти = ТабличнаяЧасть.Количество() > 0;
				Если НадоОчищатьТабличныеЧасти Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НадоОчищатьТабличныеЧасти Тогда
				
				Ответ = Вопрос(ТекстВопроса2, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
				
				Если Ответ <> КодВозвратаДиалога.Да Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗаписыватьДокумент И Объект.Модифицированность() Тогда //запишем документ
			
			Попытка
				Возврат ФормаОбъекта.ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
			Исключение
				Возврат Ложь;
			КонецПопытки;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия()

// Функция запрашивает необходимость изменения занчения аналитики на счетах с субконто ПодразделенияОрганизации
//
Функция ОчиститьНекорректныеЗначенияПодразделения(ВидРеквизита) Экспорт
	
	ОчиститьЗначения = Ложь;

	Если ВидРеквизита = "Субконто" Тогда 
		ТекстВопроса = "Возможно в значении субконто содержится подразделение не принадлежащее структурной единице." + Символы.ПС 
			+ "Очистить некорректные значения субконто?";
	Иначе
		ТекстВопроса = "Возможно в табличной части содержится значение подразделения не принадлежащее структурной единице." + Символы.ПС
			+ "Очистить некорректные значения?";
	КонецЕсли;
	
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьЗначения =  Истина;
	КонецЕсли;	
	
	Возврат ОчиститьЗначения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ ДОКУМЕНТОВ

// Процедура выполняет открытие формы работы со свойствами документа
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//  ФормаДокумента - форма редактируемого документа
//
Процедура ОткрытьСвойстваДокумента(ДокументОбъект, ФормаДокумента) Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		Вопрос = "Перед началом работы со свойствами необходимо записать документ. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Попытка 
				ФормаДокумента.ЗаписатьВФорме();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
				Возврат;
			КонецПопытки;	
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Форма = Обработки.ЗначенияСвойствОбъекта.ПолучитьФорму("ЗначенияСвойствОбъекта", ФормаДокумента, ДокументОбъект.Ссылка);

	Форма.НазначениеСвойств      = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
	Форма.ОбъектОтбораЗначений   = ДокументОбъект.Ссылка;
	Форма.ОбъектОтбораНазначений = ДокументОбъект.Ссылка;

	Форма.ПрочитатьЗаполнитьСвойстваИЗначения();
	Форма.Открыть();

КонецПроцедуры // ОткрытьСвойстваДокумента()

// Процедура выполняет открытие формы работы с категориями документа
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//  ФормаДокумента - форма редактируемого документа
//
Процедура ОткрытьКатегорииДокумента(ДокументОбъект, ФормаДокумента) Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		Вопрос = "Перед началом работы с категориями необходимо записать документ. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Попытка
				ФормаДокумента.ЗаписатьВФорме();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
				Возврат;
			КонецПопытки;	
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Форма = Обработки.КатегорииОбъекта.ПолучитьФорму("КатегорииОбъекта", ФормаДокумента, ДокументОбъект.Ссылка);

	Форма.НазначениеКатегорий   = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
	Форма.ОбъектОтбораКатегорий = ДокументОбъект.Ссылка;

	Форма.ПрочитатьЗаполнитьКатегорииОбъекта();
	Форма.Открыть();

КонецПроцедуры // ОткрытьКатегорииДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С МНОГОФИРМЕННЫМ И ОДНОФИРМЕННЫМ УЧЕТОМ

// Процедура устанавливает отбор по основной организации в указанно форме
//
Процедура УстановитьОтборПоОрганизации(	Форма, УчетПоВсемОрганизациям, ОсновнаяОрганизация, 
										ИмяРеквизитаСписка, СкрыватьКолонку = Истина, ИмяОтбора = "Организация") Экспорт

	 //В том случае если учте ведется по одной организации необходимо установить мягкий отбор.
	 //т.е. отбор, с возможностью его изменения.

	Если НЕ УчетПоВсемОрганизациям Тогда // Установлен режим учета по одной организации

		Если НЕ (ТипЗнч(Форма[ИмяРеквизитаСписка]) = Тип("ТаблицаЗначений")) Тогда // Элемент - табличное поле

			 //Проверим - Если это связанный регистр сведений тогда не нужно устанавливать отбор - 
			 //он уже установлен системой автоматически

			Если ИмяРеквизитаСписка = "РегистрСведенийСписок" Тогда

				// Возвможно это переход по кнопке Перейти
				Если ТипЗнч(Форма.ПараметрОтборПоИзмерению) = Тип("Структура") Тогда
					Если ЗначениеЗаполнено(Форма.ПараметрОтборПоИзмерению) Тогда
						Возврат; // Это переход по кнопке Перейти - не нужно устанавливать отбор
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;
          Если не Форма[ИмяРеквизитаСписка].Отбор.Найти(ИмяОтбора) = Неопределено Тогда
			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].ВидСравнения  = ВидСравнения.Равно;
			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].Использование = Истина;
			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].Значение      = ОсновнаяОрганизация;

			Форма.ЭлементыФормы[ИмяРеквизитаСписка].НастройкаОтбора[ИмяОтбора].Доступность = Ложь;
          КонецЕсли;
		КонецЕсли;

		Если СкрыватьКолонку Тогда

			Если НЕ Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки.Найти(ИмяОтбора) = Неопределено Тогда

				Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки[ИмяОтбора].Видимость         = Ложь;
				Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки[ИмяОтбора].ИзменятьВидимость = Ложь;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // УстановитьОтборПоОрганизации()

// Процедура заполняет отбор организацией по умолчанию для пользователя
// используется в подсистеме расчета зар.платы
//
Процедура ЗаполнениеОтбораПоОрганизацииПоУмолчанию(Форма, ЭлементОтбора, ЭлементФормы, ПараметрОтборПоРегистратору, 
													ИспользоватьГоловнуюОрганизацию = Истина, 
													ТекущийПользователь, 
													ТекстЗаголовка = Неопределено, 
													ИспользоватьНалогоплательщика = Ложь, 
													ИсчислениеНалоговСтруктурныхЕдиниц = Неопределено,
													РазделНалоговогоУчета = Неопределено) Экспорт
	
	ЭлементФормы.ТолькоПросмотр = Ложь;
	
	Если ЗначениеЗаполнено(ПараметрОтборПоРегистратору) Тогда
		
		МетаданныеДокумента = ПараметрОтборПоРегистратору.Метаданные();
		
		Организация = Неопределено;
		Если МетаданныеДокумента.Реквизиты.Найти("ОбособленноеПодразделениеКуда") <> Неопределено 
				И ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(ПараметрОтборПоРегистратору.Организация).Количество() > 1 Тогда
		
			Если ИспользоватьГоловнуюОрганизацию Тогда
				Организация = ПараметрОтборПоРегистратору.Организация;
			ИначеЕсли ИспользоватьНалогоплательщика Тогда
				Организация = ПараметрОтборПоРегистратору.ОбособленноеПодразделениеКуда;
				Организация = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Организация,
																			Организация,
																			ИсчислениеНалоговСтруктурныхЕдиниц,
																			РазделНалоговогоУчета);
			Иначе
				Организация = ПараметрОтборПоРегистратору.ОбособленноеПодразделениеКуда;
			КонецЕсли;
		
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
			
			Если ИспользоватьГоловнуюОрганизацию Тогда
				Организация = ОбщегоНазначения.ГоловнаяОрганизацияДляУчетаЗарплаты(ПараметрОтборПоРегистратору.Организация);
			ИначеЕсли ИспользоватьНалогоплательщика Тогда
				Организация = ПараметрОтборПоРегистратору.Организация;
				Организация = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Организация,
																			Организация,
																			ИсчислениеНалоговСтруктурныхЕдиниц,
																			РазделНалоговогоУчета);
			Иначе
				Организация = ПараметрОтборПоРегистратору.Организация;
			КонецЕсли;
			
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ЭлементОтбора.Значение = Организация;
			ЭлементОтбора.Использование = Истина;
			
			ЭлементФормы.ТолькоПросмотр = Истина;
			Если ТекстЗаголовка <> Неопределено Тогда
				Форма.Заголовок = ТекстЗаголовка + Организация.Наименование;
			КонецЕсли; 
		КонецЕсли;
		
	Иначе


		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнаяОрганизация");
		
		Если ИспользоватьГоловнуюОрганизацию Тогда 
			Организация = ОбщегоНазначения.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация);
		ИначеЕсли ИспользоватьНалогоплательщика Тогда
			Организация = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Организация,
																			Организация,
																			ИсчислениеНалоговСтруктурныхЕдиниц,
																			РазделНалоговогоУчета);
		КонецЕсли;
		
		ЭлементОтбора.Значение = Организация;
		ЭлементОтбора.Использование = Не Организация.Пустая();
		Если ТекстЗаголовка <> Неопределено Тогда
			Если Организация.Пустая() Тогда
				Форма.Заголовок = СтрЗаменить(ТекстЗаголовка,"организации","организаций");
			Иначе 
				Форма.Заголовок = ТекстЗаголовка + Организация.Наименование;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры  // ЗаполнениеОтбораПоОрганизацииПоУмолчанию

Процедура УстановитьЗаголовокСистемыПриИзмененииОсновнойОрганизации() Экспорт
	
	ОсновнаяОрганизация    = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	УчетПоВсемОрганизациям = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "УчетПоВсемОрганизациям");
	ЗаголовокСистемы = Константы.ЗаголовокСистемы.Получить();
	
	Если Пустаястрока(ЗаголовокСистемы) Тогда
		ТекстЗаголовкаСистемы = Метаданные.Синоним;
		ЗаголовокСистемы  = ТекстЗаголовкаСистемы;
	КонецЕсли;
	Если Не ОсновнаяОрганизация.Пустая() Тогда
		Попытка
			ЗаголовокСистемы = ЗаголовокСистемы + " / " + СокрЛП(ОсновнаяОрганизация.Наименование);
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если ПараметрыСеанса.ИспользованиеРИБ Тогда
		Если Не ПустаяСтрока(ПланыОбмена.Полный.ЭтотУзел().Наименование) Тогда
			ЗаголовокСистемы = ЗаголовокСистемы + " / " + СокрЛП(ПланыОбмена.Полный.ЭтотУзел());
		Иначе
			ЗаголовокСистемы = ЗаголовокСистемы + " / " + СокрЛП(ПланыОбмена.ПоОрганизации.ЭтотУзел());
		КонецЕсли;
	КонецЕсли;			
	ЗаголовокСистемы = ЗаголовокСистемы + " / "+ СокрЛП(глТекущийПользователь);	
	
	УстановитьЗаголовокСистемы(ЗаголовокСистемы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ВВОДА ДАТЫ КАК МЕСЯЦА

// Предназначена для реализации "произвольного" ввода даты-месяца
// подбирает по переданному тексту строку-представление даты или список таких строк
// в переданный параметр ДатаПоТексту возвращает подобранную по тексту дату
Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено) ЭКспорт
    СписокВозврата = Новый СписокЗначений;
    ТекущийГод = Год(ТекущаяДата());
    
    Если ПустаяСтрока(Текст) Тогда
        Возврат СписокВозврата;
    КонецЕсли;
    Если Найти(Текст, ".") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, ".");
    ИначеЕсли Найти(Текст, ",") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, ",");
    ИначеЕсли Найти(Текст, "-") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "-");
    ИначеЕсли Найти(Текст, "/") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "/");
    ИначеЕсли Найти(Текст, "\") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "\");
    Иначе
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, " ");
    КонецЕсли;
    Если Подстроки.Количество() = 1 Тогда
        // единственное слово - пытаемся получить месяц
        Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Текст) Тогда
            МесяцЧислом = Число(Текст);
            Если МесяцЧислом >= 1 и МесяцЧислом <=12 Тогда
                ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
                Если СтрДлина(Текст) = 1 Тогда
                    СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
                Иначе
                    СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
                КонецЕсли;
            Иначе
                Возврат СписокВозврата;
            КонецЕсли;                
        Иначе
            СписокМесяцев = ОбщегоНазначения.СписокМесяцевПоСтроке(Текст);
            Для Каждого Месяц Из СписокМесяцев Цикл
                ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
                СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гг'"));
            КонецЦикла;
        КонецЕсли;
    ИначеЕсли Подстроки.Количество() = 2 Тогда
        // два слова - первое считаем месяцем, второе - годом
        Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
            Если ПустаяСтрока(Подстроки[1]) Тогда
                ГодЧислом = 0;
                Подстроки[1] = "0";
                ТекстВозврата = Текст + "0";
            Иначе
                ГодЧислом = Число(Подстроки[1]);
                ТекстВозврата = "";
            КонецЕсли;
            Если ГодЧислом > 3000 Тогда
                Возврат СписокВозврата;
            КонецЕсли;
            Если СтрДлина(Подстроки[1]) <= 1 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
                СтрокаФорматированияГода = "г";
            ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
                СтрокаФорматированияГода = "гг";
            ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
                СтрокаФорматированияГода = "гггг";
            КонецЕсли;                    
        Иначе
            // второе слово может быть только годом
            Возврат СписокВозврата;
        КонецЕсли;                
        Если ЗначениеЗаполнено(Подстроки[0]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
            МесяцЧислом = Число(Подстроки[0]);
            Если МесяцЧислом >= 1 и МесяцЧислом <= 12 Тогда
                // если "правильный" месяц и год
                ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
                СписокВозврата.Добавить(ТекстВозврата);
            Иначе
                Возврат СписокВозврата;
            КонецЕсли;                
        Иначе
            СписокМесяцев = ОбщегоНазначения.СписокМесяцевПоСтроке(Подстроки[0]);
            Если СписокМесяцев.Количество() = 1 Тогда
                ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
                СписокВозврата.Добавить("");
            Иначе
                Для Каждого Месяц Из СписокМесяцев Цикл
                    ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
                    СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гг'"));
                КонецЦикла;
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
    Возврат СписокВозврата;
КонецФункции // ДатаКакМесяцПодобратьДатуПоТексту()

// Процедура обрабатывается событие "АвтоПодборТекста" для поля ввода текста с датой
// 
Процедура ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка) Экспорт
    Список = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
    Если Список.Количество() = 1 Тогда
        ТекстАвтоПодбора = Список[0];
    КонецЕсли;
    СтандартнаяОбработка = Ложь;
КонецПроцедуры // ДатаКакМесяцАвтоПодборТекста()

// Процедура обрабатывается событие "ОкончаниеВводаТекста" для поля ввода текста с датой
//
Процедура ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка) Экспорт
    Список = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
    Если Список.Количество() = 1 Тогда
        Значение = Текст;
    Иначе
        Значение = Список;
    КонецЕсли;
    СтандартнаяОбработка = Ложь;
КонецПроцедуры // ДатаКакМесяцОкончаниеВводаТекста()

// Функция возвращает дату как месяц в виде строки
//
Функция ДатаКакМесяцПредставление(ДатаДата) Экспорт
	
	Возврат Формат(ДатаДата, "ДФ='ММММ гггг'");
	
КонецФункции // ДатаКакМесяцПредставление()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОНУМЕРАЦИИ

// Процедура изменения доступности "ручного" изменения кода/номера объекта
//
// Параметры
//  МетаданныеОбъекта  - метаданные объекта.
//  ФормаОбъекта      - форма объекта.
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать пункт "Редактировать код/номер"
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//	ПолеВводаНомераДубль - необязательный параметр, необходим в случаях, когда код/номер одновременно связан с двумя элементами формы
//	КодНомерСтрокой - необязательный параметр, позволяет задать переназначить имя кода/номера при выводе запроса на подтверждение
//
Процедура ИзменениеВозможностиРедактированияНомера(МетаданныеОбъекта, ФормаОбъекта, ПодменюДействия, ПолеВводаНомера, ПолеВводаНомераДубль = Неопределено, ТекстВопроса = "") Экспорт
	
	Кнопка = ПодменюДействия.Кнопки.РедактироватьКодНомер;
	Если НЕ Кнопка.Пометка Тогда
		
		Если ПустаяСтрока(ТекстВопроса) Тогда			
			Если ВРЕГ(ПолеВводаНомера.Данные) = ВРЕГ("Код") Тогда
				ТекстВопроса = "Код присваивается автоматически при записи элемента, самостоятельное его редактирование может привести к нарушению в нумерации в системе. Вы действительно хотите установить код вручную?"
			Иначе
				ТекстВопроса = "Номер документу присваивается автоматически при записи, самостоятельное его редактирование может привести к нарушению в нумерации в системе. Вы действительно хотите установить номер вручную?"
			КонецЕсли;
		КонецЕсли;		
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;				
	КонецЕсли;
	Кнопка.Пометка = Не Кнопка.Пометка;
	ПолеВводаНомера.ТолькоПросмотр = НЕ Кнопка.Пометка;
	ПолеВводаНомера.ПропускатьПриВводе = ПолеВводаНомера.ТолькоПросмотр;	
	ОбновитьПодсказкуКодНомерОбъекта(МетаданныеОбъекта, ПодменюДействия, ПолеВводаНомера);
	
	Если ПолеВводаНомераДубль <> Неопределено Тогда
		ПолеВводаНомераДубль.ТолькоПросмотр = ПолеВводаНомера.ТолькоПросмотр;
		ПолеВводаНомераДубль.ПропускатьПриВводе = ПолеВводаНомераДубль.ТолькоПросмотр;
		ОбновитьПодсказкуКодНомерОбъекта(МетаданныеОбъекта, ПодменюДействия, ПолеВводаНомераДубль);
	КонецЕсли;
	
КонецПроцедуры	

//	Процедура установки флага ТолькоПросмотр для поля ввода кода/номера в зависимости от стратегии автонумерации объекта
//
// Параметры
//  МетаданныеОбъекта  - метаданные объекта.
//  ФормаОбъекта      - форма объекта.
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать пункт "Редактировать код/номер"
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//
Процедура УстановитьДоступностьПоляВводаНомера(МетаданныеОбъекта, ФормаОбъекта, ПодменюДействия, ПолеВводаНомера) Экспорт
	
	Если ФормаОбъекта.Автонумерация = АвтонумерацияВФорме.Авто Тогда
		Возврат;
	КонецЕсли;	
	
	СтратегияРедактирования = ПолучитьСтратегиюРедактированияНомераОбъекта(МетаданныеОбъекта);
	
	Если СтратегияРедактирования = Перечисления.СтратегияРедактированияНомеровОбъектов.Доступно Тогда
		Если ПодменюДействия.Кнопки.Найти("РедактироватьКодНомер") <> Неопределено Тогда
			ПодменюДействия.Кнопки.Удалить(ПодменюДействия.Кнопки.РедактироватьКодНомер);
		КонецЕсли;
		ПолеВводаНомера.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	УстановитьПодсказкуПоляВводаКодаНомера(ПолеВводаНомера, ПодменюДействия, СтратегияРедактирования);	
		
КонецПроцедуры

//	Возвращает стратегию нумерациии для объекта
//
// Параметры
//	МетаданныеОбъекта - метаданные объекта
//
// Возвращаемое значение 
//  Стратегия нумерациии для объекта
//
Функция ПолучитьСтратегиюРедактированияНомераОбъекта(МетаданныеОбъекта) Экспорт
	КэшСтратегииАвтонумерации = глЗначениеПеременной("КэшСтратегииАвтонумерации");
	СтратегияРедактирования = КэшСтратегииАвтонумерации[МетаданныеОбъекта];
	Если СтратегияРедактирования = Неопределено Тогда
		СтратегияРедактирования = ПолучитьСтратегиюАвтонумерацииДляОбъекта(МетаданныеОбъекта);
		КэшСтратегииАвтонумерации.Вставить(МетаданныеОбъекта, СтратегияРедактирования);
	КонецЕсли;		
	Возврат СтратегияРедактирования;
КонецФункции

//	Процедура установки текста подсказки для поля ввода кода/номера в зависимости от стратегии редактирования
//	и введенного значения
//
// Параметры
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать пункт "Редактировать код/номер"
//	СтратегияРедактирования - стратегия автонумерации объекта
//
Процедура УстановитьПодсказкуПоляВводаКодаНомера(ПолеВводаНомера, ПодменюДействия, СтратегияРедактирования)
		
	КодНомерСтрокой = ПолеВводаНомера.Данные;		
	
	Если ТипЗнч(ПолеВводаНомера) = Тип("ПолеВвода") Тогда
		ПолеВвода = ПолеВводаНомера;
	Иначе
		ПолеВвода = ПолеВводаНомера.ЭлементУправления;
	КонецЕсли;	
	
	Если ПустаяСтрока(ПолеВвода.Значение) Тогда
		ПолеВвода.Подсказка =  КодНомерСтрокой + " будет присвоен при записи объекта.";
	Иначе
		ПолеВвода.Подсказка =  "";
	КонецЕсли;
	
	Если СтратегияРедактирования = Перечисления.СтратегияРедактированияНомеровОбъектов.НеДоступно
		И НЕ ПодменюДействия.Кнопки.РедактироватьКодНомер.Пометка Тогда
		ПолеВвода.Подсказка =  ПолеВвода.Подсказка + ?(ПустаяСтрока(ПолеВвода.Подсказка), "", " ") 
									 + "Для возможности редактирования " + ?(КодНомерСтрокой = "Номер", "номера", "кода") + " используйте подменю ""Действия"".";
	КонецЕсли;
	
	Если ПустаяСтрока(ПолеВвода.Подсказка) Тогда
		Если КодНомерСтрокой = "Номер" Тогда
			ПолеВвода.Подсказка = "Номер документа";
		Иначе
			ПолеВвода.Подсказка = "Код справочника";
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры

//	Возвращает стратегию нумерациии для объекта, сохраненную в соотв. регистре сведений
//
// Параметры
//	МетаданныеОбъекта - метаданные объекта
//
// Возвращаемое значение 
//  Стратегия нумерациии для объекта
//
Функция ПолучитьСтратегиюАвтонумерацииДляОбъекта(МетаданныеОбъекта)
	
	Перем ТипОбъекта;
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		ТипОбъекта = "Справочники";
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		ТипОбъекта = "Документы";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		ТипОбъекта = "ПланыВидовХарактеристик";
	Иначе
		Возврат Перечисления.СтратегияРедактированияНомеровОбъектов.НеДоступно;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтратегияРедактированияНомераОбъекта КАК СтратегияРедактированияНомераОбъекта
	|ИЗ 
	|	РегистрСведений.СтратегииРедактированияНомеровОбъектов
	|ГДЕ
	|	ТипОбъекта = &ТипОбъекта
	|	И ВидОбъекта = &ВидОбъекта";
	
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.УстановитьПараметр("ВидОбъекта", МетаданныеОбъекта.Имя);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтратегияРедактированияНомераОбъекта;
	Иначе
		Возврат Перечисления.СтратегияРедактированияНомеровОбъектов.НеДоступно;
	КонецЕсли;	
	
КонецФункции

//	Процедура обновления текста подсказки для поля ввода кода/номера
//
// Параметры
//	МетаданныеОбъекта - метаданные объекта
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать пункт "Редактировать код/номер"
//
Процедура ОбновитьПодсказкуКодНомерОбъекта(МетаданныеОбъекта, ПодменюДействия, ПолеВводаНомера) Экспорт
	УстановитьПодсказкуПоляВводаКодаНомера(ПолеВводаНомера, ПодменюДействия, ПолучитьСтратегиюРедактированияНомераОбъекта(МетаданныеОбъекта));
КонецПроцедуры

//	Процедура очистки введенного кода/номера объекта
// Параметры
//  ЭтотОбъект  - объект.
//	КодНомер - имя обрабатываемого реквизита (Код или Номер)
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать пункт "Редактировать код/номер"
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//
Процедура СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, КодНомер, ПодменюДействия, ПолеВводаНомера) Экспорт
	ЭтотОбъект[КодНомер] = "";
	ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ПодменюДействия, ПолеВводаНомера);
КонецПроцедуры

Процедура ДобавитьВМенюДействияКнопкуРедактированияНомера(ПодменюДействия) Экспорт
	
	ДобавитьВМенюДействияКнопкуПоТипуОбъекта(ПодменюДействия, "номер");	
	
КонецПроцедуры

Процедура ДобавитьВМенюДействияКнопкуРедактированияКода(ПодменюДействия) Экспорт
	
	ДобавитьВМенюДействияКнопкуПоТипуОбъекта(ПодменюДействия, "код");
	
КонецПроцедуры

Процедура ДобавитьВМенюДействияКнопкуПоТипуОбъекта(ПодменюДействия, КодНомер)
	
	Если ПодменюДействия.Кнопки.Найти("РедактироватьКодНомер") = Неопределено Тогда
		Обработчик = Новый Действие("ДействияФормыРедактировать" + КодНомер);
		ПодменюДействия.Кнопки.Добавить("РазделительРедактированияКодаНомера", ТипКнопкиКоманднойПанели.Разделитель);
		ПодменюДействия.Кнопки.Добавить("РедактироватьКодНомер", ТипКнопкиКоманднойПанели.Действие, "Редактировать " + КодНомер, Обработчик);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СОХРАНЕНИЯ И ВОССТАНОВЛЕНИЯ ВЫПАДАЮЩИХ СПИСКОВ ПОСЛЕДНИХ 10 ЗНАЧЕНИЙ

// Процедура восстанавливает список 10 последних выпавших значений элемента
Процедура ВосстановитьСписокЗначенийУнивер(СписокЗначений, ИмяПараметраДляСохранения = "", СписокЭлементаВизуализации) Экспорт

	Если НЕ ЗначениеЗаполнено(ИмяПараметраДляСохранения) Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗначений.Очистить();
	
	ВосстановленноеЗначение = ВосстановитьЗначение(ИмяПараметраДляСохранения);
	Если ТипЗнч(ВосстановленноеЗначение) = Тип("СписокЗначений") Тогда
		СписокЗначений = ВосстановленноеЗначение;
		СписокЭлементаВизуализации = СписокЗначений.Скопировать();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура добавляет в список последних 10-ти значений элементов
// Параметры :
//		СписокСохраняемыхЗначений - список значений куда нужно поместить очередной элемент
//      ИмяПараметраДляСохранения - под каким именем сохранить значение (если пустая - то ничего не сохраняем)
//      ЭлементСписка			  - выбранный элемент списка
Процедура ДобавитьВСписокЗначенийУнивер(СписокСохраняемыхЗначений, ИмяПараметраДляСохранения = "", ЭлементСписка, 
	Знач ЗначениеПоиска = "") Экспорт

	Если ПустаяСтрока(ЗначениеПоиска) Тогда
		ДобавляемоеЗначение = ЭлементСписка.Значение;
	Иначе
		ДобавляемоеЗначение = ЗначениеПоиска;
    КонецЕсли;
	
	НайденныйЭлемент = СписокСохраняемыхЗначений.НайтиПоЗначению(ДобавляемоеЗначение);
	Если НайденныйЭлемент <> Неопределено Тогда
		СписокСохраняемыхЗначений.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	СписокСохраняемыхЗначений.Вставить(0, ДобавляемоеЗначение);
	
	Пока СписокСохраняемыхЗначений.Количество() > 10 Цикл
		СписокСохраняемыхЗначений.Удалить(СписокСохраняемыхЗначений.Количество() - 1);
	КонецЦикла;
	
	Если (ЗначениеЗаполнено(ИмяПараметраДляСохранения)) И ТипЗнч(ИмяПараметраДляСохранения) = Тип("Строка") Тогда
		СохранитьЗначение(ИмяПараметраДляСохранения, СписокСохраняемыхЗначений.Скопировать());
	КонецЕсли;
	
	ЭлементСписка.СписокВыбора = СписокСохраняемыхЗначений.Скопировать();

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура возвращает информацию по курсу валюты в виде строки
//
// Параметры: 
//  Валюта                         - Валюта, курс которой необходимо отобразить
//  Курс                           - курс, которой необходимо отобразить
//  Кратность                      - кратность, которую необходимо отобразить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СформироватьСкобки             - признак необходимости скобок
//
// Возвращаемое значение:
//  Строка с данными о курсе и кратности валюты
//
Функция ПолучитьИнформациюКурсаВалютыСтрокой(	Валюта, Курс, Кратность, ВалютаРегламентированногоУчета, 
												СформироватьСкобки = Ложь) Экспорт

	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Возврат "";

	Иначе
		Возврат ?(СформироватьСкобки, "   ( ", "") + Кратность + " "
		      + СокрЛП(Валюта)
		      + " = "
		      + Курс + " " 
		      + СокрЛП(ВалютаРегламентированногоУчета)
		      + ?(СформироватьСкобки, " )", "");
	КонецЕсли;

КонецФункции // ПолучитьИнформациюКурсаВалютыСтрокой()

// Процедура вызывается в обработчике события "Начало выбора" в форме документов.
// Выполняет выбор даты курса и устанавливает переданный курс по выбранной дате.
//
// Параметры:
//  Курс   - число, курс валюты, который надо установить;
//  Валюта - ссылка на справочник, определяет валюту чей курс надо выбрать;
//  Дата   - дата, дата курса по умолчанию.
//
Процедура ВыбратьКурсВалюты(Курс, Кратность, Валюта, Дата) Экспорт

	// Если не заполнена валюта, то курс выбрать нельзя.
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Предупреждение("Для выбора курса нужно выбрать валюту."); 
		Возврат;
	КонецЕсли; 
	
	// Выберем дату курса
	ДатаУстановкиКурса = Дата; 
	Если ВвестиДату(ДатаУстановкиКурса, "Выберите дату установки курса.", ЧастиДаты.Дата) Тогда
		
		// Если дата введена, заполним значение курса и кратности
		СтруктураВалюты = ОбщегоНазначения.ПолучитьКурсВалюты(Валюта, ДатаУстановкиКурса);
		Курс            = СтруктураВалюты.Курс;
		Кратность       = СтруктураВалюты.Кратность;

	КонецЕсли; 

КонецПроцедуры // ВыбратьКурсВалюты()

// Процедура устанавливает список для поля выбора 
//
Процедура УстановитьСписокПоляВыбора(ПолеВыбора, Список) Экспорт

	ПрошлоеЗначение			= ПолеВыбора.Значение;
	ПолеВыбора.СписокВыбора	= Список;
	
	Если ЗначениеЗаполнено(ПрошлоеЗначение) Тогда
		Если  Список.НайтиПоЗначению(ПрошлоеЗначение) <> Неопределено Тогда
			
			Если НЕ ПолеВыбора.Значение = ПрошлоеЗначение Тогда
				ПолеВыбора.Значение = ПрошлоеЗначение;
			КонецЕсли;
			
		Иначе
			ПолеВыбора.Значение = Неопределено;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры // УстановитьСписокПоляВыбора()

// Процедура выводит форму структуры подчиненности документа
//
Процедура ПоказатьСтруктуруПодчиненностиДокумента(ДокументСсылка) Экспорт
	
	ФормаСтруктурыПодчиненности = ПолучитьОбщуюФорму("ФормаСтруктурыПодчиненности");
	
	Если ФормаСтруктурыПодчиненности.Открыта() Тогда
		ФормаСтруктурыПодчиненности.Закрыть();
	КонецЕсли;
	
	ФормаСтруктурыПодчиненности.ДокументСсылка = ДокументСсылка;
	ФормаСтруктурыПодчиненности.Открыть();
	 
КонецПроцедуры // ПоказатьСтруктуруПодчиненностиДокумента()

// Процедура открывает форму для отправки сообщения по электронной почте на линию
// технической поддержки пользователей
// 
// Параметры:
//  НЕТ
//
Процедура ОтправитьСообщениеВОтделТехническойПоддержки() Экспорт


	Если Метаданные.Обработки.Найти("ОтправкаЭлектронногоСообщенияВОтделТехническойПоддержки") <> Неопределено Тогда
		
		ОбработкаОтправки = Обработки.ОтправкаЭлектронногоСообщенияВОтделТехническойПоддержки.Создать();
		ОбработкаОтправки.ТекстСообщения = ОбщегоНазначения.ПолучитьТекстСообщенияВОтделТехническойПоддержки();
		ОбработкаОтправки.ТемаСообщения  = "Сообщение в отдел технической поддержки";
		ОбработкаОтправки.ПолучитьФорму().Открыть();
		
	Иначе

		Адрес = "";
			
		ЗначениеКонстанты = Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Получить().Получить();
			
		Если ТипЗнч(ЗначениеКонстанты) = Тип("ТаблицаЗначений") Тогда
			ПараметрыОтправки = ЗначениеКонстанты.Найти("ПараметрыОтправкиЭлектронногоСообщения", "ИмяРаздела");
			Если ПараметрыОтправки <> Неопределено Тогда
				Адрес = ПараметрыОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтделаТехническойПоддержки[1];
			КонецЕсли; 
		КонецЕсли; 
			
		Если НЕ Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
				
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Адрес"        , Адрес);
			СтруктураПараметров.Вставить("Представление", Адрес);
			СтруктураПараметров.Вставить("Текст"        , ОбщегоНазначения.ПолучитьТекстСообщенияВОтделТехническойПоддержки());
			СтруктураПараметров.Вставить("Тема"         , "Сообщение в отдел технической поддержки");
			Выполнить("УправлениеЭлектроннойПочтой.ОткрытьПисьмоПочтовогоКлиентаОперационнойСистемы(СтруктураПараметров)");
				
		Иначе
				
			СтруктураНовогоПисьма = Новый Структура;
			Если НЕ ПустаяСтрока(Адрес) Тогда
				СписокКому = Новый СписокЗначений;
				СписокКому.Добавить(Адрес, Адрес);
				СтруктураНовогоПисьма.Вставить("Кому", СписокКому);
			КонецЕсли; 
			СтруктураНовогоПисьма.Вставить("Тело"     , ОбщегоНазначения.ПолучитьТекстСообщенияВОтделТехническойПоддержки());
			СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления["ВидыТекстовЭлектронныхПисем"].Текст);
			СтруктураНовогоПисьма.Вставить("Тема"     , "Сообщение в отдел технической поддержки");
				
			Выполнить("УправлениеЭлектроннойПочтой.НаписатьПисьмо(ПараметрыСеанса.ТекущийПользователь, СтруктураНовогоПисьма,,, (НЕ ПустаяСтрока(Адрес)))");
				
		КонецЕсли; 

	КонецЕсли;
КонецПроцедуры

// Функция возвращает представление всех элементов списка в виде строки для вывода в текстовые поля
// 
// Параметры
//	Список - объект список значений
//	МаксЧислоСимволовНаЭлемент - предельное число символов, выводимых для одного элемента, если больше, то окончание заменяется "..."
//	РазделительЭлеменов - строка, используемая для разделения элементов друг от друга
//
Функция ВыгрузитьСписокВСтроку(Список, МаксЧислоСимволовНаЭлемент = 50, РазделительЭлементов = "; ", ВыгружатьПолныеНаименованияОрганизаций=Ложь, ПредставлениеПустойСсылки = "") Экспорт

	Результат = "";
	Для Каждого ЭлементСписка Из Список Цикл
		Если НЕ ВыгружатьПолныеНаименованияОрганизаций Тогда
			Если Не ПустаяСтрока(ЭлементСписка.Представление) Тогда
				ПредставлениеЭлемента = ЭлементСписка.Представление;
			Иначе
				ПредставлениеЭлемента = Строка(ЭлементСписка.Значение);
			КонецЕсли;
			ПредставлениеЭлемента = СокрЛП(ПредставлениеЭлемента);
			Если Не ПустаяСтрока(ПредставлениеЭлемента) Тогда
				
				Если МаксЧислоСимволовНаЭлемент > 0 И Список.Количество() > 1 Тогда
					Если СтрДлина(ПредставлениеЭлемента) > МаксЧислоСимволовНаЭлемент Тогда
						ПредставлениеЭлемента = Лев(ПредставлениеЭлемента, МаксЧислоСимволовНаЭлемент) + "...";
					КонецЕсли;
				КонецЕсли;
			
				Если Не ПустаяСтрока(Результат) Тогда
					Результат = Результат + РазделительЭлементов;
				КонецЕсли;
			
				Результат = Результат + ПредставлениеЭлемента;
				
			КонецЕсли;
		Иначе
			Попытка 
				ПредставлениеЭлемента = ЭлементСписка.Значение.НаименованиеПолное;
			Исключение
				ПредставлениеЭлемента = "";
			КонецПопытки;
			Если Не ПустаяСтрока(Результат) Тогда
				Результат = Результат + РазделительЭлементов;
			КонецЕсли;
		
			Результат = Результат + ПредставлениеЭлемента;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции // ВыгрузитьСписокВСтроку()

// Функция возвращает URL для доступа к картинке из библиотеки картинок из HTML
//
Функция ПолучитьПутьККартинкеДляHTML(Картинка, ПолеHTMLДокумента) Экспорт
	
	МетаУрл	= ПолеHTMLДокумента.ПолучитьURL(Метаданные);
	МетаУрл	= Лев(МетаУрл,Найти(МетаУрл,"mdobject")-1);
	КартИД	= ЗначениеВСтрокуВнутр(Картинка);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Лев(КартИД,НАйти(КартИД,"}")-1);
	
	Если Лев(КартИД,1) = "-" Тогда
		КартИд	= "n"+КартИД;
	Иначе
		КартИД	= Сред(КартИД,3);
	КонецЕсли;
	
	Возврат МетаУрл+"mdpicture/id" + КартИД;
	
КонецФункции // ПолучитьПутьККартинкеДляHTML()

//Процедура вызывает окно заполнения реквизитов входящего документа в случае необходимости
//
// Параметры:
//  Документ 				- Документ объект вызвавший данную процедуру
//  ФормаДокумента 			- Форма документа
//  ВидВходящегоДокумента   - Вид входящего документа (строка)
//
Процедура ЗаполнениеПараметровВходящегоДокумента(Документ, ФормаДокумента, ВидВходящегоДокумента) Экспорт
	
	Если Документ.ЭтоНовый() И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ЗапрашиватьРеквизитыВходящихДокументов") Тогда 
		Если Не ЗначениеЗаполнено(Документ.ВидВходящегоДокумента) Или НЕ ЗначениеЗаполнено(Документ.НомерВходящегоДокумента)
			Или НЕ ЗначениеЗаполнено(Документ.ДатаВходящегоДокумента) Тогда 
			
			ФормаВводаРеквизитовВнешДок = ПолучитьОбщуюФорму("ВводРеквизитовВходящегоДокумента", ФормаДокумента, );
			ФормаВводаРеквизитовВнешДок.мОбъектРодитель 		= Документ;
			
			Если Не ЗначениеЗаполнено(Документ.ВидВходящегоДокумента) Тогда 
				ФормаВводаРеквизитовВнешДок.ВидВходящегоДокумента 	= ВидВходящегоДокумента;
			Иначе 
				ФормаВводаРеквизитовВнешДок.ВидВходящегоДокумента 	= Документ.ВидВходящегоДокумента;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Документ.ДатаВходящегоДокумента) Тогда 
				ФормаВводаРеквизитовВнешДок.ДатаВходящегоДокумента 	= Документ.Дата;
			Иначе 
				ФормаВводаРеквизитовВнешДок.ДатаВходящегоДокумента 	= Документ.ДатаВходящегоДокумента;
			КонецЕсли;
			
			ФормаВводаРеквизитовВнешДок.НомерВходящегоДокумента = Документ.НомерВходящегоДокумента;
			
			ФормаВводаРеквизитовВнешДок.ОткрытьМодально();
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

// Процедура открывает форму настройки документа, 
// если установлена соответствующая настройка пользователя.
//
// Параметры:
//  ДокументОбъект - документ, вызвавший данную процедуру.
//
Процедура ОткрытьФормуНастройкиДокументов(ДокументОбъект) Экспорт
	
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ЗапрашиватьНастройкиДокументаПриВводеНового") Тогда
		
		МетаданныеДокумента = ДокументОбъект.Метаданные();
		
		ФормаНастройки = МетаданныеДокумента.Формы.Найти("ФормаНастройкиДокумента");
		
		Если Не ФормаНастройки = Неопределено Тогда
			ФормаНастройкиДокумента = ДокументОбъект.ПолучитьФорму("ФормаНастройкиДокумента");
			ФормаНастройкиДокумента.ОткрытьМодально();
		КонецЕсли;	
		
	КонецЕсли;

	
КонецПроцедуры	

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА "СОВЕТЫ"
#Если Клиент Тогда

// Отрывает окно "Советы".
//
Процедура ОткрытьСоветы(Кнопка) Экспорт
	
	Если Метаданные.Обработки.Найти("Советы") = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Форма = Обработки.Советы.ПолучитьФорму();
	Форма.ПараметрОтбора = Сред(Кнопка.Имя, 7);
	Форма.Открыть();
	
КонецПроцедуры // ОткрытьСоветы()

// Устанавливает подменю "Советы".
//
Процедура УстановитьПодменюСоветы(КоманднаяПанель, ПараметрОтбора = "ВсеСоветы") Экспорт

	Если Метаданные.Обработки.Найти("Советы") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКнопки = "Советы" + СокрЛП(ПараметрОтбора);
	
	Если НЕ (КоманднаяПанель.Кнопки.Найти(ИмяКнопки) = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	// Поиск кнпоки "Справка".
	ИндексКнопкиСправка = Неопределено;
	
	Для Каждого Кнопка Из КоманднаяПанель.Кнопки Цикл
		
		Если Кнопка.Имя       = "Справка" 
		 ИЛИ Кнопка.Текст     = "Справка" 
		 ИЛИ Кнопка.Подсказка = "Открыть справку" Тогда
		 
		 	ИндексКнопкиСправка = КоманднаяПанель.Кнопки.Индекс(Кнопка);
			Прервать;
			   
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление кнопки "Советы".
	Если КоманднаяПанель.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право Тогда
		
		Если ИндексКнопкиСправка = Неопределено Тогда  // кнопка "Справка" не найдена.
			КоманднаяПанель.Кнопки.Вставить(0,, ТипКнопкиКоманднойПанели.Разделитель);
			КнопкаСоветы = КоманднаяПанель.Кнопки.Вставить(0, ИмяКнопки, ТипКнопкиКоманднойПанели.Действие, "Советы", Новый Действие("ДействияФормыОткрытьСоветы"));
		Иначе
			КнопкаСоветы = КоманднаяПанель.Кнопки.Вставить(ИндексКнопкиСправка, ИмяКнопки, ТипКнопкиКоманднойПанели.Действие, "Советы", Новый Действие("ДействияФормыОткрытьСоветы"));
		КонецЕсли;
		
	Иначе
		
		Если ИндексКнопкиСправка = Неопределено Тогда  // кнопка "Справка" не найдена.
			КоманднаяПанель.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
			КнопкаСоветы = КоманднаяПанель.Кнопки.Добавить(ИмяКнопки, ТипКнопкиКоманднойПанели.Действие, "Советы", Новый Действие("ДействияФормыОткрытьСоветы"));
		Иначе
			КнопкаСоветы = КоманднаяПанель.Кнопки.Вставить(ИндексКнопкиСправка, ИмяКнопки, ТипКнопкиКоманднойПанели.Действие, "Советы", Новый Действие("ДействияФормыОткрытьСоветы"));
		КонецЕсли;
		
	КонецЕсли;
		
	КнопкаСоветы.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	КнопкаСоветы.Картинка    = БиблиотекаКартинок.Советы;
	КнопкаСоветы.Подсказка   = "Советы по " + Метаданные.Синоним;
	
КонецПроцедуры // УстановитьПодменюСоветы()

// Процедура изменяет видимость окна встроенной динамической справки.
//
Процедура ИзменитьВидимостьПанелиПоГоризонтали(Форма, ОтображатьПанель, ИмяОсновнойПанели, ПостфиксЭлементов) Экспорт
	
	Перем Элемент, Граница, Пусто;
	
	ОсновнаяПанель	= Форма.ЭлементыФормы[ИмяОсновнойПанели];
	Панель			= Форма.ЭлементыФормы["Панель" + ПостфиксЭлементов];
	Разделитель		= Форма.ЭлементыФормы["Разделитель" + ПостфиксЭлементов];
	
	Если ОтображатьПанель Тогда
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Право Тогда
			// установить привязку основной панели к разделителю
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Разделитель, ГраницаЭлементаУправления.Лево);
			
			// развернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// развернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			Если Панель.Ширина > Форма.Ширина / 2 Тогда
				// если максимизировать форму с закрытой справкой, а потом открыть справку, то форма
				// будет выглядеть очень некрасиво
				// поэтому необходимо ограничить ширину панели справки в случаях, когда справка получается на шире чем 1/2 формы
				РазницаВШирине = Форма.Ширина - 250 - Разделитель.Лево;
			Иначе
				РазницаВШирине = Панель.Ширина - Макс(250, Мин(Форма.Ширина - 350, Панель.Ширина));
			КонецЕсли;
			Если РазницаВШирине < 0 Тогда
				РазницаВШирине = 0;
			КонецЕсли;
			
			// восстановить привязки разделителя
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Форма.Панель, ГраницаЭлементаУправления.Право);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Разделитель, ГраницаЭлементаУправления.Лево);
			
			// установить привязку панели справки к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Разделитель, ГраницаЭлементаУправления.Право);
			
			Разделитель.Лево = Разделитель.Лево + РазницаВШирине;
		КонецЕсли;
	Иначе
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			ШиринаОсновнойПанели = ОсновнаяПанель.Ширина + Разделитель.Ширина + Панель.Ширина;
			
			// сбросить привязку панели к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
			
			// установить привязку разделителя к панели справки
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Лево);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Лево);
			
			// свернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Право;
			// свернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Право;
			
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Право);
			
			// установить привязку основной панели к форме
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Форма.Панель, ГраницаЭлементаУправления.Право);
			ОсновнаяПанель.Ширина = ШиринаОсновнойПанели;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИзменитьВидимостьПанелиПоГоризонтали()

Процедура ИзменитьВидимостьПанелиПоГоризонталиЛево(Форма, ОтображатьПанель, ПраваяПанель, ЛеваяПанель, Разделитель) Экспорт
	
	Если ОтображатьПанель Тогда
		Если ЛеваяПанель.Свертка = РежимСверткиЭлементаУправления.Лево Тогда
			// установить привязку основной панели к разделителю
			ПраваяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Разделитель, ГраницаЭлементаУправления.Право);
			
			// развернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// развернуть панель
			ЛеваяПанель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// Переместим разделитель к левой панели
			Разделитель.Лево = ЛеваяПанель.Лево + ЛеваяПанель.Ширина;
			
			// восстановить привязки разделителя
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Форма.Панель, ГраницаЭлементаУправления.Лево);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Разделитель, ГраницаЭлементаУправления.Право);
			
			// установить привязку панели справки к разделителю
			ЛеваяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Разделитель, ГраницаЭлементаУправления.Лево);
			
			// Ширину определим от текущего размера формы, за минусом отступов по 8 слева и справа и шириной левой панели и разделителя
			ПраваяПанель.Ширина	= Форма.Ширина - ЛеваяПанель.Ширина - Разделитель.Ширина - 8 * 2;
			ПраваяПанель.Лево	= Разделитель.Лево + Разделитель.Ширина;
		КонецЕсли;
	Иначе
		Если ЛеваяПанель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			ШиринаОсновнойПанели = ПраваяПанель.Ширина + Разделитель.Ширина + ЛеваяПанель.Ширина;
			
			// сбросить привязку панели к разделителю
			ЛеваяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право);
			
			// установить привязку разделителя к панели справки
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЛеваяПанель, ГраницаЭлементаУправления.Право);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЛеваяПанель, ГраницаЭлементаУправления.Право);
			
			// свернуть панель
			ЛеваяПанель.Свертка = РежимСверткиЭлементаУправления.Лево;
			// свернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Лево;
			
			ЛеваяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЛеваяПанель, ГраницаЭлементаУправления.Лево);
			
			// установить привязку основной панели к форме
			ПраваяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Форма.Панель, ГраницаЭлементаУправления.Лево);
			ПраваяПанель.Лево	= 8;
			ПраваяПанель.Ширина	= ШиринаОсновнойПанели;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит надпись и соответствующую ей картинку
//
// Параметры
//  ЭУНадпись, ЭУКартинка - элементы управления формы, соответственно надпись и картинка
//  ТекстСообщения - строка - выводимое сообщение
//  ВажностьСообщения - строка - определяет расцветку текста и картинку
//		допустимые значения: "СообщениеОПроблемах", "ВажнаяИнформация" и "Информация"
//
Процедура ПоказатьИнформациюОДокументе(ЭУНадпись = Неопределено, ЭУКартинка = Неопределено, ТекстСообщения = "", ВажностьСообщения = "") Экспорт 
	
	Если ЭУНадпись = Неопределено Или ЭУКартинка = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ВажностьСообщения = "ВажнаяИнформация" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеВажнаяИнформация;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	ИначеЕсли ВажностьСообщения = "СообщениеОПроблемах" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеОПроблемах;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	ИначеЕсли ВажностьСообщения = "Ошибка" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеОшибка;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	Иначе
		ЭУКартинка.Картинка	= БиблиотекаКартинок.СообщениеИнформация;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
	КонецЕсли;
	ЭУНадпись.Заголовок = ТекстСообщения;
	
КонецПроцедуры // ПоказатьИнформациюОДокументе()

// Переключает интерфейс пользователя в зависимости от переменной
// "глИспользоватьУправленческийУчет"
Процедура ПереключитьПолныйИнтерфейс() Экспорт
	
	ИспользоватьУправленческийУчетЗарплаты = глЗначениеПеременной("глИспользоватьУправленческийУчет");
	
	Если ИспользоватьУправленческийУчетЗарплаты Тогда
    	ГлавныйИнтерфейс.ПереключитьИнтерфейс("Полный");
	Иначе
		ГлавныйИнтерфейс.ПереключитьИнтерфейс("РегламентированныйУчет");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ИЗМЕНЕНИЙ РЕКВИЗИТОВ В ФОРМЕ

// Функция определяет договор, соответствующий указанным значениям
// организации и контрагента
//
// Параметры
//  Организация - организация, по которой определяется договор
//  Контрагент  - конрагент, по которому определяется договор
//
// Возвращаемое значение:
//  Договор - договор контрагентов
//
Функция ПолучитьДоговорПоОрганизацииИКонтрагенту(Организация, Контрагент) Экспорт

	Если НЕ ЗначениеЗаполнено(Организация)
	 ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ПарОрганизация", Организация);
	Запрос.УстановитьПараметр("ПарКонтрагент",  Контрагент);

	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 2 РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Организация = &ПарОрганизация
	|	И ДоговорыКонтрагентов.Владелец    = &ПарКонтрагент
	|	И (ВЫБОР КОГДА ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.Организация = &ПарОрганизация
	|	         ТОГДА ДоговорыКонтрагентов.Ссылка  = ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента
	|	         ИНАЧЕ ДоговорыКонтрагентов.Ссылка <> ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента КОНЕЦ)";

	ТаблицаДоговоров = Запрос.Выполнить().Выгрузить();

	Если ТаблицаДоговоров.Количество() = 1 Тогда
		Возврат ТаблицаДоговоров[0].Договор;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПолучитьДоговорПоОрганизацииИКонтрагенту()


// Процедура управляет отображением панелей формы путем свертки в низ
// Пареметры
//	 Панель - Панель, к низу которой производим привязку панели ВерхняяПанель при свертке панели НижняяПанель
//	 ОтображатьПанель - булево
//	 ВерхняяПанель - панель формы, которая всегда видима
//	 НижняяПанель - панель формы, которую сворачиваем в низ
//	 Разделитель - разделитель верхней и нижней панели
//
Процедура ИзменитьВидимостьПанелиПоВертикалиНиз(Панель, ОтображатьПанель, ВерхняяПанель, НижняяПанель, Разделитель) Экспорт
	
	Если ОтображатьПанель Тогда
		
		Если НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Низ Тогда
			// необходимо развернуть панель
			
			// текущая высота основной панели
			НачальнаяВысотаОсновнойПанели = ВерхняяПанель.Высота;
			
			// на основную панель отдаем половину высоты
			ВерхняяПанель.Высота = Окр(НачальнаяВысотаОсновнойПанели * 0.6 ,0);
			
			// развернем разделитель, устатановим его внизу основной панели, настроим привязки
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			Разделитель.Верх = ВерхняяПанель.Верх + ВерхняяПанель.Высота;
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Верх, Панель, ГраницаЭлементаУправления.Низ);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Низ);
			
			// развернем нижнюю панель,установим ее к разделителю, настроим привязки
			НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Нет;
			НижняяПанель.Верх = Разделитель.Верх + 6;
			НижняяПанель.Высота = НачальнаяВысотаОсновнойПанели - ВерхняяПанель.Высота - 6;
			НижняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Верх);
			НижняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			
		КонецЕсли;
		
		ВерхняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Разделитель, ГраницаЭлементаУправления.Верх);
		
	Иначе // надо скрыть нижнюю панель	
		
		Если НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			
			//это та высота основной панели, которую необходимо установить
			ВысотаОсновнойПанели = НижняяПанель.Верх + НижняяПанель.Высота - ВерхняяПанель.Верх;
			
			// свернем элементы
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Низ;
			НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Низ;
			
			//перенесем ЭУ в низ формы и переопределим привязки
			Разделитель.Верх  = ВысотаОсновнойПанели;
			НижняяПанель.Верх = ВысотаОсновнойПанели;
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			НижняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			
			// распахнем и привяжем основную панель
			ВерхняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			ВерхняяПанель.Высота = ВысотаОсновнойПанели;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьВидимостьПанелиПоВертикали(Форма, ОтображатьПанель, ИмяОсновнойПанели, ПостфиксЭлементов) Экспорт
	
	Перем Элемент, Граница, Пусто;
	
	ОсновнаяПанель	= Форма.ЭлементыФормы[ИмяОсновнойПанели];
	Панель			= Форма.ЭлементыФормы["Панель" + ПостфиксЭлементов];
	Разделитель		= Форма.ЭлементыФормы["Разделитель" + ПостфиксЭлементов];
	
	Если ОтображатьПанель Тогда
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
			// установить привязку основной панели к разделителю
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Низ);
			
			// развернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// развернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// восстановить привязки разделителя
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Форма.Панель, ГраницаЭлементаУправления.Верх);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Низ);
			
			// установить привязку панели справки к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Разделитель, ГраницаЭлементаУправления.Верх);
		КонецЕсли;
	Иначе
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			ВысотаОсновнойПанели = ОсновнаяПанель.Высота + (ОсновнаяПанель.Верх - Панель.Верх);
			
			// сбросить привязку панели к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Низ);
			
			// установить привязку разделителя к панели справки
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Панель, ГраницаЭлементаУправления.Низ);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			
			// свернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Верх;
			// свернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Верх;
			
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Верх);
			
			// установить привязку основной панели к форме
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Форма.Панель, ГраницаЭлементаУправления.Верх);
			ОсновнаяПанель.Верх		= Панель.Верх;
			ОсновнаяПанель.Высота	= ВысотаОсновнойПанели;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли
     
////////////////////////////////////////////////////////////////////////////////
// ИСПРАВЛЕНИЕ ДОКУМЕНТОВ

// Процедуры и функции события "ПередОткрытием" документа исправления

//Возвращает информационное сообщение о состоянии документа
//
Функция ПолучитьОписаниеКадровогоДокумента(Заполнен = Ложь, ЗаполненСОшибками = Ложь, Проведен = Ложь, ЭтоИсправление = Ложь, ДокументИсправлен = Ложь)
	
	ТекстСообщения = "";
	ВажностьСообщения = "";
	
	Если НЕ Заполнен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ не заполнен";
		
	ИначеЕсли ЭтоИсправление Тогда
		ТекстСообщения = "Документ является исправлением документа; ";
		Если ДокументИсправлен Тогда
			ВажностьСообщения = "СообщениеОПроблемах";
			ТекстСообщения = ТекстСообщения + "был исправлен; редактирование документа запрещено"
		ИначеЕсли ЗаполненСОшибками Тогда
			ВажностьСообщения = "СообщениеОПроблемах";
			ТекстСообщения = ТекстСообщения + "поля документа заполнены не полностью или неверно";
		ИначеЕсли Не Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = ТекстСообщения + "не проведен";
		ИначеЕсли Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = ТекстСообщения + "проведен";
		КонецЕсли;
		
	ИначеЕсли ДокументИсправлен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ ";
		ТекстСообщения = ТекстСообщения + "был исправлен; редактирование документа запрещено"
		
	ИначеЕсли ЗаполненСОшибками Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Поля документа заполнены не полностью или неверно";
		
	ИначеЕсли НЕ Проведен Тогда
		ВажностьСообщения = "Информация";
		ТекстСообщения = "Документ не проведен";
		
	ИначеЕсли Проведен Тогда
		ВажностьСообщения = "Информация";
		ТекстСообщения = "Документ проведен";
		
	КонецЕсли;
	
	Возврат Новый Структура("ТекстСообщения,ВажностьСообщения", ТекстСообщения, ВажностьСообщения)
	
КонецФункции

// Возвращает список сотрудников, по которым вводились исправления
//
Функция ПолучитьСотрудниковСКадровымиИсправлениями(ДокументыИсправление, ИмяДок)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Сотрудник
	|ИЗ
	|	Документ." + ИмяДок + ".РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Ссылка В(&Исправления)
	|	И Док.Сторно";
	
	Возврат ПроведениеРасчетов.СформироватьСоответствиеСотрудниковСИсправлениями(ТекстЗапроса, ДокументыИсправление);
	
КонецФункции

// Заполняет информацию о состоянию кадрового документа
//
Процедура ОбновитьОписаниеСостоянияКадровогоДокумента(ЭтотОбъект, ЭтаФорма, ДокументыИсправление) Экспорт
	
	// связанные документы
	ЭтоИсправление = ЗначениеЗаполнено(ЭтотОбъект.ИсправляемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(ДокументыИсправление);
	
	НеЗаполнен = НЕ ЗначениеЗаполнено(ЭтотОбъект.Организация) ИЛИ ЭтотОбъект.РаботникиОрганизации.Количество() = 0;
	
	ЗаполненСОшибками =
		ЭтотОбъект.РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник",Справочники.СотрудникиОрганизаций.ПустаяСсылка())).Количество() > 0
		ИЛИ ЭтаФорма.ДокументЗаполненСОшибками();
		
	ОписаниеСостоянияДокумента = ПолучитьОписаниеКадровогоДокумента(
		НЕ НеЗаполнен,
		ЗаполненСОшибками,
		ЭтотОбъект.Проведен,
		ЭтоИсправление,
		ДокументИсправлен);
	ПоказатьИнформациюОДокументе(
		ЭтаФорма.ЭлементыФормы.НадписьПредупреждение,
		ЭтаФорма.ЭлементыФормы.ПолеКартинкиПредупреждение,
		ОписаниеСостоянияДокумента.ТекстСообщения,
		ОписаниеСостоянияДокумента.ВажностьСообщения);
	
КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ИсправлениеКадровыхДокументовПередОткрытием(ЭтотОбъект, ЭтаФорма, ДокументыИсправление, СотрудникиИсправление) Экспорт
	
	Если НЕ ЭтотОбъект.ЭтоНовый() Тогда
		ДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(ЭтотОбъект.Ссылка, "КритерийОтбора");
		ОбновитьОписаниеСостоянияКадровогоДокумента(ЭтотОбъект, ЭтаФорма, ДокументыИсправление);
		Если ЗначениеЗаполнено(ДокументыИсправление) Тогда
			СотрудникиИсправление = ПолучитьСотрудниковСКадровымиИсправлениями(ДокументыИсправление, ЭтотОбъект.Метаданные().Имя);
		КонецЕсли;
		
	Иначе
		ПоказатьИнформациюОДокументе(
			ЭтаФорма.ЭлементыФормы.НадписьПредупреждение,
			ЭтаФорма.ЭлементыФормы.ПолеКартинкиПредупреждение,
			"Документ не заполнен",
			"СообщениеОПроблемах");
		
	КонецЕсли;
	
КонецПроцедуры

// Процедуры и функции события "ПриОткрытием" документа исправления

// Устанавливает доступность и видимость меню исправления
//
Процедура УстановитьКнопкиИсправленияКадровогоДокумента(ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументИсправлен, ИсправленВесьДокумент, ДокументыИсправление, СотрудникиИсправление)
	
	Если СотрудникиИсправление = Неопределено Тогда
		КнопкаИсправлениеВесьДокумент		= СтруктураМенюИсправление.ИсправлениеВесьДокумент;
		КнопкаОтменаИсправление				= СтруктураМенюИсправление.ОтменаИсправление;
	Иначе
		МенюИсправление						= СтруктураМенюИсправление.МенюИсправление;
		КнопкаИсправлениеТекущийСотрудник	= СтруктураМенюИсправление.ИсправлениеТекущийСотрудник;
		КнопкаИсправлениеВесьДокумент		= СтруктураМенюИсправление.ИсправлениеВесьДокумент;
		КнопкаИсправлениеСписокСотрудников	= СтруктураМенюИсправление.ИсправлениеСписокСотрудников;
		КнопкаОтменаИсправление				= СтруктураМенюИсправление.ОтменаИсправление;
	КонецЕсли;
	
	Если ДокументИсправлен = Неопределено Тогда
		ДокументИсправлен = ЗначениеЗаполнено(ДокументыИсправление);
	КонецЕсли;
	
	Если ИсправленВесьДокумент = Неопределено Тогда
		ИсправленВесьДокумент = ДокументИсправлен;
		Если ИсправленВесьДокумент Тогда
			Для Каждого СтрокаТЧ Из ЭтотОбъект.РаботникиОрганизации Цикл
				ИсправленВесьДокумент = СотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
				Если НЕ ИсправленВесьДокумент Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Кнопки = ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки;
	Если СотрудникиИсправление = Неопределено Тогда
		Если ДокументИсправлен Тогда
			Если Кнопки.Найти("Исправить") <> Неопределено Тогда
				Кнопки.Удалить(Кнопки.Исправить);
			КонецЕсли;
			Если Кнопки.Найти("ОтменитьИсправление") = Неопределено Тогда
				НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаОтменаИсправление.Действие);
				ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаОтменаИсправление);
			КонецЕсли;
			Кнопки.Исправить.Кнопки.ОтменитьИсправление.Доступность = НЕ ЭтаФорма.ТолькоПросмотр;
		Иначе
			Если Кнопки.Найти("ОтменитьИсправление") <> Неопределено Тогда
				Кнопки.Удалить(Кнопки.ОтменитьИсправление);
			КонецЕсли;
			Если Кнопки.Найти("Исправить") = Неопределено Тогда
				НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаИсправлениеВесьДокумент.Действие);
				ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаИсправлениеВесьДокумент);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе

		Кнопки.Исправить.Кнопки.ТекущийСотрудник.Доступность	= ?(ЭтаФорма.ТолькоПросмотр, Ложь, НЕ ИсправленВесьДокумент);
		Кнопки.Исправить.Кнопки.ВесьДокумент.Доступность		= ?(ЭтаФорма.ТолькоПросмотр, Ложь, НЕ ДокументИсправлен);
		Кнопки.Исправить.Кнопки.СписокСотрудников.Доступность	= ?(ЭтаФорма.ТолькоПросмотр, Ложь, НЕ ИсправленВесьДокумент);
		
		Если ДокументИсправлен И Кнопки.Найти("ОтменитьИсправление") = Неопределено Тогда
			НоваяКнопка = Кнопки.Вставить(Кнопки.Индекс(Кнопки.Найти("Исправить"))+1, "Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаОтменаИсправление.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаОтменаИсправление);
		ИначеЕсли Кнопки.Найти("ОтменитьИсправление") = КнопкаОтменаИсправление И НЕ ДокументИсправлен Тогда
			Кнопки.Удалить(Кнопки.ОтменитьИсправление);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Устанавливает видимость в зависимости от наличия перерассчитываемого документа
//
Процедура ОбновитьДоступностьЭлементовФормыДляКадровыхИсправлений(ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументыИсправление, СотрудникиИсправление)
	
	ЭтоИсправление		= ЗначениеЗаполнено(ЭтотОбъект.ИсправляемыйДокумент);
	ДокументИсправлен	= ЗначениеЗаполнено(ДокументыИсправление);
	
	ИсправленВесьДокумент = ДокументИсправлен;
	Если СотрудникиИсправление <> Неопределено И ИсправленВесьДокумент Тогда
		Для Каждого СтрокаТЧ Из ЭтотОбъект.РаботникиОрганизации Цикл
			ИсправленВесьДокумент = СотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
			Если НЕ ИсправленВесьДокумент Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЭтаФорма.ТолькоПросмотр = ДокументИсправлен;
	НастройкаПравДоступа.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	ЭтаФорма.ЭлементыФормы.Организация.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр ИЛИ ЭтоИсправление;
	
	УстановитьКнопкиИсправленияКадровогоДокумента(
		ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументИсправлен, ИсправленВесьДокумент, ДокументыИсправление, СотрудникиИсправление);
	
	Элементы = ЭтаФорма.ЭлементыФормы;
	
	Элементы.ПанельОткрытьИсправление.Свертка	= ?(ДокументИсправлен, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Право);
	Элементы.ПанельОткрытьИсходный.Свертка		= ?(ЭтоИсправление, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Право);
	
	Если СотрудникиИсправление <> Неопределено И НЕ ЭтаФорма.ТолькоПросмотр Тогда
		МожноЗаполнять = НЕ ЭтоИсправление;
		СоставМенюЗаполнить = Неопределено;
		Если Элементы.ДействияФормы.Кнопки.Найти("ПодменюЗаполнить") <> Неопределено Тогда
			СоставМенюЗаполнить = Элементы.ДействияФормы.Кнопки.ПодменюЗаполнить.Кнопки;
		КонецЕсли;
		Если Элементы.КоманднаяПанельРаботникиОрганизации.Кнопки.Найти("ПодменюЗаполнить") <> Неопределено Тогда
			СоставМенюЗаполнить = Элементы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПодменюЗаполнить.Кнопки;
		КонецЕсли;
		Если СоставМенюЗаполнить <> Неопределено Тогда
			Для Каждого Кнопка Из СоставМенюЗаполнить Цикл
				Если Кнопка.ТипКнопки <> ТипКнопкиКоманднойПанели.Разделитель Тогда
					Кнопка.Доступность = МожноЗаполнять
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДоступностьЭлементовФормы()

// Процедура - обработчик события формы "ПриОткрытии" 
//
Процедура ИсправлениеКадровыхДокументовПриОткрытии(ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументыИсправление = Неопределено, СотрудникиИсправление = Неопределено) Экспорт
	
	Если СотрудникиИсправление = Неопределено Тогда
		СтруктураМенюИсправление = Новый Структура;
		СтруктураМенюИсправление.Вставить("ИсправлениеВесьДокумент",		ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.Исправить);
		СтруктураМенюИсправление.Вставить("ОтменаИсправление",				ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.ОтменитьИсправление);
	Иначе
		МенюИсправление = ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.Исправить;
		СтруктураМенюИсправление = Новый Структура;
		СтруктураМенюИсправление.Вставить("МенюИсправление",				МенюИсправление);
		СтруктураМенюИсправление.Вставить("ИсправлениеТекущийСотрудник",	МенюИсправление.Кнопки.ТекущийСотрудник);
		СтруктураМенюИсправление.Вставить("ИсправлениеВесьДокумент",		МенюИсправление.Кнопки.ВесьДокумент);
		СтруктураМенюИсправление.Вставить("ИсправлениеСписокСотрудников",	МенюИсправление.Кнопки.СписокСотрудников);
		СтруктураМенюИсправление.Вставить("ОтменаИсправление",				ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.ОтменитьИсправление);
	КонецЕсли;
	
	ОбновитьДоступностьЭлементовФормыДляКадровыхИсправлений(ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументыИсправление, СотрудникиИсправление);
	
КонецПроцедуры

// Процедуры обработчики событий формы и элементов формы документа

// Функция установливает имя и доступность кнопки ТекущийСотрудник механизма исправлений
//
Функция ОбновитьТекущегоСотрудникаДляКадровыхИсправлений(ЭтаФорма, СотрудникиИсправление, ТекущийСотрудник)
	
	ТекущиеДанные	= ЭтаФорма.ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		НовыйСотрудник = ТекущиеДанные.Сотрудник;
	Иначе
		НовыйСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	ФИО = "";
	
	Если ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.Найти("Исправить") <> Неопределено И ТекущийСотрудник <> НовыйСотрудник Тогда
		ФИО = ОбновитьКнопкуИсправленияРасчетовСотрудника(
			ТипЗнч(НовыйСотрудник),
			НовыйСотрудник,
			СотрудникиИсправление,
			ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.Исправить.Кнопки.ТекущийСотрудник,
			"Строки текущего сотрудника",
			"Строки");
	КонецЕсли;
	
	ТекущийСотрудник = НовыйСотрудник;
	
КонецФункции

// Процедура - обработчик события "ОбработкаОповещения" формы
//
Процедура ИсправлениеКадровыхДокументовОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументыИсправление = Неопределено, СотрудникиИсправление = Неопределено) Экспорт
	
	Если ИмяСобытия = "ОбновитьФорму" И НЕ ЭтотОбъект.ЭтоНовый() Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Команда = "";
			Если Параметр.Свойство("Команда",Команда) Тогда  // Источник прислал структуру параметров с командой
				Если Команда = "ДоступностьИсправленногоДокумента" Тогда
					Если Параметр.Объект = ЭтотОбъект.Ссылка Тогда
						Если СотрудникиИсправление = Неопределено И ДокументыИсправление = Неопределено Тогда
							ДокументыИсправление = Источник;
							
						ИначеЕсли СотрудникиИсправление <> Неопределено И ДокументыИсправление.Найти(Источник) = Неопределено Тогда
							ДокументыИсправление.Добавить(Источник);
							СотрудникиИсправление = ПолучитьСотрудниковСКадровымиИсправлениями(ДокументыИсправление, ЭтотОбъект.Метаданные().Имя);
							
						КонецЕсли;
						
						ОбновитьДоступностьЭлементовФормыДляКадровыхИсправлений(ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументыИсправление, СотрудникиИсправление);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы
//
Процедура ИсправлениеКадровыхДокументовОбработкаВыбора(ЗначениеВыбора, Источник, ЭтотОбъект, ЭтаФорма, СотрудникиИсправление, ТекущийСотрудник) Экспорт
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) И Команда = "ЗаполнитьСписокРаботников" Тогда
			ОбновитьТекущегоСотрудникаДляКадровыхИсправлений(ЭтаФорма, СотрудникиИсправление, ТекущийСотрудник);
			
		ИначеЕсли ЗначениеВыбора.Свойство("Команда",Команда) И Команда = "ЗаполнитьДокументИсправление" Тогда
			ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, ЗначениеВыбора.ВыбранныеСотрудники);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура оповещает исходный, исправляемый документ
//
Процедура ИсправлениеКадровыхДокументовПослеЗаписи(ЭтотОбъект) Экспорт
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ИсправляемыйДокумент) Тогда
		Оповестить("ОбновитьФорму", Новый Структура("Команда, Объект","ДоступностьИсправленногоДокумента", ЭтотОбъект.ИсправляемыйДокумент), ЭтотОбъект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события табличной части "ПриАктивизацииСтроки"
//
Процедура ИсправлениеКадровыхДокументовПриАктивизацииСтроки(Элемент, КоманднаяПанель, СотрудникиИсправление = Неопределено, ТекущийСотрудник = Неопределено) Экспорт
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	МожноРедактироватьСтроку = (ДанныеСтроки = Неопределено ИЛИ НЕ ДанныеСтроки.Сторно)
		И (СотрудникиИсправление = Неопределено ИЛИ СотрудникиИсправление[ТекущийСотрудник] = Неопределено);
	КоманднаяПанель.Кнопки.Действие1.Доступность			= МожноРедактироватьСтроку;
	КоманднаяПанель.Кнопки.Действие2.Доступность			= МожноРедактироватьСтроку;
	Элемент.КонтекстноеМеню.Кнопки.Скопировать.Доступность	= МожноРедактироватьСтроку;
	Элемент.КонтекстноеМеню.Кнопки.Изменить.Доступность		= МожноРедактироватьСтроку;
	
КонецПроцедуры

// Процедура - обработчик события табличной части "ПриАктивизацииСтроки"
//
Процедура ИсправлениеКадровыхДокументовПриАктивизацииСтрокиОбработчикОжидания(ЭтаФорма, СотрудникиИсправление, ТекущийСотрудник) Экспорт
	
	ОбновитьТекущегоСотрудникаДляКадровыхИсправлений(ЭтаФорма, СотрудникиИсправление, ТекущийСотрудник);
	
КонецПроцедуры

// Процедура - обработчик события табличной части "ПриПолученииДанных"
//
Процедура ИсправлениеКадровыхДокументовПриПолученииДанных(ОформленияСтрок, СотрудникиИсправление = Неопределено) Экспорт
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Ячейки 		 = ОформлениеСтроки.Ячейки;
		
		Если ДанныеСтроки.Сторно Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			Для Каждого Ячейка Из Ячейки Цикл
				Ячейка.ТолькоПросмотр = Истина;
			КонецЦикла;
		КонецЕсли;
		
		Если СотрудникиИсправление <> Неопределено И СотрудникиИсправление[ДанныеСтроки.Сотрудник] <> Неопределено Тогда
			ОформлениеСтроки.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события табличной части "ПриОкончанииРедактирования"
//
Процедура ИсправлениеКадровыхДокументовПриОкончанииРедактирования(ОтменаРедактирования, ЭтаФорма, СотрудникиИсправление, ТекущийСотрудник) Экспорт
	
	Если НЕ ОтменаРедактирования Тогда
		ОбновитьТекущегоСотрудникаДляКадровыхИсправлений(ЭтаФорма, СотрудникиИсправление, ТекущийСотрудник);
	КонецЕсли;
	
КонецПроцедуры

// Процедуры и функции события кнопок исправлений

// Процедура отменяет для текущего документа все последующие документы-исправления
//
Процедура ОтменитьИсправлениеДокумента(ИсправленныйДокумент, ИмяРеквизитаИсправляемыйДокумент = "ПерерассчитываемыйДокумент") Экспорт 
	
	МетаданныеДокумента = ИсправленныйДокумент.Метаданные();
	РежимПоиска = ?(МетаданныеДокумента.Реквизиты.Найти("Сотрудник") = Неопределено, "КритерийОтбора","ТаблицаДокумента");	
	ИмяДокумента = МетаданныеДокумента.Имя;
	
	ИсправленияКОтмене = Новый Массив;
	Исправление = ПроведениеРасчетов.ПолучитьДокументИсправление(ИсправленныйДокумент, РежимПоиска, ИмяДокумента, ИмяРеквизитаИсправляемыйДокумент);
	Пока ЗначениеЗаполнено(Исправление) Цикл
		
		Если РежимПоиска = "КритерийОтбора" Тогда
			ИсправлениеСледующегоУровня = Новый Массив;
			Для Каждого Значение Из Исправление Цикл
				ИсправленияКОтмене.Добавить(Значение);
				Для Каждого ЗначениеСледующегоУровня Из ПроведениеРасчетов.ПолучитьДокументИсправление(Значение, РежимПоиска, ИмяДокумента, ИмяРеквизитаИсправляемыйДокумент) Цикл
					ИсправлениеСледующегоУровня.Добавить(ЗначениеСледующегоУровня);
				КонецЦикла;
			КонецЦикла;
			Исправление = ИсправлениеСледующегоУровня;
		Иначе
			ИсправленияКОтмене.Добавить(Исправление);
			Исправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Исправление, РежимПоиска, ИмяДокумента, ИмяРеквизитаИсправляемыйДокумент);
		КонецЕсли;
		
	КонецЦикла;
	
	ВсегоИсправлений = ИсправленияКОтмене.Количество();
	Если ВсегоИсправлений <> 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Исправления",ИсправленияКОтмене);
		
		Если МетаданныеДокумента.Реквизиты.Найти("ПериодРегистрации") <> Неопределено Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	МИНИМУМ(Документы.ПериодРегистрации) КАК ПериодРегистрацииС,
			|	МАКСИМУМ(Документы.ПериодРегистрации) КАК ПериодРегистрацииПо,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Документы.ПериодРегистрации) КАК ВсегоПериодовРегистрации
			|ИЗ
			|	Документ." + ИмяДокумента + " КАК Документы
			|ГДЕ
			|	Документы.Ссылка В (&Исправления)";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	МИНИМУМ(Документы.Дата) КАК ПериодРегистрацииС,
			|	МАКСИМУМ(Документы.Дата) КАК ПериодРегистрацииПо,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(Документы.Дата, МЕСЯЦ)) КАК ВсегоПериодовРегистрации
			|ИЗ
			|	Документ." + ИмяДокумента + " КАК Документы
			|ГДЕ
			|	Документы.Ссылка В (&Исправления)";
		КонецЕсли;
		Запрос.Выполнить();
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Если Выборка.ВсегоПериодовРегистрации = 1 Тогда
			Месяц = Формат(Выборка.ПериодРегистрацииС, "ДФ=MMMM");
			ОбщегоНазначения.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 5, Перечисления.ПолФизическихЛиц.Мужской, Месяц);
			ОписаниеПериода = НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г."
		ИначеЕсли Выборка.ВсегоПериодовРегистрации = 2 Тогда
			Месяц = Формат(Выборка.ПериодРегистрацииС, "ДФ=MMMM");
			ОбщегоНазначения.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 5, Перечисления.ПолФизическихЛиц.Мужской, Месяц);
			ОписаниеПериода = НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г. и "; 
			Месяц = Формат(Выборка.ПериодРегистрацииПо, "ДФ=MMMM");
			ОбщегоНазначения.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 5, Перечисления.ПолФизическихЛиц.Мужской, Месяц);
			ОписаниеПериода = ОписаниеПериода + НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г." 
		Иначе
			Месяц = Формат(Выборка.ПериодРегистрацииС, "ДФ=MMMM");
			ОбщегоНазначения.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 2, Перечисления.ПолФизическихЛиц.Мужской, Месяц);
			ОписаниеПериода = "в период с " + НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г. по "; 
			Месяц = Формат(Выборка.ПериодРегистрацииПо, "ДФ=MMMM");
			ОбщегоНазначения.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 1, Перечисления.ПолФизическихЛиц.Мужской, Месяц);
			ОписаниеПериода = ОписаниеПериода + НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г." 
		КонецЕсли;
		
		ТекстВопроса = ОбщегоНазначения.ФормаМножественногоЧисла("Найден ","Найдено ", "Найдено ", ВсегоИсправлений) + ВсегоИсправлений 
			+ ОбщегоНазначения.ФормаМножественногоЧисла(" документ-исправление", " документа-исправления", " документов-исправлений", ВсегоИсправлений) 
			+ ОбщегоНазначения.ФормаМножественногоЧисла(", зарегистрированный ", ", зарегистрированных ", ", зарегистрированных ", ВсегоИсправлений) 
			+ ОписаниеПериода + " Отменить исправления?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК,);
		Если Ответ = КодВозвратаДиалога.ОК ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
			ОбработкаКомментариев.УдалитьСообщения();
			Заголовок = РаботаССообщениями.КомментарийРасчета("Удаление документов-исправлений");
			Если ВсегоИсправлений > 1 Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			Для Сч = 1 По ВсегоИсправлений Цикл
				Значение = ИсправленияКОтмене[ВсегоИсправлений - Сч];
				Документ = Значение.ПолучитьОбъект();
				РаботаССообщениями.КомментарийРасчета("Документ №" + Документ.Номер + " от " + Документ.Дата + " обработан успешно. ", Заголовок, "Открыть", Значение);
				Документ[ИмяРеквизитаИсправляемыйДокумент] = Неопределено;
				Документ.ПометкаУдаления = Истина;
				Попытка
					Документ.Записать(?(Документ.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись));
				Исключение
					Если ВсегоИсправлений > 1 Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
					РаботаССообщениями.КомментарийРасчета("Документ №" + Документ.Номер + " от " + Документ.Дата + " удалить не удалось! Процедура отмены исправлений отменена. ", , "Открыть", Значение, Перечисления.ВидыСообщений.Ошибка);
					ОбработкаКомментариев.ПоказатьСообщения();
					Возврат;
				КонецПопытки;
			КонецЦикла;
			Если ВсегоИсправлений > 1 Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			ОбработкаКомментариев.ПоказатьСообщения();
			
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипДанных, ТекущийСотрудник, СотрудникиСИсправлениями, Кнопка, ИмяБезСотрудника = "Расчеты текущего сотрудника", ИмяССотрудником = "Расчеты") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТекущийСотрудник) Тогда
		Кнопка.Текст = ИмяБезСотрудника;
		Кнопка.Доступность = Истина;
		Возврат ""
		
	Иначе
		
		ФИО = ОбщегоНазначения.ПредставлениеРаботника(ТекущийСотрудник, 2);
		
		Кнопка.Текст = ИмяССотрудником + " " + ФИО;
		Кнопка.Доступность = (СотрудникиСИсправлениями[ТекущийСотрудник] = Неопределено);
		
		Возврат ФИО;
		
	КонецЕсли;
	
КонецФункции

// Записывает документ спросив об этом у пользователя
//
// Параметры
//  Объект        - ДокументОбъект
//  ФормаОбъекта  – Тип - Форма
//                 форма документа из которого вызвана функция
//  ТекстВопроса  – Тип – Строка
//                 текст вопроса
//
// Возвращаемое значение:
//   Истина   – если не требуется запись документа или запись прошла успешно
//   Ложь     - отказ пользователя от записи или не удачная попытка записи
//
Функция ЗаписатьДокументПередВыполнениемДействия(Объект, ФормаОбъекта, ТекстВопроса) Экспорт
	
	Если Объект.Модифицированность() Тогда
		Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Попытка
				Возврат ФормаОбъекта.ЗаписатьВФорме();
			Исключение
				Возврат Ложь;
			КонецПопытки;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 	
	
	Возврат Истина;
	
КонецФункции // ЗаписатьДокументПередВыполнениемДействия()

// Процедура создает новый документ, заполняет его данными исправляемого документа 
// 	и предъявляет пользователю для дальнейшей работы
//
// Параметры
//	ИсправляемыйДокумент - тип ДокументОбъект.<Имя документа> - документ, для которого вводится исправление
//  ФормаИсправляемогоДокумента - форма этого документа
//  Сотрудники - массив сотрудников, по которым выполняется исправление; необязательный, если не указан - по всем
//
Функция ВвестиДокументИсправление(ИсправляемыйДокумент, ФормаИсправляемогоДокумента = Неопределено, Сотрудники = Неопределено, ПериодРегистрации = Неопределено) Экспорт 
	
	МД = ИсправляемыйДокумент.Метаданные();
	
	Если ИсправляемыйДокумент.Проведен ИЛИ МД.Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить Тогда
		Если ФормаИсправляемогоДокумента <> Неопределено Тогда
			ТекстВопроса = "Для исправления необходимо записать документ. Продолжить?";
			Если НЕ ЗаписатьДокументПередВыполнениемДействия(ИсправляемыйДокумент, ФормаИсправляемогоДокумента, ТекстВопроса) Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			Исправление = Документы[МД.Имя].СоздатьДокумент();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Нарушение прав доступа!");
			Возврат Неопределено;
    	КонецПопытки;
			
		Если МД.Реквизиты.Найти("ПериодРегистрации") <> Неопределено Тогда
			Исправление.ПериодРегистрации = Макс(?(ЗначениеЗаполнено(ПериодРегистрации),ПериодРегистрации,НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату())),ДобавитьМесяц(ИсправляемыйДокумент.ПериодРегистрации,1));
		КонецЕсли;
		Исправление.ЗаполнитьПоПерерассчитываемомуДокументу(ИсправляемыйДокумент, Сотрудники);
		ФормаДокумента = Исправление.ПолучитьФорму(,,ИсправляемыйДокумент.Ссылка);
		ФормаДокумента.Открыть();
		
		Возврат ФормаДокумента;
		
	Иначе
		Предупреждение("Исправить можно только проведенный документ!");
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Создает документ-исправление для текущего сотрудник
//
Процедура ВвестиКадровоеИсправлениеТекущегоСотрудника(ЭтотОбъект, ЭтаФорма, ТекущийСотрудник) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТекущийСотрудник) Тогда
		Предупреждение("Не выбран сотрудник для исправления расчетов!");
		Возврат;
	КонецЕсли;
	
	ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, ТекущийСотрудник);
	
КонецПроцедуры

// Создает документ-исправление для переданного списка сотрудников
//
Процедура ВвестиКадровоеИсправлениеСпискаСотрудников(ЭтотОбъект, ЭтаФорма, СотрудникиИсправление) Экспорт
	
	Если НЕ ЭтотОбъект.Проведен Тогда
		Предупреждение("Исправить можно только проведенный документ!");
		Возврат;
	КонецЕсли;
		
	ТекстВопроса = "Для исправления необходимо записать документ. Продолжить?";
	Если НЕ ЗаписатьДокументПередВыполнениемДействия(ЭтотОбъект, ЭтаФорма, ТекстВопроса) Тогда
		Возврат;
	КонецЕсли;
	
	МД = ЭтотОбъект.Метаданные();
	
	СписокСотрудников = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Сотрудник,
	|	Док.Сотрудник.Наименование КАК Наименование
	|ИЗ
	|	Документ." + МД.Имя + ".РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если СотрудникиИсправление[Выборка.Сотрудник] = Неопределено Тогда
			СписокСотрудников.Добавить(Выборка.Сотрудник,Выборка.Наименование)
		КонецЕсли;
	КонецЦикла;
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораСотрудников", ЭтаФорма, ЭтотОбъект.Ссылка);
	Форма.СписокСотрудников = СписокСотрудников;
	Форма.Заголовок = "Сотрудники документа " + МД.Синоним + " №" + ЭтотОбъект.Номер + " от " + Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	Форма.Открыть();
	
КонецПроцедуры

// Процедура отмены документов-исправлений
//
Процедура ОтменитьКадровоеИсправление(ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументыИсправление, СотрудникиИсправление = Неопределено, ТекущийСотрудник = Неопределено) Экспорт
	
	ОтменитьИсправлениеДокумента(ЭтотОбъект.Ссылка, "ИсправляемыйДокумент");
	
	ДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(ЭтотОбъект.Ссылка, "КритерийОтбора");
	
	Если СотрудникиИсправление <> Неопределено Тогда
		СотрудникиИсправление = ПолучитьСотрудниковСКадровымиИсправлениями(ДокументыИсправление, ЭтотОбъект.Метаданные().Имя);
	КонецЕсли;
	ОбновитьДоступностьЭлементовФормыДляКадровыхИсправлений(ЭтотОбъект, ЭтаФорма, СтруктураМенюИсправление, ДокументыИсправление, СотрудникиИсправление);
	
	Если СотрудникиИсправление <> Неопределено Тогда
		ОбновитьКнопкуИсправленияРасчетовСотрудника(
			ТипЗнч(ТекущийСотрудник),
			ТекущийСотрудник,
			СотрудникиИсправление,
			ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.Исправить.Кнопки.ТекущийСотрудник,
			"Строки текущего сотрудника",
			"Строки");
	КонецЕсли;
	
	ЭтаФорма.Обновить();
	
КонецПроцедуры

// Обработчики информационных гиперссылок

// Процедура показывает документы исправления
// Параметры
//	ФормаДокумента - форма документа, из которой вызвана команда показа исправлений
//	Ссылка - ссылка на текущий документ, исправления которого необходимо показать
//  ДокументыИсправление - Массив документов, которые исправляли текущий документ
//	ДокументСторнирование - ссылка на документ Сторнирование, который сторнировал текущий документ
//
Процедура ПоказатьИсправления(ФормаДокумента, Ссылка, ДокументыИсправление, ДокументСторнирование = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ДокументыИсправление) Тогда
		Если ТипЗнч(ДокументыИсправление) = Тип("Массив") Тогда
			Если ДокументыИсправление.Количество() = 1 Тогда
				// если документ-исправление один, то откроем его
				ДокументыИсправление[0].ПолучитьФорму(, ФормаДокумента).Открыть();
				
			Иначе
				// откроем список документов, которые исправили текущий
				Форма = КритерииОтбора.ДокументыИсправления.ПолучитьФорму(, ФормаДокумента);
				Форма.ИсходныйДокумент = Ссылка;
				Форма.Открыть();
				
			КонецЕсли;
			
		Иначе
			// если документ-исправление один, то откроем его
			ДокументыИсправление.ПолучитьФорму(, ФормаДокумента).Открыть();
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ДокументСторнирование) Тогда
		ДокументСторнирование.ПолучитьФорму(, ФормаДокумента).Открыть();
	КонецЕсли;
	
КонецПроцедуры

// Процедура открывает исправленный документ
//
Процедура ОткрытьИсходныйДокумент(ЭтотОбъект, ЭтаФорма) Экспорт
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ИсправляемыйДокумент) Тогда
		ЭтотОбъект.ИсправляемыйДокумент.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
	
КонецПроцедуры

// Процедуры для расчетных документов

// В документах на одного сотрудника (отпуск, б/л и пр.) в зависимости от состояния 
// 	документа кнопки исправлений либо не показываются вообще, либо показывается одна из них
//
// Параметры
//	ПериодРегистрацииДокумента - дата - определяет месяц начисления документа
//  ДокументИсправлен, ДокументСторнирован - булево, флажки состояния документа
//	Кнопки - коллекция кнопок соответствующей панели документа
//  КнопкаИсправление, КнопкаОтменаИсправление - кнопки-эталоны
//
Процедура УстановитьКнопкиИсправленияДокументаОдногоСотрудника(ПериодРегистрацииДокумента, ДокументИсправлен, ДокументСторнирован, Кнопки, КнопкаИсправление, КнопкаОтменаИсправление) Экспорт
	
	КнопкаПанелиОтменитьИсправление = Кнопки.Найти("ОтменитьИсправление");
	КнопкаПанелиИсправиление        = Кнопки.Найти("Исправить");
    РазделительИсправление			= Кнопки.Найти("РазделительИсправление");
	
	Если КнопкаПанелиИсправиление <> Неопределено ИЛИ КнопкаПанелиОтменитьИсправление <> Неопределено Тогда
		АктивнаяКнопка = Неопределено;
		Если НЕ ДокументСторнирован Тогда // Документ не был отсторнирован
			Если ДокументИсправлен Тогда  // Документ исправлен
				АктивнаяКнопка     = КнопкаОтменаИсправление;
				УдаляемаяКнопка    = КнопкаПанелиИсправиление;
			ИначеЕсли ПериодРегистрацииДокумента < НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату()) Тогда
				АктивнаяКнопка     = КнопкаИсправление;
				УдаляемаяКнопка    = КнопкаПанелиОтменитьИсправление;
			КонецЕсли;
		КонецЕсли;
		Если АктивнаяКнопка = Неопределено Тогда
			Если КнопкаПанелиИсправиление <> Неопределено Тогда
				Кнопки.Удалить(КнопкаПанелиИсправиление);
			КонецЕсли;
			
			Если КнопкаПанелиОтменитьИсправление <> Неопределено Тогда
				Кнопки.Удалить(КнопкаПанелиОтменитьИсправление);
			КонецЕсли;
			
			Если РазделительИсправление <> Неопределено Тогда
				Кнопки.Удалить(РазделительИсправление);
			КонецЕсли;
		Иначе 
			Если АктивнаяКнопка = КнопкаОтменаИсправление И КнопкаПанелиОтменитьИсправление = Неопределено Тогда
				АктивнаяКнопка = Кнопки.Вставить(Кнопки.Индекс(УдаляемаяКнопка), "Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаОтменаИсправление.Действие);
				ЗаполнитьЗначенияСвойств(АктивнаяКнопка, КнопкаОтменаИсправление);
				
			ИначеЕсли АктивнаяКнопка = КнопкаИсправление И КнопкаПанелиИсправиление = Неопределено Тогда
				АктивнаяКнопка = Кнопки.Вставить(Кнопки.Индекс(УдаляемаяКнопка), "Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаИсправление.Действие);
				ЗаполнитьЗначенияСвойств(АктивнаяКнопка, КнопкаИсправление);
			КонецЕсли;
			Если УдаляемаяКнопка <> Неопределено Тогда
				Кнопки.Удалить(УдаляемаяКнопка);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ПериодРегистрацииДокумента < НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату()) Тогда
		Кнопки.Вставить(Кнопки.Индекс(Кнопки.Найти("СвязанныеДокументы")) + 1, "РазделительИсправление", ТипКнопкиКоманднойПанели.Разделитель,);
		АктивнаяКнопка = Кнопки.Вставить(Кнопки.Индекс(Кнопки.Найти("РазделительИсправление")) + 1, "Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаИсправление.Действие);
		ЗаполнитьЗначенияСвойств(АктивнаяКнопка, КнопкаИсправление);
	КонецЕсли;
	
КонецПроцедуры

// По описателям состояния расчетного документа (флажкам) формирует текст инфо-строки и важность сообщения
//
// Параметры
//	НеЗаполнен,ЗаполненСОшибками,Рассчитан,Проведен,ЭтоИсправление,ДокументИсправлен,Отсторнирован - булево (все)
//		описывают достижение документом того или иного состояния
//
// Возвращаемое значение:
//	Структура из двух строковых значений - ТекстСообщения и ВажностьСообщения
//
Функция ПолучитьОписаниеРасчетногоДокумента(Заполнен = Ложь, ЗаполненСОшибками = Ложь, Рассчитан = Ложь, Проведен = Ложь, ЭтоИсправление = Ложь, ДокументИсправлен = Ложь, Отсторнирован = Ложь, ЯвляетсяПродолжением = Ложь) Экспорт 
	
	ТекстСообщения = "";
	ВажностьСообщения = "";
	
	Если НЕ Заполнен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ не заполнен";
	ИначеЕсли ЭтоИсправление Тогда
		ТекстСообщения = "Документ является исправлением документа прошлого периода; ";
		Если ДокументИсправлен Тогда
			ВажностьСообщения = "СообщениеОПроблемах";
			Если НЕ Рассчитан Тогда
				ТекстСообщения = ТекстСообщения + "не был рассчитан, но ";
			КонецЕсли;
			ТекстСообщения = ТекстСообщения + "был исправлен; редактирование документа запрещено"
		ИначеЕсли ЗаполненСОшибками Тогда
			ВажностьСообщения = "СообщениеОПроблемах";
			ТекстСообщения = ТекстСообщения + "поля документа заполнены не полностью или неверно";
		ИначеЕсли НЕ Рассчитан Тогда
			ВажностьСообщения = "ВажнаяИнформация";
			ТекстСообщения = ТекстСообщения + "документ не рассчитан";
		ИначеЕсли Рассчитан И Не Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = ТекстСообщения + "рассчитан, но не проведен";
		ИначеЕсли Рассчитан И Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = ТекстСообщения + "рассчитан и проведен";
		КонецЕсли;
	ИначеЕсли ДокументИсправлен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ ";
		Если НЕ Рассчитан Тогда
			ТекстСообщения = ТекстСообщения + "не был рассчитан, но ";
		КонецЕсли;
		ТекстСообщения = ТекстСообщения + "был исправлен; редактирование документа запрещено"
	ИначеЕсли Отсторнирован Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ был отменен полностью (отсторнирован); редактирование документа запрещено";
	ИначеЕсли ЗаполненСОшибками Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Поля документа заполнены не полностью или неверно";
	ИначеЕсли НЕ Рассчитан Тогда
		ВажностьСообщения = "ВажнаяИнформация";
		ТекстСообщения = "Документ не рассчитан";
	ИначеЕсли Рассчитан И НЕ Проведен Тогда
		ВажностьСообщения = "Информация";
		ТекстСообщения = "Документ рассчитан, но не проведен";
	ИначеЕсли Рассчитан И Проведен Тогда
		ВажностьСообщения = "Информация";
		ТекстСообщения = "Документ рассчитан и проведен";
	КонецЕсли;
	
	ТекстПродолжений = "";
	Если ЯвляетсяПродолжением Тогда
		ТекстПродолжений = "Этот больничный является б/л-продолжением. ";
	КонецЕсли;
	
	Возврат Новый Структура("ТекстСообщения,ВажностьСообщения", ТекстПродолжений + ТекстСообщения, ВажностьСообщения)
	
КонецФункции

///////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЛАНОВ ВИДОВ РАСЧЕТА

Процедура УстановитьОтборыИСверткуПоказателей(ЭлементыФормы, Показатели, ПроизвольнаяФормулаРасчета = Истина, РеглНачисление = Ложь) Экспорт
	
	ПоказателиДляОтбора = Новый СписокЗначений;
	Если ПроизвольнаяФормулаРасчета Тогда
		Для Каждого СтрокаПоказатель Из Показатели Цикл
			Показатель = СтрокаПоказатель.Показатель;
			Если Показатель.ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется И Не Показатель.Предопределенный
				И Не (Показатель.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная Или Показатель.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
				И Не (Показатель.ТарифнаяСтавка ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная
				ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная 
				ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)Тогда
				
				ПоказателиДляОтбора.Добавить(Показатель);
			КонецЕсли;
		КонецЦикла;
		ЭлементыФормы.Показатели.ОтборСтрок.Показатель.Использование = Истина;
		ЭлементыФормы.Показатели.ОтборСтрок.Показатель.ВидСравнения = ВидСравнения.ВСписке;
		ЭлементыФормы.Показатели.ОтборСтрок.Показатель.Значение = ПоказателиДляОтбора;
	КонецЕсли;
	
	Если НЕ РеглНачисление Тогда
		ИзменитьВидимостьПанелиПоВертикалиНиз(ЭлементыФормы.ПанельПредставлениеФормулы, ПоказателиДляОтбора.Количество() <> 0, ЭлементыФормы.СпособРасчетаПредставление, ЭлементыФормы.ПанельПоказателей, ЭлементыФормы.РазделительПоказателей)
	Иначе 
		ЭлементыФормы.ПанельПредставлениеФормулы.ЦветРамки = ?(ПоказателиДляОтбора.Количество() = 0, ЦветаСтиля.ЦветФонаФормы, ЦветаСтиля.ЦветРамки);
		ЭлементыФормы.ПанельПредставлениеФормулы.Страницы.СтраницаПоказателей.Видимость = (ПоказателиДляОтбора.Количество() > 0);
	КонецЕсли;
		
КонецПроцедуры

// Процедура открывает редактор формуль расчета из вида расчета
//
// Параметры
//  ФормаПВР  - форма вида расчета из которой вызывается редактор формул расчета
//	Показатели - таблица показателей 
//  Наименование - наименование вида расчета
//  ФормулаРасчета - формула расчета
//
Процедура ОткрытьФормуРедактированияФормулы(ФормаПВР, Показатели, Наименование, ФормулаРасчетаПредставление, ВидРасчета, ВидПВР = "") Экспорт 
	
	РедакторФормулРасчета = ПолучитьОбщуюФорму("РедакторФормулРасчета", ФормаПВР);
	РедакторФормулРасчета.Заголовок = "Редактирование формулы расчета: " + Наименование;
	
	ПоказателиДляФормыВвода = Новый СписокЗначений;
	
	Для Каждого Показатель Из Показатели Цикл
		
		ПоказателиДляФормыВвода.Добавить(Показатель.Показатель);
		
	КонецЦикла;
	
	ФормулаРасчета = ПроведениеРасчетов.ПолучитьHTLMКодФормулыРасчета(ФормулаРасчетаПредставление, Показатели, "Текст", Истина);
	
	РедакторФормулРасчета.ВидРасчета		= ВидРасчета;
	РедакторФормулРасчета.Показатели		= ПоказателиДляФормыВвода;
	РедакторФормулРасчета.ФормулаРасчета	= ФормулаРасчета;
	РедакторФормулРасчета.ФормулаРасчетаПредставление	= ФормулаРасчетаПредставление;
	РедакторФормулРасчета.ВидПВР			= ВидПВР;
	РедакторФормулРасчета.Открыть();

КонецПроцедуры //ОткрытьФормуРедактированияФормулы

Функция ПроверитьПВРНаПустыеСтрокиВТЧ(ВидРасчета, ЕстьВытесняющиеВидыРасчета = Ложь) Экспорт
	
	КоличествоСтрок = ВидРасчета.БазовыеВидыРасчета.Количество() - 1;
	НомерСтроки = 0;
	Пока НомерСтроки <= КоличествоСтрок Цикл
		СтрокаБазовыйРасчет = ВидРасчета.БазовыеВидыРасчета[НомерСтроки];
		Если Не ЗначениеЗаполнено(СтрокаБазовыйРасчет.ВидРасчета) Тогда
			ВидРасчета.БазовыеВидыРасчета.Удалить(НомерСтроки );
			КоличествоСтрок = КоличествоСтрок - 1;
		Иначе
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоСтрок = ВидРасчета.ВедущиеВидыРасчета.Количество() - 1;
	НомерСтроки = 0;
	Пока НомерСтроки <= КоличествоСтрок Цикл
		СтрокаВедущийРасчет = ВидРасчета.ВедущиеВидыРасчета[НомерСтроки];
		Если Не ЗначениеЗаполнено(СтрокаВедущийРасчет.ВидРасчета) Тогда
			ВидРасчета.ВедущиеВидыРасчета.Удалить(НомерСтроки );
			КоличествоСтрок = КоличествоСтрок - 1;
		Иначе
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьВытесняющиеВидыРасчета Тогда
		
		КоличествоСтрок = ВидРасчета.ВытесняющиеВидыРасчета.Количество() - 1;
		НомерСтроки = 0;
		Пока НомерСтроки <= КоличествоСтрок Цикл
			СтрокаВытесняющейРасчет = ВидРасчета.ВытесняющиеВидыРасчета[НомерСтроки];
			Если Не ЗначениеЗаполнено(СтрокаВытесняющейРасчет.ВидРасчета) Тогда
				ВидРасчета.ВытесняющиеВидыРасчета.Удалить(НомерСтроки );
				КоличествоСтрок = КоличествоСтрок - 1;
			Иначе
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция ВставитьКолонкуВТабличноеПоле(НомерКолонки = Неопределено, ТабличноеПоле, Имя, ТекстШапки, 
									Данные = Неопределено, ДанныеФлажка = Неопределено, Подсказка = "", Видимость = Истина, 
									ТипЭлементаУправления = Неопределено, Положение = Неопределено, Ширина = Неопределено,
									КнопкаВыбора = Неопределено, КнопкаОткрытия = Неопределено, КнопкаОчистки = Неопределено) Экспорт
	
	Если НомерКолонки = Неопределено Тогда
		НоваяКолонка = ТабличноеПоле.Колонки.Добавить(Имя, ТекстШапки);
	Иначе
		НоваяКолонка = ТабличноеПоле.Колонки.Вставить(НомерКолонки, ТекстШапки);
		НоваяКолонка.Имя = Имя;
	КонецЕсли;
	
	Если ТипЭлементаУправления <> Неопределено Тогда
		НоваяКолонка.УстановитьЭлементУправления(ТипЭлементаУправления);
		Если КнопкаВыбора <> Неопределено Тогда
			НоваяКолонка.ЭлементУправления.КнопкаВыбора = КнопкаВыбора;
		КонецЕсли;
		Если КнопкаОткрытия <> Неопределено Тогда
			НоваяКолонка.ЭлементУправления.КнопкаОткрытия = КнопкаОткрытия;
		КонецЕсли;
		Если КнопкаОчистки <> Неопределено Тогда
			НоваяКолонка.ЭлементУправления.КнопкаОчистки = КнопкаОчистки;
		КонецЕсли;
	КонецЕсли;
	
	Если Данные <> Неопределено Тогда
		НоваяКолонка.Данные = Данные;
	КонецЕсли;
	
	Если ДанныеФлажка <> Неопределено Тогда
		НоваяКолонка.ДанныеФлажка = ДанныеФлажка;
	КонецЕсли;
	
	Если Положение <> Неопределено Тогда
		НоваяКолонка.Положение = Положение;
	Иначе
		НоваяКолонка.Положение = ПоложениеКолонки.НоваяКолонка;
	КонецЕсли;
	
	Если Ширина <> Неопределено Тогда
		НоваяКолонка.Ширина = Ширина;
	КонецЕсли;
	
	НоваяКолонка.ПодсказкаВШапке = Подсказка;
	НоваяКолонка.Видимость = Видимость;
	
	Возврат НоваяКолонка
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура ВывестиПредупреждение(Текст = "", Заголовок = "") Экспорт
	
	Предупреждение(Текст, , Заголовок);
	
КонецПроцедуры

// Процедура открывает общую форму выбора Структурных подразделений и позволяет выбрать значение.
// заполняет реквизит Организация и СтруктурноеПодразделение из формы выбора структурного подразделения
//
Процедура НачалоВыбораСтруктурногоПодразделенияПоВыбору(ФормаДокумента, СтандартнаяОбработка, Организация, СтруктурноеПодразделение, ФлагИзмененияОрганизации = Ложь, ДоступностьИзмененияОрганизации = Истина,ИмяРеквизитаФормы="СтруктурноеПодразделениеОрганизация") Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ИсходнаяОрганизация = Организация;
		
	ФормаВыбора = ПолучитьОбщуюФорму("ФормаВыбораСтруктурногоПодразделения"); //Общая форма
	ФормаВыбора.Организация 			= Организация;
	ФормаВыбора.АктивноеПодразделение 	= СтруктурноеПодразделение;
	ФормаВыбора.ЭлементыФормы.Организация.Доступность = ДоступностьИзмененияОрганизации;
	                                                                                  
	СтруктураРезультата = ФормаВыбора.ОткрытьМодально();

	Если ТипЗнч(СтруктураРезультата) = Тип("Структура") Тогда
		Организация				 = СтруктураРезультата.Организация;
		СтруктурноеПодразделение = СтруктураРезультата.Подразделение;
		
		// если ДоступностьИзмененияОрганизации = Ложь тогда нет необходимости дальнейшего действия
		Если ДоступностьИзмененияОрганизации Тогда 
			ФормаДокумента[ИмяРеквизитаФормы] = СтруктураРезультата.Подразделение;  
			УстановитьОрганизациюИСтруктурноеПодразделение(Организация, ФормаДокумента[ИмяРеквизитаФормы]);
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ИсходнаяОрганизация <> Организация Тогда
	 	ФлагИзмененияОрганизации = Истина;
	Иначе
		ФлагИзмененияОрганизации = Ложь;
	КонецЕсли;
	
КонецПроцедуры // НачалоВыбораСтруктурногоПодразделения

// Заполняет значение реквизита формы СтруктурноеПодразделение, управляет видимостью панели ПанельСтруктурногоПодразделения 
//
// Параметры:
//   Организация - реквизит документа Организация
//	 СтруктурноеПодразделениеОрганизация - реквизит документа СтруктурноеПодразделение
//   ФормаДокумента - форма документа 
//	 ЭтоНовый - определяет, записан ли элемент в базу данных
//
Процедура УстановитьВидимостьСтруктурногоПодразделенияВУправляемойФорме(Организация, СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ОтображатьСтруктурныеПодразделения, ПанельСтруктурногоПодразделения, ЭтоНовый) Экспорт

	Если  ОтображатьСтруктурныеПодразделения Тогда
		Если ЭтоНовый И НЕ ЗначениеЗаполнено(СтруктурноеПодразделение)Тогда
			СтруктурноеПодразделениеОрганизация = Организация;
		Иначе
			СтруктурноеПодразделениеОрганизация = ?(ЗначениеЗаполнено(СтруктурноеПодразделение), СтруктурноеПодразделение, Организация);
		КонецЕсли;	
		ПанельСтруктурногоПодразделения.ТекущаяСтраница = ПанельСтруктурногоПодразделения.ПодчиненныеЭлементы.СтруктурнаяЕдиница;
	Иначе 
		Если НЕ ЭтоНовый И ЗначениеЗаполнено(СтруктурноеПодразделение)Тогда
			СтруктурноеПодразделениеОрганизация = ?(ЗначениеЗаполнено(СтруктурноеПодразделение), СтруктурноеПодразделение, Организация);
			ПанельСтруктурногоПодразделения.ТекущаяСтраница = ПанельСтруктурногоПодразделения.ПодчиненныеЭлементы.СтруктурнаяЕдиница;
    	Иначе
			ПанельСтруктурногоПодразделения.ТекущаяСтраница = ПанельСтруктурногоПодразделения.ПодчиненныеЭлементы.Организация;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьСтруктурногоПодразделения()

// Устанавливает видимость колонки "СтруктурноеПодразделение" в формах списка и выбора
// в зависимости от поддержки работы со стркутурными подразделениями
Процедура ВидимостьКолонкиСтруктурногоПодразделенияЗарплата(ДокументСписок, ИмяКолонки = "СтруктурноеПодразделение") Экспорт
	
	Если ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделенийВЗарплате() Тогда
		//Массив может передаваться, когда в документе 2 реквизита "Структурное подразделение"
		Если ТипЗнч(ИмяКолонки) = Тип("Массив") Тогда
			Для Каждого Элемент Из ИмяКолонки Цикл
				Если ДокументСписок.Колонки.Найти(Элемент) <> Неопределено Тогда				
					ДокументСписок.Колонки[Элемент].Видимость = Истина;
				КонецЕсли;			
			КонецЦикла;
		Иначе
			Если ДокументСписок.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда				
				ДокументСписок.Колонки[ИмяКолонки].Видимость = Истина;
			КонецЕсли;					
		КонецЕсли;	
	КонецЕсли; 	
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВСТРОЕННОЙ СПРАВКИ

Процедура УстановитьВидимостьТекста(Документ, Ид, ВключитьВидимость, Параметр = "inline") Экспорт
	
	// Документ должен быть всегда загружен и в нем должен найтись нужный нам элемент
	// Пользователь может увидеть данные сообщения только в том случае, если при кодировании
	// механизма были допущены ошибки
	
	// Данное сообщение будет выведено, если мы пытаемся обновить справку ПриОткрытии формы
	// Обновлять справку в этом событии не нужно, так как текст справки был изначально
	// сформирован правильно
	Если Документ.readyState <> "complete" Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Справка: справка еще не загружена");
		Возврат;
	КонецЕсли;
	
	// Данное сообщение будет выведено, если мы пытаемся переключить видимость элемента
	// которого нет в справке. Такое может только в случае, если бы допустили ошибку в коде
	Элемент = Документ.getElementById(Ид);
	Если Элемент = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Справка: не найден элемент " + Ид);
		Возврат;
	КонецЕсли;
	
	Элемент.style.display = ?(ВключитьВидимость, Параметр, "none");
	
КонецПроцедуры

Процедура ПолеHTMLДокументаOnClick(Элемент, pEvtObj, Форма) Экспорт
	
	Элемент_HTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если Элемент_HTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент_HTML.id = "Команда" Тогда
		Попытка
			Форма.ВыполнитьКомандуФормы(Элемент_HTML.pathname, Элемент_HTML.target);
		Исключение
			// в случае неверной или недоступной по правам команды ничего не делаем
		КонецПопытки;
		pEvtObj.returnValue = Ложь;
		
	ИначеЕсли Элемент_HTML.id = "ОткрытьСписок" Тогда
		Менеджер = Вычислить(Элемент_HTML.pathname);
		Попытка
			ФормаСписка = Менеджер.ПолучитьФормуСписка();
			ФормаСписка.Открыть();
		Исключение
			// в случае неверной или недоступной по правам команды ничего не делаем
		КонецПопытки;
		
		pEvtObj.returnValue = Ложь;
		
	ИначеЕсли Элемент_HTML.id = "АктивизироватьЭУ" Тогда
		Форма.ТекущийЭлемент = Вычислить("Форма.ЭлементыФормы." + Элемент_HTML.pathname);
		pEvtObj.returnValue = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЭлемент(Элемент_HTML, НазваниеТега)
	
	ТекущийЭлемент_HTML = Элемент_HTML;
	Пока Истина Цикл
		Если ТекущийЭлемент_HTML.tagName = "BODY" Тогда
			Возврат Неопределено;
		ИначеЕсли ТекущийЭлемент_HTML.tagName = НазваниеТега Тогда
			Возврат ТекущийЭлемент_HTML;
		Иначе
			ТекущийЭлемент_HTML = ТекущийЭлемент_HTML.parentNode;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ПолеHTMLДокументаOnMouseOver(Элемент, pEvtObj, ВыделятьРазделы = Ложь) Экспорт
	
	Если ВыделятьРазделы Тогда
		Элемент_HTML = НайтиЭлемент(pEvtObj.srcElement, "DIV");
		Если Элемент_HTML <> Неопределено Тогда
			Элемент_HTML.style.paddingtop		= 0;
			Элемент_HTML.style.paddingright		= 3;
			Элемент_HTML.style.paddingbottom		= 2;
			Элемент_HTML.style.paddingleft		= 3;
			Элемент_HTML.style.borderwidth		= 1;
			Элемент_HTML.style.borderstyle		= "solid";
			Элемент_HTML.style.backgroundcolor	= "#FFFBF0";
		КонецЕсли;
	КонецЕсли;
	Элемент_HTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если Элемент_HTML <> Неопределено Тогда
		Элемент_HTML.style.backgroundcolor	= ВернутьШестнадцатиричноеПредставлениеЦвета(ВстроеннаяСправка_ФонВыделеннойСсылки());
		Элемент_HTML.style.color				= ВернутьШестнадцатиричноеПредставлениеЦвета(ВстроеннаяСправка_ЦветВыделеннойСсылки());
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеHTMLДокументаOnMouseOut(Элемент, pEvtObj, ВыделятьРазделы = Ложь) Экспорт
	
	Если ВыделятьРазделы Тогда
		Элемент_HTML = НайтиЭлемент(pEvtObj.srcElement, "DIV");
		Если Элемент_HTML <> Неопределено Тогда
			Элемент_HTML.style.paddingtop		= 1;
			Элемент_HTML.style.paddingright		= 4;
			Элемент_HTML.style.paddingbottom		= 3;
			Элемент_HTML.style.paddingleft		= 4;
			Элемент_HTML.style.borderstyle		= "none";
			Элемент_HTML.style.backgroundcolor	= "";
		КонецЕсли;
	КонецЕсли;
	Элемент_HTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если Элемент_HTML <> Неопределено Тогда
		Элемент_HTML.style.backgroundcolor	= "";
		Элемент_HTML.style.color				= "";
	КонецЕсли;
	
КонецПроцедуры

Функция ВстроеннаяСправка_ЦветФона() Экспорт
	
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветРамки() Экспорт
	
	Возврат Новый Цвет(137, 132, 119);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветСсылки() Экспорт
	
	Возврат Новый Цвет(51, 102, 255);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветВыделеннойСсылки() Экспорт
	
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

Функция ВстроеннаяСправка_ФонВыделеннойСсылки() Экспорт
	
	Возврат Новый Цвет(64, 94, 172);
	
КонецФункции

// Возвращает описание стилей, используемых при показе встроенной ситуационно-зависимой справки
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   строка
//
Функция ВстроеннаяСправка_СтилиДокумента() Экспорт

	Возврат "
	|		<STYLE type=text/css>
	|			DIV.top {
	|				PADDING: 0;
	|			}
	|			DIV {
	|				PADDING: 3px 0px 3px 3px;
	|				BORDER-TOP-COLOR: #dadac4;
	|				BORDER-RIGHT-COLOR: #dadac4;
	|				BORDER-BOTTOM-COLOR: #dadac4;
	|				BORDER-LEFT-COLOR: #dadac4;
	|			}
	|			A {
	|				PADDING-TOP: 1px;
	|				PADDING-BOTTOM: 1px;
	|			}
	|			BODY {
	|				SCROLLBAR-FACE-COLOR: #fffbf0;
	|				SCROLLBAR-HIGHLIGHT-COLOR: #dadac4;
	|				SCROLLBAR-3DLIGHT-COLOR: #fff; MARGIN: 5px;
	|				SCROLLBAR-ARROW-COLOR: #708090;
	|				SCROLLBAR-TRACK-COLOR: #fffbf0;
	|				SCROLLBAR-DARKSHADOW-COLOR: #fff;
	|				MARGIN: 5px 0px 5px 5px;
	|				FONT-SIZE: 8pt;
	|				FONT-FAMILY: ""MS Sans Serif"";
	|			}
	|			IMG {
	|				MARGIN-LEFT: 3px;
	|			}
	|		</STYLE>";

КонецФункции // ()

Функция ВернутьШестнадцатиричноеПредставлениеЦвета(ВыбранныйЦвет) Экспорт
	
	Если ТипЗнч(ВыбранныйЦвет) <> Тип("Цвет") Тогда
		Возврат "";
	КонецЕсли;
	
	Красный	= ОбщегоНазначения.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Красный);
	Зеленый	= ОбщегоНазначения.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Зеленый);
	Синий	= ОбщегоНазначения.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Синий);
	
	Возврат "#" + Красный + Зеленый + Синий;
	
КонецФункции


Процедура УстановитьВидимостьДанныхПоДоверенности(ДоверенностьНомер, ДоверенностьДата, УдалитьДоверенность, ЭлементУдалитьДоверенность,ЭлементНадписьДоверенность) Экспорт

	Если ЗначениеЗаполнено(ДоверенностьНомер) ИЛИ ЗначениеЗаполнено(ДоверенностьДата) Тогда
		ЭлементУдалитьДоверенность.Видимость = Ложь;
		ЭлементНадписьДоверенность.Видимость = Ложь;
	Иначе
		ЭлементУдалитьДоверенность.Видимость = ЗначениеЗаполнено(УдалитьДоверенность);		
		ЭлементНадписьДоверенность.Видимость = ЗначениеЗаполнено(УдалитьДоверенность);
	КонецЕсли;   

КонецПроцедуры // УстановитьВидимостьСтруктурногоПодразделения()

// Процедура открывает форму списка задач текущего пользователя
//
Процедура ОткрытьЗадачиТекущегоПользователя(ОтборПоОбъекту = Неопределено) Экспорт
	
	ФормаСпискаЗадач = Задачи.ЗадачиПользователя.ПолучитьФорму("РабочаяФормаСпискаЗадачПользователя", , "СписокЗадачОригинал");
	
	Если ОтборПоОбъекту <> Неопределено Тогда
		
		ФормаСпискаЗадач.Отбор.Объект.ВидСравнения       = ВидСравнения.Равно;
		ФормаСпискаЗадач.Отбор.Объект.Использование      = Истина;
		ФормаСпискаЗадач.Отбор.Объект.Значение           = ОтборПоОбъекту;
		
	КонецЕсли;
	
	Если НЕ ФормаСпискаЗадач.Открыта() Тогда
		ФормаСпискаЗадач.Отбор.Исполнитель.ВидСравнения     = ВидСравнения.Равно;
		ФормаСпискаЗадач.Отбор.Исполнитель.Использование    = Истина;
		ФормаСпискаЗадач.Отбор.Исполнитель.Значение         = ПараметрыСеанса.ТекущийПользователь;
		ФормаСпискаЗадач.Открыть();
	Иначе
		ФормаСпискаЗадач.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

