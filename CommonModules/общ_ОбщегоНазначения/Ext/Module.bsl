////////////////////////////////////////////////////////////////////////////////
// Подсистема "Защита конфигурации".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция ВерсияКонфигурации() Экспорт
	
	Возврат фин_ОбщегоНазначенияСервер.ВерсияМетаданных();
	
КонецФункции

Функция ВерсияКонфигурацииИБ() Экспорт
	
	Возврат фин_ОбщегоНазначенияСервер.ВерсияКонфигурацииИБ();
	
КонецФункции

Функция ВерсияБиблиотекЗащиты() Экспорт
	
	Возврат "2.7.20.3";	
	
КонецФункции

Функция ПочтовыйАдресЛК() Экспорт
	
	Возврат "fin@1c-rating.kz";	
	
КонецФункции

Процедура ОткрытьФормуПоИмени(ИмяФормы) Экспорт
	
	#Если Клиент Тогда
		ОткрытьФорму(ИмяФормы);	
	#КонецЕсли
	
КонецПроцедуры

Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
	#Если НЕ (ТонкийКлиент ИЛИ ВебКлиент) Тогда
		Если КлючДанных <> Неопределено
		   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
			ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
			ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
		КонецЕсли;
	#КонецЕсли

	Если КлючДанных<>Неопределено Тогда
		Попытка
			Если ЭтоОбъект Тогда
				Сообщение.УстановитьДанные(КлючДанных);
			Иначе
				Сообщение.КлючДанных = КлючДанных;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

#Область ФункцииСЛК

// Состояние лицензии
//
Функция СостояниеЛицензии(Лицензия) Экспорт
	
	Если Лицензия.Enabled Тогда
		Возврат "Доступен";
	ИначеЕсли Лицензия.Expired Тогда
		Возврат "Срок действия истек";
	ИначеЕсли НЕ Лицензия.Workable Тогда
		Возврат "Недоступен: " + ?(Лицензия.Type = "USB", "Аппаратный ключ неисправен", "Изменена конфигурация компьютера");
	Иначе
		Возврат "Недоступен (?)";
	КонецЕсли;
	
КонецФункции

Функция ТипКлюча(Тип) Экспорт
	
	Если Тип = 3 Тогда
		Возврат "Основной"
	ИначеЕсли Тип = 4 Тогда
		Возврат "Дополнительный"
	ИначеЕсли Тип = 5 Тогда
		Возврат "Демонстрационный"
	Иначе
		Возврат "Неизвестный тип (" + Строка(Тип) + ")";
	КонецЕсли
	
КонецФункции

// Краткое описание лицензии
//
Функция ОписаниеЛицензии(Лицензия, ПоказатьСостояние = Истина) Экспорт
	
	Стр = 
		"С/Н " + Формат(Лицензия.KeyNo, "ЧГ=0") + ", " + 
		?(Лицензия.Type = "USB", Лицензия.Type, "Программный") + " (" + Лицензия.Version + "), ";
	
	Если Лицензия.IsBlank Тогда
		Стр = Стр + 
			"Неактивированный ключ (болванка)";
	Иначе
		Стр = Стр +
			ПараметрКлюча("Рег.№", Формат(Лицензия.RegNo, "ЧГ=0")) + 
			ПараметрКлюча("ИНН", Формат(Лицензия.ITN, "ЧГ=0")) + 
			ПараметрКлюча("КПП", Формат(Лицензия.IEC, "ЧГ=0")) +
			ПараметрКлюча("Флаги", ?(Найти(Лицензия.Flags, "1") > 0, Лицензия.Flags, "")) +
			ПараметрКлюча("Версия продукта", ?(Лицензия.ProductVersion > 0, Лицензия.ProductVersion, ""));
		  
		Стр = Стр + 
			ТипКлюча(Лицензия.KeyType) + " (Лицензий: " + Формат(Лицензия.LicenceCount, "ЧГ=0") + ")";
	КонецЕсли;
	
	Стр = Стр + 
		?(ПоказатьСостояние, " - " + СостояниеЛицензии(Лицензия), "");
	
	Возврат Стр;
	
КонецФункции

// Все поля струкутуры в виде строки
//
Функция СтруктураВСтроку(Структура, РазделительЗначений = ": ", РазделительПолей = ", ") Экспорт
	
	Стр = "";
	Для каждого Поле Из Структура Цикл
		Стр = Стр + ?(Стр <> "", РазделительПолей, "") + Поле.Ключ + РазделительЗначений;
		Если ТипЗнч(Поле.Значение) = Тип("ФиксированнаяСтруктура") Тогда
			Стр = Стр + "(" + СтруктураВСтроку(Поле.Значение, РазделительЗначений, РазделительПолей) + ")";
		Иначе
			Стр = Стр + Поле.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Стр;
	
КонецФункции

// Извлечение имени класса исключения из описания ошибки
//
Функция ПолучитьКлассИсключения(ОписаниеОшибки) Экспорт
	
	С = ОписаниеОшибки;
	Н = Найти(С, "(E");
	С = Прав(С, СтрДлина(С) - Н);
	Н = Найти(С, ")");
	
	Если Н > 1 Тогда
		Возврат Лев(С, Н - 1);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Контрольная сумма строки для телефонной активации
//
Функция КонтрольнаяСумма(Строка) Экспорт
	
	Результат = 0;
	Индекс = 0;
	
	Длина = СтрДлина(Строка);	
	Для С = 1 по Длина Цикл
		Код = КодСимвола(Строка, С);
		Если Код >= 48 И Код <= 58 Тогда
			Результат = Результат + Код + Индекс;	
			Индекс = Индекс + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Результат % 256;
	
КонецФункции

// Сравнение версий в виде строки
//
Функция СравнитьВерсии(Версия1, Версия2, Разделитель = ".") Экспорт
	
	Массив1 = РазложитьСтрокуВМассивПодстрок(Версия1, Разделитель);
	Массив2 = РазложитьСтрокуВМассивПодстрок(Версия2, Разделитель);
	
	Результат = 0;
	ЧислоРазрядов = ?(Массив1.Количество() <= Массив2.Количество(), Массив1.Количество(), Массив2.Количество());
	Для Разряд = 0 По ЧислоРазрядов - 1 Цикл
		Результат = Число(Массив1[Разряд]) - Число(Массив2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ".") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз - 1));
			Стр = СокрЛ(Сред(Стр, Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				Если (СокрЛП(Стр) <> "") Тогда
					МассивСтрок.Добавить(Стр);
				КонецЕсли;
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз - 1));
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции 

// Получаем из полного номера версии конфигурации номер релиза без номера сборки.
//
// Параметры
//  НомерВерсии  – Строка – полный номер версии
//
// Возвращаемое значение:
//  Строка – номер релиза без номера сборки
//
Функция ПолучитьНомерРелиза(НомерВерсии) Экспорт

	КоличествоТочек = 0;
	ДлинаОписанияНомераРелиза = 0;

	Для х = 1 По СтрДлина(НомерВерсии) Цикл

		Если Сред(НомерВерсии, х, 1) = "." Тогда
			КоличествоТочек = КоличествоТочек + 1;
		КонецЕсли;

		Если КоличествоТочек = 3 Тогда
			ДлинаОписанияНомераРелиза = х - 1;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат Лев(НомерВерсии, ДлинаОписанияНомераРелиза);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрКлюча(Наименование, Значение)
	
	Возврат ?(Значение <> "", Наименование + " " + Значение + ", ", "");
	
КонецФункции

#КонецОбласти
