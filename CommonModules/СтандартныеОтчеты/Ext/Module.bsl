////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ОБЩЕГО НАЗНАЧЕНИЯ
////////////////////////////////////////////////////////////////////////////////

Функция ВыбратьСчет(Тип = "Группировка", НачальноеЗначениеВыбора = Неопределено, ПланСчетов = "Типовой") Экспорт
	
	ФормаВыбораСчета = ПланыСчетов[ПланСчетов].ПолучитьФормуВыбора();
	
	Если ЗначениеЗаполнено(НачальноеЗначениеВыбора) Тогда
		ФормаВыбораСчета.НачальноеЗначениеВыбора = НачальноеЗначениеВыбора;
	КонецЕсли;
	
	// Исключим детальные счета, по которым не ведется учет по субконто
	Если Найти(Тип, "Группировка") = 1 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Типовой.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов." + ПланСчетов + " КАК Типовой
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов." + ПланСчетов + ".ВидыСубконто КАК ТиповойВидыСубконто
		|		ПО (ТиповойВидыСубконто.Ссылка = Типовой.Ссылка)
		|ГДЕ
		|	(НЕ Типовой.ЗапретитьИспользоватьВПроводках)
		|
		|СГРУППИРОВАТЬ ПО
		|	Типовой.Ссылка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТиповойВидыСубконто.ВидСубконто) = 0";
		
		СписокСчетов = Новый СписокЗначений;
		Списоксчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"));
		ФормаВыбораСчета.ПланСчетовСписок.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
		ФормаВыбораСчета.ПланСчетовСписок.Отбор.Ссылка.Использование = Истина;
		ФормаВыбораСчета.ПланСчетовСписок.Отбор.Ссылка.Значение = СписокСчетов;
		
		// выбор из активно-пассивных счетов
	ИначеЕсли Найти(Тип, "РазвернутоеСальдо") = 1 Тогда
		ФормаВыбораСчета.ПланСчетовСписок.Отбор.Вид.Установить(ВидСчета.АктивноПассивный);	
	КонецЕсли;
	
	Возврат ФормаВыбораСчета.ОткрытьМодально();
	
КонецФункции

Функция ДоступностьУчетаПоПодразделениям() Экспорт
	
	МетаданныеИмя = Метаданные.Имя;
	ИспользованиеПодразделений = Истина;
	
	Если МетаданныеИмя = "БухгалтерияПредприятияКОРП" 
		ИЛИ МетаданныеИмя = "БухгалтерияАвтономногоУчрежденияКОРП"
		ИЛИ МетаданныеИмя = "БухгалтерияДляКазахстана" Тогда
		ИспользованиеПодразделений =  Истина;
	Иначе
		ИспользованиеПодразделений =  Ложь;
	КонецЕсли;
	
	
	Если ИспользованиеПодразделений Тогда 
		ИспользованиеПодразделений = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
	КонецЕсли;
	
	Возврат ИспользованиеПодразделений;	
	
КонецФункции

Функция СкопироватьПараметрСхемыКомпоновкиДанных(СхемаКомпоновкиДанных, Приемник, Источник, ЗначениеПриемника = Неопределено) Экспорт
	
	Если ТипЗнч(СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда
		Параметры = СхемаКомпоновкиДанных.Параметры;
		
		НовыйПараметр = Параметры.Найти(Приемник);
		Если НовыйПараметр = Неопределено Тогда
			НовыйПараметр = Параметры.Добавить();
		КонецЕсли;
		
		ПараметрИсточник = Параметры.Найти(Источник);
		
		Если ПараметрИсточник = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			ЗаполнитьЗначенияСвойств(НовыйПараметр, ПараметрИсточник);
			НовыйПараметр.Имя = Приемник;
			Если ЗначениеПриемника <> Неопределено Тогда
				НовыйПараметр.Значение = ЗначениеПриемника;
			КонецЕсли;
		КонецЕсли;
		
		Возврат НовыйПараметр;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруПоказателейОтчета(БУ = Истина, НУ = Истина, ПР = Истина, ВР = Истина, Контроль = Истина, ВалютнаяСумма = Ложь, Количество = Ложь, РазвернутоеСальдо = Ложь, ПоРегиструНалоговый = Ложь) Экспорт
	
	Если ПоРегиструНалоговый Тогда 
		
		Возврат Новый Структура("БУ, Количество, НУ, КоличествоНУ, ПР, КоличествоПР, ВР, РазвернутоеСальдо", 
				Новый Структура("Значение, Использование, Представление", Истина, БУ,                "Общие данные"),
				Новый Структура("Значение, Использование, Представление", Ложь,   Количество,        "Количество общие"),
				Новый Структура("Значение, Использование, Представление", Ложь,   НУ,                "НУ (данные налогового учета)"),
				Новый Структура("Значение, Использование, Представление", Ложь,   Количество,        "Количество НУ"),
				Новый Структура("Значение, Использование, Представление", Ложь,   ПР,                "ПР (данные по учету постоянных разниц)"),
				Новый Структура("Значение, Использование, Представление", Ложь,   Количество,        "Количество ПР"),
				Новый Структура("Значение, Использование, Представление", Ложь,   ВР,                "ВР (данные по учету временных разниц)"),
				Новый Структура("Значение, Использование, Представление", Ложь,   РазвернутоеСальдо, "Развернутое сальдо"));
	Иначе 
		
		
		Возврат Новый Структура("БУ, ВалютнаяСумма, Количество, РазвернутоеСальдо", 
				Новый Структура("Значение, Использование, Представление", Истина, БУ,                "БУ (данные бухгалтерского учета)"),
				Новый Структура("Значение, Использование, Представление", Ложь,   ВалютнаяСумма,     "Валютная сумма"),
				Новый Структура("Значение, Использование, Представление", Ложь,   Количество,        "Количество"),
				Новый Структура("Значение, Использование, Представление", Ложь,   РазвернутоеСальдо, "Развернутое сальдо"));
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКопиюОписанияМакета(ОписаниеМакета, ФормаЗаписи = Неопределено) Экспорт
	
	Если ФормаЗаписи = Неопределено Тогда
		ФормаЗаписи = "{http://v8.1c.ru/8.1/data-composition-system/composition-template}";
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ОписаниеМакета, "item", ФормаЗаписи);
	СтрокаXML = ЗаписьXML.Закрыть();
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML, ТипЗнч(ОписаниеМакета));
	
КонецФункции

Функция ПолучитьМакетШапки(МакетКомпоновки, Тело = Неопределено, ТипМакета = "Заголовок") Экспорт
	
	ЕстьПустойМакет = Ложь;
	
	Если Тело = Неопределено Тогда
		Тело = МакетКомпоновки.Тело;
	КонецЕсли;
	
	Если Тело.Количество() > 0 Тогда
		Если ТипМакета = "Заголовок" Тогда
			НачальныйИндекс = 0;
			КонечныйИндекс  = Тело.Количество();
			ИтераторПрямой  = Истина;
		ИначеЕсли ТипМакета = "Подвал" Тогда 
			НачальныйИндекс = Тело.Количество() - 1;
			КонечныйИндекс  = 0;
			ИтераторПрямой  = Ложь;
		КонецЕсли;
		
		Индекс = НачальныйИндекс;
		Пока Индекс <> КонечныйИндекс Цикл
			Элемент = Тело[Индекс];
			Если ТипЗнч(Элемент) = Тип("МакетОбластиМакетаКомпоновкиДанных") Тогда
				Если ЕстьПустойМакет Тогда
					ЕстьПустойМакет = Ложь;
				Иначе
					Возврат МакетКомпоновки.Макеты[Элемент.Макет];
				КонецЕсли;
			ИначеЕсли ТипЗнч(Элемент) = Тип("ДиаграммаМакетаКомпоновкиДанных") Тогда
				ЕстьПустойМакет = Истина;
			ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
				ЕстьПустойМакет = Истина;			
			КонецЕсли;
			
			Если ИтераторПрямой Тогда
				Индекс = Индекс + 1;
			Иначе
				Индекс = Индекс - 1;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьМакетПодвала(МакетКомпоновки, Тело = Неопределено) Экспорт
	
	Если Тело = Неопределено Тогда
		Тело = МакетКомпоновки.Тело;
	КонецЕсли;
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
			Если Не ПустаяСтрока(Элемент.МакетПодвала) Тогда
				Возврат МакетКомпоновки.Макеты[Элемент.МакетПодвала];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, ПолеГруппировки, ИскатьВДетальныхЗаписях = Ложь, ТипМакета = "Заголовок") Экспорт
	
	МассивМакетов = Новый Массив;
	
	ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, МакетКомпоновки.Тело, МассивМакетов, ПолеГруппировки, ИскатьВДетальныхЗаписях, ТипМакета);	
	
	Возврат МассивМакетов;
	
КонецФункции

Процедура ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, Тело, МассивМакетов, ПолеГруппировки, ИскатьВДетальныхЗаписях = Ложь, ТипМакета) 
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
			Для Каждого ЭлементГруппировки Из Элемент.Группировка Цикл
				Если Найти(ЭлементГруппировки.ИмяПоля, ПолеГруппировки) = 1 Тогда 
					МакетТело = ПолучитьМакетШапки(МакетКомпоновки, Элемент.Тело, ТипМакета);
					Если МакетТело <> Неопределено Тогда
						МассивМакетов.Добавить(МакетТело);  
					КонецЕсли;
					МакетТелоИерархии = ПолучитьМакетШапки(МакетКомпоновки, Элемент.ТелоИерархии, ТипМакета);
					Если МакетТелоИерархии <> Неопределено Тогда
						МассивМакетов.Добавить(МакетТелоИерархии);
					КонецЕсли;
				КонецЕсли; 
				ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, Элемент.Тело, МассивМакетов, ПолеГруппировки, ИскатьВДетальныхЗаписях, ТипМакета);
			КонецЦикла;
		КонецЕсли;
		Если ИскатьВДетальныхЗаписях Тогда
			Если ТипЗнч(Элемент) = Тип("ЗаписиМакетаКомпоновкиДанных") Тогда
				Если Элемент.Имя = ПолеГруппировки Тогда
					МассивМакетов.Добавить(ПолучитьМакетШапки(МакетКомпоновки, Элемент.Тело));	
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСвойствоПоля(ЭлементСтруктура, Поле, Свойство = "Заголовок") Экспорт
	
	Если ТипЗнч(ЭлементСтруктура) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Коллекция = ЭлементСтруктура.Настройки.ДоступныеПоляВыбора;
	Иначе
		Коллекция = ЭлементСтруктура;
	КонецЕсли;
	
	ПолеСтрокой = Строка(Поле);
	ПозицияКвадратнойСкобки = Найти(ПолеСтрокой, "[");
	Окончание = "";
	Заголовок = "";
	Если ПозицияКвадратнойСкобки > 0 Тогда
		Окончание = Сред(ПолеСтрокой, ПозицияКвадратнойСкобки);
		ПолеСтрокой = Лев(ПолеСтрокой, ПозицияКвадратнойСкобки - 2);
	КонецЕсли;
	
	МассивСтрок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПолеСтрокой, ".");
	
	Если Не ПустаяСтрока(Окончание) Тогда
		МассивСтрок.Добавить(Окончание);
	КонецЕсли;
	
	ДоступныеПоля = Коллекция.Элементы;
	ПолеПоиска = "";
	Для Индекс = 0 По МассивСтрок.Количество() - 1 Цикл
		ПолеПоиска = ПолеПоиска + ?(Индекс = 0, "", ".") + МассивСтрок[Индекс];
		ДоступноеПоле = ДоступныеПоля.Найти(ПолеПоиска);
		Если ДоступноеПоле <> Неопределено Тогда
			ДоступныеПоля = ДоступноеПоле.Элементы;
		КонецЕсли;
	КонецЦикла;
	
	Если ДоступноеПоле <> Неопределено Тогда
		Если Свойство = "ДоступноеПоле" Тогда
			Результат = ДоступноеПоле;
		Иначе
			Результат = ДоступноеПоле[Свойство]; 
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КонецПериода(Период, Периодичность) Экспорт
	
	КонецПериода = Период;
	Если Периодичность = 6 Тогда       //День
		КонецПериода = КонецДня(Период);
	ИначеЕсли Периодичность = 7 Тогда  //Неделя
		КонецПериода = КонецНедели(Период);
	ИначеЕсли Периодичность = 8 Тогда  //Декада
		Если День(Период) > 20 Тогда
			КонецПериода = КонецМесяца(Период);
		Иначе
			КонецПериода = КонецДня(Период + 10 * 86400 - 1);
		КонецЕсли; 
	ИначеЕсли Периодичность = 9 Тогда  //Месяц
		КонецПериода = КонецМесяца(Период);
	ИначеЕсли Периодичность = 10 Тогда //Квартал
		КонецПериода = КонецКвартала(Период);
	ИначеЕсли Периодичность = 11 Тогда //Полугодие
		КонецПериода = ?(Месяц(Период) < 7, КонецДня(Дата(Год(Период), 6, 30)), КонецДня(Дата(Год(Период), 12, 31)));
	ИначеЕсли Периодичность = 12 Тогда //Год
		КонецПериода = КонецГода(Период);
	КонецЕсли;
	
	Возврат КонецПериода;
	
КонецФункции

Функция ПолучитьТипДополненияПоИнтервалу(Интервал = 0) Экспорт
	
	ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
	
	Если Интервал = 6 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.День;
	ИначеЕсли Интервал = 7 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Неделя;
	ИначеЕсли Интервал = 8 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Декада;
	ИначеЕсли Интервал = 9 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Месяц;
	ИначеЕсли Интервал = 10 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Квартал;
	ИначеЕсли Интервал = 11 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Полугодие;
	ИначеЕсли Интервал = 12 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Год;
	КонецЕсли;
	
	Возврат ТипДополнения;	
	
КонецФункции

Функция ПолучитьВидПодписиДиаграммы(Значение = 0000, ВернутьПредставление = Ложь) Экспорт
	
	ВидПодписей   = ВидПодписейКДиаграмме.Нет;
	Представление = "Нет";
	
	Если Значение = 0000 Тогда
		Представление = "Нет";
		ВидПодписей   = ВидПодписейКДиаграмме.Нет;
	ИначеЕсли Значение = 0001 Тогда
		Представление = "Процент";
		ВидПодписей   = ВидПодписейКДиаграмме.Процент;
	ИначеЕсли Значение = 0010 Тогда
		Представление = "Сумма";
		ВидПодписей   = ВидПодписейКДиаграмме.Значение;
	ИначеЕсли Значение = 0011 Тогда
		Представление = "Сумма + процент";
		ВидПодписей   = ВидПодписейКДиаграмме.ЗначениеПроцент;
	ИначеЕсли Значение = 0100 Тогда
		Представление = "Период";
		ВидПодписей   = ВидПодписейКДиаграмме.Точка;
	ИначеЕсли Значение = 0101 Тогда
		Представление = "Период + процент";
		ВидПодписей   = ВидПодписейКДиаграмме.ТочкаПроцент;
	ИначеЕсли Значение = 0110 Тогда
		Представление = "Период + сумма";
		ВидПодписей   = ВидПодписейКДиаграмме.ТочкаЗначение;
	ИначеЕсли Значение = 0111 Тогда
		Представление = "Период + сумма + процент";
		ВидПодписей   = ВидПодписейКДиаграмме.ТочкаЗначениеПроцент;
	ИначеЕсли Значение = 1000 Тогда
		Представление = "Группировка";
		ВидПодписей   = ВидПодписейКДиаграмме.Серия;
	ИначеЕсли Значение = 1001 Тогда
		Представление = "Группировка + процент";
		ВидПодписей   = ВидПодписейКДиаграмме.СерияПроцент;
	ИначеЕсли Значение = 1010 Тогда
		Представление = "Группировка + сумма";
		ВидПодписей   = ВидПодписейКДиаграмме.СерияЗначение;
	ИначеЕсли Значение = 1011 Тогда
		Представление = "Группировка + сумма + процент";
		ВидПодписей   = ВидПодписейКДиаграмме.СерияЗначениеПроцент;
	ИначеЕсли Значение = 1100 Тогда
		Представление = "Группировка + период";
		ВидПодписей   = ВидПодписейКДиаграмме.СерияТочка;
	ИначеЕсли Значение = 1101 Тогда
		Представление = "Группировка + период + процент";
		ВидПодписей   = ВидПодписейКДиаграмме.СерияТочкаПроцент;
	ИначеЕсли Значение = 1110 Тогда
		Представление = "Группировка + период + сумма";
		ВидПодписей   = ВидПодписейКДиаграмме.СерияТочкаЗначение;
	ИначеЕсли Значение = 1111 Тогда
		Представление = "Группировка + период + сумма + процент";
		ВидПодписей   = ВидПодписейКДиаграмме.СерияТочкаЗначениеПроцент;
	КонецЕсли;
	
	Если ВернутьПредставление Тогда
		Возврат Представление;
	Иначе
		Возврат ВидПодписей;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПредставлениеДиаграммы(Значение = 0) Экспорт
	
	ПредставлениеДиаграммы = ТипДиаграммы.График;
	
	Если Значение = 5 Тогда
		ПредставлениеДиаграммы = ТипДиаграммы.График;
	ИначеЕсли Значение = 1 Тогда
		ПредставлениеДиаграммы = ТипДиаграммы.ГистограммаОбъемная;
	ИначеЕсли Значение = 2 Тогда
		ПредставлениеДиаграммы = ТипДиаграммы.ГистограммаСНакоплениемОбъемная;
	ИначеЕсли Значение = 3 Тогда
		ПредставлениеДиаграммы = ТипДиаграммы.ГистограммаГоризонтальнаяОбъемная;
	ИначеЕсли Значение = 4 Тогда
		ПредставлениеДиаграммы = ТипДиаграммы.ГистограммаСНакоплениемГоризонтальнаяОбъемная;
	ИначеЕсли Значение = 0 Тогда
		ПредставлениеДиаграммы = ТипДиаграммы.КруговаяОбъемная;
	ИначеЕсли Значение = 6 Тогда
		ПредставлениеДиаграммы = ТипДиаграммы.Изометрическая;
	ИначеЕсли Значение = 7 Тогда
		ПредставлениеДиаграммы = ТипДиаграммы.ИзометрическаяНепрерывная;
	ИначеЕсли Значение = 8 Тогда
		ПредставлениеДиаграммы = ТипДиаграммы.Измерительная;
	ИначеЕсли Значение = 9 Тогда
		ПредставлениеДиаграммы = ТипДиаграммы.ГрафикСНакоплением;
	КонецЕсли;
	
	Возврат ПредставлениеДиаграммы;
	
КонецФункции

Процедура УстановитьИнтервал(ОтчетОбъект) Экспорт
	
	ДлинаПериода = (?(ЗначениеЗаполнено(ОтчетОбъект.КонецПериода), ОтчетОбъект.КонецПериода, Дата(3999, 12, 31)) - ОтчетОбъект.НачалоПериода) / (60*60*24);
	
	Если ОтчетОбъект.Интервал < 6 ИЛИ ОтчетОбъект.Интервал > 12 Тогда
		ОтчетОбъект.Интервал = 6;
	КонецЕсли;
	
	Если ДлинаПериода < 31 Тогда
		ОтчетОбъект.Интервал = 6;
	ИначеЕсли ДлинаПериода >= 31 И ДлинаПериода < 62 Тогда
		ОтчетОбъект.Интервал = 7;
	ИначеЕсли ДлинаПериода >= 62 И ДлинаПериода < 610 Тогда
		ОтчетОбъект.Интервал = 9;
	ИначеЕсли ДлинаПериода >= 610 Тогда
		ОтчетОбъект.Интервал = 10;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДополнениеПоляГруппировки(Группировка, ТипДополнения, ИмяПоля = "Период") Экспорт

	Для каждого ПолеГруппировки Из Группировка.ПоляГруппировки.Элементы Цикл
		Если ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля) Тогда
			ПолеГруппировки.ТипДополнения = ТипДополнения;
			Возврат;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОтчетОбъект, ЗаголовокТекст = "", ОрганизацияВНачале = Истина) Экспорт
	
	ТекстОрганизации = "";
	
	Если ЗначениеЗаполнено(ОтчетОбъект.Организация) Тогда
		СведенияОбОрганизации    = ОбщегоНазначения.СведенияОЮрФизЛице(ОтчетОбъект.Организация);
		ТекстОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		Если ПустаяСтрока(ТекстОрганизации) Тогда
			ТекстОрганизации = СведенияОбОрганизации.Представление;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтчетОбъект.Метаданные().Реквизиты.Найти("Период") = Неопределено Тогда
		Попытка
			ТекстПериод = " за " + ПредставлениеПериода(НачалоДня(ОтчетОбъект.НачалоПериода), КонецДня(ОтчетОбъект.КонецПериода), "ФП");
		Исключение
			ТекстПериод = "";
		КонецПопытки;
	Иначе
		Если ЗначениеЗаполнено(ОтчетОбъект.Период) Тогда 
			ТекстПериод = " на " + Формат(ОтчетОбъект.Период, "ДФ=dd.MM.yyyy");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовокОтчета = "" + ЗаголовокТекст;
	
	Если ЗначениеЗаполнено(ТекстПериод) Тогда
		ЗаголовокОтчета = ЗаголовокОтчета + ТекстПериод;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОрганизации) Тогда
		Если ОрганизацияВНачале Тогда
			ЗаголовокОтчета = ТекстОрганизации + Символы.ПС + ЗаголовокОтчета;
		Иначе
			ЗаголовокОтчета = ЗаголовокОтчета + " " + ТекстОрганизации;
		КонецЕсли;
	КонецЕсли;
		
	Возврат ЗаголовокОтчета;
	
КонецФункции

Функция ПолучитьПредставлениеПериодичности(Периодичность) 
	
	Представление = "";
	Если Периодичность = 6 Тогда
		Представление = "по дням";
	ИначеЕсли Периодичность = 7 Тогда
		Представление = "по неделям";
	ИначеЕсли Периодичность = 8 Тогда
		Представление = "по декадам";
	ИначеЕсли Периодичность = 9 Тогда
		Представление = "по месяцам";
	ИначеЕсли Периодичность = 10 Тогда
		Представление = "по кварталам";
	ИначеЕсли Периодичность = 11 Тогда
		Представление = "по полугодиям";
	ИначеЕсли Периодичность = 12 Тогда
		Представление = "по годам";
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ПолучитьТекстОбособленныхПодразделений(Организация) Экспорт
	
	ТекстОрганизации = "";
	
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(Организация);
	ТекстОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	Если ПустаяСтрока(ТекстОрганизации) Тогда
		ТекстОрганизации = СведенияОбОрганизации.Представление;
	КонецЕсли;
	
	ТекстОрганизации = ТекстОрганизации + " с обособленными подразделениями";
	
	Возврат ТекстОрганизации;
	
КонецФункции

Функция ПолучитьПредставлениеПериода(ОтчетОбъект = Неопределено, НачалоПериода = Неопределено, КонецПериода = Неопределено, ТолькоДаты  = Ложь) Экспорт
	
	ТекстПериод = "";
	
	Если ОтчетОбъект <> Неопределено Тогда 
		НачалоПериода = ОтчетОбъект.НачалоПериода;
		КонецПериода  = ОтчетОбъект.КонецПериода;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонецПериода) Тогда 
		Если КонецПериода >= НачалоПериода Тогда
			ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
		ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(Дата(3999, 11, 11)), "ФП");
		ТекстПериод = СтрЗаменить(ТекстПериод, Сред(ТекстПериод, Найти(ТекстПериод, " - ")), " - ...");
	КонецЕсли;
	
	Возврат ТекстПериод;
	
КонецФункции

Функция ПолучитьТекстОрганизация(ОтчетОбъект = Неопределено, Организация = Неопределено, ВключатьОбособленныеПодразделения = Ложь) Экспорт
	
	Если ОтчетОбъект <> Неопределено Тогда
		Организации                       = ОтчетОбъект.мСписокСтруктурныхЕдиниц;
	КонецЕсли;
	
	ТекстОрганизации = "";
	Если ЗначениеЗаполнено(Организации) Тогда
		НомСтр = 0;
		Для Каждого Организация Из Организации Цикл 
			НомСтр= НомСтр + 1;
			СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(Организация.Значение);
			Текст = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
			Если ПустаяСтрока(Текст) Тогда
				Текст = СведенияОбОрганизации.Представление;
			КонецЕсли;
			
			ТекстОрганизации = ТекстОрганизации + Текст + ";"; 
			
		КонецЦикла;                                   		
		
		Если НомСтр >=14 Тогда
			СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(Организации[0].Значение);
			ТекстОрганизации = СведенияОбОрганизации.Представление+" (по всем);";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Лев(ТекстОрганизации, СтрДлина(ТекстОрганизации) - 1);
	
КонецФункции

Функция ПолучитьЦветНеИспользуемогоЭлемента() Экспорт 
	
	Возврат Новый Цвет(117, 117, 117);
	
КонецФункции

Процедура ДобавитьОтборПоОрганизации(ОтчетОбъект) Экспорт
	
	Если ЗначениеЗаполнено(ОтчетОбъект.мСписокСтруктурныхЕдиниц) Тогда
		НовыйОтбор = ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", ОтчетОбъект.мСписокСтруктурныхЕдиниц, ВидСравненияКомпоновкиДанных.ВСписке);
		НовыйОтбор.Представление = "###ОтборПоОрганизации###"; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОтборПоВидуУчета(ОтчетОбъект) Экспорт
	
	Если ЗначениеЗаполнено(ОтчетОбъект.ВидУчета) Тогда
		НовыйОтбор = ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидУчета", ОтчетОбъект.ВидУчета, ВидСравненияКомпоновкиДанных.Равно);
		НовыйОтбор.Представление = "###ОтборПоВидуУчета###"; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаРасшифровкиОтчетовДляРуководителя(ОтчетОбъект, ФормаОтчета, Расшифровка, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	МассивПолей = ТиповыеОтчеты.ПолучитьМассивПолейРасшифровки(Расшифровка, ФормаОтчета.ДанныеРасшифровки,, Истина);
	
	ВидРесурса    = Неопределено;
	БухВидРесурса = Неопределено;
	Субконто1     = Неопределено;
	Субконто2     = Неопределено;
	Период        = Неопределено;
	
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	Для Каждого Поле Из МассивПолей Цикл 
		Если ТипЗнч(Поле) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
			Если Поле.Поле = "Контрагент"           ИЛИ Поле.Поле = "Раздел"
			 ИЛИ Поле.Поле = "НоменклатурнаяГруппа" ИЛИ Поле.Поле = "ВидРасхода"
			 ИЛИ Поле.Поле = "ВидПоступления"       ИЛИ Поле.Поле = "ВидДенежныхСредств"
			 ИЛИ Поле.Поле = "Вид" Тогда
				Субконто1 = Поле.Значение;
			ИначеЕсли Поле.Поле = "Договор" ИЛИ Поле.Поле = "Подраздел" 
				  ИЛИ Поле.Поле = "Аналитика" Тогда
				Субконто2 = Поле.Значение;
			ИначеЕсли Поле.Поле = "ВидРесурса" Тогда
				ВидРесурса = Поле.Значение;
			ИначеЕсли Поле.Поле = "БухВидРесурса" Тогда
				БухВидРесурса = Поле.Значение;
			ИначеЕсли Поле.Поле = "Период" Тогда
				Период = Поле.Значение;
			ИначеЕсли Поле.Поле = "Валюта" ИЛИ Поле.Поле = "КонтрагентКор" Тогда
				КорСубконто1 = Поле.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ИдентификаторОбъекта = "ОтчетОбъект.ДоходыРасходы" Тогда
		Если Субконто1 <> "Расходы" И Субконто1 <> "Доходы без НДС" Тогда 
			Возврат;
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОстаткиДенежныхСредств" Тогда
		Если КорСубконто1 = Неопределено Тогда
			КорСубконто1 = "Итого, тенге";
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.Продажи" Тогда 
		Если ОтчетОбъект.РежимФормирования = 0 Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.НоменклатурнаяГруппа) Тогда
				Если Субконто1 = Неопределено Тогда
					Субконто1 = ОтчетОбъект.НоменклатурнаяГруппа;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ОтчетОбъект.РежимФормирования = 1 Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.Контрагент) Тогда
				Если КорСубконто1 = Неопределено Тогда
					КорСубконто1 = ОтчетОбъект.Контрагент;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ФормаОтчета.ЭлементыФормы.ПолеРасшифровка.Очистить();
	
	СхемаРасшифровки = ПолучитьОбщийМакет("МакетРасшифровкиОтчетовДляРуководителя");
	ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаРасшифровки));
	
	ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка.ЗагрузитьНастройки(СхемаРасшифровки.НастройкиПоУмолчанию);
	Попытка 
		ВидСравненияСубконто1 = ?(Субконто1.ЭтоГруппа, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
	Исключение
		ВидСравненияСубконто1 = ВидСравненияКомпоновкиДанных.Равно;
	КонецПопытки;
	Если Субконто1 <> Неопределено Тогда
		ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "Субконто1", Субконто1, ВидСравненияСубконто1);
	КонецЕсли;
	Если Субконто2 <> Неопределено Тогда
		ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "Субконто2", Субконто2);
	КонецЕсли;
	Попытка 
		ВидСравненияКорСубконто1 = ?(КорСубконто1.ЭтоГруппа, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
	Исключение
		ВидСравненияКорСубконто1 = ВидСравненияКомпоновкиДанных.Равно;
	КонецПопытки;
	Если КорСубконто1 <> Неопределено Тогда
		ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "КорСубконто1", КорСубконто1, ВидСравненияКорСубконто1);
	КонецЕсли;
	Если ВидРесурса <> Неопределено Тогда
		ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "ВидРесурса", ВидРесурса);
	КонецЕсли;
	Если БухВидРесурса <> Неопределено Тогда
		ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "БухВидРесурса", БухВидРесурса);
	КонецЕсли;
	Если Период <> Неопределено Тогда
		Если ИдентификаторОбъекта <> "ОтчетОбъект.ДинамикаЗадолженностиПокупателей"
			И ИдентификаторОбъекта <> "ОтчетОбъект.ДинамикаЗадолженностиПоставщикам" Тогда 
			ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "Период", Период, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
			ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "Период", ?(КонецПериода(Период, ОтчетОбъект.Интервал) > КонецДня(ОтчетОбъект.КонецПериода), КонецДня(ОтчетОбъект.КонецПериода), КонецПериода(Период, ОтчетОбъект.Интервал)), ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		КонецЕсли;
	КонецЕсли;
	ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "ВидОтчета", """" + ОтчетОбъект.Метаданные().Синоним + """");
	
	Показатель = "";	
	Если ИдентификаторОбъекта = "ОтчетОбъект.ЗадолженностьПокупателей"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ЗадолженностьПоставщикам" Тогда
		Если Субконто1 <> Неопределено И Субконто2 <> Неопределено Тогда
			Показатель = "Контрагент: " + Строка(Субконто1) + Символы.ПС + "Договор: " + Строка(Субконто2);
		ИначеЕсли Субконто1 <> Неопределено Тогда
			Показатель = "Контрагент: " + Строка(Субконто1);
		Иначе
			Показатель = "По контрагентам";
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотныеСредства" Тогда
		Если Субконто2 <> Неопределено Тогда
			Показатель = "Показатель: " + Строка(Субконто2);
		Иначе
			Показатель = "Показатель: " + Строка(Субконто1);
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ДоходыРасходы" Тогда
		Показатель = "Показатель: " + Строка(Субконто1);
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.Продажи" Тогда
		Если ОтчетОбъект.РежимФормирования = 0 Тогда
			Если Субконто1 = Неопределено Тогда		
				Показатель = "По номенклатурным группам";
			Иначе
				Показатель = "Номенклатурная группа: " + Строка(Субконто1);
			КонецЕсли;
		Иначе
			Если КорСубконто1 = Неопределено Тогда		
				Показатель = "По контрагентам";
			Иначе
				Показатель = "Контрагент: " + Строка(КорСубконто1);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОстаткиДенежныхСредств" Тогда
		Если Субконто1 <> Неопределено И Субконто2 <> Неопределено Тогда
			Показатель = "Вид: " + Строка(Субконто1) + Символы.ПС + "Аналитика: " + Строка(Субконто2);
		ИначеЕсли Субконто1 <> Неопределено Тогда
			Показатель = "Вид: " + Строка(Субконто1);
		КонецЕсли;
		Если ТипЗнч(КорСубконто1) = Тип("СправочникСсылка.Валюты") 
			И КорСубконто1 <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			Показатель = Показатель + Символы.ПС + "Валюта: " + КорСубконто1;
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ПоступлениеДенежныхСредств"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.РасходДенежныхСредств" Тогда
		Если Субконто1 <> Неопределено Тогда
			Показатель = "Показатель: " + Строка(Субконто1);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Показатель) Тогда 
		Показатель = Показатель + Символы.ПС;
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ОтчетОбъект.Продажи"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ДоходыРасходы"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ПоступлениеДенежныхСредств"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.РасходДенежныхСредств" Тогда
		Если Период = Неопределено Тогда
			Показатель = Показатель + "За " + ПолучитьПредставлениеПериода(ОтчетОбъект,,, Истина);
			ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "НачалоПериода", ОтчетОбъект.НачалоПериода);
			ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "КонецПериода" , ОтчетОбъект.КонецПериода);
		Иначе
			Показатель = Показатель + "За " + ПолучитьПредставлениеПериода(, Период, ?(КонецПериода(Период, ОтчетОбъект.Интервал) > КонецДня(ОтчетОбъект.КонецПериода), КонецДня(ОтчетОбъект.КонецПериода), КонецПериода(Период, ОтчетОбъект.Интервал)), Истина);
			ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "НачалоПериода", Период);
			ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "КонецПериода" , ?(КонецПериода(Период, ОтчетОбъект.Интервал) > КонецДня(ОтчетОбъект.КонецПериода), КонецДня(ОтчетОбъект.КонецПериода), КонецПериода(Период, ОтчетОбъект.Интервал)));
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотныеСредства"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ЗадолженностьПокупателей"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ЗадолженностьПоставщикам" Тогда 
		Если ВидРесурса = "начало" Тогда
			Показатель = Показатель + "На " + Формат(ОтчетОбъект.НачалоПериода, "ДФ=dd.MM.yyyy") + " (начало дня)";
		ИначеЕсли ВидРесурса = "конец" Тогда
			Показатель = Показатель + "На " + Формат(ОтчетОбъект.КонецПериода, "ДФ=dd.MM.yyyy") + " (конец дня)";
		ИначеЕсли ВидРесурса = "оборот" Тогда
			Показатель = Показатель + "За " + ПолучитьПредставлениеПериода(ОтчетОбъект,,, Истина);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "НачалоПериода", ОтчетОбъект.НачалоПериода);
		ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "КонецПериода" , ОтчетОбъект.КонецПериода);
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОстаткиДенежныхСредств" Тогда
		Показатель = Показатель + "На " + Формат(ОтчетОбъект.Период, "ДФ=dd.MM.yyyy") + " (конец дня)";
		ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "НачалоПериода", НачалоДня(ОтчетОбъект.Период));
		ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "КонецПериода" , КонецДня(ОтчетОбъект.Период));
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ДинамикаЗадолженностиПокупателей" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ДинамикаЗадолженностиПоставщикам" Тогда
		Показатель = Показатель + "На " + Формат(?(КонецПериода(Период, ОтчетОбъект.Интервал) > КонецДня(ОтчетОбъект.КонецПериода), КонецДня(ОтчетОбъект.КонецПериода), КонецПериода(Период, ОтчетОбъект.Интервал)), "ДФ=dd.MM.yyyy") + " (конец дня)";
		ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "НачалоПериода", Период);
		ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "КонецПериода" , ?(КонецПериода(Период, ОтчетОбъект.Интервал) > КонецДня(ОтчетОбъект.КонецПериода), КонецДня(ОтчетОбъект.КонецПериода), КонецПериода(Период, ОтчетОбъект.Интервал)));
	КонецЕсли;

	ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "Заголовок", Показатель);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаРасшифровки, ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка.Настройки, ФормаОтчета.ДанныеРасшифровкиПромежуточнаяРасшифровка);
	
	ВнешниеНаборыДанных = Новый Структура;
	Если ИдентификаторОбъекта = "ОтчетОбъект.ДинамикаЗадолженностиПокупателей"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ДинамикаЗадолженностиПоставщикам" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Знак,
		|	ВложенныйЗапрос.Счет,
		|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
		|	ВложенныйЗапрос.СтрокаРасшифровки,
		|	ВложенныйЗапрос.КорСчет,
		|	ВложенныйЗапрос.Субконто1,
		|	ВложенныйЗапрос.Субконто2,
		|	ВложенныйЗапрос.КорСубконто1,
		|	ВложенныйЗапрос.ВидРесурса,
		|	ВложенныйЗапрос.Период,
		|	ВложенныйЗапрос.БухВидРесурса
		|ИЗ
		|	(ВЫБРАТЬ 
		|	""+"" КАК Знак,
		|	ТиповойОстатки.Счет КАК Счет,
		|	ТиповойОстатки.СуммаРазвернутыйОстатокДтКт КАК Сумма,
		|	""Остаток ДтКт "" + ТиповойОстатки.Счет.Код + "" """""" + ТиповойОстатки.Счет.Наименование + """""""" КАК СтрокаРасшифровки,
		|	NULL КАК КорСчет,
		|	NULL КАК Субконто1,
		|	NULL КАК Субконто2,
		|	NULL КАК КорСубконто1,
		|	""конец"" КАК ВидРесурса,
		|	NULL КАК Период,
		|	""ДтКт"" КАК БухВидРесурса,
		|ТиповойОстатки.Субконто1 КАК Субконто11,
		|ТиповойОстатки.Субконто2 КАК Субконто21
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(
		|			&Период,
		|			(НЕ Счет.Забалансовый)
		|			И (НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета)),
		|			&ВидыСубконтоКД,";
		Если ИдентификаторОбъекта = "ОтчетОбъект.ДинамикаЗадолженностиПокупателей" Тогда
			Запрос.Текст = Запрос.Текст + "			Субконто2.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером))
			|				И Организация = &Организация) КАК ТиповойОстатки) КАК ВложенныйЗапрос";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДтКт", "Дт");
			
			ТипКонтрагента = 1;
		Иначе 
			Запрос.Текст = Запрос.Текст + "			Субконто2.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом))
			|				И Организация = &Организация) КАК ТиповойОстатки) КАК ВложенныйЗапрос";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДтКт", "Кт");
			
			ТипКонтрагента = 2;
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Знак,
		|	ВложенныйЗапрос.СтрокаРасшифровки,
		|	ВложенныйЗапрос.Счет,
		|	ВложенныйЗапрос.КорСубконто1,
		|	ВложенныйЗапрос.ВидРесурса,
		|	ВложенныйЗапрос.Период,
		|	ВложенныйЗапрос.БухВидРесурса,
		|	ВложенныйЗапрос.Субконто2,
		|	ВложенныйЗапрос.Субконто1,
		|	ВложенныйЗапрос.КорСчет";
		
		СписокСчетовИсключаемыхИзРасчетаЗадолженности = ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(ТипКонтрагента);	

		Запрос.УстановитьПараметр("Период", ?(КонецПериода(Период, ОтчетОбъект.Интервал) > КонецДня(ОтчетОбъект.КонецПериода), КонецДня(ОтчетОбъект.КонецПериода), КонецПериода(Период, ОтчетОбъект.Интервал)) + 1);
		ВидыСубконтоКД = Новый Массив;
		ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
		ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
		Запрос.УстановитьПараметр("ВидыСубконтоКД", ВидыСубконтоКД);
		Запрос.УстановитьПараметр("Организация", ОтчетОбъект.Организация);
		Запрос.УстановитьПараметр("ИсключенныеСчета", СписокСчетовИсключаемыхИзРасчетаЗадолженности);
		Если Не ЗначениеЗаполнено(ОтчетОбъект.Организация) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Организация = &Организация", "");
		КонецЕсли;
		ВнешниеНаборыДанных.Вставить("ТаблицаДанных", Запрос.Выполнить());
	Иначе
		ВнешниеНаборыДанных.Вставить("ТаблицаДанных", ОтчетОбъект.ПромежуточныеДанные);
	КонецЕсли;
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ФормаОтчета.ДанныеРасшифровкиПромежуточнаяРасшифровка);
	
	//Создадим и инициализируем процессор вывода результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ФормаОтчета.ЭлементыФормы.ПолеРасшифровка);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	Если ФормаОтчета.ЭлементыФормы.ПанельПользователя.Свертка <> РежимСверткиЭлементаУправления.Нет Тогда
		УправлениеОтображениемПанелиРасшифровки(ФормаОтчета, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОтборДляПоказателяКонтроль(ОтчетОбъект) Экспорт
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	
КонецПроцедуры

Функция ПолучитьСписокСчетовПоСубсчетам(Таблица) Экспорт
	
	СписокСчетовПоСубсчетам = Новый СписокЗначений;
	Для каждого СтрокаТаблицы Из Таблица Цикл
		Если СтрокаТаблицы.ПоСубсчетам И СтрокаТаблицы.Использование Тогда
			СписокСчетовПоСубсчетам.Добавить(СтрокаТаблицы.Счет);
		КонецЕсли;
	КонецЦикла;
	
    Возврат СписокСчетовПоСубсчетам;
	
КонецФункции

Функция ПолучитьТипИзмеренияПоУмолчанию(ТипЗначения) Экспорт
	
	Для каждого Тип Из ТипЗначения.Типы() Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			Если ОбъектМетаданных.Иерархический Тогда
				Возврат ПолучитьТипИзмеренияПостроителяОтчетаПоУмолчанию();;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТипИзмеренияПостроителяОтчета.Элементы;
	
КонецФункции

Функция ПолучитьТипИзмеренияПостроителяОтчетаПоУмолчанию()
	
	ТипДетализацииПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ТипДетализацииСтандартныхОтчетов");
	
	Если ТипДетализацииПоУмолчанию = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы Тогда
		Возврат ТипИзмеренияПостроителяОтчета.Элементы;
	ИначеЕсли ТипДетализацииПоУмолчанию = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
		Возврат ТипИзмеренияПостроителяОтчета.Иерархия;
	ИначеЕсли ТипДетализацииПоУмолчанию = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
		Возврат ТипИзмеренияПостроителяОтчета.ТолькоИерархия;
	Иначе
		Возврат ТипИзмеренияПостроителяОтчета.Элементы;
	КонецЕсли;
	
КонецФункции

Функция ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(ПолеТабличногоДокумента) Экспорт
	
	Сумма = 0;
	Для Каждого Область Из ПолеТабличногоДокумента.ВыделенныеОбласти Цикл
		Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Для ИндексСтрока = Область.Верх По Область.Низ Цикл
				Для ИндексКолонка = Область.Лево По Область.Право Цикл
					Попытка
						Сумма = Сумма + Число(СтрЗаменить(ПолеТабличногоДокумента.Область("R" + Формат(ИндексСтрока, "ЧГ=0") + "C" + Формат(ИндексКолонка, "ЧГ=0")) .Текст, " ", ""));
					Исключение
					КонецПопытки;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции

Процедура ОбработатьНаборДанныхСвязаннойИнформации(Схема, ИмяНабора, ПараметрыПоляВладельца, ИмяПоляПрефикс = "Субконто") Экспорт
	
	Если ПараметрыПоляВладельца.ИндексСубконто > 0 Тогда
		ПутьКДаннымОсновногоПоля = "";
		ЗаголовокОсновногоПоля   = "";
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если Найти(ПолеНабора.Поле, "СвязанноеПолеСсылка") = 1 Тогда
				ПутьКДаннымОсновногоПоля = ПолеНабора.ПутьКДанным;
				ЗаголовокОсновногоПоля   = СтрЗаменить(ПолеНабора.Заголовок, ".Ссылка", "");
			КонецЕсли;
		КонецЦикла;
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если Найти(ПолеНабора.Поле, "СвязанноеПоле") = 1 Тогда
				ПолеНабора.ПутьКДанным = СтрЗаменить(ПолеНабора.ПутьКДанным, ПутьКДаннымОсновногоПоля, ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто);
				ПолеНабора.Заголовок   = СтрЗаменить(ПолеНабора.Заголовок, ЗаголовокОсновногоПоля, ПараметрыПоляВладельца.ЗаголовокСубконто);
				ПолеНабора.ОграничениеИспользования.Группировка = Истина;
				ПолеНабора.ОграничениеИспользования.Поле        = Ложь;
				ПолеНабора.ОграничениеИспользования.Условие     = Истина;
				ПолеНабора.ОграничениеИспользования.Порядок     = Ложь;
			КонецЕсли;
		КонецЦикла;
		Для Каждого Связь Из Схема.СвязиНаборовДанных Цикл
			Если Связь.НаборДанныхПриемник = ИмяНабора Тогда
				Связь.ВыражениеИсточник = ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто;
				Связь.ВыражениеПриемник = ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если Найти(ПолеНабора.Поле, "СвязанноеПоле") = 1 Тогда
				ПолеНабора.ОграничениеИспользования.Группировка = Истина;
				ПолеНабора.ОграничениеИспользования.Поле        = Истина;
				ПолеНабора.ОграничениеИспользования.Условие     = Истина;
				ПолеНабора.ОграничениеИспользования.Порядок     = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПростойТип(Значение) Экспорт
	
	ОписаниеПростыхТипов = Новый ОписаниеТипов("Дата, Строка, Булево, Число");
	
	Возврат ОписаниеПростыхТипов.СодержитТип(ТипЗнч(Значение));
	
КонецФункции

Процедура СохранитьНастройку(ОтчетОбъект, ДополнительныеПоля = Неопределено, ВыбранныеНастройки = Неопределено) Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ОтчетОбъект);
	//Дополним структуру сохраняемых настрек значением списка организаций
	Если ДополнительныеПоля <> Неопределено Тогда 
		Для Каждого СтрокаСписка Из ДополнительныеПоля Цикл 
			СтруктураНастроек.Вставить(СтрокаСписка.Представление, СтрокаСписка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ТипНастройки = Перечисления.ТипыНастроек.НастройкиОтчета;
	
	// Если массив ВыбранныеНастройки заполнен,
	// то оставим в СтруктураНастроек только выбранные для сохранения настройки
	Если ВыбранныеНастройки <> Неопределено
		 И ВыбранныеНастройки.Количество() > 0 Тогда
		МассивЭлементовСтруктуры = Новый Массив;
		Для Каждого Элемент Из СтруктураНастроек Цикл
			МассивЭлементовСтруктуры.Добавить(Элемент.Ключ);
		КонецЦикла;
		Для Каждого Элемент Из МассивЭлементовСтруктуры Цикл
			Если ВыбранныеНастройки.Найти(Элемент) = Неопределено Тогда
				СтруктураНастроек.Удалить(Элемент);
			КонецЕсли;
		КонецЦикла;
		ТипНастройки = Перечисления.ТипыНастроек.НастройкиПользователяНастройкиОтчета;
	КонецЕсли;
	
	СсылкаНаОбъект = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	
	СохраненнаяНастройка = ОтчетОбъект.СохраненнаяНастройка;
	Если СохраненнаяНастройка = Неопределено
		 ИЛИ СохраненнаяНастройка.Пустая() Тогда
		ПользователиДляОтбора = Новый Массив;
		ПользователиДляОтбора.Добавить(ПараметрыСеанса.ТекущийПользователь);
		ПользователиДляОтбора.Добавить(Справочники.ГруппыПользователей.ВсеПользователи);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	СохраненныеНастройки.Ссылка КАК СохраненнаяНастройка
		|ИЗ
		|	Справочник.СохраненныеНастройки.Пользователи КАК СохраненныеНастройкиПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СохраненныеНастройки КАК СохраненныеНастройки
		|		ПО СохраненныеНастройкиПользователи.Ссылка = СохраненныеНастройки.Ссылка
		|ГДЕ
		|	СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА
		|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект
		|	И СохраненныеНастройкиПользователи.Пользователь В(&Пользователи)
		|	И СохраненныеНастройки.ТипНастройки = &ТипНастройки
		|	И (НЕ СохраненныеНастройки.ПометкаУдаления)";
		
		Запрос.УстановитьПараметр("Пользователи", ПользователиДляОтбора);
		Запрос.УстановитьПараметр("НастраиваемыйОбъект", СсылкаНаОбъект);
		Запрос.УстановитьПараметр("ТипНастройки", ТипНастройки);
		ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаРезультата.Количество() > 0 Тогда
			СохраненнаяНастройка = ТаблицаРезультата[0].СохраненнаяНастройка;
		Иначе
			Настройка = Справочники.СохраненныеНастройки.СоздатьЭлемент();
			Настройка.НастраиваемыйОбъект = СсылкаНаОбъект;
			Настройка.ТипНастройки = Перечисления.ТипыНастроек.НастройкиПользователяНастройкиОтчета;
			Настройка.Наименование = "НастройкиПользователяНастройкиОтчета";
			Настройка.ИспользоватьПриОткрытии = Истина;
			НовыйПользователь = Настройка.Пользователи.Добавить();
			НовыйПользователь.Пользователь = глЗначениеПеременной("глТекущийПользователь");
			Настройка.Записать();
			
			СохраненнаяНастройка = Настройка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ИнициализацияОтчета(ОтчетОбъект) Экспорт
	
	Попытка
		РежимРасшифровки = ОтчетОбъект.РежимРасшифровки;
	Исключение
		РежимРасшифровки = Ложь;
	КонецПопытки;		
	
	Если Не ЗначениеЗаполнено(ОтчетОбъект.СохраненнаяНастройка) И Не РежимРасшифровки Тогда
		Если ОтчетОбъект.Метаданные().Реквизиты.Найти("НачалоПериода") <> Неопределено Тогда
			ОтчетОбъект.НачалоПериода = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяДатаНачалаОтчетов");
			Если Не ЗначениеЗаполнено(ОтчетОбъект.НачалоПериода) Тогда 
				ОтчетОбъект.НачалоПериода = УправлениеОтчетами.ПроверкаПериода(НачалоМесяца(ТекущаяДата()));
			КонецЕсли;
		КонецЕсли;
		Если ОтчетОбъект.Метаданные().Реквизиты.Найти("КонецПериода") <> Неопределено Тогда
			ОтчетОбъект.КонецПериода  = УправлениеОтчетами.ПроверкаПериода(КонецМесяца(ТекущаяДата()));
		КонецЕсли;
		
		ОтчетОбъект.мСписокСтруктурныхЕдиниц.Очистить();
		ОтчетОбъект.мСписокСтруктурныхЕдиниц.Добавить(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация"));
	
		Если ОтчетОбъект.Метаданные().Реквизиты.Найти("ПредставлениеСпискаИсточниковФинансирования") <> Неопределено Тогда
		ОтчетОбъект.мСписокИсточниковФинансирования.Очистить();
		//ОтчетОбъект.мСписокИсточниковФинансирования.Добавить(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ИсточникФинансирования"));
		КонецЕсли;
		
		Попытка
			ОтчетОбъект.мСписокПодразделений.Очистить();
			СтруктурноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновноеСтруктурноеПодразделениеОрганизации");
			Если ТипЗнч(СтруктурноеПодразделение) = Тип("СправочникСсылка.Организации") Тогда 
				СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			КонецЕсли;
			ОтчетОбъект.мСписокПодразделений.Добавить(СтруктурноеПодразделение);
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ФОРМОЙ ОТЧЕТА
////////////////////////////////////////////////////////////////////////////////

Процедура РезультатПриАктивизацииОбласти(ФормаОтчета, Элемент) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	Если ЭлементыФормы.ПолеСумма.Видимость Тогда
		ЭлементыФормы.ПолеСумма.Значение = ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(Элемент);
	КонецЕСли;
	
КонецПроцедуры

Процедура НастроитьСтраницыПанелиПользователя(ФормаОтчета, Кнопка) Экспорт
	
	ФормаНастройкиПанелиПользователя = ПолучитьОбщуюФорму("ФормаНастройкиПанелиПользователя", ФормаОтчета);
	
	ФормаНастройкиПанелиПользователя.ЗакрыватьПанельПриФормированииОтчета = ФормаОтчета.НастройкиФормы.ЗакрыватьПанельПриФормированииОтчета;
	ФормаНастройкиПанелиПользователя.ТаблицаСтраниц                       = ПолучитьТаблицуСтраниц(ФормаОтчета);
	Если ФормаНастройкиПанелиПользователя.ОткрытьМодально() = КодВозвратаДиалога.ОК Тогда
		ТаблицаСтраниц = ФормаНастройкиПанелиПользователя.ТаблицаСтраниц;
		ОбработкаИзмененияТаблицыСтраниц(ФормаОтчета, ТаблицаСтраниц);
		ФормаОтчета.НастройкиФормы.ЗакрыватьПанельПриФормированииОтчета = ФормаНастройкиПанелиПользователя.ЗакрыватьПанельПриФормированииОтчета;
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьТаблицуСтраниц(ФормаОтчета) Экспорт 
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	ТаблицаСтраниц = Новый ТаблицаЗначений;
	ТаблицаСтраниц.Колонки.Добавить("Использование");
	ТаблицаСтраниц.Колонки.Добавить("Страница");
	ТаблицаСтраниц.Колонки.Добавить("Представление");
	ТаблицаСтраниц.Колонки.Добавить("Высота");
	ТаблицаСтраниц.Колонки.Добавить("Раскрыта");
	
	Для Каждого Страница Из ЭлементыФормы.ПанельЗакладок.Страницы Цикл
		НоваяСтрока = ТаблицаСтраниц.Добавить();
		НоваяСтрока.Использование = Страница.Видимость;
		НоваяСтрока.Представление = Страница.Заголовок;
		НоваяСтрока.Страница      = Страница.Имя;
		НоваяСтрока.Раскрыта      = Страница.Раскрыта;
	КонецЦикла;
	
	Возврат ТаблицаСтраниц;
	
КонецФункции

Процедура ОбработкаИзмененияТаблицыСтраниц(ФормаОтчета, ТаблицаСтраниц) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	Если ТипЗнч(ТаблицаСтраниц) = Тип("ТаблицаЗначений") Тогда	
		ЭлементыФормы.ПанельЗакладок.РежимПрокручиваемыхСтраниц = Ложь;
		Индекс = 0;
		Для Каждого СтрокаТаблицы Из ТаблицаСтраниц Цикл
			СтраницыПанели = ЭлементыФормы.ПанельЗакладок.Страницы;
			Если СтраницыПанели.Найти(СтрокаТаблицы.Страница)<> Неопределено Тогда
				Страница = СтраницыПанели[СтрокаТаблицы.Страница];
				Страница.Видимость = СтрокаТаблицы.Использование; 
				Страница.Раскрыта  = СтрокаТаблицы.Раскрыта;
				
				ТекущаяПозиция = СтраницыПанели.Индекс(Страница);
				Если ТекущаяПозиция <> Индекс Тогда
					СтраницыПанели.Сдвинуть(Страница, Индекс - ТекущаяПозиция);
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЕсли;
		КонецЦикла;
		Если ФормаОтчета.НастройкиФормы.Свойство("ТаблицаЭлементов") Тогда
			Для Каждого ЭлементУправления Из ФормаОтчета.НастройкиФормы.ТаблицаЭлементов Цикл
				Элемент = ЭлементыФормы[ЭлементУправления.Элемент];
				Если Элемент.Верх <> ЭлементУправления Тогда
					Элемент.Верх = ЭлементУправления.Верх;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ЭлементыФормы.ПанельЗакладок.РежимПрокручиваемыхСтраниц = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьНастройкиФормы(ФормаОтчета) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	НастройкиФормы = ФормаОтчета.НастройкиФормы;
	
	Если ЭлементыФормы.Найти("ФлагВыводитьЗаголовок")<>Неопределено Тогда
		НастройкиФормы.Вставить("ВыводитьЗаголовок"        , ЭлементыФормы.ФлагВыводитьЗаголовок.Значение);
	КонецЕсли;
	Если ЭлементыФормы.Найти("ФлагВыводитьПодписи")<>Неопределено Тогда
		НастройкиФормы.Вставить("ВыводитьПодписи"          , ЭлементыФормы.ФлагВыводитьПодписи.Значение);
	КонецЕсли;
	Если ЭлементыФормы.Найти("ПанельПользователя")<>Неопределено Тогда
		НастройкиФормы.Вставить("ПанельПользователяПометка", ЭлементыФормы.ДействияФормыДополнительные.Кнопки.ПанельПользователя.Пометка);
		НастройкиФормы.Вставить("ШиринаПанелиПользователя" , ЭлементыФормы.ПанельПользователя.Ширина);
	КонецЕсли;
	Если ЭлементыФормы.Найти("ПолеВыбораОформления")<>Неопределено Тогда
		НастройкиФормы.Вставить("МакетОформления"          , ЭлементыФормы.ПолеВыбораОформления.Значение);
	КонецЕсли;
	НастройкиФормы.Вставить("ТаблицаСтраниц"           , ПолучитьТаблицуСтраниц(ФормаОтчета));

	КнопкаПоказатьДиаграмму = ЭлементыФормы.ДействияФормыДополнительные.Кнопки.Найти("ПоказатьДиаграмму");
	Если КнопкаПоказатьДиаграмму <> Неопределено Тогда
		НастройкиФормы.Вставить("ВыводитьДиаграмму", КнопкаПоказатьДиаграмму.Пометка);
	КонецЕсли;
	
	Если ЭлементыФормы.Найти("ФлагВыводитьСуммуЯчеек")<>Неопределено Тогда
		НастройкиФормы.Вставить("ВыводитьСуммуЯчеек", ЭлементыФормы.ФлагВыводитьСуммуЯчеек.Значение);
	КонецЕсли;
	
	Если ЭлементыФормы.Найти("ИспользоватьОформлениеГруппировок")<>Неопределено Тогда
		НастройкиФормы.Вставить("ИспользоватьОформлениеГруппировок"        , ЭлементыФормы.ИспользоватьОформлениеГруппировок.Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьНастройкиФормы(ФормаОтчета, ВсеНастройки = Истина) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	НастройкиФормы = ФормаОтчета.НастройкиФормы;
	
	Если ВсеНастройки Тогда
		Если НастройкиФормы = Неопределено Тогда
			НастройкиФормы = Новый Структура;
		КонецЕсли;
		
		Если НастройкиФормы.Свойство("ВыводитьЗаголовок") Тогда
			ВыводитьЗаголовок = НастройкиФормы.ВыводитьЗаголовок;
		Иначе
			НастройкиФормы.Вставить("ВыводитьЗаголовок", Истина);
			ВыводитьЗаголовок = Истина;
		КонецЕсли;
		ЭлементыФормы.ФлагВыводитьЗаголовок.Значение = ВыводитьЗаголовок;
		
		Если НастройкиФормы.Свойство("ВыводитьПодписи") Тогда
			ВыводитьПодписи = НастройкиФормы.ВыводитьПодписи;
		Иначе
			НастройкиФормы.Вставить("ВыводитьПодписи", Ложь);
			ВыводитьПодписи = Ложь;
		КонецЕсли;
		ЭлементыФормы.ФлагВыводитьПодписи.Значение = ВыводитьПодписи;
		
		Если НастройкиФормы.Свойство("ВыводитьПодписиРуководителей") Тогда
			ВыводитьПодписиРуководителей = НастройкиФормы.ВыводитьПодписиРуководителей;
		Иначе
			НастройкиФормы.Вставить("ВыводитьПодписиРуководителей", Ложь);
			ВыводитьПодписиРуководителей = Ложь;
		КонецЕсли;
		ЭлементыФормы.ФлагВыводитьПодписиРуководителей.Значение = ВыводитьПодписиРуководителей;
		
		Если НастройкиФормы.Свойство("ПанельПользователяПометка") Тогда
			ЭлементыФормы.ДействияФормыДополнительные.Кнопки.ПанельПользователя.Пометка = НастройкиФормы.ПанельПользователяПометка;
		КонецЕсли;
		
		Если НастройкиФормы.Свойство("ВыводитьСуммуЯчеек") Тогда
			ВыводитьСуммуЯчеек = НастройкиФормы.ВыводитьСуммуЯчеек;
			ЭлементыФормы.ФлагВыводитьСуммуЯчеек.Значение = ВыводитьСуммуЯчеек;
		КонецЕсли;
		
		Если Не НастройкиФормы.Свойство("ШиринаПанелиПользователя") Тогда
			НастройкиФормы.Вставить("ШиринаПанелиПользователя", 306);
		КонецЕсли;
		
		Если НастройкиФормы.Свойство("ТаблицаЭлементов") Тогда
			НастройкиФормы.Удалить("ТаблицаЭлементов");
		КонецЕсли;
		
		Если НастройкиФормы.Свойство("ТаблицаСтраниц") Тогда
			ОбработкаИзмененияТаблицыСтраниц(ФормаОтчета, НастройкиФормы.ТаблицаСтраниц);
		КонецЕсли;
		
		Если Не НастройкиФормы.Свойство("ЗакрыватьПанельПриФормированииОтчета") Тогда
			НастройкиФормы.Вставить("ЗакрыватьПанельПриФормированииОтчета", Ложь);
		КонецЕсли;
		
		Если Не НастройкиФормы.Свойство("МакетОформления") Тогда
			НастройкиФормы.Вставить("МакетОформления", 0);
		КонецЕсли;
		Если ЭлементыФормы.Найти("ПолеВыбораОформления")<>Неопределено Тогда
			ЭлементыФормы.ПолеВыбораОформления.Значение = НастройкиФормы.МакетОформления;
		КонецЕсли;
		
		КнопкаДиаграмма = ЭлементыФормы.ДействияФормыДополнительные.Кнопки.Найти("Диаграмма");
		Если КнопкаДиаграмма <> Неопределено Тогда
			Если Не НастройкиФормы.Свойство("ВыводитьДиаграмму") Тогда
				НастройкиФормы.Вставить("ВыводитьДиаграмму", Ложь);
			КонецЕсли;
			КнопкаДиаграмма.Пометка = НастройкиФормы.ВыводитьДиаграмму;
		КонецЕсли;
		
		Если ЭлементыФормы.Найти("ИспользоватьОформлениеГруппировок") <> Неопределено Тогда
			Если НастройкиФормы.Свойство("ИспользоватьОформлениеГруппировок") Тогда
				ИспользоватьОформлениеГруппировок = НастройкиФормы.ИспользоватьОформлениеГруппировок;
				ЭлементыФормы.ИспользоватьОформлениеГруппировок.Значение = ИспользоватьОформлениеГруппировок;
			Иначе
				НастройкиФормы.Вставить("ИспользоватьОформлениеГруппировок", Истина);
				ЭлементыФормы.ИспользоватьОформлениеГруппировок.Значение = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ФормаОтчета.НастройкиФормы = НастройкиФормы;
	
КонецПроцедуры

Процедура ДобавитьЭлементСортировки(ОтчетОбъект, ФормаОтчета, Отказ = Ложь) Экспорт
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
	РодителиПоля = ПолучитьЗапрещенныеПоля(ОтчетОбъект, "Сортировка");
	Форма.РодителиПоля = РодителиПоля;
	Форма.Режим = "Порядок";
	Форма.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	ТекущиеДанные = Форма.ОткрытьМодально();
	Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
		ЭлементПорядка = ОтчетОбъект.КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	
		ЭлементПорядка.Поле  = ТекущиеДанные.Поле;
		ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		
		ФормаОтчета.ЭлементыФормы.Сортировка.ТекущаяСтрока = ЭлементПорядка;
	КонецЕсли;
	
КонецПроцедуры

Процедура СортировкаПередНачаломИзменения(ОтчетОбъект, ФормаОтчета, Элемент, Отказ) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	Если Элемент.ТекущаяКолонка.Имя = "Поле" Тогда
		ТекущаяСтрока = ЭлементыФормы.Сортировка.ТекущаяСтрока;
		Форма = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
		РодителиПоля = ПолучитьЗапрещенныеПоля(ОтчетОбъект, "Сортировка");
		Форма.РодителиПоля = РодителиПоля;
		Форма.Режим = "Порядок";
		Форма.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
		Форма.ПараметрТекущаяСтрока = ПолучитьСвойствоПоля(Форма.КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка, ТекущаяСтрока.Поле, "ДоступноеПоле");
		ТекущиеДанные = Форма.ОткрытьМодально();
		Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
			ЭлементПорядка = ЭлементыФормы.Сортировка.ТекущаяСтрока;
			
			ЭлементПорядка.Поле  = ТекущиеДанные.Поле;
			ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		КонецЕсли;
		Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОтборНачалоВыбора(ОтчетОбъект, ФормаОтчета, Элемент, СтандартнаяОбработка) Экспорт
		
	Если ТипЗнч(Элемент.Значение) = Тип("ПолеКомпоновкиДанных") Тогда
		СтандартнаяОбработка = Ложь;
		
		Форма = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
		
		РодителиПоля = ПолучитьЗапрещенныеПоля(ОтчетОбъект, "Отбор");
		Форма.РодителиПоля = РодителиПоля;
		
		Форма.Режим = "Отбор";
		Форма.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
		Форма.ПараметрТекущаяСтрока = ПолучитьСвойствоПоля(Форма.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора, Элемент.Значение, "ДоступноеПоле");
		
		ТекущиеДанные = Форма.ОткрытьМодально();
		
		Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеОтбораКомпоновкиДанных") Тогда
			Элемент.Значение  = ТекущиеДанные.Поле;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
		Поле = ФормаОтчета.ЭлементыФормы.Отбор.ТекущиеДанные.ЛевоеЗначение;
		ПозицияНазванияХарактеристики = Найти(Поле, "[");
		
		ПолеРодитель = Лев(Поле, ПозицияНазванияХарактеристики - 2);
		ИмяХарактеристики = СтрЗаменить(Сред(Поле, ПозицияНазванияХарактеристики + 1), " (доп. реквизит)", "");
		ИмяХарактеристики = СтрЗаменить(ИмяХарактеристики, "]", "");
		
		ТипПолеРодитель = ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек, ПолеРодитель, "Тип");
		Если ТипПолеРодитель = Неопределено Тогда
			ТипПолеРодитель = ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора, ПолеРодитель, "Тип");
		КонецЕсли;
		
		Если ТипПолеРодитель <> Неопределено Тогда
			ВыборкаНазначения = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Выбрать();
			
			НазначениеСсылка = Неопределено;
			Пока ВыборкаНазначения.Следующий() Цикл
				Если Не ВыборкаНазначения.ПометкаУдаления Тогда
					МассивТипов = ТипПолеРодитель.Типы();
					НазначениеСсылка = ВыборкаНазначения.Ссылка;
					Для Каждого ЭлементМассива Из МассивТипов Цикл
						Если Не ВыборкаНазначения.ТипЗначения.СодержитТип(ЭлементМассива) Тогда
							НазначениеСсылка = Неопределено;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НазначениеСсылка <> Неопределено Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если НазначениеСсылка <> Неопределено Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СвойстваОбъектов.Ссылка КАК Ссылка
				|ИЗ
				|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
				|ГДЕ
				|	СвойстваОбъектов.НазначениеСвойства = &Назначение
				|	И СвойстваОбъектов.Наименование = &ИмяХарактеристики";
				Запрос.УстановитьПараметр("Назначение"       , НазначениеСсылка);
				Запрос.УстановитьПараметр("ИмяХарактеристики", ИмяХарактеристики);
				
				Результат = Запрос.Выполнить();
				Если Не Результат.Пустой() Тогда
					Выборка = Результат.Выбрать();
					Выборка.Следующий();
					
					ХарактеристикаСсылка = Выборка.Ссылка;
					
					СтандартнаяОбработка = Ложь;
					ФормаВыбора = Справочники.ЗначенияСвойствОбъектов.ПолучитьФормуВыбора(, Элемент);
					ФормаВыбора.Отбор.Владелец.Значение      = ХарактеристикаСсылка;
					ФормаВыбора.Отбор.Владелец.Использование = Истина;
					
					ФормаВыбора.Открыть();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтборДобавитьГруппу(ОтчетОбъект, ФормаОтчета, Кнопка) Экспорт
	
	ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		
КонецПроцедуры

Процедура ОтборДобавитьЭлемент(ОтчетОбъект, ФормаОтчета, Отказ = Ложь) Экспорт
	
	Отказ = Истина;
	
	ТекущаяСтрока = ФормаОтчета.ЭлементыФормы.Отбор.ТекущаяСтрока;
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
	РодителиПоля = ПолучитьЗапрещенныеПоля(ОтчетОбъект, "Отбор");
	Форма.РодителиПоля = РодителиПоля;
	Форма.Режим = "Отбор";
	Форма.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	ТекущиеДанные = Форма.ОткрытьМодально();
	Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеОтбораКомпоновкиДанных") Тогда
		Если ТипЗнч(ТекущаяСтрока) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЭлементОтбора = ТекущаяСтрока.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ИначеЕсли ТипЗнч(ТекущаяСтрока) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ТекущаяСтрока.Родитель <> Неопределено Тогда
				ЭлементОтбора = ТекущаяСтрока.Родитель.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Иначе
				ЭлементОтбора = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			КонецЕсли;
		Иначе
			ЭлементОтбора = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		
		ЭлементОтбора.ЛевоеЗначение  = ТекущиеДанные.Поле;
		ЭлементОтбора.ПравоеЗначение = ТекущиеДанные.Тип.ПривестиЗначение(Неопределено);
		
		Если ТекущиеДанные.ДоступныеВидыСравнения.Количество() > 0 Тогда
			ЭлементОтбора.ВидСравнения   = ТекущиеДанные.ДоступныеВидыСравнения[0].Значение;
		КонецЕсли;
		ОтборПриОкончанииРедактирования(ФормаОтчета, Неопределено, Истина, Ложь);
		
		ФормаОтчета.ЭлементыФормы.Отбор.ТекущаяСтрока = ЭлементОтбора;
	КонецЕсли;
		
КонецПроцедуры

Процедура ОтборПриОкончанииРедактирования(ФормаОтчета, Элемент, НоваяСтрока, ОтменаРедактирования) Экспорт
	
	Для Каждого ЭлементОтбора Из ФормаОтчета.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			
			Если (ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация")) 
				Или (ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") И ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений())  Тогда
				
				ФормаОтчета.ОтчетОбъект.мСписокПодразделений.Очистить();
				ФормаОтчета.ОтчетОбъект.мСписокСтруктурныхЕдиниц.Очистить();
				ФормаОтчета.ОтчетОбъект.мДеревоСтруктурныхЕдиниц.Строки.Очистить();
	
				ФормаОтчета.ОтчетОбъект.ПредставлениеСпискаОрганизаций = "";
				ФормаОтчета.ОтчетОбъект.ПредставлениеСпискаПодразделений = "";
							
			КонецЕсли;		
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Процедура удаляет из списка подразделений, те позиции которые
//не входят в список организаций.
Процедура ОтборПодразделенийПоОрганизациям(Организации, Подразделения) Экспорт
	
	Для Каждого Подразделение Из Подразделения Цикл 
		Если Организации.НайтиПоЗначению(Подразделение) = Неопределено Тогда 
			Подразделения.Удалить(Подразделение);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры //ОтборПодразделенийПоОрганизациям

Процедура ГруппировкаДобавитьЭлемент(ОтчетОбъект, ФормаОтчета, Отказ = Ложь, ТаблицаГруппировки = "Группировка") Экспорт
	
	Отказ = Истина;
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
	РодителиПоля = ПолучитьЗапрещенныеПоля(ОтчетОбъект, ТаблицаГруппировки);
	Форма.РодителиПоля = РодителиПоля;
	Форма.Режим = "Группировка";
	Форма.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	ТекущиеДанные = Форма.ОткрытьМодально();
	Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
		НоваяСтрока = ФормаОтчета[ТаблицаГруппировки].Добавить();
		
		НоваяСтрока.Использование  = Истина;
		НоваяСтрока.Представление  = ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек, ТекущиеДанные.Поле);
		НоваяСтрока.Поле           = ТекущиеДанные.Поле;
		НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
		
		ФормаОтчета.ЭлементыФормы[ТаблицаГруппировки].ТекущаяСтрока = НоваяСтрока;
	КонецЕсли;
	
КонецПроцедуры

Процедура ГруппировкаПередНачаломИзменения(ОтчетОбъект, ФормаОтчета, Элемент, Отказ, ТаблицаГруппировки = "Группировка") Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	Если Элемент.ТекущаяКолонка.Имя = "Представление" Тогда
		ТекущаяСтрока = ЭлементыФормы[ТаблицаГруппировки].ТекущаяСтрока;
		Форма = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
		РодителиПоля = ПолучитьЗапрещенныеПоля(ОтчетОбъект, ТаблицаГруппировки);
		Форма.РодителиПоля = РодителиПоля;
		Форма.Режим = "Группировка";
		Форма.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
		Форма.ПараметрТекущаяСтрока = ПолучитьСвойствоПоля(Форма.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок, ТекущаяСтрока.Поле, "ДоступноеПоле");
		ТекущиеДанные = Форма.ОткрытьМодально();
		Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
			НоваяСтрока = ЭлементыФормы[ТаблицаГруппировки].ТекущаяСтрока;
			
			НоваяСтрока.Использование = Истина;
			НоваяСтрока.Представление = ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек, ТекущиеДанные.Поле);
			НоваяСтрока.Поле          = Строка(ТекущиеДанные.Поле);
		КонецЕсли;
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнительныеПоляДобавитьЭлемент(ОтчетОбъект, ФормаОтчета, Отказ = Ложь) Экспорт
	
	Отказ = Истина;
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
	РодителиПоля = ПолучитьЗапрещенныеПоля(ОтчетОбъект, "ДополнительныеПоля");		
	Форма.РодителиПоля = РодителиПоля;
	Форма.Режим = "ВыбранныеПоля";
	Форма.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	ТекущиеДанные = Форма.ОткрытьМодально();
	Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
		НоваяСтрока = ФормаОтчета.ДополнительныеПоля.Добавить();
		
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Представление = ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек, ТекущиеДанные.Поле);
		НоваяСтрока.Поле          = ТекущиеДанные.Поле;
		
		ФормаОтчета.ЭлементыФормы.ДополнительныеПоля.ТекущаяСтрока = НоваяСтрока;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнительныеПоляПередНачаломИзменения(ОтчетОбъект, ФормаОтчета, Элемент, Отказ) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	Если Элемент.ТекущаяКолонка.Имя = "Представление" Тогда 
		ТекущаяСтрока = ЭлементыФормы.ДополнительныеПоля.ТекущаяСтрока;
		Форма = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
		РодителиПоля = ПолучитьЗапрещенныеПоля(ОтчетОбъект, "ДополнительныеПоля");	
		Форма.РодителиПоля = РодителиПоля;
		Форма.Режим = "ВыбранныеПоля";
		Форма.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
		Форма.ПараметрТекущаяСтрока = ПолучитьСвойствоПоля(Форма.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора, ТекущаяСтрока.Поле, "ДоступноеПоле");		
		ТекущиеДанные = Форма.ОткрытьМодально();
		Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
			НоваяСтрока = ЭлементыФормы.ДополнительныеПоля.ТекущаяСтрока;
			
			НоваяСтрока.Использование = Истина;
			НоваяСтрока.Представление = ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек, ТекущиеДанные.Поле);
			НоваяСтрока.Поле          = ТекущиеДанные.Поле;
		КонецЕсли;
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказателиОтчетаПередНачаломИзменения(ОтчетОбъект, Элемент, Отказ) Экспорт
	
	ПоказателиОтчета = ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета;
	
	Для Каждого ЭлементСтруктуры Из ПоказателиОтчета Цикл
		НайденнаяСтрока = Элемент.Значение.Найти(ЭлементСтруктуры.Значение.Представление, "Показатель");
		Если НайденнаяСтрока <> Неопределено Тогда
			ЭлементСтруктуры.Значение.Значение = НайденнаяСтрока.Использование;
		КонецЕсли;
	КонецЦикла;
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ПоказателиОтчетаПриИзмененииФлажка(ОтчетОбъект, Элемент, Колонка) Экспорт
	
	ЗначениеПоказателей = Элемент.Значение;
	ПоказателиОтчета = ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета;
	
	Количество = 0;
	Для Каждого СтрокаТаблицы Из ЗначениеПоказателей Цикл
		Если СтрокаТаблицы.Показатель <> "Развернутое сальдо" Тогда
			Количество = Количество + СтрокаТаблицы.Использование;
		КонецЕсли;
	КонецЦикла;
	
	Если Количество = 0 Тогда
		Элемент.ТекущаяСтрока.Использование = Истина;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из ПоказателиОтчета Цикл
		НайденнаяСтрока = ЗначениеПоказателей.Найти(ЭлементСтруктуры.Значение.Представление, "Показатель");
		Если НайденнаяСтрока <> Неопределено Тогда
			ЭлементСтруктуры.Значение.Значение = НайденнаяСтрока.Использование;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоказателиОтчетаПриВыводеСтроки(ОтчетОбъект, Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт 
	
КонецПроцедуры

Процедура ОбновитьПредставлениеПоказателейОтчета(ОтчетОбъект, ФормаОтчета) Экспорт
	
	Если ОтчетОбъект.ДанныеОтчета.Свойство("ПоказателиОтчета") Тогда
		ПоказателиОтчета = ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета;
	Иначе
		ОтчетОбъект.ПолучитьСтруктуруПоказателейОтчета();
		ПоказателиОтчета = ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета;
	КонецЕсли;
	
	ТабличноеПоле = ФормаОтчета.ЭлементыФормы.Найти("ПоказателиОтчета");
	Если ТабличноеПоле <> Неопределено Тогда 
		ЗначениеПоказателей = ТабличноеПоле.Значение;
	Иначе
		ЗначениеПоказателей = Новый ТаблицаЗначений;
		ЗначениеПоказателей.Колонки.Добавить("Использование");
		ЗначениеПоказателей.Колонки.Добавить("Показатель");
	КонецЕсли;
	
	ЗначениеПоказателей.Очистить();
	
	Для Каждого Показатель Из ПоказателиОтчета Цикл
		Если Показатель.Значение.Использование Тогда			
			НоваяСтрока = ЗначениеПоказателей.Добавить();
			НоваяСтрока.Использование = Показатель.Значение.Значение;
			НоваяСтрока.Показатель    = Показатель.Значение.Представление;
		КонецЕсли;
	КонецЦикла;
	
	ФормаОтчета.ЭлементыФормы.ПоказателиОтчета.Значение = ЗначениеПоказателей;	
	
КонецПроцедуры

Процедура ПредставлениеПодписиДиаграммыНачалоВыбора(ФормаОтчета, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ФормаСоставаПодписи = ПолучитьОбщуюФорму("ФормаНастройкиСоставаПодписи", ФормаОтчета);
	ФормаСоставаПодписи.СоставПодписи      = ФормаОтчета.ДанныеОтчета.ВидПодписиДиаграммы;
	ФормаСоставаПодписи.ДоступностьПериода = ФормаОтчета.Периодичность > 0;
	Если ФормаСоставаПодписи.ОткрытьМодально() = КодВозвратаДиалога.ОК Тогда
		ФормаОтчета.ДанныеОтчета.ВидПодписиДиаграммы = ФормаСоставаПодписи.СоставПодписи;
		ФормаОтчета.ПредставлениеПодписиДиаграммы = ПолучитьВидПодписиДиаграммы(ФормаОтчета.ДанныеОтчета.ВидПодписиДиаграммы, Истина);
		ОбработкаИзмененияНастроекДиаграммы(ФормаОтчета, ФормаОтчета.ЭлементыФормы.Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеОтображениемПанелиПользователя(ФормаОтчета) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	Кнопка        = ЭлементыФормы.ДействияФормыДополнительные.Кнопки.ПанельПользователя;
	
	Если Кнопка.Пометка Тогда
		
		ЭлементыФормы.ПанельПользователя.Видимость   = Истина;
		ЭлементыФормы.ПанельПользователя.Доступность = Истина;
		ЭлементыФормы.Разделитель.Видимость   = Истина;
		ЭлементыФормы.Разделитель.Доступность = Истина;
		
		ШиринаФормы = ФормаОтчета.Ширина;
		ШиринаПанели = ЭлементыФормы.ПанельПользователя.Ширина;
		ШиринаЭлементовОбщая = ЭлементыФормы.Результат.Ширина;
		
		Если ШиринаЭлементовОбщая > ШиринаФормы Тогда
			ШиринаИсходная = ШиринаЭлементовОбщая;
		Иначе
			ШиринаИсходная = ШиринаФормы;
		КонецЕсли;

		Если (ШиринаПанели / ШиринаИсходная > 0.5) ИЛИ (ШиринаПанели < 102) тогда
			ШиринаПанели = 306;
			ЭлементыФормы.Разделитель.Лево = ШиринаИсходная - ШиринаПанели - 6;
		КонецЕсли;
		
		НоваяШиринаРезультата = ЭлементыФормы.Разделитель.Лево;
		ЭлементыФормы.Результат.Ширина = НоваяШиринаРезультата;
		ЭлементыФормы.Результат.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.Разделитель, ГраницаЭлементаУправления.Лево);
	Иначе
		ЭлементыФормы.ПанельПользователя.Видимость   = Ложь;
		ЭлементыФормы.ПанельПользователя.Доступность = Ложь;
		ЭлементыФормы.Разделитель.Видимость   = Ложь;
		ЭлементыФормы.Разделитель.Доступность = Ложь;
		
		ШиринаФормы = ФормаОтчета.Ширина;
		ШиринаПоляТабДок = ЭлементыФормы.Результат.Ширина;
		ШиринаПанели = ЭлементыФормы.ПанельПользователя.Ширина;
		ШиринаЭлементовОбщая = ШиринаПоляТабДок + 6 + ШиринаПанели;
		
		Если ШиринаЭлементовОбщая > ШиринаФормы Тогда
			ШиринаИсходная = ШиринаЭлементовОбщая;
		Иначе
			ШиринаИсходная = ШиринаФормы;
		КонецЕсли;

		Если (ШиринаПанели / ШиринаИсходная > 0.5) ИЛИ (ШиринаПанели < 102) тогда
			ШиринаПанели = 306;
			ЭлементыФормы.Разделитель.Лево = ШиринаИсходная - ШиринаПанели - 6;
			ЭлементыФормы.ПанельПользователя.Ширина = ШиринаПанели;
		КонецЕсли;
		
		ЭлементыФормы.Результат.Ширина = ЭлементыФормы.ПанельПользователя.Лево + ЭлементыФормы.ПанельПользователя.Ширина;
		ЭлементыФормы.Результат.УстановитьПривязку(ГраницаЭлементаУправления.Право, ФормаОтчета.Панель, ГраницаЭлементаУправления.Право);
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеОтображениемДиаграммы(ФормаОтчета, ФиксацияСверху = 2, ФиксацияСлева = 0) Экспорт
	
	Результат      = ФормаОтчета.ЭлементыФормы.Результат;
	НастройкиФормы = ФормаОтчета.НастройкиФормы;
	
	Пометка = ФормаОтчета.ЭлементыФормы.ДействияФормыДополнительные.Кнопки.Диаграмма.Пометка;
	НастройкиФормы.Вставить("ВыводитьДиаграмму", Пометка);
	
	ФормаОтчета.ЭлементыФормы.ПанельЗакладок.Страницы.Диаграмма.Видимость = Пометка;
	
	ОбработкаИзмененияНастроекДиаграммы(ФормаОтчета, Результат, ФиксацияСверху, ФиксацияСлева);
	
КонецПроцедуры

Процедура УправлениеОтображениемПанелиРасшифровки(ФормаОтчета, Видимость = Истина) Экспорт
	
	Если Видимость тогда
		ФормаОтчета.ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Нет;
		ФормаОтчета.ЭлементыФормы.Результат.Ширина = ФормаОтчета.ЭлементыФормы.ПанельПользователя.Лево - 6;
	Иначе
		ФормаОтчета.ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Право;
		ФормаОтчета.ЭлементыФормы.Результат.Ширина = ФормаОтчета.Ширина - 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеОтображениемПанелиДополнительныеНастройки(ФормаОтчета, Видимость = Истина) Экспорт
	
	Если Видимость Тогда
		ФормаОтчета.ЭлементыФормы.НадписьДополнительныеНастройки.Заголовок = "Скрыть дополнительные настройки";
		ФормаОтчета.ЭлементыФормы.НадписьДополнительныеНастройки.Картинка  = Вычислить("БиблиотекаКартинок.Минус");
		ФормаОтчета.ЭлементыФормы.ПанельДополнительныеНастройки.Свертка    = РежимСверткиЭлементаУправления.Нет;
	Иначе
		ФормаОтчета.ЭлементыФормы.НадписьДополнительныеНастройки.Заголовок = "Показать дополнительные настройки";
		ФормаОтчета.ЭлементыФормы.НадписьДополнительныеНастройки.Картинка  = Вычислить("БиблиотекаКартинок.Плюс");
		ФормаОтчета.ЭлементыФормы.ПанельДополнительныеНастройки.Свертка    = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуЭлементов(ФормаОтчета) Экспорт
	
	ТаблицаЭлементов = Новый ТаблицаЗначений;
	ТаблицаЭлементов.Колонки.Добавить("Элемент");
	ТаблицаЭлементов.Колонки.Добавить("Верх");
	
	Для Каждого ЭлементУправления Из ФормаОтчета.ЭлементыФормы Цикл
		НоваяСтрока = ТаблицаЭлементов.Добавить();
		НоваяСтрока.Элемент = ЭлементУправления.Имя;
		НоваяСтрока.Верх = ЭлементУправления.Верх;
	КонецЦикла;
	
	ФормаОтчета.НастройкиФормы.Вставить("ТаблицаЭлементов", ТаблицаЭлементов);
	
КонецПроцедуры

Процедура УсловноеОформлениеПриВыводеСтроки(ОтчетОбъект, Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт 

	Если ДанныеСтроки.Поля.Элементы.Количество() = 0 Тогда
		
		ОформлениеСтроки.Ячейки.ОбластиДляКраткогоОтображенияЭлемента.Текст = НСтр("ru='<Все поля>'");
		ОформлениеСтроки.Ячейки.ОбластиДляПодробногоОтображенияЭлемента.Текст = НСтр("ru='<Все поля>'");
		
	КонецЕсли;
	
	Если ДанныеСтроки.Отбор.Элементы.Количество() = 0 Тогда
		
		ОформлениеСтроки.Ячейки.ОтборДляКраткогоОтображенияЭлемента.Текст = НСтр("ru='<Без условия>'");
		ОформлениеСтроки.Ячейки.ОтборДляПодробногоОтображенияЭлемента.Текст = НСтр("ru='<Без условия>'");
		
	КонецЕсли;
	
	ЦветФона = ДанныеСтроки.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветФона"));
	Если ЦветФона.Использование Тогда
		
		ОформлениеСтроки.ЦветФона = ЦветФона.Значение;
		
	КонецЕсли;
	
	ЦветТекста = ДанныеСтроки.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветТекста"));
	Если ЦветТекста.Использование Тогда
		
		ОформлениеСтроки.ЦветТекста = ЦветТекста.Значение;
		
	КонецЕсли;
	
	Шрифт = ДанныеСтроки.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Шрифт"));
	Если Шрифт.Использование Тогда
		
		ОформлениеСтроки.Шрифт = Шрифт.Значение;
		
	КонецЕсли;
	
	Текст = ДанныеСтроки.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Текст"));
	Если Текст.Использование Тогда
		Если ТипЗнч(Текст.Значение) = Тип("ПолеКомпоновкиДанных") Тогда
			ПредставлениеПоля = СтандартныеОтчеты.ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек, Текст.Значение);
		Иначе
			ПредставлениеПоля = Текст.Значение;
		КонецЕсли;
		ОформлениеСтроки.Ячейки.ОформлениеДляКраткогоОтображенияЭлемента.Текст   = ПредставлениеПоля;
		ОформлениеСтроки.Ячейки.ОформлениеДляПодробногоОтображенияЭлемента.Текст = ПредставлениеПоля;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт
	
	Для Каждого Оформление Из ОформленияСтрок Цикл		
		Если Оформление.ДанныеСтроки.Использование = Ложь Тогда			
			Оформление.ЦветТекста = ПолучитьЦветНеИспользуемогоЭлемента();			
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗапрещенныеПоля(ОтчетОбъект, Режим = "Группировка") Экспорт
	
	ДанныеОтчета = ОтчетОбъект.ДанныеОтчета;
	
	РодителиПоля = Новый ТаблицаЗначений;
	РодителиПоля.Колонки.Добавить("Поле");
	НоваяСтрока = РодителиПоля.Добавить();
	НоваяСтрока.Поле = "UserFields";
	НоваяСтрока = РодителиПоля.Добавить();
	НоваяСтрока.Поле = "DataParameters";
	НоваяСтрока = РодителиПоля.Добавить();
	НоваяСтрока.Поле = "SystemFields";
			
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	
	Если Режим = "ДополнительныеПоля" Тогда
		Для Каждого ДоступноеПоле Из ОтчетОбъект.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
			Если ДоступноеПоле.Ресурс Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = Строка(ДоступноеПоле.Поле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОтчетОбъект.НастройкиФормы.Свойство("ДоступностьПодразделения") Тогда
		Если Не ОтчетОбъект.НастройкиФормы.ДоступностьПодразделения Тогда 
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Подразделение";
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьТиповой"
		Или ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьНалоговый" Тогда
		Если Режим = "ДополнительныеПоля" Тогда
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
		КонецЕсли;
		
		Если Режим = "ГруппировкаДоп" Тогда
			Для Каждого Элемент Из ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл 
				Если (Строка(Элемент.Поле) <> "Организация") И (Строка(Элемент.Поле) <> "Подразделение") И (Строка(Элемент.Поле) <> "ВидУчета") Тогда 
					НоваяСтрока = РодителиПоля.Добавить();
					НоваяСтрока.Поле = Элемент.Поле;
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;	
		
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчетуТиповой"
		Или ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчетуНалоговый" Тогда
		Если Режим = "Группировка" Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.Счет) Тогда 
				КоличествоСубконто = ОтчетОбъект.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Счет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели"; 
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
		ИначеЕсли Режим = "ДополнительныеПоля" Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.Счет) Тогда 
				КоличествоСубконто = ОтчетОбъект.Счет.ВидыСубконто.Количество();				
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
		ИначеЕсли Режим = "Отбор" ИЛИ Режим = "Сортировка" Тогда
			ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
			ДобавитьПоляРесурсовВЗапрещенныеПоля(ОтчетОбъект, РодителиПоля);
			Если ЗначениеЗаполнено(ОтчетОбъект.Счет) Тогда 
				КоличествоСубконто = ОтчетОбъект.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчетаТиповой" 
		Или ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчетаНалоговый" Тогда
		Если Режим = "Группировка" Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.Счет) Тогда 
				КоличествоСубконто = ОтчетОбъект.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Счет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Регистратор";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "КорСчет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели"; 
		ИначеЕсли Режим = "ДополнительныеПоля" Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.Счет) Тогда 
				КоличествоСубконто = ОтчетОбъект.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Счет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "КорСчет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
		ИначеЕсли Режим = "Отбор" ИЛИ Режим = "Сортировка" Тогда
			ДобавитьПоляРесурсовВЗапрещенныеПоля(ОтчетОбъект, РодителиПоля);
			Если ЗначениеЗаполнено(ОтчетОбъект.Счет) Тогда 
				КоличествоСубконто = ОтчетОбъект.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.АнализСчетаТиповой"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчетаНалоговый" Тогда
		Если Режим = "Группировка" Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.Счет) Тогда 
				КоличествоСубконто = ОтчетОбъект.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Счет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "КорСчет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели"; 
			Для Индекс = 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КорСубконто" + Индекс;
			КонецЦикла;
		ИначеЕсли Режим = "ДополнительныеПоля" Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.Счет) Тогда 
				КоличествоСубконто = ОтчетОбъект.Счет.ВидыСубконто.Количество();

			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Счет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "КорСчет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
		ИначеЕсли Режим = "Отбор" ИЛИ Режим = "Сортировка" Тогда
			ДобавитьПоляРесурсовВЗапрещенныеПоля(ОтчетОбъект, РодителиПоля);
			Если ЗначениеЗаполнено(ОтчетОбъект.Счет) Тогда 
				КоличествоСубконто = ОтчетОбъект.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСчетаТиповой"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСчетаНалоговый" Тогда
		Если Режим = "Отбор" Тогда
			ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
			Если Не ПоказателиОтчета.БУ.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "БУДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "БУКт";
			КонецЕсли;
			Если ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСчетаТиповой" Тогда 
				Если Не ПоказателиОтчета.ВалютнаяСумма.Значение Тогда
					НоваяСтрока = РодителиПоля.Добавить();
					НоваяСтрока.Поле = "ВалютнаяСуммаДт";
					НоваяСтрока = РодителиПоля.Добавить();
					НоваяСтрока.Поле = "ВалютнаяСуммаКт";
					НоваяСтрока = РодителиПоля.Добавить();
					НоваяСтрока.Поле = "Валюта";
					НоваяСтрока = РодителиПоля.Добавить();
					НоваяСтрока.Поле = "ВалютаДт";
					НоваяСтрока = РодителиПоля.Добавить();
					НоваяСтрока.Поле = "ВалютаКт";
				КонецЕсли;
			КонецЕсли;
			Если Не ПоказателиОтчета.Количество.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КоличествоДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КоличествоКт";
			КонецЕсли;
			Если ЗначениеЗаполнено(ОтчетОбъект.Счет) Тогда 
				КоличествоСубконто = ОтчетОбъект.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			Для Индекс = 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВидСубконто" + Индекс;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСубконтоТиповой"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСубконтоНалоговый" Тогда
		Если Режим = "Отбор" Тогда
			ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
			Если Не ПоказателиОтчета.БУ.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "БУДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "БУКт";
			КонецЕсли;
			Если ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСубконтоТиповой" Тогда 
				Если Не ПоказателиОтчета.ВалютнаяСумма.Значение Тогда
					НоваяСтрока = РодителиПоля.Добавить();
					НоваяСтрока.Поле = "ВалютнаяСуммаДт";
					НоваяСтрока = РодителиПоля.Добавить();
					НоваяСтрока.Поле = "ВалютнаяСуммаКт";
					НоваяСтрока = РодителиПоля.Добавить();
					НоваяСтрока.Поле = "Валюта";
					НоваяСтрока = РодителиПоля.Добавить();
					НоваяСтрока.Поле = "ВалютаДт";
					НоваяСтрока = РодителиПоля.Добавить();
					НоваяСтрока.Поле = "ВалютаКт";
				КонецЕсли;
			КонецЕсли;
			Если Не ПоказателиОтчета.Количество.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КоличествоДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КоличествоКт";
			КонецЕсли;
			Если ЗначениеЗаполнено(ОтчетОбъект.СписокВидовСубконто) Тогда 
				КоличествоСубконто = ОтчетОбъект.СписокВидовСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			Для Индекс = 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВидСубконто" + Индекс;
			КонецЦикла;	
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконтоТиповой"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконтоНалоговый" Тогда
		Если Режим = "Группировка" Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.СписокВидовСубконто) Тогда 
				КоличествоСубконто = ОтчетОбъект.СписокВидовСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Счет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели"; 
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
		ИначеЕсли Режим = "ДополнительныеПоля" Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.СписокВидовСубконто) Тогда 
				КоличествоСубконто = ОтчетОбъект.СписокВидовСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
		ИначеЕсли Режим = "Отбор" ИЛИ Режим = "Сортировка" Тогда
			ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
			ДобавитьПоляРесурсовВЗапрещенныеПоля(ОтчетОбъект, РодителиПоля);
			Если ЗначениеЗаполнено(ОтчетОбъект.СписокВидовСубконто) Тогда 
				КоличествоСубконто = ОтчетОбъект.СписокВидовСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконтоТиповой" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконтоНалоговый" Тогда
		Если Режим = "Группировка" Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.СписокВидовСубконто) Тогда 
				КоличествоСубконто = ОтчетОбъект.СписокВидовСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			Если ЗначениеЗаполнено(ОтчетОбъект.СписокВидовКорСубконто) Тогда 
				КоличествоКорСубконто = ОтчетОбъект.СписокВидовКорСубконто.Количество();
			Иначе
				КоличествоКорСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоКорСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КорСубконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Счет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "КорСчет";
			Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконтоТиповой" Тогда 
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Валюта";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КорВалюта";
			КонецЕсли;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели"; 
		ИначеЕсли Режим = "ДополнительныеПоля" Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.СписокВидовСубконто) Тогда 
				КоличествоСубконто = ОтчетОбъект.СписокВидовСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			Если ЗначениеЗаполнено(ОтчетОбъект.СписокВидовКорСубконто) Тогда 
				КоличествоКорСубконто = ОтчетОбъект.СписокВидовКорСубконто.Количество();
			Иначе
				КоличествоКорСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоКорСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КорСубконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
		ИначеЕсли Режим = "Отбор" ИЛИ Режим = "Сортировка" Тогда
			ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
			ДобавитьПоляРесурсовВЗапрещенныеПоля(ОтчетОбъект, РодителиПоля);
			Если ЗначениеЗаполнено(ОтчетОбъект.СписокВидовСубконто) Тогда 
				КоличествоСубконто = ОтчетОбъект.СписокВидовСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			Если ЗначениеЗаполнено(ОтчетОбъект.СписокВидовКорСубконто) Тогда 
				КоличествоКорСубконто = ОтчетОбъект.СписокВидовКорСубконто.Количество();
			Иначе
				КоличествоКорСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоКорСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КорСубконто" + Индекс;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОтчетПоПроводкамТиповой"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОтчетПоПроводкамНалоговый" Тогда
		Если Режим = "Отбор" Тогда
			ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
			Если Не ПоказателиОтчета.БУ.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "БУДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "БУКт";
			КонецЕсли;
			Если ИдентификаторОбъекта = "ОтчетОбъект.ОтчетПоПроводкамТиповой" Тогда 
				Если Не ПоказателиОтчета.ВалютнаяСумма.Значение Тогда
					НоваяСтрока = РодителиПоля.Добавить();
					НоваяСтрока.Поле = "ВалютнаяСуммаДт";
					НоваяСтрока = РодителиПоля.Добавить();
					НоваяСтрока.Поле = "ВалютнаяСуммаКт";
					НоваяСтрока = РодителиПоля.Добавить();
					НоваяСтрока.Поле = "Валюта";
					НоваяСтрока = РодителиПоля.Добавить();
					НоваяСтрока.Поле = "ВалютаДт";
					НоваяСтрока = РодителиПоля.Добавить();
					НоваяСтрока.Поле = "ВалютаКт";
				КонецЕсли;
			КонецЕсли;
			Если Не ПоказателиОтчета.Количество.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КоличествоДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КоличествоКт";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат РодителиПоля;
	
КонецФункции

Процедура ДобавитьПоляРесурсовВЗапрещенныеПоля(ОтчетОбъект, ТаблицаПолей)
	
	ПоказателиОтчета = ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета;
	
	Для Каждого Показатель Из ПоказателиОтчета Цикл
		Если Показатель.Ключ = "РазвернутоеСальдо" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Показатель.Значение.Значение Тогда
			Если Показатель.Ключ = "Контроль" Тогда
				Продолжить;
			КонецЕсли;
			Если ПоказателиОтчета.РазвернутоеСальдо.Значение Тогда
				ВидОстатка = "";
			Иначе
				ВидОстатка = "Развернутый";
			КонецЕсли;
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода." + Показатель.Ключ + "Начальный" + ВидОстатка + "ОстатокДт";
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода." + Показатель.Ключ + "Начальный" + ВидОстатка + "ОстатокКт";
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода." + Показатель.Ключ + "Конечный" + ВидОстатка + "ОстатокДт";
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода." + Показатель.Ключ + "Конечный" + ВидОстатка + "ОстатокКт";
		Иначе
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода." + Показатель.Ключ + "НачальныйОстатокДт";
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода." + Показатель.Ключ + "НачальныйОстатокКт";
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод." + Показатель.Ключ + "ОборотДт";
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод." + Показатель.Ключ + "ОборотКт";
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода." + Показатель.Ключ + "КонечныйОстатокДт";
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода." + Показатель.Ключ + "КонечныйОстатокКт";
			
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода." + Показатель.Ключ + "НачальныйРазвернутыйОстатокДт";
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода." + Показатель.Ключ + "НачальныйРазвернутыйОстатокКт";
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода." + Показатель.Ключ + "КонечныйРазвернутыйОстатокДт";
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода." + Показатель.Ключ + "КонечныйРазвернутыйОстатокКт";
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьТаблицуОрганизаций(ФормаОтчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НаборОрганизаций.Организация КАК Организация,
	|	НаборОрганизаций.ОрганизацияПредставление КАК ОрганизацияПредставление,
	|	НаборОрганизаций.ВключатьОбособленныеПодразделения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Организации.Ссылка КАК Организация,
	|		Организации.Наименование КАК ОрганизацияПредставление,
	|		ЛОЖЬ КАК ВключатьОбособленныеПодразделения
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|";
	
	Если ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений() Тогда
		Запрос.Текст = Запрос.Текст + 
		"	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Организации.ГоловнаяОрганизация,
		|		Организации.ГоловнаяОрганизация.Наименование + "" с обособленными подразделениями"",
		|		ИСТИНА
		|	ИЗ
		|		Справочник.Организации КАК Организации
		|	ГДЕ
		|		Организации.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст +  
	") КАК НаборОрганизаций
	|УПОРЯДОЧИТЬ ПО
	|	ОрганизацияПредставление";
	
	ФормаОтчета.ТаблицаОрганизаций = Запрос.Выполнить().Выгрузить();
	СписокВыбора = Новый СписокЗначений;
	МаксКоличествоСимволов = 40;
	Для Каждого СтрокаТаблицы Из ФормаОтчета.ТаблицаОрганизаций Цикл
		СписокВыбора.Добавить(ФормаОтчета.ТаблицаОрганизаций.Индекс(СтрокаТаблицы), СтрокаТаблицы.ОрганизацияПредставление);
		МаксКоличествоСимволов = Макс(МаксКоличествоСимволов, СтрДлина(СтрокаТаблицы.ОрганизацияПредставление));
	КонецЦикла;
	ФормаОтчета.ЭлементыФормы.Организация.СписокВыбора = СписокВыбора;
	ФормаОтчета.ЭлементыФормы.Организация.ШиринаСпискаВыбора = Окр(?(МаксКоличествоСимволов > 200, 200, МаксКоличествоСимволов) * 1.3);
	ФормаОтчета.ЭлементыФормы.Организация.ВысотаСпискаВыбора = ?(ФормаОтчета.ТаблицаОрганизаций.Количество() > 15, 15, ФормаОтчета.ТаблицаОрганизаций.Количество());
	
	СтрокаПоиска = ФормаОтчета.ТаблицаОрганизаций.НайтиСтроки(Новый Структура("Организация", ФормаОтчета.Организация));
	
	Если СтрокаПоиска.Количество() = 1 Тогда
		ФормаОтчета.ПолеОрганизация = ФормаОтчета.ТаблицаОрганизаций.Индекс(СтрокаПоиска[0]);
	КонецЕсли; 

КонецПроцедуры

Процедура ОрганизацияПриИзменении(ФормаОтчета, Элемент) Экспорт 
	
	Организации = ФормаОтчета.ОтчетОбъект.мСписокСтруктурныхЕдиниц;
	
	Для Каждого ЭлементОтбора Из ФормаОтчета.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
				
				ФормаОтчета.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);			
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодразделениеПриИзменении(ФормаОтчета, Элемент) Экспорт
	
	Для Каждого ЭлементОтбора Из ФормаОтчета.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") Тогда
				
				ФормаОтчета.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДействияФормыДополнительныеВосстановитьЗначения(ОтчетОбъект, ФормаОтчета) Экспорт
	
	СохранениеНастроек.ВыбратьНастройкуФормы(ОтчетОбъект.СохраненнаяНастройка, ФормаОтчета, "ОтчетОбъект." + ОтчетОбъект.Метаданные().Имя, Ложь);
	Если ОтчетОбъект.СохраненнаяНастройка <> Неопределено Тогда 
		ТиповыеОтчеты.ОбновитьФормуТиповогоОтчетаПоКомпоновщику(ОтчетОбъект, ФормаОтчета);
		ТиповыеОтчеты.ОбновитьЗаголовокТиповогоОтчета(ОтчетОбъект, ФормаОтчета);
		
		ОтчетОбъект.РежимРасшифровки = Ложь;
		ОтчетОбъект.Настроить();	
		ФормаОтчета.ОбновитьПанельНастроек();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыДополнительныеСохранитьЗначения(ОтчетОбъект, ФормаОтчета) Экспорт
	
	СохранениеНастроек.ВыбратьНастройкуФормы(ОтчетОбъект.СохраненнаяНастройка, ФормаОтчета, "ОтчетОбъект." + ОтчетОбъект.Метаданные().Имя, Истина, ПолучитьПредставлениеНастройкиДляИстории(ОтчетОбъект));
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеПоляПоУмолчанию(ОтчетОбъект) Экспорт
	
	ДанныеОтчета = ОтчетОбъект.ДанныеОтчета;
	КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	
	ДанныеОтчета.ДополнительныеПоля.Очистить();
	
	Для Каждого Группировка Из ДанныеОтчета.Группировка Цикл 
		ТипПоля = СтандартныеОтчеты.ПолучитьСвойствоПоля(КомпоновщикНастроек, Группировка.Поле, "Тип");	
		
		Если ТипПоля.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
			НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
			НоваяСтрока.Использование = Ложь;
			НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".РНН";
			НоваяСтрока.Представление = СтандартныеОтчеты.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);
		ИначеЕсли ТипПоля.СодержитТип(Тип("СправочникСсылка.ОсновныеСредства")) Тогда
			НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
			НоваяСтрока.Использование = Ложь;
			НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".СвязанноеПолеИнвентарныйНомер_ОС";
			НоваяСтрока.Представление = СтандартныеОтчеты.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);	
		ИначеЕсли ТипПоля.СодержитТип(Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств")) Тогда
			НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
			НоваяСтрока.Использование = Ложь;
			НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".ВидДвижения";
			НоваяСтрока.Представление = СтандартныеОтчеты.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);
		ИначеЕсли ТипПоля.СодержитТип(Тип("СправочникСсылка.РасходыБудущихПериодов")) Тогда
			НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
			НоваяСтрока.Использование = Ложь;
			НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".ДатаНачалаСписания";
			НоваяСтрока.Представление = СтандартныеОтчеты.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);	
			НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
			НоваяСтрока.Использование = Ложь;
			НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".ДатаОкончанияСписания";
			НоваяСтрока.Представление = СтандартныеОтчеты.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);
		ИначеЕсли ТипПоля.СодержитТип(Тип("ДокументСсылка.ВозвратТоваровПоставщику"))
			ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.ГТДИмпорт"))
			ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.ИПНЗаявлениеНаПредоставлениеВычета"))
			ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"))
			ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"))
			ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.ПоступлениеДопРасходов"))
			ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.ПоступлениеИзПереработки"))
			ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.ПоступлениеНМА"))
			ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"))
			ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС"))
			ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.СчетФактураПолученный")) Тогда
			НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
			НоваяСтрока.Использование = Ложь;
			НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".НомерВходящегоДокумента";
			НоваяСтрока.Представление = СтандартныеОтчеты.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);
			НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
			НоваяСтрока.Использование = Ложь;
			НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".ДатаВходящегоДокумента";
			НоваяСтрока.Представление = СтандартныеОтчеты.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВидимостьПодразделения(ФормаОтчета) Экспорт
	
	Видимость = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	Если ЭлементыФормы.Найти("Подразделение") <> Неопределено Тогда 
		ЭлементыФормы.Подразделение.Видимость = Видимость;
	КонецЕсли;   
	
	Если ЭлементыФормы.Найти("НадписьПодразделение") <> Неопределено Тогда 
		ЭлементыФормы.НадписьПодразделение.Видимость = Видимость;
	КонецЕсли;
	
КонецПроцедуры

Процедура КолонкаСчетПриИзменении(Элемент) Экспорт
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.Счет) Тогда
			Если ТекущаяСтрока.Счет.ВидыСубконто.Количество() = 0 Тогда
				ТекущаяСтрока.ПоСубсчетам = Истина;
				ТекущаяСтрока.Представление = "";
				ТекущаяСтрока.ПоСубконто.Очистить();
			Иначе
				ТекущаяСтрока.ПоСубсчетам = Ложь;
				ТекущаяСтрока.ПоСубконто.Очистить();
				Представление = "";
				Для Индекс = 0 По ТекущаяСтрока.Счет.ВидыСубконто.Количество() - 1 Цикл
					ВидСубконто = ТекущаяСтрока.Счет.ВидыСубконто[Индекс].ВидСубконто;
					ТекущаяСтрока.ПоСубконто.Добавить(ВидСубконто, , Истина);
					Представление = Представление + ВидСубконто + ", ";
				КонецЦикла;
				ТекущаяСтрока.Представление = Сред(Представление, 1, СтрДлина(Представление) - 2);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамПриАктивизацииКолонки(Элемент)Экспорт
	
	Если Элемент.ТекущаяКолонка.Имя = "Счет" Тогда
		Элемент.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамПриИзменении(ФормаОтчета, ИмяЭлемента, Отказ, Изменение = Ложь) Экспорт
	
	Элемент = ФормаОтчета.ЭлементыФормы[ИмяЭлемента];
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ФормаОтчета.ОтчетОбъект);
	
	Если Найти(ИдентификаторОбъекта, "СверкаДанныхБУ_НУ")<> 0 Тогда
		ПланСчетов = "Налоговый";
	ИначеЕсли	Найти(ИдентификаторОбъекта, "Налоговый") <> 0 Тогда 
		ПланСчетов = "Налоговый";
	Иначе 
		ПланСчетов = "Типовой";
	КонецЕсли;		
	
	Если Изменение Тогда
		Если Элемент.ТекущаяКолонка.Имя = "Счет" Тогда 
			Отказ = Истина;
			
			ТекущаяСтрока = Элемент.ТекущаяСтрока;
			ВыбранноеЗначение = ВыбратьСчет(ИмяЭлемента, ТекущаяСтрока.Счет, ПланСчетов);
			Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
				ТекущаяСтрока.Счет = ВыбранноеЗначение;
				КолонкаСчетПриИзменении(Элемент);	
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Отказ = Истина;
		
		ВыбранноеЗначение = ВыбратьСчет(ИмяЭлемента, , ПланСчетов);
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			НоваяСтрока = ФормаОтчета[ИмяЭлемента].Добавить();
			НоваяСтрока.Счет          = ВыбранноеЗначение;
			НоваяСтрока.Использование = Истина;
			Элемент.ТекущаяСтрока = НоваяСтрока;	
			
			КолонкаСчетПриИзменении(Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт
	
	РаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок);
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Если ОформлениеСтроки.ДанныеСтроки.ПоСубконто.Количество() = 0 Тогда
			ОформлениеСтроки.Ячейки.Представление.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Не ОформлениеСтроки.ДанныеСтроки.Счет.ЗапретитьИспользоватьВПроводках Тогда
			ОформлениеСтроки.Ячейки.ПоСубсчетам.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамПриИзмененииФлажка(ФормаОтчета, ИмяЭлемента, Колонка) Экспорт
	
	Если Колонка.Имя = "ПоСубсчетам" Тогда
		ТекущаяСтрока = ФормаОтчета.ЭлементыФормы[ИмяЭлемента].ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			Если ТекущаяСтрока.ПоСубсчетам Тогда
				Если ИмяЭлемента = "РазвернутоеСальдо" Тогда
					ТекущаяСтрока.ПоСубконто.ЗаполнитьПометки(Ложь);
					ТекущаяСтрока.Представление = "";
				КонецЕсли; 
			Иначе
				Если ТекущаяСтрока.ПоСубконто.Количество() = 0 Тогда
					ТекущаяСтрока.ПоСубсчетам = Истина;
					Возврат;
				КонецЕсли;
				ТекущаяСтрока.ПоСубконто.ЗаполнитьПометки(Истина);
				Представление = "";
				Для Каждого СтрокаСписка Из ТекущаяСтрока.ПоСубконто Цикл
					Если СтрокаСписка.Пометка Тогда
						Представление = Представление + СтрокаСписка.Значение + ", ";
					КонецЕсли;
				КонецЦикла;
				ТекущаяСтрока.Представление = Сред(Представление, 1, СтрДлина(Представление) - 2);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамПредставлениеНачалоВыбора(ФормаОтчета, ИмяЭлемента, Элемент, СтандартнаяОбработка) Экспорт
	
	ТекущаяСтрока = ФормаОтчета.ЭлементыФормы[ИмяЭлемента].ТекущаяСтрока;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ФормаНастройкиСубконто = ПолучитьОбщуюФорму("ФормаНастройкаПоСубконто", Элемент);
		ФормаНастройкиСубконто.Список = ТекущаяСтрока.ПоСубконто.Скопировать();
		ФормаНастройкиСубконто.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамПредставлениеОчистка(ФормаОтчета, ИмяЭлемента, Элемент, СтандартнаяОбработка) Экспорт
	
	ТекущаяСтрока = ФормаОтчета.ЭлементыФормы[ИмяЭлемента].ТекущаяСтрока;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		Если ТекущаяСтрока.Счет.ЗапретитьИспользоватьВПроводках Тогда
			ТекущаяСтрока.ПоСубконто.ЗаполнитьПометки(Ложь);
			ТекущаяСтрока.Представление = "";
			ТекущаяСтрока.ПоСубсчетам = Истина;
		Иначе
			ТекущаяСтрока.ПоСубсчетам = Ложь;
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамПредставлениеОбработкаВыбора(ФормаОтчета, ИмяЭлемента, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	ТекущаяСтрока = ФормаОтчета.ЭлементыФормы[ИмяЭлемента].ТекущаяСтрока;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		Представление = "";
		Для Каждого СтрокаСписка Из ВыбранноеЗначение Цикл
			Если СтрокаСписка.Пометка Тогда
				Представление = Представление + СтрокаСписка.Значение + ", ";
			КонецЕсли;
		КонецЦикла;
		Представление = Сред(Представление, 1, СтрДлина(Представление) - 2);
		Если ПустаяСтрока(Представление) И Не ТекущаяСтрока.Счет.ЗапретитьИспользоватьВПроводках Тогда
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрока.ПоСубконто    = ВыбранноеЗначение;
		ТекущаяСтрока.Представление = Представление;
		
		Если ПустаяСтрока(Представление) Тогда
			ТекущаяСтрока.ПоСубсчетам = Истина;
		Иначе
			Если ИмяЭлемента = "РазвернутоеСальдо" Тогда
				ТекущаяСтрока.ПоСубсчетам = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ДЛЯ ФОРМИРОВАНИЯ И ВЫВОДА ОТЧЕТА, ОБРАБОТКА РЕЗУЛЬТАТА ОТЧЕТА
////////////////////////////////////////////////////////////////////////////////

Процедура СохранитьКопиюРезультатаОтчета(ОтчетОбъект, ФормаОтчета, ПолноеИмяФайла = "") Экспорт
	
	Результат = ФормаОтчета.ЭлементыФормы.Результат;
	ИндексФильтраСохраненный = ВосстановитьЗначение("ИндексФильтраТипаФайлаТабличногоДокументаДляСохранения");
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок = "Save as";
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда 
		ПолноеИмяФайла = ОтчетОбъект.Метаданные().Синоним;
	КонецЕсли;
	ПолноеИмяФайла = УниверсальныеМеханизмы.УдалитьЗапрещенныеСимволыИмени(ПолноеИмяФайла);
	Диалог.ПолноеИмяФайла = ПолноеИмяФайла;
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.Фильтр = "Табличный документ (*.mxl)|*.mxl|"
	      		  + "Документ Microsoft Excel (*.xls)|*.xls|"
				  + "Документ Microsoft Excel 2007 (*.xlsx)|*.xlsx|";
	Если ИндексФильтраСохраненный = Неопределено ИЛИ ТипЗнч(ИндексФильтраСохраненный) <> Тип("Число") Тогда 
		ИндексФильтраСохраненный = 0;
	КонецЕсли;
	Диалог.ИндексФильтра = ИндексФильтраСохраненный;
	Если Диалог.Выбрать() Тогда
		ИмяФайла = Диалог.ПолноеИмяФайла;
		Если (Прав(ИмяФайла,3) = "xls") 
			 И   ((Результат.ВысотаТаблицы > 65536)
			 ИЛИ (Результат.ШиринаТаблицы > 256))  Тогда
			Предупреждение("Таблица содержит слишком большое количество строк или столбцов.
							|Файл не может быть сохранен в формате Excel (*.xls).
							|Попробуйте сохранить файл в формате Excel 2007 (*.xlsx).");
			Возврат;
		КонецЕсли;
		Если (Прав(ИмяФайла,4) = "xlsx") 
			 И   ((Результат.ВысотаТаблицы > 1048576)
			 ИЛИ (Результат.ШиринаТаблицы > 16384))  Тогда
			Предупреждение("Таблица содержит слишком большое количество строк или столбцов.
							|Файл не может быть сохранен в формате Excel 2007 (*.xlsx).");
			Возврат;
		КонецЕсли;
		
		Если Прав(ИмяФайла,3) = "xls" Тогда
		    ТипФайлаТабДокумента = ТипФайлаТабличногоДокумента.XLS;
		ИначеЕсли Прав(ИмяФайла,4) = "xlsx" Тогда	
		    ТипФайлаТабДокумента = ТипФайлаТабличногоДокумента.XLSX;
		Иначе
		    ТипФайлаТабДокумента = ТипФайлаТабличногоДокумента.MXL;
		КонецЕсли;
		
		Попытка
			Результат.Записать(ИмяФайла, ТипФайлаТабДокумента);
		Исключение
			Предупреждение("Ошибка при записи. Файл не записан.");
		КонецПопытки;	
		
		СохранитьЗначение("ИндексФильтраТипаФайлаТабличногоДокументаДляСохранения", Диалог.ИндексФильтра);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаРезультатаОтчета(ОтчетОбъект, Результат) Экспорт
	
	// Выводим надписи вертикально, если количество точек диаграмм больше 9
	Для Каждого Рисунок Из Результат.Рисунки Цикл
		Попытка
			Если ТипЗнч(Рисунок.Объект) = Тип("Диаграмма") Тогда
				Рисунок.Объект.ОбластьПостроения.ВертикальныеМетки  = (Рисунок.Объект.Точки.Количество() > 9);
				Рисунок.Объект.ОбластьПостроения.ФорматШкалыЗначений = "ЧГ=3,0";
				Рисунок.Объект.ОбластьЛегенды.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
				
				Рисунок.Объект.ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы = ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы.НаШкале;
				Рисунок.Объект.ПодписиШкалыЗначенийИзмерительнойДиаграммыВдольШкалы = Истина;
				Рисунок.Объект.ТолщинаШкалыИзмерительнойДиаграммы                   = 3;
				Рисунок.Объект.ФорматЗначенийВПодписях                              = "ЧДЦ=2; ЧГ=3,0";
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Результат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ОтчетОбъект.Метаданные().Имя;
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(Результат, ОтчетОбъект.ПолучитьТекстЗаголовка(Ложь), Строка(глЗначениеПеременной("глТекущийПользователь")));
	
КонецПроцедуры

Процедура ВывестиОтчет(ОтчетОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, ЗаполнятьДанныеРасшифровки = Истина, НастройкаКомпоновкиДанных = Неопределено) Экспорт
	
	ПараметрыИсполненияОтчета = Неопределено;
	
	Попытка
		ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
	Исключение
	КонецПопытки;
	
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ИспользоватьСобытияПриФормированииОтчета") И ПараметрыИсполненияОтчета.ИспользоватьСобытияПриФормированииОтчета тогда
		ИспользоватьСобытияПриФормированииОтчета = Истина;
	Иначе
		ИспользоватьСобытияПриФормированииОтчета = Ложь;
	КонецЕсли;
	
	Если НастройкаКомпоновкиДанных = Неопределено Тогда 
		НастройкаКомпоновкиДанных = ОтчетОбъект.КомпоновщикНастроек.Настройки;
	КонецЕсли;
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ОтчетОбъект);
	МакетОформления = ПолучитьМакетОформленияОтчета(ОтчетОбъект, НастройкаКомпоновкиДанных);
	
	//Сгенерируем макет компоновки данных при помощи компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Попытка
		
		//В качестве схемы компоновки будет выступать схема самого отчета
		//В качестве настроек отчета - текущие настройки отчета
		//Данные расшифровки будем помещать в ДанныеРасшифровки
		Если ЗаполнятьДанныеРасшифровки Тогда 
			МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, НастройкаКомпоновкиДанных, ДанныеРасшифровки, МакетОформления);
		Иначе
			МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, НастройкаКомпоновкиДанных, , МакетОформления);
		КонецЕсли;
		
		//Вызываем событие отчета
		Попытка
			ОтчетОбъект.ПередВыводомОтчета(МакетКомпоновки);
		Исключение
		КонецПопытки;
		
		//Создадим и инициализируем процессор компоновки
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		Если ВнешниеНаборыДанных = Неопределено Тогда
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		Иначе
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
		КонецЕсли;
		
		//Создадим и инициализируем процессор вывода результата
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		//Обозначим начало вывода
		ПроцессорВывода.НачатьВывод();
		
		Если ИспользоватьСобытияПриФормированииОтчета Тогда
			//Основной цикл вывода отчета
			Пока Истина Цикл
				
				ОбработкаПрерыванияПользователя();
				//Получим следующий элемент результата компоновки
				ЭлементРезультата = ПроцессорКомпоновки.Следующий();
				
				Если ЭлементРезультата = Неопределено Тогда
					//Следующий элемент не получен - заканчиваем цикл вывода
					Прервать;
				Иначе
					
					Отказ = Ложь;
					
					Попытка
						ОтчетОбъект.ПередВыводомЭлементаРезультата(МакетКомпоновки, ДанныеРасшифровки, ЭлементРезультата, Отказ);
					Исключение
					КонецПопытки;
					
					Если Не Отказ Тогда
						//Элемент получен - выведем его при помощи процессора вывода
						ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			
			//Завершение вывода отчета
			ПроцессорВывода.ЗакончитьВывод();
		Иначе
			ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		КонецЕсли;
		
	Исключение
		Вопрос("Отчет не сформирован!" + Символы.ПС + ТиповыеОтчеты.ПолучитьОписаниеРодительскойПричиныИнформацииОбОшибке(ИнформацияОбОшибке()), РежимДиалогаВопрос.ОК);
		Сообщить(ТиповыеОтчеты.ПолучитьОписаниеРодительскойПричиныИнформацииОбОшибке(ИнформацияОбОшибке()));
	КонецПопытки;

КонецПроцедуры

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат, ПланСчетов = "Типовой") Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
		
	// Организация
	Если ЗначениеЗаполнено(ОтчетОбъект.мСписокСтруктурныхЕдиниц) Тогда
		ТекстОрганизация = ПолучитьТекстОрганизация(ОтчетОбъект);
		ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
		Результат.Вывести(ОбластьОрганизация);
	КонецЕсли;
	
	// Текст заголовка
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ОтчетОбъект.ПолучитьТекстЗаголовка();
	Результат.Вывести(ОбластьЗаголовок);
	
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	
	
	// Показатели отчета
	ПоказыватьВыводимыеДанные = Ложь;
	ТекстВыводимыеДанные = "";
	КоличествоПоказателей = 0;
	Для Каждого Показатель Из ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета Цикл
		Если Показатель.Значение.Использование И Показатель.Значение.Значение
			И Показатель.Ключ <> "РазвернутоеСальдо" Тогда
			ТекстВыводимыеДанные = ТекстВыводимыеДанные + Показатель.Значение.Представление + ", ";
			КоличествоПоказателей = КоличествоПоказателей + 1;
		КонецЕсли;
	КонецЦикла;
	ТекстВыводимыеДанные = Лев(ТекстВыводимыеДанные, СтрДлина(ТекстВыводимыеДанные) - 2);
	
	Если КоличествоПоказателей = 1 Тогда
		ПоказыватьВыводимыеДанные = Истина;
	КонецЕсли;
	Если ПоказыватьВыводимыеДанные Тогда 
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = "Выводимые данные:";
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстВыводимыеДанные;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	// Отбор
	ТекстОтбор = Строка(ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор);
	ТекстПодразделение = "";
	
	ЕстьОтборПоПодразделению = Ложь;
	Для Каждого ЭлементОтбора Из ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") 
				И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда 
				ЕстьОтборПоПодразделению = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьОтборПоПодразделению Тогда 
		Если ЗначениеЗаполнено(ОтчетОбъект.ПредставлениеСпискаПодразделений) Тогда
			ТекстПодразделение = "Подразделение В группе """ + ОтчетОбъект.ПредставлениеСпискаПодразделений + """";
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстОтбор) И Не ПустаяСтрока(ТекстПодразделение) Тогда
			ТекстОтбор = ТекстПодразделение + " И " + ТекстОтбор;
		ИначеЕсли ПустаяСтрока(ТекстОтбор) И Не ПустаяСтрока(ТекстПодразделение) Тогда
			ТекстОтбор = ТекстПодразделение;
		КонецЕсли;
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстОтбор) Тогда
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = "Отбор:";
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстОтбор;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	Если ИдентификаторОбъекта <>  ("ОтчетОбъект.ОборотноСальдоваяВедомость" + ПланСчетов) 
		И ИдентификаторОбъекта <> ("ОтчетОбъект.КарточкаСчета" + ПланСчетов)
		И ИдентификаторОбъекта <> ("ОтчетОбъект.КарточкаСубконто" + ПланСчетов)
		И ИдентификаторОбъекта <> ("ОтчетОбъект.СверкаДанныхБУ_НУ")
        И ИдентификаторОбъекта <> ("ОтчетОбъект.ОтчетПоПроводкам" + ПланСчетов) Тогда
		// Сортировка
		ТекстСортировка = "";
		Для Каждого СтрокаПорядок Из ОтчетОбъект.КомпоновщикНастроек.Настройки.Порядок.Элементы Цикл
			Если СтрокаПорядок.Использование Тогда
				ТекстСортировка = ТекстСортировка + ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек, СтрокаПорядок.Поле);
				ТекстСортировка = ТекстСортировка + " " + Строка(СтрокаПорядок.ТипУпорядочивания) + ", ";
			КонецЕсли;
		КонецЦикла;
		ТекстСортировка = Лев(ТекстСортировка, СтрДлина(ТекстСортировка) - 2);
		
		Если Не ПустаяСтрока(ТекстСортировка) Тогда
			ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = "Сортировка:";
			ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстСортировка;
			Результат.Вывести(ОбластьОписаниеНастроек);
		КонецЕсли;
	КонецЕсли;
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	Результат.Области.Заголовок.Видимость = ОтчетОбъект.НастройкиФормы.ВыводитьЗаголовок;
	
КонецПроцедуры

//
//
Процедура ВыводЗаголовкаСпециализированногоОтчета(ОтчетОбъект, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	
	// Организация
	Если ЗначениеЗаполнено(ОтчетОбъект.мСписокСтруктурныхЕдиниц) Тогда
		ТекстОрганизация = ПолучитьТекстОрганизация(ОтчетОбъект);
		ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
		Результат.Вывести(ОбластьОрганизация);
	КонецЕсли;
	
	// Текст заголовка
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ОтчетОбъект.ПолучитьТекстЗаголовка();
	Результат.Вывести(ОбластьЗаголовок);
	
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	
	// Отбор
	ТекстОтбор = Строка(ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор);
	ТекстОтбор = СтрЗаменить(ТекстОтбор, "И ###ОтборПоОрганизации###", "");
	ТекстОтбор = СтрЗаменить(ТекстОтбор, "###ОтборПоОрганизации### И", "");
	ТекстОтбор = СтрЗаменить(ТекстОтбор, "###ОтборПоОрганизации###", "");
	ТекстОтбор = СокрЛП(ТекстОтбор);
	
	Если Не ПустаяСтрока(ТекстОтбор) Тогда
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = "Отбор:";
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстОтбор;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	// Сортировка
	ТекстСортировка = "";
	Для Каждого СтрокаПорядок Из ОтчетОбъект.КомпоновщикНастроек.Настройки.Порядок.Элементы Цикл
		Если СтрокаПорядок.Использование Тогда
			ТекстСортировка = ТекстСортировка + ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек, СтрокаПорядок.Поле);
			ТекстСортировка = ТекстСортировка + " " + Строка(СтрокаПорядок.ТипУпорядочивания) + ", ";
		КонецЕсли;
	КонецЦикла;
	ТекстСортировка = Лев(ТекстСортировка, СтрДлина(ТекстСортировка) - 2);
	
	Если Не ПустаяСтрока(ТекстСортировка) Тогда
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = "Сортировка:";
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстСортировка;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	Результат.Области.Заголовок.Видимость = Истина;
	
КонецПроцедуры

//Функция вернёт все доступные пользователю подразделения организации
//
Функция ПолучитьСписокДоступныхПодразделений(Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыПользователейПользователиГруппы.Ссылка КАК ГруппаПользователей
	               |ПОМЕСТИТЬ ГруппыПользователя
	               |ИЗ
	               |	Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователейПользователиГруппы
	               |ГДЕ
	               |	ГруппыПользователейПользователиГруппы.Пользователь = &ТекущийПользователь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	НастройкиПравДоступаПользователей.ОбъектДоступа КАК Подразделение
	               |ИЗ
	               |	РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
	               |ГДЕ
	               |	НастройкиПравДоступаПользователей.ОбъектДоступа ССЫЛКА Справочник.ПодразделенияОрганизаций
	               |	И НастройкиПравДоступаПользователей.Пользователь В
	               |			(ВЫБРАТЬ
	               |				Группыпользователя.ГруппаПользователей
	               |			ИЗ
	               |				ГруппыПользователя КАК Группыпользователя)";
	
	Если ТипЗнч(Организация) = Тип("СписокЗначений") Тогда 
		Запрос.Текст = запрос.Текст + "		
		|	И НастройкиПравДоступаПользователей.ОбъектДоступа.Владелец В (&Организация)";
	ИначеЕсли ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		Запрос.Текст = запрос.Текст + "				   
		|	И НастройкиПравДоступаПользователей.ОбъектДоступа.Владелец = &Организация";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТекущийПользователь", глТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции

//Функция вернёт все доступные пользователю подразделения организации
//
Функция ПолучитьСписокДоступныхОрганизаций() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции

Процедура ВыводПодписейОтчета(ОтчетОбъект, Результат) Экспорт
	
	Если ОтчетОбъект.НастройкиФормы.ВыводитьПодписиРуководителей Тогда
		ВыводПодписейРуководителей(ОтчетОбъект, Результат);
	КонецЕсли;
	
	Если ОтчетОбъект.НастройкиФормы.ВыводитьПодписи Тогда 
		Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
		ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
		
		Результат.Вывести(ОбластьПодписи);
		
		Результат.Области.Подписи.Видимость = ОтчетОбъект.НастройкиФормы.ВыводитьПодписи;
	КонецЕсли;

КонецПроцедуры

Процедура ВыводПодписейРуководителей(ОтчетОбъект, Результат)
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьПодписи = Макет.ПолучитьОбласть("ПодписиРуководителей");
	
	ВыбиратьОрганизацию = Ложь;
	Попытка
		мСписокСтруктурныхЕдиниц = ОтчетОбъект.мСписокСтруктурныхЕдиниц;
		Если мСписокСтруктурныхЕдиниц.Количество() > 0 Тогда
			ВыбиратьОрганизацию = Истина;
		КонецЕсли;
	Исключение
	КонецПопытки;

	Если ВыбиратьОрганизацию Тогда
		Если мСписокСтруктурныхЕдиниц.Количество() = 1 Тогда
			Организация = мСписокСтруктурныхЕдиниц[0].Значение;
		Иначе
			Организация = Неопределено;
		КонецЕсли;	
	Иначе
		Организация = Неопределено;
	КонецЕсли;
	
	Если Организация = Неопределено Тогда
		ОбластьПодписи.Параметры.РукРасшифровкаПодписи = "";	
		ОбластьПодписи.Параметры.РукДолжность = "";
		ОбластьПодписи.Параметры.ГлавБухРасшифровкаПодписи = "";	
		ОбластьПодписи.Параметры.ГлавБухДолжность = "";
	Иначе
		Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(Организация, ТекущаяДата());
		ОбластьПодписи.Параметры.РукРасшифровкаПодписи = Руководители.Руководитель;	
		ОбластьПодписи.Параметры.РукДолжность = Руководители.РуководительДолжность;
		ОбластьПодписи.Параметры.ГлавБухРасшифровкаПодписи = Руководители.ГлавныйБухгалтер;	
		ОбластьПодписи.Параметры.ГлавБухДолжность = Руководители.ГлавныйБухгалтерДолжность;
	КонецЕсли;

	Результат.Вывести(ОбластьПодписи);
	
КонецПроцедуры

Функция ПолучитьМакетОформленияОтчета(ОтчетОбъект, НастройкаКомпоновкиДанных) Экспорт
	
	Попытка
		НастройкиФормы = ОтчетОбъект.НастройкиФормы;
		
		МакетОформления = Неопределено;
		
		Если НастройкиФормы.МакетОформления = 0 Тогда // Зеленый
			ТиповыеОтчеты.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "МакетОформленияОтчетовЗеленый");
		ИначеЕсли НастройкиФормы.МакетОформления = 1 Тогда // Черно-белый
			ТиповыеОтчеты.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "МакетОформленияОтчетовЧерноБелый");
		ИначеЕсли НастройкиФормы.МакетОформления = 2 Тогда 
			ТиповыеОтчеты.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Основной");
		ИначеЕсли НастройкиФормы.МакетОформления = 3 Тогда 
			ТиповыеОтчеты.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Яркий");
		ИначеЕсли НастройкиФормы.МакетОформления = 4 Тогда 
			ТиповыеОтчеты.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Море");
		ИначеЕсли НастройкиФормы.МакетОформления = 5 Тогда 
			ТиповыеОтчеты.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Арктика");
		ИначеЕсли НастройкиФормы.МакетОформления = 6 Тогда 
			ТиповыеОтчеты.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Зеленый");
		ИначеЕсли НастройкиФормы.МакетОформления = 7 Тогда 
			ТиповыеОтчеты.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Античный");
		КонецЕсли;
	Исключение
		//ТиповыеОтчеты.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "МакетОформленияОтчетовЗеленый");
	КонецПопытки;
	
	Возврат МакетОформления;
	
КонецФункции

Процедура УправлениеОтображениемОбластейОтчета(ОтчетОбъект, ФормаОтчета) Экспорт
	
	НеобходимоОбновить = Ложь;
	НастройкиФормы = ОтчетОбъект.НастройкиФормы;
	
	Если Не НастройкиФормы.Свойство("ВыводитьЗаголовок") Тогда
		НастройкиФормы.Вставить("ВыводитьЗаголовок", Истина);
	КонецЕсли;
	
	ОбластьПоиска = ФормаОтчета.ЭлементыФормы.Результат.Области.Найти("Заголовок");
	Если ОбластьПоиска = Неопределено Тогда
		НеобходимоОбновить = Истина;
	Иначе
		ОбластьПоиска.Видимость = НастройкиФормы.ВыводитьЗаголовок;
	КонецЕсли;
	
	Если Не НастройкиФормы.Свойство("ВыводитьПодписи") Тогда
		НастройкиФормы.Вставить("ВыводитьПодписи", Истина);
	КонецЕсли;
	
	ОбластьПоиска = ФормаОтчета.ЭлементыФормы.Результат.Области.Найти("Подписи");
	Если ОбластьПоиска = Неопределено Тогда
		НеобходимоОбновить = Истина;
	Иначе
		ОбластьПоиска.Видимость = НастройкиФормы.ВыводитьПодписи;
	КонецЕсли;
	
	Если НеобходимоОбновить Тогда
		ФормаОтчета.ОбновитьОтчет(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьДанныеОтчета(ФормаОтчета) Экспорт 
	
	СписокСохраняемыхДанных = Новый Массив;
	СписокСохраняемыхДанных.Добавить("Группировка");
	СписокСохраняемыхДанных.Добавить("ГруппировкаКор");
	СписокСохраняемыхДанных.Добавить("ГруппировкаДоп");
	СписокСохраняемыхДанных.Добавить("ДополнительныеПоля");
	СписокСохраняемыхДанных.Добавить("РазвернутоеСальдо");
	СписокСохраняемыхДанных.Добавить("ПоказательДиаграммы");
	СписокСохраняемыхДанных.Добавить("ПредставлениеДиаграммы");
	СписокСохраняемыхДанных.Добавить("ВидПодписиДиаграммы");
	СписокСохраняемыхДанных.Добавить("РазмещениеДополнительныхПолей");
	
	Для Каждого Ключ Из СписокСохраняемыхДанных Цикл
		Попытка
			Если ТипЗнч(ФормаОтчета[Ключ]) = Тип("ТаблицаЗначений") Тогда
				ФормаОтчета.ДанныеОтчета.Вставить(Ключ, ФормаОтчета[Ключ].Скопировать());
			Иначе
				ФормаОтчета.ДанныеОтчета.Вставить(Ключ, ФормаОтчета[Ключ]);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;

	ПоказателиОтчета = ФормаОтчета.ЭлементыФормы.ПоказателиОтчета.Значение;
	
	Для Каждого ЭлементСтруктуры Из ФормаОтчета.ДанныеОтчета.ПоказателиОтчета Цикл
		НайденнаяСтрока = ПоказателиОтчета.Найти(ЭлементСтруктуры.Значение.Представление, "Показатель");
		Если НайденнаяСтрока <> Неопределено Тогда
			ЭлементСтруктуры.Значение.Значение = НайденнаяСтрока.Использование;
		КонецЕсли;
	КонецЦикла;		
	
КонецПроцедуры

Функция ПроверитьЗаполнениеОбязательныхРеквизитов(ФормаОтчета) Экспорт
	
	ЗаполнениеКорректно = Истина;    
	
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ФормаОтчета.ЭтотОбъект);
	
	Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчетуТиповой"
		Или ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчетуНалоговый"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСчетаТиповой" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСчетаНалоговый" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчетаТиповой"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчетаНалоговый"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчетаТиповой"
		Или ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчетаНалоговый" Тогда
		Если Не ЗначениеЗаполнено(ФормаОтчета.Счет) Тогда
			Ответ = Вопрос("Для формирования отчета необходимо указать счет." + Символы.ПС + "Открыть план счетов?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Если ВвестиЗначение(ФормаОтчета.Счет, "Выберите счет") Тогда
					ЗаполнениеКорректно = Истина;
					ФормаОтчета.ОбработкаИзмененияСчета();
					ФормаОтчета.ОбновитьПанельНастроек();
				Иначе
					ЗаполнениеКорректно = Ложь;
				КонецЕсли;
			Иначе
				ЗаполнениеКорректно = Ложь;
			КонецЕсли;  
			Если Не ЗаполнениеКорректно Тогда 
				ФормаОтчета.ТекущийЭлемент = ФормаОтчета.ЭлементыФормы.Счет;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконтоТиповой"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконтоНалоговый" Тогда
		КоличествоСубконто = 0;
		Для Каждого ВидСубконто Из ФормаОтчета.СписокВидовСубконто Цикл
			Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
				КоличествоСубконто = КоличествоСубконто + 1;
			КонецЕсли;
		КонецЦикла;
		КоличествоКорСубконто = 0;
		Для Каждого ВидСубконто Из ФормаОтчета.СписокВидовКорСубконто Цикл
			Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
				КоличествоКорСубконто = КоличествоКорСубконто + 1;
			КонецЕсли;
		КонецЦикла;
		Если КоличествоСубконто = 0 Тогда
			Ответ = Вопрос("Для формирования отчета необходимо указать вид субконто." + Символы.ПС + "Открыть список видов субконто?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ФормаОтчета.СписокВидовСубконто.Добавить();
				Если ВвестиЗначение(ФормаОтчета.СписокВидовСубконто[0].Значение, "Выберите вид субконто", Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые")) Тогда
					ЗаполнениеКорректно = Истина;
					ФормаОтчета.ОбработкаИзмененияСоставаСубконто();
					ФормаОтчета.ОбновитьПанельНастроек();
				Иначе
					ЗаполнениеКорректно = Ложь;
				КонецЕсли;
			Иначе
				ЗаполнениеКорректно = Ложь;
			КонецЕсли;
			Если Не ЗаполнениеКорректно Тогда 
				ФормаОтчета.ТекущийЭлемент = ФормаОтчета.ЭлементыФормы.СписокВидовСубконто;
			КонецЕсли;
		КонецЕсли;
		Если КоличествоКорСубконто = 0 Тогда
			Ответ = Вопрос("Для формирования отчета необходимо указать вид кор. субконто." + Символы.ПС + "Открыть список видов субконто?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ФормаОтчета.СписокВидовКорСубконто.Добавить();
				Если ВвестиЗначение(ФормаОтчета.СписокВидовКорСубконто[0].Значение, "Выберите вид субконто", Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые")) Тогда
					ЗаполнениеКорректно = Истина;
					ФормаОтчета.ОбработкаИзмененияСоставаСубконто();
					ФормаОтчета.ОбновитьПанельНастроек();
				Иначе
					ЗаполнениеКорректно = Ложь;
				КонецЕсли;
			Иначе
				ЗаполнениеКорректно = Ложь;
			КонецЕсли;
			Если Не ЗаполнениеКорректно Тогда 
				ФормаОтчета.ТекущийЭлемент = ФормаОтчета.ЭлементыФормы.СписокВидовКорСубконто;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФормаОтчета.КонецПериода) И ФормаОтчета.НачалоПериода > ФормаОтчета.КонецПериода Тогда 
		Предупреждение("Дата начала периода не может быть больше даты конца периода!");
		ЗаполнениеКорректно = Ложь;
	КонецЕсли;
	
	Возврат ЗаполнениеКорректно;
	
КонецФункции

Функция КоличествоПоказателей(ОтчетОбъект) Экспорт 
	
	КоличествоПоказателей = 0;
	Для Каждого Показатель Из ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета Цикл
		Если Показатель.Значение.Значение И Показатель.Ключ <> "РазвернутоеСальдо" Тогда
			КоличествоПоказателей = КоличествоПоказателей + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоПоказателей;
	
КонецФункции

Процедура ДобавитьДополнительныеПоля(ОтчетОбъект, ГруппировкаОтчета = Неопределено) Экспорт
	
	Если ОтчетОбъект.ДанныеОтчета.Свойство("РазмещениеДополнительныхПолей") Тогда
		Если ОтчетОбъект.ДанныеОтчета.РазмещениеДополнительныхПолей = 0 Тогда
			РасположениеРеквизитов 	= РасположениеРеквизитовКомпоновкиДанных.ВместеСВладельцем;
			РасположениеПолей 		= РасположениеПоляКомпоновкиДанных.Вместе;
		ИначеЕсли ОтчетОбъект.ДанныеОтчета.РазмещениеДополнительныхПолей = 1 Тогда
			РасположениеРеквизитов = РасположениеРеквизитовКомпоновкиДанных.Отдельно;
			РасположениеПолей 		= РасположениеПоляКомпоновкиДанных.Авто;
		КонецЕсли;
	Иначе
		РасположениеРеквизитов = РасположениеРеквизитовКомпоновкиДанных.ВместеСВладельцем;
		РасположениеПолей 		= РасположениеПоляКомпоновкиДанных.Авто;
	КонецЕсли;
	
	Если ГруппировкаОтчета <> Неопределено Тогда
		ГруппировкаОтчета.Расположение = РасположениеПолей;	
	КонецЕсли;	
	
	ТиповыеОтчеты.УстановитьПараметрВывода(ОтчетОбъект.КомпоновщикНастроек, "РасположениеРеквизитов", РасположениеРеквизитов); 
			
	Для Каждого ПолеГруппировки Из ОтчетОбъект.ДанныеОтчета.ДополнительныеПоля Цикл 
		Если ПолеГруппировки.Использование Тогда
			Если ГруппировкаОтчета <> Неопределено Тогда
				ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппировкаОтчета, ПолеГруппировки.Поле);
			Иначе	
				ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, ПолеГруппировки.Поле);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеОтчета(ОтчетОбъект, ПланСчетов = "Типовой") Экспорт
	
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	
	//Данные отчета
	Если ОтчетОбъект.ДанныеОтчета = Неопределено Тогда
		ОтчетОбъект.ДанныеОтчета = Новый Структура;
	КонецЕсли;
	
	// Показатели отчета
	Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ПоказателиОтчета") Тогда
		ОтчетОбъект.ПолучитьСтруктуруПоказателейОтчета();
	КонецЕсли;
	
	// Дополнительные поля
	Если Не ОтчетОбъект.ДанныеОтчета.Свойство("РазмещениеДополнительныхПолей") Тогда
		ОтчетОбъект.ДанныеОтчета.Вставить("РазмещениеДополнительныхПолей", 0);
	КонецЕсли;
		
	Если ИдентификаторОбъекта = ("ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету" + ПланСчетов)
		ИЛИ ИдентификаторОбъекта = ("ОтчетОбъект.АнализСубконто" + ПланСчетов) 
		ИЛИ ИдентификаторОбъекта = ("ОтчетОбъект.ОборотыСчета" + ПланСчетов)
       	ИЛИ ИдентификаторОбъекта = ("ОтчетОбъект.ОборотыМеждуСубконто" + ПланСчетов) 
		ИЛИ ИдентификаторОбъекта = ("ОтчетОбъект.ОборотноСальдоваяВедомость" + ПланСчетов)
		ИЛИ ИдентификаторОбъекта = ("ОтчетОбъект.СверкаДанныхБУ_НУ")
		ИЛИ ИдентификаторОбъекта = ("ОтчетОбъект.АнализСчета" + ПланСчетов) Тогда
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ДополнительныеПоля") Тогда
			ДополнительныеПоля = Новый ТаблицаЗначений;
			ДополнительныеПоля.Колонки.Добавить("Использование");
			ДополнительныеПоля.Колонки.Добавить("Представление");
			ДополнительныеПоля.Колонки.Добавить("Поле");
			ДополнительныеПоля.Колонки.Добавить("Положение");
			ОтчетОбъект.ДанныеОтчета.Вставить("ДополнительныеПоля", ДополнительныеПоля);
		КонецЕсли;
	КонецЕсли;
	
	
	// Группировка по счету
	Если ИдентификаторОбъекта = ("ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету" + ПланСчетов)
		ИЛИ ИдентификаторОбъекта = ("ОтчетОбъект.АнализСубконто" + ПланСчетов) 
        ИЛИ ИдентификаторОбъекта = ("ОтчетОбъект.ОборотыСчета" + ПланСчетов) 
        ИЛИ ИдентификаторОбъекта = ("ОтчетОбъект.ОборотыМеждуСубконто" + ПланСчетов) 
        ИЛИ ИдентификаторОбъекта = ("ОтчетОбъект.АнализСчета" + ПланСчетов) Тогда
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("Группировка") Тогда
			Группировка = Новый ТаблицаЗначений;
			Группировка.Колонки.Добавить("Использование");
			Группировка.Колонки.Добавить("Представление");
			Группировка.Колонки.Добавить("Поле");
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("ПеречислениеСсылка.ТипДетализацииСтандартныхОтчетов"));
			Группировка.Колонки.Добавить("ТипГруппировки", Новый ОписаниеТипов(МассивТипов));
			Группировка.Колонки.Добавить("Оформление", Новый ОписаниеТипов("НастройкаОформления"));   
			Группировка.Колонки.Добавить("ПоУмолчанию", Новый ОписаниеТипов("Булево"));
			ОтчетОбъект.ДанныеОтчета.Вставить("Группировка", Группировка);
		КонецЕсли;
	КонецЕсли;
	
	
	// Группировка по кор. счетам
	Если ИдентификаторОбъекта = ("ОтчетОбъект.АнализСчета" + ПланСчетов) Тогда
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ГруппировкаКор") Тогда
			ГруппировкаКор = Новый ТаблицаЗначений;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Булево"));
			ГруппировкаКор.Колонки.Добавить("Использование", Новый ОписаниеТипов(МассивТипов));		
			ГруппировкаКор.Колонки.Добавить("ПоСубсчетам", Новый ОписаниеТипов(МассивТипов));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("ПланСчетовСсылка." + ПланСчетов));
			ГруппировкаКор.Колонки.Добавить("Счет", Новый ОписаниеТипов(МассивТипов));
			ГруппировкаКор.Колонки.Добавить("Представление", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(200));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СписокЗначений"));
			ГруппировкаКор.Колонки.Добавить("ПоСубконто", Новый ОписаниеТипов(МассивТипов));
			
			ОтчетОбъект.ДанныеОтчета.Вставить("ГруппировкаКор", ГруппировкаКор);
		КонецЕсли;
	КонецЕсли;
	
	// Группировка
	Если ИдентификаторОбъекта = ("ОтчетОбъект.ОборотноСальдоваяВедомость" + ПланСчетов)
		ИЛИ ИдентификаторОбъекта = ("ОтчетОбъект.СверкаДанныхБУ_НУ") Тогда
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("Группировка") Тогда
			Группировка = Новый ТаблицаЗначений;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Булево"));
			Группировка.Колонки.Добавить("Использование", Новый ОписаниеТипов(МассивТипов));		
			Группировка.Колонки.Добавить("ПоСубсчетам", Новый ОписаниеТипов(МассивТипов));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("ПланСчетовСсылка." + ПланСчетов));
			Группировка.Колонки.Добавить("Счет", Новый ОписаниеТипов(МассивТипов));
			Группировка.Колонки.Добавить("Представление", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(200));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СписокЗначений"));
			Группировка.Колонки.Добавить("ПоСубконто", Новый ОписаниеТипов(МассивТипов));
			
			ОтчетОбъект.ДанныеОтчета.Вставить("Группировка", Группировка);
					
		КонецЕсли;
		
		//Добавим дополнительную группировку в отчет
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ГруппировкаДоп") Тогда
			
			Группировка = Новый ТаблицаЗначений;
			Группировка.Колонки.Добавить("Использование");
			Группировка.Колонки.Добавить("Представление");
			Группировка.Колонки.Добавить("Поле");
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("ПеречислениеСсылка.ТипДетализацииСтандартныхОтчетов"));
			Группировка.Колонки.Добавить("ТипГруппировки", Новый ОписаниеТипов(МассивТипов));
			ОтчетОбъект.ДанныеОтчета.Вставить("ГруппировкаДоп", Группировка);
			
		КонецЕсли;
			
		// РазвернутоеСальдо 
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("РазвернутоеСальдо") Тогда
			РазвернутоеСальдо = Новый ТаблицаЗначений;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Булево"));
			РазвернутоеСальдо.Колонки.Добавить("Использование", Новый ОписаниеТипов(МассивТипов));		
			РазвернутоеСальдо.Колонки.Добавить("ПоСубсчетам", Новый ОписаниеТипов(МассивТипов));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("ПланСчетовСсылка." + ПланСчетов));
			РазвернутоеСальдо.Колонки.Добавить("Счет", Новый ОписаниеТипов(МассивТипов));
			РазвернутоеСальдо.Колонки.Добавить("Представление", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(200));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СписокЗначений"));
			РазвернутоеСальдо.Колонки.Добавить("ПоСубконто", Новый ОписаниеТипов(МассивТипов));
			ОтчетОбъект.ДанныеОтчета.Вставить("РазвернутоеСальдо", РазвернутоеСальдо);
		КонецЕсли;
	КонецЕсли;
	
	// Настройки диаграммы	
	Если ИдентификаторОбъекта = ("ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету" + ПланСчетов)
		ИЛИ ИдентификаторОбъекта = ("ОтчетОбъект.АнализСубконто" + ПланСчетов) 
		ИЛИ ИдентификаторОбъекта = ("ОтчетОбъект.ОборотыСчета" + ПланСчетов) 
		ИЛИ ИдентификаторОбъекта = ("ОтчетОбъект.АнализСчета" + ПланСчетов) Тогда
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ПоказательДиаграммы") Тогда
			ОтчетОбъект.ДанныеОтчета.Вставить("ПоказательДиаграммы", 0);
		КонецЕсли;
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ВидПодписиДиаграммы") Тогда
			ОтчетОбъект.ДанныеОтчета.Вставить("ВидПодписиДиаграммы", 0010);
		КонецЕсли;
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ПредставлениеДиаграммы") Тогда
			ОтчетОбъект.ДанныеОтчета.Вставить("ПредставлениеДиаграммы", 0);
		КонецЕсли;
	КонецЕсли;
	
	//Настройки формы
	Если ОтчетОбъект.НастройкиФормы = Неопределено Тогда
		ОтчетОбъект.НастройкиФормы = Новый Структура;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаРасшифровкиСпециализированногоОтчета(ОтчетОбъект, ФормаОтчета, Расшифровка, СтандартнаяОбработка, ПланСчетов = "Типовой") Экспорт
	
	// Запретим стандартную обработку расшифровки
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	
	// Создадим и инициализируем обработчик расшифровки
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ФормаОтчета.ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(ОтчетОбъект.СхемаКомпоновкиДанных));
	
	// Осуществим выбор действия расшифровки пользователем
	Настройки = ОбработкаРасшифровки.Выполнить(Расшифровка);
	
	Если Настройки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЕстьПодразделение = Ложь;
	МассивПолей = ТиповыеОтчеты.ПолучитьМассивПолейРасшифровки(Расшифровка, ФормаОтчета.ДанныеРасшифровки, , истина);
	
	ФормаРасшифровка = Отчеты[ОтчетОбъект.Метаданные().Имя].ПолучитьФорму(,, Новый УникальныйИдентификатор);	
	ФормаРасшифровка.РежимРасшифровки = Истина;
	ФормаРасшифровка.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	Период = Неопределено;
	Для Каждого Элемент Из МассивПолей Цикл
		Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
			Если Элемент.Поле = "Период" Тогда
				Период = Элемент.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ГруппировкаПоОрганизации 	= Неопределено;
	ГруппировкаПоПодразделению 	= Неопределено;
	
	СписокПолейОтборов = Новый Массив;
	Для каждого Отбор из МассивПолей Цикл
		Если ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если Отбор.Представление = "###ОтборПоОрганизации###" Тогда
				ФормаРасшифровка.мСписокСтруктурныхЕдиниц          		= Отбор.ПравоеЗначение;
				ФормаРасшифровка.ПредставлениеСпискаОрганизаций		 	= РаботаСДиалогами.ВыгрузитьСписокВСтроку(Отбор.ПравоеЗначение);
			КонецЕсли;				
		ИначеЕсли ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если Отбор.Представление = "###ОтборПоОрганизации###" Тогда
				
				ПустоеДеревоСЕ = СформироватьДеревоСЕ();
				
				Для Каждого ЭлементОтбораИЛИ Из Отбор.Элементы Цикл
					
					Подразделения = Новый СписокЗначений;
					
					Для Каждого ЭлементотбораИ Из ЭлементОтбораИЛИ.Элементы Цикл
						
						Если ЭлементотбораИ.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
							
							Организация = ЭлементотбораИ.ПравоеЗначение;
							
						ИначеЕсли ЭлементотбораИ.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") Тогда 
							
							Если (ГруппировкаПоПодразделению <> Неопределено) Тогда
								Подразделения.Очистить();
								Подразделения.Добавить(ГруппировкаПоПодразделению);							
								Продолжить;
							КонецЕсли;
							
							Если ЭлементотбораИ.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда 
								
								Подразделения.Добавить(ЭлементотбораИ.ПравоеЗначение);
								
							ИначеЕсли ЭлементотбораИ.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда 
								
								Подразделения = ЭлементотбораИ.ПравоеЗначение;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;							
					
					Если (ГруппировкаПоОрганизации <> Неопределено) И (ГруппировкаПоОрганизации <> Организация) Тогда 
						Продолжить;
					КонецЕсли;                                             							
					
					ПараметрыОтбораСЕ = Новый Структура;
					ПараметрыОтбораСЕ.Вставить("СтруктурнаяЕдиница", Организация);
					ПараметрыОтбораСЕ.Вставить("ЭтоГруппа", Ложь);
					
					НайденныеСтроки = ПустоеДеревоСЕ.Строки.НайтиСтроки(ПараметрыОтбораСЕ, Истина);               
					НайденныеСтроки[0].Пометка = Истина;
					Если (ГруппировкаПоОрганизации = Неопределено) Тогда 
						ФормаРасшифровка.мСписокСтруктурныхЕдиниц.Добавить(НайденныеСтроки[0].СтруктурнаяЕдиница);
					КонецЕсли;
					
					
					Для Каждого Подразделение Из Подразделения Цикл 
						
						Если (ГруппировкаПоПодразделению = Неопределено) Тогда
							ФормаРасшифровка.мСписокПодразделений.Добавить(Подразделение.Значение, ?(ЗначениеЗаполнено(Подразделение.Значение), "", "Головное подразделение"));
						КонецЕсли;
						ВыставитьОтметкиСЕ(Организация, Подразделение.Значение, ПустоеДеревоСЕ);							
						
					КонецЦикла;
					
				КонецЦикла;
				
				ФормаРасшифровка.ПредставлениеСпискаОрганизаций 	= РаботаСДиалогами.ВыгрузитьСписокВСтроку(ФормаРасшифровка.мСписокСтруктурныхЕдиниц);
				ФормаРасшифровка.ПредставлениеСпискаПодразделений 	= РаботаСДиалогами.ВыгрузитьСписокВСтроку(ФормаРасшифровка.мСписокПодразделений);
				ФормаРасшифровка.мДеревоСтруктурныхЕдиниц = ПустоеДеревоСЕ;
				
			КонецЕсли;				
			
		КонецЕсли;
		
	КонецЦикла;
	
	/////////////////////////////////////////////////
	
	Если Период <> Неопределено Тогда
		ФормаРасшифровка.НачалоПериода = Период;
		ФормаРасшифровка.КонецПериода  = СтандартныеОтчеты.КонецПериода(Период, ОтчетОбъект.Периодичность);
	Иначе
		ФормаРасшифровка.НачалоПериода = ОтчетОбъект.НачалоПериода;
		ФормаРасшифровка.КонецПериода  = ОтчетОбъект.КонецПериода;
	КонецЕсли;
	
	Если ИдентификаторОбъекта="ОтчетОбъект.б_ОтчетПоБюджету" 
		ИЛИ  ИдентификаторОбъекта="ОтчетОбъект.б_ОтчетПоБюджетуБО" 
		ИЛИ ИдентификаторОбъекта="ОтчетОбъект.б_ПрограммаРеализации"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ЦС_б_ОтчетПоБюджетуБО_СравнительныйАнализ" Тогда
		ФормаРасшифровка.ФормируемыйБюджет  = ОтчетОбъект.ФормируемыйБюджет;
		ФормаРасшифровка.ЕдиницаИзмерения  = ОтчетОбъект.ЕдиницаИзмерения;
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ОтчетОбъект.ЦС_б_ОтчетПоБюджетуБО_СравнительныйАнализ" Тогда
		  ФормаРасшифровка.НачалоПериодаКолонка2 = ОтчетОбъект.НачалоПериодаКолонка2;
		  ФормаРасшифровка.КонецПериодаКолонка2 = ОтчетОбъект.КонецПериодаКолонка2;
          ФормаРасшифровка.НачалоПериодаАнализа = ОтчетОбъект.НачалоПериодаАнализа;
		  ФормаРасшифровка.КонецПериодаАнализа = ОтчетОбъект.КонецПериодаАнализа; 
	КонецЕсли;
	
	Если ИдентификаторОбъекта="ОтчетОбъект.б_ОтчетПоСтатьямБюджета" Тогда
		ФормаРасшифровка.ФормируемыйБюджет  = ОтчетОбъект.ФормируемыйБюджет;
		ФормаРасшифровка.СтатьяБюджета  = ОтчетОбъект.СтатьяБюджета;
		ФормаРасшифровка.ЕдиницаИзмерения  = ОтчетОбъект.ЕдиницаИзмерения;
	КонецЕсли;
	////////////////////////////////////////////////
	ФормаРасшифровка.Открыть();
	ФормаРасшифровка.ОбновитьОтчет();	
	
КонецПроцедуры

Процедура ОбработкаРасшифровкиСтандартногоОтчета(ОтчетОбъект, ФормаОтчета, Расшифровка, СтандартнаяОбработка, ПланСчетов = "Типовой") Экспорт
	
	Перем ВыполненноеДействие;
	
	// Запретим стандартную обработку расшифровки
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	
	Если ИдентификаторОбъекта = ("ОтчетОбъект.КарточкаСчета" + ПланСчетов)
		ИЛИ ИдентификаторОбъекта = ("ОтчетОбъект.КарточкаСубконто" + ПланСчетов)
		ИЛИ ИдентификаторОбъекта = ("ОтчетОбъект.ОтчетПоПроводкам" + ПланСчетов) Тогда
		ОткрытьЗначение(ФормаОтчета.ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение);
	Иначе
		ЕстьПодразделение = Ложь;
		МассивПолей = ТиповыеОтчеты.ПолучитьМассивПолейРасшифровки(Расшифровка, ФормаОтчета.ДанныеРасшифровки, , истина);
		
		// обработка порядка субконто в счетах детализации
		// (в отчетах есть таблицы детализации корсчетов)
		Если ИдентификаторОбъекта = ("ОтчетОбъект.ОборотноСальдоваяВедомость" + ПланСчетов)
			ИЛИ ИдентификаторОбъекта = ("ОтчетОбъект.АнализСчета" + ПланСчетов) Тогда
			
			Если ИдентификаторОбъекта = ("ОтчетОбъект.АнализСчета" + ПланСчетов) Тогда
				ИмяТаблицыДетализации = "ГруппировкаКор";
			Иначе
				ИмяТаблицыДетализации = "Группировка";
			КонецЕсли;
			
			ПараметрыОтбораСтрок = Новый Структура("Использование", Истина);
			ДетализацияПоСчетам = ОтчетОбъект.ДанныеОтчета[ИмяТаблицыДетализации].Скопировать(ПараметрыОтбораСтрок);
			
			Если ДетализацияПоСчетам.Количество() > 0 Тогда
			
				СчетРасшифровки = Неопределено;
				МассивСубконтоРасшифровки = Новый Массив;
				
				Для Каждого ЭлементРасшифровки Из МассивПолей Цикл
					Если ТипЗнч(ЭлементРасшифровки) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
						Если Найти(ЭлементРасшифровки.Поле, "Субконто") > 0 Тогда
							МассивСубконтоРасшифровки.Добавить(ЭлементРасшифровки);
						КонецЕсли;
						Если ЭлементРасшифровки.Поле = "Счет" Тогда
							СчетРасшифровки = ЭлементРасшифровки.Значение;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если СчетРасшифровки <> Неопределено
					И СчетРасшифровки.ВидыСубконто.Количество() > 0 
					И МассивСубконтоРасшифровки.Количество() > 0 Тогда
					
					СтрокаДетализацииСчета = ДетализацияПоСчетам.Найти(СчетРасшифровки, "Счет");
					
					Если СтрокаДетализацииСчета <> Неопределено Тогда
						ТаблицаСубконтоСчета = СчетРасшифровки.ВидыСубконто.Выгрузить(, "ВидСубконто");
						ТаблицаСубконтоСчета.Колонки.Добавить("СубконтоРасшифровки");
						СписокСубконтоДетализации = СтрокаДетализацииСчета.ПоСубконто.Скопировать();
						
						Для Каждого СубконтоСчета Из ТаблицаСубконтоСчета Цикл
							СубконтоДетализации = СписокСубконтоДетализации.НайтиПоЗначению(СубконтоСчета.ВидСубконто);
							Если СубконтоДетализации <> Неопределено И НЕ СубконтоДетализации.Пометка Тогда
								СписокСубконтоДетализации.Удалить(СубконтоДетализации);
							КонецЕсли;
						КонецЦикла;
						Для Каждого СубконтоСчета Из ТаблицаСубконтоСчета Цикл
							СубконтоДетализации = СписокСубконтоДетализации.НайтиПоЗначению(СубконтоСчета.ВидСубконто);
							Если СубконтоДетализации <> Неопределено Тогда
								СубконтоСчета.СубконтоРасшифровки = "Субконто" + (СписокСубконтоДетализации.Индекс(СубконтоДетализации) + 1);
							КонецЕсли;
						КонецЦикла;
							
						Для каждого СубконтоРасшифровки Из МассивСубконтоРасшифровки Цикл
							НайденнаяСтрока = ТаблицаСубконтоСчета.Найти(СубконтоРасшифровки.Поле, "СубконтоРасшифровки");
							Если НайденнаяСтрока <> Неопределено Тогда
								СубконтоРасшифровки.Поле = "Субконто" + (ТаблицаСубконтоСчета.Индекс(НайденнаяСтрока) + 1);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЕсли;
		КонецЕсли;
		
		ЕстьПоказатель  = Ложь;
		ЕстьКорЗначение = Ложь;
		ЕстьСчет        = Истина;
		ЕстьВыводимыеДанные = Ложь;// Для отчета Сверка данных БУ и НУ
		
		ЕстьСчетБУ      = Ложь; // Для отчета Сверка данных БУ и НУ
		ЕстьСчетНУ		= Ложь;
		ЕстьСубконто1   = Ложь; // Для отчета Сверка данных БУ и НУ
		ЕстьСубконто2   = Ложь; // Для отчета Сверка данных БУ и НУ
		ЕстьСубконто3   = Ложь; // Для отчета Сверка данных БУ и НУ
		ЕстьРегистратор = Ложь; // Для отчета Сверка данных БУ и НУ
		
		ПервыйЭлемент   = Неопределено;
		Счет            = Неопределено;
		СчетБУ          = Неопределено;
		СчетНУ			= Неопределено;
		Субконто1		= Неопределено;
		Субконто2		= Неопределено;
		Субконто3		= Неопределено;	
		
		КорСчет         = Неопределено;
		Период          = Неопределено;
		БухТипРесурса       = Неопределено; // Для отчетов АнализСчета и ОборотыСчета
		ИндексБухТипРесурса = Неопределено; // Для отчетов АнализСчета и ОборотыСчета
		
		Для Индекс = 0 по МассивПолей.ВГраница() Цикл
			Элемент = МассивПолей[Индекс];
			Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
				Если ПервыйЭлемент = Неопределено И Элемент.Поле <> "Показатель" Тогда 
					ПервыйЭлемент = Элемент;
				КонецЕсли;
				Если Элемент.Поле = "Показатель" Тогда
					ЕстьПоказатель = Истина;
				КонецЕсли;
				Если Найти(Элемент.Поле, "Кор") = 1 Тогда
					ЕстьКорЗначение = Истина;
				КонецЕсли;
				Если Элемент.Поле = "КорСчет" Тогда
					КорСчет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Счет" Тогда
					Счет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "СчетНУ" Тогда
					Счет 	= Элемент.Значение;
					СчетНУ 	= Элемент.Значение;
				КонецЕсли;				
				Если Элемент.Поле = "СчетБУ" Тогда
					СчетБУ 		= Элемент.Значение;
					ЕстьСчетБУ 	= Истина;
				КонецЕсли;
				Если Элемент.Поле = "Период" Тогда
					Период = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Субконто1" Тогда
					Субконто1 		= Элемент.Значение;
					ЕстьСубконто1 	= Истина;
				КонецЕсли;
				Если Элемент.Поле = "Субконто2" Тогда
					Субконто2 = Элемент.Значение;
					ЕстьСубконто2 	= Истина;
				КонецЕсли;
				Если Элемент.Поле = "Субконто3" Тогда
					Субконто3 = Элемент.Значение;
					ЕстьСубконто3 	= Истина;
				КонецЕсли;
				
				Если Элемент.Поле = "ДокументДвижения" Тогда
					Регистратор = Элемент.Значение;
					ЕстьРегистратор = Истина;
				КонецЕсли;
				
				Если Элемент.Поле = "БухТипРесурса" Тогда
					БухТипРесурса = Элемент.Значение;
					ИндексБухТипРесурса = Индекс;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если БухТипРесурса <> Неопределено И ИндексБухТипРесурса <> Неопределено Тогда
			МассивПолей.Удалить(ИндексБухТипРесурса);
		КонецЕсли;
		
		ФормироватьОСВПоСчету            = Ложь;
		ФормироватьАнализСчета           = Ложь;
		ФормироватьОборотыСчетаПоМесяцам = Ложь;
		ФормироватьОборотыСчетаПоДням    = Ложь;
		ФормироватьКарточкуСчета         = Ложь;
		ФормироватьКарточкуСубконто      = Ложь;
		ФормироватьОтчетПоПроводкам      = Ложь;
		ФормироватьСверкаДанныхБУ_НУ	 = Ложь;
		ПолеДопГруппировкиРасшифровки 	 = Неопределено;
		
		Если  ИдентификаторОбъекта = ("ОтчетОбъект.СверкаДанныхБУ_НУ") Тогда
			ЕстьВыводимыеДанные = Истина;
			Если ЕстьСчетБУ  Тогда
				ПланСчетов 	= "Типовой";
				Счет 		= СчетБУ;
			Иначе
				Счет 		= СчетНУ;
			КонецЕсли;			
		КонецЕсли;	
		
		ПредставлениеСверкиБУНУПоРегистраторам = "Расшифровать по первичным документам";
		ПредставлениеСверкиБУНУПоСубконто	  = "Расшифровать по субконто";
		ПредставлениеДляСверкаДанныхБУ_НУ 	  = "ОСВ по счету " + ?(ПланСчетов = "Налоговый", "(налоговый) ", "") + Счет;
		ПредставлениеДляОСВПоСчету            = "ОСВ по счету " + ?(ПланСчетов = "Налоговый", "(налоговый) ", "") + Счет;
		ПредставлениеДляКарточкиСчета         = "Карточка счета " + ?(ПланСчетов = "Налоговый", "(налоговый) ", "") + Счет;
		ПредставлениеДляАнализаСчета          = "Анализ счета " + ?(ПланСчетов = "Налоговый", "(налоговый) ", "") + Счет;
		ПредставлениеДляОборотыСчетаПоМесяцам = "Обороты счета " + ?(ПланСчетов = "Налоговый", "(налоговый) ", "") + Счет + " по месяцам";
		ПредставлениеДляОборотыСчетаПоДням    = "Обороты счета " + ?(ПланСчетов = "Налоговый", "(налоговый) ", "") + Счет + " по дням";
		ПредставлениеДляКарточкиСубконто      = "Карточка субконто" + ?(ПланСчетов = "Налоговый", "(налоговый) ", "");
		ПредставлениеДляОтчетаПоПроводкам     = "Отчет по проводкам"+ ?(ПланСчетов = "Налоговый", "(налоговый) ", "");
		
		УстановитьВсеПоказатели = Ложь;
		
		ДобавитьОтборПоВидСубконто    = Истина;
		ДобавитьОтборПоВидКорСубконто = Истина;
		
		Если ПервыйЭлемент <> Неопределено Тогда
			Если ИдентификаторОбъекта = ("ОтчетОбъект.ОборотноСальдоваяВедомость" + ПланСчетов)
				ИЛИ ИдентификаторОбъекта = ("ОтчетОбъект.СверкаДанныхБУ_НУ")
				Тогда
				
				// Создадим и инициализируем обработчик расшифровки
				ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ФормаОтчета.ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(ОтчетОбъект.СхемаКомпоновкиДанных));
				
				ДоступныеДействия = Новый Массив();
				
				СписокПунктовМеню = Новый СписокЗначений;
				Если Не ЕстьПоказатель И ЗначениеЗаполнено(ПервыйЭлемент.Значение)  И Не ПростойТип(ПервыйЭлемент.Значение) Тогда
					СписокПунктовМеню.Добавить("Открыть """ + ПервыйЭлемент.Значение + """");
				КонецЕсли;
								
				Если  ИдентификаторОбъекта = ("ОтчетОбъект.СверкаДанныхБУ_НУ") Тогда
					Если ЕстьРегистратор Тогда
						// Просто открываем регистратор
						ОткрытьЗначение(Регистратор);
						Возврат;
					Иначе
						Если НЕ ЕстьСубконто1 Тогда
							СписокПунктовМеню.Добавить(ПредставлениеСверкиБУНУПоСубконто);						
						КонецЕсли;
						СписокПунктовМеню.Добавить(ПредставлениеСверкиБУНУПоРегистраторам);
					КонецЕсли;	
				КонецЕсли;
				
				СписокПунктовМеню.Добавить(ПредставлениеДляОСВПоСчету);
				СписокПунктовМеню.Добавить(ПредставлениеДляКарточкиСчета);
				СписокПунктовМеню.Добавить(ПредставлениеДляАнализаСчета);
				СписокПунктовМеню.Добавить(ПредставлениеДляОборотыСчетаПоМесяцам);
				СписокПунктовМеню.Добавить(ПредставлениеДляОборотыСчетаПоДням);
				
				// Осуществим выбор действия расшифровки пользователем
				Настройки = ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие, ДоступныеДействия, СписокПунктовМеню);
				
				Если ВыполненноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда 
					Если ВыполненноеДействие = ПредставлениеДляОСВПоСчету Тогда
						ФормироватьОСВПоСчету   = Истина;
						УстановитьВсеПоказатели = Истина;
						ЕстьВыводимыеДанные 		= Ложь;
					ИначеЕсли ВыполненноеДействие = ПредставлениеДляКарточкиСчета Тогда
						ФормироватьКарточкуСчета = Истина;
						УстановитьВсеПоказатели  = Истина;
						ЕстьВыводимыеДанные 	 = Ложь;
					ИначеЕсли ВыполненноеДействие = ПредставлениеДляАнализаСчета Тогда
						ФормироватьАнализСчета  = Истина;
						УстановитьВсеПоказатели = Истина;
						ЕстьВыводимыеДанные 	= Ложь;
					ИначеЕсли ВыполненноеДействие = ПредставлениеДляОборотыСчетаПоМесяцам Тогда
						ФормироватьОборотыСчетаПоМесяцам = Истина;
						УстановитьВсеПоказатели          = Истина;
						ЕстьВыводимыеДанные 		= Ложь;
					ИначеЕсли ВыполненноеДействие = ПредставлениеДляОборотыСчетаПоДням Тогда
						ФормироватьОборотыСчетаПоДням = Истина;
						УстановитьВсеПоказатели       = Истина;
						ЕстьВыводимыеДанные 		= Ложь;
					ИначеЕсли ВыполненноеДействие = ПредставлениеСверкиБУНУПоСубконто Тогда
						ФормироватьСверкаДанныхБУ_НУ = Истина;
						ПолеДопГруппировкиРасшифровки = "Субконто1";
						УстановитьВсеПоказатели     = Истина;												
					ИначеЕсли ВыполненноеДействие = ПредставлениеСверкиБУНУПоРегистраторам Тогда
						ФормироватьСверкаДанныхБУ_НУ = Истина;
						ПолеДопГруппировкиРасшифровки = "ДокументДвижения";
						УстановитьВсеПоказатели     = Истина;
					Иначе	
						Если ЗначениеЗаполнено(ПервыйЭлемент.Значение) Тогда
							ОткрытьЗначение(ПервыйЭлемент.Значение);
							Возврат;
						КонецЕсли;       
					КонецЕсли;
				Иначе 
					Возврат;
				КонецЕсли;
			Иначе
				Если ЕстьПоказатель Тогда
					// Если расшифровывается показатель, то необходимо сразу формировать отчет
					Если ИдентификаторОбъекта = ("ОтчетОбъект.АнализСубконто" + ПланСчетов) Тогда
						Если Счет <> Неопределено Тогда 
							//ФормироватьКарточкуСчета = Истина;
							ФормироватьКарточкуСубконто = Истина;
						Иначе
							ФормироватьКарточкуСубконто = Истина;		
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = ("ОтчетОбъект.АнализСчета" + ПланСчетов) Тогда
						Если ЕстьКорЗначение Тогда
							ФормироватьОтчетПоПроводкам = Истина;
						Иначе
							ФормироватьКарточкуСчета = Истина;		
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = ("ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету" + ПланСчетов) Тогда
						ФормироватьКарточкуСчета = Истина;
					ИначеЕсли ИдентификаторОбъекта = ("ОтчетОбъект.ОборотыМеждуСубконто" + ПланСчетов) Тогда
						ФормироватьОтчетПоПроводкам = Истина;
					ИначеЕсли ИдентификаторОбъекта = ("ОтчетОбъект.ОборотыСчета" + ПланСчетов) Тогда				
						ФормироватьОтчетПоПроводкам = Истина;
					ИначеЕсли ИдентификаторОбъекта = ("ОтчетОбъект.СводныеПроводки" + ПланСчетов) Тогда
						ФормироватьОтчетПоПроводкам = Истина;
					КонецЕсли;
				Иначе
					Если ИдентификаторОбъекта = ("ОтчетОбъект.СводныеПроводки" + ПланСчетов) Тогда
						ФормироватьОтчетПоПроводкам = Истина;
						УстановитьВсеПоказатели     = Истина;
					ИначеЕсли ИдентификаторОбъекта = ("ОтчетОбъект.ШахматнаяВедомостьТиповой") Тогда
						ФормироватьОтчетПоПроводкам = Истина;
						//УстановитьВсеПоказатели     = Истина;
					Иначе 
						// Создадим и инициализируем обработчик расшифровки
						ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ФормаОтчета.ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(ОтчетОбъект.СхемаКомпоновкиДанных));
						
						ДоступныеДействия = Новый Массив();
						
						СписокПунктовМеню = Новый СписокЗначений;
						
						Если ЗначениеЗаполнено(ПервыйЭлемент.Значение) И Не ПростойТип(ПервыйЭлемент.Значение) Тогда
							СписокПунктовМеню.Добавить("Открыть """ + ПервыйЭлемент.Значение + """");
						КонецЕсли;
						Если ИдентификаторОбъекта = ("ОтчетОбъект.АнализСубконто" + ПланСчетов) Тогда
							Если Счет <> Неопределено Тогда 
								СписокПунктовМеню.Добавить(ПредставлениеДляКарточкиСчета);
							Иначе
								СписокПунктовМеню.Добавить(ПредставлениеДляКарточкиСубконто);
							КонецЕсли;	
						ИначеЕсли ИдентификаторОбъекта = ("ОтчетОбъект.АнализСчета" + ПланСчетов) Тогда
							Если ЕстьКорЗначение Тогда 
								СписокПунктовМеню.Добавить(ПредставлениеДляОтчетаПоПроводкам);
							Иначе
								СписокПунктовМеню.Добавить(ПредставлениеДляКарточкиСчета);
							КонецЕсли;
						ИначеЕсли ИдентификаторОбъекта = ("ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету" + ПланСчетов) Тогда
							СписокПунктовМеню.Добавить(ПредставлениеДляКарточкиСчета);
						ИначеЕсли ИдентификаторОбъекта = ("ОтчетОбъект.ОборотыМеждуСубконто" + ПланСчетов) Тогда
							СписокПунктовМеню.Добавить(ПредставлениеДляОтчетаПоПроводкам);
						ИначеЕсли ИдентификаторОбъекта = ("ОтчетОбъект.ОборотыСчета" + ПланСчетов) Тогда				
							СписокПунктовМеню.Добавить(ПредставлениеДляОтчетаПоПроводкам);
						ИначеЕсли 	ИдентификаторОбъекта = ("ОтчетОбъект.СправкаРасчетВычетовПоНалогам") Тогда
							СписокПунктовМеню.Добавить(ПредставлениеДляКарточкиСубконто);
							СписокПунктовМеню.Добавить(ПредставлениеДляАнализаСчета);
						КонецЕсли;
						
						Если СписокПунктовМеню.Количество() = 0 Тогда
							ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет;
						Иначе
							// Осуществим выбор действия расшифровки пользователем
							Настройки = ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие, ДоступныеДействия, СписокПунктовМеню);
						КонецЕсли;
						
						Если ВыполненноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда 
							Если ВыполненноеДействие = ПредставлениеДляКарточкиСчета Тогда
								ФормироватьКарточкуСчета = Истина;
								УстановитьВсеПоказатели  = Истина;
							ИначеЕсли ВыполненноеДействие = ПредставлениеДляКарточкиСубконто Тогда
								ФормироватьКарточкуСубконто = Истина;
								УстановитьВсеПоказатели     = Истина;
							ИначеЕсли ВыполненноеДействие = ПредставлениеДляОтчетаПоПроводкам Тогда
								ФормироватьОтчетПоПроводкам = Истина;
								УстановитьВсеПоказатели     = Истина;
							ИначеЕсли ВыполненноеДействие = ПредставлениеДляАнализаСчета Тогда
								ФормироватьАнализСчета 		= Истина;
								УстановитьВсеПоказатели     = Истина;								
							Иначе
								Если ЗначениеЗаполнено(ПервыйЭлемент.Значение) Тогда
									ОткрытьЗначение(ПервыйЭлемент.Значение);
									Возврат;
								КонецЕсли;       
							КонецЕсли;
						Иначе 
							Возврат;
						КонецЕсли;  
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			
					
			Если ФормироватьКарточкуСчета Тогда 
				
				ФормаРасшифровка = Отчеты["КарточкаСчета" + ПланСчетов].ПолучитьФорму(,, Новый УникальныйИдентификатор);
				
				попытка
				   	ФормаРасшифровка.элиминироватьсчета = ОтчетОбъект.Элиминироватьсчета;
					ФормаРасшифровка.СчетаЭлиминации.загрузитьзначения(ОтчетОбъект.СчетаЭлиминации.ВыгрузитьЗначения());
				Исключение
					
				КонецПопытки;
				
				Если (Счет = Неопределено) И (ИдентификаторОбъекта = ("ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету" + ПланСчетов)) Тогда 

					ФормаРасшифровка.Счет = ОтчетОбъект.Счет;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					ФормаРасшифровка.Счет = ОтчетОбъект.Счет;			
//}}MRG[ <-> ]
				КонецЕсли;					
				
			ИначеЕсли ФормироватьКарточкуСубконто Тогда
				ФормаРасшифровка = Отчеты["КарточкаСубконто" + ПланСчетов].ПолучитьФорму(,, Новый УникальныйИдентификатор);
				Если ИдентификаторОбъекта = ("ОтчетОбъект.СправкаРасчетВычетовПоНалогам") Тогда
					СписокВидовСубконто  = Новый СписокЗначений;
					СписокВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НалогиСборыОтчисления);
					СписокВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыПлатежейВБюджетИФонды);
					Если ЕстьСубконто3 Тогда
						// включена аналитика по налоговым комитетам на счетах налогов
						СписокВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
					КонецЕсли;
					
					ФормаРасшифровка.СписокВидовСубконто = СписокВидовСубконто.Скопировать();
				Иначе
					ФормаРасшифровка.СписокВидовСубконто = ОтчетОбъект.СписокВидовСубконто.Скопировать();
				КонецЕсли;
			ИначеЕсли ФормироватьАнализСчета Тогда
				ФормаРасшифровка = Отчеты["АнализСчета" + ПланСчетов].ПолучитьФорму(,, Новый УникальныйИдентификатор);
				Если (Счет = Неопределено) И (ИдентификаторОбъекта = ("ОтчетОбъект.СправкаРасчетВычетовПоНалогам")) Тогда 
					ФормаРасшифровка.Счет = ПланыСчетов.Налоговый.РасчетыСБюджетомПоНалогамИОтчислениям;
				КонецЕсли;					
			ИначеЕсли ФормироватьОборотыСчетаПоДням Тогда
				ФормаРасшифровка = Отчеты["ОборотыСчета" + ПланСчетов].ПолучитьФорму(,, Новый УникальныйИдентификатор);
				ФормаРасшифровка.Периодичность = 6;
			ИначеЕсли ФормироватьОборотыСчетаПоМесяцам Тогда
				ФормаРасшифровка = Отчеты["ОборотыСчета" + ПланСчетов].ПолучитьФорму(,, Новый УникальныйИдентификатор);
				ФормаРасшифровка.Периодичность = 9;
			ИначеЕсли ФормироватьОСВПоСчету Тогда
				ФормаРасшифровка = Отчеты["ОборотноСальдоваяВедомостьПоСчету" + ПланСчетов].ПолучитьФорму(,, Новый УникальныйИдентификатор);
			ИначеЕсли ФормироватьОтчетПоПроводкам Тогда
				ФормаРасшифровка = Отчеты["ОтчетПоПроводкам" + ПланСчетов].ПолучитьФорму(,, Новый УникальныйИдентификатор);
			ИначеЕсли ФормироватьСверкаДанныхБУ_НУ Тогда
				ФормаРасшифровка = Отчеты["СверкаДанныхБУ_НУ" ].ПолучитьФорму(,, Новый УникальныйИдентификатор);
				ФормаРасшифровка.ПоСубсчетам = Истина;				
			КонецЕсли;
			
			Для каждого Отбор из МассивПолей Цикл
				Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных")
					И  Отбор.Поле = "СтруктурноеПодразделение" тогда
					Отбор.Поле = "Подразделение";
				КонецЕсли;	
			КонецЦикла;
			
			ФормаРасшифровка.РежимРасшифровки = Истина;
						
			Попытка
				Если Не ЗначениеЗаполнено(ФормаРасшифровка.Счет) Тогда 
					ФормаРасшифровка.Счет = Счет;
				КонецЕсли;
			Исключение
				ЕстьСчет = Ложь;
			КонецПопытки;
			
			ГруппировкаПоОрганизации 	= Неопределено;
			ГруппировкаПоПодразделению 	= Неопределено;
			
			СписокПолейОтборов = Новый Массив;
			Для каждого Отбор из МассивПолей Цикл
				Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") тогда
					Если Отбор.Значение = NULL тогда
						Продолжить;
					КонецЕсли;
					Если Отбор.Поле = "Счет" И ((ИдентификаторОбъекта = ("ОтчетОбъект.АнализСчета" + ПланСчетов)) ИЛИ (ИдентификаторОбъекта = ("ОтчетОбъект.ОборотыСчета" + ПланСчетов))) Тогда
						ЗначениеСчет = ?(Счет.Уровень() > ФормаОтчета.Счет.Уровень(), Счет, ФормаОтчета.Счет); 
						Если БухТипРесурса <> Неопределено И ФормироватьОтчетПоПроводкам Тогда
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.Поле + БухТипРесурса, ЗначениеСчет, ВидСравненияКомпоновкиДанных.ВИерархии);	
							Если БухТипРесурса = "Дт" Тогда
								ТиповыеОтчеты.УстановитьПараметр(ФормаРасшифровка.КомпоновщикНастроек, "ВыводитьКт", Ложь);
							ИначеЕсли БухТипРесурса = "Кт" Тогда
								ТиповыеОтчеты.УстановитьПараметр(ФормаРасшифровка.КомпоновщикНастроек, "ВыводитьДт", Ложь);
							КонецЕсли;
						Иначе
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.Поле, ЗначениеСчет, ВидСравненияКомпоновкиДанных.ВИерархии);	
						КонецЕсли;
					ИначеЕсли (Отбор.Поле = "Счет" ИЛИ Отбор.Поле = "КорСчет") И Не ЕстьСчет Тогда
						Если Отбор.Поле = "КорСчет" И (Не ПустаяСтрока(БухТипРесурса))
							И (БухТипРесурса = "Дт" ИЛИ БухТипРесурса = "Кт") И ФормироватьОтчетПоПроводкам Тогда
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "Счет" + ?(БухТипРесурса = "Дт", "Кт", "Дт"), Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);	
						Иначе
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.Поле, Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);		
						КонецЕсли;
					ИначеЕсли Отбор.Поле = "Счет" И ЕстьСчет Тогда	
					ИначеЕсли Найти(Отбор.Поле, "Субконто") = 1 тогда
						Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконтоТиповой"
							ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконтоНалоговый" Тогда
							Если Счет <> Неопределено Тогда 
								ИндексСубконто = Сред(Отбор.Поле, 9, 1); 
								ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
								ИндексСубконтоОтчет = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто").НомерСтроки;
								ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "Субконто" + ИндексСубконтоОтчет, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
							Иначе
								ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.Поле, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
								ИндексСубконто = Число(Сред(Отбор.Поле, 9));
								ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "Вид" + Отбор.Поле, ОтчетОбъект.СписокВидовСубконто[ИндексСубконто - 1].Значение);
							КонецЕсли;
							ДобавитьОтборПоВидСубконто = Ложь;
						ИначеЕсли (ИдентификаторОбъекта = ("ОтчетОбъект.АнализСубконто" + ПланСчетов)) И ФормироватьКарточкуСчета Тогда
							ИндексСубконто = Сред(Отбор.Поле, 9, 1); 
							ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
							НайденнаяСтрока = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
							Если НайденнаяСтрока <> Неопределено Тогда
								ИндексСубконтоОтчет = НайденнаяСтрока.НомерСтроки;
								ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, СтрЗаменить(Строка(Отбор.Поле), "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет), Отбор.Значение);
							КонецЕсли;
						ИначеЕсли ((ИдентификаторОбъекта = ("ОтчетОбъект.АнализСчета" + ПланСчетов)) ИЛИ (ИдентификаторОбъекта = ("ОтчетОбъект.ОборотыСчета" + ПланСчетов)))
								И (Не ПустаяСтрока(БухТипРесурса)) И (БухТипРесурса = "Дт" ИЛИ БухТипРесурса = "Кт") И ФормироватьОтчетПоПроводкам Тогда
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, СтрЗаменить(Отбор.Поле, "Субконто", "Субконто" + БухТипРесурса), Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));	
						Иначе
							ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Сред(Отбор.Поле, ПозицияСубконто, СтрДлина(Отбор.Поле) - ПозицияСубконто + 1), Отбор.Значение);
						КонецЕсли;
						СписокПолейОтборов.Добавить(Отбор.Поле);
					ИначеЕсли Найти(Отбор.Поле, "КорСубконто") = 1 тогда
						Если ИдентификаторОбъекта = ("ОтчетОбъект.ОборотыМеждуСубконто" + ПланСчетов) Тогда
							Если КорСчет <> Неопределено Тогда
								ИндексКорСубконто = Сред(Отбор.Поле, 12, 1); 
								ПозицияКорСубконто = Найти(Отбор.Поле, "КорСубконто");
								ИндексКорСубконтоОтчет = КорСчет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовКорСубконто[Число(ИндексКорСубконто) - 1].Значение, "ВидСубконто").НомерСтроки;
								ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "КорСубконто" + ИндексКорСубконтоОтчет, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));	
							Иначе
								ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.Поле, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
								ИндексСубконто = Число(Сред(Отбор.Поле, 12));
								ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "Вид" + Отбор.Поле, ОтчетОбъект.СписокВидовКорСубконто[ИндексСубконто - 1].Значение);
							КонецЕсли;
							ДобавитьОтборПоВидКорСубконто = Ложь;
						Иначе
							ПозицияСубконто = Найти(Отбор.Поле, "КорСубконто");
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Сред(Отбор.Поле, ПозицияСубконто, СтрДлина(Отбор.Поле) - ПозицияСубконто + 1), Отбор.Значение);
						КонецЕсли;
					ИначеЕсли Отбор.Поле = "Подразделение" тогда
						ГруппировкаПоПодразделению = Отбор.Значение;
						Если ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений() Тогда
							ФормаРасшифровка.мСписокПодразделений.Очистить();
							ФормаРасшифровка.мСписокПодразделений.Добавить(Отбор.Значение, ?(ЗначениеЗаполнено(Отбор.Значение), "", "Головное подразделение"));
							ФормаРасшифровка.ПредставлениеСпискаПодразделений 	= РаботаСДиалогами.ВыгрузитьСписокВСтроку(ФормаРасшифровка.мСписокПодразделений);
						Иначе
							Если (ИдентификаторОбъекта = ("ОтчетОбъект.АнализСчета" + ПланСчетов)) ИЛИ (ИдентификаторОбъекта = ("ОтчетОбъект.ОборотыСчета" + ПланСчетов))
								И (Не ПустаяСтрока(БухТипРесурса)) И (БухТипРесурса = "Дт" ИЛИ БухТипРесурса = "Кт") Тогда
								ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.Поле + БухТипРесурса, Отбор.Значение);
							Иначе
								ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.Поле, Отбор.Значение);
							КонецЕсли;
						КонецЕсли;
						ЕстьПодразделение = Истина;
					ИначеЕсли Отбор.Поле = "Организация" Тогда
						ГруппировкаПоОрганизации = Отбор.Значение;
						ФормаРасшифровка.мСписокСтруктурныхЕдиниц.Очистить();
						ФормаРасшифровка.мСписокСтруктурныхЕдиниц.Добавить(Отбор.Значение);
						ФормаРасшифровка.ПредставлениеСпискаОрганизаций 	= РаботаСДиалогами.ВыгрузитьСписокВСтроку(ФормаРасшифровка.мСписокСтруктурныхЕдиниц);
					ИначеЕсли Отбор.Поле = "Показатель" Тогда 
						Показатель = Отбор.Значение;
					ИначеЕсли Отбор.Поле = "Период" ИЛИ Отбор.Поле = "Регистратор" Тогда 
					Иначе
						Если Отбор.Иерархия Тогда
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.Поле, Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);
						Иначе
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.Поле, Отбор.Значение);
						КонецЕсли;
					КонецЕсли;	
				ИначеЕсли ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					Если СписокПолейОтборов.Найти(Строка(Отбор.ЛевоеЗначение)) = Неопределено Тогда
						Если Найти(Отбор.ЛевоеЗначение, "Субконто") = 1 И (ИдентификаторОбъекта = ("ОтчетОбъект.АнализСубконто" + ПланСчетов)) И ФормироватьКарточкуСчета Тогда
							ИндексСубконто = Сред(Отбор.ЛевоеЗначение, 9, 1); 
							ПозицияСубконто = Найти(Отбор.ЛевоеЗначение, "Субконто");
							НайденнаяСтрока = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
							Если НайденнаяСтрока <> Неопределено Тогда
								ИндексСубконтоОтчет = НайденнаяСтрока.НомерСтроки;
								ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, СтрЗаменить(Строка(Отбор.ЛевоеЗначение), "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет), Отбор.ПравоеЗначение, Отбор.ВидСравнения);
							КонецЕсли;
						ИначеЕсли Отбор.Представление = "###ОтборПоОрганизации###" Тогда
							ФормаРасшифровка.мСписокСтруктурныхЕдиниц          		= Отбор.ПравоеЗначение;
							ФормаРасшифровка.ПредставлениеСпискаОрганизаций		 	= РаботаСДиалогами.ВыгрузитьСписокВСтроку(Отбор.ПравоеЗначение);
						ИначеЕсли Отбор.Представление = "###ОтборПоВидуУчета###" Тогда
							ФормаРасшифровка.ВидУчета          		= Отбор.ПравоеЗначение;
						ИначеЕсли Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") И ЕстьПодразделение Тогда
						ИначеЕсли Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") 
							И Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
							И ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений() Тогда
							ФормаРасшифровка.Подразделение = Отбор.ПравоеЗначение;
						Иначе
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.ЛевоеЗначение, Отбор.ПравоеЗначение, Отбор.ВидСравнения);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					Если Отбор.Представление = "###ОтборПоОрганизации###" Тогда
						
						ПустоеДеревоСЕ = СформироватьДеревоСЕ();
						
						Для Каждого ЭлементОтбораИЛИ Из Отбор.Элементы Цикл
							
							Подразделения = Новый СписокЗначений;
							
							ПодразделениеДобавлено = НЕ ГруппировкаПоПодразделению <> Неопределено;
							
							Для Каждого ЭлементотбораИ Из ЭлементОтбораИЛИ.Элементы Цикл
								
								Если ТипЗнч(ЭлементотбораИ) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
									Если ЭлементотбораИ.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда

										Организация = ЭлементотбораИ.ПравоеЗначение;
									ИначеЕсли ЭлементотбораИ.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") Тогда 
										
										ПодразделениеДобавлено = Истина;
										
										Если (ГруппировкаПоПодразделению <> Неопределено) Тогда
											Подразделения.Очистить();
											Подразделения.Добавить(ГруппировкаПоПодразделению);							
											Продолжить;
										КонецЕсли;
										
										Если ЭлементотбораИ.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда 
											
											Подразделения.Добавить(ЭлементотбораИ.ПравоеЗначение);
											
										ИначеЕсли ЭлементотбораИ.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда 
											
											Подразделения = ЭлементотбораИ.ПравоеЗначение;
											
										КонецЕсли;
										
									КонецЕсли;
								
								// возможна группа элементов отбора ИЛИ с элементами "ПодразделениеДт" и "ПодразделениеКт"	
								ИначеЕсли ТипЗнч(ЭлементотбораИ) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
								
									ЭлементотбораИ_ИЛИ = ЭлементотбораИ.Элементы[0];
									
									Если ТипЗнч(ЭлементотбораИ_ИЛИ) = Тип("ЭлементОтбораКомпоновкиДанных")
										И (ЭлементотбораИ_ИЛИ.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодразделениеДт")
										ИЛИ ЭлементотбораИ_ИЛИ.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодразделениеКт")) Тогда
									
										ПодразделениеДобавлено = Истина;
										Подразделения = ЭлементотбораИ_ИЛИ.ПравоеЗначение;
									
									КонецЕсли;
								
								КонецЕсли;
								
								
							КонецЦикла;
							
							Если ГруппировкаПоПодразделению <> Неопределено И НЕ ПодразделениеДобавлено Тогда
								Подразделения.Очистить();
								Подразделения.Добавить(ГруппировкаПоПодразделению);							
							КонецЕсли;
							
							Если (ГруппировкаПоОрганизации <> Неопределено) И (ГруппировкаПоОрганизации <> Организация) Тогда 
								Продолжить;
							КонецЕсли;                                             							
														
							ПараметрыОтбораСЕ = Новый Структура;
							ПараметрыОтбораСЕ.Вставить("СтруктурнаяЕдиница", Организация);
							ПараметрыОтбораСЕ.Вставить("ЭтоГруппа", Ложь);
							
							НайденныеСтроки = ПустоеДеревоСЕ.Строки.НайтиСтроки(ПараметрыОтбораСЕ, Истина);               
							НайденныеСтроки[0].Пометка = Истина;
							Если (ГруппировкаПоОрганизации = Неопределено) Тогда 
								ФормаРасшифровка.мСписокСтруктурныхЕдиниц.Добавить(НайденныеСтроки[0].СтруктурнаяЕдиница);
							КонецЕсли;
							
							
							Для Каждого Подразделение Из Подразделения Цикл 
								
								Если (ГруппировкаПоПодразделению = Неопределено) Тогда
									ФормаРасшифровка.мСписокПодразделений.Добавить(Подразделение.Значение, ?(ЗначениеЗаполнено(Подразделение.Значение), "", "Головное подразделение"));
								КонецЕсли;
								ВыставитьОтметкиСЕ(Организация, Подразделение.Значение, ПустоеДеревоСЕ);							
								
							КонецЦикла;
							
						КонецЦикла;
						
						ФормаРасшифровка.ПредставлениеСпискаОрганизаций 	= РаботаСДиалогами.ВыгрузитьСписокВСтроку(ФормаРасшифровка.мСписокСтруктурныхЕдиниц);
						ФормаРасшифровка.ПредставлениеСпискаПодразделений 	= РаботаСДиалогами.ВыгрузитьСписокВСтроку(ФормаРасшифровка.мСписокПодразделений);
						ФормаРасшифровка.мДеревоСтруктурныхЕдиниц = ПустоеДеревоСЕ;
						
					КонецЕсли;				
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ИдентификаторОбъекта = ("ОтчетОбъект.ОборотыМеждуСубконто" + ПланСчетов) Тогда
				Если ДобавитьОтборПоВидСубконто Тогда
					Индекс = 1;
					Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовСубконто Цикл
						Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "ВидСубконто" + Индекс, ВидСубконто.Значение);
							Индекс = Индекс + 1;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если ДобавитьОтборПоВидКорСубконто Тогда
					Индекс = 1;
					Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовКорСубконто Цикл
						Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "ВидКорСубконто" + Индекс, ВидСубконто.Значение);
							Индекс = Индекс + 1;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			/////////////////////////////////////////////////
			
			Если Период <> Неопределено Тогда
				ФормаРасшифровка.НачалоПериода = Период;
				ФормаРасшифровка.КонецПериода  = СтандартныеОтчеты.КонецПериода(Период, ОтчетОбъект.Периодичность);
			Иначе
				ФормаРасшифровка.НачалоПериода = ОтчетОбъект.НачалоПериода;
				ФормаРасшифровка.КонецПериода  = ОтчетОбъект.КонецПериода;
			КонецЕсли;
			
			ФормаРасшифровка.Настроить();
			
			Если ФормироватьСверкаДанныхБУ_НУ Тогда
				Если ФормаРасшифровка.ДанныеОтчета.ГруппировкаДоп.Найти(Новый ПолеКомпоновкиДанных(ПолеДопГруппировкиРасшифровки), "Поле") = Неопределено Тогда
					НоваяГруппировка = ФормаРасшифровка.ДанныеОтчета.ГруппировкаДоп.Добавить();
					НоваяГруппировка.Использование = Истина;
					НоваяГруппировка.Поле = Новый ПолеКомпоновкиДанных(ПолеДопГруппировкиРасшифровки);
					НоваяГруппировка.Представление = ПолеДопГруппировкиРасшифровки;
				КонецЕсли;	
			КонецЕсли;	
			
			// Настройка показателей
			Для Каждого ЭлементСтруктуры Из ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета Цикл
				ЭлементСтруктуры.Значение.Значение = Ложь;
			КонецЦикла;
			Если УстановитьВсеПоказатели Тогда
				Для Каждого ЭлементСтруктуры Из ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета Цикл
					Если ЭлементСтруктуры.Значение.Использование Тогда
						Если ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета.Свойство(ЭлементСтруктуры.Ключ) Тогда
							ЭлементСтруктуры.Значение.Значение = ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета[ЭлементСтруктуры.Ключ].Значение;
						КонецЕсли;	
						// В отчете Сверка данных БУ и НУ показатели НУ имеют префикс
						Если ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета.Свойство("НУ" + ЭлементСтруктуры.Ключ) Тогда
							ЭлементСтруктуры.Значение.Значение = ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета["НУ" + ЭлементСтруктуры.Ключ].Значение;
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если Показатель = Неопределено Тогда
					ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета.БУ.Значение = Истина;
				Иначе
					ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета[Показатель].Значение = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ИдентификаторОбъекта = ("ОтчетОбъект.СправкаРасчетВычетовПоНалогам") Тогда
				ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета["НУ"].Значение = Истина;
				ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета["ПР"].Значение = Истина;
				ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета["ВР"].Значение = Истина;
			КонецЕсли;

			// Настройка выводимых данных
			Если ЕстьВыводимыеДанные  Тогда
				ФормаРасшифровка.СальдоНаНачалоДт 	= ФормаОтчета.СальдоНаНачалоДт;				
				ФормаРасшифровка.СальдоНаНачалоКт 	= ФормаОтчета.СальдоНаНачалоКт;				
				ФормаРасшифровка.СальдоНаНачалоИтого= ФормаОтчета.СальдоНаНачалоИтого;
				
				ФормаРасшифровка.ОборотыЗаПериодДт 		= ФормаОтчета.ОборотыЗаПериодДт;				
				ФормаРасшифровка.ОборотыЗаПериодКт		= ФормаОтчета.ОборотыЗаПериодКт;				
				ФормаРасшифровка.ОборотыЗаПериодИтого 	= ФормаОтчета.ОборотыЗаПериодИтого;
				
				ФормаРасшифровка.СальдоНаКонецДт 	= ФормаОтчета.СальдоНаКонецДт;				
				ФормаРасшифровка.СальдоНаКонецКт 	= ФормаОтчета.СальдоНаКонецКт;				
				ФормаРасшифровка.СальдоНаКонецИтого = ФормаОтчета.СальдоНаКонецИтого;				
			КонецЕсли;	
			////////////////////////////////////////////////
								
			ФормаРасшифровка.Открыть();
			ФормаРасшифровка.ОбновитьОтчет();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыставитьОтметкиСЕ(Орагнизация, СтруктурнаяЕдиница, ДеревоСЕ) Экспорт
	
	ПараметрыОтбораСЕ = Новый Структура;
	ПараметрыОтбораСЕ.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	НайденныеСтроки = ДеревоСЕ.Строки.НайтиСтроки(ПараметрыОтбораСЕ, Истина);
	Если НайденныеСтроки.Количество() > 0 Тогда 
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			Соответствует = Ложь;
			
			Если ТипЗнч(НайденнаяСтрока.СтруктурнаяЕдиница) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда 
				
				Если ЗначениеЗаполнено(НайденнаяСтрока.СтруктурнаяЕдиница) Тогда 
					Если НайденнаяСтрока.СтруктурнаяЕдиница.Владелец = Орагнизация Тогда 
						Соответствует = Истина;
					Иначе 
						Соответствует = Ложь;
					КонецЕсли;
				Иначе 
					Соответствует = НайденнаяСтрока.Родитель.СтруктурнаяЕдиница = Орагнизация
				КонецЕсли;			
				
			Иначе 
		  		Соответствует = Истина;
			КонецЕсли;
            			
			Если Соответствует Тогда 
				НайденнаяСтрока.Пометка = Истина;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьДеревоСЕ(СтруктурныеЕдиницы = Неопределено, СписокСтруктурныхЕдиниц = Неопределено) Экспорт
	
	Если СтруктурныеЕдиницы = Неопределено Тогда 
		СтруктурныеЕдиницы = Новый ДеревоЗначений;
		СтруктурныеЕдиницы.Колонки.Добавить("Пометка", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1, 0));
		СтруктурныеЕдиницы.Колонки.Добавить("Организация" );
		СтруктурныеЕдиницы.Колонки.Добавить("СтруктурнаяЕдиница");
		СтруктурныеЕдиницы.Колонки.Добавить("ЭтоГруппа" );
	КонецЕсли;
	
	//составим список структурных единиц
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	1 КАК ВидСтроки,
	               |	Организации.Ссылка КАК СтруктурнаяЕдиница,
	               |	NULL КАК ВладелецСтруктурнойЕдиницы,
	               |	Организации.ГоловнаяОрганизация КАК РодительСтруктурнойЕдиницы,
	               |	Организации.Наименование КАК ПолеДляСортировки
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВЫБОР
	               |		КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |				ИЛИ Организации.Ссылка = Организации.ГоловнаяОрганизация
	               |			ТОГДА 1
	               |		ИНАЧЕ 2
	               |	КОНЕЦ,
	               |	ПолеДляСортировки";
	
	
	// соответствие для хранения ссылок на родительские уровни
	СоответствиеРодительскиеСтроки = Новый Соответствие();
	
	// заполняем дерево структурных единиц
	// при этом для того, чтобы точно понимать действие пользователя при выборе головных структурных подразделений
	// для таких структурных единиц создаем ветку-группу, внутри которой ветку-элемент (по образцу работы платформы
	// в режиме ИТОГИ ПО ИЕРАРХИИ)
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РодительскаяСтрока = СтруктурныеЕдиницы; // по умолчанию считаем, что добавляем на самый верхний уровень
	
		Если ЗначениеЗаполнено(Выборка.ВладелецСтруктурнойЕдиницы) Тогда
			
			РодительскаяСтрока = СоответствиеРодительскиеСтроки[Выборка.ВладелецСтруктурнойЕдиницы];

			Если РодительскаяСтрока = Неопределено Тогда
				// добавляем организацию - владельца
				СтрокаДерева = СтруктурныеЕдиницы.Строки.Добавить();
				
				СтрокаДерева.СтруктурнаяЕдиница = Выборка.ВладелецСтруктурнойЕдиницы;
				СтрокаДерева.ЭтоГруппа 		= Истина;
				СтрокаДерева.Организация 	= Истина;
				
				СоответствиеРодительскиеСтроки.Вставить(Выборка.ВладелецСтруктурнойЕдиницы, СтрокаДерева);
				РодительскаяСтрока = СтрокаДерева;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.РодительСтруктурнойЕдиницы) Тогда
		
			Если СоответствиеРодительскиеСтроки[Выборка.РодительСтруктурнойЕдиницы] = Неопределено Тогда
				// добавим подразделение - родителя
				СтрокаДерева = РодительскаяСтрока.Строки.Добавить();
				
				СтрокаДерева.СтруктурнаяЕдиница = Выборка.РодительСтруктурнойЕдиницы;
				СтрокаДерева.ЭтоГруппа 		= Истина;
				СтрокаДерева.Организация 	= Истина;
				
				СоответствиеРодительскиеСтроки.Вставить(Выборка.РодительСтруктурнойЕдиницы, СтрокаДерева);
				РодительскаяСтрока = СтрокаДерева;
			Иначе
				РодительскаяСтрока = СоответствиеРодительскиеСтроки[Выборка.РодительСтруктурнойЕдиницы];
			КонецЕсли;
		
		КонецЕсли;
	
		// добавляем саму структурную единицу, причем если уровень-группа с такой структурной единицей
		// уже есть в дереве, то добавляем именно в этот уровень
		СоздаватьДваУровня = Истина;
		Если СоответствиеРодительскиеСтроки[Выборка.СтруктурнаяЕдиница] <> Неопределено Тогда
			РодительскаяСтрока = СоответствиеРодительскиеСтроки[Выборка.СтруктурнаяЕдиница];
			СоздаватьДваУровня = Ложь;
		КонецЕсли;
		
		СтрокаДерева = РодительскаяСтрока.Строки.Добавить();
		
		СтрокаДерева.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		СтрокаДерева.ЭтоГруппа = ?(СоздаватьДваУровня, Истина, Ложь);
		СтрокаДерева.Организация = Истина;
		
		Если СоответствиеРодительскиеСтроки[Выборка.СтруктурнаяЕдиница] = Неопределено Тогда
			СоответствиеРодительскиеСтроки.Вставить(Выборка.СтруктурнаяЕдиница, СтрокаДерева);
		КонецЕсли;
		
		Если СоздаватьДваУровня Тогда
			СтрокаДерева = СтрокаДерева.Строки.Добавить();
			
			СтрокаДерева.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
			СтрокаДерева.ЭтоГруппа 		= Ложь;
			СтрокаДерева.Организация 	= Истина;
		КонецЕсли;
		
	КонецЦикла;

	// для тех структурных единиц, которые не имеют различных подчиненных, оставим только один уровень
	Стек = Новый Массив();
	Стек.Добавить(СтруктурныеЕдиницы);	
	ПервыйШагЦикла = Истина;
	Пока Стек.Количество() > 0 Цикл
		ИндексЭлемента = Стек.Количество() - 1;
		РодительскаяСтрока = Стек[ИндексЭлемента];
		Стек.Удалить(ИндексЭлемента);
		Если Не ПервыйШагЦикла 
				И РодительскаяСтрока.Строки.Количество() = 1 
				И РодительскаяСтрока.СтруктурнаяЕдиница = РодительскаяСтрока.Строки[0].СтруктурнаяЕдиница Тогда
			// удалим лишную дочерную строку, т.к. она полностью соответствует родительской
			РодительскаяСтрока.ЭтоГруппа = Ложь;
			РодительскаяСтрока.Строки.Удалить(0);
		Иначе
			Для Каждого СтрокаДерева Из РодительскаяСтрока.Строки Цикл
				Стек.Добавить(СтрокаДерева);
			КонецЦикла;
		КонецЕсли;
		ПервыйШагЦикла = Ложь;
	КонецЦикла;
	
	//Добавим если нужно дерево подразделений
	Если Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить() Тогда 
		ДобавитьВДеревоСтруктурныеПодразделения(СтруктурныеЕдиницы)
	КонецЕсли;	
	
	Если СписокСтруктурныхЕдиниц <> Неопределено Тогда 
		// установим отметки возле структурных подразделений, сохраненных в СохраненныйСписок
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("СтруктурнаяЕдиница");
		СтруктураПоиска.Вставить("ЭтоГруппа", Ложь);
		
		Для Каждого ЭлементСписка Из СписокСтруктурныхЕдиниц Цикл
			СтруктураПоиска.СтруктурнаяЕдиница = ЭлементСписка.Значение;
			НайденныеСтроки = СтруктурныеЕдиницы.Строки.НайтиСтроки(СтруктураПоиска, Истина);
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаДерева = НайденныеСтроки[0];
				СтрокаДерева.Пометка = 1;
				УстановитьПометкиРодителей(СтрокаДерева);
			КонецЕсли;
		КонецЦикла; 		
	КонецЕсли;
	
	Возврат СтруктурныеЕдиницы;

КонецФункции

// Устанавливает состояние пометки у родительских строк строки дерева значений
// в зависимости от пометки текущей строки
//
// Параметры:
//  ТекСтрока      - Строка дерева значений
// 
Процедура УстановитьПометкиРодителей(ТекСтрока)

	Родитель = ТекСтрока.Родитель;
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ТекСостояние		= Родитель.Пометка;

	НайденыВключенные	= Ложь;
	НайденыВыключенные	= Ложь;

	Для каждого Строка из Родитель.Строки Цикл
		
		Если Строка.Пометка = 0 Тогда
			НайденыВыключенные	= Истина;
		ИначеЕсли Строка.Пометка = 1 Тогда
			НайденыВключенные	= Истина;
		ИначеЕсли Строка.Пометка = 2 Тогда
			НайденыВыключенные	= Истина;
			НайденыВключенные	= Истина;						
		КонецЕсли; 
		
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	Если НайденыВключенные И (Не НайденыВыключенные) И Родитель.Организация Тогда
		Пометка = 1;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Пометка = 2;
	ИначеЕсли НайденыВключенные И Родитель.Организация Тогда 
		Пометка = 1;
	КонецЕсли;

	Если (Пометка = ТекСостояние) Или (Пометка = Неопределено) Тогда
		Возврат;
	Иначе
		Родитель.Пометка = Пометка;
		УстановитьПометкиРодителей(Родитель);
	КонецЕсли; 
	
КонецПроцедуры // УстановитьПометкиРодителей()

//Процедура преднозначена для добавления строки в дерево значений
//которое формируется по подразделениям
Функция ДобавитьСтрокуВДерево(ДеревоПодразделений, Уровень, ДобавляемоеЗначение, ПереченьЗначений)
	
	//Проверяем есть ли у данного подразделения родитель
	Если ЗначениеЗаполнено(ДобавляемоеЗначение.ПодразделениеВладелец) Тогда
		
		Если ДеревоПодразделений.Строки.Найти(ДобавляемоеЗначение.ПодразделениеВладелец, , Истина) = Неопределено Тогда 
			//Подразделение родитель не найдено в дереве сначала добавим его.
			Если ПереченьЗначений.Найти(ДобавляемоеЗначение.ПодразделениеВладелец, "Подразделение") <> Неопределено Тогда 
				НайденныйУровень = ДобавитьСтрокуВДерево(ДеревоПодразделений, Уровень, ПереченьЗначений.Найти(ДобавляемоеЗначение.ПодразделениеВладелец, "Подразделение"), ПереченьЗначений);
			Иначе 
				НайденныйУровень = Уровень;
			КонецЕсли;
			
			Если ТипЗнч(НайденныйУровень) = Тип("СтрокаДереваЗначений") Тогда
                НоваяСтрока = НайденныйУровень.Строки.Добавить();       
			Иначе
				НоваяСтрока = НайденныйУровень.Добавить();       
			КонецЕсли;			
			
			НоваяСтрока.СтруктурнаяЕдиница 	= ДобавляемоеЗначение.Подразделение;
			НоваяСтрока.ОрагнизацяиВладелец = ДобавляемоеЗначение.Организация;	
			НоваяСтрока.ЭтоГруппа = Ложь;
			НоваяСтрока.Организация = Ложь;
		Иначе 
			//Подразделение родитель найдено, добавим к нему текущее подразделение.
			НоваяСтрока = ДеревоПодразделений.Строки.Найти(ДобавляемоеЗначение.ПодразделениеВладелец, , Истина).Строки.Добавить();
			НоваяСтрока.СтруктурнаяЕдиница 	= ДобавляемоеЗначение.Подразделение;
			НоваяСтрока.ОрагнизацяиВладелец = ДобавляемоеЗначение.Организация;	
			НоваяСтрока.ЭтоГруппа = Ложь;
			НоваяСтрока.Организация = Ложь;
		КонецЕсли;
		
	Иначе
		//У подразделения нет родителя, просто добавим его в дерево.
		НоваяСтрока = Уровень.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница 	= ДобавляемоеЗначение.Подразделение;
		НоваяСтрока.ОрагнизацяиВладелец = ДобавляемоеЗначение.Организация;	
		НоваяСтрока.ЭтоГруппа = Ложь;
		НоваяСтрока.Организация = Ложь;
		
	КонецЕсли;
	
	Возврат НоваяСтрока;		
	
КонецФункции //ДобавитьСтрокуВДерево

//Процедура предназначена для объединения деревьев, организаций и подразделений
//
Функция ОбъединитьСтрокиДеревьев(УровеньПриемник, СтрокаПодстановки)
	
	НоваяСтрока = УровеньПриемник.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодстановки);
	
	Для Каждого Подуровень Из СтрокаПодстановки.Строки Цикл 
		ОбъединитьСтрокиДеревьев(НоваяСтрока, Подуровень);
	КонецЦикла;		
	
КонецФункции //ОбъединитьСтрокиДеревьев

//Процедура преднозначена для добавления к дереву подразделений
//уровней подразделений
Процедура ДобавитьВДеревоСтруктурныеПодразделения(СтруктурныеЕдиницы) Экспорт
	
	//Построим дерево подразделений
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПодразделенияОрганизаций.Ссылка КАК Подразделение,
	               |	ПодразделенияОрганизаций.Владелец КАК Организация,
	               |	ПодразделенияОрганизаций.Родитель КАК ПодразделениеВладелец
	               |ИЗ
	               |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	               |ГДЕ
	               |	ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением = ИСТИНА";
				   
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	ДеревоПодразделений = СтруктурныеЕдиницы.Скопировать();
	ДеревоПодразделений.Строки.Очистить();
	ДеревоПодразделений.Колонки.Добавить("ОрагнизацяиВладелец");
	
	ДоступнаГоловноеПодразделение = Истина;
	
	Если ТиповыеОтчеты.ДобавитьОграничениеПоПодразделениям() Тогда 
		ДоступныеПодразделения = СтандартныеОтчеты.ПолучитьСписокДоступныхПодразделений();
		ДоступнаГоловноеПодразделение = ?(ДоступныеПодразделения.Найти(Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), "Подразделение") = Неопределено, Ложь, Истина);
		СтандартныеОтчеты.РеструктуризироватьДанныеПодразделений(Выборка, ДоступныеПодразделения);
	КонецЕсли;
		
	Для Каждого СтрокаТЗ Из Выборка Цикл
		Если ДеревоПодразделений.Строки.Найти(СтрокаТЗ.Подразделение, , Истина) = Неопределено Тогда 
			ДобавитьСтрокуВДерево(ДеревоПодразделений, ДеревоПодразделений.Строки, СтрокаТЗ, Выборка);	
		КонецЕсли;			
	КонецЦикла;		
	
	//Добавим дерево подразделений к дереву организаций
	Для Каждого СтрокаВерхнегоУровня Из ДеревоПодразделений.Строки Цикл 
		
		ПараметрыДляОтбора = Новый Структура;
		ПараметрыДляОтбора.Вставить("СтруктурнаяЕдиница", СтрокаВерхнегоУровня.ОрагнизацяиВладелец);
		ПараметрыДляОтбора.Вставить("ЭтоГруппа", Ложь);
				
		СтрокаОрганизации = СтруктурныеЕдиницы.Строки.НайтиСтроки(ПараметрыДляОтбора, Истина);
		
		//Вставим подразделение являющееся головным
		Если СтрокаОрганизации.Количество() > 0 Тогда 
			
			Если СтрокаОрганизации[0].Строки.Количество() = 0
				И ДоступнаГоловноеПодразделение Тогда
				НоваяСтрока = СтрокаОрганизации[0].Строки.Добавить();
				НоваяСтрока.СтруктурнаяЕдиница = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
				НоваяСтрока.ЭтоГруппа 	= Ложь;
				НоваяСтрока.Организация = Ложь;
			КонецЕсли;			
			
			ОбъединитьСтрокиДеревьев(СтрокаОрганизации[0], СтрокаВерхнегоУровня);
			
		КонецЕсли;
		
	КонецЦикла;  	
	
КонецПроцедуры //ДобавитьВДеревоСтруктурныеПодразделения

Процедура РеструктуризироватьДанныеПодразделений(ДанныеПоПодразделениям, ДоступныеПодразделения) Экспорт
	
	МассивНаУдаление = Новый Массив;
	
	Для Каждого СтрокаТЗ Из ДанныеПоПодразделениям Цикл 
		Если ДоступныеПодразделения.Найти(СтрокаТЗ.Подразделение, "Подразделение") = Неопределено Тогда 
			ОтборПодр = Новый Структура();
			ОтборПодр.Вставить("ПодразделениеВладелец", СтрокаТЗ.Подразделение);
			Строки = ДанныеПоПодразделениям.НайтиСтроки(ОтборПодр);
			Для Каждого Строка Из Строки Цикл 
				Строка.ПодразделениеВладелец = СтрокаТЗ.ПодразделениеВладелец;
			КонецЦикла;			
			МассивНаУдаление.Добавить(СтрокаТЗ); 						
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЗначениеНаУдаление Из МассивНаУдаление Цикл 
		ДанныеПоПодразделениям.Удалить(ЗначениеНаУдаление);
	КонецЦикла;
	
КонецПроцедуры


Процедура ПолеРасшифровкаОбработкаРасшифровки(ОтчетОбъект, ФормаОтчета, Расшифровка, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
		
	МассивПолей = ТиповыеОтчеты.ПолучитьМассивПолейРасшифровки(Расшифровка, ФормаОтчета.ДанныеРасшифровкиПромежуточнаяРасшифровка);
	Счет = Неопределено;
	ЗначенияСубконто    = Новый Массив;
	ЗначенияКорСубконто = Новый Массив;
	Валюта = Неопределено;
	НачалоПериодаРасшифровки = ТиповыеОтчеты.ПолучитьПараметр(ФормаОтчета.ДанныеРасшифровкиПромежуточнаяРасшифровка, "НачалоПериода").Значение;
	КонецПериодаРасшифровки  = ТиповыеОтчеты.ПолучитьПараметр(ФормаОтчета.ДанныеРасшифровкиПромежуточнаяРасшифровка, "КонецПериода").Значение;
	Для Каждого Поле Из МассивПолей Цикл
		Если ТипЗнч(Поле) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
			Если Поле.Поле = "Счет" Тогда
				Счет = Поле.Значение;
			ИначеЕсли Поле.Поле = "КорСчет" Тогда
				КорСчет = Поле.Значение;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Поле) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если Поле.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто1")
				ИЛИ Поле.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто2") Тогда
				ЗначенияСубконто.Добавить(Поле.ПравоеЗначение);
			ИначеЕсли Поле.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорСубконто1") Тогда
				ЗначенияКорСубконто.Добавить(Поле.ПравоеЗначение);
				Валюта = Поле.ПравоеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если КорСчет <> Неопределено И КорСчет <> null Тогда
		ФормаРасшифровка = Отчеты.АнализСчетаТиповой.ПолучитьФорму();
		ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "КорСчет", КорСчет);
		Для Индекс = 1 По КорСчет.ВидыСубконто.Количество() Цикл
			Для Каждого ЭлементМассива Из ЗначенияКорСубконто Цикл
				Если КорСчет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЭлементМассива)) Тогда
					ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "КорСубконто" + Индекс, ЭлементМассива, ?(ЭлементМассива.ЭтоГруппа, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		ФормаРасшифровка.ПоСубсчетамКорСчетов = Истина;
	Иначе
		ФормаРасшифровка = Отчеты.ОборотноСальдоваяВедомостьПоСчетуТиповой.ПолучитьФорму();
	КонецЕсли;
	ФормаРасшифровка.РежимРасшифровки = Истина;
	ФормаРасшифровка.НачалоПериода = НачалоПериодаРасшифровки;
	ФормаРасшифровка.КонецПериода  = КонецПериодаРасшифровки;
	ФормаРасшифровка.мСписокСтруктурныхЕдиниц = ОтчетОбъект.мСписокСтруктурныхЕдиниц;
	ФормаРасшифровка.Счет          = Счет;
	ФормаРасшифровка.Настроить();
	
	Для Индекс = 1 По Счет.ВидыСубконто.Количество() Цикл
		Для Каждого ЭлементМассива Из ЗначенияСубконто Цикл
			Если Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЭлементМассива)) Тогда
				ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "Субконто" + Индекс, ЭлементМассива, ?(ЭлементМассива.ЭтоГруппа, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
			КонецЕсли; 
		КонецЦикла;
		Если ИдентификаторОбъекта = "ОтчетОбъект.ДинамикаЗадолженностиПокупателей"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ЗадолженностьПокупателей"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотныеСредства" Тогда
			Если Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
				СписокОтбора = Новый СписокЗначений;
				СписокОтбора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
				СписокОтбора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
				ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "Субконто" + Индекс + ".ВидДоговора", СписокОтбора, ВидСравненияКомпоновкиДанных.ВСписке);
			КонецЕсли;
		ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ДинамикаЗадолженностиПоставщикам"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ЗадолженностьПоставщикам" Тогда
			Если Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
				СписокОтбора = Новый СписокЗначений;
				СписокОтбора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
				СписокОтбора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
				ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "Субконто" + Индекс + ".ВидДоговора", СписокОтбора, ВидСравненияКомпоновкиДанных.ВСписке);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ИдентификаторОбъекта = "ОтчетОбъект.ОстаткиДенежныхСредств" 
		И ТипЗнч(Валюта) = Тип("СправочникСсылка.Валюты") 
		И Валюта <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "Валюта", Валюта);
	КонецЕсли;
	ФормаРасшифровка.Открыть();
	ФормаРасшифровка.ОбновитьОтчет();
	
КонецПроцедуры

Процедура ДобавитьДиаграммуВСтандартныеОтчеты(ОтчетОбъект) Экспорт
	
	ПолеСерииДиаграммы = Неопределено;
	Для Каждого Поле Из ОтчетОбъект.ДанныеОтчета.Группировка Цикл 
		Если Поле.Использование Тогда
			ПолеСерииДиаграммы = Поле.Поле;
			Прервать;	
		КонецЕсли;
	КонецЦикла;
	
	Если ПолеСерииДиаграммы = Неопределено Тогда 
		ПолеСерииДиаграммы = "Счет";
	Иначе
		Если ОтчетОбъект.Метаданные().Реквизиты.Найти("Счет") <> Неопределено Тогда
			Если ОтчетОбъект.ПоСубсчетам Тогда
				ПолеСерииДиаграммы = "Счет";
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	
	Если ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета.РазвернутоеСальдо.Значение Тогда
		ТекстРазвернутый = "Развернутый";
	Иначе
		ТекстРазвернутый = "";
	КонецЕсли;
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("СальдоНаНачалоПериода.БУНачальный" + ТекстРазвернутый + "ОстатокДт");
	МассивПоказателей.Добавить("СальдоНаНачалоПериода.БУНачальный" + ТекстРазвернутый + "ОстатокКт");
	МассивПоказателей.Добавить("ОборотыЗаПериод.БУОборотДт");
	МассивПоказателей.Добавить("ОборотыЗаПериод.БУОборотКт");
	МассивПоказателей.Добавить("СальдоНаКонецПериода.БУКонечный" + ТекстРазвернутый + "ОстатокДт");
	МассивПоказателей.Добавить("СальдоНаКонецПериода.БУКонечный" + ТекстРазвернутый + "ОстатокКт");
	
	Если ПолеСерииДиаграммы <> Неопределено И ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета.БУ.Значение Тогда
		Для Каждого ПолеРесурсДиаграммы Из МассивПоказателей Цикл
			Диаграмма = ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ДиаграммаКомпоновкиДанных"));
			Серия = Диаграмма.Серии.Добавить();
			ПолеСерии = Серия.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеСерии.Поле = Новый ПолеКомпоновкиДанных(ПолеСерииДиаграммы);
			Если ПолеСерииДиаграммы = "Счет" Тогда
				ПолеСерии.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			КонецЕсли;
			Серия.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Серия.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			Если ОтчетОбъект.Периодичность > 0 Тогда
				Точка = Диаграмма.Точки.Добавить();
				ПолеТочки = Точка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеТочки.Поле = Новый ПолеКомпоновкиДанных(?(ОтчетОбъект.Периодичность = 2, "Регистратор", "Период"));
				
				Если ЗначениеЗаполнено(ОтчетОбъект.НачалоПериода) И ЗначениеЗаполнено(ОтчетОбъект.КонецПериода) Тогда
					ПолеТочки.ТипДополнения	= ПолучитьТипДополненияПоИнтервалу(ОтчетОбъект.Периодичность);
					ПолеТочки.НачалоПериода = ОтчетОбъект.НачалоПериода;
					ПолеТочки.КонецПериода  = ОтчетОбъект.КонецПериода;
				КонецЕсли;
				
				Точка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
				Точка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			КонецЕсли;
			
			ВыбранноеПоле = Диаграмма.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеРесурсДиаграммы);
			
			ТиповыеОтчеты.УстановитьПараметрВывода(Диаграмма, "ТипДиаграммы"                     , СтандартныеОтчеты.ПолучитьПредставлениеДиаграммы(ОтчетОбъект.ДанныеОтчета.ПредставлениеДиаграммы));
			ТиповыеОтчеты.УстановитьПараметрВывода(Диаграмма, "ТипДиаграммы.ВидПодписей"         , СтандартныеОтчеты.ПолучитьВидПодписиДиаграммы(ОтчетОбъект.ДанныеОтчета.ВидПодписиДиаграммы));
			ТиповыеОтчеты.УстановитьПараметрВывода(Диаграмма, "ТипДиаграммы.АвтоРаздвижениеСерий", АвтоРаздвижениеСерий.Максимум);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаИзмененияНастроекДиаграммы(ОтчетОбъект, Результат, ФиксацияСверху = 2, ФиксацияСлева = 0) Экспорт
	
	Если Результат.Области.Найти("Заголовок") = Неопределено Тогда
		Результат.ФиксацияСлева  = ФиксацияСлева;
		Результат.ФиксацияСверху = ФиксацияСверху;
		Возврат;
	КонецЕсли;

	ВысотаЗаголовка = Результат.Области.Заголовок.Низ;
	Если Результат.Области.Найти("Диаграмма0") <> Неопределено Тогда


		Если ОтчетОбъект.НастройкиФормы.ВыводитьДиаграмму Тогда
			Для Индекс = 0 По 5 Цикл
				Результат.Области["Диаграмма" + Индекс].Видимость = (ОтчетОбъект.ДанныеОтчета.ПоказательДиаграммы = Индекс);
			КонецЦикла;
			Результат.Области["ПустаяОбласть"].Видимость = Истина;
			
			Для Каждого Рисунок Из Результат.Рисунки Цикл
				Попытка
					Если ТипЗнч(Рисунок.Объект) = Тип("Диаграмма") Тогда
						Рисунок.Объект.ТипДиаграммы = ПолучитьПредставлениеДиаграммы(ОтчетОбъект.ДанныеОтчета.ПредставлениеДиаграммы);
						Рисунок.Объект.ВидПодписей  = ПолучитьВидПодписиДиаграммы(ОтчетОбъект.ДанныеОтчета.ВидПодписиДиаграммы);
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЦикла;
			
			Результат.ФиксацияСлева  = 0;
			Результат.ФиксацияСверху = ВысотаЗаголовка;
		Иначе	
			Для Индекс = 0 По 5 Цикл
				Результат.Области["Диаграмма" + Индекс].Видимость = Ложь;
			КонецЦикла;
			Результат.Области["ПустаяОбласть"].Видимость = Ложь;
			
			Результат.ФиксацияСлева  = ФиксацияСлева;
			Результат.ФиксацияСверху = 182 + ВысотаЗаголовка + ФиксацияСверху;
		КонецЕсли;
	Иначе
		Результат.ФиксацияСлева  = ФиксацияСлева;
		Результат.ФиксацияСверху = ВысотаЗаголовка + ФиксацияСверху;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаРезультатаОтчетаСДиаграммой(ОтчетОбъект, Результат) Экспорт
	
	ДиаграммаВыведена = Ложь;
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить("БУ Дт (нач. сальдо)");
	МассивЗаголовков.Добавить("БУ Кт (нач. сальдо)");
	МассивЗаголовков.Добавить("БУ Дт (оборот)");
	МассивЗаголовков.Добавить("БУ Кт (оборот)");
	МассивЗаголовков.Добавить("БУ Дт (кон. сальдо)");
	МассивЗаголовков.Добавить("БУ Кт (кон. сальдо)");
	
	Индекс = 0;
	Для Каждого Рисунок Из Результат.Рисунки Цикл 
		Если ТипЗнч(Рисунок.Объект) = Тип("Диаграмма") Тогда
			ДиаграммаВыведена = Истина;
			
			Рисунок.Объект.ОбластьЗаголовка.Текст = МассивЗаголовков[Индекс];
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	ВысотаЗаголовка = Результат.Области.Заголовок.Низ;
	
	Если ДиаграммаВыведена Тогда
		// Удалим пустые области между диаграммами
		Для Индекс = 1 По 5 Цикл
			Область = Результат.Область("R" + (ВысотаЗаголовка + Индекс * 30 + 1));	
			Результат.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЦикла;
		
		// Назначим имена областям-диаграммам
		Для Индекс = 0 По 5 Цикл
			Результат.Область(ВысотаЗаголовка + Индекс * 30 + 1,,ВысотаЗаголовка + (Индекс + 1) * 30).Имя = "Диаграмма" + Индекс;
		КонецЦикла;
		Результат.Область(ВысотаЗаголовка + (Индекс) * 30 + 1,,ВысотаЗаголовка + (Индекс) * 30 + 2).Имя = "ПустаяОбласть";
	КонецЕсли;
	
	// в отчетах с Периодичностью = 0 не должна работать расшифровка диаграммы
	Если ОтчетОбъект.Периодичность = 0 Тогда
		Для Каждого РисунокДиаграммы Из Результат.Рисунки Цикл
			РисунокДиаграммы.Объект.Обновление = Ложь;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ИСТОРИЕЙ
////////////////////////////////////////////////////////////////////////////////

Процедура СохранитьНастройкуДляИстории(ОтчетОбъект, ДополнительныеПоля = Неопределено) Экспорт
	
	МаксимальноеКоличествоХранимыхНастроек = 10;
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ОтчетОбъект);
	
	//Дополним структуру сохраняемых настрек значением списка организаций
	Если ДополнительныеПоля <> Неопределено Тогда 
		Для Каждого СтрокаСписка Из ДополнительныеПоля Цикл 
			СтруктураНастроек.Вставить(СтрокаСписка.Представление, СтрокаСписка.Значение);
		КонецЦикла;
	КонецЕсли;
	//-куфиб-начало
	Попытка
	Если СтруктураНастроек.Свойство("История") Тогда
		СтруктураНастроек.Удалить("История");
	КонецЕсли;
	//-куфиб-конец
	НастройкиДляИстории = XMLСтрока(Новый ХранилищеЗначения(СтруктураНастроек));
	
	Если ОтчетОбъект.История.НайтиПоЗначению(НастройкиДляИстории) = Неопределено Тогда
		Если ОтчетОбъект.История.Количество() >= МаксимальноеКоличествоХранимыхНастроек Тогда
			ОтчетОбъект.История.Удалить(МаксимальноеКоличествоХранимыхНастроек - 1);
		КонецЕсли; 
		ОтчетОбъект.История.Вставить(0, НастройкиДляИстории, ПолучитьПредставлениеНастройкиДляИстории(ОтчетОбъект));
	КонецЕсли;
	//-куфиб-начало
	Исключение
	КонецПопытки;
	//-куфиб-конец
КонецПроцедуры

Функция ПолучитьПредставлениеНастройкиДляИстории(ОтчетОбъект) Экспорт 
	
	Представление = "";
	
	Попытка 
		Представление = ОтчетОбъект.ПолучитьПредставлениеНастройкиДляИстории();
	Исключение
		
		ОсновнаяЧастьПредставления = "";
		ПредставлениеОрганизации = ПолучитьТекстОрганизация(ОтчетОбъект);
		ПредставлениеОрганизации = ?(Не ПустаяСтрока(ПредставлениеОрганизации), " ", "") + ПредставлениеОрганизации;
		
		ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
		
		Префикс = "";
		Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчетуТиповой"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчетуНалоговый"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСчетаТиповой"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСчетаНалоговый" 
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчетаТиповой"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчетаНалоговый"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчетаТиповой"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчетаНалоговый" Тогда 
			Префикс = "По счету " + ОтчетОбъект.Счет;
		КонецЕсли;
		
		Если ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконтоТиповой" 
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконтоНалоговый"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСубконтоТиповой"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСубконтоНалоговый" Тогда
			ПредставлениеСубконто = "";
			Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовСубконто Цикл
				Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
					ПредставлениеСубконто = ПредставлениеСубконто + ВидСубконто.Значение + ", ";
				КонецЕсли;
			КонецЦикла;
			ПредставлениеСубконто = Сред(ПредставлениеСубконто, 1, СтрДлина(ПредставлениеСубконто) - 2);
			Префикс = "По субконто " + ПредставлениеСубконто;	
		КонецЕсли;
		
		Если ИдентификаторОбъекта = "ОтчетОбъект.ОтчетПоПроводкам"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.СводныеПроводкиТиповой" Тогда 
			Префикс = "Проводки ";
		КонецЕсли;
		
		Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьТиповой"
			Или ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьНалоговый" Тогда 
			Префикс = "Данные ";
		КонецЕсли;
		
		Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконтоТиповой"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконтоНалоговый" Тогда
			ПредставлениеСубконто = "";
			Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовСубконто Цикл
				Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
					ПредставлениеСубконто = ПредставлениеСубконто + ВидСубконто.Значение + ", ";
				КонецЕсли;
			КонецЦикла;
			ПредставлениеСубконто = Сред(ПредставлениеСубконто, 1, СтрДлина(ПредставлениеСубконто) - 2);
			Префикс = "По субконто " + ПредставлениеСубконто;	
			ПредставлениеСубконто = "";
			Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовКорСубконто Цикл
				Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
					ПредставлениеСубконто = ПредставлениеСубконто + " Кор. " + ВидСубконто.Значение + ", ";
				КонецЕсли;
			КонецЦикла;
			ПредставлениеСубконто = Сред(ПредставлениеСубконто, 1, СтрДлина(ПредставлениеСубконто) - 2);	
			ОсновнаяЧастьПредставления = ОсновнаяЧастьПредставления + ", " + ПредставлениеСубконто;
		КонецЕсли;
		
		ОсновнаяЧастьПредставления = Префикс + ПолучитьПредставлениеПериода(ОтчетОбъект) + ПредставлениеОрганизации;
		
		СответствиеПоказателей = Новый Соответствие;
		СответствиеПоказателей.Вставить("БУ"               , ?(Найти(ИдентификаторОбъекта, "Налоговый") = 0, "БУ", "НУ"));
		СответствиеПоказателей.Вставить("ВалютнаяСумма"    , "Вал.");
		СответствиеПоказателей.Вставить("Количество"       , "Кол.");
		СответствиеПоказателей.Вставить("РазвернутоеСальдо", "Разв.");
		
		ПредставлениеПоказатели = "";
		Для Каждого Показатель Из ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета Цикл
			Если Показатель.Значение.Значение Тогда
				ПредставлениеПоказатели = ПредставлениеПоказатели + СответствиеПоказателей[Показатель.Ключ]+ ", ";
			КонецЕсли;
		КонецЦикла;
		ПредставлениеПоказатели = Сред(ПредставлениеПоказатели, 1, СтрДлина(ПредставлениеПоказатели) - 2);
		
		ПредставлениеГруппировка = "";
		Если ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконтоТиповой" 
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконтоНалоговый"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчетуТиповой" 
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчетуНалоговый"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконтоТиповой"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконтоНалоговый" 
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчетаТиповой" 
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчетаНалоговый"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчетаТиповой"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчетаНалоговый" Тогда
			Для Каждого СтрокаГруппировки Из ОтчетОбъект.ДанныеОтчета.Группировка Цикл
				Если СтрокаГруппировки.Использование Тогда
					ПредставлениеГруппировка = ПредставлениеГруппировка + СтрокаГруппировки.Представление + ?(СтрокаГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы, "", " (" + СтрокаГруппировки.ТипГруппировки + ")") + ", ";
				КонецЕсли;	
			КонецЦикла;
			ПредставлениеГруппировка = Сред(ПредставлениеГруппировка, 1, СтрДлина(ПредставлениеГруппировка) - 2);
		ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСчетаТиповой" 
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСчетаНалоговый" 
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСубконтоТиповой"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСубконтоНалоговый" Тогда
			Если ОтчетОбъект.Периодичность <> 0 Тогда
				ПредставлениеГруппировка = "обороты " + ПолучитьПредставлениеПериодичности(ОтчетОбъект.Периодичность);
			КонецЕсли;
		КонецЕсли;
		
		ПредставлениеОтбора = Строка(ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор);
		ДополнительнаяЧастьПредставления = "; " + ПредставлениеПоказатели;
		ДополнительнаяЧастьПредставления = ДополнительнаяЧастьПредставления + ?(Не ПустаяСтрока(ПредставлениеГруппировка), "; " + ПредставлениеГруппировка, ПредставлениеГруппировка);
		ДополнительнаяЧастьПредставления = ДополнительнаяЧастьПредставления + ?(Не ПустаяСтрока(ПредставлениеОтбора), "; " + ПредставлениеОтбора, ПредставлениеОтбора);
		
		Представление = СокрЛП(ОсновнаяЧастьПредставления + ДополнительнаяЧастьПредставления);
		
	КонецПопытки;
	
	Возврат Представление;
	
КонецФункции

Процедура ДействияФормыДополнительныеИстория(ФормаОтчета, Кнопка) Экспорт 
	
	ТекущееЗначениеЗакрыватьПанельПриФормированииОтчета = ФормаОтчета.НастройкиФормы.ЗакрыватьПанельПриФормированииОтчета;
	
	Индекс = Число(СтрЗаменить(Кнопка.Имя, "История", ""));
	
	СтруктураПараметров = XMLЗначение(Тип("ХранилищеЗначения"), ФормаОтчета.История[Индекс].Значение).Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ФормаОтчета.ЭтотОбъект, СтруктураПараметров);
	СтандартныеОтчеты.ВосстановитьНастройкиФормы(ФормаОтчета, Ложь);
	ФормаОтчета.ОбновитьПанельНастроек();
	ФормаОтчета.НастройкиФормы.ЗакрыватьПанельПриФормированииОтчета = ТекущееЗначениеЗакрыватьПанельПриФормированииОтчета;
	ФормаОтчета.ОбновитьОтчет();
	
КонецПроцедуры

Процедура ОбновитьКоллекциюКнопокИстории(ФормаОтчета) Экспорт
	
	МаксимальнаяДлинаПредставления = 100;
	
	ФормаОтчета.ЭлементыФормы.ДействияФормыДополнительные.Кнопки.История.Кнопки.Очистить();
	
	Индекс = 0;
	Для Каждого ЭлементИстории Из ФормаОтчета.История Цикл
		Представление = ЭлементИстории.Представление;
		
		Если СтрДлина(Представление) > МаксимальнаяДлинаПредставления Тогда
			Представление = Лев(Представление, МаксимальнаяДлинаПредставления - 3) + "...";
		КонецЕсли;
		
		Кнопка = ФормаОтчета.ЭлементыФормы.ДействияФормыДополнительные.Кнопки.История.Кнопки.Добавить("История" + Индекс, ТипКнопкиКоманднойПанели.Действие, Представление, Новый Действие("ДействияФормыДополнительныеИстория"));
		Кнопка.Пояснение = ЭлементИстории.Представление;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры	


////////////////////////////////////////////////////////////////////////////////
// процедура устанавливает отбор посторителю отчетов по параметрам
Процедура ВосстановитьОтборПостроителяОтчетовПоПараметрам(ПостроительОтчета, Знач СтрокиОтбора) Экспорт
	
	Если СтрокиОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтрокиОтбора) = Тип("Соответствие")
		ИЛИ ТипЗнч(СтрокиОтбора) = Тип("Структура") Тогда
		
		Для Каждого Строка Из СтрокиОтбора Цикл
			
			ЭлементОтбора = Неопределено;
			
			// Установим существующие элементы, добавим новые
			Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
				
				Если Строка.Ключ = ПостроительОтчета.Отбор[Инд].ПутьКДанным Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор[Инд];
				КонецЕсли;
			
			КонецЦикла;
			
			Попытка
			
				Если ЭлементОтбора = Неопределено Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(Строка.Ключ);
				КонецЕсли;
				
				Если ТипЗнч(Строка.Значение) = Тип("СписокЗначений")
					ИЛИ ТипЗнч(Строка.Значение) = Тип("Массив") ТОгда
					
					ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке;
					ЭлементОтбора.Значение = Строка.Значение;	
					ЭлементОтбора.Использование = Истина;
					
				Иначе
					ЭлементОтбора.Установить(Строка.Значение);
					
					Если Метаданные.Справочники.Содержит(Строка.Значение.Метаданные())
					   И ЗначениеЗаполнено(Строка.Значение) Тогда
						ЭлементОтбора.ВидСравнения = ВидСравнения.ВИерархии;
					Иначе
						ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
					КонецЕсли;
				   
				КонецЕсли;	
				
			Исключение
				// не смогли ограничение установить
				Продолжить;
			КонецПопытки;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(СтрокиОтбора) = Тип("ТаблицаЗначений") Тогда
		
		// переносим имя отбора из пути к данным
		Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
			
			СтрокаОтбора.Имя = СтрокаОтбора.ПутьКДанным; 
			
		КонецЦикла;
		
		УправлениеОтчетами.ЗаполнитьОтборИзТаблицыЗначений(ПостроительОтчета.Отбор, СтрокиОтбора, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

 //Функция создает по структуре параметров соответсвие
Функция СоздатьПоСтруктуреСоответствие(Знач СтруктураПараметров) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для Каждого Элемент Из СтруктураПараметров Цикл
		
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
		
	КонецЦикла;
	
	Возврат Параметры;
	
КонецФункции

// Создание копии структуры или соответствия
//
// Параментры:
//   СоотвИсх - Структура/Соответствие - Исходная структура, с которой будет создаваться копия.
//
// Возвращаемое значение:
//   Структура/Соответствие - Копия исходной структуры. Тип данных повторяет тип исходной структуры.
Функция СоздатьКопиюСоответствияСтруктуры(Знач СоответствиеИсточник) Экспорт
	
	Если СоответствиеИсточник = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	КопияСоответствия = Новый (ТипЗнч(СоответствиеИсточник));
		
	Для Каждого ЭлементОтбора Из СоответствиеИсточник Цикл
				
		КопияСоответствия.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				
	КонецЦикла;
	
	Возврат КопияСоответствия;
	
КонецФункции

//Функция формирует строку ограничений для запроса по ограничениям построителя отчетов
Функция ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, Запрос, ТекстОтбораПоВидамСубконто = неопределено) Экспорт
	
	ТекстФильтры = "";
	
	Индекс = 0;
	Для Каждого СтрокаОтбора Из ПостроительОтчета.Отбор Цикл
		
		Индекс = Индекс + 1;
		Если Не СтрокаОтбора.Использование 
			ИЛИ ПустаяСтрока(СтрокаОтбора.ПутьКДанным) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		УстановитьПараметрыЗапросаПоСтрокеПостроителяОтчета(Запрос, СтрокаОтбора, Строка(Индекс));
						
		ТекстСтрокиПоля = "";
		Если СтрокаОтбора.ВидСравнения = ВидСравнения.ВИерархии
			И СтрокаОтбора.Значение <> Неопределено Тогда
			
			МетаданныеОграничения = СтрокаОтбора.Значение.Метаданные();	
			
			ТипВыражения = "";
			
			Если Метаданные.Справочники.Содержит(МетаданныеОграничения) Тогда
				
				ТипВыражения = "Справочник."; 
				
			ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОграничения) Тогда
				
				ТипВыражения = "Документ."; 
				
			ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОграничения) Тогда
				
				ТипВыражения = "ПланВидовХарактеристик.";	
				
			ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеОграничения) Тогда
				
				ТипВыражения = "Перечисление.";	
				
			КонецЕсли;
			
			Если ТипВыражения <> "" Тогда
				
				ТекстСтрокиПоля = "Выразить(" + СтрокаОтбора.ПутьКДанным + " КАК " + ТипВыражения + МетаданныеОграничения.Имя + ")"
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекстСтрокиПоля = "" Тогда
			
			ТекстСтрокиПоля = СтрокаОтбора.ПутьКДанным;
			
		КонецЕсли;
			
		ТекстФильтры = ТекстФильтры + " И " + УправлениеОтчетами.ПолучитьСтрокуОтбора(СтрокаОтбора.ВидСравнения, "&Значение" + Индекс, 
			ТекстСтрокиПоля, "&ЗначениеС" + Индекс, "&ЗначениеПо" + Индекс, СтрокаОтбора.Значение, 
			СтрокаОтбора.ЗначениеС, СтрокаОтбора.ЗначениеПо);
				
	КонецЦикла;
	
	Если ТекстОтбораПоВидамСубконто<> неопределено Тогда
		ТекстОтбораПоВидамСубконто = УстановитьОтборНаВидыСубконтоПоПостроителюОтчета(ПостроительОтчета, ПостроительОтчета.Параметры.Счет, Запрос);
    КонецЕсли;
	
	Возврат Сред(ТекстФильтры, 3);
	
КонецФункции

//Процедура устанавливает параметры ограничения запросу из строки ограничений построителя отчета
Процедура УстановитьПараметрыЗапросаПоСтрокеПостроителяОтчета(Запрос, Знач СтрокаОтбора, Знач ПостфиксОграничения) Экспорт
	
	СтрокаПостфикса = Строка(ПостфиксОграничения);
	
	Если СтрокаОтбора.ВидСравнения = ВидСравнения.Содержит
		ИЛИ СтрокаОтбора.ВидСравнения = ВидСравнения.НеСодержит Тогда
		
		// ограничение на содержит отрабатывается отдельным образом
		// надо из значения ограничения лишние символы преобразовать и дополнить ограничение символами %%
		
		ИтоговаяСтрокаОграничения = ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СтрокаОтбора.Значение);
		
		ИтоговаяСтрокаОграничения = "%" + ИтоговаяСтрокаОграничения + "%";
		
		Запрос.УстановитьПараметр("Значение" + СтрокаПостфикса, ИтоговаяСтрокаОграничения);
		
	Иначе	
		
		Запрос.УстановитьПараметр("Значение" + СтрокаПостфикса, СтрокаОтбора.Значение);
		Запрос.УстановитьПараметр("ЗначениеС" + СтрокаПостфикса, СтрокаОтбора.ЗначениеС);
		Запрос.УстановитьПараметр("ЗначениеПо" + СтрокаПостфикса, СтрокаОтбора.ЗначениеПо);	
	
	КонецЕсли;
	
КонецПроцедуры

//Функция устанавливает фильтр на виды субконто в параметрах к виртуальной таблице, если это возможно.
//Т.е. установит новый параметр ВидыСубконто и вернет текст для подстановки в текст запроса
Функция УстановитьОтборНаВидыСубконтоПоПостроителюОтчета(ПостроительОтчета, Счет, Запрос) Экспорт
	
	КолСубкнотоНаСчету = Счет.ВидыСубконто.Количество();
	Номер = 1;
	ПропущеноИзмерение = ложь;
	ПропущенОтбор = ложь;
	НеБылоОтбора = ложь;
	ОтборЕсть = Ложь;
	ИспользоватьОтборПоВидамСубконто = Истина;
	Измерения = Новый Соответствие;
	Для каждого Измерение из ПостроительОтчета.ИзмеренияСтроки Цикл
		Если Не Измерение.ПутьКДанным = "Подразделение" Тогда
			Если Найти(Измерение.ПутьКДанным,".")<>0 Тогда
				Измерения.Вставить(Сред(Измерение.ПутьКДанным,0, Найти(Измерение.ПутьКДанным,".")-1),истина);
			Иначе
				Измерения.Вставить(Измерение.ПутьКДанным,истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для каждого Отбор из ПостроительОтчета.Отбор Цикл
		Если Отбор.Использование и Отбор.Имя<>"" Тогда
			ОтборЕсть = истина;
		КонецЕсли;
	КонецЦикла;
	
	Пока Номер <= КолСубкнотоНаСчету Цикл
		ИмяСубконто = "Субконто"+Номер;
		ЕстьИзмерение = Измерения.Получить(ИмяСубконто)<>неопределено;
		Если ПостроительОтчета.Отбор.Найти(ИмяСубконто)<> неопределено Тогда
			ОтборВключен = ПостроительОтчета.Отбор.Найти(ИмяСубконто).Использование;
		Иначе
			ОтборВключен = ложь;
		КонецЕсли;	
		
		ПропущенОтбор = (Номер<>1) И ((ОтборВключен и НеБылоОтбора));
		
		Если (ПропущеноИзмерение и ЕстьИзмерение)
			ИЛИ (ОтборВключен И не ЕстьИзмерение) 
			ИЛИ ((ПропущенОтбор и ОтборВключен) и не ПропущеноИзмерение)Тогда
			ИспользоватьОтборПоВидамСубконто = ложь;
			Прервать;
		КонецЕсли;
		
		ПропущеноИзмерение = (Не ЕстьИзмерение) и (не ПропущеноИзмерение);
		НеБылоОтбора = ((Не ОтборВключен) или НеБылоОтбора);
		Номер = номер + 1;
		
	КонецЦикла;
	
	ТекстОтбораПоВидамСубконто="";
	Если ИспользоватьОтборПоВидамСубконто И ОтборЕсть Тогда
		Номер = 1;
		ВидыСубконто = новый массив;
		Пока Номер <= КолСубкнотоНаСчету Цикл
			ИмяСубконто = "Субконто"+Номер;
			Если Измерения.Получить(ИмяСубконто)=неопределено Тогда
				прервать;
			КонецЕсли;
			ВидыСубконто.Добавить(Счет.ВидыСубконто[номер-1].ВидСубконто);
			Номер = номер + 1;
		КонецЦикла;
		Запрос.УстановитьПараметр("ВидыСубконто",ВидыСубконто);
		ТекстОтбораПоВидамСубконто = "&ВидыСубконто";
	КонецЕсли;	
	
	Возврат ТекстОтбораПоВидамСубконто;
	
КонецФункции

// функция приводит значение из выборки к числу
Функция ПривестиКЧислу(Значение) Экспорт
	
	Если Значение = NULL Тогда
		Возврат 0;
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

// Формирует строку ограничений по датам отчета для показа в заголовке формы
//
// Параметры:
//	ДатаНач
//  ДатаКон
Функция СформироватьСтрокуОграниченийПоДатамДляФормы(Знач ДатаНач, Знач ДатаКон) Экспорт

	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда

		ОписаниеПериода     = "Период не установлен";

	Иначе

		Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда

			ОписаниеПериода = "" + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""...""") 
							+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

		Иначе

			Если ДатаНач <= ДатаКон Тогда
				ОписаниеПериода = "" + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
			Иначе
				ОписаниеПериода = "Неправильно задан период!"
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат ОписаниеПериода;

КонецФункции

//процедура формирует заголовок отчета
Процедура СформироватьИВывестиЗаголовокОтчета(ОтчетОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок) Экспорт
	
	ОбластьЗаголовка = ОтчетОбъект.СформироватьЗаголовок();
	ВысотаЗаголовка = ОбластьЗаголовка.ВысотаТаблицы;
	ДокументРезультат.Вывести(ОбластьЗаголовка, 1);
	
	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;
	
КонецПроцедуры

//Функция возвращает корректные или нет ограничения по датам для отчета
// в случае если ограничения не корректны - выдается предупреждение
Функция ПроверитьКорректностьОграниченийПоДатам(Знач ДатаНач, Знач ДатаКон, Знач ВыдаватьПредупреждение = Истина) Экспорт
	
	// Проверка на пустые значения
	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда

		Если ВыдаватьПредупреждение Тогда 
			Предупреждение("Дата начала периода не может быть больше даты конца периода");
		КонецЕсли;
	
		Возврат Ложь;

	КонецЕсли;
	
	Возврат Истина;

КонецФункции

//Процедура формирует строку ограничений для выборки из таблицы оборотов и остатков регистров бухгалтерии
Процедура ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграничения, Знач ИмяОграниченияПоРеквизиту, Знач ОграничениеПоРеквизиту) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОграничениеПоРеквизиту) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНовогоОграничения = ИмяОграниченияПоРеквизиту + " = &" + ИмяОграниченияПоРеквизиту + " ";
	
	СтрокаОграничения = ОбъединитьОграничения(СтрокаОграничения, СтрокаНовогоОграничения);
    
КонецПроцедуры

//Функция Объединяет ограничения
Функция ОбъединитьОграничения(Знач Ограничение1, Знач Ограничение2, Знач СтрокаОбъединенияОграничений = "И") Экспорт
	
	Если ПустаяСтрока(Ограничение1) Тогда
		Возврат Ограничение2;
	КонецЕсли;
	
	Если ПустаяСтрока(Ограничение2) Тогда
		Возврат Ограничение1;
	КонецЕсли;
	
	СтрокаОграничения = Ограничение1 + " " + СтрокаОбъединенияОграничений + " " + Ограничение2;
	
	Возврат СтрокаОграничения;
	
КонецФункции

// процедура обрабатывает выпод заголовка
Процедура ОбработатьВыводЗаголовка(Форма, ОтчетОбъект, ВысотаЗаголовка, ПоказыватьЗаголовок) Экспорт

	// Перезаполнять заголовок можно только у "чистого" отчета
	Если Форма.ЭлементыФормы.ДокументРезультат.ВысотаТаблицы = 0 Тогда

		ОбластьЗаголовка = ОтчетОбъект.СформироватьЗаголовок();
		ВысотаЗаголовка = ОбластьЗаголовка.ВысотаТаблицы;
		Форма.ЭлементыФормы.ДокументРезультат.Вывести(ОбластьЗаголовка);
		
	КонецЕсли;

    Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		Форма.ЭлементыФормы.ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	УправлениеПометкамиКнопокЗаголовковКоманднойПанели(Форма, ПоказыватьЗаголовок);
	
КонецПроцедуры

// Управляет пометками кнопок ком. панели
//
// Параметры:
//	ФормаОтчета
//  ПоказыватьЗаголовок - булево. Отображать пометку или нет
Процедура УправлениеПометкамиКнопокЗаголовковКоманднойПанели(ФормаОтчета, Знач ПоказыватьЗаголовок) Экспорт
	
	ФормаОтчета.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = ПоказыватьЗаголовок;
	ФормаОтчета.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = ПоказыватьЗаголовок;
    	
КонецПроцедуры

Процедура ДобавитьГруппировкуПоПериоду(ОтчетОбъект, Структура) Экспорт
	
	Если ОтчетОбъект.Периодичность > 0 Тогда
		Если ТипЗнч(Структура) = Тип("ГруппировкаКомпоновкиДанных") Тогда 
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ИначеЕсли ТипЗнч(Структура) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Структура = Структура.Структура.Добавить();
		КонецЕсли;
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(?(ОтчетОбъект.Периодичность = 2, "Регистратор", "Период"));		
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
		Если ОтчетОбъект.Периодичность = 2 Тогда
			ТиповыеОтчеты.ДобавитьОтбор(Структура.Отбор, "Регистратор", 0, ВидСравненияКомпоновкиДанных.Заполнено);
			ТиповыеОтчеты.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Тип - определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик
Функция ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Тип = 1) Экспорт
	
	НастройкаСсылка = ПолучитьСохраненнуюНастройкуСчетовИсключаемыхИзРасчетаЗадолженности(Тип);
	
	Если НастройкаСсылка <> Неопределено Тогда
		Возврат НастройкаСсылка.ХранилищеНастроек.Получить();
	КонецЕсли;
	
КонецФункции

// Тип - определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик
Функция ПолучитьСохраненнуюНастройкуСчетовИсключаемыхИзРасчетаЗадолженности(Тип = 1) 
	
	Если Тип = 1 Тогда
		НастраиваемыйОбъект = "ОтчетыДляРуководителя.СчетаИсключаемыеИзРасчетаЗадолженностиПокупателей";
	ИначеЕсли Тип = 2 Тогда
		НастраиваемыйОбъект = "ОтчетыДляРуководителя.СчетаИсключаемыеИзРасчетаЗадолженностиПоставщикам";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Ссылка
	|ИЗ
	|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроек.ПроизвольныеНастройки)
	|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект
	|	И СохраненныеНастройки.Пользователи.Пользователь = &Пользователь
	|	И (НЕ СохраненныеНастройки.ПометкаУдаления)";
	Запрос.УстановитьПараметр("Пользователь"       , глЗначениеПеременной("глТекущийПользователь"));
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", НастраиваемыйОбъект);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0].Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ОбработатьОтборПриСменеСчета(СчетСтарый, СчетНовый, КомпоновщикНастроек) Экспорт
	
	// Добавление неактивных отборов по субконто в соответствии с выбранным счетом
	
	ПризнакУчетаВалютный        = ?(СчетНовый.Метаданные().ПризнакиУчета.Найти("Валютный") = Неопределено, Ложь, Истина);
	ИмяПоляПрефикс              = "Субконто";
	КоличествоСубконто          = СчетНовый.ВидыСубконто.Количество();
	ВедётсяУчетПоПодразделениям = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СчетСтарый", СчетСтарый);
	СтруктураПараметров.Вставить("СчетНовый" , СчетНовый);
	СтруктураПараметров.Вставить("КомпоновщикНастроек" , КомпоновщикНастроек);
	СтруктураПараметров.Вставить("ПризнакУчетаВалютный", ПризнакУчетаВалютный);
	СтруктураПараметров.Вставить("КоличествоСубконто"  , КоличествоСубконто);
	СтруктураПараметров.Вставить("ИмяПоляПрефикс"      , ИмяПоляПрефикс);
	
	ОтборыДляУдаления = Новый Массив;
	
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
			 ИЛИ (ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			 И (Найти(ЭлементОтбора.ЛевоеЗначение, "Субконто") > 0
			 ИЛИ Строка(ЭлементОтбора.ЛевоеЗначение) = "Валюта"
			 ИЛИ (Найти(ЭлементОтбора.ЛевоеЗначение, "Подразделение") = 1
			 И НЕ ВедётсяУчетПоПодразделениям))) Тогда
			 
			ОтборыДляУдаления.Добавить(ЭлементОтбора);
			
		КонецЕсли;
			
	КонецЦикла;

	КонецМассива = ОтборыДляУдаления.ВГраница();
	Для ИндексМассив = 0 По КонецМассива Цикл
		
		ТекущийИндекс = КонецМассива - ИндексМассив;
		ЭлементОтбора = ОтборыДляУдаления[ТекущийИндекс];
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
		
		Удалять = Истина;
		
		Если СчетСтарый <> Неопределено
			 И (НЕ СчетСтарый.Ссылка.Пустая()) Тогда
			 
			 Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				 Удалять = ОбработатьГруппуОтбора(ЭлементОтбора, СтруктураПараметров);
			 Иначе
				 Удалять = ОбработатьЭлементОтбора(ЭлементОтбора, СтруктураПараметров);
			 КонецЕсли;
			 
		КонецЕсли;
		
		Если Удалять Тогда
			ОтборыДляУдаления.Удалить(ТекущийИндекс);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПараметров.Вставить("ГруппаОтбора", Неопределено);
		
	Для Каждого ЭлементОтбора Из ОтборыДляУдаления Цикл
			
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ДобавитьГруппуОтбора(ЭлементОтбора, СтруктураПараметров);
		Иначе
			ДобавитьЭлементОтбора(ЭлементОтбора, СтруктураПараметров);
		КонецЕсли;
			
	КонецЦикла;
	
	ОбязательныеПоляОтбора = Новый Массив;
	Для Индекс = 1 По КоличествоСубконто Цикл
		ОбязательныеПоляОтбора.Добавить(Новый ПолеКомпоновкиДанных(ИмяПоляПрефикс + Индекс));
	КонецЦикла;
	Если ПризнакУчетаВалютный И СчетНовый.Валютный Тогда
		ОбязательныеПоляОтбора.Добавить(Новый ПолеКомпоновкиДанных("Валюта"));
	КонецЕсли;
	
	ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		ТекущееПолеКомпоновки = ЭлементОтбора.ЛевоеЗначение;
		Индекс = ОбязательныеПоляОтбора.Найти(ТекущееПолеКомпоновки);
		Если Индекс <> Неопределено Тогда
			ОбязательныеПоляОтбора.Удалить(Индекс);
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого Поле Из ОбязательныеПоляОтбора Цикл
		ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Поле);
		ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек, Строка(Поле), ДоступноеПоле.Тип.ПривестиЗначение(Неопределено), , Ложь);
	КонецЦикла;
					
КонецПроцедуры

Функция ОбработатьГруппуОтбора(ГруппаЭлементовОтбора, СтруктураПараметров)
	
	ЭлементыГруппы = ГруппаЭлементовОтбора.Элементы;
	КонечныйИндекс = ЭлементыГруппы.Количество() - 1;
	Для Индекс = 0 По КонечныйИндекс Цикл
		ТекущийИндекс = КонечныйИндекс - Индекс;
		Элемент = ЭлементыГруппы[ТекущийИндекс];
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			УдалятьГруппу = ОбработатьГруппуОтбора(Элемент, СтруктураПараметров);
			Если УдалятьГруппу Тогда
				ЭлементыГруппы.Удалить(Элемент);
			КонецЕсли;	
		Иначе
			УдалятьЭлемент = ОбработатьЭлементОтбора(Элемент, СтруктураПараметров);
			Если УдалятьЭлемент Тогда
				ЭлементыГруппы.Удалить(Элемент);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Если ГруппаЭлементовОтбора.Элементы.Количество() = 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ОбработатьЭлементОтбора(ЭлементОтбора, СтруктураПараметров)
	
	СчетСтарый = СтруктураПараметров.СчетСтарый;
	СчетНовый  = СтруктураПараметров.СчетНовый;
	КоличествоСубконто   = СтруктураПараметров.КоличествоСубконто;
	КомпоновщикНастроек  = СтруктураПараметров.КомпоновщикНастроек;
	ПризнакУчетаВалютный = СтруктураПараметров.ПризнакУчетаВалютный;
	
	Удалять = Истина;
	
	Если ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
		
			ИмяПоляОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);
			Если (ПризнакУчетаВалютный
				 И СчетНовый.Валютный
				 И Найти(ИмяПоляОтбора, "Валюта") > 0)
				 ИЛИ Найти(ИмяПоляОтбора, "Подразделение") > 0 Тогда
			    Удалять = Ложь;
			ИначеЕсли Найти(ИмяПоляОтбора, "Субконто") > 0 Тогда    
				ИндексСубконто = Число(Сред(ИмяПоляОтбора, 9, 1)) - 1;
				// Субконто может иметь составной тип,
				// ТипыСубконтоОтбора - возможные типы старого Субконто
				ТипыСубконтоОтбора = СчетСтарый.ВидыСубконто[ИндексСубконто].ВидСубконто.ТипЗначения.Типы();
				// проверим вхождение типов старых Субконто в типы новых Субконто 
				Для Индекс = 0 По КоличествоСубконто - 1 Цикл
					// ТипСубконто - набор типов нового Субконто 
					ТипСубконто = СчетНовый.ВидыСубконто[Индекс].ВидСубконто.ТипЗначения;
					Для Каждого ТипСубконтоОтбора Из ТипыСубконтоОтбора Цикл
						Если ТипСубконто.СодержитТип(ТипСубконтоОтбора) Тогда
							
							Если СтрДлина(ИмяПоляОтбора) > 9 Тогда   // т.е. отбор по одному из реквизитов Субконто - "СубконтоN. ..."
								// проверим возможность установки отбора для нового Субконто
								// по полю ИмяПоляОтбора 
								ДоступныеЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы;
								ДоступноеПолеОтбораПоСубконто = ДоступныеЭлементыОтбора.Найти("Субконто" + Строка(Индекс + 1));
								Если ДоступноеПолеОтбораПоСубконто <> Неопределено Тогда
									ДоступныеПоляСубконто = ДоступноеПолеОтбораПоСубконто.Элементы;
									ПолеОтбора = ДоступныеПоляСубконто.Найти("Субконто" + Строка(Индекс + 1) + Сред(ИмяПоляОтбора, 10));
									Если ПолеОтбора <> Неопределено Тогда
										Удалять = Ложь;
									КонецЕсли;
								КонецЕсли;
							Иначе  // т.е. отбор непосредственно по Субконто
								Если ТипСубконтоОтбора = Тип("СправочникСсылка.Субконто") Тогда
									СубконтоВладелец = ЭлементОтбора.ПравоеЗначение.Владелец;
									Если СчетНовый.ВидыСубконто.Найти(СубконтоВладелец, "ВидСубконто") <> Неопределено Тогда
										Удалять = Ложь;
									КонецЕсли;	
								Иначе
									Удалять = Ложь;
								КонецЕсли;	
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			Иначе
				Удалять = Ложь;
			КонецЕсли;
		
	КонецЕсли;
	
	Возврат Удалять;
	
КонецФункции

Функция ДобавитьГруппуОтбора(ГруппаЭлементовОтбора, СтруктураПараметров)
	
	КомпоновщикНастроек  = СтруктураПараметров.КомпоновщикНастроек;
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	
	НоваяГруппа                = Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	НоваяГруппа.Использование  = ГруппаЭлементовОтбора.Использование;
	НоваяГруппа.ТипГруппы 	   = ГруппаЭлементовОтбора.ТипГруппы;
	
	СтруктураПараметров.ГруппаОтбора = НоваяГруппа;

	ЭлементыГруппы = ГруппаЭлементовОтбора.Элементы;
	Для Каждого Элемент Из ЭлементыГруппы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ДобавитьГруппуОтбора(Элемент, СтруктураПараметров);
		Иначе
			ДобавитьЭлементОтбора(Элемент, СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПараметров.ГруппаОтбора = Неопределено;
	
КонецФункции

Процедура ДобавитьЭлементОтбора(ЭлементОтбора, СтруктураПараметров)
	
	СчетСтарый = СтруктураПараметров.СчетСтарый;
	СчетНовый  = СтруктураПараметров.СчетНовый;
	КоличествоСубконто   = СтруктураПараметров.КоличествоСубконто;
	КомпоновщикНастроек  = ?(СтруктураПараметров.ГруппаОтбора = Неопределено, СтруктураПараметров.КомпоновщикНастроек, СтруктураПараметров.ГруппаОтбора);
	ПризнакУчетаВалютный = СтруктураПараметров.ПризнакУчетаВалютный;
	ИмяПоляПрефикс       = СтруктураПараметров.ИмяПоляПрефикс;
	
	ИмяПоляОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);
	
	Если Найти(ИмяПоляОтбора, "Субконто") > 0 Тогда
		Для Индекс = 1 По КоличествоСубконто Цикл
			ТипСубконтоНовый = СчетНовый.ВидыСубконто[Индекс-1].ВидСубконто.ТипЗначения;
			Если СтрДлина(ИмяПоляОтбора) = 9 Тогда
				Если ТипСубконтоНовый.СодержитТип(ТипЗнч(ЭлементОтбора.ПравоеЗначение)) Тогда
					Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Субконто") Тогда
						Если СчетНовый.ВидыСубконто[Индекс-1].ВидСубконто = ЭлементОтбора.ПравоеЗначение.Владелец Тогда
							ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек, ИмяПоляПрефикс + Индекс, ЭлементОтбора.ПравоеЗначение, ЭлементОтбора.ВидСравнения, ЭлементОтбора.Использование);	
						КонецЕсли;	 
					Иначе
						ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек, ИмяПоляПрефикс + Индекс, ЭлементОтбора.ПравоеЗначение, ЭлементОтбора.ВидСравнения, ЭлементОтбора.Использование);	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтрДлина(ИмяПоляОтбора) > 9 Тогда
				ИндексСубконто = Число(Сред(ИмяПоляОтбора, 9, 1)) - 1;
				ТипыСубконтоСтарые = СчетСтарый.ВидыСубконто[ИндексСубконто].ВидСубконто.ТипЗначения.Типы();
				Для Каждого ТипСубконтоСтарый Из ТипыСубконтоСтарые Цикл
					Если ТипСубконтоНовый.СодержитТип(ТипСубконтоСтарый) Тогда
						ИмяПоляПостФикс = Сред(ИмяПоляОтбора, 10);
						ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек, ИмяПоляПрефикс + Индекс + ИмяПоляПостФикс, ЭлементОтбора.ПравоеЗначение, ЭлементОтбора.ВидСравнения, ЭлементОтбора.Использование);	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Найти(Строка(ЭлементОтбора.ЛевоеЗначение), "Валюта") > 0
		 И ПризнакУчетаВалютный И СчетНовый.Валютный Тогда
		ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек, "Валюта", ЭлементОтбора.ПравоеЗначение, ЭлементОтбора.ВидСравнения, ЭлементОтбора.Использование);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОФОРМЛЕНИЕМ ГРУППИРОВОК
////////////////////////////////////////////////////////////////////////////////

//Процедура ОбработатьОформлениеГруппировок(ОтчетОбъект, ФормаОтчета = Неопределено) Экспорт
Процедура ОбработатьОформлениеГруппировок(ФормаОтчета, ТаблицаГруппировки) Экспорт
	
	// Получим началный размер шрифта для настройки оформления
	УсловноеОформление = ФормаОтчета.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы;
	//УсловноеОформление = ОтчетОбъект.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы;
	
	РазмерШрифта = 8;
	Для Каждого Элемент Из УсловноеОформление Цикл
		Если Найти(Элемент.Представление, "Основной шрифт") <> 0
			 И Элемент.Использование Тогда
			 
			ШрифтОсновной = Элемент.Оформление.Элементы.Найти("Шрифт");
			РазмерШрифта = ШрифтОсновной.Значение.Размер;
			
		КонецЕсли;
	КонецЦикла;
	
	// Проверим, есть ли в отчете группировка по периоду
	ГруппировкаПериод = 0;
	//Если ФормаОтчета <> Неопределено Тогда
	ЭлементУправления = ФормаОтчета.ЭлементыФормы.Найти("Периодичность");
	Если ЭлементУправления <> Неопределено Тогда
		Попытка
			Если (ТипЗнч(ЭлементУправления.Значение) = Тип("Число"))
				 И (ЭлементУправления.Значение <> 0) Тогда
				ГруппировкаПериод = 1;
			Иначе
				ГруппировкаПериод = 0;
			КонецЕсли;
		Исключение
			ГруппировкаПериод = 0;
		КонецПопытки;
	Иначе
		ГруппировкаПериод = 0;
	КонецЕсли;
	//КонецЕсли;
	
	Жирный = ?(ГруппировкаПериод = 1, Истина, Ложь);
	//МаксИндекс = ДанныеОтчета.Группировка.Количество() - 1;
	//МаксИндекс = ФормаОтчета.Группировка.Количество() - 1;
	МаксИндекс = ТаблицаГруппировки.Количество() - 1;
	Для  Индекс = 0 По МаксИндекс Цикл

		Группировка = ТаблицаГруппировки.Получить(МаксИндекс - Индекс);
		
		Если НЕ Группировка.ПоУмолчанию Тогда
			Жирный = НЕ Жирный;
			Продолжить;
		КонецЕсли;
		
		Если НЕ Группировка.Использование Тогда
			Жирный = НЕ Жирный;
			Продолжить;
		КонецЕсли;
		
		Если Группировка.Оформление <> Неопределено Тогда
			 
			Для Каждого ЭлементОформления Из Группировка.Оформление Цикл
				ЭлементОформления.Использование = Ложь; 
			КонецЦикла;
			
			Группировка.Оформление.Шрифт.Использование = Истина;
			
			НовыйШрифт = Группировка.Оформление.Шрифт;
			НовыйШрифт.Значение = Новый Шрифт( , РазмерШрифта, Жирный);
			
		КонецЕсли;
		
		Если Жирный И РазмерШрифта < 14 Тогда
			РазмерШрифта = РазмерШрифта + 1;
		КонецЕсли;
		Жирный = НЕ Жирный;
		
	КонецЦикла;
	                                                                                   
КонецПроцедуры

Процедура ДополнитьОформлениеОтчета(НастройкиКомпоновщика = Неопределено, ТаблицаГруппировок = Неопределено) Экспорт
	
	Если ТаблицаГруппировок <> Неопределено Тогда
		Если ТаблицаГруппировок.Колонки.Найти("Оформление") = Неопределено Тогда
			ТаблицаГруппировок.Колонки.Добавить("Оформление", Новый ОписаниеТипов("НастройкаОформления"));
		КонецЕсли;
		Если ТаблицаГруппировок.Колонки.Найти("ПоУмолчанию") = Неопределено Тогда
			ТаблицаГруппировок.Колонки.Добавить("ПоУмолчанию", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиКомпоновщика <> Неопределено Тогда
		ЭлементыУсловногоОформления = НастройкиКомпоновщика.УсловноеОформление.Элементы;
		ОформлениеОсновнойШрифт = Ложь;
		Для Каждого Элемент Из ЭлементыУсловногоОформления Цикл
			Если Найти(Элемент.Представление, "Основной шрифт") <> 0 Тогда
				ОформлениеОсновнойШрифт = Истина;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ОформлениеОсновнойШрифт Тогда
			НовоеОформление = ЭлементыУсловногоОформления.Добавить();
			НовоеОформление.Использование = Ложь;   //  Истина;
			
			ШрифтИсходный = НовоеОформление.Оформление.Элементы.Найти("Шрифт").Значение;
			ШрифтНовый = Новый Шрифт(ШрифтИсходный, , 9);
			ТиповыеОтчеты.УстановитьПараметр(НовоеОформление.Оформление.Элементы, "Шрифт", ШрифтНовый);
			НовоеОформление.Представление = "Основной шрифт";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОформитьЯчейкуШапкиТаблицы(ЯчейкаОбласти, ЦентрПоГоризонтали = Ложь, ЦентрПоВертикали = Ложь) Экспорт
		
	ТекущийШрифт = ТиповыеОтчеты.ПолучитьПараметр(ЯчейкаОбласти.Оформление.Элементы, "Шрифт").Значение;
	ЖирныйШрифт = Новый Шрифт(ТекущийШрифт, , , Истина);
	ТиповыеОтчеты.УстановитьПараметр(ЯчейкаОбласти.Оформление.Элементы, "Шрифт", ЖирныйШрифт);
	
	Если ЦентрПоГоризонтали Тогда
		ТиповыеОтчеты.УстановитьПараметр(ЯчейкаОбласти.Оформление.Элементы, "ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
	КонецЕсли;
	Если ЦентрПоВертикали Тогда
		ТиповыеОтчеты.УстановитьПараметр(ЯчейкаОбласти.Оформление.Элементы, "ВертикальноеПоложение", ВертикальноеПоложение.Центр);
	КонецЕсли;
		
КонецПроцедуры

Процедура ОформитьКолонкуШапкиТаблицы(ТелоКолонки, МакетКомпоновки, ЦентрПоГоризонтали = Ложь, ЦентрПоВертикали = Ложь) Экспорт
	
	Если ТипЗнч(ТелоКолонки) = Тип("МакетГруппировкиТаблицыМакетаКомпоновкиДанных") Тогда
		Для Каждого СтрокаМакета Из МакетКомпоновки.Макеты[ТелоКолонки.Макет].Макет Цикл
			Для Каждого Ячейка Из СтрокаМакета.Ячейки Цикл
				ОформитьЯчейкуШапкиТаблицы(Ячейка, ЦентрПоГоризонтали, ЦентрПоВертикали);
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ТелоКолонки) = Тип("ГруппировкаТаблицыМакетаКомпоновкиДанных") Тогда
		Для Каждого ТелоКолонкиГруппировки Из ТелоКолонки.Тело Цикл
			ОформитьКолонкуШапкиТаблицы(ТелоКолонкиГруппировки, МакетКомпоновки, ЦентрПоГоризонтали, ЦентрПоВертикали);
		КонецЦикла;
		Для Каждого ТелоИерархииКолонкиГруппировки Из ТелоКолонки.ТелоИерархии Цикл
			ОформитьКолонкуШапкиТаблицы(ТелоИерархииКолонкиГруппировки, МакетКомпоновки, ЦентрПоГоризонтали, ЦентрПоВертикали);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОтображениеГруппировок(ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	СтруктураОформления = Новый Структура;
	
	Если ДанныеСтроки.Оформление["ЦветТекста"].Использование Тогда
		ЦветТекстаГруппировки = ?(ДанныеСтроки.Использование,
		                          ДанныеСтроки.Оформление["ЦветТекста"].Значение,
								  СтандартныеОтчеты.ПолучитьЦветНеИспользуемогоЭлемента());
		СтруктураОформления.Вставить("ЦветТекста", ЦветТекстаГруппировки);
	КонецЕсли;
	Если ДанныеСтроки.Оформление["ЦветФона"].Использование Тогда
		СтруктураОформления.Вставить("ЦветФона", ДанныеСтроки.Оформление["ЦветФона"].Значение);
	КонецЕсли;
	Если ДанныеСтроки.Оформление["Шрифт"].Использование Тогда
		СтруктураОформления.Вставить("Шрифт", ДанныеСтроки.Оформление["Шрифт"].Значение);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки, СтруктураОформления);
	
КонецПроцедуры

Процедура ДобавитьКнопкуОтображатьОформление(ДобавитьКнопку, КоманднаяПанель) Экспорт
	
	Если ДобавитьКнопку И КоманднаяПанель.Кнопки.Найти("ОтобразитьОформление") = Неопределено Тогда
		НовоеДействие = Новый Действие("ВключитьВыключитьОтображениеОформленияГруппировок");
		ТипКнопки = ТипКнопкиКоманднойПанели.Действие; 
		НоваяКнопка = КоманднаяПанель.Кнопки.Добавить(,ТипКнопки,,НовоеДействие);
		НоваяКнопка.Имя = "ОтобразитьОформление";
		НоваяКнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
		НоваяКнопка.Картинка    = БиблиотекаКартинок.УсловноеОформлениеКомпоновкиДанных;
		НоваяКнопка.Подсказка   = "Отобразить оформление группировок";
		НоваяКнопка.Пояснение   = "Отобразить оформление группировок";
		НоваяКнопка.Пометка     = Ложь;
	ИначеЕсли НЕ ДобавитьКнопку Тогда
		КнопкаПанели = КоманднаяПанель.Кнопки.Найти("ОтобразитьОформление");
		Если КнопкаПанели <> Неопределено Тогда
			КоманднаяПанель.Кнопки.Удалить(КнопкаПанели);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОформлениеГруппировки(СтрокаГруппировки = Неопределено, СтруктураКомпоновщикаНастроек, КомпоновщикНастроек = Неопределено, ИспользоватьОформлениеГруппировок = Ложь) Экспорт
	
	Если НЕ ИспользоватьОформлениеГруппировок Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаГруппировки <> Неопределено
		И СтрокаГруппировки.Оформление <> Неопределено
		И Строка(СтрокаГруппировки.Оформление) <> "" Тогда
		
		НовоеОформление = СтруктураКомпоновщикаНастроек.УсловноеОформление.Элементы.Добавить();
		НовоеОформление.Использование = Истина;
		
		Для Каждого ЭлементОформления Из СтрокаГруппировки.Оформление Цикл
			Если ЭлементОформления.Использование Тогда
				ЭлементОформленияКомпоновки = НовоеОформление.Оформление.Элементы.Найти(ЭлементОформления.Имя);
				Если ЭлементОформленияКомпоновки <> Неопределено Тогда
					ЭлементОформленияКомпоновки.Значение = ЭлементОформления.Значение;
					ЭлементОформленияКомпоновки.Использование = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
			
			НовоеОформление = СтруктураКомпоновщикаНастроек.УсловноеОформление.Элементы.Добавить();
			НовоеОформление.Использование = Истина;
			
			Для Каждого ЭлементОформления Из СтрокаГруппировки.Оформление Цикл
				Если ЭлементОформления.Использование Тогда
					ЭлементОформленияКомпоновки = НовоеОформление.Оформление.Элементы.Найти(ЭлементОформления.Имя);
				// Выделяем группы курсивом
					Если ЭлементОформления.Имя = "Шрифт" Тогда
						ИсходныйШрифт = ЭлементОформления.Значение;
						НовыйШрифт = Новый Шрифт(ИсходныйШрифт, , , , Истина);
						ЭлементОформленияКомпоновки.Значение = НовыйШрифт;
						ЭлементОформленияКомпоновки.Использование = Истина;
					Иначе
						ЭлементОформленияКомпоновки.Значение = ЭлементОформления.Значение;
						ЭлементОформленияКомпоновки.Использование = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			РеквизитДляОтбора = ?((СтрокаГруппировки.Поле = Новый ПолеКомпоновкиДанных("Счет"))
			                       ИЛИ (СтрокаГруппировки.Поле = Новый ПолеКомпоновкиДанных("СчетНУ")),
								   ".ЗапретитьИспользоватьВПроводках",
								   ".ЭтоГруппа");
			
			ТиповыеОтчеты.ДобавитьОтбор(НовоеОформление.Отбор, Строка(СтрокаГруппировки.Поле) + РеквизитДляОтбора, Истина);
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаГруппировки = Неопределено
		И КомпоновщикНастроек <> Неопределено Тогда
		
		УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы;
		РазмерШрифта = 0;
		Для Каждого Элемент Из УсловноеОформление Цикл
			Если Найти(Элемент.Представление, "Основной шрифт") <> 0
				 И Элемент.Использование Тогда
				
				ШрифтОсновной = Элемент.Оформление.Элементы.Найти("Шрифт");
				РазмерШрифта = ШрифтОсновной.Значение.Размер;
				
			КонецЕсли;
		КонецЦикла;
		
		Если РазмерШрифта > 0 Тогда
			
			НовоеОформление = СтруктураКомпоновщикаНастроек.УсловноеОформление.Элементы.Добавить();
			НовоеОформление.Использование = Истина;
			
			Шрифт = НовоеОформление.Оформление.Элементы.Найти("Шрифт");
			Шрифт.Значение      = Новый Шрифт( , РазмерШрифта, );
			Шрифт.Использование = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РазобратьСтруктуруКомпоновщикаНастроек(СтруктураДляРазбора, ТаблицаГруппировок) Экспорт
	Для Каждого ЭлементСтруктуры Из СтруктураДляРазбора Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
			И ЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() > 0 Тогда 
            НоваяСтрока = ТаблицаГруппировок.Добавить();
			НоваяСтрока.Группировка = ЭлементСтруктуры;
			НоваяСтрока.Поле        = ЭлементСтруктуры.ПоляГруппировки.Элементы[0].Поле;
			Если ЭлементСтруктуры.Структура.Количество() > 0 Тогда
				РазобратьСтруктуруКомпоновщикаНастроек(ЭлементСтруктуры.Структура, ТаблицаГруппировок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

Процедура ВыводЗаголовкаСпециализированногоОтчетаСПодписью(ОтчетОбъект, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("ОрганизацияСПодписью");
	
	// Организация
	Если ЗначениеЗаполнено(ОтчетОбъект.мСписокСтруктурныхЕдиниц) Тогда
		ТекстОрганизация = ПолучитьТекстОрганизация(ОтчетОбъект);
		ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
		
		ВыбиратьОрганизацию = Ложь;
		Попытка
			мСписокСтруктурныхЕдиниц = ОтчетОбъект.мСписокСтруктурныхЕдиниц;
			Если мСписокСтруктурныхЕдиниц.Количество() > 0 Тогда
				ВыбиратьОрганизацию = Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если ВыбиратьОрганизацию Тогда
			Если мСписокСтруктурныхЕдиниц.Количество() = 1 Тогда
				Организация = мСписокСтруктурныхЕдиниц[0].Значение;
			Иначе
				Организация = Неопределено;
			КонецЕсли;	
		Иначе
			Организация = Неопределено;
		КонецЕсли;
		
		Если Организация = Неопределено Тогда
			ОбластьОрганизация.Параметры.РукРасшифровкаПодписи = "";	
			ОбластьОрганизация.Параметры.РукДолжность = "";
		Иначе
			Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(Организация, ТекущаяДата());
			ОбластьОрганизация.Параметры.РукРасшифровкаПодписи = Руководители.Руководитель;	
			ОбластьОрганизация.Параметры.РукДолжность = Руководители.РуководительДолжность;
		КонецЕсли;
		
		Результат.Вывести(ОбластьОрганизация);
	КонецЕсли;
	
	

	
	
	// Текст заголовка
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ОтчетОбъект.ПолучитьТекстЗаголовка();
	Результат.Вывести(ОбластьЗаголовок);
	
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	
	// Отбор
	ТекстОтбор = Строка(ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор);
	ТекстОтбор = СтрЗаменить(ТекстОтбор, "И ###ОтборПоОрганизации###", "");
	ТекстОтбор = СтрЗаменить(ТекстОтбор, "###ОтборПоОрганизации### И", "");
	ТекстОтбор = СтрЗаменить(ТекстОтбор, "###ОтборПоОрганизации###", "");
	ТекстОтбор = СокрЛП(ТекстОтбор);
	
	Если Не ПустаяСтрока(ТекстОтбор) Тогда
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = "Отбор:";
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстОтбор;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	// Сортировка
	ТекстСортировка = "";
	Для Каждого СтрокаПорядок Из ОтчетОбъект.КомпоновщикНастроек.Настройки.Порядок.Элементы Цикл
		Если СтрокаПорядок.Использование Тогда
			ТекстСортировка = ТекстСортировка + ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек, СтрокаПорядок.Поле);
			ТекстСортировка = ТекстСортировка + " " + Строка(СтрокаПорядок.ТипУпорядочивания) + ", ";
		КонецЕсли;
	КонецЦикла;
	ТекстСортировка = Лев(ТекстСортировка, СтрДлина(ТекстСортировка) - 2);
	
	Если Не ПустаяСтрока(ТекстСортировка) Тогда
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = "Сортировка:";
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстСортировка;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	Результат.Области.Заголовок.Видимость = Истина;
	
КонецПроцедуры
